uint64_t bitarray_size(unsigned int a1)
{
  unsigned int v2;

  if (a1 > 0x2D) {
    __assert_rtn("bitarray_size", "bitarray.c", 283, "log_size <= MAX_LEVEL * NB");
  }
  v2 = 8;
  if (a1 > 9) {
    v2 = levels_num_words[(a1 - 10) / 9] + (1 << (a1 - 6));
  }
  return 8 * v2;
}

void *bitarray_create(unsigned int a1)
{
  size_t v1 = bitarray_size(a1);
  return j__calloc(1uLL, v1);
}

BOOL bitarray_get(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x2D) {
    __assert_rtn("bitarray_get", "bitarray.c", 301, "log_size <= MAX_LEVEL * NB");
  }
  if (a3 >= 1 << a2) {
    __assert_rtn("bitarray_get", "bitarray.c", 302, "index < (1 << log_size)");
  }
  if (a2 > 9) {
    return GET_SIMPLE(a1 + 8 * levels_num_words[(a2 - 10) / 9] + 64 * (a3 >> 9), a3 & 0x1FF);
  }
  else {
    return GET_SIMPLE(a1, a3);
  }
}

BOOL GET_SIMPLE(uint64_t a1, unsigned int a2)
{
  return word_get_bit_simple((void *)(a1 + 8 * (a2 >> 6)), a2 & 0x3F);
}

uint64_t bitarray_set(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v12 = a1;
  unsigned int v11 = a2;
  unsigned int v10 = a3;
  if (a2 >= 0x2E) {
    __assert_rtn("bitarray_set", "bitarray.c", 317, "log_size <= MAX_LEVEL * NB");
  }
  if (v10 >= 1 << v11) {
    __assert_rtn("bitarray_set", "bitarray.c", 318, "index < (1 << log_size)");
  }
  if (v11 > 9)
  {
    unsigned int v9 = (v11 - 10) / 9;
    BOOL v8 = 0;
    unsigned int v4 = v10 & 0x1FF;
    v10 >>= 9;
    if (SET_CHANGED_GO_DOWN(v12 + 8 * levels_num_words[v9] + 64 * v10, v4, &v8))
    {
      if (v8)
      {
        return 1;
      }
      else
      {
        switch(v9)
        {
          case 0u:
            goto LABEL_18;
          case 1u:
            goto LABEL_16;
          case 2u:
            goto LABEL_14;
          case 3u:
            unsigned int v5 = v10 & 0x1FF;
            v10 >>= 9;
            if (SET_GO_DOWN(v12 + 64 * v10 + 16810048, v5))
            {
LABEL_14:
              unsigned int v6 = v10 & 0x1FF;
              v10 >>= 9;
              if (SET_GO_DOWN(v12 + 64 * v10 + 32832, v6))
              {
LABEL_16:
                unsigned int v7 = v10 & 0x1FF;
                v10 >>= 9;
                if (SET_GO_DOWN(v12 + 64 * v10 + 64, v7))
                {
LABEL_18:
                  SET_SIMPLE(v12, v10 & 0x1FF);
                  unsigned __int8 v13 = 1;
                }
                else
                {
                  unsigned __int8 v13 = 1;
                }
              }
              else
              {
                unsigned __int8 v13 = 1;
              }
            }
            else
            {
              unsigned __int8 v13 = 1;
            }
            break;
          default:
            qword_C0118 = (uint64_t)"FATAL ERROR - invalid bitarray level";
            qword_C0148 = v9;
            __break(1u);
            JUMPOUT(0x1ACCLL);
        }
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return SET_CHANGED(v12, v10);
  }
  return v13;
}

uint64_t SET_CHANGED(uint64_t a1, unsigned int a2)
{
  return word_set_bit_changed((void *)(a1 + 8 * (a2 >> 6)), a2 & 0x3F) & 1;
}

uint64_t SET_CHANGED_GO_DOWN(uint64_t a1, unsigned int a2, BOOL *a3)
{
  return word_set_bit_changed_go_down((uint64_t *)(a1 + 8 * (a2 >> 6)), a2 & 0x3F, a3) & 1;
}

BOOL SET_GO_DOWN(uint64_t a1, unsigned int a2)
{
  return word_set_bit_go_down((uint64_t *)(a1 + 8 * (a2 >> 6)), a2 & 0x3F);
}

void *SET_SIMPLE(uint64_t a1, unsigned int a2)
{
  return word_set_bit_simple((void *)(a1 + 8 * (a2 >> 6)), a2 & 0x3F);
}

uint64_t bitarray_zap(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v12 = a1;
  unsigned int v11 = a2;
  unsigned int v10 = a3;
  if (a2 >= 0x2E) {
    __assert_rtn("bitarray_zap", "bitarray.c", 370, "log_size <= MAX_LEVEL * NB");
  }
  if (v10 >= 1 << v11) {
    __assert_rtn("bitarray_zap", "bitarray.c", 371, "index < (1 << log_size)");
  }
  if (v11 > 9)
  {
    unsigned int v9 = (v11 - 10) / 9;
    BOOL v8 = 0;
    unsigned int v4 = v10 & 0x1FF;
    v10 >>= 9;
    if (ZAP_CHANGED_GO_DOWN(v12 + 8 * levels_num_words[v9] + 64 * v10, v4, &v8))
    {
      if (v8)
      {
        switch(v9)
        {
          case 0u:
            goto LABEL_18;
          case 1u:
            goto LABEL_16;
          case 2u:
            goto LABEL_14;
          case 3u:
            unsigned int v5 = v10 & 0x1FF;
            v10 >>= 9;
            if (ZAP_GO_DOWN(v12 + 64 * v10 + 16810048, v5))
            {
LABEL_14:
              unsigned int v6 = v10 & 0x1FF;
              v10 >>= 9;
              if (ZAP_GO_DOWN(v12 + 64 * v10 + 32832, v6))
              {
LABEL_16:
                unsigned int v7 = v10 & 0x1FF;
                v10 >>= 9;
                if (ZAP_GO_DOWN(v12 + 64 * v10 + 64, v7))
                {
LABEL_18:
                  ZAP_SIMPLE(v12, v10 & 0x1FF);
                  unsigned __int8 v13 = 1;
                }
                else
                {
                  unsigned __int8 v13 = 1;
                }
              }
              else
              {
                unsigned __int8 v13 = 1;
              }
            }
            else
            {
              unsigned __int8 v13 = 1;
            }
            break;
          default:
            qword_C0118 = (uint64_t)"FATAL ERROR - invalid bitarray level";
            qword_C0148 = v9;
            __break(1u);
            JUMPOUT(0x1EE4);
        }
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return ZAP_CHANGED(v12, v10);
  }
  return v13;
}

uint64_t ZAP_CHANGED(uint64_t a1, unsigned int a2)
{
  return word_zap_bit_changed((void *)(a1 + 8 * (a2 >> 6)), a2 & 0x3F) & 1;
}

uint64_t ZAP_CHANGED_GO_DOWN(uint64_t a1, unsigned int a2, BOOL *a3)
{
  char v4 = word_zap_bit_changed_go_down((uint64_t *)(a1 + 8 * (a2 >> 6)), a2 & 0x3F, a3) & 1;
  if (v4 && (all_zeros(a1) & 1) == 0) {
    *a3 = 0;
  }
  return v4 & 1;
}

BOOL ZAP_GO_DOWN(uint64_t a1, unsigned int a2)
{
  BOOL v3 = word_zap_bit_go_down((uint64_t *)(a1 + 8 * (a2 >> 6)), a2 & 0x3F);
  return (!v3 || (all_zeros(a1) & 1) != 0) && v3;
}

void *ZAP_SIMPLE(uint64_t a1, unsigned int a2)
{
  return word_zap_bit_simple((void *)(a1 + 8 * (a2 >> 6)), a2 & 0x3F);
}

uint64_t bitarray_first_set(uint64_t a1, unsigned int a2)
{
  if (a2 >= 0x2E) {
    __assert_rtn("bitarray_first_set", "bitarray.c", 487, "log_size <= MAX_LEVEL * NB");
  }
  uint64_t v9 = a1;
  unsigned int v8 = FFS(a1);
  if (a2 > 9)
  {
    if (v8)
    {
      unsigned int v7 = (a2 - 1) / 9;
      unsigned int v6 = v8 - 1;
      switch(v7)
      {
        case 1u:
          break;
        case 2u:
          uint64_t v9 = a1 + 64;
          unsigned int v6 = FFS(a1 + 64 + 64 * v6) + (v6 << 9) - 1;
          break;
        case 3u:
          int v3 = FFS(a1 + 64 + 64 * v6);
          uint64_t v9 = a1 + 32832;
          unsigned int v6 = FFS(a1 + 32832 + 64 * (v3 + (v6 << 9) - 1)) + ((v3 + (v6 << 9) - 1) << 9) - 1;
          break;
        case 4u:
          int v5 = FFS(a1 + 64 + 64 * v6) + (v6 << 9) - 1;
          int v2 = FFS(a1 + 32832 + 8 * (8 * v5));
          uint64_t v9 = a1 + 16810048;
          unsigned int v6 = FFS(a1 + 16810048 + 8 * (8 * (v2 + (v5 << 9) - 1))) + ((v2 + (v5 << 9) - 1) << 9) - 1;
          break;
        default:
          qword_C0118 = (uint64_t)"FATAL ERROR - invalid bitarray level";
          qword_C0148 = v7;
          __break(1u);
          JUMPOUT(0x2354);
      }
      return (FFS(v9 + 64 * (1 << (9 * v7 - 9)) + 64 * v6) + (v6 << 9));
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return v8;
  }
}

uint64_t FFS(uint64_t a1)
{
  for (unsigned int i = 0; i < 8; ++i)
  {
    int v2 = __ffsll(*(void *)(a1 + 8 * i));
    if (v2) {
      return v2 + (i << 6);
    }
  }
  return 0;
}

uint64_t bitarray_zap_first_set(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  uint64_t v20 = a1;
  unsigned int v19 = a2;
  v18 = a3;
  if (a2 >= 0x2E) {
    __assert_rtn("bitarray_zap_first_set", "bitarray.c", 507, "log_size <= MAX_LEVEL * NB");
  }
  uint64_t v17 = v20;
  unsigned int v16 = FFS(v20);
  if (v16)
  {
    unsigned int v15 = (v19 - 1) / 9;
    if (v15)
    {
      unsigned int v14 = v16 - 1;
      switch(v15)
      {
        case 1u:
          break;
        case 2u:
          v17 += 64;
          unsigned int v14 = FFS(v17 + 64 * v14) + (v14 << 9) - 1;
          break;
        case 3u:
          v17 += 64;
          int v5 = FFS(v17 + 64 * v14);
          v17 += 0x8000;
          unsigned int v14 = FFS(v17 + 64 * (v5 + (v14 << 9) - 1)) + ((v5 + (v14 << 9) - 1) << 9) - 1;
          break;
        case 4u:
          v17 += 64;
          int v3 = FFS(v17 + 64 * v14);
          v17 += 0x8000;
          int v8 = v3 + (v14 << 9) - 1;
          int v4 = FFS(v17 + 8 * (8 * v8));
          v17 += 0x1000000;
          unsigned int v14 = FFS(v17 + 8 * (8 * (v4 + (v8 << 9) - 1))) + ((v4 + (v8 << 9) - 1) << 9) - 1;
          break;
        default:
          qword_C0118 = (uint64_t)"FATAL ERROR - invalid bitarray level";
          qword_C0148 = v15;
          __break(1u);
          JUMPOUT(0x2738);
      }
      v17 += 64 * (1 << (9 * v15 - 9));
      unsigned int v14 = FFS(v17 + 64 * v14) + (v14 << 9) - 1;
      unsigned int v16 = v14;
      unsigned int *v18 = v14;
      if (v16 >= 1 << v19) {
        __assert_rtn("bitarray_zap_first_set", "bitarray.c", 526, "ix < (1 << log_size)");
      }
      --v15;
      BOOL v13 = 0;
      unsigned int v12 = v16 & 0x1FF;
      v16 >>= 9;
      char v6 = ZAP_CHANGED_GO_DOWN(v20 + 8 * levels_num_words[v15] + 64 * v16, v12, &v13);
      if (v6)
      {
        if (v13)
        {
          switch(v15)
          {
            case 0u:
              goto LABEL_23;
            case 1u:
              goto LABEL_22;
            case 2u:
              goto LABEL_21;
            case 3u:
              unsigned int v9 = v16 & 0x1FF;
              v16 >>= 9;
              if (ZAP_GO_DOWN(v20 + 64 * v16 + 16810048, v9))
              {
LABEL_21:
                unsigned int v10 = v16 & 0x1FF;
                v16 >>= 9;
                if (ZAP_GO_DOWN(v20 + 64 * v16 + 32832, v10))
                {
LABEL_22:
                  unsigned int v11 = v16 & 0x1FF;
                  v16 >>= 9;
                  if (ZAP_GO_DOWN(v20 + 64 * v16 + 64, v11)) {
LABEL_23:
                  }
                    ZAP_SIMPLE(v20, v16 & 0x1FF);
                }
              }
              unsigned __int8 v21 = 1;
              break;
            default:
              qword_C0118 = (uint64_t)"FATAL ERROR - invalid bitarray level";
              qword_C0148 = v15;
              __break(1u);
              JUMPOUT(0x29E0);
          }
        }
        else
        {
          return 1;
        }
      }
      else
      {
        return 1;
      }
    }
    else
    {
      unsigned int *v18 = --v16;
      ZAP_SIMPLE(v20, v16);
      return 1;
    }
  }
  else
  {
    return 0;
  }
  return v21;
}

uint64_t bitarray_zap_first_set_multiple(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  if (a2 >= 0x2E) {
    __assert_rtn("bitarray_zap_first_set_multiple", "bitarray.c", 578, "log_size <= MAX_LEVEL * NB");
  }
  if (a2 > 9)
  {
    unsigned int v17 = 0;
    unsigned int v16 = (a2 - 1) / 9;
    while (v17 < a3)
    {
      uint64_t v14 = a1;
      int v12 = FFS(a1);
      if (!v12) {
        return v17;
      }
      unsigned int v11 = v12 - 1;
      switch(v16)
      {
        case 1u:
          break;
        case 2u:
          uint64_t v14 = a1 + 64;
          unsigned int v11 = FFS(a1 + 64 + 64 * v11) + (v11 << 9) - 1;
          break;
        case 3u:
          int v5 = FFS(a1 + 64 + 64 * v11);
          uint64_t v14 = a1 + 32832;
          unsigned int v11 = FFS(a1 + 32832 + 64 * (v5 + (v11 << 9) - 1)) + ((v5 + (v11 << 9) - 1) << 9) - 1;
          break;
        case 4u:
          int v7 = FFS(a1 + 64 + 64 * v11) + (v11 << 9) - 1;
          int v4 = FFS(a1 + 32832 + 8 * (8 * v7));
          uint64_t v14 = a1 + 16810048;
          unsigned int v11 = FFS(a1 + 16810048 + 8 * (8 * (v4 + (v7 << 9) - 1))) + ((v4 + (v7 << 9) - 1) << 9) - 1;
          break;
        default:
          qword_C0118 = (uint64_t)"FATAL ERROR - invalid bitarray level";
          qword_C0148 = v16;
          __break(1u);
          JUMPOUT(0x2CF8);
      }
      uint64_t v15 = v14 + 64 * (1 << (9 * v16 - 9));
      unsigned int v13 = v11;
      int v10 = FFS_and_zap_word(v15 + 64 * v11, a3 - v17, a4 + 4 * v17, v11 << 9);
      if (!v10) {
        __assert_rtn("bitarray_zap_first_set_multiple", "bitarray.c", 603, "z");
      }
      v17 += v10;
      if (v17 < a3 || all_zeros(v15 + 64 * v11))
      {
        switch(v16)
        {
          case 1u:
            goto LABEL_22;
          case 2u:
            goto LABEL_21;
          case 3u:
            goto LABEL_20;
          case 4u:
            unsigned int v13 = v11 >> 9;
            if (ZAP_GO_DOWN(a1 + 64 * (v11 >> 9) + 16810048, v11 & 0x1FF))
            {
LABEL_20:
              unsigned int v8 = v13 & 0x1FF;
              v13 >>= 9;
              if (ZAP_GO_DOWN(a1 + 64 * v13 + 32832, v8))
              {
LABEL_21:
                unsigned int v9 = v13 & 0x1FF;
                v13 >>= 9;
                if (ZAP_GO_DOWN(a1 + 64 * v13 + 64, v9)) {
LABEL_22:
                }
                  ZAP_SIMPLE(a1, v13 & 0x1FF);
              }
            }
            break;
          default:
            qword_C0118 = (uint64_t)"FATAL ERROR - invalid bitarray level";
            qword_C0148 = v16 - 1;
            __break(1u);
            JUMPOUT(0x2F50);
        }
      }
    }
    return v17;
  }
  else
  {
    return FFS_and_zap_word(a1, a3, a4, 0);
  }
}

uint64_t FFS_and_zap_word(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  unsigned int v10 = 0;
  for (unsigned int i = 0; i < 8; ++i)
  {
    unint64_t v8 = *(void *)(a1 + 8 * i);
    if (v8)
    {
      do
      {
        int v6 = __ffsll(v8);
        if (!v6) {
          __assert_rtn("FFS_and_zap_word", "bitarray.c", 554, "f");
        }
        int v7 = v6 - 1;
        uint64_t v4 = v10++;
        *(_DWORD *)(a3 + 4 * v4) = v7 + (i << 6) + a4;
        v8 &= ~(1 << v7);
      }
      while (v8 && v10 < a2);
      *(void *)(a1 + 8 * i) = v8;
      if (v10 >= a2) {
        break;
      }
    }
  }
  return v10;
}

uint64_t all_zeros(uint64_t a1)
{
  for (unsigned int i = 0; i < 8; ++i)
  {
    if (*(void *)(a1 + 8 * i))
    {
      char v3 = 0;
      return v3 & 1;
    }
  }
  char v3 = 1;
  return v3 & 1;
}

BOOL word_get_bit_simple(void *a1, char a2)
{
  return (*a1 & (1 << a2)) != 0;
}

uint64_t word_set_bit_changed(void *a1, char a2)
{
  if (*a1 == (*a1 | (1 << a2)))
  {
    char v3 = 0;
  }
  else
  {
    *a1 |= 1 << a2;
    char v3 = 1;
  }
  return v3 & 1;
}

uint64_t word_set_bit_changed_go_down(uint64_t *a1, char a2, BOOL *a3)
{
  uint64_t v4 = *a1;
  if (*a1 == (*a1 | (1 << a2)))
  {
    char v5 = 0;
  }
  else
  {
    *a1 |= 1 << a2;
    *a3 = v4 != 0;
    char v5 = 1;
  }
  return v5 & 1;
}

BOOL word_set_bit_go_down(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  if (*a1 == (*a1 | (1 << a2)))
  {
    return 0;
  }
  else
  {
    *a1 |= 1 << a2;
    return v3 == 0;
  }
}

void *word_set_bit_simple(void *result, char a2)
{
  *result |= 1 << a2;
  return result;
}

uint64_t word_zap_bit_changed(void *a1, char a2)
{
  if (*a1 == (*a1 & ~(1 << a2)))
  {
    char v3 = 0;
  }
  else
  {
    *a1 &= ~(1 << a2);
    char v3 = 1;
  }
  return v3 & 1;
}

uint64_t word_zap_bit_changed_go_down(uint64_t *a1, char a2, BOOL *a3)
{
  uint64_t v4 = *a1 & ~(1 << a2);
  if (*a1 == v4)
  {
    char v5 = 0;
  }
  else
  {
    *a1 = v4;
    *a3 = v4 == 0;
    char v5 = 1;
  }
  return v5 & 1;
}

BOOL word_zap_bit_go_down(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1 & ~(1 << a2);
  if (*a1 == v3)
  {
    return 0;
  }
  else
  {
    *a1 = v3;
    return v3 == 0;
  }
}

void *word_zap_bit_simple(void *result, char a2)
{
  *result &= ~(1 << a2);
  return result;
}

unint64_t __ffsll(unint64_t a1)
{
  unint64_t v1 = __clz(__rbit64(a1));
  uint64_t v2 = 0;
  if (a1) {
    return v1 + 1;
  }
  return v2;
}

BOOL xzm_reclaim_init(uint64_t a1)
{
  word_C0178 = 0;
  unk_C0170 = 0;
  int v2 = mach_vm_reclaim_ringbuffer_init();
  if (v2) {
    malloc_report(3, (uint64_t)"xzm: failed to initialize deferred reclamation buffer (%d)\n");
  }
  else {
    *(void *)(a1 + 464) = &xzm_reclaim_buffer;
  }
  return v2 == 0;
}

uint64_t xzm_reclaim_mark_used(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (HIDWORD(a4))
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"size <= UINT32_MAX\" failed (/Library/Caches/com.apple.x"
                           "bs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:165)";
    __break(1u);
    JUMPOUT(0x37B0);
  }
  int v5 = 0;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 32), (unsigned int *)&v5, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
  if (v5) {
    os_unfair_lock_lock_with_options();
  }
  char v9 = mach_vm_reclaim_mark_used();
  if (v9) {
    _xzm_reclaim_id_cache_push((_WORD *)(a1 + 40), a2);
  }
  int v6 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  int v7 = v6;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 32), (unsigned int *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != v6) {
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 32));
  }
  if ((v9 & 1) != 0 || (a5 & 1) == 0) {
    return v9 & 1;
  }
  else {
    return mach_vm_reclaim_is_reclaimed();
  }
}

_WORD *_xzm_reclaim_id_cache_push(_WORD *result, uint64_t a2)
{
  if ((unsigned __int16)*result >= 0x400u)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"cache->ric_head < XZM_RECLAIM_ID_COUNT\" failed (/Librar"
                           "y/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:141)";
    __break(1u);
    JUMPOUT(0x3A38);
  }
  uint64_t v2 = (unsigned __int16)*result;
  *result = v2 + 1;
  *(void *)&result[4 * v2 + 4] = a2;
  return result;
}

uint64_t xzm_reclaim_is_available()
{
  return mach_vm_reclaim_is_available() & 1;
}

uint64_t xzm_reclaim_mark_free(uint64_t a1, __int16 a2, uint64_t a3)
{
  if (HIDWORD(a3))
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"size <= UINT32_MAX\" failed (/Library/Caches/com.apple.x"
                           "bs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:194)";
    __break(1u);
    JUMPOUT(0x3B10);
  }
  if ((a2 & 0x3FFF) != 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"vm_addr % XZM_SEGMENT_SLICE_SIZE == 0\" failed (/Library"
                           "/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:195)";
    __break(1u);
    JUMPOUT(0x3B44);
  }
  if ((a3 & 0x3FFF) != 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"vm_size % XZM_SEGMENT_SLICE_SIZE == 0\" failed (/Library"
                           "/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:196)";
    __break(1u);
    JUMPOUT(0x3B78);
  }
  int v3 = 0;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 32), (unsigned int *)&v3, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
  if (v3) {
    os_unfair_lock_lock_with_options();
  }
  while (!_xzm_reclaim_id_cache_is_empty((_WORD *)(a1 + 40)))
  {
    uint64_t v8 = _xzm_reclaim_id_cache_pop((_WORD *)(a1 + 40));
    int v7 = mach_vm_reclaim_mark_free_with_id();
    if (!v7) {
      goto LABEL_15;
    }
    if (v7 != 5)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: mach_vm_reclaim_mark_free_with_id failed";
      qword_C0148 = v7;
      __break(1u);
      JUMPOUT(0x3D24);
    }
  }
  uint64_t v8 = mach_vm_reclaim_mark_free();
LABEL_15:
  int v4 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  int v5 = v4;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 32), (unsigned int *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 != v4) {
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 32));
  }
  return v8;
}

BOOL _xzm_reclaim_id_cache_is_empty(_WORD *a1)
{
  return *a1 == 0;
}

uint64_t _xzm_reclaim_id_cache_pop(_WORD *a1)
{
  if (_xzm_reclaim_id_cache_is_empty(a1))
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!_xzm_reclaim_id_cache_is_empty(cache)\" failed (/Librar"
                           "y/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:134)";
    __break(1u);
    JUMPOUT(0x3EA4);
  }
  __int16 v1 = (*a1)--;
  return *(void *)&a1[4 * (unsigned __int16)(v1 - 1) + 4];
}

uint64_t xzm_reclaim_force_sync()
{
  uint64_t result = mach_vm_reclaim_synchronize();
  if (result)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"kr == KERN_SUCCESS\" failed (/Library/Caches/com.apple.x"
                           "bs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:236)";
    __break(1u);
    JUMPOUT(0x3F30);
  }
  return result;
}

mach_vm_address_t _xzm_range_group_alloc_anywhere_segment(mach_vm_address_t a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  kern_return_t v7;
  int flags;
  mach_vm_address_t address;
  int v10;
  BOOL v11;
  char v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  mach_vm_size_t v16;
  mach_vm_address_t v17;

  unsigned int v17 = a1;
  unsigned int v16 = a2;
  uint64_t v15 = a3;
  uint64_t v14 = a4;
  unsigned int v13 = a5;
  int v12 = a5 & 1;
  unsigned int v11 = (a5 & 2) != 0;
  unsigned int v10 = _xzm_range_group_vm_tag_for_segment(a2, a5 & 1);
  address = v17;
  flags = (v10 << 24) | 1;
  if (v11) {
    flags = (v10 << 24) | 3;
  }
  if (v15 > 0x400000) {
    uint64_t v6 = v15;
  }
  else {
    uint64_t v6 = 0x400000;
  }
  uint64_t v15 = v6;
  if (((v6 - 1) & v6) != 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"powerof2(align)\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:337)";
    __break(1u);
    JUMPOUT(0x4058);
  }
  int v7 = mach_vm_map(mach_task_self_, &address, v16, v15 - 1, flags, 0, 0, 0, 3, 7, 1u);
  if (v7)
  {
    if (v7 != 3)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: Failed to allocate data segment";
      qword_C0148 = v7;
      __break(1u);
      JUMPOUT(0x4110);
    }
    return 0;
  }
  else
  {
    if (!address)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"vm_addr\" failed (/Library/Caches/com.apple.xbs/Source"
                             "s/libmalloc_driverkit/src/xzone/xzone_segment.c:353)";
      __break(1u);
      JUMPOUT(0x4184);
    }
    if (address % v15)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"vm_addr % align == 0\" failed (/Library/Caches/com.app"
                             "le.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:354)";
      __break(1u);
      JUMPOUT(0x41C4);
    }
    return address;
  }
}

uint64_t _xzm_range_group_vm_tag_for_segment(uint64_t a1, char a2)
{
  if (a2) {
    return 3;
  }
  else {
    return 2;
  }
}

void xzm_main_malloc_zone_init_range_groups(uint64_t a1)
{
  kern_return_t v1;
  BOOL v2;
  char v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  mach_vm_address_t address[2];
  int v9;
  uint64_t v10;
  mach_vm_address_t v11;
  mach_vm_address_t v12;
  mach_vm_address_t v13;
  unint64_t v14;
  mach_vm_address_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  BOOL v31;
  BOOL v32;

  v30 = a1;
  v29 = 0;
  v28 = 0;
  v27 = 0;
  v26 = 0;
  v25 = parse_void_ranges(&v28, &v26);
  if (v25)
  {
    if (!v28)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"left_void.min_address\" failed (/Library/Caches/com.ap"
                             "ple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:611)";
      __break(1u);
      JUMPOUT(0x4298);
    }
    if (v29 < v28)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"left_void.max_address >= left_void.min_address\" faile"
                             "d (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:612)";
      __break(1u);
      JUMPOUT(0x42D0);
    }
    if (v26 < v29)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"right_void.min_address >= left_void.max_address\" fail"
                             "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:613)";
      __break(1u);
      JUMPOUT(0x4308);
    }
    if (v27 < v26)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"right_void.max_address >= right_void.min_address\" fai"
                             "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:614)";
      __break(1u);
      JUMPOUT(0x4340);
    }
    v24 = 0;
    if ((v28 & 0x1FFFFFF) != 0) {
      int v5 = (v28 & 0xFFFFFFFFFE000000) + 0x2000000;
    }
    else {
      int v5 = v28;
    }
    v24 = v5;
    v23 = v29 - 0x300000000;
    v32 = v29 < 0x300000000;
    if (v29 < 0x300000000) {
      v23 = 0;
    }
    v23 &= 0xFFFFFFFFFE000000;
    v22 = 0;
    if (v23 > v24) {
      v22 = v23 - v24;
    }
    if ((v22 & 0x1FFFFFF) != 0)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"left_candidate_span % XZM_PAGE_TABLE_GRANULE == 0\" fa"
                             "iled (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:649)";
      __break(1u);
      JUMPOUT(0x4430);
    }
    unsigned __int8 v21 = 0;
    if ((v26 & 0x1FFFFFF) != 0) {
      int v4 = ((v26 + 0x100000000) & 0xFFFFFFFFFE000000) + 0x2000000;
    }
    else {
      int v4 = v26 + 0x100000000;
    }
    unsigned __int8 v21 = v4;
    uint64_t v20 = v27 - 0x200000000;
    v31 = v27 < 0x200000000;
    if (v27 < 0x200000000) {
      uint64_t v20 = 0;
    }
    v20 &= 0xFFFFFFFFFE000000;
    unsigned int v19 = 0;
    if (v20 > v21) {
      unsigned int v19 = v20 - v21;
    }
    if ((v19 & 0x1FFFFFF) != 0)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"right_candidate_span % XZM_PAGE_TABLE_GRANULE == 0\" f"
                             "ailed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:669)";
      __break(1u);
      JUMPOUT(0x4530);
    }
    v18 = v22 + v19;
    if (!(v22 + v19))
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"candidate_span\" failed (/Library/Caches/com.apple.xbs"
                             "/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:675)";
      __break(1u);
      JUMPOUT(0x4578);
    }
    unsigned int v17 = v18 >> 25;
    unsigned int v16 = qword_C4340 % (v18 >> 25);
    uint64_t v15 = 0;
    uint64_t v14 = v22 >> 25;
    if (v16 >= v22 >> 25)
    {
      v16 -= v14;
      uint64_t v15 = v21 + (v16 << 25);
    }
    else
    {
      uint64_t v15 = v24 + (v16 << 25);
    }
    unsigned int v13 = v15 + 0x200000000;
    if (v15 < v28 || (int v3 = 1, v13 + 0x100000000 > v29))
    {
      uint64_t v2 = 0;
      if (v15 >= v26 + 0x100000000) {
        uint64_t v2 = v15 + 0x200000000 <= v27;
      }
      int v3 = v2;
    }
    if ((v3 & 1) == 0)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(start_address >= left_void.min_address && end_address"
                             " + XZM_RANGE_SEPARATION <= left_void.max_address) || (start_address >= right_void.min_addre"
                             "ss + XZM_RANGE_SEPARATION && start_address + XZM_POINTER_RANGE_SIZE <= right_void.max_addre"
                             "ss)\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:700)";
      __break(1u);
      JUMPOUT(0x46E0);
    }
    unsigned int v10 = 0x202000000000000;
    unsigned int v11 = v15;
    int v12 = v13;
    char v9 = mach_vm_range_create();
    if (v9)
    {
      if (v9 == 46)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: mach_vm_range_create() not supported?";
        __break(1u);
        JUMPOUT(0x47B0);
      }
      if (v9 != 53)
      {
        address[1] = v9;
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: unexpected error from mach_vm_range_create()";
        qword_C0148 = v9;
        __break(1u);
        JUMPOUT(0x47ECLL);
      }
      malloc_report(3, (uint64_t)"mach_vm_range_create() denied\n");
    }
    else
    {
      address[0] = v15;
      __int16 v1 = mach_vm_map(mach_task_self_, address, 0x200000000uLL, 0, 0x4000, 0, 0, 0, 0, 0, 1u);
      char v9 = v1;
      if (v1)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: pointer range initial overwrite failed";
        qword_C0148 = v9;
        __break(1u);
        JUMPOUT(0x489CLL);
      }
      *(unsigned char *)(v30 + 328) |= 1u;
      int v7 = *(void *)(v30 + 384) + 56;
      if (*(unsigned char *)v7 != 1)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr_rg->xzrg_id == XZM_RANGE_GROUP_PTR\" failed (/Li"
                               "brary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:753)";
        __break(1u);
        JUMPOUT(0x48FCLL);
      }
      *(void *)(*(void *)(v30 + 384) + 80) = v15;
      *(void *)(v7 + 32) = 0x200000000;
      *(void *)(v7 + 40) = v15;
      *(void *)(v7 + 48) = 0x200000000;
      uint64_t v6 = *(void *)(v30 + 384);
      if (*(unsigned char *)v6)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"data_rg->xzrg_id == XZM_RANGE_GROUP_DATA\" failed (/"
                               "Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:761)";
        __break(1u);
        JUMPOUT(0x4970);
      }
      *(void *)(v6 + 24) = v29;
      *(void *)(v6 + 32) = v26 - v29;
    }
  }
}

uint64_t parse_void_ranges(unint64_t *a1, unint64_t *a2)
{
  int v12 = a1;
  unsigned int v11 = a2;
  size_t v10 = 255;
  __endptr = 0;
  if (sysctlbyname("vm.malloc_ranges", v14, &v10, 0, 0) == -1)
  {
    int v8 = *__error();
    if (v8 == 1)
    {
      malloc_report(3, (uint64_t)"sysctlbyname(\"vm.malloc_ranges\") denied\n");
    }
    else
    {
      if (v8 != 2)
      {
        uint64_t v2 = *__error();
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: sysctlbyname(\"vm.malloc_ranges\") failed";
        qword_C0148 = v2;
        __break(1u);
        JUMPOUT(0x4AACLL);
      }
      malloc_report(6, (uint64_t)"VM user ranges not supported\n");
    }
    return 0;
  }
  else
  {
    v14[v10] = 0;
    __endptr = v14;
    unint64_t v3 = strtoull(v14, &__endptr, 16);
    *int v12 = v3;
    ++__endptr;
    unint64_t v4 = strtoull(__endptr, &__endptr, 16);
    v12[1] = v4;
    ++__endptr;
    unint64_t v5 = strtoull(__endptr, &__endptr, 16);
    *unsigned int v11 = v5;
    ++__endptr;
    unint64_t v6 = strtoull(__endptr, &__endptr, 16);
    v11[1] = v6;
    return 1;
  }
}

uint64_t xzm_chunk_mark_free(uint64_t a1, unint64_t a2)
{
  uint64_t v16 = a1;
  unint64_t v15 = a2;
  unsigned __int8 v14 = 0;
  unsigned __int8 v14 = *(unsigned char *)(a2 + 32) & 0xF;
  uint64_t v19 = a1;
  unsigned __int8 v18 = v14;
  uint64_t v17 = 0;
  uint64_t v24 = a1;
  if (*(void *)(a1 + 232)) {
    uint64_t v9 = *(void *)(a1 + 232);
  }
  else {
    uint64_t v9 = v24;
  }
  uint64_t v17 = v9;
  if (v18 == 2 || v18 == 5)
  {
    BOOL v20 = (*(unsigned char *)(v17 + 328) & 4) != 0;
  }
  else
  {
    if (v18 - 6 >= 2)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: Attempt to check for deferred reclamation on non-chunk slice";
      __break(1u);
      JUMPOUT(0x4CB4);
    }
    BOOL v20 = (*(unsigned char *)(v17 + 328) & 8) != 0;
  }
  if (!v20)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_slice_kind_uses_deferred_reclamation(zone, kind)\" "
                           "failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1229)";
    __break(1u);
    JUMPOUT(0x4CE4);
  }
  unsigned __int8 v22 = v14;
  if (v14 < 2u) {
    goto LABEL_17;
  }
  if (v14 != 2)
  {
    if (v14 - 3 >= 2)
    {
      if (v14 - 5 >= 3)
      {
        uint64_t v21 = v22;
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
        qword_C0148 = v22;
        __break(1u);
        JUMPOUT(0x4D90);
      }
      goto LABEL_18;
    }
LABEL_17:
    char v23 = 0;
    goto LABEL_19;
  }
LABEL_18:
  char v23 = 1;
LABEL_19:
  if (!v23)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_slice_kind_is_chunk(kind)\" failed (/Library/Caches"
                           "/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1230)";
    __break(1u);
    JUMPOUT(0x4DC0);
  }
  uint64_t v13 = 0;
  uint64_t v25 = v16;
  if (*(void *)(v16 + 232)) {
    uint64_t v8 = *(void *)(v16 + 232);
  }
  else {
    uint64_t v8 = v25;
  }
  uint64_t v13 = v8;
  uint64_t v12 = 0;
  uint64_t v12 = *(void *)(v8 + 464);
  unsigned int v11 = 0;
  uint64_t v28 = v16;
  unint64_t v27 = v15;
  unint64_t v26 = 0;
  uint64_t v35 = v16;
  unint64_t v34 = v15;
  unint64_t v33 = v15 & 0xFFFFFFFFFFFFC000;
  char v7 = 1;
  if ((v15 & 0xFFFFFFFFFFFFC000) != 0)
  {
    BOOL v6 = 0;
    if (v34 >= v33 + 2136) {
      BOOL v6 = v34 < v33 + 48 * *(unsigned int *)(v33 + 16) + 2136;
    }
    char v7 = v6;
  }
  if ((v7 & 1) == 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0x4EFCLL);
  }
  unint64_t v26 = v33;
  unint64_t v41 = v33;
  unint64_t v40 = v27;
  unint64_t v44 = v33;
  unint64_t v43 = v27;
  if (v27 < v33 + 2136)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" fai"
                           "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                           "e_internal.h:278)";
    __break(1u);
    JUMPOUT(0x4F68);
  }
  int64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v43 - v44 - 2136) >> 4);
  if (v42 >= *(unsigned int *)(v44 + 16))
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fail"
                           "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline"
                           "_internal.h:280)";
    __break(1u);
    JUMPOUT(0x4FD0);
  }
  unsigned int v11 = (uint64_t *)(v33 + 88 + 8 * v42);
  if (*v11 != -1)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"*reclaim_id == VM_RECLAIM_INDEX_NULL\" failed (/Library/"
                           "Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1236)";
    __break(1u);
    JUMPOUT(0x5018);
  }
  uint64_t v10 = 0;
  uint64_t v32 = v16;
  unint64_t v31 = v15;
  v30 = &v10;
  if (!&v10)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk_size_out\" failed (/Library/Caches/com.apple.xbs/S"
                           "ources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:375)";
    __break(1u);
    JUMPOUT(0x506CLL);
  }
  unint64_t v29 = 0;
  uint64_t v39 = v32;
  unint64_t v38 = v31;
  v37 = v30;
  int v5 = *(unsigned char *)(v31 + 32) & 0xF;
  if (v5 == 2)
  {
    uint64_t *v37 = 0x4000;
  }
  else if (v5 == 5)
  {
    uint64_t *v37 = 0x10000;
  }
  else
  {
    if ((v5 - 6) >= 2)
    {
      uint64_t v36 = 0;
      uint64_t v36 = *(unsigned char *)(v38 + 32) & 0xF;
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: asking for start of chunk with invalid kind";
      qword_C0148 = v36;
      __break(1u);
      JUMPOUT(0x5158);
    }
    uint64_t *v37 = (unint64_t)*(unsigned int *)(v38 + 40) << 14;
  }
  uint64_t v46 = v39;
  unint64_t v45 = v38;
  uint64_t v49 = v39;
  unint64_t v48 = v38;
  unint64_t v47 = v38 & 0xFFFFFFFFFFFFC000;
  char v4 = 1;
  if ((v38 & 0xFFFFFFFFFFFFC000) != 0)
  {
    BOOL v3 = 0;
    if (v48 >= v47 + 2136) {
      BOOL v3 = v48 < v47 + 48 * *(unsigned int *)(v47 + 16) + 2136;
    }
    char v4 = v3;
  }
  if ((v4 & 1) == 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0x5238);
  }
  unint64_t v51 = v47;
  unint64_t v50 = v45;
  unint64_t v54 = v47;
  unint64_t v53 = v45;
  if (v45 < v47 + 2136)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" fai"
                           "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                           "e_internal.h:278)";
    __break(1u);
    JUMPOUT(0x529CLL);
  }
  int64_t v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v53 - v54 - 2136) >> 4);
  if (v52 >= *(unsigned int *)(v54 + 16))
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fail"
                           "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline"
                           "_internal.h:280)";
    __break(1u);
    JUMPOUT(0x5304);
  }
  unint64_t v56 = v47;
  int v55 = v52;
  unint64_t v29 = *(void *)(v47 + 80) + ((unint64_t)v52 << 14);
  uint64_t result = xzm_reclaim_mark_free(v12, v29, v10);
  *unsigned int v11 = result;
  return result;
}

uint64_t xzm_chunk_mark_used(uint64_t a1, unint64_t a2)
{
  uint64_t v17 = a1;
  unint64_t v16 = a2;
  unsigned __int8 v15 = 0;
  unsigned __int8 v15 = *(unsigned char *)(a2 + 32) & 0xF;
  uint64_t v20 = a1;
  unsigned __int8 v19 = v15;
  uint64_t v18 = 0;
  uint64_t v25 = a1;
  if (*(void *)(a1 + 232)) {
    uint64_t v9 = *(void *)(a1 + 232);
  }
  else {
    uint64_t v9 = v25;
  }
  uint64_t v18 = v9;
  if (v19 == 2 || v19 == 5)
  {
    BOOL v21 = (*(unsigned char *)(v18 + 328) & 4) != 0;
  }
  else
  {
    if (v19 - 6 >= 2)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: Attempt to check for deferred reclamation on non-chunk slice";
      __break(1u);
      JUMPOUT(0x5478);
    }
    BOOL v21 = (*(unsigned char *)(v18 + 328) & 8) != 0;
  }
  if (!v21)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_slice_kind_uses_deferred_reclamation(zone, kind)\" "
                           "failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1249)";
    __break(1u);
    JUMPOUT(0x54A8);
  }
  unsigned __int8 v23 = v15;
  if (v15 < 2u) {
    goto LABEL_17;
  }
  if (v15 != 2)
  {
    if (v15 - 3 >= 2)
    {
      if (v15 - 5 >= 3)
      {
        uint64_t v22 = v23;
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
        qword_C0148 = v23;
        __break(1u);
        JUMPOUT(0x5554);
      }
      goto LABEL_18;
    }
LABEL_17:
    char v24 = 0;
    goto LABEL_19;
  }
LABEL_18:
  char v24 = 1;
LABEL_19:
  if (!v24)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_slice_kind_is_chunk(kind)\" failed (/Library/Caches"
                           "/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1250)";
    __break(1u);
    JUMPOUT(0x5584);
  }
  uint64_t v14 = 0;
  uint64_t v26 = v17;
  if (*(void *)(v17 + 232)) {
    uint64_t v8 = *(void *)(v17 + 232);
  }
  else {
    uint64_t v8 = v26;
  }
  uint64_t v14 = v8;
  uint64_t v13 = 0;
  uint64_t v13 = *(void *)(v8 + 464);
  uint64_t v12 = 0;
  uint64_t v29 = v17;
  unint64_t v28 = v16;
  unint64_t v27 = 0;
  uint64_t v36 = v17;
  unint64_t v35 = v16;
  unint64_t v34 = v16 & 0xFFFFFFFFFFFFC000;
  char v7 = 1;
  if ((v16 & 0xFFFFFFFFFFFFC000) != 0)
  {
    BOOL v6 = 0;
    if (v35 >= v34 + 2136) {
      BOOL v6 = v35 < v34 + 48 * *(unsigned int *)(v34 + 16) + 2136;
    }
    char v7 = v6;
  }
  if ((v7 & 1) == 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0x56CCLL);
  }
  unint64_t v27 = v34;
  unint64_t v42 = v34;
  unint64_t v41 = v28;
  unint64_t v45 = v34;
  unint64_t v44 = v28;
  if (v28 < v34 + 2136)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" fai"
                           "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                           "e_internal.h:278)";
    __break(1u);
    JUMPOUT(0x573CLL);
  }
  int64_t v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v44 - v45 - 2136) >> 4);
  if (v43 >= *(unsigned int *)(v45 + 16))
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fail"
                           "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline"
                           "_internal.h:280)";
    __break(1u);
    JUMPOUT(0x57A8);
  }
  uint64_t v12 = (uint64_t *)(v34 + 88 + 8 * v43);
  if (*v12 == -1)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"*reclaim_id != VM_RECLAIM_INDEX_NULL\" failed (/Library/"
                           "Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1256)";
    __break(1u);
    JUMPOUT(0x57F4);
  }
  uint64_t v11 = 0;
  uint64_t v33 = v17;
  unint64_t v32 = v16;
  unint64_t v31 = &v11;
  if (!&v11)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk_size_out\" failed (/Library/Caches/com.apple.xbs/S"
                           "ources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:375)";
    __break(1u);
    JUMPOUT(0x584CLL);
  }
  uint64_t v30 = 0;
  uint64_t v40 = v33;
  unint64_t v39 = v32;
  unint64_t v38 = v31;
  int v5 = *(unsigned char *)(v32 + 32) & 0xF;
  if (v5 == 2)
  {
    *unint64_t v38 = 0x4000;
  }
  else if (v5 == 5)
  {
    *unint64_t v38 = 0x10000;
  }
  else
  {
    if ((v5 - 6) >= 2)
    {
      uint64_t v37 = 0;
      uint64_t v37 = *(unsigned char *)(v39 + 32) & 0xF;
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: asking for start of chunk with invalid kind";
      qword_C0148 = v37;
      __break(1u);
      JUMPOUT(0x5950);
    }
    *unint64_t v38 = (unint64_t)*(unsigned int *)(v39 + 40) << 14;
  }
  uint64_t v47 = v40;
  unint64_t v46 = v39;
  uint64_t v50 = v40;
  unint64_t v49 = v39;
  unint64_t v48 = v39 & 0xFFFFFFFFFFFFC000;
  char v4 = 1;
  if ((v39 & 0xFFFFFFFFFFFFC000) != 0)
  {
    BOOL v3 = 0;
    if (v49 >= v48 + 2136) {
      BOOL v3 = v49 < v48 + 48 * *(unsigned int *)(v48 + 16) + 2136;
    }
    char v4 = v3;
  }
  if ((v4 & 1) == 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0x5A3CLL);
  }
  unint64_t v52 = v48;
  unint64_t v51 = v46;
  unint64_t v55 = v48;
  unint64_t v54 = v46;
  if (v46 < v48 + 2136)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" fai"
                           "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                           "e_internal.h:278)";
    __break(1u);
    JUMPOUT(0x5AA4);
  }
  int64_t v53 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v54 - v55 - 2136) >> 4);
  if (v53 >= *(unsigned int *)(v55 + 16))
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fail"
                           "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline"
                           "_internal.h:280)";
    __break(1u);
    JUMPOUT(0x5B10);
  }
  unint64_t v57 = v48;
  int v56 = v53;
  uint64_t v30 = *(void *)(v48 + 80) + ((unint64_t)v53 << 14);
  char v10 = xzm_reclaim_mark_used(v13, *v12, v30, v11, 1);
  if (v10) {
    *uint64_t v12 = -1;
  }
  return v10 & 1;
}

unint64_t xzm_segment_group_alloc_chunk(unsigned __int8 *a1, unsigned __int8 a2, unsigned __int8 *a3, unsigned int a4, uint64_t *a5, unint64_t a6, char a7, char a8)
{
  kern_return_t v49;
  int flags;
  mach_vm_size_t size;
  mach_vm_address_t address;
  char *v53;
  mach_vm_size_t v54;
  BOOL v55;
  uint64_t chunk;
  char v57;
  char v58;
  unint64_t v59;
  uint64_t *v60;
  unsigned int v61;
  unsigned __int8 *v62;
  unsigned __int8 v63;
  unsigned __int8 *v64;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;
  unsigned __int8 *v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  unsigned __int8 *v72;
  unsigned __int8 *v73;
  char *v74;
  mach_vm_size_t *v75;
  uint64_t v76;
  uint64_t v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  uint64_t v80;
  mach_vm_size_t *v81;
  unint64_t v82;
  uint64_t v83;
  BOOL v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  unsigned int v88;
  int v89;
  unsigned __int8 *v90;
  BOOL v91;
  unsigned int v92;
  unsigned int v93;
  int v94;
  unsigned int v95;
  int v96;
  unsigned __int8 *v97;
  BOOL v98;
  unsigned int v99;
  unsigned int v100;
  int v101;
  unsigned int v102;
  int v103;
  unsigned __int8 *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t StatusReg;
  BOOL v114;
  int v115;
  int v116;
  int v117;
  int v118;
  os_unfair_lock_t lock;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  BOOL v123;
  int v124;
  int v125;
  int v126;
  int v127;
  os_unfair_lock_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  BOOL v132;
  int v133;
  int v134;
  int v135;
  int v136;
  os_unfair_lock_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  BOOL v141;
  int v142;
  int v143;
  int v144;
  int v145;
  os_unfair_lock_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  BOOL v150;
  int v151;
  int v152;
  int v153;
  int v154;
  os_unfair_lock_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  BOOL v159;
  unsigned int v160;
  unsigned int v161;
  int v162;
  unsigned int v163;
  unsigned __int8 *v164;
  BOOL v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  int64_t v176;
  unint64_t v177;
  unint64_t v178;
  int v179;
  unint64_t v180;

  v64 = a1;
  v63 = a2;
  v62 = a3;
  v61 = a4;
  v60 = a5;
  v59 = a6;
  v58 = a7;
  unint64_t v57 = a8;
  if (a2 == 7)
  {
    if (v62)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"guard_config == NULL\" failed (/Library/Caches/com.app"
                             "le.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:2103)";
      __break(1u);
      JUMPOUT(0x5C10);
    }
    if (v60)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"preallocate_list == NULL\" failed (/Library/Caches/com"
                             ".apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:2104)";
      __break(1u);
      JUMPOUT(0x5C40);
    }
    BOOL v47 = 1;
    if (v61 <= 0x80) {
      BOOL v47 = v59 > 0x100000;
    }
    if (!v47)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(slice_count > XZM_LARGE_BLOCK_SIZE_MAX / XZM_SEGMENT_"
                             "SLICE_SIZE) || (alignment > XZM_ALIGNMENT_MAX)\" failed (/Library/Caches/com.apple.xbs/Sour"
                             "ces/libmalloc_driverkit/src/xzone/xzone_segment.c:2107)";
      __break(1u);
      JUMPOUT(0x5C9CLL);
    }
    return _xzm_segment_group_alloc_huge_chunk(v64, v61, v58 & 1, v59, v57 & 1);
  }
  BOOL v46 = 1;
  if (v63 != 6) {
    BOOL v46 = v59 == 0;
  }
  if (!v46)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"kind == XZM_SLICE_KIND_LARGE_CHUNK || alignment == 0\" f"
                           "ailed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:2111)";
    __break(1u);
    JUMPOUT(0x5D20);
  }
  if (v63 == 6 && v61 == 1) {
    v61 = 2;
  }
  chunk = 0;
  v68 = v64 + 4;
  v90 = v64 + 4;
  v89 = 327680;
  v88 = 0;
  v107 = 3;
  v108 = 3;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v88 = *(void *)(StatusReg + 24);
  v87 = 0;
  v86 = v88;
  v85 = v88;
  int v8 = 0;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v64 + 4), (unsigned int *)&v8, v88, memory_order_acquire, memory_order_acquire);
  int v44 = v8;
  BOOL v45 = v8 == 0;
  if (v8) {
    v87 = v44;
  }
  v84 = v45;
  if (!v45) {
    os_unfair_lock_lock_with_options();
  }
  chunk = _xzm_segment_group_find_and_allocate_chunk((unint64_t *)v64, v63, v62, v60, v61, v59);
  if (chunk)
  {
    v73 = v64 + 4;
    lock = (os_unfair_lock_t)(v64 + 4);
    v118 = 0;
    v120 = 3;
    v121 = 3;
    v122 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v118 = *(void *)(v122 + 24);
    v117 = 0;
    v116 = v118;
    v115 = 0;
    int v9 = v118;
    int v10 = v118;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v64 + 4), (unsigned int *)&v10, 0, memory_order_release, memory_order_relaxed);
    int v42 = v10;
    BOOL v43 = v10 == v9;
    if (v10 != v9) {
      v116 = v42;
    }
    v114 = v43;
    if (!v43) {
      os_unfair_lock_unlock(lock);
    }
  }
  else
  {
    unint64_t v55 = 0;
    v78 = v64 + 8;
    v164 = v64 + 8;
    v163 = 0;
    v166 = 3;
    v167 = 3;
    v168 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v163 = *(void *)(v168 + 24);
    v162 = 0;
    v161 = v163;
    v160 = v163;
    int v11 = 0;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v64 + 8), (unsigned int *)&v11, v163, memory_order_acquire, memory_order_acquire);
    int v40 = v11;
    BOOL v41 = v11 == 0;
    if (v11) {
      v162 = v40;
    }
    v159 = v41;
    v165 = v41;
    unint64_t v55 = v41;
    if (v41)
    {
      v72 = v64 + 4;
      v128 = (os_unfair_lock_t)(v64 + 4);
      v127 = 0;
      v129 = 3;
      v130 = 3;
      v131 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      v127 = *(void *)(v131 + 24);
      v126 = 0;
      v125 = v127;
      v124 = 0;
      int v12 = v127;
      int v13 = v127;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v64 + 4), (unsigned int *)&v13, 0, memory_order_release, memory_order_relaxed);
      int v38 = v13;
      BOOL v39 = v13 == v12;
      if (v13 != v12) {
        v125 = v38;
      }
      v123 = v39;
      if (!v39) {
        os_unfair_lock_unlock(v128);
      }
    }
    else
    {
      v71 = v64 + 4;
      v137 = (os_unfair_lock_t)(v64 + 4);
      v136 = 0;
      v138 = 3;
      v139 = 3;
      v140 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      v136 = *(void *)(v140 + 24);
      v135 = 0;
      v134 = v136;
      v133 = 0;
      int v14 = v136;
      int v15 = v136;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v64 + 4), (unsigned int *)&v15, 0, memory_order_release, memory_order_relaxed);
      int v36 = v15;
      BOOL v37 = v15 == v14;
      if (v15 != v14) {
        v134 = v36;
      }
      v132 = v37;
      if (!v37) {
        os_unfair_lock_unlock(v137);
      }
      v67 = v64 + 8;
      v97 = v64 + 8;
      v96 = 327680;
      v95 = 0;
      v106 = 3;
      v109 = 3;
      v112 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      v95 = *(void *)(v112 + 24);
      v94 = 0;
      v93 = v95;
      v92 = v95;
      int v16 = 0;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v64 + 8), (unsigned int *)&v16, v95, memory_order_acquire, memory_order_acquire);
      int v34 = v16;
      BOOL v35 = v16 == 0;
      if (v16) {
        v94 = v34;
      }
      v91 = v35;
      if (!v35) {
        os_unfair_lock_lock_with_options();
      }
      v66 = v64 + 4;
      v104 = v64 + 4;
      v103 = 327680;
      v102 = 0;
      v105 = 3;
      v110 = 3;
      v111 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      v102 = *(void *)(v111 + 24);
      v101 = 0;
      v100 = v102;
      v99 = v102;
      int v17 = 0;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v64 + 4), (unsigned int *)&v17, v102, memory_order_acquire, memory_order_acquire);
      int v32 = v17;
      BOOL v33 = v17 == 0;
      if (v17) {
        v101 = v32;
      }
      v98 = v33;
      if (!v33) {
        os_unfair_lock_lock_with_options();
      }
      chunk = _xzm_segment_group_find_and_allocate_chunk((unint64_t *)v64, v63, v62, v60, v61, v59);
      v70 = v64 + 4;
      v146 = (os_unfair_lock_t)(v64 + 4);
      v145 = 0;
      v147 = 3;
      v148 = 3;
      v149 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      v145 = *(void *)(v149 + 24);
      v144 = 0;
      v143 = v145;
      v142 = 0;
      int v18 = v145;
      int v19 = v145;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v64 + 4), (unsigned int *)&v19, 0, memory_order_release, memory_order_relaxed);
      int v30 = v19;
      BOOL v31 = v19 == v18;
      if (v19 != v18) {
        v143 = v30;
      }
      v141 = v31;
      if (!v31) {
        os_unfair_lock_unlock(v146);
      }
      if (chunk)
      {
        v69 = v64 + 8;
        v155 = (os_unfair_lock_t)(v64 + 8);
        v154 = 0;
        v156 = 3;
        v157 = 3;
        v158 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
        v154 = *(void *)(v158 + 24);
        v153 = 0;
        v152 = v154;
        v151 = 0;
        int v20 = v154;
        int v21 = v154;
        atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v64 + 8), (unsigned int *)&v21, 0, memory_order_release, memory_order_relaxed);
        int v28 = v21;
        BOOL v29 = v21 == v20;
        if (v21 != v20) {
          v152 = v28;
        }
        v150 = v29;
        if (!v29) {
          os_unfair_lock_unlock(v155);
        }
        goto LABEL_59;
      }
    }
    chunk = _xzm_segment_group_alloc_segment_and_chunk((uint64_t)v64, v63, v62, v60, v61, v59);
  }
LABEL_59:
  if (chunk)
  {
    unint64_t v54 = 0;
    int64_t v53 = 0;
    v77 = *((void *)v64 + 3);
    v76 = chunk;
    v75 = &v54;
    if (&cur_protection == (vm_prot_t *)-168)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk_size_out\" failed (/Library/Caches/com.apple.xbs"
                             "/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:375)";
      __break(1u);
      JUMPOUT(0x65D4);
    }
    v74 = 0;
    v83 = v77;
    v82 = v76;
    v81 = v75;
    if (v75)
    {
      int v27 = *(unsigned char *)(v82 + 32) & 0xF;
      if (v27 == 2)
      {
        *v81 = 0x4000;
      }
      else if (v27 == 5)
      {
        *v81 = 0x10000;
      }
      else
      {
        if ((v27 - 6) >= 2)
        {
          v80 = 0;
          v80 = *(unsigned char *)(v82 + 32) & 0xF;
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: asking for start of chunk with invalid kind";
          qword_C0148 = v80;
          __break(1u);
          JUMPOUT(0x66C0);
        }
        *v81 = (unint64_t)*(unsigned int *)(v82 + 40) << 14;
      }
    }
    v170 = v83;
    v169 = v82;
    v173 = v83;
    v172 = v82;
    v171 = v82 & 0xFFFFFFFFFFFFC000;
    int v26 = 1;
    if ((v82 & 0xFFFFFFFFFFFFC000) != 0)
    {
      BOOL v25 = 0;
      if (v172 >= v171 + 2136) {
        BOOL v25 = v172 < v171 + 48 * *(unsigned int *)(v171 + 16) + 2136;
      }
      int v26 = v25;
    }
    if ((v26 & 1) == 0)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < ("
                             "segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple."
                             "xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
      __break(1u);
      JUMPOUT(0x67A0);
    }
    v175 = v171;
    v174 = v169;
    unint64_t v24 = v171;
    v178 = v171;
    v177 = v169;
    if (v169 < v171 + 2136)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" f"
                             "ailed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_i"
                             "nline_internal.h:278)";
      __break(1u);
      JUMPOUT(0x6804);
    }
    v176 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v177 - v178 - 2136) >> 4);
    if (v176 >= *(unsigned int *)(v178 + 16))
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fa"
                             "iled (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_in"
                             "line_internal.h:280)";
      __break(1u);
      JUMPOUT(0x686CLL);
    }
    v180 = v24;
    v179 = v176;
    v74 = (char *)(*(void *)(v24 + 80) + ((unint64_t)v176 << 14));
    int64_t v53 = v74;
    if ((*(unsigned char *)(chunk + 32) & 0x10) == 0)
    {
      v79 = v64;
      if ((*(unsigned char *)(*((void *)v64 + 3) + 328) & 2) != 0 && v63 == 6)
      {
        _xzm_segment_group_overwrite_chunk((mach_vm_address_t)v53, v54);
        *(unsigned char *)(chunk + 32) |= 0x10u;
      }
      else if (v58)
      {
        if (v63 == 2) {
          _platform_bzero();
        }
        else {
          _xzm_segment_group_clear_chunk((uint64_t)v64, v53, v54);
        }
        *(unsigned char *)(chunk + 32) |= 0x10u;
      }
    }
    if (v57)
    {
      if (v62)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"guard_config == NULL\" failed (/Library/Caches/com.a"
                               "pple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:2212)";
        __break(1u);
        JUMPOUT(0x698CLL);
      }
      if (v63 != 6)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"kind == XZM_SLICE_KIND_LARGE_CHUNK\" failed (/Librar"
                               "y/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:2213)";
        __break(1u);
        JUMPOUT(0x69C0);
      }
      address = (mach_vm_address_t)v53;
      size = v54;
      flags = 33570818;
      unint64_t v49 = 0;
      unint64_t v49 = mach_vm_map(mach_task_self_, &address, v54, 0, 33570818, 0, 0, 0, 3, 7, 1u);
      if (v49)
      {
        uint64_t v48 = v49;
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: mach_vm_map() overwrite failed";
        qword_C0148 = v49;
        __break(1u);
        JUMPOUT(0x6A80);
      }
    }
  }
  return chunk;
}

unint64_t _xzm_segment_group_alloc_huge_chunk(unsigned __int8 *a1, unsigned int a2, char a3, unint64_t a4, char a5)
{
  int64_t v53 = &v72;
  v65 = a1;
  unsigned int v64 = a2;
  char v63 = a3;
  unint64_t v62 = a4;
  char v61 = a5;
  if (!(a4 >> 22)) {
    unint64_t v62 = 0;
  }
  if ((v62 & 0x3FFFFF) != 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"alignment % XZM_SEGMENT_SIZE == 0\" failed (/Library/Cac"
                           "hes/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1973)";
    __break(1u);
    JUMPOUT(0x6B28);
  }
  BOOL v60 = 0;
  BOOL v60 = (*(unsigned char *)(*((void *)v65 + 3) + 328) & 8) != 0;
  int v5 = *v65 - 1;
  int v52 = 1;
  if (v5) {
    int v52 = !v60;
  }
  if ((v52 & 1) == 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"sg->xzsg_id == XZM_SEGMENT_GROUP_DATA_LARGE || !defer_la"
                           "rge\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1976)";
    __break(1u);
    JUMPOUT(0x6BA0);
  }
  int v6 = *v65;
  int v51 = 1;
  if (v6) {
    int v51 = v60;
  }
  if ((v51 & 1) == 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"sg->xzsg_id == XZM_SEGMENT_GROUP_DATA || defer_large\" f"
                           "ailed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1977)";
    __break(1u);
    JUMPOUT(0x6BF4);
  }
  unint64_t v59 = (unint64_t)v64 << 14;
  unint64_t v58 = 0;
  if (*v65 == 1
    && *((_WORD *)v65 + 256)
    && v64 <= *((_DWORD *)v65 + 129)
    && v62 <= 0x400000
    && (unint64_t v58 = _xzm_segment_group_alloc_huge_chunk_from_cache((uint64_t)v65, v64)) != 0)
  {
    if (v63)
    {
      char v7 = v53;
      unint64_t v57 = 0;
      int v56 = 0;
      unint64_t v8 = v58;
      *((void *)v53 + 2) = *((void *)v65 + 3);
      *((void *)v7 + 1) = v8;
      *(void *)char v7 = &v57;
      if (!*(void *)v7)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk_size_out\" failed (/Library/Caches/com.apple.x"
                               "bs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:375)";
        __break(1u);
        JUMPOUT(0x6CE8);
      }
      int v9 = v53;
      v71 = 0;
      uint64_t v10 = *((void *)v53 + 1);
      uint64_t v11 = *(void *)v53;
      *((void *)v53 + 6) = *((void *)v53 + 2);
      *((void *)v9 + 5) = v10;
      *((void *)v9 + 4) = v11;
      if (*((void *)v9 + 4))
      {
        int v50 = *(unsigned char *)(*((void *)v53 + 5) + 32) & 0xF;
        if (v50 == 2)
        {
          **((void **)v53 + 4) = 0x4000;
        }
        else if (v50 == 5)
        {
          **((void **)v53 + 4) = 0x10000;
        }
        else
        {
          if ((v50 - 6) >= 2)
          {
            int v12 = v53;
            *((void *)v53 + 3) = 0;
            *((void *)v12 + 3) = *(unsigned char *)(*((void *)v12 + 5) + 32) & 0xF;
            uint64_t v13 = *((void *)v12 + 3);
            qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: asking for start of chunk with invalid kind";
            qword_C0148 = v13;
            __break(1u);
            JUMPOUT(0x6DECLL);
          }
          **((void **)v53 + 4) = (unint64_t)*(unsigned int *)(*((void *)v53 + 5) + 40) << 14;
        }
      }
      int v14 = v53;
      uint64_t v15 = *((void *)v53 + 5);
      *((void *)v53 + 17) = *((void *)v53 + 6);
      *((void *)v14 + 16) = v15;
      uint64_t v16 = *((void *)v14 + 16);
      *((void *)v14 + 20) = *((void *)v14 + 17);
      *((void *)v14 + 19) = v16;
      *((void *)v14 + 18) = 0;
      *((void *)v14 + 18) = *((void *)v14 + 19) & 0xFFFFFFFFFFFFC000;
      uint64_t v17 = *((void *)v14 + 18);
      int v49 = 1;
      if (v17)
      {
        BOOL v18 = *((void *)v53 + 19) >= (unint64_t)(*((void *)v53 + 18) + 2136);
        BOOL v48 = 0;
        if (v18) {
          BOOL v48 = *((void *)v53 + 19) < *((void *)v53 + 18)
        }
                                      + 48 * (unint64_t)*(unsigned int *)(*((void *)v53 + 18) + 16)
                                      + 2136;
        int v49 = v48;
      }
      if ((v49 & 1) == 0)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice <"
                               " (segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.ap"
                               "ple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
        __break(1u);
        JUMPOUT(0x6ED8);
      }
      int v19 = v53;
      uint64_t v20 = *((void *)v53 + 16);
      *((void *)v53 + 22) = *((void *)v53 + 18);
      *((void *)v19 + 21) = v20;
      uint64_t v47 = *((void *)v19 + 22);
      uint64_t v21 = *((void *)v19 + 21);
      *((void *)v19 + 25) = v47;
      *((void *)v19 + 24) = v21;
      if (*((void *)v19 + 24) < (unint64_t)(*((void *)v19 + 25) + 2136))
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\""
                               " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzo"
                               "ne_inline_internal.h:278)";
        __break(1u);
        JUMPOUT(0x6F40);
      }
      uint64_t v22 = v53;
      *((void *)v53 + 23) = 0;
      *((void *)v22 + 23) = 0xAAAAAAAAAAAAAAABLL * ((*((void *)v22 + 24) - *((void *)v22 + 25) - 2136) >> 4);
      if (*((void *)v22 + 23) >= (uint64_t)*(unsigned int *)(*((void *)v22 + 25) + 16))
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" "
                               "failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzon"
                               "e_inline_internal.h:280)";
        __break(1u);
        JUMPOUT(0x6FACLL);
      }
      unsigned __int8 v23 = v53;
      uint64_t v24 = *((void *)v53 + 23);
      *((void *)v53 + 27) = v47;
      *((_DWORD *)v23 + 53) = v24;
      v71 = (char *)(*(void *)(*((void *)v23 + 27) + 80) + ((unint64_t)*((unsigned int *)v23 + 53) << 14));
      int v56 = v71;
      _xzm_segment_group_clear_chunk((uint64_t)v65, v71, v57);
      *(unsigned char *)(v58 + 32) |= 0x10u;
    }
    else
    {
      *(unsigned char *)(v58 + 32) &= ~0x10u;
    }
    uint64_t v55 = 0;
    unint64_t v54 = 0;
    uint64_t v70 = *((void *)v65 + 3);
    unint64_t v69 = v58;
    v68 = &v55;
    if (&v41 == (uint64_t *)-96)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk_size_out\" failed (/Library/Caches/com.apple.xbs"
                             "/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:375)";
      __break(1u);
      JUMPOUT(0x7070);
    }
    BOOL v25 = v53;
    unint64_t v67 = 0;
    unint64_t v26 = v69;
    int v27 = v68;
    *((void *)v53 + 10) = v70;
    *((void *)v25 + 9) = v26;
    *((void *)v25 + 8) = v27;
    if (*((void *)v25 + 8))
    {
      int v46 = *(unsigned char *)(*((void *)v53 + 9) + 32) & 0xF;
      if (v46 == 2)
      {
        **((void **)v53 + 8) = 0x4000;
      }
      else if (v46 == 5)
      {
        **((void **)v53 + 8) = 0x10000;
      }
      else
      {
        if ((v46 - 6) >= 2)
        {
          int v28 = v53;
          *((void *)v53 + 7) = 0;
          *((void *)v28 + 7) = *(unsigned char *)(*((void *)v28 + 9) + 32) & 0xF;
          uint64_t v29 = *((void *)v28 + 7);
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: asking for start of chunk with invalid kind";
          qword_C0148 = v29;
          __break(1u);
          JUMPOUT(0x7174);
        }
        **((void **)v53 + 8) = (unint64_t)*(unsigned int *)(*((void *)v53 + 9) + 40) << 14;
      }
    }
    int v30 = v53;
    uint64_t v31 = *((void *)v53 + 9);
    *((void *)v53 + 12) = *((void *)v53 + 10);
    *((void *)v30 + 11) = v31;
    uint64_t v32 = *((void *)v30 + 11);
    *((void *)v30 + 15) = *((void *)v30 + 12);
    *((void *)v30 + 14) = v32;
    *((void *)v30 + 13) = 0;
    *((void *)v30 + 13) = *((void *)v30 + 14) & 0xFFFFFFFFFFFFC000;
    uint64_t v33 = *((void *)v30 + 13);
    int v45 = 1;
    if (v33)
    {
      BOOL v18 = *((void *)v53 + 14) >= (unint64_t)(*((void *)v53 + 13) + 2136);
      BOOL v44 = 0;
      if (v18) {
        BOOL v44 = *((void *)v53 + 14) < *((void *)v53 + 13)
      }
                                    + 48 * (unint64_t)*(unsigned int *)(*((void *)v53 + 13) + 16)
                                    + 2136;
      int v45 = v44;
    }
    if ((v45 & 1) == 0)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < ("
                             "segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple."
                             "xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
      __break(1u);
      JUMPOUT(0x7260);
    }
    int v34 = v53;
    uint64_t v35 = *((void *)v53 + 11);
    *((void *)v53 + 29) = *((void *)v53 + 13);
    *((void *)v34 + 28) = v35;
    uint64_t v43 = *((void *)v34 + 29);
    uint64_t v36 = *((void *)v34 + 28);
    *((void *)v34 + 32) = v43;
    *((void *)v34 + 31) = v36;
    if (*((void *)v34 + 31) < (unint64_t)(*((void *)v34 + 32) + 2136))
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" f"
                             "ailed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_i"
                             "nline_internal.h:278)";
      __break(1u);
      JUMPOUT(0x72C8);
    }
    BOOL v37 = v53;
    *((void *)v53 + 30) = 0;
    *((void *)v37 + 30) = 0xAAAAAAAAAAAAAAABLL * ((*((void *)v37 + 31) - *((void *)v37 + 32) - 2136) >> 4);
    if (*((void *)v37 + 30) >= (uint64_t)*(unsigned int *)(*((void *)v37 + 32) + 16))
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fa"
                             "iled (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_in"
                             "line_internal.h:280)";
      __break(1u);
      JUMPOUT(0x7334);
    }
    int v38 = v53;
    uint64_t v39 = *((void *)v53 + 30);
    *((void *)v53 + 34) = v43;
    *((_DWORD *)v38 + 67) = v39;
    unint64_t v67 = *(void *)(*((void *)v38 + 34) + 80) + ((unint64_t)*((unsigned int *)v38 + 67) << 14);
    unint64_t v54 = v67;
    BOOL v42 = 1;
    if (v62) {
      BOOL v42 = v54 % v62 == 0;
    }
    if (!v42)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"alignment == 0 || (start % alignment) == 0\" failed (/"
                             "Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:2003)";
      __break(1u);
      JUMPOUT(0x73CCLL);
    }
    return v58;
  }
  else if (_xzm_segment_group_alloc_segment((uint64_t)v65, v59, v62, (uint64_t *)&v58, v61 & 1))
  {
    return v58;
  }
  else
  {
    return 0;
  }
}

uint64_t _xzm_segment_group_find_and_allocate_chunk(unint64_t *a1, unsigned __int8 a2, unsigned __int8 *a3, uint64_t *a4, unsigned int a5, unint64_t a6)
{
  unint64_t v36 = a6;
  if (a2 >= 2u)
  {
    if (a2 == 2)
    {
LABEL_7:
      char v43 = 1;
      goto LABEL_8;
    }
    if (a2 - 3 >= 2)
    {
      if (a2 - 5 >= 3)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
        qword_C0148 = a2;
        __break(1u);
        JUMPOUT(0x7520);
      }
      goto LABEL_7;
    }
  }
  char v43 = 0;
LABEL_8:
  if (!v43)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_slice_kind_is_chunk(kind)\" failed (/Library/Caches"
                           "/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1617)";
    __break(1u);
    JUMPOUT(0x7550);
  }
  BOOL v23 = 1;
  if (a2 == 2) {
    BOOL v23 = a5 == 1;
  }
  if (!v23)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"kind != XZM_SLICE_KIND_TINY_CHUNK || slice_count == 1\" "
                           "failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1618)";
    __break(1u);
    JUMPOUT(0x75ACLL);
  }
  if (!a5)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice_count != 0\" failed (/Library/Caches/com.apple.xbs"
                           "/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1619)";
    __break(1u);
    JUMPOUT(0x75DCLL);
  }
  if ((unint64_t)a5 << 14 > 0x200000)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice_count * XZM_SEGMENT_SLICE_SIZE <= XZM_LARGE_BLOCK_"
                           "SIZE_MAX\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1621)";
    __break(1u);
    JUMPOUT(0x7614);
  }
  BOOL v22 = 1;
  if (a6) {
    BOOL v22 = a2 == 6;
  }
  if (!v22)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"alignment == 0 || kind == XZM_SLICE_KIND_LARGE_CHUNK\" f"
                           "ailed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1622)";
    __break(1u);
    JUMPOUT(0x766CLL);
  }
  BOOL v21 = 1;
  if (a2 == 2) {
    BOOL v21 = a3 != 0;
  }
  if (!v21)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"kind != XZM_SLICE_KIND_TINY_CHUNK || guard_config != NUL"
                           "L\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1624)";
    __break(1u);
    JUMPOUT(0x76C8);
  }
  BOOL v20 = 1;
  if (a2 == 5) {
    BOOL v20 = a3 != 0;
  }
  if (!v20)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"kind != XZM_SLICE_KIND_SMALL_CHUNK || guard_config != NU"
                           "LL\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1625)";
    __break(1u);
    JUMPOUT(0x7724);
  }
  BOOL v19 = 1;
  if (a2 == 6) {
    BOOL v19 = a3 == 0;
  }
  if (!v19)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"kind != XZM_SLICE_KIND_LARGE_CHUNK || guard_config == NU"
                           "LL\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1626)";
    __break(1u);
    JUMPOUT(0x7780);
  }
  if (a6 <= 0x4000) {
    unint64_t v36 = 0;
  }
  unsigned int v35 = v36 >> 14;
  if (((v36 >> 14) & 0x3FFFF00000000) != 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: Unexpected align value";
    qword_C0148 = v36;
    __break(1u);
    JUMPOUT(0x780CLL);
  }
  if (a3 && *a3)
  {
    unsigned __int8 v32 = arc4random_uniform(*a3) + 1;
    int v33 = v32 * a5;
    unsigned __int8 v31 = (unsigned __int16)(a3[1] * (_WORD)v33) >> 8;
    if (a3[1] * (_BYTE)v33)
    {
      uint32_t v30 = (a3[1] * v33);
      if (v30 > arc4random_uniform(0x100u)) {
        ++v31;
      }
    }
    unsigned int v34 = v33 + v31;
  }
  else
  {
    unsigned int v34 = a5;
    unsigned __int8 v32 = 1;
    unsigned __int8 v31 = 0;
  }
  BOOL v18 = 1;
  if (v34 >= 0x81) {
    BOOL v18 = v36 != 0;
  }
  if (!v18)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"total_slice_count <= (XZM_LARGE_BLOCK_SIZE_MAX / XZM_SEG"
                           "MENT_SLICE_SIZE) || alignment != 0\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_"
                           "driverkit/src/xzone/xzone_segment.c:1663)";
    __break(1u);
    JUMPOUT(0x7960);
  }
  if (v32 < (int)v31)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunks_in_run >= guards\" failed (/Library/Caches/com.ap"
                           "ple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1666)";
    __break(1u);
    JUMPOUT(0x7998);
  }
  if (v35)
  {
    int v17 = v35 - 1;
    unsigned int v6 = v34 + v35 - 1;
    BOOL v7 = __CFADD__(v34, v35 - 1);
    v34 += v17;
    if (v7)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: Unexpected total slice count";
      qword_C0148 = a5 + v17;
      __break(1u);
      JUMPOUT(0x7A50);
    }
    if (v6 >= 0x100)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"total_slice_count < XZM_SLICES_PER_SEGMENT\" failed (/"
                             "Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1686)";
      __break(1u);
      JUMPOUT(0x7A88);
    }
  }
  uint64_t v29 = (unint64_t *)xzm_span_queue_for ((uint64_t)a1, v34);
LABEL_60:
  if (v29 >= a1 + 58) {
    return 0;
  }
  unint64_t v27 = 0;
  for (unint64_t i = *v29; ; unint64_t i = v27)
  {
    char v16 = 0;
    if (i)
    {
      unint64_t v27 = *(void *)(i + 16);
      char v16 = 1;
    }
    if ((v16 & 1) == 0)
    {
      v29 += 2;
      goto LABEL_60;
    }
    unsigned int v15 = (*(unsigned char *)(i + 32) & 0xF) == 1 ? 1 : *(_DWORD *)(i + 40);
    unsigned int v26 = v15;
    if (v15 >= v34)
    {
      switch(*(unsigned char *)a1)
      {
        case 0:
        case 2:
          BOOL v45 = (*(unsigned char *)(a1[3] + 328) & 4) != 0;
          break;
        case 1:
        case 3:
          BOOL v45 = (*(unsigned char *)(a1[3] + 328) & 8) != 0;
          break;
        default:
          uint64_t v10 = *(unsigned __int8 *)a1;
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: unknown segment group id";
          qword_C0148 = v10;
          __break(1u);
          JUMPOUT(0x7C2CLL);
      }
      if (!v45 || (_xzm_segment_group_span_mark_used((unsigned __int8 *)a1, i) & 1) != 0) {
        break;
      }
    }
  }
  if (*(void *)(i + 16)) {
    *(void *)(*(void *)(i + 16) + 24) = *(void *)(i + 24);
  }
  **(void **)(i + 24) = *(void *)(i + 16);
  *(void *)(i + 16) = -1;
  *(void *)(i + 24) = -1;
  unint64_t v44 = i & 0xFFFFFFFFFFFFC000;
  char v14 = 1;
  if ((i & 0xFFFFFFFFFFFFC000) != 0)
  {
    BOOL v13 = 0;
    if (i >= v44 + 2136) {
      BOOL v13 = i < (i & 0xFFFFFFFFFFFFC000)
    }
              + 48 * *(unsigned int *)((char *)&dword_10 + (i & 0xFFFFFFFFFFFFC000))
              + 2136;
    char v14 = v13;
  }
  if ((v14 & 1) == 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0x7D9CLL);
  }
  if (v35)
  {
    if (i < v44 + 2136)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" f"
                             "ailed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_i"
                             "nline_internal.h:278)";
      __break(1u);
      JUMPOUT(0x7E04);
    }
    unint64_t v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(i - v44 - 2136) >> 4);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(i - (i & 0xFFFFFFFFFFFFC000) - 2136) >> 4)) >= *(unsigned int *)((char *)&dword_10 + (i & 0xFFFFFFFFFFFFC000)))
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fa"
                             "iled (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_in"
                             "line_internal.h:280)";
      __break(1u);
      JUMPOUT(0x7E6CLL);
    }
    if (v47 % v35) {
      int v12 = v35 + v47 / v35 * v35;
    }
    else {
      int v12 = -1431655765 * ((uint64_t)(i - v44 - 2136) >> 4);
    }
    int v25 = v12 - v47;
    if (a5 > v34 - (v12 - v47))
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice_count <= (total_slice_count - to_remove)\" faile"
                             "d (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1721)";
      __break(1u);
      JUMPOUT(0x7F28);
    }
    if (v25)
    {
      unsigned int v26 = v15 - v25;
      unint64_t i = _xzm_segment_group_segment_slice_split((os_unfair_lock_s *)a1, v44, i, v15 - v25, 1);
      unsigned int v34 = a5;
    }
  }
  if (v26 > v34) {
    _xzm_segment_group_segment_slice_split((os_unfair_lock_s *)a1, v44, i, v34, 0);
  }
  if (i < v44 + 2136)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" fai"
                           "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                           "e_internal.h:278)";
    __break(1u);
    JUMPOUT(0x7FF4);
  }
  int64_t v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(i - v44 - 2136) >> 4);
  if (v46 >= *(unsigned int *)(v44 + 16))
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fail"
                           "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline"
                           "_internal.h:280)";
    __break(1u);
    JUMPOUT(0x805CLL);
  }
  uint64_t inited = _xzm_segment_group_segment_span_init_run((uint64_t)a1, v44, a2, a4, v46, v34, v31, v32, v8, v9);
  if (!inited)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk\" failed (/Library/Caches/com.apple.xbs/Sources/li"
                           "bmalloc_driverkit/src/xzone/xzone_segment.c:1747)";
    __break(1u);
    JUMPOUT(0x80C4);
  }
  if (!_xzm_segment_group_segment_is_valid((os_unfair_lock_s *)a1, v44))
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_segment_group_segment_is_valid(sg, segment)\" faile"
                           "d (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1749)";
    __break(1u);
    JUMPOUT(0x80FCLL);
  }
  return inited;
}

uint64_t _xzm_segment_group_alloc_segment_and_chunk(uint64_t a1, unsigned __int8 a2, unsigned __int8 *a3, uint64_t *a4, unsigned int a5, unint64_t a6)
{
  v11[8] = 0;
  *(void *)uint64_t v11 = _xzm_segment_group_alloc_segment(a1, 0, 0, 0, 0);
  if (v11[0])
  {
    *(void *)&v11[1] = _xzm_segment_group_find_and_allocate_chunk((unint64_t *)a1, a2, a3, a4, a5, a6);
    if (!*(void *)&v11[1])
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk\" failed (/Library/Caches/com.apple.xbs/Sources/"
                             "libmalloc_driverkit/src/xzone/xzone_segment.c:2032)";
      __break(1u);
      JUMPOUT(0x8214);
    }
    int v6 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    int v7 = v6;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 4), (unsigned int *)&v7, 0, memory_order_release, memory_order_relaxed);
    if (v7 != v6) {
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 4));
    }
  }
  int v8 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  int v9 = v8;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 8), (unsigned int *)&v9, 0, memory_order_release, memory_order_relaxed);
  if (v9 != v8) {
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
  }
  return *(void *)&v11[1];
}

uint64_t _xzm_segment_group_overwrite_chunk(mach_vm_address_t a1, mach_vm_size_t a2)
{
  address[2] = a1;
  address[1] = a2;
  address[0] = a1;
  uint64_t result = mach_vm_map(mach_task_self_, address, a2, 0, 33570816, 0, 0, 0, 3, 7, 1u);
  if (result)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: mach_vm_map() overwrite failed";
    qword_C0148 = (int)result;
    __break(1u);
    JUMPOUT(0x8494);
  }
  return result;
}

void _xzm_segment_group_clear_chunk(uint64_t a1, char *a2, unint64_t a3)
{
  if (madvise(a2, a3, 11))
  {
    __error();
    malloc_zone_error(0, 0, (uint64_t)"Failed to madvise(MADV_ZERO) chunk at %p, error: %d\n");
    _xzm_segment_group_bzero_chunk(a1, a2, a3);
  }
}

void xzm_segment_group_segment_madvise_span(uint64_t a1, void *a2, unsigned int a3)
{
  if (((unsigned __int16)a2 & 0x3FFF) != 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice_start % XZM_SEGMENT_SLICE_SIZE == 0\" f"
                           "ailed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:2649)";
    __break(1u);
    JUMPOUT(0x8588);
  }
  xzm_madvise(*(void *)(a1 + 24), a2, (unint64_t)a3 << 14);
}

void xzm_madvise(uint64_t a1, void *a2, size_t a3)
{
  if (mvm_madvise_plat(a2, a3, 7))
  {
    __error();
    malloc_zone_error(0, 0, (uint64_t)"Failed to madvise chunk at %p, error: %d\n");
  }
}

void xzm_segment_group_segment_madvise_chunk(uint64_t a1, unint64_t a2)
{
  uint64_t v11 = a1;
  unint64_t v10 = a2;
  unsigned __int8 v13 = *(unsigned char *)(a2 + 32) & 0xF;
  int v7 = v13;
  if (v13 < 2u) {
    goto LABEL_6;
  }
  if (v7 != 2)
  {
    if ((v7 - 3) >= 2)
    {
      if ((v7 - 5) >= 3)
      {
        uint64_t v12 = v13;
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
        qword_C0148 = v13;
        __break(1u);
        JUMPOUT(0x8728);
      }
      goto LABEL_7;
    }
LABEL_6:
    char v14 = 0;
    goto LABEL_8;
  }
LABEL_7:
  char v14 = 1;
LABEL_8:
  if (!v14)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_slice_kind_is_chunk(chunk->xzc_bits.xzcb_kind)\" fa"
                           "iled (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:2658)";
    __break(1u);
    JUMPOUT(0x8758);
  }
  size_t v9 = 0;
  uint64_t v8 = 0;
  uint64_t v18 = *(void *)(v11 + 24);
  unint64_t v17 = v10;
  char v16 = &v9;
  if (&v2 == (uint64_t *)-40)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk_size_out\" failed (/Library/Caches/com.apple.xbs/S"
                           "ources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:375)";
    __break(1u);
    JUMPOUT(0x87B4);
  }
  uint64_t v15 = 0;
  uint64_t v22 = v18;
  unint64_t v21 = v17;
  BOOL v20 = v16;
  if (v16)
  {
    int v6 = *(unsigned char *)(v21 + 32) & 0xF;
    if (v6 == 2)
    {
      *BOOL v20 = 0x4000;
    }
    else if (v6 == 5)
    {
      *BOOL v20 = 0x10000;
    }
    else
    {
      if ((v6 - 6) >= 2)
      {
        uint64_t v19 = 0;
        uint64_t v19 = *(unsigned char *)(v21 + 32) & 0xF;
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: asking for start of chunk with invalid kind";
        qword_C0148 = v19;
        __break(1u);
        JUMPOUT(0x88A0);
      }
      *BOOL v20 = (unint64_t)*(unsigned int *)(v21 + 40) << 14;
    }
  }
  uint64_t v24 = v22;
  unint64_t v23 = v21;
  uint64_t v27 = v22;
  unint64_t v26 = v21;
  unint64_t v25 = v21 & 0xFFFFFFFFFFFFC000;
  int v5 = 1;
  if ((v21 & 0xFFFFFFFFFFFFC000) != 0)
  {
    BOOL v4 = 0;
    if (v26 >= v25 + 2136) {
      BOOL v4 = v26 < v25 + 48 * *(unsigned int *)(v25 + 16) + 2136;
    }
    int v5 = v4;
  }
  if ((v5 & 1) == 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0x8980);
  }
  unint64_t v29 = v25;
  unint64_t v28 = v23;
  unint64_t v3 = v25;
  unint64_t v32 = v25;
  unint64_t v31 = v23;
  if (v23 < v25 + 2136)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" fai"
                           "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                           "e_internal.h:278)";
    __break(1u);
    JUMPOUT(0x89E4);
  }
  int64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - v32 - 2136) >> 4);
  if (v30 >= *(unsigned int *)(v32 + 16))
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fail"
                           "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline"
                           "_internal.h:280)";
    __break(1u);
    JUMPOUT(0x8A4CLL);
  }
  unint64_t v34 = v3;
  int v33 = v30;
  xzm_madvise(*(void *)(v11 + 24), (void *)(*(void *)(v3 + 80) + ((unint64_t)v30 << 14)), v9);
}

void xzm_segment_group_free_chunk(unsigned __int8 *a1, unint64_t a2, char a3)
{
  v78 = &v99;
  v90 = a1;
  unint64_t v89 = a2;
  char v88 = a3;
  unsigned __int8 v87 = 0;
  unsigned __int8 v87 = *(unsigned char *)(a2 + 32) & 0xF;
  unsigned __int8 v94 = v87;
  int v79 = v87;
  if (v87 < 2u) {
    goto LABEL_6;
  }
  if (v79 != 2)
  {
    if ((v79 - 3) >= 2)
    {
      if ((v79 - 5) >= 3)
      {
        uint64_t v93 = v94;
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
        qword_C0148 = v94;
        __break(1u);
        JUMPOUT(0x8B88);
      }
      goto LABEL_7;
    }
LABEL_6:
    char v95 = 0;
    goto LABEL_8;
  }
LABEL_7:
  char v95 = 1;
LABEL_8:
  if (!v95)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_slice_kind_is_chunk(kind)\" failed (/Library/Caches"
                           "/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:2672)";
    __break(1u);
    JUMPOUT(0x8BB8);
  }
  if (v87 == 7)
  {
    _xzm_segment_group_free_huge_chunk((uint64_t)v90, v89, v88 & 1);
  }
  else
  {
    if (v88)
    {
      if (v87 != 6)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"kind == XZM_SLICE_KIND_LARGE_CHUNK\" failed (/Librar"
                               "y/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:2681)";
        __break(1u);
        JUMPOUT(0x8C20);
      }
      unint64_t v3 = v78;
      mach_vm_size_t v86 = 0;
      mach_vm_address_t v85 = 0;
      unint64_t v4 = v89;
      *((void *)v78 + 4) = *((void *)v90 + 3);
      *((void *)v3 + 3) = v4;
      *((void *)v3 + 2) = &v86;
      if (!*((void *)v3 + 2))
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk_size_out\" failed (/Library/Caches/com.apple.x"
                               "bs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:375)";
        __break(1u);
        JUMPOUT(0x8C80);
      }
      int v5 = v78;
      *((void *)v78 + 1) = 0;
      uint64_t v6 = *((void *)v5 + 3);
      uint64_t v7 = *((void *)v5 + 2);
      *((void *)v5 + 20) = *((void *)v5 + 4);
      *((void *)v5 + 19) = v6;
      *((void *)v5 + 18) = v7;
      if (*((void *)v5 + 18))
      {
        int v77 = *(unsigned char *)(*((void *)v78 + 19) + 32) & 0xF;
        if (v77 == 2)
        {
          **((void **)v78 + 18) = 0x4000;
        }
        else if (v77 == 5)
        {
          **((void **)v78 + 18) = 0x10000;
        }
        else
        {
          if ((v77 - 6) >= 2)
          {
            uint64_t v8 = v78;
            *((void *)v78 + 17) = 0;
            *((void *)v8 + 17) = *(unsigned char *)(*((void *)v8 + 19) + 32) & 0xF;
            uint64_t v9 = *((void *)v8 + 17);
            qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: asking for start of chunk with invalid kind";
            qword_C0148 = v9;
            __break(1u);
            JUMPOUT(0x8D84);
          }
          **((void **)v78 + 18) = (unint64_t)*(unsigned int *)(*((void *)v78 + 19) + 40) << 14;
        }
      }
      unint64_t v10 = v78;
      uint64_t v11 = *((void *)v78 + 19);
      *((void *)v78 + 45) = *((void *)v78 + 20);
      *((void *)v10 + 44) = v11;
      uint64_t v12 = *((void *)v10 + 44);
      *((void *)v10 + 48) = *((void *)v10 + 45);
      *((void *)v10 + 47) = v12;
      *((void *)v10 + 46) = 0;
      *((void *)v10 + 46) = *((void *)v10 + 47) & 0xFFFFFFFFFFFFC000;
      uint64_t v13 = *((void *)v10 + 46);
      int v76 = 1;
      if (v13)
      {
        BOOL v14 = *((void *)v78 + 47) >= (unint64_t)(*((void *)v78 + 46) + 2136);
        BOOL v75 = 0;
        if (v14) {
          BOOL v75 = *((void *)v78 + 47) < *((void *)v78 + 46)
        }
                                      + 48 * (unint64_t)*(unsigned int *)(*((void *)v78 + 46) + 16)
                                      + 2136;
        int v76 = v75;
      }
      if ((v76 & 1) == 0)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice <"
                               " (segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.ap"
                               "ple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
        __break(1u);
        JUMPOUT(0x8E70);
      }
      uint64_t v15 = v78;
      uint64_t v16 = *((void *)v78 + 44);
      *((void *)v78 + 50) = *((void *)v78 + 46);
      *((void *)v15 + 49) = v16;
      uint64_t v74 = *((void *)v15 + 50);
      uint64_t v17 = *((void *)v15 + 49);
      *((void *)v15 + 53) = v74;
      *((void *)v15 + 52) = v17;
      if (*((void *)v15 + 52) < (unint64_t)(*((void *)v15 + 53) + 2136))
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\""
                               " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzo"
                               "ne_inline_internal.h:278)";
        __break(1u);
        JUMPOUT(0x8ED8);
      }
      uint64_t v18 = v78;
      *((void *)v78 + 51) = 0;
      *((void *)v18 + 51) = 0xAAAAAAAAAAAAAAABLL * ((*((void *)v18 + 52) - *((void *)v18 + 53) - 2136) >> 4);
      if (*((void *)v18 + 51) >= (uint64_t)*(unsigned int *)(*((void *)v18 + 53) + 16))
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" "
                               "failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzon"
                               "e_inline_internal.h:280)";
        __break(1u);
        JUMPOUT(0x8F44);
      }
      uint64_t v19 = v78;
      uint64_t v20 = *((void *)v78 + 51);
      *((void *)v78 + 55) = v74;
      *((_DWORD *)v19 + 109) = v20;
      *((void *)v19 + 1) = *(void *)(*((void *)v19 + 55) + 80)
                           + ((unint64_t)*((unsigned int *)v19 + 109) << 14);
      mach_vm_address_t v85 = *((void *)v19 + 1);
      _xzm_segment_group_overwrite_chunk(v85, v86);
    }
    unint64_t v21 = v78;
    unint64_t v84 = 0;
    unint64_t v22 = v89;
    *((void *)v78 + 8) = *((void *)v90 + 3);
    *((void *)v21 + 7) = v22;
    *((void *)v21 + 6) = 0;
    *((void *)v21 + 6) = *((void *)v21 + 7) & 0xFFFFFFFFFFFFC000;
    uint64_t v23 = *((void *)v21 + 6);
    int v73 = 1;
    if (v23)
    {
      BOOL v14 = *((void *)v78 + 7) >= (unint64_t)(*((void *)v78 + 6) + 2136);
      BOOL v72 = 0;
      if (v14) {
        BOOL v72 = *((void *)v78 + 7) < *((void *)v78 + 6)
      }
                                   + 48 * (unint64_t)*(unsigned int *)(*((void *)v78 + 6) + 16)
                                   + 2136;
      int v73 = v72;
    }
    if ((v73 & 1) == 0)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < ("
                             "segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple."
                             "xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
      __break(1u);
      JUMPOUT(0x9064);
    }
    uint64_t v24 = v78;
    unint64_t v84 = *((void *)v78 + 6);
    *((void *)v78 + 5) = v90;
    if ((*(unsigned char *)(*(void *)(*((void *)v24 + 5) + 24) + 328) & 2) != 0 && v87 == 6)
    {
      mach_vm_size_t v83 = 0;
      mach_vm_address_t v82 = 0;
      unint64_t v25 = v89;
      *(void *)v78 = *((void *)v90 + 3);
      unint64_t v98 = v25;
      v97 = &v83;
      if (&v60 == (uint64_t *)-136)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk_size_out\" failed (/Library/Caches/com.apple.x"
                               "bs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:375)";
        __break(1u);
        JUMPOUT(0x90FCLL);
      }
      unint64_t v26 = v78;
      mach_vm_address_t v96 = 0;
      unint64_t v27 = v98;
      unint64_t v28 = v97;
      *((void *)v78 + 24) = *(void *)v78;
      *((void *)v26 + 23) = v27;
      *((void *)v26 + 22) = v28;
      if (*((void *)v26 + 22))
      {
        int v71 = *(unsigned char *)(*((void *)v78 + 23) + 32) & 0xF;
        if (v71 == 2)
        {
          **((void **)v78 + 22) = 0x4000;
        }
        else if (v71 == 5)
        {
          **((void **)v78 + 22) = 0x10000;
        }
        else
        {
          if ((v71 - 6) >= 2)
          {
            unint64_t v29 = v78;
            *((void *)v78 + 21) = 0;
            *((void *)v29 + 21) = *(unsigned char *)(*((void *)v29 + 23) + 32) & 0xF;
            uint64_t v30 = *((void *)v29 + 21);
            qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: asking for start of chunk with invalid kind";
            qword_C0148 = v30;
            __break(1u);
            JUMPOUT(0x9200);
          }
          **((void **)v78 + 22) = (unint64_t)*(unsigned int *)(*((void *)v78 + 23) + 40) << 14;
        }
      }
      unint64_t v31 = v78;
      uint64_t v32 = *((void *)v78 + 23);
      *((void *)v78 + 40) = *((void *)v78 + 24);
      *((void *)v31 + 39) = v32;
      uint64_t v33 = *((void *)v31 + 39);
      *((void *)v31 + 43) = *((void *)v31 + 40);
      *((void *)v31 + 42) = v33;
      *((void *)v31 + 41) = 0;
      *((void *)v31 + 41) = *((void *)v31 + 42) & 0xFFFFFFFFFFFFC000;
      uint64_t v34 = *((void *)v31 + 41);
      int v70 = 1;
      if (v34)
      {
        BOOL v14 = *((void *)v78 + 42) >= (unint64_t)(*((void *)v78 + 41) + 2136);
        BOOL v69 = 0;
        if (v14) {
          BOOL v69 = *((void *)v78 + 42) < *((void *)v78 + 41)
        }
                                      + 48 * (unint64_t)*(unsigned int *)(*((void *)v78 + 41) + 16)
                                      + 2136;
        int v70 = v69;
      }
      if ((v70 & 1) == 0)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice <"
                               " (segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.ap"
                               "ple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
        __break(1u);
        JUMPOUT(0x92ECLL);
      }
      unsigned int v35 = v78;
      uint64_t v36 = *((void *)v78 + 39);
      *((void *)v78 + 57) = *((void *)v78 + 41);
      *((void *)v35 + 56) = v36;
      uint64_t v68 = *((void *)v35 + 57);
      uint64_t v37 = *((void *)v35 + 56);
      *((void *)v35 + 60) = v68;
      *((void *)v35 + 59) = v37;
      if (*((void *)v35 + 59) < (unint64_t)(*((void *)v35 + 60) + 2136))
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\""
                               " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzo"
                               "ne_inline_internal.h:278)";
        __break(1u);
        JUMPOUT(0x9354);
      }
      int v38 = v78;
      *((void *)v78 + 58) = 0;
      *((void *)v38 + 58) = 0xAAAAAAAAAAAAAAABLL * ((*((void *)v38 + 59) - *((void *)v38 + 60) - 2136) >> 4);
      if (*((void *)v38 + 58) >= (uint64_t)*(unsigned int *)(*((void *)v38 + 60) + 16))
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" "
                               "failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzon"
                               "e_inline_internal.h:280)";
        __break(1u);
        JUMPOUT(0x93C0);
      }
      uint64_t v39 = v78;
      uint64_t v40 = *((void *)v78 + 58);
      *((void *)v78 + 62) = v68;
      *((_DWORD *)v39 + 123) = v40;
      mach_vm_address_t v96 = *(void *)(*((void *)v39 + 62) + 80) + ((unint64_t)*((unsigned int *)v39 + 123) << 14);
      mach_vm_address_t v82 = v96;
      _xzm_segment_group_overwrite_chunk(v96, v83);
    }
    else
    {
      uint64_t v41 = v78;
      *((void *)v78 + 13) = v90;
      int v42 = **((unsigned __int8 **)v41 + 13);
      uint64_t v67 = **((unsigned __int8 **)v41 + 13);
      switch(v42)
      {
        case 0:
        case 2:
          BOOL v101 = (*(unsigned char *)(*(void *)(*((void *)v78 + 13) + 24) + 328) & 4) != 0;
          break;
        case 1:
        case 3:
          BOOL v101 = (*(unsigned char *)(*(void *)(*((void *)v78 + 13) + 24) + 328) & 8) != 0;
          break;
        default:
          char v43 = v78;
          *((void *)v78 + 12) = 0;
          *((void *)v43 + 12) = **((unsigned __int8 **)v43 + 13);
          uint64_t v44 = *((void *)v43 + 12);
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: unknown segment group id";
          qword_C0148 = v44;
          __break(1u);
          JUMPOUT(0x94C8);
      }
      if (!v101 && v87 != 5) {
        xzm_segment_group_segment_madvise_chunk((uint64_t)v90, v89);
      }
    }
    BOOL v45 = v78;
    v91 = v90 + 4;
    *((void *)v78 + 28) = v90 + 4;
    *((_DWORD *)v45 + 55) = 327680;
    int64_t v46 = v78;
    *((_DWORD *)v78 + 54) = 0;
    *((void *)v46 + 29) = 3;
    *((void *)v46 + 30) = *((void *)v46 + 29);
    *((void *)v46 + 31) = 0;
    *((void *)v46 + 31) = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    *((_DWORD *)v46 + 54) = *(void *)(*((void *)v46 + 31) + 8 * *((void *)v46 + 30));
    *((_DWORD *)v46 + 53) = 0;
    *((_DWORD *)v46 + 52) = 0;
    *((_DWORD *)v46 + 52) = *((_DWORD *)v46 + 54);
    unint64_t v47 = (atomic_uint *)*((void *)v46 + 28);
    *((_DWORD *)v46 + 51) = *((_DWORD *)v46 + 52);
    int v48 = *((_DWORD *)v46 + 53);
    unsigned int v49 = *((_DWORD *)v46 + 51);
    LODWORD(v46) = v48;
    atomic_compare_exchange_strong_explicit(v47, (unsigned int *)&v46, v49, memory_order_acquire, memory_order_acquire);
    int v65 = (int)v46;
    BOOL v66 = v46 == v48;
    if (v46 != v48) {
      *((_DWORD *)v78 + 53) = v65;
    }
    BOOL v104 = v66;
    if (!v66) {
      os_unfair_lock_lock_with_options();
    }
    if (!_xzm_segment_group_segment_is_valid((os_unfair_lock_s *)v90, v84))
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_segment_group_segment_is_valid(sg, segment)\" fai"
                             "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:2711)";
      __break(1u);
      JUMPOUT(0x9630);
    }
    unint64_t v81 = 0;
    unint64_t v81 = _xzm_segment_group_segment_span_free_coalesce(v90, v84, v89, 0);
    --*(_DWORD *)(v84 + 8);
    char v80 = 0;
    unsigned __int8 v102 = **(unsigned char **)v84;
    int v64 = v102;
    if (v102 < 2u)
    {
      char v103 = 1;
    }
    else
    {
      if ((v64 - 2) >= 2)
      {
        int v50 = v78;
        *((void *)v78 + 15) = 0;
        *((void *)v50 + 15) = v102;
        uint64_t v51 = *((void *)v50 + 15);
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: unknown segment group id";
        qword_C0148 = v51;
        __break(1u);
        JUMPOUT(0x96F8);
      }
      char v103 = 0;
    }
    char v80 = v103;
    if (*(_DWORD *)(v84 + 8) || (v80 & 1) == 0)
    {
      int v52 = v78;
      *((void *)v78 + 10) = v90;
      int v53 = **((unsigned __int8 **)v52 + 10);
      uint64_t v63 = **((unsigned __int8 **)v52 + 10);
      switch(v53)
      {
        case 0:
        case 2:
          BOOL v100 = (*(unsigned char *)(*(void *)(*((void *)v78 + 10) + 24) + 328) & 4) != 0;
          break;
        case 1:
        case 3:
          BOOL v100 = (*(unsigned char *)(*(void *)(*((void *)v78 + 10) + 24) + 328) & 8) != 0;
          break;
        default:
          unint64_t v54 = v78;
          *((void *)v78 + 9) = 0;
          *((void *)v54 + 9) = **((unsigned __int8 **)v54 + 10);
          uint64_t v55 = *((void *)v54 + 9);
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: unknown segment group id";
          qword_C0148 = v55;
          __break(1u);
          JUMPOUT(0x97F4);
      }
      if (v100) {
        _xzm_segment_group_span_mark_free(v90, v81);
      }
      if (!_xzm_segment_group_segment_is_valid((os_unfair_lock_s *)v90, v84))
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_segment_group_segment_is_valid(sg, segment)\" f"
                               "ailed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:2739)";
        __break(1u);
        JUMPOUT(0x984CLL);
      }
      int v56 = v78;
      v92 = v90 + 4;
      *((void *)v78 + 35) = v90 + 4;
      *((_DWORD *)v56 + 69) = 0;
      *((void *)v56 + 36) = 3;
      *((void *)v56 + 37) = *((void *)v56 + 36);
      *((void *)v56 + 38) = 0;
      *((void *)v56 + 38) = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      *((_DWORD *)v56 + 69) = *(void *)(*((void *)v56 + 38) + 8 * *((void *)v56 + 37));
      *((_DWORD *)v56 + 68) = 0;
      *((_DWORD *)v56 + 67) = 0;
      *((_DWORD *)v56 + 67) = *((_DWORD *)v56 + 69);
      unint64_t v57 = (atomic_uint *)*((void *)v56 + 35);
      *((_DWORD *)v56 + 66) = *((_DWORD *)v56 + 68);
      int v58 = *((_DWORD *)v56 + 67);
      unsigned int v59 = *((_DWORD *)v56 + 66);
      LODWORD(v56) = v58;
      atomic_compare_exchange_strong_explicit(v57, (unsigned int *)&v56, v59, memory_order_release, memory_order_relaxed);
      int v61 = (int)v56;
      BOOL v62 = v56 == v58;
      if (v56 != v58) {
        *((_DWORD *)v78 + 67) = v61;
      }
      BOOL v105 = v62;
      if (!v62) {
        os_unfair_lock_unlock(*((os_unfair_lock_t *)v78 + 35));
      }
    }
    else
    {
      _xzm_segment_group_segment_free(v90, v84);
    }
  }
}

void _xzm_segment_group_free_huge_chunk(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v6 = a2 & 0xFFFFFFFFFFFFC000;
  char v4 = 1;
  if ((a2 & 0xFFFFFFFFFFFFC000) != 0)
  {
    BOOL v3 = 0;
    if (a2 >= v6 + 2136) {
      BOOL v3 = a2 < (a2 & 0xFFFFFFFFFFFFC000)
    }
              + 48 * *(unsigned int *)((char *)dword_10 + (a2 & 0xFFFFFFFFFFFFC000))
              + 2136;
    char v4 = v3;
  }
  if ((v4 & 1) == 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0x9A40);
  }
  if (*((unsigned char *)&dword_14 + (a2 & 0xFFFFFFFFFFFFC000)) != 1)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segment->xzs_kind == XZM_SEGMENT_KIND_HUGE\" failed (/Li"
                           "brary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:2604)";
    __break(1u);
    JUMPOUT(0x9A80);
  }
  if (*(int *)((char *)&dword_8 + (a2 & 0xFFFFFFFFFFFFC000)) != 1)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segment->xzs_used == 1\" failed (/Library/Caches/com.app"
                           "le.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:2605)";
    __break(1u);
    JUMPOUT(0x9AB8);
  }
  if (!*(_WORD *)(a1 + 512)
    || (a3 & 1) != 0
    || *(unsigned int *)((char *)&dword_C + (a2 & 0xFFFFFFFFFFFFC000)) >= *(_DWORD *)(a1 + 516)
    || *(unsigned int *)((char *)&dword_C + (a2 & 0xFFFFFFFFFFFFC000)) < 0x81
    || !_xzm_segment_group_free_huge_chunk_to_cache(a1, v6))
  {
    _xzm_segment_group_segment_deallocate(a1, v6, 1);
  }
}

uint64_t _xzm_segment_group_segment_is_valid(os_unfair_lock_s *a1, uint64_t a2)
{
  if (*(void *)a2 != (void)a1)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segment->xzs_segment_group == sg\" failed (/Library/Cach"
                           "es/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1058)";
    __break(1u);
    JUMPOUT(0x9B9CLL);
  }
  unint64_t v16 = a2 + 48 * *(unsigned int *)(a2 + 16) + 2136;
  unint64_t v14 = a2 + 2136;
  if (*(unsigned char *)(a2 + 20) == 1)
  {
    if (*(_DWORD *)(a2 + 8) != 1)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segment->xzs_used == 1\" failed (/Library/Caches/com.a"
                             "pple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1064)";
      __break(1u);
      JUMPOUT(0x9C38);
    }
    if ((*(unsigned char *)(a2 + 2168) & 0xF) != 7)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == XZM_SLICE_KIND_HUGE_CHUNK"
                             "\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1066)";
      __break(1u);
      JUMPOUT(0x9C84);
    }
    if (*(_DWORD *)(a2 + 2176) != *(_DWORD *)(a2 + 12))
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzcs_slice_count == segment->xzs_slice_count\" "
                             "failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1067)";
      __break(1u);
      JUMPOUT(0x9CC4);
    }
  }
  else
  {
    os_unfair_lock_assert_owner(a1 + 1);
    while (v14 < v16)
    {
      unsigned __int8 v13 = *(unsigned char *)(v14 + 32) & 0xF;
      switch(v13)
      {
        case 1u:
          if (*(_WORD *)(v14 + 34))
          {
            qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice->xzc_mzone_idx == XZM_MZONE_INDEX_INVALID\""
                                   " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1129)";
            __break(1u);
            JUMPOUT(0xA238);
          }
          _xzm_segment_group_assert_correct_span_queue((uint64_t)a1, v14);
          if (v14 < a2 + 2136)
          {
            qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slic"
                                   "es\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../x"
                                   "zone/xzone_inline_internal.h:278)";
            __break(1u);
            JUMPOUT(0xA2B0);
          }
          int64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - a2 - 2136) >> 4);
          if (v22 >= *(unsigned int *)(a2 + 16))
          {
            qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_coun"
                                   "t\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xz"
                                   "one/xzone_inline_internal.h:280)";
            __break(1u);
            JUMPOUT(0xA318);
          }
          BOOL v4 = 1;
          if (*(void *)(a2 + 88 + 8 * v22) != -1) {
            BOOL v4 = ((*(unsigned __int8 *)(v14 + 32) >> 4) & 1) == 0;
          }
          if (!v4)
          {
            qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"*reclaim_id == VM_RECLAIM_INDEX_NULL || !slice->"
                                   "xzc_bits.xzcb_is_pristine\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_d"
                                   "riverkit/src/xzone/xzone_segment.c:1135)";
            __break(1u);
            JUMPOUT(0xA390);
          }
          v14 += 48;
          break;
        case 2u:
          v14 += 48;
          break;
        case 3u:
          if (*(_WORD *)(v14 + 34))
          {
            qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice->xzc_mzone_idx == XZM_MZONE_INDEX_INVALID\""
                                   " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1141)";
            __break(1u);
            JUMPOUT(0xA3D4);
          }
          _xzm_segment_group_assert_correct_span_queue((uint64_t)a1, v14);
          if (v14 < a2 + 2136)
          {
            qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slic"
                                   "es\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../x"
                                   "zone/xzone_inline_internal.h:278)";
            __break(1u);
            JUMPOUT(0xA434);
          }
          int64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - a2 - 2136) >> 4);
          if (v19 >= *(unsigned int *)(a2 + 16))
          {
            qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_coun"
                                   "t\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xz"
                                   "one/xzone_inline_internal.h:280)";
            __break(1u);
            JUMPOUT(0xA49CLL);
          }
          unint64_t v7 = *(unsigned int *)(v14 + 40);
          if (v7 <= 1)
          {
            qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice_count > 1\" failed (/Library/Caches/com.ap"
                                   "ple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1146)";
            __break(1u);
            JUMPOUT(0xA4ECLL);
          }
          unint64_t v6 = v19 + v7 - 1;
          if (v6 >= *(unsigned int *)(a2 + 16))
          {
            qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"last_slice_index < segment->xzs_slice_entry_coun"
                                   "t\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone"
                                   "_segment.c:1149)";
            __break(1u);
            JUMPOUT(0xA544);
          }
          if ((*(unsigned char *)(a2 + 48 * v6 + 2168) & 0xF) != 4)
          {
            qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"last->xzc_bits.xzcb_kind == XZM_SLICE_KIND_MULTI"
                                   "_BODY\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/x"
                                   "zone_segment.c:1153)";
            __break(1u);
            JUMPOUT(0xA5A4);
          }
          if (*(_DWORD *)(a2 + 48 * v6 + 2172) != 48 * v7 - 48)
          {
            qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"last->xzsl_slice_offset_bytes == (uint32_t)(size"
                                   "of(struct xzm_slice_s) * (slice_count - 1))\" failed (/Library/Caches/com.apple.xbs/S"
                                   "ources/libmalloc_driverkit/src/xzone/xzone_segment.c:1155)";
            __break(1u);
            JUMPOUT(0xA5ECLL);
          }
          if (v14 < a2 + 2136)
          {
            qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slic"
                                   "es\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../x"
                                   "zone/xzone_inline_internal.h:278)";
            __break(1u);
            JUMPOUT(0xA658);
          }
          int64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - a2 - 2136) >> 4);
          if (v21 >= *(unsigned int *)(a2 + 16))
          {
            qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_coun"
                                   "t\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xz"
                                   "one/xzone_inline_internal.h:280)";
            __break(1u);
            JUMPOUT(0xA6C0);
          }
          BOOL v3 = 1;
          if (*(void *)(a2 + 88 + 8 * v21) != -1) {
            BOOL v3 = ((*(unsigned __int8 *)(v14 + 32) >> 4) & 1) == 0;
          }
          if (!v3)
          {
            qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"*reclaim_id == VM_RECLAIM_INDEX_NULL || !slice->"
                                   "xzc_bits.xzcb_is_pristine\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_d"
                                   "riverkit/src/xzone/xzone_segment.c:1161)";
            __break(1u);
            JUMPOUT(0xA738);
          }
          unint64_t v14 = a2 + 48 * v6 + 2184;
          break;
        case 5u:
        case 6u:
          if (v14 < a2 + 2136)
          {
            qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slic"
                                   "es\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../x"
                                   "zone/xzone_inline_internal.h:278)";
            __break(1u);
            JUMPOUT(0x9DB8);
          }
          int64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - a2 - 2136) >> 4);
          if (v20 >= *(unsigned int *)(a2 + 16))
          {
            qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_coun"
                                   "t\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xz"
                                   "one/xzone_inline_internal.h:280)";
            __break(1u);
            JUMPOUT(0x9E20);
          }
          unint64_t v12 = *(unsigned int *)(v14 + 40);
          if (v12 <= 1)
          {
            qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice_count > 1\" failed (/Library/Caches/com.ap"
                                   "ple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1083)";
            __break(1u);
            JUMPOUT(0x9E70);
          }
          unint64_t v15 = v14 + 48;
          if (v12 - 1 > 2) {
            unint64_t v5 = 3;
          }
          else {
            unint64_t v5 = v12 - 1;
          }
          for (unint64_t i = 1; i <= v5; ++i)
          {
            if ((*(unsigned char *)(v15 + 32) & 0xF) != 4)
            {
              qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice->xzc_bits.xzcb_kind == XZM_SLICE_KIND_MU"
                                     "LTI_BODY\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xz"
                                     "one/xzone_segment.c:1089)";
              __break(1u);
              JUMPOUT(0x9F20);
            }
            if (*(_DWORD *)(v15 + 36) != 48 * i)
            {
              qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice->xzsl_slice_offset_bytes == (uint32_t)(s"
                                     "izeof(struct xzm_slice_s) * i)\" failed (/Library/Caches/com.apple.xbs/Sources/libm"
                                     "alloc_driverkit/src/xzone/xzone_segment.c:1091)";
              __break(1u);
              JUMPOUT(0x9F60);
            }
            v15 += 48;
          }
          if (v20 + v12 - 1 >= *(unsigned int *)(a2 + 16))
          {
            qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"last_slice_index < segment->xzs_slice_entry_coun"
                                   "t\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone"
                                   "_segment.c:1095)";
            __break(1u);
            JUMPOUT(0x9FD8);
          }
          uint64_t v10 = v20 + v12 - 1;
          if (a2 + 48 * v10 + 2136 >= v15)
          {
            if ((*(unsigned char *)(a2 + 48 * v10 + 2168) & 0xF) != 4)
            {
              qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"last->xzc_bits.xzcb_kind == XZM_SLICE_KIND_MUL"
                                     "TI_BODY\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzo"
                                     "ne/xzone_segment.c:1099)";
              __break(1u);
              JUMPOUT(0xA04CLL);
            }
            if (*(_DWORD *)(a2 + 48 * v10 + 2172) != 48 * v12 - 48)
            {
              qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"last->xzsl_slice_offset_bytes == (uint32_t)(si"
                                     "zeof(struct xzm_slice_s) * (slice_count - 1))\" failed (/Library/Caches/com.apple.x"
                                     "bs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1102)";
              __break(1u);
              JUMPOUT(0xA094);
            }
          }
          unint64_t v14 = a2 + 48 * v10 + 2184;
          break;
        case 7u:
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: huge chunk in normal segment";
          __break(1u);
          JUMPOUT(0xA204);
        case 8u:
          unint64_t v9 = *(unsigned int *)(v14 + 40);
          v14 += 48;
          for (unint64_t j = 1; j < v9; ++j)
          {
            if ((*(unsigned char *)(v14 + 32) & 0xF) != 4)
            {
              qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice->xzc_bits.xzcb_kind == XZM_SLICE_KIND_MU"
                                     "LTI_BODY\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xz"
                                     "one/xzone_segment.c:1113)";
              __break(1u);
              JUMPOUT(0xA128);
            }
            if (*(_DWORD *)(v14 + 36) != 48 * j)
            {
              qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice->xzsl_slice_offset_bytes == (uint32_t)(s"
                                     "izeof(struct xzm_slice_s) * i)\" failed (/Library/Caches/com.apple.xbs/Sources/libm"
                                     "alloc_driverkit/src/xzone/xzone_segment.c:1115)";
              __break(1u);
              JUMPOUT(0xA168);
            }
            v14 += 48;
          }
          if (v14 < v16 && (*(unsigned char *)(v14 + 32) & 0xF) == 8)
          {
            qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice->xzc_bits.xzcb_kind != XZM_SLICE_KIND_GUAR"
                                   "D\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone"
                                   "_segment.c:1120)";
            __break(1u);
            JUMPOUT(0xA1D8);
          }
          return result;
        default:
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: Unexpected slice kind";
          qword_C0148 = v13;
          __break(1u);
          JUMPOUT(0xA784);
      }
    }
  }
  return 1;
}

unint64_t _xzm_segment_group_segment_span_free_coalesce(unsigned __int8 *a1, uint64_t a2, unint64_t a3, unsigned char *a4)
{
  unsigned __int8 v22 = *(unsigned char *)(a3 + 32) & 0xF;
  if (v22 < 2u) {
    goto LABEL_6;
  }
  if (v22 != 2)
  {
    if (v22 - 3 >= 2)
    {
      if (v22 - 5 >= 3)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
        qword_C0148 = v22;
        __break(1u);
        JUMPOUT(0xA8B0);
      }
      goto LABEL_7;
    }
LABEL_6:
    char v23 = 0;
    goto LABEL_8;
  }
LABEL_7:
  char v23 = 1;
LABEL_8:
  if (v23 == 1)
  {
    if ((*(unsigned char *)(a3 + 32) & 0xF) == 2) {
      int v14 = 1;
    }
    else {
      int v14 = *(_DWORD *)(a3 + 40);
    }
    unsigned int v17 = v14;
  }
  else
  {
    char v28 = *(unsigned char *)(a3 + 32) & 0xF;
    BOOL v13 = 1;
    if (v28 != 1) {
      BOOL v13 = v28 == 3;
    }
    if (!v13)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: attempting to coalesce slice of unexpected type";
      __break(1u);
      JUMPOUT(0xA9CCLL);
    }
    if ((*(unsigned char *)(a3 + 32) & 0xF) == 1) {
      int v12 = 1;
    }
    else {
      int v12 = *(_DWORD *)(a3 + 40);
    }
    unsigned int v17 = v12;
  }
  unint64_t v16 = a3;
  if (a4) {
    *a4 = 1;
  }
  *(unsigned char *)(a3 + 32) &= 0xF0u;
  unint64_t v15 = a3 + 48 * v17;
  if (v15 < a2 + 48 * (unint64_t)*(unsigned int *)(a2 + 16) + 2136)
  {
    char v27 = *(unsigned char *)(v15 + 32) & 0xF;
    BOOL v11 = 1;
    if (v27 != 1) {
      BOOL v11 = v27 == 3;
    }
    if (v11)
    {
      switch(*a1)
      {
        case 0u:
        case 2u:
          BOOL v25 = (*(unsigned char *)(*((void *)a1 + 3) + 328) & 4) != 0;
          break;
        case 1u:
        case 3u:
          BOOL v25 = (*(unsigned char *)(*((void *)a1 + 3) + 328) & 8) != 0;
          break;
        default:
          uint64_t v4 = *a1;
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: unknown segment group id";
          qword_C0148 = v4;
          __break(1u);
          JUMPOUT(0xAB6CLL);
      }
      if (!v25 || (_xzm_segment_group_span_mark_used(a1, v15) & 1) != 0)
      {
        unint64_t v29 = a3 + 48 * v17;
        if ((*(unsigned char *)(v29 + 32) & 0xF) == 1) {
          int v10 = 1;
        }
        else {
          int v10 = *(_DWORD *)(v29 + 40);
        }
        v17 += v10;
        _xzm_segment_group_segment_span_remove_from_queue((uint64_t)a1, v15);
      }
      else if (a4)
      {
        *a4 = 0;
      }
    }
  }
  if (a3 > a2 + 2136)
  {
    unint64_t v32 = a3 - 48;
    if ((*(unsigned char *)(a3 - 16) & 0xF) == 4)
    {
      unint64_t v31 = a3 - 48 - *(unsigned int *)(a3 - 12);
      if (v31 < (v32 & 0xFFFFFFFFFFFFC000 | 0x858))
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"out_slice >= ((xzm_segment_t)((uintptr_t)slice & ~(X"
                               "ZM_METAPOOL_SEGMENT_BLOCK_SIZE - 1)))->xzs_slices\" failed (/Library/Caches/com.apple.xbs"
                               "/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:582)";
        __break(1u);
        JUMPOUT(0xACF0);
      }
      int v9 = *(unsigned char *)(v31 + 32) & 0xF;
      if ((v9 - 1) < 2)
      {
        BOOL v34 = v31 == v32;
      }
      else if (v9 == 3 || (v9 - 5) < 4)
      {
        if (v32 < v31)
        {
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice >= span\" failed (/Library/Caches/com.apple."
                                 "xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:560)";
          __break(1u);
          JUMPOUT(0xADA0);
        }
        BOOL v34 = v32 < v31 + 48 * *(unsigned int *)(v31 + 40);
      }
      else
      {
        BOOL v34 = 0;
      }
      if (v34) {
        uint64_t v33 = a3 - 48 - *(unsigned int *)(a3 - 12);
      }
      else {
        uint64_t v33 = a3 - 48;
      }
    }
    else
    {
      uint64_t v33 = a3 - 48;
    }
    char v26 = *(unsigned char *)(v33 + 32) & 0xF;
    BOOL v8 = 1;
    if (v26 != 1) {
      BOOL v8 = v26 == 3;
    }
    if (v8)
    {
      switch(*a1)
      {
        case 0u:
        case 2u:
          BOOL v24 = (*(unsigned char *)(*((void *)a1 + 3) + 328) & 4) != 0;
          break;
        case 1u:
        case 3u:
          BOOL v24 = (*(unsigned char *)(*((void *)a1 + 3) + 328) & 8) != 0;
          break;
        default:
          uint64_t v5 = *a1;
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: unknown segment group id";
          qword_C0148 = v5;
          __break(1u);
          JUMPOUT(0xAF20);
      }
      if (!v24 || (_xzm_segment_group_span_mark_used(a1, v33) & 1) != 0)
      {
        if ((*(unsigned char *)(v33 + 32) & 0xF) == 1) {
          int v7 = 1;
        }
        else {
          int v7 = *(_DWORD *)(v33 + 40);
        }
        v17 += v7;
        _xzm_segment_group_segment_span_remove_from_queue((uint64_t)a1, v33);
        unint64_t v16 = v33;
      }
      else if (a4)
      {
        *a4 = 0;
      }
    }
  }
  if (v16 < a2 + 2136)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" fai"
                           "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                           "e_internal.h:278)";
    __break(1u);
    JUMPOUT(0xB050);
  }
  int64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - a2 - 2136) >> 4);
  if (v30 >= *(unsigned int *)(a2 + 16))
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fail"
                           "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline"
                           "_internal.h:280)";
    __break(1u);
    JUMPOUT(0xB0BCLL);
  }
  _xzm_segment_group_segment_span_free((os_unfair_lock_s *)a1, a2, v30, v17, 0);
  return v16;
}

void _xzm_segment_group_segment_free(unsigned __int8 *a1, unint64_t a2)
{
  BOOL v13 = a1;
  unint64_t v12 = a2;
  if (*(_DWORD *)(a2 + 8))
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segment->xzs_used == 0\" failed (/Library/Caches/com.app"
                           "le.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:2352)";
    __break(1u);
    JUMPOUT(0xB160);
  }
  unint64_t v41 = v12;
  unint64_t v11 = v12 + 2136;
  unint64_t v10 = 0;
  unsigned int v17 = v13;
  switch(*v13)
  {
    case 0u:
    case 2u:
      BOOL v18 = (*(unsigned char *)(*((void *)v17 + 3) + 328) & 4) != 0;
      break;
    case 1u:
    case 3u:
      BOOL v18 = (*(unsigned char *)(*((void *)v17 + 3) + 328) & 8) != 0;
      break;
    default:
      uint64_t v16 = 0;
      uint64_t v2 = *v17;
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: unknown segment group id";
      qword_C0148 = v2;
      __break(1u);
      JUMPOUT(0xB23CLL);
  }
  if (v18)
  {
    if ((_xzm_segment_group_span_mark_used(v13, v11) & 1) == 0)
    {
LABEL_24:
      unint64_t v40 = v12;
      unint64_t v10 = v12 + 2136;
      do
      {
        unint64_t v11 = v10;
        unint64_t v45 = v12;
        unint64_t v44 = v10;
        char v43 = 0;
        unint64_t v47 = v12;
        unint64_t v46 = v10;
        unint64_t v50 = v12;
        unint64_t v49 = v10;
        if (v10 < v12 + 2136)
        {
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices"
                                 "\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone"
                                 "/xzone_inline_internal.h:278)";
          __break(1u);
          JUMPOUT(0xB51CLL);
        }
        int64_t v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49 - v50 - 2136) >> 4);
        if (v48 >= *(unsigned int *)(v50 + 16))
        {
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\""
                                 " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/x"
                                 "zone_inline_internal.h:280)";
          __break(1u);
          JUMPOUT(0xB588);
        }
        char v43 = (void *)(v12 + 88 + 8 * v48);
        if (*v43 == -1) {
          _xzm_segment_group_span_mark_free(v13, v11);
        }
        unint64_t v20 = v11;
        if ((*(unsigned char *)(v11 + 32) & 0xF) == 1) {
          unsigned int v7 = 1;
        }
        else {
          unsigned int v7 = *(_DWORD *)(v20 + 40);
        }
        unint64_t v10 = v11 + 48 * v7;
        unint64_t v19 = v12;
      }
      while (v10 < v12 + 48 * *(unsigned int *)(v12 + 16) + 2136);
      int v14 = v13 + 4;
      os_unfair_lock_t v36 = (os_unfair_lock_t)(v13 + 4);
      int v35 = 0;
      uint64_t v37 = 3;
      uint64_t v38 = 3;
      unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      int v35 = *(void *)(StatusReg + 24);
      int v34 = 0;
      int v33 = v35;
      int v32 = 0;
      int v5 = v35;
      int v6 = v35;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v13 + 4), (unsigned int *)&v6, 0, memory_order_release, memory_order_relaxed);
      if (v6 != v5) {
        int v33 = v6;
      }
      BOOL v31 = v6 == v5;
      if (v6 != v5) {
        os_unfair_lock_unlock(v36);
      }
      return;
    }
    while (1)
    {
      unint64_t v21 = v11;
      unsigned int v8 = (*(unsigned char *)(v11 + 32) & 0xF) == 1 ? 1 : *(_DWORD *)(v21 + 40);
      unint64_t v42 = v12;
      if (v8 >= *(_DWORD *)(v12 + 12)) {
        break;
      }
      char v9 = 0;
      _xzm_segment_group_segment_span_remove_from_queue((uint64_t)v13, v11);
      unint64_t v11 = _xzm_segment_group_segment_span_free_coalesce(v13, v12, v11, &v9);
      if ((v9 & 1) == 0) {
        goto LABEL_24;
      }
    }
  }
  if ((*(unsigned char *)(v11 + 32) & 0xF) != 3)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"span->xzc_bits.xzcb_kind == XZM_SLICE_KIND_MULTI_FREE\" "
                           "failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:2378)";
    __break(1u);
    JUMPOUT(0xB34CLL);
  }
  if (*(_DWORD *)(v11 + 40) != *(_DWORD *)(v12 + 12))
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"span->xzcs_slice_count == segment->xzs_slice_count\" fai"
                           "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:2379)";
    __break(1u);
    JUMPOUT(0xB38CLL);
  }
  _xzm_segment_group_segment_span_remove_from_queue((uint64_t)v13, v11);
  unint64_t v15 = v13 + 4;
  os_unfair_lock_t lock = (os_unfair_lock_t)(v13 + 4);
  int v26 = 0;
  uint64_t v28 = 3;
  uint64_t v29 = 3;
  unint64_t v30 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  int v26 = *(void *)(v30 + 24);
  int v25 = 0;
  int v24 = v26;
  int v23 = 0;
  int v3 = v26;
  int v4 = v26;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v13 + 4), (unsigned int *)&v4, 0, memory_order_release, memory_order_relaxed);
  if (v4 != v3) {
    int v24 = v4;
  }
  BOOL v22 = v4 == v3;
  if (v4 != v3) {
    os_unfair_lock_unlock(lock);
  }
  _xzm_segment_group_segment_deallocate((uint64_t)v13, v12, 1);
}

uint64_t _xzm_segment_group_span_mark_free(unsigned __int8 *a1, unint64_t a2)
{
  switch(*a1)
  {
    case 0u:
    case 2u:
      BOOL v12 = (*(unsigned char *)(*((void *)a1 + 3) + 328) & 4) != 0;
      break;
    case 1u:
    case 3u:
      BOOL v12 = (*(unsigned char *)(*((void *)a1 + 3) + 328) & 8) != 0;
      break;
    default:
      uint64_t v2 = *a1;
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: unknown segment group id";
      qword_C0148 = v2;
      __break(1u);
      JUMPOUT(0xB820);
  }
  if (!v12)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_segment_group_uses_deferred_reclamation(sg)\" faile"
                           "d (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1182)";
    __break(1u);
    JUMPOUT(0xB850);
  }
  char v13 = *(unsigned char *)(a2 + 32) & 0xF;
  BOOL v9 = 1;
  if (v13 != 1) {
    BOOL v9 = v13 == 3;
  }
  if (!v9)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_slice_kind_is_free_span(span->xzc_bits.xzcb_kind)\""
                           " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1183)";
    __break(1u);
    JUMPOUT(0xB8BCLL);
  }
  unint64_t v11 = a2 & 0xFFFFFFFFFFFFC000;
  char v8 = 1;
  if ((a2 & 0xFFFFFFFFFFFFC000) != 0)
  {
    BOOL v7 = 0;
    if (a2 >= v11 + 2136) {
      BOOL v7 = a2 < (a2 & 0xFFFFFFFFFFFFC000)
    }
              + 48 * *(unsigned int *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFC000))
              + 2136;
    char v8 = v7;
  }
  if ((v8 & 1) == 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0xB9C4);
  }
  if (a2 < v11 + 2136)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" fai"
                           "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                           "e_internal.h:278)";
    __break(1u);
    JUMPOUT(0xBA30);
  }
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - (a2 & 0xFFFFFFFFFFFFC000) - 2136) >> 4)) >= *(unsigned int *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFC000)))
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fail"
                           "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline"
                           "_internal.h:280)";
    __break(1u);
    JUMPOUT(0xBA98);
  }
  unint64_t v10 = (uint64_t *)(v11 + 88 + 0xFFFFFFFD55555558 * ((uint64_t)(a2 - v11 - 2136) >> 4));
  if (*v10 != -1)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"*reclaim_id == VM_RECLAIM_INDEX_NULL\" failed (/Library/"
                           "Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1190)";
    __break(1u);
    JUMPOUT(0xBAE0);
  }
  if ((*(unsigned char *)(a2 + 32) & 0xF) == 1) {
    int v6 = 1;
  }
  else {
    int v6 = *(_DWORD *)(a2 + 40);
  }
  unint64_t v14 = a2 & 0xFFFFFFFFFFFFC000;
  char v5 = 1;
  if ((a2 & 0xFFFFFFFFFFFFC000) != 0)
  {
    BOOL v4 = 0;
    if (a2 >= v14 + 2136) {
      BOOL v4 = a2 < (a2 & 0xFFFFFFFFFFFFC000)
    }
              + 48 * *(unsigned int *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFC000))
              + 2136;
    char v5 = v4;
  }
  if ((v5 & 1) == 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0xBC20);
  }
  if (a2 < v14 + 2136)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" fai"
                           "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                           "e_internal.h:278)";
    __break(1u);
    JUMPOUT(0xBC84);
  }
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - (a2 & 0xFFFFFFFFFFFFC000) - 2136) >> 4)) >= *(unsigned int *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFC000)))
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fail"
                           "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline"
                           "_internal.h:280)";
    __break(1u);
    JUMPOUT(0xBCECLL);
  }
  uint64_t result = xzm_reclaim_mark_free(*(void *)(*((void *)a1 + 3) + 464), *(_WORD *)((char *)&stru_20.filesize + (a2 & 0xFFFFFFFFFFFFC000))- ((unsigned __int16)((uint64_t)(a2 - v14 - 2136) >> 4) << 14), (v6 << 14));
  *unint64_t v10 = result;
  return result;
}

uint64_t xzm_segment_group_try_realloc_large_chunk(unsigned __int8 *a1, uint64_t a2, unint64_t a3, unsigned int a4)
{
  unint64_t v35 = a3 & 0xFFFFFFFFFFFFC000;
  char v22 = 1;
  if ((a3 & 0xFFFFFFFFFFFFC000) != 0)
  {
    BOOL v21 = 0;
    if (a3 >= v35 + 2136) {
      BOOL v21 = a3 < (a3 & 0xFFFFFFFFFFFFC000)
    }
               + 48 * *(unsigned int *)((char *)dword_10 + (a3 & 0xFFFFFFFFFFFFC000))
               + 2136;
    char v22 = v21;
  }
  if ((v22 & 1) == 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0xBE50);
  }
  if (v35 != a2)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_segment_for_slice(&sg->xzsg_main_ref->xzmz_base, ch"
                           "unk) == segment\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone"
                           "/xzone_segment.c:2750)";
    __break(1u);
    JUMPOUT(0xBE8CLL);
  }
  if (a4 <= 2)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"new_slice_count > (XZM_SMALL_BLOCK_SIZE_MAX / XZM_SEGMEN"
                           "T_SLICE_SIZE)\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/x"
                           "zone_segment.c:2752)";
    __break(1u);
    JUMPOUT(0xBEC0);
  }
  if (a4 >= 0x81)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"new_slice_count <= (XZM_LARGE_BLOCK_SIZE_MAX / XZM_SEGME"
                           "NT_SLICE_SIZE)\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/"
                           "xzone_segment.c:2754)";
    __break(1u);
    JUMPOUT(0xBEF4);
  }
  if ((*(unsigned char *)(a3 + 32) & 0xF) != 6)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == XZM_SLICE_KIND_LARGE_CHUNK\""
                           " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:2755)";
    __break(1u);
    JUMPOUT(0xBF30);
  }
  if (*(_DWORD *)(a3 + 40) >= a4)
  {
    if (*(_DWORD *)(a3 + 40) > a4)
    {
      int v11 = 0;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 4), (unsigned int *)&v11, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
      if (v11) {
        os_unfair_lock_lock_with_options();
      }
      unsigned int v25 = *(_DWORD *)(a3 + 40) - a4;
      unint64_t v24 = a3 + 48 * a4;
      *(_DWORD *)(a3 + 40) = a4;
      unint64_t v23 = a3 + 48 * (*(_DWORD *)(a3 + 40) - 1);
      *(unsigned char *)(v23 + 32) = *(unsigned char *)(v23 + 32) & 0xF0 | 4;
      *(_DWORD *)(v23 + 36) = v23 - a3;
      unint64_t v34 = a3 & 0xFFFFFFFFFFFFC000;
      char v17 = 1;
      if ((a3 & 0xFFFFFFFFFFFFC000) != 0)
      {
        BOOL v16 = 0;
        if (a3 >= v34 + 2136) {
          BOOL v16 = a3 < (a3 & 0xFFFFFFFFFFFFC000)
        }
                   + 48 * *(unsigned int *)((char *)dword_10 + (a3 & 0xFFFFFFFFFFFFC000))
                   + 2136;
        char v17 = v16;
      }
      if ((v17 & 1) == 0)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice <"
                               " (segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.ap"
                               "ple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
        __break(1u);
        JUMPOUT(0xC908);
      }
      if (v25 <= 1) {
        unsigned __int8 v12 = 2;
      }
      else {
        unsigned __int8 v12 = 6;
      }
      if (v24 < v34 + 2136)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\""
                               " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzo"
                               "ne_inline_internal.h:278)";
        __break(1u);
        JUMPOUT(0xC998);
      }
      int64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - (a3 & 0xFFFFFFFFFFFFC000) - 2136) >> 4);
      if (v39 >= *(unsigned int *)((char *)dword_10 + (a3 & 0xFFFFFFFFFFFFC000)))
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" "
                               "failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzon"
                               "e_inline_internal.h:280)";
        __break(1u);
        JUMPOUT(0xCA04);
      }
      _xzm_segment_group_segment_span_mark_allocated((uint64_t)a1, v34, v12, v39, v25);
      int v13 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
      int v14 = v13;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 4), (unsigned int *)&v14, 0, memory_order_release, memory_order_relaxed);
      if (v14 != v13) {
        os_unfair_lock_unlock((os_unfair_lock_t)a1 + 1);
      }
      xzm_segment_group_free_chunk(a1, v24, 0);
      return 1;
    }
    else
    {
      return 1;
    }
  }
  else
  {
    int v4 = 0;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 4), (unsigned int *)&v4, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
    if (v4) {
      os_unfair_lock_lock_with_options();
    }
    unsigned int v28 = a4 - *(_DWORD *)(a3 + 40);
    unint64_t v27 = a3 + 48 * *(unsigned int *)(a3 + 40);
    if (v27 >= a2 + 48 * (unint64_t)*(unsigned int *)(a2 + 16) + 2136) {
      goto LABEL_26;
    }
    char v38 = *(unsigned char *)(v27 + 32) & 0xF;
    BOOL v20 = 1;
    if (v38 != 1) {
      BOOL v20 = v38 == 3;
    }
    if (v20 && ((*(unsigned char *)(v27 + 32) & 0xF) != 1 ? (unsigned int v19 = *(_DWORD *)(v27 + 40)) : (unsigned int v19 = 1), v19 >= v28))
    {
      switch(*a1)
      {
        case 0u:
        case 2u:
          BOOL v37 = (*(unsigned char *)(*((void *)a1 + 3) + 328) & 4) != 0;
          break;
        case 1u:
        case 3u:
          BOOL v37 = (*(unsigned char *)(*((void *)a1 + 3) + 328) & 8) != 0;
          break;
        default:
          uint64_t v36 = *a1;
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: unknown segment group id";
          qword_C0148 = v36;
          __break(1u);
          JUMPOUT(0xC308);
      }
      if (!v37 || (_xzm_segment_group_span_mark_used(a1, v27) & 1) != 0)
      {
        _xzm_segment_group_segment_span_remove_from_queue((uint64_t)a1, v27);
        if ((*(unsigned char *)(v27 + 32) & 0xF) == 1) {
          unsigned int v18 = 1;
        }
        else {
          unsigned int v18 = *(_DWORD *)(v27 + 40);
        }
        if (v18 > v28) {
          _xzm_segment_group_segment_slice_split((os_unfair_lock_s *)a1, a2, v27, v28, 0);
        }
        for (signed int i = 0; i < v28; ++i)
        {
          *(unsigned char *)(v27 + 48 * i + 32) = *(unsigned char *)(v27 + 48 * i + 32) & 0xF0 | 4;
          *(_DWORD *)(v27 + 48 * i + 36) = v27 + 48 * i - a3;
        }
        *(_DWORD *)(a3 + 40) = a4;
        if (!_xzm_segment_group_segment_is_valid((os_unfair_lock_s *)a1, a2))
        {
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_segment_group_segment_is_valid(sg, segment)\""
                                 " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:2796)";
          __break(1u);
          JUMPOUT(0xC5A4);
        }
        int v9 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
        int v10 = v9;
        atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 4), (unsigned int *)&v10, 0, memory_order_release, memory_order_relaxed);
        if (v10 != v9) {
          os_unfair_lock_unlock((os_unfair_lock_t)a1 + 1);
        }
        return 1;
      }
      else
      {
        int v7 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
        int v8 = v7;
        atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 4), (unsigned int *)&v8, 0, memory_order_release, memory_order_relaxed);
        if (v8 != v7) {
          os_unfair_lock_unlock((os_unfair_lock_t)a1 + 1);
        }
        return 0;
      }
    }
    else
    {
LABEL_26:
      int v5 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
      int v6 = v5;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 4), (unsigned int *)&v6, 0, memory_order_release, memory_order_relaxed);
      if (v6 != v5) {
        os_unfair_lock_unlock((os_unfair_lock_t)a1 + 1);
      }
      return 0;
    }
  }
}

uint64_t _xzm_segment_group_span_mark_used(unsigned __int8 *a1, unint64_t a2)
{
  switch(*a1)
  {
    case 0u:
    case 2u:
      BOOL v16 = (*(unsigned char *)(*((void *)a1 + 3) + 328) & 4) != 0;
      break;
    case 1u:
    case 3u:
      BOOL v16 = (*(unsigned char *)(*((void *)a1 + 3) + 328) & 8) != 0;
      break;
    default:
      uint64_t v2 = *a1;
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: unknown segment group id";
      qword_C0148 = v2;
      __break(1u);
      JUMPOUT(0xCC24);
  }
  if (!v16)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_segment_group_uses_deferred_reclamation(sg)\" faile"
                           "d (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1200)";
    __break(1u);
    JUMPOUT(0xCC54);
  }
  char v17 = *(unsigned char *)(a2 + 32) & 0xF;
  BOOL v11 = 1;
  if (v17 != 1) {
    BOOL v11 = v17 == 3;
  }
  if (!v11)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_slice_kind_is_free_span(span->xzc_bits.xzcb_kind)\""
                           " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1201)";
    __break(1u);
    JUMPOUT(0xCCC0);
  }
  unint64_t v21 = a2 & 0xFFFFFFFFFFFFC000;
  char v10 = 1;
  if ((a2 & 0xFFFFFFFFFFFFC000) != 0)
  {
    BOOL v9 = 0;
    if (a2 >= v21 + 2136) {
      BOOL v9 = a2 < (a2 & 0xFFFFFFFFFFFFC000)
    }
              + 48 * *(unsigned int *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFC000))
              + 2136;
    char v10 = v9;
  }
  if ((v10 & 1) == 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0xCDB0);
  }
  if (a2 < v21 + 2136)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" fai"
                           "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                           "e_internal.h:278)";
    __break(1u);
    JUMPOUT(0xCE38);
  }
  int64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v21 - 2136) >> 4);
  if (v22 >= *(unsigned int *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFC000)))
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fail"
                           "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline"
                           "_internal.h:280)";
    __break(1u);
    JUMPOUT(0xCEA4);
  }
  if (*(void *)((char *)&stru_20.maxprot + 8 * v22 + (a2 & 0xFFFFFFFFFFFFC000)) == -1)
  {
    return 1;
  }
  else
  {
    unint64_t v15 = a2 & 0xFFFFFFFFFFFFC000;
    char v8 = 1;
    if ((a2 & 0xFFFFFFFFFFFFC000) != 0)
    {
      BOOL v7 = 0;
      if (a2 >= v15 + 2136) {
        BOOL v7 = a2 < (a2 & 0xFFFFFFFFFFFFC000)
      }
                + 48 * *(unsigned int *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFC000))
                + 2136;
      char v8 = v7;
    }
    if ((v8 & 1) == 0)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < ("
                             "segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple."
                             "xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
      __break(1u);
      JUMPOUT(0xCFE0);
    }
    if (a2 < v15 + 2136)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" f"
                             "ailed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_i"
                             "nline_internal.h:278)";
      __break(1u);
      JUMPOUT(0xD050);
    }
    int64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v15 - 2136) >> 4);
    if (v18 >= *(unsigned int *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFC000)))
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fa"
                             "iled (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_in"
                             "line_internal.h:280)";
      __break(1u);
      JUMPOUT(0xD0BCLL);
    }
    int v13 = (uint64_t *)(v15 + 88 + 8 * v18);
    if (*v13 == -1)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"*reclaim_id != VM_RECLAIM_INDEX_NULL\" failed (/Librar"
                             "y/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1213)";
      __break(1u);
      JUMPOUT(0xD108);
    }
    if ((*(unsigned char *)(a2 + 32) & 0xF) == 1) {
      int v6 = 1;
    }
    else {
      int v6 = *(_DWORD *)(a2 + 40);
    }
    unint64_t v19 = a2 & 0xFFFFFFFFFFFFC000;
    char v5 = 1;
    if ((a2 & 0xFFFFFFFFFFFFC000) != 0)
    {
      BOOL v4 = 0;
      if (a2 >= v19 + 2136) {
        BOOL v4 = a2 < (a2 & 0xFFFFFFFFFFFFC000)
      }
                + 48 * *(unsigned int *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFC000))
                + 2136;
      char v5 = v4;
    }
    if ((v5 & 1) == 0)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < ("
                             "segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple."
                             "xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
      __break(1u);
      JUMPOUT(0xD25CLL);
    }
    if (a2 < v19 + 2136)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" f"
                             "ailed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_i"
                             "nline_internal.h:278)";
      __break(1u);
      JUMPOUT(0xD2C4);
    }
    int64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v19 - 2136) >> 4);
    if (v20 >= *(unsigned int *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFC000)))
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fa"
                             "iled (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_in"
                             "line_internal.h:280)";
      __break(1u);
      JUMPOUT(0xD330);
    }
    char v12 = xzm_reclaim_mark_used(*(void *)(*((void *)a1 + 3) + 464), *v13, *(uint64_t *)((char *)&stru_20.filesize + (a2 & 0xFFFFFFFFFFFFC000))+ ((unint64_t)v20 << 14), (v6 << 14), 1);
    if (v12) {
      *int v13 = -1;
    }
    return v12 & 1;
  }
}

void _xzm_segment_group_segment_span_remove_from_queue(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16)) {
    *(void *)(*(void *)(a2 + 16) + 24) = *(void *)(a2 + 24);
  }
  **(void **)(a2 + 24) = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = -1;
  *(void *)(a2 + 24) = -1;
}

unint64_t _xzm_segment_group_segment_slice_split(os_unfair_lock_s *a1, uint64_t a2, unint64_t a3, unsigned int a4, char a5)
{
  unint64_t v14 = a3 & 0xFFFFFFFFFFFFC000;
  char v8 = 1;
  if ((a3 & 0xFFFFFFFFFFFFC000) != 0)
  {
    BOOL v7 = 0;
    if (a3 >= v14 + 2136) {
      BOOL v7 = a3 < (a3 & 0xFFFFFFFFFFFFC000)
    }
              + 48 * *(unsigned int *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFC000))
              + 2136;
    char v8 = v7;
  }
  if ((v8 & 1) == 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0xD550);
  }
  if (v14 != a2)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_segment_for_slice(&sg->xzsg_main_ref->xzmz_base, sp"
                           "an) == segment\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/"
                           "xzone_segment.c:1328)";
    __break(1u);
    JUMPOUT(0xD588);
  }
  if ((*(unsigned char *)(a3 + 32) & 0xF) != 3)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"span->xzc_bits.xzcb_kind == XZM_SLICE_KIND_MULTI_FREE\" "
                           "failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1329)";
    __break(1u);
    JUMPOUT(0xD5C4);
  }
  if (*(_DWORD *)(a3 + 40) <= a4)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"span->xzcs_slice_count > slice_count\" failed (/Library/"
                           "Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1330)";
    __break(1u);
    JUMPOUT(0xD600);
  }
  if (*(unsigned char *)(a2 + 20) == 1)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segment->xzs_kind != XZM_SEGMENT_KIND_HUGE\" failed (/Li"
                           "brary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1331)";
    __break(1u);
    JUMPOUT(0xD638);
  }
  unsigned int v9 = *(_DWORD *)(a3 + 40) - a4;
  if (a5)
  {
    unint64_t v11 = a3 + 48 * v9;
    *(_DWORD *)(v11 + 40) = *(_DWORD *)(a3 + 40) - v9;
    *(unsigned char *)(v11 + 32) = *(unsigned char *)(v11 + 32) & 0xF0 | 3;
    *(unsigned char *)(v11 + 32) = *(unsigned char *)(v11 + 32) & 0xEF | *(unsigned char *)(a3 + 32) & 0x10;
    if (a3 < a2 + 2136)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" f"
                             "ailed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_i"
                             "nline_internal.h:278)";
      __break(1u);
      JUMPOUT(0xD728);
    }
    int64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3 - a2 - 2136) >> 4);
    if (v17 >= *(unsigned int *)(a2 + 16))
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fa"
                             "iled (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_in"
                             "line_internal.h:280)";
      __break(1u);
      JUMPOUT(0xD790);
    }
    unsigned int v10 = v17;
    _xzm_segment_group_segment_span_free(a1, a2, v17, v9, (*(unsigned char *)(a3 + 32) & 0x10) != 0);
  }
  else
  {
    unint64_t v11 = a3;
    if (a3 < a2 + 2136)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" f"
                             "ailed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_i"
                             "nline_internal.h:278)";
      __break(1u);
      JUMPOUT(0xD7F0);
    }
    int64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3 - a2 - 2136) >> 4);
    if (v16 >= *(unsigned int *)(a2 + 16))
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fa"
                             "iled (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_in"
                             "line_internal.h:280)";
      __break(1u);
      JUMPOUT(0xD858);
    }
    unsigned int v10 = v16 + a4;
    _xzm_segment_group_segment_span_free(a1, a2, v16 + a4, v9, (*(unsigned char *)(a3 + 32) & 0x10) != 0);
  }
  switch(LOBYTE(a1->_os_unfair_lock_opaque))
  {
    case 0:
    case 2:
      BOOL v15 = (*(unsigned char *)(*(void *)&a1[6]._os_unfair_lock_opaque + 328) & 4) != 0;
      break;
    case 1:
    case 3:
      BOOL v15 = (*(unsigned char *)(*(void *)&a1[6]._os_unfair_lock_opaque + 328) & 8) != 0;
      break;
    default:
      uint64_t os_unfair_lock_opaque_low = LOBYTE(a1->_os_unfair_lock_opaque);
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: unknown segment group id";
      qword_C0148 = os_unfair_lock_opaque_low;
      __break(1u);
      JUMPOUT(0xD944);
  }
  if (v15 && (*(unsigned char *)(a2 + 48 * v10 + 2168) & 0x10) == 0) {
    _xzm_segment_group_span_mark_free((unsigned __int8 *)a1, a2 + 48 * v10 + 2136);
  }
  return v11;
}

uint64_t _xzm_segment_group_segment_span_mark_allocated(uint64_t a1, uint64_t a2, unsigned __int8 a3, unint64_t a4, unsigned int a5)
{
  if (a3 < 2u) {
    goto LABEL_6;
  }
  if (a3 != 2)
  {
    if (a3 - 3 >= 2)
    {
      if (a3 - 5 >= 3)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
        qword_C0148 = a3;
        __break(1u);
        JUMPOUT(0xDA8CLL);
      }
      goto LABEL_7;
    }
LABEL_6:
    char v11 = 0;
    goto LABEL_8;
  }
LABEL_7:
  char v11 = 1;
LABEL_8:
  if (!v11)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_slice_kind_is_chunk(kind)\" failed (/Library/Caches"
                           "/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1426)";
    __break(1u);
    JUMPOUT(0xDABCLL);
  }
  if (a4 >= *(unsigned int *)(a2 + 16))
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice_index < segment->xzs_slice_entry_count\" failed (/"
                           "Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1427)";
    __break(1u);
    JUMPOUT(0xDAF8);
  }
  if (a5 - 1 > 2) {
    uint64_t v6 = 3;
  }
  else {
    uint64_t v6 = a5 - 1;
  }
  unint64_t v9 = v6;
  if (a4 + v6 >= *(unsigned int *)(a2 + 16)) {
    unint64_t v9 = ~a4 + *(unsigned int *)(a2 + 16);
  }
  unint64_t v10 = a2 + 48 * a4 + 2184;
  for (unint64_t i = 1; i <= v9; ++i)
  {
    *(unsigned char *)(v10 + 32) = *(unsigned char *)(v10 + 32) & 0xF0 | 4;
    *(_DWORD *)(v10 + 36) = 48 * i;
    v10 += 48;
  }
  unint64_t v7 = a4 + a5 - 1;
  if (a3 != 7)
  {
    if (v7 >= *(unsigned int *)(a2 + 16))
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"last_slice_index < segment->xzs_slice_entry_count\" fa"
                             "iled (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1450)";
      __break(1u);
      JUMPOUT(0xDC8CLL);
    }
    if (a2 + 48 * v7 + 2136 >= v10)
    {
      *(unsigned char *)(a2 + 48 * v7 + 2168) = *(unsigned char *)(a2 + 48 * v7 + 2168) & 0xF0 | 4;
      *(_DWORD *)(a2 + 48 * v7 + 2172) = 48 * a5 - 48;
    }
  }
  if (a3 == 2)
  {
    if (a5 != 1)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice_count == 1\" failed (/Library/Caches/com.apple.x"
                             "bs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1465)";
      __break(1u);
      JUMPOUT(0xDD4CLL);
    }
  }
  else
  {
    *(_DWORD *)(a2 + 48 * a4 + 2176) = a5;
  }
  *(unsigned char *)(a2 + 48 * a4 + 2168) = *(unsigned char *)(a2 + 48 * a4 + 2168) & 0xF0 | a3 & 0xF;
  if (a2 + 48 * a4 + 2136 < a2 + 2136)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" fai"
                           "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                           "e_internal.h:278)";
    __break(1u);
    JUMPOUT(0xDDD0);
  }
  int64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(48 * a4) >> 4);
  if (v12 >= *(unsigned int *)(a2 + 16))
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fail"
                           "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline"
                           "_internal.h:280)";
    __break(1u);
    JUMPOUT(0xDE38);
  }
  *(void *)(a2 + 88 + 8 * v12) = -1;
  ++*(_DWORD *)(a2 + 8);
  return a2 + 48 * a4 + 2136;
}

uint64_t xzm_segment_group_try_realloc_huge_chunk(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unsigned int a5)
{
  int v32 = (os_unfair_lock_s *)a1;
  uint64_t v31 = a2;
  unint64_t v30 = a3;
  unint64_t v29 = a4;
  unsigned int v28 = a5;
  uint64_t v37 = *(void *)(a1 + 24);
  unint64_t v36 = a4;
  unint64_t v35 = a4 & 0xFFFFFFFFFFFFC000;
  int v17 = 1;
  if ((a4 & 0xFFFFFFFFFFFFC000) != 0)
  {
    BOOL v16 = 0;
    if (v36 >= v35 + 2136) {
      BOOL v16 = v36 < v35 + 48 * *(unsigned int *)(v35 + 16) + 2136;
    }
    int v17 = v16;
  }
  if ((v17 & 1) == 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0xDF68);
  }
  if (v35 != v30)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_segment_for_slice(&sg->xzsg_main_ref->xzmz_base, ch"
                           "unk) == segment\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone"
                           "/xzone_segment.c:2842)";
    __break(1u);
    JUMPOUT(0xDFA0);
  }
  if (v28 <= 0x80)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"new_slice_count > (XZM_LARGE_BLOCK_SIZE_MAX / XZM_SEGMEN"
                           "T_SLICE_SIZE)\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/x"
                           "zone_segment.c:2844)";
    __break(1u);
    JUMPOUT(0xDFD4);
  }
  if ((*(unsigned char *)(v29 + 32) & 0xF) != 7)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == XZM_SLICE_KIND_HUGE_CHUNK\""
                           " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:2845)";
    __break(1u);
    JUMPOUT(0xE010);
  }
  if (*(_DWORD *)(v29 + 40) >= v28)
  {
    if (*(_DWORD *)(v29 + 40) > v28)
    {
      _xzm_segment_group_split_huge_segment((uint64_t)v32, v30, v28);
      if (!_xzm_segment_group_segment_is_valid(v32, v30))
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_segment_group_segment_is_valid(sg, segment)\" f"
                               "ailed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:2902)";
        __break(1u);
        JUMPOUT(0xE6ECLL);
      }
      return 1;
    }
    else
    {
      return 1;
    }
  }
  else
  {
    uint64_t v27 = 0;
    unint64_t v26 = 0;
    uint64_t v41 = v31;
    unint64_t v40 = v29;
    int64_t v39 = &v27;
    if (&v6 != (uint64_t *)-152)
    {
      int v15 = *(unsigned char *)(v40 + 32) & 0xF;
      if (v15 == 2)
      {
        *int64_t v39 = 0x4000;
      }
      else if (v15 == 5)
      {
        *int64_t v39 = 0x10000;
      }
      else
      {
        if ((v15 - 6) >= 2)
        {
          uint64_t v38 = 0;
          uint64_t v38 = *(unsigned char *)(v40 + 32) & 0xF;
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: asking for start of chunk with invalid kind";
          qword_C0148 = v38;
          __break(1u);
          JUMPOUT(0xE11CLL);
        }
        *int64_t v39 = (unint64_t)*(unsigned int *)(v40 + 40) << 14;
      }
    }
    uint64_t v60 = v41;
    unint64_t v59 = v40;
    uint64_t v63 = v41;
    unint64_t v62 = v40;
    unint64_t v61 = v40 & 0xFFFFFFFFFFFFC000;
    int v14 = 1;
    if ((v40 & 0xFFFFFFFFFFFFC000) != 0)
    {
      BOOL v13 = 0;
      if (v62 >= v61 + 2136) {
        BOOL v13 = v62 < v61 + 48 * *(unsigned int *)(v61 + 16) + 2136;
      }
      int v14 = v13;
    }
    if ((v14 & 1) == 0)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < ("
                             "segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple."
                             "xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
      __break(1u);
      JUMPOUT(0xE1FCLL);
    }
    unint64_t v65 = v61;
    unint64_t v64 = v59;
    unint64_t v12 = v61;
    unint64_t v68 = v61;
    unint64_t v67 = v59;
    if (v59 < v61 + 2136)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" f"
                             "ailed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_i"
                             "nline_internal.h:278)";
      __break(1u);
      JUMPOUT(0xE260);
    }
    int64_t v66 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v67 - v68 - 2136) >> 4);
    if (v66 >= *(unsigned int *)(v68 + 16))
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fa"
                             "iled (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_in"
                             "line_internal.h:280)";
      __break(1u);
      JUMPOUT(0xE2C8);
    }
    unint64_t v70 = v12;
    int v69 = v66;
    unint64_t v26 = *(void *)(v12 + 80) + ((unint64_t)v66 << 14);
    mach_vm_address_t v25 = v26 + v27;
    uint64_t v24 = 0;
    uint64_t v24 = v28 - *(_DWORD *)(v29 + 40);
    mach_vm_size_t v23 = v24 << 14;
    mach_vm_address_t i = 0;
    if (((v26 + v27) & 0x3FFFFF) != 0) {
      mach_vm_address_t v11 = (v25 & 0xFFFFFFFFFFC00000) + 0x400000;
    }
    else {
      mach_vm_address_t v11 = v25;
    }
    for (mach_vm_address_t i = v11; i < v25 + v23; i += 0x400000)
    {
      uint64_t v44 = *(void *)&v32[6]._os_unfair_lock_opaque;
      mach_vm_address_t v43 = i;
      unint64_t v42 = 0;
      mach_vm_address_t v52 = i;
      uint64_t v51 = v44;
      uint64_t v50 = 0;
      unint64_t v49 = 0;
      mach_vm_address_t v57 = i;
      int v56 = &v50;
      mach_vm_address_t v55 = i;
      if (i >> 36)
      {
        *int v56 = 0;
        unint64_t v58 = 0x4000;
      }
      else
      {
        unint64_t v54 = v55 >> 22;
        *int v56 = 0;
        if (v54 >= 0x4000)
        {
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segindex < XZM_SEGMENT_TABLE_ENTRIES\" failed (/Li"
                                 "brary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:169)";
          __break(1u);
          JUMPOUT(0xE458);
        }
        unint64_t v58 = v54;
      }
      unint64_t v49 = v58;
      if (v58 >= 0x4000) {
        uint64_t v53 = 0;
      }
      else {
        uint64_t v53 = *(void *)(v51 + 408) + 4 * v49;
      }
      unint64_t v42 = (unsigned int *)v53;
      if (v53)
      {
        unsigned int v71 = *v42;
        unint64_t v45 = (unint64_t)v71 << 14;
      }
      else
      {
        unint64_t v45 = 0;
      }
      if (v45) {
        return 0;
      }
    }
    int v21 = 6;
    mach_vm_address_t plat = 0;
    mach_vm_address_t plat = mvm_allocate_plat(v25, v23, 0, 0, 0, 6, 0);
    if (plat)
    {
      unint64_t v10 = 0;
      unint64_t v19 = (unint64_t)v28 << 14;
      unint64_t v46 = v30;
      unint64_t v48 = v30;
      int v47 = 0;
      _xzm_segment_group_init_segment((uint64_t)v32, v30, *(void *)(v30 + 80), v19, 1, 0);
      unint64_t v18 = v10;
      if ((v25 & 0x3FFFFF) != 0) {
        mach_vm_address_t v9 = (v25 & 0xFFFFFFFFFFC00000) + 0x400000;
      }
      else {
        mach_vm_address_t v9 = v25;
      }
      unint64_t v18 = v9;
      if (v26 + v19 > v9)
      {
        uint64_t v34 = v31;
        uint64_t v8 = *(void *)(v31 + 232);
        if (v8) {
          uint64_t v7 = v8;
        }
        else {
          uint64_t v7 = v34;
        }
        _xzm_segment_table_allocated_at(v7, v18, v30);
      }
      if (!_xzm_segment_group_segment_is_valid(v32, v30))
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_segment_group_segment_is_valid(sg, segment)\" f"
                               "ailed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:2894)";
        __break(1u);
        JUMPOUT(0xE674);
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
}

uint64_t _xzm_segment_group_init_segment(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, char a5, char a6)
{
  uint64_t v10 = 0;
  if (a2 >> 36)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)segment < XZM_LIMIT_ADDRESS\" failed (/Librar"
                           "y/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1765)";
    __break(1u);
    JUMPOUT(0xE784);
  }
  if (a3 >> 36)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)body < XZM_LIMIT_ADDRESS\" failed (/Library/C"
                           "aches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1766)";
    __break(1u);
    JUMPOUT(0xE7B8);
  }
  if ((a2 & 0x3FFF) != 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)segment % XZM_METAPOOL_SEGMENT_ALIGN == 0\" f"
                           "ailed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1767)";
    __break(1u);
    JUMPOUT(0xE7ECLL);
  }
  if ((a3 & 0x3FFFFF) != 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)body % XZM_SEGMENT_SIZE == 0\" failed (/Libra"
                           "ry/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1768)";
    __break(1u);
    JUMPOUT(0xE820);
  }
  if ((a4 & 0x3FFF) != 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"body_size % XZM_SEGMENT_SLICE_SIZE == 0\" failed (/Libra"
                           "ry/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1769)";
    __break(1u);
    JUMPOUT(0xE854);
  }
  unsigned int v9 = a4 >> 14;
  if (((a4 >> 14) & 0x3FFFF00000000) != 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: Slice count too large in init_segment";
    __break(1u);
    JUMPOUT(0xE8A8);
  }
  *(void *)a2 = a1;
  *(_DWORD *)(a2 + 12) = v9;
  if (v9 > 0xFF) {
    int v8 = 256;
  }
  else {
    int v8 = a4 >> 14;
  }
  *(_DWORD *)(a2 + 16) = v8;
  *(_DWORD *)(a2 + 8) = 0;
  *(void *)(a2 + 80) = a3;
  *(void *)(a2 + 72) = -1;
  *(unsigned char *)(a2 + 20) = a5 & 1;
  if (a5)
  {
    uint64_t v10 = _xzm_segment_group_segment_span_mark_allocated(a1, a2, 7u, 0, *(_DWORD *)(a2 + 12));
    *(unsigned char *)(v10 + 32) = *(unsigned char *)(v10 + 32) & 0xEF | (16 * (a6 & 1));
  }
  else
  {
    int v6 = 0;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 4), (unsigned int *)&v6, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
    if (v6) {
      os_unfair_lock_lock_with_options();
    }
    _xzm_segment_group_segment_span_free((os_unfair_lock_s *)a1, a2, 0, v9, a6 & 1);
  }
  if (!_xzm_segment_group_segment_is_valid((os_unfair_lock_s *)a1, a2))
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_segment_group_segment_is_valid(sg, segment)\" faile"
                           "d (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1798)";
    __break(1u);
    JUMPOUT(0xEAC0);
  }
  return v10;
}

uint64_t _xzm_segment_table_allocated_at(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v6 = a2;
  if ((a2 & 0x3FFFFF) != 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)data % XZM_SEGMENT_SIZE == 0\" failed (/Libra"
                           "ry/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:35)";
    __break(1u);
    JUMPOUT(0xEB14);
  }
  int v3 = *(_DWORD *)(a3 + 12) - 1;
  unint64_t v14 = a3;
  int v13 = v3;
  unint64_t v16 = a3;
  int v15 = v3 + 1;
  unint64_t v5 = *(void *)(a3 + 80) + ((unint64_t)(v3 + 1) << 14);
  if (a2 >= v5)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)data < (uintptr_t)segment_end\" failed (/Libr"
                           "ary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:38)";
    __break(1u);
    JUMPOUT(0xEB98);
  }
  unint64_t v11 = a3;
  if ((a3 & 0x3FFF) != 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)segment % XZM_METAPOOL_SEGMENT_ALIGN == 0\" f"
                           "ailed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inl"
                           "ine_internal.h:186)";
    __break(1u);
    JUMPOUT(0xEBDCLL);
  }
  if (v11 >> 14 >= 0xFFFFFFFF)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"((uintptr_t)segment >> XZM_METAPOOL_SEGMENT_BLOCK_SHIFT)"
                           " < UINT32_MAX\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/."
                           "./xzone/xzone_inline_internal.h:190)";
    __break(1u);
    JUMPOUT(0xEC14);
  }
  unsigned int v12 = v11 >> 14;
  unsigned int v4 = v12;
  while (v6 < v5)
  {
    unint64_t v9 = v6;
    uint64_t v8 = result;
    uint64_t v7 = 0;
    unint64_t v20 = v6;
    unint64_t v19 = &v7;
    unint64_t v18 = v6;
    if (v6 >> 36)
    {
      *unint64_t v19 = 0;
      unint64_t v21 = 0x4000;
    }
    else
    {
      unint64_t v17 = v18 >> 22;
      *unint64_t v19 = 0;
      if (v17 >= 0x4000)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segindex < XZM_SEGMENT_TABLE_ENTRIES\" failed (/Libr"
                               "ary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:169)";
        __break(1u);
        JUMPOUT(0xECF8);
      }
      unint64_t v21 = v17;
    }
    if (v21 < 0x4000) {
      uint64_t v10 = (unsigned int *)(*(void *)(v8 + 408) + 4 * v21);
    }
    else {
      uint64_t v10 = 0;
    }
    if (!v10)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"entry != NULL\" failed (/Library/Caches/com.apple.xbs/"
                             "Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:82)";
      __break(1u);
      JUMPOUT(0xED78);
    }
    if (*v10)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"entry->xste_val == 0\" failed (/Library/Caches/com.app"
                             "le.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:84)";
      __break(1u);
      JUMPOUT(0xEDACLL);
    }
    atomic_store(v4, v10);
    v6 += 0x400000;
  }
  return result;
}

uint64_t _xzm_segment_group_split_huge_segment(uint64_t result, unint64_t a2, unsigned int a3)
{
  uint64_t v17 = result;
  if (*(unsigned char *)(a2 + 20) != 1)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segment->xzs_kind == XZM_SEGMENT_KIND_HUGE\" failed (/Li"
                           "brary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:2413)";
    __break(1u);
    JUMPOUT(0xEE40);
  }
  if (*(_DWORD *)(a2 + 12) < a3)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segment->xzs_slice_count >= required_slices\" failed (/L"
                           "ibrary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:2414)";
    __break(1u);
    JUMPOUT(0xEE7CLL);
  }
  if (*(_DWORD *)(a2 + 12) != a3)
  {
    unint64_t v14 = *(void *)(a2 + 80) + ((unint64_t)*(unsigned int *)(a2 + 12) << 14);
    mach_vm_address_t v13 = *(void *)(a2 + 80) + ((unint64_t)a3 << 14);
    if (v13 < v14)
    {
      mach_vm_size_t v12 = v14 - v13;
      if ((v13 & 0x3FFFFF) != 0) {
        unint64_t v8 = (v13 & 0xFFFFFFFFFFC00000) + 0x400000;
      }
      else {
        unint64_t v8 = *(void *)(a2 + 80) + ((unint64_t)a3 << 14);
      }
      uint64_t v11 = *(void *)(*(void *)(result + 24) + 400);
      uint64_t v10 = (void *)xzm_metapool_alloc(v11);
      unint64_t v9 = v14 - v8;
      if (v8 < v14) {
        _xzm_segment_table_freed_at(*(void *)(v17 + 24), v8, a2, 0);
      }
      int v3 = 0;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v17 + 520), (unsigned int *)&v3, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
      if (v3) {
        os_unfair_lock_lock_with_options();
      }
      if (v8 >= v14 || v9 <= 0x200000 || *(unsigned __int16 *)(v17 + 514) >= (int)*(unsigned __int16 *)(v17 + 512))
      {
        int v6 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
        int v7 = v6;
        atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v17 + 520), (unsigned int *)&v7, 0, memory_order_release, memory_order_relaxed);
        if (v7 != v6) {
          os_unfair_lock_unlock((os_unfair_lock_t)(v17 + 520));
        }
        xzm_metapool_free(v11, v10);
        xzm_range_group_free_segment_body(*(unsigned char **)(v17 + 16), v13, v12);
      }
      else
      {
        _xzm_segment_group_init_segment(v17, (unint64_t)v10, v8, v9, 1, 0);
        _xzm_segment_group_cache_mark_free(v17, (uint64_t)v10);
        int v4 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
        int v5 = v4;
        atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v17 + 520), (unsigned int *)&v5, 0, memory_order_release, memory_order_relaxed);
        if (v5 != v4) {
          os_unfair_lock_unlock((os_unfair_lock_t)(v17 + 520));
        }
        if (v8 > v13) {
          xzm_range_group_free_segment_body(*(unsigned char **)(v17 + 16), v13, v12 - v9);
        }
      }
      uint64_t result = _xzm_segment_group_init_segment(v17, a2, *(void *)(a2 + 80), (unint64_t)a3 << 14, 1, 0);
    }
    if (*(void *)(a2 + 80) + ((unint64_t)*(unsigned int *)(a2 + 12) << 14) != v13)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_segment_end(segment) == remainder\" failed (/Libr"
                             "ary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:2496)";
      __break(1u);
      JUMPOUT(0xF404);
    }
  }
  return result;
}

unint64_t _xzm_segment_group_alloc_huge_chunk_from_cache(uint64_t a1, unsigned int a2)
{
  if (*(unsigned char *)a1 != 1)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"sg->xzsg_id == XZM_SEGMENT_GROUP_DATA_LARGE\" failed (/L"
                           "ibrary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1900)";
    __break(1u);
    JUMPOUT(0xF468);
  }
  unint64_t v12 = 0;
  uint64_t v11 = a1 + 464;
  int v2 = 0;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 520), (unsigned int *)&v2, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
  if (v2) {
    os_unfair_lock_lock_with_options();
  }
  if (*(_WORD *)(v11 + 50))
  {
    do
    {
      unint64_t v14 = 0;
      for (unint64_t i = *(void *)v11; ; unint64_t i = v12)
      {
        char v10 = 0;
        if (i)
        {
          unint64_t v12 = *(void *)(i + 24);
          char v10 = 1;
        }
        if ((v10 & 1) == 0) {
          break;
        }
        if (*(_DWORD *)(i + 12) >= a2
          && *(_DWORD *)(i + 12) < 2 * a2
          && (!v14 || *(_DWORD *)(i + 12) < *(_DWORD *)(v14 + 12)))
        {
          if (xzm_reclaim_is_available()) {
            unint64_t v14 = i;
          }
          else {
            _xzm_segment_group_cache_invalidate(a1, (void *)i);
          }
        }
      }
      if (!v14)
      {
        int v5 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
        int v6 = v5;
        atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v11 + 56), (unsigned int *)&v6, 0, memory_order_release, memory_order_relaxed);
        if (v6 != v5) {
          os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 56));
        }
        return 0;
      }
    }
    while (!_xzm_segment_group_cache_mark_used(a1, v14));
    int v7 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    int v8 = v7;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v11 + 56), (unsigned int *)&v8, 0, memory_order_release, memory_order_relaxed);
    if (v8 != v7) {
      os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 56));
    }
    _xzm_segment_table_allocated_at(*(void *)(a1 + 24), *(void *)(v14 + 80), v14);
    return v14 + 2136;
  }
  else
  {
    int v3 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    int v4 = v3;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v11 + 56), (unsigned int *)&v4, 0, memory_order_release, memory_order_relaxed);
    if (v4 != v3) {
      os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 56));
    }
    return 0;
  }
}

uint64_t _xzm_segment_group_alloc_segment(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t *a4, char a5)
{
  if (a2 || (char v9 = 1, a4))
  {
    BOOL v8 = 0;
    if (a2) {
      BOOL v8 = a4 != 0;
    }
    char v9 = v8;
  }
  if ((v9 & 1) == 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(required_bytes == 0 && huge_chunk == NULL) || (required"
                           "_bytes > 0 && huge_chunk != NULL)\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_d"
                           "riverkit/src/xzone/xzone_segment.c:1816)";
    __break(1u);
    JUMPOUT(0xFA40);
  }
  BOOL v7 = 1;
  if (!a2) {
    BOOL v7 = a3 == 0;
  }
  if (!v7)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"huge || alignment == 0\" failed (/Library/Caches/com.app"
                           "le.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1821)";
    __break(1u);
    JUMPOUT(0xFAB0);
  }
  if (a2)
  {
    if ((a2 & 0x3FFF) != 0) {
      unint64_t v6 = (a2 & 0xFFFFFFFFFFFFC000) + 0x4000;
    }
    else {
      unint64_t v6 = a2;
    }
    unint64_t v13 = v6;
  }
  else
  {
    unint64_t v13 = 0x400000;
  }
  unsigned __int8 v12 = a2 != 0;
  if (a5) {
    v12 |= 2u;
  }
  mach_vm_address_t v11 = xzm_range_group_alloc_segment(*(unsigned char **)(a1 + 16), v13, a3, 0, v12);
  if (v11)
  {
    if (v11 >> 36)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)segment_body < XZM_LIMIT_ADDRESS\" failed ("
                             "/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1870)";
      __break(1u);
      JUMPOUT(0xFBD0);
    }
    unint64_t v10 = xzm_metapool_alloc(*(void *)(*(void *)(a1 + 24) + 400));
    uint64_t inited = _xzm_segment_group_init_segment(a1, v10, v11, v13, a2 != 0, 1);
    _xzm_segment_table_allocated_at(*(void *)(a1 + 24), v11, v10);
    if (a2) {
      *a4 = inited;
    }
    return 1;
  }
  else
  {
    return 0;
  }
}

void _xzm_segment_group_cache_invalidate(uint64_t a1, void *a2)
{
}

uint64_t _xzm_segment_group_cache_mark_used(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_assert_owner((os_unfair_lock_t)(a1 + 520));
  if (xzm_reclaim_mark_used(*(void *)(*(void *)(a1 + 24) + 464), *(void *)(a2 + 72), *(void *)(a2 + 80), (unint64_t)*(unsigned int *)(a2 + 12) << 14, 0))
  {
    *(void *)(a2 + 72) = -1;
    __xzm_segment_cache_remove(a1 + 464, a2);
    char v5 = 1;
  }
  else
  {
    _xzm_segment_group_cache_invalidate(a1, (void *)a2);
    char v5 = 0;
  }
  return v5 & 1;
}

uint64_t __xzm_segment_cache_remove(uint64_t result, uint64_t a2)
{
  if (!*(_WORD *)(result + 50))
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"cache->xzsc_count > 0\" failed (/Library/Caches/com.appl"
                           "e.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:892)";
    __break(1u);
    JUMPOUT(0xFE18);
  }
  --*(_WORD *)(result + 50);
  if (*(void *)(a2 + 24))
  {
    *(void *)(*(void *)(a2 + 24) + 32) = *(void *)(a2 + 32);
  }
  else
  {
    *(void *)(result + 8) = *(void *)(a2 + 32);
    *(_DWORD *)(result + 40) = *(_DWORD *)(result + 24);
    *(void *)(result + 32) = *(void *)(result + 16);
    *(_DWORD *)(result + 24) = 894;
    *(void *)(result + 16) = "/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c";
  }
  **(void **)(a2 + 32) = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = -1;
  *(void *)(a2 + 32) = -1;
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(a2 + 48);
  *(void *)(a2 + 56) = *(void *)(a2 + 40);
  *(_DWORD *)(a2 + 48) = 894;
  *(void *)(a2 + 40) = "/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c";
  return result;
}

mach_vm_address_t xzm_range_group_alloc_segment(unsigned char *a1, unint64_t a2, unint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (!*a1) {
    return _xzm_range_group_alloc_data_segment((uint64_t)a1, a2, a3, a4, a5);
  }
  if (a3)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"alignment == 0\" failed (/Library/Caches/com.apple.xbs/S"
                           "ources/libmalloc_driverkit/src/xzone/xzone_segment.c:483)";
    __break(1u);
    JUMPOUT(0xFFA4);
  }
  if ((a5 >> 1))
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!(rga_flags & XZM_RANGE_GROUP_ALLOC_FLAGS_PURGEABLE)\" f"
                           "ailed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:486)";
    __break(1u);
    JUMPOUT(0xFFD8);
  }
  return _xzm_range_group_alloc_ptr_segment(a1, a2, a4, a5);
}

mach_vm_address_t _xzm_range_group_alloc_data_segment(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  if (*(unsigned char *)a1)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"rg->xzrg_id == XZM_RANGE_GROUP_DATA\" failed (/Library/C"
                           "aches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:388)";
    __break(1u);
    JUMPOUT(0x1005CLL);
  }
  if (*(unsigned char *)(*(void *)(a1 + 8) + 328)) {
    return _xzm_range_group_alloc_anywhere_segment(0, a2, a3, a4, a5);
  }
  else {
    return _xzm_range_group_alloc_mvm_segment(a2, a3, a4, a5);
  }
}

mach_vm_address_t _xzm_range_group_alloc_ptr_segment(unsigned char *a1, unint64_t a2, uint64_t a3, int a4)
{
  kern_return_t v5;
  mach_vm_address_t address;
  mach_vm_address_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unsigned char *v11;

  mach_vm_address_t v11 = a1;
  unint64_t v10 = a2;
  char v9 = a3;
  BOOL v8 = a4;
  if (*a1 != 1)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"rg->xzrg_id == XZM_RANGE_GROUP_PTR\" failed (/Library/Ca"
                           "ches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:426)";
    __break(1u);
    JUMPOUT(0x10120);
  }
  if (v8)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!(rga_flags & XZM_RANGE_GROUP_ALLOC_FLAGS_HUGE)\" failed"
                           " (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:427)";
    __break(1u);
    JUMPOUT(0x10150);
  }
  if (v10 != 0x400000)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"size == XZM_SEGMENT_SIZE\" failed (/Library/Caches/com.a"
                           "pple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:428)";
    __break(1u);
    JUMPOUT(0x10184);
  }
  if (*(unsigned char *)(*((void *)v11 + 1) + 344) == 2)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"rg->xzrg_main_ref->xzmz_segment_group_count != XZM_SEGME"
                           "NT_GROUP_COUNT_DATA_ONLY\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/"
                           "src/xzone/xzone_segment.c:430)";
    __break(1u);
    JUMPOUT(0x101C0);
  }
  if ((*(unsigned char *)(*((void *)v11 + 1) + 328) & 1) == 0) {
    return _xzm_range_group_alloc_mvm_segment(v10, 0, v9, v8);
  }
  BOOL v7 = _xzm_range_group_bump_alloc_segment((uint64_t)v11, v10);
  if (!v7)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: Pointer range exhausted";
    __break(1u);
    JUMPOUT(0x1021CLL);
  }
  address = v7;
  char v5 = mach_vm_map(mach_task_self_, &address, v10, 0, 33570816, 0, 0, 0, 3, 7, 1u);
  if (v5)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: pointer range mach_vm_map() overwrite failed";
    qword_C0148 = v5;
    __break(1u);
    JUMPOUT(0x102E4);
  }
  return v7;
}

mach_vm_address_t _xzm_range_group_alloc_mvm_segment(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  int v7 = 0;
  if ((a4 & 2) != 0) {
    int v7 = 128;
  }
  int v6 = _xzm_range_group_vm_tag_for_segment(a1, a4 & 1);
  if (!a2) {
    return mvm_allocate_pages_plat(a1, 0x16u, v7, v6, a3);
  }
  unint64_t v5 = __clz(__rbit64(a2));
  if (v5 >= 0xFF)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"align_pow < UINT8_MAX\" failed (/Library/Caches/com.appl"
                           "e.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:301)";
    __break(1u);
    JUMPOUT(0x10418);
  }
  if (v5 >= 0x17) {
    return mvm_allocate_pages_plat(a1, v5, v7, v6, a3);
  }
  else {
    return mvm_allocate_pages_plat(a1, 0x16u, v7, v6, a3);
  }
}

uint64_t _xzm_range_group_bump_alloc_segment(uint64_t a1, unint64_t a2)
{
  *(_DWORD *)&v6[8] = 0;
  int v2 = 0;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 16), (unsigned int *)&v2, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
  *(void *)int v6 = v2 == 0;
  if (v2) {
    os_unfair_lock_lock_with_options();
  }
  if (*(void *)(a1 + 48) >= a2)
  {
    *(void *)&v6[4] = *(void *)(a1 + 40);
    if (*(void *)&v6[4] % a2)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segment_addr % size == 0\" failed (/Library/Caches/com"
                             ".apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:368)";
      __break(1u);
      JUMPOUT(0x105ECLL);
    }
    *(void *)(a1 + 40) += a2;
    *(void *)(a1 + 48) -= a2;
  }
  int v3 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  int v4 = v3;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 16), (unsigned int *)&v4, 0, memory_order_release, memory_order_relaxed);
  if (v4 != v3) {
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));
  }
  if (*(void *)&v6[4]) {
    return *(void *)&v6[4];
  }
  malloc_zone_error(0, 0, (uint64_t)"Failed to allocate segment - out of space\n");
  return 0;
}

uint64_t xzm_span_queue_for (uint64_t a1, unsigned int a2)
{
  if ((unint64_t)a2 << 14 > 0x400000)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice_count * XZM_SEGMENT_SLICE_SIZE <= XZM_SEGMENT_SIZE"
                           "\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1010)";
    __break(1u);
    JUMPOUT(0x10778);
  }
  int v2 = __clz(0xFFuLL);
  if (((0xFFu >> (61 - v2)) & 3 | (4 * (63 - v2))) - 5 >= 0x1BuLL)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"xzm_slice_bin8(XZM_SLICES_PER_SEGMENT) < XZM_SPAN_QUEUE_"
                           "COUNT\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1012)";
    __break(1u);
    JUMPOUT(0x1088CLL);
  }
  if (!a2)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice_count != 0\" failed (/Library/Caches/com.apple.xbs"
                           "/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:993)";
    __break(1u);
    JUMPOUT(0x108CCLL);
  }
  if (a2 > 8)
  {
    if (a2 >= 0x101)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice_count <= XZM_SLICES_PER_SEGMENT\" failed (/Libra"
                             "ry/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:998)";
      __break(1u);
      JUMPOUT(0x10924);
    }
    int v3 = __clz(a2 - 1);
    unint64_t v5 = (((a2 - 1) >> (61 - v3)) & 3 | (4 * (63 - v3))) - 5;
  }
  else
  {
    unint64_t v5 = a2 - 1;
  }
  if (v5 >= 0x1B)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"bin < XZM_SPAN_QUEUE_COUNT\" failed (/Library/Caches/com"
                           ".apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1014)";
    __break(1u);
    JUMPOUT(0x109B0);
  }
  if (*(_DWORD *)(a1 + 16 * v5 + 40) < a2)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"sq->xzsq_slice_count >= slice_count\" failed (/Library/C"
                           "aches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1024)";
    __break(1u);
    JUMPOUT(0x10A10);
  }
  return a1 + 16 * v5 + 32;
}

uint64_t _xzm_segment_group_segment_span_init_run(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t *a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, double a9, float a10)
{
  uint64_t v17 = 0;
  if (a7) {
    unsigned int v16 = _xzm_random_bits(a7, a8 + 1, a9, a10);
  }
  else {
    unsigned int v16 = 0;
  }
  if (a3 == 2)
  {
    unsigned int v15 = 1;
  }
  else if (a3 == 5)
  {
    unsigned int v15 = 4;
  }
  else
  {
    if (a4)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!preallocate_list\" failed (/Library/Caches/com.apple."
                             "xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1565)";
      __break(1u);
      JUMPOUT(0x10B04);
    }
    if (a7)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"guard_count == 0\" failed (/Library/Caches/com.apple.x"
                             "bs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1566)";
      __break(1u);
      JUMPOUT(0x10B34);
    }
    if (a3 != 6)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"kind == XZM_SLICE_KIND_LARGE_CHUNK\" failed (/Library/"
                             "Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1567)";
      __break(1u);
      JUMPOUT(0x10B68);
    }
    if (a8 != 1)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"num_chunks == 1\" failed (/Library/Caches/com.apple.xb"
                             "s/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1568)";
      __break(1u);
      JUMPOUT(0x10B9CLL);
    }
    unsigned int v15 = a6;
  }
  if (a8 * v15 + a7 != a6)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(num_chunks * slices_per_chunk + guard_count) == total_s"
                           "lices\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1572)";
    __break(1u);
    JUMPOUT(0x10BF4);
  }
  if (a5 + a6 > *(_DWORD *)(a2 + 16))
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(start_index + total_slices) <= segment->xzs_slice_entry"
                           "_count\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1574)";
    __break(1u);
    JUMPOUT(0x10C38);
  }
  unsigned int v14 = a5;
  BOOL v13 = (*(unsigned char *)(a2 + 48 * a5 + 2168) & 0x10) != 0;
  for (unsigned int i = 0; i < a8; ++i)
  {
    if (v16) {
      _xzm_segment_group_segment_create_guard(a1, a2, v14++);
    }
    v16 >>= 1;
    uint64_t v11 = _xzm_segment_group_segment_span_mark_allocated(a1, a2, a3, v14, v15);
    *(unsigned char *)(v11 + 32) = *(unsigned char *)(v11 + 32) & 0xEF | (16 * v13);
    v14 += v15;
    if (i)
    {
      *(void *)(v11 + 16) = *a4;
      *a4 = v11;
    }
    else
    {
      uint64_t v17 = v11;
    }
  }
  if (v16 >= 2)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"guard_mask <= 1\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1598)";
    __break(1u);
    JUMPOUT(0x10DACLL);
  }
  if (v16) {
    _xzm_segment_group_segment_create_guard(a1, a2, v14++);
  }
  if (v14 - a5 != a6)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index - start_index == total_slices\" failed (/Library/C"
                           "aches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1604)";
    __break(1u);
    JUMPOUT(0x10E18);
  }
  return v17;
}

uint64_t _xzm_random_bits(unsigned int a1, uint32_t a2, double a3, float a4)
{
  int v9 = (1 << a2) - 1;
  if (a1 < (3 * a2) >> 2)
  {
    if (a1 > a2 >> 2)
    {
      unsigned int v8 = arc4random() & v9;
      LOWORD(v4) = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)v8));
      uint32_t v7 = v4;
      unsigned int v6 = dist_u32(v4, a1);
      if (v6 > dist_u32(a2 - v7, a1))
      {
        uint32_t v7 = a2 - v7;
        v8 ^= v9;
      }
    }
    else
    {
      unsigned int v8 = 0;
      uint32_t v7 = 0;
    }
  }
  else
  {
    unsigned int v8 = (1 << a2) - 1;
    uint32_t v7 = a2;
  }
  if (v7 >= a1)
  {
    if (a1 < v7) {
      unsigned int v8 = _xzm_random_clear_n_bits(v8, v7, v7 - a1);
    }
  }
  else
  {
    unsigned int v8 = _xzm_random_clear_n_bits(v8 ^ v9, a2 - v7, a1 - v7) ^ v9;
  }
  LOWORD(a4) = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)v8));
  if (LODWORD(a4) != a1)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"__builtin_popcount(retval) == pop\" failed (/Library/Cac"
                           "hes/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1539)";
    __break(1u);
    JUMPOUT(0x11028);
  }
  if ((v8 & ~v9) != 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(retval & ~mask) == 0\" failed (/Library/Caches/com.appl"
                           "e.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1540)";
    __break(1u);
    JUMPOUT(0x11060);
  }
  return v8;
}

uint64_t _xzm_segment_group_segment_create_guard(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v9 = a3;
  unint64_t v8 = a2 + 48 * a3 + 2136;
  unsigned int v7 = 1;
  if (a2 + 48 * (unint64_t)a3 + 2184 < a2 + 48 * (unint64_t)*(unsigned int *)(a2 + 16) + 2136
    && (*(unsigned char *)(a2 + 48 * a3 + 2216) & 0xF) == 8)
  {
    unsigned int v7 = *(_DWORD *)(a2 + 48 * a3 + 2224) + 1;
  }
  if (v8 > a2 + 2136)
  {
    unint64_t v11 = a2 + 48 * a3 + 2088;
    if ((*(unsigned char *)(a2 + 48 * a3 + 2120) & 0xF) == 4)
    {
      unint64_t v10 = a2 + 48 * a3 + 2088 - *(unsigned int *)(a2 + 48 * a3 + 2124);
      if (v10 < ((a2 + 48 * a3 + 2088) & 0xFFFFFFFFFFFFC000 | 0x858))
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"out_slice >= ((xzm_segment_t)((uintptr_t)slice & ~(X"
                               "ZM_METAPOOL_SEGMENT_BLOCK_SIZE - 1)))->xzs_slices\" failed (/Library/Caches/com.apple.xbs"
                               "/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:582)";
        __break(1u);
        JUMPOUT(0x111E0);
      }
      int v5 = *(unsigned char *)(v10 + 32) & 0xF;
      if ((v5 - 1) < 2)
      {
        BOOL v13 = v10 == v11;
      }
      else if (v5 == 3 || (v5 - 5) < 4)
      {
        if (v11 < v10)
        {
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice >= span\" failed (/Library/Caches/com.apple."
                                 "xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:560)";
          __break(1u);
          JUMPOUT(0x11284);
        }
        BOOL v13 = v11 < v10 + 48 * *(unsigned int *)(v10 + 40);
      }
      else
      {
        BOOL v13 = 0;
      }
      if (v13) {
        uint64_t v12 = a2 + 48 * a3 + 2088 - *(unsigned int *)(a2 + 48 * a3 + 2124);
      }
      else {
        uint64_t v12 = a2 + 48 * a3 + 2088;
      }
    }
    else
    {
      uint64_t v12 = a2 + 48 * a3 + 2088;
    }
    if ((*(unsigned char *)(v12 + 32) & 0xF) == 8)
    {
      unsigned int v9 = a3 - *(_DWORD *)(v12 + 40);
      v7 += *(_DWORD *)(v12 + 40);
      unint64_t v8 = v12;
    }
  }
  if (v7 < 2)
  {
    ++*(_DWORD *)(a2 + 8);
  }
  else
  {
    for (int i = 1; i < v7; ++i)
    {
      *(_DWORD *)(v8 + 48 * i + 36) = 48 * i;
      *(unsigned char *)(v8 + 48 * i + 32) = *(unsigned char *)(v8 + 48 * i + 32) & 0xF0 | 4;
    }
  }
  if (v8 != a2 + 48 * v9 + 2136)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice == &segment->xzs_slices[index]\" failed (/Library/"
                           "Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1404)";
    __break(1u);
    JUMPOUT(0x11440);
  }
  *(_DWORD *)(v8 + 40) = v7;
  uint64_t result = mprotect((void *)(*(void *)(a2 + 80) + ((unint64_t)v9 << 14)), (unint64_t)v7 << 14, 0);
  if (result)
  {
    uint64_t v4 = *__error();
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: Failed to mprotect guard page";
    qword_C0148 = v4;
    __break(1u);
    JUMPOUT(0x114ECLL);
  }
  *(unsigned char *)(v8 + 32) = *(unsigned char *)(v8 + 32) & 0xF0 | 8;
  return result;
}

uint64_t dist_u32(unsigned int a1, unsigned int a2)
{
  if (a1 >= a2) {
    return a1 - a2;
  }
  else {
    return a2 - a1;
  }
}

uint64_t _xzm_random_clear_n_bits(unsigned int a1, uint32_t a2, int a3)
{
  while (a3--)
  {
    uint32_t v6 = arc4random_uniform(a2);
    unsigned int v5 = a1;
    while (v6)
    {
      v5 &= v5 - 1;
      --v6;
    }
    a1 ^= 1 << __clz(__rbit32(v5));
    --a2;
  }
  return a1;
}

void _xzm_segment_group_bzero_chunk(uint64_t a1, char *a2, unint64_t a3)
{
  while (a3)
  {
    if (a3 >= 0x80000) {
      size_t v3 = 0x80000;
    }
    else {
      size_t v3 = a3;
    }
    _platform_bzero();
    xzm_madvise(*(void *)(a1 + 24), a2, v3);
    a2 += v3;
    a3 -= v3;
  }
}

uint64_t _xzm_segment_group_free_huge_chunk_to_cache(uint64_t a1, unint64_t a2)
{
  uint64_t v9 = a1 + 464;
  unsigned int v7 = 0;
  if (!*(_WORD *)(a1 + 512))
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"cache->xzsc_max_count > 0\" failed (/Library/Caches/com."
                           "apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:2507)";
    __break(1u);
    JUMPOUT(0x11784);
  }
  if (*(_DWORD *)(a2 + 12) > *(_DWORD *)(a1 + 516))
  {
    return 0;
  }
  else
  {
    _xzm_segment_table_freed_at(*(void *)(a1 + 24), *(void *)(a2 + 80), a2, 1);
    int v2 = 0;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v9 + 56), (unsigned int *)&v2, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
    if (v2) {
      os_unfair_lock_lock_with_options();
    }
    if (*(unsigned __int16 *)(a1 + 514) == *(unsigned __int16 *)(a1 + 512))
    {
      for (int i = *(void **)(a1 + 464); ; int i = v7)
      {
        char v6 = 0;
        if (i)
        {
          unsigned int v7 = (void *)i[3];
          char v6 = 1;
        }
        if (v6 & 1) == 0 || (xzm_reclaim_is_available()) {
          break;
        }
        _xzm_segment_group_cache_invalidate(a1, i);
      }
    }
    while (*(unsigned __int16 *)(v9 + 50) == *(unsigned __int16 *)(v9 + 48))
      _xzm_segment_group_cache_evict(a1);
    _xzm_segment_group_cache_mark_free(a1, a2);
    int v3 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    int v4 = v3;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v9 + 56), (unsigned int *)&v4, 0, memory_order_release, memory_order_relaxed);
    if (v4 != v3) {
      os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 56));
    }
    return 1;
  }
}

void _xzm_segment_group_segment_deallocate(uint64_t a1, unint64_t a2, char a3)
{
  if (a3) {
    _xzm_segment_table_freed_at(*(void *)(a1 + 24), *(void *)(a2 + 80), a2, 1);
  }
  xzm_range_group_free_segment_body(*(unsigned char **)(a1 + 16), *(void *)(a2 + 80), (unint64_t)*(unsigned int *)(a2 + 12) << 14);
  xzm_metapool_free(*(void *)(*(void *)(a1 + 24) + 400), (void *)a2);
}

uint64_t _xzm_segment_table_freed_at(uint64_t result, unint64_t a2, unint64_t a3, char a4)
{
  unint64_t v7 = a2;
  int v4 = *(_DWORD *)(a3 + 12) - 1;
  unint64_t v17 = a3;
  int v16 = v4;
  unint64_t v19 = a3;
  int v18 = v4 + 1;
  unint64_t v6 = *(void *)(a3 + 80) + ((unint64_t)(v4 + 1) << 14);
  BOOL v5 = 1;
  if (a4) {
    BOOL v5 = *(void *)(a3 + 80) == a2;
  }
  if (!v5)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!full_segment || _xzm_segment_start(metadata) == data\" "
                           "failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:101)";
    __break(1u);
    JUMPOUT(0x11C6CLL);
  }
  while (v7 < v6)
  {
    unint64_t v10 = v7;
    uint64_t v9 = result;
    uint64_t v8 = 0;
    unint64_t v23 = v7;
    int64_t v22 = &v8;
    unint64_t v21 = v7;
    if (v7 >> 36)
    {
      *int64_t v22 = 0;
      unint64_t v24 = 0x4000;
    }
    else
    {
      unint64_t v20 = v21 >> 22;
      *int64_t v22 = 0;
      if (v20 >= 0x4000)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segindex < XZM_SEGMENT_TABLE_ENTRIES\" failed (/Libr"
                               "ary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:169)";
        __break(1u);
        JUMPOUT(0x11D48);
      }
      unint64_t v24 = v20;
    }
    if (v24 < 0x4000) {
      unint64_t v11 = (_DWORD *)(*(void *)(v9 + 408) + 4 * v24);
    }
    else {
      unint64_t v11 = 0;
    }
    if (!v11)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"entry != NULL\" failed (/Library/Caches/com.apple.xbs/"
                             "Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:105)";
      __break(1u);
      JUMPOUT(0x11DDCLL);
    }
    unint64_t v14 = a3;
    if ((a3 & 0x3FFF) != 0)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)segment % XZM_METAPOOL_SEGMENT_ALIGN == 0\""
                             " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone"
                             "_inline_internal.h:186)";
      __break(1u);
      JUMPOUT(0x11E1CLL);
    }
    if (v14 >> 14 >= 0xFFFFFFFF)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"((uintptr_t)segment >> XZM_METAPOOL_SEGMENT_BLOCK_SHIF"
                             "T) < UINT32_MAX\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzo"
                             "ne/../xzone/xzone_inline_internal.h:190)";
      __break(1u);
      JUMPOUT(0x11E58);
    }
    int v15 = v14 >> 14;
    if (v15 != *v11)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_segment_to_segment_table_entry(metadata).xste_val"
                             " == entry->xste_val\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src"
                             "/xzone/xzone_segment.c:107)";
      __break(1u);
      JUMPOUT(0x11EACLL);
    }
    uint64_t v12 = 0;
    int v13 = 0;
    *unint64_t v11 = 0;
    v7 += 0x400000;
  }
  return result;
}

void _xzm_segment_group_cache_evict(uint64_t a1)
{
  os_unfair_lock_assert_owner((os_unfair_lock_t)(a1 + 520));
  unint64_t v4 = **(void **)(*(void *)(a1 + 472) + 8);
  if (*(void *)(v4 + 72) == -1)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segment->xzs_reclaim_id != VM_RECLAIM_INDEX_NULL\" faile"
                           "d (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:972)";
    __break(1u);
    JUMPOUT(0x1200CLL);
  }
  if (_xzm_segment_group_cache_mark_used(a1, v4))
  {
    int v1 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    int v2 = v1;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 520), (unsigned int *)&v2, 0, memory_order_release, memory_order_relaxed);
    if (v2 != v1) {
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 520));
    }
    _xzm_segment_group_segment_deallocate(a1, v4, 0);
    int v3 = 0;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 520), (unsigned int *)&v3, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
    if (v3) {
      os_unfair_lock_lock_with_options();
    }
  }
}

uint64_t *_xzm_segment_group_cache_mark_free(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_assert_owner((os_unfair_lock_t)(a1 + 520));
  uint64_t v2 = *(void *)(a1 + 24);
  unint64_t v8 = *(void *)(a2 + 80);
  uint64_t v7 = v2;
  uint64_t v6 = 0;
  unint64_t v13 = v8;
  uint64_t v12 = &v6;
  unint64_t v11 = v8;
  if (v8 >> 36)
  {
    *uint64_t v12 = 0;
    unint64_t v14 = 0x4000;
  }
  else
  {
    unint64_t v10 = v11 >> 22;
    *uint64_t v12 = 0;
    if (v10 >= 0x4000)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segindex < XZM_SEGMENT_TABLE_ENTRIES\" failed (/Librar"
                             "y/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:169)";
      __break(1u);
      JUMPOUT(0x122FCLL);
    }
    unint64_t v14 = v10;
  }
  if (v14 >= 0x4000) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = (_DWORD *)(*(void *)(v7 + 408) + 4 * v14);
  }
  if (*v9)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"entry->xste_val == 0\" failed (/Library/Caches/com.apple"
                           ".xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:929)";
    __break(1u);
    JUMPOUT(0x12380);
  }
  if (*(void *)(a2 + 72) != -1)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segment->xzs_reclaim_id == VM_RECLAIM_INDEX_NULL\" faile"
                           "d (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:931)";
    __break(1u);
    JUMPOUT(0x123B8);
  }
  *(void *)(a2 + 72) = xzm_reclaim_mark_free(*(void *)(*(void *)(a1 + 24) + 464), *(void *)(a2 + 80), (unint64_t)*(unsigned int *)(a2 + 12) << 14);
  return __xzm_segment_cache_insert((uint64_t *)(a1 + 464), a2);
}

uint64_t *__xzm_segment_cache_insert(uint64_t *result, uint64_t a2)
{
  if (*((unsigned __int16 *)result + 25) >= (int)*((unsigned __int16 *)result + 24))
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"cache->xzsc_count < cache->xzsc_max_count\" failed (/Lib"
                           "rary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:900)";
    __break(1u);
    JUMPOUT(0x124B8);
  }
  uint64_t v2 = *result;
  *(void *)(a2 + 24) = *result;
  if (v2) {
    *(void *)(*result + 32) = a2 + 24;
  }
  else {
    result[1] = a2 + 24;
  }
  *uint64_t result = a2;
  *(void *)(a2 + 32) = result;
  *((_DWORD *)result + 10) = *((_DWORD *)result + 6);
  result[4] = result[2];
  *((_DWORD *)result + 6) = 901;
  result[2] = (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c";
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(a2 + 48);
  *(void *)(a2 + 56) = *(void *)(a2 + 40);
  *(_DWORD *)(a2 + 48) = 901;
  *(void *)(a2 + 40) = "/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c";
  ++*((_WORD *)result + 25);
  return result;
}

void xzm_range_group_free_segment_body(unsigned char *a1, mach_vm_address_t a2, mach_vm_size_t a3)
{
  if (*a1)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"rg->xzrg_id == XZM_RANGE_GROUP_DATA\" failed (/Library/C"
                           "aches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:495)";
    __break(1u);
    JUMPOUT(0x12600);
  }
  mvm_deallocate_plat(a2, a3, 64);
}

uint64_t *_xzm_segment_group_assert_correct_span_queue(uint64_t a1, uint64_t a2)
{
  char v6 = *(unsigned char *)(a2 + 32) & 0xF;
  BOOL v3 = 1;
  if (v6 != 1) {
    BOOL v3 = v6 == 3;
  }
  if (!v3)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_slice_kind_is_free_span(kind)\" failed (/Library/Ca"
                           "ches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1034)";
    __break(1u);
    JUMPOUT(0x126C8);
  }
  if (v6 == 1) {
    unsigned int v5 = 1;
  }
  else {
    unsigned int v5 = *(_DWORD *)(a2 + 40);
  }
  uint64_t result = (uint64_t *)xzm_span_queue_for (a1, v5);
  for (uint64_t i = *result; ; uint64_t i = *(void *)(i + 16))
  {
    if (!i)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: Didn't find free span in expected span queue";
      __break(1u);
      JUMPOUT(0x1278CLL);
    }
    if (i == a2) {
      break;
    }
  }
  return result;
}

uint64_t _xzm_segment_group_segment_span_free(os_unfair_lock_s *a1, uint64_t a2, unsigned int a3, unsigned int a4, char a5)
{
  if (!a4)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice_count != 0\" failed (/Library/Caches/com.apple.xbs"
                           "/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1279)";
    __break(1u);
    JUMPOUT(0x127ECLL);
  }
  if (a3 >= *(_DWORD *)(a2 + 16))
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice_index < segment->xzs_slice_entry_count\" failed (/"
                           "Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1280)";
    __break(1u);
    JUMPOUT(0x12828);
  }
  uint64_t result = a3;
  unint64_t v7 = a2 + 48 * a3 + 2136;
  *(unsigned char *)(a2 + 48 * a3 + 2168) = *(unsigned char *)(a2 + 48 * a3 + 2168) & 0xEF | (16 * (a5 & 1));
  if (a4 == 1)
  {
    if (*(unsigned char *)(a2 + 20) == 1)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segment->xzs_kind != XZM_SEGMENT_KIND_HUGE\" failed (/"
                             "Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_segment.c:1296)";
      __break(1u);
      JUMPOUT(0x128BCLL);
    }
    *(unsigned char *)(a2 + 48 * a3 + 2168) = *(unsigned char *)(a2 + 48 * a3 + 2168) & 0xF0 | 1;
  }
  else
  {
    *(unsigned char *)(a2 + 48 * a3 + 2168) = *(unsigned char *)(a2 + 48 * a3 + 2168) & 0xF0 | 3;
    *(_DWORD *)(a2 + 48 * a3 + 2176) = a4;
    if (a3 + a4 - 1 >= *(_DWORD *)(a2 + 16))
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice_index + slice_count - 1 < segment->xzs_slice_ent"
                             "ry_count\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzon"
                             "e_segment.c:1302)";
      __break(1u);
      JUMPOUT(0x1293CLL);
    }
    *(unsigned char *)(a2 + 48 * (a3 + a4 - 1) + 2168) = *(unsigned char *)(a2 + 48 * (a3 + a4 - 1) + 2168) & 0xF0 | 4;
    *(_DWORD *)(a2 + 48 * (a3 + a4 - 1) + 2172) = 48 * a4 - 48;
  }
  if (!*(unsigned char *)(a2 + 20))
  {
    os_unfair_lock_assert_owner(a1 + 1);
    uint64_t result = xzm_span_queue_for ((uint64_t)a1, a4);
    uint64_t v6 = *(void *)result;
    *(void *)(v7 + 16) = *(void *)result;
    if (v6) {
      *(void *)(*(void *)result + 24) = v7 + 16;
    }
    *(void *)uint64_t result = v7;
    *(void *)(v7 + 24) = result;
  }
  if (v7 < a2 + 2136)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" fai"
                           "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                           "e_internal.h:278)";
    __break(1u);
    JUMPOUT(0x12A90);
  }
  int64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - a2 - 2136) >> 4);
  if (v11 >= *(unsigned int *)(a2 + 16))
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fail"
                           "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline"
                           "_internal.h:280)";
    __break(1u);
    JUMPOUT(0x12AF8);
  }
  *(void *)(a2 + 88 + 8 * v11) = -1;
  return result;
}

unsigned char *malloc_common_strstr(unsigned char *a1)
{
  while (*a1)
  {
    if (!_platform_strncmp()) {
      return a1;
    }
    ++a1;
  }
  return 0;
}

uint64_t malloc_common_convert_to_long(char *a1, void *a2)
{
  uint64_t v4 = 0;
  while (*a1)
  {
    char v3 = *a1;
    if (*a1 < 48 || v3 > 57) {
      break;
    }
    uint64_t v4 = 10 * v4 + v3 - 48;
    ++a1;
  }
  *a2 = a1;
  return v4;
}

unsigned char *malloc_common_value_for_key(unsigned char *a1)
{
  unint64_t v3 = _platform_strlen();
  while (1)
  {
    a1 = malloc_common_strstr(a1);
    if (!a1) {
      break;
    }
    for (unint64_t i = 0; i < v3; ++i)
      ++a1;
    if (*a1 == 61) {
      return a1 + 1;
    }
  }
  return 0;
}

unsigned char *malloc_common_value_for_key_copy(unsigned char *a1, uint64_t a2, unsigned char *a3, unint64_t a4)
{
  uint64_t v9 = malloc_common_value_for_key(a1);
  if (!v9) {
    return 0;
  }
  unint64_t v8 = a4;
  for (unint64_t i = a3; v8 > 1; ++i)
  {
    uint64_t v4 = v9++;
    char v6 = *v4;
    if (!*v4 || v6 == 32 || v6 == 9 || v6 == 10) {
      break;
    }
    *unint64_t i = v6;
    --v8;
  }
  *unint64_t i = 0;
  return a3;
}

uint64_t malloc_zone_batch_malloc_fallback(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  for (unsigned int i = 0; i < a4; ++i)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, a2);
    if (!v5) {
      break;
    }
    *(void *)(a3 + 8 * i) = v5;
  }
  return i;
}

uint64_t malloc_zone_batch_free_fallback(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v7 = result;
  for (unsigned int i = 1; i <= a3; ++i)
  {
    uint64_t v3 = *(void *)(a2 + 8 * (a3 - i));
    if (v3) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 48))(v7, v3);
    }
  }
  return result;
}

uint64_t malloc_zone_pressure_relief_fallback()
{
  return 0;
}

uint64_t _malloc_is_platform_binary()
{
  return 0;
}

BOOL _malloc_allow_internal_security_policy()
{
  return MEMORY[0xFFFFF4084] != 0;
}

mach_vm_address_t create_purgeable_zone(uint64_t a1, uint64_t a2, int a3)
{
  mach_vm_address_t pages = mvm_allocate_pages((vm_page_size + 20479) & ~(vm_page_size - 1), 0, 0x40000000, 1);
  if (!pages) {
    return 0;
  }
  unint64_t v31 = MEMORY[0xFFFFFC038];
  rack_init(pages + 16512, 1, 0, a3 | 0x80);
  rack_init(pages + 17280, 2, 0, a3 | 0x80);
  if (large_cache_enabled)
  {
    *(void *)(pages + 20424) = v31 >> 10;
    int32_t v30 = NSVersionOfLinkTimeLibrary("System");
    *(_DWORD *)(pages + 20408) = v30 != -1 && v30 >> 16 < 112;
  }
  *(_DWORD *)(pages + 104) = 11;
  unint64_t v29 = 0;
  if (purgeable_size) {
    unint64_t v29 = purgeable_size;
  }
  unsigned int v28 = 0;
  if (v29) {
    unsigned int v28 = v29;
  }
  *(void *)(pages + 16) = v28;
  uint64_t v27 = 0;
  if (purgeable_malloc) {
    uint64_t v27 = purgeable_malloc;
  }
  unint64_t v26 = 0;
  if (v27) {
    unint64_t v26 = v27;
  }
  *(void *)(pages + 24) = v26;
  mach_vm_address_t v25 = 0;
  if (purgeable_calloc) {
    mach_vm_address_t v25 = purgeable_calloc;
  }
  unint64_t v24 = 0;
  if (v25) {
    unint64_t v24 = v25;
  }
  *(void *)(pages + 32) = v24;
  unint64_t v23 = 0;
  if (purgeable_valloc) {
    unint64_t v23 = purgeable_valloc;
  }
  int64_t v22 = 0;
  if (v23) {
    int64_t v22 = v23;
  }
  *(void *)(pages + 40) = v22;
  unint64_t v21 = 0;
  if (purgeable_free) {
    unint64_t v21 = purgeable_free;
  }
  unint64_t v20 = 0;
  if (v21) {
    unint64_t v20 = v21;
  }
  *(void *)(pages + 48) = v20;
  unint64_t v19 = 0;
  if (purgeable_realloc) {
    unint64_t v19 = purgeable_realloc;
  }
  int v18 = 0;
  if (v19) {
    int v18 = v19;
  }
  *(void *)(pages + 56) = v18;
  unint64_t v17 = 0;
  if (purgeable_destroy) {
    unint64_t v17 = purgeable_destroy;
  }
  int v16 = 0;
  if (v17) {
    int v16 = v17;
  }
  *(void *)(pages + 64) = v16;
  int v15 = 0;
  if (purgeable_batch_malloc) {
    int v15 = purgeable_batch_malloc;
  }
  unint64_t v14 = 0;
  if (v15) {
    unint64_t v14 = v15;
  }
  *(void *)(pages + 80) = v14;
  unint64_t v13 = 0;
  if (purgeable_batch_free) {
    unint64_t v13 = purgeable_batch_free;
  }
  uint64_t v12 = 0;
  if (v13) {
    uint64_t v12 = v13;
  }
  *(void *)(pages + 88) = v12;
  *(void *)(pages + 96) = purgeable_introspect;
  int64_t v11 = 0;
  if (purgeable_memalign) {
    int64_t v11 = purgeable_memalign;
  }
  unint64_t v10 = 0;
  if (v11) {
    unint64_t v10 = v11;
  }
  *(void *)(pages + 112) = v10;
  uint64_t v9 = 0;
  if (purgeable_free_definite_size) {
    uint64_t v9 = purgeable_free_definite_size;
  }
  unint64_t v8 = 0;
  if (v9) {
    unint64_t v8 = v9;
  }
  *(void *)(pages + 120) = v8;
  uint64_t v7 = 0;
  if (purgeable_pressure_relief) {
    uint64_t v7 = purgeable_pressure_relief;
  }
  char v6 = 0;
  if (v7) {
    char v6 = v7;
  }
  *(void *)(pages + 128) = v6;
  uint64_t v5 = 0;
  if (purgeable_claimed_address) {
    uint64_t v5 = purgeable_claimed_address;
  }
  uint64_t v4 = 0;
  if (v5) {
    uint64_t v4 = v5;
  }
  *(void *)(pages + 136) = v4;
  *(void *)mach_vm_address_t pages = 0;
  *(void *)(pages + 8) = 0;
  mprotect((void *)pages, 0xC8uLL, 1);
  *(_DWORD *)(pages + 16392) = a3 | 0x80;
  if ((*(_DWORD *)(pages + 16392) & 7) != 0)
  {
    if ((*(_DWORD *)(pages + 16392) & 4) == 0) {
      malloc_report(6, (uint64_t)"purgeable zone does not support guard pages\n");
    }
    *(_DWORD *)(pages + 16392) &= 0xFFFFFFF8;
  }
  *(_DWORD *)(pages + 18816) = 0;
  *(void *)(pages + 20456) = a2;
  return pages;
}

uint64_t purgeable_size(uint64_t a1, unint64_t a2)
{
  return szone_size_try_large(a1, a2);
}

unint64_t purgeable_malloc(uint64_t a1, unint64_t a2)
{
  if (a2 > 0x3C00) {
    return szone_malloc(a1, a2);
  }
  else {
    return szone_malloc(*(void *)(a1 + 20456), a2);
  }
}

unint64_t purgeable_calloc(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = a1;
  v4[2] = a2;
  v4[1] = a3;
  v4[0] = 0;
  unint64_t v11 = a2;
  unint64_t v10 = a3;
  uint64_t v9 = 0;
  unint64_t v8 = v4;
  unint64_t v7 = a3;
  if (a2 == 1
    || (unint64_t v7 = v11 * v10, v13 = (v11 * (unsigned __int128)v10) >> 64 != 0, is_mul_ok(v11, v10))
    && v7 <= malloc_absolute_max_size)
  {
    *unint64_t v8 = v7;
    int v12 = 0;
  }
  else
  {
    malloc_set_errno_fast(1, 12);
    int v12 = -1;
  }
  if (v12) {
    return 0;
  }
  if (v4[0] > 0x3C00) {
    return szone_calloc(v5, 1uLL, v4[0]);
  }
  return szone_calloc(*(void *)(v5 + 20456), 1uLL, v4[0]);
}

uint64_t purgeable_valloc(uint64_t a1, unint64_t a2)
{
  if (a2 > 0x3C00) {
    return szone_valloc(a1, a2);
  }
  else {
    return szone_valloc(*(void *)(a1 + 20456), a2);
  }
}

void purgeable_free(uint64_t a1, unint64_t a2)
{
  if (v2) {
    char v3 = 0;
  }
  else {
    char v3 = 1;
  }
  if ((v3 & 1) == 0
    || (int v4 = 0,
        atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 18816), (unsigned int *)&v4, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire), v4))
  {
    os_unfair_lock_lock_with_options();
  }
  uint64_t v7 = large_entry_for_pointer_no_lock(a1, a2);
  int v5 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  int v6 = v5;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 18816), (unsigned int *)&v6, 0, memory_order_release, memory_order_relaxed);
  if (v6 != v5) {
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 18816));
  }
  if (v7) {
    free_large(a1, a2, 0);
  }
  else {
    szone_free(*(void *)(a1 + 20456), a2);
  }
}

uint64_t purgeable_realloc(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (!a2) {
    return purgeable_malloc(a1, a3);
  }
  if (a3)
  {
    unint64_t v7 = purgeable_size(a1, a2);
    if (!v7) {
      unint64_t v7 = szone_size(*(void *)(a1 + 20456), a2);
    }
    if (v7)
    {
      if (v7 > 0x3C00)
      {
        if (a3 > 0x3C00)
        {
          unint64_t v4 = purgeable_malloc(a1, a3);
          if (v4)
          {
            _platform_memmove();
            purgeable_free_definite_size(a1, a2, v7);
          }
          return v4;
        }
        else
        {
          unint64_t v5 = szone_malloc(*(void *)(a1 + 20456), a3);
          if (v5)
          {
            _platform_memmove();
            purgeable_free_definite_size(a1, a2, v7);
          }
          return v5;
        }
      }
      else if (a3 > 0x3C00)
      {
        unint64_t v6 = purgeable_malloc(a1, a3);
        if (v6)
        {
          _platform_memmove();
          szone_free_definite_size(*(void *)(a1 + 20456), a2, v7);
        }
        return v6;
      }
      else
      {
        return szone_realloc(*(void *)(a1 + 20456), a2, a3);
      }
    }
    else
    {
      malloc_zone_error(*(_DWORD *)(a1 + 16392), 1, (uint64_t)"pointer %p being reallocated was not allocated\n");
      return 0;
    }
  }
  else
  {
    purgeable_free(a1, a2);
    return purgeable_malloc(a1, 1uLL);
  }
}

void purgeable_destroy(mach_vm_address_t a1)
{
  mach_vm_address_t v6 = a1;
  uint64_t v5 = 0;
  uint64_t v5 = *(unsigned int *)(a1 + 18824);
  unint64_t v4 = 0;
  mach_vm_address_t v2 = 0;
  mach_vm_size_t v3 = 0;
  while (v5--)
  {
    unint64_t v4 = (mach_vm_address_t *)(*(void *)(v6 + 18832) + 24 * v5);
    if (*v4) {
      mvm_deallocate_pages(*v4, v4[1], *(_DWORD *)(v6 + 16392));
    }
  }
  large_entries_free_no_lock(v6, *(void *)(v6 + 18832), *(_DWORD *)(v6 + 18824), &v2);
  if (v3) {
    mvm_deallocate_pages(v2, v3, 0);
  }
  mvm_deallocate_pages(v6, (vm_page_size + 20479) & ~(vm_page_size - 1), 0);
}

uint64_t purgeable_batch_malloc(uint64_t a1, unint64_t a2, uint64_t *a3, unsigned int a4)
{
  return szone_batch_malloc(*(void *)(a1 + 20456), a2, a3, a4);
}

void purgeable_batch_free(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

uint64_t purgeable_memalign(uint64_t a1, vm_size_t a2, unint64_t a3)
{
  if (a3 > 0x3C00) {
    return szone_memalign(a1, a2, a3);
  }
  else {
    return szone_memalign(*(void *)(a1 + 20456), a2, a3);
  }
}

void purgeable_free_definite_size(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a3 > 0x3C00) {
    szone_free_definite_size(a1, a2, a3);
  }
  else {
    szone_free_definite_size(*(void *)(a1 + 20456), a2, a3);
  }
}

uint64_t purgeable_pressure_relief()
{
  uint64_t v1 = szone_pressure_relief();
  return v1 + szone_pressure_relief();
}

BOOL purgeable_claimed_address(uint64_t a1, unint64_t a2)
{
  return szone_claimed_address(*(void *)(a1 + 20456), a2);
}

uint64_t malloc_set_errno_fast(uint64_t result, int a2)
{
  if (result) {
    **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8) = a2;
  }
  return result;
}

uint64_t purgeable_ptr_in_use_enumerator(int a1, uint64_t a2, int a3, uint64_t a4, uint64_t (*a5)(int a1, uint64_t a2, uint64_t a3, uint64_t *a4), void (*a6)(void, uint64_t, uint64_t, long long *, uint64_t))
{
  int v14 = a1;
  uint64_t v13 = a2;
  int v12 = a3;
  uint64_t v11 = a4;
  unint64_t v10 = a5;
  uint64_t v9 = a6;
  uint64_t v8 = 0;
  unint64_t v10 = reader_or_in_memory_fallback((uint64_t)a5, a1);
  unsigned int v7 = v10(v14, v11, 20480, &v8);
  if (v7) {
    return v7;
  }
  else {
    return large_in_use_enumerator(v14, v13, v12, *(void *)(v8 + 18832), *(_DWORD *)(v8 + 18824), (uint64_t (*)(void, void, void, void))v10, v9);
  }
}

uint64_t purgeable_good_size(uint64_t a1, unint64_t a2)
{
  if (a2 > 0x3C00) {
    return szone_good_size(a1, a2);
  }
  else {
    return szone_good_size(*(void *)(a1 + 20456), a2);
  }
}

uint64_t purgeable_check()
{
  return 1;
}

uint64_t purgeable_print_self(uint64_t a1, int a2)
{
  if (a2) {
    int v2 = 2;
  }
  else {
    int v2 = 0;
  }
  return purgeable_print(mach_task_self_, v2, a1, (uint64_t (*)(void, void, void, void))_malloc_default_reader, (uint64_t (*)(const char *, ...))malloc_report_simple);
}

uint64_t purgeable_log(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16400) = a2;
  return result;
}

uint64_t purgeable_force_lock(uint64_t result)
{
  if (v1) {
    char v2 = 0;
  }
  else {
    char v2 = 1;
  }
  if ((v2 & 1) == 0) {
    return os_unfair_lock_lock_with_options();
  }
  int v3 = 0;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(result + 18816), (unsigned int *)&v3, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
  if (v3) {
    return os_unfair_lock_lock_with_options();
  }
  return result;
}

void purgeable_force_unlock(uint64_t a1)
{
  int v1 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  int v2 = v1;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 18816), (unsigned int *)&v2, 0, memory_order_release, memory_order_relaxed);
  if (v2 != v1) {
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 18816));
  }
}

uint64_t purgeable_statistics(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = *(_DWORD *)(result + 18820);
  uint64_t v2 = *(void *)(result + 18840);
  *(void *)(a2 + 24) = v2;
  *(void *)(a2 + 16) = v2;
  *(void *)(a2 + 8) = v2;
  return result;
}

uint64_t purgeable_locked(uint64_t a1)
{
  int v1 = 0;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 18816), (unsigned int *)&v1, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
  if (v1)
  {
    return 1;
  }
  else
  {
    int v2 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    int v3 = v2;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 18816), (unsigned int *)&v3, 0, memory_order_release, memory_order_relaxed);
    if (v3 != v2) {
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 18816));
    }
    return 0;
  }
}

uint64_t purgeable_reinit_lock(uint64_t result)
{
  *(_DWORD *)(result + 18816) = 0;
  return result;
}

uint64_t purgeable_print_task(unsigned int a1, int a2, uint64_t a3, uint64_t (*a4)(void, void, void, void), uint64_t (*a5)(const char *, ...))
{
  return purgeable_print(a1, a2, a3, a4, a5);
}

uint64_t (*reader_or_in_memory_fallback(uint64_t a1, int a2))(int a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a1) {
    return (uint64_t (*)(int, uint64_t, uint64_t, void *))a1;
  }
  BOOL v3 = 1;
  if (a2) {
    BOOL v3 = mach_task_is_self() != 0;
  }
  if (!v3)
  {
    __break(1u);
    JUMPOUT(0x1515CLL);
  }
  return _malloc_default_reader;
}

uint64_t _malloc_default_reader(int a1, uint64_t a2, uint64_t a3, void *a4)
{
  BOOL v5 = 1;
  if (a1) {
    BOOL v5 = mach_task_is_self() != 0;
  }
  if (!v5)
  {
    __break(1u);
    JUMPOUT(0x151FCLL);
  }
  *a4 = a2;
  return 0;
}

uint64_t purgeable_print(unsigned int a1, int a2, uint64_t a3, uint64_t (*a4)(void, void, void, void), uint64_t (*a5)(const char *, ...))
{
  unsigned int v11 = a1;
  int v10 = a2;
  uint64_t v9 = a3;
  uint64_t v8 = a4;
  unsigned int v7 = a5;
  uint64_t v6 = 0;
  uint64_t result = a4(a1, a3, 20480, &v6);
  if (result) {
    return v7("Purgeable zone %p: inUse=%u(%y) flags=%d\n", v9, *(unsigned int *)(v6 + 18820), *(void *)(v6 + 18840), *(unsigned int *)(v6 + 16392));
  }
  return result;
}

uint64_t sanitizer_diagnose_fault_from_crash_reporter(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (v5) {
    char v6 = 0;
  }
  else {
    char v6 = 1;
  }
  if ((v6 & 1) == 0
    || (int v7 = 0,
        atomic_compare_exchange_strong_explicit((atomic_uint *volatile)&crash_reporter_lock, (unsigned int *)&v7, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire), v7))
  {
    os_unfair_lock_lock_with_options();
  }
  unint64_t v17 = (uint64_t *)a5(a3, a4, 16680);
  int v16 = (void *)a5(a3, v17[31], 0x1000000);
  int v15 = (void *)a5(a3, v17[30], 37748744);
  qword_C2190 = 0;
  qword_C2198 = 0;
  enumeration_context = a1;
  g_crm_reader = a5;
  num_read_memory = 0;
  szone_introspect(a3, 0, 1, v17[25], (uint64_t (*)(int, uint64_t, uint64_t, uint64_t *))memory_reader_adapter, (void (*)(void, uint64_t, uint64_t, long long *, uint64_t))pointer_recorder);
  for (unsigned int i = 0; i < num_read_memory; ++i)
    _free((void *)read_memory[i]);
  g_crm_reader = 0;
  _platform_memset();
  *(void *)a2 = a1;
  if (qword_C2190)
  {
    *(void *)(a2 + 8) = qword_C2190;
    *(void *)(a2 + 16) = qword_C2198;
    uint64_t v13 = (void *)a5(a3, qword_C2190, 16);
    int v12 = v13[1];
    int v11 = HIDWORD(v13[1]);
    *(void *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 40) = stacktrace_depo_find((uint64_t)v15, v12, a2 + 48, 0x40uLL);
    *(void *)(a2 + 560) = 0;
    *(_DWORD *)(a2 + 576) = stacktrace_depo_find((uint64_t)v15, v11, a2 + 584, 0x40uLL);
    _free(v13);
  }
  _free(v15);
  _free(v16);
  _free(v17);
  int v8 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  int v9 = v8;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)&crash_reporter_lock, (unsigned int *)&v9, 0, memory_order_release, memory_order_relaxed);
  if (v9 != v8) {
    os_unfair_lock_unlock((os_unfair_lock_t)&crash_reporter_lock);
  }
  return 0;
}

uint64_t memory_reader_adapter(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (num_read_memory >= 0x400)
  {
    __break(1u);
    JUMPOUT(0x1579CLL);
  }
  uint64_t v4 = g_crm_reader(a1, a2, a3);
  *a4 = v4;
  uint64_t v5 = num_read_memory++;
  read_memory[v5] = v4;
  if (v4) {
    return 0;
  }
  else {
    return 5;
  }
}

__n128 pointer_recorder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  for (unsigned int i = 0; i < a5; ++i)
  {
    if (*(void *)(a4 + 16 * (int)i) <= (unint64_t)enumeration_context
      && (unint64_t)enumeration_context < *(void *)(a4 + 16 * (int)i) + *(void *)(a4 + 16 * (int)i + 8))
    {
      __n128 result = *(__n128 *)(a4 + 16 * (int)i);
      *(__n128 *)&qword_C2190 = result;
      return result;
    }
  }
  return result;
}

unint64_t stacktrace_depo_find(uint64_t a1, int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v16 = a1;
  int v15 = a2;
  uint64_t v14 = a3;
  unint64_t v13 = a4;
  uint64_t v11 = 0x80000;
  int v12 = a2 & 0x7FFFF;
  uint64_t v10 = 0;
  uint64_t v10 = *(void *)(a1 + 8 * (a2 & 0x7FFFF));
  if (v10 != a2) {
    return 0;
  }
  uint64_t v9 = 0x400000;
  if ((HIDWORD(v10) & 0xFFFFFFu) > 0x400000uLL) {
    return 0;
  }
  int v8 = murmur2_init();
  for (int i = 0; i < SHIBYTE(HIDWORD(v10)); ++i)
  {
    if (i < v13) {
      *(void *)(v14 + 8 * i) = *(void *)(v16 + 0x400000 + 8 * (((HIDWORD(v10) & 0xFFFFFF) + i) & 0x3FFFFF));
    }
    murmur2_add_uintptr(&v8, *(void *)(v14 + 8 * i));
  }
  int v6 = v15;
  if (v6 != murmur2_finalize(&v8)) {
    return 0;
  }
  if (v13 >= HIBYTE(HIDWORD(v10))) {
    return HIBYTE(HIDWORD(v10));
  }
  else {
    return v13;
  }
}

BOOL sanitizer_should_enable()
{
  BOOL v1 = 1;
  if (!env_BOOL()) {
    return env_BOOL();
  }
  return v1;
}

BOOL env_BOOL()
{
  BOOL v1 = (unsigned char *)env_var();
  return v1 && *v1 == 49;
}

uint64_t sanitizer_reset_environment()
{
  return unsetenv("MallocQuarantineZone");
}

mach_vm_address_t sanitizer_create_zone(uint64_t a1)
{
  mach_vm_address_t v3 = sanitizer_vm_map(16680, 3, 1);
  memcpy((void *)v3, &malloc_zone_template, 0xC8uLL);
  int v2 = 0;
  if (*(void *)(a1 + 96)) {
    int v2 = *(uint64_t (***)(int, uint64_t, int, uint64_t, uint64_t (*)(int, uint64_t, uint64_t, uint64_t *), void (*)(void, uint64_t, uint64_t, long long *, uint64_t)))(a1 + 96);
  }
  if (v2 != &szone_introspect)
  {
    __break(1u);
    JUMPOUT(0x15CACLL);
  }
  *(void *)(v3 + 200) = a1;
  if (*(_DWORD *)(a1 + 104) < 0xDu) {
    malloc_report(64, (uint64_t)"Unsupported wrapped zone version: %u\n");
  }
  *(unsigned char *)(v3 + 208) = env_BOOL();
  *(unsigned char *)(v3 + 209) = !env_BOOL();
  *(void *)(v3 + 216) = env_uint((uint64_t)"MallocSanitizerRedzoneSize", 0x10u);
  if (*(void *)(v3 + 216) % 8uLL)
  {
    __break(1u);
    JUMPOUT(0x15D90);
  }
  *(void *)(v3 + 224) = env_uint((uint64_t)"MallocQuarantineMaxItems", 0);
  *(void *)(v3 + 232) = (unint64_t)env_uint((uint64_t)"MallocQuarantineMaxSizeInMB", 0x100u) << 20;
  *(void *)(v3 + 240) = stacktrace_depo_create();
  *(void *)(v3 + 248) = pointer_map_create();
  init_lock(v3);
  sanitizer_vm_protect(v3, 0x4000, 1);
  return v3;
}

mach_vm_address_t sanitizer_vm_map(uint64_t a1, vm_prot_t cur_protection, int a3)
{
  uint64_t v8 = a1;
  vm_prot_t v7 = cur_protection;
  int v6 = a3;
  mach_port_t v5 = mach_task_self_;
  mach_vm_address_t address = 0;
  if (mach_vm_map(mach_task_self_, &address, (a1 + vm_page_size - 1) & ~(vm_page_size - 1), 0, (a3 << 24) | 1, 0, 0, 0, cur_protection, 3, 1u))
  {
    __break(1u);
    JUMPOUT(0x15F38);
  }
  return address;
}

uint64_t env_uint(uint64_t a1, unsigned int a2)
{
  __str = (char *)env_var();
  if (__str) {
    return strtoul(__str, 0, 0);
  }
  else {
    return a2;
  }
}

uint64_t init_lock(uint64_t result)
{
  *(_DWORD *)(result + 16640) = 0;
  return result;
}

uint64_t sanitizer_vm_protect(mach_vm_address_t a1, uint64_t a2, vm_prot_t a3)
{
  uint64_t result = mach_vm_protect(mach_task_self_, a1, (a2 + vm_page_size - 1) & ~(vm_page_size - 1), 0, a3);
  if (result)
  {
    __break(1u);
    JUMPOUT(0x160A8);
  }
  return result;
}

_DWORD *murmur2_add_uintptr(_DWORD *a1, uint64_t a2)
{
  int v3 = HIDWORD(a2);
  murmur2_add_uint32(a1, a2);
  return murmur2_add_uint32(a1, v3);
}

uint64_t murmur2_finalize(_DWORD *a1)
{
  unsigned int v2 = 1540483477 * (*a1 ^ (*a1 >> 13));
  return v2 ^ (v2 >> 15);
}

uint64_t murmur2_init()
{
  return 3820918481;
}

_DWORD *murmur2_add_uint32(_DWORD *result, int a2)
{
  *result *= 1540483477;
  *result ^= 1540483477 * ((1540483477 * a2) ^ ((1540483477 * a2) >> 24));
  return result;
}

uint64_t env_var()
{
  return _simple_getenv();
}

unint64_t sanitizer_size(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (*(uint64_t (**)(void, uint64_t))(*(void *)(a1 + 200) + 16))(*(void *)(a1 + 200), a2);
  if (!v4) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 209))
  {
    unint64_t redzone_size = get_redzone_size(a1, a2, v4);
    if (*(unsigned char *)(a1 + 208)) {
      malloc_report(6, (uint64_t)"size(%p) = 0x%lx - redzone 0x%lx\n");
    }
    if (v4 <= redzone_size)
    {
      __break(1u);
      JUMPOUT(0x162F4);
    }
    v4 -= redzone_size;
  }
  else if (*(unsigned char *)(a1 + 208))
  {
    malloc_report(6, (uint64_t)"size(%p) = 0x%lx\n");
  }
  return v4;
}

uint64_t sanitizer_malloc(uint64_t a1, unint64_t a2)
{
  uint64_t v14 = a1;
  unint64_t v13 = a2;
  if (!a2) {
    unint64_t v13 = 1;
  }
  uint64_t v12 = 0;
  uint64_t v12 = *(void *)(v14 + 216);
  unint64_t v11 = v13;
  if ((*(unsigned char *)(v14 + 209) & 1) != 0 && (uint64_t v10 = 7, v12 += (8 - (v11 & 7)) & 7, v13 = v11 + v12, v11 + v12 < v11))
  {
    malloc_set_errno_fast(1, 12);
    return 0;
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v9 = (*(uint64_t (**)(void, unint64_t))(*(void *)(v14 + 200) + 24))(*(void *)(v14 + 200), v13);
    uint64_t v2 = *(void *)(v14 + 248);
    uint64_t v20 = *(void *)(v14 + 240);
    uint64_t v19 = v2;
    uint64_t v18 = v9;
    vm_size_t v17 = v11;
    if (v9 && v17 < vm_page_size)
    {
      unsigned int v16 = 0;
      v5[2] = v5;
      uint64_t v28 = v20;
      unsigned int v27 = 1;
      uint64_t v6 = 17;
      unint64_t v26 = v5;
      vm_prot_t v7 = v4;
      uint64_t v25 = 17;
      bzero(v4, 0x88uLL);
      unsigned int v24 = 0;
      uint64_t v23 = v6;
      thread_stack_pcs();
      if (v24 > v27)
      {
        unint64_t v21 = v24 - (unint64_t)v27;
        unsigned int v29 = stacktrace_depo_insert(v28, (uint64_t)&v7[v27], v21);
      }
      else
      {
        unsigned int v29 = 0;
      }
      int v22 = 1;
      unsigned int v16 = v29;
      pointer_map_insert(v19, v18, v29);
    }
    if (*(unsigned char *)(v14 + 208))
    {
      v4[16] = v13;
      v4[17] = v9;
      malloc_report(6, (uint64_t)"malloc(0x%lx) = %p\n");
    }
    if (v9 && (*(unsigned char *)(v14 + 209) & 1) != 0)
    {
      unint64_t v8 = 0;
      unint64_t v8 = (*(uint64_t (**)(void, uint64_t))(*(void *)(v14 + 200) + 16))(*(void *)(v14 + 200), v9);
      if (v8 < v13)
      {
        __break(1u);
        JUMPOUT(0x166A8);
      }
      v12 += v8 - v13;
      poison_alloc(v14, v9, v11, v12);
    }
    return v9;
  }
}

uint64_t sanitizer_calloc(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v15 = a1;
  uint64_t v14 = a2;
  unint64_t v13 = a3;
  unint64_t v12 = 0;
  if (a3 && v14)
  {
    unint64_t v35 = v14;
    unint64_t v34 = v13;
    uint64_t v33 = 0;
    int v32 = &v12;
    unint64_t v31 = v13;
    if (v14 == 1
      || (unint64_t v31 = v35 * v34, v37 = (v35 * (unsigned __int128)v34) >> 64 != 0, is_mul_ok(v35, v34))
      && v31 <= malloc_absolute_max_size)
    {
      *int v32 = v31;
      int v36 = 0;
    }
    else
    {
      malloc_set_errno_fast(1, 12);
      int v36 = -1;
    }
    if (v36) {
      goto LABEL_10;
    }
  }
  else
  {
    unint64_t v12 = 1;
  }
  uint64_t v11 = 0;
  uint64_t v11 = *(void *)(v15 + 216);
  if (*(unsigned char *)(v15 + 209))
  {
    v11 += 8 - (v12 & 7);
    uint64_t v14 = 1;
    unint64_t v13 = v12 + v11;
    if (v12 + v11 < v12)
    {
LABEL_10:
      malloc_set_errno_fast(1, 12);
      return 0;
    }
  }
  uint64_t v10 = 0;
  uint64_t v10 = (*(uint64_t (**)(void, uint64_t, unint64_t))(*(void *)(v15 + 200) + 32))(*(void *)(v15 + 200), v14, v13);
  if (*(unsigned char *)(v15 + 208))
  {
    v5[14] = v14;
    v5[15] = v13;
    v5[16] = v10;
    malloc_report(6, (uint64_t)"calloc(0x%lx, 0x%lx) = %p\n");
  }
  uint64_t v3 = *(void *)(v15 + 248);
  uint64_t v21 = *(void *)(v15 + 240);
  uint64_t v20 = v3;
  uint64_t v19 = v10;
  vm_size_t v18 = v12;
  if (v10 && v18 < vm_page_size)
  {
    unsigned int v17 = 0;
    v6[2] = v6;
    uint64_t v29 = v21;
    unsigned int v28 = 1;
    uint64_t v7 = 17;
    unsigned int v27 = v6;
    unint64_t v8 = v5;
    uint64_t v26 = 17;
    bzero(v5, 0x88uLL);
    unsigned int v25 = 0;
    uint64_t v24 = v7;
    thread_stack_pcs();
    if (v25 > v28)
    {
      unint64_t v22 = v25 - (unint64_t)v28;
      unsigned int v30 = stacktrace_depo_insert(v29, (uint64_t)&v8[v28], v22);
    }
    else
    {
      unsigned int v30 = 0;
    }
    int v23 = 1;
    unsigned int v17 = v30;
    pointer_map_insert(v20, v19, v30);
  }
  if (v10 && (*(unsigned char *)(v15 + 209) & 1) != 0)
  {
    unint64_t v9 = 0;
    unint64_t v9 = (*(uint64_t (**)(void, uint64_t))(*(void *)(v15 + 200) + 16))(*(void *)(v15 + 200), v10);
    if (v9 < v13)
    {
      __break(1u);
      JUMPOUT(0x16BF8);
    }
    v11 += v9 - v13;
    poison_alloc(v15, v10, v12, v11);
  }
  return v10;
}

uint64_t sanitizer_valloc(uint64_t a1, unint64_t a2)
{
  uint64_t v13 = a1;
  unint64_t v12 = a2;
  if (!a2) {
    unint64_t v12 = 1;
  }
  uint64_t v11 = 0;
  uint64_t v11 = *(void *)(v13 + 216);
  unint64_t v10 = v12;
  if (*(unsigned char *)(v13 + 209))
  {
    v11 += 8 - (v10 & 7);
    unint64_t v12 = v10 + v11;
    if (v10 + v11 < v10) {
      return 0;
    }
  }
  uint64_t v9 = 0;
  uint64_t v9 = (*(uint64_t (**)(void, unint64_t))(*(void *)(v13 + 200) + 40))(*(void *)(v13 + 200), v12);
  uint64_t v2 = *(void *)(v13 + 248);
  uint64_t v19 = *(void *)(v13 + 240);
  uint64_t v18 = v2;
  uint64_t v17 = v9;
  vm_size_t v16 = v10;
  if (v9 && v16 < vm_page_size)
  {
    unsigned int v15 = 0;
    v5[1] = v5;
    uint64_t v27 = v19;
    unsigned int v26 = 1;
    uint64_t v6 = 17;
    unsigned int v25 = v5;
    uint64_t v7 = v4;
    uint64_t v24 = 17;
    bzero(v4, 0x88uLL);
    unsigned int v23 = 0;
    uint64_t v22 = v6;
    thread_stack_pcs();
    if (v23 > v26)
    {
      unint64_t v20 = v23 - (unint64_t)v26;
      unsigned int v28 = stacktrace_depo_insert(v27, (uint64_t)&v7[v26], v20);
    }
    else
    {
      unsigned int v28 = 0;
    }
    int v21 = 1;
    unsigned int v15 = v28;
    pointer_map_insert(v18, v17, v28);
  }
  if (*(unsigned char *)(v13 + 208))
  {
    v4[16] = v12;
    v4[17] = v9;
    malloc_report(6, (uint64_t)"valloc(0x%lx) = %p\n");
  }
  if (v9 && (*(unsigned char *)(v13 + 209) & 1) != 0)
  {
    unint64_t v8 = 0;
    unint64_t v8 = (*(uint64_t (**)(void, uint64_t))(*(void *)(v13 + 200) + 16))(*(void *)(v13 + 200), v9);
    if (v8 < v12)
    {
      __break(1u);
      JUMPOUT(0x16FB0);
    }
    v11 += v8 - v12;
    poison_alloc(v13, v9, v10, v11);
  }
  return v9;
}

void sanitizer_free(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (*(unsigned char *)(a1 + 209))
  {
    uint64_t v2 = (*(uint64_t (**)(void, uint64_t))(*(void *)(a1 + 200) + 16))(*(void *)(a1 + 200), a2);
    poison_free(a1, a2, v2);
  }
  if (*(unsigned char *)(a1 + 208)) {
    malloc_report(6, (uint64_t)"free(%p)\n");
  }
  place_into_quarantine(a1, a2, v2);
}

uint64_t sanitizer_realloc(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v26 = a1;
  uint64_t v25 = a2;
  unint64_t v24 = a3;
  if (!a3) {
    unint64_t v24 = 1;
  }
  uint64_t v23 = 0;
  uint64_t v23 = *(void *)(v26 + 216);
  unint64_t v22 = v24;
  if (*(unsigned char *)(v26 + 209))
  {
    v23 += 8 - (v24 & 7);
    unint64_t v24 = v22 + v23;
    if (v22 + v23 < v22) {
      return 0;
    }
  }
  uint64_t v21 = 0;
  uint64_t v21 = (*(uint64_t (**)(void, unint64_t))(*(void *)(v26 + 200) + 24))(*(void *)(v26 + 200), v24);
  uint64_t v3 = *(void *)(v26 + 248);
  uint64_t v32 = *(void *)(v26 + 240);
  uint64_t v31 = v3;
  uint64_t v30 = v21;
  vm_size_t v29 = v22;
  if (v21 && v29 < vm_page_size)
  {
    unsigned int v28 = 0;
    uint64_t v13 = &v9;
    uint64_t v40 = v32;
    unsigned int v39 = 1;
    uint64_t v14 = 17;
    uint64_t v38 = &v9;
    unsigned int v15 = v5;
    uint64_t v37 = 17;
    bzero(v5, 0x88uLL);
    unsigned int v36 = 0;
    uint64_t v35 = v14;
    thread_stack_pcs();
    if (v36 > v39)
    {
      unint64_t v33 = v36 - (unint64_t)v39;
      unsigned int v41 = stacktrace_depo_insert(v40, (uint64_t)&v15[v39], v33);
    }
    else
    {
      unsigned int v41 = 0;
    }
    int v34 = 1;
    unsigned int v28 = v41;
    pointer_map_insert(v31, v30, v41);
  }
  if (*(unsigned char *)(v26 + 208))
  {
    uint64_t v6 = v25;
    unint64_t v7 = v24;
    uint64_t v8 = v21;
    malloc_report(6, (uint64_t)"realloc(%p, 0x%lx) = %p\n");
  }
  if (v25)
  {
    unint64_t redzone_size = 0;
    unint64_t v19 = 0;
    unint64_t v19 = (*(uint64_t (**)(void, uint64_t))(*(void *)(v26 + 200) + 16))(*(void *)(v26 + 200), v25);
    uint64_t v18 = v25;
    if (*(unsigned char *)(v26 + 209))
    {
      unint64_t redzone_size = get_redzone_size(v26, v18, v19);
      if (v19 <= redzone_size)
      {
        __break(1u);
        JUMPOUT(0x17448);
      }
    }
    if (*(unsigned char *)(v26 + 208))
    {
      v5[12] = v25;
      v5[13] = v24;
      uint64_t v6 = v18;
      unint64_t v7 = v19;
      uint64_t v8 = redzone_size;
      malloc_report(6, (uint64_t)"realloc(%p, 0x%lx): size(%p) = 0x%lx - redzone 0x%lx)\n");
    }
    if (!v21) {
      return 0;
    }
    unint64_t v17 = v19 - redzone_size;
    uint64_t v11 = v21;
    uint64_t v12 = v18;
    if (v19 - redzone_size >= v22) {
      unint64_t v10 = v22;
    }
    else {
      unint64_t v10 = v17;
    }
    _platform_memmove();
    if (*(unsigned char *)(v26 + 209)) {
      poison_free(v26, v18, v19);
    }
    place_into_quarantine(v26, v25, v19);
  }
  if (v21 && (*(unsigned char *)(v26 + 209) & 1) != 0)
  {
    unint64_t v16 = 0;
    unint64_t v16 = (*(uint64_t (**)(void, uint64_t))(*(void *)(v26 + 200) + 16))(*(void *)(v26 + 200), v21);
    if (v16 < v24)
    {
      __break(1u);
      JUMPOUT(0x175F0);
    }
    v23 += v16 - v24;
    poison_alloc(v26, v21, v22, v23);
  }
  return v21;
}

uint64_t sanitizer_destroy(mach_vm_address_t a1)
{
  return sanitizer_vm_deallocate(a1, 16680);
}

uint64_t sanitizer_memalign(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v15 = a1;
  uint64_t v14 = a2;
  unint64_t v13 = a3;
  if (!a3) {
    unint64_t v13 = 1;
  }
  uint64_t v12 = 0;
  uint64_t v12 = *(void *)(v15 + 216);
  unint64_t v11 = v13;
  if (*(unsigned char *)(v15 + 209))
  {
    unint64_t v13 = v11 + v12;
    if (v11 + v12 < v11) {
      return 0;
    }
  }
  uint64_t v10 = 0;
  uint64_t v10 = (*(uint64_t (**)(void, uint64_t, unint64_t))(*(void *)(v15 + 200) + 112))(*(void *)(v15 + 200), v14, v13);
  uint64_t v3 = *(void *)(v15 + 248);
  uint64_t v21 = *(void *)(v15 + 240);
  uint64_t v20 = v3;
  uint64_t v19 = v10;
  vm_size_t v18 = v11;
  if (v10 && v18 < vm_page_size)
  {
    unsigned int v17 = 0;
    v6[2] = v6;
    uint64_t v29 = v21;
    unsigned int v28 = 1;
    uint64_t v7 = 17;
    uint64_t v27 = v6;
    uint64_t v8 = v5;
    uint64_t v26 = 17;
    bzero(v5, 0x88uLL);
    unsigned int v25 = 0;
    uint64_t v24 = v7;
    thread_stack_pcs();
    if (v25 > v28)
    {
      unint64_t v22 = v25 - (unint64_t)v28;
      unsigned int v30 = stacktrace_depo_insert(v29, (uint64_t)&v8[v28], v22);
    }
    else
    {
      unsigned int v30 = 0;
    }
    int v23 = 1;
    unsigned int v17 = v30;
    pointer_map_insert(v20, v19, v30);
  }
  if (*(unsigned char *)(v15 + 208))
  {
    v5[16] = v14;
    v5[17] = v13;
    malloc_report(6, (uint64_t)"memalign(0x%lx, 0x%lx)\n");
  }
  if (v10 && (*(unsigned char *)(v15 + 209) & 1) != 0)
  {
    unint64_t v9 = 0;
    unint64_t v9 = (*(uint64_t (**)(void, uint64_t))(*(void *)(v15 + 200) + 16))(*(void *)(v15 + 200), v10);
    if (v9 < v13)
    {
      __break(1u);
      JUMPOUT(0x179E4);
    }
    v12 += v9 - v13;
    poison_alloc(v15, v10, v11, v12);
  }
  return v10;
}

void sanitizer_free_definite_size(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 208)) {
    malloc_report(6, (uint64_t)"free_definite_size(%p, 0x%lx)\n");
  }
  if (*(unsigned char *)(a1 + 209))
  {
    a3 = (*(uint64_t (**)(void, uint64_t))(*(void *)(a1 + 200) + 16))(*(void *)(a1 + 200), a2);
    poison_free(a1, a2, a3);
  }
  place_into_quarantine(a1, a2, a3);
}

BOOL sanitizer_claimed_address(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(void, uint64_t))(*(void *)(a1 + 200) + 136))(*(void *)(a1 + 200), a2) != 0;
}

unint64_t get_redzone_size(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if ((*(unsigned char *)(a1 + 209) ^ 1))
  {
    __break(1u);
    JUMPOUT(0x17BC4);
  }
  unint64_t uint64_via_rsp = _malloc_read_uint64_via_rsp(a2 + a3 - (a3 % 8 + 8));
  BOOL v4 = 0;
  if (uint64_via_rsp >= *(void *)(a1 + 216)) {
    BOOL v4 = uint64_via_rsp < a3;
  }
  if (!v4)
  {
    __break(1u);
    JUMPOUT(0x17C70);
  }
  return uint64_via_rsp;
}

uint64_t _malloc_read_uint64_via_rsp(uint64_t a1)
{
  return *(void *)a1;
}

void poison_alloc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 208)) {
    malloc_report(6, (uint64_t)"poison_alloc(%p, 0x%lx, 0x%lx)\n");
  }
  if (!a2)
  {
    __break(1u);
    JUMPOUT(0x17D2CLL);
  }
  set_redzone_size(a1, a2, a3, a4);
  functions = (void (**)(uint64_t, void, uint64_t, uint64_t))malloc_sanitizer_get_functions();
  if (functions && *functions)
  {
    (*functions)(a2, 0, a3, a4);
  }
  else if (*(unsigned char *)(a1 + 208))
  {
    malloc_report(4, (uint64_t)"MallocSanitizerZone: Not poisoning allocation %p of size %lu with redzone size %lu due to missing pointers!\n");
  }
}

__n128 pointer_map_insert(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&long long v14 = a2;
  *((void *)&v14 + 1) = a3;
  uint64_t v12 = (uint64_t *)(a1 + 16 * (murmur2_hash_pointer(a2) & 0xFFFFF));
  uint64_t v13 = *v12;
  do
  {
    _X1 = v12[1];
    _X2 = v14;
    __asm { CASP            X0, X1, X2, X3, [X8] }
    BOOL v10 = _X0 == v13;
    uint64_t v13 = _X0;
  }
  while (!v10);
  return (__n128)v14;
}

uint64_t stacktrace_depo_insert(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >= 0x100)
  {
    __break(1u);
    JUMPOUT(0x17F60);
  }
  unsigned int v8 = murmur2_hash_backtrace(a2, a3);
  uint64_t v6 = *(void *)(a1 + 8 * (v8 & 0x7FFFF));
  if (HIBYTE(HIDWORD(v6)) == a3 && v6 == v8)
  {
    return v8;
  }
  else
  {
    unint64_t v5 = atomic_fetch_add_explicit((atomic_ullong *volatile)(a1 + 37748736), a3, memory_order_relaxed) & 0x3FFFFF;
    LODWORD(v7) = v8;
    HIDWORD(v7) = v5 & 0xFFFFFF | (a3 << 24);
    *(void *)(a1 + 8 * (v8 & 0x7FFFF)) = v7;
    for (int i = 0; i < a3; ++i)
      *(void *)(a1 + 0x400000 + 8 * ((v5 + i) & 0x3FFFFF)) = *(void *)(a2 + 8 * i);
    return v8;
  }
}

uint64_t murmur2_hash_backtrace(uint64_t a1, unint64_t a2)
{
  uint64_t v6 = a1;
  unint64_t v5 = a2;
  int v4 = murmur2_init();
  for (int i = 0; i < v5; ++i)
    murmur2_add_uintptr(&v4, *(void *)(v6 + 8 * i));
  return murmur2_finalize(&v4);
}

uint64_t murmur2_hash_pointer(uint64_t a1)
{
  uint64_t v3 = a1;
  int v2 = 0;
  int v2 = murmur2_init();
  murmur2_add_uintptr(&v2, v3);
  return murmur2_finalize(&v2);
}

void *set_redzone_size(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((*(unsigned char *)(a1 + 209) ^ 1))
  {
    __break(1u);
    JUMPOUT(0x182B0);
  }
  return _malloc_write_uint64_via_rsp((void *)(a2 + a3 + a4 - ((a3 + a4) % 8uLL + 8)), a4);
}

void *_malloc_write_uint64_via_rsp(void *result, uint64_t a2)
{
  *uint64_t result = a2;
  return result;
}

void poison_free(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 208)) {
    malloc_report(6, (uint64_t)"poison_free(%p, 0x%lx)\n");
  }
  if (!a2)
  {
    __break(1u);
    JUMPOUT(0x183B8);
  }
  uint64_t functions = malloc_sanitizer_get_functions();
  if (functions && *(void *)(functions + 8))
  {
    (*(void (**)(uint64_t, uint64_t))(functions + 8))(a2, a3);
  }
  else if (*(unsigned char *)(a1 + 208))
  {
    malloc_report(4, (uint64_t)"MallocSanitizerZone: Not poisoning deallocation %p of size %lu due to missing pointers!\n");
  }
}

void place_into_quarantine(uint64_t a1, uint64_t a2, vm_size_t a3)
{
  uint64_t v36 = a1;
  uint64_t v35 = a2;
  vm_size_t v34 = a3;
  if (a2)
  {
    if (!v34) {
      vm_size_t v34 = (*(uint64_t (**)(void, uint64_t))(*(void *)(v36 + 200) + 16))(*(void *)(v36 + 200), v35);
    }
    uint64_t v33 = v35;
    if (v34 <= vm_page_size)
    {
      unsigned int v32 = 0;
      uint64_t v3 = *(void *)(v36 + 240);
      unint64_t v11 = v7;
      uint64_t v44 = v3;
      unsigned int v43 = 2;
      uint64_t v12 = 18;
      unint64_t v42 = v7;
      uint64_t v13 = v6;
      uint64_t v41 = 18;
      bzero(v6, 0x90uLL);
      unsigned int v40 = 0;
      uint64_t v39 = v12;
      thread_stack_pcs();
      if (v40 > v43)
      {
        unint64_t v37 = v40 - (unint64_t)v43;
        unsigned int v45 = stacktrace_depo_insert(v44, (uint64_t)&v13[v43], v37);
      }
      else
      {
        unsigned int v45 = 0;
      }
      int v38 = 1;
      unsigned int v32 = v45;
      uint64_t v31 = 0;
      pointer_map_find(*(void *)(v36 + 248), v33, &v31);
      int v30 = v31;
      unint64_t v29 = v31 | ((unint64_t)v32 << 32);
      lock(v36);
      if (*(void *)(v36 + 16664))
      {
        unint64_t v28 = 0;
        uint64_t uint64_via_rsp = _malloc_read_uint64_via_rsp(*(void *)(v36 + 16656));
        unint64_t v28 = uint64_via_rsp & 0xFFFF000000000000 | v33 & 0xFFFFFFFFFFFFLL;
        _malloc_write_uint64_via_rsp(*(void **)(v36 + 16656), v28);
        *(void *)(v36 + 16656) = v33;
      }
      else
      {
        uint64_t v4 = v33;
        *(void *)(v36 + 16648) = v33;
        *(void *)(v36 + 16656) = v4;
      }
      uint64_t v27 = (unint64_t)(unsigned __int16)v34 << 48;
      _malloc_write_uint64_via_rsp(*(void **)(v36 + 16656), v27);
      _malloc_write_uint64_via_rsp((void *)(*(void *)(v36 + 16656) + 8), v29);
      ++*(void *)(v36 + 16664);
      *(void *)(v36 + 16672) += v34;
      uint64_t v26 = 0;
      if (*(void *)(v36 + 224) && *(void *)(v36 + 16664) > *(void *)(v36 + 224)) {
        uint64_t v10 = *(void *)(v36 + 16664) - *(void *)(v36 + 224);
      }
      else {
        uint64_t v10 = 0;
      }
      uint64_t v26 = v10;
      uint64_t v25 = 0;
      if (*(void *)(v36 + 232) && *(void *)(v36 + 16672) > *(void *)(v36 + 232)) {
        uint64_t v9 = *(void *)(v36 + 16672) - *(void *)(v36 + 232);
      }
      else {
        uint64_t v9 = 0;
      }
      uint64_t v25 = v9;
      uint64_t v24 = 0;
      uint64_t v24 = *(void *)(v36 + 16648);
      unint64_t v23 = 0;
      uint64_t v22 = 0;
      uint64_t i = 0;
      for (uint64_t i = *(void *)(v36 + 16648); ; uint64_t i = v20 & 0xFFFFFFFFFFFFLL)
      {
        BOOL v8 = 1;
        if (v26 <= 0) {
          BOOL v8 = v25 > 0;
        }
        if (!v8) {
          break;
        }
        unint64_t v20 = 0;
        unint64_t v20 = _malloc_read_uint64_via_rsp(i);
        uint64_t v19 = v20 & 0xFFFFFFFFFFFFLL;
        unint64_t v18 = HIWORD(v20);
        ++v23;
        v22 += HIWORD(v20);
        --v26;
        v25 -= HIWORD(v20);
      }
      *(void *)(v36 + 16648) = i;
      *(void *)(v36 + 16664) -= v23;
      *(void *)(v36 + 16672) -= v22;
      unlock(v36);
      uint64_t i = v24;
      for (unint64_t j = 0; j < v23; ++j)
      {
        unint64_t v16 = 0;
        unint64_t v16 = _malloc_read_uint64_via_rsp(i);
        uint64_t v15 = v16 & 0xFFFFFFFFFFFFLL;
        unint64_t v14 = HIWORD(v16);
        if (*(unsigned char *)(v36 + 208))
        {
          v6[16] = i;
          v6[17] = v14;
          malloc_report(6, (uint64_t)"evicting %p from quarantine, size = 0x%lx\n");
        }
        if (*(unsigned char *)(v36 + 209)) {
          unpoison(v36, i, v14);
        }
        (*(void (**)(void, uint64_t, unint64_t))(*(void *)(v36 + 200) + 120))(*(void *)(v36 + 200), i, v14);
        uint64_t i = v15;
      }
    }
    else
    {
      if (*(unsigned char *)(v36 + 209)) {
        unpoison(v36, v33, v34);
      }
      (*(void (**)(void, uint64_t))(*(void *)(v36 + 200) + 48))(*(void *)(v36 + 200), v33);
    }
  }
}

void unpoison(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 208)) {
    malloc_report(6, (uint64_t)"unpoison(%p, 0x%lx)\n");
  }
  if (!a2)
  {
    __break(1u);
    JUMPOUT(0x18B40);
  }
  uint64_t functions = (void (**)(uint64_t, void, uint64_t))malloc_sanitizer_get_functions();
  if (functions && *functions)
  {
    (*functions)(a2, 0, a3);
  }
  else if (*(unsigned char *)(a1 + 208))
  {
    malloc_report(4, (uint64_t)"MallocSanitizerZone: Not unpoisoning %p of size %lu due to missing pointers!\n");
  }
}

uint64_t pointer_map_find(uint64_t a1, uint64_t a2, void *a3)
{
  murmur2_hash_pointer(a2);
  _X1 = 0;
  _X2 = 0;
  __asm { CASP            X0, X1, X2, X3, [X8] }
  if (_X0 == a2)
  {
    *a3 = 0;
    char v13 = 1;
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t lock(uint64_t result)
{
  if (v1) {
    char v2 = 0;
  }
  else {
    char v2 = 1;
  }
  if ((v2 & 1) == 0) {
    return os_unfair_lock_lock_with_options();
  }
  int v3 = 0;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(result + 16640), (unsigned int *)&v3, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
  if (v3) {
    return os_unfair_lock_lock_with_options();
  }
  return result;
}

void unlock(uint64_t a1)
{
  int v1 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  int v2 = v1;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 16640), (unsigned int *)&v2, 0, memory_order_release, memory_order_relaxed);
  if (v2 != v1) {
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16640));
  }
}

void stacktrace_depo_destroy(mach_vm_address_t a1)
{
}

void pointer_map_destroy(mach_vm_address_t a1)
{
}

uint64_t sanitizer_vm_deallocate(mach_vm_address_t a1, uint64_t a2)
{
  uint64_t result = mach_vm_deallocate(mach_task_self_, a1, (a2 + vm_page_size - 1) & ~(vm_page_size - 1));
  if (result)
  {
    __break(1u);
    JUMPOUT(0x18FECLL);
  }
  return result;
}

uint64_t sanitizer_enumerator()
{
  return 46;
}

uint64_t sanitizer_good_size(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0;
  if (*(void *)(*(void *)(a1 + 200) + 96)) {
    uint64_t v3 = *(void *)(*(void *)(a1 + 200) + 96);
  }
  return (*(uint64_t (**)(void, uint64_t))(v3 + 8))(*(void *)(a1 + 200), a2);
}

uint64_t sanitizer_check()
{
  return 1;
}

uint64_t sanitizer_force_lock(uint64_t a1)
{
  return lock(a1);
}

void sanitizer_force_unlock(uint64_t a1)
{
}

BOOL sanitizer_zone_locked(uint64_t a1)
{
  BOOL v2 = trylock(a1);
  if (v2) {
    unlock(a1);
  }
  return !v2;
}

uint64_t sanitizer_reinit_lock(uint64_t a1)
{
  return init_lock(a1);
}

uint64_t sanitizer_statistics_task()
{
  return 46;
}

BOOL trylock(uint64_t a1)
{
  int v1 = 0;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 16640), (unsigned int *)&v1, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
  return v1 == 0;
}

mach_vm_address_t stacktrace_depo_create()
{
  return mvm_allocate_pages(0x2400008uLL, vm_page_shift, 0, 10);
}

mach_vm_address_t pointer_map_create()
{
  return mvm_allocate_pages(0x1000000uLL, vm_page_shift, 0, 10);
}

uint64_t large_debug_print(unsigned int a1, int a2, uint64_t a3, unsigned int (*a4)(void, void, uint64_t, void *), void (*a5)(const char *, ...))
{
  unsigned int v18 = a1;
  int v17 = a2;
  uint64_t v16 = a3;
  uint64_t v15 = a4;
  unint64_t v14 = a5;
  uint64_t v13 = 0;
  if (a4(a1, a3, 20480, &v13)) {
    return ((uint64_t (*)(const char *))v14)("Failed to read szone structure\n");
  }
  unsigned int v12 = 0;
  unint64_t v11 = 0;
  uint64_t result = _simple_salloc();
  v10[1] = result;
  if (result)
  {
    v10[0] = 0;
    if (v15(v18, *(void *)(v13 + 18832), 24 * *(unsigned int *)(v13 + 18824), v10))
    {
      return ((uint64_t (*)(const char *))v14)("Failed to read large entries\n");
    }
    else
    {
      _simple_sprintf();
      unsigned int v12 = 0;
      unint64_t v11 = (void *)v10[0];
      while (v12 < *(_DWORD *)(v13 + 18824))
      {
        if (*v11)
        {
          _simple_sprintf();
          if (vm_kernel_page_size <= vm_page_size) {
            vm_size_t v9 = vm_page_size;
          }
          else {
            vm_size_t v9 = vm_kernel_page_size;
          }
          if (v11[1] + 2 * v9 <= 0xFFFFFFFF) {
            mvm_reclaim_is_available();
          }
          _simple_sprintf();
        }
        ++v12;
        v11 += 3;
      }
      if (large_cache_enabled)
      {
        _simple_sprintf();
        _simple_sprintf();
        unsigned int v12 = 0;
        unint64_t v11 = (void *)(v13 + 18856);
        while (v12 < *(_DWORD *)(v13 + 20392))
        {
          _simple_sprintf();
          if (vm_kernel_page_size <= vm_page_size) {
            vm_size_t v8 = vm_page_size;
          }
          else {
            vm_size_t v8 = vm_kernel_page_size;
          }
          if (v11[1] + 2 * v8 <= 0xFFFFFFFF) {
            mvm_reclaim_is_available();
          }
          _simple_sprintf();
          ++v12;
          v11 += 3;
        }
      }
      _simple_sprintf();
      uint64_t v7 = v14;
      uint64_t v6 = (const char *)_simple_string();
      v7("%s\n", v6);
      return _simple_sfree();
    }
  }
  return result;
}

uint64_t large_entry_for_pointer_no_lock(uint64_t a1, unint64_t a2)
{
  unsigned int v5 = *(_DWORD *)(a1 + 18824);
  if (!v5) {
    return 0;
  }
  unsigned int v4 = (a2 >> vm_page_shift) % v5;
  do
  {
    uint64_t v3 = (void *)(*(void *)(a1 + 18832) + 24 * v4);
    if (*v3 == a2) {
      return *(void *)(a1 + 18832) + 24 * v4;
    }
    if (!*v3) {
      break;
    }
    if (++v4 == v5) {
      unsigned int v4 = 0;
    }
  }
  while (v4 != (a2 >> vm_page_shift) % v5);
  return 0;
}

void large_entries_free_no_lock(uint64_t a1, uint64_t a2, unsigned int a3, void *a4)
{
  *a4 = a2;
  if (vm_kernel_page_mask <= vm_page_mask) {
    vm_size_t v5 = vm_page_mask;
  }
  else {
    vm_size_t v5 = vm_kernel_page_mask;
  }
  if (vm_kernel_page_mask <= vm_page_mask) {
    vm_size_t v4 = vm_page_mask;
  }
  else {
    vm_size_t v4 = vm_kernel_page_mask;
  }
  a4[1] = (24 * a3 + v5) & ~v4;
}

uint64_t large_in_use_enumerator(unsigned int a1, uint64_t a2, int a3, uint64_t a4, unsigned int a5, uint64_t (*a6)(void, void, void, void), void (*a7)(void, uint64_t, uint64_t, long long *, uint64_t))
{
  unsigned int v24 = a1;
  uint64_t v23 = a2;
  int v22 = a3;
  uint64_t v21 = a4;
  unsigned int v20 = a5;
  uint64_t v19 = a6;
  unsigned int v18 = a7;
  unsigned int v17 = 0;
  unsigned int v16 = 0;
  uint64_t v15 = 0;
  long long v13 = 0uLL;
  unsigned int v14 = a6(a1, a4, 24 * a5, &v15);
  if (v14)
  {
    return v14;
  }
  else
  {
    unsigned int v17 = v20;
    if ((v22 & 4) != 0)
    {
      *(void *)&long long v13 = v21;
      if (vm_kernel_page_mask <= vm_page_mask) {
        vm_size_t v11 = vm_page_mask;
      }
      else {
        vm_size_t v11 = vm_kernel_page_mask;
      }
      if (vm_kernel_page_mask <= vm_page_mask) {
        vm_size_t v10 = vm_page_mask;
      }
      else {
        vm_size_t v10 = vm_kernel_page_mask;
      }
      *((void *)&v13 + 1) = (24 * v20 + v11) & ~v10;
      v18(v24, v23, 4, &v13, 1);
    }
    if ((v22 & 3) != 0)
    {
      while (v17--)
      {
        long long v12 = *(_OWORD *)(v15 + 24 * v17);
        if ((void)v12)
        {
          long long v13 = *(_OWORD *)(v15 + 24 * v17);
          uint64_t v8 = v16++;
          v26[v8] = v12;
          if (v16 >= 0x100)
          {
            v18(v24, v23, 3, v26, v16);
            unsigned int v16 = 0;
          }
        }
      }
    }
    if (v16) {
      v18(v24, v23, 3, v26, v16);
    }
    return 0;
  }
}

uint64_t large_malloc(uint64_t a1, uint64_t a2, unsigned __int8 a3, int a4)
{
  uint64_t v18 = a1;
  uint64_t v17 = a2;
  unsigned __int8 v16 = a3;
  int v15 = a4;
  uint64_t v14 = 0;
  mach_vm_address_t v12 = 0;
  mach_vm_size_t v13 = 0;
  if (malloc_tracing_enabled) {
    kdebug_trace();
  }
  if (!v17) {
    uint64_t v17 = 1;
  }
  if (vm_kernel_page_shift <= vm_page_shift) {
    char v9 = vm_page_shift;
  }
  else {
    char v9 = vm_kernel_page_shift;
  }
  unint64_t v11 = v17 << v9;
  mach_vm_size_t v13 = 0;
  mach_vm_address_t v12 = 0;
  if ((large_cache_enabled & 1) != 0 && v11 <= *(void *)(v18 + 20400))
  {
    uint64_t v14 = large_malloc_from_cache(v18, v11, v16, v15);
    if (v14) {
      return v14;
    }
  }
  if ((*(_DWORD *)(v18 + 16392) & 0x20000000) != 0) {
    mach_vm_address_t pages = mvm_allocate_pages(v11, v16, *(_DWORD *)(v18 + 16392) | 0x40000000u, 3);
  }
  else {
    mach_vm_address_t pages = mvm_allocate_pages(v11, v16, *(_DWORD *)(v18 + 16392), 3);
  }
  uint64_t v14 = pages;
  if (!pages) {
    return 0;
  }
  uint64_t v20 = v18;
  uint64_t v22 = v18 + 18816;
  unint64_t v29 = (atomic_uint *)(v18 + 18816);
  int v28 = 327680;
  unsigned int v27 = 0;
  uint64_t v30 = 3;
  uint64_t v31 = 3;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unsigned int v27 = *(void *)(StatusReg + 24);
  int v26 = 0;
  unsigned int v25 = v27;
  unsigned int v24 = v27;
  int v5 = 0;
  atomic_compare_exchange_strong_explicit(v29, (unsigned int *)&v5, v27, memory_order_acquire, memory_order_acquire);
  if (v5) {
    int v26 = v5;
  }
  BOOL v23 = v5 == 0;
  if (v5) {
    os_unfair_lock_lock_with_options();
  }
  char v10 = large_entry_grow_and_insert_no_lock(v18, v14, v11, &v12) & 1;
  uint64_t v21 = v18;
  uint64_t v33 = v18 + 18816;
  os_unfair_lock_t v39 = (os_unfair_lock_t)(v18 + 18816);
  int v38 = 0;
  uint64_t v40 = 3;
  uint64_t v41 = 3;
  unint64_t v42 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  int v38 = *(void *)(v42 + 24);
  int v37 = 0;
  int v36 = v38;
  int v35 = 0;
  int v6 = v38;
  int v7 = v38;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v18 + 18816), (unsigned int *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != v6) {
    int v36 = v7;
  }
  BOOL v34 = v7 == v6;
  if (v7 != v6) {
    os_unfair_lock_unlock(v39);
  }
  if ((v10 & 1) == 0) {
    return 0;
  }
  if (v13) {
    mvm_deallocate_pages(v12, v13, 0);
  }
  return v14;
}

uint64_t large_malloc_from_cache(uint64_t a1, unint64_t a2, char a3, int a4)
{
  unsigned int v25 = (os_unfair_lock_s *)a1;
  unint64_t v24 = a2;
  char v23 = a3;
  int v22 = a4;
  uint64_t v27 = a1;
  uint64_t v31 = a1 + 18816;
  int v38 = (atomic_uint *)(a1 + 18816);
  int v37 = 327680;
  if (v4) {
    char v5 = 0;
  }
  else {
    char v5 = 1;
  }
  if ((v5 & 1) == 0) {
    goto LABEL_8;
  }
  unsigned int v36 = 0;
  uint64_t v39 = 3;
  uint64_t v40 = 3;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unsigned int v36 = *(void *)(StatusReg + 24);
  int v35 = 0;
  unsigned int v34 = v36;
  unsigned int v33 = v36;
  int v6 = 0;
  atomic_compare_exchange_strong_explicit(v38, (unsigned int *)&v6, v36, memory_order_acquire, memory_order_acquire);
  if (v6) {
    int v35 = v6;
  }
  BOOL v32 = v6 == 0;
  if (v6) {
LABEL_8:
  }
    os_unfair_lock_lock_with_options();
  char v21 = 0;
  long long v19 = 0uLL;
  uint64_t v20 = 0;
  do
  {
    large_malloc_best_fit_in_cache(v25, v24, v23, &v17);
    long long v19 = v17;
    uint64_t v20 = v18;
    if (!(void)v17)
    {
      uint64_t v30 = v25;
      unint64_t v42 = v25 + 4704;
      os_unfair_lock_t v68 = v25 + 4704;
      int v67 = 0;
      uint64_t v69 = 3;
      uint64_t v70 = 3;
      unint64_t v71 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      int v67 = *(void *)(v71 + 24);
      int v66 = 0;
      int v65 = v67;
      int v64 = 0;
      int v7 = v67;
      int v8 = v67;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)&v25[4704], (unsigned int *)&v8, 0, memory_order_release, memory_order_relaxed);
      if (v8 != v7) {
        int v65 = v8;
      }
      BOOL v63 = v8 == v7;
      if (v8 != v7) {
        os_unfair_lock_unlock(v68);
      }
      return 0;
    }
    if (vm_kernel_page_size <= vm_page_size) {
      vm_size_t v14 = vm_page_size;
    }
    else {
      vm_size_t v14 = vm_kernel_page_size;
    }
  }
  while (*((void *)&v19 + 1) + 2 * v14 <= 0xFFFFFFFF
       && (mvm_reclaim_mark_used(v20, v19, DWORD2(v19), v25[4098]._os_unfair_lock_opaque) & 1) == 0);
  mach_vm_size_t v16 = 0;
  mach_vm_address_t v15 = 0;
  if (large_entry_grow_and_insert_no_lock((uint64_t)v25, v19, *((uint64_t *)&v19 + 1), &v15))
  {
    char v21 = 1;
    *(void *)&v25[5108]._os_unfair_lock_opaque -= *((void *)&v19 + 1);
    if (v25[5116]._os_unfair_lock_opaque && *(void *)&v25[5108]._os_unfair_lock_opaque < 0x80000uLL) {
      v25[5116]._os_unfair_lock_opaque = 0;
    }
    int v28 = v25;
    uint64_t v44 = v25 + 4704;
    os_unfair_lock_t v50 = v25 + 4704;
    int v49 = 0;
    uint64_t v51 = 3;
    uint64_t v52 = 3;
    unint64_t v53 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    int v49 = *(void *)(v53 + 24);
    int v48 = 0;
    int v47 = v49;
    int v46 = 0;
    int v11 = v49;
    int v12 = v49;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)&v25[4704], (unsigned int *)&v12, 0, memory_order_release, memory_order_relaxed);
    if (v12 != v11) {
      int v47 = v12;
    }
    BOOL v45 = v12 == v11;
    if (v12 != v11) {
      os_unfair_lock_unlock(v50);
    }
    if (v16) {
      mvm_deallocate_pages(v15, v16, 0);
    }
    if (v22) {
      _platform_memset();
    }
    return v19;
  }
  else
  {
    unint64_t v29 = v25;
    unsigned int v43 = v25 + 4704;
    os_unfair_lock_t v59 = v25 + 4704;
    int v58 = 0;
    uint64_t v60 = 3;
    uint64_t v61 = 3;
    unint64_t v62 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    int v58 = *(void *)(v62 + 24);
    int v57 = 0;
    int v56 = v58;
    int v55 = 0;
    int v9 = v58;
    int v10 = v58;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)&v25[4704], (unsigned int *)&v10, 0, memory_order_release, memory_order_relaxed);
    if (v10 != v9) {
      int v56 = v10;
    }
    BOOL v54 = v10 == v9;
    if (v10 != v9) {
      os_unfair_lock_unlock(v59);
    }
    return 0;
  }
}

uint64_t large_entry_grow_and_insert_no_lock(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v14 = a1;
  uint64_t v13 = a2;
  uint64_t v12 = a3;
  int v11 = a4;
  BOOL v10 = 0;
  BOOL v10 = *(_DWORD *)(a1 + 18824) < (4 * (*(_DWORD *)(a1 + 18820) + 1));
  if (!v10 || (mach_vm_address_t v9 = large_entries_grow_no_lock(v14, v11)) != 0)
  {
    *(void *)&long long v7 = v13;
    *((void *)&v7 + 1) = v12;
    uint64_t v8 = -1;
    long long v5 = v7;
    uint64_t v6 = -1;
    large_entry_insert_no_lock(v14, &v5);
    ++*(_DWORD *)(v14 + 18820);
    *(void *)(v14 + 18840) += v12;
    char v15 = 1;
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t free_large(uint64_t a1, unint64_t a2, char a3)
{
  int v48 = (os_unfair_lock_s *)a1;
  unint64_t v47 = a2;
  char v46 = a3 & 1;
  BOOL v45 = 0;
  long long v44 = 0uLL;
  uint64_t v51 = a1;
  uint64_t v58 = a1 + 18816;
  uint64_t v73 = a1 + 18816;
  int v72 = 327680;
  unsigned int v71 = 0;
  uint64_t v74 = 3;
  uint64_t v77 = 3;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unsigned int v71 = *(void *)(StatusReg + 24);
  int v70 = 0;
  unsigned int v69 = v71;
  unsigned int v68 = v71;
  int v3 = 0;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 18816), (unsigned int *)&v3, v71, memory_order_acquire, memory_order_acquire);
  if (v3) {
    int v70 = v3;
  }
  BOOL v67 = v3 == 0;
  if (v3) {
    os_unfair_lock_lock_with_options();
  }
  BOOL v45 = (uint64_t *)large_entry_for_pointer_no_lock((uint64_t)v48, v47);
  if (v45)
  {
    if ((large_cache_enabled & 1) != 0 && (unint64_t)v45[1] <= *(void *)&v48[5100]._os_unfair_lock_opaque)
    {
      signed int os_unfair_lock_opaque = 0;
      signed int os_unfair_lock_opaque = v48[4713]._os_unfair_lock_opaque;
      uint32_t v42 = 0;
      uint32_t v42 = v48[4712]._os_unfair_lock_opaque;
      address[0] = 0;
      address[1] = 0;
      uint64_t v41 = 0;
      *(_OWORD *)mach_vm_address_t address = *(_OWORD *)v45;
      uint64_t v41 = v45[2];
      int v39 = 1;
      while (1)
      {
        while (1)
        {
          uint64_t v38 = 0;
          uint64_t v38 = *(void *)&v48[6 * os_unfair_lock_opaque + 4714]._os_unfair_lock_opaque;
          uint64_t v37 = 0;
          uint64_t v37 = *(void *)&v48[6 * os_unfair_lock_opaque + 4716]._os_unfair_lock_opaque;
          uint64_t v36 = 0;
          uint64_t v36 = *(void *)&v48[6 * os_unfair_lock_opaque + 4718]._os_unfair_lock_opaque;
          vm_size_t v28 = vm_kernel_page_size <= vm_page_size ? vm_page_size : vm_kernel_page_size;
          if (v37 + 2 * v28 > 0xFFFFFFFF || (mvm_reclaim_is_available() & 1) != 0) {
            break;
          }
          signed int os_unfair_lock_opaque = remove_from_death_row_no_lock(v48, os_unfair_lock_opaque, 0);
          uint32_t v42 = v48[4712]._os_unfair_lock_opaque;
          if (os_unfair_lock_opaque == -1) {
            goto LABEL_32;
          }
        }
        if (v38 == *v45) {
          break;
        }
        if (os_unfair_lock_opaque == v42) {
          goto LABEL_32;
        }
        if (os_unfair_lock_opaque) {
          --os_unfair_lock_opaque;
        }
        else {
          signed int os_unfair_lock_opaque = v48[5098]._os_unfair_lock_opaque - 1;
        }
      }
      if (vm_kernel_page_size <= vm_page_size) {
        vm_size_t v27 = vm_page_size;
      }
      else {
        vm_size_t v27 = vm_kernel_page_size;
      }
      if (v37 + 2 * v27 > 0xFFFFFFFF)
      {
LABEL_23:
        malloc_zone_error(v48[4098]._os_unfair_lock_opaque, 1, (uint64_t)"pointer %p being freed already on death-row\n");
        int v57 = v48;
        char v80 = v48 + 4704;
        os_unfair_lock_t v135 = v48 + 4704;
        int v134 = 0;
        uint64_t v136 = 3;
        uint64_t v137 = 3;
        int v134 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
        int v133 = 0;
        int v132 = v134;
        int v131 = 0;
        int v4 = v134;
        int v5 = v134;
        atomic_compare_exchange_strong_explicit((atomic_uint *volatile)&v48[4704], (unsigned int *)&v5, 0, memory_order_release, memory_order_relaxed);
        if (v5 != v4) {
          int v132 = v5;
        }
        BOOL v130 = v5 == v134;
        if (v5 != v134) {
          os_unfair_lock_unlock(v135);
        }
        char v49 = 1;
        return v49 & 1;
      }
      if (mvm_reclaim_mark_used(v36, v38, v37, v48[4098]._os_unfair_lock_opaque))
      {
        *(void *)&v48[6 * os_unfair_lock_opaque + 4718]._signed int os_unfair_lock_opaque = mvm_reclaim_mark_free(v38, v37, v48[4098]._os_unfair_lock_opaque);
        uint64_t v36 = *(void *)&v48[6 * os_unfair_lock_opaque + 4718]._os_unfair_lock_opaque;
        goto LABEL_23;
      }
LABEL_32:
      *(void *)&long long v35 = large_entry_free_no_lock((uint64_t)v48, v45);
      *((void *)&v35 + 1) = v6;
      long long v44 = v35;
      BOOL v45 = 0;
      int v56 = v48;
      unint64_t v81 = v48 + 4704;
      os_unfair_lock_t v126 = v48 + 4704;
      int v125 = 0;
      uint64_t v127 = 3;
      uint64_t v128 = 3;
      unint64_t v129 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      int v125 = *(void *)(v129 + 24);
      int v124 = 0;
      int v123 = v125;
      int v122 = 0;
      int v7 = v125;
      int v8 = v125;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)&v48[4704], (unsigned int *)&v8, 0, memory_order_release, memory_order_relaxed);
      if (v8 != v7) {
        int v123 = v8;
      }
      BOOL v121 = v8 == v125;
      if (v8 != v125) {
        os_unfair_lock_unlock(v126);
      }
      if ((v48[4098]._os_unfair_lock_opaque & 0x80) != 0)
      {
        int state = 0;
        if (vm_purgable_control(mach_task_self_, address[0], 0, &state))
        {
          malloc_report(3, (uint64_t)"*** can't vm_purgable_control(..., VM_PURGABLE_SET_STATE) for large freed block at %p\n");
          int v39 = 0;
        }
      }
      if (v48[5102]._os_unfair_lock_opaque && mprotect((void *)address[0], address[1], 3))
      {
        malloc_report(3, (uint64_t)"*** can't reset protection for large freed block at %p\n");
        int v39 = 0;
      }
      BOOL v9 = v39 == 0;
      if (v39)
      {
        if ((v48[4098]._os_unfair_lock_opaque & 0x20) != 0) {
          _platform_memset();
        }
        if (vm_kernel_page_size <= vm_page_size) {
          vm_size_t v26 = vm_page_size;
        }
        else {
          vm_size_t v26 = vm_kernel_page_size;
        }
        if (address[1] + 2 * v26 > 0xFFFFFFFF) {
          int v39 = 0;
        }
        uint64_t v41 = mvm_reclaim_mark_free(address[0], address[1], v48[4098]._os_unfair_lock_opaque);
      }
      os_unfair_lock_t v50 = v48;
      os_unfair_lock_t v59 = v48 + 4704;
      int v66 = (atomic_uint *)&v48[4704];
      int v65 = 327680;
      char v10 = !v9;
      if ((v10 & 1) == 0) {
        goto LABEL_58;
      }
      unsigned int v64 = 0;
      uint64_t v75 = 3;
      uint64_t v76 = 3;
      unint64_t v79 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      unsigned int v64 = *(void *)(v79 + 24);
      int v63 = 0;
      unsigned int v62 = v64;
      unsigned int v61 = v64;
      int v11 = 0;
      atomic_compare_exchange_strong_explicit(v66, (unsigned int *)&v11, v64, memory_order_acquire, memory_order_acquire);
      if (v11) {
        int v63 = v11;
      }
      BOOL v60 = v11 == 0;
      if (v11) {
LABEL_58:
      }
        os_unfair_lock_lock_with_options();
      --v48[4705]._os_unfair_lock_opaque;
      *(void *)&v48[4710]._os_unfair_lock_opaque -= address[1];
      if (v39)
      {
        uint32_t v33 = v48[4713]._os_unfair_lock_opaque;
        uint64_t v30 = 0;
        if (v33 != v48[4712]._os_unfair_lock_opaque || *(void *)&v48[6 * v33 + 4714]._os_unfair_lock_opaque)
        {
          if (v33 == v48[5098]._os_unfair_lock_opaque - 1) {
            uint32_t v33 = 0;
          }
          else {
            ++v33;
          }
          if (v33 == v48[4712]._os_unfair_lock_opaque)
          {
            mach_vm_address_t v32 = *(void *)&v48[6 * v33 + 4714]._os_unfair_lock_opaque;
            mach_vm_size_t v31 = *(void *)&v48[6 * v33 + 4716]._os_unfair_lock_opaque;
            *(void *)&v48[5108]._os_unfair_lock_opaque -= v31;
            uint64_t v30 = *(void *)&v48[6 * v33 + 4718]._os_unfair_lock_opaque;
          }
          else
          {
            mach_vm_address_t v32 = 0;
            mach_vm_size_t v31 = 0;
          }
        }
        else
        {
          mach_vm_address_t v32 = 0;
          mach_vm_size_t v31 = 0;
        }
        *(void *)&v48[5108]._os_unfair_lock_opaque += address[1];
        if (!v48[5116]._os_unfair_lock_opaque && *(void *)&v48[5108]._os_unfair_lock_opaque > 0x100000uLL) {
          v48[5116]._signed int os_unfair_lock_opaque = 1;
        }
        uint64_t v12 = &v48[6 * v33 + 4714];
        *(_OWORD *)&v12->_signed int os_unfair_lock_opaque = *(_OWORD *)address;
        *(void *)&v12[4]._signed int os_unfair_lock_opaque = v41;
        v48[4713]._signed int os_unfair_lock_opaque = v33;
        if (v32)
        {
          if (v48[4712]._os_unfair_lock_opaque == v48[5098]._os_unfair_lock_opaque - 1) {
            v48[4712]._signed int os_unfair_lock_opaque = 0;
          }
          else {
            ++v48[4712]._os_unfair_lock_opaque;
          }
          BOOL v54 = v48;
          mach_vm_size_t v83 = v48 + 4704;
          os_unfair_lock_t v108 = v48 + 4704;
          int v107 = 0;
          uint64_t v109 = 3;
          uint64_t v110 = 3;
          unint64_t v111 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
          int v107 = *(void *)(v111 + 24);
          int v106 = 0;
          int v105 = v107;
          int v104 = 0;
          int v15 = v107;
          int v16 = v107;
          atomic_compare_exchange_strong_explicit((atomic_uint *volatile)&v48[4704], (unsigned int *)&v16, 0, memory_order_release, memory_order_relaxed);
          if (v16 != v15) {
            int v105 = v16;
          }
          BOOL v103 = v16 == v15;
          if (v16 != v15) {
            os_unfair_lock_unlock(v108);
          }
          if (vm_kernel_page_size <= vm_page_size) {
            vm_size_t v25 = vm_page_size;
          }
          else {
            vm_size_t v25 = vm_kernel_page_size;
          }
          if (v31 + 2 * v25 <= 0xFFFFFFFF
            && (mvm_reclaim_mark_used(v30, v32, v31, v48[4098]._os_unfair_lock_opaque) & 1) != 0)
          {
            mvm_deallocate_pages(v32, v31, v48[4098]._os_unfair_lock_opaque);
          }
          char v49 = 1;
        }
        else
        {
          int v55 = v48;
          mach_vm_address_t v82 = v48 + 4704;
          os_unfair_lock_t v117 = v48 + 4704;
          int v116 = 0;
          uint64_t v118 = 3;
          uint64_t v119 = 3;
          unint64_t v120 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
          int v116 = *(void *)(v120 + 24);
          int v115 = 0;
          int v114 = v116;
          int v113 = 0;
          int v13 = v116;
          int v14 = v116;
          atomic_compare_exchange_strong_explicit((atomic_uint *volatile)&v48[4704], (unsigned int *)&v14, 0, memory_order_release, memory_order_relaxed);
          if (v14 != v13) {
            int v114 = v14;
          }
          BOOL v112 = v14 == v13;
          if (v14 != v13) {
            os_unfair_lock_unlock(v117);
          }
          char v49 = 1;
        }
        return v49 & 1;
      }
    }
    if (!(void)v44)
    {
      --v48[4705]._os_unfair_lock_opaque;
      *(void *)&v48[4710]._os_unfair_lock_opaque -= v45[1];
      *(void *)&long long v29 = large_entry_free_no_lock((uint64_t)v48, v45);
      *((void *)&v29 + 1) = v17;
      long long v44 = v29;
    }
    uint64_t v52 = v48;
    mach_vm_address_t v85 = v48 + 4704;
    os_unfair_lock_t v91 = v48 + 4704;
    int v90 = 0;
    uint64_t v92 = 3;
    uint64_t v93 = 3;
    unint64_t v94 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    int v90 = *(void *)(v94 + 24);
    int v89 = 0;
    int v88 = v90;
    int v87 = 0;
    int v20 = v90;
    int v21 = v90;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)&v48[4704], (unsigned int *)&v21, 0, memory_order_release, memory_order_relaxed);
    int v24 = v21;
    BOOL v22 = v21 == v20;
    if (!v22) {
      int v88 = v24;
    }
    BOOL v86 = v22;
    if (!v22) {
      os_unfair_lock_unlock(v91);
    }
    if ((void)v44) {
      mvm_deallocate_pages(v44, *((mach_vm_size_t *)&v44 + 1), 0);
    }
    char v49 = 1;
  }
  else
  {
    if ((v46 & 1) == 0) {
      malloc_zone_error(v48[4098]._os_unfair_lock_opaque, 1, (uint64_t)"pointer %p being freed was not allocated\n");
    }
    unint64_t v53 = v48;
    unint64_t v84 = v48 + 4704;
    os_unfair_lock_t lock = v48 + 4704;
    int v99 = 0;
    uint64_t v101 = 3;
    uint64_t v102 = 3;
    int v99 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    int v98 = 0;
    int v97 = v99;
    int v96 = 0;
    int v18 = v99;
    int v19 = v99;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)&v48[4704], (unsigned int *)&v19, 0, memory_order_release, memory_order_relaxed);
    if (v19 != v18) {
      int v97 = v19;
    }
    BOOL v95 = v19 == v99;
    if (v19 != v99) {
      os_unfair_lock_unlock(lock);
    }
    char v49 = 0;
  }
  return v49 & 1;
}

uint64_t remove_from_death_row_no_lock(_DWORD *a1, signed int a2, _DWORD *a3)
{
  if (a1[4712] >= a1[4713])
  {
    if (a1[4713] >= a1[4712])
    {
      if (a3 && *a3 != -1) {
        malloc_zone_error(a1[4098], 1, (uint64_t)"Invalid best: %d\n");
      }
      *(void *)&a1[6 * a2 + 4714] = 0;
      *(void *)&a1[6 * a2 + 4716] = 0;
      *(void *)&a1[6 * a2 + 4718] = -1;
      return -1;
    }
    else if (a2 > a1[4713])
    {
      for (signed int i = a2; i > a1[4712]; --i)
      {
        uint64_t v7 = (uint64_t)&a1[6 * i + 4714];
        uint64_t v8 = (uint64_t)&a1[6 * i + 4708];
        *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
        *(void *)(v7 + 16) = *(void *)(v8 + 16);
      }
      if (a2 == a1[4712]) {
        unsigned int v10 = -1;
      }
      else {
        unsigned int v10 = a2;
      }
      if (a1[4712] >= a1[5098] - 1) {
        a1[4712] = 0;
      }
      else {
        ++a1[4712];
      }
    }
    else
    {
      for (signed int j = a2; j < a1[4713]; ++j)
      {
        uint64_t v5 = (uint64_t)&a1[6 * j + 4714];
        uint64_t v6 = (uint64_t)&a1[6 * j + 4720];
        *(_OWORD *)uint64_t v5 = *(_OWORD *)v6;
        *(void *)(v5 + 16) = *(void *)(v6 + 16);
      }
      if (a3 && *a3 != -1) {
        --*a3;
      }
      if ((int)a1[4713] <= 0) {
        a1[4713] = a1[5098] - 1;
      }
      else {
        --a1[4713];
      }
      if (a2) {
        return (a2 - 1);
      }
      else {
        return (a1[5098] - 1);
      }
    }
  }
  else
  {
    for (signed int k = a2; k < a1[4713]; ++k)
    {
      uint64_t v3 = (uint64_t)&a1[6 * k + 4714];
      uint64_t v4 = (uint64_t)&a1[6 * k + 4720];
      *(_OWORD *)uint64_t v3 = *(_OWORD *)v4;
      *(void *)(v3 + 16) = *(void *)(v4 + 16);
    }
    if (a3 && *a3 != -1) {
      --*a3;
    }
    if (a2 == a1[4712]) {
      unsigned int v10 = -1;
    }
    else {
      unsigned int v10 = a2 - 1;
    }
    --a1[4713];
  }
  return v10;
}

uint64_t large_entry_free_no_lock(uint64_t a1, uint64_t *a2)
{
  if (malloc_tracing_enabled) {
    kdebug_trace();
  }
  uint64_t v6 = *a2;
  if ((*(_DWORD *)(a1 + 16392) & 3) != 0)
  {
    mvm_protect(v6, a2[1], 3, *(_DWORD *)(a1 + 16392));
    if (vm_kernel_page_size <= vm_page_size) {
      vm_size_t v3 = vm_page_size;
    }
    else {
      vm_size_t v3 = vm_kernel_page_size;
    }
    v6 -= v3;
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = -1;
  large_entries_rehash_after_entry_no_lock(a1, (uint64_t)a2);
  return v6;
}

unint64_t large_try_shrink_in_place(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  mach_vm_size_t v16 = a3 - a4;
  if (a3 == a4) {
    return a2;
  }
  int v4 = 0;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 18816), (unsigned int *)&v4, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
  if (v4) {
    os_unfair_lock_lock_with_options();
  }
  int v15 = (void *)large_entry_for_pointer_no_lock(a1, a2);
  if (v15)
  {
    *int v15 = a2;
    v15[1] = v17;
    *(void *)(a1 + 18840) -= v16;
    int v14 = *(_DWORD *)(a1 + 16392) & 3;
    int v7 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    int v8 = v7;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 18816), (unsigned int *)&v8, 0, memory_order_release, memory_order_relaxed);
    if (v8 != v7) {
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 18816));
    }
    if (v14)
    {
      int v13 = (void *)(a2 + v17);
      if (vm_kernel_page_size <= vm_page_size) {
        int v9 = mprotect(v13, vm_page_size, 0);
      }
      else {
        int v9 = mprotect(v13, vm_kernel_page_size, 0);
      }
      if (v9) {
        malloc_report(3, (uint64_t)"*** can't mvm_protect(0x0) region for new postlude guard page at %p\n");
      }
      if (vm_kernel_page_size <= vm_page_size) {
        vm_size_t v12 = vm_page_size;
      }
      else {
        vm_size_t v12 = vm_kernel_page_size;
      }
      v17 += v12;
      if (vm_kernel_page_size <= vm_page_size) {
        vm_size_t v11 = vm_page_size;
      }
      else {
        vm_size_t v11 = vm_kernel_page_size;
      }
      v16 -= v11;
    }
    mvm_deallocate_pages(a2 + v17, v16, 0);
    return a2;
  }
  malloc_zone_error(*(_DWORD *)(a1 + 16392), 1, (uint64_t)"large entry %p reallocated is not properly in table\n");
  int v5 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  int v6 = v5;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 18816), (unsigned int *)&v6, 0, memory_order_release, memory_order_relaxed);
  if (v6 != v5) {
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 18816));
  }
  return a2;
}

uint64_t large_try_realloc_in_place(uint64_t a1, unint64_t a2, uint64_t a3, vm_size_t a4)
{
  uint64_t v22 = a1;
  unint64_t v21 = a2;
  uint64_t v20 = a3;
  vm_size_t v19 = a4;
  vm_address_t address = a2 + a3;
  uint64_t v25 = a1;
  uint64_t v29 = a1 + 18816;
  int v39 = (atomic_uint *)(a1 + 18816);
  int v38 = 327680;
  if (v4) {
    char v5 = 0;
  }
  else {
    char v5 = 1;
  }
  if ((v5 & 1) == 0) {
    goto LABEL_8;
  }
  unsigned int v37 = 0;
  uint64_t v40 = 3;
  uint64_t v41 = 3;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unsigned int v37 = *(void *)(StatusReg + 24);
  int v36 = 0;
  unsigned int v35 = v37;
  unsigned int v34 = v37;
  int v6 = 0;
  atomic_compare_exchange_strong_explicit(v39, (unsigned int *)&v6, v37, memory_order_acquire, memory_order_acquire);
  if (v6) {
    int v36 = v6;
  }
  BOOL v33 = v6 == 0;
  if (v6) {
LABEL_8:
  }
    os_unfair_lock_lock_with_options();
  uint64_t v16 = large_entry_for_pointer_no_lock(v22, address);
  uint64_t v28 = v22;
  uint64_t v43 = v22 + 18816;
  os_unfair_lock_t v69 = (os_unfair_lock_t)(v22 + 18816);
  int v68 = 0;
  uint64_t v70 = 3;
  uint64_t v71 = 3;
  unint64_t v72 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  int v68 = *(void *)(v72 + 24);
  int v67 = 0;
  int v66 = v68;
  int v65 = 0;
  int v7 = v68;
  int v8 = v68;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v22 + 18816), (unsigned int *)&v8, 0, memory_order_release, memory_order_relaxed);
  if (v8 != v7) {
    int v66 = v8;
  }
  BOOL v64 = v8 == v68;
  if (v8 != v68) {
    os_unfair_lock_unlock(v69);
  }
  if (v16)
  {
    return 0;
  }
  else
  {
    if (vm_kernel_page_mask <= vm_page_mask) {
      vm_size_t v15 = vm_page_mask;
    }
    else {
      vm_size_t v15 = vm_kernel_page_mask;
    }
    if (vm_kernel_page_mask <= vm_page_mask) {
      vm_size_t v14 = vm_page_mask;
    }
    else {
      vm_size_t v14 = vm_kernel_page_mask;
    }
    vm_size_t v19 = (v19 + v15) & ~v14;
    if (vm_allocate(mach_task_self_, &address, v19 - v20, 100663296))
    {
      return 0;
    }
    else
    {
      uint64_t v24 = v22;
      uint64_t v30 = v22 + 18816;
      uint64_t v32 = v22 + 18816;
      int v31 = 327680;
      os_unfair_lock_lock_with_options();
      uint64_t v17 = (void *)large_entry_for_pointer_no_lock(v22, v21);
      if (v17)
      {
        *uint64_t v17 = v21;
        v17[1] = v19;
        *(void *)(v22 + 18840) += v19 - v20;
        uint64_t v26 = v22;
        uint64_t v45 = v22 + 18816;
        os_unfair_lock_t v51 = (os_unfair_lock_t)(v22 + 18816);
        int v50 = 0;
        uint64_t v52 = 3;
        uint64_t v53 = 3;
        unint64_t v54 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
        int v50 = *(void *)(v54 + 24);
        int v49 = 0;
        int v48 = v50;
        int v47 = 0;
        int v11 = v50;
        int v12 = v50;
        atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v22 + 18816), (unsigned int *)&v12, 0, memory_order_release, memory_order_relaxed);
        if (v12 != v11) {
          int v48 = v12;
        }
        BOOL v46 = v12 == v11;
        if (v12 != v11) {
          os_unfair_lock_unlock(v51);
        }
        return 1;
      }
      else
      {
        malloc_zone_error(*(_DWORD *)(v22 + 16392), 1, (uint64_t)"large entry %p reallocated is not properly in table\n");
        uint64_t v27 = v22;
        uint64_t v44 = v22 + 18816;
        os_unfair_lock_t v60 = (os_unfair_lock_t)(v22 + 18816);
        int v59 = 0;
        uint64_t v61 = 3;
        uint64_t v62 = 3;
        unint64_t v63 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
        int v59 = *(void *)(v63 + 24);
        int v58 = 0;
        int v57 = v59;
        int v56 = 0;
        int v9 = v59;
        int v10 = v59;
        atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v22 + 18816), (unsigned int *)&v10, 0, memory_order_release, memory_order_relaxed);
        if (v10 != v9) {
          int v57 = v10;
        }
        BOOL v55 = v10 == v9;
        if (v10 != v9) {
          os_unfair_lock_unlock(v60);
        }
        return 0;
      }
    }
  }
}

BOOL large_claimed_address(uint64_t a1, uint64_t a2)
{
  if (v2) {
    char v3 = 0;
  }
  else {
    char v3 = 1;
  }
  if ((v3 & 1) == 0
    || (int v4 = 0,
        atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 18816), (unsigned int *)&v4, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire), v4))
  {
    os_unfair_lock_lock_with_options();
  }
  BOOL v8 = large_entry_containing_pointer_no_lock(a1, a2 & ~(vm_page_size - 1)) != 0;
  int v5 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  int v6 = v5;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 18816), (unsigned int *)&v6, 0, memory_order_release, memory_order_relaxed);
  if (v6 != v5) {
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 18816));
  }
  return v8;
}

uint64_t large_entry_containing_pointer_no_lock(uint64_t a1, unint64_t a2)
{
  unsigned int v6 = *(_DWORD *)(a1 + 18824);
  if (!v6) {
    return 0;
  }
  unsigned int v5 = (a2 >> vm_page_shift) % v6;
  do
  {
    int v4 = (unint64_t *)(*(void *)(a1 + 18832) + 24 * v5);
    if (*v4 == a2) {
      return *(void *)(a1 + 18832) + 24 * v5;
    }
    if (a2 >= *v4 && a2 < *v4 + v4[1]) {
      return *(void *)(a1 + 18832) + 24 * v5;
    }
    if (v5) {
      unsigned int v3 = v5 - 1;
    }
    else {
      unsigned int v3 = v6 - 1;
    }
    unsigned int v5 = v3;
  }
  while (v3 != (a2 >> vm_page_shift) % v6);
  return 0;
}

void large_destroy_cache(uint64_t a1)
{
  if (v1) {
    char v2 = 0;
  }
  else {
    char v2 = 1;
  }
  if ((v2 & 1) == 0
    || (int v3 = 0,
        atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 18816), (unsigned int *)&v3, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire), v3))
  {
    os_unfair_lock_lock_with_options();
  }
  *(_DWORD *)(a1 + 20464) = 0;
  int v7 = *(_DWORD *)(a1 + 18848);
  int v6 = *(_DWORD *)(a1 + 18852);
  _platform_memmove();
  large_clear_cache_locked(a1);
  int v4 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  int v5 = v4;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 18816), (unsigned int *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 != v4) {
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 18816));
  }
  while (v7 != v6)
  {
    large_deallocate_cache_entry(a1, (uint64_t)&v9[3 * v7++]);
    if (v7 == *(_DWORD *)(a1 + 20392)) {
      int v7 = 0;
    }
  }
  if (v9[3 * v7] && v9[3 * v7 + 1]) {
    large_deallocate_cache_entry(a1, (uint64_t)&v9[3 * v7]);
  }
}

uint64_t large_clear_cache_locked(uint64_t result)
{
  *(_DWORD *)(result + 18852) = 0;
  *(_DWORD *)(result + 18848) = 0;
  *(void *)(result + 18856) = 0;
  *(void *)(result + 18864) = 0;
  *(void *)(result + 20432) = 0;
  *(void *)(result + 20416) = 0;
  return result;
}

void large_deallocate_cache_entry(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 8) > 0xFFFFFFFFuLL
    || (mvm_reclaim_mark_used(*(void *)(a2 + 16), *(void *)a2, *(void *)(a2 + 8), *(_DWORD *)(a1 + 16392)) & 1) != 0)
  {
    mvm_deallocate_pages(*(void *)a2, *(void *)(a2 + 8), *(_DWORD *)(a1 + 16392));
  }
}

uint64_t large_malloc_best_fit_in_cache@<X0>(_DWORD *a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, void *a4@<X8>)
{
  vm_size_t v15 = a1;
  unint64_t v14 = a2;
  char v13 = a3;
  signed int v12 = -1;
  signed int v11 = a1[4713];
  int v10 = a1[4712];
  unint64_t v9 = -1;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t result = _platform_memset();
  while (1)
  {
    while (1)
    {
      unint64_t v8 = *(void *)&v15[6 * v11 + 4716];
      if (v13 && (*(void *)&v15[6 * v11 + 4714] & ((1 << v13) - 1)) != 0 || v14 != v8 && (v14 >= v8 || v8 >= v9)) {
        goto LABEL_15;
      }
      vm_size_t v6 = vm_kernel_page_size <= vm_page_size ? vm_page_size : vm_kernel_page_size;
      if (v9 + 2 * v6 > 0xFFFFFFFF) {
        break;
      }
      uint64_t result = mvm_reclaim_is_available();
      if (result) {
        break;
      }
      uint64_t result = remove_from_death_row_no_lock(v15, v11, &v12);
      signed int v11 = result;
      int v10 = v15[4712];
      if (result == -1) {
        goto LABEL_19;
      }
    }
    signed int v12 = v11;
    unint64_t v9 = v8;
    if (v14 == v8) {
      break;
    }
LABEL_15:
    if (v11 == v10) {
      break;
    }
    if (v11) {
      --v11;
    }
    else {
      signed int v11 = v15[5098] - 1;
    }
  }
LABEL_19:
  if (v12 != -1 && v9 - v14 < v14)
  {
    int v5 = &v15[6 * v12 + 4714];
    *(_OWORD *)a4 = *(_OWORD *)v5;
    a4[2] = *((void *)v5 + 2);
    return remove_from_death_row_no_lock(v15, v12, 0);
  }
  return result;
}

mach_vm_address_t large_entries_grow_no_lock(uint64_t a1, void *a2)
{
  uint64_t v17 = a1;
  uint64_t v16 = a2;
  unsigned int v15 = 0;
  unsigned int v15 = *(_DWORD *)(a1 + 18824);
  uint64_t v14 = 0;
  uint64_t v14 = *(void *)(a1 + 18832);
  unsigned int v13 = 0;
  if (v15)
  {
    unsigned int v6 = 2 * v15 + 1;
  }
  else
  {
    if (vm_kernel_page_size <= vm_page_size) {
      vm_size_t v5 = vm_page_size;
    }
    else {
      vm_size_t v5 = vm_kernel_page_size;
    }
    unsigned int v6 = v5 / 0x18 - 1;
  }
  unsigned int v13 = v6;
  mach_vm_address_t v12 = large_entries_alloc_no_lock(v17, v6);
  unsigned int v11 = v15;
  long long v9 = 0uLL;
  uint64_t v10 = 0;
  if (!v12) {
    return 0;
  }
  *(_DWORD *)(v17 + 18824) = v13;
  *(void *)(v17 + 18832) = v12;
  while (v11--)
  {
    int v3 = (long long *)(v14 + 24 * v11);
    long long v9 = *v3;
    uint64_t v10 = *((void *)v3 + 2);
    if ((void)v9)
    {
      long long v7 = v9;
      uint64_t v8 = v10;
      large_entry_insert_no_lock(v17, &v7);
    }
  }
  if (v14)
  {
    large_entries_free_no_lock(v17, v14, v15, v16);
  }
  else
  {
    *uint64_t v16 = 0;
    v16[1] = 0;
  }
  return v12;
}

uint64_t large_entry_insert_no_lock(uint64_t result, void *a2)
{
  unsigned int v4 = *(_DWORD *)(result + 18824);
  unsigned int v3 = (*a2 >> vm_page_shift) % (unint64_t)v4;
  while (1)
  {
    char v2 = (void *)(*(void *)(result + 18832) + 24 * v3);
    if (!*v2) {
      break;
    }
    if (++v3 == v4) {
      unsigned int v3 = 0;
    }
    if (v3 == (*a2 >> vm_page_shift) % (unint64_t)v4) {
      return result;
    }
  }
  *(_OWORD *)char v2 = *(_OWORD *)a2;
  v2[2] = a2[2];
  return result;
}

mach_vm_address_t large_entries_alloc_no_lock(uint64_t a1, unsigned int a2)
{
  if ((*(_DWORD *)(a1 + 16392) & 0x20000000) != 0) {
    int v5 = *(_DWORD *)(a1 + 16392) & 0x20000000 | 0x40000000;
  }
  else {
    int v5 = *(_DWORD *)(a1 + 16392) & 0x60000000;
  }
  if (vm_kernel_page_mask <= vm_page_mask) {
    vm_size_t v4 = vm_page_mask;
  }
  else {
    vm_size_t v4 = vm_kernel_page_mask;
  }
  if (vm_kernel_page_mask <= vm_page_mask) {
    vm_size_t v3 = vm_page_mask;
  }
  else {
    vm_size_t v3 = vm_kernel_page_mask;
  }
  return mvm_allocate_pages((24 * a2 + v4) & ~v3, 0, v5, 3);
}

uint64_t large_entries_rehash_after_entry_no_lock(uint64_t result, uint64_t a2)
{
  uint64_t v11 = result;
  uint64_t v10 = a2;
  int v9 = 0;
  int v9 = *(_DWORD *)(result + 18824);
  uint64_t v8 = 0;
  uint64_t v8 = (a2 - *(void *)(result + 18832)) / 24;
  uint64_t v7 = v8;
  long long v5 = 0uLL;
  uint64_t v6 = 0;
  do
  {
    if (++v7 == v9) {
      uint64_t v7 = 0;
    }
    uint64_t v2 = *(void *)(v11 + 18832) + 24 * v7;
    long long v5 = *(_OWORD *)v2;
    uint64_t v6 = *(void *)(v2 + 16);
    if (!(void)v5) {
      break;
    }
    *(void *)(*(void *)(v11 + 18832) + 24 * v7) = 0;
    *(void *)(*(void *)(v11 + 18832) + 24 * v7 + 8) = 0;
    *(void *)(*(void *)(v11 + 18832) + 24 * v7 + 16) = -1;
    long long v3 = v5;
    uint64_t v4 = v6;
    uint64_t result = large_entry_insert_no_lock(v11, &v3);
  }
  while (v7 != v8);
  return result;
}

void szone_free(uint64_t a1, unint64_t a2)
{
}

void _szone_free(uint64_t a1, unint64_t a2, char a3)
{
  char v6 = a3 & 1;
  if (a2)
  {
    if ((a2 & 0xF) != 0)
    {
      if ((a3 & 1) == 0)
      {
        malloc_zone_error(*(_DWORD *)(a1 + 16392), 1, (uint64_t)"Non-aligned pointer %p being freed\n");
        return;
      }
      goto LABEL_25;
    }
    uint64_t v5 = tiny_region_for_ptr_no_lock(a1 + 16512, a2);
    if (v5)
    {
      if ((unsigned __int16)((a2 - ((a2 & 0xFFFFFFFFFFF00000) + 16512)) >> 4) < 0xFBF8uLL) {
        free_tiny(a1 + 16512, a2, v5, 0, 0);
      }
      else {
        malloc_zone_error(*(_DWORD *)(a1 + 16392), 1, (uint64_t)"Pointer %p to metadata being freed\n");
      }
    }
    else
    {
      if ((a2 & 0x1FF) != 0)
      {
        if ((v6 & 1) == 0)
        {
          malloc_zone_error(*(_DWORD *)(a1 + 16392), 1, (uint64_t)"Non-aligned pointer %p being freed (2)\n");
          return;
        }
        goto LABEL_25;
      }
      uint64_t v4 = small_region_for_ptr_no_lock(a1 + 17280, a2);
      if (v4)
      {
        if ((((a2 - ((a2 & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF) < 0x3FBF) {
          free_small(a1 + 17280, a2, v4, 0);
        }
        else {
          malloc_zone_error(*(_DWORD *)(a1 + 16392), 1, (uint64_t)"Pointer %p to metadata being freed (2)\n");
        }
      }
      else
      {
        if ((a2 & (vm_page_size - 1)) != 0)
        {
          if ((v6 & 1) == 0)
          {
            malloc_zone_error(*(_DWORD *)(a1 + 16392), 1, (uint64_t)"non-page-aligned, non-allocated pointer %p being freed\n");
            return;
          }
          goto LABEL_25;
        }
        char v3 = free_large(a1, a2, v6 & 1) & 1;
        if ((v6 & 1) != 0 && (v3 & 1) == 0) {
LABEL_25:
        }
          find_zone_and_free((void *)a2, 1);
      }
    }
  }
}

void szone_free_definite_size(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a2)
  {
    if ((a2 & 0xF) != 0)
    {
      malloc_zone_error(*(_DWORD *)(a1 + 16392), 1, (uint64_t)"Non-aligned pointer %p being freed\n");
    }
    else if (a3 > 0x3F0)
    {
      if ((a2 & 0x1FF) != 0)
      {
        malloc_zone_error(*(_DWORD *)(a1 + 16392), 1, (uint64_t)"Non-aligned pointer %p being freed (2)\n");
      }
      else if (a3 > 0x3C00)
      {
        if ((a2 & (vm_page_size - 1)) != 0) {
          malloc_zone_error(*(_DWORD *)(a1 + 16392), 1, (uint64_t)"non-page-aligned, non-allocated pointer %p being freed\n");
        }
        else {
          free_large(a1, a2, 0);
        }
      }
      else if ((((a2 - ((a2 & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF) < 0x3FBF)
      {
        free_small(a1 + 17280, a2, a2 & 0xFFFFFFFFFF800000, a3);
      }
      else
      {
        malloc_zone_error(*(_DWORD *)(a1 + 16392), 1, (uint64_t)"Pointer %p to metadata being freed (2)\n");
      }
    }
    else if ((unsigned __int16)((a2 - ((a2 & 0xFFFFFFFFFFF00000) + 16512)) >> 4) < 0xFBF8uLL)
    {
      free_tiny(a1 + 16512, a2, a2 & 0xFFFFFFFFFFF00000, a3, 0);
    }
    else
    {
      malloc_zone_error(*(_DWORD *)(a1 + 16392), 1, (uint64_t)"Pointer %p to metadata being freed\n");
    }
  }
}

unint64_t szone_malloc_should_clear(uint64_t a1, unint64_t a2, int a3)
{
  if (a2 > 0x3F0)
  {
    if (a2 > 0x3C00)
    {
      if (vm_kernel_page_mask <= vm_page_mask) {
        vm_size_t v7 = vm_page_mask;
      }
      else {
        vm_size_t v7 = vm_kernel_page_mask;
      }
      if (vm_kernel_page_mask <= vm_page_mask) {
        vm_size_t v6 = vm_page_mask;
      }
      else {
        vm_size_t v6 = vm_kernel_page_mask;
      }
      unint64_t v5 = (a2 + v7) & ~v6;
      if (vm_kernel_page_shift <= vm_page_shift) {
        char v4 = vm_page_shift;
      }
      else {
        char v4 = vm_kernel_page_shift;
      }
      if (v5 >> v4) {
        unint64_t should_clear = large_malloc(a1, v5 >> v4, 0, a3);
      }
      else {
        unint64_t should_clear = 0;
      }
    }
    else
    {
      unsigned __int16 v9 = (a2 + 511) >> 9;
      if (!v9) {
        unsigned __int16 v9 = 1;
      }
      unint64_t should_clear = small_malloc_should_clear(a1 + 17280, v9, a3);
    }
  }
  else
  {
    unsigned __int16 v8 = (a2 + 15) >> 4;
    if (!v8) {
      unsigned __int16 v8 = 1;
    }
    unint64_t should_clear = (unint64_t)tiny_malloc_should_clear(a1 + 16512, v8, a3);
  }
  if ((*(_DWORD *)(a1 + 16392) & 0x20) != 0 && should_clear && !a3 && a2)
  {
    szone_size(a1, should_clear);
    _platform_memset();
  }
  if (!should_clear) {
    malloc_set_errno_fast(1, 12);
  }
  return should_clear;
}

uint64_t szone_size(uint64_t a1, unint64_t a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 & 0xF) != 0) {
    return 0;
  }
  uint64_t v3 = tiny_size(a1 + 16512, a2);
  if (v3) {
    return v3;
  }
  if ((a2 & 0x1FF) != 0) {
    return 0;
  }
  uint64_t v4 = small_size(a1 + 17280, a2);
  if (v4) {
    return v4;
  }
  if ((a2 & (vm_page_size - 1)) != 0) {
    return 0;
  }
  return szone_size_try_large(a1, a2);
}

unint64_t szone_malloc(uint64_t a1, unint64_t a2)
{
  return szone_malloc_should_clear(a1, a2, 0);
}

unint64_t szone_calloc(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = a1;
  v4[2] = a2;
  v4[1] = a3;
  v4[0] = 0;
  unint64_t v11 = a2;
  unint64_t v10 = a3;
  uint64_t v9 = 0;
  unsigned __int16 v8 = v4;
  unint64_t v7 = a3;
  if (a2 == 1
    || (unint64_t v7 = v11 * v10, v13 = (v11 * (unsigned __int128)v10) >> 64 != 0, is_mul_ok(v11, v10))
    && v7 <= malloc_absolute_max_size)
  {
    *unsigned __int16 v8 = v7;
    int v12 = 0;
  }
  else
  {
    malloc_set_errno_fast(1, 12);
    int v12 = -1;
  }
  if (v12) {
    return 0;
  }
  else {
    return szone_malloc_should_clear(v5, v4[0], 1);
  }
}

uint64_t szone_valloc(uint64_t a1, unint64_t a2)
{
  if (a2 <= 0x800000) {
    return szone_memalign(a1, vm_page_size, a2);
  }
  if (vm_kernel_page_mask <= vm_page_mask) {
    vm_size_t v5 = vm_page_mask;
  }
  else {
    vm_size_t v5 = vm_kernel_page_mask;
  }
  if (vm_kernel_page_mask <= vm_page_mask) {
    vm_size_t v4 = vm_page_mask;
  }
  else {
    vm_size_t v4 = vm_kernel_page_mask;
  }
  if (vm_kernel_page_shift <= vm_page_shift) {
    char v3 = vm_page_shift;
  }
  else {
    char v3 = vm_kernel_page_shift;
  }
  return large_malloc(a1, ((a2 + v5) & ~v4) >> v3, 0, 0);
}

uint64_t szone_memalign(uint64_t a1, vm_size_t a2, unint64_t a3)
{
  unint64_t v12 = a3;
  if (!a3) {
    unint64_t v12 = 1;
  }
  if (v12 + a2 < v12) {
    return 0;
  }
  unint64_t v11 = v12 + a2 - 1;
  if (a2 <= 0x10) {
    return szone_malloc(a1, v12);
  }
  if (v11 <= 0x3F0) {
    return tiny_memalign(a1, a2, v12, v11);
  }
  if (v12 > 0x3F0 && a2 <= 0x200) {
    return szone_malloc(a1, v12);
  }
  if (v12 <= 0x3F0)
  {
    unint64_t v12 = 1024;
    unint64_t v11 = a2 + 1023;
  }
  if (v11 <= 0x3C00) {
    return small_memalign(a1, a2, v12, v11);
  }
  if (v12 > 0x3C00 && a2 <= vm_page_size) {
    return szone_malloc(a1, v12);
  }
  if (v12 >= 0x3C01) {
    uint64_t v9 = v12;
  }
  else {
    uint64_t v9 = 15361;
  }
  if (vm_kernel_page_mask <= vm_page_mask) {
    vm_size_t v8 = vm_page_mask;
  }
  else {
    vm_size_t v8 = vm_kernel_page_mask;
  }
  if (vm_kernel_page_mask <= vm_page_mask) {
    vm_size_t v7 = vm_page_mask;
  }
  else {
    vm_size_t v7 = vm_kernel_page_mask;
  }
  vm_size_t v6 = (v9 + v8) & ~v7;
  if (vm_kernel_page_shift <= vm_page_shift) {
    char v5 = vm_page_shift;
  }
  else {
    char v5 = vm_kernel_page_shift;
  }
  uint64_t v10 = v6 >> v5;
  if (!(v6 >> v5)) {
    return 0;
  }
  if (vm_page_shift <= (int)__clz(__rbit64(a2))) {
    return large_malloc(a1, v10, __clz(__rbit64(a2)), 0);
  }
  else {
    return large_malloc(a1, v10, vm_page_shift, 0);
  }
}

uint64_t szone_size_try_large(uint64_t a1, unint64_t a2)
{
  uint64_t v9 = 0;
  if (v2) {
    char v3 = 0;
  }
  else {
    char v3 = 1;
  }
  if ((v3 & 1) == 0
    || (int v4 = 0,
        atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 18816), (unsigned int *)&v4, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire), v4))
  {
    os_unfair_lock_lock_with_options();
  }
  uint64_t v8 = large_entry_for_pointer_no_lock(a1, a2);
  if (v8) {
    uint64_t v9 = *(void *)(v8 + 8);
  }
  int v5 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  int v6 = v5;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 18816), (unsigned int *)&v6, 0, memory_order_release, memory_order_relaxed);
  if (v6 != v5) {
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 18816));
  }
  return v9;
}

uint64_t szone_realloc(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (!a2) {
    return szone_malloc(a1, a3);
  }
  if (!a3)
  {
    szone_free(a1, a2);
    return szone_malloc(a1, 1uLL);
  }
  unint64_t v6 = szone_size(a1, a2);
  if (!v6)
  {
    malloc_zone_error(*(_DWORD *)(a1 + 16392), 1, (uint64_t)"pointer %p being reallocated was not allocated\n");
    return 0;
  }
  unint64_t v5 = szone_good_size(a1, a3);
  if (v5 == v6) {
    return a2;
  }
  if (v5 <= 0x3F0)
  {
    if (v6 <= 0x3F0)
    {
      if (v5 <= v6 >> 1) {
        return tiny_try_shrink_in_place(a1 + 16512, a2, v6, v5);
      }
      if (v5 <= v6)
      {
        if ((*(_DWORD *)(a1 + 16392) & 0x20) != 0) {
          _platform_memset();
        }
        return a2;
      }
      if (tiny_try_realloc_in_place(a1 + 16512, a2, v6, v5))
      {
        if ((*(_DWORD *)(a1 + 16392) & 0x20) != 0) {
          _platform_memset();
        }
        return a2;
      }
    }
    goto LABEL_48;
  }
  if (v5 <= 0x3C00)
  {
    if (v6 > 0x3F0 && v6 <= 0x3C00)
    {
      if (v5 <= v6 >> 1) {
        return small_try_shrink_in_place(a1 + 17280, a2, v6, v5);
      }
      if (v5 <= v6)
      {
        if ((*(_DWORD *)(a1 + 16392) & 0x20) != 0) {
          _platform_memset();
        }
        return a2;
      }
      if (small_try_realloc_in_place(a1 + 17280, a2, v6, v5))
      {
        if ((*(_DWORD *)(a1 + 16392) & 0x20) != 0) {
          _platform_memset();
        }
        return a2;
      }
    }
LABEL_48:
    if (v5 <= v6 >> 1 || v5 > v6)
    {
      unint64_t v4 = szone_malloc(a1, a3);
      if (v4)
      {
        _platform_memmove();
        szone_free(a1, a2);
        return v4;
      }
      else
      {
        return 0;
      }
    }
    else
    {
      if ((*(_DWORD *)(a1 + 16392) & 0x20) != 0) {
        _platform_memset();
      }
      return a2;
    }
  }
  if ((*(_DWORD *)(a1 + 16392) & 0x80) != 0 || v6 <= 0x3C00) {
    goto LABEL_48;
  }
  if (v5 <= v6 >> 1) {
    return large_try_shrink_in_place(a1, a2, v6, v5);
  }
  if (v5 > v6)
  {
    if (!large_try_realloc_in_place(a1, a2, v6, v5)) {
      goto LABEL_48;
    }
    if ((*(_DWORD *)(a1 + 16392) & 0x20) != 0) {
      _platform_memset();
    }
    return a2;
  }
  else
  {
    if ((*(_DWORD *)(a1 + 16392) & 0x20) != 0) {
      _platform_memset();
    }
    return a2;
  }
}

uint64_t szone_good_size(uint64_t a1, unint64_t a2)
{
  if (a2 > 0x3F0)
  {
    if (a2 > 0x3C00)
    {
      if (vm_kernel_page_mask <= vm_page_mask) {
        vm_size_t v6 = vm_page_mask;
      }
      else {
        vm_size_t v6 = vm_kernel_page_mask;
      }
      if (vm_kernel_page_mask <= vm_page_mask) {
        vm_size_t v5 = vm_page_mask;
      }
      else {
        vm_size_t v5 = vm_kernel_page_mask;
      }
      if (a2 <= ((a2 + v6) & ~v5))
      {
        if (vm_kernel_page_mask <= vm_page_mask) {
          vm_size_t v4 = vm_page_mask;
        }
        else {
          vm_size_t v4 = vm_kernel_page_mask;
        }
        if (vm_kernel_page_mask <= vm_page_mask) {
          vm_size_t v3 = vm_page_mask;
        }
        else {
          vm_size_t v3 = vm_kernel_page_mask;
        }
        return (a2 + v4) & ~v3;
      }
      else
      {
        return -1;
      }
    }
    else
    {
      unsigned __int16 v8 = (a2 + 511) >> 9;
      if (!v8) {
        unsigned __int16 v8 = 1;
      }
      return v8 << 9;
    }
  }
  else
  {
    unsigned __int16 v7 = (a2 + 15) >> 4;
    if (!v7) {
      unsigned __int16 v7 = 1;
    }
    return 16 * v7;
  }
}

uint64_t szone_batch_malloc(uint64_t a1, unint64_t a2, uint64_t *a3, unsigned int a4)
{
  if (a2 > 0x3F0) {
    return 0;
  }
  else {
    return tiny_batch_malloc(a1, a2, a3, a4);
  }
}

void szone_batch_free(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v5 = a3;
  if (a3)
  {
    tiny_batch_free(a1, a2, a3);
    while (v5--)
    {
      unint64_t v4 = *(void *)(a2 + 8 * v5);
      if (v4) {
        szone_free(a1, v4);
      }
    }
  }
}

BOOL szone_claimed_address(uint64_t a1, unint64_t a2)
{
  BOOL v3 = 1;
  if (!tiny_claimed_address(a1 + 16512, a2))
  {
    BOOL v3 = 1;
    if (!small_claimed_address(a1 + 17280, a2)) {
      return large_claimed_address(a1, a2);
    }
  }
  return v3;
}

uint64_t scalable_zone_info(uint64_t a1, uint64_t a2, int a3)
{
  return scalable_zone_info_task(mach_task_self_, (unsigned int (*)(void, void, uint64_t, uint64_t *))_malloc_default_reader_0, a1, a2, a3);
}

uint64_t scalable_zone_info_task(unsigned int a1, unsigned int (*a2)(void, void, uint64_t, uint64_t *), uint64_t a3, uint64_t a4, int a5)
{
  unsigned int v16 = a1;
  unsigned int v15 = a2;
  uint64_t v14 = a3;
  uint64_t v13 = a4;
  int v12 = a5;
  uint64_t v11 = a3;
  uint64_t v10 = 0;
  int v9 = 0;
  uint64_t v8 = 0;
  int i = 0;
  uint64_t v6 = 0;
  if (a2(a1, *(void *)(a3 + 17136), 2560, &v6))
  {
    return 0;
  }
  else
  {
    for (int i = -1; i < *(_DWORD *)(v11 + 17120); ++i)
    {
      v10 += *(void *)(v6 + 2560 * i + 2136);
      v10 += *(void *)(v6 + 2560 * i + 2128);
      v9 += *(_DWORD *)(v6 + 2560 * i + 2168);
      v8 += *(void *)(v6 + 2560 * i + 2152);
    }
    int v22 = v9;
    int v23 = v8;
    if (v15(v16, *(void *)(v11 + 17904), 2560, &v6))
    {
      return 0;
    }
    else
    {
      int v9 = 0;
      uint64_t v8 = 0;
      for (int i = -1; i < *(_DWORD *)(v11 + 17888); ++i)
      {
        v10 += *(void *)(v6 + 2560 * i + 2136);
        v10 += *(void *)(v6 + 2560 * i + 2128);
        v9 += *(_DWORD *)(v6 + 2560 * i + 2168);
        v8 += *(void *)(v6 + 2560 * i + 2152);
      }
      int v24 = v9;
      int v25 = v8;
      int v26 = *(_DWORD *)(v11 + 18820);
      uint64_t v27 = *(void *)(v11 + 18840);
      int v28 = 0;
      int v29 = *(_DWORD *)(v11 + 16392);
      int v18 = v22 + v9 + v26 + HIDWORD(v27);
      int v19 = v23 + v8 + v27;
      int v21 = ((*(void *)(v11 + 17288) - *(void *)(v11 + 17296)) << 23)
          + ((*(void *)(v11 + 16520) - *(void *)(v11 + 16528)) << 20)
          + v27;
      int v20 = v21 - v10;
      _platform_memmove();
      return 1;
    }
  }
}

uint64_t _malloc_default_reader_0(int a1, uint64_t a2, uint64_t a3, void *a4)
{
  BOOL v5 = 1;
  if (a1) {
    BOOL v5 = mach_task_is_self() != 0;
  }
  if (!v5)
  {
    __break(1u);
    JUMPOUT(0x201C4);
  }
  *a4 = a2;
  return 0;
}

uint64_t szone_pressure_relief()
{
  if (malloc_tracing_enabled) {
    kdebug_trace();
  }
  if (malloc_tracing_enabled) {
    kdebug_trace();
  }
  return 0;
}

uint64_t scalable_zone_statistics(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3)
  {
    uint64_t v4 = a3;
    char v3 = 1;
  }
  else
  {
    uint64_t v4 = 0;
    char v3 = 0;
  }
  if (v3)
  {
    return 0;
  }
  else
  {
    switch(v4)
    {
      case 0:
        uint64_t v14 = 0;
        int v13 = 0;
        uint64_t v12 = 0;
        for (int i = -1; i < *(_DWORD *)(a1 + 17120); ++i)
        {
          v14 += *(void *)(*(void *)(a1 + 17136) + 2560 * i + 2136)
               + *(void *)(*(void *)(a1 + 17136) + 2560 * i + 2128);
          v13 += *(_DWORD *)(*(void *)(a1 + 17136) + 2560 * i + 2168);
          v12 += *(void *)(*(void *)(a1 + 17136) + 2560 * i + 2152);
        }
        *(_DWORD *)a2 = v13;
        *(void *)(a2 + 8) = v12;
        *(void *)(a2 + 24) = (*(void *)(a1 + 16520) - *(void *)(a1 + 16528)) << 20;
        *(void *)(a2 + 16) = *(void *)(a2 + 24) - v14;
        unsigned int v15 = 1;
        break;
      case 1:
        uint64_t v10 = 0;
        int v9 = 0;
        uint64_t v8 = 0;
        for (int j = -1; j < *(_DWORD *)(a1 + 17888); ++j)
        {
          v10 += *(void *)(*(void *)(a1 + 17904) + 2560 * j + 2136)
               + *(void *)(*(void *)(a1 + 17904) + 2560 * j + 2128);
          v9 += *(_DWORD *)(*(void *)(a1 + 17904) + 2560 * j + 2168);
          v8 += *(void *)(*(void *)(a1 + 17904) + 2560 * j + 2152);
        }
        *(_DWORD *)a2 = v9;
        *(void *)(a2 + 8) = v8;
        *(void *)(a2 + 24) = (*(void *)(a1 + 17288) - *(void *)(a1 + 17296)) << 23;
        *(void *)(a2 + 16) = *(void *)(a2 + 24) - v10;
        unsigned int v15 = 1;
        break;
      case 2:
        *(_DWORD *)a2 = *(_DWORD *)(a1 + 18820);
        *(void *)(a2 + 8) = *(void *)(a1 + 18840);
        uint64_t v5 = *(void *)(a2 + 8);
        *(void *)(a2 + 24) = v5;
        *(void *)(a2 + 16) = v5;
        unsigned int v15 = 1;
        break;
      case 3:
        *(_DWORD *)a2 = 0;
        *(void *)(a2 + 8) = 0;
        *(void *)(a2 + 24) = 0;
        *(void *)(a2 + 16) = 0;
        unsigned int v15 = 1;
        break;
      case 4:
        *(_DWORD *)a2 = 0;
        *(void *)(a2 + 8) = 0;
        *(void *)(a2 + 24) = 0;
        *(void *)(a2 + 16) = *(void *)(a2 + 24);
        unsigned int v15 = 1;
        break;
      default:
        JUMPOUT(0);
    }
  }
  return v15;
}

uint64_t szone_ptr_in_use_enumerator(int a1, uint64_t a2, int a3, uint64_t a4, uint64_t (*a5)(int a1, uint64_t a2, uint64_t a3, uint64_t *a4), void (*a6)(void, uint64_t, uint64_t, long long *, uint64_t))
{
  int v16 = a1;
  uint64_t v15 = a2;
  int v14 = a3;
  uint64_t v13 = a4;
  uint64_t v12 = a5;
  uint64_t v11 = a6;
  uint64_t v10 = 0;
  uint64_t v12 = reader_or_in_memory_fallback_0((uint64_t)a5, a1);
  unsigned int v7 = v12(v16, v13, 20480, &v10);
  if (v7)
  {
    return v7;
  }
  else
  {
    unsigned int v8 = tiny_in_use_enumerator(v16, v15, v14, v10, (uint64_t (*)(void, unint64_t, unint64_t, uint64_t *))v12, (void (*)(void, uint64_t, uint64_t, uint64_t *, uint64_t))v11);
    if (v8)
    {
      return v8;
    }
    else
    {
      unsigned int v9 = small_in_use_enumerator(v16, v15, v14, v10, (uint64_t (*)(void, unint64_t, unint64_t, uint64_t *))v12, (void (*)(void, uint64_t, uint64_t, uint64_t *, uint64_t))v11);
      if (v9) {
        return v9;
      }
      else {
        return large_in_use_enumerator(v16, v15, v14, *(void *)(v10 + 18832), *(_DWORD *)(v10 + 18824), (uint64_t (*)(void, void, void, void))v12, v11);
      }
    }
  }
}

uint64_t szone_check(uint64_t a1)
{
  if (!(++szone_check_counter % 0x2710u)) {
    malloc_report(5, (uint64_t)"at szone_check counter=%d\n");
  }
  if (szone_check_counter >= szone_check_start)
  {
    if (szone_check_counter % szone_check_modulo) {
      return 1;
    }
    else {
      return szone_check_all(a1);
    }
  }
  else
  {
    return 1;
  }
}

uint64_t szone_print_self(char *a1, int a2)
{
  if (a2) {
    int v2 = 2;
  }
  else {
    int v2 = 0;
  }
  return szone_print(mach_task_self_, v2, a1, (unsigned int (*)(void, uint64_t, uint64_t, uint64_t *))_malloc_default_reader_0, (void (*)(const char *, ...))malloc_report_simple);
}

uint64_t szone_log(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16400) = a2;
  return result;
}

uint64_t szone_force_lock(uint64_t a1)
{
  for (int i = 0; i < *(_DWORD *)(a1 + 17120); ++i)
    szone_force_lock_magazine(a1, *(void *)(a1 + 17136) + 2560 * i);
  szone_force_lock_magazine(a1, *(void *)(a1 + 17136) - 2560);
  for (int j = 0; j < *(_DWORD *)(a1 + 17888); ++j)
    szone_force_lock_magazine(a1, *(void *)(a1 + 17904) + 2560 * j);
  uint64_t result = szone_force_lock_magazine(a1, *(void *)(a1 + 17904) - 2560);
  if (v2) {
    char v3 = 0;
  }
  else {
    char v3 = 1;
  }
  if ((v3 & 1) == 0) {
    return os_unfair_lock_lock_with_options();
  }
  int v4 = 0;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 18816), (unsigned int *)&v4, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
  if (v4) {
    return os_unfair_lock_lock_with_options();
  }
  return result;
}

void szone_force_unlock(uint64_t a1)
{
  int v1 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  int v2 = v1;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 18816), (unsigned int *)&v2, 0, memory_order_release, memory_order_relaxed);
  if (v2 != v1) {
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 18816));
  }
  for (int i = -1; i < *(_DWORD *)(a1 + 17888); ++i)
  {
    uint64_t v17 = (atomic_uint *)(*(void *)(a1 + 17904) + 2560 * i);
    int v3 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    int v4 = v3;
    atomic_compare_exchange_strong_explicit(v17, (unsigned int *)&v4, 0, memory_order_release, memory_order_relaxed);
    if (v4 != v3) {
      os_unfair_lock_unlock((os_unfair_lock_t)v17);
    }
    os_unfair_lock_t lock = (atomic_uint *)(*(void *)(a1 + 17904) + 2560 * i + 4);
    int v5 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    int v6 = v5;
    atomic_compare_exchange_strong_explicit(lock, (unsigned int *)&v6, 0, memory_order_release, memory_order_relaxed);
    if (v6 != v5) {
      os_unfair_lock_unlock((os_unfair_lock_t)lock);
    }
  }
  for (int j = -1; j < *(_DWORD *)(a1 + 17120); ++j)
  {
    int v16 = (atomic_uint *)(*(void *)(a1 + 17136) + 2560 * j);
    int v7 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    int v8 = v7;
    atomic_compare_exchange_strong_explicit(v16, (unsigned int *)&v8, 0, memory_order_release, memory_order_relaxed);
    if (v8 != v7) {
      os_unfair_lock_unlock((os_unfair_lock_t)v16);
    }
    uint64_t v15 = (atomic_uint *)(*(void *)(a1 + 17136) + 2560 * j + 4);
    int v9 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    int v10 = v9;
    atomic_compare_exchange_strong_explicit(v15, (unsigned int *)&v10, 0, memory_order_release, memory_order_relaxed);
    if (v10 != v9) {
      os_unfair_lock_unlock((os_unfair_lock_t)v15);
    }
  }
}

uint64_t szone_statistics(uint64_t a1, uint64_t a2)
{
  return szone_statistics_task(mach_task_self_, a1, 0, a2);
}

uint64_t szone_locked(uint64_t a1)
{
  int v1 = 0;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 18816), (unsigned int *)&v1, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
  if (v1)
  {
    return 1;
  }
  else
  {
    int v2 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    int v3 = v2;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 18816), (unsigned int *)&v3, 0, memory_order_release, memory_order_relaxed);
    if (v3 != v2) {
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 18816));
    }
    for (int i = -1; i < *(_DWORD *)(a1 + 17888); ++i)
    {
      int v4 = 0;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(*(void *)(a1 + 17904) + 2560 * i), (unsigned int *)&v4, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
      if (v4) {
        return 1;
      }
      int v24 = (atomic_uint *)(*(void *)(a1 + 17904) + 2560 * i);
      int v5 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
      int v6 = v5;
      atomic_compare_exchange_strong_explicit(v24, (unsigned int *)&v6, 0, memory_order_release, memory_order_relaxed);
      if (v6 != v5) {
        os_unfair_lock_unlock((os_unfair_lock_t)v24);
      }
      int v7 = 0;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(*(void *)(a1 + 17904) + 2560 * i + 4), (unsigned int *)&v7, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
      if (v7) {
        return 1;
      }
      int v21 = (atomic_uint *)(*(void *)(a1 + 17904) + 2560 * i + 4);
      int v8 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
      int v9 = v8;
      atomic_compare_exchange_strong_explicit(v21, (unsigned int *)&v9, 0, memory_order_release, memory_order_relaxed);
      if (v9 != v8) {
        os_unfair_lock_unlock((os_unfair_lock_t)v21);
      }
    }
    for (int j = -1; j < *(_DWORD *)(a1 + 17120); ++j)
    {
      int v10 = 0;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(*(void *)(a1 + 17136) + 2560 * j), (unsigned int *)&v10, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
      if (v10) {
        return 1;
      }
      int v23 = (atomic_uint *)(*(void *)(a1 + 17136) + 2560 * j);
      int v11 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
      int v12 = v11;
      atomic_compare_exchange_strong_explicit(v23, (unsigned int *)&v12, 0, memory_order_release, memory_order_relaxed);
      if (v12 != v11) {
        os_unfair_lock_unlock((os_unfair_lock_t)v23);
      }
      int v13 = 0;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(*(void *)(a1 + 17136) + 2560 * j + 4), (unsigned int *)&v13, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
      if (v13) {
        return 1;
      }
      int v22 = (atomic_uint *)(*(void *)(a1 + 17136) + 2560 * j + 4);
      int v14 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
      int v15 = v14;
      atomic_compare_exchange_strong_explicit(v22, (unsigned int *)&v15, 0, memory_order_release, memory_order_relaxed);
      if (v15 != v14) {
        os_unfair_lock_unlock((os_unfair_lock_t)v22);
      }
    }
    return 0;
  }
}

uint64_t szone_reinit_lock(uint64_t result)
{
  *(_DWORD *)(result + 18816) = 0;
  for (int i = -1; i < *(_DWORD *)(result + 17888); ++i)
  {
    *(_DWORD *)(*(void *)(result + 17904) + 2560 * i) = 0;
    *(_DWORD *)(*(void *)(result + 17904) + 2560 * i + 4) = 0;
  }
  for (int j = -1; j < *(_DWORD *)(result + 17120); ++j)
  {
    *(_DWORD *)(*(void *)(result + 17136) + 2560 * j) = 0;
    *(_DWORD *)(*(void *)(result + 17136) + 2560 * j + 4) = 0;
  }
  return result;
}

uint64_t szone_print_task(unsigned int a1, int a2, char *a3, unsigned int (*a4)(void, uint64_t, uint64_t, uint64_t *), void (*a5)(const char *, ...))
{
  return szone_print(a1, a2, a3, a4, a5);
}

uint64_t szone_statistics_task(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v17 = a1;
  uint64_t v16 = a2;
  uint64_t v14 = a4;
  int v15 = reader_or_in_memory_fallback_0(a3, a1);
  uint64_t v13 = 0;
  unsigned int v12 = v15(v17, v16, 20480, &v13);
  if (v12)
  {
    return v12;
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v10 = 0;
    int v9 = 0;
    uint64_t v8 = 0;
    int i = 0;
    uint64_t v6 = 0;
    unsigned int v12 = v15(v17, *(void *)(v13 + 17136), 2560 * *(int *)(v13 + 17120), &v6);
    if (v12)
    {
      return v12;
    }
    else
    {
      for (int i = -1; i < *(_DWORD *)(v13 + 17120); ++i)
      {
        v10 += *(void *)(v6 + 2560 * i + 2136);
        v10 += *(void *)(v6 + 2560 * i + 2128);
        v9 += *(_DWORD *)(v6 + 2560 * i + 2168);
        v8 += *(void *)(v6 + 2560 * i + 2152);
      }
      unsigned int v12 = v15(v17, *(void *)(v13 + 17904), 2560 * *(int *)(v13 + 17888), &v6);
      if (v12)
      {
        return v12;
      }
      else
      {
        for (int i = -1; i < *(_DWORD *)(v13 + 17888); ++i)
        {
          v10 += *(void *)(v6 + 2560 * i + 2136);
          v10 += *(void *)(v6 + 2560 * i + 2128);
          v9 += *(_DWORD *)(v6 + 2560 * i + 2168);
          v8 += *(void *)(v6 + 2560 * i + 2152);
        }
        uint64_t v11 = *(void *)(v13 + 18840);
        *(_DWORD *)uint64_t v14 = v9 + *(_DWORD *)(v13 + 18820);
        *(void *)(v14 + 8) = v8 + v11;
        uint64_t v4 = ((*(void *)(v13 + 17288) - *(void *)(v13 + 17296)) << 23)
           + ((*(void *)(v13 + 16520) - *(void *)(v13 + 16528)) << 20)
           + v11;
        *(void *)(v14 + 24) = v4;
        *(void *)(v14 + 16) = v4;
        *(void *)(v14 + 16) -= v10;
        return 0;
      }
    }
  }
}

mach_vm_address_t create_scalable_szone(uint64_t a1, int a2)
{
  mach_vm_address_t pages = mvm_allocate_pages((vm_page_size + 20479) & ~(vm_page_size - 1), 0, 0x40000000, 1);
  if (!pages) {
    return 0;
  }
  if (mvm_aslr_enabled()) {
    int v45 = a2 & 0xBFFFFFFF;
  }
  else {
    int v45 = a2 | 0x40000000;
  }
  unint64_t v42 = MEMORY[0xFFFFFC038];
  if (max_magazines <= 1)
  {
    int v39 = 1;
  }
  else
  {
    if (max_magazines >= 0x40) {
      int v40 = 64;
    }
    else {
      int v40 = max_magazines;
    }
    int v39 = v40;
  }
  rack_init(pages + 16512, 1, v39, v45);
  rack_init(pages + 17280, 2, v39, v45);
  if (large_cache_enabled)
  {
    *(void *)(pages + 20424) = v42 >> 10;
    if (v42 < magazine_large_expanded_cache_threshold)
    {
      *(_DWORD *)(pages + 20392) = 16;
      *(void *)(pages + 20400) = 0x8000000;
    }
    else
    {
      *(_DWORD *)(pages + 20392) = 64;
      *(void *)(pages + 20400) = 0x20000000;
    }
    int32_t v41 = NSVersionOfLinkTimeLibrary("System");
    *(_DWORD *)(pages + 20408) = v41 != -1 && v41 >> 16 < 112;
  }
  *(void *)(pages + 20448) = malloc_entropy[0];
  *(_DWORD *)(pages + 104) = 16;
  int v38 = 0;
  if (szone_size) {
    int v38 = szone_size;
  }
  unsigned int v37 = 0;
  if (v38) {
    unsigned int v37 = v38;
  }
  *(void *)(pages + 16) = v37;
  int v36 = 0;
  if (szone_malloc) {
    int v36 = szone_malloc;
  }
  unsigned int v35 = 0;
  if (v36) {
    unsigned int v35 = v36;
  }
  *(void *)(pages + 24) = v35;
  unsigned int v34 = 0;
  if (szone_calloc) {
    unsigned int v34 = szone_calloc;
  }
  BOOL v33 = 0;
  if (v34) {
    BOOL v33 = v34;
  }
  *(void *)(pages + 32) = v33;
  uint64_t v32 = 0;
  if (szone_valloc) {
    uint64_t v32 = szone_valloc;
  }
  int v31 = 0;
  if (v32) {
    int v31 = v32;
  }
  *(void *)(pages + 40) = v31;
  uint64_t v30 = 0;
  if (szone_free) {
    uint64_t v30 = szone_free;
  }
  int v29 = 0;
  if (v30) {
    int v29 = v30;
  }
  *(void *)(pages + 48) = v29;
  int v28 = 0;
  if (szone_realloc) {
    int v28 = szone_realloc;
  }
  uint64_t v27 = 0;
  if (v28) {
    uint64_t v27 = v28;
  }
  *(void *)(pages + 56) = v27;
  int v26 = 0;
  if (szone_destroy) {
    int v26 = szone_destroy;
  }
  int v25 = 0;
  if (v26) {
    int v25 = v26;
  }
  *(void *)(pages + 64) = v25;
  int v24 = 0;
  if (szone_batch_malloc) {
    int v24 = szone_batch_malloc;
  }
  int v23 = 0;
  if (v24) {
    int v23 = v24;
  }
  *(void *)(pages + 80) = v23;
  int v22 = 0;
  if (szone_batch_free) {
    int v22 = szone_batch_free;
  }
  int v21 = 0;
  if (v22) {
    int v21 = v22;
  }
  *(void *)(pages + 88) = v21;
  *(void *)(pages + 96) = &szone_introspect;
  int v20 = 0;
  if (szone_memalign) {
    int v20 = szone_memalign;
  }
  int v19 = 0;
  if (v20) {
    int v19 = v20;
  }
  *(void *)(pages + 112) = v19;
  int v18 = 0;
  if (szone_free_definite_size) {
    int v18 = szone_free_definite_size;
  }
  int v17 = 0;
  if (v18) {
    int v17 = v18;
  }
  *(void *)(pages + 120) = v17;
  uint64_t v16 = 0;
  if (szone_pressure_relief) {
    uint64_t v16 = szone_pressure_relief;
  }
  int v15 = 0;
  if (v16) {
    int v15 = v16;
  }
  *(void *)(pages + 128) = v15;
  uint64_t v14 = 0;
  if (szone_claimed_address) {
    uint64_t v14 = szone_claimed_address;
  }
  uint64_t v13 = 0;
  if (v14) {
    uint64_t v13 = v14;
  }
  *(void *)(pages + 136) = v13;
  unsigned int v12 = 0;
  if (szone_try_free_default) {
    unsigned int v12 = szone_try_free_default;
  }
  uint64_t v11 = 0;
  if (v12) {
    uint64_t v11 = v12;
  }
  *(void *)(pages + 144) = v11;
  uint64_t v10 = 0;
  if (szone_malloc_type_malloc) {
    uint64_t v10 = szone_malloc_type_malloc;
  }
  int v9 = 0;
  if (v10) {
    int v9 = v10;
  }
  *(void *)(pages + 160) = v9;
  uint64_t v8 = 0;
  if (szone_malloc_type_calloc) {
    uint64_t v8 = szone_malloc_type_calloc;
  }
  int v7 = 0;
  if (v8) {
    int v7 = v8;
  }
  *(void *)(pages + 168) = v7;
  uint64_t v6 = 0;
  if (szone_malloc_type_realloc) {
    uint64_t v6 = szone_malloc_type_realloc;
  }
  int v5 = 0;
  if (v6) {
    int v5 = v6;
  }
  *(void *)(pages + 176) = v5;
  uint64_t v4 = 0;
  if (szone_malloc_type_memalign) {
    uint64_t v4 = szone_malloc_type_memalign;
  }
  int v3 = 0;
  if (v4) {
    int v3 = v4;
  }
  *(void *)(pages + 184) = v3;
  *(void *)mach_vm_address_t pages = 0;
  *(void *)(pages + 8) = 0;
  mprotect((void *)pages, 0xC8uLL, 1);
  *(_DWORD *)(pages + 16392) = v45;
  *(_DWORD *)(pages + 18816) = 0;
  *(void *)(pages + 0x4000) = -1;
  return pages;
}

BOOL mvm_aslr_enabled()
{
  return _dyld_get_image_slide() != 0;
}

void szone_destroy(mach_vm_address_t a1)
{
  mach_vm_address_t v6 = a1;
  uint64_t v5 = 0;
  uint64_t v4 = 0;
  mach_vm_address_t v2 = 0;
  mach_vm_size_t v3 = 0;
  if (large_cache_enabled) {
    large_destroy_cache(v6);
  }
  uint64_t v5 = *(unsigned int *)(v6 + 18824);
  while (v5--)
  {
    uint64_t v4 = (mach_vm_address_t *)(*(void *)(v6 + 18832) + 24 * v5);
    if (*v4) {
      mvm_deallocate_pages(*v4, v4[1], *(_DWORD *)(v6 + 16392));
    }
  }
  large_entries_free_no_lock(v6, *(void *)(v6 + 18832), *(_DWORD *)(v6 + 18824), &v2);
  if (v3) {
    mvm_deallocate_pages(v2, v3, *(_DWORD *)(v6 + 16392));
  }
  rack_destroy_regions(v6 + 16512, 0x100000uLL);
  rack_destroy_regions(v6 + 17280, 0x800000uLL);
  rack_destroy(v6 + 16512);
  rack_destroy(v6 + 17280);
  mvm_deallocate_pages(v6, (vm_page_size + 20479) & ~(vm_page_size - 1), 0);
}

void szone_try_free_default(uint64_t a1, unint64_t a2)
{
}

unint64_t szone_malloc_type_malloc(uint64_t a1, unint64_t a2)
{
  return szone_malloc(a1, a2);
}

unint64_t szone_malloc_type_calloc(uint64_t a1, unint64_t a2, unint64_t a3)
{
  return szone_calloc(a1, a2, a3);
}

uint64_t szone_malloc_type_realloc(uint64_t a1, unint64_t a2, unint64_t a3)
{
  return szone_realloc(a1, a2, a3);
}

uint64_t szone_malloc_type_memalign(uint64_t a1, vm_size_t a2, unint64_t a3)
{
  return szone_memalign(a1, a2, a3);
}

mach_vm_address_t create_scalable_zone(uint64_t a1, int a2)
{
  return create_scalable_szone(a1, a2);
}

uint64_t tiny_region_for_ptr_no_lock(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = hash_lookup_region_no_lock(*(void *)(*(void *)(a1 + 24) + 16), **(void **)(a1 + 24), *(void *)(*(void *)(a1 + 24) + 8), a2 & 0xFFFFFFFFFFF00000);
  if (v4) {
    return *(void *)v4;
  }
  else {
    return 0;
  }
}

uint64_t small_region_for_ptr_no_lock(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = hash_lookup_region_no_lock(*(void *)(*(void *)(a1 + 24) + 16), **(void **)(a1 + 24), *(void *)(*(void *)(a1 + 24) + 8), a2 & 0xFFFFFFFFFF800000);
  if (v4) {
    return *(void *)v4;
  }
  else {
    return 0;
  }
}

uint64_t hash_lookup_region_no_lock(uint64_t a1, uint64_t a2, char a3, unint64_t a4)
{
  if (!a2) {
    return 0;
  }
  unint64_t v5 = (0x9E3779B97F4A7C55 * (a4 >> 20)) >> (64 - a3);
  do
  {
    if (!*(void *)(a1 + 8 * v5)) {
      return 0;
    }
    if (*(void *)(a1 + 8 * v5) == a4) {
      return a1 + 8 * v5;
    }
    if (++v5 == a2) {
      unint64_t v5 = 0;
    }
  }
  while (v5 != (0x9E3779B97F4A7C55 * (a4 >> 20)) >> (64 - a3));
  return 0;
}

uint64_t (*reader_or_in_memory_fallback_0(uint64_t a1, int a2))(int a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a1) {
    return (uint64_t (*)(int, uint64_t, uint64_t, void *))a1;
  }
  BOOL v3 = 1;
  if (a2) {
    BOOL v3 = mach_task_is_self() != 0;
  }
  if (!v3)
  {
    __break(1u);
    JUMPOUT(0x238A4);
  }
  return _malloc_default_reader_0;
}

uint64_t szone_check_all(uint64_t a1)
{
  if (tiny_check(a1 + 16512, szone_check_counter))
  {
    for (unint64_t i = 0; i < **(void **)(a1 + 17304); ++i)
    {
      uint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 17304) + 16) + 8 * i);
      if (v7 != -1 && v7)
      {
        mach_vm_address_t v6 = mag_lock_zine_for_region_trailer(*(void *)(a1 + 17904), v7, *(_DWORD *)(v7 + 24));
        if (!small_check_region(a1 + 17280, v7, i, szone_check_counter))
        {
          int v1 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
          int v2 = v1;
          atomic_compare_exchange_strong_explicit(v6, (unsigned int *)&v2, 0, memory_order_release, memory_order_relaxed);
          if (v2 != v1) {
            os_unfair_lock_unlock((os_unfair_lock_t)v6);
          }
          *(_DWORD *)(a1 + 16392) &= ~0x80000000;
          return 0;
        }
        int v3 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
        int v4 = v3;
        atomic_compare_exchange_strong_explicit(v6, (unsigned int *)&v4, 0, memory_order_release, memory_order_relaxed);
        if (v4 != v3) {
          os_unfair_lock_unlock((os_unfair_lock_t)v6);
        }
      }
    }
    for (unint64_t j = 0; j < 0x1F; ++j)
    {
      if (!small_free_list_check(a1 + 17280, j))
      {
        *(_DWORD *)(a1 + 16392) &= ~0x80000000;
        return 0;
      }
    }
    return 1;
  }
  else
  {
    *(_DWORD *)(a1 + 16392) &= ~0x80000000;
    return 0;
  }
}

atomic_uint *mag_lock_zine_for_region_trailer(uint64_t a1, uint64_t a2, int a3)
{
  int v10 = a3;
  uint64_t v8 = (atomic_uint *)(a1 + 2560 * a3);
  int v3 = 0;
  atomic_compare_exchange_strong_explicit(v8, (unsigned int *)&v3, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
  if (v3) {
    os_unfair_lock_lock_with_options();
  }
  while (1)
  {
    int v9 = *(_DWORD *)(a2 + 24);
    if (v10 == v9) {
      break;
    }
    int v4 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    int v5 = v4;
    atomic_compare_exchange_strong_explicit(v8, (unsigned int *)&v5, 0, memory_order_release, memory_order_relaxed);
    if (v5 != v4) {
      os_unfair_lock_unlock((os_unfair_lock_t)v8);
    }
    int v10 = v9;
    uint64_t v8 = (atomic_uint *)(a1 + 2560 * v9);
    int v6 = 0;
    atomic_compare_exchange_strong_explicit(v8, (unsigned int *)&v6, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
    if (v6) {
      os_unfair_lock_lock_with_options();
    }
  }
  return v8;
}

uint64_t szone_print(unsigned int a1, int a2, char *a3, unsigned int (*a4)(void, uint64_t, uint64_t, uint64_t *), void (*a5)(const char *, ...))
{
  unsigned int v24 = a1;
  int v23 = a2;
  int v22 = a3;
  int v21 = a4;
  int v20 = a5;
  unint64_t i = 0;
  int v18 = 0;
  uint64_t v17 = 0;
  uint64_t v16 = a3;
  uint64_t v15 = 0;
  if (a4(a1, (uint64_t)a3, 20480, &v15)) {
    return ((uint64_t (*)(const char *))v20)("Failed to read szone structure\n");
  }
  if (!scalable_zone_info_task(v24, v21, v15, (uint64_t)v25, 13)) {
    return ((uint64_t (*)(const char *))v20)("Failed to get scalable zone info\n");
  }
  v20("Scalable zone %p: inUse=%u(%u) touched=%u allocated=%u flags=0x%x\n", v22, v25[0], v25[1], v25[2], v25[3], v25[12]);
  v20("\ttiny=%u(%u) small=%u(%u) large=%u(%u)\n", v25[4], v25[5], v25[6], v25[7], v25[8], v25[9]);
  if (!mach_task_is_self()) {
    return ((uint64_t (*)(const char *))v20)("(unable to safely further examine remote process)\n");
  }
  v20("%lu tiny regions:\n", *(void *)(v15 + 16520));
  if (*(void *)(v15 + 16528)) {
    v20("[%lu tiny regions have been vm_deallocate'd]\n", *(void *)(v15 + 16528));
  }
  uint64_t v14 = 0;
  uint64_t v13 = 0;
  uint64_t v12 = 0;
  if (v21(v24, *(void *)(v15 + 16536), 32, (uint64_t *)&v14)) {
    return ((uint64_t (*)(const char *))v20)("Failed to map tiny rack region_generation\n");
  }
  if (v21(v24, v14[2], 8, &v13)) {
    return ((uint64_t (*)(const char *))v20)("Failed to map tiny rack hashed_regions\n");
  }
  if (v21(v24, *(void *)(v15 + 17136), 2560 * *(int *)(v15 + 17120), &v12)) {
    return ((uint64_t (*)(const char *))v20)("Failed to map tiny rack magazines\n");
  }
  int v10 = 0;
  for (unint64_t i = 0; i < *v14; ++i)
  {
    int v18 = *(const void **)(v13 + 8 * i);
    if (v18 && v18 != (const void *)-1)
    {
      if (v21(v24, (uint64_t)v18, 0x100000, &v17)) {
        return ((uint64_t (*)(const char *, ...))v20)("Failed to map region %p\n", v18);
      }
      int v9 = *(_DWORD *)(v17 + 24);
      if (v9 == -1) {
        ++v10;
      }
      if (v18 == *(const void **)(v12 + 2560 * v9 + 2144)) {
        uint64_t v7 = *(void *)(v12 + 2560 * v9 + 2136);
      }
      else {
        uint64_t v7 = 0;
      }
      if (v18 == *(const void **)(v12 + 2560 * v9 + 2144)) {
        print_tiny_region(v24, (unsigned int (*)(void, void, void, void))v21, (uint64_t (*)(const char *, ...))v20, v23, (uint64_t)v18, v7, *(void *)(v12 + 2560 * v9 + 2128));
      }
      else {
        print_tiny_region(v24, (unsigned int (*)(void, void, void, void))v21, (uint64_t (*)(const char *, ...))v20, v23, (uint64_t)v18, v7, 0);
      }
    }
  }
  if (*(void *)(v12 - 408)) {
    v20("Tiny recirc depot: total bytes: %llu, in-use bytes: %llu, allocations: %llu, regions: %d (min # retained regions: %d)\n", *(void *)(v12 - 400), *(void *)(v12 - 408), *(unsigned int *)(v12 - 392), v10, recirc_retained_regions);
  }
  else {
    v20("Tiny recirc depot is empty\n");
  }
  if (v23) {
    print_tiny_free_list(v24, (unsigned int (*)(void, const void *, uint64_t, uint64_t *))v21, v20, v16 + 16512);
  }
  v20("%lu small regions:\n", *(void *)(v15 + 17288));
  if (*(void *)(v15 + 17296)) {
    v20("[%lu small regions have been vm_deallocate'd]\n", *(void *)(v15 + 17296));
  }
  if (v21(v24, *(void *)(v15 + 17304), 32, (uint64_t *)&v14)) {
    return ((uint64_t (*)(const char *))v20)("Failed to map small rack region_generation\n");
  }
  if (v21(v24, v14[2], 8, &v13)) {
    return ((uint64_t (*)(const char *))v20)("Failed to map small rack hashed_regions\n");
  }
  if (v21(v24, *(void *)(v15 + 17904), 2560 * *(int *)(v15 + 17888), &v12)) {
    return ((uint64_t (*)(const char *))v20)("Failed to map small rack magazines\n");
  }
  int v11 = 0;
  for (unint64_t i = 0; i < *v14; ++i)
  {
    int v18 = *(const void **)(v13 + 8 * i);
    if (v18 && v18 != (const void *)-1)
    {
      if (v21(v24, (uint64_t)v18, 0x800000, &v17)) {
        return ((uint64_t (*)(const char *, ...))v20)("Failed to map region %p\n", v18);
      }
      int v8 = *(_DWORD *)(v17 + 24);
      if (v8 == -1) {
        ++v11;
      }
      if (v18 == *(const void **)(v12 + 2560 * v8 + 2144)) {
        uint64_t v6 = *(void *)(v12 + 2560 * v8 + 2136);
      }
      else {
        uint64_t v6 = 0;
      }
      if (v18 == *(const void **)(v12 + 2560 * v8 + 2144)) {
        print_small_region(v24, (unsigned int (*)(void, void, void, void))v21, (uint64_t (*)(const char *, ...))v20, v15, v23, (uint64_t)v18, v6, *(void *)(v12 + 2560 * v8 + 2128));
      }
      else {
        print_small_region(v24, (unsigned int (*)(void, void, void, void))v21, (uint64_t (*)(const char *, ...))v20, v15, v23, (uint64_t)v18, v6, 0);
      }
    }
  }
  if (*(void *)(v12 - 408)) {
    v20("Small recirc depot: total bytes: %llu, in-use bytes: %llu, allocations: %llu, regions: %d (min # retained regions: %d)\n", *(void *)(v12 - 400), *(void *)(v12 - 408), *(unsigned int *)(v12 - 392), v11, recirc_retained_regions);
  }
  else {
    v20("Small recirc depot is empty\n");
  }
  if (v23) {
    print_small_free_list(v24, v21, (void (*)(const char *))v20, (uint64_t)(v16 + 17280));
  }
  return large_debug_print(v24, v23, (uint64_t)v22, v21, v20);
}

uint64_t szone_force_lock_magazine(uint64_t a1, uint64_t a2)
{
  if (v2) {
    char v3 = 0;
  }
  else {
    char v3 = 1;
  }
  if ((v3 & 1) == 0
    || (int v4 = 0,
        atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a2 + 4), (unsigned int *)&v4, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire), v4))
  {
    uint64_t result = os_unfair_lock_lock_with_options();
  }
  int v6 = 0;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)a2, (unsigned int *)&v6, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
  if (v6) {
    return os_unfair_lock_lock_with_options();
  }
  return result;
}

void *small_finalize_region(void *result, uint64_t a2)
{
  uint64_t v9 = (uint64_t)result;
  if (*(void *)(a2 + 2128))
  {
    uint64_t v7 = *(void *)(a2 + 2144) + 0x800000 - *(void *)(a2 + 2128);
    unsigned __int16 v5 = *(void *)(a2 + 2128) >> 9;
    unsigned __int16 v3 = ((v7 - ((v7 & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF;
    unsigned __int16 v4 = *(_WORD *)&stru_20.segname[2 * (((v7 - 1 - (((v7 - 1) & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF)
                                  + ((v7 - 1) & 0xFFFFFFFFFF800000)] & 0x7FFF;
    if (v3)
    {
      if (v4 <= (int)v3)
      {
        uint64_t v6 = v7 - (v4 << 9);
        if (*(__int16 *)&stru_20.segname[2 * (((v6 - ((v6 & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF)
                                        + (v6 & 0xFFFFFFFFFF800000)] < 0)
        {
          char v2 = (unsigned __int8 *)small_free_list_find_by_ptr((uint64_t)result, a2, v6, v4);
          small_free_list_remove_ptr(v9, a2, v2, v4);
          v7 -= v4 << 9;
          v5 += v4;
        }
      }
    }
    uint64_t result = small_free_list_add_ptr(v9, a2, v7, v5);
    *(void *)(a2 + 2128) = 0;
  }
  *(void *)(a2 + 2144) = 0;
  return result;
}

uint64_t small_free_list_find_by_ptr(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 a4)
{
  if (*(unsigned __int16 *)&stru_20.segname[2 * (((a3 - ((a3 & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF)
                                           + (a3 & 0xFFFFFFFFFF800000)] != (a4 | 0x8000))
  {
    malloc_zone_error(*(_DWORD *)(a1 + 620), 1, (uint64_t)"small_free_list_find_by_ptr: ptr is not free (ptr metadata !SMALL_IS_FREE), ptr=%p msize=%d metadata=0x%x\n");
    __break(1u);
    JUMPOUT(0x24F64);
  }
  if (small_needs_oob_free_entry(a3, a4))
  {
    unint64_t v6 = a3 & 0xFFFFFFFFFF800000;
    for (int i = 0; (unint64_t)i < 0x21; ++i)
    {
      if (*(_WORD *)((char *)&loc_7FA4 + 18 * i + (a3 & 0xFFFFFFFFFF800000) + 18)
        && small_oob_free_entry_get_ptr(v6 + 32678 + 18 * i) == a3)
      {
        return v6 + 32678 + 18 * i;
      }
    }
  }
  return a3;
}

uint64_t small_free_list_remove_ptr(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unsigned __int16 a4)
{
  return small_free_list_remove_ptr_no_clear(a1, a2, a3, a4);
}

void *small_free_list_add_ptr(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 a4)
{
  if (a4 > 0x1Fu) {
    unsigned int v6 = 30;
  }
  else {
    unsigned int v6 = a4 - 1;
  }
  uint64_t v7 = *(void **)(a2 + 32 + 8 * v6);
  int v11 = (void *)small_free_list_from_ptr(a1, a3, a4);
  small_free_list_set_previous(a1, v11, 0);
  small_free_list_set_next(a1, (unint64_t)v11, (uint64_t)v7);
  small_free_mark_free(a1, (unint64_t)v11, a4);
  if (small_free_list_get_ptr((unint64_t)v7))
  {
    small_free_list_set_previous(a1, v7, (uint64_t)v11);
  }
  else
  {
    unsigned __int16 v4 = (_DWORD *)(a2 + 2088 + 4 * (v6 >> 5));
    *v4 |= 1 << (v6 & 0x1F);
  }
  *(void *)(a2 + 32 + 8 * v6) = v11;
  return v11;
}

uint64_t small_free_detach_region(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v10 = a3 + 33280;
  unint64_t v9 = a3 + 0x800000;
  unsigned int v8 = 0;
  unint64_t v7 = ((a3 + 33280) & 0xFFFFFFFFFF800000) + 40;
  while (v10 < v9)
  {
    __int16 v6 = *(_WORD *)(v7 + 2 * (((v10 - ((v10 & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF));
    unsigned __int16 v5 = v6 & 0x7FFF;
    if ((v6 & 0x7FFF) == 0) {
      break;
    }
    if (v6 < 0)
    {
      unsigned __int16 v3 = (unsigned __int8 *)small_free_list_find_by_ptr(a1, a2, v10, v5);
      small_free_list_remove_ptr_no_clear(a1, a2, v3, v5);
    }
    else
    {
      ++v8;
    }
    v10 += v5 << 9;
  }
  return v8;
}

uint64_t small_free_list_remove_ptr_no_clear(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unsigned __int16 a4)
{
  if (a4 > 0x1Fu) {
    unsigned int v10 = 30;
  }
  else {
    unsigned int v10 = a4 - 1;
  }
  uint64_t previous = small_free_list_get_previous(a1, a3);
  next = (unsigned __int8 *)small_free_list_get_next(a1, (unint64_t)a3);
  if (small_free_list_get_ptr(previous))
  {
    unint64_t v12 = small_free_list_get_next(a1, previous);
    unint64_t ptr = small_free_list_get_ptr(v12);
    if (ptr != small_free_list_get_ptr((unint64_t)a3))
    {
      int v8 = *(_DWORD *)(a1 + 620);
      small_free_list_get_ptr((unint64_t)a3);
      small_free_list_get_ptr(v12);
      malloc_zone_error(v8, 1, (uint64_t)"small_free_list_remove_ptr_no_clear: Internal invariant broken (next ptr of prev) for %p, prev_next=%p\n");
      __break(1u);
    }
    small_free_list_set_next(a1, previous, (uint64_t)next);
  }
  else
  {
    *(void *)(a2 + 32 + 8 * v10) = next;
    if (!small_free_list_get_ptr((unint64_t)next))
    {
      unsigned __int16 v4 = (_DWORD *)(a2 + 2088 + 4 * (v10 >> 5));
      *v4 &= ~(1 << (v10 & 0x1F));
    }
  }
  if (small_free_list_get_ptr((unint64_t)next))
  {
    unint64_t v11 = small_free_list_get_previous(a1, next);
    unint64_t v7 = small_free_list_get_ptr(v11);
    if (v7 != small_free_list_get_ptr((unint64_t)a3))
    {
      int v6 = *(_DWORD *)(a1 + 620);
      small_free_list_get_ptr((unint64_t)a3);
      small_free_list_get_ptr(v11);
      malloc_zone_error(v6, 1, (uint64_t)"small_free_list_remove_ptr_no_clear: Internal invariant broken (prev ptr of next) for %p, next_prev=%p\n");
      __break(1u);
    }
    small_free_list_set_previous(a1, next, previous);
  }
  uint64_t result = small_is_oob_free_entry((unint64_t)a3);
  if (result) {
    return small_oob_free_entry_set_free((uint64_t)a3);
  }
  return result;
}

uint64_t small_free_reattach_region(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v9 = a3 + 33280;
  unint64_t v8 = a3 + 0x800000;
  uint64_t v7 = 0;
  unint64_t v6 = ((a3 + 33280) & 0xFFFFFFFFFF800000) + 40;
  while (v9 < v8)
  {
    __int16 v5 = *(_WORD *)(v6 + 2 * (((v9 - ((v9 & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF));
    unsigned __int16 v4 = v5 & 0x7FFF;
    if ((v5 & 0x7FFF) == 0) {
      break;
    }
    if (v5 < 0) {
      small_free_list_add_ptr(a1, a2, v9, v4);
    }
    else {
      v7 += v4 << 9;
    }
    v9 += v4 << 9;
  }
  return v7;
}

void small_free_scan_madvise_free(uint64_t a1, atomic_uint *a2, uint64_t a3)
{
  uint64_t v34 = a1;
  BOOL v33 = (os_unfair_lock_s *)a2;
  uint64_t v32 = a3;
  uint64_t v31 = a3 + 33280;
  unint64_t v30 = a3 + 33280;
  unint64_t v29 = a3 + 0x800000;
  unint64_t v28 = ((a3 + 33280) & 0xFFFFFFFFFF800000) + 40;
  uint64_t v27 = v8;
  uint64_t v13 = &v8[-((4 * ((vm_kernel_page_size + 8355327) >> vm_kernel_page_shift >> 1) + 15) & 0xFFFFFFFFFFFFFFF0)];
  vm_size_t v26 = (vm_kernel_page_size + 8355327) >> vm_kernel_page_shift >> 1;
  int v25 = 0;
  while (v30 < v29)
  {
    int v24 = ((v30 - ((v30 & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF;
    __int16 v23 = 0;
    __int16 v23 = *(_WORD *)(v28 + 2 * (((v30 - ((v30 & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF));
    int v22 = v23 & 0x8000;
    unsigned __int16 v21 = v23 & 0x7FFF;
    if (v23 < 0 && !v21 && v30 == v31)
    {
      vm_size_t v20 = (v31 + 10 + vm_kernel_page_mask) & ~vm_kernel_page_mask;
      vm_size_t v19 = (v31 + 8388606) & ~vm_kernel_page_mask;
      if (v20 < v19)
      {
        unsigned __int16 v3 = v13;
        *(_WORD *)&v13[4 * v25] = (v20 - v31) >> vm_kernel_page_shift;
        *(_WORD *)&v3[4 * v25++ + 2] = (v19 - v20) >> vm_kernel_page_shift;
      }
      break;
    }
    if (!v21) {
      break;
    }
    if (v22)
    {
      vm_size_t v18 = (v30 + 10 + vm_kernel_page_mask) & ~vm_kernel_page_mask;
      vm_size_t v17 = (v30 + (v21 << 9) - 2) & ~vm_kernel_page_mask;
      if (v18 < v17)
      {
        unsigned __int16 v4 = v13;
        *(_WORD *)&v13[4 * v25] = (v18 - v32) >> vm_kernel_page_shift;
        *(_WORD *)&v4[4 * v25++ + 2] = (v17 - v18) >> vm_kernel_page_shift;
      }
    }
    v30 += v21 << 9;
  }
  if (v25 > 0)
  {
    int i = 0;
    uint64_t v35 = v32 + 28;
    int v47 = 1;
    uint64_t v46 = v32 + 28;
    int v45 = 1;
    unsigned int add = atomic_fetch_add((atomic_uint *volatile)(v32 + 28), 1u);
    int v36 = v33;
    int v39 = v33;
    os_unfair_lock_t v53 = v33;
    int v52 = 0;
    uint64_t v54 = 3;
    uint64_t v55 = 3;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    int v52 = *(void *)(StatusReg + 24);
    int v51 = 0;
    int v50 = v52;
    int v49 = 0;
    int v5 = v52;
    int v6 = v52;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v33, (unsigned int *)&v6, 0, memory_order_release, memory_order_relaxed);
    int v11 = v6;
    BOOL v12 = v6 == v5;
    if (v6 != v5) {
      int v50 = v11;
    }
    BOOL v48 = v12;
    if (!v12) {
      os_unfair_lock_unlock(v53);
    }
    for (int i = 0; i < v25; ++i)
    {
      uint64_t v15 = 0;
      uint64_t v15 = (void *)(v32 + (*(unsigned __int16 *)&v13[4 * i] << vm_kernel_page_shift));
      uint64_t v14 = 0;
      uint64_t v14 = *(unsigned __int16 *)&v13[4 * i + 2] << vm_kernel_page_shift;
      mvm_madvise_free(v34, v32, v15, (unint64_t)v15 + v14, 0, *(_DWORD *)(v34 + 620) & 0x20);
    }
    unsigned int v37 = v33;
    int v40 = v33;
    unint64_t v63 = v33;
    int v62 = 327680;
    unsigned int v61 = 0;
    uint64_t v64 = 3;
    uint64_t v65 = 3;
    unint64_t v66 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    unsigned int v61 = *(void *)(v66 + 24);
    int v60 = 0;
    unsigned int v59 = v61;
    unsigned int v58 = v61;
    int v7 = 0;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v33, (unsigned int *)&v7, v61, memory_order_acquire, memory_order_acquire);
    int v9 = v7;
    BOOL v10 = v7 == 0;
    if (v7) {
      int v60 = v9;
    }
    BOOL v57 = v10;
    if (!v10) {
      os_unfair_lock_lock_with_options();
    }
    uint64_t v38 = v32 + 28;
    int v43 = -1;
    uint64_t v42 = v32 + 28;
    int v41 = -1;
    atomic_fetch_add((atomic_uint *volatile)(v32 + 28), 0xFFFFFFFF);
  }
}

unint64_t small_memalign(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int16 v17 = (unint64_t)(a4 + 511) >> 9;
  unint64_t should_clear = small_malloc_should_clear(a1 + 17280, v17, 0);
  if (!should_clear) {
    return 0;
  }
  if ((should_clear & (a2 - 1)) != 0) {
    uint64_t v9 = a2 - (should_clear & (a2 - 1));
  }
  else {
    uint64_t v9 = 0;
  }
  unsigned __int16 v15 = (unint64_t)(a3 + 511) >> 9;
  unsigned __int16 v14 = (unint64_t)(v9 + 511) >> 9;
  unsigned __int16 v13 = v17 - v15 - v14;
  if (v14)
  {
    BOOL v12 = mag_lock_zine_for_region_trailer_0(*(void *)(a1 + 17904), should_clear & 0xFFFFFFFFFF800000, *(int *)((char *)&dword_18 + (should_clear & 0xFFFFFFFFFF800000)));
    small_meta_header_set_in_use((should_clear & 0xFFFFFFFFFF800000) + 40, ((should_clear - ((should_clear & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF, v14);
    small_meta_header_set_in_use(((should_clear + v9) & 0xFFFFFFFFFF800000) + 40, ((should_clear + v9 - (((should_clear + v9) & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF, v17 - v14);
    ++*((_DWORD *)v12 + 542);
    int v4 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    int v5 = v4;
    atomic_compare_exchange_strong_explicit(v12, (unsigned int *)&v5, 0, memory_order_release, memory_order_relaxed);
    if (v5 != v4) {
      os_unfair_lock_unlock((os_unfair_lock_t)v12);
    }
    free_small(a1 + 17280, should_clear, should_clear & 0xFFFFFFFFFF800000, v14 << 9);
    should_clear += v9;
  }
  if (v13)
  {
    uint64_t v11 = should_clear + (v15 << 9);
    BOOL v10 = mag_lock_zine_for_region_trailer_0(*(void *)(a1 + 17904), should_clear & 0xFFFFFFFFFF800000, *(int *)((char *)&dword_18 + (should_clear & 0xFFFFFFFFFF800000)));
    small_meta_header_set_in_use((should_clear & 0xFFFFFFFFFF800000) + 40, ((should_clear - ((should_clear & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF, v15);
    small_meta_header_set_in_use((v11 & 0xFFFFFFFFFF800000) + 40, ((v11 - ((v11 & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF, v13);
    ++*((_DWORD *)v10 + 542);
    int v6 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    int v7 = v6;
    atomic_compare_exchange_strong_explicit(v10, (unsigned int *)&v7, 0, memory_order_release, memory_order_relaxed);
    if (v7 != v6) {
      os_unfair_lock_unlock((os_unfair_lock_t)v10);
    }
    free_small(a1 + 17280, v11, v11 & 0xFFFFFFFFFF800000, v13 << 9);
  }
  return should_clear;
}

unint64_t small_malloc_should_clear(uint64_t a1, unsigned __int16 a2, int a3)
{
  uint64_t v34 = rack_get_thread_index(a1) % *(_DWORD *)(a1 + 608);
  uint64_t v33 = *(void *)(a1 + 624) + 2560 * (int)v34;
  if (malloc_tracing_enabled) {
    kdebug_trace();
  }
  int v3 = 0;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v33, (unsigned int *)&v3, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
  if (v3) {
    os_unfair_lock_lock_with_options();
  }
  uint64_t v35 = *(void *)(v33 + 8);
  if (*(unsigned __int16 *)(v33 + 16) == a2)
  {
    *(void *)(v33 + 8) = 0;
    *(_WORD *)(v33 + 16) = 0;
    *(void *)(v33 + 24) = 0;
    int v4 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    int v5 = v4;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v33, (unsigned int *)&v5, 0, memory_order_release, memory_order_relaxed);
    if (v5 != v4) {
      os_unfair_lock_unlock((os_unfair_lock_t)v33);
    }
    if (a3) {
      _platform_memset();
    }
    return v35;
  }
  else
  {
    while (1)
    {
      unint64_t v36 = small_malloc_from_free_list(a1, v33, v34, a2);
      if (v36)
      {
        int v6 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
        int v7 = v6;
        atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v33, (unsigned int *)&v7, 0, memory_order_release, memory_order_relaxed);
        if (v7 != v6) {
          os_unfair_lock_unlock((os_unfair_lock_t)v33);
        }
        if (a3) {
          _platform_memset();
        }
        return v36;
      }
      BOOL v8 = small_get_region_from_depot(a1, v33, v34, a2) == 0;
      if (!v8)
      {
        unint64_t v37 = small_malloc_from_free_list(a1, v33, v34, a2);
        BOOL v8 = v37 == 0;
        if (v37)
        {
          int v9 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
          int v10 = v9;
          atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v33, (unsigned int *)&v10, 0, memory_order_release, memory_order_relaxed);
          if (v10 != v9) {
            os_unfair_lock_unlock((os_unfair_lock_t)v33);
          }
          if (a3) {
            _platform_memset();
          }
          return v37;
        }
      }
      int v43 = (atomic_uint *)(v33 + 4);
      if (!v8)
      {
        int v12 = 0;
        atomic_compare_exchange_strong_explicit(v43, (unsigned int *)&v12, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
        BOOL v44 = v12 == 0;
      }
      else
      {
        BOOL v44 = os_unfair_lock_trylock((os_unfair_lock_t)v43);
      }
      if (v44) {
        break;
      }
      int v25 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
      int v26 = v25;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v33, (unsigned int *)&v26, 0, memory_order_release, memory_order_relaxed);
      if (v26 != v25) {
        os_unfair_lock_unlock((os_unfair_lock_t)v33);
      }
      int v27 = 0;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v33 + 4), (unsigned int *)&v27, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
      if (v27) {
        os_unfair_lock_lock_with_options();
      }
      int v28 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
      int v29 = v28;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v33 + 4), (unsigned int *)&v29, 0, memory_order_release, memory_order_relaxed);
      if (v29 != v28) {
        os_unfair_lock_unlock((os_unfair_lock_t)(v33 + 4));
      }
      int v30 = 0;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v33, (unsigned int *)&v30, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
      if (v30) {
        os_unfair_lock_lock_with_options();
      }
    }
    int v13 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    int v14 = v13;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v33, (unsigned int *)&v14, 0, memory_order_release, memory_order_relaxed);
    if (v14 != v13) {
      os_unfair_lock_unlock((os_unfair_lock_t)v33);
    }
    if ((*(_DWORD *)(a1 + 620) & 4) != 0) {
      mach_vm_address_t pages = mvm_allocate_pages(0x800000uLL, 0x17u, *(_DWORD *)(a1 + 620) & 0xFFFFFFFE, 2);
    }
    else {
      mach_vm_address_t pages = mvm_allocate_pages(0x800000uLL, 0x17u, *(_DWORD *)(a1 + 620) & 0xFFFFFFFC, 2);
    }
    unint64_t v32 = pages;
    int v16 = 0;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v33, (unsigned int *)&v16, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
    if (v16) {
      os_unfair_lock_lock_with_options();
    }
    if (v32)
    {
      region_set_cookie((_DWORD *)(v32 + 33276));
      unint64_t v38 = small_malloc_from_region_no_lock((atomic_uint *)a1, v33, v34, a2, v32);
      int v21 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
      int v22 = v21;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v33, (unsigned int *)&v22, 0, memory_order_release, memory_order_relaxed);
      if (v22 != v21) {
        os_unfair_lock_unlock((os_unfair_lock_t)v33);
      }
      int v23 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
      int v24 = v23;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v33 + 4), (unsigned int *)&v24, 0, memory_order_release, memory_order_relaxed);
      if (v24 != v23) {
        os_unfair_lock_unlock((os_unfair_lock_t)(v33 + 4));
      }
      return v38;
    }
    else
    {
      int v17 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
      int v18 = v17;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v33, (unsigned int *)&v18, 0, memory_order_release, memory_order_relaxed);
      if (v18 != v17) {
        os_unfair_lock_unlock((os_unfair_lock_t)v33);
      }
      int v19 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
      int v20 = v19;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v33 + 4), (unsigned int *)&v20, 0, memory_order_release, memory_order_relaxed);
      if (v20 != v19) {
        os_unfair_lock_unlock((os_unfair_lock_t)(v33 + 4));
      }
      return 0;
    }
  }
}

atomic_uint *mag_lock_zine_for_region_trailer_0(uint64_t a1, uint64_t a2, int a3)
{
  int v10 = a3;
  BOOL v8 = (atomic_uint *)(a1 + 2560 * a3);
  int v3 = 0;
  atomic_compare_exchange_strong_explicit(v8, (unsigned int *)&v3, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
  if (v3) {
    os_unfair_lock_lock_with_options();
  }
  while (1)
  {
    int v9 = *(_DWORD *)(a2 + 24);
    if (v10 == v9) {
      break;
    }
    int v4 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    int v5 = v4;
    atomic_compare_exchange_strong_explicit(v8, (unsigned int *)&v5, 0, memory_order_release, memory_order_relaxed);
    if (v5 != v4) {
      os_unfair_lock_unlock((os_unfair_lock_t)v8);
    }
    int v10 = v9;
    BOOL v8 = (atomic_uint *)(a1 + 2560 * v9);
    int v6 = 0;
    atomic_compare_exchange_strong_explicit(v8, (unsigned int *)&v6, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
    if (v6) {
      os_unfair_lock_lock_with_options();
    }
  }
  return v8;
}

uint64_t small_meta_header_set_in_use(uint64_t result, unsigned __int16 a2, __int16 a3)
{
  *(_WORD *)(result + 2 * a2) = a3;
  return result;
}

void free_small(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v22 = a2;
  int v19 = *(int *)((char *)&dword_18 + (a2 & 0xFFFFFFFFFF800000));
  uint64_t v18 = *(void *)(a1 + 624) + 2560 * v19;
  if (a4)
  {
    LOWORD(v20) = (unint64_t)(a4 + 511) >> 9;
  }
  else
  {
    uint64_t v20 = *(_WORD *)&stru_20.segname[2 * (((a2 - ((a2 & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF)
                                   + (a2 & 0xFFFFFFFFFF800000)] & 0x7FFF;
    if (*(__int16 *)&stru_20.segname[2 * (((a2 - ((a2 & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF)
                                    + (a2 & 0xFFFFFFFFFF800000)] < 0)
    {
LABEL_4:
      free_small_botch(a1);
      return;
    }
  }
  int v4 = 0;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v18, (unsigned int *)&v4, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
  if (v4) {
    os_unfair_lock_lock_with_options();
  }
  if (v19 != -1)
  {
    uint64_t v17 = *(void *)(v18 + 8);
    __int16 v16 = *(_WORD *)(v18 + 16);
    uint64_t v15 = *(void *)(v18 + 24);
    if (v22 == v17)
    {
      int v5 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
      int v6 = v5;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v18, (unsigned int *)&v6, 0, memory_order_release, memory_order_relaxed);
      if (v6 != v5) {
        os_unfair_lock_unlock((os_unfair_lock_t)v18);
      }
      goto LABEL_4;
    }
    if ((*(_DWORD *)(a1 + 620) & 0x20) != 0 && (_WORD)v20) {
      _platform_memset();
    }
    *(void *)(v18 + 8) = v22;
    *(_WORD *)(v18 + 16) = v20;
    *(void *)(v18 + 24) = a3;
    if (!v17)
    {
      int v7 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
      int v8 = v7;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v18, (unsigned int *)&v8, 0, memory_order_release, memory_order_relaxed);
      if (v8 != v7) {
        os_unfair_lock_unlock((os_unfair_lock_t)v18);
      }
      return;
    }
    LOWORD(v20) = v16;
    uint64_t v22 = v17;
    a3 = v15;
  }
  while (1)
  {
    int v14 = *(_DWORD *)(a3 + 24);
    if (v19 == v14) {
      break;
    }
    int v9 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    int v10 = v9;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v18, (unsigned int *)&v10, 0, memory_order_release, memory_order_relaxed);
    if (v10 != v9) {
      os_unfair_lock_unlock((os_unfair_lock_t)v18);
    }
    int v19 = v14;
    uint64_t v18 = *(void *)(a1 + 624) + 2560 * v14;
    int v11 = 0;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v18, (unsigned int *)&v11, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
    if (v11) {
      os_unfair_lock_lock_with_options();
    }
  }
  if (small_free_no_lock(a1, v18, v19, a3, v22, v20))
  {
    int v12 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    int v13 = v12;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v18, (unsigned int *)&v13, 0, memory_order_release, memory_order_relaxed);
    if (v13 != v12) {
      os_unfair_lock_unlock((os_unfair_lock_t)v18);
    }
  }
}

BOOL small_claimed_address(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = small_region_for_ptr_no_lock(a1, a2);
  BOOL v3 = 0;
  if (v4)
  {
    BOOL v3 = 0;
    if (a2 >= v4 + 33280) {
      return a2 < v4 + 0x800000;
    }
  }
  return v3;
}

uint64_t small_try_shrink_in_place(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unsigned __int16 v10 = a4 >> 9;
  __int16 v9 = (a3 >> 9) - v10;
  if ((unsigned __int16)(a3 >> 9) != v10)
  {
    uint64_t v8 = a2 + (v10 << 9);
    int v7 = mag_lock_zine_for_region_trailer_0(*(void *)(a1 + 624), a2 & 0xFFFFFFFFFF800000, *(int *)((char *)&dword_18 + (a2 & 0xFFFFFFFFFF800000)));
    small_meta_header_set_in_use((a2 & 0xFFFFFFFFFF800000) + 40, ((a2 - ((a2 & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF, v10);
    small_meta_header_set_in_use((v8 & 0xFFFFFFFFFF800000) + 40, ((v8 - ((v8 & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF, v9);
    ++*((_DWORD *)v7 + 542);
    int v4 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    int v5 = v4;
    atomic_compare_exchange_strong_explicit(v7, (unsigned int *)&v5, 0, memory_order_release, memory_order_relaxed);
    if (v5 != v4) {
      os_unfair_lock_unlock((os_unfair_lock_t)v7);
    }
    free_small(a1, v8, v8 & 0xFFFFFFFFFF800000, 0);
  }
  return a2;
}

uint64_t small_try_realloc_in_place(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v25 = (a2 & 0xFFFFFFFFFF800000) + 40;
  unsigned __int16 v24 = ((a2 - ((a2 & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF;
  unsigned __int16 v23 = a3 >> 9;
  unsigned __int16 v22 = (unint64_t)(a4 + 511) >> 9;
  unsigned int v21 = (((a2 - ((a2 & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF) + v23;
  if (v21 >= 0x3FBF) {
    return 0;
  }
  uint64_t v20 = a2 + a3;
  uint64_t v17 = mag_lock_zine_for_region_trailer_0(*(void *)(a1 + 624), a2 & 0xFFFFFFFFFF800000, *(int *)((char *)&dword_18 + (a2 & 0xFFFFFFFFFF800000)));
  if (*(int *)((char *)&dword_18 + (a2 & 0xFFFFFFFFFF800000)) == -1)
  {
    int v4 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    int v5 = v4;
    atomic_compare_exchange_strong_explicit(v17, (unsigned int *)&v5, 0, memory_order_release, memory_order_relaxed);
    if (v5 != v4) {
      os_unfair_lock_unlock((os_unfair_lock_t)v17);
    }
    return 0;
  }
  unsigned __int16 v16 = v22 - v23;
  unsigned __int16 v15 = *((_WORD *)v17 + 8);
  if (*((void *)v17 + 1) == v20 && v23 + v15 >= v22)
  {
    if (v15 == v16)
    {
      *((void *)v17 + 1) = 0;
      *((_WORD *)v17 + 8) = 0;
      *((void *)v17 + 3) = 0;
    }
    else
    {
      *((_WORD *)v17 + 8) -= v16;
      *((void *)v17 + 1) += a4 - a3;
      small_meta_header_set_in_use(v25, v24 + v22, v15 - v16);
    }
    small_meta_header_set_in_use(v25, v24, v22);
    small_meta_header_set_middle(v25, v21);
    goto LABEL_28;
  }
  if (*((void *)v17 + 268) == (a2 & 0xFFFFFFFFFF800000)
    && v16 < (int)(unsigned __int16)(*((void *)v17 + 266) >> 9)
    && (a2 & 0xFFFFFFFFFF800000) + 0x800000 - *((void *)v17 + 266) == a2 + a3)
  {
    small_meta_header_set_in_use(v25, v24, v22);
    small_meta_header_set_middle(v25, v21);
    *((void *)v17 + 266) -= v16 << 9;
    small_meta_header_set_in_use(v25, v24 + v22, *((void *)v17 + 266) >> 9);
LABEL_28:
    *((void *)v17 + 269) += (v22 - v23) << 9;
    unint64_t v13 = *(int *)((char *)dword_10 + (a2 & 0xFFFFFFFFFF800000)) + ((v22 - v23) << 9);
    *(int *)((char *)dword_10 + (a2 & 0xFFFFFFFFFF800000)) = v13;
    if (v13 >= 0x5F9E80) {
      *((unsigned char *)&stru_20.cmd + (a2 & 0xFFFFFFFFFF800000)) = 0;
    }
    int v10 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    int v11 = v10;
    atomic_compare_exchange_strong_explicit(v17, (unsigned int *)&v11, 0, memory_order_release, memory_order_relaxed);
    if (v11 != v10) {
      os_unfair_lock_unlock((os_unfair_lock_t)v17);
    }
    return 1;
  }
  __int16 v19 = *(_WORD *)(v25 + 2 * v21);
  if (v19 < 0)
  {
    unsigned __int16 v18 = v19 & 0x7FFF;
    if (v23 + (v19 & 0x7FFF) >= v22)
    {
      int v14 = (unsigned __int8 *)small_free_list_find_by_ptr(a1, (uint64_t)v17, v20, v18);
      small_free_list_remove_ptr(a1, (uint64_t)v17, v14, v18);
      small_meta_header_set_middle(v25, v21);
      if (v23 + v18 != v22) {
        small_free_list_add_ptr(a1, (uint64_t)v17, a2 + (v22 << 9), v23 + v18 - v22);
      }
      small_meta_header_set_in_use(v25, v24, v22);
      goto LABEL_28;
    }
    int v8 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    int v9 = v8;
    atomic_compare_exchange_strong_explicit(v17, (unsigned int *)&v9, 0, memory_order_release, memory_order_relaxed);
    if (v9 != v8) {
      os_unfair_lock_unlock((os_unfair_lock_t)v17);
    }
    return 0;
  }
  else
  {
    int v6 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    int v7 = v6;
    atomic_compare_exchange_strong_explicit(v17, (unsigned int *)&v7, 0, memory_order_release, memory_order_relaxed);
    if (v7 != v6) {
      os_unfair_lock_unlock((os_unfair_lock_t)v17);
    }
    return 0;
  }
}

uint64_t small_meta_header_set_middle(uint64_t result, unsigned __int16 a2)
{
  *(_WORD *)(result + 2 * a2) = 0;
  return result;
}

uint64_t small_check_region(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v43 = a1;
  uint64_t v42 = a2;
  uint64_t v41 = a3;
  unsigned int v40 = a4;
  unint64_t v39 = a2 + 33280;
  unint64_t v38 = ((a2 + 33280) & 0xFFFFFFFFFF800000) + 40;
  unint64_t v37 = a2 + 0x800000;
  __int16 v36 = 0;
  int v35 = 0;
  __int16 v34 = 0;
  unsigned __int16 v33 = 0;
  unint64_t v32 = 0;
  unint64_t v31 = 0;
  unint64_t v30 = 0;
  unint64_t v29 = 0;
  int v28 = 0;
  int v28 = *(int *)((char *)&dword_18 + ((a2 + 33280) & 0xFFFFFFFFFF800000));
  int v27 = 0;
  int v27 = (void *)(*(void *)(a1 + 624) + 2560 * v28);
  if (a2 == v27[268])
  {
    v39 += v27[267];
    v37 -= v27[266];
  }
  while (v39 < v37)
  {
    unint64_t v4 = (v39 & 0xFFFFFFFFFF800000) + 33280;
    int v35 = ((v39 - v4) >> 9) & 0x3FFF;
    __int16 v34 = *(_WORD *)(v38 + 2 * (((v39 - v4) >> 9) & 0x3FFF));
    if (v34 < 0)
    {
      unsigned __int16 v33 = v34 & 0x7FFF;
      unint64_t v26 = v39;
      unint64_t v32 = (unsigned __int8 *)v39;
      unint64_t v29 = v39 + ((unsigned __int16)(v34 & 0x7FFF) << 9);
      if ((v34 & 0x7FFF) == 0)
      {
        uint64_t v8 = v41;
        uint64_t v9 = v40;
        unint64_t v10 = v39;
        unint64_t v11 = 0;
        malloc_zone_check_fail((uint64_t)small_check_fail_msg[0], (uint64_t)"%ld, counter=%d\n*** invariant broken for free block %p this msize=%d\n");
        return 0;
      }
      if (small_needs_oob_free_entry(v39, v33))
      {
        unint64_t ptr = (unsigned __int8 *)small_oob_free_find_ptr(v39);
        if (ptr) {
          unint64_t v32 = ptr;
        }
      }
      uint64_t previous = small_free_list_get_previous(v43, v32);
      unint64_t v31 = previous;
      uint64_t next = small_free_list_get_next(v43, (unint64_t)v32);
      unint64_t v30 = next;
      if (previous)
      {
        unint64_t v21 = (small_free_list_get_ptr(v31) & 0xFFFFFFFFFF800000) + 40;
        unint64_t v22 = small_free_list_get_ptr(v31);
        if (*(__int16 *)(v21
                        + 2 * (((v22 - ((small_free_list_get_ptr(v31) & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF)) >= 0)
        {
          uint64_t v20 = small_check_fail_msg[0];
          uint64_t v8 = v41;
          uint64_t v9 = v40;
          unint64_t v10 = v39;
          unint64_t v11 = small_free_list_get_ptr(v31);
          malloc_zone_check_fail((uint64_t)v20, (uint64_t)"%ld, counter=%d\n*** invariant broken for %p (previous %p is not a free pointer)\n");
          return 0;
        }
      }
      if (v30)
      {
        unint64_t v18 = (small_free_list_get_ptr(v30) & 0xFFFFFFFFFF800000) + 40;
        unint64_t v19 = small_free_list_get_ptr(v30);
        if (*(__int16 *)(v18
                        + 2 * (((v19 - ((small_free_list_get_ptr(v30) & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF)) >= 0)
        {
          uint64_t v17 = small_check_fail_msg[0];
          uint64_t v8 = v41;
          uint64_t v9 = v40;
          unint64_t v10 = v39;
          unint64_t v11 = small_free_list_get_ptr(v30);
          malloc_zone_check_fail((uint64_t)v17, (uint64_t)"%ld, counter=%d\n*** invariant broken for %p (next %p is not a free pointer)\n");
          return 0;
        }
      }
      if ((*(_WORD *)&stru_20.segname[2 * (((v29 - 2 - (((v29 - 2) & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF)
                                     + ((v29 - 2) & 0xFFFFFFFFFF800000)] & 0x7FFF) != v33)
      {
        uint64_t v6 = *(_WORD *)&stru_20.segname[2 * (((v29 - 2 - (((v29 - 2) & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF)
                                      + ((v29 - 2) & 0xFFFFFFFFFF800000)] & 0x7FFF;
        unsigned __int16 v16 = &v8;
        uint64_t v8 = v41;
        uint64_t v9 = v40;
        unint64_t v10 = v39;
        unint64_t v11 = v29;
        unint64_t v12 = v42 + 33280;
        unint64_t v13 = v37;
        uint64_t v14 = v33;
        uint64_t v15 = v6;
        malloc_zone_check_fail((uint64_t)small_check_fail_msg[0], (uint64_t)"%ld, counter=%d\n*** invariant broken for small free %p followed by %p in region [%p-%p] (end marker incorrect) should be %d; in fact %d\n");
        return 0;
      }
      unint64_t v39 = v29;
      __int16 v36 = 0x8000;
    }
    else
    {
      unsigned __int16 v33 = v34;
      if (!v34)
      {
        unint64_t v5 = *(void *)(v43 + 8);
        uint64_t v8 = v41;
        uint64_t v9 = v40;
        unint64_t v10 = v39;
        unint64_t v11 = v5;
        unint64_t v12 = v37;
        malloc_zone_check_fail((uint64_t)small_check_fail_msg[0], (uint64_t)"%ld, counter=%d\n*** invariant broken: null msize ptr=%p num_small_regions=%d end=%p\n");
        return 0;
      }
      v39 += v33 << 9;
      __int16 v36 = 0;
    }
  }
  return 1;
}

BOOL small_needs_oob_free_entry(uint64_t a1, unsigned __int16 a2)
{
  BOOL v3 = 0;
  if ((a1 & ~(vm_page_size - 1)) == a1) {
    return a2 << 9 >= vm_kernel_page_size;
  }
  return v3;
}

uint64_t small_oob_free_find_ptr(uint64_t a1)
{
  unint64_t v3 = a1 & 0xFFFFFFFFFF800000;
  for (int i = 0; (unint64_t)i < 0x21; ++i)
  {
    if (small_oob_free_entry_get_ptr(v3 + 32678 + 18 * i) == a1 && *(__int16 *)(v3 + 32678 + 18 * i + 16) < 0) {
      return v3 + 32678 + 18 * i;
    }
  }
  return 0;
}

uint64_t small_free_list_get_previous(uint64_t a1, unsigned __int8 *a2)
{
  if (!a2)
  {
    __break(1u);
    JUMPOUT(0x28E68);
  }
  if (small_is_oob_free_entry((unint64_t)a2)) {
    return small_oob_free_entry_get_previous((uint64_t)a2);
  }
  else {
    return small_inplace_free_entry_get_previous(a1, a2);
  }
}

uint64_t small_free_list_get_next(uint64_t a1, unint64_t a2)
{
  if (!a2)
  {
    __break(1u);
    JUMPOUT(0x28EF4);
  }
  if (small_is_oob_free_entry(a2)) {
    return small_oob_free_entry_get_next(a2);
  }
  else {
    return small_inplace_free_entry_get_next(a1, a2);
  }
}

unint64_t small_free_list_get_ptr(unint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (small_is_oob_free_entry(a1)) {
    return small_oob_free_entry_get_ptr(a1);
  }
  return a1;
}

uint64_t small_in_use_enumerator(unsigned int a1, uint64_t a2, int a3, uint64_t a4, uint64_t (*a5)(void, unint64_t, unint64_t, uint64_t *), void (*a6)(void, uint64_t, uint64_t, uint64_t *, uint64_t))
{
  unsigned int v38 = a1;
  uint64_t v37 = a2;
  int v36 = a3;
  uint64_t v35 = a4;
  __int16 v34 = a5;
  unsigned __int16 v33 = a6;
  unint64_t v32 = 0;
  unint64_t i = 0;
  uint64_t v30 = 0;
  unsigned int v29 = 0;
  unsigned int v28 = 0;
  unint64_t v27 = 0;
  unint64_t v25 = 0;
  uint64_t v26 = 0;
  unint64_t v23 = 0;
  uint64_t v24 = 0;
  unint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v20 = 0;
  uint64_t v19 = 0;
  unsigned int v18 = 0;
  unsigned int v17 = 0;
  __int16 v16 = 0;
  unsigned __int16 v15 = 0;
  uint64_t v14 = 0;
  unint64_t v13 = 0;
  unsigned int v28 = a5(a1, *(void *)(a4 + 17304), 32uLL, (uint64_t *)&v13);
  if (v28)
  {
    return v28;
  }
  else
  {
    unint64_t v32 = *v13;
    unsigned int v28 = v34(v38, v13[2], 8 * v32, &v30);
    if (v28)
    {
      return v28;
    }
    else if ((v36 & 1) != 0 && (unsigned int v28 = v34(v38, *(void *)(v35 + 17904), 2560 * *(int *)(v35 + 17888), &v14)) != 0)
    {
      return v28;
    }
    else
    {
      for (unint64_t i = 0; i < v32; ++i)
      {
        unint64_t v27 = *(void *)(v30 + 8 * i);
        if (v27 && v27 != -1)
        {
          unint64_t v25 = v27 + 33280;
          uint64_t v26 = 8355328;
          if ((v36 & 4) != 0)
          {
            unint64_t v23 = v27;
            uint64_t v24 = 32678;
            v33(v38, v37, 4, (uint64_t *)&v23, 1);
          }
          if ((v36 & 6) != 0)
          {
            unint64_t v21 = v25;
            uint64_t v22 = 8355328;
            v33(v38, v37, 2, (uint64_t *)&v21, 1);
          }
          if (v36)
          {
            unsigned int v28 = v34(v38, v27, 0x800000uLL, &v20);
            if (v28) {
              return v28;
            }
            unint64_t v10 = (void *)(v14 + 2560 * *(int *)(v20 + 24));
            int v9 = 0;
            for (int j = 0; j < *(_DWORD *)(v35 + 17888); ++j)
            {
              if (v27 == *(void *)(v14 + 2560 * j + 24)) {
                ++v9;
              }
            }
            uint64_t v19 = v20 + 40;
            unsigned int v18 = 0;
            unsigned int v17 = 16319;
            if (v27 == v10[268])
            {
              v18 += v10[267] >> 9;
              v17 -= v10[266] >> 9;
            }
            while (v18 < v17)
            {
              __int16 v16 = *(_WORD *)(v19 + 2 * v18);
              unsigned __int16 v15 = v16 & 0x7FFF;
              if ((v16 & 0x7FFF) == 0) {
                return 5;
              }
              if (v16 >= 0)
              {
                uint64_t v8 = v27 + 33280 + (v18 << 9);
                int v7 = 0;
                if (v9)
                {
                  for (int k = 0; k < *(_DWORD *)(v35 + 17888); ++k)
                  {
                    if (v8 == *(void *)(v14 + 2560 * k + 8))
                    {
                      int v7 = 1;
                      --v9;
                      break;
                    }
                  }
                }
                if (!v7)
                {
                  v40[2 * v29] = v8;
                  v40[2 * v29++ + 1] = v15 << 9;
                  if (v29 >= 0x100)
                  {
                    v33(v38, v37, 1, v40, v29);
                    unsigned int v29 = 0;
                  }
                }
              }
              v18 += v15;
            }
            if (v29)
            {
              v33(v38, v37, 1, v40, v29);
              unsigned int v29 = 0;
            }
          }
        }
      }
      return 0;
    }
  }
}

unint64_t small_malloc_from_free_list(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 a4)
{
  if (a4 > 0x1Fu) {
    unsigned int v5 = 30;
  }
  else {
    unsigned int v5 = a4 - 1;
  }
  uint64_t v12 = a2 + 32;
  unint64_t v11 = (unint64_t *)(a2 + 32 + 8 * v5);
  if (small_free_list_get_ptr(*v11))
  {
    unint64_t ptr = small_free_list_get_ptr(*v11);
    unsigned __int16 v14 = a4;
    small_free_list_remove_ptr(a1, a2, (unsigned __int8 *)*v11, a4);
  }
  else
  {
    int v8 = v5 >> 5;
    unsigned int v10 = 0;
    for (int i = ~((1 << (v5 & 0x1F)) - 1); !v8; int i = -1)
    {
      unsigned int v10 = *(_DWORD *)(a2 + 2088) & i;
      if (v10) {
        break;
      }
      int v8 = 1;
    }
    if ((v10 || v8 != 1)
      && (unint64_t v13 = (unsigned __int8 **)(v12 + 8 * (__clz(__rbit32(v10)) + 32 * v8)),
          (unint64_t ptr = small_free_list_get_ptr((unint64_t)*v13)) != 0))
    {
      unsigned __int16 v14 = *(_WORD *)&stru_20.segname[2 * (((ptr - ((ptr & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF)
                                     + (ptr & 0xFFFFFFFFFF800000)] & 0x7FFF;
      small_free_list_remove_ptr(a1, a2, *v13, v14);
      if (v14 > (int)a4)
      {
        small_free_list_add_ptr(a1, a2, ptr + (a4 << 9), v14 - a4);
        unsigned __int16 v14 = a4;
      }
    }
    else
    {
      if (*(void *)(a2 + 2128) < (unint64_t)(a4 << 9)) {
        return 0;
      }
      unint64_t ptr = *(void *)(a2 + 2144) + 0x800000 - *(void *)(a2 + 2128);
      *(void *)(a2 + 2128) -= a4 << 9;
      if (*(void *)(a2 + 2128)) {
        small_meta_header_set_in_use((ptr & 0xFFFFFFFFFF800000) + 40, ((ptr + (a4 << 9) - (((ptr + (a4 << 9)) & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF, *(void *)(a2 + 2128) >> 9);
      }
      unsigned __int16 v14 = a4;
    }
  }
  ++*(_DWORD *)(a2 + 2168);
  *(void *)(a2 + 2152) += v14 << 9;
  region_check_cookie(ptr & 0xFFFFFFFFFF800000, (int *)((ptr & 0xFFFFFFFFFF800000) + 33276));
  unint64_t v6 = *(int *)((char *)dword_10 + (ptr & 0xFFFFFFFFFF800000)) + (v14 << 9);
  *(int *)((char *)dword_10 + (ptr & 0xFFFFFFFFFF800000)) = v6;
  if (v6 >= 0x5F9E80) {
    *((unsigned char *)&stru_20.cmd + (ptr & 0xFFFFFFFFFF800000)) = 0;
  }
  small_meta_header_set_in_use((ptr & 0xFFFFFFFFFF800000) + 40, ((ptr - ((ptr & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF, v14);
  return ptr;
}

uint64_t small_get_region_from_depot(uint64_t a1, uint64_t a2, int a3, unsigned __int16 a4)
{
  uint64_t v16 = *(void *)(a1 + 624) - 2560;
  int v4 = 0;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v16, (unsigned int *)&v4, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
  if (v4) {
    os_unfair_lock_lock_with_options();
  }
  unsigned __int16 v14 = a4;
  while (1)
  {
    unint64_t msize_region = small_find_msize_region(a1, v16, 0xFFFFFFFFLL, v14);
    if (!msize_region)
    {
      int v5 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
      int v6 = v5;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v16, (unsigned int *)&v6, 0, memory_order_release, memory_order_relaxed);
      if (v6 != v5) {
        os_unfair_lock_unlock((os_unfair_lock_t)v16);
      }
      return 0;
    }
    if (!*(_DWORD *)(msize_region + 28)) {
      break;
    }
    if (++v14 > 0x1Eu)
    {
      int v7 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
      int v8 = v7;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v16, (unsigned int *)&v8, 0, memory_order_release, memory_order_relaxed);
      if (v8 != v7) {
        os_unfair_lock_unlock((os_unfair_lock_t)v16);
      }
      return 0;
    }
  }
  if (*(void *)msize_region) {
    *(void *)(*(void *)msize_region + 8) = *(void *)(msize_region + 8);
  }
  else {
    *(void *)(v16 + 2176) = *(void *)(msize_region + 8);
  }
  if (*(void *)(msize_region + 8)) {
    **(void **)(msize_region + 8) = *(void *)msize_region;
  }
  else {
    *(void *)(v16 + 2184) = *(void *)msize_region;
  }
  *(void *)unint64_t msize_region = 0;
  *(void *)(msize_region + 8) = 0;
  --*(_DWORD *)(v16 + 2172);
  int v13 = small_free_detach_region(a1, v16, msize_region);
  *(_DWORD *)(msize_region + 24) = a3;
  if (*(_DWORD *)(msize_region + 28))
  {
    __break(1u);
    JUMPOUT(0x29F9CLL);
  }
  uint64_t v12 = small_free_reattach_region(a1, a2, msize_region);
  *(void *)(v16 + 2152) -= v12;
  *(void *)(v16 + 2160) -= 8355328;
  *(_DWORD *)(v16 + 2168) -= v13;
  *(void *)(a2 + 2152) += v12;
  *(void *)(a2 + 2160) += 8355328;
  *(_DWORD *)(a2 + 2168) += v13;
  if (*(void *)(a2 + 2184))
  {
    *(void *)unint64_t msize_region = *(void *)(a2 + 2184);
    *(void *)(*(void *)(a2 + 2184) + 8) = msize_region;
  }
  else
  {
    *(void *)(a2 + 2176) = msize_region;
    *(void *)unint64_t msize_region = 0;
  }
  *(void *)(a2 + 2184) = msize_region;
  *(void *)(msize_region + 8) = 0;
  *(unsigned char *)(msize_region + 32) = 0;
  ++*(_DWORD *)(a2 + 2172);
  int v9 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  int v10 = v9;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v16, (unsigned int *)&v10, 0, memory_order_release, memory_order_relaxed);
  if (v10 != v9) {
    os_unfair_lock_unlock((os_unfair_lock_t)v16);
  }
  return 1;
}

uint64_t region_set_cookie(_DWORD *a1)
{
  uint64_t result = region_cookie();
  *a1 = result;
  return result;
}

unint64_t small_malloc_from_region_no_lock(atomic_uint *a1, uint64_t a2, int a3, unsigned __int16 a4, unint64_t a5)
{
  if (*(void *)(a2 + 2128) || *(void *)(a2 + 2136)) {
    small_finalize_region(a1, a2);
  }
  *(_DWORD *)(a5 + 24) = a3;
  rack_region_insert(a1, a5);
  *(void *)(a2 + 2144) = a5;
  *(_DWORD *)(a5 + 16) = a4 << 9;
  small_meta_header_set_in_use(((a5 + 33280) & 0xFFFFFFFFFF800000) + 40, 0, a4);
  ++*(_DWORD *)(a2 + 2168);
  *(void *)(a2 + 2152) += a4 << 9;
  *(void *)(a2 + 2160) += 8355328;
  small_meta_header_set_in_use(((a5 + 33280) & 0xFFFFFFFFFF800000) + 40, a4, 16319 - a4);
  *(void *)(a2 + 2128) = (16319 - a4) << 9;
  *(void *)(a2 + 2136) = 0;
  if (*(void *)(a2 + 2184))
  {
    *(void *)a5 = *(void *)(a2 + 2184);
    *(void *)(*(void *)(a2 + 2184) + 8) = a5;
  }
  else
  {
    *(void *)(a2 + 2176) = a5;
    *(void *)a5 = 0;
  }
  *(void *)(a2 + 2184) = a5;
  *(void *)(a5 + 8) = 0;
  *(unsigned char *)(a5 + 32) = 0;
  ++*(_DWORD *)(a2 + 2172);
  return a5 + 33280;
}

uint64_t small_size(uint64_t a1, uint64_t a2)
{
  if (!small_region_for_ptr_no_lock(a1, a2)) {
    return 0;
  }
  if ((((a2 - ((a2 & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF) >= 0x3FBF) {
    return 0;
  }
  __int16 v5 = *(_WORD *)&stru_20.segname[2 * (((a2 - ((a2 & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF)
                                + (a2 & 0xFFFFFFFFFF800000)];
  if (v5 >= 0)
  {
    int v3 = *(int *)((char *)&dword_18 + (a2 & 0xFFFFFFFFFF800000));
    if (v3 == -1)
    {
      for (int i = 0; i < *(_DWORD *)(a1 + 608); ++i)
      {
        if (a2 == *(void *)(*(void *)(a1 + 624) + 2560 * i + 8)) {
          return 0;
        }
      }
    }
    else if (a2 == *(void *)(*(void *)(a1 + 624) + 2560 * v3 + 8))
    {
      return 0;
    }
    return (unsigned __int16)v5 << 9;
  }
  return 0;
}

void free_small_botch(uint64_t a1)
{
}

uint64_t small_free_no_lock(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, unsigned __int16 a6)
{
  uint64_t v20 = a5;
  unsigned __int16 v19 = a6;
  unint64_t v18 = a5 & 0xFFFFFFFFFF800000 | 0x28;
  unsigned int v17 = ((a5 - 33280) >> 9) & 0x3FFF;
  uint64_t v16 = a6 << 9;
  unint64_t v15 = a5 + v16;
  unsigned __int16 v14 = v17 + a6;
  if (malloc_tracing_enabled) {
    kdebug_trace();
  }
  uint64_t v13 = v20;
  region_check_cookie(a4, (int *)(a4 + 33276));
  if (v17 && (*(_WORD *)(v18 + 2 * (v17 - 1)) & 0x8000) != 0)
  {
    unsigned __int16 v12 = *(_WORD *)(v18 + 2 * (v17 - 1)) & 0x7FFF;
    if (*(unsigned __int16 *)(v18 + 2 * (v17 - v12)) != (v12 | 0x8000))
    {
      qword_C0118 = (uint64_t)"small free list metadata inconsistency (headers[previous] != previous size)";
      __break(1u);
      JUMPOUT(0x2A8B4);
    }
    unint64_t v11 = (unsigned __int8 *)small_free_list_find_by_ptr(a1, a2, v20 - (v12 << 9), v12);
    small_free_list_remove_ptr(a1, a2, v11, v12);
    v20 -= v12 << 9;
    small_meta_header_set_middle(v18, v17);
    v19 += v12;
  }
  if (v15 < a4 + 0x800000 && (*(_WORD *)(v18 + 2 * v14) & 0x8000) != 0)
  {
    unsigned __int16 v10 = *(_WORD *)(v18 + 2 * v14) & 0x7FFF;
    int v9 = (unsigned __int8 *)small_free_list_find_by_ptr(a1, a2, v15, v10);
    small_free_list_remove_ptr(a1, a2, v9, v10);
    v19 += v10;
  }
  if ((*(unsigned char *)(a1 + 620) & 0x20) != 0)
  {
    if (v19) {
      _platform_memset();
    }
    else {
      malloc_zone_error(*(_DWORD *)(a1 + 620), 1, (uint64_t)"incorrect size information for %p - block header was damaged\n");
    }
  }
  int v6 = (unsigned __int8 *)small_free_list_add_ptr(a1, a2, v20, v19);
  int v8 = v6;
  *(void *)(a2 + 2152) -= v16;
  *(_DWORD *)(a4 + 16) -= v16;
  if (aggressive_madvise_enabled) {
    small_madvise_free_range_no_lock(a1, (atomic_uint *)a2, a4, v6, v19, v13, v16);
  }
  return small_free_try_recirc_to_depot(a1, (atomic_uint *)a2, a3, a4, v8, v19, v13, v16);
}

uint64_t print_small_free_list(unsigned int a1, unsigned int (*a2)(void, uint64_t, uint64_t, uint64_t *), void (*a3)(const char *), uint64_t a4)
{
  unsigned int v16 = a1;
  unint64_t v15 = a2;
  unsigned __int16 v14 = a3;
  uint64_t v13 = a4;
  unint64_t v12 = 0;
  uint64_t result = _simple_salloc();
  uint64_t v11 = result;
  int i = 0;
  if (result)
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
    if (v15(v16, v13, 768, &v9))
    {
      return ((uint64_t (*)(const char *))v14)("Failed to map small rack\n");
    }
    else if (v15(v16, *(void *)(v9 + 624), 2560 * *(int *)(v9 + 608), &v8))
    {
      return ((uint64_t (*)(const char *))v14)("Failed to map small rack magazines\n");
    }
    else
    {
      _simple_sappend();
      for (int i = -1; i < *(_DWORD *)(v9 + 608); ++i)
      {
        unsigned int v7 = 0;
        _simple_sprintf();
        while (v7 < 0x1F)
        {
          unint64_t v12 = *(void *)(v8 + 2560 * i + 32 + 8 * v7);
          if (small_free_list_get_ptr_task(v16, (unsigned int (*)(void, void, void, void))v15, v14, v12))
          {
            small_free_list_count(v16, v15, v14, v13, v12);
            _simple_sprintf();
          }
          ++v7;
        }
        _simple_sappend();
      }
      int v6 = (void (*)(const char *, ...))v14;
      __int16 v5 = (const char *)_simple_string();
      v6("%s\n", v5);
      return _simple_sfree();
    }
  }
  return result;
}

unint64_t small_free_list_get_ptr_task(unsigned int a1, unsigned int (*a2)(void, void, void, void), void (*a3)(const char *), unint64_t a4)
{
  if (!a4) {
    return 0;
  }
  if (small_is_oob_free_entry(a4)) {
    return small_oob_free_entry_get_ptr_task(a1, a2, a3, a4);
  }
  return a4;
}

uint64_t small_free_list_count(unsigned int a1, unsigned int (*a2)(void, uint64_t, uint64_t, uint64_t *), void (*a3)(const char *), uint64_t a4, unint64_t next_task)
{
  unsigned int v6 = 0;
  while (next_task)
  {
    ++v6;
    next_tasint k = small_free_list_get_next_task(a1, a2, a3, a4, next_task);
  }
  return v6;
}

uint64_t print_small_region(unsigned int a1, unsigned int (*a2)(void, void, void, void), uint64_t (*a3)(const char *, ...), uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v32 = a1;
  unint64_t v31 = a2;
  uint64_t v30 = a3;
  uint64_t v29 = a4;
  int v28 = a5;
  uint64_t v27 = a6;
  uint64_t v26 = a7;
  uint64_t v25 = a8;
  int v24 = 0;
  unint64_t v23 = (const void *)(a6 + 33280);
  unint64_t v22 = a6 + 33280 + a7;
  unint64_t v21 = a6 + 0x800000 - a8;
  uint64_t v20 = 0;
  uint64_t v16 = 0;
  if (a2(a1, a6 + 33280, 0x800000, &v20)) {
    return v30("Failed to map small region at %p\n", v23);
  }
  uint64_t v15 = v20 - (void)v23;
  uint64_t v14 = v20;
  if (v27 == -1)
  {
    uint64_t result = _simple_salloc();
    if (result)
    {
      _simple_sprintf();
      unint64_t v12 = (void (*)(const char *, ...))v30;
      uint64_t v9 = (const char *)_simple_string();
      v12("%s\n", v9);
      return _simple_sfree();
    }
  }
  else
  {
    _platform_memset();
    while (v22 < v21)
    {
      __int16 v19 = *(void *)((v22 & 0xFFFFFFFFFF800000)
                      + 40
                      + 2 * (((v22 - ((v22 & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF)
                      + v15);
      unsigned __int16 v18 = v19 & 0x7FFF;
      if ((v19 & 0x7FFF) == 0)
      {
        v30("*** error with %p: msize=%d, free: %x\n", (const void *)v22, 0, v19 & 0x8000);
        break;
      }
      if (v19 < 0)
      {
        if (((v22 + 10 + vm_page_size - 1) & ~(vm_page_size - 1)) < ((v22 + (v18 << 9) - 2) & ~(vm_page_size - 1))) {
          v16 += ((v22 + (v18 << 9) - 2) & ~(vm_page_size - 1)) - ((v22 + 10 + vm_page_size - 1) & ~(vm_page_size - 1));
        }
      }
      else
      {
        if (v18 < 0x400u) {
          ++v33[v18];
        }
        ++v24;
      }
      v22 += v18 << 9;
    }
    uint64_t result = _simple_salloc();
    if (result)
    {
      int v13 = *(_DWORD *)(v14 + 24);
      _simple_sprintf();
      _simple_sprintf();
      _simple_sprintf();
      if (v25 || v26) {
        _simple_sprintf();
      }
      if (v13 != -1)
      {
        _simple_sprintf();
        small_region_below_recirc_threshold(v14);
      }
      _simple_sprintf();
      if (v28 >= 2 && v24)
      {
        _simple_sappend();
        for (unsigned int i = 0; i < 0x400; ++i)
        {
          if (v33[i]) {
            _simple_sprintf();
          }
        }
      }
      uint64_t v11 = (void (*)(const char *, ...))v30;
      unsigned __int16 v10 = (const char *)_simple_string();
      v11("%s\n", v10);
      return _simple_sfree();
    }
  }
  return result;
}

BOOL small_region_below_recirc_threshold(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) < 0x5F9E80u;
}

uint64_t small_free_list_check(uint64_t a1, unsigned int a2)
{
  for (int i = -1; i < *(_DWORD *)(a1 + 608); ++i)
  {
    unsigned __int16 v18 = (atomic_uint *)(*(void *)(a1 + 624) + 2560 * i);
    int v2 = 0;
    atomic_compare_exchange_strong_explicit(v18, (unsigned int *)&v2, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
    if (v2) {
      os_unfair_lock_lock_with_options();
    }
    int v17 = 0;
    uint64_t next = *(unsigned __int8 **)(*(void *)(a1 + 624) + 2560 * i + 32 + 8 * a2);
    uint64_t v15 = 0;
    for (unint64_t j = small_free_list_get_ptr((unint64_t)next); j; unint64_t j = small_free_list_get_ptr((unint64_t)next))
    {
      if (*(__int16 *)&stru_20.segname[2 * (((j - ((j & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF)
                                      + (j & 0xFFFFFFFFFF800000)] >= 0)
      {
        malloc_zone_check_fail((uint64_t)small_freelist_fail_msg, (uint64_t)" (slot=%u), counter=%d\n*** in-use ptr in free list slot=%u count=%d ptr=%p\n");
        int v4 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
        int v5 = v4;
        atomic_compare_exchange_strong_explicit(v18, (unsigned int *)&v5, 0, memory_order_release, memory_order_relaxed);
        if (v5 != v4) {
          os_unfair_lock_unlock((os_unfair_lock_t)v18);
        }
        return 0;
      }
      if ((j & 0x1FF) != 0)
      {
        malloc_zone_check_fail((uint64_t)small_freelist_fail_msg, (uint64_t)" (slot=%u), counter=%d\n*** unaligned ptr in free list slot=%u count=%d ptr=%p\n");
        int v6 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
        int v7 = v6;
        atomic_compare_exchange_strong_explicit(v18, (unsigned int *)&v7, 0, memory_order_release, memory_order_relaxed);
        if (v7 != v6) {
          os_unfair_lock_unlock((os_unfair_lock_t)v18);
        }
        return 0;
      }
      if (!small_region_for_ptr_no_lock(a1, j))
      {
        malloc_zone_check_fail((uint64_t)small_freelist_fail_msg, (uint64_t)" (slot=%u), counter=%d\n*** ptr not in szone slot=%d count=%d ptr=%p\n");
        int v8 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
        int v9 = v8;
        atomic_compare_exchange_strong_explicit(v18, (unsigned int *)&v9, 0, memory_order_release, memory_order_relaxed);
        if (v9 != v8) {
          os_unfair_lock_unlock((os_unfair_lock_t)v18);
        }
        return 0;
      }
      if ((unsigned __int8 *)small_free_list_get_previous(a1, next) != v15)
      {
        malloc_zone_check_fail((uint64_t)small_freelist_fail_msg, (uint64_t)" (slot=%u), counter=%d\n*** previous incorrectly set slot=%u count=%d ptr=%p\n");
        int v10 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
        int v11 = v10;
        atomic_compare_exchange_strong_explicit(v18, (unsigned int *)&v11, 0, memory_order_release, memory_order_relaxed);
        if (v11 != v10) {
          os_unfair_lock_unlock((os_unfair_lock_t)v18);
        }
        return 0;
      }
      uint64_t v15 = next;
      uint64_t next = (unsigned __int8 *)small_free_list_get_next(a1, (unint64_t)next);
      ++v17;
    }
    int v12 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    int v13 = v12;
    atomic_compare_exchange_strong_explicit(v18, (unsigned int *)&v13, 0, memory_order_release, memory_order_relaxed);
    if (v13 != v12) {
      os_unfair_lock_unlock((os_unfair_lock_t)v18);
    }
  }
  return 1;
}

unint64_t small_oob_free_entry_get_ptr(uint64_t a1)
{
  if (*(__int16 *)(a1 + 16) < 0) {
    return (a1 & 0xFFFFFFFFFF800000) + ((unsigned __int16)(*(_WORD *)(a1 + 16) & 0x7FFF) << 9);
  }
  else {
    return 0;
  }
}

uint64_t small_free_mark_middle(uint64_t a1, unint64_t a2, unsigned __int16 a3)
{
  unint64_t ptr = small_free_list_get_ptr(a2);
  uint64_t v6 = (ptr & 0xFFFFFFFFFF800000) + 40;
  unint64_t v5 = ((ptr - ((ptr & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF;
  unint64_t v4 = ((ptr + (a3 << 9) - 1 - (((ptr + (a3 << 9) - 1) & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF;
  if (v5 > v4)
  {
    __break(1u);
    JUMPOUT(0x2BED0);
  }
  if ((*(_WORD *)&stru_20.segname[2 * v5 + (ptr & 0xFFFFFFFFFF800000)] & 0x7FFF) != a3)
  {
    __break(1u);
    JUMPOUT(0x2BF08);
  }
  small_meta_header_set_middle(v6, v5);
  return small_meta_header_set_middle(v6, v4);
}

unint64_t small_free_list_from_ptr(uint64_t a1, uint64_t a2, unsigned __int16 a3)
{
  if (!a3)
  {
    __break(1u);
    JUMPOUT(0x2BF78);
  }
  uint64_t v6 = a2;
  if (small_needs_oob_free_entry(a2, a3))
  {
    unint64_t empty = small_oob_free_find_empty(a2);
    if (empty)
    {
      small_oob_free_entry_set_ptr(empty, a2);
      return empty;
    }
  }
  return v6;
}

void *small_free_list_set_previous(uint64_t a1, void *a2, uint64_t a3)
{
  if (small_is_oob_free_entry((unint64_t)a2)) {
    return small_oob_free_entry_set_previous(a2, a3);
  }
  else {
    return (void *)small_inplace_free_entry_set_previous(a1, (uint64_t)a2, a3);
  }
}

uint64_t small_free_list_set_next(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (small_is_oob_free_entry(a2)) {
    return small_oob_free_entry_set_next(a2, a3);
  }
  else {
    return small_inplace_free_entry_set_next(a1, a2, a3);
  }
}

uint64_t small_free_mark_free(uint64_t a1, unint64_t a2, unsigned __int16 a3)
{
  unint64_t ptr = small_free_list_get_ptr(a2);
  uint64_t v6 = (ptr & 0xFFFFFFFFFF800000) + 40;
  unint64_t v5 = ((ptr - ((ptr & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF;
  unint64_t v4 = ((ptr + (a3 << 9) - 1 - (((ptr + (a3 << 9) - 1) & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF;
  if (v5 > v4)
  {
    __break(1u);
    JUMPOUT(0x2C19CLL);
  }
  small_meta_header_set_is_free(v6, v5, a3);
  return small_meta_header_set_is_free(v6, v4, a3);
}

unint64_t small_oob_free_find_empty(uint64_t a1)
{
  for (int i = 0; (unint64_t)i < 0x21; ++i)
  {
    if (!*(_WORD *)((char *)&loc_7FA4 + 18 * i + (a1 & 0xFFFFFFFFFF800000) + 18)) {
      return (a1 & 0xFFFFFFFFFF800000) + 32678 + 18 * i;
    }
  }
  return 0;
}

uint64_t small_oob_free_entry_set_ptr(uint64_t result, int a2)
{
  *(_WORD *)(result + 16) = ((unint64_t)(a2 & 0x7FFFFF) >> 9) | 0x8000;
  return result;
}

BOOL small_is_oob_free_entry(unint64_t a1)
{
  BOOL v2 = 0;
  if (a1 >= (a1 & 0xFFFFFFFFFF800000) + 32678) {
    return a1 < (a1 & 0xFFFFFFFFFF800000) + 33272;
  }
  return v2;
}

void *small_oob_free_entry_set_previous(void *result, uint64_t a2)
{
  *uint64_t result = a2;
  return result;
}

uint64_t small_inplace_free_entry_set_previous(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return small_inplace_checksum_ptr(a1, a2, a3);
}

uint64_t small_inplace_checksum_ptr(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 ^ *(void *)(result + 632) ^ result;
  *(unsigned char *)(a2 + 8) = ((unsigned __int16)(((v3 + HIDWORD(v3)) >> 16) + v3 + WORD2(v3)) >> 8)
                     + ((v3 + HIDWORD(v3)) >> 16)
                     + v3
                     + BYTE4(v3);
  *(void *)a2 = a3;
  return result;
}

uint64_t small_oob_free_entry_set_next(uint64_t result, uint64_t a2)
{
  *(void *)(result + 8) = a2;
  return result;
}

uint64_t small_inplace_free_entry_set_next(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return small_inplace_checksum_ptr(a1, a2 + 16, a3);
}

uint64_t small_meta_header_set_is_free(uint64_t result, unsigned __int16 a2, __int16 a3)
{
  *(_WORD *)(result + 2 * a2) = a3 | 0x8000;
  return result;
}

uint64_t small_oob_free_entry_set_free(uint64_t result)
{
  *(void *)uint64_t result = -1;
  *(void *)(result + 8) = -1;
  *(_WORD *)(result + 16) = 0;
  return result;
}

uint64_t small_oob_free_entry_get_previous(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t small_inplace_free_entry_get_previous(uint64_t a1, unsigned __int8 *a2)
{
  return small_inplace_unchecksum_ptr(a1, a2);
}

uint64_t small_inplace_unchecksum_ptr(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = *(void *)a2 ^ *(void *)(a1 + 632) ^ a1;
  if (a2[8] != (((unsigned __int16)(((v3 + HIDWORD(v3)) >> 16) + v3 + WORD2(v3)) >> 8)
                                + ((v3 + HIDWORD(v3)) >> 16)
                                + v3
                                + BYTE4(v3)))
  {
    free_list_checksum_botch(a1);
    __break(1u);
    JUMPOUT(0x2C5F0);
  }
  return *(void *)a2;
}

void free_list_checksum_botch(uint64_t a1)
{
}

uint64_t small_oob_free_entry_get_next(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t small_inplace_free_entry_get_next(uint64_t a1, uint64_t a2)
{
  return small_inplace_unchecksum_ptr(a1, (unsigned __int8 *)(a2 + 16));
}

void region_check_cookie(uint64_t a1, int *a2)
{
  int v2 = *a2;
  if (v2 != region_cookie())
  {
    malloc_zone_error(64, 1, (uint64_t)"Region cookie corrupted for region %p (value is %x)[%p]\n");
    __break(1u);
  }
}

uint64_t region_cookie()
{
  return (unsigned __int16)(malloc_entropy >> 8);
}

unint64_t small_find_msize_region(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 a4)
{
  if (a4 > 0x1Fu) {
    unsigned int v5 = 30;
  }
  else {
    unsigned int v5 = a4 - 1;
  }
  uint64_t v10 = a2 + 32;
  unint64_t ptr = small_free_list_get_ptr(*(void *)(a2 + 32 + 8 * v5));
  if (ptr) {
    return ptr & 0xFFFFFFFFFF800000;
  }
  int v7 = v5 >> 5;
  unsigned int v8 = 0;
  for (int i = ~((1 << (v5 & 0x1F)) - 1); !v7; int i = -1)
  {
    unsigned int v8 = *(_DWORD *)(a2 + 2088) & i;
    if (v8) {
      break;
    }
    int v7 = 1;
  }
  if (!v8 && v7 == 1) {
    return 0;
  }
  int v9 = (unint64_t *)(v10 + 240);
  int v11 = (unint64_t *)(v10 + 8 * (__clz(__rbit32(v8)) + 32 * v7));
  if (v11 < v9)
  {
    unint64_t v13 = small_free_list_get_ptr(*v11);
    if (v13) {
      return v13 & 0xFFFFFFFFFF800000;
    }
  }
  unint64_t v14 = small_free_list_get_ptr(*v9);
  if (v14) {
    return v14 & 0xFFFFFFFFFF800000;
  }
  else {
    return 0;
  }
}

void *small_madvise_free_range_no_lock(uint64_t a1, atomic_uint *a2, uint64_t a3, unsigned __int8 *a4, unsigned __int16 a5, uint64_t a6, uint64_t a7)
{
  unint64_t ptr = small_free_list_get_ptr((unint64_t)a4);
  uint64_t v13 = 10;
  uint64_t result = (void *)small_is_oob_free_entry((unint64_t)a4);
  if (result) {
    uint64_t v13 = 0;
  }
  if (((ptr + v13 + vm_kernel_page_mask) & ~vm_kernel_page_mask) < ((ptr + (a5 << 9)) & ~vm_kernel_page_mask))
  {
    int v12 = (void *)(((ptr + v13 + vm_kernel_page_mask) & ~vm_kernel_page_mask) <= (a6 & ~vm_kernel_page_mask)
                 ? a6 & ~vm_kernel_page_mask
                 : (ptr + v13 + vm_kernel_page_mask) & ~vm_kernel_page_mask);
    unint64_t v11 = ((ptr + (a5 << 9)) & ~vm_kernel_page_mask) >= ((a6 + a7 + v13 + vm_kernel_page_mask) & ~vm_kernel_page_mask)
        ? (a6 + a7 + v13 + vm_kernel_page_mask) & ~vm_kernel_page_mask
        : (ptr + (a5 << 9)) & ~vm_kernel_page_mask;
    if ((unint64_t)v12 < v11)
    {
      small_free_mark_unfree(a1, (unint64_t)a4, a5);
      small_free_list_remove_ptr_no_clear(a1, (uint64_t)a2, a4, a5);
      atomic_fetch_add((atomic_uint *volatile)(a3 + 28), 1u);
      int v8 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
      int v9 = v8;
      atomic_compare_exchange_strong_explicit(a2, (unsigned int *)&v9, 0, memory_order_release, memory_order_relaxed);
      if (v9 != v8) {
        os_unfair_lock_unlock((os_unfair_lock_t)a2);
      }
      mvm_madvise_free(a1, a3, v12, v11, (void **)(a1 + 640), *(_DWORD *)(a1 + 620) & 0x20);
      int v10 = 0;
      atomic_compare_exchange_strong_explicit(a2, (unsigned int *)&v10, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
      if (v10) {
        os_unfair_lock_lock_with_options();
      }
      atomic_fetch_add((atomic_uint *volatile)(a3 + 28), 0xFFFFFFFF);
      return small_free_list_add_ptr(a1, (uint64_t)a2, ptr, a5);
    }
  }
  return result;
}

uint64_t small_free_try_recirc_to_depot(uint64_t a1, atomic_uint *a2, int a3, uint64_t a4, unsigned __int8 *a5, unsigned __int16 a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12 = *(unsigned int *)(a4 + 16);
  if (a3 != -1)
  {
    if (small_region_below_recirc_threshold(a4)) {
      *(unsigned char *)(a4 + 32) = 1;
    }
    if (small_magazine_below_recirc_threshold((uint64_t)a2)) {
      return small_free_do_recirc_to_depot(a1, (uint64_t)a2);
    }
    return 1;
  }
  if ((aggressive_madvise_enabled & 1) == 0) {
    small_madvise_free_range_no_lock(a1, a2, a4, a5, a6, a7, a8);
  }
  if (v12 || *(int *)(a4 + 28) > 0) {
    return 1;
  }
  mach_vm_address_t v11 = small_free_try_depot_unmap_no_lock(a1, (uint64_t)a2, a4);
  int v8 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  int v9 = v8;
  atomic_compare_exchange_strong_explicit(a2, (unsigned int *)&v9, 0, memory_order_release, memory_order_relaxed);
  if (v9 != v8) {
    os_unfair_lock_unlock((os_unfair_lock_t)a2);
  }
  if (v11)
  {
    if ((*(_DWORD *)(a1 + 620) & 4) != 0) {
      mvm_deallocate_pages(v11, 0x800000uLL, *(_WORD *)(a1 + 620) & 0xFFFE);
    }
    else {
      mvm_deallocate_pages(v11, 0x800000uLL, *(_WORD *)(a1 + 620) & 0xFFFC);
    }
  }
  return 0;
}

uint64_t small_free_mark_unfree(uint64_t a1, unint64_t a2, unsigned __int16 a3)
{
  unint64_t ptr = small_free_list_get_ptr(a2);
  uint64_t v6 = (ptr & 0xFFFFFFFFFF800000) + 40;
  unint64_t v5 = ((ptr - ((ptr & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF;
  unint64_t v4 = ((ptr + (a3 << 9) - 1 - (((ptr + (a3 << 9) - 1) & 0xFFFFFFFFFF800000) + 33280)) >> 9) & 0x3FFF;
  if (v5 > v4)
  {
    __break(1u);
    JUMPOUT(0x2D184);
  }
  small_meta_header_set_not_free(v6, v5);
  return small_meta_header_set_not_free(v6, v4);
}

uint64_t small_meta_header_set_not_free(uint64_t result, unsigned __int16 a2)
{
  *(_WORD *)(result + 2 * a2) &= ~0x8000u;
  return result;
}

BOOL small_magazine_below_recirc_threshold(uint64_t a1)
{
  unint64_t v4 = *(void *)(a1 + 2160);
  unint64_t v3 = *(void *)(a1 + 2152);
  BOOL v2 = 0;
  if (v4 - v3 > 0xBF3D00) {
    return v3 < v4 - (v4 >> 2);
  }
  return v2;
}

uint64_t small_free_do_recirc_to_depot(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a2 + 2176); ; uint64_t i = *(void *)(i + 8))
  {
    BOOL v9 = 0;
    if (i)
    {
      BOOL v8 = 1;
      if (*(unsigned char *)(i + 32)) {
        BOOL v8 = *(_DWORD *)(i + 28) != 0;
      }
      BOOL v9 = v8;
    }
    if (!v9) {
      break;
    }
  }
  if (i)
  {
    unint64_t v14 = i & 0xFFFFFFFFFF800000;
    if ((i & 0xFFFFFFFFFF800000) == *(void *)(a2 + 2144) && (*(void *)(a2 + 2128) || *(void *)(a2 + 2136))) {
      small_finalize_region((void *)a1, a2);
    }
    if (*(void *)i) {
      *(void *)(*(void *)i + 8) = *(void *)(i + 8);
    }
    else {
      *(void *)(a2 + 2176) = *(void *)(i + 8);
    }
    if (*(void *)(i + 8)) {
      **(void **)(i + 8) = *(void *)i;
    }
    else {
      *(void *)(a2 + 2184) = *(void *)i;
    }
    *(void *)uint64_t i = 0;
    *(void *)(i + 8) = 0;
    --*(_DWORD *)(a2 + 2172);
    int v13 = small_free_detach_region(a1, a2, v14);
    uint64_t v12 = *(void *)(a1 + 624) - 2560;
    int v2 = 0;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v12, (unsigned int *)&v2, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
    if (v2) {
      os_unfair_lock_lock_with_options();
    }
    *(int *)((char *)&dword_18 + (i & 0xFFFFFFFFFF800000)) = -1;
    *(_DWORD *)(i + 28) = 0;
    uint64_t v11 = small_free_reattach_region(a1, v12, v14);
    *(void *)(a2 + 2152) -= v11;
    *(void *)(a2 + 2160) -= 8355328;
    *(_DWORD *)(a2 + 2168) -= v13;
    int v3 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    int v4 = v3;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)a2, (unsigned int *)&v4, 0, memory_order_release, memory_order_relaxed);
    if (v4 != v3) {
      os_unfair_lock_unlock((os_unfair_lock_t)a2);
    }
    *(void *)(v12 + 2152) += v11;
    *(void *)(v12 + 2160) += 8355328;
    *(_DWORD *)(v12 + 2168) += v13;
    if (*(void *)(v12 + 2184))
    {
      *(void *)uint64_t i = *(void *)(v12 + 2184);
      *(void *)(*(void *)(v12 + 2184) + 8) = i;
    }
    else
    {
      *(void *)(v12 + 2176) = i;
      *(void *)uint64_t i = 0;
    }
    *(void *)(v12 + 2184) = i;
    *(void *)(i + 8) = 0;
    *(unsigned char *)(i + 32) = 0;
    ++*(_DWORD *)(v12 + 2172);
    if ((aggressive_madvise_enabled & 1) == 0) {
      small_free_scan_madvise_free(a1, (atomic_uint *)v12, v14);
    }
    mach_vm_address_t v10 = small_free_try_depot_unmap_no_lock(a1, v12, i);
    int v5 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    int v6 = v5;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v12, (unsigned int *)&v6, 0, memory_order_release, memory_order_relaxed);
    if (v6 != v5) {
      os_unfair_lock_unlock((os_unfair_lock_t)v12);
    }
    if (v10)
    {
      if ((*(_DWORD *)(a1 + 620) & 4) != 0) {
        mvm_deallocate_pages(v10, 0x800000uLL, *(_WORD *)(a1 + 620) & 0xFFFE);
      }
      else {
        mvm_deallocate_pages(v10, 0x800000uLL, *(_WORD *)(a1 + 620) & 0xFFFC);
      }
    }
    return 0;
  }
  else
  {
    return 1;
  }
}

unint64_t small_free_try_depot_unmap_no_lock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a3 + 16) || *(int *)(a3 + 28) > 0 || *(_DWORD *)(a2 + 2172) < recirc_retained_regions) {
    return 0;
  }
  if (*(void *)a3) {
    *(void *)(*(void *)a3 + 8) = *(void *)(a3 + 8);
  }
  else {
    *(void *)(a2 + 2176) = *(void *)(a3 + 8);
  }
  if (*(void *)(a3 + 8)) {
    **(void **)(a3 + 8) = *(void *)a3;
  }
  else {
    *(void *)(a2 + 2184) = *(void *)a3;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  --*(_DWORD *)(a2 + 2172);
  unint64_t v4 = a3 & 0xFFFFFFFFFF800000;
  if (small_free_detach_region(a1, a2, a3 & 0xFFFFFFFFFF800000))
  {
    malloc_zone_error(*(_DWORD *)(a1 + 620), 1, (uint64_t)"small_free_try_depot_unmap_no_lock objects_in_use not zero: %d\n");
    return 0;
  }
  else if (rack_region_remove(a1, v4, a3))
  {
    *(void *)(a2 + 2160) -= 8355328;
    return v4;
  }
  else
  {
    return 0;
  }
}

unint64_t small_oob_free_entry_get_ptr_task(unsigned int a1, unsigned int (*a2)(void, void, void, void), void (*a3)(const char *), uint64_t a4)
{
  unsigned int v9 = a1;
  BOOL v8 = a2;
  int v7 = a3;
  uint64_t v6 = a4;
  uint64_t v5 = 0;
  if (a2(a1, a4, 18, &v5))
  {
    v7("Failed to map small oobe pointer\n");
    return 0;
  }
  else if (*(__int16 *)(v5 + 16) < 0)
  {
    return (v6 & 0xFFFFFFFFFF800000) + ((unsigned __int16)(*(_WORD *)(v5 + 16) & 0x7FFF) << 9);
  }
  else
  {
    return 0;
  }
}

uint64_t small_free_list_get_next_task(unsigned int a1, unsigned int (*a2)(void, uint64_t, uint64_t, uint64_t *), void (*a3)(const char *), uint64_t a4, unint64_t a5)
{
  if (!a5)
  {
    __break(1u);
    JUMPOUT(0x2DC6CLL);
  }
  if (small_is_oob_free_entry(a5)) {
    return small_oob_free_entry_get_next_task(a1, (unsigned int (*)(void, void, void, void))a2, a3, a5);
  }
  else {
    return small_inplace_free_entry_get_next_task(a1, a2, (void (*)(const char *, ...))a3, a4, a5);
  }
}

uint64_t small_oob_free_entry_get_next_task(unsigned int a1, unsigned int (*a2)(void, void, void, void), void (*a3)(const char *), uint64_t a4)
{
  unsigned int v8 = a1;
  int v7 = a2;
  uint64_t v6 = a3;
  v5[1] = a4;
  v5[0] = 0;
  if (!a2(a1, a4, 18, v5)) {
    return *(void *)(v5[0] + 8);
  }
  v6("Failed to map small oobe pointer\n");
  return 0;
}

uint64_t small_inplace_free_entry_get_next_task(unsigned int a1, unsigned int (*a2)(void, uint64_t, uint64_t, uint64_t *), void (*a3)(const char *, ...), uint64_t a4, uint64_t a5)
{
  return small_inplace_unchecksum_ptr_task(a1, a2, a3, a4, (const void *)(a5 + 16));
}

uint64_t small_inplace_unchecksum_ptr_task(unsigned int a1, unsigned int (*a2)(void, uint64_t, uint64_t, uint64_t *), void (*a3)(const char *, ...), uint64_t a4, const void *a5)
{
  unsigned int v13 = a1;
  uint64_t v12 = a2;
  uint64_t v11 = a3;
  uint64_t v10 = a4;
  unsigned int v9 = a5;
  unsigned int v8 = 0;
  uint64_t v7 = 0;
  if (a2(a1, (uint64_t)a5, 16, (uint64_t *)&v8))
  {
    v11("Unable to map small linkage pointer %p\n", v9);
    return 0;
  }
  else if (v12(v13, v10, 768, &v7))
  {
    v11("Failed to map small rack\n");
    return 0;
  }
  else
  {
    int v5 = v8[8];
    uint64_t v18 = *(void *)v8 ^ *(void *)(v7 + 632) ^ v10;
    int v17 = v18 + HIDWORD(v18);
    __int16 v16 = HIWORD(v17) + v17;
    char v15 = HIBYTE(v16) + v16;
    if (v5 != (HIBYTE(v16) + v16))
    {
      free_list_checksum_botch(v10);
      __break(1u);
      JUMPOUT(0x2DF20);
    }
    return *(void *)v8;
  }
}

uint64_t trace_decode(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v14 = a1;
  uint64_t v13 = a2;
  uint64_t v12 = a3;
  unsigned int v11 = a4;
  uint64_t v10 = 0;
  for (unsigned int i = 0; i < v11; ++i)
  {
    unint64_t v8 = 0;
    uint64_t v7 = varint_decode(v14 + v10, v13 - v10, &v8);
    if (!v7) {
      break;
    }
    v10 += v7;
    unint64_t v6 = codeoffset_decode(v8);
    if (i) {
      uint64_t v5 = *(void *)(v12 + 8 * (i - 1));
    }
    else {
      uint64_t v5 = 0;
    }
    *(void *)(v12 + 8 * i) = v6 + v5;
  }
  return i;
}

uint64_t varint_decode(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = 0;
  uint64_t v4 = 0;
  do
  {
    if (v4 == a2) {
      return 0;
    }
    v5 |= (unint64_t)(*(unsigned char *)(a1 + v4) & 0x7F) << (7 * v4);
    ++v4;
  }
  while (*(char *)(a1 + v4 - 1) >= 0);
  *a3 = v5;
  return v4;
}

unint64_t codeoffset_decode(unint64_t a1)
{
  return 4 * zigzag_decode(a1);
}

uint64_t trace_collect(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = backtrace(&v7, 65);
  if (v3 > 1) {
    return trace_encode(a1, a2, (uint64_t)&v8, v3 - 1);
  }
  else {
    return 0;
  }
}

uint64_t trace_encode(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v9 = 0;
  for (unsigned int i = 0; i < a4; ++i)
  {
    uint64_t v6 = i ? *(void *)(a3 + 8 * (i - 1)) : 0;
    unint64_t v4 = codeoffset_encode(*(void *)(a3 + 8 * i) - v6);
    uint64_t v7 = varint_encode(a1 + v9, a2 - v9, v4);
    if (!v7) {
      break;
    }
    v9 += v7;
  }
  return v9;
}

unint64_t zigzag_decode(unint64_t a1)
{
  if (a1) {
    return ~(a1 >> 1);
  }
  else {
    return a1 >> 1;
  }
}

uint64_t codeoffset_encode(uint64_t a1)
{
  return zigzag_encode(a1 / 4);
}

uint64_t varint_encode(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = 0;
  do
  {
    if (v4 == a2) {
      return 0;
    }
    *(unsigned char *)(a1 + v4) = a3 & 0x7F;
    a3 >>= 7;
    ++v4;
  }
  while (a3);
  *(unsigned char *)(a1 + v4 - 1) |= 0x80u;
  return v4;
}

uint64_t zigzag_encode(uint64_t a1)
{
  if (a1 >= 0) {
    return 2 * a1;
  }
  else {
    return ~(2 * a1);
  }
}

__n128 xzm_metapool_init(__n128 *a1, unsigned __int8 a2, unsigned int a3, unsigned int a4, unsigned int a5, unint64_t a6)
{
  if (a3 % a5)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slab_size % block_size == 0\" failed (/Library/Caches/co"
                           "m.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_metapool.c:12)";
    __break(1u);
    JUMPOUT(0x2E59CLL);
  }
  if ((a3 & 0x3FFF) != 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slab_size % PAGE_MAX_SIZE == 0\" failed (/Library/Caches"
                           "/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_metapool.c:13)";
    __break(1u);
    JUMPOUT(0x2E5D0);
  }
  if (((a5 - 1) & a5) != 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"powerof2(block_size)\" failed (/Library/Caches/com.apple"
                           ".xbs/Sources/libmalloc_driverkit/src/xzone/xzone_metapool.c:14)";
    __break(1u);
    JUMPOUT(0x2E608);
  }
  if (((a4 - 1) & a4) != 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"powerof2(block_align)\" failed (/Library/Caches/com.appl"
                           "e.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_metapool.c:15)";
    __break(1u);
    JUMPOUT(0x2E640);
  }
  if (a5 < a4)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"block_size >= block_align\" failed (/Library/Caches/com."
                           "apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_metapool.c:16)";
    __break(1u);
    JUMPOUT(0x2E678);
  }
  BOOL v9 = 1;
  if (!a6) {
    BOOL v9 = a5 > 0xF;
  }
  if (!v9)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"metadata_pool || block_size >= sizeof(struct xzm_metapoo"
                           "l_slab_s)\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_metapool.c:20)";
    __break(1u);
    JUMPOUT(0x2E6D0);
  }
  BOOL v8 = 1;
  if (a6) {
    BOOL v8 = *(_DWORD *)(a6 + 16) > 0xFu;
  }
  if (!v8)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!metadata_pool || metadata_pool->xzmp_block_size >= size"
                           "of(struct xzm_metapool_slab_s)\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driv"
                           "erkit/src/xzone/xzone_metapool.c:25)";
    __break(1u);
    JUMPOUT(0x2E72CLL);
  }
  BOOL v7 = 1;
  if (a6) {
    BOOL v7 = *(_DWORD *)(a6 + 16) > 0xFu;
  }
  if (!v7)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!metadata_pool || metadata_pool->xzmp_block_size >= size"
                           "of(struct xzm_metapool_block_s)\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_dri"
                           "verkit/src/xzone/xzone_metapool.c:27)";
    __break(1u);
    JUMPOUT(0x2E788);
  }
  v10.n128_u32[0] = 0;
  v10.n128_u8[4] = a2;
  v10.n128_u64[1] = __PAIR64__(a4, a3);
  LODWORD(v11) = a5;
  v12.n128_u32[0] = 0;
  v12.n128_u64[1] = a6;
  __n128 result = v10;
  a1[3] = v12;
  a1[2] = 0uLL;
  a1[1] = (__n128)v11;
  *a1 = v10;
  return result;
}

uint64_t xzm_metapool_alloc(uint64_t a1)
{
  int v1 = 0;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)a1, (unsigned int *)&v1, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
  if (v1) {
    os_unfair_lock_lock_with_options();
  }
  uint64_t v9 = *(void *)(a1 + 32);
  if (v9)
  {
    *(void *)(a1 + 32) = **(void **)(a1 + 32);
    uint64_t v8 = *(void *)(v9 + 8);
    if (*(void *)(a1 + 56)) {
      xzm_metapool_free(*(void *)(a1 + 56), v9);
    }
    else {
      *(_OWORD *)uint64_t v9 = 0uLL;
    }
  }
  else
  {
    if (!*(void *)(a1 + 40) || *(_DWORD *)(a1 + 48) == *(_DWORD *)(a1 + 8))
    {
      mach_vm_address_t plat = mvm_allocate_plat(0, *(unsigned int *)(a1 + 8), __clz(__rbit32(*(_DWORD *)(a1 + 12))), 1, 0, 1, 0);
      if (!plat)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: Failed to allocate malloc metadata";
        __break(1u);
        JUMPOUT(0x2EA48);
      }
      if (*(void *)(a1 + 56))
      {
        uint64_t v6 = (_OWORD *)xzm_metapool_alloc(*(void *)(a1 + 56));
        *(_DWORD *)(a1 + 48) = 0;
      }
      else
      {
        uint64_t v6 = (_OWORD *)plat;
        *(_DWORD *)(a1 + 48) = *(_DWORD *)(a1 + 16);
      }
      *(void *)&long long v5 = 0;
      *((void *)&v5 + 1) = plat;
      *uint64_t v6 = v5;
      *(void *)(a1 + 40) = v6;
      *(void *)uint64_t v6 = *(void *)(a1 + 24);
      *(void *)(a1 + 24) = v6;
    }
    uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8) + *(unsigned int *)(a1 + 48);
    *(_DWORD *)(a1 + 48) += *(_DWORD *)(a1 + 16);
  }
  int v2 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  int v3 = v2;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)a1, (unsigned int *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != v2) {
    os_unfair_lock_unlock((os_unfair_lock_t)a1);
  }
  if (!v8)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"block\" failed (/Library/Caches/com.apple.xbs/Sources/li"
                           "bmalloc_driverkit/src/xzone/xzone_metapool.c:161)";
    __break(1u);
    JUMPOUT(0x2EC1CLL);
  }
  return v8;
}

void xzm_metapool_free(uint64_t a1, void *a2)
{
  int v2 = 0;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)a1, (unsigned int *)&v2, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
  if (v2) {
    os_unfair_lock_lock_with_options();
  }
  if (!_xzm_metapool_block_is_allocated(a1, (unint64_t)a2))
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_metapool_block_is_allocated(mp, blockp)\" failed (/"
                           "Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_metapool.c:195)";
    __break(1u);
    JUMPOUT(0x2ED68);
  }
  if (*(void *)(a1 + 56))
  {
    long long v5 = (void *)xzm_metapool_alloc(*(void *)(a1 + 56));
    if (_xzm_metapool_should_madvise(a1)) {
      mvm_madvise_plat(a2, *(unsigned int *)(a1 + 16), 7);
    }
  }
  else
  {
    long long v5 = a2;
  }
  v5[1] = a2;
  *long long v5 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v5;
  int v3 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  int v4 = v3;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)a1, (unsigned int *)&v4, 0, memory_order_release, memory_order_relaxed);
  if (v4 != v3) {
    os_unfair_lock_unlock((os_unfair_lock_t)a1);
  }
}

uint64_t _xzm_metapool_block_is_allocated(uint64_t a1, unint64_t a2)
{
  if (a2 % *(unsigned int *)(a1 + 16))
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"block_ptr % mp->xzmp_block_size == 0\" failed (/Library/"
                           "Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_metapool.c:170)";
    __break(1u);
    JUMPOUT(0x2EF4CLL);
  }
  if (_xzm_metapool_slab_for_block(a1, a2))
  {
    for (unsigned int i = *(void **)(a1 + 32); i; unsigned int i = (void *)*i)
    {
      if (i[1] == a2) {
        return 0;
      }
    }
    return 1;
  }
  else
  {
    return 0;
  }
}

BOOL _xzm_metapool_should_madvise(uint64_t a1)
{
  BOOL v2 = 0;
  if (*(void *)(a1 + 56)) {
    return *(unsigned int *)(a1 + 16) >= vm_page_size;
  }
  return v2;
}

void *_xzm_metapool_slab_for_block(uint64_t a1, unint64_t a2)
{
  for (unsigned int i = *(void **)(a1 + 24); i; unsigned int i = (void *)*i)
  {
    if (a2 >= i[1] && a2 < i[1] + (unint64_t)*(unsigned int *)(a1 + 8)) {
      return i;
    }
  }
  return 0;
}

mach_vm_address_t rack_init(uint64_t a1, int a2, int a3, int a4)
{
  *(_DWORD *)(a1 + 4) = a2;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = a1 + 32;
  *(void *)(a1 + 24) = a1 + 32;
  *(void *)(*(void *)(a1 + 24) + 16) = a1 + 96;
  **(void **)(a1 + 24) = 64;
  *(void *)(*(void *)(a1 + 24) + 8) = 6;
  mach_vm_address_t result = _platform_memset();
  *(void *)(a1 + 632) = malloc_entropy[0];
  if (a2 == 2) {
    *(void *)(a1 + 632) = ~*(void *)(a1 + 632);
  }
  *(_DWORD *)(a1 + 620) = a4;
  *(_DWORD *)(a1 + 608) = a3;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 624) = 0;
  if (a3)
  {
    mach_vm_address_t result = mvm_allocate_pages((vm_page_size + 2560 * (a3 + 1) - 1) & -(uint64_t)vm_page_size, 0, 1073741827, 1);
    if (!result)
    {
      malloc_report(3, (uint64_t)"*** FATAL ERROR - unable to allocate magazine array.\n");
      qword_C0118 = (uint64_t)"FATAL ERROR - unable to allocate magazine array";
      __break(1u);
      JUMPOUT(0x2F2CCLL);
    }
    *(void *)(a1 + 624) = result + 2560;
    *(_DWORD *)(a1 + 616) = 0;
    for (unsigned int i = 1; i <= a3 - 1; i *= 2)
      ++*(_DWORD *)(a1 + 616);
    *(_DWORD *)(a1 + 612) = i - 1;
    *(void *)(a1 + 640) = 0;
    *(_DWORD *)a1 = 0;
    *(_DWORD *)(*(void *)(a1 + 624) - 2560) = 0;
    *(_DWORD *)(*(void *)(a1 + 624) - 2556) = 0;
    for (int j = 0; j < *(_DWORD *)(a1 + 608); ++j)
    {
      mach_vm_address_t result = 2560;
      *(_DWORD *)(*(void *)(a1 + 624) + 2560 * j) = 0;
      *(_DWORD *)(*(void *)(a1 + 624) + 2560 * j + 4) = 0;
    }
  }
  return result;
}

void rack_destroy_regions(uint64_t a1, mach_vm_size_t a2)
{
  for (int i = 0; (unint64_t)i < **(void **)(a1 + 24); ++i)
  {
    if (*(void *)(*(void *)(*(void *)(a1 + 24) + 16) + 8 * i)
      && *(void *)(*(void *)(*(void *)(a1 + 24) + 16) + 8 * i) != -1)
    {
      mach_vm_address_t v2 = *(void *)(*(void *)(*(void *)(a1 + 24) + 16) + 8 * i);
      if ((*(_DWORD *)(a1 + 620) & 4) != 0) {
        mvm_deallocate_pages(v2, a2, *(_WORD *)(a1 + 620) & 0xFFFE);
      }
      else {
        mvm_deallocate_pages(v2, a2, *(_WORD *)(a1 + 620) & 0xFFFC);
      }
      *(void *)(*(void *)(*(void *)(a1 + 24) + 16) + 8 * i) = -1;
    }
  }
}

void rack_destroy(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 24) + 16) != a1 + 96) {
    mvm_deallocate_pages(*(void *)(*(void *)(a1 + 24) + 16), (vm_page_size - 1 + 8 * **(void **)(a1 + 24)) & ~(vm_page_size - 1), 0);
  }
  if (*(int *)(a1 + 608) > 0)
  {
    mvm_deallocate_pages(*(void *)(a1 + 624) - 2560, (2560 * (*(_DWORD *)(a1 + 608) + 1) + vm_page_size - 1) & ~(vm_page_size - 1), 3);
    *(void *)(a1 + 624) = 0;
  }
}

void rack_region_insert(atomic_uint *a1, unint64_t a2)
{
  unint64_t v11 = a1;
  unint64_t v10 = a2;
  __n128 v12 = a1;
  uint64_t v20 = a1;
  int v19 = 327680;
  if (v2) {
    char v3 = 0;
  }
  else {
    char v3 = 1;
  }
  if ((v3 & 1) == 0) {
    goto LABEL_8;
  }
  unsigned int v18 = 0;
  uint64_t v21 = 3;
  uint64_t v22 = 3;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unsigned int v18 = *(void *)(StatusReg + 24);
  int v17 = 0;
  unsigned int v16 = v18;
  unsigned int v15 = v18;
  int v4 = 0;
  atomic_compare_exchange_strong_explicit(v20, (unsigned int *)&v4, v18, memory_order_acquire, memory_order_acquire);
  if (v4) {
    int v17 = v4;
  }
  BOOL v14 = v4 == 0;
  if (v4) {
LABEL_8:
  }
    os_unfair_lock_lock_with_options();
  if (**((void **)v11 + 3) < (unint64_t)(2 * *((void *)v11 + 1)))
  {
    mach_vm_address_t v9 = 0;
    uint64_t v8 = 0;
    uint64_t v7 = 0;
    uint64_t v7 = *(void *)(*((void *)v11 + 3) + 8);
    mach_vm_address_t v9 = hash_regions_grow_no_lock(*(void *)(*((void *)v11 + 3) + 16), **((void **)v11 + 3), &v7, &v8);
    *(void *)(*(void *)(*((void *)v11 + 3) + 24) + 16) = v9;
    **(void **)(*((void *)v11 + 3) + 24) = v8;
    *(void *)(*(void *)(*((void *)v11 + 3) + 24) + 8) = v7;
    __dmb(0xBu);
    *((void *)v11 + 3) = *(void *)(*((void *)v11 + 3) + 24);
  }
  hash_region_insert_no_lock(*(void *)(*((void *)v11 + 3) + 16), **((void **)v11 + 3), *(void *)(*((void *)v11 + 3) + 8), v10);
  ++*((void *)v11 + 1);
  uint64_t v13 = v11;
  os_unfair_lock_t v29 = (os_unfair_lock_t)v11;
  int v28 = 0;
  uint64_t v30 = 3;
  uint64_t v31 = 3;
  unint64_t v32 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  int v28 = *(void *)(v32 + 24);
  int v27 = 0;
  int v26 = v28;
  int v25 = 0;
  int v5 = v28;
  int v6 = v28;
  atomic_compare_exchange_strong_explicit(v11, (unsigned int *)&v6, 0, memory_order_release, memory_order_relaxed);
  if (v6 != v5) {
    int v26 = v6;
  }
  BOOL v24 = v6 == v5;
  if (v6 != v5) {
    os_unfair_lock_unlock(v29);
  }
}

mach_vm_address_t hash_regions_grow_no_lock(uint64_t a1, unint64_t a2, void *a3, uint64_t *a4)
{
  *a4 = 2 * a2;
  ++*a3;
  mach_vm_address_t v7 = hash_regions_alloc_no_lock(*a4);
  for (unint64_t i = 0; i < a2; ++i)
  {
    unint64_t v5 = *(void *)(a1 + 8 * i);
    if (v5)
    {
      if (v5 != -1) {
        hash_region_insert_no_lock(v7, *a4, *a3, v5);
      }
    }
  }
  return v7;
}

uint64_t hash_region_insert_no_lock(uint64_t result, uint64_t a2, char a3, unint64_t a4)
{
  unint64_t v5 = (0x9E3779B97F4A7C55 * (a4 >> 20)) >> (64 - a3);
  while (1)
  {
    int v4 = (unint64_t *)(result + 8 * v5);
    if (!*v4 || *v4 == -1) {
      break;
    }
    if (++v5 == a2) {
      unint64_t v5 = 0;
    }
    if (v5 == (0x9E3779B97F4A7C55 * (a4 >> 20)) >> (64 - a3)) {
      return result;
    }
  }
  *int v4 = a4;
  return result;
}

uint64_t rack_region_remove(uint64_t a1, unint64_t a2, uint64_t a3)
{
  char v10 = 1;
  if (v3) {
    char v4 = 0;
  }
  else {
    char v4 = 1;
  }
  if ((v4 & 1) == 0
    || (int v5 = 0,
        atomic_compare_exchange_strong_explicit((atomic_uint *volatile)a1, (unsigned int *)&v5, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire), v5))
  {
    os_unfair_lock_lock_with_options();
  }
  mach_vm_address_t v9 = (void *)hash_lookup_region_no_lock(*(void *)(*(void *)(a1 + 24) + 16), **(void **)(a1 + 24), *(void *)(*(void *)(a1 + 24) + 8), a2);
  if (*(_DWORD *)(a3 + 36))
  {
    *(_DWORD *)(a3 + 36) |= 2u;
    char v10 = 0;
  }
  if (v9)
  {
    *mach_vm_address_t v9 = -1;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a1 + 16), 1uLL, memory_order_relaxed);
  }
  else
  {
    malloc_zone_error(*(_DWORD *)(a1 + 620), 1, (uint64_t)"tiny_free_try_depot_unmap_no_lock hash lookup failed: %p\n");
    char v10 = 0;
  }
  int v6 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  int v7 = v6;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)a1, (unsigned int *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != v6) {
    os_unfair_lock_unlock((os_unfair_lock_t)a1);
  }
  return v10 & 1;
}

uint64_t rack_region_maybe_dispose(uint64_t a1, mach_vm_address_t a2, mach_vm_size_t a3, uint64_t a4)
{
  char v10 = 0;
  if (v4) {
    char v5 = 0;
  }
  else {
    char v5 = 1;
  }
  if ((v5 & 1) == 0
    || (int v6 = 0,
        atomic_compare_exchange_strong_explicit((atomic_uint *volatile)a1, (unsigned int *)&v6, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire), v6))
  {
    os_unfair_lock_lock_with_options();
  }
  if ((*(_DWORD *)(a4 + 36) & 2) != 0)
  {
    if ((*(_DWORD *)(a1 + 620) & 4) != 0) {
      mvm_deallocate_pages(a2, a3, *(_WORD *)(a1 + 620) & 0xFFFE);
    }
    else {
      mvm_deallocate_pages(a2, a3, *(_WORD *)(a1 + 620) & 0xFFFC);
    }
    char v10 = 1;
  }
  else
  {
    *(_DWORD *)(a4 + 36) &= ~1u;
  }
  int v7 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  int v8 = v7;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)a1, (unsigned int *)&v8, 0, memory_order_release, memory_order_relaxed);
  if (v8 != v7) {
    os_unfair_lock_unlock((os_unfair_lock_t)a1);
  }
  return v10 & 1;
}

uint64_t rack_get_thread_index(uint64_t a1)
{
  if (_os_cpu_number_override == -1)
  {
    unsigned int v2 = _malloc_cpu_number();
    if (*(_DWORD *)(a1 + 608) == ncpuclusters) {
      return _malloc_cpu_cluster_number();
    }
  }
  else
  {
    unsigned int v2 = _os_cpu_number_override;
    if (*(_DWORD *)(a1 + 608) == ncpuclusters) {
      return _malloc_get_cluster_from_cpu(_os_cpu_number_override);
    }
  }
  return v2;
}

unint64_t _malloc_cpu_number()
{
  return _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) & 0xFFF;
}

unint64_t _malloc_cpu_cluster_number()
{
  return (_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) & 0xFF000) >> 12;
}

uint64_t _malloc_get_cluster_from_cpu(unsigned int a1)
{
  return *(unsigned __int8 *)(a1 + 0xFFFFFC200);
}

mach_vm_address_t hash_regions_alloc_no_lock(uint64_t a1)
{
  return mvm_allocate_pages((8 * a1 + vm_page_size - 1) & ~(vm_page_size - 1), 0, 0x40000000, 1);
}

void *create_legacy_scalable_zone(uint64_t a1, int a2)
{
  scalable_zone = (void *)create_scalable_zone(a1, a2);
  if (!scalable_zone) {
    return 0;
  }
  mprotect(scalable_zone, 0xC8uLL, 3);
  char v4 = 0;
  if (legacy_valloc) {
    char v4 = legacy_valloc;
  }
  char v3 = 0;
  if (v4) {
    char v3 = v4;
  }
  scalable_zone[5] = v3;
  scalable_zone[15] = 0;
  mprotect(scalable_zone, 0xC8uLL, 1);
  return scalable_zone;
}

uint64_t legacy_valloc(uint64_t a1, uint64_t a2)
{
  if (vm_kernel_page_mask <= vm_page_mask) {
    vm_size_t v5 = vm_page_mask;
  }
  else {
    vm_size_t v5 = vm_kernel_page_mask;
  }
  if (vm_kernel_page_mask <= vm_page_mask) {
    vm_size_t v4 = vm_page_mask;
  }
  else {
    vm_size_t v4 = vm_kernel_page_mask;
  }
  if (vm_kernel_page_shift <= vm_page_shift) {
    char v3 = vm_page_shift;
  }
  else {
    char v3 = vm_kernel_page_shift;
  }
  return large_malloc(a1, ((a2 + v5) & ~v4) >> v3, 0, 1);
}

uint64_t mvm_aslr_init()
{
  mach_vm_address_t v7 = 0x16FE00000;
  int v6 = 7;
  uint64_t result = mvm_aslr_enabled();
  if (result)
  {
    if (!entropic_address)
    {
      mach_vm_address_t v5 = v7 - 0x100000 - ((qword_C4340 & ((1 << v6) - 1)) << 25);
      mach_vm_address_t address = 0;
      uint64_t result = mach_vm_allocate(mach_task_self_, &address, vm_page_size, 117440513);
      if (!result)
      {
        if (address > v7)
        {
          mach_vm_address_t v5 = (address + 0x200000000) & 0xFFFFFFFFFE000000;
          uint64_t v22 = 0;
          mach_vm_address_t v21 = address;
          uint64_t v20 = &entropic_base;
          mach_vm_address_t v19 = address;
          uint64_t v1 = 0;
          atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)&entropic_base, (unint64_t *)&v1, address, memory_order_relaxed, memory_order_relaxed);
          if (v1) {
            uint64_t v22 = v1;
          }
          BOOL v18 = v1 == 0;
        }
        uint64_t result = mach_vm_deallocate(mach_task_self_, address, vm_page_size);
      }
      uint64_t v17 = 0;
      mach_vm_address_t v16 = v5;
      unsigned int v15 = &entropic_limit;
      mach_vm_address_t v14 = v5;
      uint64_t v2 = 0;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)&entropic_limit, (unint64_t *)&v2, v5, memory_order_relaxed, memory_order_relaxed);
      if (v2) {
        uint64_t v17 = v2;
      }
      BOOL v13 = v2 == 0;
      uint64_t v12 = 0;
      mach_vm_address_t v11 = v5 - 0x10000000;
      char v10 = &entropic_address;
      mach_vm_address_t v9 = v5 - 0x10000000;
      uint64_t v3 = 0;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)&entropic_address, (unint64_t *)&v3, v5 - 0x10000000, memory_order_relaxed, memory_order_relaxed);
      if (v3) {
        uint64_t v12 = v3;
      }
      BOOL v8 = v3 == 0;
    }
  }
  else
  {
    malloc_entropy = 0;
    qword_C4340 = 0;
  }
  return result;
}

mach_vm_address_t mvm_allocate_plat(mach_vm_address_t a1, mach_vm_size_t a2, char a3, int a4, int a5, int a6, mach_vm_address_t a7)
{
  mach_vm_address_t v14 = a1;
  mach_vm_size_t v13 = a2;
  char v12 = a3;
  int v11 = a4;
  int v10 = a5;
  int v9 = a6;
  address[1] = a7;
  if (a1 && (v11 & 1) != 0) {
    malloc_zone_error(v10 | 0x40, 0, (uint64_t)"Unsupported anywhere allocation at address 0x%lx of size 0x%lx with flags %d\n");
  }
  if ((v10 & 0x200) != 0) {
    malloc_zone_error(v10 | 0x40, 0, (uint64_t)"Unsupported unpopulated allocation at address 0x%lx of size 0x%lx with flags %d\n");
  }
  address[0] = v14;
  if (mach_vm_map(mach_task_self_, address, v13, (1 << v12) - 1, v11 | (v9 << 24), 0, 0, 0, 3, 7, 1u)) {
    return 0;
  }
  else {
    return address[0];
  }
}

mach_vm_address_t mvm_allocate_pages(unint64_t a1, unsigned __int8 a2, int a3, int a4)
{
  return mvm_allocate_pages_plat(a1, a2, a3, a4, 0);
}

mach_vm_address_t mvm_allocate_pages_plat(unint64_t a1, unsigned __int8 a2, int a3, int a4, uint64_t a5)
{
  kern_return_t v25;
  int v26;
  mach_vm_offset_t v27;
  vm_size_t v28;
  mach_vm_address_t v29;
  mach_vm_address_t address;
  BOOL v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  unsigned __int8 v38;
  unint64_t v39;
  BOOL v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  unint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;

  unint64_t v39 = a1;
  unsigned int v38 = a2;
  uint64_t v37 = a3;
  int v36 = a4;
  uint64_t v35 = a5;
  __int16 v34 = a3 & 1;
  unsigned __int16 v33 = a3 & 2;
  unint64_t v32 = a3 & 0x80;
  uint64_t v31 = (a3 & 0x40000000) == 0;
  mach_vm_address_t address = 0;
  int v28 = (a1 + vm_page_size - 1) & ~(vm_page_size - 1);
  int v27 = (1 << a2) - 1;
  int v26 = (a4 << 24) | 1;
  if (!v28) {
    int v28 = vm_page_size;
  }
  if (v33 || v34)
  {
    if (v34 && v38 > vm_page_shift)
    {
      if (vm_kernel_page_size <= vm_page_size) {
        vm_size_t v18 = vm_page_size;
      }
      else {
        vm_size_t v18 = vm_kernel_page_size;
      }
      v28 += v18 + (1 << v38);
    }
    else
    {
      if (v34 && v33)
      {
        if (vm_kernel_page_size <= vm_page_size) {
          vm_size_t v17 = vm_page_size;
        }
        else {
          vm_size_t v17 = vm_kernel_page_size;
        }
        uint64_t v16 = 2 * v17;
      }
      else
      {
        if (vm_kernel_page_size <= vm_page_size) {
          vm_size_t v15 = vm_page_size;
        }
        else {
          vm_size_t v15 = vm_kernel_page_size;
        }
        uint64_t v16 = v15;
      }
      v28 += v16;
    }
  }
  if (v32) {
    int v26 = (a4 << 24) | 3;
  }
  if (v28 < v39) {
    return 0;
  }
  while (1)
  {
    if (v31) {
      vm_size_t v14 = entropic_address;
    }
    else {
      vm_size_t v14 = vm_page_size;
    }
    mach_vm_address_t address = v14;
    int v25 = mach_vm_map(mach_task_self_, &address, v28, v27, v26, 0, 0, 0, 3, 7, 1u);
    if (v25 == 3 && v31)
    {
      mach_vm_address_t address = vm_page_size;
      int v25 = mach_vm_map(mach_task_self_, &address, v28, v27, v26, 0, 0, 0, 3, 7, 1u);
    }
    if (v25)
    {
      if (v25 != 3) {
        malloc_zone_error(v37, 0, (uint64_t)"can't allocate region\n:*** mach_vm_map(size=%lu, flags: %x) failed (error code=%d)\n");
      }
      return 0;
    }
    os_unfair_lock_t v29 = address;
    if (!v31) {
      break;
    }
    if (address + v28 <= entropic_limit
      || (uint64_t v24 = entropic_address,
          unint64_t v23 = entropic_address - 0x10000000,
          entropic_address - 0x10000000 >= (unint64_t)entropic_address)
      || v23 < entropic_base)
    {
      if (address < entropic_address)
      {
        unint64_t v22 = entropic_address - 0x10000000;
        if ((unint64_t)entropic_address >= 0x10000000 && v22 >= entropic_base)
        {
          int v45 = entropic_address;
          BOOL v44 = entropic_address - 0x10000000;
          uint64_t v43 = &entropic_address;
          uint64_t v42 = entropic_address - 0x10000000;
          uint64_t v7 = entropic_address;
          uint64_t v8 = entropic_address;
          atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)&entropic_address, (unint64_t *)&v8, v22, memory_order_relaxed, memory_order_relaxed);
          if (v8 != v7) {
            int v45 = v8;
          }
          uint64_t v41 = v8 == v7;
        }
      }
      break;
    }
    mach_vm_deallocate(mach_task_self_, address, v28);
    int v50 = v24;
    int v49 = v23;
    BOOL v48 = &entropic_address;
    int v47 = v23;
    uint64_t v5 = v24;
    uint64_t v6 = v24;
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)&entropic_address, (unint64_t *)&v6, v23, memory_order_relaxed, memory_order_relaxed);
    if (v6 != v5) {
      int v50 = v6;
    }
    uint64_t v46 = v6 == v24;
  }
  if (v33 || v34)
  {
    if (v34 && v38 > vm_page_shift)
    {
      if (vm_kernel_page_size <= vm_page_size) {
        vm_size_t v13 = vm_page_size;
      }
      else {
        vm_size_t v13 = vm_kernel_page_size;
      }
      uint64_t v21 = (v29 + v13 + (1 << v38) - 1) & ~((1 << v38) - 1);
      if (vm_kernel_page_size <= vm_page_size) {
        vm_size_t v12 = vm_page_size;
      }
      else {
        vm_size_t v12 = vm_kernel_page_size;
      }
      mach_vm_size_t size = v21 - v29 - v12;
      if (vm_kernel_page_size <= vm_page_size) {
        vm_size_t v11 = vm_page_size;
      }
      else {
        vm_size_t v11 = vm_kernel_page_size;
      }
      mach_vm_size_t v19 = (1 << v38) - v11 - size;
      if (mach_vm_deallocate(mach_task_self_, v29, size))
      {
        malloc_zone_error(v37, 0, (uint64_t)"can't unmap excess guard region\n*** mach_vm_deallocate(addr=%p, size=%lu) failed (code=%d)\n");
        return 0;
      }
      if (v19 && mach_vm_deallocate(mach_task_self_, v29 + v28 - v19, v19))
      {
        malloc_zone_error(v37, 0, (uint64_t)"can't unmap excess trailing guard region\n*** mach_vm_deallocate(addr=%p, size=%lu) failed (code=%d)\n");
        return 0;
      }
      os_unfair_lock_t v29 = v21;
      mvm_protect_plat(v21, v39, 0, v37);
    }
    else
    {
      if (v34)
      {
        if (vm_kernel_page_size <= vm_page_size) {
          vm_size_t v10 = vm_page_size;
        }
        else {
          vm_size_t v10 = vm_kernel_page_size;
        }
        v29 += v10;
      }
      mvm_protect_plat(v29, v39, 0, v37);
    }
  }
  return v29;
}

void mvm_protect_plat(uint64_t a1, uint64_t a2, int a3, char a4)
{
  if ((a4 & 1) != 0 && (a4 & 8) == 0)
  {
    vm_size_t v8 = vm_kernel_page_size <= vm_page_size ? vm_page_size : vm_kernel_page_size;
    uint64_t v7 = (void *)(a1 - v8);
    if (vm_kernel_page_size <= vm_page_size ? mprotect(v7, vm_page_size, a3) : mprotect(v7, vm_kernel_page_size, a3)) {
      malloc_report(3, (uint64_t)"*** can't mvm_protect(%u) region for prelude guard page at %p\n");
    }
  }
  if ((a4 & 2) != 0 && (a4 & 0x10) == 0)
  {
    uint64_t v6 = (void *)((a1 + a2 + vm_page_size - 1) & ~(vm_page_size - 1));
    if (vm_kernel_page_size <= vm_page_size) {
      int v5 = mprotect(v6, vm_page_size, a3);
    }
    else {
      int v5 = mprotect(v6, vm_kernel_page_size, a3);
    }
    if (v5) {
      malloc_report(3, (uint64_t)"*** can't mvm_protect(%u) region for postlude guard page at %p\n");
    }
  }
}

void mvm_deallocate_plat(mach_vm_address_t a1, mach_vm_size_t a2, __int16 a3)
{
  if (mach_vm_deallocate(mach_task_self_, a1, a2)) {
    malloc_zone_error(a3, 0, (uint64_t)"Failed to deallocate at address %p of size 0x%lx: %d\n");
  }
}

void mvm_deallocate_pages(mach_vm_address_t a1, mach_vm_size_t a2, __int16 a3)
{
}

void mvm_deallocate_pages_plat(mach_vm_address_t a1, mach_vm_size_t a2, __int16 a3)
{
  mach_vm_address_t v7 = a1;
  mach_vm_size_t v6 = a2;
  if (a3)
  {
    if (vm_kernel_page_size <= vm_page_size) {
      vm_size_t v5 = vm_page_size;
    }
    else {
      vm_size_t v5 = vm_kernel_page_size;
    }
    mach_vm_address_t v7 = a1 - v5;
    if (vm_kernel_page_size <= vm_page_size) {
      vm_size_t v4 = vm_page_size;
    }
    else {
      vm_size_t v4 = vm_kernel_page_size;
    }
    mach_vm_size_t v6 = a2 + v4;
  }
  if ((a3 & 2) != 0)
  {
    if (vm_kernel_page_size <= vm_page_size) {
      vm_size_t v3 = vm_page_size;
    }
    else {
      vm_size_t v3 = vm_kernel_page_size;
    }
    v6 += v3;
  }
  mvm_deallocate_plat(v7, v6, a3);
}

void mvm_protect(uint64_t a1, uint64_t a2, int a3, char a4)
{
}

BOOL mvm_madvise(void *a1, size_t a2, int a3)
{
  return mvm_madvise_plat(a1, a2, a3);
}

BOOL mvm_madvise_plat(void *a1, size_t a2, int a3)
{
  return madvise(a1, a2, a3) == -1;
}

uint64_t mvm_madvise_free(uint64_t a1, uint64_t a2, void *a3, unint64_t a4, void **a5, int a6)
{
  return mvm_madvise_free_plat(a1, a2, a3, a4, a5, a6);
}

uint64_t mvm_madvise_free_plat(uint64_t a1, uint64_t a2, void *a3, unint64_t a4, void **a5, int a6)
{
  if (a4 <= (unint64_t)a3) {
    return 0;
  }
  if (a6 && malloc_zero_policy) {
    _platform_memset();
  }
  if (!a5)
  {
LABEL_9:
    if (mvm_madvise(a3, a4 - (void)a3, 7)) {
      return 1;
    }
    if (malloc_tracing_enabled) {
      kdebug_trace();
    }
    return 0;
  }
  if (*a5 != a3)
  {
    *a5 = a3;
    goto LABEL_9;
  }
  return 0;
}

uint64_t mvm_deferred_reclaim_init()
{
  return mach_vm_reclaim_ringbuffer_init();
}

uint64_t mvm_reclaim_mark_used(uint64_t a1, uint64_t a2, unsigned int a3, char a4)
{
  BOOL v4 = (a4 & 3) == 0;
  if ((a4 & 3) != 0)
  {
    if (vm_kernel_page_size <= vm_page_size) {
      vm_size_t v12 = vm_page_size;
    }
    else {
      vm_size_t v12 = vm_kernel_page_size;
    }
    BOOL v5 = __CFADD__(a3, 2 * v12);
    if (v5 || a3 + 2 * v12 != a3 + 2 * v12)
    {
      char v14 = 0;
      return v14 & 1;
    }
    if (vm_kernel_page_size <= vm_page_size) {
      vm_size_t v11 = vm_page_size;
    }
    else {
      vm_size_t v11 = vm_kernel_page_size;
    }
    BOOL v4 = a2 == v11;
  }
  char v6 = !v4;
  if ((v6 & 1) == 0
    || (int v7 = 0,
        atomic_compare_exchange_strong_explicit((atomic_uint *volatile)&reclaim_buffer_lock, (unsigned int *)&v7, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire), v7))
  {
    os_unfair_lock_lock_with_options();
  }
  char v13 = mach_vm_reclaim_mark_used() & 1;
  int v8 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  int v9 = v8;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)&reclaim_buffer_lock, (unsigned int *)&v9, 0, memory_order_release, memory_order_relaxed);
  if (v9 != v8) {
    os_unfair_lock_unlock((os_unfair_lock_t)&reclaim_buffer_lock);
  }
  char v14 = v13;
  return v14 & 1;
}

uint64_t mvm_reclaim_mark_free(uint64_t a1, unsigned int a2, char a3)
{
  BOOL v3 = (a3 & 3) == 0;
  if ((a3 & 3) != 0)
  {
    if (vm_kernel_page_size <= vm_page_size) {
      vm_size_t v11 = vm_page_size;
    }
    else {
      vm_size_t v11 = vm_kernel_page_size;
    }
    BOOL v4 = __CFADD__(a2, 2 * v11);
    if (v4 || a2 + 2 * v11 != a2 + 2 * v11) {
      return -1;
    }
    if (vm_kernel_page_size <= vm_page_size) {
      vm_size_t v10 = vm_page_size;
    }
    else {
      vm_size_t v10 = vm_kernel_page_size;
    }
    BOOL v3 = a1 == v10;
  }
  char v5 = !v3;
  if ((v5 & 1) == 0
    || (int v6 = 0,
        atomic_compare_exchange_strong_explicit((atomic_uint *volatile)&reclaim_buffer_lock, (unsigned int *)&v6, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire), v6))
  {
    os_unfair_lock_lock_with_options();
  }
  uint64_t v12 = mach_vm_reclaim_mark_free();
  int v7 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  int v8 = v7;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)&reclaim_buffer_lock, (unsigned int *)&v8, 0, memory_order_release, memory_order_relaxed);
  if (v8 != v7) {
    os_unfair_lock_unlock((os_unfair_lock_t)&reclaim_buffer_lock);
  }
  return v12;
}

uint64_t mvm_reclaim_is_available()
{
  return mach_vm_reclaim_is_available() & 1;
}

BOOL _malloc_detect_interposition()
{
  BOOL v3 = 1;
  if (!_malloc_symbol_interposed((unint64_t)malloc))
  {
    BOOL v3 = 1;
    if (!_malloc_symbol_interposed((unint64_t)calloc))
    {
      BOOL v3 = 1;
      if (!_malloc_symbol_interposed((unint64_t)free))
      {
        BOOL v3 = 1;
        if (!_malloc_symbol_interposed((unint64_t)realloc))
        {
          BOOL v3 = 1;
          if (!_malloc_symbol_interposed((unint64_t)valloc))
          {
            BOOL v3 = 1;
            if (!_malloc_symbol_interposed((unint64_t)aligned_alloc))
            {
              BOOL v3 = 1;
              if (!_malloc_symbol_interposed((unint64_t)posix_memalign))
              {
                BOOL v3 = 1;
                if (!_malloc_symbol_interposed((unint64_t)malloc_zone_malloc))
                {
                  BOOL v3 = 1;
                  if (!_malloc_symbol_interposed((unint64_t)malloc_zone_calloc))
                  {
                    BOOL v3 = 1;
                    if (!_malloc_symbol_interposed((unint64_t)malloc_zone_free))
                    {
                      BOOL v3 = 1;
                      if (!_malloc_symbol_interposed((unint64_t)malloc_zone_realloc))
                      {
                        BOOL v3 = 1;
                        if (!_malloc_symbol_interposed((unint64_t)malloc_zone_valloc)) {
                          BOOL v3 = _malloc_symbol_interposed((unint64_t)malloc_zone_memalign);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  BOOL result = _malloc_symbol_interposed((unint64_t)malloc_type_malloc);
  char v2 = 1;
  if (!result)
  {
    BOOL result = _malloc_symbol_interposed((unint64_t)malloc_type_calloc);
    char v2 = 1;
    if (!result)
    {
      BOOL result = _malloc_symbol_interposed((unint64_t)malloc_type_free);
      char v2 = 1;
      if (!result)
      {
        BOOL result = _malloc_symbol_interposed((unint64_t)malloc_type_realloc);
        char v2 = 1;
        if (!result)
        {
          BOOL result = _malloc_symbol_interposed((unint64_t)malloc_type_valloc);
          char v2 = 1;
          if (!result)
          {
            BOOL result = _malloc_symbol_interposed((unint64_t)malloc_type_aligned_alloc);
            char v2 = 1;
            if (!result)
            {
              BOOL result = _malloc_symbol_interposed((unint64_t)malloc_type_posix_memalign);
              char v2 = 1;
              if (!result)
              {
                BOOL result = _malloc_symbol_interposed((unint64_t)malloc_type_zone_malloc);
                char v2 = 1;
                if (!result)
                {
                  BOOL result = _malloc_symbol_interposed((unint64_t)malloc_type_zone_calloc);
                  char v2 = 1;
                  if (!result)
                  {
                    BOOL result = _malloc_symbol_interposed((unint64_t)malloc_type_zone_free);
                    char v2 = 1;
                    if (!result)
                    {
                      BOOL result = _malloc_symbol_interposed((unint64_t)malloc_type_zone_realloc);
                      char v2 = 1;
                      if (!result)
                      {
                        BOOL result = _malloc_symbol_interposed((unint64_t)malloc_type_zone_valloc);
                        char v2 = 1;
                        if (!result)
                        {
                          BOOL result = _malloc_symbol_interposed((unint64_t)malloc_type_zone_memalign);
                          char v2 = result;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  BOOL v1 = 0;
  if (v3) {
    BOOL v1 = !(v2 & 1);
  }
  if ((malloc_interposition_compat & 1) != v1) {
    malloc_interposition_compat = v1;
  }
  return result;
}

BOOL _malloc_symbol_interposed(unint64_t a1)
{
  BOOL v2 = 1;
  if (a1 >= (unint64_t)&def_2031C) {
    return a1 >= (unint64_t)&_NSConcreteStackBlock_ptr;
  }
  return v2;
}

uint64_t malloc_type_malloc(size_t a1, uint64_t a2)
{
  BOOL v3 = 1;
  if (!malloc_logger)
  {
    BOOL v3 = 1;
    if ((malloc_slowpath & 1) == 0) {
      BOOL v3 = a1 > malloc_absolute_max_size;
    }
  }
  if (v3) {
    return _malloc_type_malloc_outlined(a1, a2, 1);
  }
  uint64_t v5 = *(void *)malloc_zones;
  if (*(_DWORD *)(*(void *)malloc_zones + 104) >= 0x10u) {
    return (*(uint64_t (**)(uint64_t, size_t, uint64_t))(v5 + 160))(v5, a1, a2);
  }
  if (*(_DWORD *)(v5 + 104) >= 0xDu) {
    return (*(uint64_t (**)(uint64_t, size_t))(v5 + 24))(v5, a1);
  }
  return _malloc_type_malloc_outlined(a1, a2, 1);
}

uint64_t malloc_type_calloc(size_t a1, size_t a2, uint64_t a3)
{
  char v4 = 1;
  if (!malloc_logger) {
    char v4 = malloc_slowpath;
  }
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = *(void *)malloc_zones;
    if (*(_DWORD *)(*(void *)malloc_zones + 104) >= 0x10u) {
      return (*(uint64_t (**)(uint64_t, size_t, size_t, uint64_t))(v5 + 168))(v5, a1, a2, a3);
    }
    if (*(_DWORD *)(v5 + 104) >= 0xDu) {
      return (*(uint64_t (**)(uint64_t, size_t, size_t))(v5 + 32))(v5, a1, a2);
    }
  }
  return _malloc_type_calloc_outlined(a1, a2, a3);
}

void malloc_type_free(void *a1)
{
}

id malloc_type_realloc(void *a1, size_t a2, uint64_t a3)
{
  BOOL v4 = 1;
  if (!malloc_logger)
  {
    BOOL v4 = 1;
    if ((malloc_slowpath & 1) == 0) {
      BOOL v4 = a2 > malloc_absolute_max_size;
    }
  }
  if (v4) {
    return _malloc_type_realloc_outlined(a1, a2, a3);
  }
  if (a1 && a2)
  {
    registered_zone = (uint64_t (**)(void *, void *, size_t))find_registered_zone((uint64_t)a1, 0, 0);
    if (!registered_zone) {
      return _realloc(a1, a2);
    }
    if (registered_zone == (uint64_t (**)(void *, void *, size_t))default_zone) {
      registered_zone = *(uint64_t (***)(void *, void *, size_t))malloc_zones;
    }
    if (*((_DWORD *)registered_zone + 26) < 0x10u) {
      uint64_t v6 = registered_zone[7](registered_zone, a1, a2);
    }
    else {
      uint64_t v6 = ((uint64_t (*)(uint64_t (**)(void *, void *, size_t), void *, size_t, uint64_t))registered_zone[22])(registered_zone, a1, a2, a3);
    }
  }
  else
  {
    uint64_t v11 = *(void *)malloc_zones;
    if (*(_DWORD *)(*(void *)malloc_zones + 104) < 0x10u)
    {
      if (*(_DWORD *)(v11 + 104) >= 0xDu) {
        uint64_t v12 = (*(uint64_t (**)(uint64_t, size_t))(v11 + 24))(v11, a2);
      }
      else {
        uint64_t v12 = _malloc_type_malloc_outlined(a2, a3, 0);
      }
    }
    else
    {
      uint64_t v12 = (*(uint64_t (**)(uint64_t, size_t, uint64_t))(v11 + 160))(v11, a2, a3);
    }
    uint64_t v6 = v12;
  }
  if (v6)
  {
    if (!a2) {
      _free(a1);
    }
  }
  else
  {
    malloc_set_errno_fast(1, 12);
  }
  return (id)v6;
}

uint64_t malloc_type_valloc(unint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v5 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904);
  if (!a2) {
    uint64_t v4 = 1;
  }
  *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = v4;
  if ((malloc_interposition_compat & 1) == 0 || v5) {
    uint64_t v3 = _malloc_zone_valloc((uint64_t)default_zone, a1, 1u);
  }
  else {
    uint64_t v3 = (uint64_t)j__valloc(a1);
  }
  *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = v5;
  return v3;
}

uint64_t malloc_type_aligned_alloc(unint64_t a1, unint64_t a2, uint64_t a3)
{
  BOOL v4 = 1;
  if (!malloc_logger)
  {
    BOOL v4 = 1;
    if ((malloc_slowpath & 1) == 0) {
      BOOL v4 = a2 > malloc_absolute_max_size;
    }
  }
  if (v4
    || *(_DWORD *)(*(void *)malloc_zones + 104) < 0x10u
    || a1 < 8
    || ((a1 - 1) & a1) != 0
    || (a2 & (a1 - 1)) != 0)
  {
    return _malloc_type_aligned_alloc_outlined(a1, a2, a3);
  }
  uint64_t v5 = (*(uint64_t (**)(void, unint64_t, unint64_t, uint64_t))(*(void *)malloc_zones + 184))(*(void *)malloc_zones, a1, a2, a3);
  if (!v5) {
    malloc_set_errno_fast(1, 12);
  }
  return v5;
}

uint64_t malloc_type_posix_memalign(uint64_t *a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  BOOL v5 = 1;
  if (!malloc_logger)
  {
    BOOL v5 = 1;
    if ((malloc_slowpath & 1) == 0) {
      BOOL v5 = a3 > malloc_absolute_max_size;
    }
  }
  if (v5 || *(_DWORD *)(*(void *)malloc_zones + 104) < 0x10u || a2 < 8 || ((a2 - 1) & a2) != 0)
  {
    return _malloc_type_posix_memalign_outlined(a1, a2, a3, a4);
  }
  else
  {
    uint64_t v6 = (*(uint64_t (**)(void, unint64_t, unint64_t, uint64_t))(*(void *)malloc_zones + 184))(*(void *)malloc_zones, a2, a3, a4);
    if (v6)
    {
      *a1 = v6;
      return 0;
    }
    else
    {
      return 12;
    }
  }
}

uint64_t malloc_type_zone_malloc(uint64_t (**a1)(void *, unint64_t, uint64_t), unint64_t a2, uint64_t a3)
{
  BOOL v5 = a1;
  BOOL v4 = 1;
  if (!malloc_logger)
  {
    BOOL v4 = 1;
    if ((malloc_slowpath & 1) == 0) {
      BOOL v4 = a2 > malloc_absolute_max_size;
    }
  }
  if (!v4)
  {
    if (a1 == (uint64_t (**)(void *, unint64_t, uint64_t))default_zone) {
      BOOL v5 = *(uint64_t (***)(void *, unint64_t, uint64_t))malloc_zones;
    }
    if (*((_DWORD *)v5 + 26) >= 0x10u) {
      return v5[20](v5, a2, a3);
    }
    if (*((_DWORD *)v5 + 26) >= 0xDu) {
      return ((uint64_t (*)(uint64_t (**)(void *, unint64_t, uint64_t), unint64_t))v5[3])(v5, a2);
    }
  }
  return _malloc_type_zone_malloc_outlined((malloc_zone_t *)v5, a2, a3);
}

uint64_t malloc_type_zone_calloc(uint64_t (**a1)(void *, size_t, size_t, uint64_t), size_t a2, size_t a3, uint64_t a4)
{
  uint64_t v6 = a1;
  char v5 = 1;
  if (!malloc_logger) {
    char v5 = malloc_slowpath;
  }
  if ((v5 & 1) == 0)
  {
    if (a1 == (uint64_t (**)(void *, size_t, size_t, uint64_t))default_zone) {
      uint64_t v6 = *(uint64_t (***)(void *, size_t, size_t, uint64_t))malloc_zones;
    }
    if (*((_DWORD *)v6 + 26) >= 0x10u) {
      return v6[21](v6, a2, a3, a4);
    }
    if (*((_DWORD *)v6 + 26) >= 0xDu) {
      return ((uint64_t (*)(uint64_t (**)(void *, size_t, size_t, uint64_t), size_t, size_t))v6[4])(v6, a2, a3);
    }
  }
  return _malloc_type_zone_calloc_outlined((malloc_zone_t *)v6, a2, a3, a4);
}

void malloc_type_zone_free(malloc_zone_t *a1, void *a2)
{
}

uint64_t malloc_type_zone_realloc(malloc_zone_t *a1, void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t)a1;
  BOOL v5 = 1;
  if (!malloc_logger)
  {
    BOOL v5 = 1;
    if ((malloc_slowpath & 1) == 0) {
      BOOL v5 = a3 > malloc_absolute_max_size;
    }
  }
  if (v5) {
    return _malloc_type_zone_realloc_outlined(a1, a2, a3, a4);
  }
  if (a1 == (malloc_zone_t *)default_zone) {
    uint64_t v6 = *(void *)malloc_zones;
  }
  if (*(_DWORD *)(v6 + 104) < 0x10u) {
    return _malloc_zone_realloc(v6, (uint64_t)a2, a3, a4);
  }
  else {
    return (*(uint64_t (**)(uint64_t, void *, unint64_t, uint64_t))(v6 + 176))(v6, a2, a3, a4);
  }
}

uint64_t malloc_type_zone_valloc(malloc_zone_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3;
  uint64_t v6 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904);
  if (!a3) {
    uint64_t v5 = 1;
  }
  *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = v5;
  if ((malloc_interposition_compat & 1) == 0 || v6) {
    uint64_t v4 = _malloc_zone_valloc((uint64_t)a1, a2, 0);
  }
  else {
    uint64_t v4 = (uint64_t)j__malloc_zone_valloc(a1, a2);
  }
  *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = v6;
  return v4;
}

uint64_t malloc_type_zone_memalign(malloc_zone_t *a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = a1;
  BOOL v5 = 1;
  if (!malloc_logger)
  {
    BOOL v5 = 1;
    if ((malloc_slowpath & 1) == 0) {
      BOOL v5 = a3 > malloc_absolute_max_size;
    }
  }
  if (v5) {
    return _malloc_type_zone_memalign_outlined(v6, a2, a3, a4);
  }
  if (a1 == (malloc_zone_t *)default_zone) {
    uint64_t v6 = *(malloc_zone_t **)malloc_zones;
  }
  if (v6->version < 0x10 || a2 < 8 || ((a2 - 1) & a2) != 0) {
    return _malloc_type_zone_memalign_outlined(v6, a2, a3, a4);
  }
  else {
    return ((uint64_t (*)(malloc_zone_t *, unint64_t, unint64_t, uint64_t))v6[1].valloc)(v6, a2, a3, a4);
  }
}

uint64_t _malloc_type_malloc_outlined(size_t a1, uint64_t a2, char a3)
{
  uint64_t v5 = a2;
  uint64_t v6 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904);
  if (!a2) {
    uint64_t v5 = 1;
  }
  *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = v5;
  if (malloc_interposition_compat & 1) != 0 && !v6 && (a3) {
    uint64_t v4 = (uint64_t)j__malloc(a1);
  }
  else {
    uint64_t v4 = _malloc_zone_malloc(default_zone, a1, 1u);
  }
  *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = v6;
  return v4;
}

uint64_t _malloc_type_calloc_outlined(size_t a1, size_t a2, uint64_t a3)
{
  uint64_t v5 = a3;
  uint64_t v6 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904);
  if (!a3) {
    uint64_t v5 = 1;
  }
  *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = v5;
  if ((malloc_interposition_compat & 1) == 0 || v6) {
    uint64_t v4 = _malloc_zone_calloc(default_zone, a1, a2, 1u);
  }
  else {
    uint64_t v4 = (uint64_t)j__calloc(a1, a2);
  }
  *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = v6;
  return v4;
}

id _malloc_type_realloc_outlined(void *a1, size_t a2, uint64_t a3)
{
  uint64_t v5 = a3;
  uint64_t v6 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904);
  if (!a3) {
    uint64_t v5 = 1;
  }
  *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = v5;
  if ((malloc_interposition_compat & 1) == 0 || v6) {
    id v4 = _realloc(a1, a2);
  }
  else {
    id v4 = j__realloc(a1, a2);
  }
  *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = v6;
  return v4;
}

uint64_t _malloc_type_aligned_alloc_outlined(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3;
  uint64_t v6 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904);
  if (!a3) {
    uint64_t v5 = 1;
  }
  *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = v5;
  if ((malloc_interposition_compat & 1) == 0 || v6) {
    uint64_t v4 = _malloc_zone_memalign((uint64_t)default_zone, a1, a2, 3u, 0);
  }
  else {
    uint64_t v4 = (uint64_t)j__aligned_alloc(a1, a2);
  }
  *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = v6;
  return v4;
}

uint64_t _malloc_type_posix_memalign_outlined(uint64_t *a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = a4;
  uint64_t v7 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904);
  if (!a4) {
    uint64_t v6 = 1;
  }
  *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = v6;
  if ((malloc_interposition_compat & 1) == 0 || v7) {
    unsigned int v5 = _posix_memalign(a1, a2, a3);
  }
  else {
    unsigned int v5 = j__posix_memalign((void **)a1, a2, a3);
  }
  *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = v7;
  return v5;
}

uint64_t _malloc_type_zone_malloc_outlined(malloc_zone_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3;
  uint64_t v6 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904);
  if (!a3) {
    uint64_t v5 = 1;
  }
  *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = v5;
  if ((malloc_interposition_compat & 1) == 0 || v6) {
    uint64_t v4 = _malloc_zone_malloc(a1, a2, 0);
  }
  else {
    uint64_t v4 = (uint64_t)j__malloc_zone_malloc(a1, a2);
  }
  *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = v6;
  return v4;
}

uint64_t _malloc_type_zone_calloc_outlined(malloc_zone_t *a1, size_t a2, size_t a3, uint64_t a4)
{
  uint64_t v6 = a4;
  uint64_t v7 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904);
  if (!a4) {
    uint64_t v6 = 1;
  }
  *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = v6;
  if ((malloc_interposition_compat & 1) == 0 || v7) {
    uint64_t v5 = _malloc_zone_calloc(a1, a2, a3, 0);
  }
  else {
    uint64_t v5 = (uint64_t)j__malloc_zone_calloc(a1, a2, a3);
  }
  *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = v7;
  return v5;
}

uint64_t _malloc_type_zone_realloc_outlined(malloc_zone_t *a1, void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = a4;
  uint64_t v7 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904);
  if (!a4) {
    uint64_t v6 = 1;
  }
  *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = v6;
  if ((malloc_interposition_compat & 1) == 0 || v7) {
    uint64_t v5 = _malloc_zone_realloc((uint64_t)a1, (uint64_t)a2, a3, 0);
  }
  else {
    uint64_t v5 = (uint64_t)j__malloc_zone_realloc(a1, a2, a3);
  }
  *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = v7;
  return v5;
}

uint64_t _malloc_type_zone_memalign_outlined(malloc_zone_t *a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = a4;
  uint64_t v7 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904);
  if (!a4) {
    uint64_t v6 = 1;
  }
  *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = v6;
  if ((malloc_interposition_compat & 1) == 0 || v7) {
    uint64_t v5 = _malloc_zone_memalign((uint64_t)a1, a2, a3, 0, 0);
  }
  else {
    uint64_t v5 = (uint64_t)j__malloc_zone_memalign(a1, a2, a3);
  }
  *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = v7;
  return v5;
}

void *malloc_type_zone_malloc_with_options_np(malloc_zone_t *a1, size_t a2, size_t a3, uint64_t a4, uint64_t a5)
{
  return malloc_type_zone_malloc_with_options_internal(a1, a2, a3, a5, a4);
}

void *malloc_type_zone_malloc_with_options_internal(malloc_zone_t *a1, size_t a2, size_t a3, uint64_t a4, uint64_t a5)
{
  vm_size_t v10 = a1;
  BOOL v9 = 0;
  if (a2)
  {
    BOOL v8 = 1;
    if (((a2 - 1) & a2) == 0) {
      BOOL v8 = (a3 & (a2 - 1)) != 0;
    }
    BOOL v9 = v8;
  }
  if (v9) {
    return 0;
  }
  char v7 = 1;
  if (!malloc_logger) {
    char v7 = malloc_slowpath;
  }
  if (v7) {
    return _malloc_type_zone_malloc_with_options_np_outlined(v10, a2, a3, a5, a4);
  }
  if (a1 == (malloc_zone_t *)default_zone) {
    vm_size_t v10 = *(malloc_zone_t **)malloc_zones;
  }
  if (!v10) {
    vm_size_t v10 = *(malloc_zone_t **)malloc_zones;
  }
  if (v10->version < 0x10) {
    return _malloc_type_zone_malloc_with_options_np_outlined(v10, a2, a3, a5, a4);
  }
  free = 0;
  if (v10[1].free) {
    free = v10[1].free;
  }
  if (!free) {
    return _malloc_type_zone_malloc_with_options_np_outlined(v10, a2, a3, a5, a4);
  }
  else {
    return (void *)((uint64_t (*)(malloc_zone_t *, size_t, size_t, uint64_t, uint64_t))v10[1].free)(v10, a2, a3, a5, a4);
  }
}

void *_malloc_type_zone_malloc_with_options_np_outlined(malloc_zone_t *a1, size_t a2, size_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = a5;
  uint64_t v7 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904);
  if (!a5) {
    uint64_t v6 = 1;
  }
  *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = v6;
  BOOL result = _malloc_zone_malloc_with_options_np_outlined(a1, a2, a3, a4);
  *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = v7;
  return result;
}

uint64_t set_msl_lite_hooks(uint64_t (*a1)(uint64_t (**)(), uint64_t))
{
  return a1(malloc_msl_lite_hooks, 24);
}

void insert_msl_lite_zone(uint64_t a1)
{
  lite_zone = a1;
  malloc_slowpath_update();
}

uint64_t get_global_helper_zone()
{
  return *(void *)malloc_zones;
}

atomic_uint *mfm_lock()
{
  if (mfm_arena) {
    return __mfm_lock((atomic_uint *)mfm_arena);
  }
  return result;
}

atomic_uint *__mfm_lock(atomic_uint *result)
{
  if (v1) {
    char v2 = 0;
  }
  else {
    char v2 = 1;
  }
  if ((v2 & 1) == 0) {
    return (atomic_uint *)os_unfair_lock_lock_with_options();
  }
  int v3 = 0;
  atomic_compare_exchange_strong_explicit(result, (unsigned int *)&v3, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
  if (v3) {
    return (atomic_uint *)os_unfair_lock_lock_with_options();
  }
  return result;
}

void mfm_unlock()
{
  if (mfm_arena) {
    __mfm_unlock((atomic_uint *)mfm_arena);
  }
}

void __mfm_unlock(atomic_uint *a1)
{
  int v1 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  int v2 = v1;
  atomic_compare_exchange_strong_explicit(a1, (unsigned int *)&v2, 0, memory_order_release, memory_order_relaxed);
  if (v2 != v1) {
    os_unfair_lock_unlock((os_unfair_lock_t)a1);
  }
}

void mfm_reinit_lock()
{
  if (mfm_arena) {
    *(_DWORD *)mfm_arena = 0;
  }
}

uint64_t mfm_initialize()
{
  kern_return_t v4;
  mach_vm_address_t address;
  mach_vm_address_t pages_plat;

  pages_mach_vm_address_t plat = mvm_allocate_pages_plat(0x800000uLL, 0, 1073741827, 1, 0);
  if (!pages_plat)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: failed to allocate memory";
    qword_C0148 = 0;
    __break(1u);
    JUMPOUT(0x3556CLL);
  }
  mach_vm_address_t address = pages_plat;
  uint64_t v4 = mach_vm_map(mach_task_self_, &address, 0x800000uLL, 0, 117456896, 0, 0, 0, 3, 7, 1u);
  if (v4)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: failed to overwrite mfm arena";
    qword_C0148 = v4;
    __break(1u);
    JUMPOUT(0x3562CLL);
  }
  *(_DWORD *)pages_mach_vm_address_t plat = 0;
  *(void *)(pages_plat + 216) = 0x8000000000000000;
  for (unsigned int i = 0; i <= 0xA; ++i)
  {
    int v2 = (void *)(pages_plat + 16 * i + 32);
    uint64_t v1 = __mfm_block_offset(pages_plat, (uint64_t)v2);
    __mfm_block_set_next(v2, v1);
    v2[1] = v1;
  }
  uint64_t result = __mfm_block_mark_start(pages_plat, 0);
  atomic_store(pages_plat, (unint64_t *)&mfm_arena);
  return result;
}

uint64_t __mfm_block_offset(uint64_t a1, uint64_t a2)
{
  return (a2 - a1) / 16;
}

void *__mfm_block_set_next(void *result, uint64_t a2)
{
  *uint64_t result = a2;
  return result;
}

uint64_t __mfm_block_mark_start(uint64_t result, unint64_t a2)
{
  *(void *)(result + 224 + 16 * (a2 >> 6)) |= 1 << (a2 & 0x3F);
  return result;
}

uint64_t mfm_alloc_size(unint64_t a1)
{
  uint64_t v3 = mfm_arena;
  if (!__mfm_address_owned(mfm_arena, a1)) {
    return 0;
  }
  if (a1 % 0x10) {
    return 0;
  }
  uint64_t v2 = __mfm_block_index(v3, a1);
  if (__mfm_block_is_allocated(v3, v2)) {
    return 16 * __mfm_block_size(v3, v2);
  }
  else {
    return 0;
  }
}

BOOL __mfm_address_owned(uint64_t a1, unint64_t a2)
{
  BOOL v3 = 0;
  if (a1)
  {
    BOOL v3 = 0;
    if (a2 >= a1 + 0x20000) {
      return a2 < a1 + 0x800000;
    }
  }
  return v3;
}

uint64_t __mfm_block_index(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0xF) != 0)
  {
    qword_C0118 = (uint64_t)"BUG IN CLIENT OF LIBMALLOC: invalid address";
    qword_C0148 = a2;
    __break(1u);
    JUMPOUT(0x35988);
  }
  return (a2 - a1 - 0x20000) >> 4;
}

BOOL __mfm_block_is_allocated(uint64_t a1, unint64_t a2)
{
  return (*(void *)(a1 + 224 + 16 * (a2 >> 6)) & *(void *)(a1 + 224 + 8 * (2 * (a2 >> 6) + 1)) & (1 << (a2 & 0x3F))) != 0;
}

uint64_t __mfm_block_size(uint64_t a1, uint64_t a2)
{
  unint64_t v10 = (unint64_t)(a2 + 1) >> 6;
  unint64_t v9 = ((_BYTE)a2 + 1) & 0x3F;
  unint64_t v6 = *(void *)(a1 + 224 + 16 * v10) >> ((a2 + 1) & 0x3F);
  if (v6) {
    return (int)(__clz(__rbit64(v6)) + 1);
  }
  unint64_t v7 = *(void *)(a1 + 224 + 8 * (2 * v10 + 2));
  if (v7) {
    return (int)(__clz(__rbit64(v7)) + 65) - v9;
  }
  long long v8 = *(unint64_t *)(a1 + 224 + 8 * (2 * v10 + 1));
  if (v9 + 19 > 0x40)
  {
    *(void *)&long long v2 = *(void *)(a1 + 224 + 8 * (2 * v10 + 1));
    *((void *)&v2 + 1) = *(void *)(a1 + 224 + 8 * (2 * v10 + 3));
    long long v8 = v2;
  }
  unint64_t v3 = ((unint64_t)v8 >> v9) | (*((void *)&v8 + 1) << (64 - v9));
  if (v9 >= 0x40) {
    unint64_t v3 = *((void *)&v8 + 1) >> (v9 - 64);
  }
  int v4 = v8;
  if ((((_BYTE)a2 + 1) & 0x3F) != 0) {
    int v4 = v3;
  }
  return (v4 & 0x7FFFF) + 1;
}

uint64_t mfm_alloc(unint64_t a1)
{
  uint64_t v10 = mfm_arena;
  uint64_t v9 = 0;
  if (a1 > 0x4000) {
    return 0;
  }
  if (a1)
  {
    if (a1 % 0x10) {
      unint64_t v3 = a1 / 0x10 + 1;
    }
    else {
      unint64_t v3 = a1 / 0x10;
    }
    unint64_t v2 = v3;
  }
  else
  {
    unint64_t v2 = 1;
  }
  __mfm_lock((atomic_uint *)mfm_arena);
  for (unsigned int i = __mfm_size_class_up(v2); i < 0xB; ++i)
  {
    unint64_t v7 = (void *)(v10 + 16 * __mfm_block_next(v10 + 32 + 16 * i));
    if ((void *)(v10 + 32 + 16 * i) != v7)
    {
      __mfm_block_remove(v10, v7);
      uint64_t v5 = ((uint64_t)v7 - v10 - 0x20000) / 16;
      unint64_t v6 = __mfm_block_size(v10, v5);
      if (v6 > v2)
      {
        __mfm_block_mark_start(v10, v5 + v2);
        __mfm_free_block(v10, v5 + v2, v6 - v2);
      }
      __mfm_block_mark_allocated(v10, v5, v2);
      uint64_t v9 = (uint64_t)v7;
      *(_DWORD *)(v10 + 4) += v2;
      ++*(void *)(v10 + 24);
      goto LABEL_19;
    }
  }
  if (v2 < 516096 - *(void *)(mfm_arena + 8))
  {
    unint64_t v4 = *(void *)(mfm_arena + 8);
    __mfm_block_mark_start(v10, v4 + v2);
    __mfm_block_mark_allocated(v10, v4, v2);
    *(void *)(mfm_arena + 8) += v2;
    *(_DWORD *)(v10 + 4) += v2;
    ++*(void *)(v10 + 24);
    uint64_t v9 = v10 + 0x20000 + 16 * v4;
    if (*(void *)(mfm_arena + 16) < *(void *)(mfm_arena + 8)) {
      *(void *)(mfm_arena + 16) = *(void *)(mfm_arena + 8);
    }
  }
LABEL_19:
  __mfm_unlock((atomic_uint *)v10);
  return v9;
}

uint64_t __mfm_size_class_up(unint64_t a1)
{
  if (a1 <= 1)
  {
    return 0;
  }
  else
  {
    unsigned int v3 = 64 - __clz(a1 - 1);
    if (v3 >= 0xA) {
      return 10;
    }
    else {
      return v3;
    }
  }
}

uint64_t __mfm_block_next(uint64_t a1)
{
  return *(void *)a1;
}

void *__mfm_block_remove(uint64_t a1, void *a2)
{
  uint64_t v2 = __mfm_block_next((uint64_t)a2);
  uint64_t v4 = a2[1];
  *(void *)(a1 + 16 * v2 + 8) = v4;
  uint64_t result = __mfm_block_set_next((void *)(a1 + 16 * v4), v2);
  *a2 = 0;
  a2[1] = 0;
  return result;
}

void *__mfm_free_block(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v4 = (void *)(a1 + 32 + 16 * __mfm_size_class_down(a3));
  __mfm_block_mark_free(a1, a2, a3);
  return __mfm_block_insert_head(a1, v4, (void *)(a1 + 0x20000 + 16 * a2));
}

double __mfm_block_mark_allocated(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a3 >= 0x40) {
    return __mfm_block_set_sizes(a1, 1, a2, a3);
  }
  unsigned int v3 = (void *)(a1 + 224 + 8 * (2 * (a2 >> 6) + 1));
  *v3 |= 1 << (a2 & 0x3F);
  uint64_t v4 = (void *)(a1 + 224 + 8 * (2 * ((a2 + a3 - 1) >> 6) + 1));
  *v4 |= 1 << ((a2 + a3 - 1) & 0x3F);
  return result;
}

void mfm_free(uint64_t a1)
{
  uint64_t v6 = mfm_arena;
  if (!__mfm_address_owned(mfm_arena, a1))
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: not MFM owned";
    qword_C0148 = a1;
    __break(1u);
    JUMPOUT(0x36378);
  }
  uint64_t v5 = __mfm_block_index(v6, a1);
  if (!__mfm_block_is_allocated(v6, v5))
  {
    qword_C0118 = (uint64_t)"BUG IN CLIENT OF LIBMALLOC: not an allocated block";
    qword_C0148 = a1;
    __break(1u);
    JUMPOUT(0x363D8);
  }
  unint64_t v4 = __mfm_block_size(v6, v5);
  _platform_bzero();
  __mfm_lock((atomic_uint *)v6);
  if (!__mfm_block_is_allocated(v6, v5) || v4 != __mfm_block_size(v6, v5))
  {
    qword_C0118 = (uint64_t)"BUG IN CLIENT OF LIBMALLOC: double free detected";
    qword_C0148 = a1;
    __break(1u);
    JUMPOUT(0x36474);
  }
  *(_DWORD *)(v6 + 4) -= v4;
  --*(void *)(v6 + 24);
  if (!__mfm_prev_block_is_allocated(v6, v5))
  {
    block_mach_vm_size_t size = __mfm_prev_block_size(v6, v5);
    __mfm_block_clear_start(v6, v5);
    __mfm_block_remove(v6, (void *)(v6 + 16 * (v5 - block_size) + 0x20000));
    v5 -= block_size;
    v4 += block_size;
  }
  if (v5 + v4 < *(void *)(v6 + 8) && !__mfm_block_is_allocated(v6, v5 + v4))
  {
    uint64_t v1 = __mfm_block_size(v6, v5 + v4);
    __mfm_block_clear_start(v6, v5 + v4);
    __mfm_block_remove(v6, (void *)(v6 + 16 * (v5 + v4) + 0x20000));
    v4 += v1;
  }
  if (v5 + v4 == *(void *)(v6 + 8))
  {
    __mfm_block_clear_start(v6, v5 + v4);
    __mfm_block_mark_free(v6, v5, v4);
    *(void *)(v6 + 8) = v5;
  }
  else
  {
    __mfm_free_block(v6, v5, v4);
  }
  __mfm_unlock((atomic_uint *)v6);
}

BOOL __mfm_prev_block_is_allocated(uint64_t a1, uint64_t a2)
{
  return (*(void *)(a1 + 224 + 8 * (2 * ((a2 - 1) >> 6) + 1)) & (1 << ((a2 - 1) & 0x3F))) != 0;
}

uint64_t __mfm_prev_block_size(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = (a2 - 1) >> 6;
  unint64_t v8 = ((_BYTE)a2 - 1) & 0x3F;
  unint64_t v5 = *(void *)(a1 + 224 + 16 * v9) << (63 - ((a2 - 1) & 0x3F));
  if (v5) {
    return (int)(__clz(v5) + 1);
  }
  unint64_t v6 = *(void *)(a1 + 224 + 8 * (2 * v9 - 2));
  if (v6) {
    return v8 + (int)__clz(v6) + 2;
  }
  *(void *)&long long v2 = 0;
  *((void *)&v2 + 1) = *(void *)(a1 + 224 + 8 * (2 * v9 + 1));
  long long v7 = v2;
  if (v8 < 0x13) {
    long long v7 = v2 | *(unint64_t *)(a1 + 224 + 8 * (2 * v9 - 1));
  }
  unint64_t v3 = ((unint64_t)v7 >> (v8 + 45)) | (*((void *)&v7 + 1) << (19 - v8));
  if (v8 + 45 >= 0x40) {
    unint64_t v3 = *((void *)&v7 + 1) >> (v8 - 19);
  }
  return (v3 & 0x7FFFF) + 1;
}

uint64_t __mfm_block_clear_start(uint64_t result, unint64_t a2)
{
  *(void *)(result + 224 + 16 * (a2 >> 6)) &= ~(1 << (a2 & 0x3F));
  return result;
}

double __mfm_block_mark_free(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a3 >= 0x40) {
    return __mfm_block_set_sizes(a1, 0, a2, a3);
  }
  unint64_t v3 = (void *)(a1 + 224 + 8 * (2 * (a2 >> 6) + 1));
  *v3 &= ~(1 << (a2 & 0x3F));
  unint64_t v4 = (void *)(a1 + 224 + 8 * (2 * ((a2 + a3 - 1) >> 6) + 1));
  *v4 &= ~(1 << ((a2 + a3 - 1) & 0x3F));
  return result;
}

BOOL mfm_claimed_address(unint64_t a1)
{
  return __mfm_address_owned(mfm_arena, a1);
}

uint64_t mfm_zone_address()
{
  return mfm_arena;
}

uint64_t mfmi_enumerator(unsigned int a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, void (*a6)(void, uint64_t, uint64_t, void *, uint64_t))
{
  unsigned int v20 = a1;
  uint64_t v19 = a2;
  int v18 = a3;
  uint64_t v17 = a4;
  uint64_t v16 = a5;
  vm_size_t v15 = a6;
  uint64_t v14 = 0;
  unsigned int v13 = mfmi_read_zone(a1, a4, a5, &v14);
  if (v13)
  {
    return v13;
  }
  else
  {
    if ((v18 & 4) != 0)
    {
      v12[0] = v17;
      v12[1] = 0x20000;
      v15(v20, v19, 4, v12, 1);
    }
    if ((v18 & 2) != 0)
    {
      v11[0] = v17 + 0x20000;
      v11[1] = 8257536;
      v15(v20, v19, 2, v11, 1);
    }
    if (v18)
    {
      unsigned int v9 = 0;
      for (unint64_t i = 0; i < *(void *)(v14 + 8); i += v8)
      {
        uint64_t v10 = v14 + 0x20000 + 16 * i;
        uint64_t v8 = __mfm_block_size(v14, i);
        if (__mfm_block_is_allocated(v14, i))
        {
          if (v9 == 32)
          {
            v15(v20, v19, 1, v22, v9);
            unsigned int v9 = 0;
          }
          v22[2 * v9] = v17 + v10 - v14;
          v22[2 * v9++ + 1] = 16 * v8;
        }
      }
      if (v9) {
        v15(v20, v19, 1, v22, v9);
      }
    }
    return 0;
  }
}

unint64_t mfmi_good_size(uint64_t a1, unint64_t a2)
{
  if (a2 > 0x4000) {
    return 0;
  }
  if (a2 % 0x10) {
    return a2 + 16 - a2 % 0x10;
  }
  else {
    return a2;
  }
}

uint64_t mfmi_check()
{
  return 1;
}

uint64_t mfmi_print_self(uint64_t a1, int a2)
{
  if (mfm_arena) {
    return print_mfm_arena(mfm_arena, a2 != 0, (void (*)(const char *, ...))malloc_report_simple);
  }
  return result;
}

atomic_uint *mfmi_force_lock()
{
  return mfm_lock();
}

void mfmi_force_unlock()
{
}

uint64_t mfmi_statistics_self(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = mfm_arena;
  uint64_t result = _platform_bzero();
  if (v3) {
    return mfmi_statistics(v3, a2);
  }
  return result;
}

uint64_t mfmi_locked()
{
  unint64_t v4 = (atomic_uint *)mfm_arena;
  if (!mfm_arena) {
    return 0;
  }
  int v0 = 0;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)mfm_arena, (unsigned int *)&v0, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
  if (v0)
  {
    return 0;
  }
  else
  {
    int v1 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    int v2 = v1;
    atomic_compare_exchange_strong_explicit(v4, (unsigned int *)&v2, 0, memory_order_release, memory_order_relaxed);
    if (v2 != v1) {
      os_unfair_lock_unlock((os_unfair_lock_t)v4);
    }
    return 1;
  }
}

void mfmi_reinit_lock()
{
}

uint64_t mfmi_print_task(unsigned int a1, unsigned int a2, const void *a3, uint64_t a4, void (*a5)(const char *, ...))
{
  unsigned int v11 = a1;
  unsigned int v10 = a2;
  unsigned int v9 = a3;
  uint64_t v8 = a4;
  long long v7 = (uint64_t (*)(const char *, ...))a5;
  uint64_t v6 = 0;
  if (mfmi_read_zone(a1, (uint64_t)a3, a4, &v6)) {
    return v7("Failed to read ProbGuard zone at %p\n", v9);
  }
  else {
    return mfmi_print(v6, v10 >= 2, (void (*)(const char *, ...))v7);
  }
}

uint64_t mfmi_statistics_task(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v10 = a1;
  uint64_t v9 = a2;
  uint64_t v8 = a3;
  uint64_t v7 = a4;
  uint64_t v6 = 0;
  int v5 = mfmi_read_zone(a1, a2, a3, &v6);
  uint64_t result = _platform_bzero();
  if (!v5) {
    return mfmi_statistics(v6, v7);
  }
  return result;
}

uint64_t __mfm_size_class_down(unint64_t a1)
{
  unsigned int v3 = 63 - __clz(a1);
  if (v3 >= 0xA) {
    return 10;
  }
  else {
    return v3;
  }
}

void *__mfm_block_insert_head(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = __mfm_block_offset(a1, (uint64_t)a2);
  uint64_t v4 = __mfm_block_next((uint64_t)a2);
  uint64_t v5 = __mfm_block_offset(a1, (uint64_t)a3);
  a3[1] = v6;
  __mfm_block_set_next(a3, v4);
  uint64_t result = __mfm_block_set_next(a2, v5);
  *(void *)(a1 + 16 * v4 + 8) = v5;
  return result;
}

double __mfm_block_set_sizes(uint64_t a1, char a2, unint64_t a3, uint64_t a4)
{
  unint64_t v27 = a3 >> 6;
  unint64_t v25 = a3 & 0x3F;
  long long v29 = 2 * (a4 - 1) + (unint64_t)(a2 & 1);
  uint64_t v4 = 0xFFFFFLL << v25;
  unint64_t v5 = 0xFFFFFuLL >> (64 - v25);
  if (v25 >= 0x40)
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0xFFFFFLL << (v25 - 64);
  }
  unint64_t v6 = 0;
  if ((a3 & 0x3F) != 0) {
    unint64_t v6 = v5;
  }
  *(void *)&long long v7 = v4;
  *((void *)&v7 + 1) = v6;
  long long v31 = v7;
  uint64_t v8 = (void)v29 << v25;
  unint64_t v9 = ((unint64_t)v29 >> (64 - v25)) | (*((void *)&v29 + 1) << v25);
  if (v25 >= 0x40)
  {
    uint64_t v8 = 0;
    unint64_t v9 = (void)v29 << (v25 - 64);
  }
  unint64_t v10 = 0;
  if ((a3 & 0x3F) != 0) {
    unint64_t v10 = v9;
  }
  uint64_t v11 = v8;
  uint64_t v12 = (void *)(a1 + 224 + 8 * (2 * v27 + 1));
  *v12 &= ~(void)v31;
  *v12 |= v11;
  if (v25 + 19 >= 0x40)
  {
    unsigned int v13 = (void *)(a1 + 224 + 8 * (2 * v27 + 3));
    *v13 &= ~*((void *)&v31 + 1);
    *v13 |= v10;
  }
  unint64_t v28 = (a3 + a4 - 1) >> 6;
  uint64_t v26 = ((_BYTE)a3 + (_BYTE)a4 - 1) & 0x3F;
  long long v30 = a4 - 1 + ((unint64_t)(a2 & 1) << 19);
  uint64_t v14 = 0xFFFFFLL << (v26 + 45);
  unint64_t v15 = 0xFFFFFuLL >> (19 - ((a3 + a4 - 1) & 0x3F));
  if ((unint64_t)(v26 + 45) >= 0x40)
  {
    uint64_t v14 = 0;
    unint64_t v15 = 0xFFFFFLL << (((a3 + a4 - 1) & 0x3F) - 19);
  }
  unint64_t v16 = 0;
  if ((((_BYTE)a3 + (_BYTE)a4 - 1) & 0x3F) != 0xFFFFFFFFFFFFFFD3) {
    unint64_t v16 = v15;
  }
  uint64_t v17 = v14;
  unint64_t v18 = v16;
  uint64_t v19 = (void)v30 << (v26 + 45);
  unint64_t v20 = ((unint64_t)v30 >> (19 - v26)) | (*((void *)&v30 + 1) << (v26 + 45));
  if ((unint64_t)(v26 + 45) >= 0x40)
  {
    uint64_t v19 = 0;
    unint64_t v20 = (void)v30 << (v26 - 19);
  }
  double v21 = *(double *)&v20;
  if ((unint64_t)(v26 + 46) <= 0x40)
  {
    unint64_t v22 = (void *)(a1 + 224 + 8 * (2 * v28 - 1));
    *v22 &= ~v17;
    *v22 |= v19;
  }
  unint64_t v23 = (void *)(a1 + 224 + 8 * (2 * v28 + 1));
  *v23 &= ~v18;
  double result = v21;
  *v23 |= *(void *)&v21;
  return result;
}

uint64_t mfmi_read_zone(unsigned int a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v6 = reader_or_in_memory_fallback_1(a3, a1);
  return v6(a1, a2, 0x800000, a4);
}

uint64_t (*reader_or_in_memory_fallback_1(uint64_t a1, int a2))(int a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a1) {
    return (uint64_t (*)(int, uint64_t, uint64_t, void *))a1;
  }
  BOOL v3 = 1;
  if (a2) {
    BOOL v3 = mach_task_is_self() != 0;
  }
  if (!v3)
  {
    __break(1u);
    JUMPOUT(0x37A10);
  }
  return _malloc_default_reader_1;
}

uint64_t _malloc_default_reader_1(int a1, uint64_t a2, uint64_t a3, void *a4)
{
  BOOL v5 = 1;
  if (a1) {
    BOOL v5 = mach_task_is_self() != 0;
  }
  if (!v5)
  {
    __break(1u);
    JUMPOUT(0x37AB0);
  }
  *a4 = a2;
  return 0;
}

uint64_t print_mfm_arena(uint64_t a1, char a2, void (*a3)(const char *, ...))
{
  char v13 = a2 & 1;
  a3("mfm_arena info\n");
  a3(" address      : %p\n", (const void *)a1);
  a3(" size         : %zd\n", 16 * *(unsigned int *)(a1 + 4));
  a3(" high water   : %zd\n", 16 * *(void *)(a1 + 8));
  a3(" arena        : [%p, %p)\n", (const void *)(a1 + 0x20000), (const void *)(a1 + 0x800000));
  a3("\n");
  a3("freelists\n");
  for (unsigned int i = 0; i < 0xB; ++i)
  {
    uint64_t v10 = a1 + 32 + 16 * i;
    a3(" size %-8zd:\n", 16 << i);
    for (int j = (char *)(a1 + 16 * __mfm_block_next(v10));
          j != (char *)v10;
          int j = (char *)(a1 + 16 * __mfm_block_next((uint64_t)j)))
    {
      uint64_t v8 = __mfm_block_size(a1, (uint64_t)&j[-a1 - 0x20000] / 16);
      a3("  [%p, %p) size=%zd\n", j, &j[16 * v8], 16 * v8);
    }
  }
  uint64_t result = ((uint64_t (*)(const char *))a3)("\n");
  if (v13)
  {
    a3("blocks\n");
    for (unint64_t k = 0; k < *(void *)(a1 + 8); k += v6)
    {
      BOOL is_allocated = __mfm_block_is_allocated(a1, k);
      uint64_t v6 = __mfm_block_size(a1, k);
      a3(" %c[%p, %p) size=%zd\n", asc_A3551[is_allocated], (const void *)(a1 + 0x20000 + 16 * k), (const void *)(a1 + 0x20000 + 16 * k + 16 * v6), 16 * v6);
    }
    long long v7 = (char *)(a1 + 0x20000 + 16 * *(void *)(a1 + 8));
    a3("  [%p, %p) size=%zd (bump)\n", v7, &v7[16 * (516096 - *(void *)(a1 + 8))], 16 * (516096 - *(void *)(a1 + 8)));
    return ((uint64_t (*)(const char *))a3)("\n");
  }
  return result;
}

uint64_t mfmi_statistics(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  *(_DWORD *)a2 = *(void *)(result + 24);
  *(void *)(a2 + 8) = 16 * *(unsigned int *)(result + 4);
  *(void *)(a2 + 24) = 0x800000;
  *(void *)(a2 + 16) += (8 * (2 * v2 / 0x40uLL) + 224 + vm_page_size - 1) & ~(vm_page_size - 1);
  *(void *)(a2 + 16) += (vm_page_size - 1 + 16 * v2) & ~(vm_page_size - 1);
  return result;
}

uint64_t mfmi_print(uint64_t a1, char a2, void (*a3)(const char *, ...))
{
  return print_mfm_arena(a1, a2 & 1, a3);
}

uint64_t xzm_segment_group_segment_foreach_span(uint64_t a1, uint64_t a2)
{
  unint64_t v11 = a1 + 2136 + 48 * *(unsigned int *)(a1 + 16);
  unint64_t v10 = a1 + 2136;
  if (*(unsigned char *)(a1 + 20) == 1)
  {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(a2 + 16))(a2, a1 + 2136, *(unsigned int *)(a1 + 2176));
  }
  else
  {
    while (v10 < v11)
    {
      unsigned __int8 v7 = *(unsigned char *)(v10 + 32) & 0xF;
      BOOL v15 = v7 == 2 || v7 - 5 <= 2;
      if (v15 || v7 == 8)
      {
        if (v7 == 2) {
          unsigned int v6 = 1;
        }
        else {
          unsigned int v6 = *(_DWORD *)(v10 + 40);
        }
        unsigned int v8 = (*(uint64_t (**)(uint64_t, unint64_t, void))(a2 + 16))(a2, v10, v6);
        if (v8) {
          return v8;
        }
        v10 += 48 * v6;
      }
      else
      {
        unint64_t v5 = v10;
        do
        {
          v10 += 48;
          int v4 = *(unsigned char *)(v10 + 32) & 0xF;
          BOOL v14 = v4 == 2 || (v4 - 5) <= 2;
          BOOL v3 = 0;
          if (!v14)
          {
            BOOL v3 = 0;
            if ((*(unsigned char *)(v10 + 32) & 0xF) != 8) {
              BOOL v3 = v10 < v11;
            }
          }
        }
        while (v3);
        unsigned int v9 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(a2 + 16))(a2, v5, (uint64_t)(v10 - v5) / 48);
        if (v9) {
          return v9;
        }
      }
    }
    return 0;
  }
}

uint64_t xzm_segment_table_foreach(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t *a4)
{
  unint64_t v8 = 0;
  if (a4) {
    unint64_t v8 = *a4;
  }
  for (unint64_t i = 0; i < a2; ++i)
  {
    unint64_t v6 = (unint64_t)*(unsigned int *)(a1 + 4 * i) << 14;
    if (v6)
    {
      if (v6 != v8)
      {
        unint64_t v8 = (unint64_t)*(unsigned int *)(a1 + 4 * i) << 14;
        unsigned int v5 = (*(uint64_t (**)(uint64_t, unint64_t))(a3 + 16))(a3, v6);
        if (v5) {
          return v5;
        }
      }
    }
  }
  if (a4) {
    *a4 = v8;
  }
  return 0;
}

uint64_t xzm_ptr_in_use_enumerator(int a1, uint64_t a2, int a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t, uint64_t **), void (*a6)(void, uint64_t, uint64_t, void *, uint64_t))
{
  unsigned int v52 = a1;
  uint64_t v51 = a2;
  int v50 = a3;
  uint64_t v49 = a4;
  BOOL v48 = a5;
  int v47 = a6;
  uint64_t v46 = 0;
  uint64_t v45 = 0;
  unint64_t v44 = 0;
  BOOL v43 = 0;
  BOOL v48 = (uint64_t (*)(void, uint64_t, uint64_t, uint64_t **))reader_or_in_memory_fallback_2((uint64_t)a5, a1);
  BOOL v42 = (v50 & 4) != 0;
  BOOL v41 = (v50 & 2) != 0;
  BOOL v40 = (v50 & 1) != 0;
  unsigned int v39 = _xzm_introspect_map_zone_and_main(v52, v49, (uint64_t (*)(void, uint64_t, unint64_t, void **))v48, &v46, &v45, &v44);
  if (v39)
  {
    return v39;
  }
  else
  {
    BOOL v43 = v49 == v44;
    if (v49 == v44
      && (uint64_t v38 = 0, uint64_t v38 = *(void *)(v45 + 336), (v39 = mfm_introspect(v52, v51, v50, v38, (uint64_t)v48, v47)) != 0))
    {
      return v39;
    }
    else
    {
      unint64_t v28 = _NSConcreteStackBlock;
      int v29 = 0x40000000;
      int v30 = 0;
      long long v31 = __xzm_ptr_in_use_enumerator_block_invoke;
      unint64_t v32 = &__block_descriptor_tmp;
      BOOL v36 = v42;
      BOOL v37 = v43;
      unsigned __int16 v33 = v47;
      unsigned int v35 = v52;
      uint64_t v34 = v51;
      uint64_t v17 = _NSConcreteStackBlock;
      int v18 = 0x40000000;
      int v19 = 0;
      unint64_t v20 = __xzm_ptr_in_use_enumerator_block_invoke_3;
      double v21 = &__block_descriptor_tmp_4;
      BOOL v25 = v42;
      unint64_t v22 = v47;
      unsigned int v24 = v52;
      uint64_t v23 = v51;
      BOOL v26 = v41;
      BOOL v27 = v40;
      if (v43)
      {
        unint64_t v8 = _NSConcreteStackBlock;
        int v9 = 0x40000000;
        int v10 = 0;
        unint64_t v11 = __xzm_ptr_in_use_enumerator_block_invoke_4;
        uint64_t v12 = &__block_descriptor_tmp_6;
        BOOL v16 = v41;
        char v13 = v47;
        unsigned int v15 = v52;
        uint64_t v14 = v51;
        return _xzm_introspect_enumerate(v52, v48, v49, v46, v44, v45, v40, (uint64_t)&v28, (uint64_t)&__block_literal_global, (uint64_t)&v17, (uint64_t)&v8);
      }
      else
      {
        return _xzm_introspect_enumerate(v52, v48, v49, v46, v44, v45, v40, (uint64_t)&v28, (uint64_t)&__block_literal_global, (uint64_t)&v17, 0);
      }
    }
  }
}

void xzm_print_self(unsigned char *a1, int a2)
{
  if (a2) {
    int v2 = 2;
  }
  else {
    int v2 = 0;
  }
  xzm_print(mach_task_self_, v2, a1, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t **))_malloc_default_reader_2, (void (*)(const char *, ...))malloc_report_simple);
}

void xzm_statistics_self(uint64_t a1, _OWORD *a2)
{
  if (!*(void *)(a1 + 232)) {
    mfm_lock();
  }
  xzm_force_lock(a1);
  xzm_statistics(mach_task_self_, a1, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t **))_malloc_default_reader_2, (uint64_t)malloc_report_simple, a2);
  xzm_force_unlock(a1);
  if (!*(void *)(a1 + 232)) {
    mfm_unlock();
  }
}

void xzm_print_task(unsigned int a1, int a2, unsigned char *a3, uint64_t (*a4)(void, uint64_t, uint64_t, uint64_t **), void (*a5)(const char *, ...))
{
}

uint64_t xzm_statistics_task(unsigned int a1, uint64_t a2, uint64_t (*a3)(void, uint64_t, uint64_t, uint64_t **), _OWORD *a4)
{
  return xzm_statistics(a1, a2, a3, 0, a4);
}

uint64_t (*reader_or_in_memory_fallback_2(uint64_t a1, int a2))(int a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a1) {
    return (uint64_t (*)(int, uint64_t, uint64_t, void *))a1;
  }
  BOOL v3 = 1;
  if (a2) {
    BOOL v3 = mach_task_is_self() != 0;
  }
  if (!v3)
  {
    __break(1u);
    JUMPOUT(0x38AB8);
  }
  return _malloc_default_reader_2;
}

uint64_t _xzm_introspect_map_zone_and_main(unsigned int a1, uint64_t a2, uint64_t (*a3)(void, uint64_t, unint64_t, void **), void *a4, void *a5, void *a6)
{
  unsigned int v18 = a1;
  uint64_t v17 = a2;
  BOOL v16 = a3;
  unsigned int v15 = a4;
  uint64_t v14 = a5;
  char v13 = a6;
  uint64_t v12 = 0;
  int v11 = a3(a1, a2, 304uLL, &v12);
  if (v11)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: failed to map zone";
    __break(1u);
    JUMPOUT(0x38B70);
  }
  unint64_t v10 = 0;
  unint64_t v10 = v12[25];
  if (v10 <= 0x12F)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: inconsistent zone region info";
    __break(1u);
    JUMPOUT(0x38BC0);
  }
  int v11 = v16(v18, v17, v10, &v12);
  if (v11)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: failed to map full zone";
    __break(1u);
    JUMPOUT(0x38C18);
  }
  int v9 = 0;
  if (v12[29])
  {
    uint64_t v7 = v12[29];
    int v11 = v16(v18, v7, 472uLL, &v9);
    if (v11)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: failed to map main zone";
      __break(1u);
      JUMPOUT(0x38CA8);
    }
    unint64_t v8 = v9[38];
    if (v8 <= 0x1D7)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: inconsistent main zone info";
      __break(1u);
      JUMPOUT(0x38CF0);
    }
    int v11 = v16(v18, v7, v8, &v9);
    if (v11)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: failed to map full main zone";
      __break(1u);
      JUMPOUT(0x38D48);
    }
  }
  else
  {
    int v9 = v12;
    if (v12[38] != v10)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: inconsistent main zone size";
      __break(1u);
      JUMPOUT(0x38D98);
    }
    uint64_t v7 = v17;
    unint64_t v8 = v10;
  }
  if (v8 < v9[38])
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: inconsistent main region size";
    __break(1u);
    JUMPOUT(0x38DF0);
  }
  if (!v12)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"zone\" failed (/Library/Caches/com.apple.xbs/Sources/lib"
                           "malloc_driverkit/src/xzone/xzone_introspect.c:557)";
    __break(1u);
    JUMPOUT(0x38E28);
  }
  if (!v9)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"main\" failed (/Library/Caches/com.apple.xbs/Sources/lib"
                           "malloc_driverkit/src/xzone/xzone_introspect.c:558)";
    __break(1u);
    JUMPOUT(0x38E58);
  }
  if (!v7)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"main_address\" failed (/Library/Caches/com.apple.xbs/Sou"
                           "rces/libmalloc_driverkit/src/xzone/xzone_introspect.c:559)";
    __break(1u);
    JUMPOUT(0x38E88);
  }
  *unsigned int v15 = v12;
  *uint64_t v14 = v9;
  *char v13 = v7;
  return 0;
}

uint64_t _xzm_introspect_enumerate(unsigned int a1, uint64_t (*a2)(void, uint64_t, uint64_t, uint64_t **), uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unsigned int v65 = a1;
  uint64_t v64 = a2;
  uint64_t v63 = a3;
  uint64_t v62 = a4;
  unint64_t v61 = a5;
  uint64_t v60 = a6;
  char v59 = a7;
  uint64_t v58 = a8;
  BOOL v57 = a3 == a5;
  char v23 = 1;
  if (a11) {
    char v23 = v57;
  }
  if ((v23 & 1) == 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!span_enumerator || zone_is_main\" failed (/Library/Cach"
                           "es/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_introspect.c:267)";
    __break(1u);
    JUMPOUT(0x38F70);
  }
  uint64_t v56 = 0;
  if (v57) {
    uint64_t v22 = *(void *)(v60 + 304);
  }
  else {
    uint64_t v22 = *(void *)(v62 + 200);
  }
  uint64_t v56 = v22;
  if (v57)
  {
    unint64_t v55 = 0;
    unint64_t v55 = (unint64_t)*(unsigned __int8 *)(v60 + 330) << 6;
    char v69 = 0;
    uint64_t v54 = 0;
    unint64_t v11 = *(void *)(v60 + 304);
    unint64_t v12 = *(void *)(v60 + 400);
    unint64_t v94 = v61;
    uint64_t v93 = v60;
    unint64_t v92 = v11;
    unint64_t v91 = v12;
    unint64_t v90 = v55;
    if (v12 >= v61)
    {
      unint64_t v89 = v91 - v94;
      unint64_t v88 = 0;
      BOOL v13 = __CFADD__(v91 - v94, v90);
      unint64_t v88 = v91 - v94 + v90;
      BOOL v96 = v13;
      if (v13)
      {
        uint64_t v95 = 0;
      }
      else if (v88 > v92)
      {
        uint64_t v95 = 0;
      }
      else
      {
        uint64_t v95 = v93 + v89;
      }
    }
    else
    {
      uint64_t v95 = 0;
    }
    uint64_t v54 = v95;
    if (!v95)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: Failed to rebase metapools";
      __break(1u);
      JUMPOUT(0x3914CLL);
    }
    for (int i = 0; i < *(unsigned __int8 *)(v60 + 330); ++i)
    {
      uint64_t v52 = v54 + ((uint64_t)i << 6);
      uint64_t j = 0;
      for (uint64_t j = *(void *)(v52 + 24); j; uint64_t j = *v50)
      {
        int v50 = 0;
        unsigned int v49 = v64(v65, j, 16, &v50);
        if (v49)
        {
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: Failed to map metapool slab";
          __break(1u);
          JUMPOUT(0x3922CLL);
        }
        unsigned int v49 = (*(uint64_t (**)(void))(v58 + 16))();
        if (v49) {
          return v49;
        }
      }
    }
  }
  uint64_t v48 = 0x10000;
  char v68 = 0;
  uint64_t v47 = 0;
  unint64_t v14 = *(void *)(v60 + 304);
  unint64_t v15 = *(void *)(v60 + 408);
  unint64_t v85 = v61;
  uint64_t v84 = v60;
  unint64_t v83 = v14;
  unint64_t v82 = v15;
  uint64_t v81 = 0x10000;
  if (v15 >= v61)
  {
    unint64_t v80 = v82 - v85;
    unint64_t v79 = 0;
    BOOL v16 = __CFADD__(v82 - v85, v81);
    unint64_t v79 = v82 - v85 + v81;
    BOOL v87 = v16;
    if (v16)
    {
      uint64_t v86 = 0;
    }
    else if (v79 > v83)
    {
      uint64_t v86 = 0;
    }
    else
    {
      uint64_t v86 = v84 + v80;
    }
  }
  else
  {
    uint64_t v86 = 0;
  }
  uint64_t v47 = v86;
  if (!v86)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: failed to rebase segment table";
    __break(1u);
    JUMPOUT(0x39424);
  }
  long long v31 = _NSConcreteStackBlock;
  int v32 = 1107296256;
  int v33 = 0;
  uint64_t v34 = ___xzm_introspect_enumerate_block_invoke;
  unsigned int v35 = &__block_descriptor_tmp_31;
  unsigned int v39 = (uint64_t (*)(void, void, void, void))v64;
  unsigned int v43 = v65;
  uint64_t v36 = a9;
  uint64_t v40 = v62;
  uint64_t v41 = v63;
  uint64_t v42 = v56;
  char v44 = v59 & 1;
  uint64_t v37 = a10;
  BOOL v45 = v57;
  uint64_t v38 = a11;
  uint64_t v46 = &v31;
  unint64_t v30 = 0;
  unsigned int v29 = xzm_segment_table_foreach(v47, 0x4000uLL, (uint64_t)&v31, &v30);
  if (v29)
  {
    return v29;
  }
  else
  {
    uint64_t v28 = 0;
    unint64_t v17 = *(void *)(v60 + 416);
    uint64_t v28 = 4 * v17;
    BOOL v67 = v17 >> 62 != 0;
    if (v17 >> 62)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: failed to compute extended segment table size";
      __break(1u);
      JUMPOUT(0x39588);
    }
    uint64_t v27 = 0;
    unint64_t v18 = *(void *)(v60 + 304);
    unint64_t v19 = *(void *)(v60 + 424);
    unint64_t v76 = v61;
    uint64_t v75 = v60;
    unint64_t v74 = v18;
    unint64_t v73 = v19;
    uint64_t v72 = v28;
    if (v19 >= v61)
    {
      unint64_t v71 = v73 - v76;
      unint64_t v70 = 0;
      BOOL v20 = __CFADD__(v73 - v76, v72);
      unint64_t v70 = v73 - v76 + v72;
      BOOL v78 = v20;
      if (v20)
      {
        uint64_t v77 = 0;
      }
      else if (v70 > v74)
      {
        uint64_t v77 = 0;
      }
      else
      {
        uint64_t v77 = v75 + v71;
      }
    }
    else
    {
      uint64_t v77 = 0;
    }
    uint64_t v27 = v77;
    if (v77)
    {
      for (unint64_t k = 0; k < *(void *)(v60 + 416); ++k)
      {
        if (*(_DWORD *)(v27 + 4 * k))
        {
          uint64_t v25 = 0;
          if (v64(v65, (unint64_t)*(unsigned int *)(v27 + 4 * k) << 16, 0x10000, (uint64_t **)&v25))
          {
            qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: Failed to map segment table";
            __break(1u);
            JUMPOUT(0x39754);
          }
          unsigned int v24 = xzm_segment_table_foreach(v25, 0x4000uLL, (uint64_t)v46, &v30);
          if (v24) {
            return v24;
          }
        }
      }
    }
    return 0;
  }
}

uint64_t __xzm_ptr_in_use_enumerator_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v9 = a1;
  uint64_t v8 = a2;
  uint64_t v7 = a3;
  char v6 = a4;
  void v5[2] = a1;
  if (*(unsigned char *)(a1 + 52) & 1) != 0 && (*(unsigned char *)(a1 + 53))
  {
    v5[0] = v8;
    v5[1] = v7;
    (*(void (**)(void, void, uint64_t, void *, uint64_t))(a1 + 32))(*(unsigned int *)(a1 + 48), *(void *)(a1 + 40), 4, v5, 1);
  }
  return 0;
}

int __xzm_ptr_in_use_enumerator_block_invoke_2(id a1, unint64_t a2, xzm_segment_s *a3, const char *a4)
{
  return 0;
}

uint64_t __xzm_ptr_in_use_enumerator_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v23 = a1;
  uint64_t v22 = a2;
  uint64_t v21 = a3;
  uint64_t v20 = a4;
  unsigned int v19 = a5;
  uint64_t v18 = a6;
  uint64_t v17 = a7;
  uint64_t v16 = a8;
  uint64_t v15 = a9;
  uint64_t v14 = a1;
  char v13 = 0;
  char v13 = *(unsigned char *)(a4 + 32) & 0xF;
  if ((*(unsigned char *)(a1 + 52) & 1) != 0 && v13 == 7)
  {
    v12[0] = v22;
    v12[1] = 0x4000;
    (*(void (**)(void, void, uint64_t, void *, uint64_t))(a1 + 32))(*(unsigned int *)(a1 + 48), *(void *)(a1 + 40), 4, v12, 1);
  }
  if (*(unsigned char *)(a1 + 53) & 1) != 0 || (*(unsigned char *)(a1 + 54))
  {
    v11[0] = v18;
    v11[1] = (unint64_t)v19 << 14;
    char v25 = v13;
    if (v13 == 2 || v13 == 5)
    {
      if (*(unsigned char *)(a1 + 53)) {
        (*(void (**)(void, void, uint64_t, void *, uint64_t))(a1 + 32))(*(unsigned int *)(a1 + 48), *(void *)(a1 + 40), 2, v11, 1);
      }
      if (*(unsigned char *)(a1 + 54)) {
        (*(void (**)(void, void, uint64_t, uint64_t, uint64_t))(a1 + 32))(*(unsigned int *)(a1 + 48), *(void *)(a1 + 40), 1, v16, v15);
      }
    }
    else
    {
      (*(void (**)(void, void, uint64_t, void *, uint64_t))(a1 + 32))(*(unsigned int *)(a1 + 48), *(void *)(a1 + 40), 3, v11, 1);
    }
    return 0;
  }
  else
  {
    return 0;
  }
}

uint64_t __xzm_ptr_in_use_enumerator_block_invoke_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  uint64_t v15 = a1;
  uint64_t v14 = a2;
  uint64_t v13 = a3;
  uint64_t v12 = a4;
  unsigned int v11 = a5;
  uint64_t v10 = a6;
  uint64_t v9 = a1;
  if (*(unsigned char *)(a1 + 52))
  {
    BOOL v8 = 1;
    if (*(unsigned char *)(v13 + 20) == 1) {
      BOOL v8 = (*(unsigned char *)(v12 + 32) & 0xF) != 7;
    }
    if (v8)
    {
      v7[0] = v10;
      v7[1] = (unint64_t)v11 << 14;
      (*(void (**)(void, void, uint64_t, void *, uint64_t))(a1 + 32))(*(unsigned int *)(a1 + 48), *(void *)(a1 + 40), 2, v7, 1);
    }
  }
  return 0;
}

uint64_t _malloc_default_reader_2(int a1, uint64_t a2, uint64_t a3, void *a4)
{
  BOOL v5 = 1;
  if (a1) {
    BOOL v5 = mach_task_is_self() != 0;
  }
  if (!v5)
  {
    __break(1u);
    JUMPOUT(0x39C20);
  }
  *a4 = a2;
  return 0;
}

uint64_t ___xzm_introspect_enumerate_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = a1;
  uint64_t v24 = a2;
  v23[1] = a1;
  v23[0] = 0;
  unsigned int v22 = 0;
  unsigned int v22 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t *))(a1 + 56))(*(unsigned int *)(a1 + 88), a2, 14424, v23);
  if (v22)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: failed to map segment header";
    __break(1u);
    JUMPOUT(0x39CC8);
  }
  uint64_t v21 = 0;
  int v2 = *(uint64_t (**)(uint64_t, void, unint64_t, uint64_t *))(a1 + 56);
  uint64_t v3 = *(unsigned int *)(a1 + 88);
  uint64_t v27 = v23[0];
  uint64_t v29 = v23[0];
  int v28 = 0;
  unsigned int v22 = v2(v3, *(void *)(v23[0] + 80), (unint64_t)*(unsigned int *)(v23[0] + 12) << 14, &v21);
  if (v22)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: failed to map segment";
    __break(1u);
    JUMPOUT(0x39D58);
  }
  unsigned int v22 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  if (v22)
  {
    return v22;
  }
  else
  {
    char v6 = _NSConcreteStackBlock;
    int v7 = 1107296256;
    int v8 = 0;
    uint64_t v9 = ___xzm_introspect_enumerate_block_invoke_2;
    uint64_t v10 = &__block_descriptor_tmp_29;
    uint64_t v13 = v23[0];
    uint64_t v14 = v21;
    uint64_t v15 = *(void *)(a1 + 64);
    uint64_t v16 = *(void *)(a1 + 72);
    uint64_t v17 = *(void *)(a1 + 80);
    char v19 = *(unsigned char *)(a1 + 92) & 1;
    uint64_t v18 = v24;
    uint64_t v11 = *(void *)(a1 + 40);
    char v20 = *(unsigned char *)(a1 + 93) & 1;
    uint64_t v12 = *(void *)(a1 + 48);
    return xzm_segment_group_segment_foreach_span(v23[0], (uint64_t)&v6);
  }
}

uint64_t ___xzm_introspect_enumerate_block_invoke_2(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned __int8 v5 = *(unsigned char *)(a2 + 32) & 0xF;
  BOOL v7 = v5 == 2 || v5 - 5 <= 2;
  if (v7 && *(unsigned __int16 *)(a2 + 34) == *(unsigned __int16 *)(*(void *)(a1 + 64) + 208))
  {
    uint64_t v4 = 0;
    if (v5 == 2 || v5 == 5)
    {
      unint64_t v10 = *(void *)(a1 + 72);
      unint64_t v9 = *(void *)(*(void *)(a1 + 64) + 216) + 88 * *(unsigned __int8 *)(a2 + 33);
      if (v9 >= v10)
      {
        if (v9 - v10 < 0xFFFFFFFFFFFFFFA8)
        {
          if (v9 - v10 + 88 > *(void *)(a1 + 80)) {
            uint64_t v11 = 0;
          }
          else {
            uint64_t v11 = *(void *)(a1 + 64) + v9 - v10;
          }
        }
        else
        {
          uint64_t v11 = 0;
        }
      }
      else
      {
        uint64_t v11 = 0;
      }
      uint64_t v4 = v11;
      if (!v11)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: failed to rebase xzone";
        __break(1u);
        JUMPOUT(0x3A140);
      }
    }
    if (*(unsigned char *)(a1 + 96)) {
      return _xzm_introspect_chunk_blocks(*(void *)(a1 + 64), *(void *)(a1 + 88), *(void *)(a1 + 48), (uint64_t *)a2, a3, *(void *)(a1 + 56) - 0x5555555555554000 * ((a2 - *(void *)(a1 + 48) - 2136) >> 4), *(void *)(*(void *)(a1 + 48) + 80)+ ((unint64_t)(-1431655765 * ((a2 - *(void *)(a1 + 48) - 2136) >> 4)) << 14), v4, *(void *)(a1 + 32));
    }
    else {
      return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32));
    }
  }
  else if ((*(unsigned char *)(a1 + 97) & 1) == 0 || *(_WORD *)(a2 + 34))
  {
    return 0;
  }
  else
  {
    return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

uint64_t _xzm_introspect_chunk_blocks(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char v24 = a4[4] & 0xF;
  if (v24 != 2 && v24 != 5) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, void, uint64_t))(a9 + 16))(a9, a2, a3, a4, a5, a7);
  }
  bzero(v35, 0x4000uLL);
  unsigned int v23 = *(void *)(a8 + 48);
  unint64_t v22 = *(unsigned int *)(a8 + 68);
  if (((unint64_t)a5 << 14) / v23 != v22 || v22 >= 0x401)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: inconsistent xzone info";
    __break(1u);
    JUMPOUT(0x3A3F4);
  }
  uint64_t v21 = 0;
  if (v24 == 5)
  {
    for (unsigned int i = 0; i < v22; ++i)
    {
      if ((a4[4] & 0xF) != 5)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == XZM_SLICE_KIND_SMALL_CH"
                               "UNK\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzon"
                               "e/xzone_inline_internal.h:919)";
        __break(1u);
        JUMPOUT(0x3A488);
      }
      if (((*(_DWORD *)a4 >> i) & 1) == 0)
      {
        *(void *)&long long v19 = a7 + i * v23;
        *((void *)&v19 + 1) = v23;
        v35[v21++] = v19;
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, void, uint64_t, uint64_t, _OWORD *, void))(a9 + 16))(a9, a2, a3, a4, a5, a7, a8, v35, v21);
  }
  unint64_t v18 = *a4;
  unint64_t v17 = v23 >> 4;
  unint64_t v16 = *a4 & 0x7FF;
  if (v16 != 2047 && v16 != 2046)
  {
    if (((v18 >> 11) & 0x7FF) > v22)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"meta.xca_free_count <= capacity\" failed (/Library/Cac"
                             "hes/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_introspect.c:183)";
      __break(1u);
      JUMPOUT(0x3A608);
    }
    for (unint64_t j = 0; ; ++j)
    {
      BOOL v11 = 0;
      if (v16 <= 0x3FF) {
        BOOL v11 = v16 % v17 == 0;
      }
      if (!v11) {
        break;
      }
      if (v35[v16 / v17])
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: loop in freelist";
        __break(1u);
        JUMPOUT(0x3A6B4);
      }
      LOBYTE(v35[v16 / v17]) = 1;
      unint64_t v16 = *(void *)(a6 + 16 * v16 + 8) & 0x7FFLL;
    }
    BOOL v10 = 1;
    if (v16 != 2045) {
      BOOL v10 = v16 == 2044;
    }
    if (!v10)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"block_offset == XZM_FREE_NULL || block_offset == XZM_F"
                             "REE_BUMP\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzon"
                             "e_introspect.c:233)";
      __break(1u);
      JUMPOUT(0x3A75CLL);
    }
    unint64_t v14 = v22;
    if (j < ((v18 >> 11) & 0x7FF) && ((v18 >> 11) & 0x7FF) <= v22) {
      unint64_t v14 = v22 + j - ((v18 >> 11) & 0x7FF);
    }
    for (unint64_t k = 0; k < v14; ++k)
    {
      if ((v35[k] & 1) == 0)
      {
        *(void *)&long long v12 = a7 + k * v23;
        *((void *)&v12 + 1) = v23;
        v35[v21++] = v12;
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, void, uint64_t, uint64_t, _OWORD *, void))(a9 + 16))(a9, a2, a3, a4, a5, a7, a8, v35, v21);
  }
  if (((v18 >> 11) & 0x7FF) != 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"meta.xca_free_count == 0\" failed (/Library/Caches/com.a"
                           "pple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_introspect.c:177)";
    __break(1u);
    JUMPOUT(0x3A590);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, void, uint64_t, uint64_t))(a9 + 16))(a9, a2, a3, a4, a5, a7, a8);
}

void __copy_helper_block_8_32b40b(uint64_t a1, uint64_t a2)
{
}

void __destroy_helper_block_8_32b40b(uint64_t a1)
{
}

void __copy_helper_block_8_32b40b48b(uint64_t a1, const void **a2)
{
}

void __destroy_helper_block_8_32b40b48b(const void **a1)
{
}

void xzm_print(unsigned int a1, int a2, unsigned char *a3, uint64_t (*a4)(void, uint64_t, uint64_t, uint64_t **), void (*a5)(const char *, ...))
{
  unsigned int v143 = a1;
  int v142 = a2;
  v141 = a3;
  v140 = a4;
  v139 = a5;
  uint64_t v138 = 0;
  uint64_t v137 = 0;
  uint64_t v136 = 0;
  BOOL v135 = 0;
  int v134 = _xzm_introspect_map_zone_and_main(a1, (uint64_t)a3, (uint64_t (*)(void, uint64_t, unint64_t, void **))a4, &v138, &v137, &v136);
  if (!v134)
  {
    BOOL v135 = v141 == v136;
    v139("Begin xzone malloc JSON:\n");
    v139("{\n");
    v139("\"desc\": \"xzone malloc\", \n");
    v139("\"addr\": \"%p\", \n", v141);
    v139("\"segment_size\": %zu, \n", 0x400000uLL);
    v139("\"slice_size\": %zu, \n", 0x4000uLL);
    v139("\"mzone\": %d, \n", *(unsigned __int16 *)(v138 + 208));
    v139("\"is_main\": %d, \n", v135);
    v139("\"max_slot_config\": %d, \n", *(unsigned char *)(v138 + 240) & 3);
    uint64_t v129 = 0;
    BOOL v130 = &v129;
    int v131 = 0;
    int v132 = 32;
    uint64_t v133 = 0;
    uint64_t v124 = 0;
    int v125 = &v124;
    int v126 = 0;
    int v127 = 32;
    uint64_t v128 = 0;
    v120[0] = 0;
    v120[1] = v120;
    int v121 = 0;
    int v122 = 32;
    uint64_t v123 = 0;
    uint64_t v109 = _NSConcreteStackBlock;
    int v110 = 1107296256;
    int v111 = 0;
    BOOL v112 = __xzm_print_block_invoke;
    int v113 = &__block_descriptor_tmp_60;
    unsigned int v118 = v143;
    int v114 = v120;
    int v115 = &v129;
    int v116 = &v124;
    os_unfair_lock_t v117 = v139;
    uint64_t v119 = &v109;
    uint64_t v104 = 0;
    int v105 = &v104;
    int v106 = 0;
    int v107 = 32;
    char v108 = 1;
    uint64_t v99 = 0;
    BOOL v100 = &v99;
    int v101 = 0;
    int v102 = 32;
    char v103 = 1;
    unint64_t v88 = _NSConcreteStackBlock;
    int v89 = 1107296256;
    int v90 = 0;
    unint64_t v91 = __xzm_print_block_invoke_61;
    unint64_t v92 = &__block_descriptor_tmp_74;
    unint64_t v94 = &v104;
    BOOL v96 = v139;
    uint64_t v97 = v137;
    uint64_t v95 = &v99;
    uint64_t v93 = &v109;
    int v98 = &v88;
    if (v135)
    {
      v139("\"bucketing_key\": \"%016llx%016llx\", \n", *(void *)(v137 + 312), *(void *)(v137 + 320));
      v139("\"guard_config\": {\n");
      v139("    \"guards_enabled\": %d, \n", *(unsigned char *)(v137 + 452) & 1);
      v139("    \"data_guards_enabled\": %d, \n", *(unsigned char *)(v137 + 453) & 1);
      v139("    \"tiny_run_size\": %d, \n", *(unsigned __int8 *)(v137 + 454));
      v139("    \"tiny_guard_density\": %d, \n", *(unsigned __int8 *)(v137 + 455));
      v139("    \"small_run_size\": %d, \n", *(unsigned __int8 *)(v137 + 456));
      v139("    \"small_guard_density\": %d \n", *(unsigned __int8 *)(v137 + 457));
      v139("}, \n");
      unsigned __int8 v5 = "true";
      if (((*(unsigned __int8 *)(v137 + 328) >> 3) & 1) == 0) {
        unsigned __int8 v5 = "false";
      }
      v139("\"defer_large\": %s, \n", v5);
      char v6 = "true";
      if (((*(unsigned __int8 *)(v137 + 328) >> 2) & 1) == 0) {
        char v6 = "false";
      }
      v139("\"defer_xzones\": %s, \n", v6);
      if (*(void *)(v137 + 464))
      {
        uint64_t v87 = 0;
        uint64_t v87 = *(void *)(v137 + 464);
        uint64_t v86 = 0;
        unint64_t v85 = 0;
        int v134 = _xzm_introspect_map_reclaim_buffer(v143, (uint64_t (*)(void, uint64_t, unint64_t, uint64_t *))v140, v87, &v86, &v85);
        if (v134)
        {
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: failed to map reclaim buffer";
          __break(1u);
          JUMPOUT(0x3AFBCLL);
        }
        unint64_t v83 = v86;
        v139("\"reclaim_buffer\": { \n");
        v139("    \"va_in_buffer\": %llu, \n", v83[2]);
        v139("    \"last_accounting_given_to_kernel\": %llu, \n", v83[3]);
        v139("    \"buffer\": \"%p\", \n", (const void *)*v83);
        v139("    \"buffer_len\": %llu, \n", v83[1]);
        if (*v83 && v83[1])
        {
          v139("    \"indices\": { \n");
          uint64_t v82 = 0;
          uint64_t v81 = *v85;
          uint64_t v82 = v81;
          uint64_t v80 = v81;
          v139("        \"head\": %llu, \n", v81);
          uint64_t v79 = 0;
          uint64_t v78 = v85[2];
          uint64_t v79 = v78;
          uint64_t v77 = v78;
          v139("        \"busy\": %llu, \n", v78);
          uint64_t v76 = 0;
          uint64_t v75 = v85[1];
          uint64_t v76 = v75;
          uint64_t v74 = v75;
          v139("        \"tail\": %llu \n", v75);
          v139("    }, \n");
          v139("    \"entries\": [ \n");
          for (unsigned int i = 0; i < (unint64_t)v83[1]; ++i)
          {
            uint64_t v72 = (uint64_t)&v85[2 * i + 4];
            v139("        { \n");
            v139("            \"index\": %u, \n", i);
            v139("            \"address\": \"%p\", \n", *(const void **)v72);
            v139("            \"size\": %u, \n", *(_DWORD *)(v72 + 8));
            v139("            \"behavior\": %u, \n", *(unsigned __int16 *)(v72 + 12));
            v139("            \"flags\": \"0x%x\" \n", *(unsigned __int16 *)(v72 + 14));
            v139("        }");
            if (i < (unint64_t)(v83[1] - 1)) {
              v139(",");
            }
            v139(" \n");
          }
          v139("    ] \n");
        }
        v139("}, \n");
      }
      v139("\"range_groups\": {\n");
      uint64_t v71 = 0;
      uint64_t v71 = 56 * *(unsigned __int8 *)(v137 + 329);
      char v149 = 0;
      uint64_t v70 = 0;
      unint64_t v7 = *(void *)(v137 + 304);
      int v8 = *(unsigned char **)(v137 + 384);
      v183 = v136;
      uint64_t v182 = v137;
      unint64_t v181 = v7;
      v180 = v8;
      uint64_t v179 = v71;
      if (v8 >= v136)
      {
        int64_t v178 = v180 - v183;
        unint64_t v177 = 0;
        BOOL v9 = __CFADD__(v180 - v183, v179);
        unint64_t v177 = v180 - v183 + v179;
        BOOL v185 = v9;
        if (v9)
        {
          uint64_t v184 = 0;
        }
        else if (v177 > v181)
        {
          uint64_t v184 = 0;
        }
        else
        {
          uint64_t v184 = v182 + v178;
        }
      }
      else
      {
        uint64_t v184 = 0;
      }
      uint64_t v70 = v184;
      if (!v184)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: failed to map range_groups";
        __break(1u);
        JUMPOUT(0x3B4C8);
      }
      for (unsigned __int8 j = 0; j < (int)*(unsigned __int8 *)(v137 + 329); ++j)
      {
        v139("    ");
        if (j) {
          v139(", ");
        }
        char v68 = (unsigned __int8 *)(v70 + 56 * j);
        v139("\"%d\": {\n", *v68);
        v139("        \"id\": %d, \n", *v68);
        v139("        \"lock\": %u, \n", *((_DWORD *)v68 + 4));
        v139("        \"base\": \"%p\", \n", *((const void **)v68 + 3));
        v139("        \"size\": %zu, \n", *((void *)v68 + 4));
        v139("        \"next\": \"%p\", \n", *((const void **)v68 + 5));
        v139("        \"remaining\": %zu\n", *((void *)v68 + 6));
        v139("    }\n");
      }
      v139("}, \n");
      v139("\"segment_groups\": {\n");
      uint64_t v67 = 0;
      uint64_t v67 = 528 * *(unsigned __int8 *)(v137 + 344);
      char v148 = 0;
      uint64_t v66 = 0;
      unint64_t v10 = *(void *)(v137 + 304);
      BOOL v11 = *(unsigned char **)(v137 + 392);
      v174 = v136;
      uint64_t v173 = v137;
      unint64_t v172 = v10;
      v171 = v11;
      uint64_t v170 = v67;
      if (v11 >= v136)
      {
        int64_t v169 = v171 - v174;
        unint64_t v168 = 0;
        BOOL v12 = __CFADD__(v171 - v174, v170);
        unint64_t v168 = v171 - v174 + v170;
        BOOL v176 = v12;
        if (v12)
        {
          uint64_t v175 = 0;
        }
        else if (v168 > v172)
        {
          uint64_t v175 = 0;
        }
        else
        {
          uint64_t v175 = v173 + v169;
        }
      }
      else
      {
        uint64_t v175 = 0;
      }
      uint64_t v66 = v175;
      if (!v175)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: failed to map segment_groups";
        __break(1u);
        JUMPOUT(0x3B80CLL);
      }
      for (unsigned __int8 k = 0; k < (int)*(unsigned __int8 *)(v137 + 344); ++k)
      {
        v139("    ");
        if (k) {
          v139(", ");
        }
        uint64_t v64 = (unsigned __int8 *)(v66 + 528 * k);
        v139("\"%d\": {\n", *v64);
        unsigned __int8 v186 = *v64;
        switch(v186)
        {
          case 0u:
            v187 = "data";
            break;
          case 1u:
            v187 = "data_large";
            break;
          case 2u:
            v187 = "pointer_xzones";
            break;
          case 3u:
            v187 = "pointer_large";
            break;
          default:
            v187 = "unknown";
            break;
        }
        v139("        \"id\": \"%s\", \n", v187);
        v139("        \"segment_cache\": { \n");
        v139("            \"max_count\": %u, \n", *((unsigned __int16 *)v64 + 256));
        v139("            \"count\": %u, \n", *((unsigned __int16 *)v64 + 257));
        v139("            \"max_entry_slices\": %u, \n", *((_DWORD *)v64 + 129));
        v139("            \"segments\": { \n");
        if (*((_WORD *)v64 + 257))
        {
          uint64_t m = 0;
          for (uint64_t m = *((void *)v64 + 58); m; uint64_t m = *(void *)(v62 + 24))
          {
            uint64_t v62 = 0;
            int v61 = v140(v143, m, 14424, (uint64_t **)&v62);
            if (v61)
            {
              qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: Failed to map cached segment";
              __break(1u);
              JUMPOUT(0x3BAB0);
            }
            int v61 = ((uint64_t (*)(void ***, uint64_t, uint64_t, const char *))v98[2])(v98, m, v62, "                    ");
            if (v61)
            {
              qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: Failed to enumerate segment";
              __break(1u);
              JUMPOUT(0x3BB0CLL);
            }
          }
        }
        v139("            } \n");
        v139("        } \n");
        v139("    }\n");
      }
      v139("}, \n");
      v139("\"xzones\": {\n");
      uint64_t v60 = 0;
      uint64_t v60 = 88 * *(unsigned __int8 *)(v137 + 210);
      char v147 = 0;
      uint64_t v59 = 0;
      unint64_t v13 = *(void *)(v137 + 304);
      unint64_t v14 = *(unsigned char **)(v137 + 216);
      v165 = v136;
      uint64_t v164 = v137;
      unint64_t v163 = v13;
      v162 = v14;
      uint64_t v161 = v60;
      if (v14 >= v136)
      {
        int64_t v160 = v162 - v165;
        unint64_t v159 = 0;
        BOOL v15 = __CFADD__(v162 - v165, v161);
        unint64_t v159 = v162 - v165 + v161;
        BOOL v167 = v15;
        if (v15)
        {
          uint64_t v166 = 0;
        }
        else if (v159 <= v163)
        {
          uint64_t v166 = v164 + v160;
        }
        else
        {
          uint64_t v166 = 0;
        }
      }
      else
      {
        uint64_t v166 = 0;
      }
      uint64_t v59 = v166;
      uint64_t v58 = v166;
      if (!v166)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: failed to map main xzones";
        __break(1u);
        JUMPOUT(0x3BD24);
      }
      uint64_t v57 = 0;
      unint64_t v56 = 0;
      char v55 = 0;
      BOOL v54 = 0;
      unint64_t v56 = *(unsigned __int8 *)(v137 + 210) * (unint64_t)*(unsigned __int8 *)(v137 + 211);
      char v146 = 0;
      char v55 = 0;
      uint64_t v57 = 32 * v56;
      BOOL v145 = v56 >> 59 != 0;
      BOOL v54 = v145;
      BOOL v53 = v145;
      BOOL v144 = v145;
      if (v56 >> 59)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: failed to compute allocation slots size";
        __break(1u);
        JUMPOUT(0x3BDF0);
      }
      uint64_t v52 = 0;
      unint64_t v16 = *(void *)(v137 + 304);
      unint64_t v17 = *(unsigned char **)(v137 + 224);
      v156 = v136;
      uint64_t v155 = v137;
      unint64_t v154 = v16;
      v153 = v17;
      uint64_t v152 = v57;
      if (v17 >= v136)
      {
        int64_t v151 = v153 - v156;
        unint64_t v150 = 0;
        BOOL v18 = __CFADD__(v153 - v156, v152);
        unint64_t v150 = v153 - v156 + v152;
        BOOL v158 = v18;
        if (v18)
        {
          uint64_t v157 = 0;
        }
        else if (v150 <= v154)
        {
          uint64_t v157 = v155 + v151;
        }
        else
        {
          uint64_t v157 = 0;
        }
      }
      else
      {
        uint64_t v157 = 0;
      }
      uint64_t v52 = v157;
      uint64_t v51 = v157;
      if (!v157)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: failed to map main allocation slots";
        __break(1u);
        JUMPOUT(0x3BF10);
      }
      for (unsigned __int8 n = 1; n < (int)*(unsigned __int8 *)(v138 + 210); ++n)
      {
        uint64_t v49 = v58 + 88 * n;
        v139("    \"%d\": {\n", n);
        v139("        \"id\": %d, \n", *(unsigned __int8 *)(v49 + 72));
        v139("        \"bucket\": %d, \n", *(unsigned __int8 *)(v49 + 76));
        v139("        \"segment_group\": %zu, \n", 0xF83E0F83E0F83E1 * ((uint64_t)(*(void *)(v49 + 40) - *(void *)(v137 + 392)) >> 4));
        v139("        \"block_size\": %llu, \n", *(void *)(v49 + 48));
        v139("        \"chunk_capacity\": %u, \n", *(_DWORD *)(v49 + 68));
        v139("        \"sequestered\": %d,\n", *(unsigned char *)(v49 + 78) & 1);
        char v190 = *(unsigned char *)(v49 + 77);
        switch(v190)
        {
          case 0:
            v191 = "SINGLE";
            break;
          case 1:
            v191 = "CLUSTER";
            break;
          case 2:
            v191 = "CPU";
            break;
          default:
            qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: unexpected slot config";
            __break(1u);
            JUMPOUT(0x3C138);
        }
        v139("        \"slot_config\": \"%s\",\n", v191);
        v139("        \"allocation_slots\": [\n");
        for (iunsigned int i = 0; ii < (int)*(unsigned __int8 *)(v138 + 211); ++ii)
        {
          uint64_t v47 = 0;
          uint64_t v47 = v51 + 32 * (ii * *(unsigned __int8 *)(v138 + 210) + n);
          v139("            {\n");
          if (*(void *)(v49 + 48) > 0x1000uLL)
          {
            v139("                \"chunk\": \"%p\",\n", *(const void **)v47);
            v139("                \"allocations\": %lu,\n", *(unsigned int *)(v47 + 16));
            v139("                \"contentions\": %lu,\n", *(unsigned int *)(v47 + 20));
          }
          else
          {
            v139("                \"atomic_value\": \"0x%llx\",\n", *(void *)v47);
            v139("                \"xsg_locked\": \"0x%llx\",\n", *(void *)v47 & 1);
            v139("                \"xsg_waiters\": \"0x%llx\",\n", (*(void *)v47 >> 1) & 1);
            v139("                \"xsc_ptr\": \"0x%llx\",\n", (*(void *)v47 >> 2) & 0x7FFFFFFFFFFFLL);
            v139("                \"allocations\": %lu,\n", *(unsigned int *)(v47 + 16));
            v139("                \"contentions\": %lu,\n", *(_DWORD *)(v47 + 20) & 0xFFFFFF);
            uint64_t v46 = 0;
            char v188 = *(unsigned char *)(v47 + 23);
            switch(v188)
            {
              case 0:
                v189 = "SINGLE";
                break;
              case 1:
                v189 = "CLUSTER";
                break;
              case 2:
                v189 = "CPU";
                break;
              default:
                qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: unexpected slot config";
                __break(1u);
                JUMPOUT(0x3C38CLL);
            }
            uint64_t v46 = v189;
            v139("                \"slot_config\": \"%s\",\n", v189);
          }
          v139("                \"last_chunk_empty_ts\": %llu\n", *(void *)(v47 + 24));
          v139("            }");
          if (ii < *(unsigned __int8 *)(v138 + 211) - 1) {
            v139(",");
          }
          v139("\n");
        }
        v139("        ]\n");
        v139("    }");
        if (n < *(unsigned __int8 *)(v138 + 210) - 1) {
          v139(",");
        }
        v139("\n");
      }
      v139("}, \n");
    }
    v139("\"spans\": {\n");
    *((unsigned char *)v105 + 24) = 1;
    *((unsigned char *)v100 + 24) = 0;
    uint64_t v38 = _NSConcreteStackBlock;
    int v39 = 1107296256;
    int v40 = 0;
    uint64_t v41 = __xzm_print_block_invoke_163;
    uint64_t v42 = &__block_descriptor_tmp_168;
    BOOL v45 = v139;
    char v44 = &v104;
    unsigned int v43 = v119;
    uint64_t v29 = _NSConcreteStackBlock;
    int v30 = 1107296256;
    int v31 = 0;
    int v32 = __xzm_print_block_invoke_169;
    int v33 = &__block_descriptor_tmp_196;
    uint64_t v36 = v139;
    unsigned int v35 = &v104;
    uint64_t v37 = v137;
    uint64_t v34 = v119;
    if (v135)
    {
      char v20 = _NSConcreteStackBlock;
      int v21 = 1107296256;
      int v22 = 0;
      unsigned int v23 = __xzm_print_block_invoke_197;
      char v24 = &__block_descriptor_tmp_201;
      uint64_t v27 = v139;
      BOOL v26 = &v104;
      uint64_t v28 = v137;
      uint64_t v25 = v119;
      int v19 = _xzm_introspect_enumerate(v143, v140, (uint64_t)v141, v138, (unint64_t)v136, v137, 0, (uint64_t)&v38, (uint64_t)v98, (uint64_t)&v29, (uint64_t)&v20);
    }
    else
    {
      int v19 = _xzm_introspect_enumerate(v143, v140, (uint64_t)v141, v138, (unint64_t)v136, v137, 0, (uint64_t)&v38, (uint64_t)v98, (uint64_t)&v29, 0);
    }
    int v134 = v19;
    if (v125[3]) {
      mach_vm_deallocate(mach_task_self_, v125[3], 4 * v130[3]);
    }
    if (v134)
    {
      int v84 = 1;
    }
    else
    {
      ((void (*)(void))v139)();
      v139("}\n");
      v139("End xzone malloc JSON\n");
      int v84 = 0;
    }
    _Block_object_dispose(&v99, 8);
    _Block_object_dispose(&v104, 8);
    _Block_object_dispose(v120, 8);
    _Block_object_dispose(&v124, 8);
    _Block_object_dispose(&v129, 8);
  }
}

uint64_t __xzm_print_block_invoke(uint64_t a1, mach_vm_offset_t a2, mach_vm_size_t a3, const char *a4)
{
  kern_return_t v4;
  vm_map_read_t target_map;
  vm_size_t v7;
  int v9;
  mach_vm_size_t i;
  mach_vm_offset_t v11;
  uint64_t v12;
  uint64_t v13;
  mach_vm_size_t dispositions_count;
  vm_size_t v15;
  vm_size_t v16;
  vm_size_t v17;
  unsigned int v18;
  uint64_t v19;
  const char *v20;
  mach_vm_size_t v21;
  mach_vm_offset_t v22;
  uint64_t v23;

  unsigned int v23 = a1;
  int v22 = a2;
  int v21 = a3;
  char v20 = a4;
  int v19 = a1;
  BOOL v18 = 0;
  if (*(_DWORD *)(a1 + 64))
  {
    unint64_t v17 = v22 + v21;
    unint64_t v16 = 0;
    unint64_t v16 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)
        + *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) * vm_page_size;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) > v22 || v16 < v17)
    {
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v22;
      BOOL v15 = 0;
      if (v21 % vm_page_size) {
        unint64_t v7 = v21 / vm_page_size + 1;
      }
      else {
        unint64_t v7 = v21 / vm_page_size;
      }
      BOOL v15 = v7;
      if (v7 < 0x400000 / vm_page_size) {
        BOOL v15 = 0x400000 / vm_page_size;
      }
      if (v15 > *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
      {
        if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
        {
          mach_vm_deallocate(mach_task_self_, *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), 4 * *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
          *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
        }
        *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v15;
        BOOL v18 = mach_vm_allocate(mach_task_self_, (mach_vm_address_t *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), 4 * *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24), 1);
        if (v18)
        {
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: failed to allocate memory for vm stats";
          __break(1u);
          JUMPOUT(0x3CB2CLL);
        }
      }
      dispositions_count = v15;
      target_map = *(_DWORD *)(a1 + 64);
      if (v21 > 0x400000) {
        uint64_t v4 = mach_vm_page_range_query(target_map, v22, v21, *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), &dispositions_count);
      }
      else {
        uint64_t v4 = mach_vm_page_range_query(target_map, v22, 0x400000uLL, *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), &dispositions_count);
      }
      BOOL v18 = v4;
      if (v4)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: Failed to query vm stats";
        __break(1u);
        JUMPOUT(0x3CBE0);
      }
    }
    (*(void (**)(const char *, ...))(a1 + 56))("%s    \"dispositions\": \"", v20);
    unint64_t v13 = 0;
    BOOL v12 = 0;
    BOOL v11 = (v22 - *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) / vm_page_size;
    for (unsigned int i = 0; i < v21 / vm_page_size; ++i)
    {
      if (v11 >= *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: inconsistent slice counts";
        __break(1u);
        JUMPOUT(0x3CCC8);
      }
      BOOL v9 = *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) + 4 * v11);
      if ((v9 & 8) != 0)
      {
        ++v13;
        (*(void (**)(const char *))(a1 + 56))("d");
      }
      else if ((v9 & 0x10) != 0)
      {
        ++v12;
        (*(void (**)(const char *))(a1 + 56))("s");
      }
      else
      {
        (*(void (**)(const char *))(a1 + 56))("c");
      }
      ++v11;
    }
    (*(void (**)(const char *))(a1 + 56))("\", \n");
    (*(void (**)(const char *, ...))(a1 + 56))("%s    \"dirty_count\": %zu, \n", v20, v13);
    (*(void (**)(const char *, ...))(a1 + 56))("%s    \"swapped_count\": %zu, \n", v20, v12);
    return 0;
  }
  else
  {
    return v18;
  }
}

void __copy_helper_block_8_32r40r48r(uint64_t a1, const void **a2)
{
}

void __destroy_helper_block_8_32r40r48r(const void **a1)
{
}

uint64_t __xzm_print_block_invoke_61(uint64_t a1, const void *a2, uint64_t a3, const char *a4)
{
  if ((*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) & 1) == 0) {
    (*(void (**)(const char *))(a1 + 56))(", ");
  }
  (*(void (**)(const char *, ...))(a1 + 56))("%s\"%p\": {\n", a4, a2);
  (*(void (**)(const char *, ...))(a1 + 56))("%s    \"addr\": \"%p\", \n", a4, a2);
  int v8 = *(void (**)(const char *, ...))(a1 + 56);
  unsigned __int8 v13 = (*(void *)a3 - *(void *)(*(void *)(a1 + 64) + 392)) / 528;
  if (v13)
  {
    uint64_t v5 = v13;
    char v4 = 1;
  }
  else
  {
    uint64_t v5 = 0;
    char v4 = 0;
  }
  if (v4)
  {
    v8("%s    \"segment_group\": \"%s\", \n", a4, "unknown");
  }
  else
  {
    switch(v5)
    {
      case 0:
        v8("%s    \"segment_group\": \"%s\", \n", a4, "data");
        break;
      case 1:
        v8("%s    \"segment_group\": \"%s\", \n", a4, "data_large");
        break;
      case 2:
        v8("%s    \"segment_group\": \"%s\", \n", a4, "pointer_xzones");
        break;
      case 3:
        v8("%s    \"segment_group\": \"%s\", \n", a4, "pointer_large");
        break;
      default:
        JUMPOUT(0);
    }
  }
  (*(void (**)(const char *, ...))(a1 + 56))("%s    \"body_addr\": \"%p\", \n", a4, *(const void **)(a3 + 80));
  (*(void (**)(const char *, ...))(a1 + 56))("%s    \"used\": %u, \n", a4, *(_DWORD *)(a3 + 8));
  unint64_t v7 = *(void (**)(const char *, ...))(a1 + 56);
  if (*(unsigned char *)(a3 + 20))
  {
    if (*(unsigned char *)(a3 + 20) == 1) {
      v7("%s    \"kind\": \"%s\", \n", a4, "huge_segment");
    }
    else {
      v7("%s    \"kind\": \"%s\", \n", a4, "unknown");
    }
  }
  else
  {
    v7("%s    \"kind\": \"%s\", \n", a4, "normal_segment");
  }
  if (*(void *)(a3 + 72) == -1) {
    (*(void (**)(const char *, ...))(a1 + 56))("%s    \"reclaim_id\": -1, \n", a4);
  }
  else {
    (*(void (**)(const char *, ...))(a1 + 56))("%s    \"reclaim_id\": %llu, \n", a4, *(void *)(a3 + 72));
  }
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)) {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  (*(void (**)(const char *, ...))(a1 + 56))("%s    \"slice_count\": %u, \n", a4, *(_DWORD *)(a3 + 12));
  (*(void (**)(const char *, ...))(a1 + 56))("%s    \"slice_entry_count\": %u \n", a4, *(_DWORD *)(a3 + 16));
  (*(void (**)(const char *, ...))(a1 + 56))("%s}\n", a4);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  return 0;
}

void __copy_helper_block_8_32b40r48r(uint64_t a1, const void **a2)
{
}

void __destroy_helper_block_8_32b40r48r(const void **a1)
{
}

uint64_t _xzm_introspect_map_reclaim_buffer(unsigned int a1, uint64_t (*a2)(void, uint64_t, unint64_t, uint64_t *), uint64_t a3, uint64_t **a4, void *a5)
{
  unsigned int v15 = a1;
  unint64_t v14 = (uint64_t (*)(void, uint64_t, unint64_t, uint64_t *))a2;
  uint64_t v13 = a3;
  BOOL v12 = a4;
  BOOL v11 = a5;
  unint64_t v10 = 0;
  int v9 = a2(a1, a3, 8240, &v10);
  if (v9)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: failed to map reclaim buffer metadata";
    __break(1u);
    JUMPOUT(0x3D484);
  }
  *BOOL v12 = v10;
  uint64_t v8 = 0;
  uint64_t v7 = *v10;
  unint64_t v6 = 16 * v10[1] + 32;
  if (v6 % vm_page_size)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"buffer_size % vm_page_size == 0\" failed (/Library/Cache"
                           "s/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_introspect.c:477)";
    __break(1u);
    JUMPOUT(0x3D514);
  }
  if (v7)
  {
    int v9 = v14(v15, v7, v6, &v8);
    if (v9)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: failed to map reclaim buffer";
      __break(1u);
      JUMPOUT(0x3D570);
    }
  }
  *BOOL v11 = v8;
  return 0;
}

uint64_t __xzm_print_block_invoke_163(uint64_t a1, const void *a2, int a3, unsigned __int8 a4)
{
  (*(void (**)(const char *))(a1 + 48))("    ");
  if ((*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) & 1) == 0) {
    (*(void (**)(const char *))(a1 + 48))(", ");
  }
  (*(void (**)(const char *, ...))(a1 + 48))("\"%p\": {\n", a2);
  (*(void (**)(const char *, ...))(a1 + 48))("        \"addr\": \"%p\", \n", a2);
  uint64_t v7 = *(void (**)(const char *, ...))(a1 + 48);
  if (a4)
  {
    uint64_t v5 = a4;
    char v4 = 1;
  }
  else
  {
    uint64_t v5 = 0;
    char v4 = 0;
  }
  if (v4)
  {
    v7("        \"kind\": \"%s\", \n", "unknown slab");
  }
  else
  {
    switch(v5)
    {
      case 0:
        v7("        \"kind\": \"%s\", \n", "segment metadata slab");
        break;
      case 1:
        v7("        \"kind\": \"%s\", \n", "segment table slab");
        break;
      case 2:
        v7("        \"kind\": \"%s\", \n", "mzone index slab");
        break;
      case 3:
        v7("        \"kind\": \"%s\", \n", "metapool metadata slab");
        break;
      default:
        JUMPOUT(0);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  (*(void (**)(const char *, ...))(a1 + 48))("        \"size\": %u \n", a3);
  (*(void (**)(const char *))(a1 + 48))("    }\n");
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  return 0;
}

void __copy_helper_block_8_32b40r(uint64_t a1, uint64_t a2)
{
}

void __destroy_helper_block_8_32b40r(uint64_t a1)
{
}

uint64_t __xzm_print_block_invoke_169(uint64_t a1, char *a2, char *a3, char *a4, int a5, const void *a6, uint64_t a7)
{
  (*(void (**)(const char *))(a1 + 48))("    ");
  if ((*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) & 1) == 0) {
    (*(void (**)(const char *))(a1 + 48))(", ");
  }
  (*(void (**)(const char *, ...))(a1 + 48))("\"%p\": {\n", a6);
  (*(void (**)(const char *, ...))(a1 + 48))("        \"addr\": \"%p\", \n", a6);
  (*(void (**)(const char *, ...))(a1 + 48))("        \"metadata_addr\": \"%p\", \n", &a2[a4 - a3]);
  (*(void (**)(const char *, ...))(a1 + 48))("        \"mzone\": %d, \n", *((unsigned __int16 *)a4 + 17));
  (*(void (**)(const char *, ...))(a1 + 48))("        \"xzone\": %d, \n", a4[33]);
  (*(void (**)(const char *, ...))(a1 + 48))("        \"segment\": \"%p\", \n", a2);
  (*(void (**)(const char *, ...))(a1 + 48))("        \"segment_group\": %zu, \n", (*(void *)a3 - *(void *)(*(void *)(a1 + 56) + 392)) / 528);
  unsigned __int8 v14 = a4[32] & 0xF;
  if (v14)
  {
    uint64_t v8 = v14;
    char v7 = 1;
  }
  else
  {
    uint64_t v8 = 0;
    char v7 = 0;
  }
  if (v7)
  {
    unsigned int v23 = "unknown";
  }
  else
  {
    switch(v8)
    {
      case 0:
        unsigned int v23 = "invalid";
        break;
      case 1:
        unsigned int v23 = "single_free";
        break;
      case 2:
        unsigned int v23 = "tiny_chunk";
        break;
      case 3:
        unsigned int v23 = "multi_free";
        break;
      case 4:
        unsigned int v23 = "multi_body";
        break;
      case 5:
        unsigned int v23 = "small_chunk";
        break;
      case 6:
        unsigned int v23 = "large_chunk";
        break;
      case 7:
        unsigned int v23 = "huge_chunk";
        break;
      case 8:
        unsigned int v23 = "guard_page";
        break;
      default:
        JUMPOUT(0);
    }
  }
  (*(void (**)(const char *, ...))(a1 + 48))("        \"kind\": \"%s\", \n", v23);
  (*(void (**)(const char *, ...))(a1 + 48))("        \"slice_count\": %u, \n", a5);
  unint64_t v10 = *(void (**)(const char *, ...))(a1 + 48);
  if (a7) {
    v10("        \"block_size\": %u, \n", *(void *)(a7 + 48));
  }
  else {
    v10("        \"block_size\": %u, \n", 0);
  }
  (*(void (**)(const char *))(a1 + 48))("        \"in_use\": 1, \n");
  uint64_t v13 = *(void *)&a3[8 * ((a4 - (a3 + 2136)) / 48) + 88];
  if (v13 == -1) {
    (*(void (**)(const char *))(a1 + 48))("        \"reclaim_id\": -1, \n");
  }
  else {
    (*(void (**)(const char *, ...))(a1 + 48))("        \"reclaim_id\": %llu, \n", v13);
  }
  unsigned int v12 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  if (v12)
  {
    return v12;
  }
  else
  {
    if (v14 == 2 || v14 == 5) {
      (*(void (**)(const char *, ...))(a1 + 48))("        \"bucket\": %u,\n", *(unsigned __int8 *)(a7 + 76));
    }
    if (v14 == 2)
    {
      (*(void (**)(const char *, ...))(a1 + 48))("        \"meta\": \"0x%llx\",\n", *(void *)a4);
      (*(void (**)(const char *, ...))(a1 + 48))("        \"xca_alloc_head\": \"0x%llx\",\n", *(void *)a4 & 0x7FFLL);
      (*(void (**)(const char *, ...))(a1 + 48))("        \"xca_free_count\": \"0x%llx\",\n", (*(void *)a4 >> 11) & 0x7FFLL);
      (*(void (**)(const char *, ...))(a1 + 48))("        \"xca_alloc_idx\": \"0x%llx\",\n", (*(void *)a4 >> 22) & 0x3FLL);
      (*(void (**)(const char *, ...))(a1 + 48))("        \"xca_on_partial_list\": \"0x%llx\",\n", (*(void *)a4 >> 28) & 1);
      (*(void (**)(const char *, ...))(a1 + 48))("        \"xca_on_empty_list\": \"0x%llx\",\n", (*(void *)a4 >> 29) & 1);
      (*(void (**)(const char *, ...))(a1 + 48))("        \"xca_walk_locked\": \"0x%llx\",\n", (*(void *)a4 >> 30) & 1);
      (*(void (**)(const char *, ...))(a1 + 48))("        \"xca_head_seqno\": \"0x%llx\",\n", (*(void *)a4 >> 38) & 0x1FFFLL);
      (*(void (**)(const char *, ...))(a1 + 48))("        \"xca_seqno\": \"0x%llx\",\n", *(void *)a4 >> 51);
    }
    else if (v14 == 5)
    {
      (*(void (**)(const char *, ...))(a1 + 48))("        \"free\": \"0x%x\",\n", *(_DWORD *)a4);
      (*(void (**)(const char *, ...))(a1 + 48))("        \"used\": %u,\n", *((_DWORD *)a4 + 1));
      (*(void (**)(const char *, ...))(a1 + 48))("        \"alloc_idx\": %u,\n", a4[12]);
    }
    (*(void (**)(const char *, ...))(a1 + 48))("        \"is_preallocated\": %d,\n", (a4[32] & 0x40) != 0);
    (*(void (**)(const char *, ...))(a1 + 48))("        \"is_pristine\": %d\n", (a4[32] & 0x10) != 0);
    (*(void (**)(const char *))(a1 + 48))("    }\n");
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
    return 0;
  }
}

uint64_t __xzm_print_block_invoke_197(uint64_t a1, char *a2, void *a3, uint64_t a4, int a5, const void *a6)
{
  (*(void (**)(const char *))(a1 + 48))("    ");
  if ((*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) & 1) == 0) {
    (*(void (**)(const char *))(a1 + 48))(", ");
  }
  (*(void (**)(const char *, ...))(a1 + 48))("\"%p\": {\n", a6);
  (*(void (**)(const char *, ...))(a1 + 48))("        \"addr\": \"%p\", \n", a6);
  (*(void (**)(const char *, ...))(a1 + 48))("        \"metadata_addr\": \"%p\", \n", &a2[a4 - (void)a3]);
  (*(void (**)(const char *, ...))(a1 + 48))("        \"mzone\": %d, \n", *(unsigned __int16 *)(a4 + 34));
  (*(void (**)(const char *, ...))(a1 + 48))("        \"xzone\": %d, \n", *(unsigned __int8 *)(a4 + 33));
  (*(void (**)(const char *, ...))(a1 + 48))("        \"segment\": \"%p\", \n", a2);
  (*(void (**)(const char *, ...))(a1 + 48))("        \"segment_group\": %zu, \n", (*a3 - *(void *)(*(void *)(a1 + 56) + 392)) / 528);
  unsigned __int8 v18 = *(unsigned char *)(a4 + 32) & 0xF;
  if (v18)
  {
    uint64_t v7 = v18;
    char v6 = 1;
  }
  else
  {
    uint64_t v7 = 0;
    char v6 = 0;
  }
  if (v6)
  {
    int v19 = "unknown";
  }
  else
  {
    switch(v7)
    {
      case 0:
        int v19 = "invalid";
        break;
      case 1:
        int v19 = "single_free";
        break;
      case 2:
        int v19 = "tiny_chunk";
        break;
      case 3:
        int v19 = "multi_free";
        break;
      case 4:
        int v19 = "multi_body";
        break;
      case 5:
        int v19 = "small_chunk";
        break;
      case 6:
        int v19 = "large_chunk";
        break;
      case 7:
        int v19 = "huge_chunk";
        break;
      case 8:
        int v19 = "guard_page";
        break;
      default:
        JUMPOUT(0);
    }
  }
  (*(void (**)(const char *, ...))(a1 + 48))("        \"kind\": \"%s\", \n", v19);
  (*(void (**)(const char *, ...))(a1 + 48))("        \"slice_count\": %u, \n", a5);
  uint64_t v11 = a3[((a4 - (uint64_t)(a3 + 267)) / 48) + 11];
  if (v11 == -1) {
    (*(void (**)(const char *))(a1 + 48))("        \"reclaim_id\": -1, \n");
  }
  else {
    (*(void (**)(const char *, ...))(a1 + 48))("        \"reclaim_id\": %llu, \n", v11);
  }
  unsigned int v10 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  if (v10)
  {
    return v10;
  }
  else
  {
    (*(void (**)(const char *, ...))(a1 + 48))("        \"is_preallocated\": %d,\n", (*(unsigned char *)(a4 + 32) & 0x40) != 0);
    (*(void (**)(const char *))(a1 + 48))("        \"in_use\": 0 \n");
    (*(void (**)(const char *))(a1 + 48))("    }\n");
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
    return 0;
  }
}

uint64_t xzm_statistics(unsigned int a1, uint64_t a2, uint64_t (*a3)(void, uint64_t, uint64_t, uint64_t **), uint64_t a4, _OWORD *a5)
{
  unsigned int v31 = a1;
  uint64_t v30 = a2;
  uint64_t v29 = a3;
  uint64_t v28 = a4;
  uint64_t v27 = a5;
  long long v25 = 0u;
  long long v26 = 0u;
  *a5 = 0u;
  a5[1] = v26;
  uint64_t v29 = (uint64_t (*)(void, uint64_t, uint64_t, uint64_t **))reader_or_in_memory_fallback_2((uint64_t)v29, v31);
  uint64_t v24 = 0;
  uint64_t v23 = 0;
  unint64_t v22 = 0;
  BOOL v21 = 0;
  unsigned int v20 = _xzm_introspect_map_zone_and_main(v31, v30, (uint64_t (*)(void, uint64_t, unint64_t, void **))v29, &v24, &v23, &v22);
  if (v20)
  {
    return v20;
  }
  else
  {
    BOOL v21 = v30 == v22;
    if (v30 == v22)
    {
      uint64_t v19 = 0;
      uint64_t v19 = *(void *)(v23 + 336);
      off_B45A8(v31, v19, (uint64_t)v29, (uint64_t)v27);
      *((void *)v27 + 2) = 0;
    }
    uint64_t v13 = _NSConcreteStackBlock;
    int v14 = 0x40000000;
    int v15 = 0;
    unint64_t v16 = __xzm_statistics_block_invoke_3;
    unint64_t v17 = &__block_descriptor_tmp_238;
    uint64_t v18 = (uint64_t)v27;
    if (v21)
    {
      uint64_t v7 = _NSConcreteStackBlock;
      int v8 = 0x40000000;
      int v9 = 0;
      unsigned int v10 = __xzm_statistics_block_invoke_4;
      uint64_t v11 = &__block_descriptor_tmp_239;
      uint64_t v12 = (uint64_t)v27;
      return _xzm_introspect_enumerate(v31, v29, v30, v24, v22, v23, 0, (uint64_t)&__block_literal_global_234, (uint64_t)&__block_literal_global_237, (uint64_t)&v13, (uint64_t)&v7);
    }
    else
    {
      return _xzm_introspect_enumerate(v31, v29, v30, v24, v22, v23, 0, (uint64_t)&__block_literal_global_234, (uint64_t)&__block_literal_global_237, (uint64_t)&v13, 0);
    }
  }
}

int __xzm_statistics_block_invoke(id a1, unint64_t a2, unint64_t a3, unsigned __int8 a4)
{
  return 0;
}

int __xzm_statistics_block_invoke_2(id a1, unint64_t a2, xzm_segment_s *a3, const char *a4)
{
  return 0;
}

uint64_t __xzm_statistics_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  unint64_t v13 = (unint64_t)a5 << 14;
  int v10 = a4[4] & 0xF;
  if (v10 == 2)
  {
    unint64_t v12 = *a4;
    int v11 = *(_DWORD *)(a7 + 68);
    if ((*a4 & 0x7FF) != 0x7FF && (v12 & 0x7FF) != 0x7FE)
    {
      int v7 = (v12 >> 11) & 0x7FF;
      **(_DWORD **)(a1 + 32) += v11 - v7;
      *(void *)(*(void *)(a1 + 32) + 8) += (v11 - v7) * *(void *)(a7 + 48);
    }
  }
  else if (v10 == 5)
  {
    uint64_t v8 = *((unsigned int *)a4 + 1);
    **(_DWORD **)(a1 + 32) += v8;
    *(void *)(*(void *)(a1 + 32) + 8) += v8 * *(void *)(a7 + 48);
  }
  else
  {
    ++**(_DWORD **)(a1 + 32);
    *(void *)(*(void *)(a1 + 32) + 8) += v13;
  }
  *(void *)(*(void *)(a1 + 32) + 24) += v13;
  return 0;
}

uint64_t __xzm_statistics_block_invoke_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  *(void *)(*(void *)(a1 + 32) + 24) += (unint64_t)a5 << 14;
  return 0;
}

BOOL main_image_has_section()
{
  image_header = (mach_header *)_dyld_get_image_header(0);
  return my_getsectbynamefromheader_64(image_header) != 0;
}

_DWORD *my_getsectbynamefromheader_64(_DWORD *a1)
{
  uint64_t v5 = a1 + 8;
  for (unsigned int i = 0; i < a1[4]; ++i)
  {
    if (*v5 == 25 && (!_platform_strncmp() || a1[3] == 1))
    {
      char v4 = v5 + 18;
      for (unsigned int j = 0; j < v5[16]; ++j)
      {
        if (!_platform_strncmp() && !_platform_strncmp()) {
          return v4;
        }
        v4 += 20;
      }
    }
    uint64_t v5 = (_DWORD *)((char *)v5 + v5[1]);
  }
  return 0;
}

uint64_t pgm_thread_set_disabled(uint64_t result)
{
  if (result) {
    *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 880) = 0xFFFFFFFFLL;
  }
  else {
    *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 880) = 0;
  }
  return result;
}

char *pgm_init_config(char a1)
{
  if (a1) {
    g_env = a1 & 1;
  }
  uint64_t result = env_var_0("MallocProbGuard");
  if (result)
  {
    byte_C41F9 = 1;
    uint64_t result = (char *)env_BOOL_0("MallocProbGuard");
    byte_C41FA = result != 0;
  }
  return result;
}

char *env_var_0(const char *a1)
{
  return getenv(a1);
}

BOOL env_BOOL_0(const char *a1)
{
  int v2 = env_var_0(a1);
  return v2 && *v2 == 49;
}

uint64_t pgm_should_enable()
{
  if (byte_C41F9)
  {
    char v2 = byte_C41FA & 1;
  }
  else
  {
    char v1 = g_env & 1;
    char v2 = should_activate(g_env & 1) && (v1 & 1) != 0;
  }
  return v2 & 1;
}

BOOL should_activate(char a1)
{
  char v3 = a1 & 1;
  if (a1 & 1) != 0 || (is_platform_binary())
  {
    if (v3) {
      uint32_t v1 = 250;
    }
    else {
      uint32_t v1 = 1000;
    }
    return !rand_uniform(v1) && !main_image_has_section();
  }
  else
  {
    return 0;
  }
}

mach_vm_address_t pgm_create_zone(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 104) < 0x10u)
  {
    __break(1u);
    JUMPOUT(0x3EFF4);
  }
  mach_vm_address_t v2 = my_vm_map(16720, 3, 1);
  setup_zone(v2, (void *)a1);
  my_vm_protect(v2, 0x4000, 1);
  return v2;
}

mach_vm_address_t my_vm_map(uint64_t a1, vm_prot_t a2, int a3)
{
  return my_vm_map_common(0, a1, a2, 1, a3);
}

uint64_t setup_zone(uint64_t a1, void *a2)
{
  memcpy((void *)a1, &malloc_zone_template_0, 0xC8uLL);
  *(void *)(a1 + 200) = a2;
  disable_unsupported_apis((void *)a1, a2);
  configure_zone(a1);
  *(void *)(a1 + 240) = quarantine_size(*(_DWORD *)(a1 + 208));
  *(void *)(a1 + 264) = *(void *)(a1 + 240) + 0x4000000;
  *(void *)(a1 + 272) = my_vm_map(*(void *)(a1 + 264), 0, 1);
  *(void *)(a1 + 248) = *(void *)(a1 + 272) + 0x2000000;
  *(void *)(a1 + 256) = *(void *)(a1 + 248) + *(void *)(a1 + 240);
  my_vm_map_fixed(*(void *)(a1 + 248), *(void *)(a1 + 240), 0, 13);
  *(void *)(a1 + 280) = (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 200) + 32))(*(void *)(a1 + 200), *(unsigned int *)(a1 + 208), 8);
  *(void *)(a1 + 288) = (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 200) + 32))(*(void *)(a1 + 200), *(unsigned int *)(a1 + 216), 256);
  BOOL v3 = 0;
  if (*(void *)(a1 + 280)) {
    BOOL v3 = *(void *)(a1 + 288) != 0;
  }
  if (!v3)
  {
    __break(1u);
    JUMPOUT(0x3F228);
  }
  return init_lock_0(a1);
}

uint64_t my_vm_protect(mach_vm_address_t a1, uint64_t a2, vm_prot_t a3)
{
  uint64_t result = mach_vm_protect(mach_task_self_, a1, (a2 + vm_page_size - 1) & ~(vm_page_size - 1), 0, a3);
  if (result)
  {
    __break(1u);
    JUMPOUT(0x3F2F4);
  }
  return result;
}

uint64_t pgm_extract_report_from_corpse(unint64_t a1, void *a2, unsigned int a3, uint64_t a4, unsigned int a5, uint64_t (*a6)(void, void, void))
{
  int v6 = 0;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)&crash_reporter_lock_0, (unsigned int *)&v6, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
  if (v6) {
    os_unfair_lock_lock_with_options();
  }
  int v11 = setup_memory_reader(a6);
  unsigned int report_select_zone = extract_report_select_zone(a1, a2, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t *))v11);
  int v7 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  int v8 = v7;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)&crash_reporter_lock_0, (unsigned int *)&v8, 0, memory_order_release, memory_order_relaxed);
  if (v8 != v7) {
    os_unfair_lock_unlock(&crash_reporter_lock_0);
  }
  return report_select_zone;
}

uint64_t (*setup_memory_reader(uint64_t (*a1)(void, void, void)))(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (!a1)
  {
    __break(1u);
    JUMPOUT(0x3F544);
  }
  uint64_t result = memory_reader_adapter_0;
  g_crm_reader_0 = a1;
  num_read_memory_0 = 0;
  return result;
}

uint64_t extract_report_select_zone(unint64_t a1, void *a2, unsigned int a3, uint64_t a4, unsigned int a5, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t *))
{
  for (unsigned int i = 0; i < a5; ++i)
  {
    unsigned int v7 = is_pgm_zone(*(void *)(a4 + 8 * i), a3, a6);
    free_read_memory();
    if (v7 != 257)
    {
      if (v7) {
        return v7;
      }
      unsigned int v8 = diagnose_fault_from_external_process(a1, a2, a3, *(void *)(a4 + 8 * i), (uint64_t)a6);
      free_read_memory();
      if (v8 != 257) {
        return v8;
      }
    }
  }
  return 5;
}

uint64_t is_platform_binary()
{
  return _malloc_is_platform_binary() & 1;
}

uint64_t rand_uniform(uint32_t a1)
{
  if (!a1)
  {
    __break(1u);
    JUMPOUT(0x3F6DCLL);
  }
  return arc4random_uniform(a1);
}

void *disable_unsupported_apis(void *result, void *a2)
{
  uint64_t v7 = 0;
  if (a2[14]) {
    uint64_t v7 = a2[14];
  }
  if (!v7) {
    result[14] = 0;
  }
  uint64_t v6 = 0;
  if (a2[23]) {
    uint64_t v6 = a2[23];
  }
  if (!v6) {
    result[23] = 0;
  }
  uint64_t v5 = 0;
  if (a2[15]) {
    uint64_t v5 = a2[15];
  }
  if (!v5) {
    result[15] = 0;
  }
  uint64_t v4 = 0;
  if (a2[17]) {
    uint64_t v4 = a2[17];
  }
  if (!v4) {
    result[17] = 0;
  }
  uint64_t v3 = 0;
  if (a2[19]) {
    uint64_t v3 = a2[19];
  }
  if (!v3) {
    result[19] = 0;
  }
  uint64_t v2 = 0;
  if (a2[24]) {
    uint64_t v2 = a2[24];
  }
  if (!v2) {
    result[24] = 0;
  }
  return result;
}

BOOL configure_zone(uint64_t a1)
{
  unsigned int v1 = choose_memory_budget_in_kb();
  unsigned int v9 = env_uint_0("MallocProbGuardMemoryBudgetInKB", v1);
  unsigned int v2 = compute_max_allocations(v9);
  *(_DWORD *)(a1 + 212) = env_uint_0("MallocProbGuardAllocations", v2);
  LODWORD(v3) = *(_DWORD *)(a1 + 212);
  *(_DWORD *)(a1 + 208) = env_uint_0("MallocProbGuardSlots", ((double)v3 * 10.0));
  LODWORD(v4) = *(_DWORD *)(a1 + 212);
  *(_DWORD *)(a1 + 216) = env_uint_0("MallocProbGuardMetadata", ((double)v4 * 3.0));
  unsigned int v5 = choose_sample_rate();
  int v8 = env_uint_0("MallocProbGuardSampleRate", v5);
  if (v8 == 1) {
    int v7 = 1;
  }
  else {
    int v7 = 2 * v8;
  }
  *(_DWORD *)(a1 + 220) = v7;
  *(unsigned char *)(a1 + 224) = env_BOOL_0("MallocProbGuardDebug");
  *(void *)(a1 + 232) = env_uint_0("MallocProbGuardDebugLogThrottleInMillis", 0x3E8u);
  if (*(unsigned char *)(a1 + 224)) {
    malloc_report(6, (uint64_t)"ProbGuard configuration: %u kB budget, 1/%u sample rate, %u/%u/%u allocations/metadata/slots\n");
  }
  BOOL result = check_configuration((_DWORD *)a1);
  if (!result)
  {
    malloc_report(3, (uint64_t)"*** FATAL ERROR - ProbGuard: bad configuration.\n");
    qword_C0118 = (uint64_t)"FATAL ERROR - ProbGuard: bad configuration";
    __break(1u);
    JUMPOUT(0x3FBA4);
  }
  return result;
}

vm_size_t quarantine_size(int a1)
{
  return (2 * a1 + 1) * vm_page_size;
}

mach_vm_address_t my_vm_map_fixed(mach_vm_address_t a1, uint64_t a2, vm_prot_t a3, int a4)
{
  mach_vm_address_t result = my_vm_map_common(a1, a2, a3, 0x4000, a4);
  if (result != a1)
  {
    __break(1u);
    JUMPOUT(0x3FC84);
  }
  return result;
}

uint64_t init_lock_0(uint64_t result)
{
  *(_DWORD *)(result + 16680) = 0;
  return result;
}

uint64_t pgm_size(void *a1, unint64_t a2)
{
  BOOL v3 = 0;
  if (a1[31] <= a2) {
    BOOL v3 = a2 < a1[32];
  }
  if (!v3) {
    return (*(uint64_t (**)(void, unint64_t))(a1[25] + 16))(a1[25], a2);
  }
  lock_0((uint64_t)a1);
  uint64_t v4 = lookup_size(a1, a2);
  unlock_0((uint64_t)a1);
  return v4;
}

uint64_t pgm_malloc(uint64_t a1, vm_size_t a2)
{
  BOOL v5 = 0;
  if (a2 <= vm_page_size)
  {
    BOOL v5 = 0;
    if (*(_DWORD *)(a1 + 16684) != *(_DWORD *)(a1 + 212))
    {
      uint32_t v12 = *(_DWORD *)(a1 + 220);
      int v10 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 880);
      if (v10 == -1)
      {
        BOOL v13 = 0;
      }
      else
      {
        if (v10) {
          unsigned int v11 = v10 - 1;
        }
        else {
          unsigned int v11 = rand_uniform(v12);
        }
        *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 880) = v11;
        BOOL v13 = v11 == 0;
      }
      BOOL v5 = v13;
    }
  }
  if (v5 && (lock_0(a1), vm_size_t v6 = allocate(a1, a2, 0x10uLL, v2, v3), unlock_0(a1), v6)) {
    return v6;
  }
  else {
    return (*(uint64_t (**)(void, vm_size_t))(*(void *)(a1 + 200) + 24))(*(void *)(a1 + 200), a2);
  }
}

uint64_t pgm_calloc(uint64_t a1, unint64_t a2, unint64_t a3)
{
  vm_size_t v8 = a2 * a3;
  if (!is_mul_ok(a2, a3)) {
    return (*(uint64_t (**)(void, unint64_t, unint64_t))(*(void *)(a1 + 200) + 32))(*(void *)(a1 + 200), a2, a3);
  }
  BOOL v6 = 0;
  if (v8 <= vm_page_size)
  {
    BOOL v6 = 0;
    if (*(_DWORD *)(a1 + 16684) != *(_DWORD *)(a1 + 212))
    {
      uint32_t v15 = *(_DWORD *)(a1 + 220);
      int v13 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 880);
      if (v13 == -1)
      {
        BOOL v16 = 0;
      }
      else
      {
        if (v13) {
          unsigned int v14 = v13 - 1;
        }
        else {
          unsigned int v14 = rand_uniform(v15);
        }
        *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 880) = v14;
        BOOL v16 = v14 == 0;
      }
      BOOL v6 = v16;
    }
  }
  if (!v6) {
    return (*(uint64_t (**)(void, unint64_t, unint64_t))(*(void *)(a1 + 200) + 32))(*(void *)(a1 + 200), a2, a3);
  }
  lock_0(a1);
  vm_size_t v7 = allocate(a1, v8, 0x10uLL, v3, v4);
  unlock_0(a1);
  if (!v7) {
    return (*(uint64_t (**)(void, unint64_t, unint64_t))(*(void *)(a1 + 200) + 32))(*(void *)(a1 + 200), a2, a3);
  }
  _platform_bzero();
  return v7;
}

uint64_t pgm_valloc(uint64_t a1, vm_size_t a2)
{
  BOOL v5 = 0;
  if (a2 <= vm_page_size)
  {
    BOOL v5 = 0;
    if (*(_DWORD *)(a1 + 16684) != *(_DWORD *)(a1 + 212))
    {
      uint32_t v12 = *(_DWORD *)(a1 + 220);
      int v10 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 880);
      if (v10 == -1)
      {
        BOOL v13 = 0;
      }
      else
      {
        if (v10) {
          unsigned int v11 = v10 - 1;
        }
        else {
          unsigned int v11 = rand_uniform(v12);
        }
        *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 880) = v11;
        BOOL v13 = v11 == 0;
      }
      BOOL v5 = v13;
    }
  }
  if (v5 && (lock_0(a1), vm_size_t v6 = allocate(a1, a2, vm_page_size, v2, v3), unlock_0(a1), v6)) {
    return v6;
  }
  else {
    return (*(uint64_t (**)(void, vm_size_t))(*(void *)(a1 + 200) + 40))(*(void *)(a1 + 200), a2);
  }
}

void pgm_free(void *a1, unint64_t a2)
{
  BOOL v2 = 0;
  if (a1[31] <= a2) {
    BOOL v2 = a2 < a1[32];
  }
  if (v2)
  {
    lock_0((uint64_t)a1);
    deallocate((uint64_t)a1, a2);
    unlock_0((uint64_t)a1);
  }
  else
  {
    (*(void (**)(void, unint64_t))(a1[25] + 48))(a1[25], a2);
  }
}

uint64_t pgm_realloc(uint64_t a1, unint64_t a2, vm_size_t a3)
{
  if (!a2) {
    return pgm_malloc(a1, a3);
  }
  BOOL v5 = 0;
  if (a3 <= vm_page_size)
  {
    BOOL v5 = 0;
    if (*(_DWORD *)(a1 + 16684) != *(_DWORD *)(a1 + 212))
    {
      uint32_t v13 = *(_DWORD *)(a1 + 220);
      int v11 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 880);
      if (v11 == -1)
      {
        BOOL v14 = 0;
      }
      else
      {
        if (v11) {
          unsigned int v12 = v11 - 1;
        }
        else {
          unsigned int v12 = rand_uniform(v13);
        }
        *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 880) = v12;
        BOOL v14 = v12 == 0;
      }
      BOOL v5 = v14;
    }
  }
  if (v5) {
    goto LABEL_17;
  }
  BOOL v4 = 0;
  if (*(void *)(a1 + 248) <= a2) {
    BOOL v4 = a2 < *(void *)(a1 + 256);
  }
  if (!v4) {
    return (*(uint64_t (**)(void, unint64_t, vm_size_t))(*(void *)(a1 + 200) + 56))(*(void *)(a1 + 200), a2, a3);
  }
LABEL_17:
  lock_0(a1);
  vm_size_t v6 = reallocate(a1, a2, a3, v5);
  unlock_0(a1);
  return v6;
}

uint64_t pgm_destroy(mach_vm_address_t a1)
{
  return sanitizer_vm_deallocate(a1, 16720);
}

uint64_t pgm_memalign(uint64_t a1, vm_size_t a2, vm_size_t a3)
{
  if (a2 > vm_page_size) {
    return (*(uint64_t (**)(void, vm_size_t, vm_size_t))(*(void *)(a1 + 200) + 112))(*(void *)(a1 + 200), a2, a3);
  }
  if (a2 <= 0x10) {
    vm_size_t v7 = 16;
  }
  else {
    vm_size_t v7 = a2;
  }
  BOOL v6 = 0;
  if (a3 <= vm_page_size)
  {
    BOOL v6 = 0;
    if (*(_DWORD *)(a1 + 16684) != *(_DWORD *)(a1 + 212))
    {
      uint32_t v15 = *(_DWORD *)(a1 + 220);
      int v13 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 880);
      if (v13 == -1)
      {
        BOOL v16 = 0;
      }
      else
      {
        if (v13) {
          unsigned int v14 = v13 - 1;
        }
        else {
          unsigned int v14 = rand_uniform(v15);
        }
        *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 880) = v14;
        BOOL v16 = v14 == 0;
      }
      BOOL v6 = v16;
    }
  }
  if (v6 && (lock_0(a1), vm_size_t v8 = allocate(a1, a3, v7, v3, v4), unlock_0(a1), v8)) {
    return v8;
  }
  else {
    return (*(uint64_t (**)(void, vm_size_t, vm_size_t))(*(void *)(a1 + 200) + 112))(*(void *)(a1 + 200), a2, a3);
  }
}

void pgm_free_definite_size(void *a1, unint64_t a2, uint64_t a3)
{
  BOOL v3 = 0;
  if (a1[31] <= a2) {
    BOOL v3 = a2 < a1[32];
  }
  if (v3)
  {
    lock_0((uint64_t)a1);
    deallocate((uint64_t)a1, a2);
    unlock_0((uint64_t)a1);
  }
  else
  {
    (*(void (**)(void, unint64_t, uint64_t))(a1[25] + 120))(a1[25], a2, a3);
  }
}

uint64_t pgm_claimed_address(void *a1, unint64_t a2)
{
  BOOL v3 = 0;
  if (a1[31] <= a2) {
    BOOL v3 = a2 < a1[32];
  }
  if (v3) {
    return 1;
  }
  else {
    return (*(uint64_t (**)(void, unint64_t))(a1[25] + 136))(a1[25], a2);
  }
}

uint64_t pgm_malloc_with_options(uint64_t a1, vm_size_t a2, vm_size_t a3, uint64_t a4)
{
  if (a2 > vm_page_size) {
    return (*(uint64_t (**)(void, vm_size_t, vm_size_t, uint64_t))(*(void *)(a1 + 200) + 152))(*(void *)(a1 + 200), a2, a3, a4);
  }
  if (a2 <= 0x10) {
    vm_size_t v8 = 16;
  }
  else {
    vm_size_t v8 = a2;
  }
  BOOL v7 = 0;
  if (a3 <= vm_page_size)
  {
    BOOL v7 = 0;
    if (*(_DWORD *)(a1 + 16684) != *(_DWORD *)(a1 + 212))
    {
      uint32_t v17 = *(_DWORD *)(a1 + 220);
      int v15 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 880);
      if (v15 == -1)
      {
        BOOL v18 = 0;
      }
      else
      {
        if (v15) {
          unsigned int v16 = v15 - 1;
        }
        else {
          unsigned int v16 = rand_uniform(v17);
        }
        *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 880) = v16;
        BOOL v18 = v16 == 0;
      }
      BOOL v7 = v18;
    }
  }
  if (!v7) {
    return (*(uint64_t (**)(void, vm_size_t, vm_size_t, uint64_t))(*(void *)(a1 + 200) + 152))(*(void *)(a1 + 200), a2, a3, a4);
  }
  lock_0(a1);
  vm_size_t v9 = allocate(a1, a3, v8, v4, v5);
  unlock_0(a1);
  if (!v9) {
    return (*(uint64_t (**)(void, vm_size_t, vm_size_t, uint64_t))(*(void *)(a1 + 200) + 152))(*(void *)(a1 + 200), a2, a3, a4);
  }
  if (a4) {
    _platform_bzero();
  }
  return v9;
}

uint64_t pgm_malloc_type_malloc(uint64_t a1, vm_size_t a2, uint64_t a3)
{
  BOOL v6 = 0;
  if (a2 <= vm_page_size)
  {
    BOOL v6 = 0;
    if (*(_DWORD *)(a1 + 16684) != *(_DWORD *)(a1 + 212))
    {
      uint32_t v14 = *(_DWORD *)(a1 + 220);
      int v12 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 880);
      if (v12 == -1)
      {
        BOOL v15 = 0;
      }
      else
      {
        if (v12) {
          unsigned int v13 = v12 - 1;
        }
        else {
          unsigned int v13 = rand_uniform(v14);
        }
        *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 880) = v13;
        BOOL v15 = v13 == 0;
      }
      BOOL v6 = v15;
    }
  }
  if (v6 && (lock_0(a1), vm_size_t v7 = allocate(a1, a2, 0x10uLL, v3, v4), unlock_0(a1), v7)) {
    return v7;
  }
  else {
    return (*(uint64_t (**)(void, vm_size_t, uint64_t))(*(void *)(a1 + 200) + 160))(*(void *)(a1 + 200), a2, a3);
  }
}

uint64_t pgm_malloc_type_calloc(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  vm_size_t v9 = a2 * a3;
  if (!is_mul_ok(a2, a3)) {
    return (*(uint64_t (**)(void, unint64_t, unint64_t, uint64_t))(*(void *)(a1 + 200) + 168))(*(void *)(a1 + 200), a2, a3, a4);
  }
  BOOL v7 = 0;
  if (v9 <= vm_page_size)
  {
    BOOL v7 = 0;
    if (*(_DWORD *)(a1 + 16684) != *(_DWORD *)(a1 + 212))
    {
      uint32_t v17 = *(_DWORD *)(a1 + 220);
      int v15 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 880);
      if (v15 == -1)
      {
        BOOL v18 = 0;
      }
      else
      {
        if (v15) {
          unsigned int v16 = v15 - 1;
        }
        else {
          unsigned int v16 = rand_uniform(v17);
        }
        *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 880) = v16;
        BOOL v18 = v16 == 0;
      }
      BOOL v7 = v18;
    }
  }
  if (!v7) {
    return (*(uint64_t (**)(void, unint64_t, unint64_t, uint64_t))(*(void *)(a1 + 200) + 168))(*(void *)(a1 + 200), a2, a3, a4);
  }
  lock_0(a1);
  vm_size_t v8 = allocate(a1, v9, 0x10uLL, v4, v5);
  unlock_0(a1);
  if (!v8) {
    return (*(uint64_t (**)(void, unint64_t, unint64_t, uint64_t))(*(void *)(a1 + 200) + 168))(*(void *)(a1 + 200), a2, a3, a4);
  }
  _platform_bzero();
  return v8;
}

uint64_t pgm_malloc_type_realloc(uint64_t a1, unint64_t a2, vm_size_t a3, uint64_t a4)
{
  if (!a2) {
    return pgm_malloc_type_malloc(a1, a3, a4);
  }
  BOOL v6 = 0;
  if (a3 <= vm_page_size)
  {
    BOOL v6 = 0;
    if (*(_DWORD *)(a1 + 16684) != *(_DWORD *)(a1 + 212))
    {
      uint32_t v15 = *(_DWORD *)(a1 + 220);
      int v13 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 880);
      if (v13 == -1)
      {
        BOOL v16 = 0;
      }
      else
      {
        if (v13) {
          unsigned int v14 = v13 - 1;
        }
        else {
          unsigned int v14 = rand_uniform(v15);
        }
        *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 880) = v14;
        BOOL v16 = v14 == 0;
      }
      BOOL v6 = v16;
    }
  }
  if (v6) {
    goto LABEL_17;
  }
  BOOL v5 = 0;
  if (*(void *)(a1 + 248) <= a2) {
    BOOL v5 = a2 < *(void *)(a1 + 256);
  }
  if (!v5) {
    return (*(uint64_t (**)(void, unint64_t, vm_size_t, uint64_t))(*(void *)(a1 + 200) + 176))(*(void *)(a1 + 200), a2, a3, a4);
  }
LABEL_17:
  lock_0(a1);
  vm_size_t v7 = reallocate(a1, a2, a3, v6);
  unlock_0(a1);
  return v7;
}

uint64_t pgm_malloc_type_memalign(uint64_t a1, vm_size_t a2, vm_size_t a3, uint64_t a4)
{
  if (a2 > vm_page_size) {
    return (*(uint64_t (**)(void, vm_size_t, vm_size_t, uint64_t))(*(void *)(a1 + 200) + 184))(*(void *)(a1 + 200), a2, a3, a4);
  }
  if (a2 <= 0x10) {
    vm_size_t v8 = 16;
  }
  else {
    vm_size_t v8 = a2;
  }
  BOOL v7 = 0;
  if (a3 <= vm_page_size)
  {
    BOOL v7 = 0;
    if (*(_DWORD *)(a1 + 16684) != *(_DWORD *)(a1 + 212))
    {
      uint32_t v17 = *(_DWORD *)(a1 + 220);
      int v15 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 880);
      if (v15 == -1)
      {
        BOOL v18 = 0;
      }
      else
      {
        if (v15) {
          unsigned int v16 = v15 - 1;
        }
        else {
          unsigned int v16 = rand_uniform(v17);
        }
        *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 880) = v16;
        BOOL v18 = v16 == 0;
      }
      BOOL v7 = v18;
    }
  }
  if (v7 && (lock_0(a1), vm_size_t v9 = allocate(a1, a3, v8, v4, v5), unlock_0(a1), v9)) {
    return v9;
  }
  else {
    return (*(uint64_t (**)(void, vm_size_t, vm_size_t, uint64_t))(*(void *)(a1 + 200) + 184))(*(void *)(a1 + 200), a2, a3, a4);
  }
}

uint64_t pgm_malloc_type_malloc_with_options(uint64_t a1, vm_size_t a2, vm_size_t a3, uint64_t a4, uint64_t a5)
{
  if (a2 > vm_page_size) {
    return (*(uint64_t (**)(void, vm_size_t, vm_size_t, uint64_t, uint64_t))(*(void *)(a1 + 200) + 192))(*(void *)(a1 + 200), a2, a3, a4, a5);
  }
  if (a2 <= 0x10) {
    vm_size_t v9 = 16;
  }
  else {
    vm_size_t v9 = a2;
  }
  BOOL v8 = 0;
  if (a3 <= vm_page_size)
  {
    BOOL v8 = 0;
    if (*(_DWORD *)(a1 + 16684) != *(_DWORD *)(a1 + 212))
    {
      uint32_t v19 = *(_DWORD *)(a1 + 220);
      int v17 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 880);
      if (v17 == -1)
      {
        BOOL v20 = 0;
      }
      else
      {
        if (v17) {
          unsigned int v18 = v17 - 1;
        }
        else {
          unsigned int v18 = rand_uniform(v19);
        }
        *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 880) = v18;
        BOOL v20 = v18 == 0;
      }
      BOOL v8 = v20;
    }
  }
  if (!v8) {
    return (*(uint64_t (**)(void, vm_size_t, vm_size_t, uint64_t, uint64_t))(*(void *)(a1 + 200) + 192))(*(void *)(a1 + 200), a2, a3, a4, a5);
  }
  lock_0(a1);
  vm_size_t v10 = allocate(a1, a3, v9, v5, v6);
  unlock_0(a1);
  if (!v10) {
    return (*(uint64_t (**)(void, vm_size_t, vm_size_t, uint64_t, uint64_t))(*(void *)(a1 + 200) + 192))(*(void *)(a1 + 200), a2, a3, a4, a5);
  }
  if (a4) {
    _platform_bzero();
  }
  return v10;
}

uint64_t lock_0(uint64_t result)
{
  int v1 = 0;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(result + 16680), (unsigned int *)&v1, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
  if (v1) {
    return os_unfair_lock_lock_with_options();
  }
  return result;
}

uint64_t lookup_size(void *a1, unint64_t a2)
{
  uint64_t v3 = lookup_slot(a1, a2);
  if (v3 < 0) {
    return *(unsigned __int16 *)(a1[35] + 8 * v3 + 4);
  }
  else {
    return 0;
  }
}

void unlock_0(uint64_t a1)
{
  int v1 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  int v2 = v1;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 16680), (unsigned int *)&v2, 0, memory_order_release, memory_order_relaxed);
  if (v2 != v1) {
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16680));
  }
}

uint64_t lookup_slot(void *a1, unint64_t a2)
{
  BOOL v4 = 0;
  if (a1[31] <= a2) {
    BOOL v4 = a2 < a1[32];
  }
  if (!v4)
  {
    __break(1u);
    JUMPOUT(0x423D4);
  }
  if (a1[31] % vm_page_size)
  {
    __break(1u);
    JUMPOUT(0x42418);
  }
  unsigned int v9 = nearest_slot((uint64_t)a1, a2);
  unsigned __int16 v8 = a2 % vm_page_size;
  unsigned __int16 v7 = *(_WORD *)(a1[35] + 8 * v9 + 6);
  unsigned __int16 v6 = v7 + *(_WORD *)(a1[35] + 8 * v9 + 4);
  if (is_guard_page((uint64_t)a1, a2))
  {
    int v5 = 3;
  }
  else if (v8 == v7)
  {
    int v5 = 0;
  }
  else if (v7 >= (int)v8 || v8 >= (int)v6)
  {
    int v5 = 2;
  }
  else
  {
    int v5 = 1;
  }
  LODWORD(v12) = v9;
  HIDWORD(v12) = v13 & 0x80000000 | v5 & 0x7FFFFFFF;
  BOOL v3 = 0;
  if ((*(_DWORD *)(a1[35] + 8 * v9) & 3) == 1) {
    BOOL v3 = v5 == 0;
  }
  HIDWORD(v12) = HIDWORD(v12) & 0x7FFFFFFF | (v3 << 31);
  return v12;
}

uint64_t nearest_slot(uint64_t a1, unint64_t a2)
{
  if (a2 >= *(void *)(a1 + 248) + vm_page_size)
  {
    if (a2 < *(void *)(a1 + 256) - vm_page_size)
    {
      unsigned int v3 = (page_idx(a1, a2) - 1) / 2;
      if (is_guard_page(a1, a2) && a2 % vm_page_size >= vm_page_size / 2) {
        ++v3;
      }
      return v3;
    }
    else
    {
      return (*(_DWORD *)(a1 + 208) - 1);
    }
  }
  else
  {
    return 0;
  }
}

BOOL is_guard_page(uint64_t a1, unint64_t a2)
{
  return page_idx(a1, a2) % 2 == 0;
}

vm_size_t page_idx(uint64_t a1, unint64_t a2)
{
  BOOL v3 = 0;
  if (*(void *)(a1 + 248) <= a2) {
    BOOL v3 = a2 < *(void *)(a1 + 256);
  }
  if (!v3)
  {
    __break(1u);
    JUMPOUT(0x427FCLL);
  }
  return (a2 - *(void *)(a1 + 248)) / vm_page_size;
}

vm_size_t allocate(uint64_t a1, vm_size_t a2, vm_size_t a3, double a4, float a5)
{
  if (a2 > vm_page_size)
  {
    __break(1u);
    JUMPOUT(0x42884);
  }
  BOOL v9 = 0;
  if (a3 >= 0x10) {
    BOOL v9 = a3 <= vm_page_size;
  }
  if (!v9)
  {
    __break(1u);
    JUMPOUT(0x428E8);
  }
  if (!is_power_of_2(a3, a4, a5))
  {
    __break(1u);
    JUMPOUT(0x42910);
  }
  if (*(_DWORD *)(a1 + 16684) == *(_DWORD *)(a1 + 212)) {
    return 0;
  }
  unint64_t v17 = block_size(a2);
  unsigned int v14 = choose_available_slot(a1);
  unsigned int v13 = choose_metadata(a1, v14);
  unsigned __int16 v12 = choose_offset_on_page(v17, a3, vm_page_size, v5, v6);
  vm_size_t v11 = page_addr(a1, v14);
  mark_read_write(v11);
  LODWORD(v10) = (4 * v13) | 1;
  WORD2(v10) = v17;
  HIWORD(v10) = v12;
  *(void *)(*(void *)(a1 + 280) + 8 * v14) = v10;
  *(_DWORD *)(*(void *)(a1 + 288) + ((unint64_t)v13 << 8)) = v14;
  unint64_t v20 = *(void *)(a1 + 288) + ((unint64_t)v13 << 8);
  *(void *)(v20 + 4) = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) - 8);
  *(void *)(v20 + 12) = mach_absolute_time();
  *(_OWORD *)(v20 + 22) = 0u;
  *(_WORD *)(v20 + 38) = 0;
  *(_WORD *)(v20 + 20) = trace_collect(v20 + 40, 216);
  ++*(_DWORD *)(a1 + 16684);
  *(void *)(a1 + 16696) += v17;
  if (*(void *)(a1 + 16696) <= *(void *)(a1 + 16704)) {
    uint64_t v8 = *(void *)(a1 + 16704);
  }
  else {
    uint64_t v8 = *(void *)(a1 + 16696);
  }
  *(void *)(a1 + 16704) = v8;
  debug_zone(a1, (uint64_t)"allocated", v11 + v12);
  return v11 + v12;
}

BOOL is_power_of_2(uint64_t a1, double a2, float a3)
{
  LOWORD(a3) = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)a1));
  return LODWORD(a3) == 1;
}

unint64_t block_size(uint64_t a1)
{
  if (a1) {
    return (a1 + 15) & 0xFFFFFFFFFFFFFFF0;
  }
  else {
    return 16;
  }
}

uint64_t choose_available_slot(uint64_t a1)
{
  for (unsigned int i = *(_DWORD *)(a1 + 16692);
        (*(_DWORD *)(*(void *)(a1 + 280) + 8 * i) & 3) == 1;
  *(_DWORD *)(a1 + 16692) = (i + 1) % *(_DWORD *)(a1 + 208);
  return i;
}

uint64_t choose_metadata(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 16688) >= *(_DWORD *)(a1 + 216))
  {
    if (*(_DWORD *)(*(void *)(a1 + 288)
                   + ((unint64_t)(*(_DWORD *)(*(void *)(a1 + 280) + 8 * a2) >> 2) << 8)) == a2)
    {
      return *(_DWORD *)(*(void *)(a1 + 280) + 8 * a2) >> 2;
    }
    else
    {
      do
        unsigned int v4 = rand_uniform(*(_DWORD *)(a1 + 216));
      while ((*(_DWORD *)(*(void *)(a1 + 280)
                         + 8 * *(unsigned int *)(*(void *)(a1 + 288) + ((unint64_t)v4 << 8))) & 3) != 2);
      return v4;
    }
  }
  else
  {
    unsigned int v2 = *(_DWORD *)(a1 + 16688);
    *(_DWORD *)(a1 + 16688) = v2 + 1;
    return v2;
  }
}

uint64_t choose_offset_on_page(unint64_t a1, unint64_t a2, unsigned __int16 a3, double a4, float a5)
{
  __int16 v9 = a1;
  __int16 v8 = a2;
  if (a1 > a3)
  {
    __break(1u);
    JUMPOUT(0x42ED0);
  }
  BOOL v6 = 0;
  if (a2 <= a3) {
    BOOL v6 = is_power_of_2(a2, a4, a5);
  }
  if (!v6)
  {
    __break(1u);
    JUMPOUT(0x42F24);
  }
  if (!is_power_of_2(a3, a4, a5))
  {
    __break(1u);
    JUMPOUT(0x42F50);
  }
  if (rand_uniform(2u)) {
    return 0;
  }
  else {
    return (unsigned __int16)((a3 - v9) & ~(v8 - 1));
  }
}

vm_size_t page_addr(uint64_t a1, unsigned int a2)
{
  if (a2 >= *(_DWORD *)(a1 + 208))
  {
    __break(1u);
    JUMPOUT(0x42FF8);
  }
  return *(void *)(a1 + 248) + (2 * a2 + 1) * vm_page_size;
}

uint64_t mark_read_write(mach_vm_address_t a1)
{
  return my_vm_protect(a1, vm_page_size, 3);
}

uint64_t debug_zone(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  if (*(unsigned char *)(result + 224))
  {
    if (should_log(result)) {
      malloc_report(6, (uint64_t)"ProbGuard: %9s 0x%llx, fill state: %3u/%u\n");
    }
    mach_vm_address_t result = pgm_check(v4);
    if (!result)
    {
      malloc_report(3, (uint64_t)"*** FATAL ERROR - ProbGuard: zone integrity check failed.\n");
      qword_C0118 = (uint64_t)"FATAL ERROR - ProbGuard: zone integrity check failed";
      qword_C0148 = a3;
      __break(1u);
      JUMPOUT(0x4315CLL);
    }
  }
  return result;
}

BOOL should_log(uint64_t a1)
{
  uint64_t v3 = mach_absolute_time();
  BOOL v2 = to_millis(v3 - *(void *)(a1 + 16712)) >= *(void *)(a1 + 232);
  if (v2) {
    *(void *)(a1 + 16712) = v3;
  }
  return v2;
}

uint64_t pgm_check(uint64_t a1)
{
  char v2 = 0;
  if (check_zone(a1))
  {
    char v2 = 0;
    if (check_slots(a1)) {
      char v2 = check_metadata(a1);
    }
  }
  return v2 & 1;
}

unint64_t to_millis(uint64_t a1)
{
  uint64_t v3 = a1;
  mach_timebase_info info = 0;
  mach_timebase_info(&info);
  return v3 * (unint64_t)info.numer / info.denom / 0xF4240;
}

BOOL check_zone(uint64_t a1)
{
  BOOL v3 = 0;
  if (check_configuration((_DWORD *)a1))
  {
    uint64_t v2 = *(void *)(a1 + 240);
    BOOL v3 = 0;
    if (v2 == quarantine_size(*(_DWORD *)(a1 + 208)))
    {
      BOOL v3 = 0;
      if (!(*(void *)(a1 + 248) % vm_page_size))
      {
        BOOL v3 = 0;
        if (!(*(void *)(a1 + 240) % vm_page_size))
        {
          BOOL v3 = 0;
          if (*(void *)(a1 + 248) + *(void *)(a1 + 240) == *(void *)(a1 + 256))
          {
            BOOL v3 = 0;
            if (*(void *)(a1 + 248) < *(void *)(a1 + 256))
            {
              BOOL v3 = 0;
              if (*(void *)(a1 + 264) == *(void *)(a1 + 240) + 0x4000000)
              {
                BOOL v3 = 0;
                if (*(void *)(a1 + 272) == *(void *)(a1 + 248) - 0x2000000)
                {
                  BOOL v3 = 0;
                  if (*(void *)(a1 + 272) < *(void *)(a1 + 248))
                  {
                    BOOL v3 = 0;
                    if (*(_DWORD *)(a1 + 16684) <= *(_DWORD *)(a1 + 212))
                    {
                      BOOL v3 = 0;
                      if (*(_DWORD *)(a1 + 16688) <= *(_DWORD *)(a1 + 216))
                      {
                        BOOL v3 = 0;
                        if (*(_DWORD *)(a1 + 16684) <= *(_DWORD *)(a1 + 16688))
                        {
                          BOOL v3 = 0;
                          if (*(_DWORD *)(a1 + 16692) < *(_DWORD *)(a1 + 208))
                          {
                            BOOL v3 = 0;
                            if (*(void *)(a1 + 280))
                            {
                              BOOL v3 = 0;
                              if (*(void *)(a1 + 288)) {
                                return *(void *)(a1 + 16696) <= *(void *)(a1 + 16704);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return v3;
}

BOOL check_slots(uint64_t a1)
{
  int v6 = 0;
  uint64_t v5 = 0;
  for (unsigned int i = 0; i < *(_DWORD *)(a1 + 208); ++i)
  {
    BOOL v3 = (_DWORD *)(*(void *)(a1 + 280) + 8 * i);
    if ((check_slot(a1, (uint64_t)v3) & 1) == 0) {
      return 0;
    }
    if ((*v3 & 3) == 1)
    {
      ++v6;
      v5 += *(unsigned __int16 *)(*(void *)(a1 + 280) + 8 * i + 4);
    }
  }
  BOOL v2 = 0;
  if (v6 == *(_DWORD *)(a1 + 16684)) {
    return v5 == *(void *)(a1 + 16696);
  }
  return v2;
}

uint64_t check_metadata(uint64_t a1)
{
  for (unsigned int i = 0; i < *(_DWORD *)(a1 + 16688); ++i)
  {
    if (!check_md(a1, (unsigned int *)(*(void *)(a1 + 288) + ((unint64_t)i << 8))))
    {
      char v4 = 0;
      return v4 & 1;
    }
  }
  char v4 = 1;
  return v4 & 1;
}

BOOL check_configuration(_DWORD *a1)
{
  BOOL v2 = 0;
  if (a1[53])
  {
    BOOL v2 = 0;
    if (a1[53] <= a1[54] / 2u)
    {
      BOOL v2 = 0;
      if (a1[54] <= a1[52]) {
        return a1[55] != 0;
      }
    }
  }
  return v2;
}

uint64_t check_slot(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a2 & 3) != 0)
  {
    BOOL v4 = 0;
    if ((*(_DWORD *)a2 & 3) != 3)
    {
      BOOL v4 = 0;
      if (*(_DWORD *)(a1 + 16688) > *(_DWORD *)a2 >> 2)
      {
        BOOL v4 = 0;
        if (*(unsigned __int16 *)(a2 + 4) <= vm_page_size)
        {
          uint64_t v3 = *(unsigned __int16 *)(a2 + 4);
          BOOL v4 = 0;
          if (v3 == block_size(v3))
          {
            BOOL v4 = 0;
            if (*(unsigned __int16 *)(a2 + 6) <= vm_page_size)
            {
              BOOL v4 = 0;
              if (!(*(unsigned __int16 *)(a2 + 6) % 0x10uLL)) {
                BOOL v4 = *(unsigned __int16 *)(a2 + 6) + (unint64_t)*(unsigned __int16 *)(a2 + 4) <= vm_page_size;
              }
            }
          }
        }
      }
    }
    char v6 = v4;
  }
  else
  {
    char v6 = 1;
  }
  return v6 & 1;
}

BOOL check_md(uint64_t a1, unsigned int *a2)
{
  BOOL v3 = 0;
  if (*a2 < *(_DWORD *)(a1 + 208))
  {
    BOOL v3 = 0;
    if (*(_DWORD *)(*(void *)(a1 + 280) + 8 * *a2) >> 2 == ((uint64_t)a2 - *(void *)(a1 + 288)) / 256) {
      return *((unsigned __int16 *)a2 + 10) + (unint64_t)*((unsigned __int16 *)a2 + 19) <= 0xD8;
    }
  }
  return v3;
}

uint64_t deallocate(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = lookup_slot((void *)a1, a2);
  if (v6 >= 0)
  {
    malloc_report(3, (uint64_t)"*** FATAL ERROR - ProbGuard: invalid pointer passed to free.\n");
    qword_C0118 = (uint64_t)"FATAL ERROR - ProbGuard: invalid pointer passed to free";
    qword_C0148 = a2;
    __break(1u);
    JUMPOUT(0x43B7CLL);
  }
  unsigned int v5 = *(_DWORD *)(*(void *)(a1 + 280) + 8 * v6) >> 2;
  *(_DWORD *)(*(void *)(a1 + 280) + 8 * v6) = *(_DWORD *)(*(void *)(a1 + 280)
                                                                          + 8 * v6) & 0xFFFFFFFC | 2;
  unint64_t v9 = *(void *)(a1 + 288) + ((unint64_t)v5 << 8);
  *(void *)(v9 + 22) = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) - 8);
  *(void *)(v9 + 30) = mach_absolute_time();
  if (*(unsigned __int16 *)(v9 + 20) > 0x6Bu) {
    uint64_t v3 = 108;
  }
  else {
    uint64_t v3 = *(unsigned __int16 *)(v9 + 20);
  }
  *(_WORD *)(v9 + 20) = v3;
  *(_WORD *)(v9 + 38) = trace_collect(v9 + v3 + 40, 216 - v3);
  --*(_DWORD *)(a1 + 16684);
  *(void *)(a1 + 16696) -= *(unsigned __int16 *)(*(void *)(a1 + 280) + 8 * v6 + 4);
  BOOL v4 = (void *)page_addr(a1, v6);
  mark_inaccessible(v4);
  return debug_zone(a1, (uint64_t)"freed", a2);
}

uint64_t mark_inaccessible(void *a1)
{
  if (madvise(a1, vm_page_size, 7))
  {
    __break(1u);
    JUMPOUT(0x43E10);
  }
  return my_vm_protect((mach_vm_address_t)a1, vm_page_size, 0);
}

vm_size_t reallocate(uint64_t a1, unint64_t a2, vm_size_t a3, int a4)
{
  BOOL v8 = 0;
  if (*(void *)(a1 + 248) <= a2) {
    BOOL v8 = a2 < *(void *)(a1 + 256);
  }
  BOOL v7 = 1;
  if (!v8) {
    BOOL v7 = a4 != 0;
  }
  if (!v7)
  {
    __break(1u);
    JUMPOUT(0x43EECLL);
  }
  if (v8) {
    uint64_t v10 = lookup_size((void *)a1, a2);
  }
  else {
    uint64_t v10 = (*(uint64_t (**)(void))(*(void *)(a1 + 200) + 16))();
  }
  if (!v10)
  {
    malloc_report(3, (uint64_t)"*** FATAL ERROR - ProbGuard: invalid pointer passed to realloc.\n");
    qword_C0118 = (uint64_t)"FATAL ERROR - ProbGuard: invalid pointer passed to realloc";
    qword_C0148 = a2;
    __break(1u);
    JUMPOUT(0x43F8CLL);
  }
  if (!a4 || *(_DWORD *)(a1 + 16684) == *(_DWORD *)(a1 + 212))
  {
    vm_size_t v9 = (*(uint64_t (**)(void))(*(void *)(a1 + 200) + 24))();
    if (!v9) {
      return 0;
    }
  }
  else
  {
    vm_size_t v9 = allocate(a1, a3, 0x10uLL, v4, v5);
    if (!v9)
    {
      __break(1u);
      JUMPOUT(0x43FF0);
    }
  }
  _platform_memmove();
  if (v8) {
    deallocate(a1, a2);
  }
  else {
    (*(void (**)(void))(*(void *)(a1 + 200) + 48))();
  }
  return v9;
}

uint64_t pgm_enumerator(unsigned int a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, void (*a6)(void, uint64_t, uint64_t, vm_size_t *))
{
  unsigned int v22 = a1;
  uint64_t v21 = a2;
  int v20 = a3;
  uint64_t v19 = a4;
  uint64_t v18 = a5;
  unint64_t v17 = a6;
  int v16 = a3 & 1;
  int v15 = a3 & 2;
  if ((a3 & 1) != 0 || v15)
  {
    bzero(v24, 0x200uLL);
    unsigned int zone = read_zone(v22, v19, v18, v24, 2);
    if (zone)
    {
      return zone;
    }
    else
    {
      unsigned int v13 = v24;
      for (unsigned int i = 0; i < *((_DWORD *)v13 + 52); ++i)
      {
        if ((*(_DWORD *)(*((void *)v13 + 35) + 8 * i) & 3) == 1)
        {
          if (v15)
          {
            vm_size_t v11 = 0;
            vm_size_t v11 = page_addr((uint64_t)v13, i);
            v10[0] = v11;
            v10[1] = vm_page_size;
            ((void (*)(void, uint64_t, uint64_t, void *, uint64_t))v17)(v22, v21, 2, v10, 1);
          }
          if (v16)
          {
            vm_size_t v9 = 0;
            vm_size_t v9 = block_addr((uint64_t)v13, i);
            uint64_t v8 = 0;
            vm_size_t v7 = v9;
            uint64_t v8 = *(unsigned __int16 *)(*((void *)v13 + 35) + 8 * i + 4);
            v17(v22, v21, 1, &v7);
          }
        }
      }
      return 0;
    }
  }
  else
  {
    return 0;
  }
}

uint64_t pgm_good_size(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0;
  if (*(void *)(*(void *)(a1 + 200) + 96)) {
    uint64_t v3 = *(void *)(*(void *)(a1 + 200) + 96);
  }
  return (*(uint64_t (**)(void, uint64_t))(v3 + 8))(*(void *)(a1 + 200), a2);
}

uint64_t pgm_print(uint64_t a1, int a2)
{
  return print_zone(a1, a2, (void (*)(const char *, ...))malloc_report_simple);
}

uint64_t pgm_force_lock(uint64_t a1)
{
  return lock_0(a1);
}

void pgm_force_unlock(uint64_t a1)
{
}

__n128 pgm_statistics(uint64_t a1, _OWORD *a2)
{
  LODWORD(v3) = *(_DWORD *)(a1 + 16684);
  *((void *)&v3 + 1) = *(void *)(a1 + 16696);
  v4.n128_u64[0] = *(void *)(a1 + 16704);
  v4.n128_u64[1] = v3 * vm_page_size;
  *a2 = v3;
  __n128 result = v4;
  a2[1] = v4;
  return result;
}

BOOL pgm_zone_locked(uint64_t a1)
{
  BOOL v2 = trylock_0(a1);
  if (v2) {
    unlock_0(a1);
  }
  return !v2;
}

uint64_t pgm_reinit_lock(uint64_t a1)
{
  return init_lock_0(a1);
}

uint64_t pgm_print_task(int a1, unsigned int a2, const void *a3, uint64_t a4, uint64_t (*a5)(const char *, ...))
{
  bzero(v11, 0x200uLL);
  if (read_zone(a1, (uint64_t)a3, a4, v11, 2)) {
    return a5("Failed to read ProbGuard zone at %p\n", a3);
  }
  else {
    return print_zone((uint64_t)v11, a2 >= 2, (void (*)(const char *, ...))a5);
  }
}

uint64_t pgm_statistics_task(int a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  bzero(v11, 0x200uLL);
  unsigned int zone = read_zone(a1, a2, a3, v11, 1);
  if (zone)
  {
    return zone;
  }
  else
  {
    pgm_statistics((uint64_t)v11, a4);
    return 0;
  }
}

uint64_t read_zone(int a1, uint64_t a2, uint64_t a3, void *a4, int a5)
{
  int v14 = a1;
  uint64_t v13 = a2;
  __dst = a4;
  int v10 = a5;
  unsigned __int16 v12 = (uint64_t (*)(int, uint64_t, uint64_t, void **))reader_or_in_memory_fallback_3(a3, a1);
  __src = 0;
  unsigned int v8 = v12(v14, v13, 16720, &__src);
  if (v8)
  {
    return v8;
  }
  else
  {
    if (check_zone((uint64_t)__src))
    {
      memcpy(__dst, __src, 0x4150uLL);
      if ((v10 & 2) != 0)
      {
        unsigned int v7 = v12(v14, *((void *)__dst + 35), 8 * *((unsigned int *)__dst + 52), (void **)__dst + 35);
        if (v7) {
          return v7;
        }
        if (!check_slots((uint64_t)__dst)) {
          return 5;
        }
      }
      if ((v10 & 4) != 0)
      {
        unsigned int v6 = v12(v14, *((void *)__dst + 36), (unint64_t)*((unsigned int *)__dst + 54) << 8, (void **)__dst + 36);
        if (v6) {
          return v6;
        }
        if ((check_metadata((uint64_t)__dst) & 1) == 0) {
          return 5;
        }
      }
      return 0;
    }
    return 5;
  }
}

vm_size_t block_addr(uint64_t a1, unsigned int a2)
{
  return page_addr(a1, a2) + *(unsigned __int16 *)(*(void *)(a1 + 280) + 8 * a2 + 6);
}

uint64_t (*reader_or_in_memory_fallback_3(uint64_t a1, int a2))(int a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a1) {
    return (uint64_t (*)(int, uint64_t, uint64_t, void *))a1;
  }
  BOOL v3 = 1;
  if (a2) {
    BOOL v3 = mach_task_is_self() != 0;
  }
  if (!v3)
  {
    __break(1u);
    JUMPOUT(0x44A3CLL);
  }
  return _malloc_default_reader_3;
}

uint64_t _malloc_default_reader_3(int a1, uint64_t a2, uint64_t a3, void *a4)
{
  BOOL v5 = 1;
  if (a1) {
    BOOL v5 = mach_task_is_self() != 0;
  }
  if (!v5)
  {
    __break(1u);
    JUMPOUT(0x44ADCLL);
  }
  *a4 = a2;
  return 0;
}

uint64_t print_zone(uint64_t a1, int a2, void (*a3)(const char *, ...))
{
  uint64_t v14 = a1;
  int v13 = a2;
  unsigned __int16 v12 = a3;
  memset(v11, 0, sizeof(v11));
  __n128 v3 = pgm_statistics(a1, v11);
  v12("ProbGuard zone: slots: %u, slots in use: %u, size in use: %llu, max size in use: %llu, allocated size: %llu\n", v3);
  v12("Quarantine: size: %llu, address range: [%p - %p)\n", *(void *)(v14 + 240), *(const void **)(v14 + 248), *(const void **)(v14 + 256));
  uint64_t result = ((uint64_t (*)(const char *))v12)("Slots (#, state, offset, size, block address):\n");
  for (unsigned int i = 0; i < *(_DWORD *)(v14 + 208); ++i)
  {
    int v9 = *(_DWORD *)(*(void *)(v14 + 280) + 8 * i) & 3;
    if (v9 == 1 || v13)
    {
      unsigned int v8 = slot_state_labels[v9];
      unsigned __int16 v7 = *(_WORD *)(*(void *)(v14 + 280) + 8 * i + 6);
      unsigned __int16 v6 = *(_WORD *)(*(void *)(v14 + 280) + 8 * i + 4);
      BOOL v5 = (const void *)block_addr(v14, i);
      uint64_t result = ((uint64_t (*)(const char *, ...))v12)("%4u, %9s, %4u, %4u, %p\n", i, v8, v7, v6, v5);
    }
  }
  return result;
}

BOOL trylock_0(uint64_t a1)
{
  BOOL v5 = (atomic_uint *)(a1 + 16680);
  if (v1) {
    char v2 = 0;
  }
  else {
    char v2 = 1;
  }
  if (v2)
  {
    int v3 = 0;
    atomic_compare_exchange_strong_explicit(v5, (unsigned int *)&v3, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
    return v3 == 0;
  }
  else
  {
    return os_unfair_lock_trylock((os_unfair_lock_t)v5);
  }
}

uint64_t env_uint_0(const char *a1, unsigned int a2)
{
  __str = env_var_0(a1);
  if (__str) {
    return strtoul(__str, 0, 0);
  }
  else {
    return a2;
  }
}

uint64_t choose_memory_budget_in_kb()
{
  return 2048;
}

uint64_t compute_max_allocations(uint64_t a1)
{
  unsigned int v2 = ((a1 << 10) - ((vm_page_size + 16719) & -(uint64_t)vm_page_size))
     / (unint64_t)((double)vm_page_size + (double)0x50uLL * 20.0 + 80.0 + 768.0);
  if (a1 << 10 < ((vm_page_size + 16719) & -(uint64_t)vm_page_size) || !v2)
  {
    malloc_report(3, (uint64_t)"*** FATAL ERROR - ProbGuard: memory budget too small.\n");
    qword_C0118 = (uint64_t)"FATAL ERROR - ProbGuard: memory budget too small";
    __break(1u);
    JUMPOUT(0x44FACLL);
  }
  return v2;
}

uint64_t choose_sample_rate()
{
  return rand_uniform(0x1194u) + 500;
}

mach_vm_address_t my_vm_map_common(mach_vm_address_t a1, uint64_t a2, vm_prot_t cur_protection, int a4, int a5)
{
  mach_vm_address_t v12 = a1;
  uint64_t v11 = a2;
  vm_prot_t v10 = cur_protection;
  int v9 = a4;
  int v8 = a5;
  mach_port_t v7 = mach_task_self_;
  mach_vm_address_t address = a1;
  if (mach_vm_map(mach_task_self_, &address, (a2 + vm_page_size - 1) & ~(vm_page_size - 1), 0, a4 | (a5 << 24), 0, 0, 0, cur_protection, 3, 1u))
  {
    __break(1u);
    JUMPOUT(0x45140);
  }
  return address;
}

uint64_t memory_reader_adapter_0(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (num_read_memory_0 >= 3)
  {
    __break(1u);
    JUMPOUT(0x4519CLL);
  }
  uint64_t v6 = g_crm_reader_0(a1, a2, a3);
  *a4 = v6;
  if (v6)
  {
    uint64_t v4 = num_read_memory_0++;
    read_memory_0[v4] = v6;
    return 0;
  }
  else
  {
    return 5;
  }
}

uint64_t is_pgm_zone(uint64_t a1, unsigned int a2, uint64_t (*a3)(void, uint64_t, uint64_t, uint64_t *))
{
  uint64_t v9 = a1;
  unsigned int v8 = a2;
  mach_port_t v7 = a3;
  int v6 = 0;
  unsigned int zone_type = get_zone_type(a2, a3, a1, &v6);
  if (zone_type)
  {
    return zone_type;
  }
  else if (v6 == 2)
  {
    return 0;
  }
  else
  {
    return 257;
  }
}

uint64_t diagnose_fault_from_external_process(unint64_t a1, void *a2, int a3, uint64_t a4, uint64_t a5)
{
  bzero(v13, 0x200uLL);
  unsigned int zone = read_zone(a3, a4, a5, v13, 6);
  if (zone) {
    return zone;
  }
  else {
    return diagnose_page_fault((uint64_t)v13, a1, a2);
  }
}

void free_read_memory()
{
  for (unsigned int i = 0; i < num_read_memory_0; ++i)
    _free((void *)read_memory_0[i]);
  num_read_memory_0 = 0;
}

uint64_t diagnose_page_fault(uint64_t a1, unint64_t a2, void *a3)
{
  BOOL v5 = 0;
  if (*(void *)(a1 + 248) <= a2) {
    BOOL v5 = a2 < *(void *)(a1 + 256);
  }
  if (v5)
  {
    uint64_t v7 = lookup_slot((void *)a1, a2);
    if (v7 >= *(_DWORD *)(a1 + 208))
    {
      __break(1u);
      JUMPOUT(0x454FCLL);
    }
    if (*(_DWORD *)(a1 + 216) <= *(_DWORD *)(*(void *)(a1 + 280) + 8 * v7) >> 2)
    {
      __break(1u);
      JUMPOUT(0x4553CLL);
    }
    int v6 = *(_DWORD *)(*(void *)(a1 + 280) + 8 * v7) & 3;
    if (v6 != 1 || (HIDWORD(v7) & 0x7FFFFFFF) == 3)
    {
      if (v6)
      {
        if (v6 == 1)
        {
          if ((HIDWORD(v7) & 0x7FFFFFFF) != 3)
          {
            __break(1u);
            JUMPOUT(0x45640);
          }
          *a3 = "out-of-bounds";
          a3[1] = "high";
        }
        else if ((HIDWORD(v7) & 0x7FFFFFFFu) > 1)
        {
          BOOL v4 = 1;
          if ((HIDWORD(v7) & 0x7FFFFFFF) != 2) {
            BOOL v4 = (HIDWORD(v7) & 0x7FFFFFFF) == 3;
          }
          if (!v4)
          {
            __break(1u);
            JUMPOUT(0x45710);
          }
          *a3 = "OOB + UAF";
          a3[1] = "low";
        }
        else
        {
          *a3 = "use-after-free";
          a3[1] = "high";
        }
      }
      else
      {
        *a3 = "long-range OOB";
        a3[1] = "low";
      }
      a3[2] = a2;
      fill_in_report(a1, v7, (uint64_t)a3);
      return 0;
    }
    else
    {
      malloc_report(547, (uint64_t)"Failed to generate PGM report for fault address %p: slot is unexpectedly allocated with bounds %d\n");
      return 5;
    }
  }
  else
  {
    return 257;
  }
}

uint64_t fill_in_report(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 280) + 8 * a2;
  unint64_t v4 = *(void *)(a1 + 288) + ((unint64_t)(*(_DWORD *)v5 >> 2) << 8);
  uint64_t result = block_addr(a1, a2);
  *(void *)(a3 + 24) = result;
  *(void *)(a3 + 32) = *(unsigned __int16 *)(v5 + 4);
  *(void *)(a3 + 40) = slot_state_labels[*(_DWORD *)v5 & 3];
  *(_DWORD *)(a3 + 48) = 0;
  if (*(_DWORD *)v4 == a2)
  {
    ++*(_DWORD *)(a3 + 48);
    uint64_t result = fill_in_trace(v4 + 4, v4 + 40, a3 + 56);
    if ((*(_DWORD *)v5 & 3) == 2)
    {
      ++*(_DWORD *)(a3 + 48);
      return fill_in_trace(v4 + 22, v4 + 40 + *(unsigned __int16 *)(v4 + 20), a3 + 592);
    }
  }
  return result;
}

uint64_t fill_in_trace(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = *(void *)a1;
  *(void *)(a3 + 8) = *(void *)(a1 + 8);
  uint64_t result = trace_decode(a2, *(unsigned __int16 *)(a1 + 16), a3 + 24, 0x40u);
  *(_DWORD *)(a3 + 16) = result;
  return result;
}

void nanov2_init(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v7 = _simple_getenv();
  int v3 = "MallocNanoMadvisePolicy";
  if (!v7)
  {
    uint64_t v7 = (uint64_t)malloc_common_value_for_key(a3);
    if (v7) {
      int v3 = "nanov2_madvise_policy";
    }
  }
  nanov2_set_madvise_policy((uint64_t)v3, v7);
  unint64_t v4 = "MallocNanoSingleArena";
  unsigned int v8 = (char *)_simple_getenv();
  if (!v8)
  {
    unsigned int v8 = malloc_common_value_for_key_copy(a3, (uint64_t)"nanov2_single_arena", v12, 0x100uLL);
    if (v8) {
      unint64_t v4 = "nanov2_single_arena";
    }
  }
  nanov2_set_single_arena_size_classes((uint64_t)v4, v8);
  uint64_t v5 = "MallocNanoScanPolicy";
  uint64_t v9 = (char *)_simple_getenv();
  if (!v9)
  {
    uint64_t v9 = malloc_common_value_for_key_copy(a3, (uint64_t)"nanov2_scan_policy", v12, 0x100uLL);
    if (v9) {
      uint64_t v5 = "nanov2_scan_policy";
    }
  }
  nanov2_set_block_scan_policy((uint64_t)v5, v9);
  int v6 = "MallocNanoSizeClassBlocks";
  vm_prot_t v10 = (char *)_simple_getenv();
  if (!v10)
  {
    vm_prot_t v10 = malloc_common_value_for_key_copy(a3, (uint64_t)"nanov2_size_class_blocks", v12, 0x100uLL);
    if (v10) {
      int v6 = "nanov2_size_class_blocks";
    }
  }
  if (v10) {
    nanov2_set_blocks_by_size_class((uint64_t)v6, v10);
  }
}

void nanov2_set_madvise_policy(uint64_t a1, uint64_t a2)
{
  int v2 = 0;
  if (a2)
  {
    if (_platform_strncmp())
    {
      if (_platform_strncmp())
      {
        if (_platform_strncmp()) {
          malloc_report(3, (uint64_t)"%s value (%s) invalid - ignored.\n");
        }
        else {
          int v2 = 2;
        }
      }
      else
      {
        int v2 = 1;
      }
    }
    else
    {
      int v2 = 0;
    }
  }
  nanov2_madvise_policy = v2;
}

void nanov2_set_single_arena_size_classes(uint64_t a1, char *a2)
{
  uint64_t v7 = a1;
  int v6 = a2;
  __int16 v5 = 0;
  if (a2)
  {
    v4[1] = v6;
    v4[0] = 0;
    int v3 = 0;
    while (*v6)
    {
      uint64_t v2 = malloc_common_convert_to_long(v6, v4);
      if ((char *)v4[0] == v6)
      {
        int v3 = 1;
        break;
      }
      if (*(unsigned char *)v4[0] && *(unsigned char *)v4[0] != 58)
      {
        int v3 = 1;
        break;
      }
      if (v2 > 256 || v2 < 16 || v2 % 16)
      {
        int v3 = 1;
        break;
      }
      v5 |= 1 << (v2 / 16 - 1);
      if (!*(unsigned char *)v4[0]) {
        break;
      }
      int v6 = (char *)(v4[0] + 1);
    }
    if (v3)
    {
      malloc_report(3, (uint64_t)"%s value (%s) invalid - ignored.\n");
      __int16 v5 = 0;
    }
  }
  word_C0040 = v5;
}

void nanov2_set_block_scan_policy(uint64_t a1, char *a2)
{
  uint64_t v16 = a1;
  int v15 = a2;
  int v14 = 1;
  int v13 = 20;
  int v12 = 80;
  int v11 = 10;
  vm_prot_t v10 = 0;
  BOOL v9 = 0;
  int v8 = 0;
  int v7 = 0;
  int v6 = 0;
  if (a2)
  {
    if (_platform_strcmp())
    {
      while (1)
      {
        BOOL v2 = 0;
        if (!v9)
        {
          BOOL v2 = 0;
          if (v15) {
            BOOL v2 = *v15 != 0;
          }
        }
        if (!v2) {
          break;
        }
        if (_platform_strncmp() || v8)
        {
          if (_platform_strncmp() || v7)
          {
            if (_platform_strncmp() || v6)
            {
              BOOL v9 = 1;
            }
            else
            {
              int v6 = 1;
              v15 += 3;
              uint64_t v3 = malloc_common_convert_to_long(v15, &v10);
              if (v15 == v10 || v3 < 0)
              {
                BOOL v9 = 1;
              }
              else
              {
                int v11 = v3;
                int v15 = v10;
              }
            }
          }
          else
          {
            int v7 = 1;
            v15 += 3;
            unint64_t v4 = malloc_common_convert_to_long(v15, &v10);
            if (v15 == v10 || v4 > 0x64)
            {
              BOOL v9 = 1;
            }
            else
            {
              int v12 = v4;
              int v15 = v10;
            }
          }
        }
        else
        {
          int v8 = 1;
          v15 += 3;
          unint64_t v5 = malloc_common_convert_to_long(v15, &v10);
          if (v15 == v10 || v5 > 0x64)
          {
            BOOL v9 = 1;
          }
          else
          {
            int v13 = v5;
            int v15 = v10;
          }
        }
        if (*v15)
        {
          if (*v15 == 58) {
            ++v15;
          }
          else {
            BOOL v9 = 1;
          }
        }
      }
      if (!v9) {
        BOOL v9 = v13 > v12;
      }
    }
    else
    {
      int v14 = 0;
    }
  }
  if (v9)
  {
    malloc_report(3, (uint64_t)"%s value (%s) invalid - ignored.\n");
  }
  else
  {
    nanov2_policy_config = v14;
    dword_C0034 = v13;
    dword_C0038 = v12;
    dword_C003C = v11;
  }
}

void nanov2_set_blocks_by_size_class(uint64_t a1, char *a2)
{
  uint64_t v8 = a1;
  int v7 = a2;
  int v6 = 0;
  unint64_t v5 = 0;
  for (int i = 0; i < 16; ++i)
  {
    int v2 = malloc_common_convert_to_long(v7, &v5);
    char v3 = 0;
    if (i != 15) {
      char v3 = 44;
    }
    if (v5 == v7 || *v5 != v3 || v2 > 64)
    {
      malloc_report(3, (uint64_t)"%s value invalid: [%s] - ignored.\n");
      return;
    }
    v9[i] = v2;
    v6 += v2;
    int v7 = v5 + 1;
  }
  if (v6 == 64) {
    _platform_memmove();
  }
  else {
    malloc_report(3, (uint64_t)"%s value invalid - values must sum to %d, not %d - ignored.\n");
  }
}

uint64_t nanov2_configure()
{
  if (nanov2_config_predicate != -1) {
    return _os_once();
  }
  return result;
}

void nanov2_configure_once()
{
  int v8 = 0;
  for (int i = 0; i < 16; ++i)
    v8 += block_units_by_size_class[i] << 6;
  if (v8 != 4096)
  {
    __break(1u);
    JUMPOUT(0x4660CLL);
  }
  first_block_offset_by_size_class[0] = 1;
  int v6 = block_units_by_size_class[0] << 6;
  last_block_offset_by_size_class[0] = (block_units_by_size_class[0] << 6) - 1;
  for (int j = 1; j < 16; ++j)
  {
    first_block_offset_by_size_class[j] = v6;
    v6 += block_units_by_size_class[j] << 6;
    last_block_offset_by_size_class[j] = v6 - 1;
  }
  if (v6 != 4096)
  {
    __break(1u);
    JUMPOUT(0x466E8);
  }
  int v4 = 0;
  for (int k = 0; k < 16; ++k)
  {
    int v2 = block_units_by_size_class[k];
    for (int m = 0; m < v2; ++m)
    {
      uint64_t v0 = v4++;
      ptr_offset_to_size_class[v0] = k;
    }
  }
  if (v4 != 64)
  {
    __break(1u);
    JUMPOUT(0x467BCLL);
  }
}

uint64_t nanov2_size(void *a1, unint64_t a2)
{
  if (a2 >> 29 == 24)
  {
    if ((a2 & 0xF) != 0)
    {
      uint64_t v7 = 0;
    }
    else if (a2 >= a1[3590] && a2 <= a1[3591])
    {
      int v6 = ptr_offset_to_size_class[((a2 >> 14) & 0xFFF ^ a1[3585]) >> 6];
      unsigned int v5 = *(_DWORD *)((a2 & 0xFFFFFFFFFC000000 ^ a1[3586])
                     + 4 * (((unsigned __int16)(((a2 >> 14) & 0xFFF) << 6) | (((a2 >> 14) & 0xFFF) >> 6)) & 0xFFF));
      BOOL v4 = 0;
      if ((v5 & 0x7FF) != 0)
      {
        BOOL v4 = 0;
        if ((*(_DWORD *)((a2 & 0xFFFFFFFFFC000000 ^ a1[3586])
                        + 4 * (((unsigned __int16)(((a2 >> 14) & 0xFFF) << 6) | (((a2 >> 14) & 0xFFF) >> 6)) & 0xFFF)) & 0x7FF) != 0x7FE)
        {
          BOOL v4 = 0;
          if ((*(_DWORD *)((a2 & 0xFFFFFFFFFC000000 ^ a1[3586])
                          + 4 * (((unsigned __int16)(((a2 >> 14) & 0xFFF) << 6) | (((a2 >> 14) & 0xFFF) >> 6)) & 0xFFF)) & 0x7FF) != 0x7FF)
            BOOL v4 = (*(_DWORD *)((a2 & 0xFFFFFFFFFC000000 ^ a1[3586])
                            + 4
                            * (((unsigned __int16)(((a2 >> 14) & 0xFFF) << 6) | (((a2 >> 14) & 0xFFF) >> 6)) & 0xFFF)) & 0x7FF) != 2042;
        }
      }
      if (v4
        && ((*(_DWORD *)((a2 & 0xFFFFFFFFFC000000 ^ a1[3586])
                       + 4 * (((unsigned __int16)(((a2 >> 14) & 0xFFF) << 6) | (((a2 >> 14) & 0xFFF) >> 6)) & 0xFFF)) & 0x7FF) == 0x7FC
         || ((v5 >> 11) & 0x3FF) != slots_by_size_class[v6] - 1))
      {
        if ((a2 & 0x3FFF) % (16 * (v6 + 1)))
        {
          uint64_t v7 = 0;
        }
        else if ((*(void *)a2 ^ a1[3587]) == a2)
        {
          uint64_t v7 = 0;
        }
        else
        {
          uint64_t v7 = 16 * (v6 + 1);
        }
      }
      else
      {
        uint64_t v7 = 0;
      }
    }
    else
    {
      uint64_t v7 = 0;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  if (v7) {
    return v7;
  }
  else {
    return (*(uint64_t (**)(void, unint64_t))(a1[3588] + 16))(a1[3588], a2);
  }
}

void *nanov2_malloc(uint64_t a1, unint64_t a2)
{
  unint64_t v9 = _nano_common_good_size(a2);
  if (v9 > 0x100) {
    return (void *)(*(uint64_t (**)(void, unint64_t))(*(void *)(a1 + 28704) + 24))(*(void *)(a1 + 28704), a2);
  }
  uint64_t v27 = a1;
  unint64_t v26 = v9;
  char v25 = 0;
  char v24 = 0;
  uint64_t v23 = 0;
  unsigned int v22 = 0;
  unsigned int v21 = 0;
  unint64_t v29 = v9;
  if (v9 % 0x10) {
    unint64_t v8 = v29 / 0x10 + 1;
  }
  else {
    unint64_t v8 = v29 / 0x10;
  }
  unsigned int v21 = v8 - 1;
  int v20 = 0;
  if (nano_common_max_magazines_is_ncpu)
  {
    int v33 = _malloc_cpu_number() & 0x3F;
  }
  else
  {
    int v32 = 0;
    if (_os_cpu_number_override == -1) {
      int v33 = ((_malloc_cpu_number() >> v32) % nano_common_max_magazines) & 0x3F;
    }
    else {
      int v33 = ((_os_cpu_number_override >> v32) % nano_common_max_magazines) & 0x3F;
    }
  }
  int v20 = v33;
  uint64_t v19 = (atomic_uint **)(v27 + 0x4000 + ((unint64_t)v21 << 9) + 8 * v33);
  uint64_t v18 = 0;
  unint64_t v17 = 0;
  uint64_t v16 = *v19;
  unint64_t v17 = v16;
  int v15 = v16;
  uint64_t v18 = v16;
  char v14 = 0;
  uint64_t v13 = 0;
  if (!v16) {
    return nanov2_allocate_outlined(v27, v19, v26, v21, v20, v22, v13, v25 & 1, v24 & 1, v23);
  }
  uint64_t v59 = v27;
  uint64_t v58 = v18;
  unsigned int v57 = v21;
  unint64_t v56 = &v22;
  char v55 = &v14;
  unsigned int v54 = 0;
  unsigned int v53 = 0;
  unsigned int v52 = *(_DWORD *)v18;
  unsigned int v53 = v52;
  unsigned int v54 = v52;
  unint64_t v51 = 0;
  while (1)
  {
    unsigned int v61 = v54;
    BOOL v7 = 0;
    if ((v54 & 0x80000000) != 0) {
      BOOL v7 = (v61 & 0x7FF) != 2044;
    }
    if (!v7)
    {
      uint64_t v60 = 0;
      goto LABEL_44;
    }
    int v50 = 0;
    uint64_t v49 = 0;
    int v48 = 0;
    unsigned int v47 = (((((v54 >> 11) & 0x3FF) - 1) & 0x3FF) << 11) & 0x1FFFFF | (((((v54 >> 21) & 0x3FF) + 1) & 0x3FF) << 21) & 0x7FFFFFFF | 0x80000000;
    BOOL v46 = ((v54 >> 11) & 0x3FF) == 0;
    if ((v54 & 0x7FF) == 0x7FB || (v54 & 0x7FF) == 0x7FD)
    {
      int v2 = v46 ? 2044 : 2043;
      unsigned int v47 = v47 & 0xFFFFF800 | v2;
      int v50 = slots_by_size_class[v57] - ((v54 >> 11) & 0x3FF) - 1;
    }
    else
    {
      int v48 = 1;
      if (!v51)
      {
        uint64_t v74 = v59;
        unint64_t v73 = v58;
        uint64_t v82 = v58;
        unint64_t v72 = (unint64_t)v58 & 0xFFFFFFFFFFFFC000;
        uint64_t v75 = v58;
        unint64_t v71 = (unint64_t)v58 & 0xFFFFFFFFFC000000;
        unsigned int v70 = (uint64_t)((uint64_t)v58 - ((unint64_t)v58 & 0xFFFFFFFFFFFFC000)) / 4;
        unsigned int v84 = v70;
        int v69 = ((unsigned __int16)((_WORD)v84 << 6) | (unsigned __int16)(v84 >> 6)) & 0xFFF;
        unint64_t v51 = ((unint64_t)v58 & 0xFFFFFFFFFC000000)
            + ((unint64_t)(((unsigned __int16)((_WORD)v84 << 6) | (unsigned __int16)(v84 >> 6)) & 0xFFF) << 14);
      }
      int v50 = (v54 & 0x7FF) - 1;
      unint64_t v81 = v51;
      unsigned int v80 = v57;
      int v79 = v50;
      unsigned int v86 = v57;
      uint64_t v49 = (void *)(v51 + (int)(16 * (v57 + 1) * v50));
      BOOL v45 = v49;
      __int16 v6 = v46 ? 2044 : v45[1];
      unsigned int v47 = v47 & 0xFFFFF800 | v6 & 0x7FF;
    }
    unsigned int v44 = v54;
    BOOL v43 = 0;
    unsigned int v41 = v47;
    unsigned int v42 = v47;
    unsigned int v3 = v54;
    unsigned int v4 = v54;
    atomic_compare_exchange_strong_explicit(v58, &v4, v47, memory_order_relaxed, memory_order_relaxed);
    if (v4 != v3) {
      unsigned int v44 = v4;
    }
    BOOL v40 = v4 == v3;
    BOOL v43 = v4 == v3;
    unsigned int v54 = v44;
    BOOL v39 = v43;
    if (v4 == v3) {
      break;
    }
    if ((v54 & 0x7FF) == 0x7FD || (v54 & 0x7FF) == 0x7FE || (v54 & 0x7FF) == 0x7FF)
    {
      *unint64_t v56 = v58;
      uint64_t v60 = 0;
      goto LABEL_44;
    }
  }
  if (!v49)
  {
    if (!v51)
    {
      uint64_t v67 = v59;
      uint64_t v66 = v58;
      unint64_t v83 = v58;
      unint64_t v65 = (unint64_t)v58 & 0xFFFFFFFFFFFFC000;
      char v68 = v58;
      unint64_t v64 = (unint64_t)v58 & 0xFFFFFFFFFC000000;
      unsigned int v63 = (uint64_t)((uint64_t)v58 - ((unint64_t)v58 & 0xFFFFFFFFFFFFC000)) / 4;
      unsigned int v85 = v63;
      int v62 = ((unsigned __int16)((_WORD)v85 << 6) | (unsigned __int16)(v85 >> 6)) & 0xFFF;
      unint64_t v51 = ((unint64_t)v58 & 0xFFFFFFFFFC000000)
          + ((unint64_t)(((unsigned __int16)((_WORD)v85 << 6) | (unsigned __int16)(v85 >> 6)) & 0xFFF) << 14);
    }
    unint64_t v78 = v51;
    unsigned int v77 = v57;
    int v76 = v50;
    unsigned int v87 = v57;
    uint64_t v49 = (void *)(v51 + (int)(16 * (v57 + 1) * v50));
  }
  if (v48)
  {
    uint64_t v38 = v49;
    uint64_t v37 = 0;
    uint64_t v36 = 0;
    uint64_t v35 = *v49;
    uint64_t v36 = v35;
    uint64_t v34 = v35;
    uint64_t v37 = v35;
    if ((void *)(v35 ^ *(void *)(v59 + 28696)) != v49) {
      *char v55 = 1;
    }
  }
  uint64_t v60 = v49;
LABEL_44:
  uint64_t v13 = (uint64_t)v60;
  if (!v60 || (v14 & 1) != 0) {
    return nanov2_allocate_outlined(v27, v19, v26, v21, v20, v22, v13, v25 & 1, v24 & 1, v23);
  }
  if ((v25 & 1) != 0 && malloc_zero_policy)
  {
    unsigned int v31 = v60;
    uint64_t v30 = v26;
    _platform_bzero();
  }
  else
  {
    *uint64_t v60 = 0;
    *(void *)(v13 + 8) = 0;
  }
  return (void *)v13;
}

unint64_t _nano_common_good_size(unint64_t a1)
{
  if (a1 > 0x10) {
    return 16 * ((a1 + 15) >> 4);
  }
  else {
    return 16;
  }
}

void *nanov2_malloc_type(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v10 = _nano_common_good_size(a2);
  if (v10 > 0x100) {
    return (void *)(*(uint64_t (**)(void, unint64_t, uint64_t))(*(void *)(a1 + 28704) + 160))(*(void *)(a1 + 28704), a2, a3);
  }
  uint64_t v29 = a1;
  unint64_t v28 = v10;
  char v27 = 0;
  char v26 = 1;
  uint64_t v25 = a3;
  char v24 = 0;
  unsigned int v23 = 0;
  unint64_t v31 = v10;
  if (v10 % 0x10) {
    unint64_t v9 = v31 / 0x10 + 1;
  }
  else {
    unint64_t v9 = v31 / 0x10;
  }
  unsigned int v23 = v9 - 1;
  int v22 = 0;
  if (nano_common_max_magazines_is_ncpu)
  {
    int v35 = _malloc_cpu_number() & 0x3F;
  }
  else
  {
    int v34 = 0;
    if (_os_cpu_number_override == -1) {
      int v35 = ((_malloc_cpu_number() >> v34) % nano_common_max_magazines) & 0x3F;
    }
    else {
      int v35 = ((_os_cpu_number_override >> v34) % nano_common_max_magazines) & 0x3F;
    }
  }
  int v22 = v35;
  unsigned int v21 = (atomic_uint **)(v29 + 0x4000 + ((unint64_t)v23 << 9) + 8 * v35);
  int v20 = 0;
  uint64_t v19 = 0;
  uint64_t v18 = *v21;
  uint64_t v19 = v18;
  unint64_t v17 = v18;
  int v20 = v18;
  char v16 = 0;
  uint64_t v15 = 0;
  if (!v18) {
    return nanov2_allocate_outlined(v29, v21, v28, v23, v22, v24, v15, v27 & 1, v26 & 1, v25);
  }
  uint64_t v61 = v29;
  uint64_t v60 = v20;
  unsigned int v59 = v23;
  uint64_t v58 = &v24;
  unsigned int v57 = &v16;
  unsigned int v56 = 0;
  unsigned int v55 = 0;
  unsigned int v54 = *(_DWORD *)v20;
  unsigned int v55 = v54;
  unsigned int v56 = v54;
  unint64_t v53 = 0;
  while (1)
  {
    unsigned int v63 = v56;
    BOOL v8 = 0;
    if ((v56 & 0x80000000) != 0) {
      BOOL v8 = (v63 & 0x7FF) != 2044;
    }
    if (!v8)
    {
      int v62 = 0;
      goto LABEL_44;
    }
    int v52 = 0;
    unint64_t v51 = 0;
    int v50 = 0;
    unsigned int v49 = (((((v56 >> 11) & 0x3FF) - 1) & 0x3FF) << 11) & 0x1FFFFF | (((((v56 >> 21) & 0x3FF) + 1) & 0x3FF) << 21) & 0x7FFFFFFF | 0x80000000;
    BOOL v48 = ((v56 >> 11) & 0x3FF) == 0;
    if ((v56 & 0x7FF) == 0x7FB || (v56 & 0x7FF) == 0x7FD)
    {
      int v3 = v48 ? 2044 : 2043;
      unsigned int v49 = v49 & 0xFFFFF800 | v3;
      int v52 = slots_by_size_class[v59] - ((v56 >> 11) & 0x3FF) - 1;
    }
    else
    {
      int v50 = 1;
      if (!v53)
      {
        uint64_t v76 = v61;
        uint64_t v75 = v60;
        unsigned int v84 = v60;
        unint64_t v74 = (unint64_t)v60 & 0xFFFFFFFFFFFFC000;
        unsigned int v77 = v60;
        unint64_t v73 = (unint64_t)v60 & 0xFFFFFFFFFC000000;
        unsigned int v72 = (uint64_t)((uint64_t)v60 - ((unint64_t)v60 & 0xFFFFFFFFFFFFC000)) / 4;
        unsigned int v86 = v72;
        int v71 = ((unsigned __int16)((_WORD)v86 << 6) | (unsigned __int16)(v86 >> 6)) & 0xFFF;
        unint64_t v53 = ((unint64_t)v60 & 0xFFFFFFFFFC000000)
            + ((unint64_t)(((unsigned __int16)((_WORD)v86 << 6) | (unsigned __int16)(v86 >> 6)) & 0xFFF) << 14);
      }
      int v52 = (v56 & 0x7FF) - 1;
      unint64_t v83 = v53;
      unsigned int v82 = v59;
      int v81 = v52;
      unsigned int v88 = v59;
      unint64_t v51 = (void *)(v53 + (int)(16 * (v59 + 1) * v52));
      unsigned int v47 = v51;
      __int16 v7 = v48 ? 2044 : v47[1];
      unsigned int v49 = v49 & 0xFFFFF800 | v7 & 0x7FF;
    }
    unsigned int v46 = v56;
    BOOL v45 = 0;
    unsigned int v43 = v49;
    unsigned int v44 = v49;
    unsigned int v4 = v56;
    unsigned int v5 = v56;
    atomic_compare_exchange_strong_explicit(v60, &v5, v49, memory_order_relaxed, memory_order_relaxed);
    if (v5 != v4) {
      unsigned int v46 = v5;
    }
    BOOL v42 = v5 == v4;
    BOOL v45 = v5 == v4;
    unsigned int v56 = v46;
    BOOL v41 = v45;
    if (v5 == v4) {
      break;
    }
    if ((v56 & 0x7FF) == 0x7FD || (v56 & 0x7FF) == 0x7FE || (v56 & 0x7FF) == 0x7FF)
    {
      *uint64_t v58 = v60;
      int v62 = 0;
      goto LABEL_44;
    }
  }
  if (!v51)
  {
    if (!v53)
    {
      uint64_t v69 = v61;
      char v68 = v60;
      unsigned int v85 = v60;
      unint64_t v67 = (unint64_t)v60 & 0xFFFFFFFFFFFFC000;
      unsigned int v70 = v60;
      unint64_t v66 = (unint64_t)v60 & 0xFFFFFFFFFC000000;
      unsigned int v65 = (uint64_t)((uint64_t)v60 - ((unint64_t)v60 & 0xFFFFFFFFFFFFC000)) / 4;
      unsigned int v87 = v65;
      int v64 = ((unsigned __int16)((_WORD)v87 << 6) | (unsigned __int16)(v87 >> 6)) & 0xFFF;
      unint64_t v53 = ((unint64_t)v60 & 0xFFFFFFFFFC000000)
          + ((unint64_t)(((unsigned __int16)((_WORD)v87 << 6) | (unsigned __int16)(v87 >> 6)) & 0xFFF) << 14);
    }
    unint64_t v80 = v53;
    unsigned int v79 = v59;
    int v78 = v52;
    unsigned int v89 = v59;
    unint64_t v51 = (void *)(v53 + (int)(16 * (v59 + 1) * v52));
  }
  if (v50)
  {
    BOOL v40 = v51;
    uint64_t v39 = 0;
    uint64_t v38 = 0;
    uint64_t v37 = *v51;
    uint64_t v38 = v37;
    uint64_t v36 = v37;
    uint64_t v39 = v37;
    if ((void *)(v37 ^ *(void *)(v61 + 28696)) != v51) {
      *unsigned int v57 = 1;
    }
  }
  int v62 = v51;
LABEL_44:
  uint64_t v15 = (uint64_t)v62;
  if (!v62 || (v16 & 1) != 0) {
    return nanov2_allocate_outlined(v29, v21, v28, v23, v22, v24, v15, v27 & 1, v26 & 1, v25);
  }
  if ((v27 & 1) != 0 && malloc_zero_policy)
  {
    int v33 = v62;
    uint64_t v32 = v28;
    _platform_bzero();
  }
  else
  {
    *int v62 = 0;
    *(void *)(v15 + 8) = 0;
  }
  return (void *)v15;
}

void nanov2_free_definite_size(uint64_t a1, unint64_t *a2, unint64_t a3)
{
  if (a2 && (unint64_t)a2 >> 29 == 24)
  {
    if (a3 % 0x10) {
      unint64_t v10 = a3 / 0x10 + 1;
    }
    else {
      unint64_t v10 = a3 / 0x10;
    }
    int v11 = v10 - 1;
    if (!malloc_zero_policy && v10 != 1) {
      _platform_bzero();
    }
    int v20 = (atomic_uint *)(((unint64_t)a2 & 0xFFFFFFFFFC000000 ^ *(void *)(a1 + 28688))
                        + 4
                        * (((unsigned __int16)((((unint64_t)a2 >> 14) & 0xFFF) << 6) | ((((unint64_t)a2 >> 14) & 0xFFF) >> 6)) & 0xFFF));
    int v19 = *(_DWORD *)v20;
    int v18 = slots_by_size_class[v11];
    LOWORD(v16) = 0;
    *a2 = *(void *)(a1 + 28696) ^ (unint64_t)a2;
    do
    {
      while (1)
      {
        int v17 = v16 & 0x7FF | (((((v19 >> 11) & 0x3FF) + 1) & 0x3FF) << 11) & 0x1FFFFF | ((v19 < 0) << 31) | (((((v19 >> 21) & 0x3FF) + 1) & 0x3FF) << 21);
        BOOL v9 = 0;
        if ((v19 & 0x7FF) != 0x7FC) {
          BOOL v9 = ((v17 >> 11) & 0x3FF) == slots_by_size_class[v11] - 1;
        }
        if (v9) {
          break;
        }
        int v16 = v17 & 0xFFFFF800 | ((unsigned __int16)((int)(a2 - (a2 & 0xFFFFC000))
                                                   / (16
                                                    * (int)v10))
                                + 1) & 0x7FF;
        if ((v19 & 0x7FF) == 0x7FC) {
          int v8 = 2043;
        }
        else {
          int v8 = v19 & 0x7FF;
        }
        a2[1] = v8;
        int v14 = v19;
        int v6 = v19;
        int v7 = v19;
        atomic_compare_exchange_strong_explicit(v20, (unsigned int *)&v7, v16, memory_order_release, memory_order_relaxed);
        if (v7 != v6) {
          int v14 = v7;
        }
        int v19 = v14;
        if (v7 == v6) {
          goto LABEL_29;
        }
      }
      a2[1] = 0;
      if (v17 >= 0) {
        int v3 = 2045;
      }
      else {
        int v3 = 2043;
      }
      int v16 = v17 & 0xFFFFF800 | v3;
      int v15 = v19;
      int v4 = v19;
      int v5 = v19;
      atomic_compare_exchange_strong_explicit(v20, (unsigned int *)&v5, v16, memory_order_release, memory_order_relaxed);
      if (v5 != v4) {
        int v15 = v5;
      }
      int v19 = v15;
    }
    while (v5 != v4);
    if ((v16 & 0x7FF) == 0x7FD && !nanov2_madvise_policy)
    {
      unsigned int v21 = v20;
      goto LABEL_34;
    }
LABEL_29:
    if (v16 >= 0
      && (*(_WORD *)(a1 + 28672) & (unsigned __int16)(1 << v11)) != 0
      && (double)((v16 >> 11) & 0x3FF) >= 0.75 * (double)v18)
    {
      atomic_fetch_and_explicit((atomic_ushort *volatile)(a1 + 28672), ~(unsigned __int16)(1 << v11), memory_order_relaxed);
    }
    unsigned int v21 = 0;
LABEL_34:
    if (v21) {
      nanov2_madvise_block(a1, v21, v11, 2045);
    }
  }
  else
  {
    (*(void (**)(void, unint64_t *, unint64_t))(*(void *)(a1 + 28704) + 120))(*(void *)(a1 + 28704), a2, a3);
  }
}

void nanov2_madvise_block(uint64_t a1, atomic_uint *a2, int a3, int a4)
{
  unint64_t v7 = ((unint64_t)a2 & 0xFFFFFFFFFC000000)
     + ((unint64_t)(((unsigned __int16)((unsigned __int16)((uint64_t)((uint64_t)a2
                                                                          - ((unint64_t)a2 & 0xFFFFFFFFFFFFC000))
                                                                / 4) << 6) | (unsigned __int16)(((uint64_t)((uint64_t)a2 - ((unint64_t)a2 & 0xFFFFFFFFFFFFC000)) / 4) >> 6)) & 0xFFF) << 14);
  if (a2 == (atomic_uint *)((unint64_t)a2 & 0xFFFFFFFFFFFFC000)
    || (int v4 = 0,
        atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 28736), (unsigned int *)&v4, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire), v4))
  {
    os_unfair_lock_lock_with_options();
  }
  nanov2_madvise_block_locked((os_unfair_lock_s *)a1, a2, v7, a3, a4);
  int v5 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  int v6 = v5;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 28736), (unsigned int *)&v6, 0, memory_order_release, memory_order_relaxed);
  if (v6 != v5) {
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 28736));
  }
}

void nanov2_free(uint64_t a1, void *a2)
{
}

void _nanov2_free(uint64_t a1, void *a2, char a3)
{
  int v15 = (void *)a1;
  unint64_t v14 = (unint64_t)a2;
  char v13 = a3 & 1;
  if (!a2) {
    goto LABEL_60;
  }
  int v12 = 0;
  int v11 = 0;
  uint64_t v36 = v15;
  unint64_t v35 = v14;
  int v34 = 0;
  int v33 = &v12;
  uint64_t v32 = &v11;
  unint64_t v38 = v14;
  if (v14 >> 29 == 24)
  {
    if ((v35 & 0xF) != 0)
    {
      unint64_t v37 = 0;
    }
    else
    {
      unint64_t v31 = 0;
      unint64_t v30 = 0;
      unint64_t v29 = v36[3591];
      unint64_t v30 = v29;
      unint64_t v28 = v29;
      unint64_t v31 = v29;
      if (v35 >= v36[3590] && v35 <= v31)
      {
        int v27 = 0;
        int v90 = v36;
        unint64_t v89 = v35;
        unsigned int v88 = 0;
        unint64_t v93 = v35;
        unsigned int v88 = (v35 >> 14) & 0xFFF ^ v36[3585];
        int v27 = ptr_offset_to_size_class[v88 >> 6];
        char v26 = 0;
        int v110 = v36;
        unint64_t v109 = v35;
        unint64_t v108 = 0;
        BOOL v112 = v36;
        unint64_t v111 = v35;
        unint64_t v113 = v35;
        int v116 = v36;
        unint64_t v115 = v35 & 0xFFFFFFFFFC000000;
        unint64_t v108 = v35 & 0xFFFFFFFFFC000000 ^ v36[3586];
        unint64_t v117 = v35;
        unsigned int v107 = (v35 >> 14) & 0xFFF;
        unsigned int v114 = v107;
        int v106 = ((unsigned __int16)((_WORD)v114 << 6) | (unsigned __int16)(v114 >> 6)) & 0xFFF;
        char v26 = (atomic_uint *)(v108
                            + 4 * (((unsigned __int16)((_WORD)v114 << 6) | (unsigned __int16)(v114 >> 6)) & 0xFFF));
        unsigned int v25 = 0;
        unsigned int v24 = 0;
        unsigned int v23 = *(_DWORD *)v26;
        unsigned int v24 = v23;
        unsigned int v25 = v23;
        unsigned int v118 = v23;
        BOOL v10 = 0;
        if ((v23 & 0x7FF) != 0)
        {
          BOOL v10 = 0;
          if ((v118 & 0x7FF) != 0x7FE)
          {
            BOOL v10 = 0;
            if ((v118 & 0x7FF) != 0x7FF) {
              BOOL v10 = (v118 & 0x7FF) != 2042;
            }
          }
        }
        if (v10 && ((v25 & 0x7FF) == 0x7FC || ((v25 >> 11) & 0x3FF) != slots_by_size_class[v27] - 1))
        {
          int v92 = v27;
          unint64_t v22 = 16 * (v27 + 1);
          unint64_t v21 = v35;
          if ((v35 & 0x3FFF) % v22)
          {
            unint64_t v37 = 0;
          }
          else
          {
            unint64_t v20 = v35;
            uint64_t v19 = 0;
            uint64_t v18 = 0;
            uint64_t v17 = *(void *)v35;
            uint64_t v18 = v17;
            uint64_t v16 = v17;
            uint64_t v19 = v17;
            if ((v17 ^ v36[3587]) == v35)
            {
              unint64_t v37 = 0;
            }
            else
            {
              if (v33) {
                *int v33 = v27;
              }
              if (v32) {
                *uint64_t v32 = v26;
              }
              unint64_t v37 = v22;
            }
          }
        }
        else
        {
          unint64_t v37 = 0;
        }
      }
      else
      {
        unint64_t v37 = 0;
      }
    }
  }
  else
  {
    unint64_t v37 = 0;
  }
  if (v37)
  {
    if (!malloc_zero_policy && v37 > 0x10)
    {
      BOOL v40 = (void *)(v14 + 16);
      unint64_t v39 = v37 - 16;
      _platform_bzero();
    }
    uint64_t v86 = (uint64_t)v15;
    unint64_t v85 = v14;
    int v84 = v12;
    unint64_t v83 = v11;
    unint64_t v91 = v14;
    unint64_t v82 = v14 & 0xFFFFFFFFFFFFC000;
    if (!v11)
    {
      uint64_t v98 = v86;
      unint64_t v97 = v85;
      unint64_t v96 = 0;
      uint64_t v100 = v86;
      unint64_t v99 = v85;
      unint64_t v101 = v85;
      uint64_t v104 = v86;
      unint64_t v103 = v85 & 0xFFFFFFFFFC000000;
      unint64_t v96 = v85 & 0xFFFFFFFFFC000000 ^ *(void *)(v86 + 28688);
      unint64_t v105 = v85;
      unsigned int v95 = (v85 >> 14) & 0xFFF;
      unsigned int v102 = v95;
      int v94 = ((unsigned __int16)((_WORD)v102 << 6) | (unsigned __int16)(v102 >> 6)) & 0xFFF;
      unint64_t v83 = (atomic_uint *)(v96 + 4 * (((unsigned __int16)((_WORD)v102 << 6) | (unsigned __int16)(v102 >> 6)) & 0xFFF));
    }
    int v81 = 0;
    int v80 = 0;
    int v79 = *(_DWORD *)v83;
    int v80 = v79;
    int v81 = v79;
    int v78 = 0;
    int v78 = slots_by_size_class[v84];
    int v77 = 0;
    BOOL v76 = 0;
    unint64_t v75 = v85;
    unint64_t v74 = 0;
    unint64_t v74 = *(void *)(v86 + 28696) ^ v85;
    unint64_t v73 = v74;
    *(void *)unint64_t v85 = v74;
    unint64_t v72 = v74;
    do
    {
      while (1)
      {
        BOOL v76 = (v81 & 0x7FF) == 2044;
        int v77 = v77 & 0xFFE007FF | (((((v81 >> 11) & 0x3FF) + 1) & 0x3FF) << 11);
        int v77 = v77 & 0x7FFFFFFF | ((v81 < 0) << 31);
        int v77 = v77 & 0x801FFFFF | (((((v81 >> 21) & 0x3FF) + 1) & 0x3FF) << 21);
        int v71 = 0;
        BOOL v9 = 0;
        if ((v81 & 0x7FF) != 0x7FC) {
          BOOL v9 = ((v77 >> 11) & 0x3FF) == slots_by_size_class[v84] - 1;
        }
        int v71 = v9;
        if (v9) {
          break;
        }
        unint64_t v121 = v82;
        int v120 = v84;
        unint64_t v119 = v85;
        int v122 = v84;
        int v61 = ((int)v85 - (int)v82) / (16 * (v84 + 1));
        int v77 = v77 & 0xFFFFF800 | ((_WORD)v61 + 1) & 0x7FF;
        int v60 = 0;
        if (v76) {
          int v8 = 2043;
        }
        else {
          int v8 = v81 & 0x7FF;
        }
        int v60 = v8;
        uint64_t v59 = v8;
        *(void *)(v75 + 8) = v8;
        int v58 = v60;
        int v57 = v81;
        BOOL v56 = 0;
        int v54 = v77;
        int v55 = v77;
        int v6 = v81;
        int v7 = v81;
        atomic_compare_exchange_strong_explicit(v83, (unsigned int *)&v7, v77, memory_order_release, memory_order_relaxed);
        if (v7 != v6) {
          int v57 = v7;
        }
        BOOL v53 = v7 == v6;
        BOOL v56 = v7 == v6;
        int v81 = v57;
        BOOL v52 = v56;
        if (v7 == v6) {
          goto LABEL_52;
        }
      }
      int v70 = 0;
      uint64_t v69 = 0;
      *(void *)(v75 + 8) = 0;
      int v68 = v70;
      if (v77 >= 0) {
        int v3 = 2045;
      }
      else {
        int v3 = 2043;
      }
      int v77 = v77 & 0xFFFFF800 | v3;
      int v67 = v81;
      BOOL v66 = 0;
      int v64 = v77;
      int v65 = v77;
      int v4 = v81;
      int v5 = v81;
      atomic_compare_exchange_strong_explicit(v83, (unsigned int *)&v5, v77, memory_order_release, memory_order_relaxed);
      if (v5 != v4) {
        int v67 = v5;
      }
      BOOL v63 = v5 == v4;
      BOOL v66 = v5 == v4;
      int v81 = v67;
      BOOL v62 = v66;
    }
    while (v5 != v4);
    if ((v77 & 0x7FF) == 0x7FD && !nanov2_madvise_policy)
    {
      unsigned int v87 = v83;
      goto LABEL_57;
    }
LABEL_52:
    unsigned __int16 v51 = 1 << v84;
    if (v77 >= 0
      && (*(_WORD *)(v86 + 28672) & v51) != 0
      && (double)((v77 >> 11) & 0x3FF) >= 0.75 * (double)v78)
    {
      __int16 v49 = ~v51;
      __int16 v48 = ~v51;
      __int16 v50 = ~v51;
      unsigned __int16 v46 = 0;
      __int16 v44 = ~v51;
      __int16 v43 = ~v51;
      __int16 v45 = ~v51;
      unsigned __int16 v42 = atomic_fetch_and_explicit((atomic_ushort *volatile)(v86 + 28672), ~v51, memory_order_relaxed);
      unsigned __int16 v46 = v42;
      unsigned __int16 v41 = v42;
      int v47 = (unsigned __int16)(v42 & v50);
    }
    unsigned int v87 = 0;
LABEL_57:
    if (v87) {
      nanov2_madvise_block((uint64_t)v15, v87, v12, 2045);
    }
  }
  else
  {
LABEL_60:
    if (v13) {
      (*(void (**)(void, unint64_t))(v15[3588] + 144))(v15[3588], v14);
    }
    else {
      (*(void (**)(void, unint64_t))(v15[3588] + 48))(v15[3588], v14);
    }
  }
}

void nanov2_try_free_default(uint64_t a1, void *a2)
{
}

void *nanov2_calloc(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v12 = a1;
  _OWORD v11[2] = a2;
  v11[1] = a3;
  v11[0] = 0;
  unint64_t v44 = a2;
  unint64_t v43 = a3;
  uint64_t v42 = 0;
  unsigned __int16 v41 = v11;
  unint64_t v40 = a3;
  if (a2 == 1 || (unint64_t v40 = v44 * v43, !(v102 = !is_mul_ok(v44, v43))) && v40 <= malloc_absolute_max_size)
  {
    *unsigned __int16 v41 = v40;
    int v45 = 0;
  }
  else
  {
    malloc_set_errno_fast(1, 12);
    int v45 = -1;
  }
  if (v45) {
    return 0;
  }
  unint64_t v10 = _nano_common_good_size(v11[0]);
  if (v11[0] > 0x100) {
    return (void *)(*(uint64_t (**)(void, uint64_t, unint64_t))(*(void *)(v12 + 28704) + 32))(*(void *)(v12 + 28704), 1, v11[0]);
  }
  uint64_t v35 = v12;
  unint64_t v34 = v10;
  char v33 = 1;
  char v32 = 0;
  uint64_t v31 = 0;
  unint64_t v30 = 0;
  unsigned int v29 = 0;
  unint64_t v37 = v10;
  if (v10 % 0x10) {
    unint64_t v9 = v37 / 0x10 + 1;
  }
  else {
    unint64_t v9 = v37 / 0x10;
  }
  unsigned int v29 = v9 - 1;
  int v28 = 0;
  if (nano_common_max_magazines_is_ncpu)
  {
    LOBYTE(v47) = _malloc_cpu_number() & 0x3F;
    signed int v47 = v47;
  }
  else
  {
    int v46 = 0;
    if (_os_cpu_number_override == -1) {
      signed int v47 = ((_malloc_cpu_number() >> v46) % nano_common_max_magazines) & 0x3F;
    }
    else {
      signed int v47 = ((_os_cpu_number_override >> v46) % nano_common_max_magazines) & 0x3F;
    }
  }
  int v28 = v47;
  int v27 = (atomic_uint **)(v35 + 0x4000 + ((unint64_t)v29 << 9) + 8 * v47);
  char v26 = 0;
  unsigned int v25 = 0;
  unsigned int v24 = *v27;
  unsigned int v25 = v24;
  unsigned int v23 = v24;
  char v26 = v24;
  char v22 = 0;
  unint64_t v21 = 0;
  if (!v24) {
    return nanov2_allocate_outlined(v35, v27, v34, v29, v28, v30, (uint64_t)v21, v33 & 1, v32 & 1, v31);
  }
  uint64_t v73 = v35;
  unint64_t v72 = v26;
  unsigned int v71 = v29;
  int v70 = &v30;
  uint64_t v69 = &v22;
  unsigned int v68 = 0;
  unsigned int v67 = 0;
  unsigned int v66 = *(_DWORD *)v26;
  unsigned int v67 = v66;
  unsigned int v68 = v66;
  unint64_t v65 = 0;
  while (1)
  {
    unsigned int v75 = v68;
    BOOL v8 = 0;
    if ((v68 & 0x80000000) != 0) {
      BOOL v8 = (v75 & 0x7FF) != 2044;
    }
    if (!v8)
    {
      unint64_t v74 = 0;
      goto LABEL_51;
    }
    int v64 = 0;
    BOOL v63 = 0;
    int v62 = 0;
    unsigned int v61 = (((((v68 >> 11) & 0x3FF) - 1) & 0x3FF) << 11) & 0x1FFFFF | (((((v68 >> 21) & 0x3FF) + 1) & 0x3FF) << 21) & 0x7FFFFFFF | 0x80000000;
    BOOL v60 = ((v68 >> 11) & 0x3FF) == 0;
    if ((v68 & 0x7FF) == 0x7FB || (v68 & 0x7FF) == 0x7FD)
    {
      int v3 = v60 ? 2044 : 2043;
      unsigned int v61 = v61 & 0xFFFFF800 | v3;
      int v64 = slots_by_size_class[v71] - ((v68 >> 11) & 0x3FF) - 1;
    }
    else
    {
      int v62 = 1;
      if (!v65)
      {
        uint64_t v88 = v73;
        unsigned int v87 = v72;
        unint64_t v96 = v72;
        unint64_t v86 = (unint64_t)v72 & 0xFFFFFFFFFFFFC000;
        unint64_t v89 = v72;
        unint64_t v85 = (unint64_t)v72 & 0xFFFFFFFFFC000000;
        unsigned int v84 = (uint64_t)((uint64_t)v72 - ((unint64_t)v72 & 0xFFFFFFFFFFFFC000)) / 4;
        unsigned int v98 = v84;
        int v83 = ((unsigned __int16)((_WORD)v98 << 6) | (unsigned __int16)(v98 >> 6)) & 0xFFF;
        unint64_t v65 = ((unint64_t)v72 & 0xFFFFFFFFFC000000)
            + ((unint64_t)(((unsigned __int16)((_WORD)v98 << 6) | (unsigned __int16)(v98 >> 6)) & 0xFFF) << 14);
      }
      int v64 = (v68 & 0x7FF) - 1;
      unint64_t v95 = v65;
      unsigned int v94 = v71;
      int v93 = v64;
      unsigned int v100 = v71;
      BOOL v63 = (void *)(v65 + (int)(16 * (v71 + 1) * v64));
      uint64_t v59 = v63;
      __int16 v7 = v60 ? 2044 : v59[1];
      unsigned int v61 = v61 & 0xFFFFF800 | v7 & 0x7FF;
    }
    unsigned int v58 = v68;
    BOOL v57 = 0;
    unsigned int v55 = v61;
    unsigned int v56 = v61;
    unsigned int v4 = v68;
    unsigned int v5 = v68;
    atomic_compare_exchange_strong_explicit(v72, &v5, v61, memory_order_relaxed, memory_order_relaxed);
    if (v5 != v4) {
      unsigned int v58 = v5;
    }
    BOOL v54 = v5 == v4;
    BOOL v57 = v5 == v4;
    unsigned int v68 = v58;
    BOOL v53 = v57;
    if (v5 == v4) {
      break;
    }
    if ((v68 & 0x7FF) == 0x7FD || (v68 & 0x7FF) == 0x7FE || (v68 & 0x7FF) == 0x7FF)
    {
      *int v70 = v72;
      unint64_t v74 = 0;
      goto LABEL_51;
    }
  }
  if (!v63)
  {
    if (!v65)
    {
      uint64_t v81 = v73;
      int v80 = v72;
      unint64_t v97 = v72;
      unint64_t v79 = (unint64_t)v72 & 0xFFFFFFFFFFFFC000;
      unint64_t v82 = v72;
      unint64_t v78 = (unint64_t)v72 & 0xFFFFFFFFFC000000;
      unsigned int v77 = (uint64_t)((uint64_t)v72 - ((unint64_t)v72 & 0xFFFFFFFFFFFFC000)) / 4;
      unsigned int v99 = v77;
      int v76 = ((unsigned __int16)((_WORD)v99 << 6) | (unsigned __int16)(v99 >> 6)) & 0xFFF;
      unint64_t v65 = ((unint64_t)v72 & 0xFFFFFFFFFC000000)
          + ((unint64_t)(((unsigned __int16)((_WORD)v99 << 6) | (unsigned __int16)(v99 >> 6)) & 0xFFF) << 14);
    }
    unint64_t v92 = v65;
    unsigned int v91 = v71;
    int v90 = v64;
    unsigned int v101 = v71;
    BOOL v63 = (void *)(v65 + (int)(16 * (v71 + 1) * v64));
  }
  if (v62)
  {
    BOOL v52 = v63;
    uint64_t v51 = 0;
    uint64_t v50 = 0;
    uint64_t v49 = *v63;
    uint64_t v50 = v49;
    uint64_t v48 = v49;
    uint64_t v51 = v49;
    if ((void *)(v49 ^ *(void *)(v73 + 28696)) != v63) {
      *uint64_t v69 = 1;
    }
  }
  unint64_t v74 = v63;
LABEL_51:
  unint64_t v21 = v74;
  if (!v74 || (v22 & 1) != 0) {
    return nanov2_allocate_outlined(v35, v27, v34, v29, v28, v30, (uint64_t)v21, v33 & 1, v32 & 1, v31);
  }
  if ((v33 & 1) != 0 && malloc_zero_policy)
  {
    unint64_t v39 = v21;
    uint64_t v38 = v34;
    _platform_bzero();
  }
  else
  {
    unint64_t v20 = v21;
    int v19 = 0;
    uint64_t v18 = 0;
    *unint64_t v21 = 0;
    int v17 = v19;
    int v16 = 0;
    uint64_t v15 = 0;
    v20[1] = 0;
    int v14 = v16;
  }
  return v21;
}

void *nanov2_calloc_type(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v16 = a1;
  unint64_t v15 = a2;
  unint64_t v14 = a3;
  uint64_t v13 = a4;
  unint64_t v12 = 0;
  unint64_t v48 = a2;
  unint64_t v47 = a3;
  uint64_t v46 = 0;
  int v45 = &v12;
  unint64_t v44 = a3;
  if (a2 == 1 || (unint64_t v44 = v48 * v47, !(v106 = !is_mul_ok(v48, v47))) && v44 <= malloc_absolute_max_size)
  {
    *int v45 = v44;
    int v49 = 0;
  }
  else
  {
    malloc_set_errno_fast(1, 12);
    int v49 = -1;
  }
  if (v49) {
    return 0;
  }
  unint64_t v11 = _nano_common_good_size(v12);
  if (v12 > 0x100) {
    return (void *)(*(uint64_t (**)(void, uint64_t, unint64_t, uint64_t))(*(void *)(v16 + 28704)
  }
                                                                                           + 168))(*(void *)(v16 + 28704), 1, v12, v13);
  uint64_t v39 = v16;
  unint64_t v38 = v11;
  char v37 = 1;
  char v36 = 1;
  uint64_t v35 = v13;
  unint64_t v34 = 0;
  unsigned int v33 = 0;
  unint64_t v41 = v11;
  if (v11 % 0x10) {
    unint64_t v10 = v41 / 0x10 + 1;
  }
  else {
    unint64_t v10 = v41 / 0x10;
  }
  unsigned int v33 = v10 - 1;
  int v32 = 0;
  if (nano_common_max_magazines_is_ncpu)
  {
    LOBYTE(v51) = _malloc_cpu_number() & 0x3F;
    signed int v51 = v51;
  }
  else
  {
    int v50 = 0;
    if (_os_cpu_number_override == -1) {
      signed int v51 = ((_malloc_cpu_number() >> v50) % nano_common_max_magazines) & 0x3F;
    }
    else {
      signed int v51 = ((_os_cpu_number_override >> v50) % nano_common_max_magazines) & 0x3F;
    }
  }
  int v32 = v51;
  uint64_t v31 = (atomic_uint **)(v39 + 0x4000 + ((unint64_t)v33 << 9) + 8 * v51);
  unint64_t v30 = 0;
  unsigned int v29 = 0;
  int v28 = *v31;
  unsigned int v29 = v28;
  int v27 = v28;
  unint64_t v30 = v28;
  char v26 = 0;
  unsigned int v25 = 0;
  if (!v28) {
    return nanov2_allocate_outlined(v39, v31, v38, v33, v32, v34, (uint64_t)v25, v37 & 1, v36 & 1, v35);
  }
  uint64_t v77 = v39;
  int v76 = v30;
  unsigned int v75 = v33;
  unint64_t v74 = &v34;
  uint64_t v73 = &v26;
  unsigned int v72 = 0;
  unsigned int v71 = 0;
  unsigned int v70 = *(_DWORD *)v30;
  unsigned int v71 = v70;
  unsigned int v72 = v70;
  unint64_t v69 = 0;
  while (1)
  {
    unsigned int v79 = v72;
    BOOL v9 = 0;
    if ((v72 & 0x80000000) != 0) {
      BOOL v9 = (v79 & 0x7FF) != 2044;
    }
    if (!v9)
    {
      unint64_t v78 = 0;
      goto LABEL_51;
    }
    int v68 = 0;
    unsigned int v67 = 0;
    int v66 = 0;
    unsigned int v65 = (((((v72 >> 11) & 0x3FF) - 1) & 0x3FF) << 11) & 0x1FFFFF | (((((v72 >> 21) & 0x3FF) + 1) & 0x3FF) << 21) & 0x7FFFFFFF | 0x80000000;
    BOOL v64 = ((v72 >> 11) & 0x3FF) == 0;
    if ((v72 & 0x7FF) == 0x7FB || (v72 & 0x7FF) == 0x7FD)
    {
      int v4 = v64 ? 2044 : 2043;
      unsigned int v65 = v65 & 0xFFFFF800 | v4;
      int v68 = slots_by_size_class[v75] - ((v72 >> 11) & 0x3FF) - 1;
    }
    else
    {
      int v66 = 1;
      if (!v69)
      {
        uint64_t v92 = v77;
        unsigned int v91 = v76;
        unsigned int v100 = v76;
        unint64_t v90 = (unint64_t)v76 & 0xFFFFFFFFFFFFC000;
        int v93 = v76;
        unint64_t v89 = (unint64_t)v76 & 0xFFFFFFFFFC000000;
        unsigned int v88 = (uint64_t)((uint64_t)v76 - ((unint64_t)v76 & 0xFFFFFFFFFFFFC000)) / 4;
        unsigned int v102 = v88;
        int v87 = ((unsigned __int16)((_WORD)v102 << 6) | (unsigned __int16)(v102 >> 6)) & 0xFFF;
        unint64_t v69 = ((unint64_t)v76 & 0xFFFFFFFFFC000000)
            + ((unint64_t)(((unsigned __int16)((_WORD)v102 << 6) | (unsigned __int16)(v102 >> 6)) & 0xFFF) << 14);
      }
      int v68 = (v72 & 0x7FF) - 1;
      unint64_t v99 = v69;
      unsigned int v98 = v75;
      int v97 = v68;
      unsigned int v104 = v75;
      unsigned int v67 = (void *)(v69 + (int)(16 * (v75 + 1) * v68));
      BOOL v63 = v67;
      __int16 v8 = v64 ? 2044 : v63[1];
      unsigned int v65 = v65 & 0xFFFFF800 | v8 & 0x7FF;
    }
    unsigned int v62 = v72;
    BOOL v61 = 0;
    unsigned int v59 = v65;
    unsigned int v60 = v65;
    unsigned int v5 = v72;
    unsigned int v6 = v72;
    atomic_compare_exchange_strong_explicit(v76, &v6, v65, memory_order_relaxed, memory_order_relaxed);
    if (v6 != v5) {
      unsigned int v62 = v6;
    }
    BOOL v58 = v6 == v5;
    BOOL v61 = v6 == v5;
    unsigned int v72 = v62;
    BOOL v57 = v61;
    if (v6 == v5) {
      break;
    }
    if ((v72 & 0x7FF) == 0x7FD || (v72 & 0x7FF) == 0x7FE || (v72 & 0x7FF) == 0x7FF)
    {
      *unint64_t v74 = v76;
      unint64_t v78 = 0;
      goto LABEL_51;
    }
  }
  if (!v67)
  {
    if (!v69)
    {
      uint64_t v85 = v77;
      unsigned int v84 = v76;
      unsigned int v101 = v76;
      unint64_t v83 = (unint64_t)v76 & 0xFFFFFFFFFFFFC000;
      unint64_t v86 = v76;
      unint64_t v82 = (unint64_t)v76 & 0xFFFFFFFFFC000000;
      unsigned int v81 = (uint64_t)((uint64_t)v76 - ((unint64_t)v76 & 0xFFFFFFFFFFFFC000)) / 4;
      unsigned int v103 = v81;
      int v80 = ((unsigned __int16)((_WORD)v103 << 6) | (unsigned __int16)(v103 >> 6)) & 0xFFF;
      unint64_t v69 = ((unint64_t)v76 & 0xFFFFFFFFFC000000)
          + ((unint64_t)(((unsigned __int16)((_WORD)v103 << 6) | (unsigned __int16)(v103 >> 6)) & 0xFFF) << 14);
    }
    unint64_t v96 = v69;
    unsigned int v95 = v75;
    int v94 = v68;
    unsigned int v105 = v75;
    unsigned int v67 = (void *)(v69 + (int)(16 * (v75 + 1) * v68));
  }
  if (v66)
  {
    unsigned int v56 = v67;
    uint64_t v55 = 0;
    uint64_t v54 = 0;
    uint64_t v53 = *v67;
    uint64_t v54 = v53;
    uint64_t v52 = v53;
    uint64_t v55 = v53;
    if ((void *)(v53 ^ *(void *)(v77 + 28696)) != v67) {
      *uint64_t v73 = 1;
    }
  }
  unint64_t v78 = v67;
LABEL_51:
  unsigned int v25 = v78;
  if (!v78 || (v26 & 1) != 0) {
    return nanov2_allocate_outlined(v39, v31, v38, v33, v32, v34, (uint64_t)v25, v37 & 1, v36 & 1, v35);
  }
  if ((v37 & 1) != 0 && malloc_zero_policy)
  {
    unint64_t v43 = v25;
    uint64_t v42 = v38;
    _platform_bzero();
  }
  else
  {
    unsigned int v24 = v25;
    int v23 = 0;
    uint64_t v22 = 0;
    *unsigned int v25 = 0;
    int v21 = v23;
    int v20 = 0;
    uint64_t v19 = 0;
    v24[1] = 0;
    int v18 = v20;
  }
  return v25;
}

void *nanov2_malloc_zero_on_alloc(uint64_t a1, unint64_t a2)
{
  unint64_t v9 = _nano_common_good_size(a2);
  if (v9 > 0x100) {
    return (void *)(*(uint64_t (**)(void, unint64_t))(*(void *)(a1 + 28704) + 24))(*(void *)(a1 + 28704), a2);
  }
  uint64_t v27 = a1;
  unint64_t v26 = v9;
  char v25 = 1;
  char v24 = 0;
  uint64_t v23 = 0;
  uint64_t v22 = 0;
  unsigned int v21 = 0;
  unint64_t v29 = v9;
  if (v9 % 0x10) {
    unint64_t v8 = v29 / 0x10 + 1;
  }
  else {
    unint64_t v8 = v29 / 0x10;
  }
  unsigned int v21 = v8 - 1;
  int v20 = 0;
  if (nano_common_max_magazines_is_ncpu)
  {
    int v33 = _malloc_cpu_number() & 0x3F;
  }
  else
  {
    int v32 = 0;
    if (_os_cpu_number_override == -1) {
      int v33 = ((_malloc_cpu_number() >> v32) % nano_common_max_magazines) & 0x3F;
    }
    else {
      int v33 = ((_os_cpu_number_override >> v32) % nano_common_max_magazines) & 0x3F;
    }
  }
  int v20 = v33;
  uint64_t v19 = (atomic_uint **)(v27 + 0x4000 + ((unint64_t)v21 << 9) + 8 * v33);
  int v18 = 0;
  int v17 = 0;
  uint64_t v16 = *v19;
  int v17 = v16;
  unint64_t v15 = v16;
  int v18 = v16;
  char v14 = 0;
  uint64_t v13 = 0;
  if (!v16) {
    return nanov2_allocate_outlined(v27, v19, v26, v21, v20, v22, v13, v25 & 1, v24 & 1, v23);
  }
  uint64_t v59 = v27;
  BOOL v58 = v18;
  unsigned int v57 = v21;
  unsigned int v56 = &v22;
  uint64_t v55 = &v14;
  unsigned int v54 = 0;
  unsigned int v53 = 0;
  unsigned int v52 = *(_DWORD *)v18;
  unsigned int v53 = v52;
  unsigned int v54 = v52;
  unint64_t v51 = 0;
  while (1)
  {
    unsigned int v61 = v54;
    BOOL v7 = 0;
    if ((v54 & 0x80000000) != 0) {
      BOOL v7 = (v61 & 0x7FF) != 2044;
    }
    if (!v7)
    {
      unsigned int v60 = 0;
      goto LABEL_44;
    }
    int v50 = 0;
    int v49 = 0;
    int v48 = 0;
    unsigned int v47 = (((((v54 >> 11) & 0x3FF) - 1) & 0x3FF) << 11) & 0x1FFFFF | (((((v54 >> 21) & 0x3FF) + 1) & 0x3FF) << 21) & 0x7FFFFFFF | 0x80000000;
    BOOL v46 = ((v54 >> 11) & 0x3FF) == 0;
    if ((v54 & 0x7FF) == 0x7FB || (v54 & 0x7FF) == 0x7FD)
    {
      int v2 = v46 ? 2044 : 2043;
      unsigned int v47 = v47 & 0xFFFFF800 | v2;
      int v50 = slots_by_size_class[v57] - ((v54 >> 11) & 0x3FF) - 1;
    }
    else
    {
      int v48 = 1;
      if (!v51)
      {
        uint64_t v74 = v59;
        uint64_t v73 = v58;
        unint64_t v82 = v58;
        unint64_t v72 = (unint64_t)v58 & 0xFFFFFFFFFFFFC000;
        unsigned int v75 = v58;
        unint64_t v71 = (unint64_t)v58 & 0xFFFFFFFFFC000000;
        unsigned int v70 = (uint64_t)((uint64_t)v58 - ((unint64_t)v58 & 0xFFFFFFFFFFFFC000)) / 4;
        unsigned int v84 = v70;
        int v69 = ((unsigned __int16)((_WORD)v84 << 6) | (unsigned __int16)(v84 >> 6)) & 0xFFF;
        unint64_t v51 = ((unint64_t)v58 & 0xFFFFFFFFFC000000)
            + ((unint64_t)(((unsigned __int16)((_WORD)v84 << 6) | (unsigned __int16)(v84 >> 6)) & 0xFFF) << 14);
      }
      int v50 = (v54 & 0x7FF) - 1;
      unint64_t v81 = v51;
      unsigned int v80 = v57;
      int v79 = v50;
      unsigned int v86 = v57;
      int v49 = (void *)(v51 + (int)(16 * (v57 + 1) * v50));
      int v45 = v49;
      __int16 v6 = v46 ? 2044 : v45[1];
      unsigned int v47 = v47 & 0xFFFFF800 | v6 & 0x7FF;
    }
    unsigned int v44 = v54;
    BOOL v43 = 0;
    unsigned int v41 = v47;
    unsigned int v42 = v47;
    unsigned int v3 = v54;
    unsigned int v4 = v54;
    atomic_compare_exchange_strong_explicit(v58, &v4, v47, memory_order_relaxed, memory_order_relaxed);
    if (v4 != v3) {
      unsigned int v44 = v4;
    }
    BOOL v40 = v4 == v3;
    BOOL v43 = v4 == v3;
    unsigned int v54 = v44;
    BOOL v39 = v43;
    if (v4 == v3) {
      break;
    }
    if ((v54 & 0x7FF) == 0x7FD || (v54 & 0x7FF) == 0x7FE || (v54 & 0x7FF) == 0x7FF)
    {
      *unsigned int v56 = v58;
      unsigned int v60 = 0;
      goto LABEL_44;
    }
  }
  if (!v49)
  {
    if (!v51)
    {
      uint64_t v67 = v59;
      int v66 = v58;
      unint64_t v83 = v58;
      unint64_t v65 = (unint64_t)v58 & 0xFFFFFFFFFFFFC000;
      int v68 = v58;
      unint64_t v64 = (unint64_t)v58 & 0xFFFFFFFFFC000000;
      unsigned int v63 = (uint64_t)((uint64_t)v58 - ((unint64_t)v58 & 0xFFFFFFFFFFFFC000)) / 4;
      unsigned int v85 = v63;
      int v62 = ((unsigned __int16)((_WORD)v85 << 6) | (unsigned __int16)(v85 >> 6)) & 0xFFF;
      unint64_t v51 = ((unint64_t)v58 & 0xFFFFFFFFFC000000)
          + ((unint64_t)(((unsigned __int16)((_WORD)v85 << 6) | (unsigned __int16)(v85 >> 6)) & 0xFFF) << 14);
    }
    unint64_t v78 = v51;
    unsigned int v77 = v57;
    int v76 = v50;
    unsigned int v87 = v57;
    int v49 = (void *)(v51 + (int)(16 * (v57 + 1) * v50));
  }
  if (v48)
  {
    unint64_t v38 = v49;
    uint64_t v37 = 0;
    uint64_t v36 = 0;
    uint64_t v35 = *v49;
    uint64_t v36 = v35;
    uint64_t v34 = v35;
    uint64_t v37 = v35;
    if ((void *)(v35 ^ *(void *)(v59 + 28696)) != v49) {
      *uint64_t v55 = 1;
    }
  }
  unsigned int v60 = v49;
LABEL_44:
  uint64_t v13 = (uint64_t)v60;
  if (!v60 || (v14 & 1) != 0) {
    return nanov2_allocate_outlined(v27, v19, v26, v21, v20, v22, v13, v25 & 1, v24 & 1, v23);
  }
  if ((v25 & 1) != 0 && malloc_zero_policy)
  {
    uint64_t v31 = v60;
    uint64_t v30 = v26;
    _platform_bzero();
  }
  else
  {
    *unsigned int v60 = 0;
    *(void *)(v13 + 8) = 0;
  }
  return (void *)v13;
}

void *nanov2_malloc_type_zero_on_alloc(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v10 = _nano_common_good_size(a2);
  if (v10 > 0x100) {
    return (void *)(*(uint64_t (**)(void, unint64_t, uint64_t))(*(void *)(a1 + 28704) + 160))(*(void *)(a1 + 28704), a2, a3);
  }
  uint64_t v29 = a1;
  unint64_t v28 = v10;
  char v27 = 1;
  char v26 = 1;
  uint64_t v25 = a3;
  char v24 = 0;
  unsigned int v23 = 0;
  unint64_t v31 = v10;
  if (v10 % 0x10) {
    unint64_t v9 = v31 / 0x10 + 1;
  }
  else {
    unint64_t v9 = v31 / 0x10;
  }
  unsigned int v23 = v9 - 1;
  int v22 = 0;
  if (nano_common_max_magazines_is_ncpu)
  {
    int v35 = _malloc_cpu_number() & 0x3F;
  }
  else
  {
    int v34 = 0;
    if (_os_cpu_number_override == -1) {
      int v35 = ((_malloc_cpu_number() >> v34) % nano_common_max_magazines) & 0x3F;
    }
    else {
      int v35 = ((_os_cpu_number_override >> v34) % nano_common_max_magazines) & 0x3F;
    }
  }
  int v22 = v35;
  unsigned int v21 = (atomic_uint **)(v29 + 0x4000 + ((unint64_t)v23 << 9) + 8 * v35);
  int v20 = 0;
  uint64_t v19 = 0;
  int v18 = *v21;
  uint64_t v19 = v18;
  int v17 = v18;
  int v20 = v18;
  char v16 = 0;
  uint64_t v15 = 0;
  if (!v18) {
    return nanov2_allocate_outlined(v29, v21, v28, v23, v22, v24, v15, v27 & 1, v26 & 1, v25);
  }
  uint64_t v61 = v29;
  unsigned int v60 = v20;
  unsigned int v59 = v23;
  BOOL v58 = &v24;
  unsigned int v57 = &v16;
  unsigned int v56 = 0;
  unsigned int v55 = 0;
  unsigned int v54 = *(_DWORD *)v20;
  unsigned int v55 = v54;
  unsigned int v56 = v54;
  unint64_t v53 = 0;
  while (1)
  {
    unsigned int v63 = v56;
    BOOL v8 = 0;
    if ((v56 & 0x80000000) != 0) {
      BOOL v8 = (v63 & 0x7FF) != 2044;
    }
    if (!v8)
    {
      int v62 = 0;
      goto LABEL_44;
    }
    int v52 = 0;
    unint64_t v51 = 0;
    int v50 = 0;
    unsigned int v49 = (((((v56 >> 11) & 0x3FF) - 1) & 0x3FF) << 11) & 0x1FFFFF | (((((v56 >> 21) & 0x3FF) + 1) & 0x3FF) << 21) & 0x7FFFFFFF | 0x80000000;
    BOOL v48 = ((v56 >> 11) & 0x3FF) == 0;
    if ((v56 & 0x7FF) == 0x7FB || (v56 & 0x7FF) == 0x7FD)
    {
      int v3 = v48 ? 2044 : 2043;
      unsigned int v49 = v49 & 0xFFFFF800 | v3;
      int v52 = slots_by_size_class[v59] - ((v56 >> 11) & 0x3FF) - 1;
    }
    else
    {
      int v50 = 1;
      if (!v53)
      {
        uint64_t v76 = v61;
        unsigned int v75 = v60;
        unsigned int v84 = v60;
        unint64_t v74 = (unint64_t)v60 & 0xFFFFFFFFFFFFC000;
        unsigned int v77 = v60;
        unint64_t v73 = (unint64_t)v60 & 0xFFFFFFFFFC000000;
        unsigned int v72 = (uint64_t)((uint64_t)v60 - ((unint64_t)v60 & 0xFFFFFFFFFFFFC000)) / 4;
        unsigned int v86 = v72;
        int v71 = ((unsigned __int16)((_WORD)v86 << 6) | (unsigned __int16)(v86 >> 6)) & 0xFFF;
        unint64_t v53 = ((unint64_t)v60 & 0xFFFFFFFFFC000000)
            + ((unint64_t)(((unsigned __int16)((_WORD)v86 << 6) | (unsigned __int16)(v86 >> 6)) & 0xFFF) << 14);
      }
      int v52 = (v56 & 0x7FF) - 1;
      unint64_t v83 = v53;
      unsigned int v82 = v59;
      int v81 = v52;
      unsigned int v88 = v59;
      unint64_t v51 = (void *)(v53 + (int)(16 * (v59 + 1) * v52));
      unsigned int v47 = v51;
      __int16 v7 = v48 ? 2044 : v47[1];
      unsigned int v49 = v49 & 0xFFFFF800 | v7 & 0x7FF;
    }
    unsigned int v46 = v56;
    BOOL v45 = 0;
    unsigned int v43 = v49;
    unsigned int v44 = v49;
    unsigned int v4 = v56;
    unsigned int v5 = v56;
    atomic_compare_exchange_strong_explicit(v60, &v5, v49, memory_order_relaxed, memory_order_relaxed);
    if (v5 != v4) {
      unsigned int v46 = v5;
    }
    BOOL v42 = v5 == v4;
    BOOL v45 = v5 == v4;
    unsigned int v56 = v46;
    BOOL v41 = v45;
    if (v5 == v4) {
      break;
    }
    if ((v56 & 0x7FF) == 0x7FD || (v56 & 0x7FF) == 0x7FE || (v56 & 0x7FF) == 0x7FF)
    {
      *BOOL v58 = v60;
      int v62 = 0;
      goto LABEL_44;
    }
  }
  if (!v51)
  {
    if (!v53)
    {
      uint64_t v69 = v61;
      int v68 = v60;
      unsigned int v85 = v60;
      unint64_t v67 = (unint64_t)v60 & 0xFFFFFFFFFFFFC000;
      unsigned int v70 = v60;
      unint64_t v66 = (unint64_t)v60 & 0xFFFFFFFFFC000000;
      unsigned int v65 = (uint64_t)((uint64_t)v60 - ((unint64_t)v60 & 0xFFFFFFFFFFFFC000)) / 4;
      unsigned int v87 = v65;
      int v64 = ((unsigned __int16)((_WORD)v87 << 6) | (unsigned __int16)(v87 >> 6)) & 0xFFF;
      unint64_t v53 = ((unint64_t)v60 & 0xFFFFFFFFFC000000)
          + ((unint64_t)(((unsigned __int16)((_WORD)v87 << 6) | (unsigned __int16)(v87 >> 6)) & 0xFFF) << 14);
    }
    unint64_t v80 = v53;
    unsigned int v79 = v59;
    int v78 = v52;
    unsigned int v89 = v59;
    unint64_t v51 = (void *)(v53 + (int)(16 * (v59 + 1) * v52));
  }
  if (v50)
  {
    BOOL v40 = v51;
    uint64_t v39 = 0;
    uint64_t v38 = 0;
    uint64_t v37 = *v51;
    uint64_t v38 = v37;
    uint64_t v36 = v37;
    uint64_t v39 = v37;
    if ((void *)(v37 ^ *(void *)(v61 + 28696)) != v51) {
      *unsigned int v57 = 1;
    }
  }
  int v62 = v51;
LABEL_44:
  uint64_t v15 = (uint64_t)v62;
  if (!v62 || (v16 & 1) != 0) {
    return nanov2_allocate_outlined(v29, v21, v28, v23, v22, v24, v15, v27 & 1, v26 & 1, v25);
  }
  if ((v27 & 1) != 0 && malloc_zero_policy)
  {
    int v33 = v62;
    uint64_t v32 = v28;
    _platform_bzero();
  }
  else
  {
    *int v62 = 0;
    *(void *)(v15 + 8) = 0;
  }
  return (void *)v15;
}

void *nanov2_realloc(uint64_t a1, void *a2, unint64_t a3)
{
  if (!a2) {
    return nanov2_malloc(a1, a3);
  }
  uint64_t v7 = *(void *)(a1 + 28704);
  unint64_t v6 = nanov2_pointer_size((void *)a1, (unint64_t)a2, 0);
  if (!v6) {
    return (void *)(*(uint64_t (**)(uint64_t, void *, unint64_t))(v7 + 56))(v7, a2, a3);
  }
  if (a3 > 0x100)
  {
    unsigned int v5 = (void *)(*(uint64_t (**)(uint64_t, unint64_t))(v7 + 24))(v7, a3);
    if (!v5) {
      return 0;
    }
LABEL_22:
    _platform_memmove();
    nanov2_free(a1, a2);
    return v5;
  }
  if (!a3)
  {
    nanov2_free(a1, a2);
    return nanov2_malloc(a1, 0);
  }
  unint64_t v4 = _nano_common_good_size(a3);
  if (v4 > v6 || v4 <= v6 / 2)
  {
    unsigned int v5 = nanov2_malloc(a1, v4);
    if (!v5) {
      return 0;
    }
    goto LABEL_22;
  }
  if (a3 != v6)
  {
    if (a3 >= v6)
    {
      __break(1u);
      JUMPOUT(0x4BF18);
    }
    if ((*(_DWORD *)(a1 + 28676) & 0x20) != 0) {
      _platform_memset();
    }
  }
  return a2;
}

void *nanov2_realloc_type(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  if (!a2) {
    return nanov2_malloc_type(a1, a3, a4);
  }
  uint64_t v8 = *(void *)(a1 + 28704);
  unint64_t v7 = nanov2_pointer_size((void *)a1, (unint64_t)a2, 0);
  if (!v7) {
    return (void *)(*(uint64_t (**)(uint64_t, void *, unint64_t, uint64_t))(v8 + 176))(v8, a2, a3, a4);
  }
  if (a3 > 0x100)
  {
    unint64_t v6 = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v8 + 160))(v8, a3, a4);
    if (!v6) {
      return 0;
    }
LABEL_22:
    _platform_memmove();
    nanov2_free(a1, a2);
    return v6;
  }
  if (!a3)
  {
    nanov2_free(a1, a2);
    return nanov2_malloc(a1, 0);
  }
  unint64_t v5 = _nano_common_good_size(a3);
  if (v5 > v7 || v5 <= v7 / 2)
  {
    unint64_t v6 = nanov2_malloc_type(a1, v5, a4);
    if (!v6) {
      return 0;
    }
    goto LABEL_22;
  }
  if (a3 != v7)
  {
    if (a3 >= v7)
    {
      __break(1u);
      JUMPOUT(0x4C2B8);
    }
    if ((*(_DWORD *)(a1 + 28676) & 0x20) != 0) {
      _platform_memset();
    }
  }
  return a2;
}

BOOL nanov2_claimed_address(void *a1, unint64_t a2)
{
  BOOL v3 = 1;
  if (!nanov2_pointer_size(a1, a2, 1)) {
    return malloc_zone_claimed_address(a1[3588], a2) != 0;
  }
  return v3;
}

uint64_t nanov2_pointer_size(void *a1, unint64_t a2, int a3)
{
  if (a2 >> 29 != 24) {
    return 0;
  }
  if (!a3 && (a2 & 0xF) != 0) {
    return 0;
  }
  if (a2 < a1[3590] || a2 > a1[3591]) {
    return 0;
  }
  int v6 = ptr_offset_to_size_class[((a2 >> 14) & 0xFFF ^ a1[3585]) >> 6];
  unsigned int v5 = *(_DWORD *)((a2 & 0xFFFFFFFFFC000000 ^ a1[3586])
                 + 4 * (((unsigned __int16)(((a2 >> 14) & 0xFFF) << 6) | (((a2 >> 14) & 0xFFF) >> 6)) & 0xFFF));
  BOOL v4 = 0;
  if ((v5 & 0x7FF) != 0)
  {
    BOOL v4 = 0;
    if ((*(_DWORD *)((a2 & 0xFFFFFFFFFC000000 ^ a1[3586])
                    + 4 * (((unsigned __int16)(((a2 >> 14) & 0xFFF) << 6) | (((a2 >> 14) & 0xFFF) >> 6)) & 0xFFF)) & 0x7FF) != 0x7FE)
    {
      BOOL v4 = 0;
      if ((*(_DWORD *)((a2 & 0xFFFFFFFFFC000000 ^ a1[3586])
                      + 4 * (((unsigned __int16)(((a2 >> 14) & 0xFFF) << 6) | (((a2 >> 14) & 0xFFF) >> 6)) & 0xFFF)) & 0x7FF) != 0x7FF)
        BOOL v4 = (*(_DWORD *)((a2 & 0xFFFFFFFFFC000000 ^ a1[3586])
                        + 4 * (((unsigned __int16)(((a2 >> 14) & 0xFFF) << 6) | (((a2 >> 14) & 0xFFF) >> 6)) & 0xFFF)) & 0x7FF) != 2042;
    }
  }
  if (!v4
    || (*(_DWORD *)((a2 & 0xFFFFFFFFFC000000 ^ a1[3586])
                  + 4 * (((unsigned __int16)(((a2 >> 14) & 0xFFF) << 6) | (((a2 >> 14) & 0xFFF) >> 6)) & 0xFFF)) & 0x7FF) != 0x7FC
    && ((v5 >> 11) & 0x3FF) == slots_by_size_class[v6] - 1)
  {
    return 0;
  }
  if (!a3 && (a2 & 0x3FFF) % (16 * (v6 + 1))) {
    return 0;
  }
  if ((*(void *)a2 ^ a1[3587]) == a2) {
    return 0;
  }
  return 16 * (v6 + 1);
}

uint64_t nanov2_batch_malloc(uint64_t a1, unint64_t a2, void *a3, unsigned int a4)
{
  unsigned int v8 = 0;
  unint64_t v7 = _nano_common_good_size(a2);
  if (v7 > 0x100) {
    return (v8
  }
                        + (*(uint64_t (**)(void, unint64_t, void *, void))(*(void *)(a1 + 28704)
                                                                                                + 80))(*(void *)(a1 + 28704), a2, a3, a4 - v8));
  while (v8 < a4)
  {
    int v6 = nanov2_malloc(a1, v7);
    if (!v6) {
      break;
    }
    BOOL v4 = a3++;
    *BOOL v4 = v6;
    ++v8;
  }
  if (v8 == a4) {
    return v8;
  }
  else {
    return (v8
  }
                        + (*(uint64_t (**)(void, unint64_t, void *, void))(*(void *)(a1 + 28704)
                                                                                                + 80))(*(void *)(a1 + 28704), a2, a3, a4 - v8));
}

void nanov2_batch_free(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v5 = a3;
  if (a3)
  {
    while (v5--)
    {
      BOOL v4 = *(void **)(a2 + 8 * v5);
      if (v4) {
        nanov2_free(a1, v4);
      }
    }
  }
}

void *nanov2_memalign(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a2 > 0x10) {
    return (void *)(*(uint64_t (**)(void, unint64_t, unint64_t))(*(void *)(a1 + 28704)
  }
                                                                                           + 112))(*(void *)(a1 + 28704), a2, a3);
  else {
    return nanov2_malloc(a1, a3);
  }
}

void *nanov2_memalign_type(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a2 > 0x10) {
    return (void *)(*(uint64_t (**)(void, unint64_t, unint64_t, uint64_t))(*(void *)(a1 + 28704) + 184))(*(void *)(a1 + 28704), a2, a3, a4);
  }
  else {
    return nanov2_malloc_type(a1, a3, a4);
  }
}

unint64_t nanov2_pressure_relief(uint64_t a1, unint64_t a2)
{
  if (nanov2_madvise_policy != 1 && nanov2_madvise_policy != 2) {
    return 0;
  }
  if (malloc_tracing_enabled) {
    kdebug_trace();
  }
  unint64_t v13 = 0;
  unint64_t v12 = *(void *)(a1 + 28720);
  int v11 = ((unsigned __int16)((unsigned __int16)*(void *)(a1 + 28680) << 6) | (unsigned __int16)(*(void *)(a1 + 28680) >> 6)) & 0xFFF;
  unint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)(a1 + 28728), memory_order_acquire);
  while (v12)
  {
    unint64_t v9 = v12;
    if (v12 == ((explicit - 1) & 0xFFFFFFFFE0000000)) {
      unint64_t v17 = explicit;
    }
    else {
      unint64_t v17 = v12 + 0x20000000;
    }
    while (v9 < v17)
    {
      unsigned int v8 = (atomic_uint *)(v9 & 0xFFFFFFFFFC000000 ^ *(void *)(a1 + 28688));
      if (v9 == v17
        || (int v2 = 0,
            atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 28736), (unsigned int *)&v2, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire), v2))
      {
        os_unfair_lock_lock_with_options();
      }
      for (unsigned int i = 0; i < 0x1000; ++i)
      {
        if (i != v11
          && (*(_DWORD *)v8 & 0x7FF) == 0x7FD
          && nanov2_madvise_block_locked((os_unfair_lock_s *)a1, v8, v9+ ((unint64_t)(((unsigned __int16)((_WORD)i << 6) | (unsigned __int16)(i >> 6)) & 0xFFF) << 14), ptr_offset_to_size_class[(((v9+ ((unint64_t)(((unsigned __int16)((_WORD)i << 6) | (unsigned __int16)(i >> 6)) & 0xFFF) << 14)) >> 14) & 0xFFF ^ *(void *)(a1 + 28680)) >> 6], 2045))
        {
          v13 += 0x4000;
        }
        unsigned int v8 = (atomic_uint *)((char *)v8 + 4);
      }
      int v3 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
      int v4 = v3;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 28736), (unsigned int *)&v4, 0, memory_order_release, memory_order_relaxed);
      if (v4 != v3) {
        os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 28736));
      }
      if (a2 && v13 >= a2) {
        goto LABEL_34;
      }
      v9 += 0x4000000;
    }
    unsigned __int16 v18 = *(_WORD *)((v12 & 0xFFFFFFFFFC000000 ^ *(void *)(a1 + 28688))
                   + 4
                   * (((unsigned __int16)((unsigned __int16)*(void *)(a1 + 28680) << 6) | (unsigned __int16)(*(void *)(a1 + 28680) >> 6)) & 0xFFF));
    if (v18)
    {
      if (v12 + ((unint64_t)v18 << 29) >= explicit) {
        unint64_t v6 = 0;
      }
      else {
        unint64_t v6 = v12 + ((unint64_t)v18 << 29);
      }
      unint64_t v19 = v6;
    }
    else
    {
      unint64_t v19 = 0;
    }
    unint64_t v12 = v19;
  }
LABEL_34:
  if (malloc_tracing_enabled) {
    kdebug_trace();
  }
  return v13;
}

uint64_t nanov2_madvise_block_locked(os_unfair_lock_s *a1, atomic_uint *a2, unint64_t a3, int a4, int a5)
{
  os_unfair_lock_assert_owner(a1 + 7184);
  unsigned int v11 = 0;
  unsigned int v10 = *(_DWORD *)a2;
  if ((*(_DWORD *)a2 & 0x7FF) != a5) {
    return v11;
  }
  unsigned int v5 = *(_DWORD *)a2;
  unsigned int v6 = *(_DWORD *)a2;
  atomic_compare_exchange_strong_explicit(a2, &v6, (((((v10 >> 21) & 0x3FF) + 1) & 0x3FF) << 21) & 0x7FFFF801 | 0x7FE, memory_order_relaxed, memory_order_relaxed);
  if (v6 == v5)
  {
    if (mvm_madvise_free((uint64_t)a1, a3 & 0xFFFFFFFFE0000000, (void *)a3, a3 + 0x4000, 0, 0))
    {
      __error();
      malloc_zone_error(0, 0, (uint64_t)"Failed to madvise block at blockp: %p, error: %d\n");
    }
    else
    {
      ++*(void *)&a1[8 * a4 + 7192]._os_unfair_lock_opaque;
      unsigned int v11 = 1;
    }
    unsigned int v7 = (((((v10 >> 21) & 0x3FF) + 1) & 0x3FF) << 21) & 0x7FFFF801 | 0x7FE;
    unsigned int v9 = v7;
    atomic_compare_exchange_strong_explicit(a2, &v7, (((((v7 >> 21) & 0x3FF) + 1) & 0x3FF) << 21) & 0x7FFFF800 | 0x7FF, memory_order_relaxed, memory_order_relaxed);
    if (v7 != v9) {
      malloc_zone_error(a1[7169]._os_unfair_lock_opaque, 0, (uint64_t)"Failed when changing state from MADVISING to MADVISED, block_metap = %p, blockp = %p\n");
    }
    return v11;
  }
  ++*(void *)&a1[8 * a4 + 7194]._os_unfair_lock_opaque;
  return 0;
}

uint64_t nanov2_allocate_new_region()
{
  return 0;
}

void *nanov2_find_block_and_allocate(uint64_t a1, int a2, atomic_uint **a3)
{
  char v26 = *a3;
  uint64_t v25 = *a3;
  if (*a3) {
    new_regiounsigned __int8 n = (unint64_t)v26 & 0xFFFFFFFFFC000000;
  }
  else {
    new_regiounsigned __int8 n = *(void *)(a1 + 28720) & 0xFFFFFFFFFC000000;
  }
LABEL_4:
  while (2)
  {
    unint64_t v24 = new_region;
    unint64_t v23 = new_region & 0xFFFFFFFFE0000000;
    unint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)(a1 + 28728), memory_order_acquire);
    unint64_t v94 = explicit;
    unint64_t v95 = explicit - 1;
    if ((new_region & 0xFFFFFFFFE0000000) == ((explicit - 1) & 0xFFFFFFFFE0000000)) {
      unint64_t v33 = explicit;
    }
    else {
      unint64_t v33 = (new_region & 0xFFFFFFFFE0000000) + 0x20000000;
    }
    unint64_t v21 = v33;
    do
    {
      uint64_t v56 = a1;
      unint64_t v55 = new_region;
      int v54 = a2;
      unint64_t v53 = v26;
      int v52 = 0;
      BOOL v16 = 1;
      if (v26) {
        BOOL v16 = nanov2_policy_config == 0;
      }
      int v52 = v16;
      unint64_t v51 = 0;
      uint64_t v117 = v56;
      int v116 = v54;
      unint64_t v115 = v55;
      int v114 = 0;
      int v114 = first_block_offset_by_size_class[v54];
      unint64_t v113 = 0;
      uint64_t v119 = v56;
      unint64_t v118 = v55;
      unint64_t v120 = v55;
      uint64_t v123 = v56;
      unint64_t v122 = v55 & 0xFFFFFFFFFC000000;
      unint64_t v113 = v55 & 0xFFFFFFFFFC000000 ^ *(void *)(v56 + 28688);
      unsigned int v112 = 0;
      unsigned int v112 = v114 ^ *(void *)(v56 + 28680);
      unsigned int v121 = v112;
      int v111 = ((unsigned __int16)((_WORD)v112 << 6) | (unsigned __int16)(v112 >> 6)) & 0xFFF;
      unint64_t v51 = v113 + 4 * (((unsigned __int16)((_WORD)v112 << 6) | (unsigned __int16)(v112 >> 6)) & 0xFFF);
      int v50 = 0;
      if (!v53) {
        unint64_t v53 = (atomic_uint *)v51;
      }
      int v49 = 0;
      int v49 = slots_by_size_class[v54];
      unsigned int v48 = 0;
      int64_t v47 = 0;
      unsigned int v46 = 0;
      BOOL v45 = 0;
      unsigned int v44 = 0;
      unsigned int v43 = 0;
      int v42 = 0;
      int v41 = 0;
      while (1)
      {
        int64_t v47 = (int64_t)v53;
        unsigned int v46 = 0;
        BOOL v45 = 0;
        unsigned int v44 = 0;
        unsigned int v43 = 0;
        int v42 = 0;
        int v41 = dword_C003C;
        int v50 = 1;
        do
        {
          int v40 = 0;
          int v39 = *(_DWORD *)v47;
          int v40 = v39;
          unsigned int v48 = v39;
          if (v39 >= 0 && (v48 & 0x7FF) != 0x7FC && (v48 & 0x7FF) != 0x7FE)
          {
            if ((v48 & 0x7FF) == 0x7FD)
            {
              if (!v45) {
                BOOL v45 = (atomic_uint *)v47;
              }
            }
            else if ((v48 & 0x7FF) != 0 && (v48 & 0x7FF) != 0x7FF)
            {
              if (v52)
              {
                unsigned int v46 = (atomic_uint *)v47;
              }
              else
              {
                if (nanov2_policy_config != 1)
                {
                  __break(1u);
                  JUMPOUT(0x4DB30);
                }
                int v38 = (int)(100 * ((v48 >> 11) & 0x3FF)) / v49;
                if (v38 < dword_C0034 || v38 > dword_C0038)
                {
                  if (v38 < dword_C0034)
                  {
                    if (v43 || v38 >= dword_C0034)
                    {
                      if (!v44) {
                        unsigned int v44 = (atomic_uint *)v47;
                      }
                    }
                    else
                    {
                      unsigned int v43 = (atomic_uint *)v47;
                      int v42 = 1;
                    }
                  }
                  else if (!v43 || v42)
                  {
                    unsigned int v43 = (atomic_uint *)v47;
                  }
                }
                else
                {
                  unsigned int v46 = (atomic_uint *)v47;
                }
              }
            }
            else if (!v44)
            {
              unsigned int v44 = (atomic_uint *)v47;
            }
            if (v52 && (v46 || v43 || v44)) {
              break;
            }
          }
          if (v41 > 0 && (v43 || v44) && !--v41) {
            break;
          }
          if (v50)
          {
            int v37 = 0;
            uint64_t v131 = v56;
            int v130 = v54;
            int64_t v129 = v47;
            uint64_t v128 = &v37;
            unint64_t v127 = v47 & 0xFFFFFFFFFFFFC000;
            unsigned int v126 = (uint64_t)(v47 - (v47 & 0xFFFFFFFFFFFFC000)) / 4;
            unsigned int v132 = v126;
            unsigned int v125 = ((unsigned __int16)((unsigned __int16)((uint64_t)(v47 - (v47 & 0xFFFFFFFFFFFFC000)) / 4) << 6) | (unsigned __int16)(v126 >> 6)) & 0xFFF;
            v125 ^= *(void *)(v56 + 28680);
            int v124 = 0;
            int v124 = first_block_offset_by_size_class[v54];
            if (&v37) {
              *uint64_t v128 = v125 == v124;
            }
            if (v125 == v124) {
              int v15 = last_block_offset_by_size_class[v130];
            }
            else {
              int v15 = v125 - 1;
            }
            unsigned int v125 = v15;
            unsigned int v125 = v15 ^ *(void *)(v131 + 28680);
            unsigned int v133 = v125;
            unsigned int v126 = ((unsigned __int16)((_WORD)v125 << 6) | (unsigned __int16)(v125 >> 6)) & 0xFFF;
            if (v37)
            {
              int v41 = dword_C003C;
              int v50 = 0;
              int64_t v47 = (int64_t)v53;
            }
            else
            {
              int64_t v47 = v127 + 4 * (((unsigned __int16)((_WORD)v125 << 6) | (unsigned __int16)(v125 >> 6)) & 0xFFF);
            }
          }
          else
          {
            uint64_t v141 = v56;
            int v140 = v54;
            int64_t v139 = v47;
            uint64_t v138 = 0;
            unint64_t v137 = v47 & 0xFFFFFFFFFFFFC000;
            unsigned int v136 = (uint64_t)(v47 - (v47 & 0xFFFFFFFFFFFFC000)) / 4;
            unsigned int v142 = v136;
            int v135 = ((unsigned __int16)((_WORD)v142 << 6) | (unsigned __int16)(v142 >> 6)) & 0xFFF;
            v135 ^= *(void *)(v56 + 28680);
            int v134 = 0;
            int v134 = last_block_offset_by_size_class[v54];
            if (v135 == v134) {
              int v14 = first_block_offset_by_size_class[v140];
            }
            else {
              int v14 = v135 + 1;
            }
            int v135 = v14;
            int v135 = v14 ^ *(void *)(v141 + 28680);
            unsigned int v143 = v135;
            unsigned int v136 = ((unsigned __int16)((_WORD)v143 << 6) | (unsigned __int16)(v143 >> 6)) & 0xFFF;
            int64_t v47 = v137 + 4 * (((unsigned __int16)((_WORD)v143 << 6) | (unsigned __int16)(v143 >> 6)) & 0xFFF);
            if ((atomic_uint *)v47 == v53) {
              break;
            }
          }
        }
        while (!v46);
        if (!v46)
        {
          if (v43)
          {
            unsigned int v46 = v43;
          }
          else if (v44)
          {
            unsigned int v46 = v44;
          }
          else if (v45)
          {
            unsigned int v46 = v45;
          }
        }
        if (!v46) {
          break;
        }
        unsigned int v48 = *(_DWORD *)v46;
        if ((v48 & 0x7FF) != 0x7FE)
        {
          BOOL v13 = 1;
          if ((v48 & 0x7FF) != 0)
          {
            BOOL v13 = 1;
            if ((v48 & 0x7FF) != 0x7FD) {
              BOOL v13 = (v48 & 0x7FF) == 2047;
            }
          }
          if (v13) {
            __int16 v12 = 2043;
          }
          else {
            __int16 v12 = v48 & 0x7FF;
          }
          if (v13) {
            LOWORD(v11) = v49 - 1;
          }
          else {
            int v11 = (v48 >> 11) & 0x3FF;
          }
          if (v13) {
            LOWORD(v10) = 0;
          }
          else {
            int v10 = ((v48 >> 21) & 0x3FF) + 1;
          }
          unsigned int v36 = v48;
          unsigned int v3 = v48;
          unsigned int v4 = v48;
          atomic_compare_exchange_strong_explicit(v46, &v4, v12 & 0x7FF | ((v11 & 0x3FF) << 11) & 0x1FFFFF | ((v10 & 0x3FF) << 21) & 0x7FFFFFFF | 0x80000000, memory_order_relaxed, memory_order_relaxed);
          if (v4 != v3) {
            unsigned int v36 = v4;
          }
          unsigned int v48 = v36;
          if (v4 == v3) {
            break;
          }
        }
      }
      int v20 = v46;
      if (v46)
      {
        unint64_t v19 = nanov2_allocate_from_block(a1, v46, a2);
        if (!v19)
        {
          unint64_t v67 = v20;
          int v65 = nanov2_turn_off_in_use_mask;
          int v64 = nanov2_turn_off_in_use_mask;
          int v66 = nanov2_turn_off_in_use_mask;
          unsigned int v62 = 0;
          int v60 = nanov2_turn_off_in_use_mask;
          int v59 = nanov2_turn_off_in_use_mask;
          int v61 = nanov2_turn_off_in_use_mask;
          unsigned int v58 = atomic_fetch_and_explicit(v20, nanov2_turn_off_in_use_mask, memory_order_relaxed);
          unsigned int v62 = v58;
          unsigned int v57 = v58;
          int v63 = v58 & v66;
          char v26 = v20;
          goto LABEL_4;
        }
        *a3 = v20;
        if (v25)
        {
          int v78 = v25;
          int v76 = nanov2_turn_off_in_use_mask;
          int v75 = nanov2_turn_off_in_use_mask;
          int v77 = nanov2_turn_off_in_use_mask;
          unsigned int v73 = 0;
          int v71 = nanov2_turn_off_in_use_mask;
          int v70 = nanov2_turn_off_in_use_mask;
          int v72 = nanov2_turn_off_in_use_mask;
          unsigned int v69 = atomic_fetch_and_explicit(v25, nanov2_turn_off_in_use_mask, memory_order_relaxed);
          unsigned int v73 = v69;
          unsigned int v68 = v69;
          int v74 = v69 & v77;
        }
        return v19;
      }
      char v26 = 0;
      new_region += 0x4000000;
      if (new_region >= v21)
      {
        uint64_t v87 = a1;
        unint64_t v86 = v23;
        unint64_t v85 = 0;
        uint64_t v90 = a1;
        unint64_t v89 = v23;
        unint64_t v91 = v23;
        uint64_t v99 = a1;
        unint64_t v98 = v23 & 0xFFFFFFFFFC000000;
        unint64_t v85 = v23 & 0xFFFFFFFFFC000000 ^ *(void *)(a1 + 28688);
        uint64_t v88 = a1;
        unsigned int v92 = *(void *)(a1 + 28680);
        unsigned __int16 v34 = *(_WORD *)(v85 + 4 * (((unsigned __int16)((_WORD)v92 << 6) | (unsigned __int16)(v92 >> 6)) & 0xFFF));
        if (v34)
        {
          if (v23 + ((unint64_t)v34 << 29) >= explicit) {
            unint64_t v9 = 0;
          }
          else {
            unint64_t v9 = v23 + ((unint64_t)v34 << 29);
          }
          unint64_t v35 = v9;
        }
        else
        {
          unint64_t v35 = 0;
        }
        unint64_t v23 = v35;
        if (!v35) {
          unint64_t v23 = *(void *)(a1 + 28720);
        }
        new_regiounsigned __int8 n = v23;
        unint64_t v96 = explicit;
        unint64_t v97 = explicit - 1;
        if (v23 == ((explicit - 1) & 0xFFFFFFFFE0000000)) {
          unint64_t v32 = explicit;
        }
        else {
          unint64_t v32 = v23 + 0x20000000;
        }
        unint64_t v21 = v32;
      }
    }
    while (new_region != v24);
    if (((unsigned __int16)word_C0040 & (1 << a2)) != 0) {
      return 0;
    }
    BOOL v18 = 0;
    uint64_t v101 = a1 + 28716;
    int v100 = 327680;
    os_unfair_lock_lock_with_options();
    unint64_t v17 = *(void *)(a1 + 28728);
    if (v17 == explicit)
    {
      uint64_t v79 = *(void *)(a1 + 28728);
      unint64_t v80 = v17;
      if (v17 == (v17 & 0xFFFFFFFFE0000000))
      {
        new_regiounsigned __int8 n = nanov2_allocate_new_region();
        BOOL v18 = new_region == 0;
      }
      else
      {
        new_regiounsigned __int8 n = v17;
        *(void *)(a1 + 28728) = v17 + 0x4000000;
      }
      if (!v18)
      {
        uint64_t v83 = a1;
        unint64_t v82 = new_region;
        if ((*(_DWORD *)(a1 + 28676) & 7) != 0)
        {
          int v81 = 0;
          uint64_t v84 = v83;
          unsigned int v93 = *(void *)(v83 + 28680);
          int v81 = ((unsigned __int16)((_WORD)v93 << 6) | (unsigned __int16)(v93 >> 6)) & 0xFFF;
          uint64_t v163 = v83;
          unint64_t v162 = v82;
          BOOL v161 = (((unsigned __int16)((_WORD)v93 << 6) | (unsigned __int16)(v93 >> 6)) & 0xFFF) == 0;
          unsigned int v167 = v161;
          int v160 = ((unsigned __int16)((_WORD)v167 << 6) | (unsigned __int16)(v167 >> 6)) & 0xFFF;
          unint64_t v159 = 0;
          uint64_t v165 = v83;
          unint64_t v164 = v82;
          unint64_t v166 = v82;
          uint64_t v169 = v83;
          unint64_t v168 = v82 & 0xFFFFFFFFFC000000;
          unint64_t v159 = v82 & 0xFFFFFFFFFC000000 ^ *(void *)(v83 + 28688);
          *(_DWORD *)(v159 + 4 * (((v161 << 6) | (v161 >> 6)) & 0xFFF)) = nanov2_create_guard_block_in_use_block;
          BOOL v158 = (void *)(v162 + ((unint64_t)v161 << 14));
          int v157 = 0;
          int v157 = mprotect(v158, 0x4000uLL, 1);
          if (v157) {
            malloc_report(3, (uint64_t)"Failed to create guard block at %p (%d)\n");
          }
          if (v81 == 4095) {
            unsigned int v5 = 4094;
          }
          else {
            unsigned int v5 = 4095;
          }
          uint64_t v150 = v83;
          unint64_t v149 = v82;
          unsigned int v148 = v5;
          unsigned int v154 = v5;
          int v147 = ((unsigned __int16)((_WORD)v154 << 6) | (unsigned __int16)(v154 >> 6)) & 0xFFF;
          unint64_t v146 = 0;
          uint64_t v152 = v83;
          unint64_t v151 = v82;
          unint64_t v153 = v82;
          uint64_t v156 = v83;
          unint64_t v155 = v82 & 0xFFFFFFFFFC000000;
          unint64_t v146 = v82 & 0xFFFFFFFFFC000000 ^ *(void *)(v83 + 28688);
          *(_DWORD *)(v146 + 4 * (((unsigned __int16)((_WORD)v5 << 6) | (unsigned __int16)(v5 >> 6)) & 0xFFF)) = nanov2_create_guard_block_in_use_block;
          BOOL v145 = (void *)(v149 + ((unint64_t)v148 << 14));
          int v144 = 0;
          int v144 = mprotect(v145, 0x4000uLL, 1);
          if (v144) {
            malloc_report(3, (uint64_t)"Failed to create guard block at %p (%d)\n");
          }
        }
      }
    }
    else
    {
      new_regiounsigned __int8 n = v17 - 0x4000000;
    }
    os_unfair_lock_t lock = (os_unfair_lock_t)(a1 + 28716);
    int v106 = 0;
    uint64_t v108 = 3;
    uint64_t v109 = 3;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    int v106 = *(void *)(StatusReg + 24);
    int v105 = 0;
    int v104 = v106;
    int v103 = 0;
    int v6 = v106;
    int v7 = v106;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 28716), (unsigned int *)&v7, 0, memory_order_release, memory_order_relaxed);
    if (v7 != v6) {
      int v104 = v7;
    }
    BOOL v102 = v7 == v6;
    if (v7 != v6) {
      os_unfair_lock_unlock(lock);
    }
    if (!v18)
    {
      char v26 = 0;
      continue;
    }
    return 0;
  }
}

void *nanov2_allocate_from_block(uint64_t a1, atomic_uint *a2, int a3)
{
  uint64_t v14 = a1;
  BOOL v13 = a2;
  int v12 = a3;
  int v11 = 0;
  char v10 = 0;
  uint64_t v40 = a1;
  int v39 = a2;
  int v38 = a3;
  int v37 = &v11;
  unsigned int v36 = &v10;
  unsigned int v35 = 0;
  unsigned int v34 = 0;
  unsigned int v33 = *(_DWORD *)a2;
  unsigned int v34 = v33;
  unsigned int v35 = v33;
  unint64_t v32 = 0;
  while (1)
  {
    unsigned int v42 = v35;
    BOOL v8 = 0;
    if ((v35 & 0x80000000) != 0) {
      BOOL v8 = (v42 & 0x7FF) != 2044;
    }
    if (!v8)
    {
      int v41 = 0;
      goto LABEL_34;
    }
    int v31 = 0;
    uint64_t v30 = 0;
    int v29 = 0;
    unsigned int v28 = (((((v35 >> 11) & 0x3FF) - 1) & 0x3FF) << 11) & 0x1FFFFF | (((((v35 >> 21) & 0x3FF) + 1) & 0x3FF) << 21) & 0x7FFFFFFF | 0x80000000;
    BOOL v27 = ((v35 >> 11) & 0x3FF) == 0;
    if ((v35 & 0x7FF) == 0x7FB || (v35 & 0x7FF) == 0x7FD)
    {
      int v3 = v27 ? 2044 : 2043;
      unsigned int v28 = v28 & 0xFFFFF800 | v3;
      int v31 = slots_by_size_class[v38] - ((v35 >> 11) & 0x3FF) - 1;
    }
    else
    {
      int v29 = 1;
      if (!v32)
      {
        uint64_t v55 = v40;
        int v54 = v39;
        int v63 = v39;
        unint64_t v53 = (unint64_t)v39 & 0xFFFFFFFFFFFFC000;
        uint64_t v56 = v39;
        unint64_t v52 = (unint64_t)v39 & 0xFFFFFFFFFC000000;
        unsigned int v51 = (uint64_t)((uint64_t)v39 - ((unint64_t)v39 & 0xFFFFFFFFFFFFC000)) / 4;
        unsigned int v65 = v51;
        int v50 = ((unsigned __int16)((_WORD)v65 << 6) | (unsigned __int16)(v65 >> 6)) & 0xFFF;
        unint64_t v32 = ((unint64_t)v39 & 0xFFFFFFFFFC000000)
            + ((unint64_t)(((unsigned __int16)((_WORD)v65 << 6) | (unsigned __int16)(v65 >> 6)) & 0xFFF) << 14);
      }
      int v31 = (v35 & 0x7FF) - 1;
      unint64_t v62 = v32;
      int v61 = v38;
      int v60 = v31;
      int v67 = v38;
      uint64_t v30 = (void *)(v32 + 16 * (v38 + 1) * v31);
      char v26 = v30;
      __int16 v7 = v27 ? 2044 : v26[1];
      unsigned int v28 = v28 & 0xFFFFF800 | v7 & 0x7FF;
    }
    unsigned int v25 = v35;
    BOOL v24 = 0;
    unsigned int v22 = v28;
    unsigned int v23 = v28;
    unsigned int v4 = v35;
    unsigned int v5 = v35;
    atomic_compare_exchange_strong_explicit(v39, &v5, v28, memory_order_relaxed, memory_order_relaxed);
    if (v5 != v4) {
      unsigned int v25 = v5;
    }
    BOOL v21 = v5 == v4;
    BOOL v24 = v5 == v4;
    unsigned int v35 = v25;
    BOOL v20 = v24;
    if (v5 == v4) {
      break;
    }
    if ((v35 & 0x7FF) == 0x7FD || (v35 & 0x7FF) == 0x7FE || (v35 & 0x7FF) == 0x7FF)
    {
      os_unfair_lock_s *v37 = v39;
      int v41 = 0;
      goto LABEL_34;
    }
  }
  if (!v30)
  {
    if (!v32)
    {
      uint64_t v48 = v40;
      int64_t v47 = v39;
      int v64 = v39;
      unint64_t v46 = (unint64_t)v39 & 0xFFFFFFFFFFFFC000;
      int v49 = v39;
      unint64_t v45 = (unint64_t)v39 & 0xFFFFFFFFFC000000;
      unsigned int v44 = (uint64_t)((uint64_t)v39 - ((unint64_t)v39 & 0xFFFFFFFFFFFFC000)) / 4;
      unsigned int v66 = v44;
      int v43 = ((unsigned __int16)((_WORD)v66 << 6) | (unsigned __int16)(v66 >> 6)) & 0xFFF;
      unint64_t v32 = ((unint64_t)v39 & 0xFFFFFFFFFC000000)
          + ((unint64_t)(((unsigned __int16)((_WORD)v66 << 6) | (unsigned __int16)(v66 >> 6)) & 0xFFF) << 14);
    }
    unint64_t v59 = v32;
    int v58 = v38;
    int v57 = v31;
    int v68 = v38;
    uint64_t v30 = (void *)(v32 + 16 * (v38 + 1) * v31);
  }
  if (v29)
  {
    unint64_t v19 = v30;
    uint64_t v18 = 0;
    uint64_t v17 = 0;
    uint64_t v16 = *v30;
    uint64_t v17 = v16;
    uint64_t v15 = v16;
    uint64_t v18 = v16;
    if ((void *)(v16 ^ *(void *)(v40 + 28696)) != v30) {
      *unsigned int v36 = 1;
    }
  }
  int v41 = v30;
LABEL_34:
  unint64_t v9 = v41;
  if (v10) {
    nanov2_guard_corruption_detected();
  }
  if (v11) {
    nanov2_madvise_block(v14, v11, v12, 2047);
  }
  return v9;
}

void *nanov2_create_zone(uint64_t a1, int a2)
{
  if (_malloc_engaged_nano != 2)
  {
    __break(1u);
    JUMPOUT(0x4F558);
  }
  based_mach_vm_address_t pages = (void *)nano_common_allocate_based_pages((vm_page_mask + 29264) & ~vm_page_mask, 0, 0, 1, 0);
  if (based_pages)
  {
    *((_DWORD *)based_pages + 26) = 16;
    unsigned int v44 = 0;
    if (nanov2_size) {
      unsigned int v44 = nanov2_size;
    }
    int v43 = 0;
    if (v44) {
      int v43 = v44;
    }
    *((void *)based_pages + 2) = v43;
    if (malloc_zero_policy == 2)
    {
      unsigned int v42 = 0;
      if (nanov2_malloc_zero_on_alloc) {
        unsigned int v42 = nanov2_malloc_zero_on_alloc;
      }
      int v41 = 0;
      if (v42) {
        int v41 = v42;
      }
      *((void *)based_pages + 3) = v41;
      uint64_t v40 = 0;
      if (nanov2_malloc_type_zero_on_alloc) {
        uint64_t v40 = nanov2_malloc_type_zero_on_alloc;
      }
      int v39 = 0;
      if (v40) {
        int v39 = v40;
      }
      *((void *)based_pages + 20) = v39;
    }
    else
    {
      int v38 = 0;
      if (nanov2_malloc) {
        int v38 = nanov2_malloc;
      }
      int v37 = 0;
      if (v38) {
        int v37 = v38;
      }
      *((void *)based_pages + 3) = v37;
      unsigned int v36 = 0;
      if (nanov2_malloc_type) {
        unsigned int v36 = nanov2_malloc_type;
      }
      unsigned int v35 = 0;
      if (v36) {
        unsigned int v35 = v36;
      }
      *((void *)based_pages + 20) = v35;
    }
    unsigned int v34 = 0;
    if (nanov2_calloc) {
      unsigned int v34 = nanov2_calloc;
    }
    unsigned int v33 = 0;
    if (v34) {
      unsigned int v33 = v34;
    }
    *((void *)based_pages + 4) = v33;
    unint64_t v32 = 0;
    if (nanov2_valloc) {
      unint64_t v32 = nanov2_valloc;
    }
    int v31 = 0;
    if (v32) {
      int v31 = v32;
    }
    *((void *)based_pages + 5) = v31;
    uint64_t v30 = 0;
    if (nanov2_free) {
      uint64_t v30 = nanov2_free;
    }
    int v29 = 0;
    if (v30) {
      int v29 = v30;
    }
    *((void *)based_pages + 6) = v29;
    unsigned int v28 = 0;
    if (nanov2_realloc) {
      unsigned int v28 = nanov2_realloc;
    }
    BOOL v27 = 0;
    if (v28) {
      BOOL v27 = v28;
    }
    *((void *)based_pages + 7) = v27;
    char v26 = 0;
    if (nanov2_destroy) {
      char v26 = nanov2_destroy;
    }
    unsigned int v25 = 0;
    if (v26) {
      unsigned int v25 = v26;
    }
    *((void *)based_pages + 8) = v25;
    BOOL v24 = 0;
    if (nanov2_batch_malloc) {
      BOOL v24 = nanov2_batch_malloc;
    }
    unsigned int v23 = 0;
    if (v24) {
      unsigned int v23 = v24;
    }
    *((void *)based_pages + 10) = v23;
    unsigned int v22 = 0;
    if (nanov2_batch_free) {
      unsigned int v22 = nanov2_batch_free;
    }
    BOOL v21 = 0;
    if (v22) {
      BOOL v21 = v22;
    }
    *((void *)based_pages + 11) = v21;
    *((void *)based_pages + 12) = nanov2_introspect;
    BOOL v20 = 0;
    if (nanov2_memalign) {
      BOOL v20 = nanov2_memalign;
    }
    unint64_t v19 = 0;
    if (v20) {
      unint64_t v19 = v20;
    }
    *((void *)based_pages + 14) = v19;
    uint64_t v18 = 0;
    if (nanov2_free_definite_size) {
      uint64_t v18 = nanov2_free_definite_size;
    }
    uint64_t v17 = 0;
    if (v18) {
      uint64_t v17 = v18;
    }
    *((void *)based_pages + 15) = v17;
    uint64_t v16 = 0;
    if (nanov2_pressure_relief) {
      uint64_t v16 = nanov2_pressure_relief;
    }
    uint64_t v15 = 0;
    if (v16) {
      uint64_t v15 = v16;
    }
    *((void *)based_pages + 16) = v15;
    uint64_t v14 = 0;
    if (nanov2_claimed_address) {
      uint64_t v14 = nanov2_claimed_address;
    }
    BOOL v13 = 0;
    if (v14) {
      BOOL v13 = v14;
    }
    *((void *)based_pages + 17) = v13;
    int v12 = 0;
    if (nanov2_try_free_default) {
      int v12 = nanov2_try_free_default;
    }
    int v11 = 0;
    if (v12) {
      int v11 = v12;
    }
    *((void *)based_pages + 18) = v11;
    char v10 = 0;
    if (nanov2_calloc_type) {
      char v10 = nanov2_calloc_type;
    }
    unint64_t v9 = 0;
    if (v10) {
      unint64_t v9 = v10;
    }
    *((void *)based_pages + 21) = v9;
    BOOL v8 = 0;
    if (nanov2_realloc_type) {
      BOOL v8 = nanov2_realloc_type;
    }
    __int16 v7 = 0;
    if (v8) {
      __int16 v7 = v8;
    }
    *((void *)based_pages + 22) = v7;
    int v6 = 0;
    if (nanov2_memalign_type) {
      int v6 = nanov2_memalign_type;
    }
    unsigned int v5 = 0;
    if (v6) {
      unsigned int v5 = v6;
    }
    *((void *)based_pages + 23) = v5;
    *(void *)based_mach_vm_address_t pages = 0;
    *((void *)based_pages + 1) = 0;
    mprotect(based_pages, 0xC8uLL, 1);
    *((_DWORD *)based_pages + 7169) = a2;
    *((void *)based_pages + 3588) = a1;
    uint64_t v45 = malloc_entropy[0] & 0xFFFFFFFF0000;
    if ((malloc_entropy[0] & 0xFFFFFFFF0000) == 0)
    {
      uint64_t v45 = qword_C4340 & 0xFFFFFFFF0000;
      if ((qword_C4340 & 0xFFFFFFFF0000) == 0) {
        uint64_t v45 = 0xDEADDEAD0000;
      }
    }
    *((void *)based_pages + 3587) = v45;
    *((void *)based_pages + 3585) = (unint64_t)qword_C4340 >> 52;
    *((void *)based_pages + 3586) = *((void *)based_pages + 3585) << 14;
    *((_DWORD *)based_pages + 7178) = 0;
    *((_DWORD *)based_pages + 7179) = 0;
    *((_DWORD *)based_pages + 7184) = 0;
    if (nanov2_allocate_region(0x300000000uLL))
    {
      *(_WORD *)((*((void *)based_pages + 3586) ^ 0x300000000)
               + 4
               * (((unsigned __int16)((unsigned __int16)*((void *)based_pages + 3585) << 6) | (unsigned __int16)(*((void *)based_pages + 3585) >> 6)) & 0xFFF)) = 0;
      *((void *)based_pages + 3590) = 0x300000000;
      atomic_store(0x304000000uLL, (unint64_t *)based_pages + 3591);
      *((_DWORD *)based_pages + 7186) = 1;
      if ((*((_DWORD *)based_pages + 7169) & 7) != 0)
      {
        int v50 = ((unsigned __int16)((unsigned __int16)*((void *)based_pages + 3585) << 6) | (unsigned __int16)(*((void *)based_pages + 3585) >> 6)) & 0xFFF;
        BOOL v2 = (((unsigned __int16)((unsigned __int16)*((void *)based_pages + 3585) << 6) | (unsigned __int16)(*((void *)based_pages + 3585) >> 6)) & 0xFFF) == 0;
        *(_DWORD *)((*((void *)based_pages + 3586) ^ 0x300000000)
                  + 4 * (((v2 << 6) | (v2 >> 6)) & 0xFFF)) = nanov2_create_guard_block_in_use_block;
        if (mprotect((void *)(((unint64_t)v2 << 14) + 0x300000000), 0x4000uLL, 1)) {
          malloc_report(3, (uint64_t)"Failed to create guard block at %p (%d)\n");
        }
        if (v50 == 4095) {
          unsigned int v3 = 4094;
        }
        else {
          unsigned int v3 = 4095;
        }
        *(_DWORD *)((*((void *)based_pages + 3586) ^ 0x300000000)
                  + 4 * (((unsigned __int16)((_WORD)v3 << 6) | (unsigned __int16)(v3 >> 6)) & 0xFFF)) = nanov2_create_guard_block_in_use_block;
        if (mprotect((void *)(((unint64_t)v3 << 14) + 0x300000000), 0x4000uLL, 1)) {
          malloc_report(3, (uint64_t)"Failed to create guard block at %p (%d)\n");
        }
      }
      return based_pages;
    }
    else
    {
      nano_common_deallocate_pages((mach_vm_address_t)based_pages, (vm_page_mask + 29264) & ~vm_page_mask, 0);
      _malloc_engaged_nano = 0;
      malloc_report(5, (uint64_t)"nano zone abandoned due to inability to reserve vm space.\n");
      return 0;
    }
  }
  else
  {
    _malloc_engaged_nano = 0;
    return 0;
  }
}

uint64_t nanov2_valloc(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t))(*(void *)(a1 + 28704) + 40))(*(void *)(a1 + 28704), a2);
}

void nanov2_destroy(mach_vm_address_t a1)
{
}

BOOL nanov2_allocate_region(mach_vm_address_t a1)
{
  if (malloc_tracing_enabled) {
    kdebug_trace();
  }
  BOOL vm_space = nano_common_allocate_vm_space(a1, 0x20000000uLL);
  if (malloc_tracing_enabled) {
    kdebug_trace();
  }
  return vm_space;
}

uint64_t nanov2_forked_malloc(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t))(*(void *)(a1 + 28704) + 24))(*(void *)(a1 + 28704), a2);
}

uint64_t nanov2_forked_malloc_type(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)(a1 + 28704) + 160))(*(void *)(a1 + 28704), a2, a3);
}

void *nanov2_forked_free(void *result, unint64_t a2)
{
  unsigned int v3 = result;
  if (a2)
  {
    uint64_t result = (void *)nanov2_pointer_size(result, a2, 0);
    if (!result && a2 >> 29 != 24) {
      return (void *)(*(uint64_t (**)(void, unint64_t))(v3[3588] + 48))(v3[3588], a2);
    }
  }
  return result;
}

void *nanov2_forked_free_definite_size(void *a1, unint64_t a2)
{
  return nanov2_forked_free(a1, a2);
}

uint64_t nanov2_forked_realloc(void *a1, unint64_t a2, uint64_t a3)
{
  if (!a2) {
    return nanov2_forked_malloc((uint64_t)a1, a3);
  }
  if (!nanov2_pointer_size(a1, a2, 0)) {
    return (*(uint64_t (**)(void, unint64_t, uint64_t))(a1[3588] + 56))(a1[3588], a2, a3);
  }
  if (!a3) {
    return nanov2_forked_malloc((uint64_t)a1, 1);
  }
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t))(a1[3588] + 24))(a1[3588], a3);
  if (!v4) {
    return 0;
  }
  _platform_memmove();
  return v4;
}

uint64_t nanov2_forked_realloc_type(void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return nanov2_forked_malloc_type((uint64_t)a1, a3, a4);
  }
  if (!nanov2_pointer_size(a1, a2, 0)) {
    return (*(uint64_t (**)(void, unint64_t, uint64_t, uint64_t))(a1[3588] + 176))(a1[3588], a2, a3, a4);
  }
  if (!a3) {
    return nanov2_forked_malloc((uint64_t)a1, 1);
  }
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t, uint64_t))(a1[3588] + 160))(a1[3588], a3, a4);
  if (!v5) {
    return 0;
  }
  _platform_memmove();
  return v5;
}

void *nanov2_forked_batch_free(void *result, uint64_t a2, unsigned int a3)
{
  __int16 v7 = result;
  unsigned int v5 = a3;
  if (a3)
  {
    while (v5--)
    {
      unint64_t v4 = *(void *)(a2 + 8 * v5);
      if (v4) {
        uint64_t result = nanov2_forked_free(v7, v4);
      }
    }
  }
  return result;
}

uint64_t nanov2_forked_zone(void *a1)
{
  mprotect(a1, 0xC8uLL, 3);
  int v31 = 0;
  if (nanov2_size) {
    int v31 = nanov2_size;
  }
  uint64_t v30 = 0;
  if (v31) {
    uint64_t v30 = v31;
  }
  a1[2] = v30;
  int v29 = 0;
  if (nanov2_forked_malloc) {
    int v29 = nanov2_forked_malloc;
  }
  unsigned int v28 = 0;
  if (v29) {
    unsigned int v28 = v29;
  }
  a1[3] = v28;
  BOOL v27 = 0;
  if (nanov2_forked_calloc) {
    BOOL v27 = nanov2_forked_calloc;
  }
  char v26 = 0;
  if (v27) {
    char v26 = v27;
  }
  a1[4] = v26;
  unsigned int v25 = 0;
  if (nanov2_valloc) {
    unsigned int v25 = nanov2_valloc;
  }
  BOOL v24 = 0;
  if (v25) {
    BOOL v24 = v25;
  }
  a1[5] = v24;
  unsigned int v23 = 0;
  if (nanov2_forked_free) {
    unsigned int v23 = nanov2_forked_free;
  }
  unsigned int v22 = 0;
  if (v23) {
    unsigned int v22 = v23;
  }
  a1[6] = v22;
  BOOL v21 = 0;
  if (nanov2_forked_realloc) {
    BOOL v21 = nanov2_forked_realloc;
  }
  BOOL v20 = 0;
  if (v21) {
    BOOL v20 = v21;
  }
  a1[7] = v20;
  unint64_t v19 = 0;
  if (nanov2_destroy) {
    unint64_t v19 = nanov2_destroy;
  }
  uint64_t v18 = 0;
  if (v19) {
    uint64_t v18 = v19;
  }
  a1[8] = v18;
  uint64_t v17 = 0;
  if (nanov2_forked_batch_malloc) {
    uint64_t v17 = nanov2_forked_batch_malloc;
  }
  uint64_t v16 = 0;
  if (v17) {
    uint64_t v16 = v17;
  }
  a1[10] = v16;
  uint64_t v15 = 0;
  if (nanov2_forked_batch_free) {
    uint64_t v15 = nanov2_forked_batch_free;
  }
  uint64_t v14 = 0;
  if (v15) {
    uint64_t v14 = v15;
  }
  a1[11] = v14;
  a1[12] = nanov2_introspect;
  BOOL v13 = 0;
  if (nanov2_forked_memalign) {
    BOOL v13 = nanov2_forked_memalign;
  }
  int v12 = 0;
  if (v13) {
    int v12 = v13;
  }
  a1[14] = v12;
  int v11 = 0;
  if (nanov2_forked_free_definite_size) {
    int v11 = nanov2_forked_free_definite_size;
  }
  char v10 = 0;
  if (v11) {
    char v10 = v11;
  }
  a1[15] = v10;
  a1[17] = nanov2_forked_claimed_address;
  a1[18] = 0;
  unint64_t v9 = 0;
  if (nanov2_forked_malloc_type) {
    unint64_t v9 = nanov2_forked_malloc_type;
  }
  BOOL v8 = 0;
  if (v9) {
    BOOL v8 = v9;
  }
  a1[20] = v8;
  __int16 v7 = 0;
  if (nanov2_forked_calloc_type) {
    __int16 v7 = nanov2_forked_calloc_type;
  }
  int v6 = 0;
  if (v7) {
    int v6 = v7;
  }
  a1[21] = v6;
  unsigned int v5 = 0;
  if (nanov2_forked_realloc_type) {
    unsigned int v5 = nanov2_forked_realloc_type;
  }
  unint64_t v4 = 0;
  if (v5) {
    unint64_t v4 = v5;
  }
  a1[22] = v4;
  unsigned int v3 = 0;
  if (nanov2_forked_memalign_type) {
    unsigned int v3 = nanov2_forked_memalign_type;
  }
  BOOL v2 = 0;
  if (v3) {
    BOOL v2 = v3;
  }
  a1[23] = v2;
  return mprotect(a1, 0xC8uLL, 1);
}

uint64_t nanov2_forked_calloc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)(a1 + 28704) + 32))(*(void *)(a1 + 28704), a2, a3);
}

uint64_t nanov2_forked_batch_malloc(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, void))(*(void *)(a1 + 28704) + 80))(*(void *)(a1 + 28704), a2, a3, a4);
}

uint64_t nanov2_forked_memalign(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)(a1 + 28704) + 112))(*(void *)(a1 + 28704), a2, a3);
}

uint64_t nanov2_forked_claimed_address()
{
  return 1;
}

uint64_t nanov2_forked_calloc_type(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 28704) + 168))(*(void *)(a1 + 28704), a2, a3, a4);
}

uint64_t nanov2_forked_memalign_type(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 28704) + 184))(*(void *)(a1 + 28704), a2, a3, a4);
}

void *nanov2_allocate_outlined(uint64_t a1, atomic_uint **a2, uint64_t a3, unsigned int a4, int a5, atomic_uint *a6, uint64_t a7, char a8, char a9, uint64_t a10)
{
  char v19 = a8 & 1;
  if (a7) {
    nanov2_guard_corruption_detected();
  }
  if (a6) {
    nanov2_madvise_block(a1, a6, a4, 2047);
  }
  if ((*(unsigned __int16 *)(a1 + 28672) & (1 << a4)) != 0)
  {
    uint64_t v17 = *(void *)(a1 + 28704);
    if (a9) {
      uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 160))(v17, a3, a10);
    }
    else {
      uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 24))(v17, a3);
    }
    uint64_t v18 = (void *)v10;
  }
  else
  {
    uint64_t v16 = (atomic_uint *)(a1 + 24576 + ((unint64_t)a4 << 8) + 4 * a5);
    os_unfair_lock_lock_with_options();
    if (!*a2 || (uint64_t v18 = nanov2_allocate_from_block(a1, *a2, a4)) == 0) {
      uint64_t v18 = nanov2_find_block_and_allocate(a1, a4, a2);
    }
    int v11 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    int v12 = v11;
    atomic_compare_exchange_strong_explicit(v16, (unsigned int *)&v12, 0, memory_order_release, memory_order_relaxed);
    if (v12 != v11) {
      os_unfair_lock_unlock((os_unfair_lock_t)v16);
    }
    if (!v18)
    {
      atomic_fetch_or_explicit((atomic_ushort *volatile)(a1 + 28672), 1 << a4, memory_order_relaxed);
      uint64_t v15 = *(void *)(a1 + 28704);
      if (a9) {
        uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 160))(v15, a3, a10);
      }
      else {
        uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 24))(v15, a3);
      }
      uint64_t v18 = (void *)v13;
    }
  }
  if (!v18)
  {
    malloc_set_errno_fast(1, 12);
    return v18;
  }
  if (malloc_zero_policy)
  {
    if (malloc_zero_policy != 1)
    {
      if (malloc_zero_policy != 2) {
        return v18;
      }
      goto LABEL_28;
    }
    if (v19)
    {
LABEL_28:
      _platform_memset();
      return v18;
    }
    void *v18 = 0;
  }
  else
  {
    void *v18 = 0;
    v18[1] = 0;
  }
  return v18;
}

void nanov2_guard_corruption_detected()
{
}

uint64_t nanov2_ptr_in_use_enumerator(unsigned int a1, uint64_t a2, int a3, void *a4, uint64_t (*a5)(int a1, uint64_t a2, uint64_t a3, void *a4), void (*a6)(void, uint64_t, uint64_t, unint64_t *, uint64_t))
{
  unsigned int v59 = a1;
  uint64_t v58 = a2;
  int v57 = a3;
  uint64_t v56 = a4;
  uint64_t v55 = a5;
  int v54 = a6;
  nanov2_configure();
  if ((v57 & 3) != 0)
  {
    unint64_t v53 = 0;
    bzero(v110, 0x200uLL);
    unsigned int v51 = 0;
    uint64_t v55 = reader_or_in_memory_fallback_4((uint64_t)v55, v59);
    unsigned int v52 = v55(v59, (uint64_t)v56, 29264, &v53);
    if (v52)
    {
      return v52;
    }
    else
    {
      int v50 = 0;
      BOOL v14 = 0;
      if (mach_task_is_self()) {
        BOOL v14 = v56 == v53;
      }
      int v50 = v14;
      _platform_memmove();
      unint64_t v53 = v110;
      int v61 = v110;
      unsigned int v100 = v110[7170];
      int v49 = ((unsigned __int16)((_WORD)v100 << 6) | (unsigned __int16)(v100 >> 6)) & 0xFFF;
      uint64_t v48 = v111;
      unint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)&v112, memory_order_acquire);
      unint64_t v46 = explicit;
      v44[1] = explicit;
      unint64_t v47 = explicit;
      while (v48)
      {
        v44[0] = 0;
        unsigned int v43 = 0;
        unsigned int v43 = v55(v59, v48, 0x20000000, v44);
        if (v43) {
          return v43;
        }
        uint64_t v42 = v48 - v44[0];
        uint64_t v62 = v48;
        unint64_t v41 = v48;
        unint64_t v40 = 0;
        unsigned int v66 = v53;
        uint64_t v65 = v48;
        unint64_t v64 = v47;
        unint64_t v63 = 0;
        unint64_t v101 = v47;
        unint64_t v102 = v47 - 1;
        if (v48 == ((v47 - 1) & 0xFFFFFFFFE0000000))
        {
          unint64_t v63 = v64;
        }
        else
        {
          uint64_t v67 = v65 + 0x20000000;
          unint64_t v63 = v65 + 0x20000000;
        }
        unint64_t v40 = v63;
        unint64_t v38 = 0;
        uint64_t v39 = 0;
        while (v41 < v40)
        {
          int v37 = 0;
          unsigned int v69 = v53;
          unint64_t v68 = v41;
          unint64_t v77 = v41;
          int v106 = v53;
          unint64_t v105 = v41 & 0xFFFFFFFFFC000000;
          int v37 = (unsigned int *)((v41 & 0xFFFFFFFFFC000000 ^ v53[3586]) - v42);
          unsigned int v36 = v37;
          unsigned int v35 = 0;
          while (v35 < 0x1000)
          {
            if (v35 != v49)
            {
              unsigned int v34 = 0;
              unsigned int v33 = 0;
              unsigned int v32 = *v36;
              unsigned int v33 = v32;
              unsigned int v34 = v32;
              unsigned int v108 = v32;
              BOOL v13 = 0;
              if ((v32 & 0x7FF) != 0)
              {
                BOOL v13 = 0;
                if ((v108 & 0x7FF) != 0x7FE)
                {
                  BOOL v13 = 0;
                  if ((v108 & 0x7FF) != 0x7FF) {
                    BOOL v13 = (v108 & 0x7FF) != 2042;
                  }
                }
              }
              if (v13)
              {
                unsigned int v73 = v53;
                unint64_t v72 = v41;
                unsigned int v71 = v35;
                unsigned int v94 = v35;
                int v70 = ((unsigned __int16)((_WORD)v94 << 6) | (unsigned __int16)(v94 >> 6)) & 0xFFF;
                unint64_t v31 = v41
                    + ((unint64_t)(((unsigned __int16)((_WORD)v94 << 6) | (unsigned __int16)(v94 >> 6)) & 0xFFF) << 14);
                if ((v57 & 2) != 0)
                {
                  unint64_t v38 = v31;
                  uint64_t v39 = 0x4000;
                  v54(v59, v58, 2, &v38, 1);
                }
                if (v57)
                {
                  int v30 = 0;
                  int v76 = v53;
                  unint64_t v75 = v31;
                  unsigned int v74 = 0;
                  unint64_t v107 = v31;
                  unsigned int v74 = (v31 >> 14) & 0xFFF ^ v53[3585];
                  int v30 = ptr_offset_to_size_class[v74 >> 6];
                  int v98 = v30;
                  int v29 = 16 * (v30 + 1);
                  signed int v28 = 0;
                  signed int v28 = slots_by_size_class[v30];
                  int v27 = 0;
                  if ((v34 & 0x7FF) == 0x7FB || (v34 & 0x7FF) == 0x7FC)
                  {
                    if ((v34 & 0x7FF) == 0x7FB) {
                      int v12 = v28 - ((v34 >> 11) & 0x3FF) - 1;
                    }
                    else {
                      int v12 = v28;
                    }
                    int v27 = v12;
                    for (int i = 0; i < v27; ++i)
                    {
                      unint64_t v93 = v31;
                      int v92 = v30;
                      int v91 = i;
                      int v95 = v30;
                      v109[2 * i] = v31 + 16 * (v30 + 1) * i;
                      v109[2 * i + 1] = v29;
                    }
                  }
                  else
                  {
                    unsigned int v25 = 64 - __clz(v28);
                    if (v50)
                    {
                      uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v53[3588] + 32);
                      uint64_t v11 = v53[3588];
                      uint64_t v6 = bitarray_size(v25);
                      __int16 v7 = (void *)v10(v11, 1, v6);
                    }
                    else
                    {
                      __int16 v7 = bitarray_create(v25);
                    }
                    unsigned int v51 = v7;
                    for (signed int j = 0; j < v28; ++j)
                      bitarray_set((uint64_t)v51, v25, j);
                    signed int v23 = v34 & 0x7FF;
                    for (int k = 0; v23 != 2043; ++k)
                    {
                      if (--v23 < 0 || v23 >= v28 || !bitarray_get((uint64_t)v51, v25, v23)) {
                        break;
                      }
                      bitarray_zap((uint64_t)v51, v25, v23);
                      unint64_t v90 = v31;
                      int v89 = v30;
                      signed int v88 = v23;
                      int v96 = v30;
                      unint64_t v21 = v31 + 16 * (v30 + 1) * v23;
                      unint64_t v20 = v21 - v42;
                      signed int v23 = (unsigned __int16)*(void *)(v21 - v42 + 8);
                    }
                    int v19 = ((v34 >> 11) & 0x3FF) + 1;
                    int v18 = v28 - v19;
                    unsigned int v17 = v28 - v19 + k;
                    unsigned int v16 = 0;
                    while ((bitarray_zap_first_set((uint64_t)v51, v25, &v16) & 1) != 0 && v16 < v17)
                    {
                      unint64_t v87 = v31;
                      int v86 = v30;
                      unsigned int v85 = v16;
                      int v97 = v30;
                      v109[2 * v27] = v31 + (int)(16 * (v30 + 1) * v16);
                      v109[2 * v27++ + 1] = v29;
                    }
                    _free(v51);
                  }
                  if (v27) {
                    v54(v59, v58, 1, v109, v27);
                  }
                }
              }
            }
            ++v35;
            ++v36;
          }
          v41 += 0x4000000;
        }
        unint64_t v80 = v53;
        uint64_t v79 = v48;
        unint64_t v78 = 0;
        uint64_t v83 = v53;
        uint64_t v82 = v48;
        uint64_t v84 = v48;
        int v104 = v53;
        unint64_t v103 = v48 & 0xFFFFFFFFFC000000;
        unint64_t v78 = v48 & 0xFFFFFFFFFC000000 ^ v53[3586];
        int v81 = v53;
        unsigned int v99 = v53[3585];
        unsigned __int16 v15 = *(_WORD *)(v78 + 4 * (((unsigned __int16)((_WORD)v99 << 6) | (unsigned __int16)(v99 >> 6)) & 0xFFF) - v42);
        if (v15) {
          uint64_t v9 = v48 + ((unint64_t)v15 << 29);
        }
        else {
          uint64_t v9 = 0;
        }
        uint64_t v48 = v9;
      }
      return 0;
    }
  }
  else
  {
    return 0;
  }
}

unint64_t nanov2_good_size(uint64_t a1, unint64_t a2)
{
  if (a2 <= 0x100) {
    return _nano_common_good_size(a2);
  }
  uint64_t v3 = 0;
  if (*(void *)(*(void *)(a1 + 28704) + 96)) {
    uint64_t v3 = *(void *)(*(void *)(a1 + 28704) + 96);
  }
  return (*(uint64_t (**)(void, unint64_t))(v3 + 8))(*(void *)(a1 + 28704), a2);
}

uint64_t nanov2_check()
{
  return 1;
}

uint64_t nanov2_print_self(const void *a1, int a2)
{
  if (a2) {
    unsigned int v2 = 2;
  }
  else {
    unsigned int v2 = 0;
  }
  return nanov2_print(mach_task_self_, v2, a1, _malloc_default_reader_4, (void (*)(const char *, ...))malloc_report_simple);
}

uint64_t nanov2_statistics_self(const void *a1, uint64_t a2)
{
  return nanov2_statistics(mach_task_self_, a1, _malloc_default_reader_4, (void (*)(const char *, ...))malloc_report_simple, a2);
}

uint64_t nanov2_locked()
{
  return 0;
}

uint64_t nanov2_print_task(unsigned int a1, unsigned int a2, const void *a3, uint64_t (*a4)(int a1, uint64_t a2, uint64_t a3, uint64_t *a4), void (*a5)(const char *, ...))
{
  return nanov2_print(a1, a2, a3, a4, a5);
}

uint64_t nanov2_statistics_task(unsigned int a1, const void *a2, uint64_t (*a3)(int a1, uint64_t a2, uint64_t a3, uint64_t *a4), uint64_t a4)
{
  return nanov2_statistics(a1, a2, a3, 0, a4);
}

uint64_t (*reader_or_in_memory_fallback_4(uint64_t a1, int a2))(int a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a1) {
    return (uint64_t (*)(int, uint64_t, uint64_t, void *))a1;
  }
  BOOL v3 = 1;
  if (a2) {
    BOOL v3 = mach_task_is_self() != 0;
  }
  if (!v3)
  {
    __break(1u);
    JUMPOUT(0x5393CLL);
  }
  return _malloc_default_reader_4;
}

uint64_t _malloc_default_reader_4(int a1, uint64_t a2, uint64_t a3, void *a4)
{
  BOOL v5 = 1;
  if (a1) {
    BOOL v5 = mach_task_is_self() != 0;
  }
  if (!v5)
  {
    __break(1u);
    JUMPOUT(0x539DCLL);
  }
  *a4 = a2;
  return 0;
}

uint64_t nanov2_print(unsigned int a1, unsigned int a2, const void *a3, uint64_t (*a4)(int a1, uint64_t a2, uint64_t a3, uint64_t *a4), void (*a5)(const char *, ...))
{
  unsigned int v52 = a1;
  unsigned int v51 = a2;
  int v50 = a3;
  int v49 = a4;
  uint64_t v48 = (uint64_t (*)(const char *, ...))a5;
  nanov2_configure();
  uint64_t v47 = 0;
  if (v49(v52, (uint64_t)v50, 29264, &v47)) {
    return v48("Failed to map nanozonev2_s at %p\n", v50);
  }
  long long v45 = 0u;
  long long v46 = 0u;
  nanov2_statistics_task_printer(v52, v50, v49, (void (*)(const char *, ...))v48, (uint64_t)&v45);
  uint64_t v44 = v47 + 28744;
  v48("Nanozonev2 %p: blocks in use: %llu, size in use: %llu allocated size: %llu, allocated regions: %d, region holes: %d\n", v50, v45, *((void *)&v45 + 1), *((void *)&v46 + 1), *(_DWORD *)(v47 + 28744), *(_DWORD *)(v47 + 28748));
  uint64_t result = v48("Current Allocation Blocks By Size Class/Context [CPU]\n");
  for (int i = 0; i < 16; ++i)
  {
    v48("  Class %d: ", i);
    for (int j = 0; j < 64; ++j)
    {
      if (*(void *)(v47 + 0x4000 + ((uint64_t)i << 9) + 8 * j)) {
        v48("%d: %p; ", j, *(const void **)(v47 + 0x4000 + ((uint64_t)i << 9) + 8 * j));
      }
    }
    uint64_t result = v48("\n");
  }
  int v41 = 0;
  uint64_t v53 = v47;
  unsigned int v69 = *(void *)(v47 + 28680);
  int v41 = ((unsigned __int16)((_WORD)v69 << 6) | (unsigned __int16)(v69 >> 6)) & 0xFFF;
  uint64_t v40 = 0;
  uint64_t v40 = *(void *)(v47 + 28720);
  unint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)(v47 + 28728), memory_order_acquire);
  unint64_t v38 = explicit;
  unint64_t v36 = explicit;
  unint64_t v39 = explicit;
  int v35 = 0;
  while (v40)
  {
    v48("\nRegion %d: base address %p\n", v35, (const void *)v40);
    uint64_t v34 = 0;
    uint64_t result = v49(v52, v40, 0x20000000, &v34);
    if (result) {
      return v48("Failed to map nanov2 region at %p\n", (const void *)v40);
    }
    uint64_t v33 = v34 - v40;
    uint64_t v54 = v40;
    unint64_t v32 = v40;
    uint64_t v58 = v47;
    uint64_t v57 = v40;
    unint64_t v56 = v39;
    uint64_t v55 = 0;
    unint64_t v70 = v39;
    unint64_t v71 = v39 - 1;
    if (v40 == ((v39 - 1) & 0xFFFFFFFFE0000000))
    {
      uint64_t v55 = v56;
    }
    else
    {
      uint64_t v59 = v57 + 0x20000000;
      uint64_t v55 = v57 + 0x20000000;
    }
    unint64_t v31 = v55;
    int v30 = 0;
    while (v32 < v31)
    {
      uint64_t v61 = v47;
      unint64_t v60 = v32;
      unint64_t v66 = v32;
      uint64_t v73 = v47;
      unint64_t v72 = v32 & 0xFFFFFFFFFC000000;
      unint64_t v29 = v32 & 0xFFFFFFFFFC000000 ^ *(void *)(v47 + 28688);
      uint64_t v28 = v29 + v33;
      int v27 = 0;
      int v26 = 0;
      int v25 = 0;
      int v24 = 0;
      int v23 = 0;
      for (unsigned int k = 0; k < 0x1000; ++k)
      {
        if (k != v41)
        {
          int v11 = *(_DWORD *)(v28 + 4 * k) & 0x7FF;
          if ((*(_DWORD *)(v28 + 4 * k) & 0x7FF) != 0)
          {
            switch(v11)
            {
              case 2045:
                ++v26;
                break;
              case 2046:
                ++v23;
                break;
              case 2047:
                ++v24;
                break;
              default:
                ++v27;
                break;
            }
          }
          else
          {
            ++v25;
          }
        }
      }
      v48("Arena #%d: base address %p. Blocks - active: %d, madvisable: %d, madvising: %d, madvised: %d, unused: %d\n", v30, (const void *)v32, v27, v26, v23, v24, v25);
      for (int m = 0; m < 16; ++m)
        v107[m] = 0;
      for (unsigned int n = 0; n < 0x1000; ++n)
      {
        if (n != v41)
        {
          int v19 = *(_DWORD *)(v28 + 4 * n);
          uint64_t v83 = v47;
          unsigned int v82 = n;
          unsigned int v84 = n;
          int v81 = ((unsigned __int16)((_WORD)v84 << 6) | (unsigned __int16)(v84 >> 6)) & 0xFFF;
          int v80 = 0;
          int v80 = v81 ^ *(void *)(v47 + 28680);
          int v10 = v19 & 0x7FF;
          if ((v19 & 0x7FF) != 0)
          {
            BOOL v6 = v10 == 2044 || v10 == 2043;
            if (v6 || (v10 - 2045) > 2)
            {
              int v18 = ptr_offset_to_size_class[v80 >> 6];
              ++v107[v18];
            }
          }
        }
      }
      v48("Size classes with allocated blocks: ");
      for (iint i = 0; ii < 16; ++ii)
      {
        if (v107[ii]) {
          v48("%d ", ii);
        }
      }
      uint64_t result = v48("\n");
      if (v51 >= 2)
      {
        for (jint j = 0; jj < 0x1000; ++jj)
        {
          if (jj != v41)
          {
            unsigned int v15 = *(_DWORD *)(v28 + 4 * jj);
            unsigned int v74 = v15;
            BOOL v9 = 0;
            if ((v15 & 0x7FF) != 0)
            {
              BOOL v9 = 0;
              if ((v74 & 0x7FF) != 0x7FE)
              {
                BOOL v9 = 0;
                if ((v74 & 0x7FF) != 0x7FF) {
                  BOOL v9 = (v74 & 0x7FF) != 2042;
                }
              }
            }
            if (v9)
            {
              uint64_t v78 = v47;
              unsigned int v77 = jj;
              unsigned int v79 = jj;
              int v76 = ((unsigned __int16)((_WORD)v77 << 6) | (unsigned __int16)(v77 >> 6)) & 0xFFF;
              int v75 = 0;
              int v75 = v76 ^ *(void *)(v47 + 28680);
              int v14 = ptr_offset_to_size_class[v75 >> 6];
              int v8 = v15 & 0x7FF;
              if ((v15 & 0x7FF) != 0)
              {
                switch(v8)
                {
                  case 2044:
                    BOOL v13 = "FULL";
                    break;
                  case 2045:
                    BOOL v13 = "CAN MADVISE";
                    break;
                  case 2046:
                    BOOL v13 = "MADVISING";
                    break;
                  case 2047:
                    BOOL v13 = "MADVISED";
                    break;
                  default:
                    BOOL v13 = 0;
                    break;
                }
              }
              else
              {
                BOOL v13 = "NOT USED";
              }
              uint64_t v65 = v47;
              unint64_t v64 = v32;
              unsigned int v63 = jj;
              unsigned int v67 = jj;
              int v62 = ((unsigned __int16)((_WORD)v63 << 6) | (unsigned __int16)(v63 >> 6)) & 0xFFF;
              int v68 = v14;
              v48("    Block %d: base %p; metadata: %p, size %d (class %d) in-use: %d ",
                jj,
                (const void *)(v32
                             + ((unint64_t)(((unsigned __int16)((_WORD)v63 << 6) | (unsigned __int16)(v63 >> 6)) & 0xFFF) << 14)),
                (const void *)(v29 + 4 * jj),
                16 * (v14 + 1),
                v14,
                v15 >> 31);
              if (v13)
              {
                uint64_t result = v48("%s\n", v13);
              }
              else
              {
                uint64_t v12 = slots_by_size_class[v14] - ((v15 >> 11) & 0x3FF) - 1;
                if ((v15 & 0x7FF) == 0x7FB) {
                  v48("BUMP (free list empty)");
                }
                else {
                  v48("next_slot (1-based) = %d", v15 & 0x7FF);
                }
                uint64_t result = v48(", allocated slots: %d, free slots = %d, occupancy: %d%%\n", v12, ((v15 >> 11) & 0x3FF) + 1, 100 * (int)v12 / slots_by_size_class[v14]);
              }
            }
          }
        }
      }
      v32 += 0x4000000;
      ++v30;
    }
    uint64_t v95 = v47;
    uint64_t v94 = v40;
    uint64_t v93 = v33;
    unint64_t v92 = v39;
    unint64_t v91 = 0;
    uint64_t v99 = v47;
    uint64_t v98 = v40;
    unint64_t v97 = 0;
    uint64_t v102 = v47;
    uint64_t v101 = v40;
    uint64_t v103 = v40;
    uint64_t v106 = v47;
    unint64_t v105 = v40 & 0xFFFFFFFFFC000000;
    unint64_t v97 = v40 & 0xFFFFFFFFFC000000 ^ *(void *)(v47 + 28688);
    uint64_t v100 = v47;
    unsigned int v104 = *(void *)(v47 + 28680);
    unint64_t v91 = v97 + 4 * (((unsigned __int16)((_WORD)v104 << 6) | (unsigned __int16)(v104 >> 6)) & 0xFFF);
    uint64_t v90 = v91 + v33;
    int v89 = 0;
    unsigned __int16 v88 = 0;
    unsigned __int16 v87 = *(_WORD *)(v91 + v33);
    unsigned __int16 v88 = v87;
    unsigned __int16 v86 = v87;
    int v89 = v87;
    if (v87)
    {
      unint64_t v85 = v94 + ((uint64_t)v89 << 29);
      if (v85 >= v92) {
        unint64_t v7 = 0;
      }
      else {
        unint64_t v7 = v85;
      }
      uint64_t v96 = v7;
    }
    else
    {
      uint64_t v96 = 0;
    }
    uint64_t v40 = v96;
    ++v35;
  }
  return result;
}

uint64_t nanov2_statistics_task_printer(unsigned int a1, const void *a2, uint64_t (*a3)(int a1, uint64_t a2, uint64_t a3, uint64_t *a4), void (*a4)(const char *, ...), uint64_t a5)
{
  return nanov2_statistics(a1, a2, a3, a4, a5);
}

uint64_t nanov2_statistics(unsigned int a1, const void *a2, uint64_t (*a3)(int a1, uint64_t a2, uint64_t a3, uint64_t *a4), void (*a4)(const char *, ...), uint64_t a5)
{
  unsigned int v28 = a1;
  int v27 = a2;
  int v26 = a3;
  int v25 = a4;
  uint64_t v24 = a5;
  if (a4) {
    int v8 = (void (*)())v25;
  }
  else {
    int v8 = nanov2_null_printer;
  }
  int v25 = (void (*)(const char *, ...))v8;
  int v26 = reader_or_in_memory_fallback_4((uint64_t)v26, v28);
  unsigned int v23 = 0;
  nanov2_configure();
  _platform_memset();
  uint64_t v22 = 0;
  unsigned int v23 = v26(v28, (uint64_t)v27, 29264, &v22);
  if (!v23)
  {
    unint64_t i = 0;
    unint64_t v20 = 0;
    int v19 = 0;
    uint64_t v30 = v22;
    unsigned int v41 = *(void *)(v22 + 28680);
    int v19 = ((unsigned __int16)((_WORD)v41 << 6) | (unsigned __int16)(v41 >> 6)) & 0xFFF;
    unint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)(v22 + 28728), memory_order_acquire);
    unint64_t v17 = explicit;
    v15[1] = explicit;
    unint64_t v18 = explicit;
    for (unint64_t i = *(void *)(v22 + 28720); ; unint64_t i = v62)
    {
      if (!i) {
        return 0;
      }
      v15[0] = 0;
      unsigned int v23 = v26(v28, i, 0x20000000, v15);
      if (v23)
      {
        v25("Failed to map nanov2 region at %p\n", (const void *)i);
        return v23;
      }
      unint64_t v14 = v15[0] - i;
      unint64_t v31 = i;
      unint64_t v20 = i;
LABEL_11:
      uint64_t v35 = v22;
      unint64_t v34 = i;
      unint64_t v33 = v18;
      unint64_t v32 = 0;
      unint64_t v42 = v18;
      unint64_t v43 = v18 - 1;
      if (i == ((v18 - 1) & 0xFFFFFFFFE0000000))
      {
        unint64_t v32 = v33;
      }
      else
      {
        unint64_t v36 = v34 + 0x20000000;
        unint64_t v32 = v34 + 0x20000000;
      }
      if (v20 < v32) {
        break;
      }
      uint64_t v61 = v22;
      unint64_t v60 = i;
      unint64_t v59 = v14;
      unint64_t v58 = v18;
      unint64_t v57 = 0;
      uint64_t v65 = v22;
      unint64_t v64 = i;
      unint64_t v63 = 0;
      uint64_t v68 = v22;
      unint64_t v67 = i;
      unint64_t v69 = i;
      uint64_t v72 = v22;
      unint64_t v71 = i & 0xFFFFFFFFFC000000;
      unint64_t v63 = i & 0xFFFFFFFFFC000000 ^ *(void *)(v22 + 28688);
      uint64_t v66 = v22;
      unsigned int v70 = *(void *)(v22 + 28680);
      unint64_t v57 = v63 + 4 * (((unsigned __int16)((_WORD)v70 << 6) | (unsigned __int16)(v70 >> 6)) & 0xFFF);
      unint64_t v56 = v57 + v14;
      int v55 = 0;
      unsigned __int16 v54 = 0;
      unsigned __int16 v53 = *(_WORD *)(v57 + v14);
      unsigned __int16 v54 = v53;
      unsigned __int16 v52 = v53;
      int v55 = v53;
      if (v53)
      {
        unint64_t v51 = v60 + ((uint64_t)v55 << 29);
        if (v51 >= v58) {
          unint64_t v6 = 0;
        }
        else {
          unint64_t v6 = v51;
        }
        unint64_t v62 = v6;
      }
      else
      {
        unint64_t v62 = 0;
      }
    }
    uint64_t v38 = v22;
    unint64_t v37 = v20;
    unint64_t v39 = v20;
    uint64_t v45 = v22;
    unint64_t v44 = v20 & 0xFFFFFFFFFC000000;
    unint64_t v13 = (v20 & 0xFFFFFFFFFC000000 ^ *(void *)(v22 + 28688)) + v14;
    for (unsigned int j = 0; ; ++j)
    {
      if (j >= 0x1000)
      {
        v20 += 0x4000000;
        goto LABEL_11;
      }
      if (j != v19) {
        break;
      }
LABEL_28:
      ;
    }
    uint64_t v49 = v22;
    unsigned int v48 = j;
    unsigned int v50 = j;
    int v47 = ((unsigned __int16)((_WORD)v50 << 6) | (unsigned __int16)(v50 >> 6)) & 0xFFF;
    int v46 = 0;
    int v46 = v47 ^ *(void *)(v22 + 28680);
    int v11 = ptr_offset_to_size_class[v46 >> 6];
    int v40 = v11;
    unsigned int v10 = *(_DWORD *)(v13 + 4 * j);
    int v9 = 0;
    int v7 = v10 & 0x7FF;
    if ((v10 & 0x7FF) != 0 && v7 != 2042)
    {
      if (v7 == 2043) {
        goto LABEL_25;
      }
      if (v7 == 2044)
      {
        int v9 = slots_by_size_class[v11];
        goto LABEL_26;
      }
      if ((v7 - 2045) > 2) {
LABEL_25:
      }
        int v9 = slots_by_size_class[v11] - ((v10 >> 11) & 0x3FF) - 1;
    }
LABEL_26:
    if (v9)
    {
      *(_DWORD *)v24 += v9;
      *(void *)(v24 + 8) += v9 * 16 * (v11 + 1);
      *(void *)(v24 + 24) += 0x4000;
    }
    goto LABEL_28;
  }
  v25("Failed to map nanozonev2_s at %p\n", v27);
  return v23;
}

uint64_t get_zone_type(unsigned int a1, uint64_t (*a2)(void, uint64_t, uint64_t, uint64_t *), uint64_t a3, _DWORD *a4)
{
  unsigned int v12 = a1;
  int v11 = a2;
  uint64_t v10 = a3;
  int v9 = a4;
  if (!a2)
  {
    __break(1u);
    JUMPOUT(0x5504CLL);
  }
  unsigned int v8 = 0;
  *int v9 = 0;
  uint64_t v7 = 0;
  unsigned int v8 = v11(v12, v10, 200, &v7);
  if (v8)
  {
    return v8;
  }
  else if (*(_DWORD *)(v7 + 104) >= 0xEu)
  {
    uint64_t v6 = get_introspection_addr(v7) + 128;
    BOOL v5 = 0;
    unsigned int v8 = v11(v12, v6, 4, (uint64_t *)&v5);
    if (v8)
    {
      return v8;
    }
    else
    {
      *int v9 = *v5;
      return 0;
    }
  }
  else
  {
    return 0;
  }
}

uint64_t get_introspection_addr(uint64_t a1)
{
  return *(void *)(a1 + 96);
}

uint64_t malloc_get_wrapped_zone(int a1, uint64_t a2, uint64_t a3, void *a4)
{
  unsigned int v11 = a1;
  uint64_t v9 = a3;
  unsigned int v8 = a4;
  uint64_t v10 = (uint64_t (*)(void, uint64_t, uint64_t, uint64_t *))reader_or_in_memory_fallback_5(a2, a1);
  unsigned int zone_type = 0;
  *unsigned int v8 = 0;
  int v6 = 0;
  unsigned int zone_type = get_zone_type(v11, v10, v9, &v6);
  if (zone_type)
  {
    return zone_type;
  }
  else if (v6 == 2 || v6 == 3)
  {
    v5[1] = v9 + 200;
    v5[0] = 0;
    unsigned int zone_type = v10(v11, v9 + 200, 8, v5);
    if (zone_type)
    {
      return zone_type;
    }
    else
    {
      *unsigned int v8 = *(void *)v5[0];
      return 0;
    }
  }
  else
  {
    return 0;
  }
}

uint64_t (*reader_or_in_memory_fallback_5(uint64_t a1, int a2))(int a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a1) {
    return (uint64_t (*)(int, uint64_t, uint64_t, void *))a1;
  }
  BOOL v3 = 1;
  if (a2) {
    BOOL v3 = mach_task_is_self() != 0;
  }
  if (!v3)
  {
    __break(1u);
    JUMPOUT(0x55330);
  }
  return _malloc_default_reader_5;
}

uint64_t get_wrapped_zone(uint64_t a1)
{
  v2[1] = a1;
  v2[0] = 0;
  if (malloc_get_wrapped_zone(mach_task_self_, 0, a1, v2))
  {
    __break(1u);
    JUMPOUT(0x553BCLL);
  }
  return v2[0];
}

uint64_t _malloc_default_reader_5(int a1, uint64_t a2, uint64_t a3, void *a4)
{
  BOOL v5 = 1;
  if (a1) {
    BOOL v5 = mach_task_is_self() != 0;
  }
  if (!v5)
  {
    __break(1u);
    JUMPOUT(0x55444);
  }
  *a4 = a2;
  return 0;
}

uint64_t _nano_common_init_pick_mode(uint64_t a1, uint64_t a2, unsigned char *a3, char a4)
{
  char v10 = a4 & 1;
  unsigned int v7 = 0;
  int v6 = 0;
  if (malloc_common_value_for_key(a3))
  {
    if (_platform_strncmp())
    {
      if (_platform_strncmp())
      {
        if (!_platform_strncmp()) {
          int v6 = 2;
        }
      }
      else
      {
        int v6 = 1;
      }
    }
    else
    {
      int v6 = 0;
    }
  }
  if (v6 == 1)
  {
    return 2;
  }
  else
  {
    if (v6 == 2)
    {
      if (v10) {
        int v4 = 0;
      }
      else {
        int v4 = 2;
      }
      unsigned int v7 = v4;
    }
    else
    {
      unsigned int v8 = (unsigned char *)_simple_getenv();
      if (v8 && *v8 == 49) {
        unsigned int v7 = 2;
      }
    }
    uint64_t v9 = (unsigned char *)_simple_getenv();
    if (v9)
    {
      if (*v9 == 49)
      {
        return 2;
      }
      else if (*v9 == 48)
      {
        return 0;
      }
      else if ((*v9 == 86 || *v9 == 118) && (v9[1] == 49 || v9[1] == 50))
      {
        return 2;
      }
    }
  }
  return v7;
}

void nano_common_init(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v8 = a1;
  uint64_t v7 = a2;
  int v6 = a3;
  _malloc_engaged_nano = _nano_common_init_pick_mode(a1, a2, a3, malloc_space_efficient_enabled & 1);
  if (_malloc_engaged_nano)
  {
    BOOL v5 = malloc_common_value_for_key_copy(v6, (uint64_t)"malloc_nano_max_magazines", v9, 0x100uLL);
    if (v5)
    {
      int v4 = 0;
      uint64_t v3 = malloc_common_convert_to_long(v5, &v4);
      if (*v4 || v3 < 0) {
        malloc_report(3, (uint64_t)"malloc_nano_max_magazines must be positive - ignored.\n");
      }
      else {
        nano_common_max_magazines = v3;
      }
    }
  }
  if (_malloc_engaged_nano == 2) {
    nanov2_init(v8, v7, v6);
  }
}

void nano_common_configure()
{
  if (nano_common_max_magazines) {
    int v0 = nano_common_max_magazines;
  }
  else {
    int v0 = phys_ncpus;
  }
  unsigned int v3 = v0;
  __str = getenv("MallocNanoMaxMagazines");
  if (!__str) {
    __str = getenv("_MallocNanoMaxMagazines");
  }
  if (__str)
  {
    int v1 = strtol(__str, 0, 0);
    if (v1 >= 0) {
      unsigned int v3 = v1;
    }
    else {
      malloc_report(3, (uint64_t)"MallocNanoMaxMagazines must be positive - ignored.\n");
    }
  }
  if (v3)
  {
    if (v3 > phys_ncpus)
    {
      unsigned int v3 = phys_ncpus;
      malloc_report(3, (uint64_t)"Nano maximum magazines limited to number of physical CPUs [%d]\n");
    }
  }
  else
  {
    unsigned int v3 = phys_ncpus;
  }
  nano_common_max_magazines = v3;
  if (__str) {
    malloc_report(6, (uint64_t)"Nano maximum magazines set to %d\n");
  }
  nano_common_cpu_number_override_set();
  if (_malloc_engaged_nano == 2) {
    nanov2_configure();
  }
}

void nano_common_cpu_number_override_set()
{
  BOOL v0 = 0;
  if (_os_cpu_number_override == -1) {
    BOOL v0 = nano_common_max_magazines == phys_ncpus;
  }
  if (!v0) {
    nano_common_max_magazines_is_ncpu = v0;
  }
}

mach_vm_address_t nano_common_allocate_based_pages(vm_size_t a1, char a2, int a3, int a4, uint64_t a5)
{
  kern_return_t v6;
  vm_size_t size;
  mach_vm_address_t address;
  uint64_t v9;
  int v10;
  int v11;
  char v12;
  vm_size_t v13;

  unint64_t v13 = a1;
  unsigned int v12 = a2;
  unsigned int v11 = a3;
  char v10 = a4;
  uint64_t v9 = a5;
  mach_vm_address_t address = 0;
  mach_vm_size_t size = (a1 + vm_page_size - 1) & ~(vm_page_size - 1);
  if (!size) {
    mach_vm_size_t size = vm_page_size;
  }
  if (size < v13) {
    return 0;
  }
  mach_vm_address_t address = (v9 + vm_page_size - 1) & ~(vm_page_size - 1);
  if (!address) {
    mach_vm_address_t address = vm_page_size;
  }
  int v6 = mach_vm_map(mach_task_self_, &address, size, (1 << a2) - 1, (a4 << 24) | 1, 0, 0, 0, 3, 7, 1u);
  if (!v6) {
    return address;
  }
  if (v6 != 3) {
    malloc_zone_error(v11, 0, (uint64_t)"*** can't allocate pages: mach_vm_map(size=%lu) failed (error code=%d)\n");
  }
  return 0;
}

BOOL nano_common_allocate_vm_space(mach_vm_address_t a1, mach_vm_size_t a2)
{
  return _nano_common_map_vm_space(a1, a2, 3) != 0;
}

uint64_t _nano_common_map_vm_space(mach_vm_address_t a1, mach_vm_size_t a2, vm_prot_t cur_protection)
{
  mach_vm_address_t v7 = a1;
  mach_vm_size_t v6 = a2;
  vm_prot_t v5 = cur_protection;
  mach_vm_address_t address = a1;
  if (mach_vm_map(mach_task_self_, &address, a2, 0, 184549376, 0, 0, 0, cur_protection, 7, 1u))
  {
    return 0;
  }
  else if (address == v7)
  {
    return 1;
  }
  else
  {
    mach_vm_deallocate(mach_task_self_, address, v6);
    return 0;
  }
}

BOOL nano_common_reserve_vm_space(mach_vm_address_t a1, mach_vm_size_t a2)
{
  return _nano_common_map_vm_space(a1, a2, 0) != 0;
}

uint64_t nano_common_unprotect_vm_space(mach_vm_address_t a1, mach_vm_size_t a2)
{
  if (mach_vm_protect(mach_task_self_, a1, a2, 0, 3))
  {
    malloc_report(3, (uint64_t)"mach_vm_protect ret: %d\n");
    char v3 = 0;
  }
  else
  {
    char v3 = 1;
  }
  return v3 & 1;
}

void nano_common_deallocate_pages(mach_vm_address_t a1, mach_vm_size_t a2, __int16 a3)
{
  if (mach_vm_deallocate(mach_task_self_, a1, a2)) {
    malloc_zone_error(a3, 0, (uint64_t)"Can't deallocate_pages at %p\n");
  }
}

uint64_t nano_common_default_reader(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  *a4 = a2;
  return 0;
}

uint64_t _xzm_type_choose_ptr_bucket(void *a1, unsigned __int8 a2, unsigned int a3)
{
  if (a2 >= 5u)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr_bucket_count <= XZM_POINTER_BUCKETS_MAX\" failed (/L"
                           "ibrary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:99)";
    __break(1u);
    JUMPOUT(0x56028);
  }
  switch(a2)
  {
    case 2u:
      unsigned __int8 v5 = (int)(*a1 * a3 + HIDWORD(*a1)) < 0;
      break;
    case 3u:
      unint64_t v3 = (*a1 * (unint64_t)a3 + a1[1]) >> 34;
      unsigned __int8 v5 = v3 - 3 * ((v3 * (unsigned __int128)0x5555555555555556uLL) >> 64);
      break;
    case 4u:
      unsigned __int8 v5 = ((*a1 * (unint64_t)a3 + a1[1]) >> 32) & 3;
      break;
    default:
      unsigned __int8 v5 = 0;
      break;
  }
  return v5;
}

uint64_t xzm_malloc_inline(uint64_t a1, unint64_t a2, uint64_t a3, char a4, __n128 a5, float a6)
{
  if (a2 <= 0x8000)
  {
    if ((*(unsigned char *)(a1 + 296) & 0x80) != 0)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(zone->xzz_flags & MALLOC_PURGEABLE) == 0\" failed (/L"
                             "ibrary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2266)";
      __break(1u);
      JUMPOUT(0x5622CLL);
    }
    unsigned int v13 = a3;
    if (*(void *)(a1 + 232)) {
      uint64_t v8 = *(void **)(a1 + 232);
    }
    else {
      uint64_t v8 = (void *)a1;
    }
    if (a2)
    {
      if (a2 > 0x80)
      {
        char v16 = 63 - __clz(a2 - 1);
        unsigned __int8 v17 = (((a2 - 1) >> (v16 - 2)) & 3 | (4 * v16)) - 20;
      }
      else
      {
        if ((a2 & 0xF) != 0) {
          uint64_t v7 = (a2 >> 4) + 1;
        }
        else {
          uint64_t v7 = a2 >> 4;
        }
        unsigned __int8 v17 = v7 - 1;
      }
    }
    else
    {
      unsigned __int8 v17 = 0;
    }
    unsigned __int8 v12 = *(unsigned char *)(v8[45] + v17);
    if (HIWORD(a3) == 256)
    {
      unsigned __int8 v11 = 0;
    }
    else if (((WORD2(a3) >> 10) & 3) == 1)
    {
      unsigned __int8 v11 = 1;
    }
    else
    {
      if (!a3) {
        unsigned int v13 = HIDWORD(malloc_entropy);
      }
      unsigned int v15 = (__n128 *)(v8 + 39);
      if ((v12 - 2) >= 5u)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr_bucket_count <= XZM_POINTER_BUCKETS_MAX\" failed"
                               " (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:99)";
        __break(1u);
        JUMPOUT(0x56508);
      }
      switch(v12)
      {
        case 4u:
          char v14 = (int)(v15->n128_u64[0] * v13 + HIDWORD(v15->n128_u64[0])) < 0;
          break;
        case 5u:
          a5 = *v15;
          char v14 = ((v8[39] * (unint64_t)v13 + v8[40]) >> 34)
              - 3
              * ((((v8[39] * (unint64_t)v13 + v8[40]) >> 34) * (unsigned __int128)0x5555555555555556uLL) >> 64);
          break;
        case 6u:
          a5 = *v15;
          char v14 = ((v8[39] * (unint64_t)v13 + v8[40]) >> 32) & 3;
          break;
        default:
          char v14 = 0;
          break;
      }
      unsigned __int8 v11 = v14 + 2;
    }
    if (v11 >= (int)v12)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"bucket < bin_bucket_count\" failed (/Library/Caches/co"
                             "m.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:181)";
      __break(1u);
      JUMPOUT(0x566BCLL);
    }
    uint64_t v9 = (uint64_t)_xzm_xzone_malloc(a1, a2, *(unsigned char *)(v8[46] + v17) + v11, a4, a5.n128_f64[0], a6);
  }
  else
  {
    uint64_t v9 = _xzm_malloc_large_huge(a1, a2, 0, a3, a4);
  }
  if (!v9)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr\" failed (/Library/Caches/com.apple.xbs/Sources/libm"
                           "alloc_driverkit/src/xzone/xzone_malloc.c:2272)";
    __break(1u);
    JUMPOUT(0x56718);
  }
  if ((a4 & 1) != 0 && !_xzm_mem_is_zero())
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_mem_is_zero(ptr, size)\" failed (/Library/Caches/co"
                           "m.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2274)";
    __break(1u);
    JUMPOUT(0x5675CLL);
  }
  return v9;
}

uint64_t _xzm_malloc_large_huge(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  char v19 = a5 & 1;
  uint64_t v18 = 0;
  if (*(void *)(a1 + 232)) {
    uint64_t v14 = *(void *)(a1 + 232);
  }
  else {
    uint64_t v14 = a1;
  }
  if ((a2 & 0x3FFF) != 0) {
    unint64_t v13 = (a2 & 0xFFFFFFFFFFFFC000) + 0x4000;
  }
  else {
    unint64_t v13 = a2;
  }
  if (v13 <= 0x200000 && a3 <= 0x100000) {
    unsigned __int8 v17 = 6;
  }
  else {
    unsigned __int8 v17 = 7;
  }
  if (((v13 >> 14) & 0x3FFFF00000000) == 0)
  {
    if (HIWORD(a4) == 256 || v17 == 7 || *(unsigned char *)(v14 + 344) == 2) {
      unsigned __int8 v16 = (*(unsigned char *)(v14 + 328) & 8) != 0;
    }
    else {
      unsigned __int8 v16 = 3;
    }
    if (v16 >= (int)*(unsigned __int8 *)(v14 + 344))
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"sg_id < main->xzmz_segment_group_count\" failed (/Libr"
                             "ary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:290)";
      __break(1u);
      JUMPOUT(0x5696CLL);
    }
    unint64_t v15 = xzm_segment_group_alloc_chunk((unsigned __int8 *)(*(void *)(v14 + 392) + 528 * v16), v17, 0, v13 >> 14, 0, a3, a5 & 1, (*(_DWORD *)(a1 + 296) & 0x80) != 0);
    if (v15)
    {
      LOBYTE(v12) = 1;
      if (v19) {
        int v12 = (*(unsigned __int8 *)(v15 + 32) >> 4) & 1;
      }
      if ((v12 & 1) == 0)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!clear || chunk->xzc_bits.xzcb_is_pristine\" failed "
                               "(/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:300)";
        __break(1u);
        JUMPOUT(0x56A4CLL);
      }
      *(_WORD *)(v15 + 34) = *(_WORD *)(a1 + 208);
      int v5 = 0;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 280), (unsigned int *)&v5, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
      if (v5) {
        os_unfair_lock_lock_with_options();
      }
      uint64_t v6 = *(void *)(a1 + 288);
      *(void *)(v15 + 16) = v6;
      if (v6) {
        *(void *)(*(void *)(a1 + 288) + 24) = v15 + 16;
      }
      *(void *)(a1 + 288) = v15;
      *(void *)(v15 + 24) = a1 + 288;
      int v7 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
      int v8 = v7;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 280), (unsigned int *)&v8, 0, memory_order_release, memory_order_relaxed);
      if (v8 != v7) {
        os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 280));
      }
      unint64_t v21 = v15 & 0xFFFFFFFFFFFFC000;
      char v11 = 1;
      if ((v15 & 0xFFFFFFFFFFFFC000) != 0)
      {
        BOOL v10 = 0;
        if (v15 >= v21 + 2136) {
          BOOL v10 = v15 < (v15 & 0xFFFFFFFFFFFFC000)
        }
                    + 48 * *(unsigned int *)((char *)&dword_10 + (v15 & 0xFFFFFFFFFFFFC000))
                    + 2136;
        char v11 = v10;
      }
      if ((v11 & 1) == 0)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice <"
                               " (segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.ap"
                               "ple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
        __break(1u);
        JUMPOUT(0x56E08);
      }
      if (v15 < v21 + 2136)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\""
                               " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzo"
                               "ne_inline_internal.h:278)";
        __break(1u);
        JUMPOUT(0x56E6CLL);
      }
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (v15 & 0xFFFFFFFFFFFFC000) - 2136) >> 4)) >= *(unsigned int *)((char *)&dword_10 + (v15 & 0xFFFFFFFFFFFFC000)))
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" "
                               "failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzon"
                               "e_inline_internal.h:280)";
        __break(1u);
        JUMPOUT(0x56ED4);
      }
      uint64_t v18 = *(uint64_t *)((char *)&stru_20.filesize + (v15 & 0xFFFFFFFFFFFFC000))
          + ((unint64_t)(-1431655765 * ((uint64_t)(v15 - v21 - 2136) >> 4)) << 14);
    }
  }
  if (!v18) {
    malloc_set_errno_fast(1, 12);
  }
  return v18;
}

_OWORD *_xzm_xzone_malloc(uint64_t a1, unint64_t a2, unsigned __int8 a3, char a4, double a5, float a6)
{
  uint64_t v9 = *(void *)(a1 + 216) + 88 * a3;
  if ((a4 & 2) != 0 || *(void *)(a1 + 232)) {
    goto LABEL_14;
  }
  unsigned __int16 v13 = *(_WORD *)(v9 + 32);
  do
  {
    if (!v13)
    {
      char v14 = 0;
      goto LABEL_10;
    }
    unsigned __int16 v12 = v13;
    int v6 = v13;
    int v7 = v13;
    atomic_compare_exchange_strong_explicit((atomic_ushort *volatile)(v9 + 32), (unsigned __int16 *)&v7, v13 - 1, memory_order_relaxed, memory_order_relaxed);
    if (v7 != v6) {
      unsigned __int16 v12 = v7;
    }
    unsigned __int16 v13 = v12;
  }
  while (v7 != v6);
  char v14 = 1;
LABEL_10:
  if (v14 != 1)
  {
LABEL_14:
    if (a2 > 0x1000)
    {
      if (a2 > 0x8000)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"size <= XZM_SMALL_BLOCK_SIZE_MAX\" failed (/Library/"
                               "Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2241)";
        __break(1u);
        JUMPOUT(0x5717CLL);
      }
      return (_OWORD *)_xzm_xzone_malloc_small(a1, v9, a4, a5, a6);
    }
    else
    {
      return _xzm_xzone_malloc_tiny(a1, v9, a4);
    }
  }
  else
  {
    uint64_t v10 = mfm_alloc(*(void *)(v9 + 48));
    if (!v10)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr\" failed (/Library/Caches/com.apple.xbs/Sources/li"
                             "bmalloc_driverkit/src/xzone/xzone_malloc.c:2233)";
      __break(1u);
      JUMPOUT(0x57114);
    }
    return (_OWORD *)v10;
  }
}

BOOL _xzm_mem_is_zero()
{
  return _platform_memcmp_zero_aligned8() == 0;
}

uint64_t xzm_malloc(uint64_t a1, unint64_t a2, uint64_t a3, char a4, __n128 a5, float a6)
{
  if (a2 <= 0x8000)
  {
    if ((*(unsigned char *)(a1 + 296) & 0x80) != 0)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(zone->xzz_flags & MALLOC_PURGEABLE) == 0\" failed (/L"
                             "ibrary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2266)";
      __break(1u);
      JUMPOUT(0x57298);
    }
    unsigned int v13 = a3;
    if (*(void *)(a1 + 232)) {
      int v8 = *(void **)(a1 + 232);
    }
    else {
      int v8 = (void *)a1;
    }
    if (a2)
    {
      if (a2 > 0x80)
      {
        char v17 = 63 - __clz(a2 - 1);
        unsigned __int8 v18 = (((a2 - 1) >> (v17 - 2)) & 3 | (4 * v17)) - 20;
      }
      else
      {
        if ((a2 & 0xF) != 0) {
          uint64_t v7 = (a2 >> 4) + 1;
        }
        else {
          uint64_t v7 = a2 >> 4;
        }
        unsigned __int8 v18 = v7 - 1;
      }
    }
    else
    {
      unsigned __int8 v18 = 0;
    }
    unsigned __int8 v12 = *(unsigned char *)(v8[45] + v18);
    if (HIWORD(a3) == 256)
    {
      unsigned __int8 v11 = 0;
    }
    else if (((WORD2(a3) >> 10) & 3) == 1)
    {
      unsigned __int8 v11 = 1;
    }
    else
    {
      if (!a3) {
        unsigned int v13 = HIDWORD(malloc_entropy);
      }
      unsigned __int8 v16 = (__n128 *)(v8 + 39);
      if ((v12 - 2) >= 5u)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr_bucket_count <= XZM_POINTER_BUCKETS_MAX\" failed"
                               " (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:99)";
        __break(1u);
        JUMPOUT(0x57574);
      }
      switch(v12)
      {
        case 4u:
          char v15 = (int)(v16->n128_u64[0] * v13 + HIDWORD(v16->n128_u64[0])) < 0;
          break;
        case 5u:
          a5 = *v16;
          unint64_t v14 = v8[39] * v13 + v8[40];
          char v15 = (v14 >> 34) - 3 * (((v14 >> 34) * (unsigned __int128)0x5555555555555556uLL) >> 64);
          break;
        case 6u:
          a5 = *v16;
          char v15 = ((v8[39] * (unint64_t)v13 + v8[40]) >> 32) & 3;
          break;
        default:
          char v15 = 0;
          break;
      }
      unsigned __int8 v11 = v15 + 2;
    }
    if (v11 >= (int)v12)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"bucket < bin_bucket_count\" failed (/Library/Caches/co"
                             "m.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:181)";
      __break(1u);
      JUMPOUT(0x57724);
    }
    uint64_t v9 = (uint64_t)_xzm_xzone_malloc(a1, a2, *(unsigned char *)(v8[46] + v18) + v11, a4, a5.n128_f64[0], a6);
  }
  else
  {
    uint64_t v9 = _xzm_malloc_large_huge(a1, a2, 0, a3, a4);
  }
  if (!v9)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr\" failed (/Library/Caches/com.apple.xbs/Sources/libm"
                           "alloc_driverkit/src/xzone/xzone_malloc.c:2272)";
    __break(1u);
    JUMPOUT(0x57780);
  }
  if ((a4 & 1) != 0 && !_xzm_mem_is_zero())
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_mem_is_zero(ptr, size)\" failed (/Library/Caches/co"
                           "m.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2274)";
    __break(1u);
    JUMPOUT(0x577C4);
  }
  return v9;
}

uint64_t xzm_memalign(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, char a5, __n128 a6, float a7)
{
  return _xzm_memalign(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t _xzm_memalign(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, char a5, __n128 a6, float a7)
{
  if (((a2 - 1) & a2) != 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"powerof2(alignment)\" failed (/Library/Caches/com.apple."
                           "xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2322)";
    __break(1u);
    JUMPOUT(0x57890);
  }
  char v11 = a5 | 2;
  if (a3 <= 0x8000 && a2 <= 0x4000)
  {
    if (a3 > a2)
    {
      if (a3 > 2 * a2)
      {
        if (a3 >= 4 * a2)
        {
          uint64_t v10 = xzm_malloc(a1, a3, a4, v11, a6, a7);
        }
        else
        {
          if (a3 % (4 * a2)) {
            unint64_t v9 = 4 * a2 + a3 / (4 * a2) * 4 * a2;
          }
          else {
            unint64_t v9 = a3;
          }
          if (v9 > 0x8000)
          {
            qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"roundup(size, 4 * alignment) <= XZM_SMALL_BLOCK_"
                                   "SIZE_MAX\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzon"
                                   "e/xzone_malloc.c:2339)";
            __break(1u);
            JUMPOUT(0x57A50);
          }
          if (a3 % (4 * a2)) {
            uint64_t v7 = xzm_malloc(a1, 4 * a2 + a3 / (4 * a2) * 4 * a2, a4, v11, a6, a7);
          }
          else {
            uint64_t v7 = xzm_malloc(a1, a3, a4, v11, a6, a7);
          }
          uint64_t v10 = v7;
        }
      }
      else
      {
        if (2 * a2 > 0x8000)
        {
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"2 * alignment <= XZM_SMALL_BLOCK_SIZE_MAX\" failed"
                                 " (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2335)";
          __break(1u);
          JUMPOUT(0x57994);
        }
        uint64_t v10 = xzm_malloc(a1, 2 * a2, a4, v11, a6, a7);
      }
    }
    else
    {
      uint64_t v10 = xzm_malloc(a1, a2, a4, v11, a6, a7);
    }
  }
  else
  {
    uint64_t v10 = _xzm_malloc_large_huge(a1, a3, a2, a4, v11);
  }
  if (!v10)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr\" failed (/Library/Caches/com.apple.xbs/Sources/libm"
                           "alloc_driverkit/src/xzone/xzone_malloc.c:2346)";
    __break(1u);
    JUMPOUT(0x57B54);
  }
  if (v10 % a2)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)ptr % alignment == 0\" failed (/Library/Cache"
                           "s/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2347)";
    __break(1u);
    JUMPOUT(0x57B94);
  }
  return v10;
}

uint64_t xzm_realloc(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, __n128 a5, float a6)
{
  if (!a2) {
    return xzm_malloc(a1, a3, a4, 0, a5, a6);
  }
  if (!a3)
  {
    _xzm_free(a1, a2, 0);
    return xzm_malloc(a1, 0, a4, 0, v6, v7);
  }
  uint64_t v34 = a4;
  uint64_t v33 = a1;
  uint64_t v32 = (uint64_t)a2;
  unint64_t v31 = a3;
  unint64_t v30 = 0;
  uint64_t v45 = a1;
  unint64_t v44 = a2;
  unint64_t v43 = &v30;
  unint64_t v42 = 0;
  unint64_t v41 = 0;
  unint64_t v40 = 0;
  uint64_t v62 = a1;
  unint64_t v61 = (unint64_t)a2;
  unint64_t v60 = 0;
  unint64_t v59 = (uint64_t *)&v42;
  unint64_t v58 = &v41;
  uint64_t v57 = 0;
  uint64_t v64 = a1;
  if (*(void *)(a1 + 232)) {
    uint64_t v19 = *(void *)(v33 + 232);
  }
  else {
    uint64_t v19 = v64;
  }
  uint64_t v57 = v19;
  unint64_t v56 = 0;
  uint64_t v86 = v19;
  unint64_t v85 = v61;
  unsigned int v84 = 0;
  unint64_t v144 = v61;
  uint64_t v143 = v19;
  uint64_t v142 = 0;
  unint64_t v141 = 0;
  unint64_t v150 = v61;
  unint64_t v149 = &v142;
  unint64_t v148 = v61;
  if (v61 >> 36)
  {
    *unint64_t v149 = 0;
    unint64_t v151 = 0x4000;
  }
  else
  {
    unint64_t v147 = v148 >> 22;
    *unint64_t v149 = 0;
    if (v147 >= 0x4000)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segindex < XZM_SEGMENT_TABLE_ENTRIES\" failed (/Librar"
                             "y/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:169)";
      __break(1u);
      JUMPOUT(0x57E1CLL);
    }
    unint64_t v151 = v147;
  }
  unint64_t v141 = v151;
  if (v151 >= 0x4000) {
    uint64_t v145 = 0;
  }
  else {
    uint64_t v145 = *(void *)(v143 + 408) + 4 * v141;
  }
  unsigned int v84 = (unsigned int *)v145;
  if (v145)
  {
    unsigned int v146 = *v84;
    unint64_t v87 = (unint64_t)v146 << 14;
  }
  else
  {
    unint64_t v87 = 0;
  }
  unint64_t v56 = v87;
  if (!v87)
  {
    unint64_t v63 = 0;
    goto LABEL_111;
  }
  unint64_t v55 = 0;
  unint64_t v91 = v56;
  unint64_t v90 = v61;
  uint64_t v89 = 0;
  unint64_t v95 = v56;
  unint64_t v94 = v61;
  unsigned int v93 = 0;
  unint64_t v105 = v56;
  unint64_t v104 = v61;
  int64_t v103 = 0;
  unint64_t v109 = v56;
  unint64_t v108 = v61;
  int64_t v107 = 0;
  unint64_t v112 = v56;
  unint64_t v114 = v56;
  int v113 = 0;
  int64_t v107 = v61 - *(void *)(v56 + 80);
  int64_t v106 = 0;
  unint64_t v122 = v56;
  int v121 = 0;
  unint64_t v123 = v56;
  int v121 = *(_DWORD *)(v56 + 12);
  if ((unint64_t)v121 << 14)
  {
    unint64_t v120 = v109;
    unsigned int v119 = 0;
    unint64_t v124 = v109;
    unsigned int v119 = *(_DWORD *)(v109 + 12);
    unint64_t v118 = v109;
    int v117 = 0;
    unint64_t v125 = v109;
    int v117 = *(_DWORD *)(v109 + 12);
    unint64_t v18 = ((unint64_t)v119 << 14) - ((unint64_t)v117 << 14) + 0x400000;
  }
  else
  {
    unint64_t v116 = v109;
    unsigned int v115 = 0;
    unint64_t v126 = v109;
    unsigned int v115 = *(_DWORD *)(v109 + 12);
    unint64_t v18 = (unint64_t)v115 << 14;
  }
  int64_t v106 = v18;
  BOOL v17 = 0;
  if ((v107 & 0x8000000000000000) == 0) {
    BOOL v17 = v107 < v106;
  }
  if (!v17)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"diff >= 0 && diff < (ptrdiff_t)rounded_size\" failed (/L"
                           "ibrary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:436)";
    __break(1u);
    JUMPOUT(0x58084);
  }
  int64_t v103 = v107;
  unint64_t v111 = v105;
  int64_t v110 = v107;
  unsigned int v93 = (unint64_t)v107 >> 14;
  if (v93 >= *(_DWORD *)(v95 + 16)) {
    uint64_t v96 = 0;
  }
  else {
    uint64_t v96 = v95 + 48 * v93 + 2136;
  }
  uint64_t v89 = v96;
  if (!v96)
  {
    unint64_t v92 = 0;
    goto LABEL_59;
  }
  unint64_t v88 = 0;
  unint64_t v98 = v89;
  if ((*(unsigned char *)(v89 + 32) & 0xF) == 4)
  {
    unint64_t v97 = 0;
    unint64_t v97 = v98 - *(unsigned int *)(v98 + 36);
    if (v97 < (v98 & 0xFFFFFFFFFFFFC000 | 0x858))
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"out_slice >= ((xzm_segment_t)((uintptr_t)slice & ~(XZM"
                             "_METAPOOL_SEGMENT_BLOCK_SIZE - 1)))->xzs_slices\" failed (/Library/Caches/com.apple.xbs/Sou"
                             "rces/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:582)";
      __break(1u);
      JUMPOUT(0x581A4);
    }
    unint64_t v101 = v97;
    unint64_t v100 = v98;
    int v16 = *(unsigned char *)(v97 + 32) & 0xF;
    if ((v16 - 1) < 2)
    {
      BOOL v102 = v101 == v100;
    }
    else if (v16 == 3 || (v16 - 5) < 4)
    {
      if (v100 < v101)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice >= span\" failed (/Library/Caches/com.apple.xb"
                               "s/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:560)";
        __break(1u);
        JUMPOUT(0x58248);
      }
      BOOL v102 = v100 < v101 + 48 * *(unsigned int *)(v101 + 40);
    }
    else
    {
      BOOL v102 = 0;
    }
    if (v102) {
      unint64_t v99 = v97;
    }
    else {
      unint64_t v99 = v98;
    }
  }
  else
  {
    unint64_t v99 = v98;
  }
  unint64_t v88 = v99;
  unsigned __int8 v153 = *(unsigned char *)(v99 + 32) & 0xF;
  if (v153 >= 2u)
  {
    if (v153 == 2)
    {
LABEL_54:
      char v154 = 1;
      goto LABEL_55;
    }
    if (v153 - 3 >= 2)
    {
      if (v153 - 5 >= 3)
      {
        uint64_t v152 = v153;
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
        qword_C0148 = v153;
        __break(1u);
        JUMPOUT(0x5836CLL);
      }
      goto LABEL_54;
    }
  }
  char v154 = 0;
LABEL_55:
  if (v154 == 1) {
    unint64_t v15 = v88;
  }
  else {
    unint64_t v15 = 0;
  }
  unint64_t v92 = v15;
LABEL_59:
  unint64_t v55 = v92;
  if (v92)
  {
    if (*(unsigned __int16 *)(v55 + 34) == *(unsigned __int16 *)(v62 + 208))
    {
      uint64_t v54 = v61;
      unint64_t v53 = 0;
      uint64_t v71 = v62;
      unint64_t v70 = v55;
      uint64_t v69 = 0;
      uint64_t v73 = v62;
      unint64_t v72 = v55;
      uint64_t v76 = v62;
      unint64_t v75 = v55;
      unint64_t v74 = v55 & 0xFFFFFFFFFFFFC000;
      char v14 = 1;
      if ((v55 & 0xFFFFFFFFFFFFC000) != 0)
      {
        BOOL v13 = 0;
        if (v75 >= v74 + 2136) {
          BOOL v13 = v75 < v74 + 48 * *(unsigned int *)(v74 + 16) + 2136;
        }
        char v14 = v13;
      }
      if ((v14 & 1) == 0)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice <"
                               " (segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.ap"
                               "ple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
        __break(1u);
        JUMPOUT(0x585BCLL);
      }
      unint64_t v78 = v74;
      unint64_t v77 = v72;
      unint64_t v83 = v74;
      unint64_t v82 = v72;
      if (v72 < v74 + 2136)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\""
                               " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzo"
                               "ne_inline_internal.h:278)";
        __break(1u);
        JUMPOUT(0x58620);
      }
      int64_t v81 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v82 - v83 - 2136) >> 4);
      if (v81 >= *(unsigned int *)(v83 + 16))
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" "
                               "failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzon"
                               "e_inline_internal.h:280)";
        __break(1u);
        JUMPOUT(0x58688);
      }
      unint64_t v80 = v74;
      int v79 = v81;
      unint64_t v53 = *(void *)(v74 + 80) + ((unint64_t)v81 << 14);
      unint64_t v52 = v54 - v53;
      char v51 = 0;
      char v51 = *(unsigned char *)(v55 + 32) & 0xF;
      uint64_t v50 = 0;
      unint64_t v49 = 0;
      char v67 = v51;
      if (v51 == 2 || v51 == 5)
      {
        uint64_t v50 = *(void *)(v62 + 216) + 88 * *(unsigned __int8 *)(v55 + 33);
        unint64_t v49 = *(void *)(v50 + 48);
        if (!XZM_FAST_ALIGNED(v52, v49, *(_DWORD *)(v50 + 64)))
        {
          unint64_t v63 = 0;
          goto LABEL_111;
        }
      }
      else
      {
        unint64_t v49 = (unint64_t)*(unsigned int *)(v55 + 40) << 14;
        unint64_t v48 = v52 % v49;
        if (v52 % v49)
        {
          unint64_t v63 = 0;
          goto LABEL_111;
        }
      }
      unint64_t v47 = v52 / v49;
      char v65 = *(unsigned char *)(v55 + 32) & 0xF;
      BOOL v66 = v65 == 2 || v65 == 5;
      BOOL v12 = 1;
      if (v66) {
        BOOL v12 = v47 < *(unsigned int *)(v50 + 68);
      }
      if (!v12)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!_xzm_slice_kind_uses_xzones(chunk->xzc_bits.xzcb_ki"
                               "nd) || block_index < xz->xz_chunk_capacity\" failed (/Library/Caches/com.apple.xbs/Source"
                               "s/libmalloc_driverkit/src/xzone/xzone_malloc.c:2924)";
        __break(1u);
        JUMPOUT(0x588C0);
      }
      uint64_t v139 = v62;
      uint64_t v138 = (atomic_ullong *)v55;
      char v137 = v51;
      unint64_t v136 = v52;
      unint64_t v135 = v49;
      uint64_t v134 = v54;
      if ((*(unsigned char *)(v55 + 32) & 0xF) != v51)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == kind\" failed (/Library"
                               "/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2801)";
        __break(1u);
        JUMPOUT(0x58930);
      }
      if (v137 == 2)
      {
        uint64_t v133 = 0;
        uint64_t v132 = 0;
        uint64_t v131 = *(void *)v134;
        uint64_t v132 = v131;
        uint64_t v130 = v131;
        uint64_t v133 = v131;
        uint64_t v129 = 0;
        uint64_t v129 = *(void *)(v139 + 272) ^ v134;
        if (v131 == v129)
        {
          char is_free_slow = 0;
          char is_free_slow = _xzm_xzone_tiny_chunk_block_is_free_slow(v139, v138, v134);
          char v140 = is_free_slow & 1;
        }
        else
        {
          char v140 = 0;
        }
      }
      else if (v137 == 5)
      {
        unint64_t v127 = v136 / v135;
        uint64_t v156 = v138;
        int v155 = v136 / v135;
        if ((*((unsigned char *)v138 + 32) & 0xF) != 5)
        {
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == XZM_SLICE_KIND_SMALL_"
                                 "CHUNK\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../"
                                 "xzone/xzone_inline_internal.h:919)";
          __break(1u);
          JUMPOUT(0x58A50);
        }
        char v140 = (*(_DWORD *)v156 >> v155) & 1;
      }
      else
      {
        char v140 = 0;
      }
      if (v140 == 1)
      {
        unint64_t v63 = 0;
      }
      else
      {
        if (v60) {
          *unint64_t v60 = v50;
        }
        if (v59) {
          *unint64_t v59 = v54;
        }
        if (v58) {
          *unint64_t v58 = v49;
        }
        unint64_t v63 = v55;
      }
      goto LABEL_111;
    }
    unint64_t v63 = 0;
  }
  else
  {
    unint64_t v63 = 0;
  }
LABEL_111:
  unint64_t v40 = v63;
  if (v43) {
    *unint64_t v43 = v40;
  }
  if (v40)
  {
    if (v42 == v44)
    {
      unint64_t v46 = v41;
    }
    else
    {
      unint64_t v39 = (char *)(v44 - v42);
      unint64_t v46 = v41 - (v44 - v42);
    }
  }
  else
  {
    unint64_t v46 = _xzm_ptr_size_outlined(v45, (unint64_t)v44);
  }
  unint64_t v29 = v46;
  uint64_t v28 = v32;
  if (v30 && *(unsigned __int16 *)(v30 + 34) != *(unsigned __int16 *)(v33 + 208))
  {
    qword_C0118 = (uint64_t)"BUG IN CLIENT OF LIBMALLOC: pointer being reallocated with wrong zone";
    qword_C0148 = v32;
    __break(1u);
    JUMPOUT(0x58C08);
  }
  if (!v30 || v46 <= 0x8000 || v31 <= 0x8000) {
    goto LABEL_146;
  }
  if ((v31 & 0x3FFF) != 0) {
    unint64_t v11 = (v31 & 0xFFFFFFFFFFFFC000) + 0x4000;
  }
  else {
    unint64_t v11 = v31;
  }
  unsigned int v27 = v11 >> 14;
  uint64_t v38 = v33;
  unint64_t v37 = v30;
  unint64_t v36 = v30 & 0xFFFFFFFFFFFFC000;
  char v10 = 1;
  if ((v30 & 0xFFFFFFFFFFFFC000) != 0)
  {
    BOOL v9 = 0;
    if (v37 >= v36 + 2136) {
      BOOL v9 = v37 < v36 + 48 * *(unsigned int *)(v36 + 16) + 2136;
    }
    char v10 = v9;
  }
  if ((v10 & 1) == 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0x58D48);
  }
  if (!v36)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segment != NULL\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:3066)";
    __break(1u);
    JUMPOUT(0x58D80);
  }
  char v26 = 0;
  if (v46 <= 0x200000 || v31 <= 0x200000 || (*(unsigned char *)(v33 + 296) & 0x80) != 0)
  {
    if (v46 <= 0x200000 && v31 <= 0x200000 && (*(unsigned char *)(v33 + 296) & 0x80) == 0) {
      char v26 = xzm_segment_group_try_realloc_large_chunk(*(unsigned __int8 **)v36, v36, v30, v27);
    }
  }
  else
  {
    char v26 = xzm_segment_group_try_realloc_huge_chunk(*(void *)v36, v33, v36, v30, v27);
  }
  if (v26)
  {
    uint64_t v35 = (char *)v28;
  }
  else
  {
LABEL_146:
    if (v31 > v29 || v31 < v29 >> 1)
    {
      uint64_t v25 = xzm_malloc(v33, v31, v34, 0, a5, a6);
      if (v25)
      {
        _platform_memmove();
        uint64_t v35 = (char *)v25;
      }
      else
      {
        uint64_t v35 = 0;
      }
    }
    else
    {
      uint64_t v35 = (char *)v28;
    }
  }
  unint64_t v20 = v35;
  if (v35 && v35 != a2) {
    _xzm_free(a1, a2, 0);
  }
  return (uint64_t)v20;
}

void _xzm_free(uint64_t a1, void *a2, char a3)
{
  uint64_t v16 = a1;
  unint64_t v15 = a2;
  char v14 = a3;
  if (!a2) {
    return;
  }
  BOOL v13 = 0;
  uint64_t v12 = 0;
  uint64_t v11 = 0;
  uint64_t v32 = v16;
  unint64_t v31 = (unint64_t)v15;
  unint64_t v30 = &v11;
  unint64_t v29 = &v13;
  uint64_t v28 = &v12;
  uint64_t v27 = 0;
  uint64_t v34 = v16;
  if (*(void *)(v16 + 232)) {
    uint64_t v10 = *(void *)(v16 + 232);
  }
  else {
    uint64_t v10 = v34;
  }
  uint64_t v27 = v10;
  unint64_t v26 = 0;
  uint64_t v56 = v10;
  unint64_t v55 = v31;
  uint64_t v54 = 0;
  unint64_t v114 = v31;
  uint64_t v113 = v10;
  uint64_t v112 = 0;
  unint64_t v111 = 0;
  unint64_t v120 = v31;
  unsigned int v119 = &v112;
  unint64_t v118 = v31;
  if (v31 >> 36)
  {
    *unsigned int v119 = 0;
    unint64_t v121 = 0x4000;
  }
  else
  {
    unint64_t v117 = v118 >> 22;
    *unsigned int v119 = 0;
    if (v117 >= 0x4000)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segindex < XZM_SEGMENT_TABLE_ENTRIES\" failed (/Librar"
                             "y/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:169)";
      __break(1u);
      JUMPOUT(0x590E8);
    }
    unint64_t v121 = v117;
  }
  unint64_t v111 = v121;
  if (v121 >= 0x4000) {
    uint64_t v115 = 0;
  }
  else {
    uint64_t v115 = *(void *)(v113 + 408) + 4 * v111;
  }
  uint64_t v54 = (unsigned int *)v115;
  if (v115)
  {
    unsigned int v116 = *v54;
    unint64_t v57 = (unint64_t)v116 << 14;
  }
  else
  {
    unint64_t v57 = 0;
  }
  unint64_t v26 = v57;
  if (!v57)
  {
    unint64_t v33 = 0;
    goto LABEL_108;
  }
  unint64_t v25 = 0;
  unint64_t v61 = v26;
  unint64_t v60 = v31;
  uint64_t v59 = 0;
  unint64_t v65 = v26;
  unint64_t v64 = v31;
  unsigned int v63 = 0;
  unint64_t v75 = v26;
  unint64_t v74 = v31;
  int64_t v73 = 0;
  unint64_t v79 = v26;
  unint64_t v78 = v31;
  int64_t v77 = 0;
  unint64_t v82 = v26;
  unint64_t v84 = v26;
  int v83 = 0;
  int64_t v77 = v31 - *(void *)(v26 + 80);
  int64_t v76 = 0;
  unint64_t v92 = v26;
  int v91 = 0;
  unint64_t v93 = v26;
  int v91 = *(_DWORD *)(v26 + 12);
  if ((unint64_t)v91 << 14)
  {
    unint64_t v90 = v79;
    unsigned int v89 = 0;
    unint64_t v94 = v79;
    unsigned int v89 = *(_DWORD *)(v79 + 12);
    unint64_t v88 = v79;
    int v87 = 0;
    unint64_t v95 = v79;
    int v87 = *(_DWORD *)(v79 + 12);
    unint64_t v9 = ((unint64_t)v89 << 14) - ((unint64_t)v87 << 14) + 0x400000;
  }
  else
  {
    unint64_t v86 = v79;
    unsigned int v85 = 0;
    unint64_t v96 = v79;
    unsigned int v85 = *(_DWORD *)(v79 + 12);
    unint64_t v9 = (unint64_t)v85 << 14;
  }
  int64_t v76 = v9;
  BOOL v8 = 0;
  if ((v77 & 0x8000000000000000) == 0) {
    BOOL v8 = v77 < v76;
  }
  if (!v8)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"diff >= 0 && diff < (ptrdiff_t)rounded_size\" failed (/L"
                           "ibrary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:436)";
    __break(1u);
    JUMPOUT(0x59350);
  }
  int64_t v73 = v77;
  unint64_t v81 = v75;
  int64_t v80 = v77;
  unsigned int v63 = (unint64_t)v77 >> 14;
  if (v63 >= *(_DWORD *)(v65 + 16)) {
    uint64_t v66 = 0;
  }
  else {
    uint64_t v66 = v65 + 48 * v63 + 2136;
  }
  uint64_t v59 = v66;
  if (!v66)
  {
    unint64_t v62 = 0;
    goto LABEL_56;
  }
  unint64_t v58 = 0;
  unint64_t v68 = v59;
  if ((*(unsigned char *)(v59 + 32) & 0xF) == 4)
  {
    unint64_t v67 = 0;
    unint64_t v67 = v68 - *(unsigned int *)(v68 + 36);
    if (v67 < (v68 & 0xFFFFFFFFFFFFC000 | 0x858))
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"out_slice >= ((xzm_segment_t)((uintptr_t)slice & ~(XZM"
                             "_METAPOOL_SEGMENT_BLOCK_SIZE - 1)))->xzs_slices\" failed (/Library/Caches/com.apple.xbs/Sou"
                             "rces/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:582)";
      __break(1u);
      JUMPOUT(0x59470);
    }
    unint64_t v71 = v67;
    unint64_t v70 = v68;
    int v7 = *(unsigned char *)(v67 + 32) & 0xF;
    if ((v7 - 1) < 2)
    {
      BOOL v72 = v71 == v70;
    }
    else if (v7 == 3 || (v7 - 5) < 4)
    {
      if (v70 < v71)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice >= span\" failed (/Library/Caches/com.apple.xb"
                               "s/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:560)";
        __break(1u);
        JUMPOUT(0x59514);
      }
      BOOL v72 = v70 < v71 + 48 * *(unsigned int *)(v71 + 40);
    }
    else
    {
      BOOL v72 = 0;
    }
    if (v72) {
      unint64_t v69 = v67;
    }
    else {
      unint64_t v69 = v68;
    }
  }
  else
  {
    unint64_t v69 = v68;
  }
  unint64_t v58 = v69;
  unsigned __int8 v123 = *(unsigned char *)(v69 + 32) & 0xF;
  if (v123 >= 2u)
  {
    if (v123 == 2)
    {
LABEL_51:
      char v124 = 1;
      goto LABEL_52;
    }
    if (v123 - 3 >= 2)
    {
      if (v123 - 5 >= 3)
      {
        uint64_t v122 = v123;
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
        qword_C0148 = v123;
        __break(1u);
        JUMPOUT(0x59638);
      }
      goto LABEL_51;
    }
  }
  char v124 = 0;
LABEL_52:
  if (v124 == 1) {
    unint64_t v6 = v58;
  }
  else {
    unint64_t v6 = 0;
  }
  unint64_t v62 = v6;
LABEL_56:
  unint64_t v25 = v62;
  if (!v62)
  {
    unint64_t v33 = 0;
    goto LABEL_108;
  }
  if (*(unsigned __int16 *)(v25 + 34) != *(unsigned __int16 *)(v32 + 208))
  {
    unint64_t v33 = 0;
    goto LABEL_108;
  }
  uint64_t v24 = v31;
  unint64_t v23 = 0;
  uint64_t v41 = v32;
  unint64_t v40 = v25;
  uint64_t v39 = 0;
  uint64_t v43 = v32;
  unint64_t v42 = v25;
  uint64_t v46 = v32;
  unint64_t v45 = v25;
  unint64_t v44 = v25 & 0xFFFFFFFFFFFFC000;
  char v5 = 1;
  if ((v25 & 0xFFFFFFFFFFFFC000) != 0)
  {
    BOOL v4 = 0;
    if (v45 >= v44 + 2136) {
      BOOL v4 = v45 < v44 + 48 * *(unsigned int *)(v44 + 16) + 2136;
    }
    char v5 = v4;
  }
  if ((v5 & 1) == 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0x59888);
  }
  unint64_t v48 = v44;
  unint64_t v47 = v42;
  unint64_t v53 = v44;
  unint64_t v52 = v42;
  if (v42 < v44 + 2136)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" fai"
                           "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                           "e_internal.h:278)";
    __break(1u);
    JUMPOUT(0x598ECLL);
  }
  int64_t v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v52 - v53 - 2136) >> 4);
  if (v51 >= *(unsigned int *)(v53 + 16))
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fail"
                           "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline"
                           "_internal.h:280)";
    __break(1u);
    JUMPOUT(0x59954);
  }
  unint64_t v50 = v44;
  int v49 = v51;
  unint64_t v23 = *(void *)(v44 + 80) + ((unint64_t)v51 << 14);
  unint64_t v22 = v24 - v23;
  char v21 = 0;
  char v21 = *(unsigned char *)(v25 + 32) & 0xF;
  uint64_t v20 = 0;
  unint64_t v19 = 0;
  char v37 = v21;
  if (v21 == 2 || v21 == 5)
  {
    uint64_t v20 = *(void *)(v32 + 216) + 88 * *(unsigned __int8 *)(v25 + 33);
    unint64_t v19 = *(void *)(v20 + 48);
    if (!XZM_FAST_ALIGNED(v22, v19, *(_DWORD *)(v20 + 64)))
    {
      unint64_t v33 = 0;
      goto LABEL_108;
    }
LABEL_80:
    unint64_t v17 = v22 / v19;
    char v35 = *(unsigned char *)(v25 + 32) & 0xF;
    BOOL v36 = v35 == 2 || v35 == 5;
    BOOL v3 = 1;
    if (v36) {
      BOOL v3 = v17 < *(unsigned int *)(v20 + 68);
    }
    if (!v3)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!_xzm_slice_kind_uses_xzones(chunk->xzc_bits.xzcb_kind"
                             ") || block_index < xz->xz_chunk_capacity\" failed (/Library/Caches/com.apple.xbs/Sources/li"
                             "bmalloc_driverkit/src/xzone/xzone_malloc.c:2924)";
      __break(1u);
      JUMPOUT(0x59B8CLL);
    }
    uint64_t v109 = v32;
    unint64_t v108 = (atomic_ullong *)v25;
    char v107 = v21;
    unint64_t v106 = v22;
    unint64_t v105 = v19;
    uint64_t v104 = v24;
    if ((*(unsigned char *)(v25 + 32) & 0xF) != v21)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == kind\" failed (/Library/C"
                             "aches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2801)";
      __break(1u);
      JUMPOUT(0x59BFCLL);
    }
    if (v107 == 2)
    {
      uint64_t v103 = 0;
      uint64_t v102 = 0;
      uint64_t v101 = *(void *)v104;
      uint64_t v102 = v101;
      uint64_t v100 = v101;
      uint64_t v103 = v101;
      uint64_t v99 = 0;
      uint64_t v99 = *(void *)(v109 + 272) ^ v104;
      if (v101 == v99)
      {
        char is_free_slow = 0;
        char is_free_slow = _xzm_xzone_tiny_chunk_block_is_free_slow(v109, v108, v104);
        char v110 = is_free_slow & 1;
      }
      else
      {
        char v110 = 0;
      }
    }
    else if (v107 == 5)
    {
      unint64_t v97 = v106 / v105;
      unint64_t v126 = v108;
      int v125 = v106 / v105;
      if ((*((unsigned char *)v108 + 32) & 0xF) != 5)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == XZM_SLICE_KIND_SMALL_CH"
                               "UNK\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzon"
                               "e/xzone_inline_internal.h:919)";
        __break(1u);
        JUMPOUT(0x59D1CLL);
      }
      char v110 = (*(_DWORD *)v126 >> v125) & 1;
    }
    else
    {
      char v110 = 0;
    }
    if (v110 == 1)
    {
      unint64_t v33 = 0;
    }
    else
    {
      if (v30) {
        uint64_t *v30 = v20;
      }
      if (v29) {
        *unint64_t v29 = (unint64_t *)v24;
      }
      if (v28) {
        *uint64_t v28 = v19;
      }
      unint64_t v33 = v25;
    }
    goto LABEL_108;
  }
  unint64_t v19 = (unint64_t)*(unsigned int *)(v25 + 40) << 14;
  unint64_t v18 = v22 % v19;
  if (!(v22 % v19)) {
    goto LABEL_80;
  }
  unint64_t v33 = 0;
LABEL_108:
  if (v33)
  {
    if ((*(unsigned char *)(v33 + 32) & 0xF) == 2)
    {
      _xzm_xzone_free_tiny(v16, v11, v33, v13);
    }
    else if ((*(unsigned char *)(v33 + 32) & 0xF) == 5)
    {
      _xzm_xzone_free_block_to_small_chunk(v16, v11, v33, (uint64_t)v13);
    }
    else
    {
      if (v11)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!xz\" failed (/Library/Caches/com.apple.xbs/Sources/"
                               "libmalloc_driverkit/src/xzone/xzone_malloc.c:2998)";
        __break(1u);
        JUMPOUT(0x59E84);
      }
      _xzm_free_large_huge(v16, v33);
    }
  }
  else
  {
    _xzm_free_outlined(v16, v15, v14 & 1);
  }
}

unint64_t xzm_good_size(uint64_t a1, unint64_t a2)
{
  if (a2 > 0x8000)
  {
    if ((a2 & 0x3FFF) != 0) {
      unint64_t v6 = (a2 & 0xFFFFFFFFFFFFC000) + 0x4000;
    }
    else {
      unint64_t v6 = a2;
    }
    if (v6 <= a2) {
      return a2;
    }
    if ((a2 & 0x3FFF) != 0) {
      return (a2 & 0xFFFFFFFFFFFFC000) + 0x4000;
    }
    else {
      return a2;
    }
  }
  else
  {
    if (*(void *)(a1 + 232)) {
      uint64_t v8 = *(void *)(a1 + 232);
    }
    else {
      uint64_t v8 = a1;
    }
    if (a2)
    {
      if (a2 > 0x80)
      {
        char v2 = __clz(a2 - 1);
        unsigned __int8 v10 = (((a2 - 1) >> (61 - v2)) & 3 | (4 * (63 - v2))) - 20;
      }
      else
      {
        if ((a2 & 0xF) != 0) {
          uint64_t v7 = (a2 >> 4) + 1;
        }
        else {
          uint64_t v7 = a2 >> 4;
        }
        unsigned __int8 v10 = v7 - 1;
      }
    }
    else
    {
      unsigned __int8 v10 = 0;
    }
    return *(void *)(*(void *)(v8 + 352) + 8 * v10);
  }
}

uint64_t xzm_check()
{
  return 1;
}

void xzm_force_lock(uint64_t a1)
{
}

void _xzm_foreach_lock(uint64_t a1, int a2)
{
  if (!a2)
  {
    _xzm_do_lock_action((atomic_uint *)(a1 + 284), 0);
    _xzm_do_lock_action((atomic_uint *)(a1 + 280), 0);
    _xzm_allocation_slots_do_lock_action(a1, 0);
  }
  for (unsigned __int8 i = 1; i < (int)*(unsigned __int8 *)(a1 + 210); ++i)
  {
    uint64_t v5 = *(void *)(a1 + 216) + 88 * i;
    if (*(void *)(v5 + 48) > 0x1000uLL) {
      char v2 = 5;
    }
    else {
      char v2 = 2;
    }
    if (v2 == 2)
    {
      _xzm_tiny_xzone_do_lock_action((atomic_ullong *)v5, a2);
    }
    else if (v2 == 5)
    {
      if (a2)
      {
        for (uint64_t j = *(void *)v5; j; uint64_t j = *(void *)(j + 16))
          _xzm_do_lock_action((atomic_uint *)(j + 8), a2);
        for (uint64_t k = *(void *)(v5 + 8); k; uint64_t k = *(void *)(k + 16))
          _xzm_do_lock_action((atomic_uint *)(k + 8), a2);
        _xzm_do_lock_action((atomic_uint *)(v5 + 24), a2);
      }
      else
      {
        _xzm_small_xzone_lock_all((uint64_t *)v5);
      }
    }
  }
  if (a2)
  {
    _xzm_allocation_slots_do_lock_action(a1, a2);
    _xzm_do_lock_action((atomic_uint *)(a1 + 280), a2);
    _xzm_do_lock_action((atomic_uint *)(a1 + 284), a2);
  }
}

void xzm_force_unlock(uint64_t a1)
{
}

void xzm_reinit_lock(uint64_t a1)
{
}

void xzm_locked()
{
  qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: xzm_locked not implemented";
  __break(1u);
}

uint64_t sub_5A3F8()
{
  return 1;
}

void xzm_force_lock_global_state(uint64_t a1)
{
  BOOL v2 = 0;
  if (*(_DWORD *)(a1 + 104) >= 0xEu)
  {
    uint64_t v1 = 0;
    if (*(void *)(a1 + 96)) {
      uint64_t v1 = *(void *)(a1 + 96);
    }
    BOOL v2 = *(_DWORD *)(v1 + 128) == 1;
  }
  if (!v2)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_malloc_zone_is_xzm(main_zone)\" failed (/Library/Ca"
                           "ches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:3936)";
    __break(1u);
    JUMPOUT(0x5A4C8);
  }
  if (*(void *)(a1 + 232))
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_malloc_zone_is_main((xzm_malloc_zone_t)main_zone)\""
                           " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:3937)";
    __break(1u);
    JUMPOUT(0x5A504);
  }
  _xzm_global_state_lock(a1, 0);
}

void _xzm_global_state_lock(uint64_t a1, int a2)
{
  for (unsigned __int8 i = 1; i < (int)*(unsigned __int8 *)(a1 + 210); ++i)
    _xzm_do_lock_action((atomic_uint *)(*(void *)(a1 + 376) + 16 * i + 8), a2);
  for (unsigned __int8 j = 0; j < (int)*(unsigned __int8 *)(a1 + 344); ++j)
  {
    uint64_t v4 = *(void *)(a1 + 392) + 528 * j;
    _xzm_do_lock_action((atomic_uint *)(v4 + 8), a2);
    _xzm_do_lock_action((atomic_uint *)(v4 + 4), a2);
    if (*(unsigned char *)v4 == 1) {
      _xzm_do_lock_action((atomic_uint *)(v4 + 520), a2);
    }
  }
  for (unsigned __int8 k = 0; k < (int)*(unsigned __int8 *)(a1 + 329); ++k)
    _xzm_do_lock_action((atomic_uint *)(*(void *)(a1 + 384) + 56 * k + 16), a2);
  _xzm_do_lock_action((atomic_uint *)(a1 + 432), a2);
  for (int m = 0; m < *(unsigned __int8 *)(a1 + 330); ++m)
    _xzm_do_lock_action((atomic_uint *)(*(void *)(a1 + 400) + ((uint64_t)m << 6)), a2);
  _xzm_do_lock_action((atomic_uint *)(a1 + 448), a2);
}

void xzm_force_unlock_global_state(uint64_t a1)
{
  BOOL v2 = 0;
  if (*(_DWORD *)(a1 + 104) >= 0xEu)
  {
    uint64_t v1 = 0;
    if (*(void *)(a1 + 96)) {
      uint64_t v1 = *(void *)(a1 + 96);
    }
    BOOL v2 = *(_DWORD *)(v1 + 128) == 1;
  }
  if (!v2)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_malloc_zone_is_xzm(main_zone)\" failed (/Library/Ca"
                           "ches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:3945)";
    __break(1u);
    JUMPOUT(0x5A814);
  }
  if (*(void *)(a1 + 232))
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_malloc_zone_is_main((xzm_malloc_zone_t)main_zone)\""
                           " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:3946)";
    __break(1u);
    JUMPOUT(0x5A850);
  }
  _xzm_global_state_lock(a1, 1);
}

void xzm_force_reinit_lock_global_state(uint64_t a1)
{
  BOOL v2 = 0;
  if (*(_DWORD *)(a1 + 104) >= 0xEu)
  {
    uint64_t v1 = 0;
    if (*(void *)(a1 + 96)) {
      uint64_t v1 = *(void *)(a1 + 96);
    }
    BOOL v2 = *(_DWORD *)(v1 + 128) == 1;
  }
  if (!v2)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_malloc_zone_is_xzm(main_zone)\" failed (/Library/Ca"
                           "ches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:3954)";
    __break(1u);
    JUMPOUT(0x5A940);
  }
  if (*(void *)(a1 + 232))
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_malloc_zone_is_main((xzm_malloc_zone_t)main_zone)\""
                           " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:3955)";
    __break(1u);
    JUMPOUT(0x5A97CLL);
  }
  _xzm_global_state_lock(a1, 2);
}

uint64_t xzm_ptr_lookup_4test(uint64_t a1, unint64_t a2, unsigned char *a3, unsigned char *a4, unsigned char *a5)
{
  uint64_t v23 = a1;
  unint64_t v22 = a2;
  char v21 = a3;
  uint64_t v20 = a4;
  unint64_t v19 = a5;
  uint64_t v18 = 0;
  uint64_t v40 = a1;
  unint64_t v39 = a2;
  uint64_t v38 = &v18;
  char v37 = 0;
  BOOL v36 = 0;
  uint64_t v35 = 0;
  uint64_t v42 = a1;
  if (*(void *)(a1 + 232)) {
    uint64_t v15 = *(void *)(a1 + 232);
  }
  else {
    uint64_t v15 = v42;
  }
  uint64_t v35 = v15;
  unint64_t v34 = 0;
  uint64_t v69 = v15;
  unint64_t v68 = v39;
  unint64_t v67 = 0;
  unint64_t v127 = v39;
  uint64_t v126 = v15;
  uint64_t v125 = 0;
  unint64_t v124 = 0;
  unint64_t v133 = v39;
  uint64_t v132 = &v125;
  unint64_t v131 = v39;
  if (v39 >> 36)
  {
    *uint64_t v132 = 0;
    unint64_t v134 = 0x4000;
  }
  else
  {
    unint64_t v130 = v131 >> 22;
    *uint64_t v132 = 0;
    if (v130 >= 0x4000)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segindex < XZM_SEGMENT_TABLE_ENTRIES\" failed (/Librar"
                             "y/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:169)";
      __break(1u);
      JUMPOUT(0x5AB0CLL);
    }
    unint64_t v134 = v130;
  }
  unint64_t v124 = v134;
  if (v134 >= 0x4000) {
    uint64_t v128 = 0;
  }
  else {
    uint64_t v128 = *(void *)(v126 + 408) + 4 * v124;
  }
  unint64_t v67 = (unsigned int *)v128;
  if (v128)
  {
    unsigned int v129 = *v67;
    unint64_t v70 = (unint64_t)v129 << 14;
  }
  else
  {
    unint64_t v70 = 0;
  }
  unint64_t v34 = v70;
  if (!v70)
  {
    unint64_t v41 = 0;
    goto LABEL_107;
  }
  unint64_t v33 = 0;
  unint64_t v74 = v34;
  unint64_t v73 = v39;
  uint64_t v72 = 0;
  unint64_t v78 = v34;
  unint64_t v77 = v39;
  unsigned int v76 = 0;
  unint64_t v88 = v34;
  unint64_t v87 = v39;
  int64_t v86 = 0;
  unint64_t v92 = v34;
  unint64_t v91 = v39;
  int64_t v90 = 0;
  unint64_t v95 = v34;
  unint64_t v97 = v34;
  int v96 = 0;
  int64_t v90 = v39 - *(void *)(v34 + 80);
  int64_t v89 = 0;
  unint64_t v105 = v34;
  int v104 = 0;
  unint64_t v106 = v34;
  int v104 = *(_DWORD *)(v34 + 12);
  if ((unint64_t)v104 << 14)
  {
    unint64_t v103 = v92;
    unsigned int v102 = 0;
    unint64_t v107 = v92;
    unsigned int v102 = *(_DWORD *)(v92 + 12);
    unint64_t v101 = v92;
    int v100 = 0;
    unint64_t v108 = v92;
    int v100 = *(_DWORD *)(v92 + 12);
    unint64_t v14 = ((unint64_t)v102 << 14) - ((unint64_t)v100 << 14) + 0x400000;
  }
  else
  {
    unint64_t v99 = v92;
    unsigned int v98 = 0;
    unint64_t v109 = v92;
    unsigned int v98 = *(_DWORD *)(v92 + 12);
    unint64_t v14 = (unint64_t)v98 << 14;
  }
  int64_t v89 = v14;
  BOOL v13 = 0;
  if ((v90 & 0x8000000000000000) == 0) {
    BOOL v13 = v90 < v89;
  }
  if (!v13)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"diff >= 0 && diff < (ptrdiff_t)rounded_size\" failed (/L"
                           "ibrary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:436)";
    __break(1u);
    JUMPOUT(0x5AD74);
  }
  int64_t v86 = v90;
  unint64_t v94 = v88;
  int64_t v93 = v90;
  unsigned int v76 = (unint64_t)v90 >> 14;
  if (v76 >= *(_DWORD *)(v78 + 16)) {
    uint64_t v79 = 0;
  }
  else {
    uint64_t v79 = v78 + 48 * v76 + 2136;
  }
  uint64_t v72 = v79;
  if (!v79)
  {
    unint64_t v75 = 0;
    goto LABEL_55;
  }
  unint64_t v71 = 0;
  unint64_t v81 = v72;
  if ((*(unsigned char *)(v72 + 32) & 0xF) == 4)
  {
    unint64_t v80 = 0;
    unint64_t v80 = v81 - *(unsigned int *)(v81 + 36);
    if (v80 < (v81 & 0xFFFFFFFFFFFFC000 | 0x858))
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"out_slice >= ((xzm_segment_t)((uintptr_t)slice & ~(XZM"
                             "_METAPOOL_SEGMENT_BLOCK_SIZE - 1)))->xzs_slices\" failed (/Library/Caches/com.apple.xbs/Sou"
                             "rces/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:582)";
      __break(1u);
      JUMPOUT(0x5AE94);
    }
    unint64_t v84 = v80;
    unint64_t v83 = v81;
    int v12 = *(unsigned char *)(v80 + 32) & 0xF;
    if ((v12 - 1) < 2)
    {
      BOOL v85 = v84 == v83;
    }
    else if (v12 == 3 || (v12 - 5) < 4)
    {
      if (v83 < v84)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice >= span\" failed (/Library/Caches/com.apple.xb"
                               "s/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:560)";
        __break(1u);
        JUMPOUT(0x5AF38);
      }
      BOOL v85 = v83 < v84 + 48 * *(unsigned int *)(v84 + 40);
    }
    else
    {
      BOOL v85 = 0;
    }
    if (v85) {
      unint64_t v82 = v80;
    }
    else {
      unint64_t v82 = v81;
    }
  }
  else
  {
    unint64_t v82 = v81;
  }
  unint64_t v71 = v82;
  unsigned __int8 v136 = *(unsigned char *)(v82 + 32) & 0xF;
  if (v136 >= 2u)
  {
    if (v136 == 2)
    {
LABEL_50:
      char v137 = 1;
      goto LABEL_51;
    }
    if (v136 - 3 >= 2)
    {
      if (v136 - 5 >= 3)
      {
        uint64_t v135 = v136;
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
        qword_C0148 = v136;
        __break(1u);
        JUMPOUT(0x5B05CLL);
      }
      goto LABEL_50;
    }
  }
  char v137 = 0;
LABEL_51:
  if (v137 == 1) {
    unint64_t v11 = v71;
  }
  else {
    unint64_t v11 = 0;
  }
  unint64_t v75 = v11;
LABEL_55:
  unint64_t v33 = v75;
  if (!v75)
  {
    unint64_t v41 = 0;
    goto LABEL_107;
  }
  if (*(unsigned __int16 *)(v33 + 34) != *(unsigned __int16 *)(v40 + 208))
  {
    unint64_t v41 = 0;
    goto LABEL_107;
  }
  uint64_t v32 = v39;
  unint64_t v31 = 0;
  uint64_t v54 = v40;
  unint64_t v53 = v33;
  uint64_t v52 = 0;
  uint64_t v56 = v40;
  unint64_t v55 = v33;
  uint64_t v59 = v40;
  unint64_t v58 = v33;
  unint64_t v57 = v33 & 0xFFFFFFFFFFFFC000;
  char v10 = 1;
  if ((v33 & 0xFFFFFFFFFFFFC000) != 0)
  {
    BOOL v9 = 0;
    if (v58 >= v57 + 2136) {
      BOOL v9 = v58 < v57 + 48 * *(unsigned int *)(v57 + 16) + 2136;
    }
    char v10 = v9;
  }
  if ((v10 & 1) == 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0x5B2ACLL);
  }
  unint64_t v61 = v57;
  unint64_t v60 = v55;
  unint64_t v66 = v57;
  unint64_t v65 = v55;
  if (v55 < v57 + 2136)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" fai"
                           "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                           "e_internal.h:278)";
    __break(1u);
    JUMPOUT(0x5B310);
  }
  int64_t v64 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v65 - v66 - 2136) >> 4);
  if (v64 >= *(unsigned int *)(v66 + 16))
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fail"
                           "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline"
                           "_internal.h:280)";
    __break(1u);
    JUMPOUT(0x5B378);
  }
  unint64_t v63 = v57;
  int v62 = v64;
  unint64_t v31 = *(void *)(v57 + 80) + ((unint64_t)v64 << 14);
  unint64_t v30 = v32 - v31;
  char v29 = 0;
  char v29 = *(unsigned char *)(v33 + 32) & 0xF;
  uint64_t v28 = 0;
  unint64_t v27 = 0;
  char v48 = v29;
  if (v29 == 2 || v29 == 5)
  {
    uint64_t v28 = *(void *)(v40 + 216) + 88 * *(unsigned __int8 *)(v33 + 33);
    unint64_t v27 = *(void *)(v28 + 48);
    if (!XZM_FAST_ALIGNED(v30, v27, *(_DWORD *)(v28 + 64)))
    {
      unint64_t v41 = 0;
      goto LABEL_107;
    }
  }
  else
  {
    unint64_t v27 = (unint64_t)*(unsigned int *)(v33 + 40) << 14;
    unint64_t v26 = v30 % v27;
    if (v30 % v27)
    {
      unint64_t v41 = 0;
      goto LABEL_107;
    }
  }
  unint64_t v25 = v30 / v27;
  char v46 = *(unsigned char *)(v33 + 32) & 0xF;
  BOOL v47 = v46 == 2 || v46 == 5;
  BOOL v8 = 1;
  if (v47) {
    BOOL v8 = v25 < *(unsigned int *)(v28 + 68);
  }
  if (!v8)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!_xzm_slice_kind_uses_xzones(chunk->xzc_bits.xzcb_kind) "
                           "|| block_index < xz->xz_chunk_capacity\" failed (/Library/Caches/com.apple.xbs/Sources/libmal"
                           "loc_driverkit/src/xzone/xzone_malloc.c:2924)";
    __break(1u);
    JUMPOUT(0x5B5B0);
  }
  uint64_t v122 = v40;
  unint64_t v121 = (atomic_ullong *)v33;
  char v120 = v29;
  unint64_t v119 = v30;
  unint64_t v118 = v27;
  uint64_t v117 = v32;
  if ((*(unsigned char *)(v33 + 32) & 0xF) != v29)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == kind\" failed (/Library/Cac"
                           "hes/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2801)";
    __break(1u);
    JUMPOUT(0x5B620);
  }
  if (v120 == 2)
  {
    uint64_t v116 = 0;
    uint64_t v115 = 0;
    uint64_t v114 = *(void *)v117;
    uint64_t v115 = v114;
    uint64_t v113 = v114;
    uint64_t v116 = v114;
    uint64_t v112 = 0;
    uint64_t v112 = *(void *)(v122 + 272) ^ v117;
    if (v114 == v112)
    {
      char is_free_slow = 0;
      char is_free_slow = _xzm_xzone_tiny_chunk_block_is_free_slow(v122, v121, v117);
      char v123 = is_free_slow & 1;
    }
    else
    {
      char v123 = 0;
    }
  }
  else if (v120 == 5)
  {
    unint64_t v110 = v119 / v118;
    uint64_t v139 = v121;
    int v138 = v119 / v118;
    if ((*((unsigned char *)v121 + 32) & 0xF) != 5)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == XZM_SLICE_KIND_SMALL_CHUN"
                             "K\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xz"
                             "one_inline_internal.h:919)";
      __break(1u);
      JUMPOUT(0x5B740);
    }
    char v123 = (*(_DWORD *)v139 >> v138) & 1;
  }
  else
  {
    char v123 = 0;
  }
  if (v123 == 1)
  {
    unint64_t v41 = 0;
  }
  else
  {
    if (v38) {
      *uint64_t v38 = v28;
    }
    if (v37) {
      uint64_t *v37 = v32;
    }
    if (v36) {
      *BOOL v36 = v27;
    }
    unint64_t v41 = v33;
  }
LABEL_107:
  unint64_t v17 = v41;
  if (v41)
  {
    char v16 = *(unsigned char *)(v41 + 32) & 0xF;
    *char v21 = v16;
    uint64_t v45 = v23;
    unint64_t v44 = v17;
    unint64_t v43 = v17 & 0xFFFFFFFFFFFFC000;
    char v7 = 1;
    if ((v17 & 0xFFFFFFFFFFFFC000) != 0)
    {
      BOOL v6 = 0;
      if (v44 >= v43 + 2136) {
        BOOL v6 = v44 < v43 + 48 * *(unsigned int *)(v43 + 16) + 2136;
      }
      char v7 = v6;
    }
    if ((v7 & 1) == 0)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < ("
                             "segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple."
                             "xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
      __break(1u);
      JUMPOUT(0x5B900);
    }
    *uint64_t v20 = **(unsigned char **)v43;
    char v50 = v16;
    if (v16 == 2 || v16 == 5)
    {
      if (!v18)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"xz\" failed (/Library/Caches/com.apple.xbs/Sources/l"
                               "ibmalloc_driverkit/src/xzone/xzone_malloc.c:4172)";
        __break(1u);
        JUMPOUT(0x5B9A4);
      }
      *unint64_t v19 = *(unsigned char *)(v18 + 76);
    }
    return 1;
  }
  else
  {
    return 0;
  }
}

uint64_t xzm_type_choose_ptr_bucket_4test(void *a1, unsigned __int8 a2, unsigned int a3)
{
  if (a2 >= 5u)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr_bucket_count <= XZM_POINTER_BUCKETS_MAX\" failed (/L"
                           "ibrary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:99)";
    __break(1u);
    JUMPOUT(0x5BA34);
  }
  switch(a2)
  {
    case 2u:
      unsigned __int8 v5 = (int)(*a1 * a3 + HIDWORD(*a1)) < 0;
      break;
    case 3u:
      unint64_t v3 = (*a1 * (unint64_t)a3 + a1[1]) >> 34;
      unsigned __int8 v5 = v3 - 3 * ((v3 * (unsigned __int128)0x5555555555555556uLL) >> 64);
      break;
    case 4u:
      unsigned __int8 v5 = ((*a1 * (unint64_t)a3 + a1[1]) >> 32) & 3;
      break;
    default:
      unsigned __int8 v5 = 0;
      break;
  }
  return v5;
}

uint64_t xzm_main_malloc_zone_create(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  kern_return_t v270;
  mach_timebase_info info;
  unsigned __int8 v272;
  unsigned int v273;
  unsigned int v274;
  unsigned int v275;
  unsigned __int8 v276;
  BOOL v277;
  BOOL v278;
  BOOL v279;
  char v280;
  uint64_t v281[3];
  unsigned __int8 v282;
  BOOL v283;
  uint64_t v284;
  void __buf[5];
  unsigned int v286;
  int v287;
  int v288;
  int v289;
  int v290;
  int v291;
  unsigned __int8 v292;
  char v293;
  unsigned __int8 v294;
  unsigned __int8 v295;
  unsigned char v296[256];
  char v297[17];

  v238 = __buf;
  v239 = v253;
  v286 = a1;
  __buf[4] = a2;
  __buf[3] = a3;
  __buf[2] = a4;
  __buf[1] = 0;
  __buf[0] = 0;
  v284 = 0;
  v284 = _simple_getenv();
  if (v284)
  {
    *((void *)v239 + 157) = 0;
    uint64_t v4 = _platform_strlen();
    unsigned __int8 v5 = v239;
    *((void *)v239 + 157) = v4;
    if (*((void *)v5 + 157) <= 0x1FuLL)
    {
      BOOL v6 = v239;
      *((void *)v239 + 156) = 0;
      *((void *)v6 + 156) = *((void *)v6 + 157);
      uint64_t v7 = *((void *)v6 + 156);
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: invalid executable_boothash length";
      qword_C0148 = v7;
      __break(1u);
      JUMPOUT(0x5BC98);
    }
    BOOL v8 = v239;
    *((void *)v239 + 155) = 0;
    v8[155] = 16;
    v8[154] = 0;
    v8[153] = 0;
    v8[153] = 2;
    v8[152] = 0;
    v8[152] = 0;
    while (*((void *)v239 + 152) <= 1uLL)
    {
      int __base = 16;
      __str = v297;
      _platform_memmove();
      v297[16] = 0;
      unint64_t v9 = strtoull(v297, 0, 16);
      char v10 = v239;
      *((void *)v239 + 154) = v9;
      if (!*((void *)v10 + 154) && *__error() == 22 || *((void *)v239 + 154) == -1 && *__error() == 34)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: invalid executable_boothash string";
        __break(1u);
        JUMPOUT(0x5BD90);
      }
      __buf[(*((void *)v239 + 152))++] = *((void *)v239 + 154);
    }
  }
  else
  {
    arc4random_buf(__buf, 0x10uLL);
  }
  unint64_t v11 = v239;
  *((void *)v239 + 151) = 0;
  *((void *)v11 + 151) = 0;
  v283 = (v286 & 0x20) != 0;
  int v12 = v239;
  BOOL v13 = v238;
  v282 = 2;
  *((void *)v239 + 149) = 0;
  *((void *)v12 + 149) = 0;
  *((void *)v12 + 148) = 0;
  unint64_t v14 = malloc_common_value_for_key_copy((unsigned char *)v13[2], (uint64_t)"xzone_ptr_buckets", v296, 0x100uLL);
  uint64_t v15 = v239;
  *((void *)v239 + 148) = v14;
  if (*((void *)v15 + 148))
  {
    char v16 = v239;
    *((void *)v239 + 147) = 0;
    *((void *)v16 + 146) = 0;
    uint64_t v17 = malloc_common_convert_to_long(*((char **)v16 + 148), v281);
    uint64_t v18 = v239;
    *((void *)v239 + 146) = v17;
    if (**((unsigned char **)v18 + 147) || *((uint64_t *)v239 + 146) < 1 || *((uint64_t *)v239 + 146) > 4)
    {
      v190[0] = *((void *)v239 + 146);
      malloc_report(3, (uint64_t)"Invalid xzone_ptr_buckets value %ld - ignored.\n");
    }
    else
    {
      *((void *)v239 + 149) = *((void *)v239 + 146);
    }
  }
  v280 = 1;
  uint64_t v19 = _simple_getenv();
  uint64_t v20 = v239;
  *((void *)v239 + 148) = v19;
  if (*((void *)v20 + 148))
  {
    char v21 = (const char **)v239;
    *((void *)v239 + 144) = 0;
    uint64_t v22 = strtol(v21[148], 0, 10);
    uint64_t v23 = v239;
    *((void *)v239 + 144) = v22;
    if (*((void *)v23 + 144) == 1)
    {
      v282 = 0;
      *((void *)v239 + 149) = 1;
    }
    else if (*((void *)v239 + 144) == 2 || *((void *)v239 + 144) == 0xFFFFLL)
    {
      v282 = 1;
      *((void *)v239 + 149) = 1;
    }
  }
  uint64_t v24 = v238;
  v238[45] = v238[4];
  v24[44] = "MallocXzonePtrBucketCount";
  if (malloc_internal_security_policy) {
    uint64_t v235 = _simple_getenv();
  }
  else {
    uint64_t v235 = 0;
  }
  unint64_t v25 = v239;
  *((void *)v239 + 148) = v235;
  if (*((void *)v25 + 148))
  {
    unint64_t v26 = (const char **)v239;
    *((void *)v239 + 143) = 0;
    uint64_t v27 = strtol(v26[148], 0, 10);
    uint64_t v28 = v239;
    *((void *)v239 + 143) = v27;
    if ((*((void *)v28 + 143) & 0x8000000000000000) == 0 && *((uint64_t *)v239 + 143) <= 4) {
      *((void *)v239 + 149) = *((void *)v239 + 143);
    }
  }
  char v29 = v239;
  *((void *)v239 + 142) = 0;
  uint64_t v234 = *((void *)v29 + 149);
  if (v234) {
    uint64_t v233 = v234;
  }
  else {
    uint64_t v233 = 3;
  }
  unint64_t v30 = v239;
  *((void *)v239 + 142) = v233;
  v30[141] = 0;
  v30[140] = 40;
  v30[141] = v30[140];
  v30[139] = 0;
  v30[139] = 1;
  if (v30[149])
  {
    unint64_t v31 = v239;
    *((void *)v239 + 138) = 0;
    v31[138] = v31[149] + 2;
    v31[139] += v31[141] * v31[138];
  }
  else
  {
    uint64_t v32 = v239;
    *((void *)v239 + 137) = 0;
    *((void *)v32 + 137) = 0;
    while (1)
    {
      unint64_t v33 = v239;
      unint64_t v34 = *((void *)v239 + 137);
      *((void *)v239 + 136) = 40;
      if (v34 >= *((void *)v33 + 136)) {
        break;
      }
      *((void *)v239 + 139) += _xzm_bin_bucket_defaults[(*((void *)v239 + 137))++];
    }
  }
  if (*((void *)v239 + 139) >= 0x100uLL)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"xzone_count <= UINT8_MAX\" failed (/Library/Caches/com.a"
                           "pple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:4732)";
    __break(1u);
    JUMPOUT(0x5C1C4);
  }
  v279 = 0;
  if (*((void *)v239 + 151)) {
    v279 = (*(unsigned char *)(*((void *)v239 + 151) + 1) & 1) != 0;
  }
  uint64_t v35 = v238;
  v238[43] = v238[4];
  v35[42] = "MallocXzoneMadviseWorkaround";
  if (malloc_internal_security_policy) {
    uint64_t v232 = _simple_getenv();
  }
  else {
    uint64_t v232 = 0;
  }
  BOOL v36 = v239;
  *((void *)v239 + 148) = v232;
  if (*((void *)v36 + 148))
  {
    char v37 = (const char **)v239;
    *((void *)v239 + 134) = 0;
    uint64_t v38 = strtol(v37[148], 0, 10);
    unint64_t v39 = v239;
    *((void *)v239 + 134) = v38;
    if (!*((void *)v39 + 134) || *((void *)v239 + 134) == 1) {
      v279 = *((void *)v239 + 134) != 0;
    }
  }
  v278 = 1;
  if (*((void *)v239 + 151)) {
    v278 = (*(unsigned char *)(*((void *)v239 + 151) + 2) & 1) == 0;
  }
  v277 = _malloc_engaged_nano == 2;
  if (_malloc_engaged_nano == 2) {
    v282 = 2;
  }
  if (*((void *)v239 + 151) && **((unsigned char **)v239 + 151) != 3) {
    v282 = **((unsigned char **)v239 + 151);
  }
  uint64_t v40 = malloc_common_value_for_key_copy((unsigned char *)v238[2], (uint64_t)"malloc_xzone_slot_config", v296, 0x100uLL);
  unint64_t v41 = v239;
  *((void *)v239 + 148) = v40;
  if (*((void *)v41 + 148))
  {
    uint64_t v42 = (const char **)v239;
    *((void *)v239 + 132) = 0;
    uint64_t v43 = strtol(v42[148], 0, 10);
    unint64_t v44 = v239;
    *((void *)v239 + 132) = v43;
    if ((v44[66] & 0x8000000000000000) == 0 && *((uint64_t *)v239 + 132) <= 2) {
      v282 = *((void *)v239 + 132);
    }
  }
  uint64_t v45 = v238;
  v238[41] = v238[4];
  v45[40] = "MallocXzoneSlotConfig";
  if (malloc_internal_security_policy) {
    uint64_t v231 = _simple_getenv();
  }
  else {
    uint64_t v231 = 0;
  }
  char v46 = v239;
  *((void *)v239 + 148) = v231;
  if (*((void *)v46 + 148))
  {
    BOOL v47 = (const char **)v239;
    *((void *)v239 + 131) = 0;
    uint64_t v48 = strtol(v47[148], 0, 10);
    int v49 = v239;
    *((void *)v239 + 131) = v48;
    if ((*((void *)v49 + 131) & 0x8000000000000000) == 0 && *((uint64_t *)v239 + 131) <= 2) {
      v282 = *((void *)v239 + 131);
    }
  }
  char v50 = v238;
  v276 = 0;
  v238[39] = v238[4];
  v50[38] = "MallocXzoneInitialSlotConfig";
  if (malloc_internal_security_policy) {
    uint64_t v230 = _simple_getenv();
  }
  else {
    uint64_t v230 = 0;
  }
  int64_t v51 = v239;
  *((void *)v239 + 148) = v230;
  if (*((void *)v51 + 148))
  {
    uint64_t v52 = (const char **)v239;
    *((void *)v239 + 129) = 0;
    uint64_t v53 = strtol(v52[148], 0, 10);
    uint64_t v54 = v239;
    *((void *)v239 + 129) = v53;
    if ((*((void *)v54 + 129) & 0x8000000000000000) == 0 && *((uint64_t *)v239 + 129) <= 2) {
      v276 = *((void *)v239 + 129);
    }
  }
  unint64_t v55 = v238;
  v275 = 64;
  v274 = 256;
  v238[37] = v238[4];
  v55[36] = "MallocXzoneSlotUpgradeThreshold";
  if (malloc_internal_security_policy) {
    uint64_t v229 = _simple_getenv();
  }
  else {
    uint64_t v229 = 0;
  }
  uint64_t v56 = v239;
  *((void *)v239 + 148) = v229;
  if (*((void *)v56 + 148))
  {
    unint64_t v57 = (const char **)v239;
    *((void *)v239 + 127) = 0;
    uint64_t v58 = strtol(v57[148], 0, 10);
    uint64_t v59 = v239;
    *((void *)v239 + 127) = v58;
    if ((*((void *)v59 + 127) & 0x8000000000000000) == 0 && *((uint64_t *)v239 + 127) <= 4294967294)
    {
      v275 = *((void *)v239 + 127);
      v274 = *((void *)v239 + 127);
    }
  }
  unint64_t v60 = v238;
  v238[35] = v238[4];
  v60[34] = "MallocXzoneSlotUpgradeThresholdSingle";
  if (malloc_internal_security_policy) {
    uint64_t v228 = _simple_getenv();
  }
  else {
    uint64_t v228 = 0;
  }
  unint64_t v61 = v239;
  *((void *)v239 + 148) = v228;
  if (*((void *)v61 + 148))
  {
    int v62 = (const char **)v239;
    *((void *)v239 + 126) = 0;
    uint64_t v63 = strtol(v62[148], 0, 10);
    int64_t v64 = v239;
    *((void *)v239 + 126) = v63;
    if ((v64[63] & 0x8000000000000000) == 0 && *((uint64_t *)v239 + 126) <= 4294967294) {
      v275 = *((void *)v239 + 126);
    }
  }
  unint64_t v65 = v238;
  v238[33] = v238[4];
  v65[32] = "MallocXzoneSlotUpgradeThresholdCluster";
  if (malloc_internal_security_policy) {
    uint64_t v227 = _simple_getenv();
  }
  else {
    uint64_t v227 = 0;
  }
  unint64_t v66 = v239;
  *((void *)v239 + 148) = v227;
  if (*((void *)v66 + 148))
  {
    unint64_t v67 = (const char **)v239;
    *((void *)v239 + 125) = 0;
    uint64_t v68 = strtol(v67[148], 0, 10);
    uint64_t v69 = v239;
    *((void *)v239 + 125) = v68;
    if ((*((void *)v69 + 125) & 0x8000000000000000) == 0 && *((uint64_t *)v239 + 125) <= 4294967294) {
      v274 = *((void *)v239 + 125);
    }
  }
  unint64_t v70 = v238;
  v273 = 1024;
  v238[31] = v238[4];
  v70[30] = "MallocXzoneSlotUpgradePeriod";
  if (malloc_internal_security_policy) {
    uint64_t v226 = _simple_getenv();
  }
  else {
    uint64_t v226 = 0;
  }
  unint64_t v71 = v239;
  *((void *)v239 + 148) = v226;
  if (*((void *)v71 + 148))
  {
    uint64_t v72 = (const char **)v239;
    *((void *)v239 + 123) = 0;
    uint64_t v73 = strtol(v72[148], 0, 10);
    unint64_t v74 = v239;
    *((void *)v239 + 123) = v73;
    if ((*((void *)v74 + 123) & 0x8000000000000000) == 0 && *((uint64_t *)v239 + 123) <= 4294967294) {
      v273 = *((void *)v239 + 123);
    }
  }
  v272 = 0;
  int v225 = v282;
  if (!v282)
  {
    v272 = 1;
    goto LABEL_112;
  }
  if (v225 == 1)
  {
    if (ncpuclusters >= 2)
    {
      v272 = ncpuclusters;
      goto LABEL_112;
    }
  }
  else if (v225 != 2)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: Invalid xzone slot config";
    __break(1u);
    JUMPOUT(0x5C970);
  }
  v282 = 2;
  v272 = logical_ncpus;
LABEL_112:
  unint64_t v75 = v238;
  unsigned int v76 = v239;
  *((void *)v239 + 121) = 0;
  *((void *)v76 + 121) = 1000000;
  *((void *)v76 + 120) = 0;
  *((void *)v76 + 120) = 1000000;
  v75[29] = v75[4];
  v75[28] = "MallocXzoneTinyThrashThreshold";
  if (malloc_internal_security_policy) {
    uint64_t v224 = _simple_getenv();
  }
  else {
    uint64_t v224 = 0;
  }
  unint64_t v77 = v239;
  *((void *)v239 + 148) = v224;
  if (*((void *)v77 + 148))
  {
    unint64_t v78 = (const char **)v239;
    *((void *)v239 + 119) = 0;
    uint64_t v79 = strtol(v78[148], 0, 10);
    unint64_t v80 = v239;
    *((void *)v239 + 119) = v79;
    if ((*((void *)v80 + 119) & 0x8000000000000000) == 0 && *((uint64_t *)v239 + 119) <= 4294967294) {
      *((void *)v239 + 120) = 1000000 * *((void *)v239 + 119);
    }
  }
  *((void *)v239 + 118) = 0;
  v270 = 0;
  v270 = mach_timebase_info(&info);
  if (v270)
  {
    unint64_t v81 = v239;
    *((void *)v239 + 116) = 0;
    *((void *)v81 + 116) = v270;
    uint64_t v82 = *((void *)v81 + 116);
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: mach_timebase_info failed";
    qword_C0148 = v82;
    __break(1u);
    JUMPOUT(0x5CAC8);
  }
  unint64_t v83 = v239;
  *((void *)v239 + 115) = 0;
  *((void *)v83 + 115) = *((void *)v83 + 120) * (unint64_t)info.denom / info.numer;
  unsigned __int16 v269 = 0;
  BOOL v268 = 0;
  BOOL v267 = 0;
  uint64_t v84 = _simple_getenv();
  BOOL v85 = v239;
  *((void *)v239 + 148) = v84;
  if (*((void *)v85 + 148))
  {
    int64_t v86 = (const char **)v239;
    *((void *)v239 + 113) = 0;
    uint64_t v87 = strtol(v86[148], 0, 10);
    unint64_t v88 = v239;
    *((void *)v239 + 113) = v87;
    if (*((void *)v88 + 113) && *((void *)v239 + 113) != 1)
    {
      malloc_report(3, (uint64_t)"MallocLargeCache must be 0 or 1.\n");
    }
    else
    {
      unsigned __int16 v269 = 16 * (*((void *)v239 + 113) == 1);
      BOOL v267 = *((void *)v239 + 113) == 1;
    }
  }
  if (_malloc_engaged_nano != 2)
  {
    BOOL v267 = 0;
    unsigned __int16 v269 = 0;
  }
  int64_t v89 = v238;
  v238[27] = v238[4];
  v89[26] = "MallocXzoneHugeCacheSize";
  if (malloc_internal_security_policy) {
    uint64_t v223 = _simple_getenv();
  }
  else {
    uint64_t v223 = 0;
  }
  int64_t v90 = v239;
  *((void *)v239 + 148) = v223;
  if (*((void *)v90 + 148))
  {
    unint64_t v91 = (const char **)v239;
    *((void *)v239 + 112) = 0;
    uint64_t v92 = strtol(v91[148], 0, 10);
    int64_t v93 = v239;
    *((void *)v239 + 112) = v92;
    if ((v93[56] & 0x8000000000000000) != 0 || *((uint64_t *)v239 + 112) >= 0x10000)
    {
      v190[0] = *((void *)v239 + 112);
      malloc_report(3, (uint64_t)"xzm: unsupported value for MallocXzoneHugeCacheSize (%ld)");
    }
    else
    {
      unsigned __int16 v269 = *((void *)v239 + 112);
    }
  }
  unint64_t v94 = v238;
  v238[25] = v238[4];
  v94[24] = "MallocDeferredReclaim";
  if (malloc_internal_security_policy) {
    uint64_t v222 = _simple_getenv();
  }
  else {
    uint64_t v222 = 0;
  }
  unint64_t v95 = v239;
  *((void *)v239 + 148) = v222;
  if (*((void *)v95 + 148))
  {
    int v96 = (const char **)v239;
    *((void *)v239 + 111) = 0;
    uint64_t v97 = strtol(v96[148], 0, 10);
    unsigned int v98 = v239;
    *((void *)v239 + 111) = v97;
    if (*((void *)v98 + 111) && *((void *)v239 + 111) != 1)
    {
      v190[0] = *((void *)v239 + 111);
      malloc_report(3, (uint64_t)"MallocDeferredReclaim must be one of 0,1 - got %ld\n");
    }
    else
    {
      BOOL v268 = *((void *)v239 + 111) == 1;
      BOOL v267 = *((void *)v239 + 111) == 1;
    }
  }
  unint64_t v99 = v238;
  v238[23] = v238[4];
  v99[22] = "MallocXzoneDeferLarge";
  if (malloc_internal_security_policy) {
    uint64_t v221 = _simple_getenv();
  }
  else {
    uint64_t v221 = 0;
  }
  int v100 = v239;
  *((void *)v239 + 148) = v221;
  if (*((void *)v100 + 148))
  {
    unint64_t v101 = (const char **)v239;
    *((void *)v239 + 110) = 0;
    uint64_t v102 = strtol(v101[148], 0, 10);
    unint64_t v103 = v239;
    *((void *)v239 + 110) = v102;
    if (*((void *)v103 + 110) && *((void *)v239 + 110) != 1)
    {
      v190[0] = *((void *)v239 + 110);
      malloc_report(3, (uint64_t)"MallocDeferredReclaim must be one of 0,1 - got %ld\n");
    }
    else
    {
      BOOL v267 = *((void *)v239 + 110) == 1;
    }
  }
  if (v269 && !v267)
  {
    malloc_report(3, (uint64_t)"Huge cache requires deferred reclamation for large.\n");
    BOOL v267 = 1;
  }
  if (v268 && !v267)
  {
    malloc_report(3, (uint64_t)"Deferred reclamation cannot be used for xzones without large\n");
    BOOL v267 = 1;
  }
  int v104 = v238;
  int v220 = 0;
  BOOL v266 = 0;
  BOOL v265 = 0;
  char v264 = 0;
  char v263 = 0;
  char v262 = 0;
  char v261 = 0;
  v238[21] = v238[4];
  v104[20] = "MallocXzoneGuarded";
  if (malloc_internal_security_policy) {
    uint64_t v219 = _simple_getenv();
  }
  else {
    uint64_t v219 = 0;
  }
  unint64_t v105 = v239;
  *((void *)v239 + 148) = v219;
  if (*((void *)v105 + 148))
  {
    unint64_t v106 = (const char **)v239;
    *((void *)v239 + 108) = 0;
    uint64_t v107 = strtol(v106[148], 0, 10);
    unint64_t v108 = v239;
    *((void *)v239 + 108) = v107;
    if (!*((void *)v108 + 108) || *((void *)v239 + 108) == 1) {
      BOOL v266 = *((void *)v239 + 108) != 0;
    }
  }
  unint64_t v109 = malloc_common_value_for_key_copy((unsigned char *)v238[2], (uint64_t)"xzone_guard_pages", v296, 0x100uLL);
  unint64_t v110 = v239;
  *((void *)v239 + 148) = v109;
  if (*((void *)v110 + 148))
  {
    unint64_t v111 = (const char **)v239;
    *((void *)v239 + 107) = 0;
    uint64_t v112 = strtol(v111[148], 0, 10);
    uint64_t v113 = v239;
    *((void *)v239 + 107) = v112;
    if (*((void *)v113 + 107) && *((void *)v239 + 107) != 1)
    {
      v190[0] = "xzone_guard_pages";
      malloc_report(3, (uint64_t)"%s must be 0 or 1.\n");
    }
    else
    {
      BOOL v266 = *((void *)v239 + 107) != 0;
    }
  }
  if (v266)
  {
    uint64_t v114 = v238;
    BOOL v265 = 1;
    v238[19] = v238[4];
    v114[18] = "MallocXzoneGuardedData";
    if (malloc_internal_security_policy) {
      uint64_t v218 = _simple_getenv();
    }
    else {
      uint64_t v218 = 0;
    }
    uint64_t v115 = v239;
    *((void *)v239 + 148) = v218;
    if (*((void *)v115 + 148))
    {
      uint64_t v116 = (const char **)v239;
      *((void *)v239 + 106) = 0;
      uint64_t v117 = strtol(v116[148], 0, 10);
      unint64_t v118 = v239;
      *((void *)v239 + 106) = v117;
      if (!*((void *)v118 + 106) || *((void *)v239 + 106) == 1) {
        BOOL v265 = *((void *)v239 + 106) != 0;
      }
    }
    unint64_t v119 = v238;
    char v264 = 8;
    v238[17] = v238[4];
    v119[16] = "MallocXzoneGuardTinyRun";
    if (malloc_internal_security_policy) {
      uint64_t v217 = _simple_getenv();
    }
    else {
      uint64_t v217 = 0;
    }
    char v120 = v239;
    *((void *)v239 + 148) = v217;
    if (*((void *)v120 + 148))
    {
      unint64_t v121 = (const char **)v239;
      *((void *)v239 + 105) = 0;
      uint64_t v122 = strtol(v121[148], 0, 10);
      char v123 = (uint64_t *)v239;
      *((void *)v239 + 105) = v122;
      if (v123[105] >= 1) {
        char v264 = *((void *)v239 + 105);
      }
    }
    unint64_t v124 = v238;
    char v263 = 64;
    v238[15] = v238[4];
    v124[14] = "MallocXzoneGuardTinyDensity";
    if (malloc_internal_security_policy) {
      uint64_t v216 = _simple_getenv();
    }
    else {
      uint64_t v216 = 0;
    }
    uint64_t v125 = v239;
    *((void *)v239 + 148) = v216;
    if (*((void *)v125 + 148))
    {
      uint64_t v126 = (const char **)v239;
      *((void *)v239 + 104) = 0;
      uint64_t v127 = strtol(v126[148], 0, 10);
      uint64_t v128 = (uint64_t *)v239;
      *((void *)v239 + 104) = v127;
      if (v128[104] >= 1) {
        char v263 = *((void *)v239 + 104);
      }
    }
    unsigned int v129 = v238;
    char v262 = 3;
    v238[13] = v238[4];
    v129[12] = "MallocXzoneGuardSmallRun";
    if (malloc_internal_security_policy) {
      uint64_t v215 = _simple_getenv();
    }
    else {
      uint64_t v215 = 0;
    }
    unint64_t v130 = v239;
    *((void *)v239 + 148) = v215;
    if (*((void *)v130 + 148))
    {
      unint64_t v131 = (const char **)v239;
      *((void *)v239 + 103) = 0;
      uint64_t v132 = strtol(v131[148], 0, 10);
      unint64_t v133 = (uint64_t *)v239;
      *((void *)v239 + 103) = v132;
      if (v133[103] >= 1) {
        char v262 = *((void *)v239 + 103);
      }
    }
    unint64_t v134 = v238;
    char v261 = 32;
    v238[11] = v238[4];
    v134[10] = "MallocXzoneGuardSmallDensity";
    if (malloc_internal_security_policy) {
      uint64_t v214 = _simple_getenv();
    }
    else {
      uint64_t v214 = 0;
    }
    uint64_t v135 = v239;
    *((void *)v239 + 148) = v214;
    if (*((void *)v135 + 148))
    {
      unsigned __int8 v136 = (const char **)v239;
      *((void *)v239 + 102) = 0;
      uint64_t v137 = strtol(v136[148], 0, 10);
      int v138 = (uint64_t *)v239;
      *((void *)v239 + 102) = v137;
      if (v138[102] >= 1) {
        char v261 = *((void *)v239 + 102);
      }
    }
  }
  uint64_t v139 = v238;
  char v140 = v239;
  *((void *)v239 + 101) = 0;
  v140[101] = 2;
  v140[100] = 0;
  v140[100] = 4;
  v140[99] = 0;
  v140[99] = 4;
  v139[9] = v139[4];
  v139[8] = "MallocXzoneDataOnly";
  if (malloc_internal_security_policy) {
    uint64_t v213 = _simple_getenv();
  }
  else {
    uint64_t v213 = 0;
  }
  unint64_t v141 = v239;
  *((void *)v239 + 148) = v213;
  if (*((void *)v141 + 148))
  {
    uint64_t v142 = (const char **)v239;
    *((void *)v239 + 98) = 0;
    uint64_t v143 = strtol(v142[148], 0, 10);
    unint64_t v144 = v239;
    *((void *)v239 + 98) = v143;
    if (*((void *)v144 + 98) == 1)
    {
      *((void *)v239 + 100) = 2;
    }
    else if (*((void *)v239 + 98))
    {
      malloc_report(3, (uint64_t)"MallocXzoneDataOnly must be 0 or 1.\n");
    }
  }
  uint64_t v145 = v239;
  uint64_t v212 = 0;
  *((void *)v239 + 97) = 0;
  v145[97] = 472;
  v145[96] = 0;
  v145[96] = v145[97];
  v145[97] += 88 * v145[139];
  v145[95] = 0;
  v145[95] = v145[97];
  v145[94] = 0;
  v145[94] = v145[139] * v272;
  v145[97] += 32 * v145[94];
  v145[93] = 0;
  v145[93] = v145[97];
  v145[97] += 8 * v145[141];
  v145[92] = 0;
  v145[92] = v145[97];
  v145[97] += v145[141];
  v145[91] = 0;
  v145[91] = v145[97];
  v145[97] += v145[141];
  v145[90] = 0;
  v145[90] = v145[97];
  v145[97] += 16 * v145[139];
  v145[89] = 0;
  v145[89] = v145[97];
  v145[97] += 56 * v145[101];
  v145[88] = 0;
  v145[88] = v145[97];
  v145[97] += 528 * v145[100];
  v145[87] = 0;
  v145[87] = v145[97];
  v145[97] += v145[99] << 6;
  v145[86] = 0;
  v145[86] = v145[97];
  v145[97] += 0x10000;
  v145[85] = 0;
  v145[85] = v145[97];
  int v260 = 1;
  v145[83] = 0;
  v145[83] = 0;
  int v259 = 1;
  v145[82] = 0;
  mach_vm_address_t plat = mvm_allocate_plat(0, v145[85], 0, v260, 0, v259, v145[83]);
  unint64_t v147 = v239;
  *((void *)v239 + 82) = plat;
  if (!*((void *)v147 + 82))
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: Failed to allocate xzm zone";
    __break(1u);
    JUMPOUT(0x5D734);
  }
  unint64_t v148 = v239;
  unint64_t v149 = v238;
  uint64_t v211 = 0;
  *((void *)v239 + 81) = 0;
  *((void *)v148 + 81) = *((void *)v148 + 82);
  *((void *)v148 + 80) = 0;
  *((void *)v148 + 80) = *((void *)v148 + 81) + *((void *)v148 + 96);
  *((void *)v148 + 79) = 0;
  *((void *)v148 + 79) = *((void *)v148 + 81) + *((void *)v148 + 95);
  __int16 v258 = 1;
  __dst = (void *)*((void *)v148 + 81);
  *((void *)v148 + 76) = 0;
  long long v208 = 0u;
  v148[37] = 0u;
  v148[36] = 0u;
  v148[35] = 0u;
  v148[34] = 0u;
  v148[33] = 0u;
  v148[32] = 0u;
  v148[31] = 0u;
  v148[30] = 0u;
  v148[29] = 0u;
  v148[28] = 0u;
  v148[27] = 0u;
  v148[26] = 0u;
  v148[25] = 0u;
  v148[24] = 0u;
  v148[23] = 0u;
  v148[22] = 0u;
  v148[21] = 0u;
  v148[20] = 0u;
  v148[19] = 0u;
  v148[18] = 0u;
  v148[17] = 0u;
  v148[16] = 0u;
  v148[15] = 0u;
  v148[14] = 0u;
  v148[13] = 0u;
  v148[12] = 0u;
  v148[11] = 0u;
  v148[10] = 0u;
  v148[9] = 0u;
  *((void *)v148 + 56) = *((void *)v148 + 85);
  __src = v257;
  *(_OWORD *)&v257[39] = *v149;
  LOBYTE(v257[41]) = v257[41] & 0xFD | (2 * v279);
  LOBYTE(v257[41]) = v257[41] & 0xFB | (4 * v268);
  LOBYTE(v257[41]) = v257[41] & 0xF7 | (8 * v267);
  BYTE1(v257[41]) = *((void *)v148 + 101);
  BYTE2(v257[41]) = *((void *)v148 + 99);
  uint64_t v150 = mfm_zone_address();
  unint64_t v151 = v239;
  uint64_t v152 = v150;
  unsigned __int8 v153 = __dst;
  *((void *)v239 + 60) = v152;
  LOBYTE(v257[43]) = v151[100];
  BYTE1(v257[43]) = v151[141];
  v151[62] = v151[81] + v151[93];
  v151[63] = v151[81] + v151[92];
  v151[64] = v151[81] + v151[91];
  v151[65] = v151[81] + v151[90];
  v151[66] = v151[81] + v151[89];
  v151[67] = v151[81] + v151[88];
  v151[68] = v151[81] + v151[87];
  v151[69] = v151[81] + v151[86];
  WORD2(v257[54]) = v258;
  BYTE4(v257[56]) = v266;
  BYTE5(v257[56]) = v265;
  BYTE6(v257[56]) = v264;
  HIBYTE(v257[56]) = v263;
  LOBYTE(v257[57]) = v262;
  BYTE1(v257[57]) = v261;
  memcpy(v153, v257, 0x1D8uLL);
  _xzm_initialize_const_zone_data(*((void **)v239 + 81), *((void *)v239 + 85), v258, *((void *)v239 + 139), v272, *((void *)v239 + 80), *((void *)v239 + 79), v211, v282, v275, v274, v273, *((void *)v239 + 115), v286);
  if (v268 || v267 || v269)
  {
    BOOL v256 = 0;
    BOOL v256 = xzm_reclaim_init(*((void *)v239 + 81));
    if (!v256)
    {
      char v154 = v239;
      unsigned __int16 v269 = 0;
      BOOL v268 = 0;
      *(unsigned char *)(*((void *)v239 + 81) + 328) &= ~4u;
      BOOL v267 = 0;
      *(unsigned char *)(*((void *)v154 + 81) + 328) &= ~8u;
    }
  }
  int v155 = v239;
  *((void *)v239 + 16) = 0;
  *((void *)v155 + 16) = 0;
  while (*((void *)v239 + 16) < *((void *)v239 + 141))
  {
    *(void *)(*(void *)(*((void *)v239 + 81) + 352) + 8 * *((void *)v239 + 16)) = _xzm_bin_sizes[*((void *)v239 + 16)];
    ++*((void *)v239 + 16);
  }
  uint64_t v156 = v239;
  *((void *)v239 + 15) = 0;
  *((void *)v156 + 15) = 0;
  while (*((void *)v239 + 15) < *((void *)v239 + 141))
  {
    if (*((void *)v239 + 149))
    {
      int v157 = v239;
      *((void *)v239 + 14) = 0;
      v157[14] = v157[149] + 2;
      *(unsigned char *)(*(void *)(v157[81] + 360) + v157[15]) = v157[14];
    }
    else
    {
      *(unsigned char *)(*(void *)(*((void *)v239 + 81) + 360) + *((void *)v239 + 15)) = _xzm_bin_bucket_defaults[*((void *)v239 + 15)];
    }
    ++*((void *)v239 + 15);
  }
  BOOL v158 = v239;
  *((void *)v239 + 13) = 0;
  *((void *)v158 + 13) = 0;
  while (*((void *)v239 + 13) < *((void *)v239 + 139))
  {
    unint64_t v159 = v238;
    int v160 = v239;
    *((void *)v239 + 12) = 0;
    v160[12] = *(void *)(v160[81] + 376) + 16 * v160[13];
    v159[55] = v160[12] + 8;
    BOOL v161 = (_DWORD *)v159[55];
    v291 = 0;
    *BOOL v161 = 0;
    ++*((void *)v239 + 13);
  }
  unint64_t v162 = v239;
  *((void *)v239 + 11) = 0;
  *((void *)v162 + 11) = 0;
  while (*((void *)v239 + 11) < *((void *)v239 + 101))
  {
    uint64_t v163 = v238;
    unint64_t v164 = v239;
    *((void *)v239 + 10) = 0;
    v164[10] = *(void *)(v164[81] + 384) + 56 * v164[11];
    *(unsigned char *)v164[10] = v164[11];
    *(void *)(v164[10] + 8) = v164[81];
    v163[53] = v164[10] + 16;
    uint64_t v165 = (_DWORD *)v163[53];
    v290 = 0;
    _DWORD *v165 = 0;
    ++*((void *)v239 + 11);
  }
  if (v278) {
    xzm_main_malloc_zone_init_range_groups(*((void *)v239 + 81));
  }
  unint64_t v166 = v239;
  *((void *)v239 + 9) = 0;
  *((void *)v166 + 9) = 0;
  while (*((void *)v239 + 9) < *((void *)v239 + 100))
  {
    unsigned int v167 = v239;
    unint64_t v168 = v238;
    *((void *)v239 + 8) = 0;
    v167[8] = *(void *)(v167[81] + 392) + 528 * v167[9];
    *(unsigned char *)v167[8] = v167[9];
    v168[51] = v167[8] + 4;
    uint64_t v169 = (_DWORD *)v168[51];
    v289 = 0;
    *uint64_t v169 = 0;
    v168[49] = v167[8] + 8;
    uint64_t v170 = (_DWORD *)v168[49];
    v288 = 0;
    *uint64_t v170 = 0;
    v292 = *(unsigned char *)v167[8];
    int v207 = v292;
    if (v292 < 2u)
    {
      v293 = 1;
    }
    else
    {
      if ((v207 - 2) >= 2)
      {
        v171 = v238;
        v238[56] = 0;
        v171[56] = v292;
        uint64_t v172 = v171[56];
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: unknown segment group id";
        qword_C0148 = v172;
        __break(1u);
        JUMPOUT(0x5DDECLL);
      }
      v293 = 0;
    }
    if (v293 == 1) {
      uint64_t v206 = *(void *)(*((void *)v239 + 81) + 384);
    }
    else {
      uint64_t v206 = *(void *)(*((void *)v239 + 81) + 384) + 56;
    }
    uint64_t v173 = v239;
    *(void *)(*((void *)v239 + 8) + 16) = v206;
    *(void *)(*((void *)v173 + 8) + 24) = *((void *)v173 + 81);
    if (**((unsigned char **)v173 + 8) == 1)
    {
      v174 = v239;
      uint64_t v175 = (_OWORD *)*((void *)v239 + 8);
      v239[3] = 0u;
      memset(v253, 0, sizeof(v253));
      unsigned __int16 v254 = v269;
      int v255 = 0x3FFFF;
      v175[32] = v174[3];
      v175[31] = 0u;
      v175[30] = 0u;
      v175[29] = 0u;
      BOOL v176 = v239;
      *(void *)(*((void *)v239 + 8) + 464) = 0;
      *(void *)(*((void *)v176 + 8) + 472) = *((void *)v176 + 8) + 464;
      unint64_t v177 = v239;
      *(_DWORD *)(*((void *)v239 + 8) + 504) = *(_DWORD *)(*((void *)v239 + 8) + 488);
      *(void *)(*((void *)v177 + 8) + 496) = *(void *)(*((void *)v177 + 8) + 480);
      *(_DWORD *)(*((void *)v177 + 8) + 488) = 5317;
      *(void *)(*((void *)v177 + 8) + 480) = "/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c";
      int64_t v178 = v238;
      v238[47] = *((void *)v239 + 8) + 520;
      uint64_t v179 = (_DWORD *)v178[47];
      v287 = 0;
      *uint64_t v179 = 0;
    }
    for (unint64_t i = 0; i <= 0x1A; ++i)
      *(_DWORD *)(*((void *)v239 + 8) + 16 * i + 40) = _xzm_span_queue_slice_counts[i];
    ++*((void *)v239 + 9);
  }
  uint64_t v204 = 0;
  v251 = 0;
  v251 = (__n128 *)(*(void *)(*((void *)v239 + 81) + 400) + 192);
  int v205 = 0;
  int v203 = 16;
  int v250 = 16;
  int v202 = 0x4000;
  int v249 = 0x4000;
  xzm_metapool_init(v251, 3u, 0x4000u, 0x10u, 0x10u, 0);
  v248 = 0;
  v248 = *(__n128 **)(*((void *)v239 + 81) + 400);
  xzm_metapool_init(v248, 0, 0x80000u, 0x4000u, 0x4000u, (unint64_t)v251);
  v247 = 0;
  v247 = (__n128 *)(*(void *)(*((void *)v239 + 81) + 400) + 64);
  xzm_metapool_init(v247, 1u, 0x40000u, 0x10000u, 0x10000u, (unint64_t)v251);
  v246 = 0;
  v246 = (__n128 *)(*(void *)(*((void *)v239 + 81) + 400) + 128);
  xzm_metapool_init(v246, 2u, 0x4000u, 0x10u, 0x10u, 0);
  BOOL v245 = 0;
  BOOL v245 = *(unsigned char *)(*((void *)v239 + 81) + 344) == 2;
  _xzm_initialize_xzone_data(*((void **)v239 + 81), v276, (unsigned char *)(*((void *)v239 + 81) + 452), v245);
  v180 = v238;
  v238[7] = v238[4];
  v180[6] = "MallocReportConfig";
  if (malloc_internal_security_policy) {
    uint64_t v201 = _simple_getenv();
  }
  else {
    uint64_t v201 = 0;
  }
  unint64_t v181 = v239;
  *((void *)v239 + 148) = v201;
  if (*((void *)v181 + 148))
  {
    uint64_t v244 = 0;
    v295 = v276;
    uint64_t v200 = v276;
    switch(v276)
    {
      case 0u:
        v238[60] = "SINGLE";
        break;
      case 1u:
        v238[60] = "CLUSTER";
        break;
      case 2u:
        v238[60] = "CPU";
        break;
      default:
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: unexpected slot config";
        __break(1u);
        JUMPOUT(0x5E1F4);
    }
    uint64_t v244 = v238[60];
    uint64_t v243 = 0;
    v294 = v282;
    uint64_t v199 = v282;
    switch(v282)
    {
      case 0u:
        v238[58] = "SINGLE";
        break;
      case 1u:
        v238[58] = "CLUSTER";
        break;
      case 2u:
        v238[58] = "CPU";
        break;
      default:
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: unexpected slot config";
        __break(1u);
        JUMPOUT(0x5E2C0);
    }
    uint64_t v243 = v238[58];
    uint64_t v242 = 0;
    size_t v241 = 8;
    int v240 = sysctlbyname("vm.reclaim_max_threshold", &v242, &v241, 0, 0);
    unsigned int v192 = v245;
    unsigned int v193 = v266;
    unsigned int v194 = (v286 >> 5) & 1;
    unsigned int v195 = v267;
    unsigned int v196 = v268;
    unsigned int v197 = v269;
    int v198 = v240;
    if (v240) {
      uint64_t v191 = v198;
    }
    else {
      uint64_t v191 = v242;
    }
    uint64_t v182 = " (ERROR)";
    if (!v240) {
      uint64_t v182 = (const char *)&unk_A19ED;
    }
    v183 = *(void **)(*((void *)v239 + 81) + 384);
    uint64_t v184 = v183[10];
    uint64_t v185 = v183[11];
    uint64_t v186 = v183[3];
    uint64_t v187 = v183[4];
    uint64_t v188 = *((void *)v239 + 142);
    v190[20] = v190;
    v190[18] = v188;
    v190[17] = v273;
    v190[16] = v274;
    v190[15] = v273;
    v190[14] = v275;
    v190[13] = v243;
    v190[12] = v244;
    v190[11] = v187;
    v190[10] = v186;
    v190[9] = v185;
    v190[8] = v184;
    v190[7] = v182;
    v190[6] = v191;
    v190[5] = v197;
    v190[4] = v196;
    v190[3] = v195;
    v190[2] = v194;
    v190[1] = v193;
    v190[0] = v192;
    malloc_report(6, (uint64_t)"XZM Config:\n\tData Only: %d\n\tGuards Enabled: %d\n\tScribble: %d\n\tDefer Large: %d\n\tDefer Xzones: %d\n\tHuge cache size: %d\n\tReclaim Max Threshold: %lli%s\n\tRanges (ptr addr/size/data addr/size): 0x%llx/%lu/0x%llx/%lu\n\tInitial Slot Config: %s\n\tMax Slot Config: %s\n\tSlot Upgrade Thresholds: %d/%d, %d/%d\n\tPointer Bucket Count: %lu\n");
  }
  return *((void *)v239 + 81);
}

void *_xzm_initialize_const_zone_data(void *a1, uint64_t a2, __int16 a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, char a9, int a10, int a11, int a12, uint64_t a13, uint64_t a14)
{
  unint64_t v91 = a1;
  uint64_t v90 = a2;
  __int16 v89 = a3;
  uint64_t v88 = a4;
  uint64_t v87 = a5;
  uint64_t v86 = a6;
  unint64_t v85 = a7;
  uint64_t v84 = a8;
  if ((unint64_t)a1 + a2 < a7 + 32 * a4 * a5)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)zone + size >= (uintptr_t)slots + sizeof(stru"
                           "ct xzm_xzone_allocation_slot_s) * xzone_count * slot_count\" failed (/Library/Caches/com.appl"
                           "e.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:4365)";
    __break(1u);
    JUMPOUT(0x5E56CLL);
  }
  if (v85 < v86 + 88 * v88)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slots >= (uintptr_t)xzones + sizeof(struct xz"
                           "m_xzone_s) * xzone_count\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/"
                           "src/xzone/xzone_malloc.c:4367)";
    __break(1u);
    JUMPOUT(0x5E5B8);
  }
  __dst = v91;
  __src[0] = 0;
  __src[1] = 0;
  unint64_t v81 = 0;
  if (xzm_malloc_zone_size) {
    unint64_t v81 = xzm_malloc_zone_size;
  }
  uint64_t v79 = 0;
  if (v81) {
    uint64_t v79 = v81;
  }
  __src[2] = v79;
  unint64_t v78 = 0;
  if (xzm_malloc_zone_malloc) {
    unint64_t v78 = xzm_malloc_zone_malloc;
  }
  unint64_t v77 = 0;
  if (v78) {
    unint64_t v77 = v78;
  }
  __src[3] = v77;
  unsigned int v76 = 0;
  if (xzm_malloc_zone_calloc) {
    unsigned int v76 = xzm_malloc_zone_calloc;
  }
  unint64_t v75 = 0;
  if (v76) {
    unint64_t v75 = v76;
  }
  __src[4] = v75;
  unint64_t v74 = 0;
  if (xzm_malloc_zone_valloc) {
    unint64_t v74 = xzm_malloc_zone_valloc;
  }
  uint64_t v73 = 0;
  if (v74) {
    uint64_t v73 = v74;
  }
  __src[5] = v73;
  uint64_t v72 = 0;
  if (xzm_malloc_zone_free) {
    uint64_t v72 = xzm_malloc_zone_free;
  }
  unint64_t v71 = 0;
  if (v72) {
    unint64_t v71 = v72;
  }
  __src[6] = v71;
  unint64_t v70 = 0;
  if (xzm_malloc_zone_realloc) {
    unint64_t v70 = xzm_malloc_zone_realloc;
  }
  uint64_t v69 = 0;
  if (v70) {
    uint64_t v69 = v70;
  }
  __src[7] = v69;
  uint64_t v68 = 0;
  if (xzm_malloc_zone_destroy) {
    uint64_t v68 = xzm_malloc_zone_destroy;
  }
  unint64_t v67 = 0;
  if (v68) {
    unint64_t v67 = v68;
  }
  __src[8] = v67;
  __src[9] = 0;
  __src[10] = malloc_zone_batch_malloc_fallback;
  __src[11] = malloc_zone_batch_free_fallback;
  __src[12] = xzm_malloc_zone_introspect;
  LODWORD(__src[13]) = 16;
  unint64_t v66 = 0;
  if (xzm_malloc_zone_memalign) {
    unint64_t v66 = xzm_malloc_zone_memalign;
  }
  unint64_t v65 = 0;
  if (v66) {
    unint64_t v65 = v66;
  }
  __src[14] = v65;
  int64_t v64 = 0;
  if (xzm_malloc_zone_free_definite_size) {
    int64_t v64 = xzm_malloc_zone_free_definite_size;
  }
  uint64_t v63 = 0;
  if (v64) {
    uint64_t v63 = v64;
  }
  __src[15] = v63;
  int v62 = 0;
  if (malloc_zone_pressure_relief_fallback) {
    int v62 = malloc_zone_pressure_relief_fallback;
  }
  unint64_t v61 = 0;
  if (v62) {
    unint64_t v61 = v62;
  }
  __src[16] = v61;
  unint64_t v60 = 0;
  if (xzm_malloc_zone_claimed_address) {
    unint64_t v60 = xzm_malloc_zone_claimed_address;
  }
  uint64_t v59 = 0;
  if (v60) {
    uint64_t v59 = v60;
  }
  __src[17] = v59;
  uint64_t v58 = 0;
  if (xzm_malloc_zone_try_free_default) {
    uint64_t v58 = xzm_malloc_zone_try_free_default;
  }
  unint64_t v57 = 0;
  if (v58) {
    unint64_t v57 = v58;
  }
  __src[18] = v57;
  uint64_t v56 = 0;
  if (xzm_malloc_zone_malloc_with_options) {
    uint64_t v56 = xzm_malloc_zone_malloc_with_options;
  }
  unint64_t v55 = 0;
  if (v56) {
    unint64_t v55 = v56;
  }
  __src[19] = v55;
  uint64_t v54 = 0;
  if (xzm_malloc_zone_malloc_type_malloc) {
    uint64_t v54 = xzm_malloc_zone_malloc_type_malloc;
  }
  uint64_t v53 = 0;
  if (v54) {
    uint64_t v53 = v54;
  }
  __src[20] = v53;
  uint64_t v52 = 0;
  if (xzm_malloc_zone_malloc_type_calloc) {
    uint64_t v52 = xzm_malloc_zone_malloc_type_calloc;
  }
  int64_t v51 = 0;
  if (v52) {
    int64_t v51 = v52;
  }
  __src[21] = v51;
  char v50 = 0;
  if (xzm_malloc_zone_malloc_type_realloc) {
    char v50 = xzm_malloc_zone_malloc_type_realloc;
  }
  int v49 = 0;
  if (v50) {
    int v49 = v50;
  }
  __src[22] = v49;
  uint64_t v48 = 0;
  if (xzm_malloc_zone_malloc_type_memalign) {
    uint64_t v48 = xzm_malloc_zone_malloc_type_memalign;
  }
  BOOL v47 = 0;
  if (v48) {
    BOOL v47 = v48;
  }
  __src[23] = v47;
  char v46 = 0;
  if (xzm_malloc_zone_malloc_type_malloc_with_options) {
    char v46 = xzm_malloc_zone_malloc_type_malloc_with_options;
  }
  uint64_t v45 = 0;
  if (v46) {
    uint64_t v45 = v46;
  }
  __src[24] = v45;
  __src[25] = v90;
  LOWORD(__src[26]) = v89;
  BYTE2(__src[26]) = v88;
  BYTE3(__src[26]) = v87;
  __src[27] = v86;
  __src[28] = v85;
  __src[29] = v84;
  LOBYTE(__src[30]) = __src[30] & 0xFC | a9 & 3;
  HIDWORD(__src[30]) = a10;
  LODWORD(__src[31]) = a11;
  unint64_t v44 = (_DWORD *)&__src[31] + 1;
  do
    *unint64_t v44 = 0;
  while ((char *)++v44 - (char *)&__src[32]);
  LODWORD(__src[32]) = a12;
  __src[33] = a13;
  memset(&__src[34], 0, 24);
  __src[37] = a14;
  uint64_t result = memcpy(__dst, __src, 0x130uLL);
  char v82 = 0;
  if ((a14 & 0x20) != 0 || (a14 & 0x80) != 0) {
    char v82 = 1;
  }
  if (v82)
  {
    uint64_t v43 = 0;
    if (xzm_malloc_zone_malloc_slow) {
      uint64_t v43 = xzm_malloc_zone_malloc_slow;
    }
    uint64_t v42 = 0;
    if (v43) {
      uint64_t v42 = v43;
    }
    v91[3] = v42;
    unint64_t v41 = 0;
    if (xzm_malloc_zone_calloc_slow) {
      unint64_t v41 = xzm_malloc_zone_calloc_slow;
    }
    uint64_t v40 = 0;
    if (v41) {
      uint64_t v40 = v41;
    }
    v91[4] = v40;
    unint64_t v39 = 0;
    if (xzm_malloc_zone_valloc_slow) {
      unint64_t v39 = xzm_malloc_zone_valloc_slow;
    }
    uint64_t v38 = 0;
    if (v39) {
      uint64_t v38 = v39;
    }
    v91[5] = v38;
    char v37 = 0;
    if (xzm_malloc_zone_free_slow) {
      char v37 = xzm_malloc_zone_free_slow;
    }
    BOOL v36 = 0;
    if (v37) {
      BOOL v36 = v37;
    }
    v91[6] = v36;
    uint64_t v35 = 0;
    if (xzm_malloc_zone_realloc_slow) {
      uint64_t v35 = xzm_malloc_zone_realloc_slow;
    }
    unint64_t v34 = 0;
    if (v35) {
      unint64_t v34 = v35;
    }
    v91[7] = v34;
    unint64_t v33 = 0;
    if (xzm_malloc_zone_memalign_slow) {
      unint64_t v33 = xzm_malloc_zone_memalign_slow;
    }
    uint64_t v32 = 0;
    if (v33) {
      uint64_t v32 = v33;
    }
    v91[14] = v32;
    unint64_t v31 = 0;
    if (xzm_malloc_zone_free_definite_size_slow) {
      unint64_t v31 = xzm_malloc_zone_free_definite_size_slow;
    }
    unint64_t v30 = 0;
    if (v31) {
      unint64_t v30 = v31;
    }
    v91[15] = v30;
    char v29 = 0;
    if (xzm_malloc_zone_try_free_default_slow) {
      char v29 = xzm_malloc_zone_try_free_default_slow;
    }
    uint64_t v28 = 0;
    if (v29) {
      uint64_t v28 = v29;
    }
    v91[18] = v28;
    uint64_t v27 = 0;
    if (xzm_malloc_zone_malloc_with_options_slow) {
      uint64_t v27 = xzm_malloc_zone_malloc_with_options_slow;
    }
    unint64_t v26 = 0;
    if (v27) {
      unint64_t v26 = v27;
    }
    v91[19] = v26;
    unint64_t v25 = 0;
    if (xzm_malloc_zone_malloc_type_malloc_slow) {
      unint64_t v25 = xzm_malloc_zone_malloc_type_malloc_slow;
    }
    uint64_t v24 = 0;
    if (v25) {
      uint64_t v24 = v25;
    }
    v91[20] = v24;
    uint64_t v23 = 0;
    if (xzm_malloc_zone_malloc_type_calloc_slow) {
      uint64_t v23 = xzm_malloc_zone_malloc_type_calloc_slow;
    }
    uint64_t v22 = 0;
    if (v23) {
      uint64_t v22 = v23;
    }
    v91[21] = v22;
    char v21 = 0;
    if (xzm_malloc_zone_malloc_type_realloc_slow) {
      char v21 = xzm_malloc_zone_malloc_type_realloc_slow;
    }
    uint64_t v20 = 0;
    if (v21) {
      uint64_t v20 = v21;
    }
    v91[22] = v20;
    uint64_t v19 = 0;
    if (xzm_malloc_zone_malloc_type_memalign_slow) {
      uint64_t v19 = xzm_malloc_zone_malloc_type_memalign_slow;
    }
    uint64_t v18 = 0;
    if (v19) {
      uint64_t v18 = v19;
    }
    v91[23] = v18;
    uint64_t result = xzm_malloc_zone_malloc_type_malloc_with_options_slow;
    uint64_t v17 = 0;
    if (xzm_malloc_zone_malloc_type_malloc_with_options_slow) {
      uint64_t v17 = xzm_malloc_zone_malloc_type_malloc_with_options_slow;
    }
    char v16 = 0;
    if (v17) {
      char v16 = v17;
    }
    v91[24] = v16;
  }
  return result;
}

void _xzm_initialize_xzone_data(void *a1, char a2, unsigned char *a3, char a4)
{
  uint64_t v27 = a1;
  char v26 = a2;
  unint64_t v25 = a3;
  char v24 = a4 & 1;
  uint64_t v23 = 0;
  uint64_t v28 = a1;
  if (a1[29]) {
    unsigned __int8 v5 = (void *)a1[29];
  }
  else {
    unsigned __int8 v5 = v28;
  }
  uint64_t v23 = v5;
  BOOL v22 = 0;
  char v29 = v27;
  BOOL v22 = *((void *)v27 + 29) == 0;
  unint64_t __buf = 0;
  arc4random_buf(&__buf, 8uLL);
  if (!__buf) {
    unint64_t __buf = 0xDEADDEADDEADDEADLL;
  }
  *((void *)v27 + 34) = __buf;
  uint64_t v20 = 1;
  for (unint64_t i = 0; ; ++i)
  {
    uint64_t v18 = 40;
    if (i >= 0x28) {
      break;
    }
    if (v22) {
      *(unsigned char *)(v23[46] + i) = v20;
    }
    unint64_t v17 = 0;
    unint64_t v17 = *(unsigned __int8 *)(v23[45] + i);
    for (int j = 0; j < v17; ++j)
    {
      uint64_t v15 = 0;
      uint64_t v15 = (void *)(*((void *)v27 + 27) + 88 * v20);
      unint64_t v14 = 0;
      unint64_t v14 = *(void *)(v23[44] + 8 * i);
      unint64_t v13 = 0;
      unint64_t v4 = 0x4000;
      if (v14 > 0x1000) {
        unint64_t v4 = 0x10000;
      }
      unint64_t v13 = v4;
      unint64_t v12 = v4 / v14;
      __int16 v11 = 0;
      if (v22)
      {
        if (v14 > 0x100)
        {
          if (v14 > 0x200)
          {
            if (v14 > 0x800) {
              __int16 v11 = v14 <= 0x2000;
            }
            else {
              __int16 v11 = 0x2000 / v14;
            }
          }
          else
          {
            __int16 v11 = 0x1000 / v14;
          }
        }
        else
        {
          __int16 v11 = 0x800 / v14;
        }
      }
      uint64_t v10 = 0;
      char v9 = 0;
      if (j && (v24 & 1) == 0)
      {
        uint64_t v10 = v23[49] + 1056;
        char v9 = 1;
      }
      else
      {
        uint64_t v10 = v23[49];
        char v9 = 0;
      }
      char v8 = 0;
      char v7 = 0;
      if (*v25)
      {
        if (v25[1]) {
          char v9 = 1;
        }
        if (v9)
        {
          if (v14 > 0x1000)
          {
            char v8 = v25[4];
            char v7 = v25[5];
          }
          else
          {
            char v8 = v25[2];
            char v7 = v25[3];
          }
        }
      }
      memset(__src, 0, 32);
      *(_WORD *)&__src[32] = v11;
      *(void *)&__src[40] = v10;
      *(void *)&__src[48] = v14;
      *(void *)&__src[56] = 0xFFFFFFFF / v14 + 1;
      *(_DWORD *)&__src[64] = 0xFFFFFFFF / v14 + 1;
      *(_DWORD *)&__src[68] = v12;
      __src[72] = v20;
      *(_WORD *)&__src[74] = v27[104];
      __src[76] = j;
      __src[77] = v26;
      __src[78] = __src[78] & 0xFE | v9 & 1;
      __src[79] = v8;
      __src[80] = v7;
      memcpy(v15, __src, 0x58uLL);
      ++v20;
    }
  }
}

void *xzm_malloc_zone_create(unsigned int a1, uint64_t a2)
{
  unsigned __int8 v10 = *(unsigned char *)(a2 + 210);
  unsigned __int8 v9 = *(unsigned char *)(a2 + 211);
  uint64_t v11 = 88 * v10 + 304 + 32 * v10 * v9;
  int v2 = 0;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a2 + 448), (unsigned int *)&v2, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
  if (v2) {
    os_unfair_lock_lock_with_options();
  }
  char v7 = *(__int16 **)(a2 + 440);
  if (v7)
  {
    *(void *)(a2 + 440) = *(void *)(*(void *)(a2 + 440) + 8);
    __int16 v8 = *v7;
    xzm_metapool_free(*(void *)(a2 + 400) + 128, v7);
  }
  else if (*(__int16 *)(a2 + 436) == -1)
  {
    __int16 v8 = 0;
  }
  else
  {
    __int16 v8 = ++*(_WORD *)(a2 + 436);
  }
  int v3 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  int v4 = v3;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a2 + 448), (unsigned int *)&v4, 0, memory_order_release, memory_order_relaxed);
  if (v4 != v3) {
    os_unfair_lock_unlock((os_unfair_lock_t)(a2 + 448));
  }
  if (!v8) {
    return 0;
  }
  mach_vm_address_t plat = (void *)mvm_allocate_plat(0, v11, 0, 1, 0, 1, 0);
  if (!plat) {
    return 0;
  }
  _xzm_initialize_const_zone_data(plat, v11, v8, v10, v9, (uint64_t)(plat + 38), (unint64_t)&plat[11 * v10 + 38], a2, *(unsigned char *)(a2 + 240) & 3, *(_DWORD *)(a2 + 244), *(_DWORD *)(a2 + 248), *(_DWORD *)(a2 + 256), *(void *)(a2 + 264), a1);
  _xzm_initialize_xzone_data(plat, 0, (unsigned char *)(a2 + 452), *(unsigned char *)(a2 + 344) == 2);
  plat[36] = 0;
  return plat;
}

_OWORD *_xzm_xzone_malloc_tiny(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v35 = a1;
  unint64_t v34 = (atomic_ullong *)a2;
  int v33 = a3;
  char v32 = a3 & 1;
  char v31 = 0;
  unsigned __int8 v30 = 0;
  uint64_t v42 = a2;
  unint64_t v41 = &v31;
  unsigned __int8 v40 = 0;
  unsigned __int8 v39 = 0;
  unsigned __int8 v38 = *(unsigned char *)(a2 + 77);
  unsigned __int8 v39 = v38;
  unsigned __int8 v37 = v38;
  unsigned __int8 v40 = v38;
  if (v38 >= 3u)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slot_config < XZM_SLOT_LAST\" failed (/Library/Caches/co"
                           "m.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:191)";
    __break(1u);
    JUMPOUT(0x60C3CLL);
  }
  if (v41) {
    *unint64_t v41 = v40;
  }
  if (!v40) {
    goto LABEL_10;
  }
  if (v40 == 1)
  {
    unsigned __int8 v43 = _malloc_cpu_cluster_number();
    goto LABEL_11;
  }
  if (v40 != 2)
  {
LABEL_10:
    unsigned __int8 v43 = 0;
    goto LABEL_11;
  }
  unsigned __int8 v43 = _malloc_cpu_number();
LABEL_11:
  unsigned __int8 v30 = v43;
  char v29 = 0;
  uint64_t v48 = v35;
  BOOL v47 = v34;
  unsigned __int8 v46 = v43;
  unsigned __int8 v45 = 0;
  unsigned __int8 v45 = *((unsigned char *)v34 + 72);
  uint64_t v44 = 0;
  uint64_t v44 = v43 * *(unsigned __int8 *)(v35 + 210);
  char v29 = (atomic_ullong *)(*(void *)(v35 + 224) + 32 * (v44 + v45));
  char v28 = 0;
  uint64_t v27 = v29;
  unint64_t v26 = 0;
  unint64_t v25 = 0;
  unint64_t v24 = *(void *)v29;
  unint64_t v25 = v24;
  unint64_t v23 = v24;
  unint64_t v26 = v24;
  BOOL v22 = 0;
  BOOL v21 = 0;
  BOOL v18 = 0;
  if ((v24 & 1) == 0) {
    BOOL v18 = ((v26 >> 2) & 0x7FFFFFFFFFFFLL) != 0;
  }
  BOOL v21 = v18;
  if (!v18) {
    return _xzm_xzone_malloc_tiny_outlined(v35, v34, v30, v29, (uint64_t)v22, v33);
  }
  uint64_t v20 = (atomic_ullong *)((v26 >> 2) & 0x7FFFFFFFFFFFLL);
  v19[1] = 0;
  v19[0] = 0;
  uint64_t v57 = v35;
  uint64_t v56 = v34;
  unsigned __int8 v55 = v30;
  uint64_t v54 = v20;
  char v53 = 0;
  uint64_t v52 = v19;
  int64_t v51 = &v28;
  uint64_t v50 = 0;
  int v49 = 0;
  uint64_t v156 = v35;
  int v155 = v34;
  unsigned __int8 v154 = v30;
  unsigned __int8 v153 = v20;
  char v152 = 0;
  unint64_t v151 = v19;
  uint64_t v150 = &v28;
  unint64_t v149 = 0;
  char v148 = 0;
  unint64_t v147 = 0;
  uint64_t v160 = v35;
  unint64_t v159 = v20;
  uint64_t v158 = 0;
  uint64_t v162 = v35;
  unint64_t v161 = (unint64_t)v20;
  uint64_t v165 = v35;
  unint64_t v164 = (unint64_t)v20;
  uint64_t v163 = (v26 >> 2) & 0x7FFFFFFFC000;
  char v17 = 1;
  if (v163)
  {
    BOOL v16 = 0;
    if (v164 >= v163 + 2136) {
      BOOL v16 = v164 < v163 + 48 * (unint64_t)*(unsigned int *)(v163 + 16) + 2136;
    }
    char v17 = v16;
  }
  if ((v17 & 1) == 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0x61034);
  }
  uint64_t v167 = v163;
  unint64_t v166 = v161;
  uint64_t v172 = v163;
  unint64_t v171 = v161;
  if (v161 < v163 + 2136)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" fai"
                           "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                           "e_internal.h:278)";
    __break(1u);
    JUMPOUT(0x61098);
  }
  int64_t v170 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v171 - v172 - 2136) >> 4);
  if (v170 >= *(unsigned int *)(v172 + 16))
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fail"
                           "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline"
                           "_internal.h:280)";
    __break(1u);
    JUMPOUT(0x61100);
  }
  uint64_t v169 = v163;
  int v168 = v170;
  unint64_t v147 = *(void *)(v163 + 80) + ((unint64_t)v170 << 14);
  if ((*((unsigned char *)v153 + 32) & 0xF) != 2)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == XZM_SLICE_KIND_TINY_CHUNK\""
                           " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:484)";
    __break(1u);
    JUMPOUT(0x61160);
  }
  unint64_t v146 = 0;
  char v145 = 0;
  long long v144 = 0uLL;
  int v143 = 0;
  unint64_t v142 = 0;
  unint64_t v141 = 0;
  unint64_t v140 = *(void *)v153;
  unint64_t v141 = v140;
  unint64_t v139 = v140;
  unint64_t v142 = v140;
  do
  {
    while (1)
    {
      while (1)
      {
        while ((v142 & 0x40000000) != 0)
        {
          if ((v152 & 1) == 0)
          {
            int v157 = 0;
            goto LABEL_84;
          }
          _xzm_walk_lock_wait(v156);
          unint64_t v138 = 0;
          unint64_t v137 = *(void *)v153;
          unint64_t v138 = v137;
          unint64_t v136 = v137;
          unint64_t v142 = v137;
        }
        unint64_t v135 = v142;
        if ((v148 & 1) == 0) {
          break;
        }
        if (((v142 >> 22) & 0x3F) != 0)
        {
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"old_meta.xca_alloc_idx == XZM_SLOT_INDEX_EMPTY\" f"
                                 "ailed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:517)";
          __break(1u);
          JUMPOUT(0x61264);
        }
        if ((v142 & 0x10000000) == 0)
        {
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"old_meta.xca_on_partial_list\" failed (/Library/Ca"
                                 "ches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:518)";
          __break(1u);
          JUMPOUT(0x61294);
        }
        if ((v142 & 0x20000000) != 0)
        {
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!old_meta.xca_on_empty_list\" failed (/Library/Cac"
                                 "hes/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:519)";
          __break(1u);
          JUMPOUT(0x612C4);
        }
        v135 &= ~0x10000000uLL;
        if (((v142 >> 11) & 0x7FF) != 0)
        {
          unint64_t v135 = v135 & 0xFFFFFFFFF03FFFFFLL | (((v154 + 1) & 0x3FLL) << 22);
          goto LABEL_65;
        }
        if ((v142 & 0x7FF) == 0x7FE)
        {
          v135 |= 0x20000000uLL;
          *unint64_t v149 = 1;
        }
        else if ((~v142 & 0x7FF) != 0)
        {
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"old_meta.xca_alloc_head == XZM_FREE_MADVISING\" fa"
                                 "iled (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:538)";
          __break(1u);
          JUMPOUT(0x61348);
        }
        BOOL v134 = 0;
        unint64_t v133 = v142;
        BOOL v132 = 0;
        unint64_t v130 = v135;
        unint64_t v129 = v135;
        unint64_t v131 = v135;
        unint64_t v3 = v142;
        unint64_t v4 = v142;
        atomic_compare_exchange_strong_explicit(v153, &v4, v135, memory_order_relaxed, memory_order_relaxed);
        if (v4 != v3) {
          unint64_t v133 = v4;
        }
        BOOL v128 = v4 == v3;
        BOOL v132 = v4 == v3;
        unint64_t v142 = v133;
        BOOL v127 = v132;
        BOOL v134 = v4 == v3;
        if (v4 == v3)
        {
          if (malloc_tracing_enabled) {
            kdebug_trace();
          }
          int v157 = 0;
          goto LABEL_84;
        }
      }
      if (((v142 >> 22) & 0x3F) != v154 + 1)
      {
        int v157 = 0;
        goto LABEL_84;
      }
      if (((v142 >> 11) & 0x7FF) == 0) {
        break;
      }
LABEL_65:
      char v145 = 0;
      unint64_t v135 = v135 & 0xFFFFFFFFFFC007FFLL | ((((v135 >> 11) - 1) & 0x7FFLL) << 11);
      if ((v142 & 0x7FF) > 0x3FF)
      {
        if ((v142 & 0x7FF) != 0x7FC)
        {
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"old_meta.xca_alloc_head == XZM_FREE_BUMP\" failed "
                                 "(/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:628)";
          __break(1u);
          JUMPOUT(0x61700);
        }
        if (((v135 >> 11) & 0x7FF) == 0) {
          unint64_t v135 = v135 & 0xFFFFFFFFFFFFF800 | 0x7FD;
        }
        uint64_t v118 = 0;
        uint64_t v118 = *((unsigned int *)v155 + 17);
        unint64_t v146 = v147 + (v118 - ((v142 >> 11) & 0x7FF)) * *((void *)v155 + 6);
      }
      else
      {
        unint64_t v146 = v147 + 16 * (v142 & 0x7FF);
        long long v144 = *(_OWORD *)v146;
        unint64_t v135 = v135 & 0xFFFFFFFFFFFFF800 | WORD4(v144) & 0x7FF;
        unint64_t v135 = v135 & 0xFFF8003FFFFFFFFFLL | (((DWORD2(v144) >> 11) & 0x1FFFLL) << 38);
        char v145 = 1;
      }
      BOOL v117 = 0;
      unint64_t v116 = v142;
      BOOL v115 = 0;
      unint64_t v113 = v135;
      unint64_t v112 = v135;
      unint64_t v114 = v135;
      unint64_t v7 = v142;
      unint64_t v8 = v142;
      atomic_compare_exchange_strong_explicit(v153, &v8, v135, memory_order_relaxed, memory_order_relaxed);
      if (v8 != v7) {
        unint64_t v116 = v8;
      }
      BOOL v111 = v8 == v7;
      BOOL v115 = v8 == v7;
      unint64_t v142 = v116;
      BOOL v110 = v115;
      BOOL v117 = v8 == v7;
      if (v8 == v7)
      {
        if (malloc_tracing_enabled) {
          kdebug_trace();
        }
        if (v145)
        {
          unint64_t v109 = 0;
          unint64_t v109 = v146 ^ *(void *)(v156 + 272);
          if (v109 == (void)v144)
          {
            uint64_t v108 = WORD4(v144) & 0x7FF | (((*((void *)&v144 + 1) >> 11) & 0x1FFFLL) << 11) & 0xFFFFFF;
            if (*((void *)&v144 + 1) != v108) {
              *unint64_t v151 = 1;
            }
          }
          else
          {
            *unint64_t v151 = 1;
          }
        }
        int v157 = (_OWORD *)v146;
        goto LABEL_84;
      }
      *uint64_t v150 = 1;
      ++v143;
    }
    v135 &= 0xFFFFFFFFF03FFFFFLL;
    if ((v142 & 0x7FF) != 0x7FD)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"old_meta.xca_alloc_head == XZM_FREE_NULL\" failed (/Li"
                             "brary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:593)";
      __break(1u);
      JUMPOUT(0x614DCLL);
    }
    if ((v142 & 0x10000000) != 0)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!old_meta.xca_on_partial_list\" failed (/Library/Cache"
                             "s/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:599)";
      __break(1u);
      JUMPOUT(0x6150CLL);
    }
    if ((v142 & 0x20000000) != 0)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!old_meta.xca_on_empty_list\" failed (/Library/Caches/"
                             "com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:600)";
      __break(1u);
      JUMPOUT(0x6153CLL);
    }
    BOOL v126 = 0;
    unint64_t v125 = v142;
    BOOL v124 = 0;
    unint64_t v122 = v135;
    unint64_t v121 = v135;
    unint64_t v123 = v135;
    unint64_t v5 = v142;
    unint64_t v6 = v142;
    atomic_compare_exchange_strong_explicit(v153, &v6, v135, memory_order_relaxed, memory_order_relaxed);
    if (v6 != v5) {
      unint64_t v125 = v6;
    }
    BOOL v120 = v6 == v5;
    BOOL v124 = v6 == v5;
    unint64_t v142 = v125;
    BOOL v119 = v124;
    BOOL v126 = v6 == v5;
  }
  while (v6 != v5);
  if (malloc_tracing_enabled) {
    kdebug_trace();
  }
  int v157 = 0;
LABEL_84:
  int v49 = v157;
  BOOL v22 = v157;
  if (!v157 || (v19[0] & 1) != 0) {
    return _xzm_xzone_malloc_tiny_outlined(v35, v34, v30, v29, (uint64_t)v22, v33);
  }
  uint64_t v102 = v35;
  unint64_t v101 = v34;
  int v100 = v29;
  char v99 = v31;
  char v98 = v28 & 1;
  if (v31 != (*(unsigned char *)(v35 + 240) & 3))
  {
    unint64_t v97 = 0;
    unint64_t v96 = 0;
    unint64_t v95 = *((void *)v100 + 2);
    unint64_t v96 = v95;
    unint64_t v94 = v95;
    unint64_t v97 = v95;
    if ((v98 & 1) != 0 || (v97 & 0xFFFFFF00000000) != 0)
    {
      unint64_t v93 = 1;
      if (v98) {
        v93 |= 0x100000000uLL;
      }
      unint64_t v92 = 0;
      unint64_t v90 = v93;
      unint64_t v89 = v93;
      unint64_t v91 = v93;
      unint64_t v87 = 0;
      unint64_t v85 = v93;
      unint64_t v84 = v93;
      unint64_t v86 = v93;
      add_unint64_t explicit = atomic_fetch_add_explicit((atomic_ullong *)((char *)v100 + 16), v93, memory_order_relaxed);
      unint64_t v87 = add_explicit;
      unint64_t v82 = add_explicit;
      unint64_t v88 = add_explicit + v91;
      unint64_t v92 = add_explicit + v91;
      unsigned __int8 v81 = (add_explicit + v91) >> 56;
      if (v81 != (*(unsigned char *)(v102 + 240) & 3))
      {
        if ((HIDWORD(v92) & 0xFFFFFFu) <= *(_DWORD *)(v102 + 4 * v81 + 244))
        {
          if (v92 > *(_DWORD *)(v102 + 256))
          {
            unint64_t v64 = v92;
            LODWORD(v63) = 0;
            HIDWORD(v63) = HIBYTE(v63) << 24;
            HIBYTE(v63) = v81;
            unint64_t v92 = v63;
            BOOL v62 = 0;
            unint64_t v61 = (atomic_ullong *)((char *)v100 + 16);
            unint64_t v97 = *((void *)v100 + 2);
            do
            {
              if (v97 < v64 || HIBYTE(v97) > (int)HIBYTE(v64)) {
                break;
              }
              unint64_t v60 = v92;
              unint64_t v13 = v97;
              unint64_t v14 = v97;
              atomic_compare_exchange_strong_explicit(v61, &v14, v92, memory_order_relaxed, memory_order_relaxed);
              if (v14 != v13) {
                unint64_t v97 = v14;
              }
              BOOL v59 = v14 == v13;
              BOOL v62 = v14 == v13;
            }
            while (v14 != v13);
            BOOL v58 = v62;
          }
        }
        else
        {
          unsigned __int8 v80 = 0;
          unsigned __int8 v173 = v81;
          if (v81)
          {
            if (v81 != 1)
            {
              if (v81 != 2)
              {
                qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: Invalid xzone slot config";
                __break(1u);
                JUMPOUT(0x61BF4);
              }
              qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: Can't upgrade from XZM_SLOT_CPU";
              __break(1u);
              JUMPOUT(0x61BC8);
            }
            unsigned __int8 v174 = 2;
          }
          else if (ncpuclusters < 2)
          {
            unsigned __int8 v174 = 2;
          }
          else
          {
            unsigned __int8 v174 = 1;
          }
          unsigned __int8 v80 = v174;
          if (v81 >= (int)v174)
          {
            qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"current_slot_config < next_slot_config\" failed "
                                   "(/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:955)";
            __break(1u);
            JUMPOUT(0x61C3CLL);
          }
          if (malloc_tracing_enabled) {
            kdebug_trace();
          }
          unsigned __int8 v79 = 0;
          BOOL v78 = 0;
          unint64_t v77 = (atomic_ullong *)((char *)v101 + 77);
          unsigned __int8 v79 = *((unsigned char *)v101 + 77);
          do
          {
            if (v79 >= (int)v80) {
              break;
            }
            unsigned __int8 v76 = v80;
            int v9 = v79;
            int v10 = v79;
            atomic_compare_exchange_strong_explicit(v77, (unsigned __int8 *)&v10, v80, memory_order_relaxed, memory_order_relaxed);
            if (v10 != v9) {
              unsigned __int8 v79 = v10;
            }
            BOOL v75 = v10 == v9;
            BOOL v78 = v10 == v9;
          }
          while (v10 != v9);
          BOOL v74 = v78;
          LODWORD(v73) = 0;
          HIDWORD(v73) = HIBYTE(v73) << 24;
          HIBYTE(v73) = v80;
          unint64_t v92 = v73;
          unsigned __int8 v72 = 0;
          unsigned __int8 v175 = v80;
          if (!v80) {
            goto LABEL_116;
          }
          if (v80 == 1)
          {
            char v176 = ncpuclusters;
            goto LABEL_117;
          }
          if (v80 != 2)
          {
LABEL_116:
            char v176 = 1;
            goto LABEL_117;
          }
          char v176 = logical_ncpus;
LABEL_117:
          unsigned __int8 v72 = v176;
          for (unsigned __int8 i = 0; i < (int)v72; ++i)
          {
            uint64_t v70 = 0;
            uint64_t v107 = v102;
            unint64_t v106 = v101;
            unsigned __int8 v105 = i;
            unsigned __int8 v104 = 0;
            unsigned __int8 v104 = *((unsigned char *)v101 + 72);
            uint64_t v103 = 0;
            uint64_t v103 = i * *(unsigned __int8 *)(v102 + 210);
            uint64_t v70 = *(void *)(v102 + 224) + 32 * (v103 + v104);
            BOOL v69 = 0;
            uint64_t v68 = (atomic_ullong *)(v70 + 16);
            unint64_t v97 = *(void *)(v70 + 16);
            do
            {
              if (HIBYTE(v97) >= (int)v80) {
                break;
              }
              unint64_t v67 = v92;
              unint64_t v11 = v97;
              unint64_t v12 = v97;
              atomic_compare_exchange_strong_explicit(v68, &v12, v92, memory_order_relaxed, memory_order_relaxed);
              if (v12 != v11) {
                unint64_t v97 = v12;
              }
              BOOL v66 = v12 == v11;
              BOOL v69 = v12 == v11;
            }
            while (v12 != v11);
            BOOL v65 = v69;
          }
        }
      }
    }
  }
  *BOOL v22 = 0uLL;
  if ((v32 & 1) != 0 && *((void *)v34 + 6) >= 0x401uLL) {
    return (_OWORD *)_platform_memset();
  }
  else {
    return v22;
  }
}

unint64_t _xzm_xzone_malloc_small(uint64_t a1, uint64_t a2, int a3, double a4, float a5)
{
  uint64_t v38 = a1;
  uint64_t v37 = a2;
  int v36 = a3;
  char v35 = a3 & 1;
  unint64_t v34 = 0;
  char v33 = 0;
  unsigned __int8 v32 = 0;
  uint64_t v53 = a2;
  uint64_t v52 = &v32;
  unsigned __int8 v51 = 0;
  unsigned __int8 v50 = 0;
  unsigned __int8 v49 = *(unsigned char *)(a2 + 77);
  unsigned __int8 v50 = v49;
  unsigned __int8 v48 = v49;
  unsigned __int8 v51 = v49;
  if (v49 >= 3u)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slot_config < XZM_SLOT_LAST\" failed (/Library/Caches/co"
                           "m.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:191)";
    __break(1u);
    JUMPOUT(0x621B0);
  }
  if (v52) {
    *uint64_t v52 = v51;
  }
  if (!v51) {
    goto LABEL_10;
  }
  if (v51 == 1)
  {
    unsigned __int8 v54 = _malloc_cpu_cluster_number();
    goto LABEL_11;
  }
  if (v51 != 2)
  {
LABEL_10:
    unsigned __int8 v54 = 0;
    goto LABEL_11;
  }
  unsigned __int8 v54 = _malloc_cpu_number();
LABEL_11:
  unsigned __int8 v31 = v54;
  uint64_t v59 = v38;
  uint64_t v58 = v37;
  unsigned __int8 v57 = v54;
  unsigned __int8 v56 = 0;
  unsigned __int8 v56 = *(unsigned char *)(v37 + 72);
  uint64_t v55 = 0;
  uint64_t v55 = v54 * *(unsigned __int8 *)(v38 + 210);
  uint64_t v30 = *(void *)(v38 + 224) + 32 * (v55 + v56);
  if (v32 >= (*(unsigned char *)(v38 + 240) & 3))
  {
    uint64_t v42 = v30 + 8;
    uint64_t v107 = v30 + 8;
    int v106 = 327680;
    unsigned int v105 = 0;
    uint64_t v108 = 3;
    uint64_t v109 = 3;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    unsigned int v105 = *(void *)(StatusReg + 24);
    int v104 = 0;
    unsigned int v103 = v105;
    unsigned int v102 = v105;
    int v7 = 0;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v30 + 8), (unsigned int *)&v7, v105, memory_order_acquire, memory_order_acquire);
    if (v7) {
      int v104 = v7;
    }
    BOOL v101 = v7 == 0;
    if (v7) {
      os_unfair_lock_lock_with_options();
    }
    ++*(_DWORD *)(v30 + 16);
  }
  else
  {
    uint64_t v60 = v30 + 8;
    os_unfair_lock_t lock = (os_unfair_lock_t)(v30 + 8);
    unsigned int v85 = 0;
    uint64_t v88 = 3;
    uint64_t v89 = 3;
    unint64_t v90 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    unsigned int v85 = *(void *)(v90 + 24);
    int v84 = 0;
    unsigned int v83 = v85;
    unsigned int v82 = v85;
    int v5 = 0;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v30 + 8), (unsigned int *)&v5, v85, memory_order_acquire, memory_order_acquire);
    if (v5) {
      int v84 = v5;
    }
    BOOL v81 = v5 == 0;
    BOOL v87 = v5 == 0;
    if (v5)
    {
      uint64_t v43 = v30 + 8;
      uint64_t v97 = v30 + 8;
      int v96 = 327680;
      unsigned int v95 = 0;
      uint64_t v98 = 3;
      uint64_t v99 = 3;
      unint64_t v100 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      unsigned int v95 = *(void *)(v100 + 24);
      int v94 = 0;
      unsigned int v93 = v95;
      unsigned int v92 = v95;
      int v6 = 0;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v30 + 8), (unsigned int *)&v6, v95, memory_order_acquire, memory_order_acquire);
      if (v6) {
        int v94 = v6;
      }
      BOOL v91 = v6 == 0;
      if (v6) {
        os_unfair_lock_lock_with_options();
      }
      if (++*(_DWORD *)(v30 + 20) > *(_DWORD *)(v38 + 4 * v32 + 244)) {
        _xzm_xzone_upgrade_small_slot_config(v38, v37, v30, v32);
      }
    }
    if (!(++*(_DWORD *)(v30 + 16) % *(_DWORD *)(v38 + 256))) {
      *(_DWORD *)(v30 + 20) = 0;
    }
  }
  chunk_from_isolatiounsigned int n = *(void *)v30;
  if (!*(void *)v30) {
    goto LABEL_88;
  }
  uint64_t v79 = v38;
  uint64_t v78 = v37;
  unint64_t v77 = chunk_from_isolation;
  int v28 = *(unsigned char *)(chunk_from_isolation + 32) & 0xF;
  if (v28 == 2)
  {
    BOOL v27 = 0;
    if (((*(_DWORD *)v77 >> 11) & 0x7FF) == 0)
    {
      BOOL v27 = 0;
      if ((~*(_DWORD *)v77 & 0x7FF) != 0) {
        BOOL v27 = (*(_DWORD *)v77 & 0x7FF) != 2046;
      }
    }
    BOOL v80 = v27;
  }
  else
  {
    if (v28 != 5)
    {
      uint64_t v76 = 0;
      uint64_t v76 = *(unsigned char *)(v77 + 32) & 0xF;
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
      qword_C0148 = v76;
      __break(1u);
      JUMPOUT(0x6271CLL);
    }
    BOOL v80 = *(_DWORD *)(v77 + 4) == *(_DWORD *)(v78 + 68);
  }
  if (v80)
  {
LABEL_88:
    uint64_t v41 = v37 + 24;
    uint64_t v117 = v37 + 24;
    int v116 = 327680;
    unsigned int v115 = 0;
    uint64_t v118 = 3;
    uint64_t v119 = 3;
    unint64_t v120 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    unsigned int v115 = *(void *)(v120 + 24);
    int v114 = 0;
    unsigned int v113 = v115;
    unsigned int v112 = v115;
    int v8 = 0;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v37 + 24), (unsigned int *)&v8, v115, memory_order_acquire, memory_order_acquire);
    if (v8) {
      int v114 = v8;
    }
    BOOL v111 = v8 == 0;
    if (v8) {
      os_unfair_lock_lock_with_options();
    }
    if (chunk_from_isolation)
    {
      uint64_t v9 = *(void *)(v37 + 8);
      *(void *)(chunk_from_isolation + 16) = v9;
      if (v9) {
        *(void *)(*(void *)(v37 + 8) + 24) = chunk_from_isolation + 16;
      }
      *(void *)(v37 + 8) = chunk_from_isolation;
      *(void *)(chunk_from_isolation + 24) = v37 + 8;
      atomic_store(0, (unsigned __int8 *)(chunk_from_isolation + 12));
    }
    while (1)
    {
      chunk_from_isolatiounsigned int n = *(void *)v37;
      if (!*(void *)v37) {
        break;
      }
      unint64_t v40 = chunk_from_isolation + 8;
      unint64_t v127 = chunk_from_isolation + 8;
      int v126 = 327680;
      unsigned int v125 = 0;
      uint64_t v128 = 3;
      uint64_t v129 = 3;
      unint64_t v130 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      unsigned int v125 = *(void *)(v130 + 24);
      int v124 = 0;
      unsigned int v123 = v125;
      unsigned int v122 = v125;
      int v10 = 0;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(chunk_from_isolation + 8), (unsigned int *)&v10, v125, memory_order_acquire, memory_order_acquire);
      if (v10) {
        int v124 = v10;
      }
      BOOL v121 = v10 == 0;
      if (v10) {
        os_unfair_lock_lock_with_options();
      }
      if ((*(unsigned char *)(chunk_from_isolation + 32) & 0x20) == 0)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_enqueued\" failed (/Library/Cac"
                               "hes/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2099)";
        __break(1u);
        JUMPOUT(0x629A8);
      }
      if (*(void *)(chunk_from_isolation + 16)) {
        *(void *)(*(void *)(chunk_from_isolation + 16) + 24) = *(void *)(chunk_from_isolation + 24);
      }
      **(void **)(chunk_from_isolation + 24) = *(void *)(chunk_from_isolation + 16);
      *(void *)(chunk_from_isolation + 16) = -1;
      *(void *)(chunk_from_isolation + 24) = -1;
      *(unsigned char *)(chunk_from_isolation + 32) &= ~0x20u;
      if (*(_DWORD *)(chunk_from_isolation + 4))
      {
        uint64_t v74 = v38;
        uint64_t v73 = v37;
        unint64_t v72 = chunk_from_isolation;
        int v26 = *(unsigned char *)(chunk_from_isolation + 32) & 0xF;
        if (v26 == 2)
        {
          BOOL v25 = 0;
          if (((*(_DWORD *)v72 >> 11) & 0x7FF) == 0)
          {
            BOOL v25 = 0;
            if ((~*(_DWORD *)v72 & 0x7FF) != 0) {
              BOOL v25 = (*(_DWORD *)v72 & 0x7FF) != 2046;
            }
          }
          BOOL v75 = v25;
        }
        else
        {
          if (v26 != 5)
          {
            uint64_t v71 = 0;
            uint64_t v71 = *(unsigned char *)(v72 + 32) & 0xF;
            qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
            qword_C0148 = v71;
            __break(1u);
            JUMPOUT(0x62B40);
          }
          BOOL v75 = *(_DWORD *)(v72 + 4) == *(_DWORD *)(v73 + 68);
        }
        if (v75)
        {
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!_xzm_chunk_is_full(zone, xz, chunk)\" failed (/Li"
                                 "brary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2103)";
          __break(1u);
          JUMPOUT(0x62B70);
        }
        *(void *)uint64_t v30 = chunk_from_isolation;
        *(unsigned char *)(chunk_from_isolation + 12) = v31 + 1;
        unint64_t v47 = chunk_from_isolation + 8;
        os_unfair_lock_t v136 = (os_unfair_lock_t)(chunk_from_isolation + 8);
        int v135 = 0;
        uint64_t v137 = 3;
        uint64_t v138 = 3;
        unint64_t v139 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
        int v135 = *(void *)(v139 + 24);
        int v134 = 0;
        int v133 = v135;
        int v132 = 0;
        int v11 = v135;
        int v12 = v135;
        atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(chunk_from_isolation + 8), (unsigned int *)&v12, 0, memory_order_release, memory_order_relaxed);
        if (v12 != v11) {
          int v133 = v12;
        }
        BOOL v131 = v12 == v11;
        if (v12 != v11) {
          os_unfair_lock_unlock(v136);
        }
        break;
      }
      unint64_t v46 = chunk_from_isolation + 8;
      os_unfair_lock_t v145 = (os_unfair_lock_t)(chunk_from_isolation + 8);
      int v144 = 0;
      uint64_t v146 = 3;
      uint64_t v147 = 3;
      unint64_t v148 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      int v144 = *(void *)(v148 + 24);
      int v143 = 0;
      int v142 = v144;
      int v141 = 0;
      int v13 = v144;
      int v14 = v144;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(chunk_from_isolation + 8), (unsigned int *)&v14, 0, memory_order_release, memory_order_relaxed);
      if (v14 != v13) {
        int v142 = v14;
      }
      BOOL v140 = v14 == v13;
      if (v14 != v13) {
        os_unfair_lock_unlock(v145);
      }
    }
    uint64_t v45 = v37 + 24;
    os_unfair_lock_t v154 = (os_unfair_lock_t)(v37 + 24);
    int v153 = 0;
    uint64_t v155 = 3;
    uint64_t v156 = 3;
    unint64_t v157 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    int v153 = *(void *)(v157 + 24);
    int v152 = 0;
    int v151 = v153;
    int v150 = 0;
    int v15 = v153;
    int v16 = v153;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v37 + 24), (unsigned int *)&v16, 0, memory_order_release, memory_order_relaxed);
    if (v16 != v15) {
      int v151 = v16;
    }
    BOOL v149 = v16 == v15;
    if (v16 != v15) {
      os_unfair_lock_unlock(v154);
    }
    if (!chunk_from_isolation && (*(unsigned char *)(v37 + 78) & 1) != 0)
    {
      uint64_t v39 = v38;
      uint64_t v24 = *(void *)(v38 + 232) ? *(void *)(v38 + 232) : v39;
      chunk_from_isolatiounsigned int n = _xzm_xzone_allocate_chunk_from_isolation(v24, v37);
      if (chunk_from_isolation)
      {
        *(void *)uint64_t v30 = chunk_from_isolation;
        *(unsigned char *)(chunk_from_isolation + 12) = v31 + 1;
      }
    }
    if (!chunk_from_isolation)
    {
      chunk_from_isolatiounsigned int n = _xzm_xzone_small_chunk_alloc(v38, v37);
      if (!chunk_from_isolation)
      {
        *(void *)uint64_t v30 = 0;
        goto LABEL_116;
      }
      uint64_t v69 = v38;
      uint64_t v68 = v37;
      unint64_t v67 = chunk_from_isolation;
      int v23 = *(unsigned char *)(chunk_from_isolation + 32) & 0xF;
      if (v23 == 2)
      {
        BOOL v22 = 0;
        if (((*(_DWORD *)v67 >> 11) & 0x7FF) == 0)
        {
          BOOL v22 = 0;
          if ((~*(_DWORD *)v67 & 0x7FF) != 0) {
            BOOL v22 = (*(_DWORD *)v67 & 0x7FF) != 2046;
          }
        }
        BOOL v70 = v22;
      }
      else
      {
        if (v23 != 5)
        {
          uint64_t v66 = 0;
          uint64_t v66 = *(unsigned char *)(v67 + 32) & 0xF;
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
          qword_C0148 = v66;
          __break(1u);
          JUMPOUT(0x63000);
        }
        BOOL v70 = *(_DWORD *)(v67 + 4) == *(_DWORD *)(v68 + 68);
      }
      if (v70)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!_xzm_chunk_is_full(zone, xz, chunk)\" failed (/Libr"
                               "ary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2142)";
        __break(1u);
        JUMPOUT(0x63030);
      }
      *(void *)uint64_t v30 = chunk_from_isolation;
      *(unsigned char *)(chunk_from_isolation + 12) = v31 + 1;
    }
  }
  if (*(void *)v30 != chunk_from_isolation)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"xas->xas_chunk == chunk\" failed (/Library/Caches/com.ap"
                           "ple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2155)";
    __break(1u);
    JUMPOUT(0x630C4);
  }
  uint64_t v64 = v38;
  uint64_t v63 = v37;
  unint64_t v62 = chunk_from_isolation;
  int v21 = *(unsigned char *)(chunk_from_isolation + 32) & 0xF;
  if (v21 == 2)
  {
    BOOL v20 = 0;
    if (((*(_DWORD *)v62 >> 11) & 0x7FF) == 0)
    {
      BOOL v20 = 0;
      if ((~*(_DWORD *)v62 & 0x7FF) != 0) {
        BOOL v20 = (*(_DWORD *)v62 & 0x7FF) != 2046;
      }
    }
    BOOL v65 = v20;
  }
  else
  {
    if (v21 != 5)
    {
      uint64_t v61 = 0;
      uint64_t v61 = *(unsigned char *)(v62 + 32) & 0xF;
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
      qword_C0148 = v61;
      __break(1u);
      JUMPOUT(0x631D8);
    }
    BOOL v65 = *(_DWORD *)(v62 + 4) == *(_DWORD *)(v63 + 68);
  }
  if (v65)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!_xzm_chunk_is_full(zone, xz, chunk)\" failed (/Library/"
                           "Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2156)";
    __break(1u);
    JUMPOUT(0x63208);
  }
  unint64_t v34 = _xzm_xzone_alloc_from_chunk(v38, v37, chunk_from_isolation, &v33, a4, a5);
  if (!v34)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr\" failed (/Library/Caches/com.apple.xbs/Sources/libm"
                           "alloc_driverkit/src/xzone/xzone_malloc.c:2159)";
    __break(1u);
    JUMPOUT(0x63250);
  }
LABEL_116:
  uint64_t v44 = v30 + 8;
  os_unfair_lock_t v163 = (os_unfair_lock_t)(v30 + 8);
  int v162 = 0;
  uint64_t v164 = 3;
  uint64_t v165 = 3;
  unint64_t v166 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  int v162 = *(void *)(v166 + 24);
  int v161 = 0;
  int v160 = v162;
  int v159 = 0;
  int v17 = v162;
  int v18 = v162;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v30 + 8), (unsigned int *)&v18, 0, memory_order_release, memory_order_relaxed);
  if (v18 != v17) {
    int v160 = v18;
  }
  BOOL v158 = v18 == v17;
  if (v18 != v17) {
    os_unfair_lock_unlock(v163);
  }
  if (v34)
  {
    *(void *)(v34 + 8) = 0;
    if ((v33 & 1) == 0 && (v35 & 1) != 0 && *(void *)(v37 + 48) >= 0x401uLL) {
      _platform_bzero();
    }
  }
  else
  {
    malloc_set_errno_fast(1, 12);
  }
  return v34;
}

_OWORD *_xzm_xzone_malloc_tiny_outlined(uint64_t a1, atomic_ullong *a2, unsigned __int8 a3, atomic_ullong *a4, uint64_t a5, int a6)
{
  uint64_t v71 = a1;
  BOOL v70 = a2;
  unsigned __int8 v69 = a3;
  uint64_t v68 = a4;
  uint64_t v67 = a5;
  int v66 = a6;
  if (a5) {
    _xzm_corruption_detected(v67);
  }
  char v65 = v66 & 1;
  BOOL v64 = 0;
  BOOL v64 = *((void *)v70 + 6) < 0x401uLL;
  int v63 = 0;
  unint64_t v62 = v68;
  unint64_t v61 = 0;
  unint64_t v60 = 0;
  unint64_t v59 = *(void *)v68;
  unint64_t v60 = v59;
  unint64_t v58 = v59;
  unint64_t v61 = v59;
  unsigned __int8 v57 = 0;
  chunk_from_isolatiounsigned int n = 0;
  char v55 = 0;
  do
  {
    while (1)
    {
      while ((v61 & 1) != 0)
      {
        unint64_t v145 = v61;
        int v144 = v68;
        int v143 = v68;
        if ((v61 & 2) == 0)
        {
          uint64_t v142 = v145 | 2;
          BOOL v141 = 0;
          unint64_t v140 = v145;
          BOOL v139 = 0;
          uint64_t v137 = v145 | 2;
          uint64_t v136 = v145 | 2;
          uint64_t v138 = v145 | 2;
          unint64_t v6 = v145;
          unint64_t v7 = v145;
          atomic_compare_exchange_strong_explicit(v143, &v7, v145 | 2, memory_order_relaxed, memory_order_relaxed);
          if (v7 != v6) {
            unint64_t v140 = v7;
          }
          BOOL v135 = v7 == v6;
          BOOL v139 = v7 == v6;
          unint64_t v145 = v140;
          BOOL v134 = v139;
          BOOL v141 = v7 == v6;
          if (v7 != v6)
          {
            unint64_t v146 = v145;
            goto LABEL_17;
          }
          v145 |= 2uLL;
        }
        int v133 = 17104898;
        int v132 = 0;
        int v132 = __ulock_wait();
        if (v132 < 0 && v132 != -4 && -v132 != 14)
        {
          uint64_t v131 = -v132;
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: ulock_wait failure";
          qword_C0148 = v131;
          __break(1u);
          JUMPOUT(0x63680);
        }
        unint64_t v129 = 0;
        unint64_t v128 = *(void *)v143;
        unint64_t v129 = v128;
        unint64_t v127 = v128;
        unint64_t v130 = v128;
        unint64_t v145 = v128;
        unint64_t v146 = v128;
LABEL_17:
        unint64_t v54 = v146;
        unint64_t v61 = v146;
      }
      if ((v61 & 2) == 0) {
        break;
      }
      _xzm_fork_lock_wait(v71);
      unint64_t v52 = 0;
      unint64_t v51 = *(void *)v62;
      unint64_t v52 = v51;
      unint64_t v50 = v51;
      unint64_t v53 = v51;
      unint64_t v61 = v51;
    }
    chunk_from_isolatiounsigned int n = (v61 >> 2) & 0x7FFFFFFFFFFFLL;
    if (chunk_from_isolation)
    {
      unsigned __int8 v57 = (_OWORD *)_xzm_xzone_malloc_from_tiny_chunk(v71, (uint64_t)v70, v69, chunk_from_isolation, &v55, 0);
      if (v57) {
        goto LABEL_122;
      }
    }
    if (!v63) {
      int v63 = _malloc_ulock_self_owner_value();
    }
    unint64_t v49 = v61 & 0xFFFE000000000000 | (4 * v63) | 1;
    BOOL v48 = 0;
    unint64_t v47 = v61;
    BOOL v46 = 0;
    unint64_t v44 = v49;
    unint64_t v43 = v49;
    unint64_t v45 = v49;
    unint64_t v8 = v61;
    unint64_t v9 = v61;
    atomic_compare_exchange_strong_explicit(v62, &v9, v49, memory_order_relaxed, memory_order_relaxed);
    if (v9 != v8) {
      unint64_t v47 = v9;
    }
    BOOL v42 = v9 == v8;
    BOOL v46 = v9 == v8;
    unint64_t v61 = v47;
    BOOL v41 = v46;
    BOOL v48 = v9 == v8;
  }
  while (v9 != v8);
  if (!v63)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"self_owner_value\" failed (/Library/Caches/com.apple.xbs"
                           "/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:1284)";
    __break(1u);
    JUMPOUT(0x638CCLL);
  }
  if (v57)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!ptr\" failed (/Library/Caches/com.apple.xbs/Sources/lib"
                           "malloc_driverkit/src/xzone/xzone_malloc.c:1289)";
    __break(1u);
    JUMPOUT(0x638FCLL);
  }
  while (1)
  {
    chunk_from_isolatiounsigned int n = _xzm_chunk_list_pop(v71, v70, 0);
    if (!chunk_from_isolation) {
      break;
    }
    char v40 = 0;
    unsigned __int8 v57 = (_OWORD *)_xzm_xzone_malloc_from_tiny_chunk(v71, (uint64_t)v70, v69, chunk_from_isolation, &v55, &v40);
    if (v57) {
      goto LABEL_103;
    }
    if (v40) {
      _xzm_chunk_list_push(v71, (atomic_ullong *)((char *)v70 + 8), chunk_from_isolation, 0);
    }
  }
  for (unint64_t i = 0; ; unint64_t i = chunk_from_isolation)
  {
    chunk_from_isolatiounsigned int n = _xzm_chunk_list_pop(v71, (atomic_ullong *)((char *)v70 + 8), 0);
    if (!chunk_from_isolation) {
      break;
    }
    unsigned __int8 v57 = (_OWORD *)_xzm_xzone_malloc_from_empty_tiny_chunk(v71, (uint64_t)v70, v69, chunk_from_isolation);
    if (v57) {
      goto LABEL_103;
    }
    *(void *)(chunk_from_isolation + 16) = i;
  }
  for (unint64_t j = 0; ; _xzm_chunk_list_push(v71, (atomic_ullong *)((char *)v70 + 8), j, 0))
  {
    unint64_t j = i;
    if (!i) {
      break;
    }
    unint64_t i = *(void *)(i + 16);
  }
  if (*((unsigned char *)v70 + 78))
  {
    uint64_t v37 = 0;
    uint64_t v72 = v71;
    uint64_t v26 = *(void *)(v71 + 232) ? *(void *)(v71 + 232) : v72;
    uint64_t v37 = v26;
    chunk_from_isolatiounsigned int n = _xzm_xzone_allocate_chunk_from_isolation(v26, (uint64_t)v70);
    if (chunk_from_isolation)
    {
      uint64_t v150 = v71;
      BOOL v149 = v70;
      unint64_t v148 = chunk_from_isolation;
      int v25 = *(unsigned char *)(chunk_from_isolation + 32) & 0xF;
      if (v25 == 2)
      {
        BOOL v24 = 1;
        if (((*(_DWORD *)v148 >> 11) & 0x7FF) != *((_DWORD *)v149 + 17))
        {
          BOOL v24 = 1;
          if ((~*(_DWORD *)v148 & 0x7FF) != 0) {
            BOOL v24 = (*(_DWORD *)v148 & 0x7FF) == 2046;
          }
        }
        BOOL v151 = v24;
      }
      else
      {
        if (v25 != 5)
        {
          uint64_t v147 = 0;
          uint64_t v147 = *(unsigned char *)(v148 + 32) & 0xF;
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
          qword_C0148 = v147;
          __break(1u);
          JUMPOUT(0x63C08);
        }
        BOOL v151 = *(_DWORD *)(v148 + 4) == 0;
      }
      if (!v151)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_chunk_is_empty(zone, xz, chunk)\" failed (/Libr"
                               "ary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:1344)";
        __break(1u);
        JUMPOUT(0x63C38);
      }
      unsigned __int8 v57 = (_OWORD *)_xzm_xzone_malloc_from_empty_tiny_chunk(v71, (uint64_t)v70, v69, chunk_from_isolation);
      if (!v57)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr\" failed (/Library/Caches/com.apple.xbs/Sources/"
                               "libmalloc_driverkit/src/xzone/xzone_malloc.c:1347)";
        __break(1u);
        JUMPOUT(0x63C80);
      }
      goto LABEL_102;
    }
  }
  chunk_from_isolatiounsigned int n = _xzm_chunk_list_pop(v71, (atomic_ullong *)((char *)v70 + 24), 0);
  if (chunk_from_isolation)
  {
    if (v64 && (*(unsigned char *)(chunk_from_isolation + 32) & 0x10) == 0)
    {
      uint64_t v30 = 0;
      uint64_t v155 = v71;
      unint64_t v154 = chunk_from_isolation;
      int v153 = &v30;
      if (!&v30)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk_size_out\" failed (/Library/Caches/com.apple.x"
                               "bs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:375)";
        __break(1u);
        JUMPOUT(0x63EC8);
      }
      unint64_t v152 = 0;
      uint64_t v159 = v155;
      unint64_t v158 = v154;
      unint64_t v157 = v153;
      int v21 = *(unsigned char *)(v154 + 32) & 0xF;
      if (v21 == 2)
      {
        *unint64_t v157 = 0x4000;
      }
      else if (v21 == 5)
      {
        *unint64_t v157 = 0x10000;
      }
      else
      {
        if ((v21 - 6) >= 2)
        {
          uint64_t v156 = 0;
          uint64_t v156 = *(unsigned char *)(v158 + 32) & 0xF;
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: asking for start of chunk with invalid kind";
          qword_C0148 = v156;
          __break(1u);
          JUMPOUT(0x63FB4);
        }
        *unint64_t v157 = (unint64_t)*(unsigned int *)(v158 + 40) << 14;
      }
      uint64_t v161 = v159;
      unint64_t v160 = v158;
      uint64_t v164 = v159;
      unint64_t v163 = v158;
      unint64_t v162 = v158 & 0xFFFFFFFFFFFFC000;
      char v20 = 1;
      if ((v158 & 0xFFFFFFFFFFFFC000) != 0)
      {
        BOOL v19 = 0;
        if (v163 >= v162 + 2136) {
          BOOL v19 = v163 < v162 + 48 * *(unsigned int *)(v162 + 16) + 2136;
        }
        char v20 = v19;
      }
      if ((v20 & 1) == 0)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice <"
                               " (segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.ap"
                               "ple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
        __break(1u);
        JUMPOUT(0x64094);
      }
      unint64_t v166 = v162;
      unint64_t v165 = v160;
      unint64_t v171 = v162;
      unint64_t v170 = v160;
      if (v160 < v162 + 2136)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\""
                               " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzo"
                               "ne_inline_internal.h:278)";
        __break(1u);
        JUMPOUT(0x640F8);
      }
      int64_t v169 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v170 - v171 - 2136) >> 4);
      if (v169 >= *(unsigned int *)(v171 + 16))
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" "
                               "failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzon"
                               "e_inline_internal.h:280)";
        __break(1u);
        JUMPOUT(0x64160);
      }
      unint64_t v168 = v162;
      int v167 = v169;
      unint64_t v152 = *(void *)(v162 + 80) + ((unint64_t)v169 << 14);
      if (!v152)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr\" failed (/Library/Caches/com.apple.xbs/Sources/"
                               "libmalloc_driverkit/src/xzone/xzone_malloc.c:1392)";
        __break(1u);
        JUMPOUT(0x641BCLL);
      }
      if (v30 != 0x4000)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk_size == XZM_SEGMENT_SLICE_SIZE\" failed (/Libr"
                               "ary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:1393)";
        __break(1u);
        JUMPOUT(0x641F0);
      }
      _platform_bzero();
    }
  }
  else
  {
    BOOL v36 = v64;
    char v35 = 0;
    uint64_t v34 = 0;
    char v33 = &v34;
    chunk_from_isolatiounsigned int n = xzm_segment_group_alloc_chunk(*((unsigned __int8 **)v70 + 5), 2u, (unsigned __int8 *)v70 + 79, 1u, &v34, 0, v64, 0);
    if (!chunk_from_isolation)
    {
      BOOL v23 = 1;
      if (v33) {
        BOOL v23 = *v33 == 0;
      }
      if (!v23)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!list || !SLIST_FIRST(list)\" failed (/Library/Cache"
                               "s/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:1371)";
        __break(1u);
        JUMPOUT(0x63D84);
      }
      goto LABEL_103;
    }
    *(unsigned char *)(chunk_from_isolation + 33) = *((unsigned char *)v70 + 72);
    uint64_t k = 0;
    uint64_t v31 = 0;
    for (uint64_t k = *v33; ; uint64_t k = v31)
    {
      char v22 = 0;
      if (k)
      {
        uint64_t v31 = *(void *)(k + 16);
        char v22 = 1;
      }
      if ((v22 & 1) == 0) {
        break;
      }
      *char v33 = *(void *)(*v33 + 16);
      *(unsigned char *)(k + 33) = *((unsigned char *)v70 + 72);
      *(unsigned char *)(k + 32) |= 0x40u;
      _xzm_chunk_list_push(v71, (atomic_ullong *)((char *)v70 + 24), k, 0);
    }
  }
  unsigned __int8 v57 = (_OWORD *)_xzm_xzone_malloc_from_fresh_tiny_chunk(v71, (uint64_t)v70, v69, chunk_from_isolation);
  if (!v57)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr\" failed (/Library/Caches/com.apple.xbs/Sources/libm"
                           "alloc_driverkit/src/xzone/xzone_malloc.c:1399)";
    __break(1u);
    JUMPOUT(0x6424CLL);
  }
LABEL_102:
  _xzm_chunk_list_push(v71, (atomic_ullong *)((char *)v70 + 16), chunk_from_isolation, 1u);
LABEL_103:
  if (!v57 || (char v18 = 1, !chunk_from_isolation))
  {
    BOOL v17 = 0;
    if (!v57) {
      BOOL v17 = chunk_from_isolation == 0;
    }
    char v18 = v17;
  }
  if ((v18 & 1) == 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(ptr && chunk) || (!ptr && !chunk)\" failed (/Library/Ca"
                           "ches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:1407)";
    __break(1u);
    JUMPOUT(0x642F0);
  }
  unint64_t v29 = atomic_exchange_explicit(v62, (4 * (chunk_from_isolation & 0x7FFFFFFFFFFFLL)) & 0x1FFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)((v61 >> 49) + 1) << 49), memory_order_release);
  if ((v29 & 1) == 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"prev_slot_meta.xasa_gate.xsg_locked\" failed (/Library/C"
                           "aches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:1426)";
    __break(1u);
    JUMPOUT(0x643C4);
  }
  if (v63 != v29 >> 2)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"prev_slot_meta.xasa_gate.xsg_owner == self_owner_value\""
                           " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:1427)";
    __break(1u);
    JUMPOUT(0x643FCLL);
  }
  if ((v29 & 0x1FFFF00000000) != 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"prev_slot_meta.xasa_gate.xsg_unused == 0\" failed (/Libr"
                           "ary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:1428)";
    __break(1u);
    JUMPOUT(0x64430);
  }
  if (v29 >> 49 != v61 >> 49)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"prev_slot_meta.xasa_gate.xsg_gen == slot_meta.xasa_gate."
                           "xsg_gen\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:1430)";
    __break(1u);
    JUMPOUT(0x64470);
  }
  if ((v29 & 2) != 0)
  {
    int v28 = __ulock_wake();
    if (v28)
    {
      if (v28 != -2)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: ulock_wake failure";
        qword_C0148 = -v28;
        __break(1u);
        JUMPOUT(0x64510);
      }
    }
  }
LABEL_122:
  if (v57)
  {
    char v27 = *((unsigned char *)v70 + 77);
    uint64_t v117 = v71;
    int v116 = v70;
    unsigned int v115 = v68;
    char v114 = v27;
    char v113 = v55 & 1;
    if (v27 != (*(unsigned char *)(v71 + 240) & 3))
    {
      unint64_t v112 = 0;
      unint64_t v111 = 0;
      unint64_t v110 = *((void *)v115 + 2);
      unint64_t v111 = v110;
      unint64_t v109 = v110;
      unint64_t v112 = v110;
      if ((v113 & 1) != 0 || (v112 & 0xFFFFFF00000000) != 0)
      {
        unint64_t v108 = 1;
        if (v113) {
          v108 |= 0x100000000uLL;
        }
        unint64_t v107 = 0;
        unint64_t v105 = v108;
        unint64_t v104 = v108;
        unint64_t v106 = v108;
        unint64_t v102 = 0;
        unint64_t v100 = v108;
        unint64_t v99 = v108;
        unint64_t v101 = v108;
        add_unint64_t explicit = atomic_fetch_add_explicit((atomic_ullong *)((char *)v115 + 16), v108, memory_order_relaxed);
        unint64_t v102 = add_explicit;
        unint64_t v97 = add_explicit;
        unint64_t v103 = add_explicit + v106;
        unint64_t v107 = add_explicit + v106;
        unsigned __int8 v96 = (add_explicit + v106) >> 56;
        if (v96 != (*(unsigned char *)(v117 + 240) & 3))
        {
          if ((HIDWORD(v107) & 0xFFFFFFu) <= *(_DWORD *)(v117 + 4 * v96 + 244))
          {
            if (v107 > *(_DWORD *)(v117 + 256))
            {
              unint64_t v79 = v107;
              LODWORD(v78) = 0;
              HIDWORD(v78) = HIBYTE(v78) << 24;
              HIBYTE(v78) = v96;
              unint64_t v107 = v78;
              BOOL v77 = 0;
              uint64_t v76 = (atomic_ullong *)((char *)v115 + 16);
              unint64_t v112 = *((void *)v115 + 2);
              do
              {
                if (v112 < v79 || HIBYTE(v112) > (int)HIBYTE(v79)) {
                  break;
                }
                unint64_t v75 = v107;
                unint64_t v14 = v112;
                unint64_t v15 = v112;
                atomic_compare_exchange_strong_explicit(v76, &v15, v107, memory_order_relaxed, memory_order_relaxed);
                if (v15 != v14) {
                  unint64_t v112 = v15;
                }
                BOOL v74 = v15 == v14;
                BOOL v77 = v15 == v14;
              }
              while (v15 != v14);
              BOOL v73 = v77;
            }
          }
          else
          {
            unsigned __int8 v95 = 0;
            unsigned __int8 v123 = v96;
            if (v96)
            {
              if (v96 != 1)
              {
                if (v96 != 2)
                {
                  qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: Invalid xzone slot config";
                  __break(1u);
                  JUMPOUT(0x647C0);
                }
                qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: Can't upgrade from XZM_SLOT_CPU";
                __break(1u);
                JUMPOUT(0x64794);
              }
              unsigned __int8 v124 = 2;
            }
            else if (ncpuclusters < 2)
            {
              unsigned __int8 v124 = 2;
            }
            else
            {
              unsigned __int8 v124 = 1;
            }
            unsigned __int8 v95 = v124;
            if (v96 >= (int)v124)
            {
              qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"current_slot_config < next_slot_config\" faile"
                                     "d (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:955)";
              __break(1u);
              JUMPOUT(0x64808);
            }
            if (malloc_tracing_enabled) {
              kdebug_trace();
            }
            unsigned __int8 v94 = 0;
            BOOL v93 = 0;
            unsigned int v92 = (atomic_ullong *)((char *)v116 + 77);
            unsigned __int8 v94 = *((unsigned char *)v116 + 77);
            do
            {
              if (v94 >= (int)v95) {
                break;
              }
              unsigned __int8 v91 = v95;
              int v10 = v94;
              int v11 = v94;
              atomic_compare_exchange_strong_explicit(v92, (unsigned __int8 *)&v11, v95, memory_order_relaxed, memory_order_relaxed);
              if (v11 != v10) {
                unsigned __int8 v94 = v11;
              }
              BOOL v90 = v11 == v10;
              BOOL v93 = v11 == v10;
            }
            while (v11 != v10);
            BOOL v89 = v93;
            LODWORD(v88) = 0;
            HIDWORD(v88) = HIBYTE(v88) << 24;
            HIBYTE(v88) = v95;
            unint64_t v107 = v88;
            unsigned __int8 v87 = 0;
            unsigned __int8 v125 = v95;
            if (!v95) {
              goto LABEL_153;
            }
            if (v95 == 1)
            {
              char v126 = ncpuclusters;
              goto LABEL_154;
            }
            if (v95 != 2)
            {
LABEL_153:
              char v126 = 1;
              goto LABEL_154;
            }
            char v126 = logical_ncpus;
LABEL_154:
            unsigned __int8 v87 = v126;
            for (unsigned __int8 m = 0; m < (int)v87; ++m)
            {
              uint64_t v85 = 0;
              uint64_t v122 = v117;
              BOOL v121 = v116;
              unsigned __int8 v120 = m;
              unsigned __int8 v119 = 0;
              unsigned __int8 v119 = *((unsigned char *)v116 + 72);
              uint64_t v118 = 0;
              uint64_t v118 = m * *(unsigned __int8 *)(v117 + 210);
              uint64_t v85 = *(void *)(v117 + 224) + 32 * (v118 + v119);
              BOOL v84 = 0;
              unsigned int v83 = (atomic_ullong *)(v85 + 16);
              unint64_t v112 = *(void *)(v85 + 16);
              do
              {
                if (HIBYTE(v112) >= (int)v95) {
                  break;
                }
                unint64_t v82 = v107;
                unint64_t v12 = v112;
                unint64_t v13 = v112;
                atomic_compare_exchange_strong_explicit(v83, &v13, v107, memory_order_relaxed, memory_order_relaxed);
                if (v13 != v12) {
                  unint64_t v112 = v13;
                }
                BOOL v81 = v13 == v12;
                BOOL v84 = v13 == v12;
              }
              while (v13 != v12);
              BOOL v80 = v84;
            }
          }
        }
      }
    }
    *unsigned __int8 v57 = 0uLL;
    if ((v65 & 1) != 0 && !v64) {
      _platform_bzero();
    }
  }
  return v57;
}

void _xzm_walk_lock_wait(uint64_t a1)
{
  int v1 = 0;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 280), (unsigned int *)&v1, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
  if (v1) {
    os_unfair_lock_lock_with_options();
  }
  int v2 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  int v3 = v2;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 280), (unsigned int *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != v2) {
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 280));
  }
}

void _xzm_corruption_detected(uint64_t a1)
{
  qword_C0118 = (uint64_t)"BUG IN CLIENT OF LIBMALLOC: memory corruption of free block";
  qword_C0148 = a1;
  __break(1u);
}

void _xzm_fork_lock_wait(uint64_t a1)
{
  int v1 = 0;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 284), (unsigned int *)&v1, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
  if (v1) {
    os_unfair_lock_lock_with_options();
  }
  int v2 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  int v3 = v2;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 284), (unsigned int *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != v2) {
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 284));
  }
}

uint64_t _xzm_xzone_malloc_from_tiny_chunk(uint64_t a1, uint64_t a2, unsigned __int8 a3, unint64_t a4, unsigned char *a5, unsigned char *a6)
{
  uint64_t v21 = a1;
  uint64_t v20 = a2;
  unsigned __int8 v19 = a3;
  unint64_t v18 = a4;
  BOOL v17 = a5;
  int v16 = a6;
  v15[1] = 1;
  v15[0] = 0;
  uint64_t v30 = a1;
  uint64_t v29 = a2;
  unsigned __int8 v28 = a3;
  unint64_t v27 = a4;
  char v26 = 1;
  int v25 = v15;
  BOOL v24 = a5;
  BOOL v23 = a6;
  uint64_t v22 = 0;
  uint64_t v79 = a1;
  uint64_t v78 = a2;
  unsigned __int8 v77 = a3;
  uint64_t v76 = (atomic_ullong *)a4;
  char v75 = 1;
  BOOL v74 = v15;
  BOOL v73 = a5;
  uint64_t v72 = a6;
  BOOL v71 = a6 != 0;
  unint64_t v70 = 0;
  uint64_t v83 = a1;
  unint64_t v82 = a4;
  uint64_t v81 = 0;
  uint64_t v85 = a1;
  unint64_t v84 = a4;
  uint64_t v88 = a1;
  unint64_t v87 = a4;
  unint64_t v86 = a4 & 0xFFFFFFFFFFFFC000;
  char v14 = 1;
  if ((a4 & 0xFFFFFFFFFFFFC000) != 0)
  {
    BOOL v13 = 0;
    if (v87 >= v86 + 2136) {
      BOOL v13 = v87 < v86 + 48 * *(unsigned int *)(v86 + 16) + 2136;
    }
    char v14 = v13;
  }
  if ((v14 & 1) == 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0x652D4);
  }
  unint64_t v90 = v86;
  unint64_t v89 = v84;
  unint64_t v95 = v86;
  unint64_t v94 = v84;
  if (v84 < v86 + 2136)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" fai"
                           "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                           "e_internal.h:278)";
    __break(1u);
    JUMPOUT(0x65338);
  }
  int64_t v93 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v94 - v95 - 2136) >> 4);
  if (v93 >= *(unsigned int *)(v95 + 16))
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fail"
                           "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline"
                           "_internal.h:280)";
    __break(1u);
    JUMPOUT(0x653A0);
  }
  unint64_t v92 = v86;
  int v91 = v93;
  unint64_t v70 = *(void *)(v86 + 80) + ((unint64_t)v93 << 14);
  if ((*((unsigned char *)v76 + 32) & 0xF) != 2)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == XZM_SLICE_KIND_TINY_CHUNK\""
                           " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:484)";
    __break(1u);
    JUMPOUT(0x65400);
  }
  uint64_t v69 = 0;
  char v68 = 0;
  long long v67 = 0uLL;
  int v66 = 0;
  unint64_t v65 = 0;
  unint64_t v64 = 0;
  unint64_t v63 = *(void *)v76;
  unint64_t v64 = v63;
  unint64_t v62 = v63;
  unint64_t v65 = v63;
  do
  {
    while (1)
    {
      while (1)
      {
        while ((v65 & 0x40000000) != 0)
        {
          if ((v75 & 1) == 0)
          {
            uint64_t v80 = 0;
            goto LABEL_71;
          }
          _xzm_walk_lock_wait(v79);
          unint64_t v61 = 0;
          unint64_t v60 = *(void *)v76;
          unint64_t v61 = v60;
          unint64_t v59 = v60;
          unint64_t v65 = v60;
        }
        unint64_t v58 = v65;
        if (!v71) {
          break;
        }
        if (((v65 >> 22) & 0x3F) != 0)
        {
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"old_meta.xca_alloc_idx == XZM_SLOT_INDEX_EMPTY\" f"
                                 "ailed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:517)";
          __break(1u);
          JUMPOUT(0x65504);
        }
        if ((v65 & 0x10000000) == 0)
        {
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"old_meta.xca_on_partial_list\" failed (/Library/Ca"
                                 "ches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:518)";
          __break(1u);
          JUMPOUT(0x65534);
        }
        if ((v65 & 0x20000000) != 0)
        {
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!old_meta.xca_on_empty_list\" failed (/Library/Cac"
                                 "hes/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:519)";
          __break(1u);
          JUMPOUT(0x65564);
        }
        v58 &= ~0x10000000uLL;
        if (((v65 >> 11) & 0x7FF) != 0)
        {
          unint64_t v58 = v58 & 0xFFFFFFFFF03FFFFFLL | (((v77 + 1) & 0x3FLL) << 22);
          goto LABEL_52;
        }
        if ((v65 & 0x7FF) == 0x7FE)
        {
          v58 |= 0x20000000uLL;
          *uint64_t v72 = 1;
        }
        else if ((~v65 & 0x7FF) != 0)
        {
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"old_meta.xca_alloc_head == XZM_FREE_MADVISING\" fa"
                                 "iled (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:538)";
          __break(1u);
          JUMPOUT(0x655E8);
        }
        BOOL v57 = 0;
        unint64_t v56 = v65;
        BOOL v55 = 0;
        unint64_t v53 = v58;
        unint64_t v52 = v58;
        unint64_t v54 = v58;
        unint64_t v6 = v65;
        unint64_t v7 = v65;
        atomic_compare_exchange_strong_explicit(v76, &v7, v58, memory_order_relaxed, memory_order_relaxed);
        if (v7 != v6) {
          unint64_t v56 = v7;
        }
        BOOL v51 = v7 == v6;
        BOOL v55 = v7 == v6;
        unint64_t v65 = v56;
        BOOL v50 = v55;
        BOOL v57 = v7 == v6;
        if (v7 == v6)
        {
          if (malloc_tracing_enabled) {
            kdebug_trace();
          }
          uint64_t v80 = 0;
          goto LABEL_71;
        }
      }
      if (((v65 >> 22) & 0x3F) != v77 + 1)
      {
        uint64_t v80 = 0;
        goto LABEL_71;
      }
      if (((v65 >> 11) & 0x7FF) == 0) {
        break;
      }
LABEL_52:
      char v68 = 0;
      unint64_t v58 = v58 & 0xFFFFFFFFFFC007FFLL | ((((v58 >> 11) - 1) & 0x7FFLL) << 11);
      if ((v65 & 0x7FF) > 0x3FF)
      {
        if ((v65 & 0x7FF) != 0x7FC)
        {
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"old_meta.xca_alloc_head == XZM_FREE_BUMP\" failed "
                                 "(/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:628)";
          __break(1u);
          JUMPOUT(0x659A0);
        }
        if (((v58 >> 11) & 0x7FF) == 0) {
          unint64_t v58 = v58 & 0xFFFFFFFFFFFFF800 | 0x7FD;
        }
        uint64_t v41 = 0;
        uint64_t v41 = *(unsigned int *)(v78 + 68);
        uint64_t v69 = v70 + (v41 - ((v65 >> 11) & 0x7FF)) * *(void *)(v78 + 48);
      }
      else
      {
        uint64_t v69 = v70 + 16 * (v65 & 0x7FF);
        long long v67 = *(_OWORD *)v69;
        unint64_t v58 = v58 & 0xFFFFFFFFFFFFF800 | WORD4(v67) & 0x7FF;
        unint64_t v58 = v58 & 0xFFF8003FFFFFFFFFLL | (((DWORD2(v67) >> 11) & 0x1FFFLL) << 38);
        char v68 = 1;
      }
      BOOL v40 = 0;
      unint64_t v39 = v65;
      BOOL v38 = 0;
      unint64_t v36 = v58;
      unint64_t v35 = v58;
      unint64_t v37 = v58;
      unint64_t v10 = v65;
      unint64_t v11 = v65;
      atomic_compare_exchange_strong_explicit(v76, &v11, v58, memory_order_relaxed, memory_order_relaxed);
      if (v11 != v10) {
        unint64_t v39 = v11;
      }
      BOOL v34 = v11 == v10;
      BOOL v38 = v11 == v10;
      unint64_t v65 = v39;
      BOOL v33 = v38;
      BOOL v40 = v11 == v10;
      if (v11 == v10)
      {
        if (malloc_tracing_enabled) {
          kdebug_trace();
        }
        if (v68)
        {
          uint64_t v32 = 0;
          uint64_t v32 = v69 ^ *(void *)(v79 + 272);
          if (v32 == (void)v67)
          {
            uint64_t v31 = WORD4(v67) & 0x7FF | (((*((void *)&v67 + 1) >> 11) & 0x1FFFLL) << 11) & 0xFFFFFF;
            if (*((void *)&v67 + 1) != v31) {
              *BOOL v74 = 1;
            }
          }
          else
          {
            *BOOL v74 = 1;
          }
        }
        uint64_t v80 = v69;
        goto LABEL_71;
      }
      *BOOL v73 = 1;
      ++v66;
    }
    v58 &= 0xFFFFFFFFF03FFFFFLL;
    if ((v65 & 0x7FF) != 0x7FD)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"old_meta.xca_alloc_head == XZM_FREE_NULL\" failed (/Li"
                             "brary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:593)";
      __break(1u);
      JUMPOUT(0x6577CLL);
    }
    if ((v65 & 0x10000000) != 0)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!old_meta.xca_on_partial_list\" failed (/Library/Cache"
                             "s/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:599)";
      __break(1u);
      JUMPOUT(0x657ACLL);
    }
    if ((v65 & 0x20000000) != 0)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!old_meta.xca_on_empty_list\" failed (/Library/Caches/"
                             "com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:600)";
      __break(1u);
      JUMPOUT(0x657DCLL);
    }
    BOOL v49 = 0;
    unint64_t v48 = v65;
    BOOL v47 = 0;
    unint64_t v45 = v58;
    unint64_t v44 = v58;
    unint64_t v46 = v58;
    unint64_t v8 = v65;
    unint64_t v9 = v65;
    atomic_compare_exchange_strong_explicit(v76, &v9, v58, memory_order_relaxed, memory_order_relaxed);
    if (v9 != v8) {
      unint64_t v48 = v9;
    }
    BOOL v43 = v9 == v8;
    BOOL v47 = v9 == v8;
    unint64_t v65 = v48;
    BOOL v42 = v47;
    BOOL v49 = v9 == v8;
  }
  while (v9 != v8);
  if (malloc_tracing_enabled) {
    kdebug_trace();
  }
  uint64_t v80 = 0;
LABEL_71:
  uint64_t v22 = v80;
  if (v15[0]) {
    _xzm_corruption_detected(v80);
  }
  return v80;
}

uint64_t _malloc_ulock_self_owner_value()
{
  return *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24) >> 2;
}

uint64_t _xzm_chunk_list_pop(uint64_t a1, atomic_ullong *a2, int a3)
{
  uint64_t v8 = *(void *)a2;
  do
  {
    while (v8 < 0)
    {
      _xzm_fork_lock_wait(a1);
      uint64_t v8 = *(void *)a2;
    }
    uint64_t v7 = v8 & 0x7FFFFFFFFFFFLL;
    if ((v8 & 0x7FFFFFFFFFFFLL) == 0) {
      return 0;
    }
    uint64_t v6 = v8;
    uint64_t v3 = v8;
    uint64_t v4 = v8;
    atomic_compare_exchange_strong_explicit(a2, (unint64_t *)&v4, *(void *)((unsigned char *)&dword_10[2 * a3] + (v8 & 0x7FFFFFFFFFFFLL)) & 0x7FFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)(((unint64_t)v8 >> 47) + 1) << 47) & 0x7FFFFFFFFFFFFFFFLL, memory_order_relaxed, memory_order_relaxed);
    if (v4 != v3) {
      uint64_t v6 = v4;
    }
    uint64_t v8 = v6;
  }
  while (v4 != v3);
  return v7;
}

void _xzm_chunk_list_push(uint64_t a1, atomic_ullong *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v7 = *(void *)a2;
  do
  {
    while (v7 < 0)
    {
      _xzm_fork_lock_wait(a1);
      uint64_t v7 = *(void *)a2;
    }
    *(void *)(a3 + 16 + 8 * a4) = v7 & 0x7FFFFFFFFFFFLL;
    uint64_t v6 = v7;
    uint64_t v4 = v7;
    uint64_t v5 = v7;
    atomic_compare_exchange_strong_explicit(a2, (unint64_t *)&v5, a3 & 0x7FFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)(((unint64_t)v7 >> 47) + 1) << 47) & 0x7FFFFFFFFFFFFFFFLL, memory_order_release, memory_order_relaxed);
    if (v5 != v4) {
      uint64_t v6 = v5;
    }
    uint64_t v7 = v6;
  }
  while (v5 != v4);
}

uint64_t _xzm_xzone_malloc_from_empty_tiny_chunk(uint64_t a1, uint64_t a2, char a3, unint64_t a4)
{
  if ((*(unsigned char *)(a4 + 32) & 0xF) != 2)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == XZM_SLICE_KIND_TINY_CHUNK\""
                           " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:747)";
    __break(1u);
    JUMPOUT(0x660E0);
  }
  unint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)a4, memory_order_acquire);
  if ((explicit & 0x7FF) != 0x7FE)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"old_meta.xca_alloc_head == XZM_FREE_MADVISED\" failed (/"
                           "Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:756)";
    __break(1u);
    JUMPOUT(0x66148);
  }
  if (*(void *)(a1 + 232)) {
    uint64_t v8 = *(void *)(a1 + 232);
  }
  else {
    uint64_t v8 = a1;
  }
  if ((*(unsigned char *)(v8 + 328) & 4) != 0 && (xzm_chunk_mark_used(a1, a4) & 1) == 0) {
    return 0;
  }
  if ((explicit & 0x20000000) == 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"old_meta.xca_on_empty_list\" failed (/Library/Caches/com"
                           ".apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:786)";
    __break(1u);
    JUMPOUT(0x66204);
  }
  if ((explicit & 0x10000000) != 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!old_meta.xca_on_partial_list\" failed (/Library/Caches/"
                           "com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:787)";
    __break(1u);
    JUMPOUT(0x66234);
  }
  if (((explicit >> 22) & 0x3F) != 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"old_meta.xca_alloc_idx == XZM_SLOT_INDEX_EMPTY\" failed "
                           "(/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:788)";
    __break(1u);
    JUMPOUT(0x66268);
  }
  unint64_t v4 = explicit;
  atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)a4, &v4, explicit & 0xFFFFFFFFD0000000 | ((unint64_t)((a3 + 1) & 0x3F) << 22) | 0x7FC | ((unint64_t)(((unsigned __int16)*(_DWORD *)(a2 + 68) - 1) & 0x7FF) << 11), memory_order_acquire, memory_order_acquire);
  if (v4 != explicit)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"success\" failed (/Library/Caches/com.apple.xbs/Sources/"
                           "libmalloc_driverkit/src/xzone/xzone_malloc.c:805)";
    __break(1u);
    JUMPOUT(0x66394);
  }
  if (malloc_tracing_enabled) {
    kdebug_trace();
  }
  unint64_t v14 = a4 & 0xFFFFFFFFFFFFC000;
  char v7 = 1;
  if ((a4 & 0xFFFFFFFFFFFFC000) != 0)
  {
    BOOL v6 = 0;
    if (a4 >= v14 + 2136) {
      BOOL v6 = a4 < (a4 & 0xFFFFFFFFFFFFC000)
    }
              + 48 * *(unsigned int *)((char *)dword_10 + (a4 & 0xFFFFFFFFFFFFC000))
              + 2136;
    char v7 = v6;
  }
  if ((v7 & 1) == 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0x6658CLL);
  }
  if (a4 < v14 + 2136)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" fai"
                           "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                           "e_internal.h:278)";
    __break(1u);
    JUMPOUT(0x665F0);
  }
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a4 - (a4 & 0xFFFFFFFFFFFFC000) - 2136) >> 4)) >= *(unsigned int *)((char *)dword_10 + (a4 & 0xFFFFFFFFFFFFC000)))
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fail"
                           "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline"
                           "_internal.h:280)";
    __break(1u);
    JUMPOUT(0x66658);
  }
  return *(uint64_t *)((char *)&stru_20.filesize + (a4 & 0xFFFFFFFFFFFFC000))
       + ((unint64_t)(-1431655765 * ((uint64_t)(a4 - v14 - 2136) >> 4)) << 14);
}

unint64_t _xzm_xzone_allocate_chunk_from_isolation(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = a1;
  uint64_t v16 = a2;
  if ((*(unsigned char *)(a2 + 78) & 1) == 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"xz->xz_sequestered\" failed (/Library/Caches/com.apple.x"
                           "bs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:1122)";
    __break(1u);
    JUMPOUT(0x666ECLL);
  }
  uint64_t v15 = 0;
  uint64_t v15 = *(void *)(v17 + 376) + 16 * *(unsigned __int8 *)(v16 + 72);
  unint64_t i = 0;
  if (*(void *)v15)
  {
    unint64_t v13 = 0;
    uint64_t v18 = v15 + 8;
    uint64_t v31 = v15 + 8;
    int v30 = 327680;
    unsigned int v29 = 0;
    uint64_t v32 = 3;
    uint64_t v33 = 3;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    unsigned int v29 = *(void *)(StatusReg + 24);
    int v28 = 0;
    unsigned int v27 = v29;
    unsigned int v26 = v29;
    int v2 = 0;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v15 + 8), (unsigned int *)&v2, v29, memory_order_acquire, memory_order_acquire);
    if (v2) {
      int v28 = v2;
    }
    BOOL v25 = v2 == 0;
    if (v2) {
      os_unfair_lock_lock_with_options();
    }
    for (unint64_t i = *(void *)v15; i; unint64_t i = *(void *)v15)
    {
      uint64_t v23 = v17;
      uint64_t v22 = v16;
      unint64_t v21 = i;
      int v10 = *(unsigned char *)(i + 32) & 0xF;
      if (v10 == 2)
      {
        BOOL v9 = 1;
        if (((*(_DWORD *)v21 >> 11) & 0x7FF) != *(_DWORD *)(v22 + 68))
        {
          BOOL v9 = 1;
          if ((~*(_DWORD *)v21 & 0x7FF) != 0) {
            BOOL v9 = (*(_DWORD *)v21 & 0x7FF) == 2046;
          }
        }
        BOOL v24 = v9;
      }
      else
      {
        if (v10 != 5)
        {
          uint64_t v20 = 0;
          uint64_t v20 = *(unsigned char *)(v21 + 32) & 0xF;
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
          qword_C0148 = v20;
          __break(1u);
          JUMPOUT(0x6692CLL);
        }
        BOOL v24 = *(_DWORD *)(v21 + 4) == 0;
      }
      if (!v24)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_chunk_is_empty(&main->xzmz_base, xz, chunk)\" f"
                               "ailed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:1143)";
        __break(1u);
        JUMPOUT(0x6695CLL);
      }
      if (*(void *)(i + 16)) {
        *(void *)(*(void *)(i + 16) + 24) = *(void *)(i + 24);
      }
      **(void **)(i + 24) = *(void *)(i + 16);
      *(void *)(i + 16) = -1;
      *(void *)(i + 24) = -1;
      if (*(void *)(v16 + 48) <= 0x1000uLL
        || (*(unsigned char *)(v17 + 328) & 4) == 0
        || (xzm_chunk_mark_used(v17, i) & 1) != 0)
      {
        *(_WORD *)(i + 34) = *(_WORD *)(v16 + 74);
        break;
      }
      unint64_t v3 = v13;
      *(void *)(i + 16) = v13;
      if (v3) {
        *(void *)(v13 + 24) = i + 16;
      }
      unint64_t v13 = i;
      *(void *)(i + 24) = &v13;
    }
    if (v13)
    {
      unint64_t v11 = 0;
      for (unint64_t j = v13; ; unint64_t j = v11)
      {
        char v8 = 0;
        if (j)
        {
          unint64_t v11 = *(void *)(j + 16);
          char v8 = 1;
        }
        if ((v8 & 1) == 0) {
          break;
        }
        if (*(void *)(j + 16)) {
          *(void *)(*(void *)(j + 16) + 24) = *(void *)(j + 24);
        }
        **(void **)(j + 24) = *(void *)(j + 16);
        *(void *)(j + 16) = -1;
        *(void *)(j + 24) = -1;
        unint64_t v4 = *(void *)v15;
        *(void *)(j + 16) = *(void *)v15;
        if (v4) {
          *(void *)(*(void *)v15 + 24) = j + 16;
        }
        *(void *)uint64_t v15 = j;
        *(void *)(j + 24) = v15;
      }
    }
    uint64_t v19 = v15 + 8;
    os_unfair_lock_t v40 = (os_unfair_lock_t)(v15 + 8);
    int v39 = 0;
    uint64_t v41 = 3;
    uint64_t v42 = 3;
    unint64_t v43 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    int v39 = *(void *)(v43 + 24);
    int v38 = 0;
    int v37 = v39;
    int v36 = 0;
    int v5 = v39;
    int v6 = v39;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v15 + 8), (unsigned int *)&v6, 0, memory_order_release, memory_order_relaxed);
    if (v6 != v5) {
      int v37 = v6;
    }
    BOOL v35 = v6 == v5;
    if (v6 != v5) {
      os_unfair_lock_unlock(v40);
    }
  }
  return i;
}

uint64_t _xzm_xzone_malloc_from_fresh_tiny_chunk(uint64_t a1, uint64_t a2, unsigned __int8 a3, unint64_t a4)
{
  if ((*(unsigned char *)(a4 + 32) & 0xF) != 2)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == XZM_SLICE_KIND_TINY_CHUNK\""
                           " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:847)";
    __break(1u);
    JUMPOUT(0x66CC0);
  }
  _xzm_xzone_fresh_chunk_init(a2, a4, 2);
  unint64_t v7 = ((unint64_t)(((unsigned __int16)*(_DWORD *)(a2 + 68) - 1) & 0x7FF) << 11) & 0x3FF803 | 0x7FC | (((a3 + 1) & 0x3F) << 22) & 0xFFFFFFF;
  if (malloc_tracing_enabled) {
    kdebug_trace();
  }
  *(void *)a4 = v7;
  *(_WORD *)(a4 + 34) = *(_WORD *)(a2 + 74);
  unint64_t v11 = a4 & 0xFFFFFFFFFFFFC000;
  char v6 = 1;
  if ((a4 & 0xFFFFFFFFFFFFC000) != 0)
  {
    BOOL v5 = 0;
    if (a4 >= v11 + 2136) {
      BOOL v5 = a4 < (a4 & 0xFFFFFFFFFFFFC000)
    }
              + 48 * *(unsigned int *)((char *)dword_10 + (a4 & 0xFFFFFFFFFFFFC000))
              + 2136;
    char v6 = v5;
  }
  if ((v6 & 1) == 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0x66F98);
  }
  if (a4 < v11 + 2136)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" fai"
                           "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                           "e_internal.h:278)";
    __break(1u);
    JUMPOUT(0x66FFCLL);
  }
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a4 - (a4 & 0xFFFFFFFFFFFFC000) - 2136) >> 4)) >= *(unsigned int *)((char *)dword_10 + (a4 & 0xFFFFFFFFFFFFC000)))
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fail"
                           "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline"
                           "_internal.h:280)";
    __break(1u);
    JUMPOUT(0x67064);
  }
  return *(uint64_t *)((char *)&stru_20.filesize + (a4 & 0xFFFFFFFFFFFFC000))
       + ((unint64_t)(-1431655765 * ((uint64_t)(a4 - v11 - 2136) >> 4)) << 14);
}

uint64_t _xzm_xzone_fresh_chunk_init(uint64_t result, uint64_t a2, char a3)
{
  if (*(unsigned __int8 *)(a2 + 33) != *(unsigned __int8 *)(result + 72))
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_xzone_idx == xz->xz_idx\" failed (/Library/Ca"
                           "ches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:828)";
    __break(1u);
    JUMPOUT(0x670E0);
  }
  *(unsigned char *)(a2 + 32) &= ~0x40u;
  if (a3 != 2)
  {
    if (a3 != 5)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: Unexpected chunk kind";
      __break(1u);
      JUMPOUT(0x67328);
    }
    int v4 = *(unsigned char *)(a2 + 32) & 0xF;
    if (v4 == 2)
    {
      if ((*(_DWORD *)a2 & 0x7FF) != 0x7FE)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_atomic_meta.xca_alloc_head == XZM_FREE_MA"
                               "DVISED\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../x"
                               "zone/xzone_inline_internal.h:809)";
        __break(1u);
        JUMPOUT(0x6719CLL);
      }
      if (((*(_DWORD *)a2 >> 11) & 0x7FF) != 0)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_atomic_meta.xca_free_count == 0\" failed "
                               "(/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                               "e_internal.h:810)";
        __break(1u);
        JUMPOUT(0x671D4);
      }
    }
    else
    {
      if (v4 != 5)
      {
        uint64_t v3 = *(unsigned char *)(a2 + 32) & 0xF;
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
        qword_C0148 = v3;
        __break(1u);
        JUMPOUT(0x672FCLL);
      }
      *(_DWORD *)a2 |= (1 << *(_DWORD *)(result + 68)) - 1;
      *(_DWORD *)(a2 + 4) = 0;
    }
  }
  return result;
}

void _xzm_xzone_upgrade_small_slot_config(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  *(_DWORD *)(a3 + 20) = 0;
  if (a4)
  {
    if (a4 == 1)
    {
      unsigned __int8 v20 = ncpuclusters;
      goto LABEL_7;
    }
    if (a4 == 2)
    {
      unsigned __int8 v20 = logical_ncpus;
      goto LABEL_7;
    }
  }
  unsigned __int8 v20 = 1;
LABEL_7:
  if (v20 >= 2u)
  {
    int v4 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    int v5 = v4;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a3 + 8), (unsigned int *)&v5, 0, memory_order_release, memory_order_relaxed);
    if (v5 != v4) {
      os_unfair_lock_unlock((os_unfair_lock_t)(a3 + 8));
    }
    for (unsigned __int8 i = 0; i < (int)v20; ++i)
    {
      unint64_t v14 = *(void *)(a1 + 224)
          + 32 * (i * *(unsigned __int8 *)(a1 + 210) + (unint64_t)*(unsigned __int8 *)(a2 + 72));
      if (v14 != a3)
      {
        int v6 = 0;
        atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v14 + 8), (unsigned int *)&v6, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
        if (v6) {
          os_unfair_lock_lock_with_options();
        }
        *(_DWORD *)(v14 + 20) = 0;
        int v7 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
        int v8 = v7;
        atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v14 + 8), (unsigned int *)&v8, 0, memory_order_release, memory_order_relaxed);
        if (v8 != v7) {
          os_unfair_lock_unlock((os_unfair_lock_t)(v14 + 8));
        }
      }
    }
    int v9 = 0;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a3 + 8), (unsigned int *)&v9, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
    if (v9) {
      os_unfair_lock_lock_with_options();
    }
  }
  int v10 = 0;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a2 + 24), (unsigned int *)&v10, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
  if (v10) {
    os_unfair_lock_lock_with_options();
  }
  if (*(unsigned __int8 *)(a2 + 77) == a4)
  {
    int v13 = *(unsigned __int8 *)(a2 + 77);
    if (*(unsigned char *)(a2 + 77))
    {
      if (v13 != 1)
      {
        if (v13 != 2)
        {
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: Invalid xzone slot config";
          __break(1u);
          JUMPOUT(0x67994);
        }
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: Can't upgrade from XZM_SLOT_CPU";
        __break(1u);
        JUMPOUT(0x67970);
      }
      *(unsigned char *)(a2 + 77) = 2;
    }
    else if (ncpuclusters < 2)
    {
      *(unsigned char *)(a2 + 77) = 2;
    }
    else
    {
      *(unsigned char *)(a2 + 77) = 1;
    }
    if (*(unsigned __int8 *)(a2 + 77) > (*(unsigned char *)(a1 + 240) & 3))
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"xz->xz_slot_config <= zone->xzz_max_slot_config\" fail"
                             "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2030)";
      __break(1u);
      JUMPOUT(0x679D8);
    }
  }
  int v11 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  int v12 = v11;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a2 + 24), (unsigned int *)&v12, 0, memory_order_release, memory_order_relaxed);
  if (v12 != v11) {
    os_unfair_lock_unlock((os_unfair_lock_t)(a2 + 24));
  }
}

unint64_t _xzm_xzone_small_chunk_alloc(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = a1;
  uint64_t v21 = a2;
  unint64_t v20 = 0;
  if (*(void *)(a2 + 16))
  {
    uint64_t v25 = v21 + 24;
    uint64_t v34 = v21 + 24;
    int v33 = 327680;
    unsigned int v32 = 0;
    uint64_t v35 = 3;
    uint64_t v36 = 3;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    unsigned int v32 = *(void *)(StatusReg + 24);
    int v31 = 0;
    unsigned int v30 = v32;
    unsigned int v29 = v32;
    int v2 = 0;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v21 + 24), (unsigned int *)&v2, v32, memory_order_acquire, memory_order_acquire);
    if (v2) {
      int v31 = v2;
    }
    BOOL v28 = v2 == 0;
    if (v2) {
      os_unfair_lock_lock_with_options();
    }
    unint64_t v20 = *(void *)(v21 + 16);
    if (v20)
    {
      if (*(void *)(v20 + 16)) {
        *(void *)(*(void *)(v20 + 16) + 24) = *(void *)(v20 + 24);
      }
      **(void **)(v20 + 24) = *(void *)(v20 + 16);
      *(void *)(v20 + 16) = -1;
      *(void *)(v20 + 24) = -1;
    }
    uint64_t v27 = v21 + 24;
    os_unfair_lock_t v53 = (os_unfair_lock_t)(v21 + 24);
    int v52 = 0;
    uint64_t v54 = 3;
    uint64_t v55 = 3;
    unint64_t v56 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    int v52 = *(void *)(v56 + 24);
    int v51 = 0;
    int v50 = v52;
    int v49 = 0;
    int v3 = v52;
    int v4 = v52;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v21 + 24), (unsigned int *)&v4, 0, memory_order_release, memory_order_relaxed);
    if (v4 != v3) {
      int v50 = v4;
    }
    BOOL v48 = v4 == v52;
    if (v4 != v52) {
      os_unfair_lock_unlock(v53);
    }
  }
  if (!v20)
  {
    char v19 = 5;
    uint64_t v18 = 0x10000;
    int v17 = 4;
    char v16 = 0;
    char v15 = 0;
    uint64_t v14 = 0;
    unint64_t v20 = xzm_segment_group_alloc_chunk(*(unsigned __int8 **)(v21 + 40), 5u, (unsigned __int8 *)(v21 + 79), 4u, &v14, 0, 0, 0);
    if (!v20)
    {
      BOOL v11 = 1;
      if (&v14) {
        BOOL v11 = v14 == 0;
      }
      if (!v11)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!list || !SLIST_FIRST(list)\" failed (/Library/Cache"
                               "s/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:1829)";
        __break(1u);
        JUMPOUT(0x67E04);
      }
      return 0;
    }
    *(unsigned char *)(v20 + 33) = *(unsigned char *)(v21 + 72);
    if (v14)
    {
      uint64_t v12 = 0;
      uint64_t v24 = v21 + 24;
      uint64_t v44 = v21 + 24;
      int v43 = 327680;
      unsigned int v42 = 0;
      uint64_t v45 = 3;
      uint64_t v46 = 3;
      unint64_t v47 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      unsigned int v42 = *(void *)(v47 + 24);
      int v41 = 0;
      unsigned int v40 = v42;
      unsigned int v39 = v42;
      int v5 = 0;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v21 + 24), (unsigned int *)&v5, v42, memory_order_acquire, memory_order_acquire);
      if (v5) {
        int v41 = v5;
      }
      BOOL v38 = v5 == 0;
      if (v5) {
        os_unfair_lock_lock_with_options();
      }
      for (uint64_t i = v14; ; uint64_t i = v12)
      {
        char v10 = 0;
        if (i)
        {
          uint64_t v12 = *(void *)(i + 16);
          char v10 = 1;
        }
        if ((v10 & 1) == 0) {
          break;
        }
        uint64_t v14 = *(void *)(v14 + 16);
        *(unsigned char *)(i + 33) = *(unsigned char *)(v21 + 72);
        *(unsigned char *)(i + 32) |= 0x40u;
        uint64_t v6 = *(void *)(v21 + 16);
        *(void *)(i + 16) = v6;
        if (v6) {
          *(void *)(*(void *)(v21 + 16) + 24) = i + 16;
        }
        *(void *)(v21 + 16) = i;
        *(void *)(i + 24) = v21 + 16;
      }
      uint64_t v26 = v21 + 24;
      os_unfair_lock_t v62 = (os_unfair_lock_t)(v21 + 24);
      int v61 = 0;
      uint64_t v63 = 3;
      uint64_t v64 = 3;
      unint64_t v65 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      int v61 = *(void *)(v65 + 24);
      int v60 = 0;
      int v59 = v61;
      int v58 = 0;
      int v7 = v61;
      int v8 = v61;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v21 + 24), (unsigned int *)&v8, 0, memory_order_release, memory_order_relaxed);
      if (v8 != v7) {
        int v59 = v8;
      }
      BOOL v57 = v8 == v7;
      if (v8 != v7) {
        os_unfair_lock_unlock(v62);
      }
    }
  }
  if (!v20)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk\" failed (/Library/Caches/com.apple.xbs/Sources/li"
                           "bmalloc_driverkit/src/xzone/xzone_malloc.c:1850)";
    __break(1u);
    JUMPOUT(0x680E8);
  }
  _xzm_xzone_small_chunk_init(v21, v20);
  return v20;
}

unint64_t _xzm_xzone_alloc_from_chunk(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4, double a5, float a6)
{
  uint64_t v41 = a1;
  uint64_t v40 = a2;
  uint64_t v39 = a3;
  BOOL v38 = a4;
  uint64_t v68 = a1;
  uint64_t v67 = a2;
  uint64_t v66 = a3;
  int v30 = *(unsigned char *)(a3 + 32) & 0xF;
  if (v30 == 2)
  {
    BOOL v29 = 0;
    if (((*(_DWORD *)v66 >> 11) & 0x7FF) == 0)
    {
      BOOL v29 = 0;
      if ((~*(_DWORD *)v66 & 0x7FF) != 0) {
        BOOL v29 = (*(_DWORD *)v66 & 0x7FF) != 2046;
      }
    }
    BOOL v69 = v29;
  }
  else
  {
    if (v30 != 5)
    {
      uint64_t v65 = 0;
      uint64_t v6 = *(unsigned char *)(v66 + 32) & 0xF;
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
      qword_C0148 = v6;
      __break(1u);
      JUMPOUT(0x6824CLL);
    }
    BOOL v69 = *(_DWORD *)(v66 + 4) == *(_DWORD *)(v67 + 68);
  }
  if (v69)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!_xzm_chunk_is_full(zone, xz, chunk)\" failed (/Library/"
                           "Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:1896)";
    __break(1u);
    JUMPOUT(0x6827CLL);
  }
  *BOOL v38 = 0;
  unint64_t v37 = 0;
  unsigned int v36 = -1;
  unint64_t v35 = 0;
  uint64_t v47 = v41;
  uint64_t v46 = v39;
  uint64_t v45 = 0;
  uint64_t v49 = v41;
  unint64_t v48 = v39;
  uint64_t v52 = v41;
  unint64_t v51 = v39;
  unint64_t v50 = v39 & 0xFFFFFFFFFFFFC000;
  char v28 = 1;
  if ((v39 & 0xFFFFFFFFFFFFC000) != 0)
  {
    BOOL v27 = 0;
    if (v51 >= v50 + 2136) {
      BOOL v27 = v51 < v50 + 48 * *(unsigned int *)(v50 + 16) + 2136;
    }
    char v28 = v27;
  }
  if ((v28 & 1) == 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0x68460);
  }
  unint64_t v54 = v50;
  unint64_t v53 = v48;
  unint64_t v59 = v50;
  unint64_t v58 = v48;
  if (v48 < v50 + 2136)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" fai"
                           "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                           "e_internal.h:278)";
    __break(1u);
    JUMPOUT(0x684C4);
  }
  int64_t v57 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v58 - v59 - 2136) >> 4);
  if (v57 >= *(unsigned int *)(v59 + 16))
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fail"
                           "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline"
                           "_internal.h:280)";
    __break(1u);
    JUMPOUT(0x6852CLL);
  }
  unint64_t v56 = v50;
  int v55 = v57;
  unint64_t v35 = *(void *)(v50 + 80) + ((unint64_t)v57 << 14);
  unint64_t v34 = 0;
  uint64_t v44 = v41;
  unint64_t v43 = v39;
  unint64_t v42 = v39 & 0xFFFFFFFFFFFFC000;
  char v26 = 1;
  if ((v39 & 0xFFFFFFFFFFFFC000) != 0)
  {
    BOOL v25 = 0;
    if (v43 >= v42 + 2136) {
      BOOL v25 = v43 < v42 + 48 * *(unsigned int *)(v42 + 16) + 2136;
    }
    char v26 = v25;
  }
  if ((v26 & 1) == 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0x68620);
  }
  unint64_t v34 = v42;
  unint64_t v33 = 0;
  uint64_t v72 = v41;
  uint64_t v71 = v39;
  int v24 = *(unsigned char *)(v39 + 32) & 0xF;
  if (v24 == 2 || v24 == 5)
  {
    unint64_t v73 = *(void *)(*(void *)(v72 + 216) + 88 * *(unsigned __int8 *)(v71 + 33) + 48);
  }
  else
  {
    if ((v24 - 6) >= 2)
    {
      uint64_t v70 = 0;
      uint64_t v7 = *(unsigned char *)(v71 + 32) & 0xF;
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: asking for size of chunk with invalid kind";
      qword_C0148 = v7;
      __break(1u);
      JUMPOUT(0x68710);
    }
    unint64_t v73 = (unint64_t)*(unsigned int *)(v71 + 40) << 14;
  }
  unint64_t v33 = v73;
  if ((*(unsigned char *)(v39 + 32) & 0xF) != 5)
  {
    uint64_t v18 = *(unsigned char *)(v39 + 32) & 0xF;
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: attempting to allocate from chunk of bad kind";
    qword_C0148 = v18;
    __break(1u);
    JUMPOUT(0x68C8CLL);
  }
  uint64_t v63 = v41;
  uint64_t v62 = v40;
  uint64_t v61 = v39;
  int v23 = *(unsigned char *)(v39 + 32) & 0xF;
  if (v23 == 2)
  {
    BOOL v22 = 1;
    if (((*(_DWORD *)v61 >> 11) & 0x7FF) != *(_DWORD *)(v62 + 68))
    {
      BOOL v22 = 1;
      if ((~*(_DWORD *)v61 & 0x7FF) != 0) {
        BOOL v22 = (*(_DWORD *)v61 & 0x7FF) == 2046;
      }
    }
    BOOL v64 = v22;
  }
  else
  {
    if (v23 != 5)
    {
      uint64_t v60 = 0;
      uint64_t v8 = *(unsigned char *)(v61 + 32) & 0xF;
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
      qword_C0148 = v8;
      __break(1u);
      JUMPOUT(0x68848);
    }
    BOOL v64 = *(_DWORD *)(v61 + 4) == 0;
  }
  if (!v64 && (v33 & 0x3FFF) != 0)
  {
    unsigned int v32 = 0;
    unint64_t dirtiest_slice = _xzm_chunk_find_dirtiest_slice(v41, v39, &v32, a5, a6);
    if (dirtiest_slice)
    {
      unsigned int v11 = __clz(__rbit32(v32));
      if (v32) {
        unsigned int v12 = v11 + 1;
      }
      else {
        unsigned int v12 = 0;
      }
      unsigned int v36 = v12 - 1;
      if (v32 && ((v32 - 1) & v32) != 0)
      {
        unint64_t v13 = v35 + v36 + *(void *)(v40 + 48);
        unint64_t v76 = v34;
        unint64_t v75 = v13;
        unsigned int v74 = 0;
        unint64_t v80 = v34;
        unint64_t v79 = v13;
        int64_t v78 = 0;
        unint64_t v84 = v34;
        unint64_t v83 = v13;
        int64_t v82 = 0;
        unint64_t v87 = v34;
        unint64_t v89 = v34;
        int v88 = 0;
        int64_t v82 = v13 - *(void *)(v34 + 80);
        int64_t v81 = 0;
        unint64_t v97 = v34;
        int v96 = 0;
        unint64_t v98 = v34;
        int v96 = *(_DWORD *)(v34 + 12);
        if ((unint64_t)v96 << 14)
        {
          unint64_t v95 = v84;
          unsigned int v94 = 0;
          unint64_t v99 = v84;
          unsigned int v94 = *(_DWORD *)(v84 + 12);
          unint64_t v93 = v84;
          int v92 = 0;
          unint64_t v100 = v84;
          int v92 = *(_DWORD *)(v84 + 12);
          unint64_t v21 = ((unint64_t)v94 << 14) - ((unint64_t)v92 << 14) + 0x400000;
        }
        else
        {
          unint64_t v91 = v84;
          unsigned int v90 = 0;
          unint64_t v101 = v84;
          unsigned int v90 = *(_DWORD *)(v84 + 12);
          unint64_t v21 = (unint64_t)v90 << 14;
        }
        int64_t v81 = v21;
        BOOL v20 = 0;
        if ((v82 & 0x8000000000000000) == 0) {
          BOOL v20 = v82 < v81;
        }
        if (!v20)
        {
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"diff >= 0 && diff < (ptrdiff_t)rounded_size\" fail"
                                 "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_"
                                 "inline_internal.h:436)";
          __break(1u);
          JUMPOUT(0x68ACCLL);
        }
        int64_t v78 = v82;
        unint64_t v86 = v80;
        int64_t v85 = v82;
        unsigned int v74 = (unint64_t)v82 >> 14;
        if (v74 >= *(_DWORD *)(v76 + 16)) {
          unint64_t v77 = 0;
        }
        else {
          unint64_t v77 = v76 + 48 * v74 + 2136;
        }
        if (v77 < dirtiest_slice)
        {
          unsigned int v14 = __clz(__rbit32(v32 & ~(1 << v36)));
          if ((v32 & ~(1 << v36)) != 0) {
            unsigned int v15 = v14 + 1;
          }
          else {
            unsigned int v15 = 0;
          }
          unsigned int v36 = v15 - 1;
        }
      }
    }
    else
    {
      unsigned int v16 = __clz(__rbit32(*(_DWORD *)v39));
      if (*(_DWORD *)v39) {
        unsigned int v17 = v16 + 1;
      }
      else {
        unsigned int v17 = 0;
      }
      unsigned int v36 = v17 - 1;
    }
  }
  else
  {
    unsigned int v9 = __clz(__rbit32(*(_DWORD *)v39));
    if (*(_DWORD *)v39) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 0;
    }
    unsigned int v36 = v10 - 1;
  }
  if (v36 > *(_DWORD *)(v40 + 68))
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"block_index <= xz->xz_chunk_capacity\" failed (/Library/"
                           "Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:1947)";
    __break(1u);
    JUMPOUT(0x68C04);
  }
  unint64_t v37 = v35 + v36 * *(void *)(v40 + 48);
  *(_DWORD *)v39 &= ~(1 << v36);
  ++*(_DWORD *)(v39 + 4);
  return v37;
}

uint64_t _xzm_xzone_small_chunk_init(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a2)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_free == 0\" failed (/Library/Caches/com.apple"
                           ".xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:1785)";
    __break(1u);
    JUMPOUT(0x68CFCLL);
  }
  if (*(_DWORD *)(a2 + 4))
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_used == 0\" failed (/Library/Caches/com.apple"
                           ".xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:1786)";
    __break(1u);
    JUMPOUT(0x68D30);
  }
  if (*(_WORD *)(a2 + 34))
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_mzone_idx == XZM_MZONE_INDEX_INVALID\" failed"
                           " (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:1787)";
    __break(1u);
    JUMPOUT(0x68D64);
  }
  uint64_t result = _xzm_xzone_fresh_chunk_init(a1, a2, 5);
  *(_WORD *)(a2 + 34) = *(_WORD *)(a1 + 74);
  return result;
}

uint64_t _xzm_chunk_find_dirtiest_slice(uint64_t a1, uint64_t a2, unsigned int *a3, double a4, float a5)
{
  if ((*(unsigned char *)(a2 + 32) & 0xF) == 2) {
    unsigned int v15 = 1;
  }
  else {
    unsigned int v15 = *(_DWORD *)(a2 + 40);
  }
  float v19 = NAN;
  uint64_t v18 = 0;
  for (unsigned int i = 0; i < v15; ++i)
  {
    unint64_t v23 = a2 + 48 * i;
    if ((*(unsigned char *)(v23 + 32) & 0xF) == 4)
    {
      unint64_t v26 = v23 - *(unsigned int *)(v23 + 36);
      if (v26 < (v23 & 0xFFFFFFFFFFFFC000 | 0x858))
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"out_slice >= ((xzm_segment_t)((uintptr_t)slice & ~(X"
                               "ZM_METAPOOL_SEGMENT_BLOCK_SIZE - 1)))->xzs_slices\" failed (/Library/Caches/com.apple.xbs"
                               "/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:582)";
        __break(1u);
        JUMPOUT(0x68F28);
      }
      int v14 = *(unsigned char *)(v26 + 32) & 0xF;
      if ((v14 - 1) < 2)
      {
        BOOL v32 = v26 == v23;
      }
      else if (v14 == 3 || (v14 - 5) < 4)
      {
        if (v23 < v26)
        {
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice >= span\" failed (/Library/Caches/com.apple."
                                 "xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:560)";
          __break(1u);
          JUMPOUT(0x68FD8);
        }
        BOOL v32 = v23 < v26 + 48 * *(unsigned int *)(v26 + 40);
      }
      else
      {
        BOOL v32 = 0;
      }
      if (v32) {
        unint64_t v27 = v23 - *(unsigned int *)(v23 + 36);
      }
      else {
        unint64_t v27 = a2 + 48 * i;
      }
    }
    else
    {
      unint64_t v27 = a2 + 48 * i;
    }
    if ((*(unsigned char *)(v27 + 32) & 0xF) != 5)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == XZM_SLICE_KIND_SMALL_CHUN"
                             "K\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xz"
                             "one_inline_internal.h:1105)";
      __break(1u);
      JUMPOUT(0x69094);
    }
    uint64_t v22 = *(void *)(a1 + 216) + 88 * *(unsigned __int8 *)(v27 + 33);
    unint64_t v25 = v23 & 0xFFFFFFFFFFFFC000;
    char v13 = 1;
    if ((v23 & 0xFFFFFFFFFFFFC000) != 0)
    {
      BOOL v12 = 0;
      if (v23 >= v25 + 2136) {
        BOOL v12 = v23 < (v23 & 0xFFFFFFFFFFFFC000)
      }
                  + 48 * *(unsigned int *)((char *)&dword_10 + (v23 & 0xFFFFFFFFFFFFC000))
                  + 2136;
      char v13 = v12;
    }
    if ((v13 & 1) == 0)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < ("
                             "segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple."
                             "xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
      __break(1u);
      JUMPOUT(0x691B0);
    }
    if (v23 < v25 + 2136)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" f"
                             "ailed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_i"
                             "nline_internal.h:278)";
      __break(1u);
      JUMPOUT(0x69218);
    }
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - v25 - 2136) >> 4)) >= *(unsigned int *)((char *)&dword_10
                                                                                                 + (v23 & 0xFFFFFFFFFFFFC000)))
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fa"
                             "iled (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_in"
                             "line_internal.h:280)";
      __break(1u);
      JUMPOUT(0x69284);
    }
    unint64_t v33 = v27 & 0xFFFFFFFFFFFFC000;
    char v11 = 1;
    if ((v27 & 0xFFFFFFFFFFFFC000) != 0)
    {
      BOOL v10 = 0;
      if (v27 >= v33 + 2136) {
        BOOL v10 = v27 < (v27 & 0xFFFFFFFFFFFFC000)
      }
                  + 48 * *(unsigned int *)((char *)&dword_10 + (v27 & 0xFFFFFFFFFFFFC000))
                  + 2136;
      char v11 = v10;
    }
    if ((v11 & 1) == 0)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < ("
                             "segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple."
                             "xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
      __break(1u);
      JUMPOUT(0x694E0);
    }
    if (v27 < v33 + 2136)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" f"
                             "ailed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_i"
                             "nline_internal.h:278)";
      __break(1u);
      JUMPOUT(0x69548);
    }
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - v33 - 2136) >> 4)) >= *(unsigned int *)((char *)&dword_10
                                                                                                 + (v27 & 0xFFFFFFFFFFFFC000)))
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fa"
                             "iled (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_in"
                             "line_internal.h:280)";
      __break(1u);
      JUMPOUT(0x695B4);
    }
    int v9 = *(unsigned char *)(v27 + 32) & 0xF;
    if (v9 == 2 || v9 == 5)
    {
      unint64_t v31 = *(void *)(*(void *)(a1 + 216) + 88 * *(unsigned __int8 *)(v27 + 33) + 48);
    }
    else
    {
      if ((v9 - 6) >= 2)
      {
        uint64_t v30 = *(unsigned char *)(v27 + 32) & 0xF;
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: asking for size of chunk with invalid kind";
        qword_C0148 = v30;
        __break(1u);
        JUMPOUT(0x696E8);
      }
      unint64_t v31 = (unint64_t)*(unsigned int *)(v27 + 40) << 14;
    }
    unsigned int v21 = (*(_DWORD *)((char *)&stru_20.filesize + (v23 & 0xFFFFFFFFFFFFC000))
         - 1431650304 * ((uint64_t)(v23 - v25 - 2136) >> 4)
         - (*(_DWORD *)((char *)&stru_20.filesize + (v27 & 0xFFFFFFFFFFFFC000))
          - 1431650304 * ((uint64_t)(v27 - v33 - 2136) >> 4)))
        / v31;
    if (v21 == *(_DWORD *)(v22 + 68))
    {
      int v24 = 0;
    }
    else
    {
      unint64_t v34 = v27 & 0xFFFFFFFFFFFFC000;
      char v8 = 1;
      if ((v27 & 0xFFFFFFFFFFFFC000) != 0)
      {
        BOOL v7 = 0;
        if (v27 >= v34 + 2136) {
          BOOL v7 = v27 < (v27 & 0xFFFFFFFFFFFFC000)
        }
                   + 48 * *(unsigned int *)((char *)&dword_10 + (v27 & 0xFFFFFFFFFFFFC000))
                   + 2136;
        char v8 = v7;
      }
      if ((v8 & 1) == 0)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice <"
                               " (segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.ap"
                               "ple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
        __break(1u);
        JUMPOUT(0x69944);
      }
      if (v27 < v34 + 2136)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\""
                               " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzo"
                               "ne_inline_internal.h:278)";
        __break(1u);
        JUMPOUT(0x699ACLL);
      }
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - v34 - 2136) >> 4)) >= *(unsigned int *)((char *)&dword_10 + (v27 & 0xFFFFFFFFFFFFC000)))
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" "
                               "failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzon"
                               "e_inline_internal.h:280)";
        __break(1u);
        JUMPOUT(0x69A18);
      }
      int v6 = *(unsigned char *)(v27 + 32) & 0xF;
      if (v6 == 2 || v6 == 5)
      {
        unint64_t v29 = *(void *)(*(void *)(a1 + 216) + 88 * *(unsigned __int8 *)(v27 + 33) + 48);
      }
      else
      {
        if ((v6 - 6) >= 2)
        {
          uint64_t v28 = *(unsigned char *)(v27 + 32) & 0xF;
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: asking for size of chunk with invalid kind";
          qword_C0148 = v28;
          __break(1u);
          JUMPOUT(0x69B4CLL);
        }
        unint64_t v29 = (unint64_t)*(unsigned int *)(v27 + 40) << 14;
      }
      unsigned int v20 = (*(_DWORD *)((char *)&stru_20.filesize + (v23 & 0xFFFFFFFFFFFFC000))
           - 1431650304 * ((uint64_t)(v23 - v25 - 2136) >> 4)
           + 0x3FFF
           - (*(_DWORD *)((char *)&stru_20.filesize + (v27 & 0xFFFFFFFFFFFFC000))
            - 1431650304 * ((uint64_t)(v27 - v34 - 2136) >> 4)))
          / v29;
      if (v20 == *(_DWORD *)(v22 + 68)) {
        --v20;
      }
      if (v21 > v20)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"first <= last\" failed (/Library/Caches/com.apple.xb"
                               "s/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:1129)";
        __break(1u);
        JUMPOUT(0x69BDCLL);
      }
      int v24 = (unint64_t)((1 << (v20 - v21 + 1)) - 1) << v21;
    }
    unsigned int v16 = *(_DWORD *)a2 & v24;
    if (v16)
    {
      if (v16 != v24)
      {
        LOWORD(a5) = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)v16));
        if (LODWORD(a5) < LODWORD(v19))
        {
          float v19 = a5;
          uint64_t v18 = a2 + 48 * i;
          *a3 = v16;
        }
      }
    }
  }
  return v18;
}

void _xzm_free_outlined(uint64_t a1, void *a2, char a3)
{
  if (*(void *)(a1 + 232) || !mfm_claimed_address((unint64_t)a2))
  {
    if ((a3 & 1) == 0)
    {
      qword_C0118 = (uint64_t)"BUG IN CLIENT OF LIBMALLOC: pointer being freed was not allocated";
      qword_C0148 = (uint64_t)a2;
      __break(1u);
      JUMPOUT(0x69D64);
    }
    find_zone_and_free(a2, 1);
  }
  else
  {
    mfm_free((uint64_t)a2);
  }
}

void _xzm_xzone_free_tiny(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t *a4)
{
  if (*(void *)(a2 + 48) <= 0x400uLL) {
    _platform_bzero();
  }
  uint64_t v21 = *(unsigned int *)(a2 + 68);
  unint64_t v26 = a3 & 0xFFFFFFFFFFFFC000;
  char v8 = 1;
  if ((a3 & 0xFFFFFFFFFFFFC000) != 0)
  {
    BOOL v7 = 0;
    if (a3 >= v26 + 2136) {
      BOOL v7 = a3 < (a3 & 0xFFFFFFFFFFFFC000)
    }
              + 48 * *(unsigned int *)((char *)dword_10 + (a3 & 0xFFFFFFFFFFFFC000))
              + 2136;
    char v8 = v7;
  }
  if ((v8 & 1) == 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0x69FB0);
  }
  if (a3 < v26 + 2136)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" fai"
                           "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                           "e_internal.h:278)";
    __break(1u);
    JUMPOUT(0x6A014);
  }
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3 - (a3 & 0xFFFFFFFFFFFFC000) - 2136) >> 4)) >= *(unsigned int *)((char *)dword_10 + (a3 & 0xFFFFFFFFFFFFC000)))
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fail"
                           "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline"
                           "_internal.h:280)";
    __break(1u);
    JUMPOUT(0x6A07CLL);
  }
  uint64_t v20 = *(uint64_t *)((char *)&stru_20.filesize + (a3 & 0xFFFFFFFFFFFFC000))
      + ((unint64_t)(-1431655765 * ((uint64_t)(a3 - v26 - 2136) >> 4)) << 14);
  unint64_t v4 = (unint64_t)a4 - v20 + 15;
  if ((uint64_t)((uint64_t)a4 - v20) >= 0) {
    unint64_t v4 = (unint64_t)a4 - v20;
  }
  __int16 v19 = v4 >> 4;
  *a4 = (unint64_t)a4 ^ *(void *)(a1 + 272);
  uint64_t v18 = 0;
  char v17 = 1;
  char v16 = 0;
  int v15 = 0;
  unint64_t v14 = 0;
  unint64_t v13 = *(void *)a3;
  for (char i = 0; ; char i = 0)
  {
    while ((v13 & 0x40000000) != 0)
    {
      _xzm_walk_lock_wait(a1);
      unint64_t v13 = *(void *)a3;
    }
    if (((v13 >> 11) & 0x7FF) + 1 != v21) {
      goto LABEL_27;
    }
    if ((v16 & 1) == 0)
    {
      if ((*(void *)a2 & 0x7FFFFFFFFFFFLL) == 0 && ((v13 >> 22) & 0x3F) != 0)
      {
        uint64_t v18 = mach_absolute_time();
        unint64_t v14 = *(void *)(a1 + 224)
            + 32
            * ((((v13 >> 22) & 0x3F) - 1) * *(unsigned __int8 *)(a1 + 210)
             + (unint64_t)*(unsigned __int8 *)(a2 + 72));
        if (v18 - *(void *)(v14 + 24) < *(void *)(a1 + 264)) {
          char v17 = 0;
        }
      }
      char v16 = 1;
    }
    if (v17)
    {
      unint64_t v12 = v13 & 0x7FFFFF0000000 | ((unint64_t)(unsigned __int16)((v13 >> 51) + 1) << 51) | 0x7FF;
    }
    else
    {
LABEL_27:
      a4[1] = v13 & 0x7FF | (((v13 >> 38) & 0x1FFF) << 11) & 0xFFFFFF;
      unint64_t v11 = v13 & 0x7FFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)((v13 >> 51) + 1) << 51);
      unint64_t v12 = v11 & 0xFFF8003FFFC00000 | v19 & 0x7FF | ((unint64_t)(((unsigned __int16)((v11 & 0xFFFFF800 | v19 & 0x7FF) >> 11)
                                                                          + 1) & 0x7FF) << 11) & 0xFFF8003FFFFFFFFFLL | (v13 >> 51 << 38);
      if (((v13 >> 11) & 0x7FF) == 0)
      {
        if (((v13 >> 22) & 0x3F) != 0)
        {
          if ((v13 & 0x10000000) != 0)
          {
            qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!old_meta.xca_on_partial_list\" failed (/Library"
                                   "/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:1726)";
            __break(1u);
            JUMPOUT(0x6A4D8);
          }
        }
        else
        {
          v12 |= 0x10000000uLL;
          char i = 1;
        }
      }
    }
    unint64_t v9 = v13;
    unint64_t v5 = v13;
    unint64_t v6 = v13;
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)a3, &v6, v12, memory_order_release, memory_order_relaxed);
    if (v6 != v5) {
      unint64_t v9 = v6;
    }
    unint64_t v13 = v9;
    if (v6 == v5) {
      break;
    }
    ++v15;
  }
  if (malloc_tracing_enabled) {
    kdebug_trace();
  }
  if (v18)
  {
    if (!v14)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"xas\" failed (/Library/Caches/com.apple.xbs/Sources/li"
                             "bmalloc_driverkit/src/xzone/xzone_malloc.c:1752)";
      __break(1u);
      JUMPOUT(0x6A62CLL);
    }
    *(void *)(v14 + 24) = v18;
  }
  if ((~v12 & 0x7FF) != 0)
  {
    if (i) {
      _xzm_chunk_list_push(a1, (atomic_ullong *)a2, a3, 0);
    }
  }
  else
  {
    _xzm_xzone_madvise_tiny_chunk(a1, a2, (atomic_ullong *)a3);
  }
}

void _xzm_xzone_free_block_to_small_chunk(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  char v41 = *(unsigned char *)(a3 + 12);
  while (1)
  {
    while (!v41)
    {
      int v4 = 0;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a3 + 8), (unsigned int *)&v4, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
      if (v4) {
        os_unfair_lock_lock_with_options();
      }
      char v41 = *(unsigned char *)(a3 + 12);
      if (!v41)
      {
        int v38 = *(unsigned char *)(a3 + 32) & 0xF;
        if (v38 == 2)
        {
          BOOL v37 = 0;
          if (((*(_DWORD *)a3 >> 11) & 0x7FF) == 0)
          {
            BOOL v37 = 0;
            if ((~*(_DWORD *)a3 & 0x7FF) != 0) {
              BOOL v37 = (*(_DWORD *)a3 & 0x7FF) != 2046;
            }
          }
          BOOL v49 = v37;
        }
        else
        {
          if (v38 != 5)
          {
            uint64_t v7 = *(unsigned char *)(a3 + 32) & 0xF;
            qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
            qword_C0148 = v7;
            __break(1u);
            JUMPOUT(0x6AA0CLL);
          }
          BOOL v49 = *(_DWORD *)(a3 + 4) == *(_DWORD *)(a2 + 68);
        }
        _xzm_xzone_free_to_chunk(a1, a3, a4);
        _xzm_xzone_chunk_madvise_free_slices(a1, a2, a3, a4);
        int v36 = *(unsigned char *)(a3 + 32) & 0xF;
        if (v36 == 2)
        {
          BOOL v35 = 1;
          if (((*(_DWORD *)a3 >> 11) & 0x7FF) != *(_DWORD *)(a2 + 68))
          {
            BOOL v35 = 1;
            if ((~*(_DWORD *)a3 & 0x7FF) != 0) {
              BOOL v35 = (*(_DWORD *)a3 & 0x7FF) == 2046;
            }
          }
          BOOL v47 = v35;
        }
        else
        {
          if (v36 != 5)
          {
            uint64_t v8 = *(unsigned char *)(a3 + 32) & 0xF;
            qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
            qword_C0148 = v8;
            __break(1u);
            JUMPOUT(0x6AB50);
          }
          BOOL v47 = *(_DWORD *)(a3 + 4) == 0;
        }
        if (v47)
        {
          if ((*(unsigned char *)(a3 + 32) & 0x20) == 0)
          {
            qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_enqueued\" failed (/Library"
                                   "/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2575)";
            __break(1u);
            JUMPOUT(0x6AB94);
          }
          int v9 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
          int v10 = v9;
          atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a3 + 8), (unsigned int *)&v10, 0, memory_order_release, memory_order_relaxed);
          if (v10 != v9) {
            os_unfair_lock_unlock((os_unfair_lock_t)(a3 + 8));
          }
          int v11 = 0;
          atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a2 + 24), (unsigned int *)&v11, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
          if (v11) {
            os_unfair_lock_lock_with_options();
          }
          if ((*(unsigned char *)(a3 + 32) & 0x20) != 0)
          {
            if (*(void *)(a3 + 16)) {
              *(void *)(*(void *)(a3 + 16) + 24) = *(void *)(a3 + 24);
            }
            **(void **)(a3 + 24) = *(void *)(a3 + 16);
            *(void *)(a3 + 16) = -1;
            *(void *)(a3 + 24) = -1;
            *(unsigned char *)(a3 + 32) &= ~0x20u;
          }
          int v12 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
          int v13 = v12;
          atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a2 + 24), (unsigned int *)&v13, 0, memory_order_release, memory_order_relaxed);
          if (v13 != v12) {
            os_unfair_lock_unlock((os_unfair_lock_t)(a2 + 24));
          }
LABEL_38:
          _xzm_xzone_chunk_free(a1, a2, a3);
          return;
        }
        if (v49)
        {
          int v14 = 0;
          atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a2 + 24), (unsigned int *)&v14, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
          if (v14) {
            os_unfair_lock_lock_with_options();
          }
          if (*(void *)(a3 + 16)) {
            *(void *)(*(void *)(a3 + 16) + 24) = *(void *)(a3 + 24);
          }
          **(void **)(a3 + 24) = *(void *)(a3 + 16);
          *(void *)(a3 + 16) = -1;
          *(void *)(a3 + 24) = -1;
          uint64_t v15 = *(void *)a2;
          *(void *)(a3 + 16) = *(void *)a2;
          if (v15) {
            *(void *)(*(void *)a2 + 24) = a3 + 16;
          }
          *(void *)a2 = a3;
          *(void *)(a3 + 24) = a2;
          *(unsigned char *)(a3 + 32) |= 0x20u;
          int v34 = *(unsigned char *)(a3 + 32) & 0xF;
          if (v34 == 2)
          {
            BOOL v33 = 0;
            if (((*(_DWORD *)a3 >> 11) & 0x7FF) == 0)
            {
              BOOL v33 = 0;
              if ((~*(_DWORD *)a3 & 0x7FF) != 0) {
                BOOL v33 = (*(_DWORD *)a3 & 0x7FF) != 2046;
              }
            }
            BOOL v48 = v33;
          }
          else
          {
            if (v34 != 5)
            {
              uint64_t v16 = *(unsigned char *)(a3 + 32) & 0xF;
              qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
              qword_C0148 = v16;
              __break(1u);
              JUMPOUT(0x6B13CLL);
            }
            BOOL v48 = *(_DWORD *)(a3 + 4) == *(_DWORD *)(a2 + 68);
          }
          if (v48)
          {
            qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!_xzm_chunk_is_full(zone, xz, chunk)\" failed (/"
                                   "Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2613)";
            __break(1u);
            JUMPOUT(0x6B16CLL);
          }
          int v17 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
          int v18 = v17;
          atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a2 + 24), (unsigned int *)&v18, 0, memory_order_release, memory_order_relaxed);
          if (v18 != v17) {
            os_unfair_lock_unlock((os_unfair_lock_t)(a2 + 24));
          }
          int v19 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
          int v20 = v19;
          atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a3 + 8), (unsigned int *)&v20, 0, memory_order_release, memory_order_relaxed);
          if (v20 != v19) {
            os_unfair_lock_unlock((os_unfair_lock_t)(a3 + 8));
          }
        }
        else
        {
          int v21 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
          int v22 = v21;
          atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a3 + 8), (unsigned int *)&v22, 0, memory_order_release, memory_order_relaxed);
          if (v22 != v21) {
            os_unfair_lock_unlock((os_unfair_lock_t)(a3 + 8));
          }
        }
        return;
      }
      int v5 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
      int v6 = v5;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a3 + 8), (unsigned int *)&v6, 0, memory_order_release, memory_order_relaxed);
      if (v6 != v5) {
        os_unfair_lock_unlock((os_unfair_lock_t)(a3 + 8));
      }
    }
    unint64_t v40 = *(void *)(a1 + 224)
        + 32
        * ((v41 - 1) * *(unsigned __int8 *)(a1 + 210)
         + (unint64_t)*(unsigned __int8 *)(a2 + 72));
    int v23 = 0;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v40 + 8), (unsigned int *)&v23, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
    if (v23) {
      os_unfair_lock_lock_with_options();
    }
    char v39 = v41;
    char v41 = *(unsigned char *)(a3 + 12);
    if (v41 == v39) {
      break;
    }
    int v24 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    int v25 = v24;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v40 + 8), (unsigned int *)&v25, 0, memory_order_release, memory_order_relaxed);
    if (v25 != v24) {
      os_unfair_lock_unlock((os_unfair_lock_t)(v40 + 8));
    }
  }
  _xzm_xzone_free_to_chunk(a1, a3, a4);
  _xzm_xzone_chunk_madvise_free_slices(a1, a2, a3, a4);
  int v32 = *(unsigned char *)(a3 + 32) & 0xF;
  if (v32 == 2)
  {
    BOOL v31 = 1;
    if (((*(_DWORD *)a3 >> 11) & 0x7FF) != *(_DWORD *)(a2 + 68))
    {
      BOOL v31 = 1;
      if ((~*(_DWORD *)a3 & 0x7FF) != 0) {
        BOOL v31 = (*(_DWORD *)a3 & 0x7FF) == 2046;
      }
    }
    BOOL v46 = v31;
  }
  else
  {
    if (v32 != 5)
    {
      uint64_t v26 = *(unsigned char *)(a3 + 32) & 0xF;
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
      qword_C0148 = v26;
      __break(1u);
      JUMPOUT(0x6B750);
    }
    BOOL v46 = *(_DWORD *)(a3 + 4) == 0;
  }
  if (v46)
  {
    *(void *)unint64_t v40 = 0;
    *(unsigned char *)(a3 + 12) = 0;
    int v27 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    int v28 = v27;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v40 + 8), (unsigned int *)&v28, 0, memory_order_release, memory_order_relaxed);
    if (v28 != v27) {
      os_unfair_lock_unlock((os_unfair_lock_t)(v40 + 8));
    }
    goto LABEL_38;
  }
  int v29 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  int v30 = v29;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v40 + 8), (unsigned int *)&v30, 0, memory_order_release, memory_order_relaxed);
  if (v30 != v29) {
    os_unfair_lock_unlock((os_unfair_lock_t)(v40 + 8));
  }
}

void _xzm_free_large_huge(uint64_t a1, unint64_t a2)
{
  int v2 = 0;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 280), (unsigned int *)&v2, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
  if (v2) {
    os_unfair_lock_lock_with_options();
  }
  *(_WORD *)(a2 + 34) = 0;
  if (*(void *)(a2 + 16)) {
    *(void *)(*(void *)(a2 + 16) + 24) = *(void *)(a2 + 24);
  }
  **(void **)(a2 + 24) = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = -1;
  *(void *)(a2 + 24) = -1;
  int v3 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  int v4 = v3;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 280), (unsigned int *)&v4, 0, memory_order_release, memory_order_relaxed);
  if (v4 != v3) {
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 280));
  }
  int v9 = (unsigned __int8 **)(a2 & 0xFFFFFFFFFFFFC000);
  char v6 = 1;
  if ((a2 & 0xFFFFFFFFFFFFC000) != 0)
  {
    BOOL v5 = 0;
    if (a2 >= (unint64_t)(v9 + 267)) {
      BOOL v5 = a2 < (a2 & 0xFFFFFFFFFFFFC000)
    }
              + 48 * *(unsigned int *)((char *)dword_10 + (a2 & 0xFFFFFFFFFFFFC000))
              + 2136;
    char v6 = v5;
  }
  if ((v6 & 1) == 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0x6BC40);
  }
  xzm_segment_group_free_chunk(*v9, a2, (*(void *)(a1 + 296) & 0x80) != 0);
}

void _xzm_xzone_madvise_tiny_chunk(uint64_t a1, uint64_t a2, atomic_ullong *a3)
{
  if (*(void *)(a1 + 232)) {
    uint64_t v5 = *(void *)(a1 + 232);
  }
  else {
    uint64_t v5 = a1;
  }
  if ((*(unsigned char *)(v5 + 328) & 4) != 0) {
    xzm_chunk_mark_free(a1, (unint64_t)a3);
  }
  else {
    xzm_segment_group_segment_madvise_chunk(*(void *)(a2 + 40), (unint64_t)a3);
  }
  uint64_t v8 = *(void *)a3;
  do
  {
    if ((~v8 & 0x7FF) != 0)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"old_meta.xca_alloc_head == XZM_FREE_MADVISING\" failed"
                             " (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:1584)";
      __break(1u);
      JUMPOUT(0x6BDA0);
    }
    unint64_t v7 = v8 & 0xFFFFFFFFFFFFF800 | 0x7FE;
    if ((v8 & 0x10000000) == 0) {
      unint64_t v7 = v8 & 0xFFFFFFFFDFFFF800 | 0x200007FE;
    }
    uint64_t v6 = v8;
    uint64_t v3 = v8;
    uint64_t v4 = v8;
    atomic_compare_exchange_strong_explicit(a3, (unint64_t *)&v4, v7, memory_order_release, memory_order_relaxed);
    if (v4 != v3) {
      uint64_t v6 = v4;
    }
    uint64_t v8 = v6;
  }
  while (v4 != v3);
  if (malloc_tracing_enabled) {
    kdebug_trace();
  }
  if ((v6 & 0x20000000) != 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!old_meta.xca_on_empty_list\" failed (/Library/Caches/co"
                           "m.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:1602)";
    __break(1u);
    JUMPOUT(0x6BEECLL);
  }
  if ((v6 & 0x10000000) == 0) {
    _xzm_chunk_list_push(a1, (atomic_ullong *)(a2 + 8), (uint64_t)a3, 0);
  }
}

uint64_t _xzm_xzone_free_to_chunk(uint64_t result, unint64_t a2, int a3)
{
  if ((*(unsigned char *)(a2 + 32) & 0xF) != 5)
  {
    uint64_t v4 = *(unsigned char *)(a2 + 32) & 0xF;
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: Attempting to free to non-chunk slice";
    qword_C0148 = v4;
    __break(1u);
    JUMPOUT(0x6C3BCLL);
  }
  uint64_t v8 = result;
  unint64_t v10 = a2 & 0xFFFFFFFFFFFFC000;
  char v7 = 1;
  if ((a2 & 0xFFFFFFFFFFFFC000) != 0)
  {
    uint64_t result = 0;
    BOOL v6 = 0;
    if (a2 >= v10 + 2136)
    {
      uint64_t result = a2 < (a2 & 0xFFFFFFFFFFFFC000)
                  + 48 * *(unsigned int *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFC000))
                  + 2136;
      BOOL v6 = a2 < (a2 & 0xFFFFFFFFFFFFC000)
              + 48 * *(unsigned int *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFC000))
              + 2136;
    }
    char v7 = v6;
  }
  if ((v7 & 1) == 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0x6C15CLL);
  }
  if (a2 < v10 + 2136)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" fai"
                           "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                           "e_internal.h:278)";
    __break(1u);
    JUMPOUT(0x6C1C0);
  }
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - (a2 & 0xFFFFFFFFFFFFC000) - 2136) >> 4)) >= *(unsigned int *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFC000)))
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fail"
                           "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline"
                           "_internal.h:280)";
    __break(1u);
    JUMPOUT(0x6C228);
  }
  int v5 = *(unsigned char *)(a2 + 32) & 0xF;
  if (v5 == 2 || v5 == 5)
  {
    uint64_t result = *(unsigned __int8 *)(a2 + 33);
    unint64_t v9 = *(void *)(*(void *)(v8 + 216) + 88 * result + 48);
  }
  else
  {
    if ((v5 - 6) >= 2)
    {
      uint64_t v3 = *(unsigned char *)(a2 + 32) & 0xF;
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: asking for size of chunk with invalid kind";
      qword_C0148 = v3;
      __break(1u);
      JUMPOUT(0x6C34CLL);
    }
    unint64_t v9 = (unint64_t)*(unsigned int *)(a2 + 40) << 14;
  }
  *(_DWORD *)a2 |= 1 << ((a3
                        - (*(_DWORD *)((char *)&stru_20.filesize + (a2 & 0xFFFFFFFFFFFFC000))
                         - 1431650304 * ((uint64_t)(a2 - v10 - 2136) >> 4)))
                       / v9);
  --*(_DWORD *)(a2 + 4);
  return result;
}

void _xzm_xzone_chunk_madvise_free_slices(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v26 = a1;
  uint64_t v25 = a2;
  unint64_t v24 = a3;
  uint64_t v23 = a4;
  if ((*(unsigned char *)(a3 + 32) & 0xF) != 5)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == XZM_SLICE_KIND_SMALL_CHUNK\""
                           " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2494)";
    __break(1u);
    JUMPOUT(0x6C438);
  }
  int v22 = 0;
  uint64_t v72 = v26;
  unint64_t v71 = v24;
  unint64_t v70 = 0;
  uint64_t v75 = v26;
  unint64_t v74 = v24;
  unint64_t v73 = v24 & 0xFFFFFFFFFFFFC000;
  char v17 = 1;
  if ((v24 & 0xFFFFFFFFFFFFC000) != 0)
  {
    BOOL v16 = 0;
    if (v74 >= v73 + 2136) {
      BOOL v16 = v74 < v73 + 48 * *(unsigned int *)(v73 + 16) + 2136;
    }
    char v17 = v16;
  }
  if ((v17 & 1) == 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0x6C51CLL);
  }
  unint64_t v70 = v73;
  int v22 = *(unsigned __int8 **)v73;
  if ((*(unsigned char *)(v24 + 32) & 0xF) == 5)
  {
    unint64_t v77 = v22;
    switch(*v22)
    {
      case 0u:
      case 2u:
        BOOL v78 = (*(unsigned char *)(*((void *)v77 + 3) + 328) & 4) != 0;
        break;
      case 1u:
      case 3u:
        BOOL v78 = (*(unsigned char *)(*((void *)v77 + 3) + 328) & 8) != 0;
        break;
      default:
        uint64_t v76 = 0;
        uint64_t v4 = *v77;
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: unknown segment group id";
        qword_C0148 = v4;
        __break(1u);
        JUMPOUT(0x6C600);
    }
    if (!v78)
    {
      unsigned int v21 = 0;
      unsigned int v20 = 0;
      uint64_t v29 = v26;
      unint64_t v28 = v24;
      unint64_t v27 = v24 & 0xFFFFFFFFFFFFC000;
      char v15 = 1;
      if ((v24 & 0xFFFFFFFFFFFFC000) != 0)
      {
        BOOL v14 = 0;
        if (v28 >= v27 + 2136) {
          BOOL v14 = v28 < v27 + 48 * *(unsigned int *)(v27 + 16) + 2136;
        }
        char v15 = v14;
      }
      if ((v15 & 1) == 0)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice <"
                               " (segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.ap"
                               "ple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
        __break(1u);
        JUMPOUT(0x6C6F0);
      }
      unint64_t v19 = v27;
      unint64_t v32 = v27;
      unint64_t v31 = v24;
      if (v24 < v27 + 2136)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\""
                               " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzo"
                               "ne_inline_internal.h:278)";
        __break(1u);
        JUMPOUT(0x6C74CLL);
      }
      int64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - v32 - 2136) >> 4);
      if (v30 >= *(unsigned int *)(v32 + 16))
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" "
                               "failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzon"
                               "e_inline_internal.h:280)";
        __break(1u);
        JUMPOUT(0x6C7B4);
      }
      unsigned int v18 = v30;
      uint64_t v42 = v26;
      unint64_t v41 = v24;
      uint64_t v40 = v23;
      uint64_t v49 = v26;
      unint64_t v48 = v24;
      uint64_t v47 = v23;
      uint64_t v54 = v26;
      unint64_t v53 = v24;
      uint64_t v52 = v23;
      unint64_t v51 = 0;
      uint64_t v57 = v26;
      unint64_t v56 = v24;
      uint64_t v55 = 0;
      uint64_t v59 = v26;
      unint64_t v58 = v24;
      uint64_t v62 = v26;
      unint64_t v61 = v24;
      unint64_t v60 = v24 & 0xFFFFFFFFFFFFC000;
      char v13 = 1;
      if ((v24 & 0xFFFFFFFFFFFFC000) != 0)
      {
        BOOL v12 = 0;
        if (v61 >= v60 + 2136) {
          BOOL v12 = v61 < v60 + 48 * *(unsigned int *)(v60 + 16) + 2136;
        }
        char v13 = v12;
      }
      if ((v13 & 1) == 0)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice <"
                               " (segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.ap"
                               "ple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
        __break(1u);
        JUMPOUT(0x6C9D4);
      }
      unint64_t v64 = v60;
      unint64_t v63 = v58;
      unint64_t v69 = v60;
      unint64_t v68 = v58;
      if (v58 < v60 + 2136)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\""
                               " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzo"
                               "ne_inline_internal.h:278)";
        __break(1u);
        JUMPOUT(0x6CA38);
      }
      int64_t v67 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v68 - v69 - 2136) >> 4);
      if (v67 >= *(unsigned int *)(v69 + 16))
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" "
                               "failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzon"
                               "e_inline_internal.h:280)";
        __break(1u);
        JUMPOUT(0x6CAA0);
      }
      unint64_t v66 = v60;
      int v65 = v67;
      unint64_t v51 = *(void *)(v60 + 80) + ((unint64_t)v67 << 14);
      int v50 = v52 - v51;
      uint64_t v45 = v42;
      unint64_t v44 = v41;
      int v11 = *(unsigned char *)(v41 + 32) & 0xF;
      if (v11 == 2 || v11 == 5)
      {
        unint64_t v46 = *(void *)(*(void *)(v45 + 216) + 88 * *(unsigned __int8 *)(v44 + 33) + 48);
      }
      else
      {
        if ((v11 - 6) >= 2)
        {
          uint64_t v43 = 0;
          uint64_t v5 = *(unsigned char *)(v44 + 32) & 0xF;
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: asking for size of chunk with invalid kind";
          qword_C0148 = v5;
          __break(1u);
          JUMPOUT(0x6CBC4);
        }
        unint64_t v46 = (unint64_t)*(unsigned int *)(v44 + 40) << 14;
      }
      uint64_t v35 = v26;
      unint64_t v34 = v24;
      int v10 = *(unsigned char *)(v24 + 32) & 0xF;
      if (v10 == 2 || v10 == 5)
      {
        unint64_t v36 = *(void *)(*(void *)(v35 + 216) + 88 * *(unsigned __int8 *)(v34 + 33) + 48);
      }
      else
      {
        if ((v10 - 6) >= 2)
        {
          uint64_t v33 = 0;
          uint64_t v6 = *(unsigned char *)(v34 + 32) & 0xF;
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: asking for size of chunk with invalid kind";
          qword_C0148 = v6;
          __break(1u);
          JUMPOUT(0x6CCBCLL);
        }
        unint64_t v36 = (unint64_t)*(unsigned int *)(v34 + 40) << 14;
      }
      int v7 = *(_DWORD *)(v25 + 68);
      unint64_t v93 = v24;
      unsigned int v92 = v30;
      int v91 = v7;
      unsigned int v90 = (v52 - v51) / v46;
      unint64_t v89 = v36;
      int v88 = &v21;
      unint64_t v87 = &v20;
      BOOL v9 = 0;
      if (v24) {
        BOOL v9 = (*(unsigned char *)(v93 + 32) & 0xF) == 5;
      }
      if (!v9)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk && chunk->xzc_bits.xzcb_kind == XZM_SLICE_KIND"
                               "_SMALL_CHUNK\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzon"
                               "e/../xzone/xzone_inline_internal.h:1003)";
        __break(1u);
        JUMPOUT(0x6CD60);
      }
      unsigned int v86 = 0;
      unsigned int v85 = 0;
      uint64_t v105 = 0;
      unsigned int v104 = v92;
      unsigned int v103 = v90;
      unint64_t v102 = v89;
      unint64_t v84 = v90 * v89 + ((unint64_t)v92 << 14);
      unint64_t v83 = v84 + v89 - 1;
      uint64_t v101 = 0;
      unint64_t v100 = v84;
      unsigned int v82 = v84 >> 14;
      uint64_t v99 = 0;
      unint64_t v98 = v83;
      unsigned int v81 = (v83 >> 14) + 1;
      unsigned int v80 = 0;
      uint64_t v113 = 0;
      unsigned int v112 = v92;
      unint64_t v111 = v89;
      unint64_t v110 = (unint64_t)v82 << 14;
      if (v110 < (unint64_t)v92 << 14)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"offset >= chunk_idx * XZM_SEGMENT_SLICE_SIZE\" faile"
                               "d (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inl"
                               "ine_internal.h:716)";
        __break(1u);
        JUMPOUT(0x6CE5CLL);
      }
      unsigned int v80 = (v110 - (v112 << 14)) / v111;
      unsigned int v79 = 0;
      uint64_t v109 = 0;
      unsigned int v108 = v92;
      unint64_t v107 = v89;
      unint64_t v106 = ((unint64_t)v81 << 14) - 1;
      if (v106 < (unint64_t)v92 << 14)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"offset >= chunk_idx * XZM_SEGMENT_SLICE_SIZE\" faile"
                               "d (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inl"
                               "ine_internal.h:716)";
        __break(1u);
        JUMPOUT(0x6CEE0);
      }
      unsigned int v79 = (v106 - (v108 << 14)) / v107;
      if (v79 == v91) {
        --v79;
      }
      uint64_t v125 = 0;
      unsigned __int8 v124 = (_DWORD *)v93;
      unsigned int v123 = v80;
      unsigned int v122 = v90;
      if ((*(unsigned char *)(v93 + 32) & 0xF) != 5)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == XZM_SLICE_KIND_SMALL_CH"
                               "UNK\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzon"
                               "e/xzone_inline_internal.h:929)";
        __break(1u);
        JUMPOUT(0x6CF7CLL);
      }
      if (v122 < v123)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"end >= start\" failed (/Library/Caches/com.apple.xbs"
                               "/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:930)";
        __break(1u);
        JUMPOUT(0x6CFB4);
      }
      unsigned int v121 = v122 - v123 + 1;
      if (v121 >= 0x21)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"span <= 32\" failed (/Library/Caches/com.apple.xbs/S"
                               "ources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:934)";
        __break(1u);
        JUMPOUT(0x6D004);
      }
      int v120 = (unint64_t)((1 << v121) - 1) << v123;
      if ((v120 & ~*v124) != 0)
      {
        uint64_t v97 = 0;
        unint64_t v96 = v84;
        unsigned int v86 = (v84 >> 14) + 1;
      }
      else
      {
        unsigned int v86 = v82;
      }
      if (v86 < v92)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"left >= chunk_idx\" failed (/Library/Caches/com.appl"
                               "e.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:1042)";
        __break(1u);
        JUMPOUT(0x6D0B0);
      }
      uint64_t v119 = 0;
      uint64_t v118 = (_DWORD *)v93;
      unsigned int v117 = v90;
      unsigned int v116 = v79;
      if ((*(unsigned char *)(v93 + 32) & 0xF) != 5)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == XZM_SLICE_KIND_SMALL_CH"
                               "UNK\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzon"
                               "e/xzone_inline_internal.h:929)";
        __break(1u);
        JUMPOUT(0x6D10CLL);
      }
      if (v116 < v117)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"end >= start\" failed (/Library/Caches/com.apple.xbs"
                               "/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:930)";
        __break(1u);
        JUMPOUT(0x6D144);
      }
      unsigned int v115 = v116 - v117 + 1;
      if (v115 >= 0x21)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"span <= 32\" failed (/Library/Caches/com.apple.xbs/S"
                               "ources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:934)";
        __break(1u);
        JUMPOUT(0x6D194);
      }
      int v114 = (unint64_t)((1 << v115) - 1) << v117;
      if ((v114 & ~*v118) != 0)
      {
        uint64_t v95 = 0;
        unint64_t v94 = v83;
        unsigned int v85 = v83 >> 14;
      }
      else
      {
        unsigned int v85 = v81;
      }
      if (v85 > v92 + *(_DWORD *)(v93 + 40))
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"right <= chunk_idx + chunk->xzcs_slice_count\" faile"
                               "d (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inl"
                               "ine_internal.h:1051)";
        __break(1u);
        JUMPOUT(0x6D248);
      }
      *int v88 = v86;
      if (v86 > v85) {
        unsigned int v8 = 0;
      }
      else {
        unsigned int v8 = v85 - v86;
      }
      *unint64_t v87 = v8;
      if (v20)
      {
        if (v21 < v18)
        {
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice_idx >= chunk_idx\" failed (/Library/Caches/c"
                                 "om.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2518)";
          __break(1u);
          JUMPOUT(0x6D2D8);
        }
        unint64_t v37 = v19;
        unint64_t v39 = v19;
        int v38 = 0;
        xzm_segment_group_segment_madvise_span((uint64_t)v22, (void *)(*(void *)(v19 + 80) + ((unint64_t)v21 << 14)), v20);
      }
    }
  }
}

void _xzm_xzone_chunk_free(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v17 = *(void *)(a2 + 40);
  *(_WORD *)(a3 + 34) = 0;
  if (*(unsigned char *)(a2 + 78))
  {
    if (*(void *)(a1 + 232)) {
      uint64_t v14 = *(void *)(a1 + 232);
    }
    else {
      uint64_t v14 = a1;
    }
    if ((*(unsigned char *)(v14 + 328) & 4) != 0)
    {
      unint64_t v20 = a3 & 0xFFFFFFFFFFFFC000;
      char v13 = 1;
      if ((a3 & 0xFFFFFFFFFFFFC000) != 0)
      {
        BOOL v12 = 0;
        if (a3 >= v20 + 2136) {
          BOOL v12 = a3 < (a3 & 0xFFFFFFFFFFFFC000)
        }
                   + 48 * *(unsigned int *)((char *)dword_10 + (a3 & 0xFFFFFFFFFFFFC000))
                   + 2136;
        char v13 = v12;
      }
      if ((v13 & 1) == 0)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice <"
                               " (segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.ap"
                               "ple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
        __break(1u);
        JUMPOUT(0x6D4ACLL);
      }
      if (a3 < v20 + 2136)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\""
                               " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzo"
                               "ne_inline_internal.h:278)";
        __break(1u);
        JUMPOUT(0x6D528);
      }
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3 - (a3 & 0xFFFFFFFFFFFFC000) - 2136) >> 4)) >= *(unsigned int *)((char *)dword_10 + (a3 & 0xFFFFFFFFFFFFC000)))
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" "
                               "failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzon"
                               "e_inline_internal.h:280)";
        __break(1u);
        JUMPOUT(0x6D590);
      }
      if (*(void *)((char *)&stru_20.maxprot
                     + (a3 & 0xFFFFFFFFFFFFC000)
                     + 0xFFFFFFFD55555558 * ((uint64_t)(a3 - v20 - 2136) >> 4)) == -1)
      {
        xzm_chunk_mark_free(a1, a3);
      }
      else
      {
        if ((*(unsigned char *)(a3 + 32) & 0xF) != 2)
        {
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == XZM_SLICE_KIND_TINY_C"
                                 "HUNK\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzon"
                                 "e_malloc.c:2402)";
          __break(1u);
          JUMPOUT(0x6D5F0);
        }
        if ((*(_DWORD *)a3 & 0x7FF) != 0x7FE)
        {
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_atomic_meta.xca_alloc_head == XZM_FREE_"
                                 "MADVISED\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/"
                                 "xzone_malloc.c:2404)";
          __break(1u);
          JUMPOUT(0x6D62CLL);
        }
      }
    }
    else
    {
      char v16 = 1;
      if ((*(unsigned char *)(a3 + 32) & 0xF) == 2)
      {
        if ((*(_DWORD *)a3 & 0x7FF) == 0x7FE)
        {
          char v16 = 0;
        }
        else
        {
          *(void *)a3 = *(void *)a3 & 0xFFFFFFFFFFFFF800 | 0x7FE;
          *(void *)a3 &= 0xFFFFFFFFFFC007FFLL;
        }
      }
      else
      {
        if ((*(unsigned char *)(a3 + 32) & 0xF) != 5)
        {
          uint64_t v3 = *(unsigned char *)(a3 + 32) & 0xF;
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: Unexpected chunk kind";
          qword_C0148 = v3;
          __break(1u);
          JUMPOUT(0x6D724);
        }
        char v16 = 0;
      }
      if (v16) {
        xzm_segment_group_segment_madvise_chunk(v17, a3);
      }
    }
    int v11 = *(unsigned char *)(a3 + 32) & 0xF;
    if (v11 == 2)
    {
      if ((*(_DWORD *)a3 & 0x7FF) != 0x7FE)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_atomic_meta.xca_alloc_head == XZM_FREE_MA"
                               "DVISED\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../x"
                               "zone/xzone_inline_internal.h:809)";
        __break(1u);
        JUMPOUT(0x6D7CCLL);
      }
      if (((*(_DWORD *)a3 >> 11) & 0x7FF) != 0)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_atomic_meta.xca_free_count == 0\" failed "
                               "(/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                               "e_internal.h:810)";
        __break(1u);
        JUMPOUT(0x6D804);
      }
    }
    else
    {
      if (v11 != 5)
      {
        uint64_t v4 = *(unsigned char *)(a3 + 32) & 0xF;
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
        qword_C0148 = v4;
        __break(1u);
        JUMPOUT(0x6D92CLL);
      }
      *(_DWORD *)a3 |= (1 << *(_DWORD *)(a2 + 68)) - 1;
      *(_DWORD *)(a3 + 4) = 0;
    }
    *(unsigned char *)(a3 + 32) &= ~0x10u;
    if ((*(unsigned char *)(a3 + 32) & 0xF) == 2)
    {
      *(void *)a3 &= ~0x10000000uLL;
      *(void *)a3 |= 0x20000000uLL;
      *(void *)a3 &= 0xFFFFFFFFF03FFFFFLL;
    }
    uint64_t v15 = *(void *)(v14 + 376) + 16 * *(unsigned __int8 *)(a2 + 72);
    int v5 = 0;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v15 + 8), (unsigned int *)&v5, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
    if (v5) {
      os_unfair_lock_lock_with_options();
    }
    uint64_t v6 = *(void *)v15;
    *(void *)(a3 + 16) = *(void *)v15;
    if (v6) {
      *(void *)(*(void *)v15 + 24) = a3 + 16;
    }
    *(void *)uint64_t v15 = a3;
    *(void *)(a3 + 24) = v15;
    int v7 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    int v8 = v7;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v15 + 8), (unsigned int *)&v8, 0, memory_order_release, memory_order_relaxed);
    if (v8 != v7) {
      os_unfair_lock_unlock((os_unfair_lock_t)(v15 + 8));
    }
  }
  else
  {
    int v10 = *(unsigned char *)(a3 + 32) & 0xF;
    if (v10 == 2)
    {
      if ((*(_DWORD *)a3 & 0x7FF) != 0x7FE)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_atomic_meta.xca_alloc_head == XZM_FREE_MA"
                               "DVISED\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../x"
                               "zone/xzone_inline_internal.h:809)";
        __break(1u);
        JUMPOUT(0x6DC10);
      }
      if (((*(_DWORD *)a3 >> 11) & 0x7FF) != 0)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_atomic_meta.xca_free_count == 0\" failed "
                               "(/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                               "e_internal.h:810)";
        __break(1u);
        JUMPOUT(0x6DC48);
      }
      *(void *)a3 &= 0xFFFFFFFFFFFFF800;
    }
    else
    {
      if (v10 != 5)
      {
        uint64_t v9 = *(unsigned char *)(a3 + 32) & 0xF;
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
        qword_C0148 = v9;
        __break(1u);
        JUMPOUT(0x6DD70);
      }
      *(_DWORD *)a3 = 0;
    }
    *(_DWORD *)(a3 + 4) = 0;
    *(unsigned char *)(a3 + 33) = 0;
    xzm_segment_group_free_chunk(*(unsigned __int8 **)(a2 + 40), a3, 0);
  }
}

uint64_t _xzm_ptr_size_outlined(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 232) || !mfm_claimed_address(a2)) {
    return 0;
  }
  else {
    return mfm_alloc_size(a2);
  }
}

void _xzm_do_lock_action(atomic_uint *a1, int a2)
{
  if (a2)
  {
    if (a2 == 1)
    {
      int v3 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
      int v4 = v3;
      atomic_compare_exchange_strong_explicit(a1, (unsigned int *)&v4, 0, memory_order_release, memory_order_relaxed);
      if (v4 != v3) {
        os_unfair_lock_unlock((os_unfair_lock_t)a1);
      }
    }
    else
    {
      if (a2 != 2)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: invalid xzm lock action";
        __break(1u);
        JUMPOUT(0x6E048);
      }
      *(_DWORD *)a1 = 0;
    }
  }
  else
  {
    int v2 = 0;
    atomic_compare_exchange_strong_explicit(a1, (unsigned int *)&v2, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
    if (v2) {
      os_unfair_lock_lock_with_options();
    }
  }
}

void _xzm_allocation_slots_do_lock_action(uint64_t a1, int a2)
{
  for (unsigned __int8 i = 1; i < (int)*(unsigned __int8 *)(a1 + 210); ++i)
  {
    if (*(void *)(*(void *)(a1 + 216) + 88 * i + 48) > 0x1000uLL) {
      char v2 = 5;
    }
    else {
      char v2 = 2;
    }
    char v5 = v2;
    for (unsigned __int8 j = 0; j < (int)*(unsigned __int8 *)(a1 + 211); ++j)
    {
      uint64_t v3 = *(void *)(a1 + 224) + 32 * (*(unsigned __int8 *)(a1 + 210) * j + i);
      if (v5 == 2)
      {
        if (a2) {
          _xzm_xzone_allocation_slot_fork_unlock((atomic_ullong *)v3);
        }
        else {
          _xzm_xzone_allocation_slot_fork_lock(v3);
        }
      }
      else
      {
        _xzm_do_lock_action((atomic_uint *)(v3 + 8), a2);
      }
    }
  }
}

uint64_t _xzm_tiny_xzone_do_lock_action(atomic_ullong *a1, int a2)
{
  int v10 = a1;
  int v9 = a2;
  if (a2)
  {
    _xzm_chunk_list_fork_unlock(v10);
    _xzm_chunk_list_fork_unlock((atomic_ullong *)((char *)v10 + 8));
    uint64_t result = (uint64_t)_xzm_chunk_list_fork_unlock((atomic_ullong *)((char *)v10 + 16));
  }
  else
  {
    _xzm_chunk_list_fork_lock(v10);
    _xzm_chunk_list_fork_lock((atomic_ullong *)((char *)v10 + 8));
    uint64_t result = (uint64_t)_xzm_chunk_list_fork_lock((atomic_ullong *)((char *)v10 + 16));
  }
  uint64_t v8 = 0;
  uint64_t v7 = 0;
  uint64_t v6 = *((void *)v10 + 2);
  uint64_t v7 = v6;
  uint64_t v5 = v6;
  uint64_t v8 = v6;
  for (unsigned __int8 i = (atomic_ullong *)(v6 & 0x7FFFFFFFFFFFLL); i; unsigned __int8 i = (atomic_ullong *)*((void *)i + 3))
  {
    uint64_t v3 = 0;
    if (v9)
    {
      uint64_t v3 = *(void *)i;
      if ((v3 & 0x7FF) != 0x7FF && (v3 & 0x7FF) != 0x7FE) {
        uint64_t result = (uint64_t)_xzm_xzone_tiny_chunk_unlock(i, v3);
      }
    }
    else
    {
      uint64_t result = _xzm_xzone_tiny_chunk_lock(i, &v3);
    }
  }
  return result;
}

void _xzm_small_xzone_lock_all(uint64_t *a1)
{
  if ((unint64_t)a1[6] <= 0x1000)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"xz->xz_block_size > XZM_TINY_BLOCK_SIZE_MAX\" failed (/L"
                           "ibrary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:3689)";
    __break(1u);
    JUMPOUT(0x6E3A4);
  }
  while (1)
  {
    int v1 = 0;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 3), (unsigned int *)&v1, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
    if (v1) {
      os_unfair_lock_lock_with_options();
    }
    for (uint64_t i = *a1; i; uint64_t i = *(void *)(i + 16))
    {
      int v2 = 0;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(i + 8), (unsigned int *)&v2, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
      if (v2) {
        os_unfair_lock_lock_with_options();
      }
    }
    for (uint64_t j = a1[1]; j; uint64_t j = *(void *)(j + 16))
    {
      int v3 = 0;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(j + 8), (unsigned int *)&v3, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
      if (v3)
      {
        for (uint64_t k = *a1; k; uint64_t k = *(void *)(k + 16))
        {
          int v4 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
          int v5 = v4;
          atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(k + 8), (unsigned int *)&v5, 0, memory_order_release, memory_order_relaxed);
          if (v5 != v4) {
            os_unfair_lock_unlock((os_unfair_lock_t)(k + 8));
          }
        }
        for (uint64_t m = a1[1]; m && m != j; uint64_t m = *(void *)(m + 16))
        {
          int v6 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
          int v7 = v6;
          atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(m + 8), (unsigned int *)&v7, 0, memory_order_release, memory_order_relaxed);
          if (v7 != v6) {
            os_unfair_lock_unlock((os_unfair_lock_t)(m + 8));
          }
        }
        break;
      }
    }
    if (!j) {
      break;
    }
    int v8 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    int v9 = v8;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 3), (unsigned int *)&v9, 0, memory_order_release, memory_order_relaxed);
    if (v9 != v8) {
      os_unfair_lock_unlock((os_unfair_lock_t)a1 + 6);
    }
    yield();
  }
}

uint64_t _xzm_xzone_allocation_slot_fork_lock(uint64_t result)
{
  int v8 = (atomic_ullong *)result;
  int v7 = (atomic_ullong *)result;
  uint64_t v6 = *(void *)result;
  do
  {
    while ((v6 & 1) != 0)
    {
      if ((v6 & 2) != 0) {
        goto LABEL_8;
      }
      uint64_t v9 = v6;
      uint64_t v1 = v6;
      uint64_t v2 = v6;
      atomic_compare_exchange_strong_explicit(v8, (unint64_t *)&v2, v6 | 2, memory_order_relaxed, memory_order_relaxed);
      if (v2 != v1) {
        uint64_t v9 = v2;
      }
      if (v2 == v6)
      {
LABEL_8:
        uint64_t result = __ulock_wait();
        if ((result & 0x80000000) != 0 && result != -4 && -(int)result != 14)
        {
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: ulock_wait failure";
          qword_C0148 = -(int)result;
          __break(1u);
          JUMPOUT(0x6EC04);
        }
        uint64_t v10 = *(void *)v8;
      }
      else
      {
        uint64_t v10 = v9;
      }
      uint64_t v6 = v10;
    }
    uint64_t v5 = v6;
    uint64_t v3 = v6;
    uint64_t v4 = v6;
    atomic_compare_exchange_strong_explicit(v7, (unint64_t *)&v4, v6 | 2, memory_order_relaxed, memory_order_relaxed);
    if (v4 != v3) {
      uint64_t v5 = v4;
    }
    uint64_t v6 = v5;
  }
  while (v4 != v3);
  return result;
}

atomic_ullong *_xzm_xzone_allocation_slot_fork_unlock(atomic_ullong *result)
{
  if ((*(void *)result & 2) == 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slot_meta.xasa_chunk.xsc_fork_locked\" failed (/Library/"
                           "Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:1107)";
    __break(1u);
    JUMPOUT(0x6EDBCLL);
  }
  uint64_t v1 = *(void *)result;
  if (atomic_exchange_explicit(result, v1 & 0xFFFFFFFFFFFFFFFDLL, memory_order_release) != v1)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"prev_slot_value == slot_meta.xasa_value\" failed (/Libra"
                           "ry/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:1114)";
    __break(1u);
    JUMPOUT(0x6EE5CLL);
  }
  return result;
}

atomic_ullong *_xzm_chunk_list_fork_lock(atomic_ullong *result)
{
  if ((atomic_fetch_or_explicit(result, 0x8000000000000000, memory_order_relaxed) & 0x8000000000000000) != 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!old_head.xzch_fork_locked\" failed (/Library/Caches/com"
                           ".apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:377)";
    __break(1u);
    JUMPOUT(0x6EEF8);
  }
  return result;
}

atomic_ullong *_xzm_chunk_list_fork_unlock(atomic_ullong *result)
{
  if ((atomic_fetch_and_explicit(result, 0x7FFFFFFFFFFFFFFFuLL, memory_order_relaxed) & 0x8000000000000000) == 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"old_head.xzch_fork_locked\" failed (/Library/Caches/com."
                           "apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:391)";
    __break(1u);
    JUMPOUT(0x6EFA8);
  }
  return result;
}

uint64_t _xzm_xzone_tiny_chunk_lock(atomic_ullong *a1, void *a2)
{
  uint64_t v6 = *(void *)a1;
  do
  {
    if ((v6 & 0x40000000) != 0)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!old_meta.xca_walk_locked\" failed (/Library/Caches/co"
                             "m.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2691)";
      __break(1u);
      JUMPOUT(0x6F030);
    }
    if ((~v6 & 0x7FF) == 0 || (v6 & 0x7FF) == 0x7FE) {
      return 0;
    }
    uint64_t v5 = v6;
    uint64_t v2 = v6;
    uint64_t v3 = v6;
    atomic_compare_exchange_strong_explicit(a1, (unint64_t *)&v3, v6 | 0x40000000, memory_order_relaxed, memory_order_relaxed);
    if (v3 != v2) {
      uint64_t v5 = v3;
    }
    uint64_t v6 = v5;
  }
  while (v3 != v2);
  if (malloc_tracing_enabled) {
    kdebug_trace();
  }
  *a2 = v5;
  return 1;
}

atomic_ullong *_xzm_xzone_tiny_chunk_unlock(atomic_ullong *result, uint64_t a2)
{
  uint64_t v2 = a2;
  atomic_compare_exchange_strong_explicit(result, (unint64_t *)&v2, a2 & 0xFFFFFFFFBFFFFFFFLL, memory_order_relaxed, memory_order_relaxed);
  if (v2 != a2)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"success\" failed (/Library/Caches/com.apple.xbs/Sources/"
                           "libmalloc_driverkit/src/xzone/xzone_malloc.c:2724)";
    __break(1u);
    JUMPOUT(0x6F29CLL);
  }
  if (malloc_tracing_enabled) {
    return (atomic_ullong *)kdebug_trace();
  }
  return result;
}

uint64_t yield()
{
  return thread_switch(0, 1, 1u);
}

BOOL XZM_FAST_ALIGNED(unint64_t a1, unint64_t a2, unsigned int a3)
{
  if (a1 * a3 < a3 != (a1 % a2 == 0))
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"aligned == ((offs % size) == 0)\" failed (/Library/Cache"
                           "s/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:142)";
    __break(1u);
    JUMPOUT(0x6F380);
  }
  return a1 * a3 < a3;
}

uint64_t _xzm_xzone_tiny_chunk_block_is_free_slow(uint64_t a1, atomic_ullong *a2, uint64_t a3)
{
  uint64_t v22 = a1;
  unsigned int v21 = a2;
  uint64_t v20 = a3;
  char v19 = 0;
  uint64_t v23 = a1 + 280;
  uint64_t v46 = a1 + 280;
  int v45 = 327680;
  unsigned int v44 = 0;
  uint64_t v47 = 3;
  uint64_t v48 = 3;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unsigned int v44 = *(void *)(StatusReg + 24);
  int v43 = 0;
  unsigned int v42 = v44;
  unsigned int v41 = v44;
  int v3 = 0;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 280), (unsigned int *)&v3, v44, memory_order_acquire, memory_order_acquire);
  if (v3) {
    int v43 = v3;
  }
  BOOL v40 = v3 == 0;
  if (v3) {
    os_unfair_lock_lock_with_options();
  }
  unint64_t v18 = 0;
  if (_xzm_xzone_tiny_chunk_lock(v21, &v18))
  {
    uint64_t v17 = *(void *)(v22 + 216) + 88 * *((unsigned __int8 *)v21 + 33);
    uint64_t v27 = v22;
    uint64_t v26 = v21;
    uint64_t v25 = 0;
    uint64_t v29 = v22;
    unint64_t v28 = v21;
    uint64_t v32 = v22;
    unint64_t v31 = v21;
    unint64_t v30 = (unint64_t)v21 & 0xFFFFFFFFFFFFC000;
    char v12 = 1;
    if (((unint64_t)v21 & 0xFFFFFFFFFFFFC000) != 0)
    {
      BOOL v11 = 0;
      if ((unint64_t)v31 >= v30 + 2136) {
        BOOL v11 = (unint64_t)v31 < v30 + 48 * *(unsigned int *)(v30 + 16) + 2136;
      }
      char v12 = v11;
    }
    if ((v12 & 1) == 0)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < ("
                             "segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple."
                             "xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
      __break(1u);
      JUMPOUT(0x6F6B8);
    }
    unint64_t v34 = v30;
    uint64_t v33 = v28;
    unint64_t v39 = v30;
    int v38 = v28;
    if ((unint64_t)v28 < v30 + 2136)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" f"
                             "ailed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_i"
                             "nline_internal.h:278)";
      __break(1u);
      JUMPOUT(0x6F71CLL);
    }
    int64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v38 - v39 - 2136) >> 4);
    if (v37 >= *(unsigned int *)(v39 + 16))
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fa"
                             "iled (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_in"
                             "line_internal.h:280)";
      __break(1u);
      JUMPOUT(0x6F784);
    }
    unint64_t v36 = v30;
    int v35 = v37;
    unint64_t v16 = *(void *)(v30 + 80) + ((unint64_t)v37 << 14);
    unint64_t v15 = *(void *)(v17 + 48) >> 4;
    uint64_t v4 = v20 - v16 + 15;
    if ((uint64_t)(v20 - v16) >= 0) {
      uint64_t v4 = v20 - v16;
    }
    unint64_t v14 = v18 & 0x7FF;
    for (unint64_t i = 0; ; ++i)
    {
      BOOL v10 = 0;
      if (v14 != 2044)
      {
        BOOL v10 = 0;
        if (v14 != 2045)
        {
          BOOL v10 = 0;
          if (!(v14 % v15))
          {
            BOOL v10 = 0;
            if (v14 <= (*(_DWORD *)(v17 + 68) - 1) * v15) {
              BOOL v10 = i < 0x400;
            }
          }
        }
      }
      if (!v10) {
        break;
      }
      if (v14 == v4 >> 4)
      {
        char v19 = 1;
        goto LABEL_36;
      }
      unint64_t v14 = *(void *)(v16 + 16 * v14 + 8) & 0x7FFLL;
    }
    if (i != ((v18 >> 11) & 0x7FF) || (char v9 = 1, v14 != 2045))
    {
      BOOL v8 = 0;
      if (i < ((v18 >> 11) & 0x7FF)) {
        BOOL v8 = v14 == 2044;
      }
      char v9 = v8;
    }
    if ((v9 & 1) == 0)
    {
      qword_C0118 = (uint64_t)"BUG IN CLIENT OF LIBMALLOC: corrupt tiny freelist";
      qword_C0148 = i;
      __break(1u);
      JUMPOUT(0x6F9D4);
    }
LABEL_36:
    v18 |= 0x40000000uLL;
    _xzm_xzone_tiny_chunk_unlock(v21, v18);
  }
  else
  {
    char v19 = 1;
  }
  uint64_t v24 = v22 + 280;
  os_unfair_lock_t v55 = (os_unfair_lock_t)(v22 + 280);
  int v54 = 0;
  uint64_t v56 = 3;
  uint64_t v57 = 3;
  unint64_t v58 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  int v54 = *(void *)(v58 + 24);
  int v53 = 0;
  int v52 = v54;
  int v51 = 0;
  int v5 = v54;
  int v6 = v54;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v22 + 280), (unsigned int *)&v6, 0, memory_order_release, memory_order_relaxed);
  if (v6 != v5) {
    int v52 = v6;
  }
  BOOL v50 = v6 == v5;
  if (v6 != v5) {
    os_unfair_lock_unlock(v55);
  }
  return v19 & 1;
}

uint64_t xzm_malloc_zone_size(uint64_t a1, unint64_t a2)
{
  uint64_t v16 = a1;
  unint64_t v15 = a2;
  unint64_t v14 = 0;
  uint64_t v13 = 0;
  uint64_t v12 = 0;
  uint64_t v33 = a1;
  unint64_t v32 = a2;
  unint64_t v31 = 0;
  unint64_t v30 = &v13;
  uint64_t v29 = &v12;
  uint64_t v28 = 0;
  uint64_t v35 = a1;
  if (*(void *)(a1 + 232)) {
    uint64_t v10 = *(void *)(a1 + 232);
  }
  else {
    uint64_t v10 = v35;
  }
  uint64_t v28 = v10;
  unint64_t v27 = 0;
  uint64_t v57 = v10;
  unint64_t v56 = v32;
  os_unfair_lock_t v55 = 0;
  unint64_t v115 = v32;
  uint64_t v114 = v10;
  uint64_t v113 = 0;
  unint64_t v112 = 0;
  unint64_t v121 = v32;
  int v120 = &v113;
  unint64_t v119 = v32;
  if (v32 >> 36)
  {
    *int v120 = 0;
    unint64_t v122 = 0x4000;
  }
  else
  {
    unint64_t v118 = v119 >> 22;
    *int v120 = 0;
    if (v118 >= 0x4000)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segindex < XZM_SEGMENT_TABLE_ENTRIES\" failed (/Librar"
                             "y/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:169)";
      __break(1u);
      JUMPOUT(0x6FC44);
    }
    unint64_t v122 = v118;
  }
  unint64_t v112 = v122;
  if (v122 >= 0x4000) {
    uint64_t v116 = 0;
  }
  else {
    uint64_t v116 = *(void *)(v114 + 408) + 4 * v112;
  }
  os_unfair_lock_t v55 = (unsigned int *)v116;
  if (v116)
  {
    unsigned int v117 = *v55;
    unint64_t v58 = (unint64_t)v117 << 14;
  }
  else
  {
    unint64_t v58 = 0;
  }
  unint64_t v27 = v58;
  if (!v58)
  {
    unint64_t v34 = 0;
    goto LABEL_107;
  }
  unint64_t v26 = 0;
  unint64_t v62 = v27;
  unint64_t v61 = v32;
  uint64_t v60 = 0;
  unint64_t v66 = v27;
  unint64_t v65 = v32;
  unsigned int v64 = 0;
  unint64_t v76 = v27;
  unint64_t v75 = v32;
  int64_t v74 = 0;
  unint64_t v80 = v27;
  unint64_t v79 = v32;
  int64_t v78 = 0;
  unint64_t v83 = v27;
  unint64_t v85 = v27;
  int v84 = 0;
  int64_t v78 = v32 - *(void *)(v27 + 80);
  int64_t v77 = 0;
  unint64_t v93 = v27;
  int v92 = 0;
  unint64_t v94 = v27;
  int v92 = *(_DWORD *)(v27 + 12);
  if ((unint64_t)v92 << 14)
  {
    unint64_t v91 = v80;
    unsigned int v90 = 0;
    unint64_t v95 = v80;
    unsigned int v90 = *(_DWORD *)(v80 + 12);
    unint64_t v89 = v80;
    int v88 = 0;
    unint64_t v96 = v80;
    int v88 = *(_DWORD *)(v80 + 12);
    unint64_t v9 = ((unint64_t)v90 << 14) - ((unint64_t)v88 << 14) + 0x400000;
  }
  else
  {
    unint64_t v87 = v80;
    unsigned int v86 = 0;
    unint64_t v97 = v80;
    unsigned int v86 = *(_DWORD *)(v80 + 12);
    unint64_t v9 = (unint64_t)v86 << 14;
  }
  int64_t v77 = v9;
  BOOL v8 = 0;
  if ((v78 & 0x8000000000000000) == 0) {
    BOOL v8 = v78 < v77;
  }
  if (!v8)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"diff >= 0 && diff < (ptrdiff_t)rounded_size\" failed (/L"
                           "ibrary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:436)";
    __break(1u);
    JUMPOUT(0x6FEACLL);
  }
  int64_t v74 = v78;
  unint64_t v82 = v76;
  int64_t v81 = v78;
  unsigned int v64 = (unint64_t)v78 >> 14;
  if (v64 >= *(_DWORD *)(v66 + 16)) {
    uint64_t v67 = 0;
  }
  else {
    uint64_t v67 = v66 + 48 * v64 + 2136;
  }
  uint64_t v60 = v67;
  if (!v67)
  {
    unint64_t v63 = 0;
    goto LABEL_55;
  }
  unint64_t v59 = 0;
  unint64_t v69 = v60;
  if ((*(unsigned char *)(v60 + 32) & 0xF) == 4)
  {
    unint64_t v68 = 0;
    unint64_t v68 = v69 - *(unsigned int *)(v69 + 36);
    if (v68 < (v69 & 0xFFFFFFFFFFFFC000 | 0x858))
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"out_slice >= ((xzm_segment_t)((uintptr_t)slice & ~(XZM"
                             "_METAPOOL_SEGMENT_BLOCK_SIZE - 1)))->xzs_slices\" failed (/Library/Caches/com.apple.xbs/Sou"
                             "rces/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:582)";
      __break(1u);
      JUMPOUT(0x6FFCCLL);
    }
    unint64_t v72 = v68;
    unint64_t v71 = v69;
    int v7 = *(unsigned char *)(v68 + 32) & 0xF;
    if ((v7 - 1) < 2)
    {
      BOOL v73 = v72 == v71;
    }
    else if (v7 == 3 || (v7 - 5) < 4)
    {
      if (v71 < v72)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice >= span\" failed (/Library/Caches/com.apple.xb"
                               "s/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:560)";
        __break(1u);
        JUMPOUT(0x70070);
      }
      BOOL v73 = v71 < v72 + 48 * *(unsigned int *)(v72 + 40);
    }
    else
    {
      BOOL v73 = 0;
    }
    if (v73) {
      unint64_t v70 = v68;
    }
    else {
      unint64_t v70 = v69;
    }
  }
  else
  {
    unint64_t v70 = v69;
  }
  unint64_t v59 = v70;
  unsigned __int8 v124 = *(unsigned char *)(v70 + 32) & 0xF;
  if (v124 >= 2u)
  {
    if (v124 == 2)
    {
LABEL_50:
      char v125 = 1;
      goto LABEL_51;
    }
    if (v124 - 3 >= 2)
    {
      if (v124 - 5 >= 3)
      {
        uint64_t v123 = v124;
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
        qword_C0148 = v124;
        __break(1u);
        JUMPOUT(0x70194);
      }
      goto LABEL_50;
    }
  }
  char v125 = 0;
LABEL_51:
  if (v125 == 1) {
    unint64_t v6 = v59;
  }
  else {
    unint64_t v6 = 0;
  }
  unint64_t v63 = v6;
LABEL_55:
  unint64_t v26 = v63;
  if (!v63)
  {
    unint64_t v34 = 0;
    goto LABEL_107;
  }
  if (*(unsigned __int16 *)(v26 + 34) != *(unsigned __int16 *)(v33 + 208))
  {
    unint64_t v34 = 0;
    goto LABEL_107;
  }
  uint64_t v25 = v32;
  unint64_t v24 = 0;
  uint64_t v42 = v33;
  unint64_t v41 = v26;
  uint64_t v40 = 0;
  uint64_t v44 = v33;
  unint64_t v43 = v26;
  uint64_t v47 = v33;
  unint64_t v46 = v26;
  unint64_t v45 = v26 & 0xFFFFFFFFFFFFC000;
  char v5 = 1;
  if ((v26 & 0xFFFFFFFFFFFFC000) != 0)
  {
    BOOL v4 = 0;
    if (v46 >= v45 + 2136) {
      BOOL v4 = v46 < v45 + 48 * *(unsigned int *)(v45 + 16) + 2136;
    }
    char v5 = v4;
  }
  if ((v5 & 1) == 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0x703E4);
  }
  unint64_t v49 = v45;
  unint64_t v48 = v43;
  unint64_t v54 = v45;
  unint64_t v53 = v43;
  if (v43 < v45 + 2136)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" fai"
                           "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                           "e_internal.h:278)";
    __break(1u);
    JUMPOUT(0x70448);
  }
  int64_t v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v53 - v54 - 2136) >> 4);
  if (v52 >= *(unsigned int *)(v54 + 16))
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fail"
                           "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline"
                           "_internal.h:280)";
    __break(1u);
    JUMPOUT(0x704B0);
  }
  unint64_t v51 = v45;
  int v50 = v52;
  unint64_t v24 = *(void *)(v45 + 80) + ((unint64_t)v52 << 14);
  unint64_t v23 = v25 - v24;
  char v22 = 0;
  char v22 = *(unsigned char *)(v26 + 32) & 0xF;
  uint64_t v21 = 0;
  unint64_t v20 = 0;
  char v38 = v22;
  if (v22 == 2 || v22 == 5)
  {
    uint64_t v21 = *(void *)(v33 + 216) + 88 * *(unsigned __int8 *)(v26 + 33);
    unint64_t v20 = *(void *)(v21 + 48);
    if (!XZM_FAST_ALIGNED(v23, v20, *(_DWORD *)(v21 + 64)))
    {
      unint64_t v34 = 0;
      goto LABEL_107;
    }
  }
  else
  {
    unint64_t v20 = (unint64_t)*(unsigned int *)(v26 + 40) << 14;
    unint64_t v19 = v23 % v20;
    if (v23 % v20)
    {
      unint64_t v34 = 0;
      goto LABEL_107;
    }
  }
  unint64_t v18 = v23 / v20;
  char v36 = *(unsigned char *)(v26 + 32) & 0xF;
  BOOL v37 = v36 == 2 || v36 == 5;
  BOOL v3 = 1;
  if (v37) {
    BOOL v3 = v18 < *(unsigned int *)(v21 + 68);
  }
  if (!v3)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!_xzm_slice_kind_uses_xzones(chunk->xzc_bits.xzcb_kind) "
                           "|| block_index < xz->xz_chunk_capacity\" failed (/Library/Caches/com.apple.xbs/Sources/libmal"
                           "loc_driverkit/src/xzone/xzone_malloc.c:2924)";
    __break(1u);
    JUMPOUT(0x706E8);
  }
  uint64_t v110 = v33;
  uint64_t v109 = (atomic_ullong *)v26;
  char v108 = v22;
  unint64_t v107 = v23;
  unint64_t v106 = v20;
  uint64_t v105 = v25;
  if ((*(unsigned char *)(v26 + 32) & 0xF) != v22)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == kind\" failed (/Library/Cac"
                           "hes/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2801)";
    __break(1u);
    JUMPOUT(0x70758);
  }
  if (v108 == 2)
  {
    uint64_t v104 = 0;
    uint64_t v103 = 0;
    uint64_t v102 = *(void *)v105;
    uint64_t v103 = v102;
    uint64_t v101 = v102;
    uint64_t v104 = v102;
    uint64_t v100 = 0;
    uint64_t v100 = *(void *)(v110 + 272) ^ v105;
    if (v102 == v100)
    {
      char is_free_slow = 0;
      char is_free_slow = _xzm_xzone_tiny_chunk_block_is_free_slow(v110, v109, v105);
      char v111 = is_free_slow & 1;
    }
    else
    {
      char v111 = 0;
    }
  }
  else if (v108 == 5)
  {
    unint64_t v98 = v107 / v106;
    unint64_t v127 = v109;
    int v126 = v107 / v106;
    if ((*((unsigned char *)v109 + 32) & 0xF) != 5)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == XZM_SLICE_KIND_SMALL_CHUN"
                             "K\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xz"
                             "one_inline_internal.h:919)";
      __break(1u);
      JUMPOUT(0x70878);
    }
    char v111 = (*(_DWORD *)v127 >> v126) & 1;
  }
  else
  {
    char v111 = 0;
  }
  if (v111 == 1)
  {
    unint64_t v34 = 0;
  }
  else
  {
    if (v31) {
      *unint64_t v31 = v21;
    }
    if (v30) {
      uint64_t *v30 = v25;
    }
    if (v29) {
      *uint64_t v29 = v20;
    }
    unint64_t v34 = v26;
  }
LABEL_107:
  unint64_t v11 = v34;
  if (v14) {
    *unint64_t v14 = v34;
  }
  if (!v11) {
    return _xzm_ptr_size_outlined(v16, v15);
  }
  if (v13 == v15) {
    return v12;
  }
  return v12 - (v15 - v13);
}

uint64_t xzm_malloc_zone_malloc(uint64_t a1, unint64_t a2, __n128 a3, float a4)
{
  return xzm_malloc_zone_malloc_type_malloc(a1, a2, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904), a3, a4);
}

uint64_t xzm_malloc_zone_calloc(uint64_t a1, unint64_t a2, unint64_t a3, __n128 a4, float a5)
{
  return xzm_malloc_zone_malloc_type_calloc(a1, a2, a3, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904), a4, a5);
}

uint64_t xzm_malloc_zone_valloc(uint64_t a1, unint64_t a2, __n128 a3, float a4)
{
  return _xzm_memalign(a1, vm_page_size, a2, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904), 0, a3, a4);
}

void xzm_malloc_zone_free(uint64_t a1, void *a2)
{
}

uint64_t xzm_malloc_zone_realloc(uint64_t a1, char *a2, unint64_t a3, __n128 a4, float a5)
{
  return xzm_malloc_zone_malloc_type_realloc(a1, a2, a3, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904), a4, a5);
}

void xzm_malloc_zone_destroy(mach_vm_address_t a1)
{
  mach_vm_address_t v58 = a1;
  mach_vm_address_t v59 = a1;
  if (*(void *)(a1 + 232))
  {
    mach_vm_address_t v64 = v58 + 280;
    mach_vm_address_t v118 = v58 + 280;
    int v117 = 327680;
    unsigned int v116 = 0;
    uint64_t v119 = 3;
    uint64_t v120 = 3;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    unsigned int v116 = *(void *)(StatusReg + 24);
    int v115 = 0;
    unsigned int v114 = v116;
    unsigned int v113 = v116;
    int v1 = 0;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v58 + 280), (unsigned int *)&v1, v116, memory_order_acquire, memory_order_acquire);
    int v36 = v1;
    BOOL v37 = v1 == 0;
    if (v1) {
      int v115 = v36;
    }
    BOOL v112 = v37;
    if (!v37) {
      os_unfair_lock_lock_with_options();
    }
    uint64_t v57 = 0;
    for (int i = 1; i < *(unsigned __int8 *)(v58 + 210); ++i)
    {
      uint64_t v55 = 0;
      uint64_t v55 = *(void *)(v58 + 216) + 88 * i;
      if (*(void *)(v55 + 48) > 0x1000uLL)
      {
        uint64_t j = 0;
        uint64_t v53 = 0;
        for (uint64_t j = *(void *)v55; ; uint64_t j = v53)
        {
          int v35 = 0;
          if (j)
          {
            uint64_t v53 = *(void *)(j + 16);
            int v35 = 1;
          }
          if ((v35 & 1) == 0) {
            break;
          }
          if ((*(unsigned char *)(j + 32) & 0x40) != 0)
          {
            qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!chunk->xzc_bits.xzcb_preallocated\" failed (/Li"
                                   "brary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:4000)";
            __break(1u);
            JUMPOUT(0x70DD4);
          }
          if (*(void *)(j + 16)) {
            *(void *)(*(void *)(j + 16) + 24) = *(void *)(j + 24);
          }
          **(void **)(j + 24) = *(void *)(j + 16);
          *(void *)(j + 16) = -1;
          *(void *)(j + 24) = -1;
          uint64_t v2 = v57;
          *(void *)(j + 16) = v57;
          if (v2) {
            *(void *)(v57 + 24) = j + 16;
          }
          uint64_t v57 = j;
          *(void *)(j + 24) = &v57;
        }
        for (uint64_t j = *(void *)(v55 + 8); ; uint64_t j = v53)
        {
          int v34 = 0;
          if (j)
          {
            uint64_t v53 = *(void *)(j + 16);
            int v34 = 1;
          }
          if ((v34 & 1) == 0) {
            break;
          }
          if ((*(unsigned char *)(j + 32) & 0x40) != 0)
          {
            qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!chunk->xzc_bits.xzcb_preallocated\" failed (/Li"
                                   "brary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:4006)";
            __break(1u);
            JUMPOUT(0x70F08);
          }
          if (*(void *)(j + 16)) {
            *(void *)(*(void *)(j + 16) + 24) = *(void *)(j + 24);
          }
          **(void **)(j + 24) = *(void *)(j + 16);
          *(void *)(j + 16) = -1;
          *(void *)(j + 24) = -1;
          uint64_t v3 = v57;
          *(void *)(j + 16) = v57;
          if (v3) {
            *(void *)(v57 + 24) = j + 16;
          }
          uint64_t v57 = j;
          *(void *)(j + 24) = &v57;
        }
        for (unsigned __int8 k = 0; k < (int)*(unsigned __int8 *)(v58 + 211); ++k)
        {
          unint64_t v51 = 0;
          mach_vm_address_t v71 = v58;
          uint64_t v70 = v55;
          unsigned __int8 v69 = k;
          unsigned __int8 v68 = 0;
          unsigned __int8 v68 = *(unsigned char *)(v55 + 72);
          uint64_t v67 = 0;
          uint64_t v67 = k * *(unsigned __int8 *)(v58 + 210);
          unint64_t v51 = (uint64_t *)(*(void *)(v58 + 224) + 32 * (v67 + v68));
          uint64_t j = *v51;
          if (j)
          {
            if ((*(unsigned char *)(j + 32) & 0x40) != 0)
            {
              qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!chunk->xzc_bits.xzcb_preallocated\" failed (/"
                                     "Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:4016)";
              __break(1u);
              JUMPOUT(0x710A0);
            }
            if (*(unsigned __int8 *)(j + 12) != k + 1)
            {
              qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_alloc_idx == j+1\" failed (/Library"
                                     "/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:4017)";
              __break(1u);
              JUMPOUT(0x710E0);
            }
            if ((*(unsigned char *)(j + 32) & 0x20) != 0)
            {
              qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!chunk->xzc_bits.xzcb_enqueued\" failed (/Libr"
                                     "ary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:4018)";
              __break(1u);
              JUMPOUT(0x71114);
            }
            *unint64_t v51 = 0;
            uint64_t v4 = v57;
            *(void *)(j + 16) = v57;
            if (v4) {
              *(void *)(v57 + 24) = j + 16;
            }
            uint64_t v57 = j;
            *(void *)(j + 24) = &v57;
          }
        }
        for (uint64_t j = *(void *)(v55 + 16); ; uint64_t j = v53)
        {
          int v33 = 0;
          if (j)
          {
            uint64_t v53 = *(void *)(j + 16);
            int v33 = 1;
          }
          if ((v33 & 1) == 0) {
            break;
          }
          if (*(void *)(j + 16)) {
            *(void *)(*(void *)(j + 16) + 24) = *(void *)(j + 24);
          }
          **(void **)(j + 24) = *(void *)(j + 16);
          *(void *)(j + 16) = -1;
          *(void *)(j + 24) = -1;
          _xzm_xzone_fresh_chunk_init(v55, j, 5);
          uint64_t v5 = v57;
          *(void *)(j + 16) = v57;
          if (v5) {
            *(void *)(v57 + 24) = j + 16;
          }
          uint64_t v57 = j;
          *(void *)(j + 24) = &v57;
        }
      }
      else
      {
        for (uint64_t m = 0; ; *(void *)(m + 24) = &v57)
        {
          uint64_t m = _xzm_chunk_list_pop(v58, (atomic_ullong *)(v55 + 16), 1);
          if (!m) {
            break;
          }
          if ((*(unsigned char *)(m + 32) & 0x40) != 0)
          {
            qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!chunk->xzc_bits.xzcb_preallocated\" failed (/Li"
                                   "brary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:4039)";
            __break(1u);
            JUMPOUT(0x712F4);
          }
          *(void *)m &= ~0x10000000uLL;
          *(void *)m &= ~0x20000000uLL;
          *(void *)m &= 0xFFFFFFFFF03FFFFFLL;
          uint64_t v6 = v57;
          *(void *)(m + 16) = v57;
          if (v6) {
            *(void *)(v57 + 24) = m + 16;
          }
          uint64_t v57 = m;
        }
        while (1)
        {
          uint64_t m = _xzm_chunk_list_pop(v58, (atomic_ullong *)(v55 + 24), 0);
          if (!m) {
            break;
          }
          _xzm_xzone_fresh_chunk_init(v55, m, 2);
          if ((*(_DWORD *)m & 0x7FF) == 0x7FE)
          {
            qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_atomic_meta.xca_alloc_head != XZM_FRE"
                                   "E_MADVISED\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xz"
                                   "one/xzone_malloc.c:4052)";
            __break(1u);
            JUMPOUT(0x713DCLL);
          }
          uint64_t v7 = v57;
          *(void *)(m + 16) = v57;
          if (v7) {
            *(void *)(v57 + 24) = m + 16;
          }
          uint64_t v57 = m;
          *(void *)(m + 24) = &v57;
        }
      }
    }
    mach_vm_address_t v66 = v58 + 280;
    os_unfair_lock_t v137 = (os_unfair_lock_t)(v58 + 280);
    int v136 = 0;
    uint64_t v138 = 3;
    uint64_t v139 = 3;
    unint64_t v140 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    int v136 = *(void *)(v140 + 24);
    int v135 = 0;
    int v134 = v136;
    int v133 = 0;
    int v8 = v136;
    int v9 = v136;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v58 + 280), (unsigned int *)&v9, 0, memory_order_release, memory_order_relaxed);
    int v31 = v9;
    BOOL v32 = v9 == v8;
    if (v9 != v8) {
      int v134 = v31;
    }
    BOOL v132 = v32;
    if (!v32) {
      os_unfair_lock_unlock(v137);
    }
    uint64_t v49 = 0;
    uint64_t v49 = *(void *)(v58 + 232);
    unint64_t v47 = 0;
    for (unint64_t n = v57; ; unint64_t n = v47)
    {
      int v30 = 0;
      if (n)
      {
        unint64_t v47 = *(void *)(n + 16);
        int v30 = 1;
      }
      if ((v30 & 1) == 0) {
        break;
      }
      uint64_t v46 = 0;
      uint64_t v46 = *(void *)(v58 + 216) + 88 * *(unsigned __int8 *)(n + 33);
      if ((*(unsigned char *)(v46 + 78) & 1) == 0 && (*(unsigned char *)(v49 + 328) & 4) != 0)
      {
        for (iint i = 0; ; ++ii)
        {
          mach_vm_address_t v62 = v58;
          unint64_t v61 = n;
          unint64_t v60 = n & 0xFFFFFFFFFFFFC000;
          int v29 = 1;
          if ((n & 0xFFFFFFFFFFFFC000) != 0)
          {
            BOOL v28 = 0;
            if (v61 >= v60 + 2136) {
              BOOL v28 = v61 < v60 + 48 * *(unsigned int *)(v60 + 16) + 2136;
            }
            int v29 = v28;
          }
          if ((v29 & 1) == 0)
          {
            qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && sli"
                                   "ce < (segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Cache"
                                   "s/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
            __break(1u);
            JUMPOUT(0x71698);
          }
          unint64_t v106 = v60;
          unint64_t v105 = n;
          uint64_t v104 = 0;
          unint64_t v108 = v60;
          unint64_t v107 = n;
          unint64_t v27 = v60 + 88;
          unint64_t v111 = v60;
          unint64_t v110 = n;
          if (n < v60 + 2136)
          {
            qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slic"
                                   "es\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../x"
                                   "zone/xzone_inline_internal.h:278)";
            __break(1u);
            JUMPOUT(0x71714);
          }
          int64_t v109 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v110 - v111 - 2136) >> 4);
          if (v109 >= *(unsigned int *)(v111 + 16))
          {
            qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_coun"
                                   "t\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xz"
                                   "one/xzone_inline_internal.h:280)";
            __break(1u);
            JUMPOUT(0x7177CLL);
          }
          uint64_t v104 = (void *)(v27 + 8 * v109);
          if (*v104 == -1) {
            break;
          }
          if ((*(unsigned char *)(n + 32) & 0xF) != 2)
          {
            qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"span->xzc_bits.xzcb_kind == XZM_SLICE_KIND_TINY_"
                                   "CHUNK\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/x"
                                   "zone_malloc.c:4076)";
            __break(1u);
            JUMPOUT(0x717DCLL);
          }
          if (xzm_chunk_mark_used(v58, n))
          {
            *(void *)unint64_t n = *(void *)n & 0xFFFFFFFFFFFFF800 | 0x7FD;
            break;
          }
          xzm_reclaim_force_sync();
          if (ii >= 10)
          {
            qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"retries < 10\" failed (/Library/Caches/com.apple"
                                   ".xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:4085)";
            __break(1u);
            JUMPOUT(0x71848);
          }
        }
      }
      if ((*(unsigned char *)(n + 32) & 0xF) == 2)
      {
        if ((*(_DWORD *)n & 0x7FF) != 0x7FE)
        {
          uint64_t v44 = 0;
          unint64_t v43 = 0;
          mach_vm_address_t v75 = v58;
          unint64_t v74 = n;
          BOOL v73 = &v44;
          if (&v13 == (int *)-168)
          {
            qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk_size_out\" failed (/Library/Caches/com.app"
                                   "le.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:375)";
            __break(1u);
            JUMPOUT(0x718E4);
          }
          unint64_t v72 = 0;
          mach_vm_address_t v79 = v75;
          unint64_t v78 = v74;
          int64_t v77 = v73;
          if (v73)
          {
            int v26 = *(unsigned char *)(v78 + 32) & 0xF;
            if (v26 == 2)
            {
              *int64_t v77 = 0x4000;
            }
            else if (v26 == 5)
            {
              *int64_t v77 = 0x10000;
            }
            else
            {
              if ((v26 - 6) >= 2)
              {
                uint64_t v76 = 0;
                uint64_t v76 = *(unsigned char *)(v78 + 32) & 0xF;
                qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: asking for start of chunk with invalid kind";
                qword_C0148 = v76;
                __break(1u);
                JUMPOUT(0x719D0);
              }
              *int64_t v77 = (unint64_t)*(unsigned int *)(v78 + 40) << 14;
            }
          }
          mach_vm_address_t v81 = v79;
          unint64_t v80 = v78;
          mach_vm_address_t v84 = v79;
          unint64_t v83 = v78;
          unint64_t v82 = v78 & 0xFFFFFFFFFFFFC000;
          int v25 = 1;
          if ((v78 & 0xFFFFFFFFFFFFC000) != 0)
          {
            BOOL v24 = 0;
            if (v83 >= v82 + 2136) {
              BOOL v24 = v83 < v82 + 48 * *(unsigned int *)(v82 + 16) + 2136;
            }
            int v25 = v24;
          }
          if ((v25 & 1) == 0)
          {
            qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && sli"
                                   "ce < (segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Cache"
                                   "s/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
            __break(1u);
            JUMPOUT(0x71AB0);
          }
          unint64_t v86 = v82;
          unint64_t v85 = v80;
          unint64_t v23 = v82;
          unint64_t v91 = v82;
          unint64_t v90 = v80;
          if (v80 < v82 + 2136)
          {
            qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slic"
                                   "es\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../x"
                                   "zone/xzone_inline_internal.h:278)";
            __break(1u);
            JUMPOUT(0x71B14);
          }
          int64_t v89 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v90 - v91 - 2136) >> 4);
          if (v89 >= *(unsigned int *)(v91 + 16))
          {
            qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_coun"
                                   "t\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xz"
                                   "one/xzone_inline_internal.h:280)";
            __break(1u);
            JUMPOUT(0x71B7CLL);
          }
          unint64_t v88 = v23;
          int v87 = v89;
          unint64_t v72 = *(void *)(v23 + 80) + ((unint64_t)v89 << 14);
          unint64_t v43 = v72;
          if (v44 != 0x4000)
          {
            qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"size == XZM_TINY_CHUNK_SIZE\" failed (/Library/C"
                                   "aches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:4096)";
            __break(1u);
            JUMPOUT(0x71BDCLL);
          }
          if (*(void *)(v46 + 48) <= 0x400uLL) {
            _platform_bzero();
          }
          uint64_t v42 = 0;
          mach_vm_address_t v100 = v58;
          unint64_t v99 = n;
          unint64_t v98 = 0;
          mach_vm_address_t v103 = v58;
          unint64_t v102 = n;
          unint64_t v101 = n & 0xFFFFFFFFFFFFC000;
          int v22 = 1;
          if ((n & 0xFFFFFFFFFFFFC000) != 0)
          {
            BOOL v21 = 0;
            if (v102 >= v101 + 2136) {
              BOOL v21 = v102 < v101 + 48 * *(unsigned int *)(v101 + 16) + 2136;
            }
            int v22 = v21;
          }
          if ((v22 & 1) == 0)
          {
            qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && sli"
                                   "ce < (segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Cache"
                                   "s/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
            __break(1u);
            JUMPOUT(0x71CE4);
          }
          unint64_t v98 = v101;
          uint64_t v42 = *(void *)v101;
          xzm_segment_group_segment_madvise_chunk(v42, n);
          *(void *)n &= 0xFFFFFFFFFFC007FFLL;
          *(void *)unint64_t n = *(void *)n & 0xFFFFFFFFFFFFF800 | 0x7FE;
        }
        *(unsigned char *)(n + 32) &= ~0x20u;
        _xzm_xzone_chunk_free(v58, *(void *)(v58 + 216) + 88 * *(unsigned __int8 *)(n + 33), n);
      }
      else
      {
        if ((*(unsigned char *)(n + 32) & 0xF) != 5)
        {
          uint64_t v40 = 0;
          uint64_t v40 = *(unsigned char *)(n + 32) & 0xF;
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: Unexpected chunk kind";
          qword_C0148 = v40;
          __break(1u);
          JUMPOUT(0x71F0CLL);
        }
        uint64_t v41 = 0;
        mach_vm_address_t v94 = v58;
        unint64_t v93 = n;
        unint64_t v92 = 0;
        mach_vm_address_t v97 = v58;
        unint64_t v96 = n;
        unint64_t v95 = n & 0xFFFFFFFFFFFFC000;
        int v20 = 1;
        if ((n & 0xFFFFFFFFFFFFC000) != 0)
        {
          BOOL v19 = 0;
          if (v96 >= v95 + 2136) {
            BOOL v19 = v96 < v95 + 48 * *(unsigned int *)(v95 + 16) + 2136;
          }
          int v20 = v19;
        }
        if ((v20 & 1) == 0)
        {
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice"
                                 " < (segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/co"
                                 "m.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
          __break(1u);
          JUMPOUT(0x71E68);
        }
        unint64_t v92 = v95;
        uint64_t v41 = *(void *)v95;
        xzm_segment_group_segment_madvise_chunk(v41, n);
        *(unsigned char *)(n + 32) &= ~0x20u;
        _xzm_xzone_chunk_free(v58, *(void *)(v58 + 216) + 88 * *(unsigned __int8 *)(n + 33), n);
      }
    }
    for (unint64_t n = *(void *)(v58 + 288); ; unint64_t n = v47)
    {
      int v18 = 0;
      if (n)
      {
        unint64_t v47 = *(void *)(n + 16);
        int v18 = 1;
      }
      if ((v18 & 1) == 0) {
        break;
      }
      _xzm_free_large_huge(v58, n);
    }
    uint64_t v15 = 0;
    uint64_t v39 = 0;
    uint64_t v39 = *(void *)(v49 + 400) + 128;
    uint64_t v38 = 0;
    uint64_t v38 = xzm_metapool_alloc(v39);
    *(_WORD *)uint64_t v38 = *(_WORD *)(v58 + 208);
    uint64_t v63 = v49 + 448;
    uint64_t v128 = v49 + 448;
    int v127 = 327680;
    unsigned int v126 = 0;
    uint64_t v129 = 3;
    uint64_t v130 = 3;
    unint64_t v131 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    unsigned int v126 = *(void *)(v131 + 24);
    int v125 = 0;
    unsigned int v124 = v126;
    unsigned int v123 = v126;
    int v10 = 0;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v49 + 448), (unsigned int *)&v10, v126, memory_order_acquire, memory_order_acquire);
    int v16 = v10;
    BOOL v17 = v10 == 0;
    if (v10) {
      int v125 = v16;
    }
    BOOL v122 = v17;
    if (!v17) {
      os_unfair_lock_lock_with_options();
    }
    *(void *)(v38 + 8) = *(void *)(v49 + 440);
    *(void *)(v49 + 440) = v38;
    uint64_t v65 = v49 + 448;
    os_unfair_lock_t v146 = (os_unfair_lock_t)(v49 + 448);
    int v145 = 0;
    uint64_t v147 = 3;
    uint64_t v148 = 3;
    unint64_t v149 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    int v145 = *(void *)(v149 + 24);
    int v144 = 0;
    int v143 = v145;
    int v142 = 0;
    int v11 = v145;
    int v12 = v145;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v49 + 448), (unsigned int *)&v12, 0, memory_order_release, memory_order_relaxed);
    int v13 = v12;
    BOOL v14 = v12 == v11;
    if (v12 != v11) {
      int v143 = v13;
    }
    BOOL v141 = v14;
    if (!v14) {
      os_unfair_lock_unlock(v146);
    }
    mvm_deallocate_plat(v58, *(void *)(v58 + 200), 0);
  }
}

uint64_t xzm_malloc_zone_memalign(uint64_t a1, unint64_t a2, unint64_t a3, __n128 a4, float a5)
{
  return xzm_malloc_zone_malloc_type_memalign(a1, a2, a3, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904), a4, a5);
}

void xzm_malloc_zone_free_definite_size(uint64_t a1, void *a2)
{
}

BOOL xzm_malloc_zone_claimed_address(uint64_t a1, unint64_t a2)
{
  if (mfm_claimed_address(a2))
  {
    return 1;
  }
  else
  {
    if (*(void *)(a1 + 232)) {
      uint64_t v3 = *(void *)(a1 + 232);
    }
    else {
      uint64_t v3 = a1;
    }
    unint64_t v10 = a2;
    uint64_t v9 = v3;
    uint64_t v8 = 0;
    unint64_t v16 = a2;
    uint64_t v15 = &v8;
    unint64_t v14 = a2;
    if (a2 >> 36)
    {
      *uint64_t v15 = 0;
      unint64_t v17 = 0x4000;
    }
    else
    {
      unint64_t v13 = v14 >> 22;
      *uint64_t v15 = 0;
      if (v13 >= 0x4000)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segindex < XZM_SEGMENT_TABLE_ENTRIES\" failed (/Libr"
                               "ary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:169)";
        __break(1u);
        JUMPOUT(0x72390);
      }
      unint64_t v17 = v13;
    }
    if (v17 < 0x4000) {
      int v11 = (unsigned int *)(*(void *)(v9 + 408) + 4 * v17);
    }
    else {
      int v11 = 0;
    }
    if (v11)
    {
      unsigned int v12 = *v11;
      unint64_t v7 = (unint64_t)v12 << 14;
    }
    else
    {
      unint64_t v7 = 0;
    }
    return v7 != 0;
  }
}

void xzm_malloc_zone_try_free_default(uint64_t a1, void *a2)
{
}

uint64_t xzm_malloc_zone_malloc_with_options(uint64_t a1, unint64_t a2, unint64_t a3, char a4, __n128 a5, float a6)
{
  return xzm_malloc_zone_malloc_type_malloc_with_options(a1, a2, a3, a4, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904), a5, a6);
}

uint64_t xzm_malloc_zone_malloc_type_malloc(uint64_t a1, unint64_t a2, uint64_t a3, __n128 a4, float a5)
{
  if (a2 <= 0x8000)
  {
    if ((*(unsigned char *)(a1 + 296) & 0x80) != 0)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(zone->xzz_flags & MALLOC_PURGEABLE) == 0\" failed (/L"
                             "ibrary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2266)";
      __break(1u);
      JUMPOUT(0x7259CLL);
    }
    unsigned int v11 = a3;
    if (*(void *)(a1 + 232)) {
      unint64_t v7 = *(void **)(a1 + 232);
    }
    else {
      unint64_t v7 = (void *)a1;
    }
    if (a2)
    {
      if (a2 > 0x80)
      {
        char v15 = 63 - __clz(a2 - 1);
        unsigned __int8 v16 = (((a2 - 1) >> (v15 - 2)) & 3 | (4 * v15)) - 20;
      }
      else
      {
        if ((a2 & 0xF) != 0) {
          uint64_t v6 = (a2 >> 4) + 1;
        }
        else {
          uint64_t v6 = a2 >> 4;
        }
        unsigned __int8 v16 = v6 - 1;
      }
    }
    else
    {
      unsigned __int8 v16 = 0;
    }
    unsigned __int8 v10 = *(unsigned char *)(v7[45] + v16);
    if (HIWORD(a3) == 256)
    {
      unsigned __int8 v9 = 0;
    }
    else if (((WORD2(a3) >> 10) & 3) == 1)
    {
      unsigned __int8 v9 = 1;
    }
    else
    {
      if (!a3) {
        unsigned int v11 = HIDWORD(malloc_entropy[0]);
      }
      unint64_t v14 = (__n128 *)(v7 + 39);
      if ((v10 - 2) >= 5u)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr_bucket_count <= XZM_POINTER_BUCKETS_MAX\" failed"
                               " (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:99)";
        __break(1u);
        JUMPOUT(0x72850);
      }
      switch(v10)
      {
        case 4u:
          char v13 = (int)(v14->n128_u64[0] * v11 + HIDWORD(v14->n128_u64[0])) < 0;
          break;
        case 5u:
          a4 = *v14;
          unint64_t v12 = v7[39] * v11 + v7[40];
          char v13 = (v12 >> 34) - 3 * (((v12 >> 34) * (unsigned __int128)0x5555555555555556uLL) >> 64);
          break;
        case 6u:
          a4 = *v14;
          char v13 = ((v7[39] * (unint64_t)v11 + v7[40]) >> 32) & 3;
          break;
        default:
          char v13 = 0;
          break;
      }
      unsigned __int8 v9 = v13 + 2;
    }
    if (v9 >= (int)v10)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"bucket < bin_bucket_count\" failed (/Library/Caches/co"
                             "m.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:181)";
      __break(1u);
      JUMPOUT(0x729F4);
    }
    uint64_t v8 = (uint64_t)_xzm_xzone_malloc(a1, a2, *(unsigned char *)(v7[46] + v16) + v9, 0, a4.n128_f64[0], a5);
  }
  else
  {
    uint64_t v8 = _xzm_malloc_large_huge(a1, a2, 0, a3, 0);
  }
  if (!v8)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr\" failed (/Library/Caches/com.apple.xbs/Sources/libm"
                           "alloc_driverkit/src/xzone/xzone_malloc.c:2272)";
    __break(1u);
    JUMPOUT(0x72A50);
  }
  return v8;
}

uint64_t xzm_malloc_zone_malloc_type_calloc(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, __n128 a5, float a6)
{
  uint64_t v13 = a1;
  unint64_t v12 = a2;
  unint64_t v11 = a3;
  uint64_t v10 = a4;
  unint64_t v9 = 0;
  unint64_t v53 = a2;
  unint64_t v52 = a3;
  uint64_t v51 = 0;
  int v50 = &v9;
  unint64_t v49 = a3;
  if (a2 == 1 || (unint64_t v49 = v53 * v52, !(v55 = !is_mul_ok(v53, v52))) && v49 <= malloc_absolute_max_size)
  {
    *int v50 = v49;
    int v54 = 0;
  }
  else
  {
    malloc_set_errno_fast(1, 12);
    int v54 = -1;
  }
  if (v54)
  {
    malloc_set_errno_fast(1, 12);
    return 0;
  }
  else
  {
    uint64_t v20 = v10;
    uint64_t v19 = v13;
    unint64_t v18 = v9;
    int v17 = 1;
    uint64_t v16 = 0;
    if (v9 <= 0x8000)
    {
      if ((*(unsigned char *)(v19 + 296) & 0x80) != 0)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(zone->xzz_flags & MALLOC_PURGEABLE) == 0\" failed ("
                               "/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2266)";
        __break(1u);
        JUMPOUT(0x72CC8);
      }
      char v15 = 0;
      uint64_t v31 = v20;
      uint64_t v30 = v19;
      unint64_t v29 = v18;
      BOOL v28 = 0;
      uint64_t v43 = v19;
      if (*(void *)(v19 + 232)) {
        uint64_t v8 = *(void *)(v19 + 232);
      }
      else {
        uint64_t v8 = v43;
      }
      BOOL v28 = (void *)v8;
      unsigned __int8 v27 = 0;
      unint64_t v45 = v29;
      if (v29)
      {
        if (v45 > 0x80)
        {
          if (v45 > 0x8000)
          {
            qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"size <= XZM_SMALL_BLOCK_SIZE_MAX\" failed (/Libr"
                                   "ary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:36)";
            __break(1u);
            JUMPOUT(0x72DECLL);
          }
          int v44 = 63 - __clz(--v45);
          unsigned __int8 v46 = ((v45 >> (v44 - 2)) & 3 | (4 * v44)) - 20;
        }
        else
        {
          if ((v45 & 0xF) != 0) {
            unint64_t v7 = (v45 >> 4) + 1;
          }
          else {
            unint64_t v7 = v45 >> 4;
          }
          unsigned __int8 v46 = v7 - 1;
        }
      }
      else
      {
        unsigned __int8 v46 = 0;
      }
      unsigned __int8 v27 = v46;
      unsigned __int8 v26 = 0;
      unsigned __int8 v26 = *(unsigned char *)(v28[45] + v46);
      char v25 = 0;
      char v25 = *(unsigned char *)(v28[46] + v46);
      unsigned __int8 v24 = 0;
      uint64_t v48 = v31;
      __int16 v47 = HIWORD(v31);
      BOOL v23 = HIWORD(v31) == 256;
      if (HIWORD(v31) == 256)
      {
        unsigned __int8 v24 = 0;
      }
      else if (((WORD2(v31) >> 10) & 3) == 1)
      {
        unsigned __int8 v24 = 1;
      }
      else
      {
        BOOL v22 = v31 == 0;
        if (!v31) {
          LODWORD(v31) = HIDWORD(malloc_entropy[0]);
        }
        char v21 = 0;
        uint64_t v42 = v31;
        uint64_t v41 = (__n128 *)(v28 + 39);
        char v40 = v26 - 2;
        if ((v26 - 2) >= 5u)
        {
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr_bucket_count <= XZM_POINTER_BUCKETS_MAX\" fail"
                                 "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:99)";
          __break(1u);
          JUMPOUT(0x72F7CLL);
        }
        unsigned int v39 = v42;
        char v38 = 0;
        switch(v40)
        {
          case 2:
            unint64_t v37 = 0;
            unint64_t v37 = v41->n128_u64[0];
            int v36 = v37 * v39 + HIDWORD(v37);
            char v38 = v36 < 0;
            break;
          case 3:
            __n128 v35 = 0uLL;
            a5 = *v41;
            __n128 v35 = *v41;
            unint64_t v34 = v35.n128_u64[0] * v39 + v35.n128_u64[1];
            char v38 = (v34 >> 34) - 3 * (((v34 >> 34) * (unsigned __int128)0x5555555555555556uLL) >> 64);
            break;
          case 4:
            __n128 v33 = 0uLL;
            a5 = *v41;
            __n128 v33 = *v41;
            unint64_t v32 = v33.n128_u64[0] * v39 + v33.n128_u64[1];
            char v38 = BYTE4(v32) & 3;
            break;
          default:
            char v38 = 0;
            break;
        }
        char v21 = v38;
        unsigned __int8 v24 = v38 + 2;
      }
      if (v24 >= (int)v26)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"bucket < bin_bucket_count\" failed (/Library/Caches/"
                               "com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:181)";
        __break(1u);
        JUMPOUT(0x73120);
      }
      char v15 = v25 + v24;
      uint64_t v16 = (uint64_t)_xzm_xzone_malloc(v19, v18, v25 + v24, v17, a5.n128_f64[0], a6);
    }
    else
    {
      uint64_t v16 = _xzm_malloc_large_huge(v19, v18, 0, v20, v17);
    }
    if (!v16)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr\" failed (/Library/Caches/com.apple.xbs/Sources/li"
                             "bmalloc_driverkit/src/xzone/xzone_malloc.c:2272)";
      __break(1u);
      JUMPOUT(0x7317CLL);
    }
    if ((v17 & 1) != 0 && !_xzm_mem_is_zero())
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_mem_is_zero(ptr, size)\" failed (/Library/Caches/"
                             "com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2274)";
      __break(1u);
      JUMPOUT(0x731C0);
    }
    return v16;
  }
}

uint64_t xzm_malloc_zone_malloc_type_realloc(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, __n128 a5, float a6)
{
  return xzm_realloc(a1, a2, a3, a4, a5, a6);
}

uint64_t xzm_malloc_zone_malloc_type_memalign(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, __n128 a5, float a6)
{
  return _xzm_memalign(a1, a2, a3, a4, 0, a5, a6);
}

uint64_t xzm_malloc_zone_malloc_type_malloc_with_options(uint64_t a1, unint64_t a2, unint64_t a3, char a4, uint64_t a5, __n128 a6, float a7)
{
  char v10 = (a4 & 1) != 0;
  if (a2) {
    return _xzm_memalign(a1, a2, a3, a5, v10, a6, a7);
  }
  if (a3 <= 0x8000)
  {
    if ((*(unsigned char *)(a1 + 296) & 0x80) != 0)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(zone->xzz_flags & MALLOC_PURGEABLE) == 0\" failed (/L"
                             "ibrary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2266)";
      __break(1u);
      JUMPOUT(0x733BCLL);
    }
    unsigned int v15 = a5;
    if (*(void *)(a1 + 232)) {
      unint64_t v9 = *(void **)(a1 + 232);
    }
    else {
      unint64_t v9 = (void *)a1;
    }
    if (a3)
    {
      if (a3 > 0x80)
      {
        char v19 = 63 - __clz(a3 - 1);
        unsigned __int8 v20 = (((a3 - 1) >> (v19 - 2)) & 3 | (4 * v19)) - 20;
      }
      else
      {
        if ((a3 & 0xF) != 0) {
          uint64_t v8 = (a3 >> 4) + 1;
        }
        else {
          uint64_t v8 = a3 >> 4;
        }
        unsigned __int8 v20 = v8 - 1;
      }
    }
    else
    {
      unsigned __int8 v20 = 0;
    }
    unsigned __int8 v14 = *(unsigned char *)(v9[45] + v20);
    if (HIWORD(a5) == 256)
    {
      unsigned __int8 v13 = 0;
    }
    else if (((WORD2(a5) >> 10) & 3) == 1)
    {
      unsigned __int8 v13 = 1;
    }
    else
    {
      if (!a5) {
        unsigned int v15 = HIDWORD(malloc_entropy[0]);
      }
      unint64_t v18 = (__n128 *)(v9 + 39);
      if ((v14 - 2) >= 5u)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr_bucket_count <= XZM_POINTER_BUCKETS_MAX\" failed"
                               " (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:99)";
        __break(1u);
        JUMPOUT(0x73670);
      }
      switch(v14)
      {
        case 4u:
          char v17 = (int)(v18->n128_u64[0] * v15 + HIDWORD(v18->n128_u64[0])) < 0;
          break;
        case 5u:
          a6 = *v18;
          unint64_t v16 = v9[39] * v15 + v9[40];
          char v17 = (v16 >> 34) - 3 * (((v16 >> 34) * (unsigned __int128)0x5555555555555556uLL) >> 64);
          break;
        case 6u:
          a6 = *v18;
          char v17 = ((v9[39] * (unint64_t)v15 + v9[40]) >> 32) & 3;
          break;
        default:
          char v17 = 0;
          break;
      }
      unsigned __int8 v13 = v17 + 2;
    }
    if (v13 >= (int)v14)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"bucket < bin_bucket_count\" failed (/Library/Caches/co"
                             "m.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:181)";
      __break(1u);
      JUMPOUT(0x73814);
    }
    uint64_t v12 = (uint64_t)_xzm_xzone_malloc(a1, a3, *(unsigned char *)(v9[46] + v20) + v13, v10, a6.n128_f64[0], a7);
  }
  else
  {
    uint64_t v12 = _xzm_malloc_large_huge(a1, a3, 0, a5, v10);
  }
  if (!v12)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr\" failed (/Library/Caches/com.apple.xbs/Sources/libm"
                           "alloc_driverkit/src/xzone/xzone_malloc.c:2272)";
    __break(1u);
    JUMPOUT(0x73870);
  }
  if ((v10 & 1) != 0 && !_xzm_mem_is_zero())
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_mem_is_zero(ptr, size)\" failed (/Library/Caches/co"
                           "m.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2274)";
    __break(1u);
    JUMPOUT(0x738B4);
  }
  return v12;
}

_OWORD *xzm_malloc_zone_malloc_slow(uint64_t a1, unint64_t a2, __n128 a3, float a4)
{
  return xzm_malloc_zone_malloc_type_malloc_slow(a1, a2, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904), a3, a4);
}

_OWORD *xzm_malloc_zone_calloc_slow(uint64_t a1, unint64_t a2, unint64_t a3, __n128 a4, float a5)
{
  return xzm_malloc_zone_malloc_type_calloc_slow(a1, a2, a3, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904), a4, a5);
}

uint64_t xzm_malloc_zone_valloc_slow(uint64_t a1, unint64_t a2, __n128 a3, float a4)
{
  if ((*(void *)(a1 + 296) & 0x80) != 0 && a2 <= 0x8000)
  {
    if (*(void *)(a1 + 232)) {
      uint64_t v5 = *(void *)(a1 + 232);
    }
    else {
      uint64_t v5 = a1;
    }
    uint64_t v6 = xzm_malloc_zone_valloc(v5, a2, a3, a4);
  }
  else
  {
    uint64_t v6 = xzm_malloc_zone_valloc(a1, a2, a3, a4);
  }
  if (v6 && (*(void *)(a1 + 296) & 0x20) != 0) {
    _platform_memset();
  }
  return v6;
}

void xzm_malloc_zone_free_slow(uint64_t a1, char *a2)
{
  if (!a2) {
    return;
  }
  uint64_t v73 = a1;
  unint64_t v72 = a2;
  mach_vm_address_t v71 = 0;
  uint64_t v70 = 0;
  uint64_t v69 = 0;
  unint64_t v68 = 0;
  uint64_t v90 = a1;
  unint64_t v89 = (unint64_t)a2;
  unint64_t v88 = 0;
  int v87 = (uint64_t *)&v70;
  unint64_t v86 = &v69;
  uint64_t v85 = 0;
  uint64_t v92 = a1;
  if (*(void *)(a1 + 232)) {
    uint64_t v18 = *(void *)(a1 + 232);
  }
  else {
    uint64_t v18 = v92;
  }
  uint64_t v85 = v18;
  unint64_t v84 = 0;
  uint64_t v114 = v18;
  unint64_t v113 = v89;
  BOOL v112 = 0;
  unint64_t v234 = v89;
  uint64_t v233 = v18;
  uint64_t v232 = 0;
  unint64_t v231 = 0;
  unint64_t v241 = v89;
  int v240 = &v232;
  unint64_t v239 = v89;
  if (v89 >> 36)
  {
    *int v240 = 0;
    unint64_t v242 = 0x4000;
  }
  else
  {
    unint64_t v238 = v239 >> 22;
    *int v240 = 0;
    if (v238 >= 0x4000)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segindex < XZM_SEGMENT_TABLE_ENTRIES\" failed (/Librar"
                             "y/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:169)";
      __break(1u);
      JUMPOUT(0x73C54);
    }
    unint64_t v242 = v238;
  }
  unint64_t v231 = v242;
  if (v242 >= 0x4000) {
    uint64_t v235 = 0;
  }
  else {
    uint64_t v235 = *(void *)(v233 + 408) + 4 * v231;
  }
  BOOL v112 = (unsigned int *)v235;
  if (v235)
  {
    unsigned int v237 = *v112;
    unint64_t v115 = (unint64_t)v237 << 14;
  }
  else
  {
    unint64_t v115 = 0;
  }
  unint64_t v84 = v115;
  if (!v115)
  {
    unint64_t v91 = 0;
    goto LABEL_108;
  }
  unint64_t v83 = 0;
  unint64_t v123 = v84;
  unint64_t v122 = v89;
  uint64_t v121 = 0;
  unint64_t v127 = v84;
  unint64_t v126 = v89;
  unsigned int v125 = 0;
  unint64_t v137 = v84;
  unint64_t v136 = v89;
  int64_t v135 = 0;
  unint64_t v141 = v84;
  unint64_t v140 = v89;
  int64_t v139 = 0;
  unint64_t v144 = v84;
  unint64_t v146 = v84;
  int v145 = 0;
  int64_t v139 = v89 - *(void *)(v84 + 80);
  int64_t v138 = 0;
  unint64_t v154 = v84;
  int v153 = 0;
  unint64_t v155 = v84;
  int v153 = *(_DWORD *)(v84 + 12);
  if ((unint64_t)v153 << 14)
  {
    unint64_t v152 = v141;
    unsigned int v151 = 0;
    unint64_t v156 = v141;
    unsigned int v151 = *(_DWORD *)(v141 + 12);
    unint64_t v150 = v141;
    int v149 = 0;
    unint64_t v157 = v141;
    int v149 = *(_DWORD *)(v141 + 12);
    unint64_t v17 = ((unint64_t)v151 << 14) - ((unint64_t)v149 << 14) + 0x400000;
  }
  else
  {
    unint64_t v148 = v141;
    unsigned int v147 = 0;
    unint64_t v158 = v141;
    unsigned int v147 = *(_DWORD *)(v141 + 12);
    unint64_t v17 = (unint64_t)v147 << 14;
  }
  int64_t v138 = v17;
  BOOL v16 = 0;
  if ((v139 & 0x8000000000000000) == 0) {
    BOOL v16 = v139 < v138;
  }
  if (!v16)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"diff >= 0 && diff < (ptrdiff_t)rounded_size\" failed (/L"
                           "ibrary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:436)";
    __break(1u);
    JUMPOUT(0x73EBCLL);
  }
  int64_t v135 = v139;
  unint64_t v143 = v137;
  int64_t v142 = v139;
  unsigned int v125 = (unint64_t)v139 >> 14;
  if (v125 >= *(_DWORD *)(v127 + 16)) {
    uint64_t v128 = 0;
  }
  else {
    uint64_t v128 = v127 + 48 * v125 + 2136;
  }
  uint64_t v121 = v128;
  if (!v128)
  {
    unint64_t v124 = 0;
    goto LABEL_56;
  }
  unint64_t v120 = 0;
  unint64_t v130 = v121;
  if ((*(unsigned char *)(v121 + 32) & 0xF) == 4)
  {
    unint64_t v129 = 0;
    unint64_t v129 = v130 - *(unsigned int *)(v130 + 36);
    if (v129 < (v130 & 0xFFFFFFFFFFFFC000 | 0x858))
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"out_slice >= ((xzm_segment_t)((uintptr_t)slice & ~(XZM"
                             "_METAPOOL_SEGMENT_BLOCK_SIZE - 1)))->xzs_slices\" failed (/Library/Caches/com.apple.xbs/Sou"
                             "rces/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:582)";
      __break(1u);
      JUMPOUT(0x73FDCLL);
    }
    unint64_t v133 = v129;
    unint64_t v132 = v130;
    int v15 = *(unsigned char *)(v129 + 32) & 0xF;
    if ((v15 - 1) < 2)
    {
      BOOL v134 = v133 == v132;
    }
    else if (v15 == 3 || (v15 - 5) < 4)
    {
      if (v132 < v133)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice >= span\" failed (/Library/Caches/com.apple.xb"
                               "s/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:560)";
        __break(1u);
        JUMPOUT(0x74080);
      }
      BOOL v134 = v132 < v133 + 48 * *(unsigned int *)(v133 + 40);
    }
    else
    {
      BOOL v134 = 0;
    }
    if (v134) {
      unint64_t v131 = v129;
    }
    else {
      unint64_t v131 = v130;
    }
  }
  else
  {
    unint64_t v131 = v130;
  }
  unint64_t v120 = v131;
  unsigned __int8 v252 = *(unsigned char *)(v131 + 32) & 0xF;
  if (v252 >= 2u)
  {
    if (v252 == 2)
    {
LABEL_51:
      char v253 = 1;
      goto LABEL_52;
    }
    if (v252 - 3 >= 2)
    {
      if (v252 - 5 >= 3)
      {
        uint64_t v251 = v252;
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
        qword_C0148 = v252;
        __break(1u);
        JUMPOUT(0x741A4);
      }
      goto LABEL_51;
    }
  }
  char v253 = 0;
LABEL_52:
  if (v253 == 1) {
    unint64_t v14 = v120;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v124 = v14;
LABEL_56:
  unint64_t v83 = v124;
  if (!v124)
  {
    unint64_t v91 = 0;
    goto LABEL_108;
  }
  if (*(unsigned __int16 *)(v83 + 34) != *(unsigned __int16 *)(v90 + 208))
  {
    unint64_t v91 = 0;
    goto LABEL_108;
  }
  uint64_t v82 = v89;
  unint64_t v81 = 0;
  uint64_t v99 = v90;
  unint64_t v98 = v83;
  uint64_t v97 = 0;
  uint64_t v101 = v90;
  unint64_t v100 = v83;
  uint64_t v104 = v90;
  unint64_t v103 = v83;
  unint64_t v102 = v83 & 0xFFFFFFFFFFFFC000;
  char v13 = 1;
  if ((v83 & 0xFFFFFFFFFFFFC000) != 0)
  {
    BOOL v12 = 0;
    if (v103 >= v102 + 2136) {
      BOOL v12 = v103 < v102 + 48 * *(unsigned int *)(v102 + 16) + 2136;
    }
    char v13 = v12;
  }
  if ((v13 & 1) == 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0x743F4);
  }
  unint64_t v106 = v102;
  unint64_t v105 = v100;
  unint64_t v111 = v102;
  unint64_t v110 = v100;
  if (v100 < v102 + 2136)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" fai"
                           "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                           "e_internal.h:278)";
    __break(1u);
    JUMPOUT(0x74458);
  }
  int64_t v109 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v110 - v111 - 2136) >> 4);
  if (v109 >= *(unsigned int *)(v111 + 16))
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fail"
                           "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline"
                           "_internal.h:280)";
    __break(1u);
    JUMPOUT(0x744C0);
  }
  unint64_t v108 = v102;
  int v107 = v109;
  unint64_t v81 = *(void *)(v102 + 80) + ((unint64_t)v109 << 14);
  unint64_t v80 = v82 - v81;
  char v79 = 0;
  char v79 = *(unsigned char *)(v83 + 32) & 0xF;
  uint64_t v78 = 0;
  unint64_t v77 = 0;
  char v95 = v79;
  if (v79 == 2 || v79 == 5)
  {
    uint64_t v78 = *(void *)(v90 + 216) + 88 * *(unsigned __int8 *)(v83 + 33);
    unint64_t v77 = *(void *)(v78 + 48);
    if (!XZM_FAST_ALIGNED(v80, v77, *(_DWORD *)(v78 + 64)))
    {
      unint64_t v91 = 0;
      goto LABEL_108;
    }
  }
  else
  {
    unint64_t v77 = (unint64_t)*(unsigned int *)(v83 + 40) << 14;
    unint64_t v76 = v80 % v77;
    if (v80 % v77)
    {
      unint64_t v91 = 0;
      goto LABEL_108;
    }
  }
  unint64_t v75 = v80 / v77;
  char v93 = *(unsigned char *)(v83 + 32) & 0xF;
  BOOL v94 = v93 == 2 || v93 == 5;
  BOOL v11 = 1;
  if (v94) {
    BOOL v11 = v75 < *(unsigned int *)(v78 + 68);
  }
  if (!v11)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!_xzm_slice_kind_uses_xzones(chunk->xzc_bits.xzcb_kind) "
                           "|| block_index < xz->xz_chunk_capacity\" failed (/Library/Caches/com.apple.xbs/Sources/libmal"
                           "loc_driverkit/src/xzone/xzone_malloc.c:2924)";
    __break(1u);
    JUMPOUT(0x746F8);
  }
  uint64_t v210 = v90;
  v209 = (atomic_ullong *)v83;
  char v208 = v79;
  unint64_t v207 = v80;
  unint64_t v206 = v77;
  uint64_t v205 = v82;
  if ((*(unsigned char *)(v83 + 32) & 0xF) != v79)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == kind\" failed (/Library/Cac"
                           "hes/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2801)";
    __break(1u);
    JUMPOUT(0x74768);
  }
  if (v208 == 2)
  {
    uint64_t v204 = 0;
    uint64_t v203 = 0;
    uint64_t v202 = *(void *)v205;
    uint64_t v203 = v202;
    uint64_t v201 = v202;
    uint64_t v204 = v202;
    uint64_t v200 = 0;
    uint64_t v200 = *(void *)(v210 + 272) ^ v205;
    if (v202 == v200)
    {
      char is_free_slow = 0;
      char is_free_slow = _xzm_xzone_tiny_chunk_block_is_free_slow(v210, v209, v205);
      char v211 = is_free_slow & 1;
    }
    else
    {
      char v211 = 0;
    }
  }
  else if (v208 == 5)
  {
    unint64_t v198 = v207 / v206;
    v257 = v209;
    int v256 = v207 / v206;
    if ((*((unsigned char *)v209 + 32) & 0xF) != 5)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == XZM_SLICE_KIND_SMALL_CHUN"
                             "K\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xz"
                             "one_inline_internal.h:919)";
      __break(1u);
      JUMPOUT(0x74888);
    }
    char v211 = (*(_DWORD *)v257 >> v256) & 1;
  }
  else
  {
    char v211 = 0;
  }
  if (v211 == 1)
  {
    unint64_t v91 = 0;
  }
  else
  {
    if (v88) {
      *unint64_t v88 = v78;
    }
    if (v87) {
      *int v87 = v82;
    }
    if (v86) {
      *unint64_t v86 = v77;
    }
    unint64_t v91 = v83;
  }
LABEL_108:
  unint64_t v68 = v91;
  if (v71) {
    unint64_t *v71 = v68;
  }
  if (v68)
  {
    if (v70 == v72)
    {
      uint64_t v74 = v69;
    }
    else
    {
      uint64_t v67 = (char *)(v72 - v70);
      uint64_t v74 = v69 - (v72 - v70);
    }
  }
  else
  {
    uint64_t v74 = _xzm_ptr_size_outlined(v73, (unint64_t)v72);
  }
  unint64_t v20 = v74;
  uint64_t v19 = 0;
  if (v74 || (*(unsigned char *)(a1 + 296) & 0x80) == 0) {
    goto LABEL_234;
  }
  if (*(void *)(a1 + 232)) {
    uint64_t v10 = *(void *)(a1 + 232);
  }
  else {
    uint64_t v10 = a1;
  }
  uint64_t v19 = v10;
  uint64_t v28 = v10;
  unsigned __int8 v27 = a2;
  unsigned __int8 v26 = 0;
  char v25 = 0;
  uint64_t v24 = 0;
  uint64_t v45 = v10;
  unint64_t v44 = (unint64_t)a2;
  uint64_t v43 = 0;
  uint64_t v42 = (uint64_t *)&v25;
  uint64_t v41 = &v24;
  uint64_t v40 = 0;
  uint64_t v47 = v10;
  if (*(void *)(v10 + 232)) {
    uint64_t v9 = *(void *)(v10 + 232);
  }
  else {
    uint64_t v9 = v47;
  }
  uint64_t v40 = v9;
  unint64_t v39 = 0;
  uint64_t v118 = v9;
  unint64_t v117 = v44;
  unsigned int v116 = 0;
  unint64_t v229 = v44;
  uint64_t v228 = v9;
  uint64_t v227 = 0;
  unint64_t v226 = 0;
  unint64_t v246 = v44;
  BOOL v245 = &v227;
  unint64_t v244 = v44;
  if (v44 >> 36)
  {
    *BOOL v245 = 0;
    unint64_t v247 = 0x4000;
  }
  else
  {
    unint64_t v243 = v244 >> 22;
    *BOOL v245 = 0;
    if (v243 >= 0x4000)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segindex < XZM_SEGMENT_TABLE_ENTRIES\" failed (/Librar"
                             "y/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:169)";
      __break(1u);
      JUMPOUT(0x74B8CLL);
    }
    unint64_t v247 = v243;
  }
  unint64_t v226 = v247;
  if (v247 >= 0x4000) {
    uint64_t v230 = 0;
  }
  else {
    uint64_t v230 = *(void *)(v228 + 408) + 4 * v226;
  }
  unsigned int v116 = (unsigned int *)v230;
  if (v230)
  {
    unsigned int v236 = *v116;
    unint64_t v119 = (unint64_t)v236 << 14;
  }
  else
  {
    unint64_t v119 = 0;
  }
  unint64_t v39 = v119;
  if (!v119)
  {
    unint64_t v46 = 0;
    goto LABEL_226;
  }
  unint64_t v38 = 0;
  unint64_t v162 = v39;
  unint64_t v161 = v44;
  uint64_t v160 = 0;
  unint64_t v166 = v39;
  unint64_t v165 = v44;
  unsigned int v164 = 0;
  unint64_t v176 = v39;
  unint64_t v175 = v44;
  int64_t v174 = 0;
  unint64_t v180 = v39;
  unint64_t v179 = v44;
  int64_t v178 = 0;
  unint64_t v183 = v39;
  unint64_t v185 = v39;
  int v184 = 0;
  int64_t v178 = v44 - *(void *)(v39 + 80);
  int64_t v177 = 0;
  unint64_t v193 = v39;
  int v192 = 0;
  unint64_t v194 = v39;
  int v192 = *(_DWORD *)(v39 + 12);
  if ((unint64_t)v192 << 14)
  {
    unint64_t v191 = v180;
    unsigned int v190 = 0;
    unint64_t v195 = v180;
    unsigned int v190 = *(_DWORD *)(v180 + 12);
    unint64_t v189 = v180;
    int v188 = 0;
    unint64_t v196 = v180;
    int v188 = *(_DWORD *)(v180 + 12);
    unint64_t v8 = ((unint64_t)v190 << 14) - ((unint64_t)v188 << 14) + 0x400000;
  }
  else
  {
    unint64_t v187 = v180;
    unsigned int v186 = 0;
    unint64_t v197 = v180;
    unsigned int v186 = *(_DWORD *)(v180 + 12);
    unint64_t v8 = (unint64_t)v186 << 14;
  }
  int64_t v177 = v8;
  BOOL v7 = 0;
  if ((v178 & 0x8000000000000000) == 0) {
    BOOL v7 = v178 < v177;
  }
  if (!v7)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"diff >= 0 && diff < (ptrdiff_t)rounded_size\" failed (/L"
                           "ibrary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:436)";
    __break(1u);
    JUMPOUT(0x74DF4);
  }
  int64_t v174 = v178;
  unint64_t v182 = v176;
  int64_t v181 = v178;
  unsigned int v164 = (unint64_t)v178 >> 14;
  if (v164 >= *(_DWORD *)(v166 + 16)) {
    uint64_t v167 = 0;
  }
  else {
    uint64_t v167 = v166 + 48 * v164 + 2136;
  }
  uint64_t v160 = v167;
  if (!v167)
  {
    unint64_t v163 = 0;
    goto LABEL_174;
  }
  unint64_t v159 = 0;
  unint64_t v169 = v160;
  if ((*(unsigned char *)(v160 + 32) & 0xF) == 4)
  {
    unint64_t v168 = 0;
    unint64_t v168 = v169 - *(unsigned int *)(v169 + 36);
    if (v168 < (v169 & 0xFFFFFFFFFFFFC000 | 0x858))
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"out_slice >= ((xzm_segment_t)((uintptr_t)slice & ~(XZM"
                             "_METAPOOL_SEGMENT_BLOCK_SIZE - 1)))->xzs_slices\" failed (/Library/Caches/com.apple.xbs/Sou"
                             "rces/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:582)";
      __break(1u);
      JUMPOUT(0x74F14);
    }
    unint64_t v172 = v168;
    unint64_t v171 = v169;
    int v6 = *(unsigned char *)(v168 + 32) & 0xF;
    if ((v6 - 1) < 2)
    {
      BOOL v173 = v172 == v171;
    }
    else if (v6 == 3 || (v6 - 5) < 4)
    {
      if (v171 < v172)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice >= span\" failed (/Library/Caches/com.apple.xb"
                               "s/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:560)";
        __break(1u);
        JUMPOUT(0x74FB8);
      }
      BOOL v173 = v171 < v172 + 48 * *(unsigned int *)(v172 + 40);
    }
    else
    {
      BOOL v173 = 0;
    }
    if (v173) {
      unint64_t v170 = v168;
    }
    else {
      unint64_t v170 = v169;
    }
  }
  else
  {
    unint64_t v170 = v169;
  }
  unint64_t v159 = v170;
  unsigned __int8 v249 = *(unsigned char *)(v170 + 32) & 0xF;
  if (v249 >= 2u)
  {
    if (v249 == 2)
    {
LABEL_169:
      char v250 = 1;
      goto LABEL_170;
    }
    if (v249 - 3 >= 2)
    {
      if (v249 - 5 >= 3)
      {
        uint64_t v248 = v249;
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
        qword_C0148 = v249;
        __break(1u);
        JUMPOUT(0x750DCLL);
      }
      goto LABEL_169;
    }
  }
  char v250 = 0;
LABEL_170:
  if (v250 == 1) {
    unint64_t v5 = v159;
  }
  else {
    unint64_t v5 = 0;
  }
  unint64_t v163 = v5;
LABEL_174:
  unint64_t v38 = v163;
  if (v163)
  {
    if (*(unsigned __int16 *)(v38 + 34) == *(unsigned __int16 *)(v45 + 208))
    {
      uint64_t v37 = v44;
      unint64_t v36 = 0;
      uint64_t v54 = v45;
      unint64_t v53 = v38;
      uint64_t v52 = 0;
      uint64_t v56 = v45;
      unint64_t v55 = v38;
      uint64_t v59 = v45;
      unint64_t v58 = v38;
      unint64_t v57 = v38 & 0xFFFFFFFFFFFFC000;
      char v4 = 1;
      if ((v38 & 0xFFFFFFFFFFFFC000) != 0)
      {
        BOOL v3 = 0;
        if (v58 >= v57 + 2136) {
          BOOL v3 = v58 < v57 + 48 * *(unsigned int *)(v57 + 16) + 2136;
        }
        char v4 = v3;
      }
      if ((v4 & 1) == 0)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice <"
                               " (segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.ap"
                               "ple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
        __break(1u);
        JUMPOUT(0x7532CLL);
      }
      unint64_t v61 = v57;
      unint64_t v60 = v55;
      unint64_t v66 = v57;
      unint64_t v65 = v55;
      if (v55 < v57 + 2136)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\""
                               " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzo"
                               "ne_inline_internal.h:278)";
        __break(1u);
        JUMPOUT(0x75390);
      }
      int64_t v64 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v65 - v66 - 2136) >> 4);
      if (v64 >= *(unsigned int *)(v66 + 16))
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" "
                               "failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzon"
                               "e_inline_internal.h:280)";
        __break(1u);
        JUMPOUT(0x753F8);
      }
      unint64_t v63 = v57;
      int v62 = v64;
      unint64_t v36 = *(void *)(v57 + 80) + ((unint64_t)v64 << 14);
      unint64_t v35 = v37 - v36;
      char v34 = 0;
      char v34 = *(unsigned char *)(v38 + 32) & 0xF;
      uint64_t v33 = 0;
      unint64_t v32 = 0;
      char v50 = v34;
      if (v34 == 2 || v34 == 5)
      {
        uint64_t v33 = *(void *)(v45 + 216) + 88 * *(unsigned __int8 *)(v38 + 33);
        unint64_t v32 = *(void *)(v33 + 48);
        if (!XZM_FAST_ALIGNED(v35, v32, *(_DWORD *)(v33 + 64)))
        {
          unint64_t v46 = 0;
          goto LABEL_226;
        }
      }
      else
      {
        unint64_t v32 = (unint64_t)*(unsigned int *)(v38 + 40) << 14;
        unint64_t v31 = v35 % v32;
        if (v35 % v32)
        {
          unint64_t v46 = 0;
          goto LABEL_226;
        }
      }
      unint64_t v30 = v35 / v32;
      char v48 = *(unsigned char *)(v38 + 32) & 0xF;
      BOOL v49 = v48 == 2 || v48 == 5;
      BOOL v2 = 1;
      if (v49) {
        BOOL v2 = v30 < *(unsigned int *)(v33 + 68);
      }
      if (!v2)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!_xzm_slice_kind_uses_xzones(chunk->xzc_bits.xzcb_ki"
                               "nd) || block_index < xz->xz_chunk_capacity\" failed (/Library/Caches/com.apple.xbs/Source"
                               "s/libmalloc_driverkit/src/xzone/xzone_malloc.c:2924)";
        __break(1u);
        JUMPOUT(0x75630);
      }
      uint64_t v224 = v45;
      uint64_t v223 = (atomic_ullong *)v38;
      char v222 = v34;
      unint64_t v221 = v35;
      unint64_t v220 = v32;
      uint64_t v219 = v37;
      if ((*(unsigned char *)(v38 + 32) & 0xF) != v34)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == kind\" failed (/Library"
                               "/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2801)";
        __break(1u);
        JUMPOUT(0x756A0);
      }
      if (v222 == 2)
      {
        uint64_t v218 = 0;
        uint64_t v217 = 0;
        uint64_t v216 = *(void *)v219;
        uint64_t v217 = v216;
        uint64_t v215 = v216;
        uint64_t v218 = v216;
        uint64_t v214 = 0;
        uint64_t v214 = *(void *)(v224 + 272) ^ v219;
        if (v216 == v214)
        {
          char v213 = 0;
          char v213 = _xzm_xzone_tiny_chunk_block_is_free_slow(v224, v223, v219);
          char v225 = v213 & 1;
        }
        else
        {
          char v225 = 0;
        }
      }
      else if (v222 == 5)
      {
        unint64_t v212 = v221 / v220;
        int v255 = v223;
        int v254 = v221 / v220;
        if ((*((unsigned char *)v223 + 32) & 0xF) != 5)
        {
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == XZM_SLICE_KIND_SMALL_"
                                 "CHUNK\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../"
                                 "xzone/xzone_inline_internal.h:919)";
          __break(1u);
          JUMPOUT(0x757C0);
        }
        char v225 = (*(_DWORD *)v255 >> v254) & 1;
      }
      else
      {
        char v225 = 0;
      }
      if (v225 == 1)
      {
        unint64_t v46 = 0;
      }
      else
      {
        if (v43) {
          *uint64_t v43 = v33;
        }
        if (v42) {
          *uint64_t v42 = v37;
        }
        if (v41) {
          *uint64_t v41 = v32;
        }
        unint64_t v46 = v38;
      }
      goto LABEL_226;
    }
    unint64_t v46 = 0;
  }
  else
  {
    unint64_t v46 = 0;
  }
LABEL_226:
  unint64_t v23 = v46;
  if (v26) {
    *unsigned __int8 v26 = v46;
  }
  if (v23)
  {
    if (v25 == v27) {
      uint64_t v29 = v24;
    }
    else {
      uint64_t v29 = v24 - (v27 - v25);
    }
  }
  else
  {
    uint64_t v29 = _xzm_ptr_size_outlined(v28, (unint64_t)v27);
  }
  unint64_t v20 = v29;
LABEL_234:
  if (!v20)
  {
    qword_C0118 = (uint64_t)"BUG IN CLIENT OF LIBMALLOC: pointer being freed was not allocated";
    qword_C0148 = (uint64_t)a2;
    __break(1u);
    JUMPOUT(0x75950);
  }
  if ((*(unsigned char *)(a1 + 296) & 0x20) != 0 && v20 >= 0x401) {
    _platform_memset();
  }
  if (v19) {
    xzm_malloc_zone_free(v19, a2);
  }
  else {
    xzm_malloc_zone_free(a1, a2);
  }
}

char *xzm_malloc_zone_realloc_slow(uint64_t a1, char *a2, unint64_t a3, __n128 a4, float a5)
{
  return xzm_malloc_zone_malloc_type_realloc_slow(a1, a2, a3, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904), a4, a5);
}

uint64_t xzm_malloc_zone_memalign_slow(uint64_t a1, unint64_t a2, unint64_t a3, __n128 a4, float a5)
{
  return xzm_malloc_zone_malloc_type_memalign_slow(a1, a2, a3, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904), a4, a5);
}

void xzm_malloc_zone_free_definite_size_slow(uint64_t a1, char *a2, unint64_t a3)
{
  if (!a2) {
    return;
  }
  uint64_t v74 = a1;
  uint64_t v73 = a2;
  unint64_t v72 = 0;
  mach_vm_address_t v71 = 0;
  uint64_t v70 = 0;
  unint64_t v69 = 0;
  uint64_t v91 = a1;
  unint64_t v90 = (unint64_t)a2;
  unint64_t v89 = 0;
  unint64_t v88 = (uint64_t *)&v71;
  int v87 = &v70;
  uint64_t v86 = 0;
  uint64_t v93 = a1;
  if (*(void *)(a1 + 232)) {
    uint64_t v19 = *(void *)(a1 + 232);
  }
  else {
    uint64_t v19 = v93;
  }
  uint64_t v86 = v19;
  unint64_t v85 = 0;
  uint64_t v115 = v19;
  unint64_t v114 = v90;
  unint64_t v113 = 0;
  unint64_t v235 = v90;
  uint64_t v234 = v19;
  uint64_t v233 = 0;
  unint64_t v232 = 0;
  unint64_t v242 = v90;
  unint64_t v241 = &v233;
  unint64_t v240 = v90;
  if (v90 >> 36)
  {
    *unint64_t v241 = 0;
    unint64_t v243 = 0x4000;
  }
  else
  {
    unint64_t v239 = v240 >> 22;
    *unint64_t v241 = 0;
    if (v239 >= 0x4000)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segindex < XZM_SEGMENT_TABLE_ENTRIES\" failed (/Librar"
                             "y/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:169)";
      __break(1u);
      JUMPOUT(0x75C2CLL);
    }
    unint64_t v243 = v239;
  }
  unint64_t v232 = v243;
  if (v243 >= 0x4000) {
    uint64_t v236 = 0;
  }
  else {
    uint64_t v236 = *(void *)(v234 + 408) + 4 * v232;
  }
  unint64_t v113 = (unsigned int *)v236;
  if (v236)
  {
    unsigned int v238 = *v113;
    unint64_t v116 = (unint64_t)v238 << 14;
  }
  else
  {
    unint64_t v116 = 0;
  }
  unint64_t v85 = v116;
  if (!v116)
  {
    unint64_t v92 = 0;
    goto LABEL_108;
  }
  unint64_t v84 = 0;
  unint64_t v124 = v85;
  unint64_t v123 = v90;
  uint64_t v122 = 0;
  unint64_t v128 = v85;
  unint64_t v127 = v90;
  unsigned int v126 = 0;
  unint64_t v138 = v85;
  unint64_t v137 = v90;
  int64_t v136 = 0;
  unint64_t v142 = v85;
  unint64_t v141 = v90;
  int64_t v140 = 0;
  unint64_t v145 = v85;
  unint64_t v147 = v85;
  int v146 = 0;
  int64_t v140 = v90 - *(void *)(v85 + 80);
  int64_t v139 = 0;
  unint64_t v155 = v85;
  int v154 = 0;
  unint64_t v156 = v85;
  int v154 = *(_DWORD *)(v85 + 12);
  if ((unint64_t)v154 << 14)
  {
    unint64_t v153 = v142;
    unsigned int v152 = 0;
    unint64_t v157 = v142;
    unsigned int v152 = *(_DWORD *)(v142 + 12);
    unint64_t v151 = v142;
    int v150 = 0;
    unint64_t v158 = v142;
    int v150 = *(_DWORD *)(v142 + 12);
    unint64_t v18 = ((unint64_t)v152 << 14) - ((unint64_t)v150 << 14) + 0x400000;
  }
  else
  {
    unint64_t v149 = v142;
    unsigned int v148 = 0;
    unint64_t v159 = v142;
    unsigned int v148 = *(_DWORD *)(v142 + 12);
    unint64_t v18 = (unint64_t)v148 << 14;
  }
  int64_t v139 = v18;
  BOOL v17 = 0;
  if ((v140 & 0x8000000000000000) == 0) {
    BOOL v17 = v140 < v139;
  }
  if (!v17)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"diff >= 0 && diff < (ptrdiff_t)rounded_size\" failed (/L"
                           "ibrary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:436)";
    __break(1u);
    JUMPOUT(0x75E94);
  }
  int64_t v136 = v140;
  unint64_t v144 = v138;
  int64_t v143 = v140;
  unsigned int v126 = (unint64_t)v140 >> 14;
  if (v126 >= *(_DWORD *)(v128 + 16)) {
    uint64_t v129 = 0;
  }
  else {
    uint64_t v129 = v128 + 48 * v126 + 2136;
  }
  uint64_t v122 = v129;
  if (!v129)
  {
    unint64_t v125 = 0;
    goto LABEL_56;
  }
  unint64_t v121 = 0;
  unint64_t v131 = v122;
  if ((*(unsigned char *)(v122 + 32) & 0xF) == 4)
  {
    unint64_t v130 = 0;
    unint64_t v130 = v131 - *(unsigned int *)(v131 + 36);
    if (v130 < (v131 & 0xFFFFFFFFFFFFC000 | 0x858))
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"out_slice >= ((xzm_segment_t)((uintptr_t)slice & ~(XZM"
                             "_METAPOOL_SEGMENT_BLOCK_SIZE - 1)))->xzs_slices\" failed (/Library/Caches/com.apple.xbs/Sou"
                             "rces/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:582)";
      __break(1u);
      JUMPOUT(0x75FB4);
    }
    unint64_t v134 = v130;
    unint64_t v133 = v131;
    int v16 = *(unsigned char *)(v130 + 32) & 0xF;
    if ((v16 - 1) < 2)
    {
      BOOL v135 = v134 == v133;
    }
    else if (v16 == 3 || (v16 - 5) < 4)
    {
      if (v133 < v134)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice >= span\" failed (/Library/Caches/com.apple.xb"
                               "s/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:560)";
        __break(1u);
        JUMPOUT(0x76058);
      }
      BOOL v135 = v133 < v134 + 48 * *(unsigned int *)(v134 + 40);
    }
    else
    {
      BOOL v135 = 0;
    }
    if (v135) {
      unint64_t v132 = v130;
    }
    else {
      unint64_t v132 = v131;
    }
  }
  else
  {
    unint64_t v132 = v131;
  }
  unint64_t v121 = v132;
  unsigned __int8 v253 = *(unsigned char *)(v132 + 32) & 0xF;
  if (v253 >= 2u)
  {
    if (v253 == 2)
    {
LABEL_51:
      char v254 = 1;
      goto LABEL_52;
    }
    if (v253 - 3 >= 2)
    {
      if (v253 - 5 >= 3)
      {
        uint64_t v252 = v253;
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
        qword_C0148 = v253;
        __break(1u);
        JUMPOUT(0x7617CLL);
      }
      goto LABEL_51;
    }
  }
  char v254 = 0;
LABEL_52:
  if (v254 == 1) {
    unint64_t v15 = v121;
  }
  else {
    unint64_t v15 = 0;
  }
  unint64_t v125 = v15;
LABEL_56:
  unint64_t v84 = v125;
  if (!v125)
  {
    unint64_t v92 = 0;
    goto LABEL_108;
  }
  if (*(unsigned __int16 *)(v84 + 34) != *(unsigned __int16 *)(v91 + 208))
  {
    unint64_t v92 = 0;
    goto LABEL_108;
  }
  uint64_t v83 = v90;
  unint64_t v82 = 0;
  uint64_t v100 = v91;
  unint64_t v99 = v84;
  uint64_t v98 = 0;
  uint64_t v102 = v91;
  unint64_t v101 = v84;
  uint64_t v105 = v91;
  unint64_t v104 = v84;
  unint64_t v103 = v84 & 0xFFFFFFFFFFFFC000;
  char v14 = 1;
  if ((v84 & 0xFFFFFFFFFFFFC000) != 0)
  {
    BOOL v13 = 0;
    if (v104 >= v103 + 2136) {
      BOOL v13 = v104 < v103 + 48 * *(unsigned int *)(v103 + 16) + 2136;
    }
    char v14 = v13;
  }
  if ((v14 & 1) == 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0x763CCLL);
  }
  unint64_t v107 = v103;
  unint64_t v106 = v101;
  unint64_t v112 = v103;
  unint64_t v111 = v101;
  if (v101 < v103 + 2136)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" fai"
                           "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                           "e_internal.h:278)";
    __break(1u);
    JUMPOUT(0x76430);
  }
  int64_t v110 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v111 - v112 - 2136) >> 4);
  if (v110 >= *(unsigned int *)(v112 + 16))
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fail"
                           "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline"
                           "_internal.h:280)";
    __break(1u);
    JUMPOUT(0x76498);
  }
  unint64_t v109 = v103;
  int v108 = v110;
  unint64_t v82 = *(void *)(v103 + 80) + ((unint64_t)v110 << 14);
  unint64_t v81 = v83 - v82;
  char v80 = 0;
  char v80 = *(unsigned char *)(v84 + 32) & 0xF;
  uint64_t v79 = 0;
  unint64_t v78 = 0;
  char v96 = v80;
  if (v80 == 2 || v80 == 5)
  {
    uint64_t v79 = *(void *)(v91 + 216) + 88 * *(unsigned __int8 *)(v84 + 33);
    unint64_t v78 = *(void *)(v79 + 48);
    if (!XZM_FAST_ALIGNED(v81, v78, *(_DWORD *)(v79 + 64)))
    {
      unint64_t v92 = 0;
      goto LABEL_108;
    }
  }
  else
  {
    unint64_t v78 = (unint64_t)*(unsigned int *)(v84 + 40) << 14;
    unint64_t v77 = v81 % v78;
    if (v81 % v78)
    {
      unint64_t v92 = 0;
      goto LABEL_108;
    }
  }
  unint64_t v76 = v81 / v78;
  char v94 = *(unsigned char *)(v84 + 32) & 0xF;
  BOOL v95 = v94 == 2 || v94 == 5;
  BOOL v12 = 1;
  if (v95) {
    BOOL v12 = v76 < *(unsigned int *)(v79 + 68);
  }
  if (!v12)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!_xzm_slice_kind_uses_xzones(chunk->xzc_bits.xzcb_kind) "
                           "|| block_index < xz->xz_chunk_capacity\" failed (/Library/Caches/com.apple.xbs/Sources/libmal"
                           "loc_driverkit/src/xzone/xzone_malloc.c:2924)";
    __break(1u);
    JUMPOUT(0x766D0);
  }
  uint64_t v211 = v91;
  uint64_t v210 = (atomic_ullong *)v84;
  char v209 = v80;
  unint64_t v208 = v81;
  unint64_t v207 = v78;
  uint64_t v206 = v83;
  if ((*(unsigned char *)(v84 + 32) & 0xF) != v80)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == kind\" failed (/Library/Cac"
                           "hes/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2801)";
    __break(1u);
    JUMPOUT(0x76740);
  }
  if (v209 == 2)
  {
    uint64_t v205 = 0;
    uint64_t v204 = 0;
    uint64_t v203 = *(void *)v206;
    uint64_t v204 = v203;
    uint64_t v202 = v203;
    uint64_t v205 = v203;
    uint64_t v201 = 0;
    uint64_t v201 = *(void *)(v211 + 272) ^ v206;
    if (v203 == v201)
    {
      char is_free_slow = 0;
      char is_free_slow = _xzm_xzone_tiny_chunk_block_is_free_slow(v211, v210, v206);
      char v212 = is_free_slow & 1;
    }
    else
    {
      char v212 = 0;
    }
  }
  else if (v209 == 5)
  {
    unint64_t v199 = v208 / v207;
    __int16 v258 = v210;
    int v257 = v208 / v207;
    if ((*((unsigned char *)v210 + 32) & 0xF) != 5)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == XZM_SLICE_KIND_SMALL_CHUN"
                             "K\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xz"
                             "one_inline_internal.h:919)";
      __break(1u);
      JUMPOUT(0x76860);
    }
    char v212 = (*(_DWORD *)v258 >> v257) & 1;
  }
  else
  {
    char v212 = 0;
  }
  if (v212 == 1)
  {
    unint64_t v92 = 0;
  }
  else
  {
    if (v89) {
      *unint64_t v89 = v79;
    }
    if (v88) {
      *unint64_t v88 = v83;
    }
    if (v87) {
      *int v87 = v78;
    }
    unint64_t v92 = v84;
  }
LABEL_108:
  unint64_t v69 = v92;
  if (v72) {
    *unint64_t v72 = v69;
  }
  if (v69)
  {
    if (v71 == v73)
    {
      uint64_t v75 = v70;
    }
    else
    {
      unint64_t v68 = (char *)(v73 - v71);
      uint64_t v75 = v70 - (v73 - v71);
    }
  }
  else
  {
    uint64_t v75 = _xzm_ptr_size_outlined(v74, (unint64_t)v73);
  }
  uint64_t v20 = 0;
  if (v75 || (*(unsigned char *)(a1 + 296) & 0x80) == 0) {
    goto LABEL_235;
  }
  if (*(void *)(a1 + 232)) {
    uint64_t v11 = *(void *)(a1 + 232);
  }
  else {
    uint64_t v11 = a1;
  }
  uint64_t v20 = v11;
  uint64_t v29 = v11;
  uint64_t v28 = a2;
  unsigned __int8 v27 = 0;
  unsigned __int8 v26 = 0;
  uint64_t v25 = 0;
  uint64_t v46 = v11;
  unint64_t v45 = (unint64_t)a2;
  unint64_t v44 = 0;
  uint64_t v43 = (uint64_t *)&v26;
  uint64_t v42 = &v25;
  uint64_t v41 = 0;
  uint64_t v48 = v11;
  if (*(void *)(v11 + 232)) {
    uint64_t v10 = *(void *)(v11 + 232);
  }
  else {
    uint64_t v10 = v48;
  }
  uint64_t v41 = v10;
  unint64_t v40 = 0;
  uint64_t v119 = v10;
  unint64_t v118 = v45;
  unint64_t v117 = 0;
  unint64_t v230 = v45;
  uint64_t v229 = v10;
  uint64_t v228 = 0;
  unint64_t v227 = 0;
  unint64_t v247 = v45;
  unint64_t v246 = &v228;
  unint64_t v245 = v45;
  if (v45 >> 36)
  {
    uint64_t *v246 = 0;
    unint64_t v248 = 0x4000;
  }
  else
  {
    unint64_t v244 = v245 >> 22;
    uint64_t *v246 = 0;
    if (v244 >= 0x4000)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segindex < XZM_SEGMENT_TABLE_ENTRIES\" failed (/Librar"
                             "y/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:169)";
      __break(1u);
      JUMPOUT(0x76B64);
    }
    unint64_t v248 = v244;
  }
  unint64_t v227 = v248;
  if (v248 >= 0x4000) {
    uint64_t v231 = 0;
  }
  else {
    uint64_t v231 = *(void *)(v229 + 408) + 4 * v227;
  }
  unint64_t v117 = (unsigned int *)v231;
  if (v231)
  {
    unsigned int v237 = *v117;
    unint64_t v120 = (unint64_t)v237 << 14;
  }
  else
  {
    unint64_t v120 = 0;
  }
  unint64_t v40 = v120;
  if (!v120)
  {
    unint64_t v47 = 0;
    goto LABEL_226;
  }
  unint64_t v39 = 0;
  unint64_t v163 = v40;
  unint64_t v162 = v45;
  uint64_t v161 = 0;
  unint64_t v167 = v40;
  unint64_t v166 = v45;
  unsigned int v165 = 0;
  unint64_t v177 = v40;
  unint64_t v176 = v45;
  int64_t v175 = 0;
  unint64_t v181 = v40;
  unint64_t v180 = v45;
  int64_t v179 = 0;
  unint64_t v184 = v40;
  unint64_t v186 = v40;
  int v185 = 0;
  int64_t v179 = v45 - *(void *)(v40 + 80);
  int64_t v178 = 0;
  unint64_t v194 = v40;
  int v193 = 0;
  unint64_t v195 = v40;
  int v193 = *(_DWORD *)(v40 + 12);
  if ((unint64_t)v193 << 14)
  {
    unint64_t v192 = v181;
    unsigned int v191 = 0;
    unint64_t v196 = v181;
    unsigned int v191 = *(_DWORD *)(v181 + 12);
    unint64_t v190 = v181;
    int v189 = 0;
    unint64_t v197 = v181;
    int v189 = *(_DWORD *)(v181 + 12);
    unint64_t v9 = ((unint64_t)v191 << 14) - ((unint64_t)v189 << 14) + 0x400000;
  }
  else
  {
    unint64_t v188 = v181;
    unsigned int v187 = 0;
    unint64_t v198 = v181;
    unsigned int v187 = *(_DWORD *)(v181 + 12);
    unint64_t v9 = (unint64_t)v187 << 14;
  }
  int64_t v178 = v9;
  BOOL v8 = 0;
  if ((v179 & 0x8000000000000000) == 0) {
    BOOL v8 = v179 < v178;
  }
  if (!v8)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"diff >= 0 && diff < (ptrdiff_t)rounded_size\" failed (/L"
                           "ibrary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:436)";
    __break(1u);
    JUMPOUT(0x76DCCLL);
  }
  int64_t v175 = v179;
  unint64_t v183 = v177;
  int64_t v182 = v179;
  unsigned int v165 = (unint64_t)v179 >> 14;
  if (v165 >= *(_DWORD *)(v167 + 16)) {
    uint64_t v168 = 0;
  }
  else {
    uint64_t v168 = v167 + 48 * v165 + 2136;
  }
  uint64_t v161 = v168;
  if (!v168)
  {
    unint64_t v164 = 0;
    goto LABEL_174;
  }
  unint64_t v160 = 0;
  unint64_t v170 = v161;
  if ((*(unsigned char *)(v161 + 32) & 0xF) == 4)
  {
    unint64_t v169 = 0;
    unint64_t v169 = v170 - *(unsigned int *)(v170 + 36);
    if (v169 < (v170 & 0xFFFFFFFFFFFFC000 | 0x858))
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"out_slice >= ((xzm_segment_t)((uintptr_t)slice & ~(XZM"
                             "_METAPOOL_SEGMENT_BLOCK_SIZE - 1)))->xzs_slices\" failed (/Library/Caches/com.apple.xbs/Sou"
                             "rces/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:582)";
      __break(1u);
      JUMPOUT(0x76EECLL);
    }
    unint64_t v173 = v169;
    unint64_t v172 = v170;
    int v7 = *(unsigned char *)(v169 + 32) & 0xF;
    if ((v7 - 1) < 2)
    {
      BOOL v174 = v173 == v172;
    }
    else if (v7 == 3 || (v7 - 5) < 4)
    {
      if (v172 < v173)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice >= span\" failed (/Library/Caches/com.apple.xb"
                               "s/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:560)";
        __break(1u);
        JUMPOUT(0x76F90);
      }
      BOOL v174 = v172 < v173 + 48 * *(unsigned int *)(v173 + 40);
    }
    else
    {
      BOOL v174 = 0;
    }
    if (v174) {
      unint64_t v171 = v169;
    }
    else {
      unint64_t v171 = v170;
    }
  }
  else
  {
    unint64_t v171 = v170;
  }
  unint64_t v160 = v171;
  unsigned __int8 v250 = *(unsigned char *)(v171 + 32) & 0xF;
  if (v250 >= 2u)
  {
    if (v250 == 2)
    {
LABEL_169:
      char v251 = 1;
      goto LABEL_170;
    }
    if (v250 - 3 >= 2)
    {
      if (v250 - 5 >= 3)
      {
        uint64_t v249 = v250;
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
        qword_C0148 = v250;
        __break(1u);
        JUMPOUT(0x770B4);
      }
      goto LABEL_169;
    }
  }
  char v251 = 0;
LABEL_170:
  if (v251 == 1) {
    unint64_t v6 = v160;
  }
  else {
    unint64_t v6 = 0;
  }
  unint64_t v164 = v6;
LABEL_174:
  unint64_t v39 = v164;
  if (v164)
  {
    if (*(unsigned __int16 *)(v39 + 34) == *(unsigned __int16 *)(v46 + 208))
    {
      uint64_t v38 = v45;
      unint64_t v37 = 0;
      uint64_t v55 = v46;
      unint64_t v54 = v39;
      uint64_t v53 = 0;
      uint64_t v57 = v46;
      unint64_t v56 = v39;
      uint64_t v60 = v46;
      unint64_t v59 = v39;
      unint64_t v58 = v39 & 0xFFFFFFFFFFFFC000;
      char v5 = 1;
      if ((v39 & 0xFFFFFFFFFFFFC000) != 0)
      {
        BOOL v4 = 0;
        if (v59 >= v58 + 2136) {
          BOOL v4 = v59 < v58 + 48 * *(unsigned int *)(v58 + 16) + 2136;
        }
        char v5 = v4;
      }
      if ((v5 & 1) == 0)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice <"
                               " (segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.ap"
                               "ple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
        __break(1u);
        JUMPOUT(0x77304);
      }
      unint64_t v62 = v58;
      unint64_t v61 = v56;
      unint64_t v67 = v58;
      unint64_t v66 = v56;
      if (v56 < v58 + 2136)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\""
                               " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzo"
                               "ne_inline_internal.h:278)";
        __break(1u);
        JUMPOUT(0x77368);
      }
      int64_t v65 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v66 - v67 - 2136) >> 4);
      if (v65 >= *(unsigned int *)(v67 + 16))
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" "
                               "failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzon"
                               "e_inline_internal.h:280)";
        __break(1u);
        JUMPOUT(0x773D0);
      }
      unint64_t v64 = v58;
      int v63 = v65;
      unint64_t v37 = *(void *)(v58 + 80) + ((unint64_t)v65 << 14);
      unint64_t v36 = v38 - v37;
      char v35 = 0;
      char v35 = *(unsigned char *)(v39 + 32) & 0xF;
      uint64_t v34 = 0;
      unint64_t v33 = 0;
      char v51 = v35;
      if (v35 == 2 || v35 == 5)
      {
        uint64_t v34 = *(void *)(v46 + 216) + 88 * *(unsigned __int8 *)(v39 + 33);
        unint64_t v33 = *(void *)(v34 + 48);
        if (!XZM_FAST_ALIGNED(v36, v33, *(_DWORD *)(v34 + 64)))
        {
          unint64_t v47 = 0;
          goto LABEL_226;
        }
      }
      else
      {
        unint64_t v33 = (unint64_t)*(unsigned int *)(v39 + 40) << 14;
        unint64_t v32 = v36 % v33;
        if (v36 % v33)
        {
          unint64_t v47 = 0;
          goto LABEL_226;
        }
      }
      unint64_t v31 = v36 / v33;
      char v49 = *(unsigned char *)(v39 + 32) & 0xF;
      BOOL v50 = v49 == 2 || v49 == 5;
      BOOL v3 = 1;
      if (v50) {
        BOOL v3 = v31 < *(unsigned int *)(v34 + 68);
      }
      if (!v3)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!_xzm_slice_kind_uses_xzones(chunk->xzc_bits.xzcb_ki"
                               "nd) || block_index < xz->xz_chunk_capacity\" failed (/Library/Caches/com.apple.xbs/Source"
                               "s/libmalloc_driverkit/src/xzone/xzone_malloc.c:2924)";
        __break(1u);
        JUMPOUT(0x77608);
      }
      uint64_t v225 = v46;
      uint64_t v224 = (atomic_ullong *)v39;
      char v223 = v35;
      unint64_t v222 = v36;
      unint64_t v221 = v33;
      uint64_t v220 = v38;
      if ((*(unsigned char *)(v39 + 32) & 0xF) != v35)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == kind\" failed (/Library"
                               "/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2801)";
        __break(1u);
        JUMPOUT(0x77678);
      }
      if (v223 == 2)
      {
        uint64_t v219 = 0;
        uint64_t v218 = 0;
        uint64_t v217 = *(void *)v220;
        uint64_t v218 = v217;
        uint64_t v216 = v217;
        uint64_t v219 = v217;
        uint64_t v215 = 0;
        uint64_t v215 = *(void *)(v225 + 272) ^ v220;
        if (v217 == v215)
        {
          char v214 = 0;
          char v214 = _xzm_xzone_tiny_chunk_block_is_free_slow(v225, v224, v220);
          char v226 = v214 & 1;
        }
        else
        {
          char v226 = 0;
        }
      }
      else if (v223 == 5)
      {
        unint64_t v213 = v222 / v221;
        int v256 = v224;
        int v255 = v222 / v221;
        if ((*((unsigned char *)v224 + 32) & 0xF) != 5)
        {
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == XZM_SLICE_KIND_SMALL_"
                                 "CHUNK\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../"
                                 "xzone/xzone_inline_internal.h:919)";
          __break(1u);
          JUMPOUT(0x77798);
        }
        char v226 = (*(_DWORD *)v256 >> v255) & 1;
      }
      else
      {
        char v226 = 0;
      }
      if (v226 == 1)
      {
        unint64_t v47 = 0;
      }
      else
      {
        if (v44) {
          *unint64_t v44 = v34;
        }
        if (v43) {
          *uint64_t v43 = v38;
        }
        if (v42) {
          *uint64_t v42 = v33;
        }
        unint64_t v47 = v39;
      }
      goto LABEL_226;
    }
    unint64_t v47 = 0;
  }
  else
  {
    unint64_t v47 = 0;
  }
LABEL_226:
  unint64_t v24 = v47;
  if (v27) {
    *unsigned __int8 v27 = v47;
  }
  if (v24)
  {
    if (v26 == v28) {
      uint64_t v30 = v25;
    }
    else {
      uint64_t v30 = v25 - (v28 - v26);
    }
  }
  else
  {
    uint64_t v30 = _xzm_ptr_size_outlined(v29, (unint64_t)v28);
  }
  if (!v30)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"our_size != 0\" failed (/Library/Caches/com.apple.xbs/So"
                           "urces/libmalloc_driverkit/src/xzone/xzone_malloc.c:3433)";
    __break(1u);
    JUMPOUT(0x7790CLL);
  }
LABEL_235:
  if ((*(unsigned char *)(a1 + 296) & 0x20) != 0 && a3 >= 0x401) {
    _platform_memset();
  }
  if (v20) {
    xzm_malloc_zone_free_definite_size(v20, a2);
  }
  else {
    xzm_malloc_zone_free_definite_size(a1, a2);
  }
}

void xzm_malloc_zone_try_free_default_slow(uint64_t a1, char *a2)
{
  if (!a2) {
    return;
  }
  uint64_t v73 = a1;
  unint64_t v72 = a2;
  mach_vm_address_t v71 = 0;
  uint64_t v70 = 0;
  uint64_t v69 = 0;
  unint64_t v68 = 0;
  uint64_t v90 = a1;
  unint64_t v89 = (unint64_t)a2;
  unint64_t v88 = 0;
  int v87 = (uint64_t *)&v70;
  uint64_t v86 = &v69;
  uint64_t v85 = 0;
  uint64_t v92 = a1;
  if (*(void *)(a1 + 232)) {
    uint64_t v18 = *(void *)(a1 + 232);
  }
  else {
    uint64_t v18 = v92;
  }
  uint64_t v85 = v18;
  unint64_t v84 = 0;
  uint64_t v114 = v18;
  unint64_t v113 = v89;
  unint64_t v112 = 0;
  unint64_t v234 = v89;
  uint64_t v233 = v18;
  uint64_t v232 = 0;
  unint64_t v231 = 0;
  unint64_t v241 = v89;
  unint64_t v240 = &v232;
  unint64_t v239 = v89;
  if (v89 >> 36)
  {
    *unint64_t v240 = 0;
    unint64_t v242 = 0x4000;
  }
  else
  {
    unint64_t v238 = v239 >> 22;
    *unint64_t v240 = 0;
    if (v238 >= 0x4000)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segindex < XZM_SEGMENT_TABLE_ENTRIES\" failed (/Librar"
                             "y/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:169)";
      __break(1u);
      JUMPOUT(0x77B10);
    }
    unint64_t v242 = v238;
  }
  unint64_t v231 = v242;
  if (v242 >= 0x4000) {
    uint64_t v235 = 0;
  }
  else {
    uint64_t v235 = *(void *)(v233 + 408) + 4 * v231;
  }
  unint64_t v112 = (unsigned int *)v235;
  if (v235)
  {
    unsigned int v237 = *v112;
    unint64_t v115 = (unint64_t)v237 << 14;
  }
  else
  {
    unint64_t v115 = 0;
  }
  unint64_t v84 = v115;
  if (!v115)
  {
    unint64_t v91 = 0;
    goto LABEL_108;
  }
  unint64_t v83 = 0;
  unint64_t v123 = v84;
  unint64_t v122 = v89;
  uint64_t v121 = 0;
  unint64_t v127 = v84;
  unint64_t v126 = v89;
  unsigned int v125 = 0;
  unint64_t v137 = v84;
  unint64_t v136 = v89;
  int64_t v135 = 0;
  unint64_t v141 = v84;
  unint64_t v140 = v89;
  int64_t v139 = 0;
  unint64_t v144 = v84;
  unint64_t v146 = v84;
  int v145 = 0;
  int64_t v139 = v89 - *(void *)(v84 + 80);
  int64_t v138 = 0;
  unint64_t v154 = v84;
  int v153 = 0;
  unint64_t v155 = v84;
  int v153 = *(_DWORD *)(v84 + 12);
  if ((unint64_t)v153 << 14)
  {
    unint64_t v152 = v141;
    unsigned int v151 = 0;
    unint64_t v156 = v141;
    unsigned int v151 = *(_DWORD *)(v141 + 12);
    unint64_t v150 = v141;
    int v149 = 0;
    unint64_t v157 = v141;
    int v149 = *(_DWORD *)(v141 + 12);
    unint64_t v17 = ((unint64_t)v151 << 14) - ((unint64_t)v149 << 14) + 0x400000;
  }
  else
  {
    unint64_t v148 = v141;
    unsigned int v147 = 0;
    unint64_t v158 = v141;
    unsigned int v147 = *(_DWORD *)(v141 + 12);
    unint64_t v17 = (unint64_t)v147 << 14;
  }
  int64_t v138 = v17;
  BOOL v16 = 0;
  if ((v139 & 0x8000000000000000) == 0) {
    BOOL v16 = v139 < v138;
  }
  if (!v16)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"diff >= 0 && diff < (ptrdiff_t)rounded_size\" failed (/L"
                           "ibrary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:436)";
    __break(1u);
    JUMPOUT(0x77D78);
  }
  int64_t v135 = v139;
  unint64_t v143 = v137;
  int64_t v142 = v139;
  unsigned int v125 = (unint64_t)v139 >> 14;
  if (v125 >= *(_DWORD *)(v127 + 16)) {
    uint64_t v128 = 0;
  }
  else {
    uint64_t v128 = v127 + 48 * v125 + 2136;
  }
  uint64_t v121 = v128;
  if (!v128)
  {
    unint64_t v124 = 0;
    goto LABEL_56;
  }
  unint64_t v120 = 0;
  unint64_t v130 = v121;
  if ((*(unsigned char *)(v121 + 32) & 0xF) == 4)
  {
    unint64_t v129 = 0;
    unint64_t v129 = v130 - *(unsigned int *)(v130 + 36);
    if (v129 < (v130 & 0xFFFFFFFFFFFFC000 | 0x858))
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"out_slice >= ((xzm_segment_t)((uintptr_t)slice & ~(XZM"
                             "_METAPOOL_SEGMENT_BLOCK_SIZE - 1)))->xzs_slices\" failed (/Library/Caches/com.apple.xbs/Sou"
                             "rces/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:582)";
      __break(1u);
      JUMPOUT(0x77E98);
    }
    unint64_t v133 = v129;
    unint64_t v132 = v130;
    int v15 = *(unsigned char *)(v129 + 32) & 0xF;
    if ((v15 - 1) < 2)
    {
      BOOL v134 = v133 == v132;
    }
    else if (v15 == 3 || (v15 - 5) < 4)
    {
      if (v132 < v133)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice >= span\" failed (/Library/Caches/com.apple.xb"
                               "s/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:560)";
        __break(1u);
        JUMPOUT(0x77F3CLL);
      }
      BOOL v134 = v132 < v133 + 48 * *(unsigned int *)(v133 + 40);
    }
    else
    {
      BOOL v134 = 0;
    }
    if (v134) {
      unint64_t v131 = v129;
    }
    else {
      unint64_t v131 = v130;
    }
  }
  else
  {
    unint64_t v131 = v130;
  }
  unint64_t v120 = v131;
  unsigned __int8 v252 = *(unsigned char *)(v131 + 32) & 0xF;
  if (v252 >= 2u)
  {
    if (v252 == 2)
    {
LABEL_51:
      char v253 = 1;
      goto LABEL_52;
    }
    if (v252 - 3 >= 2)
    {
      if (v252 - 5 >= 3)
      {
        uint64_t v251 = v252;
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
        qword_C0148 = v252;
        __break(1u);
        JUMPOUT(0x78060);
      }
      goto LABEL_51;
    }
  }
  char v253 = 0;
LABEL_52:
  if (v253 == 1) {
    unint64_t v14 = v120;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v124 = v14;
LABEL_56:
  unint64_t v83 = v124;
  if (!v124)
  {
    unint64_t v91 = 0;
    goto LABEL_108;
  }
  if (*(unsigned __int16 *)(v83 + 34) != *(unsigned __int16 *)(v90 + 208))
  {
    unint64_t v91 = 0;
    goto LABEL_108;
  }
  uint64_t v82 = v89;
  unint64_t v81 = 0;
  uint64_t v99 = v90;
  unint64_t v98 = v83;
  uint64_t v97 = 0;
  uint64_t v101 = v90;
  unint64_t v100 = v83;
  uint64_t v104 = v90;
  unint64_t v103 = v83;
  unint64_t v102 = v83 & 0xFFFFFFFFFFFFC000;
  char v13 = 1;
  if ((v83 & 0xFFFFFFFFFFFFC000) != 0)
  {
    BOOL v12 = 0;
    if (v103 >= v102 + 2136) {
      BOOL v12 = v103 < v102 + 48 * *(unsigned int *)(v102 + 16) + 2136;
    }
    char v13 = v12;
  }
  if ((v13 & 1) == 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0x782B0);
  }
  unint64_t v106 = v102;
  unint64_t v105 = v100;
  unint64_t v111 = v102;
  unint64_t v110 = v100;
  if (v100 < v102 + 2136)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" fai"
                           "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                           "e_internal.h:278)";
    __break(1u);
    JUMPOUT(0x78314);
  }
  int64_t v109 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v110 - v111 - 2136) >> 4);
  if (v109 >= *(unsigned int *)(v111 + 16))
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fail"
                           "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline"
                           "_internal.h:280)";
    __break(1u);
    JUMPOUT(0x7837CLL);
  }
  unint64_t v108 = v102;
  int v107 = v109;
  unint64_t v81 = *(void *)(v102 + 80) + ((unint64_t)v109 << 14);
  unint64_t v80 = v82 - v81;
  char v79 = 0;
  char v79 = *(unsigned char *)(v83 + 32) & 0xF;
  uint64_t v78 = 0;
  unint64_t v77 = 0;
  char v95 = v79;
  if (v79 == 2 || v79 == 5)
  {
    uint64_t v78 = *(void *)(v90 + 216) + 88 * *(unsigned __int8 *)(v83 + 33);
    unint64_t v77 = *(void *)(v78 + 48);
    if (!XZM_FAST_ALIGNED(v80, v77, *(_DWORD *)(v78 + 64)))
    {
      unint64_t v91 = 0;
      goto LABEL_108;
    }
  }
  else
  {
    unint64_t v77 = (unint64_t)*(unsigned int *)(v83 + 40) << 14;
    unint64_t v76 = v80 % v77;
    if (v80 % v77)
    {
      unint64_t v91 = 0;
      goto LABEL_108;
    }
  }
  unint64_t v75 = v80 / v77;
  char v93 = *(unsigned char *)(v83 + 32) & 0xF;
  BOOL v94 = v93 == 2 || v93 == 5;
  BOOL v11 = 1;
  if (v94) {
    BOOL v11 = v75 < *(unsigned int *)(v78 + 68);
  }
  if (!v11)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!_xzm_slice_kind_uses_xzones(chunk->xzc_bits.xzcb_kind) "
                           "|| block_index < xz->xz_chunk_capacity\" failed (/Library/Caches/com.apple.xbs/Sources/libmal"
                           "loc_driverkit/src/xzone/xzone_malloc.c:2924)";
    __break(1u);
    JUMPOUT(0x785B4);
  }
  uint64_t v210 = v90;
  char v209 = (atomic_ullong *)v83;
  char v208 = v79;
  unint64_t v207 = v80;
  unint64_t v206 = v77;
  uint64_t v205 = v82;
  if ((*(unsigned char *)(v83 + 32) & 0xF) != v79)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == kind\" failed (/Library/Cac"
                           "hes/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2801)";
    __break(1u);
    JUMPOUT(0x78624);
  }
  if (v208 == 2)
  {
    uint64_t v204 = 0;
    uint64_t v203 = 0;
    uint64_t v202 = *(void *)v205;
    uint64_t v203 = v202;
    uint64_t v201 = v202;
    uint64_t v204 = v202;
    uint64_t v200 = 0;
    uint64_t v200 = *(void *)(v210 + 272) ^ v205;
    if (v202 == v200)
    {
      char is_free_slow = 0;
      char is_free_slow = _xzm_xzone_tiny_chunk_block_is_free_slow(v210, v209, v205);
      char v211 = is_free_slow & 1;
    }
    else
    {
      char v211 = 0;
    }
  }
  else if (v208 == 5)
  {
    unint64_t v198 = v207 / v206;
    int v257 = v209;
    int v256 = v207 / v206;
    if ((*((unsigned char *)v209 + 32) & 0xF) != 5)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == XZM_SLICE_KIND_SMALL_CHUN"
                             "K\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xz"
                             "one_inline_internal.h:919)";
      __break(1u);
      JUMPOUT(0x78744);
    }
    char v211 = (*(_DWORD *)v257 >> v256) & 1;
  }
  else
  {
    char v211 = 0;
  }
  if (v211 == 1)
  {
    unint64_t v91 = 0;
  }
  else
  {
    if (v88) {
      *unint64_t v88 = v78;
    }
    if (v87) {
      *int v87 = v82;
    }
    if (v86) {
      *uint64_t v86 = v77;
    }
    unint64_t v91 = v83;
  }
LABEL_108:
  unint64_t v68 = v91;
  if (v71) {
    unint64_t *v71 = v68;
  }
  if (v68)
  {
    if (v70 == v72)
    {
      uint64_t v74 = v69;
    }
    else
    {
      unint64_t v67 = (char *)(v72 - v70);
      uint64_t v74 = v69 - (v72 - v70);
    }
  }
  else
  {
    uint64_t v74 = _xzm_ptr_size_outlined(v73, (unint64_t)v72);
  }
  unint64_t v20 = v74;
  uint64_t v19 = 0;
  if (v74 || (*(unsigned char *)(a1 + 296) & 0x80) == 0) {
    goto LABEL_234;
  }
  if (*(void *)(a1 + 232)) {
    uint64_t v10 = *(void *)(a1 + 232);
  }
  else {
    uint64_t v10 = a1;
  }
  uint64_t v19 = v10;
  uint64_t v28 = v10;
  unsigned __int8 v27 = a2;
  unsigned __int8 v26 = 0;
  uint64_t v25 = 0;
  uint64_t v24 = 0;
  uint64_t v45 = v10;
  unint64_t v44 = (unint64_t)a2;
  uint64_t v43 = 0;
  uint64_t v42 = (uint64_t *)&v25;
  uint64_t v41 = &v24;
  uint64_t v40 = 0;
  uint64_t v47 = v10;
  if (*(void *)(v10 + 232)) {
    uint64_t v9 = *(void *)(v10 + 232);
  }
  else {
    uint64_t v9 = v47;
  }
  uint64_t v40 = v9;
  unint64_t v39 = 0;
  uint64_t v118 = v9;
  unint64_t v117 = v44;
  unint64_t v116 = 0;
  unint64_t v229 = v44;
  uint64_t v228 = v9;
  uint64_t v227 = 0;
  unint64_t v226 = 0;
  unint64_t v246 = v44;
  unint64_t v245 = &v227;
  unint64_t v244 = v44;
  if (v44 >> 36)
  {
    *unint64_t v245 = 0;
    unint64_t v247 = 0x4000;
  }
  else
  {
    unint64_t v243 = v244 >> 22;
    *unint64_t v245 = 0;
    if (v243 >= 0x4000)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segindex < XZM_SEGMENT_TABLE_ENTRIES\" failed (/Librar"
                             "y/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:169)";
      __break(1u);
      JUMPOUT(0x78A48);
    }
    unint64_t v247 = v243;
  }
  unint64_t v226 = v247;
  if (v247 >= 0x4000) {
    uint64_t v230 = 0;
  }
  else {
    uint64_t v230 = *(void *)(v228 + 408) + 4 * v226;
  }
  unint64_t v116 = (unsigned int *)v230;
  if (v230)
  {
    unsigned int v236 = *v116;
    unint64_t v119 = (unint64_t)v236 << 14;
  }
  else
  {
    unint64_t v119 = 0;
  }
  unint64_t v39 = v119;
  if (!v119)
  {
    unint64_t v46 = 0;
    goto LABEL_226;
  }
  unint64_t v38 = 0;
  unint64_t v162 = v39;
  unint64_t v161 = v44;
  uint64_t v160 = 0;
  unint64_t v166 = v39;
  unint64_t v165 = v44;
  unsigned int v164 = 0;
  unint64_t v176 = v39;
  unint64_t v175 = v44;
  int64_t v174 = 0;
  unint64_t v180 = v39;
  unint64_t v179 = v44;
  int64_t v178 = 0;
  unint64_t v183 = v39;
  unint64_t v185 = v39;
  int v184 = 0;
  int64_t v178 = v44 - *(void *)(v39 + 80);
  int64_t v177 = 0;
  unint64_t v193 = v39;
  int v192 = 0;
  unint64_t v194 = v39;
  int v192 = *(_DWORD *)(v39 + 12);
  if ((unint64_t)v192 << 14)
  {
    unint64_t v191 = v180;
    unsigned int v190 = 0;
    unint64_t v195 = v180;
    unsigned int v190 = *(_DWORD *)(v180 + 12);
    unint64_t v189 = v180;
    int v188 = 0;
    unint64_t v196 = v180;
    int v188 = *(_DWORD *)(v180 + 12);
    unint64_t v8 = ((unint64_t)v190 << 14) - ((unint64_t)v188 << 14) + 0x400000;
  }
  else
  {
    unint64_t v187 = v180;
    unsigned int v186 = 0;
    unint64_t v197 = v180;
    unsigned int v186 = *(_DWORD *)(v180 + 12);
    unint64_t v8 = (unint64_t)v186 << 14;
  }
  int64_t v177 = v8;
  BOOL v7 = 0;
  if ((v178 & 0x8000000000000000) == 0) {
    BOOL v7 = v178 < v177;
  }
  if (!v7)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"diff >= 0 && diff < (ptrdiff_t)rounded_size\" failed (/L"
                           "ibrary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:436)";
    __break(1u);
    JUMPOUT(0x78CB0);
  }
  int64_t v174 = v178;
  unint64_t v182 = v176;
  int64_t v181 = v178;
  unsigned int v164 = (unint64_t)v178 >> 14;
  if (v164 >= *(_DWORD *)(v166 + 16)) {
    uint64_t v167 = 0;
  }
  else {
    uint64_t v167 = v166 + 48 * v164 + 2136;
  }
  uint64_t v160 = v167;
  if (!v167)
  {
    unint64_t v163 = 0;
    goto LABEL_174;
  }
  unint64_t v159 = 0;
  unint64_t v169 = v160;
  if ((*(unsigned char *)(v160 + 32) & 0xF) == 4)
  {
    unint64_t v168 = 0;
    unint64_t v168 = v169 - *(unsigned int *)(v169 + 36);
    if (v168 < (v169 & 0xFFFFFFFFFFFFC000 | 0x858))
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"out_slice >= ((xzm_segment_t)((uintptr_t)slice & ~(XZM"
                             "_METAPOOL_SEGMENT_BLOCK_SIZE - 1)))->xzs_slices\" failed (/Library/Caches/com.apple.xbs/Sou"
                             "rces/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:582)";
      __break(1u);
      JUMPOUT(0x78DD0);
    }
    unint64_t v172 = v168;
    unint64_t v171 = v169;
    int v6 = *(unsigned char *)(v168 + 32) & 0xF;
    if ((v6 - 1) < 2)
    {
      BOOL v173 = v172 == v171;
    }
    else if (v6 == 3 || (v6 - 5) < 4)
    {
      if (v171 < v172)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice >= span\" failed (/Library/Caches/com.apple.xb"
                               "s/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:560)";
        __break(1u);
        JUMPOUT(0x78E74);
      }
      BOOL v173 = v171 < v172 + 48 * *(unsigned int *)(v172 + 40);
    }
    else
    {
      BOOL v173 = 0;
    }
    if (v173) {
      unint64_t v170 = v168;
    }
    else {
      unint64_t v170 = v169;
    }
  }
  else
  {
    unint64_t v170 = v169;
  }
  unint64_t v159 = v170;
  unsigned __int8 v249 = *(unsigned char *)(v170 + 32) & 0xF;
  if (v249 >= 2u)
  {
    if (v249 == 2)
    {
LABEL_169:
      char v250 = 1;
      goto LABEL_170;
    }
    if (v249 - 3 >= 2)
    {
      if (v249 - 5 >= 3)
      {
        uint64_t v248 = v249;
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
        qword_C0148 = v249;
        __break(1u);
        JUMPOUT(0x78F98);
      }
      goto LABEL_169;
    }
  }
  char v250 = 0;
LABEL_170:
  if (v250 == 1) {
    unint64_t v5 = v159;
  }
  else {
    unint64_t v5 = 0;
  }
  unint64_t v163 = v5;
LABEL_174:
  unint64_t v38 = v163;
  if (v163)
  {
    if (*(unsigned __int16 *)(v38 + 34) == *(unsigned __int16 *)(v45 + 208))
    {
      uint64_t v37 = v44;
      unint64_t v36 = 0;
      uint64_t v54 = v45;
      unint64_t v53 = v38;
      uint64_t v52 = 0;
      uint64_t v56 = v45;
      unint64_t v55 = v38;
      uint64_t v59 = v45;
      unint64_t v58 = v38;
      unint64_t v57 = v38 & 0xFFFFFFFFFFFFC000;
      char v4 = 1;
      if ((v38 & 0xFFFFFFFFFFFFC000) != 0)
      {
        BOOL v3 = 0;
        if (v58 >= v57 + 2136) {
          BOOL v3 = v58 < v57 + 48 * *(unsigned int *)(v57 + 16) + 2136;
        }
        char v4 = v3;
      }
      if ((v4 & 1) == 0)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice <"
                               " (segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.ap"
                               "ple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
        __break(1u);
        JUMPOUT(0x791E8);
      }
      unint64_t v61 = v57;
      unint64_t v60 = v55;
      unint64_t v66 = v57;
      unint64_t v65 = v55;
      if (v55 < v57 + 2136)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\""
                               " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzo"
                               "ne_inline_internal.h:278)";
        __break(1u);
        JUMPOUT(0x7924CLL);
      }
      int64_t v64 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v65 - v66 - 2136) >> 4);
      if (v64 >= *(unsigned int *)(v66 + 16))
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" "
                               "failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzon"
                               "e_inline_internal.h:280)";
        __break(1u);
        JUMPOUT(0x792B4);
      }
      unint64_t v63 = v57;
      int v62 = v64;
      unint64_t v36 = *(void *)(v57 + 80) + ((unint64_t)v64 << 14);
      unint64_t v35 = v37 - v36;
      char v34 = 0;
      char v34 = *(unsigned char *)(v38 + 32) & 0xF;
      uint64_t v33 = 0;
      unint64_t v32 = 0;
      char v50 = v34;
      if (v34 == 2 || v34 == 5)
      {
        uint64_t v33 = *(void *)(v45 + 216) + 88 * *(unsigned __int8 *)(v38 + 33);
        unint64_t v32 = *(void *)(v33 + 48);
        if (!XZM_FAST_ALIGNED(v35, v32, *(_DWORD *)(v33 + 64)))
        {
          unint64_t v46 = 0;
          goto LABEL_226;
        }
      }
      else
      {
        unint64_t v32 = (unint64_t)*(unsigned int *)(v38 + 40) << 14;
        unint64_t v31 = v35 % v32;
        if (v35 % v32)
        {
          unint64_t v46 = 0;
          goto LABEL_226;
        }
      }
      unint64_t v30 = v35 / v32;
      char v48 = *(unsigned char *)(v38 + 32) & 0xF;
      BOOL v49 = v48 == 2 || v48 == 5;
      BOOL v2 = 1;
      if (v49) {
        BOOL v2 = v30 < *(unsigned int *)(v33 + 68);
      }
      if (!v2)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!_xzm_slice_kind_uses_xzones(chunk->xzc_bits.xzcb_ki"
                               "nd) || block_index < xz->xz_chunk_capacity\" failed (/Library/Caches/com.apple.xbs/Source"
                               "s/libmalloc_driverkit/src/xzone/xzone_malloc.c:2924)";
        __break(1u);
        JUMPOUT(0x794ECLL);
      }
      uint64_t v224 = v45;
      char v223 = (atomic_ullong *)v38;
      char v222 = v34;
      unint64_t v221 = v35;
      unint64_t v220 = v32;
      uint64_t v219 = v37;
      if ((*(unsigned char *)(v38 + 32) & 0xF) != v34)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == kind\" failed (/Library"
                               "/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2801)";
        __break(1u);
        JUMPOUT(0x7955CLL);
      }
      if (v222 == 2)
      {
        uint64_t v218 = 0;
        uint64_t v217 = 0;
        uint64_t v216 = *(void *)v219;
        uint64_t v217 = v216;
        uint64_t v215 = v216;
        uint64_t v218 = v216;
        uint64_t v214 = 0;
        uint64_t v214 = *(void *)(v224 + 272) ^ v219;
        if (v216 == v214)
        {
          char v213 = 0;
          char v213 = _xzm_xzone_tiny_chunk_block_is_free_slow(v224, v223, v219);
          char v225 = v213 & 1;
        }
        else
        {
          char v225 = 0;
        }
      }
      else if (v222 == 5)
      {
        unint64_t v212 = v221 / v220;
        int v255 = v223;
        int v254 = v221 / v220;
        if ((*((unsigned char *)v223 + 32) & 0xF) != 5)
        {
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == XZM_SLICE_KIND_SMALL_"
                                 "CHUNK\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../"
                                 "xzone/xzone_inline_internal.h:919)";
          __break(1u);
          JUMPOUT(0x7967CLL);
        }
        char v225 = (*(_DWORD *)v255 >> v254) & 1;
      }
      else
      {
        char v225 = 0;
      }
      if (v225 == 1)
      {
        unint64_t v46 = 0;
      }
      else
      {
        if (v43) {
          *uint64_t v43 = v33;
        }
        if (v42) {
          *uint64_t v42 = v37;
        }
        if (v41) {
          *uint64_t v41 = v32;
        }
        unint64_t v46 = v38;
      }
      goto LABEL_226;
    }
    unint64_t v46 = 0;
  }
  else
  {
    unint64_t v46 = 0;
  }
LABEL_226:
  unint64_t v23 = v46;
  if (v26) {
    *unsigned __int8 v26 = v46;
  }
  if (v23)
  {
    if (v25 == v27) {
      uint64_t v29 = v24;
    }
    else {
      uint64_t v29 = v24 - (v27 - v25);
    }
  }
  else
  {
    uint64_t v29 = _xzm_ptr_size_outlined(v28, (unint64_t)v27);
  }
  unint64_t v20 = v29;
LABEL_234:
  if (v20)
  {
    if (v20 >= 0x401 && (*(unsigned char *)(a1 + 296) & 0x20) != 0) {
      _platform_memset();
    }
    if (v19) {
      xzm_malloc_zone_try_free_default(v19, a2);
    }
    else {
      xzm_malloc_zone_try_free_default(a1, a2);
    }
  }
  else
  {
    find_zone_and_free(a2, 1);
  }
}

uint64_t xzm_malloc_zone_malloc_with_options_slow(uint64_t a1, unint64_t a2, unint64_t a3, char a4, __n128 a5, float a6)
{
  return xzm_malloc_zone_malloc_type_malloc_with_options_slow(a1, a2, a3, a4, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904), a5, a6);
}

_OWORD *xzm_malloc_zone_malloc_type_malloc_slow(uint64_t a1, unint64_t a2, uint64_t a3, __n128 a4, float a5)
{
  if ((*(unsigned char *)(a1 + 296) & 0x80) != 0 && a2 <= 0x8000)
  {
    if (*(void *)(a1 + 232)) {
      uint64_t v11 = *(void *)(a1 + 232);
    }
    else {
      uint64_t v11 = a1;
    }
    if ((*(unsigned char *)(v11 + 296) & 0x80) != 0)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(zone->xzz_flags & MALLOC_PURGEABLE) == 0\" failed (/L"
                             "ibrary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2266)";
      __break(1u);
      JUMPOUT(0x79A00);
    }
    unsigned int v18 = a3;
    if (*(void *)(v11 + 232)) {
      uint64_t v10 = *(void **)(v11 + 232);
    }
    else {
      uint64_t v10 = (void *)v11;
    }
    if (a2)
    {
      if (a2 > 0x80)
      {
        char v29 = 63 - __clz(a2 - 1);
        unsigned __int8 v30 = (((a2 - 1) >> (v29 - 2)) & 3 | (4 * v29)) - 20;
      }
      else
      {
        if ((a2 & 0xF) != 0) {
          uint64_t v9 = (a2 >> 4) + 1;
        }
        else {
          uint64_t v9 = a2 >> 4;
        }
        unsigned __int8 v30 = v9 - 1;
      }
    }
    else
    {
      unsigned __int8 v30 = 0;
    }
    unsigned __int8 v17 = *(unsigned char *)(v10[45] + v30);
    if (HIWORD(a3) == 256)
    {
      unsigned __int8 v16 = 0;
    }
    else if (((WORD2(a3) >> 10) & 3) == 1)
    {
      unsigned __int8 v16 = 1;
    }
    else
    {
      if (!a3) {
        unsigned int v18 = HIDWORD(malloc_entropy[0]);
      }
      unint64_t v20 = (__n128 *)(v10 + 39);
      if ((v17 - 2) >= 5u)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr_bucket_count <= XZM_POINTER_BUCKETS_MAX\" failed"
                               " (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:99)";
        __break(1u);
        JUMPOUT(0x79CB4);
      }
      switch(v17)
      {
        case 4u:
          char v19 = (int)(v20->n128_u64[0] * v18 + HIDWORD(v20->n128_u64[0])) < 0;
          break;
        case 5u:
          a4 = *v20;
          unint64_t v5 = (v10[39] * (unint64_t)v18 + v10[40]) >> 34;
          char v19 = v5 - 3 * ((v5 * (unsigned __int128)0x5555555555555556uLL) >> 64);
          break;
        case 6u:
          a4 = *v20;
          char v19 = ((v10[39] * (unint64_t)v18 + v10[40]) >> 32) & 3;
          break;
        default:
          char v19 = 0;
          break;
      }
      unsigned __int8 v16 = v19 + 2;
    }
    if (v16 >= (int)v17)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"bucket < bin_bucket_count\" failed (/Library/Caches/co"
                             "m.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:181)";
      __break(1u);
      JUMPOUT(0x79E58);
    }
    int v15 = _xzm_xzone_malloc(v11, a2, *(unsigned char *)(v10[46] + v30) + v16, 0, a4.n128_f64[0], a5);
    if (!v15)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr\" failed (/Library/Caches/com.apple.xbs/Sources/li"
                             "bmalloc_driverkit/src/xzone/xzone_malloc.c:2272)";
      __break(1u);
      JUMPOUT(0x79EB4);
    }
    BOOL v12 = v15;
  }
  else
  {
    if (a2 <= 0x8000)
    {
      if ((*(unsigned char *)(a1 + 296) & 0x80) != 0)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(zone->xzz_flags & MALLOC_PURGEABLE) == 0\" failed ("
                               "/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2266)";
        __break(1u);
        JUMPOUT(0x79F94);
      }
      unsigned int v23 = a3;
      if (*(void *)(a1 + 232)) {
        unint64_t v8 = *(void **)(a1 + 232);
      }
      else {
        unint64_t v8 = (void *)a1;
      }
      if (a2)
      {
        if (a2 > 0x80)
        {
          char v27 = 63 - __clz(a2 - 1);
          unsigned __int8 v28 = (((a2 - 1) >> (v27 - 2)) & 3 | (4 * v27)) - 20;
        }
        else
        {
          if ((a2 & 0xF) != 0) {
            uint64_t v7 = (a2 >> 4) + 1;
          }
          else {
            uint64_t v7 = a2 >> 4;
          }
          unsigned __int8 v28 = v7 - 1;
        }
      }
      else
      {
        unsigned __int8 v28 = 0;
      }
      unsigned __int8 v22 = *(unsigned char *)(v8[45] + v28);
      if (HIWORD(a3) == 256)
      {
        unsigned __int8 v21 = 0;
      }
      else if (((WORD2(a3) >> 10) & 3) == 1)
      {
        unsigned __int8 v21 = 1;
      }
      else
      {
        if (!a3) {
          unsigned int v23 = HIDWORD(malloc_entropy[0]);
        }
        unsigned __int8 v26 = (__n128 *)(v8 + 39);
        if ((v22 - 2) >= 5u)
        {
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr_bucket_count <= XZM_POINTER_BUCKETS_MAX\" fail"
                                 "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:99)";
          __break(1u);
          JUMPOUT(0x7A248);
        }
        switch(v22)
        {
          case 4u:
            char v25 = (int)(v26->n128_u64[0] * v23 + HIDWORD(v26->n128_u64[0])) < 0;
            break;
          case 5u:
            a4 = *v26;
            unint64_t v24 = v8[39] * v23 + v8[40];
            char v25 = (v24 >> 34) - 3 * (((v24 >> 34) * (unsigned __int128)0x5555555555555556uLL) >> 64);
            break;
          case 6u:
            a4 = *v26;
            char v25 = ((v8[39] * (unint64_t)v23 + v8[40]) >> 32) & 3;
            break;
          default:
            char v25 = 0;
            break;
        }
        unsigned __int8 v21 = v25 + 2;
      }
      if (v21 >= (int)v22)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"bucket < bin_bucket_count\" failed (/Library/Caches/"
                               "com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:181)";
        __break(1u);
        JUMPOUT(0x7A3ECLL);
      }
      uint64_t v14 = (uint64_t)_xzm_xzone_malloc(a1, a2, *(unsigned char *)(v8[46] + v28) + v21, 0, a4.n128_f64[0], a5);
    }
    else
    {
      uint64_t v14 = _xzm_malloc_large_huge(a1, a2, 0, a3, 0);
    }
    if (!v14)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr\" failed (/Library/Caches/com.apple.xbs/Sources/li"
                             "bmalloc_driverkit/src/xzone/xzone_malloc.c:2272)";
      __break(1u);
      JUMPOUT(0x7A448);
    }
    BOOL v12 = (_OWORD *)v14;
  }
  if ((*(unsigned char *)(a1 + 296) & 0x20) != 0) {
    _platform_memset();
  }
  return v12;
}

_OWORD *xzm_malloc_zone_malloc_type_calloc_slow(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, __n128 a5, float a6)
{
  uint64_t v16 = a1;
  unint64_t v15 = a2;
  unint64_t v14 = a3;
  uint64_t v13 = a4;
  unint64_t v12 = 0;
  unint64_t v91 = a2;
  unint64_t v90 = a3;
  uint64_t v89 = 0;
  unint64_t v88 = &v12;
  unint64_t v87 = a3;
  if (a2 == 1 || (unint64_t v87 = v91 * v90, !(v93 = !is_mul_ok(v91, v90))) && v87 <= malloc_absolute_max_size)
  {
    *unint64_t v88 = v87;
    int v92 = 0;
  }
  else
  {
    malloc_set_errno_fast(1, 12);
    int v92 = -1;
  }
  if (v92) {
    return 0;
  }
  if ((*(unsigned char *)(v16 + 296) & 0x80) != 0 && v12 <= 0x8000)
  {
    uint64_t v76 = v16;
    if (*(void *)(v16 + 232)) {
      uint64_t v9 = *(void *)(v16 + 232);
    }
    else {
      uint64_t v9 = v76;
    }
    uint64_t v23 = v13;
    uint64_t v22 = v9;
    unint64_t v21 = v12;
    int v20 = 1;
    char v19 = 0;
    if ((*(unsigned char *)(v9 + 296) & 0x80) != 0)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(zone->xzz_flags & MALLOC_PURGEABLE) == 0\" failed (/L"
                             "ibrary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2266)";
      __break(1u);
      JUMPOUT(0x7ACF4);
    }
    char v18 = 0;
    uint64_t v62 = v23;
    uint64_t v61 = v22;
    unint64_t v60 = v21;
    uint64_t v59 = 0;
    uint64_t v74 = v22;
    if (*(void *)(v22 + 232)) {
      uint64_t v8 = *(void *)(v22 + 232);
    }
    else {
      uint64_t v8 = v74;
    }
    uint64_t v59 = (void *)v8;
    unsigned __int8 v58 = 0;
    unint64_t v78 = v60;
    if (v60)
    {
      if (v78 > 0x80)
      {
        int v77 = 63 - __clz(--v78);
        unsigned __int8 v79 = ((v78 >> (v77 - 2)) & 3 | (4 * v77)) - 20;
      }
      else
      {
        if ((v78 & 0xF) != 0) {
          unint64_t v7 = (v78 >> 4) + 1;
        }
        else {
          unint64_t v7 = v78 >> 4;
        }
        unsigned __int8 v79 = v7 - 1;
      }
    }
    else
    {
      unsigned __int8 v79 = 0;
    }
    unsigned __int8 v58 = v79;
    unsigned __int8 v57 = 0;
    unsigned __int8 v57 = *(unsigned char *)(v59[45] + v79);
    char v56 = 0;
    char v56 = *(unsigned char *)(v59[46] + v79);
    unsigned __int8 v55 = 0;
    uint64_t v84 = v62;
    __int16 v83 = HIWORD(v62);
    BOOL v54 = HIWORD(v62) == 256;
    if (HIWORD(v62) == 256)
    {
      unsigned __int8 v55 = 0;
    }
    else if (((WORD2(v62) >> 10) & 3) == 1)
    {
      unsigned __int8 v55 = 1;
    }
    else
    {
      BOOL v53 = v62 == 0;
      if (!v62) {
        LODWORD(v62) = HIDWORD(malloc_entropy[0]);
      }
      char v52 = 0;
      uint64_t v73 = v62;
      unint64_t v72 = (__n128 *)(v59 + 39);
      char v71 = v57 - 2;
      if ((v57 - 2) >= 5u)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr_bucket_count <= XZM_POINTER_BUCKETS_MAX\" failed"
                               " (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:99)";
        __break(1u);
        JUMPOUT(0x7AFA8);
      }
      unsigned int v70 = v73;
      char v69 = 0;
      switch(v71)
      {
        case 2:
          unint64_t v68 = 0;
          unint64_t v68 = v72->n128_u64[0];
          int v67 = v68 * v70 + HIDWORD(v68);
          char v69 = v67 < 0;
          break;
        case 3:
          __n128 v66 = 0uLL;
          a5 = *v72;
          __n128 v66 = *v72;
          unint64_t v65 = v66.n128_u64[0] * v70 + v66.n128_u64[1];
          char v69 = (v65 >> 34) - 3 * (((v65 >> 34) * (unsigned __int128)0x5555555555555556uLL) >> 64);
          break;
        case 4:
          __n128 v64 = 0uLL;
          a5 = *v72;
          __n128 v64 = *v72;
          unint64_t v63 = v64.n128_u64[0] * v70 + v64.n128_u64[1];
          char v69 = BYTE4(v63) & 3;
          break;
        default:
          char v69 = 0;
          break;
      }
      char v52 = v69;
      unsigned __int8 v55 = v69 + 2;
    }
    if (v55 >= (int)v57)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"bucket < bin_bucket_count\" failed (/Library/Caches/co"
                             "m.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:181)";
      __break(1u);
      JUMPOUT(0x7B14CLL);
    }
    char v18 = v56 + v55;
    char v19 = _xzm_xzone_malloc(v22, v21, v56 + v55, v20, a5.n128_f64[0], a6);
    if (!v19)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr\" failed (/Library/Caches/com.apple.xbs/Sources/li"
                             "bmalloc_driverkit/src/xzone/xzone_malloc.c:2272)";
      __break(1u);
      JUMPOUT(0x7B1A8);
    }
    if ((v20 & 1) != 0 && !_xzm_mem_is_zero())
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_mem_is_zero(ptr, size)\" failed (/Library/Caches/"
                             "com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2274)";
      __break(1u);
      JUMPOUT(0x7B1ECLL);
    }
    return v19;
  }
  else
  {
    uint64_t v29 = v13;
    uint64_t v28 = v16;
    unint64_t v27 = v12;
    int v26 = 1;
    uint64_t v25 = 0;
    if (v12 <= 0x8000)
    {
      if ((*(unsigned char *)(v28 + 296) & 0x80) != 0)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(zone->xzz_flags & MALLOC_PURGEABLE) == 0\" failed ("
                               "/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2266)";
        __break(1u);
        JUMPOUT(0x7A718);
      }
      char v24 = 0;
      uint64_t v40 = v29;
      uint64_t v39 = v28;
      unint64_t v38 = v27;
      uint64_t v37 = 0;
      uint64_t v75 = v28;
      if (*(void *)(v28 + 232)) {
        uint64_t v11 = *(void *)(v28 + 232);
      }
      else {
        uint64_t v11 = v75;
      }
      uint64_t v37 = (void *)v11;
      unsigned __int8 v36 = 0;
      unint64_t v81 = v38;
      if (v38)
      {
        if (v81 > 0x80)
        {
          if (v81 > 0x8000)
          {
            qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"size <= XZM_SMALL_BLOCK_SIZE_MAX\" failed (/Libr"
                                   "ary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:36)";
            __break(1u);
            JUMPOUT(0x7A83CLL);
          }
          int v80 = 63 - __clz(--v81);
          unsigned __int8 v82 = ((v81 >> (v80 - 2)) & 3 | (4 * v80)) - 20;
        }
        else
        {
          if ((v81 & 0xF) != 0) {
            unint64_t v10 = (v81 >> 4) + 1;
          }
          else {
            unint64_t v10 = v81 >> 4;
          }
          unsigned __int8 v82 = v10 - 1;
        }
      }
      else
      {
        unsigned __int8 v82 = 0;
      }
      unsigned __int8 v36 = v82;
      unsigned __int8 v35 = 0;
      unsigned __int8 v35 = *(unsigned char *)(v37[45] + v82);
      char v34 = 0;
      char v34 = *(unsigned char *)(v37[46] + v82);
      unsigned __int8 v33 = 0;
      uint64_t v86 = v40;
      __int16 v85 = HIWORD(v40);
      BOOL v32 = HIWORD(v40) == 256;
      if (HIWORD(v40) == 256)
      {
        unsigned __int8 v33 = 0;
      }
      else if (((WORD2(v40) >> 10) & 3) == 1)
      {
        unsigned __int8 v33 = 1;
      }
      else
      {
        BOOL v31 = v40 == 0;
        if (!v40) {
          LODWORD(v40) = HIDWORD(malloc_entropy[0]);
        }
        char v30 = 0;
        uint64_t v51 = v40;
        char v50 = (__n128 *)(v37 + 39);
        char v49 = v35 - 2;
        if ((v35 - 2) >= 5u)
        {
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr_bucket_count <= XZM_POINTER_BUCKETS_MAX\" fail"
                                 "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:99)";
          __break(1u);
          JUMPOUT(0x7A9CCLL);
        }
        unsigned int v48 = v51;
        char v47 = 0;
        switch(v49)
        {
          case 2:
            unint64_t v46 = 0;
            unint64_t v46 = v50->n128_u64[0];
            int v45 = v46 * v48 + HIDWORD(v46);
            char v47 = v45 < 0;
            break;
          case 3:
            __n128 v44 = 0uLL;
            a5 = *v50;
            __n128 v44 = *v50;
            unint64_t v43 = v44.n128_u64[0] * v48 + v44.n128_u64[1];
            char v47 = (v43 >> 34) - 3 * (((v43 >> 34) * (unsigned __int128)0x5555555555555556uLL) >> 64);
            break;
          case 4:
            __n128 v42 = 0uLL;
            a5 = *v50;
            __n128 v42 = *v50;
            unint64_t v41 = v42.n128_u64[0] * v48 + v42.n128_u64[1];
            char v47 = BYTE4(v41) & 3;
            break;
          default:
            char v47 = 0;
            break;
        }
        char v30 = v47;
        unsigned __int8 v33 = v47 + 2;
      }
      if (v33 >= (int)v35)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"bucket < bin_bucket_count\" failed (/Library/Caches/"
                               "com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:181)";
        __break(1u);
        JUMPOUT(0x7AB70);
      }
      char v24 = v34 + v33;
      uint64_t v25 = (uint64_t)_xzm_xzone_malloc(v28, v27, v34 + v33, v26, a5.n128_f64[0], a6);
    }
    else
    {
      uint64_t v25 = _xzm_malloc_large_huge(v28, v27, 0, v29, v26);
    }
    if (!v25)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr\" failed (/Library/Caches/com.apple.xbs/Sources/li"
                             "bmalloc_driverkit/src/xzone/xzone_malloc.c:2272)";
      __break(1u);
      JUMPOUT(0x7ABCCLL);
    }
    if ((v26 & 1) != 0 && !_xzm_mem_is_zero())
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"_xzm_mem_is_zero(ptr, size)\" failed (/Library/Caches/"
                             "com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2274)";
      __break(1u);
      JUMPOUT(0x7AC10);
    }
    return (_OWORD *)v25;
  }
}

char *xzm_malloc_zone_malloc_type_realloc_slow(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, __n128 a5, float a6)
{
  BOOL v47 = (*(_DWORD *)(a1 + 296) & 0x80) != 0;
  BOOL v46 = (*(_DWORD *)(a1 + 296) & 0x20) != 0;
  if ((*(_DWORD *)(a1 + 296) & 0x80) == 0 && (*(_DWORD *)(a1 + 296) & 0x20) == 0) {
    return (char *)xzm_malloc_zone_malloc_type_realloc(a1, a2, a3, a4, a5, a6);
  }
  if (!a2) {
    return (char *)xzm_malloc_zone_malloc_type_malloc_slow(a1, a3, a4, a5, a6);
  }
  if (!a3)
  {
    xzm_malloc_zone_free_slow(a1, a2);
    return (char *)xzm_malloc_zone_malloc_type_malloc_slow(a1, 0, a4, v6, v7);
  }
  unsigned int v45 = a4;
  uint64_t v179 = a1;
  int64_t v178 = a2;
  int64_t v177 = 0;
  unint64_t v176 = 0;
  uint64_t v175 = 0;
  unint64_t v174 = 0;
  uint64_t v196 = a1;
  unint64_t v195 = (unint64_t)a2;
  unint64_t v194 = 0;
  unint64_t v193 = (uint64_t *)&v176;
  int v192 = &v175;
  uint64_t v191 = 0;
  uint64_t v198 = a1;
  if (*(void *)(a1 + 232)) {
    uint64_t v41 = *(void *)(a1 + 232);
  }
  else {
    uint64_t v41 = v198;
  }
  uint64_t v191 = v41;
  unint64_t v190 = 0;
  uint64_t v220 = v41;
  unint64_t v219 = v195;
  uint64_t v218 = 0;
  unint64_t v402 = v195;
  uint64_t v401 = v41;
  uint64_t v400 = 0;
  unint64_t v399 = 0;
  unint64_t v410 = v195;
  v409 = &v400;
  unint64_t v408 = v195;
  if (v195 >> 36)
  {
    uint64_t *v409 = 0;
    unint64_t v411 = 0x4000;
  }
  else
  {
    unint64_t v407 = v408 >> 22;
    uint64_t *v409 = 0;
    if (v407 >= 0x4000)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segindex < XZM_SEGMENT_TABLE_ENTRIES\" failed (/Librar"
                             "y/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:169)";
      __break(1u);
      JUMPOUT(0x7B478);
    }
    unint64_t v411 = v407;
  }
  unint64_t v399 = v411;
  if (v411 < 0x4000) {
    uint64_t v403 = *(void *)(v401 + 408) + 4 * v399;
  }
  else {
    uint64_t v403 = 0;
  }
  uint64_t v218 = (unsigned int *)v403;
  if (v403)
  {
    unsigned int v406 = *v218;
    unint64_t v221 = (unint64_t)v406 << 14;
  }
  else
  {
    unint64_t v221 = 0;
  }
  unint64_t v190 = v221;
  if (!v221)
  {
    unint64_t v197 = 0;
    goto LABEL_114;
  }
  unint64_t v189 = 0;
  unint64_t v233 = v190;
  unint64_t v232 = v195;
  uint64_t v231 = 0;
  unint64_t v237 = v190;
  unint64_t v236 = v195;
  unsigned int v235 = 0;
  unint64_t v247 = v190;
  unint64_t v246 = v195;
  int64_t v245 = 0;
  unint64_t v251 = v190;
  unint64_t v250 = v195;
  int64_t v249 = 0;
  unint64_t v254 = v190;
  unint64_t v256 = v190;
  int v255 = 0;
  int64_t v249 = v195 - *(void *)(v190 + 80);
  int64_t v248 = 0;
  unint64_t v264 = v190;
  int v263 = 0;
  unint64_t v265 = v190;
  int v263 = *(_DWORD *)(v190 + 12);
  if ((unint64_t)v263 << 14)
  {
    unint64_t v262 = v251;
    unsigned int v261 = 0;
    unint64_t v266 = v251;
    unsigned int v261 = *(_DWORD *)(v251 + 12);
    unint64_t v260 = v251;
    int v259 = 0;
    unint64_t v267 = v251;
    int v259 = *(_DWORD *)(v251 + 12);
    unint64_t v40 = ((unint64_t)v261 << 14) - ((unint64_t)v259 << 14) + 0x400000;
  }
  else
  {
    unint64_t v258 = v251;
    unsigned int v257 = 0;
    unint64_t v268 = v251;
    unsigned int v257 = *(_DWORD *)(v251 + 12);
    unint64_t v40 = (unint64_t)v257 << 14;
  }
  int64_t v248 = v40;
  BOOL v39 = 0;
  if ((v249 & 0x8000000000000000) == 0) {
    BOOL v39 = v249 < v248;
  }
  if (!v39)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"diff >= 0 && diff < (ptrdiff_t)rounded_size\" failed (/L"
                           "ibrary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:436)";
    __break(1u);
    JUMPOUT(0x7B6E0);
  }
  int64_t v245 = v249;
  unint64_t v253 = v247;
  int64_t v252 = v249;
  unsigned int v235 = (unint64_t)v249 >> 14;
  if (v235 >= *(_DWORD *)(v237 + 16)) {
    uint64_t v238 = 0;
  }
  else {
    uint64_t v238 = v237 + 48 * v235 + 2136;
  }
  uint64_t v231 = v238;
  if (!v238)
  {
    unint64_t v234 = 0;
    goto LABEL_62;
  }
  unint64_t v230 = 0;
  unint64_t v240 = v231;
  if ((*(unsigned char *)(v231 + 32) & 0xF) == 4)
  {
    unint64_t v239 = 0;
    unint64_t v239 = v240 - *(unsigned int *)(v240 + 36);
    if (v239 < (v240 & 0xFFFFFFFFFFFFC000 | 0x858))
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"out_slice >= ((xzm_segment_t)((uintptr_t)slice & ~(XZM"
                             "_METAPOOL_SEGMENT_BLOCK_SIZE - 1)))->xzs_slices\" failed (/Library/Caches/com.apple.xbs/Sou"
                             "rces/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:582)";
      __break(1u);
      JUMPOUT(0x7B800);
    }
    unint64_t v243 = v239;
    unint64_t v242 = v240;
    int v38 = *(unsigned char *)(v239 + 32) & 0xF;
    if ((v38 - 1) < 2)
    {
      BOOL v244 = v243 == v242;
    }
    else if (v38 == 3 || (v38 - 5) < 4)
    {
      if (v242 < v243)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice >= span\" failed (/Library/Caches/com.apple.xb"
                               "s/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:560)";
        __break(1u);
        JUMPOUT(0x7B8A4);
      }
      BOOL v244 = v242 < v243 + 48 * *(unsigned int *)(v243 + 40);
    }
    else
    {
      BOOL v244 = 0;
    }
    if (v244) {
      unint64_t v241 = v239;
    }
    else {
      unint64_t v241 = v240;
    }
  }
  else
  {
    unint64_t v241 = v240;
  }
  unint64_t v230 = v241;
  unsigned __int8 v429 = *(unsigned char *)(v241 + 32) & 0xF;
  if (v429 >= 2u)
  {
    if (v429 == 2)
    {
LABEL_57:
      char v430 = 1;
      goto LABEL_58;
    }
    if (v429 - 3 >= 2)
    {
      if (v429 - 5 >= 3)
      {
        uint64_t v428 = v429;
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
        qword_C0148 = v429;
        __break(1u);
        JUMPOUT(0x7B9C8);
      }
      goto LABEL_57;
    }
  }
  char v430 = 0;
LABEL_58:
  if (v430 == 1) {
    unint64_t v37 = v230;
  }
  else {
    unint64_t v37 = 0;
  }
  unint64_t v234 = v37;
LABEL_62:
  unint64_t v189 = v234;
  if (!v234)
  {
    unint64_t v197 = 0;
    goto LABEL_114;
  }
  if (*(unsigned __int16 *)(v189 + 34) != *(unsigned __int16 *)(v196 + 208))
  {
    unint64_t v197 = 0;
    goto LABEL_114;
  }
  uint64_t v188 = v195;
  unint64_t v187 = 0;
  uint64_t v205 = v196;
  unint64_t v204 = v189;
  uint64_t v203 = 0;
  uint64_t v207 = v196;
  unint64_t v206 = v189;
  uint64_t v210 = v196;
  unint64_t v209 = v189;
  unint64_t v208 = v189 & 0xFFFFFFFFFFFFC000;
  char v36 = 1;
  if ((v189 & 0xFFFFFFFFFFFFC000) != 0)
  {
    BOOL v35 = 0;
    if (v209 >= v208 + 2136) {
      BOOL v35 = v209 < v208 + 48 * *(unsigned int *)(v208 + 16) + 2136;
    }
    char v36 = v35;
  }
  if ((v36 & 1) == 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0x7BC18);
  }
  unint64_t v212 = v208;
  unint64_t v211 = v206;
  unint64_t v217 = v208;
  unint64_t v216 = v206;
  if (v206 < v208 + 2136)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\" fai"
                           "led (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inlin"
                           "e_internal.h:278)";
    __break(1u);
    JUMPOUT(0x7BC7CLL);
  }
  int64_t v215 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v216 - v217 - 2136) >> 4);
  if (v215 >= *(unsigned int *)(v217 + 16))
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" fail"
                           "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline"
                           "_internal.h:280)";
    __break(1u);
    JUMPOUT(0x7BCE4);
  }
  unint64_t v214 = v208;
  int v213 = v215;
  unint64_t v187 = *(void *)(v208 + 80) + ((unint64_t)v215 << 14);
  unint64_t v186 = v188 - v187;
  char v185 = 0;
  char v185 = *(unsigned char *)(v189 + 32) & 0xF;
  uint64_t v184 = 0;
  unint64_t v183 = 0;
  char v201 = v185;
  if (v185 == 2 || v185 == 5)
  {
    uint64_t v184 = *(void *)(v196 + 216) + 88 * *(unsigned __int8 *)(v189 + 33);
    unint64_t v183 = *(void *)(v184 + 48);
    if (!XZM_FAST_ALIGNED(v186, v183, *(_DWORD *)(v184 + 64)))
    {
      unint64_t v197 = 0;
      goto LABEL_114;
    }
  }
  else
  {
    unint64_t v183 = (unint64_t)*(unsigned int *)(v189 + 40) << 14;
    unint64_t v182 = v186 % v183;
    if (v186 % v183)
    {
      unint64_t v197 = 0;
      goto LABEL_114;
    }
  }
  unint64_t v181 = v186 / v183;
  char v199 = *(unsigned char *)(v189 + 32) & 0xF;
  BOOL v200 = v199 == 2 || v199 == 5;
  BOOL v34 = 1;
  if (v200) {
    BOOL v34 = v181 < *(unsigned int *)(v184 + 68);
  }
  if (!v34)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!_xzm_slice_kind_uses_xzones(chunk->xzc_bits.xzcb_kind) "
                           "|| block_index < xz->xz_chunk_capacity\" failed (/Library/Caches/com.apple.xbs/Sources/libmal"
                           "loc_driverkit/src/xzone/xzone_malloc.c:2924)";
    __break(1u);
    JUMPOUT(0x7BF1CLL);
  }
  uint64_t v359 = v196;
  v358 = (atomic_ullong *)v189;
  char v357 = v185;
  unint64_t v356 = v186;
  unint64_t v355 = v183;
  uint64_t v354 = v188;
  if ((*(unsigned char *)(v189 + 32) & 0xF) != v185)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == kind\" failed (/Library/Cac"
                           "hes/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2801)";
    __break(1u);
    JUMPOUT(0x7BF8CLL);
  }
  if (v357 == 2)
  {
    uint64_t v353 = 0;
    uint64_t v352 = 0;
    uint64_t v351 = *(void *)v354;
    uint64_t v352 = v351;
    uint64_t v350 = v351;
    uint64_t v353 = v351;
    uint64_t v349 = 0;
    uint64_t v349 = *(void *)(v359 + 272) ^ v354;
    if (v351 == v349)
    {
      char is_free_slow = 0;
      char is_free_slow = _xzm_xzone_tiny_chunk_block_is_free_slow(v359, v358, v354);
      char v360 = is_free_slow & 1;
    }
    else
    {
      char v360 = 0;
    }
  }
  else if (v357 == 5)
  {
    unint64_t v347 = v356 / v355;
    v436 = v358;
    int v435 = v356 / v355;
    if ((*((unsigned char *)v358 + 32) & 0xF) != 5)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == XZM_SLICE_KIND_SMALL_CHUN"
                             "K\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xz"
                             "one_inline_internal.h:919)";
      __break(1u);
      JUMPOUT(0x7C0ACLL);
    }
    char v360 = (*(_DWORD *)v436 >> v435) & 1;
  }
  else
  {
    char v360 = 0;
  }
  if (v360 == 1)
  {
    unint64_t v197 = 0;
  }
  else
  {
    if (v194) {
      *unint64_t v194 = v184;
    }
    if (v193) {
      *unint64_t v193 = v188;
    }
    if (v192) {
      *int v192 = v183;
    }
    unint64_t v197 = v189;
  }
LABEL_114:
  unint64_t v174 = v197;
  if (v177) {
    *int64_t v177 = v174;
  }
  if (v174)
  {
    if (v176 == v178)
    {
      uint64_t v180 = v175;
    }
    else
    {
      BOOL v173 = (char *)(v178 - v176);
      uint64_t v180 = v175 - (v178 - v176);
    }
  }
  else
  {
    uint64_t v180 = _xzm_ptr_size_outlined(v179, (unint64_t)v178);
  }
  unint64_t v44 = v180;
  uint64_t v43 = 0;
  if (!v180 && v47)
  {
    uint64_t v74 = a1;
    if (*(void *)(a1 + 232)) {
      uint64_t v33 = *(void *)(a1 + 232);
    }
    else {
      uint64_t v33 = v74;
    }
    uint64_t v43 = v33;
    uint64_t v134 = v33;
    unint64_t v133 = a2;
    unint64_t v132 = 0;
    unint64_t v131 = 0;
    uint64_t v130 = 0;
    unint64_t v129 = 0;
    uint64_t v151 = v33;
    unint64_t v150 = (unint64_t)a2;
    int v149 = 0;
    unint64_t v148 = (uint64_t *)&v131;
    unsigned int v147 = &v130;
    uint64_t v146 = 0;
    uint64_t v153 = v33;
    if (*(void *)(v33 + 232)) {
      uint64_t v32 = *(void *)(v33 + 232);
    }
    else {
      uint64_t v32 = v153;
    }
    uint64_t v146 = v32;
    unint64_t v145 = 0;
    uint64_t v224 = v32;
    unint64_t v223 = v150;
    char v222 = 0;
    unint64_t v397 = v150;
    uint64_t v396 = v32;
    uint64_t v395 = 0;
    unint64_t v394 = 0;
    unint64_t v415 = v150;
    v414 = &v395;
    unint64_t v413 = v150;
    if (v150 >> 36)
    {
      uint64_t *v414 = 0;
      unint64_t v416 = 0x4000;
    }
    else
    {
      unint64_t v412 = v413 >> 22;
      uint64_t *v414 = 0;
      if (v412 >= 0x4000)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segindex < XZM_SEGMENT_TABLE_ENTRIES\" failed (/Libr"
                               "ary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:169)";
        __break(1u);
        JUMPOUT(0x7C3ACLL);
      }
      unint64_t v416 = v412;
    }
    unint64_t v394 = v416;
    if (v416 < 0x4000) {
      uint64_t v398 = *(void *)(v396 + 408) + 4 * v394;
    }
    else {
      uint64_t v398 = 0;
    }
    char v222 = (unsigned int *)v398;
    if (v398)
    {
      unsigned int v405 = *v222;
      unint64_t v225 = (unint64_t)v405 << 14;
    }
    else
    {
      unint64_t v225 = 0;
    }
    unint64_t v145 = v225;
    if (!v225)
    {
      unint64_t v152 = 0;
      goto LABEL_232;
    }
    unint64_t v144 = 0;
    unint64_t v272 = v145;
    unint64_t v271 = v150;
    uint64_t v270 = 0;
    unint64_t v276 = v145;
    unint64_t v275 = v150;
    unsigned int v274 = 0;
    unint64_t v286 = v145;
    unint64_t v285 = v150;
    int64_t v284 = 0;
    unint64_t v290 = v145;
    unint64_t v289 = v150;
    int64_t v288 = 0;
    unint64_t v293 = v145;
    unint64_t v295 = v145;
    int v294 = 0;
    int64_t v288 = v150 - *(void *)(v145 + 80);
    int64_t v287 = 0;
    unint64_t v303 = v145;
    int v302 = 0;
    unint64_t v304 = v145;
    int v302 = *(_DWORD *)(v145 + 12);
    if ((unint64_t)v302 << 14)
    {
      unint64_t v301 = v290;
      unsigned int v300 = 0;
      unint64_t v305 = v290;
      unsigned int v300 = *(_DWORD *)(v290 + 12);
      unint64_t v299 = v290;
      int v298 = 0;
      unint64_t v306 = v290;
      int v298 = *(_DWORD *)(v290 + 12);
      unint64_t v31 = ((unint64_t)v300 << 14) - ((unint64_t)v298 << 14) + 0x400000;
    }
    else
    {
      unint64_t v297 = v290;
      unsigned int v296 = 0;
      unint64_t v307 = v290;
      unsigned int v296 = *(_DWORD *)(v290 + 12);
      unint64_t v31 = (unint64_t)v296 << 14;
    }
    int64_t v287 = v31;
    BOOL v30 = 0;
    if ((v288 & 0x8000000000000000) == 0) {
      BOOL v30 = v288 < v287;
    }
    if (!v30)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"diff >= 0 && diff < (ptrdiff_t)rounded_size\" failed ("
                             "/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:436)";
      __break(1u);
      JUMPOUT(0x7C614);
    }
    int64_t v284 = v288;
    unint64_t v292 = v286;
    int64_t v291 = v288;
    unsigned int v274 = (unint64_t)v288 >> 14;
    if (v274 >= *(_DWORD *)(v276 + 16)) {
      uint64_t v277 = 0;
    }
    else {
      uint64_t v277 = v276 + 48 * v274 + 2136;
    }
    uint64_t v270 = v277;
    if (!v277)
    {
      unint64_t v273 = 0;
      goto LABEL_180;
    }
    unint64_t v269 = 0;
    unint64_t v279 = v270;
    if ((*(unsigned char *)(v270 + 32) & 0xF) == 4)
    {
      unint64_t v278 = 0;
      unint64_t v278 = v279 - *(unsigned int *)(v279 + 36);
      if (v278 < (v279 & 0xFFFFFFFFFFFFC000 | 0x858))
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"out_slice >= ((xzm_segment_t)((uintptr_t)slice & ~(X"
                               "ZM_METAPOOL_SEGMENT_BLOCK_SIZE - 1)))->xzs_slices\" failed (/Library/Caches/com.apple.xbs"
                               "/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:582)";
        __break(1u);
        JUMPOUT(0x7C734);
      }
      unint64_t v282 = v278;
      unint64_t v281 = v279;
      int v29 = *(unsigned char *)(v278 + 32) & 0xF;
      if ((v29 - 1) < 2)
      {
        BOOL v283 = v282 == v281;
      }
      else if (v29 == 3 || (v29 - 5) < 4)
      {
        if (v281 < v282)
        {
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice >= span\" failed (/Library/Caches/com.apple."
                                 "xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:560)";
          __break(1u);
          JUMPOUT(0x7C7D8);
        }
        BOOL v283 = v281 < v282 + 48 * *(unsigned int *)(v282 + 40);
      }
      else
      {
        BOOL v283 = 0;
      }
      if (v283) {
        unint64_t v280 = v278;
      }
      else {
        unint64_t v280 = v279;
      }
    }
    else
    {
      unint64_t v280 = v279;
    }
    unint64_t v269 = v280;
    unsigned __int8 v426 = *(unsigned char *)(v280 + 32) & 0xF;
    if (v426 >= 2u)
    {
      if (v426 == 2)
      {
LABEL_175:
        char v427 = 1;
        goto LABEL_176;
      }
      if (v426 - 3 >= 2)
      {
        if (v426 - 5 >= 3)
        {
          uint64_t v425 = v426;
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
          qword_C0148 = v426;
          __break(1u);
          JUMPOUT(0x7C8FCLL);
        }
        goto LABEL_175;
      }
    }
    char v427 = 0;
LABEL_176:
    if (v427 == 1) {
      unint64_t v28 = v269;
    }
    else {
      unint64_t v28 = 0;
    }
    unint64_t v273 = v28;
LABEL_180:
    unint64_t v144 = v273;
    if (v273)
    {
      if (*(unsigned __int16 *)(v144 + 34) == *(unsigned __int16 *)(v151 + 208))
      {
        uint64_t v143 = v150;
        unint64_t v142 = 0;
        uint64_t v160 = v151;
        unint64_t v159 = v144;
        uint64_t v158 = 0;
        uint64_t v162 = v151;
        unint64_t v161 = v144;
        uint64_t v165 = v151;
        unint64_t v164 = v144;
        unint64_t v163 = v144 & 0xFFFFFFFFFFFFC000;
        char v27 = 1;
        if ((v144 & 0xFFFFFFFFFFFFC000) != 0)
        {
          BOOL v26 = 0;
          if (v164 >= v163 + 2136) {
            BOOL v26 = v164 < v163 + 48 * *(unsigned int *)(v163 + 16) + 2136;
          }
          char v27 = v26;
        }
        if ((v27 & 1) == 0)
        {
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice"
                                 " < (segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/co"
                                 "m.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
          __break(1u);
          JUMPOUT(0x7CB4CLL);
        }
        unint64_t v167 = v163;
        unint64_t v166 = v161;
        unint64_t v172 = v163;
        unint64_t v171 = v161;
        if (v161 < v163 + 2136)
        {
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices"
                                 "\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone"
                                 "/xzone_inline_internal.h:278)";
          __break(1u);
          JUMPOUT(0x7CBB0);
        }
        int64_t v170 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v171 - v172 - 2136) >> 4);
        if (v170 >= *(unsigned int *)(v172 + 16))
        {
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\""
                                 " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/x"
                                 "zone_inline_internal.h:280)";
          __break(1u);
          JUMPOUT(0x7CC18);
        }
        unint64_t v169 = v163;
        int v168 = v170;
        unint64_t v142 = *(void *)(v163 + 80) + ((unint64_t)v170 << 14);
        unint64_t v141 = v143 - v142;
        char v140 = 0;
        char v140 = *(unsigned char *)(v144 + 32) & 0xF;
        uint64_t v139 = 0;
        unint64_t v138 = 0;
        char v156 = v140;
        if (v140 == 2 || v140 == 5)
        {
          uint64_t v139 = *(void *)(v151 + 216) + 88 * *(unsigned __int8 *)(v144 + 33);
          unint64_t v138 = *(void *)(v139 + 48);
          if (!XZM_FAST_ALIGNED(v141, v138, *(_DWORD *)(v139 + 64)))
          {
            unint64_t v152 = 0;
            goto LABEL_232;
          }
        }
        else
        {
          unint64_t v138 = (unint64_t)*(unsigned int *)(v144 + 40) << 14;
          unint64_t v137 = v141 % v138;
          if (v141 % v138)
          {
            unint64_t v152 = 0;
            goto LABEL_232;
          }
        }
        unint64_t v136 = v141 / v138;
        char v154 = *(unsigned char *)(v144 + 32) & 0xF;
        BOOL v155 = v154 == 2 || v154 == 5;
        BOOL v25 = 1;
        if (v155) {
          BOOL v25 = v136 < *(unsigned int *)(v139 + 68);
        }
        if (!v25)
        {
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!_xzm_slice_kind_uses_xzones(chunk->xzc_bits.xzcb_"
                                 "kind) || block_index < xz->xz_chunk_capacity\" failed (/Library/Caches/com.apple.xbs/So"
                                 "urces/libmalloc_driverkit/src/xzone/xzone_malloc.c:2924)";
          __break(1u);
          JUMPOUT(0x7CE50);
        }
        uint64_t v373 = v151;
        v372 = (atomic_ullong *)v144;
        char v371 = v140;
        unint64_t v370 = v141;
        unint64_t v369 = v138;
        uint64_t v368 = v143;
        if ((*(unsigned char *)(v144 + 32) & 0xF) != v140)
        {
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == kind\" failed (/Libra"
                                 "ry/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2801)";
          __break(1u);
          JUMPOUT(0x7CEC0);
        }
        if (v371 == 2)
        {
          uint64_t v367 = 0;
          uint64_t v366 = 0;
          uint64_t v365 = *(void *)v368;
          uint64_t v366 = v365;
          uint64_t v364 = v365;
          uint64_t v367 = v365;
          uint64_t v363 = 0;
          uint64_t v363 = *(void *)(v373 + 272) ^ v368;
          if (v365 == v363)
          {
            char v362 = 0;
            char v362 = _xzm_xzone_tiny_chunk_block_is_free_slow(v373, v372, v368);
            char v374 = v362 & 1;
          }
          else
          {
            char v374 = 0;
          }
        }
        else if (v371 == 5)
        {
          unint64_t v361 = v370 / v369;
          v434 = v372;
          int v433 = v370 / v369;
          if ((*((unsigned char *)v372 + 32) & 0xF) != 5)
          {
            qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == XZM_SLICE_KIND_SMAL"
                                   "L_CHUNK\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone"
                                   "/../xzone/xzone_inline_internal.h:919)";
            __break(1u);
            JUMPOUT(0x7CFE0);
          }
          char v374 = (*(_DWORD *)v434 >> v433) & 1;
        }
        else
        {
          char v374 = 0;
        }
        if (v374 == 1)
        {
          unint64_t v152 = 0;
        }
        else
        {
          if (v149) {
            *int v149 = v139;
          }
          if (v148) {
            *unint64_t v148 = v143;
          }
          if (v147) {
            *unsigned int v147 = v138;
          }
          unint64_t v152 = v144;
        }
        goto LABEL_232;
      }
      unint64_t v152 = 0;
    }
    else
    {
      unint64_t v152 = 0;
    }
LABEL_232:
    unint64_t v129 = v152;
    if (v132) {
      *unint64_t v132 = v129;
    }
    if (v129)
    {
      if (v131 == v133)
      {
        uint64_t v135 = v130;
      }
      else
      {
        uint64_t v128 = (char *)(v133 - v131);
        uint64_t v135 = v130 - (v133 - v131);
      }
    }
    else
    {
      uint64_t v135 = _xzm_ptr_size_outlined(v134, (unint64_t)v133);
    }
    unint64_t v44 = v135;
  }
  if (!v44)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"old_size\" failed (/Library/Caches/com.apple.xbs/Sources"
                           "/libmalloc_driverkit/src/xzone/xzone_malloc.c:3472)";
    __break(1u);
    JUMPOUT(0x7D158);
  }
  if (v44 > a3 && v46) {
    _platform_memset();
  }
  if (v47 && (v43 || a3 <= 0x8000) && (!v43 || a3 > 0x8000))
  {
    if (a3 > 0x8000)
    {
      uint64_t v53 = _xzm_malloc_large_huge(a1, a3, 0, a4, 0);
      if (!v53)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr\" failed (/Library/Caches/com.apple.xbs/Sources/"
                               "libmalloc_driverkit/src/xzone/xzone_malloc.c:2272)";
        __break(1u);
        JUMPOUT(0x7EFE0);
      }
      __n128 v42 = (char *)v53;
    }
    else
    {
      uint64_t v73 = a1;
      if (*(void *)(a1 + 232)) {
        uint64_t v13 = *(void *)(a1 + 232);
      }
      else {
        uint64_t v13 = v73;
      }
      if ((*(unsigned char *)(v13 + 296) & 0x80) != 0)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(zone->xzz_flags & MALLOC_PURGEABLE) == 0\" failed ("
                               "/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2266)";
        __break(1u);
        JUMPOUT(0x7E598);
      }
      unsigned int v58 = v45;
      unint64_t v72 = (void *)v13;
      if (*(void *)(v13 + 232)) {
        unint64_t v12 = *(void **)(v13 + 232);
      }
      else {
        unint64_t v12 = v72;
      }
      unint64_t v76 = a3;
      if (a3 > 0x80)
      {
        int v8 = __clz(--v76);
        int v75 = 63 - v8;
        unsigned __int8 v77 = ((v76 >> (61 - v8)) & 3 | (4 * (63 - v8))) - 20;
      }
      else
      {
        if ((v76 & 0xF) != 0) {
          unint64_t v11 = (v76 >> 4) + 1;
        }
        else {
          unint64_t v11 = v76 >> 4;
        }
        unsigned __int8 v77 = v11 - 1;
      }
      unsigned __int8 v57 = *(unsigned char *)(v12[45] + v77);
      char v56 = *(unsigned char *)(v12[46] + v77);
      uint64_t v82 = a4;
      __int16 v81 = HIWORD(a4);
      if (HIWORD(a4) == 256)
      {
        unsigned __int8 v55 = 0;
      }
      else if (((WORD2(a4) >> 10) & 3) == 1)
      {
        unsigned __int8 v55 = 1;
      }
      else
      {
        if (!a4) {
          unsigned int v58 = HIDWORD(malloc_entropy[0]);
        }
        unint64_t v60 = (__n128 *)(v12 + 39);
        if ((v57 - 2) >= 5u)
        {
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr_bucket_count <= XZM_POINTER_BUCKETS_MAX\" fail"
                                 "ed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:99)";
          __break(1u);
          JUMPOUT(0x7E84CLL);
        }
        switch(v57)
        {
          case 4u:
            char v59 = (int)(v60->n128_u64[0] * v58 + HIDWORD(v60->n128_u64[0])) < 0;
            break;
          case 5u:
            a5 = *v60;
            unint64_t v9 = (v12[39] * (unint64_t)v58 + v12[40]) >> 34;
            char v59 = v9 - 3 * ((v9 * (unsigned __int128)0x5555555555555556uLL) >> 64);
            break;
          case 6u:
            a5 = *v60;
            char v59 = ((v12[39] * (unint64_t)v58 + v12[40]) >> 32) & 3;
            break;
          default:
            char v59 = 0;
            break;
        }
        unsigned __int8 v55 = v59 + 2;
      }
      if (v55 >= (int)v57)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"bucket < bin_bucket_count\" failed (/Library/Caches/"
                               "com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:181)";
        __break(1u);
        JUMPOUT(0x7E9F0);
      }
      BOOL v54 = (char *)_xzm_xzone_malloc(v13, a3, v56 + v55, 0, a5.n128_f64[0], a6);
      if (!v54)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"ptr\" failed (/Library/Caches/com.apple.xbs/Sources/"
                               "libmalloc_driverkit/src/xzone/xzone_malloc.c:2272)";
        __break(1u);
        JUMPOUT(0x7EA4CLL);
      }
      __n128 v42 = v54;
    }
    _platform_memmove();
    goto LABEL_435;
  }
  uint64_t v70 = a4;
  uint64_t v69 = a1;
  uint64_t v68 = (uint64_t)a2;
  unint64_t v67 = a3;
  unint64_t v66 = 0;
  uint64_t v89 = a1;
  unint64_t v88 = a2;
  unint64_t v87 = &v66;
  uint64_t v86 = 0;
  unint64_t v85 = 0;
  unint64_t v84 = 0;
  uint64_t v106 = a1;
  unint64_t v105 = (unint64_t)a2;
  uint64_t v104 = 0;
  unint64_t v103 = (uint64_t *)&v86;
  unint64_t v102 = &v85;
  uint64_t v101 = 0;
  uint64_t v108 = a1;
  if (*(void *)(a1 + 232)) {
    uint64_t v24 = *(void *)(v69 + 232);
  }
  else {
    uint64_t v24 = v108;
  }
  uint64_t v101 = v24;
  unint64_t v100 = 0;
  uint64_t v228 = v24;
  unint64_t v227 = v105;
  unint64_t v226 = 0;
  unint64_t v392 = v105;
  uint64_t v391 = v24;
  uint64_t v390 = 0;
  unint64_t v389 = 0;
  unint64_t v420 = v105;
  v419 = &v390;
  unint64_t v418 = v105;
  if (v105 >> 36)
  {
    uint64_t *v419 = 0;
    unint64_t v421 = 0x4000;
  }
  else
  {
    unint64_t v417 = v418 >> 22;
    uint64_t *v419 = 0;
    if (v417 >= 0x4000)
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segindex < XZM_SEGMENT_TABLE_ENTRIES\" failed (/Librar"
                             "y/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:169)";
      __break(1u);
      JUMPOUT(0x7D3C8);
    }
    unint64_t v421 = v417;
  }
  unint64_t v389 = v421;
  if (v421 < 0x4000) {
    uint64_t v393 = *(void *)(v391 + 408) + 4 * v389;
  }
  else {
    uint64_t v393 = 0;
  }
  unint64_t v226 = (unsigned int *)v393;
  if (v393)
  {
    unsigned int v404 = *v226;
    unint64_t v229 = (unint64_t)v404 << 14;
  }
  else
  {
    unint64_t v229 = 0;
  }
  unint64_t v100 = v229;
  if (!v229)
  {
    unint64_t v107 = 0;
    goto LABEL_356;
  }
  unint64_t v99 = 0;
  unint64_t v311 = v100;
  unint64_t v310 = v105;
  uint64_t v309 = 0;
  unint64_t v315 = v100;
  unint64_t v314 = v105;
  unsigned int v313 = 0;
  unint64_t v325 = v100;
  unint64_t v324 = v105;
  int64_t v323 = 0;
  unint64_t v329 = v100;
  unint64_t v328 = v105;
  int64_t v327 = 0;
  unint64_t v332 = v100;
  unint64_t v334 = v100;
  int v333 = 0;
  int64_t v327 = v105 - *(void *)(v100 + 80);
  int64_t v326 = 0;
  unint64_t v342 = v100;
  int v341 = 0;
  unint64_t v343 = v100;
  int v341 = *(_DWORD *)(v100 + 12);
  if ((unint64_t)v341 << 14)
  {
    unint64_t v340 = v329;
    unsigned int v339 = 0;
    unint64_t v344 = v329;
    unsigned int v339 = *(_DWORD *)(v329 + 12);
    unint64_t v338 = v329;
    int v337 = 0;
    unint64_t v345 = v329;
    int v337 = *(_DWORD *)(v329 + 12);
    unint64_t v23 = ((unint64_t)v339 << 14) - ((unint64_t)v337 << 14) + 0x400000;
  }
  else
  {
    unint64_t v336 = v329;
    unsigned int v335 = 0;
    unint64_t v346 = v329;
    unsigned int v335 = *(_DWORD *)(v329 + 12);
    unint64_t v23 = (unint64_t)v335 << 14;
  }
  int64_t v326 = v23;
  BOOL v22 = 0;
  if ((v327 & 0x8000000000000000) == 0) {
    BOOL v22 = v327 < v326;
  }
  if (!v22)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"diff >= 0 && diff < (ptrdiff_t)rounded_size\" failed (/L"
                           "ibrary/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:436)";
    __break(1u);
    JUMPOUT(0x7D630);
  }
  int64_t v323 = v327;
  unint64_t v331 = v325;
  int64_t v330 = v327;
  unsigned int v313 = (unint64_t)v327 >> 14;
  if (v313 >= *(_DWORD *)(v315 + 16)) {
    uint64_t v316 = 0;
  }
  else {
    uint64_t v316 = v315 + 48 * v313 + 2136;
  }
  uint64_t v309 = v316;
  if (!v316)
  {
    unint64_t v312 = 0;
    goto LABEL_304;
  }
  unint64_t v308 = 0;
  unint64_t v318 = v309;
  if ((*(unsigned char *)(v309 + 32) & 0xF) == 4)
  {
    unint64_t v317 = 0;
    unint64_t v317 = v318 - *(unsigned int *)(v318 + 36);
    if (v317 < (v318 & 0xFFFFFFFFFFFFC000 | 0x858))
    {
      qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"out_slice >= ((xzm_segment_t)((uintptr_t)slice & ~(XZM"
                             "_METAPOOL_SEGMENT_BLOCK_SIZE - 1)))->xzs_slices\" failed (/Library/Caches/com.apple.xbs/Sou"
                             "rces/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:582)";
      __break(1u);
      JUMPOUT(0x7D750);
    }
    unint64_t v321 = v317;
    unint64_t v320 = v318;
    int v21 = *(unsigned char *)(v317 + 32) & 0xF;
    if ((v21 - 1) < 2)
    {
      BOOL v322 = v321 == v320;
    }
    else if (v21 == 3 || (v21 - 5) < 4)
    {
      if (v320 < v321)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"slice >= span\" failed (/Library/Caches/com.apple.xb"
                               "s/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:560)";
        __break(1u);
        JUMPOUT(0x7D7F4);
      }
      BOOL v322 = v320 < v321 + 48 * *(unsigned int *)(v321 + 40);
    }
    else
    {
      BOOL v322 = 0;
    }
    if (v322) {
      unint64_t v319 = v317;
    }
    else {
      unint64_t v319 = v318;
    }
  }
  else
  {
    unint64_t v319 = v318;
  }
  unint64_t v308 = v319;
  unsigned __int8 v423 = *(unsigned char *)(v319 + 32) & 0xF;
  if (v423 >= 2u)
  {
    if (v423 == 2)
    {
LABEL_299:
      char v424 = 1;
      goto LABEL_300;
    }
    if (v423 - 3 >= 2)
    {
      if (v423 - 5 >= 3)
      {
        uint64_t v422 = v423;
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: bad chunk kind";
        qword_C0148 = v423;
        __break(1u);
        JUMPOUT(0x7D918);
      }
      goto LABEL_299;
    }
  }
  char v424 = 0;
LABEL_300:
  if (v424 == 1) {
    unint64_t v20 = v308;
  }
  else {
    unint64_t v20 = 0;
  }
  unint64_t v312 = v20;
LABEL_304:
  unint64_t v99 = v312;
  if (v312)
  {
    if (*(unsigned __int16 *)(v99 + 34) == *(unsigned __int16 *)(v106 + 208))
    {
      uint64_t v98 = v105;
      unint64_t v97 = 0;
      uint64_t v115 = v106;
      unint64_t v114 = v99;
      uint64_t v113 = 0;
      uint64_t v117 = v106;
      unint64_t v116 = v99;
      uint64_t v120 = v106;
      unint64_t v119 = v99;
      unint64_t v118 = v99 & 0xFFFFFFFFFFFFC000;
      char v19 = 1;
      if ((v99 & 0xFFFFFFFFFFFFC000) != 0)
      {
        BOOL v18 = 0;
        if (v119 >= v118 + 2136) {
          BOOL v18 = v119 < v118 + 48 * *(unsigned int *)(v118 + 16) + 2136;
        }
        char v19 = v18;
      }
      if ((v19 & 1) == 0)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice <"
                               " (segment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.ap"
                               "ple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
        __break(1u);
        JUMPOUT(0x7DB68);
      }
      unint64_t v122 = v118;
      unint64_t v121 = v116;
      unint64_t v127 = v118;
      unint64_t v126 = v116;
      if (v116 < v118 + 2136)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"(uintptr_t)slice >= (uintptr_t)segment->xzs_slices\""
                               " failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzo"
                               "ne_inline_internal.h:278)";
        __break(1u);
        JUMPOUT(0x7DBCCLL);
      }
      int64_t v125 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v126 - v127 - 2136) >> 4);
      if (v125 >= *(unsigned int *)(v127 + 16))
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"index < (ptrdiff_t)segment->xzs_slice_entry_count\" "
                               "failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../xzone/xzon"
                               "e_inline_internal.h:280)";
        __break(1u);
        JUMPOUT(0x7DC34);
      }
      unint64_t v124 = v118;
      int v123 = v125;
      unint64_t v97 = *(void *)(v118 + 80) + ((unint64_t)v125 << 14);
      unint64_t v96 = v98 - v97;
      char v95 = 0;
      char v95 = *(unsigned char *)(v99 + 32) & 0xF;
      uint64_t v94 = 0;
      unint64_t v93 = 0;
      char v111 = v95;
      if (v95 == 2 || v95 == 5)
      {
        uint64_t v94 = *(void *)(v106 + 216) + 88 * *(unsigned __int8 *)(v99 + 33);
        unint64_t v93 = *(void *)(v94 + 48);
        if (!XZM_FAST_ALIGNED(v96, v93, *(_DWORD *)(v94 + 64)))
        {
          unint64_t v107 = 0;
          goto LABEL_356;
        }
      }
      else
      {
        unint64_t v93 = (unint64_t)*(unsigned int *)(v99 + 40) << 14;
        unint64_t v92 = v96 % v93;
        if (v96 % v93)
        {
          unint64_t v107 = 0;
          goto LABEL_356;
        }
      }
      unint64_t v91 = v96 / v93;
      char v109 = *(unsigned char *)(v99 + 32) & 0xF;
      BOOL v110 = v109 == 2 || v109 == 5;
      BOOL v17 = 1;
      if (v110) {
        BOOL v17 = v91 < *(unsigned int *)(v94 + 68);
      }
      if (!v17)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!_xzm_slice_kind_uses_xzones(chunk->xzc_bits.xzcb_ki"
                               "nd) || block_index < xz->xz_chunk_capacity\" failed (/Library/Caches/com.apple.xbs/Source"
                               "s/libmalloc_driverkit/src/xzone/xzone_malloc.c:2924)";
        __break(1u);
        JUMPOUT(0x7DE6CLL);
      }
      uint64_t v387 = v106;
      v386 = (atomic_ullong *)v99;
      char v385 = v95;
      unint64_t v384 = v96;
      unint64_t v383 = v93;
      uint64_t v382 = v98;
      if ((*(unsigned char *)(v99 + 32) & 0xF) != v95)
      {
        qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == kind\" failed (/Library"
                               "/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:2801)";
        __break(1u);
        JUMPOUT(0x7DEDCLL);
      }
      if (v385 == 2)
      {
        uint64_t v381 = 0;
        uint64_t v380 = 0;
        uint64_t v379 = *(void *)v382;
        uint64_t v380 = v379;
        uint64_t v378 = v379;
        uint64_t v381 = v379;
        uint64_t v377 = 0;
        uint64_t v377 = *(void *)(v387 + 272) ^ v382;
        if (v379 == v377)
        {
          char v376 = 0;
          char v376 = _xzm_xzone_tiny_chunk_block_is_free_slow(v387, v386, v382);
          char v388 = v376 & 1;
        }
        else
        {
          char v388 = 0;
        }
      }
      else if (v385 == 5)
      {
        unint64_t v375 = v384 / v383;
        v432 = v386;
        int v431 = v384 / v383;
        if ((*((unsigned char *)v386 + 32) & 0xF) != 5)
        {
          qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"chunk->xzc_bits.xzcb_kind == XZM_SLICE_KIND_SMALL_"
                                 "CHUNK\" failed (/Library/Caches/com.apple.xbs/Sources/libmalloc_driverkit/src/xzone/../"
                                 "xzone/xzone_inline_internal.h:919)";
          __break(1u);
          JUMPOUT(0x7DFFCLL);
        }
        char v388 = (*(_DWORD *)v432 >> v431) & 1;
      }
      else
      {
        char v388 = 0;
      }
      if (v388 == 1)
      {
        unint64_t v107 = 0;
      }
      else
      {
        if (v104) {
          *uint64_t v104 = v94;
        }
        if (v103) {
          *unint64_t v103 = v98;
        }
        if (v102) {
          *unint64_t v102 = v93;
        }
        unint64_t v107 = v99;
      }
      goto LABEL_356;
    }
    unint64_t v107 = 0;
  }
  else
  {
    unint64_t v107 = 0;
  }
LABEL_356:
  unint64_t v84 = v107;
  if (v87) {
    *unint64_t v87 = v84;
  }
  if (v84)
  {
    if (v86 == v88)
    {
      unint64_t v90 = v85;
    }
    else
    {
      __int16 v83 = (char *)(v88 - v86);
      unint64_t v90 = v85 - (v88 - v86);
    }
  }
  else
  {
    unint64_t v90 = _xzm_ptr_size_outlined(v89, (unint64_t)v88);
  }
  unint64_t v65 = v90;
  uint64_t v64 = v68;
  if (v66 && *(unsigned __int16 *)(v66 + 34) != *(unsigned __int16 *)(v69 + 208))
  {
    qword_C0118 = (uint64_t)"BUG IN CLIENT OF LIBMALLOC: pointer being reallocated with wrong zone";
    qword_C0148 = v68;
    __break(1u);
    JUMPOUT(0x7E1B4);
  }
  if (!v66 || v90 <= 0x8000 || v67 <= 0x8000) {
    goto LABEL_391;
  }
  if ((v67 & 0x3FFF) != 0) {
    unint64_t v16 = (v67 & 0xFFFFFFFFFFFFC000) + 0x4000;
  }
  else {
    unint64_t v16 = v67;
  }
  unsigned int v63 = v16 >> 14;
  uint64_t v80 = v69;
  unint64_t v79 = v66;
  unint64_t v78 = v66 & 0xFFFFFFFFFFFFC000;
  char v15 = 1;
  if ((v66 & 0xFFFFFFFFFFFFC000) != 0)
  {
    BOOL v14 = 0;
    if (v79 >= v78 + 2136) {
      BOOL v14 = v79 < v78 + 48 * *(unsigned int *)(v78 + 16) + 2136;
    }
    char v15 = v14;
  }
  if ((v15 & 1) == 0)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"!segment || (slice >= segment->xzs_slices && slice < (se"
                           "gment->xzs_slices + segment->xzs_slice_entry_count))\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/../xzone/xzone_inline_internal.h:261)";
    __break(1u);
    JUMPOUT(0x7E2F4);
  }
  if (!v78)
  {
    qword_C0118 = (uint64_t)"BUG IN LIBMALLOC: malloc assertion \"segment != NULL\" failed (/Library/Caches/com.apple.xbs/"
                           "Sources/libmalloc_driverkit/src/xzone/xzone_malloc.c:3066)";
    __break(1u);
    JUMPOUT(0x7E32CLL);
  }
  char v62 = 0;
  if (v90 <= 0x200000 || v67 <= 0x200000 || (*(unsigned char *)(v69 + 296) & 0x80) != 0)
  {
    if (v90 <= 0x200000 && v67 <= 0x200000 && (*(unsigned char *)(v69 + 296) & 0x80) == 0) {
      char v62 = xzm_segment_group_try_realloc_large_chunk(*(unsigned __int8 **)v78, v78, v66, v63);
    }
  }
  else
  {
    char v62 = xzm_segment_group_try_realloc_huge_chunk(*(void *)v78, v69, v78, v66, v63);
  }
  if (v62)
  {
    uint64_t v71 = v64;
  }
  else
  {
LABEL_391:
    if (v67 > v65 || v67 < v65 >> 1)
    {
      uint64_t v61 = xzm_malloc(v69, v67, v70, 0, a5, a6);
      if (v61)
      {
        _platform_memmove();
        uint64_t v71 = v61;
      }
      else
      {
        uint64_t v71 = 0;
      }
    }
    else
    {
      uint64_t v71 = v64;
    }
  }
  __n128 v42 = (char *)v71;
LABEL_435:
  if (v42)
  {
    if (a3 > v44 && v46) {
      _platform_memset();
    }
    if (v42 != a2)
    {
      if (v44 > a3 && v46 || v46) {
        _platform_memset();
      }
      if (v43) {
        _xzm_free(v43, a2, 0);
      }
      else {
        _xzm_free(a1, a2, 0);
      }
    }
  }
  return v42;
}

uint64_t xzm_malloc_zone_malloc_type_memalign_slow(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, __n128 a5, float a6)
{
  if ((*(void *)(a1 + 296) & 0x80) != 0 && a3 <= 0x8000)
  {
    if (*(void *)(a1 + 232)) {
      uint64_t v7 = *(void *)(a1 + 232);
    }
    else {
      uint64_t v7 = a1;
    }
    uint64_t v8 = xzm_malloc_zone_malloc_type_memalign(v7, a2, a3, a4, a5, a6);
  }
  else
  {
    uint64_t v8 = xzm_malloc_zone_malloc_type_memalign(a1, a2, a3, a4, a5, a6);
  }
  if (v8 && (*(void *)(a1 + 296) & 0x20) != 0) {
    _platform_memset();
  }
  return v8;
}

uint64_t xzm_malloc_zone_malloc_type_malloc_with_options_slow(uint64_t a1, unint64_t a2, unint64_t a3, char a4, uint64_t a5, __n128 a6, float a7)
{
  if ((*(void *)(a1 + 296) & 0x80) != 0 && a3 <= 0x8000)
  {
    if (*(void *)(a1 + 232)) {
      uint64_t v8 = *(void *)(a1 + 232);
    }
    else {
      uint64_t v8 = a1;
    }
    uint64_t v9 = xzm_malloc_zone_malloc_type_malloc_with_options(v8, a2, a3, a4, a5, a6, a7);
  }
  else
  {
    uint64_t v9 = xzm_malloc_zone_malloc_type_malloc_with_options(a1, a2, a3, a4, a5, a6, a7);
  }
  if (v9 && (a4 & 1) == 0 && (*(void *)(a1 + 296) & 0x20) != 0) {
    _platform_memset();
  }
  return v9;
}

void malloc_slowpath_update()
{
  char v0 = 1;
  if ((has_injected_zone0 & 1) == 0)
  {
    char v0 = 1;
    if (malloc_num_zones)
    {
      char v0 = 1;
      if (!malloc_check_start)
      {
        char v0 = 1;
        if (!lite_zone)
        {
          char v0 = 1;
          if ((malloc_tracing_enabled & 1) == 0)
          {
            char v0 = 1;
            if ((malloc_simple_stack_logging & 1) == 0)
            {
              char v0 = 1;
              if ((malloc_debug_flags & 0x20) == 0) {
                char v0 = malloc_interposition_compat;
              }
            }
          }
        }
      }
    }
  }
  if ((malloc_slowpath & 1) != (v0 & 1)) {
    malloc_slowpath = v0 & 1;
  }
}

void __malloc_init(uint64_t a1)
{
  uint64_t v9 = (uint64_t *)a1;
  bzero(v10, 0x400uLL);
  BOOL v8 = MEMORY[0xFFFFF4084] != 0;
  size_t v7 = 1023;
  if (MEMORY[0xFFFFF4084] && !sysctlbyname("kern.bootargs", v10, &v7, 0, 0) && v7) {
    v10[v7 + 1] = 0;
  }
  if (vm_kernel_page_size <= vm_page_size) {
    vm_size_t v2 = vm_page_size;
  }
  else {
    vm_size_t v2 = vm_kernel_page_size;
  }
  malloc_absolute_max_mach_vm_size_t size = -1 - 2 * v2;
  BOOL v6 = _malloc_allow_internal_security_policy();
  if (v6 != (malloc_internal_security_policy & 1)) {
    malloc_internal_security_policy = v6;
  }
  _malloc_init_featureflags();
  uint64_t v4 = 0;
  for (int i = v9; ; ++i)
  {
    BOOL v1 = 0;
    if (i) {
      BOOL v1 = *i != 0;
    }
    if (!v1) {
      break;
    }
    if (_platform_strstr() == *i)
    {
      int v3 = __entropy_from_kernel();
      _platform_strlen();
      _platform_bzero();
      if (v3 == 2) {
        _malloc_entropy_initialized = 1;
      }
    }
    if (_platform_strstr() == *i) {
      uint64_t v4 = *i;
    }
    if (_platform_strstr() == *i) {
      large_cache_enabled = 1;
    }
  }
  if ((_malloc_entropy_initialized & 1) == 0)
  {
    getentropy(malloc_entropy, 0x10uLL);
    _malloc_entropy_initialized = 1;
  }
  if (v4) {
    __malloc_init_experiments();
  }
  __malloc_init_from_bootargs(v10);
  mvm_aslr_init();
  j__malloc_default_zone();
  _malloc_initialize((uint64_t)v9, v10);
}

uint64_t __entropy_from_kernel()
{
  unsigned int v2 = 0;
  uint64_t v4 = _platform_strchr();
  if (v4)
  {
    uint64_t v5 = v4 + 1;
    while (1)
    {
      BOOL v1 = 0;
      if (v5) {
        BOOL v1 = (unint64_t)(int)v2 < 2;
      }
      if (!v1) {
        break;
      }
      _platform_strlcpy();
      int v3 = (unsigned char *)_platform_strchr();
      if (v3) {
        *int v3 = 0;
      }
      malloc_entropy[v2++] = strtoull_l(v7, 0, 0, 0);
      uint64_t v5 = _platform_strchr();
      if (v5) {
        ++v5;
      }
    }
    return v2;
  }
  else
  {
    return 0;
  }
}

unint64_t __malloc_init_experiments()
{
  unint64_t v1 = 0;
  unint64_t result = _platform_strchr();
  if (result)
  {
    unint64_t result = strtoull_l((const char *)(result + 1), 0, 16, 0);
    unint64_t v1 = result;
  }
  if (v1 == 1) {
    magazine_medium_enabled = 0;
  }
  return result;
}

void __malloc_init_from_bootargs(unsigned char *a1)
{
  unint64_t v12 = a1;
  unint64_t v11 = malloc_common_value_for_key_copy(a1, (uint64_t)"malloc_max_magazines", v13, 0x100uLL);
  if (v11)
  {
    unint64_t v10 = 0;
    uint64_t v9 = malloc_common_convert_to_long(v11, &v10);
    if (*v10 || v9 < 0) {
      malloc_report(3, (uint64_t)"malloc_max_magazines must be positive - ignored.\n");
    }
    else {
      max_magazines = v9;
    }
  }
  unint64_t v11 = malloc_common_value_for_key_copy(v12, (uint64_t)"malloc_large_expanded_cache_threshold", v13, 0x100uLL);
  if (v11)
  {
    BOOL v8 = 0;
    uint64_t v7 = malloc_common_convert_to_long(v11, &v8);
    if (*v8 || v7 < 0) {
      malloc_report(3, (uint64_t)"malloc_large_expanded_cache_threshold must be positive - ignored.\n");
    }
    else {
      magazine_large_expanded_cache_threshold = v7;
    }
  }
  unint64_t v11 = malloc_common_value_for_key_copy(v12, (uint64_t)"malloc_zero_on_free_enabled", v13, 0x100uLL);
  if (v11)
  {
    BOOL v6 = 0;
    unint64_t v5 = malloc_common_convert_to_long(v11, &v6);
    if (*v6 || v5 > 1) {
      malloc_report(3, (uint64_t)"malloc_zero_on_free_enabled must be 0 or 1 - ignored.\n");
    }
    else {
      malloc_zero_policy = v5 == 0;
    }
  }
  unint64_t v11 = malloc_common_value_for_key_copy(v12, (uint64_t)"malloc_zero_on_free_sample_period", v13, 0x100uLL);
  if (v11)
  {
    uint64_t v4 = 0;
    uint64_t v3 = malloc_common_convert_to_long(v11, &v4);
    if (*v4 || v3 < 0) {
      malloc_report(3, (uint64_t)"malloc_zero_on_free_sample_period must be positive - ignored.\n");
    }
    else {
      malloc_zero_on_free_sample_period = v3;
    }
  }
  unint64_t v11 = malloc_common_value_for_key_copy(v12, (uint64_t)"malloc_secure_allocator", v13, 0x100uLL);
  if (v11)
  {
    unsigned int v2 = 0;
    unint64_t v1 = malloc_common_convert_to_long(v11, &v2);
    if (*v2 || v1 > 1) {
      malloc_report(3, (uint64_t)"malloc_secure_allocator must be 0 or 1 - ignored.\n");
    }
    else {
      malloc_xzone_enabled = v1 != 0;
    }
  }
}

void _malloc_initialize(uint64_t a1, unsigned char *a2)
{
  phys_ncpus = MEMORY[0xFFFFFC035];
  logical_ncpus = MEMORY[0xFFFFFC036];
  ncpuclusters = MEMORY[0xFFFFFC02F];
  if (MEMORY[0xFFFFFC036] % MEMORY[0xFFFFFC035])
  {
    malloc_report(3, (uint64_t)"*** FATAL ERROR - logical_ncpus %% phys_ncpus != 0\n.\n");
    qword_C0118 = (uint64_t)"FATAL ERROR - logical_ncpus %% phys_ncpus != 0\n";
    qword_C0148 = logical_ncpus % phys_ncpus;
    __break(1u);
    JUMPOUT(0x7FFE4);
  }
  unsigned int v5 = logical_ncpus / phys_ncpus;
  if (logical_ncpus / phys_ncpus == 1)
  {
    hyper_shift = 0;
  }
  else if (v5 == 2)
  {
    hyper_shift = 1;
  }
  else
  {
    if (v5 != 4)
    {
      malloc_report(3, (uint64_t)"*** FATAL ERROR - logical_ncpus / phys_ncpus not 1, 2, or 4.\n");
      qword_C0118 = (uint64_t)"FATAL ERROR - logical_ncpus / phys_ncpus not 1, 2, or 4";
      qword_C0148 = logical_ncpus / phys_ncpus;
      __break(1u);
      JUMPOUT(0x800BCLL);
    }
    hyper_shift = 2;
  }
  if (max_magazines)
  {
    if (max_magazines >= logical_ncpus) {
      int v4 = logical_ncpus;
    }
    else {
      int v4 = max_magazines;
    }
    max_magazines = v4;
  }
  else
  {
    max_magazines = logical_ncpus;
  }
  if (max_medium_magazines)
  {
    if (max_medium_magazines >= logical_ncpus) {
      int v3 = logical_ncpus;
    }
    else {
      int v3 = max_medium_magazines;
    }
    max_medium_magazines = v3;
  }
  else
  {
    max_medium_magazines = max_magazines;
  }
  _malloc_detect_interposition();
  set_flags_from_environment();
  malloc_sanitizer_enabled = sanitizer_should_enable();
  uint64_t v9 = *_NSGetEnviron();
  if ((malloc_sanitizer_enabled & 1) == 0 && (malloc_debug_flags & 0x20) == 0 && !malloc_zero_on_free_sample_period) {
    nano_common_init((uint64_t)v9, a1, a2);
  }
  char v8 = 0;
  char v7 = 0;
  if (malloc_xzone_nano_override == 1)
  {
    char v7 = 0;
  }
  else if (malloc_xzone_nano_override == 2)
  {
    char v7 = 1;
  }
  if (malloc_nano_on_xzone_override == 2) {
    char v7 = 0;
  }
  if ((malloc_xzone_enabled & 1) != 0 && _malloc_engaged_nano == 2 && (v7 & 1) == 0)
  {
    if (malloc_nano_on_xzone_override == 1)
    {
      char v8 = 0;
    }
    else if (malloc_nano_on_xzone_override == 2)
    {
      char v8 = 1;
    }
    if ((malloc_nano_on_xzone & 1) != (v8 & 1)) {
      malloc_nano_on_xmach_vm_address_t zone = v8;
    }
    if ((v8 & 1) == 0) {
      malloc_xzone_enabled = 0;
    }
  }
  if (malloc_xzone_enabled)
  {
    mfm_initialize();
    initial_xzone_mach_vm_address_t zone = xzm_main_malloc_zone_create(malloc_debug_flags, (uint64_t)v9, a1, (uint64_t)a2);
    malloc_set_zone_name((malloc_zone_t *)initial_xzone_zone, "DefaultMallocZone");
    malloc_zone_register_while_locked(initial_xzone_zone, 1);
  }
  if (!initial_xzone_zone || (v8 & 1) != 0)
  {
    if (!initial_xzone_zone)
    {
      initial_scalable_mach_vm_address_t zone = create_scalable_zone(0, malloc_debug_flags);
      malloc_set_zone_name((malloc_zone_t *)initial_scalable_zone, "DefaultMallocZone");
      malloc_zone_register_while_locked(initial_scalable_zone, 1);
    }
    nano_common_configure();
    if (initial_xzone_zone) {
      unsigned int v2 = (malloc_zone_t *)initial_xzone_zone;
    }
    else {
      unsigned int v2 = (malloc_zone_t *)initial_scalable_zone;
    }
    if (_malloc_engaged_nano == 2)
    {
      if (malloc_report_config) {
        malloc_report(5, (uint64_t)"NanoV2 Config:\n\tNano On Xzone: %d\n");
      }
      initial_nano_mach_vm_address_t zone = (uint64_t)nanov2_create_zone((uint64_t)v2, malloc_debug_flags);
    }
    if (initial_nano_zone)
    {
      malloc_set_zone_name((malloc_zone_t *)initial_nano_zone, "DefaultMallocZone");
      malloc_set_zone_name(v2, "MallocHelperZone");
      malloc_zone_register_while_locked(initial_nano_zone, 1);
    }
  }
  if (malloc_sanitizer_enabled)
  {
    mach_vm_address_t zone = sanitizer_create_zone(*(void *)malloc_zones);
    malloc_zone_register_while_locked(zone, 1);
  }
  malloc_slowpath_update();
  initial_num_zones = malloc_num_zones;
  if (large_cache_enabled)
  {
    if (initial_xzone_zone)
    {
      large_cache_enabled = 0;
    }
    else if (mvm_deferred_reclaim_init())
    {
      large_cache_enabled = 0;
      malloc_report(3, (uint64_t)"Unable to set up reclaim buffer (%d) - disabling large cache\n");
    }
  }
  if ((malloc_report_config & 1) != 0 && initial_scalable_zone) {
    malloc_report(5, (uint64_t)"Magazine Config:\n\tMax Magazines: %d\n\tMedium Enabled: %d\n\tAggressive Madvise: %d\n\tLarge Cache: %d%s\n\tScribble: %d\n");
  }
}

void **__malloc_late_init(uint64_t a1)
{
  register_pgm_zone(*(unsigned char *)(a1 + 24) & 1);
  unint64_t result = stack_logging_early_finished(a1);
  initial_num_zones = malloc_num_zones;
  if (malloc_sanitizer_enabled) {
    return (void **)sanitizer_reset_environment();
  }
  return result;
}

void register_pgm_zone(char a1)
{
  pgm_init_config(a1 & 1);
  if (enable_pgm(0))
  {
    mach_vm_address_t zone = pgm_create_zone(*(void *)malloc_zones);
    malloc_zone_register_while_locked(zone, 1);
  }
}

void **stack_logging_early_finished(uint64_t a1)
{
  if (*(void *)a1 >= 2uLL && *(void *)(a1 + 32)) {
    memcpy(&msl, *(const void **)(a1 + 32), 0x68uLL);
  }
  unint64_t result = _NSGetEnviron();
  for (int i = *result; *i; ++i)
  {
    unint64_t result = (void **)_platform_strncmp();
    if (!result)
    {
      unint64_t result = (void **)_malloc_register_stack_logger(1);
      if (off_C4268)
      {
        int v3 = (uint64_t (*)(char **))off_C4268;
        unsigned int v2 = _NSGetEnviron();
        unint64_t result = (void **)v3(*v2);
      }
      break;
    }
  }
  if (off_C4270) {
    return (void **)off_C4270();
  }
  return result;
}

uint64_t has_default_zone0()
{
  return (has_injected_zone0 ^ 1) & 1;
}

void *find_registered_zone(uint64_t a1, uint64_t *a2, char a3)
{
  char v13 = a3 & 1;
  if (malloc_num_zones)
  {
    if (lite_zone && (uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(lite_zone + 16))(lite_zone, a1)) != 0)
    {
      if (a2) {
        *a2 = v12;
      }
      return default_zone;
    }
    else
    {
      LODWORD(v7) = (v13 & 1) != 0;
      while (v7 < initial_num_zones)
      {
        uint64_t v10 = *((void *)malloc_zones + v7);
        uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 16))(v10, a1);
        if (v8)
        {
          if (a2) {
            *a2 = v8;
          }
          if (v7 || !has_default_zone0()) {
            return (void *)v10;
          }
          else {
            return default_zone;
          }
        }
        uint64_t v7 = (v7 + 1);
      }
      BOOL v6 = (atomic_uint *)pFRZCounterLive;
      atomic_fetch_add((atomic_uint *volatile)pFRZCounterLive, 1u);
      unsigned int v5 = malloc_num_zones;
      for (unsigned int i = initial_num_zones; i < v5; ++i)
      {
        uint64_t v11 = *((void *)malloc_zones + i);
        uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 16))(v11, a1);
        if (v9) {
          goto LABEL_25;
        }
      }
      uint64_t v11 = 0;
      uint64_t v9 = 0;
LABEL_25:
      if (a2) {
        *a2 = v9;
      }
      atomic_fetch_add(v6, 0xFFFFFFFF);
      return (void *)v11;
    }
  }
  else
  {
    if (a2) {
      *a2 = 0;
    }
    return 0;
  }
}

uint64_t malloc_gdb_po_unsafe()
{
  if (off_C4248 && off_C4248())
  {
    return 1;
  }
  else
  {
    BOOL v6 = malloc_zones;
    for (uint64_t i = malloc_num_zones; HIDWORD(i) != i; ++HIDWORD(i))
    {
      uint64_t v4 = v6[HIDWORD(i)];
      if (*(_DWORD *)(v4 + 104) >= 5u)
      {
        uint64_t v3 = 0;
        if (*(void *)(v4 + 96)) {
          uint64_t v3 = *(void *)(v4 + 96);
        }
        uint64_t v2 = 0;
        if (*(void *)(v3 + 64)) {
          uint64_t v2 = *(void *)(v3 + 64);
        }
        if (v2)
        {
          uint64_t v1 = 0;
          if (*(void *)(v4 + 96)) {
            uint64_t v1 = *(void *)(v4 + 96);
          }
          if ((*(unsigned int (**)(uint64_t))(v1 + 64))(v4)) {
            return 1;
          }
        }
      }
    }
    return 0;
  }
}

void malloc_zone_register_while_locked(uint64_t a1, char a2)
{
  uint64_t v9 = a1;
  char v8 = a2 & 1;
  size_t v7 = 0;
  for (unsigned int i = 0; i != malloc_num_zones; ++i)
  {
    if (v9 == *((void *)malloc_zones + i))
    {
      malloc_report(3, (uint64_t)"Attempted to register zone more than once: %p\n");
      return;
    }
  }
  if (malloc_num_zones == malloc_num_zones_allocated)
  {
    uint64_t v5 = 8 * malloc_num_zones;
    mach_vm_size_t size = (v5 + vm_page_size + vm_page_size - 1) & ~(vm_page_size - 1);
    mach_vm_address_t address = vm_page_size;
    if (mach_vm_allocate(mach_task_self_, &address, size, 16777217))
    {
      malloc_report(3, (uint64_t)"malloc_zone_register allocation failed: %d\n");
      return;
    }
    uint64_t v2 = (void *)address;
    if (malloc_zones)
    {
      _platform_memmove();
      mach_vm_address_t address = (mach_vm_address_t)malloc_zones;
      mach_vm_deallocate(mach_task_self_, (mach_vm_address_t)malloc_zones, (v5 + vm_page_size - 1) & ~(vm_page_size - 1));
    }
    size_t v7 = size;
    malloc_zones = v2;
    malloc_num_zones_allocated = size / 8;
  }
  else
  {
    size_t v7 = 8 * malloc_num_zones_allocated;
    mprotect(malloc_zones, v7, 3);
  }
  if (v8)
  {
    _platform_memmove();
    *(void *)malloc_zones = v9;
  }
  else
  {
    *((void *)malloc_zones + malloc_num_zones) = v9;
  }
  uint64_t v10 = &malloc_num_zones;
  int v14 = 1;
  char v13 = &malloc_num_zones;
  int v12 = 1;
  unsigned int add = atomic_fetch_add((atomic_uint *volatile)&malloc_num_zones, 1u);
  mprotect(malloc_zones, v7, 1);
  if ((v8 & 1) != 0 && *(void *)malloc_zones != v9)
  {
    has_injected_zone0 = 1;
    malloc_slowpath_update();
  }
}

malloc_zone_t *malloc_default_zone(void)
{
  return (malloc_zone_t *)default_zone;
}

uint64_t zeroify_scalable_zone(uint64_t result)
{
  if ((_UNKNOWN *)result == default_zone)
  {
    uint64_t v4 = 0;
    if (legacy_zeroing_large_malloc) {
      uint64_t v4 = legacy_zeroing_large_malloc;
    }
    uint64_t v3 = 0;
    if (v4) {
      uint64_t v3 = v4;
    }
    *(void *)(result + 24) = v3;
    uint64_t v2 = 0;
    if (legacy_zeroing_large_valloc) {
      uint64_t v2 = legacy_zeroing_large_valloc;
    }
    uint64_t v1 = 0;
    if (v2) {
      uint64_t v1 = v2;
    }
    *(void *)(result + 40) = v1;
  }
  return result;
}

uint64_t legacy_zeroing_large_malloc(uint64_t a1, unint64_t a2)
{
  if (a2 <= 0x1FC00) {
    return default_zone_malloc(a1, a2);
  }
  else {
    return default_zone_calloc(a1, 1, a2);
  }
}

uint64_t legacy_zeroing_large_valloc(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = default_zone_valloc(a1, a2);
  _platform_memset();
  return v3;
}

uint64_t malloc_engaged_nano()
{
  if (initial_nano_zone || initial_xzone_zone) {
    return _malloc_engaged_nano;
  }
  else {
    return 0;
  }
}

BOOL malloc_engaged_secure_allocator()
{
  return initial_xzone_zone != 0;
}

malloc_zone_t *__cdecl malloc_create_zone(vm_size_t start_size, unsigned int flags)
{
  mach_vm_address_t zone = 0;
  if (start_size > malloc_absolute_max_size) {
    return 0;
  }
  if (initial_xzone_zone && (xzm_create_mzones & 1) != 0) {
    mach_vm_address_t zone = (malloc_zone_t *)xzm_malloc_zone_create(flags | malloc_debug_flags, initial_xzone_zone);
  }
  if (!zone) {
    mach_vm_address_t zone = (malloc_zone_t *)create_scalable_zone(start_size, flags | malloc_debug_flags);
  }
  if (enable_pgm(flags))
  {
    char v8 = (malloc_zone_t *)pgm_create_zone((uint64_t)zone);
    if (v2) {
      char v3 = 0;
    }
    else {
      char v3 = 1;
    }
    if ((v3 & 1) == 0
      || (int v4 = 0,
          atomic_compare_exchange_strong_explicit((atomic_uint *volatile)&_malloc_lock, (unsigned int *)&v4, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire), v4))
    {
      os_unfair_lock_lock_with_options();
    }
    malloc_zone_register_while_locked((uint64_t)v8, 0);
    malloc_zone_register_while_locked((uint64_t)zone, 0);
    int v5 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    int v6 = v5;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)&_malloc_lock, (unsigned int *)&v6, 0, memory_order_release, memory_order_relaxed);
    if (v6 != v5) {
      os_unfair_lock_unlock((os_unfair_lock_t)&_malloc_lock);
    }
    return v8;
  }
  else
  {
    malloc_zone_register(zone);
    return zone;
  }
}

uint64_t enable_pgm(__int16 a1)
{
  char v3 = 1;
  if ((has_injected_zone0 & 1) == 0) {
    char v3 = malloc_sanitizer_enabled;
  }
  char should_enable = 0;
  if ((v3 & 1) == 0)
  {
    char should_enable = 0;
    if ((a1 & 0x400) == 0) {
      char should_enable = pgm_should_enable();
    }
  }
  return should_enable & 1;
}

void malloc_zone_register(malloc_zone_t *zone)
{
  if (v1) {
    char v2 = 0;
  }
  else {
    char v2 = 1;
  }
  if ((v2 & 1) == 0
    || (int v3 = 0,
        atomic_compare_exchange_strong_explicit((atomic_uint *volatile)&_malloc_lock, (unsigned int *)&v3, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire), v3))
  {
    os_unfair_lock_lock_with_options();
  }
  malloc_zone_register_while_locked((uint64_t)zone, 0);
  int v4 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  int v5 = v4;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)&_malloc_lock, (unsigned int *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 != v4) {
    os_unfair_lock_unlock((os_unfair_lock_t)&_malloc_lock);
  }
}

void malloc_create_legacy_default_zone()
{
  legacy_scalable_mach_vm_address_t zone = (malloc_zone_t *)create_legacy_scalable_zone(0, malloc_debug_flags);
  if (v0) {
    char v1 = 0;
  }
  else {
    char v1 = 1;
  }
  if ((v1 & 1) == 0
    || (int v2 = 0,
        atomic_compare_exchange_strong_explicit((atomic_uint *volatile)&_malloc_lock, (unsigned int *)&v2, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire), v2))
  {
    os_unfair_lock_lock_with_options();
  }
  mach_vm_address_t zone = *(malloc_zone_t **)malloc_zones;
  if (*(void *)(*(void *)malloc_zones + 72) && !_platform_strcmp()) {
    malloc_set_zone_name(zone, 0);
  }
  malloc_set_zone_name(legacy_scalable_zone, "DefaultMallocZone");
  malloc_zone_register_while_locked((uint64_t)legacy_scalable_zone, 1);
  int v3 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  int v4 = v3;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)&_malloc_lock, (unsigned int *)&v4, 0, memory_order_release, memory_order_relaxed);
  if (v4 != v3) {
    os_unfair_lock_unlock((os_unfair_lock_t)&_malloc_lock);
  }
}

void malloc_set_zone_name(malloc_zone_t *zone, const char *name)
{
  char v12 = 1;
  BOOL v6 = 0;
  if (zone->version >= 0xE)
  {
    introspect = 0;
    if (zone->introspect) {
      introspect = zone->introspect;
    }
    BOOL v6 = LODWORD(introspect[1].enumerator) == 1;
  }
  if (v6) {
    char v12 = 0;
  }
  if (v12) {
    mprotect(zone, 0xC8uLL, 3);
  }
  if (zone->zone_name)
  {
    zone_name = zone->zone_name;
    if (malloc_num_zones)
    {
      if (lite_zone && (*(uint64_t (**)(uint64_t, const char *))(lite_zone + 16))(lite_zone, zone_name))
      {
        BOOL v22 = (malloc_zone_t *)default_zone;
      }
      else
      {
        LODWORD(v18) = 0;
        while (v18 < initial_num_zones)
        {
          uint64_t v19 = *((void *)malloc_zones + v18);
          if ((*(uint64_t (**)(uint64_t, const char *))(v19 + 16))(v19, zone_name))
          {
            if (v18 || !has_default_zone0()) {
              BOOL v22 = (malloc_zone_t *)v19;
            }
            else {
              BOOL v22 = (malloc_zone_t *)default_zone;
            }
            goto LABEL_29;
          }
          uint64_t v18 = (v18 + 1);
        }
        BOOL v17 = (atomic_uint *)pFRZCounterLive;
        atomic_fetch_add((atomic_uint *volatile)pFRZCounterLive, 1u);
        unsigned int v16 = malloc_num_zones;
        for (unsigned int i = initial_num_zones; i < v16; ++i)
        {
          uint64_t v20 = *((void *)malloc_zones + i);
          if ((*(uint64_t (**)(uint64_t, const char *))(v20 + 16))(v20, zone_name)) {
            goto LABEL_28;
          }
        }
        uint64_t v20 = 0;
LABEL_28:
        atomic_fetch_add(v17, 0xFFFFFFFF);
        BOOL v22 = (malloc_zone_t *)v20;
      }
    }
    else
    {
      BOOL v22 = 0;
    }
LABEL_29:
    if (v22) {
      malloc_zone_free(v22, (void *)zone->zone_name);
    }
    zone->zone_name = 0;
  }
  if (name)
  {
    unint64_t v11 = _platform_strlen() + 1;
    if (_dyld_is_memory_immutable())
    {
      zone->zone_name = name;
    }
    else
    {
      uint64_t v10 = (const char *)_malloc_zone_malloc(zone, v11, 0);
      if (v10)
      {
        _platform_strcpy();
        zone->zone_name = v10;
      }
    }
    wrapped_mach_vm_address_t zone = (malloc_zone_t *)get_wrapped_zone((uint64_t)zone);
    if (wrapped_zone)
    {
      __s2 = (char *)get_wrapper_zone_label((uint64_t)zone);
      uint64_t v3 = _platform_strlen();
      uint64_t v4 = v3 + _platform_strlen();
      uint64_t v2 = _platform_strlen();
      __s1 = (char *)_malloc_zone_malloc(wrapped_zone, v4 + v2 + 3, 0);
      if (__s1)
      {
        _platform_strcpy();
        strcat(__s1, "-");
        strcat(__s1, __s2);
        strcat(__s1, "-");
        strcat(__s1, "Wrapped");
        malloc_set_zone_name(wrapped_zone, __s1);
        malloc_zone_free(wrapped_zone, __s1);
      }
    }
  }
  if (v12) {
    mprotect(zone, 0xC8uLL, 1);
  }
}

void malloc_destroy_zone(malloc_zone_t *zone)
{
}

void malloc_zone_unregister(malloc_zone_t *zone)
{
  if (malloc_num_zones)
  {
    int v1 = 0;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)&_malloc_lock, (unsigned int *)&v1, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
    if (v1) {
      os_unfair_lock_lock_with_options();
    }
    for (unsigned int i = 0; i < malloc_num_zones; ++i)
    {
      if (zone == *((malloc_zone_t **)malloc_zones + i))
      {
        uint64_t v10 = 8 * malloc_num_zones_allocated;
        mprotect(malloc_zones, v10, 3);
        *((void *)malloc_zones + i) = *((void *)malloc_zones + --malloc_num_zones);
        mprotect(malloc_zones, v10, 1);
        if (malloc_num_zones >= initial_num_zones) {
          unsigned int v8 = initial_num_zones;
        }
        else {
          unsigned int v8 = malloc_num_zones;
        }
        if (v8 <= 1)
        {
          int v6 = 1;
        }
        else
        {
          if (malloc_num_zones >= initial_num_zones) {
            int v7 = initial_num_zones;
          }
          else {
            int v7 = malloc_num_zones;
          }
          int v6 = v7;
        }
        initial_num_zones = v6;
        uint64_t v9 = (int *)pFRZCounterLive;
        pFRZCounterLive = pFRZCounterDrain;
        pFRZCounterDraiunint64_t n = v9;
        __dmb(0xBu);
        while (*pFRZCounterDrain)
          yield();
        int v2 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
        int v3 = v2;
        atomic_compare_exchange_strong_explicit((atomic_uint *volatile)&_malloc_lock, (unsigned int *)&v3, 0, memory_order_release, memory_order_relaxed);
        if (v3 != v2) {
          os_unfair_lock_unlock((os_unfair_lock_t)&_malloc_lock);
        }
        return;
      }
    }
    int v4 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    int v5 = v4;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)&_malloc_lock, (unsigned int *)&v5, 0, memory_order_release, memory_order_relaxed);
    if (v5 != v4) {
      os_unfair_lock_unlock((os_unfair_lock_t)&_malloc_lock);
    }
    malloc_report(3, (uint64_t)"*** malloc_zone_unregister() failed for %p\n");
  }
}

void malloc_zone_check_fail(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _simple_salloc();
  if (v4) {
    _simple_sprintf();
  }
  else {
    malloc_report(16, (uint64_t)"*** MallocCheckHeap: FAILED check at operation #%d\n");
  }
  if (frames)
  {
    unsigned int v3 = 1;
    if (v4)
    {
      _simple_sappend();
      while (v3 < num_frames)
      {
        ++v3;
        _simple_sprintf();
      }
      _simple_string();
      malloc_report(16, (uint64_t)"%s\n(Use 'atos' for a symbolic stack)\n");
    }
    else
    {
      malloc_report(16, (uint64_t)"Stack for last operation where the malloc check succeeded: ");
      while (v3 < num_frames)
      {
        ++v3;
        malloc_report(16, (uint64_t)"%p ");
      }
      malloc_report(16, (uint64_t)"\n(Use 'atos' for a symbolic stack)\n");
    }
  }
  if (malloc_check_each > 1) {
    malloc_report(16, (uint64_t)"*** Recommend using 'setenv MallocCheckHeapStart %d; setenv MallocCheckHeapEach %d' to narrow down failure\n");
  }
  if (v4) {
    _simple_sfree();
  }
  unsigned int v2 = 0;
  if (malloc_check_abort)
  {
    malloc_vreport(211, 0, a1, 0, a2);
  }
  else if (malloc_check_sleep <= 0)
  {
    if (malloc_check_sleep < 0)
    {
      malloc_report(5, (uint64_t)"*** Will sleep once for %d seconds to leave time to attach\n");
      unsigned int v2 = -malloc_check_sleep;
      malloc_check_sleep = 0;
    }
    malloc_vreport(147, v2, a1, 0, a2);
  }
  else
  {
    malloc_report(5, (uint64_t)"*** Will sleep for %d seconds to leave time to attach\n");
    malloc_vreport(147, malloc_check_sleep, a1, 0, a2);
  }
}

uint64_t _malloc_zone_malloc(void *a1, unint64_t a2, unsigned int a3)
{
  uint64_t v6 = (uint64_t)a1;
  if (a1 == default_zone && !lite_zone) {
    uint64_t v6 = *(void *)malloc_zones;
  }
  BOOL v4 = 1;
  if ((malloc_slowpath & 1) == 0)
  {
    BOOL v4 = 1;
    if (!malloc_logger) {
      BOOL v4 = *(_DWORD *)(v6 + 104) < 0xDu;
    }
  }
  if (v4) {
    return _malloc_zone_malloc_instrumented_or_legacy(v6, a2, a3);
  }
  if (a2 <= malloc_absolute_max_size)
  {
    if (*(_DWORD *)(v6 + 104) < 0x10u) {
      return (*(uint64_t (**)(uint64_t, unint64_t))(v6 + 24))(v6, a2);
    }
    else {
      return (*(uint64_t (**)(uint64_t, unint64_t, void))(v6 + 160))(v6, a2, (v5 >> 2));
    }
  }
  else
  {
    malloc_set_errno_fast(a3, 12);
    return 0;
  }
}

uint64_t _malloc_zone_malloc_instrumented_or_legacy(uint64_t a1, unint64_t a2, unsigned int a3)
{
  char v6 = 0;
  if (!*(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904))
  {
    *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = (v4 >> 2);
    char v6 = 1;
  }
  if (malloc_tracing_enabled) {
    kdebug_trace();
  }
  uint64_t v5 = 0;
  if (malloc_check_start) {
    internal_check();
  }
  if (a2 <= malloc_absolute_max_size)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, a2);
    if (malloc_logger) {
      malloc_logger(10, a1, a2, 0, v5, 0);
    }
    if (malloc_simple_stack_logging) {
      malloc_report(805, (uint64_t)"malloc (%p/%llu): ");
    }
    if (malloc_tracing_enabled) {
      kdebug_trace();
    }
  }
  if (v6) {
    *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = 0;
  }
  if (!v5) {
    malloc_set_errno_fast(a3, 12);
  }
  return v5;
}

void *__cdecl malloc_zone_malloc(malloc_zone_t *zone, size_t size)
{
  return (void *)_malloc_zone_malloc(zone, size, 0);
}

uint64_t _malloc_zone_calloc(void *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v7 = (uint64_t)a1;
  if (a1 == default_zone && !lite_zone) {
    uint64_t v7 = *(void *)malloc_zones;
  }
  BOOL v5 = 1;
  if ((malloc_slowpath & 1) == 0)
  {
    BOOL v5 = 1;
    if (!malloc_logger) {
      BOOL v5 = *(_DWORD *)(v7 + 104) < 0xDu;
    }
  }
  if (v5) {
    return _malloc_zone_calloc_instrumented_or_legacy(v7, a2, a3, a4);
  }
  if (*(_DWORD *)(v7 + 104) < 0x10u) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v7, a2, a3);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v7 + 168))(v7, a2, a3, (v6 >> 2));
}

uint64_t _malloc_zone_calloc_instrumented_or_legacy(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  char v7 = 0;
  if (!*(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904))
  {
    *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = (v5 >> 2);
    char v7 = 1;
  }
  if (malloc_tracing_enabled) {
    kdebug_trace();
  }
  if (malloc_check_start) {
    internal_check();
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 32))(a1, a2, a3);
  if (malloc_logger) {
    malloc_logger(74, a1, a2 * a3, 0, v6, 0);
  }
  if (malloc_simple_stack_logging) {
    malloc_report(805, (uint64_t)"calloc (%p/%llu*%llu): ");
  }
  if (malloc_tracing_enabled) {
    kdebug_trace();
  }
  if (v7) {
    *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = 0;
  }
  if (!v6) {
    malloc_set_errno_fast(a4, 12);
  }
  return v6;
}

void *__cdecl malloc_zone_calloc(malloc_zone_t *zone, size_t num_items, size_t size)
{
  return (void *)_malloc_zone_calloc(zone, num_items, size, 0);
}

uint64_t _malloc_zone_valloc(uint64_t a1, unint64_t a2, unsigned int a3)
{
  char v6 = 0;
  if (!*(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904))
  {
    *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = (v4 >> 2);
    char v6 = 1;
  }
  if (malloc_tracing_enabled) {
    kdebug_trace();
  }
  uint64_t v5 = 0;
  if (malloc_check_start) {
    internal_check();
  }
  if (a2 <= malloc_absolute_max_size)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t, unint64_t))(a1 + 40))(a1, a2);
    if (malloc_logger) {
      malloc_logger(10, a1, a2, 0, v5, 0);
    }
    if (malloc_simple_stack_logging) {
      malloc_report(805, (uint64_t)"valloc (%p/%llu): ");
    }
    if (malloc_tracing_enabled) {
      kdebug_trace();
    }
  }
  if (v6) {
    *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = 0;
  }
  if (!v5) {
    malloc_set_errno_fast(a3, 12);
  }
  return v5;
}

void *__cdecl malloc_zone_valloc(malloc_zone_t *zone, size_t size)
{
  return (void *)_malloc_zone_valloc((uint64_t)zone, size, 0);
}

uint64_t _malloc_zone_realloc(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  char v6 = 0;
  if (!*(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904))
  {
    *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = a4;
    char v6 = 1;
  }
  if (malloc_tracing_enabled) {
    kdebug_trace();
  }
  uint64_t v5 = 0;
  if (malloc_check_start) {
    internal_check();
  }
  if (a3 <= malloc_absolute_max_size)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(a1 + 56))(a1, a2, a3);
    if (malloc_logger) {
      malloc_logger(14, a1, a2, a3, v5, 0);
    }
    if (malloc_simple_stack_logging) {
      malloc_report(805, (uint64_t)"realloc (%p->%p/%llu): ");
    }
    if (malloc_tracing_enabled) {
      kdebug_trace();
    }
  }
  if (v6) {
    *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = 0;
  }
  return v5;
}

void *__cdecl malloc_zone_realloc(malloc_zone_t *zone, void *ptr, size_t size)
{
  return (void *)_malloc_zone_realloc((uint64_t)zone, (uint64_t)ptr, size, (v3 >> 2));
}

void malloc_zone_free(malloc_zone_t *zone, void *ptr)
{
  if (malloc_tracing_enabled) {
    kdebug_trace();
  }
  if (malloc_logger) {
    malloc_logger(12, zone, ptr, 0, 0, 0);
  }
  if (malloc_simple_stack_logging) {
    malloc_report(805, (uint64_t)"malloc_zone_free (%p): ");
  }
  if (malloc_check_start) {
    internal_check();
  }
  ((void (*)(malloc_zone_t *, void *))zone->free)(zone, ptr);
}

malloc_zone_t *__cdecl malloc_zone_from_ptr(const void *ptr)
{
  if (!ptr) {
    return 0;
  }
  if (!malloc_num_zones) {
    return 0;
  }
  if (lite_zone && (*(uint64_t (**)(uint64_t, const void *))(lite_zone + 16))(lite_zone, ptr)) {
    return (malloc_zone_t *)default_zone;
  }
  LODWORD(v7) = 0;
  while (v7 < initial_num_zones)
  {
    uint64_t v8 = *((void *)malloc_zones + v7);
    if ((*(uint64_t (**)(uint64_t, const void *))(v8 + 16))(v8, ptr))
    {
      if (v7 || !has_default_zone0()) {
        return (malloc_zone_t *)v8;
      }
      else {
        return (malloc_zone_t *)default_zone;
      }
    }
    uint64_t v7 = (v7 + 1);
  }
  char v6 = (atomic_uint *)pFRZCounterLive;
  atomic_fetch_add((atomic_uint *volatile)pFRZCounterLive, 1u);
  unsigned int v5 = malloc_num_zones;
  for (unsigned int i = initial_num_zones; i < v5; ++i)
  {
    uint64_t v9 = *((void *)malloc_zones + i);
    if ((*(uint64_t (**)(uint64_t, const void *))(v9 + 16))(v9, ptr)) {
      goto LABEL_21;
    }
  }
  uint64_t v9 = 0;
LABEL_21:
  atomic_fetch_add(v6, 0xFFFFFFFF);
  return (malloc_zone_t *)v9;
}

uint64_t _malloc_zone_memalign(uint64_t a1, unint64_t a2, unint64_t a3, unsigned int a4, uint64_t a5)
{
  char v9 = 0;
  if (!*(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904))
  {
    *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = a5;
    char v9 = 1;
  }
  if (malloc_tracing_enabled) {
    kdebug_trace();
  }
  uint64_t v8 = 0;
  int v7 = 12;
  if (*(_DWORD *)(a1 + 104) >= 5u)
  {
    if (malloc_check_start) {
      internal_check();
    }
    if (a3 <= malloc_absolute_max_size)
    {
      if (a2 < 8 || (a2 & (a2 - 1)) != 0)
      {
        int v7 = 22;
      }
      else if ((a4 & 2) != 0 && (a3 & (a2 - 1)) != 0)
      {
        int v7 = 22;
      }
      else
      {
        uint64_t v6 = 0;
        if (*(void *)(a1 + 112)) {
          uint64_t v6 = *(void *)(a1 + 112);
        }
        if (v6)
        {
          uint64_t v8 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(a1 + 112))(a1, a2, a3);
          if (malloc_logger) {
            malloc_logger(10, a1, a3, 0, v8, 0);
          }
          if (malloc_simple_stack_logging) {
            malloc_report(805, (uint64_t)"memalign (%p/%llu,%llu): ");
          }
          if (malloc_tracing_enabled) {
            kdebug_trace();
          }
        }
      }
    }
  }
  if (v9) {
    *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = 0;
  }
  if (!v8 && (a4 & 1) != 0) {
    malloc_set_errno_fast(a4, v7);
  }
  return v8;
}

void *__cdecl malloc_zone_memalign(malloc_zone_t *zone, size_t alignment, size_t size)
{
  return (void *)_malloc_zone_memalign((uint64_t)zone, alignment, size, 0, (v3 >> 2));
}

uint64_t malloc_zone_claimed_address(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (malloc_check_start) {
      internal_check();
    }
    if (*(_DWORD *)(a1 + 104) < 0xAu) {
      return 1;
    }
    uint64_t v3 = 0;
    if (*(void *)(a1 + 136)) {
      uint64_t v3 = *(void *)(a1 + 136);
    }
    if (v3) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 136))(a1, a2);
    }
    else {
      return 1;
    }
  }
  else
  {
    return 0;
  }
}

const char *get_wrapper_zone_label(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 104) < 0xEu)
  {
    __break(1u);
    JUMPOUT(0x847F0);
  }
  uint64_t v2 = 0;
  if (*(void *)(a1 + 96)) {
    uint64_t v2 = *(void *)(a1 + 96);
  }
  if (*(_DWORD *)(v2 + 128) == 2) {
    return "PGM";
  }
  else {
    return "Sanitizer";
  }
}

const char *__cdecl malloc_get_zone_name(malloc_zone_t *zone)
{
  return zone->zone_name;
}

void find_zone_and_free(void *a1, char a2)
{
  unint64_t ptr = a1;
  char v6 = a2 & 1;
  mach_vm_address_t zone = 0;
  uint64_t v4 = 0;
  if (a1)
  {
    BOOL v17 = ptr;
    unsigned int v16 = &v4;
    char v15 = v6 & 1;
    if (malloc_num_zones)
    {
      if (lite_zone
        && (uint64_t v14 = lite_zone,
            uint64_t v13 = 0,
            (uint64_t v13 = (*(uint64_t (**)(uint64_t, void *))(lite_zone + 16))(lite_zone, v17)) != 0))
      {
        if (v16) {
          *unsigned int v16 = v13;
        }
        uint64_t v18 = (malloc_zone_t *)default_zone;
      }
      else
      {
        uint64_t v12 = 0;
        *(_DWORD *)&v11[8] = 0;
        *(void *)unint64_t v11 = (v15 & 1) != 0;
        while (*(_DWORD *)v11 < initial_num_zones)
        {
          uint64_t v12 = *((void *)malloc_zones + *(unsigned int *)v11);
          *(void *)&v11[4] = (*(uint64_t (**)(uint64_t, void *))(v12 + 16))(v12, v17);
          if (*(void *)&v11[4])
          {
            if (v16) {
              *unsigned int v16 = *(void *)&v11[4];
            }
            if (*(_DWORD *)v11 || !has_default_zone0()) {
              uint64_t v18 = (malloc_zone_t *)v12;
            }
            else {
              uint64_t v18 = (malloc_zone_t *)default_zone;
            }
            goto LABEL_29;
          }
          *(void *)unint64_t v11 = (*(_DWORD *)v11 + 1);
        }
        uint64_t v10 = (atomic_uint *)pFRZCounterLive;
        uint64_t v19 = pFRZCounterLive;
        int v28 = 1;
        char v27 = pFRZCounterLive;
        int v26 = 1;
        unsigned int add = atomic_fetch_add((atomic_uint *volatile)pFRZCounterLive, 1u);
        unsigned int v9 = malloc_num_zones;
        for (unsigned int i = initial_num_zones; i < v9; ++i)
        {
          uint64_t v12 = *((void *)malloc_zones + i);
          *(void *)&v11[4] = (*(uint64_t (**)(uint64_t, void *))(v12 + 16))(v12, v17);
          if (*(void *)&v11[4]) {
            goto LABEL_26;
          }
        }
        uint64_t v12 = 0;
        *(void *)&v11[4] = 0;
LABEL_26:
        if (v16) {
          *unsigned int v16 = *(void *)&v11[4];
        }
        uint64_t v20 = v10;
        int v24 = -1;
        unint64_t v23 = v10;
        int v22 = -1;
        unsigned int v21 = atomic_fetch_add(v10, 0xFFFFFFFF);
        uint64_t v18 = (malloc_zone_t *)v12;
      }
    }
    else
    {
      if (v16) {
        *unsigned int v16 = 0;
      }
      uint64_t v18 = 0;
    }
LABEL_29:
    mach_vm_address_t zone = v18;
    if (v18)
    {
      if (zone->version < 6) {
        goto LABEL_38;
      }
      free_definite_mach_vm_size_t size = 0;
      if (zone->free_definite_size) {
        free_definite_mach_vm_size_t size = zone->free_definite_size;
      }
      if (free_definite_size) {
        malloc_zone_free_definite_size((uint64_t)zone, (uint64_t)ptr, v4);
      }
      else {
LABEL_38:
      }
        malloc_zone_free(zone, ptr);
    }
    else
    {
      __int16 v3 = 144;
      if ((malloc_debug_flags & 0x140) != 0) {
        __int16 v3 = 80;
      }
      malloc_report(v3, (uint64_t)"*** error for object %p: pointer being freed was not allocated\n");
    }
  }
}

uint64_t malloc_zone_free_definite_size(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (malloc_tracing_enabled) {
    kdebug_trace();
  }
  if (malloc_logger) {
    malloc_logger(12, a1, a2, 0, 0, 0);
  }
  if (malloc_simple_stack_logging) {
    malloc_report(805, (uint64_t)"free (%p/%llu): ");
  }
  if (malloc_check_start) {
    internal_check();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 120))(a1, a2, a3);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)_malloc_zone_malloc(default_zone, __size, 1u);
}

void *__cdecl aligned_alloc(size_t __alignment, size_t __size)
{
  return (void *)_malloc_zone_memalign((uint64_t)default_zone, __alignment, __size, 3u, (v2 >> 2));
}

void *__cdecl calloc(size_t __count, size_t __size)
{
  return (void *)_malloc_zone_calloc(default_zone, __count, __size, 1u);
}

void _free(void *a1)
{
  if (a1)
  {
    uint64_t v3 = *(void *)malloc_zones;
    BOOL v2 = 1;
    if ((malloc_slowpath & 1) == 0)
    {
      BOOL v2 = 1;
      if (!malloc_logger) {
        BOOL v2 = *(_DWORD *)(v3 + 104) < 0xDu;
      }
    }
    if (v2) {
      goto LABEL_10;
    }
    uint64_t v1 = 0;
    if (*(void *)(v3 + 144)) {
      uint64_t v1 = *(void *)(v3 + 144);
    }
    if (!v1) {
LABEL_10:
    }
      find_zone_and_free(a1, 0);
    else {
      (*(void (**)(uint64_t, void *))(v3 + 144))(v3, a1);
    }
  }
}

void free(void *a1)
{
}

void *__cdecl realloc(void *__ptr, size_t __size)
{
  return _realloc(__ptr, __size);
}

void *__cdecl reallocf(void *__ptr, size_t __size)
{
  uint64_t v4 = j__realloc(__ptr, __size);
  if (!v4 && __ptr && __size)
  {
    int v3 = *__error();
    j__free(__ptr);
    *__error() = v3;
  }
  return v4;
}

void *__cdecl valloc(size_t a1)
{
  return (void *)_malloc_zone_valloc((uint64_t)default_zone, a1, 1u);
}

void vfree(void *a1)
{
}

size_t malloc_size(const void *ptr)
{
  int v3 = ptr;
  size_t v2 = 0;
  if (!ptr) {
    return v2;
  }
  uint64_t v14 = v3;
  uint64_t v13 = &v2;
  char v12 = 0;
  if (malloc_num_zones)
  {
    if (lite_zone
      && (uint64_t v11 = lite_zone,
          uint64_t v10 = 0,
          (uint64_t v10 = (*(uint64_t (**)(uint64_t, const void *))(lite_zone + 16))(lite_zone, v14)) != 0))
    {
      if (v13) {
        *uint64_t v13 = v10;
      }
      char v15 = default_zone;
    }
    else
    {
      unsigned int v9 = 0;
      *(_DWORD *)&v8[8] = 0;
      *(void *)uint64_t v8 = (v12 & 1) != 0;
      while (*(_DWORD *)v8 < initial_num_zones)
      {
        unsigned int v9 = (uint64_t (**)(void, void))*((void *)malloc_zones + *(unsigned int *)v8);
        *(void *)&v8[4] = ((uint64_t (**)(void, const void *))v9)[2](v9, v14);
        if (*(void *)&v8[4])
        {
          if (v13) {
            *uint64_t v13 = *(void *)&v8[4];
          }
          if (*(_DWORD *)v8 || !has_default_zone0()) {
            char v15 = v9;
          }
          else {
            char v15 = default_zone;
          }
          return v2;
        }
        *(void *)uint64_t v8 = (*(_DWORD *)v8 + 1);
      }
      int v7 = (atomic_uint *)pFRZCounterLive;
      unsigned int v16 = pFRZCounterLive;
      int v25 = 1;
      int v24 = pFRZCounterLive;
      int v23 = 1;
      unsigned int add = atomic_fetch_add((atomic_uint *volatile)pFRZCounterLive, 1u);
      unsigned int v6 = malloc_num_zones;
      for (unsigned int i = initial_num_zones; i < v6; ++i)
      {
        unsigned int v9 = (uint64_t (**)(void, void))*((void *)malloc_zones + i);
        *(void *)&v8[4] = ((uint64_t (**)(void, const void *))v9)[2](v9, v14);
        if (*(void *)&v8[4]) {
          goto LABEL_27;
        }
      }
      unsigned int v9 = 0;
      *(void *)&v8[4] = 0;
LABEL_27:
      if (v13) {
        *uint64_t v13 = *(void *)&v8[4];
      }
      BOOL v17 = v7;
      int v21 = -1;
      uint64_t v20 = v7;
      int v19 = -1;
      unsigned int v18 = atomic_fetch_add(v7, 0xFFFFFFFF);
      char v15 = v9;
    }
  }
  else
  {
    if (v13) {
      *uint64_t v13 = 0;
    }
    char v15 = 0;
  }
  return v2;
}

size_t malloc_good_size(size_t size)
{
  uint64_t v2 = 0;
  if (*((void *)default_zone + 12)) {
    uint64_t v2 = *((void *)default_zone + 12);
  }
  return (*(uint64_t (**)(void *, size_t))(v2 + 8))(default_zone, size);
}

uint64_t _posix_memalign(uint64_t *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = _malloc_zone_memalign((uint64_t)default_zone, a2, a3, 0, (v3 >> 2));
  if (v5)
  {
    *a1 = v5;
    return 0;
  }
  else if (a2 < 8 || (a2 & (a2 - 1)) != 0)
  {
    return 22;
  }
  else
  {
    return 12;
  }
}

int posix_memalign(void **__memptr, size_t __alignment, size_t __size)
{
  return _posix_memalign((uint64_t *)__memptr, __alignment, __size);
}

uint64_t malloc_claimed_address(uint64_t a1)
{
  if (malloc_num_zones)
  {
    if (lite_zone && malloc_zone_claimed_address(lite_zone, a1))
    {
      return 1;
    }
    else
    {
      for (unsigned int i = 0; i < initial_num_zones; ++i)
      {
        if (malloc_zone_claimed_address(*((void *)malloc_zones + i), a1)) {
          return 1;
        }
      }
      uint64_t v5 = (atomic_uint *)pFRZCounterLive;
      atomic_fetch_add((atomic_uint *volatile)pFRZCounterLive, 1u);
      unsigned int v4 = malloc_num_zones;
      unsigned int v3 = 0;
      for (unsigned int j = initial_num_zones; j < v4; ++j)
      {
        if (malloc_zone_claimed_address(*((void *)malloc_zones + j), a1))
        {
          unsigned int v3 = 1;
          break;
        }
      }
      atomic_fetch_add(v5, 0xFFFFFFFF);
      return v3;
    }
  }
  else
  {
    return 0;
  }
}

void *reallocarray_DARWIN_EXTSN(void *a1, unint64_t a2, unint64_t a3)
{
  if (is_mul_ok(a2, a3)) {
    return j__realloc(a1, a2 * a3);
  }
  malloc_set_errno_fast(1, 12);
  return 0;
}

void *reallocarrayf_DARWIN_EXTSN(void *a1, unint64_t a2, unint64_t a3)
{
  if (is_mul_ok(a2, a3)) {
    return reallocf(a1, a2 * a3);
  }
  malloc_set_errno_fast(1, 12);
  return 0;
}

void *_malloc_zone_malloc_with_options_np_outlined(malloc_zone_t *a1, size_t a2, size_t a3, uint64_t a4)
{
  mach_vm_address_t zone = a1;
  if (!a1 || a1 == (malloc_zone_t *)default_zone)
  {
    if (lite_zone) {
      uint64_t v6 = lite_zone;
    }
    else {
      uint64_t v6 = *(void *)malloc_zones;
    }
    mach_vm_address_t zone = (malloc_zone_t *)v6;
  }
  char v9 = 0;
  if (!*(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904))
  {
    *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = (v7 >> 2);
    char v9 = 1;
  }
  if ((malloc_interposition_compat & 1) != 0 || zone->version < 0xF) {
    goto LABEL_14;
  }
  reserved2 = 0;
  if (zone[1].reserved2) {
    reserved2 = zone[1].reserved2;
  }
  if (reserved2)
  {
    if (malloc_tracing_enabled) {
      kdebug_trace();
    }
    uint64_t v10 = (void *)((uint64_t (*)(malloc_zone_t *, size_t, size_t, uint64_t))zone[1].reserved2)(zone, a2, a3, a4);
    if (malloc_logger)
    {
      unsigned int v8 = 10;
      if (a4) {
        unsigned int v8 = 74;
      }
      malloc_logger(v8, zone, a3, 0, v10, 0);
    }
    if (malloc_simple_stack_logging) {
      malloc_report(805, (uint64_t)"malloc_with_options (%p/%llu,%llu): ");
    }
    if (malloc_tracing_enabled) {
      kdebug_trace();
    }
  }
  else
  {
LABEL_14:
    if (a2)
    {
      uint64_t v10 = j__malloc_zone_memalign(zone, a2, a3);
      if (v10 && (a4 & 1) != 0) {
        _platform_memset();
      }
    }
    else if (a4)
    {
      uint64_t v10 = j__malloc_zone_calloc(zone, 1uLL, a3);
    }
    else
    {
      uint64_t v10 = j__malloc_zone_malloc(zone, a3);
    }
  }
  if (v9) {
    *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 904) = 0;
  }
  return v10;
}

void *malloc_zone_malloc_with_options_np(malloc_zone_t *a1, size_t a2, size_t a3, uint64_t a4)
{
  uint64_t v10 = a1;
  BOOL v9 = 0;
  if (a2)
  {
    BOOL v7 = 1;
    if (((a2 - 1) & a2) == 0) {
      BOOL v7 = (a3 & (a2 - 1)) != 0;
    }
    BOOL v9 = v7;
  }
  if (v9) {
    return 0;
  }
  char v6 = 1;
  if (!malloc_logger) {
    char v6 = malloc_slowpath;
  }
  if (v6) {
    return _malloc_zone_malloc_with_options_np_outlined(v10, a2, a3, a4);
  }
  if (!a1 || a1 == (malloc_zone_t *)default_zone) {
    uint64_t v10 = *(malloc_zone_t **)malloc_zones;
  }
  if (v10->version < 0x10) {
    return _malloc_zone_malloc_with_options_np_outlined(v10, a2, a3, a4);
  }
  free = 0;
  if (v10[1].free) {
    free = v10[1].free;
  }
  if (!free) {
    return _malloc_zone_malloc_with_options_np_outlined(v10, a2, a3, a4);
  }
  else {
    return (void *)((uint64_t (*)(malloc_zone_t *, size_t, size_t, uint64_t, void))v10[1].free)(v10, a2, a3, a4, (v8 >> 2));
  }
}

malloc_zone_t *malloc_default_purgeable_zone(void)
{
  if (malloc_default_purgeable_zone_pred != -1) {
    _os_once();
  }
  return (malloc_zone_t *)default_purgeable_zone;
}

void _malloc_create_purgeable_zone()
{
  if (initial_xzone_zone && (purgeable_zone_use_xzm & 1) != 0)
  {
    default_purgeable_mach_vm_address_t zone = (uint64_t)xzm_malloc_zone_create(malloc_debug_flags | 0x80u, initial_xzone_zone);
    malloc_zone_register((malloc_zone_t *)default_purgeable_zone);
    malloc_set_zone_name((malloc_zone_t *)default_purgeable_zone, "DefaultPurgeableMallocZone");
  }
  else
  {
    if (!initial_scalable_zone)
    {
      initial_scalable_mach_vm_address_t zone = create_scalable_zone(0, malloc_debug_flags);
      malloc_set_zone_name((malloc_zone_t *)initial_scalable_zone, "DefaultScalableMallocZone");
      malloc_zone_register((malloc_zone_t *)initial_scalable_zone);
    }
    default_purgeable_mach_vm_address_t zone = create_purgeable_zone(0, initial_scalable_zone, malloc_debug_flags);
    malloc_zone_register((malloc_zone_t *)default_purgeable_zone);
    malloc_set_zone_name((malloc_zone_t *)default_purgeable_zone, "DefaultPurgeableMallocZone");
  }
}

void malloc_make_purgeable(void *ptr)
{
  vm_address_t v3 = (vm_address_t)ptr;
  if (find_registered_purgeable_zone((uint64_t)ptr))
  {
    int state = 1;
    vm_purgable_control(mach_task_self_, v3, 0, &state);
  }
}

void *find_registered_purgeable_zone(uint64_t a1)
{
  uint64_t v3 = a1;
  if (!a1) {
    return 0;
  }
  vm_size_t v2 = 0;
  uint64_t v14 = v3;
  uint64_t v13 = &v2;
  char v12 = 0;
  if (malloc_num_zones)
  {
    if (lite_zone
      && (uint64_t v11 = lite_zone,
          uint64_t v10 = 0,
          (uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(lite_zone + 16))(lite_zone, v14)) != 0))
    {
      if (v13) {
        *uint64_t v13 = v10;
      }
      char v15 = default_zone;
    }
    else
    {
      BOOL v9 = 0;
      *(_DWORD *)&v8[8] = 0;
      *(void *)unint64_t v8 = (v12 & 1) != 0;
      while (*(_DWORD *)v8 < initial_num_zones)
      {
        BOOL v9 = (uint64_t (**)(void, void))*((void *)malloc_zones + *(unsigned int *)v8);
        *(void *)&v8[4] = v9[2](v9, v14);
        if (*(void *)&v8[4])
        {
          if (v13) {
            *uint64_t v13 = *(void *)&v8[4];
          }
          if (*(_DWORD *)v8 || !has_default_zone0()) {
            char v15 = v9;
          }
          else {
            char v15 = default_zone;
          }
          goto LABEL_30;
        }
        *(void *)unint64_t v8 = (*(_DWORD *)v8 + 1);
      }
      BOOL v7 = (atomic_uint *)pFRZCounterLive;
      unsigned int v16 = pFRZCounterLive;
      int v25 = 1;
      int v24 = pFRZCounterLive;
      int v23 = 1;
      unsigned int add = atomic_fetch_add((atomic_uint *volatile)pFRZCounterLive, 1u);
      unsigned int v6 = malloc_num_zones;
      for (unsigned int i = initial_num_zones; i < v6; ++i)
      {
        BOOL v9 = (uint64_t (**)(void, void))*((void *)malloc_zones + i);
        *(void *)&v8[4] = v9[2](v9, v14);
        if (*(void *)&v8[4]) {
          goto LABEL_27;
        }
      }
      BOOL v9 = 0;
      *(void *)&v8[4] = 0;
LABEL_27:
      if (v13) {
        *uint64_t v13 = *(void *)&v8[4];
      }
      BOOL v17 = v7;
      int v21 = -1;
      uint64_t v20 = v7;
      int v19 = -1;
      unsigned int v18 = atomic_fetch_add(v7, 0xFFFFFFFF);
      char v15 = v9;
    }
  }
  else
  {
    if (v13) {
      *uint64_t v13 = 0;
    }
    char v15 = 0;
  }
LABEL_30:
  if (!v15) {
    return 0;
  }
  if (v2 < vm_page_size || v2 % vm_page_size) {
    return 0;
  }
  return v15;
}

int malloc_make_nonpurgeable(void *ptr)
{
  vm_address_t address = (vm_address_t)ptr;
  if (!find_registered_purgeable_zone((uint64_t)ptr)) {
    return 0;
  }
  int state = 0;
  vm_purgable_control(mach_task_self_, address, 0, &state);
  if (state == 2) {
    return 14;
  }
  else {
    return 0;
  }
}

uint64_t malloc_memory_event_handler(uint64_t result)
{
  uint64_t v1 = result;
  if ((result & 0xF0000000) != 0 && (result & 0xFFFFFFF) == 0) {
    unint64_t result = malloc_register_stack_logger();
  }
  if (off_C4240) {
    return off_C4240(v1);
  }
  return result;
}

uint64_t malloc_register_stack_logger()
{
  return _malloc_register_stack_logger(0) & 1;
}

size_t malloc_zone_pressure_relief(malloc_zone_t *zone, size_t goal)
{
  if (zone)
  {
    if (zone->version >= 8)
    {
      pressure_relief = 0;
      if (zone->pressure_relief) {
        pressure_relief = zone->pressure_relief;
      }
      if (pressure_relief) {
        return ((uint64_t (*)(malloc_zone_t *, size_t))zone->pressure_relief)(zone, goal);
      }
      else {
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    unsigned int v9 = 0;
    size_t v8 = 0;
    os_unfair_lock_lock_with_options();
    while (v9 < malloc_num_zones)
    {
      uint64_t v2 = v9++;
      uint64_t v11 = *((void *)malloc_zones + v2);
      if (*(_DWORD *)(v11 + 104) >= 8u)
      {
        uint64_t v7 = 0;
        if (*(void *)(v11 + 128)) {
          uint64_t v7 = *(void *)(v11 + 128);
        }
        if (v7)
        {
          if (goal)
          {
            if (goal <= v8) {
              break;
            }
            v8 += (*(uint64_t (**)(uint64_t, size_t))(v11 + 128))(v11, goal - v8);
          }
          else
          {
            v8 += (*(uint64_t (**)(uint64_t, void))(v11 + 128))(v11, 0);
          }
        }
      }
    }
    int v3 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    int v4 = v3;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)&_malloc_lock, (unsigned int *)&v4, 0, memory_order_release, memory_order_relaxed);
    if (v4 != v3) {
      os_unfair_lock_unlock((os_unfair_lock_t)&_malloc_lock);
    }
    return v8;
  }
}

unsigned int malloc_zone_batch_malloc(malloc_zone_t *zone, size_t size, void **results, unsigned int num_requested)
{
  batch_malloc = 0;
  if (zone->batch_malloc) {
    batch_malloc = zone->batch_malloc;
  }
  if (!batch_malloc) {
    return 0;
  }
  if (malloc_check_start) {
    internal_check();
  }
  unsigned int v7 = ((uint64_t (*)(malloc_zone_t *, size_t, void **, void))zone->batch_malloc)(zone, size, results, num_requested);
  if (malloc_logger)
  {
    for (unsigned int i = 0; i < v7; ++i)
      malloc_logger(10, zone, size, 0, results[i], 0);
  }
  return v7;
}

void malloc_zone_batch_free(malloc_zone_t *zone, void **to_be_freed, unsigned int num)
{
  if (malloc_check_start) {
    internal_check();
  }
  if (malloc_logger)
  {
    for (unsigned int i = 0; i < num; ++i)
      malloc_logger(12, zone, to_be_freed[i], 0, 0, 0);
  }
  batch_free = 0;
  if (zone->batch_free) {
    batch_free = zone->batch_free;
  }
  if (batch_free)
  {
    ((void (*)(malloc_zone_t *, void **, void))zone->batch_free)(zone, to_be_freed, num);
  }
  else
  {
    free = 0;
    if (zone->free) {
      free = zone->free;
    }
    while (num--)
    {
      int v4 = to_be_freed++;
      ((void (*)(malloc_zone_t *, void *))free)(zone, *v4);
    }
  }
}

uint64_t malloc_sanitizer_is_enabled()
{
  return malloc_sanitizer_enabled & 1;
}

uint64_t malloc_sanitizer_get_functions()
{
  return sanitizer;
}

uint64_t malloc_sanitizer_set_functions(uint64_t result)
{
  sanitizer = result;
  return result;
}

uint64_t malloc_get_all_zones(int a1, uint64_t a2, uint64_t **a3, unsigned int *a4)
{
  int v15 = a1;
  uint64_t v14 = (uint64_t (*)(int, uint64_t, uint64_t, uint64_t **))a2;
  uint64_t v13 = (uint64_t **)a3;
  char v12 = a4;
  uint64_t v11 = &malloc_zones;
  uint64_t v10 = &malloc_num_zones;
  unsigned int v9 = 0;
  uint64_t v8 = 0;
  unsigned int v7 = 0;
  unsigned int v6 = 0;
  uint64_t v5 = 0;
  uint64_t v14 = (uint64_t (*)(int, uint64_t, uint64_t, uint64_t **))reader_or_in_memory_fallback_6(a2, a1);
  unsigned int v9 = v14(v15, (uint64_t)v11, 8, &v7);
  if (v9)
  {
    malloc_report(3, (uint64_t)"*** malloc_get_all_zones: error reading zones_address at %p\n");
    return v9;
  }
  else
  {
    uint64_t v8 = *v7;
    unsigned int v9 = v14(v15, (uint64_t)v10, 4, (uint64_t **)&v5);
    if (v9)
    {
      malloc_report(3, (uint64_t)"*** malloc_get_all_zones: error reading num_zones at %p\n");
      return v9;
    }
    else
    {
      unsigned int v6 = *v5;
      *char v12 = v6;
      unsigned int v9 = v14(v15, v8, 8 * v6, v13);
      if (v9)
      {
        malloc_report(3, (uint64_t)"*** malloc_get_all_zones: error reading zones at %p\n");
        return v9;
      }
      else
      {
        return 0;
      }
    }
  }
}

uint64_t (*reader_or_in_memory_fallback_6(uint64_t a1, int a2))(int a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a1) {
    return (uint64_t (*)(int, uint64_t, uint64_t, void *))a1;
  }
  BOOL v3 = 1;
  if (a2) {
    BOOL v3 = mach_task_is_self() != 0;
  }
  if (!v3)
  {
    __break(1u);
    JUMPOUT(0x87878);
  }
  return _malloc_default_reader_6;
}

void malloc_zone_print_ptr_info(void *ptr)
{
  if (ptr)
  {
    uint64_t v1 = malloc_zone_from_ptr(ptr);
    if (v1) {
      printf("ptr %p in registered zone %p\n", ptr, v1);
    }
    else {
      printf("ptr %p not in heap\n", ptr);
    }
  }
}

BOOLean_t malloc_zone_check(malloc_zone_t *zone)
{
  BOOLean_t v6 = 1;
  if (zone)
  {
    introspect = 0;
    if (zone->introspect) {
      introspect = zone->introspect;
    }
    return ((uint64_t (*)(malloc_zone_t *))introspect->check)(zone);
  }
  else
  {
    unsigned int v5 = 0;
    while (v5 < malloc_num_zones)
    {
      uint64_t v1 = v5++;
      uint64_t v7 = *((void *)malloc_zones + v1);
      uint64_t v4 = 0;
      if (*(void *)(v7 + 96)) {
        uint64_t v4 = *(void *)(v7 + 96);
      }
      if (!(*(unsigned int (**)(uint64_t))(v4 + 16))(v7)) {
        BOOLean_t v6 = 0;
      }
    }
  }
  return v6;
}

void malloc_zone_print(malloc_zone_t *zone, BOOLean_t verbose)
{
  if (zone)
  {
    introspect = 0;
    if (zone->introspect) {
      introspect = zone->introspect;
    }
    ((void (*)(malloc_zone_t *, void))introspect->print)(zone, verbose);
  }
  else
  {
    unsigned int v5 = 0;
    while (v5 < malloc_num_zones)
    {
      uint64_t v2 = v5++;
      uint64_t v7 = *((void *)malloc_zones + v2);
      uint64_t v4 = 0;
      if (*(void *)(v7 + 96)) {
        uint64_t v4 = *(void *)(v7 + 96);
      }
      (*(void (**)(uint64_t, void))(v4 + 24))(v7, verbose);
    }
  }
}

void malloc_zone_statistics(malloc_zone_t *zone, malloc_statistics_t *stats)
{
  unsigned int v9 = zone;
  uint64_t v8 = stats;
  if (zone)
  {
    introspect = 0;
    if (v9->introspect) {
      introspect = v9->introspect;
    }
    ((void (*)(malloc_zone_t *, malloc_statistics_t *))introspect->statistics)(v9, v8);
  }
  else
  {
    _platform_memset();
    unsigned int v7 = 0;
    while (v7 < malloc_num_zones)
    {
      uint64_t v2 = v7++;
      unsigned int v9 = (malloc_zone_t *)*((void *)malloc_zones + v2);
      long long v5 = 0u;
      long long v6 = 0u;
      uint64_t v4 = 0;
      if (v9->introspect) {
        uint64_t v4 = v9->introspect;
      }
      ((void (*)(malloc_zone_t *, long long *))v4->statistics)(v9, &v5);
      v8->blocks_in_use += v5;
      v8->size_in_use += *((void *)&v5 + 1);
      v8->max_size_in_use += v6;
      v8->size_allocated += *((void *)&v6 + 1);
    }
  }
}

void malloc_zone_log(malloc_zone_t *zone, void *address)
{
  if (zone)
  {
    introspect = 0;
    if (zone->introspect) {
      introspect = zone->introspect;
    }
    ((void (*)(malloc_zone_t *, void *))introspect->log)(zone, address);
  }
  else
  {
    unsigned int v5 = 0;
    while (v5 < malloc_num_zones)
    {
      uint64_t v2 = v5++;
      uint64_t v7 = *((void *)malloc_zones + v2);
      uint64_t v4 = 0;
      if (*(void *)(v7 + 96)) {
        uint64_t v4 = *(void *)(v7 + 96);
      }
      (*(void (**)(uint64_t, void *))(v4 + 32))(v7, address);
    }
  }
}

void mag_set_thread_index(int a1)
{
  _os_cpu_number_override = a1;
  nano_common_cpu_number_override_set();
}

void (*malloc_error())()
{
  return DefaultMallocError;
}

void DefaultMallocError()
{
  if (_simple_salloc())
  {
    _simple_sprintf();
    _simple_string();
    malloc_report(16, (uint64_t)"%s\n");
    qword_C0118 = _simple_string();
  }
  else
  {
    malloc_report(16, (uint64_t)"*** error %d\n");
    qword_C0118 = (uint64_t)"*** DefaultMallocError called";
  }
  abort();
}

void _malloc_fork_prepare()
{
}

void _malloc_lock_all(void (*a1)(atomic_uint *))
{
  unsigned int v8 = 0;
  if (v1) {
    char v2 = 0;
  }
  else {
    char v2 = 1;
  }
  if ((v2 & 1) == 0
    || (int v3 = 0,
        atomic_compare_exchange_strong_explicit((atomic_uint *volatile)&_malloc_lock, (unsigned int *)&v3, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire), v3))
  {
    os_unfair_lock_lock_with_options();
  }
  uint64_t v4 = mfm_lock();
  while (v8 < malloc_num_zones)
  {
    uint64_t v5 = v8++;
    uint64_t v7 = *((void *)malloc_zones + v5);
    uint64_t v6 = 0;
    if (*(void *)(v7 + 96)) {
      uint64_t v6 = *(void *)(v7 + 96);
    }
    uint64_t v4 = (atomic_uint *)(*(uint64_t (**)(uint64_t))(v6 + 40))(v7);
  }
  if (initial_xzone_zone) {
    xzm_force_lock_global_state(initial_xzone_zone);
  }
  if (a1) {
    a1(v4);
  }
}

void _malloc_fork_parent()
{
}

void _malloc_unlock_all(void (*a1)(void))
{
  if (initial_xzone_zone) {
    xzm_force_unlock_global_state(initial_xzone_zone);
  }
  unsigned int v6 = 0;
  if (a1) {
    a1();
  }
  while (v6 < malloc_num_zones)
  {
    uint64_t v1 = v6++;
    uint64_t v5 = *((void *)malloc_zones + v1);
    uint64_t v4 = 0;
    if (*(void *)(v5 + 96)) {
      uint64_t v4 = *(void *)(v5 + 96);
    }
    (*(void (**)(uint64_t))(v4 + 48))(v5);
  }
  mfm_unlock();
  int v2 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  int v3 = v2;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)&_malloc_lock, (unsigned int *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != v2) {
    os_unfair_lock_unlock((os_unfair_lock_t)&_malloc_lock);
  }
}

void _malloc_fork_child()
{
  if ((_malloc_entropy_initialized & 1) != 0 && initial_nano_zone) {
    nanov2_forked_zone((void *)initial_nano_zone);
  }
  _malloc_reinit_lock_all((void (*)(void))qword_C4260);
}

void _malloc_reinit_lock_all(void (*a1)(void))
{
  if (initial_xzone_zone) {
    xzm_force_reinit_lock_global_state(initial_xzone_zone);
  }
  unsigned int v5 = 0;
  if (a1) {
    a1();
  }
  while (v5 < malloc_num_zones)
  {
    uint64_t v1 = v5++;
    uint64_t v4 = *((void *)malloc_zones + v1);
    if (*(_DWORD *)(v4 + 104) >= 9u)
    {
      uint64_t v2 = 0;
      if (*(void *)(v4 + 96)) {
        uint64_t v2 = *(void *)(v4 + 96);
      }
      (*(void (**)(uint64_t))(v2 + 104))(v4);
    }
    else
    {
      uint64_t v3 = 0;
      if (*(void *)(v4 + 96)) {
        uint64_t v3 = *(void *)(v4 + 96);
      }
      (*(void (**)(uint64_t))(v3 + 48))(v4);
    }
  }
  mfm_reinit_lock();
  _malloc_os_unfair_lock_t lock = 0;
}

mstats *mstats(mstats *__return_ptr retstr)
{
  memset(&v3, 0, sizeof(v3));
  memset(retstr, 0, sizeof(mstats));
  malloc_zone_statistics(0, &v3);
  retstr->bytes_total = v3.size_allocated;
  retstr->chunks_used = v3.blocks_in_use;
  retstr->bytes_used = v3.size_in_use;
  retstr->chunks_free = 0;
  retstr->bytes_free = retstr->bytes_total - retstr->bytes_used;
  return result;
}

BOOLean_t malloc_zone_enable_discharge_checking(malloc_zone_t *zone)
{
  if (zone->version < 7) {
    return 0;
  }
  introspect = 0;
  if (zone->introspect) {
    introspect = zone->introspect;
  }
  enable_discharge_checking = 0;
  if (introspect->enable_discharge_checking) {
    enable_discharge_checking = introspect->enable_discharge_checking;
  }
  if (!enable_discharge_checking) {
    return 0;
  }
  uint64_t v2 = 0;
  if (zone->introspect) {
    uint64_t v2 = zone->introspect;
  }
  return ((uint64_t (*)(malloc_zone_t *))v2->enable_discharge_checking)(zone);
}

void malloc_zone_disable_discharge_checking(malloc_zone_t *zone)
{
  if (zone->version >= 7)
  {
    introspect = 0;
    if (zone->introspect) {
      introspect = zone->introspect;
    }
    disable_discharge_checking = 0;
    if (introspect->disable_discharge_checking) {
      disable_discharge_checking = introspect->disable_discharge_checking;
    }
    if (disable_discharge_checking)
    {
      uint64_t v1 = 0;
      if (zone->introspect) {
        uint64_t v1 = zone->introspect;
      }
      ((void (*)(malloc_zone_t *))v1->disable_discharge_checking)(zone);
    }
  }
}

void malloc_zone_discharge(malloc_zone_t *zone, void *memory)
{
  unsigned int v6 = zone;
  if (!zone) {
    unsigned int v6 = malloc_zone_from_ptr(memory);
  }
  if (v6 && v6->version >= 7)
  {
    introspect = 0;
    if (v6->introspect) {
      introspect = v6->introspect;
    }
    discharge = 0;
    if (introspect->discharge) {
      discharge = introspect->discharge;
    }
    if (discharge)
    {
      uint64_t v2 = 0;
      if (v6->introspect) {
        uint64_t v2 = v6->introspect;
      }
      ((void (*)(malloc_zone_t *, void *))v2->discharge)(v6, memory);
    }
  }
}

void malloc_zone_enumerate_discharged_pointers(malloc_zone_t *zone, void *report_discharged)
{
  if (zone)
  {
    if (zone->version >= 7)
    {
      introspect = 0;
      if (zone->introspect) {
        introspect = zone->introspect;
      }
      enumerate_discharged_pointers = 0;
      if (introspect->enumerate_discharged_pointers) {
        enumerate_discharged_pointers = introspect->enumerate_discharged_pointers;
      }
      if (enumerate_discharged_pointers)
      {
        malloc_statistics_t v3 = 0;
        if (zone->introspect) {
          malloc_statistics_t v3 = zone->introspect;
        }
        ((void (*)(malloc_zone_t *, void *))v3->enumerate_discharged_pointers)(zone, report_discharged);
      }
    }
  }
  else
  {
    for (unsigned int i = 0; i < malloc_num_zones; ++i)
    {
      uint64_t v2 = i;
      uint64_t v11 = *((void *)malloc_zones + v2);
      if (*(_DWORD *)(v11 + 104) >= 7u)
      {
        uint64_t v8 = 0;
        if (*(void *)(v11 + 96)) {
          uint64_t v8 = *(void *)(v11 + 96);
        }
        uint64_t v7 = 0;
        if (*(void *)(v8 + 96)) {
          uint64_t v7 = *(void *)(v8 + 96);
        }
        if (v7)
        {
          uint64_t v6 = 0;
          if (*(void *)(v11 + 96)) {
            uint64_t v6 = *(void *)(v11 + 96);
          }
          (*(void (**)(uint64_t, void *))(v6 + 96))(v11, report_discharged);
        }
      }
    }
  }
}

void malloc_zero_on_free_disable()
{
  malloc_zero_policy = 1;
}

uint64_t malloc_variant_is_debug_4test()
{
  return 1;
}

void set_malloc_singlethreaded()
{
  if (!set_malloc_singlethreaded_warned) {
    set_malloc_singlethreaded_warned = 1;
  }
}

void malloc_singlethreaded()
{
  if (!malloc_singlethreaded_warned)
  {
    malloc_report(3, (uint64_t)"*** OBSOLETE: malloc_singlethreaded()\n");
    malloc_singlethreaded_warned = 1;
  }
}

uint64_t malloc_debug()
{
  return 0;
}

uint64_t malloc_get_thread_options()
{
  return *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 896);
}

uint64_t malloc_set_thread_options(uint64_t a1)
{
  uint64_t v2 = a1;
  if (a1) {
    LOBYTE(v2) = a1 & 0xF9 | 6;
  }
  uint64_t result = pgm_thread_set_disabled((v2 & 2) != 0);
  *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 896) = v2;
  return result;
}

uint64_t _malloc_register_stack_logger(char a1)
{
  if (malloc_sanitizer_enabled & 1) == 0 || (a1)
  {
    if (_register_msl_dylib_pred != -1) {
      _os_once();
    }
    if (off_C4240)
    {
      char v2 = 1;
    }
    else
    {
      malloc_report(4, (uint64_t)"failed to load MallocStackLogging.framework\n");
      char v2 = 0;
    }
  }
  else
  {
    char v2 = 0;
  }
  return v2 & 1;
}

uint64_t turn_on_stack_logging(unsigned int a1)
{
  if (off_C4278) {
    return off_C4278(a1);
  }
  else {
    return 0;
  }
}

uint64_t turn_off_stack_logging()
{
  uint64_t result = malloc_register_stack_logger();
  if (off_C4280) {
    return off_C4280(result);
  }
  return result;
}

uint64_t default_zone_size(uint64_t a1, uint64_t a2)
{
  if (lite_zone) {
    uint64_t v3 = lite_zone;
  }
  else {
    uint64_t v3 = *(void *)malloc_zones;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v3, a2);
}

uint64_t default_zone_malloc(uint64_t a1, uint64_t a2)
{
  if (lite_zone) {
    uint64_t v3 = lite_zone;
  }
  else {
    uint64_t v3 = *(void *)malloc_zones;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 24))(v3, a2);
}

uint64_t default_zone_calloc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (lite_zone) {
    uint64_t v4 = lite_zone;
  }
  else {
    uint64_t v4 = *(void *)malloc_zones;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v4, a2, a3);
}

uint64_t default_zone_valloc(uint64_t a1, uint64_t a2)
{
  if (lite_zone) {
    uint64_t v3 = lite_zone;
  }
  else {
    uint64_t v3 = *(void *)malloc_zones;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 40))(v3, a2);
}

uint64_t default_zone_free(uint64_t a1, uint64_t a2)
{
  if (lite_zone) {
    uint64_t v3 = lite_zone;
  }
  else {
    uint64_t v3 = *(void *)malloc_zones;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 48))(v3, a2);
}

uint64_t default_zone_realloc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (lite_zone) {
    uint64_t v4 = lite_zone;
  }
  else {
    uint64_t v4 = *(void *)malloc_zones;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 56))(v4, a2, a3);
}

uint64_t default_zone_destroy()
{
  if (lite_zone) {
    uint64_t v1 = lite_zone;
  }
  else {
    uint64_t v1 = *(void *)malloc_zones;
  }
  return (*(uint64_t (**)(uint64_t))(v1 + 64))(v1);
}

uint64_t default_zone_batch_malloc(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if (lite_zone) {
    uint64_t v5 = lite_zone;
  }
  else {
    uint64_t v5 = *(void *)malloc_zones;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v5 + 80))(v5, a2, a3, a4);
}

uint64_t default_zone_batch_free(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (lite_zone) {
    uint64_t v4 = lite_zone;
  }
  else {
    uint64_t v4 = *(void *)malloc_zones;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(v4 + 88))(v4, a2, a3);
}

uint64_t default_zone_memalign(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (lite_zone) {
    uint64_t v4 = lite_zone;
  }
  else {
    uint64_t v4 = *(void *)malloc_zones;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 112))(v4, a2, a3);
}

uint64_t default_zone_free_definite_size(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (lite_zone) {
    uint64_t v4 = lite_zone;
  }
  else {
    uint64_t v4 = *(void *)malloc_zones;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 120))(v4, a2, a3);
}

uint64_t default_zone_pressure_relief(uint64_t a1, uint64_t a2)
{
  if (lite_zone) {
    uint64_t v3 = lite_zone;
  }
  else {
    uint64_t v3 = *(void *)malloc_zones;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 128))(v3, a2);
}

uint64_t default_zone_malloc_claimed_address(uint64_t a1, uint64_t a2)
{
  if (lite_zone) {
    uint64_t v3 = lite_zone;
  }
  else {
    uint64_t v3 = *(void *)malloc_zones;
  }
  return malloc_zone_claimed_address(v3, a2);
}

uint64_t default_zone_ptr_in_use_enumerator(unsigned int a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (lite_zone) {
    uint64_t v8 = lite_zone;
  }
  else {
    uint64_t v8 = *(void *)malloc_zones;
  }
  uint64_t v7 = 0;
  if (*(void *)(v8 + 96)) {
    uint64_t v7 = *(uint64_t (***)(void, uint64_t, void, uint64_t, uint64_t, uint64_t))(v8 + 96);
  }
  return (*v7)(a1, a2, a3, v8, a5, a6);
}

uint64_t default_zone_good_size(uint64_t a1, uint64_t a2)
{
  if (lite_zone) {
    uint64_t v4 = lite_zone;
  }
  else {
    uint64_t v4 = *(void *)malloc_zones;
  }
  uint64_t v3 = 0;
  if (*(void *)(v4 + 96)) {
    uint64_t v3 = *(void *)(v4 + 96);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v4, a2);
}

uint64_t default_zone_check()
{
  if (lite_zone) {
    uint64_t v2 = lite_zone;
  }
  else {
    uint64_t v2 = *(void *)malloc_zones;
  }
  uint64_t v1 = 0;
  if (*(void *)(v2 + 96)) {
    uint64_t v1 = *(void *)(v2 + 96);
  }
  return (*(uint64_t (**)(uint64_t))(v1 + 16))(v2);
}

uint64_t default_zone_print(uint64_t a1, unsigned int a2)
{
  if (lite_zone) {
    uint64_t v4 = lite_zone;
  }
  else {
    uint64_t v4 = *(void *)malloc_zones;
  }
  uint64_t v3 = 0;
  if (*(void *)(v4 + 96)) {
    uint64_t v3 = *(void *)(v4 + 96);
  }
  return (*(uint64_t (**)(uint64_t, void))(v3 + 24))(v4, a2);
}

uint64_t default_zone_log(uint64_t a1, uint64_t a2)
{
  if (lite_zone) {
    uint64_t v4 = lite_zone;
  }
  else {
    uint64_t v4 = *(void *)malloc_zones;
  }
  uint64_t v3 = 0;
  if (*(void *)(v4 + 96)) {
    uint64_t v3 = *(void *)(v4 + 96);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 32))(v4, a2);
}

uint64_t default_zone_force_lock()
{
  if (lite_zone) {
    uint64_t v2 = lite_zone;
  }
  else {
    uint64_t v2 = *(void *)malloc_zones;
  }
  uint64_t v1 = 0;
  if (*(void *)(v2 + 96)) {
    uint64_t v1 = *(void *)(v2 + 96);
  }
  return (*(uint64_t (**)(uint64_t))(v1 + 40))(v2);
}

uint64_t default_zone_force_unlock()
{
  if (lite_zone) {
    uint64_t v2 = lite_zone;
  }
  else {
    uint64_t v2 = *(void *)malloc_zones;
  }
  uint64_t v1 = 0;
  if (*(void *)(v2 + 96)) {
    uint64_t v1 = *(void *)(v2 + 96);
  }
  return (*(uint64_t (**)(uint64_t))(v1 + 48))(v2);
}

uint64_t default_zone_statistics(uint64_t a1, uint64_t a2)
{
  if (lite_zone) {
    uint64_t v4 = lite_zone;
  }
  else {
    uint64_t v4 = *(void *)malloc_zones;
  }
  uint64_t v3 = 0;
  if (*(void *)(v4 + 96)) {
    uint64_t v3 = *(void *)(v4 + 96);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 56))(v4, a2);
}

uint64_t default_zone_locked()
{
  if (lite_zone) {
    uint64_t v2 = lite_zone;
  }
  else {
    uint64_t v2 = *(void *)malloc_zones;
  }
  uint64_t v1 = 0;
  if (*(void *)(v2 + 96)) {
    uint64_t v1 = *(void *)(v2 + 96);
  }
  return (*(uint64_t (**)(uint64_t))(v1 + 64))(v2);
}

uint64_t default_zone_reinit_lock()
{
  if (lite_zone) {
    uint64_t v2 = lite_zone;
  }
  else {
    uint64_t v2 = *(void *)malloc_zones;
  }
  uint64_t v1 = 0;
  if (*(void *)(v2 + 96)) {
    uint64_t v1 = *(void *)(v2 + 96);
  }
  return (*(uint64_t (**)(uint64_t))(v1 + 104))(v2);
}

void set_flags_from_environment()
{
  uint64_t v33 = 0;
  uint64_t v32 = 0;
  uint64_t v32 = *_NSGetEnviron();
  BOOL v30 = 0;
  malloc_debug_flags = 256;
  for (unsigned int i = v32; ; ++i)
  {
    BOOL v30 = *i;
    if (!v30) {
      break;
    }
    if (!_platform_strncmp() || !_platform_strncmp())
    {
      if (issetugid()) {
        return;
      }
      break;
    }
  }
  char v29 = dyld_process_is_restricted() & 1;
  malloc_print_configure();
  if (v30)
  {
    if (getenv("MallocGuardEdges"))
    {
      if (_platform_strcmp())
      {
        malloc_debug_flags |= 3u;
        malloc_debug_flags &= ~4u;
        malloc_report(5, (uint64_t)"adding guard pages for large allocator blocks\n");
        if (getenv("MallocDoNotProtectPrelude"))
        {
          malloc_debug_flags |= 8u;
          malloc_report(5, (uint64_t)"... but not protecting prelude guard page\n");
        }
        if (getenv("MallocDoNotProtectPostlude"))
        {
          malloc_debug_flags |= 0x10u;
          malloc_report(5, (uint64_t)"... but not protecting postlude guard page\n");
        }
      }
      else
      {
        malloc_debug_flags |= 7u;
        malloc_debug_flags &= 0xFFFFFFE7;
        malloc_report(5, (uint64_t)"adding guard pages to all regions\n");
      }
    }
    if (getenv("MallocScribble"))
    {
      malloc_debug_flags |= 0x20u;
      malloc_report(5, (uint64_t)"enabling scribbling to detect mods to free blocks\n");
    }
    if (getenv("MallocErrorAbort"))
    {
      malloc_debug_flags |= 0x40u;
      malloc_report(5, (uint64_t)"enabling abort() on bad malloc or free\n");
    }
    if (getenv("MallocTracing")) {
      malloc_tracing_enabled = 1;
    }
    if (getenv("MallocSimpleStackLogging")) {
      malloc_simple_stack_logging = 1;
    }
    if (getenv("MallocReportConfig")) {
      malloc_report_config = 1;
    }
    uint64_t v33 = getenv("MallocCheckHeapStart");
    if (v33)
    {
      malloc_check_start = strtoul(v33, 0, 0);
      if (!malloc_check_start) {
        malloc_check_start = 1;
      }
      if (malloc_check_start == -1) {
        malloc_check_start = 1;
      }
      uint64_t v33 = getenv("MallocCheckHeapEach");
      if (v33)
      {
        malloc_check_each = strtoul(v33, 0, 0);
        if (!malloc_check_each) {
          malloc_check_each = 1;
        }
        if (malloc_check_each == -1) {
          malloc_check_each = 1;
        }
      }
      malloc_report(5, (uint64_t)"checks heap after operation #%d and each %d operations\n");
      uint64_t v33 = getenv("MallocCheckHeapAbort");
      if (v33) {
        malloc_check_abort = strtol(v33, 0, 0);
      }
      if (malloc_check_abort)
      {
        malloc_report(5, (uint64_t)"will abort on heap corruption\n");
      }
      else
      {
        uint64_t v33 = getenv("MallocCheckHeapSleep");
        if (v33) {
          malloc_check_sleep = strtol(v33, 0, 0);
        }
        if (malloc_check_sleep <= 0)
        {
          if (malloc_check_sleep >= 0) {
            malloc_report(5, (uint64_t)"no sleep on heap corruption\n");
          }
          else {
            malloc_report(5, (uint64_t)"will sleep once for %d seconds on heap corruption\n");
          }
        }
        else
        {
          malloc_report(5, (uint64_t)"will sleep for %d seconds on heap corruption\n");
        }
      }
    }
    uint64_t v33 = getenv("MallocMaxMagazines");
    if (!v33) {
      uint64_t v33 = getenv("_MallocMaxMagazines");
    }
    if (v33)
    {
      int v28 = strtol(v33, 0, 0);
      if (v28)
      {
        if (v28 == 0xFFFF)
        {
          max_magazines = ncpuclusters;
          malloc_report(5, (uint64_t)"Maximum magazines limited to ncpuclusters (%d)\n");
        }
        else if (v28 >= 0)
        {
          if (v28 <= logical_ncpus)
          {
            max_magazines = v28;
            malloc_report(5, (uint64_t)"Maximum magazines set to %d\n");
          }
          else
          {
            max_magazines = logical_ncpus;
            malloc_report(5, (uint64_t)"Maximum magazines limited to number of logical CPUs (%d)\n");
          }
        }
        else
        {
          malloc_report(3, (uint64_t)"Maximum magazines must be positive - ignored.\n");
        }
      }
      else
      {
        malloc_report(5, (uint64_t)"Maximum magazines defaulted to %d\n");
      }
    }
    uint64_t v33 = getenv("MallocLargeExpandedCacheThreshold");
    if (v33)
    {
      unint64_t v27 = strtoull(v33, 0, 0);
      if (v27)
      {
        magazine_large_expanded_cache_threshold = v27;
        malloc_report(5, (uint64_t)"Large expanded cache threshold set to %lly\n");
      }
      else
      {
        malloc_report(5, (uint64_t)"Large expanded cache threshold defaulted to %lly\n");
      }
    }
    uint64_t v33 = getenv("MallocLargeDisableASLR");
    if (v33)
    {
      if (strtoull(v33, 0, 0))
      {
        malloc_report(5, (uint64_t)"Disabling ASLR slide on large allocations\n");
        malloc_debug_flags |= 0x20000000u;
      }
      else
      {
        malloc_report(5, (uint64_t)"Enabling ASLR slide on large allocations\n");
        malloc_debug_flags &= ~0x20000000u;
      }
    }
    uint64_t v33 = getenv("MallocSpaceEfficient");
    if (v33)
    {
      int v25 = 0;
      unint64_t v24 = malloc_common_convert_to_long(v33, &v25);
      if (*v25 || v25 == v33 || v24 > 1)
      {
        malloc_report(3, (uint64_t)"MallocSpaceEfficient must be 0 or 1.\n");
      }
      else
      {
        aggressive_madvise_enabled = v24 == 1;
        if (v24) {
          large_cache_enabled = 0;
        }
        malloc_space_efficient_enabled = v24 == 1;
      }
    }
    uint64_t v33 = getenv("MallocAggressiveMadvise");
    if (v33)
    {
      int v23 = 0;
      unint64_t v22 = malloc_common_convert_to_long(v33, &v23);
      if (*v23 || v23 == v33 || v22 > 1) {
        malloc_report(3, (uint64_t)"MallocAggressiveMadvise must be 0 or 1.\n");
      }
      else {
        aggressive_madvise_enabled = v22 == 1;
      }
    }
    uint64_t v33 = getenv("MallocLargeCache");
    if (v33)
    {
      int v21 = 0;
      unint64_t v20 = malloc_common_convert_to_long(v33, &v21);
      if (*v21 || v21 == v33 || v20 > 1) {
        malloc_report(3, (uint64_t)"MallocLargeCache must be 0 or 1.\n");
      }
      else {
        large_cache_enabled = v20 == 1;
      }
    }
    uint64_t v33 = getenv("MallocRecircRetainedRegions");
    if (v33)
    {
      int v19 = strtol(v33, 0, 0);
      if (v19 <= 0) {
        malloc_report(3, (uint64_t)"MallocRecircRetainedRegions must be positive - ignored.\n");
      }
      else {
        recirc_retained_regions = v19;
      }
    }
    uint64_t v33 = getenv("MallocZeroOnFree");
    if (v33)
    {
      unsigned int v18 = 0;
      unint64_t v17 = malloc_common_convert_to_long(v33, &v18);
      if (*v18 || v18 == v33 || v17 > 1) {
        malloc_report(3, (uint64_t)"MallocZeroOnFree must be 0 or 1.\n");
      }
      else {
        malloc_zero_policy = v17 == 0;
      }
    }
    uint64_t v33 = getenv("MallocZeroOnAlloc");
    if (v33)
    {
      unsigned int v16 = 0;
      unint64_t v15 = malloc_common_convert_to_long(v33, &v16);
      if (*v16 || v16 == v33 || v15 > 1)
      {
        malloc_report(3, (uint64_t)"MallocZeroOnAlloc must be 0 or 1.\n");
      }
      else
      {
        if (v15) {
          int v0 = 2;
        }
        else {
          int v0 = 1;
        }
        malloc_zero_policy = v0;
      }
    }
    uint64_t v33 = getenv("MallocCheckZeroOnFreeCorruption");
    if (v33)
    {
      int v14 = strtol(v33, 0, 0);
      if (v14 <= 0) {
        malloc_report(3, (uint64_t)"malloc_zero_on_free_sample_period must be positive - ignored.\n");
      }
      else {
        malloc_zero_on_free_sample_period = v14;
      }
    }
    uint64_t v33 = getenv("MallocSecureAllocator");
    if (v33 && (malloc_internal_security_policy & 1) != 0)
    {
      uint64_t v13 = 0;
      unint64_t v12 = malloc_common_convert_to_long(v33, &v13);
      if (*v13 || v13 == v33 || v12 > 1)
      {
        malloc_report(3, (uint64_t)"MallocSecureAllocator must be 0 or 1.\n");
      }
      else
      {
        malloc_xzone_enabled = v12 != 0;
        if (v12) {
          int v1 = 2;
        }
        else {
          int v1 = 1;
        }
        malloc_xzone_enabled_override = v1;
      }
    }
    uint64_t v33 = getenv("MallocSecureAllocatorNano");
    if (v33)
    {
      uint64_t v11 = 0;
      unint64_t v10 = malloc_common_convert_to_long(v33, &v11);
      if (*v11 || v11 == v33 || v10 > 1)
      {
        malloc_report(3, (uint64_t)"MallocSecureAllocatorNano must be 0 or 1.\n");
      }
      else
      {
        if (v10) {
          int v2 = 2;
        }
        else {
          int v2 = 1;
        }
        malloc_xzone_nano_override = v2;
      }
    }
    uint64_t v33 = getenv("MallocNanoOnXzone");
    if (v33)
    {
      unsigned int v9 = 0;
      unint64_t v8 = malloc_common_convert_to_long(v33, &v9);
      if (*v9 || v9 == v33 || v8 > 1)
      {
        malloc_report(3, (uint64_t)"MallocNanoOnXzone must be 0 or 1.\n");
      }
      else
      {
        if (v8) {
          int v3 = 2;
        }
        else {
          int v3 = 1;
        }
        malloc_nano_on_xzone_override = v3;
      }
    }
    uint64_t v33 = getenv("MallocSecureAllocatorCreateMzones");
    if (v33 && (malloc_internal_security_policy & 1) != 0)
    {
      uint64_t v7 = 0;
      unint64_t v6 = malloc_common_convert_to_long(v33, &v7);
      if (*v7 || v7 == v33 || v6 > 1) {
        malloc_report(3, (uint64_t)"MallocSecureAllocatorCreateMzones must be 0 or 1.\n");
      }
      else {
        xzm_create_mzones = v6 != 0;
      }
    }
    uint64_t v33 = getenv("MallocSecureAllocatorPurgeableZone");
    if (v33 && (malloc_internal_security_policy & 1) != 0)
    {
      uint64_t v5 = 0;
      unint64_t v4 = malloc_common_convert_to_long(v33, &v5);
      if (*v5 || v5 == v33 || v4 > 1) {
        malloc_report(3, (uint64_t)"MallocSecureAllocatorPurgeableZone must be 0 or 1.\n");
      }
      else {
        purgeable_zone_use_xzuint64_t m = v4 != 0;
      }
    }
    if (getenv("MallocHelp")) {
      malloc_report(5, (uint64_t)"environment variables that can be set for debug:\n- MallocLogFile <f> to create/append messages to file <f> instead of stderr\n- MallocGuardEdges to add 2 guard pages for each large block\n- MallocDoNotProtectPrelude to disable protection (when previous flag set)\n- MallocDoNotProtectPostlude to disable protection (when previous flag set)\n- MallocStackLogging to record all stacks.  Tools like leaks can then be applied\n- MallocStackLoggingNoCompact to record all stacks.  Needed for malloc_history\n- MallocStackLoggingDirectory to set location of stack logs, which can grow large; default is /tmp\n"
    }
                 "- MallocScribble to detect writing on free blocks and missing initializers:\n"
                 "  0x55 is written upon free and 0xaa is written on allocation\n"
                 "- MallocCheckHeapStart <n> to start checking the heap after <n> operations\n"
                 "- MallocCheckHeapEach <s> to repeat the checking of the heap after <s> operations\n"
                 "- MallocCheckHeapSleep <t> to sleep <t> seconds on heap corruption\n"
                 "- MallocCheckHeapAbort <b> to abort on heap corruption if <b> is non-zero\n"
                 "- MallocCorruptionAbort to abort on malloc errors, but not on out of memory for 32-bit processes\n"
                 "  MallocCorruptionAbort is always set on 64-bit processes\n"
                 "- MallocErrorAbort to abort on any malloc error, including out of memory\n"
                 "- MallocTracing to emit kdebug trace points on malloc entry points\n"
                 "- MallocZeroOnFree to enable or disable zero-on-free behavior (for debugging only)\n"
                 "- MallocCheckZeroOnFreeCorruption to enable zero-on-free corruption detection\n"
                 "- MallocHelp - this help!\n");
  }
}

uint64_t _malloc_default_reader_6(int a1, uint64_t a2, uint64_t a3, void *a4)
{
  BOOL v5 = 1;
  if (a1) {
    BOOL v5 = mach_task_is_self() != 0;
  }
  if (!v5)
  {
    __break(1u);
    JUMPOUT(0x8B540);
  }
  *a4 = a2;
  return 0;
}

uint64_t register_msl_dylib()
{
  return set_msl_lite_hooks((uint64_t (*)(uint64_t (**)(), uint64_t))qword_C4288);
}

void *malloc_freezedry()
{
  int v2 = j__malloc(0x10uLL);
  *(_DWORD *)int v2 = 6;
  *((_DWORD *)v2 + 1) = malloc_num_zones;
  *((void *)v2 + 1) = j__calloc(malloc_num_zones, 0x5000uLL);
  for (unsigned int i = 0; i < malloc_num_zones; ++i)
  {
    if (_platform_strcmp())
    {
      _free(*((void **)v2 + 1));
      _free(v2);
      return 0;
    }
    _platform_memmove();
  }
  return v2;
}

uint64_t malloc_jumpstart(uint64_t a1)
{
  if (*(_DWORD *)a1 == 6)
  {
    for (unsigned int i = 0; i < *(_DWORD *)(a1 + 4); ++i)
    {
      unint64_t v15 = 0;
      if (szone_size) {
        unint64_t v15 = szone_size;
      }
      int v14 = 0;
      if (v15) {
        int v14 = v15;
      }
      *(void *)(*(void *)(a1 + 8) + 20480 * i + 16) = v14;
      uint64_t v13 = 0;
      if (frozen_malloc) {
        uint64_t v13 = frozen_malloc;
      }
      unint64_t v12 = 0;
      if (v13) {
        unint64_t v12 = v13;
      }
      *(void *)(*(void *)(a1 + 8) + 20480 * i + 24) = v12;
      uint64_t v11 = 0;
      if (frozen_calloc) {
        uint64_t v11 = frozen_calloc;
      }
      unint64_t v10 = 0;
      if (v11) {
        unint64_t v10 = v11;
      }
      *(void *)(*(void *)(a1 + 8) + 20480 * i + 32) = v10;
      unsigned int v9 = 0;
      if (frozen_valloc) {
        unsigned int v9 = frozen_valloc;
      }
      unint64_t v8 = 0;
      if (v9) {
        unint64_t v8 = v9;
      }
      *(void *)(*(void *)(a1 + 8) + 20480 * i + 4malloc_set_zone_name(zone, 0) = v8;
      uint64_t v7 = 0;
      if (frozen_free) {
        uint64_t v7 = frozen_free;
      }
      unint64_t v6 = 0;
      if (v7) {
        unint64_t v6 = v7;
      }
      *(void *)(*(void *)(a1 + 8) + 20480 * i + 48) = v6;
      BOOL v5 = 0;
      if (frozen_realloc) {
        BOOL v5 = frozen_realloc;
      }
      unint64_t v4 = 0;
      if (v5) {
        unint64_t v4 = v5;
      }
      *(void *)(*(void *)(a1 + 8) + 20480 * i + 56) = v4;
      int v3 = 0;
      if (frozen_destroy) {
        int v3 = frozen_destroy;
      }
      int v2 = 0;
      if (v3) {
        int v2 = v3;
      }
      *(void *)(*(void *)(a1 + 8) + 20480 * i + 64) = v2;
      *(void *)(*(void *)(a1 + 8) + 20480 * i + 96) = &szone_introspect;
      malloc_zone_register((malloc_zone_t *)(*(void *)(a1 + 8) + 20480 * i));
    }
    return 0;
  }
  else
  {
    return 1;
  }
}

void *frozen_malloc(uint64_t a1, size_t a2)
{
  return j__malloc(a2);
}

void *frozen_calloc(uint64_t a1, size_t a2, size_t a3)
{
  return j__calloc(a2, a3);
}

void *frozen_valloc(uint64_t a1, size_t a2)
{
  return j__valloc(a2);
}

void *frozen_realloc(uint64_t a1, unint64_t a2, size_t a3)
{
  unint64_t v5 = szone_size(a1, a2);
  if (a3 <= v5) {
    return (void *)a2;
  }
  unint64_t v4 = j__malloc(a3);
  if (v5) {
    _platform_memmove();
  }
  return v4;
}

void tiny_print_region_free_list(uint64_t a1, unsigned int a2)
{
  unint64_t v6 = a1 & 0xFFFFFFFFFFF00000;
  unint64_t v4 = (const void *)(a1 & 0xFFFFFFFFFFF00000);
  int v5 = *(unsigned __int16 *)((char *)&loc_3F28 + 4 * a2 + (a1 & 0xFFFFFFFFFFF00000));
  if (*(_WORD *)((char *)&loc_3F28 + 4 * a2 + (a1 & 0xFFFFFFFFFFF00000))) {
    int v3 = (const void *)(v6
  }
                      + 16512
                      + 16 * (*(unsigned __int16 *)((char *)&loc_3F28 + 4 * a2 + (a1 & 0xFFFFFFFFFFF00000)) - 1));
  else {
    int v3 = 0;
  }
  int v2 = *(unsigned __int16 *)((char *)&loc_3F28 + 4 * a2 + (a1 & 0xFFFFFFFFFFF00000) + 2);
  if (*(_WORD *)((char *)&loc_3F28 + 4 * a2 + (a1 & 0xFFFFFFFFFFF00000) + 2)) {
    malloc_printf("For region %p, first block: %d (%p), last block: %d (%p)\n", v4, v5, v3, v2, (const void *)(v6+ 16512+ 16 * (*(unsigned __int16 *)((char *)&loc_3F28 + 4 * a2 + (a1 & 0xFFFFFFFFFFF00000) + 2) - 1)));
  }
  else {
    malloc_printf("For region %p, first block: %d (%p), last block: %d (%p)\n", v4, v5, v3, v2, 0);
  }
}

unint64_t tiny_finalize_region(unint64_t result, uint64_t a2)
{
  unint64_t v10 = result;
  uint64_t v9 = a2;
  uint64_t v8 = 0;
  uint64_t v7 = 0;
  unint64_t v6 = 0;
  unsigned __int16 v5 = 0;
  unsigned __int16 v4 = 0;
  if (*(void *)(a2 + 2128))
  {
    uint64_t v8 = *(void *)(v9 + 2144) + 0x100000 - *(void *)(v9 + 2128);
    unsigned __int16 v5 = *(void *)(v9 + 2128) >> 4;
    unint64_t v6 = (v8 & 0xFFFFFFFFFFF00000) + 40;
    unsigned __int16 v3 = (v8 - ((v8 & 0xFFFFFFFFFFF00000) + 16512)) >> 4;
    if (v3 != 64503)
    {
      unint64_t v12 = v6;
      __int16 v11 = v3 + 1;
      int v2 = (_DWORD *)(v6 + 8 * ((int)(unsigned __int16)(v3 + 1) >> 5));
      *v2 &= ~(1 << ((v3 + 1) & 0x1F));
    }
    uint64_t v7 = tiny_previous_preceding_free(v8, &v4);
    if (v7)
    {
      set_tiny_meta_header_middle(v8);
      tiny_free_list_remove_ptr(v10, v9, v7, v4);
      zero_tiny_free_inline_meta_following(v7, v4);
      uint64_t v8 = v7;
      v5 += v4;
    }
    uint64_t result = tiny_free_list_add_ptr(v10, v9, v8, v5);
    *(void *)(v9 + 2128) = 0;
  }
  *(void *)(v9 + 2144) = 0;
  return result;
}

unint64_t tiny_previous_preceding_free(uint64_t a1, unsigned __int16 *a2)
{
  unint64_t v6 = (a1 & 0xFFFFFFFFFFF00000) + 40;
  unint64_t v5 = (a1 & 0xFFFFFFFFFFF00000) + 44;
  unsigned __int16 v4 = (a1 - ((a1 & 0xFFFFFFFFFFF00000) + 16512)) >> 4;
  if (!v4) {
    return 0;
  }
  tiny_previous_free_mmach_vm_size_t size = get_tiny_previous_free_msize(a1);
  if (v4 < (int)tiny_previous_free_msize) {
    return 0;
  }
  if (((*(_DWORD *)(v6 + 8 * ((int)(unsigned __int16)(v4 - tiny_previous_free_msize) >> 5)) >> ((v4
                                                                                                  - tiny_previous_free_msize) & 0x1F)) & 1) == 0)
    return 0;
  if (((*(_DWORD *)(v5 + 8 * ((int)(unsigned __int16)(v4 - tiny_previous_free_msize) >> 5)) >> ((v4
                                                                                                  - tiny_previous_free_msize) & 0x1F)) & 1) != 0)
    return 0;
  if (tiny_previous_free_msize != (unsigned __int16)get_tiny_free_size((a1 & 0xFFFFFFFFFFF00000)+ 16512+ 16 * (unsigned __int16)(v4 - tiny_previous_free_msize)))return 0; {
  *a2 = tiny_previous_free_msize;
  }
  return (a1 & 0xFFFFFFFFFFF00000) + 16512 + 16 * (unsigned __int16)(v4 - tiny_previous_free_msize);
}

uint64_t set_tiny_meta_header_middle(uint64_t result)
{
  unint64_t v1 = (result & 0xFFFFFFFFFFF00000) + 16512;
  *(_DWORD *)&stru_20.segname[8 * ((int)(unsigned __int16)((result - v1) >> 4) >> 5) + (result & 0xFFFFFFFFFFF00000)] &= ~(1 << (((result - v1) >> 4) & 0x1F));
  *(_DWORD *)&stru_20.segname[8 * ((int)(unsigned __int16)((result - v1) >> 4) >> 5)
                            + 4
                            + (result & 0xFFFFFFFFFFF00000)] &= ~(1 << (((result - v1) >> 4) & 0x1F));
  return result;
}

void tiny_free_list_remove_ptr(uint64_t a1, uint64_t a2, unint64_t a3, unsigned __int16 a4)
{
  unsigned int v6 = tiny_slot_from_msize(a4);
  unint64_t v11 = *(void *)(a3 + 8);
  uint64_t v10 = *(void *)a3;
  if (*(void *)a3)
  {
    if (*(void *)(v10 + 8) != a3)
    {
      malloc_zone_error(*(_DWORD *)(a1 + 620), 1, (uint64_t)"tiny_free_list_remove_ptr: Internal invariant broken (next ptr of prev): ptr=%p, prev_next=%p\n");
      __break(1u);
    }
    *(void *)(v10 + 8) = *(void *)(a3 + 8);
  }
  else
  {
    *(void *)(a2 + 32 + 8 * v6) = v11;
    if (!v11)
    {
      unsigned __int16 v4 = (_DWORD *)(a2 + 2088 + 4 * (v6 >> 5));
      *v4 &= ~(1 << (v6 & 0x1F));
    }
  }
  if (v11)
  {
    if (*(void *)v11 != a3)
    {
      malloc_zone_error(*(_DWORD *)(a1 + 620), 1, (uint64_t)"tiny_free_list_remove_ptr: Internal invariant broken (prev ptr of next): ptr=%p, next_prev=%p\n");
      __break(1u);
    }
    *(void *)unint64_t v11 = *(void *)a3;
  }
  unsigned __int16 v5 = (a3 - ((a3 & 0xFFFFFFFFFFF00000) + 16512)) >> 4;
  if (*(unsigned __int16 *)((char *)&loc_3F28 + 4 * v6 + (a3 & 0xFFFFFFFFFFF00000)) == v5 + 1
    && *(unsigned __int16 *)((char *)&loc_3F28 + 4 * v6 + (a3 & 0xFFFFFFFFFFF00000) + 2) == v5 + 1)
  {
    *(_WORD *)((char *)&loc_3F28 + 4 * v6 + (a3 & 0xFFFFFFFFFFF00000) + 2) = 0;
    *(_WORD *)((char *)&loc_3F28 + 4 * v6 + (a3 & 0xFFFFFFFFFFF00000)) = 0;
  }
  else if (*(unsigned __int16 *)((char *)&loc_3F28 + 4 * v6 + (a3 & 0xFFFFFFFFFFF00000)) == v5 + 1)
  {
    if (!v11)
    {
      __break(1u);
      JUMPOUT(0x8CAC0);
    }
    *(_WORD *)((char *)&loc_3F28 + 4 * v6 + (a3 & 0xFFFFFFFFFFF00000)) = ((v11 - ((v11 & 0xFFFFFFFFFFF00000) + 16512)) >> 4)
                                                                         + 1;
  }
  else if (*(unsigned __int16 *)((char *)&loc_3F28 + 4 * v6 + (a3 & 0xFFFFFFFFFFF00000) + 2) == v5 + 1)
  {
    if (!v10)
    {
      __break(1u);
      JUMPOUT(0x8CB2CLL);
    }
    *(_WORD *)((char *)&loc_3F28 + 4 * v6 + (a3 & 0xFFFFFFFFFFF00000) + 2) = ((v10
                                                                               - ((v10 & 0xFFFFFFFFFFF00000)
                                                                                + 16512)) >> 4)
                                                                             + 1;
  }
}

uint64_t zero_tiny_free_inline_meta_following(uint64_t result, unsigned __int16 a2)
{
  if (!malloc_zero_policy && a2 > 1u) {
    *(_WORD *)(result + 16 * a2 - 2) = 0;
  }
  return result;
}

unint64_t tiny_free_list_add_ptr(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 a4)
{
  if (a4 && a4 <= 0x3Fu) {
    unsigned int v6 = a4 - 1;
  }
  else {
    unsigned int v6 = 63;
  }
  uint64_t v13 = *(void *)(a2 + 32 + 8 * v6);
  unint64_t result = set_tiny_meta_header_free(a3, a4);
  if (!v13)
  {
    unsigned __int16 v5 = (_DWORD *)(a2 + 2088 + 4 * (v6 >> 5));
    *v5 |= 1 << (v6 & 0x1F);
  }
  unint64_t v12 = a3 & 0xFFFFFFFFFFF00000;
  unsigned __int16 v11 = *(_WORD *)((char *)&loc_3F28 + 4 * v6 + (a3 & 0xFFFFFFFFFFF00000));
  __int16 v10 = (a3 - ((a3 & 0xFFFFFFFFFFF00000) + 16512)) >> 4;
  if (v11)
  {
    uint64_t v9 = (uint64_t *)(v12 + 16512 + 16 * (v11 - 1));
    uint64_t v16 = *(void *)((char *)&loc_4080 + 16 * v11 + (a3 & 0xFFFFFFFFFFF00000) - 16);
    if (v16) {
      *(void *)(v16 + 8) = a3;
    }
    else {
      *(void *)(a2 + 32 + 8 * v6) = a3;
    }
    *(void *)a3 = *v9;
    *(void *)(a3 + 8) = v9;
    *uint64_t v9 = a3;
    *(_WORD *)((char *)&loc_3F28 + 4 * v6 + (a3 & 0xFFFFFFFFFFF00000)) = v10 + 1;
  }
  else
  {
    unint64_t v8 = 0;
    if (*(int *)((char *)&dword_18 + (a3 & 0xFFFFFFFFFFF00000)) != -1 && *(void *)(a2 + 32 + 8 * v6))
    {
      unint64_t result = tiny_earlier_region_last_free(a2, v12, v6);
      unint64_t v8 = result;
    }
    if (v8)
    {
      uint64_t v7 = *(uint64_t **)(v8 + 8);
      *(void *)(v8 + 8) = a3;
    }
    else
    {
      uint64_t v7 = *(uint64_t **)(a2 + 32 + 8 * v6);
      *(void *)(a2 + 32 + 8 * v6) = a3;
    }
    *(void *)a3 = v8;
    if (v7) {
      *uint64_t v7 = a3;
    }
    *(void *)(a3 + 8) = v7;
    *(_WORD *)((char *)&loc_3F28 + 4 * v6 + (a3 & 0xFFFFFFFFFFF00000) + 2) = v10 + 1;
    *(_WORD *)((char *)&loc_3F28 + 4 * v6 + (a3 & 0xFFFFFFFFFFF00000)) = v10 + 1;
  }
  return result;
}

uint64_t tiny_free_detach_region(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = a1;
  uint64_t v11 = a2;
  uint64_t v10 = a3;
  uint64_t v9 = a3 + 16512;
  unint64_t v8 = a3 + 16512;
  unint64_t v7 = a3 + 0x100000;
  int v6 = 0;
  while (v8 < v7)
  {
    unsigned __int16 tiny_meta_header = get_tiny_meta_header(v8, &v6);
    if (v6)
    {
      if (!tiny_meta_header && v8 == v9) {
        break;
      }
    }
    if (!tiny_meta_header) {
      break;
    }
    if (v6) {
      tiny_free_list_remove_ptr(v12, v11, v8, tiny_meta_header);
    }
    v8 += 16 * tiny_meta_header;
  }
  return *(unsigned int *)(a3 + 20);
}

uint64_t get_tiny_meta_header(uint64_t a1, _DWORD *a2)
{
  return (unsigned __int16)get_tiny_meta_header_offset(a1, 0, a2);
}

uint64_t tiny_free_reattach_region(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = a1;
  uint64_t v11 = a2;
  uint64_t v10 = a3;
  uint64_t v9 = a3 + 16512;
  unint64_t v8 = a3 + 16512;
  unint64_t v7 = a3 + 0x100000;
  int v6 = 0;
  uint64_t v4 = *(unsigned int *)(a3 + 16);
  while (v8 < v7)
  {
    unsigned __int16 tiny_meta_header = get_tiny_meta_header(v8, &v6);
    if (v6)
    {
      if (!tiny_meta_header && v8 == v9) {
        break;
      }
    }
    if (!tiny_meta_header) {
      break;
    }
    if (v6) {
      tiny_free_list_add_ptr(v12, v11, v8, tiny_meta_header);
    }
    v8 += 16 * tiny_meta_header;
  }
  return v4;
}

void tiny_free_scan_madvise_free(uint64_t a1, atomic_uint *a2, uint64_t a3)
{
  uint64_t v31 = a1;
  BOOL v30 = (os_unfair_lock_s *)a2;
  uint64_t v29 = a3;
  uint64_t v28 = a3 + 16512;
  unint64_t v27 = a3 + 16512;
  unint64_t v26 = a3 + 0x100000;
  int v25 = 0;
  unsigned __int16 tiny_meta_header = 0;
  int v23 = v8;
  uint64_t v13 = &v8[-((2 * ((vm_kernel_page_size + 1032063) >> vm_kernel_page_shift >> 1) + 15) & 0xFFFFFFFFFFFFFFF0)];
  vm_size_t v22 = (vm_kernel_page_size + 1032063) >> vm_kernel_page_shift >> 1;
  int v21 = 0;
  while (v27 < v26)
  {
    unsigned __int16 tiny_meta_header = get_tiny_meta_header(v27, &v25);
    if (v25 && !tiny_meta_header && v27 == v28)
    {
      vm_size_t v20 = (v28 + 18 + vm_kernel_page_mask) & ~vm_kernel_page_mask;
      vm_size_t v19 = (v28 + 1048574) & ~vm_kernel_page_mask;
      if (v20 < v19)
      {
        unsigned __int16 v3 = v13;
        v13[2 * v21] = (v20 - v28) >> vm_kernel_page_shift;
        v3[2 * v21++ + 1] = (v19 - v20) >> vm_kernel_page_shift;
      }
      break;
    }
    if (!tiny_meta_header) {
      break;
    }
    if (v25)
    {
      vm_size_t v18 = (v27 + 18 + vm_kernel_page_mask) & ~vm_kernel_page_mask;
      vm_size_t v17 = (v27 + 16 * tiny_meta_header - 2) & ~vm_kernel_page_mask;
      if (v18 < v17)
      {
        uint64_t v4 = v13;
        v13[2 * v21] = (v18 - v29) >> vm_kernel_page_shift;
        v4[2 * v21++ + 1] = (v17 - v18) >> vm_kernel_page_shift;
      }
    }
    v27 += 16 * tiny_meta_header;
  }
  if (v21 > 0)
  {
    int i = 0;
    uint64_t v32 = v29 + 28;
    int v44 = 1;
    uint64_t v43 = v29 + 28;
    int v42 = 1;
    unsigned int add = atomic_fetch_add((atomic_uint *volatile)(v29 + 28), 1u);
    uint64_t v33 = v30;
    char v36 = v30;
    os_unfair_lock_t v50 = v30;
    int v49 = 0;
    uint64_t v51 = 3;
    uint64_t v52 = 3;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    int v49 = *(void *)(StatusReg + 24);
    int v48 = 0;
    int v47 = v49;
    int v46 = 0;
    int v5 = v49;
    int v6 = v49;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v30, (unsigned int *)&v6, 0, memory_order_release, memory_order_relaxed);
    int v11 = v6;
    BOOL v12 = v6 == v5;
    if (v6 != v5) {
      int v47 = v11;
    }
    BOOL v45 = v12;
    if (!v12) {
      os_unfair_lock_unlock(v50);
    }
    for (int i = 0; i < v21; ++i)
    {
      unint64_t v15 = 0;
      unint64_t v15 = (void *)(v29 + (v13[2 * i] << vm_kernel_page_shift));
      uint64_t v14 = 0;
      uint64_t v14 = v13[2 * i + 1] << vm_kernel_page_shift;
      mvm_madvise_free(v31, v29, v15, (unint64_t)v15 + v14, 0, *(_DWORD *)(v31 + 620) & 0x20);
    }
    BOOL v34 = v30;
    unint64_t v37 = v30;
    unint64_t v60 = v30;
    int v59 = 327680;
    unsigned int v58 = 0;
    uint64_t v61 = 3;
    uint64_t v62 = 3;
    unint64_t v63 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    unsigned int v58 = *(void *)(v63 + 24);
    int v57 = 0;
    unsigned int v56 = v58;
    unsigned int v55 = v58;
    int v7 = 0;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v30, (unsigned int *)&v7, v58, memory_order_acquire, memory_order_acquire);
    int v9 = v7;
    BOOL v10 = v7 == 0;
    if (v7) {
      int v57 = v9;
    }
    BOOL v54 = v10;
    if (!v10) {
      os_unfair_lock_lock_with_options();
    }
    uint64_t v35 = v29 + 28;
    int v40 = -1;
    uint64_t v39 = v29 + 28;
    int v38 = -1;
    atomic_fetch_add((atomic_uint *volatile)(v29 + 28), 0xFFFFFFFF);
  }
}

uint64_t tiny_free_no_lock(unint64_t a1, atomic_uint *a2, int a3, uint64_t a4, unint64_t a5, unsigned __int16 a6, int a7)
{
  unint64_t v26 = a1;
  int v25 = a2;
  int v24 = a3;
  uint64_t v23 = a4;
  unint64_t v22 = a5;
  unsigned __int16 v21 = a6;
  int v20 = a7;
  unint64_t v19 = a5;
  uint64_t v18 = 16 * a6;
  vm_size_t v17 = (void *)(a5 + v18);
  unsigned __int16 v16 = 0;
  region_check_cookie(a4, (int *)(a4 + 16508));
  unint64_t v14 = tiny_previous_preceding_free(v22, &v16);
  if (v14)
  {
    set_tiny_meta_header_middle(v22);
    tiny_free_list_remove_ptr(v26, (uint64_t)v25, v14, v16);
    zero_tiny_free_inline_meta_following(v14, v16);
    unint64_t v22 = v14;
    v21 += v16;
  }
  if ((unint64_t)v17 < v23 + 0x100000 && tiny_meta_header_is_free((uint64_t)v17))
  {
    tiny_free_mach_vm_size_t size = get_tiny_free_size((uint64_t)v17);
    if (tiny_free_size > 0x3Fu)
    {
      v21 += tiny_free_size;
      uint64_t v13 = (uint64_t)v17;
      unint64_t v36 = v26;
      uint64_t v35 = v17 + 1;
      BOOL v34 = 0;
      BOOL v34 = (unint64_t *)v17[1];
      uint64_t v33 = v34;
      unint64_t v39 = v26;
      int v38 = v34;
      unint64_t v37 = v34;
      uint64_t v32 = v34;
      BOOL v12 = v34;
      unint64_t v31 = v26;
      BOOL v30 = v17;
      uint64_t v29 = 0;
      uint64_t v29 = *v17;
      uint64_t v28 = v29;
      unint64_t v42 = v26;
      uint64_t v41 = v29;
      uint64_t v40 = v29;
      uint64_t v27 = v29;
      if (v29)
      {
        unint64_t v48 = v26;
        unint64_t v47 = v22;
        unint64_t v46 = v22;
        *(void *)(v28 + 8) = v22;
      }
      else
      {
        *((void *)v25 + 67) = v22;
      }
      if (v12)
      {
        unint64_t v45 = v26;
        unint64_t v44 = v22;
        unint64_t v43 = v22;
        *BOOL v12 = v22;
      }
      *(void *)unint64_t v22 = *(void *)v13;
      *(void *)(v22 + 8) = *(void *)(v13 + 8);
      set_tiny_meta_header_middle(v13);
      zero_tiny_free_inline_meta(v13, tiny_free_size);
      set_tiny_meta_header_free(v22, v21);
      unsigned __int16 v11 = ((v13 - ((v13 & 0xFFFFFFFFFFF00000) + 16512)) >> 4) + 1;
      __int16 v10 = ((v22 - ((v22 & 0xFFFFFFFFFFF00000) + 16512)) >> 4) + 1;
      int v9 = (_WORD *)(v23 + 16420);
      if (*(unsigned __int16 *)(v23 + 16420) == v11) {
        *int v9 = v10;
      }
      if ((unsigned __int16)v9[1] == v11) {
        v9[1] = v10;
      }
      goto LABEL_22;
    }
    tiny_free_list_remove_ptr(v26, (uint64_t)v25, (unint64_t)v17, tiny_free_size);
    set_tiny_meta_header_middle((uint64_t)v17);
    zero_tiny_free_inline_meta((uint64_t)v17, tiny_free_size);
    v21 += tiny_free_size;
  }
  if (malloc_zero_policy && (*(_DWORD *)(v26 + 620) & 0x20) != 0 && (v20 & 2) == 0) {
    _platform_memset();
  }
  tiny_free_list_add_ptr(v26, (uint64_t)v25, v22, v21);
LABEL_22:
  *((void *)v25 + 269) -= v18;
  uint64_t v8 = v23;
  *(_DWORD *)(v23 + 16) -= v18;
  if ((v20 & 1) == 0)
  {
    --*(_DWORD *)(v8 + 20);
    --*((_DWORD *)v25 + 542);
  }
  if (aggressive_madvise_enabled) {
    tiny_madvise_free_range_no_lock(v26, v25, v23, v19, v18, v22, v21);
  }
  return tiny_free_try_recirc_to_depot(v26, v25, v24, v23, v19, v18, v22, v21);
}

BOOL tiny_meta_header_is_free(uint64_t a1)
{
  unint64_t v1 = (a1 & 0xFFFFFFFFFFF00000) + 16512;
  return ((*(_DWORD *)&stru_20.segname[8 * ((int)(unsigned __int16)((a1 - v1) >> 4) >> 5) + (a1 & 0xFFFFFFFFFFF00000)] >> (((a1 - v1) >> 4) & 0x1F)) & 1) != 0
      && ((*(_DWORD *)&stru_20.segname[8 * ((int)(unsigned __int16)((a1 - v1) >> 4) >> 5)
                                     + 4
                                     + (a1 & 0xFFFFFFFFFFF00000)] >> (((a1 - v1) >> 4) & 0x1F)) & 1) == 0;
}

uint64_t get_tiny_free_size(uint64_t a1)
{
  return (unsigned __int16)get_tiny_free_size_offset(a1, 0);
}

uint64_t zero_tiny_free_inline_meta(uint64_t result, unsigned __int16 a2)
{
  if (!malloc_zero_policy)
  {
    *(_OWORD *)unint64_t result = 0uLL;
    if (a2 <= 1u)
    {
      if (!a2) {
        *(_WORD *)(result + 16) = 0;
      }
    }
    else
    {
      *(_WORD *)(result + 16) = 0;
      *(_WORD *)(result + 16 * a2 - 2) = 0;
    }
  }
  return result;
}

uint64_t set_tiny_meta_header_free(uint64_t result, unsigned __int16 a2)
{
  unsigned __int16 v3 = 2 * ((int)(unsigned __int16)((result - ((result & 0xFFFFFFFFFFF00000) + 16512)) >> 4) >> 5);
  *(_DWORD *)&stru_20.segname[4 * v3 + (result & 0xFFFFFFFFFFF00000)] |= 1 << (((result
                                                                                 - ((result & 0xFFFFFFFFFFF00000)
                                                                                  + 16512)) >> 4) & 0x1F);
  int v2 = (_DWORD *)((result & 0xFFFFFFFFFFF00000) + 40 + 4 * (v3 + 1));
  *v2 &= ~(1 << (((result - ((result & 0xFFFFFFFFFFF00000) + 16512)) >> 4) & 0x1F));
  if (a2 > 1u)
  {
    *(_WORD *)(result + 16 * a2 - 2) = a2;
    *(_WORD *)(result + 16) = a2;
  }
  if (!a2) {
    *(_WORD *)(result + 16) = 0;
  }
  return result;
}

unint64_t tiny_madvise_free_range_no_lock(unint64_t result, atomic_uint *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unsigned __int16 a7)
{
  uint64_t v17 = result;
  if (((a6 + 18 + vm_kernel_page_mask) & ~vm_kernel_page_mask) < ((a6 + 16 * a7 - 2) & ~vm_kernel_page_mask))
  {
    unsigned __int16 v11 = (void *)(((a6 + 18 + vm_kernel_page_mask) & ~vm_kernel_page_mask) <= ((a4 - 2) & ~vm_kernel_page_mask)
                 ? (a4 - 2) & ~vm_kernel_page_mask
                 : (a6 + 18 + vm_kernel_page_mask) & ~vm_kernel_page_mask);
    unint64_t v10 = ((a6 + 16 * a7 - 2) & ~vm_kernel_page_mask) >= ((a4 + a5 + 18 + vm_kernel_page_mask) & ~vm_kernel_page_mask)
        ? (a4 + a5 + 18 + vm_kernel_page_mask) & ~vm_kernel_page_mask
        : (a6 + 16 * a7 - 2) & ~vm_kernel_page_mask;
    if ((unint64_t)v11 < v10)
    {
      tiny_free_list_remove_ptr(result, (uint64_t)a2, a6, a7);
      set_tiny_meta_header_in_use(a6, a7);
      atomic_fetch_add((atomic_uint *volatile)(a3 + 28), 1u);
      int v7 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
      int v8 = v7;
      atomic_compare_exchange_strong_explicit(a2, (unsigned int *)&v8, 0, memory_order_release, memory_order_relaxed);
      if (v8 != v7) {
        os_unfair_lock_unlock((os_unfair_lock_t)a2);
      }
      mvm_madvise_free(v17, a3, v11, v10, (void **)(v17 + 640), *(_DWORD *)(v17 + 620) & 0x20);
      int v9 = 0;
      atomic_compare_exchange_strong_explicit(a2, (unsigned int *)&v9, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
      if (v9) {
        os_unfair_lock_lock_with_options();
      }
      atomic_fetch_add((atomic_uint *volatile)(a3 + 28), 0xFFFFFFFF);
      set_tiny_meta_header_free(a6, a7);
      return tiny_free_list_add_ptr(v17, (uint64_t)a2, a6, a7);
    }
  }
  return result;
}

uint64_t tiny_free_try_recirc_to_depot(unint64_t a1, atomic_uint *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, unsigned __int16 a8)
{
  uint64_t v12 = *(unsigned int *)(a4 + 16);
  if (a3 != -1)
  {
    if (tiny_region_below_recirc_threshold(a4)) {
      *(unsigned char *)(a4 + 32) = 1;
    }
    if (tiny_magazine_below_recirc_threshold((uint64_t)a2)) {
      return tiny_free_do_recirc_to_depot(a1, (uint64_t)a2);
    }
    return 1;
  }
  if ((aggressive_madvise_enabled & 1) == 0) {
    tiny_madvise_free_range_no_lock(a1, a2, a4, a5, a6, a7, a8);
  }
  if (v12 || *(int *)(a4 + 28) > 0) {
    return 1;
  }
  mach_vm_address_t v11 = tiny_free_try_depot_unmap_no_lock(a1, (uint64_t)a2, a4);
  int v8 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  int v9 = v8;
  atomic_compare_exchange_strong_explicit(a2, (unsigned int *)&v9, 0, memory_order_release, memory_order_relaxed);
  if (v9 != v8) {
    os_unfair_lock_unlock((os_unfair_lock_t)a2);
  }
  if (v11)
  {
    if ((*(_DWORD *)(a1 + 620) & 4) != 0) {
      mvm_deallocate_pages(v11, 0x100000uLL, *(_WORD *)(a1 + 620) & 0xFFFE);
    }
    else {
      mvm_deallocate_pages(v11, 0x100000uLL, *(_WORD *)(a1 + 620) & 0xFFFC);
    }
  }
  return 0;
}

unint64_t tiny_memalign(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int16 v19 = (unint64_t)(a4 + 15) >> 4;
  unint64_t v18 = (unint64_t)tiny_malloc_should_clear(a1 + 16512, v19, 0);
  if (!v18) {
    return 0;
  }
  if ((v18 & (a2 - 1)) != 0) {
    uint64_t v10 = a2 - (v18 & (a2 - 1));
  }
  else {
    uint64_t v10 = 0;
  }
  unsigned __int16 v17 = (unint64_t)(a3 + 15) >> 4;
  unsigned __int16 v16 = (unint64_t)(v10 + 15) >> 4;
  unsigned __int16 v15 = v19 - v17 - v16;
  if (v16)
  {
    uint64_t v14 = v18 + v10;
    uint64_t v13 = mag_lock_zine_for_region_trailer_0(*(void *)(a1 + 17136), v18 & 0xFFFFFFFFFFF00000, *(int *)((char *)&dword_18 + (v18 & 0xFFFFFFFFFFF00000)));
    set_tiny_meta_header_in_use(v18 + v10, v17);
    ++*((_DWORD *)v13 + 542);
    if (v15)
    {
      unsigned __int16 v24 = v17 + ((v14 - ((v14 & 0xFFFFFFFFFFF00000) + 16512)) >> 4);
      uint64_t v4 = (_DWORD *)((v14 & 0xFFFFFFFFFFF00000) + 44 + 8 * ((int)v24 >> 5));
      *v4 |= 1 << (v24 & 0x1F);
    }
    int v5 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    int v6 = v5;
    atomic_compare_exchange_strong_explicit(v13, (unsigned int *)&v6, 0, memory_order_release, memory_order_relaxed);
    if (v6 != v5) {
      os_unfair_lock_unlock((os_unfair_lock_t)v13);
    }
    free_tiny(a1 + 16512, v18, v18 & 0xFFFFFFFFFFF00000, 16 * v16, 1);
    v18 += v10;
  }
  if (v15)
  {
    unint64_t v12 = v18 + 16 * v17;
    mach_vm_address_t v11 = mag_lock_zine_for_region_trailer_0(*(void *)(a1 + 17136), v18 & 0xFFFFFFFFFFF00000, *(int *)((char *)&dword_18 + (v18 & 0xFFFFFFFFFFF00000)));
    set_tiny_meta_header_in_use(v12, v15);
    ++*((_DWORD *)v11 + 542);
    int v7 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    int v8 = v7;
    atomic_compare_exchange_strong_explicit(v11, (unsigned int *)&v8, 0, memory_order_release, memory_order_relaxed);
    if (v8 != v7) {
      os_unfair_lock_unlock((os_unfair_lock_t)v11);
    }
    free_tiny(a1 + 16512, v12, v12 & 0xFFFFFFFFFFF00000, 16 * v15, 1);
  }
  return v18;
}

unsigned char *tiny_malloc_should_clear(uint64_t a1, unsigned __int16 a2, int a3)
{
  uint64_t v34 = rack_get_thread_index(a1) % *(_DWORD *)(a1 + 608);
  uint64_t v33 = *(void *)(a1 + 624) + 2560 * (int)v34;
  if (malloc_tracing_enabled) {
    kdebug_trace();
  }
  int v3 = 0;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v33, (unsigned int *)&v3, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
  if (v3) {
    os_unfair_lock_lock_with_options();
  }
  uint64_t v35 = *(unsigned char **)(v33 + 8);
  if (*(unsigned __int16 *)(v33 + 16) == a2)
  {
    *(void *)(v33 + 8) = 0;
    *(_WORD *)(v33 + 16) = 0;
    *(void *)(v33 + 24) = 0;
    int v4 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    int v5 = v4;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v33, (unsigned int *)&v5, 0, memory_order_release, memory_order_relaxed);
    if (v5 != v4) {
      os_unfair_lock_unlock((os_unfair_lock_t)v33);
    }
LABEL_17:
    tiny_check_zero_or_clear(v35, a2, a3);
    return v35;
  }
  else
  {
    while (1)
    {
      uint64_t v35 = (unsigned char *)tiny_malloc_from_free_list(a1, v33, v34, a2);
      if (v35)
      {
        int v6 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
        int v7 = v6;
        atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v33, (unsigned int *)&v7, 0, memory_order_release, memory_order_relaxed);
        if (v7 != v6) {
          os_unfair_lock_unlock((os_unfair_lock_t)v33);
        }
        goto LABEL_17;
      }
      BOOL v8 = tiny_get_region_from_depot(a1, v33, v34, a2) == 0;
      if (!v8)
      {
        uint64_t v35 = (unsigned char *)tiny_malloc_from_free_list(a1, v33, v34, a2);
        BOOL v8 = v35 == 0;
        if (v35)
        {
          int v9 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
          int v10 = v9;
          atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v33, (unsigned int *)&v10, 0, memory_order_release, memory_order_relaxed);
          if (v10 != v9) {
            os_unfair_lock_unlock((os_unfair_lock_t)v33);
          }
          goto LABEL_17;
        }
      }
      uint64_t v41 = (atomic_uint *)(v33 + 4);
      if (!v8)
      {
        int v12 = 0;
        atomic_compare_exchange_strong_explicit(v41, (unsigned int *)&v12, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
        BOOL v42 = v12 == 0;
      }
      else
      {
        BOOL v42 = os_unfair_lock_trylock((os_unfair_lock_t)v41);
      }
      if (v42) {
        break;
      }
      int v25 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
      int v26 = v25;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v33, (unsigned int *)&v26, 0, memory_order_release, memory_order_relaxed);
      if (v26 != v25) {
        os_unfair_lock_unlock((os_unfair_lock_t)v33);
      }
      int v27 = 0;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v33 + 4), (unsigned int *)&v27, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
      if (v27) {
        os_unfair_lock_lock_with_options();
      }
      int v28 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
      int v29 = v28;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v33 + 4), (unsigned int *)&v29, 0, memory_order_release, memory_order_relaxed);
      if (v29 != v28) {
        os_unfair_lock_unlock((os_unfair_lock_t)(v33 + 4));
      }
      int v30 = 0;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v33, (unsigned int *)&v30, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
      if (v30) {
        os_unfair_lock_lock_with_options();
      }
    }
    int v13 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    int v14 = v13;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v33, (unsigned int *)&v14, 0, memory_order_release, memory_order_relaxed);
    if (v14 != v13) {
      os_unfair_lock_unlock((os_unfair_lock_t)v33);
    }
    if ((*(_DWORD *)(a1 + 620) & 4) != 0) {
      mach_vm_address_t pages = mvm_allocate_pages(0x100000uLL, 0x14u, *(_DWORD *)(a1 + 620) & 0xFFFFFFFE, 7);
    }
    else {
      mach_vm_address_t pages = mvm_allocate_pages(0x100000uLL, 0x14u, *(_DWORD *)(a1 + 620) & 0xFFFFFFFC, 7);
    }
    unint64_t v32 = pages;
    int v16 = 0;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v33, (unsigned int *)&v16, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
    if (v16) {
      os_unfair_lock_lock_with_options();
    }
    if (v32)
    {
      region_set_cookie((_DWORD *)(v32 + 16508));
      unint64_t v36 = tiny_malloc_from_region_no_lock((atomic_uint *)a1, v33, v34, a2, v32);
      int v21 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
      int v22 = v21;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v33, (unsigned int *)&v22, 0, memory_order_release, memory_order_relaxed);
      if (v22 != v21) {
        os_unfair_lock_unlock((os_unfair_lock_t)v33);
      }
      int v23 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
      int v24 = v23;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v33 + 4), (unsigned int *)&v24, 0, memory_order_release, memory_order_relaxed);
      if (v24 != v23) {
        os_unfair_lock_unlock((os_unfair_lock_t)(v33 + 4));
      }
      return (unsigned char *)v36;
    }
    else
    {
      int v17 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
      int v18 = v17;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v33, (unsigned int *)&v18, 0, memory_order_release, memory_order_relaxed);
      if (v18 != v17) {
        os_unfair_lock_unlock((os_unfair_lock_t)v33);
      }
      int v19 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
      int v20 = v19;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v33 + 4), (unsigned int *)&v20, 0, memory_order_release, memory_order_relaxed);
      if (v20 != v19) {
        os_unfair_lock_unlock((os_unfair_lock_t)(v33 + 4));
      }
      return 0;
    }
  }
}

uint64_t set_tiny_meta_header_in_use(uint64_t result, __int16 a2)
{
  unint64_t v20 = (result & 0xFFFFFFFFFFF00000) + 40;
  unsigned __int16 v17 = (result - ((result & 0xFFFFFFFFFFF00000) + 16512)) >> 4;
  unsigned __int16 v15 = 2 * ((int)v17 >> 5);
  *(_DWORD *)&stru_20.segname[4 * v15 + (result & 0xFFFFFFFFFFF00000)] |= 1 << (((result
                                                                                  - ((result & 0xFFFFFFFFFFF00000)
                                                                                   + 16512)) >> 4) & 0x1F);
  int v2 = (_DWORD *)(v20 + 4 * (v15 + 1));
  *v2 |= 1 << (((result - ((result & 0xFFFFFFFFFFF00000) + 16512)) >> 4) & 0x1F);
  unsigned __int16 v18 = v17 + 1;
  unsigned __int16 v16 = 2 * ((int)v18 >> 5);
  char v14 = v18 & 0x1F;
  unsigned int v13 = (v18 & 0x1F) + (unsigned __int16)(a2 - 1);
  if (v13 <= 0x3F)
  {
    if (v13 <= 0x1F)
    {
      *(_DWORD *)&stru_20.segname[4 * v16 + (result & 0xFFFFFFFFFFF00000)] &= (0xFFFFFFFF >> (31 - v14) >> 1) | (-1 << v13);
      int v9 = (_DWORD *)(v20 + 4 * (v16 + 1));
      *v9 &= (0xFFFFFFFF >> (31 - v14) >> 1) | (-1 << v13);
    }
    else
    {
      int v11 = -1 << (v13 - 32);
      *(_DWORD *)&stru_20.segname[4 * v16 + (result & 0xFFFFFFFFFFF00000)] &= 0xFFFFFFFF >> (31 - v14) >> 1;
      int v6 = (_DWORD *)(v20 + 4 * (v16 + 1));
      *v6 &= 0xFFFFFFFF >> (31 - v14) >> 1;
      int v7 = (_DWORD *)(v20 + 4 * (v16 + 2));
      *v7 &= v11;
      BOOL v8 = (_DWORD *)(v20 + 4 * (v16 + 3));
      *v8 &= v11;
    }
  }
  else
  {
    int v12 = -1 << (v13 - 64);
    *(_DWORD *)&stru_20.segname[4 * v16 + (result & 0xFFFFFFFFFFF00000)] &= 0xFFFFFFFF >> (31 - v14) >> 1;
    int v3 = (_DWORD *)(v20 + 4 * (v16 + 1));
    *v3 &= 0xFFFFFFFF >> (31 - v14) >> 1;
    *(_DWORD *)&stru_20.segname[4 * v16 + 8 + (result & 0xFFFFFFFFFFF00000)] = 0;
    *(_DWORD *)&stru_20.segname[4 * v16 + 12 + (result & 0xFFFFFFFFFFF00000)] = 0;
    int v4 = (_DWORD *)(v20 + 4 * (v16 + 4));
    *v4 &= v12;
    int v5 = (_DWORD *)(v20 + 4 * (v16 + 5));
    *v5 &= v12;
  }
  unsigned __int16 v19 = v18 + a2 - 1;
  int v10 = (_DWORD *)(v20 + 4 * (unsigned __int16)(2 * ((int)v19 >> 5)));
  *v10 |= 1 << (v19 & 0x1F);
  return result;
}

void free_tiny(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unint64_t v29 = a1;
  unint64_t v28 = a2;
  uint64_t v27 = a3;
  uint64_t v26 = a4;
  int v25 = a5;
  unsigned __int16 tiny_meta_header = 0;
  int v23 = 0;
  int v22 = *(_DWORD *)(a3 + 24);
  uint64_t v21 = *(void *)(a1 + 624) + 2560 * v22;
  int v20 = 0;
  if (malloc_tracing_enabled) {
    kdebug_trace();
  }
  if (v26)
  {
    unsigned __int16 tiny_meta_header = (unint64_t)(v26 + 15) >> 4;
  }
  else
  {
    unsigned __int16 tiny_meta_header = get_tiny_meta_header(v28, &v23);
    if (v23)
    {
LABEL_6:
      free_tiny_botch(v29);
      return;
    }
  }
  if (!malloc_zero_policy) {
    _platform_memset();
  }
  uint64_t v35 = v21;
  uint64_t v40 = v21;
  uint64_t v94 = v21;
  int v93 = 327680;
  unsigned int v92 = 0;
  uint64_t v95 = 3;
  uint64_t v96 = 3;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unsigned int v92 = *(void *)(StatusReg + 24);
  int v91 = 0;
  unsigned int v90 = v92;
  unsigned int v89 = v92;
  int v5 = 0;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v21, (unsigned int *)&v5, v92, memory_order_acquire, memory_order_acquire);
  if (v5) {
    int v91 = v5;
  }
  BOOL v88 = v5 == 0;
  if (v5) {
    os_unfair_lock_lock_with_options();
  }
  if (v22 != -1 && !v25 && tiny_meta_header < 0x10u)
  {
    unint64_t v19 = *(void *)(v21 + 8);
    unsigned __int16 v18 = *(_WORD *)(v21 + 16);
    uint64_t v17 = *(void *)(v21 + 24);
    if (v28 == v19)
    {
      uint64_t v33 = v21;
      uint64_t v36 = v21;
      os_unfair_lock_t v74 = (os_unfair_lock_t)v21;
      int v73 = 0;
      uint64_t v75 = 3;
      uint64_t v76 = 3;
      unint64_t v77 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      int v73 = *(void *)(v77 + 24);
      int v72 = 0;
      int v71 = v73;
      int v70 = 0;
      int v6 = v73;
      int v7 = v73;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v21, (unsigned int *)&v7, 0, memory_order_release, memory_order_relaxed);
      if (v7 != v6) {
        int v71 = v7;
      }
      BOOL v69 = v7 == v6;
      if (v7 != v6) {
        os_unfair_lock_unlock(v74);
      }
      goto LABEL_6;
    }
    if (malloc_zero_policy && (*(_DWORD *)(v29 + 620) & 0x20) != 0 && tiny_meta_header) {
      _platform_memset();
    }
    *(void *)(v21 + 8) = v28;
    *(_WORD *)(v21 + 16) = tiny_meta_header;
    *(void *)(v21 + 24) = v27;
    if (!v19)
    {
      uint64_t v32 = v21;
      uint64_t v37 = v21;
      os_unfair_lock_t v65 = (os_unfair_lock_t)v21;
      int v64 = 0;
      uint64_t v66 = 3;
      uint64_t v67 = 3;
      unint64_t v68 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      int v64 = *(void *)(v68 + 24);
      int v63 = 0;
      int v62 = v64;
      int v61 = 0;
      int v8 = v64;
      int v9 = v64;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v21, (unsigned int *)&v9, 0, memory_order_release, memory_order_relaxed);
      if (v9 != v8) {
        int v62 = v9;
      }
      BOOL v60 = v9 == v8;
      if (v9 != v8) {
        os_unfair_lock_unlock(v65);
      }
      return;
    }
    unsigned __int16 tiny_meta_header = v18;
    unint64_t v28 = v19;
    uint64_t v27 = v17;
    int v20 = 2;
  }
  uint64_t v16 = v27;
  while (1)
  {
    int v15 = *(_DWORD *)(v16 + 24);
    if (v22 == v15) {
      break;
    }
    uint64_t v31 = v21;
    uint64_t v38 = v21;
    os_unfair_lock_t v56 = (os_unfair_lock_t)v21;
    int v55 = 0;
    uint64_t v57 = 3;
    uint64_t v58 = 3;
    unint64_t v59 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    int v55 = *(void *)(v59 + 24);
    int v54 = 0;
    int v53 = v55;
    int v52 = 0;
    int v10 = v55;
    int v11 = v55;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v21, (unsigned int *)&v11, 0, memory_order_release, memory_order_relaxed);
    if (v11 != v10) {
      int v53 = v11;
    }
    BOOL v51 = v11 == v10;
    if (v11 != v10) {
      os_unfair_lock_unlock(v56);
    }
    int v22 = v15;
    uint64_t v21 = *(void *)(v29 + 624) + 2560 * v15;
    uint64_t v34 = v21;
    uint64_t v41 = v21;
    uint64_t v84 = v21;
    int v83 = 327680;
    unsigned int v82 = 0;
    uint64_t v85 = 3;
    uint64_t v86 = 3;
    unint64_t v87 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    unsigned int v82 = *(void *)(v87 + 24);
    int v81 = 0;
    unsigned int v80 = v82;
    unsigned int v79 = v82;
    int v12 = 0;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v21, (unsigned int *)&v12, v82, memory_order_acquire, memory_order_acquire);
    if (v12) {
      int v81 = v12;
    }
    BOOL v78 = v12 == 0;
    if (v12) {
      os_unfair_lock_lock_with_options();
    }
  }
  if (v25) {
    v20 |= 1u;
  }
  if (tiny_free_no_lock(v29, (atomic_uint *)v21, v22, v27, v28, tiny_meta_header, v20))
  {
    uint64_t v30 = v21;
    uint64_t v39 = v21;
    os_unfair_lock_t v47 = (os_unfair_lock_t)v21;
    int v46 = 0;
    uint64_t v48 = 3;
    uint64_t v49 = 3;
    unint64_t v50 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    int v46 = *(void *)(v50 + 24);
    int v45 = 0;
    int v44 = v46;
    int v43 = 0;
    int v13 = v46;
    int v14 = v46;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v21, (unsigned int *)&v14, 0, memory_order_release, memory_order_relaxed);
    if (v14 != v13) {
      int v44 = v14;
    }
    BOOL v42 = v14 == v13;
    if (v14 != v13) {
      os_unfair_lock_unlock(v47);
    }
  }
}

BOOL tiny_claimed_address(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = tiny_region_for_ptr_no_lock(a1, a2);
  BOOL v3 = 0;
  if (v4)
  {
    BOOL v3 = 0;
    if (a2 >= v4 + 16512) {
      return a2 < v4 + 0x100000;
    }
  }
  return v3;
}

uint64_t tiny_try_shrink_in_place(unint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unsigned __int16 v10 = a4 >> 4;
  __int16 v9 = (a3 >> 4) - v10;
  if ((unsigned __int16)(a3 >> 4) != v10)
  {
    unint64_t v8 = a2 + 16 * v10;
    int v7 = mag_lock_zine_for_region_trailer_0(*(void *)(a1 + 624), a2 & 0xFFFFFFFFFFF00000, *(int *)((char *)&dword_18 + (a2 & 0xFFFFFFFFFFF00000)));
    set_tiny_meta_header_in_use(v8, v9);
    ++*((_DWORD *)v7 + 542);
    int v4 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    int v5 = v4;
    atomic_compare_exchange_strong_explicit(v7, (unsigned int *)&v5, 0, memory_order_release, memory_order_relaxed);
    if (v5 != v4) {
      os_unfair_lock_unlock((os_unfair_lock_t)v7);
    }
    free_tiny(a1, v8, v8 & 0xFFFFFFFFFFF00000, 0, 1);
  }
  return a2;
}

uint64_t tiny_try_realloc_in_place(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v18 = a2 & 0xFFFFFFFFFFF00000;
  unsigned __int16 v23 = a3 >> 4;
  unsigned __int16 v19 = (unint64_t)(a4 + 15) >> 4;
  if ((unsigned __int16)((a2 - ((a2 & 0xFFFFFFFFFFF00000) + 16512)) >> 4) + v23 >= 0xFBF8) {
    return 0;
  }
  int v22 = (unsigned char *)(a2 + a3);
  uint64_t v17 = mag_lock_zine_for_region_trailer_0(*(void *)(a1 + 624), v18, *(int *)((char *)&dword_18 + (a2 & 0xFFFFFFFFFFF00000)));
  if (*(int *)((char *)&dword_18 + (a2 & 0xFFFFFFFFFFF00000)) == -1)
  {
    int v4 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    int v5 = v4;
    atomic_compare_exchange_strong_explicit(v17, (unsigned int *)&v5, 0, memory_order_release, memory_order_relaxed);
    if (v5 != v4) {
      os_unfair_lock_unlock((os_unfair_lock_t)v17);
    }
    return 0;
  }
  unsigned __int16 v20 = v19 - v23;
  uint64_t v16 = (unsigned char *)*((void *)v17 + 1);
  unsigned __int16 v15 = *((_WORD *)v17 + 8);
  if (v16 == v22 && v23 + v15 >= v19)
  {
    if (v15 == v20)
    {
      *((void *)v17 + 1) = 0;
      *((_WORD *)v17 + 8) = 0;
      *((void *)v17 + 3) = 0;
      --*(_DWORD *)(v18 + 20);
    }
    else
    {
      *((_WORD *)v17 + 8) -= v20;
      *((void *)v17 + 1) += a4 - a3;
      set_tiny_meta_header_in_use((uint64_t)&v22[16 * v20], v15 - v20);
    }
    set_tiny_meta_header_middle((uint64_t)v22);
    tiny_check_zero_or_clear(v16, v20, 0);
    unsigned __int16 v20 = 0;
LABEL_34:
    *((void *)v17 + 269) += 16 * v20;
    unint64_t v13 = *(int *)((char *)dword_10 + (a2 & 0xFFFFFFFFFFF00000)) + 16 * v20;
    *(int *)((char *)dword_10 + (a2 & 0xFFFFFFFFFFF00000)) = v13;
    if (v13 >= 0xBCFA0) {
      *((unsigned char *)&stru_20.cmd + (a2 & 0xFFFFFFFFFFF00000)) = 0;
    }
    int v10 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    int v11 = v10;
    atomic_compare_exchange_strong_explicit(v17, (unsigned int *)&v11, 0, memory_order_release, memory_order_relaxed);
    if (v11 != v10) {
      os_unfair_lock_unlock((os_unfair_lock_t)v17);
    }
    return 1;
  }
  int v14 = (unsigned char *)((a2 & 0xFFFFFFFFFFF00000) + 0x100000 - *((void *)v17 + 266));
  if (*((void *)v17 + 268) == (a2 & 0xFFFFFFFFFFF00000)
    && v20 < (int)(unsigned __int16)(*((void *)v17 + 266) >> 4)
    && v14 == (unsigned char *)(a2 + a3))
  {
    set_tiny_meta_header_middle((uint64_t)v14);
    if (v20 > 1u) {
      set_tiny_meta_header_middle((uint64_t)(v14 + 16));
    }
    *((void *)v17 + 266) -= 16 * v20;
    if (*((void *)v17 + 266)) {
      set_tiny_meta_header_in_use_1(a2 + 16 * v19);
    }
    tiny_check_zero_or_clear(v14, v20, 0);
    goto LABEL_34;
  }
  if (tiny_meta_header_is_free((uint64_t)v22))
  {
    tiny_free_mach_vm_size_t size = get_tiny_free_size((uint64_t)v22);
    if (v23 + tiny_free_size >= v19)
    {
      tiny_free_list_remove_ptr(a1, (uint64_t)v17, (unint64_t)v22, tiny_free_size);
      set_tiny_meta_header_middle((uint64_t)v22);
      if (!malloc_zero_policy) {
        _tiny_check_and_zero_inline_meta_from_freelist(a1, (uint64_t)v22, tiny_free_size);
      }
      tiny_check_zero_or_clear(v22, v20, 0);
      if (tiny_free_size != v20) {
        tiny_free_list_add_ptr(a1, (uint64_t)v17, (uint64_t)&v22[16 * v20], tiny_free_size - v20);
      }
      set_tiny_meta_header_in_use(a2, v19);
      goto LABEL_34;
    }
    int v8 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    int v9 = v8;
    atomic_compare_exchange_strong_explicit(v17, (unsigned int *)&v9, 0, memory_order_release, memory_order_relaxed);
    if (v9 != v8) {
      os_unfair_lock_unlock((os_unfair_lock_t)v17);
    }
    return 0;
  }
  else
  {
    int v6 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    int v7 = v6;
    atomic_compare_exchange_strong_explicit(v17, (unsigned int *)&v7, 0, memory_order_release, memory_order_relaxed);
    if (v7 != v6) {
      os_unfair_lock_unlock((os_unfair_lock_t)v17);
    }
    return 0;
  }
}

void tiny_check_zero_or_clear(unsigned char *a1, uint64_t a2, int a3)
{
  if (malloc_zero_policy)
  {
    if (malloc_zero_policy == 1)
    {
      if (!a3) {
        return;
      }
    }
    else if (malloc_zero_policy != 2)
    {
      return;
    }
    _platform_memset();
    return;
  }
  if (zero_on_free_should_sample())
  {
    if (_platform_memcmp_zero_aligned8()) {
      tiny_zero_corruption_abort(a1);
    }
  }
}

uint64_t set_tiny_meta_header_in_use_1(uint64_t result)
{
  unint64_t v6 = (result & 0xFFFFFFFFFFF00000) + 40;
  unint64_t v1 = (result & 0xFFFFFFFFFFF00000) + 16512;
  unsigned __int16 v5 = (result - v1) >> 4;
  unsigned __int16 v4 = 2 * ((int)v5 >> 5);
  *(_DWORD *)&stru_20.segname[4 * v4 + (result & 0xFFFFFFFFFFF00000)] |= 1 << (((result - v1) >> 4) & 0x1F);
  int v2 = (_DWORD *)(v6 + 4 * (v4 + 1));
  *v2 |= 1 << (((result - v1) >> 4) & 0x1F);
  BOOL v3 = (_DWORD *)(v6 + 4 * (unsigned __int16)(2 * ((int)++v5 >> 5)));
  *v3 |= 1 << (v5 & 0x1F);
  return result;
}

uint64_t tiny_check_region(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v39 = a1;
  uint64_t v38 = a2;
  uint64_t v37 = a3;
  unsigned int v36 = a4;
  uint64_t v35 = 0;
  uint64_t v34 = 0;
  unint64_t v33 = 0;
  int v32 = 0;
  unsigned int v31 = 0;
  unsigned __int16 tiny_meta_header = 0;
  unint64_t v29 = 0;
  unint64_t v28 = 0;
  uint64_t v27 = 0;
  uint64_t v26 = 0;
  int v25 = 0;
  int v25 = *(_DWORD *)(a2 + 24);
  int v24 = 0;
  int v24 = (void *)(*(void *)(a1 + 624) + 2560 * v25);
  if (*(_DWORD *)(a2 + 28))
  {
    uint64_t v35 = (void *)(v38 + 16512);
    uint64_t v34 = (void *)(v38 + 16512);
    if (v38 == v24[268]
      && (uint64_t v34 = (void *)((char *)v34 + v24[267])) != 0
      && ((unsigned __int16 tiny_meta_header = get_tiny_meta_header((uint64_t)(v34 - 2), &v31), v31) || tiny_meta_header != 1))
    {
      uint64_t v5 = v37;
      uint64_t v6 = v36;
      int v7 = v34 - 2;
      uint64_t v8 = tiny_meta_header;
      uint64_t v9 = v31;
      malloc_zone_check_fail((uint64_t)tiny_check_fail_msg[0], (uint64_t)"%ld, counter=%d\n*** invariant broken for leader block %p - %d %d\n");
      return 0;
    }
    else
    {
      unint64_t v33 = v38 + 0x100000;
      if (v38 == v24[268]) {
        v33 -= v24[266];
      }
      while ((unint64_t)v34 < v33)
      {
        unsigned __int16 tiny_meta_header = get_tiny_meta_header((uint64_t)v34, &v31);
        if (v31 && !tiny_meta_header && v34 == v35) {
          return 1;
        }
        if (!tiny_meta_header)
        {
          uint64_t v5 = v37;
          uint64_t v6 = v36;
          int v7 = v34;
          uint64_t v8 = 0;
          malloc_zone_check_fail((uint64_t)tiny_check_fail_msg[0], (uint64_t)"%ld, counter=%d\n*** invariant broken for tiny block %p this msize=%d - size is too small\n");
          return 0;
        }
        if (v31)
        {
          int v32 = 1;
          unint64_t v29 = v34;
          uint64_t v50 = v39;
          uint64_t v49 = v34;
          uint64_t v48 = 0;
          uint64_t v48 = *v34;
          uint64_t v47 = v48;
          uint64_t v53 = v39;
          uint64_t v52 = v48;
          uint64_t v51 = v48;
          uint64_t v46 = v48;
          uint64_t v27 = v48;
          uint64_t v45 = v39;
          int v44 = v34 + 1;
          uint64_t v43 = 0;
          uint64_t v43 = v34[1];
          uint64_t v42 = v43;
          uint64_t v56 = v39;
          uint64_t v55 = v43;
          uint64_t v54 = v43;
          uint64_t v41 = v43;
          uint64_t v26 = v43;
          if (v48 && !tiny_meta_header_is_free(v27))
          {
            uint64_t v5 = v37;
            uint64_t v6 = v36;
            int v7 = v34;
            uint64_t v8 = v27;
            malloc_zone_check_fail((uint64_t)tiny_check_fail_msg[0], (uint64_t)"%ld, counter=%d\n*** invariant broken for %p (previous %p is not a free pointer)\n");
            return 0;
          }
          if (v26 && !tiny_meta_header_is_free(v26))
          {
            uint64_t v5 = v37;
            uint64_t v6 = v36;
            int v7 = v34;
            uint64_t v8 = v26;
            malloc_zone_check_fail((uint64_t)tiny_check_fail_msg[0], (uint64_t)"%ld, counter=%d\n*** invariant broken for %p (next in free list %p is not a free pointer)\n");
            return 0;
          }
          unint64_t v28 = &v34[2 * tiny_meta_header];
          if (v28 != (void *)v33 && tiny_meta_header != (unsigned __int16)get_tiny_previous_free_msize((uint64_t)v28))
          {
            int v22 = tiny_check_fail_msg[0];
            uint64_t v14 = v37;
            uint64_t v15 = v36;
            uint64_t v16 = v34;
            uint64_t v17 = v28;
            uint64_t v18 = v38;
            uint64_t v19 = v38 + 16512;
            unint64_t v20 = v33;
            int v21 = tiny_meta_header;
            unsigned __int16 v23 = &v5;
            uint64_t v5 = v37;
            uint64_t v6 = v36;
            int v7 = v34;
            uint64_t v8 = (uint64_t)v28;
            uint64_t v9 = v38;
            uint64_t v10 = v38 + 16512;
            unint64_t v11 = v33;
            uint64_t v12 = tiny_meta_header;
            tiny_previous_free_mmach_vm_size_t size = (unsigned __int16)get_tiny_previous_free_msize((uint64_t)v28);
            malloc_zone_check_fail((uint64_t)v22, (uint64_t)"%ld, counter=%d\n*** invariant broken for tiny free %p followed by %p in region %p [%p-%p] (end marker incorrect) should be %d; in fact %d\n");
            return 0;
          }
          uint64_t v34 = v28;
        }
        else
        {
          int v32 = 0;
          if (tiny_meta_header > 0x3Fu)
          {
            uint64_t v5 = v37;
            uint64_t v6 = v36;
            int v7 = v34;
            uint64_t v8 = tiny_meta_header;
            malloc_zone_check_fail((uint64_t)tiny_check_fail_msg[0], (uint64_t)"%ld, counter=%d\n*** invariant broken for %p this tiny msize=%d - size is too large\n");
            return 0;
          }
          v34 += 2 * tiny_meta_header;
        }
      }
      if (v34 == (void *)v33)
      {
        if (v38 == v24[268]
          && v24[266]
          && ((unsigned __int16 tiny_meta_header = get_tiny_meta_header((uint64_t)v34, &v31), v31) || tiny_meta_header != 1))
        {
          uint64_t v5 = v37;
          uint64_t v6 = v36;
          int v7 = v34;
          uint64_t v8 = tiny_meta_header;
          uint64_t v9 = v31;
          malloc_zone_check_fail((uint64_t)tiny_check_fail_msg[0], (uint64_t)"%ld, counter=%d\n*** invariant broken for blocker block %p - %d %d\n");
          return 0;
        }
        else
        {
          return 1;
        }
      }
      else
      {
        uint64_t v5 = v37;
        uint64_t v6 = v36;
        int v7 = v34;
        uint64_t v8 = v33;
        malloc_zone_check_fail((uint64_t)tiny_check_fail_msg[0], (uint64_t)"%ld, counter=%d\n*** invariant broken for region end %p - %p\n");
        return 0;
      }
    }
  }
  else
  {
    return 1;
  }
}

uint64_t get_tiny_previous_free_msize(uint64_t a1)
{
  if (a1 == (a1 & 0xFFFFFFFFFFF00000) + 16512)
  {
    return 0;
  }
  else
  {
    unsigned __int16 v3 = (a1 - 16 - (((a1 - 16) & 0xFFFFFFFFFFF00000) + 16512)) >> 4;
    if ((*(_DWORD *)&stru_20.segname[8 * ((int)v3 >> 5) + ((a1 - 16) & 0xFFFFFFFFFFF00000)] >> (v3 & 0x1F))) {
      return 1;
    }
    else {
      return (unsigned __int16)_malloc_read_uint16_via_rsp((unsigned __int16 *)(a1 - 2));
    }
  }
}

uint64_t tiny_in_use_enumerator(unsigned int a1, uint64_t a2, int a3, uint64_t a4, uint64_t (*a5)(void, unint64_t, unint64_t, uint64_t *), void (*a6)(void, uint64_t, uint64_t, uint64_t *, uint64_t))
{
  unsigned int v41 = a1;
  uint64_t v40 = a2;
  int v39 = a3;
  uint64_t v38 = a4;
  uint64_t v37 = a5;
  unsigned int v36 = a6;
  unint64_t v35 = 0;
  unint64_t i = 0;
  uint64_t v33 = 0;
  unsigned int v32 = 0;
  unsigned int v31 = 0;
  unint64_t v30 = 0;
  unint64_t v28 = 0;
  uint64_t v29 = 0;
  unint64_t v26 = 0;
  uint64_t v27 = 0;
  unint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v23 = 0;
  uint64_t v22 = 0;
  uint64_t v21 = 0;
  unsigned int v20 = 0;
  unsigned int v19 = 0;
  int v18 = 0;
  unsigned __int16 v17 = 0;
  uint64_t v16 = 0;
  unsigned int v15 = 0;
  uint64_t v14 = 0;
  unint64_t v13 = 0;
  unsigned int v31 = a5(a1, *(void *)(a4 + 16536), 32uLL, (uint64_t *)&v13);
  if (!v31)
  {
    unint64_t v35 = *v13;
    unsigned int v31 = v37(v41, v13[2], 8 * v35, &v33);
    if (v31) {
      return v31;
    }
    if (v39)
    {
      unsigned int v31 = v37(v41, *(void *)(v38 + 17136), 2560 * *(int *)(v38 + 17120), &v14);
      if (v31) {
        return v31;
      }
    }
    for (unint64_t i = 0; ; ++i)
    {
      if (i >= v35) {
        return 0;
      }
      unint64_t v30 = *(void *)(v33 + 8 * i);
      if (v30 && v30 != -1)
      {
        unint64_t v28 = v30 + 16512;
        uint64_t v29 = 1032064;
        if ((v39 & 4) != 0)
        {
          unint64_t v26 = v30;
          uint64_t v27 = 16420;
          v36(v41, v40, 4, (uint64_t *)&v26, 1);
        }
        if ((v39 & 6) != 0)
        {
          unint64_t v24 = v28;
          uint64_t v25 = 1032064;
          v36(v41, v40, 2, (uint64_t *)&v24, 1);
        }
        if (v39) {
          break;
        }
      }
LABEL_51:
      ;
    }
    unsigned int v31 = v37(v41, v30, 0x100000uLL, &v23);
    if (v31) {
      return v31;
    }
    uint64_t v10 = (void *)(v14 + 2560 * *(int *)(v23 + 24));
    int v9 = 0;
    for (int j = 0; j < *(_DWORD *)(v38 + 17120); ++j)
    {
      if (v30 == *(void *)(v14 + 2560 * j + 24)) {
        ++v9;
      }
    }
    uint64_t v22 = v23 + 40;
    uint64_t v21 = v23 + 44;
    unsigned int v20 = 0;
    unsigned int v19 = 64504;
    if (v30 == v10[268])
    {
      v20 += v10[267] >> 4;
      v19 -= v10[266] >> 4;
    }
    while (1)
    {
      if (v20 >= v19)
      {
        if (v32)
        {
          v36(v41, v40, 1, v49, v32);
          unsigned int v32 = 0;
        }
        goto LABEL_51;
      }
      uint64_t v8 = 16 * v20;
      uint64_t v48 = v21;
      unsigned __int16 v47 = v20;
      LOBYTE(v18) = ((*(_DWORD *)(v21 + 8 * ((int)v47 >> 5)) >> (v47 & 0x1F)) & 1) == 0;
      int v18 = v18;
      if ((_BYTE)v18)
      {
        uint64_t v16 = v23 + 16512 + v8;
        uint64_t v46 = v22;
        unsigned __int16 v45 = v20 + 1;
        if ((*(_DWORD *)(v22 + 8 * ((int)v45 >> 5)) >> (v45 & 0x1F))) {
          unsigned __int16 v17 = 1;
        }
        else {
          unsigned __int16 v17 = *(_WORD *)(v16 + 16);
        }
      }
      else
      {
        int v7 = 0;
        if (v9)
        {
          for (int k = 0; k < *(_DWORD *)(v38 + 17120); ++k)
          {
            if (v30 + 16512 + v8 == *(void *)(v14 + 2560 * k + 8))
            {
              int v7 = 1;
              --v9;
              unsigned __int16 v17 = *(_WORD *)(v14 + 2560 * k + 16);
              break;
            }
          }
        }
        if (v7)
        {
          if (!v17) {
            return 5;
          }
          goto LABEL_48;
        }
        unsigned __int16 v17 = 1;
        unsigned int v15 = v20 + 1;
        while (1)
        {
          uint64_t v44 = v22;
          unsigned __int16 v43 = v15;
          if ((*(_DWORD *)(v22 + 8 * ((int)v43 >> 5)) >> (v43 & 0x1F))) {
            break;
          }
          ++v15;
          ++v17;
        }
        v49[2 * v32] = v30 + 16512 + v8;
        v49[2 * v32++ + 1] = 16 * v17;
        if (v32 >= 0x100)
        {
          v36(v41, v40, 1, v49, v32);
          unsigned int v32 = 0;
        }
      }
      if (!v17) {
        return 5;
      }
LABEL_48:
      v20 += v17;
    }
  }
  return v31;
}

uint64_t tiny_malloc_from_free_list(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 a4)
{
  unsigned int v14 = tiny_slot_from_msize(a4);
  uint64_t v17 = *(void *)(a2 + 32 + 8 * v14);
  if (v17)
  {
    unint64_t v24 = *(void **)(v17 + 8);
    if (v24)
    {
      *unint64_t v24 = *(void *)v17;
    }
    else
    {
      unsigned __int16 v4 = (_DWORD *)(a2 + 2088 + 4 * (v14 >> 5));
      *v4 &= ~(1 << (v14 & 0x1F));
    }
    *(void *)(a2 + 32 + 8 * v14) = v24;
    tiny_free_mach_vm_size_t size = a4;
    tiny_update_region_free_list_for_remove(v14, v17, (uint64_t)v24);
    if (!malloc_zero_policy) {
      _tiny_check_and_zero_inline_meta_from_freelist(a1, v17, a4);
    }
    goto LABEL_38;
  }
  unint64_t v11 = *(void *)(a2 + 2088) & ~((1 << v14) - 1);
  if (v11)
  {
    unsigned int v15 = __clz(__rbit64(v11));
    uint64_t v12 = (uint64_t *)(a2 + 536);
    unint64_t v13 = (uint64_t *)(a2 + 32 + 8 * v15);
    if ((unint64_t)v13 < a2 + 536)
    {
      uint64_t v17 = *v13;
      if (*v13)
      {
        uint64_t v23 = *(void **)(v17 + 8);
        *unint64_t v13 = (uint64_t)v23;
        if (v23)
        {
          *uint64_t v23 = *(void *)v17;
        }
        else
        {
          uint64_t v5 = (_DWORD *)(a2 + 2088 + 4 * (v15 >> 5));
          *v5 &= ~(1 << (v15 & 0x1F));
        }
        tiny_free_mach_vm_size_t size = get_tiny_free_size(v17);
        if (tiny_free_size < (int)a4) {
          malloc_zone_error(256, 1, (uint64_t)"Corruption of tiny freelist %p: size too small (%u/%u)\n");
        }
        tiny_update_region_free_list_for_remove(v15, v17, (uint64_t)v23);
        if (malloc_zero_policy) {
          goto LABEL_35;
        }
        goto LABEL_16;
      }
    }
    uint64_t v17 = *v12;
    if (*v12)
    {
      tiny_free_mach_vm_size_t size = get_tiny_free_size(v17);
      if (tiny_free_size < (int)a4) {
        malloc_zone_error(256, 1, (uint64_t)"Corruption of tiny freelist %p: size too small (%u/%u)\n");
      }
      uint64_t v22 = *(void **)(v17 + 8);
      if (tiny_free_size - a4 > 63)
      {
        uint64_t v10 = (_OWORD *)(v17 + 16 * a4);
        long long v9 = *(_OWORD *)v17;
        if (!malloc_zero_policy) {
          _tiny_check_and_zero_inline_meta_from_freelist(a1, v17, tiny_free_size);
        }
        *uint64_t v12 = (uint64_t)v10;
        if (v22) {
          *uint64_t v22 = v10;
        }
        *uint64_t v10 = v9;
        set_tiny_meta_header_free((uint64_t)v10, tiny_free_size - a4);
        tiny_free_mach_vm_size_t size = a4;
        tiny_update_region_free_list_for_remove(63, v17, (uint64_t)v10);
        goto LABEL_38;
      }
      if (v22) {
        *uint64_t v22 = *(void *)v17;
      }
      *uint64_t v12 = (uint64_t)v22;
      tiny_update_region_free_list_for_remove(v15, v17, (uint64_t)v22);
      if (malloc_zero_policy) {
        goto LABEL_35;
      }
LABEL_16:
      _tiny_check_and_zero_inline_meta_from_freelist(a1, v17, tiny_free_size);
LABEL_35:
      if (!tiny_free_size || tiny_free_size > (int)a4)
      {
        tiny_free_list_add_ptr(a1, a2, v17 + 16 * a4, tiny_free_size - a4);
        tiny_free_mach_vm_size_t size = a4;
      }
      goto LABEL_38;
    }
  }
  if (*(void *)(a2 + 2128) < (unint64_t)(16 * a4)) {
    return 0;
  }
  uint64_t v17 = *(void *)(a2 + 2144) + 0x100000 - *(void *)(a2 + 2128);
  *(void *)(a2 + 2128) -= 16 * a4;
  if (*(void *)(a2 + 2128)) {
    set_tiny_meta_header_in_use_1(v17 + 16 * a4);
  }
  tiny_free_mach_vm_size_t size = a4;
LABEL_38:
  ++*(_DWORD *)(a2 + 2168);
  *(void *)(a2 + 2152) += 16 * tiny_free_size;
  region_check_cookie(v17 & 0xFFFFFFFFFFF00000, (int *)((v17 & 0xFFFFFFFFFFF00000) + 16508));
  unint64_t v8 = v17 & 0xFFFFFFFFFFF00000;
  unint64_t v7 = *(int *)((char *)dword_10 + (v17 & 0xFFFFFFFFFFF00000)) + 16 * tiny_free_size;
  *(_DWORD *)(v8 + 16) = v7;
  ++*(_DWORD *)(v8 + 20);
  if (v7 >= 0xBCFA0) {
    *((unsigned char *)&stru_20.cmd + (v17 & 0xFFFFFFFFFFF00000)) = 0;
  }
  if (tiny_free_size <= 1u) {
    set_tiny_meta_header_in_use_1(v17);
  }
  else {
    set_tiny_meta_header_in_use(v17, tiny_free_size);
  }
  return v17;
}

uint64_t tiny_slot_from_msize(unsigned __int16 a1)
{
  if (a1 && a1 <= 0x3Fu) {
    return (a1 - 1);
  }
  else {
    return 63;
  }
}

uint64_t tiny_update_region_free_list_for_remove(uint64_t result, uint64_t a2, uint64_t a3)
{
  if ((unsigned __int16)((a2 - ((a2 & 0xFFFFFFFFFFF00000) + 16512)) >> 4) != *(unsigned __int16 *)((char *)&loc_3F28 + 4 * result + (a2 & 0xFFFFFFFFFFF00000))
                                                                              - 1)
  {
    __break(1u);
    JUMPOUT(0x931ACLL);
  }
  if (a3 && (a3 & 0xFFFFFFFFFFF00000) == (a2 & 0xFFFFFFFFFFF00000))
  {
    __int16 v3 = ((a3 - ((a3 & 0xFFFFFFFFFFF00000) + 16512)) >> 4) + 1;
    unsigned __int16 v4 = (unsigned __int16 *)((a2 & 0xFFFFFFFFFFF00000) + 16168 + 4 * result);
    if (*v4 == v4[1]) {
      *(_WORD *)((char *)&loc_3F28 + 4 * result + (a2 & 0xFFFFFFFFFFF00000) + 2) = v3;
    }
    *(_WORD *)((char *)&loc_3F28 + 4 * result + (a2 & 0xFFFFFFFFFFF00000)) = v3;
  }
  else
  {
    *(_WORD *)((char *)&loc_3F28 + 4 * result + (a2 & 0xFFFFFFFFFFF00000) + 2) = 0;
    *(_WORD *)((char *)&loc_3F28 + 4 * result + (a2 & 0xFFFFFFFFFFF00000)) = 0;
  }
  return result;
}

uint64_t tiny_get_region_from_depot(uint64_t a1, uint64_t a2, int a3, unsigned __int16 a4)
{
  uint64_t v16 = *(void *)(a1 + 624) - 2560;
  int v4 = 0;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v16, (unsigned int *)&v4, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
  if (v4) {
    os_unfair_lock_lock_with_options();
  }
  unsigned __int16 v14 = a4;
  while (1)
  {
    unint64_t msize_region = tiny_find_msize_region(a1, v16, 0xFFFFFFFFLL, v14);
    if (!msize_region)
    {
      int v5 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
      int v6 = v5;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v16, (unsigned int *)&v6, 0, memory_order_release, memory_order_relaxed);
      if (v6 != v5) {
        os_unfair_lock_unlock((os_unfair_lock_t)v16);
      }
      return 0;
    }
    if (!*(_DWORD *)(msize_region + 28)) {
      break;
    }
    if (++v14 > 0x3Fu)
    {
      int v7 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
      int v8 = v7;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v16, (unsigned int *)&v8, 0, memory_order_release, memory_order_relaxed);
      if (v8 != v7) {
        os_unfair_lock_unlock((os_unfair_lock_t)v16);
      }
      return 0;
    }
  }
  if (*(void *)msize_region) {
    *(void *)(*(void *)msize_region + 8) = *(void *)(msize_region + 8);
  }
  else {
    *(void *)(v16 + 2176) = *(void *)(msize_region + 8);
  }
  if (*(void *)(msize_region + 8)) {
    **(void **)(msize_region + 8) = *(void *)msize_region;
  }
  else {
    *(void *)(v16 + 2184) = *(void *)msize_region;
  }
  *(void *)unint64_t msize_region = 0;
  *(void *)(msize_region + 8) = 0;
  --*(_DWORD *)(v16 + 2172);
  int v13 = tiny_free_detach_region(a1, v16, msize_region);
  *(_DWORD *)(msize_region + 24) = a3;
  if (*(_DWORD *)(msize_region + 28))
  {
    __break(1u);
    JUMPOUT(0x936A8);
  }
  uint64_t v12 = tiny_free_reattach_region(a1, a2, msize_region);
  *(void *)(v16 + 2152) -= v12;
  *(void *)(v16 + 2160) -= 1032064;
  *(_DWORD *)(v16 + 2168) -= v13;
  *(void *)(a2 + 2152) += v12;
  *(void *)(a2 + 2160) += 1032064;
  *(_DWORD *)(a2 + 2168) += v13;
  if (*(void *)(a2 + 2184))
  {
    *(void *)unint64_t msize_region = *(void *)(a2 + 2184);
    *(void *)(*(void *)(a2 + 2184) + 8) = msize_region;
  }
  else
  {
    *(void *)(a2 + 2176) = msize_region;
    *(void *)unint64_t msize_region = 0;
  }
  *(void *)(a2 + 2184) = msize_region;
  *(void *)(msize_region + 8) = 0;
  *(unsigned char *)(msize_region + 32) = 0;
  ++*(_DWORD *)(a2 + 2172);
  int v9 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  int v10 = v9;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v16, (unsigned int *)&v10, 0, memory_order_release, memory_order_relaxed);
  if (v10 != v9) {
    os_unfair_lock_unlock((os_unfair_lock_t)v16);
  }
  return 1;
}

unint64_t tiny_malloc_from_region_no_lock(atomic_uint *a1, uint64_t a2, int a3, unsigned __int16 a4, unint64_t a5)
{
  if (*(void *)(a2 + 2128) || *(void *)(a2 + 2136)) {
    tiny_finalize_region((unint64_t)a1, a2);
  }
  *(_DWORD *)(a5 + 1616malloc_set_zone_name(zone, 0) = -16777216;
  *(_DWORD *)(a5 + 16164) = 0;
  *(_DWORD *)(a5 + 24) = a3;
  rack_region_insert(a1, a5);
  *(void *)(a2 + 2144) = a5;
  *(_DWORD *)(a5 + 16) = 16 * a4;
  *(_DWORD *)(a5 + 2malloc_set_zone_name(zone, 0) = 1;
  set_tiny_meta_header_in_use(a5 + 16512, a4);
  ++*(_DWORD *)(a2 + 2168);
  *(void *)(a2 + 2152) += 16 * a4;
  *(void *)(a2 + 2160) += 1032064;
  set_tiny_meta_header_in_use_1(a5 + 16512 + 16 * a4);
  *(void *)(a2 + 2128) = 16 * (64504 - a4);
  *(void *)(a2 + 2136) = 0;
  if (*(void *)(a2 + 2184))
  {
    *(void *)a5 = *(void *)(a2 + 2184);
    *(void *)(*(void *)(a2 + 2184) + 8) = a5;
  }
  else
  {
    *(void *)(a2 + 2176) = a5;
    *(void *)a5 = 0;
  }
  *(void *)(a2 + 2184) = a5;
  *(void *)(a5 + 8) = 0;
  *(unsigned char *)(a5 + 32) = 0;
  ++*(_DWORD *)(a2 + 2172);
  return a5 + 16512;
}

uint64_t tiny_size(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = a1;
  uint64_t v7 = a2;
  if (!tiny_region_for_ptr_no_lock(a1, a2)) {
    return 0;
  }
  if ((unsigned __int16)((v7 - ((v7 & 0xFFFFFFFFFFF00000) + 16512)) >> 4) < 0xFBF8uLL)
  {
    int v6 = 0;
    unsigned __int16 tiny_meta_header = get_tiny_meta_header(v7, &v6);
    if (!v6)
    {
      int v3 = *(int *)((char *)&dword_18 + (v7 & 0xFFFFFFFFFFF00000));
      if (v3 == -1)
      {
        for (int i = 0; i < *(_DWORD *)(v8 + 608); ++i)
        {
          if (tiny_meta_header < 0x10u && v7 == *(void *)(*(void *)(v8 + 624) + 2560 * i + 8)) {
            return 0;
          }
        }
      }
      else if (tiny_meta_header < 0x10u && v7 == *(void *)(*(void *)(v8 + 624) + 2560 * v3 + 8))
      {
        return 0;
      }
      return 16 * tiny_meta_header;
    }
    return 0;
  }
  else
  {
    malloc_printf("NO ZONE for ptr %p\n", (const void *)v7);
    return 0;
  }
}

void free_tiny_botch(uint64_t a1)
{
}

uint64_t tiny_batch_malloc(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4)
{
  unsigned __int16 v13 = (unint64_t)(a2 + 15) >> 4;
  unsigned int v12 = 0;
  unsigned int v11 = rack_get_thread_index(a1 + 16512) % *(_DWORD *)(a1 + 17120);
  int v10 = (atomic_uint *)(*(void *)(a1 + 17136) + 2560 * (int)v11);
  if (!v13) {
    unsigned __int16 v13 = 1;
  }
  int v4 = 0;
  atomic_compare_exchange_strong_explicit(v10, (unsigned int *)&v4, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
  if (v4) {
    os_unfair_lock_lock_with_options();
  }
  while (v12 < a4)
  {
    uint64_t v9 = tiny_malloc_from_free_list(a1 + 16512, (uint64_t)v10, v11, v13);
    if (!v9) {
      break;
    }
    int v5 = a3++;
    *int v5 = v9;
    ++v12;
  }
  int v6 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  int v7 = v6;
  atomic_compare_exchange_strong_explicit(v10, (unsigned int *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != v6) {
    os_unfair_lock_unlock((os_unfair_lock_t)v10);
  }
  return v12;
}

void tiny_batch_free(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v16 = a1;
  uint64_t v15 = a2;
  unsigned int v14 = a3;
  unsigned int v13 = 0;
  unint64_t v12 = 0;
  uint64_t v11 = 0;
  int v10 = 0;
  uint64_t v8 = 0;
  int v7 = -1;
  if (a3)
  {
    while (v13 < v14)
    {
      unint64_t v12 = *(void *)(v15 + 8 * v13);
      if (v12)
      {
        if (!v11 || v11 != (v12 & 0xFFFFFFFFFFF00000))
        {
          if (v8)
          {
            int v18 = v8;
            unsigned int v19 = v8;
            unint64_t v35 = v8;
            int v34 = 0;
            uint64_t v36 = 3;
            uint64_t v37 = 3;
            unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
            int v34 = *(void *)(StatusReg + 24);
            int v33 = 0;
            int v32 = v34;
            int v31 = 0;
            int v3 = v34;
            int v4 = v34;
            atomic_compare_exchange_strong_explicit(v8, (unsigned int *)&v4, 0, memory_order_release, memory_order_relaxed);
            if (v4 != v3) {
              int v32 = v4;
            }
            BOOL v30 = v4 == v3;
            if (v4 != v3) {
              os_unfair_lock_unlock((os_unfair_lock_t)v35);
            }
            uint64_t v8 = 0;
          }
          uint64_t v11 = tiny_region_for_ptr_no_lock(v16 + 16512, v12);
          if (v11)
          {
            uint64_t v8 = mag_lock_zine_for_region_trailer_0(*(void *)(v16 + 17136), v11, *(_DWORD *)(v11 + 24));
            int v7 = *(_DWORD *)(v11 + 24);
          }
        }
        if (!v11) {
          break;
        }
        if ((unsigned __int16)((v12 - ((v12 & 0xFFFFFFFFFFF00000) + 16512)) >> 4) >= 0xFBF8uLL) {
          break;
        }
        unsigned __int16 tiny_meta_header = get_tiny_meta_header(v12, &v10);
        if (v10) {
          break;
        }
        if (!malloc_zero_policy) {
          _platform_memset();
        }
        if (!tiny_free_no_lock(v16 + 16512, v8, v7, v11, v12, tiny_meta_header, 0))
        {
          uint64_t v8 = 0;
          uint64_t v11 = 0;
        }
        *(void *)(v15 + 8 * v13) = 0;
      }
      ++v13;
    }
    if (v8)
    {
      uint64_t v17 = v8;
      unsigned int v20 = v8;
      unint64_t v26 = v8;
      int v25 = 0;
      uint64_t v27 = 3;
      uint64_t v28 = 3;
      unint64_t v29 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      int v25 = *(void *)(v29 + 24);
      int v24 = 0;
      int v23 = v25;
      int v22 = 0;
      int v5 = v25;
      int v6 = v25;
      atomic_compare_exchange_strong_explicit(v8, (unsigned int *)&v6, 0, memory_order_release, memory_order_relaxed);
      if (v6 != v5) {
        int v23 = v6;
      }
      BOOL v21 = v6 == v5;
      if (v6 != v5) {
        os_unfair_lock_unlock((os_unfair_lock_t)v26);
      }
    }
  }
}

uint64_t print_tiny_free_list(unsigned int a1, unsigned int (*a2)(void, const void *, uint64_t, uint64_t *), void (*a3)(const char *, ...), const void *a4)
{
  unsigned int v16 = a1;
  uint64_t v15 = a2;
  unsigned int v14 = a3;
  unsigned int v13 = a4;
  unint64_t v12 = 0;
  uint64_t result = _simple_salloc();
  uint64_t v11 = result;
  int i = 0;
  if (result)
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
    if (v15(v16, v13, 768, &v9))
    {
      return ((uint64_t (*)(const char *))v14)("Failed to map tiny rack\n");
    }
    else
    {
      _simple_sappend();
      if (v15(v16, *(const void **)(v9 + 624), 2560 * *(int *)(v9 + 608), &v8))
      {
        return ((uint64_t (*)(const char *))v14)("Failed to map tiny rack magazines\n");
      }
      else
      {
        for (int i = -1; i < *(_DWORD *)(v9 + 608); ++i)
        {
          unsigned int v7 = 0;
          _simple_sprintf();
          while (v7 <= 0x3F)
          {
            unint64_t v12 = *(const void **)(v8 + 2560 * i + 32 + 8 * v7);
            if (v12)
            {
              free_list_count(v16, v15, v14, v9, v12);
              _simple_sprintf();
            }
            ++v7;
          }
          _simple_sappend();
        }
        int v6 = v14;
        int v5 = (const char *)_simple_string();
        v6("%s\n", v5);
        return _simple_sfree();
      }
    }
  }
  return result;
}

uint64_t free_list_count(unsigned int a1, unsigned int (*a2)(void, const void *, uint64_t, uint64_t *), void (*a3)(const char *, ...), uint64_t a4, const void *a5)
{
  unint64_t v12 = a5;
  unsigned int v11 = a1;
  int v10 = a2;
  uint64_t v9 = a3;
  uint64_t v8 = a4;
  unsigned int v7 = 0;
  uint64_t v6 = 0;
  while (v12)
  {
    ++v7;
    if (v10(v11, v12, 16, &v6))
    {
      v9("** invalid pointer in free list: %p\n", v12);
      return v7;
    }
    uint64_t v17 = v8;
    uint64_t v16 = v6 + 8;
    uint64_t v15 = 0;
    uint64_t v15 = *(const void **)(v6 + 8);
    unsigned int v14 = v15;
    uint64_t v20 = v8;
    unsigned int v19 = v15;
    int v18 = v15;
    unsigned int v13 = v15;
    unint64_t v12 = v15;
  }
  return v7;
}

uint64_t print_tiny_region(unsigned int a1, unsigned int (*a2)(void, void, void, void), uint64_t (*a3)(const char *, ...), int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int v30 = a1;
  unint64_t v29 = a2;
  uint64_t v28 = a3;
  int v27 = a4;
  uint64_t v26 = a5;
  uint64_t v25 = a6;
  uint64_t v24 = a7;
  int v23 = 0;
  int v22 = (char *)(a5 + 16512);
  BOOL v21 = (char *)(a5 + 16512 + a6);
  unint64_t v20 = a5 + 0x100000 - a7;
  uint64_t v19 = 0;
  int v18 = 0;
  uint64_t v15 = 0;
  if (a2(a1, a5 + 16512, 0x100000, &v19)) {
    return v28("Failed to map tiny region at %p\n", v22);
  }
  uint64_t v14 = v19 - (void)v22;
  uint64_t v13 = v19;
  if (v26 == -1)
  {
    uint64_t result = _simple_salloc();
    if (result)
    {
      _simple_sprintf();
      unsigned int v11 = (void (*)(const char *, ...))v28;
      uint64_t v8 = (const char *)_simple_string();
      v11("%s\n", v8);
      return _simple_sfree();
    }
  }
  else
  {
    _platform_memset();
    while ((unint64_t)v21 < v20)
    {
      unsigned __int16 tiny_meta_header_offset = get_tiny_meta_header_offset((uint64_t)v21, v14, &v18);
      if (v18)
      {
        if (!tiny_meta_header_offset && v21 == v22) {
          break;
        }
      }
      if (!tiny_meta_header_offset)
      {
        v28("*** error with %p: msize=%d\n", v21, 0);
        break;
      }
      if (v18)
      {
        if (((unint64_t)&v21[vm_page_size + 17] & ~(vm_page_size - 1)) < ((unint64_t)&v21[16 * tiny_meta_header_offset - 2] & ~(vm_page_size - 1))) {
          v15 += ((unint64_t)&v21[16 * tiny_meta_header_offset - 2] & ~(vm_page_size - 1))
        }
               - ((unint64_t)&v21[vm_page_size + 17] & ~(vm_page_size - 1));
      }
      else
      {
        if (tiny_meta_header_offset > 0x3Fu) {
          v28("*** error at %p msize for in_use is %d\n", v21, tiny_meta_header_offset);
        }
        if (tiny_meta_header_offset < 0x400u) {
          ++v31[tiny_meta_header_offset];
        }
        ++v23;
      }
      v21 += 16 * tiny_meta_header_offset;
    }
    uint64_t result = _simple_salloc();
    if (result)
    {
      int v12 = *(_DWORD *)(v13 + 24);
      _simple_sprintf();
      _simple_sprintf();
      _simple_sprintf();
      if (v24 || v25) {
        _simple_sprintf();
      }
      if (v12 != -1)
      {
        _simple_sprintf();
        tiny_region_below_recirc_threshold(v13);
      }
      _simple_sprintf();
      if (v27 >= 2 && v23)
      {
        _simple_sappend();
        for (unsigned int i = 0; i < 0x400; ++i)
        {
          if (v31[i]) {
            _simple_sprintf();
          }
        }
      }
      int v10 = (void (*)(const char *, ...))v28;
      uint64_t v9 = (const char *)_simple_string();
      v10("%s\n", v9);
      return _simple_sfree();
    }
  }
  return result;
}

uint64_t get_tiny_meta_header_offset(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unint64_t v11 = (a1 & 0xFFFFFFFFFFF00000) + 40 + a2;
  unsigned __int16 v10 = (a1 - ((a1 & 0xFFFFFFFFFFF00000) + 16512)) >> 4;
  unsigned __int16 v9 = 2 * ((int)v10 >> 5);
  int v8 = 1 << (v10 & 0x1F);
  *a3 = 0;
  if ((*(_DWORD *)(v11 + 4 * v9) & v8) != 0)
  {
    if ((*(_DWORD *)(v11 + 4 * (v9 + 1)) & v8) != 0)
    {
      unsigned int v7 = (unsigned int *)(v11 + 8 * ((int)v10 >> 5));
      if ((v10 & 0x1F) != 0) {
        unint64_t v6 = ((unint64_t)*v7 >> (v10 & 0x1F)) | ((unint64_t)v7[2] << (32 - (v10 & 0x1Fu))) | ((unint64_t)v7[4] << (64 - (v10 & 0x1Fu)));
      }
      else {
        unint64_t v6 = ((unint64_t)*v7 >> (v10 & 0x1F)) | ((unint64_t)v7[2] << (32 - (v10 & 0x1Fu)));
      }
      __int16 v3 = __clz(__rbit64(v6 >> 1));
      unsigned __int16 v4 = 0;
      if (v6 >> 1) {
        return (unsigned __int16)(v3 + 1);
      }
      return v4;
    }
    else
    {
      *a3 = 1;
      return (unsigned __int16)get_tiny_free_size_offset(a1, a2);
    }
  }
  else
  {
    return 0;
  }
}

BOOL tiny_region_below_recirc_threshold(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) < 0xBCFA0u;
}

uint64_t tiny_free_list_check(uint64_t a1, unsigned int a2)
{
  for (int i = -1; i < *(_DWORD *)(a1 + 608); ++i)
  {
    uint64_t v17 = (atomic_uint *)(*(void *)(a1 + 624) + 2560 * i);
    int v2 = 0;
    atomic_compare_exchange_strong_explicit(v17, (unsigned int *)&v2, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
    if (v2) {
      os_unfair_lock_lock_with_options();
    }
    int v16 = 0;
    uint64_t v15 = *(void *)(*(void *)(a1 + 624) + 2560 * i + 32 + 8 * a2);
    uint64_t v14 = 0;
    while (v15)
    {
      if (!tiny_meta_header_is_free(v15))
      {
        malloc_zone_check_fail((uint64_t)tiny_freelist_fail_msg, (uint64_t)" (slot=%u), counter=%d\n*** in-use ptr in free list slot=%u count=%d ptr=%p\n");
        int v3 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
        int v4 = v3;
        atomic_compare_exchange_strong_explicit(v17, (unsigned int *)&v4, 0, memory_order_release, memory_order_relaxed);
        if (v4 != v3) {
          os_unfair_lock_unlock((os_unfair_lock_t)v17);
        }
        return 0;
      }
      if ((v15 & 0xF) != 0)
      {
        malloc_zone_check_fail((uint64_t)tiny_freelist_fail_msg, (uint64_t)" (slot=%u), counter=%d\n*** unaligned ptr in free list slot=%u count=%d ptr=%p\n");
        int v5 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
        int v6 = v5;
        atomic_compare_exchange_strong_explicit(v17, (unsigned int *)&v6, 0, memory_order_release, memory_order_relaxed);
        if (v6 != v5) {
          os_unfair_lock_unlock((os_unfair_lock_t)v17);
        }
        return 0;
      }
      if (!tiny_region_for_ptr_no_lock(a1, v15))
      {
        malloc_zone_check_fail((uint64_t)tiny_freelist_fail_msg, (uint64_t)" (slot=%u), counter=%d\n*** ptr not in szone slot=%d  count=%u ptr=%p\n");
        int v7 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
        int v8 = v7;
        atomic_compare_exchange_strong_explicit(v17, (unsigned int *)&v8, 0, memory_order_release, memory_order_relaxed);
        if (v8 != v7) {
          os_unfair_lock_unlock((os_unfair_lock_t)v17);
        }
        return 0;
      }
      if (*(void *)v15 != v14)
      {
        malloc_zone_check_fail((uint64_t)tiny_freelist_fail_msg, (uint64_t)" (slot=%u), counter=%d\n*** previous incorrectly set slot=%u count=%d ptr=%p\n");
        int v9 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
        int v10 = v9;
        atomic_compare_exchange_strong_explicit(v17, (unsigned int *)&v10, 0, memory_order_release, memory_order_relaxed);
        if (v10 != v9) {
          os_unfair_lock_unlock((os_unfair_lock_t)v17);
        }
        return 0;
      }
      uint64_t v14 = v15;
      uint64_t v15 = *(void *)(v15 + 8);
      ++v16;
    }
    int v11 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    int v12 = v11;
    atomic_compare_exchange_strong_explicit(v17, (unsigned int *)&v12, 0, memory_order_release, memory_order_relaxed);
    if (v12 != v11) {
      os_unfair_lock_unlock((os_unfair_lock_t)v17);
    }
  }
  return 1;
}

uint64_t tiny_check(uint64_t a1, unsigned int a2)
{
  for (unint64_t i = 0; i < **(void **)(a1 + 24); ++i)
  {
    uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 24) + 16) + 8 * i);
    if (v8 != -1 && v8)
    {
      int v7 = mag_lock_zine_for_region_trailer_0(*(void *)(a1 + 624), v8, *(_DWORD *)(v8 + 24));
      if (!tiny_check_region(a1, v8, i, a2))
      {
        int v2 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
        int v3 = v2;
        atomic_compare_exchange_strong_explicit(v7, (unsigned int *)&v3, 0, memory_order_release, memory_order_relaxed);
        if (v3 != v2) {
          os_unfair_lock_unlock((os_unfair_lock_t)v7);
        }
        return 0;
      }
      int v4 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
      int v5 = v4;
      atomic_compare_exchange_strong_explicit(v7, (unsigned int *)&v5, 0, memory_order_release, memory_order_relaxed);
      if (v5 != v4) {
        os_unfair_lock_unlock((os_unfair_lock_t)v7);
      }
    }
  }
  for (unint64_t j = 0; j < 0x3F; ++j)
  {
    if (!tiny_free_list_check(a1, j)) {
      return 0;
    }
  }
  return 1;
}

unint64_t tiny_earlier_region_last_free(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v10 = 0;
  unsigned __int16 v9 = 0;
  uint64_t v8 = 0;
  for (uint64_t i = *(void *)(a1 + 2176); ; uint64_t i = *(void *)(i + 8))
  {
    BOOL v6 = 0;
    if (i)
    {
      BOOL v6 = 0;
      if (i != a2)
      {
        int v3 = v10++;
        BOOL v6 = v3 < 5;
      }
    }
    if (!v6) {
      break;
    }
    if (*(_WORD *)((char *)&loc_3F28 + 4 * a3 + (i & 0xFFFFFFFFFFF00000) + 2))
    {
      unsigned __int16 v9 = *(_WORD *)((char *)&loc_3F28 + 4 * a3 + (i & 0xFFFFFFFFFFF00000) + 2);
      uint64_t v8 = i;
    }
  }
  if (v9) {
    return (v8 & 0xFFFFFFFFFFF00000) + 16512 + 16 * (v9 - 1);
  }
  else {
    return 0;
  }
}

uint64_t get_tiny_free_size_offset(uint64_t a1, uint64_t a2)
{
  if (a1 + 16 >= (a1 & 0xFFFFFFFFFFF00000) + 0x100000) {
    return 1;
  }
  uint64_t v3 = a1 + 16;
  if (((*(_DWORD *)((v3 & 0xFFFFFFFFFFF00000)
                   + 40
                   + a2
                   + 8 * ((int)(unsigned __int16)((v3 - ((v3 & 0xFFFFFFFFFFF00000) + 16512)) >> 4) >> 5)) >> (((v3 - ((v3 & 0xFFFFFFFFFFF00000) + 16512)) >> 4) & 0x1F)) & 1) != 0)
    return 1;
  else {
    return *(unsigned __int16 *)(a1 + a2 + 16);
  }
}

BOOL tiny_magazine_below_recirc_threshold(uint64_t a1)
{
  unint64_t v4 = *(void *)(a1 + 2160);
  unint64_t v3 = *(void *)(a1 + 2152);
  BOOL v2 = 0;
  if (v4 - v3 > 0x179F40) {
    return v3 < v4 - (v4 >> 2);
  }
  return v2;
}

uint64_t tiny_free_do_recirc_to_depot(unint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a2 + 2184); ; uint64_t i = *(void *)i)
  {
    BOOL v9 = 0;
    if (i)
    {
      BOOL v8 = 1;
      if (*(unsigned char *)(i + 32)) {
        BOOL v8 = *(_DWORD *)(i + 28) != 0;
      }
      BOOL v9 = v8;
    }
    if (!v9) {
      break;
    }
  }
  if (i)
  {
    unint64_t v14 = i & 0xFFFFFFFFFFF00000;
    if ((i & 0xFFFFFFFFFFF00000) == *(void *)(a2 + 2144) && (*(void *)(a2 + 2128) || *(void *)(a2 + 2136))) {
      tiny_finalize_region(a1, a2);
    }
    if (*(void *)i) {
      *(void *)(*(void *)i + 8) = *(void *)(i + 8);
    }
    else {
      *(void *)(a2 + 2176) = *(void *)(i + 8);
    }
    if (*(void *)(i + 8)) {
      **(void **)(i + 8) = *(void *)i;
    }
    else {
      *(void *)(a2 + 2184) = *(void *)i;
    }
    *(void *)uint64_t i = 0;
    *(void *)(i + 8) = 0;
    --*(_DWORD *)(a2 + 2172);
    int v13 = tiny_free_detach_region(a1, a2, v14);
    uint64_t v12 = *(void *)(a1 + 624) - 2560;
    int v2 = 0;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v12, (unsigned int *)&v2, *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24), memory_order_acquire, memory_order_acquire);
    if (v2) {
      os_unfair_lock_lock_with_options();
    }
    *(int *)((char *)&dword_18 + (i & 0xFFFFFFFFFFF00000)) = -1;
    *(_DWORD *)(i + 28) = 0;
    uint64_t v11 = tiny_free_reattach_region(a1, v12, v14);
    *(void *)(a2 + 2152) -= v11;
    *(void *)(a2 + 2160) -= 1032064;
    *(_DWORD *)(a2 + 2168) -= v13;
    int v3 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    int v4 = v3;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)a2, (unsigned int *)&v4, 0, memory_order_release, memory_order_relaxed);
    if (v4 != v3) {
      os_unfair_lock_unlock((os_unfair_lock_t)a2);
    }
    *(void *)(v12 + 2152) += v11;
    *(void *)(v12 + 2160) += 1032064;
    *(_DWORD *)(v12 + 2168) += v13;
    if (*(void *)(v12 + 2184))
    {
      *(void *)uint64_t i = *(void *)(v12 + 2184);
      *(void *)(*(void *)(v12 + 2184) + 8) = i;
    }
    else
    {
      *(void *)(v12 + 2176) = i;
      *(void *)uint64_t i = 0;
    }
    *(void *)(v12 + 2184) = i;
    *(void *)(i + 8) = 0;
    *(unsigned char *)(i + 32) = 0;
    ++*(_DWORD *)(v12 + 2172);
    if ((aggressive_madvise_enabled & 1) == 0) {
      tiny_free_scan_madvise_free(a1, (atomic_uint *)v12, v14);
    }
    mach_vm_address_t v10 = tiny_free_try_depot_unmap_no_lock(a1, v12, i);
    int v5 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    int v6 = v5;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)v12, (unsigned int *)&v6, 0, memory_order_release, memory_order_relaxed);
    if (v6 != v5) {
      os_unfair_lock_unlock((os_unfair_lock_t)v12);
    }
    if (v10)
    {
      if ((*(_DWORD *)(a1 + 620) & 4) != 0) {
        mvm_deallocate_pages(v10, 0x100000uLL, *(_WORD *)(a1 + 620) & 0xFFFE);
      }
      else {
        mvm_deallocate_pages(v10, 0x100000uLL, *(_WORD *)(a1 + 620) & 0xFFFC);
      }
    }
    return 0;
  }
  else
  {
    return 1;
  }
}

unint64_t tiny_free_try_depot_unmap_no_lock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a3 + 16) || *(int *)(a3 + 28) > 0 || *(_DWORD *)(a2 + 2172) < recirc_retained_regions) {
    return 0;
  }
  if (*(void *)a3) {
    *(void *)(*(void *)a3 + 8) = *(void *)(a3 + 8);
  }
  else {
    *(void *)(a2 + 2176) = *(void *)(a3 + 8);
  }
  if (*(void *)(a3 + 8)) {
    **(void **)(a3 + 8) = *(void *)a3;
  }
  else {
    *(void *)(a2 + 2184) = *(void *)a3;
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  --*(_DWORD *)(a2 + 2172);
  unint64_t v4 = a3 & 0xFFFFFFFFFFF00000;
  if (tiny_free_detach_region(a1, a2, a3 & 0xFFFFFFFFFFF00000))
  {
    malloc_zone_error(*(_DWORD *)(a1 + 620), 1, (uint64_t)"tiny_free_try_depot_unmap_no_lock objects_in_use not zero: %d\n");
    return 0;
  }
  else if (rack_region_remove(a1, v4, a3))
  {
    *(void *)(a2 + 2160) -= 1032064;
    return v4;
  }
  else
  {
    return 0;
  }
}

uint64_t zero_on_free_should_sample()
{
  char v2 = 0;
  if (malloc_zero_on_free_sample_period)
  {
    uint64_t v1 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 888) + 1;
    if (v1 == malloc_zero_on_free_sample_period)
    {
      char v2 = 1;
      uint64_t v1 = 0;
    }
    *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 888) = v1;
  }
  return v2 & 1;
}

void _tiny_check_and_zero_inline_meta_from_freelist(uint64_t a1, uint64_t a2, unsigned __int16 a3)
{
  *(_OWORD *)a2 = 0uLL;
  if (a3 <= 1u)
  {
    if (!a3 && *(_WORD *)(a2 + 16)) {
      malloc_zone_error(256, 1, (uint64_t)"Corruption at %p: unexpected nonzero msize %u\n");
    }
  }
  else
  {
    unsigned __int16 v4 = *(_WORD *)(a2 + 16);
    uint64_t v3 = a2 + 16 * a3;
    if (v4 == *(unsigned __int16 *)(v3 - 2))
    {
      if (v4 != a3) {
        malloc_zone_error(256, 1, (uint64_t)"Corruption at %p: unexpected msizes %u/%u\n");
      }
    }
    else
    {
      malloc_zone_error(256, 1, (uint64_t)"Corruption of free object %p: msizes %u/%u disagree\n");
    }
    *(_WORD *)(a2 + 16) = 0;
    *(_WORD *)(v3 - 2) = 0;
  }
}

uint64_t _malloc_read_uint16_via_rsp(unsigned __int16 *a1)
{
  return *a1;
}

unint64_t tiny_find_msize_region(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 a4)
{
  unsigned int v8 = tiny_slot_from_msize(a4);
  uint64_t v9 = *(void *)(a2 + 32 + 8 * v8);
  if (v9) {
    return v9 & 0xFFFFFFFFFFF00000;
  }
  unint64_t v5 = *(void *)(a2 + 2088) & ~((1 << v8) - 1);
  if (!v5) {
    return 0;
  }
  int v6 = (void *)(a2 + 536);
  int v7 = (void *)(a2 + 32 + 8 * __clz(__rbit64(v5)));
  if ((unint64_t)v7 < a2 + 536 && *v7) {
    return *v7 & 0xFFFFFFFFFFF00000;
  }
  if (*v6) {
    return *v6 & 0xFFFFFFFFFFF00000;
  }
  return 0;
}

uint64_t _malloc_default_debug_sleep_time()
{
  if (malloc_error_sleep) {
    return 3600;
  }
  else {
    return 0;
  }
}

char *malloc_print_configure()
{
  uint64_t v1 = getenv("MallocDebugReport");
  if (v1)
  {
    if (_platform_strcmp())
    {
      if (_platform_strcmp())
      {
        if (_platform_strcmp())
        {
          debug_mode = 2;
          malloc_printf("Unrecognized value for MallocDebugReport (%s) - using 'stderr'\n", v1);
        }
        else
        {
          debug_mode = 0;
        }
      }
      else
      {
        debug_mode = 1;
      }
    }
    else
    {
      debug_mode = 2;
    }
  }
  else if (isatty(2))
  {
    debug_mode = 2;
  }
  if (getenv("MallocErrorStop")) {
    malloc_error_stop = 1;
  }
  uint64_t result = getenv("MallocErrorSleep");
  if (result) {
    malloc_error_sleep = 1;
  }
  return result;
}

void malloc_printf(const char *format, ...)
{
}

void malloc_vreport(__int16 a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = 0;
  if (_simple_salloc())
  {
    if ((a1 & 0x20) == 0)
    {
      _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      getprogname();
      getpid();
      _simple_sprintf();
    }
    if (a3) {
      _simple_sprintf();
    }
    _simple_vsprintf();
    if ((a1 & 0x100) != 0) {
      _malloc_append_backtrace();
    }
    if ((a1 & 0x200) == 0 && (debug_mode == 2 || debug_mode == 1 && (a1 & 0x40) != 0)) {
      _simple_put();
    }
    if (!_malloc_no_asl_log && (a1 & 0x10) == 0)
    {
      _simple_string();
      _simple_asl_log();
    }
    if ((a1 & 0x40) != 0) {
      uint64_t v6 = _simple_string();
    }
    else {
      _simple_sfree();
    }
  }
  else
  {
    if ((a1 & 0x200) == 0 && (debug_mode == 2 || debug_mode == 1 && (a1 & 0x40) != 0))
    {
      if ((a1 & 0x20) == 0)
      {
        _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
        getprogname();
        getpid();
        _simple_dprintf();
      }
      if (a3) {
        _simple_dprintf();
      }
      _simple_vdprintf();
    }
    if ((a1 & 0x40) != 0) {
      uint64_t v6 = a5;
    }
  }
  if ((a1 & 0xC0) != 0)
  {
    _malloc_put(a1, "*** set a breakpoint in malloc_error_break to debug\n");
    malloc_error_break();
    if (malloc_error_stop)
    {
      _malloc_put(5, "*** sending SIGSTOP to help debug\n");
      pid_t v5 = getpid();
      kill(v5, 17);
    }
    else if (a2)
    {
      _malloc_put(5, "*** sleeping to help debug\n");
      sleep(a2);
    }
  }
  if ((a1 & 0x40) != 0)
  {
    qword_C0118 = v6;
    abort();
  }
}

void _malloc_append_backtrace()
{
  bzero(array, 0x190uLL);
  int v0 = backtrace(array, 50);
  *(void *)mach_vm_size_t size = v0;
  if (v0)
  {
    backtrace_image_offsets(array, image_offsets, v0);
    for (uint64_t i = 0; i < *(uint64_t *)size; ++i)
    {
      *(void *)uu1 = 0;
      uint64_t v5 = 0;
      if (i && !uuid_compare(uu1, image_offsets[i].uuid))
      {
        _simple_sappend();
      }
      else
      {
        uuid_copy(uu1, image_offsets[i].uuid);
        memset(__b, 0, sizeof(__b));
        uuid_unparse(image_offsets[i].uuid, __b);
        _simple_sappend();
      }
      _simple_sprintf();
    }
  }
}

ssize_t _malloc_put(__int16 a1, const void *a2)
{
  ssize_t result = _simple_salloc();
  if (result)
  {
    if ((a1 & 0x20) == 0)
    {
      _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      getprogname();
      getpid();
      _simple_sprintf();
    }
    _simple_sprintf();
    if ((a1 & 0x200) == 0 && (debug_mode == 2 || debug_mode == 1 && (a1 & 0x40) != 0)) {
      _simple_put();
    }
    if ((_malloc_no_asl_log & ((a1 & 0x10) == 0)) != 0)
    {
      _simple_string();
      _simple_asl_log();
    }
    return _simple_sfree();
  }
  else if ((a1 & 0x200) == 0 && (debug_mode == 2 || debug_mode == 1 && (a1 & 0x40) != 0))
  {
    if ((a1 & 0x20) == 0)
    {
      _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      getprogname();
      getpid();
      _simple_dprintf();
    }
    int __fd = malloc_debug_file;
    size_t v3 = _platform_strlen();
    return write(__fd, a2, v3);
  }
  return result;
}

void malloc_report(__int16 a1, uint64_t a2)
{
  unsigned int v2 = _malloc_default_debug_sleep_time();
  malloc_vreport(a1, v2, 0, 0, a2);
}

void malloc_report_simple(uint64_t a1)
{
  unsigned int v1 = _malloc_default_debug_sleep_time();
  malloc_vreport(48, v1, 0, 0, a1);
}

void malloc_zone_error(__int16 a1, char a2, uint64_t a3)
{
  __int16 v4 = 144;
  if ((a2 & 1) != 0 && (a1 & 0x100) != 0 || (a1 & 0x40) != 0) {
    __int16 v4 = 64;
  }
  unsigned int v3 = _malloc_default_debug_sleep_time();
  malloc_vreport(v4 | 3, v3, 0, 0, a3);
}

void internal_check()
{
  unsigned int v0 = malloc_check_counter++;
  if (v0 >= malloc_check_start)
  {
    if (malloc_zone_check(0))
    {
      if (!frames) {
        vm_allocate(mach_task_self_, (vm_address_t *)&frames, vm_page_size, 1);
      }
      thread_stack_pcs();
    }
    malloc_check_start += malloc_check_each;
  }
}

void tiny_zero_corruption_abort(unsigned char *a1)
{
  while (!*a1)
    ++a1;
  malloc_zone_error(256, 1, (uint64_t)"Corruption detected in block %p of size %u at offset %u, first 32 bytes at that offset are %02X %02X %02X %02X %02X %02X %02X %02X | %02X %02X %02X %02X %02X %02X %02X %02X | %02X %02X %02X %02X %02X %02X %02X %02X | %02X %02X %02X %02X %02X %02X %02X %02X\n");
}

int32_t NSVersionOfLinkTimeLibrary(const char *libraryName)
{
  return _NSVersionOfLinkTimeLibrary(libraryName);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

char ***_NSGetEnviron(void)
{
  return __NSGetEnviron();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

int *__error(void)
{
  return ___error();
}

uint64_t __ulock_wait()
{
  return ___ulock_wait();
}

uint64_t __ulock_wake()
{
  return ___ulock_wake();
}

const mach_header *__cdecl _dyld_get_image_header(uint32_t image_index)
{
  return __dyld_get_image_header(image_index);
}

uint64_t _dyld_get_image_slide()
{
  return __dyld_get_image_slide();
}

uint64_t _dyld_is_memory_immutable()
{
  return __dyld_is_memory_immutable();
}

uint64_t _os_once()
{
  return __os_once();
}

uint64_t _platform_bzero()
{
  return __platform_bzero();
}

uint64_t _platform_memcmp_zero_aligned8()
{
  return __platform_memcmp_zero_aligned8();
}

uint64_t _platform_memmove()
{
  return __platform_memmove();
}

uint64_t _platform_memset()
{
  return __platform_memset();
}

uint64_t _platform_strchr()
{
  return __platform_strchr();
}

uint64_t _platform_strcmp()
{
  return __platform_strcmp();
}

uint64_t _platform_strcpy()
{
  return __platform_strcpy();
}

uint64_t _platform_strlcpy()
{
  return __platform_strlcpy();
}

uint64_t _platform_strlen()
{
  return __platform_strlen();
}

uint64_t _platform_strncmp()
{
  return __platform_strncmp();
}

uint64_t _platform_strstr()
{
  return __platform_strstr();
}

uint64_t _simple_asl_log()
{
  return __simple_asl_log();
}

uint64_t _simple_dprintf()
{
  return __simple_dprintf();
}

uint64_t _simple_getenv()
{
  return __simple_getenv();
}

uint64_t _simple_put()
{
  return __simple_put();
}

uint64_t _simple_salloc()
{
  return __simple_salloc();
}

uint64_t _simple_sappend()
{
  return __simple_sappend();
}

uint64_t _simple_sfree()
{
  return __simple_sfree();
}

uint64_t _simple_sprintf()
{
  return __simple_sprintf();
}

uint64_t _simple_string()
{
  return __simple_string();
}

uint64_t _simple_vdprintf()
{
  return __simple_vdprintf();
}

uint64_t _simple_vsprintf()
{
  return __simple_vsprintf();
}

void abort(void)
{
}

void *__cdecl j__aligned_alloc(size_t __alignment, size_t __size)
{
  return aligned_alloc(__alignment, __size);
}

uint32_t arc4random(void)
{
  return _arc4random();
}

void arc4random_buf(void *__buf, size_t __nbytes)
{
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return _arc4random_uniform(__upper_bound);
}

int backtrace(void **a1, int a2)
{
  return _backtrace(a1, a2);
}

void backtrace_image_offsets(void *const *array, image_offset *image_offsets, int size)
{
}

void bzero(void *a1, size_t a2)
{
}

void *__cdecl j__calloc(size_t __count, size_t __size)
{
  return calloc(__count, __size);
}

uint64_t csops()
{
  return _csops();
}

uint64_t dyld_process_is_restricted()
{
  return _dyld_process_is_restricted();
}

void j__free(void *a1)
{
}

int getentropy(void *buffer, size_t size)
{
  return _getentropy(buffer, size);
}

char *__cdecl getenv(const char *a1)
{
  return _getenv(a1);
}

pid_t getpid(void)
{
  return _getpid();
}

const char *getprogname(void)
{
  return _getprogname();
}

int isatty(int a1)
{
  return _isatty(a1);
}

int issetugid(void)
{
  return _issetugid();
}

uint64_t kdebug_trace()
{
  return _kdebug_trace();
}

int kill(pid_t a1, int a2)
{
  return _kill(a1, a2);
}

uint64_t mach_absolute_time(void)
{
  return _mach_absolute_time();
}

uint64_t mach_task_is_self()
{
  return _mach_task_is_self();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return _mach_timebase_info(info);
}

kern_return_t mach_vm_allocate(vm_map_t target, mach_vm_address_t *address, mach_vm_size_t size, int flags)
{
  return _mach_vm_allocate(target, address, size, flags);
}

kern_return_t mach_vm_deallocate(vm_map_t target, mach_vm_address_t address, mach_vm_size_t size)
{
  return _mach_vm_deallocate(target, address, size);
}

kern_return_t mach_vm_map(vm_map_t target_task, mach_vm_address_t *address, mach_vm_size_t size, mach_vm_offset_t mask, int flags, mem_entry_name_port_t object, memory_object_offset_t offset, BOOLean_t copy, vm_prot_t cur_protection, vm_prot_t max_protection, vm_inherit_t inheritance)
{
  return _mach_vm_map(target_task, address, size, mask, flags, object, offset, copy, cur_protection, max_protection, inheritance);
}

kern_return_t mach_vm_page_range_query(vm_map_read_t target_map, mach_vm_offset_t address, mach_vm_size_t size, mach_vm_address_t dispositions, mach_vm_size_t *dispositions_count)
{
  return _mach_vm_page_range_query(target_map, address, size, dispositions, dispositions_count);
}

kern_return_t mach_vm_protect(vm_map_t target_task, mach_vm_address_t address, mach_vm_size_t size, BOOLean_t set_maximum, vm_prot_t new_protection)
{
  return _mach_vm_protect(target_task, address, size, set_maximum, new_protection);
}

uint64_t mach_vm_range_create()
{
  return _mach_vm_range_create();
}

uint64_t mach_vm_reclaim_is_available()
{
  return _mach_vm_reclaim_is_available();
}

uint64_t mach_vm_reclaim_is_reclaimed()
{
  return _mach_vm_reclaim_is_reclaimed();
}

uint64_t mach_vm_reclaim_mark_free()
{
  return _mach_vm_reclaim_mark_free();
}

uint64_t mach_vm_reclaim_mark_free_with_id()
{
  return _mach_vm_reclaim_mark_free_with_id();
}

uint64_t mach_vm_reclaim_mark_used()
{
  return _mach_vm_reclaim_mark_used();
}

uint64_t mach_vm_reclaim_ringbuffer_init()
{
  return _mach_vm_reclaim_ringbuffer_init();
}

uint64_t mach_vm_reclaim_synchronize()
{
  return _mach_vm_reclaim_synchronize();
}

uint64_t mach_vm_reclaim_update_kernel_accounting()
{
  return _mach_vm_reclaim_update_kernel_accounting();
}

int madvise(void *a1, size_t a2, int a3)
{
  return _madvise(a1, a2, a3);
}

void *__cdecl j__malloc(size_t __size)
{
  return malloc(__size);
}

malloc_zone_t *j__malloc_default_zone(void)
{
  return malloc_default_zone();
}

void *__cdecl j__malloc_zone_calloc(malloc_zone_t *zone, size_t num_items, size_t size)
{
  return malloc_zone_calloc(zone, num_items, size);
}

void *__cdecl j__malloc_zone_malloc(malloc_zone_t *zone, size_t size)
{
  return malloc_zone_malloc(zone, size);
}

void *__cdecl j__malloc_zone_memalign(malloc_zone_t *zone, size_t alignment, size_t size)
{
  return malloc_zone_memalign(zone, alignment, size);
}

void *__cdecl j__malloc_zone_realloc(malloc_zone_t *zone, void *ptr, size_t size)
{
  return malloc_zone_realloc(zone, ptr, size);
}

void *__cdecl j__malloc_zone_valloc(malloc_zone_t *zone, size_t size)
{
  return malloc_zone_valloc(zone, size);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return _memset(__b, __c, __len);
}

int mprotect(void *a1, size_t a2, int a3)
{
  return _mprotect(a1, a2, a3);
}

void os_unfair_lock_assert_owner(os_unfair_lock_t lock)
{
}

uint64_t os_unfair_lock_lock_with_options()
{
  return _os_unfair_lock_lock_with_options();
}

BOOL os_unfair_lock_trylock(os_unfair_lock_t lock)
{
  return _os_unfair_lock_trylock(lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

int j__posix_memalign(void **__memptr, size_t __alignment, size_t __size)
{
  return posix_memalign(__memptr, __alignment, __size);
}

int printf(const char *a1, ...)
{
  return _printf(a1);
}

void *__cdecl j__realloc(void *__ptr, size_t __size)
{
  return realloc(__ptr, __size);
}

unsigned int sleep(unsigned int a1)
{
  return _sleep(a1);
}

char *__cdecl strcat(char *__s1, const char *__s2)
{
  return _strcat(__s1, __s2);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return _strtol(__str, __endptr, __base);
}

unint64_t strtoul(const char *__str, char **__endptr, int __base)
{
  return _strtoul(__str, __endptr, __base);
}

unint64_t strtoull(const char *__str, char **__endptr, int __base)
{
  return _strtoull(__str, __endptr, __base);
}

unint64_t strtoull_l(const char *a1, char **a2, int a3, locale_t a4)
{
  return _strtoull_l(a1, a2, a3, a4);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return _sysctlbyname(a1, a2, a3, a4, a5);
}

uint64_t thread_stack_pcs()
{
  return _thread_stack_pcs();
}

kern_return_t thread_switch(mach_port_name_t thread_name, int option, mach_msg_timeout_t option_time)
{
  return _thread_switch(thread_name, option, option_time);
}

int unsetenv(const char *a1)
{
  return _unsetenv(a1);
}

int uuid_compare(const uuid_t uu1, const uuid_t uu2)
{
  return _uuid_compare(uu1, uu2);
}

void uuid_copy(uuid_t dst, const uuid_t src)
{
}

void uuid_unparse(const uuid_t uu, uuid_string_t out)
{
}

void *__cdecl j__valloc(size_t a1)
{
  return valloc(a1);
}

kern_return_t vm_allocate(vm_map_t target_task, vm_address_t *address, vm_size_t size, int flags)
{
  return _vm_allocate(target_task, address, size, flags);
}

kern_return_t vm_purgable_control(vm_map_t target_task, vm_address_t address, vm_purgable_t control, int *state)
{
  return _vm_purgable_control(target_task, address, control, state);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return _write(__fd, __buf, __nbyte);
}