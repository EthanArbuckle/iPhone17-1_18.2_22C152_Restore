void sub_1900C87C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    v12 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int8 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2)) {
            return 0;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  v15 = operator new(0x28uLL);
  void *v15 = 0;
  v15[1] = v8;
  v16 = (std::string *)(v15 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v15[4] = *(void *)(a3 + 16);
  }
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    BOOL v19 = 1;
    if (v9 >= 3) {
      BOOL v19 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v9);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>>>::__rehash<true>(a1, v22);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v23 = *(void *)a1;
  v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    void *v15 = *v24;
LABEL_41:
    void *v24 = v15;
    goto LABEL_42;
  }
  void *v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v23 + 8 * v3) = a1 + 16;
  if (*v15)
  {
    unint64_t v25 = *(void *)(*v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v25 >= v9) {
        v25 %= v9;
      }
    }
    else
    {
      v25 &= v9 - 1;
    }
    v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_41;
  }
LABEL_42:
  ++*(void *)(a1 + 24);
  return 1;
}

void sub_1900C8C84(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::vector<std::string>>>::push_back[abi:ne180100](void ***a1, uint64_t a2)
{
  v4 = a1[1];
  unint64_t v5 = (unint64_t)a1[2];
  if ((unint64_t)v4 >= v5)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v4 - *a1);
    unint64_t v8 = v7 + 1;
    if (v7 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (void)*a1) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
    }
    if (v8 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v10 = 3 * v8;
    unint64_t v11 = (char *)operator new(24 * v8);
    v12 = &v11[24 * v7];
    v13 = (void **)&v11[8 * v10];
    *(_OWORD *)v12 = *(_OWORD *)a2;
    *((void *)v12 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    v6 = (void **)(v12 + 24);
    unint64_t v14 = *a1;
    v15 = a1[1];
    if (v15 == *a1)
    {
      *a1 = (void **)v12;
      a1[1] = v6;
      a1[2] = v13;
    }
    else
    {
      do
      {
        *((void *)v12 - 3) = 0;
        *((void *)v12 - 2) = 0;
        v12 -= 24;
        *((void *)v12 + 2) = 0;
        long long v16 = *(_OWORD *)(v15 - 3);
        v15 -= 3;
        *(_OWORD *)v12 = v16;
        *((void *)v12 + 2) = v15[2];
        void *v15 = 0;
        v15[1] = 0;
        v15[2] = 0;
      }
      while (v15 != v14);
      v15 = *a1;
      float v17 = a1[1];
      *a1 = (void **)v12;
      a1[1] = v6;
      a1[2] = v13;
      while (v17 != v15)
      {
        v17 -= 3;
        float v18 = v17;
        std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v18);
      }
    }
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    *v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
    *(_OWORD *)v4 = *(_OWORD *)a2;
    v4[2] = *(void **)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    v6 = v4 + 3;
  }
  a1[1] = v6;
}

uint64_t std::pair<std::string const,std::shared_ptr<CA::ADMPackFormat>>::~pair(uint64_t a1)
{
  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

std::string *std::pair<std::string const,std::shared_ptr<CA::ADMTrackFormat>>::pair[abi:ne180100]<std::string&,std::shared_ptr<CA::ADMTrackFormat>&,0>(std::string *this, long long *a2, std::string::size_type *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  std::string::size_type v6 = a3[1];
  this[1].__r_.__value_.__r.__words[0] = *a3;
  this[1].__r_.__value_.__l.__size_ = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<CA::ADMTrackFormat>>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    v12 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int8 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2)) {
            return 0;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  v15 = (void *)(a1 + 16);
  long long v16 = (char *)operator new(0x38uLL);
  v28[0] = v16;
  v28[1] = a1 + 16;
  char v29 = 0;
  *(void *)long long v16 = 0;
  *((void *)v16 + 1) = v8;
  float v17 = (std::string *)(v16 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v16 + 4) = *(void *)(a3 + 16);
  }
  *(_OWORD *)(v16 + 40) = *(_OWORD *)(a3 + 24);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  char v29 = 1;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    BOOL v20 = 1;
    if (v9 >= 3) {
      BOOL v20 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v9);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>>>::__rehash<true>(a1, v23);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v24 = *(void *)a1;
  unint64_t v25 = *(void **)(*(void *)a1 + 8 * v3);
  if (v25)
  {
    *(void *)long long v16 = *v25;
LABEL_41:
    *unint64_t v25 = v16;
    goto LABEL_42;
  }
  *(void *)long long v16 = *v15;
  void *v15 = v16;
  *(void *)(v24 + 8 * v3) = v15;
  if (*(void *)v16)
  {
    unint64_t v26 = *(void *)(*(void *)v16 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v26 >= v9) {
        v26 %= v9;
      }
    }
    else
    {
      v26 &= v9 - 1;
    }
    unint64_t v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_41;
  }
LABEL_42:
  v28[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,void *>>>>::reset[abi:ne180100]((uint64_t)v28);
  return 1;
}

void sub_1900C9138(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::vector<std::shared_ptr<CA::ADMTrackFormat>>::push_back[abi:ne180100](void *result, uint64_t a2)
{
  unint64_t v3 = result;
  v4 = result + 2;
  unint64_t v5 = result[2];
  std::string::size_type v6 = (_OWORD *)result[1];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = ((uint64_t)v6 - *result) >> 4;
    if ((unint64_t)(v8 + 1) >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v5 - *result;
    uint64_t v10 = v9 >> 3;
    if (v9 >> 3 <= (unint64_t)(v8 + 1)) {
      uint64_t v10 = v8 + 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    v15[4] = v4;
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v11);
    v13 = &v12[16 * v8];
    v15[0] = v12;
    v15[1] = v13;
    v15[3] = &v12[16 * v14];
    *(_OWORD *)v13 = *(_OWORD *)a2;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    v15[2] = v13 + 16;
    std::vector<std::shared_ptr<unsigned char []>>::__swap_out_circular_buffer(v3, v15);
    unint64_t v7 = (_OWORD *)v3[1];
    result = (void *)std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)v15);
  }
  else
  {
    *std::string::size_type v6 = *(_OWORD *)a2;
    unint64_t v7 = v6 + 1;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  v3[1] = v7;
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMStreamFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMStreamFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMStreamFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMStreamFormat>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<CA::ADMStreamFormat>>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    v12 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int8 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2)) {
            return 0;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  v15 = (void *)(a1 + 16);
  long long v16 = (char *)operator new(0x38uLL);
  v28[0] = v16;
  v28[1] = a1 + 16;
  char v29 = 0;
  *(void *)long long v16 = 0;
  *((void *)v16 + 1) = v8;
  float v17 = (std::string *)(v16 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v16 + 4) = *(void *)(a3 + 16);
  }
  *(_OWORD *)(v16 + 40) = *(_OWORD *)(a3 + 24);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  char v29 = 1;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    BOOL v20 = 1;
    if (v9 >= 3) {
      BOOL v20 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v9);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>>>::__rehash<true>(a1, v23);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v24 = *(void *)a1;
  unint64_t v25 = *(void **)(*(void *)a1 + 8 * v3);
  if (v25)
  {
    *(void *)long long v16 = *v25;
LABEL_41:
    *unint64_t v25 = v16;
    goto LABEL_42;
  }
  *(void *)long long v16 = *v15;
  void *v15 = v16;
  *(void *)(v24 + 8 * v3) = v15;
  if (*(void *)v16)
  {
    unint64_t v26 = *(void *)(*(void *)v16 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v26 >= v9) {
        v26 %= v9;
      }
    }
    else
    {
      v26 &= v9 - 1;
    }
    unint64_t v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_41;
  }
LABEL_42:
  v28[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,void *>>>>::reset[abi:ne180100]((uint64_t)v28);
  return 1;
}

void sub_1900C9498(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<CA::ADMObject>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 448);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 456);
    v4 = *(void **)(a1 + 448);
    if (v3 != v2)
    {
      do
      {
        v3 -= 192;
        std::__destroy_at[abi:ne180100]<CA::ADMAlternativeValueSet,0>(v3);
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 448);
    }
    *(void *)(a1 + 456) = v2;
    operator delete(v4);
  }
  uint8x8_t v10 = (void **)(a1 + 288);
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v10);
  uint64_t v5 = *(void *)(a1 + 264);
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 272);
    unint64_t v7 = *(void **)(a1 + 264);
    if (v6 != v5)
    {
      do
      {
        unint64_t v8 = *(std::__shared_weak_count **)(v6 - 8);
        if (v8) {
          std::__shared_weak_count::__release_weak(v8);
        }
        v6 -= 16;
      }
      while (v6 != v5);
      unint64_t v7 = *(void **)(a1 + 264);
    }
    *(void *)(a1 + 272) = v5;
    operator delete(v7);
  }
  uint8x8_t v10 = (void **)(a1 + 240);
  std::vector<CA::ADMLabel>::__destroy_vector::operator()[abi:ne180100](&v10);
  uint8x8_t v10 = (void **)(a1 + 216);
  std::vector<CA::ADMLabel>::__destroy_vector::operator()[abi:ne180100](&v10);
  uint8x8_t v10 = (void **)(a1 + 192);
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v10);
  uint8x8_t v10 = (void **)(a1 + 168);
  std::vector<std::shared_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100](&v10);
  if (*(unsigned char *)(a1 + 80) && *(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(unsigned char *)(a1 + 48) && *(char *)(a1 + 47) < 0)
  {
    unint64_t v9 = *(void **)(a1 + 24);
    operator delete(v9);
  }
}

void std::__shared_ptr_emplace<CA::ADMObject>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA28C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

void std::__shared_ptr_emplace<CA::ADMObject>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA28C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CA::ADMContent>::__on_zero_shared(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 200);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)(a1 + 168);
  std::vector<CA::ADMLoudnessMetadata>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)(a1 + 144);
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)(a1 + 120);
  std::vector<CA::ADMLabel>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(unsigned char *)(a1 + 112) && *(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(unsigned char *)(a1 + 80) && *(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(unsigned char *)(a1 + 48) && *(char *)(a1 + 47) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 24);
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<CA::ADMContent>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2770;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

void std::__shared_ptr_emplace<CA::ADMContent>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2770;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::construct_at[abi:ne180100]<CA::ADMProgramme,CA::ADMProgramme,CA::ADMProgramme*>(uint64_t result, long long *a2)
{
  *(unsigned char *)result = 0;
  *(unsigned char *)(result + 24) = 0;
  if (*((unsigned char *)a2 + 24))
  {
    long long v2 = *a2;
    *(void *)(result + 16) = *((void *)a2 + 2);
    *(_OWORD *)result = v2;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    *(unsigned char *)(result + 24) = 1;
  }
  *(unsigned char *)(result + 32) = 0;
  *(unsigned char *)(result + 56) = 0;
  if (*((unsigned char *)a2 + 56))
  {
    long long v3 = a2[2];
    *(void *)(result + 48) = *((void *)a2 + 6);
    *(_OWORD *)(result + 32) = v3;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 6) = 0;
    *((void *)a2 + 4) = 0;
    *(unsigned char *)(result + 56) = 1;
  }
  *(unsigned char *)(result + 64) = 0;
  *(unsigned char *)(result + 88) = 0;
  if (*((unsigned char *)a2 + 88))
  {
    long long v4 = a2[4];
    *(void *)(result + 80) = *((void *)a2 + 10);
    *(_OWORD *)(result + 64) = v4;
    *((void *)a2 + 9) = 0;
    *((void *)a2 + 10) = 0;
    *((void *)a2 + 8) = 0;
    *(unsigned char *)(result + 88) = 1;
  }
  *(_OWORD *)(result + 96) = a2[6];
  long long v5 = a2[7];
  long long v6 = a2[8];
  long long v7 = a2[9];
  *(void *)(result + 157) = *(void *)((char *)a2 + 157);
  *(_OWORD *)(result + 128) = v6;
  *(_OWORD *)(result + 144) = v7;
  *(_OWORD *)(result + 112) = v5;
  *(void *)(result + 176) = 0;
  *(void *)(result + 184) = 0;
  *(void *)(result + 168) = 0;
  *(_OWORD *)(result + 168) = *(long long *)((char *)a2 + 168);
  *(void *)(result + 184) = *((void *)a2 + 23);
  *((void *)a2 + 21) = 0;
  *((void *)a2 + 22) = 0;
  *((void *)a2 + 23) = 0;
  *(void *)(result + 192) = 0;
  *(void *)(result + 200) = 0;
  *(void *)(result + 208) = 0;
  *(_OWORD *)(result + 192) = a2[12];
  *(void *)(result + 208) = *((void *)a2 + 26);
  *((void *)a2 + 24) = 0;
  *((void *)a2 + 25) = 0;
  *((void *)a2 + 26) = 0;
  *(void *)(result + 216) = 0;
  *(void *)(result + 224) = 0;
  *(void *)(result + 232) = 0;
  *(_OWORD *)(result + 216) = *(long long *)((char *)a2 + 216);
  *(void *)(result + 232) = *((void *)a2 + 29);
  *((void *)a2 + 27) = 0;
  *((void *)a2 + 28) = 0;
  *((void *)a2 + 29) = 0;
  long long v8 = a2[15];
  long long v9 = a2[17];
  *(_OWORD *)(result + 256) = a2[16];
  *(_OWORD *)(result + 272) = v9;
  *(_OWORD *)(result + 240) = v8;
  *(unsigned char *)(result + 288) = 0;
  *(unsigned char *)(result + 336) = 0;
  if (*((unsigned char *)a2 + 336))
  {
    *(void *)(result + 288) = 0;
    *(void *)(result + 296) = 0;
    *(void *)(result + 304) = 0;
    *(_OWORD *)(result + 288) = a2[18];
    *(void *)(result + 304) = *((void *)a2 + 38);
    *((void *)a2 + 36) = 0;
    *((void *)a2 + 37) = 0;
    *((void *)a2 + 38) = 0;
    *(void *)(result + 312) = 0;
    *(void *)(result + 320) = 0;
    *(void *)(result + 328) = 0;
    *(_OWORD *)(result + 312) = *(long long *)((char *)a2 + 312);
    *(void *)(result + 328) = *((void *)a2 + 41);
    *((void *)a2 + 39) = 0;
    *((void *)a2 + 40) = 0;
    *((void *)a2 + 41) = 0;
    *(unsigned char *)(result + 336) = 1;
  }
  *(void *)(result + 344) = 0;
  *(void *)(result + 352) = 0;
  *(void *)(result + 360) = 0;
  uint64_t v10 = *((void *)a2 + 44);
  *(void *)(result + 344) = *((void *)a2 + 43);
  *(void *)(result + 352) = v10;
  *(void *)(result + 360) = *((void *)a2 + 45);
  *((void *)a2 + 43) = 0;
  *((void *)a2 + 44) = 0;
  *((void *)a2 + 45) = 0;
  return result;
}

uint64_t MP4BoxParser_MovieFragment::Init(MP4BoxParser_MovieFragment *this)
{
  uint64_t result = MP4BoxParser::Initialize(this);
  if (!result)
  {
    if (*((_DWORD *)this + 5) == 1836019558)
    {
      if (*((unsigned char *)this + 56)) {
        operator new();
      }
      return 0;
    }
    else
    {
      return 4294967294;
    }
  }
  return result;
}

void MP4BoxParser_MovieFragment::~MP4BoxParser_MovieFragment(MP4BoxParser_MovieFragment *this)
{
  MP4BoxParser_MovieFragment::~MP4BoxParser_MovieFragment(this);
  JUMPOUT(0x192FC8940);
}

{
  uint64_t v2;
  uint64_t v3;

  *(void *)this = off_1EDF93FF8;
  if (*((unsigned char *)this + 56))
  {
    long long v2 = *((void *)this + 8);
    if (v2)
    {
      std::__list_imp<MP4BoxInfo>::clear(*((uint64_t **)this + 8));
      MEMORY[0x192FC8940](v2, 0x1020C4062D53EE8);
    }
  }
  long long v3 = *((void *)this + 1);
  *(void *)this = &unk_1EDF8DA18;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
}

uint64_t MP4BoxParser_MovieFragment::GetSequence(MP4BoxParser_MovieFragment *this, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2 == a2) {
    return 0;
  }
  while (*(_DWORD *)(v2 + 16) != 1835427940)
  {
    uint64_t v2 = *(void *)(v2 + 8);
    if (v2 == a2) {
      return 0;
    }
  }
  long long v7 = (void (**)(MP4BoxParser_MovieFragmentHeader *__hidden))&unk_1EDF8DA18;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)this + 88))(&v8);
  char v9 = 0;
  int v10 = 0;
  uint64_t v11 = 0;
  char v12 = 0;
  int v13 = 8;
  long long v7 = off_1EDF94830;
  if (MP4BoxParser_MovieFragmentHeader::Init((MP4BoxParser **)&v7))
  {
    uint64_t v3 = v8;
    long long v7 = (void (**)(MP4BoxParser_MovieFragmentHeader *__hidden))&unk_1EDF8DA18;
    uint64_t v8 = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    return 0;
  }
  uint64_t v4 = v14;
  uint64_t v6 = v8;
  long long v7 = (void (**)(MP4BoxParser_MovieFragmentHeader *__hidden))&unk_1EDF8DA18;
  uint64_t v8 = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return v4;
}

void sub_1900C9CD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AudioConverterAPI::PrintObject(AudioConverterAPI *this, __sFILE *a2)
{
  fprintf(a2, "<%s 0x%x [%p]>", "AudioConverterRef", *((_DWORD *)this + 2), this);
  return fputc(10, a2);
}

uint64_t MediaToolboxLibraryCore(char **a1)
{
  if (!MediaToolboxLibraryCore(char **)::frameworkLibrary) {
    MediaToolboxLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  }
  return MediaToolboxLibraryCore(char **)::frameworkLibrary;
}

uint64_t getFigCPECryptorCreateCryptorFromSerializedRecipeSymbolLoc(void)
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2000000000;
  uint64_t v0 = getFigCPECryptorCreateCryptorFromSerializedRecipeSymbolLoc(void)::ptr;
  uint64_t v6 = getFigCPECryptorCreateCryptorFromSerializedRecipeSymbolLoc(void)::ptr;
  if (!getFigCPECryptorCreateCryptorFromSerializedRecipeSymbolLoc(void)::ptr)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 0x40000000;
    v2[2] = ___ZL58getFigCPECryptorCreateCryptorFromSerializedRecipeSymbolLocv_block_invoke;
    v2[3] = &unk_1E5687EB0;
    v2[4] = &v3;
    ___ZL58getFigCPECryptorCreateCryptorFromSerializedRecipeSymbolLocv_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1900C9F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *___ZL58getFigCPECryptorCreateCryptorFromSerializedRecipeSymbolLocv_block_invoke(uint64_t a1)
{
  uint64_t v5 = 0;
  uint64_t v2 = (void *)MediaToolboxLibraryCore(&v5);
  uint64_t v3 = v5;
  if (!v2)
  {
    uint64_t v3 = (void *)abort_report_np();
    goto LABEL_5;
  }
  if (v5) {
LABEL_5:
  }
    free(v3);
  uint64_t result = dlsym(v2, "FigCPECryptorCreateCryptorFromSerializedRecipe");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getFigCPECryptorCreateCryptorFromSerializedRecipeSymbolLoc(void)::ptr = *(void *)(*(void *)(*(void *)(a1 + 32)
                                                                                                + 8)
                                                                                    + 24);
  return result;
}

uint64_t ___ZL23MediaToolboxLibraryCorePPc_block_invoke()
{
  uint64_t result = _sl_dlopen();
  MediaToolboxLibraryCore(char **)::frameworkLibrary = result;
  return result;
}

__CFString *acv2::PCMConverter2::ConverterName(acv2::PCMConverter2 *this)
{
  return @"PCMConverter2";
}

void acv2::PCMConverter2::~PCMConverter2(acv2::PCMConverter2 *this)
{
  acv2::AudioConverterBase::~AudioConverterBase(this);
  JUMPOUT(0x192FC8940);
}

uint64_t acv2::PCMConverter_Scaled::ConvertBufferList(uint64_t result, int a2, void *a3, void *a4)
{
  uint64_t v6 = result;
  if ((*(unsigned char *)(result + 28) & 0x20) != 0) {
    int v7 = 1;
  }
  else {
    int v7 = *(_DWORD *)(result + 44);
  }
  uint64_t v8 = *(unsigned int *)*a3;
  if (v8)
  {
    uint64_t v9 = 0;
    uint64_t v10 = (v7 * a2);
    uint64_t v11 = 16 * v8;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, void, uint64_t, float))(v6 + 168))(*(void *)(*a3 + v9 + 16), *(void *)(*a4 + v9 + 16), v10, *(float *)(v6 + 176));
      v9 += 16;
    }
    while (v11 != v9);
  }
  return result;
}

__CFString *acv2::PCMConverter_Scaled::ConverterName(acv2::PCMConverter_Scaled *this)
{
  return @"PCMConverter_Scaled";
}

void acv2::PCMConverter_Scaled::~PCMConverter_Scaled(acv2::PCMConverter_Scaled *this)
{
  acv2::AudioConverterBase::~AudioConverterBase(this);
  JUMPOUT(0x192FC8940);
}

__CFString *acv2::PCMConverterI1::ConverterName(acv2::PCMConverterI1 *this)
{
  return @"PCMConverterI1";
}

void acv2::PCMConverterI1::~PCMConverterI1(acv2::PCMConverterI1 *this)
{
  acv2::AudioConverterBase::~AudioConverterBase(this);
  JUMPOUT(0x192FC8940);
}

uint64_t acv2::ConverterFactory::GetAvailableChannelLayouts(acv2::ConverterFactory *this, const AudioStreamBasicDescription *a2, unsigned int *a3, void *a4)
{
  return 1886547824;
}

uint64_t acv2::ConverterFactory::GetAvailableEncodeBitRates(acv2::ConverterFactory *this, unsigned int *a2, void *a3)
{
  return 1886547824;
}

uint64_t acv2::ConverterFactory::GetAvailableChannelLayoutsInfo(acv2::ConverterFactory *this, const AudioStreamBasicDescription *a2, unsigned int *a3)
{
  return 1886547824;
}

uint64_t acv2::ConverterFactory::GetAvailableEncodeBitRatesInfo(acv2::ConverterFactory *this, unsigned int *a2)
{
  return 1886547824;
}

void acv2::ChannelLayoutPair::~ChannelLayoutPair(acv2::ChannelLayoutPair *this)
{
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v3;
    operator delete(v3);
  }
}

uint64_t acv2::PCMDeinterleaver::ConvertBufferList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void, void, void, uint64_t))(a1 + 168))(*(void *)(*(void *)a3 + 16), *(void *)(*(void *)a4 + 16), *(void *)(*(void *)a4 + 32), a2);
}

__CFString *acv2::PCMDeinterleaver::ConverterName(acv2::PCMDeinterleaver *this)
{
  return @"PCMDeinterleaver";
}

void acv2::PCMDeinterleaver::~PCMDeinterleaver(acv2::PCMDeinterleaver *this)
{
  acv2::AudioConverterBase::~AudioConverterBase(this);
  JUMPOUT(0x192FC8940);
}

uint64_t acv2::PCMInterleaver::ConvertBufferList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void, void, void, uint64_t))(a1 + 168))(*(void *)(*(void *)a3 + 16), *(void *)(*(void *)a3 + 32), *(void *)(*(void *)a4 + 16), a2);
}

__CFString *acv2::PCMInterleaver::ConverterName(acv2::PCMInterleaver *this)
{
  return @"PCMInterleaver";
}

void acv2::PCMInterleaver::~PCMInterleaver(acv2::PCMInterleaver *this)
{
  acv2::AudioConverterBase::~AudioConverterBase(this);
  JUMPOUT(0x192FC8940);
}

uint64_t acv2::ChannelMixerConverter::ChannelMixerConverter(uint64_t a1, uint64_t a2, uint8_t **a3)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  long long v5 = *(_OWORD *)(a2 + 48);
  long long v46 = *(_OWORD *)(a2 + 32);
  long long v9 = v46;
  long long v47 = v5;
  long long v48 = *(_OWORD *)(a2 + 64);
  long long v6 = v48;
  long long v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)buf = *(_OWORD *)a2;
  long long v8 = *(_OWORD *)buf;
  *(_OWORD *)&buf[16] = v7;
  *(void *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 48) = v9;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 16) = v8;
  *(_OWORD *)(a1 + 32) = v7;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = -1;
  *((void *)&v9 + 1) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 64);
  *(void *)a1 = &unk_1EDF95E90;
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 28);
  unint64_t v10 = *(unsigned int *)(a2 + 68);
  *(_DWORD *)(a1 + 172) = v10;
  *(_OWORD *)(a1 + 176) = 0u;
  uint64_t v11 = (void *)(a1 + 176);
  *(unsigned char *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  if (v10)
  {
    uint64_t v12 = (v10 + 63) & 0x1FFFFFFC0;
    if (v12)
    {
      int v13 = (unint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(((unint64_t)(v12 - 1) >> 6) + 1);
      *((void *)&v9 + 1) = v14;
      unint64_t *v13 = 0;
      uint64_t v15 = *(const void **)(a1 + 200);
      uint64_t v12 = *(void *)(a1 + 208);
    }
    else
    {
      uint64_t v15 = 0;
      int v13 = 0;
    }
    unint64_t v16 = v12 + v10;
    uint64_t v17 = -8 * (void)v15;
    if (-8 * (uint64_t)v15 < 1)
    {
      LODWORD(v20) = 0;
      unint64_t v21 = v13;
    }
    else
    {
      if (v17 >= 0) {
        uint64_t v18 = -8 * (void)v15;
      }
      else {
        uint64_t v18 = v17 + 63;
      }
      uint64_t v19 = v18 >> 6;
      if ((unint64_t)(v17 + 63) >= 0x7F)
      {
        uint64_t v42 = *((void *)&v9 + 1);
        memmove(v13, v15, 8 * v19);
        *((void *)&v9 + 1) = v42;
      }
      uint64_t v20 = v17 - (v19 << 6);
      unint64_t v21 = &v13[v19];
      if (v20 < 1) {
        LODWORD(v20) = 0;
      }
      else {
        *unint64_t v21 = *v21 & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v20) | *((void *)v15 + v19) & (0xFFFFFFFFFFFFFFFFLL >> -(char)v20);
      }
    }
    *(void *)&long long v9 = v16;
    long long v41 = v9;
    unint64_t v22 = *(void *)(a1 + 208);
    size_t v23 = (void *)(*(void *)(a1 + 200) + 8 * (v22 >> 6));
    unsigned int v24 = v22 & 0x3F;
    *(void *)buf = &v13[v16 >> 6];
    *(_DWORD *)&buf[8] = v16 & 0x3F;
    if (*(_DWORD *)&buf[8] == v24) {
      std::__copy_backward_aligned[abi:ne180100]<std::vector<BOOL>,true>((uint64_t)v50, v23, v24, (uint64_t)buf);
    }
    else {
      std::__copy_backward_unaligned[abi:ne180100]<std::vector<BOOL>,true>((uint64_t)v50, v23, v24, (uint64_t)buf);
    }
    unint64_t v25 = *(void **)(a1 + 200);
    *(void *)(a1 + 200) = v13;
    *(_OWORD *)(a1 + 208) = v41;
    if (v25) {
      operator delete(v25);
    }
    *(void *)buf = v21;
    *(_DWORD *)&buf[8] = v20;
    std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)buf, v10);
  }
  else
  {
    *(void *)(a1 + 208) = v10;
    *(void *)buf = (v10 >> 3) & 0x1FFFFFF8;
    *(_DWORD *)&buf[8] = 0;
    std::__copy_backward_aligned[abi:ne180100]<std::vector<BOOL>,true>((uint64_t)v50, 0, 0, (uint64_t)buf);
  }
  unint64_t v26 = *(char **)(a1 + 176);
  unint64_t v27 = (*(_DWORD *)(a1 + 172) * *(_DWORD *)(a1 + 168));
  *(_DWORD *)buf = 0;
  std::vector<float>::insert(v11, v26, v27, (char *)buf);
  memset(buf, 0, sizeof(buf));
  memset(v50, 0, sizeof(v50));
  v28 = *a3;
  int v29 = *(_DWORD *)*a3;
  if (v29 == 0x10000)
  {
    uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)*((unsigned int *)v28 + 1));
    v30.i16[0] = vaddlv_u8(v30);
    if (v30.i32[0]) {
      goto LABEL_34;
    }
  }
  else if (v29)
  {
    if ((unsigned __int16)*(_DWORD *)*a3) {
      goto LABEL_34;
    }
  }
  else if (*((_DWORD *)v28 + 2))
  {
    goto LABEL_34;
  }
  unsigned int v31 = *(_DWORD *)(a1 + 168);
  if (v31 > 2) {
    return a1;
  }
  if (v31 == 2) {
    int v32 = 6619138;
  }
  else {
    int v32 = 6553601;
  }
  *(_DWORD *)buf = v32;
  v28 = buf;
LABEL_34:
  inSpecifier[0] = v28;
  v33 = a3[3];
  if (*(_DWORD *)v33 == 0x10000)
  {
    uint8x8_t v34 = (uint8x8_t)vcnt_s8((int8x8_t)*((unsigned int *)v33 + 1));
    v34.i16[0] = vaddlv_u8(v34);
    if (!v34.i32[0]) {
      goto LABEL_41;
    }
  }
  else if (*(_DWORD *)v33)
  {
    if (!(unsigned __int16)*(_DWORD *)v33)
    {
LABEL_41:
      unsigned int v35 = *(_DWORD *)(a1 + 172);
      if (v35 > 2) {
        return a1;
      }
      if (v35 == 2) {
        int v36 = 6619138;
      }
      else {
        int v36 = 6553601;
      }
      LODWORD(v50[0]) = v36;
      v33 = (uint8_t *)v50;
    }
  }
  else if (!*((_DWORD *)v33 + 2))
  {
    goto LABEL_41;
  }
  inSpecifier[1] = v33;
  if (!*(unsigned char *)(a1 + 224))
  {
    UInt32 ioPropertyDataSize = 4 * *(_DWORD *)(a1 + 168) * *(_DWORD *)(a1 + 172);
    OSStatus Property = AudioFormatGetProperty(0x6D6D6170u, 0x10u, inSpecifier, &ioPropertyDataSize, *(void **)(a1 + 176));
    int outPropertyData = 1;
    if (Property
      || (UInt32 ioPropertyDataSize = 4,
          OSStatus Property = AudioFormatGetProperty(0x6E726D6Du, 0x10u, inSpecifier, &ioPropertyDataSize, &outPropertyData),
          outPropertyData))
    {
      acv2::normalizeMixMap(*(unsigned int *)(a1 + 168), *(_DWORD *)(a1 + 172), *(float **)(a1 + 176), v38);
    }
    if (Property)
    {
      v40 = CADefaultLog();
      if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
      {
        CAX4CCString::CAX4CCString((CAX4CCString *)v50, Property);
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "ChannelMixerConverter.h";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 30;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = v50;
        _os_log_impl(&dword_18FEC0000, v40, OS_LOG_TYPE_ERROR, "%25s:%-5d SetLayouts failed, err %s being dropped!", buf, 0x1Cu);
      }
    }
  }
  return a1;
}

void sub_1900CA798(_Unwind_Exception *a1)
{
  uint64_t v4 = (void *)*((void *)v1 + 25);
  if (v4) {
    operator delete(v4);
  }
  long long v5 = *v2;
  if (*v2)
  {
    *((void *)v1 + 23) = v5;
    operator delete(v5);
  }
  acv2::AudioConverterBase::~AudioConverterBase(v1);
  _Unwind_Resume(a1);
}

void *std::__copy_backward_aligned[abi:ne180100]<std::vector<BOOL>,true>(uint64_t a1, void *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = 8 * (void)a2 + a3;
  uint64_t result = *(void **)a4;
  if (v6 >= 1)
  {
    if (a3)
    {
      if (v6 >= (unint64_t)a3) {
        uint64_t v8 = a3;
      }
      else {
        uint64_t v8 = 8 * (void)a2 + a3;
      }
      v6 -= v8;
      unint64_t v9 = (-1 << (a3 - v8)) & (0xFFFFFFFFFFFFFFFFLL >> -(char)a3);
      *uint64_t result = *result & ~v9 | *a2 & v9;
      *(_DWORD *)(a4 + 8) = (*(_DWORD *)(a4 + 8) - (_BYTE)v8) & 0x3F;
    }
    if (v6 >= 0) {
      uint64_t v10 = v6;
    }
    else {
      uint64_t v10 = v6 + 63;
    }
    uint64_t v11 = v10 >> 6;
    result -= v10 >> 6;
    *(void *)a4 = result;
    uint64_t v12 = &a2[-(v10 >> 6)];
    if ((unint64_t)(v6 + 63) >= 0x7F)
    {
      memmove(result, &a2[-(v10 >> 6)], 8 * v11);
      uint64_t result = *(void **)a4;
    }
    if (v6 - (v11 << 6) >= 1)
    {
      uint64_t v13 = -1 << (((_BYTE)v11 << 6) - v6);
      uint64_t v14 = *(v12 - 1) & v13;
      uint64_t v15 = *--result;
      *(void *)a4 = result;
      *uint64_t result = v15 & ~v13 | v14;
      *(_DWORD *)(a4 + 8) = -(int)v6 & 0x3F;
    }
  }
  *(void *)a1 = result;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a4 + 8);
  return result;
}

uint64_t std::__copy_backward_unaligned[abi:ne180100]<std::vector<BOOL>,true>(uint64_t result, void *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4 = 8 * (void)a2 + a3;
  if (v4 <= 0)
  {
    unint64_t v9 = *(unint64_t **)a4;
    LODWORD(v7) = *(_DWORD *)(a4 + 8);
  }
  else
  {
    if (a3)
    {
      if (v4 >= (unint64_t)a3) {
        uint64_t v5 = a3;
      }
      else {
        uint64_t v5 = 8 * (void)a2 + a3;
      }
      v4 -= v5;
      unint64_t v6 = (-1 << (a3 - v5)) & (0xFFFFFFFFFFFFFFFFLL >> -(char)a3) & *a2;
      unint64_t v7 = *(unsigned int *)(a4 + 8);
      if (v5 >= v7) {
        uint64_t v8 = *(unsigned int *)(a4 + 8);
      }
      else {
        uint64_t v8 = v5;
      }
      unint64_t v9 = *(unint64_t **)a4;
      if (v8)
      {
        unint64_t v10 = v6 >> (a3 - v7);
        if (v7 > a3) {
          unint64_t v10 = v6 << (v7 - a3);
        }
        *unint64_t v9 = *v9 & ~((-1 << (v7 - v8)) & (0xFFFFFFFFFFFFFFFFLL >> -(char)v7)) | v10;
        LODWORD(v7) = ((_BYTE)v7 - (_BYTE)v8) & 0x3F;
        *(_DWORD *)(a4 + 8) = v7;
        v5 -= v8;
      }
      if (v5 >= 1)
      {
        uint64_t v11 = *--v9;
        *(void *)a4 = v9;
        LODWORD(v7) = -(int)v5 & 0x3F;
        *(_DWORD *)(a4 + 8) = v7;
        *unint64_t v9 = v11 & ~(-1 << -(char)v5) | (v6 << (v5 + v8 - a3 + (-(char)v5 & 0x3F)));
      }
    }
    else
    {
      LODWORD(v7) = *(_DWORD *)(a4 + 8);
      unint64_t v9 = *(unint64_t **)a4;
    }
    char v12 = 64 - v7;
    unint64_t v13 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v7;
    if (v4 >= 64)
    {
      unint64_t v14 = *v9;
      do
      {
        unint64_t v15 = v4;
        unint64_t v17 = *--a2;
        unint64_t v16 = v17;
        *unint64_t v9 = v14 & ~v13 | (v17 >> v12);
        uint64_t v18 = *--v9;
        unint64_t v14 = v18 & v13 | (v16 << v7);
        *unint64_t v9 = v14;
        uint64_t v4 = v15 - 64;
      }
      while (v15 > 0x7F);
      *(void *)a4 = v9;
    }
    if (v4 >= 1)
    {
      unint64_t v19 = *(a2 - 1) & (-1 << -(char)v4);
      if (v4 >= (unint64_t)v7) {
        uint64_t v20 = v7;
      }
      else {
        uint64_t v20 = v4;
      }
      *unint64_t v9 = *v9 & ~((-1 << (v7 - v20)) & v13) | (v19 >> v12);
      LODWORD(v7) = ((_BYTE)v7 - (_BYTE)v20) & 0x3F;
      *(_DWORD *)(a4 + 8) = v7;
      if (v4 - v20 >= 1)
      {
        uint64_t v21 = *--v9;
        *(void *)a4 = v9;
        *(_DWORD *)(a4 + 8) = (v20 - v4) & 0x3F;
        *unint64_t v9 = v21 & ~(-1 << (v20 - v4)) | (v19 << (v4 + ((v20 - v4) & 0x3F)));
        LODWORD(v7) = (v20 - v4) & 0x3F;
      }
    }
  }
  *(void *)uint64_t result = v9;
  *(_DWORD *)(result + 8) = v7;
  return result;
}

uint64_t acv2::ConverterFactory::IsVBR(acv2::ConverterFactory *this, unsigned int *a2)
{
  *a2 = 0;
  return 0;
}

uint64_t acv2::ConverterFactory::GetName(acv2::ConverterFactory *this)
{
  return 0;
}

void acv2::PCMConverterFactory::~PCMConverterFactory(acv2::PCMConverterFactory *this)
{
}

void sub_1900CAF2C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1900CB260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__130(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__131(uint64_t a1)
{
}

void sub_1900CB5B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1900CB90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1900CBC48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1900CC03C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_1900CC39C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1900CC4A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1900CC77C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1900CCB84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1900CCEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1900CD2A4(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1900CE148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__16vectorIhNS_9allocatorIhEEEE(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void *__copy_helper_block_e8_40c39_ZTSNSt3__16vectorIhNS_9allocatorIhEEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v2 = (void *)(a1 + 40);
  v2[2] = 0;
  return std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v2, *(const void **)(a2 + 40), *(void *)(a2 + 48), *(void *)(a2 + 48) - *(void *)(a2 + 40));
}

void sub_1900CE870(_Unwind_Exception *a1)
{
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v5 - 152));
  objc_destroyWeak((id *)(v5 - 144));
  _Unwind_Resume(a1);
}

void sub_1900CF094(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v2 - 112), 8);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__8599(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__8600(uint64_t a1)
{
}

uint64_t MP3AudioStream::HandleDiscontinuity(MP3AudioStream *this)
{
  *((_DWORD *)this + 59) = 0;
  *((unsigned char *)this + 356) = 0;
  *((unsigned char *)this + 364) = 0;
  *((unsigned char *)this + 380) = 0;
  MP3AudioStream::Resync(this);
  return 0;
}

uint64_t MP3AudioStream::Resync(MP3AudioStream *this)
{
  uint64_t v2 = 0;
  uint64_t v3 = *((void *)this + 1);
  uint64_t v4 = *(void *)(v3 + 88);
  uint64_t v5 = *(void *)(v3 + 96);
  uint64_t v6 = v4 + *(unsigned int *)(v3 + 80);
  BOOL v8 = v5 < v4 || v6 <= v5;
  int v9 = v6 - v5;
  if (v8) {
    int v10 = 0;
  }
  else {
    int v10 = v9;
  }
  if (!v8 && v9) {
    uint64_t v2 = *(void *)(v3 + 72) + (v5 - v4);
  }
  long long v73 = 0u;
  long long v74 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  *((_DWORD *)this + 108) = 0;
  unsigned int v11 = v10 - 4;
  int v68 = 4;
  int v12 = 3;
  int v69 = v10;
  while (2)
  {
    int v13 = 0;
    char v14 = 0;
    unsigned int v81 = 0;
    while (MP3AudioStream::ScanForSyncWord((uint64_t)this, v10, v2, &v81, (uint64_t)&v77, 0))
    {
      long long v71 = v77;
      *((void *)&v72 + 1) = *((void *)&v78 + 1);
      long long v73 = v79;
      long long v74 = v80;
      uint64_t v15 = v81;
      unsigned int v16 = DWORD2(v77);
      if ((v14 & 1) == 0)
      {
        if (v10 - v81 < DWORD2(v77))
        {
          int v13 = 0;
          *((_DWORD *)this + 108) = DWORD2(v77) + v81;
          goto LABEL_85;
        }
        v75[0] = v2 + v81;
        v75[1] = v75[0];
        v75[2] = v75[0] + v11 - v81;
        uint64_t v76 = 0;
        if ((v75[0] & 3) != 0)
        {
          int v17 = 0;
          uint64_t v18 = v2 + 1 + v81;
          int v19 = -8;
          uint64_t v20 = (unsigned __int8 *)(v2 + v81);
          do
          {
            int v21 = v19;
            if ((unint64_t)v20 >= v2 + v81 + (unint64_t)(v11 - v81)) {
              int v22 = 255;
            }
            else {
              int v22 = *v20;
            }
            int v17 = v22 | (v17 << 8);
            ++v20;
            int v19 = v21 + 8;
          }
          while ((v18++ & 3) != 0);
          v75[0] = v20;
          LODWORD(v76) = v17 << (16 - v21);
          HIDWORD(v76) = v21 + 16;
        }
        uint64_t v24 = *((void *)this + 1);
        int v25 = VBRIHeader::Deserialize(v24 + 192, (uint64_t)v75, 1);
        BOOL v70 = v25 != 0;
        if (!v25)
        {
          unint64_t v28 = *(unsigned int *)(v24 + 200);
          *((void *)this + 52) = v28;
          int v29 = (unsigned int *)(v24 + 196);
LABEL_33:
          unsigned int v30 = *v29;
          BOOL v31 = v30 >= v16;
          unsigned int v32 = v30 - v16;
          if (!v31) {
            unsigned int v32 = 0;
          }
          *((_DWORD *)this + 106) = v32;
          LODWORD(v26) = HIDWORD(v73);
          double v33 = (double)v28 * (double)v26 / *((double *)&v72 + 1);
          double v34 = 0.0;
          if (v33 > 0.0) {
            double v34 = (double)v32 * 8.0 / v33;
          }
          unsigned int v35 = v34;
LABEL_38:
          *((_DWORD *)this + 107) = v35;
          int v36 = 1;
LABEL_39:
          (*(void (**)(MP3AudioStream *, void))(*(void *)this + 96))(this, v32);
          uint64_t v37 = 1650683508;
          if (v36)
          {
            unint64_t v28 = *((void *)this + 52);
            int v38 = 1;
            goto LABEL_55;
          }
          goto LABEL_75;
        }
        if (GetMetaHeader(v24 + 240, (unsigned __int8 *)(v2 + v15), v11 - v15))
        {
          int v27 = *(_DWORD *)(v24 + 248);
          if (v27)
          {
            unint64_t v28 = *(unsigned int *)(v24 + 252);
            *((void *)this + 52) = v28;
            if ((v27 & 2) != 0)
            {
              int v29 = (unsigned int *)(v24 + 256);
              goto LABEL_33;
            }
            int v38 = 0;
            BOOL v70 = 1;
LABEL_55:
            (*(void (**)(MP3AudioStream *, unint64_t))(*(void *)this + 80))(this, v28);
            unsigned int v45 = *(_DWORD *)&v70 & ((*(_DWORD *)(v24 + 248) & 0x20u) >> 5);
            *((unsigned char *)this + 448) = v70 & ((*(_DWORD *)(v24 + 248) & 0x20u) >> 5);
            if (v45 == 1)
            {
              *((_DWORD *)this + 42) = *(unsigned __int16 *)(v24 + 380);
              *((_DWORD *)this + 43) = *(unsigned __int16 *)(v24 + 382);
              uint64_t v37 = 1885564532;
              if ((v38 & 1) == 0) {
                goto LABEL_75;
              }
            }
            else
            {
              uint64_t v37 = 1885564532;
              if (!v38) {
                goto LABEL_75;
              }
            }
            uint64_t v46 = *((void *)this + 1);
            v82[0] = 1;
            long long v47 = *(void (**)(void, void, uint64_t, _DWORD *))(v46 + 24);
            if (v47)
            {
              v47(*(void *)(v46 + 40), *(unsigned int *)(v46 + 8), 1651663220, v82);
              uint64_t v48 = *((void *)this + 1);
              v49 = *(void (**)(void, void, uint64_t, _DWORD *))(v48 + 24);
              v82[0] = 1;
              if (v49) {
                v49(*(void *)(v48 + 40), *(unsigned int *)(v48 + 8), 1650683508, v82);
              }
            }
            else
            {
              v82[0] = 1;
            }
            uint64_t v37 = 1885564532;
LABEL_75:
            AudioFileStreamWrapper::CallPropertyListener(*((void *)this + 1), v37, 1);
          }
          else
          {
            if ((v27 & 2) != 0)
            {
              unsigned int v50 = *(_DWORD *)(v24 + 256);
              BOOL v31 = v50 >= v16;
              unsigned int v32 = v50 - v16;
              if (!v31) {
                unsigned int v32 = 0;
              }
              *((_DWORD *)this + 106) = v32;
              if ((v27 & 0x10) != 0)
              {
LABEL_67:
                for (unsigned int i = v16 + v15; i <= v11; ++i)
                {
                  v52 = (unsigned __int8 *)(v2 + i);
                  if (*v52 == 255)
                  {
                    unsigned int v53 = v52[1];
                    if (v53 >= 0xE0)
                    {
                      unsigned int v54 = (v52[2] << 8) | (v53 << 16) | v52[3] | 0xFF000000;
                      long long v77 = 0u;
                      long long v78 = 0u;
                      long long v79 = 0u;
                      long long v80 = 0u;
                      if (ParseMPEGSyncWord(v54, (uint64_t)&v77))
                      {
                        if ((v27 & 2) == 0)
                        {
                          uint64_t v37 = 1651663220;
                          *((_DWORD *)this + 107) = v78;
                          goto LABEL_75;
                        }
                        unsigned int v32 = *((_DWORD *)this + 106);
                        unsigned int v35 = v78;
                        LODWORD(v55) = HIDWORD(v73);
                        *((void *)this + 52) = vcvtpd_u64_f64((double)v32/ ((double)v78* 0.125)* (*((double *)&v72 + 1)/ (double)v55));
                        BOOL v70 = 1;
                        goto LABEL_38;
                      }
                    }
                  }
                }
                *((_DWORD *)this + 108) = i + 4;
                if (i != -4)
                {
                  LODWORD(v15) = 0;
                  goto LABEL_106;
                }
                uint64_t v56 = *((void *)this + 1);
LABEL_109:
                uint64_t result = 0;
                uint64_t v67 = *(void *)(v56 + 88) + *(unsigned int *)(v56 + 80);
LABEL_110:
                *(void *)(v56 + 96) = v67;
                return result;
              }
              int v36 = 0;
              BOOL v70 = 1;
              goto LABEL_39;
            }
            if ((v27 & 0x10) != 0) {
              goto LABEL_67;
            }
          }
          unsigned int v44 = v16 + v15;
          unsigned int v81 = v16 + v15;
          int v10 = v69;
          goto LABEL_77;
        }
        int v10 = v69;
      }
      unsigned int v39 = v16 + v15;
      if (v39 <= v11)
      {
        int v40 = 0;
        int v13 = 1;
        while (1)
        {
          long long v41 = (unsigned __int8 *)(v2 + v39);
          if (*v41 != 255) {
            break;
          }
          unsigned int v42 = v41[1];
          if (v42 < 0xE0) {
            goto LABEL_50;
          }
          unsigned int v43 = (v41[2] << 8) | (v42 << 16) | v41[3] | 0xFF000000;
          long long v77 = 0u;
          long long v78 = 0u;
          long long v79 = 0u;
          long long v80 = 0u;
          if (!ParseMPEGSyncWord(v43, (uint64_t)&v77)) {
            break;
          }
          if (v12 == v40)
          {
            int v13 = v68;
            goto LABEL_85;
          }
          v39 += DWORD2(v77);
          ++v13;
          ++v40;
          if (v39 > v11)
          {
LABEL_50:
            int v13 = v40 + 1;
            break;
          }
        }
      }
      else
      {
        int v13 = 1;
      }
      if (v39 >= v11) {
        break;
      }
      unsigned int v44 = v15 + 1;
      unsigned int v81 = v15 + 1;
LABEL_77:
      char v14 = 1;
      if (v44 > v11) {
        break;
      }
    }
    --v12;
    if (--v68) {
      continue;
    }
    break;
  }
  LODWORD(v15) = 0;
LABEL_85:
  if (*((_DWORD *)this + 108))
  {
LABEL_106:
    uint64_t result = 0;
    uint64_t v56 = *((void *)this + 1);
    uint64_t v67 = *(void *)(v56 + 96) + v15;
    goto LABEL_110;
  }
  uint64_t v56 = *((void *)this + 1);
  if (!v13) {
    goto LABEL_109;
  }
  uint64_t v57 = *(void *)(v56 + 96) + v15;
  *(void *)(v56 + 96) = v57;
  if (!*(_DWORD *)(v56 + 112))
  {
    *((_DWORD *)this + 86) = BYTE4(v71);
    *((_DWORD *)this + 87) = BYTE5(v71);
    *((_DWORD *)this + 29) = HIDWORD(v71) + 8;
    (*(void (**)(MP3AudioStream *, char *))(*(void *)this + 56))(this, (char *)&v72 + 8);
    *((void *)this + 13) = v57;
    if (*((unsigned char *)this + 448))
    {
      uint64_t v58 = (*(uint64_t (**)(MP3AudioStream *))(*(void *)this + 72))(this);
      *((void *)this + 20) = v58 * HIDWORD(v73) - (*((int *)this + 42) + (uint64_t)*((int *)this + 43));
      uint64_t v59 = *((void *)this + 1);
      LODWORD(v77) = 1;
      if (!*(unsigned char *)(v59 + 106))
      {
        *(unsigned char *)(v59 + 106) = 1;
        v60 = *(void (**)(void, void, uint64_t, long long *))(v59 + 24);
        if (v60) {
          v60(*(void *)(v59 + 40), *(unsigned int *)(v59 + 8), 1886283375, &v77);
        }
      }
    }
    uint64_t v61 = *((void *)this + 1);
    LODWORD(v77) = 1;
    if (!*(unsigned char *)(v61 + 104))
    {
      *(unsigned char *)(v61 + 104) = 1;
      v62 = *(void (**)(void, void, uint64_t, long long *))(v61 + 24);
      if (v62)
      {
        v62(*(void *)(v61 + 40), *(unsigned int *)(v61 + 8), 1717988724, &v77);
        uint64_t v61 = *((void *)this + 1);
      }
    }
    LODWORD(v77) = 1;
    if (!*(unsigned char *)(v61 + 105))
    {
      *(unsigned char *)(v61 + 105) = 1;
      v63 = *(void (**)(void, void, uint64_t, long long *))(v61 + 24);
      if (v63)
      {
        v63(*(void *)(v61 + 40), *(unsigned int *)(v61 + 8), 1684434292, &v77);
        uint64_t v61 = *((void *)this + 1);
      }
    }
    LODWORD(v77) = 1;
    v64 = *(void (**)(void, void, uint64_t, long long *))(v61 + 24);
    if (v64)
    {
      v64(*(void *)(v61 + 40), *(unsigned int *)(v61 + 8), 1685022310, &v77);
      uint64_t v61 = *((void *)this + 1);
    }
    LODWORD(v77) = 1;
    if (!*(_DWORD *)(v61 + 112))
    {
      *(_DWORD *)(v61 + 112) = 1;
      v65 = *(void (**)(void, void, uint64_t, long long *))(v61 + 24);
      if (v65) {
        v65(*(void *)(v61 + 40), *(unsigned int *)(v61 + 8), 1919247481, &v77);
      }
    }
  }
  return 1;
}

BOOL MP3AudioStream::ScanForSyncWord(uint64_t a1, int a2, uint64_t a3, _DWORD *a4, uint64_t a5, int a6)
{
  int v9 = *a4;
  int v46 = a2;
  if (*a4 <= a2 - 4)
  {
    uint64_t v12 = v9;
    uint64_t v13 = a2 - 4;
    int v9 = a2 - 3;
    BOOL v10 = 1;
    while (1)
    {
      uint64_t v14 = a3 + v12;
      if (*(unsigned __int8 *)(a3 + v12) == 255)
      {
        unsigned int v15 = *(unsigned __int8 *)(v14 + 1);
        if (v15 >= 0xE0)
        {
          unsigned int v16 = (*(unsigned __int8 *)(v14 + 2) << 8) | (v15 << 16) | *(unsigned __int8 *)(v14 + 3) | 0xFF000000;
          *(_OWORD *)(a5 + 32) = 0u;
          *(_OWORD *)(a5 + 48) = 0u;
          *(_OWORD *)a5 = 0u;
          *(_OWORD *)(a5 + 16) = 0u;
          if (ParseMPEGSyncWord(v16, a5))
          {
            if (*(unsigned char *)(a1 + 409)
              || !*(unsigned char *)(*(void *)(a1 + 8) + 105)
              || (*(double *)(a5 + 24) == *(double *)(a1 + 24)
                ? (BOOL v17 = *(_DWORD *)(a5 + 44) == *(_DWORD *)(a1 + 44))
                : (BOOL v17 = 0),
                  v17))
            {
              a2 = v12;
LABEL_66:
              unsigned int v43 = a4;
              goto LABEL_67;
            }
          }
          goto LABEL_38;
        }
      }
      BOOL v18 = *(_WORD *)v14 == 17481 && *(unsigned char *)(v14 + 2) == 51;
      if (v18 || (*(_WORD *)v14 == 16724 ? (BOOL v19 = *(unsigned char *)(v14 + 2) == 71) : (BOOL v19 = 0), v19))
      {
        uint64_t v20 = *(void *)(a1 + 8);
        int v21 = v14 - *(void *)(v20 + 72);
        *(_DWORD *)(a1 + 396) = v21;
        *(void *)(a1 + 400) = *(void *)(v20 + 88) + v21;
        if (a6)
        {
          if (*(char *)(a1 + 408) < 0)
          {
            uint64_t v22 = *(void *)(v20 + 48);
            uint64_t v23 = *(void *)(v20 + 56) - v22;
            if (v23)
            {
              unint64_t v24 = 0;
              unint64_t v25 = v23 >> 2;
              unsigned int v26 = 1;
              do
              {
                BOOL v17 = *(_DWORD *)(v22 + 4 * v24) == 1768174437;
                LODWORD(v23) = v17;
                unint64_t v24 = v26++;
              }
              while (!v17 && v25 > v24);
            }
            *(unsigned char *)(a1 + 408) = v23;
            if (!v23) {
              goto LABEL_38;
            }
LABEL_36:
            int v47 = 0;
            unint64_t v28 = *(void (**)(void, void, uint64_t, int *))(v20 + 24);
            if (v28) {
              v28(*(void *)(v20 + 40), *(unsigned int *)(v20 + 8), 1768174437, &v47);
            }
            goto LABEL_38;
          }
          if (*(unsigned char *)(a1 + 408)) {
            goto LABEL_36;
          }
        }
      }
LABEL_38:
      BOOL v10 = v12++ < v13;
      if (v9 == v12)
      {
        a2 = v46;
        goto LABEL_40;
      }
    }
  }
  BOOL v10 = 0;
  if (v9 > a2 - 3) {
    goto LABEL_66;
  }
LABEL_40:
  uint64_t v29 = v9;
  int v30 = a2 - 2;
  do
  {
    uint64_t v31 = a3 + v29;
    BOOL v32 = *(_WORD *)(a3 + v29) == 17481 && *(unsigned char *)(a3 + v29 + 2) == 51;
    if (v32 || (*(_WORD *)v31 == 16724 ? (BOOL v33 = *(unsigned char *)(v31 + 2) == 71) : (BOOL v33 = 0), v33))
    {
      uint64_t v34 = *(void *)(a1 + 8);
      int v35 = v31 - *(void *)(v34 + 72);
      *(_DWORD *)(a1 + 396) = v35;
      *(void *)(a1 + 400) = *(void *)(v34 + 88) + v35;
      if (a6)
      {
        if ((*(char *)(a1 + 408) & 0x80000000) == 0)
        {
          if (!*(unsigned char *)(a1 + 408)) {
            goto LABEL_63;
          }
LABEL_61:
          int v48 = 0;
          unsigned int v42 = *(void (**)(void, void, uint64_t, int *))(v34 + 24);
          if (v42) {
            v42(*(void *)(v34 + 40), *(unsigned int *)(v34 + 8), 1768174437, &v48);
          }
          goto LABEL_63;
        }
        uint64_t v36 = *(void *)(v34 + 48);
        uint64_t v37 = *(void *)(v34 + 56) - v36;
        if (v37)
        {
          unint64_t v38 = 0;
          unint64_t v39 = v37 >> 2;
          unsigned int v40 = 1;
          do
          {
            BOOL v17 = *(_DWORD *)(v36 + 4 * v38) == 1768174437;
            LODWORD(v37) = v17;
            unint64_t v38 = v40++;
          }
          while (!v17 && v39 > v38);
        }
        *(unsigned char *)(a1 + 408) = v37;
        if (v37) {
          goto LABEL_61;
        }
      }
    }
LABEL_63:
    ++v29;
  }
  while (v30 != v29);
  unsigned int v43 = a4;
  a2 = v46;
LABEL_67:
  *unsigned int v43 = a2;
  return v10;
}

uint64_t VBRIHeader::Deserialize(uint64_t a1, uint64_t a2, int a3)
{
  if (a3) {
    int v3 = 496;
  }
  else {
    int v3 = 432;
  }
  unint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(unsigned int **)a2;
  uint64_t v6 = v4 - *(void *)a2;
  int v7 = *(_DWORD *)(a2 + 28);
  if (v7 + 8 * (int)v6 < v3) {
    return 4294967285;
  }
  if (v7 >= 288)
  {
    uint64_t v12 = (_DWORD *)(a2 + 24);
    int v23 = *(_DWORD *)(a2 + 24);
    int v13 = v7 - 32;
    *(_DWORD *)(a2 + 28) = v13;
    goto LABEL_23;
  }
  unsigned int v11 = 288 - v7;
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 28) = 0;
  uint64_t v12 = (_DWORD *)(a2 + 24);
  if ((288 - v7) < 0x20)
  {
LABEL_10:
    int v13 = -v11;
    *(_DWORD *)(a2 + 28) = -v11;
    unint64_t v14 = *(void *)(a2 + 8);
    if ((v6 & ~(v6 >> 63) & 0xFFFFFFFC) != 0 && v14 <= (unint64_t)v5)
    {
      unsigned int v22 = *v5++;
      int v23 = bswap32(v22) << v11;
      *(_DWORD *)(a2 + 24) = v23;
      *(_DWORD *)(a2 + 28) = v13;
      int v13 = 32 - v11;
      *(void *)a2 = v5;
      goto LABEL_25;
    }
    uint64_t v16 = 0;
    int v17 = 0;
    do
    {
      BOOL v18 = (unsigned __int8 *)v5 + v16;
      int v19 = v17 << 8;
      _DWORD *v12 = v19;
      int v20 = 255;
      if ((unint64_t)v5 + v16 < v4 && (unint64_t)v18 >= v14) {
        int v20 = *v18;
      }
      int v17 = v20 | v19;
      _DWORD *v12 = v17;
      ++v16;
    }
    while (v16 != 4);
    *(void *)a2 = ++v5;
    int v23 = v17 << v11;
    *(_DWORD *)(a2 + 24) = v17 << v11;
    *(_DWORD *)(a2 + 28) = v13;
    if (v11)
    {
      int v13 = 32 - v11;
      goto LABEL_25;
    }
LABEL_23:
    int v21 = v23;
    goto LABEL_35;
  }
  uint64_t v5 = (unsigned int *)((char *)v5 + ((v11 >> 3) & 0x1FFFFFFC));
  *(void *)a2 = v5;
  v11 &= 0x1Fu;
  if (v11)
  {
    uint64_t v6 = v4 - (void)v5;
    goto LABEL_10;
  }
  int v13 = 0;
  int v23 = 0;
  *(_DWORD *)(a2 + 28) = -32;
  unint64_t v14 = *(void *)(a2 + 8);
LABEL_25:
  if (((v4 - v5) & ~((uint64_t)(v4 - (void)v5) >> 63) & 0xFFFFFFFC) != 0
    && v14 <= (unint64_t)v5)
  {
    unsigned int v24 = bswap32(*v5);
    _DWORD *v12 = v24;
  }
  else
  {
    uint64_t v25 = 0;
    unsigned int v24 = v23;
    do
    {
      unsigned int v26 = (unsigned __int8 *)v5 + v25;
      unsigned int v27 = v24 << 8;
      _DWORD *v12 = v27;
      int v28 = 255;
      if ((unint64_t)v5 + v25 < v4 && (unint64_t)v26 >= v14) {
        int v28 = *v26;
      }
      unsigned int v24 = v28 | v27;
      _DWORD *v12 = v24;
      ++v25;
    }
    while (v25 != 4);
  }
  *(_DWORD *)(a2 + 28) = v13;
  *(void *)a2 = ++v5;
  int v21 = (v24 >> v13) | v23;
  if (!v13)
  {
    _DWORD *v12 = 0;
    if (v21 == 1447187017) {
      goto LABEL_39;
    }
    return 0xFFFFFFFFLL;
  }
  int v23 = v24 << -(char)v13;
  _DWORD *v12 = v23;
LABEL_35:
  if (v21 != 1447187017) {
    return 0xFFFFFFFFLL;
  }
  if (v13 > 31)
  {
    int v29 = 32;
    goto LABEL_42;
  }
LABEL_39:
  int v29 = 32 - v13;
  _DWORD *v12 = 0;
  if ((32 - v13) >= 0x20)
  {
    *(void *)a2 = ++v5;
    v29 &= 0x1Fu;
    if (!v29) {
      goto LABEL_58;
    }
  }
  int v23 = 0;
  int v13 = 0;
LABEL_42:
  int v30 = v13 - v29;
  *(_DWORD *)(a2 + 28) = v13 - v29;
  if (v13 - v29 >= 0)
  {
    unsigned int v31 = v23 << v29;
    goto LABEL_55;
  }
  unint64_t v32 = *(void *)(a2 + 8);
  if (((v4 - v5) & ~((uint64_t)(v4 - (void)v5) >> 63) & 0xFFFFFFFC) != 0
    && v32 <= (unint64_t)v5)
  {
    int v23 = bswap32(*v5);
  }
  else
  {
    uint64_t v33 = 0;
    do
    {
      uint64_t v34 = (unsigned __int8 *)v5 + v33;
      int v35 = v23 << 8;
      _DWORD *v12 = v35;
      int v36 = 255;
      if ((unint64_t)v5 + v33 < v4 && (unint64_t)v34 >= v32) {
        int v36 = *v34;
      }
      int v23 = v36 | v35;
      _DWORD *v12 = v23;
      ++v33;
    }
    while (v33 != 4);
  }
  *(void *)a2 = ++v5;
  if (v30 == -32)
  {
    _DWORD *v12 = 0;
LABEL_58:
    unsigned int v37 = 0;
    unsigned int v31 = 0;
    int v30 = 0;
    *(_DWORD *)(a2 + 28) = -16;
    goto LABEL_59;
  }
  unsigned int v31 = v23 << -(char)v30;
  v30 += 32;
LABEL_55:
  unsigned int v37 = HIWORD(v31);
  int v38 = v30 - 16;
  *(_DWORD *)(a2 + 24) = v31;
  *(_DWORD *)(a2 + 28) = v30 - 16;
  if (v30 - 16 >= 0)
  {
    unsigned int v39 = v31 << 16;
    goto LABEL_70;
  }
LABEL_59:
  unint64_t v40 = *(void *)(a2 + 8);
  if (((v4 - v5) & ~((uint64_t)(v4 - (void)v5) >> 63) & 0xFFFFFFFC) != 0
    && v40 <= (unint64_t)v5)
  {
    unsigned int v31 = bswap32(*v5);
    _DWORD *v12 = v31;
  }
  else
  {
    uint64_t v41 = 0;
    do
    {
      unsigned int v42 = (unsigned __int8 *)v5 + v41;
      unsigned int v43 = v31 << 8;
      _DWORD *v12 = v43;
      int v44 = 255;
      if ((unint64_t)v5 + v41 < v4 && (unint64_t)v42 >= v40) {
        int v44 = *v42;
      }
      unsigned int v31 = v44 | v43;
      _DWORD *v12 = v31;
      ++v41;
    }
    while (v41 != 4);
  }
  int v38 = v30 + 16;
  BOOL v90 = v30 == -16;
  *(void *)a2 = ++v5;
  v37 |= v31 >> (v30 + 16);
  unsigned int v45 = v31 << (16 - v30);
  if (v90) {
    unsigned int v39 = 0;
  }
  else {
    unsigned int v39 = v45;
  }
LABEL_70:
  *(_WORD *)(a1 + 2) = v37;
  *(_DWORD *)(a2 + 24) = v39;
  *(_DWORD *)(a2 + 28) = v38 - 32;
  if (v38 - 32 < 0)
  {
    unint64_t v48 = *(void *)(a2 + 8);
    if (((v4 - v5) & ~((uint64_t)(v4 - (void)v5) >> 63) & 0xFFFFFFFC) != 0
      && v48 <= (unint64_t)v5)
    {
      unsigned int v49 = bswap32(*v5);
    }
    else
    {
      uint64_t v50 = 0;
      unsigned int v49 = v39;
      do
      {
        uint64_t v51 = (unsigned __int8 *)v5 + v50;
        unsigned int v52 = v49 << 8;
        _DWORD *v12 = v52;
        int v53 = 255;
        if ((unint64_t)v5 + v50 < v4 && (unint64_t)v51 >= v48) {
          int v53 = *v51;
        }
        unsigned int v49 = v53 | v52;
        _DWORD *v12 = v49;
        ++v50;
      }
      while (v50 != 4);
    }
    *(void *)a2 = ++v5;
    int v47 = (v49 >> v38) | v39;
    if (v38) {
      unsigned int v39 = v49 << -(char)v38;
    }
    else {
      unsigned int v39 = 0;
    }
    *(_DWORD *)(a2 + 24) = v39;
    int v46 = v38 - 32;
  }
  else
  {
    int v46 = v38 - 64;
    v38 -= 32;
    int v47 = v39;
  }
  *(_DWORD *)(a1 + 4) = v47;
  *(_DWORD *)(a2 + 28) = v46;
  if (v46 < 0)
  {
    unint64_t v55 = *(void *)(a2 + 8);
    if (((v4 - v5) & ~((uint64_t)(v4 - (void)v5) >> 63) & 0xFFFFFFFC) != 0
      && v55 <= (unint64_t)v5)
    {
      unsigned int v56 = bswap32(*v5);
    }
    else
    {
      uint64_t v57 = 0;
      unsigned int v56 = v39;
      do
      {
        uint64_t v58 = (unsigned __int8 *)v5 + v57;
        unsigned int v59 = v56 << 8;
        _DWORD *v12 = v59;
        int v60 = 255;
        if ((unint64_t)v5 + v57 < v4 && (unint64_t)v58 >= v55) {
          int v60 = *v58;
        }
        unsigned int v56 = v60 | v59;
        _DWORD *v12 = v56;
        ++v57;
      }
      while (v57 != 4);
    }
    *(void *)a2 = ++v5;
    int v54 = (v56 >> v38) | v39;
    if (v38) {
      unsigned int v39 = v56 << -(char)v38;
    }
    else {
      unsigned int v39 = 0;
    }
    *(_DWORD *)(a2 + 24) = v39;
    *(_DWORD *)(a2 + 28) = v38;
  }
  else
  {
    int v38 = v46;
    int v54 = v39;
  }
  uint64_t result = 0;
  *(_DWORD *)(a1 + 8) = v54;
  *(unsigned char *)a1 = 0;
  if (!a3) {
    return result;
  }
  unsigned int v61 = HIWORD(v39);
  int v62 = v38 - 16;
  *(_DWORD *)(a2 + 28) = v38 - 16;
  if (v38 - 16 < 0)
  {
    unint64_t v64 = *(void *)(a2 + 8);
    if (((v4 - v5) & ~((uint64_t)(v4 - (void)v5) >> 63) & 0xFFFFFFFC) != 0
      && v64 <= (unint64_t)v5)
    {
      unsigned int v39 = bswap32(*v5);
    }
    else
    {
      uint64_t v65 = 0;
      do
      {
        v66 = (unsigned __int8 *)v5 + v65;
        unsigned int v67 = v39 << 8;
        _DWORD *v12 = v67;
        int v68 = 255;
        if ((unint64_t)v5 + v65 < v4 && (unint64_t)v66 >= v64) {
          int v68 = *v66;
        }
        unsigned int v39 = v68 | v67;
        _DWORD *v12 = v39;
        ++v65;
      }
      while (v65 != 4);
    }
    *(void *)a2 = ++v5;
    int v62 = v38 + 16;
    v61 |= v39 >> (v38 + 16);
    if (v38 == -16)
    {
      unsigned int v69 = 0;
      unsigned int v63 = 0;
      *(void *)(a2 + 24) = 0xFFFFFFF000000000;
      goto LABEL_115;
    }
    unsigned int v63 = v39 << (16 - v38);
  }
  else
  {
    unsigned int v63 = v39 << 16;
  }
  unsigned int v69 = HIWORD(v63);
  int v70 = v62 - 16;
  *(_DWORD *)(a2 + 24) = v63;
  *(_DWORD *)(a2 + 28) = v62 - 16;
  if (v62 - 16 >= 0)
  {
    unsigned int v71 = v63 << 16;
    goto LABEL_125;
  }
  unint64_t v64 = *(void *)(a2 + 8);
LABEL_115:
  if (((v4 - v5) & ~((uint64_t)(v4 - (void)v5) >> 63) & 0xFFFFFFFC) != 0
    && v64 <= (unint64_t)v5)
  {
    unsigned int v63 = bswap32(*v5);
  }
  else
  {
    uint64_t v72 = 0;
    do
    {
      long long v73 = (unsigned __int8 *)v5 + v72;
      unsigned int v74 = v63 << 8;
      _DWORD *v12 = v74;
      int v75 = 255;
      if ((unint64_t)v5 + v72 < v4 && (unint64_t)v73 >= v64) {
        int v75 = *v73;
      }
      unsigned int v63 = v75 | v74;
      _DWORD *v12 = v63;
      ++v72;
    }
    while (v72 != 4);
  }
  *(void *)a2 = ++v5;
  int v70 = v62 + 16;
  v69 |= v63 >> (v62 + 16);
  if (v62 == -16)
  {
    unsigned int v76 = 0;
    unsigned int v71 = 0;
    *(void *)(a2 + 24) = 0xFFFFFFF000000000;
    *(_WORD *)(a1 + 12) = v69;
    goto LABEL_129;
  }
  unsigned int v71 = v63 << (16 - v62);
LABEL_125:
  *(_WORD *)(a1 + 12) = v69;
  unsigned int v76 = HIWORD(v71);
  int v77 = v70 - 16;
  *(_DWORD *)(a2 + 24) = v71;
  *(_DWORD *)(a2 + 28) = v70 - 16;
  if (v70 - 16 >= 0)
  {
    unsigned int v78 = v71 << 16;
    goto LABEL_139;
  }
  unint64_t v64 = *(void *)(a2 + 8);
LABEL_129:
  if (((v4 - v5) & ~((uint64_t)(v4 - (void)v5) >> 63) & 0xFFFFFFFC) != 0
    && v64 <= (unint64_t)v5)
  {
    unsigned int v71 = bswap32(*v5);
  }
  else
  {
    uint64_t v79 = 0;
    do
    {
      long long v80 = (unsigned __int8 *)v5 + v79;
      unsigned int v81 = v71 << 8;
      _DWORD *v12 = v71 << 8;
      int v82 = 255;
      if ((unint64_t)v5 + v79 < v4 && (unint64_t)v80 >= v64) {
        int v82 = *v80;
      }
      unsigned int v71 = v82 | v81;
      _DWORD *v12 = v71;
      ++v79;
    }
    while (v79 != 4);
  }
  *(void *)a2 = ++v5;
  int v77 = v70 + 16;
  v76 |= v71 >> (v70 + 16);
  if (v70 == -16)
  {
    unsigned int v83 = 0;
    unsigned int v78 = 0;
    *(void *)(a2 + 24) = 0xFFFFFFF000000000;
    *(_WORD *)(a1 + 14) = v76;
LABEL_143:
    if (((v4 - v5) & ~((uint64_t)(v4 - (void)v5) >> 63) & 0xFFFFFFFC) != 0
      && v64 <= (unint64_t)v5)
    {
      unsigned int v78 = bswap32(*v5);
    }
    else
    {
      uint64_t v86 = 0;
      do
      {
        v87 = (unsigned __int8 *)v5 + v86;
        unsigned int v88 = v78 << 8;
        _DWORD *v12 = v88;
        int v89 = 255;
        if ((unint64_t)v5 + v86 < v4 && (unint64_t)v87 >= v64) {
          int v89 = *v87;
        }
        unsigned int v78 = v89 | v88;
        _DWORD *v12 = v78;
        ++v86;
      }
      while (v86 != 4);
    }
    int v91 = v77 + 16;
    BOOL v90 = v77 == -16;
    *(_DWORD *)(a2 + 28) = v77 + 16;
    *(void *)a2 = ++v5;
    v83 |= v78 >> (v77 + 16);
    if (v77 == -16) {
      unsigned int v85 = 0;
    }
    else {
      unsigned int v85 = v78 << (16 - v77);
    }
    if (v90) {
      int v84 = 0;
    }
    else {
      int v84 = v91;
    }
    goto LABEL_157;
  }
  unsigned int v78 = v71 << (16 - v70);
LABEL_139:
  *(_WORD *)(a1 + 14) = v76;
  unsigned int v83 = HIWORD(v78);
  int v84 = v77 - 16;
  *(_DWORD *)(a2 + 24) = v78;
  *(_DWORD *)(a2 + 28) = v77 - 16;
  if (v77 - 16 < 0)
  {
    unint64_t v64 = *(void *)(a2 + 8);
    goto LABEL_143;
  }
  unsigned int v85 = v78 << 16;
LABEL_157:
  _DWORD *v12 = v85;
  *(_WORD *)(a1 + 16) = v83;
  uint64_t v92 = (unsigned __int16)v61;
  if (v84 + 8 * ((int)v4 - (int)v5) < 8 * (unsigned __int16)v61 * (unsigned __int16)v76) {
    return 4294967285;
  }
  std::vector<unsigned int>::resize((std::vector<int> *)(a1 + 24), (unsigned __int16)v61);
  if (v92)
  {
    uint64_t v93 = 0;
    int v94 = 8 * *(unsigned __int16 *)(a1 + 14);
    unint64_t v96 = *(void *)(a2 + 8);
    unint64_t v95 = *(void *)(a2 + 16);
    v97 = *(unsigned int **)a2;
    uint64_t v98 = *(void *)(a1 + 24);
    do
    {
      if ((v94 - 33) >= 0xFFFFFFE0)
      {
        unsigned int v100 = *(_DWORD *)(a2 + 24);
        unsigned int v99 = v100 >> (32 - v94);
        int v101 = *(_DWORD *)(a2 + 28) - v94;
        *(_DWORD *)(a2 + 28) = v101;
        if (v101 < 0)
        {
          if (((v95 - v97) & ~((uint64_t)(v95 - (void)v97) >> 63) & 0xFFFFFFFC) == 0
            || v96 > (unint64_t)v97)
          {
            uint64_t v104 = 0;
            do
            {
              v105 = (unsigned __int8 *)v97 + v104;
              unsigned int v106 = v100 << 8;
              _DWORD *v12 = v106;
              int v107 = 255;
              if ((unint64_t)v97 + v104 < v95 && (unint64_t)v105 >= v96) {
                int v107 = *v105;
              }
              unsigned int v100 = v107 | v106;
              _DWORD *v12 = v100;
              ++v104;
            }
            while (v104 != 4);
          }
          else
          {
            unsigned int v100 = bswap32(*v97);
          }
          *(_DWORD *)(a2 + 28) = v101 + 32;
          *(void *)a2 = ++v97;
          v99 |= v100 >> v101;
          if (v101 == -32) {
            unsigned int v102 = 0;
          }
          else {
            unsigned int v102 = v100 << -(char)v101;
          }
        }
        else
        {
          unsigned int v102 = v100 << v94;
        }
        _DWORD *v12 = v102;
      }
      else
      {
        unsigned int v99 = 0;
      }
      *(_DWORD *)(v98 + 4 * v93++) = v99;
    }
    while (v93 != v92);
  }
  uint64_t result = 0;
  *(unsigned char *)a1 = 1;
  return result;
}

uint64_t MP3AudioStream::GeneratePackets(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 236);
  int v3 = -1;
  if (v2 > 238)
  {
    if (v2 == 375)
    {
      LODWORD(v4) = *(_DWORD *)(a1 + 256);
      uint64_t v5 = *(unsigned __int8 **)(a1 + 264);
      goto LABEL_122;
    }
    if (v2 == 260)
    {
      unsigned int v6 = *(_DWORD *)(a1 + 256);
      uint64_t v7 = *(void *)(a1 + 8);
      BOOL v8 = *(unsigned __int8 **)(a1 + 264);
      goto LABEL_34;
    }
    if (v2 != 239)
    {
LABEL_11:
      *(_DWORD *)(a1 + 236) = v3;
      return 0;
    }
    while (1)
    {
LABEL_13:
      uint64_t v10 = *(void *)(a1 + 8);
      uint64_t v11 = *(void *)(v10 + 88);
      uint64_t v12 = *(void *)(v10 + 96);
      uint64_t v13 = v11 + *(unsigned int *)(v10 + 80);
      int v3 = 239;
      if (v12 < v11 || v13 <= v12) {
        goto LABEL_11;
      }
      unsigned int v15 = v13 - v12;
      if (!v15) {
        goto LABEL_11;
      }
      if (*(unsigned char *)(a1 + 364))
      {
        uint64_t v16 = *(unsigned int *)(a1 + 368);
        size_t v17 = 4 - (int)v16 >= v15 ? v15 : (4 - v16);
        *(_DWORD *)(a1 + 372) = v17;
        memcpy((void *)(a1 + 376 + v16), (const void *)(*(void *)(v10 + 72) + (v12 - v11)), v17);
        unsigned int v18 = *(_DWORD *)(a1 + 368) + *(_DWORD *)(a1 + 372);
        *(_DWORD *)(a1 + 368) = v18;
        if (v18 >= 4)
        {
          if (*(unsigned __int8 *)(a1 + 376) == 255)
          {
            unsigned int v19 = *(unsigned __int8 *)(a1 + 377);
            if (v19 >= 0xE0)
            {
              unsigned int v20 = (*(unsigned __int8 *)(a1 + 378) << 8) | (v19 << 16) | *(unsigned __int8 *)(a1 + 379) | 0xFF000000;
              *(_OWORD *)size = 0u;
              memset(v113, 0, sizeof(v113));
              int v21 = ParseMPEGSyncWord(v20, (uint64_t)size);
              *(unsigned char *)(a1 + 364) = v21;
              unsigned int v22 = size[1];
              *(_DWORD *)(a1 + 352) = size[1];
              if (v21)
              {
                if (*((double *)v113 + 1) != *(double *)(a1 + 24) || HIDWORD(v113[1]) != *(_DWORD *)(a1 + 44))
                {
                  long long v23 = *(_OWORD *)((char *)&v113[1] + 8);
                  *(_OWORD *)(a1 + 24) = *(_OWORD *)((char *)v113 + 8);
                  *(_OWORD *)(a1 + 40) = v23;
                  *(void *)(a1 + 56) = *((void *)&v113[2] + 1);
                  uint64_t v24 = *(void *)(a1 + 8);
                  unsigned int v106 = 1;
                  if (!*(unsigned char *)(v24 + 105))
                  {
                    *(unsigned char *)(v24 + 105) = 1;
                    uint64_t v25 = *(void (**)(void, void, uint64_t, unsigned int *))(v24 + 24);
                    if (v25)
                    {
                      v25(*(void *)(v24 + 40), *(unsigned int *)(v24 + 8), 1684434292, &v106);
                      unsigned int v22 = *(_DWORD *)(a1 + 352);
                    }
                  }
                }
                if (*(_DWORD *)(a1 + 284) < v22)
                {
                  *(_DWORD *)(a1 + 284) = v22;
                  CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)(a1 + 288), v22, 0);
                }
                **(_DWORD **)(a1 + 288) = *(_DWORD *)(a1 + 376);
                uint64_t v7 = *(void *)(a1 + 8);
                *(void *)(v7 + 96) += *(unsigned int *)(a1 + 372);
                unsigned int v6 = *(_DWORD *)(a1 + 352) - 4;
                *(_DWORD *)(a1 + 256) = v6;
                BOOL v8 = (unsigned __int8 *)(*(void *)(a1 + 288) + 4);
                *(void *)(a1 + 264) = v8;
LABEL_34:
                unsigned int v106 = v6;
                StreamBuffer::Copy((void *)(v7 + 72), &v106, v8);
                unsigned int v26 = v106;
                int v27 = *(_DWORD *)(a1 + 256);
                *(void *)(a1 + 264) += v106;
                int v28 = v27 - v26;
                *(_DWORD *)(a1 + 256) = v28;
                if (v28)
                {
                  int v3 = 260;
                  goto LABEL_11;
                }
                int v29 = *(AudioStreamPacketDescription **)(a1 + 192);
                v29->mStartOffset = 0;
                UInt32 v30 = *(_DWORD *)(a1 + 352);
                v29->mVariableFramesInPacket = 0;
                v29->mDataByteSize = v30;
                *(void *)(a1 + 320) += LODWORD(v113[0]);
                AudioFileStreamWrapper::CallPacketsProc(*(AudioFileStreamWrapper **)(a1 + 8), v30, 1u, *(const void **)(a1 + 288), v29, 1);
                ++*(void *)(a1 + 184);
              }
            }
          }
          *(unsigned char *)(a1 + 364) = 0;
        }
      }
      if (!*(unsigned char *)(a1 + 380)) {
        goto LABEL_77;
      }
      unsigned int v31 = 0;
      uint64_t v32 = *(unsigned int *)(a1 + 384);
      unsigned int v33 = 4 - v32;
      uint64_t v34 = *(void *)(a1 + 8);
      uint64_t v35 = *(void *)(v34 + 88);
      uint64_t v36 = *(void *)(v34 + 96);
      uint64_t v37 = v35 + *(unsigned int *)(v34 + 80);
      BOOL v39 = v36 < v35 || v37 <= v36;
      unsigned int v40 = v37 - v36;
      if (v39) {
        unsigned int v41 = 0;
      }
      else {
        unsigned int v41 = v40;
      }
      if (v41 >= v33) {
        size_t v42 = v33;
      }
      else {
        size_t v42 = v41;
      }
      *(_DWORD *)(a1 + 388) = v42;
      unsigned int v43 = (_WORD *)(a1 + 392);
      if (!v39 && v40) {
        unsigned int v31 = (const void *)(*(void *)(v34 + 72) + (v36 - v35));
      }
      memcpy((void *)(a1 + 392 + v32), v31, v42);
      unsigned int v44 = *(_DWORD *)(a1 + 384) + *(_DWORD *)(a1 + 388);
      *(_DWORD *)(a1 + 384) = v44;
      if (v44 < 4) {
        goto LABEL_77;
      }
      BOOL v45 = *v43 == 17481 && *(unsigned char *)(a1 + 394) == 51;
      if (v45 || (*v43 == 16724 ? (BOOL v46 = *(unsigned char *)(a1 + 394) == 71) : (BOOL v46 = 0), v46))
      {
        int v47 = -v44;
        *(_DWORD *)(a1 + 396) = -v44;
        uint64_t v48 = *(void *)(a1 + 8);
        *(void *)(a1 + 400) = *(void *)(v48 + 88) + v47;
        if (*(char *)(a1 + 408) < 0)
        {
          BOOL v49 = 0;
          uint64_t v50 = *(void *)(v48 + 48);
          uint64_t v51 = *(void *)(v48 + 56) - v50;
          if (v51)
          {
            unint64_t v52 = 0;
            unint64_t v53 = v51 >> 2;
            unsigned int v54 = 1;
            do
            {
              BOOL v45 = *(_DWORD *)(v50 + 4 * v52) == 1768174437;
              BOOL v49 = v45;
              unint64_t v52 = v54++;
            }
            while (!v45 && v53 > v52);
          }
          *(unsigned char *)(a1 + 408) = v49;
          if (!v49) {
            goto LABEL_76;
          }
LABEL_73:
          unsigned int v106 = 0;
          unsigned int v56 = *(void (**)(void, void, uint64_t, unsigned int *))(v48 + 24);
          if (v56) {
            v56(*(void *)(v48 + 40), *(unsigned int *)(v48 + 8), 1768174437, &v106);
          }
          *(_DWORD *)(a1 + 384) = 0;
          goto LABEL_76;
        }
        if (*(unsigned char *)(a1 + 408)) {
          goto LABEL_73;
        }
      }
LABEL_76:
      *(unsigned char *)(a1 + 380) = 0;
LABEL_77:
      uint64_t v104 = 0;
      uint64_t v57 = *(void *)(a1 + 8);
      uint64_t v58 = *(void *)(v57 + 88);
      uint64_t v59 = *(void *)(v57 + 96);
      uint64_t v60 = v58 + *(unsigned int *)(v57 + 80);
      BOOL v61 = v59 < v58 || v60 <= v59;
      char v62 = v61;
      int v63 = v60 - v59;
      if (!v61 && v60 != v59) {
        uint64_t v104 = (void *)(*(void *)(v57 + 72) + (v59 - v58));
      }
      if (!v63) {
        char v62 = 1;
      }
      if ((v62 & 1) == 0)
      {
        unsigned int v105 = 0;
        *(unsigned char *)(a1 + 356) = 0;
        if (v63 >= 4)
        {
          unsigned int v64 = 0;
          UInt32 v65 = 0;
          while (MP3AudioStream::ScanForSyncWord(a1, v63, (uint64_t)v104, &v105, (uint64_t)&v106, 1))
          {
            double v66 = *(double *)&v109;
            double v67 = *(double *)(a1 + 24);
            int v68 = DWORD1(v110);
            int v69 = *(_DWORD *)(a1 + 44);
            if (*(double *)&v109 != v67 || DWORD1(v110) != v69)
            {
              if (v64)
              {
                AudioFileStreamWrapper::CallPacketsProc(*(AudioFileStreamWrapper **)(a1 + 8), v65, v64, v104, *(AudioStreamPacketDescription **)(a1 + 192), 1);
                uint64_t v71 = *(void *)(a1 + 8);
                uint64_t v72 = *(void *)(v71 + 96) + v65;
                UInt32 v65 = 0;
                *(void *)(v71 + 96) = v72;
                *(void *)(a1 + 184) += v64;
                double v67 = *(double *)(a1 + 24);
                int v69 = *(_DWORD *)(a1 + 44);
              }
              long long v73 = v110;
              *(_OWORD *)(a1 + 24) = v109;
              *(_OWORD *)(a1 + 40) = v73;
              *(void *)(a1 + 56) = v111;
              if (v66 != v67 || v68 != v69)
              {
                uint64_t v75 = *(void *)(a1 + 8);
                v114[0] = 1;
                if (!*(unsigned char *)(v75 + 105))
                {
                  *(unsigned char *)(v75 + 105) = 1;
                  unsigned int v76 = *(void (**)(void, void, uint64_t, int *))(v75 + 24);
                  if (v76) {
                    v76(*(void *)(v75 + 40), *(unsigned int *)(v75 + 8), 1684434292, v114);
                  }
                }
              }
              unsigned int v64 = 0;
            }
            uint64_t v77 = v105;
            unsigned int v78 = v107;
            if (v63 - v105 < v107)
            {
              int v82 = *(AudioFileStreamWrapper **)(a1 + 8);
              if (v64)
              {
                AudioFileStreamWrapper::CallPacketsProc(v82, v65, v64, v104, *(AudioStreamPacketDescription **)(a1 + 192), 1);
                int v82 = *(AudioFileStreamWrapper **)(a1 + 8);
                uint64_t v83 = *((void *)v82 + 12) + v65;
                *((void *)v82 + 12) = v83;
                LODWORD(v77) = v77 - v65;
                *(void *)(a1 + 184) += v64;
              }
              else
              {
                uint64_t v83 = *((void *)v82 + 12);
              }
              *(unsigned char *)(a1 + 356) = 1;
              *(_DWORD *)(a1 + 360) = v108;
              *((void *)v82 + 12) = v83 + v77;
              *(_DWORD *)(a1 + 352) = v78;
              goto LABEL_118;
            }
            *(void *)(a1 + 320) += v108;
            unsigned int v79 = v64 + 1;
            if (*(_DWORD *)(a1 + 200) < v64 + 1)
            {
              uint64_t v80 = (1 << -__clz(v64));
              *(_DWORD *)(a1 + 200) = v80;
              CADeprecated::CAAutoFree<AudioStreamPacketDescription>::reallocItems((void **)(a1 + 192), v80);
            }
            uint64_t v81 = *(void *)(a1 + 192) + 16 * v64;
            *(void *)uint64_t v81 = v77;
            *(_DWORD *)(v81 + 8) = 0;
            *(_DWORD *)(v81 + 12) = v78;
            UInt32 v65 = v78 + v77;
            unsigned int v105 = v78 + v77;
            ++v64;
            if ((int)(v63 - (v78 + v77)) <= 3) {
              goto LABEL_112;
            }
          }
          unsigned int v79 = v64;
LABEL_112:
          if (v79)
          {
            AudioFileStreamWrapper::CallPacketsProc(*(AudioFileStreamWrapper **)(a1 + 8), v65, v79, v104, *(AudioStreamPacketDescription **)(a1 + 192), 1);
            *(void *)(*(void *)(a1 + 8) + 96) += v65;
            *(void *)(a1 + 184) += v79;
          }
        }
      }
LABEL_118:
      if (*(unsigned char *)(a1 + 356))
      {
        size_t v4 = *(unsigned int *)(a1 + 352);
        if (*(_DWORD *)(a1 + 284) < v4)
        {
          *(_DWORD *)(a1 + 284) = v4;
          CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)(a1 + 288), v4, 0);
          LODWORD(v4) = *(_DWORD *)(a1 + 352);
        }
        *(_DWORD *)(a1 + 256) = v4;
        uint64_t v5 = *(unsigned __int8 **)(a1 + 288);
        *(void *)(a1 + 264) = v5;
LABEL_122:
        unsigned int v106 = v4;
        StreamBuffer::Copy((void *)(*(void *)(a1 + 8) + 72), &v106, v5);
        unsigned int v84 = v106;
        int v85 = *(_DWORD *)(a1 + 256);
        *(void *)(a1 + 264) += v106;
        int v86 = v85 - v84;
        *(_DWORD *)(a1 + 256) = v86;
        if (v86)
        {
          int v3 = 375;
          goto LABEL_11;
        }
        if (!*(_DWORD *)(a1 + 200))
        {
          *(_DWORD *)(a1 + 200) = 1;
          CADeprecated::CAAutoFree<AudioStreamPacketDescription>::reallocItems((void **)(a1 + 192), 1);
        }
        v87 = *(AudioStreamPacketDescription **)(a1 + 192);
        v87->mStartOffset = 0;
        UInt32 v88 = *(_DWORD *)(a1 + 352);
        v87->mVariableFramesInPacket = 0;
        v87->mDataByteSize = v88;
        *(void *)(a1 + 320) += *(unsigned int *)(a1 + 360);
        AudioFileStreamWrapper::CallPacketsProc(*(AudioFileStreamWrapper **)(a1 + 8), v88, 1u, *(const void **)(a1 + 288), v87, 1);
        ++*(void *)(a1 + 184);
      }
      else
      {
        int v89 = 0;
        uint64_t v90 = *(void *)(a1 + 8);
        uint64_t v91 = *(void *)(v90 + 88);
        uint64_t v92 = *(void *)(v90 + 96);
        uint64_t v93 = v91 + *(unsigned int *)(v90 + 80);
        BOOL v95 = v92 < v91 || v93 <= v92;
        unsigned int v96 = v93 - v92;
        if (v95) {
          size_t v97 = 0;
        }
        else {
          size_t v97 = v96;
        }
        if (!v95 && v96) {
          int v89 = (unsigned __int8 *)(*(void *)(v90 + 72) + (v92 - v91));
        }
        if (v97 == 1)
        {
          BOOL v98 = *v89 == 255;
          *(unsigned char *)(a1 + 364) = v98;
          int v99 = *v89;
          BOOL v100 = v99 == 73 || v99 == 84;
        }
        else
        {
          if ((v97 & 0xFFFFFFFE) == 2)
          {
            BOOL v98 = 0;
            if (*v89 == 255) {
              BOOL v98 = v89[1] > 0xDFu;
            }
            *(unsigned char *)(a1 + 364) = v98;
          }
          else
          {
            BOOL v98 = 0;
            *(unsigned char *)(a1 + 364) = 0;
          }
          if (v97 != 2)
          {
LABEL_155:
            int v103 = 0;
            goto LABEL_156;
          }
          int v101 = *v89;
          int v102 = 68;
          if (v101 != 73)
          {
            if (v101 != 84) {
              goto LABEL_155;
            }
            int v102 = 65;
          }
          BOOL v100 = v89[1] == v102;
        }
        int v103 = v100;
LABEL_156:
        *(unsigned char *)(a1 + 380) = v103;
        if (v98)
        {
          *(_DWORD *)(a1 + 368) = v97;
          *(_DWORD *)(a1 + 376) = 0;
          memcpy((void *)(a1 + 376), v89, v97);
          int v103 = *(unsigned __int8 *)(a1 + 380);
        }
        if (v103)
        {
          *(_DWORD *)(a1 + 384) = v97;
          *(_DWORD *)(a1 + 392) = 0;
          memcpy((void *)(a1 + 392), v89, v97);
        }
        *(void *)(v90 + 96) = *(void *)(v90 + 88) + *(unsigned int *)(v90 + 80);
      }
    }
  }
  if (v2 != -1)
  {
    if (!v2) {
      goto LABEL_13;
    }
    goto LABEL_11;
  }
  return 0;
}

uint64_t MP3AudioStream::ParseHeader(MP3AudioStream *this, uint64_t a2)
{
  int v4 = *((_DWORD *)this + 59);
  if (v4 <= 163)
  {
    if (v4 == -1) {
      return 0;
    }
    if (!v4) {
      goto LABEL_10;
    }
    goto LABEL_7;
  }
  if (v4 == 172)
  {
    uint64_t v6 = *((void *)this + 1);
    LODWORD(v7) = *(_DWORD *)(v6 + 116);
    goto LABEL_57;
  }
  if (v4 != 164)
  {
LABEL_7:
    int v5 = -1;
LABEL_9:
    *((_DWORD *)this + 59) = v5;
    return 0;
  }
  while (1)
  {
LABEL_10:
    uint64_t v8 = *((void *)this + 1);
    uint64_t v9 = *(unsigned int *)(v8 + 80);
    uint64_t v11 = *(void *)(v8 + 88);
    uint64_t v10 = *(void *)(v8 + 96);
    uint64_t v12 = v11 + v9;
    if (v10 < v11 || v12 <= v10 || v12 - v10 == 0)
    {
      int v5 = 164;
      goto LABEL_9;
    }
    if (MP3AudioStream::Resync(this)) {
      break;
    }
    size_t v15 = *((unsigned int *)this + 108);
    if (v15)
    {
      *((_DWORD *)this + 64) = v15;
      uint64_t v6 = *((void *)this + 1);
      uint64_t v16 = *(void *)(v6 + 88);
      uint64_t v17 = *(void *)(v6 + 96);
      uint64_t v18 = v16 + *(unsigned int *)(v6 + 80);
      BOOL v19 = v17 < v16 || v18 <= v17;
      BOOL v20 = v19;
      unsigned int v21 = v18 - v17;
      size_t v7 = v20 ? 0 : v21;
      if (v7 < v15)
      {
        *((void *)this + 34) = v17;
        unsigned int v22 = *(char **)(v6 + 72);
        if (v22 == *(char **)(v6 + 128))
        {
          if (v21) {
            int v33 = v20;
          }
          else {
            int v33 = 1;
          }
          if (v33) {
            uint64_t v34 = 0;
          }
          else {
            uint64_t v34 = &v22[(v17 - v16)];
          }
          memmove(v22, v34, v7);
          size_t v35 = *((unsigned int *)this + 108);
          uint64_t v6 = *((void *)this + 1);
          if (*(_DWORD *)(v6 + 120) < v35)
          {
            *(_DWORD *)(v6 + 120) = v35;
            CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v6 + 128), v35);
            uint64_t v6 = *((void *)this + 1);
          }
          *(_DWORD *)(v6 + 116) = v7;
          *(void *)(v6 + 96) = *(void *)(v6 + 88) + *(unsigned int *)(v6 + 80);
        }
        else
        {
          if (*(_DWORD *)(v6 + 120) < v15)
          {
            *(_DWORD *)(v6 + 120) = v15;
            CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v6 + 128), v15);
            uint64_t v6 = *((void *)this + 1);
          }
          LODWORD(v7) = 0;
          *(_DWORD *)(v6 + 116) = 0;
        }
LABEL_57:
        unsigned int v36 = *((_DWORD *)this + 64) - v7;
        uint64_t v37 = *(void *)(v6 + 88);
        uint64_t v38 = *(void *)(v6 + 96);
        uint64_t v39 = v37 + *(unsigned int *)(v6 + 80);
        if (v39 <= v38 || v38 < v37) {
          unsigned int v41 = 0;
        }
        else {
          unsigned int v41 = v39 - v38;
        }
        if (v36 <= v41) {
          unsigned int v36 = v41;
        }
        unsigned int v47 = v36;
        size_t v42 = v36 + v7;
        if (*(_DWORD *)(v6 + 120) < v42)
        {
          *(_DWORD *)(v6 + 120) = v42;
          CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v6 + 128), v42);
          uint64_t v6 = *((void *)this + 1);
        }
        StreamBuffer::Copy((void *)(v6 + 72), &v47, (unsigned __int8 *)(*(void *)(v6 + 128) + *(unsigned int *)(v6 + 116)));
        uint64_t v43 = *((void *)this + 1);
        unsigned int v44 = *(_DWORD *)(v43 + 116) + v47;
        *(_DWORD *)(v43 + 116) = v44;
        if (v44 < *((_DWORD *)this + 64))
        {
          int v5 = 172;
          goto LABEL_9;
        }
        uint64_t v45 = *((void *)this + 34);
        uint64_t v46 = *(void *)(v43 + 128);
        *(void *)(v43 + 88) = v45;
        *(void *)(v43 + 96) = v45;
        *(void *)(v43 + 72) = v46;
        *(_DWORD *)(v43 + 80) = v44;
      }
    }
  }
  uint64_t v23 = 0;
  *(void *)a2 = this;
  *(void *)(a2 + 8) = AudioFileStreamObject::GeneratePackets;
  *(void *)(a2 + 16) = 0;
  uint64_t v24 = *((void *)this + 1);
  uint64_t v25 = *(void *)(v24 + 88);
  uint64_t v26 = *(void *)(v24 + 96);
  uint64_t v27 = v25 + *(unsigned int *)(v24 + 80);
  BOOL v28 = v26 < v25 || v27 <= v26;
  int v29 = v28;
  int v30 = v27 - v26;
  if (!v28 && v30) {
    uint64_t v23 = *(void *)(v24 + 72) + (v26 - v25);
  }
  *(void *)(a2 + 32) = v23;
  if (v29) {
    int v31 = 0;
  }
  else {
    int v31 = v30;
  }
  *(_DWORD *)(a2 + 24) = v31;
  return 0;
}

uint64_t MP3AudioStream::GetBitRate(MP3AudioStream *this, unsigned int *a2)
{
  LODWORD(v2) = *((_DWORD *)this + 107);
  if (v2) {
    goto LABEL_4;
  }
  uint64_t v3 = *((void *)this + 40);
  if (v3)
  {
    uint64_t v2 = v3 / *((void *)this + 26);
LABEL_4:
    uint64_t result = 0;
    *a2 = v2;
    return result;
  }
  return 1836020325;
}

uint64_t MP3AudioStream::SetProperty(MP3AudioStream *this, int a2, unsigned int a3, _DWORD *a4)
{
  if (a2 != 1634494051) {
    return 1886681407;
  }
  uint64_t result = 0;
  *((unsigned char *)this + 409) = *a4 != 0;
  return result;
}

uint64_t MP3AudioStream::GetProperty(MP3AudioStream *this, int a2, unsigned int *a3, _DWORD *__dst)
{
  if (a2 > 1768174436)
  {
    if (a2 == 1819243876)
    {
      if (*a3 != 8) {
        return 561211770;
      }
      uint64_t v9 = (CFTypeRef *)*((void *)this + 55);
      if (!v9) {
        return 1836020325;
      }
      if (*v9)
      {
        CFRetain(*v9);
        CFTypeRef v7 = *v9;
      }
      else
      {
        CFTypeRef v7 = 0;
      }
      uint64_t result = 0;
      goto LABEL_27;
    }
    if (a2 != 1768174437) {
      goto LABEL_20;
    }
    uint64_t result = 561211770;
    if (!a3 || *a3 != 4) {
      return result;
    }
    uint64_t result = 0;
    int v8 = *((_DWORD *)this + 99);
LABEL_15:
    *__dst = v8;
    return result;
  }
  if (a2 == 1634494051)
  {
    uint64_t result = 561211770;
    if (!a3 || *a3 != 4) {
      return result;
    }
    uint64_t result = 0;
    int v8 = *((unsigned __int8 *)this + 409);
    goto LABEL_15;
  }
  if (a2 != 1768174433)
  {
LABEL_20:
    return AudioFileStreamObject::GetProperty(this, a2, a3, __dst);
  }
  uint64_t result = 561211770;
  if (a3 && *a3 == 8)
  {
    uint64_t result = 0;
    CFTypeRef v7 = (CFTypeRef)*((void *)this + 50);
LABEL_27:
    *(void *)__dst = v7;
  }
  return result;
}

uint64_t MP3AudioStream::GetPropertyInfo(MP3AudioStream *this, int a2, unsigned int *a3, unsigned __int8 *a4)
{
  if (a2 <= 1768174436)
  {
    if (a2 == 1634494051)
    {
      if (a3) {
        *a3 = 4;
      }
      if (a4) {
        *a4 = 1;
      }
      return 0;
    }
    if (a2 != 1768174433) {
      return AudioFileStreamObject::GetPropertyInfo(this, a2, a3, a4);
    }
    goto LABEL_9;
  }
  if (a2 == 1819243876)
  {
LABEL_9:
    if (!a3) {
      goto LABEL_12;
    }
    unsigned int v4 = 8;
LABEL_11:
    *a3 = v4;
LABEL_12:
    if (a4) {
      *a4 = 0;
    }
    return 0;
  }
  if (a2 == 1768174437)
  {
    if (!a3) {
      goto LABEL_12;
    }
    unsigned int v4 = 4;
    goto LABEL_11;
  }
  return AudioFileStreamObject::GetPropertyInfo(this, a2, a3, a4);
}

void MP3AudioStream::~MP3AudioStream(MP3AudioStream *this)
{
  MP3AudioStream::~MP3AudioStream(this);
  JUMPOUT(0x192FC8940);
}

{
  CACFDictionary *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EDF8F630;
  uint64_t v2 = (CACFDictionary *)*((void *)this + 55);
  if (v2)
  {
    CACFDictionary::~CACFDictionary(v2);
    MEMORY[0x192FC8940]();
  }
  uint64_t v3 = (void *)*((void *)this + 42);
  if (v3)
  {
    free(v3);
    *((void *)this + 42) = 0;
  }
  AudioFileStreamObject::~AudioFileStreamObject(this);
}

uint64_t CA::ADMTime::ADMTime(uint64_t this)
{
  *(_DWORD *)this = 0;
  *(unsigned char *)(this + 16) = 0;
  *(void *)(this + 8) = 0;
  return this;
}

{
  *(_DWORD *)this = 0;
  *(unsigned char *)(this + 16) = 0;
  *(void *)(this + 8) = 0;
  return this;
}

double CA::ADMTime::ADMTime(CA::ADMTime *this, double a2)
{
  unsigned int v2 = vcvtmd_u64_f64(a2);
  *(_DWORD *)this = v2;
  *((unsigned char *)this + 16) = 0;
  double result = a2 - (double)v2;
  *((double *)this + 1) = result;
  return result;
}

{
  unsigned int v2;
  double result;

  unsigned int v2 = vcvtmd_u64_f64(a2);
  *(_DWORD *)this = v2;
  *((unsigned char *)this + 16) = 0;
  double result = a2 - (double)v2;
  *((double *)this + 1) = result;
  return result;
}

double CA::ADMTime::operator double(uint64_t a1, double a2, double a3)
{
  if (*(unsigned char *)(a1 + 16))
  {
    LODWORD(a2) = *(_DWORD *)(a1 + 8);
    LODWORD(a3) = *(_DWORD *)(a1 + 12);
    double v3 = (double)*(unint64_t *)&a2 / (double)*(unint64_t *)&a3;
  }
  else
  {
    double v3 = *(double *)(a1 + 8);
  }
  return v3 + (double)*(unsigned int *)a1;
}

uint64_t CA::ADMTime::parse@<X0>(CA::ADMTime *this@<X0>, uint64_t a2@<X8>)
{
  if (strchr((char *)this, 83))
  {
    *(void *)uint64_t v13 = 0;
    uint64_t v14 = 0;
    unsigned int v12 = 0;
    uint64_t result = sscanf((const char *)this, "%u:%u:%u.%uS%u", &v13[4], (char *)&v14 + 4, &v14, v13, &v12);
    if (result == 5 && (v6 = v12) != 0 && (uint64_t v7 = *(unsigned int *)v13, v12 > *(_DWORD *)v13))
    {
      *(_DWORD *)a2 = 3600 * *(_DWORD *)&v13[4] + 60 * HIDWORD(v14) + v14;
      *(void *)(a2 + 8) = v7 | (v6 << 32);
      char v8 = 1;
      *(unsigned char *)(a2 + 16) = 1;
    }
    else
    {
      char v8 = 0;
      *(unsigned char *)a2 = 0;
    }
  }
  else
  {
    *(void *)&v13[4] = 0;
    uint64_t v14 = 0;
    uint64_t result = sscanf((const char *)this, "%u:%u:%lf", (char *)&v14 + 4, &v14, &v13[4]);
    char v8 = 0;
    uint64_t v9 = (unsigned char *)a2;
    if (result == 3)
    {
      unsigned int v10 = vcvtmd_u64_f64(*(double *)&v13[4]);
      double v11 = *(double *)&v13[4] - (double)v10;
      *(_DWORD *)a2 = v10 + 3600 * HIDWORD(v14) + 60 * v14;
      *(double *)(a2 + 8) = v11;
      uint64_t v9 = (unsigned char *)(a2 + 16);
      char v8 = 1;
    }
    *uint64_t v9 = 0;
  }
  *(unsigned char *)(a2 + 24) = v8;
  return result;
}

void AC3PacketParser::GetMagicCookie(AC3PacketParser *this, void *__dst, unsigned int *a3)
{
  if (*a3 >= 0xB)
  {
    uint64_t v6 = (const void *)*((void *)this + 9);
    if (v6) {
      goto LABEL_3;
    }
    *((_DWORD *)this + 20) = 11;
    char v8 = (unsigned __int8 *)malloc_type_malloc(0xBuLL, 0x7C51E058uLL);
    if (!v8)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      double v11 = std::bad_alloc::bad_alloc(exception);
    }
    *((void *)this + 9) = v8;
    int v9 = ConvertAC3HeaderToAC3MP4Cookie(*((unsigned __int8 **)this + 1), *((_DWORD *)this + 4), v8, (unsigned int *)this + 20);
    uint64_t v6 = (const void *)*((void *)this + 9);
    if (!v9)
    {
LABEL_3:
      *a3 = *((_DWORD *)this + 20);
      size_t v7 = *((unsigned int *)this + 20);
      memcpy(__dst, v6, v7);
    }
    else
    {
      if (v6) {
        free(*((void **)this + 9));
      }
      *((void *)this + 9) = 0;
      *((_DWORD *)this + 20) = 0;
    }
  }
}

uint64_t MP4AudioStream::HandleDiscontinuity(MP4AudioStream *this)
{
  return 0;
}

uint64_t MP4AudioStream::ByteRangeToPacketRange(MP4Parser_PacketProvider **this, uint64_t a2, unsigned int *a3, uint64_t *a4, unsigned int *a5)
{
  uint64_t result = MP4Parser_PacketProvider::GetPacketIndexForOffset(this[59], a2, a4);
  if (!result)
  {
    unsigned int v10 = *((_DWORD *)this + 28);
    if (!v10) {
      return 2003334207;
    }
    if (v10 <= *a3)
    {
      unsigned int v11 = *a3 / v10;
    }
    else
    {
      unsigned int v14 = 0;
      uint64_t result = MP4Parser_PacketProvider::GetPacketInfo(this[59], *(_DWORD *)a4, &v14, (unint64_t *)&v15);
      unsigned int v11 = v14 <= *a3;
      if (result) {
        return result;
      }
    }
    unsigned int v12 = (uint64_t **)this[59];
    unsigned int v13 = *(_DWORD *)a4;
    return MP4Parser_PacketProvider::GetContiguousPacketCountAndSize(v12, v13, v11, a5, a3);
  }
  return result;
}

uint64_t MP4AudioStream::PacketToDependencyInfo(unsigned __int8 **this, AudioPacketDependencyInfoTranslation *a2)
{
  int v4 = (*((uint64_t (**)(unsigned __int8 **))*this + 20))(this);
  int v5 = this[59];
  MP4BoxParser_Track::GetInfoFromTrackSubBoxes((MP4BoxParser_Track *)v5);
  if (v4)
  {
    uint64_t v6 = this[59];
    MP4BoxParser_Track::GetInfoFromTrackSubBoxes((MP4BoxParser_Track *)v6);
    return PacketToDependencyInfoForRestrictedRandomAccess(a2, (const SampleToRollDistanceTable *)(v5 + 240), (const SyncSampleTable *)(v6 + 296));
  }
  else
  {
    int v9 = v5[152];
    char v8 = (const SampleToRollDistanceTable *)(v5 + 152);
    if (v9)
    {
      a2->mIsIndependentlyDecodable = 1;
      v10.mPacket = a2->mPacket;
      v10.mRollDistance = 0;
      PacketToRollDistanceForRollRecovery(&v10, v8);
      a2->mNumberPrerollPackets = v10.mRollDistance;
    }
    else
    {
      AudioFileStreamObject::PacketToDependencyInfo((AudioFileStreamObject *)this, a2);
    }
    return 0;
  }
}

uint64_t MP4AudioStream::ScanForIndependentPacket(void *a1, int a2, AudioIndependentPacketTranslation *a3)
{
  if ((*(unsigned int (**)(void *))(*a1 + 160))(a1))
  {
    uint64_t v6 = (SampleToRollDistanceTable **)a1[59];
    MP4BoxParser_Track::GetInfoFromTrackSubBoxes((MP4BoxParser_Track *)v6);
    size_t v7 = (SyncSampleTable **)a1[59];
    MP4BoxParser_Track::GetInfoFromTrackSubBoxes((MP4BoxParser_Track *)v7);
    return ScanForIndependentPacketWithRestrictedRandomAccess(a2 == 1, a3, v6 + 30, v7 + 37);
  }
  else
  {
    return AudioFileStreamObject::ScanForIndependentPacket((uint64_t)a1, a2, a3);
  }
}

uint64_t MP4AudioStream::PacketToRollDistance(unsigned __int8 **this, AudioPacketRollDistanceTranslation *a2)
{
  a2->mRollDistance = 0;
  int v4 = (*((uint64_t (**)(unsigned __int8 **))*this + 20))(this);
  int v5 = this[59];
  MP4BoxParser_Track::GetInfoFromTrackSubBoxes((MP4BoxParser_Track *)v5);
  if (v4)
  {
    uint64_t v6 = this[59];
    MP4BoxParser_Track::GetInfoFromTrackSubBoxes((MP4BoxParser_Track *)v6);
    int v8 = v5[240];
    size_t v7 = (const SampleToRollDistanceTable *)(v5 + 240);
    if (v8 | v6[296])
    {
      return PacketToRollDistanceForRestrictedRandomAccess(a2, v7, (const SyncSampleTable *)(v6 + 296));
    }
    return 0;
  }
  int v11 = v5[152];
  AudioPacketRollDistanceTranslation v10 = (const SampleToRollDistanceTable *)(v5 + 152);
  if (!v11)
  {
    int v12 = *((_DWORD *)this + 8);
    UInt32 ioPropertyDataSize = 4;
    int inSpecifier = v12;
    unsigned int outPropertyData = 0;
    AudioFormatGetProperty(0x64726C6Cu, 4u, &inSpecifier, &ioPropertyDataSize, &outPropertyData);
    SInt64 mPacket = outPropertyData;
    if (a2->mPacket < outPropertyData) {
      SInt64 mPacket = a2->mPacket;
    }
    a2->mRollDistance = mPacket;
    return 0;
  }
  return PacketToRollDistanceForRollRecovery(a2, v10);
}

uint64_t MP4AudioStream::RestrictsRandomAccess(MP4AudioStream *this)
{
  v1 = (unsigned __int8 *)*((void *)this + 59);
  MP4BoxParser_Track::GetInfoFromTrackSubBoxes((MP4BoxParser_Track *)v1);
  if (v1[296]) {
    return 1;
  }
  MP4BoxParser_Track::GetInfoFromTrackSubBoxes((MP4BoxParser_Track *)v1);
  return v1[240];
}

uint64_t MP4AudioStream::GeneratePackets(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 236);
  if (v2 == -1) {
    return 0;
  }
  if (!v2)
  {
    MP4Parser_PacketProvider::GetPacketIndexForOffset(*(MP4Parser_PacketProvider **)(a1 + 472), *(void *)(*(void *)(a1 + 8) + 96), (uint64_t *)(a1 + 184));
    uint64_t v15 = *(void *)(a1 + 184);
    goto LABEL_13;
  }
  if (v2 != 686)
  {
    uint64_t result = 0;
LABEL_44:
    int v42 = -1;
    goto LABEL_45;
  }
  LODWORD(v5) = *(_DWORD *)(a1 + 256);
  uint64_t v6 = *(unsigned __int8 **)(a1 + 264);
LABEL_5:
  LODWORD(v56.mStartOffset) = v5;
  StreamBuffer::Copy((void *)(*(void *)(a1 + 8) + 72), (unsigned int *)&v56, v6);
  int mStartOffset = v56.mStartOffset;
  int v8 = *(_DWORD *)(a1 + 256);
  *(void *)(a1 + 264) += LODWORD(v56.mStartOffset);
  int v9 = v8 - mStartOffset;
  *(_DWORD *)(a1 + 256) = v9;
  if (v9)
  {
    uint64_t result = 0;
    int v42 = 686;
LABEL_45:
    *(_DWORD *)(a1 + 236) = v42;
    return result;
  }
  if (*(_DWORD *)(a1 + 416))
  {
    uint64_t v10 = *(unsigned int *)(a1 + 304);
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v12 = *(void *)(v11 + 16);
    *(void *)(v12 + 224) += *(unsigned int *)(v12 + 44);
    uint64_t v13 = *(void *)(v12 + 216) + v10;
    ++*(void *)(v12 + 208);
    *(void *)(v12 + 216) = v13;
    (*(void (**)(void))(v11 + 32))(*(void *)(v11 + 40));
  }
  else
  {
    v56.int mStartOffset = 0;
    UInt32 v16 = *(_DWORD *)(a1 + 304);
    v56.mVariableFramesInPacket = 0;
    v56.mDataByteSize = v16;
    AudioFileStreamWrapper::CallPacketsProc(*(AudioFileStreamWrapper **)(a1 + 8), v16, 1u, *(const void **)(a1 + 288), &v56, 1);
  }
  uint64_t v15 = *(void *)(a1 + 184) + 1;
  *(void *)(a1 + 184) = v15;
LABEL_13:
  uint64_t v17 = (AudioStreamPacketDescription **)(a1 + 192);
  while (1)
  {
    MP4BoxParser_Track::UpdateOffsetTableToIndex(*(MP4BoxParser_Track **)(a1 + 472), v15);
    if (MP4Parser_PacketProvider::GetPacketInfo(*(MP4Parser_PacketProvider **)(a1 + 472), *(_DWORD *)(a1 + 184), (unsigned int *)(a1 + 304), (unint64_t *)(a1 + 312)))break; {
    uint64_t v18 = *(void *)(a1 + 8);
    }
    uint64_t v19 = *(void *)(a1 + 312);
    *(void *)(v18 + 96) = v19;
    uint64_t v20 = *(void *)(v18 + 88);
    uint64_t v21 = v20 + *(unsigned int *)(v18 + 80);
    if (v21 <= v19 || v19 < v20) {
      unsigned int v23 = 0;
    }
    else {
      unsigned int v23 = v21 - v19;
    }
    size_t v5 = *(unsigned int *)(a1 + 304);
    if (v23 < v5)
    {
      if (*(_DWORD *)(a1 + 284) < v5)
      {
        *(_DWORD *)(a1 + 284) = v5;
        CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)(a1 + 288), v5, 0);
        LODWORD(v5) = *(_DWORD *)(a1 + 304);
      }
      *(_DWORD *)(a1 + 256) = v5;
      uint64_t v6 = *(unsigned __int8 **)(a1 + 288);
      *(void *)(a1 + 264) = v6;
      goto LABEL_5;
    }
    v56.int mStartOffset = *(void *)(a1 + 184);
    unsigned int v54 = v23;
    unsigned int v55 = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *, AudioStreamPacketDescription *, unsigned int *))(*(void *)a1 + 208))(a1, v19, &v54, &v56, &v55);
    if (result) {
      goto LABEL_42;
    }
    uint64_t v24 = v55;
    if (!v55)
    {
      *(_DWORD *)(a1 + 236) = -1;
      return 2003334207;
    }
    uint64_t v25 = 0;
    uint64_t v26 = *(void *)(a1 + 8);
    uint64_t v27 = *(void *)(v26 + 88);
    uint64_t v28 = *(void *)(v26 + 96);
    if (v28 >= v27)
    {
      uint64_t v29 = v27 + *(unsigned int *)(v26 + 80);
      if (v29 > v28 && v29 - v28 != 0) {
        uint64_t v25 = (const void *)(*(void *)(v26 + 72) + (v28 - v27));
      }
    }
    if (*(_DWORD *)(a1 + 416))
    {
      uint64_t v31 = v54;
      uint64_t v32 = *(void *)(v26 + 16);
      *(void *)(v32 + 224) += *(_DWORD *)(v32 + 44) * v55;
      uint64_t v33 = *(void *)(v32 + 216) + v31;
      *(void *)(v32 + 208) += v24;
      *(void *)(v32 + 216) = v33;
      (*(void (**)(void))(v26 + 32))(*(void *)(v26 + 40));
    }
    else
    {
      if (*(_DWORD *)(a1 + 200) < v55)
      {
        uint64_t v34 = (1 << -__clz(v55 - 1));
        *(_DWORD *)(a1 + 200) = v34;
        CADeprecated::CAAutoFree<AudioStreamPacketDescription>::reallocItems((void **)(a1 + 192), v34);
        LODWORD(v24) = v55;
      }
      MP4BoxParser_Track::UpdateOffsetTableToIndex(*(MP4BoxParser_Track **)(a1 + 472), v24 + *(_DWORD *)(a1 + 184));
      unsigned int v52 = 0;
      if (v55)
      {
        uint64_t v35 = 0;
        unint64_t v36 = 0;
        SInt64 v37 = 0;
        while (1)
        {
          uint64_t result = MP4Parser_PacketProvider::GetPacketInfo(*(MP4Parser_PacketProvider **)(a1 + 472), (int)v36 + *(_DWORD *)(a1 + 184), &v52, (unint64_t *)&v53);
          if (result) {
            break;
          }
          uint64_t v38 = *v17;
          uint64_t v39 = &(*v17)[v35];
          v39->int mStartOffset = v37;
          uint64_t v40 = v52;
          v39->mVariableFramesInPacket = 0;
          v39->mDataByteSize = v40;
          v37 += v40;
          ++v36;
          unsigned int v41 = v55;
          ++v35;
          if (v36 >= v55) {
            goto LABEL_40;
          }
        }
LABEL_42:
        if (result == 1685348671)
        {
          uint64_t result = 1685348671;
          *(unsigned char *)(a1 + 177) = 1;
        }
        goto LABEL_44;
      }
      unsigned int v41 = 0;
      uint64_t v38 = *v17;
LABEL_40:
      AudioFileStreamWrapper::CallPacketsProc(*(AudioFileStreamWrapper **)(a1 + 8), v54, v41, v25, v38, 1);
    }
    *(void *)(*(void *)(a1 + 8) + 96) += v54;
    uint64_t v15 = *(void *)(a1 + 184) + v55;
    *(void *)(a1 + 184) = v15;
  }
  uint64_t v43 = 0;
  *(unsigned char *)(a1 + 550) = 1;
  uint64_t v44 = *(void *)(a1 + 8);
  uint64_t v45 = *(void *)(a1 + 344);
  *(void *)(v44 + 96) = v45;
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = AudioFileStreamObject::ParseHeader;
  *(void *)(a2 + 16) = 0;
  uint64_t v46 = *(void *)(v44 + 88);
  uint64_t v47 = v46 + *(unsigned int *)(v44 + 80);
  BOOL v48 = v45 < v46 || v47 <= v45;
  int v49 = v48;
  int v50 = v47 - v45;
  if (!v48 && v50) {
    uint64_t v43 = *(void *)(v44 + 72) + (v45 - v46);
  }
  uint64_t result = 0;
  *(void *)(a2 + 32) = v43;
  if (v49) {
    int v51 = 0;
  }
  else {
    int v51 = v50;
  }
  *(_DWORD *)(a2 + 24) = v51;
  return result;
}

uint64_t MP4AudioStream::ParseHeader(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v137 = *MEMORY[0x1E4F143B8];
  int v4 = (unint64_t *)(a1 + 516);
  int v5 = *(_DWORD *)(a1 + 236);
  if (v5 <= 196)
  {
    if (v5 <= 108)
    {
      if (v5 == -1) {
        return 0;
      }
      if (v5) {
        goto LABEL_30;
      }
      if (*(unsigned char *)(a1 + 332))
      {
        uint64_t v12 = *(void *)(a1 + 344);
        *(void *)(a1 + 296) = v12;
        *(void *)(a1 + 344) = v12;
        goto LABEL_76;
      }
      int v24 = 8;
      *(_DWORD *)(a1 + 256) = 8;
      uint64_t v25 = (unsigned __int8 *)(a1 + 551);
      *(void *)(a1 + 264) = a1 + 551;
    }
    else
    {
      if (v5 != 109)
      {
        if (v5 != 126)
        {
          if (v5 == 155)
          {
            int v8 = *(_DWORD *)(a1 + 256);
            int v9 = *(unsigned __int8 **)(a1 + 264);
            goto LABEL_41;
          }
LABEL_30:
          uint64_t v13 = 0;
          goto LABEL_187;
        }
        unsigned int v14 = *(_DWORD *)(a1 + 256);
        uint64_t v15 = *(unsigned __int8 **)(a1 + 264);
LABEL_22:
        LODWORD(buf.mASBD.mSampleRate) = v14;
        StreamBuffer::Copy((void *)(*(void *)(v3 + 8) + 72), (unsigned int *)&buf, v15);
        int mSampleRate_low = LODWORD(buf.mASBD.mSampleRate);
        int v17 = *(_DWORD *)(v3 + 256);
        *(void *)(v3 + 264) += LODWORD(buf.mASBD.mSampleRate);
        int v18 = v17 - mSampleRate_low;
        *(_DWORD *)(v3 + 256) = v18;
        if (v18)
        {
          uint64_t v13 = 0;
          int v30 = 126;
          goto LABEL_188;
        }
        *(unint64_t *)((char *)v4 + 35) = *v4;
        uint64_t v19 = *(unsigned int *)(v3 + 524);
        *(void *)(v3 + 296) = v19 + *(void *)(v3 + 296) - 8;
        if (v19) {
          operator new();
        }
LABEL_186:
        uint64_t v13 = 1685348671;
        *(unsigned char *)(v3 + 177) = 1;
LABEL_187:
        int v30 = -1;
        goto LABEL_188;
      }
      int v24 = *(_DWORD *)(a1 + 256);
      uint64_t v25 = *(unsigned __int8 **)(a1 + 264);
    }
    LODWORD(buf.mASBD.mSampleRate) = v24;
    StreamBuffer::Copy((void *)(*(void *)(a1 + 8) + 72), (unsigned int *)&buf, v25);
    int v31 = LODWORD(buf.mASBD.mSampleRate);
    int v32 = *(_DWORD *)(v3 + 256);
    *(void *)(v3 + 264) += LODWORD(buf.mASBD.mSampleRate);
    int v33 = v32 - v31;
    *(_DWORD *)(v3 + 256) = v33;
    if (v33)
    {
      uint64_t v13 = 0;
      int v30 = 109;
      goto LABEL_188;
    }
    *(void *)(v3 + 296) += 8;
    unint64_t v34 = *(unint64_t *)((char *)v4 + 35);
    unint64_t *v4 = v34;
    if (HIDWORD(v34) != 1887007846) {
      goto LABEL_186;
    }
    uint64_t v35 = *(void *)(v3 + 8);
    LODWORD(buf.mASBD.mSampleRate) = 1;
    if (!*(unsigned char *)(v35 + 104))
    {
      *(unsigned char *)(v35 + 104) = 1;
      unint64_t v36 = *(void (**)(void, void, uint64_t, AudioFormatInfo *))(v35 + 24);
      if (v36)
      {
        v36(*(void *)(v35 + 40), *(unsigned int *)(v35 + 8), 1717988724, &buf);
        LODWORD(v34) = *(_DWORD *)v4;
      }
    }
    unsigned int v37 = bswap32(v34);
    *(_DWORD *)(v3 + 524) = v37;
    if (v37 - 257 <= 0xFFFFFF06) {
      goto LABEL_186;
    }
    unsigned int v14 = v37 - 8;
    *(_DWORD *)(v3 + 256) = v14;
    uint64_t v15 = (unsigned __int8 *)(v3 + 559);
    *(void *)(v3 + 264) = v3 + 559;
    goto LABEL_22;
  }
  if (v5 > 248)
  {
    if (v5 == 249)
    {
      int v28 = *(_DWORD *)(a1 + 256);
      uint64_t v29 = *(unsigned __int8 **)(a1 + 264);
LABEL_158:
      LODWORD(buf.mASBD.mSampleRate) = v28;
      StreamBuffer::Copy((void *)(*(void *)(v3 + 8) + 72), (unsigned int *)&buf, v29);
      int v103 = LODWORD(buf.mASBD.mSampleRate);
      int v104 = *(_DWORD *)(v3 + 256);
      *(void *)(v3 + 264) += LODWORD(buf.mASBD.mSampleRate);
      int v105 = v104 - v103;
      *(_DWORD *)(v3 + 256) = v105;
      if (!v105)
      {
        *(void *)(v3 + 296) = *(unsigned int *)(v3 + 536) + *(void *)(v3 + 296) - 8;
        operator new();
      }
      uint64_t v13 = 0;
      int v30 = 249;
      goto LABEL_188;
    }
    if (v5 == 363)
    {
      int v22 = *(_DWORD *)(a1 + 256);
      unsigned int v23 = *(unsigned __int8 **)(a1 + 264);
LABEL_163:
      LODWORD(buf.mASBD.mSampleRate) = v22;
      StreamBuffer::Copy((void *)(*(void *)(v3 + 8) + 72), (unsigned int *)&buf, v23);
      int v107 = LODWORD(buf.mASBD.mSampleRate);
      int v108 = *(_DWORD *)(v3 + 256);
      *(void *)(v3 + 264) += LODWORD(buf.mASBD.mSampleRate);
      int v109 = v108 - v107;
      *(_DWORD *)(v3 + 256) = v109;
      if (!v109)
      {
        *(void *)(v3 + 296) = *(unsigned int *)(v3 + 536) + *(void *)(v3 + 296) - 8;
        if (*(unsigned char *)(v3 + 546)) {
          operator new();
        }
        if (*(unsigned char *)(v3 + 548)) {
          operator new();
        }
        MP4BoxParser::MP4BoxParser((MP4BoxParser *)&buf, *(const void **)(v3 + 368));
      }
      uint64_t v13 = 0;
      int v30 = 363;
      goto LABEL_188;
    }
    if (v5 != 628) {
      goto LABEL_30;
    }
    int v10 = *(_DWORD *)(a1 + 256);
    uint64_t v11 = *(unsigned __int8 **)(a1 + 264);
LABEL_68:
    LODWORD(buf.mASBD.mSampleRate) = v10;
    StreamBuffer::Copy((void *)(*(void *)(v3 + 8) + 72), (unsigned int *)&buf, v11);
    int v54 = LODWORD(buf.mASBD.mSampleRate);
    int v55 = *(_DWORD *)(v3 + 256);
    *(void *)(v3 + 264) += LODWORD(buf.mASBD.mSampleRate);
    int v56 = v55 - v54;
    *(_DWORD *)(v3 + 256) = v56;
    if (!v56)
    {
      *(void *)(v3 + 296) = *(unsigned int *)(v3 + 524) + *(void *)(v3 + 296) - 8;
      UInt32 ioPropertyDataSize = 0;
      operator new();
    }
    uint64_t v13 = 0;
    int v30 = 628;
    goto LABEL_188;
  }
  if (v5 != 197)
  {
    if (v5 == 215)
    {
      int v20 = *(_DWORD *)(a1 + 256);
      uint64_t v21 = *(unsigned __int8 **)(a1 + 264);
      goto LABEL_139;
    }
    if (v5 == 234)
    {
      int v6 = *(_DWORD *)(a1 + 256);
      size_t v7 = *(unsigned __int8 **)(a1 + 264);
LABEL_152:
      LODWORD(buf.mASBD.mSampleRate) = v6;
      StreamBuffer::Copy((void *)(*(void *)(v3 + 8) + 72), (unsigned int *)&buf, v7);
      int v99 = LODWORD(buf.mASBD.mSampleRate);
      int v100 = *(_DWORD *)(v3 + 256);
      *(void *)(v3 + 264) += LODWORD(buf.mASBD.mSampleRate);
      int v101 = v100 - v99;
      *(_DWORD *)(v3 + 256) = v101;
      if (!v101)
      {
        *(void *)(v3 + 296) = *(unsigned int *)(v3 + 536) + *(void *)(v3 + 296) - 8;
        operator new();
      }
      uint64_t v13 = 0;
      int v30 = 234;
      goto LABEL_188;
    }
    goto LABEL_30;
  }
  int v26 = *(_DWORD *)(a1 + 256);
  uint64_t v27 = *(unsigned __int8 **)(a1 + 264);
  while (1)
  {
    LODWORD(buf.mASBD.mSampleRate) = v26;
    StreamBuffer::Copy((void *)(*(void *)(v3 + 8) + 72), (unsigned int *)&buf, v27);
    int v92 = LODWORD(buf.mASBD.mSampleRate);
    int v93 = *(_DWORD *)(v3 + 256);
    *(void *)(v3 + 264) += LODWORD(buf.mASBD.mSampleRate);
    int v94 = v93 - v92;
    *(_DWORD *)(v3 + 256) = v94;
    if (v94)
    {
      uint64_t v13 = 0;
      int v30 = 197;
      goto LABEL_188;
    }
    size_t v95 = bswap32(*(_DWORD *)(v3 + 528));
    *(_DWORD *)(v3 + 536) = v95;
    if (v95 <= 7) {
      goto LABEL_186;
    }
    uint64_t v96 = *(void *)(v3 + 296);
    if (*(void *)(v3 + 344) - v96 < v95) {
      goto LABEL_186;
    }
    *(void *)(v3 + 296) = v96 + 8;
    *(void *)(v3 + 352) += v95;
    int v97 = *(_DWORD *)(v3 + 532);
    if (v97 == 1684567661)
    {
      if (v95 < 0x79)
      {
        *(unint64_t *)((char *)v4 + 35) = *(void *)(v3 + 528);
        int v20 = v95 - 8;
        *(_DWORD *)(v3 + 256) = v95 - 8;
        uint64_t v21 = (unsigned __int8 *)(v3 + 559);
        *(void *)(v3 + 264) = v3 + 559;
LABEL_139:
        LODWORD(buf.mASBD.mSampleRate) = v20;
        StreamBuffer::Copy((void *)(*(void *)(v3 + 8) + 72), (unsigned int *)&buf, v21);
        int v89 = LODWORD(buf.mASBD.mSampleRate);
        int v90 = *(_DWORD *)(v3 + 256);
        *(void *)(v3 + 264) += LODWORD(buf.mASBD.mSampleRate);
        int v91 = v90 - v89;
        *(_DWORD *)(v3 + 256) = v91;
        if (!v91)
        {
          *(void *)(v3 + 296) = *(unsigned int *)(v3 + 536) + *(void *)(v3 + 296) - 8;
          MP4BoxParser::MP4BoxParser((MP4BoxParser *)&buf, (const void *)(v3 + 551));
        }
        uint64_t v13 = 0;
        int v30 = 215;
LABEL_188:
        *(_DWORD *)(v3 + 236) = v30;
        return v13;
      }
      goto LABEL_186;
    }
    if (*(unsigned char *)(v3 + 542) && v97 == 2019915373)
    {
      *(void *)(v3 + 392) = 0;
      BOOL v98 = malloc_type_malloc(v95, 0x7C51E058uLL);
      if (!v98)
      {
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v124 = std::bad_alloc::bad_alloc(exception);
      }
      *(void *)(v3 + 392) = v98;
      *BOOL v98 = *(void *)(v3 + 528);
      int v6 = *(_DWORD *)(v3 + 536) - 8;
      *(_DWORD *)(v3 + 256) = v6;
      size_t v7 = (unsigned __int8 *)(*(void *)(v3 + 392) + 8);
      *(void *)(v3 + 264) = v7;
      goto LABEL_152;
    }
    if (*(unsigned char *)(v3 + 545) && v97 == 1801548404)
    {
      *(void *)(v3 + 376) = 0;
      int v102 = malloc_type_malloc(v95, 0x7C51E058uLL);
      if (!v102)
      {
        v125 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v126 = std::bad_alloc::bad_alloc(v125);
      }
      *(void *)(v3 + 376) = v102;
      *int v102 = *(void *)(v3 + 528);
      int v28 = *(_DWORD *)(v3 + 536) - 8;
      *(_DWORD *)(v3 + 256) = v28;
      uint64_t v29 = (unsigned __int8 *)(*(void *)(v3 + 376) + 8);
      *(void *)(v3 + 264) = v29;
      goto LABEL_158;
    }
    if (v97 == 1635017845)
    {
      *(void *)(v3 + 368) = 0;
      unsigned int v106 = (unsigned __int8 *)malloc_type_malloc(v95, 0x7C51E058uLL);
      unsigned int v23 = v106;
      if (!v106)
      {
        v127 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v128 = std::bad_alloc::bad_alloc(v127);
      }
      *(void *)(v3 + 368) = v106;
      int v22 = *(_DWORD *)(v3 + 536) - 8;
      *(_DWORD *)(v3 + 256) = v22;
      *(void *)(v3 + 264) = v106;
      goto LABEL_163;
    }
    uint64_t v44 = *(void *)(v3 + 344);
    uint64_t v41 = *(void *)(v3 + 352);
    if (v41 >= v44)
    {
      int v110 = 0;
      if (*(unsigned char *)(v3 + 545)) {
        goto LABEL_186;
      }
    }
    else
    {
      int v110 = *(unsigned __int8 *)(v3 + 545);
    }
    *(void *)(*(void *)(v3 + 8) + 96) = v41;
    *(void *)(v3 + 296) = v41;
    if (v110 || *(unsigned char *)(v3 + 542) || *(unsigned char *)(v3 + 546)) {
      goto LABEL_173;
    }
    if (!*(unsigned char *)(v3 + 548) || v41 >= v44) {
      break;
    }
LABEL_174:
    int v26 = 8;
    *(_DWORD *)(v3 + 256) = 8;
    uint64_t v27 = (unsigned __int8 *)(v3 + 528);
    *(void *)(v3 + 264) = v3 + 528;
  }
LABEL_181:
  uint64_t v112 = *(void *)(v3 + 8);
  *(void *)(v112 + 96) = v44;
  *(void *)(v3 + 296) = v44;
  if (!*(unsigned char *)(v3 + 541)) {
    goto LABEL_71;
  }
  if (!*(unsigned char *)(v3 + 543))
  {
    MP4AudioStream::SetStreamLengthAndPacketCountPerPacketProvider(v3);
    goto LABEL_71;
  }
  unsigned int v113 = *(_DWORD *)(v3 + 408);
  int v114 = 480;
  if (v113 == 1935764850) {
    goto LABEL_193;
  }
  if (v113 == 1935767394)
  {
    int v114 = 915;
    goto LABEL_193;
  }
  if (v113 >> 8 == 6381923)
  {
    int v114 = 768 * *(_DWORD *)(v3 + 428);
LABEL_193:
    *(_DWORD *)(v3 + 112) = v114;
    LODWORD(buf.mASBD.mSampleRate) = 1;
    v116 = *(void (**)(void, void, uint64_t, AudioFormatInfo *))(v112 + 24);
    if (v116) {
      v116(*(void *)(v112 + 40), *(unsigned int *)(v112 + 8), 1886616165, &buf);
    }
    goto LABEL_71;
  }
  v135[0] = 0;
  UInt32 v117 = *(_DWORD *)(v3 + 428);
  buf.mASBD.mSampleRate = *(Float64 *)(v3 + 400);
  *(_OWORD *)&buf.mASBD.mFormatID = xmmword_1901C60C0;
  buf.mASBD.mBytesPerFrame = 4;
  buf.mASBD.mChannelsPerFrame = v117;
  *(void *)&buf.mASBD.mBitsPerChannel = 32;
  int v118 = AudioConverterNewWithOptions((AudioStreamBasicDescription *)(v3 + 400), &buf.mASBD, 0, v135);
  v119 = v135[0];
  if (v135[0])
  {
    UInt32 v120 = *(_DWORD *)(v3 + 128);
    if (v120) {
      int v118 = AudioConverterSetProperty(v135[0], 0x646D6763u, v120, *(const void **)(v3 + 120));
    }
    if (!v118)
    {
      LODWORD(outPropertyData) = 0;
      UInt32 ioPropertyDataSize = 4;
      if (!AudioConverterGetProperty(v119, 0x78697073u, &ioPropertyDataSize, &outPropertyData))
      {
        if (outPropertyData)
        {
          *(_DWORD *)(v3 + 112) = outPropertyData;
          uint64_t v121 = *(void *)(v3 + 8);
          *(_DWORD *)v134 = 1;
          v122 = *(void (**)(void, void, uint64_t, uint8_t *))(v121 + 24);
          if (v122) {
            v122(*(void *)(v121 + 40), *(unsigned int *)(v121 + 8), 1886616165, v134);
          }
        }
      }
    }
    AudioConverterDispose(v119);
  }
  while (1)
  {
    while (1)
    {
LABEL_71:
      if (*(void *)(v3 + 832))
      {
        uint64_t v57 = *(void *)(v3 + 8);
        LODWORD(buf.mASBD.mSampleRate) = 0;
        if (!*(unsigned char *)(v57 + 110))
        {
          *(unsigned char *)(v57 + 110) = 1;
          uint64_t v58 = *(void (**)(void, void, uint64_t, AudioFormatInfo *))(v57 + 24);
          if (v58) {
            v58(*(void *)(v57 + 40), *(unsigned int *)(v57 + 8), 1819243876, &buf);
          }
        }
      }
      uint64_t v12 = *(void *)(v3 + 296);
LABEL_76:
      *(void *)(v3 + 336) = v12;
      int v8 = 8;
      *(_DWORD *)(v3 + 256) = 8;
      int v9 = (unsigned __int8 *)(v3 + 516);
      *(void *)(v3 + 264) = v3 + 516;
LABEL_41:
      LODWORD(buf.mASBD.mSampleRate) = v8;
      StreamBuffer::Copy((void *)(*(void *)(v3 + 8) + 72), (unsigned int *)&buf, v9);
      int v38 = LODWORD(buf.mASBD.mSampleRate);
      int v39 = *(_DWORD *)(v3 + 256);
      *(void *)(v3 + 264) += LODWORD(buf.mASBD.mSampleRate);
      int v40 = v39 - v38;
      *(_DWORD *)(v3 + 256) = v40;
      if (v40)
      {
        uint64_t v13 = 0;
        int v30 = 155;
        goto LABEL_188;
      }
      uint64_t v41 = *(void *)(v3 + 296) + 8;
      *(void *)(v3 + 296) = v41;
      size_t v42 = bswap32(*(_DWORD *)(v3 + 516));
      *(_DWORD *)(v3 + 524) = v42;
      if (v42 <= 7) {
        goto LABEL_186;
      }
      uint64_t v43 = *(void *)(v3 + 344);
      if ((uint64_t)(v42 ^ 0x7FFFFFFFFFFFFFFFLL) < v43) {
        goto LABEL_186;
      }
      uint64_t v44 = v43 + v42;
      *(void *)(v3 + 344) = v44;
      int v45 = *(_DWORD *)(v3 + 520);
      if (v45 != 1718579053) {
        break;
      }
      if (*(void *)(v3 + 472))
      {
        *(void *)(v3 + 384) = 0;
        uint64_t v53 = malloc_type_malloc(v42, 0x7C51E058uLL);
        if (!v53)
        {
          v87 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          UInt32 v88 = std::bad_alloc::bad_alloc(v87);
        }
        *(void *)(v3 + 384) = v53;
        *uint64_t v53 = *v4;
        int v10 = *(_DWORD *)(v3 + 524) - 8;
        *(_DWORD *)(v3 + 256) = v10;
        uint64_t v11 = (unsigned __int8 *)(*(void *)(v3 + 384) + 8);
        *(void *)(v3 + 264) = v11;
        goto LABEL_68;
      }
LABEL_70:
      *(void *)(*(void *)(v3 + 8) + 96) = v44;
      *(void *)(v3 + 296) = v44;
    }
    if (v45 != 1952539757)
    {
      if (v45 != 1987014509) {
        goto LABEL_70;
      }
      int v46 = *(_DWORD *)(v3 + 16);
      if (v46 == 1832149606 || v46 == 1832149350)
      {
        *(unsigned char *)(v3 + 540) = 1;
        *(unsigned char *)(v3 + 546) = 1;
        *(unsigned char *)(v3 + 548) = 1;
      }
      else
      {
        *(_WORD *)(v3 + 541) = 257;
      }
      *(unsigned char *)(v3 + 545) = 1;
      *(void *)(v3 + 352) = v41;
LABEL_173:
      if (v41 < v44) {
        goto LABEL_174;
      }
      goto LABEL_181;
    }
    *(unsigned char *)(v3 + 546) = 0;
    *(unsigned char *)(v3 + 548) = 0;
    if (!*(void *)(v3 + 376) || !*(_DWORD *)(v3 + 512))
    {
LABEL_80:
      uint64_t v13 = 1869640813;
      goto LABEL_187;
    }
    if (*(unsigned char *)(v3 + 550))
    {
      if (!*(unsigned char *)(v3 + 549)) {
        goto LABEL_80;
      }
      *(_WORD *)(v3 + 549) = 0;
    }
    uint64_t v48 = *(void *)(v3 + 472);
    if (v48)
    {
      unsigned int v49 = (*(uint64_t (**)(uint64_t))(*(void *)v48 + 32))(v48);
      if (v49) {
        break;
      }
    }
  }
  uint64_t v50 = *(void *)(v3 + 8);
  if (*(_DWORD *)(v50 + 112)) {
    goto LABEL_125;
  }
  unsigned int v51 = v49;
  if (!*(unsigned char *)(v3 + 541))
  {
    if (!MP4BoxParser_Track::GetPacketTableInfo(*(MP4BoxParser_Track **)(v3 + 472), (AudioFilePacketTableInfo *)v134, v49, *(_DWORD *)(v3 + 512), 0))
    {
LABEL_83:
      if (*(unsigned char *)(v3 + 547) || *(void *)(v3 + 160) == -1) {
        goto LABEL_116;
      }
      unsigned int v59 = *(_DWORD *)(v3 + 408);
      if (v59 == 1633889587)
      {
        unsigned int v60 = 0;
        unsigned int v61 = *(_DWORD *)(v3 + 420);
      }
      else
      {
        if (v59 >> 8 != 6381923)
        {
          long long v70 = *(_OWORD *)(v3 + 416);
          *(_OWORD *)&buf.mASBD.mSampleRate = *(_OWORD *)(v3 + 400);
          *(_OWORD *)&buf.mASBD.mBytesPerPacket = v70;
          uint64_t v71 = *(const void **)(v3 + 120);
          *(void *)&buf.mASBD.mBitsPerChannel = *(void *)(v3 + 432);
          buf.mMagicCookie = v71;
          *(void *)&buf.mMagicCookieSize = 0;
          buf.mMagicCookieSize = *(_DWORD *)(v3 + 128);
          LODWORD(v135[0]) = 0;
          LODWORD(outPropertyData) = 4;
          if (!GetCodecPropertyFromFormatInfo(&buf, (unsigned int *)&outPropertyData, v135, 0x64657066u))
          {
            unint64_t v72 = *(unsigned int *)(a1 + 420) * (unint64_t)v51;
            unint64_t v73 = v72 - LODWORD(v135[0]);
            if (v72 < LODWORD(v135[0])) {
              unint64_t v73 = 0;
            }
            if (v72 > LODWORD(v135[0])) {
              LODWORD(v72) = v135[0];
            }
            *(void *)(a1 + 160) = v73;
            *(_DWORD *)(a1 + 168) = v72;
            *(_DWORD *)(a1 + 172) = 0;
          }
          uint64_t v3 = a1;
          goto LABEL_116;
        }
        unsigned int v61 = *(_DWORD *)(v3 + 420);
        LODWORD(outPropertyData) = 0;
        if (*(_DWORD *)(v3 + 128))
        {
          DecoderConfigDescr::DecoderConfigDescr((DecoderConfigDescr *)v133);
          char v62 = *(__CFDictionary **)(a1 + 120);
          uint64_t v63 = *(unsigned int *)(a1 + 128);
          unsigned int v64 = (__CFDictionary *)((char *)v62 + v63);
          v135[0] = v62;
          v135[1] = (__CFDictionary *)((char *)v62 + v63);
          uint64_t v136 = 0;
          if ((v62 & 3) != 0 && v63)
          {
            int v65 = 0;
            double v66 = (__CFDictionary *)((char *)v62 + 1);
            int v67 = -8;
            int v68 = v66;
            do
            {
              HIDWORD(v136) = v67 + 16;
              v135[0] = v68;
              int v65 = *((unsigned __int8 *)v68 - 1) | (v65 << 8);
              LODWORD(v136) = v65;
              v67 += 8;
              if ((v66 & 3) == 0) {
                break;
              }
              LOBYTE(v66) = (_BYTE)v66 + 1;
              BOOL v69 = v68 >= v64;
              int v68 = (__CFDictionary *)((char *)v68 + 1);
            }
            while (!v69);
            LODWORD(v136) = v65 << (24 - v67);
          }
          if (MP4AudioESDS::Deserialize((uint64_t)&buf, (uint64_t)v135, 0, 0))
          {
            unsigned int v60 = 0;
          }
          else if (DecoderConfigDescr::GetDefaultPriming((DecoderConfigDescr *)v133, (unsigned int *)&outPropertyData))
          {
            unsigned int v60 = 0;
          }
          else
          {
            unsigned int v60 = outPropertyData;
          }
          MP4AudioESDS::~MP4AudioESDS((MP4AudioESDS *)&buf);
        }
        else
        {
          unsigned int v60 = 2112;
        }
        uint64_t v3 = a1;
      }
      unint64_t v74 = v51 * (unint64_t)v61;
      unint64_t v75 = v74 - v60;
      if (v74 < v60) {
        unint64_t v75 = 0;
      }
      *(void *)(v3 + 160) = v75;
      if (v74 > v60) {
        LODWORD(v74) = v60;
      }
      *(_DWORD *)(v3 + 168) = v74;
      *(_DWORD *)(v3 + 172) = 0;
      goto LABEL_116;
    }
LABEL_82:
    *(_OWORD *)(v3 + 160) = *(_OWORD *)v134;
    goto LABEL_116;
  }
  int v52 = *(unsigned __int8 *)(v3 + 543);
  if (MP4BoxParser_Track::GetPacketTableInfo(*(MP4BoxParser_Track **)(v3 + 472), (AudioFilePacketTableInfo *)v134, v49, *(_DWORD *)(v3 + 512), v52))
  {
    goto LABEL_82;
  }
  if (!v52) {
    goto LABEL_83;
  }
LABEL_116:
  buf.mASBD.mSampleRate = 0.0;
  MP4Parser_PacketProvider::GetPacketOffset(*(MP4Parser_PacketProvider **)(v3 + 472), 0, (unint64_t *)&buf);
  *(Float64 *)(v3 + 104) = buf.mASBD.mSampleRate;
  uint64_t v50 = *(void *)(v3 + 8);
  LODWORD(v135[0]) = 1;
  unsigned int v76 = *(void (**)(void, void, uint64_t, __CFDictionary **))(v50 + 24);
  if (v76)
  {
    v76(*(void *)(v50 + 40), *(unsigned int *)(v50 + 8), 1685022310, v135);
    uint64_t v50 = *(void *)(v3 + 8);
  }
  if (*(void *)(v3 + 160) != -1)
  {
    LODWORD(v135[0]) = 1;
    if (!*(unsigned char *)(v50 + 106))
    {
      *(unsigned char *)(v50 + 106) = 1;
      uint64_t v77 = *(void (**)(void, void, uint64_t, __CFDictionary **))(v50 + 24);
      if (v77)
      {
        v77(*(void *)(v50 + 40), *(unsigned int *)(v50 + 8), 1886283375, v135);
        uint64_t v50 = *(void *)(v3 + 8);
      }
    }
  }
  LODWORD(v135[0]) = 1;
  if (!*(_DWORD *)(v50 + 112))
  {
    *(_DWORD *)(v50 + 112) = 1;
    unsigned int v78 = *(void (**)(void, void, uint64_t, __CFDictionary **))(v50 + 24);
    if (v78)
    {
      v78(*(void *)(v50 + 40), *(unsigned int *)(v50 + 8), 1919247481, v135);
      uint64_t v50 = *(void *)(v3 + 8);
    }
  }
LABEL_125:
  uint64_t v79 = 0;
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = AudioFileStreamObject::GeneratePackets;
  *(void *)(a2 + 16) = 0;
  uint64_t v80 = *(void *)(v50 + 88);
  uint64_t v81 = *(void *)(v50 + 96);
  uint64_t v82 = v80 + *(unsigned int *)(v50 + 80);
  BOOL v83 = v81 < v80 || v82 <= v81;
  int v84 = v83;
  int v85 = v82 - v81;
  if (!v83 && v85) {
    uint64_t v79 = *(void *)(v50 + 72) + (v81 - v80);
  }
  uint64_t v13 = 0;
  *(void *)(a2 + 32) = v79;
  if (v84) {
    int v86 = 0;
  }
  else {
    int v86 = v85;
  }
  *(_DWORD *)(a2 + 24) = v86;
  return v13;
}

void sub_1900D3FF0(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)(v1 - 176);
  if (v3)
  {
    *(void *)(v1 - 168) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

void sub_1900D4008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  CACFDictionary::~CACFDictionary((CACFDictionary *)(v13 - 176));
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  _Unwind_Resume(a1);
}

void sub_1900D403C(_Unwind_Exception *a1)
{
  MEMORY[0x192FC8940](v1, 0x10A1C400A2E7247);
  _Unwind_Resume(a1);
}

void *std::vector<AudioFormatListItem>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<AudioFormatListItem>::__vallocate[abi:ne180100](a1, a2);
    int v4 = (char *)a1[1];
    size_t v5 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1900D413C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MP4AudioStream::SetStreamLengthAndPacketCountPerPacketProvider(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 472);
  if (v1)
  {
    int v2 = (void **)this;
    if (MP4BoxParser_Track::GetInfoFromTrackSubBoxes(*(MP4BoxParser_Track **)(this + 472))) {
      uint64_t v3 = 0;
    }
    else {
      uint64_t v3 = *(void *)(v1 + 104);
    }
    ((void (*)(void **, uint64_t))(*v2)[12])(v2, *(void *)(v1 + 448) + v3);
    unsigned int v4 = (*(uint64_t (**)(void *))(*v2[59] + 32))(v2[59]);
    ((void (*)(void **, void))(*v2)[10])(v2, v4);
    this = MP4Parser_PacketProvider::GetMaximumPacketSize((MP4Parser_PacketProvider *)v2[59]);
    *((_DWORD *)v2 + 28) = this;
    size_t v5 = v2[1];
    int v11 = 1;
    int v6 = (uint64_t (*)(void, void, uint64_t, int *))v5[3];
    if (v6)
    {
      this = v6(v5[5], *((unsigned int *)v5 + 2), 1650683508, &v11);
      size_t v7 = v2[1];
      int v8 = (uint64_t (*)(void, void, uint64_t, int *))v7[3];
      int v12 = 1;
      if (v8)
      {
        this = v8(v7[5], *((unsigned int *)v7 + 2), 1885564532, &v12);
        int v9 = v2[1];
        int v10 = (uint64_t (*)(void, void, uint64_t, int *))v9[3];
        int v13 = 1;
        if (v10) {
          return v10(v9[5], *((unsigned int *)v9 + 2), 1886616165, &v13);
        }
      }
    }
  }
  return this;
}

uint64_t MP4AudioStream::Seek(MP4AudioStream *this, uint64_t a2, uint64_t *a3, unsigned int *a4)
{
  if ((*(unsigned int (**)(void))(**((void **)this + 59) + 32))(*((void *)this + 59)) < a2) {
    return 1836020325;
  }
  uint64_t v11 = 0;
  uint64_t result = MP4Parser_PacketProvider::GetPacketOffset(*((MP4Parser_PacketProvider **)this + 59), a2, (unint64_t *)&v11);
  uint64_t v9 = v11;
  *a3 = v11 - *((void *)this + 13);
  if (!result)
  {
    *a4 = 0;
    *((_DWORD *)this + 59) = 0;
    *((void *)this + 30) = AudioFileStreamObject::GeneratePackets;
    *((void *)this + 31) = 0;
    *((void *)this + 23) = a2;
    uint64_t v10 = *((void *)this + 1);
    *(void *)(v10 + 88) = v9;
    *(void *)(v10 + 96) = v9;
    *(_DWORD *)(v10 + 80) = 0;
    *(void *)(v10 + 72) = 0;
  }
  return result;
}

uint64_t MP4AudioStream::GetProperty(MP4AudioStream *this, int a2, unsigned int *a3, void *__dst)
{
  if (a2 == 1819243876)
  {
    if (*a3 == 8)
    {
      int v6 = (const void *)*((void *)this + 104);
      if (v6)
      {
        int v8 = v6;
        __int16 v9 = 256;
        CFRetain(v6);
        goto LABEL_9;
      }
      return 1836020325;
    }
    return 561211770;
  }
  if (a2 == 1935893603)
  {
    if (*a3 == 8)
    {
      size_t v5 = (const void *)*((void *)this + 102);
      if (v5)
      {
        int v8 = v5;
        __int16 v9 = 0;
        CFRetain(v5);
LABEL_9:
        *__dst = v8;
        CACFDictionary::~CACFDictionary((CACFDictionary *)&v8);
        return 0;
      }
      return 1836020325;
    }
    return 561211770;
  }
  return AudioFileStreamObject::GetProperty(this, a2, a3, __dst);
}

void sub_1900D4474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t MP4AudioStream::GetPropertyInfo(MP4AudioStream *this, int a2, unsigned int *a3, unsigned __int8 *a4)
{
  if (a2 != 1819243876 && a2 != 1935893603) {
    return AudioFileStreamObject::GetPropertyInfo(this, a2, a3, a4);
  }
  if (a3) {
    *a3 = 8;
  }
  if (a4) {
    *a4 = 0;
  }
  return 0;
}

void MP4AudioStream::~MP4AudioStream(MP4AudioStream *this)
{
  MP4AudioStream::~MP4AudioStream(this);
  JUMPOUT(0x192FC8940);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  const void *v9;
  const void *v10;
  void *v11;
  uint64_t vars8;

  *(void *)this = &unk_1EDF8F720;
  int v2 = *((void *)this + 60);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 61);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unsigned int v4 = *((void *)this + 59);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  size_t v5 = (void *)*((void *)this + 47);
  if (v5) {
    free(v5);
  }
  int v6 = (void *)*((void *)this + 48);
  if (v6) {
    free(v6);
  }
  size_t v7 = (void *)*((void *)this + 46);
  if (v7) {
    free(v7);
  }
  int v8 = (void *)*((void *)this + 49);
  if (v8) {
    free(v8);
  }
  __int16 v9 = (const void *)*((void *)this + 102);
  if (v9) {
    CFRelease(v9);
  }
  uint64_t v10 = (const void *)*((void *)this + 104);
  if (v10) {
    CFRelease(v10);
  }
  uint64_t v11 = (void *)*((void *)this + 105);
  if (v11)
  {
    free(v11);
    *((void *)this + 105) = 0;
  }
  AudioFileStreamObject::~AudioFileStreamObject(this);
}

void MP4AudioStream::MP4AudioStream(MP4AudioStream *this, int a2)
{
  *((_OWORD *)this + 4) = 0u;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = -1;
  *((void *)this + 12) = -1;
  *((void *)this + 13) = -1;
  *((void *)this + 17) = 0;
  *((_DWORD *)this + 36) = 0;
  *((void *)this + 19) = 0;
  *((_WORD *)this + 88) = 0;
  *((_DWORD *)this + 59) = 0;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 0;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_DWORD *)this + 50) = 0;
  *((void *)this + 28) = 0;
  *((unsigned char *)this + 232) = 0;
  *((_OWORD *)this + 13) = 0u;
  *((void *)this + 30) = AudioFileStreamObject::ParseHeader;
  *((void *)this + 31) = 0;
  *((_DWORD *)this + 64) = 0;
  *((void *)this + 33) = 0;
  *(void *)((char *)this + 300) = 0;
  *(_OWORD *)((char *)this + 284) = 0u;
  *((_DWORD *)this + 82) = 0;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(void *)this = &unk_1EDF8F720;
  *((unsigned char *)this + 332) = 0;
  *((_DWORD *)this + 110) = 0;
  *(_OWORD *)((char *)this + 456) = 0u;
  *((void *)this + 44) = 0;
  *((_DWORD *)this + 90) = 0;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((void *)this + 56) = (char *)this + 456;
  *((void *)this + 61) = 0;
  *(_OWORD *)((char *)this + 472) = 0u;
  *((_DWORD *)this + 124) = 1;
  *((void *)this + 63) = 0;
  *((_DWORD *)this + 128) = 0;
  *((_DWORD *)this + 135) = 0;
  *((_WORD *)this + 272) = 256;
  *((unsigned char *)this + 550) = 0;
  *(_DWORD *)((char *)this + 546) = 0;
  *(_OWORD *)((char *)this + 808) = 0u;
  *((_DWORD *)this + 206) = 0;
  *((_OWORD *)this + 52) = 0u;
  *((void *)this + 20) = -1;
  *((void *)this + 21) = 0;
  bzero((char *)this + 400, 0x28uLL);
  *((_DWORD *)this + 4) = a2;
}

void DSPGraph::NewBoxRegistry::print(int a1, void *a2, int a3, unsigned int a4)
{
}

const char *DSPGraph::NewBoxRegistry::ClassName(DSPGraph::NewBoxRegistry *this)
{
  return "NewBoxRegistry";
}

void DSPGraph::NewBoxRegistry::~NewBoxRegistry(DSPGraph::NewBoxRegistry *this)
{
  *(void *)this = &unk_1EDF98158;
  int v2 = (char *)this + 8;
  uint64_t v3 = (void **)((char *)this + 88);
  std::vector<std::pair<std::string,AudioComponentDescription>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__hash_table<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<AudioComponentDescription>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,true>,std::__unordered_map_equal<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,std::hash<AudioComponentDescription>,true>,std::allocator<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::~__hash_table((uint64_t)this + 48);
  std::__hash_table<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::~__hash_table((uint64_t)v2);
  JUMPOUT(0x192FC8940);
}

{
  char *v2;
  void **v3;

  *(void *)this = &unk_1EDF98158;
  int v2 = (char *)this + 8;
  uint64_t v3 = (void **)((char *)this + 88);
  std::vector<std::pair<std::string,AudioComponentDescription>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__hash_table<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<AudioComponentDescription>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,true>,std::__unordered_map_equal<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,std::hash<AudioComponentDescription>,true>,std::allocator<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::~__hash_table((uint64_t)this + 48);
  std::__hash_table<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::~__hash_table((uint64_t)v2);
}

DSPGraph::Interpreter *DSPGraph::Interpreter::Interpreter(DSPGraph::Interpreter *this, const DSPGraph::NewBoxRegistry *a2)
{
  *(void *)this = &unk_1EDF97248;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = &unk_1EDF98158;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 10);
  unsigned int v59 = (uint64_t *)((char *)this + 24);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>>>::__rehash<true>((uint64_t)this + 24, *((void *)a2 + 2));
  size_t v5 = (unsigned __int8 *)*((void *)a2 + 3);
  if (v5)
  {
    int v6 = (void *)((char *)this + 40);
    do
    {
      unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(v5 + 16));
      unint64_t v8 = v7;
      unint64_t v9 = *((void *)this + 4);
      if (v9)
      {
        uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
        v10.i16[0] = vaddlv_u8(v10);
        unint64_t v11 = v10.u32[0];
        if (v10.u32[0] > 1uLL)
        {
          unint64_t v2 = v7;
          if (v7 >= v9) {
            unint64_t v2 = v7 % v9;
          }
        }
        else
        {
          unint64_t v2 = (v9 - 1) & v7;
        }
        int v12 = *(unsigned __int8 ***)(*v59 + 8 * v2);
        if (v12)
        {
          for (unsigned int i = *v12; i; unsigned int i = *(unsigned __int8 **)i)
          {
            unint64_t v14 = *((void *)i + 1);
            if (v14 == v8)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, v5 + 16)) {
                goto LABEL_44;
              }
            }
            else
            {
              if (v11 > 1)
              {
                if (v14 >= v9) {
                  v14 %= v9;
                }
              }
              else
              {
                v14 &= v9 - 1;
              }
              if (v14 != v2) {
                break;
              }
            }
          }
        }
      }
      uint64_t v15 = (char *)operator new(0x48uLL);
      UInt32 v16 = v15;
      unsigned int v60 = v15;
      unsigned int v61 = (char **)((char *)this + 40);
      LOBYTE(v62) = 0;
      *(void *)uint64_t v15 = 0;
      *((void *)v15 + 1) = v8;
      if ((char)v5[39] < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v15 + 16), *((const std::string::value_type **)v5 + 2), *((void *)v5 + 3));
      }
      else
      {
        long long v17 = *((_OWORD *)v5 + 1);
        *((void *)v15 + 4) = *((void *)v5 + 4);
        *((_OWORD *)v15 + 1) = v17;
      }
      std::__function::__value_func<DSPGraph::Box * ()(unsigned int,unsigned int)>::__value_func[abi:ne180100]((uint64_t)(v16 + 40), (uint64_t)(v5 + 40));
      LOBYTE(v62) = 1;
      float v18 = (float)(unint64_t)(*((void *)this + 6) + 1);
      float v19 = *((float *)this + 14);
      if (!v9 || (float)(v19 * (float)v9) < v18)
      {
        BOOL v20 = (v9 & (v9 - 1)) != 0;
        if (v9 < 3) {
          BOOL v20 = 1;
        }
        unint64_t v21 = v20 | (2 * v9);
        unint64_t v22 = vcvtps_u32_f32(v18 / v19);
        if (v21 <= v22) {
          size_t v23 = v22;
        }
        else {
          size_t v23 = v21;
        }
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>>>::__rehash<true>((uint64_t)v59, v23);
        unint64_t v9 = *((void *)this + 4);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9) {
            unint64_t v2 = v8 % v9;
          }
          else {
            unint64_t v2 = v8;
          }
        }
        else
        {
          unint64_t v2 = (v9 - 1) & v8;
        }
      }
      uint64_t v24 = *v59;
      uint64_t v25 = *(void **)(*v59 + 8 * v2);
      if (v25)
      {
        *(void *)UInt32 v16 = *v25;
      }
      else
      {
        *(void *)UInt32 v16 = *v6;
        *int v6 = v16;
        *(void *)(v24 + 8 * v2) = v6;
        if (!*(void *)v16) {
          goto LABEL_43;
        }
        unint64_t v26 = *(void *)(*(void *)v16 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v26 >= v9) {
            v26 %= v9;
          }
        }
        else
        {
          v26 &= v9 - 1;
        }
        uint64_t v25 = (void *)(*v59 + 8 * v26);
      }
      *uint64_t v25 = v16;
LABEL_43:
      unsigned int v60 = 0;
      ++*((void *)this + 6);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v60);
LABEL_44:
      size_t v5 = *(unsigned __int8 **)v5;
    }
    while (v5);
  }
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  uint64_t v27 = (uint64_t *)((char *)this + 64);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 20);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>>>::__rehash<true>((uint64_t)this + 64, *((void *)a2 + 7));
  int v28 = (uint64_t *)*((void *)a2 + 8);
  if (v28)
  {
    uint64_t v29 = (char **)((char *)this + 80);
    do
    {
      int v30 = v28 + 2;
      unint64_t v31 = *((unsigned int *)v28 + 5) + (unint64_t)*((unsigned int *)v28 + 4) + *((unsigned int *)v28 + 6);
      unint64_t v32 = *((void *)this + 9);
      if (v32)
      {
        uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v32);
        v33.i16[0] = vaddlv_u8(v33);
        if (v33.u32[0] > 1uLL)
        {
          unint64_t v2 = *((unsigned int *)v28 + 5) + (unint64_t)*((unsigned int *)v28 + 4) + *((unsigned int *)v28 + 6);
          if (v31 >= v32) {
            unint64_t v2 = v31 % v32;
          }
        }
        else
        {
          unint64_t v2 = (v32 - 1) & v31;
        }
        unint64_t v34 = *(uint64_t ***)(*v27 + 8 * v2);
        if (v34)
        {
          for (j = *v34; j; j = (uint64_t *)*j)
          {
            unint64_t v36 = j[1];
            if (v36 == v31)
            {
              if (j[2] == *v30 && *((_DWORD *)j + 6) == (unint64_t)*((unsigned int *)v28 + 6)) {
                goto LABEL_89;
              }
            }
            else
            {
              if (v33.u32[0] > 1uLL)
              {
                if (v36 >= v32) {
                  v36 %= v32;
                }
              }
              else
              {
                v36 &= v32 - 1;
              }
              if (v36 != v2) {
                break;
              }
            }
          }
        }
      }
      int v38 = (char *)operator new(0x48uLL);
      unsigned int v60 = v38;
      unsigned int v61 = (char **)((char *)this + 80);
      LOBYTE(v62) = 0;
      *(void *)int v38 = 0;
      *((void *)v38 + 1) = v31;
      int v39 = *((_DWORD *)v28 + 8);
      *((_OWORD *)v38 + 1) = *(_OWORD *)v30;
      *((_DWORD *)v38 + 8) = v39;
      std::__function::__value_func<DSPGraph::Box * ()(unsigned int,unsigned int)>::__value_func[abi:ne180100]((uint64_t)(v38 + 40), (uint64_t)(v28 + 5));
      LOBYTE(v62) = 1;
      float v40 = (float)(unint64_t)(*((void *)this + 11) + 1);
      float v41 = *((float *)this + 24);
      if (!v32 || (float)(v41 * (float)v32) < v40)
      {
        BOOL v42 = (v32 & (v32 - 1)) != 0;
        if (v32 < 3) {
          BOOL v42 = 1;
        }
        unint64_t v43 = v42 | (2 * v32);
        unint64_t v44 = vcvtps_u32_f32(v40 / v41);
        if (v43 <= v44) {
          size_t v45 = v44;
        }
        else {
          size_t v45 = v43;
        }
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>>>::__rehash<true>((uint64_t)this + 64, v45);
        unint64_t v32 = *((void *)this + 9);
        if ((v32 & (v32 - 1)) != 0)
        {
          if (v31 >= v32) {
            unint64_t v2 = v31 % v32;
          }
          else {
            unint64_t v2 = v31;
          }
        }
        else
        {
          unint64_t v2 = (v32 - 1) & v31;
        }
      }
      uint64_t v46 = *v27;
      uint64_t v47 = *(char ***)(*v27 + 8 * v2);
      if (v47)
      {
        *(void *)int v38 = *v47;
      }
      else
      {
        *(void *)int v38 = *v29;
        *uint64_t v29 = v38;
        *(void *)(v46 + 8 * v2) = v29;
        if (!*(void *)v38) {
          goto LABEL_88;
        }
        unint64_t v48 = *(void *)(*(void *)v38 + 8);
        if ((v32 & (v32 - 1)) != 0)
        {
          if (v48 >= v32) {
            v48 %= v32;
          }
        }
        else
        {
          v48 &= v32 - 1;
        }
        uint64_t v47 = (char **)(*v27 + 8 * v48);
      }
      *uint64_t v47 = v38;
LABEL_88:
      unsigned int v60 = 0;
      ++*((void *)this + 11);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v60);
LABEL_89:
      int v28 = (uint64_t *)*v28;
    }
    while (v28);
  }
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  unsigned int v49 = (long long *)*((void *)a2 + 11);
  uint64_t v50 = (long long *)*((void *)a2 + 12);
  if (v50 != v49)
  {
    unint64_t v51 = 0xAAAAAAAAAAAAAAABLL * (v50 - v49);
    if (v51 >= 0x555555555555556) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    int v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioFormatListItem>>(v51);
    *((void *)this + 15) = &v52[48 * v53];
    *((void *)this + 13) = v52;
    *((void *)this + 14) = v52;
    unsigned int v64 = v52;
    int v65 = v52;
    unsigned int v60 = (char *)this + 120;
    unsigned int v61 = &v64;
    char v62 = &v65;
    char v63 = 0;
    int v54 = v52;
    do
    {
      if (*((char *)v49 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v54, *(const std::string::value_type **)v49, *((void *)v49 + 1));
        int v56 = v65;
      }
      else
      {
        long long v55 = *v49;
        *((void *)v54 + 2) = *((void *)v49 + 2);
        *(_OWORD *)int v54 = v55;
        int v56 = v54;
      }
      long long v57 = *(long long *)((char *)v49 + 24);
      *((_DWORD *)v54 + 10) = *((_DWORD *)v49 + 10);
      *(_OWORD *)(v54 + 24) = v57;
      v49 += 3;
      int v54 = v56 + 48;
      int v65 = v56 + 48;
    }
    while (v49 != v50);
    char v63 = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,AudioComponentDescription>>,std::pair<std::string,AudioComponentDescription>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v60);
    *((void *)this + 14) = v54;
  }
  *((void *)this + 20) = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_DWORD *)this + 42) = 1;
  *((void *)this + 22) = 0;
  *((unsigned char *)this + 184) = 0;
  *((void *)this + 25) = 0;
  *((void *)this + 26) = 0;
  *((void *)this + 24) = 0;
  return this;
}

void sub_1900D4F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__hash_table<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<AudioComponentDescription>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,true>,std::__unordered_map_equal<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,std::hash<AudioComponentDescription>,true>,std::allocator<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::~__hash_table(v11);
  std::__hash_table<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::~__hash_table(a10);
  uint64_t v13 = *(void *)(v10 + 8);
  *(void *)(v10 + 8) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,AudioComponentDescription>>,std::pair<std::string,AudioComponentDescription>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 25) < 0) {
        operator delete(*(void **)(v3 - 48));
      }
      v3 -= 48;
    }
  }
  return a1;
}

void *std::ifstream::~ifstream(void *a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA3F8];
  uint64_t v3 = *MEMORY[0x1E4FBA3F8];
  *a1 = *MEMORY[0x1E4FBA3F8];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x192FC84E0](a1 + 2);
  std::istream::~istream();
  MEMORY[0x192FC8840](a1 + 53);
  return a1;
}

os_log_t ___ZN8DSPGraph6getLogEv_block_invoke_8771()
{
  os_log_t result = os_log_create("com.apple.coreaudio", "DSPGraph");
  DSPGraph::getLog(void)::gLog = (uint64_t)result;
  return result;
}

void DSPGraph::Preprocessor::~Preprocessor(DSPGraph::Preprocessor *this)
{
  uint64_t v2 = (void **)((char *)this + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::deque<std::unique_ptr<DSPGraph::Macro>>::~deque[abi:ne180100]((uint64_t)this);
}

void DSPGraph::Interpreter::parseOrderCommand(DSPGraph::Interpreter *this, const char **a2)
{
  v14[0] = 0;
  v14[1] = 0;
  uint64_t v15 = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v13 = 0;
  if ((DSPGraph::Interpreter::parseString((DSPGraph *)a2, (uint64_t)v14) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v11, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v10, "parseOrderCommand");
    std::string::basic_string[abi:ne180100]<0>(&v9, "expected 'before' argument in 'order' command");
    DSPGraph::ThrowException(1886548769, &v11, 1072, &v10, &v9);
  }
  if ((DSPGraph::Interpreter::parseString((DSPGraph *)a2, (uint64_t)__p) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v11, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v10, "parseOrderCommand");
    std::string::basic_string[abi:ne180100]<0>(&v9, "expected 'after' argument in 'order' command");
    DSPGraph::ThrowException(1886548769, &v11, 1075, &v10, &v9);
  }
  uint64_t v4 = (DSPGraph::Graph *)*((void *)this + 1);
  size_t v5 = std::__hash_table<std::__hash_value_type<std::string,DSPGraph::Box *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::Box *>>>::find<std::string>((void *)v4 + 98, (unsigned __int8 *)v14);
  if (!v5 || (int v6 = (DSPGraph::Box *)*((void *)v5 + 5)) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v11, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v10, "parseOrderCommand");
    std::string::basic_string[abi:ne180100]<0>(&v9, "order : before box not found");
    DSPGraph::ThrowException(1852204065, &v11, 1080, &v10, &v9);
  }
  unint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,DSPGraph::Box *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::Box *>>>::find<std::string>((void *)v4 + 98, (unsigned __int8 *)__p);
  if (!v7 || (unint64_t v8 = (DSPGraph::Box *)*((void *)v7 + 5)) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v11, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v10, "parseOrderCommand");
    std::string::basic_string[abi:ne180100]<0>(&v9, "order : after box not found");
    DSPGraph::ThrowException(1852204065, &v11, 1085, &v10, &v9);
  }
  DSPGraph::Graph::addOrderingConstraint(v4, v6, v8);
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(v14[0]);
  }
}

void sub_1900D5434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (*(char *)(v33 - 33) < 0) {
    operator delete(*(void **)(v33 - 56));
  }
  _Unwind_Resume(exception_object);
}

void DSPGraph::Interpreter::parseSetCommand(DSPGraph::Interpreter *this, const char **a2)
{
  *(void *)&v26[4] = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  if ((DSPGraph::Interpreter::parseString((DSPGraph *)a2, (uint64_t)&v26[4]) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v31, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v30, "parseSetCommand");
    std::string::basic_string[abi:ne180100]<0>(&v29, "expected name argument in 'set' command");
    DSPGraph::ThrowException(1886548769, &v31, 1095, &v30, (long long *)&v29);
  }
  uint64_t v5 = HIBYTE(v28);
  if (v28 < 0) {
    uint64_t v5 = v27;
  }
  if (v5 == 13)
  {
    float v18 = (uint64_t *)&v26[4];
    if (v28 < 0) {
      float v18 = *(uint64_t **)&v26[4];
    }
    uint64_t v19 = *v18;
    uint64_t v20 = *(uint64_t *)((char *)v18 + 5);
    if (v19 != 0x7275446563696C73 || v20 != 0x6E6F697461727544)
    {
LABEL_47:
      std::string::basic_string[abi:ne180100]<0>(&v31, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v30, "operator()");
      uint64_t v24 = &v26[4];
      if (v28 < 0) {
        uint64_t v24 = *(unsigned char **)&v26[4];
      }
      DSPGraph::strprintf((DSPGraph *)"unknown value name '%s' in 'set' command", v23, v24);
    }
    int v17 = 0;
LABEL_39:
    *(_DWORD *)unint64_t v26 = 0;
    if ((DSPGraph::Interpreter::parseUInt32((DSPGraph::Interpreter *)a2, (const char **)v26, v4) & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v31, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v30, "parseSetCommand");
      std::operator+<char>();
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v29, (std::string *)((char *)v25 + 4), "' command");
      DSPGraph::ThrowException(1886548769, &v31, 1122, &v30, (long long *)&v29);
    }
    LODWORD(v25[0]) = 0;
    if ((DSPGraph::Interpreter::parseUInt32((DSPGraph::Interpreter *)a2, v25, v22) & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v31, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v30, "parseSetCommand");
      std::operator+<char>();
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v29, (std::string *)((char *)v25 + 4), "' command");
      DSPGraph::ThrowException(1886548769, &v31, 1126, &v30, (long long *)&v29);
    }
    DSPGraph::Graph::setSliceDuration(*((void *)this + 1), *(int *)v26, (int)v25[0], v17);
    goto LABEL_42;
  }
  if (v5 == 21)
  {
    long long v11 = (uint64_t *)&v26[4];
    if (v28 < 0) {
      long long v11 = *(uint64_t **)&v26[4];
    }
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    uint64_t v14 = *(uint64_t *)((char *)v11 + 13);
    if (v12 != 0x656C626169726176 || v13 != 0x7275446563696C53 || v14 != 0x6E6F697461727544) {
      goto LABEL_47;
    }
    int v17 = 1;
    goto LABEL_39;
  }
  if (v5 != 14) {
    goto LABEL_47;
  }
  int v6 = (uint64_t *)&v26[4];
  if (v28 < 0) {
    int v6 = *(uint64_t **)&v26[4];
  }
  if (*v6 == 0x416D726F66726570 && *(uint64_t *)((char *)v6 + 6) == 0x6E7552797244416DLL)
  {
    BYTE4(v25[0]) = 0;
    if ((DSPGraph::Interpreter::parseBool((DSPGraph::Interpreter *)a2, (const char **)((char *)v25 + 4), (BOOL *)v4) & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v31, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v30, "parseSetCommand");
      std::string::basic_string[abi:ne180100]<0>(&v29, "expected integer in 'set performADryRun' command");
      DSPGraph::ThrowException(1886548769, &v31, 1100, &v30, (long long *)&v29);
    }
    *(unsigned char *)(*((void *)this + 1) + 765) = BYTE4(v25[0]);
  }
  else
  {
    uint64_t v8 = *v6;
    uint64_t v9 = *(uint64_t *)((char *)v6 + 6);
    if (v8 != 0x694664726F636572 || v9 != 0x65707954656C6946) {
      goto LABEL_47;
    }
    HIDWORD(v25[0]) = 0;
    if ((DSPGraph::Interpreter::parse4cc((DSPGraph::Interpreter *)a2, (const char **)((char *)v25 + 4), (unsigned int *)1) & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v31, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v30, "parseSetCommand");
      std::string::basic_string[abi:ne180100]<0>(&v29, "expected 4 char code in 'set recordFileType' command");
      DSPGraph::ThrowException(1886548769, &v31, 1106, &v30, (long long *)&v29);
    }
    *(_DWORD *)(*((void *)this + 1) + 940) = HIDWORD(v25[0]);
  }
LABEL_42:
  if (SHIBYTE(v28) < 0) {
    operator delete(*(void **)&v26[4]);
  }
}

void sub_1900D593C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v29 - 57) < 0) {
    operator delete(*(void **)(v29 - 80));
  }
  if (*(char *)(v29 - 33) < 0) {
    operator delete(*(void **)(v29 - 56));
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void DSPGraph::Interpreter::parseBeginSubsetCommand(DSPGraph::Interpreter *this, const char **a2)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v20 = 0;
  if ((DSPGraph::Interpreter::parseString((DSPGraph *)a2, (uint64_t)__p) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v18, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v17, "parseBeginSubsetCommand");
    std::string::basic_string[abi:ne180100]<0>(&v16, "expected name argument in 'beginSubset' command");
    DSPGraph::ThrowException(1886548769, &v18, 1136, &v17, &v16);
  }
  uint64_t v3 = DSPGraph::Graph::addSubset(*((void *)this + 1), (unsigned __int8 *)__p);
  uint64_t v4 = v3;
  int v6 = (unsigned __int8 ***)*((void *)this + 25);
  unint64_t v5 = *((void *)this + 26);
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = (void *)*((void *)this + 24);
    uint64_t v9 = v6 - (unsigned __int8 ***)v8;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v13 = (char *)operator new(8 * v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = (unsigned __int8 ***)&v13[8 * v9];
    *uint64_t v14 = v4;
    unint64_t v7 = v14 + 1;
    if (v6 != v8)
    {
      do
      {
        uint64_t v15 = *--v6;
        *--uint64_t v14 = v15;
      }
      while (v6 != v8);
      int v6 = (unsigned __int8 ***)*((void *)this + 24);
    }
    *((void *)this + 24) = v14;
    *((void *)this + 25) = v7;
    *((void *)this + 26) = &v13[8 * v12];
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *int v6 = v3;
    unint64_t v7 = v6 + 1;
  }
  *((void *)this + 25) = v7;
  if (SHIBYTE(v20) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1900D5BB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

void DSPGraph::Interpreter::parseComponentNameCommand(DSPGraph::Interpreter *this, const char **a2)
{
  v8[0] = 0;
  v8[1] = 0;
  uint64_t v9 = 0;
  if ((DSPGraph::Interpreter::parseString(this, (uint64_t)v8) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v6, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v5, "parseComponentNameCommand");
    std::string::basic_string[abi:ne180100]<0>(&v4, "expected a string in 'componentName' command");
    DSPGraph::ThrowException(1886548769, &v6, 1162, &v5, &v4);
  }
  long long v6 = 0uLL;
  uint64_t v7 = 0;
  if ((DSPGraph::Interpreter::parseString(this, (uint64_t)&v6) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v5, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v4, "parseComponentNameCommand");
    std::string::basic_string[abi:ne180100]<0>(&v3, "expected a string in 'componentName' command");
    DSPGraph::ThrowException(1886548769, &v5, 1167, &v4, &v3);
  }
  if (SHIBYTE(v7) < 0) {
    operator delete((void *)v6);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(v8[0]);
  }
}

void sub_1900D5D34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (*(char *)(v27 - 41) < 0) {
    operator delete(*(void **)(v27 - 64));
  }
  if (*(char *)(v27 - 17) < 0) {
    operator delete(*(void **)(v27 - 40));
  }
  _Unwind_Resume(exception_object);
}

void DSPGraph::Interpreter::parseJackCommand(DSPGraph::Interpreter *this, const char **a2)
{
  long long v6 = 0uLL;
  uint64_t v7 = 0;
  if ((DSPGraph::Interpreter::parseString((DSPGraph *)a2, (uint64_t)&v6) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v5, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v4, "parseJackCommand");
    std::string::basic_string[abi:ne180100]<0>(&v3, "jack : expected name.");
    DSPGraph::ThrowException(1886548769, &v5, 1194, &v4, &v3);
  }
  DSPGraph::Graph::addJack(*((void *)this + 1), &v6);
  if (SHIBYTE(v7) < 0) {
    operator delete((void *)v6);
  }
}

void sub_1900D5E74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (*(char *)(v26 - 17) < 0) {
    operator delete(*(void **)(v26 - 40));
  }
  _Unwind_Resume(exception_object);
}

void DSPGraph::Interpreter::parseRecordCommand(DSPGraph::Interpreter *this, const char **a2)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  memset(&__str, 0, sizeof(__str));
  if ((DSPGraph::Interpreter::parseString((DSPGraph *)a2, (uint64_t)&__str) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__s, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v40, "parseRecordCommand");
    std::string::basic_string[abi:ne180100]<0>(&v39, "record : expected a file path.");
    DSPGraph::ThrowException(1886548769, (long long *)__s, 1206, (long long *)&v40, (long long *)&v39);
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_str = &__str;
  }
  else {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if (strchr((char *)p_str, 37))
  {
    bzero(__s, 0x400uLL);
    v36.__r_.__value_.__r.__words[0] = 0;
    time((time_t *)&v36);
    long long v5 = localtime((const time_t *)&v36);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v6 = &__str;
    }
    else {
      long long v6 = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if (!strftime(__s, 0x400uLL, (const char *)v6, v5))
    {
      std::string::basic_string[abi:ne180100]<0>(&v40, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v39, "parseRecordCommand");
      std::string::basic_string[abi:ne180100]<0>(__p, "record file path from date failed to format");
      DSPGraph::ThrowException(1886548769, (long long *)&v40, 1215, (long long *)&v39, (long long *)__p);
    }
    char v46 = 0;
    std::string::__assign_external(&__str, __s);
  }
  uint64_t v7 = __s;
  std::string::basic_string[abi:ne180100]<0>(__s, "$TMPDIR/");
  int64_t size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v9 = &__str;
  }
  else {
    uint64_t v9 = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if ((v45 & 0x80u) == 0)
  {
    int64_t v10 = v45;
  }
  else
  {
    uint64_t v7 = *(std::string::value_type **)__s;
    int64_t v10 = *(void *)&__s[8];
  }
  if (v10)
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int64_t size = __str.__r_.__value_.__l.__size_;
    }
    if (size >= v10)
    {
      uint64_t v11 = (std::string *)((char *)v9 + size);
      int v12 = *v7;
      uint64_t v13 = v9;
      do
      {
        int64_t v14 = size - v10;
        if (v14 == -1) {
          break;
        }
        uint64_t v15 = (std::string *)memchr(v13, v12, v14 + 1);
        if (!v15) {
          break;
        }
        long long v16 = v15;
        if (!memcmp(v15, v7, v10))
        {
          if (v16 == v11 || v16 != v9) {
            break;
          }
          goto LABEL_29;
        }
        uint64_t v13 = (std::string *)((char *)&v16->__r_.__value_.__l.__data_ + 1);
        int64_t size = (char *)v11 - ((char *)&v16->__r_.__value_.__l.__data_ + 1);
      }
      while (size >= v10);
    }
  }
  else
  {
LABEL_29:
    long long v17 = getenv("TMPDIR");
    if (v17) {
      long long v18 = v17;
    }
    else {
      long long v18 = "/tmp/";
    }
    size_t v19 = strlen(v18);
    if (v19) {
      BOOL v20 = v18[v19 - 1] == 47;
    }
    else {
      BOOL v20 = 0;
    }
    std::string::basic_string[abi:ne180100]<0>(&v39, v18);
    if (v20) {
      unint64_t v21 = "";
    }
    else {
      unint64_t v21 = "/";
    }
    std::string::basic_string[abi:ne180100]<0>(__p, v21);
    if ((v38 & 0x80u) == 0) {
      unint64_t v22 = __p;
    }
    else {
      unint64_t v22 = (void **)__p[0];
    }
    if ((v38 & 0x80u) == 0) {
      std::string::size_type v23 = v38;
    }
    else {
      std::string::size_type v23 = (std::string::size_type)__p[1];
    }
    uint64_t v24 = std::string::append(&v39, (const std::string::value_type *)v22, v23);
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    if ((v45 & 0x80u) == 0) {
      std::string::size_type v26 = v45;
    }
    else {
      std::string::size_type v26 = *(void *)&__s[8];
    }
    std::string::basic_string(&v36, &__str, v26, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v42);
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v27 = &v36;
    }
    else {
      uint64_t v27 = (std::string *)v36.__r_.__value_.__r.__words[0];
    }
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v28 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v28 = v36.__r_.__value_.__l.__size_;
    }
    uint64_t v29 = std::string::append(&v40, (const std::string::value_type *)v27, v28);
    std::string::size_type v30 = v29->__r_.__value_.__r.__words[0];
    *(void *)unint64_t v43 = v29->__r_.__value_.__l.__size_;
    *(void *)&v43[7] = *(std::string::size_type *)((char *)&v29->__r_.__value_.__r.__words[1] + 7);
    char v31 = HIBYTE(v29->__r_.__value_.__r.__words[2]);
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    __str.__r_.__value_.__r.__words[0] = v30;
    __str.__r_.__value_.__l.__size_ = *(void *)v43;
    *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(void *)&v43[7];
    *((unsigned char *)&__str.__r_.__value_.__s + 23) = v31;
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v36.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
    if ((char)v38 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
  }
  memset(&v40, 0, sizeof(v40));
  *(_DWORD *)unint64_t v43 = 0;
  if ((DSPGraph::Interpreter::parsePortDesc((char **)a2, (const char **)&v40.__r_.__value_.__l.__data_, (const char **)v43) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v39, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(__p, "parseRecordCommand");
    std::string::basic_string[abi:ne180100]<0>(&v36, "record port description parse failed.");
    DSPGraph::ThrowException(1886548769, (long long *)&v39, 1238, (long long *)__p, (long long *)&v36);
  }
  unsigned __int8 v42 = 0;
  DSPGraph::Interpreter::parseBool((DSPGraph::Interpreter *)a2, (const char **)&v42, v32);
  uint64_t v33 = std::__hash_table<std::__hash_value_type<std::string,DSPGraph::Box *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::Box *>>>::find<std::string>((void *)(*((void *)this + 1) + 784), (unsigned __int8 *)&v40);
  if (!v33 || (uint64_t v34 = *((void *)v33 + 5)) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v39, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(__p, "parseRecordCommand");
    std::string::basic_string[abi:ne180100]<0>(&v36, "record box not found");
    DSPGraph::ThrowException(1852204065, (long long *)&v39, 1246, (long long *)__p, (long long *)&v36);
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v35 = &__str;
  }
  else {
    uint64_t v35 = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  (*(void (**)(uint64_t, std::string *, void, uint64_t, void, uint64_t))(*(void *)v34 + 152))(v34, v35, *(unsigned int *)v43, 1, v42, 4096);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  if ((char)v45 < 0) {
    operator delete(*(void **)__s);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1900D641C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  _Unwind_Resume(exception_object);
}

void DSPGraph::Interpreter::parseInjectCommand(DSPGraph::Interpreter *this, const char **a2)
{
  v13[0] = 0;
  v13[1] = 0;
  uint64_t v14 = 0;
  if ((DSPGraph::Interpreter::parseString((DSPGraph *)a2, (uint64_t)v13) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v11, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v10, "parseInjectCommand");
    std::string::basic_string[abi:ne180100]<0>((const char **)((char *)v9 + 4), "inject : expected a file path.");
    DSPGraph::ThrowException(1886548769, &v11, 1257, &v10, (long long *)((char *)v9 + 4));
  }
  long long v11 = 0uLL;
  uint64_t v12 = 0;
  LODWORD(v9[0]) = 0;
  if ((DSPGraph::Interpreter::parsePortDesc((char **)a2, (const char **)&v11, v9) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v10, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>((const char **)((char *)v9 + 4), "parseInjectCommand");
    std::string::basic_string[abi:ne180100]<0>((const char **)((char *)v8 + 1), "inject port description parse failed.");
    DSPGraph::ThrowException(1886548769, &v10, 1264, (long long *)((char *)v9 + 4), (long long *)((char *)v8 + 1));
  }
  LOBYTE(v8[0]) = 0;
  DSPGraph::Interpreter::parseBool((DSPGraph::Interpreter *)a2, v8, v4);
  long long v5 = std::__hash_table<std::__hash_value_type<std::string,DSPGraph::Box *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::Box *>>>::find<std::string>((void *)(*((void *)this + 1) + 784), (unsigned __int8 *)&v11);
  if (!v5 || (uint64_t v6 = *((void *)v5 + 5)) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v10, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>((const char **)((char *)v9 + 4), "parseInjectCommand");
    std::string::basic_string[abi:ne180100]<0>((const char **)((char *)v8 + 1), "inject box not found");
    DSPGraph::ThrowException(1852204065, &v10, 1272, (long long *)((char *)v9 + 4), (long long *)((char *)v8 + 1));
  }
  if (v14 >= 0) {
    uint64_t v7 = v13;
  }
  else {
    uint64_t v7 = (void **)v13[0];
  }
  (*(void (**)(uint64_t, void **, void, void))(*(void *)v6 + 136))(v6, v7, LODWORD(v9[0]), LOBYTE(v8[0]));
  if (SHIBYTE(v12) < 0) {
    operator delete((void *)v11);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(v13[0]);
  }
}

void sub_1900D676C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (*(char *)(v29 - 41) < 0) {
    operator delete(*(void **)(v29 - 64));
  }
  if (*(char *)(v29 - 17) < 0) {
    operator delete(*(void **)(v29 - 40));
  }
  _Unwind_Resume(exception_object);
}

void DSPGraph::Interpreter::parseAnalysisCommand(DSPGraph::Interpreter *this, const char **a2)
{
  LODWORD(v12) = 0;
  if ((DSPGraph::Interpreter::parse4cc((DSPGraph::Interpreter *)a2, (const char **)&v12, (unsigned int *)1) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v10, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v9, "parseAnalysisCommand");
    std::string::basic_string[abi:ne180100]<0>(&v8[1], "expected 4cc ID in 'analysis' command");
    DSPGraph::ThrowException(1886548769, &v10, 1326, &v9, (long long *)&v8[1]);
  }
  unsigned int v4 = v12;
  if (!std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>>>::find<unsigned int>((void *)(*((void *)this + 1) + 952), v12))
  {
    std::string::basic_string[abi:ne180100]<0>(&v10, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v9, "parseAnalysisCommand");
    std::string::basic_string[abi:ne180100]<0>(&v8[1], "expected valid AnalysisID in 'analysis' command");
    DSPGraph::ThrowException(1886548769, &v10, 1330, &v9, (long long *)&v8[1]);
  }
  long long v10 = 0uLL;
  uint64_t v11 = 0;
  v8[0] = 0;
  if ((DSPGraph::Interpreter::parsePortDesc((char **)a2, (const char **)&v10, (const char **)v8) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v9, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v8[1], "parseAnalysisCommand");
    std::string::basic_string[abi:ne180100]<0>(&v7, "analysis port description parse failed.");
    DSPGraph::ThrowException(1886548769, &v9, 1337, (long long *)&v8[1], &v7);
  }
  long long v5 = std::__hash_table<std::__hash_value_type<std::string,DSPGraph::Box *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DSPGraph::Box *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DSPGraph::Box *>>>::find<std::string>((void *)(*((void *)this + 1) + 784), (unsigned __int8 *)&v10);
  if (!v5 || (uint64_t v6 = (DSPGraph::Box *)*((void *)v5 + 5)) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v9, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v8[1], "parseAnalysisCommand");
    std::string::basic_string[abi:ne180100]<0>(&v7, "analysis box not found");
    DSPGraph::ThrowException(1852204065, &v9, 1341, (long long *)&v8[1], &v7);
  }
  DSPGraph::Box::addAnalysis(v6, v4, v8[0]);
  if (SHIBYTE(v11) < 0) {
    operator delete((void *)v10);
  }
}

void sub_1900D6A10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (*(char *)(v27 - 41) < 0) {
    operator delete(*(void **)(v27 - 64));
  }
  _Unwind_Resume(exception_object);
}

void DSPGraph::Interpreter::parseAnalysisDefineCommand(DSPGraph::Interpreter *this, const char **a2)
{
  v32[5] = *MEMORY[0x1E4F143B8];
  unsigned int v26 = 0;
  if ((DSPGraph::Interpreter::parse4cc((DSPGraph::Interpreter *)a2, (const char **)&v26, (unsigned int *)1) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v29, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v27, "parseAnalysisDefineCommand");
    std::string::basic_string[abi:ne180100]<0>(&__p, "expected 4cc ID in 'analysisDefine' command");
    DSPGraph::ThrowException(1886548769, (long long *)&v29, 1285, &v27, (long long *)&__p);
  }
  memset(&__p, 0, sizeof(__p));
  if ((DSPGraph::Interpreter::parseString((DSPGraph *)a2, (uint64_t)&__p) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v29, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v27, "parseAnalysisDefineCommand");
    DSPGraph::strprintf((DSPGraph *)"expected name in 'analysisDefine' command: %s", v17, *a2);
  }
  v22[0] = 0;
  v22[1] = 0;
  int v23 = 0;
  if (!DSPGraph::Interpreter::parseCompDesc((DSPGraph::Interpreter *)a2, (const char **)v22, v4))
  {
    std::string::basic_string[abi:ne180100]<0>(&v29, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v27, "parseAnalysisDefineCommand");
    DSPGraph::strprintf((DSPGraph *)"expected class name or component description in 'analysisDefine' command: %s", v18, *a2);
  }
  if (LODWORD(v22[0]) >> 15 == 49898)
  {
    uint64_t v5 = *((void *)this + 1);
    unsigned int v6 = v26;
    *(_DWORD *)BOOL v20 = v26;
    *(_OWORD *)&v20[4] = *(_OWORD *)v22;
    *(_DWORD *)&v20[20] = v23;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v21, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string v21 = __p;
    }
    std::string::size_type v28 = 0;
    long long v9 = (char *)operator new(0x38uLL);
    *(void *)long long v9 = &unk_1EDFA14E8;
    *(_OWORD *)(v9 + 8) = *(_OWORD *)v20;
    *((void *)v9 + 3) = *(void *)&v20[16];
    *(std::string *)(v9 + 32) = v21;
    memset(&v21, 0, sizeof(v21));
    std::string::size_type v28 = (long long *)v9;
    v24[0] = v6;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v29, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string v29 = __p;
    }
    long long v30 = *(_OWORD *)v22;
    int v31 = v23;
    std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::__value_func[abi:ne180100]((uint64_t)v32, (uint64_t)&v27);
    long long v10 = std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v5 + 952, v6, v24);
    uint64_t v11 = (void **)(v10 + 3);
    if (*((char *)v10 + 47) < 0) {
      operator delete(*v11);
    }
    *(_OWORD *)uint64_t v11 = *(_OWORD *)&v29.__r_.__value_.__l.__data_;
    v10[5] = v29.__r_.__value_.__r.__words[2];
    *((unsigned char *)&v29.__r_.__value_.__s + 23) = 0;
    v29.__r_.__value_.__s.__data_[0] = 0;
    *((_OWORD *)v10 + 3) = v30;
    *((_DWORD *)v10 + 16) = v31;
    std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::operator=[abi:ne180100](v10 + 9, (uint64_t)v32);
  }
  else
  {
    uint64_t v7 = *((void *)this + 1);
    unsigned int v8 = v26;
    if (v22[0] == (char *)0x74657374616E6C7ALL)
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v19, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v19 = __p;
      }
      std::string::size_type v28 = 0;
      uint64_t v14 = (char *)operator new(0x28uLL);
      *(void *)uint64_t v14 = &unk_1EDFA1530;
      *((_DWORD *)v14 + 2) = v8;
      *(std::string *)(v14 + 16) = v19;
      memset(&v19, 0, sizeof(v19));
      std::string::size_type v28 = (long long *)v14;
      v24[0] = v8;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v29, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v29 = __p;
      }
      long long v30 = *(_OWORD *)v22;
      int v31 = v23;
      std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::__value_func[abi:ne180100]((uint64_t)v32, (uint64_t)&v27);
      uint64_t v15 = std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v7 + 952, v8, v24);
      long long v16 = (void **)(v15 + 3);
      if (*((char *)v15 + 47) < 0) {
        operator delete(*v16);
      }
      *(_OWORD *)long long v16 = *(_OWORD *)&v29.__r_.__value_.__l.__data_;
      void v15[5] = v29.__r_.__value_.__r.__words[2];
      *((unsigned char *)&v29.__r_.__value_.__s + 23) = 0;
      v29.__r_.__value_.__s.__data_[0] = 0;
      *((_OWORD *)v15 + 3) = v30;
      *((_DWORD *)v15 + 16) = v31;
      std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::operator=[abi:ne180100](v15 + 9, (uint64_t)v32);
    }
    else
    {
      *(void *)&long long v27 = &unk_1EDFA1578;
      std::string::size_type v28 = &v27;
      v24[0] = v26;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v29, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v29 = __p;
      }
      long long v30 = *(_OWORD *)v22;
      int v31 = v23;
      std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::__value_func[abi:ne180100]((uint64_t)v32, (uint64_t)&v27);
      uint64_t v12 = std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v7 + 952, v8, v24);
      uint64_t v13 = (void **)(v12 + 3);
      if (*((char *)v12 + 47) < 0) {
        operator delete(*v13);
      }
      *(_OWORD *)uint64_t v13 = *(_OWORD *)&v29.__r_.__value_.__l.__data_;
      v12[5] = v29.__r_.__value_.__r.__words[2];
      *((unsigned char *)&v29.__r_.__value_.__s + 23) = 0;
      v29.__r_.__value_.__s.__data_[0] = 0;
      *((_OWORD *)v12 + 3) = v30;
      *((_DWORD *)v12 + 16) = v31;
      std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::operator=[abi:ne180100](v12 + 9, (uint64_t)v32);
    }
  }
  std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100](v32);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100](&v27);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1900D7020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a41 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    long long v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (unsigned int i = *v9; i; unsigned int i = (uint64_t *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v12 = (void *)(a1 + 16);
  uint64_t v13 = (char *)operator new(0x68uLL);
  v35[0] = v13;
  v35[1] = a1 + 16;
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = v6;
  *((_DWORD *)v13 + 4) = *a3;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  *(_OWORD *)(v13 + 72) = 0u;
  *(_OWORD *)(v13 + 88) = 0u;
  char v36 = 1;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    unint64_t v6 = v3;
    goto LABEL_64;
  }
  BOOL v16 = 1;
  if (v7 >= 3) {
    BOOL v16 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v17 = v16 | (2 * v7);
  unint64_t v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18) {
    int8x8_t prime = (int8x8_t)v18;
  }
  else {
    int8x8_t prime = (int8x8_t)v17;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v7 = *(void *)(a1 + 8);
  }
  if (*(void *)&prime <= v7)
  {
    if (*(void *)&prime >= v7) {
      goto LABEL_60;
    }
    unint64_t v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v7 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
    {
      unint64_t v26 = std::__next_prime(v26);
    }
    else
    {
      uint64_t v28 = 1 << -(char)__clz(v26 - 1);
      if (v26 >= 2) {
        unint64_t v26 = v28;
      }
    }
    if (*(void *)&prime <= v26) {
      int8x8_t prime = (int8x8_t)v26;
    }
    if (*(void *)&prime >= v7)
    {
      unint64_t v7 = *(void *)(a1 + 8);
      goto LABEL_60;
    }
    if (!*(void *)&prime)
    {
      uint64_t v34 = *(void **)a1;
      *(void *)a1 = 0;
      if (v34) {
        operator delete(v34);
      }
      unint64_t v7 = 0;
      *(void *)(a1 + 8) = 0;
      goto LABEL_60;
    }
  }
  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  BOOL v20 = operator new(8 * *(void *)&prime);
  std::string v21 = *(void **)a1;
  *(void *)a1 = v20;
  if (v21) {
    operator delete(v21);
  }
  uint64_t v22 = 0;
  *(int8x8_t *)(a1 + 8) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v22++) = 0;
  while (*(void *)&prime != v22);
  int v23 = (void *)*v12;
  if (*v12)
  {
    unint64_t v24 = v23[1];
    uint8x8_t v25 = (uint8x8_t)vcnt_s8(prime);
    v25.i16[0] = vaddlv_u8(v25);
    if (v25.u32[0] > 1uLL)
    {
      if (v24 >= *(void *)&prime) {
        v24 %= *(void *)&prime;
      }
    }
    else
    {
      v24 &= *(void *)&prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v24) = v12;
    std::string v29 = (void *)*v23;
    if (*v23)
    {
      do
      {
        unint64_t v30 = v29[1];
        if (v25.u32[0] > 1uLL)
        {
          if (v30 >= *(void *)&prime) {
            v30 %= *(void *)&prime;
          }
        }
        else
        {
          v30 &= *(void *)&prime - 1;
        }
        if (v30 != v24)
        {
          if (!*(void *)(*(void *)a1 + 8 * v30))
          {
            *(void *)(*(void *)a1 + 8 * v30) = v23;
            goto LABEL_56;
          }
          *int v23 = *v29;
          *std::string v29 = **(void **)(*(void *)a1 + 8 * v30);
          **(void **)(*(void *)a1 + 8 * v30) = v29;
          std::string v29 = v23;
        }
        unint64_t v30 = v24;
LABEL_56:
        int v23 = v29;
        std::string v29 = (void *)*v29;
        unint64_t v24 = v30;
      }
      while (v29);
    }
  }
  unint64_t v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6) {
      v6 %= v7;
    }
  }
  else
  {
    unint64_t v6 = (v7 - 1) & v6;
  }
LABEL_64:
  int v31 = *(void **)(*(void *)a1 + 8 * v6);
  unsigned int i = (uint64_t *)v35[0];
  if (v31)
  {
    *(void *)v35[0] = *v31;
LABEL_72:
    *int v31 = i;
    goto LABEL_73;
  }
  *(void *)v35[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(*(void *)a1 + 8 * v6) = v12;
  if (*i)
  {
    unint64_t v32 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7) {
        v32 %= v7;
      }
    }
    else
    {
      v32 &= v7 - 1;
    }
    int v31 = (void *)(*(void *)a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  v35[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,void *>>>>::reset[abi:ne180100]((uint64_t)v35);
  return i;
}

void sub_1900D7634(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void DSPGraph::AnalyzerBuilder::Info::~Info(DSPGraph::AnalyzerBuilder::Info *this)
{
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void *std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::operator=[abi:ne180100](void *a1, uint64_t a2)
{
  unsigned int v4 = (void *)a1[3];
  a1[3] = 0;
  if (v4 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  uint64_t v5 = *(void *)(a2 + 24);
  if (v5)
  {
    if (v5 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v5;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_2,std::allocator<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_2>,std::unique_ptr<DSPGraph::Analyzer> ()(void)>::operator()(void *a1@<X8>)
{
  *a1 = 0;
}

void std::__function::__func<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_2,std::allocator<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_2>,std::unique_ptr<DSPGraph::Analyzer> ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA1578;
}

void *std::__function::__func<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_2,std::allocator<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_2>,std::unique_ptr<DSPGraph::Analyzer> ()(void)>::__clone()
{
  os_log_t result = operator new(0x10uLL);
  *os_log_t result = &unk_1EDFA1578;
  return result;
}

void std::__function::__func<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_2,std::allocator<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_2>,std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__func()
{
}

void std::__function::__func<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_1,std::allocator<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_1>,std::unique_ptr<DSPGraph::Analyzer> ()(void)>::operator()()
{
}

void sub_1900D78FC(_Unwind_Exception *a1)
{
  MEMORY[0x192FC8940](v1, 0x10B3C40FE0296F9);
  _Unwind_Resume(a1);
}

void std::__function::__func<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_1,std::allocator<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_1>,std::unique_ptr<DSPGraph::Analyzer> ()(void)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 39) < 0) {
    operator delete(__p[2]);
  }
  operator delete(__p);
}

void std::__function::__func<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_1,std::allocator<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_1>,std::unique_ptr<DSPGraph::Analyzer> ()(void)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
}

void std::__function::__func<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_1,std::allocator<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_1>,std::unique_ptr<DSPGraph::Analyzer> ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EDFA1530;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 8);
  uint64_t v2 = (std::string *)(a2 + 16);
  if (*(char *)(a1 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 16), *(void *)(a1 + 24));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 16);
    *(void *)(a2 + 32) = *(void *)(a1 + 32);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

char *std::__function::__func<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_1,std::allocator<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_1>,std::unique_ptr<DSPGraph::Analyzer> ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EDFA1530;
  *((_DWORD *)v2 + 2) = *(_DWORD *)(a1 + 8);
  long long v3 = (std::string *)(v2 + 16);
  if (*(char *)(a1 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 16), *(void *)(a1 + 24));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 16);
    *((void *)v2 + 4) = *(void *)(a1 + 32);
  }
  return v2;
}

void sub_1900D7A4C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_1,std::allocator<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_1>,std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFA1530;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  JUMPOUT(0x192FC8940);
}

uint64_t std::__function::__func<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_1,std::allocator<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_1>,std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFA1530;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<unsigned int const,DSPGraph::AnalyzerBuilder::Info>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<unsigned int const,DSPGraph::AnalyzerBuilder::Info>,0>(uint64_t a1)
{
  std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)(a1 + 56));
  if (*(char *)(a1 + 31) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 8);
    operator delete(v2);
  }
}

void std::__function::__func<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_0,std::allocator<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_0>,std::unique_ptr<DSPGraph::Analyzer> ()(void)>::operator()()
{
}

void sub_1900D7C58(_Unwind_Exception *a1)
{
  MEMORY[0x192FC8940](v1, 0x10B3C4013FA6A31);
  _Unwind_Resume(a1);
}

void std::__function::__func<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_0,std::allocator<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_0>,std::unique_ptr<DSPGraph::Analyzer> ()(void)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 55) < 0) {
    operator delete(__p[4]);
  }
  operator delete(__p);
}

void std::__function::__func<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_0,std::allocator<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_0>,std::unique_ptr<DSPGraph::Analyzer> ()(void)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
}

void std::__function::__func<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_0,std::allocator<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_0>,std::unique_ptr<DSPGraph::Analyzer> ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EDFA14E8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  long long v3 = (std::string *)(a2 + 32);
  if (*(char *)(a1 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 32), *(void *)(a1 + 40));
  }
  else
  {
    long long v4 = *(_OWORD *)(a1 + 32);
    *(void *)(a2 + 48) = *(void *)(a1 + 48);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
}

char *std::__function::__func<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_0,std::allocator<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_0>,std::unique_ptr<DSPGraph::Analyzer> ()(void)>::__clone(uint64_t a1)
{
  long long v2 = (char *)operator new(0x38uLL);
  *(void *)long long v2 = &unk_1EDFA14E8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  long long v3 = (std::string *)(v2 + 32);
  if (*(char *)(a1 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 32), *(void *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 32);
    *((void *)v2 + std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = *(void *)(a1 + 48);
  }
  return v2;
}

void sub_1900D7DB8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_0,std::allocator<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_0>,std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFA14E8;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  JUMPOUT(0x192FC8940);
}

uint64_t std::__function::__func<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_0,std::allocator<DSPGraph::Interpreter::parseAnalysisDefineCommand(char const*&)::$_0>,std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFA14E8;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  return a1;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  long long v4 = this;
  unint64_t v11 = this;
  uint64_t v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    unint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        long long v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      unint64_t v6 = (long long *)((char *)v6 + 24);
      uint64_t v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1900D7F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 1) < 0) {
        operator delete(*(void **)(v3 - 24));
      }
      v3 -= 24;
    }
  }
  return a1;
}

unsigned __int8 *DSPGraph::NewBoxRegistry::newBox(uint64_t a1, unsigned __int8 *a2, int a3, int a4)
{
  os_log_t result = std::__hash_table<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::find<std::string>((void *)(a1 + 8), a2);
  if (result)
  {
    uint64_t v7 = *((void *)result + 8);
    return (unsigned __int8 *)std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(v7, a3, a4);
  }
  return result;
}

BOOL DSPGraph::NewBoxRegistry::has(DSPGraph::NewBoxRegistry *this, const AudioComponentDescription *a2)
{
  AudioComponentDescription v3 = *a2;
  return std::__hash_table<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<AudioComponentDescription>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,true>,std::__unordered_map_equal<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,std::hash<AudioComponentDescription>,true>,std::allocator<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::find<AudioComponentDescription>((void *)this + 6, &v3.componentType) != 0;
}

uint64_t *DSPGraph::NewBoxRegistry::newBox(DSPGraph::NewBoxRegistry *this, const AudioComponentDescription *a2, int a3, int a4)
{
  os_log_t result = std::__hash_table<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::__unordered_map_hasher<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,std::hash<AudioComponentDescription>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,true>,std::__unordered_map_equal<AudioComponentDescription,std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>,DSPGraph::NewBoxRegistry::AudioComponentDescriptionEquality,std::hash<AudioComponentDescription>,true>,std::allocator<std::__hash_value_type<AudioComponentDescription,std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>>>>::find<AudioComponentDescription>((void *)this + 6, &a2->componentType);
  if (result)
  {
    uint64_t v7 = result[8];
    return (uint64_t *)std::function<DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(v7, a3, a4);
  }
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZN8DSPGraph14NewBoxRegistryC1EvENK3__0clIPKciNS2_14CalculationBox14OperatorDomainENS8_16OperatorCodomainENS8_8OperatorEEEDaT_T0_T1_T2_T3_EUljjE_NS_9allocatorISI_EEFPNS2_3BoxEjjEE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EDFA2070;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZZN8DSPGraph14NewBoxRegistryC1EvENK3__0clIPKciNS2_14CalculationBox14OperatorDomainENS8_16OperatorCodomainENS8_8OperatorEEEDaT_T0_T1_T2_T3_EUljjE_NS_9allocatorISI_EEFPNS2_3BoxEjjEED0Ev()
{
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_31,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_31>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (*a2 == 1)
  {
    if (*a3 == 1) {
      operator new();
    }
    std::string::basic_string[abi:ne180100]<0>(&v5, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v4, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v3, "wrong number of outputs for SingleRateLPCMConverterBox. must be 1.");
    DSPGraph::ThrowException(1701602593, &v5, 1669, &v4, &v3);
  }
  std::string::basic_string[abi:ne180100]<0>(&v5, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
  std::string::basic_string[abi:ne180100]<0>(&v4, "operator()");
  std::string::basic_string[abi:ne180100]<0>(&v3, "wrong number of inputs for SingleRateLPCMConverterBox. must be 1.");
  DSPGraph::ThrowException(1701602593, &v5, 1667, &v4, &v3);
}

void sub_1900D8224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_31,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_31>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDFA1E30;
  return result;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_31,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_31>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_30,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_30>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (*a2 == 1)
  {
    if (*a3 == 1) {
      operator new();
    }
    std::string::basic_string[abi:ne180100]<0>(&v5, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v4, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v3, "wrong number of outputs for NonFiniteProtectionBox. must be 1.");
    DSPGraph::ThrowException(1701602593, &v5, 1659, &v4, &v3);
  }
  std::string::basic_string[abi:ne180100]<0>(&v5, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
  std::string::basic_string[abi:ne180100]<0>(&v4, "operator()");
  std::string::basic_string[abi:ne180100]<0>(&v3, "wrong number of inputs for NonFiniteProtectionBox. must be 1.");
  DSPGraph::ThrowException(1701602593, &v5, 1656, &v4, &v3);
}

void sub_1900D8450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_30,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_30>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDFA1DE8;
  return result;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_30,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_30>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_29,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_29>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()()
{
}

void sub_1900D85B4(_Unwind_Exception *a1)
{
  MEMORY[0x192FC8940](v1, 0x10F3C40C7A618E7);
  _Unwind_Resume(a1);
}

void *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_29,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_29>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDFA1DA0;
  return result;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_29,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_29>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_28,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_28>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (*a2 == 1)
  {
    if (*a3 == 1) {
      operator new();
    }
    std::string::basic_string[abi:ne180100]<0>(&v5, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v4, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v3, "wrong number of outputs for MantissaRandomizerBox (must be 1)");
    DSPGraph::ThrowException(1701602593, &v5, 1643, &v4, &v3);
  }
  std::string::basic_string[abi:ne180100]<0>(&v5, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
  std::string::basic_string[abi:ne180100]<0>(&v4, "operator()");
  std::string::basic_string[abi:ne180100]<0>(&v3, "wrong number of inputs for MantissaRandomizerBox (must be 1)");
  DSPGraph::ThrowException(1701602593, &v5, 1640, &v4, &v3);
}

void sub_1900D879C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_28,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_28>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDFA1D58;
  return result;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_28,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_28>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_27,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_27>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (*a2 == 1)
  {
    if (*a3 == 1) {
      operator new();
    }
    std::string::basic_string[abi:ne180100]<0>(&v5, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v4, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v3, "wrong number of outputs for DenormalEliminatorBox (must be 1)");
    DSPGraph::ThrowException(1701602593, &v5, 1632, &v4, &v3);
  }
  std::string::basic_string[abi:ne180100]<0>(&v5, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
  std::string::basic_string[abi:ne180100]<0>(&v4, "operator()");
  std::string::basic_string[abi:ne180100]<0>(&v3, "wrong number of inputs for DenormalEliminatorBox (must be 1)");
  DSPGraph::ThrowException(1701602593, &v5, 1629, &v4, &v3);
}

void sub_1900D8994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_27,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_27>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDFA1D10;
  return result;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_27,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_27>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_26,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_26>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()()
{
}

void sub_1900D8AD4(_Unwind_Exception *a1)
{
  MEMORY[0x192FC8940](v1, 0x10F3C40C16BE0E1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_26,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_26>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDFA1CC8;
  return result;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_26,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_26>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_25,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_25>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()()
{
}

void sub_1900D8BC8(_Unwind_Exception *a1)
{
  MEMORY[0x192FC8940](v1, 0x10F3C408EDD2FDCLL);
  _Unwind_Resume(a1);
}

void *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_25,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_25>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDFA1C80;
  return result;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_25,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_25>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_24,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_24>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()()
{
}

void sub_1900D8CA8(_Unwind_Exception *a1)
{
  MEMORY[0x192FC8940](v1, 0x10F3C40614663B3);
  _Unwind_Resume(a1);
}

void *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_24,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_24>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDFA1C38;
  return result;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_24,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_24>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_23,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_23>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()()
{
}

void sub_1900D8D98(_Unwind_Exception *a1)
{
  MEMORY[0x192FC8940](v1, 0x10F3C40AB73B33ELL);
  _Unwind_Resume(a1);
}

void *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_23,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_23>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDFA1BF0;
  return result;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_23,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_23>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_22,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_22>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()()
{
}

void sub_1900D8E74(_Unwind_Exception *a1)
{
  MEMORY[0x192FC8940](v1, 0x10F3C40614663B3);
  _Unwind_Resume(a1);
}

void *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_22,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_22>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDFA1BA8;
  return result;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_22,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_22>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
}

void *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_21,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_21>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDFA1B60;
  return result;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_21,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_21>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
}

void *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_20,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_20>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDFA1B18;
  return result;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_20,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_20>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_19,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_19>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (*a2 != 1 || *a3 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v6, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v5, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v4, "TimeFreqBox number of inputs and outputs must be one.");
    DSPGraph::ThrowException(1701602593, &v6, 1579, &v5, &v4);
  }
  operator new();
}

void sub_1900D9074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_19,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_19>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDFA1AD0;
  return result;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_19,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_19>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_18,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_18>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (*a2 != 1 || *a3 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v6, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v5, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v4, "FreqSRCBox number of inputs and outputs must be one.");
    DSPGraph::ThrowException(1701602593, &v6, 1571, &v5, &v4);
  }
  operator new();
}

void sub_1900D9244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_18,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_18>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDFA1A88;
  return result;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_18,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_18>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_17,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_17>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (*a2 != 1 || *a3 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v6, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v5, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v4, "ReblockerBox number of inputs and outputs must be one.");
    DSPGraph::ThrowException(1701602593, &v6, 1563, &v5, &v4);
  }
  operator new();
}

void sub_1900D940C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_17,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_17>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDFA1A40;
  return result;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_17,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_17>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_16,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_16>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (*a2 != 1 || *a3 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v6, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v5, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v4, "SRCBox number of inputs and outputs must be one.");
    DSPGraph::ThrowException(1701602593, &v6, 1555, &v5, &v4);
  }
  operator new();
}

void sub_1900D95F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_16,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_16>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDFA19F8;
  return result;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_16,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_16>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_15,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_15>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()()
{
}

void sub_1900D9734(_Unwind_Exception *a1)
{
  MEMORY[0x192FC8940](v1, 0x10F3C4012623749);
  _Unwind_Resume(a1);
}

void *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_15,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_15>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDFA19B0;
  return result;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_15,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_15>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_14,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_14>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (*a3 == 1)
  {
    if (*a2) {
      operator new();
    }
    std::string::basic_string[abi:ne180100]<0>(&v5, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v4, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v3, "AverageBox number of inputs cannot be 0.");
    DSPGraph::ThrowException(1701602593, &v5, 1542, &v4, &v3);
  }
  std::string::basic_string[abi:ne180100]<0>(&v5, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
  std::string::basic_string[abi:ne180100]<0>(&v4, "operator()");
  std::string::basic_string[abi:ne180100]<0>(&v3, "AverageBox number of outputs must be 1");
  DSPGraph::ThrowException(1701602593, &v5, 1539, &v4, &v3);
}

void sub_1900D98CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_14,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_14>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDFA1968;
  return result;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_14,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_14>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_13,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_13>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (*a3 == 1)
  {
    if (*a2) {
      operator new();
    }
    std::string::basic_string[abi:ne180100]<0>(&v5, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v4, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v3, "MixBox number of inputs cannot be zero.");
    DSPGraph::ThrowException(1701602593, &v5, 1531, &v4, &v3);
  }
  std::string::basic_string[abi:ne180100]<0>(&v5, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
  std::string::basic_string[abi:ne180100]<0>(&v4, "operator()");
  std::string::basic_string[abi:ne180100]<0>(&v3, "wrong number of outputs for MixBox. must be 1.");
  DSPGraph::ThrowException(1701602593, &v5, 1528, &v4, &v3);
}

void sub_1900D9AF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_13,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_13>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDFA1920;
  return result;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_13,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_13>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_12,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_12>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (*a3 == 1)
  {
    if (*a2) {
      operator new();
    }
    std::string::basic_string[abi:ne180100]<0>(&v5, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v4, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v3, "SumBox number of inputs cannot be zero.");
    DSPGraph::ThrowException(1701602593, &v5, 1520, &v4, &v3);
  }
  std::string::basic_string[abi:ne180100]<0>(&v5, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
  std::string::basic_string[abi:ne180100]<0>(&v4, "operator()");
  std::string::basic_string[abi:ne180100]<0>(&v3, "wrong number of outputs for SumBox. must be 1.");
  DSPGraph::ThrowException(1701602593, &v5, 1517, &v4, &v3);
}

void sub_1900D9D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_12,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_12>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDFA18D8;
  return result;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_12,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_12>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_11,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_11>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (*a2 == 1)
  {
    if (*a3 == 1) {
      operator new();
    }
    std::string::basic_string[abi:ne180100]<0>(&v5, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v4, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v3, "wrong number of outputs for CopyBox. must be 1.");
    DSPGraph::ThrowException(1701602593, &v5, 1510, &v4, &v3);
  }
  std::string::basic_string[abi:ne180100]<0>(&v5, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
  std::string::basic_string[abi:ne180100]<0>(&v4, "operator()");
  std::string::basic_string[abi:ne180100]<0>(&v3, "wrong number of inputs for CopyBox. must be 1.");
  DSPGraph::ThrowException(1701602593, &v5, 1508, &v4, &v3);
}

void sub_1900D9EF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_11,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_11>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDFA1890;
  return result;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_11,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_11>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
}

void *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_10,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_10>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDFA1848;
  return result;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_10,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_10>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_9,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_9>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (*a2 == 1)
  {
    if (*a3 == 1) {
      operator new();
    }
    std::string::basic_string[abi:ne180100]<0>(&v5, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v4, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v3, "wrong number of outputs for VectorGainBox. must be 1.");
    DSPGraph::ThrowException(1701602593, &v5, 1492, &v4, &v3);
  }
  std::string::basic_string[abi:ne180100]<0>(&v5, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
  std::string::basic_string[abi:ne180100]<0>(&v4, "operator()");
  std::string::basic_string[abi:ne180100]<0>(&v3, "wrong number of inputs for VectorGainBox. must be 1.");
  DSPGraph::ThrowException(1701602593, &v5, 1490, &v4, &v3);
}

void sub_1900DA154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_9,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_9>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDFA1800;
  return result;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_9,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_9>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_8,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_8>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (*a2 == 1)
  {
    if (*a3 == 1) {
      operator new();
    }
    std::string::basic_string[abi:ne180100]<0>(&v5, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v4, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v3, "wrong number of outputs for arithmetic abs box. must be 1.");
    DSPGraph::ThrowException(1701602593, &v5, 1483, &v4, &v3);
  }
  std::string::basic_string[abi:ne180100]<0>(&v5, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
  std::string::basic_string[abi:ne180100]<0>(&v4, "operator()");
  std::string::basic_string[abi:ne180100]<0>(&v3, "wrong number of inputs for arithmetic abs box. must be 1.");
  DSPGraph::ThrowException(1701602593, &v5, 1481, &v4, &v3);
}

void sub_1900DA348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_8,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_8>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDFA17B8;
  return result;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_8,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_8>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticSumBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::cplx_type>::OutExpectedSampleSize()
{
  return 8;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticSumBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::cplx_type>::In1ExpectedSampleSize()
{
  return 8;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticSumBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::cplx_type>::In0ExpectedSampleSize()
{
  return 8;
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticSumBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::cplx_type>::process(int a1, vDSP_Length __N, float *a3, float *a4, float *a5)
{
  __A.realp = a3;
  __A.imagp = &a3[__N];
  __B.realp = a4;
  __B.imagp = &a4[__N];
  v5.realp = a5;
  v5.imagp = &a5[__N];
  vDSP_zvadd(&__A, 1, &__B, 1, &v5, 1, __N);
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticSumBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::cplx_type>::~ArithmeticCore()
{
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticSumBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::real_type>::OutExpectedSampleSize()
{
  return 8;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticSumBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::real_type>::In1ExpectedSampleSize()
{
  return 4;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticSumBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::real_type>::In0ExpectedSampleSize()
{
  return 8;
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticSumBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::real_type>::process(int a1, vDSP_Length __N, float *a3, const float *__B, float *a5)
{
  __A.realp = a3;
  __A.imagp = &a3[__N];
  v5.realp = a5;
  v5.imagp = &a5[__N];
  vDSP_zrvadd(&__A, 1, __B, 1, &v5, 1, __N);
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticSumBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::real_type>::~ArithmeticCore()
{
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticSumBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::cplx_type>::OutExpectedSampleSize()
{
  return 8;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticSumBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::cplx_type>::In1ExpectedSampleSize()
{
  return 8;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticSumBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::cplx_type>::In0ExpectedSampleSize()
{
  return 4;
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticSumBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::cplx_type>::process(int a1, vDSP_Length __N, const float *a3, float *a4, float *a5)
{
  __A.realp = a4;
  __A.imagp = &a4[__N];
  v5.realp = a5;
  v5.imagp = &a5[__N];
  vDSP_zrvadd(&__A, 1, a3, 1, &v5, 1, __N);
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticSumBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::cplx_type>::~ArithmeticCore()
{
}

double DSPGraph::ArithmeticSumBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result = 2.73571922e161;
  *(_OWORD *)a1 = xmmword_1901C6300;
  *(_DWORD *)(a1 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
  return result;
}

const char *DSPGraph::ArithmeticSumBox::ClassName(DSPGraph::ArithmeticSumBox *this)
{
  return "asum";
}

void DSPGraph::ArithmeticSumBox::~ArithmeticSumBox(DSPGraph::ArithmeticSumBox *this)
{
  *(void *)this = &unk_1EDF99E78;
  uint64_t v2 = *((void *)this + 97);
  *((void *)this + 97) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x192FC8940);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1EDF99E78;
  uint64_t v2 = *((void *)this + 97);
  *((void *)this + 97) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  DSPGraph::Box::~Box(this);
}

void *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_7,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_7>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDFA1770;
  return result;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_7,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_7>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_6,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_6>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (*a2 == 2)
  {
    if (*a3 == 1) {
      operator new();
    }
    std::string::basic_string[abi:ne180100]<0>(&v5, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v4, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v3, "wrong number of outputs for arithmetic difference box. Must be 1.");
    DSPGraph::ThrowException(1701602593, &v5, 1465, &v4, &v3);
  }
  std::string::basic_string[abi:ne180100]<0>(&v5, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
  std::string::basic_string[abi:ne180100]<0>(&v4, "operator()");
  std::string::basic_string[abi:ne180100]<0>(&v3, "wrong number of inputs for arithmetic difference box. Must be 2.");
  DSPGraph::ThrowException(1701602593, &v5, 1463, &v4, &v3);
}

void sub_1900DA858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

void DSPGraph::arithmetic_boxes::ArithmeticBox<DSPGraph::ArithmeticDiffBox>::initialize(uint64_t a1)
{
  DSPGraph::Box::initialize((DSPGraph::Box *)a1);
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v3 = *(void *)(a1 + 72);
  if (((v3 - v2) & 0x1FFFFFFFE0) == 0x40 && ((*(void *)(a1 + 96) - *(void *)(a1 + 88)) & 0x1FFFFFFFE0) == 0x20)
  {
    if (v3 != v2)
    {
      uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
      uint64_t v5 = *(void *)(a1 + 64);
      if ((unint64_t)(*(void *)(a1 + 72) - v5) > 0x20)
      {
        int v6 = *(_DWORD *)(*(void *)(v4 + 120) + 28);
        if (v6 == *(_DWORD *)(*(void *)((*(uint64_t (**)(void))(*(void *)(v5 + 32) + 40))() + 120) + 28))
        {
          uint64_t v7 = *(void *)(a1 + 64);
          if (*(void *)(a1 + 72) != v7)
          {
            uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 40))(v7);
            uint64_t v9 = *(void *)(a1 + 88);
            if (*(void *)(a1 + 96) != v9)
            {
              int v10 = *(_DWORD *)(*(void *)(v8 + 120) + 28);
              if (v10 == *(_DWORD *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v9 + 40))(v9) + 120)
                                    + 28))
              {
                uint64_t v11 = *(void *)(a1 + 64);
                if (*(void *)(a1 + 72) != v11)
                {
                  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 40))(v11);
                  uint64_t v13 = *(void *)(a1 + 64);
                  if ((unint64_t)(*(void *)(a1 + 72) - v13) > 0x20)
                  {
                    int v14 = *(_DWORD *)(*(void *)(v12 + 120) + 8);
                    int v15 = *(_DWORD *)(*(void *)((*(uint64_t (**)(void))(*(void *)(v13 + 32) + 40))() + 120) + 8);
                    if (v14 != 1819304813 || v15 != 1819304813)
                    {
                      if (v14 == 1819304813 && v15 != 1819304813) {
                        operator new();
                      }
                      operator new();
                    }
                    operator new();
                  }
                  std::string::basic_string[abi:ne180100]<0>(v54, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
                  std::string::basic_string[abi:ne180100]<0>(v53, "in");
                  char v36 = (void *)(a1 + 32);
                  if (*(char *)(a1 + 55) < 0) {
                    char v36 = (void *)*v36;
                  }
                  DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v35, v36, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 1);
                }
                std::string::basic_string[abi:ne180100]<0>(v54, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
                std::string::basic_string[abi:ne180100]<0>(v53, "in");
                uint64_t v34 = (void *)(a1 + 32);
                if (*(char *)(a1 + 55) < 0) {
                  uint64_t v34 = (void *)*v34;
                }
                DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v33, v34, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
              }
              std::string::basic_string[abi:ne180100]<0>(v52, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
              std::string::basic_string[abi:ne180100]<0>(v51, "initialize");
              uint64_t v30 = *(void *)(a1 + 64);
              if (*(void *)(a1 + 72) == v30)
              {
                std::string::basic_string[abi:ne180100]<0>(v54, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
                std::string::basic_string[abi:ne180100]<0>(v53, "in");
                unint64_t v32 = (void *)(a1 + 32);
                if (*(char *)(a1 + 55) < 0) {
                  unint64_t v32 = (void *)*v32;
                }
                DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v31, v32, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
              }
              uint64_t v42 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 40))(v30);
              uint64_t v43 = *(void *)(a1 + 88);
              if (*(void *)(a1 + 96) == v43)
              {
                std::string::basic_string[abi:ne180100]<0>(v54, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
                std::string::basic_string[abi:ne180100]<0>(v53, "out");
                unsigned __int8 v45 = (void *)(a1 + 32);
                if (*(char *)(a1 + 55) < 0) {
                  unsigned __int8 v45 = (void *)*v45;
                }
                DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v44, v45, (uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 5, 0);
              }
              uint64_t v48 = *(unsigned int *)(*(void *)(v42 + 120) + 28);
              uint64_t v49 = (*(uint64_t (**)(uint64_t))(*(void *)v43 + 40))(v43);
              DSPGraph::strprintf((DSPGraph *)"The inputs and output must have the same channel count, but have %u and %u.", v50, v48, *(unsigned int *)(*(void *)(v49 + 120) + 28));
            }
            std::string::basic_string[abi:ne180100]<0>(v54, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
            std::string::basic_string[abi:ne180100]<0>(v53, "out");
            std::string v29 = (void *)(a1 + 32);
            if (*(char *)(a1 + 55) < 0) {
              std::string v29 = (void *)*v29;
            }
            DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v28, v29, (uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 5, 0);
          }
          std::string::basic_string[abi:ne180100]<0>(v54, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
          std::string::basic_string[abi:ne180100]<0>(v53, "in");
          uint8x8_t v27 = (void *)(a1 + 32);
          if (*(char *)(a1 + 55) < 0) {
            uint8x8_t v27 = (void *)*v27;
          }
          DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v26, v27, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
        }
        std::string::basic_string[abi:ne180100]<0>(v52, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(v51, "initialize");
        uint64_t v23 = *(void *)(a1 + 64);
        if (*(void *)(a1 + 72) == v23)
        {
          std::string::basic_string[abi:ne180100]<0>(v54, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
          std::string::basic_string[abi:ne180100]<0>(v53, "in");
          uint8x8_t v25 = (void *)(a1 + 32);
          if (*(char *)(a1 + 55) < 0) {
            uint8x8_t v25 = (void *)*v25;
          }
          DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v24, v25, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
        }
        uint64_t v37 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 40))(v23);
        uint64_t v38 = *(void *)(a1 + 64);
        if ((unint64_t)(*(void *)(a1 + 72) - v38) > 0x20)
        {
          uint64_t v39 = *(unsigned int *)(*(void *)(v37 + 120) + 28);
          uint64_t v40 = (*(uint64_t (**)(void))(*(void *)(v38 + 32) + 40))();
          DSPGraph::strprintf((DSPGraph *)"The inputs must have the same channel count, but have %u and %u.", v41, v39, *(unsigned int *)(*(void *)(v40 + 120) + 28));
        }
        std::string::basic_string[abi:ne180100]<0>(v54, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(v53, "in");
        uint64_t v47 = (void *)(a1 + 32);
        if (*(char *)(a1 + 55) < 0) {
          uint64_t v47 = (void *)*v47;
        }
        DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v46, v47, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 1);
      }
      std::string::basic_string[abi:ne180100]<0>(v54, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v53, "in");
      uint64_t v22 = (void *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        uint64_t v22 = (void *)*v22;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v21, v22, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 1);
    }
    std::string::basic_string[abi:ne180100]<0>(v54, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v53, "in");
    BOOL v20 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      BOOL v20 = (void *)*v20;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v19, v20, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
  }
  std::string::basic_string[abi:ne180100]<0>(v54, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
  std::string::basic_string[abi:ne180100]<0>(v53, "initialize");
  DSPGraph::strprintf((DSPGraph *)"There must be two inputs and one output, instead of %u and %u.", v18, (*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, (*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 5);
}

void sub_1900DB264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v29 - 57) < 0) {
    operator delete(*(void **)(v29 - 80));
  }
  if (*(char *)(v29 - 33) < 0) {
    operator delete(*(void **)(v29 - 56));
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDiffBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::cplx_type>::OutExpectedSampleSize()
{
  return 8;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDiffBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::cplx_type>::In1ExpectedSampleSize()
{
  return 8;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDiffBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::cplx_type>::In0ExpectedSampleSize()
{
  return 8;
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDiffBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::cplx_type>::process(int a1, vDSP_Length __N, float *a3, float *a4, float *a5)
{
  __A.realp = a3;
  __A.imagp = &a3[__N];
  __B.realp = a4;
  __B.imagp = &a4[__N];
  v5.realp = a5;
  v5.imagp = &a5[__N];
  vDSP_zvsub(&__A, 1, &__B, 1, &v5, 1, __N);
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDiffBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::cplx_type>::~ArithmeticCore()
{
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDiffBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::real_type>::OutExpectedSampleSize()
{
  return 8;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDiffBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::real_type>::In1ExpectedSampleSize()
{
  return 4;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDiffBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::real_type>::In0ExpectedSampleSize()
{
  return 8;
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDiffBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::real_type>::process(int a1, vDSP_Length __N, float *a3, const float *__B, float *a5)
{
  __A.realp = a3;
  __A.imagp = &a3[__N];
  v5.realp = a5;
  v5.imagp = &a5[__N];
  vDSP_zrvsub(&__A, 1, __B, 1, &v5, 1, __N);
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDiffBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::real_type>::~ArithmeticCore()
{
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDiffBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::cplx_type>::OutExpectedSampleSize()
{
  return 8;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDiffBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::cplx_type>::In1ExpectedSampleSize()
{
  return 8;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDiffBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::cplx_type>::In0ExpectedSampleSize()
{
  return 4;
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDiffBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::cplx_type>::process(int a1, vDSP_Length __N, const float *a3, float *a4, float *a5)
{
  vDSP_Length v5 = __N;
  __A.realp = a4;
  __A.imagp = &a4[__N];
  v6.realp = a5;
  v6.imagp = &a5[__N];
  vDSP_zrvsub(&__A, 1, a3, 1, &v6, 1, __N);
  vDSP_zvneg(&v6, 1, &v6, 1, v5);
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDiffBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::cplx_type>::~ArithmeticCore()
{
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDiffBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::OutExpectedSampleSize()
{
  return 4;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDiffBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::In1ExpectedSampleSize()
{
  return 4;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDiffBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::In0ExpectedSampleSize()
{
  return 4;
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDiffBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::process(int a1, vDSP_Length __N, const float *a3, const float *__B, float *a5)
{
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDiffBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::~ArithmeticCore()
{
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticBox<DSPGraph::ArithmeticDiffBox>::process(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 64;
  uint64_t v3 = *(void *)(a1 + 64);
  if (*(void *)(v4 + 8) == v3)
  {
    std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v81, "in");
    uint64_t v40 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      uint64_t v40 = (void *)*v40;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v39, v40, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 40))(v3);
  uint64_t v7 = *(void *)(a1 + 64);
  if ((unint64_t)(*(void *)(a1 + 72) - v7) <= 0x20)
  {
    std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v81, "in");
    uint64_t v42 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      uint64_t v42 = (void *)*v42;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v41, v42, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 1);
  }
  uint64_t v8 = *(unsigned int **)(*(void *)(v6 + 56) + 80);
  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)(v7 + 32) + 40))();
  uint64_t v10 = *(void *)(a1 + 88);
  if (*(void *)(a1 + 96) == v10)
  {
    std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v81, "out");
    unint64_t v44 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      unint64_t v44 = (void *)*v44;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v43, v44, (uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 5, 0);
  }
  uint64_t v11 = *(_DWORD **)(*(void *)(v9 + 56) + 80);
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10);
  if (*v8 != *v11)
  {
    std::string::basic_string[abi:ne180100]<0>(v80, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v79, "process");
    uint64_t v45 = *(void *)(a1 + 64);
    if (*(void *)(a1 + 72) == v45)
    {
      std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v81, "in");
      uint64_t v47 = (void *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        uint64_t v47 = (void *)*v47;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v46, v47, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
    }
    uint64_t v65 = (*(uint64_t (**)(uint64_t))(*(void *)v45 + 40))(v45);
    uint64_t v66 = *(void *)(a1 + 64);
    if ((unint64_t)(*(void *)(a1 + 72) - v66) > 0x20)
    {
      uint64_t v67 = *(unsigned int *)(*(void *)(v65 + 120) + 28);
      uint64_t v68 = (*(uint64_t (**)(void))(*(void *)(v66 + 32) + 40))();
      DSPGraph::strprintf((DSPGraph *)"The inputs must have the same channel count, but have %u and %u.", v69, v67, *(unsigned int *)(*(void *)(v68 + 120) + 28));
    }
    std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v81, "in");
    unint64_t v75 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      unint64_t v75 = (void *)*v75;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v74, v75, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 1);
  }
  uint64_t v13 = *(_DWORD **)(*(void *)(v12 + 56) + 80);
  if (*v8 != *v13)
  {
    std::string::basic_string[abi:ne180100]<0>(v80, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v79, "process");
    uint64_t v48 = *(void *)(a1 + 64);
    if (*(void *)(a1 + 72) == v48)
    {
      std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v81, "in");
      uint64_t v50 = (void *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        uint64_t v50 = (void *)*v50;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v49, v50, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
    }
    uint64_t v70 = (*(uint64_t (**)(uint64_t))(*(void *)v48 + 40))(v48);
    uint64_t v71 = *(void *)(a1 + 88);
    if (*(void *)(a1 + 96) == v71)
    {
      std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v81, "out");
      unint64_t v73 = (void *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        unint64_t v73 = (void *)*v73;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v72, v73, (uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 5, 0);
    }
    uint64_t v76 = *(unsigned int *)(*(void *)(v70 + 120) + 28);
    uint64_t v77 = (*(uint64_t (**)(uint64_t))(*(void *)v71 + 40))(v71);
    DSPGraph::strprintf((DSPGraph *)"The inputs and output must have the same channel count, but have %u and %u.", v78, v76, *(unsigned int *)(*(void *)(v77 + 120) + 28));
  }
  unsigned int v14 = v8[3];
  if (v14 < (*(unsigned int (**)(void))(**(void **)(a1 + 776) + 24))(*(void *)(a1 + 776))
           * a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v81, "process");
    int v51 = (*(uint64_t (**)(void))(**(void **)(a1 + 776) + 24))(*(void *)(a1 + 776));
    DSPGraph::strprintf((DSPGraph *)"The buffer passed for input 0 should be at least %u bytes, but is %u.", v52, (v51 * a2), v8[3]);
  }
  unsigned int v15 = v11[3];
  if (v15 < (*(unsigned int (**)(void))(**(void **)(a1 + 776) + 32))(*(void *)(a1 + 776))
           * a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v81, "process");
    int v53 = (*(uint64_t (**)(void))(**(void **)(a1 + 776) + 32))(*(void *)(a1 + 776));
    DSPGraph::strprintf((DSPGraph *)"The buffer passed for input 1 should be at least %u bytes, but is %u.", v54, (v53 * a2), v11[3]);
  }
  uint64_t v16 = *v8;
  if (v16)
  {
    unint64_t v17 = v13 + 4;
    unint64_t v18 = (uint64_t *)(v11 + 4);
    std::string v19 = (uint64_t *)(v8 + 4);
    do
    {
      uint64_t v21 = *v19;
      v19 += 2;
      uint64_t v20 = v21;
      uint64_t v22 = *v18;
      v18 += 2;
      (*(void (**)(void, uint64_t, uint64_t, uint64_t, void))(**(void **)(a1 + 776) + 16))(*(void *)(a1 + 776), a2, v20, v22, *v17);
      *((_DWORD *)v17 - 1) = (*(uint64_t (**)(void))(**(void **)(a1 + 776) + 40))(*(void *)(a1 + 776))
                           * a2;
      v17 += 2;
      --v16;
    }
    while (v16);
  }
  uint64_t v23 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) == v23)
  {
    std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v81, "in");
    int v56 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      int v56 = (void *)*v56;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v55, v56, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
  }
  uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 40))(v23);
  uint64_t v25 = *(void *)(a1 + 88);
  if (*(void *)(a1 + 96) == v25)
  {
    std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v81, "out");
    uint64_t v58 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      uint64_t v58 = (void *)*v58;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v57, v58, (uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 5, 0);
  }
  uint64_t v26 = *(void *)(v24 + 56);
  uint64_t v27 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v25 + 40))(v25) + 56);
  long long v28 = *(_OWORD *)(v26 + 8);
  long long v29 = *(_OWORD *)(v26 + 24);
  long long v30 = *(_OWORD *)(v26 + 40);
  *(_OWORD *)(v27 + 5std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = *(_OWORD *)(v26 + 56);
  *(_OWORD *)(v27 + 40) = v30;
  *(_OWORD *)(v27 + 24) = v29;
  *(_OWORD *)(v27 + 8) = v28;
  uint64_t v31 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) == v31)
  {
    std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v81, "in");
    unsigned int v60 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      unsigned int v60 = (void *)*v60;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v59, v60, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
  }
  uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 40))(v31);
  uint64_t v33 = *(void *)(a1 + 64);
  if ((unint64_t)(*(void *)(a1 + 72) - v33) <= 0x20)
  {
    std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v81, "in");
    char v62 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      char v62 = (void *)*v62;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v61, v62, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 1);
  }
  int v34 = *(_DWORD *)(*(void *)(v32 + 56) + 72);
  uint64_t v35 = (*(uint64_t (**)(void))(*(void *)(v33 + 32) + 40))();
  uint64_t v36 = *(void *)(a1 + 88);
  if (*(void *)(a1 + 96) == v36)
  {
    std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v81, "out");
    unsigned int v64 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      unsigned int v64 = (void *)*v64;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v63, v64, (uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 5, 0);
  }
  unsigned int v37 = (*(_DWORD *)(*(void *)(v35 + 56) + 72) | 0xFFFFFFEF) & v34;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v36 + 40))(v36);
  *(_DWORD *)(*(void *)(result + 56) + 72) = v37;
  return result;
}

void sub_1900DC0E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (*(char *)(v35 - 49) < 0) {
    operator delete(*(void **)(v35 - 72));
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

double DSPGraph::ArithmeticDiffBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result = 1.43485253e161;
  *(_OWORD *)a1 = xmmword_1901C62F0;
  *(_DWORD *)(a1 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
  return result;
}

const char *DSPGraph::ArithmeticDiffBox::ClassName(DSPGraph::ArithmeticDiffBox *this)
{
  return "adif";
}

void DSPGraph::ArithmeticDiffBox::~ArithmeticDiffBox(DSPGraph::ArithmeticDiffBox *this)
{
  *(void *)this = &unk_1EDF9A108;
  uint64_t v2 = *((void *)this + 97);
  *((void *)this + 97) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x192FC8940);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1EDF9A108;
  uint64_t v2 = *((void *)this + 97);
  *((void *)this + 97) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  DSPGraph::Box::~Box(this);
}

void *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_6,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_6>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDFA1728;
  return result;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_6,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_6>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_5,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_5>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (*a2 == 2)
  {
    if (*a3 == 1) {
      operator new();
    }
    std::string::basic_string[abi:ne180100]<0>(&v5, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v4, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v3, "wrong number of outputs for arithmetic max box. Must be 1.");
    DSPGraph::ThrowException(1701602593, &v5, 1455, &v4, &v3);
  }
  std::string::basic_string[abi:ne180100]<0>(&v5, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
  std::string::basic_string[abi:ne180100]<0>(&v4, "operator()");
  std::string::basic_string[abi:ne180100]<0>(&v3, "wrong number of inputs for arithmetic max box. Must be 2.");
  DSPGraph::ThrowException(1701602593, &v5, 1453, &v4, &v3);
}

void sub_1900DC50C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

void DSPGraph::arithmetic_boxes::ArithmeticBox<DSPGraph::ArithmeticMaxBox>::initialize(uint64_t a1)
{
  DSPGraph::Box::initialize((DSPGraph::Box *)a1);
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v3 = *(void *)(a1 + 72);
  if (((v3 - v2) & 0x1FFFFFFFE0) == 0x40 && ((*(void *)(a1 + 96) - *(void *)(a1 + 88)) & 0x1FFFFFFFE0) == 0x20)
  {
    if (v3 != v2)
    {
      uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
      uint64_t v5 = *(void *)(a1 + 64);
      if ((unint64_t)(*(void *)(a1 + 72) - v5) > 0x20)
      {
        int v6 = *(_DWORD *)(*(void *)(v4 + 120) + 28);
        if (v6 == *(_DWORD *)(*(void *)((*(uint64_t (**)(void))(*(void *)(v5 + 32) + 40))() + 120) + 28))
        {
          uint64_t v7 = *(void *)(a1 + 64);
          if (*(void *)(a1 + 72) != v7)
          {
            uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 40))(v7);
            uint64_t v9 = *(void *)(a1 + 88);
            if (*(void *)(a1 + 96) != v9)
            {
              int v10 = *(_DWORD *)(*(void *)(v8 + 120) + 28);
              if (v10 == *(_DWORD *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v9 + 40))(v9) + 120)
                                    + 28))
              {
                uint64_t v11 = *(void *)(a1 + 64);
                if (*(void *)(a1 + 72) != v11)
                {
                  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 40))(v11);
                  uint64_t v13 = *(void *)(a1 + 64);
                  if ((unint64_t)(*(void *)(a1 + 72) - v13) > 0x20)
                  {
                    int v14 = *(_DWORD *)(*(void *)(v12 + 120) + 8);
                    int v15 = *(_DWORD *)(*(void *)((*(uint64_t (**)(void))(*(void *)(v13 + 32) + 40))() + 120) + 8);
                    if (v14 != 1819304813 || v15 != 1819304813)
                    {
                      if (v14 == 1819304813 && v15 != 1819304813)
                      {
                        std::string::basic_string[abi:ne180100]<0>(v61, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
                        std::string::basic_string[abi:ne180100]<0>(v60, "initialize");
                        uint64_t v40 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
                        DSPGraph::strprintf((DSPGraph *)"Can't use real input for one bus and complex input for another with '%s' box", v41, v40);
                      }
                      if (v14 == 1819304813 || v15 != 1819304813)
                      {
                        std::string::basic_string[abi:ne180100]<0>(v61, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
                        std::string::basic_string[abi:ne180100]<0>(v60, "initialize");
                        uint64_t v38 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
                        DSPGraph::strprintf((DSPGraph *)"Can't use complex inputs with '%s' box", v39, v38);
                      }
                      std::string::basic_string[abi:ne180100]<0>(v61, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
                      std::string::basic_string[abi:ne180100]<0>(v60, "initialize");
                      uint64_t v51 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
                      DSPGraph::strprintf((DSPGraph *)"Can't use complex input for one bus and real input for another with '%s' box", v52, v51);
                    }
                    operator new();
                  }
                  std::string::basic_string[abi:ne180100]<0>(v61, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
                  std::string::basic_string[abi:ne180100]<0>(v60, "in");
                  uint64_t v35 = (void *)(a1 + 32);
                  if (*(char *)(a1 + 55) < 0) {
                    uint64_t v35 = (void *)*v35;
                  }
                  DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v34, v35, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 1);
                }
                std::string::basic_string[abi:ne180100]<0>(v61, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
                std::string::basic_string[abi:ne180100]<0>(v60, "in");
                uint64_t v33 = (void *)(a1 + 32);
                if (*(char *)(a1 + 55) < 0) {
                  uint64_t v33 = (void *)*v33;
                }
                DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v32, v33, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
              }
              std::string::basic_string[abi:ne180100]<0>(v59, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
              std::string::basic_string[abi:ne180100]<0>(v58, "initialize");
              uint64_t v29 = *(void *)(a1 + 64);
              if (*(void *)(a1 + 72) == v29)
              {
                std::string::basic_string[abi:ne180100]<0>(v61, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
                std::string::basic_string[abi:ne180100]<0>(v60, "in");
                uint64_t v31 = (void *)(a1 + 32);
                if (*(char *)(a1 + 55) < 0) {
                  uint64_t v31 = (void *)*v31;
                }
                DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v30, v31, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
              }
              uint64_t v47 = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 40))(v29);
              uint64_t v48 = *(void *)(a1 + 88);
              if (*(void *)(a1 + 96) == v48)
              {
                std::string::basic_string[abi:ne180100]<0>(v61, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
                std::string::basic_string[abi:ne180100]<0>(v60, "out");
                uint64_t v50 = (void *)(a1 + 32);
                if (*(char *)(a1 + 55) < 0) {
                  uint64_t v50 = (void *)*v50;
                }
                DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v49, v50, (uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 5, 0);
              }
              uint64_t v55 = *(unsigned int *)(*(void *)(v47 + 120) + 28);
              uint64_t v56 = (*(uint64_t (**)(uint64_t))(*(void *)v48 + 40))(v48);
              DSPGraph::strprintf((DSPGraph *)"The inputs and output must have the same channel count, but have %u and %u.", v57, v55, *(unsigned int *)(*(void *)(v56 + 120) + 28));
            }
            std::string::basic_string[abi:ne180100]<0>(v61, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
            std::string::basic_string[abi:ne180100]<0>(v60, "out");
            long long v28 = (void *)(a1 + 32);
            if (*(char *)(a1 + 55) < 0) {
              long long v28 = (void *)*v28;
            }
            DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v27, v28, (uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 5, 0);
          }
          std::string::basic_string[abi:ne180100]<0>(v61, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
          std::string::basic_string[abi:ne180100]<0>(v60, "in");
          uint64_t v26 = (void *)(a1 + 32);
          if (*(char *)(a1 + 55) < 0) {
            uint64_t v26 = (void *)*v26;
          }
          DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v25, v26, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
        }
        std::string::basic_string[abi:ne180100]<0>(v59, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(v58, "initialize");
        uint64_t v22 = *(void *)(a1 + 64);
        if (*(void *)(a1 + 72) == v22)
        {
          std::string::basic_string[abi:ne180100]<0>(v61, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
          std::string::basic_string[abi:ne180100]<0>(v60, "in");
          uint64_t v24 = (void *)(a1 + 32);
          if (*(char *)(a1 + 55) < 0) {
            uint64_t v24 = (void *)*v24;
          }
          DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v23, v24, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
        }
        uint64_t v42 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 40))(v22);
        uint64_t v43 = *(void *)(a1 + 64);
        if ((unint64_t)(*(void *)(a1 + 72) - v43) > 0x20)
        {
          uint64_t v44 = *(unsigned int *)(*(void *)(v42 + 120) + 28);
          uint64_t v45 = (*(uint64_t (**)(void))(*(void *)(v43 + 32) + 40))();
          DSPGraph::strprintf((DSPGraph *)"The inputs must have the same channel count, but have %u and %u.", v46, v44, *(unsigned int *)(*(void *)(v45 + 120) + 28));
        }
        std::string::basic_string[abi:ne180100]<0>(v61, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(v60, "in");
        int v54 = (void *)(a1 + 32);
        if (*(char *)(a1 + 55) < 0) {
          int v54 = (void *)*v54;
        }
        DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v53, v54, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 1);
      }
      std::string::basic_string[abi:ne180100]<0>(v61, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v60, "in");
      uint64_t v21 = (void *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        uint64_t v21 = (void *)*v21;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v20, v21, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 1);
    }
    std::string::basic_string[abi:ne180100]<0>(v61, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v60, "in");
    std::string v19 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      std::string v19 = (void *)*v19;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v18, v19, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
  }
  std::string::basic_string[abi:ne180100]<0>(v61, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
  std::string::basic_string[abi:ne180100]<0>(v60, "initialize");
  DSPGraph::strprintf((DSPGraph *)"There must be two inputs and one output, instead of %u and %u.", v17, (*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, (*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 5);
}

void sub_1900DD004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v29 - 57) < 0) {
    operator delete(*(void **)(v29 - 80));
  }
  if (*(char *)(v29 - 33) < 0) {
    operator delete(*(void **)(v29 - 56));
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMaxBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::OutExpectedSampleSize()
{
  return 4;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMaxBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::In1ExpectedSampleSize()
{
  return 4;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMaxBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::In0ExpectedSampleSize()
{
  return 4;
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMaxBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::process(int a1, vDSP_Length __N, const float *__A, const float *__B, float *a5)
{
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMaxBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::~ArithmeticCore()
{
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticBox<DSPGraph::ArithmeticMaxBox>::process(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 64;
  uint64_t v3 = *(void *)(a1 + 64);
  if (*(void *)(v4 + 8) == v3)
  {
    std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v81, "in");
    uint64_t v40 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      uint64_t v40 = (void *)*v40;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v39, v40, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 40))(v3);
  uint64_t v7 = *(void *)(a1 + 64);
  if ((unint64_t)(*(void *)(a1 + 72) - v7) <= 0x20)
  {
    std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v81, "in");
    uint64_t v42 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      uint64_t v42 = (void *)*v42;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v41, v42, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 1);
  }
  uint64_t v8 = *(unsigned int **)(*(void *)(v6 + 56) + 80);
  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)(v7 + 32) + 40))();
  uint64_t v10 = *(void *)(a1 + 88);
  if (*(void *)(a1 + 96) == v10)
  {
    std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v81, "out");
    uint64_t v44 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      uint64_t v44 = (void *)*v44;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v43, v44, (uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 5, 0);
  }
  uint64_t v11 = *(_DWORD **)(*(void *)(v9 + 56) + 80);
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10);
  if (*v8 != *v11)
  {
    std::string::basic_string[abi:ne180100]<0>(v80, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v79, "process");
    uint64_t v45 = *(void *)(a1 + 64);
    if (*(void *)(a1 + 72) == v45)
    {
      std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v81, "in");
      uint64_t v47 = (void *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        uint64_t v47 = (void *)*v47;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v46, v47, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
    }
    uint64_t v65 = (*(uint64_t (**)(uint64_t))(*(void *)v45 + 40))(v45);
    uint64_t v66 = *(void *)(a1 + 64);
    if ((unint64_t)(*(void *)(a1 + 72) - v66) > 0x20)
    {
      uint64_t v67 = *(unsigned int *)(*(void *)(v65 + 120) + 28);
      uint64_t v68 = (*(uint64_t (**)(void))(*(void *)(v66 + 32) + 40))();
      DSPGraph::strprintf((DSPGraph *)"The inputs must have the same channel count, but have %u and %u.", v69, v67, *(unsigned int *)(*(void *)(v68 + 120) + 28));
    }
    std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v81, "in");
    unint64_t v75 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      unint64_t v75 = (void *)*v75;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v74, v75, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 1);
  }
  uint64_t v13 = *(_DWORD **)(*(void *)(v12 + 56) + 80);
  if (*v8 != *v13)
  {
    std::string::basic_string[abi:ne180100]<0>(v80, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v79, "process");
    uint64_t v48 = *(void *)(a1 + 64);
    if (*(void *)(a1 + 72) == v48)
    {
      std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v81, "in");
      uint64_t v50 = (void *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        uint64_t v50 = (void *)*v50;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v49, v50, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
    }
    uint64_t v70 = (*(uint64_t (**)(uint64_t))(*(void *)v48 + 40))(v48);
    uint64_t v71 = *(void *)(a1 + 88);
    if (*(void *)(a1 + 96) == v71)
    {
      std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v81, "out");
      unint64_t v73 = (void *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        unint64_t v73 = (void *)*v73;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v72, v73, (uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 5, 0);
    }
    uint64_t v76 = *(unsigned int *)(*(void *)(v70 + 120) + 28);
    uint64_t v77 = (*(uint64_t (**)(uint64_t))(*(void *)v71 + 40))(v71);
    DSPGraph::strprintf((DSPGraph *)"The inputs and output must have the same channel count, but have %u and %u.", v78, v76, *(unsigned int *)(*(void *)(v77 + 120) + 28));
  }
  unsigned int v14 = v8[3];
  if (v14 < (*(unsigned int (**)(void))(**(void **)(a1 + 776) + 24))(*(void *)(a1 + 776))
           * a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v81, "process");
    int v51 = (*(uint64_t (**)(void))(**(void **)(a1 + 776) + 24))(*(void *)(a1 + 776));
    DSPGraph::strprintf((DSPGraph *)"The buffer passed for input 0 should be at least %u bytes, but is %u.", v52, (v51 * a2), v8[3]);
  }
  unsigned int v15 = v11[3];
  if (v15 < (*(unsigned int (**)(void))(**(void **)(a1 + 776) + 32))(*(void *)(a1 + 776))
           * a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v81, "process");
    int v53 = (*(uint64_t (**)(void))(**(void **)(a1 + 776) + 32))(*(void *)(a1 + 776));
    DSPGraph::strprintf((DSPGraph *)"The buffer passed for input 1 should be at least %u bytes, but is %u.", v54, (v53 * a2), v11[3]);
  }
  uint64_t v16 = *v8;
  if (v16)
  {
    unint64_t v17 = v13 + 4;
    unint64_t v18 = (uint64_t *)(v11 + 4);
    std::string v19 = (uint64_t *)(v8 + 4);
    do
    {
      uint64_t v21 = *v19;
      v19 += 2;
      uint64_t v20 = v21;
      uint64_t v22 = *v18;
      v18 += 2;
      (*(void (**)(void, uint64_t, uint64_t, uint64_t, void))(**(void **)(a1 + 776) + 16))(*(void *)(a1 + 776), a2, v20, v22, *v17);
      *((_DWORD *)v17 - 1) = (*(uint64_t (**)(void))(**(void **)(a1 + 776) + 40))(*(void *)(a1 + 776))
                           * a2;
      v17 += 2;
      --v16;
    }
    while (v16);
  }
  uint64_t v23 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) == v23)
  {
    std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v81, "in");
    uint64_t v56 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      uint64_t v56 = (void *)*v56;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v55, v56, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
  }
  uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 40))(v23);
  uint64_t v25 = *(void *)(a1 + 88);
  if (*(void *)(a1 + 96) == v25)
  {
    std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v81, "out");
    uint64_t v58 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      uint64_t v58 = (void *)*v58;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v57, v58, (uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 5, 0);
  }
  uint64_t v26 = *(void *)(v24 + 56);
  uint64_t v27 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v25 + 40))(v25) + 56);
  long long v28 = *(_OWORD *)(v26 + 8);
  long long v29 = *(_OWORD *)(v26 + 24);
  long long v30 = *(_OWORD *)(v26 + 40);
  *(_OWORD *)(v27 + 5std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = *(_OWORD *)(v26 + 56);
  *(_OWORD *)(v27 + 40) = v30;
  *(_OWORD *)(v27 + 24) = v29;
  *(_OWORD *)(v27 + 8) = v28;
  uint64_t v31 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) == v31)
  {
    std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v81, "in");
    unsigned int v60 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      unsigned int v60 = (void *)*v60;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v59, v60, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
  }
  uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 40))(v31);
  uint64_t v33 = *(void *)(a1 + 64);
  if ((unint64_t)(*(void *)(a1 + 72) - v33) <= 0x20)
  {
    std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v81, "in");
    char v62 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      char v62 = (void *)*v62;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v61, v62, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 1);
  }
  int v34 = *(_DWORD *)(*(void *)(v32 + 56) + 72);
  uint64_t v35 = (*(uint64_t (**)(void))(*(void *)(v33 + 32) + 40))();
  uint64_t v36 = *(void *)(a1 + 88);
  if (*(void *)(a1 + 96) == v36)
  {
    std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v81, "out");
    unsigned int v64 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      unsigned int v64 = (void *)*v64;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v63, v64, (uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 5, 0);
  }
  unsigned int v37 = (*(_DWORD *)(*(void *)(v35 + 56) + 72) | 0xFFFFFFEF) & v34;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v36 + 40))(v36);
  *(_DWORD *)(*(void *)(result + 56) + 72) = v37;
  return result;
}

void sub_1900DDD14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (*(char *)(v35 - 49) < 0) {
    operator delete(*(void **)(v35 - 72));
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

double DSPGraph::ArithmeticMaxBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result = 2.06533485e161;
  *(_OWORD *)a1 = xmmword_1901C62E0;
  *(_DWORD *)(a1 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
  return result;
}

const char *DSPGraph::ArithmeticMaxBox::ClassName(DSPGraph::ArithmeticMaxBox *this)
{
  return "amax";
}

void DSPGraph::ArithmeticMaxBox::~ArithmeticMaxBox(DSPGraph::ArithmeticMaxBox *this)
{
  *(void *)this = &unk_1EDF99958;
  uint64_t v2 = *((void *)this + 97);
  *((void *)this + 97) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x192FC8940);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1EDF99958;
  uint64_t v2 = *((void *)this + 97);
  *((void *)this + 97) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  DSPGraph::Box::~Box(this);
}

void *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_5,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_5>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDFA16E0;
  return result;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_5,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_5>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_4,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_4>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (*a2 == 2)
  {
    if (*a3 == 1) {
      operator new();
    }
    std::string::basic_string[abi:ne180100]<0>(&v5, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v4, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v3, "wrong number of outputs for arithmetic min box. Must be 1.");
    DSPGraph::ThrowException(1701602593, &v5, 1446, &v4, &v3);
  }
  std::string::basic_string[abi:ne180100]<0>(&v5, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
  std::string::basic_string[abi:ne180100]<0>(&v4, "operator()");
  std::string::basic_string[abi:ne180100]<0>(&v3, "wrong number of inputs for arithmetic min box. Must be 2.");
  DSPGraph::ThrowException(1701602593, &v5, 1444, &v4, &v3);
}

void sub_1900DE138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

void DSPGraph::arithmetic_boxes::ArithmeticBox<DSPGraph::ArithmeticMinBox>::initialize(uint64_t a1)
{
  DSPGraph::Box::initialize((DSPGraph::Box *)a1);
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v3 = *(void *)(a1 + 72);
  if (((v3 - v2) & 0x1FFFFFFFE0) == 0x40 && ((*(void *)(a1 + 96) - *(void *)(a1 + 88)) & 0x1FFFFFFFE0) == 0x20)
  {
    if (v3 != v2)
    {
      uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
      uint64_t v5 = *(void *)(a1 + 64);
      if ((unint64_t)(*(void *)(a1 + 72) - v5) > 0x20)
      {
        int v6 = *(_DWORD *)(*(void *)(v4 + 120) + 28);
        if (v6 == *(_DWORD *)(*(void *)((*(uint64_t (**)(void))(*(void *)(v5 + 32) + 40))() + 120) + 28))
        {
          uint64_t v7 = *(void *)(a1 + 64);
          if (*(void *)(a1 + 72) != v7)
          {
            uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 40))(v7);
            uint64_t v9 = *(void *)(a1 + 88);
            if (*(void *)(a1 + 96) != v9)
            {
              int v10 = *(_DWORD *)(*(void *)(v8 + 120) + 28);
              if (v10 == *(_DWORD *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v9 + 40))(v9) + 120)
                                    + 28))
              {
                uint64_t v11 = *(void *)(a1 + 64);
                if (*(void *)(a1 + 72) != v11)
                {
                  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 40))(v11);
                  uint64_t v13 = *(void *)(a1 + 64);
                  if ((unint64_t)(*(void *)(a1 + 72) - v13) > 0x20)
                  {
                    int v14 = *(_DWORD *)(*(void *)(v12 + 120) + 8);
                    int v15 = *(_DWORD *)(*(void *)((*(uint64_t (**)(void))(*(void *)(v13 + 32) + 40))() + 120) + 8);
                    if (v14 != 1819304813 || v15 != 1819304813)
                    {
                      if (v14 == 1819304813 && v15 != 1819304813)
                      {
                        std::string::basic_string[abi:ne180100]<0>(v61, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
                        std::string::basic_string[abi:ne180100]<0>(v60, "initialize");
                        uint64_t v40 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
                        DSPGraph::strprintf((DSPGraph *)"Can't use real input for one bus and complex input for another with '%s' box", v41, v40);
                      }
                      if (v14 == 1819304813 || v15 != 1819304813)
                      {
                        std::string::basic_string[abi:ne180100]<0>(v61, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
                        std::string::basic_string[abi:ne180100]<0>(v60, "initialize");
                        uint64_t v38 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
                        DSPGraph::strprintf((DSPGraph *)"Can't use complex inputs with '%s' box", v39, v38);
                      }
                      std::string::basic_string[abi:ne180100]<0>(v61, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
                      std::string::basic_string[abi:ne180100]<0>(v60, "initialize");
                      uint64_t v51 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
                      DSPGraph::strprintf((DSPGraph *)"Can't use complex input for one bus and real input for another with '%s' box", v52, v51);
                    }
                    operator new();
                  }
                  std::string::basic_string[abi:ne180100]<0>(v61, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
                  std::string::basic_string[abi:ne180100]<0>(v60, "in");
                  uint64_t v35 = (void *)(a1 + 32);
                  if (*(char *)(a1 + 55) < 0) {
                    uint64_t v35 = (void *)*v35;
                  }
                  DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v34, v35, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 1);
                }
                std::string::basic_string[abi:ne180100]<0>(v61, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
                std::string::basic_string[abi:ne180100]<0>(v60, "in");
                uint64_t v33 = (void *)(a1 + 32);
                if (*(char *)(a1 + 55) < 0) {
                  uint64_t v33 = (void *)*v33;
                }
                DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v32, v33, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
              }
              std::string::basic_string[abi:ne180100]<0>(v59, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
              std::string::basic_string[abi:ne180100]<0>(v58, "initialize");
              uint64_t v29 = *(void *)(a1 + 64);
              if (*(void *)(a1 + 72) == v29)
              {
                std::string::basic_string[abi:ne180100]<0>(v61, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
                std::string::basic_string[abi:ne180100]<0>(v60, "in");
                uint64_t v31 = (void *)(a1 + 32);
                if (*(char *)(a1 + 55) < 0) {
                  uint64_t v31 = (void *)*v31;
                }
                DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v30, v31, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
              }
              uint64_t v47 = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 40))(v29);
              uint64_t v48 = *(void *)(a1 + 88);
              if (*(void *)(a1 + 96) == v48)
              {
                std::string::basic_string[abi:ne180100]<0>(v61, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
                std::string::basic_string[abi:ne180100]<0>(v60, "out");
                uint64_t v50 = (void *)(a1 + 32);
                if (*(char *)(a1 + 55) < 0) {
                  uint64_t v50 = (void *)*v50;
                }
                DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v49, v50, (uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 5, 0);
              }
              uint64_t v55 = *(unsigned int *)(*(void *)(v47 + 120) + 28);
              uint64_t v56 = (*(uint64_t (**)(uint64_t))(*(void *)v48 + 40))(v48);
              DSPGraph::strprintf((DSPGraph *)"The inputs and output must have the same channel count, but have %u and %u.", v57, v55, *(unsigned int *)(*(void *)(v56 + 120) + 28));
            }
            std::string::basic_string[abi:ne180100]<0>(v61, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
            std::string::basic_string[abi:ne180100]<0>(v60, "out");
            long long v28 = (void *)(a1 + 32);
            if (*(char *)(a1 + 55) < 0) {
              long long v28 = (void *)*v28;
            }
            DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v27, v28, (uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 5, 0);
          }
          std::string::basic_string[abi:ne180100]<0>(v61, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
          std::string::basic_string[abi:ne180100]<0>(v60, "in");
          uint64_t v26 = (void *)(a1 + 32);
          if (*(char *)(a1 + 55) < 0) {
            uint64_t v26 = (void *)*v26;
          }
          DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v25, v26, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
        }
        std::string::basic_string[abi:ne180100]<0>(v59, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(v58, "initialize");
        uint64_t v22 = *(void *)(a1 + 64);
        if (*(void *)(a1 + 72) == v22)
        {
          std::string::basic_string[abi:ne180100]<0>(v61, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
          std::string::basic_string[abi:ne180100]<0>(v60, "in");
          uint64_t v24 = (void *)(a1 + 32);
          if (*(char *)(a1 + 55) < 0) {
            uint64_t v24 = (void *)*v24;
          }
          DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v23, v24, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
        }
        uint64_t v42 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 40))(v22);
        uint64_t v43 = *(void *)(a1 + 64);
        if ((unint64_t)(*(void *)(a1 + 72) - v43) > 0x20)
        {
          uint64_t v44 = *(unsigned int *)(*(void *)(v42 + 120) + 28);
          uint64_t v45 = (*(uint64_t (**)(void))(*(void *)(v43 + 32) + 40))();
          DSPGraph::strprintf((DSPGraph *)"The inputs must have the same channel count, but have %u and %u.", v46, v44, *(unsigned int *)(*(void *)(v45 + 120) + 28));
        }
        std::string::basic_string[abi:ne180100]<0>(v61, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(v60, "in");
        int v54 = (void *)(a1 + 32);
        if (*(char *)(a1 + 55) < 0) {
          int v54 = (void *)*v54;
        }
        DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v53, v54, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 1);
      }
      std::string::basic_string[abi:ne180100]<0>(v61, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v60, "in");
      uint64_t v21 = (void *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        uint64_t v21 = (void *)*v21;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v20, v21, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 1);
    }
    std::string::basic_string[abi:ne180100]<0>(v61, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v60, "in");
    std::string v19 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      std::string v19 = (void *)*v19;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v18, v19, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
  }
  std::string::basic_string[abi:ne180100]<0>(v61, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
  std::string::basic_string[abi:ne180100]<0>(v60, "initialize");
  DSPGraph::strprintf((DSPGraph *)"There must be two inputs and one output, instead of %u and %u.", v17, (*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, (*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 5);
}

void sub_1900DEC30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v29 - 57) < 0) {
    operator delete(*(void **)(v29 - 80));
  }
  if (*(char *)(v29 - 33) < 0) {
    operator delete(*(void **)(v29 - 56));
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMinBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::OutExpectedSampleSize()
{
  return 4;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMinBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::In1ExpectedSampleSize()
{
  return 4;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMinBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::In0ExpectedSampleSize()
{
  return 4;
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMinBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::process(int a1, vDSP_Length __N, const float *__A, const float *__B, float *a5)
{
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMinBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::~ArithmeticCore()
{
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticBox<DSPGraph::ArithmeticMinBox>::process(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 64;
  uint64_t v3 = *(void *)(a1 + 64);
  if (*(void *)(v4 + 8) == v3)
  {
    std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v81, "in");
    uint64_t v40 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      uint64_t v40 = (void *)*v40;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v39, v40, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 40))(v3);
  uint64_t v7 = *(void *)(a1 + 64);
  if ((unint64_t)(*(void *)(a1 + 72) - v7) <= 0x20)
  {
    std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v81, "in");
    uint64_t v42 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      uint64_t v42 = (void *)*v42;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v41, v42, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 1);
  }
  uint64_t v8 = *(unsigned int **)(*(void *)(v6 + 56) + 80);
  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)(v7 + 32) + 40))();
  uint64_t v10 = *(void *)(a1 + 88);
  if (*(void *)(a1 + 96) == v10)
  {
    std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v81, "out");
    uint64_t v44 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      uint64_t v44 = (void *)*v44;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v43, v44, (uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 5, 0);
  }
  uint64_t v11 = *(_DWORD **)(*(void *)(v9 + 56) + 80);
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10);
  if (*v8 != *v11)
  {
    std::string::basic_string[abi:ne180100]<0>(v80, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v79, "process");
    uint64_t v45 = *(void *)(a1 + 64);
    if (*(void *)(a1 + 72) == v45)
    {
      std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v81, "in");
      uint64_t v47 = (void *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        uint64_t v47 = (void *)*v47;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v46, v47, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
    }
    uint64_t v65 = (*(uint64_t (**)(uint64_t))(*(void *)v45 + 40))(v45);
    uint64_t v66 = *(void *)(a1 + 64);
    if ((unint64_t)(*(void *)(a1 + 72) - v66) > 0x20)
    {
      uint64_t v67 = *(unsigned int *)(*(void *)(v65 + 120) + 28);
      uint64_t v68 = (*(uint64_t (**)(void))(*(void *)(v66 + 32) + 40))();
      DSPGraph::strprintf((DSPGraph *)"The inputs must have the same channel count, but have %u and %u.", v69, v67, *(unsigned int *)(*(void *)(v68 + 120) + 28));
    }
    std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v81, "in");
    unint64_t v75 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      unint64_t v75 = (void *)*v75;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v74, v75, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 1);
  }
  uint64_t v13 = *(_DWORD **)(*(void *)(v12 + 56) + 80);
  if (*v8 != *v13)
  {
    std::string::basic_string[abi:ne180100]<0>(v80, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v79, "process");
    uint64_t v48 = *(void *)(a1 + 64);
    if (*(void *)(a1 + 72) == v48)
    {
      std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v81, "in");
      uint64_t v50 = (void *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        uint64_t v50 = (void *)*v50;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v49, v50, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
    }
    uint64_t v70 = (*(uint64_t (**)(uint64_t))(*(void *)v48 + 40))(v48);
    uint64_t v71 = *(void *)(a1 + 88);
    if (*(void *)(a1 + 96) == v71)
    {
      std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v81, "out");
      unint64_t v73 = (void *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        unint64_t v73 = (void *)*v73;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v72, v73, (uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 5, 0);
    }
    uint64_t v76 = *(unsigned int *)(*(void *)(v70 + 120) + 28);
    uint64_t v77 = (*(uint64_t (**)(uint64_t))(*(void *)v71 + 40))(v71);
    DSPGraph::strprintf((DSPGraph *)"The inputs and output must have the same channel count, but have %u and %u.", v78, v76, *(unsigned int *)(*(void *)(v77 + 120) + 28));
  }
  unsigned int v14 = v8[3];
  if (v14 < (*(unsigned int (**)(void))(**(void **)(a1 + 776) + 24))(*(void *)(a1 + 776))
           * a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v81, "process");
    int v51 = (*(uint64_t (**)(void))(**(void **)(a1 + 776) + 24))(*(void *)(a1 + 776));
    DSPGraph::strprintf((DSPGraph *)"The buffer passed for input 0 should be at least %u bytes, but is %u.", v52, (v51 * a2), v8[3]);
  }
  unsigned int v15 = v11[3];
  if (v15 < (*(unsigned int (**)(void))(**(void **)(a1 + 776) + 32))(*(void *)(a1 + 776))
           * a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v81, "process");
    int v53 = (*(uint64_t (**)(void))(**(void **)(a1 + 776) + 32))(*(void *)(a1 + 776));
    DSPGraph::strprintf((DSPGraph *)"The buffer passed for input 1 should be at least %u bytes, but is %u.", v54, (v53 * a2), v11[3]);
  }
  uint64_t v16 = *v8;
  if (v16)
  {
    unint64_t v17 = v13 + 4;
    unint64_t v18 = (uint64_t *)(v11 + 4);
    std::string v19 = (uint64_t *)(v8 + 4);
    do
    {
      uint64_t v21 = *v19;
      v19 += 2;
      uint64_t v20 = v21;
      uint64_t v22 = *v18;
      v18 += 2;
      (*(void (**)(void, uint64_t, uint64_t, uint64_t, void))(**(void **)(a1 + 776) + 16))(*(void *)(a1 + 776), a2, v20, v22, *v17);
      *((_DWORD *)v17 - 1) = (*(uint64_t (**)(void))(**(void **)(a1 + 776) + 40))(*(void *)(a1 + 776))
                           * a2;
      v17 += 2;
      --v16;
    }
    while (v16);
  }
  uint64_t v23 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) == v23)
  {
    std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v81, "in");
    uint64_t v56 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      uint64_t v56 = (void *)*v56;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v55, v56, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
  }
  uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 40))(v23);
  uint64_t v25 = *(void *)(a1 + 88);
  if (*(void *)(a1 + 96) == v25)
  {
    std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v81, "out");
    uint64_t v58 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      uint64_t v58 = (void *)*v58;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v57, v58, (uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 5, 0);
  }
  uint64_t v26 = *(void *)(v24 + 56);
  uint64_t v27 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v25 + 40))(v25) + 56);
  long long v28 = *(_OWORD *)(v26 + 8);
  long long v29 = *(_OWORD *)(v26 + 24);
  long long v30 = *(_OWORD *)(v26 + 40);
  *(_OWORD *)(v27 + 5std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = *(_OWORD *)(v26 + 56);
  *(_OWORD *)(v27 + 40) = v30;
  *(_OWORD *)(v27 + 24) = v29;
  *(_OWORD *)(v27 + 8) = v28;
  uint64_t v31 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) == v31)
  {
    std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v81, "in");
    unsigned int v60 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      unsigned int v60 = (void *)*v60;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v59, v60, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
  }
  uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 40))(v31);
  uint64_t v33 = *(void *)(a1 + 64);
  if ((unint64_t)(*(void *)(a1 + 72) - v33) <= 0x20)
  {
    std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v81, "in");
    char v62 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      char v62 = (void *)*v62;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v61, v62, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 1);
  }
  int v34 = *(_DWORD *)(*(void *)(v32 + 56) + 72);
  uint64_t v35 = (*(uint64_t (**)(void))(*(void *)(v33 + 32) + 40))();
  uint64_t v36 = *(void *)(a1 + 88);
  if (*(void *)(a1 + 96) == v36)
  {
    std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v81, "out");
    unsigned int v64 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      unsigned int v64 = (void *)*v64;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v63, v64, (uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 5, 0);
  }
  unsigned int v37 = (*(_DWORD *)(*(void *)(v35 + 56) + 72) | 0xFFFFFFEF) & v34;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v36 + 40))(v36);
  *(_DWORD *)(*(void *)(result + 56) + 72) = v37;
  return result;
}

void sub_1900DF940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (*(char *)(v35 - 49) < 0) {
    operator delete(*(void **)(v35 - 72));
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

double DSPGraph::ArithmeticMinBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result = 2.06752086e161;
  *(_OWORD *)a1 = xmmword_1901C62D0;
  *(_DWORD *)(a1 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
  return result;
}

const char *DSPGraph::ArithmeticMinBox::ClassName(DSPGraph::ArithmeticMinBox *this)
{
  return "amin";
}

void DSPGraph::ArithmeticMinBox::~ArithmeticMinBox(DSPGraph::ArithmeticMinBox *this)
{
  *(void *)this = &unk_1EDF99BE8;
  uint64_t v2 = *((void *)this + 97);
  *((void *)this + 97) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x192FC8940);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1EDF99BE8;
  uint64_t v2 = *((void *)this + 97);
  *((void *)this + 97) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  DSPGraph::Box::~Box(this);
}

void *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_4,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_4>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDFA1698;
  return result;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_4,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_4>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_3,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_3>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (*a2 == 2)
  {
    if (*a3 == 1) {
      operator new();
    }
    std::string::basic_string[abi:ne180100]<0>(&v5, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v4, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v3, "wrong number of outputs for arithmetic divide box. must be 1.");
    DSPGraph::ThrowException(1701602593, &v5, 1437, &v4, &v3);
  }
  std::string::basic_string[abi:ne180100]<0>(&v5, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
  std::string::basic_string[abi:ne180100]<0>(&v4, "operator()");
  std::string::basic_string[abi:ne180100]<0>(&v3, "wrong number of inputs for arithmetic divide box. must be 2.");
  DSPGraph::ThrowException(1701602593, &v5, 1435, &v4, &v3);
}

void sub_1900DFD64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

void DSPGraph::arithmetic_boxes::ArithmeticBox<DSPGraph::ArithmeticDivBox>::initialize(uint64_t a1)
{
  DSPGraph::Box::initialize((DSPGraph::Box *)a1);
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v3 = *(void *)(a1 + 72);
  if (((v3 - v2) & 0x1FFFFFFFE0) == 0x40 && ((*(void *)(a1 + 96) - *(void *)(a1 + 88)) & 0x1FFFFFFFE0) == 0x20)
  {
    if (v3 != v2)
    {
      uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
      uint64_t v5 = *(void *)(a1 + 64);
      if ((unint64_t)(*(void *)(a1 + 72) - v5) > 0x20)
      {
        int v6 = *(_DWORD *)(*(void *)(v4 + 120) + 28);
        if (v6 == *(_DWORD *)(*(void *)((*(uint64_t (**)(void))(*(void *)(v5 + 32) + 40))() + 120) + 28))
        {
          uint64_t v7 = *(void *)(a1 + 64);
          if (*(void *)(a1 + 72) != v7)
          {
            uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 40))(v7);
            uint64_t v9 = *(void *)(a1 + 88);
            if (*(void *)(a1 + 96) != v9)
            {
              int v10 = *(_DWORD *)(*(void *)(v8 + 120) + 28);
              if (v10 == *(_DWORD *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v9 + 40))(v9) + 120)
                                    + 28))
              {
                uint64_t v11 = *(void *)(a1 + 64);
                if (*(void *)(a1 + 72) != v11)
                {
                  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 40))(v11);
                  uint64_t v13 = *(void *)(a1 + 64);
                  if ((unint64_t)(*(void *)(a1 + 72) - v13) > 0x20)
                  {
                    int v14 = *(_DWORD *)(*(void *)(v12 + 120) + 8);
                    int v15 = *(_DWORD *)(*(void *)((*(uint64_t (**)(void))(*(void *)(v13 + 32) + 40))() + 120) + 8);
                    if (v14 != 1819304813 || v15 != 1819304813)
                    {
                      if (v14 == 1819304813 && v15 != 1819304813) {
                        operator new();
                      }
                      operator new();
                    }
                    operator new();
                  }
                  std::string::basic_string[abi:ne180100]<0>(v54, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
                  std::string::basic_string[abi:ne180100]<0>(v53, "in");
                  uint64_t v36 = (void *)(a1 + 32);
                  if (*(char *)(a1 + 55) < 0) {
                    uint64_t v36 = (void *)*v36;
                  }
                  DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v35, v36, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 1);
                }
                std::string::basic_string[abi:ne180100]<0>(v54, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
                std::string::basic_string[abi:ne180100]<0>(v53, "in");
                int v34 = (void *)(a1 + 32);
                if (*(char *)(a1 + 55) < 0) {
                  int v34 = (void *)*v34;
                }
                DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v33, v34, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
              }
              std::string::basic_string[abi:ne180100]<0>(v52, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
              std::string::basic_string[abi:ne180100]<0>(v51, "initialize");
              uint64_t v30 = *(void *)(a1 + 64);
              if (*(void *)(a1 + 72) == v30)
              {
                std::string::basic_string[abi:ne180100]<0>(v54, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
                std::string::basic_string[abi:ne180100]<0>(v53, "in");
                uint64_t v32 = (void *)(a1 + 32);
                if (*(char *)(a1 + 55) < 0) {
                  uint64_t v32 = (void *)*v32;
                }
                DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v31, v32, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
              }
              uint64_t v42 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 40))(v30);
              uint64_t v43 = *(void *)(a1 + 88);
              if (*(void *)(a1 + 96) == v43)
              {
                std::string::basic_string[abi:ne180100]<0>(v54, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
                std::string::basic_string[abi:ne180100]<0>(v53, "out");
                uint64_t v45 = (void *)(a1 + 32);
                if (*(char *)(a1 + 55) < 0) {
                  uint64_t v45 = (void *)*v45;
                }
                DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v44, v45, (uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 5, 0);
              }
              uint64_t v48 = *(unsigned int *)(*(void *)(v42 + 120) + 28);
              uint64_t v49 = (*(uint64_t (**)(uint64_t))(*(void *)v43 + 40))(v43);
              DSPGraph::strprintf((DSPGraph *)"The inputs and output must have the same channel count, but have %u and %u.", v50, v48, *(unsigned int *)(*(void *)(v49 + 120) + 28));
            }
            std::string::basic_string[abi:ne180100]<0>(v54, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
            std::string::basic_string[abi:ne180100]<0>(v53, "out");
            long long v29 = (void *)(a1 + 32);
            if (*(char *)(a1 + 55) < 0) {
              long long v29 = (void *)*v29;
            }
            DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v28, v29, (uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 5, 0);
          }
          std::string::basic_string[abi:ne180100]<0>(v54, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
          std::string::basic_string[abi:ne180100]<0>(v53, "in");
          uint64_t v27 = (void *)(a1 + 32);
          if (*(char *)(a1 + 55) < 0) {
            uint64_t v27 = (void *)*v27;
          }
          DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v26, v27, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
        }
        std::string::basic_string[abi:ne180100]<0>(v52, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(v51, "initialize");
        uint64_t v23 = *(void *)(a1 + 64);
        if (*(void *)(a1 + 72) == v23)
        {
          std::string::basic_string[abi:ne180100]<0>(v54, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
          std::string::basic_string[abi:ne180100]<0>(v53, "in");
          uint64_t v25 = (void *)(a1 + 32);
          if (*(char *)(a1 + 55) < 0) {
            uint64_t v25 = (void *)*v25;
          }
          DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v24, v25, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
        }
        uint64_t v37 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 40))(v23);
        uint64_t v38 = *(void *)(a1 + 64);
        if ((unint64_t)(*(void *)(a1 + 72) - v38) > 0x20)
        {
          uint64_t v39 = *(unsigned int *)(*(void *)(v37 + 120) + 28);
          uint64_t v40 = (*(uint64_t (**)(void))(*(void *)(v38 + 32) + 40))();
          DSPGraph::strprintf((DSPGraph *)"The inputs must have the same channel count, but have %u and %u.", v41, v39, *(unsigned int *)(*(void *)(v40 + 120) + 28));
        }
        std::string::basic_string[abi:ne180100]<0>(v54, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(v53, "in");
        uint64_t v47 = (void *)(a1 + 32);
        if (*(char *)(a1 + 55) < 0) {
          uint64_t v47 = (void *)*v47;
        }
        DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v46, v47, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 1);
      }
      std::string::basic_string[abi:ne180100]<0>(v54, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v53, "in");
      uint64_t v22 = (void *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        uint64_t v22 = (void *)*v22;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v21, v22, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 1);
    }
    std::string::basic_string[abi:ne180100]<0>(v54, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v53, "in");
    uint64_t v20 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      uint64_t v20 = (void *)*v20;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v19, v20, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
  }
  std::string::basic_string[abi:ne180100]<0>(v54, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
  std::string::basic_string[abi:ne180100]<0>(v53, "initialize");
  DSPGraph::strprintf((DSPGraph *)"There must be two inputs and one output, instead of %u and %u.", v18, (*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, (*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 5);
}

void sub_1900E0770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v29 - 57) < 0) {
    operator delete(*(void **)(v29 - 80));
  }
  if (*(char *)(v29 - 33) < 0) {
    operator delete(*(void **)(v29 - 56));
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDivBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::cplx_type>::OutExpectedSampleSize()
{
  return 8;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDivBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::cplx_type>::In1ExpectedSampleSize()
{
  return 8;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDivBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::cplx_type>::In0ExpectedSampleSize()
{
  return 8;
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDivBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::cplx_type>::process(int a1, vDSP_Length __N, float *a3, float *a4, float *a5)
{
  __A.realp = a3;
  __A.imagp = &a3[__N];
  __B.realp = a4;
  __B.imagp = &a4[__N];
  v5.realp = a5;
  v5.imagp = &a5[__N];
  vDSP_zvdiv(&__B, 1, &__A, 1, &v5, 1, __N);
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDivBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::cplx_type>::~ArithmeticCore()
{
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDivBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::real_type>::OutExpectedSampleSize()
{
  return 8;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDivBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::real_type>::In1ExpectedSampleSize()
{
  return 4;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDivBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::real_type>::In0ExpectedSampleSize()
{
  return 8;
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDivBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::real_type>::process(int a1, vDSP_Length __N, float *a3, const float *__B, float *a5)
{
  __A.realp = a3;
  __A.imagp = &a3[__N];
  v5.realp = a5;
  v5.imagp = &a5[__N];
  vDSP_zrvdiv(&__A, 1, __B, 1, &v5, 1, __N);
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDivBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::real_type>::~ArithmeticCore()
{
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDivBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::cplx_type>::OutExpectedSampleSize()
{
  return 8;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDivBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::cplx_type>::In1ExpectedSampleSize()
{
  return 8;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDivBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::cplx_type>::In0ExpectedSampleSize()
{
  return 4;
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDivBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::cplx_type>::process(int a1, vDSP_Length __N, float *a3, float *a4, float *a5)
{
  v6.realp = a4;
  v6.imagp = &a4[__N];
  v5.realp = a5;
  v5.imagp = &a5[__N];
  DSPGraph::ArithmeticDivBox::f(a3, &v6, &v5, __N);
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDivBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::cplx_type>::~ArithmeticCore()
{
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDivBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::OutExpectedSampleSize()
{
  return 4;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDivBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::In1ExpectedSampleSize()
{
  return 4;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDivBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::In0ExpectedSampleSize()
{
  return 4;
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDivBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::process(int a1, vDSP_Length __N, const float *a3, const float *__B, float *a5)
{
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticDivBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::~ArithmeticCore()
{
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticBox<DSPGraph::ArithmeticDivBox>::process(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 64;
  uint64_t v3 = *(void *)(a1 + 64);
  if (*(void *)(v4 + 8) == v3)
  {
    std::string::basic_string[abi:ne180100]<0>(v80, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v79, "in");
    uint64_t v38 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      uint64_t v38 = (void *)*v38;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v37, v38, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 40))(v3);
  uint64_t v7 = *(void *)(a1 + 64);
  if ((unint64_t)(*(void *)(a1 + 72) - v7) <= 0x20)
  {
    std::string::basic_string[abi:ne180100]<0>(v80, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v79, "in");
    uint64_t v40 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      uint64_t v40 = (void *)*v40;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v39, v40, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 1);
  }
  uint64_t v8 = *(unsigned int **)(*(void *)(v6 + 56) + 80);
  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)(v7 + 32) + 40))();
  uint64_t v10 = *(void *)(a1 + 88);
  if (*(void *)(a1 + 96) == v10)
  {
    std::string::basic_string[abi:ne180100]<0>(v80, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v79, "out");
    uint64_t v42 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      uint64_t v42 = (void *)*v42;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v41, v42, (uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 5, 0);
  }
  uint64_t v11 = *(_DWORD **)(*(void *)(v9 + 56) + 80);
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10);
  if (*v8 != *v11)
  {
    std::string::basic_string[abi:ne180100]<0>(v78, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v77, "process");
    uint64_t v43 = *(void *)(a1 + 64);
    if (*(void *)(a1 + 72) == v43)
    {
      std::string::basic_string[abi:ne180100]<0>(v80, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v79, "in");
      uint64_t v45 = (void *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        uint64_t v45 = (void *)*v45;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v44, v45, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
    }
    uint64_t v63 = (*(uint64_t (**)(uint64_t))(*(void *)v43 + 40))(v43);
    uint64_t v64 = *(void *)(a1 + 64);
    if ((unint64_t)(*(void *)(a1 + 72) - v64) > 0x20)
    {
      uint64_t v65 = *(unsigned int *)(*(void *)(v63 + 120) + 28);
      uint64_t v66 = (*(uint64_t (**)(void))(*(void *)(v64 + 32) + 40))();
      DSPGraph::strprintf((DSPGraph *)"The inputs must have the same channel count, but have %u and %u.", v67, v65, *(unsigned int *)(*(void *)(v66 + 120) + 28));
    }
    std::string::basic_string[abi:ne180100]<0>(v80, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v79, "in");
    unint64_t v73 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      unint64_t v73 = (void *)*v73;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v72, v73, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 1);
  }
  uint64_t v13 = *(_DWORD **)(*(void *)(v12 + 56) + 80);
  if (*v8 != *v13)
  {
    std::string::basic_string[abi:ne180100]<0>(v78, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v77, "process");
    uint64_t v46 = *(void *)(a1 + 64);
    if (*(void *)(a1 + 72) == v46)
    {
      std::string::basic_string[abi:ne180100]<0>(v80, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v79, "in");
      uint64_t v48 = (void *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        uint64_t v48 = (void *)*v48;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v47, v48, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
    }
    uint64_t v68 = (*(uint64_t (**)(uint64_t))(*(void *)v46 + 40))(v46);
    uint64_t v69 = *(void *)(a1 + 88);
    if (*(void *)(a1 + 96) == v69)
    {
      std::string::basic_string[abi:ne180100]<0>(v80, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v79, "out");
      uint64_t v71 = (void *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        uint64_t v71 = (void *)*v71;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v70, v71, (uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 5, 0);
    }
    uint64_t v74 = *(unsigned int *)(*(void *)(v68 + 120) + 28);
    uint64_t v75 = (*(uint64_t (**)(uint64_t))(*(void *)v69 + 40))(v69);
    DSPGraph::strprintf((DSPGraph *)"The inputs and output must have the same channel count, but have %u and %u.", v76, v74, *(unsigned int *)(*(void *)(v75 + 120) + 28));
  }
  unsigned int v14 = v8[3];
  if (v14 < (*(unsigned int (**)(void))(**(void **)(a1 + 776) + 24))(*(void *)(a1 + 776))
           * a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v80, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v79, "process");
    int v49 = (*(uint64_t (**)(void))(**(void **)(a1 + 776) + 24))(*(void *)(a1 + 776));
    DSPGraph::strprintf((DSPGraph *)"The buffer passed for input 0 should be at least %u bytes, but is %u.", v50, (v49 * a2), v8[3]);
  }
  unsigned int v15 = v11[3];
  if (v15 < (*(unsigned int (**)(void))(**(void **)(a1 + 776) + 32))(*(void *)(a1 + 776))
           * a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v80, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v79, "process");
    int v51 = (*(uint64_t (**)(void))(**(void **)(a1 + 776) + 32))(*(void *)(a1 + 776));
    DSPGraph::strprintf((DSPGraph *)"The buffer passed for input 1 should be at least %u bytes, but is %u.", v52, (v51 * a2), v11[3]);
  }
  uint64_t v16 = *v8;
  if (v16)
  {
    unint64_t v17 = v13 + 4;
    unint64_t v18 = (uint64_t *)(v11 + 4);
    std::string v19 = (uint64_t *)(v8 + 4);
    do
    {
      uint64_t v21 = *v19;
      v19 += 2;
      uint64_t v20 = v21;
      uint64_t v22 = *v18;
      v18 += 2;
      (*(void (**)(void, uint64_t, uint64_t, uint64_t, void))(**(void **)(a1 + 776) + 16))(*(void *)(a1 + 776), a2, v20, v22, *v17);
      *((_DWORD *)v17 - 1) = (*(uint64_t (**)(void))(**(void **)(a1 + 776) + 40))(*(void *)(a1 + 776))
                           * a2;
      v17 += 2;
      --v16;
    }
    while (v16);
  }
  uint64_t v23 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) == v23)
  {
    std::string::basic_string[abi:ne180100]<0>(v80, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v79, "in");
    int v54 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      int v54 = (void *)*v54;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v53, v54, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
  }
  uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 40))(v23);
  uint64_t v25 = *(void *)(a1 + 88);
  if (*(void *)(a1 + 96) == v25)
  {
    std::string::basic_string[abi:ne180100]<0>(v80, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v79, "out");
    uint64_t v56 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      uint64_t v56 = (void *)*v56;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v55, v56, (uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 5, 0);
  }
  uint64_t v26 = *(void *)(v24 + 56);
  uint64_t v27 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v25 + 40))(v25) + 56);
  long long v28 = *(_OWORD *)(v26 + 8);
  long long v29 = *(_OWORD *)(v26 + 24);
  long long v30 = *(_OWORD *)(v26 + 40);
  *(_OWORD *)(v27 + 5std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = *(_OWORD *)(v26 + 56);
  *(_OWORD *)(v27 + 40) = v30;
  *(_OWORD *)(v27 + 24) = v29;
  *(_OWORD *)(v27 + 8) = v28;
  uint64_t v31 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) == v31)
  {
    std::string::basic_string[abi:ne180100]<0>(v80, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v79, "in");
    uint64_t v58 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      uint64_t v58 = (void *)*v58;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v57, v58, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
  }
  uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 40))(v31);
  uint64_t v33 = *(void *)(a1 + 64);
  if ((unint64_t)(*(void *)(a1 + 72) - v33) <= 0x20)
  {
    std::string::basic_string[abi:ne180100]<0>(v80, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v79, "in");
    unsigned int v60 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      unsigned int v60 = (void *)*v60;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v59, v60, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 1);
  }
  int v34 = *(_DWORD *)(*(void *)(v32 + 56) + 72);
  (*(void (**)(void))(*(void *)(v33 + 32) + 40))();
  uint64_t v35 = *(void *)(a1 + 88);
  if (*(void *)(a1 + 96) == v35)
  {
    std::string::basic_string[abi:ne180100]<0>(v80, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v79, "out");
    char v62 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      char v62 = (void *)*v62;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v61, v62, (uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 5, 0);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v35 + 40))(v35);
  *(_DWORD *)(*(void *)(result + 56) + 72) = v34;
  return result;
}

void sub_1900E15B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (*(char *)(v35 - 49) < 0) {
    operator delete(*(void **)(v35 - 72));
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

double DSPGraph::ArithmeticDivBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result = 1.43486969e161;
  *(_OWORD *)a1 = xmmword_1901C62C0;
  *(_DWORD *)(a1 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
  return result;
}

const char *DSPGraph::ArithmeticDivBox::ClassName(DSPGraph::ArithmeticDivBox *this)
{
  return "advi";
}

void DSPGraph::ArithmeticDivBox::~ArithmeticDivBox(DSPGraph::ArithmeticDivBox *this)
{
  *(void *)this = &unk_1EDF996C8;
  uint64_t v2 = *((void *)this + 97);
  *((void *)this + 97) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x192FC8940);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1EDF996C8;
  uint64_t v2 = *((void *)this + 97);
  *((void *)this + 97) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  DSPGraph::Box::~Box(this);
}

void *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_3,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_3>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDFA1650;
  return result;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_3,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_3>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_2,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_2>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (*a2 == 2)
  {
    if (*a3 == 1) {
      operator new();
    }
    std::string::basic_string[abi:ne180100]<0>(&v5, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v4, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v3, "wrong number of outputs for arithmetic multiply box. must be 1.");
    DSPGraph::ThrowException(1701602593, &v5, 1428, &v4, &v3);
  }
  std::string::basic_string[abi:ne180100]<0>(&v5, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
  std::string::basic_string[abi:ne180100]<0>(&v4, "operator()");
  std::string::basic_string[abi:ne180100]<0>(&v3, "wrong number of inputs for arithmetic multiply box. must be 2.");
  DSPGraph::ThrowException(1701602593, &v5, 1426, &v4, &v3);
}

void sub_1900E19DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

void DSPGraph::arithmetic_boxes::ArithmeticBox<DSPGraph::ArithmeticMultBox>::initialize(uint64_t a1)
{
  DSPGraph::Box::initialize((DSPGraph::Box *)a1);
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v3 = *(void *)(a1 + 72);
  if (((v3 - v2) & 0x1FFFFFFFE0) == 0x40 && ((*(void *)(a1 + 96) - *(void *)(a1 + 88)) & 0x1FFFFFFFE0) == 0x20)
  {
    if (v3 != v2)
    {
      uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
      uint64_t v5 = *(void *)(a1 + 64);
      if ((unint64_t)(*(void *)(a1 + 72) - v5) > 0x20)
      {
        int v6 = *(_DWORD *)(*(void *)(v4 + 120) + 28);
        if (v6 == *(_DWORD *)(*(void *)((*(uint64_t (**)(void))(*(void *)(v5 + 32) + 40))() + 120) + 28))
        {
          uint64_t v7 = *(void *)(a1 + 64);
          if (*(void *)(a1 + 72) != v7)
          {
            uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 40))(v7);
            uint64_t v9 = *(void *)(a1 + 88);
            if (*(void *)(a1 + 96) != v9)
            {
              int v10 = *(_DWORD *)(*(void *)(v8 + 120) + 28);
              if (v10 == *(_DWORD *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v9 + 40))(v9) + 120)
                                    + 28))
              {
                uint64_t v11 = *(void *)(a1 + 64);
                if (*(void *)(a1 + 72) != v11)
                {
                  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 40))(v11);
                  uint64_t v13 = *(void *)(a1 + 64);
                  if ((unint64_t)(*(void *)(a1 + 72) - v13) > 0x20)
                  {
                    int v14 = *(_DWORD *)(*(void *)(v12 + 120) + 8);
                    int v15 = *(_DWORD *)(*(void *)((*(uint64_t (**)(void))(*(void *)(v13 + 32) + 40))() + 120) + 8);
                    if (v14 != 1819304813 || v15 != 1819304813)
                    {
                      if (v14 == 1819304813 && v15 != 1819304813) {
                        operator new();
                      }
                      operator new();
                    }
                    operator new();
                  }
                  std::string::basic_string[abi:ne180100]<0>(v54, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
                  std::string::basic_string[abi:ne180100]<0>(v53, "in");
                  uint64_t v36 = (void *)(a1 + 32);
                  if (*(char *)(a1 + 55) < 0) {
                    uint64_t v36 = (void *)*v36;
                  }
                  DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v35, v36, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 1);
                }
                std::string::basic_string[abi:ne180100]<0>(v54, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
                std::string::basic_string[abi:ne180100]<0>(v53, "in");
                int v34 = (void *)(a1 + 32);
                if (*(char *)(a1 + 55) < 0) {
                  int v34 = (void *)*v34;
                }
                DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v33, v34, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
              }
              std::string::basic_string[abi:ne180100]<0>(v52, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
              std::string::basic_string[abi:ne180100]<0>(v51, "initialize");
              uint64_t v30 = *(void *)(a1 + 64);
              if (*(void *)(a1 + 72) == v30)
              {
                std::string::basic_string[abi:ne180100]<0>(v54, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
                std::string::basic_string[abi:ne180100]<0>(v53, "in");
                uint64_t v32 = (void *)(a1 + 32);
                if (*(char *)(a1 + 55) < 0) {
                  uint64_t v32 = (void *)*v32;
                }
                DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v31, v32, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
              }
              uint64_t v42 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 40))(v30);
              uint64_t v43 = *(void *)(a1 + 88);
              if (*(void *)(a1 + 96) == v43)
              {
                std::string::basic_string[abi:ne180100]<0>(v54, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
                std::string::basic_string[abi:ne180100]<0>(v53, "out");
                uint64_t v45 = (void *)(a1 + 32);
                if (*(char *)(a1 + 55) < 0) {
                  uint64_t v45 = (void *)*v45;
                }
                DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v44, v45, (uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 5, 0);
              }
              uint64_t v48 = *(unsigned int *)(*(void *)(v42 + 120) + 28);
              uint64_t v49 = (*(uint64_t (**)(uint64_t))(*(void *)v43 + 40))(v43);
              DSPGraph::strprintf((DSPGraph *)"The inputs and output must have the same channel count, but have %u and %u.", v50, v48, *(unsigned int *)(*(void *)(v49 + 120) + 28));
            }
            std::string::basic_string[abi:ne180100]<0>(v54, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
            std::string::basic_string[abi:ne180100]<0>(v53, "out");
            long long v29 = (void *)(a1 + 32);
            if (*(char *)(a1 + 55) < 0) {
              long long v29 = (void *)*v29;
            }
            DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v28, v29, (uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 5, 0);
          }
          std::string::basic_string[abi:ne180100]<0>(v54, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
          std::string::basic_string[abi:ne180100]<0>(v53, "in");
          uint64_t v27 = (void *)(a1 + 32);
          if (*(char *)(a1 + 55) < 0) {
            uint64_t v27 = (void *)*v27;
          }
          DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v26, v27, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
        }
        std::string::basic_string[abi:ne180100]<0>(v52, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(v51, "initialize");
        uint64_t v23 = *(void *)(a1 + 64);
        if (*(void *)(a1 + 72) == v23)
        {
          std::string::basic_string[abi:ne180100]<0>(v54, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
          std::string::basic_string[abi:ne180100]<0>(v53, "in");
          uint64_t v25 = (void *)(a1 + 32);
          if (*(char *)(a1 + 55) < 0) {
            uint64_t v25 = (void *)*v25;
          }
          DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v24, v25, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
        }
        uint64_t v37 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 40))(v23);
        uint64_t v38 = *(void *)(a1 + 64);
        if ((unint64_t)(*(void *)(a1 + 72) - v38) > 0x20)
        {
          uint64_t v39 = *(unsigned int *)(*(void *)(v37 + 120) + 28);
          uint64_t v40 = (*(uint64_t (**)(void))(*(void *)(v38 + 32) + 40))();
          DSPGraph::strprintf((DSPGraph *)"The inputs must have the same channel count, but have %u and %u.", v41, v39, *(unsigned int *)(*(void *)(v40 + 120) + 28));
        }
        std::string::basic_string[abi:ne180100]<0>(v54, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(v53, "in");
        uint64_t v47 = (void *)(a1 + 32);
        if (*(char *)(a1 + 55) < 0) {
          uint64_t v47 = (void *)*v47;
        }
        DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v46, v47, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 1);
      }
      std::string::basic_string[abi:ne180100]<0>(v54, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v53, "in");
      uint64_t v22 = (void *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        uint64_t v22 = (void *)*v22;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v21, v22, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 1);
    }
    std::string::basic_string[abi:ne180100]<0>(v54, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v53, "in");
    uint64_t v20 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      uint64_t v20 = (void *)*v20;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v19, v20, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
  }
  std::string::basic_string[abi:ne180100]<0>(v54, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
  std::string::basic_string[abi:ne180100]<0>(v53, "initialize");
  DSPGraph::strprintf((DSPGraph *)"There must be two inputs and one output, instead of %u and %u.", v18, (*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, (*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 5);
}

void sub_1900E23E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v29 - 57) < 0) {
    operator delete(*(void **)(v29 - 80));
  }
  if (*(char *)(v29 - 33) < 0) {
    operator delete(*(void **)(v29 - 56));
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMultBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::cplx_type>::OutExpectedSampleSize()
{
  return 8;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMultBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::cplx_type>::In1ExpectedSampleSize()
{
  return 8;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMultBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::cplx_type>::In0ExpectedSampleSize()
{
  return 8;
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMultBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::cplx_type>::process(int a1, vDSP_Length __N, float *a3, float *a4, float *a5)
{
  __A.realp = a3;
  __A.imagp = &a3[__N];
  __B.realp = a4;
  __B.imagp = &a4[__N];
  v5.realp = a5;
  v5.imagp = &a5[__N];
  vDSP_zvmul(&__A, 1, &__B, 1, &v5, 1, __N, 1);
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMultBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::cplx_type>::~ArithmeticCore()
{
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMultBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::real_type>::OutExpectedSampleSize()
{
  return 8;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMultBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::real_type>::In1ExpectedSampleSize()
{
  return 4;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMultBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::real_type>::In0ExpectedSampleSize()
{
  return 8;
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMultBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::real_type>::process(int a1, vDSP_Length __N, float *a3, const float *__B, float *a5)
{
  __A.realp = a3;
  __A.imagp = &a3[__N];
  v5.realp = a5;
  v5.imagp = &a5[__N];
  vDSP_zrvmul(&__A, 1, __B, 1, &v5, 1, __N);
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMultBox,DSPGraph::arithmetic_boxes::cplx_type,DSPGraph::arithmetic_boxes::real_type>::~ArithmeticCore()
{
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMultBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::cplx_type>::OutExpectedSampleSize()
{
  return 8;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMultBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::cplx_type>::In1ExpectedSampleSize()
{
  return 8;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMultBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::cplx_type>::In0ExpectedSampleSize()
{
  return 4;
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMultBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::cplx_type>::process(int a1, vDSP_Length __N, const float *a3, float *a4, float *a5)
{
  __A.realp = a4;
  __A.imagp = &a4[__N];
  v5.realp = a5;
  v5.imagp = &a5[__N];
  vDSP_zrvmul(&__A, 1, a3, 1, &v5, 1, __N);
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMultBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::cplx_type>::~ArithmeticCore()
{
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMultBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::OutExpectedSampleSize()
{
  return 4;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMultBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::In1ExpectedSampleSize()
{
  return 4;
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMultBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::In0ExpectedSampleSize()
{
  return 4;
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMultBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::process(int a1, vDSP_Length __N, const float *__A, const float *__B, float *a5)
{
}

void DSPGraph::arithmetic_boxes::ArithmeticCore<DSPGraph::ArithmeticMultBox,DSPGraph::arithmetic_boxes::real_type,DSPGraph::arithmetic_boxes::real_type>::~ArithmeticCore()
{
}

uint64_t DSPGraph::arithmetic_boxes::ArithmeticBox<DSPGraph::ArithmeticMultBox>::process(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 64;
  uint64_t v3 = *(void *)(a1 + 64);
  if (*(void *)(v4 + 8) == v3)
  {
    std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v81, "in");
    uint64_t v40 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      uint64_t v40 = (void *)*v40;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v39, v40, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 40))(v3);
  uint64_t v7 = *(void *)(a1 + 64);
  if ((unint64_t)(*(void *)(a1 + 72) - v7) <= 0x20)
  {
    std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v81, "in");
    uint64_t v42 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      uint64_t v42 = (void *)*v42;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v41, v42, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 1);
  }
  uint64_t v8 = *(unsigned int **)(*(void *)(v6 + 56) + 80);
  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)(v7 + 32) + 40))();
  uint64_t v10 = *(void *)(a1 + 88);
  if (*(void *)(a1 + 96) == v10)
  {
    std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v81, "out");
    uint64_t v44 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      uint64_t v44 = (void *)*v44;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v43, v44, (uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 5, 0);
  }
  uint64_t v11 = *(_DWORD **)(*(void *)(v9 + 56) + 80);
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10);
  if (*v8 != *v11)
  {
    std::string::basic_string[abi:ne180100]<0>(v80, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v79, "process");
    uint64_t v45 = *(void *)(a1 + 64);
    if (*(void *)(a1 + 72) == v45)
    {
      std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v81, "in");
      uint64_t v47 = (void *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        uint64_t v47 = (void *)*v47;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v46, v47, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
    }
    uint64_t v65 = (*(uint64_t (**)(uint64_t))(*(void *)v45 + 40))(v45);
    uint64_t v66 = *(void *)(a1 + 64);
    if ((unint64_t)(*(void *)(a1 + 72) - v66) > 0x20)
    {
      uint64_t v67 = *(unsigned int *)(*(void *)(v65 + 120) + 28);
      uint64_t v68 = (*(uint64_t (**)(void))(*(void *)(v66 + 32) + 40))();
      DSPGraph::strprintf((DSPGraph *)"The inputs must have the same channel count, but have %u and %u.", v69, v67, *(unsigned int *)(*(void *)(v68 + 120) + 28));
    }
    std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v81, "in");
    uint64_t v75 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      uint64_t v75 = (void *)*v75;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v74, v75, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 1);
  }
  uint64_t v13 = *(_DWORD **)(*(void *)(v12 + 56) + 80);
  if (*v8 != *v13)
  {
    std::string::basic_string[abi:ne180100]<0>(v80, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v79, "process");
    uint64_t v48 = *(void *)(a1 + 64);
    if (*(void *)(a1 + 72) == v48)
    {
      std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v81, "in");
      uint64_t v50 = (void *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        uint64_t v50 = (void *)*v50;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v49, v50, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
    }
    uint64_t v70 = (*(uint64_t (**)(uint64_t))(*(void *)v48 + 40))(v48);
    uint64_t v71 = *(void *)(a1 + 88);
    if (*(void *)(a1 + 96) == v71)
    {
      std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v81, "out");
      unint64_t v73 = (void *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        unint64_t v73 = (void *)*v73;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v72, v73, (uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 5, 0);
    }
    uint64_t v76 = *(unsigned int *)(*(void *)(v70 + 120) + 28);
    uint64_t v77 = (*(uint64_t (**)(uint64_t))(*(void *)v71 + 40))(v71);
    DSPGraph::strprintf((DSPGraph *)"The inputs and output must have the same channel count, but have %u and %u.", v78, v76, *(unsigned int *)(*(void *)(v77 + 120) + 28));
  }
  unsigned int v14 = v8[3];
  if (v14 < (*(unsigned int (**)(void))(**(void **)(a1 + 776) + 24))(*(void *)(a1 + 776))
           * a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v81, "process");
    int v51 = (*(uint64_t (**)(void))(**(void **)(a1 + 776) + 24))(*(void *)(a1 + 776));
    DSPGraph::strprintf((DSPGraph *)"The buffer passed for input 0 should be at least %u bytes, but is %u.", v52, (v51 * a2), v8[3]);
  }
  unsigned int v15 = v11[3];
  if (v15 < (*(unsigned int (**)(void))(**(void **)(a1 + 776) + 32))(*(void *)(a1 + 776))
           * a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v81, "process");
    int v53 = (*(uint64_t (**)(void))(**(void **)(a1 + 776) + 32))(*(void *)(a1 + 776));
    DSPGraph::strprintf((DSPGraph *)"The buffer passed for input 1 should be at least %u bytes, but is %u.", v54, (v53 * a2), v11[3]);
  }
  uint64_t v16 = *v8;
  if (v16)
  {
    unint64_t v17 = v13 + 4;
    unint64_t v18 = (uint64_t *)(v11 + 4);
    std::string v19 = (uint64_t *)(v8 + 4);
    do
    {
      uint64_t v21 = *v19;
      v19 += 2;
      uint64_t v20 = v21;
      uint64_t v22 = *v18;
      v18 += 2;
      (*(void (**)(void, uint64_t, uint64_t, uint64_t, void))(**(void **)(a1 + 776) + 16))(*(void *)(a1 + 776), a2, v20, v22, *v17);
      *((_DWORD *)v17 - 1) = (*(uint64_t (**)(void))(**(void **)(a1 + 776) + 40))(*(void *)(a1 + 776))
                           * a2;
      v17 += 2;
      --v16;
    }
    while (v16);
  }
  uint64_t v23 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) == v23)
  {
    std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v81, "in");
    uint64_t v56 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      uint64_t v56 = (void *)*v56;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v55, v56, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
  }
  uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 40))(v23);
  uint64_t v25 = *(void *)(a1 + 88);
  if (*(void *)(a1 + 96) == v25)
  {
    std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v81, "out");
    uint64_t v58 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      uint64_t v58 = (void *)*v58;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v57, v58, (uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 5, 0);
  }
  uint64_t v26 = *(void *)(v24 + 56);
  uint64_t v27 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v25 + 40))(v25) + 56);
  long long v28 = *(_OWORD *)(v26 + 8);
  long long v29 = *(_OWORD *)(v26 + 24);
  long long v30 = *(_OWORD *)(v26 + 40);
  *(_OWORD *)(v27 + 5std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = *(_OWORD *)(v26 + 56);
  *(_OWORD *)(v27 + 40) = v30;
  *(_OWORD *)(v27 + 24) = v29;
  *(_OWORD *)(v27 + 8) = v28;
  uint64_t v31 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) == v31)
  {
    std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v81, "in");
    unsigned int v60 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      unsigned int v60 = (void *)*v60;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v59, v60, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
  }
  uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 40))(v31);
  uint64_t v33 = *(void *)(a1 + 64);
  if ((unint64_t)(*(void *)(a1 + 72) - v33) <= 0x20)
  {
    std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v81, "in");
    char v62 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      char v62 = (void *)*v62;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v61, v62, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 1);
  }
  int v34 = *(_DWORD *)(*(void *)(v32 + 56) + 72);
  uint64_t v35 = (*(uint64_t (**)(void))(*(void *)(v33 + 32) + 40))();
  uint64_t v36 = *(void *)(a1 + 88);
  if (*(void *)(a1 + 96) == v36)
  {
    std::string::basic_string[abi:ne180100]<0>(v82, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v81, "out");
    uint64_t v64 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      uint64_t v64 = (void *)*v64;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v63, v64, (uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 5, 0);
  }
  int v37 = *(_DWORD *)(*(void *)(v35 + 56) + 72) & 0x10 | v34;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v36 + 40))(v36);
  *(_DWORD *)(*(void *)(result + 56) + 72) = v37;
  return result;
}

void sub_1900E3250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (*(char *)(v35 - 49) < 0) {
    operator delete(*(void **)(v35 - 72));
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

double DSPGraph::ArithmeticMultBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result = 2.07081382e161;
  *(_OWORD *)a1 = xmmword_1901C62B0;
  *(_DWORD *)(a1 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
  return result;
}

const char *DSPGraph::ArithmeticMultBox::ClassName(DSPGraph::ArithmeticMultBox *this)
{
  return "amul";
}

void DSPGraph::ArithmeticMultBox::~ArithmeticMultBox(DSPGraph::ArithmeticMultBox *this)
{
  *(void *)this = &unk_1EDF9A398;
  uint64_t v2 = *((void *)this + 97);
  *((void *)this + 97) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x192FC8940);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1EDF9A398;
  uint64_t v2 = *((void *)this + 97);
  *((void *)this + 97) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  DSPGraph::Box::~Box(this);
}

void *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_2,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_2>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDFA1608;
  return result;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_2,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_2>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_1,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_1>,DSPGraph::Box * ()(unsigned int,unsigned int)>::operator()(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (*a2 == 1)
  {
    if (*a3 == 1) {
      operator new();
    }
    std::string::basic_string[abi:ne180100]<0>(&v5, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v4, "operator()");
    std::string::basic_string[abi:ne180100]<0>(&v3, "wrong number of outputs for GainBox. must be 1.");
    DSPGraph::ThrowException(1701602593, &v5, 1419, &v4, &v3);
  }
  std::string::basic_string[abi:ne180100]<0>(&v5, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Interpreter.cpp");
  std::string::basic_string[abi:ne180100]<0>(&v4, "operator()");
  std::string::basic_string[abi:ne180100]<0>(&v3, "wrong number of inputs for GainBox. must be 1.");
  DSPGraph::ThrowException(1701602593, &v5, 1417, &v4, &v3);
}

void sub_1900E3694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_1,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_1>,DSPGraph::Box * ()(unsigned int,unsigned int)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDFA15C0;
  return result;
}

void std::__function::__func<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_1,std::allocator<DSPGraph::NewBoxRegistry::NewBoxRegistry(void)::$_1>,DSPGraph::Box * ()(unsigned int,unsigned int)>::~__func()
{
}

uint64_t AUProcessingBlock_DSPGraph::AUSetParameter(AUProcessingBlock_DSPGraph *this, OpaqueRemoteAudioUnit *a2, uint64_t a3, uint64_t a4, uint64_t a5, float a6)
{
  uint64_t v6 = 1633906209;
  uint64_t v7 = *((void *)this + 6);
  if (v7)
  {
    if (*(OpaqueRemoteAudioUnit **)(v7 + 768) == a2)
    {
      (*(void (**)(void, uint64_t, float))(*(void *)v7 + 40))(*((void *)this + 6), a3, a6);
      return 0;
    }
    else
    {
      uint64_t v13 = DSPGraph::Graph::box(*((int8x8_t **)this + 6), (unint64_t)a2);
      if (v13)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, float))(*(void *)v13 + 80))(v13, a3, a4, a5, 0, a6);
        return 0;
      }
      else
      {
        uint64_t v14 = DSPGraph::Graph::analyzer((std::mutex *)v7, (unint64_t)a2);
        if (v14)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, float))(*(void *)v14 + 88))(v14, a3, a4, a5, 0, a6);
          return 0;
        }
      }
    }
  }
  return v6;
}

void sub_1900E38A0(void *a1)
{
}

uint64_t AUProcessingBlock_DSPGraph::AUGetParameter(AUProcessingBlock_DSPGraph *this, OpaqueRemoteAudioUnit *a2, uint64_t a3, uint64_t a4, uint64_t a5, float *a6)
{
  uint64_t v6 = 1633906209;
  uint64_t v7 = (OpaqueRemoteAudioUnit **)*((void *)this + 6);
  if (v7)
  {
    if (v7[96] == a2)
    {
      (*((void (**)(void, uint64_t))*v7 + 6))(*((void *)this + 6), a3);
LABEL_8:
      uint64_t v6 = 0;
      *a6 = v11;
      return v6;
    }
    uint64_t v14 = DSPGraph::Graph::box(*((int8x8_t **)this + 6), (unint64_t)a2);
    if (v14)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v14 + 88))(v14, a3, a4, a5);
      goto LABEL_8;
    }
    uint64_t v15 = DSPGraph::Graph::analyzer((std::mutex *)v7, (unint64_t)a2);
    if (v15)
    {
      float v11 = (*(float (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v15 + 72))(v15, a3, a4, a5);
      goto LABEL_8;
    }
  }
  return v6;
}

void sub_1900E3A08(void *a1)
{
}

uint64_t AUProcessingBlock_DSPGraph::AUSetProperty(AUProcessingBlock_DSPGraph *this, OpaqueRemoteAudioUnit *a2, uint64_t a3, uint64_t a4, uint64_t a5, const void *a6, uint64_t a7)
{
  uint64_t v7 = 1633906209;
  uint64_t v8 = (OpaqueRemoteAudioUnit **)*((void *)this + 6);
  if (v8)
  {
    if (v8[96] == a2)
    {
      (*((void (**)(void, uint64_t, uint64_t, const void *))*v8 + 7))(*((void *)this + 6), a3, a7, a6);
      return 0;
    }
    uint64_t v15 = DSPGraph::Graph::box(*((int8x8_t **)this + 6), (unint64_t)a2);
    if (v15)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const void *))(*(void *)v15 + 312))(v15, a3, a4, a5, a7, a6);
      return 0;
    }
    uint64_t v17 = DSPGraph::Graph::analyzer((std::mutex *)v8, (unint64_t)a2);
    if (v17) {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const void *))(*(void *)v17
    }
                                                                                                  + 112))(v17, a3, a4, a5, a7, a6);
  }
  return v7;
}

void sub_1900E3B94(void *a1)
{
}

uint64_t AUProcessingBlock_DSPGraph::AUGetProperty(AUProcessingBlock_DSPGraph *this, OpaqueRemoteAudioUnit *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, unsigned int *a7)
{
  uint64_t v7 = 4294967246;
  if (a6)
  {
    if (a7)
    {
      uint64_t v7 = 1633906209;
      uint64_t v9 = (OpaqueRemoteAudioUnit **)*((void *)this + 6);
      if (v9)
      {
        unsigned int v18 = *a7;
        if (v9[96] == a2)
        {
          (*((void (**)(OpaqueRemoteAudioUnit **, uint64_t, unsigned int *, void *))*v9 + 9))(v9, a3, &v18, a6);
LABEL_8:
          uint64_t v7 = 0;
          *a7 = v18;
          return v7;
        }
        uint64_t v15 = DSPGraph::Graph::box((int8x8_t *)v9, (unint64_t)a2);
        if (v15)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *, void *))(*(void *)v15 + 304))(v15, a3, a4, a5, &v18, a6);
          goto LABEL_8;
        }
        uint64_t v17 = DSPGraph::Graph::analyzer((std::mutex *)v9, (unint64_t)a2);
        if (v17)
        {
          uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *, void *))(*(void *)v17 + 96))(v17, a3, a4, a5, &v18, a6);
          if (!v7) {
            goto LABEL_8;
          }
        }
      }
    }
  }
  return v7;
}

void sub_1900E3D48(void *a1)
{
}

uint64_t AUProcessingBlock_DSPGraph::AUGetPropertyInfo(AUProcessingBlock_DSPGraph *this, OpaqueRemoteAudioUnit *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int *a6, BOOL *a7)
{
  uint64_t v7 = 4294967246;
  if (a6)
  {
    if (a7)
    {
      uint64_t v7 = 1633906209;
      uint64_t v9 = *((void *)this + 6);
      if (v9)
      {
        unsigned int v13 = *a6;
        int v14 = *a7;
        if (*(OpaqueRemoteAudioUnit **)(v9 + 768) == a2)
        {
          uint64_t v15 = (*(uint64_t (**)(void, uint64_t))(*(void *)v9 + 64))(*((void *)this + 6), a3);
        }
        else
        {
          uint64_t v19 = DSPGraph::Graph::box(*((int8x8_t **)this + 6), (unint64_t)a2);
          if (v19)
          {
            uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v19 + 296))(v19, a3, a4, a5);
          }
          else
          {
            uint64_t v20 = DSPGraph::Graph::analyzer((std::mutex *)v9, (unint64_t)a2);
            if (!v20)
            {
LABEL_13:
              *a6 = v13;
              *a7 = v14 != 0;
              return v7;
            }
            uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v20 + 104))(v20, a3, a4, a5);
          }
        }
        if (v16)
        {
          int v14 = BYTE4(v15);
          unsigned int v13 = v15;
          uint64_t v7 = 0;
        }
        else
        {
          uint64_t v7 = v15;
        }
        goto LABEL_13;
      }
    }
  }
  return v7;
}

OpaqueAudioComponent *AUProcessingBlock_DSPGraph::GetAvailableAUs(uint64_t a1, uint64_t a2)
{
  long long v3 = 0;
  inDesc.componentFlagsMask = 0;
  *(_OWORD *)&inDesc.OSType componentType = *(_OWORD *)"xfua";
  while (1)
  {
    double result = AudioComponentFindNext(v3, &inDesc);
    if (!result) {
      break;
    }
    long long v3 = result;
    Impl_AudioGetComponentInfo(result, &v21, 0);
    OSType componentType = v21.componentType;
    OSType componentSubType = v21.componentSubType;
    OSType componentManufacturer = v21.componentManufacturer;
    uint64_t v9 = *(OSType **)(a2 + 8);
    unint64_t v8 = *(void *)(a2 + 16);
    if ((unint64_t)v9 >= v8)
    {
      float v11 = *(OSType **)a2;
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *(void *)a2) >> 2);
      unint64_t v13 = v12 + 1;
      if (v12 + 1 > 0x1555555555555555) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (void)v11) >> 2);
      if (2 * v14 > v13) {
        unint64_t v13 = 2 * v14;
      }
      if (v14 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v15 = 0x1555555555555555;
      }
      else {
        unint64_t v15 = v13;
      }
      if (v15)
      {
        unint64_t v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<auoop::RenderPipeConfig::CompactFormat>>(v15);
        float v11 = *(OSType **)a2;
        uint64_t v9 = *(OSType **)(a2 + 8);
      }
      else
      {
        uint64_t v16 = 0;
      }
      uint64_t v17 = (OSType *)(v15 + 12 * v12);
      *uint64_t v17 = componentType;
      v17[1] = componentSubType;
      v17[2] = componentManufacturer;
      unsigned int v18 = v17;
      if (v9 != v11)
      {
        do
        {
          uint64_t v19 = *(void *)(v9 - 3);
          v9 -= 3;
          OSType v20 = v9[2];
          *(void *)(v18 - 3) = v19;
          v18 -= 3;
          v18[2] = v20;
        }
        while (v9 != v11);
        float v11 = *(OSType **)a2;
      }
      uint64_t v10 = v17 + 3;
      *(void *)a2 = v18;
      *(void *)(a2 + 8) = v17 + 3;
      *(void *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v15 + 12 * v16;
      if (v11) {
        operator delete(v11);
      }
    }
    else
    {
      *uint64_t v9 = v21.componentType;
      v9[1] = componentSubType;
      uint64_t v10 = v9 + 3;
      v9[2] = componentManufacturer;
    }
    *(void *)(a2 + 8) = v10;
  }
  return result;
}

uint64_t AUProcessingBlock_DSPGraph::SetProperty(AUProcessingBlock_DSPGraph *this, int a2, CFTypeRef cf)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = 1886806380;
  if (a2 == 1635087726) {
    return v3;
  }
  if (a2 == 1886545456)
  {
    std::mutex::lock(&getAUPBDSPGProfilerMutex(void)::gAUPBDSPGProfilerMutex);
    if (cf)
    {
      CFTypeID v6 = CFGetTypeID(cf);
      if (v6 == CFDictionaryGetTypeID())
      {
        CFRetain(cf);
        applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&cfa, cf);
        CFDictionaryRef v7 = (const __CFDictionary *)cfa;
        if (!cfa)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
        }
        CFStringRef v8 = CFStringCreateWithBytes(0, (const UInt8 *)"ProfilerEnabledKey", 18, 0x8000100u, 0);
        if (!v8)
        {
          unsigned int v18 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v18, "Could not construct");
        }
        CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(v7, v8);
        CFRelease(v8);
        if (Value)
        {
          unsigned __int16 v10 = applesauce::CF::convert_as<BOOL,0>(Value);
          if (v10 >= 0x100u)
          {
            uint64_t v11 = *((void *)this + 8);
            if ((_BYTE)v10 || !v11)
            {
              uint64_t v3 = 0;
              if ((_BYTE)v10 && !v11)
              {
                uint64_t v16 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(&cfa);
                applesauce::CF::details::find_at_key_or_optional<double,char const(&)[28]>(*v16);
                std::make_unique[abi:ne180100]<DSPGraph::Profiler,std::shared_ptr<DSPGraph::Graph> &,double const&>();
              }
            }
            else
            {
              std::unique_ptr<DSPGraph::Profiler>::reset[abi:ne180100]((DSPGraph::Profiler **)this + 8, 0);
              if (DSPGraph::getLog(void)::onceToken != -1) {
                dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_9080);
              }
              unint64_t v12 = DSPGraph::getLog(void)::gLog;
              if (os_log_type_enabled((os_log_t)DSPGraph::getLog(void)::gLog, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v13 = *((void *)this + 6);
                unint64_t v14 = (void *)(v13 + 408);
                if (*(char *)(v13 + 431) < 0) {
                  unint64_t v14 = (void *)*v14;
                }
                buf[0] = 136315138;
                *(void *)&buf[1] = v14;
                _os_log_debug_impl(&dword_18FEC0000, v12, OS_LOG_TYPE_DEBUG, "destroyed Profiler for %s", (uint8_t *)buf, 0xCu);
              }
              uint64_t v3 = 0;
            }
          }
        }
        if (cfa) {
          CFRelease(cfa);
        }
      }
    }
    std::mutex::unlock(&getAUPBDSPGProfilerMutex(void)::gAUPBDSPGProfilerMutex);
    return v3;
  }
  return AUProcessingBlockBase::SetProperty(this, a2, cf);
}

void sub_1900E4454(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);
  std::mutex::unlock(&getAUPBDSPGProfilerMutex(void)::gAUPBDSPGProfilerMutex);
  _Unwind_Resume(a1);
}

DSPGraph::Profiler *std::unique_ptr<DSPGraph::Profiler>::reset[abi:ne180100](DSPGraph::Profiler **a1, DSPGraph::Profiler *a2)
{
  double result = *a1;
  *a1 = a2;
  if (result)
  {
    DSPGraph::Profiler::~Profiler(result);
    JUMPOUT(0x192FC8940);
  }
  return result;
}

void *applesauce::CF::DictionaryRef::operator->(void *result)
{
  if (!*result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
  }
  return result;
}

void sub_1900E45A0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t applesauce::CF::details::find_at_key_or_optional<double,char const(&)[28]>(const __CFDictionary *a1)
{
  CFStringRef v3 = CFStringCreateWithBytes(0, (const UInt8 *)"ProfilerSecondsPerWindowKey", 27, 0x8000100u, 0);
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  if (a1) {
    CFBooleanRef Value = CFDictionaryGetValue(a1, v3);
  }
  CFRelease(v3);
  unint64_t result = 0;
  if (a1)
  {
    if (Value) {
      return applesauce::CF::convert_as<double,0>((unint64_t)Value);
    }
  }
  return result;
}

void sub_1900E4678(void *a1)
{
}

void std::make_unique[abi:ne180100]<DSPGraph::Profiler,std::shared_ptr<DSPGraph::Graph> &,double const&>()
{
}

void sub_1900E4720(_Unwind_Exception *a1)
{
  MEMORY[0x192FC8940](v1, 0x10A0C40E238633CLL);
  _Unwind_Resume(a1);
}

os_log_t ___ZN8DSPGraph6getLogEv_block_invoke_9088()
{
  os_log_t result = os_log_create("com.apple.coreaudio", "DSPGraph");
  DSPGraph::getLog(void)::gLog = (uint64_t)result;
  return result;
}

uint64_t applesauce::CF::convert_as<BOOL,0>(const __CFBoolean *a1)
{
  CFTypeID TypeID = CFBooleanGetTypeID();
  if (TypeID == CFGetTypeID(a1))
  {
    LOBYTE(v3) = CFBooleanGetValue(a1) != 0;
    int v4 = 1;
  }
  else
  {
    CFTypeID v5 = CFNumberGetTypeID();
    if (v5 == CFGetTypeID(a1))
    {
      __int16 v3 = applesauce::CF::details::number_convert_as<BOOL>(a1);
      int v4 = HIBYTE(v3);
    }
    else
    {
      LOBYTE(v3) = 0;
      int v4 = 0;
    }
  }
  return v3 | (v4 << 8);
}

uint64_t AUProcessingBlock_DSPGraph::CopyProperty(DSPGraph::Graph **this, int a2, CFDataRef *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (a2 <= 1819569762)
  {
    if (a2 != 1734570101)
    {
      if (a2 == 1735554168) {
        DSPGraph::Graph::decompile(this[6]);
      }
      goto LABEL_14;
    }
    std::mutex::lock(&getAUPBDSPGProfilerMutex(void)::gAUPBDSPGProfilerMutex);
    CFStringRef v8 = this[8];
    if (v8)
    {
      DSPGraph::Profiler::copyStatistics(v8, (CFDictionaryRef *)&__p);
      if (__p)
      {
        uint64_t v9 = 0;
        *a3 = (CFDataRef)__p;
      }
      else
      {
        uint64_t v9 = 1886806380;
      }
    }
    else
    {
      uint64_t v9 = 561145191;
    }
    std::mutex::unlock(&getAUPBDSPGProfilerMutex(void)::gAUPBDSPGProfilerMutex);
    return v9;
  }
  if (a2 == 1819569763)
  {
    std::string __p = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    unsigned __int16 v10 = (char *)this[6];
    uint64_t v11 = v10 + 408;
    if (v10[431] < 0) {
      uint64_t v11 = (void *)*v11;
    }
    CFTypeRef p_p = v11;
    double LatencyInSeconds = DSPGraph::Graph::getLatencyInSeconds((DSPGraph::Graph *)v10);
    std::vector<applesauce::CF::TypeRefPair>::emplace_back<char const*,double>(&__p, (char **)&p_p, (uint64_t *)&LatencyInSeconds);
    for (unsigned int i = (void *)*((void *)this[6] + 3); i; unsigned int i = (void *)*i)
    {
      uint64_t v13 = i[2];
      unint64_t v14 = (void *)(v13 + 32);
      if (*(char *)(v13 + 55) < 0) {
        unint64_t v14 = (void *)*v14;
      }
      CFTypeRef p_p = v14;
      double LatencyInSeconds = (double)(unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)v13 + 72))(v13)
                       / (double)*(unint64_t *)(*(void *)(v13 + 8) + 696);
      std::vector<applesauce::CF::TypeRefPair>::emplace_back<char const*,double>(&__p, (char **)&p_p, (uint64_t *)&LatencyInSeconds);
    }
    *a3 = applesauce::CF::details::make_CFDictionaryRef((void ***)&__p);
    CFTypeRef p_p = &__p;
    std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
    return 0;
  }
  if (a2 == 1886545456)
  {
    std::mutex::lock(&getAUPBDSPGProfilerMutex(void)::gAUPBDSPGProfilerMutex);
    CFTypeID v5 = this[8];
    applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&p_p, "ProfilerEnabledKey");
    CFTypeID v6 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
    if (!v5) {
      CFTypeID v6 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
    }
    CFTypeRef cf = *v6;
    std::string __p = &p_p;
    uint64_t v17 = 1;
    *a3 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)&__p);
    if (cf) {
      CFRelease(cf);
    }
    if (p_p) {
      CFRelease(p_p);
    }
    std::mutex::unlock(&getAUPBDSPGProfilerMutex(void)::gAUPBDSPGProfilerMutex);
    return 0;
  }
LABEL_14:
  return AUProcessingBlockBase::CopyProperty((const UInt8 **)this, a2, a3);
}

void sub_1900E4BB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<applesauce::CF::TypeRefPair>::emplace_back<char const*,double>(void *a1, char **a2, uint64_t *a3)
{
  CFTypeID v6 = a1 + 2;
  unint64_t v7 = a1[2];
  unint64_t v8 = a1[1];
  if (v8 >= v7)
  {
    uint64_t v11 = (uint64_t)(v8 - *a1) >> 4;
    if ((unint64_t)(v11 + 1) >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v7 - *a1;
    uint64_t v13 = v12 >> 3;
    if (v12 >> 3 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    OSType v20 = v6;
    if (v14) {
      unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v14);
    }
    else {
      uint64_t v15 = 0;
    }
    unint64_t v16 = v14;
    uint64_t v17 = (applesauce::CF::TypeRef *)(v14 + 16 * v11);
    uint64_t v18 = v17;
    unint64_t v19 = v14 + 16 * v15;
    applesauce::CF::TypeRefPair::TypeRefPair<char const*,double>(v17, *a2, a3);
    uint64_t v18 = (applesauce::CF::TypeRef *)((char *)v17 + 16);
    std::vector<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>::__swap_out_circular_buffer(a1, &v16);
    unint64_t v10 = a1[1];
    uint64_t result = std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer((uint64_t)&v16);
  }
  else
  {
    uint64_t result = (uint64_t)applesauce::CF::TypeRefPair::TypeRefPair<char const*,double>((applesauce::CF::TypeRef *)a1[1], *a2, a3);
    unint64_t v10 = v8 + 16;
    a1[1] = v8 + 16;
  }
  a1[1] = v10;
  return result;
}

void sub_1900E4D60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const*,double>(applesauce::CF::TypeRef *a1, char *a2, uint64_t *a3)
{
  applesauce::CF::TypeRef::TypeRef(a1, a2);
  uint64_t valuePtr = *a3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  *((void *)a1 + 1) = v5;
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_1900E4E18(_Unwind_Exception *a1)
{
  __int16 v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

void AUProcessingBlock_DSPGraph::~AUProcessingBlock_DSPGraph(DSPGraph::Profiler **this)
{
  AUProcessingBlock_DSPGraph::~AUProcessingBlock_DSPGraph(this);
  JUMPOUT(0x192FC8940);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *this = (DSPGraph::Profiler *)&unk_1EDF93F60;
  std::unique_ptr<DSPGraph::Profiler>::reset[abi:ne180100](this + 8, 0);
  uint64_t v2 = (std::__shared_weak_count *)this[7];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  AUProcessingBlockBase::~AUProcessingBlockBase((AUProcessingBlockBase *)this);
}

uint64_t acv2::CodecConverter::PostBuild(acv2::CodecConverter *this)
{
  acv2::CodecConverter::CheckInitialize(this, 0, 0);
  uint64_t v2 = *((void *)this + 89);
  if (v2)
  {
    unsigned int v3 = *((_DWORD *)this + 90);
    int v4 = *((_DWORD *)this + 92);
    uint64_t v5 = *(void *)(v2 + 72);
    *(_DWORD *)(v2 + 5std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v3;
    unsigned int v6 = (v3 + 4095) / v3;
    if (v6 <= 1) {
      unsigned int v6 = 1;
    }
    int v7 = v6 * v3;
    int v8 = 2 * v6;
    *(_DWORD *)(v2 + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v7;
    *(_DWORD *)(v2 + 100) = v8;
    unint64_t v9 = (v8 * v4);
    unint64_t v10 = *(void *)(v2 + 80) - v5;
    if (v9 <= v10)
    {
      if (v9 < v10) {
        *(void *)(v2 + 80) = v5 + v9;
      }
    }
    else
    {
      std::vector<unsigned char>::__append((std::vector<char> *)(v2 + 72), v9 - v10);
    }
    operator new();
  }
  return 0;
}

void sub_1900E4FFC(_Unwind_Exception *a1)
{
  MEMORY[0x192FC8940](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void sub_1900E5020(void *a1)
{
}

void acv2::CodecConverter::CheckInitialize(acv2::CodecConverter *this, const void *a2, UInt32 a3)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  if (acv2::CodecConverter::IsInitialized(*((acv2::CodecConverter **)this + 21)))
  {
    if (!*((unsigned char *)this + 720)) {
      return;
    }
  }
  else
  {
    OSStatus v6 = AudioCodecInitialize(*((AudioCodec *)this + 21), *((const AudioStreamBasicDescription **)this + 86), *((const AudioStreamBasicDescription **)this + 87), a2, a3);
    if (v6)
    {
      OSStatus v7 = v6;
      int v8 = (long long *)*((void *)this + 87);
      if (!v8) {
        goto LABEL_97;
      }
      if (*((_DWORD *)v8 + 2) != 1885564203) {
        goto LABEL_97;
      }
      *((unsigned char *)this + 704) = 1;
      long long v10 = *v8;
      long long v9 = v8[1];
      *(void *)&inOutputFormat.mBitsPerChannel = *((void *)v8 + 4);
      *(_OWORD *)&inOutputFormat.mSampleRate = v10;
      *(_OWORD *)&inOutputFormat.mBytesPerPacket = v9;
      inOutputFormat.mFormatID = 1819304813;
      OSStatus v7 = AudioCodecInitialize(*((AudioCodec *)this + 21), *((const AudioStreamBasicDescription **)this + 86), &inOutputFormat, a2, a3);
      if (v7)
      {
LABEL_97:
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          LODWORD(inOutputFormat.mSampleRate) = 136315394;
          *(void *)((char *)&inOutputFormat.mSampleRate + 4) = "CodecConverter.cpp";
          LOWORD(inOutputFormat.mFormatFlags) = 1024;
          *(AudioFormatFlags *)((char *)&inOutputFormat.mFormatFlags + 2) = 1627;
          _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioCodecInitialize failed", (uint8_t *)&inOutputFormat, 0x12u);
        }
        exception = __cxa_allocate_exception(4uLL);
        _DWORD *exception = v7;
        __cxa_throw(exception, MEMORY[0x1E4FBA3A8], 0);
      }
    }
    *((unsigned char *)this + 720) = 1;
  }
  LODWORD(inOutputFormat.mSampleRate) = 40;
  OSStatus Property = AudioCodecGetProperty(*((AudioCodec *)this + 21), 0x69666D74u, (UInt32 *)&inOutputFormat, (char *)this + 16);
  if (Property)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(inOutputFormat.mSampleRate) = 136315394;
      *(void *)((char *)&inOutputFormat.mSampleRate + 4) = "CodecConverter.cpp";
      LOWORD(inOutputFormat.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&inOutputFormat.mFormatFlags + 2) = 1635;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  get kAudioCodecPropertyCurrentInputFormat failed", (uint8_t *)&inOutputFormat, 0x12u);
    }
    uint64_t v50 = __cxa_allocate_exception(4uLL);
    *uint64_t v50 = Property;
    __cxa_throw(v50, MEMORY[0x1E4FBA3A8], 0);
  }
  uint64_t v60 = 0;
  long long v58 = 0u;
  long long v59 = 0u;
  LODWORD(inOutputFormat.mSampleRate) = 40;
  OSStatus v12 = AudioCodecGetProperty(*((AudioCodec *)this + 21), 0x6F666D74u, (UInt32 *)&inOutputFormat, &v58);
  if (v12)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(inOutputFormat.mSampleRate) = 136315394;
      *(void *)((char *)&inOutputFormat.mSampleRate + 4) = "CodecConverter.cpp";
      LOWORD(inOutputFormat.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&inOutputFormat.mFormatFlags + 2) = 1639;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  get kAudioCodecPropertyCurrentOutputFormat failed", (uint8_t *)&inOutputFormat, 0x12u);
    }
    int v51 = __cxa_allocate_exception(4uLL);
    *int v51 = v12;
    __cxa_throw(v51, MEMORY[0x1E4FBA3A8], 0);
  }
  if (*((unsigned char *)this + 704)) {
    DWORD2(v58) = 1885564203;
  }
  uint64_t v13 = *((void *)this + 89);
  if (v13)
  {
    uint64_t v14 = v60;
    long long v16 = v58;
    long long v15 = v59;
    *(_OWORD *)(v13 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v58;
    *(_OWORD *)(v13 + 32) = v15;
    *(void *)(v13 + 48) = v14;
    *(_OWORD *)&inOutputFormat.mSampleRate = v16;
    *(_OWORD *)&inOutputFormat.mBytesPerPacket = v59;
    *(void *)&inOutputFormat.mBitsPerChannel = v60;
    inOutputFormat.mFormatID = 1885564203;
    OSStatus v17 = AudioUnitSetProperty(*(AudioUnit *)(v13 + 8), 8u, 1u, 0, &inOutputFormat, 0x28u);
    if (v17)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        LODWORD(inOutputFormat.mSampleRate) = 136315394;
        *(void *)((char *)&inOutputFormat.mSampleRate + 4) = "CodecConverter.cpp";
        LOWORD(inOutputFormat.mFormatFlags) = 1024;
        *(AudioFormatFlags *)((char *)&inOutputFormat.mFormatFlags + 2) = 1651;
        _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  set kAudioUnitProperty_StreamFormat(kAudioUnitScope_Input, 0) on AUSM failed", (uint8_t *)&inOutputFormat, 0x12u);
      }
      uint64_t v18 = __cxa_allocate_exception(4uLL);
      *uint64_t v18 = v17;
      __cxa_throw(v18, MEMORY[0x1E4FBA3A8], 0);
    }
  }
  else
  {
    long long v19 = v59;
    *(_OWORD *)((char *)this + 5std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v58;
    *(_OWORD *)((char *)this + 72) = v19;
    *((void *)this + 11) = v60;
  }
  if (!*((_DWORD *)this + 11))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(inOutputFormat.mSampleRate) = 136315394;
      *(void *)((char *)&inOutputFormat.mSampleRate + 4) = "CodecConverter.cpp";
      LOWORD(inOutputFormat.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&inOutputFormat.mFormatFlags + 2) = 1660;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Codec has zero input channels", (uint8_t *)&inOutputFormat, 0x12u);
    }
    int v52 = __cxa_allocate_exception(4uLL);
    _DWORD *v52 = -50;
  }
  if (!*((_DWORD *)this + 21))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(inOutputFormat.mSampleRate) = 136315394;
      *(void *)((char *)&inOutputFormat.mSampleRate + 4) = "CodecConverter.cpp";
      LOWORD(inOutputFormat.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&inOutputFormat.mFormatFlags + 2) = 1662;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Codec has zero output channels", (uint8_t *)&inOutputFormat, 0x12u);
    }
    int v53 = __cxa_allocate_exception(4uLL);
    *int v53 = -50;
  }
  uint64_t v20 = *((void *)this + 20);
  if (*((unsigned char *)this + 197))
  {
    long long v21 = *((_OWORD *)this + 1);
    long long v22 = *((_OWORD *)this + 2);
    *(void *)(v20 + 32) = *((void *)this + 6);
    *(_OWORD *)uint64_t v20 = v21;
    *(_OWORD *)(v20 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v22;
  }
  else
  {
    long long v23 = *(_OWORD *)((char *)this + 56);
    long long v24 = *(_OWORD *)((char *)this + 72);
    *(void *)(v20 + 72) = *((void *)this + 11);
    *(_OWORD *)(v20 + 5std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v24;
    *(_OWORD *)(v20 + 40) = v23;
  }
  uint64_t v25 = 32;
  if (!*((unsigned char *)this + 197)) {
    uint64_t v25 = 72;
  }
  *((unsigned char *)this + 201) = *(_DWORD *)((char *)this + v25) == 0;
  LODWORD(inOutputFormat.mSampleRate) = 4;
  OSStatus v26 = AudioCodecGetProperty(*((AudioCodec *)this + 21), 0x74627566u, (UInt32 *)&inOutputFormat, (char *)this + 352);
  if (v26)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(inOutputFormat.mSampleRate) = 136315394;
      *(void *)((char *)&inOutputFormat.mSampleRate + 4) = "CodecConverter.cpp";
      LOWORD(inOutputFormat.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&inOutputFormat.mFormatFlags + 2) = 1677;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  get kAudioCodecPropertyInputBufferSize failed", (uint8_t *)&inOutputFormat, 0x12u);
    }
    int v54 = __cxa_allocate_exception(4uLL);
    *int v54 = v26;
    __cxa_throw(v54, MEMORY[0x1E4FBA3A8], 0);
  }
  LODWORD(inOutputFormat.mSampleRate) = 4;
  if (AudioCodecGetProperty(*((AudioCodec *)this + 21), 0x70616B62u, (UInt32 *)&inOutputFormat, (char *)this + 356))
  {
    if (*((unsigned char *)this + 197)) {
      uint64_t v27 = (char *)this + 16;
    }
    else {
      uint64_t v27 = (char *)this + 56;
    }
    *((_DWORD *)this + 89) = *((_DWORD *)v27 + 4);
  }
  LODWORD(inOutputFormat.mSampleRate) = 4;
  OSStatus v28 = AudioCodecGetProperty(*((AudioCodec *)this + 21), 0x70616B66u, (UInt32 *)&inOutputFormat, (char *)this + 360);
  if (v28)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(inOutputFormat.mSampleRate) = 136315394;
      *(void *)((char *)&inOutputFormat.mSampleRate + 4) = "CodecConverter.cpp";
      LOWORD(inOutputFormat.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&inOutputFormat.mFormatFlags + 2) = 1690;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  get kAudioCodecPropertyPacketFrameSize failed", (uint8_t *)&inOutputFormat, 0x12u);
    }
    uint64_t v55 = __cxa_allocate_exception(4uLL);
    *uint64_t v55 = v28;
    __cxa_throw(v55, MEMORY[0x1E4FBA3A8], 0);
  }
  if (!*((_DWORD *)this + 90))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(inOutputFormat.mSampleRate) = 136315394;
      *(void *)((char *)&inOutputFormat.mSampleRate + 4) = "CodecConverter.cpp";
      LOWORD(inOutputFormat.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&inOutputFormat.mFormatFlags + 2) = 1694;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  kAudioCodecPropertyPacketFrameSize is zero", (uint8_t *)&inOutputFormat, 0x12u);
    }
    uint64_t v56 = __cxa_allocate_exception(4uLL);
    *uint64_t v56 = 2003329396;
    __cxa_throw(v56, MEMORY[0x1E4FBA3A8], 0);
  }
  long long v29 = (_DWORD *)((char *)this + 364);
  LODWORD(inOutputFormat.mSampleRate) = 4;
  if (AudioCodecGetProperty(*((AudioCodec *)this + 21), 0x6D6E6F70u, (UInt32 *)&inOutputFormat, (char *)this + 364))
  {
    *long long v29 = 1;
  }
  else if (!*v29)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(inOutputFormat.mSampleRate) = 136315394;
      *(void *)((char *)&inOutputFormat.mSampleRate + 4) = "CodecConverter.cpp";
      LOWORD(inOutputFormat.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&inOutputFormat.mFormatFlags + 2) = 1701;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Codec has zero minimum output packets", (uint8_t *)&inOutputFormat, 0x12u);
    }
    long long v57 = __cxa_allocate_exception(4uLL);
    *long long v57 = -50;
  }
  LODWORD(inOutputFormat.mSampleRate) = 4;
  if (AudioCodecGetProperty(*((AudioCodec *)this + 21), 0x6D646673u, (UInt32 *)&inOutputFormat, (char *)this + 368)) {
    *((_DWORD *)this + 92) = 0;
  }
  if (*((unsigned char *)this + 196))
  {
    int v30 = caulk::numeric::exceptional_mul<unsigned int>(*((_DWORD *)this + 91), *((_DWORD *)this + 89));
    std::__optional_destruct_base<ACCodecOutputBuffer,false>::reset[abi:ne180100]((uint64_t)this + 392);
    ACCodecOutputBuffer::ACCodecOutputBuffer((acv2::CodecConverter *)((char *)this + 392), (const AudioStreamBasicDescription *)((char *)this + 56), *((_DWORD *)this + 91), v30, *((unsigned __int8 *)this + 201), 1);
  }
  else
  {
    unsigned int v31 = caulk::numeric::exceptional_mul<unsigned int>(*((_DWORD *)this + 91), *((_DWORD *)this + 90));
    int v32 = caulk::numeric::exceptional_mul<unsigned int>(v31, *((_DWORD *)this + 20));
    std::__optional_destruct_base<ACCodecOutputBuffer,false>::reset[abi:ne180100]((uint64_t)this + 392);
    ACCodecOutputBuffer::ACCodecOutputBuffer((acv2::CodecConverter *)((char *)this + 392), (const AudioStreamBasicDescription *)((char *)this + 56), v31, v32, 0, 0);
  }
  *((unsigned char *)this + 600) = 1;
  std::optional<ACAudioSpan>::emplace[abi:ne180100]<CA::StreamDescription const&,void>((uint64_t)this + 216, (const AudioStreamBasicDescription *)((char *)this + 56));
  if ((*((unsigned char *)this + 28) & 0x20) != 0) {
    unsigned int v33 = *((_DWORD *)this + 11);
  }
  else {
    unsigned int v33 = 1;
  }
  unint64_t v34 = (16 * v33) | 8;
  uint64_t v36 = (unsigned int *)*((void *)this + 41);
  uint64_t v35 = (unsigned int *)*((void *)this + 42);
  int64_t v37 = (char *)v35 - (char *)v36;
  unint64_t v38 = v34 - ((char *)v35 - (char *)v36);
  if (v34 <= (char *)v35 - (char *)v36)
  {
    if (v34 < (char *)v35 - (char *)v36) {
      *((void *)this + 42) = (char *)v36 + v34;
    }
  }
  else
  {
    uint64_t v39 = *((void *)this + 43);
    if (v39 - (uint64_t)v35 >= v38)
    {
      do
      {
        *(unsigned char *)uint64_t v35 = 0;
        uint64_t v35 = (unsigned int *)((char *)v35 + 1);
        --v38;
      }
      while (v38);
      *((void *)this + 42) = (char *)v36 + v34;
    }
    else
    {
      unint64_t v40 = v39 - (void)v36;
      unint64_t v41 = 2 * (v39 - (void)v36);
      if (v41 <= v34) {
        unint64_t v41 = (16 * v33) | 8;
      }
      if (v40 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v42 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v42 = v41;
      }
      uint64_t v43 = operator new(v42);
      uint64_t v44 = (char *)v43 + v37;
      uint64_t v45 = (char *)v43 + v34;
      do
        *((unsigned char *)v43 + v37++) = 0;
      while (v34 != v37);
      uint64_t v46 = (char *)v43 + v42;
      if (v35 == v36)
      {
        uint64_t v43 = v44;
      }
      else
      {
        uint64_t v47 = (char *)v35 + ~(unint64_t)v36;
        do
        {
          char v48 = *((unsigned char *)v35 - 1);
          uint64_t v35 = (unsigned int *)((char *)v35 - 1);
          (v47--)[(void)v43] = v48;
        }
        while (v35 != v36);
        uint64_t v35 = (unsigned int *)*((void *)this + 41);
      }
      *((void *)this + 41) = v43;
      *((void *)this + 42) = v45;
      *((void *)this + 43) = v46;
      if (v35) {
        operator delete(v35);
      }
    }
    uint64_t v36 = (unsigned int *)*((void *)this + 41);
  }
  *uint64_t v36 = v33;
  *((unsigned char *)this + 720) = 0;
}

BOOL acv2::CodecConverter::IsInitialized(acv2::CodecConverter *this)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  int outPropertyData = 0;
  UInt32 ioPropertyDataSize = 4;
  OSStatus Property = AudioCodecGetProperty(this, 0x696E6974u, &ioPropertyDataSize, &outPropertyData);
  if (Property)
  {
    OSStatus v4 = Property;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      UInt32 ioPropertyDataSize = 136315394;
      OSStatus v7 = "CodecConverter.cpp";
      __int16 v8 = 1024;
      int v9 = 1596;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  get kAudioCodecPropertyIsInitialized failed", (uint8_t *)&ioPropertyDataSize, 0x12u);
    }
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = v4;
    __cxa_throw(exception, MEMORY[0x1E4FBA3A8], 0);
  }
  return outPropertyData != 0;
}

void std::__optional_destruct_base<ACCodecOutputBuffer,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v2 = *(void **)(a1 + 144);
    if (v2)
    {
      *(void *)(a1 + 152) = v2;
      operator delete(v2);
    }
    unsigned int v3 = *(void **)(a1 + 120);
    if (v3)
    {
      *(void *)(a1 + 128) = v3;
      operator delete(v3);
    }
    ExtendedAudioBufferList_Destroy(*(std::pmr **)(a1 + 112));
    ACAudioSpan::~ACAudioSpan((std::pmr **)(a1 + 8));
    *(unsigned char *)(a1 + 208) = 0;
  }
}

void ACCodecOutputBuffer::ACCodecOutputBuffer(ACCodecOutputBuffer *this, const AudioStreamBasicDescription *a2, unsigned int a3, int a4, int a5, int a6)
{
  *(_DWORD *)this = a3;
  *((_DWORD *)this + 1) = a4;
  ACAudioSpan::ACAudioSpan((ACCodecOutputBuffer *)((char *)this + 8), a2);
  CA::AudioBuffers::AudioBuffers((ACCodecOutputBuffer *)((char *)this + 112), a2, a4);
  *((void *)this + 15) = 0;
  *((void *)this + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
  uint64_t v12 = a3;
  *((void *)this + 17) = 0;
  if (a3 && a5)
  {
    std::vector<std::shared_ptr<APComponent>>::__vallocate[abi:ne180100]((void *)this + 15, a3);
    uint64_t v13 = (char *)*((void *)this + 16);
    bzero(v13, 16 * a3);
    *((void *)this + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = &v13[16 * a3];
  }
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  if (a3 && a6)
  {
    size_t v14 = 16 * a3;
    long long v15 = (char *)operator new(v14);
    *((void *)this + 18) = v15;
    *((void *)this + 20) = &v15[16 * v12];
    bzero(v15, 16 * v12);
    *((void *)this + 19) = &v15[v14];
  }
  if ((a2->mFormatFlags & 0x20) != 0) {
    int mChannelsPerFrame = 1;
  }
  else {
    int mChannelsPerFrame = a2->mChannelsPerFrame;
  }
  CA::AudioBuffers::Prepare(*((CA::AudioBuffers **)this + 14), mChannelsPerFrame, 0);
}

void sub_1900E5CE8(_Unwind_Exception *a1)
{
  OSStatus v6 = *v4;
  if (*v4)
  {
    *(void *)(v2 + 128) = v6;
    operator delete(v6);
  }
  CA::AudioBuffers::~AudioBuffers(v3);
  ACAudioSpan::~ACAudioSpan(v1);
  _Unwind_Resume(a1);
}

uint64_t acv2::CodecConverter::GetInstrumentationData(AudioCodec *this)
{
  uint64_t v2 = 0;
  UInt32 ioPropertyDataSize = 8;
  AudioCodecGetProperty(this[21], 0x24696E64u, &ioPropertyDataSize, &v2);
  return v2;
}

uint64_t acv2::CodecConverter::EnableInstrumentation(AudioCodec *this, int a2)
{
  int inPropertyData = a2;
  return AudioCodecSetProperty(this[21], 0x24696E73u, 4u, &inPropertyData);
}

uint64_t acv2::CodecConverter::SetPropertySettings(acv2::CodecConverter **this, const __CFDictionary *a2)
{
  CFDictionaryRef inPropertyData = a2;
  acv2::CodecConverter::CheckUninitialize(this);
  return AudioCodecSetProperty(this[21], 0x61637320u, 8u, &inPropertyData);
}

uint64_t acv2::CodecConverter::CheckUninitialize(acv2::CodecConverter **this)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t result = acv2::CodecConverter::IsInitialized(this[21]);
  if (result)
  {
    uint64_t result = AudioCodecUninitialize(this[21]);
    if (result)
    {
      int v3 = result;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        int v5 = 136315394;
        OSStatus v6 = "CodecConverter.cpp";
        __int16 v7 = 1024;
        int v8 = 1604;
        _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioCodecUninitialize failed", (uint8_t *)&v5, 0x12u);
      }
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = v3;
      __cxa_throw(exception, MEMORY[0x1E4FBA3A8], 0);
    }
  }
  return result;
}

applesauce::CF::DictionaryRef *acv2::CodecConverter::GetPropertySettings@<X0>(AudioCodec *this@<X0>, applesauce::CF::DictionaryRef *a2@<X8>)
{
  acv2::CodecConverter::CheckInitialize((acv2::CodecConverter *)this, 0, 0);
  CFTypeRef cf = 0;
  UInt32 ioPropertyDataSize = 8;
  uint64_t result = (applesauce::CF::DictionaryRef *)AudioCodecGetProperty(this[21], 0x61637320u, &ioPropertyDataSize, &cf);
  if (result)
  {
    *(void *)a2 = 0;
  }
  else
  {
    int v5 = (__CFDictionary *)cf;
    OSStatus v6 = (const void *)(*((uint64_t (**)(AudioCodec *))*this + 7))(this);
    CFDictionaryAddValue(v5, @"converter", v6);
    return applesauce::CF::DictionaryRef::DictionaryRef(a2, cf);
  }
  return result;
}

BOOL acv2::CodecConverter::HasPropertySettings(AudioCodec *this)
{
  UInt32 outSize = 0;
  Boolean outWritable = 0;
  if (AudioCodecGetPropertyInfo(this[21], 0x61637320u, &outSize, &outWritable)) {
    BOOL v1 = 1;
  }
  else {
    BOOL v1 = outSize == 0;
  }
  return !v1;
}

OpaqueAudioComponentInstance *acv2::CodecConverter::CalcPrimeInfo(OpaqueAudioComponentInstance *this, AudioConverterPrimeInfo *a2)
{
  int v3 = (AudioCodec *)this;
  uint64_t v6 = 0;
  if (*((unsigned char *)this + 197) && *((unsigned char *)this + 380))
  {
    uint64_t v4 = *(void *)((char *)this + 372);
  }
  else
  {
    this = acv2::CodecConverter::CodecSupportsProperty(*((OpaqueAudioComponentInstance **)this + 21), 0x7072696Du);
    if (this)
    {
      acv2::CodecConverter::CheckInitialize((acv2::CodecConverter *)v3, 0, 0);
      UInt32 ioPropertyDataSize = 8;
      this = (OpaqueAudioComponentInstance *)AudioCodecGetProperty(v3[21], 0x7072696Du, &ioPropertyDataSize, &v6);
      uint64_t v4 = v6;
    }
    else
    {
      uint64_t v4 = 0;
    }
  }
  UInt32 v5 = a2->trailingFrames + HIDWORD(v4);
  a2->leadingFrames += v4;
  a2->trailingFrames = v5;
  return this;
}

OpaqueAudioComponentInstance *acv2::CodecConverter::CodecSupportsProperty(OpaqueAudioComponentInstance *this, AudioCodecPropertyID a2)
{
  if (this)
  {
    Boolean outWritable = 0;
    UInt32 outSize = 0;
    return (OpaqueAudioComponentInstance *)(AudioCodecGetPropertyInfo(this, a2, &outSize, &outWritable) == 0);
  }
  return this;
}

uint64_t acv2::CodecConverter::HasPrimeInfo(acv2::CodecConverter *this)
{
  return 1;
}

uint64_t acv2::CodecConverter::ProduceOutput(acv2::CodecConverter *this, ACAudioSpan *a2)
{
  if (*((unsigned char *)this + 203) && !*((_DWORD *)this + 100))
  {
    int v83 = 0;
    int v82 = 0;
    uint64_t v81 = 0x100000000;
    return v81 | v82 | v83;
  }
  if (!*((_DWORD *)a2 + 1))
  {
    uint64_t v81 = 0;
    int v82 = 1869902592;
    int v83 = 122;
    return v81 | v82 | v83;
  }
  if (*((unsigned char *)this + 198)) {
    BOOL v4 = *((void *)a2 + 5) == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (!v4)
  {
    int v5 = *((_DWORD *)this + 18);
    acv2::CodecConverter::CheckInitialize(this, 0, 0);
    LOBYTE(v97) = 0;
    BYTE4(v97) = 1;
    if (*(_DWORD *)a2 >= *((_DWORD *)a2 + 1)) {
      goto LABEL_192;
    }
    uint64_t v6 = (char *)this + 216;
    __int16 v7 = (_DWORD *)((char *)this + 588);
    int v92 = (char *)this + 560;
    int v93 = (double *)((char *)this + 572);
    while (1)
    {
      ACBaseAudioSpan::setAfter((uint64_t)this + 216, (unsigned int *)a2);
      ACBaseAudioSpan::copyEmptyMetadataEventsFrom((uint64_t *)this + 27, a2);
      unsigned int v8 = *((_DWORD *)this + 100);
      if (*((unsigned char *)this + 203))
      {
        if (v8)
        {
LABEL_14:
          if (v8 >= *((_DWORD *)this + 55)) {
            unsigned int v9 = *((_DWORD *)this + 55);
          }
          else {
            unsigned int v9 = *((_DWORD *)this + 100);
          }
          ACBaseAudioSpan::append((unsigned int *)this + 54, (acv2::CodecConverter *)((char *)this + 400), v9, v5);
          if (*((unsigned char *)this + 304)
            && *v7
            && *((_DWORD *)this + 74)
            && *(_DWORD *)(*((void *)this + 36) + 28) >= *v7)
          {
            long long v10 = *((_OWORD *)this + 36);
            *(_OWORD *)__src = *(_OWORD *)v92;
            v100[0] = v10;
            *(void *)&v100[1] = *((void *)this + 74);
            DWORD1(v100[0]) = v9;
            *int v93 = *v93 + (double)v9;
            *((_DWORD *)this + 145) -= v9;
            AudioMetadataFrame_AppendEvent((uint64_t *)this + 33, (char *)__src);
            *((void *)this + 36) += *(unsigned int *)(*((void *)this + 36) + 8);
            --*((_DWORD *)this + 74);
          }
          ACBaseAudioSpan::completeMetadataFrame((uint64_t *)this + 27);
          ACBaseAudioSpan::advanceConsume((unint64_t)this + 400, v9, v5);
        }
        uint64_t v11 = 0x100000000;
LABEL_24:
        uint64_t v96 = v11;
        caulk::expected<BOOL,int>::value((uint64_t)&v96);
        if ((_BYTE)v96)
        {
          BOOL v12 = 1;
        }
        else
        {
          caulk::expected<BOOL,int>::value((uint64_t)&v97);
          BOOL v12 = (_BYTE)v97 != 0;
        }
        LOBYTE(v97) = v12;
        if (!BYTE4(v97))
        {
          char v13 = 1;
          goto LABEL_29;
        }
        goto LABEL_30;
      }
      if (v8) {
        goto LABEL_14;
      }
      int v94 = 0;
      int v95 = 1;
      while (1)
      {
        UInt32 outStatus = 999;
        unsigned int v22 = *((_DWORD *)this + 55);
        if (*((unsigned char *)this + 197))
        {
          unsigned int v23 = *((_DWORD *)this + 90);
          unsigned int v24 = *((_DWORD *)this + 55);
          if (v23) {
            unsigned int v24 = v22 / v23;
          }
        }
        else
        {
          unsigned int v24 = *((_DWORD *)this + 55);
        }
        if (v24 <= *((_DWORD *)this + 91)) {
          UInt32 v25 = *((_DWORD *)this + 91);
        }
        else {
          UInt32 v25 = v24;
        }
        unsigned int v26 = v25;
        if (*((unsigned char *)this + 196))
        {
          unsigned int v27 = *((_DWORD *)this + 90);
          if (v27 <= 1) {
            unsigned int v27 = 1;
          }
          unsigned int v26 = v27 * v25;
        }
        unsigned int v28 = v25;
        if (*((unsigned char *)this + 197))
        {
          unsigned int v29 = *((_DWORD *)this + 90);
          if (v29 <= 1) {
            unsigned int v29 = 1;
          }
          unsigned int v28 = v29 * v25;
        }
        if (*((unsigned char *)this + 380) && !*((unsigned char *)this + 388) || (int v30 = (char *)this + 216, v28 > v22))
        {
          unsigned int v31 = (const AudioBufferList *)(*((void *)this + 63) + 48);
          if (*((void *)this + 64) == *((void *)this + 65)) {
            uint64_t v32 = 0;
          }
          else {
            uint64_t v32 = *((void *)this + 64);
          }
          uint64_t v33 = *((void *)this + 67);
          if (v33 == *((void *)this + 68)) {
            uint64_t v33 = 0;
          }
          int v34 = *((_DWORD *)this + 98);
          uint64_t v35 = (AudioStreamPacketDescription *)*((unsigned int *)this + 99);
          *((void *)this + 55) = v33;
          ACBaseAudioSpan::set((uint64_t *)this + 50, v31, v32, v34, v35);
          if (*((unsigned char *)this + 428))
          {
            uint64_t v36 = (unsigned int *)*((void *)this + 52);
            if (v36[4 * *v36 + 2] == 1094863915)
            {
              uint64_t v37 = *(v36 - 9);
              if (v37)
              {
                *((unsigned char *)this + 560) = 1;
                unint64_t v38 = (uint64_t *)((char *)v36 + v37 - 48);
                *(_DWORD *)((char *)this + 561) = 0;
                *((_DWORD *)this + 141) = 0;
                *((_DWORD *)this + 142) = 40;
                *int v93 = 0.0;
                *((_DWORD *)this + 145) = 0;
                *((_DWORD *)this + 14std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 1;
                *(void *)((char *)this + 588) = 0;
                *((_DWORD *)this + 149) = 0;
                *(_OWORD *)__src = 0u;
                memset(v100, 0, 28);
                BYTE8(v100[0]) = 1;
                *(void *)&v100[1] = 0x10000002CLL;
                AudioMetadataFrame::begin_new(v38, (unsigned int *)__src);
                AudioMetadataFrame_AppendEvent(v38, v92);
              }
            }
          }
          ACBaseAudioSpan::copyEmptyMetadataEventsFrom((uint64_t *)this + 50, (acv2::CodecConverter *)((char *)this + 216));
          if (*((_DWORD *)this + 91) < v25) {
            UInt32 v25 = *((_DWORD *)this + 91);
          }
          if (*((unsigned char *)this + 196))
          {
            unsigned int v39 = *((_DWORD *)this + 90);
            if (v39 <= 1) {
              unsigned int v39 = 1;
            }
            unsigned int v26 = v39 * v25;
          }
          else
          {
            unsigned int v26 = v25;
          }
          int v30 = (char *)this + 400;
        }
        if (*((unsigned char *)this + 202))
        {
          int appended = 0;
          goto LABEL_127;
        }
        if (!*((unsigned char *)this + 199))
        {
          if (ACv2Workarounds::fix84702776_86723525_86479548_89800354_SinglePacketDesc == 1)
          {
            int v41 = *((unsigned __int8 *)this + 197);
            if (*((unsigned char *)this + 197))
            {
              int v41 = *((_DWORD *)this + 10) == 0;
              if (!*((_DWORD *)this + 10)) {
                unsigned int v26 = 1;
              }
            }
          }
          else
          {
            int v41 = 0;
          }
          uint64_t v42 = *((void *)this + 13);
          if (v42 && ((int v43 = *(_DWORD *)(v42 + 24)) != 0 || *(_DWORD *)(v42 + 128)))
          {
            unsigned int v44 = *(_DWORD *)(v42 + 128) + v43;
            if (v41) {
              unsigned int v45 = 1;
            }
            else {
              unsigned int v45 = v44;
            }
            acv2::AudioConverterChain::ObtainInput((acv2::AudioConverterChain *)__src, *((acv2::AudioConverterBase **)this + 1), (uint64_t)this, v45);
            int appended = v100[0];
            if (!LODWORD(v100[0]))
            {
              uint64_t v46 = *(void *)__src;
              uint64_t v47 = *(const AudioBufferList **)(*(void *)__src + 16);
              uint64_t mNumberBuffers = v47->mNumberBuffers;
              UInt32 v49 = *(_DWORD *)(*(void *)__src + 8);
              if (mNumberBuffers)
              {
                p_mDataByteSize = &v47->mBuffers[0].mDataByteSize;
                do
                {
                  UInt32 *p_mDataByteSize = v49;
                  p_mDataByteSize += 4;
                  --mNumberBuffers;
                }
                while (mNumberBuffers);
              }
              UInt32 v51 = *(_DWORD *)v46;
              outBytesConsumed[0] = v49;
              outBytesConsumed[1] = v51;
              int appended = acv2::CodecConverter::AppendNewInput(this, v47, &outBytesConsumed[1], outBytesConsumed, *(const AudioStreamPacketDescription **)(v46 + 32));
              LODWORD(v100[0]) = appended;
              int v52 = (AudioConverterCapturer *)*((void *)this + 105);
              if (v52) {
                AudioConverterCapturer::write(v52, v47, *(const AudioStreamPacketDescription **)(v46 + 32), outBytesConsumed[1]);
              }
              acv2::AudioConverterChain::ConsumedInput(*((void **)this + 1), *(_DWORD *)v46, *(uint64_t *)&__src[2], outBytesConsumed[1]);
              goto LABEL_118;
            }
LABEL_101:
            unsigned int v26 = 0;
          }
          else
          {
            acv2::AudioConverterChain::ObtainInput((acv2::AudioConverterChain *)__src, *((acv2::AudioConverterBase **)this + 1), (uint64_t)this, v26);
            int appended = v100[0];
            if (LODWORD(v100[0])) {
              goto LABEL_101;
            }
            if (*((unsigned char *)this + 201))
            {
              uint64_t v53 = *(void *)__src;
              if (*((unsigned char *)this + 197) && **(_DWORD **)__src && !*(void *)(*(void *)__src + 32))
              {
                int appended = 561015652;
                goto LABEL_119;
              }
            }
            else
            {
              uint64_t v53 = *(void *)__src;
            }
            int v54 = *(const AudioBufferList **)(v53 + 16);
            uint64_t v55 = v54->mNumberBuffers;
            UInt32 v56 = *(_DWORD *)(v53 + 8);
            if (v55)
            {
              long long v57 = &v54->mBuffers[0].mDataByteSize;
              do
              {
                *long long v57 = v56;
                v57 += 4;
                --v55;
              }
              while (v55);
            }
            UInt32 v58 = *(_DWORD *)v53;
            outBytesConsumed[0] = v56;
            outBytesConsumed[1] = v58;
            if (v58)
            {
              int appended = acv2::CodecConverter::AppendNewInput(this, v54, &outBytesConsumed[1], outBytesConsumed, *(const AudioStreamPacketDescription **)(v53 + 32));
              LODWORD(v100[0]) = appended;
              if (appended) {
                goto LABEL_101;
              }
            }
            else
            {
              int appended = 0;
            }
            unsigned int v59 = *(_DWORD *)v53;
            if (!*(_DWORD *)v53) {
              *((unsigned char *)this + 199) = 1;
            }
            acv2::AudioConverterChain::ConsumedInput(*((void **)this + 1), v59, *(uint64_t *)&__src[2], outBytesConsumed[1]);
LABEL_118:
            unsigned int v26 = outBytesConsumed[1];
          }
LABEL_119:
          if (appended && !v26) {
            goto LABEL_183;
          }
          goto LABEL_121;
        }
        unsigned int v26 = 0;
        int appended = 0;
LABEL_121:
        int v60 = v95;
        if (v26) {
          int v60 = 1;
        }
        int v95 = v60;
        int v61 = v26 ? 1 : v94;
        int v94 = v61;
LABEL_127:
        unsigned int v62 = acv2::CodecConverter::ProduceOutput(ACAudioSpan &)::$_1::operator()((uint64_t)this, v25, (uint64_t)v30, &outStatus);
        UInt32 v63 = outStatus;
        if (!v62 && outStatus == 4)
        {
          if (!*((unsigned char *)this + 199)
            || (uint64_t v64 = *((void *)this + 13)) != 0 && (*(_DWORD *)(v64 + 24) || *(_DWORD *)(v64 + 128)))
          {
            unsigned int v62 = 0;
          }
          else
          {
            __src[0] = 0;
            uint64_t v65 = (const AudioBufferList *)*((void *)this + 41);
            uint64_t v66 = *((void *)this + 42) - (void)v65 - 8;
            if (*((void *)this + 42) - (void)v65 != 8)
            {
              p_mData = &v65->mBuffers[0].mData;
              do
              {
                void *p_mData = __src;
                *((_DWORD *)p_mData - 1) = 0;
                p_mData += 2;
                v66 -= 16;
              }
              while (v66);
            }
            *(void *)outBytesConsumed = 0;
            acv2::CodecConverter::AppendNewInput(this, v65, &outBytesConsumed[1], outBytesConsumed, 0);
            UInt32 outStatus = 998;
            unsigned int v62 = acv2::CodecConverter::ProduceOutput(ACAudioSpan &)::$_1::operator()((uint64_t)this, v25, (uint64_t)v30, &outStatus);
            if (!v62) {
              *((unsigned char *)this + 203) = 1;
            }
          }
          UInt32 v63 = outStatus;
        }
        *((unsigned char *)this + 202) = v63 == 3;
        if (v63 == 1)
        {
          ++*((_DWORD *)this + 181);
          *(_DWORD *)int v30 = 0;
          *((_DWORD *)v30 + 2) = 0;
          ACBaseAudioSpan::resetMetadataEvents((uint64_t *)v30);
          if (*((_DWORD *)this + 181) > 3u || *((unsigned char *)this + 196))
          {
            int v95 = 0;
            int v94 = 97;
          }
        }
        else
        {
          *((_DWORD *)this + 181) = 0;
        }
        if (*((unsigned char *)this + 203)) {
          *(unsigned char *)(*((void *)this + 1) + 402) = 1;
        }
        if (v30 != v6)
        {
          if (*((unsigned char *)this + 380) && !*((unsigned char *)this + 388))
          {
            unsigned int v68 = *((_DWORD *)this + 96) >= v62 ? v62 : *((_DWORD *)this + 96);
            if (v68)
            {
              ACBaseAudioSpan::advanceConsume((unint64_t)this + 400, v68, v5);
              unsigned int v69 = *((_DWORD *)this + 96) - v68;
              *((_DWORD *)this + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v69;
              if (!v69) {
                *((unsigned char *)this + 388) = 1;
              }
              v62 -= v68;
            }
          }
          if (v62)
          {
            unsigned int v70 = *((_DWORD *)this + 100);
            unsigned int v71 = *((_DWORD *)this + 55);
            if (v71 >= v70) {
              uint64_t v72 = v70;
            }
            else {
              uint64_t v72 = v71;
            }
            ACBaseAudioSpan::append((unsigned int *)this + 54, (acv2::CodecConverter *)((char *)this + 400), v72, v5);
            ACBaseAudioSpan::advanceConsume((unint64_t)this + 400, v72, v5);
            ACBaseAudioSpan::copyFilledMetadataEventsFrom((uint64_t)this + 216, (uint64_t)this + 400, v72 | 0x100000000);
            if (*((unsigned char *)this + 304))
            {
              uint64_t v73 = *((void *)this + 33);
              if ((unint64_t)(*((void *)this + 34) - v73) >= 0x2C)
              {
                if (v73)
                {
                  uint64_t v74 = (long long *)(v73 + 44);
                  unsigned int v75 = *(_DWORD *)(v73 + 40);
                  if (v75 >= 2)
                  {
                    unsigned int v76 = v75 - 1;
                    do
                    {
                      uint64_t v74 = (long long *)((char *)v74 + *((unsigned int *)v74 + 2));
                      --v76;
                    }
                    while (v76);
                  }
                  long long v77 = *v74;
                  long long v78 = v74[1];
                  *((void *)this + 74) = *((void *)v74 + 4);
                  *(_OWORD *)int v92 = v77;
                  *((_OWORD *)this + 3std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v78;
                  *int v93 = *v93 + (double)v72;
                  *((_DWORD *)this + 145) -= v72;
                }
              }
            }
            ACBaseAudioSpan::completeMetadataFrame((uint64_t *)this + 27);
          }
          else if (*((_DWORD *)this + 96) && !*((unsigned char *)this + 203))
          {
            goto LABEL_176;
          }
        }
        if (*(_DWORD *)v6) {
          goto LABEL_181;
        }
        if (outStatus == 1) {
          break;
        }
        if (outStatus != 4 || *((unsigned char *)this + 203)) {
          goto LABEL_181;
        }
LABEL_176:
        if (appended) {
          goto LABEL_181;
        }
      }
      if (*((_DWORD *)this + 181) <= 3u && !*((unsigned char *)this + 196)) {
        goto LABEL_176;
      }
LABEL_181:
      if ((_BYTE)v95)
      {
        if (!appended)
        {
          uint64_t v11 = v94 | 0x162616400;
          __int16 v7 = (_DWORD *)((char *)this + 588);
          goto LABEL_24;
        }
LABEL_183:
        unsigned int v79 = appended & 0xFFFFFF00;
        unsigned __int8 v80 = appended;
        __int16 v7 = (_DWORD *)((char *)this + 588);
        goto LABEL_185;
      }
      unsigned int v79 = 1650549760;
      __int16 v7 = (_DWORD *)((char *)this + 588);
      unsigned __int8 v80 = v94;
LABEL_185:
      uint64_t v96 = v79 | v80;
      LODWORD(v97) = v79 | v80;
      if (!BYTE4(v97)) {
        goto LABEL_30;
      }
      char v13 = 0;
LABEL_29:
      BYTE4(v97) = v13;
LABEL_30:
      if (BYTE4(v96))
      {
        caulk::expected<BOOL,int>::value((uint64_t)&v96);
        BOOL v14 = (_BYTE)v96 != 0;
      }
      else
      {
        BOOL v14 = 0;
      }
      int v15 = *(_DWORD *)v6;
      if (v14 || v15)
      {
        int v16 = *((_DWORD *)this + 56);
        int v17 = *(_DWORD *)a2;
        uint64_t v18 = *((unsigned int *)a2 + 2);
        if (v15)
        {
          uint64_t v19 = *((void *)a2 + 4);
          if (v19)
          {
            unsigned int v20 = *(_DWORD *)a2;
            uint64_t v21 = *(unsigned int *)v6;
            do
            {
              *(void *)(v19 + 16 * v20++) += v18;
              --v21;
            }
            while (v21);
          }
        }
        *(_DWORD *)a2 = v17 + v15;
        *((_DWORD *)a2 + 2) = v18 + v16;
        ACBaseAudioSpan::copyFilledMetadataEventsFrom((uint64_t)a2, (uint64_t)this + 216, 0);
        if (BYTE4(v97))
        {
          if (*(_DWORD *)a2 < *((_DWORD *)a2 + 1)) {
            continue;
          }
        }
      }
LABEL_192:
      ACBaseAudioSpan::completeMetadataFrame((uint64_t *)a2);
      unsigned __int8 v88 = v97;
      uint64_t v89 = (v97 & 0xFF00000000) != 0;
      if ((v97 & 0xFF00000000) != 0) {
        int v82 = 0;
      }
      else {
        int v82 = v97 & 0xFFFFFF00;
      }
      int v90 = (acv2::AudioConverterBase *)*((void *)this + 19);
      if (v90) {
        acv2::AudioConverterBase::writeCapture(v90, a2, v87);
      }
      uint64_t v81 = v89 << 32;
      int v83 = v88;
      return v81 | v82 | v83;
    }
  }
  int v82 = 1869627136;
  uint64_t v84 = _os_log_pack_size();
  uint64_t message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v84 + 88, 16);
  if (message)
  {
    int v86 = (caulk::concurrent::message *)message;
    *(_WORD *)_os_log_pack_fill() = 0;
    caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v86);
  }
  uint64_t v81 = 0;
  int v83 = 63;
  return v81 | v82 | v83;
}

void sub_1900E6B2C(void *a1, int a2)
{
  if (a2 == 3) {
    __cxa_begin_catch(a1);
  }
  else {
    __cxa_begin_catch(a1);
  }
  __cxa_end_catch();
  JUMPOUT(0x1900E6B00);
}

uint64_t acv2::CodecConverter::ProduceOutput(ACAudioSpan &)::$_1::operator()(uint64_t a1, UInt32 a2, uint64_t a3, UInt32 *outStatus)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  unsigned int v8 = *(unsigned int **)(a3 + 16);
  uint64_t v9 = *v8;
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 16 * v9;
    do
    {
      size_t v12 = *(unsigned int *)(a3 + 12);
      uint64_t v13 = *(void *)(a3 + 16) + v10;
      *(_DWORD *)(v13 + 12) = v12;
      bzero(*(void **)(v13 + 16), v12);
      v10 += 16;
    }
    while (v11 != v10);
    unsigned int v8 = *(unsigned int **)(a3 + 16);
  }
  unsigned int v14 = v8[3];
  uint64_t v15 = *(void *)(a1 + 712);
  if (v15)
  {
    unsigned int v16 = *(_DWORD *)(v15 + 40);
    unsigned int v17 = v16 * *(_DWORD *)(v15 + 96);
    if (v17 >= v14) {
      unsigned int v17 = v8[3];
    }
    unsigned int v18 = v17 / v16 / *(_DWORD *)(v15 + 56) * *(_DWORD *)(v15 + 56);
    unsigned int v14 = v18 * v16;
    uint64_t v19 = CA::AudioBuffers::Prepare(**(CA::AudioBuffers ***)(v15 + 64), 1, v18 * v16);
    if (v19[4 * *v19 + 2] != 1094863915 || (uint64_t v20 = *(v19 - 9), !v20))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        ioOutputDataByteSize[0] = 136315394;
        *(void *)&ioOutputDataByteSize[1] = "PostDecodeRenderer.cpp";
        LOWORD(ioOutputDataByteSize[3]) = 1024;
        *(UInt32 *)((char *)&ioOutputDataByteSize[3] + 2) = 123;
        _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  unable to get metadata frame from render EABL", (uint8_t *)ioOutputDataByteSize, 0x12u);
      }
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = 2003329396;
    }
    long long v78 = outStatus;
    unsigned int v79 = v19;
    uint64_t v21 = (uint64_t *)((char *)v19 + v20 - 48);
    unsigned int v22 = (void *)*v21;
    int64_t v23 = v21[1] - *v21;
    if (v23 >= 1)
    {
      bzero(v22, v23);
      unsigned int v22 = (void *)*v21;
    }
    v21[1] = (uint64_t)v22;
    memset(ioOutputDataByteSize, 0, 44);
    LOBYTE(ioOutputDataByteSize[6]) = 1;
    *(void *)&ioOutputDataByteSize[8] = 0x10000002CLL;
    AudioMetadataFrame::begin_new(v21, ioOutputDataByteSize);
    unsigned int v24 = 2 * ((v18 + *(_DWORD *)(v15 + 56) - 1) / *(_DWORD *)(v15 + 56));
    unint64_t v25 = *(unsigned int *)(v15 + 100);
    if (v25 >= v24) {
      uint64_t v26 = v24;
    }
    else {
      uint64_t v26 = v25;
    }
    if (v26)
    {
      uint64_t v27 = 0;
      unint64_t v28 = (*(void *)(v15 + 80) - *(void *)(v15 + 72)) / v25;
      do
      {
        uint64_t v29 = *(void *)(v15 + 72) + v28 * v27;
        ioOutputBufferLists = (AudioBufferList *)1;
        int v82 = 40;
        uint64_t v83 = 0;
        uint64_t v84 = 0x100000000;
        int v85 = v28;
        uint64_t v86 = v29;
        AudioMetadataFrame_AppendEvent(v21, (char *)&ioOutputBufferLists);
        ++v27;
        --v26;
      }
      while (v26);
    }
    uint64_t v30 = *(void *)(a1 + 712);
    UInt32 ioNumberPackets = a2;
    if (v30)
    {
      UInt32 outStatus = v78;
      unsigned int v8 = v79;
LABEL_23:
      unsigned int v31 = (void **)v8;
      OSStatus v32 = AudioCodecProduceOutputBufferList(*(AudioCodec *)(a1 + 168), (AudioBufferList *)v8, &ioNumberPackets, *(AudioStreamPacketDescription **)(a3 + 32), outStatus);
LABEL_24:
      OSStatus v33 = v32;
      goto LABEL_25;
    }
    UInt32 outStatus = v78;
    unsigned int v8 = v79;
  }
  else
  {
    UInt32 ioNumberPackets = a2;
  }
  if (*(unsigned char *)(a1 + 704) || (*(unsigned char *)(a1 + 68) & 0x20) != 0 && *(_DWORD *)(a1 + 84) >= 2u) {
    goto LABEL_23;
  }
  if (!*(unsigned char *)(a1 + 196) || *(_DWORD *)(a1 + 356) <= v14)
  {
    unsigned int v31 = (void **)v8;
    OSStatus v32 = AudioCodecProduceOutputPackets(*(AudioCodec *)(a1 + 168), *((void **)v8 + 2), v8 + 3, &ioNumberPackets, *(AudioStreamPacketDescription **)(a3 + 32), outStatus);
    goto LABEL_24;
  }
  unint64_t v40 = *(void **)(a1 + 776);
  int v41 = *(void **)(a1 + 784);
  unsigned int v31 = (void **)v8;
  if (v40 == v41)
  {
    std::vector<unsigned char>::resize((std::vector<char> *)(a1 + 776), *(unsigned int *)(a1 + 356));
    unint64_t v40 = *(void **)(a1 + 776);
    int v41 = *(void **)(a1 + 784);
  }
  ioOutputDataByteSize[0] = v41 - v40;
  OSStatus v33 = AudioCodecProduceOutputPackets(*(AudioCodec *)(a1 + 168), v40, ioOutputDataByteSize, &ioNumberPackets, *(AudioStreamPacketDescription **)(a3 + 32), outStatus);
  if (!v33)
  {
    size_t v42 = ioOutputDataByteSize[0];
    if (ioOutputDataByteSize[0] <= *((_DWORD *)v31 + 3))
    {
      *((_DWORD *)v31 + 3) = ioOutputDataByteSize[0];
      memcpy(v31[2], *(const void **)(a1 + 776), v42);
      OSStatus v33 = 0;
    }
    else
    {
      OSStatus v33 = 560100710;
      uint64_t v43 = _os_log_pack_size();
      uint64_t message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v43 + 88, 17);
      if (message)
      {
        unsigned int v45 = (caulk::concurrent::message *)message;
        uint64_t v46 = (_DWORD *)_os_log_pack_fill();
        UInt32 v47 = ioOutputDataByteSize[0];
        *uint64_t v46 = 67109120;
        v46[1] = v47;
        caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v45);
      }
    }
  }
LABEL_25:
  if (v33)
  {
    uint64_t v34 = _os_log_pack_size();
    uint64_t v35 = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v34 + 88, 2);
    if (v35)
    {
      uint64_t v36 = (caulk::concurrent::message *)v35;
      uint64_t v37 = (_DWORD *)_os_log_pack_fill();
      *uint64_t v37 = 67109120;
      v37[1] = v33;
      caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v36);
    }
    uint64_t v38 = 0;
    unsigned int v39 = *((_DWORD *)v31 + 3);
  }
  else
  {
    unsigned int v39 = *((_DWORD *)v31 + 3);
    if (*(unsigned char *)(a1 + 197)) {
      uint64_t v38 = v39 / *(_DWORD *)(a1 + 72);
    }
    else {
      uint64_t v38 = ioNumberPackets;
    }
  }
  *(void *)(a1 + 816) += v38;
  *(void *)(a1 + 824) += v39;
  uint64_t v48 = *(void *)(a1 + 712);
  if (v48)
  {
    UInt32 v49 = *(AudioBufferList **)(a3 + 16);
    uint64_t mNumberBuffers = v49->mNumberBuffers;
    if (mNumberBuffers)
    {
      uint64_t v51 = 0;
      uint64_t v52 = 16 * mNumberBuffers;
      do
      {
        size_t v53 = *(unsigned int *)(a3 + 12);
        uint64_t v54 = *(void *)(a3 + 16) + v51;
        *(_DWORD *)(v54 + 12) = v53;
        bzero(*(void **)(v54 + 16), v53);
        v51 += 16;
      }
      while (v52 != v51);
      UInt32 v49 = *(AudioBufferList **)(a3 + 16);
    }
    *(void *)ioOutputDataByteSize = v31;
    ioOutputBufferLists = v49;
    if (v38)
    {
      AudioUnitRenderActionFlags ioActionFlags = 0;
      if (AudioUnitProcessMultiple(*(AudioUnit *)(v48 + 8), &ioActionFlags, (const AudioTimeStamp *)(v48 + 104), v38, 1u, (const AudioBufferList **)ioOutputDataByteSize, 1u, &ioOutputBufferLists))
      {
        uint64_t v55 = _os_log_pack_size();
        uint64_t v56 = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v55 + 88, 16);
        if (v56)
        {
          long long v57 = (caulk::concurrent::message *)v56;
          *(_WORD *)_os_log_pack_fill() = 0;
          caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v57);
        }
        return 0;
      }
      *(double *)(v48 + 104) = *(double *)(v48 + 104) + (double)v38;
    }
    else
    {
      uint64_t v58 = v49->mNumberBuffers;
      if (v58)
      {
        p_mDataByteSize = &v49->mBuffers[0].mDataByteSize;
        do
        {
          UInt32 *p_mDataByteSize = 0;
          p_mDataByteSize += 4;
          --v58;
        }
        while (v58);
      }
    }
  }
  int v60 = *(_DWORD *)(a1 + 72);
  *(_DWORD *)a3 = v38;
  *(_DWORD *)(a3 + 8) = ACBaseAudioSpan::sizeOfFirstPackets((ACBaseAudioSpan *)a3, v38, v60);
  unsigned int v62 = *(acv2::AudioConverterBase **)(a1 + 848);
  if (v62) {
    acv2::AudioConverterBase::writeCapture(v62, (AudioConverterCapturer *)a3, v61);
  }
  if (*(unsigned char *)(a1 + 196))
  {
    UInt32 v63 = *(void **)(a3 + 40);
    if (v63)
    {
      ioOutputDataByteSize[0] = 0;
      LOBYTE(ioOutputBufferLists) = 0;
      OSStatus PropertyInfo = AudioCodecGetPropertyInfo(*(AudioCodec *)(a1 + 168), 0x706B7469u, ioOutputDataByteSize, (Boolean *)&ioOutputBufferLists);
      if (PropertyInfo)
      {
        uint64_t v65 = _os_log_pack_size();
        uint64_t v66 = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v65 + 88, 16);
        if (!v66) {
          return v38;
        }
        uint64_t v67 = (caulk::concurrent::message *)v66;
        unsigned int v68 = (_DWORD *)_os_log_pack_fill();
LABEL_71:
        *unsigned int v68 = 67109120;
        v68[1] = PropertyInfo;
        caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v67);
        return v38;
      }
      if (v38 != ioOutputDataByteSize[0] >> 4)
      {
        uint64_t v74 = _os_log_pack_size();
        uint64_t v75 = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v74 + 88, 16);
        if (!v75) {
          return v38;
        }
        uint64_t v67 = (caulk::concurrent::message *)v75;
        unsigned int v68 = (_DWORD *)_os_log_pack_fill();
        OSStatus PropertyInfo = 0;
        goto LABEL_71;
      }
      OSStatus Property = AudioCodecGetProperty(*(AudioCodec *)(a1 + 168), 0x706B7469u, ioOutputDataByteSize, v63);
      if (Property)
      {
        uint64_t v70 = _os_log_pack_size();
        uint64_t v71 = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v70 + 88, 16);
        if (v71)
        {
          uint64_t v72 = (caulk::concurrent::message *)v71;
          uint64_t v73 = (_DWORD *)_os_log_pack_fill();
          *uint64_t v73 = 67109120;
          v73[1] = Property;
          caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v72);
        }
      }
    }
  }
  return v38;
}

uint64_t acv2::CodecConverter::AppendNewInput(acv2::CodecConverter *this, const AudioBufferList *inBufferList, UInt32 *ioNumberPackets, UInt32 *outBytesConsumed, const AudioStreamPacketDescription *inPacketDescription)
{
  unsigned int v8 = inBufferList;
  uint64_t v10 = (AudioBufferList *)*((void *)this + 41);
  if (v10 != inBufferList)
  {
    unint64_t v11 = (16 * inBufferList->mNumberBuffers) | 8;
    size_t v12 = (char *)*((void *)this + 42);
    if (v11 <= v12 - (char *)v10)
    {
      if (v11 < v12 - (char *)v10)
      {
        size_t v12 = (char *)v10 + v11;
        *((void *)this + 42) = (char *)v10 + v11;
      }
    }
    else
    {
      std::vector<unsigned char>::__append((std::vector<char> *)((char *)this + 328), v11 - (v12 - (char *)v10));
      uint64_t v10 = (AudioBufferList *)*((void *)this + 41);
      size_t v12 = (char *)*((void *)this + 42);
    }
    memcpy(v10, v8, v12 - (char *)v10);
    unsigned int v8 = (const AudioBufferList *)*((void *)this + 41);
  }
  UInt32 v13 = *outBytesConsumed;
  UInt32 v14 = *ioNumberPackets;
  if ((*((unsigned char *)this + 28) & 0x20) != 0 && *((_DWORD *)this + 11) >= 2u)
  {
    uint64_t appended = AudioCodecAppendInputBufferList(*((AudioCodec *)this + 21), v8, ioNumberPackets, inPacketDescription, outBytesConsumed);
  }
  else
  {
    int v16 = *((_DWORD *)this + 6);
    if ((v16 == 1935767394 || v16 == 1935764850) && v14 == 1 && v13 == 0) {
      *outBytesConsumed = 4;
    }
    uint64_t appended = AudioCodecAppendInputData(*((AudioCodec *)this + 21), v8->mBuffers[0].mData, outBytesConsumed, ioNumberPackets, inPacketDescription);
  }
  uint64_t v20 = appended;
  UInt32 v21 = *outBytesConsumed;
  if (v13 < *outBytesConsumed) {
    UInt32 v21 = v13;
  }
  *outBytesConsumed = v21;
  UInt32 v22 = *ioNumberPackets;
  if (v14 < *ioNumberPackets) {
    UInt32 v22 = v14;
  }
  if (v22) {
    BOOL v23 = 0;
  }
  else {
    BOOL v23 = v14 == 1;
  }
  if (v23 && v13 == 0) {
    UInt32 v22 = 1;
  }
  *UInt32 ioNumberPackets = v22;
  if (appended)
  {
    uint64_t v25 = _os_log_pack_size();
    uint64_t message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v25 + 88, 2);
    if (message)
    {
      uint64_t v27 = (caulk::concurrent::message *)message;
      unint64_t v28 = (_DWORD *)_os_log_pack_fill();
      _DWORD *v28 = 67109120;
      v28[1] = v20;
      caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v27);
    }
  }
  else
  {
    *((void *)this + 100) += v22;
    *((void *)this + 101) += *outBytesConsumed;
  }
  return v20;
}

uint64_t acv2::CodecConverter::NeedsBufferedInput(acv2::CodecConverter *this)
{
  return 1;
}

uint64_t acv2::CodecConverter::SetProperty(acv2::CodecConverter *this, signed int a2, UInt32 a3, CFTypeRef *a4)
{
  if (HIBYTE(a2) != 94
    || !acv2::CodecConverter::CodecSupportsProperty(*((OpaqueAudioComponentInstance **)this + 21), a2))
  {
    uint64_t v10 = 0;
    if (a2 <= 1668310370)
    {
      if (a2 <= 1651663219)
      {
        if (a2 == 1633842276) {
          goto LABEL_32;
        }
        if (a2 != 1634366322) {
          goto LABEL_81;
        }
        if (!*((unsigned char *)this + 196)) {
          return 1886547824;
        }
        if (!*((unsigned char *)this + 200)) {
          return 1869627199;
        }
        if (a3 != 8) {
          return 561211770;
        }
        acv2::CodecConverter::CheckUninitialize((acv2::CodecConverter **)this);
        inPropertyData[0] = *a4;
        uint64_t v13 = AudioCodecSetProperty(*((AudioCodec *)this + 21), 0x636F7372u, 8u, inPropertyData);
        if (v13) {
          return v13;
        }
        acv2::CodecConverter::CheckInitialize(this, 0, 0);
        LODWORD(__s1[0]) = 8;
      }
      else
      {
        if (a2 != 1651663220)
        {
          if (a2 == 1667527029)
          {
            if (a3 == 4)
            {
              acv2::CodecConverter::CheckUninitialize((acv2::CodecConverter **)this);
              uint64_t v10 = AudioCodecSetProperty(*((AudioCodec *)this + 21), 0x73726371u, 4u, a4);
              if (*((unsigned char *)this + 832)) {
                acv2::CodecConverter::CheckInitialize(this, 0, 0);
              }
              return v10;
            }
            return 561211770;
          }
          if (a2 == 1668114275)
          {
            if (!*((unsigned char *)this + 196)) {
              return 1886547824;
            }
            acv2::CodecConverter::CheckUninitialize((acv2::CodecConverter **)this);
            uint64_t v11 = acv2::CodecConverter::StoreMagicCookie(this, a4, a3);
            if (v11) {
              return v11;
            }
            return 0;
          }
          goto LABEL_81;
        }
        if (!*((unsigned char *)this + 196)) {
          return 1886547824;
        }
        if (a3 != 4) {
          return 561211770;
        }
        acv2::CodecConverter::CheckUninitialize((acv2::CodecConverter **)this);
        uint64_t v11 = AudioCodecSetProperty(*((AudioCodec *)this + 21), 0x62726174u, 4u, a4);
        if (v11) {
          return v11;
        }
        if (*((unsigned char *)this + 832)) {
          acv2::CodecConverter::CheckInitialize(this, 0, 0);
        }
        inPropertyData[0] = 0;
        LODWORD(__s1[0]) = 8;
      }
      if (!AudioCodecGetProperty(*((AudioCodec *)this + 21), 0x636F7372u, (UInt32 *)__s1, inPropertyData))
      {
        CFTypeRef v21 = inPropertyData[0];
        *((CFTypeRef *)this + 7) = inPropertyData[0];
        *(void *)(*((void *)this + 20) + 40) = v21;
      }
      return 0;
    }
    if (a2 <= 1886546284)
    {
      if (a2 == 1668310371) {
        goto LABEL_32;
      }
      if (a2 != 1684891491)
      {
        if (a2 != 1886353266) {
          goto LABEL_81;
        }
LABEL_32:
        if (acv2::CodecConverter::CodecSupportsProperty(*((OpaqueAudioComponentInstance **)this + 21), a2))return AudioCodecSetProperty(*((AudioCodec *)this + 21), a2, a3, a4); {
        return 1886547824;
        }
      }
      if (!*((unsigned char *)this + 197)) {
        return 1886547824;
      }
      acv2::CodecConverter::CheckUninitialize((acv2::CodecConverter **)this);
      long long v14 = *(_OWORD *)((char *)this + 72);
      __s1[0] = *(_OWORD *)((char *)this + 56);
      __s1[1] = v14;
      uint64_t v31 = *((void *)this + 11);
      uint64_t v11 = acv2::CodecConverter::StoreMagicCookie(this, a4, a3);
      if (v11) {
        return v11;
      }
      uint64_t v29 = *((void *)this + 11);
      long long v15 = *(_OWORD *)((char *)this + 72);
      __s2[0] = *(_OWORD *)((char *)this + 56);
      __s2[1] = v15;
      HIDWORD(v31) = 0;
      HIDWORD(v29) = 0;
      if (!memcmp(__s1, __s2, 0x28uLL))
      {
        if (*((unsigned char *)this + 832)) {
          acv2::CodecConverter::CheckInitialize(this, 0, 0);
        }
      }
      else
      {
        acv2::AudioConverterChain::GetChainBuildSettings((acv2::AudioConverterChain *)inPropertyData, *((void *)this + 20));
        uint64_t v11 = acv2::AudioConverterChain::RebuildConverterChain(*((acv2::AudioConverterChain **)this + 20), (const acv2::ChainBuildSettings *)inPropertyData);
        acv2::ChainBuildSettings::~ChainBuildSettings((acv2::ChainBuildSettings *)inPropertyData);
        if (v11) {
          return v11;
        }
      }
      return 0;
    }
    if (a2 == 1886546285)
    {
      if (a3 != 8) {
        return 4294967246;
      }
      if (*((unsigned char *)this + 197)
        && acv2::CodecConverter::CodecSupportsProperty(*((OpaqueAudioComponentInstance **)this + 21), 0x7072696Du))
      {
        CFTypeRef v22 = *a4;
        if (!*((unsigned char *)this + 380)) {
          *((unsigned char *)this + 380) = 1;
        }
        *(void *)((char *)this + 372) = v22;
        *((_DWORD *)this + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v22;
        int v23 = *((_DWORD *)a4 + 1);
        LODWORD(inPropertyData[0]) = 0;
        HIDWORD(inPropertyData[0]) = v23;
        acv2::CodecConverter::CheckUninitialize((acv2::CodecConverter **)this);
        AudioCodecSetProperty(*((AudioCodec *)this + 21), 0x7072696Du, 8u, inPropertyData);
        if (*((unsigned char *)this + 832)) {
          acv2::CodecConverter::CheckInitialize(this, 0, 0);
        }
      }
      return 0;
    }
    if (a2 != 1935893603)
    {
      if (a2 == 1919116144)
      {
        if (a3 == 4)
        {
          int v12 = *(_DWORD *)a4;
          *((unsigned char *)this + 832) = *(_DWORD *)a4 != 0;
          if (v12)
          {
            acv2::CodecConverter::CheckUninitialize((acv2::CodecConverter **)this);
            acv2::CodecConverter::CheckInitialize(this, 0, 0);
            return 0;
          }
          return 0;
        }
        return 561211770;
      }
LABEL_81:
      if (acv2::CodecConverter::CodecSupportsProperty(*((OpaqueAudioComponentInstance **)this + 21), a2))
      {
        acv2::CodecConverter::CheckUninitialize((acv2::CodecConverter **)this);
        uint64_t v11 = AudioCodecSetProperty(*((AudioCodec *)this + 21), a2, a3, a4);
        if (!v11)
        {
          if (*((unsigned char *)this + 832)) {
            acv2::CodecConverter::CheckInitialize(this, 0, 0);
          }
          return v10;
        }
        return v11;
      }
      uint64_t v11 = 1886547824;
      uint64_t v26 = *((void *)this + 89);
      if (!v26) {
        return v11;
      }
      LOBYTE(__s1[0]) = 0;
      LODWORD(inPropertyData[0]) = 0;
      if (AudioUnitGetPropertyInfo(*(AudioUnit *)(v26 + 8), a2, 0, 0, (UInt32 *)inPropertyData, (Boolean *)__s1)) {
        return v11;
      }
      return AudioUnitSetProperty(*(AudioUnit *)(*((void *)this + 89) + 8), a2, 0, 0, a4, a3);
    }
    if (!acv2::CodecConverter::CodecSupportsProperty(*((OpaqueAudioComponentInstance **)this + 21), 0x5E736463u))
    {
      uint64_t v10 = 0;
      goto LABEL_81;
    }
    CFBooleanRef Value = (__CFString *)CFDictionaryGetValue((CFDictionaryRef)*a4, @"media kind");
    if (Value) {
      unsigned int v17 = Value;
    }
    else {
      unsigned int v17 = &stru_1EDFA53D0;
    }
    CFRetain(v17);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)inPropertyData, v17);
    CFStringRef v18 = (const __CFString *)*((void *)this + 26);
    if (v18)
    {
      CFRetain(*((CFTypeRef *)this + 26));
      CFStringRef v19 = (const __CFString *)inPropertyData[0];
      if (!inPropertyData[0])
      {
        CFComparisonResult v20 = kCFCompareGreaterThan;
        goto LABEL_74;
      }
    }
    else
    {
      CFStringRef v19 = (const __CFString *)inPropertyData[0];
      if (!inPropertyData[0]) {
        goto LABEL_77;
      }
    }
    CFRetain(v19);
    if (v18) {
      CFComparisonResult v20 = CFStringCompare(v18, v19, 0);
    }
    else {
      CFComparisonResult v20 = kCFCompareLessThan;
    }
    CFRelease(v19);
    if (!v18)
    {
LABEL_75:
      if (v20)
      {
        applesauce::CF::StringRef::from_get((applesauce::CF::StringRef *)__s1, v17);
        uint64_t v24 = *((void *)this + 26);
        *((void *)this + 2std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = *(void *)&__s1[0];
        *(void *)&__s1[0] = v24;
        applesauce::CF::StringRef::~StringRef((const void **)__s1);
        char v25 = 0;
        uint64_t v10 = 0;
        goto LABEL_78;
      }
LABEL_77:
      uint64_t v10 = AudioCodecSetProperty(*((AudioCodec *)this + 21), 0x5E736463u, a3, a4);
      char v25 = 1;
LABEL_78:
      if (inPropertyData[0]) {
        CFRelease(inPropertyData[0]);
      }
      if (v25) {
        return v10;
      }
      goto LABEL_81;
    }
LABEL_74:
    CFRelease(v18);
    goto LABEL_75;
  }
  unsigned int v8 = (OpaqueAudioComponentInstance *)*((void *)this + 21);
  return AudioCodecSetProperty(v8, a2, a3, a4);
}

void sub_1900E7B9C(void *a1)
{
}

uint64_t acv2::CodecConverter::StoreMagicCookie(acv2::CodecConverter *this, const void *a2, UInt32 a3)
{
  if (!a2 && a3) {
    return 4294967246;
  }
  acv2::CodecConverter::CheckInitialize(this, a2, a3);
  uint64_t result = *((void *)this + 105);
  if (result)
  {
    AudioConverterCapturer::setDecompressionCookie((AudioConverterCapturer *)result, a2, a3);
    return 0;
  }
  return result;
}

applesauce::CF::StringRef *applesauce::CF::StringRef::from_get(applesauce::CF::StringRef *this, CFTypeRef cf)
{
  uint64_t v2 = this;
  if (cf)
  {
    CFRetain(cf);
    return applesauce::CF::StringRef::StringRef(v2, cf);
  }
  else
  {
    *(void *)this = 0;
  }
  return this;
}

uint64_t acv2::CodecConverter::GetProperty(acv2::CodecConverter *this, signed int a2, unsigned int *a3, AudioFormatListItem *a4)
{
  if (HIBYTE(a2) == 94
    && acv2::CodecConverter::CodecSupportsProperty(*((OpaqueAudioComponentInstance **)this + 21), a2))
  {
    goto LABEL_3;
  }
  if (a2 <= 1668114274)
  {
    if (a2 > 1634038641)
    {
      if (a2 > 1651663219)
      {
        if (a2 == 1651663220)
        {
          if (*a3 == 4)
          {
            acv2::CodecConverter::CheckInitialize(this, 0, 0);
            unsigned int v8 = (OpaqueAudioComponentInstance *)*((void *)this + 21);
            AudioCodecPropertyID v9 = 1651663220;
            goto LABEL_4;
          }
        }
        else
        {
          if (a2 != 1667527029) {
            goto LABEL_95;
          }
          if (*a3 == 4)
          {
            acv2::CodecConverter::CheckInitialize(this, 0, 0);
            unsigned int v8 = (OpaqueAudioComponentInstance *)*((void *)this + 21);
            AudioCodecPropertyID v9 = 1936876401;
            goto LABEL_4;
          }
        }
        return 561211770;
      }
      if (a2 == 1634038642)
      {
        if (*((unsigned char *)this + 196))
        {
          acv2::CodecConverter::CheckInitialize(this, 0, 0);
          LOBYTE(outPropertyData[0]) = 0;
          LODWORD(ioPropertyDataSize.mASBD.mSampleRate) = 0;
          uint64_t PropertyInfo = AudioCodecGetPropertyInfo(*((AudioCodec *)this + 21), 0x6F737261u, (UInt32 *)&ioPropertyDataSize, (Boolean *)outPropertyData);
          if (PropertyInfo) {
            return PropertyInfo;
          }
          if (*a3 == LODWORD(ioPropertyDataSize.mASBD.mSampleRate))
          {
            char v25 = (OpaqueAudioComponentInstance *)*((void *)this + 21);
            AudioCodecPropertyID v27 = 1869836897;
            goto LABEL_88;
          }
          return 561211770;
        }
      }
      else
      {
        if (a2 != 1634366322) {
          goto LABEL_95;
        }
        if (*((unsigned char *)this + 196))
        {
          if (!*((unsigned char *)this + 200)) {
            return 1869627199;
          }
          if (*a3 == 8)
          {
            acv2::CodecConverter::CheckInitialize(this, 0, 0);
            LODWORD(outPropertyData[0]) = 0;
            LODWORD(ioPropertyDataSize.mASBD.mSampleRate) = 4;
            if (!AudioCodecGetProperty(*((AudioCodec *)this + 21), 0x75727372u, (UInt32 *)&ioPropertyDataSize, outPropertyData)&& LODWORD(outPropertyData[0]))
            {
              uint64_t PropertyInfo = 0;
              a4->mASBD.mSampleRate = 0.0;
              return PropertyInfo;
            }
            LODWORD(ioPropertyDataSize.mASBD.mSampleRate) = 8;
            char v25 = (OpaqueAudioComponentInstance *)*((void *)this + 21);
            p_AudioFormatInfo ioPropertyDataSize = (UInt32 *)&ioPropertyDataSize;
            AudioCodecPropertyID v27 = 1668248434;
            return AudioCodecGetProperty(v25, v27, p_ioPropertyDataSize, a4);
          }
          return 561211770;
        }
      }
    }
    else
    {
      if (a2 <= 1634034289)
      {
        if (a2 == 1633904996)
        {
          if (*a3 != 40) {
            return 561211770;
          }
          acv2::CodecConverter::CheckInitialize(this, 0, 0);
          uint64_t PropertyInfo = 0;
          if (*((unsigned char *)this + 196))
          {
            unint64_t v28 = (long long *)*((void *)this + 20);
            long long v14 = *v28;
            long long v15 = v28[1];
            uint64_t v16 = *((void *)v28 + 4);
          }
          else
          {
            long long v14 = *((_OWORD *)this + 1);
            long long v15 = *((_OWORD *)this + 2);
            uint64_t v16 = *((void *)this + 6);
          }
        }
        else
        {
          if (a2 != 1633906532) {
            goto LABEL_95;
          }
          if (*a3 != 40) {
            return 561211770;
          }
          acv2::CodecConverter::CheckInitialize(this, 0, 0);
          uint64_t PropertyInfo = 0;
          if (*((unsigned char *)this + 197))
          {
            uint64_t v13 = *((void *)this + 20);
            long long v14 = *(_OWORD *)(v13 + 40);
            long long v15 = *(_OWORD *)(v13 + 56);
            uint64_t v16 = *(void *)(v13 + 72);
          }
          else
          {
            long long v14 = *(_OWORD *)((char *)this + 56);
            long long v15 = *(_OWORD *)((char *)this + 72);
            uint64_t v16 = *((void *)this + 11);
          }
        }
        *(void *)&a4->mASBD.mBitsPerChannel = v16;
        *(_OWORD *)&a4->mASBD.mSampleRate = v14;
        *(_OWORD *)&a4->mASBD.mBytesPerPacket = v15;
        return PropertyInfo;
      }
      if (a2 == 1634034290)
      {
        if (*((unsigned char *)this + 196))
        {
          acv2::CodecConverter::CheckInitialize(this, 0, 0);
          LOBYTE(outPropertyData[0]) = 0;
          LODWORD(ioPropertyDataSize.mASBD.mSampleRate) = 0;
          uint64_t PropertyInfo = AudioCodecGetPropertyInfo(*((AudioCodec *)this + 21), 0x62727461u, (UInt32 *)&ioPropertyDataSize, (Boolean *)outPropertyData);
          if (PropertyInfo) {
            return PropertyInfo;
          }
          if (*a3 == LODWORD(ioPropertyDataSize.mASBD.mSampleRate))
          {
            char v25 = (OpaqueAudioComponentInstance *)*((void *)this + 21);
            AudioCodecPropertyID v27 = 1651668065;
            goto LABEL_88;
          }
          return 561211770;
        }
      }
      else
      {
        if (a2 != 1634034540) {
          goto LABEL_95;
        }
        if (*((unsigned char *)this + 196))
        {
          acv2::CodecConverter::CheckInitialize(this, 0, 0);
          LOBYTE(outPropertyData[0]) = 0;
          LODWORD(ioPropertyDataSize.mASBD.mSampleRate) = 0;
          uint64_t PropertyInfo = AudioCodecGetPropertyInfo(*((AudioCodec *)this + 21), 0x616F636Cu, (UInt32 *)&ioPropertyDataSize, (Boolean *)outPropertyData);
          if (PropertyInfo) {
            return PropertyInfo;
          }
          if (*a3 == LODWORD(ioPropertyDataSize.mASBD.mSampleRate))
          {
            char v25 = (OpaqueAudioComponentInstance *)*((void *)this + 21);
            unsigned __int16 v26 = 25452;
            goto LABEL_55;
          }
          return 561211770;
        }
      }
    }
    return 1886547824;
  }
  if (a2 > 1986355825)
  {
    if (a2 > 2020172402)
    {
      switch(a2)
      {
        case 2020172403:
          acv2::CodecConverter::CheckInitialize(this, 0, 0);
          uint64_t PropertyInfo = 0;
          int v12 = *((_DWORD *)this + 88);
          goto LABEL_103;
        case 2020175987:
          acv2::CodecConverter::CheckInitialize(this, 0, 0);
          if (!*((unsigned char *)this + 197))
          {
            uint64_t PropertyInfo = 0;
            int v12 = *((_DWORD *)this + 8);
            goto LABEL_103;
          }
          goto LABEL_66;
        case 2020569203:
          acv2::CodecConverter::CheckInitialize(this, 0, 0);
          if (!*((unsigned char *)this + 196))
          {
            uint64_t PropertyInfo = 0;
            int v12 = *((_DWORD *)this + 18);
LABEL_103:
            LODWORD(a4->mASBD.mSampleRate) = v12;
            return PropertyInfo;
          }
LABEL_66:
          uint64_t PropertyInfo = 0;
          int v12 = *((_DWORD *)this + 89);
          goto LABEL_103;
      }
      goto LABEL_95;
    }
    if (a2 == 1986355826)
    {
      if (*((unsigned char *)this + 196))
      {
        acv2::CodecConverter::CheckInitialize(this, 0, 0);
        LOBYTE(outPropertyData[0]) = 0;
        LODWORD(ioPropertyDataSize.mASBD.mSampleRate) = 0;
        uint64_t PropertyInfo = AudioCodecGetPropertyInfo(*((AudioCodec *)this + 21), 0x61627274u, (UInt32 *)&ioPropertyDataSize, (Boolean *)outPropertyData);
        if (PropertyInfo) {
          return PropertyInfo;
        }
        if (*a3 == LODWORD(ioPropertyDataSize.mASBD.mSampleRate))
        {
          char v25 = (OpaqueAudioComponentInstance *)*((void *)this + 21);
          AudioCodecPropertyID v27 = 1633841780;
          goto LABEL_88;
        }
        return 561211770;
      }
    }
    else
    {
      if (a2 != 1986360178) {
        goto LABEL_95;
      }
      if (*((unsigned char *)this + 196))
      {
        acv2::CodecConverter::CheckInitialize(this, 0, 0);
        LOBYTE(outPropertyData[0]) = 0;
        LODWORD(ioPropertyDataSize.mASBD.mSampleRate) = 0;
        uint64_t PropertyInfo = AudioCodecGetPropertyInfo(*((AudioCodec *)this + 21), 0x616F7372u, (UInt32 *)&ioPropertyDataSize, (Boolean *)outPropertyData);
        if (PropertyInfo) {
          return PropertyInfo;
        }
        if (*a3 == LODWORD(ioPropertyDataSize.mASBD.mSampleRate))
        {
          char v25 = (OpaqueAudioComponentInstance *)*((void *)this + 21);
          unsigned __int16 v26 = 29554;
LABEL_55:
          AudioCodecPropertyID v27 = v26 | 0x616F0000;
LABEL_88:
          p_AudioFormatInfo ioPropertyDataSize = a3;
          return AudioCodecGetProperty(v25, v27, p_ioPropertyDataSize, a4);
        }
        return 561211770;
      }
    }
    return 1886547824;
  }
  if (a2 <= 1835623026)
  {
    if (a2 == 1668114275)
    {
      if (!*((unsigned char *)this + 196)) {
        return 1886547824;
      }
      acv2::CodecConverter::CheckInitialize(this, 0, 0);
      uint64_t PropertyInfo = AudioCodecGetProperty(*((AudioCodec *)this + 21), 0x6B756B69u, a3, a4);
      uint64_t v29 = (AudioConverterCapturer *)*((void *)this + 19);
      if (!v29 || PropertyInfo) {
        return PropertyInfo;
      }
      if (*a3) {
        AudioConverterCapturer::setDecompressionCookie(v29, a4, *a3);
      }
    }
    else
    {
      if (a2 != 1718383476) {
        goto LABEL_95;
      }
      if (!*((unsigned char *)this + 196)) {
        return 1886547824;
      }
      if (*a3 < 0x30) {
        return 561211770;
      }
      acv2::CodecConverter::GetCodecCookie((acv2::CodecConverter *)outPropertyData, (uint64_t)this);
      long long v17 = *(_OWORD *)((char *)this + 72);
      *(_OWORD *)&ioPropertyDataSize.mASBD.mSampleRate = *(_OWORD *)((char *)this + 56);
      *(_OWORD *)&ioPropertyDataSize.mASBD.mBytesPerPacket = v17;
      CFStringRef v18 = (void *)outPropertyData[0];
      *(void *)&ioPropertyDataSize.mASBD.mBitsPerChannel = *((void *)this + 11);
      ioPropertyDataSize.mMagicCookie = (const void *)outPropertyData[0];
      ioPropertyDataSize.mMagicCookieSize = gsl::narrow<unsigned int,unsigned long>(outPropertyData[1] - outPropertyData[0]);
      UInt32 v19 = *a3;
      CFComparisonResult v20 = (OpaqueAudioComponentInstance *)*((void *)this + 21);
      UInt32 outSize = 0;
      if (AudioCodecGetPropertyInfo(v20, 0x6163666Cu, &outSize, 0)) {
        goto LABEL_31;
      }
      UInt32 v21 = outSize;
      if (v19 < outSize) {
        UInt32 v21 = v19;
      }
      unsigned int v33 = v21;
      if (GetFormatListFromCodec(*((AudioCodec *)this + 21), &ioPropertyDataSize, &v33, a4))
      {
LABEL_31:
        long long v22 = *(_OWORD *)((char *)this + 56);
        long long v23 = *(_OWORD *)((char *)this + 72);
        *(void *)&a4->mASBD.mBitsPerChannel = *((void *)this + 11);
        *(_OWORD *)&a4->mASBD.mSampleRate = v22;
        *(_OWORD *)&a4->mASBD.mBytesPerPacket = v23;
        a4->mChannelLayoutTag = a4->mASBD.mChannelsPerFrame | 0xFFFF0000;
        unsigned int v24 = 48;
      }
      else
      {
        unsigned int v24 = v33;
      }
      *a3 = v24;
      if (v18) {
        operator delete(v18);
      }
    }
    return 0;
  }
  if (a2 == 1835623027)
  {
    uint64_t PropertyInfo = 0;
    LODWORD(a4->mASBD.mSampleRate) = 0;
    return PropertyInfo;
  }
  if (a2 == 1886353266)
  {
    if (acv2::CodecConverter::CodecSupportsProperty(*((OpaqueAudioComponentInstance **)this + 21), 0x706F7772u))
    {
      unsigned int v8 = (OpaqueAudioComponentInstance *)*((void *)this + 21);
      AudioCodecPropertyID v9 = 1886353266;
      goto LABEL_4;
    }
    return 1886547824;
  }
LABEL_95:
  if (acv2::CodecConverter::CodecSupportsProperty(*((OpaqueAudioComponentInstance **)this + 21), a2))
  {
    acv2::CodecConverter::CheckInitialize(this, 0, 0);
LABEL_3:
    unsigned int v8 = (OpaqueAudioComponentInstance *)*((void *)this + 21);
    AudioCodecPropertyID v9 = a2;
LABEL_4:
    return AudioCodecGetProperty(v8, v9, a3, a4);
  }
  uint64_t PropertyInfo = 1886547824;
  uint64_t v31 = *((void *)this + 89);
  if (!v31 || !acv2::PostDecodeRenderer::SupportsProperty(*(acv2::PostDecodeRenderer **)(v31 + 8), a2)) {
    return PropertyInfo;
  }
  OSStatus v32 = *(OpaqueAudioComponentInstance **)(*((void *)this + 89) + 8);
  return AudioUnitGetProperty(v32, a2, 0, 0, a4, a3);
}

void sub_1900E8510(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void acv2::CodecConverter::GetCodecCookie(acv2::CodecConverter *this, uint64_t a2)
{
  memset(&outPropertyData, 0, sizeof(outPropertyData));
  UInt32 outSize = 0;
  Boolean outWritable = 0;
  OSStatus PropertyInfo = AudioCodecGetPropertyInfo(*(AudioCodec *)(a2 + 168), 0x6B756B69u, &outSize, &outWritable);
  if (PropertyInfo)
  {
    std::vector<char>::pointer begin = 0;
  }
  else
  {
    if (outSize)
    {
      std::vector<unsigned char>::__append(&outPropertyData, outSize);
      std::vector<char>::pointer begin = outPropertyData.__begin_;
    }
    else
    {
      std::vector<char>::pointer begin = 0;
    }
    OSStatus PropertyInfo = AudioCodecGetProperty(*(AudioCodec *)(a2 + 168), 0x6B756B69u, &outSize, begin);
    if (!PropertyInfo)
    {
      if ((std::vector<char>::pointer)outSize <= (std::vector<char>::pointer)(outPropertyData.__end_ - begin))
      {
        OSStatus PropertyInfo = 0;
        if ((std::vector<char>::pointer)outSize < (std::vector<char>::pointer)(outPropertyData.__end_ - begin)) {
          outPropertyData.__end_ = &begin[outSize];
        }
      }
      else
      {
        std::vector<unsigned char>::__append(&outPropertyData, outSize - (unint64_t)(outPropertyData.__end_ - begin));
        OSStatus PropertyInfo = 0;
        std::vector<char>::pointer begin = outPropertyData.__begin_;
      }
    }
  }
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(this, begin, (uint64_t)outPropertyData.__end_, outPropertyData.__end_ - begin);
  *((_DWORD *)this + std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = PropertyInfo;
  if (outPropertyData.__begin_) {
    operator delete(outPropertyData.__begin_);
  }
}

void sub_1900E8638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t gsl::narrow<unsigned int,unsigned long>(unint64_t result)
{
  if (HIDWORD(result))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &unk_1EDF950F8;
  }
  return result;
}

uint64_t acv2::CodecConverter::GetPropertyInfo(acv2::CodecConverter *this, signed int inPropertyID, UInt32 *outSize, unsigned __int8 *a4)
{
  UInt32 outSizea = 0;
  Boolean outWritable = 0;
  if (HIBYTE(inPropertyID) != 94)
  {
    if (inPropertyID > 1668114274)
    {
      if (inPropertyID > 1986355825)
      {
        if (inPropertyID > 2020172402)
        {
          if (inPropertyID != 2020172403 && inPropertyID != 2020175987 && inPropertyID != 2020569203) {
            goto LABEL_72;
          }
LABEL_49:
          if (outSize) {
            *UInt32 outSize = 4;
          }
          Boolean outWritable = 0;
          goto LABEL_84;
        }
        if (inPropertyID != 1986355826)
        {
          if (inPropertyID != 1986360178) {
            goto LABEL_72;
          }
          if (*((unsigned char *)this + 196))
          {
            long long v14 = (OpaqueAudioComponentInstance *)*((void *)this + 21);
            unsigned __int16 v15 = 29554;
LABEL_44:
            AudioCodecPropertyID v16 = v15 | 0x616F0000;
            goto LABEL_60;
          }
          return 1886547824;
        }
        if (!*((unsigned char *)this + 196)) {
          return 1886547824;
        }
        long long v17 = (OpaqueAudioComponentInstance *)*((void *)this + 21);
        AudioCodecPropertyID v18 = 1633841780;
        goto LABEL_69;
      }
      if (inPropertyID > 1835623026)
      {
        if (inPropertyID == 1835623027) {
          goto LABEL_49;
        }
        if (inPropertyID != 1886353266) {
          goto LABEL_72;
        }
        if (!AudioCodecGetPropertyInfo(*((AudioCodec *)this + 21), 0x706F7772u, outSize, &outWritable)) {
          goto LABEL_84;
        }
        return 1886547824;
      }
      if (inPropertyID != 1668114275)
      {
        if (inPropertyID != 1718383476) {
          goto LABEL_72;
        }
        if (*((unsigned char *)this + 196))
        {
          acv2::CodecConverter::GetCodecCookie((acv2::CodecConverter *)v22, (uint64_t)this);
          AudioCodecPropertyID v9 = (void *)v22[0];
          gsl::narrow<unsigned int,unsigned long>(v22[1] - v22[0]);
          uint64_t v10 = (OpaqueAudioComponentInstance *)*((void *)this + 21);
          UInt32 v25 = 0;
          if (AudioCodecGetPropertyInfo(v10, 0x6163666Cu, &v25, 0)) {
            UInt32 v11 = 48;
          }
          else {
            UInt32 v11 = v25;
          }
          UInt32 outSizea = v11;
          if (outSize) {
            *UInt32 outSize = v11;
          }
          if (v9) {
            operator delete(v9);
          }
          goto LABEL_84;
        }
        return 1886547824;
      }
      if (!*((unsigned char *)this + 196)) {
        return 1886547824;
      }
      LODWORD(v22[0]) = 0;
      uint64_t PropertyInfo = AudioCodecGetPropertyInfo(*((AudioCodec *)this + 21), 0x6B756B69u, (UInt32 *)v22, &outWritable);
      if (!PropertyInfo)
      {
        if (!outSize) {
          goto LABEL_84;
        }
        UInt32 v13 = v22[0];
        goto LABEL_78;
      }
      return PropertyInfo;
    }
    if (inPropertyID <= 1634038641)
    {
      if (inPropertyID <= 1634034289)
      {
        if (inPropertyID == 1633904996 || inPropertyID == 1633906532)
        {
          if (outSize) {
            *UInt32 outSize = 40;
          }
          if (a4)
          {
            uint64_t v8 = 0;
            *a4 = 0;
            return v8;
          }
          return 0;
        }
LABEL_72:
        if (AudioCodecGetPropertyInfo(*((AudioCodec *)this + 21), inPropertyID, outSize, &outWritable))
        {
          uint64_t v8 = 1886547824;
          uint64_t v20 = *((void *)this + 89);
          if (!v20 || AudioUnitGetPropertyInfo(*(AudioUnit *)(v20 + 8), inPropertyID, 0, 0, outSize, &outWritable)) {
            return v8;
          }
        }
LABEL_84:
        if (a4)
        {
          uint64_t v8 = 0;
          *a4 = outWritable;
          return v8;
        }
        return 0;
      }
      if (inPropertyID != 1634034290)
      {
        if (inPropertyID != 1634034540) {
          goto LABEL_72;
        }
        if (*((unsigned char *)this + 196))
        {
          long long v14 = (OpaqueAudioComponentInstance *)*((void *)this + 21);
          unsigned __int16 v15 = 25452;
          goto LABEL_44;
        }
        return 1886547824;
      }
      if (!*((unsigned char *)this + 196)) {
        return 1886547824;
      }
      long long v17 = (OpaqueAudioComponentInstance *)*((void *)this + 21);
      unsigned __int16 v19 = 29793;
      goto LABEL_68;
    }
    if (inPropertyID > 1651663219)
    {
      if (inPropertyID == 1651663220)
      {
        long long v17 = (OpaqueAudioComponentInstance *)*((void *)this + 21);
        unsigned __int16 v19 = 24948;
LABEL_68:
        AudioCodecPropertyID v18 = v19 | 0x62720000;
LABEL_69:
        uint64_t v8 = AudioCodecGetPropertyInfo(v17, v18, &outSizea, &outWritable);
        if (v8) {
          return v8;
        }
        if (!outSize) {
          goto LABEL_84;
        }
        UInt32 v13 = outSizea;
LABEL_78:
        *UInt32 outSize = v13;
        goto LABEL_84;
      }
      if (inPropertyID != 1667527029) {
        goto LABEL_72;
      }
      long long v14 = (OpaqueAudioComponentInstance *)*((void *)this + 21);
      AudioCodecPropertyID v16 = 1936876401;
    }
    else
    {
      if (inPropertyID != 1634038642)
      {
        if (inPropertyID != 1634366322) {
          goto LABEL_72;
        }
        uint64_t v8 = 1886547824;
        if (!*((unsigned char *)this + 196) || !*((unsigned char *)this + 200)) {
          return v8;
        }
        LODWORD(v22[0]) = 0;
        uint64_t PropertyInfo = AudioCodecGetPropertyInfo(*((AudioCodec *)this + 21), 0x636F7372u, (UInt32 *)v22, &outWritable);
        if (!PropertyInfo)
        {
          if (!outSize) {
            goto LABEL_84;
          }
          UInt32 v13 = 8;
          goto LABEL_78;
        }
        return PropertyInfo;
      }
      if (!*((unsigned char *)this + 196)) {
        return 1886547824;
      }
      long long v14 = (OpaqueAudioComponentInstance *)*((void *)this + 21);
      AudioCodecPropertyID v16 = 1869836897;
    }
LABEL_60:
    uint64_t v8 = AudioCodecGetPropertyInfo(v14, v16, outSize, &outWritable);
    if (v8) {
      return v8;
    }
    goto LABEL_84;
  }
  uint64_t v8 = AudioCodecGetPropertyInfo(*((AudioCodec *)this + 21), inPropertyID, &outSizea, &outWritable);
  if (!v8)
  {
    if (a4) {
      *a4 = outWritable;
    }
    if (outSize)
    {
      uint64_t v8 = 0;
      *UInt32 outSize = outSizea;
      return v8;
    }
    return 0;
  }
  return v8;
}

void sub_1900E8B48(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t acv2::CodecConverter::Reset(acv2::CodecConverter *this)
{
  *((_DWORD *)this + 100) = 0;
  *((_DWORD *)this + 102) = 0;
  ACBaseAudioSpan::resetMetadataEvents((uint64_t *)this + 50);
  int v2 = *((unsigned __int8 *)this + 380);
  if (*((unsigned char *)this + 380)) {
    int v2 = *((_DWORD *)this + 93);
  }
  *((_DWORD *)this + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v2;
  *((unsigned char *)this + 388) = 0;
  *((unsigned char *)this + 199) = 0;
  *((_WORD *)this + 101) = 0;
  *((_OWORD *)this + 50) = 0u;
  *((_OWORD *)this + 51) = 0u;
  uint64_t v3 = *((void *)this + 89);
  if (v3)
  {
    *(_OWORD *)(v3 + 152) = 0uLL;
    *(_OWORD *)(v3 + 13std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0uLL;
    *(_OWORD *)(v3 + 120) = 0uLL;
    *(_OWORD *)(v3 + 104) = 0uLL;
  }
  CFStringRef v4 = CFStringCreateWithBytes(0, (const UInt8 *)"", 0, 0x8000100u, 0);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFStringRef v5 = v4;
  uint64_t v6 = (const void *)*((void *)this + 26);
  *((void *)this + 2std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v5;
  if (v6) {
    CFRelease(v6);
  }
  __int16 v7 = (OpaqueAudioComponentInstance *)*((void *)this + 21);
  return AudioCodecReset(v7);
}

void sub_1900E8C50(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t acv2::CodecConverter::description@<X0>(int16x8_t *this@<X0>, void *a2@<X8>)
{
  v41[19] = *MEMORY[0x1E4F143B8];
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v27);
  acv2::AudioConverterBase::description(this, &__p);
  if ((v38 & 0x80u) == 0) {
    CFTypeRef p_p = &__p;
  }
  else {
    CFTypeRef p_p = __p;
  }
  if ((v38 & 0x80u) == 0) {
    uint64_t v5 = v38;
  }
  else {
    uint64_t v5 = v37;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)p_p, v5);
  if ((char)v38 < 0) {
    operator delete(__p);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"    codec: ", 11);
  CAX4CCString::CAX4CCString((CAX4CCString *)&__p, this[11].u32[0]);
  size_t v6 = strlen((const char *)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)&__p, v6);
  LOBYTE(__s[0]) = 47;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)__s, 1);
  CAX4CCString::CAX4CCString((CAX4CCString *)__s, this[11].u32[1]);
  size_t v7 = strlen((const char *)__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)__s, v7);
  LOBYTE(v34[0]) = 47;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)v34, 1);
  CAX4CCString::CAX4CCString((CAX4CCString *)v34, this[11].u32[2]);
  size_t v8 = strlen((const char *)v34);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)v34, v8);
  LOBYTE(__dst[0]) = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)__dst, 1);
  uint64_t v9 = this[44].i64[1];
  uint64_t v10 = MEMORY[0x1E4FBA418];
  if (v9)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"      spatially rendered from:  ", 32);
    int16x8_t v11 = *(int16x8_t *)(v9 + 32);
    __s[0] = *(_OWORD *)(v9 + 16);
    __s[1] = v11;
    uint64_t v33 = *(void *)(v9 + 48);
    CA::StreamDescription::AsString((CA::StreamDescription *)v34, __s, *(double *)__s, v11);
    if (v35 >= 0) {
      int v12 = v34;
    }
    else {
      int v12 = (void **)v34[0];
    }
    size_t v13 = strlen((const char *)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)v12, v13);
    char v31 = 10;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)&v31, 1);
    if (v35 < 0) {
      operator delete(v34[0]);
    }
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>(__dst, (uint64_t)&v37);
    std::string __p = *(void **)v10;
    *(void **)((char *)&__p + *((void *)__p - 3)) = *(void **)(v10 + 24);
    uint64_t v37 = MEMORY[0x1E4FBA470] + 16;
    if (v40 < 0) {
      operator delete(v39);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x192FC8840](v41);
    if ((v26 & 0x80u) == 0) {
      long long v14 = __dst;
    }
    else {
      long long v14 = (void **)__dst[0];
    }
    if ((v26 & 0x80u) == 0) {
      uint64_t v15 = v26;
    }
    else {
      uint64_t v15 = (uint64_t)__dst[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)v14, v15);
    if ((char)v26 < 0) {
      operator delete(__dst[0]);
    }
  }
  unsigned int v24 = a2;
  char v16 = 1;
  do
  {
    char v17 = v16;
    if (v16) {
      uint64_t v18 = 1768123424;
    }
    else {
      uint64_t v18 = 1868786720;
    }
    LODWORD(__s[0]) = 0;
    LOBYTE(__dst[0]) = 0;
    if ((*(unsigned int (**)(int16x8_t *, uint64_t, _OWORD *, void **))(this->i64[0] + 80))(this, v18, __s, __dst))
    {
      BOOL v19 = 1;
    }
    else
    {
      BOOL v19 = LODWORD(__s[0]) == 0;
    }
    if (!v19)
    {
      std::string __p = 0;
      CADeprecated::CAAutoFree<AudioChannelLayout>::alloc(&__p, LODWORD(__s[0]));
      uint64_t v20 = __p;
      if (!(*(unsigned int (**)(int16x8_t *, uint64_t, _OWORD *, void *))(this->i64[0] + 88))(this, v18, __s, __p))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"    ", 4);
        if (v17) {
          UInt32 v21 = "Input ";
        }
        else {
          UInt32 v21 = "Output";
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)v21, 6);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)" layout tag: 0x", 15);
        *(_DWORD *)((char *)v28 + *(void *)(v27 - 24)) = *(_DWORD *)((unsigned char *)v28 + *(void *)(v27 - 24)) & 0xFFFFFFB5 | 8;
        long long v22 = (void *)std::ostream::operator<<();
        *(_DWORD *)((char *)v22 + *(void *)(*v22 - 24) + 8) = *(_DWORD *)((unsigned char *)v22 + *(void *)(*v22 - 24)
                                                                                           + 8) & 0xFFFFFFB5 | 2;
        LOBYTE(v34[0]) = 10;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v34, 1);
LABEL_40:
        free(v20);
        goto LABEL_41;
      }
      if (v20) {
        goto LABEL_40;
      }
    }
LABEL_41:
    char v16 = 0;
  }
  while ((v17 & 1) != 0);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(v24, (uint64_t)v28);
  uint64_t v27 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v28[-1] + *(void *)(v27 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v28[0] = MEMORY[0x1E4FBA470] + 16;
  if (v29 < 0) {
    operator delete((void *)v28[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x192FC8840](&v30);
}

void sub_1900E9224(_Unwind_Exception *a1, uint64_t a2, void *__p, uint64_t a4, int a5, __int16 a6, char a7, char a8, ...)
{
  va_start(va, a8);
  if (a8 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void *CADeprecated::CAAutoFree<AudioChannelLayout>::alloc(void **a1, uint64_t a2)
{
  CFStringRef v4 = *a1;
  if (v4)
  {
    free(v4);
    *a1 = 0;
  }
  uint64_t result = malloc_type_malloc(32 * a2, 0x7C51E058uLL);
  if (a2 && !result)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    size_t v7 = std::bad_alloc::bad_alloc(exception);
  }
  *a1 = result;
  return result;
}

__CFString *acv2::CodecConverter::ConverterName(acv2::CodecConverter *this)
{
  return @"CodecConverter";
}

void acv2::CodecConverter::~CodecConverter(acv2::CodecConverter *this)
{
  acv2::CodecConverter::~CodecConverter(this);
  JUMPOUT(0x192FC8940);
}

{
  OpaqueAudioComponentInstance *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t vars8;

  *(void *)this = &unk_1EDF95360;
  int v2 = (OpaqueAudioComponentInstance *)*((void *)this + 21);
  if (v2)
  {
    AudioCodecUninitialize(v2);
    AudioComponentInstanceDispose(*((AudioComponentInstance *)this + 21));
  }
  std::unique_ptr<AudioConverterCapturer>::reset[abi:ne180100]((const std::__fs::filesystem::path **)this + 106, 0);
  std::unique_ptr<AudioConverterCapturer>::reset[abi:ne180100]((const std::__fs::filesystem::path **)this + 105, 0);
  uint64_t v3 = (void *)*((void *)this + 97);
  if (v3)
  {
    *((void *)this + 98) = v3;
    operator delete(v3);
  }
  CFStringRef v4 = (void *)*((void *)this + 94);
  if (v4)
  {
    *((void *)this + 95) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 91);
  if (v5)
  {
    *((void *)this + 92) = v5;
    operator delete(v5);
  }
  size_t v6 = *((void *)this + 89);
  *((void *)this + 89) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  std::__optional_destruct_base<ACCodecOutputBuffer,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 392);
  size_t v7 = (void *)*((void *)this + 41);
  if (v7)
  {
    *((void *)this + 42) = v7;
    operator delete(v7);
  }
  if (*((unsigned char *)this + 320)) {
    ACAudioSpan::~ACAudioSpan((std::pmr **)this + 27);
  }
  size_t v8 = (const void *)*((void *)this + 26);
  if (v8) {
    CFRelease(v8);
  }
  acv2::AudioConverterBase::~AudioConverterBase(this);
}

uint64_t std::__optional_destruct_base<ACCodecOutputBuffer,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 208))
  {
    int v2 = *(void **)(a1 + 144);
    if (v2)
    {
      *(void *)(a1 + 152) = v2;
      operator delete(v2);
    }
    uint64_t v3 = *(void **)(a1 + 120);
    if (v3)
    {
      *(void *)(a1 + 128) = v3;
      operator delete(v3);
    }
    ExtendedAudioBufferList_Destroy(*(std::pmr **)(a1 + 112));
    ACAudioSpan::~ACAudioSpan((std::pmr **)(a1 + 8));
  }
  return a1;
}

uint64_t acv2::CodecConverter::CodecConverter(uint64_t a1, uint64_t a2, OpaqueAudioComponent *a3, uint64_t a4, uint64_t a5, long long *a6, _OWORD *a7, uint64_t a8, uint64_t *a9, char a10)
{
  long long v15 = a6[3];
  long long v77 = a6[2];
  long long v78 = v15;
  long long v79 = a6[4];
  long long v16 = v79;
  long long v17 = a6[1];
  long long v75 = *a6;
  long long v18 = v75;
  long long v76 = v17;
  *(_OWORD *)(a1 + 48) = v77;
  *(_OWORD *)(a1 + 64) = v15;
  *(_OWORD *)(a1 + 80) = v16;
  *(_OWORD *)(a1 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v18;
  *(_OWORD *)(a1 + 32) = v17;
  *(void *)(a1 + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = -1;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)a1 = &unk_1EDF95360;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 160) = a2;
  *(void *)(a1 + 168) = a4;
  BOOL v19 = (AudioComponentInstance *)(a1 + 168);
  *(void *)(a1 + 17std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
  uint64_t v20 = (AudioComponentDescription *)(a1 + 176);
  *(_DWORD *)(a1 + 192) = 0;
  *(void *)(a1 + 184) = 0;
  int v21 = *((_DWORD *)a6 + 2);
  BOOL v23 = v21 == 1819304813 || v21 == 1885564203;
  *(unsigned char *)(a1 + 19std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v23;
  int v24 = *((_DWORD *)a6 + 12);
  BOOL v26 = v24 == 1819304813 || v24 == 1885564203;
  *(unsigned char *)(a1 + 197) = v26;
  *(unsigned char *)(a1 + 198) = a10;
  *(unsigned char *)(a1 + 21std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
  *(void *)(a1 + 208) = 0;
  *(unsigned char *)(a1 + 320) = 0;
  *(unsigned char *)(a1 + 203) = 0;
  *(_DWORD *)(a1 + 199) = 0;
  LOBYTE(__x) = 0;
  std::vector<char>::vector((std::vector<char> *)(a1 + 328), 8uLL, (const std::vector<char>::value_type *)&__x);
  **(_DWORD **)(a1 + 328) = 0;
  *(_OWORD *)(a1 + 352) = xmmword_1901C6480;
  *(_DWORD *)(a1 + 368) = 0;
  uint64_t v27 = *a9;
  *(_DWORD *)(a1 + 380) = *((_DWORD *)a9 + 2);
  *(void *)(a1 + 372) = v27;
  *(_DWORD *)(a1 + 384) = 0;
  *(unsigned char *)(a1 + 388) = 0;
  *(unsigned char *)(a1 + 392) = 0;
  *(unsigned char *)(a1 + 600) = 0;
  long long v29 = a7[3];
  long long v28 = a7[4];
  long long v30 = a7[2];
  *(_OWORD *)(a1 + 624) = a7[1];
  *(_OWORD *)(a1 + 640) = v30;
  *(_OWORD *)(a1 + 65std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v29;
  *(_OWORD *)(a1 + 672) = v28;
  *(_OWORD *)(a1 + 608) = *a7;
  *(void *)(a1 + 712) = 0;
  *(_OWORD *)(a1 + 688) = 0u;
  *(unsigned char *)(a1 + 704) = 0;
  *(unsigned char *)(a1 + 720) = 1;
  *(_DWORD *)(a1 + 724) = 0;
  LOBYTE(__x) = 0;
  std::vector<char>::vector((std::vector<char> *)(a1 + 728), 0x20uLL, (const std::vector<char>::value_type *)&__x);
  uint64_t v31 = *(void *)(a1 + 728);
  *(void *)uint64_t v31 = 0;
  *(_DWORD *)(v31 + 8) = 0;
  LOBYTE(__x) = 0;
  std::vector<char>::vector((std::vector<char> *)(a1 + 752), 0x20uLL, (const std::vector<char>::value_type *)&__x);
  uint64_t v32 = *(void *)(a1 + 752);
  *(void *)uint64_t v32 = 0;
  *(_DWORD *)(v32 + 8) = 0;
  *(_OWORD *)(a1 + 77std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(void *)(a1 + 824) = 0;
  *(unsigned char *)(a1 + 832) = 1;
  *(_OWORD *)(a1 + 840) = 0u;
  if (a5) {
    operator new();
  }
  uint64_t v33 = *a9;
  *(unsigned char *)(a1 + 380) = *((unsigned char *)a9 + 8);
  *(void *)(a1 + 372) = v33;
  uint64_t v34 = *v19;
  if (!*v19)
  {
    OSStatus v35 = AudioComponentInstanceNew(a3, v19);
    if (v35)
    {
      exception = __cxa_allocate_exception(4uLL);
      _DWORD *exception = v35;
      __cxa_throw(exception, MEMORY[0x1E4FBA3A8], 0);
    }
    uint64_t v34 = *v19;
  }
  Component = AudioComponentInstanceGetComponent(v34);
  Impl_AudioGetComponentInfo(Component, v20, 0);
  if (*(unsigned char *)(a1 + 196))
  {
    LODWORD(outPropertyData[0]) = 0;
    LODWORD(__x) = 4;
    if (AudioCodecGetProperty(*v19, 0x6C6D7263u, (UInt32 *)&__x, outPropertyData)) {
      BOOL v37 = 1;
    }
    else {
      BOOL v37 = LODWORD(outPropertyData[0]) == 0;
    }
    char v38 = !v37;
    *(unsigned char *)(a1 + 200) = v38;
  }
  *(void *)(a1 + 688) = a6;
  *(void *)(a1 + 69std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = (char *)a6 + 40;
  acv2::CodecConverter::CheckInitialize((acv2::CodecConverter *)a1, 0, 0);
  *(void *)(a1 + 688) = 0;
  *(void *)(a1 + 69std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
  if (!*(unsigned char *)(a1 + 197)) {
    goto LABEL_40;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)_ZGVZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm32EEEtlA32_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc68ELc101ELc99ELc111ELc100ELc101ELc114ELc95ELc79ELc117ELc116ELc112ELc117ELc116EEEEEbvE5input, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(_ZGVZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm32EEEtlA32_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc68ELc101ELc99ELc111ELc100ELc101ELc114ELc95ELc79ELc117ELc116ELc112ELc117ELc116EEEEEbvE5input))
  {
    uint64_t v58 = getenv("CoreAudio_CaptureDecoder_Output");
    if (!v58)
    {
LABEL_56:
      char v62 = 0;
LABEL_76:
      _ZZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm32EEEtlA32_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc68ELc101ELc99ELc111ELc100ELc101ELc114ELc95ELc79ELc117ELc116ELc112ELc117ELc116EEEEEbvE5input = v62;
      __cxa_guard_release(_ZGVZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm32EEEtlA32_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc68ELc101ELc99ELc111ELc100ELc101ELc114ELc95ELc79ELc117ELc116ELc112ELc117ELc116EEEEEbvE5input);
      goto LABEL_28;
    }
    std::string::basic_string[abi:ne180100]<0>(&__x, v58);
    uint64_t v59 = HIBYTE(v81);
    if (v81 < 0) {
      uint64_t v59 = *((void *)&__x + 1);
    }
    if (v59 == 2)
    {
      int v60 = (void *)__x;
      p_x = &__x;
      if (v81 < 0) {
        p_x = (long long *)__x;
      }
      if (*(_WORD *)p_x == 20302) {
        goto LABEL_54;
      }
    }
    else if (v59 == 1)
    {
      int v60 = (void *)__x;
      int v61 = &__x;
      if (v81 < 0) {
        int v61 = (long long *)__x;
      }
      if (*(unsigned char *)v61 == 48)
      {
LABEL_54:
        if (SHIBYTE(v81) < 0) {
          operator delete(v60);
        }
        goto LABEL_56;
      }
    }
    if (SHIBYTE(v81) < 0) {
      operator delete((void *)__x);
    }
    char v62 = 1;
    goto LABEL_76;
  }
LABEL_28:
  if (_ZZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm32EEEtlA32_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc68ELc101ELc99ELc111ELc100ELc101ELc114ELc95ELc79ELc117ELc116ELc112ELc117ELc116EEEEEbvE5input)
  {
    v39.i32[0] = bswap32(*(_DWORD *)(a1 + 24));
    *(int8x8_t *)v39.i8 = vzip1_s8(*(int8x8_t *)v39.i8, *(int8x8_t *)v39.i8);
    v40.i64[0] = 0x1F0000001FLL;
    v40.i64[1] = 0x1F0000001FLL;
    v41.i64[0] = 0x5F0000005FLL;
    v41.i64[1] = 0x5F0000005FLL;
    *(int8x8_t *)v39.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v41, (uint32x4_t)vsraq_n_s32(v40, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v39.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v39.i8, (int8x8_t)0x2E002E002E002ELL);
    *((unsigned char *)&v72.__r_.__value_.__s + 23) = 4;
    LODWORD(v72.__r_.__value_.__l.__data_) = vmovn_s16(v39).u32[0];
    v72.__r_.__value_.__s.__data_[4] = 0;
    size_t v42 = std::string::insert(&v72, 0, "-", 1uLL);
    long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    v73.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    unsigned int v44 = std::string::append(&v73, "-DecoderOut", 0xBuLL);
    long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    int64_t v81 = v44->__r_.__value_.__r.__words[2];
    long long __x = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    if (v81 >= 0) {
      uint64_t v46 = (const char *)&__x;
    }
    else {
      uint64_t v46 = (const char *)__x;
    }
    acv2::AudioConverterBase::createCapturer(outPropertyData, v46, a1 + 848, a1 + 56, (const void *)a1);
  }
  if (*(unsigned char *)(a1 + 197))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm31EEEtlA31_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc68ELc101ELc99ELc111ELc100ELc101ELc114ELc95ELc73ELc110ELc112ELc117ELc116EEEEEbvE5input, memory_order_acquire) & 1) != 0|| !__cxa_guard_acquire(&_ZGVZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm31EEEtlA31_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc68ELc101ELc99ELc111ELc100ELc101ELc114ELc95ELc73ELc110ELc112ELc117ELc116EEEEEbvE5input))
    {
LABEL_35:
      if (_ZZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm31EEEtlA31_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc68ELc101ELc99ELc111ELc100ELc101ELc114ELc95ELc73ELc110ELc112ELc117ELc116EEEEEbvE5input)
      {
        v39.i32[0] = bswap32(*(_DWORD *)(a1 + 24));
        *(int8x8_t *)v39.i8 = vzip1_s8(*(int8x8_t *)v39.i8, *(int8x8_t *)v39.i8);
        v47.i64[0] = 0x1F0000001FLL;
        v47.i64[1] = 0x1F0000001FLL;
        v48.i64[0] = 0x5F0000005FLL;
        v48.i64[1] = 0x5F0000005FLL;
        *(int8x8_t *)v39.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v48, (uint32x4_t)vsraq_n_s32(v47, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v39.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v39.i8, (int8x8_t)0x2E002E002E002ELL);
        *((unsigned char *)&v71.__r_.__value_.__s + 23) = 4;
        LODWORD(v71.__r_.__value_.__l.__data_) = vmovn_s16(v39).u32[0];
        v71.__r_.__value_.__s.__data_[4] = 0;
        UInt32 v49 = std::string::insert(&v71, 0, "-", 1uLL);
        long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
        v72.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v50;
        v49->__r_.__value_.__l.__size_ = 0;
        v49->__r_.__value_.__r.__words[2] = 0;
        v49->__r_.__value_.__r.__words[0] = 0;
        uint64_t v51 = std::string::append(&v72, "-DecoderIn", 0xAuLL);
        long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
        v73.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v52;
        v51->__r_.__value_.__l.__size_ = 0;
        v51->__r_.__value_.__r.__words[2] = 0;
        v51->__r_.__value_.__r.__words[0] = 0;
        if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v53 = &v73;
        }
        else {
          size_t v53 = (std::string *)v73.__r_.__value_.__r.__words[0];
        }
        acv2::AudioConverterBase::createCapturer(&__x, (const char *)v53, a1 + 840, a1 + 16, (const void *)a1);
      }
      goto LABEL_40;
    }
    UInt32 v63 = getenv("CoreAudio_CaptureDecoder_Input");
    if (!v63) {
      goto LABEL_68;
    }
    std::string::basic_string[abi:ne180100]<0>(&__x, v63);
    uint64_t v64 = HIBYTE(v81);
    if (v81 < 0) {
      uint64_t v64 = *((void *)&__x + 1);
    }
    if (v64 == 2)
    {
      uint64_t v65 = (void *)__x;
      uint64_t v70 = &__x;
      if (v81 < 0) {
        uint64_t v70 = (long long *)__x;
      }
      if (*(_WORD *)v70 == 20302) {
        goto LABEL_66;
      }
    }
    else if (v64 == 1)
    {
      uint64_t v65 = (void *)__x;
      uint64_t v66 = &__x;
      if (v81 < 0) {
        uint64_t v66 = (long long *)__x;
      }
      if (*(unsigned char *)v66 == 48)
      {
LABEL_66:
        if (SHIBYTE(v81) < 0) {
          operator delete(v65);
        }
LABEL_68:
        char v67 = 0;
LABEL_83:
        _ZZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm31EEEtlA31_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc68ELc101ELc99ELc111ELc100ELc101ELc114ELc95ELc73ELc110ELc112ELc117ELc116EEEEEbvE5input = v67;
        __cxa_guard_release(&_ZGVZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm31EEEtlA31_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc68ELc101ELc99ELc111ELc100ELc101ELc114ELc95ELc73ELc110ELc112ELc117ELc116EEEEEbvE5input);
        goto LABEL_35;
      }
    }
    if (SHIBYTE(v81) < 0) {
      operator delete((void *)__x);
    }
    char v67 = 1;
    goto LABEL_83;
  }
LABEL_40:
  CFStringRef v54 = CFStringCreateWithBytes(0, (const UInt8 *)"", 0, 0x8000100u, 0);
  if (!v54)
  {
    long long v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v57, "Could not construct");
  }
  uint64_t v55 = *(const void **)(a1 + 208);
  *(void *)(a1 + 208) = v54;
  if (v55) {
    CFRelease(v55);
  }
  return a1;
}

void sub_1900E9CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::pmr **a10, void **a11, void **a12, const std::__fs::filesystem::path **a13, const std::__fs::filesystem::path **a14, void **a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  __cxa_guard_abort(&_ZGVZ16isEnvVariableSetIXtlN9envHelper13StringLiteralILm31EEEtlA31_cLc67ELc111ELc114ELc101ELc65ELc117ELc100ELc105ELc111ELc95ELc67ELc97ELc112ELc116ELc117ELc114ELc101ELc68ELc101ELc99ELc111ELc100ELc101ELc114ELc95ELc73ELc110ELc112ELc117ELc116EEEEEbvE5input);
  std::unique_ptr<AudioConverterCapturer>::reset[abi:ne180100](a14, 0);
  std::unique_ptr<AudioConverterCapturer>::reset[abi:ne180100](a13, 0);
  BOOL v37 = *v35;
  if (*v35)
  {
    *(void *)(v34 + 784) = v37;
    operator delete(v37);
  }
  char v38 = *a15;
  if (*a15)
  {
    *(void *)(v34 + 760) = v38;
    operator delete(v38);
  }
  int16x8_t v39 = *a11;
  if (*a11)
  {
    *(void *)(v34 + 73std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v39;
    operator delete(v39);
  }
  uint64_t v40 = *(void *)(v34 + 712);
  *(void *)(v34 + 712) = 0;
  if (v40) {
    (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
  }
  std::__optional_destruct_base<ACCodecOutputBuffer,false>::~__optional_destruct_base[abi:ne180100](v34 + 392);
  uint32x4_t v41 = *a12;
  if (*a12)
  {
    *(void *)(v34 + 33std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v41;
    operator delete(v41);
  }
  if (*(unsigned char *)(v34 + 320)) {
    ACAudioSpan::~ACAudioSpan(a10);
  }
  size_t v42 = *(const void **)(v34 + 208);
  if (v42) {
    CFRelease(v42);
  }
  acv2::AudioConverterBase::~AudioConverterBase((acv2::AudioConverterBase *)v34);
  _Unwind_Resume(a1);
}

BOOL acv2::CodecConverter::ConverterSupportsProperty(OpaqueAudioComponentInstance **this, AudioCodecPropertyID a2)
{
  if (acv2::CodecConverter::CodecSupportsProperty(this[21], a2)) {
    return 1;
  }
  uint64_t v5 = this[89];
  if (!v5) {
    return 0;
  }
  Boolean outWritable = 0;
  UInt32 outDataSize = 0;
  return AudioUnitGetPropertyInfo(*((AudioUnit *)v5 + 1), a2, 0, 0, &outDataSize, &outWritable) == 0;
}

uint64_t acv2::CodecConverter::GetInputLayout(char **this, std::vector<char> *a2, unsigned __int8 *a3)
{
  acv2::CodecConverter::CheckInitialize((acv2::CodecConverter *)this, 0, 0);
  memset(&__p, 0, sizeof(__p));
  int Codec = acv2::CodecConverter::GetCodecProperty<unsigned char>((uint64_t)this, 0x69636C20u, &__p);
  std::vector<char>::pointer begin = __p.__begin_;
  if (Codec)
  {
    if (!__p.__begin_) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  unsigned int v8 = *((_DWORD *)__p.__begin_ + 2);
  if (v8 <= 1) {
    unsigned int v9 = 1;
  }
  else {
    unsigned int v9 = *((_DWORD *)__p.__begin_ + 2);
  }
  unint64_t v10 = 20 * v9 + 12;
  std::vector<char>::pointer v11 = a2->__begin_;
  unint64_t v12 = a2->__end_ - a2->__begin_;
  if (v10 <= v12)
  {
    if (v10 < v12) {
      a2->__end_ = &v11[v10];
    }
  }
  else
  {
    std::vector<unsigned char>::__append(a2, v10 - v12);
    std::vector<char>::pointer v11 = a2->__begin_;
    unsigned int v8 = *((_DWORD *)begin + 2);
  }
  memcpy(v11, begin, 20 * v8 + 12);
  unsigned int v21 = 0;
  if (AudioFormatProperty_NumberOfChannelsForLayout((const AudioChannelLayout *)a2->__begin_, &v21))
  {
LABEL_12:
    operator delete(begin);
LABEL_13:
    if (this + 91 != (char **)a2) {
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a2, this[91], this[92], this[92] - this[91]);
    }
    uint64_t v13 = 0;
    *a3 = 1;
    return v13;
  }
  unsigned int v15 = v21;
  if (v21 == *((_DWORD *)this + 11))
  {
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = 1718449215;
    uint64_t v16 = _os_log_pack_size();
    uint64_t message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v16 + 88, 16);
    if (message)
    {
      long long v18 = (caulk::concurrent::message *)message;
      uint64_t v19 = _os_log_pack_fill();
      int v20 = *((_DWORD *)this + 11);
      *(_DWORD *)uint64_t v19 = 67109376;
      *(_DWORD *)(v19 + 4) = v15;
      *(_WORD *)(v19 + 8) = 1024;
      *(_DWORD *)(v19 + 10) = v20;
      caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v18);
    }
  }
  operator delete(begin);
  return v13;
}

void sub_1900EA0FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  operator delete(v10);
  _Unwind_Resume(a1);
}

uint64_t acv2::CodecConverter::GetCodecProperty<unsigned char>(uint64_t a1, AudioCodecPropertyID a2, std::vector<char> *a3)
{
  UInt32 outSize = 0;
  Boolean outWritable = 0;
  uint64_t result = AudioCodecGetPropertyInfo(*(AudioCodec *)(a1 + 168), a2, &outSize, &outWritable);
  if (!result)
  {
    std::vector<char>::pointer begin = a3->__begin_;
    unint64_t v8 = a3->__end_ - a3->__begin_;
    if (outSize <= v8)
    {
      if (outSize < v8) {
        a3->__end_ = &begin[outSize];
      }
    }
    else
    {
      std::vector<unsigned char>::__append(a3, outSize - v8);
      std::vector<char>::pointer begin = a3->__begin_;
    }
    uint64_t result = AudioCodecGetProperty(*(AudioCodec *)(a1 + 168), a2, &outSize, begin);
    if (!result)
    {
      unint64_t v9 = a3->__end_ - a3->__begin_;
      if (outSize <= v9)
      {
        if (outSize < v9)
        {
          uint64_t result = 0;
          a3->__end_ = &a3->__begin_[outSize];
          return result;
        }
      }
      else
      {
        std::vector<unsigned char>::__append(a3, outSize - v9);
      }
      return 0;
    }
  }
  return result;
}

uint64_t acv2::CodecConverter::GetOutputLayout(char **this, std::vector<char> *a2, unsigned __int8 *a3)
{
  acv2::CodecConverter::CheckInitialize((acv2::CodecConverter *)this, 0, 0);
  if (this[89])
  {
    if (this + 94 != (char **)a2) {
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a2, this[94], this[95], this[95] - this[94]);
    }
  }
  else
  {
    memset(&__p, 0, sizeof(__p));
    int Codec = acv2::CodecConverter::GetCodecProperty<unsigned char>((uint64_t)this, 0x6F636C20u, &__p);
    std::vector<char>::pointer begin = __p.__begin_;
    if (Codec)
    {
      if (__p.__begin_) {
        operator delete(__p.__begin_);
      }
      goto LABEL_16;
    }
    unsigned int v8 = *((_DWORD *)__p.__begin_ + 2);
    if (v8 <= 1) {
      unsigned int v9 = 1;
    }
    else {
      unsigned int v9 = *((_DWORD *)__p.__begin_ + 2);
    }
    unint64_t v10 = 20 * v9 + 12;
    std::vector<char>::pointer v11 = a2->__begin_;
    unint64_t v12 = a2->__end_ - a2->__begin_;
    if (v10 <= v12)
    {
      if (v10 < v12) {
        a2->__end_ = &v11[v10];
      }
    }
    else
    {
      std::vector<unsigned char>::__append(a2, v10 - v12);
      std::vector<char>::pointer v11 = a2->__begin_;
      unsigned int v8 = *((_DWORD *)begin + 2);
    }
    memcpy(v11, begin, 20 * v8 + 12);
    operator delete(begin);
  }
  LODWORD(__p.__begin_) = 0;
  if (AudioFormatProperty_NumberOfChannelsForLayout((const AudioChannelLayout *)a2->__begin_, (unsigned int *)&__p))
  {
LABEL_16:
    if (this + 94 != (char **)a2) {
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a2, this[94], this[95], this[95] - this[94]);
    }
    uint64_t v13 = 0;
    *a3 = 1;
    return v13;
  }
  int v15 = (int)__p.__begin_;
  if (LODWORD(__p.__begin_) == *((_DWORD *)this + 21)) {
    return 0;
  }
  uint64_t v13 = 1718449215;
  uint64_t v16 = _os_log_pack_size();
  uint64_t message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v16 + 88, 16);
  if (message)
  {
    long long v18 = (caulk::concurrent::message *)message;
    uint64_t v19 = _os_log_pack_fill();
    int v20 = *((_DWORD *)this + 21);
    *(_DWORD *)uint64_t v19 = 67109376;
    *(_DWORD *)(v19 + 4) = v15;
    *(_WORD *)(v19 + 8) = 1024;
    *(_DWORD *)(v19 + 10) = v20;
    caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v18);
  }
  return v13;
}

void sub_1900EA3E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  operator delete(v10);
  _Unwind_Resume(a1);
}

caulk::concurrent::message *acv2::CodecConverter::SetInputChannelLayout(acv2::CodecConverter *this, const AudioChannelLayout *a2, int a3)
{
  if (*((_DWORD *)this + 11) == a3)
  {
    UInt32 mNumberChannelDescriptions = a2->mNumberChannelDescriptions;
    if (mNumberChannelDescriptions <= 1) {
      UInt32 v6 = 1;
    }
    else {
      UInt32 v6 = a2->mNumberChannelDescriptions;
    }
    unint64_t v7 = 20 * v6 + 12;
    std::vector<char>::pointer begin = (std::vector<char>::pointer)*((void *)this + 91);
    unint64_t v9 = *((void *)this + 92) - (void)begin;
    if (v7 <= v9)
    {
      if (v7 < v9) {
        *((void *)this + 92) = &begin[v7];
      }
    }
    else
    {
      unint64_t v10 = (std::vector<char> *)((char *)this + 728);
      std::vector<unsigned char>::__append(v10, v7 - v9);
      std::vector<char>::pointer begin = v10->__begin_;
      UInt32 mNumberChannelDescriptions = a2->mNumberChannelDescriptions;
    }
    return (caulk::concurrent::message *)memcpy(begin, a2, 20 * mNumberChannelDescriptions + 12);
  }
  else
  {
    uint64_t v12 = _os_log_pack_size();
    uint64_t result = (caulk::concurrent::message *)caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v12 + 88, 16);
    if (result)
    {
      long long v14 = result;
      uint64_t v15 = _os_log_pack_fill();
      int v16 = *((_DWORD *)this + 11);
      *(_DWORD *)uint64_t v15 = 67109376;
      *(_DWORD *)(v15 + 4) = a3;
      *(_WORD *)(v15 + 8) = 1024;
      *(_DWORD *)(v15 + 10) = v16;
      long long v17 = *(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16);
      return (caulk::concurrent::message *)caulk::concurrent::messenger::enqueue(v17, v14);
    }
  }
  return result;
}

uint64_t acv2::CodecConverter::SetOutputChannelLayout(acv2::CodecConverter *this, const AudioChannelLayout *inData, UInt32 inDataSize, int a4)
{
  Boolean outWritable = 0;
  if (*((_DWORD *)this + 21) != a4)
  {
    uint64_t v16 = _os_log_pack_size();
    uint64_t result = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v16 + 88, 16);
    if (!result) {
      return result;
    }
    long long v17 = (caulk::concurrent::message *)result;
    uint64_t v18 = _os_log_pack_fill();
    int v19 = *((_DWORD *)this + 21);
    *(_DWORD *)uint64_t v18 = 67109376;
    *(_DWORD *)(v18 + 4) = a4;
    *(_WORD *)(v18 + 8) = 1024;
    *(_DWORD *)(v18 + 10) = v19;
    caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v17);
    return 0;
  }
  uint64_t v7 = *((void *)this + 89);
  if (v7)
  {
    uint64_t result = AudioUnitSetProperty(*(AudioUnit *)(v7 + 8), 0x13u, 2u, 0, inData, inDataSize);
    if (result) {
      return result;
    }
    UInt32 mNumberChannelDescriptions = inData->mNumberChannelDescriptions;
    if (mNumberChannelDescriptions <= 1) {
      UInt32 v10 = 1;
    }
    else {
      UInt32 v10 = inData->mNumberChannelDescriptions;
    }
    unint64_t v11 = 20 * v10 + 12;
    std::vector<char>::pointer begin = (std::vector<char>::pointer)*((void *)this + 94);
    unint64_t v13 = *((void *)this + 95) - (void)begin;
    if (v11 <= v13)
    {
      if (v11 < v13) {
        *((void *)this + 95) = &begin[v11];
      }
    }
    else
    {
      long long v14 = (std::vector<char> *)((char *)this + 752);
      std::vector<unsigned char>::__append(v14, v11 - v13);
      std::vector<char>::pointer begin = v14->__begin_;
      UInt32 mNumberChannelDescriptions = inData->mNumberChannelDescriptions;
    }
    memcpy(begin, inData, 20 * mNumberChannelDescriptions + 12);
    return 0;
  }
  if (!*((unsigned char *)this + 196)
    || AudioCodecGetPropertyInfo(*((AudioCodec *)this + 21), 0x69636C20u, 0, &outWritable)
    || !outWritable
    || (acv2::CodecConverter::CheckUninitialize((acv2::CodecConverter **)this),
        uint64_t result = AudioCodecSetProperty(*((AudioCodec *)this + 21), 0x69636C20u, inDataSize, inData),
        !result))
  {
    unsigned int PropertyInfo = AudioCodecGetPropertyInfo(*((AudioCodec *)this + 21), 0x6F636C20u, 0, &outWritable);
    if (PropertyInfo || !outWritable)
    {
      UInt32 v21 = inData->mNumberChannelDescriptions;
      if (v21 <= 1) {
        UInt32 v22 = 1;
      }
      else {
        UInt32 v22 = inData->mNumberChannelDescriptions;
      }
      unint64_t v23 = 20 * v22 + 12;
      std::vector<char>::pointer v24 = (std::vector<char>::pointer)*((void *)this + 94);
      unint64_t v25 = *((void *)this + 95) - (void)v24;
      if (v23 <= v25)
      {
        if (v23 < v25) {
          *((void *)this + 95) = &v24[v23];
        }
      }
      else
      {
        BOOL v26 = (std::vector<char> *)((char *)this + 752);
        std::vector<unsigned char>::__append(v26, v23 - v25);
        std::vector<char>::pointer v24 = v26->__begin_;
        UInt32 v21 = inData->mNumberChannelDescriptions;
      }
      memcpy(v24, inData, 20 * v21 + 12);
      if (PropertyInfo | outWritable) {
        return PropertyInfo;
      }
      else {
        return 561476212;
      }
    }
    else
    {
      acv2::CodecConverter::CheckUninitialize((acv2::CodecConverter **)this);
      return AudioCodecSetProperty(*((AudioCodec *)this + 21), 0x6F636C20u, inDataSize, inData);
    }
  }
  return result;
}

BOOL acv2::CodecConverter::PrimeInfoIsWritable(acv2::CodecConverter *this)
{
  if (*((unsigned char *)this + 197)) {
    return 1;
  }
  Boolean outWritable = 0;
  UInt32 outSize = 0;
  if (AudioCodecGetPropertyInfo(*((AudioCodec *)this + 21), 0x7072696Du, &outSize, &outWritable)) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = outWritable == 0;
  }
  return !v2;
}

void ResamplerInitLocker::~ResamplerInitLocker(ResamplerInitLocker *this)
{
}

void sub_1900EA8C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1900EA924(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1900EAA14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1900EABE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1900EB188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (a15) {
    free(a15);
  }

  _Unwind_Resume(a1);
}

void sub_1900EB300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZL21getAVAudioFormatClassv_block_invoke_9222(uint64_t a1)
{
  AVFAudioLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AVAudioFormat");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAVAudioFormatClass(void)::softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    BOOL v2 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getAVAudioFormatClass()_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"AVFASoftLink.h", 64, @"Unable to find class %s", "AVAudioFormat");

    __break(1u);
  }
}

void sub_1900EB3E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1900EB554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, _Unwind_Exception *exception_object)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL19AVFAudioLibraryCorePPc_block_invoke_9233()
{
  uint64_t result = _sl_dlopen();
  AVFAudioLibraryCore(char **)::frameworkLibrary = result;
  return result;
}

void ___ZL28getAVAudioChannelLayoutClassv_block_invoke_9239(uint64_t a1)
{
  AVFAudioLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AVAudioChannelLayout");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAVAudioChannelLayoutClass(void)::softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    BOOL v2 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getAVAudioChannelLayoutClass()_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"AVFASoftLink.h", 65, @"Unable to find class %s", "AVAudioChannelLayout");

    __break(1u);
  }
}

void sub_1900EB6B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1900EB780(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::default_delete<AUAudioUnitV2Bridge_Renderer>::operator()[abi:ne180100](void *a1)
{
  (*(void (**)(void *))(a1[11] + 24))(a1 + 12);
  (*(void (**)(void *))(a1[6] + 24))(a1 + 7);
  (*(void (**)(void *))(a1[1] + 24))(a1 + 2);
  JUMPOUT(0x192FC8940);
}

void sub_1900EBB94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, void *a11)
{
  _Unwind_Resume(a1);
}

uint64_t setStateAndNotify(const __CFDictionary *a1, AUAudioUnitV2Bridge *a2, int a3)
{
  v19[4] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a2;
  atomic_store(1u, (unsigned __int8 *)&v5->_willSetFullState);
  UInt32 v6 = (char *)operator new(0x20uLL);
  *((void *)v6 + 2) = 0;
  *((void *)v6 + 1) = 0;
  *(void *)UInt32 v6 = &unk_1EDFA2B60;
  *((_DWORD *)v6 + std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
  uint64_t v7 = (unsigned int *)(v6 + 24);
  atomic_fetch_add_explicit((atomic_ullong *volatile)v6 + 1, 1uLL, memory_order_relaxed);
  unsigned int v8 = v5;
  LODWORD(v14) = a3;
  *((void *)&v14 + 1) = a1;
  unint64_t v9 = operator new(0x30uLL);
  *unint64_t v9 = &unk_1EDF9E758;
  v9[1] = v6 + 24;
  v9[2] = v6;
  void v9[3] = v8;
  *((_OWORD *)v9 + 2) = v14;
  v19[3] = v9;
  LOBYTE(a3) = dispatch_to_main_queue_with_timeout((uint64_t)v19);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v19);
  if ((a3 & 1) == 0)
  {
    if (kInterAppAudioScope)
    {
      UInt32 v10 = *(id *)kInterAppAudioScope;
      if (!v10) {
        goto LABEL_9;
      }
    }
    else
    {
      UInt32 v10 = MEMORY[0x1E4F14500];
      id v11 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioFormatInfo buf = 136315394;
      uint64_t v16 = "AUAudioUnitV2Bridge.mm";
      __int16 v17 = 1024;
      int v18 = 1700;
      _os_log_impl(&dword_18FEC0000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d setStateAndNotify: failed to execute on the main queue. Falling back to secondary thread.", buf, 0x12u);
    }
  }
LABEL_9:
  uint64_t v12 = *v7;
  if (!v12)
  {
    notifyParametersChanged(v8);
    uint64_t v12 = *v7;
  }
  atomic_store(0, (unsigned __int8 *)&v8->_willSetFullState);
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v6);

  return v12;
}

void sub_1900EBDC0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);

  _Unwind_Resume(a1);
}

uint64_t setPresentPresetAndNotify(AUAudioUnitV2Bridge *a1, AUAudioUnitPreset *a2)
{
  uint64_t v3 = a1;
  CFStringRef v4 = a2;
  audioUnit = v3->_audioUnit;
  LODWORD(v8) = [(AUAudioUnitPreset *)v4 number];
  id v9 = [(AUAudioUnitPreset *)v4 name];

  uint64_t v6 = AudioUnitSetProperty(audioUnit, 0x24u, 0, 0, &v8, 0x10u);
  if (!v6) {
    notifyParametersChanged(v3);
  }

  return v6;
}

void sub_1900EBEAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const void *AUAudioUnitProperties::infoForKey(AUAudioUnitProperties *this, NSString *a2)
{
  BOOL v2 = this;
  uint64_t v3 = CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFBooleanRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 8), v2);

  return Value;
}

void sub_1900EBF04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void notifyParametersChanged(AUAudioUnitV2Bridge *a1)
{
  BOOL v1 = a1;
  inParameter.mAudioUnit = v1->_audioUnit;
  inParameter.mParameterID = -1;
  AUParameterListenerNotify(0, 0, &inParameter);
  parameterListener = v1->_parameterListener;
  if (parameterListener) {
    AUEventListenerFlush(parameterListener);
  }
  eventListener = v1->_eventListener;
  if (eventListener) {
    AUEventListenerFlush(eventListener);
  }
}

void sub_1900EBF94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t dispatch_to_main_queue_with_timeout(uint64_t a1)
{
  if (!pthread_main_np())
  {
    uint64_t v3 = (char *)operator new(0xC0uLL);
    *((void *)v3 + 1) = 0;
    *((void *)v3 + 2) = 0;
    *(void *)uint64_t v3 = &unk_1EDFA2B28;
    *(_OWORD *)(v3 + 24) = 0u;
    *(_OWORD *)(v3 + 40) = 0u;
    *(_OWORD *)(v3 + 5std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0u;
    *(_OWORD *)(v3 + 72) = 0u;
    *(_OWORD *)(v3 + 88) = 0u;
    *(_OWORD *)(v3 + 104) = 0u;
    *(_OWORD *)(v3 + 120) = 0u;
    *(_OWORD *)(v3 + 13std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0u;
    *(_OWORD *)(v3 + 152) = 0u;
    *(_OWORD *)(v3 + 168) = 0u;
    *((void *)v3 + 23) = 0;
    caulk::semaphore::semaphore((caulk::semaphore *)(v3 + 24));
    *((void *)v3 + 11) = 850045863;
    *((void *)v3 + 5) = 1018212795;
    *((_OWORD *)v3 + 3) = 0u;
    *((_OWORD *)v3 + 4) = 0u;
    *((void *)v3 + 10) = 0;
    *((void *)v3 + 23) = 0;
    *((_OWORD *)v3 + std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0u;
    *((_OWORD *)v3 + 7) = 0u;
    *((_OWORD *)v3 + 8) = 0u;
    *(_OWORD *)(v3 + 138) = 0u;
    std::__function::__value_func<void ()(void)>::operator=[abi:ne180100]((void *)v3 + 20, a1);
    CFStringRef v4 = (void *)MEMORY[0x1E4F14428];
    id v5 = MEMORY[0x1E4F14428];
    atomic_fetch_add_explicit((atomic_ullong *volatile)v3 + 1, 1uLL, memory_order_relaxed);
    id v6 = v4;
    id v7 = v4;
    operator new();
  }
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
  return 1;
}

void sub_1900EC204(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t setStateAndNotify(__CFDictionary const*,AUAudioUnitV2Bridge *,unsigned int)::$_0::~$_0(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

uint64_t *std::unique_ptr<dispatch_to_main_queue_with_timeout(std::function<void ()(void)>)::$_0,std::default_delete<dispatch_to_main_queue_with_timeout(std::function<void ()(void)>)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    MEMORY[0x192FC8940](v2, 0x20C40A4A59CD2);
  }
  return a1;
}

uint64_t *applesauce::dispatch::v1::async<dispatch_to_main_queue_with_timeout(std::function<void ()(void)>)::$_0>(NSObject  {objcproto17OS_dispatch_queue}*,dispatch_to_main_queue_with_timeout(std::function<void ()(void)>)::$_0 &&)::{lambda(void *)#1}::__invoke(caulk::semaphore **a1)
{
  char v1 = 0;
  id v7 = a1;
  atomic_compare_exchange_strong((atomic_uchar *volatile)*a1 + 129, (unsigned __int8 *)&v1, 1u);
  if (!v1)
  {
    caulk::semaphore::signal(*a1);
    uint64_t v3 = (std::mutex *)((char *)*a1 + 64);
    std::mutex::lock(v3);
    uint64_t v4 = *((void *)*a1 + 20);
    if (!v4) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t))(*(void *)v4 + 48))(v4);
    id v5 = *a1;
    *((unsigned char *)v5 + 128) = 1;
    std::condition_variable::notify_one((std::condition_variable *)((char *)v5 + 16));
    std::mutex::unlock(v3);
  }
  return std::unique_ptr<dispatch_to_main_queue_with_timeout(std::function<void ()(void)>)::$_0,std::default_delete<dispatch_to_main_queue_with_timeout(std::function<void ()(void)>)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v7);
}

void sub_1900EC384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::mutex::unlock(v10);
  std::unique_ptr<dispatch_to_main_queue_with_timeout(std::function<void ()(void)>)::$_0,std::default_delete<dispatch_to_main_queue_with_timeout(std::function<void ()(void)>)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<dispatch_to_main_queue_with_timeout(std::function<void ()(void)>)::State,std::allocator<dispatch_to_main_queue_with_timeout(std::function<void ()(void)>)::State>>::__on_zero_shared(uint64_t a1)
{
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)(a1 + 160));
  std::mutex::~mutex((std::mutex *)(a1 + 88));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 40));
  JUMPOUT(0x192FC8070);
}

void std::__shared_ptr_emplace<dispatch_to_main_queue_with_timeout(std::function<void ()(void)>)::State,std::allocator<dispatch_to_main_queue_with_timeout(std::function<void ()(void)>)::State>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2B28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

void std::__shared_ptr_emplace<dispatch_to_main_queue_with_timeout(std::function<void ()(void)>)::State,std::allocator<dispatch_to_main_queue_with_timeout(std::function<void ()(void)>)::State>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2B28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__function::__func<setStateAndNotify(__CFDictionary const*,AUAudioUnitV2Bridge *,unsigned int)::$_0,std::allocator<setStateAndNotify(__CFDictionary const*,AUAudioUnitV2Bridge *,unsigned int)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t result = AudioUnitSetProperty(*(AudioUnit *)(*(void *)(a1 + 24) + 616), *(_DWORD *)(a1 + 32), 0, 0, (const void *)(a1 + 40), 8u);
  **(_DWORD **)(a1 + 8) = result;
  return result;
}

void std::__function::__func<setStateAndNotify(__CFDictionary const*,AUAudioUnitV2Bridge *,unsigned int)::$_0,std::allocator<setStateAndNotify(__CFDictionary const*,AUAudioUnitV2Bridge *,unsigned int)::$_0>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<setStateAndNotify(__CFDictionary const*,AUAudioUnitV2Bridge *,unsigned int)::$_0,std::allocator<setStateAndNotify(__CFDictionary const*,AUAudioUnitV2Bridge *,unsigned int)::$_0>,void ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__alloc_func<setStateAndNotify(__CFDictionary const*,AUAudioUnitV2Bridge *,unsigned int)::$_0,std::allocator<setStateAndNotify(__CFDictionary const*,AUAudioUnitV2Bridge *,unsigned int)::$_0>,void ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void std::__function::__func<setStateAndNotify(__CFDictionary const*,AUAudioUnitV2Bridge *,unsigned int)::$_0,std::allocator<setStateAndNotify(__CFDictionary const*,AUAudioUnitV2Bridge *,unsigned int)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
}

__n128 std::__function::__func<setStateAndNotify(__CFDictionary const*,AUAudioUnitV2Bridge *,unsigned int)::$_0,std::allocator<setStateAndNotify(__CFDictionary const*,AUAudioUnitV2Bridge *,unsigned int)::$_0>,void ()(void)>::__clone(uint64_t a1, __n128 *a2)
{
  unint64_t v5 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  a2->n128_u64[0] = (unint64_t)&unk_1EDF9E758;
  a2->n128_u64[1] = v5;
  a2[1].n128_u64[0] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  a2[1].n128_u64[1] = (unint64_t)*(id *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 32);
  a2[2] = result;
  return result;
}

void *std::__function::__func<setStateAndNotify(__CFDictionary const*,AUAudioUnitV2Bridge *,unsigned int)::$_0,std::allocator<setStateAndNotify(__CFDictionary const*,AUAudioUnitV2Bridge *,unsigned int)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x30uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *v2 = &unk_1EDF9E758;
  v2[1] = v4;
  v2[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  v2[3] = *(id *)(a1 + 24);
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  return v2;
}

void std::__function::__func<setStateAndNotify(__CFDictionary const*,AUAudioUnitV2Bridge *,unsigned int)::$_0,std::allocator<setStateAndNotify(__CFDictionary const*,AUAudioUnitV2Bridge *,unsigned int)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1EDF9E758;

  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  JUMPOUT(0x192FC8940);
}

uint64_t std::__function::__func<setStateAndNotify(__CFDictionary const*,AUAudioUnitV2Bridge *,unsigned int)::$_0,std::allocator<setStateAndNotify(__CFDictionary const*,AUAudioUnitV2Bridge *,unsigned int)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1EDF9E758;

  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void std::__shared_ptr_emplace<int>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2B60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

void std::__shared_ptr_emplace<int>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2B60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1900ECA50(_Unwind_Exception *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);

  _Unwind_Resume(a1);
}

id std::function<objc_object * ()(OpaqueAudioComponentInstance *,NSError * {__autoreleasing}*)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  if (!a1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v3 = (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)a1 + 48))(a1, &v6, &v5);
  return v3;
}

void sub_1900ECC8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1900ECD10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1900ECD80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1900ECEA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1900ECFBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void V2BridgePropertyListener(void *a1, OpaqueAudioComponentInstance *a2, unsigned int a3, int a4, unsigned int a5)
{
  unint64_t v13 = a1;
  uint64_t v8 = (CFDictionaryRef *)CADeprecated::TSingleton<AUAudioUnitProperties>::instance();
  CFBooleanRef Value = CFDictionaryGetValue(*v8, (const void *)a3);
  if (Value)
  {
    if (a4)
    {
      if (a4 == 1)
      {
        UInt32 v10 = &OBJC_IVAR___AUAudioUnitV2Bridge__inputBusses;
      }
      else
      {
        if (a4 != 2) {
          goto LABEL_10;
        }
        UInt32 v10 = &OBJC_IVAR___AUAudioUnitV2Bridge__outputBusses;
      }
      id v11 = [*(id *)&v13[*v10] objectAtIndexedSubscript:a5];
    }
    else
    {
      id v11 = v13;
    }
    uint64_t v12 = v11;
    [v11 willChangeValueForKey:Value[1]];
    [v12 didChangeValueForKey:Value[1]];
  }
LABEL_10:
}

void sub_1900ED0AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1900ED1E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1900ED3E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__9350(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__9351(uint64_t a1)
{
}

void sub_1900ED5E8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN10applesauce8dispatch2v19sync_implIZ36__AUAudioUnitV2Bridge_parameterTree_E3__5EEvPU28objcproto17OS_dispatch_queue8NSObjectOT_NSt3__117integral_constantIbLb1EEE_block_invoke(uint64_t a1)
{
  char v1 = *(id ***)(a1 + 32);
  uint64_t v2 = **v1;
  if (!v2[81])
  {
    if (([v2 renderResourcesAllocated] & 1) != 0
      || ([*v1[1] allParameters],
          uint64_t v3 = objc_claimAutoreleasedReturnValue(),
          uint64_t v4 = [v3 count],
          v3,
          v4))
    {
      objc_storeStrong((id *)**v1 + 81, *v1[1]);
      id v5 = **v1;
      uint64_t v6 = (OpaqueAudioComponentInstance *)*((void *)v5 + 77);
      id v7 = (AUListenerBase *)*((void *)v5 + 74);
      uint64_t v8 = (AUParameterTree *)*v1[1];
      addOrRemoveParameterListeners(v6, v7, v8, 1);
    }
  }
}

void sub_1900ED7C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void addOrRemoveParameterListeners(OpaqueAudioComponentInstance *a1, AUListenerBase *a2, AUParameterTree *a3, int a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  if (v7)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v14 = v7;
    uint64_t v8 = [(AUParameterGroup *)v7 allParameters];
    uint64_t v9 = [v8 countByEnumeratingWithState:&v17 objects:v21 count:16];
    if (v9)
    {
      uint64_t v10 = *(void *)v18;
      do
      {
        uint64_t v11 = 0;
        do
        {
          if (*(void *)v18 != v10) {
            objc_enumerationMutation(v8);
          }
          uint64_t v12 = *(void **)(*((void *)&v17 + 1) + 8 * v11);
          inParameter.mAudioUnit = a1;
          unint64_t v13 = [v12 address];
          inParameter.mScope = v13 >> 61;
          inParameter.mElement = HIDWORD(v13) & 0x1FFFFFFF;
          inParameter.mParameterID = v13;
          inEvent.mEventType = kAudioUnitEvent_BeginParameterChangeGesture;
          inEvent.mArgument.mParameter = inParameter;
          if (a4)
          {
            AUListenerAddParameter(a2, v12, &inParameter);
            AUEventListenerAddEventType(a2, v12, &inEvent);
            inEvent.mEventType = kAudioUnitEvent_EndParameterChangeGesture;
            AUEventListenerAddEventType(a2, v12, &inEvent);
          }
          else
          {
            AUListenerRemoveParameter(a2, v12, &inParameter);
            AUEventListenerRemoveEventType(a2, v12, &inEvent);
            inEvent.mEventType = kAudioUnitEvent_EndParameterChangeGesture;
            AUEventListenerRemoveEventType(a2, v12, &inEvent);
          }
          ++v11;
        }
        while (v9 != v11);
        uint64_t v9 = [v8 countByEnumeratingWithState:&v17 objects:v21 count:16];
      }
      while (v9);
    }

    id v7 = v14;
  }
}

void sub_1900ED998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_1900EE8CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46)
{
  _Unwind_Resume(a1);
}

void sub_1900EEAB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1900EEC2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1900EEDA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1900EEE58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1900EEEFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1900EF048(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterTreeBuilder::ClumpableParam *,false>(unint64_t i, uint64_t *a2, uint64_t a3, char a4)
{
void std::vector<ParameterTreeBuilder::ClumpableParam>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  char v1 = *a1;
  uint64_t v2 = (id *)**a1;
  if (v2)
  {
    char v4 = (id *)v1[1];
    char v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 3;

        char v4 = v6;
      }
      while (v6 != v2);
      char v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void ParameterTreeBuilder::buildClumpedElementNodes(unsigned int,std::vector<ParameterTreeBuilder::ClumpableParam> const&)::{lambda(void)#1}::operator()(unsigned int **a1)
{
  uint64_t v2 = a1[1];
  objc_msgSend(NSString, "stringWithFormat:", @"clump_%d", **a1);
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  outData[0] = **a1;
  outData[1] = -1;
  uint64_t v14 = 0;
  UInt32 ioDataSize = 16;
  OSStatus Property = AudioUnitGetProperty(*((AudioUnit *)v2 + 1), 0x23u, *a1[2], 0, outData, &ioDataSize);
  char v5 = v14;
  if (Property) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v14 == 0;
  }
  id v7 = v3;
  if (!v6)
  {

    id v7 = v5;
  }
  uint64_t v8 = +[AUParameterTree createGroupWithIdentifier:v3 name:v7 children:*(void *)a1[3]];
  [*(id *)a1[4] addObject:v8];
  uint64_t v9 = [objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:*(void *)a1[5]];
  uint64_t v10 = (void **)a1[3];
  unint64_t v11 = *v10;
  *uint64_t v10 = (void *)v9;
}

void sub_1900F0260(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL ParameterTreeBuilder::ClumpableParam::operator<(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 4);
  int v3 = *(unsigned __int8 *)(a2 + 4);
  if (*(unsigned char *)(a1 + 4)) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if (*(unsigned char *)(a2 + 4)) {
      BOOL v5 = v2 == 0;
    }
    else {
      BOOL v5 = 0;
    }
    if (v5) {
      return 1;
    }
    if ((v2 != 0) != (v3 != 0)) {
      return 0;
    }
    return *(_DWORD *)(a1 + 8) < *(_DWORD *)(a2 + 8);
  }
  if (*(_DWORD *)a1 < *(_DWORD *)a2) {
    return 1;
  }
  if (*(_DWORD *)a1 == *(_DWORD *)a2) {
    return *(_DWORD *)(a1 + 8) < *(_DWORD *)(a2 + 8);
  }
  return 0;
}

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<ParameterTreeBuilder::ClumpableParam *&,ParameterTreeBuilder::ClumpableParam *&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v8 = *a1;
  int v9 = *((_DWORD *)a1 + 2);
  uint64_t v3 = a1[2];
  a1[2] = 0;
  uint64_t v4 = *a2;
  *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
  *a1 = v4;
  uint64_t v5 = a2[2];
  a2[2] = 0;
  BOOL v6 = (void *)a1[2];
  a1[2] = v5;

  *a2 = v8;
  *((_DWORD *)a2 + 2) = v9;
  id v7 = (void *)a2[2];
  a2[2] = v3;
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterTreeBuilder::ClumpableParam *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  BOOL v6 = ParameterTreeBuilder::ClumpableParam::operator<((uint64_t)a2, (uint64_t)a1);
  BOOL v7 = ParameterTreeBuilder::ClumpableParam::operator<((uint64_t)a3, (uint64_t)a2);
  if (v6)
  {
    if (v7)
    {
      uint64_t v8 = a1;
    }
    else
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<ParameterTreeBuilder::ClumpableParam *&,ParameterTreeBuilder::ClumpableParam *&>(a1, a2);
      if (!ParameterTreeBuilder::ClumpableParam::operator<((uint64_t)a3, (uint64_t)a2)) {
        return;
      }
      uint64_t v8 = a2;
    }
    int v9 = a3;
  }
  else
  {
    if (!v7) {
      return;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<ParameterTreeBuilder::ClumpableParam *&,ParameterTreeBuilder::ClumpableParam *&>(a2, a3);
    if (!ParameterTreeBuilder::ClumpableParam::operator<((uint64_t)a2, (uint64_t)a1)) {
      return;
    }
    uint64_t v8 = a1;
    int v9 = a2;
  }
  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<ParameterTreeBuilder::ClumpableParam *&,ParameterTreeBuilder::ClumpableParam *&>(v8, v9);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterTreeBuilder::ClumpableParam *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterTreeBuilder::ClumpableParam *>(a1, a2, a3);
  if (ParameterTreeBuilder::ClumpableParam::operator<((uint64_t)a4, (uint64_t)a3))
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<ParameterTreeBuilder::ClumpableParam *&,ParameterTreeBuilder::ClumpableParam *&>(a3, a4);
    if (ParameterTreeBuilder::ClumpableParam::operator<((uint64_t)a3, (uint64_t)a2))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<ParameterTreeBuilder::ClumpableParam *&,ParameterTreeBuilder::ClumpableParam *&>(a2, a3);
      if (ParameterTreeBuilder::ClumpableParam::operator<((uint64_t)a2, (uint64_t)a1))
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<ParameterTreeBuilder::ClumpableParam *&,ParameterTreeBuilder::ClumpableParam *&>(a1, a2);
      }
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterTreeBuilder::ClumpableParam *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterTreeBuilder::ClumpableParam *>(a1, a2, a3, a4);
  if (ParameterTreeBuilder::ClumpableParam::operator<((uint64_t)a5, (uint64_t)a4))
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<ParameterTreeBuilder::ClumpableParam *&,ParameterTreeBuilder::ClumpableParam *&>(a4, a5);
    if (ParameterTreeBuilder::ClumpableParam::operator<((uint64_t)a4, (uint64_t)a3))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<ParameterTreeBuilder::ClumpableParam *&,ParameterTreeBuilder::ClumpableParam *&>(a3, a4);
      if (ParameterTreeBuilder::ClumpableParam::operator<((uint64_t)a3, (uint64_t)a2))
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<ParameterTreeBuilder::ClumpableParam *&,ParameterTreeBuilder::ClumpableParam *&>(a2, a3);
        if (ParameterTreeBuilder::ClumpableParam::operator<((uint64_t)a2, (uint64_t)a1))
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<ParameterTreeBuilder::ClumpableParam *&,ParameterTreeBuilder::ClumpableParam *&>(a1, a2);
        }
      }
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterTreeBuilder::ClumpableParam *>(uint64_t *a1, uint64_t *a2)
{
  int v2 = a2;
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (ParameterTreeBuilder::ClumpableParam::operator<((uint64_t)(a2 - 3), (uint64_t)a1)) {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<ParameterTreeBuilder::ClumpableParam *&,ParameterTreeBuilder::ClumpableParam *&>(a1, v2 - 3);
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterTreeBuilder::ClumpableParam *>(a1, a1 + 3, a2 - 3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterTreeBuilder::ClumpableParam *>(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterTreeBuilder::ClumpableParam *>(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return 1;
    default:
      uint64_t v6 = (uint64_t)(a1 + 6);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterTreeBuilder::ClumpableParam *>(a1, a1 + 3, a1 + 6);
      uint64_t v7 = (uint64_t)(a1 + 9);
      if (a1 + 9 == v2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      std::vector<char>::pointer v24 = v2;
      break;
  }
  while (2)
  {
    if (!ParameterTreeBuilder::ClumpableParam::operator<(v7, v6)) {
      goto LABEL_26;
    }
    unsigned int v10 = *(_DWORD *)v7;
    int v11 = *(unsigned __int8 *)(v7 + 4);
    __int16 v26 = *(_WORD *)(v7 + 5);
    char v27 = *(unsigned char *)(v7 + 7);
    unsigned int v12 = *(_DWORD *)(v7 + 8);
    uint64_t v13 = *(void *)(v7 + 16);
    *(void *)(v7 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
    *(_DWORD *)(v7 + 8) = *(_DWORD *)(v6 + 8);
    *(void *)uint64_t v7 = *(void *)v6;
    uint64_t v14 = *(void *)(v6 + 16);
    *(void *)(v6 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
    *(void *)(v7 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v14;
    uint64_t v15 = (uint64_t)a1;
    if ((uint64_t *)v6 == a1) {
      goto LABEL_25;
    }
    uint64_t v25 = v13;
    uint64_t v16 = v8;
    while (1)
    {
      long long v17 = (char *)a1 + v16;
      long long v18 = (unsigned int *)((char *)a1 + v16 + 24);
      if (!v11 || !*((unsigned char *)a1 + v16 + 28)) {
        break;
      }
      if (v10 >= *v18)
      {
        if (v10 != *v18) {
          goto LABEL_22;
        }
        goto LABEL_19;
      }
LABEL_20:
      v6 -= 24;
      *((void *)v17 + std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = *(void *)v18;
      *((_DWORD *)v17 + 14) = *(_DWORD *)((char *)a1 + v16 + 32);
      unsigned int v20 = (char *)a1 + v16;
      uint64_t v21 = *(uint64_t *)((char *)a1 + v16 + 40);
      *((void *)v20 + 5) = 0;
      unsigned int v22 = *(void **)((char *)a1 + v16 + 64);
      *((void *)v20 + 8) = v21;

      v16 -= 24;
      if (v16 == -48)
      {
        uint64_t v15 = (uint64_t)a1;
        goto LABEL_24;
      }
    }
    if (*((unsigned char *)a1 + v16 + 28)) {
      BOOL v19 = v11 == 0;
    }
    else {
      BOOL v19 = 0;
    }
    if (v19) {
      goto LABEL_20;
    }
    if ((v11 != 0) != (*((unsigned char *)a1 + v16 + 28) != 0))
    {
LABEL_22:
      uint64_t v15 = v6;
      goto LABEL_24;
    }
LABEL_19:
    if (v12 < *(_DWORD *)((char *)a1 + v16 + 32)) {
      goto LABEL_20;
    }
    uint64_t v15 = (uint64_t)a1 + v16 + 48;
LABEL_24:
    int v2 = v24;
    uint64_t v13 = v25;
LABEL_25:
    *(_DWORD *)uint64_t v15 = v10;
    *(unsigned char *)(v15 + 4) = v11;
    *(_WORD *)(v15 + 5) = v26;
    *(unsigned char *)(v15 + 7) = v27;
    *(_DWORD *)(v15 + 8) = v12;
    uint64_t v23 = *(void **)(v15 + 16);
    *(void *)(v15 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v13;

    if (++v9 != 8)
    {
LABEL_26:
      uint64_t v6 = v7;
      v8 += 24;
      v7 += 24;
      if ((uint64_t *)v7 == v2) {
        return 1;
      }
      continue;
    }
    return v7 + 24 == (void)v2;
  }
}

void std::vector<AUDependentParameter>::resize(char **a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  unint64_t v5 = (v3 - *a1) >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    uint64_t v16 = &v4[8 * a2];
    goto LABEL_20;
  }
  unint64_t v6 = a2 - v5;
  uint64_t v7 = a1[2];
  if (a2 - v5 <= (v7 - v3) >> 3)
  {
    bzero(a1[1], 8 * v6);
    uint64_t v16 = &v3[8 * v6];
LABEL_20:
    a1[1] = v16;
    return;
  }
  if (a2 >> 61) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = v7 - v4;
  uint64_t v9 = v8 >> 2;
  if (v8 >> 2 <= a2) {
    uint64_t v9 = a2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  if (v10 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  int v11 = (char *)operator new(8 * v10);
  unsigned int v12 = &v11[8 * v5];
  uint64_t v13 = &v11[8 * v10];
  bzero(v12, 8 * v6);
  uint64_t v14 = &v12[8 * v6];
  if (v3 != v4)
  {
    do
    {
      uint64_t v15 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v12 - 1) = v15;
      v12 -= 8;
    }
    while (v3 != v4);
    uint64_t v3 = *a1;
  }
  *a1 = v12;
  a1[1] = v14;
  a1[2] = v13;
  if (v3)
  {
    operator delete(v3);
  }
}

uint64_t std::__split_buffer<ParameterTreeBuilder::ClumpableParam>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = i - 24;
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1900F0C24(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1900F0DC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void AUAudioUnitV2Bridge_Renderer::prepareHostCallbacks(uint64_t a1, void *a2, void *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = a2;
  unint64_t v6 = a3;
  uint64_t v7 = caulk::inplace_function<BOOL ()(double *,double *,long *,double *,long *,double *),32ul,8ul,caulk::inplace_function_detail::vtable>::k_wrapper_vtable<BOOL({block_pointer} {__strong})(double *,double *,long *,double *,long *,double *)>;
  *(void *)&long long v11 = caulk::inplace_function<BOOL ()(double *,double *,long *,double *,long *,double *),32ul,8ul,caulk::inplace_function_detail::vtable>::k_wrapper_vtable<BOOL({block_pointer} {__strong})(double *,double *,long *,double *,long *,double *)>;
  *((void *)&v11 + 1) = _Block_copy((const void *)v5);
  if ((long long *)(a1 + 48) != &v11)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 48) + 24))(a1 + 56);
    uint64_t v8 = v11;
    *(void *)&long long v11 = &caulk::inplace_function_detail::vtable<BOOL,double *,double *,long *,double *,long *,double *>::empty;
    *(void *)(a1 + 48) = v8;
    (*(void (**)(void **, const void **))(v8 + 16))((void **)(a1 + 56), (const void **)&v11 + 1);
    uint64_t v7 = (uint64_t (**)())v11;
  }
  ((void (*)(char *))v7[3])((char *)&v11 + 8);
  *(void *)&long long v11 = caulk::inplace_function<BOOL ()(unsigned long *,double *,double *,double *),32ul,8ul,caulk::inplace_function_detail::vtable>::k_wrapper_vtable<BOOL({block_pointer} {__strong})(unsigned long *,double *,double *,double *)>;
  *((void *)&v11 + 1) = _Block_copy((const void *)v6);
  if ((long long *)(a1 + 88) == &v11)
  {
    unint64_t v10 = caulk::inplace_function<BOOL ()(unsigned long *,double *,double *,double *),32ul,8ul,caulk::inplace_function_detail::vtable>::k_wrapper_vtable<BOOL({block_pointer} {__strong})(unsigned long *,double *,double *,double *)>;
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 88) + 24))(a1 + 96);
    uint64_t v9 = v11;
    *(void *)&long long v11 = &caulk::inplace_function_detail::vtable<BOOL,unsigned long *,double *,double *,double *>::empty;
    *(void *)(a1 + 88) = v9;
    (*(void (**)(void **, const void **))(v9 + 16))((void **)(a1 + 96), (const void **)&v11 + 1);
    unint64_t v10 = (uint64_t (**)())v11;
  }
  ((void (*)(char *))v10[3])((char *)&v11 + 8);
  uint64_t v13 = 0;
  long long v11 = 0u;
  long long v12 = 0u;
  if (v5 | v6)
  {
    *(void *)&long long v11 = a1;
    *((void *)&v11 + 1) = AUAudioUnitV2Bridge_Renderer::beatAndTempoProc;
    *(void *)&long long v12 = AUAudioUnitV2Bridge_Renderer::musicalTimeLocationProc;
    *((void *)&v12 + 1) = AUAudioUnitV2Bridge_Renderer::transportStateProc;
    uint64_t v13 = AUAudioUnitV2Bridge_Renderer::transportStateProc2;
  }
  AudioUnitSetProperty(*(AudioUnit *)a1, 0x1Bu, 0, 0, &v11, 0x28u);
}

void sub_1900F0FC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t AUAudioUnitV2Bridge_Renderer::transportStateProc2(AUAudioUnitV2Bridge_Renderer *this, BOOL *a2, BOOL *a3, unsigned __int8 *a4, unsigned __int8 *a5, double *a6, unsigned __int8 *a7, double *a8, double *a9)
{
  uint64_t v15 = 0;
  uint64_t v9 = *((void *)this + 11);
  if (!*(unsigned char *)(v9 + 32)) {
    return 4294956433;
  }
  long long v18 = a5;
  BOOL v19 = &v15;
  uint64_t v16 = a8;
  long long v17 = a7;
  if (!(*(unsigned int (**)(char *, uint64_t **, unsigned __int8 **, unsigned __int8 **, double **))v9)((char *)this + 96, &v19, &v18, &v17, &v16))return 4294956433; {
  if (a2)
  }
    *a2 = (v15 & 2) != 0;
  if (a3) {
    *a3 = (v15 & 4) != 0;
  }
  if (a4) {
    *a4 = v15 & 1;
  }
  uint64_t result = 0;
  if (a6) {
    *(unsigned char *)a6 = (v15 & 8) != 0;
  }
  return result;
}

uint64_t AUAudioUnitV2Bridge_Renderer::transportStateProc(AUAudioUnitV2Bridge_Renderer *this, BOOL *a2, unsigned __int8 *a3, unsigned __int8 *a4, double *a5, unsigned __int8 *a6, double *a7, double *a8, double *a9)
{
  return AUAudioUnitV2Bridge_Renderer::transportStateProc2(this, a2, 0, a3, a4, a5, a6, a7, a9);
}

uint64_t AUAudioUnitV2Bridge_Renderer::musicalTimeLocationProc(AUAudioUnitV2Bridge_Renderer *this, _DWORD *a2, float *a3, float *a4, unsigned int *a5, double *a6)
{
  uint64_t v13 = 4;
  double v14 = 4.0;
  uint64_t v12 = 0;
  uint64_t v6 = *((void *)this + 6);
  if (!*(unsigned char *)(v6 + 32)) {
    return 4294956433;
  }
  BOOL v19 = &v14;
  uint64_t v20 = 0;
  uint64_t v17 = 0;
  long long v18 = &v13;
  uint64_t v15 = a5;
  uint64_t v16 = &v12;
  if (!(*(unsigned int (**)(char *, uint64_t *, double **, uint64_t **, uint64_t *, uint64_t **, unsigned int **))v6)((char *)this + 56, &v20, &v19, &v18, &v17, &v16, &v15))return 4294956433; {
  if (a3)
  }
  {
    float v10 = v14;
    *a3 = v10;
  }
  if (a4) {
    *(_DWORD *)a4 = v13;
  }
  uint64_t result = 0;
  if (a2) {
    *a2 = v12;
  }
  return result;
}

uint64_t AUAudioUnitV2Bridge_Renderer::beatAndTempoProc(AUAudioUnitV2Bridge_Renderer *this, void *a2, double *a3, double *a4)
{
  uint64_t v4 = *((void *)this + 6);
  uint64_t v5 = 4294956433;
  if (*(unsigned char *)(v4 + 32))
  {
    uint64_t v12 = a3;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = a2;
    uint64_t v7 = 0;
    if ((*(unsigned int (**)(char *, double **, uint64_t *, uint64_t *, void **, uint64_t *, uint64_t *))v4)((char *)this + 56, &v12, &v11, &v10, &v9, &v8, &v7))
    {
      return 0;
    }
    else
    {
      return 4294956433;
    }
  }
  return v5;
}

void caulk::inplace_function_detail::vtable<BOOL,unsigned long *,double *,double *,double *>::vtable(void)::{lambda(void *,unsigned long *&&,double *&&,unsigned long *&&,unsigned long *&&)#1}::__invoke()
{
  exception = __cxa_allocate_exception(8uLL);
}

void caulk::inplace_function_detail::vtable<BOOL,unsigned long *,double *,double *,double *>::vtable<BOOL({block_pointer} {__strong})(unsigned long *,double *,double *,double *)>(caulk::inplace_function_detail::wrapper<BOOL({block_pointer} {__strong})(unsigned long *,double *,double *,double *)>)::{lambda(void *)#1}::__invoke(id *a1)
{
}

void caulk::inplace_function_detail::vtable<BOOL,unsigned long *,double *,double *,double *>::vtable<BOOL({block_pointer} {__strong})(unsigned long *,double *,double *,double *)>(caulk::inplace_function_detail::wrapper<BOOL({block_pointer} {__strong})(unsigned long *,double *,double *,double *)>)::{lambda(void *,void *)#2}::__invoke(void **a1, const void **a2)
{
  *a1 = _Block_copy(*a2);
  uint64_t v3 = (void *)*a2;
}

void *caulk::inplace_function_detail::vtable<BOOL,unsigned long *,double *,double *,double *>::vtable<BOOL({block_pointer} {__strong})(unsigned long *,double *,double *,double *)>(caulk::inplace_function_detail::wrapper<BOOL({block_pointer} {__strong})(unsigned long *,double *,double *,double *)>)::{lambda(void *,void *)#1}::__invoke(void *a1, const void **a2)
{
  uint64_t result = _Block_copy(*a2);
  *a1 = result;
  return result;
}

uint64_t caulk::inplace_function_detail::vtable<BOOL,unsigned long *,double *,double *,double *>::vtable<BOOL({block_pointer} {__strong})(unsigned long *,double *,double *,double *)>(caulk::inplace_function_detail::wrapper<BOOL({block_pointer} {__strong})(unsigned long *,double *,double *,double *)>)::{lambda(void *,unsigned long *&&,double *&&,unsigned long *&&,unsigned long *&&)#1}::__invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

void caulk::inplace_function_detail::vtable<BOOL,double *,double *,long *,double *,long *,double *>::vtable(void)::{lambda(void *,double *&&,double *&,long *&&,double *&,double *&&,double *&)#1}::__invoke()
{
  exception = __cxa_allocate_exception(8uLL);
}

void caulk::inplace_function_detail::vtable<BOOL,double *,double *,long *,double *,long *,double *>::vtable<BOOL({block_pointer} {__strong})(double *,double *,long *,double *,long *,double *)>(caulk::inplace_function_detail::wrapper<BOOL({block_pointer} {__strong})(double *,double *,long *,double *,long *,double *)>)::{lambda(void *)#1}::__invoke(id *a1)
{
}

void caulk::inplace_function_detail::vtable<BOOL,double *,double *,long *,double *,long *,double *>::vtable<BOOL({block_pointer} {__strong})(double *,double *,long *,double *,long *,double *)>(caulk::inplace_function_detail::wrapper<BOOL({block_pointer} {__strong})(double *,double *,long *,double *,long *,double *)>)::{lambda(void *,void *)#2}::__invoke(void **a1, const void **a2)
{
  *a1 = _Block_copy(*a2);
  uint64_t v3 = (void *)*a2;
}

void *caulk::inplace_function_detail::vtable<BOOL,double *,double *,long *,double *,long *,double *>::vtable<BOOL({block_pointer} {__strong})(double *,double *,long *,double *,long *,double *)>(caulk::inplace_function_detail::wrapper<BOOL({block_pointer} {__strong})(double *,double *,long *,double *,long *,double *)>)::{lambda(void *,void *)#1}::__invoke(void *a1, const void **a2)
{
  uint64_t result = _Block_copy(*a2);
  *a1 = result;
  return result;
}

uint64_t caulk::inplace_function_detail::vtable<BOOL,double *,double *,long *,double *,long *,double *>::vtable<BOOL({block_pointer} {__strong})(double *,double *,long *,double *,long *,double *)>(caulk::inplace_function_detail::wrapper<BOOL({block_pointer} {__strong})(double *,double *,long *,double *,long *,double *)>)::{lambda(void *,double *&&,double *&,long *&&,double *&,double *&&,double *&)#1}::__invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

void sub_1900F14A4(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1900F1570(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1900F163C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1900F1704(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _auV2midiOutCallback(void *a1, const AudioTimeStamp *a2, unsigned __int8 a3, const MIDIPacketList *a4)
{
  if (!a1) {
    return 0;
  }
  uint64_t v7 = _Block_copy(a1);
  if ((int)a4->numPackets < 1)
  {
LABEL_6:
    uint64_t v10 = 0;
  }
  else
  {
    unint64_t packet = (unint64_t)a4->packet;
    UInt32 v9 = a4->numPackets + 1;
    while (1)
    {
      uint64_t v10 = (*((uint64_t (**)(void *, uint64_t, void, void, unint64_t))v7 + 2))(v7, (uint64_t)(a2->mSampleTime + (double)*(unint64_t *)packet), a3, *(unsigned __int16 *)(packet + 8), packet + 10);
      if (v10) {
        break;
      }
      unint64_t packet = (packet + *(unsigned __int16 *)(packet + 8) + 13) & 0xFFFFFFFFFFFFFFFCLL;
      if (--v9 <= 1) {
        goto LABEL_6;
      }
    }
  }

  return v10;
}

void sub_1900F17E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN28AUAudioUnitV2Bridge_Renderer11renderBlockEv_block_invoke(uint64_t a1, uint64_t a2, const AudioTimeStamp *a3, UInt32 a4, uint64_t a5, AudioBufferList *a6, uint64_t *a7, uint64_t a8)
{
  UInt32 v9 = a6;
  UInt32 v10 = a5;
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = *(void *)(a1 + 32);
  if (!a5)
  {
    uint64_t v15 = a7;
    if (a7)
    {
      signed int v16 = 0;
      uint64_t mSampleTime = (uint64_t)a3->mSampleTime;
      while (2)
      {
        switch(*((unsigned char *)v15 + 16))
        {
          case 1:
          case 2:
            long long v18 = &inParameterEvent[v16];
            unint64_t v19 = v15[3];
            unint64_t v20 = v19 >> 61;
            uint64_t v21 = HIDWORD(v19) & 0x1FFFFFFF;
            v18->scope = v19 >> 61;
            v18->element = v21;
            v18->parameter = v19;
            int v22 = *((unsigned __int8 *)v15 + 16);
            if (v22 == 2)
            {
              v18->eventType = kParameterEvent_Ramped;
              v18->eventValues.ramp.startBufferOffset = *((_DWORD *)v15 + 2) - mSampleTime;
              v18->eventValues.ramp.durationInFrames = *((_DWORD *)v15 + 5);
              AudioUnitParameterValue v24 = *((float *)v15 + 8);
              v18->eventValues.ramp.startCFBooleanRef Value = v24;
              v18->eventValues.ramp.endCFBooleanRef Value = v24;
              AudioUnitGetParameter(*(AudioUnit *)v14, v19, v20, v21, &v18->eventValues.ramp.startValue);
            }
            else if (v22 == 1)
            {
              if (*((_DWORD *)v15 + 9))
              {
                unint64_t v23 = v15[1];
                if (v23 >> 28 != 0xFFFFFFFE0) {
                  std::terminate();
                }
                AudioUnitSetParameter(*(AudioUnit *)v14, v19, v20, v21, *((AudioUnitParameterValue *)v15 + 8), v23);
                goto LABEL_18;
              }
              uint64_t v25 = &inParameterEvent[v16];
              v25->eventType = kParameterEvent_Immediate;
              v25->eventValues.ramp.startBufferOffset = *((_DWORD *)v15 + 2) - mSampleTime;
              v25->eventValues.ramp.durationInFrames = *((_DWORD *)v15 + 8);
            }
            if (++v16 != 16) {
              goto LABEL_18;
            }
            AudioUnitScheduleParameters(*(AudioUnit *)v14, inParameterEvent, 0x10u);
            signed int v16 = 0;
            uint64_t v15 = (uint64_t *)*v15;
            if (v15) {
              continue;
            }
            goto LABEL_21;
          case 8:
            MusicDeviceMIDIEvent(*(MusicDeviceComponent *)v14, *((unsigned __int8 *)v15 + 21), *((unsigned __int8 *)v15 + 22), *((unsigned __int8 *)v15 + 23), *((_DWORD *)v15 + 2) - mSampleTime);
            goto LABEL_18;
          case 9:
            MusicDeviceSysEx(*(MusicDeviceComponent *)v14, (const UInt8 *)v15 + 21, *((unsigned __int16 *)v15 + 9));
            goto LABEL_18;
          case 0xA:
            MusicDeviceMIDIEventList(*(MusicDeviceComponent *)v14, *((_DWORD *)v15 + 2) - mSampleTime, (const MIDIEventList *)((char *)v15 + 20));
            goto LABEL_18;
          default:
LABEL_18:
            uint64_t v15 = (uint64_t *)*v15;
            if (v15) {
              continue;
            }
            if (v16 > 0) {
              AudioUnitScheduleParameters(*(AudioUnit *)v14, inParameterEvent, v16);
            }
            break;
        }
        break;
      }
    }
LABEL_21:
    UInt32 v9 = a6;
  }
  if ((*(unsigned char *)(a2 + 1) & 0x80) != 0) {
    return 0;
  }
  __int16 v26 = caulk::inplace_function<int ()(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *),32ul,8ul,caulk::inplace_function_detail::vtable>::k_wrapper_vtable<int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *)>;
  *(void *)&inParameterEvent[0].scope = caulk::inplace_function<int ()(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *),32ul,8ul,caulk::inplace_function_detail::vtable>::k_wrapper_vtable<int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *)>;
  *(void *)&inParameterEvent[0].parameter = a8;
  if ((AudioUnitParameterEvent *)(v14 + 8) != inParameterEvent)
  {
    (*(void (**)(uint64_t))(*(void *)(v14 + 8) + 24))(v14 + 16);
    uint64_t v27 = *(void *)&inParameterEvent[0].scope;
    *(void *)&inParameterEvent[0].scope = &caulk::inplace_function_detail::vtable<int,unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *>::empty;
    *(void *)(v14 + 8) = v27;
    (*(void (**)(uint64_t, AudioUnitParameterID *))(v27 + 16))(v14 + 16, &inParameterEvent[0].parameter);
    __int16 v26 = *(uint64_t (***)())&inParameterEvent[0].scope;
  }
  ((void (*)(AudioUnitParameterID *))v26[3])(&inParameterEvent[0].parameter);
  return AudioUnitRender(*(AudioUnit *)v14, (AudioUnitRenderActionFlags *)a2, a3, v10, a4, v9);
}

void sub_1900F1C2C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void caulk::inplace_function_detail::vtable<int,unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *>::vtable(void)::{lambda(void *,unsigned int *&&,AudioTimeStamp const*&&,unsigned int &&,long &&,AudioBufferList *&&)#1}::__invoke()
{
  exception = __cxa_allocate_exception(8uLL);
}

void *_ZZN5caulk23inplace_function_detail6vtableIiJPjPK14AudioTimeStampjlP15AudioBufferListEEC1IU13block_pointerFiS2_S5_jlS7_EEENS0_7wrapperIT_EEENUlPvSG_E0_8__invokeESG_SG_(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

void *_ZZN5caulk23inplace_function_detail6vtableIiJPjPK14AudioTimeStampjlP15AudioBufferListEEC1IU13block_pointerFiS2_S5_jlS7_EEENS0_7wrapperIT_EEENUlPvSG_E_8__invokeESG_SG_(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t caulk::inplace_function_detail::vtable<int,unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *>::vtable<int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *)>(caulk::inplace_function_detail::wrapper<int({block_pointer})(unsigned int *,AudioTimeStamp const*,unsigned int,long,AudioBufferList *)>)::{lambda(void *,unsigned int *&&,AudioTimeStamp const*&&,unsigned int &&,long &&,AudioBufferList *&&)#1}::__invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

void sub_1900F1D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  UInt32 v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)AUAudioUnitV2Bridge;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1900F204C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN10applesauce8dispatch2v19sync_implIZ42__AUAudioUnitV2Bridge_invalidateAudioUnit_E3__3EEvPU28objcproto17OS_dispatch_queue8NSObjectOT_NSt3__117integral_constantIbLb1EEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t result = AUListenerDispose(*(AUParameterListenerRef *)(**(void **)v1 + 592));
  *(void *)(**(void **)v1 + 592) = 0;
  return result;
}

void ParameterListPropertyListener(void *a1, OpaqueAudioComponentInstance *a2, int a3)
{
  uint64_t v4 = a1;
  objc_initWeak(&location, v4);
  uint64_t v5 = [v4 scheduledParameterRefresher];
  objc_copyWeak(&to, &location);
  int v8 = a3;
  uint64_t v6 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
  *(_DWORD *)(v6 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
  *(void *)uint64_t v6 = &unk_1EDF96250;
  *(void *)(v6 + 8) = 0;
  objc_moveWeak((id *)(v6 + 24), &to);
  *(_DWORD *)(v6 + 32) = v8;
  *(void *)uint64_t v6 = &unk_1EDF962A0;
  caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)(v5 + 128), (caulk::concurrent::message *)v6);
  objc_destroyWeak(&to);
  objc_destroyWeak(&location);
}

void sub_1900F2264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, id location)
{
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<ParameterListPropertyListener(void *,OpaqueAudioComponentInstance *,unsigned int,unsigned int,unsigned int)::$_0>::perform(caulk::concurrent::message *a1)
{
  int v2 = a1;
  caulk::concurrent::details::message_call<ParameterListPropertyListener(void *,OpaqueAudioComponentInstance *,unsigned int,unsigned int,unsigned int)::$_0>::perform((uint64_t)a1);
  return caulk::concurrent::details::rt_message_call<ParameterListPropertyListener(void *,OpaqueAudioComponentInstance *,unsigned int,unsigned int,unsigned int)::$_0>::rt_cleanup::~rt_cleanup(&v2);
}

void sub_1900F22C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  caulk::concurrent::details::rt_message_call<ParameterListPropertyListener(void *,OpaqueAudioComponentInstance *,unsigned int,unsigned int,unsigned int)::$_0>::rt_cleanup::~rt_cleanup((caulk::concurrent::message **)va);
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::message_call<ParameterListPropertyListener(void *,OpaqueAudioComponentInstance *,unsigned int,unsigned int,unsigned int)::$_0>::perform(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 24));
  if (WeakRetained) {
    [WeakRetained _invalidateParameterTree:*(unsigned int *)(a1 + 32)];
  }
}

void sub_1900F232C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<ParameterListPropertyListener(void *,OpaqueAudioComponentInstance *,unsigned int,unsigned int,unsigned int)::$_0>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  int v2 = *a1;
  objc_destroyWeak((id *)*a1 + 3);
  caulk::concurrent::message::~message(v2);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], v2, 48, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<ParameterListPropertyListener(void *,OpaqueAudioComponentInstance *,unsigned int,unsigned int,unsigned int)::$_0>::~rt_message_call(id *a1)
{
  objc_destroyWeak(a1 + 3);
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  JUMPOUT(0x192FC8940);
}

{
  uint64_t vars8;

  objc_destroyWeak(a1 + 3);
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
}

void caulk::concurrent::details::message_call<ParameterListPropertyListener(void *,OpaqueAudioComponentInstance *,unsigned int,unsigned int,unsigned int)::$_0>::~message_call(id *a1)
{
  objc_destroyWeak(a1 + 3);
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  JUMPOUT(0x192FC8940);
}

{
  uint64_t vars8;

  objc_destroyWeak(a1 + 3);
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
}

void ElementCountPropertyListener(void *a1, OpaqueAudioComponentInstance *a2, uint64_t a3, uint64_t a4)
{
  id v6 = a1;
  if ((a4 - 1) <= 1)
  {
    [v6 _rebuildBusses:a4];
    [v6 _invalidateParameterTree:a3];
  }
}

void sub_1900F253C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1900F25FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1900F289C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v2 - 96), 8);

  _Unwind_Resume(a1);
}

void sub_1900F2B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void ___ZN10applesauce8dispatch2v19sync_implIZ48__AUAudioUnitV2Bridge__invalidateParameterTree__E3__2EEvPU28objcproto17OS_dispatch_queue8NSObjectOT_NSt3__117integral_constantIbLb1EEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(id ***)(a1 + 32);
  addOrRemoveParameterListeners(*((OpaqueAudioComponentInstance **)**v1 + 77), *((AUListenerBase **)**v1 + 74), *((AUParameterTree **)**v1 + 81), 0);
  objc_storeStrong((id *)**v1 + 81, *v1[1]);
  id v2 = **v1;
  uint64_t v3 = (OpaqueAudioComponentInstance *)*((void *)v2 + 77);
  uint64_t v4 = (AUListenerBase *)*((void *)v2 + 74);
  uint64_t v5 = (AUParameterTree *)*v1[1];
  addOrRemoveParameterListeners(v3, v4, v5, 1);
}

void sub_1900F2E20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void ___ZN10applesauce8dispatch2v19sync_implIZ45__AUAudioUnitV2Bridge__buildNewParameterTree_E3__0EEvPU28objcproto17OS_dispatch_queue8NSObjectOT_NSt3__117integral_constantIbLb1EEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void ****)(a1 + 32);
  uint64_t v2 = [*v1[1] _createParameterTree];
  uint64_t v3 = **v1;
  id **v1 = (void *)v2;

  uint64_t v4 = (void *)*((void *)*v1[1] + 81);
  if (v4 && parameterNodesEqual(**v1, v4, (uint64_t)v1[2]))
  {
    uint64_t v5 = **v1;
    id **v1 = 0;
  }
}

uint64_t parameterNodesEqual(void *a1, void *a2, uint64_t a3)
{
  id v5 = a1;
  id v6 = a2;
  uint64_t v7 = [v5 identifier];
  int v8 = [v6 identifier];
  id v9 = v7;
  id v10 = v8;
  uint64_t v11 = v10;
  if (v9 && v10) {
    char v12 = [v9 isEqualToString:v10];
  }
  else {
    char v12 = v9 == v10;
  }

  if (v12)
  {
    uint64_t v13 = [v5 displayName];
    uint64_t v14 = [v6 displayName];
    id v15 = v13;
    id v16 = v14;
    uint64_t v17 = v16;
    if (v15 && v16) {
      char v18 = [v15 isEqualToString:v16];
    }
    else {
      char v18 = v15 == v16;
    }

    if (v18)
    {
      objc_opt_class();
      int isKindOfClass = objc_opt_isKindOfClass();
      objc_opt_class();
      if (((isKindOfClass ^ objc_opt_isKindOfClass()) & 1) == 0)
      {
        if (isKindOfClass)
        {
          id v22 = [v5 children];
          id v23 = [v6 children];
          uint64_t v24 = [v22 count];
          if (v24 == [v23 count])
          {
            uint64_t v25 = [v23 count];
            if (v25)
            {
              uint64_t v26 = 0;
              do
              {
                uint64_t v27 = [v22 objectAtIndexedSubscript:v26];
                BOOL v28 = [v23 objectAtIndexedSubscript:v26];
                char v29 = parameterNodesEqual(v27, v28, a3);

                if ((v29 & 1) == 0) {
                  goto LABEL_29;
                }
              }
              while (v25 != ++v26);
            }
LABEL_20:
            uint64_t v20 = 1;
LABEL_30:

            goto LABEL_13;
          }
        }
        else
        {
          id v22 = v5;
          id v23 = v6;
          [v22 minValue];
          float v31 = v30;
          [v23 minValue];
          if (v31 == v32)
          {
            [v22 maxValue];
            float v34 = v33;
            [v23 maxValue];
            if (v34 == v35)
            {
              int v36 = [v22 unit];
              if (v36 == [v23 unit])
              {
                int v37 = [v22 flags];
                if (v37 == [v23 flags])
                {
                  uint64_t v38 = [v22 address];
                  if (v38 == [v23 address])
                  {
                    int v39 = [v22 unitName];
                    unsigned int v40 = [v23 unitName];
                    char v41 = equalStrings(v39, v40);

                    if (v41)
                    {
                      [v22 value];
                      float v43 = v42;
                      [v23 value];
                      if (v43 != v44)
                      {
                        uint64_t v45 = [v22 address];
                        std::vector<unsigned long long>::emplace_back<unsigned long long>(a3, &v45);
                      }
                      goto LABEL_20;
                    }
                  }
                }
              }
            }
          }
        }
LABEL_29:
        uint64_t v20 = 0;
        goto LABEL_30;
      }
    }
  }
  uint64_t v20 = 0;
LABEL_13:

  return v20;
}

void sub_1900F322C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t equalStrings(NSString *a1, NSString *a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = a2;
  id v5 = v4;
  if (v3 && v4) {
    uint64_t v6 = [(NSString *)v3 isEqualToString:v4];
  }
  else {
    uint64_t v6 = v3 == v4;
  }

  return v6;
}

void sub_1900F332C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<unsigned long long>::emplace_back<unsigned long long>(uint64_t a1, void *a2)
{
  id v5 = *(void **)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = *(void **)a1;
    uint64_t v8 = ((uint64_t)v5 - *(void *)a1) >> 3;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 2 > v9) {
      unint64_t v9 = v10 >> 2;
    }
    BOOL v11 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v9;
    }
    if (v12)
    {
      unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v12);
      uint64_t v7 = *(void **)a1;
      id v5 = *(void **)(a1 + 8);
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = (void *)(v12 + 8 * v8);
    unint64_t v15 = v12 + 8 * v13;
    *uint64_t v14 = *a2;
    uint64_t v6 = v14 + 1;
    while (v5 != v7)
    {
      uint64_t v16 = *--v5;
      *--uint64_t v14 = v16;
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v15;
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    *id v5 = *a2;
    uint64_t v6 = v5 + 1;
  }
  *(void *)(a1 + 8) = v6;
}

void sub_1900F3560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t AUAudioUnitV2Bridge_Renderer::renderInputProc(AUAudioUnitV2Bridge_Renderer *this, void *a2, unsigned int *a3, const AudioTimeStamp *a4, int a5, uint64_t a6, AudioBufferList *a7)
{
  uint64_t v7 = *((void *)this + 1);
  if (!*(unsigned char *)(v7 + 32)) {
    return 4294956420;
  }
  unint64_t v12 = a3;
  uint64_t v13 = a2;
  int v11 = a5;
  uint64_t v9 = a6;
  uint64_t v10 = a4;
  return (*(uint64_t (**)(char *, void **, unsigned int **, int *, uint64_t *, uint64_t *, AudioBufferList *))v7)((char *)this + 16, &v13, &v12, &v11, &v10, &v9, a7);
}

void sub_1900F377C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1900F398C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<long,void({block_pointer} {__strong})(unsigned int,AudioTimeStamp const*,unsigned int,long)>,std::__unordered_map_hasher<long,std::__hash_value_type<long,void({block_pointer} {__strong})(unsigned int,AudioTimeStamp const*,unsigned int,long)>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,void({block_pointer} {__strong})(unsigned int,AudioTimeStamp const*,unsigned int,long)>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,void({block_pointer} {__strong})(unsigned int,AudioTimeStamp const*,unsigned int,long)>>>::__deallocate_node(id *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      uint64_t v2 = (id *)*v1;

      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

void sub_1900F3E28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t AUHALOutputUnit_InputAvailableCallback(void (**a1)(void, void, void, void, void, void), unsigned int *a2, const AudioTimeStamp *a3, unsigned int a4, uint64_t a5, AudioBufferList *a6)
{
  if (a1) {
    ((void (**)(void, unsigned int *, const AudioTimeStamp *, uint64_t, void, AudioBufferList *))a1)[2](a1, a2, a3, a5, a4, a6);
  }
  return 0;
}

void sub_1900F3F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t AUHALOutputUnit_ProvideOutputCallback(uint64_t (**a1)(void, void, void, void, void, void), unsigned int *a2, const AudioTimeStamp *a3, unsigned int a4, uint64_t a5, AudioBufferList *a6)
{
  if (a1) {
    return ((uint64_t (**)(void, unsigned int *, const AudioTimeStamp *, uint64_t, void, AudioBufferList *))a1)[2](a1, a2, a3, a5, 0, a6);
  }
  else {
    return 4294956420;
  }
}

uint64_t AUHALOutputUnit_RenderNotifyCallback(void *a1, unsigned int *a2, const AudioTimeStamp *a3, unsigned int a4, uint64_t a5, AudioBufferList *a6)
{
  uint64_t v10 = _Block_copy(a1);
  int v11 = v10;
  if (v10) {
    (*((void (**)(void *, void, const AudioTimeStamp *, uint64_t, void))v10 + 2))(v10, *a2, a3, a5, a4);
  }

  return 0;
}

void sub_1900F4380(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1900F47CC(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long,void({block_pointer} {__strong})(unsigned int,AudioTimeStamp const*,unsigned int,long)>,void *>>>::operator()[abi:ne180100](1, v3);

  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long,void({block_pointer} {__strong})(unsigned int,AudioTimeStamp const*,unsigned int,long)>,void *>>>::operator()[abi:ne180100](char a1, id *a2)
{
  if (a1)
  {
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

void sub_1900F49B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1900F4A34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1900F4B14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t MP4GASpecificConfig::Serialize(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(unsigned __int8 *)(a1 + 20), 1u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(unsigned __int8 *)(a1 + 21), 1u);
  if (*(unsigned char *)(a1 + 21)) {
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 24), 0xEu);
  }
  int v4 = *(unsigned __int8 *)(a1 + 28);
  if (*(_DWORD *)(a1 + 8) != 23) {
    goto LABEL_6;
  }
  if (*(unsigned char *)(a1 + 28))
  {
    int v4 = 1;
LABEL_6:
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, v4, 1u);
    if (!*(_DWORD *)(a1 + 16)) {
      MP4AudioProgramConfig::Serialize(a1 + 32, a2);
    }
    if (*(unsigned char *)(a1 + 28))
    {
      int v5 = *(_DWORD *)(a1 + 8);
      if (v5 == 22)
      {
        AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 1136), 5u);
        AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 1140), 0xBu);
        int v5 = *(_DWORD *)(a1 + 8);
      }
      if (v5 == 23 || v5 == 17) {
        AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 1144) >> 1, 3u);
      }
      AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 1144) & 1, 1u);
    }
    return 0;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v7 = 136315394;
    uint64_t v8 = "MP4GASpecificConfig.cpp";
    __int16 v9 = 1024;
    int v10 = 128;
    _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  MP4GASpecificConfig::Serialize: extension flag must be set", (uint8_t *)&v7, 0x12u);
  }
  return 4294967090;
}

uint64_t MP4GASpecificConfig::SerializeCount(MP4GASpecificConfig *this)
{
  if (*((unsigned char *)this + 21)) {
    unsigned int v2 = 17;
  }
  else {
    unsigned int v2 = 3;
  }
  if (!*((_DWORD *)this + 4)) {
    v2 += MP4AudioProgramConfig::SerializeCount((MP4GASpecificConfig *)((char *)this + 32), v2);
  }
  int v3 = *((_DWORD *)this + 2);
  if (v3 == 20 || v3 == 6) {
    uint64_t result = v2 + 3;
  }
  else {
    uint64_t result = v2;
  }
  if (*((unsigned char *)this + 28))
  {
    int v6 = result + 16;
    if (v3 != 22) {
      int v6 = result;
    }
    if (v3 == 23 || v3 == 17) {
      v6 += 3;
    }
    return (v6 + 1);
  }
  return result;
}

uint64_t MP4GASpecificConfig::Deserialize(uint64_t a1, uint64_t a2)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)(a1 + 20) = TBitstreamReader<unsigned int>::GetBit(a2) != 0;
  int Bit = TBitstreamReader<unsigned int>::GetBit(a2);
  *(unsigned char *)(a1 + 21) = Bit != 0;
  if (Bit)
  {
    unsigned int v5 = *(_DWORD *)(a2 + 16);
    unsigned int v6 = v5 >> 18;
    int v7 = *(_DWORD *)(a2 + 20) - 14;
    *(_DWORD *)(a2 + 20) = v7;
    if (v7 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
      *(void *)a2 += 4;
      unsigned int v9 = *(_DWORD *)(a2 + 16);
      int v10 = *(_DWORD *)(a2 + 20);
      v6 |= v9 >> v10;
      *(_DWORD *)(a2 + 20) = v10 + 32;
      if (v10 == -32) {
        int v8 = 0;
      }
      else {
        int v8 = v9 << -(char)v10;
      }
    }
    else
    {
      int v8 = v5 << 14;
    }
    *(_DWORD *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v8;
    *(_DWORD *)(a1 + 24) = v6;
  }
  *(unsigned char *)(a1 + 28) = TBitstreamReader<unsigned int>::GetBit(a2) != 0;
  uint64_t v11 = (void *)(a1 + 32);
  if (*(_DWORD *)(a1 + 16))
  {
    bzero(v11, 0x44CuLL);
    int v12 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 3std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 1;
    *(_DWORD *)(a1 + 40) = v12;
LABEL_11:
    int v13 = *(_DWORD *)(a1 + 8);
    if (v13 == 20 || v13 == 6)
    {
      unsigned int v14 = *(_DWORD *)(a2 + 16);
      unsigned int v15 = v14 >> 29;
      int v16 = *(_DWORD *)(a2 + 20) - 3;
      *(_DWORD *)(a2 + 20) = v16;
      if (v16 < 0)
      {
        TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
        *(void *)a2 += 4;
        unsigned int v18 = *(_DWORD *)(a2 + 16);
        int v19 = *(_DWORD *)(a2 + 20);
        v15 |= v18 >> v19;
        *(_DWORD *)(a2 + 20) = v19 + 32;
        if (v19 == -32) {
          int v17 = 0;
        }
        else {
          int v17 = v18 << -(char)v19;
        }
      }
      else
      {
        int v17 = 8 * v14;
      }
      *(_DWORD *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v17;
      *(_DWORD *)(a1 + 1132) = v15;
    }
    if (!*(unsigned char *)(a1 + 28)) {
      return 0;
    }
    int v21 = *(_DWORD *)(a1 + 8);
    if (v21 != 22) {
      goto LABEL_37;
    }
    unsigned int v22 = *(_DWORD *)(a2 + 16);
    unsigned int v23 = v22 >> 27;
    int v24 = *(_DWORD *)(a2 + 20) - 5;
    *(_DWORD *)(a2 + 20) = v24;
    if (v24 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
      uint64_t v26 = (unsigned int *)(*(void *)a2 + 4);
      *(void *)a2 = v26;
      unsigned int v27 = *(_DWORD *)(a2 + 16);
      int v28 = *(_DWORD *)(a2 + 20);
      v23 |= v27 >> v28;
      int v24 = v28 + 32;
      if (v28 == -32)
      {
        unsigned int v29 = 0;
        *(_DWORD *)(a1 + 113std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v23;
        *(void *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0xFFFFFFF500000000;
        goto LABEL_33;
      }
      unsigned int v25 = v27 << -(char)v28;
    }
    else
    {
      unsigned int v25 = 32 * v22;
    }
    *(_DWORD *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v25;
    *(_DWORD *)(a1 + 113std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v23;
    unsigned int v29 = v25 >> 21;
    int v30 = v24 - 11;
    *(_DWORD *)(a2 + 20) = v30;
    if (v30 >= 0)
    {
      unsigned int v31 = v25 << 11;
LABEL_36:
      *(_DWORD *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v31;
      *(_DWORD *)(a1 + 1140) = v29;
      int v21 = *(_DWORD *)(a1 + 8);
LABEL_37:
      if (v21 == 23 || v21 == 17)
      {
        unsigned int v34 = *(_DWORD *)(a2 + 16);
        unsigned int v35 = v34 >> 29;
        int v36 = *(_DWORD *)(a2 + 20) - 3;
        *(_DWORD *)(a2 + 20) = v36;
        if (v36 < 0)
        {
          TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
          *(void *)a2 += 4;
          unsigned int v38 = *(_DWORD *)(a2 + 16);
          int v39 = *(_DWORD *)(a2 + 20);
          v35 |= v38 >> v39;
          *(_DWORD *)(a2 + 20) = v39 + 32;
          if (v39 == -32) {
            int v37 = 0;
          }
          else {
            int v37 = v38 << -(char)v39;
          }
        }
        else
        {
          int v37 = 8 * v34;
        }
        *(_DWORD *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v37;
        *(_DWORD *)(a1 + 1144) = 2 * v35;
      }
      int v40 = TBitstreamReader<unsigned int>::GetBit(a2);
      uint64_t result = 0;
      *(_DWORD *)(a1 + 1144) |= v40;
      return result;
    }
    uint64_t v26 = *(unsigned int **)a2;
LABEL_33:
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, v26);
    *(void *)a2 += 4;
    unsigned int v32 = *(_DWORD *)(a2 + 16);
    int v33 = *(_DWORD *)(a2 + 20);
    v29 |= v32 >> v33;
    *(_DWORD *)(a2 + 20) = v33 + 32;
    if (v33 == -32) {
      unsigned int v31 = 0;
    }
    else {
      unsigned int v31 = v32 << -(char)v33;
    }
    goto LABEL_36;
  }
  MP4AudioProgramConfig::Deserialize((unsigned int *)v11, a2);
  if (*(_DWORD *)(a1 + 40) == *(_DWORD *)(a1 + 12)) {
    goto LABEL_11;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v41 = 136315394;
    float v42 = "MP4GASpecificConfig.cpp";
    __int16 v43 = 1024;
    int v44 = 35;
    _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  MP4GASpecificConfig::Deserialize: the Program sampleRate is incorrect", (uint8_t *)&v41, 0x12u);
  }
  return 4294967090;
}

void MP4GASpecificConfig::~MP4GASpecificConfig(MP4GASpecificConfig *this)
{
}

void CompressedPacketTable::~CompressedPacketTable(CompressedPacketTable *this)
{
  unsigned int v2 = (void *)*((void *)this + 1);
  if (v2 != *(void **)this)
  {
    if ((unint64_t)(((uint64_t)v2 - *(void *)this) / 24) <= 1) {
      uint64_t v3 = 1;
    }
    else {
      uint64_t v3 = ((uint64_t)v2 - *(void *)this) / 24;
    }
    uint64_t v4 = 16;
    do
    {
      free(*(void **)(*(void *)this + v4));
      v4 += 24;
      --v3;
    }
    while (v3);
    unsigned int v2 = *(void **)this;
  }
  if (v2)
  {
    *((void *)this + 1) = v2;
    operator delete(v2);
  }
}

void CompressedPacketTable::push_back(char **a1, long long *a2)
{
  unint64_t v4 = (unint64_t)a1[3];
  if ((a1[3] & 0x1F) == 0)
  {
    unsigned int v5 = malloc_type_malloc(0x300uLL, 0x7C51E058uLL);
    if (!v5) {
      goto LABEL_77;
    }
    unsigned int v6 = v5;
    int v8 = a1[1];
    unint64_t v7 = (unint64_t)a1[2];
    if ((unint64_t)v8 >= v7)
    {
      int v10 = *a1;
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v8 - *a1) >> 3);
      unint64_t v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)v10) >> 3);
      if (2 * v13 > v12) {
        unint64_t v12 = 2 * v13;
      }
      if (v13 >= 0x555555555555555) {
        unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14)
      {
        if (v14 > 0xAAAAAAAAAAAAAAALL) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unsigned int v15 = (char *)operator new(24 * v14);
      }
      else
      {
        unsigned int v15 = 0;
      }
      int v16 = &v15[24 * v11];
      *(void *)int v16 = 0;
      v16[8] = 6;
      *((void *)v16 + 2) = v6;
      unsigned int v9 = v16 + 24;
      if (v8 != v10)
      {
        do
        {
          long long v17 = *(_OWORD *)(v8 - 24);
          *((void *)v16 - 1) = *((void *)v8 - 1);
          *(_OWORD *)(v16 - 24) = v17;
          v16 -= 24;
          v8 -= 24;
        }
        while (v8 != v10);
        int v8 = *a1;
      }
      *a1 = v16;
      a1[1] = v9;
      a1[2] = &v15[24 * v14];
      if (v8) {
        operator delete(v8);
      }
    }
    else
    {
      *(void *)int v8 = 0;
      v8[8] = 6;
      *((void *)v8 + 2) = v5;
      unsigned int v9 = v8 + 24;
    }
    a1[1] = v9;
  }
  unint64_t v18 = v4 >> 5;
  int v19 = *a1;
  uint64_t v20 = (uint64_t)&(*a1)[24 * (v4 >> 5)];
  uint64_t v22 = *(void *)(v20 + 16);
  uint64_t v21 = v20 + 16;
  long long v23 = *a2;
  uint64_t v24 = v22 + 24 * (v4 & 0x1F);
  *(void *)(v24 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = *((void *)a2 + 2);
  *(_OWORD *)uint64_t v24 = v23;
  if ((v4 & 0x1F) == 0x1F)
  {
    uint64_t v25 = *(void *)v21;
    if (!*(_DWORD *)(*(void *)v21 + 8))
    {
      uint64_t v26 = (unint64_t *)&v19[24 * v18];
      unint64_t v27 = -1;
      uint64_t v28 = 32;
      do
      {
        if (v27 == 30) {
          goto LABEL_27;
        }
        int v29 = *(_DWORD *)(v25 + v28);
        ++v27;
        v28 += 24;
      }
      while (!v29);
      if (v27 >= 0x1F)
      {
LABEL_27:
        unint64_t v30 = *(void *)v25;
        uint64_t v31 = *(void *)v25 + *(unsigned int *)(v25 + 12);
        if (v31 == *(void *)(v25 + 24))
        {
          unint64_t v32 = 0;
          int v33 = (unsigned int *)(v25 + 36);
          while (v32 != 30)
          {
            v31 += *v33;
            uint64_t v34 = *(void *)(v33 + 3);
            ++v32;
            v33 += 6;
            if (v31 != v34) {
              goto LABEL_35;
            }
          }
          unint64_t v32 = 31;
LABEL_35:
          BOOL v36 = v32 > 0x1E;
          uint64_t v35 = *(void *)(v25 + 744) - v30 + *(unsigned int *)(v25 + 756);
          *uint64_t v26 = v30;
          if (v35 < 0x10000)
          {
            if (v32 >= 0x1F)
            {
              int v37 = (char *)malloc_type_malloc(0x40uLL, 0x7C51E058uLL);
              if (v37)
              {
                uint64_t v38 = 0;
                *(void *)uint64_t v21 = v37;
                v19[24 * v18 + 8] = 0;
                int64x2_t v39 = vdupq_n_s64(v30);
                uint64_t v40 = v25 + 96;
                do
                {
                  v41.i64[0] = *(void *)(v40 - 48);
                  v41.i64[1] = *(void *)(v40 - 24);
                  v42.i64[0] = *(void *)(v40 - 96);
                  v42.i64[1] = *(void *)(v40 - 72);
                  v43.i64[0] = *(void *)(v40 + 48);
                  v43.i64[1] = *(void *)(v40 + 72);
                  v44.i64[0] = *(void *)v40;
                  v44.i64[1] = *(void *)(v40 + 24);
                  v45.i32[0] = *(_DWORD *)(v40 + 12);
                  v45.i32[1] = *(_DWORD *)(v40 + 36);
                  v46.i32[0] = *(_DWORD *)(v40 + 60);
                  v46.i32[1] = *(_DWORD *)(v40 + 84);
                  v47.i32[0] = *(_DWORD *)(v40 - 84);
                  v47.i32[1] = *(_DWORD *)(v40 - 60);
                  v48.i32[0] = *(_DWORD *)(v40 - 36);
                  v48.i32[1] = *(_DWORD *)(v40 - 12);
                  *(int16x8_t *)&v37[v38] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vaddw_u32((uint64x2_t)vsubq_s64(v42, v39), v47), (int32x4_t)vaddw_u32((uint64x2_t)vsubq_s64(v41, v39), v48)), (int16x8_t)vuzp1q_s32((int32x4_t)vaddw_u32((uint64x2_t)vsubq_s64(v44, v39), v45), (int32x4_t)vaddw_u32((uint64x2_t)vsubq_s64(v43, v39), v46)));
                  v38 += 16;
                  v40 += 192;
                }
                while (v38 != 64);
LABEL_75:
                free((void *)v25);
                goto LABEL_76;
              }
              goto LABEL_77;
            }
LABEL_50:
            uint64_t v59 = (char *)malloc_type_malloc(0x80uLL, 0x7C51E058uLL);
            if (v59)
            {
              uint64_t v60 = 0;
              *(void *)uint64_t v21 = v59;
              v19[24 * v18 + 8] = 1;
              do
              {
                if (v60 == 31)
                {
                  LOWORD(v61) = 0;
                  uint64_t v62 = 32;
                }
                else
                {
                  uint64_t v62 = v60 + 1;
                  int v61 = *(_DWORD *)(v25 + 24 * (v60 + 1)) - v30;
                }
                uint64_t v63 = &v59[4 * v60];
                *(_WORD *)uint64_t v63 = v61;
                *((_WORD *)v63 + 1) = *(_DWORD *)(v25 + 24 * v60 + 12);
                uint64_t v60 = v62;
              }
              while (v62 != 32);
              goto LABEL_75;
            }
            goto LABEL_77;
          }
        }
        else
        {
          uint64_t v35 = *(void *)(v25 + 744) - v30 + *(unsigned int *)(v25 + 756);
          *uint64_t v26 = v30;
          if (v35 < 0x10000) {
            goto LABEL_50;
          }
          BOOL v36 = 0;
        }
        unint64_t v49 = HIDWORD(v35);
        if (HIDWORD(v35)) {
          goto LABEL_57;
        }
        uint32x2_t v50 = 0;
        do
        {
          v51.i32[0] = *(_DWORD *)(v25 + v49 + 12);
          v51.i32[1] = *(_DWORD *)(v25 + v49 + 36);
          uint32x2_t v50 = vmax_u32(v51, v50);
          v49 += 48;
        }
        while (v49 != 768);
        if (HIWORD(vpmax_u32(v50, v50).u32[0]))
        {
LABEL_57:
          if (v36)
          {
            uint64_t v64 = (char *)malloc_type_malloc(0x100uLL, 0x7C51E058uLL);
            if (v64)
            {
              uint64_t v65 = 0;
              *(void *)uint64_t v21 = v64;
              v19[24 * v18 + 8] = 4;
              int64x2_t v66 = vdupq_n_s64(v30);
              uint64_t v67 = v25 + 24;
              do
              {
                v68.i64[0] = *(void *)(v67 - 24);
                v68.i64[1] = *(void *)v67;
                v69.i32[0] = *(_DWORD *)(v67 - 12);
                v69.i32[1] = *(_DWORD *)(v67 + 12);
                *(uint64x2_t *)&v64[v65] = vaddw_u32((uint64x2_t)vsubq_s64(v68, v66), v69);
                v65 += 16;
                v67 += 48;
              }
              while (v65 != 256);
              goto LABEL_75;
            }
          }
          else
          {
            uint64_t v70 = (char *)malloc_type_malloc(0x200uLL, 0x7C51E058uLL);
            if (v70)
            {
              uint64_t v71 = 0;
              *(void *)uint64_t v21 = v70;
              v19[24 * v18 + 8] = 5;
              do
              {
                if (v71 == 31)
                {
                  unint64_t v72 = 0;
                  uint64_t v73 = 32;
                }
                else
                {
                  uint64_t v73 = v71 + 1;
                  unint64_t v72 = *(void *)(v25 + 24 * (v71 + 1)) - v30;
                }
                uint64_t v74 = &v70[16 * v71];
                *(void *)uint64_t v74 = v72;
                *((_DWORD *)v74 + 2) = *(_DWORD *)(v25 + 24 * v71 + 12);
                uint64_t v71 = v73;
              }
              while (v73 != 32);
              goto LABEL_75;
            }
          }
        }
        else if (v36)
        {
          int v52 = (char *)malloc_type_malloc(0x80uLL, 0x7C51E058uLL);
          if (v52)
          {
            uint64_t v53 = 0;
            *(void *)uint64_t v21 = v52;
            v19[24 * v18 + 8] = 2;
            int64x2_t v54 = vdupq_n_s64(v30);
            uint64_t v55 = v25 + 48;
            do
            {
              v56.i64[0] = *(void *)(v55 - 48);
              v56.i64[1] = *(void *)(v55 - 24);
              v57.i64[0] = *(void *)v55;
              v57.i64[1] = *(void *)(v55 + 24);
              v58.i32[0] = *(_DWORD *)(v55 - 36);
              v58.i32[1] = *(_DWORD *)(v55 - 12);
              v58.i32[2] = *(_DWORD *)(v55 + 12);
              v58.i32[3] = *(_DWORD *)(v55 + 36);
              *(int32x4_t *)&v52[v53] = vaddq_s32(v58, vuzp1q_s32((int32x4_t)vsubq_s64(v56, v54), (int32x4_t)vsubq_s64(v57, v54)));
              v53 += 16;
              v55 += 96;
            }
            while (v53 != 128);
            goto LABEL_75;
          }
        }
        else
        {
          BOOL v75 = (char *)malloc_type_malloc(0x100uLL, 0x7C51E058uLL);
          if (v75)
          {
            uint64_t v76 = 0;
            *(void *)uint64_t v21 = v75;
            v19[24 * v18 + 8] = 3;
            do
            {
              if (v76 == 31)
              {
                int v77 = 0;
                uint64_t v78 = 32;
              }
              else
              {
                uint64_t v78 = v76 + 1;
                int v77 = *(_DWORD *)(v25 + 24 * (v76 + 1)) - v30;
              }
              long long v79 = &v75[8 * v76];
              *(_DWORD *)long long v79 = v77;
              *((_WORD *)v79 + 2) = *(_DWORD *)(v25 + 24 * v76 + 12);
              uint64_t v76 = v78;
            }
            while (v78 != 32);
            goto LABEL_75;
          }
        }
LABEL_77:
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        int64_t v81 = std::bad_alloc::bad_alloc(exception);
      }
    }
  }
LABEL_76:
  ++a1[3];
}

uint64_t CompressedPacketTable::operator[](uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a3 >> 5;
  uint64_t v4 = *a2;
  if (a3 >> 5 >= 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3))
  {
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -1;
    __cxa_throw(exception, MEMORY[0x1E4FBA3A8], 0);
  }
  uint64_t v5 = v4 + 24 * v3;
  int v6 = a3 & 0x1F;
  switch(*(unsigned char *)(v5 + 8))
  {
    case 0:
      uint64_t v7 = *(void *)(v4 + 24 * v3 + 16);
      if ((a3 & 0x1F) != 0) {
        uint64_t v8 = *(unsigned __int16 *)(v7 + 2 * (v6 - 1));
      }
      else {
        uint64_t v8 = 0;
      }
      int v17 = *(unsigned __int16 *)(v7 + 2 * (a3 & 0x1F));
      goto LABEL_21;
    case 1:
      uint64_t v13 = *(void *)(v4 + 24 * v3 + 16);
      if ((a3 & 0x1F) != 0) {
        uint64_t v8 = *(unsigned __int16 *)(v13 + 4 * (v6 - 1));
      }
      else {
        uint64_t v8 = 0;
      }
      int v9 = *(unsigned __int16 *)(v13 + 4 * (a3 & 0x1F) + 2);
      goto LABEL_30;
    case 2:
      uint64_t v10 = *(void *)(v4 + 24 * v3 + 16);
      if ((a3 & 0x1F) != 0) {
        uint64_t v8 = *(unsigned int *)(v10 + 4 * (v6 - 1));
      }
      else {
        uint64_t v8 = 0;
      }
      int v17 = *(_DWORD *)(v10 + 4 * (a3 & 0x1F));
LABEL_21:
      int v9 = v17 - v8;
      goto LABEL_30;
    case 3:
      uint64_t v11 = *(void *)(v4 + 24 * v3 + 16);
      if ((a3 & 0x1F) != 0) {
        uint64_t v8 = *(unsigned int *)(v11 + 8 * (v6 - 1));
      }
      else {
        uint64_t v8 = 0;
      }
      int v9 = *(unsigned __int16 *)(v11 + 8 * (a3 & 0x1F) + 4);
      goto LABEL_30;
    case 4:
      uint64_t v12 = *(void *)(v4 + 24 * v3 + 16);
      if ((a3 & 0x1F) != 0) {
        uint64_t v8 = *(void *)(v12 + 8 * (v6 - 1));
      }
      else {
        uint64_t v8 = 0;
      }
      int v9 = *(void *)(v12 + 8 * (a3 & 0x1F)) - v8;
      goto LABEL_30;
    case 5:
      uint64_t v14 = *(void *)(v4 + 24 * v3 + 16);
      if ((a3 & 0x1F) != 0) {
        uint64_t v8 = *(void *)(v14 + 16 * (v6 - 1));
      }
      else {
        uint64_t v8 = 0;
      }
      int v9 = *(_DWORD *)(v14 + 16 * (a3 & 0x1F) + 8);
      goto LABEL_30;
    case 6:
      uint64_t v15 = *(void *)(v4 + 24 * v3 + 16) + 24 * (a3 & 0x1F);
      *(_OWORD *)uint64_t result = *(_OWORD *)v15;
      uint64_t v16 = *(void *)(v15 + 16);
      goto LABEL_31;
    default:
      uint64_t v8 = 0;
      int v9 = 0;
LABEL_30:
      *(void *)uint64_t result = *(void *)v5 + v8;
      *(_DWORD *)(result + 8) = 0;
      *(_DWORD *)(result + 12) = v9;
      uint64_t v16 = *((unsigned int *)a2 + 8) + *((unsigned int *)a2 + 8) * a3;
LABEL_31:
      *(void *)(result + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v16;
      return result;
  }
}

uint64_t MP4BoxParser_SampleToGroupCompact::GetSampleToGroupTable(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a1 + 96);
  unint64_t v4 = v3 + (*(_DWORD *)(a1 + 104) - v3);
  if ((v3 & 3) != 0)
  {
    int v5 = 0;
    char v6 = v3 ^ 3;
    unint64_t v7 = v3 + 1;
    int v8 = 8 * ((v3 ^ 3) & 3) + 8;
    int v9 = *(unsigned __int8 **)(a1 + 96);
    do
    {
      if ((unint64_t)v9 >= v4) {
        int v10 = 255;
      }
      else {
        int v10 = *v9;
      }
      int v5 = v10 | (v5 << 8);
      ++v9;
      BOOL v49 = (v7++ & 3) == 0;
    }
    while (!v49);
    uint64_t v11 = (unsigned int *)(v3 + (v6 & 3) + 1);
    unsigned int v12 = v5 << ((8 * (v6 & 3)) ^ 0x18);
  }
  else
  {
    unsigned int v12 = 0;
    int v8 = 0;
    uint64_t v11 = *(unsigned int **)(a1 + 96);
  }
  uint64_t v13 = *(uint64_t **)a2;
  *(void *)(a2 + 8) = *(void *)a2;
  if (*(unsigned char *)(a1 + 60))
  {
    unsigned int v14 = *(_DWORD *)(a1 + 92);
    if (v14)
    {
      unsigned int v15 = 0;
      unsigned int v16 = 0;
      uint64_t v87 = a2;
      unint64_t v78 = v4;
      unint64_t v79 = v3;
      do
      {
        int v17 = *(_DWORD *)(a1 + 80);
        if ((v17 - 33) >= 0xFFFFFFE0)
        {
          unsigned int v18 = v12 >> -(char)v17;
          v8 -= v17;
          if (v8 < 0)
          {
            if (((v4 - v11) & ~((uint64_t)(v4 - (void)v11) >> 63) & 0xFFFFFFFC) != 0
              && v3 <= (unint64_t)v11)
            {
              unsigned int v12 = bswap32(*v11);
            }
            else
            {
              uint64_t v19 = 0;
              do
              {
                uint64_t v20 = (unsigned __int8 *)v11 + v19;
                int v21 = 255;
                if ((unint64_t)v11 + v19 < v4 && (unint64_t)v20 >= v3) {
                  int v21 = *v20;
                }
                unsigned int v12 = v21 | (v12 << 8);
                ++v19;
              }
              while (v19 != 4);
            }
            ++v11;
            v18 |= v12 >> v8;
            if (v8 == -32) {
              unsigned int v12 = 0;
            }
            else {
              v12 <<= -(char)v8;
            }
            if (v8 == -32) {
              int v8 = 0;
            }
            else {
              v8 += 32;
            }
          }
          else
          {
            v12 <<= v17;
          }
        }
        else
        {
          unsigned int v18 = 0;
        }
        int v22 = *(_DWORD *)(a1 + 84);
        if ((v22 - 33) >= 0xFFFFFFE0)
        {
          unsigned int v23 = v12 >> -(char)v22;
          v8 -= v22;
          if (v8 < 0)
          {
            if (((v4 - v11) & ~((uint64_t)(v4 - (void)v11) >> 63) & 0xFFFFFFFC) != 0
              && v3 <= (unint64_t)v11)
            {
              unsigned int v12 = bswap32(*v11);
            }
            else
            {
              uint64_t v24 = 0;
              do
              {
                uint64_t v25 = (unsigned __int8 *)v11 + v24;
                int v26 = 255;
                if ((unint64_t)v11 + v24 < v4 && (unint64_t)v25 >= v3) {
                  int v26 = *v25;
                }
                unsigned int v12 = v26 | (v12 << 8);
                ++v24;
              }
              while (v24 != 4);
            }
            ++v11;
            v23 |= v12 >> v8;
            if (v8 == -32) {
              unsigned int v12 = 0;
            }
            else {
              v12 <<= -(char)v8;
            }
            if (v8 == -32) {
              int v8 = 0;
            }
            else {
              v8 += 32;
            }
          }
          else
          {
            v12 <<= v22;
          }
        }
        else
        {
          unsigned int v23 = 0;
        }
        unsigned int v27 = *(_DWORD *)(a1 + 88);
        if (v27 == 4) {
          unsigned int v28 = ((v18 - 1) >> 1) + 1;
        }
        else {
          unsigned int v28 = (v27 >> 3) * v18;
        }
        uint64_t v29 = *(void *)(a1 + 120);
        unint64_t v30 = v28 + v16;
        if (*(void *)(a1 + 128) - v29 >= v30)
        {
          unint64_t v31 = v29 + v16;
          unint64_t v32 = v31 + v28;
          if ((v31 & 3) == 0)
          {
            int v39 = 0;
            unsigned int v40 = 0;
            BOOL v36 = (unsigned int *)(v29 + v16);
            if (!v23) {
              goto LABEL_153;
            }
LABEL_63:
            int v80 = v30;
            unsigned int v81 = v15;
            unsigned int v82 = v12;
            uint64_t v83 = v11;
            int v41 = 0;
            int v42 = 8 * v28;
            unsigned int v86 = v23;
            int v84 = v8;
            int v85 = 8 * v28;
            while (2)
            {
              int v43 = *(_DWORD *)(a1 + 88);
              if ((v43 - 33) >= 0xFFFFFFE0)
              {
                uint64_t v44 = v40 >> -(char)v43;
                v39 -= v43;
                if (v39 < 0)
                {
                  if (((v32 - v36) & ~((uint64_t)(v32 - (void)v36) >> 63) & 0xFFFFFFFC) != 0
                    && v31 <= (unint64_t)v36)
                  {
                    unsigned int v40 = bswap32(*v36);
                  }
                  else
                  {
                    uint64_t v45 = 0;
                    do
                    {
                      uint32x2_t v46 = (unsigned __int8 *)v36 + v45;
                      int v47 = 255;
                      if ((unint64_t)v36 + v45 < v32 && (unint64_t)v46 >= v31) {
                        int v47 = *v46;
                      }
                      unsigned int v40 = v47 | (v40 << 8);
                      ++v45;
                    }
                    while (v45 != 4);
                  }
                  unsigned int v48 = v40 << -(char)v39;
                  BOOL v49 = v39 == -32;
                  ++v36;
                  uint64_t v44 = (v40 >> v39) | v44;
                  if (v39 == -32) {
                    int v39 = 0;
                  }
                  else {
                    v39 += 32;
                  }
                  if (v49) {
                    unsigned int v40 = 0;
                  }
                  else {
                    unsigned int v40 = v48;
                  }
                }
                else
                {
                  v40 <<= v43;
                }
              }
              else
              {
                uint64_t v44 = 0;
              }
              if (*(unsigned char *)(a1 + 78) && ((v44 >> (v43 - 1)) & 1) != 0)
              {
                int v50 = v44 & (0x7FFFFFFFu >> -(char)v43);
                if (v50)
                {
                  uint64_t v44 = v50 | 0x10000u;
                  *(unsigned char *)(a1 + 77) = 1;
                }
                else
                {
                  uint64_t v44 = 0;
                }
              }
              else if (v44)
              {
                *(unsigned char *)(a1 + 7std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 1;
              }
              uint32x2_t v51 = *(uint64_t **)a2;
              uint64_t v52 = ((uint64_t)v13 - *(void *)a2) >> 3;
              if (v13 == *(uint64_t **)a2 || HIDWORD(v51[v52 - 1]) != v44)
              {
                unint64_t v53 = *(void *)(a2 + 16);
                if ((unint64_t)v13 >= v53)
                {
                  if ((unint64_t)(v52 + 1) >> 61) {
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v54 = a1;
                  uint64_t v55 = v53 - (void)v51;
                  uint64_t v56 = v55 >> 2;
                  if (v55 >> 2 <= (unint64_t)(v52 + 1)) {
                    uint64_t v56 = v52 + 1;
                  }
                  if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v57 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v57 = v56;
                  }
                  if (v57)
                  {
                    unint64_t v57 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v57);
                    a2 = v87;
                  }
                  else
                  {
                    uint64_t v58 = 0;
                  }
                  uint64_t v59 = (uint64_t *)(v57 + 8 * v52);
                  *uint64_t v59 = (v44 << 32) | 1;
                  uint64_t v13 = v59 + 1;
                  int v61 = *(uint64_t **)a2;
                  uint64_t v60 = *(uint64_t **)(a2 + 8);
                  if (v60 != *(uint64_t **)a2)
                  {
                    do
                    {
                      uint64_t v62 = *--v60;
                      *--uint64_t v59 = v62;
                    }
                    while (v60 != v61);
                    uint64_t v60 = *(uint64_t **)a2;
                  }
                  *(void *)a2 = v59;
                  *(void *)(a2 + 8) = v13;
                  *(void *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v57 + 8 * v58;
                  if (v60)
                  {
                    uint64_t v63 = v13;
                    operator delete(v60);
                    uint64_t v13 = v63;
                    a2 = v87;
                  }
                  a1 = v54;
                  int v42 = v85;
                  unsigned int v23 = v86;
                }
                else
                {
                  *v13++ = (v44 << 32) | 1;
                }
                *(void *)(a2 + 8) = v13;
              }
              else
              {
                ++LODWORD(v51[v52 - 1]);
              }
              if (++v41 % v18)
              {
LABEL_111:
                if (v41 == v23)
                {
                  unsigned int v14 = *(_DWORD *)(a1 + 92);
                  unint64_t v4 = v78;
                  unint64_t v3 = v79;
                  int v8 = v84;
                  uint64_t v11 = v83;
                  unsigned int v15 = v81;
                  unsigned int v12 = v82;
                  LODWORD(v30) = v80;
                  goto LABEL_153;
                }
                continue;
              }
              break;
            }
            unsigned int v64 = 8 * (v32 - v36);
            uint64_t v65 = (unsigned int *)((char *)v36 + ((v32 - (void)v36) & 0x1FFFFFFC));
            if (v64 >= 0x20) {
              v64 &= 0x18u;
            }
            else {
              uint64_t v65 = v36;
            }
            if ((int)v32 - (int)v36 < 1)
            {
              unsigned int v66 = v39 + 8 * (v32 - v36);
            }
            else
            {
              int v39 = 0;
              unsigned int v40 = 0;
              BOOL v36 = v65;
              unsigned int v66 = v64;
            }
            if (v66 - 33 < 0xFFFFFFE0)
            {
LABEL_122:
              if (!v42) {
                goto LABEL_111;
              }
            }
            else
            {
              v39 -= v66;
              if (v39 >= 0)
              {
                v40 <<= v66;
                goto LABEL_122;
              }
              if (((v32 - v36) & ~((uint64_t)(v32 - (void)v36) >> 63) & 0xFFFFFFFC) != 0
                && v31 <= (unint64_t)v36)
              {
                unsigned int v40 = bswap32(*v36);
              }
              else
              {
                uint64_t v72 = 0;
                do
                {
                  uint64_t v73 = (unsigned __int8 *)v36 + v72;
                  int v74 = 255;
                  if ((unint64_t)v36 + v72 < v32 && (unint64_t)v73 >= v31) {
                    int v74 = *v73;
                  }
                  unsigned int v40 = v74 | (v40 << 8);
                  ++v72;
                }
                while (v72 != 4);
              }
              unsigned int v75 = v40 << -(char)v39;
              BOOL v76 = v39 == -32;
              ++v36;
              if (v39 == -32) {
                int v39 = 0;
              }
              else {
                v39 += 32;
              }
              if (v76) {
                unsigned int v40 = 0;
              }
              else {
                unsigned int v40 = v75;
              }
              if (!v42) {
                goto LABEL_111;
              }
            }
            BOOL v36 = (unsigned int *)((char *)v36 - (((v39 + v42) >> 3) & 0x1FFFFFFC));
            int v39 = (v39 + v42) & 0x1F;
            if (v39)
            {
              uint64_t v67 = v36 - 1;
              if (((v32 - (v36 - 4)) & ~((uint64_t)(v32 - (void)(v36 - 1)) >> 63) & 0xFFFFFFFC) == 0
                || v31 > (unint64_t)v67)
              {
                uint64_t v69 = -4;
                do
                {
                  uint64_t v70 = (unsigned __int8 *)v36 + v69;
                  int v71 = 255;
                  if ((unint64_t)v36 + v69 < v32 && (unint64_t)v70 >= v31) {
                    int v71 = *v70;
                  }
                  unsigned int v40 = v71 | (v40 << 8);
                  ++v69;
                }
                while (v69);
              }
              else
              {
                unsigned int v40 = bswap32(*v67);
              }
              v40 <<= -(char)v39;
            }
            else
            {
              unsigned int v40 = 0;
            }
            goto LABEL_111;
          }
          int v33 = 0;
          uint64_t v34 = v29 + v16 + 1;
          int v35 = -8;
          BOOL v36 = (unsigned int *)v31;
          do
          {
            int v37 = v35;
            if ((unint64_t)v36 >= v32) {
              int v38 = 255;
            }
            else {
              int v38 = *(unsigned __int8 *)v36;
            }
            int v33 = v38 | (v33 << 8);
            BOOL v36 = (unsigned int *)((char *)v36 + 1);
            int v35 = v37 + 8;
            BOOL v49 = (v34++ & 3) == 0;
          }
          while (!v49);
          int v39 = v37 + 16;
          unsigned int v40 = v33 << (16 - v37);
          if (v23) {
            goto LABEL_63;
          }
        }
LABEL_153:
        ++v15;
        unsigned int v16 = v30;
      }
      while (v15 < v14);
    }
  }
  return 0;
}

uint64_t MP4BoxParser_SampleToGroupCompact::Init(MP4BoxParser_SampleToGroupCompact *this)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  uint64_t DataSourceBytes = MP4BoxParser_Full::Initialize(this);
  if (DataSourceBytes) {
    return DataSourceBytes;
  }
  if (*((_DWORD *)this + 5) != 1668507504) {
    return 4294967294;
  }
  uint64_t v3 = (*(unsigned int (**)(MP4BoxParser_SampleToGroupCompact *))(*(void *)this + 24))(this);
  unsigned int v63 = 0;
  unsigned int v4 = *((unsigned __int8 *)this + 59);
  *((unsigned char *)this + 78) = *((unsigned char *)this + 59) >> 7;
  *((unsigned char *)this + 68) = (v4 & 0x40) != 0;
  int32x2_t v5 = vdup_n_s32(v4);
  v6.i32[0] = v4;
  v6.i32[0] = vshr_n_u32(v6, 1uLL).u32[0];
  v6.i32[1] = vadd_s32(v5, v5).i32[1];
  *((int8x8_t *)this + 10) = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(0x20100804u), (uint32x2_t)vneg_s32((int32x2_t)vand_s8((int8x8_t)v6, (int8x8_t)0x1800000018))), (int8x8_t)0x3C0000003CLL);
  *((_DWORD *)this + 22) = (0x20100804u >> (8 * (v4 & 3))) & 0x3C;
  unint64_t v7 = *((void *)this + 3);
  unsigned int v8 = (*(uint64_t (**)(MP4BoxParser_SampleToGroupCompact *))(*(void *)this + 24))(this);
  unint64_t v9 = *((void *)this + 3);
  if (v7 > v8 && v9 >= 4)
  {
    unsigned int v62 = 0;
    uint64_t DataSourceBytes = MP4BoxParser::ReadDataSourceBytes(*((MP4BoxParser **)this + 1), v3, 4uLL, &v62);
    if (DataSourceBytes)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        return DataSourceBytes;
      }
      *(_DWORD *)AudioFormatInfo buf = 136315394;
      uint64_t v65 = "MP4_BoxParser_SampleToGroupCompact.cpp";
      __int16 v66 = 1024;
      int v67 = 169;
      uint64_t v11 = MEMORY[0x1E4F14500];
      unsigned int v12 = "%25s:%-5d  couldn't read grouping type";
LABEL_11:
      _os_log_impl(&dword_18FEC0000, v11, OS_LOG_TYPE_ERROR, v12, buf, 0x12u);
      return DataSourceBytes;
    }
    *((_DWORD *)this + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = bswap32(v62);
    v3 += 4;
    unint64_t v9 = *((void *)this + 3);
  }
  if (*((unsigned char *)this + 68)) {
    unint64_t v13 = 12;
  }
  else {
    unint64_t v13 = 8;
  }
  if (v9 <= (*(unsigned int (**)(MP4BoxParser_SampleToGroupCompact *))(*(void *)this + 24))(this)
    || *((void *)this + 3) < v13)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioFormatInfo buf = 136315394;
      uint64_t v65 = "MP4_BoxParser_SampleToGroupCompact.cpp";
      __int16 v66 = 1024;
      int v67 = 179;
      unsigned int v14 = MEMORY[0x1E4F14500];
      unsigned int v15 = "%25s:%-5d  'csgp' box is too small for its basic contents";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  if (*((unsigned char *)this + 68))
  {
    unsigned int v62 = 0;
    uint64_t DataSourceBytes = MP4BoxParser::ReadDataSourceBytes(*((MP4BoxParser **)this + 1), v3, 4uLL, &v62);
    if (DataSourceBytes)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        return DataSourceBytes;
      }
      *(_DWORD *)AudioFormatInfo buf = 136315394;
      uint64_t v65 = "MP4_BoxParser_SampleToGroupCompact.cpp";
      __int16 v66 = 1024;
      int v67 = 186;
      uint64_t v11 = MEMORY[0x1E4F14500];
      unsigned int v12 = "%25s:%-5d  couldn't read grouping type parameter";
      goto LABEL_11;
    }
    *((_DWORD *)this + 18) = bswap32(v62);
    v3 += 4;
  }
  uint64_t DataSourceBytes = MP4BoxParser::ReadDataSourceBytes(*((MP4BoxParser **)this + 1), v3, 4uLL, &v63);
  if (DataSourceBytes)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return DataSourceBytes;
    }
    *(_DWORD *)AudioFormatInfo buf = 136315394;
    uint64_t v65 = "MP4_BoxParser_SampleToGroupCompact.cpp";
    __int16 v66 = 1024;
    int v67 = 192;
    uint64_t v11 = MEMORY[0x1E4F14500];
    unsigned int v12 = "%25s:%-5d  Couldn't read compact sample to group pattern count";
    goto LABEL_11;
  }
  unsigned int v17 = bswap32(v63);
  *((_DWORD *)this + 23) = v17;
  int v18 = *((_DWORD *)this + 20);
  int v19 = *((_DWORD *)this + 21);
  if (v18 == 4)
  {
    if (v19 != 4) {
      goto LABEL_34;
    }
  }
  else if (v19 == 4)
  {
LABEL_34:
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioFormatInfo buf = 136315394;
      uint64_t v65 = "MP4_BoxParser_SampleToGroupCompact.cpp";
      __int16 v66 = 1024;
      int v67 = 198;
      unsigned int v14 = MEMORY[0x1E4F14500];
      unsigned int v15 = "%25s:%-5d  if either pattern size or count size is 4 bits, the other must be 4 bits also";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  unint64_t v20 = v17 * (unint64_t)((v19 + v18) >> 3);
  if ((v20 & 0xFFFFFFFF00000000) != 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioFormatInfo buf = 136315394;
      uint64_t v65 = "MP4_BoxParser_SampleToGroupCompact.cpp";
      __int16 v66 = 1024;
      int v67 = 201;
      unsigned int v14 = MEMORY[0x1E4F14500];
      unsigned int v15 = "%25s:%-5d  total pattern spec byte count is too large";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  unint64_t v21 = *((void *)this + 3);
  if (v21 <= (*(unsigned int (**)(MP4BoxParser_SampleToGroupCompact *))(*(void *)this + 24))(this)
    || (unint64_t v22 = v13 + v20, *((void *)this + 3) < v22))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioFormatInfo buf = 136315394;
      uint64_t v65 = "MP4_BoxParser_SampleToGroupCompact.cpp";
      __int16 v66 = 1024;
      int v67 = 204;
      unsigned int v14 = MEMORY[0x1E4F14500];
      unsigned int v15 = "%25s:%-5d  'csgp' box is too small for its pattern lengths and sample counts";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  uint64_t v23 = v20;
  uint64_t v24 = (char *)*((void *)this + 12);
  unint64_t v25 = *((void *)this + 13) - (void)v24;
  if (v20 <= v25)
  {
    if (v20 < v25) {
      *((void *)this + 13) = &v24[v20];
    }
  }
  else
  {
    std::vector<unsigned char>::__append((std::vector<char> *)this + 4, v20 - v25);
    uint64_t v24 = (char *)*((void *)this + 12);
  }
  uint64_t v26 = v3 + 4;
  uint64_t DataSourceBytes = MP4BoxParser::ReadDataSourceBytes(*((MP4BoxParser **)this + 1), v26, v20, v24);
  if (DataSourceBytes)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return DataSourceBytes;
    }
    *(_DWORD *)AudioFormatInfo buf = 136315394;
    uint64_t v65 = "MP4_BoxParser_SampleToGroupCompact.cpp";
    __int16 v66 = 1024;
    int v67 = 209;
    uint64_t v11 = MEMORY[0x1E4F14500];
    unsigned int v12 = "%25s:%-5d  Couldn't read compact sample to group pattern specs";
    goto LABEL_11;
  }
  unsigned int v27 = *((_DWORD *)this + 23);
  if (v27)
  {
    unint64_t v28 = *((void *)this + 12);
    unint64_t v29 = v28 + (*((_DWORD *)this + 26) - v28);
    if ((v28 & 3) != 0)
    {
      int v30 = 0;
      unint64_t v31 = v28 + 1;
      int v32 = 8 * ((v28 ^ 3) & 3);
      int v33 = v32 + 8;
      uint64_t v34 = (unsigned __int8 *)*((void *)this + 12);
      do
      {
        if ((unint64_t)v34 >= v29) {
          int v35 = 255;
        }
        else {
          int v35 = *v34;
        }
        int v30 = v35 | (v30 << 8);
        ++v34;
      }
      while ((v31++ & 3) != 0);
      int v37 = (unsigned int *)(v28 + ((v28 ^ 3) & 3) + 1);
      unsigned int v38 = v30 << (v32 ^ 0x18);
      unsigned int v39 = v38;
    }
    else
    {
      int v33 = 0;
      unsigned int v38 = 0;
      unsigned int v39 = 0;
      int v37 = (unsigned int *)*((void *)this + 12);
    }
    int v41 = 0;
    LODWORD(v40) = 0;
    int v42 = *((_DWORD *)this + 20);
    if (v27 <= 1) {
      unsigned int v27 = 1;
    }
    while (1)
    {
      if ((v42 - 33) < 0xFFFFFFE0) {
        goto LABEL_108;
      }
      unsigned int v43 = v38 >> (32 - v42);
      v33 -= v42;
      int v44 = v33;
      if (v33 < 0)
      {
        if (((*((_DWORD *)this + 26) - v37) & ~((uint64_t)(v29 - (void)v37) >> 63) & 0xFFFFFFFC) == 0
          || v28 > (unint64_t)v37)
        {
          uint64_t v46 = 0;
          int v47 = v39;
          do
          {
            unsigned int v48 = (unsigned __int8 *)v37 + v46;
            int v49 = 255;
            if ((unint64_t)v37 + v46 < v29 && (unint64_t)v48 >= v28) {
              int v49 = *v48;
            }
            int v47 = (v47 << 8) | v49;
            unsigned int v50 = v47;
            ++v46;
          }
          while (v46 != 4);
        }
        else
        {
          unsigned int v50 = bswap32(*v37);
        }
        ++v37;
        v43 |= v50 >> v44;
        int v33 = v44 + 32;
        unsigned int v38 = v44 == -32 ? 0 : v50 << -(char)v44;
      }
      else
      {
        v38 <<= v42;
      }
      if (!v43)
      {
LABEL_108:
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_22;
        }
        *(_DWORD *)AudioFormatInfo buf = 136315394;
        uint64_t v65 = "MP4_BoxParser_SampleToGroupCompact.cpp";
        __int16 v66 = 1024;
        int v67 = 219;
        unsigned int v14 = MEMORY[0x1E4F14500];
        unsigned int v15 = "%25s:%-5d  zero pattern length prohibited";
        goto LABEL_21;
      }
      unsigned int v51 = *((_DWORD *)this + 22);
      if (v51 == 4)
      {
        LODWORD(v52) = ((v43 - 1) >> 1) + 1;
      }
      else
      {
        unint64_t v52 = v43 * (unint64_t)(v51 >> 3);
        if ((v52 & 0xFFFFFFFF00000000) != 0)
        {
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_22;
          }
          *(_DWORD *)AudioFormatInfo buf = 136315394;
          uint64_t v65 = "MP4_BoxParser_SampleToGroupCompact.cpp";
          __int16 v66 = 1024;
          int v67 = 228;
          unsigned int v14 = MEMORY[0x1E4F14500];
          unsigned int v15 = "%25s:%-5d  pattern too long";
LABEL_21:
          _os_log_impl(&dword_18FEC0000, v14, OS_LOG_TYPE_ERROR, v15, buf, 0x12u);
          goto LABEL_22;
        }
      }
      if (__CFADD__(v40, v52))
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_22;
        }
        *(_DWORD *)AudioFormatInfo buf = 136315394;
        uint64_t v65 = "MP4_BoxParser_SampleToGroupCompact.cpp";
        __int16 v66 = 1024;
        int v67 = 231;
        unsigned int v14 = MEMORY[0x1E4F14500];
        unsigned int v15 = "%25s:%-5d  total pattern byte count is too large";
        goto LABEL_21;
      }
      unsigned int v39 = v38;
      int v53 = *((_DWORD *)this + 21);
      if ((v53 - 33) >= 0xFFFFFFE0)
      {
        v33 -= v53;
        int v54 = v33;
        if (v33 < 0)
        {
          if (((v29 - v37) & ~((uint64_t)(v29 - (void)v37) >> 63) & 0xFFFFFFFC) != 0
            && v28 <= (unint64_t)v37)
          {
            unsigned int v55 = bswap32(*v37);
          }
          else
          {
            uint64_t v56 = 0;
            do
            {
              unint64_t v57 = (unsigned __int8 *)v37 + v56;
              int v58 = 255;
              if ((unint64_t)v37 + v56 < v29 && (unint64_t)v57 >= v28) {
                int v58 = *v57;
              }
              unsigned int v38 = (v38 << 8) | v58;
              unsigned int v55 = v38;
              ++v56;
            }
            while (v56 != 4);
          }
          ++v37;
          if (v54 == -32) {
            unsigned int v38 = 0;
          }
          else {
            unsigned int v38 = v55 << -(char)v54;
          }
          if (v54 == -32) {
            int v33 = 0;
          }
          else {
            int v33 = v54 + 32;
          }
        }
        else
        {
          v38 <<= v53;
        }
        unsigned int v39 = v38;
      }
      unint64_t v40 = (v52 + v40);
      if (++v41 == v27) {
        goto LABEL_104;
      }
    }
  }
  unint64_t v40 = 0;
LABEL_104:
  unint64_t v59 = *((void *)this + 3);
  if (v59 <= (*(unsigned int (**)(MP4BoxParser_SampleToGroupCompact *))(*(void *)this + 24))(this)
    || *((void *)this + 3) < v22 + v40)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioFormatInfo buf = 136315394;
      uint64_t v65 = "MP4_BoxParser_SampleToGroupCompact.cpp";
      __int16 v66 = 1024;
      int v67 = 239;
      unsigned int v14 = MEMORY[0x1E4F14500];
      unsigned int v15 = "%25s:%-5d  'csgp' box is too small to contain its patterns";
      goto LABEL_21;
    }
LABEL_22:
    uint64_t DataSourceBytes = 0;
    *((unsigned char *)this + 60) = 0;
    return DataSourceBytes;
  }
  uint64_t v60 = (char *)*((void *)this + 15);
  unint64_t v61 = *((void *)this + 16) - (void)v60;
  if (v40 <= v61)
  {
    if (v40 < v61) {
      *((void *)this + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = &v60[v40];
    }
  }
  else
  {
    std::vector<unsigned char>::__append((std::vector<char> *)this + 5, v40 - v61);
    uint64_t v60 = (char *)*((void *)this + 15);
  }
  uint64_t DataSourceBytes = MP4BoxParser::ReadDataSourceBytes(*((MP4BoxParser **)this + 1), v26 + v23, v40, v60);
  if (!DataSourceBytes)
  {
    *((unsigned char *)this + 60) = 1;
    return DataSourceBytes;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioFormatInfo buf = 136315394;
    uint64_t v65 = "MP4_BoxParser_SampleToGroupCompact.cpp";
    __int16 v66 = 1024;
    int v67 = 243;
    uint64_t v11 = MEMORY[0x1E4F14500];
    unsigned int v12 = "%25s:%-5d  Couldn't read compact sample to group patterns";
    goto LABEL_11;
  }
  return DataSourceBytes;
}

void MP4BoxParser_SampleToGroupCompact::~MP4BoxParser_SampleToGroupCompact(MP4BoxParser_SampleToGroupCompact *this)
{
  MP4BoxParser_SampleToGroupCompact::~MP4BoxParser_SampleToGroupCompact(this);
  JUMPOUT(0x192FC8940);
}

{
  void *v2;
  void *v3;
  uint64_t v4;

  *(void *)this = off_1EDF94890;
  unsigned int v2 = (void *)*((void *)this + 15);
  if (v2)
  {
    *((void *)this + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 12);
  if (v3)
  {
    *((void *)this + 13) = v3;
    operator delete(v3);
  }
  unsigned int v4 = *((void *)this + 1);
  *(void *)this = &unk_1EDF8DA18;
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
}

uint64_t acv2::ConverterRegistry::GetAvailableNumberChannels(acv2::ConverterRegistry *this, const AudioStreamBasicDescription *a2, unsigned int *a3, void *a4, int a5)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  AudioFormatID mFormatID = a2->mFormatID;
  if (a5) {
    uint64_t v6 = mFormatID;
  }
  else {
    uint64_t v6 = 1819304813;
  }
  if (a5) {
    uint64_t v7 = 1819304813;
  }
  else {
    uint64_t v7 = mFormatID;
  }
  uint64_t v8 = (*(uint64_t (**)(acv2::ConverterRegistry *, uint64_t, uint64_t, void, void))(*(void *)this + 16))(this, v7, v6, 0, 0);
  if (v8)
  {
    unint64_t v9 = *(uint64_t (**)(void))(*(void *)v8 + 104);
    return v9();
  }
  else
  {
    AudioConverterLog();
    uint64_t v11 = AudioConverterLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315394;
      unint64_t v13 = "ConverterFactory.cpp";
      __int16 v14 = 1024;
      int v15 = 651;
      _os_log_impl(&dword_18FEC0000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d unable to find converter that supports given format for # channels", (uint8_t *)&v12, 0x12u);
    }
    return 1718449215;
  }
}

uint64_t acv2::ConverterRegistry::GetAvailableChannelLayouts(acv2::ConverterRegistry *this, const AudioStreamBasicDescription *a2, unsigned int *a3, void *a4, int a5)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  AudioFormatID mFormatID = a2->mFormatID;
  if (a5) {
    uint64_t v6 = mFormatID;
  }
  else {
    uint64_t v6 = 1819304813;
  }
  if (a5) {
    uint64_t v7 = 1819304813;
  }
  else {
    uint64_t v7 = mFormatID;
  }
  uint64_t v8 = (*(uint64_t (**)(acv2::ConverterRegistry *, uint64_t, uint64_t, void, void))(*(void *)this + 16))(this, v7, v6, 0, 0);
  if (v8)
  {
    unint64_t v9 = *(uint64_t (**)(void))(*(void *)v8 + 96);
    return v9();
  }
  else
  {
    AudioConverterLog();
    uint64_t v11 = AudioConverterLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315394;
      unint64_t v13 = "ConverterFactory.cpp";
      __int16 v14 = 1024;
      int v15 = 632;
      _os_log_impl(&dword_18FEC0000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d unable to find converter that supports given format for channel layouts", (uint8_t *)&v12, 0x12u);
    }
    return 1718449215;
  }
}

uint64_t acv2::ConverterRegistry::GetAvailableEncodeBitRates(acv2::ConverterRegistry *this, unsigned int a2, unsigned int *a3, unsigned int *a4, void *a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t FactoryBySpecifier = acv2::ConverterRegistry::FindFactoryBySpecifier(this, a2, a3);
  if (FactoryBySpecifier)
  {
    uint64_t v6 = *(uint64_t (**)(void))(*(void *)FactoryBySpecifier + 80);
    return v6();
  }
  else
  {
    AudioConverterLog();
    uint64_t v8 = AudioConverterLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      int v10 = "ConverterFactory.cpp";
      __int16 v11 = 1024;
      int v12 = 600;
      _os_log_impl(&dword_18FEC0000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d unable to find converter that supports given format for encode bit rates", (uint8_t *)&v9, 0x12u);
    }
    return 1718449215;
  }
}

uint64_t acv2::ConverterRegistry::GetOutputFormats(acv2::ConverterRegistry *this, const unsigned int *a2, _DWORD *a3)
{
  int v12 = 0;
  uint64_t v13 = 0;
  __int16 v11 = &v12;
  acv2::ConverterRegistry::GetOutputFormatsSet((uint64_t)this, (uint64_t *)&v11);
  uint64_t v5 = 561211770;
  if (a2 && *a2 == 4 * v13)
  {
    uint64_t v6 = (uint64_t)v11;
    if (v11 != &v12)
    {
      do
      {
        *a3 = *(_DWORD *)(v6 + 28);
        uint64_t v7 = *(void **)(v6 + 8);
        if (v7)
        {
          do
          {
            uint64_t v8 = (void **)v7;
            uint64_t v7 = (void *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            uint64_t v8 = *(void ***)(v6 + 16);
            BOOL v9 = *v8 == (void *)v6;
            uint64_t v6 = (uint64_t)v8;
          }
          while (!v9);
        }
        ++a3;
        uint64_t v6 = (uint64_t)v8;
      }
      while (v8 != &v12);
    }
    uint64_t v5 = 0;
  }
  return v5;
}

void sub_1900F7158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

uint64_t acv2::ConverterRegistry::GetOutputFormatsSet(uint64_t a1, uint64_t *a2)
{
  unsigned int v4 = a2 + 1;
  *a2 = (uint64_t)v4;
  a2[2] = 0;
  void *v4 = 0;
  std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(a2, 0x6C70636Du, 1819304813);
  std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(a2, 0x616C6177u, 1634492791);
  uint64_t result = (uint64_t)std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(a2, 0x756C6177u, 1970037111);
  if (!*(unsigned char *)(a1 + 65))
  {
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = *(void *)(a1 + 16);
    if (v6 == v7) {
LABEL_10:
    }
      operator new();
    uint64_t v8 = *(void *)(a1 + 8);
    while (1)
    {
      if (*(_DWORD *)(*(void *)v8 + 20) == 1634492791)
      {
        int v9 = *(_DWORD *)(*(void *)v8 + 16);
        if (v9 == 1634037347 || v9 == 1852597614) {
          break;
        }
      }
      v8 += 8;
      if (v8 == v7) {
        goto LABEL_10;
      }
    }
    if (v6 == v7) {
LABEL_18:
    }
      operator new();
    while (1)
    {
      if (*(_DWORD *)(*(void *)v6 + 20) == 1970037111)
      {
        int v11 = *(_DWORD *)(*(void *)v6 + 16);
        if (v11 == 1634037347 || v11 == 1852597614) {
          break;
        }
      }
      v6 += 8;
      if (v6 == v7) {
        goto LABEL_18;
      }
    }
    uint64_t result = acv2::ConverterRegistry::MakeFactories((acv2::ConverterRegistry *)a1, 0, 1819304813, COERCE_DOUBLE(1634037347));
    *(unsigned char *)(a1 + 65) = 1;
  }
  uint64_t v14 = *(void *)(a1 + 8);
  uint64_t v13 = *(void *)(a1 + 16);
  while (v14 != v13)
  {
    if (*(_DWORD *)(*(void *)v14 + 8) == 1819304813) {
      uint64_t result = (uint64_t)std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(a2, *(_DWORD *)(*(void *)v14 + 12), *(_DWORD *)(*(void *)v14 + 12));
    }
    v14 += 8;
  }
  return result;
}

uint64_t acv2::ConverterRegistry::HaveDecoderFactory(acv2::ConverterRegistry *this, acv2::ConverterRegistry *a2, int a3, int a4)
{
  if (this == a2) {
    return 0;
  }
  while (1)
  {
    uint64_t v4 = *(void *)this;
    if (*(_DWORD *)(*(void *)this + 12) == a4 && *(_DWORD *)(v4 + 20) == a3)
    {
      int v5 = *(_DWORD *)(v4 + 16);
      if (v5 == 1633969507 || v5 == 1852597349) {
        break;
      }
    }
    this = (acv2::ConverterRegistry *)((char *)this + 8);
    if (this == a2) {
      return 0;
    }
  }
  return 1;
}

uint64_t acv2::ConverterRegistry::GetDecoders(acv2::ConverterRegistry **this, unsigned int a2, unsigned int *a3, char *a4)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  acv2::ConverterRegistry::MakeDecoderFactories(this, a2, 1819304813);
  if (a4)
  {
    if (a3)
    {
      unsigned int v8 = *a3;
      int v10 = this[1];
      int v9 = this[2];
      unsigned int v11 = 0;
      if (v10 != v9 && v8 >= 0xC)
      {
        unsigned int v13 = v8 / 0xC;
        uint64_t v14 = (acv2::ConverterRegistry *)((char *)v10 + 8);
        do
        {
          uint64_t v15 = *((void *)v14 - 1);
          int v18 = *(_DWORD *)(v15 + 16);
          uint64_t v16 = (uint64_t *)(v15 + 16);
          int v17 = v18;
          BOOL v19 = v18 == 1852597349 || v17 == 1633969507;
          if (v19 && *(_DWORD *)(*((void *)v14 - 1) + 20) == a2)
          {
            unint64_t v20 = &a4[12 * v11++];
            uint64_t v21 = *v16;
            *((_DWORD *)v20 + 2) = *((_DWORD *)v16 + 2);
            *(void *)unint64_t v20 = v21;
            int v9 = this[2];
          }
          if (v14 == v9) {
            break;
          }
          uint64_t v14 = (acv2::ConverterRegistry *)((char *)v14 + 8);
        }
        while (v11 < v13);
      }
      uint64_t v22 = 0;
      *a3 = 12 * v11;
    }
    else
    {
      return 561211770;
    }
  }
  else
  {
    uint64_t v23 = this[1];
    uint64_t v24 = this[2];
    if (v23 == v24)
    {
LABEL_27:
      uint64_t v22 = 1718449215;
      AudioConverterLog();
      unsigned int v27 = AudioConverterLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        v28.i32[0] = bswap32(a2);
        *(int8x8_t *)v28.i8 = vzip1_s8(*(int8x8_t *)v28.i8, *(int8x8_t *)v28.i8);
        v29.i64[0] = 0x1F0000001FLL;
        v29.i64[1] = 0x1F0000001FLL;
        v30.i64[0] = 0x5F0000005FLL;
        v30.i64[1] = 0x5F0000005FLL;
        *(int8x8_t *)v28.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v30, (uint32x4_t)vsraq_n_s32(v29, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v28.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v28.i8, (int8x8_t)0x2E002E002E002ELL);
        char v33 = 4;
        LODWORD(__p) = vmovn_s16(v28).u32[0];
        BYTE4(__p) = 0;
        *(_DWORD *)AudioFormatInfo buf = 136315906;
        int v35 = "ConverterFactory.cpp";
        __int16 v36 = 1024;
        int v37 = 587;
        __int16 v38 = 2080;
        CFTypeRef p_p = &__p;
        __int16 v40 = 1024;
        unsigned int v41 = a2;
        _os_log_impl(&dword_18FEC0000, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d no decoder found for format ID '%s' (%d)", buf, 0x22u);
        if (v33 < 0) {
          operator delete(__p);
        }
      }
    }
    else
    {
      while (1)
      {
        int v25 = *(_DWORD *)(*(void *)v23 + 16);
        BOOL v26 = v25 == 1852597349 || v25 == 1633969507;
        if (v26 && *(_DWORD *)(*(void *)v23 + 20) == a2) {
          return 0;
        }
        uint64_t v23 = (acv2::ConverterRegistry *)((char *)v23 + 8);
        if (v23 == v24) {
          goto LABEL_27;
        }
      }
    }
  }
  return v22;
}

uint64_t acv2::ConverterRegistry::MakeDecoderFactories(acv2::ConverterRegistry **this, int a2, int a3)
{
  if (acv2::ConverterRegistry::HaveDecoderFactory(this[1], this[2], a2, a3)) {
    return 0;
  }
  if (a2 == 1970037111) {
    operator new();
  }
  if (a2 == 1634492791) {
    operator new();
  }
  LODWORD(v7) = vdup_n_s32(0x61646563u).u32[0];
  HIDWORD(v7) = a2;
  return acv2::ConverterRegistry::MakeFactories((acv2::ConverterRegistry *)this, 0, a3, v7);
}

uint64_t acv2::ConverterRegistry::GetEncoders(acv2::ConverterRegistry *this, unsigned int a2, unsigned int *a3, char *a4)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  acv2::ConverterRegistry::MakeEncoderFactories(this, a2);
  if (a4)
  {
    if (a3)
    {
      unsigned int v8 = *a3;
      uint64_t v10 = *((void *)this + 1);
      uint64_t v9 = *((void *)this + 2);
      unsigned int v11 = 0;
      if (v10 != v9 && v8 >= 0xC)
      {
        unsigned int v13 = v8 / 0xC;
        uint64_t v14 = v10 + 8;
        do
        {
          uint64_t v15 = *(void *)(v14 - 8);
          int v18 = *(_DWORD *)(v15 + 16);
          uint64_t v16 = (uint64_t *)(v15 + 16);
          int v17 = v18;
          BOOL v19 = v18 == 1852597614 || v17 == 1634037347;
          if (v19 && *(_DWORD *)(*(void *)(v14 - 8) + 20) == a2)
          {
            unint64_t v20 = &a4[12 * v11++];
            uint64_t v21 = *v16;
            *((_DWORD *)v20 + 2) = *((_DWORD *)v16 + 2);
            *(void *)unint64_t v20 = v21;
            uint64_t v9 = *((void *)this + 2);
          }
          if (v14 == v9) {
            break;
          }
          v14 += 8;
        }
        while (v11 < v13);
      }
      uint64_t v22 = 0;
      *a3 = 12 * v11;
    }
    else
    {
      return 561211770;
    }
  }
  else
  {
    uint64_t v23 = *((void *)this + 1);
    uint64_t v24 = *((void *)this + 2);
    if (v23 == v24)
    {
LABEL_27:
      uint64_t v22 = 1718449215;
      AudioConverterLog();
      unsigned int v27 = AudioConverterLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        v28.i32[0] = bswap32(a2);
        *(int8x8_t *)v28.i8 = vzip1_s8(*(int8x8_t *)v28.i8, *(int8x8_t *)v28.i8);
        v29.i64[0] = 0x1F0000001FLL;
        v29.i64[1] = 0x1F0000001FLL;
        v30.i64[0] = 0x5F0000005FLL;
        v30.i64[1] = 0x5F0000005FLL;
        *(int8x8_t *)v28.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v30, (uint32x4_t)vsraq_n_s32(v29, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v28.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v28.i8, (int8x8_t)0x2E002E002E002ELL);
        char v33 = 4;
        LODWORD(__p) = vmovn_s16(v28).u32[0];
        BYTE4(__p) = 0;
        *(_DWORD *)AudioFormatInfo buf = 136315906;
        int v35 = "ConverterFactory.cpp";
        __int16 v36 = 1024;
        int v37 = 550;
        __int16 v38 = 2080;
        CFTypeRef p_p = &__p;
        __int16 v40 = 1024;
        unsigned int v41 = a2;
        _os_log_impl(&dword_18FEC0000, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d no encoder found for format ID '%s' (%d)", buf, 0x22u);
        if (v33 < 0) {
          operator delete(__p);
        }
      }
    }
    else
    {
      while (1)
      {
        int v25 = *(_DWORD *)(*(void *)v23 + 16);
        BOOL v26 = v25 == 1852597614 || v25 == 1634037347;
        if (v26 && *(_DWORD *)(*(void *)v23 + 20) == a2) {
          return 0;
        }
        v23 += 8;
        if (v23 == v24) {
          goto LABEL_27;
        }
      }
    }
  }
  return v22;
}

uint64_t acv2::ConverterRegistry::GetFormatInfo(acv2::ConverterRegistry *this, int a2, int *a3, AudioStreamBasicDescription *a4)
{
  UInt32 mChannelsPerFrame = a4->mChannelsPerFrame;
  if (mChannelsPerFrame || (uint64_t v8 = 0, a2) && a3)
  {
    int v18 = 0;
    if (mChannelsPerFrame <= 1) {
      UInt32 mChannelsPerFrame = 1;
    }
    *(Float64 *)&long long v23 = a4->mSampleRate;
    *((void *)&v23 + 1) = 0x96C70636DLL;
    int v24 = 4 * mChannelsPerFrame;
    int v25 = 1;
    int v26 = 4 * mChannelsPerFrame;
    UInt32 v27 = mChannelsPerFrame;
    uint64_t v28 = 32;
    uint64_t v16 = (OpaqueAudioConverter **)&v17;
    uint64_t v17 = 0;
    long long v9 = *(_OWORD *)&a4->mBytesPerPacket;
    v14[0] = *(_OWORD *)&a4->mSampleRate;
    v14[1] = v9;
    uint64_t v15 = *(void *)&a4->mBitsPerChannel;
    int v13 = 1969977198;
    DWORD2(v14[0]) = AudioFormatEncryptedFormatTranslator::DecryptFormatID(a4->mFormatID, &v13);
    if (a3)
    {
      if (AudioConverterNewInternal(v14, &v23, 0, 0, &v17, newAudioConverter, 0, 0))
      {
        uint64_t v8 = AudioConverterNewInternal(&v23, v14, 0, 0, &v17, newAudioConverter, 0, 0);
        if (!v8)
        {
          if (a2)
          {
            LODWORD(v34) = 1668114275;
            int v36 = a2;
            int v35 = a3;
            int32x4_t v29 = &v34;
            uint32x4_t v30 = (int **)&v36;
            unint64_t v31 = &v35;
            int v32 = (uint64_t (*)(uint64_t, uint64_t))caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterSetProperty::$_0>;
            char v33 = &v29;
            with_resolved(v17, &v32);
          }
          goto LABEL_18;
        }
        goto LABEL_22;
      }
      if (a2)
      {
        LODWORD(v34) = 1684891491;
        int v36 = a2;
        int v35 = a3;
        int32x4_t v29 = &v34;
        uint32x4_t v30 = (int **)&v36;
        unint64_t v31 = &v35;
        int v32 = (uint64_t (*)(uint64_t, uint64_t))caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterSetProperty::$_0>;
        char v33 = &v29;
        with_resolved(v17, &v32);
      }
    }
    else
    {
      if (!AudioConverterNewInternal(&v23, v14, 0, 0, &v17, newAudioConverter, 0, 0))
      {
LABEL_18:
        int v18 = 40;
        int v36 = 1633906532;
        uint64_t v34 = &v19;
        int v35 = &v18;
        int32x4_t v29 = (Float64 **)&v36;
        uint32x4_t v30 = &v35;
        unint64_t v31 = (int **)&v34;
        int v32 = (uint64_t (*)(uint64_t, uint64_t))caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterGetProperty::$_0>;
        char v33 = &v29;
        uint64_t v10 = with_resolved(v17, &v32);
        goto LABEL_19;
      }
      uint64_t v8 = AudioConverterNewInternal(v14, &v23, 0, 0, &v17, newAudioConverter, 0, 0);
      if (v8)
      {
LABEL_22:
        applesauce::raii::v1::detail::ScopeGuard<acv2::ConverterRegistry::GetFormatInfo(unsigned int,void const*,AudioStreamBasicDescription *)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard(&v16);
        return v8;
      }
    }
    int v18 = 40;
    int v36 = 1633904996;
    uint64_t v34 = &v19;
    int v35 = &v18;
    int32x4_t v29 = (Float64 **)&v36;
    uint32x4_t v30 = &v35;
    unint64_t v31 = (int **)&v34;
    int v32 = (uint64_t (*)(uint64_t, uint64_t))caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterGetProperty::$_0>;
    char v33 = &v29;
    uint64_t v10 = with_resolved(v17, &v32);
LABEL_19:
    uint64_t v8 = v10;
    if (!v10)
    {
      a4->mSampleRate = v19;
      signed int v11 = v20;
      *(_OWORD *)&a4->AudioFormatID mFormatID = v20;
      *(void *)&a4->mBytesPerFrame = v21;
      a4->mBitsPerChannel = v22;
      uint64_t v8 = 0;
      if (v13 != 1969977198) {
        a4->AudioFormatID mFormatID = AudioFormatEncryptedFormatTranslator::EncryptFormatInFlavor(v11, v13);
      }
    }
    goto LABEL_22;
  }
  return v8;
}

void sub_1900F7E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  applesauce::raii::v1::detail::ScopeGuard<acv2::ConverterRegistry::GetFormatInfo(unsigned int,void const*,AudioStreamBasicDescription *)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard((OpaqueAudioConverter ***)va);
  _Unwind_Resume(a1);
}

OpaqueAudioConverter ***applesauce::raii::v1::detail::ScopeGuard<acv2::ConverterRegistry::GetFormatInfo(unsigned int,void const*,AudioStreamBasicDescription *)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard(OpaqueAudioConverter ***a1)
{
  unsigned int v2 = **a1;
  if (v2) {
    AudioConverterDispose(v2);
  }
  return a1;
}

uint64_t acv2::ConverterRegistry::GetAvailableNumberChannelsInfo(acv2::ConverterRegistry *this, const AudioStreamBasicDescription *a2, unsigned int *a3, int a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  AudioFormatID mFormatID = a2->mFormatID;
  if (a4) {
    uint64_t v5 = mFormatID;
  }
  else {
    uint64_t v5 = 1819304813;
  }
  if (a4) {
    uint64_t v6 = 1819304813;
  }
  else {
    uint64_t v6 = mFormatID;
  }
  uint64_t v7 = (*(uint64_t (**)(acv2::ConverterRegistry *, uint64_t, uint64_t, void, void))(*(void *)this + 16))(this, v6, v5, 0, 0);
  if (v7)
  {
    uint64_t v8 = *(uint64_t (**)(void))(*(void *)v7 + 72);
    return v8();
  }
  else
  {
    AudioConverterLog();
    uint64_t v10 = AudioConverterLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315394;
      int v12 = "ConverterFactory.cpp";
      __int16 v13 = 1024;
      int v14 = 484;
      _os_log_impl(&dword_18FEC0000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d unable to find converter that supports given format for # channels info", (uint8_t *)&v11, 0x12u);
    }
    return 1718449215;
  }
}

uint64_t acv2::ConverterRegistry::GetAvailableChannelLayoutsInfo(acv2::ConverterRegistry *this, const AudioStreamBasicDescription *a2, unsigned int *a3, int a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  AudioFormatID mFormatID = a2->mFormatID;
  if (a4) {
    uint64_t v5 = mFormatID;
  }
  else {
    uint64_t v5 = 1819304813;
  }
  if (a4) {
    uint64_t v6 = 1819304813;
  }
  else {
    uint64_t v6 = mFormatID;
  }
  uint64_t v7 = (*(uint64_t (**)(acv2::ConverterRegistry *, uint64_t, uint64_t, void, void))(*(void *)this + 16))(this, v6, v5, 0, 0);
  if (v7)
  {
    uint64_t v8 = *(uint64_t (**)(void))(*(void *)v7 + 64);
    return v8();
  }
  else
  {
    AudioConverterLog();
    uint64_t v10 = AudioConverterLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315394;
      int v12 = "ConverterFactory.cpp";
      __int16 v13 = 1024;
      int v14 = 465;
      _os_log_impl(&dword_18FEC0000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d unable to find converter that supports given format for channel layouts info", (uint8_t *)&v11, 0x12u);
    }
    return 1718449215;
  }
}

uint64_t acv2::ConverterRegistry::GetAvailableEncodeBitRatesInfo(acv2::ConverterRegistry *this, unsigned int a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t FactoryBySpecifier = acv2::ConverterRegistry::FindFactoryBySpecifier(this, a2, a3);
  if (FactoryBySpecifier)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)FactoryBySpecifier + 48);
    return v5();
  }
  else
  {
    AudioConverterLog();
    uint64_t v7 = AudioConverterLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      long long v9 = "ConverterFactory.cpp";
      __int16 v10 = 1024;
      int v11 = 433;
      _os_log_impl(&dword_18FEC0000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d unable to find converter that supports given format for encode bit rates info", (uint8_t *)&v8, 0x12u);
    }
    return 1718449215;
  }
}

uint64_t acv2::ConverterRegistry::GetOutputFormatsSize(acv2::ConverterRegistry *this)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v3 = &v4;
  acv2::ConverterRegistry::GetOutputFormatsSet((uint64_t)this, (uint64_t *)&v3);
  uint64_t v1 = (4 * v5);
  return v1;
}

void sub_1900F830C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

uint64_t acv2::ConverterRegistry::GetDecodersSize(acv2::ConverterRegistry **this, int a2, unsigned int *a3)
{
  acv2::ConverterRegistry::MakeDecoderFactories(this, a2, 1819304813);
  uint64_t v6 = this[1];
  uint64_t v7 = this[2];
  if (v6 == v7)
  {
    int v8 = 0;
    if (!a3) {
      return 0;
    }
    goto LABEL_12;
  }
  int v8 = 0;
  do
  {
    int v9 = *(_DWORD *)(*(void *)v6 + 16);
    BOOL v10 = v9 == 1852597349 || v9 == 1633969507;
    if (v10 && *(_DWORD *)(*(void *)v6 + 20) == a2) {
      ++v8;
    }
    uint64_t v6 = (acv2::ConverterRegistry *)((char *)v6 + 8);
  }
  while (v6 != v7);
  if (a3) {
LABEL_12:
  }
    *a3 = 12 * v8;
  return 0;
}

uint64_t acv2::ConverterRegistry::GetEncodersSize(acv2::ConverterRegistry *this, int a2, unsigned int *a3)
{
  acv2::ConverterRegistry::MakeEncoderFactories(this, a2);
  uint64_t v6 = *((void *)this + 1);
  uint64_t v7 = *((void *)this + 2);
  if (v6 == v7)
  {
    int v8 = 0;
    if (!a3) {
      return 0;
    }
    goto LABEL_12;
  }
  int v8 = 0;
  do
  {
    int v9 = *(_DWORD *)(*(void *)v6 + 16);
    BOOL v10 = v9 == 1852597614 || v9 == 1634037347;
    if (v10 && *(_DWORD *)(*(void *)v6 + 20) == a2) {
      ++v8;
    }
    v6 += 8;
  }
  while (v6 != v7);
  if (a3) {
LABEL_12:
  }
    *a3 = 12 * v8;
  return 0;
}

void acv2::ConverterRegistry::~ConverterRegistry(acv2::ConverterRegistry *this)
{
  *(void *)this = &unk_1EDF956D8;
  unsigned int v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x192FC8940);
}

{
  void *v2;

  *(void *)this = &unk_1EDF956D8;
  unsigned int v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

uint64_t acv2::ConverterFactory::GetAvailableNumberChannels(acv2::ConverterFactory *this, const AudioStreamBasicDescription *a2, unsigned int *a3, _DWORD *a4)
{
  if (*a3 != 4) {
    return 561211770;
  }
  uint64_t result = 0;
  *a4 = -1;
  return result;
}

uint64_t acv2::ConverterFactory::GetAvailableEncodeSampleRates(acv2::ConverterFactory *this, unsigned int *a2, void *a3)
{
  if (*a2 != 16) {
    return 561211770;
  }
  uint64_t result = 0;
  *a3 = 0;
  a3[1] = 0;
  return result;
}

uint64_t acv2::ConverterFactory::GetAvailableNumberChannelsInfo(acv2::ConverterFactory *this, const AudioStreamBasicDescription *a2, unsigned int *a3)
{
  *a3 = 4;
  return 0;
}

uint64_t acv2::ConverterFactory::GetAvailableEncodeSampleRatesInfo(acv2::ConverterFactory *this, unsigned int *a2)
{
  *a2 = 16;
  return 0;
}

uint64_t DSPGraph::Macro::isArg(DSPGraph::Macro *this)
{
  return 0;
}

void DSPGraph::Preprocessor::undef(DSPGraph::Preprocessor *this, const DSPGraph::Macro *a2)
{
  if (a2)
  {
    unint64_t v3 = *((void *)this + 4);
    uint64_t v4 = *((void *)this + 5);
    uint64_t v5 = *((void *)this + 1);
    uint64_t v6 = *((void *)this + 2);
    uint64_t v7 = (const DSPGraph::Macro ***)(v5 + 8 * (v3 >> 9));
    if (v6 == v5)
    {
      __int16 v13 = 0;
      int v9 = 0;
      uint64_t v14 = 0;
      __int16 v15 = v3 + v4;
      uint64_t v16 = (char *)(v5 + 8 * ((v3 + v4) >> 9));
      BOOL v17 = 1;
    }
    else
    {
      int v8 = *v7;
      int v9 = &(*v7)[*((void *)this + 4) & 0x1FFLL];
      uint64_t v10 = *(void *)(v5 + (((v3 + v4) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v3 + v4) & 0x1FF);
      if (v9 != (const DSPGraph::Macro **)v10)
      {
        char v11 = 0;
        while ((v11 & 1) != 0 || *v9 != a2)
        {
          if ((char *)++v9 - (char *)v8 == 4096)
          {
            uint64_t v12 = v7[1];
            ++v7;
            int v8 = v12;
            int v9 = v12;
          }
          char v11 = 1;
          if (v9 == (const DSPGraph::Macro **)v10) {
            goto LABEL_10;
          }
        }
        if (v9 == (const DSPGraph::Macro **)v10)
        {
LABEL_10:
          int v9 = (const DSPGraph::Macro **)(*(void *)(v5 + (((v3 + v4) >> 6) & 0x3FFFFFFFFFFFFF8))
                                        + 8 * ((v3 + v4) & 0x1FF));
          goto LABEL_23;
        }
        int v18 = v9;
        Float64 v19 = v7;
LABEL_14:
        long long v20 = v9 - 512;
        while (1)
        {
          if ((char *)++v18 - (char *)*v19 == 4096)
          {
            uint64_t v21 = v19[1];
            ++v19;
            int v18 = v21;
          }
          if (v18 == (const DSPGraph::Macro **)v10) {
            break;
          }
          UInt32 v22 = *v18;
          *int v18 = 0;
          long long v23 = *v9;
          *int v9 = v22;
          if (v23) {
            (*(void (**)(const DSPGraph::Macro *))(*(void *)v23 + 8))(v23);
          }
          ++v9;
          if (*v7 == ++v20)
          {
            int v24 = v7[1];
            ++v7;
            int v9 = v24;
            goto LABEL_14;
          }
        }
        unint64_t v3 = *((void *)this + 4);
        uint64_t v4 = *((void *)this + 5);
        uint64_t v5 = *((void *)this + 1);
        uint64_t v6 = *((void *)this + 2);
      }
LABEL_23:
      __int16 v15 = v3 + v4;
      uint64_t v16 = (char *)(v5 + 8 * ((v3 + v4) >> 9));
      BOOL v17 = v6 == v5;
      if (v6 == v5) {
        uint64_t v14 = 0;
      }
      else {
        uint64_t v14 = *(void *)v16 + 8 * (v15 & 0x1FF);
      }
      __int16 v13 = v9;
    }
    __int16 v66 = v15;
    if (v9 == (const DSPGraph::Macro **)v14) {
      uint64_t v25 = 0;
    }
    else {
      uint64_t v25 = ((v14 - *(void *)v16) >> 3) + ((v16 - (char *)v7) << 6) - (v13 - *v7);
    }
    int v26 = (char *)(v5 + 8 * (v3 >> 9));
    if (v17) {
      UInt32 v27 = 0;
    }
    else {
      UInt32 v27 = (const DSPGraph::Macro **)(*(void *)v26 + 8 * (v3 & 0x1FF));
    }
    BOOL v67 = v17;
    if (v9 == v27) {
      unint64_t v28 = 0;
    }
    else {
      unint64_t v28 = v13 - *v7 + (((char *)v7 - v26) << 6) - (((uint64_t)v27 - *(void *)v26) >> 3);
    }
    int32x4_t v29 = (char *)std::__deque_iterator<std::unique_ptr<DSPGraph::Macro>,std::unique_ptr<DSPGraph::Macro>*,std::unique_ptr<DSPGraph::Macro>&,std::unique_ptr<DSPGraph::Macro>**,long,512l>::operator+[abi:ne180100](v26, (uint64_t)v27, v28);
    if (v25 >= 1)
    {
      unint64_t v31 = v29;
      int v32 = (uint64_t *)v30;
      char v33 = (char *)std::__deque_iterator<std::unique_ptr<DSPGraph::Macro>,std::unique_ptr<DSPGraph::Macro>*,std::unique_ptr<DSPGraph::Macro>&,std::unique_ptr<DSPGraph::Macro>**,long,512l>::operator+[abi:ne180100](v29, v30, v25);
      int v35 = v34;
      if (v28 <= (unint64_t)(v4 - v25) >> 1)
      {
        if (v26 == v31)
        {
          uint64_t v44 = (uint64_t)v27;
          uint64_t v43 = (uint64_t)v32;
          unsigned int v41 = v33;
        }
        else
        {
          uint64_t v39 = *(void *)v31;
          __int16 v38 = (uint64_t *)(v31 - 8);
          uint64_t v37 = v39;
          uint64_t v40 = (uint64_t)v32;
          unsigned int v41 = v33;
          while (1)
          {
            std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::unique_ptr<DSPGraph::Macro> *,std::__deque_iterator<std::unique_ptr<DSPGraph::Macro>,std::unique_ptr<DSPGraph::Macro> *,std::unique_ptr<DSPGraph::Macro>&,std::unique_ptr<DSPGraph::Macro> **,long,512l>,0>((uint64_t)v68, v37, v40, v41, v35);
            int v35 = v70;
            unsigned int v41 = v69;
            if (v38 == (uint64_t *)v26) {
              break;
            }
            uint64_t v42 = *v38--;
            uint64_t v37 = v42;
            uint64_t v40 = v42 + 4096;
          }
          uint64_t v43 = *(void *)v26 + 4096;
          uint64_t v44 = (uint64_t)v27;
        }
        std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::unique_ptr<DSPGraph::Macro> *,std::__deque_iterator<std::unique_ptr<DSPGraph::Macro>,std::unique_ptr<DSPGraph::Macro> *,std::unique_ptr<DSPGraph::Macro>&,std::unique_ptr<DSPGraph::Macro> **,long,512l>,0>((uint64_t)v68, v44, v43, v41, v35);
        unsigned int v51 = (const DSPGraph::Macro **)v70;
        while (v27 != v51)
        {
          unint64_t v52 = *v27;
          *UInt32 v27 = 0;
          if (v52) {
            (*(void (**)(const DSPGraph::Macro *))(*(void *)v52 + 8))(v52);
          }
          if ((const DSPGraph::Macro **)((char *)++v27 - *(void *)v26) == (const DSPGraph::Macro **)4096)
          {
            int v53 = (const DSPGraph::Macro **)*((void *)v26 + 1);
            v26 += 8;
            UInt32 v27 = v53;
          }
        }
        *((void *)this + 5) -= v25;
        while (1)
        {
          unint64_t v54 = *((void *)this + 4) + v25;
          *((void *)this + 4) = v54;
          if (v54 < 0x400) {
            break;
          }
          operator delete(**((void ***)this + 1));
          *((void *)this + 1) += 8;
          uint64_t v25 = -512;
        }
      }
      else
      {
        if (v67) {
          uint64_t v36 = 0;
        }
        else {
          uint64_t v36 = *(void *)v16 + 8 * (v66 & 0x1FF);
        }
        if (v16 == v33)
        {
          unsigned int v50 = (uint64_t *)v36;
          int v47 = v31;
          unsigned int v48 = v32;
        }
        else
        {
          uint64_t v45 = (uint64_t **)(v33 + 8);
          uint64_t v46 = (uint64_t *)(*(void *)v33 + 4096);
          int v47 = v31;
          unsigned int v48 = v32;
          while (1)
          {
            std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::unique_ptr<DSPGraph::Macro> *,std::__deque_iterator<std::unique_ptr<DSPGraph::Macro>,std::unique_ptr<DSPGraph::Macro> *,std::unique_ptr<DSPGraph::Macro>&,std::unique_ptr<DSPGraph::Macro> **,long,512l>,0>((uint64_t)v68, v34, v46, v47, v48);
            unsigned int v48 = v70;
            int v47 = v69;
            if (v45 == (uint64_t **)v16) {
              break;
            }
            int v49 = *v45++;
            uint64_t v34 = v49;
            uint64_t v46 = v49 + 512;
          }
          uint64_t v34 = *(uint64_t **)v16;
          unsigned int v50 = (uint64_t *)v36;
        }
        std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::unique_ptr<DSPGraph::Macro> *,std::__deque_iterator<std::unique_ptr<DSPGraph::Macro>,std::unique_ptr<DSPGraph::Macro> *,std::unique_ptr<DSPGraph::Macro>&,std::unique_ptr<DSPGraph::Macro> **,long,512l>,0>((uint64_t)v68, v34, v50, v47, v48);
        unsigned int v55 = v70;
        uint64_t v57 = *((void *)this + 1);
        uint64_t v56 = *((void *)this + 2);
        if (v56 == v57)
        {
          uint64_t v59 = 0;
        }
        else
        {
          unint64_t v58 = *((void *)this + 5) + *((void *)this + 4);
          uint64_t v59 = *(void *)(v57 + ((v58 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v58 & 0x1FF);
        }
        if ((uint64_t *)v59 != v70)
        {
          uint64_t v60 = v69;
          do
          {
            uint64_t v61 = *v55;
            *unsigned int v55 = 0;
            if (v61) {
              (*(void (**)(uint64_t))(*(void *)v61 + 8))(v61);
            }
            if ((uint64_t *)((char *)++v55 - *(void *)v60) == (uint64_t *)4096)
            {
              unsigned int v62 = (uint64_t *)*((void *)v60 + 1);
              v60 += 8;
              unsigned int v55 = v62;
            }
          }
          while (v55 != (uint64_t *)v59);
          uint64_t v56 = *((void *)this + 2);
        }
        uint64_t v63 = *((void *)this + 5) - v25;
        for (*((void *)this + 5) = v63; ; uint64_t v63 = *((void *)this + 5))
        {
          uint64_t v64 = *((void *)this + 1);
          uint64_t v65 = v56 == v64 ? 0 : ((v56 - v64) << 6) - 1;
          if ((unint64_t)(v65 - (v63 + *((void *)this + 4))) < 0x400) {
            break;
          }
          operator delete(*(void **)(v56 - 8));
          uint64_t v56 = *((void *)this + 2) - 8;
          *((void *)this + 2) = v56;
        }
      }
    }
  }
}

void *std::__deque_iterator<std::unique_ptr<DSPGraph::Macro>,std::unique_ptr<DSPGraph::Macro>*,std::unique_ptr<DSPGraph::Macro>&,std::unique_ptr<DSPGraph::Macro>**,long,512l>::operator+[abi:ne180100](void *result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = a3 + ((a2 - *result) >> 3);
    if (v3 < 1) {
      result -= (unint64_t)(511 - v3) >> 9;
    }
    else {
      result += (unint64_t)v3 >> 9;
    }
  }
  return result;
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::unique_ptr<DSPGraph::Macro> *,std::__deque_iterator<std::unique_ptr<DSPGraph::Macro>,std::unique_ptr<DSPGraph::Macro> *,std::unique_ptr<DSPGraph::Macro>&,std::unique_ptr<DSPGraph::Macro> **,long,512l>,0>(uint64_t result, uint64_t *a2, uint64_t *a3, void *a4, uint64_t *a5)
{
  uint64_t v6 = a4;
  uint64_t v7 = a2;
  int v8 = (void *)result;
  if (a2 == a3)
  {
    int v9 = a2;
  }
  else
  {
    int v9 = a3;
    uint64_t v10 = (uint64_t *)*a4;
    while (1)
    {
      uint64_t v11 = (char *)v10 - (char *)a5 + 4096;
      if (v9 - v7 >= v11 >> 3) {
        uint64_t v12 = v11 >> 3;
      }
      else {
        uint64_t v12 = v9 - v7;
      }
      if (v12)
      {
        uint64_t v13 = 8 * v12;
        uint64_t v14 = &v7[v12];
        do
        {
          uint64_t v15 = *v7;
          *uint64_t v7 = 0;
          uint64_t result = *a5;
          *a5 = v15;
          if (result) {
            uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
          }
          ++v7;
          ++a5;
          v13 -= 8;
        }
        while (v13);
        uint64_t v7 = v14;
      }
      if (v7 == v9) {
        break;
      }
      uint64_t v16 = (uint64_t *)v6[1];
      ++v6;
      uint64_t v10 = v16;
      a5 = v16;
    }
    if ((uint64_t *)(*v6 + 4096) == a5)
    {
      BOOL v17 = (uint64_t *)v6[1];
      ++v6;
      a5 = v17;
    }
  }
  *int v8 = v9;
  v8[1] = v6;
  v8[2] = a5;
  return result;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::unique_ptr<DSPGraph::Macro> *,std::__deque_iterator<std::unique_ptr<DSPGraph::Macro>,std::unique_ptr<DSPGraph::Macro> *,std::unique_ptr<DSPGraph::Macro>&,std::unique_ptr<DSPGraph::Macro> **,long,512l>,0>(uint64_t result, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v6 = a4;
  int v8 = (void *)result;
  if (a2 == a3)
  {
    uint64_t v9 = a2;
  }
  else
  {
    uint64_t v9 = a3;
    uint64_t v10 = *a4;
    uint64_t v11 = a3;
    while (1)
    {
      uint64_t v12 = (uint64_t)a5 - v10;
      if ((v11 - a2) >> 3 >= v12 >> 3) {
        uint64_t v13 = v12 >> 3;
      }
      else {
        uint64_t v13 = (v11 - a2) >> 3;
      }
      if (v13)
      {
        uint64_t v14 = -8 * v13;
        uint64_t v15 = (uint64_t *)(v11 - 8);
        do
        {
          uint64_t v16 = *v15;
          uint64_t *v15 = 0;
          uint64_t v17 = *--a5;
          uint64_t result = v17;
          *a5 = v16;
          if (v17) {
            uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
          }
          --v15;
          v14 += 8;
        }
        while (v14);
      }
      v11 -= 8 * v13;
      if (v11 == a2) {
        break;
      }
      uint64_t v18 = *--v6;
      uint64_t v10 = v18;
      a5 = (void *)(v18 + 4096);
    }
    if ((void *)(*v6 + 4096) == a5)
    {
      Float64 v19 = (void *)v6[1];
      ++v6;
      a5 = v19;
    }
  }
  *int v8 = v9;
  v8[1] = v6;
  v8[2] = a5;
  return result;
}

uint64_t DSPGraph::ArgMacro::isArg(DSPGraph::ArgMacro *this)
{
  return 1;
}

void DSPGraph::ArgMacro::~ArgMacro(void **this)
{
  *this = &unk_1EDF98190;
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  DSPGraph::Macro::~Macro(this);
  JUMPOUT(0x192FC8940);
}

{
  uint64_t vars8;

  *this = &unk_1EDF98190;
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  DSPGraph::Macro::~Macro(this);
}

uint64_t DSPGraph::strToLong(uint64_t *a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v6 = a1;
  if (*((char *)a1 + 23) < 0)
  {
    if (a1[1])
    {
      __endptr = 0;
      a1 = (uint64_t *)*a1;
      goto LABEL_6;
    }
LABEL_15:
    std::string::basic_string[abi:ne180100]<0>(v18, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
    std::string::basic_string[abi:ne180100]<0>(v17, a4);
    DSPGraph::strprintf((DSPGraph *)"empty %s argument", v11, a2);
  }
  if (!*((unsigned char *)a1 + 23)) {
    goto LABEL_15;
  }
  __endptr = 0;
LABEL_6:
  uint64_t v7 = strtol((const char *)a1, &__endptr, 10);
  if ((unint64_t)(v7 - 0x7FFFFFFFFFFFFFFFLL) <= 1 && *__error())
  {
    std::string::basic_string[abi:ne180100]<0>(v18, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
    std::string::basic_string[abi:ne180100]<0>(v17, a4);
    if (*((char *)v6 + 23) >= 0) {
      uint64_t v15 = v6;
    }
    else {
      uint64_t v15 = (uint64_t *)*v6;
    }
    DSPGraph::strprintf((DSPGraph *)"out-of-range %s argument: %s", v14, a2, v15);
  }
  uint64_t v8 = *((unsigned __int8 *)v6 + 23);
  if ((v8 & 0x80u) == 0) {
    uint64_t v9 = v6;
  }
  else {
    uint64_t v9 = (uint64_t *)*v6;
  }
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = v6[1];
  }
  if (__endptr != (char *)v9 + v8)
  {
    std::string::basic_string[abi:ne180100]<0>(v18, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
    std::string::basic_string[abi:ne180100]<0>(v17, a4);
    if (*((char *)v6 + 23) >= 0) {
      uint64_t v13 = v6;
    }
    else {
      uint64_t v13 = (uint64_t *)*v6;
    }
    DSPGraph::strprintf((DSPGraph *)"non-numerical characters in %s argument: %s", v12, a2, v13);
  }
  return v7;
}

void sub_1900F8FE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t caulk::numeric::exceptional_add<long>(uint64_t a1, uint64_t a2)
{
  BOOL v2 = __OFADD__(a1, a2);
  uint64_t result = a1 + a2;
  if (v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::overflow_error::overflow_error[abi:ne180100](exception, "arithmetic addition overflow");
  }
  return result;
}

void sub_1900F90A8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t caulk::numeric::exceptional_mul<long>(uint64_t a1, uint64_t a2)
{
  uint64_t result = a1 * a2;
  if ((unsigned __int128)(a1 * (__int128)a2) >> 64 != result >> 63)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::overflow_error::overflow_error[abi:ne180100](exception, "arithmetic multiplication overflow");
  }
  return result;
}

void sub_1900F9124(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t DSPGraph::Preprocessor::skipMacroBody(std::string::value_type **this, const char **a2)
{
  memset(&__p, 0, sizeof(__p));
  if (DSPGraph::Preprocessor::parseToken(this, (uint64_t)&__p)
    || (DSPGraph::Preprocessor::parseString(this, (uint64_t)&__p) & 1) != 0)
  {
    goto LABEL_9;
  }
  DSPGraph::skipspace(this);
  uint64_t v3 = *this;
  if (**this == 40)
  {
    std::string::value_type v4 = 41;
    char v5 = 40;
LABEL_8:
    *this = v3 + 1;
    DSPGraph::Preprocessor::parseToEnd(this, v5, v4, &__p);
LABEL_9:
    uint64_t v6 = 1;
    goto LABEL_10;
  }
  DSPGraph::skipspace(this);
  uint64_t v3 = *this;
  if (**this == 123 || (DSPGraph::skipspace(this), uint64_t v3 = *this, **this == 91))
  {
    std::string::value_type v4 = 125;
    char v5 = 123;
    goto LABEL_8;
  }
  uint64_t v6 = 0;
LABEL_10:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v6;
}

void sub_1900F9214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(std::string *a1, std::string *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  LODWORD(v3) = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  BOOL v4 = (v3 & 0x80000000) != 0;
  std::string::size_type size = a2->__r_.__value_.__l.__size_;
  if ((v3 & 0x80000000) != 0) {
    a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  std::string::size_type v3 = v3;
  if (v4) {
    std::string::size_type v3 = size;
  }
  std::string::append[abi:ne180100]<char const*,0>(a1, a2, (std::string *)((char *)a2 + v3));
  return a1;
}

void sub_1900F927C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::__fs::filesystem::is_regular_file[abi:ne180100](const std::__fs::filesystem::path *a1, std::error_code *a2)
{
  std::__fs::filesystem::__status(a1, a2);
  return v3 == 1;
}

void sub_1900F9460(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x192FC8840](v1);
  _Unwind_Resume(a1);
}

std::string *std::optional<std::string>::emplace[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>,void>(std::string *this, void **a2, void **a3)
{
  if (this[1].__r_.__value_.__s.__data_[0])
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      operator delete(this->__r_.__value_.__l.__data_);
    }
    this[1].__r_.__value_.__s.__data_[0] = 0;
  }
  std::string::__init_with_sentinel[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(this, *a2, *a3);
  this[1].__r_.__value_.__s.__data_[0] = 1;
  return this;
}

uint64_t DSPGraph::CounterMacro::apply@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, std::string *a3@<X8>)
{
  std::to_string(a3, *(void *)(a1 + 56));
  char v5 = *(uint64_t **)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  if (*(void *)a2 == v6)
  {
    uint64_t result = caulk::numeric::exceptional_add<long>(*(void *)(a1 + 56), *(void *)(a1 + 64));
  }
  else
  {
    if (v6 - (void)v5 != 24)
    {
      std::string::basic_string[abi:ne180100]<0>(&v11, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Preprocessor.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v10, "apply");
      std::string::basic_string[abi:ne180100]<0>(&v9, "too many arguments to counter");
      DSPGraph::ThrowException(1886548769, &v11, 397, &v10, &v9);
    }
    uint64_t v7 = DSPGraph::strToLong(v5, (uint64_t)"counter step", 394, "apply");
    uint64_t result = caulk::numeric::exceptional_add<long>(*(void *)(a1 + 56), v7);
  }
  *(void *)(a1 + 5std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = result;
  return result;
}

void sub_1900F95DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (*(char *)(v27 + 23) < 0) {
    operator delete(*(void **)v27);
  }
  _Unwind_Resume(exception_object);
}

void DSPGraph::CounterMacro::~CounterMacro(void **this)
{
  DSPGraph::Macro::~Macro(this);
  JUMPOUT(0x192FC8940);
}

os_log_t ___ZN8DSPGraph6getLogEv_block_invoke_9605()
{
  os_log_t result = os_log_create("com.apple.coreaudio", "DSPGraph");
  DSPGraph::getLog(void)::gLog = (uint64_t)result;
  return result;
}

void sub_1900F97C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1900F98A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class ___ZL28getAVAudioChannelLayoutClassv_block_invoke_9646(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  v7[0] = 0;
  if (!AVFAudioLibraryCore(char **)::frameworkLibrary)
  {
    v7[1] = (void *)MEMORY[0x1E4F143A8];
    v7[2] = (void *)3221225472;
    v7[3] = ___ZL19AVFAudioLibraryCorePPc_block_invoke_9648;
    v7[4] = &__block_descriptor_40_e5_v8__0l;
    v7[5] = v7;
    long long v8 = xmmword_1E5688298;
    uint64_t v9 = 0;
    AVFAudioLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  }
  if (!AVFAudioLibraryCore(char **)::frameworkLibrary)
  {
    char v3 = [MEMORY[0x1E4F28B00] currentHandler];
    BOOL v4 = [NSString stringWithUTF8String:"void *AVFAudioLibrary()"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"AVFASoftLink.h", 63, @"%s", v7[0]);

    goto LABEL_10;
  }
  if (v7[0]) {
    free(v7[0]);
  }
  Class result = objc_getClass("AVAudioChannelLayout");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    char v5 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v6 = [NSString stringWithUTF8String:"Class getAVAudioChannelLayoutClass()_block_invoke"];
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, @"AVFASoftLink.h", 65, @"Unable to find class %s", "AVAudioChannelLayout");

LABEL_10:
    __break(1u);
  }
  getAVAudioChannelLayoutClass(void)::softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1900F9AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL19AVFAudioLibraryCorePPc_block_invoke_9648()
{
  uint64_t result = _sl_dlopen();
  AVFAudioLibraryCore(char **)::frameworkLibrary = result;
  return result;
}

void sub_1900F9C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1900F9D00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1900F9DE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  applesauce::raii::v1::detail::ScopeGuard<-[AVAudioChannelGroupSemantics createAudioChannelGroupSemantics]::$_0,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1900F9EE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1900F9F80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1900FA074(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1900FA210(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1900FA2C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t AACAudioFile::CreatePacketTable(AACAudioFile *this)
{
  return (*(uint64_t (**)(AACAudioFile *, uint64_t, void, uint64_t))(*(void *)this + 688))(this, -1, 0, 1);
}

uint64_t AACAudioFile::ScanForPackets(AACAudioFile *this, uint64_t a2, DataSource *a3, char a4)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  v31.int mStartOffset = 0;
  *(void *)&v31.mVariableFramesInPacket = 0;
  uint64_t v29 = 0;
  if (*((unsigned char *)this + 169)) {
    return 0;
  }
  char v5 = a3;
  if (!a3) {
    char v5 = (DataSource *)*((void *)this + 13);
  }
  long long v8 = (uint64_t *)*((void *)this + 15);
  if (!v8) {
    operator new();
  }
  uint64_t v9 = v8[3];
  if (a2 != -1 && v9 >= a2) {
    return 0;
  }
  unsigned int v30 = 0;
  uint64_t v10 = (*(uint64_t (**)(DataSource *, uint64_t *))(*(void *)v5 + 24))(v5, &v29);
  if (v10)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioFormatInfo buf = 136315394;
      *(void *)&uint8_t buf[4] = "AACAudioFile.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 856;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  GetSize failed", buf, 0x12u);
    }
  }
  else
  {
    if (v9)
    {
      uint64_t v12 = *((void *)this + 9);
      uint64_t v13 = v9 - 1;
      CompressedPacketTable::operator[]((uint64_t)buf, v8, v9 - 1);
      uint64_t v14 = *(void *)buf;
      CompressedPacketTable::operator[]((uint64_t)v28, v8, v13);
      uint64_t v15 = v14 + v12 + v28[3];
    }
    else
    {
      (*(void (**)(AACAudioFile *, void))(*(void *)this + 648))(this, 0);
      uint64_t v15 = *((void *)this + 9);
    }
    if (a2 == -1)
    {
      uint64_t v17 = -1;
    }
    else
    {
      uint64_t v16 = *((void *)this + 15);
      if (v16) {
        uint64_t v16 = *(void *)(v16 + 24);
      }
      uint64_t v17 = a2 - v16;
    }
    if (v15 >= v29)
    {
      uint64_t v10 = 0;
LABEL_41:
      *((unsigned char *)this + 169) = a4;
    }
    else
    {
      uint64_t v27 = v17;
LABEL_23:
      uint64_t v18 = (ACMP4BitStreams *)*((void *)this + 22);
      while (1)
      {
        uint64_t v19 = (*(uint64_t (**)(DataSource *, void, uint64_t, void, ACMP4BitStreams *, unsigned int *))(*(void *)v5 + 48))(v5, 0, v15, (*((_DWORD *)this + 46) - v18), v18, &v30);
        uint64_t v10 = v19;
        if (v19)
        {
          if (v19 != -39) {
            break;
          }
        }
        unsigned int v21 = v30;
        uint64_t v22 = *((unsigned int *)this + 43);
        if (v30 < v22) {
          break;
        }
        v28[0] = *((_DWORD *)this + 43);
        uint64_t v18 = (ACMP4BitStreams *)*((void *)this + 22);
        int ADTSPacketSize = ACMP4BitStreams::GetADTSPacketSize(v18, v28, v20);
        if (ADTSPacketSize)
        {
          int v25 = ADTSPacketSize;
          *(void *)AudioFormatInfo buf = v18;
          *(void *)&buf[8] = 72;
          *(void *)&buf[16] = v18;
          uint64_t v33 = 0;
          CABitStreamReader::ReadBits((CABitStreamReader *)buf, 0x20u);
          CABitStreamReader::ReadBits((CABitStreamReader *)buf, 0x16u);
          if (CABitStreamReader::ReadBits((CABitStreamReader *)buf, 2u))
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioFormatInfo buf = 136315394;
              *(void *)&uint8_t buf[4] = "AACAudioFile.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 912;
              _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Packet with multiple raw data blocks was found - unsupported", buf, 0x12u);
            }
            return 1685348671;
          }
          v31.mDataByteSize = v25 - v22;
          v31.int mStartOffset = v15 + v22 - *((void *)this + 9);
          if (v25 - (int)v22 > (*(unsigned int (**)(AACAudioFile *))(*(void *)this + 632))(this)) {
            (*(void (**)(AACAudioFile *, void))(*(void *)this + 648))(this, (v25 - v22));
          }
          v15 += (*((_DWORD *)this + 43) + v25 - v22);
          if (v15 > v29) {
            goto LABEL_44;
          }
          AudioFileObject::AppendPacket(this, &v31);
          uint64_t v26 = v27 - 1;
          if (v27 == -1) {
            uint64_t v26 = -1;
          }
          if (!v26) {
            break;
          }
          uint64_t v27 = v26;
          if (v15 < v29) {
            goto LABEL_23;
          }
          goto LABEL_41;
        }
        unsigned int v24 = ID3Size(v21, (const unsigned __int8 *)v18, (int *)buf);
        if (v24)
        {
          v15 += v24;
          *((unsigned char *)this + 168) = 1;
          if (v15 < v29) {
            continue;
          }
        }
        goto LABEL_41;
      }
    }
  }
  if ((v10 & 0xFFFFFFFE) == 0xFFFFFFD8)
  {
    if (v10 == -39)
    {
LABEL_44:
      uint64_t v10 = 0;
      *((unsigned char *)this + 169) = a4;
      return v10;
    }
    return 0;
  }
  return v10;
}

uint64_t AACAudioFile::PacketRangeUpperBound(uint64_t **this, uint64_t a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result = 1885563711;
  *a4 = 0;
  if ((a2 & 0x8000000000000000) == 0)
  {
    unint64_t v7 = *a3;
    if ((*a3 & 0x8000000000000000) == 0)
    {
      if ((a2 ^ 0x7FFFFFFFFFFFFFFFuLL) < v7) {
        return 4294967246;
      }
      uint64_t result = ((uint64_t (*)(uint64_t **, unint64_t, void, uint64_t))(*this)[86])(this, a2 + v7 + 1, 0, 1);
      if (!result || result == -39)
      {
        if (*((unsigned char *)this + 168))
        {
          uint64_t v10 = this[15];
          uint64_t result = 1885563711;
          if (v10)
          {
            int64_t v11 = v10[3];
            uint64_t v12 = *a3;
            if ((uint64_t)(*a3 + a2) > v11)
            {
              uint64_t v12 = (v11 - a2) & ~((v11 - a2) >> 63);
              *a3 = v12;
            }
            if (v12 >= 1)
            {
              uint64_t v13 = 0;
              uint64_t v14 = a2;
              while (1)
              {
                CompressedPacketTable::operator[]((uint64_t)&v20, v10, v14);
                unsigned int v15 = v21;
                if (v14 > 0)
                {
                  CompressedPacketTable::operator[]((uint64_t)&v20, v10, v14 - 1);
                  uint64_t v16 = v20;
                  CompressedPacketTable::operator[]((uint64_t)v19, v10, v14 - 1);
                  uint64_t v17 = v16 + v19[3];
                  if (v17 >= 0)
                  {
                    CompressedPacketTable::operator[]((uint64_t)&v20, v10, v14);
                    if (v20 - v17 == *((_DWORD *)this + 43)) {
                      int v18 = *((_DWORD *)this + 43);
                    }
                    else {
                      int v18 = 0;
                    }
                    v15 += v18;
                  }
                }
                if ((v13 ^ 0x7FFFFFFFFFFFFFFFuLL) < v15) {
                  return 4294967246;
                }
                v13 += v15;
                if (++v14 >= (uint64_t)(*a3 + a2)) {
                  goto LABEL_26;
                }
              }
            }
            uint64_t v13 = 0;
LABEL_26:
            uint64_t result = 0;
            *a4 = v13;
          }
        }
        else
        {
          return AudioFileObject::PacketRangeUpperBound((AudioFileObject *)this, a2, a3, a4);
        }
      }
    }
  }
  return result;
}

uint64_t AACAudioFile::GetPacketSizeUpperBound(AACAudioFile *this)
{
  return (768 * *((_DWORD *)this + 13));
}

uint64_t AACAudioFile::FindMaximumPacketSize(AACAudioFile *this)
{
  if (*((unsigned char *)this + 169)
    || !(*(unsigned int (**)(AACAudioFile *, uint64_t, void, uint64_t))(*(void *)this + 688))(this, -1, 0, 1))
  {
    return *((unsigned int *)this + 28);
  }
  else
  {
    return 0;
  }
}

uint64_t AACAudioFile::IsDataFormatSupported(AACAudioFile *this, const AudioStreamBasicDescription *a2)
{
  AudioFormatID mFormatID = a2->mFormatID;
  uint64_t result = 1;
  if ((mFormatID - 1633772392 > 0xB || ((1 << (mFormatID - 104)) & 0x901) == 0) && mFormatID != 1633772320) {
    return 0;
  }
  return result;
}

uint64_t AACAudioFile::GetEstimatedDuration(AACAudioFile *this, double *a2)
{
  double v4 = *((double *)this + 3);
  uint64_t v5 = *((unsigned int *)this + 11);
  if (*((unsigned char *)this + 169))
  {
    if (v5) {
      double v6 = (double)((*(uint64_t (**)(AACAudioFile *))(*(void *)this + 240))(this) * v5) / v4;
    }
    else {
      double v6 = 0.0;
    }
    uint64_t v7 = 0;
LABEL_8:
    *a2 = v6;
    return v7;
  }
  *a2 = 0.0;
  if ((*(unsigned int (**)(AACAudioFile *, uint64_t, void, uint64_t))(*(void *)this + 688))(this, 16, 0, 1))
  {
    return 0;
  }
  uint64_t v9 = (uint64_t *)*((void *)this + 15);
  if (!v9) {
    operator new();
  }
  uint64_t v21 = 0;
  uint64_t v7 = (*(uint64_t (**)(void, uint64_t *))(**((void **)this + 13) + 24))(*((void *)this + 13), &v21);
  if (!v7)
  {
    v21 -= *((void *)this + 9);
    unint64_t v10 = *((void *)this + 15);
    if (v10) {
      unint64_t v10 = *(void *)(v10 + 24);
    }
    uint64_t v11 = v10 - 1;
    unint64_t v12 = v10 >> 1;
    if (v12 >= 8) {
      uint64_t v13 = 8;
    }
    else {
      uint64_t v13 = v12;
    }
    uint64_t v14 = v11 - v13;
    CompressedPacketTable::operator[]((uint64_t)v20, v9, v11);
    uint64_t v15 = v20[0];
    CompressedPacketTable::operator[]((uint64_t)v18, v9, v11);
    uint64_t v16 = v15 + v19;
    CompressedPacketTable::operator[]((uint64_t)v17, v9, v13);
    double v6 = (double)v21 / (double)(v16 - v17[0]) * (double)(unint64_t)(v14 * v5) / v4;
    goto LABEL_8;
  }
  return v7;
}

uint64_t AACAudioFile::GetInfoDictionary(AACAudioFile *this, CACFDictionary *a2)
{
  double v5 = 0.0;
  char v3 = (AudioFileObject *)(*(uint64_t (**)(AACAudioFile *, double *))(*(void *)this + 544))(this, &v5);
  if (v3) {
    return 1886681407;
  }
  AudioFileObject::AddDurationToInfoDictionary(v3, a2, &v5);
  return 0;
}

uint64_t AACAudioFile::GetChannelLayout(AACAudioFile *this, unsigned int *a2, AudioChannelLayout *a3)
{
  uint64_t result = 561211770;
  if (a2)
  {
    LODWORD(v5) = *a2;
    if (*a2 >= 0xC)
    {
      if (v5 >= 0x20) {
        size_t v5 = 32;
      }
      else {
        size_t v5 = v5;
      }
      *a2 = v5;
      if (a3)
      {
        bzero(a3, v5);
        uint64_t result = 0;
        a3->mChannelLayoutTag = *((_DWORD *)this + 35);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t AACAudioFile::GetChannelLayoutSize(AACAudioFile *this, unsigned int *a2, unsigned int *a3)
{
  if (a3) {
    *a3 = 0;
  }
  if (a2) {
    *a2 = 32;
  }
  return 0;
}

uint64_t AACAudioFile::SetMagicCookieData(AACAudioFile *this, unsigned int a2, char *__src)
{
  return 0;
}

uint64_t AACAudioFile::GetMagicCookieData(AACAudioFile *this, unsigned int *a2, void *__dst)
{
  uint64_t result = 2003334207;
  if (__dst)
  {
    if (a2)
    {
      double v6 = (unsigned char *)*((void *)this + 18);
      uint64_t v7 = (unsigned char *)*((void *)this + 19);
      if (v6 != v7)
      {
        size_t v8 = v7 - v6;
        uint64_t result = 561211770;
        if (v8 <= *a2)
        {
          memmove(__dst, v6, v8);
          uint64_t result = 0;
          *a2 = *((_DWORD *)this + 38) - *((_DWORD *)this + 36);
        }
      }
    }
    else
    {
      return 561211770;
    }
  }
  return result;
}

uint64_t AACAudioFile::GetMagicCookieDataSize(AACAudioFile *this, unsigned int *a2, unsigned int *a3)
{
  if (a3) {
    *a3 = *((unsigned char *)this + 100) & 2;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v3 = *((void *)this + 18);
  uint64_t v4 = *((void *)this + 19);
  if (v3 == v4) {
    return 2003334207;
  }
  uint64_t result = 0;
  *a2 = v4 - v3;
  return result;
}

uint64_t AACAudioFile::GetNumPackets(AACAudioFile *this)
{
  if (*((unsigned char *)this + 169)
    || (int v4 = (*(uint64_t (**)(AACAudioFile *, uint64_t, void, uint64_t))(*(void *)this + 688))(this, -1, 0, 1), result = 0, !v4))
  {
    uint64_t v2 = *((void *)this + 15);
    if (v2) {
      return *(void *)(v2 + 24);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t AACAudioFile::GetNumBytes(AACAudioFile *this)
{
  uint64_t v3 = 0;
  (*(void (**)(void, uint64_t *))(**((void **)this + 13) + 24))(*((void *)this + 13), &v3);
  return v3 - *((void *)this + 9);
}

uint64_t AACAudioFile::UpdateSize(AACAudioFile *this)
{
  return 0;
}

uint64_t AACAudioFile::GetFormatList(AACAudioFile *this, UInt32 *ioPropertyDataSize, AudioFormatListItem *outPropertyData)
{
  Float64 v6 = *((double *)this + 3);
  AudioFormatID v7 = *((_DWORD *)this + 8);
  *(_OWORD *)unint64_t v10 = *(_OWORD *)((char *)this + 36);
  *(_OWORD *)&v10[12] = *((_OWORD *)this + 3);
  memset(inSpecifier, 0, sizeof(inSpecifier));
  DWORD2(inSpecifier[0]) = v7;
  uint64_t v8 = *((void *)this + 18);
  uint64_t v12 = 0;
  uint64_t v13 = v8;
  int v14 = *((_DWORD *)this + 38) - v8;
  if (AudioFormatGetProperty(0x666C7374u, 0x38u, inSpecifier, ioPropertyDataSize, outPropertyData))
  {
    outPropertyData->mASBD.mSampleRate = v6;
    outPropertyData->mASBD.AudioFormatID mFormatID = v7;
    *(_OWORD *)&outPropertyData->mASBD.mFormatFlags = *(_OWORD *)v10;
    *(_OWORD *)&outPropertyData->mASBD.mBytesPerFrame = *(_OWORD *)&v10[12];
    outPropertyData->mChannelLayoutTag = *((_DWORD *)this + 35);
    *AudioFormatInfo ioPropertyDataSize = 48;
  }
  return 0;
}

uint64_t AACAudioFile::GetFormatListInfo(AACAudioFile *this, UInt32 *outPropertyDataSize, unsigned int *a3)
{
  int v5 = *((_DWORD *)this + 8);
  memset(v8, 0, sizeof(v8));
  DWORD2(v8[0]) = v5;
  uint64_t v6 = *((void *)this + 18);
  uint64_t v9 = 0;
  uint64_t v10 = v6;
  int v11 = *((_DWORD *)this + 38) - v6;
  if (AudioFormatGetPropertyInfo(0x666C7374u, 0x38u, v8, outPropertyDataSize))
  {
    *outPropertyDataSize = 48;
    *a3 = 0;
  }
  return 0;
}

uint64_t AACAudioFile::WritePackets(AACAudioFile *this, unsigned __int8 a2, unsigned int a3, const AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, char *a7)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  v48.int mStartOffset = 0;
  *(void *)&v48.mVariableFramesInPacket = 0;
  int v47 = 0;
  if (!a6)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioFormatInfo buf = 136315394;
      *(void *)&uint8_t buf[4] = "AACAudioFile.cpp";
      __int16 v50 = 1024;
      int v51 = 328;
      uint64_t v12 = MEMORY[0x1E4F14500];
      uint64_t v13 = "%25s:%-5d  WritePackets Failed";
LABEL_9:
      _os_log_impl(&dword_18FEC0000, v12, OS_LOG_TYPE_ERROR, v13, buf, 0x12u);
    }
    return 0;
  }
  if (!*a6)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioFormatInfo buf = 136315394;
      *(void *)&uint8_t buf[4] = "AACAudioFile.cpp";
      __int16 v50 = 1024;
      int v51 = 329;
      uint64_t v12 = MEMORY[0x1E4F14500];
      uint64_t v13 = "%25s:%-5d  WritePackets Failed";
      goto LABEL_9;
    }
    return 0;
  }
  uint64_t v10 = (uint64_t *)*((void *)this + 15);
  if (v10) {
    uint64_t v11 = v10[3];
  }
  else {
    uint64_t v11 = 0;
  }
  if (v11 != a5)
  {
    uint64_t v14 = 1885563711;
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return v14;
    }
    *(_DWORD *)AudioFormatInfo buf = 136315394;
    *(void *)&uint8_t buf[4] = "AACAudioFile.cpp";
    __int16 v50 = 1024;
    int v51 = 331;
    uint64_t v17 = MEMORY[0x1E4F14500];
    int v18 = "%25s:%-5d  ";
LABEL_22:
    _os_log_impl(&dword_18FEC0000, v17, OS_LOG_TYPE_ERROR, v18, buf, 0x12u);
    return v14;
  }
  if (!a4)
  {
    uint64_t v14 = 1885563711;
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return v14;
    }
    *(_DWORD *)AudioFormatInfo buf = 136315394;
    *(void *)&uint8_t buf[4] = "AACAudioFile.cpp";
    __int16 v50 = 1024;
    int v51 = 332;
    uint64_t v17 = MEMORY[0x1E4F14500];
    int v18 = "%25s:%-5d  Packet Descriptions were not provided";
    goto LABEL_22;
  }
  if (!a5)
  {
    int v19 = *((_DWORD *)this + 8);
    int v20 = *((_DWORD *)this + 13);
    if (v20 == 2)
    {
      int v21 = 6619138;
    }
    else
    {
      if (v20 != 1)
      {
        v46[0] = a7;
        v46[1] = 385;
        v46[2] = a7;
        v46[3] = 0;
        ParseADTSChannelConfig((CABitStreamReader *)v46, (int *)buf, (int *)this + 35);
        if (!*((_DWORD *)this + 35))
        {
          int v22 = v20 - 3;
          if (v20 - 3) <= 5 && ((0x2Fu >> v22))
          {
            int v23 = dword_1901DB330[v22];
            *((_DWORD *)this + 35) = v23;
          }
        }
LABEL_33:
        if (v19 != 1633772320)
        {
          if (*((void *)this + 18) == *((void *)this + 19)) {
            return 2003334207;
          }
          *(_DWORD *)AudioFormatInfo buf = 0;
          LODWORD(v44) = 0;
          if (!(*(unsigned int (**)(AACAudioFile *, unint64_t *, unsigned char *))(*(void *)this + 192))(this, &v44, buf))
          {
            CA_calloc(v44);
            int v25 = v24;
            (*(uint64_t (**)(AACAudioFile *, unint64_t *, void *))(*(void *)this + 200))(this, &v44, v24);
            free(v25);
          }
        }
        operator new();
      }
      int v21 = 6553601;
    }
    *((_DWORD *)this + 35) = v21;
    goto LABEL_33;
  }
  uint64_t v16 = 0;
  if (!v10) {
    operator new();
  }
  if (*a6)
  {
    unint64_t v26 = 0;
    p_UInt32 mDataByteSize = &a4->mDataByteSize;
    while (1)
    {
      uint64_t v28 = *((void *)this + 15);
      if (v28)
      {
        uint64_t v29 = *(void *)(v28 + 24);
        if (v29 >= 1)
        {
          CompressedPacketTable::operator[]((uint64_t)buf, v10, v29 - 1);
          uint64_t v30 = *((void *)this + 15);
          if (v30) {
            uint64_t v30 = *(void *)(v30 + 24);
          }
          uint64_t v31 = *(void *)buf;
          CompressedPacketTable::operator[]((uint64_t)&v44, v10, v30 - 1);
          uint64_t v32 = v31 + v45;
          if ((**((_DWORD **)this + 25) & 0x1000) != 0) {
            uint64_t v33 = 7;
          }
          else {
            uint64_t v33 = 9;
          }
          uint64_t v16 = v32 + v33;
          v48.int mStartOffset = v32 + v33;
        }
      }
      v48.UInt32 mDataByteSize = *p_mDataByteSize;
      UInt32 mDataByteSize = v48.mDataByteSize;
      if (mDataByteSize > (*(unsigned int (**)(AACAudioFile *))(*(void *)this + 632))(this)) {
        (*(void (**)(AACAudioFile *, void))(*(void *)this + 648))(this, *p_mDataByteSize);
      }
      int v35 = (int *)*((void *)this + 25);
      int v36 = *v35;
      if ((*v35 & 0x1000) != 0) {
        int v37 = 7;
      }
      else {
        int v37 = 9;
      }
      UInt32 v38 = v37 + *p_mDataByteSize;
      if (!(v38 >> 13))
      {
        v35[1] = v35[1] & 0xFC001FFF | (v38 << 13);
        v35[3] = 0;
      }
      int v47 = v37;
      uint64_t v39 = *((void *)this + 22);
      int v40 = *v35;
      if ((v36 & 0x1000) != 0 && (v40 & 0x1000) == 0 || v35[3])
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          return 0;
        }
        *(_DWORD *)AudioFormatInfo buf = 136315394;
        *(void *)&uint8_t buf[4] = "AACAudioFile.cpp";
        __int16 v50 = 1024;
        int v51 = 421;
        uint64_t v12 = MEMORY[0x1E4F14500];
        uint64_t v13 = "%25s:%-5d  mMutableADTSHeader->Serialize Failed";
        goto LABEL_9;
      }
      *(_DWORD *)uint64_t v39 = bswap32(*((unsigned __int8 *)v35 + 7) | (16 * v40));
      unsigned int v41 = v35[1];
      *(_WORD *)(v39 + 4) = bswap32(v41) >> 8;
      *(unsigned char *)(v39 + std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v41;
      if ((*((unsigned char *)v35 + 1) & 0x10) != 0)
      {
        int v42 = 7;
      }
      else
      {
        *(_WORD *)(v39 + 7) = *((_WORD *)v35 + 4);
        int v42 = 9;
      }
      int v47 = v42;
      uint64_t v43 = -7;
      if ((**((_DWORD **)this + 25) & 0x1000) == 0) {
        uint64_t v43 = -9;
      }
      uint64_t v14 = (*(uint64_t (**)(void, void, uint64_t))(**((void **)this + 13) + 56))(*((void *)this + 13), 0, v43 + v16);
      if (v14)
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          return v14;
        }
        *(_DWORD *)AudioFormatInfo buf = 136315394;
        *(void *)&uint8_t buf[4] = "AACAudioFile.cpp";
        __int16 v50 = 1024;
        int v51 = 423;
        uint64_t v17 = MEMORY[0x1E4F14500];
        int v18 = "%25s:%-5d  GetDataSource()->WriteBytes Failed";
        goto LABEL_22;
      }
      uint64_t v14 = (*(uint64_t (**)(void, void, uint64_t, void, char *, int *))(**((void **)this + 13) + 56))(*((void *)this + 13), 0, v16, *p_mDataByteSize, &a7[*(void *)(p_mDataByteSize - 3)], &v47);
      if (v14) {
        break;
      }
      AudioFileObject::AppendPacket(this, &v48);
      ++v26;
      p_mDataByteSize += 4;
      if (v26 >= *a6) {
        goto LABEL_69;
      }
    }
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return v14;
    }
    *(_DWORD *)AudioFormatInfo buf = 136315394;
    *(void *)&uint8_t buf[4] = "AACAudioFile.cpp";
    __int16 v50 = 1024;
    int v51 = 429;
    uint64_t v17 = MEMORY[0x1E4F14500];
    int v18 = "%25s:%-5d  GetDataSource()->WriteBytes Failed";
    goto LABEL_22;
  }
  LODWORD(v2std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
LABEL_69:
  uint64_t v14 = 0;
  *a6 = v26;
  return v14;
}

void sub_1900FBB18(_Unwind_Exception *a1)
{
  MEMORY[0x192FC8940](v1, 0x1000C4003A0DE81);
  _Unwind_Resume(a1);
}

uint64_t AACAudioFile::ReadPackets(AACAudioFile *this, unsigned int a2, unsigned int *a3, AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, char *a7)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  if (a4) {
    BOOL v7 = a7 == 0;
  }
  else {
    BOOL v7 = 0;
  }
  int v8 = v7;
  if (!a6 || (uint64_t v10 = *a6, !v10))
  {
    uint64_t v18 = 2003334207;
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return v18;
    }
    *(_DWORD *)AudioFormatInfo buf = 136315394;
    *(void *)&uint8_t buf[4] = "AACAudioFile.cpp";
    LOWORD(v63[0]) = 1024;
    *(_DWORD *)((char *)v63 + 2) = 155;
    int v19 = MEMORY[0x1E4F14500];
    int v20 = "%25s:%-5d  invalid num packets parameter";
    goto LABEL_14;
  }
  uint64_t v17 = (*(uint64_t (**)(AACAudioFile *, uint64_t, void, uint64_t))(*(void *)this + 688))(this, v10 + a5, 0, 1);
  if (v17)
  {
    uint64_t v18 = v17;
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return v18;
    }
    *(_DWORD *)AudioFormatInfo buf = 136315394;
    *(void *)&uint8_t buf[4] = "AACAudioFile.cpp";
    LOWORD(v63[0]) = 1024;
    *(_DWORD *)((char *)v63 + 2) = 159;
    int v19 = MEMORY[0x1E4F14500];
    int v20 = "%25s:%-5d  ScanForPackets (AAC) failed";
LABEL_14:
    _os_log_impl(&dword_18FEC0000, v19, OS_LOG_TYPE_ERROR, v20, buf, 0x12u);
    return v18;
  }
  int v22 = (uint64_t *)*((void *)this + 15);
  if (!v22)
  {
    if (a5 <= 0) {
      return 1685348671;
    }
    else {
      return 1885563711;
    }
  }
  if (v22[3] >= a5) {
    uint64_t v18 = 1685348671;
  }
  else {
    uint64_t v18 = 1885563711;
  }
  if (v22[3] >= a5 && v22 != 0)
  {
    uint64_t v24 = v22[3];
    if (a3) {
      *a3 = 0;
    }
    uint64_t v25 = *a6;
    if (v25 + a5 > v24)
    {
      LODWORD(v25) = v24 - a5;
      *a6 = v24 - a5;
    }
    if (!v25)
    {
      if (a3) {
        *a3 = 0;
      }
      return 4294967257;
    }
    int v53 = a3;
    uint64_t v60 = a5;
    if (v8)
    {
      unint64_t v26 = v22;
      CompressedPacketTable::operator[]((uint64_t)buf, v22, a5);
      if (*a6)
      {
        unint64_t v27 = 0;
        uint64_t v28 = *(void *)buf;
        p_mVariableFramesInPacket = &a4->mVariableFramesInPacket;
        do
        {
          CompressedPacketTable::operator[]((uint64_t)buf, v26, v60 + v27);
          UInt32 v30 = v63[0];
          *((void *)p_mVariableFramesInPacket - 1) = *(void *)buf - v28;
          UInt32 *p_mVariableFramesInPacket = 0;
          p_mVariableFramesInPacket[1] = v30;
          p_mVariableFramesInPacket += 4;
          ++v27;
        }
        while (v27 < *a6);
      }
LABEL_67:
      uint64_t v18 = 0;
      unsigned int v50 = 0;
LABEL_68:
      if (v53) {
        *int v53 = v50;
      }
      return v18;
    }
    unsigned int v54 = a2;
    uint64_t v57 = a7;
    unint64_t v58 = v22;
    unsigned int v61 = 0;
    CompressedPacketTable::operator[]((uint64_t)buf, v22, a5);
    if (!*a6) {
      goto LABEL_67;
    }
    unint64_t v31 = 0;
    UInt32 v32 = 0;
    uint64_t v33 = 0;
    int v34 = 0;
    unsigned int v56 = 0;
    uint64_t v18 = 0;
    uint64_t v55 = *(void *)buf;
    int v35 = &a4->mVariableFramesInPacket;
    uint64_t v36 = a5;
    uint64_t v59 = a5;
    while (1)
    {
      uint64_t v37 = v33;
      UInt32 v38 = v32;
      uint64_t v39 = v36 + v31;
      CompressedPacketTable::operator[]((uint64_t)buf, v58, v36 + v31);
      uint64_t v33 = *(void *)buf;
      UInt32 v32 = v63[0];
      if (v59 < v39)
      {
        uint64_t v40 = *((unsigned int *)this + 43);
        if (*(void *)buf == v37 + v38 + v40)
        {
          if (!a4)
          {
            uint64_t v36 = v60;
            goto LABEL_58;
          }
          int v41 = 1;
          uint64_t v36 = v60;
          goto LABEL_54;
        }
        UInt32 v42 = v63[0];
        uint64_t v43 = *(void *)buf;
        uint64_t v44 = (*(uint64_t (**)(AACAudioFile *, void, uint64_t, unsigned int *, char *))(*(void *)this + 72))(this, v54, v55, &v61, v57);
        uint64_t v18 = v44;
        if (v44 != -39 && v44 != 0)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioFormatInfo buf = 136315394;
            *(void *)&uint8_t buf[4] = "AACAudioFile.cpp";
            LOWORD(v63[0]) = 1024;
            *(_DWORD *)((char *)v63 + 2) = 223;
            int v19 = MEMORY[0x1E4F14500];
            int v20 = "%25s:%-5d  ReadBytes failed";
            goto LABEL_14;
          }
          return v18;
        }
        uint64_t v33 = v43;
        v56 += v61;
        v57 += v61;
        unsigned int v61 = 0;
        uint64_t v59 = v39;
        uint64_t v55 = v43;
        UInt32 v32 = v42;
      }
      uint64_t v36 = v60;
      if (!a4) {
        goto LABEL_56;
      }
      int v41 = 0;
      LODWORD(v40) = 0;
LABEL_54:
      *((void *)v35 - 1) = (v40 + v34);
      *int v35 = 0;
      v35[1] = v32;
      if (v41)
      {
        LODWORD(v40) = *((_DWORD *)this + 43);
LABEL_58:
        UInt32 v46 = v40 + v32;
        goto LABEL_59;
      }
LABEL_56:
      UInt32 v46 = v32;
LABEL_59:
      unsigned int v47 = v61 + v46;
      v61 += v46;
      v34 += v46;
      ++v31;
      v35 += 4;
      if (v31 >= *a6)
      {
        if (!v47)
        {
          unsigned int v50 = v56;
          goto LABEL_68;
        }
        uint64_t v48 = (*(uint64_t (**)(AACAudioFile *, void, uint64_t, unsigned int *, char *))(*(void *)this + 72))(this, v54, v55, &v61, v57);
        uint64_t v18 = v48;
        if (v48 == -39 || v48 == 0)
        {
          unsigned int v50 = v61 + v56;
          goto LABEL_68;
        }
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioFormatInfo buf = 136315394;
          *(void *)&uint8_t buf[4] = "AACAudioFile.cpp";
          LOWORD(v63[0]) = 1024;
          *(_DWORD *)((char *)v63 + 2) = 259;
          int v19 = MEMORY[0x1E4F14500];
          int v20 = "%25s:%-5d  ReadBytes failed";
          goto LABEL_14;
        }
        return v18;
      }
    }
  }
  return v18;
}

uint64_t AACAudioFile::InitializeDataSource(AACAudioFile *this, const AudioStreamBasicDescription *a2)
{
  AudioFormatID mFormatID = a2->mFormatID;
  if (mFormatID - 1633772392 <= 0xB && ((1 << (mFormatID - 104)) & 0x901) != 0 || mFormatID == 1633772320) {
    return 0;
  }
  else {
    return 1718449215;
  }
}

uint64_t AACAudioFile::OpenFromDataSource(AACAudioFile *this)
{
  uint64_t v1 = MEMORY[0x1F4188790](this);
  uint64_t v2 = 0;
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  do
  {
    unsigned int v41 = 0x2000;
    uint64_t ASBD = (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint8_t *, unsigned int *))(**(void **)(v1 + 104)
                                                                                                  + 48))(*(void *)(v1 + 104), 0, v2, 0x2000, buf, &v41);
    if (ASBD)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        int v58 = 136315394;
        uint64_t v59 = "AACAudioFile.cpp";
        __int16 v60 = 1024;
        int v61 = 492;
        _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ReadBytes Failed", (uint8_t *)&v58, 0x12u);
      }
      goto LABEL_26;
    }
    if (!v41)
    {
      uint64_t ASBD = 2003334207;
      goto LABEL_26;
    }
    if (v41 < 0xA) {
      break;
    }
    unsigned int v4 = ID3Size(v41, buf, &v58);
    v2 += v4;
  }
  while (v4);
  *(void *)(v1 + 72) = v2;
  int v50 = 0;
  inint Codec = 0;
  unsigned int v48 = 9;
  HIDWORD(v59) = 0;
  uint64_t v62 = 0;
  uint64_t v64 = 0;
  int v68 = 0;
  MP4AudioProgramConfig::Clear((MP4AudioProgramConfig *)v67);
  long long v69 = 0u;
  long long v70 = 0u;
  DecoderConfigDescr::cleanup((DecoderConfigDescr *)&v58);
  memset(&v47, 0, sizeof(v47));
  CADeprecated::CAAutoFree<unsigned char>::CAAutoFree(&v46, 9uLL, 1);
  uint64_t ASBD = (*(uint64_t (**)(void, void, void, uint64_t, ACMP4BitStreams *, int *))(**(void **)(v1 + 104)
                                                                                              + 48))(*(void *)(v1 + 104), 0, *(void *)(v1 + 72), 9, v46, &v50);
  if (!ASBD)
  {
    if (v50 != 9)
    {
      uint64_t ASBD = 2003334207;
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_19;
      }
      *(_DWORD *)unsigned int v56 = 136315394;
      *(void *)&v56[4] = "AACAudioFile.cpp";
      *(_WORD *)&v56[12] = 1024;
      *(_DWORD *)&v56[14] = 527;
      int v5 = MEMORY[0x1E4F14500];
      uint64_t v6 = "%25s:%-5d  ReadBytes Failed";
      goto LABEL_18;
    }
    uint64_t v43 = 0;
    __int16 v44 = 0;
    int v45 = 0;
    BOOL v7 = v46;
    uint64_t v8 = ADTSHeader::Deserialize((ADTSHeader *)&v43, (const unsigned __int8 *)v46, 9u);
    if (v8)
    {
      uint64_t ASBD = v8;
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_19;
      }
      *(_DWORD *)unsigned int v56 = 136315394;
      *(void *)&v56[4] = "AACAudioFile.cpp";
      *(_WORD *)&v56[12] = 1024;
      *(_DWORD *)&v56[14] = 532;
      int v5 = MEMORY[0x1E4F14500];
      uint64_t v6 = "%25s:%-5d  ReadBytes Failed";
      goto LABEL_18;
    }
    if (((unsigned __int16)v43 & 0x1000) != 0) {
      unsigned int v11 = 7;
    }
    else {
      unsigned int v11 = 9;
    }
    *(_DWORD *)(v1 + 172) = v11;
    uint64_t v12 = *(void *)(v1 + 176);
    uint64_t v13 = *(void *)(v1 + 184);
    v56[0] = 0;
    unint64_t v14 = v13 - v12;
    if (v14 > 9)
    {
      if (v14 != 10) {
        *(void *)(v1 + 184) = v12 + 10;
      }
    }
    else
    {
      std::vector<unsigned char>::__append((void *)(v1 + 176), 10 - v14, v56);
      unsigned int v11 = *(_DWORD *)(v1 + 172);
      BOOL v7 = v46;
    }
    unsigned int v48 = v11;
    uint64_t ADTSPacketSize = ACMP4BitStreams::GetADTSPacketSize(v7, &v48, v9);
    if (!ADTSPacketSize)
    {
      uint64_t ASBD = 1685348671;
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_19;
      }
      *(_DWORD *)unsigned int v56 = 136315394;
      *(void *)&v56[4] = "AACAudioFile.cpp";
      *(_WORD *)&v56[12] = 1024;
      *(_DWORD *)&v56[14] = 541;
      int v5 = MEMORY[0x1E4F14500];
      uint64_t v6 = "%25s:%-5d  GetADTSPacketSize Failed";
      goto LABEL_18;
    }
    uint64_t v16 = ADTSPacketSize;
    CADeprecated::CAAutoFree<unsigned char>::CAAutoFree(&v43, ADTSPacketSize, 1);
    uint64_t ASBD = (*(uint64_t (**)(void, void, void, uint64_t, void *, int *))(**(void **)(v1 + 104) + 48))(*(void *)(v1 + 104), 0, *(void *)(v1 + 72), v16, v43, &v50);
    if (ASBD)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)unsigned int v56 = 136315394;
        *(void *)&v56[4] = "AACAudioFile.cpp";
        *(_WORD *)&v56[12] = 1024;
        *(_DWORD *)&v56[14] = 545;
        uint64_t v17 = MEMORY[0x1E4F14500];
        uint64_t v18 = "%25s:%-5d  ReadBytes Failed";
LABEL_84:
        _os_log_impl(&dword_18FEC0000, v17, OS_LOG_TYPE_ERROR, v18, v56, 0x12u);
        goto LABEL_85;
      }
      goto LABEL_85;
    }
    if (v50 != v16)
    {
      uint64_t ASBD = 2003334207;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)unsigned int v56 = 136315394;
        *(void *)&v56[4] = "AACAudioFile.cpp";
        *(_WORD *)&v56[12] = 1024;
        *(_DWORD *)&v56[14] = 546;
        uint64_t v17 = MEMORY[0x1E4F14500];
        uint64_t v18 = "%25s:%-5d  ReadBytes Failed";
        goto LABEL_84;
      }
LABEL_85:
      int v40 = 4;
LABEL_86:
      if (v43) {
        free(v43);
      }
      if (v40 == 4) {
        goto LABEL_19;
      }
      if (v40)
      {
        uint64_t ASBD = 1718449215;
        goto LABEL_19;
      }
      uint64_t ASBD = DecoderConfigDescr::GetASBD((DecoderConfigDescr *)&v58, &v47);
      if (ASBD) {
        goto LABEL_19;
      }
      uint64_t ASBD = (*(uint64_t (**)(uint64_t, AudioStreamBasicDescription *))(*(void *)v1 + 176))(v1, &v47);
      if (!ASBD)
      {
        uint64_t ASBD = DecoderConfigDescr::GetChannelLayoutTag((DecoderConfigDescr *)&v58, (unsigned int *)(v1 + 140));
        goto LABEL_19;
      }
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_19;
      }
      *(_DWORD *)unsigned int v56 = 136315394;
      *(void *)&v56[4] = "AACAudioFile.cpp";
      *(_WORD *)&v56[12] = 1024;
      *(_DWORD *)&v56[14] = 585;
      int v5 = MEMORY[0x1E4F14500];
      uint64_t v6 = "%25s:%-5d  bad data format";
LABEL_18:
      _os_log_impl(&dword_18FEC0000, v5, OS_LOG_TYPE_ERROR, v6, v56, 0x12u);
      goto LABEL_19;
    }
    UInt32 ioPropertyDataSize = v16;
    int v19 = (const unsigned __int8 *)v43;
    DecoderConfigDescr::cleanup((DecoderConfigDescr *)&v58);
    int v65 = -1;
    int v66 = -1;
    *(void *)unsigned int v56 = 0;
    *(_WORD *)&v56[8] = 0;
    *(_DWORD *)&v56[12] = 0;
    if (ADTSHeader::Deserialize((ADTSHeader *)v56, v19, 0x10u))
    {
      UInt32 v20 = 0;
      int v21 = v63;
    }
    else
    {
      unsigned int v22 = *(_DWORD *)v56;
      int v23 = (*(_DWORD *)v56 >> 10) & 3;
      LODWORD(v62) = v23 + 1;
      int v51 = 0;
      MP4SampleRate::SetFromIndex(&v51, (*(_DWORD *)v56 >> 6) & 0xF, 1);
      int v21 = (v22 >> 2) & 7;
      HIDWORD(v62) = v51;
      int v63 = v21;
      v67[1] = v23;
      int v68 = v51;
      if ((v22 & 0x1000) != 0) {
        UInt32 v24 = 7;
      }
      else {
        UInt32 v24 = 9;
      }
      UInt32 ioPropertyDataSize = v24;
      if ((v22 & 0x1000) != 0) {
        int v25 = -7;
      }
      else {
        int v25 = -9;
      }
      UInt32 v20 = ((*(_DWORD *)&v56[4] >> 13) & 0x1FFF) + v25;
    }
    if (v21)
    {
LABEL_55:
      if (OpenCodecComponent(0x61616320u, &inCodec, 0x61646563u))
      {
        uint64_t ASBD = 0;
      }
      else
      {
        UInt32 ioPropertyDataSize = 32;
        *(_DWORD *)unsigned int v56 = v16;
        *(void *)&v56[8] = v43;
        *(_DWORD *)&v56[16] = 0;
        uint64_t v57 = 0;
        uint64_t ASBD = AudioCodecGetProperty(inCodec, 0x6D327364u, &ioPropertyDataSize, v56);
        if (!ASBD && *(_DWORD *)&v56[16])
        {
          uint64_t v37 = *(void *)(v1 + 144);
          unint64_t v38 = *(void *)(v1 + 152) - v37;
          if (*(unsigned int *)&v56[16] <= v38)
          {
            if (*(unsigned int *)&v56[16] < v38) {
              *(void *)(v1 + 152) = v37 + *(unsigned int *)&v56[16];
            }
          }
          else
          {
            std::vector<unsigned char>::__append((std::vector<char> *)(v1 + 144), *(unsigned int *)&v56[16] - v38);
            uint64_t v37 = *(void *)(v1 + 144);
          }
          uint64_t v57 = v37;
          uint64_t ASBD = AudioCodecGetProperty(inCodec, 0x6D327364u, &ioPropertyDataSize, v56);
          if (ASBD || !*(_DWORD *)&v56[16]) {
            *(void *)(v1 + 152) = *(void *)(v1 + 144);
          }
          else {
            uint64_t ASBD = 0;
          }
        }
        AudioComponentInstanceDispose(inCodec);
      }
      int v40 = *(void *)(v1 + 144) == *(void *)(v1 + 152);
      goto LABEL_86;
    }
    if (v20 <= ioPropertyDataSize)
    {
LABEL_82:
      uint64_t ASBD = 560226676;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)unsigned int v56 = 136315394;
        *(void *)&v56[4] = "AACAudioFile.cpp";
        *(_WORD *)&v56[12] = 1024;
        *(_DWORD *)&v56[14] = 551;
        uint64_t v17 = MEMORY[0x1E4F14500];
        uint64_t v18 = "%25s:%-5d  ACMP4BitStreams::GetDecoderConfigFromADTSHeaderAndPCE Failed";
        goto LABEL_84;
      }
      goto LABEL_85;
    }
    unint64_t v26 = (unsigned int *)&v19[ioPropertyDataSize];
    unint64_t v27 = (unsigned int *)((char *)v26 + v20 - ioPropertyDataSize);
    *(void *)unsigned int v56 = v26;
    *(void *)&v56[8] = v27;
    *(void *)&v56[16] = 0;
    if ((v26 & 3) != 0)
    {
      int v28 = 0;
      char v29 = (_BYTE)v26 + 1;
      int v30 = -8;
      do
      {
        unint64_t v31 = (unsigned __int8 *)v26;
        int v32 = v30 + 16;
        *(_DWORD *)&v56[20] = v30 + 16;
        *(_DWORD *)&v56[16] = v28 << 8;
        unint64_t v26 = (unsigned int *)((char *)v26 + 1);
        *(void *)unsigned int v56 = v26;
        int v33 = *v31 | (v28 << 8);
        *(_DWORD *)&v56[16] = v33;
        v30 += 8;
        if ((v29 & 3) == 0) {
          break;
        }
        ++v29;
        int v28 = v33;
      }
      while (v26 < v27);
      unsigned int v34 = v33 << (24 - v30);
      unsigned int v35 = v34 >> 29;
      *(_DWORD *)&v56[16] = v34;
      *(_DWORD *)&v56[20] = v32 - 3;
      if (v32 - 3 >= 0)
      {
        int v36 = 8 * v34;
        goto LABEL_80;
      }
    }
    else
    {
      unsigned int v35 = 0;
      *(_DWORD *)&v56[20] = -3;
    }
    TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v56, v26);
    *(void *)v56 += 4;
    char v39 = v56[20];
    v35 |= *(_DWORD *)&v56[16] >> v56[20];
    *(_DWORD *)&v56[20] += 32;
    if (*(_DWORD *)&v56[20]) {
      int v36 = *(_DWORD *)&v56[16] << -v39;
    }
    else {
      int v36 = 0;
    }
LABEL_80:
    *(_DWORD *)&v56[16] = v36;
    if (v35 == 5)
    {
      MP4AudioProgramConfig::Deserialize(v67, (uint64_t)v56);
      goto LABEL_55;
    }
    goto LABEL_82;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)unsigned int v56 = 136315394;
    *(void *)&v56[4] = "AACAudioFile.cpp";
    *(_WORD *)&v56[12] = 1024;
    *(_DWORD *)&v56[14] = 526;
    int v5 = MEMORY[0x1E4F14500];
    uint64_t v6 = "%25s:%-5d  ReadBytes Failed";
    goto LABEL_18;
  }
LABEL_19:
  if (v46) {
    free(v46);
  }
  if (*((void *)&v70 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v70 + 1));
  }
  if (*((void *)&v69 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v69 + 1));
  }
  if (ASBD)
  {
LABEL_26:
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioFormatInfo buf = 136315394;
      int v53 = "AACAudioFile.cpp";
      __int16 v54 = 1024;
      int v55 = 448;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AACAudioFile::ParseAudioFile failed", buf, 0x12u);
    }
  }
  return ASBD;
}

void sub_1900FCAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  if (a10) {
    free(a10);
  }
  if (a12) {
    free(a12);
  }
  if (STACK[0x2540]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x2540]);
  }
  if (STACK[0x2530]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x2530]);
  }
  _Unwind_Resume(a1);
}

uint64_t AACAudioFile::Create(AACAudioFile *this, const __CFURL *a2, const AudioStreamBasicDescription *a3)
{
  AudioFormatID mFormatID = a3->mFormatID;
  if (mFormatID - 1633772392 <= 0xB && ((1 << (mFormatID - 104)) & 0x901) != 0 || mFormatID == 1633772320) {
    return AudioFileObject::Create(this, a2, a3);
  }
  else {
    return 1718449215;
  }
}

void AACAudioFile::~AACAudioFile(AACAudioFile *this)
{
  AACAudioFile::~AACAudioFile(this);
  JUMPOUT(0x192FC8940);
}

{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_1EDF8CB00;
  uint64_t v2 = *((void *)this + 25);
  *((void *)this + 25) = 0;
  if (v2) {
    MEMORY[0x192FC8940](v2, 0x1000C4003A0DE81);
  }
  uint64_t v3 = (void *)*((void *)this + 22);
  if (v3)
  {
    *((void *)this + 23) = v3;
    operator delete(v3);
  }
  unsigned int v4 = (void *)*((void *)this + 18);
  if (v4)
  {
    *((void *)this + 19) = v4;
    operator delete(v4);
  }
  AudioFileObject::~AudioFileObject(this);
}

void AACAudioFormat::NewStream(AACAudioFormat *this)
{
}

void AACAudioFormat::New(AACAudioFormat *this)
{
}

uint64_t AACAudioFormat::GetHFSCodes(AACAudioFormat *this, unsigned int *a2, void *__dst)
{
  int __src = 1633772320;
  if (*a2 >= 4) {
    size_t v3 = 4;
  }
  else {
    size_t v3 = *a2 & 0xFFFFFFFC;
  }
  *a2 = v3;
  if (__dst) {
    memcpy(__dst, &__src, v3);
  }
  return 0;
}

uint64_t AACAudioFormat::GetAvailableStreamDescriptions(AACAudioFormat *this, int a2, unsigned int *a3, void *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  UInt32 outPropertyDataSize = 0;
  uint64_t PropertyInfo = AudioFormatGetPropertyInfo(0x61636966u, 0, 0, &outPropertyDataSize);
  if (PropertyInfo) {
    return PropertyInfo;
  }
  UInt32 v8 = outPropertyDataSize;
  unint64_t v9 = (unint64_t)outPropertyDataSize >> 2;
  CADeprecated::CAAutoFree<unsigned int>::CAAutoFree(&v18, v9, 1);
  uint64_t PropertyInfo = GetAllFormatIDs(&outPropertyDataSize, v18);
  uint64_t v10 = v18;
  if (!PropertyInfo)
  {
    if (v8 < 4)
    {
      if (v18) {
        free(v18);
      }
    }
    else
    {
      uint64_t v11 = 0;
      if (v9 <= 1) {
        uint64_t v12 = 1;
      }
      else {
        uint64_t v12 = v9;
      }
      unsigned int v13 = a2 - 1633772392;
      BOOL v14 = 1;
      do
      {
        if (*((_DWORD *)v18 + v11) == a2 && (v13 <= 0xB && ((1 << v13) & 0x901) != 0 || a2 == 1633772320)) {
          break;
        }
        BOOL v14 = ++v11 < v9;
      }
      while (v12 != v11);
      free(v18);
      uint64_t v18 = 0;
      if (v14)
      {
        uint64_t v21 = 0;
        memset(outPropertyData, 0, sizeof(outPropertyData));
        DWORD2(outPropertyData[0]) = a2;
        UInt32 ioPropertyDataSize = 40;
        AudioFormatGetProperty(0x666D7469u, 0, 0, &ioPropertyDataSize, outPropertyData);
        if (*a3 >= 0x28) {
          size_t v15 = 40;
        }
        else {
          size_t v15 = 0;
        }
        *a3 = v15;
        if (a4) {
          memcpy(a4, outPropertyData, v15);
        }
        uint64_t PropertyInfo = 0;
        uint64_t v10 = v18;
        if (v18) {
          goto LABEL_4;
        }
        return PropertyInfo;
      }
    }
    *a3 = 0;
    return 1718449215;
  }
  if (v18) {
LABEL_4:
  }
    free(v10);
  return PropertyInfo;
}

void sub_1900FD040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  if (a11) {
    free(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AACAudioFormat::GetAvailableFormatIDs(AACAudioFormat *this, unsigned int *a2, void *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  UInt32 outPropertyDataSize = 0;
  uint64_t PropertyInfo = AudioFormatGetPropertyInfo(0x61636966u, 0, 0, &outPropertyDataSize);
  if (PropertyInfo) {
    return PropertyInfo;
  }
  UInt32 v7 = outPropertyDataSize;
  unint64_t v8 = (unint64_t)outPropertyDataSize >> 2;
  CADeprecated::CAAutoFree<unsigned int>::CAAutoFree(&outPropertyData, v8, 1);
  uint64_t PropertyInfo = GetAllFormatIDs(&outPropertyDataSize, outPropertyData);
  unint64_t v9 = outPropertyData;
  if (PropertyInfo)
  {
    if (outPropertyData) {
      free(outPropertyData);
    }
    return PropertyInfo;
  }
  if (v7 >= 4)
  {
    int v10 = 0;
    if (v8 <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = v8;
    }
    unsigned int v13 = (int *)outPropertyData;
    do
    {
      int v15 = *v13++;
      int v14 = v15;
      int v16 = (1 << (v15 - 104)) & 0x901;
      if ((v15 - 1633772392) <= 0xB && v16 != 0 || v14 == 1633772320) {
        __src[v10++] = v14;
      }
      --v12;
    }
    while (v12);
  }
  else
  {
    int v10 = 0;
    int v11 = 0;
    if (!outPropertyData) {
      goto LABEL_24;
    }
  }
  free(v9);
  int v11 = v10;
LABEL_24:
  size_t v19 = (4 * v11);
  *a2 = v19;
  if (a3) {
    memcpy(a3, __src, v19);
  }
  return 0;
}

void sub_1900FD1CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10) {
    free(a10);
  }
  _Unwind_Resume(exception_object);
}

void AACAudioFormat::GetFileTypeName(AACAudioFormat *this, const __CFString **a2)
{
  CABundleLocker::CABundleLocker((CABundleLocker *)&v5);
  size_t v3 = (__CFBundle *)sAudioToolboxBundle;
  if (sAudioToolboxBundle == -1)
  {
    pthread_once(&sOnce, InitGetAudioToolboxBundle);
    size_t v3 = (__CFBundle *)sAudioToolboxBundle;
    if (sAudioToolboxBundle) {
      goto LABEL_3;
    }
LABEL_5:
    CFStringRef v4 = (const __CFString *)CFRetain(@"AAC ADTS");
    goto LABEL_6;
  }
  if (!sAudioToolboxBundle) {
    goto LABEL_5;
  }
LABEL_3:
  CFStringRef v4 = CFBundleCopyLocalizedString(v3, @"AAC ADTS", @"AAC ADTS", @"FileTypeNames");
LABEL_6:
  *a2 = v4;
  CABundleLocker::~CABundleLocker((CABundleLocker *)&v5);
}

void sub_1900FD288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

const __CFArray *AACAudioFormat::GetMIMETypes(AACAudioFormat *this, const __CFArray **a2)
{
  values[2] = *(void **)MEMORY[0x1E4F143B8];
  values[0] = @"audio/aac";
  values[1] = @"audio/x-aac";
  CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)values, 2, MEMORY[0x1E4F1D510]);
  *a2 = result;
  return result;
}

const __CFArray *AACAudioFormat::GetUTIs(AACAudioFormat *this, const __CFArray **a2)
{
  v4[1] = *(const void **)MEMORY[0x1E4F143B8];
  v4[0] = @"public.aac-audio";
  CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v4, 1, MEMORY[0x1E4F1D510]);
  *a2 = result;
  return result;
}

const __CFArray *AACAudioFormat::GetExtensions(AACAudioFormat *this, const __CFArray **a2)
{
  values[2] = *(void **)MEMORY[0x1E4F143B8];
  values[0] = @"aac";
  values[1] = @"adts";
  CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)values, 2, MEMORY[0x1E4F1D510]);
  *a2 = result;
  return result;
}

uint64_t AACAudioFormat::FileDataIsThisFormat(AACAudioFormat *this, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v4 = 0;
  __int16 v5 = 0;
  int v6 = 0;
  if (ADTSHeader::Deserialize((ADTSHeader *)&v4, a3, a2)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 1;
  }
}

BOOL AACAudioFormat::ExtensionIsThisFormat(AACAudioFormat *this, CFStringRef theString1)
{
  uint64_t v3 = 1;
  if (CFStringCompare(theString1, @"aac", 1uLL)) {
    return CFStringCompare(theString1, @"adts", 1uLL) == kCFCompareEqualTo;
  }
  return v3;
}

void AACAudioFormat::~AACAudioFormat(AACAudioFormat *this)
{
}

uint64_t acv2::NonlinearPCMConverterFactory::BuildConverterChain(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 8);
  int v3 = *(_DWORD *)(a2 + 48);
  if (v2 == 1819304813)
  {
    if (v3 == 1970037111) {
      operator new();
    }
    if (v3 == 1634492791) {
      operator new();
    }
  }
  else if (v3 == 1819304813)
  {
    if (v2 == 1970037111) {
      operator new();
    }
    if (v2 == 1634492791) {
      operator new();
    }
  }
  return 1869627199;
}

void sub_1900FDA5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a18) {
    (*(void (**)(uint64_t))(*(void *)a18 + 8))(a18);
  }
  _Unwind_Resume(exception_object);
}

void acv2::ULawDecoder::Convert(acv2::ULawDecoder *this, unsigned __int8 *a2, _WORD *a3, int a4)
{
  for (; a4; --a4)
  {
    int v4 = *a2++;
    *a3++ = acv2::ulaw_table[v4];
  }
}

void acv2::ULawDecoder::~ULawDecoder(acv2::ULawDecoder *this)
{
}

void acv2::ALawDecoder::Convert(acv2::ALawDecoder *this, unsigned __int8 *a2, _WORD *a3, int a4)
{
  for (; a4; --a4)
  {
    int v4 = *a2++;
    *a3++ = acv2::alaw_table[v4];
  }
}

void acv2::ALawDecoder::~ALawDecoder(acv2::ALawDecoder *this)
{
}

uint64_t acv2::NonlinearPCMConverter::ConvertBufferList(uint64_t result, int a2, unsigned int **a3, _DWORD **a4)
{
  int v4 = (int *)*a3;
  int v5 = **a3;
  if (v5 != **a4) {
    std::terminate();
  }
  uint64_t v8 = result;
  if ((*(unsigned char *)(result + 28) & 0x20) != 0)
  {
    int v9 = 1;
    if (!v5) {
      return result;
    }
  }
  else
  {
    int v9 = *(_DWORD *)(result + 44);
    if (!v5) {
      return result;
    }
  }
  unint64_t v10 = 0;
  uint64_t v11 = (v9 * a2);
  uint64_t v12 = 4;
  do
  {
    CFArrayRef result = (*(uint64_t (**)(void, void, void, uint64_t))(**(void **)(v8 + 168) + 16))(*(void *)(v8 + 168), *(void *)&v4[v12], *(void *)&(*a4)[v12], v11);
    ++v10;
    int v4 = (int *)*a3;
    v12 += 4;
  }
  while (v10 < **a3);
  return result;
}

__CFString *acv2::NonlinearPCMConverter::ConverterName(acv2::NonlinearPCMConverter *this)
{
  return @"NonlinearPCMConverter";
}

void acv2::NonlinearPCMConverter::~NonlinearPCMConverter(acv2::NonlinearPCMConverter *this)
{
  *(void *)this = &unk_1EDF95FD8;
  uint64_t v2 = *((void *)this + 21);
  *((void *)this + 21) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  acv2::AudioConverterBase::~AudioConverterBase(this);
  JUMPOUT(0x192FC8940);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1EDF95FD8;
  uint64_t v2 = *((void *)this + 21);
  *((void *)this + 21) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  acv2::AudioConverterBase::~AudioConverterBase(this);
}

void acv2::ULawEncoder::Convert(acv2::ULawEncoder *this, char *a2, char *a3, int a4)
{
  for (; a4; --a4)
  {
    unsigned int v5 = *(__int16 *)a2;
    a2 += 2;
    int v4 = v5;
    int v6 = (v5 >> 8) & 0x80;
    if (v6) {
      int v4 = -v4;
    }
    if (v4 >= 32635) {
      int v4 = 32635;
    }
    unint64_t v7 = (v4 + 132);
    int v8 = acv2::exp_lut[(v7 >> 7)];
    int v9 = ((int)v7 >> (v8 + 3)) & 0xF | (16 * v8) | v6;
    if ((_BYTE)v9 == 0xFF) {
      char v10 = 2;
    }
    else {
      char v10 = ~(_BYTE)v9;
    }
    *a3++ = v10;
  }
}

void acv2::ULawEncoder::~ULawEncoder(acv2::ULawEncoder *this)
{
}

void acv2::ALawEncoder::Convert(acv2::ALawEncoder *this, char *a2, char *a3, int a4)
{
  if (a4)
  {
    for (int i = 0; i != a4; ++i)
    {
      unsigned int v6 = *(__int16 *)a2;
      a2 += 2;
      unsigned int v5 = v6;
      if (v6 == -32768)
      {
        LOBYTE(v7) = 42;
      }
      else
      {
        unsigned int v8 = v5 & 0x8000;
        if ((v5 & 0x8000) != 0) {
          unsigned int v5 = -v5;
        }
        if (v5 > 0xFF)
        {
          if (((v5 >> 15) ^ (v5 >> 14)))
          {
            int v11 = 0;
          }
          else
          {
            int v11 = 0;
            unsigned int v12 = v5;
            do
            {
              unsigned int v5 = 2 * v12;
              ++v11;
              int v13 = (v12 >> 14) ^ (v12 >> 13);
              v12 *= 2;
            }
            while ((v13 & 1) == 0);
          }
          unsigned int v10 = v5 >> 10;
          int v9 = 112 - 16 * v11;
        }
        else
        {
          int v9 = 0;
          unsigned int v10 = v5 >> 4;
        }
        unsigned int v7 = (v9 | (v8 >> 8) | v10 & 0xF) ^ 0xFFFFFFD5;
      }
      *a3++ = v7;
    }
  }
}

void acv2::ALawEncoder::~ALawEncoder(acv2::ALawEncoder *this)
{
}

void acv2::NonlinearPCMConverterFactory::~NonlinearPCMConverterFactory(acv2::NonlinearPCMConverterFactory *this)
{
}

uint64x2_t CreateMagicalWindow(uint64_t a1, int a2, uint64x2_t result)
{
  if (a2 >= 1)
  {
    *(float *)result.i32 = (float)a2;
    float32x4_t v44 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)result.i8, 0);
    uint64x2_t v45 = (uint64x2_t)vdupq_n_s64((unint64_t)a2 - 1);
    uint64_t v3 = (a2 + 3) & 0x1FFFFFFFCLL;
    uint64x2_t v4 = (uint64x2_t)xmmword_1901C5F70;
    CFArrayRef result = (uint64x2_t)xmmword_1901C64A0;
    int32x4_t v5 = (int32x4_t)xmmword_1901C5FC0;
    unsigned int v6 = (_DWORD *)(a1 + 8);
    __asm { FMOV            V1.4S, #4.0 }
    float32x4_t v43 = _Q1;
    __asm { FMOV            V1.4S, #1.0 }
    float32x4_t v54 = _Q1;
    __asm { FMOV            V4.4S, #3.0 }
    float64x2_t v41 = (float64x2_t)vdupq_n_s64(0x3FF459A5D6E6692DuLL);
    float32x4_t v42 = _Q4;
    int64x2_t v39 = vdupq_n_s64(4uLL);
    float32x4_t v40 = (float32x4_t)vdupq_n_s32(0x3FC90FDBu);
    do
    {
      int64x2_t v52 = (int64x2_t)result;
      int64x2_t v53 = (int64x2_t)v4;
      int8x16_t v14 = (int8x16_t)vuzp1q_s32((int32x4_t)vcgeq_u64(v45, result), (int32x4_t)vcgeq_u64(v45, v4));
      int32x4_t v51 = v5;
      float32x4_t v15 = vdivq_f32(vmulq_f32(vcvtq_f32_s32(v5), v43), v44);
      int8x16_t v16 = (int8x16_t)vcgtq_f32(v54, v15);
      v17.i64[0] = 0x4000000040000000;
      v17.i64[1] = 0x4000000040000000;
      int8x16_t v18 = (int8x16_t)vcgtq_f32(v17, v15);
      int8x16_t v19 = (int8x16_t)vcgtq_f32(v42, v15);
      float32x4_t v20 = vsubq_f32(v17, v15);
      v21.i64[0] = 0xC0000000C0000000;
      v21.i64[1] = 0xC0000000C0000000;
      int8x16_t v50 = vandq_s8(v14, v16);
      int8x16_t v22 = vbicq_s8(v14, v16);
      int32x4_t v23 = (int32x4_t)vandq_s8(v22, v18);
      int8x16_t v24 = vbicq_s8(v22, v18);
      int8x16_t v48 = (int8x16_t)v23;
      int32x4_t v49 = (int32x4_t)vandq_s8(v24, v19);
      int32x4_t v25 = (int32x4_t)vbicq_s8(v24, v19);
      float32x4_t v26 = (float32x4_t)vbslq_s8((int8x16_t)v25, (int8x16_t)vaddq_f32(v20, v17), vbslq_s8((int8x16_t)v49, (int8x16_t)vaddq_f32(v15, v21), vbslq_s8((int8x16_t)v23, (int8x16_t)v20, (int8x16_t)v15)));
      int8x16_t v46 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vorn_s8((int8x8_t)vmovn_s32(v25), vorr_s8((int8x8_t)vmovn_s32(v49), (int8x8_t)vmovn_s32(v23)))), 0x1FuLL));
      int8x16_t v47 = (int8x16_t)v25;
      float32x4_t v58 = vmulq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v26.f32), v41)), vmulq_f64(vcvt_hight_f64_f32(v26), v41)), v40);
      float v55 = cosf(v58.f32[1]);
      v27.f32[0] = cosf(v58.f32[0]);
      v27.f32[1] = v55;
      float32x4_t v56 = v27;
      float v28 = cosf(v58.f32[2]);
      float32x4_t v29 = v56;
      v29.f32[2] = v28;
      float32x4_t v57 = v29;
      float v30 = cosf(v58.f32[3]);
      float32x4_t v31 = v57;
      v31.f32[3] = v30;
      v32.i64[0] = 0x3F0000003F000000;
      v32.i64[1] = 0x3F0000003F000000;
      v33.i64[0] = 0xBF000000BF000000;
      v33.i64[1] = 0xBF000000BF000000;
      float32x4_t v34 = vmlaq_f32(v32, v33, v31);
      float32x4_t v35 = vmulq_f32(v34, v34);
      float32x4_t v36 = vsqrtq_f32((float32x4_t)vbslq_s8(v46, (int8x16_t)v35, (int8x16_t)vsubq_f32(v54, v35)));
      int16x4_t v37 = vmovn_s32((int32x4_t)vorrq_s8(vorrq_s8(v47, vorrq_s8(v50, v48)), (int8x16_t)v49));
      if (v37.i8[0]) {
        *(v6 - 2) = v36.i32[0];
      }
      if (v37.i8[2]) {
        *(v6 - 1) = v36.i32[1];
      }
      if (v37.i8[4]) {
        *unsigned int v6 = v36.i32[2];
      }
      if (v37.i8[6]) {
        v6[1] = v36.i32[3];
      }
      uint64x2_t v4 = (uint64x2_t)vaddq_s64(v53, v39);
      CFArrayRef result = (uint64x2_t)vaddq_s64(v52, v39);
      v38.i64[0] = 0x400000004;
      v38.i64[1] = 0x400000004;
      int32x4_t v5 = vaddq_s32(v51, v38);
      v6 += 4;
      v3 -= 4;
    }
    while (v3);
  }
  return result;
}

const char *acv2::Resampler2Wrapper::KernelName(acv2::Resampler2Wrapper *this)
{
  return "Resampler2Wrapper";
}

uint64_t acv2::Resampler2Wrapper::GetMinimumPhase(acv2::Resampler2Wrapper *this)
{
  return *(unsigned __int8 *)(**((void **)this + 3) + 185);
}

uint64_t acv2::Resampler2Wrapper::SetInitialPhase(uint64_t this, double a2)
{
  uint64_t v2 = *(uint64_t **)(this + 24);
  for (int i = *(uint64_t **)(this + 32);
        v2 != i;
        this = (*(uint64_t (**)(uint64_t, void))(*(void *)v5 + 96))(v5, *(unsigned int *)(v5 + 120)))
  {
    uint64_t v5 = *v2++;
    *(double *)(v5 + 144) = a2;
  }
  return this;
}

double acv2::Resampler2Wrapper::GetInitialPhase(acv2::Resampler2Wrapper *this)
{
  return *(double *)(**((void **)this + 3) + 144);
}

uint64_t acv2::Resampler2Wrapper::GetPrimeMethod(acv2::Resampler2Wrapper *this)
{
  return *((unsigned int *)this + 12);
}

uint64_t AudioSampleRateConverterCreate(uint64_t a1, int a2, CFTypeRef cf)
{
  if (a1)
  {
    CFTypeRef v3 = cf;
    if (cf)
    {
      switch(a2)
      {
        case 2:
          long long v13 = 0uLL;
          LODWORD(v14[0]) = 1;
          v14[1] = 0;
          GetAttribute<double>((unint64_t *)&v13, cf, @"InputSampleRate");
          GetAttribute<double>((unint64_t *)&v13 + 1, v3, @"OutputSampleRate");
          GetAttribute<unsigned int>((int *)v14, v3, @"NumberOfChannels");
          GetAttribute<double>((unint64_t *)&v14[1], v3, @"InitialPhase");
          if (*(double *)&v13 > 0.0 && *((double *)&v13 + 1) > 0.0 && LODWORD(v14[0])) {
            operator new();
          }
          break;
        case 1:
          long long v13 = 0uLL;
          v14[0] = (Resampler2 *)0x4000000001;
          v14[1] = 0;
          GetAttribute<double>((unint64_t *)&v13, cf, @"InputSampleRate");
          GetAttribute<double>((unint64_t *)&v13 + 1, v3, @"OutputSampleRate");
          GetAttribute<unsigned int>((int *)v14, v3, @"NumberOfChannels");
          GetAttribute<unsigned int>((int *)v14 + 1, v3, @"Quality");
          GetAttribute<double>((unint64_t *)&v14[1], v3, @"MaxVariableRateDeviation");
          if (*(double *)&v13 > 0.0 && *((double *)&v13 + 1) > 0.0 && LODWORD(v14[0])) {
            operator new();
          }
          break;
        case 0:
          long long v13 = 0uLL;
          *(_OWORD *)int8x16_t v14 = xmmword_1901C64B0;
          unint64_t v15 = 0;
          BOOL v16 = 1;
          GetAttribute<double>((unint64_t *)&v13, cf, @"InputSampleRate");
          GetAttribute<double>((unint64_t *)&v13 + 1, v3, @"OutputSampleRate");
          GetAttribute<unsigned int>((int *)v14, v3, @"NumberOfChannels");
          GetAttribute<unsigned int>((int *)v14 + 1, v3, @"Algorithm");
          GetAttribute<unsigned int>((int *)&v14[1], v3, @"Quality");
          GetAttribute<unsigned int>((int *)&v14[1] + 1, v3, @"PrimeMethod");
          GetAttribute<double>(&v15, v3, @"InitialPhase");
          CFRetain(v3);
          CFTypeID v4 = CFGetTypeID(v3);
          if (v4 == CFDictionaryGetTypeID())
          {
            CFTypeRef v17 = v3;
          }
          else
          {
            CFTypeRef v17 = 0;
            CFRelease(v3);
            CFTypeRef v3 = 0;
          }
          CFRetain(@"AllowVariableRate");
          uint64_t v5 = @"AllowVariableRate";
          CFTypeID v6 = CFGetTypeID(@"AllowVariableRate");
          CFTypeID TypeID = CFStringGetTypeID();
          if (v6 == TypeID)
          {
            int8x16_t v18 = @"AllowVariableRate";
          }
          else
          {
            int8x16_t v18 = 0;
            CFRelease(@"AllowVariableRate");
            uint64_t v5 = 0;
          }
          if (!v3)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
          }
          CFBooleanRef v8 = (const __CFBoolean *)applesauce::CF::details::at_key<applesauce::CF::StringRef const&>((const __CFDictionary *)v3, v5);
          if (v8 && (unsigned __int16 v9 = applesauce::CF::convert_as<BOOL,0>(v8), v9 > 0xFFu)) {
            int v10 = v9;
          }
          else {
            int v10 = v16;
          }
          BOOL v16 = v10 != 0;
          if (v6 == TypeID) {
            CFRelease(v5);
          }
          CFRelease(v3);
          if (*(double *)&v13 > 0.0 && *((double *)&v13 + 1) > 0.0 && LODWORD(v14[0])) {
            operator new();
          }
          break;
      }
    }
  }
  return 4294967246;
}

void sub_1900FE984(void *a1)
{
  uint64_t v3 = std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,OpaqueAudioSampleRateConverter::Resampler2Kernel,OpaqueAudioSampleRateConverter::RamstadKernel,OpaqueAudioSampleRateConverter::STLIKernel>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  MEMORY[0x192FC8940](v3, 0x10A2C40A97E99A9);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1900FE8E0);
}

void GetAttribute<double>(unint64_t *a1, CFTypeRef cf, const void *a3)
{
  CFTypeRef v4 = cf;
  CFRetain(cf);
  CFTypeID v6 = CFGetTypeID(v4);
  if (v6 != CFDictionaryGetTypeID())
  {
    CFRelease(v4);
    CFTypeRef v4 = 0;
  }
  if (a3)
  {
    CFRetain(a3);
    CFTypeID v7 = CFGetTypeID(a3);
    if (v7 != CFStringGetTypeID())
    {
      CFRelease(a3);
      a3 = 0;
    }
  }
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFBooleanRef v8 = applesauce::CF::details::at_key<applesauce::CF::StringRef const&>((const __CFDictionary *)v4, a3);
  if (!v8 || (unint64_t v9 = applesauce::CF::convert_as<double,0>((unint64_t)v8), !v10)) {
    unint64_t v9 = *a1;
  }
  *a1 = v9;
  if (a3) {
    CFRelease(a3);
  }
  CFRelease(v4);
}

void sub_1900FEC24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
}

void GetAttribute<unsigned int>(int *a1, CFTypeRef cf, const void *a3)
{
  CFTypeRef v4 = cf;
  CFRetain(cf);
  CFTypeID v6 = CFGetTypeID(v4);
  if (v6 != CFDictionaryGetTypeID())
  {
    CFRelease(v4);
    CFTypeRef v4 = 0;
  }
  if (a3)
  {
    CFRetain(a3);
    CFTypeID v7 = CFGetTypeID(a3);
    if (v7 != CFStringGetTypeID())
    {
      CFRelease(a3);
      a3 = 0;
    }
  }
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFNumberRef v8 = (const __CFNumber *)applesauce::CF::details::at_key<applesauce::CF::StringRef const&>((const __CFDictionary *)v4, a3);
  if (v8)
  {
    CFNumberRef v9 = applesauce::CF::convert_as<unsigned int,0>(v8);
    int v10 = *a1;
    if ((unint64_t)v9 >> 32) {
      int v10 = (int)v9;
    }
  }
  else
  {
    int v10 = *a1;
  }
  *a1 = v10;
  if (a3) {
    CFRelease(a3);
  }
  CFRelease(v4);
}

void sub_1900FEDA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,OpaqueAudioSampleRateConverter::Resampler2Kernel,OpaqueAudioSampleRateConverter::RamstadKernel,OpaqueAudioSampleRateConverter::STLIKernel>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 304);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))*(&off_1EDFA4530 + v2))(&v4, a1);
  }
  *(_DWORD *)(a1 + 304) = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN30OpaqueAudioSampleRateConverter16Resampler2KernelENS9_13RamstadKernelENS9_10STLIKernelEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSE_1EJS8_SA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void **)(a2 + 8);
  std::vector<std::unique_ptr<ShortTermLinearInterpolationResampler>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::vector<std::unique_ptr<ShortTermLinearInterpolationResampler>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    char v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        void *v4 = 0;
        if (v7) {
          MEMORY[0x192FC8940](v6, 0x1000C40AC875A91);
        }
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN30OpaqueAudioSampleRateConverter16Resampler2KernelENS9_13RamstadKernelENS9_10STLIKernelEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSE_1EJS8_SA_SB_SC_EEEEEEDcSG_DpT0_()
{
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN30OpaqueAudioSampleRateConverter16Resampler2KernelENS9_13RamstadKernelENS9_10STLIKernelEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSE_1EJS8_SA_SB_SC_EEEEEEDcSG_DpT0_(int a1, OpaqueAudioSampleRateConverter::Resampler2Kernel *this)
{
}

void OpaqueAudioSampleRateConverter::Resampler2Kernel::~Resampler2Kernel(OpaqueAudioSampleRateConverter::Resampler2Kernel *this)
{
  Resampler2::ShutdownVarispeedMode((Resampler2 *)*((unsigned int *)this + 13));
  uint64_t v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<Resampler2>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  uint64_t vars8;

  OpaqueAudioSampleRateConverter::Resampler2Kernel::~Resampler2Kernel(this);
  JUMPOUT(0x192FC8940);
}

uint64_t OpaqueAudioSampleRateConverter::STLIKernel::Reset(uint64_t this)
{
  uint64_t v1 = *(uint64_t **)(this + 8);
  uint64_t v2 = *(uint64_t **)(this + 16);
  while (v1 != v2)
  {
    uint64_t v3 = *v1++;
    *(void *)(v3 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = *(void *)(v3 + 8);
  }
  return this;
}

uint64_t OpaqueAudioSampleRateConverter::STLIKernel::Process(OpaqueAudioSampleRateConverter::STLIKernel *this, const float *const *a2, int a3, unsigned int *a4, float *const *a5, int a6, unsigned int *a7)
{
  uint64_t v7 = (ShortTermLinearInterpolationResampler **)*((void *)this + 1);
  int64x2_t v52 = (ShortTermLinearInterpolationResampler **)*((void *)this + 2);
  if (v7 != v52)
  {
    uint64_t v10 = 0;
    BOOL v12 = a3 == 1 && a6 == 1;
    BOOL v47 = v12;
    int8x16_t v50 = a2;
    int32x4_t v51 = a5;
    while (1)
    {
      uint64_t v13 = v10 | 1;
      if ((v10 | 1uLL) >= *((unsigned int *)this + 12))
      {
        int8x16_t v14 = 0;
        unint64_t v15 = 0;
      }
      else
      {
        int8x16_t v14 = a2[v13];
        unint64_t v15 = a5[v13];
      }
      BOOL v16 = a2[v10];
      CFTypeRef v17 = a5[v10];
      uint64_t v18 = *a4;
      uint64_t v19 = *a7;
      if (v16 && v17 != 0)
      {
        float32x4_t v21 = *v7;
        if (!v14 || v15) {
          break;
        }
      }
      a2 = v50;
      a5 = v51;
LABEL_56:
      v10 += 2;
      if (++v7 == v52) {
        goto LABEL_59;
      }
    }
    if (*(unsigned char *)v21)
    {
      LODWORD(v18) = *a7;
    }
    else
    {
      int8x16_t v48 = *v7;
      unint64_t NumberOfSourceFrames = ShortTermLinearInterpolationResampler::GetNumberOfSourceFrames(v21, v19);
      if (NumberOfSourceFrames <= v18)
      {
        LODWORD(v18) = NumberOfSourceFrames;
        unsigned int NumberOfOutputFrames = ShortTermLinearInterpolationResampler::GetNumberOfOutputFrames(v48, NumberOfSourceFrames);
        if (NumberOfOutputFrames < v19) {
          LODWORD(v19) = NumberOfOutputFrames;
        }
      }
      else
      {
        uint64_t v23 = ShortTermLinearInterpolationResampler::GetNumberOfOutputFrames(v48, v18);
        if (v23 > v19)
        {
          exception = __cxa_allocate_exception(4uLL);
          _DWORD *exception = 1835103336;
          __cxa_throw(exception, MEMORY[0x1E4FBA3B0], 0);
        }
        LODWORD(v19) = v23;
        unsigned int v24 = ShortTermLinearInterpolationResampler::GetNumberOfSourceFrames(v48, v23);
        if (v24 < v18) {
          LODWORD(v18) = v24;
        }
      }
      if (v19 != v18)
      {
        uint64_t v30 = (uint64_t)((double)(v18 - 1) * 4294967300.0 / (double)(v19 - 1));
        if (v14)
        {
          if (v19)
          {
            int v31 = 0;
            uint64_t v32 = 0;
            int v33 = v19;
            do
            {
              float v34 = (float)v32 * 2.3283e-10;
              int v35 = HIDWORD(v32) * a3 + a3;
              v17[v31] = v16[HIDWORD(v32) * a3] + (float)(v34 * (float)(v16[v35] - v16[HIDWORD(v32) * a3]));
              v15[v31] = v14[HIDWORD(v32) * a3] + (float)(v34 * (float)(v14[v35] - v14[HIDWORD(v32) * a3]));
              v32 += v30;
              v31 += a6;
              --v33;
            }
            while (v33);
          }
        }
        else if (v19)
        {
          int v39 = 0;
          uint64_t v40 = 0;
          int v41 = v19;
          do
          {
            float v42 = v16[HIDWORD(v40) * a3];
            v17[v39] = v42
                     + (float)((float)((float)v40 * 2.3283e-10)
                             * (float)(v16[HIDWORD(v40) * a3 + a3] - v42));
            v40 += v30;
            v39 += a6;
            --v41;
          }
          while (v41);
        }
        a2 = v50;
        a5 = v51;
        float32x4_t v21 = v48;
        goto LABEL_52;
      }
      float32x4_t v21 = v48;
    }
    if (v47)
    {
      int32x4_t v49 = v21;
      int v46 = v18;
      size_t v26 = (4 * v18);
      memcpy(v17, v16, v26);
      if (v14) {
        memcpy(v15, v14, v26);
      }
      a2 = v50;
      a5 = v51;
      float32x4_t v21 = v49;
      LODWORD(v18) = v46;
    }
    else
    {
      if (v14)
      {
        if (v18)
        {
          int v27 = 0;
          int v28 = 0;
          int v29 = v18;
          do
          {
            v17[v28] = v16[v27];
            v15[v28] = v14[v27];
            v27 += a3;
            v28 += a6;
            --v29;
          }
          while (v29);
        }
      }
      else if (v18)
      {
        int v36 = 0;
        int v37 = 0;
        int v38 = v18;
        do
        {
          v17[v37] = v16[v36];
          v36 += a3;
          v37 += a6;
          --v38;
        }
        while (v38);
      }
      a2 = v50;
      a5 = v51;
    }
LABEL_52:
    if (*(unsigned char *)v21) {
      unint64_t v43 = 0;
    }
    else {
      unint64_t v43 = *((void *)v21 + 2)
    }
          + *((void *)v21 + 3) * v19
          + ((unint64_t)-(int)v18 << 32);
    *((void *)v21 + 2) = v43;
    goto LABEL_56;
  }
  LODWORD(v18) = *a4;
  LODWORD(v19) = *a7;
LABEL_59:
  *a4 = v18;
  *a7 = v19;
  return 0;
}

void sub_1900FF30C(void *a1)
{
}

uint64_t OpaqueAudioSampleRateConverter::STLIKernel::GetExpectedNumberOfOutputFrames(ShortTermLinearInterpolationResampler ***this, uint64_t a2, unsigned int *a3)
{
  *a3 = a2;
  return ShortTermLinearInterpolationResampler::GetNumberOfOutputFrames(*this[1], a2);
}

unint64_t OpaqueAudioSampleRateConverter::STLIKernel::GetRequiredNumberOfInputFrames(ShortTermLinearInterpolationResampler ***this, uint64_t a2)
{
  return ShortTermLinearInterpolationResampler::GetNumberOfSourceFrames(*this[1], a2);
}

uint64_t OpaqueAudioSampleRateConverter::STLIKernel::SetVariableRate(uint64_t this, double a2)
{
  uint64_t v3 = this;
  char v4 = *(uint64_t **)(this + 8);
  uint64_t v5 = *(uint64_t **)(this + 16);
  while (v4 != v5)
    this = ShortTermLinearInterpolationResampler::SetRate(*v4++, a2);
  *(double *)(v3 + 5std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = a2;
  return this;
}

double OpaqueAudioSampleRateConverter::STLIKernel::GetVariableRate(OpaqueAudioSampleRateConverter::STLIKernel *this)
{
  return *((double *)this + 7);
}

uint64_t OpaqueAudioSampleRateConverter::STLIKernel::GetKernelSize(OpaqueAudioSampleRateConverter::STLIKernel *this)
{
  return 0;
}

double OpaqueAudioSampleRateConverter::STLIKernel::GetLatency(OpaqueAudioSampleRateConverter::STLIKernel *this)
{
  return 0.0;
}

uint64_t OpaqueAudioSampleRateConverter::STLIKernel::GetNumberOfChannels(OpaqueAudioSampleRateConverter::STLIKernel *this)
{
  return *((unsigned int *)this + 12);
}

double OpaqueAudioSampleRateConverter::STLIKernel::GetOutputSampleRate(OpaqueAudioSampleRateConverter::STLIKernel *this)
{
  return *((double *)this + 5);
}

double OpaqueAudioSampleRateConverter::STLIKernel::GetInputSampleRate(OpaqueAudioSampleRateConverter::STLIKernel *this)
{
  return *((double *)this + 4);
}

void OpaqueAudioSampleRateConverter::STLIKernel::~STLIKernel(OpaqueAudioSampleRateConverter::STLIKernel *this)
{
  uint64_t v1 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<ShortTermLinearInterpolationResampler>>::__destroy_vector::operator()[abi:ne180100](&v1);
  JUMPOUT(0x192FC8940);
}

{
  void **v1;

  uint64_t v1 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<ShortTermLinearInterpolationResampler>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

uint64_t OpaqueAudioSampleRateConverter::RamstadKernel::Reset(OpaqueAudioSampleRateConverter::RamstadKernel *this)
{
  return RamstadSRC::reset((OpaqueAudioSampleRateConverter::RamstadKernel *)((char *)this + 8));
}

uint64_t OpaqueAudioSampleRateConverter::RamstadKernel::Process(OpaqueAudioSampleRateConverter::RamstadKernel *this, const float **a2, int a3, unsigned int *a4, float **a5, int a6, unsigned int *a7)
{
  CFNumberRef v8 = (OpaqueAudioSampleRateConverter::RamstadKernel *)((char *)this + 8);
  int v9 = *((_DWORD *)this + 14);
  if (v9 == 2)
  {
    RamstadSRC::processStereo(v8, *a2, a2[1], *a5, a5[1], *a4, *a7, a3, a6);
  }
  else if (v9 == 1)
  {
    RamstadSRC::processMono(v8, *a2, *a5);
  }
  else
  {
    RamstadSRC::processMulti(v8, a2, a5);
  }
  return 0;
}

void sub_1900FF578(void *a1)
{
}

uint64_t OpaqueAudioSampleRateConverter::RamstadKernel::GetExpectedNumberOfOutputFrames(OpaqueAudioSampleRateConverter::RamstadKernel *this, uint64_t a2, unsigned int *a3)
{
  int v5 = a2;
  uint64_t result = RamstadSRC::outputSamplesForInputSamples((OpaqueAudioSampleRateConverter::RamstadKernel *)((char *)this + 8), a2, &v5);
  *a3 = v5;
  return result;
}

uint64_t OpaqueAudioSampleRateConverter::RamstadKernel::GetRequiredNumberOfInputFrames(OpaqueAudioSampleRateConverter::RamstadKernel *this)
{
  return RamstadSRC::inputSamplesForOutputSamples((OpaqueAudioSampleRateConverter::RamstadKernel *)((char *)this + 8));
}

uint64_t OpaqueAudioSampleRateConverter::RamstadKernel::SetVariableRate(OpaqueAudioSampleRateConverter::RamstadKernel *this, double a2)
{
  uint64_t result = RamstadSRC::setRate((OpaqueAudioSampleRateConverter::RamstadKernel *)((char *)this + 8), a2);
  *((double *)this + 37) = a2;
  return result;
}

double OpaqueAudioSampleRateConverter::RamstadKernel::GetVariableRate(OpaqueAudioSampleRateConverter::RamstadKernel *this)
{
  return *((double *)this + 37);
}

uint64_t OpaqueAudioSampleRateConverter::RamstadKernel::GetKernelSize(OpaqueAudioSampleRateConverter::RamstadKernel *this)
{
  return 0;
}

uint64_t OpaqueAudioSampleRateConverter::RamstadKernel::GetLatency(OpaqueAudioSampleRateConverter::RamstadKernel *this)
{
  return RamstadSRC::latencySeconds((OpaqueAudioSampleRateConverter::RamstadKernel *)((char *)this + 8));
}

uint64_t OpaqueAudioSampleRateConverter::RamstadKernel::GetNumberOfChannels(OpaqueAudioSampleRateConverter::RamstadKernel *this)
{
  return *((unsigned int *)this + 14);
}

double OpaqueAudioSampleRateConverter::RamstadKernel::GetOutputSampleRate(OpaqueAudioSampleRateConverter::RamstadKernel *this)
{
  return *((double *)this + 36);
}

double OpaqueAudioSampleRateConverter::RamstadKernel::GetInputSampleRate(OpaqueAudioSampleRateConverter::RamstadKernel *this)
{
  return *((double *)this + 35);
}

void OpaqueAudioSampleRateConverter::RamstadKernel::~RamstadKernel(OpaqueAudioSampleRateConverter::RamstadKernel *this)
{
  MEMORY[0x192FC77E0]((char *)this + 8);
  JUMPOUT(0x192FC8940);
}

{
  MEMORY[0x192FC77E0]((char *)this + 8);
}

uint64_t OpaqueAudioSampleRateConverter::Resampler2Kernel::Reset(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 8);
  uint64_t v2 = *(void *)(this + 16);
  while (v1 != v2)
  {
    this = (*(uint64_t (**)(void))(**(void **)v1 + 88))();
    v1 += 8;
  }
  return this;
}

uint64_t OpaqueAudioSampleRateConverter::Resampler2Kernel::Process(OpaqueAudioSampleRateConverter::Resampler2Kernel *this, const float *const *a2, uint64_t a3, unsigned int *a4, float *const *a5, unsigned int a6, unsigned int *a7)
{
  uint64_t v7 = (void *)*((void *)this + 1);
  CFNumberRef v8 = (void *)*((void *)this + 2);
  if (v7 != v8)
  {
    uint64_t v16 = 0;
    do
    {
      if (v16 + 1 >= (unint64_t)*((unsigned int *)this + 12))
      {
        CFTypeRef v17 = 0;
        uint64_t v18 = 0;
      }
      else
      {
        CFTypeRef v17 = a2[v16 + 1];
        uint64_t v18 = a5[v16 + 1];
      }
      (*(void (**)(void, const float *const, const float *, float *const, float *, unsigned int *, unsigned int *, uint64_t, void))(*(void *)*v7 + 32))(*v7, a2[v16], v17, a5[v16], v18, a4, a7, a3, a6);
      v16 += 2;
      ++v7;
    }
    while (v7 != v8);
  }
  return 0;
}

void sub_1900FF858(void *a1)
{
}

uint64_t OpaqueAudioSampleRateConverter::Resampler2Kernel::GetExpectedNumberOfOutputFrames(OpaqueAudioSampleRateConverter::Resampler2Kernel *this, unsigned int a2, unsigned int *a3)
{
  *a3 = a2;
  return (*(uint64_t (**)(void))(***((void ***)this + 1) + 144))(**((void **)this + 1));
}

uint64_t OpaqueAudioSampleRateConverter::Resampler2Kernel::GetRequiredNumberOfInputFrames(OpaqueAudioSampleRateConverter::Resampler2Kernel *this)
{
  return (*(uint64_t (**)(void))(***((void ***)this + 1) + 136))(**((void **)this + 1));
}

uint64_t OpaqueAudioSampleRateConverter::Resampler2Kernel::SetVariableRate(uint64_t this, double a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(void *)(this + 8);
  uint64_t v5 = *(void *)(this + 16);
  while (v4 != v5)
  {
    this = (*(uint64_t (**)(double))(**(void **)v4 + 56))(a2);
    v4 += 8;
  }
  *(double *)(v3 + 5std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = a2;
  return this;
}

double OpaqueAudioSampleRateConverter::Resampler2Kernel::GetVariableRate(OpaqueAudioSampleRateConverter::Resampler2Kernel *this)
{
  return *((double *)this + 7);
}

uint64_t OpaqueAudioSampleRateConverter::Resampler2Kernel::GetKernelSize(OpaqueAudioSampleRateConverter::Resampler2Kernel *this)
{
  uint64_t v1 = *((void *)this + 1);
  uint64_t v2 = *((void *)this + 2);
  if (v1 == v2) {
    return 0x100000000;
  }
  LODWORD(v3) = 0;
  do
  {
    unsigned int v4 = (*(uint64_t (**)(void))(**(void **)v1 + 152))();
    if (v4 <= v3) {
      uint64_t v3 = v3;
    }
    else {
      uint64_t v3 = v4;
    }
    v1 += 8;
  }
  while (v1 != v2);
  return v3 | 0x100000000;
}

uint64_t OpaqueAudioSampleRateConverter::Resampler2Kernel::GetLatency(uint64_t this)
{
  uint64_t v1 = *(uint64_t **)(this + 8);
  uint64_t v2 = *(uint64_t **)(this + 16);
  for (double i = 0.0; v1 != v2; ++v1)
  {
    uint64_t v4 = *v1;
    double v5 = 0.0;
    if ((*(_DWORD *)(*v1 + 120) | 2) == 2)
    {
      double v6 = 0.5;
      if (*(_DWORD *)(v4 + 116) != 1818848869) {
        double v6 = *(double *)(v4 + 168) + (double)*(int *)(*(void *)(v4 + 56) + 20);
      }
      double v5 = v6 / *(double *)(v4 + 96);
    }
    if (v5 >= i) {
      double i = v5;
    }
  }
  return this;
}

uint64_t OpaqueAudioSampleRateConverter::Resampler2Kernel::GetNumberOfChannels(OpaqueAudioSampleRateConverter::Resampler2Kernel *this)
{
  return *((unsigned int *)this + 12);
}

double OpaqueAudioSampleRateConverter::Resampler2Kernel::GetOutputSampleRate(OpaqueAudioSampleRateConverter::Resampler2Kernel *this)
{
  return *((double *)this + 5);
}

double OpaqueAudioSampleRateConverter::Resampler2Kernel::GetInputSampleRate(OpaqueAudioSampleRateConverter::Resampler2Kernel *this)
{
  return *((double *)this + 4);
}

const void *applesauce::CF::details::at_key<applesauce::CF::StringRef const&>(const __CFDictionary *a1, const void *a2)
{
  if (a2) {
    return CFDictionaryGetValue(a1, a2);
  }
  else {
    return 0;
  }
}

uint64_t AudioSampleRateConverterDispose(uint64_t result)
{
  if (result)
  {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,OpaqueAudioSampleRateConverter::Resampler2Kernel,OpaqueAudioSampleRateConverter::RamstadKernel,OpaqueAudioSampleRateConverter::STLIKernel>,(std::__variant_detail::_Trait)1>::~__dtor(result);
    JUMPOUT(0x192FC8940);
  }
  return result;
}

uint64_t AudioSampleRateConverterGetInputSampleRate(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(uint64_t (**)(void))(**(void **)(a1 + 312) + 16);
    return v1();
  }
  else
  {
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t AudioSampleRateConverterGetOutputSampleRate(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(uint64_t (**)(void))(**(void **)(a1 + 312) + 24);
    return v1();
  }
  else
  {
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t AudioSampleRateConverterGetNumberOfChannels(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(uint64_t (**)(void))(**(void **)(a1 + 312) + 32);
    return v1();
  }
  else
  {
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t AudioSampleRateConverterGetLatency(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(uint64_t (**)(void))(**(void **)(a1 + 312) + 40);
    return v1();
  }
  else
  {
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t AudioSampleRateConverterGetKernelSize(uint64_t a1, _DWORD *a2)
{
  if (a1)
  {
    uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 312) + 48))(*(void *)(a1 + 312));
    uint64_t v4 = v3 & 0xFF00000000;
    if (a2)
    {
      if (v4) {
        *a2 = v3;
      }
    }
    return v4 != 0;
  }
  else
  {
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t AudioSampleRateConverterGetVariableRate(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(uint64_t (**)(void))(**(void **)(a1 + 312) + 56);
    return v1();
  }
  else
  {
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t AudioSampleRateConverterSetVariableRate(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(uint64_t (**)(void))(**(void **)(a1 + 312) + 64);
    return v1();
  }
  else
  {
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t AudioSampleRateConverterGetRequiredNumberOfInputFrames(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(uint64_t (**)(void))(**(void **)(a1 + 312) + 72);
    return v1();
  }
  else
  {
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t AudioSampleRateConverterGetExpectedNumberOfOutputFrames(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (a1)
  {
    int v5 = a2;
    uint64_t result = (*(uint64_t (**)(void, uint64_t, int *))(**(void **)(a1 + 312) + 80))(*(void *)(a1 + 312), a2, &v5);
    if (a3) {
      *a3 = v5;
    }
  }
  else
  {
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t AudioSampleRateConverterProcess(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a1 && a2 && a4 && a5 && a7) {
    return (*(uint64_t (**)(void))(**(void **)(a1 + 312) + 88))();
  }
  else {
    return 4294967246;
  }
}

uint64_t AudioSampleRateConverterProcessAudioBufferLists(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v34[1] = *MEMORY[0x1E4F143B8];
  uint64_t result = 4294967246;
  if (a1 && a2 && a3 && a4 && a5)
  {
    uint64_t v11 = (*(uint64_t (**)(void))(**(void **)(a1 + 312) + 32))(*(void *)(a1 + 312));
    uint64_t v12 = v11;
    MEMORY[0x1F4188790](v11);
    unint64_t v15 = (char *)v34 - v14;
    if (v13 >= 0x200) {
      size_t v16 = 512;
    }
    else {
      size_t v16 = v13;
    }
    bzero((char *)v34 - v14, v16);
    if (*(_DWORD *)a2 == v11)
    {
      v34[0] = a5;
      if (v11)
      {
        CFTypeRef v17 = (uint64_t *)(a2 + 16);
        uint64_t v18 = v15;
        uint64_t v19 = v11;
        do
        {
          uint64_t v20 = *v17;
          v17 += 2;
          *(void *)uint64_t v18 = v20;
          v18 += 8;
          --v19;
        }
        while (v19);
      }
      uint64_t v21 = 1;
LABEL_21:
      MEMORY[0x1F4188790](result);
      size_t v26 = (char *)v34 - ((v25 + 15) & 0xFFFFFFFF0);
      bzero(v26, v16);
      if (*(_DWORD *)a4 == v11)
      {
        if (v11)
        {
          int v27 = (uint64_t *)(a4 + 16);
          int v28 = v26;
          uint64_t v29 = v21;
          do
          {
            uint64_t v30 = *v27;
            v27 += 2;
            *(void *)int v28 = v30;
            v28 += 8;
            --v12;
          }
          while (v12);
          uint64_t v11 = 1;
          return (*(uint64_t (**)(void, char *, uint64_t, uint64_t, char *, uint64_t, void))(**(void **)(a1 + 312) + 88))(*(void *)(a1 + 312), v15, v29, a3, v26, v11, v34[0]);
        }
        uint64_t v11 = 1;
      }
      else
      {
        if (*(_DWORD *)a4 != 1 || *(_DWORD *)(a4 + 8) != v11) {
          return 4294967246;
        }
        if (v11)
        {
          uint64_t v32 = *(void *)(a4 + 16);
          int v33 = v26;
          uint64_t v29 = v21;
          do
          {
            *(void *)int v33 = v32;
            v33 += 8;
            v32 += 4;
            --v12;
          }
          while (v12);
          return (*(uint64_t (**)(void, char *, uint64_t, uint64_t, char *, uint64_t, void))(**(void **)(a1 + 312) + 88))(*(void *)(a1 + 312), v15, v29, a3, v26, v11, v34[0]);
        }
      }
      uint64_t v29 = v21;
      return (*(uint64_t (**)(void, char *, uint64_t, uint64_t, char *, uint64_t, void))(**(void **)(a1 + 312)
                                                                                                  + 88))(*(void *)(a1 + 312), v15, v29, a3, v26, v11, v34[0]);
    }
    uint64_t result = 4294967246;
    if (*(_DWORD *)a2 == 1 && *(_DWORD *)(a2 + 8) == v11)
    {
      v34[0] = a5;
      if (v11)
      {
        uint64_t v22 = *(void *)(a2 + 16);
        uint64_t v23 = v15;
        uint64_t v24 = v11;
        do
        {
          *(void *)uint64_t v23 = v22;
          v23 += 8;
          v22 += 4;
          --v24;
        }
        while (v24);
        uint64_t v21 = v11;
      }
      else
      {
        uint64_t v21 = 0;
      }
      goto LABEL_21;
    }
  }
  return result;
}

uint64_t AudioSampleRateConverterReset(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(uint64_t (**)(void))(**(void **)(a1 + 312) + 96);
    return v1();
  }
  else
  {
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t DSPGraph::RingBufferBox::configureRingBuffer(uint64_t this, int a2, int a3)
{
  *(_DWORD *)(this + 772) = a2;
  *(_DWORD *)(this + 77std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = a3;
  return this;
}

uint64_t DSPGraph::RingBufferBox::interleaved(DSPGraph::RingBufferBox *this)
{
  return 0;
}

os_log_t ___ZN8DSPGraph6getLogEv_block_invoke_9997()
{
  os_log_t result = os_log_create("com.apple.coreaudio", "DSPGraph");
  DSPGraph::getLog(void)::gLog = (uint64_t)result;
  return result;
}

uint64_t DSPGraph::RingBufferBox::hasPresetData(DSPGraph::RingBufferBox *this)
{
  return 0;
}

uint64_t DSPGraph::FCBox::isNoOp(DSPGraph::FCBox *this)
{
  int v2 = DSPGraph::FCBox::upstreamSampleRate(this);
  if (v2 != DSPGraph::FCBox::downstreamSampleRate(this)) {
    return 0;
  }
  int v3 = DSPGraph::FCBox::upstreamBlockSize(this);
  if (v3 != DSPGraph::FCBox::downstreamBlockSize(this)) {
    return 0;
  }
  BOOL IsCBR = DSPGraph::FCBox::upstreamIsCBR(this);
  return IsCBR ^ DSPGraph::FCBox::downstreamIsCBR(this) ^ 1u;
}

uint64_t DSPGraph::FCBox::upstreamSampleRate(DSPGraph::FCBox *this)
{
  int v3 = (char *)this + 64;
  uint64_t v2 = *((void *)this + 8);
  if (*((void *)v3 + 1) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v7, "in");
    double v6 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      double v6 = (void *)*v6;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v5, v6, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
  }
  return **(double **)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2) + 120);
}

void sub_1901003F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (*(char *)(v23 - 17) < 0) {
    operator delete(*(void **)(v23 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::FCBox::downstreamSampleRate(DSPGraph::FCBox *this)
{
  int v3 = (char *)this + 88;
  uint64_t v2 = *((void *)this + 11);
  if (*((void *)v3 + 1) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v7, "out");
    double v6 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      double v6 = (void *)*v6;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v5, v6, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
  }
  return **(double **)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2) + 120);
}

void sub_190100518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (*(char *)(v23 - 17) < 0) {
    operator delete(*(void **)(v23 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::FCBox::upstreamBlockSize(DSPGraph::FCBox *this)
{
  int v3 = (char *)this + 64;
  uint64_t v2 = *((void *)this + 8);
  if (*((void *)v3 + 1) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v7, "in");
    double v6 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      double v6 = (void *)*v6;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v5, v6, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
  }
  return *(unsigned int *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2) + 120) + 40);
}

void sub_190100638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (*(char *)(v23 - 17) < 0) {
    operator delete(*(void **)(v23 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::FCBox::downstreamBlockSize(DSPGraph::FCBox *this)
{
  int v3 = (char *)this + 88;
  uint64_t v2 = *((void *)this + 11);
  if (*((void *)v3 + 1) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v7, "out");
    double v6 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      double v6 = (void *)*v6;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v5, v6, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
  }
  return *(unsigned int *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2) + 120) + 40);
}

void sub_190100758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (*(char *)(v23 - 17) < 0) {
    operator delete(*(void **)(v23 - 40));
  }
  _Unwind_Resume(exception_object);
}

BOOL DSPGraph::FCBox::upstreamIsCBR(DSPGraph::FCBox *this)
{
  int v3 = (char *)this + 64;
  uint64_t v2 = *((void *)this + 8);
  if (*((void *)v3 + 1) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v10, "in");
    int v9 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      int v9 = (void *)*v9;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v8, v9, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
  }
  uint64_t v4 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2) + 120);
  int v5 = *(_DWORD *)(v4 + 8);
  return v5 != 1718773105 && v5 != 1819304813 && *(_DWORD *)(v4 + 16) != 0;
}

void sub_1901008A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (*(char *)(v23 - 17) < 0) {
    operator delete(*(void **)(v23 - 40));
  }
  _Unwind_Resume(exception_object);
}

BOOL DSPGraph::FCBox::downstreamIsCBR(DSPGraph::FCBox *this)
{
  int v3 = (char *)this + 88;
  uint64_t v2 = *((void *)this + 11);
  if (*((void *)v3 + 1) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v10, "out");
    int v9 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      int v9 = (void *)*v9;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v8, v9, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
  }
  uint64_t v4 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2) + 120);
  int v5 = *(_DWORD *)(v4 + 8);
  return v5 != 1718773105 && v5 != 1819304813 && *(_DWORD *)(v4 + 16) != 0;
}

void sub_1901009F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (*(char *)(v23 - 17) < 0) {
    operator delete(*(void **)(v23 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::FCBox::copyOutput(DSPGraph::FCBox *this, uint64_t a2)
{
  uint64_t v4 = (char *)this + 88;
  uint64_t v3 = *((void *)this + 11);
  if (*((void *)v4 + 1) == v3)
  {
    std::string::basic_string[abi:ne180100]<0>(v33, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v32, "out");
    uint64_t v23 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v23 = (void *)*v23;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v22, v23, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 40))(v3);
  uint64_t v7 = *((void *)this + 11);
  if (*((void *)this + 12) == v7)
  {
    std::string::basic_string[abi:ne180100]<0>(v33, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v32, "out");
    uint64_t v25 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v25 = (void *)*v25;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v24, v25, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
  }
  unsigned int v8 = *(_DWORD *)(*(void *)(v6 + 120) + 20);
  *(_DWORD *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v7 + 40))(v7) + 56) + 72) = 0;
  uint64_t v9 = *((void *)this + 11);
  if (*((void *)this + 12) == v9)
  {
    std::string::basic_string[abi:ne180100]<0>(v33, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v32, "out");
    int v27 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      int v27 = (void *)*v27;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v26, v27, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
  }
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 40))(v9);
  DSPGraph::Buffer::setByteSize(*(DSPGraph::Buffer **)(v10 + 56), *(_DWORD *)(*(void *)(v10 + 56) + 100));
  uint64_t v11 = *((void *)this + 11);
  if (*((void *)this + 12) == v11)
  {
    std::string::basic_string[abi:ne180100]<0>(v33, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v32, "out");
    uint64_t v29 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v29 = (void *)*v29;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v28, v29, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
  }
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 40))(v11);
  DSPGraph::RingBuffer::read((DSPGraph::FCBox *)((char *)this + 808), a2 / v8, a2 / v8, (unsigned int **)(*(void *)(v12 + 56) + 80));
  uint64_t v13 = *((void *)this + 11);
  if (*((void *)this + 12) == v13)
  {
    std::string::basic_string[abi:ne180100]<0>(v33, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v32, "out");
    int v31 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      int v31 = (void *)*v31;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v30, v31, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 40))(v13);
  uint64_t v15 = *(void *)(result + 56);
  *(_DWORD *)(v15 + 64) = 1;
  double v16 = *(double *)(*((void *)this + 107) + 256);
  *(double *)(v15 + 8) = v16;
  if (*((unsigned char *)this + 864))
  {
    *(_DWORD *)(v15 + 64) = 3;
    double v17 = v16 / (double)DSPGraph::FCBox::downstreamSampleRate(this);
    double v18 = *((double *)this + 110);
    uint64_t result = DSPGraph::FCBox::upstreamSampleRate(this);
    *(void *)(v15 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = *((void *)this + 109) + llround((v17 - v18 / (double)result) * 24000000.0);
  }
  uint64_t v20 = (uint64_t *)*((void *)this + 25);
  uint64_t v19 = (uint64_t *)*((void *)this + 26);
  while (v20 != v19)
  {
    uint64_t v21 = *v20++;
    uint64_t result = DSPGraph::FileRecorder::record(v21, a2);
  }
  return result;
}

void sub_190100E78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::FCBox::downstreamFramesPerPacket(DSPGraph::FCBox *this)
{
  uint64_t v3 = (char *)this + 88;
  uint64_t v2 = *((void *)this + 11);
  if (*((void *)v3 + 1) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v7, "out");
    uint64_t v6 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v5, v6, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
  }
  return *(unsigned int *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2) + 120) + 20);
}

void sub_190100FCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (*(char *)(v23 - 17) < 0) {
    operator delete(*(void **)(v23 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::FCBox::bytesPerPacket(DSPGraph::FCBox *this)
{
  uint64_t v3 = (char *)this + 88;
  uint64_t v2 = *((void *)this + 11);
  if (*((void *)v3 + 1) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v7, "out");
    uint64_t v6 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v5, v6, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
  }
  return *(unsigned int *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2) + 120) + 16);
}

void sub_1901010F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (*(char *)(v23 - 17) < 0) {
    operator delete(*(void **)(v23 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::FCBox::numChannels(DSPGraph::FCBox *this)
{
  uint64_t v3 = (char *)this + 88;
  uint64_t v2 = *((void *)this + 11);
  if (*((void *)v3 + 1) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v7, "out");
    uint64_t v6 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v5, v6, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
  }
  return *(unsigned int *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2) + 120) + 28);
}

void sub_190101210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (*(char *)(v23 - 17) < 0) {
    operator delete(*(void **)(v23 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::FCBox::doProcess(uint64_t this, uint64_t a2)
{
  if (*(unsigned char *)(this + 744))
  {
    uint64_t v3 = this;
    if (atomic_fetch_or((atomic_uint *volatile)(this + 768), 0x80000000))
    {
      uint64_t v4 = *(DSPGraph::ParameterTap **)(this + 152);
      int v5 = *(DSPGraph::ParameterTap **)(this + 160);
      while (v4 != v5)
      {
        DSPGraph::ParameterTap::process(v4, (DSPGraph::Box *)v3);
        uint64_t v4 = (DSPGraph::ParameterTap *)((char *)v4 + 40);
      }
      uint64_t v6 = *(DSPGraph::PropertyTap **)(v3 + 176);
      uint64_t v7 = *(DSPGraph::PropertyTap **)(v3 + 184);
      while (v6 != v7)
      {
        DSPGraph::PropertyTap::process(v6, (DSPGraph::Box *)v3);
        uint64_t v6 = (DSPGraph::PropertyTap *)((char *)v6 + 64);
      }
      unsigned int v8 = *(caulk::concurrent::details::lf_read_sync_write_impl **)(v3 + 736);
      uint64_t v14 = v3;
      int v15 = a2;
      _ZNK5caulk10concurrent26lf_read_synchronized_writeINSt3__16vectorIN8DSPGraph18RenderObserverListINS4_3BoxEE14RenderObserverENS2_9allocatorIS8_EEEEE6accessIZNS7_7callAllEPS6_jNS4_18RenderCallbackTypeEEUlRKT_E_EEvOSG_(v8, &v14);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 472))(v3, a2);
      if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 712))(v3))
      {
        uint64_t v9 = *(uint64_t **)(v3 + 200);
        uint64_t v10 = *(uint64_t **)(v3 + 208);
        while (v9 != v10)
          DSPGraph::FileRecorder::record(*v9++, a2);
      }
      uint64_t v11 = *(DSPGraph::FileInjector ***)(v3 + 224);
      uint64_t v12 = *(DSPGraph::FileInjector ***)(v3 + 232);
      while (v11 != v12)
        DSPGraph::FileInjector::inject(*v11++, a2);
      uint64_t v13 = (caulk::concurrent::details::lf_read_sync_write_impl *)(*(void *)(v3 + 736) + 64);
      uint64_t v14 = v3;
      int v15 = a2;
      this = _ZNK5caulk10concurrent26lf_read_synchronized_writeINSt3__16vectorIN8DSPGraph18RenderObserverListINS4_3BoxEE14RenderObserverENS2_9allocatorIS8_EEEEE6accessIZNS7_7callAllEPS6_jNS4_18RenderCallbackTypeEEUlRKT_E_EEvOSG_(v13, &v14);
    }
    else
    {
      this = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)this + 472))(this, a2);
    }
    atomic_fetch_and((atomic_uint *volatile)(v3 + 768), 0x7FFFFFFFu);
  }
  return this;
}

void sub_19010140C(_Unwind_Exception *a1)
{
  atomic_fetch_and((atomic_uint *volatile)(v1 + 768), 0x7FFFFFFFu);
  _Unwind_Resume(a1);
}

void *DSPGraph::FCBox::isogroup(DSPGraph::Box *a1, uint64_t a2, float *a3)
{
  if ((*(unsigned int (**)(DSPGraph::Box *))(*(void *)a1 + 712))(a1))
  {
    return DSPGraph::Box::isogroup(a1, a2, (DSPGraph::IsoGroup *)a3);
  }
  else
  {
    uint64_t result = std::__hash_table<DSPGraph::Box *,std::hash<DSPGraph::Box *>,std::equal_to<DSPGraph::Box *>,std::allocator<DSPGraph::Box *>>::find<DSPGraph::Box *>(*(void *)a2, *(void *)(a2 + 8), (unint64_t)a1);
    if (!result)
    {
      std::__hash_table<DSPGraph::Box *,std::hash<DSPGraph::Box *>,std::equal_to<DSPGraph::Box *>,std::allocator<DSPGraph::Box *>>::__emplace_unique_key_args<DSPGraph::Box *,DSPGraph::Box *>(a2, (unint64_t)a1, (uint64_t)a1);
      DSPGraph::IsoGroup::add((DSPGraph::IsoGroup *)a3, a1);
      std::__hash_table<DSPGraph::FCBox *,std::hash<DSPGraph::FCBox *>,std::equal_to<DSPGraph::FCBox *>,std::allocator<DSPGraph::FCBox *>>::__emplace_unique_key_args<DSPGraph::FCBox *,DSPGraph::FCBox * const&>(a3 + 34, (unint64_t)a1, (uint64_t)a1);
      *((void *)a1 + 10std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = a3;
      uint64_t v7 = *(uint64_t (**)(DSPGraph::Box *, uint64_t, float *))(*(void *)a1 + 424);
      return (void *)v7(a1, a2, a3);
    }
  }
  return result;
}

uint64_t DSPGraph::FCBox::hasPresetData(DSPGraph::FCBox *this)
{
  return 0;
}

DSPGraph::FCBox *DSPGraph::FCBox::asOperativeFCBox(DSPGraph::FCBox *this)
{
  if ((*(unsigned int (**)(DSPGraph::FCBox *))(*(void *)this + 712))(this)) {
    return 0;
  }
  else {
    return this;
  }
}

uint64_t DSPGraph::FCBox::canProcessInPlace(DSPGraph::FCBox *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 712))();
}

const char *DSPGraph::FCBox::ClassName(DSPGraph::FCBox *this)
{
  return "FCBox";
}

BOOL DSPGraph::SRCBox::shouldAddRingBufferZeros(DSPGraph::SRCBox *this)
{
  return *((unsigned char *)this + 904) == 0;
}

uint64_t DSPGraph::SRCBox::reset(DSPGraph::SRCBox *this)
{
  DSPGraph::RingBufferBox::reset(this);
  uint64_t result = *((void *)this + 111);
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)result + 40);
    return v3();
  }
  return result;
}

uint64_t DSPGraph::SRCBox::uninitialize(DSPGraph::SRCBox *this)
{
  DSPGraph::Box::uninitialize(this);
  DSPGraph::SimpleABL::free((DSPGraph::SRCBox *)((char *)this + 912));
  uint64_t result = *((void *)this + 111);
  *((void *)this + 111) = 0;
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v3();
  }
  return result;
}

void DSPGraph::SRCBox::initialize(DSPGraph::SRCBox *this)
{
  if (((*((void *)this + 9) - *((void *)this + 8)) & 0x1FFFFFFFE0) != 0)
  {
    DSPGraph::RingBufferBox::initialize(this);
    uint64_t v2 = *((void *)this + 11);
    if (*((void *)this + 12) != v2)
    {
      uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
      uint64_t v4 = *((void *)this + 8);
      if (*((void *)this + 9) != v4)
      {
        int v5 = *(_DWORD *)(*(void *)(v3 + 120) + 28);
        if (*(_DWORD *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4) + 120) + 28) == v5)
        {
          DSPGraph::FCBox::upstreamSampleRate(this);
          DSPGraph::FCBox::downstreamSampleRate(this);
          if (*((unsigned char *)this + 904)) {
            operator new();
          }
          operator new();
        }
        std::string::basic_string[abi:ne180100]<0>(&v12, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_SRCBox.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v11, "initialize");
        std::string::basic_string[abi:ne180100]<0>(&v10, "input and output channel counts don't match");
        DSPGraph::ThrowException(1667788321, &v12, 442, &v11, &v10);
      }
      std::string::basic_string[abi:ne180100]<0>(&v12, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v11, "in");
      uint64_t v9 = (void *)((char *)this + 32);
      if (*((char *)this + 55) < 0) {
        uint64_t v9 = (void *)*v9;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v8, v9, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
    }
    std::string::basic_string[abi:ne180100]<0>(&v12, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v11, "out");
    uint64_t v7 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v7 = (void *)*v7;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v6, v7, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
  }
  std::string::basic_string[abi:ne180100]<0>(&v12, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_SRCBox.cpp");
  std::string::basic_string[abi:ne180100]<0>(&v11, "initialize");
  std::string::basic_string[abi:ne180100]<0>(&v10, "SRCBox has no inputs");
  DSPGraph::ThrowException(1970168609, &v12, 435, &v11, &v10);
}

void sub_190101BFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::ResamplerSRCKernel::process(uint64_t this, AudioBufferList *a2, AudioBufferList *a3, int a4, unsigned int *a5)
{
  uint64_t v6 = this;
  int v18 = a4;
  UInt32 v7 = 4 * *a5;
  if (*(_DWORD *)(this + 32) == 2)
  {
    mData = a2->mBuffers[0].mData;
    uint64_t v9 = *(void *)&a2[1].mBuffers[0].mNumberChannels;
    long long v10 = a3->mBuffers[0].mData;
    uint64_t v11 = *(void *)&a3[1].mBuffers[0].mNumberChannels;
    a3->mBuffers[0].UInt32 mDataByteSize = v7;
    *(&a3[1].mNumberBuffers + 1) = v7;
    return (*(uint64_t (**)(void, void *, uint64_t, void *, uint64_t, int *, unsigned int *, uint64_t, uint64_t))(***(void ***)(this + 8) + 32))(**(void **)(this + 8), mData, v9, v10, v11, &v18, a5, 1, 1);
  }
  else
  {
    uint64_t v12 = *(void *)(this + 8);
    if (*(void *)(this + 16) != v12)
    {
      unint64_t v13 = 0;
      p_mData = &a3->mBuffers[0].mData;
      int v15 = &a2->mBuffers[0].mData;
      do
      {
        double v16 = *v15;
        v15 += 2;
        double v17 = *p_mData;
        *((_DWORD *)p_mData - 1) = v7;
        this = (*(uint64_t (**)(void, void *, void, void *, void, int *, unsigned int *, uint64_t, uint64_t))(**(void **)(v12 + 8 * v13) + 32))(*(void *)(v12 + 8 * v13), v16, 0, v17, 0, &v18, a5, 1, 1);
        ++v13;
        uint64_t v12 = *(void *)(v6 + 8);
        p_mData += 2;
      }
      while (v13 < (*(void *)(v6 + 16) - v12) >> 3);
    }
  }
  return this;
}

uint64_t DSPGraph::ResamplerSRCKernel::selfLatencyInTicks(DSPGraph::ResamplerSRCKernel *this, unint64_t a2)
{
  uint64_t v2 = **((void **)this + 1);
  if ((*(_DWORD *)(v2 + 120) | 2) == 2)
  {
    double v3 = 0.5;
    if (*(_DWORD *)(v2 + 116) != 1818848869) {
      double v3 = *(double *)(v2 + 168) + (double)*(int *)(*(void *)(v2 + 56) + 20);
    }
    double v4 = v3 / *(double *)(v2 + 96);
  }
  else
  {
    double v4 = 0.0;
  }
  uint64_t v5 = llround(ceil(v4 * (double)a2));
  if (v5 <= 0) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = -1;
  }
  if (v5 >= 0) {
    return v5;
  }
  else {
    return v6;
  }
}

uint64_t DSPGraph::ResamplerSRCKernel::reset(uint64_t this)
{
  uint64_t v1 = *(uint64_t **)(this + 8);
  uint64_t v2 = *(uint64_t **)(this + 16);
  while (v1 != v2)
  {
    uint64_t v3 = *v1++;
    this = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 88))(v3);
  }
  return this;
}

const char *DSPGraph::ResamplerSRCKernel::ClassName(DSPGraph::ResamplerSRCKernel *this)
{
  return "ResamplerSRCKernel";
}

void DSPGraph::ResamplerSRCKernel::~ResamplerSRCKernel(DSPGraph::ResamplerSRCKernel *this)
{
  *(void *)this = &unk_1EDF9B778;
  uint64_t v1 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<Resampler2>>::__destroy_vector::operator()[abi:ne180100](&v1);
  JUMPOUT(0x192FC8940);
}

{
  void **v1;

  *(void *)this = &unk_1EDF9B778;
  uint64_t v1 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<Resampler2>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

uint64_t std::unique_ptr<RamstadSRC>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    MEMORY[0x192FC77E0]();
    JUMPOUT(0x192FC8940);
  }
  return result;
}

void std::vector<float *>::insert(void *a1, char *__src, unint64_t a3, char *a4)
{
  if (a3)
  {
    double v4 = a4;
    uint64_t v6 = __src;
    unsigned int v8 = (char *)a1[1];
    uint64_t v9 = a1[2];
    if (a3 <= (v9 - (uint64_t)v8) >> 3)
    {
      uint64_t v16 = v8 - __src;
      if (a3 <= (v8 - __src) >> 3)
      {
        uint64_t v19 = (char *)a1[1];
        uint64_t v18 = a3;
      }
      else
      {
        uint64_t v17 = 0;
        uint64_t v18 = v16 >> 3;
        uint64_t v19 = &v8[8 * (a3 - (v16 >> 3))];
        do
        {
          *(void *)&v8[v17] = *(void *)a4;
          v17 += 8;
        }
        while (8 * a3 - 8 * v18 != v17);
        a1[1] = v19;
        if (v8 == __src) {
          return;
        }
      }
      uint64_t v20 = &__src[8 * a3];
      uint64_t v21 = &v19[-8 * a3];
      uint64_t v22 = v19;
      if (v21 < v8)
      {
        uint64_t v22 = v19;
        do
        {
          uint64_t v23 = *(void *)v21;
          v21 += 8;
          *(void *)uint64_t v22 = v23;
          v22 += 8;
        }
        while (v21 < v8);
      }
      a1[1] = v22;
      if (v19 != v20) {
        memmove(&v19[-8 * ((v19 - v20) >> 3)], __src, v19 - v20);
      }
      if (v6 <= v4)
      {
        if (a1[1] <= (unint64_t)v4) {
          unint64_t v24 = 0;
        }
        else {
          unint64_t v24 = a3;
        }
        v4 += 8 * v24;
      }
      do
      {
        *(void *)uint64_t v6 = *(void *)v4;
        v6 += 8;
        --v18;
      }
      while (v18);
    }
    else
    {
      long long v10 = (char *)*a1;
      unint64_t v11 = a3 + ((uint64_t)&v8[-*a1] >> 3);
      if (v11 >> 61) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v12 = (__src - v10) >> 3;
      uint64_t v13 = v9 - (void)v10;
      if (v13 >> 2 > v11) {
        unint64_t v11 = v13 >> 2;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v11;
      }
      if (v14) {
        unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v14);
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v25 = (void *)(v14 + 8 * v12);
      size_t v26 = (char *)&v25[a3];
      uint64_t v27 = 8 * a3;
      int v28 = v25;
      do
      {
        *v28++ = *(void *)v4;
        v27 -= 8;
      }
      while (v27);
      uint64_t v29 = (char *)*a1;
      if ((char *)*a1 != v6)
      {
        uint64_t v30 = v6;
        do
        {
          uint64_t v31 = *((void *)v30 - 1);
          v30 -= 8;
          *--uint64_t v25 = v31;
        }
        while (v30 != v29);
      }
      unint64_t v32 = v14 + 8 * v15;
      int v33 = (char *)a1[1];
      int64_t v34 = v33 - v6;
      if (v33 != v6) {
        memmove(v26, v6, v33 - v6);
      }
      int v35 = (char *)*a1;
      *a1 = v25;
      a1[1] = &v26[v34];
      a1[2] = v32;
      if (v35)
      {
        operator delete(v35);
      }
    }
  }
}

uint64_t DSPGraph::RamstadSRCKernel::process(DSPGraph::RamstadSRCKernel *this, AudioBufferList *a2, AudioBufferList *a3, uint64_t a4, unsigned int *a5)
{
  int v6 = a4;
  int v31 = 0;
  int v10 = RamstadSRC::outputSamplesForInputSamples(*((RamstadSRC **)this + 1), a4, &v31);
  BOOL v11 = v10 <= 0;
  unsigned int v12 = v10 & 0xFFFFFF00 | (v10 & ~(v10 >> 31));
  if (v11) {
    int v13 = 0;
  }
  else {
    int v13 = -1;
  }
  if (v11) {
    unsigned int v14 = v13;
  }
  else {
    unsigned int v14 = v12;
  }
  if (v14 > *a5)
  {
    std::string::basic_string[abi:ne180100]<0>(&v30, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_SRCBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v29, "process");
    std::string::basic_string[abi:ne180100]<0>(&v28, "internal error. SRC output would be more than slice duration.");
    DSPGraph::ThrowException(1718775073, &v30, 386, &v29, &v28);
  }
  *a5 = v14;
  uint64_t v15 = *((unsigned int *)this + 16);
  if (v15)
  {
    UInt32 v16 = 4 * v14;
    if (v15 == 1)
    {
      mData = (const float *)a2->mBuffers[0].mData;
      uint64_t v23 = (float *)a3->mBuffers[0].mData;
      a3->mBuffers[0].UInt32 mDataByteSize = v16;
      return RamstadSRC::processMono(*((RamstadSRC **)this + 1), mData, v23);
    }
    if (v15 == 2)
    {
      uint64_t v17 = (const float *)a2->mBuffers[0].mData;
      uint64_t v18 = *(const float **)&a2[1].mBuffers[0].mNumberChannels;
      uint64_t v19 = (float *)a3->mBuffers[0].mData;
      uint64_t v20 = *(float **)&a3[1].mBuffers[0].mNumberChannels;
      a3->mBuffers[0].UInt32 mDataByteSize = v16;
      *(&a3[1].mNumberBuffers + 1) = v16;
      return RamstadSRC::processStereo(*((RamstadSRC **)this + 1), v17, v18, v19, v20, v6, *a5, 1, 1);
    }
    uint64_t v24 = 0;
    p_mData = &a3->mBuffers[0].mData;
    size_t v26 = &a2->mBuffers[0].mData;
    do
    {
      uint64_t v27 = *v26;
      v26 += 2;
      *(void *)(*((void *)this + 2) + 8 * v24) = v27;
      *(void *)(*((void *)this + 5) + 8 * v24) = *p_mData;
      *((_DWORD *)p_mData - 1) = v16;
      ++v24;
      p_mData += 2;
    }
    while (v15 != v24);
  }
  return RamstadSRC::processMulti(*((RamstadSRC **)this + 1), *((const float *const **)this + 2), *((float *const **)this + 5));
}

void sub_190102428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::RamstadSRCKernel::selfLatencyInTicks(DSPGraph::RamstadSRCKernel *this, unint64_t a2)
{
  uint64_t v2 = llround(5.0 / *((double *)this + 9) * (double)a2);
  if (v2 <= 0) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = -1;
  }
  if (v2 >= 0) {
    return v2;
  }
  else {
    return v3;
  }
}

uint64_t DSPGraph::RamstadSRCKernel::reset(RamstadSRC **this)
{
  return RamstadSRC::reset(this[1]);
}

const char *DSPGraph::RamstadSRCKernel::ClassName(DSPGraph::RamstadSRCKernel *this)
{
  return "RamstadSRCKernel";
}

void DSPGraph::RamstadSRCKernel::~RamstadSRCKernel(DSPGraph::RamstadSRCKernel *this)
{
  *(void *)this = &unk_1EDF99678;
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 2);
  if (v3)
  {
    *((void *)this + 3) = v3;
    operator delete(v3);
  }
  std::unique_ptr<RamstadSRC>::reset[abi:ne180100]((uint64_t *)this + 1, 0);
  JUMPOUT(0x192FC8940);
}

{
  void *v2;
  void *v3;

  *(void *)this = &unk_1EDF99678;
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 2);
  if (v3)
  {
    *((void *)this + 3) = v3;
    operator delete(v3);
  }
  std::unique_ptr<RamstadSRC>::reset[abi:ne180100]((uint64_t *)this + 1, 0);
}

double DSPGraph::SRCBox::open(DSPGraph::SRCBox *this)
{
  uint64_t v1 = *((void *)this + 1);
  double result = *(double *)(v1 + 928);
  *((double *)this + 112) = result;
  *((unsigned char *)this + 904) = *(unsigned char *)(v1 + 936);
  return result;
}

void *DSPGraph::SRCBox::process(DSPGraph::SRCBox *this, uint64_t a2)
{
  if ((*(unsigned int (**)(DSPGraph::SRCBox *))(*(void *)this + 712))(this))
  {
    uint64_t v4 = *((void *)this + 11);
    if (*((void *)this + 12) == v4)
    {
      std::string::basic_string[abi:ne180100]<0>(v42, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v41, "out");
      int64_t v34 = (void *)((char *)this + 32);
      if (*((char *)this + 55) < 0) {
        int64_t v34 = (void *)*v34;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v33, v34, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
    }
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
    uint64_t v6 = *((void *)this + 8);
    if (*((void *)this + 9) == v6)
    {
      std::string::basic_string[abi:ne180100]<0>(v42, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v41, "in");
      int v38 = (void *)((char *)this + 32);
      if (*((char *)this + 55) < 0) {
        int v38 = (void *)*v38;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v37, v38, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
    }
    UInt32 v7 = *(DSPGraph::Buffer **)(v5 + 56);
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 40))(v6);
    DSPGraph::Buffer::copyFrom(v7, *(DSPGraph::Buffer **)(v8 + 56));
  }
  else
  {
    uint64_t v9 = *((void *)this + 8);
    if (*((void *)this + 9) == v9)
    {
      std::string::basic_string[abi:ne180100]<0>(v42, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v41, "in");
      int v36 = (void *)((char *)this + 32);
      if (*((char *)this + 55) < 0) {
        int v36 = (void *)*v36;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v35, v36, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
    }
    uint64_t v10 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v9 + 40))(v9) + 56);
    int v11 = *(_DWORD *)(v10 + 64);
    *((unsigned char *)this + 864) = (v11 & 2) != 0;
    if ((v11 & 2) != 0)
    {
      *((void *)this + 109) = *(void *)(v10 + 16);
      *((void *)this + 110) = *(void *)(v10 + 8);
    }
    uint64_t v12 = *((void *)this + 8);
    if (*((void *)this + 9) == v12)
    {
      std::string::basic_string[abi:ne180100]<0>(v42, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v41, "in");
      uint64_t v40 = (void *)((char *)this + 32);
      if (*((char *)this + 55) < 0) {
        uint64_t v40 = (void *)*v40;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v39, v40, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
    }
    uint64_t v13 = *(void *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v12 + 40))(v12) + 56) + 80);
    uint64_t v14 = *((void *)this + 114);
    v42[0] = *((_DWORD *)this + 232);
    (*(void (**)(void, uint64_t, uint64_t, uint64_t, unsigned int *))(**((void **)this + 111) + 56))(*((void *)this + 111), v13, v14, a2, v42);
    DSPGraph::RingBuffer::write((DSPGraph::SRCBox *)((char *)this + 808), v42[0], v42[0], (unsigned int **)this + 114);
  }
  uint64_t v15 = *((void *)this + 8);
  if (*((void *)this + 9) == v15)
  {
    std::string::basic_string[abi:ne180100]<0>(v42, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v41, "in");
    long long v30 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      long long v30 = (void *)*v30;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v29, v30, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
  }
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 40))(v15);
  uint64_t v17 = *((void *)this + 8);
  if (*((void *)this + 9) == v17)
  {
    std::string::basic_string[abi:ne180100]<0>(v42, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v41, "in");
    unint64_t v32 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      unint64_t v32 = (void *)*v32;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v31, v32, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
  }
  int v18 = *(_DWORD *)(*(void *)(v16 + 56) + 72);
  double result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v17 + 40))(v17);
  uint64_t v21 = *((void *)this + 11);
  uint64_t v20 = (void *)*((void *)this + 12);
  if ((void *)v21 != v20)
  {
    uint64_t v22 = (_OWORD *)(result[7] + 8);
    double result = (void *)v21;
    uint64_t v23 = (void *)v21;
    do
    {
      uint64_t v24 = *v23;
      v23 += 4;
      uint64_t v25 = *(void *)((*(uint64_t (**)(void *))(v24 + 40))(result) + 56);
      long long v27 = v22[2];
      long long v26 = v22[3];
      long long v28 = v22[1];
      *(_OWORD *)(v25 + 8) = *v22;
      *(_OWORD *)(v25 + 24) = v28;
      *(_OWORD *)(v25 + 40) = v27;
      *(_OWORD *)(v25 + 5std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v26;
      *(_DWORD *)(v25 + 72) = v18;
      v21 += 32;
      double result = v23;
    }
    while (v23 != v20);
  }
  return result;
}

void sub_190102B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::SRCBox::setProperty(DSPGraph::SRCBox *this, int a2, int a3, unsigned int a4, int a5, _DWORD *a6)
{
  if (a2 > 1835626095)
  {
    if (a2 == 1835626096)
    {
      if (a5 == 4)
      {
        uint64_t v6 = 0;
        *((unsigned char *)this + 904) = *a6 != 0;
        return v6;
      }
      return 561211770;
    }
    if (a2 != 1936876401)
    {
      if (a2 == 1936876385) {
        goto LABEL_5;
      }
      return DSPGraph::Box::setProperty(this, a2, a3, a4, a5, a6);
    }
LABEL_10:
    if (a5 == 4)
    {
      uint64_t v6 = 0;
      *((_DWORD *)this + 225) = *a6;
      return v6;
    }
    return 561211770;
  }
  if (a2 == 26) {
    goto LABEL_10;
  }
  if (a2 != 3014) {
    return DSPGraph::Box::setProperty(this, a2, a3, a4, a5, a6);
  }
LABEL_5:
  if (a5 != 4) {
    return 561211770;
  }
  uint64_t v6 = 0;
  *((_DWORD *)this + 224) = *a6;
  return v6;
}

uint64_t DSPGraph::SRCBox::getProperty(DSPGraph::SRCBox *this, int a2, uint64_t a3, uint64_t a4, unsigned int *a5, CFStringRef *a6)
{
  if (a2 > 1835626095)
  {
    if (a2 == 1835626096)
    {
      if (*a5 == 4)
      {
        uint64_t v6 = 0;
        int v7 = *((unsigned __int8 *)this + 904);
        goto LABEL_14;
      }
      return 561211770;
    }
    if (a2 != 1936876401)
    {
      if (a2 == 1936876385) {
        goto LABEL_5;
      }
      return DSPGraph::Box::getProperty(this, a2, a3, a4, a5, a6);
    }
LABEL_10:
    if (*a5 == 4)
    {
      uint64_t v6 = 0;
      int v7 = *((_DWORD *)this + 225);
      goto LABEL_14;
    }
    return 561211770;
  }
  if (a2 == 26) {
    goto LABEL_10;
  }
  if (a2 != 3014) {
    return DSPGraph::Box::getProperty(this, a2, a3, a4, a5, a6);
  }
LABEL_5:
  if (*a5 != 4) {
    return 561211770;
  }
  uint64_t v6 = 0;
  int v7 = *((_DWORD *)this + 224);
LABEL_14:
  *(_DWORD *)a6 = v7;
  return v6;
}

uint64_t DSPGraph::SRCBox::getPropertyInfo(DSPGraph::SRCBox *this, int a2, int a3)
{
  uint64_t result = 0x100000004;
  if (a2 <= 1835626095)
  {
    if (a2 != 26 && a2 != 3014) {
      return DSPGraph::Box::getPropertyInfo(this, a2, a3);
    }
  }
  else if (a2 != 1835626096 && a2 != 1936876385 && a2 != 1936876401)
  {
    return DSPGraph::Box::getPropertyInfo(this, a2, a3);
  }
  return result;
}

DSPGraph::SRCBox *DSPGraph::SRCBox::asOperativeSRCBox(DSPGraph::SRCBox *this)
{
  if ((*(unsigned int (**)(DSPGraph::SRCBox *))(*(void *)this + 712))(this)) {
    return 0;
  }
  else {
    return this;
  }
}

double DSPGraph::SRCBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result = 1.28569068e248;
  *(_OWORD *)a1 = xmmword_1901C6390;
  *(_DWORD *)(a1 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
  return result;
}

unint64_t DSPGraph::SRCBox::selfLatencyInTicks(DSPGraph::SRCBox *this)
{
  if ((*(uint64_t (**)(DSPGraph::SRCBox *))(*(void *)this + 712))(this)) {
    return 0;
  }
  uint64_t v3 = *((unsigned int *)this + 194);
  unint64_t v4 = *(void *)(*((void *)this + 1) + 696);
  unint64_t v5 = v4 / (*(unsigned int (**)(DSPGraph::SRCBox *))(*(void *)this + 664))(this) * v3;
  uint64_t v6 = *((void *)this + 111);
  if (v6) {
    uint64_t v6 = (*(uint64_t (**)(uint64_t, void))(*(void *)v6 + 48))(v6, *(void *)(*((void *)this + 1) + 696));
  }
  return v6 + v5;
}

const char *DSPGraph::SRCBox::ClassName(DSPGraph::SRCBox *this)
{
  return "src";
}

void DSPGraph::SRCBox::~SRCBox(DSPGraph::SRCBox *this)
{
  *(void *)this = &unk_1EDF9CE20;
  DSPGraph::SimpleABL::free((DSPGraph::SRCBox *)((char *)this + 912));
  uint64_t v2 = *((void *)this + 111);
  *((void *)this + 111) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *(void *)this = &unk_1EDF97930;
  DSPGraph::SimpleABL::free((DSPGraph::SRCBox *)((char *)this + 808));
  DSPGraph::SimpleABL::free((DSPGraph::SRCBox *)((char *)this + 808));
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x192FC8940);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1EDF9CE20;
  DSPGraph::SimpleABL::free((DSPGraph::SRCBox *)((char *)this + 912));
  uint64_t v2 = *((void *)this + 111);
  *((void *)this + 111) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *(void *)this = &unk_1EDF97930;
  DSPGraph::SimpleABL::free((DSPGraph::SRCBox *)((char *)this + 808));
  DSPGraph::SimpleABL::free((DSPGraph::SRCBox *)((char *)this + 808));
  DSPGraph::Box::~Box(this);
}

uint64_t DSPGraph::ReblockerBox::initialize(DSPGraph::ReblockerBox *this)
{
  if (((*((void *)this + 9) - *((void *)this + 8)) & 0x1FFFFFFFE0) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v13, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_SRCBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v12, "initialize");
    std::string::basic_string[abi:ne180100]<0>(&v11, "ReblockerBox has no inputs");
    DSPGraph::ThrowException(1970168609, &v13, 629, &v12, &v11);
  }
  DSPGraph::RingBufferBox::initialize(this);
  uint64_t v2 = *((void *)this + 11);
  if (*((void *)this + 12) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v13, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v12, "out");
    uint64_t v8 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v8 = (void *)*v8;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v7, v8, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
  }
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
  uint64_t v4 = *((void *)this + 8);
  if (*((void *)this + 9) == v4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v13, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v12, "in");
    uint64_t v10 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v10 = (void *)*v10;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v9, v10, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
  }
  int v5 = *(_DWORD *)(*(void *)(v3 + 120) + 28);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
  if (*(_DWORD *)(*(void *)(result + 120) + 28) != v5)
  {
    std::string::basic_string[abi:ne180100]<0>(&v13, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_SRCBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v12, "initialize");
    std::string::basic_string[abi:ne180100]<0>(&v11, "input and output channel counts don't match");
    DSPGraph::ThrowException(1667788321, &v13, 637, &v12, &v11);
  }
  return result;
}

void sub_1901032B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (*(char *)(v23 - 17) < 0) {
    operator delete(*(void **)(v23 - 40));
  }
  _Unwind_Resume(exception_object);
}

void *DSPGraph::ReblockerBox::process(DSPGraph::ReblockerBox *this, uint64_t a2)
{
  if ((*(unsigned int (**)(DSPGraph::ReblockerBox *))(*(void *)this + 712))(this))
  {
    uint64_t v4 = *((void *)this + 11);
    if (*((void *)this + 12) == v4)
    {
      std::string::basic_string[abi:ne180100]<0>(v36, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v35, "out");
      long long v30 = (void *)((char *)this + 32);
      if (*((char *)this + 55) < 0) {
        long long v30 = (void *)*v30;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v29, v30, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
    }
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
    uint64_t v6 = *((void *)this + 8);
    if (*((void *)this + 9) == v6)
    {
      std::string::basic_string[abi:ne180100]<0>(v36, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v35, "in");
      int64_t v34 = (void *)((char *)this + 32);
      if (*((char *)this + 55) < 0) {
        int64_t v34 = (void *)*v34;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v33, v34, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
    }
    int v7 = *(DSPGraph::Buffer **)(v5 + 56);
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 40))(v6);
    DSPGraph::Buffer::copyFrom(v7, *(DSPGraph::Buffer **)(v8 + 56));
  }
  else
  {
    uint64_t v9 = *((void *)this + 8);
    if (*((void *)this + 9) == v9)
    {
      std::string::basic_string[abi:ne180100]<0>(v36, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v35, "in");
      unint64_t v32 = (void *)((char *)this + 32);
      if (*((char *)this + 55) < 0) {
        unint64_t v32 = (void *)*v32;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v31, v32, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
    }
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 40))(v9);
    DSPGraph::RingBuffer::write((DSPGraph::ReblockerBox *)((char *)this + 808), a2, a2, (unsigned int **)(*(void *)(v10 + 56) + 80));
  }
  uint64_t v11 = *((void *)this + 8);
  if (*((void *)this + 9) == v11)
  {
    std::string::basic_string[abi:ne180100]<0>(v36, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v35, "in");
    long long v26 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      long long v26 = (void *)*v26;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v25, v26, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
  }
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 40))(v11);
  uint64_t v13 = *((void *)this + 8);
  if (*((void *)this + 9) == v13)
  {
    std::string::basic_string[abi:ne180100]<0>(v36, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v35, "in");
    long long v28 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      long long v28 = (void *)*v28;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v27, v28, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
  }
  int v14 = *(_DWORD *)(*(void *)(v12 + 56) + 72);
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v13 + 40))(v13);
  uint64_t v17 = *((void *)this + 11);
  uint64_t v16 = (void *)*((void *)this + 12);
  if ((void *)v17 != v16)
  {
    int v18 = (_OWORD *)(result[7] + 8);
    uint64_t result = (void *)v17;
    uint64_t v19 = (void *)v17;
    do
    {
      uint64_t v20 = *v19;
      v19 += 4;
      uint64_t v21 = *(void *)((*(uint64_t (**)(void *))(v20 + 40))(result) + 56);
      long long v23 = v18[2];
      long long v22 = v18[3];
      long long v24 = v18[1];
      *(_OWORD *)(v21 + 8) = *v18;
      *(_OWORD *)(v21 + 24) = v24;
      *(_OWORD *)(v21 + 40) = v23;
      *(_OWORD *)(v21 + 5std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v22;
      *(_DWORD *)(v21 + 72) = v14;
      v17 += 32;
      uint64_t result = v19;
    }
    while (v19 != v16);
  }
  return result;
}

void sub_190103774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

double DSPGraph::ReblockerBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result = 1.14073544e243;
  *(_OWORD *)a1 = xmmword_1901C63A0;
  *(_DWORD *)(a1 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
  return result;
}

const char *DSPGraph::ReblockerBox::ClassName(DSPGraph::ReblockerBox *this)
{
  return "reblocker";
}

void DSPGraph::ReblockerBox::~ReblockerBox(DSPGraph::ReblockerBox *this)
{
  *(void *)this = &unk_1EDF97930;
  uint64_t v2 = (DSPGraph::ReblockerBox *)((char *)this + 808);
  DSPGraph::SimpleABL::free((DSPGraph::ReblockerBox *)((char *)this + 808));
  DSPGraph::SimpleABL::free(v2);
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x192FC8940);
}

{
  DSPGraph::SimpleABL *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EDF97930;
  uint64_t v2 = (DSPGraph::ReblockerBox *)((char *)this + 808);
  DSPGraph::SimpleABL::free((DSPGraph::ReblockerBox *)((char *)this + 808));
  DSPGraph::SimpleABL::free(v2);
  DSPGraph::Box::~Box(this);
}

void DSPGraph::FreqSRCBox::uninitialize(DSPGraph::FreqSRCBox *this)
{
  DSPGraph::Box::uninitialize(this);
  DSPGraph::SimpleABL::free((DSPGraph::FreqSRCBox *)((char *)this + 808));
  DSPGraph::SimpleABL::free((DSPGraph::FreqSRCBox *)((char *)this + 888));
}

void DSPGraph::FreqSRCBox::initialize(DSPGraph::FreqSRCBox *this)
{
  uint64_t v3 = (char *)this + 88;
  uint64_t v2 = *((void *)this + 11);
  if (*((void *)v3 + 1) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v26, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v25, "out");
    uint64_t v12 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v12 = (void *)*v12;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v11, v12, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
  }
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
  uint64_t v5 = *((void *)this + 8);
  uint64_t v6 = *((void *)this + 9);
  if (((v6 - v5) & 0x1FFFFFFFE0) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v26, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_SRCBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v25, "initialize");
    std::string::basic_string[abi:ne180100]<0>(&v24, "FreqSRCBox has no inputs");
    DSPGraph::ThrowException(1970168609, &v26, 666, &v25, &v24);
  }
  if (v6 == v5)
  {
    std::string::basic_string[abi:ne180100]<0>(&v26, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v25, "in");
    int v14 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      int v14 = (void *)*v14;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v13, v14, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
  }
  unsigned int v7 = *(_DWORD *)(*(void *)(v4 + 120) + 28);
  if (*(_DWORD *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v5 + 40))(v5) + 120) + 28) != v7)
  {
    std::string::basic_string[abi:ne180100]<0>(&v26, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_SRCBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v25, "initialize");
    std::string::basic_string[abi:ne180100]<0>(&v24, "FreqSRCBox input and output channel counts don't match");
    DSPGraph::ThrowException(1667788321, &v26, 671, &v25, &v24);
  }
  if (!DSPGraph::FreqSRCBox::isValidFreqSRCBoxConnection(this))
  {
    std::string::basic_string[abi:ne180100]<0>(&v26, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_SRCBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v25, "initialize");
    uint64_t v15 = DSPGraph::FCBox::upstreamBlockSize(this);
    uint64_t v16 = DSPGraph::FCBox::upstreamSampleRate(this);
    uint64_t v17 = DSPGraph::FCBox::downstreamBlockSize(this);
    uint64_t v18 = DSPGraph::FCBox::downstreamSampleRate(this);
    DSPGraph::strprintf((DSPGraph *)"FreqSRCBox I/O sample rates and block sizes invalid  %u / %u <> %u / %u", v19, v15, v16, v17, v18);
  }
  if (((*(uint64_t (**)(DSPGraph::FreqSRCBox *))(*(void *)this + 440))(this) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v26, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_SRCBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v25, "initialize");
    std::string::basic_string[abi:ne180100]<0>(&v24, "FreqSRCBox box can not have ring buffer padding zeros");
    DSPGraph::ThrowException(1634628385, &v26, 680, &v25, &v24);
  }
  if (DSPGraph::FCBox::upstreamBytesPerPacket(this) != 8) {
    goto LABEL_16;
  }
  uint64_t v8 = *((void *)this + 8);
  if (*((void *)this + 9) == v8)
  {
    std::string::basic_string[abi:ne180100]<0>(&v26, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v25, "in");
    uint64_t v21 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v21 = (void *)*v21;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v20, v21, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
  }
  if (*(_DWORD *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v8 + 40))(v8) + 120) + 8) != 1718773105)
  {
LABEL_16:
    std::string::basic_string[abi:ne180100]<0>(&v26, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_SRCBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v25, "initialize");
    std::string::basic_string[abi:ne180100]<0>(&v24, "FreqSRCBox box needs 8 byte packets at input");
    DSPGraph::ThrowException(1718449215, &v26, 684, &v25, &v24);
  }
  if (DSPGraph::FCBox::downstreamBytesPerPacket(this) != 8) {
    goto LABEL_17;
  }
  uint64_t v9 = *((void *)this + 11);
  if (*((void *)this + 12) == v9)
  {
    std::string::basic_string[abi:ne180100]<0>(&v26, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v25, "out");
    long long v23 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      long long v23 = (void *)*v23;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v22, v23, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
  }
  if (*(_DWORD *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v9 + 40))(v9) + 120) + 8) != 1718773105)
  {
LABEL_17:
    std::string::basic_string[abi:ne180100]<0>(&v26, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_SRCBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v25, "initialize");
    std::string::basic_string[abi:ne180100]<0>(&v24, "FreqSRCBox box needs 8 byte packets at output");
    DSPGraph::ThrowException(1718449215, &v26, 689, &v25, &v24);
  }
  DSPGraph::RingBufferBox::initialize(this);
  unsigned int v10 = 8 * DSPGraph::FCBox::downstreamBlockSize(this);
  DSPGraph::SimpleABL::alloc((DSPGraph::FreqSRCBox *)((char *)this + 888), v7, v10, 0);
}

void sub_190103EE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (*(char *)(v25 - 33) < 0) {
    operator delete(*(void **)(v25 - 56));
  }
  _Unwind_Resume(exception_object);
}

BOOL DSPGraph::FreqSRCBox::isValidFreqSRCBoxConnection(DSPGraph::FreqSRCBox *this)
{
  int v2 = DSPGraph::FCBox::upstreamSampleRate(this);
  int v3 = DSPGraph::FCBox::downstreamBlockSize(this) * v2;
  int v4 = DSPGraph::FCBox::downstreamSampleRate(this);
  return v3 == DSPGraph::FCBox::upstreamBlockSize(this) * v4;
}

uint64_t DSPGraph::FCBox::upstreamBytesPerPacket(DSPGraph::FCBox *this)
{
  int v3 = (char *)this + 64;
  uint64_t v2 = *((void *)this + 8);
  if (*((void *)v3 + 1) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v7, "in");
    uint64_t v6 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v5, v6, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
  }
  return *(unsigned int *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2) + 120) + 16);
}

void sub_1901040C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (*(char *)(v23 - 17) < 0) {
    operator delete(*(void **)(v23 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::FCBox::downstreamBytesPerPacket(DSPGraph::FCBox *this)
{
  int v3 = (char *)this + 88;
  uint64_t v2 = *((void *)this + 11);
  if (*((void *)v3 + 1) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v7, "out");
    uint64_t v6 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v5, v6, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
  }
  return *(unsigned int *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2) + 120) + 16);
}

void sub_1901041E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (*(char *)(v23 - 17) < 0) {
    operator delete(*(void **)(v23 - 40));
  }
  _Unwind_Resume(exception_object);
}

unsigned int **DSPGraph::FreqSRCBox::process(unsigned int **this)
{
  if (!DSPGraph::FreqSRCBox::isValidFreqSRCBoxConnection((DSPGraph::FreqSRCBox *)this)) {
    __assert_rtn("process", "DSPGraph_SRCBox.cpp", 727, "isValidFreqSRCBoxConnection()");
  }
  uint64_t v2 = this[8];
  if (this[9] == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(v52, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v51, "in");
    float v42 = this + 4;
    if (*((char *)this + 55) < 0) {
      float v42 = (void *)*v42;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v41, v42, ((char *)this[9] - (char *)this[8]) >> 5, 0);
  }
  uint64_t v3 = (*(uint64_t (**)(unsigned int *))(*(void *)v2 + 40))(v2);
  int v4 = this[11];
  if (this[12] == v4)
  {
    std::string::basic_string[abi:ne180100]<0>(v52, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v51, "out");
    float32x4_t v44 = this + 4;
    if (*((char *)this + 55) < 0) {
      float32x4_t v44 = (void *)*v44;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v43, v44, ((char *)this[12] - (char *)this[11]) >> 5, 0);
  }
  uint64_t v5 = *(unsigned int **)(*(void *)(v3 + 56) + 80);
  uint64_t v6 = (*(uint64_t (**)(unsigned int *))(*(void *)v4 + 40))(v4);
  uint64_t v7 = *v5;
  if (v7 != **(_DWORD **)(*(void *)(v6 + 56) + 80)) {
    __assert_rtn("process", "DSPGraph_SRCBox.cpp", 731, "inBuf->mNumberBuffers == outBuf->mNumberBuffers");
  }
  unsigned int v8 = DSPGraph::FCBox::downstreamBlockSize((DSPGraph::FCBox *)this);
  unsigned int v49 = DSPGraph::FCBox::upstreamBlockSize((DSPGraph::FCBox *)this);
  unsigned int v50 = v8;
  if (v8 <= v49)
  {
    int v9 = DSPGraph::FCBox::downstreamBlockSize((DSPGraph::FCBox *)this);
    size_t v11 = 0;
    if (!v7) {
      goto LABEL_16;
    }
    goto LABEL_9;
  }
  int v9 = DSPGraph::FCBox::upstreamBlockSize((DSPGraph::FCBox *)this);
  int v10 = DSPGraph::FCBox::downstreamBlockSize((DSPGraph::FCBox *)this);
  size_t v11 = 4 * (v10 - DSPGraph::FCBox::upstreamBlockSize((DSPGraph::FCBox *)this));
  if (v7)
  {
LABEL_9:
    size_t v12 = (4 * v9);
    uint64_t v13 = (const void **)(v5 + 4);
    int v14 = (void **)(this[111] + 4);
    while (1)
    {
      uint64_t v15 = (char *)*v14;
      uint64_t v16 = (char *)*v13;
      uint64_t v17 = &v15[4 * DSPGraph::FCBox::downstreamBlockSize((DSPGraph::FCBox *)this)];
      uint64_t v18 = &v16[4 * DSPGraph::FCBox::upstreamBlockSize((DSPGraph::FCBox *)this)];
      memcpy(v15, v16, v12);
      int v19 = DSPGraph::FCBox::upstreamBlockSize((DSPGraph::FCBox *)this);
      bzero(&v15[4 * v19], v11);
      memcpy(v17, v18, v12);
      int v20 = DSPGraph::FCBox::upstreamBlockSize((DSPGraph::FCBox *)this);
      bzero(&v17[4 * v20], v11);
      if (v50 > v49) {
        break;
      }
      unsigned int v23 = DSPGraph::FCBox::downstreamBlockSize((DSPGraph::FCBox *)this);
      if (v23 < DSPGraph::FCBox::upstreamBlockSize((DSPGraph::FCBox *)this))
      {
        int v22 = *(_DWORD *)&v16[4 * DSPGraph::FCBox::downstreamBlockSize((DSPGraph::FCBox *)this)];
        goto LABEL_14;
      }
LABEL_15:
      v13 += 2;
      v14 += 2;
      if (!--v7) {
        goto LABEL_16;
      }
    }
    int v21 = *(_DWORD *)v18;
    *(_DWORD *)&v15[4 * DSPGraph::FCBox::downstreamBlockSize((DSPGraph::FCBox *)this)] = v21;
    int v22 = 0;
LABEL_14:
    *(_DWORD *)uint64_t v17 = v22;
    goto LABEL_15;
  }
LABEL_16:
  long long v24 = this[8];
  if (this[9] == v24)
  {
    std::string::basic_string[abi:ne180100]<0>(v52, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v51, "in");
    int v46 = this + 4;
    if (*((char *)this + 55) < 0) {
      int v46 = (void *)*v46;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v45, v46, ((char *)this[9] - (char *)this[8]) >> 5, 0);
  }
  uint64_t v25 = (*(uint64_t (**)(unsigned int *))(*(void *)v24 + 40))(v24);
  long long v26 = this[8];
  if (this[9] == v26)
  {
    std::string::basic_string[abi:ne180100]<0>(v52, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v51, "in");
    int8x16_t v48 = this + 4;
    if (*((char *)this + 55) < 0) {
      int8x16_t v48 = (void *)*v48;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v47, v48, ((char *)this[9] - (char *)this[8]) >> 5, 0);
  }
  int v27 = *(_DWORD *)(*(void *)(v25 + 56) + 72);
  uint64_t v28 = (*(uint64_t (**)(unsigned int *))(*(void *)v26 + 40))(v26);
  long long v29 = this[11];
  long long v30 = this[12];
  if (v29 != v30)
  {
    int v31 = (_OWORD *)(*(void *)(v28 + 56) + 8);
    unint64_t v32 = this[11];
    int v33 = v32;
    do
    {
      uint64_t v34 = *(void *)v33;
      v33 += 8;
      uint64_t v35 = *(void *)((*(uint64_t (**)(unsigned int *))(v34 + 40))(v32) + 56);
      long long v37 = v31[2];
      long long v36 = v31[3];
      long long v38 = v31[1];
      *(_OWORD *)(v35 + 8) = *v31;
      *(_OWORD *)(v35 + 24) = v38;
      *(_OWORD *)(v35 + 40) = v37;
      *(_OWORD *)(v35 + 5std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v36;
      *(_DWORD *)(v35 + 72) = v27;
      v29 += 8;
      unint64_t v32 = v33;
    }
    while (v33 != v30);
  }
  uint64_t v39 = DSPGraph::FCBox::downstreamBlockSize((DSPGraph::FCBox *)this);
  return DSPGraph::RingBuffer::write((DSPGraph::RingBuffer *)(this + 101), v39, v39, this + 111);
}

void sub_190104768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  _Unwind_Resume(exception_object);
}

DSPGraph::FreqSRCBox *DSPGraph::FreqSRCBox::asOperativeFreqSRCBox(DSPGraph::FreqSRCBox *this)
{
  if ((*(unsigned int (**)(DSPGraph::FreqSRCBox *))(*(void *)this + 712))(this)) {
    return 0;
  }
  else {
    return this;
  }
}

double DSPGraph::FreqSRCBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result = 3.3052639e185;
  *(_OWORD *)a1 = xmmword_1901C63B0;
  *(_DWORD *)(a1 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
  return result;
}

const char *DSPGraph::FreqSRCBox::ClassName(DSPGraph::FreqSRCBox *this)
{
  return "freqsrc";
}

void DSPGraph::FreqSRCBox::~FreqSRCBox(DSPGraph::FreqSRCBox *this)
{
  *(void *)this = &unk_1EDF96978;
  DSPGraph::SimpleABL::free((DSPGraph::FreqSRCBox *)((char *)this + 888));
  *(void *)this = &unk_1EDF97930;
  DSPGraph::SimpleABL::free((DSPGraph::FreqSRCBox *)((char *)this + 808));
  DSPGraph::SimpleABL::free((DSPGraph::FreqSRCBox *)((char *)this + 808));
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x192FC8940);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EDF96978;
  DSPGraph::SimpleABL::free((DSPGraph::FreqSRCBox *)((char *)this + 888));
  *(void *)this = &unk_1EDF97930;
  DSPGraph::SimpleABL::free((DSPGraph::FreqSRCBox *)((char *)this + 808));
  DSPGraph::SimpleABL::free((DSPGraph::FreqSRCBox *)((char *)this + 808));
  DSPGraph::Box::~Box(this);
}

double DSPGraph::RingBufferBox::dryRunInit(DSPGraph::RingBufferBox *this)
{
  *((void *)this + 100) = 0;
  double result = 0.0;
  *((_OWORD *)this + 49) = 0u;
  return result;
}

uint64_t DSPGraph::RingBufferBox::dryRunWrite(uint64_t this, uint64_t a2)
{
  uint64_t v2 = *(void *)(this + 784) + a2;
  *(void *)(this + 784) = v2;
  if (*(void *)(this + 800) > v2) {
    uint64_t v2 = *(void *)(this + 800);
  }
  *(void *)(this + 800) = v2;
  return this;
}

uint64_t DSPGraph::RingBufferBox::dryRunRead(uint64_t this, uint64_t a2)
{
  uint64_t v2 = *(void *)(this + 784) - a2;
  *(void *)(this + 784) = v2;
  if (v2 >= *(void *)(this + 792)) {
    uint64_t v2 = *(void *)(this + 792);
  }
  *(void *)(this + 792) = v2;
  return this;
}

double DSPGraph::FCBox::upstreamSampleTime(DSPGraph::FCBox *this)
{
  return *(double *)(*((void *)this + 106) + 256);
}

double DSPGraph::FCBox::downstreamSampleTime(DSPGraph::FCBox *this)
{
  return *(double *)(*((void *)this + 107) + 256);
}

uint64_t DSPGraph::FCBox::upstreamFramesPerPacket(DSPGraph::FCBox *this)
{
  uint64_t v3 = (char *)this + 64;
  uint64_t v2 = *((void *)this + 8);
  if (*((void *)v3 + 1) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v7, "in");
    uint64_t v6 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v5, v6, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
  }
  return *(unsigned int *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2) + 120) + 20);
}

void sub_190104AB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (*(char *)(v23 - 17) < 0) {
    operator delete(*(void **)(v23 - 40));
  }
  _Unwind_Resume(exception_object);
}

void DSPGraph::NonFiniteProtectionBox::uninitialize(DSPGraph::NonFiniteProtectionBox *this)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 200))
  {
    if (DSPGraph::getLog(void)::onceToken != -1) {
      dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_10095);
    }
    uint64_t v2 = DSPGraph::getLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)DSPGraph::getLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = (char *)this + 32;
      if (*((char *)this + 55) < 0) {
        uint64_t v17 = *(char **)v17;
      }
      int v18 = *((_DWORD *)this + 200);
      *(_DWORD *)AudioFormatInfo buf = 136315394;
      long long v24 = v17;
      __int16 v25 = 1024;
      *(_DWORD *)long long v26 = v18;
      _os_log_error_impl(&dword_18FEC0000, v2, OS_LOG_TYPE_ERROR, "%s: Detected total %u audio buffers with non-finite (<NaN> or <inf>) sample during audio start/stop cycle", buf, 0x12u);
    }
    *((_DWORD *)this + 200) = 0;
  }
  if (*((_DWORD *)this + 201))
  {
    if (DSPGraph::getLog(void)::onceToken != -1) {
      dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_10095);
    }
    uint64_t v3 = DSPGraph::getLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)DSPGraph::getLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      int v19 = (char *)this + 32;
      if (*((char *)this + 55) < 0) {
        int v19 = *(char **)v19;
      }
      int v20 = *((_DWORD *)this + 201);
      float v21 = COERCE_FLOAT(atomic_load((unsigned int *)this + 193));
      *(_DWORD *)AudioFormatInfo buf = 136315650;
      long long v24 = v19;
      __int16 v25 = 1024;
      *(_DWORD *)long long v26 = v20;
      *(_WORD *)&v26[4] = 2048;
      *(double *)&v26[6] = v21;
      _os_log_error_impl(&dword_18FEC0000, v3, OS_LOG_TYPE_ERROR, "%s: Detected total %u audio buffers with peak over limit (%.0f dB) during audio start/stop cycle", buf, 0x1Cu);
    }
    *((_DWORD *)this + 201) = 0;
  }
  int v4 = (void *)*((void *)this + 97);
  uint64_t v5 = (void *)*((void *)this + 98);
  if (v4 != v5)
  {
    uint64_t v6 = v4 + 1;
    do
    {
      int v7 = *((_DWORD *)v6 - 2);
      *(_OWORD *)std::string __str = 0u;
      long long v32 = 0u;
      unsigned int v8 = localtime(v6);
      if (!strftime(__str, 0x20uLL, "%Y-%m-%d %H:%M:%S", v8)) {
        snprintf(__str, 0x20uLL, "%ld", *v6);
      }
      if (DSPGraph::getLog(void)::onceToken != -1) {
        dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_10095);
      }
      int v9 = DSPGraph::getLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)DSPGraph::getLog(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        size_t v11 = (char *)this + 32;
        if (*((char *)this + 55) < 0) {
          size_t v11 = (char *)*((void *)this + 4);
        }
        uint64_t v12 = v6[1];
        uint64_t v13 = "peak over limit";
        if (!v7) {
          uint64_t v13 = "non-finite sample";
        }
        unsigned int v14 = atomic_load((unsigned int *)this + 203);
        *(_DWORD *)AudioFormatInfo buf = 136316162;
        long long v24 = __str;
        __int16 v25 = 2048;
        *(void *)long long v26 = v12;
        *(_WORD *)&v26[8] = 2080;
        *(void *)&v26[10] = v11;
        __int16 v27 = 2080;
        uint64_t v28 = v13;
        __int16 v29 = 1024;
        unsigned int v30 = v14;
        _os_log_error_impl(&dword_18FEC0000, v9, OS_LOG_TYPE_ERROR, "%s.%09ld :: %s: Detected %s in %u audio buffers", buf, 0x30u);
      }
      int v10 = v6 + 2;
      v6 += 3;
    }
    while (v10 != v5);
    int v4 = (void *)*((void *)this + 97);
  }
  *((void *)this + 98) = v4;
  int v15 = *((unsigned __int8 *)this + 808);
  *((unsigned char *)this + 808) = 0;
  if (v15)
  {
    if (DSPGraph::getLog(void)::onceToken != -1) {
      dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_10095);
    }
    uint64_t v16 = DSPGraph::getLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)DSPGraph::getLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      int v22 = (char *)this + 32;
      if (*((char *)this + 55) < 0) {
        int v22 = *(char **)v22;
      }
      *(_DWORD *)AudioFormatInfo buf = 136315138;
      long long v24 = v22;
      _os_log_error_impl(&dword_18FEC0000, v16, OS_LOG_TYPE_ERROR, "%s: NonFiniteProtectionBox event logging capacity exceeded (some descriptions dropped)", buf, 0xCu);
    }
  }
}

os_log_t ___ZN8DSPGraph6getLogEv_block_invoke_10108()
{
  os_log_t result = os_log_create("com.apple.coreaudio", "DSPGraph");
  DSPGraph::getLog(void)::gLog = (uint64_t)result;
  return result;
}

void DSPGraph::NonFiniteProtectionBox::addEvent(int64x2_t *a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (const double *)&a1[48].i64[1];
  int64x2_t v4 = (int64x2_t)vld1q_dup_f64(v3);
  uint64x2_t v5 = (uint64x2_t)vshrq_n_s64(vsubq_s64(a1[49], v4), 3uLL);
  v5.i64[0] *= 0xAAAAAAAAAAAAAAABLL;
  v5.i64[1] *= 0xAAAAAAAAAAAAAAABLL;
  if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(v5.u64[1]), v5)).u32[0])
  {
    unsigned long long v17 = 0uLL;
    clock_gettime(_CLOCK_REALTIME, (timespec *)&v17);
    *(_OWORD *)&v18[4] = v17;
    int v7 = (char *)a1[49].i64[0];
    unint64_t v8 = a1[49].u64[1];
    if ((unint64_t)v7 >= v8)
    {
      int v10 = (char *)a1[48].i64[1];
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v10) >> 3) + 1;
      if (v11 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (void)v10) >> 3);
      if (2 * v12 > v11) {
        unint64_t v11 = 2 * v12;
      }
      if (v12 >= 0x555555555555555) {
        unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v13 = v11;
      }
      if (v13)
      {
        if (v13 > 0xAAAAAAAAAAAAAAALL) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unsigned int v14 = (char *)operator new(24 * v13);
      }
      else
      {
        unsigned int v14 = 0;
      }
      int v15 = &v14[8 * ((v7 - v10) >> 3)];
      *(_DWORD *)int v15 = a2;
      *(_OWORD *)(v15 + 4) = *(_OWORD *)v18;
      *((_DWORD *)v15 + 5) = *(_DWORD *)&v18[16];
      int v9 = v15 + 24;
      if (v7 != v10)
      {
        do
        {
          long long v16 = *(_OWORD *)(v7 - 24);
          *((void *)v15 - 1) = *((void *)v7 - 1);
          *(_OWORD *)(v15 - 24) = v16;
          v15 -= 24;
          v7 -= 24;
        }
        while (v7 != v10);
        int v7 = (char *)a1[48].i64[1];
      }
      a1[48].i64[1] = (uint64_t)v15;
      a1[49].i64[0] = (uint64_t)v9;
      a1[49].i64[1] = (uint64_t)&v14[24 * v13];
      if (v7) {
        operator delete(v7);
      }
    }
    else
    {
      *(_DWORD *)int v7 = a2;
      *(_OWORD *)(v7 + 4) = *(_OWORD *)v18;
      *((_DWORD *)v7 + 5) = *(_DWORD *)&v18[16];
      int v9 = v7 + 24;
    }
    a1[49].i64[0] = (uint64_t)v9;
  }
  else
  {
    a1[50].i8[8] = 1;
  }
}

uint64_t DSPGraph::NonFiniteProtectionBox::hasPresetData(DSPGraph::NonFiniteProtectionBox *this)
{
  return 0;
}

uint64_t DSPGraph::NonFiniteProtectionBox::setProperty(DSPGraph::NonFiniteProtectionBox *this, int a2, int a3, unsigned int a4, int a5, unsigned int *a6)
{
  if (a2 != 64331)
  {
    if (a2 != 64330) {
      return DSPGraph::Box::setProperty(this, a2, a3, a4, a5, a6);
    }
    if (a5 == 4)
    {
      if (!a3)
      {
        uint64_t result = 0;
        atomic_store(*a6 != 0, (unsigned __int8 *)this + 810);
        return result;
      }
      return 4294956430;
    }
    return 561211770;
  }
  if (a5 != 4) {
    return 561211770;
  }
  if (a3) {
    return 4294956430;
  }
  if (!*a6) {
    return 4294956445;
  }
  uint64_t result = 0;
  atomic_store(*a6, (unsigned int *)this + 203);
  return result;
}

uint64_t DSPGraph::NonFiniteProtectionBox::getProperty(DSPGraph::NonFiniteProtectionBox *this, int a2, uint64_t a3, uint64_t a4, unsigned int *a5, CFStringRef *a6)
{
  if (a2 == 64331)
  {
    if (*a5 == 4)
    {
      if (a6)
      {
        if (!a3)
        {
          uint64_t result = 0;
          int v9 = atomic_load((unsigned int *)this + 203);
          goto LABEL_15;
        }
        return 4294956430;
      }
      return 4294967246;
    }
    return 561211770;
  }
  if (a2 != 64330) {
    return DSPGraph::Box::getProperty(this, a2, a3, a4, a5, a6);
  }
  if (*a5 != 4) {
    return 561211770;
  }
  if (!a6) {
    return 4294967246;
  }
  if (a3) {
    return 4294956430;
  }
  uint64_t result = 0;
  unsigned __int8 v8 = atomic_load((unsigned __int8 *)this + 810);
  int v9 = v8 & 1;
LABEL_15:
  *(_DWORD *)a6 = v9;
  return result;
}

unint64_t DSPGraph::NonFiniteProtectionBox::getPropertyInfo(DSPGraph::NonFiniteProtectionBox *this, int a2, int a3)
{
  if (a2 == 64331 || a2 == 64330)
  {
    uint64_t v3 = 4;
    if (a3)
    {
      uint64_t v3 = 4294956430;
      unint64_t v4 = 0;
    }
    else
    {
      unint64_t v4 = 0x100000000;
    }
  }
  else
  {
    uint64_t PropertyInfo = DSPGraph::Box::getPropertyInfo(this, a2, a3);
    unint64_t v4 = PropertyInfo & 0xFFFFFFFF00000000;
    uint64_t v3 = PropertyInfo;
  }
  return v4 | v3;
}

double DSPGraph::NonFiniteProtectionBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result = 6.48669114e223;
  *(_OWORD *)a1 = xmmword_1901C6440;
  *(_DWORD *)(a1 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
  return result;
}

__n128 DSPGraph::NonFiniteProtectionBox::getParameterInfo@<Q0>(int a1@<W1>, int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v5 = -10866;
  }
  else
  {
    if (!a2)
    {
      uint64_t v15 = 3221225472;
      long long v13 = 0u;
      long long v11 = 0u;
      long long v12 = 0u;
      long long v9 = 0u;
      long long v10 = 0u;
      v14.n128_u64[1] = 0x4220000042A00000;
      v14.n128_u64[0] = 13;
      strlcpy((char *)&v9, "hard clip threshold", 0x34uLL);
      *((void *)&v13 + 1) = @"hard clip threshold";
      LODWORD(v15) = v15 | 0x8000000;
      long long v6 = v10;
      *(_OWORD *)a3 = v9;
      *(_OWORD *)(a3 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v6;
      long long v7 = v12;
      *(_OWORD *)(a3 + 32) = v11;
      *(_OWORD *)(a3 + 48) = v7;
      __n128 result = v14;
      *(_OWORD *)(a3 + 64) = v13;
      *(__n128 *)(a3 + 80) = result;
      *(void *)(a3 + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v15;
      *(unsigned char *)(a3 + 104) = 1;
      return result;
    }
    int v5 = -10878;
  }
  *(_DWORD *)a3 = v5;
  *(unsigned char *)(a3 + 104) = 0;
  return result;
}

void sub_19010538C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void DSPGraph::NonFiniteProtectionBox::getParameterList(int a1@<W1>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (!a1)
  {
    unint64_t v4 = operator new(4uLL);
    *a2 = v4;
    *v4++ = 0;
    a2[1] = v4;
    a2[2] = v4;
  }
}

float DSPGraph::NonFiniteProtectionBox::getParameter(DSPGraph::NonFiniteProtectionBox *this, int a2, int a3, int a4)
{
  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_NonFiniteProtectionBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v7, "getParameter");
    std::string::basic_string[abi:ne180100]<0>(&v6, "");
    DSPGraph::ThrowException(-10866, &v8, 168, &v7, &v6);
  }
  if (a4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_NonFiniteProtectionBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v7, "getParameter");
    std::string::basic_string[abi:ne180100]<0>(&v6, "");
    DSPGraph::ThrowException(-10877, &v8, 171, &v7, &v6);
  }
  if (a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_NonFiniteProtectionBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v7, "getParameter");
    std::string::basic_string[abi:ne180100]<0>(&v6, "");
    DSPGraph::ThrowException(-10878, &v8, 176, &v7, &v6);
  }
  return COERCE_FLOAT(atomic_load((unsigned int *)this + 193));
}

void sub_1901054F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::NonFiniteProtectionBox::setParameter(uint64_t this, int a2, int a3, int a4, float a5)
{
  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v7, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_NonFiniteProtectionBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v6, "setParameter");
    std::string::basic_string[abi:ne180100]<0>(&v5, "");
    DSPGraph::ThrowException(-10866, &v7, 153, &v6, &v5);
  }
  if (a4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v7, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_NonFiniteProtectionBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v6, "setParameter");
    std::string::basic_string[abi:ne180100]<0>(&v5, "");
    DSPGraph::ThrowException(-10877, &v7, 156, &v6, &v5);
  }
  if (a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v7, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_NonFiniteProtectionBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v6, "setParameter");
    std::string::basic_string[abi:ne180100]<0>(&v5, "");
    DSPGraph::ThrowException(-10878, &v7, 161, &v6, &v5);
  }
  if (a5 < 0.0) {
    a5 = 0.0;
  }
  atomic_store(LODWORD(a5), (unsigned int *)(this + 772));
  return this;
}

void sub_190105688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::NonFiniteProtectionBox::canProcessInPlace(DSPGraph::NonFiniteProtectionBox *this)
{
  return 1;
}

uint64_t DSPGraph::NonFiniteProtectionBox::bypass(uint64_t this, unsigned __int8 a2)
{
  return this;
}

uint64_t DSPGraph::NonFiniteProtectionBox::isBypassed(DSPGraph::NonFiniteProtectionBox *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 809);
  return v1 & 1;
}

uint64_t DSPGraph::NonFiniteProtectionBox::canBypass(DSPGraph::NonFiniteProtectionBox *this)
{
  return 1;
}

const char *DSPGraph::NonFiniteProtectionBox::ClassName(DSPGraph::NonFiniteProtectionBox *this)
{
  return "NonFiniteProtectionBox";
}

void DSPGraph::NonFiniteProtectionBox::~NonFiniteProtectionBox(DSPGraph::NonFiniteProtectionBox *this)
{
  *(void *)this = &unk_1EDF9BCE8;
  uint64_t v2 = (void *)*((void *)this + 97);
  if (v2)
  {
    *((void *)this + 98) = v2;
    operator delete(v2);
  }
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x192FC8940);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EDF9BCE8;
  uint64_t v2 = (void *)*((void *)this + 97);
  if (v2)
  {
    *((void *)this + 98) = v2;
    operator delete(v2);
  }
  DSPGraph::Box::~Box(this);
}

__n128 std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(uint64_t a1, __n128 *a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(unsigned char *)(a1 + 24))
    {
      if (*(char *)(a1 + 23) < 0) {
        operator delete(*(void **)a1);
      }
      __n128 result = *a2;
      *(void *)(a1 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = a2[1].n128_u64[0];
      *(__n128 *)a1 = result;
      a2[1].n128_u8[7] = 0;
      a2->n128_u8[0] = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    __n128 result = *a2;
    *(void *)(a1 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = a2[1].n128_u64[0];
    *(__n128 *)a1 = result;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    a2->n128_u64[0] = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return result;
}

BOOL TOpaqueObject<AUOOPRenderingServer,unsigned int,BaseOpaqueObject>::isa(uint64_t a1, void *a2)
{
  return a2 == &TOpaqueRTTI<AUOOPRenderingServer>::sRTTI || a2 == (void *)MEMORY[0x1E4FB9468];
}

void AUOOPRenderingServer::~AUOOPRenderingServer(AUOOPRenderingServer *this)
{
  AUOOPRenderingServer::~AUOOPRenderingServer(this);
  JUMPOUT(0x192FC8940);
}

{
  unsigned int v2;
  std::__shared_weak_count *v3;
  void **v4;
  uint64_t vars8;

  *(void *)this = &unk_1EDF92E48;
  uint64_t v2 = atomic_load(*((unsigned int **)this + 11));
  if (v2 != 2)
  {
    atomic_store(1u, (unsigned __int8 *)this + 113);
    os_eventlink_cancel();
  }
  if (*((unsigned char *)this + 56)) {
    caulk::thread::join((AUOOPRenderingServer *)((char *)this + 40));
  }
  if (*((unsigned char *)this + 200))
  {
    unint64_t v4 = (void **)((char *)this + 168);
    std::vector<audioipc::SharedAudioBuffers::Element>::__destroy_vector::operator()[abi:ne180100](&v4);
  }
  audioipc::eventlink_primitive::~eventlink_primitive((AUOOPRenderingServer *)((char *)this + 120));
  caulk::ipc::mapped_memory::reset((AUOOPRenderingServer *)((char *)this + 64));
  if (*((unsigned char *)this + 56)) {
    caulk::thread::~thread((AUOOPRenderingServer *)((char *)this + 40));
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  BaseOpaqueObject::~BaseOpaqueObject(this);
}

uint64_t AUOOPRenderingServerUser::updateHostCallbacks(AUOOPRenderingServerUser *this, char a2)
{
  if (a2)
  {
    uint64_t v14 = MEMORY[0x1E4F143A8];
    uint64_t v15 = 3221225472;
    uint64_t v16 = ___ZNK24AUOOPRenderingServerUser19updateHostCallbacksEm_block_invoke;
    unsigned long long v17 = &__block_descriptor_40_e29_B56__0_d8_d16_q24_d32_q40_d48l;
    int v18 = this;
    mAUAudioUnit = this->mAUAudioUnit;
    long long v5 = &v14;
  }
  else
  {
    mAUAudioUnit = this->mAUAudioUnit;
    long long v5 = 0;
  }
  [mAUAudioUnit setMusicalContextBlock:v5];
  if ((a2 & 2) != 0)
  {
    uint64_t v9 = MEMORY[0x1E4F143A8];
    uint64_t v10 = 3221225472;
    long long v11 = ___ZNK24AUOOPRenderingServerUser19updateHostCallbacksEm_block_invoke_2;
    long long v12 = &__block_descriptor_40_e21_B40__0_Q8_d16_d24_d32l;
    long long v13 = this;
    long long v6 = this->mAUAudioUnit;
    long long v7 = &v9;
  }
  else
  {
    long long v6 = this->mAUAudioUnit;
    long long v7 = 0;
  }
  return -[AUAudioUnit setTransportStateBlock:](v6, "setTransportStateBlock:", v7, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
}

uint64_t ___ZN24AUOOPRenderingServerUserC2EP11AUAudioUnitm_block_invoke(uint64_t a1, unint64_t a2, char a3, unsigned int a4, const void *a5)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(v5 + 64);
  if (v6) {
    BOOL v7 = *(unsigned char *)(v5 + 80) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return 0;
  }
  pthread_t v12 = pthread_self();
  long long v13 = *(_opaque_pthread_t **)(v5 + 72);
  if (!v12)
  {
    if (!v13) {
      goto LABEL_11;
    }
    return 0;
  }
  if (v13) {
    BOOL v14 = v12 == v13;
  }
  else {
    BOOL v14 = 0;
  }
  if (!v14) {
    return 0;
  }
LABEL_11:
  uint64_t v15 = *(_DWORD **)(v6 + 8);
  __int16 v33 = 0;
  uint64_t __src = 0;
  uint64_t v16 = v15[1];
  if (v16)
  {
    a2 -= *(void *)(v5 + 48);
    if (a2 >= 0x80)
    {
      uint64_t v17 = 0;
      do
      {
        *((unsigned char *)&__src + v17) = a2 | 0x80;
        unint64_t v18 = a2 >> 14;
        a2 >>= 7;
        ++v17;
      }
      while (v18);
      goto LABEL_23;
    }
LABEL_22:
    LOBYTE(v17) = 0;
    goto LABEL_23;
  }
  *(void *)(v5 + 48) = a2;
  if (a2 < 0x80) {
    goto LABEL_22;
  }
  uint64_t v17 = 0;
  do
  {
    *((unsigned char *)&__src + v17) = a2 | 0x80;
    unint64_t v20 = a2 >> 14;
    a2 >>= 7;
    ++v17;
  }
  while (v20);
LABEL_23:
  *((unsigned char *)&__src + v17) = a2;
  unsigned __int8 v21 = v17 + 1;
  char v31 = 0;
  int v30 = 0;
  if (a4 < 0x80)
  {
    LOBYTE(v22) = 0;
    LOBYTE(v23) = a4;
  }
  else
  {
    uint64_t v22 = 0;
    unsigned int v23 = a4;
    do
    {
      *((unsigned char *)&v30 + v22) = v23 | 0x80;
      unsigned int v24 = v23 >> 14;
      v23 >>= 7;
      ++v22;
    }
    while (v24);
  }
  *((unsigned char *)&v30 + v22) = v23;
  unsigned __int8 v25 = v22 + 1;
  unsigned int v26 = a4 + v21 + v25 + 1;
  if (*v15 - (int)v16 < v26) {
    return 4294900543;
  }
  uint64_t v27 = v21;
  size_t v28 = v25;
  memcpy((char *)v15 + v16 + 8, &__src, v21);
  __int16 v29 = (char *)v15 + v16 + v27 + 8;
  *v29++ = a3;
  memcpy(v29, &v30, v28);
  memcpy(&v29[v28], a5, a4);
  uint64_t result = 0;
  v15[1] = v16 + v26;
  return result;
}

void sub_190105CEC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t ___ZN24AUOOPRenderingServerUserC2EP11AUAudioUnitm_block_invoke_2(uint64_t a1, unint64_t a2, char a3, MIDI::EventList *a4)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(v4 + 64);
  if (v5) {
    BOOL v6 = *(unsigned char *)(v4 + 80) == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6) {
    return 0;
  }
  pthread_t v10 = pthread_self();
  long long v11 = *(_opaque_pthread_t **)(v4 + 72);
  if (!v10)
  {
    if (!v11) {
      goto LABEL_11;
    }
    return 0;
  }
  if (v11) {
    BOOL v12 = v10 == v11;
  }
  else {
    BOOL v12 = 0;
  }
  if (!v12) {
    return 0;
  }
LABEL_11:
  long long v13 = *(_DWORD **)(v5 + 16);
  __int16 v31 = 0;
  uint64_t __src = 0;
  uint64_t v14 = v13[1];
  if (v14)
  {
    a2 -= *(void *)(v4 + 48);
    if (a2 >= 0x80)
    {
      uint64_t v15 = 0;
      do
      {
        *((unsigned char *)&__src + v15) = a2 | 0x80;
        unint64_t v16 = a2 >> 14;
        a2 >>= 7;
        ++v15;
      }
      while (v16);
      goto LABEL_23;
    }
  }
  else
  {
    *(void *)(v4 + 48) = a2;
    if (a2 >= 0x80)
    {
      uint64_t v15 = 0;
      do
      {
        *((unsigned char *)&__src + v15) = a2 | 0x80;
        unint64_t v18 = a2 >> 14;
        a2 >>= 7;
        ++v15;
      }
      while (v18);
      goto LABEL_23;
    }
  }
  LOBYTE(v15) = 0;
LABEL_23:
  *((unsigned char *)&__src + v15) = a2;
  size_t v19 = (v15 + 1);
  unsigned int v20 = MIDI::EventList::size(a4);
  unsigned int v21 = v20;
  LOBYTE(v22) = 0;
  char v29 = 0;
  int v28 = 0;
  LOBYTE(v23) = v20;
  if (v20 >= 0x80)
  {
    uint64_t v22 = 0;
    unsigned int v23 = v20;
    do
    {
      *((unsigned char *)&v28 + v22) = v23 | 0x80;
      unsigned int v24 = v23 >> 14;
      v23 >>= 7;
      ++v22;
    }
    while (v24);
  }
  *((unsigned char *)&v28 + v22) = v23;
  unsigned __int8 v25 = v22 + 1;
  unsigned int v26 = v19 + v20 + (v22 + 1) + 1;
  if (v26 > *v13 - v13[1]) {
    return 4294900543;
  }
  memcpy((char *)v13 + v14 + 8, &__src, v19);
  uint64_t v27 = (char *)v13 + v14 + v19 + 8;
  *v27++ = a3;
  memcpy(v27, &v28, v25);
  memcpy(&v27[v25], a4, v21);
  uint64_t result = 0;
  v13[1] = v26 + v14;
  return result;
}

void sub_190105F0C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t ___ZNK24AUOOPRenderingServerUser19updateHostCallbacksEm_block_invoke(uint64_t a1, void *a2, double *a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t v7 = *(void *)(a1 + 32);
  long long v8 = *(uint64_t **)(v7 + 64);
  if (v8) {
    BOOL v9 = *(unsigned char *)(v7 + 80) == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9) {
    return 0;
  }
  pthread_t v16 = pthread_self();
  uint64_t v17 = *(_opaque_pthread_t **)(v7 + 72);
  if (!v16)
  {
    if (!v17) {
      goto LABEL_11;
    }
    return 0;
  }
  if (v17) {
    BOOL v18 = v16 == v17;
  }
  else {
    BOOL v18 = 0;
  }
  if (!v18) {
    return 0;
  }
LABEL_11:
  uint64_t v19 = *v8;
  unsigned int v20 = *(_DWORD *)(*v8 + 4248);
  if ((v20 & 0x100) != 0)
  {
    if (a2) {
      *a2 = *(void *)(v19 + 4240);
    }
    if (a5)
    {
      uint64_t v21 = *(void *)(v19 + 4232);
LABEL_21:
      *a5 = v21;
    }
  }
  else
  {
    if (a2) {
      *a2 = 0x405E000000000000;
    }
    uint64_t v21 = 0;
    if (a5) {
      goto LABEL_21;
    }
  }
  if ((v20 & 0x200) != 0)
  {
    if (a3) {
      *a3 = *(float *)(v19 + 4256);
    }
    if (a4) {
      *a4 = *(unsigned int *)(v19 + 4260);
    }
    if (a6) {
      *a6 = *(unsigned int *)(v19 + 4252);
    }
    if (!a7) {
      return 1;
    }
    uint64_t v23 = *(void *)(v19 + 4264);
    uint64_t result = 1;
LABEL_39:
    *a7 = v23;
    return result;
  }
  if (a3) {
    *a3 = 4.0;
  }
  if (a4) {
    *a4 = 4;
  }
  uint64_t result = (v20 >> 8) & 1;
  if (a6) {
    *a6 = 0;
  }
  uint64_t v23 = 0;
  if (a7) {
    goto LABEL_39;
  }
  return result;
}

uint64_t ___ZNK24AUOOPRenderingServerUser19updateHostCallbacksEm_block_invoke_2(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(v5 + 64);
  if (v6) {
    BOOL v7 = *(unsigned char *)(v5 + 80) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return 0;
  }
  pthread_t v12 = pthread_self();
  long long v13 = *(_opaque_pthread_t **)(v5 + 72);
  if (v12)
  {
    if (v13) {
      BOOL v14 = v12 == v13;
    }
    else {
      BOOL v14 = 0;
    }
    if (!v14) {
      return 0;
    }
  }
  else if (v13)
  {
    return 0;
  }
  uint64_t v15 = *(void **)v6;
  int v16 = *(_DWORD *)(*(void *)v6 + 4248);
  if ((v16 & 0x400) == 0) {
    return 0;
  }
  if (a2) {
    *a2 = v16 & 0xF;
  }
  if (a3) {
    *a3 = v15[534];
  }
  if (a4) {
    *a4 = v15[535];
  }
  if (a5) {
    *a5 = v15[536];
  }
  return 1;
}

void caulk::mach::throw_if_mach_error(caulk::mach *this, const char *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  *(void *)uint64_t v6 = &unk_1EDF96340;
  MEMORY[0x192FC8490](v5, 4, v6, "Constructing a thread with real time priority requires that the computation (quantum) is less than or equal to the constraint");
  std::error_category::~error_category((std::error_category *)v6);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    uint64_t v2 = std::runtime_error::what(v5);
    *(_DWORD *)uint64_t v6 = 136315138;
    *(void *)&v6[4] = v2;
    _os_log_error_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Throwing: %s", v6, 0xCu);
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x20uLL);
  uint64_t v4 = std::runtime_error::runtime_error(exception, v5);
  v4->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E4FBA448] + 16);
  v4[1] = v5[1];
}

void sub_190106220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, uint64_t a10, uint64_t a11, std::error_category a12)
{
}

uint64_t *std::unique_ptr<std::tuple<caulk::thread::attributes,AUOOPRenderingServer::AUOOPRenderingServer(int,int,int,std::vector<AudioStreamBasicDescription> const&,unsigned int,unsigned int,applesauce::xpc::dict const&,std::shared_ptr<auoop::WorkgroupMirror>)::$_0,std::tuple<>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(v2 + 24) && *(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x192FC8940](v2, 0x1032C4060C540BCLL);
  }
  return a1;
}

uint64_t caulk::thread_proxy<std::tuple<caulk::thread::attributes,AUOOPRenderingServer::AUOOPRenderingServer(int,int,int,std::vector<AudioStreamBasicDescription> const&,unsigned int,unsigned int,applesauce::xpc::dict const&,std::shared_ptr<auoop::WorkgroupMirror>)::$_0,std::tuple<>>>(caulk::thread::attributes *a1)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  uint64_t v64 = a1;
  caulk::thread::attributes::apply_to_this_thread(a1);
  uint64_t v1 = *((void *)v64 + 8);
  v72[0] = 0;
  char v73 = 0;
  float32x4_t v57 = (caulk::mach::os_workgroup_managed *)&v74;
  uint64_t v74 = MEMORY[0x1E4FB7EA0] + 16;
  memset(v75, 0, 49);
  audioipc::eventlink_primitive::activate();
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(v1 + 113));
  uint64_t v3 = *(unsigned int **)(v1 + 88);
  if ((v2 & 1) == 0)
  {
    atomic_store(0, v3);
    unint64_t v4 = audioipc::eventlink_primitive::wait_or_error(*(audioipc::eventlink_primitive **)(v1 + 120));
    unsigned __int8 v5 = atomic_load((unsigned __int8 *)(v1 + 113));
    if ((v5 & 1) == 0)
    {
      int v6 = v4;
      unint64_t v7 = HIDWORD(v4);
      float32x4_t v58 = (audioipc::priority_propagator_impl *)(v1 + 224);
      uint64_t v59 = (uint64_t *)(v1 + 208);
      uint64_t v60 = v1 + 144;
      int v63 = (audioipc::SharedAudioBuffers *)(v1 + 168);
      while (1)
      {
        unsigned int v8 = atomic_load(*(unsigned int **)(v1 + 96));
        if (v8 == 2) {
          goto LABEL_104;
        }
        if (!(_BYTE)v7)
        {
          float v55 = CADefaultLog();
          if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
          {
            LODWORD(buf[0]) = 136315394;
            *(void *)((char *)buf + 4) = "rt_receiver::receive_loop";
            WORD6(buf[0]) = 1024;
            *(_DWORD *)((char *)buf + 14) = v6;
            _os_log_error_impl(&dword_18FEC0000, v55, OS_LOG_TYPE_ERROR, "%s failed: %d", (uint8_t *)buf, 0x12u);
          }

          goto LABEL_104;
        }
        atomic_store(1u, *(unsigned int **)(v1 + 88));
        uint64_t v9 = *(void *)(v1 + 104);
        pthread_t v10 = (unsigned __int8 *)(v9 + 4104);
        int v11 = *(unsigned __int8 *)(v9 + 4104);
        if ((v11 - 1) < 2) {
          break;
        }
        if (v11 == 4)
        {
          AUOOPRenderingServer::prepareRealtimeMessages(v1, 1);
        }
        else
        {
          if (v11 == 5) {
            break;
          }
          if (!kInterAppAudioScope)
          {
            unsigned int v20 = MEMORY[0x1E4F14500];
            id v21 = MEMORY[0x1E4F14500];
LABEL_27:
            if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
            {
              int v22 = *v10;
              LODWORD(buf[0]) = 136315650;
              *(void *)((char *)buf + 4) = "AUOOPRenderingServer.mm";
              WORD6(buf[0]) = 1024;
              *(_DWORD *)((char *)buf + 14) = 495;
              WORD1(buf[1]) = 1024;
              DWORD1(buf[1]) = v22;
              _os_log_impl(&dword_18FEC0000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown message: %d", (uint8_t *)buf, 0x18u);
            }

            goto LABEL_95;
          }
          unsigned int v20 = *(id *)kInterAppAudioScope;
          if (v20) {
            goto LABEL_27;
          }
        }
LABEL_95:
        v10[1] = 101;
        unsigned __int8 v51 = atomic_load((unsigned __int8 *)(v1 + 113));
        if ((v51 & 1) == 0)
        {
          unsigned int v52 = atomic_load(*(unsigned int **)(v1 + 96));
          if (v52 != 2)
          {
            atomic_store(0, *(unsigned int **)(v1 + 88));
            unint64_t v53 = audioipc::eventlink_primitive::wait_signal_or_error(*(audioipc::eventlink_primitive **)(v1 + 120));
            LOBYTE(v7) = HIDWORD(v53) != 0;
            if (!HIDWORD(v53)) {
              int v6 = v53;
            }
            unsigned __int8 v54 = atomic_load((unsigned __int8 *)(v1 + 113));
            if ((v54 & 1) == 0) {
              continue;
            }
          }
        }
        goto LABEL_104;
      }
      LODWORD(buf[0]) = *(_DWORD *)(v9 + 4108);
      v65[0] = 0;
      char v67 = 0;
      uint64_t v68 = 0;
      if (*MEMORY[0x1E4FB9460])
      {
        std::optional<caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>::scoped_lookup>::emplace[abi:ne180100]<caulk::concurrent::guarded_lookup_hash_table<unsigned int,BaseOpaqueObject *,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()>>&,unsigned int const&,void>((uint64_t)v65, *MEMORY[0x1E4FB9460], (int *)buf);
        if (v65[24])
        {
          uint64_t v13 = BaseOpaqueObject::checkRTTI();
          uint64_t v68 = v13;
          if (v13) {
            goto LABEL_12;
          }
        }
        else
        {
          uint64_t v13 = v68;
          if (v68)
          {
LABEL_12:
            int v14 = *v10;
            uint64_t v61 = v9;
            if (v14 != 5)
            {
              unint64_t v15 = *(void *)(v9 + 4112);
              if (v15 > 0x61)
              {
                if (*(_DWORD *)(v1 + 240) != 97)
                {
                  buf[0] = *(_OWORD *)v58;
                  LODWORD(buf[1]) = 1;
                  caulk::mach::this_thread::set_priority();
                  *(_DWORD *)(v1 + 240) = 97;
                }
                auoop::WorkgroupMirror::lookup((auoop::WorkgroupMirror *)v76, *(void *)(v1 + 24), v15);
                if (v77 != v75[0] || v79[24] != LOBYTE(v75[6]))
                {
                  if (v77)
                  {
                    std::optional<audioipc::os_workgroup_joiner>::emplace[abi:ne180100]<caulk::mach::os_workgroup_managed &,void>((audioipc::os_workgroup_joiner *)v72, (uint64_t)v76);
                  }
                  else if (v73)
                  {
                    audioipc::os_workgroup_joiner::~os_workgroup_joiner((audioipc::os_workgroup_joiner *)v72);
                    char v73 = 0;
                  }
                  caulk::mach::details::holder::operator=(v75, &v77);
                  *(_OWORD *)&v75[1] = v78;
                  *(_OWORD *)&void v75[3] = *(_OWORD *)v79;
                  *(_OWORD *)((char *)&v75[4] + 1) = *(_OWORD *)&v79[9];
                }
                caulk::mach::os_workgroup_managed::~os_workgroup_managed((caulk::mach::os_workgroup_managed *)v76);
              }
              else
              {
                int v16 = v75[0];
                if (v75[0])
                {
                  if (v73)
                  {
                    audioipc::os_workgroup_joiner::~os_workgroup_joiner((audioipc::os_workgroup_joiner *)v72);
                    char v73 = 0;
                    int v16 = v75[0];
                  }
                  memset(&buf[1], 0, 48);
                  v75[0] = 0;
                  *(void *)&buf[0] = MEMORY[0x1E4FB7EA0] + 16;
                  *((void *)&buf[0] + 1) = v16;
                  caulk::mach::details::release_os_object(0, v12);
                  uint64_t v17 = v75[5];
                  long long v19 = *(_OWORD *)&v75[1];
                  long long v18 = *(_OWORD *)&v75[3];
                  *(_OWORD *)&v75[1] = buf[1];
                  *(_OWORD *)&void v75[3] = buf[2];
                  v75[5] = *(caulk::mach::details **)&buf[3];
                  buf[1] = v19;
                  buf[2] = v18;
                  *(void *)&_DWORD buf[3] = v17;
                  LOBYTE(v17) = v75[6];
                  LOBYTE(v75[6]) = BYTE8(buf[3]);
                  BYTE8(buf[3]) = (_BYTE)v17;
                  caulk::mach::os_workgroup_managed::~os_workgroup_managed((caulk::mach::os_workgroup_managed *)buf);
                }
                if (v15) {
                  audioipc::priority_propagator_impl::apply_priority((uint64_t)v58, v15);
                }
              }
            }
            AUOOPRenderingServer::prepareRealtimeMessages(v1, 0);
            uint64_t v23 = *v59;
            int v24 = *(unsigned __int8 *)(v13 + 41);
            uint64_t v25 = AUEventSchedule::preRender(*(AUEventSchedule **)(v13 + 56), (uint64_t)*(double *)(*(void *)v60 + 4168), *(_DWORD *)(*(void *)v60 + 4312), 0);
            uint64_t v70 = v25;
            uint64_t v71 = v23;
            buf[0] = 0uLL;
            v69[0] = 0;
            v69[1] = 0;
            if (v23)
            {
LABEL_41:
              if (v25)
              {
                unsigned int v26 = &v70;
                if (*(void *)(v23 + 8) <= *(void *)(v25 + 8)) {
                  unsigned int v26 = &v71;
                }
                uint64_t v25 = *v26;
              }
              else
              {
                unsigned int v26 = &v71;
                uint64_t v25 = v23;
              }
              goto LABEL_48;
            }
            while (v25)
            {
              unsigned int v26 = &v70;
LABEL_48:
              if (*(unsigned char *)(v25 + 16) != 1 || v24 || !*(_DWORD *)(v25 + 36)) {
                goto LABEL_55;
              }
              unint64_t v27 = *(void *)(v25 + 8);
              if (v27 >> 28 == 0xFFFFFFFE0) {
                *(void *)(v25 + 8) = v27 + 0x100000000;
              }
              if ((*(unsigned char *)(v25 + 19) & 2) != 0) {
LABEL_55:
              }
                int v28 = (AURenderEvent **)buf;
              else {
                int v28 = v69;
              }
              uint64_t v29 = *(void *)v25;
              if (*v28)
              {
                __int16 v31 = (uint64_t *)v28[1];
                int v30 = (uint64_t *)(v28 + 1);
                *__int16 v31 = v25;
              }
              else
              {
                const char *v28 = (AURenderEvent *)v25;
                int v30 = (uint64_t *)(v28 + 1);
              }
              *int v30 = v25;
              *(void *)uint64_t v25 = 0;
              *unsigned int v26 = v29;
              uint64_t v25 = v70;
              uint64_t v23 = v71;
              if (v71) {
                goto LABEL_41;
              }
            }
            uint64_t v62 = *(AURenderEvent **)&buf[0];
            if (v69[0]) {
              AUEventSchedule::dispatchV2SetParamEvents(*(AUEventSchedule **)(v13 + 56), v69[0], v14 == 5);
            }
            *(void *)(v13 + 64) = v60;
            *(void *)(v13 + 72) = pthread_self();
            *(unsigned char *)(v13 + 80) = 1;
            if (*v10 == 2)
            {
              uint64_t v32 = v61;
              if (!*(void *)(v13 + 32))
              {
                int v37 = -4;
LABEL_89:
                *(_DWORD *)(v32 + 4124) = v37;
                if (*(unsigned char *)(v13 + 80)) {
                  *(unsigned char *)(v13 + 80) = 0;
                }
                AUEventSchedule::postRender(*(AUEventSchedule **)(v13 + 56), v62);
                *uint64_t v59 = 0;
                *(void *)(v1 + 21std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
                goto LABEL_92;
              }
              uint64_t v33 = *(void *)(v1 + 144);
              unsigned int v34 = *(_DWORD *)(v33 + 4312);
              unsigned int v35 = *(_DWORD *)(v1 + 16) + *(_DWORD *)(v61 + 4120);
              *(_DWORD *)(v33 + 4316 + 4 * v35) = 0;
              audioipc::SharedAudioBuffers::mutableBufferList(v63, v35, v34);
              *(void *)&buf[0] = MEMORY[0x1E4F143A8];
              *((void *)&buf[0] + 1) = 3221225472;
              *(void *)&buf[1] = ___ZN20AUOOPRenderingServer8AURenderER24AUOOPRenderingServerUserjP13AURenderEvent_block_invoke;
              *((void *)&buf[1] + 1) = &__block_descriptor_48_e106_i44__0_I8r__AudioTimeStamp_dQdQ_SMPTETime_ssIIIssss_II_16I24q28__AudioBufferList_I_1_AudioBuffer_II_v___36l;
              *(void *)&buf[2] = v1;
              *((void *)&buf[2] + 1) = v33 + 4316;
              long long v36 = _Block_copy(buf);
              int v37 = (*(uint64_t (**)(void))(*(void *)(v13 + 32) + 16))();
            }
            else
            {
              uint64_t v38 = *(void *)(v1 + 144);
              unsigned int v39 = *(_DWORD *)(v38 + 4312);
              *(_DWORD *)(*(void *)(v1 + 152) + 4) = 0;
              *(_DWORD *)(*(void *)(v1 + 160) + 4) = 0;
              if (v14 == 5)
              {
                objc_msgSend(*(id *)(v13 + 16), "deliverV2Parameters:", v62, v57);
              }
              else if (*(int *)(v1 + 20) >= 1)
              {
                uint64_t v40 = 0;
                int v37 = 0;
                do
                {
                  unsigned int v41 = v40;
                  if (!*(unsigned char *)(v13 + 40)) {
                    unsigned int v41 = *(_DWORD *)(v1 + 16) + v40;
                  }
                  float v42 = *(_DWORD **)audioipc::SharedAudioBuffers::mutableBufferList(v63, v41, v39);
                  uint64_t v43 = *(void *)(v13 + 32);
                  *(void *)&buf[0] = MEMORY[0x1E4F143A8];
                  *((void *)&buf[0] + 1) = 3221225472;
                  *(void *)&buf[1] = ___ZN20AUOOPRenderingServer9AUProcessER24AUOOPRenderingServerUserRbP13AURenderEventb_block_invoke;
                  *((void *)&buf[1] + 1) = &__block_descriptor_48_e106_i44__0_I8r__AudioTimeStamp_dQdQ_SMPTETime_ssIIIssss_II_16I24q28__AudioBufferList_I_1_AudioBuffer_II_v___36l;
                  *(void *)&buf[2] = v1;
                  *((void *)&buf[2] + 1) = v38 + 4168;
                  int v44 = (*(uint64_t (**)(void))(v43 + 16))();
                  v10[2] = 0;
                  uint64x2_t v45 = audioipc::SharedAudioBuffers::mutableBufferList(v63, v40, v39);
                  uint64_t v46 = *(void *)v45;
                  uint64_t v47 = **(unsigned int **)v45;
                  if (v47 == *v42)
                  {
                    v10[2] = 1;
                    if (v47)
                    {
                      int8x16_t v48 = (void *)(v46 + 16);
                      unsigned int v49 = v42 + 4;
                      while (*v49 == *v48)
                      {
                        v48 += 2;
                        v49 += 2;
                        if (!--v47) {
                          goto LABEL_78;
                        }
                      }
                      v10[2] = 0;
                    }
                  }
LABEL_78:
                  if (v37) {
                    BOOL v50 = 1;
                  }
                  else {
                    BOOL v50 = v44 == 0;
                  }
                  if (!v50) {
                    int v37 = v44;
                  }
                  ++v40;
                }
                while (v40 < *(int *)(v1 + 20));
                goto LABEL_88;
              }
              int v37 = 0;
            }
LABEL_88:
            uint64_t v32 = v61;
            goto LABEL_89;
          }
        }
      }
      *(_DWORD *)(v9 + 4124) = -1;
LABEL_92:
      if (v67 && v66) {
        atomic_fetch_add(v66, 0xFFFFFFFF);
      }
      goto LABEL_95;
    }
LABEL_104:
    uint64_t v3 = *(unsigned int **)(v1 + 88);
  }
  atomic_store(2u, v3);
  caulk::mach::os_workgroup_managed::~os_workgroup_managed(v57);
  if (v73) {
    audioipc::os_workgroup_joiner::~os_workgroup_joiner((audioipc::os_workgroup_joiner *)v72);
  }
  std::unique_ptr<std::tuple<caulk::thread::attributes,AUOOPRenderingServer::AUOOPRenderingServer(int,int,int,std::vector<AudioStreamBasicDescription> const&,unsigned int,unsigned int,applesauce::xpc::dict const&,std::shared_ptr<auoop::WorkgroupMirror>)::$_0,std::tuple<>>>::~unique_ptr[abi:ne180100]((uint64_t *)&v64);
  return 0;
}

void sub_190106BDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,__int16 buf)
{
  if (a2)
  {
    AUOOPRenderingServer::renderThread(void)::WorkgroupJoiner::~WorkgroupJoiner(&buf);
    __cxa_begin_catch(exception_object);
    uint64_t v38 = *(NSObject **)kInterAppAudioScope;
    unsigned int v39 = applesauce::dispatch::v1::source::operator*(*(id *)kInterAppAudioScope);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_FAULT))
    {
      AudioFormatInfo buf = 0;
      _os_log_fault_impl(&dword_18FEC0000, v38, OS_LOG_TYPE_FAULT, "Render thread exiting with uncaught exception", (uint8_t *)&buf, 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x190106B40);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUOOPRenderingServer::prepareRealtimeMessages(uint64_t this, int a2)
{
  uint64_t v2 = *(void *)(this + 144);
  uint64_t v3 = *(unsigned int *)(v2 + 4);
  if (v3)
  {
    uint64_t v5 = this;
    unint64_t v6 = v2 + 8;
    unint64_t v7 = v2 + 8 + v3;
    uint64_t v8 = CADeprecated::TSingleton<AURenderEventAllocator>::instance();
    pthread_t v10 = (XAtomicPoolAllocator *)v8;
    int v11 = (void *)(v5 + 208);
    if (*(void *)(v5 + 216)) {
      pthread_t v12 = *(void **)(v5 + 216);
    }
    else {
      pthread_t v12 = (void *)(v5 + 208);
    }
    uint64_t v13 = (XAtomicPoolAllocator *)(v8 + 224);
    int v14 = (XAtomicPoolAllocator *)(v8 + 112);
    do
    {
      if (a2)
      {
        unint64_t v15 = 0;
        switch(*(unsigned char *)(v6 + 16))
        {
          case 1:
          case 2:
            unint64_t v15 = XAtomicPoolAllocator::alloc(v10);
            v15[17] = 0;
            size_t v16 = 48;
            goto LABEL_13;
          case 8:
            unint64_t v15 = XAtomicPoolAllocator::alloc(v14);
            v15[17] = 0;
            size_t v16 = 24;
            goto LABEL_13;
          case 9:
            unint64_t v15 = AURenderEventAllocator::allocMIDISysEx((AURenderEventAllocator *)v10, *(unsigned __int16 *)(v6 + 18));
            size_t v16 = *(unsigned __int16 *)(v6 + 18) + 21;
            goto LABEL_13;
          case 0xA:
            unint64_t v15 = XAtomicPoolAllocator::alloc(v13);
            v15[17] = 0;
            size_t v16 = MIDI::EventList::size((MIDI::EventList *)(v6 + 20)) + 20;
LABEL_13:
            memcpy(v15, (const void *)v6, v16);
            char v17 = 0;
            goto LABEL_14;
          default:
            goto LABEL_15;
        }
      }
      char v17 = 1;
      unint64_t v15 = (unsigned char *)v6;
LABEL_14:
      v15[17] = v17;
LABEL_15:
      if (!*v11) {
        *int v11 = v15;
      }
      void *v12 = v15;
      *(void *)unint64_t v15 = 0;
      this = AURenderEventAllocator::eventSize((AURenderEventAllocator *)v6, v9);
      v6 += this;
      pthread_t v12 = v15;
    }
    while (v6 < v7);
    *(void *)(v5 + 21std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v15;
  }
  return this;
}

unsigned char *AUOOPRenderingServer::renderThread(void)::WorkgroupJoiner::~WorkgroupJoiner(unsigned char *a1)
{
  if (a1[72]) {
    audioipc::os_workgroup_joiner::~os_workgroup_joiner((audioipc::os_workgroup_joiner *)a1);
  }
  return a1;
}

uint64_t ___ZN20AUOOPRenderingServer8AURenderER24AUOOPRenderingServerUserjP13AURenderEvent_block_invoke(uint64_t a1, _DWORD *a2, uint64_t a3, unsigned int a4, uint64_t a5, unsigned int *a6)
{
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = *(void *)(v11 + 144);
  uint64_t v13 = (unsigned char *)(v12 + 4104);
  *(unsigned char *)(v12 + 4105) = 102;
  uint64_t v14 = (uint64_t)*(double *)a3;
  *(_DWORD *)(v12 + 4128) = a5;
  uint64_t v15 = *(void *)(a3 + 8);
  double v16 = *(double *)(a3 + 16);
  unsigned int v17 = *(_DWORD *)(a3 + 56) & 7;
  *(void *)(v12 + 413std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v14;
  *(void *)(v12 + 4144) = v15;
  *(double *)(v12 + 4152) = v16;
  *(void *)(v12 + 4160) = v17;
  *(_DWORD *)(v12 + 4132) = a4;
  if (!audioipc::ipc_node_base<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,caulk::ipc::mapped_memory>::can_send(v11 + 64, v16))return 4294956420; {
  BOOL v18 = audioipc::ipc_node_base<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,caulk::ipc::mapped_memory>::signal_wait_with_timeout(v11 + 64, 100.0);
  }
  uint64_t result = 4294956420;
  if (v18 && *v13 == 3)
  {
    *a2 = *(_DWORD *)(*(void *)(a1 + 40) + 4 * a5);
    unsigned int v20 = audioipc::SharedAudioBuffers::mutableBufferList((audioipc::SharedAudioBuffers *)(v11 + 168), a5, a4);
    unsigned int v21 = **(_DWORD **)v20;
    unsigned int v24 = *a6;
    uint64_t v23 = a6 + 2;
    unsigned int v22 = v24;
    if (v21 >= v24) {
      unsigned int v21 = v22;
    }
    memcpy(v23, (const void *)(*(void *)v20 + 8), 16 * v21);
    return 0;
  }
  return result;
}

uint64_t ___ZN20AUOOPRenderingServer9AUProcessER24AUOOPRenderingServerUserRbP13AURenderEventb_block_invoke(uint64_t a1, _DWORD *a2, int a3, unsigned int a4, uint64_t a5, unsigned int *a6)
{
  uint64_t v6 = *(void *)(a1 + 32);
  if (*(int *)(v6 + 16) <= a5) {
    return 4294956419;
  }
  *a2 = *(_DWORD *)(*(void *)(a1 + 40) + 4 * a5 + 148);
  uint64_t v8 = audioipc::SharedAudioBuffers::mutableBufferList((audioipc::SharedAudioBuffers *)(v6 + 168), a5, a4);
  unsigned int v9 = **(_DWORD **)v8;
  unsigned int v12 = *a6;
  uint64_t v11 = a6 + 2;
  unsigned int v10 = v12;
  if (v9 >= v12) {
    unsigned int v9 = v10;
  }
  memcpy(v11, (const void *)(*(void *)v8 + 8), 16 * v9);
  return 0;
}

void caulk::mach::error_category::message(caulk::mach::error_category *this@<X0>, mach_error_t a2@<W1>, std::string *a3@<X8>)
{
  uint64_t v5 = (char *)(*(uint64_t (**)(caulk::mach::error_category *))(*(void *)this + 16))(this);
  std::string::basic_string[abi:ne180100]<0>(&v11, v5);
  uint64_t v6 = std::string::append(&v11, ": ", 2uLL);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  uint64_t v8 = mach_error_string(a2);
  size_t v9 = strlen(v8);
  unsigned int v10 = std::string::append(&v12, v8, v9);
  *a3 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_190107140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const char *caulk::mach::error_category::name(caulk::mach::error_category *this)
{
  return "Mach";
}

void caulk::mach::error_category::~error_category(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x192FC8940);
}

id applesauce::xpc::dict::object_proxy::operator*(uint64_t a1)
{
  uint64_t v2 = **(void ***)a1;
  uint64_t v3 = applesauce::dispatch::v1::source::operator*(v2);
  unint64_t v4 = xpc_dictionary_get_value(v3, *(const char **)(a1 + 8));

  return v4;
}

void sub_190107218(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ExtendedAudioBufferList_PrepareWithNumberOfBuffers(int *a1, unsigned int a2, int a3, unsigned int a4)
{
  if (a1[2] != 1094863915) {
    std::terminate();
  }
  if (a3) {
    uint64_t v5 = 1;
  }
  else {
    uint64_t v5 = a2;
  }
  if (a3) {
    int v6 = a2;
  }
  else {
    int v6 = 1;
  }
  if (v5 > *a1)
  {
    uint64_t v13 = _os_log_pack_size();
    uint64_t result = caulk::deferred_logger::create_message((caulk::deferred_logger *)gCADefaultDeferredLog, v13 + 88, 16);
    if (!result) {
      return result;
    }
    uint64_t v14 = (caulk::concurrent::message *)result;
    uint64_t v15 = _os_log_pack_fill();
    int v16 = *a1;
    *(_DWORD *)uint64_t v15 = 67109376;
    *(_DWORD *)(v15 + 4) = v5;
    *(_WORD *)(v15 + 8) = 1024;
    *(_DWORD *)(v15 + 10) = v16;
    unsigned int v17 = *(caulk::concurrent::messenger **)(gCADefaultDeferredLog + 16);
    BOOL v18 = v14;
    goto LABEL_24;
  }
  unsigned int v7 = a1[5];
  unint64_t v8 = v5 * (unint64_t)a4;
  if ((v8 & 0xFFFFFFFF00000000) != 0)
  {
    LODWORD(v8) = 0x7FFFFFFF;
    goto LABEL_22;
  }
  if (v8 > v7)
  {
LABEL_22:
    uint64_t v19 = _os_log_pack_size();
    uint64_t result = caulk::deferred_logger::create_message((caulk::deferred_logger *)gCADefaultDeferredLog, v19 + 88, 16);
    if (!result) {
      return result;
    }
    unsigned int v20 = (caulk::concurrent::message *)result;
    uint64_t v21 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v21 = 67109376;
    *(_DWORD *)(v21 + 4) = v8;
    *(_WORD *)(v21 + 8) = 1024;
    *(_DWORD *)(v21 + 10) = v7;
    unsigned int v17 = *(caulk::concurrent::messenger **)(gCADefaultDeferredLog + 16);
    BOOL v18 = v20;
LABEL_24:
    caulk::concurrent::messenger::enqueue(v17, v18);
    return 0;
  }
  uint64_t v9 = *((void *)a1 + 4);
  a1[12] = v5;
  uint64_t result = (uint64_t)(a1 + 12);
  if (v5)
  {
    std::string v11 = a1 + 16;
    uint64_t v12 = v5;
    do
    {
      *std::string v11 = v9;
      v9 += a4;
      *((_DWORD *)v11 - 2) = v6;
      *((_DWORD *)v11 - 1) = a4;
      v11 += 2;
      --v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v5 = 0;
  }
  a1[4 * v5 + 14] = 1094863915;
  return result;
}

uint64_t ExtendedAudioBufferList_GetMetadataFrame(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 8) != 1094863915) {
    std::terminate();
  }
  uint64_t v1 = *(unsigned int *)(a1 + 12);
  if (v1) {
    return a1 + v1;
  }
  else {
    return 0;
  }
}

uint64_t AudioMetadataFrame_GetHeader(void *a1)
{
  if (a1[1] - *a1 <= 0x2BuLL) {
    return 0;
  }
  else {
    return *a1;
  }
}

void *AudioMetadataFrame_Clear(uint64_t a1)
{
  uint64_t result = *(void **)a1;
  int64_t v3 = *(void *)(a1 + 8) - (void)result;
  if (v3 >= 1)
  {
    bzero(result, v3);
    uint64_t result = *(void **)a1;
  }
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t AudioMetadataFrame_AppendEvent(uint64_t *a1, char *__src)
{
  if (!*a1 || (unint64_t)(a1[1] - *a1) <= 0x2B)
  {
    memset(v5, 0, 44);
    BYTE8(v5[1]) = 1;
    *(void *)&std::runtime_error v5[2] = 0x10000002CLL;
    AudioMetadataFrame::begin_new(a1, (unsigned int *)v5);
  }
  return AudioMetadataFrame::append((uint64_t)a1, __src);
}

uint64_t AudioBufferList_GetMetadataFrame(const AudioBufferList *a1)
{
  if (a1->mBuffers[a1->mNumberBuffers].mNumberChannels != 1094863915) {
    return 0;
  }
  uint64_t mDataByteSize = a1[-2].mBuffers[0].mDataByteSize;
  if (mDataByteSize) {
    return (uint64_t)&a1[-2] + mDataByteSize;
  }
  else {
    return 0;
  }
}

uint64_t MP4BoxParser_SampleToChunk::Init(MP4BoxParser **this)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = MP4BoxParser_Full::Initialize((MP4BoxParser_Full *)this);
  if (!v2)
  {
    if (*((_DWORD *)this + 5) == 1937011555)
    {
      uint64_t v10 = 0;
      uint64_t DataSourceSize = MP4BoxParser::GetDataSourceSize(this[1], &v10);
      if (DataSourceSize)
      {
        uint64_t v2 = DataSourceSize;
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioFormatInfo buf = 136315394;
          uint64_t v12 = "MP4_BoxParser_SampleToChunk.cpp";
          __int16 v13 = 1024;
          int v14 = 109;
          unint64_t v4 = MEMORY[0x1E4F14500];
          uint64_t v5 = "%25s:%-5d  unable to determine data source size";
LABEL_10:
          _os_log_impl(&dword_18FEC0000, v4, OS_LOG_TYPE_ERROR, v5, buf, 0x12u);
        }
      }
      else
      {
        unsigned int v6 = (*((uint64_t (**)(MP4BoxParser **))*this + 3))(this);
        uint64_t DataSourceBytes = MP4BoxParser::ReadDataSourceBytes(this[1], v6, 4uLL, (char *)this + 60);
        if (DataSourceBytes)
        {
          uint64_t v2 = DataSourceBytes;
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioFormatInfo buf = 136315394;
            uint64_t v12 = "MP4_BoxParser_SampleToChunk.cpp";
            __int16 v13 = 1024;
            int v14 = 112;
            unint64_t v4 = MEMORY[0x1E4F14500];
            uint64_t v5 = "%25s:%-5d  entry count truncated";
            goto LABEL_10;
          }
        }
        else
        {
          *((_DWORD *)this + 15) = bswap32(*((_DWORD *)this + 15));
          unsigned int v9 = (*((uint64_t (**)(MP4BoxParser **))*this + 3))(this);
          if (12 * *((unsigned int *)this + 15) + v9 + 4 <= v10)
          {
            return 0;
          }
          else
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioFormatInfo buf = 136315394;
              uint64_t v12 = "MP4_BoxParser_SampleToChunk.cpp";
              __int16 v13 = 1024;
              int v14 = 115;
              _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  entries truncated", buf, 0x12u);
            }
            return 0xFFFFFFFFLL;
          }
        }
      }
    }
    else
    {
      return 4294967294;
    }
  }
  return v2;
}

void MP4BoxParser_SampleToChunk::~MP4BoxParser_SampleToChunk(MP4BoxParser_SampleToChunk *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDF8DA18;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  JUMPOUT(0x192FC8940);
}

{
  uint64_t v2;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDF8DA18;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

void MP4BoxParser_SampleToChunk::MP4BoxParser_SampleToChunk(MP4BoxParser_SampleToChunk *this, DataSource *a2, uint64_t a3)
{
  *(void *)this = &unk_1EDF8DA18;
  (*(void (**)(DataSource *, uint64_t))(*(void *)a2 + 88))(a2, a3);
  *((unsigned char *)this + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
  *((_DWORD *)this + 5) = 0;
  *((void *)this + 3) = 0;
  *((unsigned char *)this + 32) = 0;
  *((_DWORD *)this + 9) = 8;
  *(void *)this = &unk_1EDF94028;
  *((_DWORD *)this + 15) = 0;
}

uint64_t MP4BoxParser_SampleToChunk::GetSampleCountForChunkIndex(MP4BoxParser **this, int a2, int a3, unsigned int *a4, unsigned int *a5)
{
  v16[4] = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 15))
  {
    uint64_t v15 = 0;
    uint64_t DataSourceSize = MP4BoxParser::GetDataSourceSize(this[1], &v15);
    if (!DataSourceSize)
    {
      std::string v11 = this[1];
      uint64_t v12 = v15;
      __int16 v13 = operator new(0x28uLL);
      void *v13 = &unk_1EDFA0A80;
      v13[1] = this;
      *((_DWORD *)v13 + 4) = a2;
      *((_DWORD *)v13 + 5) = a3;
      v13[3] = a4;
      v13[4] = a5;
      v16[3] = v13;
      (*(void (**)(MP4BoxParser *, void, uint64_t, void *))(*(void *)v11 + 80))(v11, 0, v12, v16);
      std::__function::__value_func<void ()(void const*)>::~__value_func[abi:ne180100](v16);
    }
  }
  else
  {
    uint64_t DataSourceSize = 0;
    *a4 = 0;
    *a5 = 0;
  }
  return DataSourceSize;
}

void sub_190107A50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(void const*)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<MP4BoxParser_SampleToChunk::GetSampleCountForChunkIndex(unsigned int,unsigned int,unsigned int &,unsigned int &)::$_0,std::allocator<MP4BoxParser_SampleToChunk::GetSampleCountForChunkIndex(unsigned int,unsigned int,unsigned int &,unsigned int &)::$_0>,void ()(void const*)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *(_DWORD **)(a1 + 8);
  uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)v4 + 24))(v4);
  uint64_t v6 = v3 + result;
  if (v4[15] == 1)
  {
    unsigned int v7 = (_DWORD *)(v6 + 8);
  }
  else
  {
    uint64_t v8 = v6 + 4;
    uint64_t v9 = *(unsigned int *)(a1 + 20);
    uint64_t v10 = *(unsigned int **)(a1 + 32);
    uint64_t v11 = 12 * v9;
    uint64_t v12 = v9 - 1;
    while (1)
    {
      unint64_t v13 = (v4[15] - 1);
      if (++v12 >= v13) {
        break;
      }
      uint64_t v14 = v11 + 12;
      uint64_t v15 = v6 + v11;
      unsigned int v16 = bswap32(*(_DWORD *)(v15 + 4)) - 1;
      unsigned int v17 = bswap32(*(_DWORD *)(v15 + 16)) - 1;
      *uint64_t v10 = v17;
      unsigned int v18 = *(_DWORD *)(a1 + 16);
      BOOL v19 = v18 < v16 || v18 >= v17;
      uint64_t v11 = v14;
      if (!v19)
      {
        uint64_t v20 = v8 + v14 - 12;
        goto LABEL_11;
      }
    }
    uint64_t v20 = v8 + 12 * v13;
LABEL_11:
    unsigned int v7 = (_DWORD *)(v20 + 4);
  }
  **(_DWORD **)(a1 + 24) = *v7;
  **(_DWORD **)(a1 + 24) = bswap32(**(_DWORD **)(a1 + 24));
  return result;
}

__n128 std::__function::__func<MP4BoxParser_SampleToChunk::GetSampleCountForChunkIndex(unsigned int,unsigned int,unsigned int &,unsigned int &)::$_0,std::allocator<MP4BoxParser_SampleToChunk::GetSampleCountForChunkIndex(unsigned int,unsigned int,unsigned int &,unsigned int &)::$_0>,void ()(void const*)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EDFA0A80;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<MP4BoxParser_SampleToChunk::GetSampleCountForChunkIndex(unsigned int,unsigned int,unsigned int &,unsigned int &)::$_0,std::allocator<MP4BoxParser_SampleToChunk::GetSampleCountForChunkIndex(unsigned int,unsigned int,unsigned int &,unsigned int &)::$_0>,void ()(void const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EDFA0A80;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void std::__function::__func<MP4BoxParser_SampleToChunk::GetSampleCountForChunkIndex(unsigned int,unsigned int,unsigned int &,unsigned int &)::$_0,std::allocator<MP4BoxParser_SampleToChunk::GetSampleCountForChunkIndex(unsigned int,unsigned int,unsigned int &,unsigned int &)::$_0>,void ()(void const*)>::~__func()
{
}

uint64_t CAFAudioFile::GetRegionList(CAFAudioFile *this, unsigned int *a2, AudioFileRegionList *a3, int a4)
{
  *a2 = 0;
  uint64_t v4 = *((void *)this + 18);
  uint64_t v5 = *((void *)this + 19);
  uint64_t v6 = v5 - v4;
  if (v5 == v4) {
    return 0;
  }
  uint64_t v11 = 0;
  unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
  unsigned int v13 = 1;
  while (*(_DWORD *)(v4 + 24 * v11) != 1919248238)
  {
    uint64_t v11 = v13;
    if (v12 <= v13++) {
      return 0;
    }
  }
  uint64_t v16 = v4 + 24 * v11;
  uint64_t v17 = *(void *)(v16 + 16);
  LODWORD(v1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = *(_DWORD *)(v16 + 8);
  size_t v18 = (v16 - 12);
  v35[0] = v16 - 12;
  unsigned int v34 = 0;
  CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)&v34, v18, 1);
  BOOL v19 = v34;
  uint64_t v15 = (*(uint64_t (**)(void, void, uint64_t, size_t, CAFRegionChunk *, _DWORD *))(**((void **)this + 13)
                                                                                               + 48))(*((void *)this + 13), 0, v17 + 12, v18, v34, v35);
  if (!v15)
  {
    CAFRegionChunk_BtoN(v19, v35[0]);
    UInt32 mNumberRegions = v19->mNumberRegions;
    a3->UInt32 mNumberRegions = mNumberRegions;
    a3->mSMPTE_TimeType = v19->mSMPTE_TimeType;
    __int16 v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    if (a4) {
      BOOL v22 = CAFAudioFile::GetStringTable(this, (CAFStringsWrapper *)&v31) == 0;
    }
    else {
      BOOL v22 = 0;
    }
    mRegions = a3->mRegions;
    if (mNumberRegions)
    {
      int v30 = (int)a3;
      unsigned int v24 = v19->mRegions;
      CFAllocatorRef v25 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      do
      {
        int mRegionID = v24->mRegionID;
        mRegions->int mRegionID = v24->mRegionID;
        *(void *)&mRegions->mFlags = *(void *)&v24->mFlags;
        if (v22)
        {
          unint64_t v27 = CAFStringsWrapper::Get(v31, v32, mRegionID);
          if (v27) {
            mRegions->mName = CFStringCreateWithCString(v25, v27, 0x8000100u);
          }
          int v28 = (AudioFileMarker *)&v31;
        }
        else
        {
          int v28 = 0;
        }
        CAFAudioFile::ConvertMarkers((CAFAudioFile *)v24->mNumberMarkers, (uint64_t)v24->mMarkers, (CAFMarker *)mRegions->mMarkers, v28, v20);
        mRegions = (AudioFileRegion *)((char *)mRegions + 40 * mRegions->mNumberMarkers + 24);
        unsigned int v24 = (CAFRegion *)((char *)v24 + 28 * v24->mNumberMarkers + 12);
        --mNumberRegions;
      }
      while (mNumberRegions);
      BOOL v19 = v34;
      LODWORD(a3) = v30;
    }
    *a2 = mRegions - a3;
    *(void *)&v35[1] = &v31;
    std::vector<CAFStringsWrapper::CAFStringWrapper>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35[1]);
    uint64_t v15 = 0;
  }
  if (v19) {
    free(v19);
  }
  return v15;
}

void sub_190107E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, char *a16)
{
  a16 = &a11;
  std::vector<CAFStringsWrapper::CAFStringWrapper>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  if (a14) {
    free(a14);
  }
  _Unwind_Resume(a1);
}

uint64_t CAFAudioFile::GetStringTable(CAFAudioFile *this, CAFStringsWrapper *a2)
{
  uint64_t v2 = *((void *)this + 18);
  uint64_t v3 = *((void *)this + 19) - v2;
  if (v3)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v3 >> 3);
    unsigned int v8 = 1;
    while (*(_DWORD *)(v2 + 24 * v6) != 1937011303)
    {
      uint64_t v6 = v8;
      if (v7 <= v8++) {
        return 0;
      }
    }
    int v11 = *(_DWORD *)(v2 + 24 * v6 + 8);
    size_t v12 = (v11 - 12);
    unsigned int v28 = v11 - 12;
    unint64_t v27 = 0;
    CADeprecated::CAAutoFree<CAFStrings>::allocBytes((void **)&v27, v12);
    uint64_t v13 = *((void *)this + 13);
    uint64_t v14 = v27;
    uint64_t v10 = (*(uint64_t (**)(uint64_t, void, uint64_t, size_t, unsigned int *, unsigned int *))(*(void *)v13 + 48))(v13, 0, *(void *)(v2 + 24 * v6 + 16) + 12, v12, v27, &v28);
    if (v10)
    {
      if (!v14) {
        return v10;
      }
      goto LABEL_35;
    }
    if (v28 < 4)
    {
      uint64_t v10 = 2003334207;
      if (!v14) {
        return v10;
      }
      goto LABEL_35;
    }
    unsigned int v15 = bswap32(*v14);
    unint64_t v16 = ((unint64_t)v28 - 4) / 0xC;
    if (v15 >= v16) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = v15;
    }
    *uint64_t v14 = v17;
    if (v17)
    {
      size_t v18 = (unint64_t *)(v14 + 2);
      uint64_t v19 = v17;
      do
      {
        *((_DWORD *)v18 - 1) = bswap32(*((_DWORD *)v18 - 1));
        *size_t v18 = bswap64(*v18);
        size_t v18 = (unint64_t *)((char *)v18 + 12);
        --v19;
      }
      while (v19);
    }
    uint64_t v20 = *(void *)a2;
    uint64_t v21 = *((void *)a2 + 1);
    if (*(void *)a2 == v21)
    {
      if (!v17)
      {
LABEL_34:
        uint64_t v10 = 0;
LABEL_35:
        free(v14);
        return v10;
      }
    }
    else
    {
      while (v21 != v20)
      {
        if (*(char *)(v21 - 1) < 0) {
          operator delete(*(void **)(v21 - 24));
        }
        v21 -= 32;
      }
      *((void *)a2 + 1) = v20;
      if (!*v14) {
        goto LABEL_34;
      }
    }
    unint64_t v22 = 0;
    uint64_t v23 = v14 + 2;
    do
    {
      memset(&__p, 0, sizeof(__p));
      int v29 = *((_DWORD *)v23 - 1);
      std::string::__assign_external(&__p, (const std::string::value_type *)v14 + (12 * v17 + 4) + *v23);
      unint64_t v24 = *((void *)a2 + 1);
      if (v24 >= *((void *)a2 + 2))
      {
        CFAllocatorRef v25 = std::vector<CAFStringsWrapper::CAFStringWrapper>::__push_back_slow_path<CAFStringsWrapper::CAFStringWrapper const&>((unint64_t *)a2, (uint64_t)&v29);
      }
      else
      {
        std::vector<CAFStringsWrapper::CAFStringWrapper>::__construct_one_at_end[abi:ne180100]<CAFStringsWrapper::CAFStringWrapper const&>((uint64_t)a2, (uint64_t)&v29);
        CFAllocatorRef v25 = (char *)(v24 + 32);
      }
      *((void *)a2 + 1) = v25;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v23 = (void *)((char *)v23 + 12);
      ++v22;
    }
    while (v22 < *v14);
    goto LABEL_34;
  }
  return 0;
}

void sub_19010815C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (v17) {
    free(v17);
  }
  _Unwind_Resume(exception_object);
}

double CAFAudioFile::ConvertMarkers(CAFAudioFile *this, uint64_t a2, CAFMarker *a3, AudioFileMarker *a4, CAFStringsWrapper *a5)
{
  if (this)
  {
    uint64_t v7 = 0;
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v9 = 40 * this;
    uint64_t v10 = a2 + 12;
    do
    {
      int v11 = (char *)a3 + v7;
      *(Float64 *)((char *)&a3->mFramePosition + v7 + 4) = 0.0;
      if (a4)
      {
        size_t v12 = CAFStringsWrapper::Get(*(CAFStringsWrapper **)&a4->mFramePosition, (uint64_t)a4->mName, *(_DWORD *)v10);
        if (v12) {
          *((void *)v11 + 1) = CFStringCreateWithCString(v8, v12, 0x8000100u);
        }
      }
      *((_DWORD *)v11 + 4) = *(_DWORD *)v10;
      double result = *(double *)(v10 - 8);
      *(double *)int v11 = result;
      *(void *)(v11 + 20) = *(void *)(v10 + 4);
      *((_DWORD *)v11 + 7) = *(_DWORD *)(v10 - 12);
      *((_WORD *)v11 + 17) = *(_DWORD *)(v10 + 12);
      v7 += 40;
      v10 += 28;
    }
    while (v9 != v7);
  }
  return result;
}

uint64_t CAFAudioFile::GetMarkerList(CAFAudioFile *this, unsigned int *a2, AudioFileMarkerList *a3, int a4)
{
  unsigned int v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *((void *)this + 18);
  uint64_t v6 = *((void *)this + 19);
  uint64_t v7 = v6 - v5;
  if (v6 == v5) {
    return 0;
  }
  uint64_t v12 = 0;
  unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 3);
  unsigned int v14 = 1;
  while (*(_DWORD *)(v5 + 24 * v12) != 1835102827)
  {
    uint64_t v12 = v14;
    if (v13 <= v14++) {
      return 0;
    }
  }
  uint64_t v17 = v5 + 24 * v12;
  uint64_t v18 = *(void *)(v17 + 16);
  LODWORD(v17) = *(_DWORD *)(v17 + 8);
  size_t v19 = (v17 - 12);
  unsigned int v34 = v17 - 12;
  uint64_t v33 = 0;
  CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)&v33, v19, 1);
  uint64_t v20 = v18 + 12;
  uint64_t v21 = v33;
  uint64_t v16 = (*(uint64_t (**)(void, void, uint64_t, size_t, unsigned int *, unsigned int *))(**((void **)this + 13) + 48))(*((void *)this + 13), 0, v20, v19, v33, &v34);
  if (v16)
  {
    if (!v21) {
      return v16;
    }
  }
  else
  {
    UInt32 v23 = bswap32(*v21);
    unsigned int v24 = bswap32(v21[1]);
    if (v34 >= 8) {
      LODWORD(v25) = ((unint64_t)v34 - 8) / 0x1C;
    }
    else {
      LODWORD(v25) = 0;
    }
    if (v25 >= v24) {
      uint64_t v25 = v24;
    }
    else {
      uint64_t v25 = v25;
    }
    *uint64_t v21 = v23;
    v21[1] = v25;
    if (v25)
    {
      unsigned int v26 = (int8x8_t *)(v21 + 5);
      uint64_t v27 = v25;
      do
      {
        v26[-2].i32[1] = bswap32(v26[-2].u32[1]);
        v26[-1] = (int8x8_t)bswap64(*(void *)&v26[-1]);
        v26->i32[0] = bswap32(v26->i32[0]);
        v26[1] = vrev32_s8(v26[1]);
        unsigned int v26 = (int8x8_t *)((char *)v26 + 28);
        --v27;
      }
      while (v27);
    }
    unsigned int v28 = 0;
    unsigned int v29 = (v4 - 8) / 0x28;
    if (v4 < 8) {
      unsigned int v29 = 0;
    }
    if (v29 >= v25) {
      unint64_t v30 = v25;
    }
    else {
      unint64_t v30 = v29;
    }
    a3->mSMPTE_TimeType = v23;
    a3->mNumberMarkers = v30;
    memset(v32, 0, sizeof(v32));
    if (a4)
    {
      if (CAFAudioFile::GetStringTable(this, (CAFStringsWrapper *)v32)) {
        unsigned int v28 = 0;
      }
      else {
        unsigned int v28 = (AudioFileMarker *)v32;
      }
    }
    CAFAudioFile::ConvertMarkers((CAFAudioFile *)v30, (uint64_t)(v21 + 2), (CAFMarker *)a3->mMarkers, v28, v22);
    *a2 = 40 * v30 + 8;
    unsigned int v35 = (void **)v32;
    std::vector<CAFStringsWrapper::CAFStringWrapper>::__destroy_vector::operator()[abi:ne180100](&v35);
  }
  free(v21);
  return v16;
}

void sub_1901084A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a9;
  std::vector<CAFStringsWrapper::CAFStringWrapper>::__destroy_vector::operator()[abi:ne180100](&a14);
  free(v14);
  _Unwind_Resume(a1);
}

uint64_t CAFAudioFile::ParsePacketTableChunk(CAFAudioFile *this)
{
  uint64_t v1 = *((void *)this + 18);
  uint64_t v2 = *((void *)this + 19) - v1;
  if (!v2) {
    return 0;
  }
  uint64_t v4 = 0;
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * (v2 >> 3);
  unsigned int v6 = 1;
  while (*(_DWORD *)(v1 + 24 * v4) != 1885432692)
  {
    uint64_t v4 = v6;
    if (v5 <= v6++) {
      return 0;
    }
  }
  uint64_t v8 = 1667787583;
  uint64_t v10 = *(void *)(v1 + 24 * v4 + 8);
  if ((unint64_t)(v10 - 12) >= 0x18)
  {
    uint64_t v11 = (*(uint64_t (**)(CAFAudioFile *))(*(void *)this + 224))(this);
    v36.int mStartOffset = 0;
    *(void *)&v36.mVariableFramesInPacket = 0;
    AudioFileObject::DeletePacketTable(this);
    if (!*((void *)this + 15)) {
      operator new();
    }
    int v12 = *((_DWORD *)this + 11);
    unsigned int v35 = 0;
    CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)&v35, v10 - 12, 0);
    unint64_t v13 = v35;
    uint64_t v14 = (*(uint64_t (**)(CAFAudioFile *))(*(void *)this + 632))(this);
    unsigned int v34 = 0;
    uint64_t v15 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, int8x8_t *, unsigned int *))(**((void **)this + 13)
                                                                                                  + 48))(*((void *)this + 13), 0, *(void *)(v1 + 24 * v4 + 16) + 12, v10 - 12, v13, &v34);
    uint64_t v16 = v15;
    if (v15) {
      goto LABEL_44;
    }
    if (v34 < 0x18) {
      goto LABEL_13;
    }
    int8x16_t v17 = vrev64q_s8(*(int8x16_t *)v13->i8);
    *(int8x16_t *)v13->i8 = v17;
    int8x8_t v18 = vrev32_s8(v13[2]);
    v13[2] = v18;
    *((void *)this + 22) = v17.i64[1];
    *((int8x8_t *)this + 23) = v18;
    if (!*((_DWORD *)this + 10) || !*((_DWORD *)this + 11))
    {
      if (v17.i64[0] > v10 - 36)
      {
LABEL_13:
        uint64_t v16 = 1667787583;
        if (!v13) {
          return v16;
        }
        goto LABEL_45;
      }
      (*(void (**)(CAFAudioFile *))(*(void *)this + 248))(this);
      if ((v11 & 0x8000000000000000) == 0)
      {
        uint64_t v20 = v13 + 3;
        unint64_t v21 = (unint64_t)&v13[-1] + v10 - 4;
        if ((unint64_t)&v13[3] < v21)
        {
          uint64_t v22 = 0;
          SInt64 v23 = 0;
          do
          {
            if (v22 >= *(void *)v13) {
              break;
            }
            uint64_t v24 = 0;
            UInt32 v25 = 0;
            v36.int mStartOffset = v23;
            do
            {
              if ((unint64_t)v20 + v24 >= v21)
              {
LABEL_47:
                exception = __cxa_allocate_exception(4uLL);
                _DWORD *exception = 1667787583;
                __cxa_throw(exception, MEMORY[0x1E4FBA3A8], 0);
              }
              if (v24 == 5)
              {
LABEL_43:
                uint64_t v16 = 1885563711;
                goto LABEL_44;
              }
              char v26 = v20->i8[v24];
              UInt32 v27 = v26 & 0x7F | (v25 << 7);
              ++v24;
              UInt32 v25 = v27;
            }
            while (v26 < 0);
            v36.uint64_t mDataByteSize = v27;
            uint64_t v14 = v27 <= v14 ? v14 : v27;
            if (v12)
            {
              uint64_t v33 = v22;
              UInt32 v28 = 0;
              uint64_t v20 = (int8x8_t *)((char *)v20 + v24);
            }
            else
            {
              uint64_t v29 = 0;
              UInt32 v28 = 0;
              unint64_t v30 = (char *)v20 + v24;
              do
              {
                if ((unint64_t)&v30[v29] >= v21) {
                  goto LABEL_47;
                }
                if (v29 == 5) {
                  goto LABEL_43;
                }
                char v31 = v30[v29];
                UInt32 v28 = v31 & 0x7F | (v28 << 7);
                ++v29;
              }
              while (v31 < 0);
              uint64_t v33 = v22;
              uint64_t v20 = (int8x8_t *)((char *)v20 + v24 + v29);
            }
            v36.mVariableFramesInPacket = v28;
            AudioFileObject::AppendPacket(this, &v36);
            v23 += v27;
            if (v23 > v11) {
              break;
            }
            uint64_t v22 = v33 + 1;
          }
          while ((unint64_t)v20 < v21);
        }
      }
    }
    uint64_t v19 = *((void *)this + 15);
    if (v19) {
      uint64_t v19 = *(void *)(v19 + 24);
    }
    uint64_t v16 = 1667787583;
    if (*v13 != v19)
    {
LABEL_44:
      if (!v13) {
        return v16;
      }
    }
    else
    {
      (*(void (**)(CAFAudioFile *, uint64_t))(*(void *)this + 648))(this, v14);
      uint64_t v16 = 0;
    }
LABEL_45:
    free(v13);
    return v16;
  }
  return v8;
}

void sub_1901088C0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (!a12) {
    JUMPOUT(0x190108898);
  }
  JUMPOUT(0x190108890);
}

void sub_1901088E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  if (a12) {
    free(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CAFAudioFile::WriteChunkData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void, void, uint64_t, void, uint64_t, uint64_t))(**(void **)(a1 + 104) + 56))(*(void *)(a1 + 104), 0, *(void *)(a2 + 16) + 12, (*(_DWORD *)(a2 + 8) - 12), a3, a4);
}

uint64_t CAFAudioFile::WriteChunkHeader(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v5 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  if (v5 >= 0) {
    v5 -= 12;
  }
  unsigned int v7 = bswap32(*(_DWORD *)a2);
  unint64_t v8 = bswap64(v5);
  return (*(uint64_t (**)(void, void, uint64_t, uint64_t, unsigned int *, uint64_t))(**(void **)(a1 + 104)
                                                                                              + 56))(*(void *)(a1 + 104), 0, v4, 12, &v7, a3);
}

uint64_t CAFAudioFile::AddUniqueChunk(CAFAudioFile *this, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t result = CAFAudioFile::ReplaceChunk(this, a2, 0, a3, a4);
  if (result == -1)
  {
    uint64_t v9 = *(uint64_t (**)(CAFAudioFile *, uint64_t, uint64_t, const void *))(*(void *)this + 752);
    return v9(this, a2, a3, a4);
  }
  return result;
}

uint64_t CAFAudioFile::ReplaceChunk(CAFAudioFile *this, uint64_t a2, int a3, uint64_t a4, const void *a5)
{
  uint64_t v5 = *((void *)this + 18);
  uint64_t v6 = *((void *)this + 19);
  uint64_t v7 = v6 - v5;
  if (v6 == v5) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v12 = 0;
  int v13 = 0;
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 3);
  int v20 = 0;
  unsigned int v15 = 1;
  while (1)
  {
    uint64_t v16 = (_DWORD *)(v5 + 24 * v12);
    if (*v16 == a2) {
      break;
    }
LABEL_6:
    uint64_t v12 = v15;
    if (v14 <= v15++) {
      return 0xFFFFFFFFLL;
    }
  }
  if (v13 != a3)
  {
    ++v13;
    goto LABEL_6;
  }
  if (a4 + 12 == *(void *)(v5 + 24 * v12 + 8))
  {
    uint64_t result = (*(uint64_t (**)(CAFAudioFile *, _DWORD *, int *))(*(void *)this + 768))(this, v16, &v20);
    if (!result) {
      return (*(uint64_t (**)(CAFAudioFile *, _DWORD *, const void *, int *))(*(void *)this + 776))(this, v16, a5, &v20);
    }
  }
  else
  {
    _DWORD *v16 = 1718773093;
    CAFAudioFile::ConsolidateFillerChunks(this);
    uint64_t v19 = *(uint64_t (**)(CAFAudioFile *, uint64_t, uint64_t, const void *))(*(void *)this + 752);
    return v19(this, a2, a4, a5);
  }
  return result;
}

void CAFAudioFile::ConsolidateFillerChunks(CAFAudioFile *this)
{
  uint64_t v1 = *((void *)this + 18);
  SInt64 v23 = (void *)((char *)this + 144);
  uint64_t v2 = *((void *)this + 19) - v1;
  if (v2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    uint64_t v7 = 0;
    LODWORD(v8) = 0;
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (v2 >> 3);
    do
    {
      unint64_t v10 = (v8 + 1);
      uint64_t v11 = (long long *)(v1 + 24 * v7);
      uint64_t v12 = *((void *)v11 + 2);
      long long v25 = *v11;
      uint64_t v26 = v12;
      if (v25 == 1718773093)
      {
        if (v9 <= v10)
        {
          LODWORD(v8) = v8 + 1;
        }
        else
        {
          uint64_t v13 = *((void *)&v25 + 1);
          LODWORD(v8) = v8 + 1;
          do
          {
            if (*(_DWORD *)(v1 + 24 * v10) != 1718773093) {
              break;
            }
            unint64_t v8 = (v8 + 1);
            v13 += *(void *)(v1 + 24 * v10 + 8);
            *((void *)&v25 + 1) = v13;
            unint64_t v10 = v8;
          }
          while (v9 > v8);
        }
        int v24 = 0;
        (*(void (**)(CAFAudioFile *, long long *, int *))(*(void *)this + 768))(this, &v25, &v24);
      }
      else
      {
        LODWORD(v8) = v8 + 1;
      }
      if ((unint64_t)v5 >= v6)
      {
        unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 3) + 1;
        if (v15 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((uint64_t)(v6 - (void)v4) >> 3) > v15) {
          unint64_t v15 = 0x5555555555555556 * ((uint64_t)(v6 - (void)v4) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)v4) >> 3) >= 0x555555555555555) {
          unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v16 = v15;
        }
        if (v16) {
          unint64_t v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v16);
        }
        else {
          uint64_t v17 = 0;
        }
        long long v18 = v25;
        unint64_t v19 = v16 + 8 * ((v5 - v4) >> 3);
        *(void *)(v19 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v26;
        *(_OWORD *)unint64_t v19 = v18;
        if (v5 == v4)
        {
          uint64_t v22 = (char *)(v16 + 8 * ((v5 - v4) >> 3));
        }
        else
        {
          unint64_t v20 = v16 + 8 * ((v5 - v4) >> 3);
          do
          {
            long long v21 = *(_OWORD *)(v5 - 24);
            uint64_t v22 = (char *)(v20 - 24);
            *(void *)(v20 - 8) = *((void *)v5 - 1);
            *(_OWORD *)(v20 - 24) = v21;
            v5 -= 24;
            v20 -= 24;
          }
          while (v5 != v4);
        }
        unint64_t v6 = v16 + 24 * v17;
        uint64_t v5 = (char *)(v19 + 24);
        if (v4) {
          operator delete(v4);
        }
        uint64_t v4 = v22;
      }
      else
      {
        long long v14 = v25;
        *((void *)v5 + 2) = v26;
        *(_OWORD *)uint64_t v5 = v14;
        v5 += 24;
      }
      uint64_t v7 = v8;
      uint64_t v1 = *((void *)this + 18);
      unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 19) - v1) >> 3);
    }
    while (v9 > v8);
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  std::vector<ChunkInfo64>::__assign_with_size[abi:ne180100]<ChunkInfo64*,ChunkInfo64*>(v23, v4, v5, 0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 3));
  if (v4) {
    operator delete(v4);
  }
}

void sub_190108E88(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CAFAudioFile::AddUserChunk(CAFAudioFile *this, int a2, unsigned int a3, const void *a4)
{
  int v41 = 0;
  LODWORD(v42) = a2;
  uint64_t v6 = a3 + 12;
  *((void *)&v42 + 1) = v6;
  uint64_t v7 = *((void *)this + 18);
  unint64_t v8 = (char **)((char *)this + 144);
  uint64_t v9 = *((void *)this + 19) - v7;
  if (!v9) {
    goto LABEL_18;
  }
  LODWORD(v10) = 0;
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 3);
  uint64_t v12 = (void *)(v7 + 8);
  int v13 = 0x7FFFFFFF;
  unsigned int v14 = -1;
  do
  {
    if (*((_DWORD *)v12 - 2) == 1718773093)
    {
      uint64_t v15 = *v12 - v6;
      BOOL v16 = *v12 != v6 && v15 <= 12;
      BOOL v17 = !v16;
      if (v17 && v15 < v13)
      {
        int v13 = *(_DWORD *)v12 - v6;
        unsigned int v14 = v10;
      }
    }
    unint64_t v10 = (v10 + 1);
    v12 += 3;
  }
  while (v11 > v10);
  if (v14 == -1)
  {
LABEL_18:
    uint64_t v40 = 0;
    uint64_t result = (*(uint64_t (**)(void, uint64_t *))(**((void **)this + 13) + 24))(*((void *)this + 13), &v40);
    if (!result)
    {
      uint64_t v43 = v40;
      unint64_t v23 = *((void *)this + 19);
      unint64_t v22 = *((void *)this + 20);
      if (v23 >= v22)
      {
        unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - (void)*v8) >> 3);
        unint64_t v30 = v29 + 1;
        if (v29 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - (void)*v8) >> 3);
        if (2 * v31 > v30) {
          unint64_t v30 = 2 * v31;
        }
        if (v31 >= 0x555555555555555) {
          unint64_t v32 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v32 = v30;
        }
        if (v32) {
          unint64_t v32 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v32);
        }
        else {
          uint64_t v33 = 0;
        }
        unint64_t v34 = v32 + 24 * v29;
        unint64_t v35 = v32 + 24 * v33;
        long long v36 = v42;
        *(void *)(v34 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v43;
        *(_OWORD *)unint64_t v34 = v36;
        unint64_t v25 = v34 + 24;
        uint64_t v38 = (char *)*((void *)this + 18);
        int v37 = (char *)*((void *)this + 19);
        if (v37 != v38)
        {
          do
          {
            long long v39 = *(_OWORD *)(v37 - 24);
            *(void *)(v34 - 8) = *((void *)v37 - 1);
            *(_OWORD *)(v34 - 24) = v39;
            v34 -= 24;
            v37 -= 24;
          }
          while (v37 != v38);
          int v37 = *v8;
        }
        *((void *)this + 18) = v34;
        *((void *)this + 19) = v25;
        *((void *)this + 20) = v35;
        if (v37) {
          operator delete(v37);
        }
      }
      else
      {
        long long v24 = v42;
        *(void *)(v23 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v43;
        *(_OWORD *)unint64_t v23 = v24;
        unint64_t v25 = v23 + 24;
      }
      *((void *)this + 19) = v25;
      uint64_t result = (*(uint64_t (**)(CAFAudioFile *, long long *, int *))(*(void *)this + 768))(this, &v42, &v41);
      if (!result)
      {
        uint64_t result = (*(uint64_t (**)(CAFAudioFile *, long long *, const void *, int *))(*(void *)this + 776))(this, &v42, a4, &v41);
        if (!result)
        {
          if ((*(uint64_t (**)(CAFAudioFile *))(*(void *)this + 224))(this)) {
            *((_DWORD *)this + 20) = 0;
          }
          else {
            (*(void (**)(CAFAudioFile *))(*(void *)this + 64))(this);
          }
          return 0;
        }
      }
    }
  }
  else
  {
    uint64_t v18 = v7 + 24 * v14;
    uint64_t v19 = *(void *)(v18 + 8);
    uint64_t v20 = v19 - v6;
    if (v19 == v6)
    {
      *(_DWORD *)uint64_t v18 = a2;
      uint64_t result = (*(uint64_t (**)(CAFAudioFile *, uint64_t, int *))(*(void *)this + 768))(this, v18, &v41);
      if (!result)
      {
        uint64_t result = (*(uint64_t (**)(CAFAudioFile *, uint64_t, const void *, int *))(*(void *)this + 776))(this, v18, a4, &v41);
        if (!result) {
          return 0;
        }
      }
    }
    else
    {
      unsigned int v26 = v14;
      uint64_t v27 = v7 + 24 * v14;
      uint64_t v43 = *(void *)(v27 + 16);
      uint64_t v28 = v43;
      *(void *)(v18 + 8) = v20;
      *(void *)(v27 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v28 + v6;
      uint64_t result = (*(uint64_t (**)(CAFAudioFile *, uint64_t, int *))(*(void *)this + 768))(this, v18, &v41);
      if (!result)
      {
        uint64_t result = (*(uint64_t (**)(CAFAudioFile *, long long *, int *))(*(void *)this + 768))(this, &v42, &v41);
        if (!result)
        {
          uint64_t result = (*(uint64_t (**)(CAFAudioFile *, long long *, const void *, int *))(*(void *)this + 776))(this, &v42, a4, &v41);
          if (!result)
          {
            std::vector<Chunk64Info>::insert((uint64_t)v8, &(*v8)[24 * v26], (unint64_t)&v42);
            return 0;
          }
        }
      }
    }
  }
  return result;
}

void std::vector<Chunk64Info>::insert(uint64_t a1, char *__src, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v6 = *(char **)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    uint64_t v12 = *(char **)a1;
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v13 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = __src - v12;
    int64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((__src - v12) >> 3);
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)v12) >> 3);
    if (2 * v16 > v13) {
      unint64_t v13 = 2 * v16;
    }
    if (v16 >= 0x555555555555555) {
      unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v17 = v13;
    }
    if (v17)
    {
      uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v17);
    }
    else
    {
      uint64_t v19 = 0;
      uint64_t v18 = 0;
    }
    unint64_t v22 = &v19[24 * v15];
    unint64_t v23 = &v19[24 * v18];
    if (v15 == v18)
    {
      if (v14 < 1)
      {
        if (v12 == __src) {
          unint64_t v25 = 1;
        }
        else {
          unint64_t v25 = 2 * v15;
        }
        unsigned int v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v25);
        unint64_t v22 = &v26[24 * (v25 >> 2)];
        unint64_t v23 = &v26[24 * v27];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        uint64_t v24 = v15 + 2;
        if (v15 >= -1) {
          uint64_t v24 = v15 + 1;
        }
        v22 -= 24 * (v24 >> 1);
      }
    }
    long long v28 = *(_OWORD *)v3;
    *((void *)v22 + 2) = *(void *)(v3 + 16);
    *(_OWORD *)unint64_t v22 = v28;
    unint64_t v29 = *(char **)a1;
    unint64_t v30 = v22;
    if (*(char **)a1 != __src)
    {
      unint64_t v31 = __src;
      unint64_t v32 = v22;
      do
      {
        long long v33 = *(_OWORD *)(v31 - 24);
        unint64_t v30 = v32 - 24;
        *((void *)v32 - 1) = *((void *)v31 - 1);
        *(_OWORD *)(v32 - 24) = v33;
        v31 -= 24;
        v32 -= 24;
      }
      while (v31 != v29);
    }
    unint64_t v34 = *(unsigned char **)(a1 + 8);
    uint64_t v35 = v34 - __src;
    if (v34 != __src) {
      memmove(v22 + 24, __src, v34 - __src);
    }
    long long v36 = *(char **)a1;
    *(void *)a1 = v30;
    *(void *)(a1 + 8) = &v22[v35 + 24];
    *(void *)(a1 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v23;
    if (v36)
    {
      operator delete(v36);
    }
  }
  else if (__src == v6)
  {
    long long v21 = *(_OWORD *)a3;
    *((void *)__src + 2) = *(void *)(a3 + 16);
    *(_OWORD *)uint64_t __src = v21;
    *(void *)(a1 + 8) = __src + 24;
  }
  else
  {
    unint64_t v8 = __src + 24;
    uint64_t v9 = v6 - 24;
    uint64_t v10 = *(void *)(a1 + 8);
    while (v9 < v6)
    {
      long long v11 = *(_OWORD *)v9;
      *(void *)(v10 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = *((void *)v9 + 2);
      *(_OWORD *)uint64_t v10 = v11;
      v10 += 24;
      v9 += 24;
    }
    *(void *)(a1 + 8) = v10;
    if (v6 != v8) {
      memmove(__src + 24, __src, v6 - v8);
    }
    if ((unint64_t)__src <= v3) {
      v3 += 24 * (*(void *)(a1 + 8) > v3);
    }
    long long v20 = *(_OWORD *)v3;
    *((void *)__src + 2) = *(void *)(v3 + 16);
    *(_OWORD *)uint64_t __src = v20;
  }
}

void sub_1901095A8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CAFAudioFile::GetUserChunk(CAFAudioFile *this, int a2, int a3, uint64_t a4, unsigned int *a5, void *a6)
{
  if (a4 < 0) {
    return 4294967256;
  }
  uint64_t v6 = 1667787583;
  uint64_t v7 = *((void *)this + 18);
  uint64_t v8 = *((void *)this + 19);
  uint64_t v9 = v8 - v7;
  if (v8 == v7) {
    return v6;
  }
  uint64_t v11 = 0;
  int v12 = 0;
  unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 3);
  unsigned int v14 = 1;
  while (*(_DWORD *)(v7 + 24 * v11) != a2)
  {
LABEL_7:
    uint64_t v11 = v14;
    BOOL v15 = v13 > v14++;
    if (!v15) {
      return v6;
    }
  }
  if (v12 != a3)
  {
    ++v12;
    goto LABEL_7;
  }
  uint64_t v17 = *a5;
  if (!v17) {
    return 561211770;
  }
  uint64_t v18 = v7 + 24 * v11;
  uint64_t v19 = *(void *)(v18 + 8) - 12;
  BOOL v15 = v19 <= a4;
  uint64_t v20 = v19 - a4;
  if (v15) {
    return 4294967256;
  }
  uint64_t v21 = *(void *)(v18 + 16);
  if (v20 <= v17) {
    uint64_t v17 = v20;
  }
  else {
    uint64_t v17 = v17;
  }
  unsigned int v22 = v17;
  (*(void (**)(void, void, uint64_t, uint64_t, void *, unsigned int *))(**((void **)this + 13) + 48))(*((void *)this + 13), 0, a4 + v21 + 12, v17, a6, &v22);
  uint64_t v6 = 0;
  *a5 = v22;
  return v6;
}

uint64_t CAFAudioFile::GetUserChunkSize64(CAFAudioFile *this, int a2, int a3, unint64_t *a4)
{
  uint64_t result = 1667787583;
  uint64_t v8 = (char *)this + 144;
  uint64_t v6 = *((void *)this + 18);
  uint64_t v7 = *((void *)v8 + 1);
  uint64_t v9 = v7 - v6;
  if (v7 != v6)
  {
    uint64_t v10 = 0;
    int v11 = 0;
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 3);
    unsigned int v13 = 1;
    do
    {
      if (*(_DWORD *)(v6 + 24 * v10) == a2)
      {
        if (v11 == a3)
        {
          uint64_t result = 0;
          *a4 = *(void *)(v6 + 24 * v10 + 8) - 12;
          return result;
        }
        ++v11;
      }
      uint64_t v10 = v13;
    }
    while (v12 > v13++);
  }
  return result;
}

uint64_t CAFAudioFile::SetSourceBitDepth(CAFAudioFile *this, int a2)
{
  if (!a2) {
    return 0;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  __int16 v9 = 257;
  (*(void (**)(CAFAudioFile *, CFMutableDictionaryRef *))(*(void *)this + 432))(this, &Mutable);
  CFStringRef CFStringFromBitDepth = CreateCFStringFromBitDepth(a2);
  if (CFStringFromBitDepth)
  {
    char v5 = CACFDictionary::AddString((CACFDictionary *)&Mutable, @"source bit depth", CFStringFromBitDepth);
    CFRelease(CFStringFromBitDepth);
    if (v5) {
      uint64_t v6 = (*(uint64_t (**)(CAFAudioFile *, CFMutableDictionaryRef *))(*(void *)this + 440))(this, &Mutable);
    }
    else {
      uint64_t v6 = 2003334207;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  return v6;
}

void sub_1901098AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t CAFAudioFile::GetSourceBitDepth(CAFAudioFile *this, int *a2)
{
  SourceBitDepthFromuint64_t ASBD = GetSourceBitDepthFromASBD((const AudioStreamBasicDescription *)*((unsigned int *)this + 8), *((_DWORD *)this + 9));
  *a2 = SourceBitDepthFromASBD;
  if (!SourceBitDepthFromASBD)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    __int16 v8 = 257;
    if (!(*(unsigned int (**)(CAFAudioFile *, CFMutableDictionaryRef *))(*(void *)this + 432))(this, &Mutable))
    {
      uint64_t v6 = 0;
      if (CACFDictionary::GetString((CACFDictionary *)&Mutable, @"source bit depth", (const __CFString **)&v6))*a2 = BitDepthFromCFString((const __CFString *)v6); {
    }
      }
    CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  }
  return 0;
}

void sub_1901099AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  _Unwind_Resume(a1);
}

uint64_t CAFAudioFile::IsValidFilePosition(CAFAudioFile *this, uint64_t a2)
{
  if (a2 < 0) {
    return 4294967246;
  }
  else {
    return 0;
  }
}

uint64_t CAFAudioFile::RemoveUserData(CAFAudioFile *this, int a2, int a3)
{
  uint64_t result = 1667787583;
  uint64_t v5 = *((void *)this + 18);
  uint64_t v6 = *((void *)this + 19);
  uint64_t v7 = v6 - v5;
  if (v6 != v5)
  {
    uint64_t v8 = 0;
    int v9 = 0;
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 3);
    unsigned int v11 = 1;
    do
    {
      unint64_t v12 = (_DWORD *)(v5 + 24 * v8);
      if (*v12 == a2)
      {
        if (v9 == a3)
        {
          _DWORD *v12 = 1718773093;
          CAFAudioFile::ConsolidateFillerChunks(this);
          return 0;
        }
        ++v9;
      }
      uint64_t v8 = v11;
      BOOL v13 = v10 >= v11;
      BOOL v14 = v10 == v11++;
    }
    while (!v14 && v13);
  }
  return result;
}

uint64_t CAFAudioFile::SetUserData(CAFAudioFile *this, uint64_t a2, int a3, uint64_t a4, const void *a5)
{
  uint64_t result = CAFAudioFile::ReplaceChunk(this, a2, a3, a4, a5);
  if (result == -1)
  {
    unint64_t v10 = *(uint64_t (**)(CAFAudioFile *, uint64_t, uint64_t, const void *))(*(void *)this + 752);
    return v10(this, a2, a4, a5);
  }
  return result;
}

uint64_t CAFAudioFile::GetUserDataAtOffset(CAFAudioFile *this, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, void *a6)
{
  return (*(uint64_t (**)(CAFAudioFile *, uint64_t, uint64_t, uint64_t, unsigned int *, void *))(*(void *)this + 744))(this, a2, a3, a4, a5, a6);
}

uint64_t CAFAudioFile::GetUserData(CAFAudioFile *this, uint64_t a2, uint64_t a3, unsigned int *a4, void *a5)
{
  return (*(uint64_t (**)(CAFAudioFile *, uint64_t, uint64_t, void, unsigned int *, void *))(*(void *)this + 744))(this, a2, a3, 0, a4, a5);
}

uint64_t CAFAudioFile::GetUserDataSize64(CAFAudioFile *this, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  return (*(uint64_t (**)(CAFAudioFile *, uint64_t, uint64_t, unint64_t *))(*(void *)this + 736))(this, a2, a3, a4);
}

uint64_t CAFAudioFile::GetUserDataSize(CAFAudioFile *this, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  return (*(uint64_t (**)(CAFAudioFile *, uint64_t, uint64_t, unsigned int *))(*(void *)this + 728))(this, a2, a3, a4);
}

uint64_t CAFAudioFile::CountUserData(CAFAudioFile *this, int a2, unsigned int *a3)
{
  uint64_t v4 = (char *)*((void *)this + 18);
  unint64_t v3 = (char *)*((void *)this + 19);
  uint64_t v5 = v3 - v4;
  if (v3 == v4)
  {
    unsigned int v6 = 0;
  }
  else
  {
    unsigned int v6 = 0;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3);
    unsigned int v8 = 1;
    do
    {
      int v9 = *(_DWORD *)v4;
      v4 += 24;
      if (v9 == a2) {
        ++v6;
      }
    }
    while (v7 > v8++);
  }
  *a3 = v6;
  return 0;
}

uint64_t CAFAudioFile::GetLoudnessInfoSize(CAFAudioFile *this, unsigned int *a2, unsigned int *a3)
{
  *a2 = 8;
  *a3 = 1;
  return 0;
}

uint64_t CAFAudioFile::SetLoudnessInfo(CAFAudioFile *this, CFPropertyListRef *a2)
{
  CFDataRef Data = CFPropertyListCreateData((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *a2, kCFPropertyListXMLFormat_v1_0, 0, 0);
  theCFDataRef Data = Data;
  char v9 = 1;
  if (Data)
  {
    unsigned int Length = CFDataGetLength(Data);
    BytePtr = CFDataGetBytePtr(theData);
    uint64_t v6 = (*(uint64_t (**)(CAFAudioFile *, uint64_t, void, const UInt8 *))(*(void *)this + 760))(this, 1819243876, Length, BytePtr);
  }
  else
  {
    uint64_t v6 = 1667787583;
  }
  CACFData::~CACFData((CACFData *)&theData);
  return v6;
}

void sub_190109CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t CAFAudioFile::GetLoudnessInfo(CAFAudioFile *this, CACFDictionary *a2)
{
  unsigned int v13 = 0;
  uint64_t v4 = (*(uint64_t (**)(CAFAudioFile *, uint64_t, void, unsigned int *))(*(void *)this + 728))(this, 1819243876, 0, &v13);
  if (!v4)
  {
    CADeprecated::CAAutoFree<unsigned char>::CAAutoFree(&bytes, v13, 1);
    uint64_t v4 = (*(uint64_t (**)(CAFAudioFile *, uint64_t, void, void, unsigned int *, UInt8 *))(*(void *)this + 744))(this, 1819243876, 0, 0, &v13, bytes);
    if (!v4)
    {
      char v11 = 1;
      CFDataRef v10 = CFDataCreate(0, bytes, v13);
      CFDictionaryRef v5 = (const __CFDictionary *)CFPropertyListCreateWithData((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v10, 0, 0, 0);
      uint64_t v4 = 1667787583;
      if (v5)
      {
        CFDictionaryRef theDict = v5;
        char v9 = 1;
        CFTypeID v6 = CFGetTypeID(v5);
        if (v6 == CFDictionaryGetTypeID())
        {
          CACFDictionary::SetCFMutableDictionaryFromCopy(a2, theDict, 1);
          uint64_t v4 = 0;
        }
        CACFObject<void const*>::~CACFObject((uint64_t)&theDict);
      }
      CACFData::~CACFData((CACFData *)&v10);
    }
    if (bytes) {
      free(bytes);
    }
  }
  return v4;
}

void sub_190109E90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13)
{
  if (a13) {
    free(a13);
  }
  _Unwind_Resume(a1);
}

uint64_t CAFAudioFile::SetSoundCheckDictionary(CAFAudioFile *this, CACFDictionary *a2)
{
  if (!a2 || !CACFDictionary::Size(a2)) {
    return 0;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  __int16 v11 = 257;
  (*(void (**)(CAFAudioFile *, CFMutableDictionaryRef *))(*(void *)this + 432))(this, &Mutable);
  unsigned int v4 = CACFDictionary::Size(a2);
  std::vector<__CFString const*>::vector(v9, v4);
  std::vector<__CFString const*>::vector(__p, v4);
  CACFDictionary::GetKeysAndValues(a2, (const void **)v9[0], (const void **)__p[0]);
  if (v4)
  {
    uint64_t v5 = 0;
    while ((CACFDictionary::AddString((CACFDictionary *)&Mutable, (const __CFString *)v9[0][v5], *(const __CFString **)((char *)__p[0] + v5 * 8)) & 1) != 0)
    {
      if (v4 == ++v5) {
        goto LABEL_7;
      }
    }
    uint64_t v6 = 2003334207;
  }
  else
  {
LABEL_7:
    uint64_t v6 = (*(uint64_t (**)(CAFAudioFile *, CFMutableDictionaryRef *))(*(void *)this + 440))(this, &Mutable);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v9[0])
  {
    v9[1] = v9[0];
    operator delete(v9[0]);
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  return v6;
}

void sub_19010A05C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&a15);
  _Unwind_Resume(a1);
}

void *std::vector<__CFString const*>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    size_t v4 = 8 * a2;
    uint64_t v5 = (char *)operator new(8 * a2);
    *a1 = v5;
    uint64_t v6 = &v5[8 * a2];
    a1[2] = v6;
    bzero(v5, v4);
    a1[1] = v6;
  }
  return a1;
}

uint64_t CAFAudioFile::GetSoundCheckDictionary(CAFAudioFile *this, CACFDictionary *a2)
{
  v12[16] = *MEMORY[0x1E4F143B8];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  __int16 v11 = 257;
  uint64_t v4 = (*(uint64_t (**)(CAFAudioFile *, CFMutableDictionaryRef *))(*(void *)this + 432))(this, &Mutable);
  if (!v4)
  {
    uint64_t v5 = 0;
    int v6 = 0;
    v12[0] = @"sc ave perceived power coeff";
    v12[1] = @"sc max perceived power coeff";
    v12[2] = @"sc max perceived power msec";
    v12[3] = @"sc peak amplitude";
    v12[4] = @"sc peak amplitude msec";
    v12[5] = @"aa version";
    v12[6] = @"aa bit depth pcm master";
    v12[7] = @"aa itu loudness";
    v12[8] = @"aa ebu loudness range";
    v12[9] = @"aa ebu top of loudness range";
    v12[10] = @"aa itu true peak";
    v12[11] = @"aa ebu max momentary loudness";
    v12[12] = @"aa ebu max short-term loudness";
    v12[13] = @"aa headroom master";
    v12[14] = @"aa noise floor master";
    v12[15] = @"aa source bandwidth master";
    char v9 = 0;
    do
    {
      CFStringRef v7 = (const __CFString *)v12[v5];
      if (CACFDictionary::GetString((CACFDictionary *)&Mutable, v7, (const __CFString **)&v9))
      {
        CACFDictionary::AddString(a2, v7, v9);
        ++v6;
      }
      ++v5;
    }
    while (v5 != 16);
    if (v6) {
      uint64_t v4 = 0;
    }
    else {
      uint64_t v4 = 1667787583;
    }
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  return v4;
}

void sub_19010A2E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  _Unwind_Resume(a1);
}

uint64_t CAFAudioFile::GetSoundCheckDictionarySize(CAFAudioFile *this, unsigned int *a2, unsigned int *a3)
{
  return (*(uint64_t (**)(CAFAudioFile *, unsigned int *, unsigned int *))(*(void *)this + 424))(this, a2, a3);
}

uint64_t CAFAudioFile::SetInfoDictionary(CAFAudioFile *this, CACFDictionary *a2)
{
  unsigned int v4 = CACFDictionary::Size(a2);
  size_t v5 = 8 * v4;
  int v6 = (const void **)malloc_type_malloc(v5, 0x2C8E6D5CuLL);
  CFStringRef v7 = v6;
  if (v4 && !v6)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    unint64_t v30 = std::bad_alloc::bad_alloc(exception);
  }
  *(_DWORD *)long long v33 = 0;
  bzero(v6, v5);
  CACFDictionary::GetKeys(a2, v7);
  unsigned int v8 = 0;
  uint64_t v9 = v4;
  if (v4)
  {
    LODWORD(v10) = 4;
    __int16 v11 = (CACFString **)v7;
    uint64_t v12 = v9;
    do
    {
      StringByteunsigned int Length = CACFString::GetStringByteLength(*v11, (const __CFString *)0x8000100);
      int v14 = StringByteLength + 1;
      if (StringByteLength + 1 > v8) {
        unsigned int v8 = StringByteLength + 1;
      }
      unint64_t v32 = 0;
      CACFDictionary::GetString(a2, (const __CFString *)*v11, (const __CFString **)&v32);
      int v15 = CACFString::GetStringByteLength((CACFString *)v32, (const __CFString *)0x8000100);
      *(_DWORD *)long long v33 = v15 + 1;
      if (v15 + 1 > v8) {
        unsigned int v8 = v15 + 1;
      }
      uint64_t v10 = (v14 + v10 + v15 + 1);
      ++v11;
      --v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v10 = 4;
  }
  CADeprecated::CAAutoFree<unsigned char>::CAAutoFree(&v32, v10, 1);
  unint64_t v16 = v32;
  LODWORD(v32->isa) = bswap32(v9);
  if (v9)
  {
    CFStringRef v17 = (const __CFString *)((char *)&v16->isa + 4);
    uint64_t v18 = (CACFString **)v7;
    do
    {
      *(_DWORD *)long long v33 = v8;
      CACFString::GetCString(*v18, v17, v33, (unsigned int *)0x8000100);
      uint64_t v19 = *(unsigned int *)v33;
      unint64_t v31 = 0;
      CACFDictionary::GetString(a2, (const __CFString *)*v18, (const __CFString **)&v31);
      CFStringRef v20 = (const __CFString *)((char *)v17 + v19);
      *(_DWORD *)long long v33 = v8;
      CACFString::GetCString((CACFString *)v31, v20, v33, (unsigned int *)0x8000100);
      CFStringRef v17 = (const __CFString *)((char *)v20 + *(unsigned int *)v33);
      ++v18;
      --v9;
    }
    while (v9);
  }
  uint64_t v21 = *((void *)this + 18);
  uint64_t v22 = *((void *)this + 19) - v21;
  if (v22)
  {
    uint64_t v23 = 0;
    unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * (v22 >> 3);
    unsigned int v25 = 1;
    while (*(_DWORD *)(v21 + 24 * v23) != 1768842863)
    {
      uint64_t v23 = v25;
      if (v24 <= v25++) {
        goto LABEL_21;
      }
    }
    (*(void (**)(CAFAudioFile *, uint64_t, void))(*(void *)this + 600))(this, 1768842863, 0);
  }
LABEL_21:
  uint64_t v27 = (*(uint64_t (**)(CAFAudioFile *, uint64_t, uint64_t, __CFString *))(*(void *)this + 752))(this, 1768842863, v10, v32);
  if (v32) {
    free(v32);
  }
  if (v7) {
    free(v7);
  }
  return v27;
}

void sub_19010A5EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  if (a11) {
    free(a11);
  }
  if (v11) {
    free(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CAFAudioFile::GetInfoDictionary(CAFAudioFile *this, CACFDictionary *a2)
{
  LODWORD(size) = 0;
  if (!(*(unsigned int (**)(CAFAudioFile *, uint64_t, void, size_t *))(*(void *)this + 728))(this, 1768842863, 0, &size))
  {
    CADeprecated::CAAutoFree<unsigned char>::CAAutoFree(&v6, size, 1);
    if (!(*(unsigned int (**)(CAFAudioFile *, uint64_t, void, void, size_t *, unsigned __int8 *))(*(void *)this + 744))(this, 1768842863, 0, 0, &size, v6))parseInfoStringsChunk(v6, size, a2); {
    if (v6)
    }
      free(v6);
  }
  int v6 = 0;
  unsigned int v4 = (AudioFileObject *)(*(uint64_t (**)(CAFAudioFile *, unsigned __int8 **))(*(void *)this + 544))(this, &v6);
  if (!v4) {
    AudioFileObject::AddDurationToInfoDictionary(v4, a2, (double *)&v6);
  }
  return 0;
}

void sub_19010A774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  if (a9) {
    free(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CAFAudioFile::GetInfoDictionarySize(CAFAudioFile *this, unsigned int *a2, unsigned int *a3)
{
  if (a2) {
    *a2 = 8;
  }
  if (a3) {
    *a3 = 1;
  }
  return 0;
}

uint64_t CAFAudioFile::SetChannelLayout(CAFAudioFile *this, UInt32 a2, const AudioChannelLayout *a3)
{
  UInt32 ioPropertyDataSize = 4;
  int outPropertyData = 0;
  uint64_t Property = AudioFormatGetProperty(0x6E63686Du, a2, a3, &ioPropertyDataSize, &outPropertyData);
  if (!Property)
  {
    if (outPropertyData == *((_DWORD *)this + 13))
    {
      __dst = 0;
      CADeprecated::CAAutoFree<unsigned char>::allocBytes(&__dst, a2, 1);
      CFStringRef v7 = (int8x8_t *)__dst;
      memcpy(__dst, a3, a2);
      uint64_t v8 = v7[1].u32[0];
      *CFStringRef v7 = vrev32_s8(*v7);
      v7[1].i32[0] = bswap32(v8);
      if (v8)
      {
        uint64_t v9 = (unsigned int *)&v7[3] + 1;
        do
        {
          *((int8x16_t *)v9 - 1) = vrev32q_s8(*((int8x16_t *)v9 - 1));
          *uint64_t v9 = bswap32(*v9);
          v9 += 5;
          --v8;
        }
        while (v8);
      }
      uint64_t Property = (*(uint64_t (**)(CAFAudioFile *, uint64_t, void, int8x8_t *))(*(void *)this + 760))(this, 1667785070, a2, v7);
      free(v7);
    }
    else
    {
      return 4294967246;
    }
  }
  return Property;
}

void sub_19010A8E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  if (a9) {
    free(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CAFAudioFile::GetChannelLayout(CAFAudioFile *this, unsigned int *a2, AudioChannelLayout *a3)
{
  uint64_t v4 = *((void *)this + 18);
  uint64_t v5 = *((void *)this + 19);
  uint64_t v6 = v5 - v4;
  if (v5 == v4)
  {
LABEL_5:
    *a2 = 0;
    return 1667787583;
  }
  else
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    unsigned int v10 = 1;
    while (*(_DWORD *)(v4 + 24 * v8) != 1667785070)
    {
      uint64_t v8 = v10;
      if (v9 <= v10++) {
        goto LABEL_5;
      }
    }
    unsigned int v13 = *(_DWORD *)(v4 + 24 * v8 + 8) - 12;
    if (*a2 >= v13)
    {
      uint64_t result = (*(uint64_t (**)(void, void, uint64_t))(**((void **)this + 13) + 48))(*((void *)this + 13), 0, *(void *)(v4 + 24 * v8 + 16) + 12);
      if (!result)
      {
        AudioChannelLayout_BtoN(a3, v13);
        uint64_t result = 0;
        *a2 = v13;
      }
    }
    else
    {
      return 561211770;
    }
  }
  return result;
}

uint64_t CAFAudioFile::GetChannelLayoutSize(CAFAudioFile *this, unsigned int *a2, unsigned int *a3)
{
  if (a3) {
    *a3 = 1;
  }
  uint64_t v3 = *((void *)this + 18);
  uint64_t v4 = *((void *)this + 19) - v3;
  if (v4)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 3);
    unsigned int v7 = 1;
    while (1)
    {
      uint64_t v8 = (_DWORD *)(v3 + 24 * v5);
      if (*v8 == 1667785070) {
        break;
      }
      uint64_t v5 = v7;
      if (v6 <= v7++) {
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    uint64_t v8 = 0;
  }
  if (!a2) {
    return 0;
  }
  if (v8)
  {
    uint64_t result = 0;
    int v11 = v8[2] - 12;
  }
  else
  {
    int v11 = 0;
    uint64_t result = 1667787583;
  }
  *a2 = v11;
  return result;
}

uint64_t CAFAudioFile::SetRegionList(CAFAudioFile *this, unsigned int a2, const AudioFileRegionList *a3)
{
  uint64_t v4 = this;
  memset(v36, 0, sizeof(v36));
  CAFAudioFile::GetStringTable(this, (CAFStringsWrapper *)v36);
  UInt32 mNumberRegions = a3->mNumberRegions;
  mRegions = a3->mRegions;
  if (mNumberRegions)
  {
    unint64_t v34 = a3;
    uint64_t v35 = v4;
    int v7 = 0;
    int v8 = 0;
    unint64_t v9 = a3->mRegions;
    do
    {
      UInt32 mNumberMarkers = v9->mNumberMarkers;
      CFStringRef mName = v9->mName;
      if (mName)
      {
        unsigned int Length = CFStringGetLength(mName);
        CFIndex v13 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
        CADeprecated::CAAutoFree<char>::CAAutoFree(&buffer, v13);
        if (CFStringGetCString(v9->mName, buffer, v13, 0x8000100u)) {
          CAFStringsWrapper::Put((CAFStringsWrapper *)v36, v9->mRegionID, buffer);
        }
        if (buffer) {
          free(buffer);
        }
        UInt32 v14 = v9->mNumberMarkers;
        if (v14)
        {
          unint64_t v15 = 0;
          p_CFStringRef mName = &v9->mMarkers[0].mName;
          do
          {
            if (*p_mName)
            {
              unsigned int v17 = CFStringGetLength(*p_mName);
              CFIndex v18 = CFStringGetMaximumSizeForEncoding(v17, 0x8000100u) + 1;
              CADeprecated::CAAutoFree<char>::CAAutoFree(&buffer, v18);
              if (CFStringGetCString(*p_mName, buffer, v18, 0x8000100u)) {
                CAFStringsWrapper::Put((CAFStringsWrapper *)v36, *((_DWORD *)p_mName + 2), buffer);
              }
              if (buffer) {
                free(buffer);
              }
              UInt32 v14 = v9->mNumberMarkers;
            }
            ++v15;
            p_mName += 5;
          }
          while (v15 < v14);
        }
      }
      else
      {
        UInt32 v14 = v9->mNumberMarkers;
      }
      v8 += mNumberMarkers;
      unint64_t v9 = (AudioFileRegion *)((char *)v9 + 40 * v14 + 24);
      ++v7;
    }
    while (v7 != mNumberRegions);
    int v19 = 28 * v8;
    a3 = v34;
    uint64_t v4 = v35;
  }
  else
  {
    int v19 = 0;
  }
  uint64_t v20 = CAFAudioFile::SetStringTable(v4, (CAFStringsWrapper *)v36);
  if (!v20)
  {
    buffer = 0;
    CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)&buffer, v19 + 12 * mNumberRegions + 8, 0);
    UInt32 mSMPTE_TimeType = a3->mSMPTE_TimeType;
    uint64_t v22 = (unsigned int *)buffer;
    *(_DWORD *)buffer = mSMPTE_TimeType;
    v22[1] = mNumberRegions;
    unsigned int v23 = 0;
    if (mNumberRegions)
    {
      unint64_t v24 = v22 + 2;
      do
      {
        UInt32 *v24 = mRegions->mRegionID;
        uint64_t v25 = mRegions->mNumberMarkers;
        v24[2] = v25;
        v24[1] = mRegions->mFlags;
        uint64_t v26 = 0;
        if (v25)
        {
          uint64_t v27 = v24 + 6;
          do
          {
            *((void *)v27 - 1) = *(void *)((char *)&mRegions->mMarkers[0].mFramePosition + v26);
            *uint64_t v27 = *(SInt32 *)((char *)&mRegions->mMarkers[0].mMarkerID + v26);
            *(AudioFile_SMPTE_Time *)(v27 + 1) = *(AudioFile_SMPTE_Time *)((char *)&mRegions->mMarkers[0].mSMPTETime
                                                                         + v26);
            *(v27 - 3) = *(UInt32 *)((char *)&mRegions->mMarkers[0].mType + v26);
            v27[3] = *(unsigned __int16 *)((char *)&mRegions->mMarkers[0].mChannel + v26);
            v26 += 40;
            v27 += 7;
          }
          while (40 * v25 != v26);
          LODWORD(v2std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = mRegions->mNumberMarkers;
        }
        mRegions = (AudioFileRegion *)((char *)mRegions + 40 * v26 + 24);
        v24 += 7 * v25 + 3;
        ++v23;
      }
      while (v23 != mNumberRegions);
      unsigned int v23 = v22[1];
      if (v23)
      {
        int v28 = 0;
        unint64_t v29 = (int8x8_t *)(v22 + 2);
        do
        {
          unsigned int v30 = v29[1].u32[0];
          if (v30)
          {
            unint64_t v31 = v29 + 2;
            uint64_t v32 = v29[1].u32[0];
            do
            {
              v31[-1].i32[1] = bswap32(v31[-1].u32[1]);
              *unint64_t v31 = (int8x8_t)bswap64((unint64_t)*v31);
              v31[1].i32[0] = bswap32(v31[1].u32[0]);
              v31[2] = vrev32_s8(v31[2]);
              unint64_t v31 = (int8x8_t *)((char *)v31 + 28);
              --v32;
            }
            while (v32);
          }
          *unint64_t v29 = vrev32_s8(*v29);
          v29[1].i32[0] = bswap32(v30);
          unint64_t v29 = (int8x8_t *)((char *)v29 + 28 * v30 + 12);
          ++v28;
        }
        while (v28 != v23);
        unsigned int v23 = v22[1];
      }
    }
    *uint64_t v22 = bswap32(*v22);
    v22[1] = bswap32(v23);
    uint64_t v20 = (*(uint64_t (**)(CAFAudioFile *, uint64_t, void, unsigned int *))(*(void *)v4 + 760))(v4, 1919248238, v19 + 12 * mNumberRegions + 8, v22);
    free(v22);
  }
  buffer = (char *)v36;
  std::vector<CAFStringsWrapper::CAFStringWrapper>::__destroy_vector::operator()[abi:ne180100]((void ***)&buffer);
  return v20;
}

void sub_19010AE20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14)
{
  free(v14);
  a14 = &a11;
  std::vector<CAFStringsWrapper::CAFStringWrapper>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  _Unwind_Resume(a1);
}

uint64_t CAFAudioFile::SetStringTable(CAFAudioFile *this, CAFStringsWrapper *a2)
{
  unint64_t v4 = *((void *)a2 + 1) - *(void *)a2;
  unsigned int v5 = 12 * (v4 >> 5) + 4;
  if ((v4 >> 5))
  {
    uint64_t v6 = (v4 >> 5);
    uint64_t v7 = *(void *)a2 + 16;
    unsigned int v8 = v5;
    do
    {
      if (*(char *)(v7 + 15) < 0) {
        uint64_t v9 = *(void *)v7;
      }
      else {
        LODWORD(v9) = *(unsigned __int8 *)(v7 + 15);
      }
      v8 += v9 + 1;
      v7 += 32;
      --v6;
    }
    while (v6);
  }
  else
  {
    unsigned int v8 = 12 * (v4 >> 5) + 4;
  }
  uint64_t v32 = 0;
  uint64_t v10 = v8;
  CADeprecated::CAAutoFree<CAFStrings>::allocBytes((void **)&v32, v8);
  int v11 = v32;
  uint64_t v12 = *(void *)a2;
  unint64_t v13 = *((void *)a2 + 1) - *(void *)a2;
  unint64_t v14 = v13 >> 5;
  *uint64_t v32 = v13 >> 5;
  if ((v13 & 0x1FFFFFFFE0) != 0)
  {
    unint64_t v15 = 0;
    unsigned int v16 = 0;
    size_t v17 = v10 - v5;
    CFIndex v18 = v11 + 2;
    uint64_t v19 = 16;
    uint64_t v20 = (char *)v11 + v5;
    do
    {
      uint64_t v21 = v12 + v19;
      *((_DWORD *)v18 - 1) = *(_DWORD *)(v21 - 16);
      unsigned int v22 = v16;
      *CFIndex v18 = v16;
      unsigned int v23 = (const char *)(v21 - 8);
      if (*(char *)(v21 + 15) < 0) {
        unsigned int v23 = *(const char **)v23;
      }
      strlcpy(&v20[v16], v23, v17);
      uint64_t v12 = *(void *)a2;
      if (*(char *)(*(void *)a2 + v19 + 15) < 0) {
        uint64_t v24 = *(void *)(v12 + v19);
      }
      else {
        uint64_t v24 = *(unsigned __int8 *)(*(void *)a2 + v19 + 15);
      }
      size_t v25 = v24 + 1;
      unsigned int v16 = v24 + 1 + v22;
      BOOL v26 = v17 >= v25;
      size_t v27 = v17 - v25;
      if (v26) {
        size_t v17 = v27;
      }
      else {
        size_t v17 = 0;
      }
      ++v15;
      v19 += 32;
      CFIndex v18 = (void *)((char *)v18 + 12);
    }
    while (v15 < ((unint64_t)(*((void *)a2 + 1) - v12) >> 5));
    int v11 = v32;
    LODWORD(v14) = *v32;
  }
  if (v14)
  {
    uint64_t v28 = v14;
    unint64_t v29 = (unint64_t *)(v11 + 2);
    do
    {
      *((_DWORD *)v29 - 1) = bswap32(*((_DWORD *)v29 - 1));
      *unint64_t v29 = bswap64(*v29);
      unint64_t v29 = (unint64_t *)((char *)v29 + 12);
      --v28;
    }
    while (v28);
  }
  *int v11 = bswap32(v14);
  uint64_t v30 = (*(uint64_t (**)(CAFAudioFile *, uint64_t, uint64_t, _DWORD *))(*(void *)this + 760))(this, 1937011303, v10, v11);
  free(v11);
  return v30;
}

void sub_19010B080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  free(v10);
  _Unwind_Resume(a1);
}

uint64_t CAFAudioFile::GetRegionList(CAFAudioFile *this, unsigned int *a2, AudioFileRegionList *a3)
{
  return (*(uint64_t (**)(CAFAudioFile *, unsigned int *, AudioFileRegionList *, uint64_t))(*(void *)this + 800))(this, a2, a3, 1);
}

uint64_t CAFAudioFile::GetRegionListSize(CAFAudioFile *this, unsigned int *a2, unsigned int *a3)
{
  if (a3) {
    *a3 = 1;
  }
  if (!a2) {
    return 0;
  }
  *a2 = 0;
  uint64_t v5 = *((void *)this + 18);
  uint64_t v6 = *((void *)this + 19);
  uint64_t v7 = v6 - v5;
  if (v6 == v5) {
    return 0;
  }
  uint64_t v8 = 0;
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 3);
  unsigned int v10 = 1;
  while (*(_DWORD *)(v5 + 24 * v8) != 1919248238)
  {
    uint64_t v8 = v10;
    if (v9 <= v10++) {
      return 0;
    }
  }
  uint64_t v12 = v5 + 24 * v8;
  uint64_t v13 = *(void *)(v12 + 16);
  LODWORD(v12) = *(_DWORD *)(v12 + 8);
  size_t v14 = (v12 - 12);
  LODWORD(v25) = v12 - 12;
  uint64_t v24 = 0;
  CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)&v24, v14, 1);
  uint64_t v15 = *((void *)this + 13);
  unsigned int v16 = v24;
  uint64_t v17 = (*(uint64_t (**)(uint64_t, void, uint64_t, size_t, CAFRegionChunk *, unint64_t *))(*(void *)v15 + 48))(v15, 0, v13 + 12, v14, v24, &v25);
  if (v17)
  {
    char v18 = 0;
  }
  else if (CAFRegionChunk_BtoN(v16, v25))
  {
    char v18 = 0;
    uint64_t v17 = 2003334207;
  }
  else
  {
    UInt32 mNumberRegions = v16->mNumberRegions;
    if (mNumberRegions)
    {
      mRegions = v16->mRegions;
      unsigned int v21 = 8;
      do
      {
        UInt32 mNumberMarkers = mRegions->mNumberMarkers;
        v21 += 40 * mNumberMarkers + 24;
        mRegions = (CAFRegion *)((char *)mRegions + 28 * mNumberMarkers + 12);
        --mNumberRegions;
      }
      while (mNumberRegions);
    }
    else
    {
      unsigned int v21 = 8;
    }
    *a2 = v21;
    char v18 = 1;
  }
  if (v16) {
    free(v16);
  }
  if (v18) {
    return 0;
  }
  return v17;
}

void sub_19010B26C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (v9) {
    free(v9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CAFAudioFile::SetMarkerList(CAFAudioFile *this, unsigned int a2, const AudioFileMarkerList *a3)
{
  memset(v20, 0, sizeof(v20));
  CAFAudioFile::GetStringTable(this, (CAFStringsWrapper *)v20);
  UInt32 mNumberMarkers = a3->mNumberMarkers;
  if (mNumberMarkers >= a2 / 0x28) {
    uint64_t v7 = a2 / 0x28;
  }
  else {
    uint64_t v7 = mNumberMarkers;
  }
  if (v7)
  {
    p_CFStringRef mName = &a3->mMarkers[0].mName;
    uint64_t v9 = v7;
    do
    {
      if (*p_mName)
      {
        unsigned int Length = CFStringGetLength(*p_mName);
        CFIndex v11 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
        CADeprecated::CAAutoFree<char>::CAAutoFree(&buffer, v11);
        if (CFStringGetCString(*p_mName, buffer, v11, 0x8000100u)) {
          CAFStringsWrapper::Put((CAFStringsWrapper *)v20, *((_DWORD *)p_mName + 2), buffer);
        }
        if (buffer) {
          free(buffer);
        }
      }
      p_mName += 5;
      --v9;
    }
    while (v9);
  }
  uint64_t v12 = CAFAudioFile::SetStringTable(this, (CAFStringsWrapper *)v20);
  if (!v12)
  {
    buffer = 0;
    CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)&buffer, (28 * v7 + 8), 0);
    UInt32 mSMPTE_TimeType = a3->mSMPTE_TimeType;
    size_t v14 = buffer;
    *(_DWORD *)buffer = a3->mSMPTE_TimeType;
    *((_DWORD *)v14 + 1) = v7;
    if (v7)
    {
      uint64_t v15 = 0;
      unsigned int v16 = v14 + 20;
      do
      {
        *((void *)v16 - 1) = *(void *)&a3->mMarkers[v15].mFramePosition;
        *(_DWORD *)unsigned int v16 = a3->mMarkers[v15].mMarkerID;
        *(AudioFile_SMPTE_Time *)(v16 + 4) = a3->mMarkers[v15].mSMPTETime;
        *((_DWORD *)v16 - 3) = a3->mMarkers[v15].mType;
        *((_DWORD *)v16 + 3) = a3->mMarkers[v15++].mChannel;
        v16 += 28;
      }
      while (v7 != v15);
      uint64_t v17 = (int8x8_t *)(v14 + 20);
      uint64_t v18 = v7;
      do
      {
        v17[-2].i32[1] = bswap32(v17[-2].u32[1]);
        v17[-1] = (int8x8_t)bswap64(*(void *)&v17[-1]);
        v17->i32[0] = bswap32(v17->i32[0]);
        v17[1] = vrev32_s8(v17[1]);
        uint64_t v17 = (int8x8_t *)((char *)v17 + 28);
        --v18;
      }
      while (v18);
    }
    *(_DWORD *)size_t v14 = bswap32(mSMPTE_TimeType);
    *((_DWORD *)v14 + 1) = bswap32(v7);
    uint64_t v12 = (*(uint64_t (**)(CAFAudioFile *, uint64_t, void, char *))(*(void *)this + 760))(this, 1835102827, (28 * v7 + 8), v14);
    free(v14);
  }
  buffer = (char *)v20;
  std::vector<CAFStringsWrapper::CAFStringWrapper>::__destroy_vector::operator()[abi:ne180100]((void ***)&buffer);
  return v12;
}

void sub_19010B4BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  if (a12) {
    free(a12);
  }
  a12 = &a9;
  std::vector<CAFStringsWrapper::CAFStringWrapper>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

uint64_t CAFAudioFile::GetMarkerList(CAFAudioFile *this, unsigned int *a2, AudioFileMarkerList *a3)
{
  return (*(uint64_t (**)(CAFAudioFile *, unsigned int *, AudioFileMarkerList *, uint64_t))(*(void *)this + 792))(this, a2, a3, 1);
}

uint64_t CAFAudioFile::GetMarkerListSize(CAFAudioFile *this, unsigned int *a2, unsigned int *a3)
{
  if (a3) {
    *a3 = 1;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 18);
  uint64_t v5 = *((void *)this + 19);
  uint64_t v6 = v5 - v4;
  if (v5 == v4)
  {
LABEL_8:
    uint64_t result = 0;
    *a2 = 0;
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    unsigned int v9 = 1;
    while (*(_DWORD *)(v4 + 24 * v7) != 1835102827)
    {
      uint64_t v7 = v9;
      if (v8 <= v9++) {
        goto LABEL_8;
      }
    }
    int v12 = 4;
    unsigned int v13 = 0;
    uint64_t result = (*(uint64_t (**)(void, void, void, uint64_t, unsigned int *, int *))(**((void **)this + 13)
                                                                                               + 48))(*((void *)this + 13), 0, (*(_DWORD *)(v4 + 24 * v7 + 16) + 16), 4, &v13, &v12);
    if (!result) {
      *a2 = 40 * bswap32(v13) + 8;
    }
  }
  return result;
}

uint64_t CAFAudioFile::SetMagicCookieData(CAFAudioFile *this, UInt32 a2, const void *a3)
{
  uint64_t v6 = (*(uint64_t (**)(CAFAudioFile *, uint64_t, void, const void *))(*(void *)this + 760))(this, 1802857321, a2, a3);
  if (!v6)
  {
    long long v7 = *(_OWORD *)((char *)this + 40);
    long long outPropertyData = *(_OWORD *)((char *)this + 24);
    long long v27 = v7;
    uint64_t v28 = *((void *)this + 7);
    int v8 = DWORD1(v7);
    UInt32 ioPropertyDataSize = 40;
    if (AudioFormatGetProperty(0x666D7469u, a2, a3, &ioPropertyDataSize, &outPropertyData))
    {
      uint64_t v9 = *((void *)this + 32);
      *((void *)this + 32) = 0;
      if (v9) {
        MEMORY[0x192FC8940](v9, 0x1000C403E1C8BA9);
      }
    }
    else
    {
      if (DWORD2(outPropertyData) == 1700998451 || DWORD2(outPropertyData) == 1700997939) {
        DWORD1(v27) = v8;
      }
      (*(void (**)(CAFAudioFile *, long long *))(*(void *)this + 184))(this, &outPropertyData);
    }
    long long v10 = *(_OWORD *)((char *)this + 40);
    long long outPropertyData = *(_OWORD *)((char *)this + 24);
    long long v27 = v10;
    uint64_t v28 = *((void *)this + 7);
    uint64_t v22 = 0;
    memset(v21, 0, sizeof(v21));
    DWORD2(v21[0]) = DWORD2(outPropertyData);
    unsigned int v23 = a3;
    uint64_t v24 = a2;
    UInt32 ioPropertyDataSize = 0;
    uint64_t v6 = 0;
    if (!AudioFormatGetPropertyInfo(0x666C7374u, 0x38u, v21, &ioPropertyDataSize))
    {
      uint64_t v6 = 2003334207;
      if (ioPropertyDataSize >= 0x30)
      {
        UInt32 v11 = ioPropertyDataSize;
        int v12 = (char *)malloc_type_malloc(48 * (ioPropertyDataSize / 0x30uLL), 0x2C8E6D5CuLL);
        if (!v12)
        {
          exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          uint64_t v20 = std::bad_alloc::bad_alloc(exception);
        }
        unsigned int v13 = v12;
        bzero(v12, 48 * (v11 / 0x30uLL));
        if (AudioFormatGetProperty(0x666C7374u, 0x38u, v21, &ioPropertyDataSize, v13)) {
          goto LABEL_17;
        }
        if (ioPropertyDataSize >= 0x30)
        {
          UInt32 v14 = ioPropertyDataSize / 0x30;
          if (ioPropertyDataSize >= 0x60) {
            (*(void (**)(CAFAudioFile *))(*(void *)this + 208))(this);
          }
          uint64_t v15 = &v13[48 * v14 - 48];
          long long v16 = *(_OWORD *)v15;
          long long v17 = *((_OWORD *)v15 + 1);
          *((void *)this + 31) = *((void *)v15 + 4);
          *(_OWORD *)((char *)this + 232) = v17;
          *(_OWORD *)((char *)this + 21std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v16;
LABEL_17:
          free(v13);
          return 0;
        }
      }
    }
  }
  return v6;
}

uint64_t CAFAudioFile::GetMagicCookieData(CAFAudioFile *this, unsigned int *a2, void *a3)
{
  uint64_t v4 = *((void *)this + 18);
  uint64_t v5 = *((void *)this + 19);
  uint64_t v6 = v5 - v4;
  if (v5 == v4)
  {
LABEL_5:
    *a2 = 0;
    return 1667787583;
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    unsigned int v9 = 1;
    while (*(_DWORD *)(v4 + 24 * v7) != 1802857321)
    {
      uint64_t v7 = v9;
      if (v8 <= v9++) {
        goto LABEL_5;
      }
    }
    unsigned int v12 = *(_DWORD *)(v4 + 24 * v7 + 8) - 12;
    if (*a2 >= v12)
    {
      uint64_t result = (*(uint64_t (**)(void, void, uint64_t))(**((void **)this + 13) + 48))(*((void *)this + 13), 0, *(void *)(v4 + 24 * v7 + 16) + 12);
      *a2 = v12;
    }
    else
    {
      return 561211770;
    }
  }
  return result;
}

uint64_t CAFAudioFile::PacketToDependencyInfo(CAFAudioFile *this, AudioPacketDependencyInfoTranslation *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (!(*(unsigned int (**)(CAFAudioFile *))(*(void *)this + 272))(this))
  {
    AudioFileObject::PacketToDependencyInfo(this, a2);
    return 0;
  }
  v17[0] = 0;
  v17[1] = 0;
  unsigned int v4 = *((_DWORD *)this + 10);
  int v15 = 1;
  unsigned int v16 = v4;
  memset(&v14, 0, sizeof(v14));
  SInt64 mPacket = a2->mPacket;
  if (mPacket >= (*(uint64_t (**)(CAFAudioFile *))(*(void *)this + 240))(this))
  {
    uint64_t v9 = 1885563711;
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return v9;
    }
    *(_DWORD *)AudioFormatInfo buf = 136315394;
    uint64_t v19 = "CAFAudioFile.cpp";
    LOWORD(v20[0]) = 1024;
    *(_DWORD *)((char *)v20 + 2) = 3047;
    long long v10 = MEMORY[0x1E4F14500];
    UInt32 v11 = "%25s:%-5d  invalid packet number";
LABEL_12:
    _os_log_impl(&dword_18FEC0000, v10, OS_LOG_TYPE_ERROR, v11, buf, 0x12u);
    return v9;
  }
  if (v4)
  {
    a2->mIsIndependentlyDecodable = 0;
    p_mIsIndependentlyDecodable = &a2->mIsIndependentlyDecodable;
    a2->mNumberPrerollPackets = 0;
    p_mNumberPrerollPackets = &a2->mNumberPrerollPackets;
    goto LABEL_5;
  }
  unsigned int v12 = (uint64_t *)*((void *)this + 15);
  if (!v12)
  {
    uint64_t v9 = 1685348671;
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return v9;
    }
    *(_DWORD *)AudioFormatInfo buf = 136315394;
    uint64_t v19 = "CAFAudioFile.cpp";
    LOWORD(v20[0]) = 1024;
    *(_DWORD *)((char *)v20 + 2) = 3052;
    long long v10 = MEMORY[0x1E4F14500];
    UInt32 v11 = "%25s:%-5d  no packet table for variable-sized packets";
    goto LABEL_12;
  }
  if (a2->mPacket >= v12[3])
  {
    uint64_t v9 = 1885563711;
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return v9;
    }
    *(_DWORD *)AudioFormatInfo buf = 136315394;
    uint64_t v19 = "CAFAudioFile.cpp";
    LOWORD(v20[0]) = 1024;
    *(_DWORD *)((char *)v20 + 2) = 3053;
    long long v10 = MEMORY[0x1E4F14500];
    UInt32 v11 = "%25s:%-5d  packet table unexpectedly truncated";
    goto LABEL_12;
  }
  CompressedPacketTable::operator[]((uint64_t)buf, v12, a2->mPacket);
  unsigned int v4 = v20[0];
  unsigned int v16 = v20[0];
  a2->mIsIndependentlyDecodable = 0;
  p_mIsIndependentlyDecodable = &a2->mIsIndependentlyDecodable;
  a2->mNumberPrerollPackets = 0;
  p_mNumberPrerollPackets = &a2->mNumberPrerollPackets;
  if (!v4)
  {
    std::vector<char>::pointer begin = 0;
    goto LABEL_6;
  }
LABEL_5:
  std::vector<unsigned char>::__append(&v14, v4);
  std::vector<char>::pointer begin = v14.__begin_;
LABEL_6:
  uint64_t v9 = (*(uint64_t (**)(CAFAudioFile *, void, unsigned int *, void, SInt64, int *, char *))(*(void *)this + 88))(this, 0, &v16, 0, a2->mPacket, &v15, begin);
  if (v9)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioFormatInfo buf = 136315394;
      uint64_t v19 = "CAFAudioFile.cpp";
      LOWORD(v20[0]) = 1024;
      *(_DWORD *)((char *)v20 + 2) = 3063;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ReadPackets failed", buf, 0x12u);
    }
  }
  else
  {
    CAFAudioFile::GetPacketDependencyInfoForPacket(this, begin, v16, v17);
    uint64_t v9 = 0;
    UInt32 *p_mIsIndependentlyDecodable = LODWORD(v17[0]) != 1;
    UInt32 *p_mNumberPrerollPackets = HIDWORD(v17[0]);
  }
  if (begin)
  {
    v14.__end_ = begin;
    operator delete(begin);
  }
  return v9;
}

void sub_19010BD64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
}

_DWORD *CAFAudioFile::GetPacketDependencyInfoForPacket(void *a1, char *a2, int a3, void *a4)
{
  *a4 = 0;
  uint64_t result = (_DWORD *)(*(uint64_t (**)(void *))(*a1 + 272))(a1);
  if (result)
  {
    uint64_t v9 = (_DWORD *)a1[32];
    if (!v9)
    {
      LODWORD(__n) = 0;
      memset(&v16, 0, sizeof(v16));
      if ((*(unsigned int (**)(void *, std::vector<char>::size_type *, void))(*a1 + 328))(a1, &__n, 0))
      {
        BOOL v10 = 1;
      }
      else
      {
        BOOL v10 = __n == 0;
      }
      if (!v10)
      {
        std::vector<unsigned char>::__append(&v16, __n);
        if ((*(unsigned int (**)(void *, std::vector<char>::size_type *, std::vector<char>::pointer))(*a1 + 336))(a1, &__n, v16.__begin_))
        {
          LODWORD(__n) = 0;
        }
      }
      operator new();
    }
    v16.__begin_ = a2;
    v16.__end_ = a2;
    v16.__end_cap_.__value_ = &a2[a3];
    uint64_t v17 = 0;
    if ((a2 & 3) != 0)
    {
      int v12 = 0;
      unsigned int v13 = a2 + 1;
      std::vector<char> v14 = (unsigned __int8 *)a2;
      do
      {
        if (v14 >= (unsigned __int8 *)&a2[a3]) {
          int v15 = 255;
        }
        else {
          int v15 = *v14;
        }
        int v12 = v15 | (v12 << 8);
        ++v14;
        BOOL v10 = (v13++ & 3) == 0;
      }
      while (!v10);
      v16.__begin_ = &a2[((a2 ^ 3) & 3) + 1];
      LODWORD(v17) = v12 << ((8 * ((a2 ^ 3) & 3)) ^ 0x18);
      HIDWORD(v17) = 8 * ((a2 ^ 3) & 3) + 8;
    }
    return PacketDependencyParser::PacketDependencyInfo(v9, (uint64_t)&v16, (uint64_t)a4);
  }
  return result;
}

void sub_19010BFB0(_Unwind_Exception *a1)
{
  MEMORY[0x192FC8940](v2, 0x1000C403E1C8BA9);
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t CAFAudioFile::ScanForIndependentPacket(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 272))(a1))
  {
    uint64_t v6 = *(unsigned int *)(a1 + 40);
    if (v6) {
      BOOL v7 = *(_DWORD *)(a1 + 44) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7) {
      uint64_t v9 = *(void *)(a1 + 120);
    }
    else {
      uint64_t v9 = 0;
    }
    double v10 = *(double *)(a1 + 24);
    if (a2 == 1) {
      uint64_t v11 = 1;
    }
    else {
      uint64_t v11 = -1;
    }
    uint64_t v25 = -1;
    unsigned int v24 = 0;
    memset(v23, 0, sizeof(v23));
    memset(__p, 0, sizeof(__p));
    uint64_t v12 = *a3;
    unsigned int v21 = 1885563711;
    if (v12 >= (*(uint64_t (**)(uint64_t))(*(void *)a1 + 240))(a1))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioFormatInfo buf = 136315394;
        *(void *)&uint8_t buf[4] = "CAFAudioFile.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2987;
        _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  invalid packet number", buf, 0x12u);
      }
      uint64_t v19 = -1;
    }
    else
    {
      uint64_t v20 = a3;
      uint64_t v13 = v11 + *a3;
      uint64_t v14 = 16 * v13;
      uint64_t v15 = -1;
      while (1)
      {
        *(void *)AudioFormatInfo buf = 0;
        *(void *)&buf[8] = 0;
        if (v13 < v15 || v13 >= v15 + v24)
        {
          unsigned int v24 = 0;
          if (CAFAudioFile::LoadPacketsForScanning(a1, v13, a2, (uint64_t)(v10 + v10), &v25, &v24, v23, __p) == 1885563711|| !v24)
          {
            unsigned int v21 = 0;
            uint64_t v19 = -1;
            a3 = v20;
            goto LABEL_33;
          }
          uint64_t v15 = v25;
        }
        if (v9)
        {
          std::vector<char> v16 = (char *)__p[0] + v14 + -16 * v15;
          int v17 = *((_DWORD *)v16 + 3);
          uint64_t v18 = *(void *)v16;
        }
        else
        {
          uint64_t v18 = (v13 - v15) * v6;
          int v17 = v6;
        }
        CAFAudioFile::GetPacketDependencyInfoForPacket((void *)a1, (char *)v23[0] + v18, v17, buf);
        if (!*(_DWORD *)buf) {
          break;
        }
        v13 += v11;
        v14 += 16 * v11;
      }
      unsigned int v21 = 0;
      a3 = v20;
      if (v13 == *v20) {
        uint64_t v19 = -1;
      }
      else {
        uint64_t v19 = v13;
      }
    }
LABEL_33:
    a3[1] = v19;
    if (__p[0]) {
      operator delete(__p[0]);
    }
    if (v23[0]) {
      operator delete(v23[0]);
    }
    return v21;
  }
  else
  {
    return AudioFileObject::ScanForIndependentPacket(a1, a2, a3);
  }
}

void sub_19010C30C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CAFAudioFile::LoadPacketsForScanning(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5, unsigned int *a6, void *a7, void *a8)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  int v16 = *(_DWORD *)(a1 + 40);
  unsigned int v15 = *(_DWORD *)(a1 + 44);
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 240))(a1);
  int v18 = a3;
  unsigned int v65 = 0;
  if (a3 == 1) {
    uint64_t v19 = 1;
  }
  else {
    uint64_t v19 = -1;
  }
  memset(&v64, 0, sizeof(v64));
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  uint64_t v60 = a6;
  *a6 = 0;
  if (a2 < 0 || (uint64_t v20 = v17, v17 <= a2))
  {
    uint64_t v25 = 1885563711;
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return v25;
    }
    *(_DWORD *)AudioFormatInfo buf = 136315394;
    char v67 = "CAFAudioFile.cpp";
    LOWORD(v68[0]) = 1024;
    *(_DWORD *)((char *)v68 + 2) = 2852;
    BOOL v26 = MEMORY[0x1E4F14500];
    uint64_t v27 = "%25s:%-5d  invalid packet number";
LABEL_13:
    _os_log_impl(&dword_18FEC0000, v26, OS_LOG_TYPE_ERROR, v27, buf, 0x12u);
    return v25;
  }
  if (*(_DWORD *)(a1 + 40))
  {
    unint64_t v21 = *(unsigned int *)(a1 + 44);
    if (v21)
    {
      LODWORD(v21) = vcvtps_u32_f32((float)a4 / (float)v15);
      uint64_t v22 = a6;
      *a6 = v21;
      unsigned int v23 = v16 * v21;
      unsigned int v65 = v23;
      if (v18 == 1)
      {
        if ((uint64_t)(v21 + a2) > v17)
        {
          unsigned int v24 = 0;
          LODWORD(v21) = v17 - a2;
          *a6 = v17 - a2;
LABEL_21:
          unint64_t v29 = a7;
          goto LABEL_34;
        }
      }
      else if (v21 > a2)
      {
        unsigned int v24 = 0;
        *a6 = a2;
        LODWORD(v21) = a2;
        goto LABEL_21;
      }
      unsigned int v24 = 0;
      goto LABEL_21;
    }
  }
  float32x4_t v58 = a8;
  uint64_t v28 = *(uint64_t **)(a1 + 120);
  if (!v28)
  {
    uint64_t v25 = 1685348671;
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return v25;
    }
    *(_DWORD *)AudioFormatInfo buf = 136315394;
    char v67 = "CAFAudioFile.cpp";
    LOWORD(v68[0]) = 1024;
    *(_DWORD *)((char *)v68 + 2) = 2872;
    BOOL v26 = MEMORY[0x1E4F14500];
    uint64_t v27 = "%25s:%-5d  no packet table for variable-sized packets";
    goto LABEL_13;
  }
  if (v17 < v28[3])
  {
    uint64_t v25 = 1885563711;
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return v25;
    }
    *(_DWORD *)AudioFormatInfo buf = 136315394;
    char v67 = "CAFAudioFile.cpp";
    LOWORD(v68[0]) = 1024;
    *(_DWORD *)((char *)v68 + 2) = 2873;
    BOOL v26 = MEMORY[0x1E4F14500];
    uint64_t v27 = "%25s:%-5d  packet table unexpectedly truncated";
    goto LABEL_13;
  }
  float32x4_t v56 = a5;
  uint64_t v57 = a2;
  int v55 = v18;
  unsigned int v23 = 0;
  uint64_t v30 = a2;
  if (a4 >= 1)
  {
    int v31 = 0;
    do
    {
      unsigned int v32 = v15;
      if (!v15)
      {
        CompressedPacketTable::operator[]((uint64_t)buf, v28, v30);
        unsigned int v32 = HIDWORD(v67);
      }
      CompressedPacketTable::operator[]((uint64_t)buf, v28, v30);
      v23 += v68[0];
      unsigned int v65 = v23;
      v30 += v19;
      if (v30 < 0) {
        break;
      }
      if (v30 >= v20) {
        break;
      }
      v31 += v32;
    }
    while (v31 < a4);
  }
  a2 = v57;
  unsigned int v33 = v30 - v57;
  if (v30 - v57 < 0) {
    unsigned int v33 = v57 - v30;
  }
  uint64_t v22 = v60;
  *uint64_t v60 = v33;
  std::vector<AudioStreamPacketDescription>::resize(&v61, v33);
  unsigned int v24 = v61;
  LODWORD(v21) = *v60;
  a8 = v58;
  unint64_t v29 = a7;
  a5 = v56;
  int v18 = v55;
LABEL_34:
  end = 0;
  if (v21 && v23)
  {
    uint64_t v35 = a2 - v21;
    if (v18 == -1) {
      uint64_t v36 = v35 + 1;
    }
    else {
      uint64_t v36 = a2;
    }
    std::vector<unsigned char>::__append(&v64, v23);
    std::vector<char>::pointer begin = v64.__begin_;
    uint64_t v25 = (*(uint64_t (**)(uint64_t, void, unsigned int *, char *, uint64_t, unsigned int *, std::vector<char>::pointer))(*(void *)a1 + 88))(a1, 0, &v65, v24, v36, v22, v64.__begin_);
    if (v25)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioFormatInfo buf = 136315394;
        char v67 = "CAFAudioFile.cpp";
        LOWORD(v68[0]) = 1024;
        *(_DWORD *)((char *)v68 + 2) = 2892;
        _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ReadPackets failed", buf, 0x12u);
      }
      goto LABEL_63;
    }
    end = v64.__end_;
  }
  else
  {
    uint64_t v36 = a2;
    std::vector<char>::pointer begin = 0;
  }
  *a5 = v36;
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v29, begin, end, end - begin);
  uint64_t v38 = v62;
  size_t v39 = v62 - v24;
  unint64_t v40 = (v62 - v24) >> 4;
  uint64_t v41 = a8[2];
  long long v42 = (char *)*a8;
  if (v40 <= (v41 - *a8) >> 4)
  {
    int8x16_t v48 = (char *)a8[1];
    uint64x2_t v45 = (void **)(a8 + 1);
    uint64_t v47 = v48;
    size_t v49 = v48 - v42;
    unint64_t v50 = (v48 - v42) >> 4;
    if (v50 < v40)
    {
      unsigned __int8 v51 = &v24[16 * v50];
      if (v47 != v42)
      {
        memmove(v42, v24, v49);
        long long v42 = (char *)*v45;
      }
      size_t v39 = v38 - v51;
      if (v38 == v51) {
        goto LABEL_62;
      }
      unsigned int v52 = v42;
      unint64_t v53 = v51;
      goto LABEL_61;
    }
  }
  else
  {
    if (v42)
    {
      a8[1] = v42;
      operator delete(v42);
      uint64_t v41 = 0;
      *a8 = 0;
      a8[1] = 0;
      a8[2] = 0;
    }
    if ((v39 & 0x8000000000000000) != 0) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v43 = v41 >> 3;
    if (v41 >> 3 <= v40) {
      uint64_t v43 = v40;
    }
    if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v44 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v44 = v43;
    }
    std::vector<std::shared_ptr<APComponent>>::__vallocate[abi:ne180100](a8, v44);
    uint64_t v46 = (char *)a8[1];
    uint64x2_t v45 = (void **)(a8 + 1);
    long long v42 = v46;
  }
  if (v38 != v24)
  {
    unsigned int v52 = v42;
    unint64_t v53 = v24;
LABEL_61:
    memmove(v52, v53, v39);
  }
LABEL_62:
  uint64_t v25 = 0;
  *uint64x2_t v45 = &v42[v39];
LABEL_63:
  if (v24)
  {
    uint64_t v62 = v24;
    operator delete(v24);
    std::vector<char>::pointer begin = v64.__begin_;
  }
  if (begin)
  {
    v64.__end_ = begin;
    operator delete(begin);
  }
  return v25;
}

void sub_19010C894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a19) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CAFAudioFile::PacketToRollDistance(CAFAudioFile *this, AudioPacketRollDistanceTranslation *a2)
{
  if ((*(unsigned int (**)(CAFAudioFile *))(*(void *)this + 272))(this))
  {
    double v4 = *((double *)this + 3);
    uint64_t v5 = *((unsigned int *)this + 10);
    if (v5) {
      BOOL v6 = *((_DWORD *)this + 11) == 0;
    }
    else {
      BOOL v6 = 1;
    }
    BOOL v7 = !v6 || *((void *)this + 15) == 0;
    unint64_t v8 = 0;
    uint64_t v9 = -1;
    uint64_t v21 = -1;
    unsigned int v20 = 0;
    memset(v19, 0, sizeof(v19));
    memset(__p, 0, sizeof(__p));
    SInt64 mPacket = a2->mPacket;
    uint64_t v11 = (uint64_t)(v4 + v4);
    for (SInt64 i = 16 * a2->mPacket; ; i -= 16)
    {
      v17[0] = 0;
      v17[1] = 0;
      if (mPacket < v9 || mPacket >= v9 + v20)
      {
        unsigned int v20 = 0;
        if (CAFAudioFile::LoadPacketsForScanning((uint64_t)this, mPacket, -1, v11, &v21, &v20, v19, __p) == 1885563711
          || !v20)
        {
          break;
        }
        uint64_t v9 = v21;
      }
      if (v7)
      {
        SInt64 v13 = (mPacket - v9) * v5;
        int v14 = v5;
      }
      else
      {
        unsigned int v15 = (char *)__p[0] + i + -16 * v9;
        int v14 = *((_DWORD *)v15 + 3);
        SInt64 v13 = *(void *)v15;
      }
      CAFAudioFile::GetPacketDependencyInfoForPacket(this, (char *)v19[0] + v13, v14, v17);
      if (!LODWORD(v17[0]) && v8 >= HIDWORD(v17[0])) {
        break;
      }
      --mPacket;
      ++v8;
    }
    a2->mRollDistance = v8;
    if (__p[0]) {
      operator delete(__p[0]);
    }
    if (v19[0]) {
      operator delete(v19[0]);
    }
  }
  else
  {
    AudioFileObject::PacketToRollDistance(this, a2);
  }
  return 0;
}

void sub_19010CA98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CAFAudioFile::UpdateSize(CAFAudioFile *this)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((void *)this + 18);
  uint64_t v2 = *((void *)this + 19);
  uint64_t v3 = v2 - v1;
  if (v2 == v1) {
    return 0;
  }
  unint64_t v5 = 0;
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (v3 >> 3);
  int v35 = 0;
  uint64_t v34 = 0;
  unsigned int v7 = 2;
  while (1)
  {
    unint64_t v8 = (_DWORD *)(v1 + 24 * v5);
    if (*v8 == 1684108385) {
      break;
    }
    unint64_t v5 = v7++ - 1;
    if (v6 <= v5) {
      return 0;
    }
  }
  uint64_t v10 = v1 + 24 * v5;
  uint64_t v12 = *(void *)(v10 + 8);
  uint64_t v11 = (void *)(v10 + 8);
  uint64_t v13 = v12 - 16;
  if ((*(uint64_t (**)(CAFAudioFile *))(*(void *)this + 224))(this) >= v12 - 16) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = v13 - (*(uint64_t (**)(CAFAudioFile *))(*(void *)this + 224))(this);
  }
  *uint64_t v11 = (*(uint64_t (**)(CAFAudioFile *))(*(void *)this + 224))(this) + 16;
  uint64_t result = (*(uint64_t (**)(CAFAudioFile *, _DWORD *, int *))(*(void *)this + 768))(this, v8, &v35);
  if (!result)
  {
    if (v14 >= 1)
    {
      uint64_t v15 = *((void *)this + 18);
      if (v15)
      {
        unint64_t v16 = v7 - 1;
        if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 19) - v15) >> 3) > v16)
        {
          while (1)
          {
            uint64_t v17 = v15 + 24 * v16;
            size_t v19 = *(void *)(v17 + 8);
            int v18 = (void *)(v17 + 8);
            CADeprecated::CAAutoFree<char>::CAAutoFree(&v37, v19);
            int v36 = 0;
            uint64_t v20 = v15 + 24 * v16;
            uint64_t v22 = *(void *)(v20 + 16);
            uint64_t v21 = (void *)(v20 + 16);
            int v23 = (*(uint64_t (**)(void, void, uint64_t, void, void *, int *))(**((void **)this + 13)
                                                                                            + 48))(*((void *)this + 13), 0, v22, *(unsigned int *)v18, v37, &v36);
            if (v23) {
              break;
            }
            if (*v18 != v36)
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioFormatInfo buf = 136315394;
                size_t v39 = "CAFAudioFile.cpp";
                __int16 v40 = 1024;
                int v41 = 317;
                _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  chunk size is wrong", buf, 0x12u);
              }
              exception = __cxa_allocate_exception(4uLL);
              _DWORD *exception = 2003334207;
              goto LABEL_40;
            }
            *v21 -= v14;
            int v23 = (*(uint64_t (**)(void, void))(**((void **)this + 13) + 56))(*((void *)this + 13), 0);
            if (v23)
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioFormatInfo buf = 136315394;
                size_t v39 = "CAFAudioFile.cpp";
                __int16 v40 = 1024;
                int v41 = 323;
                int v31 = MEMORY[0x1E4F14500];
                unsigned int v32 = "%25s:%-5d  MoveUpTrailingChunks write failed";
                goto LABEL_38;
              }
              goto LABEL_39;
            }
            if (v37) {
              free(v37);
            }
            uint64_t v15 = *((void *)this + 18);
            if (v15)
            {
              unint64_t v16 = v7++;
              if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 19) - v15) >> 3) > v16) {
                continue;
              }
            }
            goto LABEL_21;
          }
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioFormatInfo buf = 136315394;
            size_t v39 = "CAFAudioFile.cpp";
            __int16 v40 = 1024;
            int v41 = 316;
            int v31 = MEMORY[0x1E4F14500];
            unsigned int v32 = "%25s:%-5d  MoveUpTrailingChunks read failed";
LABEL_38:
            _os_log_impl(&dword_18FEC0000, v31, OS_LOG_TYPE_ERROR, v32, buf, 0x12u);
          }
LABEL_39:
          exception = __cxa_allocate_exception(4uLL);
          _DWORD *exception = v23;
LABEL_40:
          __cxa_throw(exception, MEMORY[0x1E4FBA3A8], 0);
        }
      }
LABEL_21:
      uint64_t result = (*(uint64_t (**)(void, uint64_t *))(**((void **)this + 13) + 24))(*((void *)this + 13), &v34);
      if (result) {
        return result;
      }
      (*(void (**)(void, uint64_t))(**((void **)this + 13) + 32))(*((void *)this + 13), v34 - v14);
    }
    if (*((unsigned char *)this + 208))
    {
      *(_DWORD *)AudioFormatInfo buf = bswap32(*((_DWORD *)this + 42) + 1);
      uint64_t v24 = *((void *)this + 18);
      uint64_t v25 = *((void *)this + 19);
      uint64_t v26 = v25 - v24;
      if (v25 != v24)
      {
        uint64_t v27 = 0;
        unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * (v26 >> 3);
        unsigned int v29 = 1;
        while (*(_DWORD *)(v24 + 24 * v27) != 1684108385)
        {
          uint64_t v27 = v29;
          if (v28 <= v29++) {
            goto LABEL_30;
          }
        }
        (*(void (**)(void, void, uint64_t, uint64_t, uint8_t *, void))(**((void **)this + 13) + 56))(*((void *)this + 13), 0, *(void *)(v24 + 24 * v27 + 16) + 12, 4, buf, 0);
      }
    }
LABEL_30:
    CAFAudioFile::UpdatePacketTableChunk(this);
    return 0;
  }
  return result;
}

void sub_19010D018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
}

void CAFAudioFile::UpdatePacketTableChunk(CAFAudioFile *this)
{
  int v2 = *((_DWORD *)this + 10);
  int v3 = *((_DWORD *)this + 11);
  if (!v2 || *((_DWORD *)this + 46) || *((_DWORD *)this + 47))
  {
    if (v3) {
      BOOL v4 = v2 == 0;
    }
    else {
      BOOL v4 = 1;
    }
    uint64_t v5 = *((void *)this + 15);
    if (v4 && v5 == 0) {
      operator new();
    }
    uint64_t v30 = 0;
    if (v5)
    {
      char v7 = 0;
      if (v3) {
        int v9 = 5;
      }
      else {
        int v9 = 10;
      }
      size_t v8 = (*(_DWORD *)(v5 + 24) * v9 + 24);
    }
    else
    {
      char v7 = 1;
      size_t v8 = 24;
    }
    CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)&v30, v8, 0);
    uint64_t v10 = v30;
    v30->i64[0] = 0;
    v10->i64[1] = CAFAudioFile::NumberValidFrames(this);
    v10[1].i64[0] = *((void *)this + 23);
    if (v7)
    {
      uint64_t v11 = 24;
LABEL_55:
      uint64_t v27 = (int8x8_t *)v30;
      *uint64_t v30 = vrev64q_s8(*v30);
      v27[2] = vrev32_s8(v27[2]);
      (*(void (**)(CAFAudioFile *, uint64_t, uint64_t, int8x8_t *))(*(void *)this + 760))(this, 1885432692, v11, v27);
      free(v27);
      return;
    }
    v10->i64[0] = (*(uint64_t (**)(CAFAudioFile *))(*(void *)this + 240))(this);
    uint64_t v13 = (*(uint64_t (**)(CAFAudioFile *))(*(void *)this + 632))(this);
    if (*(uint64_t *)(v5 + 24) < 1)
    {
      uint64_t v11 = 24;
LABEL_54:
      (*(void (**)(CAFAudioFile *, uint64_t, uint64_t))(*(void *)this + 648))(this, v13, v12);
      goto LABEL_55;
    }
    uint64_t v12 = 0;
    uint64_t v14 = &v10[1].i8[8];
    unsigned int v15 = 1;
    uint64_t v11 = 24;
    while (1)
    {
      CompressedPacketTable::operator[]((uint64_t)v28, (uint64_t *)v5, v12);
      unsigned int v16 = v28[2];
      unsigned int v17 = v29;
      uint64_t v13 = v29 <= v13 ? v13 : v29;
      if (v29 >> 28) {
        break;
      }
      if ((v29 & 0xFE00000) != 0)
      {
        uint64_t v18 = 1;
LABEL_29:
        *v14++ = (v17 >> 21) | 0x80;
LABEL_30:
        *v14++ = (v17 >> 14) | 0x80;
        uint64_t v19 = v18 + 1;
LABEL_31:
        *v14++ = (v17 >> 7) | 0x80;
        uint64_t v20 = v19 + 1;
        goto LABEL_32;
      }
      if ((v29 & 0x1FC000) != 0)
      {
        uint64_t v18 = 0;
        goto LABEL_30;
      }
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      if ((v29 & 0x3F80) != 0) {
        goto LABEL_31;
      }
LABEL_32:
      *uint64_t v14 = v17 & 0x7F;
      uint64_t v21 = v14 + 1;
      if (!v3)
      {
        if (v16 >> 28)
        {
          uint64_t v21 = v14 + 2;
          v14[1] = (v16 >> 28) | 0x80;
          uint64_t v23 = 2;
LABEL_40:
          *v21++ = (v16 >> 21) | 0x80;
LABEL_41:
          *v21++ = (v16 >> 14) | 0x80;
          uint64_t v24 = v23 + 1;
        }
        else
        {
          if ((v16 & 0xFE00000) != 0)
          {
            uint64_t v23 = 1;
            goto LABEL_40;
          }
          if ((v16 & 0x1FC000) != 0)
          {
            uint64_t v23 = 0;
            goto LABEL_41;
          }
          uint64_t v24 = 0;
          uint64_t v25 = 0;
          if ((v16 & 0x3F80) == 0)
          {
LABEL_43:
            *v21++ = v16 & 0x7F;
            uint64_t v22 = v25 + 1;
            goto LABEL_44;
          }
        }
        *v21++ = (v16 >> 7) | 0x80;
        uint64_t v25 = v24 + 1;
        goto LABEL_43;
      }
      uint64_t v22 = 0;
LABEL_44:
      v11 += v20 + 1 + v22;
      uint64_t v12 = v15;
      BOOL v26 = *(void *)(v5 + 24) <= (uint64_t)v15++;
      uint64_t v14 = v21;
      if (v26) {
        goto LABEL_54;
      }
    }
    *v14++ = (v29 >> 28) | 0x80;
    uint64_t v18 = 2;
    goto LABEL_29;
  }
}

void sub_19010D3B8(void *a1)
{
}

void sub_19010D3E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (!a12) {
    JUMPOUT(0x19010D3CCLL);
  }
  JUMPOUT(0x19010D3C4);
}

uint64_t CAFAudioFile::NumberValidFrames(CAFAudioFile *this)
{
  uint64_t result = *((void *)this + 22);
  if (result < 0)
  {
    uint64_t v3 = *((unsigned int *)this + 11);
    if (v3) {
      return (*(uint64_t (**)(CAFAudioFile *))(*(void *)this + 240))(this) * v3
    }
           - (*((int *)this + 46)
            + (uint64_t)*((int *)this + 47));
  }
  return result;
}

uint64_t CAFAudioFile::SetFormatList(CAFAudioFile *this, unsigned int a2, const AudioFormatListItem *a3)
{
  unsigned int v6 = a2 / 0x30;
  CADeprecated::CAAutoFree<CAFAudioFormatListItem>::CAAutoFree(&v21, a2 / 0x30uLL);
  char v7 = (char *)v21;
  if (a2 >= 0x30)
  {
    uint64_t v8 = 0;
    if (v6 <= 1) {
      unsigned int v9 = 1;
    }
    else {
      unsigned int v9 = v6;
    }
    p_UInt32 mChannelsPerFrame = &a3->mASBD.mChannelsPerFrame;
    uint64_t v11 = 36 * v9;
    do
    {
      int v12 = *(p_mChannelsPerFrame - 5);
      int v13 = *(p_mChannelsPerFrame - 4);
      if (v12 == 1819304813)
      {
        int v14 = *(p_mChannelsPerFrame - 4) & 2;
        if (v13) {
          int v13 = v14 ^ 3;
        }
        else {
          int v13 = v14 ^ 2;
        }
      }
      unint64_t v15 = *(void *)(p_mChannelsPerFrame - 7);
      long long v16 = *(_OWORD *)(p_mChannelsPerFrame - 3);
      unsigned int v17 = &v7[v8];
      *((void *)&v16 + 1) = *(void *)p_mChannelsPerFrame;
      *((_DWORD *)v17 + 2) = v12;
      *((_DWORD *)v17 + 3) = v13;
      *((_OWORD *)v17 + 1) = v16;
      unsigned int v18 = p_mChannelsPerFrame[3];
      *(void *)unsigned int v17 = bswap64(v15);
      *(int8x16_t *)(v17 + 8) = vrev32q_s8(*(int8x16_t *)&v7[v8 + 8]);
      *((int8x8_t *)v17 + 3) = vrev32_s8(*(int8x8_t *)((char *)&v16 + 8));
      *((_DWORD *)v17 + 8) = bswap32(v18);
      v8 += 36;
      p_mChannelsPerFrame += 12;
    }
    while (v11 != v8);
  }
  uint64_t v19 = (*(uint64_t (**)(CAFAudioFile *, uint64_t, void, void, char *))(*(void *)this + 592))(this, 1818522467, 0, 36 * v6, v7);
  if (v21) {
    free(v21);
  }
  return v19;
}

void sub_19010D5C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10) {
    free(a10);
  }
  _Unwind_Resume(exception_object);
}

void *CADeprecated::CAAutoFree<CAFAudioFormatListItem>::CAAutoFree(void *a1, uint64_t a2)
{
  *a1 = 0;
  size_t v4 = 36 * a2;
  uint64_t v5 = malloc_type_malloc(36 * a2, 0x2C8E6D5CuLL);
  unsigned int v6 = v5;
  if (a2 && !v5)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    unsigned int v9 = std::bad_alloc::bad_alloc(exception);
  }
  bzero(v5, v4);
  *a1 = v6;
  return a1;
}

uint64_t CAFAudioFile::GetFormatList(CAFAudioFile *this, unsigned int *a2, AudioFormatListItem *a3)
{
  unsigned int v15 = 0;
  if ((*(unsigned int (**)(CAFAudioFile *, uint64_t, void, unsigned int *))(*(void *)this + 560))(this, 1818522467, 0, &v15))
  {
    AudioFileObject::GetFormatList(this, a2, a3);
    return v6;
  }
  else
  {
    size_t v8 = *a2;
    if (v8 >= 0x30)
    {
      LODWORD(v9) = v15 / 0x24;
      if (v15 % 0x24)
      {
        return 1667787583;
      }
      else
      {
        bzero(a3, v8);
        CADeprecated::CAAutoFree<CAFAudioFormatListItem>::CAAutoFree(&v14, v9);
        unsigned int v15 = 36 * v9;
        uint64_t v7 = (*(uint64_t (**)(CAFAudioFile *, uint64_t, void, unsigned int *, CAFAudioFormatListItem *))(*(void *)this + 576))(this, 1818522467, 0, &v15, v14);
        if (!v7)
        {
          unsigned int v10 = *a2 / 0x30;
          if (v9 >= v10) {
            uint64_t v9 = v10;
          }
          else {
            uint64_t v9 = v9;
          }
          if (v9)
          {
            uint64_t v11 = v14;
            uint64_t v12 = v9;
            do
            {
              *(void *)&v11->mFormat.mSampleRate = bswap64(*(void *)&v11->mFormat.mSampleRate);
              *(int8x16_t *)&v11->mFormat.AudioFormatID mFormatID = vrev32q_s8(*(int8x16_t *)&v11->mFormat.mFormatID);
              *(int8x8_t *)&v11->mFormat.UInt32 mChannelsPerFrame = vrev32_s8(*(int8x8_t *)&v11->mFormat.mChannelsPerFrame);
              v11->mChannelLayoutTag = bswap32(v11->mChannelLayoutTag);
              CAFtoAF_FormatListItem((uint64_t)v11++, a3++);
              --v12;
            }
            while (v12);
          }
          uint64_t v7 = 0;
          *a2 = 48 * v9;
        }
        if (v14) {
          free(v14);
        }
      }
    }
    else
    {
      return 561211770;
    }
  }
  return v7;
}

void sub_19010D858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  if (a9) {
    free(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CAFAudioFile::GetFormatListInfo(CAFAudioFile *this, unsigned int *a2, unsigned int *a3)
{
  unsigned int v8 = 0;
  if ((*(unsigned int (**)(CAFAudioFile *, uint64_t, void, unsigned int *))(*(void *)this + 560))(this, 1818522467, 0, &v8))
  {
    unsigned int v5 = 0;
    unsigned int v6 = 48;
LABEL_5:
    uint64_t result = 0;
    *a2 = v6;
    *a3 = v5;
    return result;
  }
  if (!(v8 % 0x24))
  {
    unsigned int v6 = 48 * (v8 / 0x24);
    unsigned int v5 = 1;
    goto LABEL_5;
  }
  return 1667787583;
}

uint64_t CAFAudioFile::UpdateDataFormat(CAFAudioFile *this, const AudioStreamBasicDescription *a2)
{
  uint64_t result = (*(uint64_t (**)(CAFAudioFile *))(*(void *)this + 176))(this);
  if (result) {
    return result;
  }
  unint64_t v5 = *(void *)&a2->mSampleRate;
  AudioFormatID mFormatID = a2->mFormatID;
  AudioFormatFlags mFormatFlags = a2->mFormatFlags;
  uint64_t v8 = *(void *)&a2->mBytesPerPacket;
  int8x8_t v9 = *(int8x8_t *)&a2->mChannelsPerFrame;
  v19.i64[0] = mFormatID;
  if (mFormatID != 1819304813)
  {
    __int32 v10 = mFormatFlags;
    goto LABEL_9;
  }
  if ((mFormatFlags & 2) != 0)
  {
    __int32 v10 = 1;
    if ((mFormatFlags & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  v19.i32[1] = 2;
  __int32 v10 = 3;
  if (mFormatFlags) {
LABEL_9:
  }
    v19.i32[1] = v10;
LABEL_10:
  uint64_t result = 1685348671;
  v19.i64[1] = v8;
  unint64_t v18 = bswap64(v5);
  int8x16_t v19 = vrev32q_s8(v19);
  int8x8_t v20 = vrev32_s8(v9);
  uint64_t v11 = *((void *)this + 18);
  uint64_t v12 = *((void *)this + 19);
  uint64_t v13 = v12 - v11;
  if (v12 != v11)
  {
    uint64_t v14 = 0;
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (v13 >> 3);
    unsigned int v16 = 1;
    while (*(_DWORD *)(v11 + 24 * v14) != 1684370275)
    {
      uint64_t v14 = v16;
      if (v15 <= v16++) {
        return result;
      }
    }
    return (*(uint64_t (**)(void, void, uint64_t, uint64_t, unint64_t *, void))(**((void **)this + 13) + 56))(*((void *)this + 13), 0, *(void *)(v11 + 24 * v14 + 16) + 12, 32, &v18, 0);
  }
  return result;
}

uint64_t CAFAudioFile::SetProperty(CAFAudioFile *this, int a2, unsigned int a3, uint64_t *a4)
{
  switch(a2)
  {
    case 1751217000:
      if (a3 != 20) {
        return 561211770;
      }
      uint64_t v8 = *(uint64_t (**)(void))(*(void *)this + 592);
      return v8();
    case 1920168566:
      uint64_t result = 1869627199;
      if ((*((unsigned char *)this + 100) & 2) != 0)
      {
        uint64_t v9 = *((void *)this + 15);
        if (!v9 || !*(void *)(v9 + 24))
        {
          if (a3 < 8) {
            return 561211770;
          }
          double v10 = *((double *)this + 25);
          double v11 = *(double *)a4;
          *((void *)this + 25) = *a4;
          if (v11 != v10)
          {
            CAFAudioFile::CalcSoundDataAlign(this);
            (*(void (**)(CAFAudioFile *))(*(void *)this + 64))(this);
          }
          return 0;
        }
      }
      break;
    case 1886283375:
      if (a3 >= 8)
      {
        uint64_t v6 = *a4 + *((int *)a4 + 2) + *((int *)a4 + 3);
        if (CAFAudioFile::NumberValidFrames(this) + *((int *)this + 46) + *((int *)this + 47) != v6) {
          return 4294967246;
        }
        uint64_t result = 0;
        *((void *)this + 22) = *a4;
        *((void *)this + 23) = a4[1];
        *((unsigned char *)this + 13std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 1;
        return result;
      }
      return 561211770;
    default:
      return AudioFileObject::SetProperty(this, a2, a3, a4);
  }
  return result;
}

uint64_t CAFAudioFile::CalcSoundDataAlign(CAFAudioFile *this)
{
  long long v2 = *(_OWORD *)((char *)this + 40);
  long long outPropertyData = *(_OWORD *)((char *)this + 24);
  long long v24 = v2;
  uint64_t v25 = *((void *)this + 7);
  UInt32 ioPropertyDataSize = 40;
  uint64_t result = AudioFormatGetProperty(0x666D7469u, 0, 0, &ioPropertyDataSize, &outPropertyData);
  if (result == 1718449215 && *((_DWORD *)this + 11) && !*((_DWORD *)this + 10))
  {
    long long v6 = *(_OWORD *)((char *)this + 40);
    long long outPropertyData = *(_OWORD *)((char *)this + 24);
    long long v24 = v6;
    uint64_t v25 = *((void *)this + 7);
    unsigned int v4 = DWORD1(v6);
  }
  else if (result || v24 || (unsigned int v4 = DWORD1(v24)) == 0)
  {
    unint64_t v5 = 4096;
    goto LABEL_21;
  }
  double v7 = 2.0;
  if (DWORD2(outPropertyData) == 1634492771) {
    double v7 = 3.0;
  }
  unint64_t v8 = vcvtpd_s64_f64(*((double *)this + 25) * (*(double *)&outPropertyData / (double)v4 * v7));
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v9 = *((void *)this + 18);
  uint64_t v10 = *((void *)this + 19) - v9;
  if (v10)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (v10 >> 3);
    unsigned int v13 = 1;
    do
    {
      uint64_t v14 = (int *)(v9 + 24 * v11);
      int v15 = *v14;
      uint64_t v16 = v14[2];
      if (v15 == 1718773093)
      {
        unsigned int v17 = &v21;
      }
      else
      {
        if (v15 == 1684108385) {
          break;
        }
        unsigned int v17 = &v20;
      }
      *v17 += v16;
      uint64_t v11 = v13;
    }
    while (v12 > v13++);
    uint64_t v19 = v20;
  }
  else
  {
    uint64_t v19 = 0;
  }
  unint64_t v5 = (v8 + v19 + 4120) & 0xFFFFFFFFFFFFF000;
LABEL_21:
  *((void *)this + 24) = v5;
  return result;
}

uint64_t CAFAudioFile::WritePackets(CAFAudioFile *this, uint64_t a2, uint64_t a3, const AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, char *a7)
{
  double v7 = a7;
  unsigned int v10 = a3;
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  int v12 = *((_DWORD *)this + 10);
  unsigned int v13 = *((_DWORD *)this + 11);
  *((unsigned char *)this + 208) = 1;
  unsigned int v52 = v13;
  if (v12) {
    BOOL v14 = v13 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (v14)
  {
    uint64_t v16 = *((void *)this + 15);
    if (v16) {
      uint64_t v17 = *(void *)(v16 + 24);
    }
    else {
      uint64_t v17 = 0;
    }
    unsigned int v53 = 0;
    uint64_t v19 = (*(uint64_t (**)(CAFAudioFile *))(*(void *)this + 632))(this);
    if (a5 < 0 || v17 == a5)
    {
      if (a4)
      {
        SInt64 v23 = a4[*a6 - 1].mStartOffset + a4[*a6 - 1].mDataByteSize;
        if (v23 <= v10)
        {
          SInt64 mStartOffset = a4->mStartOffset;
          uint64_t v25 = (uint64_t *)*((void *)this + 15);
          if (!v25) {
            operator new();
          }
          unsigned __int8 v51 = a6;
          if (v25[3])
          {
            if (v17 > a5)
            {
              uint64_t v20 = 1885563711;
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioFormatInfo buf = 136315394;
                *(void *)&uint8_t buf[4] = "CAFAudioFile.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 3238;
                uint64_t v21 = MEMORY[0x1E4F14500];
                uint64_t v22 = "%25s:%-5d  ";
                goto LABEL_28;
              }
              return v20;
            }
            uint64_t v48 = a5;
            CompressedPacketTable::operator[]((uint64_t)buf, v25, v17 - 1);
            *(void *)&v54.mVariableFramesInPacket = *(void *)&buf[8];
            SInt64 v26 = *(void *)buf + *(unsigned int *)&buf[12];
            v54.SInt64 mStartOffset = v26;
          }
          else
          {
            uint64_t v48 = a5;
            SInt64 v26 = 0;
            v54.SInt64 mStartOffset = 0;
            *(void *)&v54.mVariableFramesInPacket = *(void *)&a4->mVariableFramesInPacket;
          }
          unint64_t v27 = *a6;
          if (v27)
          {
            unint64_t v28 = 0;
            unsigned int v29 = a4 + 1;
            SInt64 v30 = a4->mStartOffset;
            while (v27 - 1 != v28)
            {
              v30 += v29[-1].mDataByteSize;
              SInt64 v31 = v29->mStartOffset;
              ++v29;
              ++v28;
              if (v31 != v30)
              {
                if (v28 >= v27) {
                  break;
                }
                uint64_t v32 = 0;
                unsigned int v50 = 0;
                unint64_t v33 = 0;
                p_mVariableFramesInPacket = &a4->mVariableFramesInPacket;
                do
                {
                  int v35 = v7;
                  int v36 = &v7[*((void *)p_mVariableFramesInPacket - 1)];
                  UInt32 v37 = *p_mVariableFramesInPacket;
                  uint64_t v38 = p_mVariableFramesInPacket[1];
                  v54.mVariableFramesInPacket = *p_mVariableFramesInPacket;
                  v54.uint64_t mDataByteSize = v38;
                  if (v52) {
                    uint64_t v39 = v52;
                  }
                  else {
                    uint64_t v39 = v37;
                  }
                  if (v38 <= v19) {
                    uint64_t v19 = v19;
                  }
                  else {
                    uint64_t v19 = v38;
                  }
                  unsigned int v49 = (*(uint64_t (**)(void, void, SInt64, uint64_t, char *, unsigned int *))(**((void **)this + 13) + 56))(*((void *)this + 13), 0, v26 + *((void *)this + 9), v38, v36, &v53);
                  unsigned int v40 = v53;
                  AudioFileObject::AppendPacket(this, &v54);
                  v32 += v39;
                  v50 += v40;
                  v26 += v38;
                  v54.SInt64 mStartOffset = v26;
                  ++v33;
                  p_mVariableFramesInPacket += 4;
                  double v7 = v35;
                }
                while (v33 < *v51);
                goto LABEL_57;
              }
            }
          }
          unsigned int v49 = (*(uint64_t (**)(void, void, SInt64, SInt64, char *, unsigned int *))(**((void **)this + 13)
                                                                                                  + 56))(*((void *)this + 13), 0, v26 + *((void *)this + 9), v23 - mStartOffset, &v7[mStartOffset], &v53);
          unsigned int v50 = v53;
          unsigned int v41 = *a6;
          if (*a6)
          {
            uint64_t v32 = 0;
            unint64_t v42 = 0;
            p_uint64_t mDataByteSize = &a4->mDataByteSize;
            do
            {
              UInt32 v44 = *(p_mDataByteSize - 1);
              UInt32 v45 = *p_mDataByteSize;
              v54.mVariableFramesInPacket = v44;
              v54.uint64_t mDataByteSize = v45;
              if (v52) {
                uint64_t v46 = v52;
              }
              else {
                uint64_t v46 = v44;
              }
              if (v45 <= v19) {
                uint64_t v19 = v19;
              }
              else {
                uint64_t v19 = v45;
              }
              AudioFileObject::AppendPacket(this, &v54);
              v32 += v46;
              v26 += v45;
              v54.SInt64 mStartOffset = v26;
              ++v42;
              p_mDataByteSize += 4;
            }
            while (v42 < *v51);
            LODWORD(v33) = v41;
          }
          else
          {
            LODWORD(v33) = 0;
            uint64_t v32 = 0;
          }
LABEL_57:
          (*(void (**)(CAFAudioFile *, uint64_t))(*(void *)this + 248))(this, v48 + v33);
          (*(void (**)(CAFAudioFile *, uint64_t))(*(void *)this + 648))(this, v19);
          *((void *)this + 22) = (*((void *)this + 22) & ~(*((uint64_t *)this + 22) >> 63)) + v32;
          *((unsigned char *)this + 13std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 1;
          *unsigned __int8 v51 = v33;
          uint64_t v47 = (*(uint64_t (**)(CAFAudioFile *))(*(void *)this + 224))(this);
          (*(void (**)(CAFAudioFile *, uint64_t))(*(void *)this + 232))(this, v47 + v50);
          return v49;
        }
        uint64_t v20 = 1885563711;
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioFormatInfo buf = 136315394;
          *(void *)&uint8_t buf[4] = "CAFAudioFile.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3225;
          uint64_t v21 = MEMORY[0x1E4F14500];
          uint64_t v22 = "%25s:%-5d  Packet Descriptions are out of bounds";
          goto LABEL_28;
        }
      }
      else
      {
        uint64_t v20 = 1885563711;
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioFormatInfo buf = 136315394;
          *(void *)&uint8_t buf[4] = "CAFAudioFile.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3216;
          uint64_t v21 = MEMORY[0x1E4F14500];
          uint64_t v22 = "%25s:%-5d  Packet Descriptions were not provided";
          goto LABEL_28;
        }
      }
    }
    else
    {
      uint64_t v20 = 1885563711;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioFormatInfo buf = 136315394;
        *(void *)&uint8_t buf[4] = "CAFAudioFile.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3215;
        uint64_t v21 = MEMORY[0x1E4F14500];
        uint64_t v22 = "%25s:%-5d  ";
LABEL_28:
        _os_log_impl(&dword_18FEC0000, v21, OS_LOG_TYPE_ERROR, v22, buf, 0x12u);
      }
    }
    return v20;
  }
  return AudioFileObject::WritePackets(this, a2, a3, a4, a5, a6, a7);
}

uint64_t CAFAudioFile::Optimize(CAFAudioFile *this)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  unsigned int v66 = 0;
  uint64_t v2 = *((void *)this + 18);
  uint64_t v3 = *((void *)this + 19);
  unsigned int v4 = (void *)((char *)this + 144);
  for (size_t i = 8; v2 != v3; v2 += 24)
  {
    if (*(_DWORD *)v2 != 1684108385 && *(_DWORD *)v2 != 1718773093) {
      i += *(void *)(v2 + 8);
    }
  }
  CADeprecated::CAAutoFree<char>::CAAutoFree(&v65, i);
  double v7 = (char *)v65;
  unsigned int v69 = 8;
  int v8 = (*(uint64_t (**)(void, void, void, uint64_t, void *, unsigned int *))(**((void **)this + 13)
                                                                                          + 48))(*((void *)this + 13), 0, 0, 8, v65, &v69);
  if (v8)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioFormatInfo buf = 136315394;
      *(void *)&uint8_t buf[4] = "CAFAudioFile.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 280;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ReadBytes failed", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(4uLL);
    _DWORD *exception = v8;
    __cxa_throw(exception, MEMORY[0x1E4FBA3A8], 0);
  }
  uint64_t v10 = *((void *)this + 18);
  uint64_t v9 = *((void *)this + 19);
  if (v10 == v9)
  {
    uint64_t v11 = 0;
LABEL_43:
    uint64_t v32 = 0;
    int v33 = 1;
    goto LABEL_44;
  }
  std::vector<char> v64 = v4;
  uint64_t v11 = 0;
  int v12 = 0;
  unint64_t v13 = 0;
  BOOL v14 = &v7[v69];
  do
  {
    if (*(_DWORD *)v10 != 1684108385 && *(_DWORD *)v10 != 1718773093)
    {
      unsigned int v69 = *(void *)(v10 + 8);
      v70[0] = *(_OWORD *)v10;
      int64_t v16 = v14 - (unsigned char *)v65;
      if ((unint64_t)v12 >= v13)
      {
        unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v11) >> 3) + 1;
        if (v17 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((uint64_t)(v13 - (void)v11) >> 3) > v17) {
          unint64_t v17 = 0x5555555555555556 * ((uint64_t)(v13 - (void)v11) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (void)v11) >> 3) >= 0x555555555555555) {
          unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v18 = v17;
        }
        if (v18) {
          unint64_t v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v18);
        }
        else {
          uint64_t v19 = 0;
        }
        unint64_t v20 = v18 + 8 * ((v12 - v11) >> 3);
        *(_OWORD *)unint64_t v20 = v70[0];
        *(void *)(v20 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v16;
        if (v12 == v11)
        {
          SInt64 v23 = (char *)(v18 + 8 * ((v12 - v11) >> 3));
        }
        else
        {
          unint64_t v21 = v18 + 8 * ((v12 - v11) >> 3);
          do
          {
            long long v22 = *(_OWORD *)(v12 - 24);
            SInt64 v23 = (char *)(v21 - 24);
            *(void *)(v21 - 8) = *((void *)v12 - 1);
            *(_OWORD *)(v21 - 24) = v22;
            v12 -= 24;
            v21 -= 24;
          }
          while (v12 != v11);
        }
        unint64_t v24 = v18 + 24 * v19;
        int v12 = (char *)(v20 + 24);
        if (v11) {
          operator delete(v11);
        }
        uint64_t v11 = v23;
        unint64_t v13 = v24;
      }
      else
      {
        *(_OWORD *)int v12 = *(_OWORD *)v10;
        *((void *)v12 + 2) = v16;
        v12 += 24;
      }
      int v25 = (*(uint64_t (**)(void, void, void, void, char *, unsigned int *))(**((void **)this + 13)
                                                                                              + 48))(*((void *)this + 13), 0, *(void *)(v10 + 16), v69, v14, &v69);
      if (v25)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioFormatInfo buf = 136315394;
          *(void *)&uint8_t buf[4] = "CAFAudioFile.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 296;
          _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ReadBytes failed", buf, 0x12u);
        }
        uint64_t v61 = __cxa_allocate_exception(4uLL);
        *uint64_t v61 = v25;
        __cxa_throw(v61, MEMORY[0x1E4FBA3A8], 0);
      }
      v14 += v69;
      uint64_t v9 = *((void *)this + 19);
    }
    v10 += 24;
  }
  while (v10 != v9);
  uint64_t v26 = v9 - *v4;
  if (!v26) {
    goto LABEL_43;
  }
  uint64_t v27 = 0;
  unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * (v26 >> 3);
  unsigned int v29 = 1;
  while (1)
  {
    uint64_t v30 = *v4 + 24 * v27;
    if (*(_DWORD *)v30 == 1684108385) {
      break;
    }
    uint64_t v27 = v29;
    if (v28 <= v29++) {
      goto LABEL_43;
    }
  }
  long long v35 = *(_OWORD *)v30;
  uint64_t v36 = *(void *)(v30 + 16);
  uint64_t v68 = v36;
  *(_OWORD *)char v67 = v35;
  uint64_t v37 = i;
  if (*((unsigned char *)this + 138))
  {
    uint64_t v38 = *((void *)this + 24);
    if (!v38)
    {
      CAFAudioFile::CalcSoundDataAlign(this);
      uint64_t v38 = *((void *)this + 24);
    }
    size_t v39 = i + 12;
    if (v38 - 16 > (uint64_t)(i + 12)) {
      size_t v39 = v38 - 16;
    }
    uint64_t v37 = v38 - 16 + ((v39 - v38 + 4111) & 0xFFFFFFFFFFFFF000);
  }
  uint64_t v68 = v37;
  if (v36 <= v37)
  {
    uint64_t v32 = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 13) + 32))(*((void *)this + 13), v67[1] + v37);
    if (v32)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioFormatInfo buf = 136315394;
        *(void *)&uint8_t buf[4] = "CAFAudioFile.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 373;
        unsigned int v40 = MEMORY[0x1E4F14500];
        unsigned int v41 = "%25s:%-5d  SetSize Failed";
LABEL_71:
        _os_log_impl(&dword_18FEC0000, v40, OS_LOG_TYPE_ERROR, v41, buf, 0x12u);
        goto LABEL_72;
      }
      goto LABEL_72;
    }
  }
  if (v37 != v36)
  {
    AudioFileObject::MoveData(this, v36, v37, v67[1]);
    *((void *)this + 9) = v37 + 16;
  }
  if (v36 > v37)
  {
    uint64_t v32 = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 13) + 32))(*((void *)this + 13), v67[1] + v37);
    if (v32)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioFormatInfo buf = 136315394;
        *(void *)&uint8_t buf[4] = "CAFAudioFile.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 385;
        unsigned int v40 = MEMORY[0x1E4F14500];
        unsigned int v41 = "%25s:%-5d  SetSize Failed";
        goto LABEL_71;
      }
LABEL_72:
      int v33 = 6;
      goto LABEL_44;
    }
  }
  uint64_t v32 = (*(uint64_t (**)(void, void, void, size_t, void *, unsigned int *))(**((void **)this + 13)
                                                                                          + 56))(*((void *)this + 13), 0, 0, i, v65, &v66);
  if (v32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioFormatInfo buf = 136315394;
      *(void *)&uint8_t buf[4] = "CAFAudioFile.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 389;
      unsigned int v40 = MEMORY[0x1E4F14500];
      unsigned int v41 = "%25s:%-5d  FSWrite Failed";
      goto LABEL_71;
    }
    goto LABEL_72;
  }
  if (*((unsigned char *)this + 138))
  {
    if (v66 + 12 > v37)
    {
      uint64_t v43 = v12;
    }
    else
    {
      *(_DWORD *)AudioFormatInfo buf = 1718773093;
      *(void *)&buf[8] = v37 - v66;
      *(void *)&buf[16] = v66;
      if ((unint64_t)v12 >= v13)
      {
        unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v11) >> 3) + 1;
        if (v44 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((uint64_t)(v13 - (void)v11) >> 3) > v44) {
          unint64_t v44 = 0x5555555555555556 * ((uint64_t)(v13 - (void)v11) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (void)v11) >> 3) >= 0x555555555555555) {
          unint64_t v45 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v45 = v44;
        }
        if (v45) {
          unint64_t v45 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v45);
        }
        else {
          uint64_t v46 = 0;
        }
        unint64_t v47 = v45 + 8 * ((v12 - v11) >> 3);
        long long v48 = *(_OWORD *)buf;
        unint64_t v49 = v45 + 24 * v46;
        *(void *)(v47 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = *(void *)&buf[16];
        *(_OWORD *)unint64_t v47 = v48;
        uint64_t v43 = (char *)(v47 + 24);
        if (v12 == v11)
        {
          unsigned __int8 v51 = (char *)(v45 + 8 * ((v12 - v11) >> 3));
        }
        else
        {
          do
          {
            long long v50 = *(_OWORD *)(v12 - 24);
            unsigned __int8 v51 = (char *)(v47 - 24);
            *(void *)(v47 - 8) = *((void *)v12 - 1);
            *(_OWORD *)(v47 - 24) = v50;
            v12 -= 24;
            v47 -= 24;
          }
          while (v12 != v11);
        }
        if (v11) {
          operator delete(v11);
        }
        uint64_t v11 = v51;
        unint64_t v13 = v49;
      }
      else
      {
        long long v42 = *(_OWORD *)buf;
        *((void *)v12 + 2) = *(void *)&buf[16];
        *(_OWORD *)int v12 = v42;
        uint64_t v43 = v12 + 24;
      }
      unsigned int v69 = 0;
      int v52 = (*(uint64_t (**)(CAFAudioFile *, unsigned char *, unsigned int *))(*(void *)this + 768))(this, buf, &v69);
      if (v52)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          LODWORD(v70[0]) = 136315394;
          *(void *)((char *)v70 + 4) = "CAFAudioFile.cpp";
          WORD6(v70[0]) = 1024;
          *(_DWORD *)((char *)v70 + 14) = 429;
          _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  WriteBytes failed", (uint8_t *)v70, 0x12u);
        }
        uint64_t v63 = __cxa_allocate_exception(4uLL);
        *uint64_t v63 = v52;
        __cxa_throw(v63, MEMORY[0x1E4FBA3A8], 0);
      }
    }
  }
  else
  {
    uint64_t v43 = v12;
  }
  if ((unint64_t)v43 >= v13)
  {
    unint64_t v55 = 0xAAAAAAAAAAAAAAABLL * ((v43 - v11) >> 3) + 1;
    if (v55 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    if (0x5555555555555556 * ((uint64_t)(v13 - (void)v11) >> 3) > v55) {
      unint64_t v55 = 0x5555555555555556 * ((uint64_t)(v13 - (void)v11) >> 3);
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (void)v11) >> 3) >= 0x555555555555555) {
      unint64_t v56 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v56 = v55;
    }
    if (v56) {
      unint64_t v56 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v56);
    }
    long long v57 = *(_OWORD *)v67;
    unint64_t v58 = v56 + 8 * ((v43 - v11) >> 3);
    *(void *)(v58 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v68;
    *(_OWORD *)unint64_t v58 = v57;
    AudioStreamPacketDescription v54 = (char *)(v58 + 24);
    if (v43 == v11)
    {
      uint64_t v60 = (char *)(v56 + 8 * ((v43 - v11) >> 3));
    }
    else
    {
      do
      {
        long long v59 = *(_OWORD *)(v43 - 24);
        uint64_t v60 = (char *)(v58 - 24);
        *(void *)(v58 - 8) = *((void *)v43 - 1);
        *(_OWORD *)(v58 - 24) = v59;
        v43 -= 24;
        v58 -= 24;
      }
      while (v43 != v11);
    }
    if (v11) {
      operator delete(v11);
    }
    uint64_t v11 = v60;
  }
  else
  {
    long long v53 = *(_OWORD *)v67;
    *((void *)v43 + 2) = v68;
    *(_OWORD *)uint64_t v43 = v53;
    AudioStreamPacketDescription v54 = v43 + 24;
  }
  std::vector<ChunkInfo64>::__assign_with_size[abi:ne180100]<ChunkInfo64*,ChunkInfo64*>(v64, v11, v54, 0xAAAAAAAAAAAAAAABLL * ((v54 - v11) >> 3));
  (*(void (**)(CAFAudioFile *, uint64_t *, unsigned int *))(*(void *)this + 768))(this, v67, &v66);
  uint64_t v32 = 0;
  int v33 = 0;
  *((_DWORD *)this + 20) = 1;
LABEL_44:
  if (v65) {
    free(v65);
  }
  if (v11) {
    operator delete(v11);
  }
  if (v33 && v33 != 6) {
    return 0;
  }
  return v32;
}

void sub_19010EE5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  if (a11) {
    free(a11);
  }
  if (v11) {
    operator delete(v11);
  }
  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x19010E760);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CAFAudioFile::InitializeDataSource(CAFAudioFile *this, const AudioStreamBasicDescription *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = CAFAudioFile::InitializeCAFChunks(this);
  if (v2 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v4 = 136315394;
    unint64_t v5 = "CAFAudioFile.cpp";
    __int16 v6 = 1024;
    int v7 = 1158;
    _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  InitializeCAFChunks", (uint8_t *)&v4, 0x12u);
  }
  return v2;
}

uint64_t CAFAudioFile::InitializeCAFChunks(CAFAudioFile *this)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  unsigned int v48 = 0;
  unint64_t v2 = *((void *)this + 3);
  int v4 = *((_DWORD *)this + 8);
  int v3 = *((_DWORD *)this + 9);
  uint64_t v46 = *((void *)this + 5);
  int8x8_t v45 = *(int8x8_t *)((char *)this + 52);
  uint64_t v49 = 0x10066666163;
  uint64_t v5 = (*(uint64_t (**)(void, void, void, uint64_t, uint64_t *, unsigned int *))(**((void **)this + 13)
                                                                                             + 56))(*((void *)this + 13), 0, 0, 8, &v49, &v48);
  if (v5)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioFormatInfo buf = 136315394;
      *(void *)&uint8_t buf[4] = "CAFAudioFile.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1052;
      __int16 v6 = MEMORY[0x1E4F14500];
      int v7 = "%25s:%-5d  FSWrite Failed";
LABEL_23:
      unint64_t v24 = buf;
LABEL_24:
      _os_log_impl(&dword_18FEC0000, v6, OS_LOG_TYPE_ERROR, v7, v24, 0x12u);
      return v5;
    }
    return v5;
  }
  *(_DWORD *)unint64_t v47 = 1684370275;
  *(_OWORD *)&v47[8] = xmmword_1901C64C0;
  uint64_t v8 = (char **)((char *)this + 144);
  unint64_t v10 = *((void *)this + 19);
  unint64_t v9 = *((void *)this + 20);
  if (v10 >= v9)
  {
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (void)*v8) >> 3);
    unint64_t v14 = v13 + 1;
    if (v13 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)*v8) >> 3);
    if (2 * v15 > v14) {
      unint64_t v14 = 2 * v15;
    }
    if (v15 >= 0x555555555555555) {
      unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16) {
      unint64_t v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v16);
    }
    else {
      uint64_t v17 = 0;
    }
    unint64_t v18 = v16 + 24 * v13;
    unint64_t v19 = v16 + 24 * v17;
    long long v20 = *(_OWORD *)v47;
    *(void *)(v18 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = *(void *)&v47[16];
    *(_OWORD *)unint64_t v18 = v20;
    unint64_t v12 = v18 + 24;
    long long v22 = (char *)*((void *)this + 18);
    unint64_t v21 = (char *)*((void *)this + 19);
    if (v21 != v22)
    {
      do
      {
        long long v23 = *(_OWORD *)(v21 - 24);
        *(void *)(v18 - 8) = *((void *)v21 - 1);
        *(_OWORD *)(v18 - 24) = v23;
        v18 -= 24;
        v21 -= 24;
      }
      while (v21 != v22);
      unint64_t v21 = *v8;
    }
    *((void *)this + 18) = v18;
    *((void *)this + 19) = v12;
    *((void *)this + 20) = v19;
    if (v21) {
      operator delete(v21);
    }
  }
  else
  {
    long long v11 = *(_OWORD *)v47;
    *(void *)(v10 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = *(void *)&v47[16];
    *(_OWORD *)unint64_t v10 = v11;
    unint64_t v12 = v10 + 24;
  }
  *((void *)this + 19) = v12;
  uint64_t v5 = (*(uint64_t (**)(CAFAudioFile *, unsigned char *, unsigned int *))(*(void *)this + 768))(this, v47, &v48);
  if (!v5)
  {
    *(_DWORD *)&unsigned char buf[12] = 0;
    *(_DWORD *)&buf[8] = v4;
    if (v4 == 1819304813)
    {
      if ((v3 & 2) != 0)
      {
        int v26 = 1;
      }
      else
      {
        *(_DWORD *)&unsigned char buf[12] = 2;
        int v26 = 3;
      }
      if ((v3 & 1) == 0)
      {
LABEL_33:
        *(void *)&buf[16] = v46;
        *(void *)AudioFormatInfo buf = bswap64(v2);
        *(int8x16_t *)&buf[8] = vrev32q_s8(*(int8x16_t *)&buf[8]);
        int8x8_t v55 = vrev32_s8(v45);
        uint64_t v5 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, unsigned char *, unsigned int *))(**((void **)this + 13)
                                                                                                  + 56))(*((void *)this + 13), 0, 20, 32, buf, &v48);
        if (v5)
        {
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            return v5;
          }
          int v50 = 136315394;
          unsigned __int8 v51 = "CAFAudioFile.cpp";
          __int16 v52 = 1024;
          int v53 = 1072;
          __int16 v6 = MEMORY[0x1E4F14500];
          int v7 = "%25s:%-5d  FSWrite Failed";
          goto LABEL_36;
        }
        uint64_t v27 = v48 + 20;
        if (*((unsigned char *)this + 138))
        {
          uint64_t v28 = *((void *)this + 24);
          if (!v28)
          {
            CAFAudioFile::CalcSoundDataAlign(this);
            uint64_t v28 = *((void *)this + 24);
          }
          *(_DWORD *)unint64_t v47 = 1718773093;
          uint64_t v29 = (v28 - 80) + 12;
          *(void *)&v47[8] = v29;
          *(void *)&v47[16] = v27;
          unint64_t v31 = *((void *)this + 19);
          unint64_t v30 = *((void *)this + 20);
          if (v31 >= v30)
          {
            unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - (void)*v8) >> 3);
            unint64_t v35 = v34 + 1;
            if (v34 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - (void)*v8) >> 3);
            if (2 * v36 > v35) {
              unint64_t v35 = 2 * v36;
            }
            if (v36 >= 0x555555555555555) {
              unint64_t v37 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v37 = v35;
            }
            if (v37) {
              unint64_t v37 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v37);
            }
            else {
              uint64_t v38 = 0;
            }
            unint64_t v39 = v37 + 24 * v34;
            unint64_t v40 = v37 + 24 * v38;
            long long v41 = *(_OWORD *)v47;
            *(void *)(v39 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = *(void *)&v47[16];
            *(_OWORD *)unint64_t v39 = v41;
            unint64_t v33 = v39 + 24;
            uint64_t v43 = (char *)*((void *)this + 18);
            long long v42 = (char *)*((void *)this + 19);
            if (v42 != v43)
            {
              do
              {
                long long v44 = *(_OWORD *)(v42 - 24);
                *(void *)(v39 - 8) = *((void *)v42 - 1);
                *(_OWORD *)(v39 - 24) = v44;
                v39 -= 24;
                v42 -= 24;
              }
              while (v42 != v43);
              long long v42 = *v8;
            }
            *((void *)this + 18) = v39;
            *((void *)this + 19) = v33;
            *((void *)this + 20) = v40;
            if (v42) {
              operator delete(v42);
            }
          }
          else
          {
            long long v32 = *(_OWORD *)v47;
            *(void *)(v31 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = *(void *)&v47[16];
            *(_OWORD *)unint64_t v31 = v32;
            unint64_t v33 = v31 + 24;
          }
          *((void *)this + 19) = v33;
          uint64_t v5 = (*(uint64_t (**)(CAFAudioFile *, unsigned char *, unsigned int *))(*(void *)this + 768))(this, v47, &v48);
          if (v5)
          {
            if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
              return v5;
            }
            int v50 = 136315394;
            unsigned __int8 v51 = "CAFAudioFile.cpp";
            __int16 v52 = 1024;
            int v53 = 1089;
            __int16 v6 = MEMORY[0x1E4F14500];
            int v7 = "%25s:%-5d  WriteChunkHeader Failed";
            goto LABEL_36;
          }
          v27 += v29;
        }
        *(_DWORD *)unint64_t v47 = 1684108385;
        *(void *)&v47[8] = -1;
        *(void *)&v47[16] = v27;
        uint64_t v5 = (*(uint64_t (**)(CAFAudioFile *, unsigned char *, unsigned int *))(*(void *)this + 768))(this, v47, &v48);
        if (v5)
        {
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            return v5;
          }
          int v50 = 136315394;
          unsigned __int8 v51 = "CAFAudioFile.cpp";
          __int16 v52 = 1024;
          int v53 = 1100;
          __int16 v6 = MEMORY[0x1E4F14500];
          int v7 = "%25s:%-5d  WriteChunkHeader Failed";
        }
        else
        {
          *(void *)&v47[8] = 16;
          std::vector<ChunkInfo64>::push_back[abi:ne180100]((void **)this + 18, (long long *)v47);
          *((_DWORD *)this + 42) = 0;
          unsigned int v48 = 4;
          uint64_t v5 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, char *, unsigned int *))(**((void **)this + 13) + 56))(*((void *)this + 13), 0, v27 + 12, 4, (char *)this + 168, &v48);
          if (!v5)
          {
            *((void *)this + 9) = v27 + 12 + v48;
            *((_DWORD *)this + 20) = 1;
            (*(void (**)(CAFAudioFile *, void))(*(void *)this + 232))(this, 0);
            (*(void (**)(CAFAudioFile *, void))(*(void *)this + 248))(this, 0);
            (*(void (**)(CAFAudioFile *, void))(*(void *)this + 648))(this, v46);
            return 0;
          }
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            return v5;
          }
          int v50 = 136315394;
          unsigned __int8 v51 = "CAFAudioFile.cpp";
          __int16 v52 = 1024;
          int v53 = 1110;
          __int16 v6 = MEMORY[0x1E4F14500];
          int v7 = "%25s:%-5d  FSWrite Failed";
        }
LABEL_36:
        unint64_t v24 = (uint8_t *)&v50;
        goto LABEL_24;
      }
    }
    else
    {
      int v26 = v3;
    }
    *(_DWORD *)&unsigned char buf[12] = v26;
    goto LABEL_33;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioFormatInfo buf = 136315394;
    *(void *)&uint8_t buf[4] = "CAFAudioFile.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1064;
    __int16 v6 = MEMORY[0x1E4F14500];
    int v7 = "%25s:%-5d  WriteChunkHeader Failed";
    goto LABEL_23;
  }
  return v5;
}

uint64_t CAFAudioFile::Create(CAFAudioFile *this, const __CFURL *a2, const AudioStreamBasicDescription *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = AudioFileObject::Create(this, a2, a3);
  if (v4)
  {
    uint64_t v5 = v4;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      unint64_t v10 = "CAFAudioFile.cpp";
      __int16 v11 = 1024;
      int v12 = 1133;
      __int16 v6 = MEMORY[0x1E4F14500];
      int v7 = "%25s:%-5d  Couldn't create a new audio file object";
LABEL_7:
      _os_log_impl(&dword_18FEC0000, v6, OS_LOG_TYPE_ERROR, v7, (uint8_t *)&v9, 0x12u);
    }
  }
  else
  {
    uint64_t v5 = CAFAudioFile::InitializeCAFChunks(this);
    if (v5 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      unint64_t v10 = "CAFAudioFile.cpp";
      __int16 v11 = 1024;
      int v12 = 1136;
      __int16 v6 = MEMORY[0x1E4F14500];
      int v7 = "%25s:%-5d  InitializeCAFChunks";
      goto LABEL_7;
    }
  }
  return v5;
}

void CAFAudioFormat::NewStream(CAFAudioFormat *this)
{
}

uint64_t CAFAudioFormat::GetHFSCodes(CAFAudioFormat *this, unsigned int *a2, void *a3)
{
  *a2 = 0;
  return 0;
}

uint64_t CAFAudioFormat::GetAvailableStreamDescriptions(CAFAudioFormat *this, int a2, unsigned int *a3, void *__dst)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (a2 == 1819304813)
  {
    uint64_t v6 = 0;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    memset(v36, 0, sizeof(v36));
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long __src = 0u;
    int v7 = (_DWORD *)v36 + 2;
    uint64_t v41 = 0;
    do
    {
      uint64_t v8 = v6 + 8;
      *((void *)v7 - 28) = 0xE6C70636DLL;
      *(v7 - 50) = v6 + 8;
      *(v7 - 53) = 1;
      if (v6)
      {
        *((void *)v7 - 3) = 0xC6C70636DLL;
        *int v7 = v8;
        *(v7 - 3) = 1;
      }
      v7 += 10;
      v6 += 8;
    }
    while (v8 != 32);
    *((void *)&v32 + 1) = 0xB6C70636DLL;
    LODWORD(v34) = 32;
    DWORD1(v33) = 1;
    *(void *)&long long v35 = 0xB6C70636DLL;
    DWORD2(v36[0]) = 64;
    HIDWORD(v35) = 1;
    *(void *)&long long v37 = 0x96C70636DLL;
    DWORD2(v38) = 32;
    HIDWORD(v37) = 1;
    *((void *)&v39 + 1) = 0x96C70636DLL;
    LODWORD(v41) = 64;
    unsigned int v9 = 11;
    DWORD1(v40) = 1;
LABEL_7:
    if (*a3 / 0x28 < v9) {
      unsigned int v9 = *a3 / 0x28;
    }
    size_t v10 = 40 * v9;
    *a3 = v10;
    if (__dst) {
      memcpy(__dst, &__src, v10);
    }
    return 0;
  }
  unsigned int v21 = 0;
  uint64_t v11 = (*(uint64_t (**)(CAFAudioFormat *, unsigned int *, void))(*(void *)this + 96))(this, &v21, 0);
  if (v11) {
    return v11;
  }
  unsigned int v15 = v21;
  unint64_t v16 = (unint64_t)v21 >> 2;
  CADeprecated::CAAutoFree<unsigned int>::CAAutoFree(&v20, v16, 1);
  uint64_t v11 = (*(uint64_t (**)(CAFAudioFormat *, unsigned int *, void *))(*(void *)this + 96))(this, &v21, v20);
  if (v11)
  {
    if (v20) {
      free(v20);
    }
  }
  else
  {
    if (v15 >= 4)
    {
      uint64_t v17 = 0;
      if (v16 <= 1) {
        unsigned int v18 = 1;
      }
      else {
        unsigned int v18 = v16;
      }
      uint64_t v19 = 4 * v18;
      while (*(_DWORD *)((char *)v20 + v17) != a2)
      {
        v17 += 4;
        if (v19 == v17) {
          goto LABEL_26;
        }
      }
      free(v20);
      *(void *)&long long v24 = 0;
      long long __src = 0u;
      long long v23 = 0u;
      DWORD2(__src) = a2;
      unsigned int v9 = 1;
      goto LABEL_7;
    }
    if (v20) {
LABEL_26:
    }
      free(v20);
    *a3 = 0;
    return 1718449215;
  }
  return v11;
}

void sub_19010FC44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  if (a9) {
    free(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CAFAudioFormat::GetAvailableFormatIDs(CAFAudioFormat *this, unsigned int *a2, _DWORD *a3)
{
  unsigned int v21 = 0;
  uint64_t v22 = 0;
  long long v20 = &v21;
  UInt32 outPropertyDataSize = 0;
  if (!AudioFormatGetPropertyInfo(0x61636966u, 0, 0, &outPropertyDataSize))
  {
    long long outPropertyData = 0;
    CADeprecated::CAAutoFree<AIFF_TextChunk>::allocBytes(&outPropertyData, outPropertyDataSize);
    uint64_t v5 = (char *)outPropertyData;
    if (AudioFormatGetProperty(0x61636966u, 0, 0, &outPropertyDataSize, outPropertyData) || outPropertyDataSize < 4)
    {
      if (!v5) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v6 = 0;
      uint64_t v7 = outPropertyDataSize & 0xFFFFFFFC;
      do
      {
        std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t *)&v20, *(_DWORD *)&v5[v6], *(_DWORD *)&v5[v6]);
        v6 += 4;
      }
      while (v7 != v6);
    }
    free(v5);
  }
LABEL_9:
  UInt32 ioPropertyDataSize = 0;
  if (!AudioFormatGetPropertyInfo(0x61636F66u, 0, 0, &ioPropertyDataSize))
  {
    long long outPropertyData = 0;
    CADeprecated::CAAutoFree<AIFF_TextChunk>::allocBytes(&outPropertyData, ioPropertyDataSize);
    uint64_t v8 = (char *)outPropertyData;
    if (AudioFormatGetProperty(0x61636F66u, 0, 0, &ioPropertyDataSize, outPropertyData) || ioPropertyDataSize < 4)
    {
      if (!v8) {
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v10 = ioPropertyDataSize & 0xFFFFFFFC;
      do
      {
        std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t *)&v20, *(_DWORD *)&v8[v9], *(_DWORD *)&v8[v9]);
        v9 += 4;
      }
      while (v10 != v9);
    }
    free(v8);
  }
LABEL_17:
  *a2 = 4 * v22;
  if (a3)
  {
    uint64_t v11 = (uint64_t)v20;
    if (v20 != &v21)
    {
      int v12 = 0;
      do
      {
        a3[v12] = *(_DWORD *)(v11 + 28);
        uint64_t v13 = *(void **)(v11 + 8);
        if (v13)
        {
          do
          {
            unint64_t v14 = (void **)v13;
            uint64_t v13 = (void *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            unint64_t v14 = *(void ***)(v11 + 16);
            BOOL v15 = *v14 == (void *)v11;
            uint64_t v11 = (uint64_t)v14;
          }
          while (!v15);
        }
        ++v12;
        uint64_t v11 = (uint64_t)v14;
      }
      while (v14 != &v21);
    }
  }
  return 0;
}

void sub_19010FE48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13)
{
  if (a10) {
    free(a10);
  }
  _Unwind_Resume(a1);
}

void CAFAudioFormat::GetFileTypeName(CAFAudioFormat *this, CFTypeRef *a2)
{
  CABundleLocker::CABundleLocker((CABundleLocker *)&v3);
  *a2 = CFRetain(@"CAF");
  CABundleLocker::~CABundleLocker((CABundleLocker *)&v3);
}

void sub_19010FED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

const __CFArray *CAFAudioFormat::GetMIMETypes(CAFAudioFormat *this, const __CFArray **a2)
{
  v4[1] = *(const void **)MEMORY[0x1E4F143B8];
  v4[0] = @"audio/x-caf";
  CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v4, 1, MEMORY[0x1E4F1D510]);
  *a2 = result;
  return result;
}

const __CFArray *CAFAudioFormat::GetUTIs(CAFAudioFormat *this, const __CFArray **a2)
{
  v4[1] = *(const void **)MEMORY[0x1E4F143B8];
  v4[0] = @"com.apple.coreaudio-format";
  CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v4, 1, MEMORY[0x1E4F1D510]);
  *a2 = result;
  return result;
}

const __CFArray *CAFAudioFormat::GetExtensions(CAFAudioFormat *this, const __CFArray **a2)
{
  values[2] = *(void **)MEMORY[0x1E4F143B8];
  values[0] = @"caf";
  values[1] = @"caff";
  CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)values, 2, MEMORY[0x1E4F1D510]);
  *a2 = result;
  return result;
}

void CAFAudioFormat::~CAFAudioFormat(CAFAudioFormat *this)
{
}

void *AAAnalyzer::Cleanup(void *this)
{
  this[28] = 0;
  this[29] = 0;
  this[30] = 0;
  return this;
}

uint64_t AAAnalyzer::PrepareAnalyzers(AAAnalyzer *this)
{
  return 0;
}

uint64_t AAAnalyzer::CompleteAnalysis(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5)
{
  *(void *)(a1 + 224) = a2;
  *(void *)(a1 + 232) = a3;
  *(void *)(a1 + 240) = a4;
  a5.n128_u32[0] = 1120403456;
  uint64_t result = AAAnalyzer::CallProgressCallback((AAAnalyzer *)a1, a5);
  if (!result) {
    *(unsigned char *)(a1 + 25std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
  }
  return result;
}

uint64_t AAAnalyzer::CallProgressCallback(AAAnalyzer *this, __n128 a2)
{
  unsigned __int32 v2 = a2.n128_u32[0];
  uint64_t v4 = (uint64_t (*)(void, void, float))*((void *)this + 28);
  if (v4) {
    uint64_t result = v4(*((unsigned int *)this + 2), *((void *)this + 29), a2.n128_f32[0]);
  }
  else {
    uint64_t result = 0;
  }
  uint64_t v6 = *((void *)this + 30);
  if (v6)
  {
    uint64_t v7 = *((unsigned int *)this + 2);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v6 + 16);
    uint64_t v9 = *((void *)this + 30);
    a2.n128_u32[0] = v2;
    return v8(v9, v7, a2);
  }
  return result;
}

uint64_t AAAnalyzer::PushFileStreamData(AudioFileStreamID *this, UInt32 a2, const void *a3)
{
  return AudioFileStreamParseBytes(this[14], a2, a3, 0);
}

uint64_t AAAnalyzer::PushAudio(AAAnalyzer *this, unsigned int a2, const AudioBufferList *a3, const AudioStreamPacketDescription *a4)
{
  if (!*((unsigned char *)this + 256)) {
    return 4294963436;
  }
  CrashIfClientProvidedBogusAudioBufferList();
  return 0;
}

uint64_t AAAnalyzer::PrepareWithFile(AudioFileID *outAudioFile, CFURLRef inFileRef, AudioFileTypeID inFileTypeHint)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = outAudioFile + 11;
  uint64_t v6 = outAudioFile[11];
  if (v6) {
    AudioFileClose(v6);
  }
  UInt32 ioDataSize = 0;
  uint64_t v8 = AudioFileOpenURL(inFileRef, kAudioFileReadPermission, inFileTypeHint, v7);
  if (v8)
  {
    uint64_t Property = v8;
    if (kAASubsystem)
    {
      uint64_t v10 = *(NSObject **)kAASubsystem;
      if (!*(void *)kAASubsystem) {
        return Property;
      }
    }
    else
    {
      uint64_t v10 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioFormatInfo buf = 136315906;
      *(void *)long long v34 = "AAAnalyzer.cpp";
      *(_WORD *)&v34[8] = 1024;
      *(_DWORD *)&v34[10] = 192;
      __int16 v35 = 2048;
      unint64_t v36 = outAudioFile;
      __int16 v37 = 1024;
      int v38 = Property;
      unint64_t v14 = "%25s:%-5d AAAnalyzer::PrepareWithFile (%p): AudioFileOpenURL failed (err = %d)\n";
LABEL_19:
      _os_log_impl(&dword_18FEC0000, v10, OS_LOG_TYPE_ERROR, v14, buf, 0x22u);
      return Property;
    }
    return Property;
  }
  CFDictionaryRef outPropertyData = 0;
  UInt32 ioDataSize = 8;
  if (!AudioFileGetProperty(*v7, 0x6C6F7564u, &ioDataSize, &outPropertyData))
  {
    *(_DWORD *)AudioFormatInfo buf = 1;
    LODWORD(v30) = 0;
    if (CFDictionaryContainsKey(outPropertyData, @"sound check info"))
    {
      CFArrayRef v16 = outAudioFile[31];
      v40.length = CFArrayGetCount(v16);
      v40.id location = 0;
      if (CFArrayContainsValue(v16, v40, @"sound check info"))
      {
        long long v28 = (void *)8;
        CFBooleanRef Value = CFDictionaryGetValue(outPropertyData, @"sound check info");
        *(void *)&v34[4] = &v28;
        LODWORD(v30) = 1;
        AAAnalyzer::CallResultsCallback((uint64_t)outAudioFile, @"sound check info", (uint64_t)buf, (uint64_t)&v30);
        if ((v30 & 2) != 0) {
          RemoveKeyFromList(outAudioFile[31], @"sound check info");
        }
      }
    }
    if (CFDictionaryContainsKey(outPropertyData, @"main loudness parameters"))
    {
      CFArrayRef v17 = outAudioFile[31];
      v41.length = CFArrayGetCount(v17);
      v41.id location = 0;
      if (CFArrayContainsValue(v17, v41, @"main loudness parameters"))
      {
        CFBooleanRef Value = 0;
        long long v28 = (void *)8;
        CFBooleanRef Value = CFDictionaryGetValue(outPropertyData, @"main loudness parameters");
        *(void *)&v34[4] = &v28;
        LODWORD(v30) = 1;
        AAAnalyzer::CallResultsCallback((uint64_t)outAudioFile, @"main loudness parameters", (uint64_t)buf, (uint64_t)&v30);
        if ((v30 & 2) != 0) {
          RemoveKeyFromList(outAudioFile[31], @"main loudness parameters");
        }
      }
    }
    if (CFDictionaryContainsKey(outPropertyData, @"additional loudness parameters"))
    {
      CFArrayRef v18 = outAudioFile[31];
      v42.length = CFArrayGetCount(v18);
      v42.id location = 0;
      if (CFArrayContainsValue(v18, v42, @"additional loudness parameters"))
      {
        CFBooleanRef Value = 0;
        long long v28 = (void *)8;
        CFBooleanRef Value = CFDictionaryGetValue(outPropertyData, @"additional loudness parameters");
        *(void *)&v34[4] = &v28;
        LODWORD(v30) = 1;
        AAAnalyzer::CallResultsCallback((uint64_t)outAudioFile, @"additional loudness parameters", (uint64_t)buf, (uint64_t)&v30);
        if ((v30 & 2) != 0) {
          RemoveKeyFromList(outAudioFile[31], @"additional loudness parameters");
        }
      }
    }
  }
  if (outPropertyData) {
    CFRelease(outPropertyData);
  }
  uint64_t v11 = outAudioFile[8];
  if (outAudioFile[9] != v11) {
    outAudioFile[9] = v11;
  }
  if (AudioFileGetPropertyInfo(*v7, 0x6D676963u, &ioDataSize, 0) || !ioDataSize) {
    goto LABEL_40;
  }
  AudioFileID v12 = outAudioFile[8];
  uint64_t v13 = (char *)(outAudioFile[9] - v12);
  if (ioDataSize <= (unint64_t)v13)
  {
    if (ioDataSize < (unint64_t)v13) {
      outAudioFile[9] = (AudioFileID)((char *)v12 + ioDataSize);
    }
  }
  else
  {
    std::vector<unsigned char>::__append((std::vector<char> *)(outAudioFile + 8), ioDataSize - (void)v13);
    AudioFileID v12 = outAudioFile[8];
  }
  uint64_t Property = AudioFileGetProperty(*v7, 0x6D676963u, &ioDataSize, v12);
  if (!Property)
  {
LABEL_40:
    if (!AudioFileGetPropertyInfo(*v7, 0x666C7374u, &ioDataSize, 0) && ioDataSize)
    {
      long long v28 = 0;
      CADeprecated::CAAutoFree<AudioFormatListItem>::alloc(&v28, ioDataSize);
      uint64_t v19 = (long long *)v28;
      uint64_t Property = AudioFileGetProperty(*v7, 0x666C7374u, &ioDataSize, v28);
      if (Property)
      {
        if (kAASubsystem)
        {
          long long v20 = *(NSObject **)kAASubsystem;
          if (!*(void *)kAASubsystem)
          {
LABEL_68:
            if (v19) {
              free(v19);
            }
            return Property;
          }
        }
        else
        {
          long long v20 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioFormatInfo buf = 136315906;
          *(void *)long long v34 = "AAAnalyzer.cpp";
          *(_WORD *)&v34[8] = 1024;
          *(_DWORD *)&v34[10] = 263;
          __int16 v35 = 2048;
          unint64_t v36 = outAudioFile;
          __int16 v37 = 1024;
          int v38 = Property;
          _os_log_impl(&dword_18FEC0000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d AAAnalyzer::PrepareWithFile (%p): AudioFileGetProperty kAudioFilePropertyFormatList failed (err = %d)\n", buf, 0x22u);
        }
        goto LABEL_68;
      }
      long long v21 = *v19;
      long long v22 = v19[1];
      outAudioFile[6] = (AudioFileID)*((void *)v19 + 4);
      *((_OWORD *)outAudioFile + 1) = v21;
      *((_OWORD *)outAudioFile + 2) = v22;
      free(v19);
    }
    if (AudioFileGetPropertyInfo(*v7, 0x636D6170u, &ioDataSize, 0))
    {
LABEL_47:
      long long v30 = 0;
      UInt32 ioDataSize = 8;
      uint64_t Property = AudioFileGetProperty(*v7, 0x70636E74u, &ioDataSize, &v30);
      if (Property)
      {
        if (kAASubsystem)
        {
          uint64_t v10 = *(NSObject **)kAASubsystem;
          if (!*(void *)kAASubsystem) {
            return Property;
          }
        }
        else
        {
          uint64_t v10 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioFormatInfo buf = 136315906;
          *(void *)long long v34 = "AAAnalyzer.cpp";
          *(_WORD *)&v34[8] = 1024;
          *(_DWORD *)&v34[10] = 287;
          __int16 v35 = 2048;
          unint64_t v36 = outAudioFile;
          __int16 v37 = 1024;
          int v38 = Property;
          unint64_t v14 = "%25s:%-5d AAAnalyzer::PrepareWithFile (%p): AudioFileGetProperty kAudioFilePropertyAudioDataPacketCount "
                "failed (err = %d)\n";
          goto LABEL_19;
        }
      }
      else
      {
        CFBooleanRef Value = v30;
        UInt32 ioDataSize = 24;
        uint64_t Property = AudioFileGetProperty(*v7, 0x706B6672u, &ioDataSize, &v28);
        if (Property)
        {
          if (kAASubsystem)
          {
            uint64_t v10 = *(NSObject **)kAASubsystem;
            if (!*(void *)kAASubsystem) {
              return Property;
            }
          }
          else
          {
            uint64_t v10 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioFormatInfo buf = 136315906;
            *(void *)long long v34 = "AAAnalyzer.cpp";
            *(_WORD *)&v34[8] = 1024;
            *(_DWORD *)&v34[10] = 297;
            __int16 v35 = 2048;
            unint64_t v36 = outAudioFile;
            __int16 v37 = 1024;
            int v38 = Property;
            unint64_t v14 = "%25s:%-5d AAAnalyzer::PrepareWithFile (%p): AudioFileGetProperty kAudioFilePropertyPacketToFrame failed (err = %d)\n";
            goto LABEL_19;
          }
        }
        else
        {
          outAudioFile[24] = (AudioFileID)v28;
          unsigned int v27 = 0;
          unsigned int v25 = *((_DWORD *)outAudioFile + 8);
          if (v25)
          {
            unsigned int v27 = *((_DWORD *)outAudioFile + 8);
            *((_DWORD *)outAudioFile + 24) = 0x8000 / v25;
            uint64_t Property = (*((uint64_t (**)(AudioFileID *, AudioFileID *, char *, AudioFileID, void))*outAudioFile
                        + 4))(outAudioFile, outAudioFile + 2, (char *)outAudioFile[7] + 16, outAudioFile[8], *((_DWORD *)outAudioFile + 18) - outAudioFile[8]);
            if (Property)
            {
              if (kAASubsystem)
              {
                uint64_t v10 = *(NSObject **)kAASubsystem;
                if (!*(void *)kAASubsystem) {
                  return Property;
                }
              }
              else
              {
                uint64_t v10 = MEMORY[0x1E4F14500];
              }
              if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioFormatInfo buf = 136315906;
                *(void *)long long v34 = "AAAnalyzer.cpp";
                *(_WORD *)&v34[8] = 1024;
                *(_DWORD *)&v34[10] = 324;
                __int16 v35 = 2048;
                unint64_t v36 = outAudioFile;
                __int16 v37 = 1024;
                int v38 = Property;
                unint64_t v14 = "%25s:%-5d AAAnalyzer::PrepareWithFile (%p): Prepare failed (err = %d)\n";
                goto LABEL_19;
              }
            }
          }
          else
          {
            UInt32 ioDataSize = 4;
            uint64_t Property = AudioFileGetProperty(*v7, 0x70737A65u, &ioDataSize, &v27);
            if (!Property)
            {
              *((_DWORD *)outAudioFile + 24) = 0x8000 / v27;
              AudioFileID v26 = outAudioFile[13];
              if (v26) {
                MEMORY[0x192FC8910](v26, 0x1000C80451B5BE8);
              }
              operator new[]();
            }
            if (kAASubsystem)
            {
              uint64_t v10 = *(NSObject **)kAASubsystem;
              if (!*(void *)kAASubsystem) {
                return Property;
              }
            }
            else
            {
              uint64_t v10 = MEMORY[0x1E4F14500];
            }
            if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioFormatInfo buf = 136315906;
              *(void *)long long v34 = "AAAnalyzer.cpp";
              *(_WORD *)&v34[8] = 1024;
              *(_DWORD *)&v34[10] = 309;
              __int16 v35 = 2048;
              unint64_t v36 = outAudioFile;
              __int16 v37 = 1024;
              int v38 = Property;
              unint64_t v14 = "%25s:%-5d AAAnalyzer::PrepareWithFile (%p): AudioFileGetProperty kAudioFilePropertyMaximumPacketSize"
                    " failed (err = %d)\n";
              goto LABEL_19;
            }
          }
        }
      }
      return Property;
    }
    long long v28 = 0;
    CADeprecated::CAAutoFree<AudioChannelLayout>::alloc(&v28, ioDataSize);
    long long v23 = (AudioChannelLayout *)v28;
    uint64_t Property = AudioFileGetProperty(*v7, 0x636D6170u, &ioDataSize, v28);
    if (!Property)
    {
      CAAudioChannelLayout::Set((CAAudioChannelLayout *)(outAudioFile + 7), v23);
      goto LABEL_79;
    }
    if (kAASubsystem)
    {
      long long v24 = *(NSObject **)kAASubsystem;
      if (!*(void *)kAASubsystem) {
        goto LABEL_79;
      }
    }
    else
    {
      long long v24 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioFormatInfo buf = 136315906;
      *(void *)long long v34 = "AAAnalyzer.cpp";
      *(_WORD *)&v34[8] = 1024;
      *(_DWORD *)&v34[10] = 276;
      __int16 v35 = 2048;
      unint64_t v36 = outAudioFile;
      __int16 v37 = 1024;
      int v38 = Property;
      _os_log_impl(&dword_18FEC0000, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d AAAnalyzer::PrepareWithFile (%p): AudioFileGetProperty kAudioFilePropertyChannelLayout failed (err = %d)\n", buf, 0x22u);
    }
LABEL_79:
    if (v23) {
      free(v23);
    }
    if (Property) {
      return Property;
    }
    goto LABEL_47;
  }
  if (kAASubsystem)
  {
    uint64_t v10 = *(NSObject **)kAASubsystem;
    if (!*(void *)kAASubsystem) {
      return Property;
    }
  }
  else
  {
    uint64_t v10 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioFormatInfo buf = 136315906;
    *(void *)long long v34 = "AAAnalyzer.cpp";
    *(_WORD *)&v34[8] = 1024;
    *(_DWORD *)&v34[10] = 251;
    __int16 v35 = 2048;
    unint64_t v36 = outAudioFile;
    __int16 v37 = 1024;
    int v38 = Property;
    unint64_t v14 = "%25s:%-5d AAAnalyzer::PrepareWithFile (%p): AudioFileGetProperty kAudioFilePropertyMagicCookieData failed (err = %d)\n";
    goto LABEL_19;
  }
  return Property;
}

void sub_190110B50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  if (a11) {
    free(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AAAnalyzer::CallResultsCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void (**)(void, uint64_t, uint64_t, void, uint64_t))(a1 + 200);
  if (v5) {
    v5(*(unsigned int *)(a1 + 8), a2, a3, *(void *)(a1 + 208), a4);
  }
  uint64_t result = *(void *)(a1 + 216);
  if (result)
  {
    uint64_t v7 = *(uint64_t (**)(void))(result + 16);
    return v7();
  }
  return result;
}

void *CADeprecated::CAAutoFree<AudioFormatListItem>::alloc(void **a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  if (v4)
  {
    free(v4);
    *a1 = 0;
  }
  uint64_t result = malloc_type_malloc(48 * a2, 0x7C51E058uLL);
  if (!result)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v7 = std::bad_alloc::bad_alloc(exception);
  }
  *a1 = result;
  return result;
}

uint64_t AAAnalyzer::PrepareWithFileStream(AAAnalyzer *this, AudioFileTypeID inFileTypeHint)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (AudioFileStreamID *)((char *)this + 112);
  uint64_t v4 = (OpaqueAudioFileStreamID *)*((void *)this + 14);
  *((unsigned char *)v5 - 100) = 1;
  if (v4) {
    AudioFileStreamClose(v4);
  }
  uint64_t v6 = *((void *)this + 8);
  if (*((void *)this + 9) != v6) {
    *((void *)this + 9) = v6;
  }
  uint64_t v7 = AudioFileStreamOpen(this, (AudioFileStream_PropertyListenerProc)AAAnalyzer::StreamPropertyListenerProc, (AudioFileStream_PacketsProc)AAAnalyzer::StreamPacketsProc, inFileTypeHint, v5);
  if (v7)
  {
    uint64_t v8 = v7;
    if (kAASubsystem)
    {
      uint64_t v9 = *(NSObject **)kAASubsystem;
      if (!*(void *)kAASubsystem) {
        return v8;
      }
    }
    else
    {
      uint64_t v9 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioFormatInfo buf = 136315906;
      CFArrayRef v17 = "AAAnalyzer.cpp";
      __int16 v18 = 1024;
      int v19 = 159;
      __int16 v20 = 2048;
      long long v21 = this;
      __int16 v22 = 1024;
      int v23 = v8;
      uint64_t v13 = "%25s:%-5d AAAnalyzer::PrepareWithFileStream (%p): AudioFileStreamOpen failed (err = %d)\n";
LABEL_22:
      _os_log_impl(&dword_18FEC0000, v9, OS_LOG_TYPE_ERROR, v13, buf, 0x22u);
    }
  }
  else
  {
    CFArrayRef v10 = (const __CFArray *)*((void *)this + 31);
    v25.length = CFArrayGetCount(v10);
    v25.id location = 0;
    if (!CFArrayContainsValue(v10, v25, @"sound check info"))
    {
      CFArrayRef v11 = (const __CFArray *)*((void *)this + 31);
      v26.length = CFArrayGetCount(v11);
      v26.id location = 0;
      if (!CFArrayContainsValue(v11, v26, @"main loudness parameters"))
      {
        CFArrayRef v12 = (const __CFArray *)*((void *)this + 31);
        v27.length = CFArrayGetCount(v12);
        v27.id location = 0;
        if (!CFArrayContainsValue(v12, v27, @"additional loudness parameters")) {
          return 0;
        }
      }
    }
    int inPropertyData = 1819243876;
    uint64_t v8 = AudioFileStreamSetProperty(*v5, 0x6F707470u, 4u, &inPropertyData);
    if (v8)
    {
      if (kAASubsystem)
      {
        uint64_t v9 = *(NSObject **)kAASubsystem;
        if (!*(void *)kAASubsystem) {
          return v8;
        }
      }
      else
      {
        uint64_t v9 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioFormatInfo buf = 136315906;
        CFArrayRef v17 = "AAAnalyzer.cpp";
        __int16 v18 = 1024;
        int v19 = 171;
        __int16 v20 = 2048;
        long long v21 = this;
        __int16 v22 = 1024;
        int v23 = v8;
        uint64_t v13 = "%25s:%-5d AAAnalyzer::PrepareWithFileStream (%p): AudioFileStreamSetProperty kAudioFileStreamProperty_Opti"
              "onalProperties failed (err = %d)\n";
        goto LABEL_22;
      }
    }
  }
  return v8;
}

uint64_t AAAnalyzer::StreamPacketsProc(AAAnalyzer *this, void *a2, uint64_t a3, uint64_t a4, const void *a5, AudioStreamPacketDescription *a6)
{
  int v9 = (int)a2;
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (kAASubsystem)
  {
    if (*(unsigned char *)(kAASubsystem + 8))
    {
      CFArrayRef v11 = *(NSObject **)kAASubsystem;
      if (*(void *)kAASubsystem)
      {
        if (os_log_type_enabled(*(os_log_t *)kAASubsystem, OS_LOG_TYPE_DEBUG))
        {
          int v14 = 136316162;
          BOOL v15 = "AAAnalyzer.cpp";
          LOWORD(v1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 1024;
          *(_DWORD *)((char *)&v16 + 2) = 570;
          WORD3(v1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 2048;
          *((void *)&v16 + 1) = this;
          __int16 v17 = 1024;
          int v18 = v9;
          __int16 v19 = 1024;
          int v20 = a3;
          _os_log_impl(&dword_18FEC0000, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d AAAnalyzer::StreamPacketsProc (%p), inNumberBytes = %d, inNumberPackets = %d\n", (uint8_t *)&v14, 0x28u);
        }
      }
    }
  }
  int v12 = *((_DWORD *)this + 11);
  int v14 = 1;
  HIDWORD(v15) = v12;
  LODWORD(v1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v9;
  *(void *)((char *)&v16 + 4) = a4;
  return (*(uint64_t (**)(AAAnalyzer *, uint64_t, int *, const void *, const void *, AudioStreamPacketDescription *))(*(void *)this + 56))(this, a3, &v14, a5, a5, a6);
}

void AAAnalyzer::StreamPropertyListenerProc(AAAnalyzer *this, AudioFileStreamID inAudioFileStream, OpaqueAudioFileStreamID *a3, unsigned int a4, unsigned int *a5)
{
  int v5 = (int)a3;
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (kAASubsystem)
  {
    uint64_t v8 = *(NSObject **)kAASubsystem;
    if (!*(void *)kAASubsystem) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v8 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioFormatInfo buf = 136315906;
    *(void *)&uint8_t buf[4] = "AAAnalyzer.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 426;
    __int16 v27 = 2048;
    long long v28 = this;
    __int16 v29 = 1024;
    int v30 = v5;
    _os_log_impl(&dword_18FEC0000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d AAAnalyzer::StreamPropertyListenerProc (%p), inPropertyID = %d", buf, 0x22u);
  }
LABEL_7:
  UInt32 outPropertyDataSize = 0;
  if (v5 > 1819243875)
  {
    if (v5 > 1885564531)
    {
      if (v5 == 1885564532)
      {
        uint64_t v21 = 0;
        UInt32 outPropertyDataSize = 8;
        if (!AudioFileStreamGetProperty(inAudioFileStream, 0x70636E74u, &outPropertyDataSize, &v21))
        {
          *(void *)&buf[8] = v21;
          UInt32 outPropertyDataSize = 24;
          if (!AudioFileStreamGetProperty(inAudioFileStream, 0x706B6672u, &outPropertyDataSize, buf)) {
            *((void *)this + 24) = *(void *)buf;
          }
        }
      }
      else if (v5 == 1919247481 {
             && !(*(unsigned int (**)(AAAnalyzer *, char *, uint64_t, void, void, void))(*(void *)this + 32))(this, (char *)this + 16, *((void *)this + 7) + 16, *((void *)this + 8), *((_DWORD *)this + 18) - *((void *)this + 8), *((void *)this + 24)))
      }
      {
        *((unsigned char *)this + 25std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 1;
      }
    }
    else if (v5 == 1819243876)
    {
      CFDictionaryRef outPropertyData = 0;
      UInt32 outPropertyDataSize = 8;
      if (!AudioFileStreamGetProperty(inAudioFileStream, 0x6C6F7564u, &outPropertyDataSize, &outPropertyData))
      {
        *(_DWORD *)AudioFormatInfo buf = 1;
        int v23 = 0;
        if (CFDictionaryContainsKey(outPropertyData, @"sound check info"))
        {
          CFArrayRef v15 = (const __CFArray *)*((void *)this + 31);
          v32.length = CFArrayGetCount(v15);
          v32.id location = 0;
          if (CFArrayContainsValue(v15, v32, @"sound check info"))
          {
            uint64_t v21 = 8;
            CFBooleanRef Value = CFDictionaryGetValue(outPropertyData, @"sound check info");
            *(void *)&buf[8] = &v21;
            int v23 = 1;
            AAAnalyzer::CallResultsCallback((uint64_t)this, @"sound check info", (uint64_t)buf, (uint64_t)&v23);
            if ((v23 & 2) != 0) {
              RemoveKeyFromList(*((CFArrayRef *)this + 31), @"sound check info");
            }
          }
        }
        if (CFDictionaryContainsKey(outPropertyData, @"main loudness parameters"))
        {
          CFArrayRef v16 = (const __CFArray *)*((void *)this + 31);
          v33.length = CFArrayGetCount(v16);
          v33.id location = 0;
          if (CFArrayContainsValue(v16, v33, @"main loudness parameters"))
          {
            uint64_t v21 = 8;
            CFBooleanRef Value = CFDictionaryGetValue(outPropertyData, @"main loudness parameters");
            *(void *)&buf[8] = &v21;
            int v23 = 1;
            AAAnalyzer::CallResultsCallback((uint64_t)this, @"main loudness parameters", (uint64_t)buf, (uint64_t)&v23);
            if ((v23 & 2) != 0) {
              RemoveKeyFromList(*((CFArrayRef *)this + 31), @"main loudness parameters");
            }
          }
        }
        if (CFDictionaryContainsKey(outPropertyData, @"additional loudness parameters"))
        {
          CFArrayRef v17 = (const __CFArray *)*((void *)this + 31);
          v34.length = CFArrayGetCount(v17);
          v34.id location = 0;
          if (CFArrayContainsValue(v17, v34, @"additional loudness parameters"))
          {
            uint64_t v21 = 8;
            CFBooleanRef Value = CFDictionaryGetValue(outPropertyData, @"additional loudness parameters");
            *(void *)&buf[8] = &v21;
            int v23 = 1;
            AAAnalyzer::CallResultsCallback((uint64_t)this, @"additional loudness parameters", (uint64_t)buf, (uint64_t)&v23);
            if ((v23 & 2) != 0) {
              RemoveKeyFromList(*((CFArrayRef *)this + 31), @"additional loudness parameters");
            }
          }
        }
      }
      if (outPropertyData) {
        CFRelease(outPropertyData);
      }
    }
    else if (v5 == 1835493731 {
           && !AudioFileStreamGetPropertyInfo(inAudioFileStream, 0x6D676963u, &outPropertyDataSize, 0)
    }
           && outPropertyDataSize)
    {
      int v9 = (char *)*((void *)this + 8);
      unint64_t v10 = *((void *)this + 9) - (void)v9;
      if (outPropertyDataSize <= v10)
      {
        if (outPropertyDataSize < v10) {
          *((void *)this + 9) = &v9[outPropertyDataSize];
        }
      }
      else
      {
        std::vector<unsigned char>::__append((std::vector<char> *)((char *)this + 64), outPropertyDataSize - v10);
        int v9 = (char *)*((void *)this + 8);
      }
      if (AudioFileStreamGetProperty(inAudioFileStream, 0x6D676963u, &outPropertyDataSize, v9))
      {
        uint64_t v18 = *((void *)this + 8);
        if (*((void *)this + 9) != v18) {
          *((void *)this + 9) = v18;
        }
      }
    }
    return;
  }
  if (v5 == 1668112752)
  {
    if (AudioFileStreamGetPropertyInfo(inAudioFileStream, 0x636D6170u, &outPropertyDataSize, 0)) {
      return;
    }
    *(void *)AudioFormatInfo buf = 0;
    CADeprecated::CAAutoFree<AudioChannelLayout>::alloc((void **)buf, outPropertyDataSize);
    CFArrayRef v11 = *(AudioChannelLayout **)buf;
    if (!AudioFileStreamGetProperty(inAudioFileStream, 0x636D6170u, &outPropertyDataSize, *(void **)buf)) {
      CAAudioChannelLayout::Set((AAAnalyzer *)((char *)this + 56), v11);
    }
    goto LABEL_32;
  }
  if (v5 != 1684434292)
  {
    if (v5 != 1718383476
      || AudioFileStreamGetPropertyInfo(inAudioFileStream, 0x666C7374u, &outPropertyDataSize, 0)
      || !outPropertyDataSize)
    {
      return;
    }
    *(void *)AudioFormatInfo buf = 0;
    CADeprecated::CAAutoFree<AudioFormatListItem>::alloc((void **)buf, outPropertyDataSize);
    CFArrayRef v11 = *(AudioChannelLayout **)buf;
    if (!AudioFileStreamGetProperty(inAudioFileStream, 0x666C7374u, &outPropertyDataSize, *(void **)buf))
    {
      long long v12 = *(_OWORD *)&v11->mChannelLayoutTag;
      long long v13 = *(_OWORD *)&v11->mChannelDescriptions[0].mChannelFlags;
      *((void *)this + std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = *(void *)&v11[1].mChannelLayoutTag;
      *((_OWORD *)this + 1) = v12;
      *((_OWORD *)this + 2) = v13;
LABEL_33:
      free(v11);
      return;
    }
LABEL_32:
    if (!v11) {
      return;
    }
    goto LABEL_33;
  }
  UInt32 outPropertyDataSize = 40;
  if (!AudioFileStreamGetProperty(inAudioFileStream, 0x64666D74u, &outPropertyDataSize, v19))
  {
    long long v14 = v19[1];
    *((_OWORD *)this + 1) = v19[0];
    *((_OWORD *)this + 2) = v14;
    *((void *)this + std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v20;
  }
}

void sub_19011162C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  if (a19) {
    free(a19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AAAnalyzer::Prepare(AAAnalyzer *this, const AudioStreamBasicDescription *a2, const AudioChannelLayout *a3, const void *a4, int a5, uint64_t a6)
{
  long long v10 = *(_OWORD *)&a2->mSampleRate;
  long long v11 = *(_OWORD *)&a2->mBytesPerPacket;
  *((void *)this + std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = *(void *)&a2->mBitsPerChannel;
  *((_OWORD *)this + 1) = v10;
  *((_OWORD *)this + 2) = v11;
  CAAudioChannelLayout::operator=();
  long long v12 = *((_OWORD *)this + 2);
  *(_OWORD *)&v46.mSampleRate = *((_OWORD *)this + 1);
  *(_OWORD *)&v46.mBytesPerPacket = v12;
  *(void *)&v46.mBitsPerChannel = *((void *)this + 6);
  LODWORD(v45.mSampleRate) = 0;
  if (CAStreamBasicDescription::IdentifyCommonPCMFormat(&v46, (int *)&v45)
    && LODWORD(v45.mSampleRate) == 1
    && (v46.mFormatFlags & 0x20) != 0)
  {
LABEL_44:
    *((void *)this + 24) = a6;
    uint64_t result = (*(uint64_t (**)(AAAnalyzer *))(*(void *)this + 88))(this);
    if (!result) {
      *((unsigned char *)this + 25std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 1;
    }
    return result;
  }
  long long v13 = (OpaqueAudioConverter *)*((void *)this + 15);
  UInt32 v14 = *((_DWORD *)this + 11);
  v45.mSampleRate = *((Float64 *)this + 2);
  *(_OWORD *)&v45.AudioFormatID mFormatID = xmmword_1901C60C0;
  v45.mBytesPerFrame = 4;
  v45.UInt32 mChannelsPerFrame = v14;
  *(void *)&v45.mBitsPerChannel = 32;
  if (v13) {
    AudioConverterDispose(v13);
  }
  uint64_t result = AudioConverterNewWithOptions(&v46, &v45, 0, (void *)this + 15);
  if (!result)
  {
    if (!a5) {
      goto LABEL_9;
    }
    uint64_t v16 = *((void *)this + 15);
    int v50 = a5;
    int v51 = 1684891491;
    uint64_t v49 = a4;
    v47[0] = &v51;
    v47[1] = &v50;
    v47[2] = &v49;
    v48[0] = (uint64_t (*)(uint64_t, uint64_t))caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterSetProperty::$_0>;
    v48[1] = (uint64_t (*)(uint64_t, uint64_t))v47;
    uint64_t result = with_resolved(v16, v48);
    if (!result)
    {
LABEL_9:
      CFArrayRef v17 = (char *)*((void *)this + 16);
      uint64_t v18 = (char *)*((void *)this + 17);
      if (v18 == v17)
      {
        unint64_t v22 = 0;
        CFArrayRef v17 = (char *)*((void *)this + 17);
      }
      else
      {
        uint64_t v19 = 0;
        unsigned int v20 = 1;
        do
        {
          uint64_t v21 = *(void *)&v17[8 * v19];
          if (v21)
          {
            MEMORY[0x192FC8910](v21, 0x1000C8077774924);
            CFArrayRef v17 = (char *)*((void *)this + 16);
            uint64_t v18 = (char *)*((void *)this + 17);
          }
          uint64_t v19 = v20;
          unint64_t v22 = (v18 - v17) >> 3;
        }
        while (v22 > v20++);
      }
      unint64_t v24 = *((unsigned int *)this + 11);
      unint64_t v25 = v24 - v22;
      if (v24 <= v22)
      {
        if (v24 >= v22)
        {
LABEL_32:
          if (v18 != *((char **)this + 16)) {
            operator new[]();
          }
          if ((v46.mFormatFlags & 0x20) != 0) {
            size_t v36 = (16 * v46.mChannelsPerFrame) | 8;
          }
          else {
            size_t v36 = 24;
          }
          *((_DWORD *)this + 44) = v36;
          __int16 v37 = malloc_type_calloc(v36, 1uLL, 0x3E4B753BuLL);
          int v38 = (void *)*((void *)this + 21);
          if (v38 != v37)
          {
            free(v38);
            *((void *)this + 21) = v37;
          }
          uint64_t v39 = malloc_type_calloc(16 * (*((_DWORD *)this + 11) - 1) + 24, 1uLL, 0xF371BD99uLL);
          CFRange v40 = (_DWORD *)*((void *)this + 19);
          if (v40 != v39)
          {
            free(v40);
            *((void *)this + 19) = v39;
          }
          uint64_t v41 = *((unsigned int *)this + 11);
          *uint64_t v39 = v41;
          if (v41)
          {
            CFRange v42 = (uint64_t *)*((void *)this + 16);
            uint64_t v43 = v39 + 4;
            do
            {
              *(v43 - 1) = 0x200000000001;
              uint64_t v44 = *v42++;
              *uint64_t v43 = v44;
              v43 += 2;
              --v41;
            }
            while (v41);
          }
          goto LABEL_44;
        }
        uint64_t v18 = &v17[8 * v24];
      }
      else
      {
        uint64_t v26 = *((void *)this + 18);
        if (v25 > (v26 - (uint64_t)v18) >> 3)
        {
          uint64_t v27 = v26 - (void)v17;
          if (v27 >> 2 > v24) {
            unint64_t v24 = v27 >> 2;
          }
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v28 = v24;
          }
          __int16 v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v28);
          int v30 = &v29[8 * v22];
          CFRange v32 = &v29[8 * v31];
          bzero(v30, 8 * v25);
          uint64_t v18 = &v30[8 * v25];
          CFRange v34 = (char *)*((void *)this + 16);
          CFRange v33 = (char *)*((void *)this + 17);
          if (v33 != v34)
          {
            do
            {
              uint64_t v35 = *((void *)v33 - 1);
              v33 -= 8;
              *((void *)v30 - 1) = v35;
              v30 -= 8;
            }
            while (v33 != v34);
            CFRange v33 = (char *)*((void *)this + 16);
          }
          *((void *)this + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v30;
          *((void *)this + 17) = v18;
          *((void *)this + 18) = v32;
          if (v33)
          {
            operator delete(v33);
            uint64_t v18 = (char *)*((void *)this + 17);
          }
          goto LABEL_32;
        }
        bzero(v18, 8 * v25);
        v18 += 8 * v25;
      }
      *((void *)this + 17) = v18;
      goto LABEL_32;
    }
  }
  return result;
}

void AAAnalyzer::~AAAnalyzer(AAAnalyzer *this)
{
  AAAnalyzer::~AAAnalyzer(this);
  JUMPOUT(0x192FC8940);
}

{
  uint64_t v2;
  const void *v3;
  OpaqueAudioConverter *v4;
  OpaqueAudioFileID *v5;
  OpaqueAudioFileStreamID *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t vars8;

  *(void *)this = &unk_1EDF8C100;
  unsigned __int32 v2 = *((void *)this + 13);
  if (v2) {
    MEMORY[0x192FC8910](v2, 0x1000C80451B5BE8);
  }
  char v3 = (const void *)*((void *)this + 31);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (OpaqueAudioConverter *)*((void *)this + 15);
  if (v4) {
    AudioConverterDispose(v4);
  }
  int v5 = (OpaqueAudioFileID *)*((void *)this + 11);
  if (v5) {
    AudioFileClose(v5);
  }
  uint64_t v6 = (OpaqueAudioFileStreamID *)*((void *)this + 14);
  if (v6) {
    AudioFileStreamClose(v6);
  }
  uint64_t v8 = *((void *)this + 16);
  uint64_t v7 = *((void *)this + 17);
  if (v7 != v8)
  {
    int v9 = 0;
    long long v10 = 1;
    do
    {
      long long v11 = *(void *)(v8 + 8 * v9);
      if (v11)
      {
        MEMORY[0x192FC8910](v11, 0x1000C8077774924);
        uint64_t v8 = *((void *)this + 16);
        uint64_t v7 = *((void *)this + 17);
      }
      int v9 = v10++;
    }
    while (v9 < (v7 - v8) >> 3);
  }
  (*(void (**)(AAAnalyzer *))(*(void *)this + 96))(this);
  long long v12 = (void *)*((void *)this + 21);
  if (v12)
  {
    free(v12);
    *((void *)this + 21) = 0;
  }
  long long v13 = (void *)*((void *)this + 19);
  if (v13)
  {
    free(v13);
    *((void *)this + 19) = 0;
  }
  UInt32 v14 = (void *)*((void *)this + 16);
  if (v14)
  {
    *((void *)this + 17) = v14;
    operator delete(v14);
  }
  CFArrayRef v15 = (void *)*((void *)this + 8);
  if (v15)
  {
    *((void *)this + 9) = v15;
    operator delete(v15);
  }
  MEMORY[0x192FC7C80]((char *)this + 56);
  BaseOpaqueObject::~BaseOpaqueObject(this);
}

void ___ZN10AAAnalyzerC2EPK9__CFArrayPFvP19OpaqueAudioAnalyzerPK10__CFStringPK22AudioAnalysisFrameListPvP25AudioAnalyzerResultsFlagsESB_U13block_pointerFvS4_S7_SA_SD_E_block_invoke()
{
}

uint64_t AAAnalyzer::ACInputProc(AAAnalyzer *this, OpaqueAudioConverter *a2, unsigned int *__dst, AudioBufferList *a4, AudioStreamPacketDescription **a5, void *a6)
{
  int v6 = *((_DWORD *)a5 + 41);
  if (!v6) {
    return 5;
  }
  *(_DWORD *)a2 = v6;
  memcpy(__dst, a5[21], *((unsigned int *)a5 + 44));
  if (a4) {
    *(void *)&a4->uint64_t mNumberBuffers = a5[23];
  }
  uint64_t result = 0;
  *((_DWORD *)a5 + 41) = 0;
  return result;
}

uint64_t DSPGraph::Buffer::print(uint64_t result, void *a2, int a3, uint64_t a4)
{
  if (a3 >= 5)
  {
    int v4 = a4;
    (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)result + 32))(result, a2, a4, 1);
    DSPGraph::printi(a2, v4 + 4, "num buffers %u\n");
  }
  return result;
}

__n128 DSPGraph::Buffer::copyTimeFrom(DSPGraph::Buffer *this, DSPGraph::Buffer *a2)
{
  __n128 result = *(__n128 *)((char *)a2 + 8);
  long long v3 = *(_OWORD *)((char *)a2 + 24);
  long long v4 = *(_OWORD *)((char *)a2 + 40);
  *(_OWORD *)((char *)this + 5std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)this + 40) = v4;
  *(_OWORD *)((char *)this + 24) = v3;
  *(__n128 *)((char *)this + 8) = result;
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  return result;
}

DSPGraph::Buffer *DSPGraph::Buffer::copyFrom(DSPGraph::Buffer *this, DSPGraph::Buffer *a2)
{
  if (a2 != this)
  {
    unsigned __int32 v2 = this;
    long long v3 = (_DWORD *)*((void *)a2 + 10);
    long long v4 = (_DWORD *)*((void *)this + 10);
    if (*v3 != *v4)
    {
      std::string::basic_string[abi:ne180100]<0>(&v13, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Buffer.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v12, "copyFrom");
      std::string::basic_string[abi:ne180100]<0>(&v11, "Buffer::copyFrom, fromABL->mNumberBuffers != toABL->mNumberBuffers");
      DSPGraph::ThrowException(1718444833, &v13, 63, &v12, &v11);
    }
    unint64_t v5 = *((unsigned int *)this + 24);
    if (v5)
    {
      unint64_t v6 = 0;
      uint64_t v7 = (void **)(v4 + 4);
      uint64_t v8 = v3 + 3;
      do
      {
        size_t v9 = *v8;
        if (v9 > *((_DWORD *)v2 + 25))
        {
          std::string::basic_string[abi:ne180100]<0>(&v13, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Buffer.cpp");
          std::string::basic_string[abi:ne180100]<0>(&v12, "copyFrom");
          std::string::basic_string[abi:ne180100]<0>(&v11, "Buffer::copyFrom, fromABL->mBuffers[i].mDataByteSize > mByteCapacity");
          DSPGraph::ThrowException(1718444833, &v13, 68, &v12, &v11);
        }
        long long v10 = *(void **)(v8 + 1);
        this = (DSPGraph::Buffer *)*v7;
        if (v10 != *v7)
        {
          this = (DSPGraph::Buffer *)memcpy(this, v10, v9);
          LODWORD(v9) = *v8;
          unint64_t v5 = *((unsigned int *)v2 + 24);
        }
        *((_DWORD *)v7 - 1) = v9;
        ++v6;
        v7 += 2;
        v8 += 4;
      }
      while (v6 < v5);
    }
  }
  return this;
}

void sub_190111E5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

os_log_t ___ZN8DSPGraph6getLogEv_block_invoke_10379()
{
  os_log_t result = os_log_create("com.apple.coreaudio", "DSPGraph");
  DSPGraph::getLog(void)::gLog = (uint64_t)result;
  return result;
}

unsigned int **DSPGraph::Buffer::restoreSizeToCapacity(DSPGraph::Buffer *this)
{
  return DSPGraph::Buffer::setByteSize(this, *((_DWORD *)this + 25));
}

uint64_t LoudnessInfoDictionaryForISOLoudnessBox(const __CFData *a1, const __CFDictionary **a2)
{
  CFTypeID v5 = CFGetTypeID(a1);
  if (v5 != CFDataGetTypeID()) {
    return 4294967246;
  }
  CFIndex Length = CFDataGetLength(a1);
  BytePtr = (UInt8 *)CFDataGetBytePtr(a1);
  uint64_t v8 = 4294967246;
  if (BytePtr && Length >= 17)
  {
    size_t v9 = BytePtr;
    long long v10 = &BytePtr[Length];
    if ((BytePtr & 3) != 0)
    {
      int v11 = 0;
      char v12 = BytePtr ^ 3;
      long long v13 = BytePtr + 1;
      int v14 = 8 * ((BytePtr ^ 3) & 3) + 8;
      CFArrayRef v15 = BytePtr;
      do
      {
        if (v15 >= v10) {
          int v16 = 255;
        }
        else {
          int v16 = *v15;
        }
        int v11 = v16 | (v11 << 8);
        ++v15;
      }
      while ((v13++ & 3) != 0);
      uint64_t v18 = (unsigned int *)&BytePtr[(v12 & 3) + 1];
      int v19 = v11 << ((8 * (v12 & 3)) ^ 0x18);
    }
    else
    {
      int v19 = 0;
      int v14 = 0;
      uint64_t v18 = (unsigned int *)BytePtr;
    }
    uint64_t v122 = 0;
    uint64_t v123 = 0;
    unint64_t v124 = 0;
    uint64_t v119 = 0;
    uint64_t v120 = 0;
    unint64_t v121 = 0;
    uint64_t v20 = v10 - (const UInt8 *)v18;
    if (v14 + 8 * ((int)v10 - (int)v18) < 64)
    {
LABEL_217:
      v116 = 0;
      uint64_t v117 = 0;
      uint64_t v118 = 0;
      std::string __p = 0;
      uint64_t v112 = 0;
      uint64_t v113 = 0;
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      __int16 v109 = 257;
      uint64_t v106 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      __int16 v107 = 257;
      CFTypeRef cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      __int16 v105 = 257;
      BOOL CanonicalLoudness = FindCanonicalLoudness(v122, (uint64_t)v123, (uint64_t)&v114);
      BOOL v96 = FindCanonicalLoudness(v119, (uint64_t)v120, (uint64_t)v110);
      float v103 = 0.0;
      char v102 = 0;
      if (v96) {
        ExpandLoudnessBox((CACFDictionary *)&v106, (uint64_t)v110, &v103, &v102);
      }
      if (CanonicalLoudness)
      {
        ExpandLoudnessBox((CACFDictionary *)&Mutable, (uint64_t)&v114, &v103, &v102);
        if (CACFDictionary::Size((CACFDictionary *)&Mutable)) {
          CACFDictionary::AddDictionary((CACFDictionary *)&cf, @"main loudness parameters", Mutable);
        }
      }
      if (v96 && CACFDictionary::Size((CACFDictionary *)&v106)) {
        CACFDictionary::AddDictionary((CACFDictionary *)&cf, @"album loudness parameters", v106);
      }
      if (v102)
      {
        int64_t v100 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        __int16 v101 = 257;
        CACFDictionary::AddFloat32((CACFDictionary *)&v100, @"aa itu loudness", v103);
        CACFDictionary::AddDictionary((CACFDictionary *)&cf, @"dialogue anchor parameters", v100);
        CACFDictionary::~CACFDictionary((CACFDictionary *)&v100);
      }
      CACFDictionary::AddData((CACFDictionary *)&cf, @"ISO loudness box", a1);
      if (CACFDictionary::Size((CACFDictionary *)&cf) && cf)
      {
        CFRetain(cf);
        CFDictionaryRef v97 = (const __CFDictionary *)cf;
      }
      else
      {
        CFDictionaryRef v97 = 0;
      }
      *a2 = v97;
      CACFDictionary::~CACFDictionary((CACFDictionary *)&cf);
      CACFDictionary::~CACFDictionary((CACFDictionary *)&v106);
      CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
      if (__p)
      {
        uint64_t v112 = __p;
        operator delete(__p);
      }
      if (v116)
      {
        uint64_t v117 = v116;
        operator delete(v116);
      }
      uint64_t v8 = 0;
      goto LABEL_237;
    }
    int v99 = a2;
    while (1)
    {
      int v21 = v14 - 32;
      if (v14 - 32 >= 0) {
        break;
      }
      if (v9 <= (UInt8 *)v18 && (v20 & ~(v20 >> 63) & 0xFFFFFFFC) != 0)
      {
        unsigned int v23 = bswap32(*v18);
      }
      else
      {
        uint64_t v24 = 0;
        unsigned int v23 = v19;
        do
        {
          unint64_t v25 = (UInt8 *)v18 + v24;
          int v26 = 255;
          if ((char *)v18 + v24 < (char *)v10 && v25 >= v9) {
            int v26 = *v25;
          }
          unsigned int v23 = v26 | (v23 << 8);
          ++v24;
        }
        while (v24 != 4);
      }
      ++v18;
      v19 |= v23 >> v14;
      if (v14)
      {
        LODWORD(v8) = v23 << -(char)v14;
        int v22 = v14 - 32;
        int v21 = v14;
LABEL_28:
        int v14 = v22;
        if ((v22 & 0x80000000) == 0) {
          goto LABEL_45;
        }
        goto LABEL_31;
      }
      int v21 = 0;
      LODWORD(v8) = 0;
      LOBYTE(v22) = -32;
LABEL_31:
      if (((v10 - v18) & ~((v10 - (const UInt8 *)v18) >> 63) & 0xFFFFFFFC) != 0
        && v9 <= (UInt8 *)v18)
      {
        unsigned int v27 = bswap32(*v18);
      }
      else
      {
        uint64_t v28 = 0;
        unsigned int v27 = v8;
        do
        {
          __int16 v29 = (UInt8 *)v18 + v28;
          int v30 = 255;
          if ((char *)v18 + v28 < (char *)v10 && v29 >= v9) {
            int v30 = *v29;
          }
          unsigned int v27 = v30 | (v27 << 8);
          ++v28;
        }
        while (v28 != 4);
      }
      ++v18;
      LODWORD(v8) = (v27 >> v21) | v8;
      unsigned int v31 = v27 << -(char)v22;
      if (v21) {
        unsigned int v2 = v31;
      }
      else {
        unsigned int v2 = 0;
      }
      if (v21) {
        int v14 = v21;
      }
      else {
        int v14 = 0;
      }
LABEL_45:
      if (v8 != 1953263477 && v8 != 1634496373)
      {
        unsigned int v35 = v19 - v14;
        if (v19 > v14)
        {
          unsigned int v2 = 0;
          int v14 = 0;
          if (v35 < 0x20)
          {
            int v19 = v35;
          }
          else
          {
            uint64_t v18 = (unsigned int *)((char *)v18 + ((v35 >> 3) & 0x1FFFFFFC));
            int v19 = v35 & 0x1F;
          }
        }
        if ((v19 - 33) >= 0xFFFFFFE0)
        {
          v14 -= v19;
          if (v14 < 0)
          {
            if (((v10 - v18) & ~((v10 - (const UInt8 *)v18) >> 63) & 0xFFFFFFFC) != 0
              && v9 <= (UInt8 *)v18)
            {
              unsigned int v2 = bswap32(*v18);
            }
            else
            {
              uint64_t v92 = 0;
              do
              {
                uint64_t v93 = (UInt8 *)v18 + v92;
                int v94 = 255;
                if ((char *)v18 + v92 < (char *)v10 && v93 >= v9) {
                  int v94 = *v93;
                }
                unsigned int v2 = v94 | (v2 << 8);
                ++v92;
              }
              while (v92 != 4);
            }
            ++v18;
            if (v14 == -32) {
              unsigned int v2 = 0;
            }
            else {
              v2 <<= -(char)v14;
            }
            if (v14 == -32) {
              int v14 = 0;
            }
            else {
              v14 += 32;
            }
          }
          else
          {
            v2 <<= v19;
          }
        }
        goto LABEL_204;
      }
      uint64_t v114 = 0;
      v115 = 0;
      unsigned int v32 = HIBYTE(v2);
      v116 = 0;
      int v33 = v14 - 8;
      if (v14 - 8 < 0)
      {
        if (((v10 - v18) & ~((v10 - (const UInt8 *)v18) >> 63) & 0xFFFFFFFC) != 0
          && v9 <= (UInt8 *)v18)
        {
          unsigned int v2 = bswap32(*v18);
        }
        else
        {
          uint64_t v36 = 0;
          do
          {
            __int16 v37 = (UInt8 *)v18 + v36;
            int v38 = 255;
            if ((char *)v18 + v36 < (char *)v10 && v37 >= v9) {
              int v38 = *v37;
            }
            unsigned int v2 = v38 | (v2 << 8);
            ++v36;
          }
          while (v36 != 4);
        }
        ++v18;
        int v33 = v14 + 24;
        v32 |= v2 >> (v14 + 24);
        if (v14 == -24) {
          goto LABEL_67;
        }
        int v34 = v2 << (8 - v14);
      }
      else
      {
        int v34 = v2 << 8;
      }
      if (v33 > 23)
      {
        int v41 = 24;
        goto LABEL_73;
      }
LABEL_67:
      unsigned int v39 = 24 - v33;
      LODWORD(v40) = ((24 - v33) >> 3) & 0x1FFFFFFC;
      if (v39 >= 0x20) {
        uint64_t v40 = v40;
      }
      else {
        uint64_t v40 = 0;
      }
      uint64_t v18 = (unsigned int *)((char *)v18 + v40);
      int v41 = v39 & 0x1F;
      if ((v39 & 0x1F) == 0)
      {
        unsigned int v2 = 0;
        if (!v32)
        {
          char v52 = 1;
          int v14 = 0;
          goto LABEL_106;
        }
        unsigned int v43 = 0;
        int v14 = 0;
LABEL_90:
        if (((v10 - v18) & ~((v10 - (const UInt8 *)v18) >> 63) & 0xFFFFFFFC) != 0
          && v9 <= (UInt8 *)v18)
        {
          unsigned int v2 = bswap32(*v18);
        }
        else
        {
          uint64_t v49 = 0;
          do
          {
            int v50 = (UInt8 *)v18 + v49;
            int v51 = 255;
            if ((char *)v18 + v49 < (char *)v10 && v50 >= v9) {
              int v51 = *v50;
            }
            unsigned int v2 = v51 | (v2 << 8);
            ++v49;
          }
          while (v49 != 4);
        }
        int v44 = v14 + 24;
        v43 |= v2 >> (v14 + 24);
        ++v18;
        v2 <<= 8 - v14;
        goto LABEL_99;
      }
      int v33 = 0;
      int v34 = 0;
LABEL_73:
      int v42 = v33 - v41;
      if (v42 < 0)
      {
        if (((v10 - v18) & ~((v10 - (const UInt8 *)v18) >> 63) & 0xFFFFFFFC) == 0
          || v9 > (UInt8 *)v18)
        {
          uint64_t v46 = 0;
          do
          {
            unint64_t v47 = (UInt8 *)v18 + v46;
            int v48 = 255;
            if ((char *)v18 + v46 < (char *)v10 && v47 >= v9) {
              int v48 = *v47;
            }
            int v34 = v48 | (v34 << 8);
            ++v46;
          }
          while (v46 != 4);
        }
        else
        {
          int v34 = bswap32(*v18);
        }
        int v14 = v42 + 32;
        ++v18;
        unsigned int v2 = v34 << -(char)v42;
        if (!v32)
        {
LABEL_101:
          char v52 = 1;
LABEL_106:
          unsigned int v53 = 1;
          goto LABEL_107;
        }
      }
      else
      {
        unsigned int v2 = v34 << v41;
        int v14 = v42;
        if (!v32) {
          goto LABEL_101;
        }
      }
      unsigned int v43 = HIBYTE(v2);
      int v44 = v14 - 8;
      if (v14 < 8) {
        goto LABEL_90;
      }
      v2 <<= 8;
LABEL_99:
      char v52 = 0;
      unsigned int v53 = v43 & 0x3F;
      int v14 = v44;
LABEL_107:
      std::vector<ISOLoudnessInfo>::resize((char **)&v114, v53);
      AudioStreamPacketDescription v54 = v114;
      if (-858993459 * ((unint64_t)(v115 - (char *)v114) >> 3))
      {
        uint64_t v55 = 0;
        while (1)
        {
          if (v52)
          {
            char v56 = 0;
          }
          else
          {
            unsigned int v57 = HIBYTE(v2);
            if (v14 - 8 < 0)
            {
              if (((v10 - v18) & ~((v10 - (const UInt8 *)v18) >> 63) & 0xFFFFFFFC) == 0
                || v9 > (UInt8 *)v18)
              {
                uint64_t v59 = 0;
                do
                {
                  uint64_t v60 = (UInt8 *)v18 + v59;
                  int v61 = 255;
                  if ((char *)v18 + v59 < (char *)v10 && v60 >= v9) {
                    int v61 = *v60;
                  }
                  unsigned int v2 = v61 | (v2 << 8);
                  ++v59;
                }
                while (v59 != 4);
              }
              else
              {
                unsigned int v2 = bswap32(*v18);
              }
              ++v18;
              v57 |= v2 >> (v14 + 24);
              if (v14 == -24) {
                unsigned int v2 = 0;
              }
              else {
                v2 <<= 8 - v14;
              }
              if (v14 == -24) {
                int v14 = 0;
              }
              else {
                v14 += 24;
              }
            }
            else
            {
              v2 <<= 8;
              v14 -= 8;
            }
            char v56 = v57 & 0x3F;
          }
          LOBYTE(v54[5 * v55]) = v56;
          unsigned int v62 = v2 >> 4;
          int v63 = v14 - 28;
          if (v14 - 28 < 0)
          {
            if (((v10 - v18) & ~((v10 - (const UInt8 *)v18) >> 63) & 0xFFFFFFFC) != 0
              && v9 <= (UInt8 *)v18)
            {
              unsigned int v2 = bswap32(*v18);
            }
            else
            {
              uint64_t v65 = 0;
              do
              {
                unsigned int v66 = (UInt8 *)v18 + v65;
                int v67 = 255;
                if ((char *)v18 + v65 < (char *)v10 && v66 >= v9) {
                  int v67 = *v66;
                }
                unsigned int v2 = v67 | (v2 << 8);
                ++v65;
              }
              while (v65 != 4);
            }
            ++v18;
            v62 |= v2 >> (v14 + 4);
            unsigned int v64 = v14 == -4 ? 0 : v2 << (28 - v14);
            int v63 = v14 == -4 ? 0 : v14 + 4;
          }
          else
          {
            unsigned int v64 = v2 << 28;
          }
          uint64_t v68 = &v54[5 * v55];
          *((unsigned char *)v68 + 1) = (v62 >> 18) & 0x7F;
          *((unsigned char *)v68 + 2) = (v62 >> 12) & 0x3F;
          __int16 v69 = (v62 & 0x800) != 0 ? v62 | 0xF000 : v62 & 0xFFF;
          *((_WORD *)v68 + 2) = v69;
          unsigned int v70 = v64 >> 4;
          int v14 = v63 - 28;
          if (v63 - 28 < 0)
          {
            if (((v10 - v18) & ~((v10 - (const UInt8 *)v18) >> 63) & 0xFFFFFFFC) != 0
              && v9 <= (UInt8 *)v18)
            {
              unsigned int v64 = bswap32(*v18);
            }
            else
            {
              uint64_t v71 = 0;
              do
              {
                uint64_t v72 = (UInt8 *)v18 + v71;
                int v73 = 255;
                if ((char *)v18 + v71 < (char *)v10 && v72 >= v9) {
                  int v73 = *v72;
                }
                unsigned int v64 = v73 | (v64 << 8);
                ++v71;
              }
              while (v71 != 4);
            }
            unsigned int v74 = v64 << (28 - v63);
            int v75 = v63 + 4;
            ++v18;
            v70 |= v64 >> v75;
            unsigned int v2 = v75 ? v74 : 0;
            int v14 = v75 ? v75 : 0;
          }
          else
          {
            unsigned int v2 = v64 << 28;
          }
          int v76 = HIWORD(v70) | 0xF000;
          if ((v70 & 0x8000000) == 0) {
            LOWORD(v7std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = HIWORD(v70) & 0xFFF;
          }
          int v77 = &v54[5 * v55];
          *((_WORD *)v77 + 3) = v76;
          unsigned int v78 = (unsigned __int16)v70 >> 12;
          *((unsigned char *)v77 + 8) = v78;
          if (v78 > 0xB) {
            break;
          }
          BYTE1(v54[5 * v55 + 1]) = BYTE1(v70) & 0xF;
          if (((v70 >> 8) & 0xF) > 3) {
            break;
          }
          unint64_t v79 = &v54[5 * v55];
          *((unsigned char *)v79 + 10) = v70;
          std::vector<LoudnessMethod>::resize((char **)v79 + 2, v70);
          AudioStreamPacketDescription v54 = v114;
          uint64_t v80 = v114[5 * v55 + 2];
          unint64_t v81 = v114[5 * v55 + 3] - v80;
          if ((v81 & 0x3FFFFFFFCLL) != 0)
          {
            uint64_t v82 = 0;
            uint64_t v83 = (v81 >> 2);
            do
            {
              unsigned int v84 = v2 >> 8;
              if (v14 - 24 < 0)
              {
                if (((v10 - v18) & ~((v10 - (const UInt8 *)v18) >> 63) & 0xFFFFFFFC) == 0
                  || v9 > (UInt8 *)v18)
                {
                  uint64_t v86 = 0;
                  do
                  {
                    uint64_t v87 = (UInt8 *)v18 + v86;
                    int v88 = 255;
                    if ((char *)v18 + v86 < (char *)v10 && v87 >= v9) {
                      int v88 = *v87;
                    }
                    unsigned int v2 = v88 | (v2 << 8);
                    ++v86;
                  }
                  while (v86 != 4);
                }
                else
                {
                  unsigned int v2 = bswap32(*v18);
                }
                ++v18;
                v84 |= v2 >> (v14 + 8);
                if (v14 == -8) {
                  unsigned int v2 = 0;
                }
                else {
                  v2 <<= 24 - v14;
                }
                if (v14 == -8) {
                  int v14 = 0;
                }
                else {
                  v14 += 8;
                }
              }
              else
              {
                v2 <<= 24;
                v14 -= 24;
              }
              *(unsigned char *)(v80 + 4 * v82) = BYTE2(v84);
              if (BYTE2(v84) > 9u) {
                goto LABEL_230;
              }
              int v89 = (unsigned char *)(v80 + 4 * v82);
              v89[1] = BYTE1(v84);
              v89[2] = v84 >> 4;
              if (v84 > 0xBFu) {
                goto LABEL_230;
              }
              v89[3] = v84 & 0xF;
              if ((v84 & 0xF) > 3) {
                goto LABEL_230;
              }
            }
            while (++v82 != v83);
          }
          if (++v55 >= (unint64_t)(-858993459 * ((unint64_t)(v115 - (char *)v54) >> 3))) {
            goto LABEL_194;
          }
        }
LABEL_230:
        v110[0] = (void **)&v114;
        std::vector<ISOLoudnessInfo>::__destroy_vector::operator()[abi:ne180100](v110);
        uint64_t v8 = 4294967246;
LABEL_237:
        uint64_t v114 = &v119;
        std::vector<ISOLoudnessInfoBox>::__destroy_vector::operator()[abi:ne180100]((void ***)&v114);
        uint64_t v114 = &v122;
        std::vector<ISOLoudnessInfoBox>::__destroy_vector::operator()[abi:ne180100]((void ***)&v114);
        return v8;
      }
LABEL_194:
      if (v8 == 1953263477)
      {
        uint64_t v8 = (uint64_t)v123;
        a2 = v99;
        if ((unint64_t)v123 >= v124)
        {
          int v90 = (void *)std::vector<ISOLoudnessInfoBox>::__emplace_back_slow_path<ISOLoudnessInfoBox&>(&v122, &v114);
        }
        else
        {
          *uint64_t v123 = 0;
          *(void *)(v8 + 8) = 0;
          *(void *)(v8 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
          std::vector<ISOLoudnessInfo>::__init_with_size[abi:ne180100]<ISOLoudnessInfo*,ISOLoudnessInfo*>(v8, v114, (uint64_t *)v115, 0xCCCCCCCCCCCCCCCDLL * ((v115 - (char *)v114) >> 3));
          int v90 = (void *)(v8 + 24);
        }
        uint64_t v123 = v90;
      }
      else
      {
        uint64_t v8 = (uint64_t)v120;
        a2 = v99;
        if ((unint64_t)v120 >= v121)
        {
          uint64_t v91 = (void *)std::vector<ISOLoudnessInfoBox>::__emplace_back_slow_path<ISOLoudnessInfoBox&>(&v119, &v114);
        }
        else
        {
          *uint64_t v120 = 0;
          *(void *)(v8 + 8) = 0;
          *(void *)(v8 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
          std::vector<ISOLoudnessInfo>::__init_with_size[abi:ne180100]<ISOLoudnessInfo*,ISOLoudnessInfo*>(v8, v114, (uint64_t *)v115, 0xCCCCCCCCCCCCCCCDLL * ((v115 - (char *)v114) >> 3));
          uint64_t v91 = (void *)(v8 + 24);
        }
        uint64_t v120 = v91;
      }
      v110[0] = (void **)&v114;
      std::vector<ISOLoudnessInfo>::__destroy_vector::operator()[abi:ne180100](v110);
LABEL_204:
      uint64_t v20 = v10 - (const UInt8 *)v18;
      int v19 = v2;
      if (v14 + 8 * ((int)v10 - (int)v18) <= 63) {
        goto LABEL_217;
      }
    }
    int v22 = v14 - 64;
    goto LABEL_28;
  }
  return v8;
}

void sub_190112B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t *a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  *(void *)(v29 - 128) = v28;
  a20 = &a25;
  std::vector<ISOLoudnessInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  a25 = v29 - 136;
  std::vector<ISOLoudnessInfoBox>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  a25 = v29 - 112;
  std::vector<ISOLoudnessInfoBox>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  _Unwind_Resume(a1);
}

uint64_t std::vector<ISOLoudnessInfo>::__init_with_size[abi:ne180100]<ISOLoudnessInfo*,ISOLoudnessInfo*>(uint64_t result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0x666666666666667) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = (void *)result;
    uint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ISOLoudnessInfo>>(a4);
    uint64_t v8 = v7;
    *unint64_t v6 = v7;
    v6[1] = v7;
    v6[2] = &v7[40 * v9];
    uint64_t v18 = v7;
    int v19 = v7;
    v16[0] = v6 + 2;
    v16[1] = &v18;
    v16[2] = &v19;
    char v17 = 0;
    if (a2 != a3)
    {
      long long v10 = v7;
      do
      {
        uint64_t v11 = *a2;
        *(_DWORD *)(v10 + 7) = *(_DWORD *)((char *)a2 + 7);
        *((void *)v10 + 2) = 0;
        *(void *)long long v10 = v11;
        *((void *)v10 + 3) = 0;
        *((void *)v10 + 4) = 0;
        long long v13 = (unsigned char *)a2[2];
        char v12 = (unsigned char *)a2[3];
        int64_t v14 = v12 - v13;
        if (v12 != v13)
        {
          std::vector<float>::__vallocate[abi:ne180100]((void *)v10 + 2, v14 >> 2);
          CFArrayRef v15 = (char *)*((void *)v10 + 3);
          memmove(v15, v13, v14);
          *((void *)v10 + 3) = &v15[4 * (v14 >> 2)];
          long long v10 = v19;
        }
        v10 += 40;
        int v19 = v10;
        a2 += 5;
      }
      while (a2 != a3);
      uint64_t v8 = v10;
    }
    char v17 = 1;
    os_log_t result = std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ISOLoudnessInfo>,ISOLoudnessInfo*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
    v6[1] = v8;
  }
  return result;
}

void sub_190112D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t std::vector<ISOLoudnessInfoBox>::__emplace_back_slow_path<ISOLoudnessInfoBox&>(uint64_t *a1, uint64_t **a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v3;
  }
  uint64_t v20 = a1 + 2;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[24 * v2];
  char v17 = v7;
  v18.i64[0] = (uint64_t)v8;
  v18.i64[1] = (uint64_t)v8;
  int v19 = &v7[24 * v6];
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)uint64_t v8 = 0;
  std::vector<ISOLoudnessInfo>::__init_with_size[abi:ne180100]<ISOLoudnessInfo*,ISOLoudnessInfo*>((uint64_t)v8, *a2, a2[1], 0xCCCCCCCCCCCCCCCDLL * (a2[1] - *a2));
  uint64_t v9 = v18.i64[0];
  uint64_t v10 = v18.i64[1] + 24;
  v18.i64[1] += 24;
  char v12 = (void *)*a1;
  uint64_t v11 = (void *)a1[1];
  if (v11 == (void *)*a1)
  {
    int64x2_t v14 = vdupq_n_s64((unint64_t)v11);
  }
  else
  {
    do
    {
      *(void *)(v9 - 24) = 0;
      *(void *)(v9 - 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
      v9 -= 24;
      *(void *)(v9 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
      long long v13 = *(_OWORD *)(v11 - 3);
      v11 -= 3;
      *(_OWORD *)uint64_t v9 = v13;
      *(void *)(v9 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v11[2];
      *uint64_t v11 = 0;
      v11[1] = 0;
      v11[2] = 0;
    }
    while (v11 != v12);
    int64x2_t v14 = *(int64x2_t *)a1;
    uint64_t v10 = v18.i64[1];
  }
  *a1 = v9;
  a1[1] = v10;
  int64x2_t v18 = v14;
  CFArrayRef v15 = (char *)a1[2];
  a1[2] = (uint64_t)v19;
  int v19 = v15;
  char v17 = (char *)v14.i64[0];
  std::__split_buffer<ISOLoudnessInfoBox>::~__split_buffer((uint64_t)&v17);
  return v10;
}

void sub_190112ECC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<ISOLoudnessInfoBox>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<ISOLoudnessInfoBox>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    long long v4 = (void **)(i - 24);
    *(void *)(a1 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v4;
    unint64_t v6 = v4;
    std::vector<ISOLoudnessInfo>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ISOLoudnessInfo>,ISOLoudnessInfo*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      CFTypeID v5 = *(void **)(v3 - 24);
      if (v5)
      {
        *(void *)(v3 - 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v5;
        operator delete(v5);
      }
      v3 -= 40;
    }
  }
  return a1;
}

uint64_t ISOLoudnessBoxForLoudnessInfoDictionary(const __CFDictionary *a1, const __CFData **a2)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef theDict = 0;
  if (!CFDictionaryContainsKey(a1, @"ISO loudness box"))
  {
    unsigned int v38 = 0;
    CFDictionaryRef v36 = a1;
    __int16 v37 = 0;
    memset(&v35, 0, sizeof(v35));
    int v12 = LoudnessMethodsCountFromLID((const CACFDictionary *)&v36, &v38);
    unsigned int v13 = v38;
    if (v38 > 0xFF)
    {
      uint64_t v5 = 4294967246;
LABEL_55:
      CACFDictionary::~CACFDictionary((CACFDictionary *)&v36);
      goto LABEL_61;
    }
    int v14 = v12;
    int v15 = 3 * v12;
    unsigned int v16 = 3 * v12 + 21;
    if (v12) {
      int v17 = 3 * v12 + 21;
    }
    else {
      int v17 = 0;
    }
    unsigned int v18 = 3 * v38 + 21;
    if (v38)
    {
      unsigned int v19 = 3 * v38 + 9;
    }
    else
    {
      unsigned int v18 = 0;
      unsigned int v19 = 0;
    }
    CFIndex v20 = v18 + v17;
    if (!v20)
    {
      uint64_t v5 = 4294967246;
      goto LABEL_53;
    }
    std::vector<unsigned char>::__append(&v35, v18 + v17);
    std::vector<char>::pointer begin = v35.__begin_;
    if (v14)
    {
      *(void *)int v44 = v35.__begin_;
      *(void *)&v44[8] = v35.__begin_;
      *(void *)&v44[16] = &v35.__begin_[v15 + 9];
      uint64_t v45 = 0x2000000000;
      int v46 = (uint64_t)v35.__begin_ & 3;
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)v44, v15 + 21, 0x20u);
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)v44, 1953263477, 0x20u);
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)v44, 1, 8u);
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)v44, 0, 0x18u);
      AT::TBitstreamWriter<unsigned int>::Flush((uint64_t)v44);
      uint64_t v5 = SerializeTrackLoudnessData(a1, (unsigned __int8 *)begin + 12, v14, v15 + 9, 0);
      if (v5)
      {
        int v22 = CADefaultLog();
        if (v22)
        {
          unsigned int v23 = v22;
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioFormatInfo buf = 136315394;
            int v41 = "AudioFormatISOLoudnessBox.cpp";
            __int16 v42 = 1024;
            int v43 = 251;
            _os_log_impl(&dword_18FEC0000, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d AudioFormat: SerializeTrackLoudnessData failed for track loudness\n", buf, 0x12u);
          }
        }
        goto LABEL_53;
      }
      std::vector<char>::pointer begin = v35.__begin_;
      LOWORD(v13) = v38;
      if (!v38) {
        goto LABEL_52;
      }
    }
    else
    {
      unsigned int v16 = 0;
      if (!v13)
      {
LABEL_52:
        uint64_t v5 = 0;
        *a2 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)begin, v20);
LABEL_53:
        if (v35.__begin_) {
          operator delete(v35.__begin_);
        }
        goto LABEL_55;
      }
    }
    *(void *)int v44 = &begin[v16];
    *(void *)&v44[8] = *(void *)v44;
    *(void *)&v44[16] = *(void *)v44 + v19;
    uint64_t v45 = 0x2000000000;
    int v46 = v44[0] & 3;
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)v44, v19 + 12, 0x20u);
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)v44, 1634496373, 0x20u);
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)v44, 1, 8u);
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)v44, 0, 0x18u);
    AT::TBitstreamWriter<unsigned int>::Flush((uint64_t)v44);
    if (SerializeTrackLoudnessData(a1, (unsigned __int8 *)&begin[v16 + 12], v13, v19, 1))
    {
      uint64_t v29 = CADefaultLog();
      if (v29)
      {
        int v30 = v29;
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioFormatInfo buf = 136315394;
          int v41 = "AudioFormatISOLoudnessBox.cpp";
          __int16 v42 = 1024;
          int v43 = 266;
          _os_log_impl(&dword_18FEC0000, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d AudioFormat: SerializeTrackLoudnessData failed for album loudness\n", buf, 0x12u);
        }
      }
      uint64_t v5 = 1;
      goto LABEL_53;
    }
    std::vector<char>::pointer begin = v35.__begin_;
    goto LABEL_52;
  }
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue(a1, @"ISO loudness box");
  uint64_t v5 = LoudnessInfoDictionaryForISOLoudnessBox(Value, &theDict);
  if (v5) {
    return v5;
  }
  if (CFDictionaryContainsKey(a1, @"main loudness parameters"))
  {
    if (!CFDictionaryContainsKey(a1, @"main loudness parameters"))
    {
      uint64_t v24 = CADefaultLog();
      if (!v24) {
        goto LABEL_60;
      }
      unint64_t v25 = v24;
      if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
        goto LABEL_60;
      }
      *(_DWORD *)int v44 = 136315394;
      *(void *)&v44[4] = "AudioFormatISOLoudnessBox.cpp";
      *(_WORD *)&v44[12] = 1024;
      *(_DWORD *)&v44[14] = 167;
      int v26 = "%25s:%-5d AudioFormat: LID inconsistency, dictionary has kLoudnessInfoDictionary_MainLoudnessParametersKey, "
            "but not ISOLoudnessBox\n";
      goto LABEL_59;
    }
    unint64_t v6 = CFDictionaryGetValue(a1, @"main loudness parameters");
    uint64_t v7 = CFDictionaryGetValue(theDict, @"main loudness parameters");
    if (!CFEqual(v6, v7))
    {
      unsigned int v27 = CADefaultLog();
      if (!v27) {
        goto LABEL_60;
      }
      unint64_t v25 = v27;
      if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
        goto LABEL_60;
      }
      *(_DWORD *)int v44 = 136315394;
      *(void *)&v44[4] = "AudioFormatISOLoudnessBox.cpp";
      *(_WORD *)&v44[12] = 1024;
      *(_DWORD *)&v44[14] = 174;
      int v26 = "%25s:%-5d AudioFormat: LID inconsistency, main loudness parameters mismatch\n";
      goto LABEL_59;
    }
  }
  if (CFDictionaryContainsKey(a1, @"album loudness parameters"))
  {
    if (!CFDictionaryContainsKey(a1, @"album loudness parameters"))
    {
      uint64_t v28 = CADefaultLog();
      if (!v28) {
        goto LABEL_60;
      }
      unint64_t v25 = v28;
      if (!os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
        goto LABEL_60;
      }
      *(_DWORD *)int v44 = 136315394;
      *(void *)&v44[4] = "AudioFormatISOLoudnessBox.cpp";
      *(_WORD *)&v44[12] = 1024;
      *(_DWORD *)&v44[14] = 182;
      int v26 = "%25s:%-5d AudioFormat: LID inconsistency, dictionary has kLoudnessInfoDictionary_AlbumLoudnessParametersKey,"
            " but not ISOLoudnessBox\n";
      goto LABEL_59;
    }
    uint64_t v8 = CFDictionaryGetValue(a1, @"album loudness parameters");
    uint64_t v9 = CFDictionaryGetValue(theDict, @"album loudness parameters");
    if (!CFEqual(v8, v9))
    {
      unsigned int v31 = CADefaultLog();
      if (!v31) {
        goto LABEL_60;
      }
      unint64_t v25 = v31;
      if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
        goto LABEL_60;
      }
      *(_DWORD *)int v44 = 136315394;
      *(void *)&v44[4] = "AudioFormatISOLoudnessBox.cpp";
      *(_WORD *)&v44[12] = 1024;
      *(_DWORD *)&v44[14] = 189;
      int v26 = "%25s:%-5d AudioFormat: LID inconsistency, album loudness parameters mismatch\n";
      goto LABEL_59;
    }
  }
  if (!CFDictionaryContainsKey(a1, @"dialogue anchor parameters"))
  {
LABEL_12:
    uint64_t v5 = 0;
    *a2 = CFDataCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Value);
    goto LABEL_61;
  }
  if (CFDictionaryContainsKey(a1, @"dialogue anchor parameters"))
  {
    uint64_t v10 = CFDictionaryGetValue(a1, @"dialogue anchor parameters");
    uint64_t v11 = CFDictionaryGetValue(theDict, @"dialogue anchor parameters");
    if (CFEqual(v10, v11)) {
      goto LABEL_12;
    }
    int v33 = CADefaultLog();
    if (!v33) {
      goto LABEL_60;
    }
    unint64_t v25 = v33;
    if (!os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
      goto LABEL_60;
    }
    *(_DWORD *)int v44 = 136315394;
    *(void *)&v44[4] = "AudioFormatISOLoudnessBox.cpp";
    *(_WORD *)&v44[12] = 1024;
    *(_DWORD *)&v44[14] = 204;
    int v26 = "%25s:%-5d AudioFormat: LID inconsistency, dialogue anchor parameters mismatch\n";
  }
  else
  {
    unsigned int v32 = CADefaultLog();
    if (!v32) {
      goto LABEL_60;
    }
    unint64_t v25 = v32;
    if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
      goto LABEL_60;
    }
    *(_DWORD *)int v44 = 136315394;
    *(void *)&v44[4] = "AudioFormatISOLoudnessBox.cpp";
    *(_WORD *)&v44[12] = 1024;
    *(_DWORD *)&v44[14] = 197;
    int v26 = "%25s:%-5d AudioFormat: LID inconsistency, dictionary has kLoudnessInfoDictionary_DialogueAnchorParametersKey, "
          "but not ISOLoudnessBox\n";
  }
LABEL_59:
  _os_log_impl(&dword_18FEC0000, v25, OS_LOG_TYPE_ERROR, v26, v44, 0x12u);
LABEL_60:
  uint64_t v5 = 4294967246;
LABEL_61:
  if (theDict) {
    CFRelease(theDict);
  }
  return v5;
}

void sub_190113664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&a13);
  _Unwind_Resume(a1);
}

void getValidationCapsuleVersion(void)
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v0 = (void (*)(void))getvalidationCapsuleVersionSymbolLoc(void)::ptr;
  uint64_t v7 = getvalidationCapsuleVersionSymbolLoc(void)::ptr;
  if (!getvalidationCapsuleVersionSymbolLoc(void)::ptr)
  {
    uint64_t v1 = ValidationCapsuleLibrary();
    _OWORD v5[3] = (uint64_t)dlsym(v1, "validationCapsuleVersion");
    getvalidationCapsuleVersionSymbolLoc(void)::ptr = (_UNKNOWN *)v5[3];
    uint64_t v0 = (void (*)(void))v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (v0)
  {
    v0();
  }
  else
  {
    unint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"UInt32 validation_validationCapsuleVersion()"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"AudioComponentValidation.mm", 83, @"%s", dlerror());

    __break(1u);
  }
}

void sub_1901137EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *___ZL36getvalidationCapsuleVersionSymbolLocv_block_invoke(uint64_t a1)
{
  unint64_t v2 = ValidationCapsuleLibrary();
  os_log_t result = dlsym(v2, "validationCapsuleVersion");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getvalidationCapsuleVersionSymbolLoc(void)::ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *ValidationCapsuleLibrary(void)
{
  uint64_t v5 = 0;
  uint64_t v0 = ValidationCapsuleLibraryCore(&v5);
  if (!v0)
  {
    uint64_t v1 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *ValidationCapsuleLibrary()"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v4, @"AudioComponentValidation.mm", 68, @"%s", v5);

    __break(1u);
    goto LABEL_5;
  }
  uint64_t v1 = (void *)v0;
  unint64_t v2 = v5;
  if (v5) {
LABEL_5:
  }
    free(v2);
  return v1;
}

void sub_190113924(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ValidationCapsuleLibraryCore(char **a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v1 = ValidationCapsuleLibraryCore(char **)::frameworkLibrary;
  uint64_t v6 = ValidationCapsuleLibraryCore(char **)::frameworkLibrary;
  if (!ValidationCapsuleLibraryCore(char **)::frameworkLibrary)
  {
    long long v7 = xmmword_1E5688468;
    v4[3] = _sl_dlopen();
    ValidationCapsuleLibraryCore(char **)::frameworkLibrary = v4[3];
    uint64_t v1 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v1;
}

void sub_190113A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZL28ValidationCapsuleLibraryCorePPc_block_invoke(uint64_t a1)
{
  uint64_t result = _sl_dlopen();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  ValidationCapsuleLibraryCore(char **)::frameworkLibrary = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void validateComponent(long long *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  id v7 = a4;
  uint64_t v8 = (void (**)(void, void, void))v7;
  if (*((_WORD *)a1 + 1) != 24949)
  {
    uint64_t v15 = 1;
LABEL_12:
    (*((void (**)(id, uint64_t, void))v7 + 2))(v7, v15, 0);
    goto LABEL_13;
  }
  if (!*((_DWORD *)a1 + 1) || !*((_DWORD *)a1 + 2))
  {
    uint64_t v15 = 0;
    goto LABEL_12;
  }
  if (a3)
  {
    uint64_t v9 = (void *)[a3 mutableCopy];
    v72[4] = 0;
    *(_DWORD *)&v72[17] = 0x1000000;
    *(void *)&v72[8] = 0;
    *(_WORD *)&v72[21] = 1;
    *(void *)&v72[24] = 0;
    uint64_t v73 = 0x100000000;
    v72[16] = 1;
    uint64_t v10 = [v9 objectForKeyedSubscript:@"arch"];
    if ([v10 isEqualToString:@"x86_64"]) {
      int v11 = 16777223;
    }
    else {
      int v11 = 16777228;
    }
    *(_DWORD *)uint64_t v72 = v11;

    int v12 = [v9 objectForKeyedSubscript:@"ForceValidation"];
    unsigned int v13 = v12;
    if (v12)
    {
      int v14 = [v12 BOOLValue];
      v72[4] = v14;
    }
    else
    {
      int v14 = 0;
    }

    unsigned int v19 = [v9 objectForKeyedSubscript:@"TimeOut"];
    CFIndex v20 = v19;
    if (v19)
    {
      [v19 doubleValue];
      double v18 = v21;
      *(double *)&v72[8] = v21;
    }
    else
    {
      double v18 = 0.0;
    }

    int v22 = [v9 objectForKey:@"LoadOutOfProcess"];
    if (v22)
    {
      unsigned int v23 = [v9 objectForKeyedSubscript:@"LoadOutOfProcess"];
      unsigned int v16 = [v23 BOOLValue];
      LOBYTE(v73) = v16;
    }
    else
    {
      unsigned int v16 = 0;
      LOBYTE(v73) = 0;
    }

    uint64_t v24 = [v9 objectForKeyedSubscript:@"StressTest"];
    unint64_t v25 = v24;
    if (v24)
    {
      [v24 doubleValue];
      *(void *)&v72[24] = v26;
    }

    unsigned int v27 = [v9 objectForKeyedSubscript:@"TerminateOnFirstError"];
    uint64_t v28 = v27;
    if (v27) {
      v72[16] = [v27 BOOLValue];
    }

    uint64_t v29 = [v9 objectForKeyedSubscript:@"TerminateOnFirstWarning"];
    int v30 = v29;
    if (v29) {
      v72[17] = [v29 BOOLValue];
    }

    unsigned int v31 = [v9 objectForKeyedSubscript:@"SkipUIComponentTests"];
    unsigned int v32 = v31;
    if (v31) {
      BYTE3(v73) = [v31 BOOLValue];
    }

    int v33 = [v9 objectForKeyedSubscript:@"Repeats"];
    int v34 = v33;
    if (v33)
    {
      int v17 = [v33 intValue];
      HIDWORD(v73) = v17;
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    unsigned int v16 = 0;
    int v14 = 0;
    int v11 = 16777228;
    *(_DWORD *)uint64_t v72 = 16777228;
    v72[4] = 0;
    *(void *)&v72[8] = 0;
    *(void *)&v72[13] = 0;
    int v17 = 1;
    *(_WORD *)&v72[21] = 1;
    double v18 = 0.0;
    *(void *)&v72[24] = 0;
    uint64_t v73 = 0x100000000;
  }
  getValidationCapsuleVersion();
  int v36 = v35;
  if (!v14)
  {
    __int16 v37 = getValidationResultFromCache((const AudioComponentDescription *)a1, v11, a2, v35, v16);
    unsigned int v38 = v37;
    if (v37)
    {
      unsigned int v39 = (void *)[v37 mutableCopy];
      uint64_t v40 = [MEMORY[0x1E4F28ED0] numberWithBool:1];
      [v39 setObject:v40 forKeyedSubscript:@"WasCached"];

      int v41 = [v39 objectForKeyedSubscript:@"Result"];
      uint64_t v42 = [v41 unsignedIntValue];

      if (v42)
      {
        ((void (**)(void, uint64_t, void *))v8)[2](v8, v42, v39);

        goto LABEL_13;
      }
    }
  }
  if (*((_DWORD *)a1 + 2) != 1634758764) {
    LOBYTE(v73) = 1;
  }
  if (v18 == 0.0)
  {
    *(void *)&v72[8] = 0x4082C00000000000;
    double v18 = 600.0;
  }
  v70[0] = 0;
  v70[1] = v70;
  _OWORD v70[2] = 0x2020000000;
  int v71 = v17;
  v68[0] = 0;
  v68[1] = v68;
  v68[2] = 0x3032000000;
  _DWORD v68[3] = __Block_byref_object_copy__10422;
  v68[4] = __Block_byref_object_dispose__10423;
  id v69 = (id)[MEMORY[0x1E4F1CBF0] mutableCopy];
  uint64_t v62 = 0;
  int v63 = (id *)&v62;
  uint64_t v64 = 0x3042000000;
  uint64_t v65 = __Block_byref_object_copy__4;
  unsigned int v66 = __Block_byref_object_dispose__5;
  id v67 = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = ___Z17validateComponent25AudioComponentDescriptionjPK14__CFDictionaryU13block_pointerFv30AudioComponentValidationResultS2_E_block_invoke;
  aBlock[3] = &unk_1E5688448;
  char v52 = v70;
  unsigned int v53 = v68;
  long long v58 = *a1;
  int v43 = *((_DWORD *)a1 + 4);
  uint64_t v57 = v73;
  long long v55 = *(_OWORD *)v72;
  long long v56 = *(_OWORD *)&v72[16];
  AudioStreamPacketDescription v54 = &v62;
  int v59 = v43;
  int v60 = a2;
  int v61 = v36;
  id v44 = v8;
  id v51 = v44;
  uint64_t v45 = _Block_copy(aBlock);
  objc_storeWeak(v63 + 5, v45);
  if (ValidationCapsuleLibraryCore(0) && getvalidateWithParametersAsyncSymbolLoc())
  {
    long long v48 = *a1;
    int v49 = *((_DWORD *)a1 + 4);
    validation_validateWithParametersAsync(&v48, (uint64_t)&v72[16], v45, v18);
  }
  else
  {
    if (!gAudioComponentLogCategory) {
      operator new();
    }
    int v46 = *(id *)gAudioComponentLogCategory;
    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioFormatInfo buf = 136315394;
      int v75 = "AudioComponentValidation.mm";
      __int16 v76 = 1024;
      int v77 = 237;
      _os_log_impl(&dword_18FEC0000, v46, OS_LOG_TYPE_ERROR, "%25s:%-5d validateWithParametersAsync not available", buf, 0x12u);
    }
    (*((void (**)(id, void, void))v44 + 2))(v44, 0, 0);
  }
  _Block_object_dispose(&v62, 8);
  objc_destroyWeak(&v67);

  _Block_object_dispose(v68, 8);
  _Block_object_dispose(v70, 8);
LABEL_13:
}

void sub_1901141B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,id a41)
{
  _Block_object_dispose(&a30, 8);
  objc_destroyWeak(v43);

  _Block_object_dispose(&a36, 8);
  _Block_object_dispose((const void *)(v44 - 216), 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__10422(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__10423(uint64_t a1)
{
}

void __Block_byref_object_copy__4(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
}

void ___Z17validateComponent25AudioComponentDescriptionjPK14__CFDictionaryU13block_pointerFv30AudioComponentValidationResultS2_E_block_invoke(uint64_t a1, int a2, __CFDictionary *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (a2 != 3)
  {
    if (a2 == 1)
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
      int v6 = *(_DWORD *)(v5 + 24);
      *(_DWORD *)(v5 + 24) = v6 - 1;
      if (v6 >= 2)
      {
        if (!gAudioComponentLogCategory) {
          operator new();
        }
        uint64_t v10 = *(id *)gAudioComponentLogCategory;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        {
          int v12 = *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
          *(_DWORD *)AudioFormatInfo buf = 136315650;
          unsigned int v19 = "AudioComponentValidation.mm";
          __int16 v20 = 1024;
          int v21 = 204;
          __int16 v22 = 1024;
          LODWORD(v23) = v12;
          _os_log_impl(&dword_18FEC0000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d Repeated validations: %d", buf, 0x18u);
        }
        unsigned int v13 = [(__CFDictionary *)a3 objectForKeyedSubscript:@"Output"];
        if (v13) {
          [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) addObject:v13];
        }

        long long v16 = *(_OWORD *)(a1 + 104);
        int v17 = *(_DWORD *)(a1 + 120);
        double v14 = *(double *)(a1 + 72);
        id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40));
        validation_validateWithParametersAsync(&v16, a1 + 80, WeakRetained, v14);

        return;
      }
    }
    writeValidationResultToCache((const AudioComponentDescription *)(a1 + 104), *(_DWORD *)(a1 + 64), *(unsigned int *)(a1 + 124), *(unsigned int *)(a1 + 128), *(unsigned __int8 *)(a1 + 96), a3);
  }
  if (*(_DWORD *)(a1 + 100) != 1 && [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) count])
  {
    if (!gAudioComponentLogCategory) {
      operator new();
    }
    id v7 = *(id *)gAudioComponentLogCategory;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) count];
      *(_DWORD *)AudioFormatInfo buf = 136315650;
      unsigned int v19 = "AudioComponentValidation.mm";
      __int16 v20 = 1024;
      int v21 = 223;
      __int16 v22 = 2048;
      uint64_t v23 = v9 + 1;
      _os_log_impl(&dword_18FEC0000, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d Done running repeated validations: %lu", buf, 0x1Cu);
    }

    [(__CFDictionary *)a3 setObject:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) forKey:@"RepeatsOutput"];
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_19011461C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t getvalidateWithParametersAsyncSymbolLoc(void)
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = getvalidateWithParametersAsyncSymbolLoc(void)::ptr;
  uint64_t v6 = getvalidateWithParametersAsyncSymbolLoc(void)::ptr;
  if (!getvalidateWithParametersAsyncSymbolLoc(void)::ptr)
  {
    uint64_t v1 = ValidationCapsuleLibrary();
    v4[3] = (uint64_t)dlsym(v1, "validateWithParametersAsync");
    getvalidateWithParametersAsyncSymbolLoc(void)::ptr = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_190114724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void validation_validateWithParametersAsync(long long *a1, uint64_t a2, void *a3, double a4)
{
  id v7 = a3;
  uint64_t v8 = (void (*)(long long *, uint64_t, id, double))getvalidateWithParametersAsyncSymbolLoc();
  if (v8)
  {
    long long v11 = *a1;
    int v12 = *((_DWORD *)a1 + 4);
    v8(&v11, a2, v7, a4);
  }
  else
  {
    uint64_t v9 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v10 = objc_msgSend(NSString, "stringWithUTF8String:", "OSStatus validation_validateWithParametersAsync(const AudioComponentDescription, const ValidationCapsuleParameters &, double, void (^__strong)(AudioComponentValidationResult, CFDictionaryRef))");
    objc_msgSend(v9, "handleFailureInFunction:file:lineNumber:description:", v10, @"AudioComponentValidation.mm", 81, @"%s", dlerror());

    __break(1u);
  }
}

void sub_19011481C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *___ZL39getvalidateWithParametersAsyncSymbolLocv_block_invoke(uint64_t a1)
{
  unint64_t v2 = ValidationCapsuleLibrary();
  uint64_t result = dlsym(v2, "validateWithParametersAsync");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getvalidateWithParametersAsyncSymbolLoc(void)::ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void APAC::MetadataConfigJSON(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  uint64_t v4 = (uint64_t *)*a1;
  v753[0] = 4;
  v754 = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v753);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v753);
  v551 = (unsigned __int8 *)a2;
  uint64_t v5 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)a2, "metadataFrameCompressionEnabled");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v753);
  int v6 = *v5;
  *uint64_t v5 = 4;
  v753[0] = v6;
  id v7 = (uint64_t *)*((void *)v5 + 1);
  *((void *)v5 + 1) = v4;
  v754 = v7;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v753);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v754, v6);
  uint64_t v8 = (uint64_t *)a1[1];
  v751[0] = 4;
  v752 = v8;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v751);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v751);
  uint64_t v9 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)a2, "mRendererMetadataConfigPresent");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v751);
  int v10 = *v9;
  *uint64_t v9 = 4;
  v751[0] = v10;
  long long v11 = (uint64_t *)*((void *)v9 + 1);
  *((void *)v9 + 1) = v8;
  v752 = v11;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v9);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v751);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v752, v10);
  if (a1[1])
  {
    int v12 = (uint64_t *)*((unsigned __int16 *)a1 + 4);
    v749[0] = 5;
    v750 = v12;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v749);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v749);
    unsigned int v13 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)a2, "mRendererMetadataConfig");
    double v14 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v13, "mGroupCount");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v749);
    int v15 = *v14;
    *double v14 = 5;
    v749[0] = v15;
    long long v16 = (uint64_t *)*((void *)v14 + 1);
    *((void *)v14 + 1) = v12;
    v750 = v16;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v749);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v750, v15);
    int v17 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)a2, "mRendererMetadataConfig");
    double v18 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v17, "mGlobalConfig");
    unsigned int v19 = (uint64_t *)a1[16];
    v747[0] = 4;
    v748 = v19;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v747);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v747);
    __int16 v20 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mHasData");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v747);
    int v21 = *v20;
    *__int16 v20 = 4;
    v747[0] = v21;
    __int16 v22 = (uint64_t *)*((void *)v20 + 1);
    *((void *)v20 + 1) = v19;
    v748 = v22;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v747);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v748, v21);
    v554 = a1;
    if (a1[16])
    {
      uint64_t v23 = (uint64_t *)*((unsigned __int16 *)a1 + 9);
      v745[0] = 5;
      v746 = v23;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v745);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v745);
      uint64_t v24 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mNumParameters");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v745);
      int v25 = *v24;
      char *v24 = 5;
      v745[0] = v25;
      uint64_t v26 = (uint64_t *)*((void *)v24 + 1);
      *((void *)v24 + 1) = v23;
      v746 = v26;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v745);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v746, v25);
      unsigned int v27 = *((unsigned __int16 *)a1 + 9);
      if (v27 >= 0x800) {
        unsigned int v27 = 2048;
      }
      if (v27)
      {
        int v28 = 0;
        uint64_t v29 = a1 + 4496;
        v553 = a1 + 4116;
        v547 = a1 + 4704;
        v550 = a1 + 4716;
        v556 = a1 + 4530;
        v549 = a1 + 4365;
        v552 = (float *)(a1 + 4200);
        v548 = a1 + 20;
        v555 = a1 + 4496;
        while (2)
        {
          switch(*(_WORD *)&v548[2 * v28])
          {
            case 0:
              uint64_t v30 = *v553;
              v743[0] = 4;
              uint64_t v744 = v30;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v743);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v743);
              unsigned int v31 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mApplyPostProcReverb");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v743);
              int v32 = *v31;
              *unsigned int v31 = 4;
              v743[0] = v32;
              uint64_t v33 = *((void *)v31 + 1);
              *((void *)v31 + 1) = v30;
              uint64_t v744 = v33;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v31);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v743);
              int v34 = (uint64_t **)&v744;
              goto LABEL_60;
            case 1:
              uint64_t v35 = v553[1];
              v741[0] = 4;
              uint64_t v742 = v35;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v741);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v741);
              int v36 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mIs6DoF");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v741);
              int v32 = *v36;
              *int v36 = 4;
              v741[0] = v32;
              uint64_t v37 = *((void *)v36 + 1);
              *((void *)v36 + 1) = v35;
              uint64_t v742 = v37;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v36);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v741);
              int v34 = (uint64_t **)&v742;
              goto LABEL_60;
            case 2:
              uint64_t v38 = v553[2];
              v739[0] = 4;
              uint64_t v740 = v38;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v739);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v739);
              unsigned int v39 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mHasSceneRadiationPattern");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v739);
              int v32 = *v39;
              *unsigned int v39 = 4;
              v739[0] = v32;
              uint64_t v40 = *((void *)v39 + 1);
              *((void *)v39 + 1) = v38;
              uint64_t v740 = v40;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v39);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v739);
              int v34 = (uint64_t **)&v740;
              goto LABEL_60;
            case 3:
              uint64_t v41 = v553[3];
              v737[0] = 5;
              uint64_t v738 = v41;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v737);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v737);
              uint64_t v42 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mTargetPlaybackSystemIndex");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v737);
              int v32 = *v42;
              *uint64_t v42 = 5;
              v737[0] = v32;
              uint64_t v43 = *((void *)v42 + 1);
              *((void *)v42 + 1) = v41;
              uint64_t v738 = v43;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v42);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v737);
              int v34 = (uint64_t **)&v738;
              goto LABEL_60;
            case 4:
              uint64_t v44 = (uint64_t *)v553[6];
              v735[0] = 5;
              v736 = v44;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v735);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v735);
              uint64_t v45 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mAuthoringInformation");
              int v46 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v45, "mAuthoringToolNameIndex");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v735);
              int v47 = *v46;
              *int v46 = 5;
              v735[0] = v47;
              long long v48 = (uint64_t *)*((void *)v46 + 1);
              *((void *)v46 + 1) = v44;
              v736 = v48;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v46);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v735);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v736, v47);
              int v49 = (uint64_t *)v553[7];
              v733[0] = 5;
              v734 = v49;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v733);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v733);
              int v50 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mAuthoringInformation");
              id v51 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v50, "mAuthoringToolVersion");
              char v52 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v51, "mMajor");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v733);
              int v53 = *v52;
              char *v52 = 5;
              v733[0] = v53;
              AudioStreamPacketDescription v54 = (uint64_t *)*((void *)v52 + 1);
              *((void *)v52 + 1) = v49;
              v734 = v54;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v52);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v733);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v734, v53);
              long long v55 = (uint64_t *)v553[8];
              v731[0] = 5;
              v732 = v55;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v731);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v731);
              long long v56 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mAuthoringInformation");
              uint64_t v57 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v56, "mAuthoringToolVersion");
              long long v58 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v57, "mMinor");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v731);
              int v59 = *v58;
              *long long v58 = 5;
              v731[0] = v59;
              int v60 = (uint64_t *)*((void *)v58 + 1);
              *((void *)v58 + 1) = v55;
              v732 = v60;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v58);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v731);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v732, v59);
              int v61 = (uint64_t *)v553[9];
              v729[0] = 5;
              v730 = v61;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v729);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v729);
              uint64_t v62 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mAuthoringInformation");
              int v63 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v62, "mAuthoringToolVersion");
              uint64_t v64 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v63, "mPatch");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v729);
              int v65 = *v64;
              *uint64_t v64 = 5;
              v729[0] = v65;
              unsigned int v66 = (uint64_t *)*((void *)v64 + 1);
              *((void *)v64 + 1) = v61;
              v730 = v66;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v64);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v729);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v730, v65);
              id v67 = (uint64_t *)v553[10];
              v727[0] = 5;
              v728 = v67;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v727);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v727);
              uint64_t v68 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mAuthoringInformation");
              id v69 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v68, "mRendererNameIndex");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v727);
              int v70 = *v69;
              *id v69 = 5;
              v727[0] = v70;
              int v71 = (uint64_t *)*((void *)v69 + 1);
              *((void *)v69 + 1) = v67;
              v728 = v71;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v69);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v727);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v728, v70);
              uint64_t v72 = (uint64_t *)v553[11];
              v725[0] = 5;
              v726 = v72;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v725);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v725);
              uint64_t v73 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mAuthoringInformation");
              unsigned int v74 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v73, "mRendererVersion");
              int v75 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v74, "mMajor");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v725);
              int v76 = *v75;
              *int v75 = 5;
              v725[0] = v76;
              int v77 = (uint64_t *)*((void *)v75 + 1);
              *((void *)v75 + 1) = v72;
              v726 = v77;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v75);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v725);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v726, v76);
              uint64_t v78 = (uint64_t *)v553[12];
              v723[0] = 5;
              v724 = v78;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v723);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v723);
              unint64_t v79 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mAuthoringInformation");
              uint64_t v80 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v79, "mRendererVersion");
              unint64_t v81 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v80, "mMinor");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v723);
              int v82 = *v81;
              *unint64_t v81 = 5;
              v723[0] = v82;
              uint64_t v83 = (uint64_t *)*((void *)v81 + 1);
              *((void *)v81 + 1) = v78;
              v724 = v83;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v81);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v723);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v724, v82);
              uint64_t v84 = v553[13];
              v721[0] = 5;
              uint64_t v722 = v84;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v721);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v721);
              int v85 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mAuthoringInformation");
              uint64_t v86 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v85, "mRendererVersion");
              uint64_t v87 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v86, "mPatch");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v721);
              int v32 = *v87;
              char *v87 = 5;
              v721[0] = v32;
              uint64_t v88 = *((void *)v87 + 1);
              *((void *)v87 + 1) = v84;
              uint64_t v722 = v88;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v87);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v721);
              int v34 = (uint64_t **)&v722;
              goto LABEL_60;
            case 5:
              double v89 = *((float *)a1 + 1033);
              v719[0] = 7;
              double v720 = v89;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v719);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v719);
              int v90 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mRefScreen");
              uint64_t v91 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v90, "mAspectRatio");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v719);
              int v92 = *v91;
              *uint64_t v91 = 7;
              v719[0] = v92;
              uint64_t v93 = *((uint64_t **)v91 + 1);
              *((double *)v91 + 1) = v89;
              double v720 = *(double *)&v93;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v91);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v719);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v720, v92);
              int v94 = (uint64_t *)v553[20];
              v717[0] = 4;
              v718 = v94;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v717);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v717);
              BOOL v95 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mRefScreen");
              BOOL v96 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v95, "mIsCartesian");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v717);
              int v97 = *v96;
              *BOOL v96 = 4;
              v717[0] = v97;
              BOOL v98 = (uint64_t *)*((void *)v96 + 1);
              *((void *)v96 + 1) = v94;
              v718 = v98;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v96);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v717);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v718, v97);
              if (v553[20])
              {
                double v99 = *((float *)a1 + 1035);
                v715[0] = 7;
                double v716 = v99;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v715);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v715);
                int64_t v100 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mRefScreen");
                uint64_t v29 = v555;
                __int16 v101 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v100, "mScreenCentrePosition");
                char v102 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v101, "mX");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v715);
                int v103 = *v102;
                *char v102 = 7;
                v715[0] = v103;
                uint64_t v104 = *((uint64_t **)v102 + 1);
                *((double *)v102 + 1) = v99;
                double v716 = *(double *)&v104;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v102);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v715);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v716, v103);
                double v105 = *((float *)a1 + 1036);
                v713[0] = 7;
                double v714 = v105;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v713);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v713);
                uint64_t v106 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mRefScreen");
                __int16 v107 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v106, "mScreenCentrePosition");
                uint64_t v108 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v107, "mY");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v713);
                int v109 = *v108;
                *uint64_t v108 = 7;
                v713[0] = v109;
                uint64_t v110 = *((uint64_t **)v108 + 1);
                *((double *)v108 + 1) = v105;
                double v714 = *(double *)&v110;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v108);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v713);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v714, v109);
                double v111 = *((float *)a1 + 1037);
                v711[0] = 7;
                double v712 = v111;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v711);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v711);
                uint64_t v112 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mRefScreen");
                uint64_t v113 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v112, "mScreenCentrePosition");
                uint64_t v114 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v113, "mZ");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v711);
                int v115 = *v114;
                *uint64_t v114 = 7;
                v711[0] = v115;
                v116 = *((uint64_t **)v114 + 1);
                *((double *)v114 + 1) = v111;
                double v712 = *(double *)&v116;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v114);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v711);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v712, v115);
                double v117 = *((float *)a1 + 1041);
                v709[0] = 7;
                double v710 = v117;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v709);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v709);
                uint64_t v118 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mRefScreen");
                uint64_t v119 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v118, "mScreenWidth");
                uint64_t v120 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v119, "mX");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v709);
                int v121 = *v120;
                *uint64_t v120 = 7;
                v709[0] = v121;
                double v122 = *((double *)v120 + 1);
                *((double *)v120 + 1) = v117;
                double v710 = v122;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v120);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v709);
                uint64_t v123 = &v710;
              }
              else
              {
                double v408 = *((float *)a1 + 1038);
                v707[0] = 7;
                double v708 = v408;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v707);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v707);
                v409 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mRefScreen");
                uint64_t v29 = v555;
                v410 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v409, "mScreenCentrePosition");
                v411 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v410, "mAzimuth");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v707);
                int v412 = *v411;
                char *v411 = 7;
                v707[0] = v412;
                v413 = *((uint64_t **)v411 + 1);
                *((double *)v411 + 1) = v408;
                double v708 = *(double *)&v413;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v411);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v707);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v708, v412);
                double v414 = *((float *)a1 + 1039);
                v705[0] = 7;
                double v706 = v414;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v705);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v705);
                v415 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mRefScreen");
                v416 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v415, "mScreenCentrePosition");
                v417 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v416, "mElevation");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v705);
                int v418 = *v417;
                char *v417 = 7;
                v705[0] = v418;
                v419 = *((uint64_t **)v417 + 1);
                *((double *)v417 + 1) = v414;
                double v706 = *(double *)&v419;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v417);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v705);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v706, v418);
                double v420 = *((float *)a1 + 1040);
                v703[0] = 7;
                double v704 = v420;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v703);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v703);
                v421 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mRefScreen");
                v422 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v421, "mScreenCentrePosition");
                v423 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v422, "mRadius");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v703);
                int v424 = *v423;
                char *v423 = 7;
                v703[0] = v424;
                v425 = *((uint64_t **)v423 + 1);
                *((double *)v423 + 1) = v420;
                double v704 = *(double *)&v425;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v423);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v703);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v704, v424);
                double v426 = *((float *)a1 + 1041);
                v701[0] = 7;
                double v702 = v426;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v701);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v701);
                v427 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mRefScreen");
                v428 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v427, "mScreenWidth");
                v429 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v428, "mAzimuth");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v701);
                int v121 = *v429;
                char *v429 = 7;
                v701[0] = v121;
                double v430 = *((double *)v429 + 1);
                *((double *)v429 + 1) = v426;
                double v702 = v430;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v429);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v701);
                uint64_t v123 = &v702;
              }
              int v376 = v121;
              goto LABEL_58;
            case 6:
              unint64_t v124 = (uint64_t *)v553[56];
              v699[0] = 5;
              v700 = v124;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v699);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v699);
              uint64_t v125 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mSupplementaryProductionMetadata");
              v126 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v125, "mSurroundDownmix");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v699);
              int v127 = *v126;
              char *v126 = 5;
              v699[0] = v127;
              v128 = (uint64_t *)*((void *)v126 + 1);
              *((void *)v126 + 1) = v124;
              v700 = v128;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v126);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v699);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v700, v127);
              uint64_t v129 = (uint64_t *)v553[57];
              v697[0] = 5;
              v698 = v129;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v697);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v697);
              unint64_t v130 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mSupplementaryProductionMetadata");
              BOOL v131 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v130, "mSurroundToStereoDownmix");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v697);
              int v132 = *v131;
              *BOOL v131 = 5;
              v697[0] = v132;
              uint64_t v133 = (uint64_t *)*((void *)v131 + 1);
              *((void *)v131 + 1) = v129;
              v698 = v133;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v131);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v697);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v698, v132);
              uint64_t v134 = (uint64_t *)v553[58];
              v695[0] = 5;
              v696 = v134;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v695);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v695);
              v135 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mSupplementaryProductionMetadata");
              uint64_t v136 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v135, "mPositionAdjustment");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v695);
              int v137 = *v136;
              *uint64_t v136 = 5;
              v695[0] = v137;
              unsigned int v138 = (uint64_t *)*((void *)v136 + 1);
              *((void *)v136 + 1) = v134;
              v696 = v138;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v136);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v695);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v696, v137);
              unint64_t v139 = 0;
              BOOL v140 = v552;
              do
              {
                unsigned int v141 = (uint64_t *)*((unsigned __int8 *)v552 + v139 - 25);
                v693[0] = 4;
                v694 = v141;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v693);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v693);
                uint64_t v142 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mSupplementaryProductionMetadata");
                uint64_t v143 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v142, "mIsAutoTrim");
                uint64_t v144 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v143, v139);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v693);
                int v145 = *v144;
                *uint64_t v144 = 4;
                v693[0] = v145;
                v146 = (uint64_t *)*((void *)v144 + 1);
                *((void *)v144 + 1) = v141;
                v694 = v146;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v144);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v693);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v694, v145);
                a1 = v554;
                if (!*((unsigned char *)v552 + v139 - 25))
                {
                  double v147 = *(v140 - 4);
                  v691[0] = 7;
                  double v692 = v147;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v691);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v691);
                  BOOL v148 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mSupplementaryProductionMetadata");
                  v149 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v148, "mMixingGains");
                  uint64_t v150 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v149, v139);
                  v151 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v150, "mFrontGain");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v691);
                  int v152 = *v151;
                  char *v151 = 7;
                  v691[0] = v152;
                  unint64_t v153 = *((uint64_t **)v151 + 1);
                  *((double *)v151 + 1) = v147;
                  double v692 = *(double *)&v153;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v151);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v691);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v692, v152);
                  double v154 = *(v140 - 3);
                  v689[0] = 7;
                  double v690 = v154;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v689);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v689);
                  v155 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mSupplementaryProductionMetadata");
                  unsigned int v156 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v155, "mMixingGains");
                  unsigned int v157 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v156, v139);
                  v158 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v157, "mBackGain");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v689);
                  int v159 = *v158;
                  char *v158 = 7;
                  v689[0] = v159;
                  uint64_t v160 = *((uint64_t **)v158 + 1);
                  *((double *)v158 + 1) = v154;
                  double v690 = *(double *)&v160;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v158);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v689);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v690, v159);
                  double v161 = *(v140 - 2);
                  v687[0] = 7;
                  double v688 = v161;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v687);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v687);
                  int64_t v162 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mSupplementaryProductionMetadata");
                  uint64_t v163 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v162, "mMixingGains");
                  uint64_t v164 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v163, v139);
                  __int16 v165 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v164, "mTopGain");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v687);
                  int v166 = *v165;
                  *__int16 v165 = 7;
                  v687[0] = v166;
                  uint64_t v167 = *((uint64_t **)v165 + 1);
                  *((double *)v165 + 1) = v161;
                  double v688 = *(double *)&v167;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v165);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v687);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v688, v166);
                  double v168 = *(v140 - 1);
                  v685[0] = 7;
                  double v686 = v168;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v685);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v685);
                  __int16 v169 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mSupplementaryProductionMetadata");
                  __int16 v170 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v169, "mMixingGains");
                  __int16 v171 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v170, v139);
                  uint64_t v172 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v171, "mEarLevelBalance");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v685);
                  int v173 = *v172;
                  *uint64_t v172 = 7;
                  v685[0] = v173;
                  char v174 = *((uint64_t **)v172 + 1);
                  *((double *)v172 + 1) = v168;
                  double v686 = *(double *)&v174;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v172);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v685);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v686, v173);
                  double v175 = *v140;
                  v683[0] = 7;
                  double v684 = v175;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v683);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v683);
                  char v176 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mSupplementaryProductionMetadata");
                  char v177 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v176, "mMixingGains");
                  char v178 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v177, v139);
                  int v179 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v178, "mHeightBalance");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v683);
                  int v180 = *v179;
                  *int v179 = 7;
                  v683[0] = v180;
                  v181 = (uint64_t *)*((void *)v179 + 1);
                  *((double *)v179 + 1) = v175;
                  double v684 = *(double *)&v181;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v179);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v683);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v684, v180);
                }
                ++v139;
                v140 += 5;
              }
              while (v139 != 9);
              v182 = (uint64_t *)v553[248];
              v681[0] = 5;
              v682 = v182;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v681);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v681);
              v183 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mSupplementaryProductionMetadata");
              v184 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v183, "mNumChannels");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v681);
              int v185 = *v184;
              char *v184 = 5;
              v681[0] = v185;
              v186 = (uint64_t *)*((void *)v184 + 1);
              *((void *)v184 + 1) = v182;
              v682 = v186;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v184);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v681);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v682, v185);
              uint64_t v29 = v555;
              if (v553[248])
              {
                unint64_t v187 = 0;
                do
                {
                  v188 = (uint64_t *)v549[v187];
                  v679[0] = 4;
                  v680 = v188;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v679);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v679);
                  v189 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mSupplementaryProductionMetadata");
                  v190 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v189, "mIsPerChTrimEnabled");
                  v191 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v190, v187);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v679);
                  int v192 = *v191;
                  unsigned __int8 *v191 = 4;
                  v679[0] = v192;
                  v193 = (uint64_t *)*((void *)v191 + 1);
                  *((void *)v191 + 1) = v188;
                  v680 = v193;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v191);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v679);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v680, v192);
                  ++v187;
                  uint64_t v29 = v555;
                }
                while (v187 < v553[248]);
              }
              goto LABEL_61;
            case 7:
              v194 = (uint64_t *)*v29;
              v677[0] = 4;
              v678 = v194;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v677);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v677);
              v195 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mBinauralization");
              v196 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v195, "mIsDirectBinauralization");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v677);
              int v197 = *v196;
              char *v196 = 4;
              v677[0] = v197;
              v198 = (uint64_t *)*((void *)v196 + 1);
              *((void *)v196 + 1) = v194;
              v678 = v198;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v196);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v677);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v678, v197);
              v199 = v555;
              if (*v555)
              {
                v200 = (uint64_t *)*((unsigned int *)a1 + 1125);
                v675[0] = 5;
                v676 = v200;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v675);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v675);
                v201 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mBinauralization");
                v202 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v201, "mChannelLayoutTag");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v675);
                int v203 = *v202;
                char *v202 = 5;
                v675[0] = v203;
                v204 = (uint64_t *)*((void *)v202 + 1);
                *((void *)v202 + 1) = v200;
                v676 = v204;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v202);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v675);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v676, v203);
                v199 = v555;
              }
              v205 = (uint64_t *)v199[8];
              v673[0] = 5;
              v674 = v205;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v673);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v673);
              v206 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mBinauralization");
              v207 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v206, "mHRTFType");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v673);
              int v208 = *v207;
              char *v207 = 5;
              v673[0] = v208;
              v209 = (uint64_t *)*((void *)v207 + 1);
              *((void *)v207 + 1) = v205;
              v674 = v209;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v207);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v673);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v674, v208);
              uint64_t v29 = v555;
              int v210 = v555[8];
              if (v210 == 1)
              {
                uint64_t v431 = v555[9];
                v671[0] = 5;
                uint64_t v672 = v431;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v671);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v671);
                v432 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mBinauralization");
                v433 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v432, "mPredefinedIR_ID");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v671);
                int v32 = *v433;
                char *v433 = 5;
                v671[0] = v32;
                uint64_t v434 = *((void *)v433 + 1);
                *((void *)v433 + 1) = v431;
                uint64_t v672 = v434;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v433);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v671);
                int v34 = (uint64_t **)&v672;
              }
              else
              {
                if (v210 != 2) {
                  goto LABEL_61;
                }
                v211 = (uint64_t *)v555[9];
                v669[0] = 5;
                v670 = v211;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v669);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v669);
                v212 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mBinauralization");
                v213 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v212, "mPredefinedIR_ID");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v669);
                int v214 = *v213;
                char *v213 = 5;
                v669[0] = v214;
                v215 = (uint64_t *)*((void *)v213 + 1);
                *((void *)v213 + 1) = v211;
                v670 = v215;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v213);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v669);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v670, v214);
                v216 = (uint64_t *)v555[14];
                v667[0] = 5;
                v668 = v216;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v667);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v667);
                v217 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mBinauralization");
                v218 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v217, "mDataLocationIndex");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v667);
                int v219 = *v218;
                char *v218 = 5;
                v667[0] = v219;
                v220 = (uint64_t *)*((void *)v218 + 1);
                *((void *)v218 + 1) = v216;
                v668 = v220;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v218);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v667);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v668, v219);
                v221 = (uint64_t *)*((unsigned __int16 *)a1 + 2253);
                v665[0] = 5;
                v666 = v221;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v665);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v665);
                v222 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mBinauralization");
                v223 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v222, "mCustomData_TableID");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v665);
                int v224 = *v223;
                char *v223 = 5;
                v665[0] = v224;
                v225 = (uint64_t *)*((void *)v223 + 1);
                *((void *)v223 + 1) = v221;
                v666 = v225;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v223);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v665);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v666, v224);
                v226 = (uint64_t *)*((unsigned __int16 *)a1 + 2254);
                v663[0] = 5;
                v664 = v226;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v663);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v663);
                v227 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mBinauralization");
                v228 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v227, "mCustomData_EntryID");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v663);
                int v229 = *v228;
                char *v228 = 5;
                v663[0] = v229;
                v230 = (uint64_t *)*((void *)v228 + 1);
                *((void *)v228 + 1) = v226;
                v664 = v230;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v228);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v663);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v664, v229);
                uint64_t v231 = v555[8];
                v661[0] = 5;
                uint64_t v662 = v231;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v661);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v661);
                v232 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mBinauralization");
                v233 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v232, "mHRTFType");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v661);
                int v32 = *v233;
                char *v233 = 5;
                v661[0] = v32;
                uint64_t v234 = *((void *)v233 + 1);
                *((void *)v233 + 1) = v231;
                uint64_t v662 = v234;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v233);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v661);
                int v34 = (uint64_t **)&v662;
              }
LABEL_60:
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v34, v32);
              uint64_t v29 = v555;
LABEL_61:
              ++v28;
              unsigned int v435 = *((unsigned __int16 *)a1 + 9);
              if (v435 >= 0x800) {
                unsigned int v435 = 2048;
              }
              if (v28 == v435) {
                break;
              }
              continue;
            case 8:
              v235 = (uint64_t *)v29[16];
              v659[0] = 5;
              v660 = v235;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v659);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v659);
              v236 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mHCFilter");
              v237 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v236, "mDataLocationIndex");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v659);
              int v238 = *v237;
              char *v237 = 5;
              v659[0] = v238;
              v239 = (uint64_t *)*((void *)v237 + 1);
              *((void *)v237 + 1) = v235;
              v660 = v239;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v237);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v659);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v660, v238);
              v240 = (uint64_t *)*((unsigned __int16 *)a1 + 2257);
              v657[0] = 5;
              v658 = v240;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v657);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v657);
              v241 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mHCFilter");
              v242 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v241, "mCustomData_TableID");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v657);
              int v243 = *v242;
              char *v242 = 5;
              v657[0] = v243;
              v244 = (uint64_t *)*((void *)v242 + 1);
              *((void *)v242 + 1) = v240;
              v658 = v244;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v242);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v657);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v658, v243);
              uint64_t v245 = *((unsigned __int16 *)a1 + 2258);
              v655[0] = 5;
              uint64_t v656 = v245;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v655);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v655);
              v246 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mHCFilter");
              v247 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v246, "mCustomData_EntryID");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v655);
              int v32 = *v247;
              char *v247 = 5;
              v655[0] = v32;
              uint64_t v248 = *((void *)v247 + 1);
              *((void *)v247 + 1) = v245;
              uint64_t v656 = v248;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v247);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v655);
              int v34 = (uint64_t **)&v656;
              goto LABEL_60;
            case 9:
              v249 = (uint64_t *)v29[24];
              v653[0] = 5;
              v654 = v249;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v653);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v653);
              v250 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mSPAD");
              v251 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v250, "mDataLocationIndex");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v653);
              int v252 = *v251;
              char *v251 = 5;
              v653[0] = v252;
              v253 = (uint64_t *)*((void *)v251 + 1);
              *((void *)v251 + 1) = v249;
              v654 = v253;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v251);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v653);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v654, v252);
              v254 = (uint64_t *)*((unsigned __int16 *)a1 + 2261);
              v651[0] = 5;
              v652 = v254;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v651);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v651);
              v255 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mSPAD");
              v256 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v255, "mCustomData_TableID");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v651);
              int v257 = *v256;
              char *v256 = 5;
              v651[0] = v257;
              v258 = (uint64_t *)*((void *)v256 + 1);
              *((void *)v256 + 1) = v254;
              v652 = v258;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v256);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v651);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v652, v257);
              v259 = (uint64_t *)*((unsigned __int16 *)a1 + 2262);
              v649[0] = 5;
              v650 = v259;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v649);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v649);
              v260 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mSPAD");
              v261 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v260, "mCustomData_EntryID");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v649);
              int v262 = *v261;
              char *v261 = 5;
              v649[0] = v262;
              v263 = (uint64_t *)*((void *)v261 + 1);
              *((void *)v261 + 1) = v259;
              v650 = v263;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v261);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v649);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v650, v262);
              unint64_t v264 = 0;
              do
              {
                v265 = (uint64_t *)v556[v264];
                v647[0] = 5;
                v648 = v265;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v647);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v647);
                v266 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mSPAD");
                v267 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v266, "mFallbackSPAD");
                v268 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v267, "mDeviceID");
                v269 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v268, v264);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v647);
                int v270 = *v269;
                unsigned __int8 *v269 = 5;
                v647[0] = v270;
                v271 = (uint64_t *)*((void *)v269 + 1);
                *((void *)v269 + 1) = v265;
                v648 = v271;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v269);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v647);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v648, v270);
                if (!v556[v264]) {
                  break;
                }
              }
              while (v264++ < 7);
              v273 = (uint64_t *)v555[32];
              v645[0] = 5;
              v646 = v273;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v645);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v645);
              v274 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mSPAD");
              v275 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v274, "mFallbackSPAD");
              v276 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v275, "mOrientation");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v645);
              int v277 = *v276;
              char *v276 = 5;
              v645[0] = v277;
              v278 = (uint64_t *)*((void *)v276 + 1);
              *((void *)v276 + 1) = v273;
              v646 = v278;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v276);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v645);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v646, v277);
              v279 = (uint64_t *)v555[33];
              v643[0] = 5;
              v644 = v279;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v643);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v643);
              v280 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mSPAD");
              v281 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v280, "mFallbackSPAD");
              v282 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v281, "mNumMicrophones");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v643);
              int v283 = *v282;
              char *v282 = 5;
              v643[0] = v283;
              v284 = (uint64_t *)*((void *)v282 + 1);
              *((void *)v282 + 1) = v279;
              v644 = v284;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v282);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v643);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v644, v283);
              uint64_t v29 = v555;
              if (v555[33])
              {
                unint64_t v285 = 0;
                do
                {
                  v286 = (uint64_t *)*(unsigned __int8 *)(*((void *)a1 + 568) + v285);
                  v641[0] = 5;
                  v642 = v286;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v641);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v641);
                  v287 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mSPAD");
                  v288 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v287, "mFallbackSPAD");
                  v289 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v288, "mMicType");
                  v290 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v289, v285);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v641);
                  int v291 = *v290;
                  unsigned __int8 *v290 = 5;
                  v641[0] = v291;
                  v292 = (uint64_t *)*((void *)v290 + 1);
                  *((void *)v290 + 1) = v286;
                  v642 = v292;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v290);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v641);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v642, v291);
                  double v293 = *(float *)(*((void *)a1 + 571) + 4 * v285);
                  v639[0] = 7;
                  double v640 = v293;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v639);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v639);
                  v294 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mSPAD");
                  v295 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v294, "mFallbackSPAD");
                  v296 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v295, "mMicPosAzimuth");
                  v297 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v296, v285);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v639);
                  int v298 = *v297;
                  unsigned __int8 *v297 = 7;
                  v639[0] = v298;
                  v299 = *((uint64_t **)v297 + 1);
                  *((double *)v297 + 1) = v293;
                  double v640 = *(double *)&v299;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v297);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v639);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v640, v298);
                  double v300 = *(float *)(*((void *)a1 + 574) + 4 * v285);
                  v637[0] = 7;
                  double v638 = v300;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v637);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v637);
                  v301 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mSPAD");
                  v302 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v301, "mFallbackSPAD");
                  v303 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v302, "mMicPosElevation");
                  v304 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v303, v285);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v637);
                  int v305 = *v304;
                  unsigned __int8 *v304 = 7;
                  v637[0] = v305;
                  v306 = *((uint64_t **)v304 + 1);
                  *((double *)v304 + 1) = v300;
                  double v638 = *(double *)&v306;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v304);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v637);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v638, v305);
                  double v307 = *(float *)(*((void *)a1 + 577) + 4 * v285);
                  v635[0] = 7;
                  double v636 = v307;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v635);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v635);
                  v308 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mSPAD");
                  v309 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v308, "mFallbackSPAD");
                  v310 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v309, "mMicPosRadius");
                  v311 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v310, v285);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v635);
                  int v312 = *v311;
                  unsigned __int8 *v311 = 7;
                  v635[0] = v312;
                  v313 = *((uint64_t **)v311 + 1);
                  *((double *)v311 + 1) = v307;
                  double v636 = *(double *)&v313;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v311);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v635);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v636, v312);
                  v314 = (uint64_t *)*(unsigned __int8 *)(*((void *)a1 + 580) + v285);
                  v633[0] = 5;
                  v634 = v314;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v633);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v633);
                  v315 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mSPAD");
                  v316 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v315, "mFallbackSPAD");
                  v317 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v316, "mMicDirection");
                  v318 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v317, v285);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v633);
                  int v319 = *v318;
                  unsigned __int8 *v318 = 5;
                  v633[0] = v319;
                  v320 = (uint64_t *)*((void *)v318 + 1);
                  *((void *)v318 + 1) = v314;
                  v634 = v320;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v318);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v633);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v634, v319);
                  ++v285;
                  uint64_t v29 = v555;
                }
                while (v285 < v555[33]);
              }
              goto LABEL_61;
            case 0xA:
              v321 = (uint64_t *)v29[168];
              v631[0] = 5;
              v632 = v321;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v631);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v631);
              v322 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mDistanceAttenuation");
              v323 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v322, "mAttnLawIndex");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v631);
              int v324 = *v323;
              char *v323 = 5;
              v631[0] = v324;
              v325 = (uint64_t *)*((void *)v323 + 1);
              *((void *)v323 + 1) = v321;
              v632 = v325;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v323);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v631);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v632, v324);
              double v326 = *((float *)a1 + 1168);
              v629[0] = 7;
              double v630 = v326;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v629);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v629);
              v327 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mDistanceAttenuation");
              v328 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v327, "mRefDistance");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v629);
              int v329 = *v328;
              char *v328 = 7;
              v629[0] = v329;
              v330 = *((uint64_t **)v328 + 1);
              *((double *)v328 + 1) = v326;
              double v630 = *(double *)&v330;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v328);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v629);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v630, v329);
              double v331 = *((float *)a1 + 1169);
              v627[0] = 7;
              double v628 = v331;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v627);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v627);
              v332 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mDistanceAttenuation");
              v333 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v332, "mMaxDistance");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v627);
              int v334 = *v333;
              char *v333 = 7;
              v627[0] = v334;
              v335 = *((uint64_t **)v333 + 1);
              *((double *)v333 + 1) = v331;
              double v628 = *(double *)&v335;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v333);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v627);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v628, v334);
              uint64_t v336 = v555[184];
              v625[0] = 4;
              uint64_t v626 = v336;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v625);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v625);
              v337 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mDistanceAttenuation");
              v338 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v337, "mAttnNormIndex");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v625);
              int v32 = *v338;
              char *v338 = 4;
              v625[0] = v32;
              uint64_t v339 = *((void *)v338 + 1);
              *((void *)v338 + 1) = v336;
              uint64_t v626 = v339;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v338);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v625);
              int v34 = (uint64_t **)&v626;
              goto LABEL_60;
            case 0xB:
              v340 = (uint64_t *)v29[188];
              v623[0] = 4;
              v624 = v340;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v623);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v623);
              v341 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mCameraPerspective");
              v342 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v341, "mPositionPresent");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v623);
              int v343 = *v342;
              char *v342 = 4;
              v623[0] = v343;
              v344 = (uint64_t *)*((void *)v342 + 1);
              *((void *)v342 + 1) = v340;
              v624 = v344;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v342);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v623);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v624, v343);
              v345 = v555;
              if (v555[188])
              {
                v346 = (uint64_t *)v555[189];
                v621[0] = 4;
                v622 = v346;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v621);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v621);
                v347 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mCameraPerspective");
                v348 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v347, "mIsCartesian");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v621);
                int v349 = *v348;
                char *v348 = 4;
                v621[0] = v349;
                v350 = (uint64_t *)*((void *)v348 + 1);
                *((void *)v348 + 1) = v346;
                v622 = v350;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v348);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v621);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v622, v349);
                v345 = v555;
                if (v555[189])
                {
                  for (unint64_t i = 0; i != 3; ++i)
                  {
                    double v352 = *(float *)&v547[4 * i];
                    v619[0] = 7;
                    double v620 = v352;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v619);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v619);
                    v353 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mCameraPerspective");
                    v354 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v353, "mCoordinate");
                    v355 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v354, i);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v619);
                    int v356 = *v355;
                    unsigned __int8 *v355 = 7;
                    v619[0] = v356;
                    v357 = *((uint64_t **)v355 + 1);
                    *((double *)v355 + 1) = v352;
                    double v620 = *(double *)&v357;
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v355);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v619);
                    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v620, v356);
                  }
                }
                else
                {
                  double v436 = *((float *)a1 + 1172);
                  v617[0] = 7;
                  double v618 = v436;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v617);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v617);
                  v437 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mCameraPerspective");
                  v438 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v437, "mAzimuth");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v617);
                  int v439 = *v438;
                  char *v438 = 7;
                  v617[0] = v439;
                  v440 = *((uint64_t **)v438 + 1);
                  *((double *)v438 + 1) = v436;
                  double v618 = *(double *)&v440;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v438);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v617);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v618, v439);
                  double v441 = *((float *)a1 + 1173);
                  v615[0] = 7;
                  double v616 = v441;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v615);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v615);
                  v442 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mCameraPerspective");
                  v443 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v442, "mElevation");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v615);
                  int v444 = *v443;
                  char *v443 = 7;
                  v615[0] = v444;
                  v445 = *((uint64_t **)v443 + 1);
                  *((double *)v443 + 1) = v441;
                  double v616 = *(double *)&v445;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v443);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v615);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v616, v444);
                  double v446 = *((float *)a1 + 1174);
                  v613[0] = 7;
                  double v614 = v446;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v613);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v613);
                  v447 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mCameraPerspective");
                  v448 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v447, "mRadius");
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v613);
                  int v449 = *v448;
                  char *v448 = 7;
                  v613[0] = v449;
                  v450 = *((uint64_t **)v448 + 1);
                  *((double *)v448 + 1) = v446;
                  double v614 = *(double *)&v450;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v448);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v613);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v614, v449);
                }
              }
              v451 = (uint64_t *)v345[204];
              v611[0] = 4;
              v612 = v451;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v611);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v611);
              v452 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mCameraPerspective");
              v453 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v452, "mRotationPresent");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v611);
              int v454 = *v453;
              char *v453 = 4;
              v611[0] = v454;
              v455 = (uint64_t *)*((void *)v453 + 1);
              *((void *)v453 + 1) = v451;
              v612 = v455;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v453);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v611);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v612, v454);
              uint64_t v29 = v555;
              if (v555[204])
              {
                for (unint64_t j = 0; j != 4; ++j)
                {
                  double v457 = *(float *)&v550[4 * j];
                  v609[0] = 7;
                  double v610 = v457;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v609);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v609);
                  v458 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mCameraPerspective");
                  v459 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v458, "mQuaternion");
                  v460 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v459, j);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v609);
                  int v461 = *v460;
                  unsigned __int8 *v460 = 7;
                  v609[0] = v461;
                  v462 = *((uint64_t **)v460 + 1);
                  *((double *)v460 + 1) = v457;
                  double v610 = *(double *)&v462;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v460);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v609);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v610, v461);
                }
              }
              goto LABEL_61;
            case 0xC:
              v358 = (uint64_t *)v29[236];
              v607[0] = 4;
              v608 = v358;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v607);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v607);
              v359 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mGenericRenderingConfig");
              v360 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v359, "mHasPreset");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v607);
              int v361 = *v360;
              char *v360 = 4;
              v607[0] = v361;
              v362 = (uint64_t *)*((void *)v360 + 1);
              *((void *)v360 + 1) = v358;
              v608 = v362;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v360);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v607);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v608, v361);
              if (v555[236])
              {
                uint64_t v363 = *((unsigned __int16 *)a1 + 2367);
                v605[0] = 5;
                uint64_t v606 = v363;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v605);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v605);
                v364 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mGenericRenderingConfig");
                v365 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v364, "mPresetIndex");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v605);
                int v32 = *v365;
                char *v365 = 5;
                v605[0] = v32;
                uint64_t v366 = *((void *)v365 + 1);
                *((void *)v365 + 1) = v363;
                uint64_t v606 = v366;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v365);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v605);
                int v34 = (uint64_t **)&v606;
              }
              else
              {
                v384 = (uint64_t *)v555[240];
                v603[0] = 5;
                v604 = v384;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v603);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v603);
                v385 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mGenericRenderingConfig");
                v386 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v385, "mDataLocationIndex");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v603);
                int v387 = *v386;
                char *v386 = 5;
                v603[0] = v387;
                v388 = (uint64_t *)*((void *)v386 + 1);
                *((void *)v386 + 1) = v384;
                v604 = v388;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v386);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v603);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v604, v387);
                v389 = (uint64_t *)*((unsigned __int16 *)a1 + 2369);
                v601[0] = 5;
                v602 = v389;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v601);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v601);
                v390 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mGenericRenderingConfig");
                v391 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v390, "mCustomData_TableID");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v601);
                int v392 = *v391;
                char *v391 = 5;
                v601[0] = v392;
                v393 = (uint64_t *)*((void *)v391 + 1);
                *((void *)v391 + 1) = v389;
                v602 = v393;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v391);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v601);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v602, v392);
                v394 = (uint64_t *)*((unsigned __int16 *)a1 + 2370);
                v599[0] = 5;
                v600 = v394;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v599);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v599);
                v395 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mGenericRenderingConfig");
                v396 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v395, "mCustomData_EntryID");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v599);
                int v397 = *v396;
                char *v396 = 5;
                v599[0] = v397;
                v398 = (uint64_t *)*((void *)v396 + 1);
                *((void *)v396 + 1) = v394;
                v600 = v398;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v396);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v599);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v600, v397);
                v399 = (uint64_t *)*((unsigned __int16 *)a1 + 2371);
                v597[0] = 5;
                v598 = v399;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v597);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v597);
                v400 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mGenericRenderingConfig");
                v401 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v400, "mFallbackIndex");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v597);
                int v402 = *v401;
                char *v401 = 5;
                v597[0] = v402;
                v403 = (uint64_t *)*((void *)v401 + 1);
                *((void *)v401 + 1) = v399;
                v598 = v403;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v401);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v597);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v598, v402);
                uint64_t v404 = *((unsigned int *)a1 + 1186);
                v595[0] = 5;
                uint64_t v596 = v404;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v595);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v595);
                v405 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mGenericRenderingConfig");
                v406 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v405, "mDataByteSize");
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v595);
                int v32 = *v406;
                char *v406 = 5;
                v595[0] = v32;
                uint64_t v407 = *((void *)v406 + 1);
                *((void *)v406 + 1) = v404;
                uint64_t v596 = v407;
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v406);
                nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v595);
                int v34 = (uint64_t **)&v596;
              }
              goto LABEL_60;
            case 0xD:
              uint64_t v367 = v553[4];
              v593[0] = 5;
              uint64_t v594 = v367;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v593);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v593);
              v368 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mContentKind");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v593);
              int v32 = *v368;
              char *v368 = 5;
              v593[0] = v32;
              uint64_t v369 = *((void *)v368 + 1);
              *((void *)v368 + 1) = v367;
              uint64_t v594 = v369;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v368);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v593);
              int v34 = (uint64_t **)&v594;
              goto LABEL_60;
            case 0xE:
              uint64_t v370 = v553[5];
              v591[0] = 5;
              uint64_t v592 = v370;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v591);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v591);
              v371 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mMaxNumBlocks");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v591);
              int v32 = *v371;
              char *v371 = 5;
              v591[0] = v32;
              uint64_t v372 = *((void *)v371 + 1);
              *((void *)v371 + 1) = v370;
              uint64_t v592 = v372;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v371);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v591);
              int v34 = (uint64_t **)&v592;
              goto LABEL_60;
            case 0xF:
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[21],char [21],0>((uint64_t)v589, "dump not implemented");
              v373 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mChannelBedHeadphoneMetadata");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v589);
              char v374 = *v373;
              char *v373 = v589[0];
              v589[0] = v374;
              uint64_t v375 = *((void *)v373 + 1);
              *((void *)v373 + 1) = v590;
              uint64_t v590 = v375;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v373);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v589);
              int v376 = v589[0];
              uint64_t v123 = (double *)&v590;
LABEL_58:
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)v123, v376);
              goto LABEL_61;
            default:
              std::to_string(&v587, *(unsigned __int16 *)&v548[2 * v28]);
              v377 = std::string::insert(&v587, 0, "Unknown parameter id ", 0x15uLL);
              std::string v588 = *v377;
              v377->__r_.__value_.__l.__size_ = 0;
              v377->__r_.__value_.__r.__words[2] = 0;
              v377->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v587.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v587.__r_.__value_.__l.__data_);
              }
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[16],char [16],0>((uint64_t)v585, "not implemented");
              int v378 = SHIBYTE(v588.__r_.__value_.__r.__words[2]);
              v379 = (void *)v588.__r_.__value_.__r.__words[0];
              if ((v588.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v380 = &v588;
              }
              else {
                v380 = (std::string *)v588.__r_.__value_.__r.__words[0];
              }
              v381 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, (char *)v380);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v585);
              char v382 = *v381;
              char *v381 = v585[0];
              v585[0] = v382;
              v383 = (uint64_t *)*((void *)v381 + 1);
              *((void *)v381 + 1) = v586;
              v586 = v383;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v381);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v585);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v586, v585[0]);
              if (v378 < 0) {
                operator delete(v379);
              }
              goto LABEL_61;
          }
          break;
        }
      }
    }
    unsigned int v463 = *((unsigned __int16 *)a1 + 4);
    uint64_t v464 = *((void *)a1 + 598);
    if (-1431655765 * ((unint64_t)(*((void *)a1 + 599) - v464) >> 4) < v463) {
      unsigned int v463 = -1431655765 * ((unint64_t)(*((void *)a1 + 599) - v464) >> 4);
    }
    v465 = v551;
    if (v463)
    {
      unint64_t v466 = 0;
      do
      {
        v467 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v465, "mRendererMetadataConfig");
        v468 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v467, "mGroupConfig");
        v469 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v468, v466);
        v470 = (uint64_t *)*(unsigned __int16 *)(v464 + 48 * v466);
        v583[0] = 5;
        v584 = v470;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v583);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v583);
        v471 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v469, "mGroupID");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v583);
        int v472 = *v471;
        char *v471 = 5;
        v583[0] = v472;
        v473 = (uint64_t *)*((void *)v471 + 1);
        *((void *)v471 + 1) = v470;
        v584 = v473;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v471);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v583);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v584, v472);
        uint64_t v474 = v464 + 48 * v466;
        unsigned int v475 = *(unsigned __int8 *)(v474 + 2);
        v581[0] = 4;
        unint64_t v582 = v475;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v581);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v581);
        v476 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v469, "mIsGlobal");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v581);
        int v477 = *v476;
        char *v476 = 4;
        v581[0] = v477;
        v478 = (uint64_t *)*((void *)v476 + 1);
        *((void *)v476 + 1) = v475;
        unint64_t v582 = (unint64_t)v478;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v476);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v581);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v582, v477);
        if (!*(unsigned char *)(v474 + 2))
        {
          uint64_t v479 = v464 + 48 * v466;
          unsigned int v480 = *(unsigned __int8 *)(v479 + 3);
          v579[0] = 4;
          unint64_t v580 = v480;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v579);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v579);
          v481 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v469, "mIsPerASC");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v579);
          int v482 = *v481;
          char *v481 = 4;
          v579[0] = v482;
          v483 = (uint64_t *)*((void *)v481 + 1);
          *((void *)v481 + 1) = v480;
          unint64_t v580 = (unint64_t)v483;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v481);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v579);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v580, v482);
          if (!*(unsigned char *)(v479 + 3))
          {
            uint64_t v499 = v464 + 48 * v466;
            unsigned int v501 = *(unsigned __int16 *)(v499 + 18);
            v500 = (unsigned __int16 *)(v499 + 18);
            v563[0] = 5;
            unint64_t v564 = v501;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v563);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v563);
            v502 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v469, "mMemberCount");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v563);
            int v503 = *v502;
            char *v502 = 5;
            v563[0] = v503;
            v504 = (uint64_t *)*((void *)v502 + 1);
            *((void *)v502 + 1) = v501;
            unint64_t v564 = (unint64_t)v504;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v502);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v563);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v564, v503);
            uint64_t v505 = v464 + 48 * v466;
            unsigned int v506 = *(unsigned __int8 *)(v505 + 20);
            v561[0] = 4;
            unint64_t v562 = v506;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v561);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v561);
            v507 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v469, "mHasConjunctMembers");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v561);
            int v508 = *v507;
            char *v507 = 4;
            v561[0] = v508;
            v509 = (uint64_t *)*((void *)v507 + 1);
            *((void *)v507 + 1) = v506;
            unint64_t v562 = (unint64_t)v509;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v507);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v561);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v562, v508);
            if (!*(unsigned char *)(v505 + 20))
            {
              uint64_t v534 = v464 + 48 * v466;
              uint64_t v537 = *(void *)(v534 + 24);
              v536 = (uint64_t *)(v534 + 24);
              uint64_t v535 = v537;
              unint64_t v538 = (unint64_t)(v536[1] - v537) >> 1;
              if (v538 >= *v500) {
                LODWORD(v538) = *v500;
              }
              if (v538)
              {
                unint64_t v539 = 0;
                do
                {
                  v540 = (uint64_t *)*(unsigned __int16 *)(v535 + 2 * v539);
                  v557[0] = 5;
                  v558 = v540;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v557);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v557);
                  v541 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v469, "mASCIDList");
                  v542 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v541, v539);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v557);
                  int v543 = *v542;
                  unsigned __int8 *v542 = 5;
                  v557[0] = v543;
                  v544 = (uint64_t *)*((void *)v542 + 1);
                  *((void *)v542 + 1) = v540;
                  v558 = v544;
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v542);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v557);
                  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v558, v543);
                  ++v539;
                  uint64_t v535 = *v536;
                  unint64_t v545 = (unint64_t)(v536[1] - *v536) >> 1;
                  if (v545 >= *v500) {
                    unint64_t v546 = *v500;
                  }
                  else {
                    unint64_t v546 = v545;
                  }
                }
                while (v539 < v546);
              }
              goto LABEL_86;
            }
            uint64_t v510 = *(unsigned __int16 *)(v464 + 48 * v466 + 22);
            v559[0] = 5;
            uint64_t v560 = v510;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v559);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v559);
            v511 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v469, "mStartASCID");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v559);
            int v496 = *v511;
            char *v511 = 5;
            v559[0] = v496;
            uint64_t v512 = *((void *)v511 + 1);
            *((void *)v511 + 1) = v510;
            uint64_t v560 = v512;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v511);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v559);
            v498 = (uint64_t **)&v560;
            goto LABEL_85;
          }
          v484 = (uint64_t *)*(unsigned __int16 *)(v464 + 48 * v466 + 4);
          v577[0] = 5;
          v578 = v484;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v577);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v577);
          v485 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v469, "mASCID");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v577);
          int v486 = *v485;
          char *v485 = 5;
          v577[0] = v486;
          v487 = (uint64_t *)*((void *)v485 + 1);
          *((void *)v485 + 1) = v484;
          v578 = v487;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v485);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v577);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v578, v486);
          v488 = (unsigned __int8 *)(v464 + 48 * v466);
          unsigned int v489 = v488[6];
          v488 += 6;
          v575[0] = 5;
          unint64_t v576 = v489;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v575);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v575);
          v490 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v469, "mASCType");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v575);
          int v491 = *v490;
          char *v490 = 5;
          v575[0] = v491;
          v492 = (uint64_t *)*((void *)v490 + 1);
          *((void *)v490 + 1) = v489;
          unint64_t v576 = (unint64_t)v492;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v490);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v575);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v576, v491);
          int v493 = *v488;
          if (!*v488)
          {
            uint64_t v513 = *(unsigned __int16 *)(v464 + 48 * v466 + 16);
            v573[0] = 5;
            uint64_t v574 = v513;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v573);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v573);
            v514 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v469, "mChBedID");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v573);
            int v496 = *v514;
            char *v514 = 5;
            v573[0] = v496;
            uint64_t v515 = *((void *)v514 + 1);
            *((void *)v514 + 1) = v513;
            uint64_t v574 = v515;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v514);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v573);
            v498 = (uint64_t **)&v574;
            goto LABEL_85;
          }
          if (v493 == 1)
          {
            v516 = (uint64_t *)*(unsigned __int16 *)(v464 + 48 * v466 + 8);
            v571[0] = 5;
            v572 = v516;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v571);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v571);
            v517 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v469, "mObjectID");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v571);
            int v518 = *v517;
            char *v517 = 5;
            v571[0] = v518;
            v519 = (uint64_t *)*((void *)v517 + 1);
            *((void *)v517 + 1) = v516;
            v572 = v519;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v517);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v571);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v572, v518);
            uint64_t v520 = v464 + 48 * v466;
            unsigned int v521 = *(unsigned __int8 *)(v520 + 10);
            v569[0] = 4;
            unint64_t v570 = v521;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v569);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v569);
            v522 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v469, "mIsObjectInBed");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v569);
            int v523 = *v522;
            char *v522 = 4;
            v569[0] = v523;
            v524 = (uint64_t *)*((void *)v522 + 1);
            *((void *)v522 + 1) = v521;
            unint64_t v570 = (unint64_t)v524;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v522);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v569);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v570, v523);
            if (*(unsigned char *)(v520 + 10))
            {
              uint64_t v525 = *(unsigned __int16 *)(v464 + 48 * v466 + 12);
              v567[0] = 5;
              uint64_t v568 = v525;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v567);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v567);
              v526 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v469, "mBedASCID");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v567);
              int v496 = *v526;
              char *v526 = 5;
              v567[0] = v496;
              uint64_t v527 = *((void *)v526 + 1);
              *((void *)v526 + 1) = v525;
              uint64_t v568 = v527;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v526);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v567);
              v498 = (uint64_t **)&v568;
              goto LABEL_85;
            }
          }
          else if (v493 == 2)
          {
            uint64_t v494 = *(unsigned __int16 *)(v464 + 48 * v466 + 14);
            v565[0] = 5;
            uint64_t v566 = v494;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v565);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v565);
            v495 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v469, "mHOAID");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v565);
            int v496 = *v495;
            char *v495 = 5;
            v565[0] = v496;
            uint64_t v497 = *((void *)v495 + 1);
            *((void *)v495 + 1) = v494;
            uint64_t v566 = v497;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v495);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v565);
            v498 = (uint64_t **)&v566;
LABEL_85:
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v498, v496);
          }
        }
LABEL_86:
        uint64_t v528 = *((void *)v554 + 601);
        v465 = v551;
        v529 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v551, "mRendererMetadataConfig");
        v530 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v529, "mRendererData");
        v531 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v530, v466);
        APAC::RendererDataJSON(v531, (float *)(v528 + 1248 * v466++), 1);
        uint64_t v464 = *((void *)v554 + 598);
        unsigned int v532 = -1431655765 * ((unint64_t)(*((void *)v554 + 599) - v464) >> 4);
        if (v532 >= *((unsigned __int16 *)v554 + 4)) {
          unint64_t v533 = *((unsigned __int16 *)v554 + 4);
        }
        else {
          unint64_t v533 = v532;
        }
      }
      while (v466 < v533);
    }
  }
}

void sub_1901180D8(_Unwind_Exception *a1)
{
}

void APAC::MetadataConfigJSONStr(unsigned __int8 *a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  APAC::MetadataConfigJSON(a1, (uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(a3, (uint64_t)v5, a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v6, v5[0]);
}

void sub_190118670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
}

void APAC::ImmersiveRendererData_V2JSON(uint64_t a1)
{
  uint64_t v1 = (unsigned int *)MEMORY[0x1F4188790](a1);
  uint64_t v3 = (unsigned __int8 *)v2;
  uint64_t v176 = *MEMORY[0x1E4F143B8];
  if (*v1 != 2)
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = "Unsupported ImmersiveRendererData version";
    __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
  }
  uint64_t v4 = v1;
  *(unsigned char *)uint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v3);
  uint64_t v5 = (uint64_t *)*v4;
  v137[0] = 6;
  unsigned int v138 = v5;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v137);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v137);
  int v6 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v3, "mVersion");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v137);
  int v7 = *v6;
  *int v6 = 6;
  v137[0] = v7;
  uint64_t v8 = (uint64_t *)*((void *)v6 + 1);
  *((void *)v6 + 1) = v5;
  unsigned int v138 = v8;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v6);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v137);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v138, v7);
  uint64_t v9 = (uint64_t *)v4[1];
  v135[0] = 6;
  uint64_t v136 = v9;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v135);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v135);
  int v10 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v3, "mNumberOfSARCs");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v135);
  int v11 = *v10;
  *int v10 = 6;
  v135[0] = v11;
  int v12 = (uint64_t *)*((void *)v10 + 1);
  *((void *)v10 + 1) = v9;
  uint64_t v136 = v12;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v10);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v135);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v136, v11);
  unsigned int v13 = (uint64_t *)v4[2];
  v133[0] = 6;
  uint64_t v134 = v13;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v133);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v133);
  double v14 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v3, "mDataByteSize");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v133);
  int v15 = *v14;
  *double v14 = 6;
  v133[0] = v15;
  long long v16 = (uint64_t *)*((void *)v14 + 1);
  *((void *)v14 + 1) = v13;
  uint64_t v134 = v16;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v133);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v134, v15);
  int v17 = (uint64_t *)v4[3];
  v131[0] = 6;
  int v132 = v17;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v131);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v131);
  double v18 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v3, "mData");
  unsigned int v19 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v18, "mLayoutSize");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v131);
  int v20 = *v19;
  *unsigned int v19 = 6;
  v131[0] = v20;
  int v21 = (uint64_t *)*((void *)v19 + 1);
  *((void *)v19 + 1) = v17;
  int v132 = v21;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v131);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v132, v20);
  __int16 v22 = (uint64_t *)v4[4];
  v129[0] = 6;
  unint64_t v130 = v22;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v129);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v129);
  uint64_t v23 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v3, "mData");
  uint64_t v24 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v23, "mNumRendererDescriptions");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v129);
  int v25 = *v24;
  char *v24 = 6;
  v129[0] = v25;
  uint64_t v26 = (uint64_t *)*((void *)v24 + 1);
  *((void *)v24 + 1) = v22;
  unint64_t v130 = v26;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v129);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v130, v25);
  unsigned int v27 = (uint64_t *)v4[5];
  v127[0] = 6;
  v128 = v27;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v127);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v127);
  int v28 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v3, "mData");
  uint64_t v29 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v28, "mEABLConfigSize");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v127);
  int v30 = *v29;
  *uint64_t v29 = 6;
  v127[0] = v30;
  unsigned int v31 = (uint64_t *)*((void *)v29 + 1);
  *((void *)v29 + 1) = v27;
  v128 = v31;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v127);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v128, v30);
  *(_WORD *)unint64_t v139 = 0;
  __int16 v140 = 0;
  char v141 = 0;
  __int16 v142 = 0;
  char v144 = 0;
  int v143 = 0;
  char v145 = 4;
  uint64_t v146 = 0;
  int v147 = 1065353216;
  char v148 = 0;
  memset(&v150[28], 0, 181);
  v150[340] = 0;
  int v151 = 0;
  char v152 = 0;
  int v153 = 0;
  __int16 v154 = 0;
  v162[0] = 0;
  *(void *)((char *)v162 + 5) = 0;
  *(void *)((char *)v164 + 5) = 0;
  __int16 v163 = 0;
  v164[0] = 0;
  char v165 = 0;
  __int16 v166 = 0;
  char v167 = 0;
  uint64_t v168 = 0;
  __int16 v169 = 0;
  __int16 v170 = 0;
  long long v149 = 0u;
  memset(v150, 0, 19);
  memset(&v150[344], 0, 13);
  memset(v161, 0, sizeof(v161));
  long long v160 = 0u;
  long long v159 = 0u;
  long long v158 = 0u;
  long long v157 = 0u;
  long long v156 = 0u;
  long long v155 = 0u;
  long long v174 = 0u;
  long long v173 = 0u;
  long long v172 = 0u;
  long long v171 = 0u;
  uint64_t v175 = 0;
  APAC::ImmersiveRendererData_V2_Manager::getMetadataConfig(v4, (uint64_t)v139);
  if (!v32)
  {
    APAC::MetadataConfigJSON(v139, (uint64_t)v125);
    uint64_t v33 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v3, "mData");
    int v34 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v33, "data");
    uint64_t v35 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v34, "EABLMetadataConfig");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v125);
    char v36 = *v35;
    *uint64_t v35 = v125[0];
    v125[0] = v36;
    uint64_t v37 = (uint64_t *)*((void *)v35 + 1);
    *((void *)v35 + 1) = v126;
    v126 = v37;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v35);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v125);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v126, v125[0]);
  }
  if (*v4 != 2) {
    __assert_rtn("getACLByteSize", "APACImmersiveRendererDataV2.cpp", 50, "inIRD.mVersion == kIRDVersion");
  }
  size_t v38 = v4[3];
  if (v38)
  {
    unsigned int v39 = (unsigned int *)operator new(v4[3]);
    bzero(v39, v38);
  }
  else
  {
    unsigned int v39 = 0;
  }
  ACLPointer = APAC::ImmersiveRendererData_V2_Manager::getACLPointer(v4);
  memcpy(v39, ACLPointer, v38);
  if (v39)
  {
    uint64_t v41 = (uint64_t *)*v39;
    v123[0] = 6;
    unint64_t v124 = v41;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v123);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v123);
    uint64_t v42 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v3, "mData");
    uint64_t v43 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v42, "data");
    uint64_t v44 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v43, "GlobalChannelLayout");
    uint64_t v45 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v44, "mChannelLayoutTag");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v123);
    int v46 = *v45;
    *uint64_t v45 = 6;
    v123[0] = v46;
    int v47 = (uint64_t *)*((void *)v45 + 1);
    *((void *)v45 + 1) = v41;
    unint64_t v124 = v47;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v45);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v123);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v124, v46);
    long long v48 = (uint64_t *)v39[1];
    v121[0] = 6;
    double v122 = v48;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v121);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v121);
    int v49 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v3, "mData");
    int v50 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v49, "data");
    id v51 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v50, "GlobalChannelLayout");
    char v52 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v51, "mChannelBitmap");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v121);
    int v53 = *v52;
    char *v52 = 6;
    v121[0] = v53;
    AudioStreamPacketDescription v54 = (uint64_t *)*((void *)v52 + 1);
    *((void *)v52 + 1) = v48;
    double v122 = v54;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v52);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v121);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v122, v53);
    long long v55 = (uint64_t *)v39[2];
    v119[0] = 6;
    uint64_t v120 = v55;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v119);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v119);
    long long v56 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v3, "mData");
    uint64_t v57 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v56, "data");
    long long v58 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v57, "GlobalChannelLayout");
    int v59 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v58, "mNumberChannelDescriptions");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v119);
    int v60 = *v59;
    *int v59 = 6;
    v119[0] = v60;
    int v61 = (uint64_t *)*((void *)v59 + 1);
    *((void *)v59 + 1) = v55;
    uint64_t v120 = v61;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v59);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v119);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v120, v60);
  }
  std::string __p = v39;
  uint64_t v62 = v3;
  ImmersiveRendererDescriptionPointer = APAC::ImmersiveRendererData_V2_Manager::getImmersiveRendererDescriptionPointer(v4);
  if (ImmersiveRendererDescriptionPointer && v4[4])
  {
    unint64_t v64 = 0;
    int v65 = (unsigned int *)(ImmersiveRendererDescriptionPointer + 8);
    do
    {
      unsigned int v66 = v4;
      id v67 = (uint64_t *)*(v65 - 2);
      v117[0] = 6;
      uint64_t v118 = v67;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v117);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v117);
      uint64_t v68 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v62, "mData");
      id v69 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v68, "data");
      int v70 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v69, "ImmersiveRendererDescriptions");
      int v71 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v70, v64);
      uint64_t v72 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v71, "mStartChannel");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v117);
      int v73 = *v72;
      *uint64_t v72 = 6;
      v117[0] = v73;
      unsigned int v74 = (uint64_t *)*((void *)v72 + 1);
      *((void *)v72 + 1) = v67;
      uint64_t v118 = v74;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v72);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v117);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v118, v73);
      int v75 = (uint64_t *)*(v65 - 1);
      v115[0] = 6;
      v116 = v75;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v115);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v115);
      int v76 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v62, "mData");
      int v77 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v76, "data");
      uint64_t v78 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v77, "ImmersiveRendererDescriptions");
      unint64_t v79 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v78, v64);
      uint64_t v80 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v79, "mEndChannel");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v115);
      int v81 = *v80;
      *uint64_t v80 = 6;
      v115[0] = v81;
      int v82 = (uint64_t *)*((void *)v80 + 1);
      *((void *)v80 + 1) = v75;
      v116 = v82;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v80);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v115);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v116, v81);
      uint64_t v83 = (uint64_t *)*v65;
      v113[0] = 5;
      uint64_t v114 = v83;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v113);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v113);
      uint64_t v84 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v62, "mData");
      int v85 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v84, "data");
      uint64_t v86 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v85, "ImmersiveRendererDescriptions");
      uint64_t v87 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v86, v64);
      uint64_t v88 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v87, "mRendererType");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v113);
      int v89 = *v88;
      *uint64_t v88 = 5;
      v113[0] = v89;
      int v90 = (uint64_t *)*((void *)v88 + 1);
      *((void *)v88 + 1) = v83;
      uint64_t v114 = v90;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v88);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v113);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v114, v89);
      uint64_t v91 = (uint64_t *)v65[1];
      v111[0] = 6;
      uint64_t v112 = v91;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v111);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v111);
      int v92 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v62, "mData");
      uint64_t v93 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v92, "data");
      int v94 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v93, "ImmersiveRendererDescriptions");
      BOOL v95 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v94, v64);
      BOOL v96 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v95, "mRendererSubType");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v111);
      int v97 = *v96;
      *BOOL v96 = 6;
      v111[0] = v97;
      BOOL v98 = (uint64_t *)*((void *)v96 + 1);
      *((void *)v96 + 1) = v91;
      uint64_t v112 = v98;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v96);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v111);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v112, v97);
      double v99 = (uint64_t *)v65[2];
      v109[0] = 6;
      uint64_t v110 = v99;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v109);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v109);
      int64_t v100 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v62, "mData");
      __int16 v101 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v100, "data");
      char v102 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v101, "ImmersiveRendererDescriptions");
      int v103 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](v102, v64);
      uint64_t v104 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v103, "mRendererVersion");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v109);
      int v105 = *v104;
      *uint64_t v104 = 6;
      v109[0] = v105;
      uint64_t v106 = (uint64_t *)*((void *)v104 + 1);
      *((void *)v104 + 1) = v99;
      uint64_t v110 = v106;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v104);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v109);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v110, v105);
      ++v64;
      uint64_t v4 = v66;
      v65 += 5;
    }
    while (v64 < v66[4]);
  }
  if (__p) {
    operator delete(__p);
  }
  APAC::Metadata::RendererMetadataConfig::~RendererMetadataConfig((APAC::Metadata::RendererMetadataConfig *)&v140);
}

void sub_1901191E4(_Unwind_Exception *a1)
{
  APAC::Metadata::RendererMetadataConfig::~RendererMetadataConfig(v2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(v1);
  _Unwind_Resume(a1);
}

void APAC::Metadata::RendererMetadataConfig::~RendererMetadataConfig(APAC::Metadata::RendererMetadataConfig *this)
{
  uint64_t v2 = (void *)*((void *)this + 600);
  if (v2)
  {
    uint64_t v3 = (void *)*((void *)this + 601);
    uint64_t v4 = (void *)*((void *)this + 600);
    if (v3 != v2)
    {
      do
      {
        v3 -= 156;
        std::__destroy_at[abi:ne180100]<APAC::Metadata::RendererData,0>(v3);
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 600);
    }
    *((void *)this + 601) = v2;
    operator delete(v4);
  }
  uint64_t v5 = *((void *)this + 597);
  if (v5)
  {
    uint64_t v6 = *((void *)this + 598);
    int v7 = (void *)*((void *)this + 597);
    if (v6 != v5)
    {
      do
      {
        uint64_t v8 = *(void **)(v6 - 24);
        if (v8)
        {
          *(void *)(v6 - 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v8;
          operator delete(v8);
        }
        v6 -= 48;
      }
      while (v6 != v5);
      int v7 = (void *)*((void *)this + 597);
    }
    *((void *)this + 598) = v5;
    operator delete(v7);
  }
  uint64_t v9 = (void *)*((void *)this + 594);
  if (v9)
  {
    *((void *)this + 595) = v9;
    operator delete(v9);
  }
  int v10 = (void *)*((void *)this + 579);
  if (v10)
  {
    *((void *)this + 580) = v10;
    operator delete(v10);
  }
  int v11 = (void *)*((void *)this + 576);
  if (v11)
  {
    *((void *)this + 577) = v11;
    operator delete(v11);
  }
  int v12 = (void *)*((void *)this + 573);
  if (v12)
  {
    *((void *)this + 574) = v12;
    operator delete(v12);
  }
  unsigned int v13 = (void *)*((void *)this + 570);
  if (v13)
  {
    *((void *)this + 571) = v13;
    operator delete(v13);
  }
  double v14 = (void *)*((void *)this + 567);
  if (v14)
  {
    *((void *)this + 568) = v14;
    operator delete(v14);
  }
}

void std::__destroy_at[abi:ne180100]<APAC::Metadata::RendererData,0>(void *a1)
{
  uint64_t v2 = (void *)a1[152];
  if (v2)
  {
    a1[153] = v2;
    operator delete(v2);
  }
  APAC::Metadata::RendererData::RadiationPattern::~RadiationPattern((APAC::Metadata::RendererData::RadiationPattern *)(a1 + 99));
}

void APAC::ImmersiveRendererData_V2JSONStr(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  APAC::ImmersiveRendererData_V2JSON(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(a3, (uint64_t)v5, a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v6, v5[0]);
}

void sub_1901194A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
}

uint64_t GetMagicCookieSizeFromISOSampleEntry(uint64_t a1, unsigned int a2, int *a3)
{
  unsigned int v3 = *(_DWORD *)(a1 + 4);
  if (v3 == 1936552548)
  {
    if (a2 < 0x2C) {
      return 2003329396;
    }
    unsigned int v3 = *(_DWORD *)(a1 + 40);
  }
  int v5 = bswap32(v3);
  if (v5 <= 1702061170)
  {
    if (v5 <= 1684103986)
    {
      if (v5 != 1633889587)
      {
        unsigned int v9 = a2 - 72;
        if (a2 - 96 >= 0xFFFFFFC4) {
          int v10 = 0;
        }
        else {
          int v10 = 48;
        }
        if (v9 >= 0xFFFFFFDC) {
          unsigned int v11 = 2003329396;
        }
        else {
          unsigned int v11 = 0;
        }
        if (v9 >= 0x18) {
          int v12 = v10;
        }
        else {
          int v12 = 24;
        }
        if (v5 == 1634492771) {
          uint64_t result = v11;
        }
        else {
          uint64_t result = 0;
        }
        if (v5 == 1634492771) {
          int v6 = v12;
        }
        else {
          int v6 = 0;
        }
        goto LABEL_46;
      }
    }
    else if (v5 != 1684103987)
    {
      if (v5 != 1684366131)
      {
        uint64_t result = 0;
        int v6 = 0;
        if (v5 != 1700998451) {
          goto LABEL_46;
        }
      }
      goto LABEL_14;
    }
    int v13 = a2 - 36;
    BOOL v14 = a2 - 36 > 0xB;
LABEL_40:
    if (v14) {
      uint64_t result = 561213539;
    }
    else {
      uint64_t result = 0;
    }
    if (v14) {
      int v6 = 0;
    }
    else {
      int v6 = v13;
    }
    goto LABEL_46;
  }
  if (v5 > 1836069984)
  {
    uint64_t result = 0;
    if (v5 == 1935767394 || v5 == 1935764850)
    {
      int v6 = 47;
      goto LABEL_46;
    }
    int v6 = 0;
    int v7 = 1836069985;
    goto LABEL_38;
  }
  if (v5 == 1702061171)
  {
LABEL_39:
    int v13 = a2 - 48;
    BOOL v14 = a2 - 48 > 0x1000;
    goto LABEL_40;
  }
  if (v5 == 1716281667)
  {
LABEL_14:
    uint64_t result = 0;
    int v6 = a2 - 36;
    goto LABEL_46;
  }
  uint64_t result = 0;
  int v6 = 0;
  int v7 = 1832149349;
LABEL_38:
  if (v5 == v7) {
    goto LABEL_39;
  }
LABEL_46:
  *a3 = v6;
  return result;
}

uint64_t GetMagicCookieFromISOSampleEntry(uint64_t a1, unsigned int a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v4 = 561211770;
  if (a3)
  {
    LODWORD(__n[0]) = 0;
    if (GetMagicCookieSizeFromISOSampleEntry(a1, a2, (int *)__n)) {
      return 2003329396;
    }
    int v9 = __n[0];
    if (*a3 < LODWORD(__n[0])) {
      return v4;
    }
    unsigned int v10 = *(_DWORD *)(a1 + 4);
    if (v10 == 1936552548)
    {
      uint64_t v4 = 2003329396;
      if (a2 < 0x2C) {
        return v4;
      }
      unsigned int v10 = *(_DWORD *)(a1 + 40);
    }
    signed int v11 = bswap32(v10);
    uint64_t v4 = 1718449215;
    if (v11 > 1702061170)
    {
      if (v11 > 1836069984)
      {
        if (v11 == 1935767394 || v11 == 1935764850)
        {
          *(void *)a4 = 0x616D72660C000000;
          *(_DWORD *)(a4 + 8) = bswap32(v11);
          *(void *)(a4 + 12) = 0x61646E650A000000;
          *(_WORD *)(a4 + 20) = 0;
          char v18 = *(unsigned char *)(a1 + 52);
          uint64_t v19 = *(void *)(a1 + 44);
          *(_DWORD *)(a4 + 22) = *(_DWORD *)(a1 + 36);
          *(_DWORD *)(a4 + 2std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 1919770980;
          *(void *)(a4 + 30) = v19;
          *(unsigned char *)(a4 + 38) = v18;
          *(void *)(a4 + 39) = 0x8000000;
          goto LABEL_30;
        }
        int v12 = 1836069985;
        goto LABEL_21;
      }
      if (v11 == 1702061171)
      {
LABEL_22:
        int v13 = (const void *)(a1 + 48);
LABEL_29:
        memcpy((void *)a4, v13, LODWORD(__n[0]));
        goto LABEL_30;
      }
      if (v11 != 1716281667)
      {
        int v12 = 1832149349;
LABEL_21:
        if (v11 != v12) {
          return v4;
        }
        goto LABEL_22;
      }
      goto LABEL_28;
    }
    if (v11 <= 1684103986)
    {
      if (v11 != 1633889587)
      {
        if (v11 != 1634492771) {
          return v4;
        }
        int v14 = *(_DWORD *)a1;
        long long v15 = *(_OWORD *)(a1 + 48);
        *(void *)(a4 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = *(void *)(a1 + 64);
        *(_OWORD *)a4 = v15;
        if (v14 == 1610612736 && *(_DWORD *)(a1 + 76) == 1851877475)
        {
          long long v16 = *(_OWORD *)(a1 + 72);
          *(void *)(a4 + 40) = *(void *)(a1 + 88);
          *(_OWORD *)(a4 + 24) = v16;
        }
LABEL_30:
        uint64_t v4 = 0;
        *a3 = v9;
        return v4;
      }
      goto LABEL_28;
    }
    if (v11 == 1684103987 || v11 == 1684366131 || v11 == 1700998451)
    {
LABEL_28:
      int v13 = (const void *)(a1 + 36);
      goto LABEL_29;
    }
  }
  return v4;
}

void DSPGraph::IsoGroup::addBefore(DSPGraph::IsoGroup *this, DSPGraph::Box *a2, DSPGraph::Box *a3)
{
  uint64_t v35 = a2;
  std::__hash_table<DSPGraph::Box *,std::hash<DSPGraph::Box *>,std::equal_to<DSPGraph::Box *>,std::allocator<DSPGraph::Box *>>::__emplace_unique_key_args<DSPGraph::Box *,DSPGraph::Box * const&>((uint64_t)this + 16, (unint64_t)a2, (uint64_t)a2);
  *((void *)a2 + 2) = this;
  int v7 = (DSPGraph::Box **)*((void *)this + 28);
  int v6 = (DSPGraph::Box **)*((void *)this + 29);
  uint64_t v8 = v7;
  if (v7 != v6)
  {
    while (*v8 != a3)
    {
      if (++v8 == v6)
      {
        uint64_t v8 = (DSPGraph::Box **)*((void *)this + 29);
        break;
      }
    }
  }
  unint64_t v9 = *((void *)this + 30);
  if ((unint64_t)v6 >= v9)
  {
    unint64_t v14 = v6 - v7 + 1;
    if (v14 >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (char *)v8 - (char *)v7;
    uint64_t v16 = v8 - v7;
    uint64_t v17 = v9 - (void)v7;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    if (v18)
    {
      int v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v18);
    }
    else
    {
      int v20 = 0;
      uint64_t v19 = 0;
    }
    __int16 v22 = &v20[8 * v16];
    uint64_t v23 = &v20[8 * v19];
    if (v16 == v19)
    {
      if (v15 < 1)
      {
        if (v8 == v7) {
          unint64_t v25 = 1;
        }
        else {
          unint64_t v25 = v15 >> 2;
        }
        uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v25);
        __int16 v22 = &v26[8 * (v25 >> 2)];
        uint64_t v23 = &v26[8 * v27];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        unint64_t v24 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v24 = v16 + 1;
        }
        v22 -= 8 * (v24 >> 1);
      }
    }
    *(void *)__int16 v22 = a2;
    int v28 = v22 + 8;
    uint64_t v29 = (DSPGraph::Box **)*((void *)this + 28);
    if (v29 != v8)
    {
      int v30 = v8;
      do
      {
        uint64_t v31 = (uint64_t)*--v30;
        *((void *)v22 - 1) = v31;
        v22 -= 8;
      }
      while (v30 != v29);
    }
    char v32 = (DSPGraph::Box **)*((void *)this + 29);
    int64_t v33 = (char *)v32 - (char *)v8;
    if (v32 != v8) {
      memmove(v28, v8, (char *)v32 - (char *)v8);
    }
    int v34 = (void *)*((void *)this + 28);
    *((void *)this + 28) = v22;
    *((void *)this + 29) = &v28[v33];
    *((void *)this + 30) = v23;
    if (v34)
    {
      operator delete(v34);
    }
  }
  else if (v8 == v6)
  {
    *int v6 = a2;
    *((void *)this + 29) = v6 + 1;
  }
  else
  {
    unsigned int v10 = v8 + 1;
    signed int v11 = v6 - 1;
    int v12 = (void *)*((void *)this + 29);
    while (v11 < v6)
    {
      uint64_t v13 = (uint64_t)*v11++;
      *v12++ = v13;
    }
    *((void *)this + 29) = v12;
    if (v6 != v10) {
      memmove(&v6[-(v6 - v10)], v8, (char *)v6 - (char *)v10);
    }
    int v21 = v35;
    if (v8 > &v35) {
      int v21 = a2;
    }
    *uint64_t v8 = v21;
  }
}

void sub_190119AE8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

os_log_t ___ZN8DSPGraph6getLogEv_block_invoke_10603()
{
  os_log_t result = os_log_create("com.apple.coreaudio", "DSPGraph");
  DSPGraph::getLog(void)::gLog = (uint64_t)result;
  return result;
}

uint64_t DSPGraph::IsoGroup::uninitializeBoxes(uint64_t this)
{
  uint64_t v1 = *(uint64_t **)(this + 224);
  uint64_t v2 = *(uint64_t **)(this + 232);
  while (v1 != v2)
  {
    uint64_t v3 = *v1++;
    this = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 584))(v3);
  }
  return this;
}

uint64_t DSPGraph::IsoGroup::initializePropertyTaps(uint64_t this)
{
  uint64_t v1 = *(uint64_t **)(this + 224);
  uint64_t v2 = *(uint64_t **)(this + 232);
  while (v1 != v2)
  {
    uint64_t v3 = *v1++;
    this = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 608))(v3);
  }
  return this;
}

uint64_t DSPGraph::IsoGroup::uninitializePropertyTaps(uint64_t this)
{
  uint64_t v1 = *(uint64_t **)(this + 224);
  uint64_t v2 = *(uint64_t **)(this + 232);
  while (v1 != v2)
  {
    uint64_t v3 = *v1++;
    this = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 616))(v3);
  }
  return this;
}

void *DSPGraph::IsoGroup::reset(void *this)
{
  this[32] = 0;
  this[36] = 0;
  uint64_t v1 = (uint64_t *)this[28];
  uint64_t v2 = (uint64_t *)this[29];
  while (v1 != v2)
  {
    uint64_t v3 = *v1++;
    this = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 632))(v3);
  }
  return this;
}

void DSPGraph::IsoGroup::sortUpstream(uint64_t a1, char **a2)
{
  for (unint64_t i = *(void **)(a1 + 112); i; unint64_t i = (void *)*i)
    DSPGraph::IsoGroup::topologicalSort(*(void *)(i[2] + 848), a2);
}

void DSPGraph::IsoGroup::addInput(DSPGraph::IsoGroup *this, DSPGraph::FCBox *a2)
{
  *((void *)a2 + 107) = this;
}

void std::__hash_table<DSPGraph::FCBox *,std::hash<DSPGraph::FCBox *>,std::equal_to<DSPGraph::FCBox *>,std::allocator<DSPGraph::FCBox *>>::__emplace_unique_key_args<DSPGraph::FCBox *,DSPGraph::FCBox * const&>(float *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *((void *)a1 + 1);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    signed int v11 = *(void **)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (unint64_t i = (void *)*v11; i; unint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2) {
            return;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t v14 = operator new(0x18uLL);
  *unint64_t v14 = 0;
  v14[1] = v8;
  long long v14[2] = a3;
  float v15 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v16 = a1[8];
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    else {
      int8x8_t prime = (int8x8_t)v18;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v9 = *((void *)a1 + 1);
    }
    if (*(void *)&prime > v9) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v27 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (*(void *)&prime <= v27) {
        int8x8_t prime = (int8x8_t)v27;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          int v21 = operator new(8 * *(void *)&prime);
          __int16 v22 = *(void **)a1;
          *(void *)a1 = v21;
          if (v22) {
            operator delete(v22);
          }
          uint64_t v23 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v23++) = 0;
          while (*(void *)&prime != v23);
          unint64_t v24 = (void *)*((void *)a1 + 2);
          if (v24)
          {
            unint64_t v25 = v24[1];
            uint8x8_t v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(void *)&prime) {
                v25 %= *(void *)&prime;
              }
            }
            else
            {
              v25 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v25) = a1 + 4;
            int v30 = (void *)*v24;
            if (*v24)
            {
              do
              {
                unint64_t v31 = v30[1];
                if (v26.u32[0] > 1uLL)
                {
                  if (v31 >= *(void *)&prime) {
                    v31 %= *(void *)&prime;
                  }
                }
                else
                {
                  v31 &= *(void *)&prime - 1;
                }
                if (v31 != v25)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v31))
                  {
                    *(void *)(*(void *)a1 + 8 * v31) = v24;
                    goto LABEL_55;
                  }
                  void *v24 = *v30;
                  *int v30 = **(void **)(*(void *)a1 + 8 * v31);
                  **(void **)(*(void *)a1 + 8 * v31) = v30;
                  int v30 = v24;
                }
                unint64_t v31 = v25;
LABEL_55:
                unint64_t v24 = v30;
                int v30 = (void *)*v30;
                unint64_t v25 = v31;
              }
              while (v30);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        uint64_t v35 = *(void **)a1;
        *(void *)a1 = 0;
        if (v35) {
          operator delete(v35);
        }
        unint64_t v9 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  char v32 = *(void **)a1;
  int64_t v33 = *(void **)(*(void *)a1 + 8 * v3);
  if (v33)
  {
    *unint64_t v14 = *v33;
LABEL_72:
    void *v33 = v14;
    goto LABEL_73;
  }
  *unint64_t v14 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v14;
  v32[v3] = a1 + 4;
  if (*v14)
  {
    unint64_t v34 = *(void *)(*v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v34 >= v9) {
        v34 %= v9;
      }
    }
    else
    {
      v34 &= v9 - 1;
    }
    int64_t v33 = (void *)(*(void *)a1 + 8 * v34);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
}

void sub_19011A120(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void DSPGraph::IsoGroup::addOutput(DSPGraph::IsoGroup *this, DSPGraph::FCBox *a2)
{
  *((void *)a2 + 10std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = this;
}

UInt32 AudioComponentCount(const AudioComponentDescription *inDesc)
{
  if (!inDesc) {
    return 0;
  }
  AudioComponentDescription v6 = *inDesc;
  GlobalComponentPluginMgr((uint64_t *)v5);
  uint64_t v2 = *(AudioComponentMgr_Base **)v5[1]->__m_.__opaque;
  if (v2)
  {
    UInt32 v3 = 0;
    do
    {
      v3 += AudioComponentMgr_Base::match(v2, &v6, v1);
      uint64_t v2 = (AudioComponentMgr_Base *)*((void *)v2 + 3);
    }
    while (v2);
  }
  else
  {
    UInt32 v3 = 0;
  }
  if (v5[0]) {
    std::recursive_mutex::unlock(v5[0]);
  }
  return v3;
}

void sub_19011A1F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::recursive_mutex *a9)
{
  if (a9) {
    std::recursive_mutex::unlock(a9);
  }
  _Unwind_Resume(exception_object);
}

void AudioComponentInstantiate(AudioComponent inComponent, AudioComponentInstantiationOptions inOptions, void *inCompletionHandler)
{
}

uint64_t AudioUnitConnectToInstance(uint64_t a1, CFTypeRef cf, void *a3)
{
  if (a1)
  {
    xpc_object_t v3 = a3;
    if (cf)
    {
      CFRetain(cf);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cfa, cf);
      if (v3)
      {
LABEL_4:
        xpc_retain(v3);
LABEL_8:
        if (object_getClass(v3) == (Class)MEMORY[0x1E4F145A0])
        {
          xpc_retain(v3);
          xpc_object_t v7 = v3;
LABEL_11:
          xpc_release(v3);
          unint64_t v9 = v7;
          xpc_null_create();
          CFTypeRef v8 = cfa;
          CFTypeRef cfa = 0;
          create_shared_APComponent_RemoteV2WithExistingConnection((uint64_t)&v10, a1, &v9, &v8);
        }
LABEL_9:
        xpc_object_t v7 = xpc_null_create();
        goto LABEL_11;
      }
    }
    else
    {
      CFTypeRef cfa = 0;
      if (a3) {
        goto LABEL_4;
      }
    }
    xpc_object_t v3 = xpc_null_create();
    if (!v3) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  return 4294956418;
}

void sub_19011A384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, const void *a14)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  xpc_release(v14);
  applesauce::CF::StringRef::~StringRef(&a14);
  _Unwind_Resume(a1);
}

OSStatus AudioComponentCopyName(AudioComponent inComponent, CFStringRef *outName)
{
  return Impl_AudioGetComponentInfo(inComponent, 0, outName);
}

OSStatus AudioComponentGetVersion(AudioComponent inComponent, UInt32 *outVersion)
{
  OSStatus result = -50;
  if (inComponent && outVersion)
  {
    int v5 = (uint64_t (***)(void))(**(uint64_t (***)(AudioComponent))inComponent)(inComponent);
    if (v5)
    {
      uint64_t v6 = (**v5)(v5);
      OSStatus result = 0;
      *outVersion = *(_DWORD *)(v6 + 56);
    }
    else
    {
      return -3000;
    }
  }
  return result;
}

uint64_t AudioComponentCopyTagsInfo(uint64_t (***a1)(void), void *a2)
{
  uint64_t result = 4294967246;
  if (a1 && a2)
  {
    *a2 = 0;
    uint64_t v5 = (**a1)(a1);
    if (v5)
    {
      uint64_t v6 = *(const void **)(v5 + 120);
      if (v6)
      {
        CFRetain(*(CFTypeRef *)(v5 + 120));
        if (CFArrayGetCount((CFArrayRef)v6))
        {
          *a2 = v6;
          CFRetain(v6);
        }
        CFRelease(v6);
      }
      return 0;
    }
    else
    {
      return 4294964296;
    }
  }
  return result;
}

void sub_19011A534(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  applesauce::CF::ArrayRef::~ArrayRef((const void **)va);
  _Unwind_Resume(a1);
}

OSStatus AudioComponentValidate(AudioComponent inComponent, CFDictionaryRef inValidationParameters, AudioComponentValidationResult *outValidationResult)
{
  OSStatus result = -50;
  if (inComponent && outValidationResult)
  {
    *outValidationResult = kAudioComponentValidationResult_Unknown;
    uint64_t v7 = (**(uint64_t (***)(AudioComponent))inComponent)(inComponent);
    if (!v7) {
      return -3000;
    }
    uint64_t v8 = v7;
    BOOL v17 = 0;
    if (!inValidationParameters) {
      goto LABEL_20;
    }
    CFDictionaryRef v15 = inValidationParameters;
    __int16 v16 = 0;
    BOOL v14 = 0;
    CACFDictionary::GetBool((CACFDictionary *)&v15, @"clearInfoHelperCache", &v14);
    if (v14)
    {
      memset(&v13, 0, sizeof(v13));
      clearConfigInfoCache(&v13, 0);
      *(unsigned char *)(v8 + 128) = 0;
      *(_DWORD *)(v8 + 132) = 1;
      CACFDictionary::~CACFDictionary((CACFDictionary *)&v15);
      return 0;
    }
    if ((CACFDictionary::GetBool((CACFDictionary *)&v15, @"ForceValidation", &v17) & 1) == 0) {
      BOOL v17 = 0;
    }
    CACFDictionary::~CACFDictionary((CACFDictionary *)&v15);
    if (!v17)
    {
LABEL_20:
      if (*(unsigned char *)(v8 + 128))
      {
        *outValidationResult = *(AudioComponentValidationResult *)(v8 + 132);
        return 0;
      }
    }
    unint64_t v9 = (uint64_t (***)(void))(**(uint64_t (***)(AudioComponent))inComponent)(inComponent);
    if (v9) {
      AudioComponentDescription v13 = *(AudioComponentDescription *)((**v9)(v9) + 36);
    }
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 0x40000000;
    v11[2] = __AudioComponentValidate_block_invoke;
    void v11[3] = &__block_descriptor_tmp_11;
    AudioComponentDescription v12 = v13;
    v11[4] = v8;
    v11[5] = inValidationParameters;
    v11[6] = outValidationResult;
    Synchronously((uint64_t)v11);
    AudioComponentValidationResult v10 = *outValidationResult;
    if (*outValidationResult != kAudioComponentValidationResult_TimedOut)
    {
      *(unsigned char *)(v8 + 128) = 1;
      *(_DWORD *)(v8 + 132) = v10;
    }
    return 0;
  }
  return result;
}

void sub_19011A750(_Unwind_Exception *a1)
{
  CACFDictionary::~CACFDictionary((CACFDictionary *)(v1 - 56));
  _Unwind_Resume(a1);
}

void __AudioComponentValidate_block_invoke(uint64_t a1, uint64_t a2)
{
  long long v6 = *(_OWORD *)(a1 + 56);
  int v7 = *(_DWORD *)(a1 + 72);
  uint64_t v2 = *(void **)(a1 + 40);
  uint64_t v3 = *(unsigned int *)(*(void *)(a1 + 32) + 56);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  std::runtime_error v5[2] = __AudioComponentValidate_block_invoke_2;
  _OWORD v5[3] = &unk_1E5688518;
  uint64_t v4 = *(void *)(a1 + 48);
  v5[4] = a2;
  v5[5] = v4;
  validateComponent(&v6, v3, v2, v5);
}

uint64_t __AudioComponentValidate_block_invoke_2(uint64_t a1, int a2)
{
  **(_DWORD **)(a1 + 40) = a2;
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

OSStatus AudioComponentValidateWithResults(AudioComponent inComponent, CFDictionaryRef inValidationParameters, void *inCompletionHandler)
{
  if (!inComponent) {
    return -50;
  }
  uint64_t v6 = (**(uint64_t (***)(AudioComponent))inComponent)(inComponent);
  if (!v6) {
    return -3000;
  }
  uint64_t v7 = v6;
  if (!inValidationParameters) {
    goto LABEL_9;
  }
  CFDictionaryRef v15 = inValidationParameters;
  __int16 v16 = 0;
  BOOL v14 = 0;
  CACFDictionary::GetBool((CACFDictionary *)&v15, @"clearInfoHelperCache", &v14);
  if (!v14)
  {
    CACFDictionary::~CACFDictionary((CACFDictionary *)&v15);
LABEL_9:
    memset(&v13, 0, sizeof(v13));
    unint64_t v9 = (uint64_t (***)(void))(**(uint64_t (***)(AudioComponent))inComponent)(inComponent);
    if (v9) {
      AudioComponentDescription v13 = *(AudioComponentDescription *)((**v9)(v9) + 36);
    }
    AudioComponentDescription v12 = v13;
    uint64_t v10 = *(unsigned int *)(v7 + 56);
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 0x40000000;
    v11[2] = __AudioComponentValidateWithResults_block_invoke;
    void v11[3] = &unk_1E5688560;
    v11[4] = inCompletionHandler;
    v11[5] = v7;
    validateComponent((long long *)&v12, v10, inValidationParameters, v11);
    return 0;
  }
  memset(&v13, 0, sizeof(v13));
  clearConfigInfoCache(&v13, 0);
  *(unsigned char *)(v7 + 128) = 0;
  *(_DWORD *)(v7 + 132) = 1;
  (*((void (**)(void *, void, void))inCompletionHandler + 2))(inCompletionHandler, 0, 0);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v15);
  return 0;
}

void sub_19011A9D8(_Unwind_Exception *a1)
{
  CACFDictionary::~CACFDictionary((CACFDictionary *)(v1 - 48));
  _Unwind_Resume(a1);
}

uint64_t __AudioComponentValidateWithResults_block_invoke(uint64_t a1, int a2)
{
  if (a2 != 3)
  {
    uint64_t v2 = *(void *)(a1 + 40);
    *(unsigned char *)(v2 + 128) = 1;
    *(_DWORD *)(v2 + 132) = a2;
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

OSStatus AudioComponentCopyConfigurationInfo(AudioComponent inComponent, CFDictionaryRef *outConfigurationInfo)
{
  if (!outConfigurationInfo) {
    return -50;
  }
  *outConfigurationInfo = 0;
  if (!inComponent) {
    return -3000;
  }
  uint64_t v3 = (**(uint64_t (***)(AudioComponent))inComponent)(inComponent);
  if (!v3) {
    return -3000;
  }
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  std::runtime_error v5[2] = __AudioComponentCopyConfigurationInfo_block_invoke;
  _OWORD v5[3] = &__block_descriptor_tmp_15;
  v5[4] = v3;
  v5[5] = outConfigurationInfo;
  Synchronously((uint64_t)v5);
  if (*outConfigurationInfo) {
    return 0;
  }
  else {
    return 1668445032;
  }
}

uint64_t __AudioComponentCopyConfigurationInfo_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = (const AudioComponentDescription *)(v2 + 36);
  uint64_t v4 = *(unsigned int *)(v2 + 56);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  v7[2] = __AudioComponentCopyConfigurationInfo_block_invoke_2;
  void v7[3] = &unk_1E5688588;
  uint64_t v5 = *(void *)(a1 + 40);
  v7[4] = a2;
  v7[5] = v5;
  return getConfigurationInfo(v3, v4, v7);
}

uint64_t __AudioComponentCopyConfigurationInfo_block_invoke_2(uint64_t a1, uint64_t a2)
{
  **(void **)(a1 + 40) = a2;
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t non-virtual thunk to'CADeprecated::XMachServer::GetDebugName(CADeprecated::XMachServer *this)
{
  return *((void *)this - 9);
}

void non-virtual thunk to'IPCAURegistrar::~IPCAURegistrar(IPCAURegistrar *this)
{
}

{
  CADeprecated::XBasicMIGServer *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t vars8;

  uint64_t v2 = (IPCAURegistrar *)((char *)this - 80);
  *((void *)this - 10) = &unk_1EDF8F588;
  *(void *)this = &unk_1EDF8F5D0;
  uint64_t v3 = (void *)*((void *)this + 27);
  if (v3)
  {
    *((void *)this + 28) = v3;
    operator delete(v3);
  }
  OwnedPtrVector<PublishedAU_Registrar *>::~OwnedPtrVector((uint64_t)this + 176);
  uint64_t v4 = (void *)*((void *)this + 19);
  if (v4)
  {
    *((void *)this + 20) = v4;
    operator delete(v4);
  }
  *((void *)this - 10) = MEMORY[0x1E4FB94B0] + 16;
  *(void *)this = MEMORY[0x1E4FB94B0] + 88;
  uint64_t v5 = (void *)*((void *)this + 15);
  if (v5)
  {
    *((void *)this + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v5;
    operator delete(v5);
  }
  MEMORY[0x192FC7910]((char *)this + 32);
  CADeprecated::XMachPortDeathListener::~XMachPortDeathListener(this);
  CADeprecated::XBasicMIGServer::~XBasicMIGServer(v2);
}

void IPCAURegistrar::~IPCAURegistrar(IPCAURegistrar *this)
{
  *(void *)this = &unk_1EDF8F588;
  uint64_t v2 = (IPCAURegistrar *)((char *)this + 80);
  *((void *)this + 10) = &unk_1EDF8F5D0;
  uint64_t v3 = (void *)*((void *)this + 37);
  if (v3)
  {
    *((void *)this + 38) = v3;
    operator delete(v3);
  }
  OwnedPtrVector<PublishedAU_Registrar *>::~OwnedPtrVector((uint64_t)this + 256);
  uint64_t v4 = (void *)*((void *)this + 29);
  if (v4)
  {
    *((void *)this + 30) = v4;
    operator delete(v4);
  }
  *(void *)this = MEMORY[0x1E4FB94B0] + 16;
  *((void *)this + 10) = MEMORY[0x1E4FB94B0] + 88;
  uint64_t v5 = (void *)*((void *)this + 25);
  if (v5)
  {
    *((void *)this + 2std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v5;
    operator delete(v5);
  }
  MEMORY[0x192FC7910]((char *)this + 112);
  CADeprecated::XMachPortDeathListener::~XMachPortDeathListener(v2);
  CADeprecated::XBasicMIGServer::~XBasicMIGServer(this);
  JUMPOUT(0x192FC8940);
}

{
  CADeprecated::XMachPortDeathListener *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t vars8;

  *(void *)this = &unk_1EDF8F588;
  uint64_t v2 = (IPCAURegistrar *)((char *)this + 80);
  *((void *)this + 10) = &unk_1EDF8F5D0;
  uint64_t v3 = (void *)*((void *)this + 37);
  if (v3)
  {
    *((void *)this + 38) = v3;
    operator delete(v3);
  }
  OwnedPtrVector<PublishedAU_Registrar *>::~OwnedPtrVector((uint64_t)this + 256);
  uint64_t v4 = (void *)*((void *)this + 29);
  if (v4)
  {
    *((void *)this + 30) = v4;
    operator delete(v4);
  }
  *(void *)this = MEMORY[0x1E4FB94B0] + 16;
  *((void *)this + 10) = MEMORY[0x1E4FB94B0] + 88;
  uint64_t v5 = (void *)*((void *)this + 25);
  if (v5)
  {
    *((void *)this + 2std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v5;
    operator delete(v5);
  }
  MEMORY[0x192FC7910]((char *)this + 112);
  CADeprecated::XMachPortDeathListener::~XMachPortDeathListener(v2);
  CADeprecated::XBasicMIGServer::~XBasicMIGServer(this);
}

uint64_t OwnedPtrVector<PublishedAU_Registrar *>::~OwnedPtrVector(uint64_t a1)
{
  *(void *)a1 = &unk_1EDF8F830;
  OwnedPtrVector<PublishedAU_Registrar *>::erase((void *)a1, *(uint64_t **)(a1 + 8), *(uint64_t **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v2;
    operator delete(v2);
  }
  return a1;
}

void *OwnedPtrVector<PublishedAU_Registrar *>::erase(void *result, uint64_t *__dst, uint64_t *__src)
{
  if (__dst != __src)
  {
    uint64_t v5 = result;
    uint64_t v6 = __dst;
    do
    {
      OSStatus result = (void *)*v6;
      if (*v6) {
        OSStatus result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
      ++v6;
    }
    while (v6 != __src);
    uint64_t v7 = (uint64_t *)v5[2];
    int64_t v8 = (char *)v7 - (char *)__src;
    if (v7 != __src) {
      OSStatus result = memmove(__dst, __src, (char *)v7 - (char *)__src);
    }
    std::runtime_error v5[2] = (char *)__dst + v8;
  }
  return result;
}

void OwnedPtrVector<PublishedAU_Registrar *>::~OwnedPtrVector(uint64_t a1)
{
  OwnedPtrVector<PublishedAU_Registrar *>::~OwnedPtrVector(a1);
  JUMPOUT(0x192FC8940);
}

uint64_t CADeprecated::XMachServer::GetDebugName(CADeprecated::XMachServer *this)
{
  return *((void *)this + 1);
}

void IPCAURegistrar::ClientDied(IPCAURegistrar *this, CADeprecated::XMachServer::Client *a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *((void *)a2 + 2);
  if (*(CADeprecated::XMachServer::Client **)(v4 + 176) == a2)
  {
    *(void *)(v4 + 17std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
    if (kInterAppAudioScope)
    {
      uint64_t v5 = *(NSObject **)kInterAppAudioScope;
      if (!*(void *)kInterAppAudioScope) {
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v5 = MEMORY[0x1E4F14500];
    }
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_23;
    }
    *(_DWORD *)AudioFormatInfo buf = 136315394;
    unint64_t v31 = "IPCAURegistrar.mm";
    __int16 v32 = 1024;
    int v33 = 1106;
    uint64_t v6 = "%25s:%-5d server port";
    goto LABEL_22;
  }
  if (*(CADeprecated::XMachServer::Client **)(v4 + 184) != a2)
  {
    if (*(CADeprecated::XMachServer::Client **)(v4 + 192) != a2) {
      goto LABEL_23;
    }
    *(void *)(v4 + 192) = 0;
    if (kInterAppAudioScope)
    {
      uint64_t v5 = *(NSObject **)kInterAppAudioScope;
      if (!*(void *)kInterAppAudioScope) {
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v5 = MEMORY[0x1E4F14500];
    }
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_23;
    }
    *(_DWORD *)AudioFormatInfo buf = 136315394;
    unint64_t v31 = "IPCAURegistrar.mm";
    __int16 v32 = 1024;
    int v33 = 1112;
    uint64_t v6 = "%25s:%-5d extension port";
LABEL_22:
    _os_log_impl(&dword_18FEC0000, v5, OS_LOG_TYPE_DEBUG, v6, buf, 0x12u);
    goto LABEL_23;
  }
  *(void *)(v4 + 184) = 0;
  if (!kInterAppAudioScope)
  {
    uint64_t v5 = MEMORY[0x1E4F14500];
    goto LABEL_17;
  }
  uint64_t v5 = *(NSObject **)kInterAppAudioScope;
  if (*(void *)kInterAppAudioScope)
  {
LABEL_17:
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_23;
    }
    *(_DWORD *)AudioFormatInfo buf = 136315394;
    unint64_t v31 = "IPCAURegistrar.mm";
    __int16 v32 = 1024;
    int v33 = 1109;
    uint64_t v6 = "%25s:%-5d client port";
    goto LABEL_22;
  }
LABEL_23:
  (*(void (**)(CADeprecated::XMachServer::Client *))(*(void *)a2 + 8))(a2);
  uint64_t v7 = *(void *)(v4 + 176);
  if (v7 && *(_DWORD *)(v7 + 12)) {
    return;
  }
  uint64_t v8 = *(void *)(v4 + 184);
  if (v8)
  {
    if (*(_DWORD *)(v8 + 12)) {
      return;
    }
  }
  if (*(void *)(v4 + 192)) {
    return;
  }
  unint64_t v9 = (PlatformUtilities *)*(unsigned int *)(v4 + 12);
  if (!kInterAppAudioScope)
  {
    uint64_t v10 = MEMORY[0x1E4F14500];
    goto LABEL_32;
  }
  uint64_t v10 = *(NSObject **)kInterAppAudioScope;
  if (*(void *)kInterAppAudioScope)
  {
LABEL_32:
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      PlatformUtilities::processName(v9);
      signed int v11 = v29 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)AudioFormatInfo buf = 136315650;
      unint64_t v31 = "IPCAURegistrar.mm";
      __int16 v32 = 1024;
      int v33 = 1123;
      __int16 v34 = 2080;
      uint64_t v35 = v11;
      _os_log_impl(&dword_18FEC0000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d found process '%s'", buf, 0x1Cu);
      if (v29 < 0) {
        operator delete(__p);
      }
    }
  }
  AudioComponentDescription v12 = (char *)*((void *)this + 38);
  if ((int)(-1431655765 * ((uint64_t)&v12[-*((void *)this + 37)] >> 3)) >= 1)
  {
    unint64_t v13 = -1431655765 * ((uint64_t)&v12[-*((void *)this + 37)] >> 3) + 1;
    do
    {
      BOOL v14 = (_DWORD *)(*((void *)this + 37) + 24 * (v13 - 2));
      if (v14[5] == v9 || v14[4] == v9)
      {
        int64_t v16 = v12 - (char *)(v14 + 6);
        if (v12 != (char *)(v14 + 6)) {
          memmove((void *)(*((void *)this + 37) + 24 * (v13 - 2)), v14 + 6, v12 - (char *)(v14 + 6));
        }
        AudioComponentDescription v12 = (char *)v14 + v16;
        *((void *)this + 38) = (char *)v14 + v16;
      }
      --v13;
    }
    while (v13 > 1);
  }
  unint64_t v17 = *((void *)this + 34) - *((void *)this + 33);
  if ((int)(v17 >> 3) >= 1)
  {
    uint64_t v18 = (v17 >> 3);
    while (1)
    {
      uint64_t v19 = *(void *)(*((void *)this + 33) + 8 * (v18 - 1));
      if (*(void *)(v19 + 64) == v4) {
        break;
      }
LABEL_52:
      if (v18-- <= 1) {
        goto LABEL_65;
      }
    }
    IPCAURegistrar::UnpublishAU(this, (PlatformUtilities *)*(unsigned int *)(v19 + 8), (const AudioComponentDescription *)(v19 + 24));
    int v21 = (uint64_t **)*((void *)this + 29);
    __int16 v22 = (uint64_t **)*((void *)this + 30);
    while (1)
    {
      if (v21 == v22) {
        goto LABEL_52;
      }
      uint64_t v23 = *v21;
      if (*v21 != (uint64_t *)v4) {
        break;
      }
LABEL_64:
      ++v21;
    }
    if (std::__hash_table<RegistrarClientProcess *,std::hash<RegistrarClientProcess *>,std::equal_to<RegistrarClientProcess *>,std::allocator<RegistrarClientProcess *>>::find<RegistrarClientProcess *>(v23 + 10, v4))
    {
      std::__hash_table<RegistrarClientProcess *,std::hash<RegistrarClientProcess *>,std::equal_to<RegistrarClientProcess *>,std::allocator<RegistrarClientProcess *>>::__erase_unique<RegistrarClientProcess *>(v23 + 10, v4);
      unint64_t v24 = v23 + 5;
      if (!std::__hash_table<RegistrarClientProcess *,std::hash<RegistrarClientProcess *>,std::equal_to<RegistrarClientProcess *>,std::allocator<RegistrarClientProcess *>>::find<RegistrarClientProcess *>(v23 + 5, v4))goto LABEL_63; {
    }
      }
    else
    {
      unint64_t v24 = v23 + 5;
      if (!std::__hash_table<RegistrarClientProcess *,std::hash<RegistrarClientProcess *>,std::equal_to<RegistrarClientProcess *>,std::allocator<RegistrarClientProcess *>>::find<RegistrarClientProcess *>(v23 + 5, v4))goto LABEL_64; {
    }
      }
    std::__hash_table<RegistrarClientProcess *,std::hash<RegistrarClientProcess *>,std::equal_to<RegistrarClientProcess *>,std::allocator<RegistrarClientProcess *>>::__erase_unique<RegistrarClientProcess *>(v24, v4);
LABEL_63:
    RegistrarClientProcess::CheckProcessAssertion((RegistrarClientProcess *)v23);
    goto LABEL_64;
  }
LABEL_65:
  uint8x8_t v26 = (char *)*((void *)this + 29);
  unint64_t v25 = (char *)*((void *)this + 30);
  while (v26 != v25)
  {
    if (*(void *)v26 == v4)
    {
      int64_t v27 = v25 - (v26 + 8);
      if (v25 != v26 + 8) {
        memmove(v26, v26 + 8, v25 - (v26 + 8));
      }
      *((void *)this + 30) = &v26[v27];
      break;
    }
    v26 += 8;
  }
  if (v4) {
    (*(void (**)(unint64_t))(*(void *)v4 + 8))(v4);
  }
}

uint64_t IPCAURegistrar::UnpublishAU(IPCAURegistrar *this, PlatformUtilities *a2, const AudioComponentDescription *a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (!kInterAppAudioScope)
  {
    uint64_t v6 = MEMORY[0x1E4F14500];
LABEL_5:
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      PlatformUtilities::processName(a2);
      int v7 = v20;
      uint64_t v8 = (void **)__p;
      CAFormatter::CAFormatter((CAFormatter *)&v18, a3);
      CFTypeRef p_p = &__p;
      if (v7 < 0) {
        CFTypeRef p_p = v8;
      }
      *(_DWORD *)AudioFormatInfo buf = 136315906;
      __int16 v22 = "IPCAURegistrar.mm";
      __int16 v23 = 1024;
      int v24 = 761;
      __int16 v25 = 2080;
      uint8x8_t v26 = p_p;
      __int16 v27 = 2080;
      uint8x8_t v28 = v18;
      _os_log_impl(&dword_18FEC0000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d process '%s', %s", buf, 0x26u);
      if (v18) {
        free(v18);
      }
      if (v20 < 0) {
        operator delete(__p);
      }
    }
    goto LABEL_12;
  }
  uint64_t v6 = *(NSObject **)kInterAppAudioScope;
  if (*(void *)kInterAppAudioScope) {
    goto LABEL_5;
  }
LABEL_12:
  signed int v11 = (uint64_t *)*((void *)this + 33);
  uint64_t v10 = (uint64_t *)*((void *)this + 34);
  while (1)
  {
    if (v11 == v10) {
      return 4294967246;
    }
    uint64_t v12 = *v11;
    if (*(void *)&a3->componentType == *(void *)(*v11 + 24)
      && a3->componentManufacturer == (unint64_t)*(unsigned int *)(*v11 + 32))
    {
      break;
    }
    ++v11;
  }
  if (*(_DWORD *)(v12 + 8) != a2)
  {
    if (kInterAppAudioScope)
    {
      CFDictionaryRef v15 = *(NSObject **)kInterAppAudioScope;
      if (!*(void *)kInterAppAudioScope) {
        return 4294967246;
      }
    }
    else
    {
      CFDictionaryRef v15 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioFormatInfo buf = 136315394;
      __int16 v22 = "IPCAURegistrar.mm";
      __int16 v23 = 1024;
      int v24 = 767;
      _os_log_impl(&dword_18FEC0000, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d error: wrong pid", buf, 0x12u);
    }
    return 4294967246;
  }
  if (!*(unsigned char *)(v12 + 60))
  {
    if (v12)
    {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
      uint64_t v10 = (uint64_t *)*((void *)this + 34);
    }
    uint64_t v16 = (char *)v10 - (char *)(v11 + 1);
    if (v10 != v11 + 1) {
      memmove(v11, v11 + 1, (char *)v10 - (char *)(v11 + 1));
    }
    *((void *)this + 34) = (char *)v11 + v16;
    IPCAURegistrar::NotifySubscribers(this);
    return 0;
  }
  *(_DWORD *)(v12 + 8) = 0;
  *(unsigned char *)(v12 + 61) = 1;
  *(void *)(v12 + 64) = 0;
  *(void *)(v12 + 80) = *(void *)(v12 + 72);
  if (kInterAppAudioScope)
  {
    BOOL v14 = *(NSObject **)kInterAppAudioScope;
    if (!*(void *)kInterAppAudioScope) {
      return 0;
    }
  }
  else
  {
    BOOL v14 = MEMORY[0x1E4F14500];
  }
  uint64_t result = os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG);
  if (result)
  {
    *(_DWORD *)AudioFormatInfo buf = 136315394;
    __int16 v22 = "IPCAURegistrar.mm";
    __int16 v23 = 1024;
    int v24 = 778;
    _os_log_impl(&dword_18FEC0000, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d checked out registration", buf, 0x12u);
    return 0;
  }
  return result;
}

void sub_19011B684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<RegistrarClientProcess *,std::hash<RegistrarClientProcess *>,std::equal_to<RegistrarClientProcess *>,std::allocator<RegistrarClientProcess *>>::find<RegistrarClientProcess *>(void *a1, unint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  uint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  uint64_t result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v5 == v10)
      {
        if (result[2] == a2) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void std::__hash_table<RegistrarClientProcess *,std::hash<RegistrarClientProcess *>,std::equal_to<RegistrarClientProcess *>,std::allocator<RegistrarClientProcess *>>::__erase_unique<RegistrarClientProcess *>(uint64_t *a1, unint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (v2)
  {
    unint64_t v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
    unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
    unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
    uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      unint64_t v7 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
      if (v5 >= *(void *)&v2) {
        unint64_t v7 = v5 % *(void *)&v2;
      }
    }
    else
    {
      unint64_t v7 = v5 & (*(void *)&v2 - 1);
    }
    uint64_t v8 = *a1;
    unint64_t v9 = *(uint64_t ***)(*a1 + 8 * v7);
    if (v9)
    {
      unint64_t v10 = *v9;
      if (v10)
      {
        uint64_t v11 = *(void *)&v2 - 1;
        do
        {
          unint64_t v12 = v10[1];
          if (v12 == v5)
          {
            if (v10[2] == a2)
            {
              if (v6.u32[0] > 1uLL)
              {
                if (v5 >= *(void *)&v2) {
                  v5 %= *(void *)&v2;
                }
              }
              else
              {
                v5 &= v11;
              }
              unint64_t v13 = *(uint64_t **)(v8 + 8 * v5);
              do
              {
                BOOL v14 = v13;
                unint64_t v13 = (uint64_t *)*v13;
              }
              while (v13 != v10);
              if (v14 == a1 + 2) {
                goto LABEL_36;
              }
              unint64_t v15 = v14[1];
              if (v6.u32[0] > 1uLL)
              {
                if (v15 >= *(void *)&v2) {
                  v15 %= *(void *)&v2;
                }
              }
              else
              {
                v15 &= v11;
              }
              if (v15 != v5)
              {
LABEL_36:
                if (!*v10) {
                  goto LABEL_37;
                }
                unint64_t v16 = *(void *)(*v10 + 8);
                if (v6.u32[0] > 1uLL)
                {
                  if (v16 >= *(void *)&v2) {
                    v16 %= *(void *)&v2;
                  }
                }
                else
                {
                  v16 &= v11;
                }
                if (v16 != v5) {
LABEL_37:
                }
                  *(void *)(v8 + 8 * v5) = 0;
              }
              uint64_t v17 = *v10;
              if (*v10)
              {
                unint64_t v18 = *(void *)(v17 + 8);
                if (v6.u32[0] > 1uLL)
                {
                  if (v18 >= *(void *)&v2) {
                    v18 %= *(void *)&v2;
                  }
                }
                else
                {
                  v18 &= v11;
                }
                if (v18 != v5)
                {
                  *(void *)(*a1 + 8 * v18) = v14;
                  uint64_t v17 = *v10;
                }
              }
              *BOOL v14 = v17;
              *unint64_t v10 = 0;
              --a1[3];
              operator delete(v10);
              return;
            }
          }
          else
          {
            if (v6.u32[0] > 1uLL)
            {
              if (v12 >= *(void *)&v2) {
                v12 %= *(void *)&v2;
              }
            }
            else
            {
              v12 &= v11;
            }
            if (v12 != v7) {
              return;
            }
          }
          unint64_t v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
}

void RegistrarClientProcess::CheckProcessAssertion(RegistrarClientProcess *this)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = mach_absolute_time();
  BOOL v3 = *((void *)this + 13) != 0;
  if (*((void *)this + 8))
  {
    uint64_t v4 = RegistrarClientProcess::BeingDebugged((RegistrarClientProcess *)*((unsigned int *)this + 3))
       ? 14400000000
       : 1440000000;
    uint64_t v6 = *((void *)this + 25);
    uint64_t v5 = *((void *)this + 26);
    if (v6 != v5)
    {
      dispatch_time_t v7 = 0;
      while (1)
      {
        uint64_t v8 = *(void *)(*(void *)(*(void *)v6 + 8) + 24)
           + *(unsigned int *)(*(void *)(*(void *)v6 + 8) + 96);
        uint64_t v9 = *(void *)(v8 + 2168) + v4;
        if (v9 > v2)
        {
          if (v7 <= v9) {
            dispatch_time_t v7 = *(void *)(v8 + 2168) + v4;
          }
          BOOL v3 = 1;
          goto LABEL_19;
        }
        uint64_t v10 = v8 + 2048;
        if (!*(unsigned char *)(v8 + 2176)) {
          break;
        }
LABEL_19:
        v6 += 8;
        if (v6 == v5) {
          goto LABEL_22;
        }
      }
      if (kInterAppAudioScope)
      {
        uint64_t v11 = *(NSObject **)kInterAppAudioScope;
        if (!*(void *)kInterAppAudioScope)
        {
LABEL_18:
          *(unsigned char *)(v10 + 128) = 1;
          goto LABEL_19;
        }
      }
      else
      {
        uint64_t v11 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        int v12 = *((_DWORD *)this + 3);
        *(_DWORD *)AudioFormatInfo buf = 136315650;
        uint8x8_t v26 = "IPCAURegistrar.mm";
        __int16 v27 = 1024;
        int v28 = 431;
        __int16 v29 = 1024;
        LODWORD(v30) = v12;
        _os_log_impl(&dword_18FEC0000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d host has failed to render pid %d recently; dropping process assertion",
          buf,
          0x18u);
        uint64_t v5 = *((void *)this + 26);
      }
      goto LABEL_18;
    }
  }
  dispatch_time_t v7 = 0;
LABEL_22:
  uint64_t v13 = *((void *)this + 15);
  if (v2 >= v13)
  {
    if (v3) {
      goto LABEL_27;
    }
    if (!*((unsigned char *)this + 128)) {
      return;
    }
    if (kInterAppAudioScope)
    {
      unint64_t v15 = *(NSObject **)kInterAppAudioScope;
      if (!*(void *)kInterAppAudioScope)
      {
LABEL_53:
        RegistrarClientProcess::GetProcessAssertion(this);
        SBSProcessAssertionSetFlags();
        *((unsigned char *)this + 128) = 0;
        XOSTransactor::endTransaction((XOSTransactor *)((char *)this + 144));
        return;
      }
    }
    else
    {
      unint64_t v15 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      PlatformUtilities::processName((PlatformUtilities *)*((unsigned int *)this + 3));
      char v20 = v24 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioFormatInfo buf = 136315650;
      uint8x8_t v26 = "IPCAURegistrar.mm";
      __int16 v27 = 1024;
      int v28 = 459;
      __int16 v29 = 2080;
      int v30 = v20;
      _os_log_impl(&dword_18FEC0000, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d IPCAURegistrar: releasing process assertion for process '%s'", buf, 0x1Cu);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
    }
    goto LABEL_53;
  }
  if (v7 <= v13) {
    dispatch_time_t v7 = *((void *)this + 15);
  }
LABEL_27:
  if (*((unsigned char *)this + 128)) {
    goto LABEL_43;
  }
  if (!kInterAppAudioScope)
  {
    BOOL v14 = MEMORY[0x1E4F14500];
    goto LABEL_36;
  }
  BOOL v14 = *(NSObject **)kInterAppAudioScope;
  if (*(void *)kInterAppAudioScope)
  {
LABEL_36:
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      PlatformUtilities::processName((PlatformUtilities *)*((unsigned int *)this + 3));
      unint64_t v16 = v24 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioFormatInfo buf = 136315650;
      uint8x8_t v26 = "IPCAURegistrar.mm";
      __int16 v27 = 1024;
      int v28 = 442;
      __int16 v29 = 2080;
      int v30 = v16;
      _os_log_impl(&dword_18FEC0000, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d IPCAURegistrar: taking process assertion for process '%s'", buf, 0x1Cu);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  RegistrarClientProcess::GetProcessAssertion(this);
  SBSProcessAssertionSetFlags();
  *((unsigned char *)this + 128) = 1;
  XOSTransactor::beginTransaction((XOSTransactor *)((char *)this + 144));
LABEL_43:
  if (!*((unsigned char *)this + 129))
  {
    if (v7)
    {
      int v17 = *((_DWORD *)this + 2);
      *((unsigned char *)this + 129) = 1;
      dispatch_time_t v18 = dispatch_time(v7, 0);
      uint64_t v19 = *(NSObject **)(CADeprecated::TSingleton<IPCAURegistrar>::instance() + 224);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = ___ZN22RegistrarClientProcess21CheckProcessAssertionEv_block_invoke;
      block[3] = &__block_descriptor_36_e5_v8__0l;
      int v22 = v17;
      dispatch_after(v18, v19, block);
    }
  }
}

uint64_t RegistrarClientProcess::BeingDebugged(RegistrarClientProcess *this)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  *(void *)uint64_t v5 = 0xE00000001;
  int v6 = 1;
  int v7 = (int)this;
  size_t v2 = 648;
  if (sysctl(v5, 4u, v3, &v2, 0, 0) >= 0) {
    return (v4 >> 11) & 1;
  }
  else {
    return 0;
  }
}

uint64_t RegistrarClientProcess::GetProcessAssertion(RegistrarClientProcess *this)
{
  uint64_t result = *((void *)this + 17);
  if (!result)
  {
    BOOL v3 = (PlatformUtilities *)*((unsigned int *)this + 3);
    PlatformUtilities::processName(v3);
    if (v7 >= 0) {
      CFTypeRef p_p = &__p;
    }
    else {
      CFTypeRef p_p = __p;
    }
    CFStringRef v5 = CFStringCreateWithFormat(0, 0, @"IPCAU process %d-'%s'", v3, p_p);
    if (v7 < 0) {
      operator delete(__p);
    }
    *((void *)this + 17) = SBSProcessAssertionCreateForPID();
    CFRelease(v5);
    SBSProcessAssertionSetInvalidationCallBack();
    return *((void *)this + 17);
  }
  return result;
}

void sub_19011BEEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

RegistrarClientProcess *___ZN22RegistrarClientProcess21CheckProcessAssertionEv_block_invoke()
{
  uint64_t result = (RegistrarClientProcess *)BaseOpaqueObject::ResolveOpaqueRef();
  if (result)
  {
    *((unsigned char *)result + 129) = 0;
    return (RegistrarClientProcess *)RegistrarClientProcess::CheckProcessAssertion(result);
  }
  return result;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<CADeprecated::TSingleton<IPCAURegistrar>::instance(void)::{lambda(void)#1} &&>>()
{
}

void sub_19011C160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object)
{
  MEMORY[0x192FC8940](v9, 0x10F1C406A4A29DFLL);
  _Unwind_Resume(a1);
}

uint64_t GetString(const __CFDictionary *a1, const __CFString *a2, const __CFString **a3)
{
  *a3 = 0;
  uint64_t result = (uint64_t)CFDictionaryGetValue(a1, a2);
  if (result)
  {
    CFStringRef v5 = (const __CFString *)result;
    CFTypeID v6 = CFGetTypeID((CFTypeRef)result);
    if (v6 == CFStringGetTypeID())
    {
      *a3 = v5;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t IPCAURegistrar::RecordApplicationActiveTime(CFMutableDictionaryRef *this, const __CFString *a2)
{
  CFAbsoluteTime valuePtr = CFAbsoluteTimeGetCurrent();
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberFloat64Type, &valuePtr);
  CFDictionarySetValue(this[36], a2, v4);
  CFRelease(v4);
  CFPreferencesSetAppValue(@"InterAppProcessActiveTimes", this[36], @"com.apple.coreaudio");
  return CFPreferencesSynchronize(@"com.apple.coreaudio", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
}

uint64_t RegistrarClientProcess::ProcessAssertionInvalidated(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (kInterAppAudioScope)
  {
    BOOL v3 = *(NSObject **)kInterAppAudioScope;
    if (!*(void *)kInterAppAudioScope) {
      goto LABEL_11;
    }
  }
  else
  {
    BOOL v3 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    PlatformUtilities::processName((PlatformUtilities *)*(unsigned int *)(a2 + 12));
    if (v7 >= 0) {
      CFTypeRef p_p = &__p;
    }
    else {
      CFTypeRef p_p = __p;
    }
    *(_DWORD *)AudioFormatInfo buf = 136315650;
    uint64_t v9 = "IPCAURegistrar.mm";
    __int16 v10 = 1024;
    int v11 = 256;
    __int16 v12 = 2080;
    uint64_t v13 = p_p;
    _os_log_impl(&dword_18FEC0000, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d IPCAURegistrar: ProcessAssertionInvalidated: process '%s'", buf, 0x1Cu);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
LABEL_11:
  *(void *)(a2 + 13std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
  *(unsigned char *)(a2 + 128) = 0;
  return XOSTransactor::endTransaction((XOSTransactor *)(a2 + 144));
}

void IPCAURegistrar::NotifySubscribers(IPCAURegistrar *this)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (kInterAppAudioScope)
  {
    size_t v2 = *(NSObject **)kInterAppAudioScope;
    if (!*(void *)kInterAppAudioScope) {
      goto LABEL_7;
    }
  }
  else
  {
    size_t v2 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v9.msgh_bits = 136315394;
    *(void *)&v9.msgh_size_t size = "IPCAURegistrar.mm";
    LOWORD(v9.msgh_local_port) = 1024;
    *(mach_port_t *)((char *)&v9.msgh_local_port + 2) = 591;
    _os_log_impl(&dword_18FEC0000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d IPCAURegistrar::NotifySubscribers", (uint8_t *)&v9, 0x12u);
  }
LABEL_7:
  CFNumberRef v4 = (uint64_t *)*((void *)this + 29);
  BOOL v3 = (uint64_t *)*((void *)this + 30);
  if (v4 != v3)
  {
    uint64_t v5 = MEMORY[0x1E4F14B18];
    CFTypeID v6 = (ipc_space_t *)MEMORY[0x1E4F14960];
    do
    {
      uint64_t v7 = *v4;
      if (*(unsigned char *)(*v4 + 32) && !*(unsigned char *)(v7 + 33))
      {
        *(unsigned char *)(v7 + 33) = 1;
        uint64_t v8 = *(void *)(v7 + 184);
        if (v8) {
          LODWORD(v8) = *(_DWORD *)(v8 + 12);
        }
        v9.msgh_local_port = 0;
        v9.msgh_size_t size = 0;
        v9.msgh_bits = 19;
        v9.msgh_remote_port = v8;
        *(void *)&v9.msgh_voucher_port = 0x15FF400000000;
        if (v5) {
          voucher_mach_msg_set(&v9);
        }
        if (mach_msg(&v9, 17, 0x18u, 0, 0, gMediaServerTimeout, 0) == 268435460)
        {
          if ((v9.msgh_bits & 0x1F00) == 0x1100) {
            mach_port_deallocate(*v6, v9.msgh_local_port);
          }
          mach_msg_destroy(&v9);
        }
      }
      ++v4;
    }
    while (v4 != v3);
  }
}

uint64_t AURegistrationServerConnection::ServerPortDied(const char **this)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (kInterAppAudioScope)
  {
    size_t v2 = *(NSObject **)kInterAppAudioScope;
    if (!*(void *)kInterAppAudioScope) {
      goto LABEL_7;
    }
  }
  else
  {
    size_t v2 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    int v8 = 136315394;
    mach_msg_header_t v9 = "IPCAURegistrar.mm";
    __int16 v10 = 1024;
    int v11 = 1220;
    _os_log_impl(&dword_18FEC0000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d AURegistrationServerConnection::ServerPortDied", (uint8_t *)&v8, 0x12u);
  }
LABEL_7:
  int v3 = 4;
  do
  {
    int v4 = v3;
    sleep(2u);
    uint64_t result = AURegistrationServerConnection::Connect(this);
    if (!result) {
      break;
    }
    int v3 = v4 - 1;
  }
  while (v4);
  uint64_t v7 = (uint64_t)this[21];
  CFTypeID v6 = this[22];
  while ((const char *)v7 != v6)
  {
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)&v8, v7);
    if (!v12) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t))(*(void *)v12 + 48))(v12);
    uint64_t result = (uint64_t)std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&v8);
    v7 += 32;
  }
  return result;
}

void sub_19011C868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t AURegistrationServerConnection::Connect(const char **this)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  mach_port_t sp = 0;
  special_port[0] = 0;
  size_t v2 = (ipc_space_t *)MEMORY[0x1E4F14960];
  task_get_special_port(*MEMORY[0x1E4F14960], 4, special_port);
  uint64_t v3 = bootstrap_look_up(special_port[0], this[5], &sp);
  if (v3)
  {
    uint64_t v4 = v3;
    if (kInterAppAudioScope)
    {
      uint64_t v5 = *(NSObject **)kInterAppAudioScope;
      if (!*(void *)kInterAppAudioScope) {
        return v4;
      }
    }
    else
    {
      uint64_t v5 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      special_port[0] = 136315906;
      *(void *)&special_port[1] = "IPCAURegistrar.mm";
      LOWORD(special_port[3]) = 1024;
      *(mach_port_t *)((char *)&special_port[3] + 2) = 1204;
      HIWORD(special_port[4]) = 2080;
      *(void *)&special_port[5] = "com.apple.audio.AudioUnitServer";
      LOWORD(special_port[7]) = 1024;
      *(mach_port_t *)((char *)&special_port[7] + 2) = v4;
      mach_msg_header_t v9 = "%25s:%-5d IPCAUClient: can't locate server %s (%d)";
      __int16 v10 = v5;
      uint32_t v11 = 34;
LABEL_42:
      _os_log_impl(&dword_18FEC0000, v10, OS_LOG_TYPE_ERROR, v9, (uint8_t *)special_port, v11);
      return v4;
    }
    return v4;
  }
  CADeprecated::XRemoteMachServer::SetServerPort((CADeprecated::XRemoteMachServer *)this);
  mach_port_t v6 = *((_DWORD *)this + 12);
  memset(&special_port[1], 0, 44);
  mach_port_name_t reply_port = mig_get_reply_port();
  special_port[2] = v6;
  special_port[3] = reply_port;
  special_port[0] = 5395;
  *(void *)&special_port[4] = 0x15F9000000000;
  if (MEMORY[0x1E4F14B18])
  {
    voucher_mach_msg_set((mach_msg_header_t *)special_port);
    mach_port_name_t reply_port = special_port[3];
  }
  uint64_t v8 = mach_msg((mach_msg_header_t *)special_port, 275, 0x18u, 0x30u, reply_port, gMediaServerTimeout, 0);
  uint64_t v4 = v8;
  if ((v8 - 268435458) <= 0xE && ((1 << (v8 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(special_port[3]);
    goto LABEL_26;
  }
  if (!v8)
  {
    if (special_port[5] == 71)
    {
      uint64_t v4 = 4294966988;
    }
    else if (special_port[5] == 90100)
    {
      if ((special_port[0] & 0x80000000) == 0)
      {
        if (special_port[1] == 40)
        {
          if (!special_port[2])
          {
            uint64_t v4 = special_port[8];
            if (!special_port[8])
            {
              mach_port_t v15 = special_port[9];
              goto LABEL_45;
            }
            goto LABEL_34;
          }
        }
        else if (special_port[1] == 36)
        {
          if (special_port[2]) {
            BOOL v12 = 1;
          }
          else {
            BOOL v12 = special_port[8] == 0;
          }
          if (v12) {
            uint64_t v4 = 4294966996;
          }
          else {
            uint64_t v4 = special_port[8];
          }
          goto LABEL_34;
        }
      }
      uint64_t v4 = 4294966996;
    }
    else
    {
      uint64_t v4 = 4294966995;
    }
LABEL_34:
    mach_msg_destroy((mach_msg_header_t *)special_port);
    goto LABEL_35;
  }
  mig_dealloc_reply_port(special_port[3]);
LABEL_26:
  if (v4 != 268435460)
  {
LABEL_35:
    if (v4) {
      goto LABEL_36;
    }
    mach_port_t v15 = 0;
LABEL_45:
    *((_DWORD *)this + 13) = v15;
    if (kInterAppAudioScope)
    {
      uint64_t v4 = *(void *)kInterAppAudioScope;
      if (!*(void *)kInterAppAudioScope) {
        return v4;
      }
    }
    else
    {
      uint64_t v4 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_DEBUG))
    {
      mach_port_t v16 = *((_DWORD *)this + 12);
      special_port[0] = 136315906;
      *(void *)&special_port[1] = "IPCAURegistrar.mm";
      LOWORD(special_port[3]) = 1024;
      *(mach_port_t *)((char *)&special_port[3] + 2) = 1214;
      HIWORD(special_port[4]) = 1024;
      special_port[5] = v16;
      LOWORD(special_port[6]) = 1024;
      *(mach_port_t *)((char *)&special_port[6] + 2) = v15;
      _os_log_impl(&dword_18FEC0000, (os_log_t)v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d AURegistrationServerConnection: in client, using port 0x%x in server process %d", (uint8_t *)special_port, 0x1Eu);
    }
    return 0;
  }
  if ((special_port[0] & 0x1F00) == 0x1100) {
    mach_port_deallocate(*v2, special_port[3]);
  }
  mach_msg_destroy((mach_msg_header_t *)special_port);
  uint64_t v4 = 268435460;
LABEL_36:
  if (kInterAppAudioScope)
  {
    uint64_t v13 = *(NSObject **)kInterAppAudioScope;
    if (!*(void *)kInterAppAudioScope) {
      return v4;
    }
  }
  else
  {
    uint64_t v13 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    special_port[0] = 136315650;
    *(void *)&special_port[1] = "IPCAURegistrar.mm";
    LOWORD(special_port[3]) = 1024;
    *(mach_port_t *)((char *)&special_port[3] + 2) = 1210;
    HIWORD(special_port[4]) = 1024;
    special_port[5] = v4;
    mach_msg_header_t v9 = "%25s:%-5d IPCAUClient: can't connect to server (%d)";
    __int16 v10 = v13;
    uint32_t v11 = 24;
    goto LABEL_42;
  }
  return v4;
}

void AURegistrationServerConnection::~AURegistrationServerConnection(AURegistrationServerConnection *this)
{
  *(void *)this = &unk_1EDF94578;
  size_t v2 = (void **)((char *)this + 168);
  MEMORY[0x192FC7860]((char *)this + 192);
  uint64_t v3 = v2;
  std::vector<std::function<void ()(void)>>::__destroy_vector::operator()[abi:ne180100](&v3);
  CADeprecated::XRemoteMachServer::~XRemoteMachServer(this);
  JUMPOUT(0x192FC8940);
}

{
  void **v2;
  void **v3;
  uint64_t vars8;

  *(void *)this = &unk_1EDF94578;
  size_t v2 = (void **)((char *)this + 168);
  MEMORY[0x192FC7860]((char *)this + 192);
  uint64_t v3 = v2;
  std::vector<std::function<void ()(void)>>::__destroy_vector::operator()[abi:ne180100](&v3);
  CADeprecated::XRemoteMachServer::~XRemoteMachServer(this);
}

void std::vector<std::function<void ()(void)>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  size_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        uint64_t v4 = std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v4 - 4);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void PublishedAU::~PublishedAU(CFTypeRef *this)
{
  PublishedAU::~PublishedAU(this);
  JUMPOUT(0x192FC8940);
}

{
  *this = &unk_1EDF8C3F0;
  CFRelease(this[6]);
  CFRelease(this[2]);
}

void IPCAURegistrar_InitServer()
{
  CADeprecated::TSingleton<IPCAURegistrar>::instance();
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_async(global_queue, &__block_literal_global_10689);
}

void *IPCAURegistrar::FindOrCreateClientProcess(uint64_t a1, int a2, int a3, int a4)
{
  if (!a3) {
    return 0;
  }
  for (uint64_t i = *(void *)(a1 + 232); ; i += 8)
  {
    if (i == *(void *)(a1 + 240)) {
      operator new();
    }
    uint64_t v5 = *(void **)i;
    if (*(_DWORD *)(*(void *)i + 12) == a4) {
      break;
    }
  }
  if (a2)
  {
    if (a2 == 2)
    {
      if (!v5[24]) {
        operator new();
      }
    }
    else if (a2 == 1)
    {
      uint64_t v6 = v5[22];
      if (!v6 || !*(_DWORD *)(v6 + 12)) {
        operator new();
      }
    }
  }
  else
  {
    uint64_t v7 = v5[23];
    if (!v7 || !*(_DWORD *)(v7 + 12)) {
      operator new();
    }
  }
  return v5;
}

void sub_19011D240(_Unwind_Exception *a1)
{
  MEMORY[0x192FC8940](v1, 0x10A1C40319E9F20);
  _Unwind_Resume(a1);
}

BOOL TOpaqueObject<CADeprecated::XMachServer::Client,unsigned int,BaseOpaqueObject>::isa(uint64_t a1, void *a2)
{
  return a2 == &TOpaqueRTTI<CADeprecated::XMachServer::Client>::sRTTI || a2 == (void *)MEMORY[0x1E4FB9468];
}

void RegistrarClientProcess::ClientPort::~ClientPort(RegistrarClientProcess::ClientPort *this)
{
  *(void *)this = &unk_1EDF94C60;
  MEMORY[0x192FC78A0]((char *)this + 12);
  BaseOpaqueObject::~BaseOpaqueObject(this);
  JUMPOUT(0x192FC8940);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EDF94C60;
  MEMORY[0x192FC78A0]((char *)this + 12);
  BaseOpaqueObject::~BaseOpaqueObject(this);
}

void CADeprecated::XMachServer::Client::~Client(CADeprecated::XMachServer::Client *this)
{
  *(void *)this = &unk_1EDF94C60;
  MEMORY[0x192FC78A0]((char *)this + 12);
  BaseOpaqueObject::~BaseOpaqueObject(this);
  JUMPOUT(0x192FC8940);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EDF94C60;
  MEMORY[0x192FC78A0]((char *)this + 12);
  BaseOpaqueObject::~BaseOpaqueObject(this);
}

void std::vector<std::unique_ptr<RegistrarClientProcess::SharedMemoryBlock>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  size_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        void *v4 = 0;
        if (v7) {
          std::default_delete<RegistrarClientProcess::SharedMemoryBlock>::operator()[abi:ne180100](v6);
        }
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::default_delete<RegistrarClientProcess::SharedMemoryBlock>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  JUMPOUT(0x192FC8940);
}

BOOL TOpaqueObject<RegistrarClientProcess,unsigned int,BaseOpaqueObject>::isa(uint64_t a1, void *a2)
{
  return a2 == &TOpaqueRTTI<RegistrarClientProcess>::sRTTI || a2 == (void *)MEMORY[0x1E4FB9468];
}

void RegistrarClientProcess::~RegistrarClientProcess(RegistrarClientProcess *this)
{
  RegistrarClientProcess::~RegistrarClientProcess(this);
  JUMPOUT(0x192FC8940);
}

{
  const void *v2;
  void **v3;
  uint64_t vars8;

  *(void *)this = &unk_1EDF938D0;
  uint64_t v2 = (const void *)*((void *)this + 17);
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(*((CFTypeRef *)this + 2));
  CFRelease(*((CFTypeRef *)this + 3));
  uint64_t v3 = (void **)((char *)this + 200);
  std::vector<std::unique_ptr<RegistrarClientProcess::SharedMemoryBlock>>::__destroy_vector::operator()[abi:ne180100](&v3);
  XOSTransactor::endTransaction((XOSTransactor *)((char *)this + 144));
  BaseOpaqueObject::~BaseOpaqueObject(this);
}

void IPCAURegistrar::RegisterAUsFrom1App(IPCAURegistrar *this, CFTypeRef cf, void *a3, void *a4)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  CFTypeID v7 = CFGetTypeID(cf);
  if (v7 != CFArrayGetTypeID()) {
    return;
  }
  CFIndex Count = CFArrayGetCount((CFArrayRef)cf);
  if (Count < 1) {
    return;
  }
  CFIndex v9 = Count;
  CFIndex v10 = 0;
  uint64_t v25 = *MEMORY[0x1E4F4E260];
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)cf, v10);
    CFTypeID v12 = CFGetTypeID(ValueAtIndex);
    if (v12 == CFDictionaryGetTypeID()) {
      break;
    }
    if (++v10 == v9) {
      return;
    }
  }
  if (kInterAppAudioScope)
  {
    uint64_t v13 = *(NSObject **)kInterAppAudioScope;
    if (!*(void *)kInterAppAudioScope) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v13 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioFormatInfo buf = 136315906;
    int v30 = "IPCAURegistrar.mm";
    __int16 v31 = 1024;
    int v32 = 653;
    __int16 v33 = 2112;
    *(void *)__int16 v34 = this;
    *(_WORD *)&v34[8] = 2112;
    *(void *)&v34[10] = ValueAtIndex;
    _os_log_impl(&dword_18FEC0000, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d %@ %@", buf, 0x26u);
  }
LABEL_11:
  CFTypeRef cfa = 0;
  memset(inDesc, 0, sizeof(inDesc));
  if (!Get4CCOrNumber((const __CFDictionary *)ValueAtIndex, @"type", (unsigned int *)inDesc)
    || !Get4CCOrNumber((const __CFDictionary *)ValueAtIndex, @"subtype", (unsigned int *)&inDesc[4])
    || !Get4CCOrNumber((const __CFDictionary *)ValueAtIndex, @"manufacturer", (unsigned int *)&inDesc[8])|| !GetString((const __CFDictionary *)ValueAtIndex, @"name", (const __CFString **)&cfa)|| (GetNumber((const __CFDictionary *)ValueAtIndex, @"version", (unsigned int *)&inDesc[20]) & 1) == 0)
  {
    if (kInterAppAudioScope)
    {
      uint64_t v19 = *(NSObject **)kInterAppAudioScope;
      if (!*(void *)kInterAppAudioScope) {
        return;
      }
    }
    else
    {
      uint64_t v19 = MEMORY[0x1E4F14500];
    }
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_DWORD *)AudioFormatInfo buf = 136315650;
    int v30 = "IPCAURegistrar.mm";
    __int16 v31 = 1024;
    int v32 = 666;
    __int16 v33 = 2112;
    *(void *)__int16 v34 = this;
    char v20 = "%25s:%-5d Missing required key(s) in AudioComponents for %@";
    int v21 = v19;
    uint32_t v22 = 28;
LABEL_34:
    _os_log_impl(&dword_18FEC0000, v21, OS_LOG_TYPE_ERROR, v20, buf, v22);
    return;
  }
  int v14 = *(_DWORD *)inDesc;
  if ((*(_DWORD *)inDesc - 1635086951) > 0x11 || ((1 << (inDesc[0] - 103)) & 0x20045) == 0)
  {
    if (kInterAppAudioScope)
    {
      char v24 = *(NSObject **)kInterAppAudioScope;
      if (!*(void *)kInterAppAudioScope) {
        return;
      }
    }
    else
    {
      char v24 = MEMORY[0x1E4F14500];
    }
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_DWORD *)AudioFormatInfo buf = 136315906;
    int v30 = "IPCAURegistrar.mm";
    __int16 v31 = 1024;
    int v32 = 677;
    __int16 v33 = 1024;
    *(_DWORD *)__int16 v34 = v14;
    *(_WORD *)&v34[4] = 2112;
    *(void *)&v34[6] = this;
    char v20 = "%25s:%-5d Cannot register AudioComponent with type '%d' as requested by %@";
    int v21 = v24;
    uint32_t v22 = 34;
    goto LABEL_34;
  }
  if (!AudioComponentFindNext(0, (const AudioComponentDescription *)inDesc))
  {
    mach_port_t v15 = NSClassFromString(&cfstr_Bksapplication.isa);
    if (v15)
    {
      id v16 = objc_alloc_init(v15);
      int v17 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v16, "applicationInfoForApplication:", this), "objectForKeyedSubscript:", v25), "intValue");

      if (v17 >= 1)
      {
        for (uint64_t i = a3[29]; i != a3[30] && *(_DWORD *)(*(void *)i + 12) != v17; i += 8)
          ;
      }
    }
    operator new();
  }
  if (kInterAppAudioScope)
  {
    __int16 v23 = *(NSObject **)kInterAppAudioScope;
    if (!*(void *)kInterAppAudioScope) {
      return;
    }
  }
  else
  {
    __int16 v23 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
  {
    CAFormatter::CAFormatter((CAFormatter *)&v26, (const AudioComponentDescription *)inDesc);
    *(_DWORD *)AudioFormatInfo buf = 136315906;
    int v30 = "IPCAURegistrar.mm";
    __int16 v31 = 1024;
    int v32 = 684;
    __int16 v33 = 2080;
    *(void *)__int16 v34 = v26;
    *(_WORD *)&v34[8] = 2112;
    *(void *)&v34[10] = this;
    _os_log_impl(&dword_18FEC0000, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot register duplicate AudioComponent description '%s' as requested by %@", buf, 0x26u);
    if (v26) {
      free(v26);
    }
  }
}

void sub_19011DC54(_Unwind_Exception *a1)
{
  MEMORY[0x192FC8940](v1, 0x10E1C409F7E78A9);
  _Unwind_Resume(a1);
}

uint64_t Get4CCOrNumber(const __CFDictionary *a1, const __CFString *a2, unsigned int *a3)
{
  *a3 = 0;
  uint64_t result = (uint64_t)CFDictionaryGetValue(a1, a2);
  if (result)
  {
    CFStringRef v5 = (const __CFString *)result;
    CFTypeID v6 = CFGetTypeID((CFTypeRef)result);
    if (v6 == CFStringGetTypeID())
    {
      if (CFStringGetLength(v5) == 4)
      {
        CFStringGetCString(v5, buffer, 5, 0x600u);
        *a3 = bswap32(*(unsigned int *)buffer);
        return 1;
      }
    }
    else
    {
      CFTypeID v7 = CFGetTypeID(v5);
      if (v7 == CFNumberGetTypeID()) {
        return CFNumberGetValue((CFNumberRef)v5, kCFNumberSInt32Type, a3) != 0;
      }
    }
    return 0;
  }
  return result;
}

void PublishedAU_Registrar::~PublishedAU_Registrar(PublishedAU_Registrar *this)
{
  PublishedAU_Registrar::~PublishedAU_Registrar(this);
  JUMPOUT(0x192FC8940);
}

{
  uint64_t v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EDF93570;
  uint64_t v2 = *((void *)this + 8);
  if (v2) {
    --*(_DWORD *)(v2 + 36);
  }
  uint64_t v3 = (void *)*((void *)this + 9);
  if (v3)
  {
    *((void *)this + 10) = v3;
    operator delete(v3);
  }
  PublishedAU::~PublishedAU((CFTypeRef *)this);
}

void ___ZN14IPCAURegistrar25RegisterAUsFromAppBundlesEPK14__CFDictionary_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  OwnedPtrVector<PublishedAU_Registrar *>::erase((void *)(v2 + 256), *(uint64_t **)(v2 + 264), *(uint64_t **)(v2 + 272));
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 40), (CFDictionaryApplierFunction)IPCAURegistrar::RegisterAUsFrom1App, (void *)v2);
  IPCAURegistrar::NotifySubscribers((IPCAURegistrar *)v2);
}

void ___ZN14IPCAURegistrar19CheckLaunchAUServerEiRK25AudioComponentDescriptionjRi_block_invoke(uint64_t a1, uint64_t a2, PlatformUtilities *a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (kInterAppAudioScope)
    {
      CFStringRef v5 = *(NSObject **)kInterAppAudioScope;
      if (!*(void *)kInterAppAudioScope)
      {
LABEL_13:
        uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 184);
        if (v9) {
          mach_port_t v10 = *(_DWORD *)(v9 + 12);
        }
        else {
          mach_port_t v10 = 0;
        }
        int v11 = *(_DWORD *)(a1 + 64);
        int v12 = 0;
LABEL_17:
        IPCAUCallbackSender_LaunchRequestComplete(v10, v11, v12);
        return;
      }
    }
    else
    {
      CFStringRef v5 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioFormatInfo buf = 136315650;
      *(void *)&uint8_t buf[4] = "IPCAURegistrar.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 920;
      *(_WORD *)&unsigned char buf[18] = 2112;
      *(void *)&buf[20] = a2;
      _os_log_impl(&dword_18FEC0000, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d launch failed, error %@", buf, 0x1Cu);
    }
    goto LABEL_13;
  }
  if ((int)a3 < 1)
  {
    if (kInterAppAudioScope)
    {
      uint64_t v13 = *(NSObject **)kInterAppAudioScope;
      if (!*(void *)kInterAppAudioScope)
      {
LABEL_35:
        PublishedAU_Registrar::AddCheckinPing(*(PublishedAU_Registrar **)(a1 + 56), *(_DWORD *)(a1 + 68), *(unsigned int *)(a1 + 64));
        return;
      }
    }
    else
    {
      uint64_t v13 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioFormatInfo buf = 136315394;
      *(void *)&uint8_t buf[4] = "IPCAURegistrar.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 937;
      _os_log_impl(&dword_18FEC0000, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d launching, will wait for checkin", buf, 0x12u);
    }
    goto LABEL_35;
  }
  uint64_t v7 = *(void *)(a1 + 56);
  if (*(void *)(v7 + 64))
  {
    if (kInterAppAudioScope)
    {
      uint64_t v8 = *(NSObject **)kInterAppAudioScope;
      if (!*(void *)kInterAppAudioScope)
      {
LABEL_28:
        uint64_t v15 = *(void *)(*(void *)(a1 + 48) + 184);
        if (v15) {
          mach_port_t v10 = *(_DWORD *)(v15 + 12);
        }
        else {
          mach_port_t v10 = 0;
        }
        int v11 = *(_DWORD *)(a1 + 64);
        int v12 = 1;
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v8 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioFormatInfo buf = 136315650;
      *(void *)&uint8_t buf[4] = "IPCAURegistrar.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 923;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = a3;
      _os_log_impl(&dword_18FEC0000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d already running[%d] and checked in", buf, 0x18u);
    }
    goto LABEL_28;
  }
  if (*(unsigned char *)(v7 + 61))
  {
    if (kInterAppAudioScope)
    {
      int v14 = *(NSObject **)kInterAppAudioScope;
      if (!*(void *)kInterAppAudioScope)
      {
LABEL_42:
        *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = -3000;
        return;
      }
    }
    else
    {
      int v14 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = *(void *)(v7 + 16);
      *(_DWORD *)AudioFormatInfo buf = 136315906;
      *(void *)&uint8_t buf[4] = "IPCAURegistrar.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 926;
      *(_WORD *)&unsigned char buf[18] = 2112;
      *(void *)&buf[20] = v17;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = a3;
      _os_log_impl(&dword_18FEC0000, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Node app '%@' already running[%d], but has explicitly unpublished itself. Failing.", buf, 0x22u);
    }
    goto LABEL_42;
  }
  if (kInterAppAudioScope)
  {
    id v16 = *(NSObject **)kInterAppAudioScope;
    if (!*(void *)kInterAppAudioScope) {
      goto LABEL_46;
    }
  }
  else
  {
    id v16 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioFormatInfo buf = 136315650;
    *(void *)&uint8_t buf[4] = "IPCAURegistrar.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 929;
    *(_WORD *)&unsigned char buf[18] = 1024;
    *(_DWORD *)&buf[20] = a3;
    _os_log_impl(&dword_18FEC0000, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d already running[%d], not checked in (server crashed?); will wake and wait for checkin",
      buf,
      0x18u);
    uint64_t v7 = *(void *)(a1 + 56);
  }
LABEL_46:
  PublishedAU_Registrar::AddCheckinPing((PublishedAU_Registrar *)v7, *(_DWORD *)(a1 + 68), *(unsigned int *)(a1 + 64));
  CFStringRef v18 = CFStringCreateWithFormat(0, 0, @"IPCAU process %d:wake", a3);
  uint64_t v19 = SBSProcessAssertionCreateForPID();
  CFRelease(v18);
  if (!kInterAppAudioScope)
  {
    char v20 = MEMORY[0x1E4F14500];
    goto LABEL_50;
  }
  char v20 = *(NSObject **)kInterAppAudioScope;
  if (*(void *)kInterAppAudioScope)
  {
LABEL_50:
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      PlatformUtilities::processName(a3);
      int v21 = v25 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)AudioFormatInfo buf = 136315650;
      *(void *)&uint8_t buf[4] = "IPCAURegistrar.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 965;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v21;
      _os_log_impl(&dword_18FEC0000, v20, OS_LOG_TYPE_DEBUG, "%25s:%-5d waking sleeping node '%s'", buf, 0x1Cu);
      if (v25 < 0) {
        operator delete(__p);
      }
    }
  }
  SBSProcessAssertionSetFlags();
  dispatch_time_t v22 = dispatch_time(0, 10000000000);
  global_queue = dispatch_get_global_queue(0, 0);
  *(void *)AudioFormatInfo buf = MEMORY[0x1E4F143A8];
  *(void *)&buf[8] = 3221225472;
  *(void *)&buf[16] = ___ZN14IPCAURegistrar18WakeSleepingServerEi_block_invoke;
  *(void *)&unsigned char buf[24] = &__block_descriptor_44_e5_v8__0l;
  *(void *)&uint8_t buf[32] = v19;
  int v27 = (int)a3;
  dispatch_after(v22, global_queue, buf);
}

void PublishedAU_Registrar::AddCheckinPing(PublishedAU_Registrar *this, unsigned int a2, uint64_t a3)
{
  uint64_t v7 = (char *)*((void *)this + 9);
  CFTypeID v6 = (char *)*((void *)this + 10);
  if (v7 != v6)
  {
    while (*(_DWORD *)v7 != a2)
    {
      v7 += 8;
      if (v7 == v6)
      {
        uint64_t v7 = (char *)*((void *)this + 10);
        goto LABEL_8;
      }
    }
    int64_t v8 = v6 - (v7 + 8);
    if (v6 != v7 + 8) {
      memmove(v7, v7 + 8, v6 - (v7 + 8));
    }
    v7 += v8;
    *((void *)this + 10) = v7;
  }
LABEL_8:
  unint64_t v9 = *((void *)this + 11);
  if ((unint64_t)v7 >= v9)
  {
    int v11 = (char *)*((void *)this + 9);
    uint64_t v12 = (v7 - v11) >> 3;
    unint64_t v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = v9 - (void)v11;
    if (v14 >> 2 > v13) {
      unint64_t v13 = v14 >> 2;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      if (v15 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      id v16 = (char *)operator new(8 * v15);
    }
    else
    {
      id v16 = 0;
    }
    uint64_t v17 = &v16[8 * v12];
    *(void *)uint64_t v17 = a2 | (unint64_t)(a3 << 32);
    mach_port_t v10 = v17 + 8;
    if (v7 != v11)
    {
      do
      {
        uint64_t v18 = *((void *)v7 - 1);
        v7 -= 8;
        *((void *)v17 - 1) = v18;
        v17 -= 8;
      }
      while (v7 != v11);
      uint64_t v7 = (char *)*((void *)this + 9);
    }
    *((void *)this + 9) = v17;
    *((void *)this + 10) = v10;
    *((void *)this + 11) = &v16[8 * v15];
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    *(void *)uint64_t v7 = a2 | (unint64_t)(a3 << 32);
    mach_port_t v10 = v7 + 8;
  }
  *((void *)this + 10) = v10;
}

void ___ZN14IPCAURegistrar18WakeSleepingServerEi_block_invoke(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  SBSProcessAssertionSetFlags();
  CFRelease(*(CFTypeRef *)(a1 + 32));
  if (kInterAppAudioScope)
  {
    uint64_t v2 = *(NSObject **)kInterAppAudioScope;
    if (!*(void *)kInterAppAudioScope) {
      return;
    }
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    PlatformUtilities::processName((PlatformUtilities *)*(unsigned int *)(a1 + 40));
    if (v5 >= 0) {
      CFTypeRef p_p = &__p;
    }
    else {
      CFTypeRef p_p = __p;
    }
    *(_DWORD *)AudioFormatInfo buf = 136315650;
    uint64_t v7 = "IPCAURegistrar.mm";
    __int16 v8 = 1024;
    int v9 = 973;
    __int16 v10 = 2080;
    int v11 = p_p;
    _os_log_impl(&dword_18FEC0000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d released assertion on sleeping node '%s'", buf, 0x1Cu);
    if (v5 < 0) {
      operator delete(__p);
    }
  }
}

uint64_t IPCAURegistrar::SetProcessWakeState(IPCAURegistrar *this, int a2, RegistrarClientProcess *a3, int a4, int *a5)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (kInterAppAudioScope)
  {
    __int16 v10 = *(NSObject **)kInterAppAudioScope;
    if (!*(void *)kInterAppAudioScope) {
      goto LABEL_11;
    }
  }
  else
  {
    __int16 v10 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    PlatformUtilities::processName(a3);
    if (v19 >= 0) {
      CFTypeRef p_p = &__p;
    }
    else {
      CFTypeRef p_p = __p;
    }
    *(_DWORD *)AudioFormatInfo buf = 136315906;
    int v21 = "IPCAURegistrar.mm";
    __int16 v22 = 1024;
    int v23 = 1030;
    __int16 v24 = 2080;
    char v25 = p_p;
    __int16 v26 = 1024;
    int v27 = a4;
    _os_log_impl(&dword_18FEC0000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d process '%s', state %d", buf, 0x22u);
    if (v19 < 0) {
      operator delete(__p);
    }
  }
LABEL_11:
  uint64_t v12 = (float **)*((void *)this + 29);
  unint64_t v13 = (float **)*((void *)this + 30);
  if (v12 == v13) {
    return 4294967246;
  }
  uint64_t v14 = (RegistrarClientProcess **)*((void *)this + 29);
  while (1)
  {
    unint64_t v15 = *v14;
    if (*((_DWORD *)*v14 + 3) == a2) {
      break;
    }
    if (++v14 == (RegistrarClientProcess **)v13) {
      return 4294967246;
    }
  }
  while (1)
  {
    uint64_t v17 = *v12;
    if (*((_DWORD *)*v12 + 3) == a3) {
      break;
    }
    if (++v12 == v13) {
      return 4294967246;
    }
  }
  if (a4)
  {
    *a5 = 0;
    return RegistrarClientProcess::SetProcessWakeState((RegistrarClientProcess *)v17, a4, v15);
  }
  else
  {
    *a5 = RegistrarClientProcess::BeingDebugged(a3);
    std::__hash_table<RegistrarClientProcess *,std::hash<RegistrarClientProcess *>,std::equal_to<RegistrarClientProcess *>,std::allocator<RegistrarClientProcess *>>::__emplace_unique_key_args<RegistrarClientProcess *,RegistrarClientProcess * const&>(v17 + 20, (unint64_t)v15, (uint64_t)v15);
    RegistrarClientProcess::CheckProcessAssertion((RegistrarClientProcess *)v17);
    return 0;
  }
}

uint64_t RegistrarClientProcess::SetProcessWakeState(RegistrarClientProcess *this, int a2, RegistrarClientProcess *a3)
{
  switch(a2)
  {
    case 0:
      uint64_t v4 = (float *)((char *)this + 80);
      goto LABEL_6;
    case 1:
      CFTypeID v6 = (uint64_t *)((char *)this + 80);
      goto LABEL_8;
    case 2:
      uint64_t v4 = (float *)((char *)this + 40);
LABEL_6:
      std::__hash_table<RegistrarClientProcess *,std::hash<RegistrarClientProcess *>,std::equal_to<RegistrarClientProcess *>,std::allocator<RegistrarClientProcess *>>::__emplace_unique_key_args<RegistrarClientProcess *,RegistrarClientProcess * const&>(v4, (unint64_t)a3, (uint64_t)a3);
      goto LABEL_9;
    case 3:
      CFTypeID v6 = (uint64_t *)((char *)this + 40);
LABEL_8:
      std::__hash_table<RegistrarClientProcess *,std::hash<RegistrarClientProcess *>,std::equal_to<RegistrarClientProcess *>,std::allocator<RegistrarClientProcess *>>::__erase_unique<RegistrarClientProcess *>(v6, (unint64_t)a3);
LABEL_9:
      RegistrarClientProcess::CheckProcessAssertion(this);
      uint64_t result = 0;
      break;
    default:
      uint64_t result = 4294967246;
      break;
  }
  return result;
}

void std::__hash_table<RegistrarClientProcess *,std::hash<RegistrarClientProcess *>,std::equal_to<RegistrarClientProcess *>,std::allocator<RegistrarClientProcess *>>::__emplace_unique_key_args<RegistrarClientProcess *,RegistrarClientProcess * const&>(float *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *((void *)a1 + 1);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    int v11 = *(void **)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = (void *)*v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2) {
            return;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v14 = operator new(0x18uLL);
  *uint64_t v14 = 0;
  v14[1] = v8;
  long long v14[2] = a3;
  float v15 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v16 = a1[8];
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    else {
      int8x8_t prime = (int8x8_t)v18;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v9 = *((void *)a1 + 1);
    }
    if (*(void *)&prime > v9) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v27 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (*(void *)&prime <= v27) {
        int8x8_t prime = (int8x8_t)v27;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          int v21 = operator new(8 * *(void *)&prime);
          __int16 v22 = *(void **)a1;
          *(void *)a1 = v21;
          if (v22) {
            operator delete(v22);
          }
          uint64_t v23 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v23++) = 0;
          while (*(void *)&prime != v23);
          __int16 v24 = (void *)*((void *)a1 + 2);
          if (v24)
          {
            unint64_t v25 = v24[1];
            uint8x8_t v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(void *)&prime) {
                v25 %= *(void *)&prime;
              }
            }
            else
            {
              v25 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v25) = a1 + 4;
            int v30 = (void *)*v24;
            if (*v24)
            {
              do
              {
                unint64_t v31 = v30[1];
                if (v26.u32[0] > 1uLL)
                {
                  if (v31 >= *(void *)&prime) {
                    v31 %= *(void *)&prime;
                  }
                }
                else
                {
                  v31 &= *(void *)&prime - 1;
                }
                if (v31 != v25)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v31))
                  {
                    *(void *)(*(void *)a1 + 8 * v31) = v24;
                    goto LABEL_55;
                  }
                  void *v24 = *v30;
                  *int v30 = **(void **)(*(void *)a1 + 8 * v31);
                  **(void **)(*(void *)a1 + 8 * v31) = v30;
                  int v30 = v24;
                }
                unint64_t v31 = v25;
LABEL_55:
                __int16 v24 = v30;
                int v30 = (void *)*v30;
                unint64_t v25 = v31;
              }
              while (v30);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        uint64_t v35 = *(void **)a1;
        *(void *)a1 = 0;
        if (v35) {
          operator delete(v35);
        }
        unint64_t v9 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  int v32 = *(void **)a1;
  __int16 v33 = *(void **)(*(void *)a1 + 8 * v3);
  if (v33)
  {
    *uint64_t v14 = *v33;
LABEL_72:
    void *v33 = v14;
    goto LABEL_73;
  }
  *uint64_t v14 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v14;
  v32[v3] = a1 + 4;
  if (*v14)
  {
    unint64_t v34 = *(void *)(*v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v34 >= v9) {
        v34 %= v9;
      }
    }
    else
    {
      v34 &= v9 - 1;
    }
    __int16 v33 = (void *)(*(void *)a1 + 8 * v34);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
}

void sub_19011EC6C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t AURegistrationServerConnection::RegisterExtensionProcess(uint64_t this)
{
  mach_msg_return_t v10;
  mach_msg_return_t v11;
  CFDataRef theData;
  __CFString *v13;
  CFStringRef Identifier;
  unsigned char msg[36];
  int v16;
  const UInt8 *v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;

  __int16 v22 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (atomic_uint *)(this + 192);
  if (!atomic_load_explicit((atomic_uint *volatile)(this + 192), memory_order_acquire))
  {
    uint64_t v2 = this;
    CADeprecated::XMachReceivePort::CreateMachPort((CADeprecated::XMachReceivePort *)(this + 192));
    unsigned int explicit = atomic_load_explicit(v1, memory_order_acquire);
    MainBundle = CFBundleGetMainBundle();
    if (MainBundle)
    {
      char v5 = MainBundle;
      Identifier = CFBundleGetIdentifier(MainBundle);
      MainBundle = (__CFBundle *)CFBundleGetValueForInfoDictionaryKey(v5, (CFStringRef)*MEMORY[0x1E4F1CC48]);
      unint64_t v13 = (__CFString *)MainBundle;
      if (Identifier)
      {
        if (MainBundle) {
          goto LABEL_5;
        }
LABEL_10:
        unint64_t v13 = &stru_1EDFA53D0;
LABEL_5:
        CASerializer::CASerializer((CASerializer *)&theData, 0);
        operator<<();
        operator<<();
        int v6 = *(_DWORD *)(v2 + 48);
        int Length = (int)theData;
        if (theData)
        {
          BytePtr = CFDataGetBytePtr(theData);
          int Length = (int)theData;
          if (theData) {
            int Length = CFDataGetLength(theData);
          }
        }
        else
        {
          BytePtr = 0;
        }
        memset(&msg[4], 0, 32);
        *(_DWORD *)&msg[24] = 2;
        *(_DWORD *)&msg[28] = explicit;
        float v16 = 1245184;
        BOOL v17 = BytePtr;
        unint64_t v18 = 16777472;
        unint64_t v19 = Length;
        char v20 = *MEMORY[0x1E4F14068];
        int v21 = Length;
        mach_port_name_t reply_port = mig_get_reply_port();
        *(_DWORD *)&msg[8] = v6;
        *(_DWORD *)&msg[12] = reply_port;
        *(_DWORD *)msg = -2147478253;
        *(void *)&msg[16] = 0x15F9100000000;
        if (MEMORY[0x1E4F14B18])
        {
          voucher_mach_msg_set((mach_msg_header_t *)msg);
          mach_port_name_t reply_port = *(_DWORD *)&msg[12];
        }
        uint8x8_t v10 = mach_msg((mach_msg_header_t *)msg, 275, 0x44u, 0x2Cu, reply_port, gMediaServerTimeout, 0);
        int v11 = v10;
        if ((v10 - 268435458) <= 0xE && ((1 << (v10 - 2)) & 0x4003) != 0)
        {
          mig_put_reply_port(*(mach_port_t *)&msg[12]);
        }
        else
        {
          if (!v10)
          {
            if (*(_DWORD *)&msg[20] == 90101
              && (*(_DWORD *)msg & 0x80000000) == 0
              && *(_DWORD *)&msg[4] == 36
              && !*(_DWORD *)&msg[8]
              && !*(_DWORD *)&msg[32])
            {
              return MEMORY[0x192FC7960](&theData);
            }
            goto LABEL_28;
          }
          mig_dealloc_reply_port(*(mach_port_t *)&msg[12]);
        }
        if (v11 != 268435460) {
          return MEMORY[0x192FC7960](&theData);
        }
        if ((*(_WORD *)msg & 0x1F00) == 0x1100) {
          mach_port_deallocate(*MEMORY[0x1E4F14960], *(mach_port_name_t *)&msg[12]);
        }
LABEL_28:
        mach_msg_destroy((mach_msg_header_t *)msg);
        return MEMORY[0x192FC7960](&theData);
      }
    }
    else
    {
      unint64_t v13 = 0;
    }
    Identifier = &stru_1EDFA53D0;
    if (MainBundle) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  return this;
}

void sub_19011EEFC(_Unwind_Exception *exception_object)
{
}

void AURegistrationServerConnection::WakeExtension(AURegistrationServerConnection *this, int a2, int a3)
{
  mach_msg_return_t v5;
  mach_msg_return_t v6;
  unsigned char msg[36];
  uint64_t v9;

  int v3 = (int)this;
  *(_OWORD *)&msg[20] = 0u;
  unint64_t v9 = 0;
  *(_OWORD *)&msg[4] = 0u;
  *(void *)&msg[24] = *MEMORY[0x1E4F14068];
  *(_DWORD *)&msg[32] = a2;
  LODWORD(v9) = a3;
  mach_port_name_t reply_port = mig_get_reply_port();
  *(_DWORD *)&msg[8] = v3;
  *(_DWORD *)&msg[12] = reply_port;
  *(_DWORD *)msg = 5395;
  *(void *)&msg[16] = 0x15F9C00000000;
  if (MEMORY[0x1E4F14B18])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    mach_port_name_t reply_port = *(_DWORD *)&msg[12];
  }
  char v5 = mach_msg((mach_msg_header_t *)msg, 275, 0x28u, 0x2Cu, reply_port, gMediaServerTimeout, 0);
  int v6 = v5;
  if ((v5 - 268435458) <= 0xE && ((1 << (v5 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(*(mach_port_t *)&msg[12]);
LABEL_16:
    if (v6 != 268435460) {
      return;
    }
    if ((*(_WORD *)msg & 0x1F00) == 0x1100) {
      mach_port_deallocate(*MEMORY[0x1E4F14960], *(mach_port_name_t *)&msg[12]);
    }
    goto LABEL_19;
  }
  if (v5)
  {
    mig_dealloc_reply_port(*(mach_port_t *)&msg[12]);
    goto LABEL_16;
  }
  if (*(_DWORD *)&msg[20] != 90112
    || (*(_DWORD *)msg & 0x80000000) != 0
    || *(_DWORD *)&msg[4] != 36
    || *(_DWORD *)&msg[8]
    || *(_DWORD *)&msg[32])
  {
LABEL_19:
    mach_msg_destroy((mach_msg_header_t *)msg);
  }
}

uint64_t AURegistrationServerConnection_Connect()
{
  uint64_t v0 = (const char **)CADeprecated::TSingleton<AURegistrationServerConnection>::instance();
  return AURegistrationServerConnection::Connect(v0);
}

uint64_t AURegistrationServerConnection_ServerPort()
{
  return *(unsigned int *)(CADeprecated::TSingleton<AURegistrationServerConnection>::instance() + 48);
}

uint64_t IPCAURegServer_PublishAU(audit_token_t *a1, int a2, const AudioComponentDescription *a3, const void *a4, unsigned int a5, int a6)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  pid_t pidp = 0;
  uint64_t v11 = 4294900548;
  if (!ClientHasInterAppAudioEntitlement(a1, &pidp)) {
    return 4294900548;
  }
  CFTypeRef v48 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v47 = 0;
  vm_size_t v45 = a5;
  CADeserializer::CADeserializer(&v46, a4);
  vm_address_t v44 = (vm_address_t)a4;
  operator>>();
  operator>>();
  operator>>();
  CFTypeRef v12 = cf;
  uint64_t v13 = 4294967246;
  if (cf && v48 && v47)
  {
    uint64_t v14 = CADeprecated::TSingleton<IPCAURegistrar>::instance();
    float v15 = (PlatformUtilities *)pidp;
    CFStringRef v16 = (const __CFString *)v48;
    CFTypeRef v17 = cf;
    if (kInterAppAudioScope)
    {
      unint64_t v18 = *(NSObject **)kInterAppAudioScope;
      if (!*(void *)kInterAppAudioScope)
      {
LABEL_17:
        ClientProcess = IPCAURegistrar::FindOrCreateClientProcess(v14, 1, a2, (int)v15);
        __int16 v24 = *(uint64_t **)(v14 + 264);
        uint64_t v23 = *(uint64_t **)(v14 + 272);
        if (v24 != v23)
        {
          unint64_t v25 = ClientProcess;
          while (1)
          {
            uint64_t v26 = *v24;
            if (*(void *)&a3->componentType != *(void *)(*v24 + 24)
              || a3->componentManufacturer != (unint64_t)*(unsigned int *)(*v24 + 32))
            {
              goto LABEL_26;
            }
            if (CFEqual(v16, *(CFTypeRef *)(v26 + 16))) {
              break;
            }
            uint64_t v23 = *(uint64_t **)(v14 + 272);
LABEL_26:
            if (++v24 == v23) {
              goto LABEL_27;
            }
          }
          *(_DWORD *)(v26 + 8) = v15;
          *(unsigned char *)(v26 + 61) = 0;
          *(void *)(v26 + 64) = v25;
          if (kInterAppAudioScope)
          {
            uint64_t v29 = *(NSObject **)kInterAppAudioScope;
            if (!*(void *)kInterAppAudioScope)
            {
LABEL_39:
              unint64_t v31 = *(int **)(v26 + 72);
              int v32 = *(int **)(v26 + 80);
              if (v31 == v32) {
                goto LABEL_56;
              }
              while (1)
              {
                __int16 v33 = *(uint64_t **)(v14 + 232);
                unint64_t v34 = *(uint64_t **)(v14 + 240);
                if (v33 == v34)
                {
LABEL_43:
                  uint64_t v35 = 0;
                  int v36 = 0;
                }
                else
                {
                  while (1)
                  {
                    uint64_t v35 = *v33;
                    if (*(_DWORD *)(*v33 + 12) == *v31) {
                      break;
                    }
                    if (++v33 == v34) {
                      goto LABEL_43;
                    }
                  }
                  uint64_t v37 = *(void *)(v35 + 184);
                  mach_port_t v38 = v37 ? *(_DWORD *)(v37 + 12) : 0;
                  int v36 = IPCAUCallbackSender_LaunchRequestComplete(v38, v31[1], 1);
                }
                if (!kInterAppAudioScope) {
                  break;
                }
                unsigned int v39 = *(NSObject **)kInterAppAudioScope;
                if (*(void *)kInterAppAudioScope) {
                  goto LABEL_52;
                }
LABEL_54:
                v31 += 2;
                if (v31 == v32)
                {
                  unint64_t v31 = *(int **)(v26 + 72);
LABEL_56:
                  *(void *)(v26 + 80) = v31;
                  IPCAURegistrar::RecordApplicationActiveTime((CFMutableDictionaryRef *)v14, v16);
                  uint64_t v11 = 0;
                  goto LABEL_57;
                }
              }
              unsigned int v39 = MEMORY[0x1E4F14500];
LABEL_52:
              if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
              {
                int v40 = *v31;
                int v41 = v31[1];
                *(_DWORD *)AudioFormatInfo buf = 136316418;
                long long v55 = "IPCAURegistrar.mm";
                __int16 v56 = 1024;
                int v57 = 730;
                __int16 v58 = 1024;
                *(_DWORD *)int v59 = v40;
                *(_WORD *)&v59[4] = 2048;
                *(void *)&v59[6] = v35;
                __int16 v60 = 1024;
                *(_DWORD *)int v61 = v41;
                *(_WORD *)&v61[4] = 1024;
                *(_DWORD *)&v61[6] = v36;
                _os_log_impl(&dword_18FEC0000, v39, OS_LOG_TYPE_DEBUG, "%25s:%-5d ping pid %d, rcp %p, token %d, ret = 0x%x", buf, 0x2Eu);
              }
              goto LABEL_54;
            }
          }
          else
          {
            uint64_t v29 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v30 = (*(void *)(v26 + 80) - *(void *)(v26 + 72)) >> 3;
            *(_DWORD *)AudioFormatInfo buf = 136315650;
            long long v55 = "IPCAURegistrar.mm";
            __int16 v56 = 1024;
            int v57 = 721;
            __int16 v58 = 1024;
            *(_DWORD *)int v59 = v30;
            _os_log_impl(&dword_18FEC0000, v29, OS_LOG_TYPE_DEBUG, "%25s:%-5d checked in previous registration, %d pings", buf, 0x18u);
          }
          goto LABEL_39;
        }
LABEL_27:
        if (kInterAppAudioScope)
        {
          uint8x8_t v28 = *(NSObject **)kInterAppAudioScope;
          if (!*(void *)kInterAppAudioScope) {
            goto LABEL_57;
          }
        }
        else
        {
          uint8x8_t v28 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioFormatInfo buf = 136315394;
          long long v55 = "IPCAURegistrar.mm";
          __int16 v56 = 1024;
          int v57 = 739;
          _os_log_impl(&dword_18FEC0000, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d App is trying to publish an AudioComponent without an Info.plist registration.", buf, 0x12u);
        }
LABEL_57:
        CFTypeRef v12 = cf;
        uint64_t v13 = v11;
        goto LABEL_58;
      }
    }
    else
    {
      unint64_t v18 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      PlatformUtilities::processName(v15);
      int v43 = (int)v15;
      int v19 = v53;
      char v20 = (void **)__p;
      CAFormatter::CAFormatter((CAFormatter *)&v51, a3);
      CFTypeRef p_p = &__p;
      *(_DWORD *)AudioFormatInfo buf = 136316674;
      if (v19 < 0) {
        CFTypeRef p_p = v20;
      }
      long long v55 = "IPCAURegistrar.mm";
      __int16 v56 = 1024;
      int v57 = 709;
      __int16 v58 = 2080;
      *(void *)int v59 = p_p;
      *(_WORD *)&v59[8] = 1024;
      *(_DWORD *)&v59[10] = a2;
      __int16 v60 = 2080;
      *(void *)int v61 = v51;
      *(_WORD *)&v61[8] = 2112;
      CFTypeRef v62 = v17;
      __int16 v63 = 1024;
      int v64 = a6;
      _os_log_impl(&dword_18FEC0000, v18, OS_LOG_TYPE_DEBUG, "%25s:%-5d process '%s', port 0x%x, %s, '%@', version %d", buf, 0x3Cu);
      if (v51) {
        free(v51);
      }
      LODWORD(v15) = v43;
      if (v53 < 0) {
        operator delete(__p);
      }
    }
    goto LABEL_17;
  }
LABEL_58:
  if (v12) {
    CFRelease(v12);
  }
  if (v48) {
    CFRelease(v48);
  }
  if (v47) {
    CFRelease(v47);
  }
  if (!v13) {
    mig_deallocate(v44, v45);
  }
  MEMORY[0x192FC7A90](&v46);
  return v13;
}

void sub_19011F5E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  MEMORY[0x192FC7A90](&a16);
  _Unwind_Resume(a1);
}

BOOL ClientHasInterAppAudioEntitlement(audit_token_t *a1, pid_t *pidp)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  long long v4 = *(_OWORD *)&a1->val[4];
  *(_OWORD *)atoken.val = *(_OWORD *)a1->val;
  *(_OWORD *)&atoken.val[4] = v4;
  audit_token_to_au32(&atoken, 0, 0, 0, 0, 0, pidp, 0, 0);
  if (ClientHasInterAppAudioEntitlement(audit_token_t &,int &)::bypassEntitlementCheck < 0)
  {
    ClientHasInterAppAudioEntitlement(audit_token_t &,int &)::bypassEntitlementCheck = 0;
    CASmartPreferences::Read((CASmartPreferences *)@"BypassInterAppEntitlementCheck", @"com.apple.coreaudio", (const __CFString *)&ClientHasInterAppAudioEntitlement(audit_token_t &,int &)::bypassEntitlementCheck, v5);
    if (!ClientHasInterAppAudioEntitlement(audit_token_t &,int &)::bypassEntitlementCheck) {
      goto LABEL_6;
    }
    return 1;
  }
  if (ClientHasInterAppAudioEntitlement(audit_token_t &,int &)::bypassEntitlementCheck) {
    return 1;
  }
LABEL_6:
  long long v7 = *(_OWORD *)&a1->val[4];
  *(_OWORD *)token.val = *(_OWORD *)a1->val;
  *(_OWORD *)&token.val[4] = v7;
  unint64_t v8 = SecTaskCreateWithAuditToken(0, &token);
  if (!v8) {
    goto LABEL_13;
  }
  unint64_t v9 = v8;
  CFTypeRef v10 = SecTaskCopyValueForEntitlement(v8, @"inter-app-audio", 0);
  if (!v10) {
    goto LABEL_12;
  }
  uint64_t v11 = v10;
  CFTypeID v12 = CFGetTypeID(v10);
  if (v12 != CFBooleanGetTypeID())
  {
    CFRelease(v11);
LABEL_12:
    CFRelease(v9);
    goto LABEL_13;
  }
  int Value = CFBooleanGetValue((CFBooleanRef)v11);
  CFRelease(v11);
  CFRelease(v9);
  if (Value) {
    return 1;
  }
LABEL_13:
  if (kInterAppAudioScope)
  {
    uint64_t v14 = *(NSObject **)kInterAppAudioScope;
    if (!*(void *)kInterAppAudioScope) {
      return 0;
    }
  }
  else
  {
    uint64_t v14 = MEMORY[0x1E4F14500];
  }
  BOOL result = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
  if (!result) {
    return result;
  }
  unsigned int v15 = *pidp;
  token.val[0] = 136315650;
  *(void *)&token.val[1] = "IPCAURegistrar.mm";
  LOWORD(token.val[3]) = 1024;
  *(unsigned int *)((char *)&token.val[3] + 2) = 1306;
  HIWORD(token.val[4]) = 1024;
  token.val[5] = v15;
  _os_log_impl(&dword_18FEC0000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d process %d does not have the 'inter-app-audio' entitlement", (uint8_t *)&token, 0x18u);
  return 0;
}

uint64_t IPCAURegServer_CreateSharedBuffer(audit_token_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  pid_t pidp = 0;
  if (ClientHasInterAppAudioEntitlement(a1, &pidp))
  {
    uint64_t v7 = CADeprecated::TSingleton<IPCAURegistrar>::instance();
    uint64_t v8 = *(void *)(v7 + 232);
    for (uint64_t i = *(void *)(v7 + 240); v8 != i; v8 += 8)
    {
      if (*(_DWORD *)(*(void *)v8 + 12) == pidp) {
        operator new();
      }
    }
    if (kInterAppAudioScope)
    {
      CFTypeRef v10 = *(NSObject **)kInterAppAudioScope;
      if (!*(void *)kInterAppAudioScope)
      {
LABEL_13:
        uint64_t v11 = 4294967246;
        *a6 = 0;
        return v11;
      }
    }
    else
    {
      CFTypeRef v10 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioFormatInfo buf = 136315394;
      unsigned int v15 = "IPCAURegistrar.mm";
      __int16 v16 = 1024;
      int v17 = 794;
      _os_log_impl(&dword_18FEC0000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d unknown process", buf, 0x12u);
    }
    goto LABEL_13;
  }
  return 4294900548;
}

void sub_19011FC24(_Unwind_Exception *a1)
{
  std::default_delete<RegistrarClientProcess::SharedMemoryBlock>::operator()[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SharableMemoryBlock::MachServerToken::~MachServerToken(SharableMemoryBlock::MachServerToken *this)
{
}

uint64_t IPCAURegServer_SubscribeToAUList(audit_token_t *a1, int a2, const void *a3, unsigned int a4)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  pid_t pidp = 0;
  if (!ClientHasInterAppAudioEntitlement(a1, &pidp)) {
    return 4294900548;
  }
  CFTypeRef v18 = 0;
  CFTypeRef cf = 0;
  CADeserializer::CADeserializer(&v17, a3);
  operator>>();
  operator>>();
  CFTypeRef v7 = cf;
  if (cf) {
    BOOL v8 = v18 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  int v9 = !v8;
  if (v8)
  {
    uint64_t v13 = 4294967246;
    if (!cf) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  uint64_t v10 = CADeprecated::TSingleton<IPCAURegistrar>::instance();
  uint64_t v11 = (PlatformUtilities *)pidp;
  if (kInterAppAudioScope)
  {
    CFTypeID v12 = *(NSObject **)kInterAppAudioScope;
    if (!*(void *)kInterAppAudioScope) {
      goto LABEL_22;
    }
  }
  else
  {
    CFTypeID v12 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    PlatformUtilities::processName(v11);
    uint64_t v14 = v22 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)AudioFormatInfo buf = 136315906;
    __int16 v24 = "IPCAURegistrar.mm";
    __int16 v25 = 1024;
    int v26 = 836;
    __int16 v27 = 2080;
    uint8x8_t v28 = v14;
    __int16 v29 = 1024;
    int v30 = a2;
    _os_log_impl(&dword_18FEC0000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d process '%s', port 0x%x", buf, 0x22u);
    if (v22 < 0) {
      operator delete(__p);
    }
  }
LABEL_22:
  ClientProcess = IPCAURegistrar::FindOrCreateClientProcess(v10, 0, a2, (int)v11);
  uint64_t v13 = 0;
  *((unsigned char *)ClientProcess + 32) = 1;
  CFTypeRef v7 = cf;
  if (cf) {
LABEL_23:
  }
    CFRelease(v7);
LABEL_24:
  if (v18) {
    CFRelease(v18);
  }
  if (v9) {
    mig_deallocate((vm_address_t)a3, a4);
  }
  MEMORY[0x192FC7A90](&v17);
  return v13;
}

void sub_19011FE6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x192FC7A90](va);
  _Unwind_Resume(a1);
}

uint64_t MIGVariableLengthRefs::Write(MIGVariableLengthRefs *this, const void *a2, vm_size_t size)
{
  int v6 = (_DWORD *)*((void *)this + 4);
  if (v6 && *((void *)this + 1) >= size)
  {
    *int v6 = size;
    goto LABEL_8;
  }
  CFTypeRef v7 = (vm_address_t *)*((void *)this + 5);
  vm_address_t address = 0;
  uint64_t result = vm_allocate(*MEMORY[0x1E4F14960], &address, size, 1);
  vm_address_t v9 = address;
  if (result) {
    vm_address_t v9 = 0;
  }
  *CFTypeRef v7 = v9;
  if (!result)
  {
    **((_DWORD **)this + std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = size;
    *((unsigned char *)this + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 1;
LABEL_8:
    uint64_t v10 = (void **)*((void *)this + 5);
    if (!*v10) {
      uint64_t v10 = (void **)((char *)this + 24);
    }
    memcpy(*v10, a2, size);
    return 0;
  }
  return result;
}

uint64_t IPCAURegServer_RegisterExtensionProcess(_OWORD *a1, int a2, const void *a3, unsigned int a4)
{
  pid_t pidp = 0;
  long long v7 = a1[1];
  *(_OWORD *)atoken.val = *a1;
  *(_OWORD *)&atoken.val[4] = v7;
  audit_token_to_au32(&atoken, 0, 0, 0, 0, 0, &pidp, 0, 0);
  CFTypeRef cf = 0;
  __int16 v16 = 0;
  CADeserializer::CADeserializer(&v14, a3);
  operator>>();
  operator>>();
  BOOL v8 = v16;
  if (v16) {
    BOOL v9 = cf == 0;
  }
  else {
    BOOL v9 = 1;
  }
  int v10 = !v9;
  if (v9)
  {
    uint64_t v12 = 4294967246;
    if (!v16) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  uint64_t v11 = CADeprecated::TSingleton<IPCAURegistrar>::instance();
  IPCAURegistrar::FindOrCreateClientProcess(v11, 2, a2, pidp);
  uint64_t v12 = 0;
  BOOL v8 = v16;
  if (v16) {
LABEL_11:
  }
    CFRelease(v8);
LABEL_12:
  if (cf) {
    CFRelease(cf);
  }
  if (v10) {
    mig_deallocate((vm_address_t)a3, a4);
  }
  MEMORY[0x192FC7A90](&v14);
  return v12;
}

void sub_190120064(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x192FC7A90](va);
  _Unwind_Resume(a1);
}

void AudioUnitURLOpen(const __CFURL *a1)
{
  mach_msg_return_t v6;
  int v7;
  const char **v8;
  UInt8 v9[256];
  unsigned char msg[32];
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  int v27;
  uint64_t v28;

  uint8x8_t v28 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    unsigned int v1 = CFURLGetBytes(a1, v9, 256);
    int v2 = 5;
    int v3 = (void *)MEMORY[0x1E4F14068];
    while (1)
    {
      unsigned int v4 = *(_DWORD *)(CADeprecated::TSingleton<AURegistrationServerConnection>::instance() + 48);
      __int16 v27 = 0;
      __int16 v25 = 0u;
      int v26 = 0u;
      uint64_t v23 = 0u;
      __int16 v24 = 0u;
      int v21 = 0u;
      char v22 = 0u;
      int v19 = 0u;
      char v20 = 0u;
      CADeserializer v17 = 0u;
      CFTypeRef v18 = 0u;
      unsigned int v15 = 0u;
      __int16 v16 = 0u;
      uint64_t v13 = 0u;
      CADeserializer v14 = 0u;
      uint64_t v11 = 0u;
      uint64_t v12 = 0u;
      memset(msg, 0, sizeof(msg));
      *(void *)&msg[24] = *v3;
      if (v1 > 0x100) {
        return;
      }
      __memcpy_chk();
      LODWORD(v11) = v1;
      mach_port_name_t reply_port = mig_get_reply_port();
      *(_DWORD *)msg = 5395;
      *(void *)&msg[8] = __PAIR64__(reply_port, v4);
      *(void *)&msg[16] = 0x15F9D00000000;
      if (MEMORY[0x1E4F14B18])
      {
        voucher_mach_msg_set((mach_msg_header_t *)msg);
        mach_port_name_t reply_port = *(_DWORD *)&msg[12];
      }
      int v6 = mach_msg((mach_msg_header_t *)msg, 275, ((v1 + 3) & 0xFFFFFFFC) + 36, 0x2Cu, reply_port, gMediaServerTimeout, 0);
      long long v7 = v6;
      if ((v6 - 268435458) <= 0xE && ((1 << (v6 - 2)) & 0x4003) != 0)
      {
        mig_put_reply_port(*(mach_port_t *)&msg[12]);
      }
      else
      {
        if (!v6)
        {
          if (*(_DWORD *)&msg[20] == 71)
          {
            long long v7 = -308;
          }
          else if (*(_DWORD *)&msg[20] == 90113)
          {
            long long v7 = -300;
            if ((*(_DWORD *)msg & 0x80000000) == 0 && *(void *)&msg[4] == 36)
            {
              long long v7 = v11;
              if (!v11) {
                return;
              }
            }
          }
          else
          {
            long long v7 = -301;
          }
          goto LABEL_22;
        }
        mig_dealloc_reply_port(*(mach_port_t *)&msg[12]);
      }
      if (v7 != 268435460) {
        goto LABEL_23;
      }
      long long v7 = 268435460;
      if ((*(_WORD *)msg & 0x1F00) == 0x1100) {
        mach_port_deallocate(*MEMORY[0x1E4F14960], *(mach_port_name_t *)&msg[12]);
      }
LABEL_22:
      mach_msg_destroy((mach_msg_header_t *)msg);
LABEL_23:
      if (v7 == 268435459)
      {
        sleep(1u);
        BOOL v8 = (const char **)CADeprecated::TSingleton<AURegistrationServerConnection>::instance();
        AURegistrationServerConnection::Connect(v8);
        if (--v2) {
          continue;
        }
      }
      return;
    }
  }
}

void sub_1901204D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_190120630(_Unwind_Exception *a1)
{
  unsigned int v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1901206E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19012075C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1901207F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_190120884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_190120948(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_190120B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_190120C0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_190120D88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t MPEGAudioFile::CreatePacketTable(MPEGAudioFile *this)
{
  return (*(uint64_t (**)(MPEGAudioFile *, uint64_t, void, uint64_t))(*(void *)this + 688))(this, -1, 0, 1);
}

uint64_t MPEGAudioFile::ScanForPackets(MPEGAudioFile *this, uint64_t a2, DataSource *a3, char a4)
{
  char v5 = a3;
  v34.SInt64 mStartOffset = 0;
  *(void *)&v34.mVariableFramesInPacket = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  if (!a3) {
    char v5 = (DataSource *)*((void *)this + 13);
  }
  if (!*((unsigned char *)this + 140))
  {
    BOOL v8 = (uint64_t *)*((void *)this + 15);
    if (!v8) {
      operator new();
    }
    uint64_t v9 = v8[3];
    if (a2 == -1 || v9 < a2)
    {
      unsigned int v33 = 0;
      int v32 = 0;
      uint64_t FPosForNextMatchingSyncWordDS = (*(uint64_t (**)(DataSource *, uint64_t *))(*(void *)v5 + 24))(v5, &v30);
      if (FPosForNextMatchingSyncWordDS) {
        return FPosForNextMatchingSyncWordDS;
      }
      if (*((_WORD *)this + 93) == 1) {
        uint64_t v12 = v30 - 128;
      }
      else {
        uint64_t v12 = v30;
      }
      uint64_t v24 = v12;
      uint64_t v13 = *((void *)this + 9);
      uint64_t v14 = *((void *)this + 15);
      if (v14 && (uint64_t v15 = *(void *)(v14 + 24)) != 0)
      {
        CompressedPacketTable::operator[]((uint64_t)&v25, v8, v15 - 1);
        uint64_t FPosForNextMatchingSyncWordDS = GetFPosForNextMatchingSyncWordDS(v5, (unsigned __int16 *)this + 93, *((double *)this + 3), *((_DWORD *)this + 13), *((_DWORD *)this + 36), *((_DWORD *)this + 37), v25 + DWORD1(v26) + v13, v30, &v31);
        if (FPosForNextMatchingSyncWordDS) {
          goto LABEL_44;
        }
      }
      else
      {
        (*(void (**)(MPEGAudioFile *, void))(*(void *)this + 648))(this, 0);
        uint64_t v31 = v13;
      }
      if (a2 == -1)
      {
        uint64_t v17 = -1;
      }
      else
      {
        uint64_t v16 = *((void *)this + 15);
        if (v16) {
          uint64_t v16 = *(void *)(v16 + 24);
        }
        uint64_t v17 = a2 - v16;
      }
      while (1)
      {
        uint64_t v18 = v31;
        v34.SInt64 mStartOffset = v31 - v13;
        uint64_t v19 = (*(uint64_t (**)(DataSource *, void, uint64_t, uint64_t, unsigned int *, int *))(*(void *)v5 + 48))(v5, 0, v31, 4, &v33, &v32);
        if (v19)
        {
          uint64_t FPosForNextMatchingSyncWordDS = v19;
          goto LABEL_44;
        }
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        if ((ParseMPEGSyncWord(bswap32(v33), (uint64_t)&v26) & 1) == 0) {
          return 1685348671;
        }
        uint64_t v20 = DWORD2(v26);
        v34.uint64_t mDataByteSize = DWORD2(v26);
        if (v20 > (*(unsigned int (**)(MPEGAudioFile *))(*(void *)this + 632))(this)) {
          (*(void (**)(MPEGAudioFile *, uint64_t))(*(void *)this + 648))(this, v20);
        }
        if (v18 + v20 > v24) {
          break;
        }
        uint64_t v31 = v18 + v20;
        uint64_t v21 = GetFPosForNextMatchingSyncWordDS(v5, (unsigned __int16 *)this + 93, *((double *)this + 3), *((_DWORD *)this + 13), *((_DWORD *)this + 36), *((_DWORD *)this + 37), v18 + v20, v30, &v31);
        if (v21 == -39 || (uint64_t FPosForNextMatchingSyncWordDS = v21, v21) && v9 >= 10)
        {
          char v22 = 0;
          *((unsigned char *)this + 140) = a4;
        }
        else
        {
          if (v21) {
            goto LABEL_44;
          }
          char v22 = 1;
        }
        *((void *)this + 25) += DWORD1(v27);
        AudioFileObject::AppendPacket(this, &v34);
        uint64_t FPosForNextMatchingSyncWordDS = 0;
        if (v17 == -1) {
          uint64_t v17 = -1;
        }
        else {
          --v17;
        }
        if (v17)
        {
          ++v9;
          if (v22) {
            continue;
          }
        }
        return FPosForNextMatchingSyncWordDS;
      }
      uint64_t FPosForNextMatchingSyncWordDS = 0;
      *((unsigned char *)this + 140) = a4;
LABEL_44:
      if (FPosForNextMatchingSyncWordDS != -39 && FPosForNextMatchingSyncWordDS != 0)
      {
        AudioFileObject::DeletePacketTable(this);
        return FPosForNextMatchingSyncWordDS;
      }
    }
  }
  return 0;
}

uint64_t GetFPosForNextMatchingSyncWordDS(DataSource *a1, unsigned __int16 *a2, double a3, int a4, int a5, int a6, int64_t a7, int64_t a8, uint64_t *a9)
{
  double v23 = 0.0;
  *(void *)uint64_t v24 = 0;
  unsigned int v22 = 0;
  int v18 = 10;
  while (1)
  {
    uint64_t result = GetFPosForNextSyncWordDS(a1, a2, a7, a8, a9, &v24[1], v24, 0, &v23, &v22);
    if (result) {
      break;
    }
    if (v24[1] == a5 && v24[0] == a6 && v23 == a3 && v22 == a4) {
      return 0;
    }
    a7 = *a9 + 1;
    if (!--v18) {
      return 1685348671;
    }
  }
  return result;
}

uint64_t GetFPosForNextSyncWordDS(DataSource *a1, unsigned __int16 *a2, int64_t a3, int64_t a4, uint64_t *a5, unsigned int *a6, unsigned int *a7, unsigned int *a8, double *a9, unsigned int *a10)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  unsigned int v39 = 0;
  CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)&v39, 0x403uLL, 1);
  int v18 = v39;
  if (v39)
  {
    if (a3 < a4)
    {
      int v36 = a6;
      uint64_t v37 = a7;
      mach_port_t v38 = a8;
      uint64_t v35 = a5;
      int64_t v19 = a4 - 128;
      while (1)
      {
        int v20 = *a2;
        BOOL v21 = v20 != 1 || a3 < v19;
        if (!v21
          || (a3 + 1027 <= a4 ? (uint64_t v22 = 1027) : (uint64_t v22 = (a4 - a3)), v40 = v22, v22 < 4))
        {
LABEL_31:
          uint64_t v24 = 4294967257;
LABEL_32:
          if (v18) {
            goto LABEL_50;
          }
          return v24;
        }
        if (a3 + v22 > v19 && v20 == 0xFFFF)
        {
          *a2 = ID3v1TagExistsDS(a1);
          uint64_t v22 = v40;
        }
        uint64_t v24 = (*(uint64_t (**)(DataSource *, void, int64_t, uint64_t, unsigned __int8 *, unsigned int *))(*(void *)a1 + 48))(a1, 0, a3, v22, v18, &v40);
        if (v24) {
          goto LABEL_32;
        }
        if (!v40) {
          goto LABEL_31;
        }
        uint64_t v25 = (__int16 *)a2;
        if (v40 >= 4) {
          break;
        }
        LODWORD(v2std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
LABEL_30:
        a3 += v26;
        a2 = (unsigned __int16 *)v25;
        int64_t v19 = a4 - 128;
        if (a3 >= a4) {
          goto LABEL_31;
        }
      }
      uint64_t v26 = 0;
      uint64_t v27 = v40 - 3;
      unsigned int v28 = v40 - 1;
      while (1)
      {
        long long v44 = 0u;
        long long v45 = 0u;
        *(_OWORD *)&v42[4] = 0u;
        long long v43 = 0u;
        int v29 = v18[v26];
        int v30 = ParseMPEGSyncWord(_byteswap_ulong(*(_DWORD *)&v18[v26]), (uint64_t)&v42[4]);
        if (v29 == 255 && v30 != 0)
        {
          unsigned int v32 = v42[9];
          if (v42[9] - 1 <= 2) {
            break;
          }
        }
        ++v26;
        unsigned int v40 = v28--;
        if (v27 == v26) {
          goto LABEL_30;
        }
      }
      if (v36) {
        *int v36 = v42[8];
      }
      if (v37) {
        *uint64_t v37 = v32;
      }
      if (v38) {
        unsigned int *v38 = *(_DWORD *)&v42[12];
      }
      if (a9) {
        *a9 = *((double *)&v43 + 1);
      }
      if (a10) {
        *a10 = DWORD1(v45);
      }
      uint64_t v33 = a3 + v26;
      if (!*v25 || v33 + *(unsigned int *)&v42[12] <= a4 - 128)
      {
        uint64_t v24 = 0;
        *uint64_t v35 = v33;
        goto LABEL_50;
      }
    }
    uint64_t v24 = 4294967257;
LABEL_50:
    free(v18);
  }
  else
  {
    uint64_t v24 = 1685348671;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioFormatInfo buf = 136315394;
      *(void *)uint64_t v42 = "MP3AudioFile.cpp";
      *(_WORD *)&v42[8] = 1024;
      *(_DWORD *)&v42[10] = 156;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  could not make space", buf, 0x12u);
    }
  }
  return v24;
}

void sub_190121640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  if (a17) {
    free(a17);
  }
  _Unwind_Resume(exception_object);
}

BOOL ID3v1TagExistsDS(DataSource *a1)
{
  uint64_t v5 = 0;
  (*(void (**)(DataSource *, uint64_t *))(*(void *)a1 + 24))(a1, &v5);
  BOOL result = 0;
  if (v5 >= 128)
  {
    int v3 = 0;
    if (!(*(unsigned int (**)(DataSource *, uint64_t, uint64_t, uint64_t, unsigned char *, int *))(*(void *)a1 + 48))(a1, 2, -128, 4, v4, &v3)&& v4[0] == 84&& v4[1] == 65&& v4[2] == 71)
    {
      return 1;
    }
  }
  return result;
}

uint64_t MPEGAudioFile::GetPacketSizeUpperBound(MPEGAudioFile *this)
{
  return *((unsigned int *)this + 52);
}

BOOL MPEGAudioFile::IsDataFormatSupported(MPEGAudioFile *this, const AudioStreamBasicDescription *a2)
{
  AudioFormatID mFormatID = a2->mFormatID;
  return mFormatID - 778924081 < 3 || mFormatID == 1836253269;
}

uint64_t MPEGAudioFile::GetLyrics(MPEGAudioFile *this, const __CFString **a2)
{
  if (!a2) {
    return 2003334207;
  }
  uint64_t v4 = 1667787583;
  *a2 = 0;
  int v8 = 12;
  uint64_t v9 = 1431522388;
  if (!ID3ParserGetProperty(*((void *)this + 20), 8, (uint64_t)&v9, 1718185574, (uint64_t)&v8, (uint64_t)v10))
  {
    CFDictionaryRef theDict = 0;
    int v8 = 8;
    if (!ID3ParserGetProperty(*((void *)this + 20), 4, (uint64_t)&v11, 1717854580, (uint64_t)&v8, (uint64_t)&theDict))
    {
      CFStringRef Value = (const __CFString *)CFDictionaryGetValue(theDict, @"text");
      *a2 = Value;
      if (Value) {
        CFRetain(Value);
      }
      CFRelease(theDict);
      return 0;
    }
  }
  return v4;
}

uint64_t MPEGAudioFile::GetEstimatedDuration(MPEGAudioFile *this, double *a2)
{
  if (!*((unsigned char *)this + 140))
  {
    if (*((void *)this + 27)) {
      goto LABEL_5;
    }
    (*(void (**)(MPEGAudioFile *, uint64_t, void, uint64_t))(*(void *)this + 688))(this, 10, 0, 1);
    *((void *)this + 24) = 0;
    int v8 = (uint64_t *)*((void *)this + 15);
    if (!v8) {
      goto LABEL_5;
    }
    if (v8[3] < 1) {
      goto LABEL_5;
    }
    uint64_t v24 = 0;
    uint64_t v9 = *((void *)this + 9);
    CompressedPacketTable::operator[]((uint64_t)v23, v8, 0);
    if ((*(unsigned int (**)(void, void, uint64_t, uint64_t, uint64_t *, char *))(**((void **)this + 13)
                                                                                             + 48))(*((void *)this + 13), 0, v23[0] + v9, 4, &v24, (char *)&v24 + 4))
    {
      goto LABEL_5;
    }
    double v10 = *((double *)this + 3);
    int v11 = gaSamplesPerFrame[3 * (*((_DWORD *)this + 36) - 1) + *((_DWORD *)this + 37) - 1];
    unint64_t v12 = (*(uint64_t (**)(MPEGAudioFile *))(*(void *)this + 224))(this);
    if (!v12) {
      goto LABEL_5;
    }
    unint64_t v13 = *((void *)this + 15);
    if (v13) {
      unint64_t v13 = *(void *)(v13 + 24);
    }
    double v14 = (double)v10;
    int v15 = *((_DWORD *)this + 37);
    unint64_t v16 = *((void *)this + 25) / v13;
    if (v15 == 3)
    {
      double v20 = (double)v16;
      if (*((_DWORD *)this + 36) == 1) {
        int v21 = 144000;
      }
      else {
        int v21 = 72000;
      }
      double v22 = (double)v21 * v20;
    }
    else
    {
      if (v15 == 2)
      {
        double v18 = (double)v16;
        double v19 = 144000.0;
      }
      else
      {
        double v17 = 1.0;
        if (v15 != 1) {
          goto LABEL_25;
        }
        double v18 = (double)v16;
        double v19 = 48000.0;
      }
      double v22 = v18 * v19;
    }
    double v17 = v22 / v14;
    if (v17 <= 0.0)
    {
LABEL_5:
      double v6 = *((double *)this + 24);
      goto LABEL_7;
    }
LABEL_25:
    *((double *)this + 24) = (double)v11 / v14 * ((double)v12 / v17);
    goto LABEL_5;
  }
  uint64_t v4 = *((unsigned int *)this + 11);
  if (v4)
  {
    double v5 = *((double *)this + 3);
    double v6 = (double)((*(uint64_t (**)(MPEGAudioFile *))(*(void *)this + 240))(this) * v4) / v5;
  }
  else
  {
    double v6 = 0.0;
  }
LABEL_7:
  *a2 = v6;
  return 0;
}

uint64_t MPEGAudioFile::SetLoudnessInfo(MPEGAudioFile *this, CACFDictionary *a2)
{
  uint64_t v4 = *((void *)this + 21);
  if (v4)
  {
    if (!*(_DWORD *)(v4 + 44))
    {
      uint64_t v15 = *((void *)this + 15);
      if (v15)
      {
        if (*(uint64_t *)(v15 + 24) > 0) {
          return 1869640813;
        }
      }
    }
  }
  if (!*((void *)this + 53))
  {
    uint64_t v14 = *((void *)this + 15);
    if (v14)
    {
      if (*(uint64_t *)(v14 + 24) > 0) {
        return 1869640813;
      }
    }
  }
  uint64_t v44 = 0;
  int v5 = LoudnessMethodsCountFromLID(a2, (unsigned int *)&v44);
  char v6 = v5;
  int v7 = 4 * v5 + 4;
  int v8 = (void *)*((void *)this + 53);
  if (v8)
  {
    if (v7 != *((_DWORD *)this + 108)) {
      return 2003334207;
    }
    free(v8);
    *((void *)this + 53) = 0;
  }
  *((_DWORD *)this + 108) = v7;
  uint64_t v9 = (char *)malloc_type_malloc(0, 0x2C8E6D5CuLL);
  *((void *)this + 53) = v9;
  void v9[3] = v6;
  double v10 = v9 + 4;
  float v47 = 0.0;
  unsigned int v11 = 0;
  if (CACFDictionary::HasKey(a2, @"dialogue anchor parameters"))
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    __int16 v46 = 257;
    CACFDictionary::GetCACFDictionary(a2, @"dialogue anchor parameters", (CACFDictionary *)&Mutable);
    if (CACFDictionary::HasKey((CACFDictionary *)&Mutable, @"aa itu loudness"))
    {
      CACFDictionary::GetFloat32((CACFDictionary *)&Mutable, @"aa itu loudness", &v47);
      *double v10 = 5;
      float v12 = v47 + -6.0;
      if ((float)(v47 + -6.0) <= -63.75)
      {
        LOBYTE(v13) = -1;
      }
      else if (v12 <= 0.0)
      {
        int v13 = (int)(float)((float)((float)-v12 * 4.0) + 0.5);
      }
      else
      {
        LOBYTE(v13) = 0;
      }
      v9[5] = v13;
      unsigned int v11 = 1;
    }
    else
    {
      unsigned int v11 = 0;
    }
    CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  }
  if (CACFDictionary::HasKey(a2, @"main loudness parameters"))
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    __int16 v46 = 257;
    CACFDictionary::GetCACFDictionary(a2, @"main loudness parameters", (CACFDictionary *)&Mutable);
    if (CACFDictionary::HasKey((CACFDictionary *)&Mutable, @"aa itu loudness"))
    {
      v10[2 * v11] = 4;
      CACFDictionary::GetFloat32((CACFDictionary *)&Mutable, @"aa itu loudness", &v47);
      float v17 = v47 + -6.0;
      if ((float)(v47 + -6.0) <= -63.75)
      {
        LOBYTE(v18) = -1;
      }
      else if (v17 <= 0.0)
      {
        int v18 = (int)(float)((float)((float)-v17 * 4.0) + 0.5);
      }
      else
      {
        LOBYTE(v18) = 0;
      }
      v10[2 * v11++ + 1] = v18;
    }
    if (CACFDictionary::HasKey((CACFDictionary *)&Mutable, @"aa ebu loudness range"))
    {
      v10[2 * v11] = 6;
      CACFDictionary::GetFloat32((CACFDictionary *)&Mutable, @"aa ebu loudness range", &v47);
      v10[2 * v11++ + 1] = CompressLoudnessRange(v47);
    }
    if (CACFDictionary::HasKey((CACFDictionary *)&Mutable, @"aa ebu top of loudness range"))
    {
      v10[2 * v11] = 1;
      CACFDictionary::GetFloat32((CACFDictionary *)&Mutable, @"aa ebu top of loudness range", &v47);
      float v19 = v47 + -6.0;
      if ((float)(v47 + -6.0) <= -63.75)
      {
        LOBYTE(v20) = -1;
      }
      else if (v19 <= 0.0)
      {
        int v20 = (int)(float)((float)((float)-v19 * 4.0) + 0.5);
      }
      else
      {
        LOBYTE(v20) = 0;
      }
      v10[2 * v11++ + 1] = v20;
    }
    if (CACFDictionary::HasKey((CACFDictionary *)&Mutable, @"aa ebu max momentary loudness"))
    {
      v10[2 * v11] = 2;
      CACFDictionary::GetFloat32((CACFDictionary *)&Mutable, @"aa ebu max momentary loudness", &v47);
      float v21 = v47 + -6.0;
      if ((float)(v47 + -6.0) <= -63.75)
      {
        LOBYTE(v22) = -1;
      }
      else if (v21 <= 0.0)
      {
        int v22 = (int)(float)((float)((float)-v21 * 4.0) + 0.5);
      }
      else
      {
        LOBYTE(v22) = 0;
      }
      v10[2 * v11++ + 1] = v22;
    }
    if (CACFDictionary::HasKey((CACFDictionary *)&Mutable, @"aa ebu max short-term loudness"))
    {
      v10[2 * v11] = 3;
      CACFDictionary::GetFloat32((CACFDictionary *)&Mutable, @"aa ebu max short-term loudness", &v47);
      float v23 = v47 + -6.0;
      if ((float)(v47 + -6.0) <= -63.75)
      {
        LOBYTE(v24) = -1;
      }
      else if (v23 <= 0.0)
      {
        int v24 = (int)(float)((float)((float)-v23 * 4.0) + 0.5);
      }
      else
      {
        LOBYTE(v24) = 0;
      }
      v10[2 * v11 + 1] = v24;
    }
    CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  }
  HIDWORD(v44) = 0;
  if (!CACFDictionary::HasKey(a2, @"main loudness parameters")) {
    goto LABEL_61;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  __int16 v46 = 257;
  CACFDictionary::GetCACFDictionary(a2, @"main loudness parameters", (CACFDictionary *)&Mutable);
  if (!CACFDictionary::HasKey((CACFDictionary *)&Mutable, @"aa itu true peak"))
  {
    CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
LABEL_61:
    LOWORD(v25) = -1;
    goto LABEL_62;
  }
  CACFDictionary::GetFloat32((CACFDictionary *)&Mutable, @"aa itu true peak", (float *)&v44 + 1);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  if (*((float *)&v44 + 1) >= 128.0)
  {
    LOWORD(v25) = 0x7FFF;
  }
  else if (*((float *)&v44 + 1) <= -127.99)
  {
    LOWORD(v25) = -2;
  }
  else
  {
    int v25 = (int)(float)((float)(fabsf(*((float *)&v44 + 1)) * 256.0) + 0.5);
  }
  if (*((float *)&v44 + 1) < 0.0) {
    LOWORD(v25) = v25 ^ 0x8000;
  }
LABEL_62:
  uint64_t v26 = *((void *)this + 53);
  *(_WORD *)uint64_t v26 = v25;
  *(unsigned char *)(v26 + 2) = 0;
  if (CACFDictionary::HasKey(a2, @"media kind")) {
    *(unsigned char *)(*((void *)this + 53) + 2) = GetStoreItemKindFromLID(a2);
  }
  if (CACFDictionary::HasKey(a2, @"sound check info"))
  {
    uint64_t v27 = (CACFDictionary *)*((void *)this + 52);
    if (v27)
    {
      CACFDictionary::~CACFDictionary(v27);
      MEMORY[0x192FC8940]();
      *((void *)this + 52) = 0;
    }
    CFMutableDictionaryRef Mutable = 0;
    CACFDictionary::GetDictionary(a2, @"sound check info", &Mutable);
    operator new();
  }
  uint64_t v28 = *((void *)this + 21);
  if (!v28) {
    operator new();
  }
  uint64_t v29 = *(unsigned int *)(v28 + 44);
  if (v29)
  {
    size_t v30 = *((unsigned int *)this + 108);
    if (*(_DWORD *)(v28 + 48) == v30)
    {
      uint64_t v31 = *(void *)(v28 + 16) + v29;
      int v32 = *(_DWORD *)(v28 + 32);
      if (*(_DWORD *)(v28 + 28) <= 2u) {
        int v33 = 19;
      }
      else {
        int v33 = 23;
      }
      memcpy((void *)(v31 + (v32 + v33)), *((const void **)this + 53), v30);
      goto LABEL_78;
    }
    return 2003334207;
  }
  uint64_t result = MPEGAudioFile::AddLoudnessInfoToID3Tag(this);
  if (result) {
    return result;
  }
LABEL_78:
  if (!*(_DWORD *)(*((void *)this + 21) + 40))
  {
    uint64_t result = MPEGAudioFile::AddSoundCheckToID3Tag(this);
    if (result) {
      return result;
    }
    goto LABEL_91;
  }
  int v34 = *((_DWORD *)this + 13);
  uint64_t v35 = (char *)malloc_type_malloc((45 * v34), 0x2C8E6D5CuLL);
  int v36 = v35;
  if (v34 && !v35)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    long long v43 = std::bad_alloc::bad_alloc(exception);
  }
  bzero(v35, (45 * v34));
  MPEGAudioFile::GetSCString(this, v36);
  uint64_t v37 = *((void *)this + 21);
  uint64_t v38 = *(unsigned int *)(v37 + 40);
  if (v38)
  {
    uint64_t v39 = *(void *)(v37 + 16) + v38;
    int v40 = *(_DWORD *)(v37 + 32);
    if (*(_DWORD *)(v37 + 28) <= 2u) {
      int v41 = 19;
    }
    else {
      int v41 = 23;
    }
    memcpy((void *)(v39 + (v40 + v41)), v36, (45 * v34));
    uint64_t result = 0;
  }
  else
  {
    uint64_t result = 0xFFFFFFFFLL;
  }
  if (!(result | v29))
  {
LABEL_91:
    if (*((void *)this + 20))
    {
      ID3ParserClose();
      *((void *)this + 20) = 0;
    }
    uint64_t result = MPEGAudioFile::SerializeID3TagToFile(this);
    if (!result)
    {
      MPEGAudioFile::ParseID3Tags(this);
      return 0;
    }
  }
  return result;
}

void sub_1901222E0(_Unwind_Exception *a1)
{
  MEMORY[0x192FC8940](v1, 0x1081C40866342B4);
  _Unwind_Resume(a1);
}

uint64_t MPEGAudioFile::AddLoudnessInfoToID3Tag(MPEGAudioFile *this)
{
  uint64_t v1 = *((void *)this + 53);
  if (!v1) {
    return 0;
  }
  if (!*((void *)this + 21)) {
    return 0xFFFFFFFFLL;
  }
  int v3 = 2 * (*((_DWORD *)this + 108) + *(unsigned __int8 *)(v1 + 3));
  size_t v4 = (v3 + 3);
  LODWORD(__n) = v3 + 3;
  int v5 = malloc_type_malloc(v4, 0x2C8E6D5CuLL);
  if (!v5)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    unsigned int v11 = std::bad_alloc::bad_alloc(exception);
  }
  char v6 = v5;
  bzero(v5, v4);
  if (MPEGAudioFile::CreateLoudnessInfoString(this, (char *)v6, (unsigned int *)&__n)) {
    uint64_t v8 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v8 = ID3Creator::AddCommentFrame(*((ID3Creator **)this + 21), v6, __n, "iTunLOUD", v7);
  }
  free(v6);
  return v8;
}

uint64_t MPEGAudioFile::AddSoundCheckToID3Tag(MPEGAudioFile *this)
{
  if (!*((void *)this + 52)) {
    return 0;
  }
  if (!*((void *)this + 21)) {
    return 2003334207;
  }
  size_t v2 = (45 * *((_DWORD *)this + 13) + 1);
  int v3 = (char *)malloc_type_malloc(v2, 0x2C8E6D5CuLL);
  if (v3) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = v2 == 0;
  }
  if (!v4)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    double v10 = std::bad_alloc::bad_alloc(exception);
  }
  int v5 = v3;
  bzero(v3, v2);
  MPEGAudioFile::GetSCString(this, v5);
  uint64_t v7 = ID3Creator::AddCommentFrame(*((ID3Creator **)this + 21), v5, v2, "iTunNORM", v6);
  free(v5);
  return v7;
}

uint64_t MPEGAudioFile::SerializeID3TagToFile(MPEGAudioFile *this)
{
  size_t v2 = *(unsigned int *)(*((void *)this + 21) + 24);
  int v3 = malloc_type_malloc(v2, 0x7C51E058uLL);
  if (v2) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    double v10 = std::bad_alloc::bad_alloc(exception);
  }
  int v5 = v3;
  uint64_t result = 2003334207;
  uint64_t v7 = *((void *)this + 21);
  if (*(unsigned char *)(v7 + 8))
  {
    size_t v8 = *(unsigned int *)(v7 + 24);
    if (v8 <= v2)
    {
      memcpy(v5, *(const void **)(v7 + 16), v8);
      int v11 = 0;
      uint64_t result = (*(uint64_t (**)(void, void, void, size_t, void *, int *))(**((void **)this + 13) + 56))(*((void *)this + 13), 0, 0, v2, v5, &v11);
      *((void *)this + 9) = v2;
    }
  }
  return result;
}

void MPEGAudioFile::GetSCString(MPEGAudioFile *this, char *a2)
{
  unsigned int v4 = *((_DWORD *)this + 13);
  int v5 = (int *)malloc_type_malloc(20 * v4, 0x2C8E6D5CuLL);
  if (20 * v4) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v9 = std::bad_alloc::bad_alloc(exception);
  }
  uint64_t v7 = v5;
  bzero(v5, 20 * v4);
  if (!GetSCFields(*((CACFDictionary **)this + 52), (unsigned int *)v7, v4)) {
    FillSCString(v7, v4, a2);
  }
  free(v7);
}

uint64_t MPEGAudioFile::ParseID3Tags(MPEGAudioFile *this)
{
  uint64_t v3 = 0;
  (*(void (**)(void, uint64_t *))(**((void **)this + 13) + 24))(*((void *)this + 13), &v3);
  *((_WORD *)this + 93) = ID3v1TagExistsDS(*((DataSource **)this + 13));
  uint64_t result = ID3ParserOpen((uint64_t)this, (uint64_t)MP3ID3CallbackProc, (uint64_t)this + 160);
  if (result && *((_WORD *)this + 93))
  {
    *((void *)this + 19) = v3 - 128;
    uint64_t result = ID3ParserOpen((uint64_t)this, (uint64_t)MP3ID3CallbackProc, (uint64_t)this + 160);
    if (result) {
      *((void *)this + 19) = 0;
    }
  }
  else
  {
    *((_WORD *)this + 92) = 1;
  }
  return result;
}

uint64_t MP3ID3CallbackProc(void *a1, int a2, unsigned int a3, int a4, void **a5, unsigned int *a6)
{
  if (a2 == 1)
  {
    uint64_t v14 = (void *)a1[22];
    if (v14) {
      free(v14);
    }
    uint64_t result = 0;
    a1[22] = 0;
  }
  else
  {
    if (a2) {
      return 0;
    }
    LODWORD(v9) = a4;
    int64_t v25 = 0;
    (*(void (**)(void, int64_t *))(*(void *)a1[13] + 24))(a1[13], &v25);
    uint64_t v11 = a1[19];
    int64_t v12 = v25;
    if ((uint64_t)(v9 + (unint64_t)a3 + v11) > v25) {
      return 4294967272;
    }
    if (v9 <= 0x400) {
      LODWORD(v9) = 1024;
    }
    uint64_t v15 = a1[20];
    if (v15)
    {
      int v23 = 4;
      unsigned int v24 = 0;
      uint64_t result = ID3ParserGetProperty(v15, 0, 0, 1953720698, (uint64_t)&v23, (uint64_t)&v24);
      if (result) {
        return result;
      }
      if (v24 <= a3) {
        return 4294967272;
      }
      if (v9 >= v24 - a3) {
        LODWORD(v9) = v24 - a3;
      }
      uint64_t v11 = a1[19];
      int64_t v12 = v25;
    }
    int64_t v16 = v11 + v9;
    unsigned int v17 = v12 - v11;
    if (v16 <= v12) {
      size_t v9 = v9;
    }
    else {
      size_t v9 = v17;
    }
    int v18 = malloc_type_malloc(v9, 0x2C8E6D5CuLL);
    if (v18) {
      BOOL v19 = 1;
    }
    else {
      BOOL v19 = v9 == 0;
    }
    if (!v19)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      int v22 = std::bad_alloc::bad_alloc(exception);
    }
    int v20 = v18;
    bzero(v18, v9);
    a1[22] = v20;
    unsigned int v24 = 0;
    uint64_t result = (*(uint64_t (**)(void, void, void, size_t, void *, unsigned int *))(*(void *)a1[13] + 48))(a1[13], 0, a1[19] + a3, v9, v20, &v24);
    if (!result)
    {
      *a5 = (void *)a1[22];
      *a6 = v24;
    }
  }
  return result;
}

uint64_t MPEGAudioFile::CreateLoudnessInfoString(MPEGAudioFile *this, char *a2, unsigned int *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (__int16 *)*((void *)this + 53);
  if (!v3) {
    return 0xFFFFFFFFLL;
  }
  if (!*((void *)this + 21)) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v5 = 2 * (*((_DWORD *)this + 108) + *((unsigned __int8 *)v3 + 3)) + 3;
  if (*a3 < v5) {
    return 0xFFFFFFFFLL;
  }
  *a3 = v5;
  int v8 = *v3;
  *(_DWORD *)a2 = 808464432;
  snprintf(__str, 0x20uLL, "%X", v8);
  size_t v9 = strlen(__str);
  memcpy(&a2[-v9 + 4], __str, v9);
  a2[4] = 32;
  int v10 = *(unsigned __int8 *)(*((void *)this + 53) + 2);
  *(_WORD *)(a2 + 5) = 12336;
  snprintf(__str, 0x20uLL, "%X", v10);
  size_t v11 = strlen(__str);
  memcpy(&a2[-v11 + 7], __str, v11);
  a2[7] = 32;
  int v12 = *(unsigned __int8 *)(*((void *)this + 53) + 3);
  *((_WORD *)a2 + 4) = 12336;
  snprintf(__str, 0x20uLL, "%X", v12);
  size_t v13 = strlen(__str);
  memcpy(&a2[-v13 + 10], __str, v13);
  a2[10] = 32;
  uint64_t v14 = *((void *)this + 53);
  if (*(unsigned char *)(v14 + 3))
  {
    uint64_t v15 = 0;
    unint64_t v16 = 0;
    uint64_t v17 = 10;
    do
    {
      int v18 = &a2[v17];
      int v19 = *(unsigned __int8 *)(v14 + v15 + 4);
      *(_WORD *)&a2[v17 + 1] = 12336;
      snprintf(__str, 0x20uLL, "%X", v19);
      size_t v20 = strlen(__str);
      memcpy(&a2[v17 - v20 + 3], __str, v20);
      void v18[3] = 32;
      int v21 = *(unsigned __int8 *)(*((void *)this + 53) + v15 + 5);
      *((_WORD *)v18 + 2) = 12336;
      snprintf(__str, 0x20uLL, "%X", v21);
      size_t v22 = strlen(__str);
      memcpy(&a2[v17 - v22 + 6], __str, v22);
      v18[6] = 32;
      ++v16;
      uint64_t v14 = *((void *)this + 53);
      v17 += 6;
      v15 += 2;
    }
    while (v16 < *(unsigned __int8 *)(v14 + 3));
    uint64_t v23 = v17;
  }
  else
  {
    uint64_t v23 = 10;
  }
  uint64_t result = 0;
  a2[v23] = 0;
  return result;
}

uint64_t MPEGAudioFile::GetLoudnessInfo(MPEGAudioFile *this, CACFDictionary *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)this + 20);
  unsigned int v25 = 0;
  int v20 = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  __int16 v19 = 257;
  if (!GetSoundCheckDictionaryFromID3(v3, (CACFDictionary *)&Mutable, 0)) {
    CACFDictionary::AddDictionary(a2, @"sound check info", Mutable);
  }
  int v20 = 4;
  if (!ID3ParserGetProperty(v3, 0, 0, 1717792372, (uint64_t)&v20, (uint64_t)&v25))
  {
    int v20 = 12;
    if (v25)
    {
      unsigned int v4 = 1;
      do
      {
        int v21 = 1129270605;
        unsigned int v22 = v4 - 1;
        int v20 = 12;
        if (ID3ParserGetProperty(v3, 8, (uint64_t)&v21, 1718185574, (uint64_t)&v20, (uint64_t)v23)
          || (CFDictionaryRef theDict = 0,
              int v20 = 8,
              ID3ParserGetProperty(v3, 4, (uint64_t)v24, 1717854580, (uint64_t)&v20, (uint64_t)&theDict)))
        {
          int v5 = 0;
        }
        else
        {
          CFStringRef Value = (const __CFString *)CFDictionaryGetValue(theDict, @"identifier");
          CFStringRef v9 = (const __CFString *)CFDictionaryGetValue(theDict, @"text");
          int v5 = 0;
          if (Value)
          {
            CFStringRef v10 = v9;
            if (v9)
            {
              if (CFStringCompare(Value, @"iTunLOUD", 0))
              {
                int v5 = 0;
              }
              else
              {
                if (CFStringGetCString(v10, buffer, 128, 0x201u)) {
                  ParseiTunesLOUDData(buffer, a2, v11);
                }
                int v5 = 1;
              }
            }
          }
          CFRelease(theDict);
        }
      }
      while (v4++ < v25 && v5 == 0);
    }
    *(void *)buffer = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    __int16 v27 = 257;
    if (v25)
    {
      for (unsigned int i = 0; i < v25; ++i)
      {
        if (CACFDictionary::Size((CACFDictionary *)buffer) > 3) {
          break;
        }
        int v21 = 1415075928;
        unsigned int v22 = i;
        int v20 = 12;
        if (!ID3ParserGetProperty(v3, 8, (uint64_t)&v21, 1718185574, (uint64_t)&v20, (uint64_t)v23))
        {
          CFDictionaryRef theDict = 0;
          int v20 = 8;
          if (!ID3ParserGetProperty(v3, 4, (uint64_t)v24, 1717854580, (uint64_t)&v20, (uint64_t)&theDict))
          {
            size_t v13 = CFDictionaryGetValue(theDict, @"identifier");
            CFStringRef v14 = (const __CFString *)CFDictionaryGetValue(theDict, @"text");
            if (v13 && v14) {
              AddTextToReplayGainDict((CFComparisonResult)v13, v14, (CACFDictionary *)buffer);
            }
            CFRelease(theDict);
          }
        }
      }
    }
    if (CACFDictionary::Size((CACFDictionary *)buffer)) {
      CACFDictionary::AddDictionary(a2, @"REPLAYGAIN", *(const __CFDictionary **)buffer);
    }
    CACFDictionary::~CACFDictionary((CACFDictionary *)buffer);
  }
  if (CACFDictionary::Size(a2)) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = 2003334207;
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  return v15;
}

void sub_190122F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  _Unwind_Resume(a1);
}

uint64_t MPEGAudioFile::SetSoundCheckDictionary(MPEGAudioFile *this, CACFDictionary *a2)
{
  if (!*((void *)this + 53) || !*((void *)this + 52))
  {
    uint64_t v4 = *((void *)this + 21);
    if (v4)
    {
      if (!*(_DWORD *)(v4 + 40))
      {
        uint64_t v7 = *((void *)this + 15);
        if (v7)
        {
          if (*(uint64_t *)(v7 + 24) > 0) {
            return 1869640813;
          }
        }
      }
    }
    int v5 = (CACFDictionary *)*((void *)this + 52);
    if (v5)
    {
      CACFDictionary::~CACFDictionary(v5);
      MEMORY[0x192FC8940]();
      *((void *)this + 52) = 0;
    }
    else
    {
      uint64_t v6 = *((void *)this + 15);
      if (v6 && *(uint64_t *)(v6 + 24) > 0) {
        return 1869640813;
      }
    }
    operator new();
  }
  return 2003334207;
}

void sub_190123200(_Unwind_Exception *a1)
{
  MEMORY[0x192FC8940](v1, 0x1081C40866342B4);
  _Unwind_Resume(a1);
}

uint64_t MPEGAudioFile::GetSoundCheckDictionary(MPEGAudioFile *this, CACFDictionary *a2)
{
  return GetSoundCheckDictionaryFromID3(*((void *)this + 20), a2, 0);
}

uint64_t MPEGAudioFile::GetSoundCheckDictionarySize(MPEGAudioFile *this, unsigned int *a2, unsigned int *a3)
{
  if (a2) {
    *a2 = 8;
  }
  if (a3) {
    *a3 = *((unsigned char *)this + 100) & 2;
  }
  return 0;
}

uint64_t MPEGAudioFile::GetInfoDictionary(MPEGAudioFile *this, CACFDictionary *a2)
{
  uint64_t v4 = *((void *)this + 20);
  if (v4) {
    FillInfoDictionaryFromID3Parser(a2, v4);
  }
  double v7 = 0.0;
  int v5 = (AudioFileObject *)(*(uint64_t (**)(MPEGAudioFile *, double *))(*(void *)this + 544))(this, &v7);
  if (!v5) {
    AudioFileObject::AddDurationToInfoDictionary(v5, a2, &v7);
  }
  return 0;
}

uint64_t MPEGAudioFile::PacketToDependencyInfo(MPEGAudioFile *this, AudioPacketDependencyInfoTranslation *a2)
{
  unsigned int v3 = (*(uint64_t (**)(MPEGAudioFile *))(*(void *)this + 672))(this);
  SInt64 mPacket = a2->mPacket;
  if (a2->mPacket >= v3) {
    LODWORD(mPacket) = v3;
  }
  a2->mIsIndependentlyDecodable = 1;
  a2->mNumberPrerollPackets = mPacket;
  return 0;
}

uint64_t MPEGAudioFile::GetNumPackets(MPEGAudioFile *this)
{
  uint64_t v2 = *((unsigned int *)this + 10);
  if (v2) {
    return (*(uint64_t (**)(MPEGAudioFile *))(*(void *)this + 224))(this) / v2;
  }
  uint64_t result = *((void *)this + 27);
  if (result)
  {
    if (!*((unsigned char *)this + 140)) {
      return result;
    }
  }
  else if (!*((unsigned char *)this + 140))
  {
    (*(void (**)(MPEGAudioFile *, uint64_t, void, uint64_t))(*(void *)this + 688))(this, -1, 0, 1);
  }
  uint64_t v4 = *((void *)this + 15);
  if (v4) {
    return *(void *)(v4 + 24);
  }
  else {
    return 0;
  }
}

uint64_t MPEGAudioFile::GetNumBytes(MPEGAudioFile *this)
{
  uint64_t v4 = 0;
  int v2 = (*(uint64_t (**)(void, uint64_t *))(**((void **)this + 13) + 24))(*((void *)this + 13), &v4);
  uint64_t result = v4;
  if (!v2)
  {
    if (*((_WORD *)this + 93) == 1) {
      return v4 - *((void *)this + 9) - 128;
    }
    else {
      return v4 - *((void *)this + 9);
    }
  }
  return result;
}

uint64_t MPEGAudioFile::UpdateSize(MPEGAudioFile *this)
{
  return 0;
}

uint64_t MPEGAudioFile::SetProperty(MPEGAudioFile *this, int a2, unsigned int a3, uint64_t *a4)
{
  if (a2 == 1936158068)
  {
    uint64_t v6 = 1869627199;
    if ((*((unsigned char *)this + 100) & 2) != 0)
    {
      uint64_t v7 = *((void *)this + 15);
      if (!v7 || !*(void *)(v7 + 24))
      {
        if (a3 == 4)
        {
          uint64_t v6 = 0;
          *((unsigned char *)this + 409) = *(_DWORD *)a4 != 0;
        }
        else
        {
          return 561211770;
        }
      }
    }
    return v6;
  }
  if (a2 == 1768174452)
  {
    uint64_t v5 = *((void *)this + 15);
    if (v5)
    {
      if (*(uint64_t *)(v5 + 24) > 0) {
        return 1869640813;
      }
      if ((*((unsigned char *)this + 100) & 2) == 0) {
        return 1886547263;
      }
      uint64_t v9 = *(void *)(v5 + 24);
    }
    else
    {
      if ((*((unsigned char *)this + 100) & 2) == 0) {
        return 1886547263;
      }
      uint64_t v9 = 0;
    }
    uint64_t v6 = 2003334207;
    if (a3 >= 0xA && v9 <= 0)
    {
      size_t v11 = &unk_1EDF8C248;
      char v12 = 0;
      v15[0] = v15;
      v15[1] = v15;
      v15[2] = 0;
      char v16 = 0;
      uint64_t v18 = 0;
      uint64_t v17 = 0;
      __int16 v19 = 0;
      uint64_t v13 = *a4;
      __int16 v14 = *((_WORD *)a4 + 4);
      if (ID3TagBase::Init((ID3TagBase *)&v11))
      {
        uint64_t v10 = *((void *)this + 21);
        if (v10)
        {
          (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
          *((void *)this + 21) = 0;
        }
        operator new();
      }
      size_t v11 = &unk_1EDF8C248;
      std::__list_imp<ID3FrameInfo>::clear(v15);
    }
    return v6;
  }
  return AudioFileObject::SetProperty(this, a2, a3, a4);
}

void sub_190123B34(_Unwind_Exception *a1)
{
  std::__list_imp<ID3FrameInfo>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t MPEGAudioFile::GetProperty(MPEGAudioFile *this, int a2, unsigned int *a3, uint64_t *a4)
{
  uint64_t v6 = this;
  if (a2 <= 1835296111)
  {
    if (a2 != 1651663220)
    {
      if (a2 == 1768174447)
      {
        uint64_t result = 1886681407;
        if (*((_WORD *)v6 + 92) != 1 && *((_WORD *)v6 + 93) != 1 || (*((unsigned char *)v6 + 100) & 2) != 0) {
          return result;
        }
        if (*a3 >= 8)
        {
          uint64_t result = 0;
          *a4 = *((void *)v6 + 19);
          unsigned int v8 = 8;
          goto LABEL_32;
        }
      }
      else
      {
        if (a2 != 1768174452) {
          goto LABEL_38;
        }
        uint64_t v9 = *((void *)this + 20);
        if (v9)
        {
          int v12 = 4;
          unsigned int v13 = 0;
          ID3ParserGetProperty(v9, 0, 0, 1953720698, (uint64_t)&v12, (uint64_t)&v13);
          if (v13 && *a3 >= v13) {
            return (*(uint64_t (**)(void, void, void))(**((void **)v6 + 13) + 48))(*((void *)v6 + 13), 0, *((void *)v6 + 19));
          }
        }
        else
        {
          if (!*((_WORD *)v6 + 93)) {
            return 2003334207;
          }
          if (*a3 >= 0x80)
          {
            size_t v11 = *(uint64_t (**)(void))(**((void **)v6 + 13) + 48);
            return v11();
          }
        }
      }
      return 561211770;
    }
    if (*a3 != 4) {
      return 561211770;
    }
    LODWORD(v10) = *((_DWORD *)this + 57);
    if (!v10 || *((unsigned char *)this + 140))
    {
      (*(void (**)(MPEGAudioFile *, uint64_t, void, uint64_t))(*(void *)this + 688))(this, 10, 0, 1);
      uint64_t v10 = *((void *)v6 + 15);
      if (v10)
      {
        uint64_t v10 = *(void *)(v10 + 24);
        if (v10 < 1) {
          LODWORD(v10) = 0;
        }
        else {
          LODWORD(v10) = 1000 * (*((void *)v6 + 25) / (unint64_t)v10);
        }
      }
    }
    goto LABEL_50;
  }
  if (a2 > 1886616164)
  {
    if (a2 == 1886616165)
    {
      if (*a3 != 4) {
        return 561211770;
      }
      if (!*((_DWORD *)this + 10) && !*((unsigned char *)this + 140)) {
        (*(void (**)(MPEGAudioFile *, uint64_t, void, uint64_t))(*(void *)this + 688))(this, -1, 0, 1);
      }
      this = v6;
      a2 = 1886616165;
LABEL_38:
      return AudioFileObject::GetProperty(this, a2, a3, a4);
    }
    if (a2 != 1936158068) {
      goto LABEL_38;
    }
    if (*a3 != 4) {
      return 561211770;
    }
    uint64_t result = 0;
    LODWORD(v10) = *((unsigned __int8 *)v6 + 409);
LABEL_51:
    *(_DWORD *)a4 = v10;
    return result;
  }
  if (a2 == 1835296112)
  {
    if (*a3 != 4) {
      return 561211770;
    }
    LODWORD(v10) = (*(uint64_t (**)(MPEGAudioFile *))(*(void *)this + 672))(this);
LABEL_50:
    uint64_t result = 0;
    goto LABEL_51;
  }
  if (a2 != 1886283375) {
    goto LABEL_38;
  }
  if (*a3 < 0x10) {
    return 561211770;
  }
  if (*((void *)this + 48) != -1)
  {
    uint64_t result = 0;
    *(_OWORD *)a4 = *((_OWORD *)v6 + 24);
    unsigned int v8 = 16;
LABEL_32:
    *a3 = v8;
    return result;
  }
  return 1667787583;
}

uint64_t MPEGAudioFile::GetPropertyInfo(MPEGAudioFile *this, int a2, unsigned int *a3, unsigned int *a4)
{
  if (a2 <= 1835296111)
  {
    if (a2 == 1768174447)
    {
      if (!a3) {
        goto LABEL_25;
      }
      unsigned int v7 = 8;
LABEL_24:
      *a3 = v7;
LABEL_25:
      if (a4)
      {
        uint64_t result = 0;
        *a4 = 0;
        return result;
      }
      return 0;
    }
    if (a2 != 1768174452) {
      goto LABEL_28;
    }
    if (a4)
    {
      uint64_t v10 = 0;
      (*(void (**)(void, uint64_t *))(**((void **)this + 13) + 24))(*((void *)this + 13), &v10);
      *a4 = (v10 == 0) & (*((unsigned __int8 *)this + 100) >> 1);
    }
    if (a3)
    {
      uint64_t v8 = *((void *)this + 20);
      if (v8)
      {
        LODWORD(v10) = 4;
        if (ID3ParserGetProperty(v8, 0, 0, 1953720698, (uint64_t)&v10, (uint64_t)a3)) {
          return 2003334207;
        }
        else {
          return 0;
        }
      }
      else
      {
        uint64_t result = 0;
        if (*((_WORD *)this + 93)) {
          *a3 = 128;
        }
        else {
          *a3 = 0;
        }
      }
      return result;
    }
    return 0;
  }
  switch(a2)
  {
    case 1835296112:
      if (!a3) {
        goto LABEL_25;
      }
      unsigned int v7 = 4;
      goto LABEL_24;
    case 1936158068:
      if (a3) {
        *a3 = 4;
      }
      if (a4)
      {
        uint64_t v10 = 0;
        (*(void (**)(void, uint64_t *))(**((void **)this + 13) + 24))(*((void *)this + 13), &v10);
        uint64_t result = 0;
        *a4 = (v10 == 0) & (*((unsigned __int8 *)this + 100) >> 1);
        return result;
      }
      return 0;
    case 1886283375:
      if (!a3) {
        goto LABEL_25;
      }
      unsigned int v7 = 16;
      goto LABEL_24;
  }
LABEL_28:
  return AudioFileObject::GetPropertyInfo(this, a2, a3, a4);
}

uint64_t MPEGAudioFile::WritePackets(MPEGAudioFile *this, uint64_t a2, uint64_t a3, const AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, unsigned int *a7)
{
  uint64_t v10 = a4;
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  UInt32 v14 = *((_DWORD *)this + 10);
  uint64_t v15 = *((void *)this + 9);
  int v43 = 0;
  if (a5) {
    goto LABEL_2;
  }
  uint64_t v17 = *((void *)this + 15);
  if (v17)
  {
    if (*(void *)(v17 + 24)) {
      goto LABEL_2;
    }
  }
  if (*((unsigned char *)this + 409)) {
    goto LABEL_2;
  }
  MPEGPacketParser::MPEGPacketParser((MPEGPacketParser *)buf, a7, a3);
  if (!buf[0]) {
    goto LABEL_2;
  }
  *((_DWORD *)this + 100) = v15;
  if (v14)
  {
    unsigned int v40 = 1231971951;
    UInt32 mDataByteSize = v14;
  }
  else
  {
    UInt32 mDataByteSize = v10->mDataByteSize;
    unsigned int v40 = 1483304551;
  }
  size_t v25 = mDataByteSize;
  CADeprecated::CAAutoFree<unsigned char>::CAAutoFree(&v42, mDataByteSize, 1);
  uint64_t v39 = v10;
  int v26 = v46[12];
  size_t v41 = v25;
  bzero(v42, v25);
  *(void *)uint64_t v42 = *(void *)a7;
  unsigned int v27 = bswap32(v40);
  *((_DWORD *)this + 101) = 4;
  if (LOBYTE(v46[0]) != 1) {
    goto LABEL_36;
  }
  if (v26 == 2)
  {
    int v28 = 36;
    uint64_t v29 = 36;
  }
  else
  {
LABEL_36:
    uint64_t v29 = 21;
    if (LOBYTE(v46[0]) != 1 && v26 == 1) {
      int v28 = 13;
    }
    else {
      int v28 = 21;
    }
    if (LOBYTE(v46[0]) != 1 && v26 == 1) {
      uint64_t v29 = 13;
    }
  }
  *((_DWORD *)this + 101) = v28;
  size_t v30 = (char *)v42 + v29;
  *(_DWORD *)size_t v30 = v27;
  *((_DWORD *)v30 + 1) = 0;
  *((void *)v30 + 1) = 0;
  uint64_t v10 = v39;
  uint64_t v16 = (*(uint64_t (**)(void, void, uint64_t, size_t, void *, int *))(**((void **)this + 13) + 56))(*((void *)this + 13), 0, v15, v25, v42, &v43);
  if (v16)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v44 = 136315394;
      *(void *)&v44[4] = "MP3AudioFile.cpp";
      *(_WORD *)&v44[12] = 1024;
      *(_DWORD *)&v44[14] = 990;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  WritePackets: Failed to Write Xing Packet", v44, 0x12u);
    }
  }
  else
  {
    v15 += v41;
    *((void *)this + 9) = v15;
  }
  if (v42) {
    free(v42);
  }
  if (!v16)
  {
LABEL_2:
    if (v14) {
      return AudioFileObject::WritePackets(this, a2, a3, a4, a5, a6, a7);
    }
    if (a6)
    {
      if (*a6)
      {
        *(void *)uint64_t v44 = 0;
        *(void *)&v44[8] = 0;
        (*(void (**)(MPEGAudioFile *, uint64_t, void, uint64_t))(*(void *)this + 688))(this, -1, 0, 1);
        __int16 v19 = (uint64_t *)*((void *)this + 15);
        if (v19)
        {
          if (v19[3] == a5)
          {
            if (!v10)
            {
              uint64_t v16 = 1885563711;
              if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                return v16;
              }
              *(_DWORD *)AudioFormatInfo buf = 136315394;
              *(void *)&uint8_t buf[4] = "MP3AudioFile.cpp";
              LOWORD(v46[0]) = 1024;
              *(_DWORD *)((char *)v46 + 2) = 1020;
              int v21 = MEMORY[0x1E4F14500];
              unsigned int v22 = "%25s:%-5d  Packet Descriptions were not provided";
              goto LABEL_30;
            }
            uint64_t v20 = v19[3];
            if (v20)
            {
              CompressedPacketTable::operator[]((uint64_t)buf, v19, v20 - 1);
              v15 += *(void *)buf + v46[0];
            }
            uint64_t v16 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, unsigned int *, int *))(**((void **)this + 13) + 56))(*((void *)this + 13), 0, v15, a3, a7, &v43);
            if (v16)
            {
              if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                return v16;
              }
              *(_DWORD *)AudioFormatInfo buf = 136315394;
              *(void *)&uint8_t buf[4] = "MP3AudioFile.cpp";
              LOWORD(v46[0]) = 1024;
              *(_DWORD *)((char *)v46 + 2) = 1030;
              int v21 = MEMORY[0x1E4F14500];
              unsigned int v22 = "%25s:%-5d  GetDataSource()->WriteBytes Failed";
LABEL_30:
              _os_log_impl(&dword_18FEC0000, v21, OS_LOG_TYPE_ERROR, v22, buf, 0x12u);
              return v16;
            }
            int v32 = v10;
            if (a5)
            {
              CompressedPacketTable::operator[]((uint64_t)buf, v19, 0);
              int v32 = (const AudioStreamPacketDescription *)buf;
            }
            if (*a6)
            {
              unint64_t v33 = 0;
              UInt32 v34 = v32->mDataByteSize;
              p_UInt32 mDataByteSize = &v10->mDataByteSize;
              do
              {
                uint64_t v36 = *((void *)this + 15);
                if (v36)
                {
                  uint64_t v36 = *(void *)(v36 + 24);
                  if (v36)
                  {
                    CompressedPacketTable::operator[]((uint64_t)buf, v19, v36 - 1);
                    uint64_t v36 = *(void *)buf + v46[0];
                  }
                }
                *(void *)uint64_t v44 = v36;
                UInt32 v37 = *p_mDataByteSize;
                *(_DWORD *)&v44[8] = 0;
                *(_DWORD *)&v44[12] = v37;
                AudioFileObject::AppendPacket(this, (const AudioStreamPacketDescription *)v44);
                if (*((unsigned char *)this + 408)) {
                  BOOL v38 = v37 == v34;
                }
                else {
                  BOOL v38 = 1;
                }
                if (!v38) {
                  *((unsigned char *)this + 408) = 0;
                }
                ++v33;
                p_mDataByteSize += 4;
              }
              while (v33 < *a6);
            }
            return 0;
          }
        }
        else if (!a5)
        {
          operator new();
        }
        return 1885563711;
      }
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        return 0;
      }
      *(_DWORD *)AudioFormatInfo buf = 136315394;
      *(void *)&uint8_t buf[4] = "MP3AudioFile.cpp";
      LOWORD(v46[0]) = 1024;
      *(_DWORD *)((char *)v46 + 2) = 1007;
      uint64_t v23 = MEMORY[0x1E4F14500];
      unsigned int v24 = "%25s:%-5d  WritePackets Failed - *ioNumPackets == 0";
    }
    else
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        return 0;
      }
      *(_DWORD *)AudioFormatInfo buf = 136315394;
      *(void *)&uint8_t buf[4] = "MP3AudioFile.cpp";
      LOWORD(v46[0]) = 1024;
      *(_DWORD *)((char *)v46 + 2) = 1006;
      uint64_t v23 = MEMORY[0x1E4F14500];
      unsigned int v24 = "%25s:%-5d  WritePackets Failed - ioNumPackets == NULL";
    }
    _os_log_impl(&dword_18FEC0000, v23, OS_LOG_TYPE_ERROR, v24, buf, 0x12u);
    return 0;
  }
  return v16;
}

void sub_190124730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  if (a13) {
    free(a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MPEGAudioFile::ReadPackets(MPEGAudioFile *this, uint64_t a2, unsigned int *a3, AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, char *a7)
{
  unsigned int v7 = a7;
  uint64_t v8 = a6;
  uint64_t v9 = a5;
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  if (!*((_DWORD *)this + 10))
  {
    if (a4) {
      BOOL v14 = a7 == 0;
    }
    else {
      BOOL v14 = 0;
    }
    int v15 = v14;
    int v55 = v15;
    if (!a6 || (uint64_t v16 = *a6, !v16))
    {
      uint64_t v18 = 2003334207;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioFormatInfo buf = 136315394;
        *(void *)&uint8_t buf[4] = "MP3AudioFile.cpp";
        LOWORD(v58[0]) = 1024;
        *(_DWORD *)((char *)v58 + 2) = 835;
        _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  invalid num packets parameter", buf, 0x12u);
      }
      return v18;
    }
    unsigned int v17 = (*(uint64_t (**)(MPEGAudioFile *, uint64_t, void, uint64_t))(*(void *)this + 688))(this, v16 + a5, 0, 1);
    if (v17)
    {
      if (v17 == -39) {
        return 0;
      }
      else {
        return v17;
      }
    }
    __int16 v19 = (uint64_t *)*((void *)this + 15);
    if (!v19) {
      return 1685348671;
    }
    uint64_t v20 = v19[3];
    if (v20 <= v9)
    {
      if (a3) {
        *a3 = 0;
      }
      uint64_t v18 = 0;
      *uint64_t v8 = 0;
      return v18;
    }
    uint64_t v52 = *v8;
    if (v52 + v9 > v20)
    {
      LODWORD(v52) = v20 - v9;
      *uint64_t v8 = v20 - v9;
    }
    __int16 v46 = a3;
    uint64_t v47 = v9;
    if (v55)
    {
      unsigned int v51 = 0;
    }
    else
    {
      int v49 = v19;
      unsigned int v56 = 0;
      unsigned int v21 = v52;
      if (v52)
      {
        unsigned int v51 = 0;
        int v22 = 0;
        CFTypeRef v48 = v8;
        while (1)
        {
          uint64_t v23 = (uint64_t *)*((void *)this + 15);
          unint64_t v24 = v23[3];
          unsigned int v53 = v21;
          unint64_t v25 = v9 + (unint64_t)v21 >= v24 ? v24 - v9 : v21;
          int v50 = v22;
          if (v24 <= v9)
          {
            unsigned int v26 = 0;
            LODWORD(v28) = 0;
          }
          else
          {
            CompressedPacketTable::operator[]((uint64_t)buf, v23, v9);
            unsigned int v26 = v58[0];
            if (v25 < 2)
            {
              LODWORD(v28) = 1;
            }
            else
            {
              uint64_t v27 = *(void *)buf;
              unint64_t v28 = 1;
              unsigned int v29 = v58[0];
              do
              {
                CompressedPacketTable::operator[]((uint64_t)buf, v23, v28 + v9);
                uint64_t v30 = v27 + v29;
                uint64_t v27 = *(void *)buf;
                if (v30 < *(uint64_t *)buf) {
                  break;
                }
                unsigned int v29 = v58[0];
                unint64_t v28 = (v28 + 1);
                v26 += v58[0];
              }
              while (v25 > v28);
            }
          }
          CompressedPacketTable::operator[]((uint64_t)buf, v49, v9);
          unsigned int v56 = v26;
          uint64_t v31 = (*(uint64_t (**)(MPEGAudioFile *, uint64_t, void, unsigned int *, char *))(*(void *)this + 72))(this, a2, *(void *)buf, &v56, v7);
          uint64_t v18 = v31;
          if (v31 != -39 && v31 != 0) {
            return v18;
          }
          unsigned int v21 = v53 - v28;
          int v22 = v28 + v50;
          v7 += v56;
          v51 += v56;
          v9 += v28;
          uint64_t v8 = v48;
          unint64_t v33 = a4;
          if ((int)v28 + v50 >= *v48) {
            goto LABEL_51;
          }
        }
      }
      int v22 = 0;
      unsigned int v51 = 0;
      unint64_t v33 = a4;
LABEL_51:
      LODWORD(v52) = v22;
      __int16 v19 = v49;
      if (!v33) {
        goto LABEL_66;
      }
    }
    UInt32 v34 = v8;
    uint64_t v35 = v19;
    CompressedPacketTable::operator[]((uint64_t)buf, v19, v47);
    if (v52)
    {
      uint64_t v36 = 0;
      uint64_t v37 = *(void *)buf;
      uint64_t v38 = v58[0];
      p_UInt32 mDataByteSize = &a4->mDataByteSize;
      uint64_t v40 = *(void *)buf;
      do
      {
        if (v55) {
          uint64_t v41 = 0;
        }
        else {
          uint64_t v41 = v37;
        }
        *(void *)(p_mDataByteSize - 3) = v40 - v41;
        *(p_mDataByteSize - 1) = 0;
        UInt32 *p_mDataByteSize = v38;
        uint64_t v42 = v36 + 1;
        if (v36 + 1 < (unint64_t)v52)
        {
          CompressedPacketTable::operator[]((uint64_t)buf, v35, v47 + 1 + v36);
          uint64_t v43 = v40 + v38;
          uint64_t v40 = *(void *)buf;
          uint64_t v38 = v58[0];
          BOOL v44 = __OFSUB__(*(void *)buf, v43);
          uint64_t v45 = *(void *)buf - v43;
          if ((v45 < 0) ^ v44 | (v45 == 0)) {
            uint64_t v45 = 0;
          }
          v37 += v45;
        }
        p_mDataByteSize += 4;
        uint64_t v36 = v42;
      }
      while (v52 != v42);
    }
    else
    {
      LODWORD(v52) = 0;
    }
    uint64_t v8 = v34;
LABEL_66:
    if (v46) {
      *__int16 v46 = v51;
    }
    uint64_t v18 = 0;
    *uint64_t v8 = v52;
    return v18;
  }
  return AudioFileObject::ReadPackets(this, a2, a3, a4, a5, a6, a7);
}

uint64_t MPEGAudioFile::Close(MPEGAudioFile *this)
{
  if ((*((unsigned char *)this + 100) & 2) == 0 || *((unsigned char *)this + 409)) {
    return 0;
  }
  int v8 = 0;
  uint64_t v3 = *(void *)this;
  if (*((unsigned char *)this + 408))
  {
    unsigned int v4 = 0;
    unsigned int v5 = 1231971951;
    int v6 = 0x2000000;
  }
  else
  {
    unsigned int v4 = (*(uint64_t (**)(MPEGAudioFile *))(*(void *)this + 240))(this);
    uint64_t v3 = *(void *)this;
    unsigned int v5 = 1483304551;
    int v6 = 50331648;
  }
  unsigned int v7 = (*(uint64_t (**)(MPEGAudioFile *))(v3 + 224))(this);
  v9[0] = bswap32(v5);
  v9[1] = v6;
  v9[2] = bswap32(v4);
  void v9[3] = bswap32(v7);
  return (*(uint64_t (**)(void, void, void, uint64_t, _DWORD *, int *))(**((void **)this + 13) + 56))(*((void *)this + 13), 0, (*((_DWORD *)this + 101) + *((_DWORD *)this + 100)), 16, v9, &v8);
}

uint64_t MPEGAudioFile::InitializeDataSource(MPEGAudioFile *this, const AudioStreamBasicDescription *a2)
{
  uint64_t result = 1718449215;
  AudioFormatID mFormatID = a2->mFormatID;
  int v5 = *((_DWORD *)this + 21);
  if ((mFormatID != 778924083 || v5 == 1297106739) && (mFormatID != 778924082 || v5 == 1297106738))
  {
    if (mFormatID != 778924081 || v5 == 1297106737) {
      return 0;
    }
    else {
      return 1718449215;
    }
  }
  return result;
}

uint64_t MPEGAudioFile::OpenFromDataSource(MPEGAudioFile *this)
{
  uint64_t v1 = this;
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  int64_t v67 = 0;
  MPEGAudioFile::ParseID3Tags(this);
  unsigned int v66 = 0;
  __int16 v63 = v1;
  if (*((_WORD *)v1 + 92) && (uint64_t v2 = *((void *)v1 + 20)) != 0)
  {
    v82[0] = 4;
    ID3ParserGetProperty(v2, 0, 0, 1953720698, (uint64_t)v82, (uint64_t)&v66);
    uint64_t v3 = v66;
    uint64_t v68 = 0;
    unsigned int v4 = 0;
    if (!(*(unsigned int (**)(void, uint64_t *))(**((void **)v1 + 13) + 24))(*((void *)v1 + 13), &v68))
    {
      for (uint64_t i = v3; ; i += v24)
      {
        LODWORD(v77) = 10;
        if ((*(unsigned int (**)(void, void, uint64_t, uint64_t, uint8_t *, uint64_t *))(**((void **)v63 + 13) + 48))(*((void *)v63 + 13), 0, i, 10, buf, &v77)|| buf[0] != 73|| buf[1] != 68|| buf[2] != 51)
        {
          break;
        }
        unsigned int v24 = ID3Size(0xAu, buf, v70);
        v4 += v24;
      }
    }
    uint64_t v1 = v63;
    int64_t v62 = v3 + v4;
  }
  else
  {
    int64_t v62 = 0;
  }
  uint64_t FPosForNextMatchingSyncWordDS = (*(uint64_t (**)(void, int64_t *))(**((void **)v1 + 13) + 24))(*((void *)v1 + 13), &v67);
  if (FPosForNextMatchingSyncWordDS) {
    goto LABEL_51;
  }
  int v61 = 0;
  uint64_t v6 = 0;
  unsigned int v7 = (DataSource *)*((void *)v63 + 13);
  int64_t v64 = v67;
  uint64_t v65 = (__int16 *)((char *)v63 + 186);
  uint64_t v77 = 0;
  unsigned int v81 = 0;
  int v8 = 2;
  *(void *)int v76 = 0;
  while (1)
  {
    while (1)
    {
LABEL_8:
      while (v8 == 3)
      {
        unsigned int v9 = v81;
        unsigned int v10 = v76[1];
        uint64_t v68 = v6;
        LODWORD(v75) = 0;
        LODWORD(v74) = 0;
        *(void *)int v70 = 0;
        unsigned int v83 = 0;
        if ((*(unsigned int (**)(DataSource *, void, uint64_t, uint64_t, uint64_t *, int64_t *))(*(void *)v7 + 48))(v7, 0, v6, 4, &v75, &v74))
        {
LABEL_10:
          int v8 = 1;
          continue;
        }
        buf[0] = 0;
        memset(&buf[8], 0, 64);
        int v11 = ParseMPEGSyncWord(bswap32(v75), (uint64_t)&buf[8]);
        int v8 = 0;
        if (v11)
        {
          unsigned int v12 = 0;
          int v13 = 0;
          v82[0] = buf[12];
          LODWORD(v80) = buf[13];
          double v14 = *(double *)&buf[32];
          int v15 = *(_DWORD *)&buf[60];
          v73[0] = *(_DWORD *)&buf[16];
          int64_t v16 = v6 + *(unsigned int *)&buf[16];
          while (1)
          {
            int v17 = 5;
LABEL_14:
            switch(v17)
            {
              case 4:
                v16 += v73[0];
                continue;
              case 5:
                if (GetFPosForNextSyncWordDS(v7, (unsigned __int16 *)v65, v16, v64, &v68, v82, (unsigned int *)&v80, v73, (double *)v70, &v83) == -39)goto LABEL_10; {
                int v17 = 6;
                }
                if (v16 != v68)
                {
                  ++v12;
                  int64_t v16 = v68;
                  if (v12 >= 4) {
                    goto LABEL_40;
                  }
                }
                goto LABEL_14;
              case 6:
                if (v82[0] == v9) {
                  int v17 = 7;
                }
                else {
                  int v17 = 9;
                }
                goto LABEL_14;
              case 7:
                if (v80 == v10) {
                  int v17 = 8;
                }
                else {
                  int v17 = 9;
                }
                goto LABEL_14;
              case 8:
                if (v14 == *(double *)v70) {
                  int v17 = 11;
                }
                else {
                  int v17 = 9;
                }
                goto LABEL_14;
              case 9:
                if (++v12 > 3)
                {
LABEL_40:
                  int v8 = 0;
                  goto LABEL_8;
                }
                ++v16;
                break;
              case 10:
                ++v13;
                int v17 = 4;
                if (v13 == 4) {
                  goto LABEL_10;
                }
                goto LABEL_14;
              case 11:
                if (v15 == v83) {
                  int v17 = 10;
                }
                else {
                  int v17 = 9;
                }
                goto LABEL_14;
              default:
                goto LABEL_14;
            }
          }
        }
      }
      if (!v8) {
        break;
      }
      if (v8 == 1)
      {
        *((void *)v63 + 9) = v62;
        *(void *)int v76 = 0;
        int64_t v74 = 0;
        unint64_t v72 = 0;
        *(void *)int v73 = 0;
        *(_OWORD *)int v70 = 0u;
        long long v71 = 0u;
        uint64_t FPosForNextMatchingSyncWordDS = (*(uint64_t (**)(void, int64_t *))(**((void **)v63 + 13)
                                                                                            + 24))(*((void *)v63 + 13), &v74);
        if (FPosForNextMatchingSyncWordDS) {
          goto LABEL_48;
        }
        uint64_t v18 = *((void *)v63 + 9);
        uint64_t v75 = v18;
        int64_t v19 = *((_WORD *)v63 + 93) == 1 ? v74 - 128 : v74;
        uint64_t FPosForNextMatchingSyncWordDS = (*(uint64_t (**)(void, void, uint64_t, uint64_t, unsigned int *, unsigned int *))(**((void **)v63 + 13) + 48))(*((void *)v63 + 13), 0, v18, 4, &v76[1], v76);
        if (FPosForNextMatchingSyncWordDS) {
          goto LABEL_48;
        }
        uint64_t FPosForNextMatchingSyncWordDS = 1685348671;
        memset(v69, 0, sizeof(v69));
        int v25 = ParseMPEGSyncWord(bswap32(v76[1]), (uint64_t)v69);
        LOBYTE(v68) = v25;
        if (!v25) {
          goto LABEL_48;
        }
        size_t v26 = v69[0].n128_u32[2];
        if (!v69[0].n128_u32[2] || (uint64_t v27 = v18 + v69[0].n128_u32[2], v27 > v19))
        {
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_48;
          }
          *(_DWORD *)AudioFormatInfo buf = 136315394;
          *(void *)&uint8_t buf[4] = "MP3AudioFile.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1377;
          unint64_t v28 = MEMORY[0x1E4F14500];
          goto LABEL_65;
        }
        int v29 = v69[0].n128_u8[5];
        *((_DWORD *)v63 + 3std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v69[0].n128_u8[4];
        *((_DWORD *)v63 + 37) = v29;
        unsigned __int32 v30 = v69[0].n128_u32[3] + 8;
        *((_DWORD *)v63 + 52) = v69[0].n128_u32[3] + 8;
        if (v26 > v30)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioFormatInfo buf = 136315394;
            *(void *)&uint8_t buf[4] = "MP3AudioFile.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1383;
            unint64_t v28 = MEMORY[0x1E4F14500];
LABEL_65:
            _os_log_impl(&dword_18FEC0000, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d  Invalid Packet Size", buf, 0x12u);
          }
LABEL_48:
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioFormatInfo buf = 136315394;
            *(void *)&uint8_t buf[4] = "MP3AudioFile.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1532;
            uint64_t v20 = MEMORY[0x1E4F14500];
            unsigned int v21 = "%25s:%-5d  ParseFirstPacket Failed";
            goto LABEL_50;
          }
          goto LABEL_51;
        }
        uint64_t v31 = MPEGAudioMaximumNumberOfDependentPackets((const AudioStreamBasicDescription *)&v69[1].n128_i8[8], v69[1].n128_u32[1]);
        (*(void (**)(MPEGAudioFile *, uint64_t))(*(void *)v63 + 680))(v63, v31);
        *(__n128 *)int v70 = *(__n128 *)((char *)&v69[1] + 8);
        long long v71 = *(long long *)((char *)&v69[2] + 8);
        unint64_t v72 = v69[3].n128_u64[1];
        if (v69[1].n128_f64[1] <= 0.0) {
          goto LABEL_48;
        }
        uint64_t FPosForNextMatchingSyncWordDS = (*(uint64_t (**)(MPEGAudioFile *, int *, __n128))(*(void *)v63
                                                                                                  + 176))(v63, v70, *(__n128 *)((char *)&v69[1] + 8));
        if (FPosForNextMatchingSyncWordDS) {
          goto LABEL_48;
        }
        uint64_t v32 = *((void *)v63 + 20);
        if (v32)
        {
          unsigned int v83 = 0;
          unsigned int v81 = 4;
          if (!ID3ParserGetProperty(v32, 0, 0, 1717792372, (uint64_t)&v81, (uint64_t)&v83))
          {
            if (v83)
            {
              unsigned int v33 = 1;
              do
              {
                v82[0] = 1129270605;
                v82[1] = v33 - 1;
                unsigned int v81 = 12;
                if (ID3ParserGetProperty(v32, 8, (uint64_t)v82, 1718185574, (uint64_t)&v81, (uint64_t)&v77)|| (CFDictionaryRef v80 = 0, v81 = 8, ID3ParserGetProperty(v32, 4, (uint64_t)v78, 1717854580, (uint64_t)&v81, (uint64_t)&v80)))
                {
                  BOOL v34 = 0;
                }
                else
                {
                  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v80, @"identifier");
                  CFStringRef v38 = (const __CFString *)CFDictionaryGetValue(v80, @"text");
                  BOOL v34 = 0;
                  if (Value)
                  {
                    CFStringRef v39 = v38;
                    if (v38)
                    {
                      if (CFStringCompare(Value, @"iTunSMPB", 0)
                        || (long long v86 = 0u,
                            long long v87 = 0u,
                            long long v85 = 0u,
                            memset(buf, 0, sizeof(buf)),
                            !CFStringGetCString(v39, (char *)buf, 128, 0x201u)))
                      {
                        BOOL v34 = 0;
                      }
                      else
                      {
                        if (!strcmp((const char *)buf, " 00000000 00000000 00000000 0000000000000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000"))break; {
                        BOOL v34 = ParseiTunesSMPBData((char *)&buf[9], 119, (AudioFilePacketTableInfo *)v63 + 24) == 0;
                        }
                      }
                    }
                  }
                  CFRelease(v80);
                }
                BOOL v35 = v33++ >= v83;
                BOOL v36 = !v35 && !v34;
              }
              while (v36);
            }
          }
        }
        CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)v73, v26, 0);
        uint64_t v40 = *(void *)v73;
        uint64_t FPosForNextMatchingSyncWordDS = (*(uint64_t (**)(void, void, uint64_t, size_t, void, unsigned int *))(**((void **)v63 + 13) + 48))(*((void *)v63 + 13), 0, v18, v26, *(void *)v73, v76);
        if (FPosForNextMatchingSyncWordDS)
        {
LABEL_129:
          if (!v40) {
            goto LABEL_131;
          }
          goto LABEL_130;
        }
        uint64_t v41 = v63;
        if (GetMetaHeader((uint64_t)v63 + 232, (unsigned __int8 *)v40, v26))
        {
          int v42 = *((_DWORD *)v63 + 60);
          if ((v42 & 2) != 0)
          {
            unsigned int v43 = *((_DWORD *)v63 + 62);
            BOOL v35 = v43 >= v26;
            int v44 = v43 - v26;
            if (!v35) {
              int v44 = 0;
            }
            *((_DWORD *)v63 + 5std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v44;
          }
          if (v42)
          {
            uint64_t v52 = *((unsigned int *)v63 + 61);
            *((void *)v63 + 27) = v52;
            int v53 = v42 & 1;
            double v54 = (double)v52;
            *((double *)v63 + 24) = (double)(int)gaSamplesPerFrame[3 * (*((_DWORD *)v63 + 36) - 1)
                                                                 + *((_DWORD *)v63 + 37)
                                                                 - 1]
                                  / (double)*(double *)v70
                                  * (double)v52;
LABEL_120:
            if (*((void *)v41 + 48) == -1 && (v42 & 0x20) != 0)
            {
              uint64_t v55 = *((unsigned __int16 *)v41 + 186);
              *((_DWORD *)v41 + 98) = v55;
              uint64_t v56 = *((unsigned __int16 *)v41 + 187);
              *((_DWORD *)v41 + 99) = v56;
              if (v53)
              {
                *((void *)v41 + 48) = *((void *)v41 + 27) * *((unsigned int *)v41 + 11) - (v56 + v55);
                goto LABEL_126;
              }
LABEL_128:
              uint64_t v75 = v27;
              uint64_t FPosForNextMatchingSyncWordDS = GetFPosForNextMatchingSyncWordDS(*((DataSource **)v41 + 13), (unsigned __int16 *)v65, *((double *)v41 + 3), *((_DWORD *)v41 + 13), *((_DWORD *)v41 + 36), *((_DWORD *)v41 + 37), v27, v74, &v75);
              *((void *)v63 + 9) = v75;
              goto LABEL_129;
            }
            if (!v53) {
              goto LABEL_128;
            }
LABEL_126:
            double v57 = *((double *)v41 + 24);
            if (v57 > 0.0)
            {
              LODWORD(v54) = *((_DWORD *)v41 + 56);
              *((_DWORD *)v41 + 57) = ((double)*(unint64_t *)&v54 * 8.0 / v57);
            }
            goto LABEL_128;
          }
          if ((v42 & 0x10) == 0)
          {
            if (*((void *)v63 + 48) == -1 && (v42 & 0x20) != 0)
            {
              *((_DWORD *)v63 + 98) = *((unsigned __int16 *)v63 + 186);
              *((_DWORD *)v63 + 99) = *((unsigned __int16 *)v63 + 187);
            }
            goto LABEL_128;
          }
          uint64_t v77 = v27;
          uint64_t FPosForNextMatchingSyncWordDS = GetFPosForNextMatchingSyncWordDS(*((DataSource **)v63 + 13), (unsigned __int16 *)v65, *((double *)v63 + 3), *((_DWORD *)v63 + 13), *((_DWORD *)v63 + 36), *((_DWORD *)v63 + 37), v18 + v26, v74, &v77);
          if (!FPosForNextMatchingSyncWordDS)
          {
            uint64_t FPosForNextMatchingSyncWordDS = (*(uint64_t (**)(void, void, uint64_t, uint64_t, unsigned int *, unsigned int *))(**((void **)v63 + 13) + 48))(*((void *)v63 + 13), 0, v77, 4, &v76[1], v76);
            if (!FPosForNextMatchingSyncWordDS)
            {
              buf[0] = 0;
              memset(&buf[8], 0, 64);
              if (ParseMPEGSyncWord(bswap32(v76[1]), (uint64_t)&buf[8]))
              {
                int v42 = *((_DWORD *)v63 + 60);
                if ((v42 & 2) != 0)
                {
                  LODWORD(v58) = *((_DWORD *)v63 + 56);
                  LODWORD(v54) = *(_DWORD *)&buf[24];
                  unint64_t v59 = 0.125;
                  double v60 = (double)v58 / ((double)*(unint64_t *)&v54 * 0.125);
                  *((double *)v63 + 24) = v60;
                  LODWORD(v59) = DWORD1(v71);
                  double v54 = *(double *)v70 / (double)v59;
                  *((void *)v63 + 27) = vcvtpd_u64_f64(v60 * v54);
                  int v53 = 1;
                }
                else
                {
                  int v53 = 0;
                }
                uint64_t v41 = v63;
                goto LABEL_120;
              }
              uint64_t FPosForNextMatchingSyncWordDS = 1685348671;
            }
          }
          if (!v40)
          {
LABEL_131:
            if (!FPosForNextMatchingSyncWordDS) {
              return FPosForNextMatchingSyncWordDS;
            }
            goto LABEL_48;
          }
        }
        else
        {
          uint64_t v77 = v40;
          v78[0] = v40;
          v78[1] = v40 + v26;
          uint64_t v79 = 0;
          if ((v40 & 3) != 0)
          {
            int v45 = 0;
            uint64_t v46 = v40 + 1;
            uint64_t v47 = (unsigned __int8 *)v40;
            do
            {
              if ((unint64_t)v47 >= v40 + v26) {
                int v48 = 255;
              }
              else {
                int v48 = *v47;
              }
              int v45 = v48 | (v45 << 8);
              ++v47;
              BOOL v36 = (v46++ & 3) == 0;
            }
            while (!v36);
            uint64_t v77 = v40 + ((v40 ^ 3) & 3) + 1;
            LODWORD(v79) = v45 << ((8 * ((v40 ^ 3) & 3)) ^ 0x18);
            HIDWORD(v79) = 8 * ((v40 ^ 3) & 3) + 8;
          }
          buf[0] = 0;
          memset(&buf[24], 0, 24);
          *(_OWORD *)&buf[2] = 0uLL;
          int v49 = VBRIHeader::Deserialize((uint64_t)buf, (uint64_t)&v77, 0);
          if (!v49)
          {
            int v50 = *(unsigned __int16 *)&buf[2];
            uint64_t v51 = *(unsigned int *)&buf[8];
            *((_DWORD *)v63 + 5std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = *(_DWORD *)&buf[4];
            *((_DWORD *)v63 + 57) = v50;
            *((void *)v63 + 27) = v51;
          }
          if (*(void *)&buf[24]) {
            operator delete(*(void **)&buf[24]);
          }
          if (!v49)
          {
            *((_DWORD *)v63 + 56) -= v26;
            double v54 = *((double *)v63 + 3);
            *((double *)v63 + 24) = (double)(*((void *)v63 + 27) * (unint64_t)*((unsigned int *)v63 + 11))
                                  / v54;
            goto LABEL_126;
          }
          uint64_t FPosForNextMatchingSyncWordDS = 0;
          if (!v40) {
            goto LABEL_131;
          }
        }
LABEL_130:
        free((void *)v40);
        goto LABEL_131;
      }
      if (GetFPosForNextSyncWordDS(v7, (unsigned __int16 *)v65, v62, v64, &v77, &v81, &v76[1], v76, 0, 0))goto LABEL_66; {
      int v8 = 3;
      }
      uint64_t v6 = v77;
      int64_t v62 = v77;
    }
    if (++v61 > 9) {
      break;
    }
    ++v62;
    int v8 = 2;
  }
LABEL_66:
  uint64_t FPosForNextMatchingSyncWordDS = 1685348671;
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioFormatInfo buf = 136315394;
    *(void *)&uint8_t buf[4] = "MP3AudioFile.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1526;
    uint64_t v20 = MEMORY[0x1E4F14500];
    unsigned int v21 = "%25s:%-5d  Problem scanning for packets";
LABEL_50:
    _os_log_impl(&dword_18FEC0000, v20, OS_LOG_TYPE_ERROR, v21, buf, 0x12u);
  }
LABEL_51:
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioFormatInfo buf = 136315394;
    *(void *)&uint8_t buf[4] = "MP3AudioFile.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1065;
    _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  MPEGAudioFile::OpenFromDataSource failed", buf, 0x12u);
  }
  return FPosForNextMatchingSyncWordDS;
}

void sub_190125B20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (v32) {
    free(v32);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MPEGAudioFile::Create(MPEGAudioFile *this, const __CFURL *a2, const AudioStreamBasicDescription *a3)
{
  AudioFormatID mFormatID = a3->mFormatID;
  int v4 = *((_DWORD *)this + 21);
  BOOL v5 = mFormatID != 778924083 || v4 == 1297106739;
  if (v5
    && (mFormatID == 778924082 ? (BOOL v6 = v4 == 1297106738) : (BOOL v6 = 1), v6 && (mFormatID != 778924081 || v4 == 1297106737)))
  {
    return AudioFileObject::Create(this, a2, a3);
  }
  else
  {
    return 1718449215;
  }
}

void MPEGAudioFile::~MPEGAudioFile(MPEGAudioFile *this)
{
  MPEGAudioFile::~MPEGAudioFile(this);
  JUMPOUT(0x192FC8940);
}

{
  CACFDictionary *v2;
  uint64_t v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_1EDF8E520;
  if (*((void *)this + 20)) {
    ID3ParserClose();
  }
  uint64_t v2 = (CACFDictionary *)*((void *)this + 52);
  if (v2)
  {
    CACFDictionary::~CACFDictionary(v2);
    MEMORY[0x192FC8940]();
  }
  uint64_t v3 = *((void *)this + 21);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*((void *)this + 20)) {
    ID3ParserClose();
  }
  int v4 = (void *)*((void *)this + 53);
  if (v4) {
    free(v4);
  }
  AudioFileObject::~AudioFileObject(this);
}

void MPEGAudioFormat::NewStream(MPEGAudioFormat *this)
{
}

void MPEGAudioFormat::New(MPEGAudioFormat *this)
{
}

uint64_t MPEGAudioFormat::GetHFSCodes(MPEGAudioFormat *this, unsigned int *a2, void *a3)
{
  v15[1] = *MEMORY[0x1E4F143B8];
  int v3 = *((_DWORD *)this + 2);
  if ((v3 - 1297106737) >= 2 && v3 == 1297106739)
  {
    MEMORY[0x1F4188790](this);
    BOOL v6 = v14;
    qmemcpy(v14, " 3pM3GPM!3pm!3PM3gpm 3PM", 24);
    unsigned int v7 = 6;
    goto LABEL_9;
  }
  MEMORY[0x1F4188790](this);
  BOOL v6 = (char *)v15 - v9;
  if (v8 == 1297106738)
  {
    uint64_t v10 = 0x4D5047324D703220;
  }
  else
  {
    if (v8 != 1297106737) {
      goto LABEL_9;
    }
    uint64_t v10 = 0x4D5047314D703120;
  }
  *(void *)BOOL v6 = v10;
LABEL_9:
  unsigned int v11 = *v4 >> 2;
  if (v11 >= v7) {
    unsigned int v11 = v7;
  }
  size_t v12 = 4 * v11;
  _DWORD *v4 = v12;
  if (v5) {
    memcpy(v5, v6, v12);
  }
  return 0;
}

uint64_t MPEGAudioFormat::GetAvailableStreamDescriptions(MPEGAudioFormat *this, int a2, unsigned int *a3, void *__dst)
{
  int v4 = *((_DWORD *)this + 2);
  if (v4 == 1297106738) {
    int v5 = 778924082;
  }
  else {
    int v5 = 778924083;
  }
  if (v4 == 1297106737) {
    int v6 = 778924081;
  }
  else {
    int v6 = v5;
  }
  if (v6 == a2)
  {
    uint64_t v10 = 0;
    memset(v9, 0, sizeof(v9));
    DWORD2(v9[0]) = 778924083;
    if (*a3 >= 0x28) {
      size_t v7 = 40;
    }
    else {
      size_t v7 = 0;
    }
    *a3 = v7;
    if (__dst) {
      memcpy(__dst, v9, v7);
    }
    return 0;
  }
  else
  {
    *a3 = 0;
    return 1718449215;
  }
}

uint64_t MPEGAudioFormat::GetAvailableFormatIDs(MPEGAudioFormat *this, unsigned int *a2, void *__dst)
{
  int v3 = *((_DWORD *)this + 2);
  if (v3 == 1297106738) {
    int v4 = 778924082;
  }
  else {
    int v4 = 778924083;
  }
  if (v3 == 1297106737) {
    int v5 = 778924081;
  }
  else {
    int v5 = v4;
  }
  int __src = v5;
  if (*a2 >= 4) {
    size_t v6 = 4;
  }
  else {
    size_t v6 = *a2 & 0xFFFFFFFC;
  }
  *a2 = v6;
  if (__dst) {
    memcpy(__dst, &__src, v6);
  }
  return 0;
}

void MPEGAudioFormat::GetFileTypeName(MPEGAudioFormat *this, const __CFString **a2)
{
  CABundleLocker::CABundleLocker((CABundleLocker *)&v7);
  int v4 = (__CFBundle *)sAudioToolboxBundle;
  if (sAudioToolboxBundle != -1)
  {
    if (sAudioToolboxBundle) {
      goto LABEL_3;
    }
LABEL_6:
    CFStringRef v6 = (const __CFString *)CFRetain(@"MPEG");
    goto LABEL_7;
  }
  pthread_once(&sOnce, InitGetAudioToolboxBundle);
  int v4 = (__CFBundle *)sAudioToolboxBundle;
  if (!sAudioToolboxBundle) {
    goto LABEL_6;
  }
LABEL_3:
  unsigned int v5 = *((_DWORD *)this + 2) - 1297106737;
  if (v5 < 3)
  {
    CFStringRef v6 = CFBundleCopyLocalizedString(v4, *(&off_1E5688678 + v5), *(&off_1E5688678 + v5), @"FileTypeNames");
LABEL_7:
    *a2 = v6;
  }
  CABundleLocker::~CABundleLocker((CABundleLocker *)&v7);
}

void sub_19012625C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

CFArrayRef MPEGAudioFormat::GetMIMETypes(CFArrayRef this, const __CFArray **a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  int v3 = *((_DWORD *)this + 2);
  if ((v3 - 1297106737) >= 2)
  {
    if (v3 != 1297106739) {
      return this;
    }
    char v7 = @"audio/mp3";
    int v8 = @"audio/x-mp3";
    uint64_t v9 = @"audio/x-mpeg3";
    uint64_t v10 = @"audio/x-mpeg";
    unsigned int v11 = @"audio/mpeg";
    size_t v12 = @"audio/mpeg3";
    int v13 = @"audio/mpg";
    double v14 = @"audio/x-mpg";
    int v15 = @"audio/mpa";
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    unsigned int v5 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    CFIndex v6 = 9;
  }
  else
  {
    char v7 = @"audio/mpeg";
    int v8 = @"audio/x-mpeg";
    uint64_t v9 = @"audio/mpg";
    uint64_t v10 = @"audio/x-mpg";
    unsigned int v11 = @"audio/mpa";
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    unsigned int v5 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    CFIndex v6 = 5;
  }
  this = CFArrayCreate(v4, (const void **)&v7, v6, v5);
  *a2 = this;
  return this;
}

const __CFArray *MPEGAudioFormat::GetUTIs(MPEGAudioFormat *this, const __CFArray **a2)
{
  v6[1] = *(const void **)MEMORY[0x1E4F143B8];
  v6[0] = 0;
  int v3 = *((_DWORD *)this + 2);
  switch(v3)
  {
    case 1297106739:
      CFAllocatorRef v4 = @"public.mp3";
      goto LABEL_7;
    case 1297106738:
      CFAllocatorRef v4 = @"public.mp2";
      goto LABEL_7;
    case 1297106737:
      CFAllocatorRef v4 = @"public.mp1";
LABEL_7:
      v6[0] = v4;
      break;
  }
  CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v6, 1, MEMORY[0x1E4F1D510]);
  *a2 = result;
  return result;
}

const __CFArray *MPEGAudioFormat::GetExtensions(MPEGAudioFormat *this, const __CFArray **a2)
{
  v6[5] = *(const void **)MEMORY[0x1E4F143B8];
  v6[0] = 0;
  int v3 = *((_DWORD *)this + 2);
  switch(v3)
  {
    case 1297106739:
      CFAllocatorRef v4 = @"mp3";
      goto LABEL_7;
    case 1297106738:
      CFAllocatorRef v4 = @"mp2";
      goto LABEL_7;
    case 1297106737:
      CFAllocatorRef v4 = @"mp1";
LABEL_7:
      v6[0] = v4;
      break;
  }
  v6[1] = @"mpeg";
  v6[2] = @"mpa";
  v6[3] = @"m1a";
  v6[4] = @"m2a";
  CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v6, 5, MEMORY[0x1E4F1D510]);
  *a2 = result;
  return result;
}

uint64_t MPEGAudioFormat::FileDataIsThisFormat(MPEGAudioFormat *this, unsigned int a2, unsigned int *a3)
{
  MPEGPacketParser::MPEGPacketParser((MPEGPacketParser *)v9, a3, a2);
  if (v9[0]
    && ((v4 = *((_DWORD *)this + 2), v4 == 1297106738) ? (int v5 = 778924082) : (int v5 = 778924083),
        v4 != 1297106737 ? (int v6 = v5) : (int v6 = 778924081),
        v10 - 1 <= 2 ? (BOOL v7 = (v10 - 1) + 778924081 == v6) : (BOOL v7 = 0),
        v7))
  {
    return 1;
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

BOOL MPEGAudioFormat::ExtensionIsThisFormat(MPEGAudioFormat *this, CFStringRef theString1)
{
  int v3 = *((_DWORD *)this + 2);
  if (v3 == 1297106738) {
    int v4 = @"mp2";
  }
  else {
    int v4 = @"mp3";
  }
  if (v3 == 1297106737) {
    CFStringRef v5 = @"mp1";
  }
  else {
    CFStringRef v5 = v4;
  }
  uint64_t v6 = 1;
  if (CFStringCompare(theString1, v5, 1uLL))
  {
    uint64_t v6 = 1;
    if (CFStringCompare(theString1, @"mpeg", 1uLL))
    {
      uint64_t v6 = 1;
      if (CFStringCompare(theString1, @"mpa", 1uLL))
      {
        uint64_t v6 = 1;
        if (CFStringCompare(theString1, @"m1a", 1uLL)) {
          return CFStringCompare(theString1, @"m2a", 1uLL) == kCFCompareEqualTo;
        }
      }
    }
  }
  return v6;
}

void MPEGAudioFormat::~MPEGAudioFormat(MPEGAudioFormat *this)
{
}

UIImage *__cdecl AudioComponentGetIcon(AudioComponent comp, float desiredPointSize)
{
  float v7 = desiredPointSize;
  id v8 = 0;
  GlobalComponentPluginMgr((uint64_t *)&v5);
  (*(void (**)(uint64_t, AudioComponent, float *))(*(void *)v6 + 48))(v6, comp, &v7);
  if (v5) {
    std::recursive_mutex::unlock(v5);
  }
  int v3 = (UIImage *)v8;

  return v3;
}

void sub_1901267AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::recursive_mutex *a9, uint64_t a10, uint64_t a11, void *a12)
{
  if (a9) {
    std::recursive_mutex::unlock(a9);
  }

  _Unwind_Resume(a1);
}

UIImage *__cdecl AudioComponentCopyIcon(AudioComponent comp)
{
  int v6 = 0;
  id v7 = 0;
  GlobalComponentPluginMgr((uint64_t *)&v4);
  (*(void (**)(uint64_t, AudioComponent, int *))(*(void *)v5 + 48))(v5, comp, &v6);
  if (v4) {
    std::recursive_mutex::unlock(v4);
  }
  uint64_t v2 = (UIImage *)v7;

  return v2;
}

void sub_190126864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::recursive_mutex *a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t AudioAnalyzerNew(CFArrayRef theArray, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    if (!theArray) {
      return 4294963435;
    }
    if (a4)
    {
      CFIndex v5 = 0;
      do
      {
        if (v5 >= CFArrayGetCount(theArray)) {
          operator new();
        }
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, v5++);
      }
      while (KeyIsValid(ValueAtIndex));
      return 4294963435;
    }
  }
  return 4294967246;
}

void sub_190126950(_Unwind_Exception *a1)
{
  MEMORY[0x192FC8940](v1, 0x10F1C4082C3477ALL);
  _Unwind_Resume(a1);
}

uint64_t AudioAnalyzerNewWithBlock(CFArrayRef theArray, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    if (!theArray) {
      return 4294963435;
    }
    if (a3)
    {
      CFIndex v4 = 0;
      do
      {
        if (v4 >= CFArrayGetCount(theArray)) {
          operator new();
        }
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, v4++);
      }
      while (KeyIsValid(ValueAtIndex));
      return 4294963435;
    }
  }
  return 4294967246;
}

void sub_190126A28(_Unwind_Exception *a1)
{
  MEMORY[0x192FC8940](v1, 0x10F1C4082C3477ALL);
  _Unwind_Resume(a1);
}

uint64_t AudioAnalyzerDispose()
{
  uint64_t v0 = BaseOpaqueObject::ResolveOpaqueRef();
  if (!v0) {
    return 4294967246;
  }
  (*(void (**)(uint64_t))(*(void *)v0 + 8))(v0);
  return 0;
}

uint64_t AudioAnalyzerPrepare(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!a2) {
    return 4294967246;
  }
  if (a6 < 0) {
    return 4294967246;
  }
  uint64_t v6 = BaseOpaqueObject::ResolveOpaqueRef();
  if (!v6) {
    return 4294967246;
  }
  id v7 = *(uint64_t (**)(void))(*(void *)v6 + 32);
  return v7();
}

uint64_t AudioAnalyzerPrepareWithFileStream()
{
  uint64_t v0 = BaseOpaqueObject::ResolveOpaqueRef();
  if (!v0) {
    return 4294967246;
  }
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)v0 + 40);
  return v1();
}

uint64_t AudioAnalyzerPrepareWithFile()
{
  uint64_t v0 = BaseOpaqueObject::ResolveOpaqueRef();
  if (!v0) {
    return 4294967246;
  }
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)v0 + 48);
  return v1();
}

uint64_t AudioAnalyzerPushAudio(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 4294967246;
  }
  int v3 = (unsigned char *)BaseOpaqueObject::ResolveOpaqueRef();
  if (!v3) {
    return 4294967246;
  }
  if (v3[12])
  {
    CFIndex v4 = *(uint64_t (**)(void))(*(void *)v3 + 64);
    return v4();
  }
  else
  {
    uint64_t v6 = *(uint64_t (**)(void))(*(void *)v3 + 56);
    return v6();
  }
}

uint64_t AudioAnalyzerCompleteAnalysis()
{
  uint64_t v0 = BaseOpaqueObject::ResolveOpaqueRef();
  if (!v0) {
    return 4294967246;
  }
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)v0 + 72);
  return v1();
}

uint64_t AudioAnalyzerCompleteAnalysisWithBlock()
{
  uint64_t v0 = BaseOpaqueObject::ResolveOpaqueRef();
  if (!v0) {
    return 4294967246;
  }
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)v0 + 72);
  return v1();
}

void auoop::WorkgroupPropagator::propagate(uint64_t a1, uint64_t *a2)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  applesauce::xpc::array::create((applesauce::xpc::array *)&xarray);
  applesauce::xpc::array::create((applesauce::xpc::array *)&v74);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  CFIndex v5 = *(uint64_t **)(a1 + 48);
  if (v4 > (uint64_t)(*(void *)(a1 + 64) - (void)v5) >> 3)
  {
    if (v4 >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = *(void *)(a1 + 56);
    id v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v4);
    id v8 = (uint64_t *)&v7[(v6 - (void)v5) & 0xFFFFFFFFFFFFFFF8];
    unsigned __int8 v10 = &v7[8 * v9];
    unsigned int v11 = *(char **)(a1 + 48);
    size_t v12 = *(char **)(a1 + 56);
    CFIndex v5 = v8;
    if (v12 != v11)
    {
      CFIndex v5 = v8;
      do
      {
        uint64_t v13 = *((void *)v12 - 1);
        v12 -= 8;
        *--CFIndex v5 = v13;
      }
      while (v12 != v11);
    }
    *(void *)(a1 + 48) = v5;
    *(void *)(a1 + 5std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v8;
    *(void *)(a1 + 64) = v10;
    if (v11)
    {
      operator delete(v11);
      CFIndex v5 = *(uint64_t **)(a1 + 48);
    }
  }
  uint64_t v15 = *a2;
  uint64_t v14 = a2[1];
  uint64_t v16 = (ipc_space_t *)MEMORY[0x1E4F14960];
LABEL_9:
  int v17 = v74;
  uint64_t v18 = *(uint64_t **)(a1 + 56);
  while (v5 != v18)
  {
    uint64_t v19 = *v5;
    if (v15 != v14)
    {
      uint64_t v20 = *(void *)(v15 + 8);
      if (v20 < v19)
      {
LABEL_20:
        id WeakRetained = (OS_os_workgroup *)objc_loadWeakRetained((id *)(v15 + 16));
        size_t v26 = WeakRetained;
        if (WeakRetained)
        {
          mach_port_out[0] = 0;
          int v27 = os_workgroup_copy_port(WeakRetained, mach_port_out);
          if (!v27) {
            goto LABEL_30;
          }
          if (kAUExtensionScope)
          {
            unint64_t v28 = *(id *)kAUExtensionScope;
            if (!v28) {
              goto LABEL_30;
            }
          }
          else
          {
            unint64_t v28 = MEMORY[0x1E4F14500];
            id v29 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioFormatInfo buf = 136315650;
            *(void *)&uint8_t buf[4] = "AUOOPWorkgroups.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 317;
            __int16 v77 = 1024;
            int v78 = v27;
            _os_log_impl(&dword_18FEC0000, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d Copying workgroup port failed (%d)", buf, 0x18u);
          }

LABEL_30:
          *(void *)AudioFormatInfo buf = *(void *)(v15 + 8);
          xpc_object_t v30 = xpc_uint64_create(*(uint64_t *)buf);
          xpc_object_t v31 = v30;
          if (!v30) {
            xpc_object_t v31 = xpc_null_create();
          }

          xpc_object_t v32 = xarray;
          xpc_array_append_value(xarray, v31);

          id v33 = (id)xpc_mach_send_create();
          xpc_object_t v34 = v33;
          if (!v33) {
            xpc_object_t v34 = xpc_null_create();
          }

          xpc_array_append_value(v32, v34);
          mach_port_deallocate(*v16, mach_port_out[0]);
          BOOL v35 = *(uint64_t **)(a1 + 56);
          unint64_t v36 = *(void *)(a1 + 64);
          if ((unint64_t)v35 >= v36)
          {
            uint64_t v40 = *(uint64_t **)(a1 + 48);
            unint64_t v41 = v35 - v40 + 1;
            if (v41 >> 61) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v42 = v36 - (void)v40;
            if (v42 >> 2 > v41) {
              unint64_t v41 = v42 >> 2;
            }
            if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v43 = v41;
            }
            if (v43)
            {
              int v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v43);
            }
            else
            {
              int v45 = 0;
              uint64_t v44 = 0;
            }
            uint64_t v47 = (char *)v5 - (char *)v40;
            uint64_t v48 = v5 - v40;
            int v49 = (uint64_t *)&v45[8 * v48];
            int v50 = &v45[8 * v44];
            if (v48 == v44)
            {
              if (v47 < 1)
              {
                if (v40 == v5) {
                  unint64_t v52 = 1;
                }
                else {
                  unint64_t v52 = v47 >> 2;
                }
                int v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v52);
                int v49 = (uint64_t *)&v53[8 * (v52 >> 2)];
                int v50 = &v53[8 * v54];
                if (v45) {
                  operator delete(v45);
                }
              }
              else
              {
                if (v48 >= -1) {
                  unint64_t v51 = v48 + 1;
                }
                else {
                  unint64_t v51 = v48 + 2;
                }
                v49 -= v51 >> 1;
              }
            }
            *int v49 = *(void *)buf;
            uint64_t v55 = *(uint64_t **)(a1 + 48);
            uint64_t v56 = v49;
            if (v55 != v5)
            {
              double v57 = v5;
              uint64_t v56 = v49;
              do
              {
                uint64_t v58 = *--v57;
                *--uint64_t v56 = v58;
              }
              while (v57 != v55);
            }
            unint64_t v59 = *(uint64_t **)(a1 + 56);
            int64_t v60 = (char *)v59 - (char *)v5;
            if (v59 != v5) {
              memmove(v49 + 1, v5, (char *)v59 - (char *)v5);
            }
            int v61 = *(void **)(a1 + 48);
            *(void *)(a1 + 48) = v56;
            *(void *)(a1 + 5std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = (char *)v49 + v60 + 8;
            *(void *)(a1 + 64) = v50;
            if (v61) {
              operator delete(v61);
            }
            CFIndex v5 = v49;
            uint64_t v16 = (ipc_space_t *)MEMORY[0x1E4F14960];
          }
          else if (v5 == v35)
          {
            *CFIndex v5 = *(void *)buf;
            *(void *)(a1 + 5std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v5 + 1;
          }
          else
          {
            uint64_t v37 = v35 - 1;
            CFStringRef v38 = *(void **)(a1 + 56);
            while (v37 < v35)
            {
              uint64_t v39 = *v37++;
              *v38++ = v39;
            }
            *(void *)(a1 + 5std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v38;
            if (v35 != v5 + 1) {
              memmove(&v35[-(v35 - (v5 + 1))], v5, (char *)v35 - (char *)(v5 + 1));
            }
            uint64_t v46 = buf;
            if (v5 <= (uint64_t *)buf) {
              uint64_t v46 = &buf[8 * (*(void *)(a1 + 56) > (unint64_t)buf)];
            }
            *CFIndex v5 = *(void *)v46;
          }
          ++v5;
        }

        goto LABEL_75;
      }
      if (v19 >= v20)
      {
        ++v5;
LABEL_75:
        v15 += 24;
        goto LABEL_9;
      }
    }
    xpc_object_t v21 = xpc_uint64_create(v19);
    xpc_object_t v22 = v21;
    if (!v21) {
      xpc_object_t v22 = xpc_null_create();
    }

    xpc_array_append_value(v17, v22);
    uint64_t v23 = *(uint64_t **)(a1 + 56);
    int64_t v24 = (char *)v23 - (char *)(v5 + 1);
    if (v23 != v5 + 1) {
      memmove(v5, v5 + 1, (char *)v23 - (char *)(v5 + 1));
    }
    uint64_t v18 = (uint64_t *)((char *)v5 + v24);
    *(void *)(a1 + 5std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = (char *)v5 + v24;
  }
  if (v15 != v14) {
    goto LABEL_20;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  xpc_object_t v62 = xarray;
  Class Class = object_getClass(xarray);
  int64_t v64 = (objc_class *)MEMORY[0x1E4F14568];
  if (Class == (Class)MEMORY[0x1E4F14568] && xpc_array_get_count(v62)
    || object_getClass(v17) == v64 && xpc_array_get_count(v17))
  {
    applesauce::xpc::dict::create((applesauce::xpc::dict *)mach_port_out);
    applesauce::xpc::object::object(&v71, v62);
    *(void *)AudioFormatInfo buf = mach_port_out;
    *(void *)&buf[8] = "add";
    applesauce::xpc::dict::object_proxy::operator=(&v72, (uint64_t)buf, &v71);

    uint64_t v65 = v71;
    long long v71 = 0;

    applesauce::xpc::object::object(&v69, v17);
    *(void *)AudioFormatInfo buf = mach_port_out;
    *(void *)&buf[8] = "remove";
    applesauce::xpc::dict::object_proxy::operator=(&v70, (uint64_t)buf, &v69);

    unsigned int v66 = v69;
    id v69 = 0;

    uint64_t v67 = *(void *)(a1 + 32);
    if (!v67) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, mach_port_t *))(*(void *)v67 + 48))(v67, mach_port_out);
    id v68 = *(id *)mach_port_out;
    *(void *)mach_port_out = 0;
  }
}

void sub_190127494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_unfair_lock_t lock, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  _Unwind_Resume(a1);
}

void applesauce::xpc::array::create(applesauce::xpc::array *this)
{
  xpc_object_t v2 = xpc_array_create(0, 0);
  id v5 = v2;
  if (!v2) {
    xpc_object_t v2 = xpc_null_create();
  }

  id v3 = v2;
  unint64_t v4 = v3;
  *(void *)this = v3;
  if (!v3 || object_getClass(v3) != (Class)MEMORY[0x1E4F14568])
  {
    *(void *)this = xpc_null_create();
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<auoop::TrackedWorkgroup *,auoop::TrackedWorkgroup *,auoop::TrackedWorkgroup *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      *(_OWORD *)a3 = *(_OWORD *)v5;
      id WeakRetained = objc_loadWeakRetained((id *)(v5 + 16));
      objc_storeWeak((id *)(a3 + 16), WeakRetained);

      a3 += 24;
      v5 += 24;
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t std::__split_buffer<auoop::TrackedWorkgroup>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = i - 24;
    objc_destroyWeak((id *)(i - 8));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

__n128 std::__function::__func<auoop::WorkgroupManager_iOS::addRemoteIOWorkgroup(unsigned int,caulk::mach::os_workgroup_managed)::$_0,std::allocator<auoop::WorkgroupManager_iOS::addRemoteIOWorkgroup(unsigned int,caulk::mach::os_workgroup_managed)::$_0>,BOOL ()(auoop::WorkgroupManager_Base::State &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EDFA0E28;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<auoop::WorkgroupManager_iOS::addRemoteIOWorkgroup(unsigned int,caulk::mach::os_workgroup_managed)::$_0,std::allocator<auoop::WorkgroupManager_iOS::addRemoteIOWorkgroup(unsigned int,caulk::mach::os_workgroup_managed)::$_0>,BOOL ()(auoop::WorkgroupManager_Base::State &)>::__clone(uint64_t a1)
{
  xpc_object_t v2 = (char *)operator new(0x18uLL);
  *(void *)xpc_object_t v2 = &unk_1EDFA0E28;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<auoop::WorkgroupManager_iOS::addRemoteIOWorkgroup(unsigned int,caulk::mach::os_workgroup_managed)::$_0,std::allocator<auoop::WorkgroupManager_iOS::addRemoteIOWorkgroup(unsigned int,caulk::mach::os_workgroup_managed)::$_0>,BOOL ()(auoop::WorkgroupManager_Base::State &)>::~__func()
{
}

uint64_t AUOOPWorkgroupManager_RemoveRemoteIOWorkgroup(auoop *a1)
{
  int v1 = (int)a1;
  v7[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = auoop::gWorkgroupManager(a1);
  int v6 = v1;
  v7[0] = &unk_1EDFA0E70;
  v7[1] = &v6;
  void v7[3] = v7;
  auoop::WorkgroupManager_Base::mutateWorkgroups(v2, (uint64_t)v7);
  std::__function::__value_func<BOOL ()(auoop::WorkgroupManager_Base::State &)>::~__value_func[abi:ne180100](v7);
  uint64_t v3 = (mach_port_name_t *)auoop::tlsWorkgroupPort();
  mach_port_name_t v4 = *v3;
  *uint64_t v3 = 0;
  return mach_port_deallocate(*MEMORY[0x1E4F14960], v4);
}

void sub_1901278F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t std::__function::__func<auoop::WorkgroupManager_iOS::removeRemoteIOWorkgroup(unsigned int)::$_0,std::allocator<auoop::WorkgroupManager_iOS::removeRemoteIOWorkgroup(unsigned int)::$_0>,BOOL ()(auoop::WorkgroupManager_Base::State &)>::operator()(uint64_t a1, uint64_t a2)
{
  mach_port_name_t v4 = *(_DWORD **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v4 != (_DWORD *)v3)
  {
    while (*v4 != **(_DWORD **)(a1 + 8))
    {
      v4 += 6;
      if (v4 == (_DWORD *)v3) {
        return 1;
      }
    }
  }
  if (v4 != (_DWORD *)v3)
  {
    uint64_t v5 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<auoop::TrackedWorkgroup *,auoop::TrackedWorkgroup *,auoop::TrackedWorkgroup *>((uint64_t)(v4 + 6), v3, (uint64_t)v4);
    uint64_t v6 = *(void *)(a2 + 8);
    if (v6 != v5)
    {
      do
      {
        uint64_t v7 = v6 - 24;
        objc_destroyWeak((id *)(v6 - 8));
        uint64_t v6 = v7;
      }
      while (v7 != v5);
    }
    *(void *)(a2 + 8) = v5;
  }
  return 1;
}

uint64_t std::__function::__func<auoop::WorkgroupManager_iOS::removeRemoteIOWorkgroup(unsigned int)::$_0,std::allocator<auoop::WorkgroupManager_iOS::removeRemoteIOWorkgroup(unsigned int)::$_0>,BOOL ()(auoop::WorkgroupManager_Base::State &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EDFA0E70;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<auoop::WorkgroupManager_iOS::removeRemoteIOWorkgroup(unsigned int)::$_0,std::allocator<auoop::WorkgroupManager_iOS::removeRemoteIOWorkgroup(unsigned int)::$_0>,BOOL ()(auoop::WorkgroupManager_Base::State &)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EDFA0E70;
  result[1] = v3;
  return result;
}

void std::__function::__func<auoop::WorkgroupManager_iOS::removeRemoteIOWorkgroup(unsigned int)::$_0,std::allocator<auoop::WorkgroupManager_iOS::removeRemoteIOWorkgroup(unsigned int)::$_0>,BOOL ()(auoop::WorkgroupManager_Base::State &)>::~__func()
{
}

uint64_t std::__function::__func<auoop::WorkgroupManager_Base::newWorkIntervalCreated(caulk::mach::os_workgroup_managed const&)::$_0,std::allocator<auoop::WorkgroupManager_Base::newWorkIntervalCreated(caulk::mach::os_workgroup_managed const&)::$_0>,BOOL ()(auoop::WorkgroupManager_Base::State &)>::operator()(uint64_t a1, auoop::WorkgroupManager_Base::State *a2)
{
  uint64_t v3 = *(void **)(*(void *)(a1 + 8) + 8);
  applesauce::dispatch::v1::source::operator*(v3);
  objc_claimAutoreleasedReturnValue();
  auoop::WorkgroupManager_Base::State::addWorkgroup(a2, 0, v3);

  return 1;
}

void sub_190127A80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<auoop::WorkgroupManager_Base::newWorkIntervalCreated(caulk::mach::os_workgroup_managed const&)::$_0,std::allocator<auoop::WorkgroupManager_Base::newWorkIntervalCreated(caulk::mach::os_workgroup_managed const&)::$_0>,BOOL ()(auoop::WorkgroupManager_Base::State &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EDFA0EB8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<auoop::WorkgroupManager_Base::newWorkIntervalCreated(caulk::mach::os_workgroup_managed const&)::$_0,std::allocator<auoop::WorkgroupManager_Base::newWorkIntervalCreated(caulk::mach::os_workgroup_managed const&)::$_0>,BOOL ()(auoop::WorkgroupManager_Base::State &)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EDFA0EB8;
  result[1] = v3;
  return result;
}

void std::__function::__func<auoop::WorkgroupManager_Base::newWorkIntervalCreated(caulk::mach::os_workgroup_managed const&)::$_0,std::allocator<auoop::WorkgroupManager_Base::newWorkIntervalCreated(caulk::mach::os_workgroup_managed const&)::$_0>,BOOL ()(auoop::WorkgroupManager_Base::State &)>::~__func()
{
}

void auoop::WorkgroupMirror::update(auoop::WorkgroupMirror *this, const applesauce::xpc::dict *a2)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_lock((os_unfair_lock_t)this);
  *(void *)long long v71 = a2;
  *(void *)&v71[8] = "remove";
  applesauce::xpc::dict::object_proxy::operator applesauce::xpc::array(&v54, (uint64_t)v71);
  *(void *)long long v71 = a2;
  *(void *)&v71[8] = "add";
  applesauce::xpc::dict::object_proxy::operator applesauce::xpc::array(&xarray, (uint64_t)v71);
  xpc_object_t v4 = v54;
  applesauce::xpc::object::object((void **)v71, v54);
  applesauce::xpc::object::object(&v67, *(void **)v71);
  uint64_t v68 = 0;
  uint64_t v5 = *(void **)v71;
  *(void *)long long v71 = 0;

  applesauce::xpc::object::object((void **)v71, v4);
  if (object_getClass(v4) == (Class)MEMORY[0x1E4F14568])
  {
    id v7 = v4;
    count = (caulk::mach::details *)xpc_array_get_count(v7);
  }
  else
  {
    count = 0;
  }
  applesauce::xpc::object::object(&v63, *(void **)v71);
  int64_t v64 = count;
  id v8 = *(void **)v71;
  *(void *)long long v71 = 0;

  uint64_t v9 = (caulk::mach::details *)v68;
  unsigned __int8 v10 = MEMORY[0x1E4F14500];
  while (v9 != v64)
  {
LABEL_8:
    unint64_t v59 = &v67;
    id v60 = v9;
    uint64_t v14 = applesauce::xpc::array::object_proxy::operator*((uint64_t)&v59);
    uint64_t value = xpc_uint64_get_value(v14);

    *(void *)long long v71 = (char *)this + 88;
    v71[8] = 1;
    std::mutex::lock((std::mutex *)((char *)this + 88));
    unint64_t v16 = atomic_load((unint64_t *)this + 6);
    if (v16)
    {
      unint64_t SlotForKey = caulk::concurrent::guarded_lookup_hash_table<unsigned long,caulk::mach::os_workgroup_managed,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long)>>::table_impl::findSlotForKey((uint64_t *)v16, value);
      if (SlotForKey)
      {
        uint64_t v19 = v18;
        atomic_store(0xFFFFFFFFFFFFFFFFLL, (unint64_t *)(v16 + 8 * HIDWORD(SlotForKey) + 16));
        if (v18)
        {
          int v20 = atomic_load((unsigned int *)this + 14);
          if (v20 >= 1)
          {
            do
            {
              std::this_thread::sleep_for[abi:ne180100]<long long,std::ratio<1l,1000000l>>(50);
              int v21 = atomic_load((unsigned int *)this + 14);
            }
            while (v21 > 0);
          }
          if ((unsigned __int16)atomic_load(v19))
          {
            std::unique_lock<std::mutex>::unlock((std::unique_lock<std::mutex> *)v71);
            while ((unsigned __int16)atomic_load(v19))
              std::this_thread::sleep_for[abi:ne180100]<long long,std::ratio<1l,1000000l>>(500);
            std::unique_lock<std::mutex>::lock((std::unique_lock<std::mutex> *)v71);
            unint64_t v16 = atomic_load((unint64_t *)this + 6);
          }
          caulk::concurrent::guarded_lookup_hash_table<unsigned long,caulk::mach::os_workgroup_managed,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long)>>::element_t::release(v19);
          int v24 = *((_DWORD *)this + 10) - 1;
          *((_DWORD *)this + 10) = v24;
          if (v16)
          {
            unsigned int v25 = 16 * v24;
            unsigned int v26 = *(_DWORD *)(v16 + 8);
            if (v25 / v26 <= 2 && v26 >= 9) {
              caulk::concurrent::guarded_lookup_hash_table<unsigned long,caulk::mach::os_workgroup_managed,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long)>>::rehash((unint64_t *)this + 1, v26 >> 1);
            }
          }
        }
      }
    }
    caulk::concurrent::guarded_lookup_hash_table<unsigned long,caulk::mach::os_workgroup_managed,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long)>>::emptyReleasePool((uint64_t)this + 8);
    if (v71[8]) {
      std::mutex::unlock(*(std::mutex **)v71);
    }
    if (kAUExtensionScope)
    {
      unint64_t v28 = *(id *)kAUExtensionScope;
      if (!v28) {
        goto LABEL_34;
      }
    }
    else
    {
      id v29 = v10;
      unint64_t v28 = v10;
    }
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long v71 = 136315650;
      *(void *)&v71[4] = "AUOOPWorkgroups.mm";
      *(_WORD *)&v71[12] = 1024;
      *(_DWORD *)&v71[14] = 354;
      __int16 v72 = 2048;
      uint64_t v73 = value;
      _os_log_impl(&dword_18FEC0000, v28, OS_LOG_TYPE_DEBUG, "%25s:%-5d wg mirror remove %p", v71, 0x1Cu);
    }

LABEL_34:
    uint64_t v9 = (caulk::mach::details *)++v68;
  }
  id v11 = v67;
  id v12 = v63;
  BOOL v13 = v11 == v12;

  if (!v13)
  {
    uint64_t v9 = (caulk::mach::details *)v68;
    goto LABEL_8;
  }
  xpc_object_t v30 = v63;
  __int16 v63 = 0;

  xpc_object_t v31 = v67;
  uint64_t v67 = 0;

  if (object_getClass(xarray) == (Class)MEMORY[0x1E4F14568])
  {
    size_t v32 = xpc_array_get_count(xarray);
    if (v32)
    {
      size_t v50 = v32;
      unint64_t v51 = v32 - 1;
      uint64_t v33 = 1;
      do
      {
        *(void *)long long v71 = &xarray;
        *(void *)&v71[8] = v33 - 1;
        xpc_object_t v34 = applesauce::xpc::array::object_proxy::operator*((uint64_t)v71);
        uint64_t v35 = xpc_uint64_get_value(v34);

        if (v33 - 1 >= v51 || !v35) {
          goto LABEL_57;
        }
        *(void *)long long v71 = &xarray;
        *(void *)&v71[8] = v33;
        unint64_t v36 = applesauce::xpc::array::object_proxy::operator*((uint64_t)v71);
        mach_port_name_t name = xpc_mach_send_copy_right();

        std::string::basic_string[abi:ne180100]<0>(v71, "");
        caulk::mach::os_workgroup_managed::make();
        if (SBYTE3(v73) < 0) {
          operator delete(*(void **)v71);
        }
        uint64_t v55 = MEMORY[0x1E4FB7EA0] + 16;
        uint64_t v56 = (caulk::mach::details *)caulk::mach::details::retain_os_object((caulk::mach::details *)v60, v37);
        long long v57 = v61;
        v58[0] = v62[0];
        *(_OWORD *)((char *)v58 + 9) = *(_OWORD *)((char *)v62 + 9);
        __int16 v63 = (void *)(MEMORY[0x1E4FB7EA0] + 16);
        int64_t v64 = (caulk::mach::details *)caulk::mach::details::retain_os_object(v56, v38);
        long long v65 = v57;
        v66[0] = v58[0];
        *(_OWORD *)((char *)v66 + 9) = *(_OWORD *)((char *)v58 + 9);
        std::mutex::lock((std::mutex *)((char *)this + 88));
        uint64_t v40 = (uint64_t *)atomic_load((unint64_t *)this + 6);
        int v41 = *((_DWORD *)this + 10) + 1;
        *((_DWORD *)this + 10) = v41;
        if (v40)
        {
          unsigned int v42 = 16 * v41;
          unsigned int v43 = *((_DWORD *)v40 + 2);
          if (v42 / v43 < 0xB) {
            goto LABEL_47;
          }
          unsigned int v44 = 2 * v43;
        }
        else
        {
          unsigned int v44 = 8;
        }
        uint64_t v40 = (uint64_t *)caulk::concurrent::guarded_lookup_hash_table<unsigned long,caulk::mach::os_workgroup_managed,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long)>>::rehash((unint64_t *)this + 1, v44);
LABEL_47:
        uint64_t v67 = (void *)(MEMORY[0x1E4FB7EA0] + 16);
        uint64_t v68 = caulk::mach::details::retain_os_object(v64, v39);
        long long v69 = v65;
        v70[0] = v66[0];
        *(_OWORD *)((char *)v70 + 9) = *(_OWORD *)((char *)v66 + 9);
        if ((caulk::concurrent::guarded_lookup_hash_table<unsigned long,caulk::mach::os_workgroup_managed,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long)>>::table_impl::findSlotForKey(v40, v35) & 1) == 0)operator new(); {
        caulk::mach::os_workgroup_managed::~os_workgroup_managed((caulk::mach::os_workgroup_managed *)&v67);
        }
        --*((_DWORD *)this + 10);
        std::mutex::unlock((std::mutex *)((char *)this + 88));
        caulk::mach::os_workgroup_managed::~os_workgroup_managed((caulk::mach::os_workgroup_managed *)&v63);
        caulk::mach::os_workgroup_managed::~os_workgroup_managed((caulk::mach::os_workgroup_managed *)&v55);
        if (!kAUExtensionScope)
        {
          int v45 = MEMORY[0x1E4F14500];
          id v46 = MEMORY[0x1E4F14500];
LABEL_53:
          if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
          {
            id v47 = v60;
            *(_DWORD *)long long v71 = 136315906;
            *(void *)&v71[4] = "AUOOPWorkgroups.mm";
            *(_WORD *)&v71[12] = 1024;
            *(_DWORD *)&v71[14] = 367;
            __int16 v72 = 2048;
            uint64_t v73 = v35;
            __int16 v74 = 2048;
            id v75 = v47;
            _os_log_impl(&dword_18FEC0000, v45, OS_LOG_TYPE_DEBUG, "%25s:%-5d wg mirror add %p -> %p", v71, 0x26u);
          }

          goto LABEL_56;
        }
        int v45 = *(id *)kAUExtensionScope;
        if (v45) {
          goto LABEL_53;
        }
LABEL_56:
        mach_port_deallocate(*MEMORY[0x1E4F14960], name);
        caulk::mach::os_workgroup_managed::~os_workgroup_managed((caulk::mach::os_workgroup_managed *)&v59);
LABEL_57:
        unint64_t v48 = v33 + 1;
        v33 += 2;
      }
      while (v48 < v50);
    }
  }
  id v49 = xarray;
  id xarray = 0;

  os_unfair_lock_unlock((os_unfair_lock_t)this);
}

void sub_1901282BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  os_unfair_lock_unlock(v20);
  _Unwind_Resume(a1);
}

void applesauce::xpc::dict::object_proxy::operator applesauce::xpc::array(xpc_object_t *a1, uint64_t a2)
{
  applesauce::xpc::dict::object_proxy::operator*(a2);
  xpc_object_t v3 = (id)objc_claimAutoreleasedReturnValue();
  id v6 = v3;
  if (!v3) {
    xpc_object_t v3 = xpc_null_create();
  }

  id v4 = v3;
  uint64_t v5 = v4;
  *a1 = v4;
  if (!v4 || object_getClass(v4) != (Class)MEMORY[0x1E4F14568])
  {
    *a1 = xpc_null_create();
  }
}

id applesauce::xpc::array::object_proxy::operator*(uint64_t a1)
{
  uint64_t v2 = **(void ***)a1;
  xpc_object_t v3 = applesauce::dispatch::v1::source::operator*(v2);
  id v4 = xpc_array_get_value(v3, *(void *)(a1 + 8));

  return v4;
}

void sub_190128524(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_DWORD *caulk::concurrent::guarded_lookup_hash_table<unsigned long,caulk::mach::os_workgroup_managed,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long)>>::rehash(unint64_t *a1, unsigned int a2)
{
  id v4 = a1 + 5;
  unint64_t v5 = atomic_load(a1 + 5);
  id v6 = operator new(8 * (a2 - 1) + 24);
  *(void *)id v6 = a1;
  v6[2] = a2;
  *((void *)v6 + 2) = 0;
  bzero(v6 + 4, 8 * a2);
  if (v5)
  {
    uint64_t v7 = *(unsigned int *)(v5 + 8);
    if (v7)
    {
      id v8 = (unint64_t *)(v5 + 16);
      do
      {
        unint64_t v9 = *v8;
        if (*v8 + 1 >= 2)
        {
          unint64_t SlotForKey = caulk::concurrent::guarded_lookup_hash_table<unsigned long,caulk::mach::os_workgroup_managed,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long)>>::table_impl::findSlotForKey((uint64_t *)v6, *(void *)(v9 + 8));
          if ((SlotForKey & 1) == 0)
          {
            atomic_fetch_add((atomic_uint *volatile)v9, 0x10000u);
            atomic_store(v9, (unint64_t *)&v6[2 * HIDWORD(SlotForKey) + 4]);
          }
        }
        ++v8;
        --v7;
      }
      while (v7);
    }
    atomic_store((unint64_t)v6, a1 + 5);
    id v12 = (unint64_t *)a1[8];
    unint64_t v11 = a1[9];
    if ((unint64_t)v12 >= v11)
    {
      uint64_t v14 = (void *)a1[7];
      uint64_t v15 = v12 - v14;
      unint64_t v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 61) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v17 = v11 - (void)v14;
      if (v17 >> 2 > v16) {
        unint64_t v16 = v17 >> 2;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18)
      {
        if (v18 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v19 = (char *)operator new(8 * v18);
      }
      else
      {
        uint64_t v19 = 0;
      }
      int v20 = (unint64_t *)&v19[8 * v15];
      *int v20 = v5;
      BOOL v13 = v20 + 1;
      while (v12 != v14)
      {
        unint64_t v21 = *--v12;
        unint64_t *v12 = 0;
        *--int v20 = v21;
      }
      long long v22 = *(_OWORD *)(a1 + 7);
      a1[7] = (unint64_t)v20;
      a1[8] = (unint64_t)v13;
      a1[9] = (unint64_t)&v19[8 * v18];
      uint64_t v23 = (uint64_t *)*((void *)&v22 + 1);
      int v24 = (uint64_t *)v22;
      while (v23 != v24)
        std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<unsigned long,caulk::mach::os_workgroup_managed,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long)>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<unsigned long,caulk::mach::os_workgroup_managed,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long)>>::table_impl>>::reset[abi:ne180100](--v23);
      if (v24) {
        operator delete(v24);
      }
    }
    else
    {
      unint64_t *v12 = v5;
      BOOL v13 = v12 + 1;
    }
    a1[8] = (unint64_t)v13;
  }
  else
  {
    atomic_store((unint64_t)v6, v4);
  }
  return v6;
}

uint64_t caulk::concurrent::guarded_lookup_hash_table<unsigned long,caulk::mach::os_workgroup_managed,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long)>>::emptyReleasePool(uint64_t result)
{
  int v1 = atomic_load((unsigned int *)(result + 48));
  if (v1 <= 0)
  {
    uint64_t v2 = result;
    id v4 = *(uint64_t **)(result + 56);
    for (uint64_t i = *(uint64_t **)(result + 64);
          i != v4;
          __n128 result = std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<unsigned long,caulk::mach::os_workgroup_managed,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long)>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<unsigned long,caulk::mach::os_workgroup_managed,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long)>>::table_impl>>::reset[abi:ne180100](i))
    {
      --i;
    }
    *(void *)(v2 + 64) = v4;
  }
  return result;
}

uint64_t audioipc::priority_propagator_impl::apply_priority(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 16) != a2)
  {
    uint64_t v3 = this;
    this = caulk::mach::this_thread::set_priority();
    *(_DWORD *)(v3 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = a2;
  }
  return this;
}

audioipc::eventlink_primitive *audioipc::eventlink_primitive::eventlink_primitive(audioipc::eventlink_primitive *this, id a2)
{
  *(void *)this = 0;
  *((_DWORD *)this + 2) = 0;
  applesauce::dispatch::v1::source::operator*(a2);
  objc_claimAutoreleasedReturnValue();
  mach_port_name_t v4 = xpc_dictionary_copy_mach_send();

  uint64_t v5 = os_eventlink_create_with_port();
  id v6 = *(void **)this;
  *(void *)this = v5;

  mach_port_deallocate(*MEMORY[0x1E4F14960], v4);
  return this;
}

void sub_190128840(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void audioipc::eventlink_primitive::~eventlink_primitive(audioipc::eventlink_primitive *this)
{
  mach_port_name_t v2 = *((_DWORD *)this + 2);
  if (v2)
  {
    mach_port_deallocate(*MEMORY[0x1E4F14960], v2);
    *((_DWORD *)this + 2) = 0;
  }
}

uint64_t MP4BoxParser_MediaHeader::Init(MP4BoxParser **this)
{
  uint64_t result = MP4BoxParser_Full::Initialize((MP4BoxParser_Full *)this);
  if (!result)
  {
    if (*((_DWORD *)this + 5) != 1835296868) {
      return 4294967294;
    }
    if (*((unsigned char *)this + 56))
    {
      if (*((unsigned char *)this + 56) != 1) {
        return 0xFFFFFFFFLL;
      }
      uint64_t v3 = 16;
    }
    else
    {
      uint64_t v3 = 8;
    }
    uint64_t v4 = v3 + (*((unsigned int (**)(MP4BoxParser **))*this + 3))(this);
    uint64_t v5 = (unsigned int *)this + 15;
    uint64_t result = MP4BoxParser::ReadDataSourceBytes(this[1], v4, 4uLL, (char *)this + 60);
    if (!result)
    {
      unsigned int v6 = *v5;
      *uint64_t v5 = bswap32(*v5);
      if (v6) {
        return 0;
      }
      else {
        return 1717660012;
      }
    }
  }
  return result;
}

void MP4BoxParser_MediaHeader::~MP4BoxParser_MediaHeader(MP4BoxParser_MediaHeader *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDF8DA18;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  JUMPOUT(0x192FC8940);
}

{
  uint64_t v2;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDF8DA18;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

CASerializer *operator<<(CASerializer *a1, uint64_t a2)
{
  return a1;
}

{
  CASerializer::Write(a1, (const void *)a2);
  CASerializer::Write(a1, (const void *)(a2 + 4));
  CASerializer::Write(a1, (const void *)(a2 + 8));
  CASerializer::Write(a1, (const void *)(a2 + 12));
  CASerializer::Write(a1, (const void *)(a2 + 16));
  return a1;
}

CADeserializer *operator>>(CADeserializer *a1, uint64_t a2)
{
  return a1;
}

uint64_t getBufferPtrFromDeserializer<void const>(CADeserializer *a1, void *a2, int a3)
{
  if (*a2)
  {
    return CADeserializer::GetAndAdvanceReadPtr(a1);
  }
  else
  {
    if (a3) {
      uint64_t result = CADeserializer::GetAndAdvanceReadPtr(a1);
    }
    else {
      uint64_t result = 0;
    }
    *a2 = result;
  }
  return result;
}

CASerializer *operator<<(CASerializer *a1, const void **a2)
{
  CASerializer::Write(a1, a2);
  if (*(_DWORD *)a2)
  {
    unint64_t v4 = 0;
    uint64_t v5 = a2 + 1;
    do
    {
      CASerializer::Write(a1, v5);
      CASerializer::Write(a1, (char *)v5 + 4);
      CASerializer::Write(a1, v5[1]);
      ++v4;
      v5 += 2;
    }
    while (v4 < *(unsigned int *)a2);
  }
  return a1;
}

CADeserializer *operator>>(CADeserializer *a1, _DWORD *a2)
{
  CADeserializer::Read(a1, a2);
  if (*a2)
  {
    unint64_t v4 = 0;
    uint64_t v5 = a2 + 2;
    do
    {
      CADeserializer::Read(a1, v5);
      CADeserializer::Read(a1, (char *)v5 + 4);
      size_t v6 = *((unsigned int *)v5 + 1);
      if (v6)
      {
        uint64_t v7 = (void *)v5[1];
        Ptr = (const void *)CADeserializer::GetAndAdvanceReadPtr(a1);
        if (v7) {
          memcpy(v7, Ptr, v6);
        }
        else {
          v5[1] = Ptr;
        }
      }
      else
      {
        v5[1] = 0;
      }
      ++v4;
      v5 += 2;
    }
    while (v4 < *a2);
  }
  return a1;
}

uint64_t FigCPECryptorMarshaller::Deserialize(FigCPECryptorMarshaller *this, CADeserializer *a2, void **a3, unsigned int *a4)
{
  if (*a4 - 1 < 7) {
    return 0;
  }
  Marshaller::CheckDest(this, a3, a4, 8uLL);
  CFTypeRef cf = 0;
  operator>>();
  id v8 = 0;
  uint64_t result = MediaToolboxLibraryCore();
  if (result)
  {
    uint64_t result = getFigCPECryptorCreateCryptorFromSerializedRecipeSymbolLoc();
    if (result)
    {
      CryptorFromSerializedRecipeSymbolLoc = (unsigned int (*)(void, void, void **))getFigCPECryptorCreateCryptorFromSerializedRecipeSymbolLoc();
      if (CryptorFromSerializedRecipeSymbolLoc)
      {
        if (CryptorFromSerializedRecipeSymbolLoc(*MEMORY[0x1E4F1CF80], 0, &v8)) {
          return 0;
        }
        if (cf)
        {
          if (*((unsigned char *)this + 32)) {
            CFRelease(cf);
          }
        }
        Marshaller::AddCreatedCFObject(this, v8);
        *(void *)*a3 = v8;
        return 1;
      }
      else
      {
        dlerror();
        abort_report_np();
        return MediaToolboxLibraryCore();
      }
    }
  }
  return result;
}

uint64_t MediaToolboxLibraryCore()
{
  if (!MediaToolboxLibraryCore(char **)::frameworkLibrary) {
    MediaToolboxLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  }
  return MediaToolboxLibraryCore(char **)::frameworkLibrary;
}

uint64_t getFigCPECryptorCreateCryptorFromSerializedRecipeSymbolLoc()
{
  uint64_t v3 = 0;
  unint64_t v4 = &v3;
  uint64_t v5 = 0x2000000000;
  uint64_t v0 = getFigCPECryptorCreateCryptorFromSerializedRecipeSymbolLoc(void)::ptr;
  uint64_t v6 = getFigCPECryptorCreateCryptorFromSerializedRecipeSymbolLoc(void)::ptr;
  if (!getFigCPECryptorCreateCryptorFromSerializedRecipeSymbolLoc(void)::ptr)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 0x40000000;
    v2[2] = ___ZL58getFigCPECryptorCreateCryptorFromSerializedRecipeSymbolLocv_block_invoke_11205;
    v2[3] = &unk_1E5688750;
    v2[4] = &v3;
    ___ZL58getFigCPECryptorCreateCryptorFromSerializedRecipeSymbolLocv_block_invoke_11205((uint64_t)v2);
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_190129020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *___ZL58getFigCPECryptorCreateCryptorFromSerializedRecipeSymbolLocv_block_invoke_11205(uint64_t a1)
{
  uint64_t v2 = (void *)MediaToolboxLibraryCore();
  if (!v2)
  {
    unint64_t v4 = (void *)abort_report_np();
    free(v4);
  }
  uint64_t result = dlsym(v2, "FigCPECryptorCreateCryptorFromSerializedRecipe");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getFigCPECryptorCreateCryptorFromSerializedRecipeSymbolLoc(void)::ptr = *(void *)(*(void *)(*(void *)(a1 + 32)
                                                                                                + 8)
                                                                                    + 24);
  return result;
}

uint64_t ___ZL23MediaToolboxLibraryCorePPc_block_invoke_11209()
{
  uint64_t result = _sl_dlopen();
  MediaToolboxLibraryCore(char **)::frameworkLibrary = result;
  return result;
}

uint64_t FigCPECryptorMarshaller::Serialize(FigCPECryptorMarshaller *this, CASerializer *a2, CFTypeRef *a3, int a4)
{
  if (a4 != 8) {
    return 0;
  }
  id v12 = 0;
  CFTypeRef v6 = *a3;
  if (CoreMediaLibraryCore(0) && getCMBaseObjectGetVTableSymbolLoc())
  {
    VTableSymbolLoc = (uint64_t (*)(CFTypeRef))getCMBaseObjectGetVTableSymbolLoc();
    if (!VTableSymbolLoc)
    {
      dlerror();
      unint64_t v11 = (char **)abort_report_np();
      return CoreMediaLibraryCore(v11);
    }
    uint64_t v8 = *(void *)(VTableSymbolLoc(v6) + 16);
  }
  else
  {
    uint64_t v8 = 0;
  }
  unint64_t v9 = *(unsigned int (**)(CFTypeRef, void **))(v8 + 264);
  if (!v9 || v9(v6, &v12)) {
    return 0;
  }
  if (*a3)
  {
    if (*((unsigned char *)this + 32)) {
      CFRelease(*a3);
    }
  }
  Marshaller::AddCreatedCFObject(this, v12);
  operator<<();
  return 1;
}

uint64_t CoreMediaLibraryCore(char **a1)
{
  if (!CoreMediaLibraryCore(char **)::frameworkLibrary) {
    CoreMediaLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  }
  return CoreMediaLibraryCore(char **)::frameworkLibrary;
}

uint64_t getCMBaseObjectGetVTableSymbolLoc(void)
{
  uint64_t v3 = 0;
  unint64_t v4 = &v3;
  uint64_t v5 = 0x2000000000;
  uint64_t v0 = getCMBaseObjectGetVTableSymbolLoc(void)::ptr;
  uint64_t v6 = getCMBaseObjectGetVTableSymbolLoc(void)::ptr;
  if (!getCMBaseObjectGetVTableSymbolLoc(void)::ptr)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 0x40000000;
    v2[2] = ___ZL33getCMBaseObjectGetVTableSymbolLocv_block_invoke;
    v2[3] = &unk_1E56886F0;
    v2[4] = &v3;
    ___ZL33getCMBaseObjectGetVTableSymbolLocv_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1901293F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *___ZL33getCMBaseObjectGetVTableSymbolLocv_block_invoke(uint64_t a1)
{
  uint64_t v5 = 0;
  uint64_t v2 = (void *)CoreMediaLibraryCore(&v5);
  uint64_t v3 = v5;
  if (!v2)
  {
    uint64_t v3 = (void *)abort_report_np();
    goto LABEL_5;
  }
  if (v5) {
LABEL_5:
  }
    free(v3);
  uint64_t result = dlsym(v2, "CMBaseObjectGetVTable");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCMBaseObjectGetVTableSymbolLoc(void)::ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t ___ZL20CoreMediaLibraryCorePPc_block_invoke_11213()
{
  uint64_t result = _sl_dlopen();
  CoreMediaLibraryCore(char **)::frameworkLibrary = result;
  return result;
}

void FigCPECryptorMarshaller::~FigCPECryptorMarshaller(FigCPECryptorMarshaller *this)
{
  Marshaller::~Marshaller(this);
  JUMPOUT(0x192FC8940);
}

uint64_t TArrayMarshaller<OriginInfo>::Deserialize(Marshaller *a1, CADeserializer *this, void **a3, unsigned int *a4)
{
  int64_t v7 = this->var3 - this->var2;
  Ptr = (const void *)CADeserializer::GetAndAdvanceReadPtr(this);
  Marshaller::CheckDest(a1, a3, a4, (v7 + 18 * ((v7 & 0xFFFFFFFE) / 0x12) - (v7 & 0xFFFFFFFE)) & 0xFFFFFFFE);
  memcpy(*a3, Ptr, *a4);
  return 1;
}

void TArrayMarshaller<OriginInfo>::~TArrayMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x192FC8940);
}

uint64_t ImmersiveRendererDataMarshaller::Deserialize(ImmersiveRendererDataMarshaller *this, CADeserializer *a2, void **a3, unsigned int *a4)
{
  unint64_t v4 = a2->var3 - a2->var2;
  if (*a4) {
    BOOL v5 = v4 > *a4;
  }
  else {
    BOOL v5 = 0;
  }
  uint64_t v6 = !v5;
  if (v6 == 1)
  {
    Marshaller::CheckDest(this, a3, a4, v4);
    int v14 = 0;
    CADeserializer::Read(a2, &v14);
    unint64_t v9 = (char *)*a3;
    if (v14 == 2)
    {
      CADeserializer::Read(a2, v9 + 4);
      CADeserializer::Read(a2, v9 + 8);
      Ptr = (const void *)CADeserializer::GetAndAdvanceReadPtr(a2);
      memcpy(v9 + 12, Ptr, *((unsigned int *)v9 + 2));
    }
    else
    {
      CADeserializer::Read(a2, v9 + 4);
      if (*((_DWORD *)v9 + 1))
      {
        unint64_t v11 = 0;
        id v12 = v9 + 24;
        do
        {
          CADeserializer::Read(a2, v12 - 16);
          CADeserializer::Read(a2, v12 - 12);
          CADeserializer::Read(a2, v12 - 8);
          CADeserializer::Read(a2, v12 - 4);
          CADeserializer::Read(a2, v12);
          ++v11;
          v12 += 20;
        }
        while (v11 < *((unsigned int *)v9 + 1));
      }
    }
    *(_DWORD *)unint64_t v9 = v14;
  }
  return v6;
}

uint64_t ImmersiveRendererDataMarshaller::Serialize(ImmersiveRendererDataMarshaller *this, CASerializer *a2, char *a3)
{
  int v5 = *(_DWORD *)a3;
  CASerializer::Write(a2, a3);
  if (v5 == 2)
  {
    CASerializer::Write(a2, a3 + 4);
    CASerializer::Write(a2, a3 + 8);
    CASerializer::Write(a2, a3 + 12);
  }
  else
  {
    uint64_t v6 = (unsigned int *)(a3 + 4);
    CASerializer::Write(a2, a3 + 4);
    if (*((_DWORD *)a3 + 1))
    {
      unint64_t v7 = 0;
      uint64_t v8 = a3 + 24;
      do
      {
        CASerializer::Write(a2, v8 - 16);
        CASerializer::Write(a2, v8 - 12);
        int v10 = *((_DWORD *)v8 - 2);
        CASerializer::Write(a2, &v10);
        CASerializer::Write(a2, v8 - 4);
        CASerializer::Write(a2, v8);
        ++v7;
        v8 += 20;
      }
      while (v7 < *v6);
    }
  }
  return 1;
}

void ImmersiveRendererDataMarshaller::~ImmersiveRendererDataMarshaller(ImmersiveRendererDataMarshaller *this)
{
  Marshaller::~Marshaller(this);
  JUMPOUT(0x192FC8940);
}

void *TSimpleMarshaller<DRCTypeFromPacket>::DeserializeT(int a1, CADeserializer *this, void *a3)
{
  if (*((_DWORD *)a3 + 2)) {
    CADeserializer::GetAndAdvanceReadPtr(this);
  }
  else {
    CADeserializer::Read(this, a3 + 1);
  }
  int v5 = (void *)*a3;
  operator>>();
  CADeserializer::Read(this, v5 + 5);
  size_t v6 = *((unsigned int *)v5 + 10);
  if (v6)
  {
    unint64_t v7 = (void *)v5[6];
    Ptr = (const void *)CADeserializer::GetAndAdvanceReadPtr(this);
    if (v7) {
      memcpy(v7, Ptr, v6);
    }
    else {
      void v5[6] = Ptr;
    }
  }
  else
  {
    void v5[6] = 0;
  }
  uint64_t result = (void *)CADeserializer::Read(this, v5 + 7);
  size_t v10 = *((unsigned int *)v5 + 14);
  if (v10)
  {
    unint64_t v11 = (void *)v5[8];
    uint64_t result = (void *)CADeserializer::GetAndAdvanceReadPtr(this);
    if (v11)
    {
      return memcpy(v11, result, v10);
    }
    else
    {
      unsigned char v5[8] = result;
    }
  }
  else
  {
    unsigned char v5[8] = 0;
  }
  return result;
}

uint64_t TSimpleMarshaller<DRCTypeFromPacket>::SerializeT(int a1, CASerializer *this, uint64_t *a3)
{
  CASerializer::Write(this, a3 + 1);
  uint64_t v5 = *a3;
  operator<<();
  CASerializer::Write(this, (const void *)(v5 + 40));
  CASerializer::Write(this, *(const void **)(v5 + 48));
  CASerializer::Write(this, (const void *)(v5 + 56));
  size_t v6 = *(const void **)(v5 + 64);
  return CASerializer::Write(this, v6);
}

BOOL TMarshaller<DRCTypeFromPacket>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if ((*a4 | 0x10) != 0x10) {
    return 0;
  }
  Marshaller::CheckDest(a1, a3, a4, 0x10uLL);
  (*(void (**)(Marshaller *, uint64_t, void))(*(void *)a1 + 40))(a1, a2, *a3);
  return *(unsigned char *)(a2 + 32) == 0;
}

BOOL TMarshaller<DRCTypeFromPacket>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 16) {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  }
  return a4 == 16;
}

void TSimpleMarshaller<DRCTypeFromPacket>::~TSimpleMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x192FC8940);
}

CADeserializer *TSimpleMarshaller<PrePostDataForGapless>::DeserializeT(uint64_t a1, CADeserializer *a2, uint64_t a3)
{
  unint64_t v4 = operator>>(a2, *(_DWORD **)a3);
  uint64_t v5 = *(_DWORD **)(a3 + 8);
  return operator>>(v4, v5);
}

CASerializer *TSimpleMarshaller<PrePostDataForGapless>::SerializeT(uint64_t a1, CASerializer *a2, const void ***a3)
{
  unint64_t v4 = operator<<(a2, *a3);
  uint64_t v5 = a3[1];
  return operator<<(v4, v5);
}

BOOL TMarshaller<PrePostDataForGapless>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if ((*a4 | 0x10) != 0x10) {
    return 0;
  }
  Marshaller::CheckDest(a1, a3, a4, 0x10uLL);
  (*(void (**)(Marshaller *, uint64_t, void))(*(void *)a1 + 40))(a1, a2, *a3);
  return *(unsigned char *)(a2 + 32) == 0;
}

BOOL TMarshaller<PrePostDataForGapless>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 16) {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  }
  return a4 == 16;
}

void TSimpleMarshaller<PrePostDataForGapless>::~TSimpleMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x192FC8940);
}

uint64_t TSimpleMarshaller<AudioFormatInfo>::DeserializeT(uint64_t a1, CADeserializer *a2, uint64_t a3)
{
  operator>>();
  CADeserializer::Read(a2, (void *)(a3 + 48));
  int v5 = *(_DWORD *)(a3 + 48);
  return getBufferPtrFromDeserializer<void const>(a2, (void *)(a3 + 40), v5);
}

uint64_t TSimpleMarshaller<AudioFormatInfo>::SerializeT(uint64_t a1, CASerializer *a2, uint64_t a3)
{
  operator<<();
  CASerializer::Write(a2, (const void *)(a3 + 48));
  int v5 = *(const void **)(a3 + 40);
  return CASerializer::Write(a2, v5);
}

BOOL TMarshaller<AudioFormatInfo>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if (*a4 != 56 && *a4 != 0) {
    return 0;
  }
  Marshaller::CheckDest(a1, a3, a4, 0x38uLL);
  (*(void (**)(Marshaller *, uint64_t, void))(*(void *)a1 + 40))(a1, a2, *a3);
  return *(unsigned char *)(a2 + 32) == 0;
}

BOOL TMarshaller<AudioFormatInfo>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 56) {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  }
  return a4 == 56;
}

void TSimpleMarshaller<AudioFormatInfo>::~TSimpleMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x192FC8940);
}

uint64_t TSimpleMarshaller<VorbisCodecModeInfo>::DeserializeT(int a1, CADeserializer *this, void *a3)
{
  CADeserializer::Read(this, a3 + 1);
  getBufferPtrFromDeserializer<void const>(this, a3, *((_DWORD *)a3 + 2));
  CADeserializer::Read(this, (char *)a3 + 12);
  CADeserializer::Read(this, a3 + 2);
  CADeserializer::Read(this, (char *)a3 + 20);
  return CADeserializer::Read(this, a3 + 3);
}

uint64_t TSimpleMarshaller<VorbisCodecModeInfo>::SerializeT(int a1, CASerializer *this, const void **a3)
{
  CASerializer::Write(this, a3 + 1);
  CASerializer::Write(this, *a3);
  CASerializer::Write(this, (char *)a3 + 12);
  CASerializer::Write(this, a3 + 2);
  CASerializer::Write(this, (char *)a3 + 20);
  return CASerializer::Write(this, a3 + 3);
}

BOOL TMarshaller<VorbisCodecModeInfo>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if ((*a4 | 0x20) != 0x20) {
    return 0;
  }
  Marshaller::CheckDest(a1, a3, a4, 0x20uLL);
  (*(void (**)(Marshaller *, uint64_t, void))(*(void *)a1 + 40))(a1, a2, *a3);
  return *(unsigned char *)(a2 + 32) == 0;
}

BOOL TMarshaller<VorbisCodecModeInfo>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 32) {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  }
  return a4 == 32;
}

void TSimpleMarshaller<VorbisCodecModeInfo>::~TSimpleMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x192FC8940);
}

uint64_t TSimpleMarshaller<AudioCodecMagicCookieInfo>::DeserializeT(int a1, CADeserializer *this, int *a3)
{
  CADeserializer::Read(this, a3);
  int v5 = *a3;
  return getBufferPtrFromDeserializer<void const>(this, (void *)a3 + 1, v5);
}

uint64_t TSimpleMarshaller<AudioCodecMagicCookieInfo>::SerializeT(int a1, CASerializer *this, void *a3)
{
  CASerializer::Write(this, a3);
  int v5 = (const void *)*((void *)a3 + 1);
  return CASerializer::Write(this, v5);
}

BOOL TMarshaller<AudioCodecMagicCookieInfo>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if ((*a4 | 0x10) != 0x10) {
    return 0;
  }
  Marshaller::CheckDest(a1, a3, a4, 0x10uLL);
  (*(void (**)(Marshaller *, uint64_t, void))(*(void *)a1 + 40))(a1, a2, *a3);
  return *(unsigned char *)(a2 + 32) == 0;
}

BOOL TMarshaller<AudioCodecMagicCookieInfo>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 16) {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  }
  return a4 == 16;
}

void TSimpleMarshaller<AudioCodecMagicCookieInfo>::~TSimpleMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x192FC8940);
}

uint64_t TArrayMarshaller<ProfileLevelInfo>::Deserialize(Marshaller *a1, CADeserializer *this, void **a3, unsigned int *a4)
{
  int64_t v7 = this->var3 - this->var2;
  Ptr = (const void *)CADeserializer::GetAndAdvanceReadPtr(this);
  Marshaller::CheckDest(a1, a3, a4, v7 & 0xFFFFFFF8);
  memcpy(*a3, Ptr, *a4);
  return 1;
}

void TArrayMarshaller<ProfileLevelInfo>::~TArrayMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x192FC8940);
}

void *TSimpleMarshaller<ESDSFromADTSPacket>::DeserializeT(int a1, CADeserializer *this, char *a3)
{
  CADeserializer::Read(this, a3);
  size_t v5 = *(unsigned int *)a3;
  if (v5)
  {
    size_t v6 = (void *)*((void *)a3 + 1);
    Ptr = (const void *)CADeserializer::GetAndAdvanceReadPtr(this);
    if (v6) {
      memcpy(v6, Ptr, v5);
    }
    else {
      *((void *)a3 + 1) = Ptr;
    }
  }
  else
  {
    *((void *)a3 + 1) = 0;
  }
  uint64_t result = (void *)CADeserializer::Read(this, a3 + 16);
  size_t v9 = *((unsigned int *)a3 + 4);
  if (v9)
  {
    size_t v10 = (void *)*((void *)a3 + 3);
    uint64_t result = (void *)CADeserializer::GetAndAdvanceReadPtr(this);
    if (v10)
    {
      return memcpy(v10, result, v9);
    }
    else
    {
      *((void *)a3 + 3) = result;
    }
  }
  else
  {
    *((void *)a3 + 3) = 0;
  }
  return result;
}

uint64_t TSimpleMarshaller<ESDSFromADTSPacket>::SerializeT(int a1, CASerializer *this, const void **a3)
{
  CASerializer::Write(this, a3);
  CASerializer::Write(this, a3[1]);
  CASerializer::Write(this, a3 + 2);
  size_t v5 = a3[3];
  return CASerializer::Write(this, v5);
}

BOOL TMarshaller<ESDSFromADTSPacket>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if ((*a4 | 0x20) != 0x20) {
    return 0;
  }
  Marshaller::CheckDest(a1, a3, a4, 0x20uLL);
  (*(void (**)(Marshaller *, uint64_t, void))(*(void *)a1 + 40))(a1, a2, *a3);
  return *(unsigned char *)(a2 + 32) == 0;
}

BOOL TMarshaller<ESDSFromADTSPacket>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 32) {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  }
  return a4 == 32;
}

void TSimpleMarshaller<ESDSFromADTSPacket>::~TSimpleMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x192FC8940);
}

uint64_t TSimpleMarshaller<AudibleAAXCodecAuthorizationInfo>::DeserializeT(uint64_t a1, CADeserializer *a2, void *a3)
{
  operator>>();
  CADeserializer::Read(a2, a3 + 6);
  getBufferPtrFromDeserializer<void const>(a2, a3 + 5, *((_DWORD *)a3 + 12));
  CADeserializer::Read(a2, (char *)a3 + 52);
  return CADeserializer::Read(a2, a3 + 7);
}

uint64_t TSimpleMarshaller<AudibleAAXCodecAuthorizationInfo>::SerializeT(uint64_t a1, CASerializer *a2, const void **a3)
{
  operator<<();
  CASerializer::Write(a2, a3 + 6);
  CASerializer::Write(a2, a3[5]);
  CASerializer::Write(a2, (char *)a3 + 52);
  return CASerializer::Write(a2, a3 + 7);
}

BOOL TMarshaller<AudibleAAXCodecAuthorizationInfo>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if ((*a4 | 0x40) != 0x40) {
    return 0;
  }
  Marshaller::CheckDest(a1, a3, a4, 0x40uLL);
  (*(void (**)(Marshaller *, uint64_t, void))(*(void *)a1 + 40))(a1, a2, *a3);
  return *(unsigned char *)(a2 + 32) == 0;
}

BOOL TMarshaller<AudibleAAXCodecAuthorizationInfo>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 64) {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  }
  return a4 == 64;
}

void TSimpleMarshaller<AudibleAAXCodecAuthorizationInfo>::~TSimpleMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x192FC8940);
}

uint64_t TArrayMarshaller<AudioStreamPacketDependencyInfo>::Deserialize(Marshaller *a1, CADeserializer *this, void **a3, unsigned int *a4)
{
  int64_t v7 = this->var3 - this->var2;
  Ptr = (const void *)CADeserializer::GetAndAdvanceReadPtr(this);
  Marshaller::CheckDest(a1, a3, a4, v7 & 0xFFFFFFF0);
  memcpy(*a3, Ptr, *a4);
  return 1;
}

void TArrayMarshaller<AudioStreamPacketDependencyInfo>::~TArrayMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x192FC8940);
}

uint64_t TSimpleMarshaller<SpeechCodecBundleData>::DeserializeT(int a1, CADeserializer *this, void **a3)
{
  CADeserializer::Read(this, a3 + 1);
  size_t v5 = *((unsigned int *)a3 + 2);
  size_t v6 = *a3;
  if (v5) {
    BOOL v7 = 0;
  }
  else {
    BOOL v7 = v6 == 0;
  }
  if (v7)
  {
    *a3 = (void *)3735928559;
  }
  else if (v5)
  {
    Ptr = (void *)CADeserializer::GetAndAdvanceReadPtr(this);
    if (v6) {
      memcpy(v6, Ptr, v5);
    }
    else {
      *a3 = Ptr;
    }
  }
  else
  {
    *a3 = 0;
  }
  CADeserializer::Read(this, (char *)a3 + 12);
  size_t v9 = operator>>(this, (uint64_t)(a3 + 2));
  CADeserializer::Read(v9, a3 + 4);
  uint64_t v10 = -300;
  do
  {
    CADeserializer::Read(this, (char *)a3 + v10 + 336);
    CADeserializer::Read(this, (char *)a3 + v10 + 340);
    CADeserializer::Read(this, (char *)a3 + v10 + 344);
    CADeserializer::Read(this, (char *)a3 + v10 + 348);
    uint64_t result = CADeserializer::Read(this, (char *)a3 + v10 + 352);
    v10 += 20;
  }
  while (v10);
  return result;
}

CASerializer *TSimpleMarshaller<SpeechCodecBundleData>::SerializeT(int a1, CASerializer *this, const void **a3)
{
  CASerializer::Write(this, a3 + 1);
  CASerializer::Write(this, *a3);
  CASerializer::Write(this, (char *)a3 + 12);
  size_t v5 = operator<<(this, (uint64_t)(a3 + 2));
  size_t v6 = (unsigned int *)(a3 + 4);
  CASerializer::Write(v5, a3 + 4);
  unint64_t v7 = 0;
  uint64_t v8 = (const void **)((char *)a3 + 36);
  do
  {
    if (v7 >= *v6)
    {
      v12[0] = 0;
      v12[1] = 0;
      int v13 = 0;
      uint64_t v10 = v12;
      size_t v9 = this;
    }
    else
    {
      size_t v9 = this;
      uint64_t v10 = v8;
    }
    uint64_t result = operator<<(v9, (uint64_t)v10);
    ++v7;
    uint64_t v8 = (void *)((char *)v8 + 20);
  }
  while (v7 != 15);
  return result;
}

BOOL TMarshaller<SpeechCodecBundleData>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if (*a4 != 336 && *a4 != 0) {
    return 0;
  }
  Marshaller::CheckDest(a1, a3, a4, 0x150uLL);
  (*(void (**)(Marshaller *, uint64_t, void))(*(void *)a1 + 40))(a1, a2, *a3);
  return *(unsigned char *)(a2 + 32) == 0;
}

BOOL TMarshaller<SpeechCodecBundleData>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 336) {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  }
  return a4 == 336;
}

void TSimpleMarshaller<SpeechCodecBundleData>::~TSimpleMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x192FC8940);
}

uint64_t TSimpleMarshaller<EVSRFParams>::DeserializeT(int a1, CADeserializer *this, char *a3)
{
  CADeserializer::Read(this, a3);
  return CADeserializer::Read(this, a3 + 4);
}

uint64_t TSimpleMarshaller<EVSRFParams>::SerializeT(int a1, CASerializer *this, char *a3)
{
  CASerializer::Write(this, a3);
  return CASerializer::Write(this, a3 + 4);
}

BOOL TMarshaller<EVSRFParams>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if ((*a4 | 8) != 8) {
    return 0;
  }
  Marshaller::CheckDest(a1, a3, a4, 8uLL);
  (*(void (**)(Marshaller *, uint64_t, void))(*(void *)a1 + 40))(a1, a2, *a3);
  return *(unsigned char *)(a2 + 32) == 0;
}

BOOL TMarshaller<EVSRFParams>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 8) {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  }
  return a4 == 8;
}

void TSimpleMarshaller<EVSRFParams>::~TSimpleMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x192FC8940);
}

CADeserializer *TSimpleMarshaller<CMRData>::DeserializeT(uint64_t a1, CADeserializer *a2, uint64_t a3)
{
  return operator>>(a2, a3);
}

CASerializer *TSimpleMarshaller<CMRData>::SerializeT(uint64_t a1, CASerializer *a2, uint64_t a3)
{
  return operator<<(a2, a3);
}

BOOL TMarshaller<CMRData>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if ((*a4 | 0x10) != 0x10) {
    return 0;
  }
  Marshaller::CheckDest(a1, a3, a4, 0x10uLL);
  (*(void (**)(Marshaller *, uint64_t, void))(*(void *)a1 + 40))(a1, a2, *a3);
  return *(unsigned char *)(a2 + 32) == 0;
}

BOOL TMarshaller<CMRData>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 16) {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  }
  return a4 == 16;
}

void TSimpleMarshaller<CMRData>::~TSimpleMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x192FC8940);
}

uint64_t TSimpleMarshaller<EVSRFDecodeData>::DeserializeT(int a1, CADeserializer *this, char *a3)
{
  CADeserializer::Read(this, a3);
  return CADeserializer::Read(this, a3 + 4);
}

uint64_t TSimpleMarshaller<EVSRFDecodeData>::SerializeT(int a1, CASerializer *this, char *a3)
{
  unint64_t v4 = a3 + 4;
  char v6 = *a3;
  CASerializer::Write(this, &v6);
  return CASerializer::Write(this, v4);
}

BOOL TMarshaller<EVSRFDecodeData>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if ((*a4 | 8) != 8) {
    return 0;
  }
  Marshaller::CheckDest(a1, a3, a4, 8uLL);
  (*(void (**)(Marshaller *, uint64_t, void))(*(void *)a1 + 40))(a1, a2, *a3);
  return *(unsigned char *)(a2 + 32) == 0;
}

BOOL TMarshaller<EVSRFDecodeData>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 8) {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  }
  return a4 == 8;
}

void TSimpleMarshaller<EVSRFDecodeData>::~TSimpleMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x192FC8940);
}

uint64_t TArrayMarshaller<AudioStreamBasicDescription>::Deserialize(Marshaller *a1, CADeserializer *this, void **a3, unsigned int *a4)
{
  int64_t v7 = this->var3 - this->var2;
  Ptr = (const void *)CADeserializer::GetAndAdvanceReadPtr(this);
  Marshaller::CheckDest(a1, a3, a4, (v7 + 40 * ((v7 & 0xFFFFFFF8) / 0x28) - (v7 & 0xFFFFFFF8)) & 0xFFFFFFF8);
  memcpy(*a3, Ptr, *a4);
  return 1;
}

void TArrayMarshaller<AudioStreamBasicDescription>::~TArrayMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x192FC8940);
}

uint64_t TArrayMarshaller<AudioFormatListItem>::Deserialize(Marshaller *a1, CADeserializer *this, void **a3, unsigned int *a4)
{
  int64_t v7 = this->var3 - this->var2;
  Ptr = (const void *)CADeserializer::GetAndAdvanceReadPtr(this);
  Marshaller::CheckDest(a1, a3, a4, (v7 + 48 * ((v7 & 0xFFFFFFF0) / 0x30) - (v7 & 0xFFFFFFF0)) & 0xFFFFFFF0);
  memcpy(*a3, Ptr, *a4);
  return 1;
}

void TArrayMarshaller<AudioFormatListItem>::~TArrayMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x192FC8940);
}

uint64_t TArrayMarshaller<AudioValueRange>::Deserialize(Marshaller *a1, CADeserializer *this, void **a3, unsigned int *a4)
{
  int64_t v7 = this->var3 - this->var2;
  Ptr = (const void *)CADeserializer::GetAndAdvanceReadPtr(this);
  Marshaller::CheckDest(a1, a3, a4, v7 & 0xFFFFFFF0);
  memcpy(*a3, Ptr, *a4);
  return 1;
}

void TArrayMarshaller<AudioValueRange>::~TArrayMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x192FC8940);
}

uint64_t TArrayMarshaller<int>::Deserialize(Marshaller *a1, CADeserializer *this, void **a3, unsigned int *a4)
{
  int64_t v7 = this->var3 - this->var2;
  Ptr = (const void *)CADeserializer::GetAndAdvanceReadPtr(this);
  Marshaller::CheckDest(a1, a3, a4, v7 & 0xFFFFFFFC);
  memcpy(*a3, Ptr, *a4);
  return 1;
}

void TArrayMarshaller<int>::~TArrayMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x192FC8940);
}

uint64_t TPODMarshaller<AudioConverterPrimeInfo>::DeserializeT(int a1, CADeserializer *this, void *a3)
{
  return CADeserializer::Read(this, a3);
}

uint64_t TPODMarshaller<AudioConverterPrimeInfo>::SerializeT(int a1, CASerializer *this, void *a3)
{
  return CASerializer::Write(this, a3);
}

BOOL TMarshaller<AudioConverterPrimeInfo>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if ((*a4 | 8) != 8) {
    return 0;
  }
  Marshaller::CheckDest(a1, a3, a4, 8uLL);
  (*(void (**)(Marshaller *, uint64_t, void))(*(void *)a1 + 40))(a1, a2, *a3);
  return *(unsigned char *)(a2 + 32) == 0;
}

BOOL TMarshaller<AudioConverterPrimeInfo>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 8) {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  }
  return a4 == 8;
}

void TPODMarshaller<AudioConverterPrimeInfo>::~TPODMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x192FC8940);
}

uint64_t TSimpleMarshaller<unsigned char>::DeserializeT(int a1, CADeserializer *this, void *a3)
{
  return CADeserializer::Read(this, a3);
}

uint64_t TSimpleMarshaller<unsigned char>::SerializeT(int a1, CASerializer *this, void *a3)
{
  return CASerializer::Write(this, a3);
}

BOOL TMarshaller<unsigned char>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if (*a4 > 1) {
    return 0;
  }
  Marshaller::CheckDest(a1, a3, a4, 1uLL);
  (*(void (**)(Marshaller *, uint64_t, void))(*(void *)a1 + 40))(a1, a2, *a3);
  return *(unsigned char *)(a2 + 32) == 0;
}

BOOL TMarshaller<unsigned char>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 1) {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  }
  return a4 == 1;
}

void TSimpleMarshaller<unsigned char>::~TSimpleMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x192FC8940);
}

uint64_t TSimpleMarshaller<int>::DeserializeT(int a1, CADeserializer *this, void *a3)
{
  return CADeserializer::Read(this, a3);
}

uint64_t TSimpleMarshaller<int>::SerializeT(int a1, CASerializer *this, void *a3)
{
  return CASerializer::Write(this, a3);
}

BOOL TMarshaller<int>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if ((*a4 | 4) != 4) {
    return 0;
  }
  Marshaller::CheckDest(a1, a3, a4, 4uLL);
  (*(void (**)(Marshaller *, uint64_t, void))(*(void *)a1 + 40))(a1, a2, *a3);
  return *(unsigned char *)(a2 + 32) == 0;
}

BOOL TMarshaller<int>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 4) {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  }
  return a4 == 4;
}

void TSimpleMarshaller<int>::~TSimpleMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x192FC8940);
}

void TCFMarshaller<__CFData const*>::DeserializeT(Marshaller *a1, uint64_t a2, const void **a3)
{
  operator>>();
  size_t v5 = *a3;
  Marshaller::AddCreatedCFObject(a1, v5);
}

void TCFMarshaller<__CFData const*>::SerializeT(uint64_t a1, uint64_t a2, const void **a3)
{
  operator<<();
  size_t v5 = *a3;
  if (*a3 && *(unsigned char *)(a1 + 32))
  {
    CFRelease(v5);
  }
}

BOOL TMarshaller<__CFData const*>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if ((*a4 | 8) != 8) {
    return 0;
  }
  Marshaller::CheckDest(a1, a3, a4, 8uLL);
  (*(void (**)(Marshaller *, uint64_t, void))(*(void *)a1 + 40))(a1, a2, *a3);
  return *(unsigned char *)(a2 + 32) == 0;
}

BOOL TMarshaller<__CFData const*>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 8) {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  }
  return a4 == 8;
}

void TCFMarshaller<__CFData const*>::~TCFMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x192FC8940);
}

void DSPGraph::Analyzer::getFormatFromUnit(DSPGraph::Analyzer *this)
{
  std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Analyzers.cpp");
  std::string::basic_string[abi:ne180100]<0>(&v7, "getFormatFromUnit");
  std::string::basic_string[abi:ne180100]<0>(&v5, "Analyzer::getFormatFromUnit ");
  uint64_t v2 = (const char *)(*(uint64_t (**)(DSPGraph::Analyzer *))(*(void *)this + 16))(this);
  size_t v3 = strlen(v2);
  unint64_t v4 = std::string::append(&v5, v2, v3);
  std::string v6 = *v4;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  DSPGraph::ThrowException(1869640255, &v8, 115, &v7, (long long *)&v6);
}

void sub_19012BBDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (*(char *)(v28 - 17) < 0) {
    operator delete(*(void **)(v28 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Analyzer::asAUAnalyzer(DSPGraph::Analyzer *this)
{
  return 0;
}

uint64_t DSPGraph::Analyzer::isAU(DSPGraph::Analyzer *this)
{
  return 0;
}

void *DSPGraph::Analyzer::printShort(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  return DSPGraph::printACD(a2, (unsigned int *)(a1 + 32), a4);
}

uint64_t DSPGraph::Analyzer::print(uint64_t result, void *a2, int a3, uint64_t a4)
{
  if (a3 >= 5)
  {
    int v4 = a4;
    (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)result + 32))(result, a2, a4, 1);
    DSPGraph::printi(a2, v4 + 4, "analysis %p\n");
  }
  return result;
}

const char *DSPGraph::Analyzer::ClassName(DSPGraph::Analyzer *this)
{
  return "Analyzer";
}

uint64_t DSPGraph::AUAnalyzer::getFormatFromUnit@<X0>(AudioUnit *this@<X0>, AudioUnitScope inScope@<W1>, AudioUnitElement inElement@<W2>, void *a4@<X8>)
{
  a4[4] = 0;
  *(_OWORD *)a4 = 0u;
  *((_OWORD *)a4 + 1) = 0u;
  UInt32 ioDataSize = 40;
  uint64_t result = AudioUnitGetProperty(this[13], 8u, inScope, inElement, a4, &ioDataSize);
  if (result)
  {
    int v6 = result;
    std::string::basic_string[abi:ne180100]<0>(&v14, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Analyzers.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v13, "getFormatFromUnit");
    std::string::basic_string[abi:ne180100]<0>(&v9, "AUAnalyzer::getFormatFromUnit ");
    long long v7 = (char *)(*((uint64_t (**)(AudioUnit *))*this + 2))(this);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v10, &v9, v7);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v11, &v10, " ");
    long long v8 = (char *)(this + 7);
    if (*((char *)this + 79) < 0) {
      long long v8 = *(char **)v8;
    }
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v12, &v11, v8);
    DSPGraph::ThrowException(v6, &v14, 315, &v13, (long long *)&v12);
  }
  return result;
}

void sub_19012BE24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  if (*(char *)(v33 - 25) < 0) {
    operator delete(*(void **)(v33 - 48));
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::AUAnalyzer::setFormatOnUnit(AudioUnit *this, const AudioStreamBasicDescription *inData, AudioUnitScope a3, AudioUnitElement a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t result = AudioUnitSetProperty(this[13], 8u, a3, a4, inData, 0x28u);
  if (result)
  {
    int v12 = result;
    if (DSPGraph::getLog(void)::onceToken != -1) {
      dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_11235);
    }
    long long v7 = DSPGraph::getLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)DSPGraph::getLog(void)::gLog, OS_LOG_TYPE_DEBUG))
    {
      int16x8_t v8 = *(int16x8_t *)&inData->mBytesPerPacket;
      *(_OWORD *)AudioFormatInfo buf = *(_OWORD *)&inData->mSampleRate;
      int16x8_t v20 = v8;
      uint64_t v21 = *(void *)&inData->mBitsPerChannel;
      CA::StreamDescription::AsString((CA::StreamDescription *)__p, buf, *(double *)buf, v8);
      std::string v9 = v18 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioFormatInfo buf = 136315138;
      *(void *)&uint8_t buf[4] = v9;
      _os_log_debug_impl(&dword_18FEC0000, v7, OS_LOG_TYPE_DEBUG, "AudioStreamBasicDescription: %s", buf, 0xCu);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(buf, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Analyzers.cpp");
    std::string::basic_string[abi:ne180100]<0>(__p, "setFormatOnUnit");
    std::string::basic_string[abi:ne180100]<0>(&v13, "AUAnalyzer::setFormatOnUnit ");
    std::string v10 = (char *)(*((uint64_t (**)(AudioUnit *))*this + 2))(this);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v14, &v13, v10);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v15, &v14, " ");
    std::string v11 = (char *)(this + 7);
    if (*((char *)this + 79) < 0) {
      std::string v11 = *(char **)v11;
    }
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v16, &v15, v11);
    DSPGraph::ThrowException(v12, (long long *)buf, 305, (long long *)__p, (long long *)&v16);
  }
  return result;
}

void sub_19012C09C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (*(char *)(v39 - 57) < 0) {
    operator delete(*(void **)(v39 - 80));
  }
  _Unwind_Resume(exception_object);
}

os_log_t ___ZN8DSPGraph6getLogEv_block_invoke_11242()
{
  os_log_t result = os_log_create("com.apple.coreaudio", "DSPGraph");
  DSPGraph::getLog(void)::gLog = (uint64_t)result;
  return result;
}

void DSPGraph::AUAnalyzer::open(DSPGraph::AUAnalyzer *this)
{
  int v1 = (AudioComponentInstance *)((char *)this + 104);
  if (*((void *)this + 13)) {
    return;
  }
  Next = AudioComponentFindNext(0, (const AudioComponentDescription *)((char *)this + 32));
  if (!Next)
  {
    std::string::basic_string[abi:ne180100]<0>(&inData, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Analyzers.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v18, "open");
    std::string::basic_string[abi:ne180100]<0>(&v17, "AudioComponentFindNext");
    DSPGraph::ThrowException(1633906209, &inData, 264, &v18, &v17);
  }
  OSStatus v4 = AudioComponentInstanceNew(Next, v1);
  if (v4)
  {
    int v12 = v4;
    std::string::basic_string[abi:ne180100]<0>(&inData, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Analyzers.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v18, "open");
    std::string::basic_string[abi:ne180100]<0>(&v17, "AudioComponentInstanceNew");
    DSPGraph::ThrowException(v12, &inData, 269, &v18, &v17);
  }
  if (!*v1)
  {
    std::string::basic_string[abi:ne180100]<0>(&inData, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Analyzers.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v18, "open");
    std::string::basic_string[abi:ne180100]<0>(&v17, "AudioComponentInstanceNew");
    DSPGraph::ThrowException(1633906209, &inData, 272, &v18, &v17);
  }
  std::string v5 = (const char **)((char *)this + 56);
  if ((*((char *)this + 79) & 0x80000000) == 0)
  {
    size_t v6 = strlen((const char *)this + 56);
    long long v7 = (const UInt8 *)this + 56;
    goto LABEL_9;
  }
  long long v7 = (const UInt8 *)*v5;
  size_t v8 = strlen(*v5);
  if (*v5)
  {
    size_t v6 = v8;
LABEL_9:
    long long v7 = (const UInt8 *)CFStringCreateWithBytes(0, v7, v6, 0x8000100u, 0);
    std::string v16 = v7;
    if (!v7)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    goto LABEL_10;
  }
  std::string v16 = 0;
LABEL_10:
  std::string v15 = v7;
  (*(void (**)(DSPGraph::AUAnalyzer *, uint64_t, void, void, uint64_t, const UInt8 **))(*(void *)this + 112))(this, 54, 0, 0, 8, &v15);
  if (*v1)
  {
    (*(void (**)(DSPGraph::AUAnalyzer *, void, uint64_t, void))(*(void *)this + 136))(this, *(void *)(*((void *)this + 1) + 120), 2, 0);
    (*(void (**)(DSPGraph::AUAnalyzer *, void, uint64_t, void))(*(void *)this + 136))(this, *(void *)(*((void *)this + 1) + 120), 1, 0);
    uint64_t v9 = *((void *)this + 2);
    if (!v9)
    {
      std::string::basic_string[abi:ne180100]<0>(&inData, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Analyzers.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v18, "open");
      std::string::basic_string[abi:ne180100]<0>(&v17, "DSPGraph::AUAnalyzer Box is null");
      DSPGraph::ThrowException(0, &inData, 289, &v18, &v17);
    }
    uint64_t v10 = *(void *)(v9 + 16);
    int v11 = *(_DWORD *)(v10 + 268);
    if (v11 == 1) {
      int v11 = *(_DWORD *)(v10 + 272);
    }
    LODWORD(inData) = v11;
    AudioUnitSetProperty(*v1, 0xEu, 0, 0, &inData, 4u);
    if (AudioUnitInitialize(*v1))
    {
      std::string::basic_string[abi:ne180100]<0>(&inData, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Analyzers.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v18, "open");
      if (*((char *)this + 79) < 0) {
        std::string v5 = (const char **)*v5;
      }
      DSPGraph::strprintf((DSPGraph *)"AudioUnitInitialize %s", v14, v5);
    }
  }
  if (v7) {
    CFRelease(v7);
  }
}

void sub_19012C500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, const void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (*(char *)(v23 - 33) < 0) {
    operator delete(*(void **)(v23 - 56));
  }
  applesauce::CF::StringRef::~StringRef(&a11);
  _Unwind_Resume(a1);
}

double DSPGraph::AUAnalyzer::getParameterList@<D0>(DSPGraph::AUAnalyzer *this@<X0>, uint64_t a2@<X1>, std::vector<unsigned int> *a3@<X8>)
{
  unsigned int v6 = (*(uint64_t (**)(DSPGraph::AUAnalyzer *, uint64_t, uint64_t, void))(*(void *)this + 104))(this, 3, a2, 0);
  unsigned int v8 = v6;
  if (v9) {
    BOOL v10 = v6 > 3;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    std::vector<unsigned int>::vector(&v12, v6 >> 2);
    unsigned int v11 = v8 & 0xFFFFFFFC;
    if ((*(unsigned int (**)(DSPGraph::AUAnalyzer *, uint64_t, uint64_t, void, unsigned int *, std::vector<unsigned int>::pointer))(*(void *)this + 96))(this, 3, a2, 0, &v11, v12.__begin_))
    {
      a3->__begin_ = 0;
      a3->__end_ = 0;
      a3->__end_cap_.__value_ = 0;
      if (v12.__begin_)
      {
        v12.__end_ = v12.__begin_;
        operator delete(v12.__begin_);
      }
    }
    else
    {
      double result = *(double *)&v12.__begin_;
      *a3 = v12;
    }
  }
  else
  {
    a3->__begin_ = 0;
    a3->__end_ = 0;
    a3->__end_cap_.__value_ = 0;
  }
  return result;
}

void sub_19012C6F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::AUAnalyzer::setProperty(AudioUnit *this, AudioUnitPropertyID a2, AudioUnitScope a3, AudioUnitElement a4, UInt32 inDataSize, const void *inData)
{
  return AudioUnitSetProperty(this[13], a2, a3, a4, inData, inDataSize);
}

unint64_t DSPGraph::AUAnalyzer::getPropertyInfo(AudioUnit *this, AudioUnitPropertyID a2, AudioUnitScope a3, AudioUnitElement a4)
{
  UInt32 outDataSize = 0;
  Boolean outWritable = 0;
  unsigned int PropertyInfo = AudioUnitGetPropertyInfo(this[13], a2, a3, a4, &outDataSize, &outWritable);
  unint64_t v5 = (unint64_t)(outWritable != 0) << 32;
  if (PropertyInfo) {
    uint64_t v6 = PropertyInfo;
  }
  else {
    uint64_t v6 = outDataSize;
  }
  if (PropertyInfo) {
    unint64_t v5 = 0;
  }
  return v5 | v6;
}

uint64_t DSPGraph::AUAnalyzer::getProperty(AudioUnit *this, AudioUnitPropertyID a2, AudioUnitScope a3, AudioUnitElement a4, unsigned int *a5, void *outData)
{
  UInt32 ioDataSize = *a5;
  uint64_t result = AudioUnitGetProperty(this[13], a2, a3, a4, outData, &ioDataSize);
  *a5 = ioDataSize;
  return result;
}

uint64_t DSPGraph::AUAnalyzer::setParameter(AudioUnit *this, AudioUnitParameterID a2, AudioUnitScope a3, AudioUnitElement a4, AudioUnitParameterValue a5, UInt32 a6)
{
  uint64_t result = AudioUnitSetParameter(this[13], a2, a3, a4, a5, a6);
  if (result)
  {
    int v11 = result;
    std::string::basic_string[abi:ne180100]<0>(&v12, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Analyzers.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v14, "setParameter");
    std::string::basic_string[abi:ne180100]<0>(&v13, "AudioUnitSetParameter");
    DSPGraph::ThrowException(v11, (long long *)&v12, 144, &v14, &v13);
  }
  if (*(unsigned char *)(*(void *)(*(void *)(*((void *)this[1] + 1) + 8) + 8) + 767))
  {
    v12.mEventType = kAudioUnitEvent_ParameterValueChange;
    v12.mArgument.mParameter.mAudioUnit = this[13];
    *(void *)&v12.mArgument.mProperty.mPropertyID = __PAIR64__(a3, a2);
    v12.mArgument.mParameter.mElement = a4;
    return AUEventListenerNotify(0, 0, &v12);
  }
  return result;
}

void sub_19012C8A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::AUAnalyzer::getParameterInfo@<X0>(DSPGraph::AUAnalyzer *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v17 = 0;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  int v10 = 104;
  uint64_t result = (*(uint64_t (**)(DSPGraph::AUAnalyzer *, uint64_t, uint64_t, uint64_t, int *, long long *))(*(void *)this + 96))(this, 4, a2, a3, &v10, &v11);
  if (result)
  {
    char v6 = 0;
    *(_DWORD *)a4 = result;
  }
  else
  {
    long long v7 = v16;
    *(_OWORD *)(a4 + 64) = v15;
    *(_OWORD *)(a4 + 80) = v7;
    *(void *)(a4 + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v17;
    long long v8 = v12;
    *(_OWORD *)a4 = v11;
    *(_OWORD *)(a4 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v8;
    long long v9 = v14;
    char v6 = 1;
    *(_OWORD *)(a4 + 32) = v13;
    *(_OWORD *)(a4 + 48) = v9;
  }
  *(unsigned char *)(a4 + 104) = v6;
  return result;
}

void sub_19012C9D4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

AudioUnitParameterValue DSPGraph::AUAnalyzer::getParameter(AudioUnit *this, AudioUnitParameterID a2, AudioUnitScope a3, AudioUnitElement a4)
{
  outCFStringRef Value = 0.0;
  OSStatus Parameter = AudioUnitGetParameter(this[13], a2, a3, a4, &outValue);
  if (Parameter)
  {
    int v6 = Parameter;
    std::string::basic_string[abi:ne180100]<0>(&v9, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Analyzers.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v8, "getParameter");
    std::string::basic_string[abi:ne180100]<0>(&v7, "AudioUnitGetParameter");
    DSPGraph::ThrowException(v6, &v9, 163, &v8, &v7);
  }
  return outValue;
}

void sub_19012CA6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::AUAnalyzer::processBuffer(DSPGraph::AUAnalyzer *this, DSPGraph::Buffer *a2, UInt32 inNumberFrames)
{
  *((void *)a2 + 1) = *(void *)(*(void *)(*(void *)(*(void *)(*(void *)(*((void *)this + 1) + 32) + 16)
                                                          + 8)
                                              + 16)
                                  + 256);
  uint64_t result = AudioUnitProcess(*((AudioUnit *)this + 13), (AudioUnitRenderActionFlags *)a2 + 18, (const AudioTimeStamp *)((char *)a2 + 8), inNumberFrames, *((AudioBufferList **)a2 + 10));
  if (result)
  {
    int v4 = result;
    std::string::basic_string[abi:ne180100]<0>(&v7, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Analyzers.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v6, "processBuffer");
    std::string::basic_string[abi:ne180100]<0>(&v5, "AudioUnitProcess");
    DSPGraph::ThrowException(v4, &v7, 245, &v6, &v5);
  }
  return result;
}

void sub_19012CB64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::AUAnalyzer::resetAnalysis(AudioUnit *this)
{
  uint64_t result = AudioUnitReset(this[13], 0, 0);
  if (result)
  {
    int v2 = result;
    std::string::basic_string[abi:ne180100]<0>(&v5, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Analyzers.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v4, "resetAnalysis");
    std::string::basic_string[abi:ne180100]<0>(&v3, "AudioUnitReset");
    DSPGraph::ThrowException(v2, &v5, 253, &v4, &v3);
  }
  return result;
}

void sub_19012CC38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::AUAnalyzer::isAU(DSPGraph::AUAnalyzer *this)
{
  return 1;
}

const char *DSPGraph::AUAnalyzer::ClassName(DSPGraph::AUAnalyzer *this)
{
  return "AUAnalyzer";
}

void DSPGraph::AUAnalyzer::~AUAnalyzer(void **this)
{
  *this = &unk_1EDF9DB40;
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  JUMPOUT(0x192FC8940);
}

{
  *this = &unk_1EDF9DB40;
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
}

{
  *this = &unk_1EDF9DB40;
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
}

double DSPGraph::TestAnalyzer::getFormatFromUnit@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0u;
  return result;
}

void DSPGraph::TestAnalyzer::getParameterList(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t DSPGraph::TestAnalyzer::setProperty(DSPGraph::TestAnalyzer *this, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, const void *a6)
{
  return 0;
}

uint64_t DSPGraph::TestAnalyzer::getPropertyInfo(DSPGraph::TestAnalyzer *this)
{
  return 0;
}

uint64_t DSPGraph::TestAnalyzer::getProperty(DSPGraph::TestAnalyzer *this, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int *a5, void *a6)
{
  *a5 = 0;
  return 0;
}

double DSPGraph::TestAnalyzer::getParameterInfo@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0u;
  *(unsigned char *)(a1 + 104) = 1;
  return result;
}

double DSPGraph::TestAnalyzer::getParameter(DSPGraph::TestAnalyzer *this)
{
  return 0.0;
}

uint64_t DSPGraph::TestAnalyzer::isAU(DSPGraph::TestAnalyzer *this)
{
  return 0;
}

const char *DSPGraph::TestAnalyzer::ClassName(DSPGraph::TestAnalyzer *this)
{
  return "TestAnalyzer";
}

void DSPGraph::TestAnalyzer::~TestAnalyzer(void **this)
{
  *this = &unk_1EDF9DB40;
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  JUMPOUT(0x192FC8940);
}

{
  *this = &unk_1EDF9DB40;
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
}

{
  *this = &unk_1EDF9DB40;
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
}

uint64_t DSPGraph::AnalyzerBuilder::print(uint64_t result, void *a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(result + 24);
  if (v4)
  {
    unsigned int v5 = a4 + 4;
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v8);
    DSPGraph::print4cc(&v9, *(_DWORD *)(v4 + 52));
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>(&__p, (uint64_t)v10);
    DSPGraph::printi(a2, v5, "%s\n");
  }
  return result;
}

void sub_19012D088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a18);
  _Unwind_Resume(a1);
}

const char *DSPGraph::AnalyzerBuilder::ClassName(DSPGraph::AnalyzerBuilder *this)
{
  return "AnalyzerBuilder";
}

void DSPGraph::AnalyzerBuilder::~AnalyzerBuilder(DSPGraph::AnalyzerBuilder *this)
{
  *(void *)this = &unk_1EDF98450;
  std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>>>::~__hash_table((uint64_t)this + 8);
  JUMPOUT(0x192FC8940);
}

{
  *(void *)this = &unk_1EDF98450;
  std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>>>::~__hash_table((uint64_t)this + 8);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>>>::~__hash_table(uint64_t a1)
{
  int v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      long long v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<unsigned int const,DSPGraph::AnalyzerBuilder::Info>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t DSPGraph::Analyzer::Analyzer(uint64_t a1, int a2, long long *a3, long long *a4)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
  *(void *)a1 = &unk_1EDF9DB40;
  *(_DWORD *)(a1 + 24) = a2;
  *(unsigned char *)(a1 + 28) = 0;
  long long v5 = *a3;
  *(_DWORD *)(a1 + 48) = *((_DWORD *)a3 + 4);
  *(_OWORD *)(a1 + 32) = v5;
  long long v6 = (std::string *)(a1 + 56);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v7 = *a4;
    v6->__r_.__value_.__r.__words[2] = *((void *)a4 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *(_DWORD *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  return a1;
}

void DSPGraph::Analyzer::~Analyzer(void **this)
{
  *this = &unk_1EDF9DB40;
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
}

uint64_t DSPGraph::Analyzer::setWire(uint64_t result, uint64_t a2)
{
  *(void *)(result + 8) = a2;
  return result;
}

uint64_t DSPGraph::Analyzer::setBox(uint64_t this, DSPGraph::Box *a2)
{
  *(void *)(this + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = a2;
  return this;
}

uint64_t DSPGraph::Analyzer::setSerialNo(uint64_t this, uint64_t a2)
{
  *(void *)(this + 88) = a2;
  return this;
}

uint64_t DSPGraph::Analyzer::setBoxOutputPort(uint64_t this, int a2)
{
  *(_DWORD *)(this + 80) = a2;
  return this;
}

void DSPGraph::Analyzer::initialize(DSPGraph::Analyzer *this)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (DSPGraph::getLog(void)::onceToken != -1) {
    dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_11235);
  }
  int v2 = DSPGraph::getLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)DSPGraph::getLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    long long v3 = (void *)((char *)this + 56);
    if (*((char *)this + 79) < 0) {
      long long v3 = (void *)*v3;
    }
    int v4 = 136315138;
    long long v5 = v3;
    _os_log_debug_impl(&dword_18FEC0000, v2, OS_LOG_TYPE_DEBUG, "Analyzer::initialize %s", (uint8_t *)&v4, 0xCu);
  }
}

void DSPGraph::Analyzer::uninitialize(DSPGraph::Analyzer *this)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (DSPGraph::getLog(void)::onceToken != -1) {
    dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_11235);
  }
  int v2 = DSPGraph::getLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)DSPGraph::getLog(void)::gLog, OS_LOG_TYPE_DEBUG))
  {
    long long v3 = (void *)((char *)this + 56);
    if (*((char *)this + 79) < 0) {
      long long v3 = (void *)*v3;
    }
    int v4 = 136315138;
    long long v5 = v3;
    _os_log_debug_impl(&dword_18FEC0000, v2, OS_LOG_TYPE_DEBUG, "Analyzer::uninitialize %s", (uint8_t *)&v4, 0xCu);
  }
}

uint64_t DSPGraph::Analyzer::analyze(uint64_t this, uint64_t a2)
{
  if (*(unsigned char *)(this + 28)) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)this + 64))(this, *(void *)(*(void *)(this + 8) + 56), a2);
  }
  return this;
}

uint64_t DSPGraph::AUAnalyzer::AUAnalyzer(uint64_t a1, int a2, long long *a3, long long *a4)
{
  uint64_t result = DSPGraph::Analyzer::Analyzer(a1, a2, a3, a4);
  *(void *)uint64_t result = &unk_1EDF963B0;
  *(unsigned char *)(result + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
  *(void *)(result + 104) = 0;
  return result;
}

{
  uint64_t result;

  uint64_t result = DSPGraph::Analyzer::Analyzer(a1, a2, a3, a4);
  *(void *)uint64_t result = &unk_1EDF963B0;
  *(unsigned char *)(result + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
  *(void *)(result + 104) = 0;
  return result;
}

void *DSPGraph::TestAnalyzer::TestAnalyzer(uint64_t a1, int a2, long long *a3)
{
  long long v4 = xmmword_1901C6290;
  int v5 = 0;
  uint64_t result = (void *)DSPGraph::Analyzer::Analyzer(a1, a2, &v4, a3);
  *uint64_t result = &unk_1EDF97888;
  return result;
}

{
  void *result;
  long long v4;
  int v5;

  long long v4 = xmmword_1901C6290;
  int v5 = 0;
  uint64_t result = (void *)DSPGraph::Analyzer::Analyzer(a1, a2, &v4, a3);
  *uint64_t result = &unk_1EDF97888;
  return result;
}

uint64_t DSPGraph::AnalyzerBuilder::decompileAnalysis(uint64_t result, const char *a2)
{
  if (*(void *)(result + 24)) {
    DSPGraph::strprintf((DSPGraph *)"analysisDefine ", a2);
  }
  return result;
}

void sub_19012D770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MP4BoxParser_SampleToGroupRunLength::GetSampleToGroupTable(uint64_t a1, char **a2)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 60)
    || (v4 = *(void *)(a1 + 96), uint64_t v5 = (*(void *)(a1 + 104) - v4) >> 3, v6 = *(unsigned int *)(a1 + 80), v5 == v6))
  {
    uint64_t DataSourceBytes = 0;
    goto LABEL_4;
  }
  std::string __p = 0;
  xpc_object_t v62 = 0;
  uint64_t v63 = 0;
  if (v6 >= 0x1000) {
    LODWORD(v19) = 4096;
  }
  else {
    LODWORD(v19) = v6;
  }
  uint64_t v60 = *(void *)(a1 + 88);
  if (v6 > (*(void *)(a1 + 112) - v4) >> 3)
  {
    int16x8_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v6);
    uint64_t v21 = &v20[8 * v5];
    uint64_t v23 = &v20[8 * v22];
    unsigned int v25 = *(char **)(a1 + 96);
    int v24 = *(char **)(a1 + 104);
    unsigned int v26 = v21;
    if (v24 != v25)
    {
      do
      {
        uint64_t v27 = *((void *)v24 - 1);
        v24 -= 8;
        *((void *)v26 - 1) = v27;
        v26 -= 8;
      }
      while (v24 != v25);
      int v24 = *(char **)(a1 + 96);
    }
    *(void *)(a1 + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v26;
    *(void *)(a1 + 104) = v21;
    *(void *)(a1 + 112) = v23;
    if (v24) {
      operator delete(v24);
    }
  }
  buf[0] = 0;
  if (v19)
  {
    std::vector<unsigned char>::__append(&__p, (8 * v19), buf);
    uint64_t v28 = (char *)__p;
  }
  else
  {
    uint64_t v28 = 0;
  }
  char v36 = 1;
  if (v6)
  {
    uint64_t v58 = a2;
    int v59 = v19;
    while (1)
    {
      uint64_t v19 = v19 >= v6 ? v6 : v19;
      unsigned int v37 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      CFStringRef v38 = (char *)__p;
      uint64_t DataSourceBytes = MP4BoxParser::ReadDataSourceBytes(*(MP4BoxParser **)(a1 + 8), v60 + v37, (8 * v19), __p);
      if (DataSourceBytes) {
        break;
      }
      if (v19)
      {
        for (uint64_t i = 0; i != v19; ++i)
        {
          uint64_t v40 = &v28[8 * i];
          uint64_t v42 = *(unsigned int *)v40;
          uint64_t v41 = *((unsigned int *)v40 + 1);
          unsigned int v43 = bswap32(v41);
          if ((_WORD)v43)
          {
            if ((v43 & 0x10000) != 0) {
              *(unsigned char *)(a1 + 77) = 1;
            }
            else {
              *(unsigned char *)(a1 + 7std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 1;
            }
          }
          int v45 = *(void **)(a1 + 104);
          unint64_t v44 = *(void *)(a1 + 112);
          if ((unint64_t)v45 >= v44)
          {
            uint64_t v47 = *(void *)(a1 + 96);
            uint64_t v48 = ((uint64_t)v45 - v47) >> 3;
            if ((unint64_t)(v48 + 1) >> 61) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v49 = v44 - v47;
            uint64_t v50 = v49 >> 2;
            if (v49 >> 2 <= (unint64_t)(v48 + 1)) {
              uint64_t v50 = v48 + 1;
            }
            if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v51 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v51 = v50;
            }
            if (v51) {
              unint64_t v51 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v51);
            }
            else {
              uint64_t v52 = 0;
            }
            int v53 = (void *)(v51 + 8 * v48);
            *int v53 = bswap64(v41 | (v42 << 32));
            id v46 = v53 + 1;
            uint64_t v55 = *(char **)(a1 + 96);
            xpc_object_t v54 = *(char **)(a1 + 104);
            if (v54 != v55)
            {
              do
              {
                uint64_t v56 = *((void *)v54 - 1);
                v54 -= 8;
                *--int v53 = v56;
              }
              while (v54 != v55);
              xpc_object_t v54 = *(char **)(a1 + 96);
            }
            *(void *)(a1 + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v53;
            *(void *)(a1 + 104) = v46;
            *(void *)(a1 + 112) = v51 + 8 * v52;
            if (v54) {
              operator delete(v54);
            }
          }
          else
          {
            *int v45 = bswap64(v41 | (v42 << 32));
            id v46 = v45 + 1;
          }
          *(void *)(a1 + 104) = v46;
        }
      }
      v60 += (8 * v19);
      LODWORD(vstd::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v6 - v19;
      LODWORD(v19) = v59;
      if (!v6)
      {
        uint64_t DataSourceBytes = 0;
        char v36 = 1;
        uint64_t v28 = (char *)__p;
        goto LABEL_75;
      }
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioFormatInfo buf = 136315394;
      long long v65 = "MP4_BoxParser_SampleToGroupRunLength.cpp";
      __int16 v66 = 1024;
      int v67 = 69;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Couldn't read sample to group entries starting", buf, 0x12u);
    }
    char v36 = 0;
    uint64_t v28 = v38;
LABEL_75:
    a2 = v58;
    if (v28) {
      goto LABEL_76;
    }
  }
  else
  {
    uint64_t DataSourceBytes = 0;
    if (v28)
    {
LABEL_76:
      xpc_object_t v62 = v28;
      operator delete(v28);
    }
  }
  if ((v36 & 1) == 0) {
    return DataSourceBytes;
  }
LABEL_4:
  if ((char **)(a1 + 96) != a2)
  {
    uint64_t v9 = *(char **)(a1 + 96);
    uint64_t v8 = *(unsigned char **)(a1 + 104);
    size_t v10 = v8 - v9;
    unint64_t v11 = (v8 - v9) >> 3;
    uint64_t v12 = (uint64_t)a2[2];
    long long v13 = *a2;
    if (v11 > (v12 - (uint64_t)*a2) >> 3)
    {
      if (v13)
      {
        a2[1] = v13;
        operator delete(v13);
        uint64_t v12 = 0;
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
      }
      if ((v10 & 0x8000000000000000) != 0) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v14 = v12 >> 2;
      if (v12 >> 2 <= v11) {
        uint64_t v14 = (v8 - v9) >> 3;
      }
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v14;
      }
      if (v15 >> 61) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      long long v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v15);
      long long v13 = v16;
      *a2 = v16;
      a2[1] = v16;
      a2[2] = &v16[8 * v17];
      if (v8 != v9) {
        memmove(v16, v9, v8 - v9);
      }
      uint64_t v18 = a2 + 1;
      goto LABEL_37;
    }
    xpc_object_t v30 = a2[1];
    uint64_t v18 = a2 + 1;
    id v29 = v30;
    size_t v31 = v30 - v13;
    unint64_t v32 = (v30 - v13) >> 3;
    if (v32 >= v11)
    {
      if (v8 == v9)
      {
LABEL_37:
        *uint64_t v18 = &v13[v10];
        return DataSourceBytes;
      }
      xpc_object_t v34 = v13;
      uint64_t v35 = v9;
    }
    else
    {
      uint64_t v33 = &v9[8 * v32];
      if (v29 != v13)
      {
        memmove(v13, v9, v31);
        long long v13 = *v18;
      }
      size_t v10 = v8 - v33;
      if (v8 == v33) {
        goto LABEL_37;
      }
      xpc_object_t v34 = v13;
      uint64_t v35 = v33;
    }
    memmove(v34, v35, v10);
    goto LABEL_37;
  }
  return DataSourceBytes;
}

void sub_19012DBFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MP4BoxParser_SampleToGroupRunLength::Init(MP4BoxParser **this)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = MP4BoxParser_Full::Initialize((MP4BoxParser_Full *)this);
  if (v2) {
    return v2;
  }
  if (*((_DWORD *)this + 5) != 1935828848) {
    return 4294967294;
  }
  uint64_t v3 = (*((unsigned int (**)(MP4BoxParser **))*this + 3))(this);
  if (*((unsigned char *)this + 56)) {
    unint64_t v4 = 12;
  }
  else {
    unint64_t v4 = 8;
  }
  unint64_t v5 = (unint64_t)this[3];
  unsigned int v6 = (*((uint64_t (**)(MP4BoxParser **))*this + 3))(this);
  unint64_t v7 = (unint64_t)this[3];
  if (v5 <= v6 || v7 < v4)
  {
    if (v7 > (*((unsigned int (**)(MP4BoxParser **))*this + 3))(this) && (unint64_t)this[3] >= 4)
    {
      uint64_t DataSourceBytes = MP4BoxParser::ReadDataSourceBytes(this[1], v3, 4uLL, v24);
      if (DataSourceBytes)
      {
        uint64_t v2 = DataSourceBytes;
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          int v20 = 136315394;
          uint64_t v21 = "MP4_BoxParser_SampleToGroupRunLength.cpp";
          __int16 v22 = 1024;
          int v23 = 116;
          unint64_t v11 = MEMORY[0x1E4F14500];
          uint64_t v12 = "%25s:%-5d  couldn't read grouping type";
LABEL_19:
          _os_log_impl(&dword_18FEC0000, v11, OS_LOG_TYPE_ERROR, v12, (uint8_t *)&v20, 0x12u);
          return v2;
        }
        return v2;
      }
      unsigned int v9 = v24[0];
    }
    *((_DWORD *)this + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = bswap32(v9);
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
LABEL_30:
      uint64_t v2 = 0;
      *((unsigned char *)this + 60) = 0;
      return v2;
    }
    int v20 = 136315394;
    uint64_t v21 = "MP4_BoxParser_SampleToGroupRunLength.cpp";
    __int16 v22 = 1024;
    int v23 = 120;
    uint64_t v17 = MEMORY[0x1E4F14500];
    uint64_t v18 = "%25s:%-5d  'sbgp' box is too small for its basic contents";
LABEL_29:
    _os_log_impl(&dword_18FEC0000, v17, OS_LOG_TYPE_ERROR, v18, (uint8_t *)&v20, 0x12u);
    goto LABEL_30;
  }
  uint64_t v13 = MP4BoxParser::ReadDataSourceBytes(this[1], v3, v4, v24);
  if (!v13)
  {
    *((_DWORD *)this + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = bswap32(v24[0]);
    uint64_t v14 = 1;
    if (*((unsigned char *)this + 56))
    {
      *((unsigned char *)this + 68) = 1;
      *((_DWORD *)this + 18) = bswap32(v24[1]);
      uint64_t v14 = 2;
    }
    unsigned int v15 = bswap32(v24[v14]);
    *((_DWORD *)this + 20) = v15;
    this[11] = (MP4BoxParser *)v4;
    unint64_t v16 = (unint64_t)this[3];
    if (v16 > (*((unsigned int (**)(MP4BoxParser **))*this + 3))(this)
      && (unint64_t)this[3] >= v4 + 8 * v15)
    {
      uint64_t v2 = 0;
      *((unsigned char *)this + 60) = 1;
      return v2;
    }
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_30;
    }
    int v20 = 136315394;
    uint64_t v21 = "MP4_BoxParser_SampleToGroupRunLength.cpp";
    __int16 v22 = 1024;
    int v23 = 141;
    uint64_t v17 = MEMORY[0x1E4F14500];
    uint64_t v18 = "%25s:%-5d  'sbgp' box is too small for its sample to group entries";
    goto LABEL_29;
  }
  uint64_t v2 = v13;
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v20 = 136315394;
    uint64_t v21 = "MP4_BoxParser_SampleToGroupRunLength.cpp";
    __int16 v22 = 1024;
    int v23 = 124;
    unint64_t v11 = MEMORY[0x1E4F14500];
    uint64_t v12 = "%25s:%-5d  Couldn't read box fields";
    goto LABEL_19;
  }
  return v2;
}

void MP4BoxParser_SampleToGroupRunLength::~MP4BoxParser_SampleToGroupRunLength(MP4BoxParser_SampleToGroupRunLength *this)
{
  MP4BoxParser_SampleToGroupRunLength::~MP4BoxParser_SampleToGroupRunLength(this);
  JUMPOUT(0x192FC8940);
}

{
  void *v2;
  uint64_t v3;

  *(void *)this = off_1EDF94B60;
  uint64_t v2 = (void *)*((void *)this + 12);
  if (v2)
  {
    *((void *)this + 13) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EDF8DA18;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
}

uint64_t NextAudioStream::ParseHeader(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 236);
  if (v4 > 58)
  {
    if (v4 == 92)
    {
      uint64_t v16 = *(void *)(a1 + 8);
      uint64_t v20 = *(void *)(v16 + 96);
      goto LABEL_25;
    }
    if (v4 == 59)
    {
      unsigned int v7 = *(_DWORD *)(a1 + 256);
      uint64_t v8 = *(unsigned __int8 **)(a1 + 264);
      goto LABEL_11;
    }
LABEL_34:
    uint64_t result = 0;
    goto LABEL_53;
  }
  if (v4 == -1) {
    return 0;
  }
  if (v4) {
    goto LABEL_34;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  v33[0] = 1;
  if (!*(unsigned char *)(v5 + 104))
  {
    *(unsigned char *)(v5 + 104) = 1;
    unsigned int v6 = *(void (**)(void, void, uint64_t, unsigned int *))(v5 + 24);
    if (v6) {
      v6(*(void *)(v5 + 40), *(unsigned int *)(v5 + 8), 1717988724, v33);
    }
  }
  unsigned int v7 = 28;
  *(_DWORD *)(a1 + 25std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 28;
  uint64_t v8 = (unsigned __int8 *)(a1 + 332);
  *(void *)(a1 + 264) = a1 + 332;
LABEL_11:
  v33[0] = v7;
  StreamBuffer::Copy((void *)(*(void *)(a1 + 8) + 72), v33, v8);
  unsigned int v9 = v33[0];
  int v10 = *(_DWORD *)(a1 + 256);
  *(void *)(a1 + 264) += v33[0];
  int v11 = v10 - v9;
  *(_DWORD *)(a1 + 25std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v11;
  if (v11)
  {
    uint64_t result = 0;
    int v25 = 59;
    goto LABEL_54;
  }
  int8x16_t v12 = vrev32q_s8(*(int8x16_t *)(a1 + 332));
  *(int8x16_t *)(a1 + 332) = v12;
  int8x8_t v13 = vrev32_s8(*(int8x8_t *)(a1 + 348));
  *(int8x8_t *)(a1 + 348) = v13;
  if (v13.i32[0] >= 0xFFFF0000) {
    *(_DWORD *)(a1 + 348) = v13.u16[0];
  }
  *(void *)(a1 + 104) = v12.u32[1];
  uint64_t result = ASBDfromSNDSoundStruct((_DWORD *)(a1 + 332), (uint64_t)v33);
  if (result == 1685348671) {
    goto LABEL_52;
  }
  if (result)
  {
LABEL_53:
    int v25 = -1;
    goto LABEL_54;
  }
  if (!AudioFileObject::IsDataFormatValid((AudioFileObject *)v33, v15))
  {
LABEL_52:
    *(unsigned char *)(a1 + 177) = 1;
    uint64_t result = 1685348671;
    goto LABEL_53;
  }
  *(_DWORD *)(a1 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 1315264596;
  (*(void (**)(uint64_t, unsigned int *))(*(void *)a1 + 56))(a1, v33);
  (*(void (**)(uint64_t, void))(*(void *)a1 + 96))(a1, *(unsigned int *)(a1 + 340));
  (*(void (**)(uint64_t, void))(*(void *)a1 + 80))(a1, *(_DWORD *)(a1 + 340) / v34);
  *(_DWORD *)(a1 + 112) = v34;
  uint64_t v16 = *(void *)(a1 + 8);
  int v35 = 1;
  if (!*(unsigned char *)(v16 + 105))
  {
    *(unsigned char *)(v16 + 105) = 1;
    uint64_t v17 = *(void (**)(void, void, uint64_t, int *))(v16 + 24);
    if (v17)
    {
      v17(*(void *)(v16 + 40), *(unsigned int *)(v16 + 8), 1684434292, &v35);
      uint64_t v16 = *(void *)(a1 + 8);
    }
  }
  int v35 = 1;
  uint64_t v18 = *(void (**)(void, void, uint64_t, int *))(v16 + 24);
  if (v18)
  {
    v18(*(void *)(v16 + 40), *(unsigned int *)(v16 + 8), 1650683508, &v35);
    uint64_t v16 = *(void *)(a1 + 8);
    uint64_t v19 = *(void (**)(void, void, uint64_t, int *))(v16 + 24);
    int v35 = 1;
    if (v19)
    {
      v19(*(void *)(v16 + 40), *(unsigned int *)(v16 + 8), 1685022310, &v35);
      uint64_t v16 = *(void *)(a1 + 8);
    }
  }
  else
  {
    int v35 = 1;
  }
  uint64_t v20 = *(unsigned int *)(a1 + 336);
  *(void *)(v16 + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v20;
LABEL_25:
  uint64_t v21 = *(void *)(v16 + 88);
  uint64_t v22 = v21 + *(unsigned int *)(v16 + 80);
  if (v20 < v21 || v22 <= v20 || v22 - v20 == 0)
  {
    uint64_t result = 0;
    int v25 = 92;
LABEL_54:
    *(_DWORD *)(a1 + 23std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v25;
    return result;
  }
  v33[0] = 1;
  if (!*(_DWORD *)(v16 + 112))
  {
    *(_DWORD *)(v16 + 112) = 1;
    unsigned int v26 = *(void (**)(void, void, uint64_t, unsigned int *))(v16 + 24);
    if (v26)
    {
      v26(*(void *)(v16 + 40), *(unsigned int *)(v16 + 8), 1919247481, v33);
      uint64_t v16 = *(void *)(a1 + 8);
      uint64_t v21 = *(void *)(v16 + 88);
      uint64_t v22 = v21 + *(unsigned int *)(v16 + 80);
    }
  }
  uint64_t v27 = 0;
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = AudioFileStreamObject::GeneratePackets;
  *(void *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
  uint64_t v28 = *(void *)(v16 + 96);
  BOOL v29 = v28 < v21 || v22 <= v28;
  int v30 = v29;
  int v31 = v22 - v28;
  if (!v29 && v31) {
    uint64_t v27 = *(void *)(v16 + 72) + (v28 - v21);
  }
  uint64_t result = 0;
  *(void *)(a2 + 32) = v27;
  if (v30) {
    int v32 = 0;
  }
  else {
    int v32 = v31;
  }
  *(_DWORD *)(a2 + 24) = v32;
  return result;
}

void NextAudioStream::~NextAudioStream(NextAudioStream *this)
{
  AudioFileStreamObject::~AudioFileStreamObject(this);
  JUMPOUT(0x192FC8940);
}

const char *acv2::RamstadSRCWrapper::KernelName(acv2::RamstadSRCWrapper *this)
{
  return "RamstadSRCWrapper";
}

uint64_t acv2::RamstadSRCWrapper::Reset(RamstadSRC **this)
{
  return 0;
}

uint64_t acv2::RamstadSRCWrapper::GetNumberOfOutputFrames(RamstadSRC **this, uint64_t a2)
{
  int v3 = 0;
  return RamstadSRC::outputSamplesForInputSamples(this[3], a2, &v3);
}

uint64_t acv2::RamstadSRCWrapper::GetNumberOfSourceFrames(RamstadSRC **this)
{
  return RamstadSRC::inputSamplesForOutputSamples(this[3]);
}

uint64_t acv2::RamstadSRCWrapper::GetMinimumPhase(acv2::RamstadSRCWrapper *this)
{
  return 1;
}

double acv2::RamstadSRCWrapper::GetInitialPhase(acv2::RamstadSRCWrapper *this)
{
  return 0.0;
}

uint64_t acv2::RamstadSRCWrapper::GetPrimeMethod(acv2::RamstadSRCWrapper *this)
{
  return 2;
}

uint64_t acv2::RamstadSRCWrapper::PrimeMethodWritable(acv2::RamstadSRCWrapper *this)
{
  return 0;
}

uint64_t acv2::RamstadSRCWrapper::ProduceOutput(acv2::RamstadSRCWrapper *this, ACAudioSpan *a2)
{
  int v3 = *((_DWORD *)this + 20);
  uint64_t v4 = *((void *)this + 1);
  LOBYTE(v55) = 0;
  BYTE4(v55) = 1;
  if (*(_DWORD *)a2 < *((_DWORD *)a2 + 1))
  {
    unsigned int v6 = (unsigned int *)(v4 + 168);
    while (1)
    {
      ACBaseAudioSpan::setAfter(v4 + 168, (unsigned int *)a2);
      ACBaseAudioSpan::copyEmptyMetadataEventsFrom((uint64_t *)(v4 + 168), a2);
      unsigned int v7 = *(_DWORD *)(v4 + 172);
      unsigned int v8 = (*(uint64_t (**)(acv2::RamstadSRCWrapper *, void))(*(void *)this + 80))(this, v7);
      acv2::AudioConverterChain::ObtainInput((acv2::AudioConverterChain *)&v56, *(acv2::AudioConverterBase **)(*((void *)this + 1) + 8), *((void *)this + 1), v8);
      unsigned int v10 = v58;
      if (v58) {
        break;
      }
      int v11 = v56;
      unsigned int v12 = *(_DWORD *)v56;
      unsigned int v13 = v7;
      if (*(_DWORD *)v56 < v8) {
        unsigned int v13 = (*(uint64_t (**)(acv2::RamstadSRCWrapper *, void))(*(void *)this + 88))(this, *(unsigned int *)v56);
      }
      if (v12 | v13)
      {
        uint64_t v14 = (acv2::AudioConverterBase *)*((void *)this + 11);
        if (v14) {
          acv2::AudioConverterBase::writeCapture(v14, v11, v9);
        }
        if (v7 >= v13) {
          unsigned int v7 = v13;
        }
        if (v3 == 1)
        {
          unsigned int v15 = v12 ? *(const float **)(*((void *)v11 + 2) + 16) : 0;
          signed int v23 = RamstadSRC::processMono(*((RamstadSRC **)this + 3), v15, *(float **)(*(void *)(v4 + 184) + 16));
        }
        else
        {
          int v17 = *(_DWORD *)(v4 + 28);
          if (v3 == 2)
          {
            if ((v17 & 0x20) != 0)
            {
              if (v12)
              {
                uint64_t v24 = *((void *)v11 + 2);
                uint64_t v18 = *(const float **)(v24 + 16);
                uint64_t v19 = *(const float **)(v24 + 32);
              }
              else
              {
                uint64_t v18 = 0;
                uint64_t v19 = 0;
              }
              int v28 = 1;
            }
            else
            {
              if (v12)
              {
                uint64_t v18 = *(const float **)(*((void *)v11 + 2) + 16);
                uint64_t v19 = v18 + 1;
              }
              else
              {
                uint64_t v18 = 0;
                uint64_t v19 = 0;
              }
              int v28 = 2;
            }
            uint64_t v30 = *(void *)(v4 + 184);
            int v31 = *(float **)(v30 + 16);
            if ((*(unsigned char *)(v4 + 68) & 0x20) != 0)
            {
              int v32 = *(float **)(v30 + 32);
              int v33 = 1;
            }
            else
            {
              int v32 = v31 + 1;
              int v33 = 2;
            }
            int v34 = v12 >= v8 ? v8 : v12;
            signed int v23 = RamstadSRC::processStereo(*((RamstadSRC **)this + 3), v18, v19, v31, v32, v34, v7, v28, v33);
          }
          else
          {
            if ((v17 & 0x20) != 0)
            {
              uint64_t v25 = *((unsigned int *)this + 20);
              if (v12)
              {
                if ((int)v25 >= 1)
                {
                  uint64_t v26 = 0;
                  uint64_t v27 = 16;
                  do
                  {
                    *(void *)(*((void *)this + 4) + v2std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = *(void *)(*((void *)v11 + 2) + v27);
                    v26 += 8;
                    v27 += 16;
                  }
                  while (8 * v25 != v26);
                }
              }
              else if ((int)v25 >= 1)
              {
                uint64_t v35 = 0;
                do
                {
                  *(void *)(*((void *)this + 4) + v35) = 0;
                  v35 += 8;
                }
                while (8 * v25 != v35);
              }
            }
            else
            {
              uint64_t v20 = *((unsigned int *)this + 20);
              if (v12)
              {
                if ((int)v20 >= 1)
                {
                  uint64_t v21 = 0;
                  uint64_t v22 = *(void *)(*((void *)v11 + 2) + 16);
                  do
                  {
                    *(void *)(*((void *)this + 4) + v21) = v22;
                    v21 += 8;
                    v22 += 4;
                  }
                  while (8 * v20 != v21);
                }
              }
              else if ((int)v20 >= 1)
              {
                uint64_t v29 = 0;
                do
                {
                  *(void *)(*((void *)this + 4) + v29) = 0;
                  v29 += 8;
                }
                while (8 * v20 != v29);
              }
              LODWORD(v25) = v20;
            }
            if ((*(unsigned char *)(v4 + 68) & 0x20) != 0)
            {
              if ((int)v25 >= 1)
              {
                uint64_t v38 = 0;
                uint64_t v39 = 16;
                do
                {
                  *(void *)(*((void *)this + 7) + v38) = *(void *)(*(void *)(v4 + 184) + v39);
                  v38 += 8;
                  v39 += 16;
                }
                while (8 * v25 != v38);
              }
            }
            else if ((int)v25 >= 1)
            {
              uint64_t v36 = 0;
              uint64_t v37 = *(void *)(*(void *)(v4 + 184) + 16);
              do
              {
                *(void *)(*((void *)this + 7) + v3std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v37;
                v36 += 8;
                v37 += 4;
              }
              while (8 * v25 != v36);
            }
            signed int v23 = RamstadSRC::processMulti(*((RamstadSRC **)this + 3), *((const float *const **)this + 4), *((float *const **)this + 7));
          }
        }
        signed int v16 = v23;
      }
      else
      {
        signed int v16 = 0;
        unsigned int v7 = 0;
      }
      int v40 = *(_DWORD *)(*((void *)this + 1) + 72);
      *(_DWORD *)(v4 + 168) = v7;
      *(_DWORD *)(v4 + 17std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = ACBaseAudioSpan::sizeOfFirstPackets((ACBaseAudioSpan *)(v4 + 168), v7, v40);
      uint64_t v42 = (acv2::AudioConverterBase *)*((void *)this + 12);
      if (v42) {
        acv2::AudioConverterBase::writeCapture(v42, (AudioConverterCapturer *)(v4 + 168), v41);
      }
      unsigned int v10 = acv2::AudioConverterChain::ConsumedInput(*(void **)(*((void *)this + 1) + 8), *(_DWORD *)v11, *(uint64_t *)v57, v16);
      if (v10) {
        break;
      }
      uint64_t v54 = (v16 > 0) | 0x100000000;
      caulk::expected<BOOL,int>::value((uint64_t)&v54);
      if ((_BYTE)v54)
      {
        BOOL v52 = 1;
      }
      else
      {
        caulk::expected<BOOL,int>::value((uint64_t)&v55);
        BOOL v52 = (_BYTE)v55 != 0;
      }
      LOBYTE(v55) = v52;
      if (!BYTE4(v55))
      {
        char v43 = 1;
LABEL_67:
        BYTE4(v55) = v43;
      }
LABEL_68:
      if (BYTE4(v54))
      {
        caulk::expected<BOOL,int>::value((uint64_t)&v54);
        BOOL v44 = (_BYTE)v54 != 0;
      }
      else
      {
        BOOL v44 = 0;
      }
      int v45 = *v6;
      if (v44 || v45)
      {
        int v46 = *(_DWORD *)(v4 + 176);
        unsigned int v47 = *(_DWORD *)a2;
        uint64_t v48 = *((unsigned int *)a2 + 2);
        if (v45)
        {
          uint64_t v49 = *((void *)a2 + 4);
          if (v49)
          {
            unsigned int v50 = *(_DWORD *)a2;
            uint64_t v51 = *v6;
            do
            {
              *(void *)(v49 + 16 * v50++) += v48;
              --v51;
            }
            while (v51);
          }
        }
        *(_DWORD *)a2 = v47 + v45;
        *((_DWORD *)a2 + 2) = v48 + v46;
        ACBaseAudioSpan::copyFilledMetadataEventsFrom((uint64_t)a2, v4 + 168, 0);
        if (BYTE4(v55))
        {
          if (*(_DWORD *)a2 < *((_DWORD *)a2 + 1)) {
            continue;
          }
        }
      }
      goto LABEL_85;
    }
    uint64_t v54 = v10;
    LODWORD(v55) = v10;
    if (!BYTE4(v55)) {
      goto LABEL_68;
    }
    char v43 = 0;
    goto LABEL_67;
  }
LABEL_85:
  ACBaseAudioSpan::completeMetadataFrame((uint64_t *)a2);
  return v55;
}

void acv2::RamstadSRCWrapper::~RamstadSRCWrapper(acv2::RamstadSRCWrapper *this)
{
  acv2::RamstadSRCWrapper::~RamstadSRCWrapper(this);
  JUMPOUT(0x192FC8940);
}

{
  void *v2;
  void *v3;

  *(void *)this = &unk_1EDF95788;
  std::unique_ptr<AudioConverterCapturer>::reset[abi:ne180100]((const std::__fs::filesystem::path **)this + 12, 0);
  std::unique_ptr<AudioConverterCapturer>::reset[abi:ne180100]((const std::__fs::filesystem::path **)this + 11, 0);
  uint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + 8) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    operator delete(v3);
  }
  std::unique_ptr<RamstadSRC>::reset[abi:ne180100]((uint64_t *)this + 3, 0);
}

void *std::vector<float *>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unsigned int v6 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(a2);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v7];
    unsigned int v8 = &v6[a2];
    uint64_t v9 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v9 -= 8;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_19012EB24(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void DSPGraph::PropertyTap::initialize(DSPGraph::PropertyTap *this)
{
  unsigned int v2 = (*(uint64_t (**)(void, void, void, void))(**(void **)this + 296))(*(void *)this, *((unsigned int *)this + 2), *((unsigned int *)this + 3), *((unsigned int *)this + 4));
  if (!v3)
  {
    int v12 = v2;
    std::string::basic_string[abi:ne180100]<0>(&v15, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v14, "initialize");
    std::string::basic_string[abi:ne180100]<0>(&v13, "getPropertyInfo failed");
    DSPGraph::ThrowException(v12, &v15, 809, &v14, &v13);
  }
  uint64_t v4 = (unsigned char *)*((void *)this + 5);
  if (*((void *)this + 6) - (void)v4 != v2)
  {
    *((void *)this + std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v4;
    uint64_t v5 = v2;
    if (v2)
    {
      unint64_t v6 = *((void *)this + 7) - (void)v4;
      if (v6 >= v2)
      {
        int v11 = &v4[v2];
        do
        {
          *v4++ = 0;
          --v5;
        }
        while (v5);
        *((void *)this + std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v11;
      }
      else
      {
        uint64_t v7 = 2 * v6;
        if (2 * v6 <= v2) {
          uint64_t v7 = v2;
        }
        if (v6 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v8 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v8 = v7;
        }
        uint64_t v9 = operator new(v8);
        uint64_t v10 = 0;
        do
          v9[v10++] = 0;
        while (v5 != v10);
        *((void *)this + 5) = v9;
        *((void *)this + std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = &v9[v5];
        *((void *)this + 7) = &v9[v8];
        if (v4)
        {
          operator delete(v4);
        }
      }
    }
  }
}

void sub_19012ECB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

unint64_t caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::remove(unint64_t a1, int a2)
{
  unint64_t v4 = a1 + 224;
  caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::begin_traversal();
  int v18 = a2;
  uint64_t v5 = -1;
  uint64_t v6 = 40;
  do
  {
    unint64_t v7 = atomic_load((unint64_t *)(a1 + v6));
    ++v5;
    v6 += 16;
  }
  while (*(unsigned char *)((v7 & 0xFFFFFFFFFFFFFFFCLL) + 14) != 2);
  unint64_t v8 = a1;
  if (v5)
  {
    unint64_t v8 = a1;
    do
      unint64_t v8 = caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::search_right<caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::key_lt &>(a1, v5--, v8, &v18);
    while (v5);
  }
  unint64_t v9 = caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::search_right<caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::key_lt &>(a1, 0, v8, &v18);
  unint64_t v11 = *(unsigned int *)(v10 + 8);
  if (v11 == a2)
  {
    uint64_t v12 = v10;
    unint64_t v13 = caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::try_flag_node(a1, 0, v9, v10);
    uint64_t v15 = v14;
    if (!v14) {
      caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::help_flagged(a1, 0, v13, v12);
    }
    if ((v15 & 0xFF00000000) != 0 && v12)
    {
      int v17 = a2;
      caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::search_to_level<caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::key_le>(a1, &v17, 0);
    }
  }
  return caulk::concurrent::details::node_allocator<unsigned int,DSPGraph::Analyzer *,10ul,(caulk::concurrent::skiplist_options)0>::end_traversal(v4, v11);
}

unint64_t caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::search_to_level<caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::key_le>(unint64_t a1, _DWORD *a2, unint64_t a3)
{
  unint64_t v6 = -1;
  uint64_t v7 = 40;
  do
  {
    do
    {
      ++v6;
      unint64_t v8 = atomic_load((unint64_t *)(a1 + v7));
      v7 += 16;
    }
    while (v6 < a3);
  }
  while (*(unsigned char *)((v8 & 0xFFFFFFFFFFFFFFFCLL) + 14) != 2);
  unint64_t v9 = a1;
  if (v6 > a3)
  {
    unint64_t v9 = a1;
    do
      unint64_t v9 = caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::search_right<caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::key_le &>(a1, v6--, v9, a2);
    while (v6 > a3);
  }
  return caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::search_right<caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::key_le &>(a1, a3, v9, a2);
}

unint64_t caulk::concurrent::details::node_allocator<unsigned int,DSPGraph::Analyzer *,10ul,(caulk::concurrent::skiplist_options)0>::free_node_chain_now(unint64_t result, unint64_t a2)
{
  if (a2)
  {
    unint64_t v2 = a2;
    unint64_t v3 = result;
    unint64_t v4 = result + 40;
    do
    {
      unint64_t v5 = atomic_load((unint64_t *)(v2 + 16));
      uint64_t v6 = *(void *)(v3 + 32);
      if (*(unsigned char *)(v6 + 32))
      {
        if (!*(unsigned char *)(v2 + 14)) {
          (*(void (**)(unint64_t, unint64_t))v6)(v4, v2);
        }
      }
      uint64_t result = caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<unsigned int,DSPGraph::Analyzer *,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>::deallocate(*(caulk::alloc::base_allocator **)(v3 + 16), (unint64_t *)v2, *(void *)&caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<unsigned int,DSPGraph::Analyzer *,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>::Sizes[8 * *(unsigned __int8 *)(v2 + 12) - 8]);
      unint64_t v2 = v5;
    }
    while (v5);
  }
  return result;
}

unint64_t caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<unsigned int,DSPGraph::Analyzer *,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>::deallocate(caulk::alloc::base_allocator *a1, unint64_t *a2, unint64_t a3)
{
  _X4 = a2;
  uint64_t v4 = 0;
  while (*(void *)&caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<unsigned int,DSPGraph::Analyzer *,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>::Sizes[8 * v4] < a3)
  {
    if (++v4 == 10) {
      caulk::alloc::base_allocator::bad_dealloc(a1);
    }
  }
  _X2 = 0;
  _X3 = 0;
  uint64_t v7 = (uint64_t)a1 + 32 * v4 + 64;
  __asm { CASPAL          X2, X3, X2, X3, [X8] }
  atomic_store(_X2, a2);
  _X1 = 0;
  __asm { CASPAL          X0, X1, X4, X5, [X8] }
  if (result != _X2)
  {
    do
    {
      atomic_store(result, _X4);
      _X3 = 0;
      __asm { CASPAL          X2, X3, X4, X5, [X8] }
      unint64_t v17 = _X2 ^ result;
      unint64_t result = _X2;
    }
    while (v17);
  }
  atomic_fetch_add((atomic_ullong *volatile)(v7 + 16), 1uLL);
  return result;
}

unint64_t caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::search_right<caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::key_le &>(unint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4)
{
  unint64_t v4 = a3;
  unint64_t v5 = atomic_load((unint64_t *)(a3 + 16 * a2 + 24));
  unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFCLL;
  if (*a4 >= *(_DWORD *)((v5 & 0xFFFFFFFFFFFFFFFCLL) + 8))
  {
    do
    {
      char v10 = atomic_load((unint64_t *)(v6 + 24));
      if (v10)
      {
        unint64_t v4 = caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::try_flag_node(a1, a2, v4, v6);
        if (!v11) {
          caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::help_flagged(a1, a2, v4, v6);
        }
      }
      else
      {
        unint64_t v4 = v6;
      }
      unint64_t v12 = atomic_load((unint64_t *)(v4 + 16 * a2 + 24));
      unint64_t v6 = v12 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while (*a4 >= *(_DWORD *)((v12 & 0xFFFFFFFFFFFFFFFCLL) + 8));
  }
  return v4;
}

unint64_t caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::try_flag_node(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v8 = a4 | 2;
  do
  {
    unint64_t v9 = (unint64_t *)(a3 + 16 * a2 + 24);
    unint64_t v10 = atomic_load(v9);
    if (v10 == v8) {
      break;
    }
    uint64_t v11 = a4;
    atomic_compare_exchange_strong((atomic_ullong *volatile)v9, (unint64_t *)&v11, v8);
    if (v11 == a4 || v11 == v8) {
      break;
    }
    char v12 = atomic_load(v9);
    if (v12)
    {
      do
      {
        a3 = atomic_load((unint64_t *)(a3 + 16 * a2 + 32));
        char v13 = atomic_load((unint64_t *)(a3 + 16 * a2 + 24));
      }
      while ((v13 & 1) != 0);
    }
    unsigned int v14 = *(_DWORD *)(a4 + 8);
    while (1)
    {
      unint64_t v15 = atomic_load((unint64_t *)(a3 + 16 * a2 + 24));
      unint64_t v16 = v15 & 0xFFFFFFFFFFFFFFFCLL;
      if (v14 <= *(_DWORD *)((v15 & 0xFFFFFFFFFFFFFFFCLL) + 8)) {
        break;
      }
      char v17 = atomic_load((unint64_t *)(v16 + 24));
      if (v17)
      {
        a3 = caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::try_flag_node(a1, a2, a3, v16);
        if (!v18) {
          caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::help_flagged(a1, a2, a3, v16);
        }
      }
      else
      {
        a3 = v16;
      }
    }
  }
  while (v16 == a4);
  return a3;
}

unint64_t caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::help_flagged(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  _X20 = a4;
  unint64_t v7 = result;
  uint64_t v8 = a4 + 16 * a2;
  unint64_t v9 = (unint64_t *)(v8 + 24);
  atomic_store(a3, (unint64_t *)(v8 + 32));
  while (1)
  {
    char v10 = atomic_load(v9);
    if (v10) {
      break;
    }
    unint64_t v11 = atomic_load(v9);
    unint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFCLL;
    atomic_compare_exchange_strong((atomic_ullong *volatile)v9, &v12, v12 | 1);
    if ((v12 & 2) != 0) {
      unint64_t result = caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::help_flagged(v7, a2, _X20, v12 & 0xFFFFFFFFFFFFFFFCLL);
    }
  }
  unint64_t v13 = atomic_load(v9);
  uint64_t v14 = _X20 | 2;
  atomic_compare_exchange_strong((atomic_ullong *volatile)(a3 + 16 * a2 + 24), (unint64_t *)&v14, v13 & 0xFFFFFFFFFFFFFFFCLL);
  if (v14 == (_X20 | 2) && atomic_fetch_add((atomic_uchar *volatile)(_X20 + 15), 0xFFu) == 1)
  {
    _X2 = 0;
    _X3 = 0;
    __asm { CASPAL          X2, X3, X2, X3, [X8] }
    atomic_store(_X2, (unint64_t *)(_X20 + 16));
    _X1 = 0;
    __asm { CASPAL          X0, X1, X20, X21, [X8] }
    if (result != _X2)
    {
      do
      {
        atomic_store(result, (unint64_t *)(_X20 + 16));
        _X3 = 0;
        __asm { CASPAL          X2, X3, X20, X21, [X8] }
        unint64_t v25 = _X2 ^ result;
        unint64_t result = _X2;
      }
      while (v25);
    }
  }
  return result;
}

unint64_t caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::search_right<caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::key_lt &>(unint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4)
{
  unint64_t v4 = a3;
  unint64_t v5 = atomic_load((unint64_t *)(a3 + 16 * a2 + 24));
  unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFCLL;
  if (*a4 > *(_DWORD *)((v5 & 0xFFFFFFFFFFFFFFFCLL) + 8))
  {
    do
    {
      char v10 = atomic_load((unint64_t *)(v6 + 24));
      if (v10)
      {
        unint64_t v4 = caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::try_flag_node(a1, a2, v4, v6);
        if (!v11) {
          caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::help_flagged(a1, a2, v4, v6);
        }
      }
      else
      {
        unint64_t v4 = v6;
      }
      unint64_t v12 = atomic_load((unint64_t *)(v4 + 16 * a2 + 24));
      unint64_t v6 = v12 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while (*a4 > *(_DWORD *)((v12 & 0xFFFFFFFFFFFFFFFCLL) + 8));
  }
  return v4;
}

uint64_t DSPGraph::Box::decompileAnalyzers(uint64_t result, const char *a2, char a3)
{
  uint64_t v3 = *(void *)(result + 312);
  if (v3 != *(void *)(result + 320))
  {
    if ((a3 & 1) == 0) {
      DSPGraph::strprintf((DSPGraph *)"analysis ", a2);
    }
    DSPGraph::strprintf((DSPGraph *)"analysis %qu", a2, *(void *)(*(void *)v3 + 88));
  }
  return result;
}

void sub_19012F70C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Box::decompileAntecedents(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 128);
  if (v1)
  {
    uint64_t v2 = result;
    uint64_t v3 = (char **)(result + 32);
    uint64_t v4 = *(void *)(v1 + 16);
    unint64_t v5 = (char *)(v4 + 32);
    if (*(char *)(v4 + 55) < 0) {
      unint64_t v5 = *(char **)v5;
    }
    std::string::basic_string[abi:ne180100]<0>(v12, v5);
    DSPGraph::asDecompileString(v12, &v13);
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v6 = &v13;
    }
    else {
      unint64_t v6 = (std::string *)v13.__r_.__value_.__r.__words[0];
    }
    unint64_t v7 = (char *)v3;
    if (*(char *)(v2 + 55) < 0) {
      unint64_t v7 = *v3;
    }
    std::string::basic_string[abi:ne180100]<0>(v10, v7);
    DSPGraph::asDecompileString(v10, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFTypeRef p_p = &__p;
    }
    else {
      CFTypeRef p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    DSPGraph::strprintf((DSPGraph *)"order %s %s\n", v8, v6, p_p);
  }
  return result;
}

void sub_19012F908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (*(char *)(v35 - 81) < 0) {
    operator delete(*(void **)(v35 - 104));
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Box::decompilePropertyTaps(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 176);
  if (v1 != *(void *)(result + 184))
  {
    uint64_t v2 = result;
    uint64_t v3 = (char **)(result + 32);
    uint64_t v4 = (char *)(*(void *)v1 + 32);
    if (*(char *)(*(void *)v1 + 55) < 0) {
      uint64_t v4 = *(char **)v4;
    }
    std::string::basic_string[abi:ne180100]<0>(v15, v4);
    DSPGraph::asDecompileString(v15, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v5 = &v16;
    }
    else {
      unint64_t v5 = (std::string *)v16.__r_.__value_.__r.__words[0];
    }
    unint64_t v6 = (char *)v3;
    if (*(char *)(v2 + 55) < 0) {
      unint64_t v6 = *v3;
    }
    uint64_t v7 = *(unsigned int *)(v1 + 8);
    uint64_t v8 = *(unsigned int *)(v1 + 12);
    uint64_t v9 = *(unsigned int *)(v1 + 16);
    std::string::basic_string[abi:ne180100]<0>(v13, v6);
    DSPGraph::asDecompileString(v13, &__p);
    CFTypeRef p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      CFTypeRef p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    unint64_t v12 = "true";
    if (!*(unsigned char *)(v1 + 36)) {
      unint64_t v12 = "";
    }
    DSPGraph::strprintf((DSPGraph *)"wireProperty (%s %u %u %u) (%s %u %u %u) %s\n", v10, v5, v7, v8, v9, p_p, *(unsigned int *)(v1 + 24), *(unsigned int *)(v1 + 28), *(unsigned int *)(v1 + 32), v12);
  }
  return result;
}

void sub_19012FB28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (*(char *)(v36 - 89) < 0) {
    operator delete(*(void **)(v36 - 112));
  }
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (*(char *)(v36 - 113) < 0) {
    operator delete(*(void **)(v36 - 136));
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Box::decompileParameterTaps(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 152);
  if (v1 != *(void *)(result + 160))
  {
    uint64_t v2 = result;
    uint64_t v3 = (char **)(result + 32);
    uint64_t v4 = (char *)(*(void *)v1 + 32);
    if (*(char *)(*(void *)v1 + 55) < 0) {
      uint64_t v4 = *(char **)v4;
    }
    std::string::basic_string[abi:ne180100]<0>(v15, v4);
    DSPGraph::asDecompileString(v15, &v16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v5 = &v16;
    }
    else {
      unint64_t v5 = (std::string *)v16.__r_.__value_.__r.__words[0];
    }
    unint64_t v6 = (char *)v3;
    if (*(char *)(v2 + 55) < 0) {
      unint64_t v6 = *v3;
    }
    uint64_t v7 = *(unsigned int *)(v1 + 8);
    uint64_t v8 = *(unsigned int *)(v1 + 12);
    uint64_t v9 = *(unsigned int *)(v1 + 16);
    std::string::basic_string[abi:ne180100]<0>(v13, v6);
    DSPGraph::asDecompileString(v13, &__p);
    CFTypeRef p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      CFTypeRef p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    unint64_t v12 = "true";
    if (!*(unsigned char *)(v1 + 36)) {
      unint64_t v12 = "";
    }
    DSPGraph::strprintf((DSPGraph *)"wireParam (%s %u %u %u) (%s %u %u %u) %s\n", v10, v5, v7, v8, v9, p_p, *(unsigned int *)(v1 + 24), *(unsigned int *)(v1 + 28), *(unsigned int *)(v1 + 32), v12);
  }
  return result;
}

void sub_19012FD48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (*(char *)(v36 - 89) < 0) {
    operator delete(*(void **)(v36 - 112));
  }
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (*(char *)(v36 - 113) < 0) {
    operator delete(*(void **)(v36 - 136));
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  _Unwind_Resume(exception_object);
}

void *DSPGraph::Box::decompileWires(void *result)
{
  uint64_t v1 = result[11];
  for (uint64_t i = result[12]; v1 != i; v1 += 32)
  {
    unint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v1 + 40))(v1);
    if (result[4]) {
      DSPGraph::strprintf((DSPGraph *)"wire ", v2);
    }
  }
  return result;
}

void sub_190130150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

void DSPGraph::Box::decompileBox(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0)
  {
    uint64_t v3 = (char *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      uint64_t v3 = *(char **)v3;
    }
    std::string::basic_string[abi:ne180100]<0>(v10, v3);
    DSPGraph::asDecompileString(v10, &v11);
    if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v5 = &v11;
    }
    else {
      unint64_t v5 = (std::string *)v11.__r_.__value_.__r.__words[0];
    }
    DSPGraph::strprintf((DSPGraph *)"box %s ", v4, v5);
  }
  unint64_t v6 = (char *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0) {
    unint64_t v6 = *(char **)(a1 + 32);
  }
  uint64_t v7 = *(void *)(a1 + 56);
  std::string::basic_string[abi:ne180100]<0>(v10, v6);
  DSPGraph::asDecompileString(v10, &v11);
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v9 = &v11;
  }
  else {
    uint64_t v9 = (std::string *)v11.__r_.__value_.__r.__words[0];
  }
  DSPGraph::strprintf((DSPGraph *)"box %qu %s ", v8, v7, v9);
}

void sub_1901305C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (*(char *)(v35 - 49) < 0) {
    operator delete(*(void **)(v35 - 72));
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a29)
  {
    if (a28 < 0) {
      operator delete(a23);
    }
  }
  _Unwind_Resume(exception_object);
}

void *DSPGraph::Box::writeDotEdges(void *result)
{
  uint64_t v1 = result[11];
  uint64_t v5 = result[12];
  if (v1 != v5)
  {
    uint64_t v2 = result;
    do
    {
      unint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v1 + 40))(v1);
      uint64_t v4 = result[4];
      if (v4) {
        DSPGraph::strprintf((DSPGraph *)"B%qu -> B%qu", v3, v2[7], *(void *)(*(void *)(*(void *)(v4 + 16) + 8) + 56));
      }
      v1 += 32;
    }
    while (v1 != v5);
  }
  return result;
}

void sub_190130838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void DSPGraph::Box::writeDotAttributes(uint64_t a1, const char *a2)
{
  uint64_t v2 = (void *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0) {
    uint64_t v2 = (void *)*v2;
  }
  DSPGraph::strprintf((DSPGraph *)"B%qu [shape=box, label=\"%s\\n", a2, *(void *)(a1 + 56), v2);
}

void sub_190130A48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::details::DoTimePoint<std::function<void ()(double)>>::GetCurrentTimeInNanos()
{
  return __udivti3();
}

void DSPGraph::Box::getFormatFromUnit(DSPGraph::Box *this)
{
  std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
  std::string::basic_string[abi:ne180100]<0>(&v7, "getFormatFromUnit");
  std::string::basic_string[abi:ne180100]<0>(&v5, "Box::getFormatFromUnit ");
  uint64_t v2 = (const char *)(*(uint64_t (**)(DSPGraph::Box *))(*(void *)this + 16))(this);
  size_t v3 = strlen(v2);
  uint64_t v4 = std::string::append(&v5, v2, v3);
  std::string v6 = *v4;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  DSPGraph::ThrowException(1869640255, &v8, 857, &v7, (long long *)&v6);
}

void sub_190130B64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (*(char *)(v28 - 17) < 0) {
    operator delete(*(void **)(v28 - 40));
  }
  _Unwind_Resume(exception_object);
}

void DSPGraph::Box::calculateLatencyDelays(DSPGraph::Box *this)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (((*((void *)this + 9) - *((void *)this + 8)) & 0x1FFFFFFFC0) != 0)
  {
    unint64_t v2 = DSPGraph::Box::upstreamLatencyInTicks(this);
    size_t v3 = (DSPGraph::InputPort *)*((void *)this + 8);
    uint64_t v4 = (DSPGraph::InputPort *)*((void *)this + 9);
    if (v3 != v4)
    {
      unint64_t v5 = v2;
      for (uint64_t i = (DSPGraph::InputPort *)*((void *)this + 8); i != v4; uint64_t i = (DSPGraph::InputPort *)((char *)i + 32))
      {
        *((_DWORD *)i + 7) = 0;
        uint64_t v7 = **(void **)(*(void *)((*(uint64_t (**)(DSPGraph::InputPort *))(*(void *)i + 40))(i) + 8)
                         + 8);
        if (((*(uint64_t (**)(void))(v7 + 392))() & 1) == 0)
        {
          unint64_t v8 = DSPGraph::InputPort::upstreamLatencyInTicks(i);
          if (v5 <= v8)
          {
            if (*((_DWORD *)i + 7))
            {
LABEL_9:
              if (*(_DWORD *)(*(void *)((*(uint64_t (**)(DSPGraph::InputPort *))(*(void *)i + 40))(i)
                                         + 120)
                             + 8) == 1718773105)
              {
                if (DSPGraph::getLog(void)::onceToken != -1) {
                  dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_11417);
                }
                char v10 = DSPGraph::getLog(void)::gLog;
                if (os_log_type_enabled((os_log_t)DSPGraph::getLog(void)::gLog, OS_LOG_TYPE_DEBUG))
                {
                  int v11 = *((_DWORD *)i + 7);
                  uint64_t v12 = *(void *)(*(void *)((*(uint64_t (**)(DSPGraph::InputPort *))(*(void *)i + 40))(i)
                                              + 8)
                                  + 8);
                  std::string v13 = (void *)(v12 + 32);
                  if (*(char *)(v12 + 55) < 0) {
                    std::string v13 = (void *)*v13;
                  }
                  uint64_t v14 = (char *)this + 32;
                  if (*((char *)this + 55) < 0) {
                    uint64_t v14 = (char *)*((void *)this + 4);
                  }
                  *(_DWORD *)AudioFormatInfo buf = 67109634;
                  int v16 = v11;
                  __int16 v17 = 2080;
                  int v18 = v13;
                  __int16 v19 = 2080;
                  uint64_t v20 = v14;
                  _os_log_debug_impl(&dword_18FEC0000, v10, OS_LOG_TYPE_DEBUG, "Latency compensation of %u samples required at frequency-domain wire : %s -> %s", buf, 0x1Cu);
                }
              }
            }
          }
          else
          {
            unint64_t v9 = (v5 - v8)
               * **(double **)((*(uint64_t (**)(DSPGraph::InputPort *))(*(void *)i + 40))(i)
                                           + 120)
               / *(void *)(*((void *)this + 1) + 696);
            *((_DWORD *)i + 7) = v9;
            if (v9) {
              goto LABEL_9;
            }
          }
        }
        size_t v3 = (DSPGraph::InputPort *)((char *)v3 + 32);
      }
    }
  }
}

os_log_t ___ZN8DSPGraph6getLogEv_block_invoke_11423()
{
  os_log_t result = os_log_create("com.apple.coreaudio", "DSPGraph");
  DSPGraph::getLog(void)::gLog = (uint64_t)result;
  return result;
}

uint64_t DSPGraph::Box::insertLatencyDelayBoxes(uint64_t this)
{
  unint64_t v2 = *(char **)(this + 64);
  uint64_t v1 = *(char **)(this + 72);
  if (((v1 - v2) & 0x1FFFFFFFC0) != 0 && v2 != v1)
  {
    uint64_t v4 = *(char **)(this + 64);
    do
    {
      uint64_t v5 = *(void *)(*(void *)((*(uint64_t (**)(char *))(*(void *)v4 + 40))(v4) + 8) + 8);
      this = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 392))(v5);
      unsigned int v6 = *((_DWORD *)v4 + 7);
      if (this)
      {
        DSPGraph::DelayBox::setDelayFrames(v5, v6);
        this = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 576))(v5);
      }
      else if (v6)
      {
        if (*(_DWORD *)(*(void *)((*(uint64_t (**)(char *))(*(void *)v4 + 40))(v4) + 120) + 8) != 1718773105) {
          operator new();
        }
        std::string::basic_string[abi:ne180100]<0>(&v9, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v8, "insertLatencyDelayBoxes");
        std::string::basic_string[abi:ne180100]<0>(&v7, "Latency Boxes cannot be inserted at frequency-domain wires");
        DSPGraph::ThrowException(1869640255, (long long *)&v9, 772, (long long *)&v8, (long long *)&v7);
      }
      v4 += 32;
      v2 += 32;
    }
    while (v4 != v1);
  }
  return this;
}

void sub_19013151C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  MEMORY[0x192FC8940](v37, 0x10A1C40B6F5AC58);
  if (v38 < 0) {
    operator delete(a13);
  }
  _Unwind_Resume(a1);
}

uint64_t DSPGraph::DelayBox::setDelayFrames(uint64_t this, unsigned int a2)
{
  if (*(unsigned char *)(*(void *)(this + 8) + 762))
  {
    if (*(_DWORD *)(this + 792) < a2)
    {
      std::string::basic_string[abi:ne180100]<0>(&v5, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v4, "setDelayFrames");
      std::string::basic_string[abi:ne180100]<0>(&v3, "delay value exceeds current maximum");
      DSPGraph::ThrowException(1919837985, &v5, 3220, &v4, &v3);
    }
  }
  else
  {
    unsigned int v2 = *(_DWORD *)(this + 792);
    if (v2 <= a2) {
      unsigned int v2 = a2;
    }
    *(_DWORD *)(this + 792) = v2;
  }
  *(_DWORD *)(this + 79std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = a2;
  return this;
}

void sub_19013175C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

void DSPGraph::DelayBox::DelayBox(DSPGraph::DelayBox *this)
{
}

{
  DSPGraph::Box::Box(this, 1u, 1u);
}

void DSPGraph::Box::~Box(DSPGraph::Box *this)
{
  *(void *)this = &unk_1EDF9C208;
  std::unique_ptr<DSPGraph::RenderObserverList<DSPGraph::Box>>::reset[abi:ne180100]((uint64_t *)this + 92, 0);
  std::mutex::~mutex((std::mutex *)((char *)this + 672));
  std::__function::__value_func<void ()(double)>::~__value_func[abi:ne180100]((void *)this + 80);
  caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::clear((unint64_t)this + 336);
  caulk::concurrent::details::node_allocator<unsigned int,DSPGraph::Analyzer *,10ul,(caulk::concurrent::skiplist_options)0>::~node_allocator((unint64_t)this + 560);
  long long v3 = (void **)((char *)this + 312);
  std::vector<std::unique_ptr<DSPGraph::Analyzer>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::mutex::~mutex((std::mutex *)((char *)this + 248));
  long long v3 = (void **)((char *)this + 224);
  std::vector<std::unique_ptr<DSPGraph::Analyzer>>::__destroy_vector::operator()[abi:ne180100](&v3);
  long long v3 = (void **)((char *)this + 200);
  std::vector<std::unique_ptr<DSPGraph::Analyzer>>::__destroy_vector::operator()[abi:ne180100](&v3);
  long long v3 = (void **)((char *)this + 176);
  std::vector<DSPGraph::PropertyTap>::__destroy_vector::operator()[abi:ne180100](&v3);
  unsigned int v2 = (void *)*((void *)this + 19);
  if (v2)
  {
    *((void *)this + 20) = v2;
    operator delete(v2);
  }
  long long v3 = (void **)((char *)this + 88);
  std::vector<DSPGraph::OutputPort>::__destroy_vector::operator()[abi:ne180100](&v3);
  long long v3 = (void **)((char *)this + 64);
  std::vector<DSPGraph::OutputPort>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
}

void *std::__function::__value_func<void ()(double)>::~__value_func[abi:ne180100](void *a1)
{
  unsigned int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

unint64_t caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::clear(unint64_t a1)
{
  unint64_t v2 = a1 + 224;
  caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::begin_traversal();
  for (unint64_t i = atomic_load((unint64_t *)(a1 + 24)); ; unint64_t i = atomic_load((unint64_t *)(v4 + 24)))
  {
    unint64_t v4 = i & 0xFFFFFFFFFFFFFFFCLL;
    if (a1 + 184 == (i & 0xFFFFFFFFFFFFFFFCLL)) {
      break;
    }
    if (*(unsigned char *)(v4 + 14) != 2)
    {
      char v5 = atomic_load((unint64_t *)(v4 + 24));
      if ((v5 & 1) == 0) {
        caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::remove(a1, *(_DWORD *)(v4 + 8));
      }
    }
  }
  return caulk::concurrent::details::node_allocator<unsigned int,DSPGraph::Analyzer *,10ul,(caulk::concurrent::skiplist_options)0>::end_traversal(v2, i);
}

unint64_t caulk::concurrent::details::node_allocator<unsigned int,DSPGraph::Analyzer *,10ul,(caulk::concurrent::skiplist_options)0>::~node_allocator(unint64_t a1)
{
  _X2 = 0;
  _X3 = 0;
  __asm { CASPAL          X2, X3, X2, X3, [X0] }
  if (_X2) {
    caulk::concurrent::details::node_allocator<unsigned int,DSPGraph::Analyzer *,10ul,(caulk::concurrent::skiplist_options)0>::free_node_chain_now(a1, _X2);
  }
  (*(void (**)(unint64_t))(*(void *)(a1 + 32) + 24))(a1 + 40);
  std::string v9 = *(std::__shared_weak_count **)(a1 + 24);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  return a1;
}

void std::vector<std::unique_ptr<DSPGraph::Analyzer>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    unint64_t v4 = v1[1];
    char v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        void *v4 = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
      }
      while (v4 != v2);
      char v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<DSPGraph::PropertyTap>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    char v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (void *)*((void *)v4 - 3);
        if (v6)
        {
          *((void *)v4 - 2) = v6;
          operator delete(v6);
        }
        v4 -= 64;
      }
      while (v4 != v2);
      char v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<DSPGraph::OutputPort>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    char v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 32;
      uint64_t v7 = v4 - 32;
      std::string v8 = v4 - 32;
      do
      {
        std::string v9 = *(void (***)(char *))v8;
        v8 -= 32;
        (*v9)(v7);
        v6 -= 32;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      char v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t caulk::concurrent::lf_read_synchronized_write<std::vector<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver>>>::~lf_read_synchronized_write(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    long long v3 = (void **)(a1 + 16);
    std::vector<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver>>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (*(unsigned char *)(a1 + 9))
  {
    long long v3 = (void **)(a1 + 40);
    std::vector<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver>>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  return a1;
}

void std::vector<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    char v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 48;
        std::__function::__value_func<void ()(DSPGraph::Box *,unsigned int)>::~__value_func[abi:ne180100]((void *)v4 - 5);
        unint64_t v4 = v6;
      }
      while (v6 != v2);
      char v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void DSPGraph::DelayBox::reset(DSPGraph::DelayBox *this)
{
  unint64_t v2 = (_DWORD *)*((void *)this + 97);
  if (v2 && *v2)
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    do
    {
      bzero(*(void **)&v2[v3 + 4], v2[v3 + 3]);
      ++v4;
      unint64_t v2 = (_DWORD *)*((void *)this + 97);
      v3 += 4;
    }
    while (v4 < *v2);
  }
  unsigned int v5 = *((_DWORD *)this + 199);
  *((_DWORD *)this + 200) = v5;
  *((void *)this + 101) = v5;
}

void DSPGraph::DelayBox::uninitialize(DSPGraph::DelayBox *this)
{
  DSPGraph::Box::uninitialize(this);
  DSPGraph::SimpleABL::free((DSPGraph::DelayBox *)((char *)this + 776));
}

void DSPGraph::DelayBox::initialize(DSPGraph::DelayBox *this)
{
  DSPGraph::Box::initialize(this);
  if (*((_DWORD *)this + 198))
  {
    uint64_t v2 = *((void *)this + 11);
    if (*((void *)this + 12) == v2)
    {
      std::string::basic_string[abi:ne180100]<0>(v14, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v13, "out");
      uint64_t v12 = (void *)((char *)this + 32);
      if (*((char *)this + 55) < 0) {
        uint64_t v12 = (void *)*v12;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v11, v12, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
    }
    uint64_t v3 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2) + 120);
    int v4 = *((_DWORD *)this + 198) + 2 * *(_DWORD *)(*((void *)this + 2) + 272);
    *((_DWORD *)this + 201) = v4;
    BOOL v5 = (*(_DWORD *)(v3 + 12) & 0x20) == 0;
    uint64_t v8 = v3 + 24;
    int v6 = *(_DWORD *)(v3 + 24);
    unsigned int v7 = *(_DWORD *)(v8 + 4);
    if (v5) {
      unsigned int v9 = 1;
    }
    else {
      unsigned int v9 = v7;
    }
    DSPGraph::SimpleABL::alloc((DSPGraph::DelayBox *)((char *)this + 776), v9, v6 * v4, 0);
  }
  else
  {
    *((_DWORD *)this + 201) = 0;
  }
  unsigned int v10 = *((_DWORD *)this + 199);
  *((_DWORD *)this + 200) = v10;
  *((void *)this + 101) = v10;
}

void sub_190131F2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (*(char *)(v23 - 17) < 0) {
    operator delete(*(void **)(v23 - 40));
  }
  _Unwind_Resume(exception_object);
}

void *DSPGraph::DelayBox::process(DSPGraph::DelayBox *this, int a2)
{
  unsigned int v3 = *((_DWORD *)this + 199);
  int v6 = (char *)this + 88;
  uint64_t v4 = *((void *)this + 11);
  uint64_t v5 = *((void *)v6 + 1);
  if (v3)
  {
    if (v5 == v4)
    {
      std::string::basic_string[abi:ne180100]<0>(v54, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v53, "out");
      BOOL v44 = (void *)((char *)this + 32);
      if (*((char *)this + 55) < 0) {
        BOOL v44 = (void *)*v44;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v43, v44, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
    }
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
    uint64_t v9 = *((void *)this + 8);
    if (*((void *)this + 9) == v9)
    {
      std::string::basic_string[abi:ne180100]<0>(v54, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v53, "in");
      int v46 = (void *)((char *)this + 32);
      if (*((char *)this + 55) < 0) {
        int v46 = (void *)*v46;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v45, v46, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
    }
    uint64_t v10 = *(void *)(v8 + 120);
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 40))(v9);
    uint64_t v12 = *((void *)this + 11);
    if (*((void *)this + 12) == v12)
    {
      std::string::basic_string[abi:ne180100]<0>(v54, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v53, "out");
      uint64_t v48 = (void *)((char *)this + 32);
      if (*((char *)this + 55) < 0) {
        uint64_t v48 = (void *)*v48;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v47, v48, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
    }
    std::string v13 = (unsigned int **)(*(void *)(v11 + 56) + 80);
    uint64_t v14 = (unsigned int **)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v12 + 40))(v12) + 56) + 80);
    int v16 = *(_DWORD *)(v10 + 24);
    uint64_t v15 = *(unsigned int *)(v10 + 28);
    unsigned int v17 = *((_DWORD *)this + 202);
    if (v3 != *((_DWORD *)this + 200))
    {
      if (v17 >= v3) {
        int v18 = 0;
      }
      else {
        int v18 = *((_DWORD *)this + 201);
      }
      *((_DWORD *)this + 203) = v17 - v3 + v18;
    }
    DSPGraph::SimpleABL::dstWrapCopy(v13, (unsigned int **)this + 97, 0, v17 * v16, (v16 * a2));
    DSPGraph::SimpleABL::srcWrapCopy((unsigned int **)this + 97, v14, (*((_DWORD *)this + 203) * v16), 0, (v16 * a2), 0);
    if (v15)
    {
      uint64_t v23 = *v14 + 3;
      do
      {
        *uint64_t v23 = v16 * a2;
        v23 += 4;
        --v15;
      }
      while (v15);
    }
    unsigned int v24 = *((_DWORD *)this + 202) + a2;
    *((_DWORD *)this + 202) = v24;
    unsigned int v25 = *((_DWORD *)this + 203) + a2;
    *((_DWORD *)this + 203) = v25;
    unsigned int v26 = *((_DWORD *)this + 201);
    BOOL v27 = v24 >= v26;
    unsigned int v28 = v24 - v26;
    if (v27) {
      *((_DWORD *)this + 202) = v28;
    }
    BOOL v27 = v25 >= v26;
    unsigned int v29 = v25 - v26;
    if (v27) {
      *((_DWORD *)this + 203) = v29;
    }
  }
  else
  {
    if (v5 == v4)
    {
      std::string::basic_string[abi:ne180100]<0>(v54, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v53, "out");
      unsigned int v50 = (void *)((char *)this + 32);
      if (*((char *)this + 55) < 0) {
        unsigned int v50 = (void *)*v50;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v49, v50, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
    }
    uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
    uint64_t v20 = *((void *)this + 8);
    if (*((void *)this + 9) == v20)
    {
      std::string::basic_string[abi:ne180100]<0>(v54, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v53, "in");
      BOOL v52 = (void *)((char *)this + 32);
      if (*((char *)this + 55) < 0) {
        BOOL v52 = (void *)*v52;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v51, v52, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
    }
    uint64_t v21 = *(DSPGraph::Buffer **)(v19 + 56);
    uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 40))(v20);
    DSPGraph::Buffer::copyFrom(v21, *(DSPGraph::Buffer **)(v22 + 56));
  }
  uint64_t v30 = *((void *)this + 8);
  if (*((void *)this + 9) == v30)
  {
    std::string::basic_string[abi:ne180100]<0>(v54, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v53, "in");
    uint64_t v42 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v42 = (void *)*v42;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v41, v42, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
  }
  os_log_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v30 + 40))(v30);
  int v32 = (void *)*((void *)this + 11);
  int v33 = (void *)*((void *)this + 12);
  if (v32 != v33)
  {
    int v34 = (_OWORD *)(result[7] + 8);
    os_log_t result = (void *)*((void *)this + 11);
    uint64_t v35 = result;
    do
    {
      uint64_t v36 = *v35;
      v35 += 4;
      uint64_t v37 = *(void *)((*(uint64_t (**)(void *))(v36 + 40))(result) + 56);
      long long v39 = v34[2];
      long long v38 = v34[3];
      long long v40 = v34[1];
      *(_OWORD *)(v37 + 8) = *v34;
      *(_OWORD *)(v37 + 24) = v40;
      *(_OWORD *)(v37 + 40) = v39;
      *(_OWORD *)(v37 + 5std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v38;
      *(_DWORD *)(v37 + 72) = 0;
      v32 += 4;
      os_log_t result = v35;
    }
    while (v35 != v33);
  }
  *((_DWORD *)this + 200) = v3;
  return result;
}

void sub_190132500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::DelayBox::isFrequencySafe(DSPGraph::DelayBox *this)
{
  return 0;
}

uint64_t DSPGraph::DelayBox::isLatencyDelay(DSPGraph::DelayBox *this)
{
  return 1;
}

void DSPGraph::Box::getPreset(DSPGraph::Box *this@<X0>, applesauce::CF::DictionaryRef *a2@<X8>)
{
  v40[2] = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  int v34 = Mutable;
  uint64_t v5 = &_ZGRN8DSPGraphL22kPresetParameterScopesE_;
  do
  {
    uint64_t v6 = *v5;
    int v7 = (*(uint64_t (**)(DSPGraph::Box *, uint64_t))(*(void *)this + 320))(this, v6);
    if (v7)
    {
      (*(void (**)(const __CFNumber **__return_ptr, DSPGraph::Box *, uint64_t))(*(void *)this + 96))(&v35, this, v6);
      CFNumberRef v8 = v35;
      CFNumberRef v9 = v36;
      if (v35 != v36)
      {
        uint64_t v10 = 0;
        unsigned int v11 = bswap32(v6);
        do
        {
          *(_DWORD *)bytes = v11;
          *(_DWORD *)&bytes[4] = bswap32(v10);
          LODWORD(v32) = bswap32((unint64_t)(v9 - v8) >> 2);
          CFDataAppendBytes(Mutable, bytes, 12);
          CFNumberRef v8 = v36;
          if (v36 == v35)
          {
            CFNumberRef v9 = v36;
          }
          else
          {
            unint64_t v12 = 0;
            CFNumberRef v8 = v35;
            do
            {
              *(float *)&unsigned int v13 = (*(float (**)(DSPGraph::Box *, void, uint64_t, uint64_t))(*(void *)this
                                                                                                  + 88))(this, *((unsigned int *)v8 + v12), v6, v10);
              *(void *)unsigned int v28 = 0;
              *(_DWORD *)unsigned int v28 = bswap32(*((_DWORD *)v35 + v12));
              *(_DWORD *)&v28[4] = bswap32(v13);
              CFDataAppendBytes(Mutable, v28, 8);
              ++v12;
              CFNumberRef v8 = v35;
              CFNumberRef v9 = v36;
            }
            while (v12 < (v36 - v35) >> 2);
          }
          uint64_t v10 = (v10 + 1);
        }
        while (v10 != v7);
      }
      if (v8)
      {
        CFNumberRef v36 = v8;
        operator delete(v8);
      }
    }
    ++v5;
  }
  while (v5 != kFLACChannelConfigToLayoutTag);
  *(void *)bytes = 0;
  uint64_t v32 = 0;
  int v33 = 0;
  (*(void (**)(UInt8 *__return_ptr, DSPGraph::Box *))(*(void *)this + 208))(bytes, this);
  CFRetain(@"version");
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, @"version");
  CFNumberRef v14 = (const __CFNumber *)cf;
  if (cf) {
    CFRetain(cf);
  }
  CFNumberRef v35 = v14;
  LODWORD(valuePtr) = 0;
  CFNumberRef v36 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v36)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFRetain(@"type");
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&valuePtr, @"type");
  applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,unsigned int const&>(&v37, valuePtr, (int *)bytes);
  CFRetain(@"subtype");
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v25, @"subtype");
  applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,unsigned int const&>(&v38, v25, (int *)&bytes[4]);
  CFRetain(@"manufacturer");
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v24, @"manufacturer");
  applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,unsigned int const&>(&v39, v24, (int *)&v32);
  CFRetain(@"classname");
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v23, @"classname");
  uint64_t v22 = (char *)(*(uint64_t (**)(DSPGraph::Box *))(*(void *)this + 16))(this);
  applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,char const*>(v40, v23, &v22);
  *(void *)unsigned int v28 = &v35;
  uint64_t v29 = 5;
  CFDictionaryRef CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v28);
  uint64_t v16 = 0;
  CFDictionaryRef v30 = CFDictionaryRef;
  do
  {
    unsigned int v17 = (const void *)v40[v16 + 1];
    if (v17) {
      CFRelease(v17);
    }
    int v18 = (const void *)v40[v16];
    if (v18) {
      CFRelease(v18);
    }
    v16 -= 2;
  }
  while (v16 != -10);
  if (v23) {
    CFRelease(v23);
  }
  if (v24) {
    CFRelease(v24);
  }
  if (v25) {
    CFRelease(v25);
  }
  if (valuePtr) {
    CFRelease(valuePtr);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (CFDataGetLength(Mutable) < 1)
  {
    CFRetain(CFDictionaryRef);
    *(void *)a2 = CFDictionaryRef;
  }
  else
  {
    MutableCopy = CFDictionaryCreateMutableCopy(v3, 0, CFDictionaryRef);
    CFDictionaryAddValue(MutableCopy, @"data", Mutable);
    applesauce::CF::DictionaryRef::DictionaryRef(a2, MutableCopy);
  }
  CFRelease(CFDictionaryRef);
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void sub_190132A54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, int a20,__int16 a21,char a22,char a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,void *__p,CFTypeRef cf)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,unsigned int const&>(void *a1, CFTypeRef cf, int *a3)
{
  if (cf) {
    CFRetain(cf);
  }
  *a1 = cf;
  int valuePtr = *a3;
  CFNumberRef v6 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  a1[1] = v6;
  if (!v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_190132C9C(_Unwind_Exception *a1)
{
  CFAllocatorRef v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

void *applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,char const*>(void *a1, CFTypeRef cf, char **a3)
{
  if (cf) {
    CFRetain(cf);
  }
  *a1 = cf;
  applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)(a1 + 1), *a3);
  return a1;
}

void sub_190132D30(_Unwind_Exception *a1)
{
  applesauce::CF::TypeRef::~TypeRef(v1);
  _Unwind_Resume(a1);
}

const void **applesauce::CF::ObjectRef<__CFData *>::~ObjectRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t DSPGraph::Box::getElementCount(DSPGraph::Box *this, int a2)
{
  switch(a2)
  {
    case 0:
      return 1;
    case 2:
      return (*((void *)this + 12) - *((void *)this + 11)) >> 5;
    case 1:
      return (*((void *)this + 9) - *((void *)this + 8)) >> 5;
  }
  return 0;
}

uint64_t DSPGraph::DelayBox::setProperty(DSPGraph::DelayBox *this, int a2, int a3, unsigned int a4, int a5, unsigned int *a6)
{
  if (a2 != 64000 || (a4 | a3) != 0) {
    return DSPGraph::Box::setProperty(this, a2, a3, a4, a5, a6);
  }
  if (*(unsigned char *)(*((void *)this + 1) + 762)) {
    return 4294956447;
  }
  if (a5 != 4) {
    return 4294956445;
  }
  if (!a6) {
    return 4294967246;
  }
  uint64_t result = 0;
  unsigned int v9 = *a6;
  *((_DWORD *)this + 198) = *a6;
  if (v9 >= *((_DWORD *)this + 199)) {
    unsigned int v9 = *((_DWORD *)this + 199);
  }
  *((_DWORD *)this + 199) = v9;
  return result;
}

uint64_t DSPGraph::Box::setProperty(DSPGraph::Box *this, int a2, int a3, unsigned int a4, int a5, _DWORD *a6)
{
  if (a2)
  {
    if (a2 != 21) {
      return 4294956417;
    }
    if (a5 == 4)
    {
      if (!a3)
      {
        (*(void (**)(DSPGraph::Box *, BOOL))(*(void *)this + 56))(this, *a6 != 0);
        return 0;
      }
      return 4294956430;
    }
    return 561211770;
  }
  if (a5 != 8) {
    return 561211770;
  }
  if (a3) {
    return 4294956430;
  }
  int v7 = *(uint64_t (**)(void))(*(void *)this + 352);
  return v7();
}

uint64_t DSPGraph::DelayBox::getProperty(DSPGraph::DelayBox *this, int a2, uint64_t a3, uint64_t a4, unsigned int *a5, CFStringRef *a6)
{
  if (a2 != 64000 || (a4 | a3) != 0) {
    return DSPGraph::Box::getProperty(this, a2, a3, a4, a5, a6);
  }
  if (*a5 != 4) {
    return 561211770;
  }
  if (!a6) {
    return 4294967246;
  }
  uint64_t result = 0;
  *(_DWORD *)a6 = *((_DWORD *)this + 198);
  return result;
}

uint64_t DSPGraph::Box::getProperty(DSPGraph::Box *this, int a2, uint64_t a3, uint64_t a4, unsigned int *a5, CFStringRef *a6)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t result = 4294956417;
  switch(a2)
  {
    case 0:
      if (*a5 != 8) {
        return 561211770;
      }
      if (a3) {
        return 4294956430;
      }
      (*(void (**)(_OWORD *__return_ptr, DSPGraph::Box *))(*(void *)this + 360))(v44, this);
      CFStringRef v11 = *(const __CFString **)&v44[0];
      *(void *)&v44[0] = 0;
      *a6 = v11;
      applesauce::CF::DictionaryRef::~DictionaryRef((const void **)v44);
      return 0;
    case 1:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return result;
    case 2:
      if (*a5 != 8) {
        return 561211770;
      }
      if (!a6) {
        return 4294967246;
      }
      if (a3 == 2)
      {
        uint64_t v25 = a4;
        uint64_t v26 = *((void *)this + 11);
        if (a4 >= (unint64_t)((*((void *)this + 12) - v26) >> 5))
        {
          std::string::basic_string[abi:ne180100]<0>(v44, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
          std::string::basic_string[abi:ne180100]<0>(v43, "out");
          uint64_t v42 = (void *)((char *)this + 32);
          if (*((char *)this + 55) < 0) {
            uint64_t v42 = (void *)*v42;
          }
          DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v41, v42, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, a4);
        }
      }
      else
      {
        if (a3 != 1) {
          return 4294956430;
        }
        uint64_t v25 = a4;
        uint64_t v26 = *((void *)this + 8);
        if (a4 >= (unint64_t)((*((void *)this + 9) - v26) >> 5))
        {
          std::string::basic_string[abi:ne180100]<0>(v44, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
          std::string::basic_string[abi:ne180100]<0>(v43, "in");
          unsigned int v28 = (void *)((char *)this + 32);
          if (*((char *)this + 55) < 0) {
            unsigned int v28 = (void *)*v28;
          }
          DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v27, v28, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, a4);
        }
      }
      uint64_t v38 = (*(uint64_t (**)(uint64_t))(*(void *)(v26 + 32 * v25) + 40))(v26 + 32 * v25);
      uint64_t result = 0;
      double v30 = (double)**(double **)(v38 + 120);
LABEL_69:
      *(double *)a6 = v30;
      return result;
    case 3:
      (*(void (**)(_OWORD *__return_ptr, DSPGraph::Box *, uint64_t))(*(void *)this + 96))(v44, this, a3);
      int v18 = *(void **)&v44[0];
      int v19 = DWORD2(v44[0]) - LODWORD(v44[0]);
      unsigned int v20 = (DWORD2(v44[0]) - LODWORD(v44[0])) & 0xFFFFFFFC;
      if (*a5 < v20)
      {
        if (*(void *)&v44[0])
        {
          *((void *)&v44[0] + 1) = *(void *)&v44[0];
          operator delete(*(void **)&v44[0]);
        }
        return 561211770;
      }
      *a5 = v20;
      memcpy(a6, v18, v19 & 0xFFFFFFFC);
      if (v18)
      {
        *((void *)&v44[0] + 1) = v18;
        operator delete(v18);
      }
      return 0;
    case 4:
      if (*a5 != 104) {
        return 561211770;
      }
      if (!a6) {
        return 4294967246;
      }
      (*(void (**)(_OWORD *__return_ptr, DSPGraph::Box *, uint64_t, uint64_t))(*(void *)this + 104))(v44, this, a3, a4);
      if (!v46) {
        return LODWORD(v44[0]);
      }
      uint64_t result = 0;
      a6[12] = v45;
      long long v22 = v44[5];
      *((_OWORD *)a6 + 4) = v44[4];
      *((_OWORD *)a6 + 5) = v22;
      long long v23 = v44[1];
      *(_OWORD *)a6 = v44[0];
      *((_OWORD *)a6 + 1) = v23;
      long long v24 = v44[3];
      *((_OWORD *)a6 + 2) = v44[2];
      *((_OWORD *)a6 + 3) = v24;
      return result;
    case 8:
      if (*a5 != 40) {
        return 561211770;
      }
      if (!a6) {
        return 4294967246;
      }
      if (a3 == 2)
      {
        uint64_t v14 = a4;
        uint64_t v15 = *((void *)this + 11);
        if (a4 >= (unint64_t)((*((void *)this + 12) - v15) >> 5))
        {
          std::string::basic_string[abi:ne180100]<0>(v44, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
          std::string::basic_string[abi:ne180100]<0>(v43, "out");
          long long v40 = (void *)((char *)this + 32);
          if (*((char *)this + 55) < 0) {
            long long v40 = (void *)*v40;
          }
          DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v39, v40, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, a4);
        }
      }
      else
      {
        if (a3 != 1) {
          return 4294956430;
        }
        uint64_t v14 = a4;
        uint64_t v15 = *((void *)this + 8);
        if (a4 >= (unint64_t)((*((void *)this + 9) - v15) >> 5))
        {
          std::string::basic_string[abi:ne180100]<0>(v44, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
          std::string::basic_string[abi:ne180100]<0>(v43, "in");
          unsigned int v17 = (void *)((char *)this + 32);
          if (*((char *)this + 55) < 0) {
            unsigned int v17 = (void *)*v17;
          }
          DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v16, v17, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, a4);
        }
      }
      uint64_t v34 = (*(uint64_t (**)(uint64_t))(*(void *)(v15 + 32 * v14) + 40))(v15 + 32 * v14);
      uint64_t result = 0;
      CFNumberRef v35 = *(long long **)(v34 + 120);
      long long v36 = *v35;
      long long v37 = v35[1];
      a6[4] = (CFStringRef)*((void *)v35 + 4);
      *(_OWORD *)a6 = v36;
      *((_OWORD *)a6 + 1) = v37;
      return result;
    case 11:
      if (*a5 != 4) {
        return 561211770;
      }
      switch(a3)
      {
        case 0:
          uint64_t result = 0;
          int v33 = 1;
          goto LABEL_63;
        case 2:
          uint64_t result = 0;
          uint64_t v32 = *((void *)this + 11);
          uint64_t v31 = *((void *)this + 12);
          break;
        case 1:
          uint64_t result = 0;
          uint64_t v32 = *((void *)this + 8);
          uint64_t v31 = *((void *)this + 9);
          break;
        default:
          return 4294956430;
      }
      *(_DWORD *)a6 = (unint64_t)(v31 - v32) >> 5;
      return result;
    case 12:
      if (*a5 != 8) {
        return 561211770;
      }
      if (a3) {
        return 4294956430;
      }
      unint64_t v29 = (*(uint64_t (**)(DSPGraph::Box *))(*(void *)this + 72))(this);
      uint64_t result = 0;
      double v30 = (double)v29 / (double)*(unint64_t *)(*((void *)this + 1) + 696);
      goto LABEL_69;
    case 20:
      if (*a5 != 8) {
        return 561211770;
      }
      if (a3) {
        return 4294956430;
      }
      uint64_t result = 0;
      *a6 = 0;
      return result;
    case 21:
      if (*a5 != 4) {
        return 561211770;
      }
      if (a3) {
        return 4294956430;
      }
      int v21 = (*(uint64_t (**)(DSPGraph::Box *))(*(void *)this + 48))(this);
      goto LABEL_59;
    default:
      if (a2 != 29)
      {
        if (a2 != 54) {
          return result;
        }
        if (*a5 == 8)
        {
          if (!a3)
          {
            unint64_t v12 = (char *)this + 32;
            if (*((char *)this + 55) < 0) {
              unint64_t v12 = *(const char **)v12;
            }
            CFStringRef v13 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v12, 0x8000100u);
            uint64_t result = 0;
            *a6 = v13;
            return result;
          }
          return 4294956430;
        }
        return 561211770;
      }
      if (*a5 != 4) {
        return 561211770;
      }
      if (a3) {
        return 4294956430;
      }
      int v21 = (*(uint64_t (**)(DSPGraph::Box *))(*(void *)this + 64))(this);
LABEL_59:
      int v33 = v21;
      uint64_t result = 0;
LABEL_63:
      *(_DWORD *)a6 = v33;
      return result;
  }
}

void sub_190133600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::DelayBox::getPropertyInfo(DSPGraph::DelayBox *this, int a2, int a3, int a4)
{
  if (a2 != 64000 || (a4 | a3) != 0) {
    return DSPGraph::Box::getPropertyInfo(this, a2, a3);
  }
  if (*(unsigned char *)(*((void *)this + 1) + 762)) {
    return 4;
  }
  return 0x100000004;
}

uint64_t DSPGraph::Box::getPropertyInfo(DSPGraph::Box *this, int a2, int a3)
{
  uint64_t v3 = 0;
  unsigned int v4 = 8;
  switch(a2)
  {
    case 0:
    case 2:
      return v3 | v4;
    case 1:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      goto LABEL_8;
    case 3:
      (*(void (**)(void **__return_ptr))(*(void *)this + 96))(&v10);
      int v5 = v11 - v10;
      if (v10)
      {
        CFStringRef v11 = v10;
        operator delete(v10);
      }
      uint64_t v3 = 0;
      unsigned int v4 = v5 & 0xFFFFFFFC;
      return v3 | v4;
    case 4:
      uint64_t v3 = 0;
      unsigned int v4 = 104;
      return v3 | v4;
    case 8:
      uint64_t v3 = 0;
      unsigned int v4 = 40;
      return v3 | v4;
    case 11:
      uint64_t v3 = 0;
      goto LABEL_20;
    case 12:
    case 20:
      goto LABEL_7;
    case 21:
      if (a3)
      {
        uint64_t v3 = 0;
        unsigned int v4 = -10866;
      }
      else
      {
        int v8 = (*(uint64_t (**)(DSPGraph::Box *))(*(void *)this + 40))(this);
        uint64_t v3 = 0x100000000;
        if (!v8) {
          uint64_t v3 = 0;
        }
LABEL_20:
        unsigned int v4 = 4;
      }
      return v3 | v4;
    default:
      if (a2 == 29)
      {
        uint64_t v3 = 0;
        BOOL v6 = a3 == 0;
        int v7 = 4;
      }
      else
      {
        if (a2 != 54)
        {
LABEL_8:
          uint64_t v3 = 0;
          unsigned int v4 = -10879;
          return v3 | v4;
        }
LABEL_7:
        uint64_t v3 = 0;
        BOOL v6 = a3 == 0;
        int v7 = 8;
      }
      if (v6) {
        unsigned int v4 = v7;
      }
      else {
        unsigned int v4 = -10866;
      }
      return v3 | v4;
  }
}

double DSPGraph::DelayBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result = 4.23899122e175;
  *(_OWORD *)a1 = xmmword_1901C63F0;
  *(_DWORD *)(a1 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
  return result;
}

uint64_t DSPGraph::Box::getAnalyzer(DSPGraph::Box *this, uint64_t a2, int a3)
{
  uint64_t v3 = *((void *)this + 11);
  uint64_t v4 = *((void *)this + 12) - v3;
  if ((v4 & 0x1FFFFFFFE0) == 0) {
    return 0;
  }
  if (a2 >= (unint64_t)(v4 >> 5))
  {
    std::string::basic_string[abi:ne180100]<0>(v14, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v13, "out");
    unint64_t v12 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      unint64_t v12 = (void *)*v12;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v11, v12, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, a2);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(v3 + 32 * a2) + 40))(v3 + 32 * a2);
  if (result)
  {
    uint64_t v8 = *((void *)this + 39);
    uint64_t v9 = *((void *)this + 40);
    if (v8 != v9)
    {
      while (*(void *)(*(void *)v8 + 8) != result || *(_DWORD *)(*(void *)v8 + 24) != a3)
      {
        v8 += 8;
        if (v8 == v9) {
          return 0;
        }
      }
    }
    if (v8 != v9) {
      return *(void *)v8;
    }
    return 0;
  }
  return result;
}

void sub_190133AB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (*(char *)(v23 - 17) < 0) {
    operator delete(*(void **)(v23 - 40));
  }
  _Unwind_Resume(exception_object);
}

void DSPGraph::Box::getAnalysisList(DSPGraph::Box *this@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  uint64_t v4 = *((void *)this + 11);
  uint64_t v5 = *((void *)this + 12) - v4;
  if ((v5 & 0x1FFFFFFFE0) == 0) {
    goto LABEL_27;
  }
  if (a2 >= (unint64_t)(v5 >> 5))
  {
    std::string::basic_string[abi:ne180100]<0>(v26, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v25, "out");
    long long v24 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      long long v24 = (void *)*v24;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v23, v24, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, a2);
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)(v4 + 32 * a2) + 40))(v4 + 32 * a2);
  if (v8)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    uint64_t v9 = *((void *)this + 39);
    uint64_t v10 = *((void *)this + 40);
    if (v9 != v10)
    {
      uint64_t v11 = v8;
      unint64_t v12 = 0;
      unint64_t v13 = 0;
      uint64_t v14 = 0;
      do
      {
        if (*(void *)(*(void *)v9 + 8) == v11)
        {
          int v15 = *(_DWORD *)(*(void *)v9 + 24);
          if ((unint64_t)v14 >= v13)
          {
            uint64_t v17 = (v14 - v12) >> 2;
            unint64_t v18 = v17 + 1;
            if ((unint64_t)(v17 + 1) >> 62) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            if ((uint64_t)(v13 - (void)v12) >> 1 > v18) {
              unint64_t v18 = (uint64_t)(v13 - (void)v12) >> 1;
            }
            if (v13 - (unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v19 = v18;
            }
            if (v19) {
              unint64_t v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v19);
            }
            else {
              uint64_t v20 = 0;
            }
            int v21 = (char *)(v19 + 4 * v17);
            *(_DWORD *)int v21 = v15;
            uint64_t v16 = v21 + 4;
            while (v14 != v12)
            {
              int v22 = *((_DWORD *)v14 - 1);
              v14 -= 4;
              *((_DWORD *)v21 - 1) = v22;
              v21 -= 4;
            }
            unint64_t v13 = v19 + 4 * v20;
            *a3 = v21;
            a3[1] = v16;
            a3[2] = (char *)v13;
            if (v12) {
              operator delete(v12);
            }
            unint64_t v12 = v21;
          }
          else
          {
            *(_DWORD *)uint64_t v14 = v15;
            uint64_t v16 = v14 + 4;
          }
          a3[1] = v16;
          uint64_t v14 = v16;
        }
        v9 += 8;
      }
      while (v9 != v10);
    }
  }
  else
  {
LABEL_27:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_190133CFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Box::analyzeEnable(uint64_t this, uint64_t a2, char a3)
{
  uint64_t v3 = *(void *)(this + 88);
  uint64_t v4 = *(void *)(this + 96) - v3;
  if ((v4 & 0x1FFFFFFFE0) != 0)
  {
    uint64_t v5 = this;
    if (a2 >= (unint64_t)(v4 >> 5))
    {
      std::string::basic_string[abi:ne180100]<0>(v13, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v12, "out");
      uint64_t v11 = (void *)(v5 + 32);
      if (*(char *)(v5 + 55) < 0) {
        uint64_t v11 = (void *)*v11;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v10, v11, (uint64_t)(*(void *)(v5 + 96) - *(void *)(v5 + 88)) >> 5, a2);
    }
    this = (*(uint64_t (**)(uint64_t))(*(void *)(v3 + 32 * a2) + 40))(v3 + 32 * a2);
    if (this)
    {
      uint64_t v7 = *(void *)(v5 + 312);
      uint64_t v8 = *(void *)(v5 + 320);
      if (v7 != v8)
      {
        while (*(void *)(*(void *)v7 + 8) != this)
        {
          v7 += 8;
          if (v7 == v8) {
            return this;
          }
        }
      }
      if (v7 != v8) {
        *(unsigned char *)(*(void *)v7 + 28) = a3;
      }
    }
  }
  return this;
}

void sub_190133E88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (*(char *)(v23 - 17) < 0) {
    operator delete(*(void **)(v23 - 40));
  }
  _Unwind_Resume(exception_object);
}

void DSPGraph::Box::stopAnalyzing(DSPGraph::Box *this, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)((char *)this + 248);
  std::mutex::lock((std::mutex *)((char *)this + 248));
  uint64_t v5 = *((void *)this + 11);
  uint64_t v6 = *((void *)this + 12) - v5;
  if ((v6 & 0x1FFFFFFFE0) != 0)
  {
    if (a2 >= (unint64_t)(v6 >> 5))
    {
      std::string::basic_string[abi:ne180100]<0>(v23, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v22, "out");
      int v21 = (void *)((char *)this + 32);
      if (*((char *)this + 55) < 0) {
        int v21 = (void *)*v21;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v20, v21, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, a2);
    }
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)(v5 + 32 * a2) + 40))(v5 + 32 * a2);
    if (v7)
    {
      uint64_t v9 = (uint64_t *)*((void *)this + 39);
      uint64_t v8 = (uint64_t *)*((void *)this + 40);
      if (v9 == v8)
      {
LABEL_8:
        uint64_t v11 = (uint64_t *)*((void *)this + 40);
      }
      else
      {
        uint64_t v10 = v7;
        while (*(void *)(*v9 + 8) != v7)
        {
          if (++v9 == v8) {
            goto LABEL_8;
          }
        }
        caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::remove((unint64_t)this + 336, *(_DWORD *)(*v9 + 24));
        atomic_fetch_add((atomic_uint *volatile)this + 192, 0xFFFFFFFF);
        uint64_t v11 = v8;
        if (v9 != v8)
        {
          uint64_t v17 = v9 + 1;
          if (v9 + 1 == v8)
          {
            uint64_t v11 = v9;
          }
          else
          {
            uint64_t v11 = v9;
            do
            {
              uint64_t v18 = *v17;
              if (*(void *)(*v17 + 8) == v10)
              {
                caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::remove((unint64_t)this + 336, *(_DWORD *)(v18 + 24));
                atomic_fetch_add((atomic_uint *volatile)this + 192, 0xFFFFFFFF);
              }
              else
              {
                *uint64_t v17 = 0;
                uint64_t v19 = *v11;
                *uint64_t v11 = v18;
                if (v19) {
                  (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
                }
                ++v11;
              }
              ++v17;
            }
            while (v17 != v8);
          }
        }
      }
      unint64_t v12 = (uint64_t *)*((void *)this + 40);
      if (v11 != v12)
      {
        unint64_t v13 = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::unique_ptr<DSPGraph::Analyzer> *,std::unique_ptr<DSPGraph::Analyzer> *,std::unique_ptr<DSPGraph::Analyzer> *,0>(v12, *((uint64_t **)this + 40), v11);
        uint64_t v14 = (uint64_t *)*((void *)this + 40);
        while (v14 != v13)
        {
          uint64_t v16 = *--v14;
          uint64_t v15 = v16;
          *uint64_t v14 = 0;
          if (v16) {
            (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
          }
        }
        *((void *)this + 40) = v13;
      }
    }
  }
  std::mutex::unlock(v4);
}

void sub_190134140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  std::mutex::unlock(v29);
  _Unwind_Resume(a1);
}

uint64_t *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::unique_ptr<DSPGraph::Analyzer> *,std::unique_ptr<DSPGraph::Analyzer> *,std::unique_ptr<DSPGraph::Analyzer> *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      uint64_t v6 = *v5;
      *uint64_t v5 = 0;
      uint64_t v7 = *a3;
      *a3 = v6;
      if (v7) {
        (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
      }
      ++v5;
      ++a3;
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t DSPGraph::Box::recordEnable(DSPGraph::Box *this, uint64_t a2, char a3)
{
  uint64_t v5 = *((void *)this + 11);
  uint64_t v6 = *((void *)this + 12) - v5;
  if ((v6 & 0x1FFFFFFFE0) != 0)
  {
    if (a2 >= (unint64_t)(v6 >> 5))
    {
      std::string::basic_string[abi:ne180100]<0>(v19, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v18, "out");
      uint64_t v14 = (void *)((char *)this + 32);
      if (*((char *)this + 55) < 0) {
        uint64_t v14 = (void *)*v14;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v13, v14, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, a2);
    }
    uint64_t v7 = v5 + 32 * a2;
  }
  else
  {
    uint64_t v8 = *((void *)this + 8);
    if (a2 >= (unint64_t)((*((void *)this + 9) - v8) >> 5))
    {
      std::string::basic_string[abi:ne180100]<0>(v19, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v18, "in");
      uint64_t v17 = (void *)((char *)this + 32);
      if (*((char *)this + 55) < 0) {
        uint64_t v17 = (void *)*v17;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v16, v17, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, a2);
    }
    uint64_t v7 = v8 + 32 * a2;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 40))(v7);
  uint64_t v10 = *((void *)this + 25);
  uint64_t v11 = *((void *)this + 26);
  if (v10 != v11)
  {
    while (*(void *)(*(void *)v10 + 8) != result)
    {
      v10 += 8;
      if (v10 == v11) {
        return result;
      }
    }
  }
  if (v10 != v11) {
    *(unsigned char *)(*(void *)v10 + 88) = a3;
  }
  return result;
}

void sub_1901343DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (*(char *)(v23 - 17) < 0) {
    operator delete(*(void **)(v23 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Box::stopRecording(DSPGraph::Box *this, uint64_t a2)
{
  uint64_t v3 = *((void *)this + 11);
  uint64_t v4 = *((void *)this + 12) - v3;
  if ((v4 & 0x1FFFFFFFE0) != 0)
  {
    if (a2 >= (unint64_t)(v4 >> 5))
    {
      std::string::basic_string[abi:ne180100]<0>(v21, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v20, "out");
      uint64_t v7 = (void *)((char *)this + 32);
      if (*((char *)this + 55) < 0) {
        uint64_t v7 = (void *)*v7;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v6, v7, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, a2);
    }
  }
  else
  {
    uint64_t v3 = *((void *)this + 8);
    if (a2 >= (unint64_t)((*((void *)this + 9) - v3) >> 5))
    {
      std::string::basic_string[abi:ne180100]<0>(v21, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v20, "in");
      uint64_t v19 = (void *)((char *)this + 32);
      if (*((char *)this + 55) < 0) {
        uint64_t v19 = (void *)*v19;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v18, v19, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, a2);
    }
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(v3 + 32 * a2) + 40))(v3 + 32 * a2);
  uint64_t v9 = (uint64_t *)*((void *)this + 25);
  uint64_t v10 = (uint64_t *)*((void *)this + 26);
  if (v9 == v10)
  {
LABEL_11:
    unint64_t v12 = (uint64_t *)*((void *)this + 26);
  }
  else
  {
    uint64_t v11 = result;
    while (*(void *)(*v9 + 8) != result)
    {
      if (++v9 == v10) {
        goto LABEL_11;
      }
    }
    atomic_fetch_add((atomic_uint *volatile)this + 192, 0xFFFFFFFF);
    unint64_t v12 = v10;
    if (v9 != v10)
    {
      uint64_t v15 = v9 + 1;
      if (v9 + 1 == v10)
      {
        unint64_t v12 = v9;
      }
      else
      {
        unint64_t v12 = v9;
        do
        {
          uint64_t v16 = *v15;
          if (*(void *)(*v15 + 8) == v11)
          {
            atomic_fetch_add((atomic_uint *volatile)this + 192, 0xFFFFFFFF);
          }
          else
          {
            uint64_t *v15 = 0;
            uint64_t result = *v12;
            uint64_t *v12 = v16;
            if (result) {
              uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
            }
            ++v12;
          }
          ++v15;
        }
        while (v15 != v10);
      }
    }
  }
  unint64_t v13 = (uint64_t *)*((void *)this + 26);
  if (v12 != v13)
  {
    while (v13 != v12)
    {
      uint64_t v14 = *--v13;
      uint64_t result = v14;
      uint64_t *v13 = 0;
      if (v14) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
    *((void *)this + 2std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v12;
  }
  return result;
}

void sub_190134728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Box::record(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  uint64_t v6 = *(void *)(a1 + 96) - v5;
  if ((v6 & 0x1FFFFFFFE0) != 0)
  {
    if (a3 < (unint64_t)(v6 >> 5))
    {
      (*(void (**)(uint64_t))(*(void *)(v5 + 32 * a3) + 40))(v5 + 32 * a3);
      operator new();
    }
    std::string::basic_string[abi:ne180100]<0>(v15, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v14, "out");
    uint64_t v11 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      uint64_t v11 = (void *)*v11;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v10, v11, (uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 5, a3);
  }
  uint64_t v7 = *(void *)(a1 + 64);
  if (a3 >= (unint64_t)((*(void *)(a1 + 72) - v7) >> 5))
  {
    std::string::basic_string[abi:ne180100]<0>(v15, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v14, "in");
    unint64_t v13 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      unint64_t v13 = (void *)*v13;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v12, v13, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, a3);
  }
  uint64_t v8 = *(uint64_t (**)(void))(**(void **)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)(v7 + 32 * a3)
                                                                                          + 40))(v7 + 32 * a3)
                                                     + 8)
                                         + 8)
                           + 152);
  return v8();
}

void sub_190134B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Box::stopInjecting(DSPGraph::Box *this, uint64_t a2)
{
  uint64_t v3 = *((void *)this + 11);
  uint64_t v4 = *((void *)this + 12) - v3;
  if ((v4 & 0x1FFFFFFFE0) != 0)
  {
    if (a2 >= (unint64_t)(v4 >> 5))
    {
      std::string::basic_string[abi:ne180100]<0>(v21, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v20, "out");
      uint64_t v7 = (void *)((char *)this + 32);
      if (*((char *)this + 55) < 0) {
        uint64_t v7 = (void *)*v7;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v6, v7, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, a2);
    }
  }
  else
  {
    uint64_t v3 = *((void *)this + 8);
    if (a2 >= (unint64_t)((*((void *)this + 9) - v3) >> 5))
    {
      std::string::basic_string[abi:ne180100]<0>(v21, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v20, "in");
      uint64_t v19 = (void *)((char *)this + 32);
      if (*((char *)this + 55) < 0) {
        uint64_t v19 = (void *)*v19;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v18, v19, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, a2);
    }
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(v3 + 32 * a2) + 40))(v3 + 32 * a2);
  uint64_t v9 = (uint64_t *)*((void *)this + 28);
  uint64_t v10 = (uint64_t *)*((void *)this + 29);
  if (v9 == v10)
  {
LABEL_11:
    unint64_t v12 = (uint64_t *)*((void *)this + 29);
  }
  else
  {
    uint64_t v11 = result;
    while (*(void *)(*v9 + 8) != result)
    {
      if (++v9 == v10) {
        goto LABEL_11;
      }
    }
    atomic_fetch_add((atomic_uint *volatile)this + 192, 0xFFFFFFFF);
    unint64_t v12 = v10;
    if (v9 != v10)
    {
      uint64_t v15 = v9 + 1;
      if (v9 + 1 == v10)
      {
        unint64_t v12 = v9;
      }
      else
      {
        unint64_t v12 = v9;
        do
        {
          uint64_t v16 = *v15;
          if (*(void *)(*v15 + 8) == v11)
          {
            atomic_fetch_add((atomic_uint *volatile)this + 192, 0xFFFFFFFF);
          }
          else
          {
            uint64_t *v15 = 0;
            uint64_t result = *v12;
            uint64_t *v12 = v16;
            if (result) {
              uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
            }
            ++v12;
          }
          ++v15;
        }
        while (v15 != v10);
      }
    }
  }
  unint64_t v13 = (uint64_t *)*((void *)this + 29);
  if (v12 != v13)
  {
    while (v13 != v12)
    {
      uint64_t v14 = *--v13;
      uint64_t result = v14;
      uint64_t *v13 = 0;
      if (v14) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
    *((void *)this + 29) = v12;
  }
  return result;
}

void sub_190134EE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Box::inject(DSPGraph::Box *this, const char *a2, uint64_t a3)
{
  uint64_t v5 = *((void *)this + 11);
  uint64_t v6 = *((void *)this + 12) - v5;
  if ((v6 & 0x1FFFFFFFE0) != 0)
  {
    if (a3 < (unint64_t)(v6 >> 5))
    {
      (*(void (**)(uint64_t))(*(void *)(v5 + 32 * a3) + 40))(v5 + 32 * a3);
      operator new();
    }
    std::string::basic_string[abi:ne180100]<0>(v15, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v14, "out");
    uint64_t v11 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v11 = (void *)*v11;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v10, v11, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, a3);
  }
  uint64_t v7 = *((void *)this + 8);
  if (a3 >= (unint64_t)((*((void *)this + 9) - v7) >> 5))
  {
    std::string::basic_string[abi:ne180100]<0>(v15, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v14, "in");
    unint64_t v13 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      unint64_t v13 = (void *)*v13;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v12, v13, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, a3);
  }
  uint64_t v8 = *(uint64_t (**)(void))(**(void **)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)(v7 + 32 * a3)
                                                                                          + 40))(v7 + 32 * a3)
                                                     + 8)
                                         + 8)
                           + 136);
  return v8();
}

void sub_1901352C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

__n128 DSPGraph::DelayBox::getParameterInfo@<Q0>(int a1@<W1>, int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v5 = -10866;
  }
  else
  {
    if (!a2)
    {
      uint64_t v15 = 0;
      long long v13 = 0u;
      long long v11 = 0u;
      long long v12 = 0u;
      long long v9 = 0u;
      long long v10 = 0u;
      v14.n128_u64[0] = 5;
      v14.n128_u64[1] = 0x3F80000049742400;
      strlcpy((char *)&v9, "delay samples", 0x34uLL);
      *((void *)&v13 + 1) = @"delay samples";
      LODWORD(v15) = v15 | 0xC8000000;
      long long v6 = v10;
      *(_OWORD *)a3 = v9;
      *(_OWORD *)(a3 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v6;
      long long v7 = v12;
      *(_OWORD *)(a3 + 32) = v11;
      *(_OWORD *)(a3 + 48) = v7;
      __n128 result = v14;
      *(_OWORD *)(a3 + 64) = v13;
      *(__n128 *)(a3 + 80) = result;
      *(void *)(a3 + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v15;
      *(unsigned char *)(a3 + 104) = 1;
      return result;
    }
    int v5 = -10878;
  }
  *(_DWORD *)a3 = v5;
  *(unsigned char *)(a3 + 104) = 0;
  return result;
}

void sub_190135468(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void DSPGraph::DelayBox::getParameterList(int a1@<W1>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (!a1)
  {
    uint64_t v4 = operator new(4uLL);
    *a2 = v4;
    *v4++ = 0;
    a2[1] = v4;
    a2[2] = v4;
  }
}

float DSPGraph::DelayBox::getParameter(DSPGraph::DelayBox *this, int a2, int a3)
{
  if (a3 | a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v6, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v5, "getParameter");
    std::string::basic_string[abi:ne180100]<0>(&v4, "");
    DSPGraph::ThrowException(-10878, &v6, 3296, &v5, &v4);
  }
  return (float)*((unsigned int *)this + 199);
}

void sub_190135534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::DelayBox::setParameter(DSPGraph::DelayBox *this, int a2, int a3, float a4)
{
  if (a3 | a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v9, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v8, "setParameter");
    std::string::basic_string[abi:ne180100]<0>(&v7, "");
    DSPGraph::ThrowException(-10878, &v9, 3283, &v8, &v7);
  }
  unint64_t v4 = llroundf(a4);
  if (HIDWORD(v4))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::overflow_error::overflow_error[abi:ne180100](exception, "numerical cast overflow: could not retain value in conversion type");
  }
  return DSPGraph::DelayBox::setDelayFrames((uint64_t)this, v4);
}

void sub_19013564C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

unint64_t DSPGraph::DelayBox::selfLatencyInTicks(DSPGraph::DelayBox *this)
{
  uint64_t v3 = (char *)this + 88;
  uint64_t v2 = *((void *)this + 11);
  if (*((void *)v3 + 1) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(v10, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v9, "out");
    long long v8 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      long long v8 = (void *)*v8;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v7, v8, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
  }
  unint64_t v4 = *(void *)(*((void *)this + 1) + 696);
  uint64_t v5 = *((unsigned int *)this + 199);
  return v4 / **(double **)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2) + 120) * v5;
}

void sub_190135794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (*(char *)(v23 - 17) < 0) {
    operator delete(*(void **)(v23 - 40));
  }
  _Unwind_Resume(exception_object);
}

BOOL DSPGraph::DelayBox::canProcessInPlace(DSPGraph::DelayBox *this)
{
  return *((_DWORD *)this + 198) == 0;
}

void DSPGraph::Box::printShort(uint64_t a1, void *a2, unsigned int a3)
{
}

uint64_t DSPGraph::Box::print(uint64_t result, void *a2, int a3, uint64_t a4)
{
  if (a3 >= 2)
  {
    int v4 = a4;
    (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)result + 32))(result, a2, a4, 1);
    DSPGraph::printi(a2, v4 + 4, "graph %p\n");
  }
  return result;
}

const char *DSPGraph::DelayBox::ClassName(DSPGraph::DelayBox *this)
{
  return "DelayBox";
}

void DSPGraph::DelayBox::~DelayBox(DSPGraph::DelayBox *this)
{
  *(void *)this = &unk_1EDF9DC18;
  DSPGraph::SimpleABL::free((DSPGraph::DelayBox *)((char *)this + 776));
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x192FC8940);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EDF9DC18;
  DSPGraph::SimpleABL::free((DSPGraph::DelayBox *)((char *)this + 776));
  DSPGraph::Box::~Box(this);
}

void caulk::inplace_function_detail::vtable<void,caulk::concurrent::details::skiplist_node<unsigned int,DSPGraph::Analyzer *>::layout_vk const&>::vtable(void)::{lambda(void *,caulk::concurrent::details::skiplist_node<unsigned int,DSPGraph::Analyzer *>::layout_vk const&)#1}::__invoke()
{
  exception = __cxa_allocate_exception(8uLL);
}

uint64_t std::__shared_ptr_emplace<caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<unsigned int,DSPGraph::Analyzer *,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = 0;
  uint64_t v2 = a1 + 32;
  uint64_t v3 = a1 + 96;
  do
  {
    for (uint64_t i = *(void *)&caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<unsigned int,DSPGraph::Analyzer *,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>::Sizes[8 * v1];
          ;
          caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>::deallocate(v2, (unint64_t)v5, i))
    {
      uint64_t v5 = caulk::concurrent::stack<caulk::alloc::free_block,caulk::concurrent::intrusive_single_link_node<caulk::alloc::free_block>>::pop();
      if (!v5) {
        break;
      }
      atomic_fetch_add((atomic_ullong *volatile)(v3 + 32 * v1 + 16), 0xFFFFFFFFFFFFFFFFLL);
    }
    ++v1;
  }
  while (v1 != 10);
  return caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>::self_deallocate_all(v2);
}

void std::__shared_ptr_emplace<caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<unsigned int,DSPGraph::Analyzer *,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2A80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

void std::__shared_ptr_emplace<caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<unsigned int,DSPGraph::Analyzer *,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2A80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void DSPGraph::Box::getParameterInfo(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 1869640255;
  *(unsigned char *)(a1 + 104) = 0;
}

void DSPGraph::Box::getParameterList(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void DSPGraph::Box::getParameter(DSPGraph::Box *this)
{
  std::string::basic_string[abi:ne180100]<0>(&v3, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
  std::string::basic_string[abi:ne180100]<0>(&v2, "getParameter");
  std::string::basic_string[abi:ne180100]<0>(&v1, "Box::getParameter");
  DSPGraph::ThrowException(1869640255, &v3, 784, &v2, &v1);
}

void sub_190135CFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

void DSPGraph::Box::setParameter(DSPGraph::Box *this, float a2)
{
  std::string::basic_string[abi:ne180100]<0>(&v4, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
  std::string::basic_string[abi:ne180100]<0>(&v3, "setParameter");
  std::string::basic_string[abi:ne180100]<0>(&v2, "Box::setParameter");
  DSPGraph::ThrowException(1869640255, &v4, 794, &v3, &v2);
}

void sub_190135DAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

OpaqueAudioComponentInstance *DSPGraph::AUBox::close(DSPGraph::AUBox *this)
{
  __n128 result = (OpaqueAudioComponentInstance *)*((void *)this + 106);
  if (result)
  {
    __n128 result = (OpaqueAudioComponentInstance *)AudioComponentInstanceDispose(result);
    *((void *)this + 10std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
    if (result)
    {
      int v3 = (int)result;
      std::string::basic_string[abi:ne180100]<0>(&v6, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v5, "close");
      std::operator+<char>();
      DSPGraph::ThrowException(v3, &v6, 1973, &v5, &v4);
    }
  }
  return result;
}

void sub_190135E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

void DSPGraph::AUBox::decompileBox(uint64_t a1, uint64_t a2, char a3)
{
  int v3 = (char *)(a1 + 32);
  if ((a3 & 1) == 0)
  {
    if (*(char *)(a1 + 55) < 0) {
      int v3 = *(char **)v3;
    }
    std::string::basic_string[abi:ne180100]<0>(v9, v3);
    DSPGraph::asDecompileString(v9, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFTypeRef p_p = &__p;
    }
    else {
      CFTypeRef p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    DSPGraph::strprintf((DSPGraph *)"box %s ", v4, p_p);
  }
  if (*(char *)(a1 + 55) < 0) {
    int v3 = *(char **)v3;
  }
  uint64_t v6 = *(void *)(a1 + 56);
  std::string::basic_string[abi:ne180100]<0>(v9, v3);
  DSPGraph::asDecompileString(v9, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v8 = &__p;
  }
  else {
    long long v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  DSPGraph::strprintf((DSPGraph *)"box %qu %s ", v7, v6, v8);
}

void sub_190136098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (*(char *)(v23 - 33) < 0) {
    operator delete(*(void **)(v23 - 56));
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::AUBox::getFormatFromUnit@<X0>(AudioUnit *this@<X0>, AudioUnitScope inScope@<W1>, AudioUnitElement inElement@<W2>, void *a4@<X8>)
{
  a4[4] = 0;
  *(_OWORD *)a4 = 0u;
  *((_OWORD *)a4 + 1) = 0u;
  UInt32 ioDataSize = 40;
  uint64_t result = AudioUnitGetProperty(this[106], 8u, inScope, inElement, a4, &ioDataSize);
  if (result)
  {
    int v6 = result;
    std::string::basic_string[abi:ne180100]<0>(&v14, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v13, "getFormatFromUnit");
    std::string::basic_string[abi:ne180100]<0>(&v9, "AUBox::getFormatFromUnit ");
    long long v7 = (char *)(*((uint64_t (**)(AudioUnit *))*this + 2))(this);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v10, &v9, v7);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v11, &v10, " ");
    long long v8 = (char *)(this + 4);
    if (*((char *)this + 55) < 0) {
      long long v8 = *(char **)v8;
    }
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v12, &v11, v8);
    DSPGraph::ThrowException(v6, &v14, 2055, &v13, (long long *)&v12);
  }
  return result;
}

void sub_190136218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  if (*(char *)(v33 - 25) < 0) {
    operator delete(*(void **)(v33 - 48));
  }
  _Unwind_Resume(exception_object);
}

void DSPGraph::AUBox::getComponentName(AudioComponentInstance *this@<X0>, uint64_t a2@<X8>)
{
  Component = AudioComponentInstanceGetComponent(this[106]);
  if (Component && (std::string v9 = 0, !Impl_AudioGetComponentInfo(Component, 0, (const __CFString **)&v9)))
  {
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v8, v9);
    if (!v8)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    applesauce::CF::convert_to<std::string,0>((uint64_t)&v6, v8);
    *(_OWORD *)a2 = v6;
    CFStringRef v4 = v8;
    *(void *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v7;
    *(unsigned char *)(a2 + 24) = 1;
    if (v4) {
      CFRelease(v4);
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 24) = 0;
  }
}

void sub_190136378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, const void *a13)
{
  __cxa_free_exception(v13);
  applesauce::CF::StringRef::~StringRef(&a13);
  _Unwind_Resume(a1);
}

applesauce::CF::DictionaryRef *DSPGraph::AUBox::getPreset@<X0>(DSPGraph::AUBox *this@<X0>, applesauce::CF::DictionaryRef *a2@<X8>)
{
  CFTypeRef v10 = 0;
  int v9 = 8;
  int v3 = (*(uint64_t (**)(DSPGraph::AUBox *, void, void, void, int *, CFTypeRef *))(*(void *)this + 304))(this, 0, 0, 0, &v9, &v10);
  if (v3)
  {
    int v5 = v3;
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v7, "getPreset");
    std::string::basic_string[abi:ne180100]<0>(&v6, "AudioUnitGetProperty ClassInfo");
    DSPGraph::ThrowException(v5, &v8, 1810, &v7, &v6);
  }
  return applesauce::CF::DictionaryRef::DictionaryRef(a2, v10);
}

void sub_190136474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

unint64_t DSPGraph::AUBox::getPropertyInfo(AudioUnit *this, AudioUnitPropertyID a2, AudioUnitScope a3, AudioUnitElement a4)
{
  UInt32 outDataSize = 0;
  Boolean outWritable = 0;
  unsigned int PropertyInfo = AudioUnitGetPropertyInfo(this[106], a2, a3, a4, &outDataSize, &outWritable);
  unint64_t v5 = (unint64_t)(outWritable != 0) << 32;
  if (PropertyInfo) {
    uint64_t v6 = PropertyInfo;
  }
  else {
    uint64_t v6 = outDataSize;
  }
  if (PropertyInfo) {
    unint64_t v5 = 0;
  }
  return v5 | v6;
}

BOOL DSPGraph::AUBox::usesFixedBlockSize(DSPGraph::AUBox *this)
{
  int v8 = 4;
  int v9 = 0;
  (*(void (**)(DSPGraph::AUBox *, uint64_t, void, void, int *, int *))(*(void *)this + 304))(this, 3700, 0, 0, &v8, &v9);
  int v2 = (*(uint64_t (**)(DSPGraph::AUBox *, uint64_t, void, void, int *, int *))(*(void *)this + 304))(this, 3700, 0, 0, &v8, &v9);
  if (v2)
  {
    int v4 = v2;
    std::string::basic_string[abi:ne180100]<0>(&v7, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v6, "usesFixedBlockSize");
    std::string::basic_string[abi:ne180100]<0>(&v5, "getProperty failed");
    DSPGraph::ThrowException(v4, &v7, 2035, &v6, &v5);
  }
  return v9 != 0;
}

void sub_190136640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::AUBox::setUsesFixedBlockSize(DSPGraph::AUBox *this, int a2)
{
  uint64_t result = (*(uint64_t (**)(DSPGraph::AUBox *, uint64_t, void, void))(*(void *)this + 296))(this, 3700, 0, 0);
  if (v5) {
    BOOL v6 = (result & 0xFF00000000) == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    int v7 = a2;
    return (*(uint64_t (**)(DSPGraph::AUBox *, uint64_t, void, void, uint64_t, int *))(*(void *)this
                                                                                                 + 312))(this, 3700, 0, 0, 4, &v7);
  }
  return result;
}

uint64_t DSPGraph::AUBox::getParameterInfo@<X0>(DSPGraph::AUBox *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = 0;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  int v8 = 104;
  uint64_t result = (*(uint64_t (**)(void))(*(void *)this + 304))();
  if (result)
  {
    char v4 = 0;
    *(_DWORD *)a2 = result;
  }
  else
  {
    long long v5 = v14;
    *(_OWORD *)(a2 + 64) = v13;
    *(_OWORD *)(a2 + 80) = v5;
    *(void *)(a2 + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v15;
    long long v6 = v10;
    *(_OWORD *)a2 = v9;
    *(_OWORD *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v6;
    long long v7 = v12;
    char v4 = 1;
    *(_OWORD *)(a2 + 32) = v11;
    *(_OWORD *)(a2 + 48) = v7;
  }
  *(unsigned char *)(a2 + 104) = v4;
  return result;
}

void sub_190136840(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

double DSPGraph::AUBox::getParameterList@<D0>(DSPGraph::AUBox *this@<X0>, uint64_t a2@<X1>, std::vector<unsigned int> *a3@<X8>)
{
  unsigned int v6 = (*(uint64_t (**)(DSPGraph::AUBox *, uint64_t, uint64_t, void))(*(void *)this + 296))(this, 3, a2, 0);
  unsigned int v8 = v6;
  if (v9) {
    BOOL v10 = v6 > 3;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    std::vector<unsigned int>::vector(&v12, v6 >> 2);
    unsigned int v11 = v8 & 0xFFFFFFFC;
    if ((*(unsigned int (**)(DSPGraph::AUBox *, uint64_t, uint64_t, void, unsigned int *, std::vector<unsigned int>::pointer))(*(void *)this + 304))(this, 3, a2, 0, &v11, v12.__begin_))
    {
      a3->__begin_ = 0;
      a3->__end_ = 0;
      a3->__end_cap_.__value_ = 0;
      if (v12.__begin_)
      {
        v12.__end_ = v12.__begin_;
        operator delete(v12.__begin_);
      }
    }
    else
    {
      double result = *(double *)&v12.__begin_;
      *a3 = v12;
    }
  }
  else
  {
    a3->__begin_ = 0;
    a3->__end_ = 0;
    a3->__end_cap_.__value_ = 0;
  }
  return result;
}

void sub_190136970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL DSPGraph::AUBox::isBypassed(DSPGraph::AUBox *this)
{
  int v4 = 0;
  int v3 = 4;
  if ((*(unsigned int (**)(DSPGraph::AUBox *, uint64_t, void, void, int *, int *))(*(void *)this + 304))(this, 21, 0, 0, &v3, &v4))
  {
    BOOL v1 = 1;
  }
  else
  {
    BOOL v1 = v4 == 0;
  }
  return !v1;
}

BOOL DSPGraph::AUBox::canBypass(DSPGraph::AUBox *this)
{
  return ((*(uint64_t (**)(DSPGraph::AUBox *, uint64_t, void, void))(*(void *)this + 296))(this, 21, 0, 0) & 0xFF00000000) != 0&& v1 != 0;
}

void DSPGraph::AUBox::printShort(uint64_t a1, void *a2, unsigned int a3)
{
}

uint64_t DSPGraph::AUBox::print(uint64_t result, void *a2, int a3, uint64_t a4)
{
  if (a3 >= 2)
  {
    int v4 = a4;
    DSPGraph::Box::print(result, a2, a3, a4);
    DSPGraph::printi(a2, v4 + 4, "enabled %d\n");
  }
  return result;
}

void DSPGraph::ParameterTap::print(int a1, void *a2, unsigned int a3)
{
}

const char *DSPGraph::AUBox::ClassName(DSPGraph::AUBox *this)
{
  return "AUBox";
}

void DSPGraph::AUBox::~AUBox(DSPGraph::AUBox *this)
{
  *(void *)this = &unk_1EDF9C558;
  int v2 = (void *)*((void *)this + 100);
  if (v2)
  {
    *((void *)this + 101) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 97);
  if (v3)
  {
    *((void *)this + 98) = v3;
    operator delete(v3);
  }
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x192FC8940);
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EDF9C558;
  int v2 = (void *)*((void *)this + 100);
  if (v2)
  {
    *((void *)this + 101) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 97);
  if (v3)
  {
    *((void *)this + 98) = v3;
    operator delete(v3);
  }
  DSPGraph::Box::~Box(this);
}

char *DSPGraph::TestBox::process(DSPGraph::TestBox *this)
{
  int v4 = (char *)this + 64;
  double result = (char *)*((void *)this + 8);
  int v3 = (char *)*((void *)v4 + 1);
  if (((v3 - result) & 0x1FFFFFFFE0) != 0)
  {
    if (v3 == result)
    {
      std::string::basic_string[abi:ne180100]<0>(v22, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v21, "in");
      uint64_t v18 = (void *)((char *)this + 32);
      if (*((char *)this + 55) < 0) {
        uint64_t v18 = (void *)*v18;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v17, v18, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
    }
    uint64_t v5 = (*(uint64_t (**)(char *))(*(void *)result + 40))(result);
    uint64_t v6 = *((void *)this + 8);
    if (*((void *)this + 9) == v6)
    {
      std::string::basic_string[abi:ne180100]<0>(v22, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v21, "in");
      uint64_t v20 = (void *)((char *)this + 32);
      if (*((char *)this + 55) < 0) {
        uint64_t v20 = (void *)*v20;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v19, v20, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
    }
    int v7 = *(_DWORD *)(*(void *)(v5 + 56) + 72);
    double result = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 40))(v6);
    char v9 = (char *)*((void *)this + 11);
    unsigned int v8 = (char *)*((void *)this + 12);
    if (v9 != v8)
    {
      BOOL v10 = (_OWORD *)(*((void *)result + 7) + 8);
      double result = v9;
      unsigned int v11 = v9;
      do
      {
        uint64_t v12 = *(void *)v11;
        v11 += 32;
        uint64_t v13 = *(void *)((*(uint64_t (**)(char *))(v12 + 40))(result) + 56);
        long long v15 = v10[2];
        long long v14 = v10[3];
        long long v16 = v10[1];
        *(_OWORD *)(v13 + 8) = *v10;
        *(_OWORD *)(v13 + 24) = v16;
        *(_OWORD *)(v13 + 40) = v15;
        *(_OWORD *)(v13 + 5std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v14;
        *(_DWORD *)(v13 + 72) = v7;
        v9 += 32;
        double result = v11;
      }
      while (v11 != v8);
    }
  }
  return result;
}

void sub_190136F70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

double DSPGraph::TestBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result = 4.91466378e252;
  *(_OWORD *)a1 = xmmword_1901C6380;
  *(_DWORD *)(a1 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
  return result;
}

uint64_t DSPGraph::TestBox::canProcessInPlace(DSPGraph::TestBox *this)
{
  return *((unsigned __int8 *)this + 772);
}

const char *DSPGraph::TestBox::ClassName(DSPGraph::TestBox *this)
{
  return "test";
}

void DSPGraph::TestBox::~TestBox(DSPGraph::TestBox *this)
{
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x192FC8940);
}

uint64_t DSPGraph::CopyBox::initialize(DSPGraph::CopyBox *this)
{
  DSPGraph::Box::initialize(this);
  uint64_t v2 = *((void *)this + 8);
  if (*((void *)this + 9) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v14, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v13, "in");
    char v9 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      char v9 = (void *)*v9;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v8, v9, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
  }
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
  uint64_t v4 = *((void *)this + 11);
  if (*((void *)this + 12) == v4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v14, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v13, "out");
    unsigned int v11 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      unsigned int v11 = (void *)*v11;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v10, v11, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
  }
  uint64_t v5 = *(const void **)(v3 + 120);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
  uint64_t result = memcmp(v5, *(const void **)(v6 + 120), 0x28uLL);
  if (result)
  {
    std::string::basic_string[abi:ne180100]<0>(&v14, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v13, "initialize");
    std::string::basic_string[abi:ne180100]<0>(&v12, "CopyBox input and output format mismatch");
    DSPGraph::ThrowException(1718444833, &v14, 2150, &v13, &v12);
  }
  return result;
}

void sub_19013720C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (*(char *)(v23 - 17) < 0) {
    operator delete(*(void **)(v23 - 40));
  }
  _Unwind_Resume(exception_object);
}

void *DSPGraph::CopyBox::process(DSPGraph::CopyBox *this, int a2)
{
  uint64_t v4 = (char *)this + 64;
  uint64_t v3 = *((void *)this + 8);
  if (*((void *)v4 + 1) == v3)
  {
    std::string::basic_string[abi:ne180100]<0>(v38, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v37, "in");
    unsigned int v28 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      unsigned int v28 = (void *)*v28;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v27, v28, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 40))(v3);
  uint64_t v7 = *((void *)this + 11);
  if (*((void *)this + 12) == v7)
  {
    std::string::basic_string[abi:ne180100]<0>(v38, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v37, "out");
    double v30 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      double v30 = (void *)*v30;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v29, v30, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
  }
  uint64_t v8 = *(void *)(v6 + 56);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 40))(v7);
  uint64_t v10 = *((void *)this + 8);
  if (*((void *)this + 9) == v10)
  {
    std::string::basic_string[abi:ne180100]<0>(v38, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v37, "in");
    uint64_t v32 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v32 = (void *)*v32;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v31, v32, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
  }
  unsigned int v11 = (unsigned int **)(*(void *)(v9 + 56) + 80);
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10);
  DSPGraph::SimpleABL::copy((unsigned int **)(v8 + 80), v11, 0, 0, (*(_DWORD *)(*(void *)(v12 + 120) + 24) * a2), 1);
  uint64_t v13 = *((void *)this + 8);
  if (*((void *)this + 9) == v13)
  {
    std::string::basic_string[abi:ne180100]<0>(v38, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v37, "in");
    uint64_t v34 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v34 = (void *)*v34;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v33, v34, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 40))(v13);
  uint64_t v15 = *((void *)this + 8);
  if (*((void *)this + 9) == v15)
  {
    std::string::basic_string[abi:ne180100]<0>(v38, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v37, "in");
    long long v36 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      long long v36 = (void *)*v36;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v35, v36, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
  }
  int v16 = *(_DWORD *)(*(void *)(v14 + 56) + 72);
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 40))(v15);
  uint64_t v19 = *((void *)this + 11);
  uint64_t v18 = (void *)*((void *)this + 12);
  if ((void *)v19 != v18)
  {
    uint64_t v20 = (_OWORD *)(result[7] + 8);
    uint64_t result = (void *)v19;
    uint64_t v21 = (void *)v19;
    do
    {
      uint64_t v22 = *v21;
      v21 += 4;
      uint64_t v23 = *(void *)((*(uint64_t (**)(void *))(v22 + 40))(result) + 56);
      long long v25 = v20[2];
      long long v24 = v20[3];
      long long v26 = v20[1];
      *(_OWORD *)(v23 + 8) = *v20;
      *(_OWORD *)(v23 + 24) = v26;
      *(_OWORD *)(v23 + 40) = v25;
      *(_OWORD *)(v23 + 5std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v24;
      *(_DWORD *)(v23 + 72) = v16;
      v19 += 32;
      uint64_t result = v21;
    }
    while (v21 != v18);
  }
  return result;
}

void sub_190137698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::CopyBox::hasPresetData(DSPGraph::CopyBox *this)
{
  return 0;
}

double DSPGraph::CopyBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result = 9.49207469e170;
  *(_OWORD *)a1 = xmmword_1901C6340;
  *(_DWORD *)(a1 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
  return result;
}

const char *DSPGraph::CopyBox::ClassName(DSPGraph::CopyBox *this)
{
  return "copy";
}

void DSPGraph::CopyBox::~CopyBox(DSPGraph::CopyBox *this)
{
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x192FC8940);
}

uint64_t DSPGraph::ArithmeticAbsBox::initialize(DSPGraph::ArithmeticAbsBox *this)
{
  DSPGraph::Box::initialize(this);
  uint64_t v2 = *((void *)this + 8);
  uint64_t v3 = *((void *)this + 9);
  if (((v3 - v2) & 0x1FFFFFFFE0) != 0x20
    || ((*((void *)this + 12) - *((void *)this + 11)) & 0x1FFFFFFFE0) != 0x20)
  {
    std::string::basic_string[abi:ne180100]<0>(v32, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(v31, "initialize");
    DSPGraph::strprintf((DSPGraph *)"There must be one input and one output, instead of %u and %u.", v10, (*((void *)this + 9) - *((void *)this + 8)) >> 5, (*((void *)this + 12) - *((void *)this + 11)) >> 5);
  }
  if (v3 == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(v32, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v31, "in");
    uint64_t v12 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v12 = (void *)*v12;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v11, v12, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
  }
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
  uint64_t v5 = *((void *)this + 11);
  if (*((void *)this + 12) == v5)
  {
    std::string::basic_string[abi:ne180100]<0>(v32, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v31, "out");
    uint64_t v14 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v14 = (void *)*v14;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v13, v14, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
  }
  int v6 = *(_DWORD *)(*(void *)(v4 + 120) + 28);
  if (v6 != *(_DWORD *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v5 + 40))(v5) + 120) + 28))
  {
    std::string::basic_string[abi:ne180100]<0>(&v30, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(v29, "initialize");
    uint64_t v15 = *((void *)this + 8);
    if (*((void *)this + 9) == v15)
    {
      std::string::basic_string[abi:ne180100]<0>(v32, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v31, "in");
      uint64_t v17 = (void *)((char *)this + 32);
      if (*((char *)this + 55) < 0) {
        uint64_t v17 = (void *)*v17;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v16, v17, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
    }
    uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 40))(v15);
    uint64_t v23 = *((void *)this + 11);
    if (*((void *)this + 12) == v23)
    {
      std::string::basic_string[abi:ne180100]<0>(v32, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v31, "out");
      long long v25 = (void *)((char *)this + 32);
      if (*((char *)this + 55) < 0) {
        long long v25 = (void *)*v25;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v24, v25, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
    }
    uint64_t v26 = *(unsigned int *)(*(void *)(v22 + 120) + 28);
    uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 40))(v23);
    DSPGraph::strprintf((DSPGraph *)"The input and output must have the same channel count, but have %u and %u.", v28, v26, *(unsigned int *)(*(void *)(v27 + 120) + 28));
  }
  uint64_t v7 = *((void *)this + 11);
  if (*((void *)this + 12) == v7)
  {
    std::string::basic_string[abi:ne180100]<0>(v32, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v31, "out");
    uint64_t v19 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v19 = (void *)*v19;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v18, v19, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 40))(v7);
  unsigned int v9 = *(_DWORD *)(*(void *)(result + 120) + 8);
  if (v9 != 1819304813)
  {
    std::string::basic_string[abi:ne180100]<0>(v32, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(v31, "initialize");
    caulk::string_from_4cc(&v30, v9);
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v21 = &v30;
    }
    else {
      uint64_t v21 = (std::string *)v30.__r_.__value_.__r.__words[0];
    }
    DSPGraph::strprintf((DSPGraph *)"The output must have 'lpcm' format, but has %s instead.", v20, v21);
  }
  return result;
}

void sub_190137C78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v29 - 41) < 0) {
    operator delete(*(void **)(v29 - 64));
  }
  if (*(char *)(v29 - 17) < 0) {
    operator delete(*(void **)(v29 - 40));
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

std::string *caulk::string_from_4cc(std::string *retstr, unsigned int __val)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int v2 = bswap32(__val);
  int v5 = v2;
  if (((char)v2 - 32) > 0x5E
    || (((__int16)v2 >> 8) - 32) > 0x5E
    || ((v2 << 8 >> 24) - 32) > 0x5E
    || ((v2 >> 24) - 32) > 0x5E)
  {
    return std::to_string(retstr, __val);
  }
  __int16 v6 = 39;
  char v4 = 39;
  return (std::string *)std::string::basic_string[abi:ne180100]<0>(retstr, &v4);
}

void sub_190137E50(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *DSPGraph::ArithmeticAbsBox::process(DSPGraph::ArithmeticAbsBox *this, unsigned int a2)
{
  char v4 = (char *)this + 64;
  uint64_t v3 = *((void *)this + 8);
  if (*((void *)v4 + 1) == v3)
  {
    std::string::basic_string[abi:ne180100]<0>(&__A, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v60, "in");
    long long v37 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      long long v37 = (void *)*v37;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v36, v37, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 40))(v3);
  uint64_t v7 = *((void *)this + 11);
  if (*((void *)this + 12) == v7)
  {
    std::string::basic_string[abi:ne180100]<0>(&__A, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v60, "out");
    uint64_t v39 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v39 = (void *)*v39;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v38, v39, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
  }
  uint64_t v8 = *(_DWORD **)(*(void *)(v6 + 56) + 80);
  unsigned int v9 = *(unsigned int **)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v7 + 40))(v7) + 56) + 80);
  if (*v8 != *v9)
  {
    std::string::basic_string[abi:ne180100]<0>(v59, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(v58, "process");
    uint64_t v40 = *((void *)this + 8);
    if (*((void *)this + 9) == v40)
    {
      std::string::basic_string[abi:ne180100]<0>(&__A, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v60, "in");
      uint64_t v42 = (void *)((char *)this + 32);
      if (*((char *)this + 55) < 0) {
        uint64_t v42 = (void *)*v42;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v41, v42, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
    }
    uint64_t v51 = (*(uint64_t (**)(uint64_t))(*(void *)v40 + 40))(v40);
    uint64_t v52 = *((void *)this + 11);
    if (*((void *)this + 12) == v52)
    {
      std::string::basic_string[abi:ne180100]<0>(&__A, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v60, "out");
      uint64_t v54 = (void *)((char *)this + 32);
      if (*((char *)this + 55) < 0) {
        uint64_t v54 = (void *)*v54;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v53, v54, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
    }
    uint64_t v55 = *(unsigned int *)(*(void *)(v51 + 120) + 28);
    uint64_t v56 = (*(uint64_t (**)(uint64_t))(*(void *)v52 + 40))(v52);
    DSPGraph::strprintf((DSPGraph *)"The input and output must have the same channel count, but have %u and %u.", v57, v55, *(unsigned int *)(*(void *)(v56 + 120) + 28));
  }
  uint64_t v10 = *((void *)this + 8);
  if (*((void *)this + 9) == v10)
  {
    std::string::basic_string[abi:ne180100]<0>(&__A, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v60, "in");
    BOOL v44 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      BOOL v44 = (void *)*v44;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v43, v44, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
  }
  int v11 = *(_DWORD *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10) + 120) + 8);
  char v12 = 2;
  if (v11 == 1718773105) {
    char v12 = 3;
  }
  unint64_t v13 = (unint64_t)a2 << v12;
  if (v13 > v8[3])
  {
    std::string::basic_string[abi:ne180100]<0>(&__A, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(v60, "process");
    DSPGraph::strprintf((DSPGraph *)"The buffer passed for input 0 should be at least %u bytes, but is %u.", v45, v13, v8[3]);
  }
  int v14 = 4 * a2;
  if (4 * (unint64_t)a2 > v9[3])
  {
    std::string::basic_string[abi:ne180100]<0>(&__A, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(v60, "process");
    DSPGraph::strprintf((DSPGraph *)"The buffer passed for output 0 should be at least %u bytes, but is %u.", v46, 4 * a2, v9[3]);
  }
  int v15 = *v9;
  if (v11 == 1718773105)
  {
    if (v15)
    {
      uint64_t v16 = 0;
      unint64_t v17 = 0;
      uint64_t v18 = v8 + 4;
      do
      {
        __A.realp = 0;
        __A.imagp = 0;
        __A.realp = *(float **)&v18[v16];
        __A.imagp = &__A.realp[a2];
        vDSP_zvabs(&__A, 1, *(float **)&v9[v16 + 4], 1, a2);
        v9[v16 + 3] = v14;
        ++v17;
        v16 += 4;
      }
      while (v17 < *v9);
    }
  }
  else if (v15)
  {
    uint64_t v19 = 0;
    unint64_t v20 = 0;
    uint64_t v21 = v8 + 4;
    do
    {
      vDSP_vabs(*(const float **)&v21[v19], 1, *(float **)&v9[v19 + 4], 1, a2);
      v9[v19 + 3] = v14;
      ++v20;
      v19 += 4;
    }
    while (v20 < *v9);
  }
  uint64_t v22 = *((void *)this + 8);
  if (*((void *)this + 9) == v22)
  {
    std::string::basic_string[abi:ne180100]<0>(&__A, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v60, "in");
    uint64_t v48 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v48 = (void *)*v48;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v47, v48, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
  }
  uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 40))(v22);
  uint64_t v24 = *((void *)this + 8);
  if (*((void *)this + 9) == v24)
  {
    std::string::basic_string[abi:ne180100]<0>(&__A, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v60, "in");
    unsigned int v50 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      unsigned int v50 = (void *)*v50;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v49, v50, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
  }
  int v25 = *(_DWORD *)(*(void *)(v23 + 56) + 72);
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v24 + 40))(v24);
  uint64_t v28 = *((void *)this + 11);
  uint64_t v27 = (void *)*((void *)this + 12);
  if ((void *)v28 != v27)
  {
    uint64_t v29 = (_OWORD *)(result[7] + 8);
    uint64_t result = (void *)v28;
    std::string v30 = (void *)v28;
    do
    {
      uint64_t v31 = *v30;
      v30 += 4;
      uint64_t v32 = *(void *)((*(uint64_t (**)(void *))(v31 + 40))(result) + 56);
      long long v34 = v29[2];
      long long v33 = v29[3];
      long long v35 = v29[1];
      *(_OWORD *)(v32 + 8) = *v29;
      *(_OWORD *)(v32 + 24) = v35;
      *(_OWORD *)(v32 + 40) = v34;
      *(_OWORD *)(v32 + 5std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v33;
      *(_DWORD *)(v32 + 72) = v25;
      v28 += 32;
      uint64_t result = v30;
    }
    while (v30 != v27);
  }
  return result;
}

void sub_1901385C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (*(char *)(v35 - 65) < 0) {
    operator delete(*(void **)(v35 - 88));
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

double DSPGraph::ArithmeticAbsBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result = 1.22205774e161;
  *(_OWORD *)a1 = xmmword_1901C6310;
  *(_DWORD *)(a1 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
  return result;
}

const char *DSPGraph::ArithmeticAbsBox::ClassName(DSPGraph::ArithmeticAbsBox *this)
{
  return "aabs";
}

void DSPGraph::ArithmeticAbsBox::~ArithmeticAbsBox(DSPGraph::ArithmeticAbsBox *this)
{
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x192FC8940);
}

void DSPGraph::VectorGainBox::initialize(char **this)
{
  DSPGraph::Box::initialize((DSPGraph::Box *)this);
  int v2 = this[8];
  uint64_t v3 = this[9];
  if (((v3 - v2) & 0x1FFFFFFFE0) != 0x20 || ((this[12] - this[11]) & 0x1FFFFFFFE0) != 0x20)
  {
    std::string::basic_string[abi:ne180100]<0>(v70, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&__p, "initialize");
    DSPGraph::strprintf((DSPGraph *)"There must be one input and output, instead of %u and %u.", v34, (unint64_t)(this[9] - this[8]) >> 5, (unint64_t)(this[12] - this[11]) >> 5);
  }
  if (v3 == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(v70, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&__p, "in");
    uint64_t v39 = this + 4;
    if (*((char *)this + 55) < 0) {
      uint64_t v39 = (void *)*v39;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v38, v39, (this[9] - this[8]) >> 5, 0);
  }
  uint64_t v4 = (*(uint64_t (**)(char *))(*(void *)v2 + 40))(v2);
  int v5 = this[11];
  if (this[12] == v5)
  {
    std::string::basic_string[abi:ne180100]<0>(v70, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&__p, "out");
    uint64_t v41 = this + 4;
    if (*((char *)this + 55) < 0) {
      uint64_t v41 = (void *)*v41;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v40, v41, (this[12] - this[11]) >> 5, 0);
  }
  int v6 = *(_DWORD *)(*(void *)(v4 + 120) + 28);
  if (v6 != *(_DWORD *)(*(void *)((*(uint64_t (**)(char *))(*(void *)v5 + 40))(v5) + 120) + 28))
  {
    std::string::basic_string[abi:ne180100]<0>(v66, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(v65, "initialize");
    uint64_t v42 = this[8];
    if (this[9] == v42)
    {
      std::string::basic_string[abi:ne180100]<0>(v70, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&__p, "in");
      BOOL v44 = this + 4;
      if (*((char *)this + 55) < 0) {
        BOOL v44 = (void *)*v44;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v43, v44, (this[9] - this[8]) >> 5, 0);
    }
    uint64_t v55 = (*(uint64_t (**)(char *))(*(void *)v42 + 40))(v42);
    uint64_t v56 = this[11];
    if (this[12] == v56)
    {
      std::string::basic_string[abi:ne180100]<0>(v70, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&__p, "out");
      unsigned int v58 = this + 4;
      if (*((char *)this + 55) < 0) {
        unsigned int v58 = (void *)*v58;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v57, v58, (this[12] - this[11]) >> 5, 0);
    }
    uint64_t v62 = *(unsigned int *)(*(void *)(v55 + 120) + 28);
    uint64_t v63 = (*(uint64_t (**)(char *))(*(void *)v56 + 40))(v56);
    DSPGraph::strprintf((DSPGraph *)"The input and output ports must have the same number of channels, but have %u and %u.", v64, v62, *(unsigned int *)(*(void *)(v63 + 120) + 28));
  }
  uint64_t v7 = this[8];
  if (this[9] == v7)
  {
    std::string::basic_string[abi:ne180100]<0>(v70, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&__p, "in");
    char v46 = this + 4;
    if (*((char *)this + 55) < 0) {
      char v46 = (void *)*v46;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v45, v46, (this[9] - this[8]) >> 5, 0);
  }
  if (*(_DWORD *)(*(void *)((*(uint64_t (**)(char *))(*(void *)v7 + 40))(v7) + 120) + 8) != 1718773105) {
    goto LABEL_35;
  }
  uint64_t v8 = this[11];
  if (this[12] == v8)
  {
    std::string::basic_string[abi:ne180100]<0>(v70, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&__p, "out");
    uint64_t v48 = this + 4;
    if (*((char *)this + 55) < 0) {
      uint64_t v48 = (void *)*v48;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v47, v48, (this[12] - this[11]) >> 5, 0);
  }
  if (*(_DWORD *)(*(void *)((*(uint64_t (**)(char *))(*(void *)v8 + 40))(v8) + 120) + 8) != 1718773105)
  {
LABEL_35:
    std::string::basic_string[abi:ne180100]<0>(v66, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(v65, "initialize");
    uint64_t v35 = this[8];
    if (this[9] == v35)
    {
      std::string::basic_string[abi:ne180100]<0>(v70, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&__p, "in");
      long long v37 = this + 4;
      if (*((char *)this + 55) < 0) {
        long long v37 = (void *)*v37;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v36, v37, (this[9] - this[8]) >> 5, 0);
    }
    uint64_t v51 = (*(uint64_t (**)(char *))(*(void *)v35 + 40))(v35);
    uint64_t v52 = this[11];
    if (this[12] == v52)
    {
      std::string::basic_string[abi:ne180100]<0>(v70, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&__p, "out");
      uint64_t v54 = this + 4;
      if (*((char *)this + 55) < 0) {
        uint64_t v54 = (void *)*v54;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v53, v54, (this[12] - this[11]) >> 5, 0);
    }
    if (*(_DWORD *)(*(void *)(v51 + 120) + 8) == 1718773105) {
      int v59 = "freq";
    }
    else {
      int v59 = "time";
    }
    if (*(_DWORD *)(*(void *)((*(uint64_t (**)(char *))(*(void *)v52 + 40))(v52) + 120) + 8) == 1718773105) {
      long long v61 = "freq";
    }
    else {
      long long v61 = "time";
    }
    DSPGraph::strprintf((DSPGraph *)"The input and output must both be frequency-domain, but are '%s' and '%s'", v60, v59, v61);
  }
  unsigned int v9 = this[8];
  if (this[9] == v9)
  {
    std::string::basic_string[abi:ne180100]<0>(v70, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&__p, "in");
    unsigned int v50 = this + 4;
    if (*((char *)this + 55) < 0) {
      unsigned int v50 = (void *)*v50;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v49, v50, (this[9] - this[8]) >> 5, 0);
  }
  unint64_t v10 = *(unsigned int *)(*(void *)((*(uint64_t (**)(char *))(*(void *)v9 + 40))(v9) + 120) + 40);
  *((_DWORD *)this + 193) = v10;
  unint64_t v11 = *((unsigned int *)this + 194);
  v67[0] = 1065353216;
  std::vector<float>::vector(&__p, v10, v67);
  char v12 = this[102];
  unint64_t v13 = this[101];
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v13) >> 3);
  unint64_t v15 = v11 - v14;
  if (v11 <= v14)
  {
    if (v11 < v14)
    {
      uint64_t v27 = &v13[24 * v11];
      if (v12 != v27)
      {
        uint64_t v28 = this[102];
        do
        {
          std::string v30 = (void *)*((void *)v28 - 3);
          v28 -= 24;
          uint64_t v29 = v30;
          if (v30)
          {
            *((void *)v12 - 2) = v29;
            operator delete(v29);
          }
          char v12 = v28;
        }
        while (v28 != v27);
      }
      this[102] = v27;
    }
  }
  else
  {
    uint64_t v16 = this[103];
    if (0xAAAAAAAAAAAAAAABLL * ((v16 - v12) >> 3) >= v15)
    {
      uint64_t v31 = &v12[24 * v15];
      uint64_t v32 = 24 * v11 - 8 * ((v12 - v13) >> 3);
      do
      {
        *(void *)char v12 = 0;
        *((void *)v12 + 1) = 0;
        *((void *)v12 + 2) = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v12, __p, (uint64_t)v69, (v69 - (unsigned char *)__p) >> 2);
        v12 += 24;
        v32 -= 24;
      }
      while (v32);
      this[102] = v31;
    }
    else
    {
      uint64_t v73 = (char *)(this + 103);
      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v13) >> 3);
      uint64_t v18 = 2 * v17;
      if (2 * v17 <= v11) {
        uint64_t v18 = v11;
      }
      if (v17 >= 0x555555555555555) {
        unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v19 = v18;
      }
      unint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v19);
      uint64_t v21 = 3 * v14;
      uint64_t v22 = &v20[24 * v14];
      v70[0] = v20;
      v70[1] = v22;
      long long v71 = v22;
      __int16 v72 = &v20[24 * v23];
      uint64_t v24 = 3 * v11;
      int v25 = &v20[24 * v11];
      uint64_t v26 = 8 * v24 - 8 * v21;
      do
      {
        *(void *)uint64_t v22 = 0;
        *((void *)v22 + 1) = 0;
        *((void *)v22 + 2) = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v22, __p, (uint64_t)v69, (v69 - (unsigned char *)__p) >> 2);
        v22 += 24;
        v26 -= 24;
      }
      while (v26);
      long long v71 = v25;
      std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(this + 101, v70);
      std::__split_buffer<std::vector<unsigned char>>::~__split_buffer((uint64_t)v70);
    }
  }
  if (__p)
  {
    long long v69 = __p;
    operator delete(__p);
  }
  unint64_t v33 = *((unsigned int *)this + 193);
  LODWORD(v70[0]) = 1065353216;
  std::vector<float>::resize(this + 98, v33, v70);
}

void sub_1901390B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (*(char *)(v35 - 65) < 0) {
    operator delete(*(void **)(v35 - 88));
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::VectorGainBox::process(DSPGraph::VectorGainBox *this, int a2)
{
  uint64_t v4 = (char *)this + 64;
  uint64_t v3 = *((void *)this + 8);
  if (*((void *)v4 + 1) == v3)
  {
    std::string::basic_string[abi:ne180100]<0>(&__A, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&__C, "in");
    unint64_t v33 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      unint64_t v33 = (void *)*v33;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v32, v33, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 40))(v3);
  uint64_t v7 = *((void *)this + 11);
  if (*((void *)this + 12) == v7)
  {
    std::string::basic_string[abi:ne180100]<0>(&__A, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&__C, "out");
    uint64_t v35 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v35 = (void *)*v35;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v34, v35, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
  }
  uint64_t v8 = *(unsigned int **)(*(void *)(v6 + 56) + 80);
  uint64_t v9 = *(void *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v7 + 40))(v7) + 56) + 80);
  uint64_t v10 = *v8;
  LODWORD(__A.realp) = 1065353216;
  vDSP_vfill((const float *)&__A, *((float **)this + 98), 1, (uint64_t)(*((void *)this + 99) - *((void *)this + 98)) >> 2);
  unint64_t v11 = (const float **)*((void *)this + 101);
  char v12 = (const float **)*((void *)this + 102);
  while (v11 != v12)
  {
    unint64_t v13 = *v11;
    v11 += 3;
    vDSP_vmin(*((const float **)this + 98), 1, v13, 1, *((float **)this + 98), 1, (uint64_t)(*((void *)this + 99) - *((void *)this + 98)) >> 2);
  }
  if (v10)
  {
    unint64_t v14 = (float **)(v9 + 16);
    unint64_t v15 = (float **)(v8 + 4);
    do
    {
      uint64_t v16 = *v15;
      v15 += 2;
      unint64_t v17 = *v14;
      __A.realp = v16;
      __A.imagp = &v16[a2];
      __C.realp = v17;
      __C.imagp = &v17[a2];
      int v18 = *(_DWORD *)__A.imagp;
      vDSP_zrvmul(&__A, 1, *((const float **)this + 98), 1, &__C, 1, (uint64_t)(*((void *)this + 99) - *((void *)this + 98)) >> 2);
      *(_DWORD *)__C.imagp = v18;
      *((_DWORD *)v14 - 1) = 8 * a2;
      v14 += 2;
      --v10;
    }
    while (v10);
  }
  uint64_t v19 = *((void *)this + 8);
  if (*((void *)this + 9) == v19)
  {
    std::string::basic_string[abi:ne180100]<0>(&__A, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&__C, "in");
    long long v37 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      long long v37 = (void *)*v37;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v36, v37, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
  }
  uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 40))(v19);
  uint64_t v21 = *((void *)this + 11);
  if (*((void *)this + 12) == v21)
  {
    std::string::basic_string[abi:ne180100]<0>(&__A, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&__C, "out");
    uint64_t v39 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v39 = (void *)*v39;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v38, v39, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
  }
  uint64_t v22 = *(void *)(v20 + 56);
  uint64_t v23 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v21 + 40))(v21) + 56);
  long long v24 = *(_OWORD *)(v22 + 8);
  long long v25 = *(_OWORD *)(v22 + 24);
  long long v26 = *(_OWORD *)(v22 + 40);
  *(_OWORD *)(v23 + 5std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = *(_OWORD *)(v22 + 56);
  *(_OWORD *)(v23 + 40) = v26;
  *(_OWORD *)(v23 + 24) = v25;
  *(_OWORD *)(v23 + 8) = v24;
  uint64_t v27 = *((void *)this + 8);
  if (*((void *)this + 9) == v27)
  {
    std::string::basic_string[abi:ne180100]<0>(&__A, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&__C, "in");
    uint64_t v41 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v41 = (void *)*v41;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v40, v41, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
  }
  uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 40))(v27);
  uint64_t v29 = *((void *)this + 11);
  if (*((void *)this + 12) == v29)
  {
    std::string::basic_string[abi:ne180100]<0>(&__A, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&__C, "out");
    char v43 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      char v43 = (void *)*v43;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v42, v43, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
  }
  int v30 = *(_DWORD *)(*(void *)(v28 + 56) + 72);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 40))(v29);
  *(_DWORD *)(*(void *)(result + 56) + 72) = v30;
  return result;
}

void sub_190139764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::VectorGainBox::hasPresetData(DSPGraph::VectorGainBox *this)
{
  return 0;
}

uint64_t DSPGraph::VectorGainBox::setProperty(DSPGraph::VectorGainBox *this, int a2, int a3, unsigned int a4, unsigned int a5, _DWORD *a6)
{
  if (!(a4 | a3 | (a2 - 100)))
  {
    if (*(unsigned char *)(*((void *)this + 1) + 762)) {
      return 4294956447;
    }
    if (a5 == 4)
    {
      uint64_t v8 = 0;
      *((_DWORD *)this + 194) = *a6;
      return v8;
    }
    return 4294956445;
  }
  if (a2 != 100 && !(a4 | a3) && (a2 - 100) <= *((_DWORD *)this + 194))
  {
    unint64_t v9 = a5 >> 2;
    if (v9 == *((_DWORD *)this + 193))
    {
      unsigned int v10 = a2 - 101;
      uint64_t v11 = *((void *)this + 101);
      char v12 = (void **)(v11 + 24 * (a2 - 101));
      uint64_t v13 = (uint64_t)v12[2];
      unint64_t v14 = (char *)*v12;
      if (v9 <= (v13 - (uint64_t)*v12) >> 2)
      {
        uint64_t v23 = v11 + 24 * v10;
        long long v25 = *(char **)(v23 + 8);
        int v18 = (void **)(v23 + 8);
        long long v24 = v25;
        size_t v26 = v25 - v14;
        unint64_t v27 = (v25 - v14) >> 2;
        if (v27 < v9)
        {
          if (v24 != v14)
          {
            memmove(*v12, a6, v26);
            unint64_t v14 = (char *)*v18;
          }
          size_t v20 = 4 * v9 - 4 * v27;
          if (v27 == v9) {
            goto LABEL_22;
          }
          uint64_t v21 = v14;
          uint64_t v22 = (char *)&a6[v27];
          goto LABEL_21;
        }
        size_t v20 = 4 * v9;
        if (a5 < 4) {
          goto LABEL_22;
        }
      }
      else
      {
        if (v14)
        {
          *(void *)(v11 + 24 * v10 + 8) = v14;
          operator delete(v14);
          uint64_t v13 = 0;
          char *v12 = 0;
          v12[1] = 0;
          void v12[2] = 0;
        }
        uint64_t v15 = v13 >> 1;
        if (v13 >> 1 <= v9) {
          uint64_t v15 = v9;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v15;
        }
        std::vector<float>::__vallocate[abi:ne180100]((void *)(v11 + 24 * v10), v16);
        uint64_t v17 = v11 + 24 * v10;
        uint64_t v19 = *(char **)(v17 + 8);
        int v18 = (void **)(v17 + 8);
        unint64_t v14 = v19;
        size_t v20 = 4 * v9;
      }
      uint64_t v21 = v14;
      uint64_t v22 = (char *)a6;
LABEL_21:
      memmove(v21, v22, v20);
LABEL_22:
      uint64_t v8 = 0;
      *int v18 = &v14[v20];
      return v8;
    }
    return 4294956445;
  }
  return DSPGraph::Box::setProperty(this, a2, a3, a4, a5, a6);
}

uint64_t DSPGraph::VectorGainBox::getProperty(DSPGraph::VectorGainBox *this, int a2, uint64_t a3, uint64_t a4, unsigned int *a5, _DWORD *__dst)
{
  if (!(a4 | a3 | (a2 - 100)))
  {
    if (*a5 == 4)
    {
      if (!__dst) {
        return 4294967246;
      }
      uint64_t v7 = 0;
      void *__dst = *((_DWORD *)this + 194);
      return v7;
    }
    return 561211770;
  }
  if (a2 != 100 && !(a4 | a3) && (a2 - 100) <= *((_DWORD *)this + 194))
  {
    if (*a5 == 4 * *((unsigned int *)this + 193))
    {
      if (__dst)
      {
        uint64_t v8 = *((void *)this + 101) + 24 * (a2 - 101);
        unint64_t v9 = *(unsigned char **)v8;
        unsigned int v10 = *(unsigned char **)(v8 + 8);
        if (v10 != v9) {
          memmove(__dst, v9, v10 - v9);
        }
        return 0;
      }
      return 4294967246;
    }
    return 561211770;
  }
  return DSPGraph::Box::getProperty(this, a2, a3, a4, a5, (CFStringRef *)__dst);
}

uint64_t DSPGraph::VectorGainBox::getPropertyInfo(DSPGraph::VectorGainBox *this, int a2, int a3, int a4)
{
  if (a4 | a3 | (a2 - 100))
  {
    if (a2 == 100 || a4 | a3 || (a2 - 100) > *((_DWORD *)this + 194)) {
      return DSPGraph::Box::getPropertyInfo(this, a2, a3);
    }
    else {
      return (4 * *((_DWORD *)this + 193)) | 0x100000000;
    }
  }
  else if (*(unsigned char *)(*((void *)this + 1) + 762))
  {
    return 4;
  }
  else
  {
    return 0x100000004;
  }
}

double DSPGraph::VectorGainBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result = 1.90940534e262;
  *(_OWORD *)a1 = xmmword_1901C6320;
  *(_DWORD *)(a1 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
  return result;
}

uint64_t DSPGraph::VectorGainBox::canProcessInPlace(DSPGraph::VectorGainBox *this)
{
  return 1;
}

const char *DSPGraph::VectorGainBox::ClassName(DSPGraph::VectorGainBox *this)
{
  return "VectorGainBox";
}

void DSPGraph::VectorGainBox::~VectorGainBox(DSPGraph::VectorGainBox *this)
{
  *(void *)this = &unk_1EDF97C00;
  uint64_t v3 = (void **)((char *)this + 808);
  std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  int v2 = (void *)*((void *)this + 98);
  if (v2)
  {
    *((void *)this + 99) = v2;
    operator delete(v2);
  }
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x192FC8940);
}

{
  void *v2;
  void **v3;
  uint64_t vars8;

  *(void *)this = &unk_1EDF97C00;
  uint64_t v3 = (void **)((char *)this + 808);
  std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  int v2 = (void *)*((void *)this + 98);
  if (v2)
  {
    *((void *)this + 99) = v2;
    operator delete(v2);
  }
  DSPGraph::Box::~Box(this);
}

uint64_t DSPGraph::SumBox::initialize(DSPGraph::SumBox *this)
{
  if (((*((void *)this + 9) - *((void *)this + 8)) & 0x1FFFFFFFE0) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v19, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v18, "initialize");
    std::string::basic_string[abi:ne180100]<0>(&v17, "SumBox has no inputs");
    DSPGraph::ThrowException(1970168609, &v19, 2938, &v18, &v17);
  }
  DSPGraph::Box::initialize(this);
  uint64_t v2 = *((void *)this + 11);
  if (*((void *)this + 12) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v19, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v18, "out");
    unint64_t v16 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      unint64_t v16 = (void *)*v16;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v15, v16, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
  uint64_t v4 = *(_DWORD **)(result + 120);
  int v5 = v4[2];
  if (v5 == 1819304813)
  {
    int v6 = v4[3];
    if ((v6 & 1) == 0 || v4[8] != 32) {
      goto LABEL_29;
    }
  }
  else
  {
    if (v5 != 1718773105 || v4[8] != 64)
    {
LABEL_29:
      std::string::basic_string[abi:ne180100]<0>(&v19, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v18, "initialize");
      std::string::basic_string[abi:ne180100]<0>(&v17, "SumBox output format must be non-interleaved float");
      DSPGraph::ThrowException(1718449215, &v19, 2946, &v18, &v17);
    }
    int v6 = v4[3];
  }
  if ((v6 & 0x20) == 0) {
    goto LABEL_29;
  }
  uint64_t v7 = *((void *)this + 8);
  uint64_t v8 = *((void *)this + 9);
  if (v7 != v8)
  {
    uint64_t v9 = *((void *)this + 8);
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 40))(v9);
      unsigned int v10 = *(_DWORD **)(result + 120);
      int v11 = v10[2];
      if (v11 == 1819304813)
      {
        int v12 = v10[3];
        if ((v12 & 1) == 0 || v10[8] != 32) {
          goto LABEL_26;
        }
      }
      else
      {
        if (v11 != 1718773105 || v10[8] != 64)
        {
LABEL_26:
          std::string::basic_string[abi:ne180100]<0>(&v19, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
          std::string::basic_string[abi:ne180100]<0>(&v18, "initialize");
          std::string::basic_string[abi:ne180100]<0>(&v17, "SumBox input format must be non-interleaved float");
          DSPGraph::ThrowException(1718449215, &v19, 2951, &v18, &v17);
        }
        int v12 = v10[3];
      }
      if ((v12 & 0x20) == 0) {
        goto LABEL_26;
      }
      int v13 = v10[7];
      int v14 = v4[7];
      if (v13 != v14)
      {
        if (((*((void *)this + 9) - *((void *)this + 8)) & 0x1FFFFFFFE0) != 0x20)
        {
          std::string::basic_string[abi:ne180100]<0>(&v19, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
          std::string::basic_string[abi:ne180100]<0>(&v18, "initialize");
          std::string::basic_string[abi:ne180100]<0>(&v17, "SumBox channel mismatch");
          DSPGraph::ThrowException(1718449215, &v19, 2958, &v18, &v17);
        }
        if (v14 != 1)
        {
          std::string::basic_string[abi:ne180100]<0>(&v19, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
          std::string::basic_string[abi:ne180100]<0>(&v18, "initialize");
          std::string::basic_string[abi:ne180100]<0>(&v17, "SumBox output channel count must be mono or matched when input is single-bus");
          DSPGraph::ThrowException(1718449215, &v19, 2956, &v18, &v17);
        }
      }
      v9 += 32;
      v7 += 32;
    }
    while (v9 != v8);
  }
  return result;
}

void sub_190139FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

void *DSPGraph::SumBox::process(DSPGraph::SumBox *this, unsigned int a2)
{
  uint64_t v2 = this;
  uint64_t v4 = (char *)this + 88;
  uint64_t v3 = *((void *)this + 11);
  uint64_t v51 = v2;
  if (*((void *)v4 + 1) == v3)
  {
    std::string::basic_string[abi:ne180100]<0>(v55, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v54, "out");
    uint64_t v47 = (void *)((char *)v2 + 32);
    if (*((char *)v2 + 55) < 0) {
      uint64_t v47 = (void *)*v47;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v46, v47, (uint64_t)(*((void *)v2 + 12) - *((void *)v2 + 11)) >> 5, 0);
  }
  int v6 = *(unsigned int **)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v3 + 40))(v3) + 56) + 80);
  uint64_t v7 = *v6;
  uint64_t v8 = *((void *)v2 + 8);
  uint64_t v9 = *((void *)v2 + 9);
  int v10 = 4 * a2;
  if (((v9 - v8) & 0x1FFFFFFFE0) != 0)
  {
    unint64_t v11 = 0;
    uint64_t v13 = ((v9 - v8) & 0x1FFFFFFFE0) != 0x20 || v7 != 1;
    unint64_t v14 = (v9 - v8) >> 5;
    unsigned int v50 = v6;
    uint64_t v52 = *v6;
    int v53 = (void **)(v6 + 4);
    LOBYTE(v15) = 1;
    do
    {
      if (v14 <= v11)
      {
        std::string::basic_string[abi:ne180100]<0>(v55, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(v54, "in");
        CFStringRef v45 = (void *)((char *)v51 + 32);
        if (*((char *)v51 + 55) < 0) {
          CFStringRef v45 = (void *)*v45;
        }
        DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v44, v45, (uint64_t)(*((void *)v51 + 9) - *((void *)v51 + 8)) >> 5, v11);
      }
      uint64_t v16 = (*(uint64_t (**)(unint64_t))(*(void *)(v8 + 32 * v11) + 40))(v8 + 32 * v11);
      uint64_t v17 = *((void *)v2 + 8);
      if (v11 >= (*((void *)v2 + 9) - v17) >> 5)
      {
        std::string::basic_string[abi:ne180100]<0>(v55, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(v54, "in");
        char v43 = (void *)((char *)v51 + 32);
        if (*((char *)v51 + 55) < 0) {
          char v43 = (void *)*v43;
        }
        DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v42, v43, (uint64_t)(*((void *)v51 + 9) - *((void *)v51 + 8)) >> 5, v11);
      }
      long long v18 = *(_DWORD **)(*(void *)(v16 + 56) + 80);
      if ((*(unsigned char *)(*(void *)((*(uint64_t (**)(unint64_t))(*(void *)(v17 + 32 * v11) + 40))(v17 + 32 * v11)
                                 + 56)
                     + 72) & 0x10) == 0)
      {
        if (v15)
        {
          if (*v18)
          {
            unint64_t v19 = 0;
            uint64_t v20 = 0;
            uint64_t v21 = v53;
            uint64_t v22 = 4;
            do
            {
              uint64_t v23 = *(const void **)&v18[v22];
              long long v24 = *v21;
              *((_DWORD *)v21 - 1) = v10;
              if (v20 == v19)
              {
                if (v23 != v24) {
                  memcpy(v24, v23, 4 * a2);
                }
              }
              else
              {
                vDSP_vadd((const float *)v23, 1, (const float *)v24, 1, (float *)v24, 1, a2);
              }
              ++v19;
              v20 += v13;
              v22 += 4;
              v21 += 2 * v13;
            }
            while (v19 < *v18);
            LOBYTE(v15) = 0;
            uint64_t v2 = v51;
          }
          else
          {
            LOBYTE(v15) = 0;
          }
        }
        else
        {
          uint64_t v15 = v52;
          if (v52)
          {
            long long v25 = (const float **)(v18 + 4);
            size_t v26 = (float **)v53;
            do
            {
              unint64_t v27 = *v25;
              v25 += 2;
              uint64_t v28 = *v26;
              *((_DWORD *)v26 - 1) = v10;
              vDSP_vadd(v27, 1, v28, 1, v28, 1, a2);
              v26 += 2;
              --v15;
            }
            while (v15);
          }
        }
      }
      ++v11;
      uint64_t v8 = *((void *)v2 + 8);
      uint64_t v9 = *((void *)v2 + 9);
      unint64_t v14 = (v9 - v8) >> 5;
    }
    while (v11 < v14);
    if ((v15 & 1) == 0)
    {
      int v31 = 0;
      goto LABEL_36;
    }
    uint64_t v7 = v52;
    int v6 = v50;
  }
  if (v7)
  {
    uint64_t v29 = (void **)(v6 + 4);
    do
    {
      int v30 = *v29;
      *((_DWORD *)v29 - 1) = v10;
      bzero(v30, 4 * a2);
      v29 += 2;
      --v7;
    }
    while (v7);
    uint64_t v8 = *((void *)v2 + 8);
    uint64_t v9 = *((void *)v2 + 9);
  }
  int v31 = 16;
LABEL_36:
  if (v9 == v8)
  {
    std::string::basic_string[abi:ne180100]<0>(v55, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v54, "in");
    uint64_t v49 = (void *)((char *)v51 + 32);
    if (*((char *)v51 + 55) < 0) {
      uint64_t v49 = (void *)*v49;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v48, v49, (uint64_t)(*((void *)v51 + 9) - *((void *)v51 + 8)) >> 5, 0);
  }
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 40))(v8);
  unint64_t v33 = (void *)*((void *)v2 + 11);
  long long v34 = (void *)*((void *)v2 + 12);
  if (v33 != v34)
  {
    uint64_t v35 = (_OWORD *)(result[7] + 8);
    uint64_t result = (void *)*((void *)v2 + 11);
    long long v36 = result;
    do
    {
      uint64_t v37 = *v36;
      v36 += 4;
      uint64_t v38 = *(void *)((*(uint64_t (**)(void *))(v37 + 40))(result) + 56);
      long long v40 = v35[2];
      long long v39 = v35[3];
      long long v41 = v35[1];
      *(_OWORD *)(v38 + 8) = *v35;
      *(_OWORD *)(v38 + 24) = v41;
      *(_OWORD *)(v38 + 40) = v40;
      *(_OWORD *)(v38 + 5std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v39;
      *(_DWORD *)(v38 + 72) = v31;
      v33 += 4;
      uint64_t result = v36;
    }
    while (v36 != v34);
  }
  return result;
}

void sub_19013A550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

double DSPGraph::SumBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result = 1.49819016e248;
  *(_OWORD *)a1 = xmmword_1901C6350;
  *(_DWORD *)(a1 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
  return result;
}

const char *DSPGraph::SumBox::ClassName(DSPGraph::SumBox *this)
{
  return "sum";
}

void DSPGraph::SumBox::~SumBox(DSPGraph::SumBox *this)
{
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x192FC8940);
}

char *DSPGraph::MixBox::reset(DSPGraph::MixBox *this)
{
  return std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)this + 800, *((char **)this + 97), *((void *)this + 98), (uint64_t)(*((void *)this + 98) - *((void *)this + 97)) >> 2);
}

uint64_t DSPGraph::MixBox::initialize(DSPGraph::MixBox *this)
{
  if (((*((void *)this + 9) - *((void *)this + 8)) & 0x1FFFFFFFE0) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v15, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v14, "initialize");
    std::string::basic_string[abi:ne180100]<0>(&v13, "MixBox has no inputs");
    DSPGraph::ThrowException(1970168609, &v15, 3024, &v14, &v13);
  }
  DSPGraph::Box::initialize(this);
  uint64_t v2 = *((void *)this + 11);
  if (*((void *)this + 12) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v15, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v14, "out");
    int v12 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      int v12 = (void *)*v12;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v11, v12, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
  uint64_t v4 = *(_DWORD **)(result + 120);
  if (v4[2] != 1819304813 || (v4[3] & 1) == 0 || (v4[8] == 32 ? (BOOL v5 = (v4[3] & 0x20) == 0) : (BOOL v5 = 1), v5))
  {
    std::string::basic_string[abi:ne180100]<0>(&v15, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v14, "initialize");
    std::string::basic_string[abi:ne180100]<0>(&v13, "MixBox output format must be non-interleaved float");
    DSPGraph::ThrowException(1718449215, &v15, 3033, &v14, &v13);
  }
  uint64_t v6 = *((void *)this + 8);
  uint64_t v7 = *((void *)this + 9);
  if (v6 != v7)
  {
    uint64_t v8 = *((void *)this + 8);
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 40))(v8);
      uint64_t v9 = *(_DWORD **)(result + 120);
      if (v9[2] != 1819304813 || (v9[3] & 1) == 0 || (v9[8] == 32 ? (BOOL v10 = (v9[3] & 0x20) == 0) : (BOOL v10 = 1), v10))
      {
        std::string::basic_string[abi:ne180100]<0>(&v15, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v14, "initialize");
        std::string::basic_string[abi:ne180100]<0>(&v13, "MixBox input format must be non-interleaved float");
        DSPGraph::ThrowException(1718449215, &v15, 3039, &v14, &v13);
      }
      if (v9[7] != v4[7])
      {
        std::string::basic_string[abi:ne180100]<0>(&v15, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v14, "initialize");
        std::string::basic_string[abi:ne180100]<0>(&v13, "MixBox channel mismatch");
        DSPGraph::ThrowException(1718449215, &v15, 3043, &v14, &v13);
      }
      v8 += 32;
      v6 += 32;
    }
    while (v8 != v7);
  }
  return result;
}

void sub_19013A920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

void *DSPGraph::MixBox::process(DSPGraph::MixBox *this, unsigned int a2)
{
  uint64_t v4 = (char *)this + 88;
  uint64_t v3 = *((void *)this + 11);
  if (*((void *)v4 + 1) == v3)
  {
    std::string::basic_string[abi:ne180100]<0>(__Step, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v62, "out");
    long long v57 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      long long v57 = (void *)*v57;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v56, v57, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
  }
  uint64_t v6 = *(unsigned int **)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v3 + 40))(v3) + 56) + 80);
  uint64_t v7 = *v6;
  size_t v8 = 4 * a2;
  uint64_t v9 = *((void *)this + 8);
  uint64_t v10 = *((void *)this + 9);
  if (((v10 - v9) & 0x1FFFFFFFE0) == 0) {
    goto LABEL_29;
  }
  unint64_t v11 = 0;
  unint64_t v12 = (v10 - v9) >> 5;
  float v13 = (float)a2;
  char v14 = 1;
  do
  {
    if (v12 <= v11)
    {
      std::string::basic_string[abi:ne180100]<0>(__Step, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v62, "in");
      uint64_t v55 = (void *)((char *)this + 32);
      if (*((char *)this + 55) < 0) {
        uint64_t v55 = (void *)*v55;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v54, v55, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, v11);
    }
    uint64_t v15 = (*(uint64_t (**)(unint64_t))(*(void *)(v9 + 32 * v11) + 40))(v9 + 32 * v11);
    float __B = 0.0;
    uint64_t v16 = *(void *)(v15 + 56);
    float __B = *(float *)(*((void *)this + 97) + 4 * v11);
    float __Start = 0.0;
    uint64_t v17 = *(void *)(v16 + 80);
    float __Start = *(float *)(*((void *)this + 100) + 4 * v11);
    uint64_t v18 = *((void *)this + 8);
    if (v11 >= (*((void *)this + 9) - v18) >> 5)
    {
      std::string::basic_string[abi:ne180100]<0>(__Step, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v62, "in");
      int v53 = (void *)((char *)this + 32);
      if (*((char *)this + 55) < 0) {
        int v53 = (void *)*v53;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v52, v53, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, v11);
    }
    if ((*(unsigned char *)(*(void *)((*(uint64_t (**)(unint64_t))(*(void *)(v18 + 32 * v11) + 40))(v18 + 32 * v11)
                               + 56)
                   + 72) & 0x10) == 0
      && __B != 0.0)
    {
      if (v14)
      {
        if (__B == __Start)
        {
          if (v7)
          {
            unint64_t v19 = (const float **)(v17 + 16);
            uint64_t v20 = (float **)(v6 + 4);
            uint64_t v21 = v7;
            do
            {
              uint64_t v22 = *v19;
              v19 += 2;
              uint64_t v23 = *v20;
              *((_DWORD *)v20 - 1) = v8;
              vDSP_vsmul(v22, 1, &__B, v23, 1, a2);
              v20 += 2;
              --v21;
            }
            while (v21);
          }
        }
        else
        {
          *(float *)__Step = (float)(__B - __Start) / v13;
          if (v7)
          {
            uint64_t v29 = (const float **)(v17 + 16);
            int v30 = (float **)(v6 + 4);
            uint64_t v31 = v7;
            do
            {
              uint64_t v32 = *v29;
              v29 += 2;
              unint64_t v33 = *v30;
              *((_DWORD *)v30 - 1) = v8;
              vDSP_vrampmul(v32, 1, &__Start, (const float *)__Step, v33, 1, a2);
              v30 += 2;
              --v31;
            }
            while (v31);
          }
        }
      }
      else if (__B == __Start)
      {
        if (v7)
        {
          long long v24 = (const float **)(v17 + 16);
          long long v25 = (float **)(v6 + 4);
          uint64_t v26 = v7;
          do
          {
            unint64_t v27 = *v24;
            v24 += 2;
            uint64_t v28 = *v25;
            *((_DWORD *)v25 - 1) = v8;
            vDSP_vsma(v27, 1, &__B, v28, 1, v28, 1, a2);
            v25 += 2;
            --v26;
          }
          while (v26);
        }
      }
      else
      {
        *(float *)__Step = (float)(__B - __Start) / v13;
        if (v7)
        {
          long long v34 = (const float **)(v17 + 16);
          uint64_t v35 = (float **)(v6 + 4);
          uint64_t v36 = v7;
          do
          {
            uint64_t v37 = *v34;
            v34 += 2;
            uint64_t v38 = *v35;
            *((_DWORD *)v35 - 1) = v8;
            vDSP_vrampmuladd(v37, 1, &__Start, (const float *)__Step, v38, 1, a2);
            v35 += 2;
            --v36;
          }
          while (v36);
        }
      }
      char v14 = 0;
    }
    *(float *)(*((void *)this + 100) + 4 * v11++) = __B;
    uint64_t v9 = *((void *)this + 8);
    uint64_t v10 = *((void *)this + 9);
    unint64_t v12 = (v10 - v9) >> 5;
  }
  while (v11 < v12);
  if ((v14 & 1) == 0)
  {
    int v41 = 0;
  }
  else
  {
LABEL_29:
    if (v7)
    {
      long long v39 = (void **)(v6 + 4);
      do
      {
        long long v40 = *v39;
        *((_DWORD *)v39 - 1) = v8;
        bzero(v40, v8);
        v39 += 2;
        --v7;
      }
      while (v7);
      uint64_t v9 = *((void *)this + 8);
      uint64_t v10 = *((void *)this + 9);
    }
    int v41 = 16;
  }
  if (v10 == v9)
  {
    std::string::basic_string[abi:ne180100]<0>(__Step, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v62, "in");
    int v59 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      int v59 = (void *)*v59;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v58, v59, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
  }
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 40))(v9);
  uint64_t v44 = *((void *)this + 11);
  char v43 = (void *)*((void *)this + 12);
  if ((void *)v44 != v43)
  {
    CFStringRef v45 = (_OWORD *)(result[7] + 8);
    uint64_t result = (void *)v44;
    char v46 = (void *)v44;
    do
    {
      uint64_t v47 = *v46;
      v46 += 4;
      uint64_t v48 = *(void *)((*(uint64_t (**)(void *))(v47 + 40))(result) + 56);
      long long v50 = v45[2];
      long long v49 = v45[3];
      long long v51 = v45[1];
      *(_OWORD *)(v48 + 8) = *v45;
      *(_OWORD *)(v48 + 24) = v51;
      *(_OWORD *)(v48 + 40) = v50;
      *(_OWORD *)(v48 + 5std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v49;
      *(_DWORD *)(v48 + 72) = v41;
      v44 += 32;
      uint64_t result = v46;
    }
    while (v46 != v43);
  }
  return result;
}

void sub_19013AF04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  _Unwind_Resume(exception_object);
}

double DSPGraph::MixBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result = 1.1238952e219;
  *(_OWORD *)a1 = xmmword_1901C6360;
  *(_DWORD *)(a1 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
  return result;
}

__n128 DSPGraph::MixBox::getParameterInfo@<Q0>(int a1@<W1>, int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1 == 1)
  {
    if (!a2)
    {
      uint64_t v15 = 0;
      long long v13 = 0u;
      long long v11 = 0u;
      long long v12 = 0u;
      long long v9 = 0u;
      long long v10 = 0u;
      v14.n128_u32[0] = 14;
      *(unint64_t *)((char *)v14.n128_u64 + 4) = 0x40000000C0000000;
      v14.n128_u32[3] = 1065353216;
      strlcpy((char *)&v9, "gain", 0x34uLL);
      *((void *)&v13 + 1) = @"gain";
      LODWORD(v15) = v15 | 0xC8000000;
      long long v6 = v10;
      *(_OWORD *)a3 = v9;
      *(_OWORD *)(a3 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v6;
      long long v7 = v12;
      *(_OWORD *)(a3 + 32) = v11;
      *(_OWORD *)(a3 + 48) = v7;
      __n128 result = v14;
      *(_OWORD *)(a3 + 64) = v13;
      *(__n128 *)(a3 + 80) = result;
      *(void *)(a3 + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v15;
      *(unsigned char *)(a3 + 104) = 1;
      return result;
    }
    int v5 = -10878;
  }
  else
  {
    int v5 = -10866;
  }
  *(_DWORD *)a3 = v5;
  *(unsigned char *)(a3 + 104) = 0;
  return result;
}

void sub_19013B088(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void DSPGraph::MixBox::getParameterList(int a1@<W1>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (a1 == 1)
  {
    uint64_t v4 = operator new(4uLL);
    *a2 = v4;
    *v4++ = 0;
    a2[1] = v4;
    a2[2] = v4;
  }
}

float DSPGraph::MixBox::getParameter(DSPGraph::MixBox *this, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v4 = *((void *)this + 97);
  if (a4 >= (unint64_t)((*((void *)this + 98) - v4) >> 2))
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v7, "getParameter");
    std::string::basic_string[abi:ne180100]<0>(&v6, "MixBox::getParameter");
    DSPGraph::ThrowException(1919837985, &v8, 3074, &v7, &v6);
  }
  return *(float *)(v4 + 4 * a4);
}

void sub_19013B168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

void *DSPGraph::MixBox::setParameter(void *this, unsigned int a2, unsigned int a3, unsigned int a4, float a5)
{
  uint64_t v5 = this[97];
  if (a4 >= (unint64_t)((this[98] - v5) >> 2))
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v7, "setParameter");
    std::string::basic_string[abi:ne180100]<0>(&v6, "MixBox::setParameter");
    DSPGraph::ThrowException(1919837985, &v8, 3057, &v7, &v6);
  }
  *(float *)(v5 + 4 * a4) = a5;
  if (!*(unsigned char *)(this[1] + 762)) {
    *(float *)(this[100] + 4 * a4) = a5;
  }
  return this;
}

void sub_19013B258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

const char *DSPGraph::MixBox::ClassName(DSPGraph::MixBox *this)
{
  return "mix";
}

void DSPGraph::MixBox::~MixBox(DSPGraph::MixBox *this)
{
  *(void *)this = &unk_1EDF9CB90;
  uint64_t v2 = (void *)*((void *)this + 100);
  if (v2)
  {
    *((void *)this + 101) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 97);
  if (v3)
  {
    *((void *)this + 98) = v3;
    operator delete(v3);
  }
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x192FC8940);
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EDF9CB90;
  uint64_t v2 = (void *)*((void *)this + 100);
  if (v2)
  {
    *((void *)this + 101) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 97);
  if (v3)
  {
    *((void *)this + 98) = v3;
    operator delete(v3);
  }
  DSPGraph::Box::~Box(this);
}

uint64_t DSPGraph::ChannelJoinerBox::hasPresetData(DSPGraph::ChannelJoinerBox *this)
{
  return 0;
}

double DSPGraph::ChannelJoinerBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result = 7.37152887e170;
  *(_OWORD *)a1 = xmmword_1901C63C0;
  *(_DWORD *)(a1 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
  return result;
}

const char *DSPGraph::ChannelJoinerBox::ClassName(DSPGraph::ChannelJoinerBox *this)
{
  return "ChannelJoiner";
}

void DSPGraph::ChannelJoinerBox::~ChannelJoinerBox(DSPGraph::ChannelJoinerBox *this)
{
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x192FC8940);
}

uint64_t DSPGraph::ChannelSplitterBox::hasPresetData(DSPGraph::ChannelSplitterBox *this)
{
  return 0;
}

double DSPGraph::ChannelSplitterBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result = 7.38215236e170;
  *(_OWORD *)a1 = xmmword_1901C63D0;
  *(_DWORD *)(a1 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
  return result;
}

const char *DSPGraph::ChannelSplitterBox::ClassName(DSPGraph::ChannelSplitterBox *this)
{
  return "ChannelSplitter";
}

void DSPGraph::ChannelSplitterBox::~ChannelSplitterBox(DSPGraph::ChannelSplitterBox *this)
{
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x192FC8940);
}

uint64_t DSPGraph::ChannelCopierBox::initialize(DSPGraph::ChannelCopierBox *this)
{
  DSPGraph::Box::initialize(this);
  uint64_t v2 = *((void *)this + 8);
  if (*((void *)this + 9) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v19, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v18, "in");
    long long v13 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      long long v13 = (void *)*v13;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v12, v13, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
  }
  uint64_t v3 = *(_DWORD **)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2) + 120);
  int v4 = v3[2];
  if (v4 == 1819304813)
  {
    int v5 = v3[3];
    if ((v5 & 1) == 0 || v3[8] != 32) {
      goto LABEL_21;
    }
  }
  else
  {
    if (v4 != 1718773105 || v3[8] != 64)
    {
LABEL_21:
      std::string::basic_string[abi:ne180100]<0>(&v19, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v18, "initialize");
      std::string::basic_string[abi:ne180100]<0>(&v17, "ChannelCopierBox input format must be mono, non-interleaved float");
      DSPGraph::ThrowException(1718449215, &v19, 3556, &v18, (long long *)&v17);
    }
    int v5 = v3[3];
  }
  if ((v5 & 0x20) == 0 || v3[7] != 1) {
    goto LABEL_21;
  }
  uint64_t v6 = *((void *)this + 11);
  if (*((void *)this + 12) == v6)
  {
    std::string::basic_string[abi:ne180100]<0>(&v19, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v18, "out");
    uint64_t v15 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v15 = (void *)*v15;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v14, v15, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 40))(v6);
  long long v8 = *(_DWORD **)(result + 120);
  int v9 = v8[2];
  if (v9 == 1819304813)
  {
    int v10 = v8[3];
    if ((v10 & 1) == 0 || v8[8] != 32) {
      goto LABEL_22;
    }
  }
  else
  {
    if (v9 != 1718773105 || v8[8] != 64) {
      goto LABEL_22;
    }
    int v10 = v8[3];
  }
  if ((v10 & 0x20) == 0)
  {
LABEL_22:
    std::string::basic_string[abi:ne180100]<0>(&v19, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v18, "initialize");
    long long v11 = (char *)this + 32;
    if (*((char *)this + 55) < 0) {
      long long v11 = *(char **)v11;
    }
    std::string::basic_string[abi:ne180100]<0>(&v16, v11);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v17, "ChannelCopierBox output format must be non-interleaved float ", &v16);
    DSPGraph::ThrowException(1718449215, &v19, 3561, &v18, (long long *)&v17);
  }
  return result;
}

void sub_19013B74C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  if (*(char *)(v24 - 41) < 0) {
    operator delete(*(void **)(v24 - 64));
  }
  if (*(char *)(v24 - 17) < 0) {
    operator delete(*(void **)(v24 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::ChannelCopierBox::process(DSPGraph::ChannelCopierBox *this, int a2)
{
  int v4 = (char *)this + 64;
  uint64_t v3 = *((void *)this + 8);
  if (*((void *)v4 + 1) == v3)
  {
    std::string::basic_string[abi:ne180100]<0>(v45, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v44, "in");
    uint64_t v31 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v31 = (void *)*v31;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v30, v31, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 40))(v3);
  uint64_t v7 = *((void *)this + 11);
  if (*((void *)this + 12) == v7)
  {
    std::string::basic_string[abi:ne180100]<0>(v45, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v44, "out");
    unint64_t v33 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      unint64_t v33 = (void *)*v33;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v32, v33, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
  }
  uint64_t v8 = *(void *)(*(void *)(v6 + 56) + 80);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 40))(v7);
  uint64_t v10 = *((void *)this + 8);
  if (*((void *)this + 9) == v10)
  {
    std::string::basic_string[abi:ne180100]<0>(v45, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v44, "in");
    uint64_t v35 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v35 = (void *)*v35;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v34, v35, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
  }
  long long v11 = *(unsigned int **)(*(void *)(v9 + 56) + 80);
  uint64_t v12 = *v11;
  char v13 = *(_DWORD *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10) + 120) + 8) == 1718773105;
  if (v12)
  {
    size_t v14 = ((4 * a2) << v13);
    uint64_t v15 = (void **)(v11 + 4);
    do
    {
      *((_DWORD *)v15 - 1) = v14;
      std::string v16 = *(void **)(v8 + 16);
      if (v16 != *v15) {
        memcpy(*v15, v16, v14);
      }
      v15 += 2;
      --v12;
    }
    while (v12);
  }
  uint64_t v17 = *((void *)this + 8);
  if (*((void *)this + 9) == v17)
  {
    std::string::basic_string[abi:ne180100]<0>(v45, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v44, "in");
    uint64_t v37 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v37 = (void *)*v37;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v36, v37, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
  }
  uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 40))(v17);
  uint64_t v19 = *((void *)this + 11);
  if (*((void *)this + 12) == v19)
  {
    std::string::basic_string[abi:ne180100]<0>(v45, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v44, "out");
    long long v39 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      long long v39 = (void *)*v39;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v38, v39, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
  }
  uint64_t v20 = *(void *)(v18 + 56);
  uint64_t v21 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v19 + 40))(v19) + 56);
  long long v22 = *(_OWORD *)(v20 + 8);
  long long v23 = *(_OWORD *)(v20 + 24);
  long long v24 = *(_OWORD *)(v20 + 40);
  *(_OWORD *)(v21 + 5std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = *(_OWORD *)(v20 + 56);
  *(_OWORD *)(v21 + 40) = v24;
  *(_OWORD *)(v21 + 24) = v23;
  *(_OWORD *)(v21 + 8) = v22;
  uint64_t v25 = *((void *)this + 8);
  if (*((void *)this + 9) == v25)
  {
    std::string::basic_string[abi:ne180100]<0>(v45, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v44, "in");
    int v41 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      int v41 = (void *)*v41;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v40, v41, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
  }
  uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 40))(v25);
  uint64_t v27 = *((void *)this + 11);
  if (*((void *)this + 12) == v27)
  {
    std::string::basic_string[abi:ne180100]<0>(v45, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v44, "out");
    char v43 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      char v43 = (void *)*v43;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v42, v43, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
  }
  int v28 = *(_DWORD *)(*(void *)(v26 + 56) + 72);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 40))(v27);
  *(_DWORD *)(*(void *)(result + 56) + 72) = v28;
  return result;
}

void sub_19013BD48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::ChannelCopierBox::hasPresetData(DSPGraph::ChannelCopierBox *this)
{
  return 0;
}

double DSPGraph::ChannelCopierBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result = 7.36328254e170;
  *(_OWORD *)a1 = xmmword_1901C63E0;
  *(_DWORD *)(a1 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
  return result;
}

const char *DSPGraph::ChannelCopierBox::ClassName(DSPGraph::ChannelCopierBox *this)
{
  return "ChannelCopier";
}

void DSPGraph::ChannelCopierBox::~ChannelCopierBox(DSPGraph::ChannelCopierBox *this)
{
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x192FC8940);
}

uint64_t DSPGraph::DeadEndBox::hasPresetData(DSPGraph::DeadEndBox *this)
{
  return 0;
}

double DSPGraph::DeadEndBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result = 4.23042584e175;
  *(_OWORD *)a1 = xmmword_1901C6400;
  *(_DWORD *)(a1 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
  return result;
}

const char *DSPGraph::DeadEndBox::ClassName(DSPGraph::DeadEndBox *this)
{
  return "DeadEndBox";
}

void DSPGraph::DeadEndBox::~DeadEndBox(DSPGraph::DeadEndBox *this)
{
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x192FC8940);
}

double DSPGraph::ConstantSourceBox::initialize(DSPGraph::ConstantSourceBox *this)
{
  DSPGraph::Box::initialize(this);
  uint64_t v2 = *((void *)this + 11);
  uint64_t v3 = *((void *)this + 12) - v2;
  if ((v3 & 0x1FFFFFFFE0) != 0)
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    unint64_t v6 = v3 >> 5;
    do
    {
      if (v6 <= v5)
      {
        std::string::basic_string[abi:ne180100]<0>(&v15, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(&v14, "out");
        uint64_t v12 = (void *)((char *)this + 32);
        if (*((char *)this + 55) < 0) {
          uint64_t v12 = (void *)*v12;
        }
        DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v11, v12, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, v5);
      }
      uint64_t v7 = *(_DWORD **)((*(uint64_t (**)(void))(*(void *)(v2 + v4) + 40))() + 120);
      int v8 = v7[2];
      if (v8 == 1819304813)
      {
        int v9 = v7[3];
        if ((v9 & 1) == 0 || v7[8] != 32) {
          goto LABEL_14;
        }
      }
      else
      {
        if (v8 != 1718773105 || v7[8] != 64)
        {
LABEL_14:
          std::string::basic_string[abi:ne180100]<0>(&v15, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
          std::string::basic_string[abi:ne180100]<0>(&v14, "initialize");
          std::string::basic_string[abi:ne180100]<0>(&v13, "ConstantSourceBox output format must be non-interleaved float or 'freq'");
          DSPGraph::ThrowException(1718449215, &v15, 3612, &v14, &v13);
        }
        int v9 = v7[3];
      }
      if ((v9 & 0x20) == 0) {
        goto LABEL_14;
      }
      ++v5;
      uint64_t v2 = *((void *)this + 11);
      unint64_t v6 = (*((void *)this + 12) - v2) >> 5;
      v4 += 32;
    }
    while (v5 < v6);
  }
  *((_OWORD *)this + 49) = 0u;
  *((void *)this + 100) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 808) = 0u;
  *(_OWORD *)((char *)this + 824) = 0u;
  *(void *)&double result = 1;
  *((void *)this + 105) = 1;
  return result;
}

void sub_19013C094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

double DSPGraph::ConstantSourceBox::process(DSPGraph::ConstantSourceBox *this, unsigned int a2)
{
  uint64_t v3 = *((void *)this + 11);
  uint64_t v4 = *((void *)this + 12) - v3;
  if ((v4 & 0x1FFFFFFFE0) != 0)
  {
    unint64_t v5 = 0;
    unint64_t v6 = v4 >> 5;
    int v35 = 4 * a2;
    vDSP_Length __N = a2 + 1;
    vDSP_Length v7 = a2 - 1;
    int v8 = 8 * a2;
    unint64_t v33 = (long long *)((char *)this + 784);
    do
    {
      if (v6 <= v5)
      {
        std::string::basic_string[abi:ne180100]<0>(v37, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(v36, "out");
        uint64_t v27 = (void *)((char *)this + 32);
        if (*((char *)this + 55) < 0) {
          uint64_t v27 = (void *)*v27;
        }
        DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v26, v27, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, v5);
      }
      int v9 = *(unsigned int **)(*(void *)((*(uint64_t (**)(unint64_t))(*(void *)(v3 + 32 * v5) + 40))(v3 + 32 * v5)
                                        + 56)
                            + 80);
      uint64_t v10 = *v9;
      if (v10)
      {
        long long v11 = (float **)(v9 + 4);
        do
        {
          uint64_t v12 = *((void *)this + 11);
          if (v5 >= (*((void *)this + 12) - v12) >> 5)
          {
            std::string::basic_string[abi:ne180100]<0>(v37, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
            std::string::basic_string[abi:ne180100]<0>(v36, "out");
            uint64_t v25 = (void *)((char *)this + 32);
            if (*((char *)this + 55) < 0) {
              uint64_t v25 = (void *)*v25;
            }
            DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v24, v25, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, v5);
          }
          int v13 = *(_DWORD *)(*(void *)((*(uint64_t (**)(unint64_t))(*(void *)(v12 + 32 * v5) + 40))(v12 + 32 * v5)
                                      + 120)
                          + 8);
          long long v14 = *v11;
          long long v15 = (const float *)((char *)this + 772);
          if (v13 == 1718773105)
          {
            vDSP_vfill(v15, v14, 1, __N);
            vDSP_vfill((const float *)this + 194, &(*v11)[a2 + 1], 1, v7);
            int v16 = v8;
          }
          else
          {
            vDSP_vfill(v15, v14, 1, a2);
            int v16 = v35;
          }
          *((_DWORD *)v11 - 1) = v16;
          v11 += 2;
          --v10;
        }
        while (v10);
      }
      uint64_t v17 = *((void *)this + 11);
      if (v5 >= (*((void *)this + 12) - v17) >> 5)
      {
        std::string::basic_string[abi:ne180100]<0>(v37, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(v36, "out");
        uint64_t v31 = (void *)((char *)this + 32);
        if (*((char *)this + 55) < 0) {
          uint64_t v31 = (void *)*v31;
        }
        DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v30, v31, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, v5);
      }
      *(_DWORD *)(*(void *)((*(uint64_t (**)(unint64_t))(*(void *)(v17 + 32 * v5) + 40))(v17 + 32 * v5)
                            + 56)
                + 72) = 512;
      uint64_t v18 = *((void *)this + 11);
      if (v5 >= (*((void *)this + 12) - v18) >> 5)
      {
        std::string::basic_string[abi:ne180100]<0>(v37, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(v36, "out");
        uint64_t v29 = (void *)((char *)this + 32);
        if (*((char *)this + 55) < 0) {
          uint64_t v29 = (void *)*v29;
        }
        DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v28, v29, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, v5);
      }
      uint64_t v19 = *(void *)((*(uint64_t (**)(unint64_t))(*(void *)(v18 + 32 * v5) + 40))(v18 + 32 * v5)
                      + 56);
      long long v20 = *v33;
      long long v21 = v33[1];
      long long v22 = v33[2];
      *(_OWORD *)(v19 + 5std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v33[3];
      *(_OWORD *)(v19 + 40) = v22;
      *(_OWORD *)(v19 + 24) = v21;
      *(_OWORD *)(v19 + 8) = v20;
      ++v5;
      uint64_t v3 = *((void *)this + 11);
      unint64_t v6 = (*((void *)this + 12) - v3) >> 5;
    }
    while (v5 < v6);
  }
  double result = *((double *)this + 98) + (double)a2;
  *((double *)this + 98) = result;
  return result;
}

void sub_19013C500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

double DSPGraph::ConstantSourceBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result = 9.19367275e170;
  *(_OWORD *)a1 = xmmword_1901C6410;
  *(_DWORD *)(a1 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
  return result;
}

__n128 DSPGraph::ConstantSourceBox::getParameterInfo@<Q0>(int a1@<W1>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v5 = -10866;
LABEL_7:
    *(_DWORD *)a3 = v5;
    *(unsigned char *)(a3 + 104) = 0;
    return result;
  }
  if (a2 > 1)
  {
    int v5 = -10878;
    goto LABEL_7;
  }
  uint64_t v16 = 0;
  long long v14 = 0u;
  __n128 v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  *(unint64_t *)((char *)v15.n128_u64 + 4) = 0x41A00000C1A00000;
  if (a2)
  {
    strlcpy((char *)&v10, "imag value (freq domain only)", 0x34uLL);
    unint64_t v6 = @"imag value (freq domain only)";
  }
  else
  {
    strlcpy((char *)&v10, "real value", 0x34uLL);
    unint64_t v6 = @"real value";
  }
  *((void *)&v14 + 1) = v6;
  LODWORD(v1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v16 | 0xC8000000;
  long long v7 = v11;
  *(_OWORD *)a3 = v10;
  *(_OWORD *)(a3 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v7;
  long long v8 = v13;
  *(_OWORD *)(a3 + 32) = v12;
  *(_OWORD *)(a3 + 48) = v8;
  __n128 result = v15;
  *(_OWORD *)(a3 + 64) = v14;
  *(__n128 *)(a3 + 80) = result;
  *(void *)(a3 + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v16;
  *(unsigned char *)(a3 + 104) = 1;
  return result;
}

void sub_19013C698(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void DSPGraph::ConstantSourceBox::getParameterList(int a1@<W1>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (!a1)
  {
    uint64_t v4 = operator new(8uLL);
    *a2 = v4;
    *v4++ = 0x100000000;
    a2[1] = v4;
    a2[2] = v4;
  }
}

float DSPGraph::ConstantSourceBox::getParameter(DSPGraph::ConstantSourceBox *this, int a2, int a3)
{
  if (a3 | a2)
  {
    if (a2 != 1 || a3)
    {
      std::string::basic_string[abi:ne180100]<0>(&v7, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v6, "getParameter");
      std::string::basic_string[abi:ne180100]<0>(&v5, "");
      DSPGraph::ThrowException(-10878, &v7, 3678, &v6, &v5);
    }
    uint64_t v3 = (char *)this + 776;
  }
  else
  {
    uint64_t v3 = (char *)this + 772;
  }
  return *(float *)v3;
}

void sub_19013C77C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::ConstantSourceBox::setParameter(uint64_t this, int a2, int a3, float a4)
{
  if (a3 | a2)
  {
    if (a2 != 1 || a3)
    {
      std::string::basic_string[abi:ne180100]<0>(&v6, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v5, "setParameter");
      std::string::basic_string[abi:ne180100]<0>(&v4, "");
      DSPGraph::ThrowException(-10878, &v6, 3663, &v5, &v4);
    }
    *(float *)(this + 77std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = a4;
  }
  else
  {
    *(float *)(this + 772) = a4;
  }
  return this;
}

void sub_19013C858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

const char *DSPGraph::ConstantSourceBox::ClassName(DSPGraph::ConstantSourceBox *this)
{
  return "ConstantSourceBox";
}

void DSPGraph::ConstantSourceBox::~ConstantSourceBox(DSPGraph::ConstantSourceBox *this)
{
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x192FC8940);
}

double DSPGraph::DecibelControlBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result = 3.63842702e175;
  *(_OWORD *)a1 = xmmword_1901C6420;
  *(_DWORD *)(a1 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
  return result;
}

__n128 DSPGraph::DecibelControlBox::getParameterInfo@<Q0>(int a1@<W1>, int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v5 = -10866;
LABEL_3:
    *(_DWORD *)a3 = v5;
    *(unsigned char *)(a3 + 104) = 0;
    return result;
  }
  if (a2 == 1)
  {
    uint64_t v16 = 0;
    long long v14 = 0u;
    v15.n128_u32[3] = 0;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    v15.n128_u32[0] = 13;
    *(unint64_t *)((char *)v15.n128_u64 + 4) = 0x7F800000FF800000;
    strlcpy((char *)&v10, "DBValue", 0x34uLL);
    long long v6 = @"DBValue";
  }
  else
  {
    if (a2)
    {
      int v5 = -10878;
      goto LABEL_3;
    }
    uint64_t v16 = 0;
    long long v14 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    v15.n128_u64[0] = 14;
    v15.n128_u64[1] = 0x3F8000007F800000;
    strlcpy((char *)&v10, "LinearValue", 0x34uLL);
    long long v6 = @"LinearValue";
  }
  *((void *)&v14 + 1) = v6;
  LODWORD(v1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v16 | 0xC8000000;
  long long v7 = v11;
  *(_OWORD *)a3 = v10;
  *(_OWORD *)(a3 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v7;
  long long v8 = v13;
  *(_OWORD *)(a3 + 32) = v12;
  *(_OWORD *)(a3 + 48) = v8;
  __n128 result = v15;
  *(_OWORD *)(a3 + 64) = v14;
  *(__n128 *)(a3 + 80) = result;
  *(void *)(a3 + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v16;
  *(unsigned char *)(a3 + 104) = 1;
  return result;
}

void sub_19013CA44(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void DSPGraph::DecibelControlBox::getParameterList(int a1@<W1>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (!a1)
  {
    long long v4 = operator new(8uLL);
    *a2 = v4;
    *v4++ = 0x100000000;
    a2[1] = v4;
    a2[2] = v4;
  }
}

float DSPGraph::DecibelControlBox::getParameter(DSPGraph::DecibelControlBox *this, int a2, int a3)
{
  if (a3 | a2)
  {
    if (a2 != 1 || a3)
    {
      std::string::basic_string[abi:ne180100]<0>(&v7, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v6, "getParameter");
      std::string::basic_string[abi:ne180100]<0>(&v5, "");
      DSPGraph::ThrowException(-10878, &v7, 3751, &v6, &v5);
    }
    uint64_t v3 = (char *)this + 776;
  }
  else
  {
    uint64_t v3 = (char *)this + 772;
  }
  return *(float *)v3;
}

void sub_19013CB28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

void DSPGraph::DecibelControlBox::setParameter(DSPGraph::DecibelControlBox *this, int a2, int a3, float a4)
{
  float v4 = a4;
  if (a3 | a2)
  {
    if (a2 != 1 || a3)
    {
      std::string::basic_string[abi:ne180100]<0>(&v9, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v8, "setParameter");
      std::string::basic_string[abi:ne180100]<0>(&v7, "");
      DSPGraph::ThrowException(-10878, &v9, 3736, &v8, &v7);
    }
    *((float *)this + 193) = __exp10f(a4 * 0.05);
  }
  else
  {
    if (a4 < 0.0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v9, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v8, "setParameter");
      std::string::basic_string[abi:ne180100]<0>(&v7, "Parameter out of range");
      DSPGraph::ThrowException(1919837985, &v9, 3728, &v8, &v7);
    }
    *((float *)this + 193) = a4;
    float v6 = 1.1755e-38;
    if (v4 >= 1.1755e-38) {
      float v6 = v4;
    }
    float v4 = log10f(v6) * 20.0;
  }
  *((float *)this + 194) = v4;
}

void sub_19013CC9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::DecibelControlBox::canProcessInPlace(DSPGraph::DecibelControlBox *this)
{
  return 1;
}

const char *DSPGraph::DecibelControlBox::ClassName(DSPGraph::DecibelControlBox *this)
{
  return "DecibelControlBox";
}

void DSPGraph::DecibelControlBox::~DecibelControlBox(DSPGraph::DecibelControlBox *this)
{
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x192FC8940);
}

uint64_t DSPGraph::SingleRateLPCMConverterBox::uninitialize(DSPGraph::SingleRateLPCMConverterBox *this)
{
  uint64_t v2 = (OpaqueAudioConverter *)*((void *)this + 97);
  if (v2) {
    AudioConverterDispose(v2);
  }
  return DSPGraph::Box::uninitialize(this);
}

uint64_t DSPGraph::SingleRateLPCMConverterBox::initialize(DSPGraph::SingleRateLPCMConverterBox *this)
{
  DSPGraph::Box::initialize(this);
  uint64_t v2 = *((void *)this + 8);
  uint64_t v3 = *((void *)this + 9);
  if (((v3 - v2) & 0x1FFFFFFFE0) != 0x20
    || ((*((void *)this + 12) - *((void *)this + 11)) & 0x1FFFFFFFE0) != 0x20)
  {
    std::string::basic_string[abi:ne180100]<0>(&v15, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v14, "initialize");
    std::string::basic_string[abi:ne180100]<0>(&v13, "SingleRateLPCMConverterBox only supports 1 bus in 1 bus out");
    DSPGraph::ThrowException(1718449215, &v15, 3803, &v14, &v13);
  }
  if (v3 == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v15, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v14, "in");
    long long v9 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      long long v9 = (void *)*v9;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v8, v9, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
  }
  float v4 = *(AudioStreamBasicDescription **)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2) + 120);
  if (v4->mFormatID != 1819304813)
  {
    std::string::basic_string[abi:ne180100]<0>(&v15, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v14, "initialize");
    std::string::basic_string[abi:ne180100]<0>(&v13, "SingleRateLPCMConverterBox input format must be LPCM");
    DSPGraph::ThrowException(1718449215, &v15, 3809, &v14, &v13);
  }
  if (!v4->mChannelsPerFrame)
  {
    std::string::basic_string[abi:ne180100]<0>(&v15, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v14, "initialize");
    std::string::basic_string[abi:ne180100]<0>(&v13, "SingleRateLPCMConverterBox input must have a non-zero number of channels");
    DSPGraph::ThrowException(1718449215, &v15, 3813, &v14, &v13);
  }
  uint64_t v5 = *((void *)this + 11);
  if (*((void *)this + 12) == v5)
  {
    std::string::basic_string[abi:ne180100]<0>(&v15, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v14, "out");
    long long v11 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      long long v11 = (void *)*v11;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v10, v11, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
  }
  float v6 = *(AudioStreamBasicDescription **)((*(uint64_t (**)(uint64_t))(*(void *)v5 + 40))(v5) + 120);
  if (v6->mFormatID != 1819304813)
  {
    std::string::basic_string[abi:ne180100]<0>(&v15, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v14, "initialize");
    std::string::basic_string[abi:ne180100]<0>(&v13, "SingleRateLPCMConverterBox output format must be non-interleaved float");
    DSPGraph::ThrowException(1718449215, &v15, 3819, &v14, &v13);
  }
  if (!v6->mChannelsPerFrame)
  {
    std::string::basic_string[abi:ne180100]<0>(&v15, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v14, "initialize");
    std::string::basic_string[abi:ne180100]<0>(&v13, "SingleRateLPCMConverterBox output must have a non-zero number of channels");
    DSPGraph::ThrowException(1718449215, &v15, 3823, &v14, &v13);
  }
  if (v4->mSampleRate != v6->mSampleRate)
  {
    std::string::basic_string[abi:ne180100]<0>(&v15, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v14, "initialize");
    std::string::basic_string[abi:ne180100]<0>(&v13, "SingleRateLPCMConverterBox input and output sample rates must match");
    DSPGraph::ThrowException(1718449215, &v15, 3827, &v14, &v13);
  }
  uint64_t result = AudioConverterNewWithOptions(v4, v6, 0, (void *)this + 97);
  if (result)
  {
    int v12 = result;
    std::string::basic_string[abi:ne180100]<0>(&v15, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v14, "initialize");
    std::string::basic_string[abi:ne180100]<0>(&v13, "Error in AudioConverterNew");
    DSPGraph::ThrowException(v12, &v15, 3834, &v14, &v13);
  }
  return result;
}

void sub_19013D1B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (*(char *)(v23 - 33) < 0) {
    operator delete(*(void **)(v23 - 56));
  }
  _Unwind_Resume(exception_object);
}

double DSPGraph::SingleRateLPCMConverterBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result = 1.28814877e248;
  *(_OWORD *)a1 = xmmword_1901C6450;
  *(_DWORD *)(a1 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
  return result;
}

const char *DSPGraph::SingleRateLPCMConverterBox::ClassName(DSPGraph::SingleRateLPCMConverterBox *this)
{
  return "SingleRateLPCMConverterBox";
}

void DSPGraph::SingleRateLPCMConverterBox::~SingleRateLPCMConverterBox(DSPGraph::SingleRateLPCMConverterBox *this)
{
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x192FC8940);
}

uint64_t DSPGraph::PropertyTap::uninitialize(uint64_t this)
{
  *(void *)(this + 48) = *(void *)(this + 40);
  return this;
}

uint64_t DSPGraph::Box::clearCachedLatency(uint64_t this)
{
  if (*(unsigned char *)(this + 760)) {
    *(unsigned char *)(this + 760) = 0;
  }
  return this;
}

uint64_t DSPGraph::Box::initialized(DSPGraph::Box *this)
{
  return *(unsigned __int8 *)(*((void *)this + 1) + 762);
}

void DSPGraph::Box::setSubset(unint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2 != a2)
  {
    if (v2) {
      std::__hash_table<RegistrarClientProcess *,std::hash<RegistrarClientProcess *>,std::equal_to<RegistrarClientProcess *>,std::allocator<RegistrarClientProcess *>>::__erase_unique<RegistrarClientProcess *>((uint64_t *)(v2 + 24), a1);
    }
    *(void *)(a1 + 24) = a2;
    if (a2)
    {
      std::__hash_table<DSPGraph::Box *,std::hash<DSPGraph::Box *>,std::equal_to<DSPGraph::Box *>,std::allocator<DSPGraph::Box *>>::__emplace_unique_key_args<DSPGraph::Box *,DSPGraph::Box * const&>(a2 + 24, a1, a1);
    }
  }
}

void DSPGraph::Box::addAnalysis(DSPGraph::Box *this, unsigned int a2, int a3)
{
  float v6 = (std::mutex *)((char *)this + 248);
  std::mutex::lock((std::mutex *)((char *)this + 248));
  for (uint64_t i = *((void *)this + 39); i != *((void *)this + 40); i += 8)
  {
    if (*(_DWORD *)(*(void *)i + 24) == a2 && *(_DWORD *)(*(void *)i + 80) == a3) {
      goto LABEL_32;
    }
  }
  long long v8 = std::__hash_table<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,DSPGraph::AnalyzerBuilder::Info>>>::find<unsigned int>((void *)(*((void *)this + 1) + 952), a2);
  if (!v8) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v9 = v8[12];
  if (!v9) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  long long v10 = (DSPGraph::Graph *)(*(void *(**)(unint64_t *__return_ptr))(*(void *)v9 + 48))(&v34);
  unint64_t v11 = v34;
  if (!v34)
  {
    std::string::basic_string[abi:ne180100]<0>(&v33, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v32, "addAnalysis");
    std::string::basic_string[abi:ne180100]<0>(&v31, "Box::addAnalysis, Analyzer Not Supported.");
    DSPGraph::ThrowException(1852204065, &v33, 355, &v32, &v31);
  }
  *(_DWORD *)(v34 + 80) = a3;
  *(void *)(v11 + 88) = DSPGraph::Graph::generateSerialNumber(v10);
  DSPGraph::Graph::addAnalyzer(*((std::mutex **)this + 1), v34);
  long long v13 = (unint64_t *)*((void *)this + 40);
  unint64_t v12 = *((void *)this + 41);
  if ((unint64_t)v13 >= v12)
  {
    uint64_t v17 = (void *)*((void *)this + 39);
    uint64_t v18 = v13 - v17;
    unint64_t v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v20 = v12 - (void)v17;
    if (v20 >> 2 > v19) {
      unint64_t v19 = v20 >> 2;
    }
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v21 = v19;
    }
    if (v21)
    {
      if (v21 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      long long v22 = (char *)operator new(8 * v21);
    }
    else
    {
      long long v22 = 0;
    }
    uint64_t v23 = (unint64_t *)&v22[8 * v18];
    long long v24 = &v22[8 * v21];
    unint64_t v25 = v34;
    unint64_t v34 = 0;
    *uint64_t v23 = v25;
    uint64_t v16 = v23 + 1;
    if (v13 == v17)
    {
      *((void *)this + 39) = v23;
      *((void *)this + 40) = v16;
      *((void *)this + 41) = v24;
    }
    else
    {
      do
      {
        unint64_t v26 = *--v13;
        unint64_t *v13 = 0;
        *--uint64_t v23 = v26;
      }
      while (v13 != v17);
      long long v13 = (unint64_t *)*((void *)this + 39);
      uint64_t v27 = (unint64_t *)*((void *)this + 40);
      *((void *)this + 39) = v23;
      *((void *)this + 40) = v16;
      *((void *)this + 41) = v24;
      while (v27 != v13)
      {
        uint64_t v29 = *--v27;
        uint64_t v28 = v29;
        *uint64_t v27 = 0;
        if (v29) {
          (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
        }
      }
    }
    if (v13) {
      operator delete(v13);
    }
  }
  else
  {
    unint64_t v14 = v34;
    unint64_t v34 = 0;
    unint64_t *v13 = v14;
    long long v15 = v13 + 1;
    *((void *)this + 40) = v15;
    uint64_t v16 = v15;
  }
  *((void *)this + 40) = v16;
  atomic_fetch_add((atomic_uint *volatile)this + 192, 1u);
  unint64_t v30 = v34;
  unint64_t v34 = 0;
  if (v30) {
    (*(void (**)(unint64_t))(*(void *)v30 + 8))(v30);
  }
LABEL_32:
  std::mutex::unlock(v6);
}

void sub_19013D5F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  uint64_t v29 = *(void *)(v27 - 56);
  *(void *)(v27 - 5std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
  }
  std::mutex::unlock(v26);
  _Unwind_Resume(a1);
}

void DSPGraph::Box::removeAnalysis(DSPGraph::Box *this, int a2, int a3)
{
  float v6 = (std::mutex *)((char *)this + 248);
  std::mutex::lock((std::mutex *)((char *)this + 248));
  uint64_t v8 = *((void *)this + 39);
  uint64_t v7 = *((void *)this + 40);
  if (v8 != v7)
  {
    while (*(_DWORD *)(*(void *)v8 + 24) != a2 || *(_DWORD *)(*(void *)v8 + 80) != a3)
    {
      v8 += 8;
      if (v8 == v7) {
        goto LABEL_12;
      }
    }
  }
  if (v8 != v7)
  {
    caulk::concurrent::skiplist<unsigned int,DSPGraph::Analyzer *,10,(caulk::concurrent::skiplist_options)0>::remove((unint64_t)this + 336, a2);
    DSPGraph::Graph::removeAnalyzer(*((std::mutex **)this + 1), *(DSPGraph::Analyzer **)v8);
    uint64_t v9 = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::unique_ptr<DSPGraph::Analyzer> *,std::unique_ptr<DSPGraph::Analyzer> *,std::unique_ptr<DSPGraph::Analyzer> *,0>((uint64_t *)(v8 + 8), *((uint64_t **)this + 40), (uint64_t *)v8);
    long long v10 = (uint64_t *)*((void *)this + 40);
    while (v10 != v9)
    {
      uint64_t v12 = *--v10;
      uint64_t v11 = v12;
      *long long v10 = 0;
      if (v12) {
        (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
      }
    }
    *((void *)this + 40) = v9;
    atomic_fetch_add((atomic_uint *volatile)this + 192, 0xFFFFFFFF);
  }
LABEL_12:
  std::mutex::unlock(v6);
}

void sub_19013D7A4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t DSPGraph::Box::hasAnalysis(DSPGraph::Box *this, int a2, uint64_t a3)
{
  uint64_t v3 = *((void *)this + 11);
  uint64_t v4 = *((void *)this + 12) - v3;
  if ((v4 & 0x1FFFFFFFE0) == 0) {
    goto LABEL_12;
  }
  if (a3 >= (unint64_t)(v4 >> 5))
  {
    std::string::basic_string[abi:ne180100]<0>(&v15, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v14, "out");
    uint64_t v12 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v12 = (void *)*v12;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v11, v12, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, a3);
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)(v3 + 32 * a3) + 40))(v3 + 32 * a3);
  if (!v7)
  {
LABEL_12:
    std::string::basic_string[abi:ne180100]<0>(&v15, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v14, "hasAnalysis");
    std::string::basic_string[abi:ne180100]<0>(&v13, "Box::hasAnalysis, Port Not Connected to Box.");
    DSPGraph::ThrowException(1970168609, &v15, 429, &v14, &v13);
  }
  for (uint64_t i = *((void *)this + 39); ; i += 8)
  {
    if (i == *((void *)this + 40)) {
      return 0;
    }
    if (*(void *)(*(void *)i + 8) == v7 && *(_DWORD *)(*(void *)i + 24) == a2) {
      break;
    }
  }
  return 1;
}

void sub_19013D930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (*(char *)(v23 - 17) < 0) {
    operator delete(*(void **)(v23 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Box::getAnalysisCount(DSPGraph::Box *this, uint64_t a2)
{
  uint64_t v2 = *((void *)this + 11);
  uint64_t v3 = *((void *)this + 12) - v2;
  if ((v3 & 0x1FFFFFFFE0) == 0) {
    return 0;
  }
  if (a2 >= (unint64_t)(v3 >> 5))
  {
    std::string::basic_string[abi:ne180100]<0>(v15, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v14, "out");
    uint64_t v12 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v12 = (void *)*v12;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v11, v12, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, a2);
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)(v2 + 32 * a2) + 40))(v2 + 32 * a2);
  if (!v5) {
    return 0;
  }
  float v6 = (uint64_t *)*((void *)this + 39);
  uint64_t v7 = (uint64_t *)*((void *)this + 40);
  if (v6 == v7) {
    return 0;
  }
  LODWORD(v8) = 0;
  do
  {
    uint64_t v9 = *v6++;
    if (*(void *)(v9 + 8) == v5) {
      uint64_t v8 = (v8 + 1);
    }
    else {
      uint64_t v8 = v8;
    }
  }
  while (v6 != v7);
  return v8;
}

void sub_19013DAA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (*(char *)(v25 - 17) < 0) {
    operator delete(*(void **)(v25 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Box::addRenderCallback(uint64_t a1, uint64_t a2, unsigned int a3, signed int a4)
{
  uint64_t v7 = a1;
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = (std::mutex *)(a1 + 672);
  std::mutex::lock((std::mutex *)(a1 + 672));
  uint64_t v9 = *(os_unfair_lock_s **)(v7 + 736);
  std::__function::__value_func<void ()(DSPGraph::Box *,unsigned int)>::__value_func[abi:ne180100]((uint64_t)v80, a2);
  unsigned int add = atomic_fetch_add(DSPGraph::RenderObserverList<DSPGraph::Box>::add(std::function<void ()(DSPGraph::Box*,unsigned int)>,DSPGraph::RenderCallbackType,DSPGraph::RenderCallbackOrder)::sToken, 1u);
  std::__function::__value_func<void ()(DSPGraph::Box *,unsigned int)>::__value_func[abi:ne180100]((uint64_t)v81, (uint64_t)v80);
  unsigned int v82 = add + 1;
  std::__function::__value_func<void ()(DSPGraph::Box *,unsigned int)>::__value_func[abi:ne180100]((uint64_t)v83, (uint64_t)v81);
  unint64_t v84 = __PAIR64__(a4, a3);
  std::__function::__value_func<void ()(DSPGraph::Box *,unsigned int)>::~__value_func[abi:ne180100](v81);
  if (a3) {
    uint64_t v11 = v9 + 16;
  }
  else {
    uint64_t v11 = v9;
  }
  v76[0] = (uint64_t)v11;
  v76[1] = 0;
  unsigned int v76[2] = (uint64_t)&v11[1];
  char v77 = 1;
  os_unfair_lock_lock(v11 + 1);
  int v78 = caulk::concurrent::details::lf_read_sync_write_impl::begin_mutate((caulk::concurrent::details::lf_read_sync_write_impl *)v11);
  BOOL v79 = v78 == 0;
  uint64_t v12 = caulk::concurrent::lf_read_synchronized_write<std::vector<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver>>>::mutator::copy_previous(v76);
  long long v13 = v12;
  uint64_t v15 = *v12;
  long long v14 = (char *)v12[1];
  uint64_t v16 = (uint64_t)&v14[-*v12];
  if (v14 == (char *)*v12)
  {
    uint64_t v18 = v12[1];
  }
  else
  {
    unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (v16 >> 4);
    uint64_t v18 = *v12;
    do
    {
      unint64_t v19 = v17 >> 1;
      unint64_t v20 = v18 + 48 * (v17 >> 1);
      int v21 = *(_DWORD *)(v20 + 44);
      uint64_t v22 = v20 + 48;
      v17 += ~(v17 >> 1);
      if (v21 > a4) {
        unint64_t v17 = v19;
      }
      else {
        uint64_t v18 = v22;
      }
    }
    while (v17);
  }
  uint64_t v23 = (v18 - v15) / 48;
  long long v24 = (char *)(v15 + 48 * v23);
  unint64_t v25 = v12[2];
  if ((unint64_t)v14 >= v25)
  {
    unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * (v16 >> 4) + 1;
    if (v30 > 0x555555555555555) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - v15) >> 4);
    if (2 * v31 > v30) {
      unint64_t v30 = 2 * v31;
    }
    if (v31 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v32 = 0x555555555555555;
    }
    else {
      unint64_t v32 = v30;
    }
    uint64_t v88 = v13 + 2;
    id v75 = v8;
    if (v32) {
      unint64_t v32 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioFormatListItem>>(v32);
    }
    else {
      uint64_t v33 = 0;
    }
    uint64_t v34 = (v18 - v15) / 48;
    uint64_t v35 = v32 + 48 * v23;
    unint64_t v85 = v32;
    *(void *)&long long v86 = v35;
    *((void *)&v86 + 1) = v35;
    unint64_t v87 = v32 + 48 * v33;
    uint64_t v36 = v34;
    uint64_t v73 = v7;
    if (v34 == v33)
    {
      if (v18 - v15 < 1)
      {
        if (v18 == v15) {
          unint64_t v46 = 1;
        }
        else {
          unint64_t v46 = 2 * v34;
        }
        int v92 = v13 + 2;
        uint64_t v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioFormatListItem>>(v46);
        uint64_t v48 = v47;
        long long v49 = &v47[48 * (v46 >> 2)];
        long long v51 = &v47[48 * v50];
        if (*((void *)&v86 + 1) == (void)v86)
        {
          int64x2_t v57 = vdupq_n_s64(v86);
          uint64_t v52 = &v47[48 * (v46 >> 2)];
        }
        else
        {
          uint64_t v52 = &v49[*((void *)&v86 + 1) - v86];
          uint64_t v53 = (uint64_t)&v47[48 * (v46 >> 2) + 8];
          uint64_t v54 = v86 + 8;
          do
          {
            *(_DWORD *)(v53 - 8) = *(_DWORD *)(v54 - 8);
            uint64_t v55 = std::__function::__value_func<void ()(DSPGraph::Box *,unsigned int)>::__value_func[abi:ne180100](v53, v54);
            *(void *)(v55 + 32) = *(void *)(v54 + 32);
            uint64_t v56 = v55 + 40;
            uint64_t v53 = v55 + 48;
            v54 += 48;
          }
          while ((char *)v56 != v52);
          int64x2_t v57 = (int64x2_t)v86;
        }
        unint64_t v58 = v85;
        int v59 = (unint64_t *)v87;
        unint64_t v85 = (unint64_t)v48;
        *(void *)&long long v86 = v49;
        int64x2_t v90 = v57;
        *((void *)&v86 + 1) = v52;
        unint64_t v87 = (unint64_t)v51;
        unint64_t v89 = v58;
        uint64_t v91 = v59;
        std::__split_buffer<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver> &>::~__split_buffer((uint64_t)&v89);
        uint64_t v35 = *((void *)&v86 + 1);
      }
      else
      {
        uint64_t v37 = v34 + 2;
        if (v34 >= -1) {
          uint64_t v37 = v34 + 1;
        }
        uint64_t v38 = -3 * (v37 >> 1);
        uint64_t v35 = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver *,DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver *,DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver *>(v35, v35, v35 - 48 * (v37 >> 1));
        *(void *)&long long v86 = v86 + 16 * v38;
        *((void *)&v86 + 1) = v35;
      }
    }
    *(_DWORD *)uint64_t v35 = v82;
    std::__function::__value_func<void ()(DSPGraph::Box *,unsigned int)>::__value_func[abi:ne180100](v35 + 8, (uint64_t)v83);
    *(void *)(v35 + 40) = v84;
    uint64_t v60 = v86;
    uint64_t v61 = *((void *)&v86 + 1) + 48;
    *((void *)&v86 + 1) += 48;
    uint64_t v62 = (char *)*v13;
    if ((char *)*v13 != v24)
    {
      uint64_t v63 = 0;
      do
      {
        *(_DWORD *)(v60 + v63 - 48) = *(_DWORD *)&v24[v63 - 48];
        std::__function::__value_func<void ()(DSPGraph::Box *,unsigned int)>::__value_func[abi:ne180100](v60 + v63 - 40, (uint64_t)&v24[v63 - 40]);
        *(void *)(v60 + v63 - 8) = *(void *)&v24[v63 - 8];
        v63 -= 48;
      }
      while (&v24[v63] != v62);
      v60 += v63;
      uint64_t v61 = *((void *)&v86 + 1);
    }
    *(void *)&long long v86 = v60;
    int64_t v64 = (char *)v13[1];
    uint64_t v7 = v73;
    if (v64 != v24)
    {
      uint64_t v65 = v15 + 48 * v36 + 8;
      do
      {
        *(_DWORD *)uint64_t v61 = *(_DWORD *)(v65 - 8);
        std::__function::__value_func<void ()(DSPGraph::Box *,unsigned int)>::__value_func[abi:ne180100](v61 + 8, v65);
        *(void *)(v61 + 40) = *(void *)(v65 + 32);
        v61 += 48;
        uint64_t v66 = v65 + 40;
        v65 += 48;
      }
      while ((char *)v66 != v64);
      uint64_t v60 = v86;
      long long v24 = (char *)v13[1];
    }
    uint64_t v8 = v75;
    unint64_t v67 = *v13;
    uint64_t *v13 = v60;
    unint64_t v85 = v67;
    *(void *)&long long v86 = v67;
    v13[1] = v61;
    *((void *)&v86 + 1) = v24;
    unint64_t v68 = v13[2];
    v13[2] = v87;
    unint64_t v87 = v68;
    std::__split_buffer<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver> &>::~__split_buffer((uint64_t)&v85);
  }
  else if (v24 == v14)
  {
    *(_DWORD *)long long v14 = v82;
    std::__function::__value_func<void ()(DSPGraph::Box *,unsigned int)>::__value_func[abi:ne180100](v15 + 48 * v23 + 8, (uint64_t)v83);
    *(void *)(v15 + 48 * v23 + 40) = v84;
    v13[1] = (uint64_t)(v14 + 48);
  }
  else
  {
    uint64_t v72 = v7;
    __int16 v74 = v8;
    unint64_t v26 = v14 - 48;
    uint64_t v71 = (v18 - v15) / 48;
    if ((unint64_t)v14 < 0x30)
    {
      uint64_t v29 = v12[1];
    }
    else
    {
      uint64_t v27 = 48 * v23 + 16 * ((v14 - (v24 + 48)) >> 4) + v15 + 8;
      uint64_t v28 = v14 - 48;
      uint64_t v29 = v12[1];
      do
      {
        *(_DWORD *)uint64_t v29 = *(_DWORD *)(v27 - 8);
        std::__function::__value_func<void ()(DSPGraph::Box *,unsigned int)>::__value_func[abi:ne180100](v29 + 8, v27);
        *(void *)(v29 + 40) = *((void *)v28 + 5);
        v28 += 48;
        v29 += 48;
        v27 += 48;
      }
      while (v28 < v14);
    }
    v13[1] = v29;
    if (v14 != v24 + 48)
    {
      uint64_t v39 = 0;
      do
      {
        *(_DWORD *)&v14[v39 - 48] = *(_DWORD *)&v26[v39 - 48];
        std::__function::__value_func<void ()(DSPGraph::Box *,unsigned int)>::operator=[abi:ne180100](&v14[v39 - 40], (uint64_t)&v26[v39 - 40]);
        *(void *)&v14[v39 - 8] = *(void *)(v15 + 16 * ((v14 - (v24 + 48)) >> 4) + 48 * v71 + v39 - 8);
        v39 -= 48;
      }
      while (-16 * ((v14 - (v24 + 48)) >> 4) != v39);
    }
    BOOL v41 = v24 <= (char *)&v82 && v13[1] > (unint64_t)&v82;
    *(_DWORD *)long long v24 = v82;
    uint64_t v42 = std::__function::__value_func<void ()(DSPGraph::Box *,unsigned int)>::__value_func[abi:ne180100]((uint64_t)&v89, (uint64_t)&v83[3 * v41]);
    uint64_t v7 = v72;
    uint64_t v8 = v74;
    char v43 = (unint64_t *)(v15 + 48 * v71 + 8);
    if (v43 != &v89)
    {
      uint64_t v44 = v91;
      CFStringRef v45 = *(unint64_t **)(v15 + 48 * v71 + 32);
      if (v91 == &v89)
      {
        if (v45 == v43)
        {
          (*(void (**)(uint64_t, unint64_t *))(v89 + 24))(v42, &v85);
          (*(void (**)(unint64_t *))(*v91 + 32))(v91);
          uint64_t v91 = 0;
          (*(void (**)(void, unint64_t *))(**(void **)(v15 + 48 * v71 + 32) + 24))(*(void *)(v15 + 48 * v71 + 32), &v89);
          (*(void (**)(void))(**(void **)(v15 + 48 * v71 + 32) + 32))(*(void *)(v15 + 48 * v71 + 32));
          *(void *)(v15 + 48 * v71 + 32) = 0;
          uint64_t v91 = &v89;
          (*(void (**)(unint64_t *, unint64_t *))(v85 + 24))(&v85, v43);
          (*(void (**)(unint64_t *))(v85 + 32))(&v85);
        }
        else
        {
          (*(void (**)(uint64_t, unint64_t *))(v89 + 24))(v42, v43);
          (*(void (**)(unint64_t *))(*v91 + 32))(v91);
          uint64_t v91 = *(unint64_t **)(v15 + 48 * v71 + 32);
        }
        *(void *)(v15 + 48 * v71 + 32) = v15 + 48 * v71 + 8;
      }
      else if (v45 == v43)
      {
        (*(void (**)(unint64_t *, unint64_t *))(*v43 + 24))(v43, &v89);
        (*(void (**)(void))(**(void **)(v15 + 48 * v71 + 32) + 32))(*(void *)(v15 + 48 * v71 + 32));
        *(void *)(v15 + 48 * v71 + 32) = v91;
        uint64_t v91 = &v89;
      }
      else
      {
        uint64_t v91 = *(unint64_t **)(v15 + 48 * v71 + 32);
        *(void *)(v15 + 48 * v71 + 32) = v44;
      }
    }
    std::__function::__value_func<void ()(DSPGraph::Box *,unsigned int)>::~__value_func[abi:ne180100](&v89);
    *(void *)(v15 + 48 * v71 + 40) = v84;
  }
  caulk::concurrent::lf_read_synchronized_write<std::vector<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver>>>::mutator::~mutator((uint64_t)v76);
  uint64_t v69 = v82;
  std::__function::__value_func<void ()(DSPGraph::Box *,unsigned int)>::~__value_func[abi:ne180100](v83);
  std::__function::__value_func<void ()(DSPGraph::Box *,unsigned int)>::~__value_func[abi:ne180100](v80);
  atomic_fetch_add((atomic_uint *volatile)(v7 + 768), 1u);
  std::mutex::unlock(v8);
  return v69;
}

void sub_19013E2F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t std::__function::__value_func<void ()(DSPGraph::Box *,unsigned int)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

uint64_t *caulk::concurrent::lf_read_synchronized_write<std::vector<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver>>>::mutator::copy_previous(uint64_t *result)
{
  uint64_t v1 = *result;
  uint64_t v2 = *((unsigned int *)result + 8);
  if (*(unsigned char *)(*result + v2 + 8))
  {
    uint64_t v3 = result;
    uint64_t v4 = v1 + 24 * v2;
    long long v14 = 0uLL;
    uint64_t v15 = 0;
    uint64_t v5 = *(void *)(v4 + 16);
    uint64_t v6 = *(void *)(v4 + 24);
    uint64_t v16 = (void **)&v14;
    char v17 = 0;
    if (v6 != v5)
    {
      unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v5) >> 4);
      if (v7 >= 0x555555555555556) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioFormatListItem>>(v7);
      uint64_t v9 = 0;
      *(void *)&long long v14 = v8;
      *((void *)&v14 + 1) = v8;
      uint64_t v15 = &v8[48 * v10];
      do
      {
        uint64_t v11 = v5 + v9;
        *(_DWORD *)&v8[v9] = *(_DWORD *)(v5 + v9);
        std::__function::__value_func<void ()(DSPGraph::Box *,unsigned int)>::__value_func[abi:ne180100]((uint64_t)&v8[v9 + 8], v5 + v9 + 8);
        *(void *)&v8[v9 + 40] = *(void *)(v5 + v9 + 40);
        v9 += 48;
      }
      while (v11 + 48 != v6);
      *((void *)&v14 + 1) = &v8[v9];
      uint64_t v1 = *v3;
    }
    uint64_t v12 = *((unsigned int *)v3 + 9);
    long long v13 = (void *)(v1 + 24 * v12 + 16);
    if (*(unsigned char *)(v1 + 8 + v12))
    {
      uint64_t v16 = (void **)(v1 + 24 * v12 + 16);
      std::vector<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver>>::__destroy_vector::operator()[abi:ne180100](&v16);
    }
    else
    {
      *(unsigned char *)(v1 + 8 + v12) = 1;
    }
    void *v13 = 0;
    v13[1] = 0;
    v13[2] = 0;
    *(_OWORD *)long long v13 = v14;
    v13[2] = v15;
    long long v14 = 0uLL;
    uint64_t v15 = 0;
    v3[1] = (uint64_t)v13;
    uint64_t v16 = (void **)&v14;
    std::vector<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver>>::__destroy_vector::operator()[abi:ne180100](&v16);
    return v13;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_19013E570(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::vector<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  __clang_call_terminate(a1);
}

uint64_t caulk::concurrent::lf_read_synchronized_write<std::vector<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver>>>::mutator::~mutator(uint64_t a1)
{
  uint64_t v2 = *(caulk::concurrent::details::lf_read_sync_write_impl **)a1;
  if (v2 && *(void *)(a1 + 8))
  {
    caulk::concurrent::details::lf_read_sync_write_impl::end_mutate(v2);
    uint64_t v3 = *(caulk::concurrent::details::lf_read_sync_write_impl **)a1;
    uint64_t v4 = *(unsigned int *)(a1 + 32);
    *(unsigned char *)(*(void *)a1 + v4 + 8) = 0;
    uint64_t v6 = (void **)((char *)v3 + 24 * v4 + 16);
    std::vector<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver>>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
  if (*(unsigned char *)(a1 + 24)) {
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(a1 + 16));
  }
  return a1;
}

uint64_t std::__split_buffer<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = i - 48;
    std::__function::__value_func<void ()(DSPGraph::Box *,unsigned int)>::~__value_func[abi:ne180100]((void *)(i - 40));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver *,DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver *,DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1 + 8;
    do
    {
      uint64_t v6 = v5 - 8;
      *(_DWORD *)a3 = *(_DWORD *)(v5 - 8);
      std::__function::__value_func<void ()(DSPGraph::Box *,unsigned int)>::operator=[abi:ne180100]((void *)(a3 + 8), v5);
      *(void *)(a3 + 40) = *(void *)(v5 + 32);
      a3 += 48;
      v5 += 48;
    }
    while (v6 + 48 != a2);
  }
  return a3;
}

void *std::__function::__value_func<void ()(DSPGraph::Box *,unsigned int)>::operator=[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v4 = (void *)a1[3];
  a1[3] = 0;
  if (v4 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  uint64_t v5 = *(void *)(a2 + 24);
  if (v5)
  {
    if (v5 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v5;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void DSPGraph::Box::removeRenderCallback(DSPGraph::Box *this, int a2)
{
  v30[5] = *MEMORY[0x1E4F143B8];
  unint64_t v19 = (std::mutex *)((char *)this + 672);
  std::mutex::lock((std::mutex *)((char *)this + 672));
  uint64_t v4 = 0;
  unint64_t v20 = this;
  uint64_t v5 = *((void *)this + 92) + 64;
  v26[0] = *((void *)this + 92);
  v26[1] = v5;
  do
  {
    uint64_t v6 = (os_unfair_lock_s *)v26[v4];
    v22[0] = (uint64_t)v6;
    v22[1] = 0;
    v22[2] = (uint64_t)&v6[1];
    char v23 = 1;
    os_unfair_lock_lock(v6 + 1);
    int v24 = caulk::concurrent::details::lf_read_sync_write_impl::begin_mutate((caulk::concurrent::details::lf_read_sync_write_impl *)v6);
    BOOL v25 = v24 == 0;
    unint64_t v7 = caulk::concurrent::lf_read_synchronized_write<std::vector<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver>>>::mutator::copy_previous(v22);
    uint64_t v8 = v7[1];
    uint64_t v9 = *v7;
    uint64_t v21 = *v7;
    if (*v7 == v8)
    {
LABEL_5:
      uint64_t v11 = v8;
    }
    else
    {
      while (1)
      {
        int v29 = *(_DWORD *)v9;
        std::__function::__value_func<void ()(DSPGraph::Box *,unsigned int)>::__value_func[abi:ne180100]((uint64_t)v30, v9 + 8);
        v30[4] = *(void *)(v9 + 40);
        int v10 = v29;
        std::__function::__value_func<void ()(DSPGraph::Box *,unsigned int)>::~__value_func[abi:ne180100](v30);
        if (v10 == a2) {
          break;
        }
        v9 += 48;
        if (v9 == v8) {
          goto LABEL_5;
        }
      }
      uint64_t v11 = v8;
      if (v9 != v8)
      {
        uint64_t v16 = v9 + 48;
        uint64_t v11 = v9;
        while (v16 != v8)
        {
          int v27 = *(_DWORD *)v16;
          std::__function::__value_func<void ()(DSPGraph::Box *,unsigned int)>::__value_func[abi:ne180100]((uint64_t)v28, v16 + 8);
          v28[4] = *(void *)(v16 + 40);
          int v17 = v27;
          std::__function::__value_func<void ()(DSPGraph::Box *,unsigned int)>::~__value_func[abi:ne180100](v28);
          if (v17 != a2)
          {
            *(_DWORD *)uint64_t v11 = *(_DWORD *)v16;
            std::__function::__value_func<void ()(DSPGraph::Box *,unsigned int)>::operator=[abi:ne180100]((void *)(v11 + 8), v16 + 8);
            *(void *)(v11 + 40) = *(void *)(v16 + 40);
            v11 += 48;
          }
          v16 += 48;
        }
      }
    }
    uint64_t v12 = v7[1];
    if (v11 != v12)
    {
      uint64_t v11 = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver *,DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver *,DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver *>(v12, v7[1], v11);
      uint64_t v13 = v7[1];
      if (v13 != v11)
      {
        do
        {
          uint64_t v14 = v13 - 48;
          std::__function::__value_func<void ()(DSPGraph::Box *,unsigned int)>::~__value_func[abi:ne180100]((void *)(v13 - 40));
          uint64_t v13 = v14;
        }
        while (v14 != v11);
      }
      v7[1] = v11;
    }
    uint64_t v15 = *v7;
    caulk::concurrent::lf_read_synchronized_write<std::vector<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver,std::allocator<DSPGraph::RenderObserverList<DSPGraph::Box>::RenderObserver>>>::mutator::~mutator((uint64_t)v22);
    ++v4;
  }
  while (v4 != 2);
  if (v11 - v15 != v8 - v21) {
    atomic_fetch_add((atomic_uint *volatile)v20 + 192, 0xFFFFFFFF);
  }
  std::mutex::unlock(v19);
  do
    unsigned int v18 = atomic_load((unsigned int *)v20 + 192);
  while ((v18 & 0x80000000) != 0);
}

void sub_19013EA9C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t DSPGraph::Box::sampleRate(DSPGraph::Box *this)
{
  uint64_t v4 = (char *)this + 88;
  uint64_t v2 = *((void *)this + 11);
  uint64_t v3 = *((void *)v4 + 1);
  if (((v3 - v2) & 0x1FFFFFFFE0) != 0)
  {
    if (v3 == v2)
    {
      std::string::basic_string[abi:ne180100]<0>(v12, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v11, "out");
      uint64_t v6 = (void *)((char *)this + 32);
      if (*((char *)this + 55) < 0) {
        uint64_t v6 = (void *)*v6;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v5, v6, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
    }
  }
  else
  {
    uint64_t v2 = *((void *)this + 8);
    uint64_t v7 = *((void *)this + 9);
    if (((v7 - v2) & 0x1FFFFFFFE0) == 0) {
      return 1;
    }
    if (v7 == v2)
    {
      std::string::basic_string[abi:ne180100]<0>(v12, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v11, "in");
      int v10 = (void *)((char *)this + 32);
      if (*((char *)this + 55) < 0) {
        int v10 = (void *)*v10;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v9, v10, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
    }
  }
  return **(double **)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2) + 120);
}

void sub_19013EC2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (*(char *)(v23 - 17) < 0) {
    operator delete(*(void **)(v23 - 40));
  }
  _Unwind_Resume(exception_object);
}

double DSPGraph::Box::selfLatencyInSeconds(DSPGraph::Box *this)
{
  return (double)(unint64_t)(*(uint64_t (**)(DSPGraph::Box *))(*(void *)this + 72))(this)
       / (double)*(unint64_t *)(*((void *)this + 1) + 696);
}

double DSPGraph::Box::upstreamLatencyInSeconds(DSPGraph::Box *this)
{
  return (double)DSPGraph::Box::upstreamLatencyInTicks(this)
       / (double)*(unint64_t *)(*((void *)this + 1) + 696);
}

unint64_t DSPGraph::Box::totalLatencyInTicks(DSPGraph::Box *this)
{
  uint64_t v2 = (*(uint64_t (**)(DSPGraph::Box *))(*(void *)this + 72))(this);
  return DSPGraph::Box::upstreamLatencyInTicks(this) + v2;
}

uint64_t DSPGraph::Box::totalLatencyInSamples(DSPGraph::Box *this)
{
  uint64_t v2 = (*(uint64_t (**)(DSPGraph::Box *))(*(void *)this + 72))(this);
  unint64_t v3 = DSPGraph::Box::upstreamLatencyInTicks(this) + v2;
  unint64_t v4 = v3 * DSPGraph::Box::sampleRate(this);
  unint64_t v5 = *(void *)(*((void *)this + 1) + 696);
  unint64_t v6 = v4 / v5;
  LOBYTE(v7) = 0;
  if (v4 / v5 < 0x100000000) {
    unint64_t v7 = v4 / v5;
  }
  unint64_t v8 = HIDWORD(v6);
  unsigned int v9 = v6 & 0xFFFFFF00 | v7;
  if (v5 > v4) {
    unsigned int v10 = 0;
  }
  else {
    unsigned int v10 = -1;
  }
  if (v8) {
    return v10;
  }
  else {
    return v9;
  }
}

void *DSPGraph::Box::propagateFlagsAndTimeStamp(void *this, int a2, const AudioTimeStamp *a3)
{
  unint64_t v3 = (void *)this[11];
  unint64_t v4 = (void *)this[12];
  if (v3 != v4)
  {
    this = (void *)this[11];
    unint64_t v7 = v3;
    do
    {
      uint64_t v8 = *v7;
      v7 += 4;
      uint64_t v9 = *(void *)((*(uint64_t (**)(void *))(v8 + 40))(this) + 56);
      long long v11 = *(_OWORD *)&a3->mSMPTETime.mSubframes;
      long long v10 = *(_OWORD *)&a3->mSMPTETime.mHours;
      long long v12 = *(_OWORD *)&a3->mRateScalar;
      *(_OWORD *)(v9 + 8) = *(_OWORD *)&a3->mSampleTime;
      *(_OWORD *)(v9 + 24) = v12;
      *(_OWORD *)(v9 + 40) = v11;
      *(_OWORD *)(v9 + 5std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v10;
      *(_DWORD *)(v9 + 72) = a2;
      v3 += 4;
      this = v7;
    }
    while (v7 != v4);
  }
  return this;
}

uint64_t DSPGraph::Box::addPropertyTap(int64x2_t *this, const DSPGraph::PropertyTap *a2)
{
  unint64_t v4 = this[12].u64[0];
  unint64_t v5 = this[11].u64[1];
  if (v5 >= v4)
  {
    uint64_t v10 = this[11].i64[0];
    uint64_t v11 = (uint64_t)(v5 - v10) >> 6;
    if ((unint64_t)(v11 + 1) >> 58) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v4 - v10;
    uint64_t v13 = v12 >> 5;
    if (v12 >> 5 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    unint64_t v30 = this + 12;
    if (v14)
    {
      if (v14 >> 58) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v15 = (char *)operator new(v14 << 6);
    }
    else
    {
      uint64_t v15 = 0;
    }
    uint64_t v16 = &v15[64 * v11];
    int v27 = v15;
    v28.i64[0] = (uint64_t)v16;
    v28.i64[1] = (uint64_t)v16;
    int v29 = &v15[64 * v14];
    long long v17 = *((_OWORD *)a2 + 1);
    *(_OWORD *)uint64_t v16 = *(_OWORD *)a2;
    *((_OWORD *)v16 + 1) = v17;
    *(void *)(v16 + 29) = *(void *)((char *)a2 + 29);
    *((void *)v16 + std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
    *((void *)v16 + 7) = 0;
    unsigned int v18 = (const void *)*((void *)a2 + 5);
    uint64_t v19 = *((void *)a2 + 6);
    *((void *)v16 + 5) = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)v16 + 5, v18, v19, v19 - (void)v18);
    uint64_t v20 = v28.i64[0];
    uint64_t v9 = v28.i64[1] + 64;
    v28.i64[1] += 64;
    uint64_t v22 = this[11].i64[0];
    unint64_t v21 = this[11].u64[1];
    if (v21 == v22)
    {
      int64x2_t v25 = vdupq_n_s64(v21);
    }
    else
    {
      do
      {
        long long v23 = *(_OWORD *)(v21 - 64);
        long long v24 = *(_OWORD *)(v21 - 48);
        *(void *)(v20 - 35) = *(void *)(v21 - 35);
        *(_OWORD *)(v20 - 64) = v23;
        *(_OWORD *)(v20 - 48) = v24;
        *(void *)(v20 - 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
        *(void *)(v20 - 8) = 0;
        *(void *)(v20 - 24) = 0;
        *(_OWORD *)(v20 - 24) = *(_OWORD *)(v21 - 24);
        *(void *)(v20 - 8) = *(void *)(v21 - 8);
        v20 -= 64;
        *(void *)(v21 - 24) = 0;
        *(void *)(v21 - 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
        *(void *)(v21 - 8) = 0;
        v21 -= 64;
      }
      while (v21 != v22);
      int64x2_t v25 = this[11];
      uint64_t v9 = v28.i64[1];
    }
    this[11].i64[0] = v20;
    this[11].i64[1] = v9;
    int64x2_t v28 = v25;
    unint64_t v26 = (char *)this[12].i64[0];
    this[12].i64[0] = (uint64_t)v29;
    int v29 = v26;
    int v27 = (char *)v25.i64[0];
    uint64_t result = std::__split_buffer<DSPGraph::PropertyTap>::~__split_buffer((uint64_t)&v27);
  }
  else
  {
    long long v6 = *(_OWORD *)a2;
    long long v7 = *((_OWORD *)a2 + 1);
    *(void *)(v5 + 29) = *(void *)((char *)a2 + 29);
    *(_OWORD *)unint64_t v5 = v6;
    *(_OWORD *)(v5 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v7;
    *(void *)(v5 + 48) = 0;
    *(void *)(v5 + 5std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
    *(void *)(v5 + 40) = 0;
    uint64_t result = (uint64_t)std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(v5 + 40), *((const void **)a2 + 5), *((void *)a2 + 6), *((void *)a2 + 6) - *((void *)a2 + 5));
    uint64_t v9 = v5 + 64;
    this[11].i64[1] = v5 + 64;
  }
  this[11].i64[1] = v9;
  atomic_fetch_add(this[48].i32, 1u);
  return result;
}

void sub_19013F0AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<DSPGraph::PropertyTap>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<DSPGraph::PropertyTap>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v2 - 64;
    unint64_t v4 = *(void **)(v2 - 24);
    if (v4)
    {
      *(void *)(v2 - 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 64;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void DSPGraph::ParameterEndpoint::print(int a1, void *a2, unsigned int a3)
{
}

void DSPGraph::PropertyEndpoint::print(int a1, void *a2, unsigned int a3)
{
}

void DSPGraph::PropertyTap::print(int a1, void *a2, unsigned int a3)
{
}

void DSPGraph::AUBox::AUBox(DSPGraph::AUBox *this, OpaqueAudioComponentInstance *a2, unsigned int a3, unsigned int a4)
{
}

void sub_19013F3E8(_Unwind_Exception *a1)
{
  unint64_t v4 = (void *)*((void *)v1 + 100);
  if (v4)
  {
    *((void *)v1 + 101) = v4;
    operator delete(v4);
  }
  unint64_t v5 = *v2;
  if (*v2)
  {
    *((void *)v1 + 98) = v5;
    operator delete(v5);
  }
  DSPGraph::Box::~Box(v1);
  _Unwind_Resume(a1);
}

void DSPGraph::ArithmeticMinBox::f(DSPGraph::ArithmeticMinBox *this, const float *__B, float *__C, vDSP_Length __N)
{
}

uint64_t DSPGraph::ArithmeticMinBox::calculateFlags(DSPGraph::ArithmeticMinBox *this, char a2)
{
  return (a2 | 0xFFFFFFEF) & this;
}

void DSPGraph::ArithmeticMaxBox::f(DSPGraph::ArithmeticMaxBox *this, const float *__B, float *__C, vDSP_Length __N)
{
}

uint64_t DSPGraph::ArithmeticMaxBox::calculateFlags(DSPGraph::ArithmeticMaxBox *this, char a2)
{
  return (a2 | 0xFFFFFFEF) & this;
}

void DSPGraph::ArithmeticMultBox::f(DSPGraph::ArithmeticMultBox *this, const float *__B, float *__C, vDSP_Length __N)
{
}

void DSPGraph::ArithmeticMultBox::f(const DSPSplitComplex *a1, const float *__B, DSPSplitComplex *__C, vDSP_Length __N)
{
}

void DSPGraph::ArithmeticMultBox::f(const float *__B, DSPSplitComplex *__A, DSPSplitComplex *__C, vDSP_Length __N)
{
}

void DSPGraph::ArithmeticMultBox::f(const DSPSplitComplex *a1, DSPSplitComplex *__B, DSPSplitComplex *__C, vDSP_Length __N)
{
}

uint64_t DSPGraph::ArithmeticMultBox::calculateFlags(DSPGraph::ArithmeticMultBox *this, char a2)
{
  return a2 & 0x10 | this;
}

void DSPGraph::ArithmeticDivBox::f(DSPGraph::ArithmeticDivBox *this, const float *__B, float *__C, vDSP_Length __N)
{
}

void DSPGraph::ArithmeticDivBox::f(const DSPSplitComplex *a1, const float *__B, DSPSplitComplex *__C, vDSP_Length __N)
{
}

void DSPGraph::ArithmeticDivBox::f(float *a1, const DSPSplitComplex *a2, const DSPSplitComplex *a3, vDSP_Length __N)
{
  float __A = 0.0;
  imagp = a3->imagp;
  v8.realp = a1;
  v8.imagp = imagp;
  vDSP_Length v7 = __N;
  vDSP_vfill(&__A, imagp, 1, __N);
  vDSP_zvdiv(a2, 1, &v8, 1, a3, 1, v7);
}

void DSPGraph::ArithmeticDivBox::f(DSPSplitComplex *__A, DSPSplitComplex *__B, DSPSplitComplex *__C, vDSP_Length __N)
{
}

void DSPGraph::ArithmeticDiffBox::f(DSPGraph::ArithmeticDiffBox *this, const float *__B, float *__C, vDSP_Length __N)
{
}

void DSPGraph::ArithmeticDiffBox::f(const DSPSplitComplex *a1, const float *__B, DSPSplitComplex *__C, vDSP_Length __N)
{
}

void DSPGraph::ArithmeticDiffBox::f(const float *__B, DSPSplitComplex *__A, DSPSplitComplex *__C, vDSP_Length __N)
{
  vDSP_Length v5 = __N;
  vDSP_zrvsub(__A, 1, __B, 1, __C, 1, __N);
  vDSP_zvneg(__C, 1, __C, 1, v5);
}

void DSPGraph::ArithmeticDiffBox::f(const DSPSplitComplex *a1, DSPSplitComplex *__B, DSPSplitComplex *__C, vDSP_Length __N)
{
}

uint64_t DSPGraph::ArithmeticDiffBox::calculateFlags(DSPGraph::ArithmeticDiffBox *this, char a2)
{
  return (a2 | 0xFFFFFFEF) & this;
}

void DSPGraph::ArithmeticSumBox::f(DSPGraph::ArithmeticSumBox *this, const float *__B, float *__C, vDSP_Length __N)
{
}

void DSPGraph::ArithmeticSumBox::f(const DSPSplitComplex *a1, const float *__B, DSPSplitComplex *__C, vDSP_Length __N)
{
}

void DSPGraph::ArithmeticSumBox::f(const float *__B, DSPSplitComplex *__A, DSPSplitComplex *__C, vDSP_Length __N)
{
}

void DSPGraph::ArithmeticSumBox::f(const DSPSplitComplex *a1, DSPSplitComplex *__B, DSPSplitComplex *__C, vDSP_Length __N)
{
}

uint64_t DSPGraph::ArithmeticSumBox::calculateFlags(DSPGraph::ArithmeticSumBox *this, char a2)
{
  return (a2 | 0xFFFFFFEF) & this;
}

size_t DSPGraph::LinearGainPolicy::getGainParameterInfo@<X0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0u;
  *(void *)(a1 + 84) = 0x40000000C0000000;
  *(_DWORD *)(a1 + 92) = 1065353216;
  *(_DWORD *)(a1 + 80) = 14;
  size_t result = strlcpy((char *)a1, "gain", 0x34uLL);
  *(void *)(a1 + 72) = @"gain";
  *(_DWORD *)(a1 + 96) |= 0xC8000000;
  return result;
}

size_t DSPGraph::DecibelGainPolicy::getGainParameterInfo@<X0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0u;
  *(void *)(a1 + 84) = 0x41C00000C3480000;
  *(_DWORD *)(a1 + 80) = 13;
  size_t result = strlcpy((char *)a1, "dbgain", 0x34uLL);
  *(void *)(a1 + 72) = @"dbgain";
  *(_DWORD *)(a1 + 96) |= 0xC8000000;
  return result;
}

float DSPGraph::DecibelGainPolicy::linearGainToPolicyGain(DSPGraph::DecibelGainPolicy *this, float a2)
{
  if (a2 < 1.0e-10) {
    a2 = 1.0e-10;
  }
  return log10f(a2) * 20.0;
}

float DSPGraph::DecibelGainPolicy::policyGainToLinearGain(DSPGraph::DecibelGainPolicy *this, float a2)
{
  return __exp10f(a2 / 20.0);
}

void DSPGraph::GainBox::GainBox(DSPGraph::GainBox *this)
{
}

{
  DSPGraph::Box::Box(this, 1u, 1u);
}

float DSPGraph::GenericGainBox<DSPGraph::LinearGainPolicy>::reset(uint64_t a1)
{
  float v1 = 0.0;
  if (!*(unsigned char *)(a1 + 780)) {
    float v1 = 1.0;
  }
  float result = *(float *)(a1 + 776) * v1;
  *(float *)(a1 + 804) = result;
  *(_WORD *)(a1 + 812) = 257;
  return result;
}

BOOL DSPGraph::GenericGainBox<DSPGraph::LinearGainPolicy>::initialize(uint64_t a1)
{
  DSPGraph::Box::initialize((DSPGraph::Box *)a1);
  uint64_t v2 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v48, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v47, "in");
    uint64_t v37 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      uint64_t v37 = (void *)*v37;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v36, v37, (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5, 0);
  }
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
  uint64_t v4 = *(void *)(a1 + 88);
  if (*(void *)(a1 + 96) == v4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v48, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v47, "out");
    uint64_t v39 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      uint64_t v39 = (void *)*v39;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v38, v39, (uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 5, 0);
  }
  uint64_t v5 = *(void *)(v3 + 120);
  uint64_t v6 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4) + 120);
  *(unsigned char *)(a1 + 813) = 1;
  int v7 = *(_DWORD *)(v5 + 8);
  if (v7 == 1819304813)
  {
    int v8 = *(_DWORD *)(v5 + 12);
    if ((v8 & 1) == 0) {
      goto LABEL_62;
    }
    int v9 = *(_DWORD *)(v5 + 32);
    if (v9 != 32) {
      goto LABEL_62;
    }
  }
  else
  {
    if (v7 != 1718773105 || (int v9 = *(_DWORD *)(v5 + 32), v9 != 64))
    {
LABEL_62:
      std::string::basic_string[abi:ne180100]<0>(&v48, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v47, "initialize");
      std::string::basic_string[abi:ne180100]<0>(&v46, "GainBox input format must be non-interleaved float or 'freq'");
      DSPGraph::ThrowException(1718449215, &v48, 2630, &v47, (long long *)&v46);
    }
    int v8 = *(_DWORD *)(v5 + 12);
  }
  if ((v8 & 0x20) == 0) {
    goto LABEL_62;
  }
  int v10 = *(_DWORD *)(v6 + 8);
  if (v10 == 1819304813)
  {
    int v11 = *(_DWORD *)(v6 + 12);
    if ((v11 & 1) == 0) {
      goto LABEL_63;
    }
    int v12 = *(_DWORD *)(v6 + 32);
    if (v12 != 32) {
      goto LABEL_63;
    }
  }
  else
  {
    if (v10 != 1718773105 || (int v12 = *(_DWORD *)(v6 + 32), v12 != 64))
    {
LABEL_63:
      std::string::basic_string[abi:ne180100]<0>(&v48, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v47, "initialize");
      std::string::basic_string[abi:ne180100]<0>(&v46, "GainBox output format must be non-interleaved float or 'freq'");
      DSPGraph::ThrowException(1718449215, &v48, 2633, &v47, (long long *)&v46);
    }
    int v11 = *(_DWORD *)(v6 + 12);
  }
  if ((v11 & 0x20) == 0) {
    goto LABEL_63;
  }
  if (*(double *)v5 == 0.0)
  {
    if (v7 != v10) {
      goto LABEL_55;
    }
  }
  else
  {
    BOOL v13 = *(double *)v6 == 0.0;
    if (*(double *)v5 == *(double *)v6) {
      BOOL v13 = 1;
    }
    if (v7 != v10 || !v13)
    {
LABEL_55:
      std::string::basic_string[abi:ne180100]<0>(&v48, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v47, "initialize");
      CA::StreamDescription::AsString((CA::StreamDescription *)&v42, (void *)v5, v28, v29);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v43, "GainBox input and output formats don't match (", &v42);
      *(void *)&double v30 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v44, &v43, " != ").n128_u64[0];
      CA::StreamDescription::AsString((CA::StreamDescription *)v40, (void *)v6, v30, v31);
      if ((v41 & 0x80u) == 0) {
        unint64_t v32 = (const std::string::value_type *)v40;
      }
      else {
        unint64_t v32 = (const std::string::value_type *)v40[0];
      }
      if ((v41 & 0x80u) == 0) {
        std::string::size_type v33 = v41;
      }
      else {
        std::string::size_type v33 = v40[1];
      }
      uint64_t v34 = std::string::append(&v44, v32, v33);
      long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v35;
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v46, &v45, ")");
      DSPGraph::ThrowException(1718449215, &v48, 2638, &v47, (long long *)&v46);
    }
  }
  int v14 = *(_DWORD *)(v5 + 16);
  if (v14)
  {
    int v15 = *(_DWORD *)(v6 + 16);
    if (v15 && v14 != v15) {
      goto LABEL_55;
    }
  }
  int v17 = *(_DWORD *)(v5 + 20);
  if (v17)
  {
    int v18 = *(_DWORD *)(v6 + 20);
    if (v18 && v17 != v18) {
      goto LABEL_55;
    }
  }
  int v20 = *(_DWORD *)(v5 + 24);
  if (v20)
  {
    int v21 = *(_DWORD *)(v6 + 24);
    if (v21 && v20 != v21) {
      goto LABEL_55;
    }
  }
  int v23 = *(_DWORD *)(v5 + 28);
  if (v23)
  {
    int v24 = *(_DWORD *)(v6 + 28);
    if (v23 != v24 && v24 != 0 || v9 != v12) {
      goto LABEL_55;
    }
  }
  else if (v9 != v12)
  {
    goto LABEL_55;
  }
  BOOL result = CA::Implementation::EquivalentFormatFlags((CA::Implementation *)v5, (const AudioStreamBasicDescription *)v6, (const AudioStreamBasicDescription *)1, 1);
  if (!result) {
    goto LABEL_55;
  }
  return result;
}

void sub_19013FD50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (*(char *)(v42 - 97) < 0) {
    operator delete(*(void **)(v42 - 120));
  }
  if (a42 < 0) {
    operator delete(__p);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (*(char *)(v42 - 73) < 0) {
    operator delete(*(void **)(v42 - 96));
  }
  if (*(char *)(v42 - 49) < 0) {
    operator delete(*(void **)(v42 - 72));
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::GenericGainBox<DSPGraph::LinearGainPolicy>::process(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = a1;
  uint64_t v4 = a1 + 64;
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t v69 = v2;
  if (*(void *)(v4 + 8) == v3)
  {
    std::string::basic_string[abi:ne180100]<0>(__Start, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v71, "in");
    uint64_t v56 = (void *)(v2 + 32);
    if (*(char *)(v2 + 55) < 0) {
      uint64_t v56 = (void *)*v56;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v55, v56, (uint64_t)(*(void *)(v2 + 72) - *(void *)(v2 + 64)) >> 5, 0);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 40))(v3);
  uint64_t v7 = *(void *)(v2 + 88);
  if (*(void *)(v2 + 96) == v7)
  {
    std::string::basic_string[abi:ne180100]<0>(__Start, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v71, "out");
    unint64_t v58 = (void *)(v2 + 32);
    if (*(char *)(v2 + 55) < 0) {
      unint64_t v58 = (void *)*v58;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v57, v58, (uint64_t)(*(void *)(v2 + 96) - *(void *)(v2 + 88)) >> 5, 0);
  }
  int v8 = *(unsigned int **)(*(void *)(v6 + 56) + 80);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 40))(v7);
  uint64_t v10 = *(void *)(v2 + 88);
  if (*(void *)(v2 + 96) == v10)
  {
    std::string::basic_string[abi:ne180100]<0>(__Start, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v71, "out");
    uint64_t v60 = (void *)(v2 + 32);
    if (*(char *)(v2 + 55) < 0) {
      uint64_t v60 = (void *)*v60;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v59, v60, (uint64_t)(*(void *)(v2 + 96) - *(void *)(v2 + 88)) >> 5, 0);
  }
  uint64_t v11 = *(void *)(*(void *)(v9 + 56) + 80);
  int v70 = *(_DWORD *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10) + 120) + 8);
  uint64_t v12 = *v8;
  if (*(unsigned char *)(v2 + 812)) {
    *(unsigned char *)(v2 + 812) = 0;
  }
  if (*(unsigned char *)(v2 + 813))
  {
    float v13 = 0.0;
    if (!*(unsigned char *)(v2 + 780)) {
      float v13 = 1.0;
    }
    *(float *)(v2 + 808) = *(float *)(v2 + 776) * v13;
  }
  uint64_t v14 = *(void *)(v2 + 64);
  if (*(void *)(v2 + 72) == v14)
  {
    std::string::basic_string[abi:ne180100]<0>(__Start, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v71, "in");
    uint64_t v62 = (void *)(v2 + 32);
    if (*(char *)(v2 + 55) < 0) {
      uint64_t v62 = (void *)*v62;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v61, v62, (uint64_t)(*(void *)(v2 + 72) - *(void *)(v2 + 64)) >> 5, 0);
  }
  size_t v15 = (4 * a2) << (v70 == 1718773105);
  if ((*(unsigned char *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v14 + 40))(v14) + 56) + 72) & 0x10) != 0)
  {
    if (v12)
    {
      int v24 = (void **)(v11 + 16);
      do
      {
        bzero(*v24, v15);
        *((_DWORD *)v24 - 1) = v15;
        v24 += 2;
        --v12;
      }
      while (v12);
    }
  }
  else
  {
    vDSP_Length v16 = a2;
    float v17 = *(float *)(v2 + 804);
    int v18 = (const float *)(v2 + 808);
    float v19 = *(float *)(v2 + 808);
    if (v17 == v19)
    {
      if (v12)
      {
        int v20 = (float **)(v11 + 16);
        int v21 = (const float **)(v8 + 4);
        do
        {
          uint64_t v22 = *v21;
          int v23 = *v20;
          vDSP_vsmul(*v21, 1, (const float *)(v2 + 808), *v20, 1, v16);
          if (v70 == 1718773105) {
            vDSP_vsmul(&v22[v16], 1, (const float *)(v2 + 808), &v23[v16], 1, v16);
          }
          *((_DWORD *)v20 - 1) = v15;
          v20 += 2;
          v21 += 2;
          --v12;
        }
        while (v12);
      }
    }
    else
    {
      if (*(unsigned char *)(v2 + 813))
      {
        double v25 = *(double *)(v2 + 784);
        float v26 = (float)(v19 - v17)
            / (float)(v25 * (double)DSPGraph::Box::sampleRate((DSPGraph::Box *)v2));
        *(float *)(v2 + 800) = v26;
        float v17 = *(float *)(v2 + 804);
      }
      else
      {
        float v26 = *(float *)(v2 + 800);
      }
      *(unsigned char *)(v2 + 813) = 0;
      int v27 = (const float *)(v2 + 800);
      float v28 = v17 + (float)(v26 * (float)a2);
      if ((v26 <= 0.0 || (float v29 = *v18, v28 <= *v18)) && (v26 >= 0.0 || (float v29 = *v18, v28 >= *v18)))
      {
        if (v12)
        {
          long long v35 = (float **)(v11 + 16);
          uint64_t v36 = (const float **)(v8 + 4);
          do
          {
            uint64_t v37 = *v36;
            uint64_t v38 = *v35;
            LODWORD(__Start[0]) = *(_DWORD *)(v2 + 804);
            vDSP_vrampmul(v37, 1, (float *)__Start, (const float *)(v2 + 800), v38, 1, v16);
            if (v70 == 1718773105)
            {
              LODWORD(__Start[0]) = *(_DWORD *)(v2 + 804);
              vDSP_vrampmul(&v37[v16], 1, (float *)__Start, (const float *)(v2 + 800), &v38[v16], 1, v16);
            }
            v35 += 2;
            v36 += 2;
            --v12;
          }
          while (v12);
        }
      }
      else if (v12)
      {
        vDSP_Length v30 = fabsf((float)(v29 - v17) / v26);
        vDSP_Length __N = a2 - v30;
        unint64_t v68 = (const float *)(v2 + 800);
        int16x8_t v31 = (float **)(v11 + 16);
        unint64_t v32 = (const float **)(v8 + 4);
        do
        {
          std::string::size_type v33 = *v32;
          uint64_t v34 = *v31;
          LODWORD(__Start[0]) = *(_DWORD *)(v2 + 804);
          vDSP_vrampmul(v33, 1, (float *)__Start, v27, v34, 1, v30);
          vDSP_vsmul(&v33[v30], 1, v18, &v34[v30], 1, __N);
          if (v70 == 1718773105)
          {
            LODWORD(__Start[0]) = *(_DWORD *)(v69 + 804);
            vDSP_vrampmul(&v33[v16], 1, (float *)__Start, v68, &v34[v16], 1, v30);
            vDSP_vsmul(&v33[v30 + v16], 1, v18, &v34[v30 + v16], 1, __N);
          }
          v31 += 2;
          v32 += 2;
          --v12;
          int v27 = v68;
          uint64_t v2 = v69;
        }
        while (v12);
        float v28 = *v18;
      }
      else
      {
        float v28 = v29;
      }
      *(float *)(v2 + 804) = v28;
    }
  }
  if (*(unsigned char *)(v2 + 813)) {
    int v39 = 16 * (*(float *)(v2 + 808) == 0.0);
  }
  else {
    int v39 = 0;
  }
  uint64_t v40 = *(void *)(v2 + 64);
  if (*(void *)(v2 + 72) == v40)
  {
    std::string::basic_string[abi:ne180100]<0>(__Start, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v71, "in");
    int64_t v64 = (void *)(v69 + 32);
    if (*(char *)(v69 + 55) < 0) {
      int64_t v64 = (void *)*v64;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v63, v64, (uint64_t)(*(void *)(v69 + 72) - *(void *)(v69 + 64)) >> 5, 0);
  }
  uint64_t v41 = (*(uint64_t (**)(uint64_t))(*(void *)v40 + 40))(v40);
  uint64_t v42 = *(void *)(v2 + 64);
  if (*(void *)(v2 + 72) == v42)
  {
    std::string::basic_string[abi:ne180100]<0>(__Start, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v71, "in");
    uint64_t v66 = (void *)(v69 + 32);
    if (*(char *)(v69 + 55) < 0) {
      uint64_t v66 = (void *)*v66;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v65, v66, (uint64_t)(*(void *)(v69 + 72) - *(void *)(v69 + 64)) >> 5, 0);
  }
  int v43 = *(_DWORD *)(*(void *)(v41 + 56) + 72);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v42 + 40))(v42);
  std::string v45 = *(uint64_t **)(v2 + 88);
  std::string v46 = *(uint64_t **)(v2 + 96);
  if (v45 != v46)
  {
    int v47 = v43 | v39;
    long long v48 = (_OWORD *)(*(void *)(result + 56) + 8);
    uint64_t result = *(void *)(v2 + 88);
    long long v49 = (uint64_t *)result;
    do
    {
      uint64_t v50 = *v49;
      v49 += 4;
      uint64_t v51 = *(void *)((*(uint64_t (**)(uint64_t))(v50 + 40))(result) + 56);
      long long v53 = v48[2];
      long long v52 = v48[3];
      long long v54 = v48[1];
      *(_OWORD *)(v51 + 8) = *v48;
      *(_OWORD *)(v51 + 24) = v54;
      *(_OWORD *)(v51 + 40) = v53;
      *(_OWORD *)(v51 + 5std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v52;
      *(_DWORD *)(v51 + 72) = v47;
      v45 += 4;
      uint64_t result = (uint64_t)v49;
    }
    while (v49 != v46);
  }
  if (*(float *)(v2 + 804) == *(float *)(v2 + 808)) {
    *(unsigned char *)(v2 + 813) = 1;
  }
  return result;
}

void sub_19014068C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::GenericGainBox<DSPGraph::LinearGainPolicy>::setProperty(double *a1, int a2, int a3, unsigned int a4, int a5, double *a6)
{
  if (a2 != 3098) {
    return DSPGraph::Box::setProperty((DSPGraph::Box *)a1, a2, a3, a4, a5, a6);
  }
  if (a5 != 8) {
    return 561211770;
  }
  if (a3) {
    return 4294956430;
  }
  double v8 = *a6;
  a1[98] = *a6;
  double v9 = a1[99];
  uint64_t v6 = 0;
  if (v8 < v9) {
    a1[98] = v9;
  }
  return v6;
}

double DSPGraph::GenericGainBox<DSPGraph::LinearGainPolicy>::getProperty(DSPGraph::Box *this, int a2, uint64_t a3, uint64_t a4, unsigned int *a5, CFStringRef *a6)
{
  if (a2 == 3098)
  {
    if (*a5 == 8 && a6 && !a3)
    {
      double result = *((double *)this + 98);
      *(double *)a6 = result;
    }
  }
  else
  {
    DSPGraph::Box::getProperty(this, a2, a3, a4, a5, a6);
  }
  return result;
}

unint64_t DSPGraph::GenericGainBox<DSPGraph::LinearGainPolicy>::getPropertyInfo(DSPGraph::Box *a1, int a2, int a3)
{
  if (a2 == 3098)
  {
    uint64_t v3 = 8;
    if (a3)
    {
      uint64_t v3 = 4294956430;
      unint64_t v4 = 0;
    }
    else
    {
      unint64_t v4 = 0x100000000;
    }
  }
  else
  {
    uint64_t PropertyInfo = DSPGraph::Box::getPropertyInfo(a1, a2, a3);
    unint64_t v4 = PropertyInfo & 0xFFFFFFFF00000000;
    uint64_t v3 = PropertyInfo;
  }
  return v4 | v3;
}

double DSPGraph::GenericGainBox<DSPGraph::LinearGainPolicy>::desc@<D0>(uint64_t a1@<X8>)
{
  double result = 9.69732525e189;
  *(_OWORD *)a1 = xmmword_1901C62A0;
  *(_DWORD *)(a1 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
  return result;
}

size_t DSPGraph::GenericGainBox<DSPGraph::LinearGainPolicy>::getParameterInfo@<X0>(int a1@<W1>, int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v4 = -10866;
LABEL_3:
    *(_DWORD *)a3 = v4;
    *(unsigned char *)(a3 + 104) = 0;
    return result;
  }
  if (a2 == 1)
  {
    uint64_t v15 = 0;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    DWORD2(v14) = 1065353216;
    LODWORD(v14) = 2;
    size_t result = strlcpy((char *)&v9, "mute", 0x34uLL);
    *((void *)&v13 + 1) = @"mute";
    LODWORD(v15) = v15 | 0xC8000000;
    long long v6 = v10;
    *(_OWORD *)a3 = v9;
    *(_OWORD *)(a3 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v6;
    long long v7 = v12;
    *(_OWORD *)(a3 + 32) = v11;
    *(_OWORD *)(a3 + 48) = v7;
    long long v8 = v14;
    *(_OWORD *)(a3 + 64) = v13;
    *(_OWORD *)(a3 + 80) = v8;
    *(void *)(a3 + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v15;
  }
  else
  {
    if (a2)
    {
      int v4 = -10878;
      goto LABEL_3;
    }
    size_t result = DSPGraph::LinearGainPolicy::getGainParameterInfo(a3);
  }
  *(unsigned char *)(a3 + 104) = 1;
  return result;
}

void sub_190140934(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void DSPGraph::GenericGainBox<DSPGraph::LinearGainPolicy>::getParameterList(int a1@<W1>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (!a1)
  {
    uint64_t v3 = operator new(8uLL);
    *a2 = v3;
    *v3++ = 0x100000000;
    a2[1] = v3;
    a2[2] = v3;
  }
}

float DSPGraph::GenericGainBox<DSPGraph::LinearGainPolicy>::getParameter(uint64_t a1, int a2, int a3)
{
  if (!(a3 | a2)) {
    return *(float *)(a1 + 776);
  }
  if (a2 != 1 || a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v6, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v5, "getParameter");
    std::string::basic_string[abi:ne180100]<0>(&v4, "");
    DSPGraph::ThrowException(-10878, &v6, 2769, &v5, &v4);
  }
  float result = 1.0;
  if (!*(unsigned char *)(a1 + 780)) {
    return 0.0;
  }
  return result;
}

void sub_190140A24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

float DSPGraph::GenericGainBox<DSPGraph::LinearGainPolicy>::setParameter(uint64_t a1, int a2, int a3, float result)
{
  if (a3 | a2)
  {
    if (a2 != 1 || a3)
    {
      std::string::basic_string[abi:ne180100]<0>(&v7, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v6, "setParameter");
      std::string::basic_string[abi:ne180100]<0>(&v5, "");
      DSPGraph::ThrowException(-10878, &v7, 2748, &v6, &v5);
    }
    *(unsigned char *)(a1 + 780) = result != 0.0;
  }
  else
  {
    *(float *)(a1 + 77std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = result;
  }
  if (!*(unsigned char *)(*(void *)(a1 + 8) + 762) || *(unsigned char *)(a1 + 812))
  {
    float v4 = 0.0;
    if (!*(unsigned char *)(a1 + 780)) {
      float v4 = 1.0;
    }
    float result = *(float *)(a1 + 776) * v4;
    *(float *)(a1 + 804) = result;
    *(float *)(a1 + 808) = result;
  }
  return result;
}

void sub_190140B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::GenericGainBox<DSPGraph::LinearGainPolicy>::canProcessInPlace()
{
  return 1;
}

const char *DSPGraph::GenericGainBox<DSPGraph::LinearGainPolicy>::ClassName()
{
  return "gain";
}

void DSPGraph::GainBox::~GainBox(DSPGraph::GainBox *this)
{
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x192FC8940);
}

void DSPGraph::DBGainBox::DBGainBox(DSPGraph::DBGainBox *this)
{
}

{
  DSPGraph::Box::Box(this, 1u, 1u);
}

double DSPGraph::GenericGainBox<DSPGraph::DecibelGainPolicy>::getProperty(DSPGraph::Box *this, int a2, uint64_t a3, uint64_t a4, unsigned int *a5, CFStringRef *a6)
{
  if (a2 == 3098)
  {
    if (*a5 == 8 && a6 && !a3)
    {
      double result = *((double *)this + 98);
      *(double *)a6 = result;
    }
  }
  else
  {
    DSPGraph::Box::getProperty(this, a2, a3, a4, a5, a6);
  }
  return result;
}

unint64_t DSPGraph::GenericGainBox<DSPGraph::DecibelGainPolicy>::getPropertyInfo(DSPGraph::Box *a1, int a2, int a3)
{
  if (a2 == 3098)
  {
    uint64_t v3 = 8;
    if (a3)
    {
      uint64_t v3 = 4294956430;
      unint64_t v4 = 0;
    }
    else
    {
      unint64_t v4 = 0x100000000;
    }
  }
  else
  {
    uint64_t PropertyInfo = DSPGraph::Box::getPropertyInfo(a1, a2, a3);
    unint64_t v4 = PropertyInfo & 0xFFFFFFFF00000000;
    uint64_t v3 = PropertyInfo;
  }
  return v4 | v3;
}

double DSPGraph::GenericGainBox<DSPGraph::DecibelGainPolicy>::desc@<D0>(uint64_t a1@<X8>)
{
  double result = 3.64150051e175;
  *(_OWORD *)a1 = xmmword_1901C6330;
  *(_DWORD *)(a1 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
  return result;
}

size_t DSPGraph::GenericGainBox<DSPGraph::DecibelGainPolicy>::getParameterInfo@<X0>(int a1@<W1>, int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v4 = -10866;
LABEL_3:
    *(_DWORD *)a3 = v4;
    *(unsigned char *)(a3 + 104) = 0;
    return result;
  }
  if (a2 == 1)
  {
    uint64_t v15 = 0;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    DWORD2(v14) = 1065353216;
    LODWORD(v14) = 2;
    size_t result = strlcpy((char *)&v9, "mute", 0x34uLL);
    *((void *)&v13 + 1) = @"mute";
    LODWORD(v15) = v15 | 0xC8000000;
    long long v6 = v10;
    *(_OWORD *)a3 = v9;
    *(_OWORD *)(a3 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v6;
    long long v7 = v12;
    *(_OWORD *)(a3 + 32) = v11;
    *(_OWORD *)(a3 + 48) = v7;
    long long v8 = v14;
    *(_OWORD *)(a3 + 64) = v13;
    *(_OWORD *)(a3 + 80) = v8;
    *(void *)(a3 + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v15;
  }
  else
  {
    if (a2)
    {
      int v4 = -10878;
      goto LABEL_3;
    }
    size_t result = DSPGraph::DecibelGainPolicy::getGainParameterInfo(a3);
  }
  *(unsigned char *)(a3 + 104) = 1;
  return result;
}

void sub_190140E84(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void DSPGraph::GenericGainBox<DSPGraph::DecibelGainPolicy>::getParameterList(int a1@<W1>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (!a1)
  {
    uint64_t v3 = operator new(8uLL);
    *a2 = v3;
    *v3++ = 0x100000000;
    a2[1] = v3;
    a2[2] = v3;
  }
}

float DSPGraph::GenericGainBox<DSPGraph::DecibelGainPolicy>::getParameter(uint64_t a1, int a2, int a3)
{
  if (a3 | a2)
  {
    if (a2 != 1 || a3)
    {
      std::string::basic_string[abi:ne180100]<0>(&v7, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v6, "getParameter");
      std::string::basic_string[abi:ne180100]<0>(&v5, "");
      DSPGraph::ThrowException(-10878, &v7, 2769, &v6, &v5);
    }
    float result = 1.0;
    if (!*(unsigned char *)(a1 + 780)) {
      return 0.0;
    }
  }
  else
  {
    float v4 = *(float *)(a1 + 776);
    if (v4 < 1.0e-10) {
      float v4 = 1.0e-10;
    }
    return log10f(v4) * 20.0;
  }
  return result;
}

void sub_190140F90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

void DSPGraph::DBGainBox::~DBGainBox(DSPGraph::DBGainBox *this)
{
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x192FC8940);
}

void sub_190141178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  long long v11 = v10;

  a9.super_class = (Class)AUHostingService;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1901413D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_190141848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10) {
    free(a10);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<AUHostingService_exit_handler(void)::$_0,std::allocator<AUHostingService_exit_handler(void)::$_0>,void ()(void)>::operator()()
{
}

void std::__function::__func<AUHostingService_exit_handler(void)::$_0,std::allocator<AUHostingService_exit_handler(void)::$_0>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9E7A0;
}

void *std::__function::__func<AUHostingService_exit_handler(void)::$_0,std::allocator<AUHostingService_exit_handler(void)::$_0>,void ()(void)>::__clone()
{
  float result = operator new(0x10uLL);
  *float result = &unk_1EDF9E7A0;
  return result;
}

void std::__function::__func<AUHostingService_exit_handler(void)::$_0,std::allocator<AUHostingService_exit_handler(void)::$_0>,void ()(void)>::~__func()
{
}

void sub_190141EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_190142018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19014235C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19014246C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1901425B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t FLACAudioStream::HandleDiscontinuity(FLACAudioStream *this)
{
  *((_DWORD *)this + 59) = 0;
  *((unsigned char *)this + 500) = 0;
  *((_DWORD *)this + 12std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
  FLACAudioStream::Resync(this);
  return 0;
}

BOOL FLACAudioStream::Resync(FLACAudioStream *this)
{
  uint64_t v2 = 0;
  uint64_t v3 = *((void *)this + 1);
  uint64_t v4 = *(void *)(v3 + 88);
  uint64_t v5 = *(void *)(v3 + 96);
  uint64_t v6 = v4 + *(unsigned int *)(v3 + 80);
  BOOL v7 = v5 < v4 || v6 <= v5;
  int v8 = v7;
  unsigned int v9 = v6 - v5;
  if (!v7 && v9) {
    uint64_t v2 = *(void *)(v3 + 72) + (v5 - v4);
  }
  if (v8) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = v9;
  }
  *((_DWORD *)this + 122) = 0;
  if (v10 <= 1)
  {
    char v11 = 0;
    int v12 = 2;
LABEL_15:
    *((_DWORD *)this + 122) = v12;
    goto LABEL_31;
  }
  if ((int)v10 >= 2)
  {
    uint64_t v13 = 0;
    uint64_t v14 = v2 + 1;
    uint64_t v15 = 1;
    while (1)
    {
      uint64_t v16 = (unsigned __int8 *)(v2 + v13);
      if ((*(unsigned char *)(v2 + v13 + 1) & 0xFC | (*(unsigned __int8 *)(v2 + v13) << 8)) == 0xFFF8)
      {
        v30[0] = v2 + v13;
        v30[1] = v2 + v13;
        float v17 = &v16[(v10 - v13)];
        v30[2] = v17;
        uint64_t v31 = 0;
        if ((v16 & 3) != 0)
        {
          int v18 = 0;
          int v19 = -8;
          uint64_t v20 = v14;
          do
          {
            int v21 = v19;
            if (v16 >= v17) {
              int v22 = 255;
            }
            else {
              int v22 = *v16;
            }
            int v18 = v22 | (v18 << 8);
            ++v16;
            int v19 = v21 + 8;
          }
          while ((v20++ & 3) != 0);
          v30[0] = v16;
          LODWORD(v31) = v18 << (16 - v21);
          HIDWORD(v31) = v21 + 16;
        }
        int v29 = 0;
        int v24 = FLACAudioStream::ParseFLACFrameHeader((uint64_t)this, (uint64_t)v30, &v27, v28, &v29);
        if (!v24)
        {
          char v11 = 1;
          goto LABEL_31;
        }
        if (v24 == -11) {
          break;
        }
      }
      ++v13;
      ++v15;
      ++v14;
      if (v15 == v10) {
        goto LABEL_30;
      }
    }
    char v11 = 0;
    int v12 = v29 + v10;
    goto LABEL_15;
  }
LABEL_30:
  char v11 = 0;
LABEL_31:
  int v25 = *((_DWORD *)this + 122);
  BOOL result = v25 == 0;
  if (!v25 && (v11 & 1) == 0)
  {
    BOOL result = 0;
    *(void *)(*((void *)this + 1) + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = *(void *)(*((void *)this + 1) + 88)
                                              + *(unsigned int *)(*((void *)this + 1) + 80);
  }
  return result;
}

uint64_t FLACAudioStream::ParseFLACFrameHeader(uint64_t a1, uint64_t a2, unsigned int *a3, double *a4, int *a5)
{
  *a3 = 0;
  bzero(a4, 0x28uLL);
  *a5 = 0;
  unint64_t v10 = *(void *)(a2 + 16);
  char v11 = *(unsigned int **)a2;
  uint64_t v12 = v10 - *(void *)a2;
  int v13 = *(_DWORD *)(a2 + 28);
  int v14 = v13 + 8 * v12;
  int v15 = v14 >> 3;
  if (v14 <= 0x2F)
  {
    int v16 = 6 - v15;
LABEL_3:
    *a5 = v16;
    return 4294967285;
  }
  unsigned int v18 = *(_DWORD *)(a2 + 24);
  unsigned int v19 = HIWORD(v18);
  int v20 = v13 - 16;
  *(_DWORD *)(a2 + 28) = v13 - 16;
  if (v13 - 16 < 0)
  {
    unint64_t v22 = *(void *)(a2 + 8);
    if ((v12 & ~(v12 >> 63) & 0xFFFFFFFC) == 0 || v22 > (unint64_t)v11)
    {
      uint64_t v24 = 0;
      do
      {
        int v25 = (unsigned __int8 *)v11 + v24;
        unsigned int v26 = v18 << 8;
        *(_DWORD *)(a2 + 24) = v26;
        int v27 = 255;
        if ((unint64_t)v11 + v24 < v10 && (unint64_t)v25 >= v22) {
          int v27 = *v25;
        }
        unsigned int v18 = v27 | v26;
        *(_DWORD *)(a2 + 24) = v18;
        ++v24;
      }
      while (v24 != 4);
    }
    else
    {
      unsigned int v18 = bswap32(*v11);
    }
    unsigned int v28 = v18 << (16 - v13);
    int v29 = v13 + 16;
    *(_DWORD *)(a2 + 28) = v29;
    *(void *)a2 = ++v11;
    v19 |= v18 >> v29;
    if (v29) {
      unsigned int v21 = v28;
    }
    else {
      unsigned int v21 = 0;
    }
    if (v29) {
      int v20 = v29;
    }
    else {
      int v20 = 0;
    }
  }
  else
  {
    unsigned int v21 = v18 << 16;
  }
  *(_DWORD *)(a2 + 24) = v21;
  if ((v19 & 0xFFFE) != 0xFFF8) {
    return 4294967284;
  }
  int v30 = *(_DWORD *)(a1 + 364);
  if (v19)
  {
    if (v30) {
      return 4294967284;
    }
  }
  else if (!v30)
  {
    return 4294967284;
  }
  unsigned int v31 = HIWORD(v21);
  int v32 = v20 - 16;
  *(_DWORD *)(a2 + 28) = v20 - 16;
  if (v20 - 16 < 0)
  {
    unint64_t v34 = *(void *)(a2 + 8);
    if (((v10 - v11) & ~((uint64_t)(v10 - (void)v11) >> 63) & 0xFFFFFFFC) != 0
      && v34 <= (unint64_t)v11)
    {
      unsigned int v21 = bswap32(*v11);
    }
    else
    {
      uint64_t v35 = 0;
      do
      {
        uint64_t v36 = (unsigned __int8 *)v11 + v35;
        unsigned int v37 = v21 << 8;
        *(_DWORD *)(a2 + 24) = v37;
        int v38 = 255;
        if ((unint64_t)v11 + v35 < v10 && (unint64_t)v36 >= v34) {
          int v38 = *v36;
        }
        unsigned int v21 = v38 | v37;
        *(_DWORD *)(a2 + 24) = v21;
        ++v35;
      }
      while (v35 != 4);
    }
    unsigned int v39 = v21 << (16 - v20);
    int v40 = v20 + 16;
    *(_DWORD *)(a2 + 28) = v40;
    *(void *)a2 = ++v11;
    v31 |= v21 >> v40;
    if (v40) {
      unsigned int v33 = v39;
    }
    else {
      unsigned int v33 = 0;
    }
    if (v40) {
      int v32 = v40;
    }
    else {
      int v32 = 0;
    }
  }
  else
  {
    unsigned int v33 = v21 << 16;
  }
  *(_DWORD *)(a2 + 24) = v33;
  uint64_t result = 4294967284;
  if ((v31 & 1) == 0 && (v31 & 6) != 6)
  {
    int v41 = v31 >> 4;
    if (v41 != 15)
    {
      int v42 = (unsigned __int16)v31 >> 12;
      if ((unsigned __int16)v31 >> 12)
      {
        int v43 = (v31 >> 8) & 0xF;
        int v44 = v43 - 15;
        if (v43 != 15)
        {
          unsigned int v45 = HIBYTE(v33);
          int v46 = v32 - 8;
          *(_DWORD *)(a2 + 28) = v32 - 8;
          if (v32 - 8 < 0)
          {
            unint64_t v48 = *(void *)(a2 + 8);
            if (((v10 - v11) & ~((uint64_t)(v10 - (void)v11) >> 63) & 0xFFFFFFFC) != 0
              && v48 <= (unint64_t)v11)
            {
              unsigned int v33 = bswap32(*v11);
            }
            else
            {
              uint64_t v49 = 0;
              do
              {
                uint64_t v50 = (unsigned __int8 *)v11 + v49;
                unsigned int v51 = v33 << 8;
                *(_DWORD *)(a2 + 24) = v51;
                int v52 = 255;
                if ((unint64_t)v11 + v49 < v10 && (unint64_t)v50 >= v48) {
                  int v52 = *v50;
                }
                unsigned int v33 = v51 | v52;
                *(_DWORD *)(a2 + 24) = v33;
                ++v49;
              }
              while (v49 != 4);
            }
            int v54 = v32 + 24;
            BOOL v53 = v32 == -24;
            ++v11;
            v45 |= v33 >> (v32 + 24);
            if (v32 == -24) {
              int v47 = 0;
            }
            else {
              int v47 = v33 << (8 - v32);
            }
            if (v53) {
              int v46 = 0;
            }
            else {
              int v46 = v54;
            }
          }
          else
          {
            int v47 = v33 << 8;
          }
          char v55 = v46 + 8;
          uint64_t v56 = (unsigned int *)((char *)v11 - (((v46 + 8) >> 3) & 0x1FFFFFFC));
          *(void *)a2 = v56;
          int v57 = (v46 + 8) & 0x1F;
          *(_DWORD *)(a2 + 24) = v47;
          *(_DWORD *)(a2 + 28) = v57;
          if (v57)
          {
            unint64_t v58 = v56 - 1;
            unint64_t v59 = *(void *)(a2 + 8);
            if (((v10 - (v56 - 4)) & ~((uint64_t)(v10 - (void)(v56 - 1)) >> 63) & 0xFFFFFFFC) == 0
              || v59 > (unint64_t)v58)
            {
              uint64_t v61 = -4;
              do
              {
                uint64_t v62 = (unsigned __int8 *)v56 + v61;
                int v63 = v47 << 8;
                *(_DWORD *)(a2 + 24) = v63;
                int v64 = 255;
                if ((unint64_t)v56 + v61 < v10 && (unint64_t)v62 >= v59) {
                  int v64 = *v62;
                }
                int v47 = v64 | v63;
                *(_DWORD *)(a2 + 24) = v47;
                ++v61;
              }
              while (v61);
            }
            else
            {
              int v47 = bswap32(*v58);
            }
            unsigned int v65 = v47 << -(char)v57;
          }
          else
          {
            unsigned int v65 = 0;
          }
          *(_DWORD *)(a2 + 24) = v65;
          if (v45 >= 0x80)
          {
            if ((v45 & 0xFFFFFFE0) == 0xC0)
            {
              int v66 = 0;
              unsigned int v67 = 2;
            }
            else if ((v45 & 0xFFFFFFF0) == 0xE0)
            {
              int v66 = 0;
              unsigned int v67 = 3;
            }
            else
            {
              if ((v45 & 0xFFFFFFF8) == 0xF0)
              {
                unsigned int v67 = 4;
              }
              else if ((v45 & 0xFFFFFFFC) == 0xF8)
              {
                unsigned int v67 = 5;
              }
              else if ((v45 & 0xFFFFFFFE) == 0xFC)
              {
                unsigned int v67 = 6;
              }
              else
              {
                uint64_t result = 4294967284;
                if ((v19 & 1) == 0 || v45 != 254) {
                  return result;
                }
                unsigned int v67 = 7;
              }
              int v66 = 1;
            }
          }
          else
          {
            int v66 = 0;
            unsigned int v67 = 1;
          }
          unsigned int v68 = v15 - 4 - v67;
          if (v15 - 4 < v67)
          {
            int v16 = v67 - (v15 - 4);
            goto LABEL_3;
          }
          if (!v66) {
            goto LABEL_114;
          }
          unint64_t v69 = *(void *)(a2 + 8);
          char v70 = 32 - v57;
          unsigned int v71 = *(_DWORD *)&v55 | 0xFFFFFFE0;
          do
          {
            *(void *)(a2 + 24) = 0;
            if (v57)
            {
              *(_DWORD *)(a2 + 28) = v71;
              if (((v10 - v56) & ~((uint64_t)(v10 - (void)v56) >> 63) & 0xFFFFFFFC) == 0
                || v69 > (unint64_t)v56)
              {
                uint64_t v73 = 0;
                int v77 = 0;
                do
                {
                  __int16 v74 = (unsigned __int8 *)v56 + v73;
                  int v75 = v77 << 8;
                  *(_DWORD *)(a2 + 24) = v75;
                  int v76 = 255;
                  if ((unint64_t)v56 + v73 < v10 && (unint64_t)v74 >= v69) {
                    int v76 = *v74;
                  }
                  int v77 = v76 | v75;
                  *(_DWORD *)(a2 + 24) = v77;
                  ++v73;
                }
                while (v73 != 4);
              }
              else
              {
                int v77 = bswap32(*v56);
              }
              *(void *)a2 = ++v56;
              unsigned int v65 = v77 << v70;
              *(_DWORD *)(a2 + 24) = v77 << v70;
              *(_DWORD *)(a2 + 28) = v57;
            }
            else
            {
              unsigned int v65 = 0;
              *(void *)a2 = ++v56;
            }
            v67 -= 4;
          }
          while (v67 > 3);
          if (v67)
          {
LABEL_114:
            unsigned int v78 = 8 * v67;
            unsigned int v79 = v78 - v57;
            if (v78 > v57)
            {
              *(void *)(a2 + 24) = 0;
              unsigned int v65 = 0;
              int v57 = 0;
              if (v79 >= 0x20)
              {
                uint64_t v56 = (unsigned int *)((char *)v56 + ((v79 >> 3) & 0x1FFFFFFC));
                *(void *)a2 = v56;
                unsigned int v78 = v79 & 0x1F;
              }
              else
              {
                unsigned int v78 = v79;
              }
            }
            if (v78 - 33 >= 0xFFFFFFE0)
            {
              v57 -= v78;
              *(_DWORD *)(a2 + 28) = v57;
              if (v57 < 0)
              {
                unint64_t v80 = *(void *)(a2 + 8);
                if (((v10 - v56) & ~((uint64_t)(v10 - (void)v56) >> 63) & 0xFFFFFFFC) != 0
                  && v80 <= (unint64_t)v56)
                {
                  unsigned int v65 = bswap32(*v56);
                }
                else
                {
                  uint64_t v81 = 0;
                  do
                  {
                    unsigned int v82 = (unsigned __int8 *)v56 + v81;
                    unsigned int v83 = v65 << 8;
                    *(_DWORD *)(a2 + 24) = v83;
                    int v84 = 255;
                    if ((unint64_t)v56 + v81 < v10 && (unint64_t)v82 >= v80) {
                      int v84 = *v82;
                    }
                    unsigned int v65 = v84 | v83;
                    *(_DWORD *)(a2 + 24) = v65;
                    ++v81;
                  }
                  while (v81 != 4);
                }
                unsigned int v85 = v65 << -(char)v57;
                v57 += 32;
                *(_DWORD *)(a2 + 28) = v57;
                *(void *)a2 = ++v56;
                if (v57)
                {
                  unsigned int v65 = v85;
                }
                else
                {
                  int v57 = 0;
                  unsigned int v65 = 0;
                }
              }
              else
              {
                v65 <<= v78;
              }
              *(_DWORD *)(a2 + 24) = v65;
            }
          }
          if (v42 == 7)
          {
            if (v68 <= 2) {
              goto LABEL_161;
            }
            unsigned int v86 = HIWORD(v65);
            v57 -= 16;
            *(_DWORD *)(a2 + 28) = v57;
            if (v57 >= 0)
            {
              v65 <<= 16;
              int v87 = -2;
              goto LABEL_151;
            }
            int v143 = (unsigned __int16)v31 >> 12;
            int v145 = v43 - 15;
            int v147 = v31 >> 4;
            AT::TBitstreamReader<unsigned int>::FillCacheFrom(a2, v56);
            uint64_t v56 = (unsigned int *)(*(void *)a2 + 4);
            *(void *)a2 = v56;
            unsigned int v91 = *(_DWORD *)(a2 + 24);
            int v92 = *(_DWORD *)(a2 + 28);
            v86 |= v91 >> v92;
            int v57 = v92 + 32;
            *(_DWORD *)(a2 + 28) = v92 + 32;
            if (v92 == -32) {
              unsigned int v65 = 0;
            }
            else {
              unsigned int v65 = v91 << -(char)v92;
            }
            int v87 = -2;
          }
          else
          {
            if (v42 != 6)
            {
              unsigned int v88 = 0;
              goto LABEL_152;
            }
            if (v68 <= 1)
            {
LABEL_156:
              int v94 = 2;
LABEL_162:
              int v16 = v94 - v68;
              goto LABEL_3;
            }
            unsigned int v86 = HIBYTE(v65);
            v57 -= 8;
            *(_DWORD *)(a2 + 28) = v57;
            if (v57 >= 0)
            {
              v65 <<= 8;
              int v87 = -1;
LABEL_151:
              *(_DWORD *)(a2 + 24) = v65;
              unsigned int v88 = v86 + 1;
              v68 += v87;
LABEL_152:
              switch(v43)
              {
                case 14:
                  unsigned int v93 = v68 - 2;
                  if (v68 > 2)
                  {
                    unsigned int v146 = v44;
                    unsigned int v148 = v41;
                    unsigned int v95 = HIWORD(v65);
                    *(_DWORD *)(a2 + 28) = v57 - 16;
                    unsigned int v142 = v88;
                    if (v57 - 16 < 0)
                    {
                      int v102 = v42;
                      AT::TBitstreamReader<unsigned int>::FillCacheFrom(a2, v56);
                      *(void *)a2 += 4;
                      unsigned int v103 = *(_DWORD *)(a2 + 24);
                      int v104 = *(_DWORD *)(a2 + 28);
                      v95 |= v103 >> v104;
                      *(_DWORD *)(a2 + 28) = v104 + 32;
                      if (v104 == -32) {
                        unsigned int v96 = 0;
                      }
                      else {
                        unsigned int v96 = v103 << -(char)v104;
                      }
                      int v42 = v102;
                    }
                    else
                    {
                      unsigned int v96 = v65 << 16;
                    }
                    int v97 = v42;
                    *(_DWORD *)(a2 + 24) = v96;
                    int v111 = 10 * v95;
LABEL_182:
                    unsigned int v144 = v111;
LABEL_186:
                    unsigned int v68 = v93;
LABEL_187:
                    unsigned int v112 = v15 - v68;
                    *a3 = v112;
                    AT::TBitstreamReader<unsigned int>::PutBack(a2, 8 * v112);
                    unsigned int v114 = *(_DWORD *)(a2 + 24);
                    int v113 = *(_DWORD *)(a2 + 28);
                    int v115 = 0;
                    if (v112)
                    {
                      unint64_t v117 = *(void *)(a2 + 8);
                      unint64_t v116 = *(void *)(a2 + 16);
                      uint64_t v118 = *(unsigned int **)a2;
                      unsigned int v119 = v148;
                      unsigned int v120 = v146;
                      do
                      {
                        unsigned int v121 = HIBYTE(v114);
                        *(_DWORD *)(a2 + 28) = v113 - 8;
                        if (v113 - 8 < 0)
                        {
                          if (((v116 - v118) & ~((uint64_t)(v116 - (void)v118) >> 63) & 0xFFFFFFFC) == 0
                            || v117 > (unint64_t)v118)
                          {
                            uint64_t v123 = 0;
                            do
                            {
                              unint64_t v124 = (unsigned __int8 *)v118 + v123;
                              unsigned int v125 = v114 << 8;
                              *(_DWORD *)(a2 + 24) = v125;
                              int v126 = 255;
                              if ((unint64_t)v118 + v123 < v116 && (unint64_t)v124 >= v117) {
                                int v126 = *v124;
                              }
                              unsigned int v114 = v126 | v125;
                              *(_DWORD *)(a2 + 24) = v114;
                              ++v123;
                            }
                            while (v123 != 4);
                          }
                          else
                          {
                            unsigned int v114 = bswap32(*v118);
                          }
                          unsigned int v127 = v114 << (8 - v113);
                          v113 += 24;
                          *(_DWORD *)(a2 + 28) = v113;
                          *(void *)a2 = ++v118;
                          v121 |= v114 >> v113;
                          if (v113) {
                            unsigned int v114 = v127;
                          }
                          else {
                            unsigned int v114 = 0;
                          }
                          if (!v113) {
                            int v113 = 0;
                          }
                        }
                        else
                        {
                          v114 <<= 8;
                          v113 -= 8;
                        }
                        *(_DWORD *)(a2 + 24) = v114;
                        int v115 = FLAC_crc8[v121 ^ v115];
                        --v112;
                      }
                      while (v112);
                    }
                    else
                    {
                      unsigned int v119 = v148;
                      unsigned int v120 = v146;
                    }
                    unsigned int v128 = HIBYTE(v114);
                    int v129 = v113 - 8;
                    *(_DWORD *)(a2 + 28) = v129;
                    if (v129 < 0)
                    {
                      unsigned int v131 = v120;
                      unsigned int v132 = v119;
                      AT::TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
                      *(void *)a2 += 4;
                      unsigned int v133 = *(_DWORD *)(a2 + 24);
                      int v134 = *(_DWORD *)(a2 + 28);
                      v128 |= v133 >> v134;
                      *(_DWORD *)(a2 + 28) = v134 + 32;
                      if (v134 == -32) {
                        unsigned int v130 = 0;
                      }
                      else {
                        unsigned int v130 = v133 << -(char)v134;
                      }
                      unsigned int v119 = v132;
                      unsigned int v120 = v131;
                    }
                    else
                    {
                      unsigned int v130 = v114 << 8;
                    }
                    *(_DWORD *)(a2 + 24) = v130;
                    if (v128 != v115) {
                      return 4294967284;
                    }
                    if (v120 > 0xFFFFFFFC)
                    {
                      double v135 = (double)v144;
                    }
                    else
                    {
                      if (!v43) {
                        return 4294967284;
                      }
                      double v135 = kFLACSampleRates[v43];
                    }
                    *a4 = v135;
                    if (v135 == *(double *)(a1 + 344))
                    {
                      int v136 = (v31 >> 1) & 7;
                      *((_DWORD *)a4 + 2) = 1718378851;
                      if (v136)
                      {
                        int v137 = kFLACBitDepths[v136];
                        if (v137 == *(_DWORD *)(a1 + 328))
                        {
                          if ((0x89uLL >> v136))
                          {
LABEL_229:
                            unsigned int v140 = v142;
                            if ((v97 - 8) <= 0xFFFFFFFD) {
                              unsigned int v140 = kFLACBlockSizes[v97];
                            }
                            *((_DWORD *)a4 + 5) = v140;
                            uint64_t result = 4294967284;
                            if (v119 <= 0xA)
                            {
                              int v141 = LOWORD(kFLACChannelConfigToLayoutTag[v119]);
                              *((_DWORD *)a4 + 7) = v141;
                              if (v141 == *(_DWORD *)(a1 + 372)) {
                                return 0;
                              }
                              else {
                                return 4294967284;
                              }
                            }
                            return result;
                          }
                          HIDWORD(v139) = kFLACBitDepths[v136];
                          LODWORD(v139) = v137 - 16;
                          unsigned int v138 = v139 >> 2;
                          if (v138 <= 4 && ((0x17u >> v138) & 1) != 0)
                          {
                            *((_DWORD *)a4 + 3) = dword_1901DC360[v138];
                            goto LABEL_229;
                          }
                        }
                      }
                    }
                    return 4294967284;
                  }
                  break;
                case 13:
                  unsigned int v93 = v68 - 2;
                  if (v68 > 2)
                  {
                    unsigned int v146 = v44;
                    unsigned int v148 = v41;
                    unsigned int v100 = HIWORD(v65);
                    *(_DWORD *)(a2 + 28) = v57 - 16;
                    unsigned int v142 = v88;
                    if (v57 - 16 < 0)
                    {
                      int v108 = v42;
                      AT::TBitstreamReader<unsigned int>::FillCacheFrom(a2, v56);
                      *(void *)a2 += 4;
                      unsigned int v109 = *(_DWORD *)(a2 + 24);
                      int v110 = *(_DWORD *)(a2 + 28);
                      v100 |= v109 >> v110;
                      *(_DWORD *)(a2 + 28) = v110 + 32;
                      if (v110 == -32) {
                        unsigned int v101 = 0;
                      }
                      else {
                        unsigned int v101 = v109 << -(char)v110;
                      }
                      int v42 = v108;
                    }
                    else
                    {
                      unsigned int v101 = v65 << 16;
                    }
                    unsigned int v144 = v100;
                    int v97 = v42;
                    *(_DWORD *)(a2 + 24) = v101;
                    goto LABEL_186;
                  }
                  break;
                case 12:
                  unsigned int v93 = v68 - 1;
                  if (v68 <= 1) {
                    goto LABEL_156;
                  }
                  unsigned int v146 = v44;
                  unsigned int v148 = v41;
                  unsigned int v98 = HIBYTE(v65);
                  *(_DWORD *)(a2 + 28) = v57 - 8;
                  unsigned int v142 = v88;
                  if (v57 - 8 < 0)
                  {
                    int v105 = v42;
                    AT::TBitstreamReader<unsigned int>::FillCacheFrom(a2, v56);
                    *(void *)a2 += 4;
                    unsigned int v106 = *(_DWORD *)(a2 + 24);
                    int v107 = *(_DWORD *)(a2 + 28);
                    v98 |= v106 >> v107;
                    *(_DWORD *)(a2 + 28) = v107 + 32;
                    if (v107 == -32) {
                      unsigned int v99 = 0;
                    }
                    else {
                      unsigned int v99 = v106 << -(char)v107;
                    }
                    int v42 = v105;
                  }
                  else
                  {
                    unsigned int v99 = v65 << 8;
                  }
                  int v97 = v42;
                  *(_DWORD *)(a2 + 24) = v99;
                  int v111 = 1000 * v98;
                  goto LABEL_182;
                default:
                  if (!v68)
                  {
                    int v16 = 1;
                    goto LABEL_3;
                  }
                  unsigned int v142 = v88;
                  unsigned int v144 = 0;
                  unsigned int v146 = v44;
                  int v97 = v42;
                  unsigned int v148 = v41;
                  goto LABEL_187;
              }
LABEL_161:
              int v94 = 3;
              goto LABEL_162;
            }
            int v143 = (unsigned __int16)v31 >> 12;
            int v145 = v43 - 15;
            int v147 = v31 >> 4;
            AT::TBitstreamReader<unsigned int>::FillCacheFrom(a2, v56);
            uint64_t v56 = (unsigned int *)(*(void *)a2 + 4);
            *(void *)a2 = v56;
            unsigned int v89 = *(_DWORD *)(a2 + 24);
            int v90 = *(_DWORD *)(a2 + 28);
            v86 |= v89 >> v90;
            int v57 = v90 + 32;
            *(_DWORD *)(a2 + 28) = v90 + 32;
            if (v90 == -32) {
              unsigned int v65 = 0;
            }
            else {
              unsigned int v65 = v89 << -(char)v90;
            }
            int v87 = -1;
          }
          int v41 = v147;
          int v42 = v143;
          int v44 = v145;
          goto LABEL_151;
        }
      }
    }
  }
  return result;
}

uint64_t AT::TBitstreamReader<unsigned int>::PutBack(uint64_t result, int a2)
{
  if (a2)
  {
    unsigned int v2 = *(_DWORD *)(result + 28) + a2;
    uint64_t v3 = *(void *)result - ((v2 >> 3) & 0x1FFFFFFC);
    *(void *)uint64_t result = v3;
    int v4 = v2 & 0x1F;
    *(_DWORD *)(result + 28) = v4;
    if (v4)
    {
      uint64_t v5 = (unsigned int *)(v3 - 4);
      unint64_t v7 = *(void *)(result + 8);
      unint64_t v6 = *(void *)(result + 16);
      if (((v6 - (v3 - 4)) & ~((uint64_t)(v6 - (v3 - 4)) >> 63) & 0xFFFFFFFC) == 0
        || v7 > (unint64_t)v5)
      {
        int v13 = *(_DWORD *)(result + 24);
        uint64_t v9 = -4;
        do
        {
          unint64_t v10 = (unsigned __int8 *)(v3 + v9);
          int v11 = v13 << 8;
          *(_DWORD *)(result + 24) = v11;
          int v12 = 255;
          if (v3 + v9 < v6 && (unint64_t)v10 >= v7) {
            int v12 = *v10;
          }
          int v13 = v12 | v11;
          *(_DWORD *)(result + 24) = v13;
          ++v9;
        }
        while (v9);
      }
      else
      {
        int v13 = bswap32(*v5);
      }
      *(_DWORD *)(result + 24) = v13 << -(char)v4;
    }
    else
    {
      *(_DWORD *)(result + 24) = 0;
    }
  }
  return result;
}

uint64_t FLACAudioStream::GeneratePackets(uint64_t a1)
{
  uint64_t v101 = *MEMORY[0x1E4F143B8];
  int v2 = *(_DWORD *)(a1 + 236);
  int v3 = -1;
  if (v2 > 526)
  {
    if (v2 != 535)
    {
      if (v2 == 527) {
        goto LABEL_9;
      }
      goto LABEL_160;
    }
    uint64_t v4 = *(void *)(a1 + 8);
    unsigned int v5 = *(_DWORD *)(v4 + 116);
LABEL_26:
    unsigned int v14 = *(_DWORD *)(a1 + 256) - v5;
    uint64_t v15 = *(void *)(v4 + 88);
    uint64_t v16 = *(void *)(v4 + 96);
    uint64_t v17 = v15 + *(unsigned int *)(v4 + 80);
    if (v17 <= v16 || v16 < v15) {
      unsigned int v19 = 0;
    }
    else {
      unsigned int v19 = v17 - v16;
    }
    if (v14 <= v19) {
      unsigned int v14 = v19;
    }
    LODWORD(v94[0]) = v14;
    size_t v20 = v14 + v5;
    if (*(_DWORD *)(v4 + 120) < v20)
    {
      *(_DWORD *)(v4 + 120) = v20;
      CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v4 + 128), v20);
      uint64_t v4 = *(void *)(a1 + 8);
    }
    StreamBuffer::Copy((void *)(v4 + 72), (unsigned int *)v94, (unsigned __int8 *)(*(void *)(v4 + 128) + *(unsigned int *)(v4 + 116)));
    uint64_t v4 = *(void *)(a1 + 8);
    unsigned int v21 = *(_DWORD *)(v4 + 116) + LODWORD(v94[0]);
    *(_DWORD *)(v4 + 11std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v21;
    if (v21 < *(_DWORD *)(a1 + 256))
    {
      int v3 = 535;
      goto LABEL_160;
    }
    uint64_t v22 = *(void *)(a1 + 272);
    uint64_t v23 = *(void *)(v4 + 128);
    *(void *)(v4 + 88) = v22;
    *(void *)(v4 + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v22;
    *(void *)(v4 + 72) = v23;
    *(_DWORD *)(v4 + 80) = v21;
LABEL_38:
    *(_DWORD *)(a1 + 488) = 0;
LABEL_39:
    if (*(unsigned char *)(a1 + 500))
    {
      uint64_t v24 = 0;
      uint64_t v25 = *(void *)(v4 + 88);
      uint64_t v26 = *(void *)(v4 + 96);
      uint64_t v27 = v25 + *(unsigned int *)(v4 + 80);
      BOOL v28 = v26 < v25 || v27 <= v26;
      int v29 = v28;
      unsigned int v30 = v27 - v26;
      if (!v28 && v30) {
        uint64_t v24 = (unsigned char *)(*(void *)(v4 + 72) + (v26 - v25));
      }
      if (v29) {
        unsigned int v31 = 0;
      }
      else {
        unsigned int v31 = v30;
      }
      if ((*v24 & 0xFC) == 0xF8)
      {
        bzero(__src, 0x10uLL);
        LOBYTE(__src[0]) = -1;
        if (v31 >= 0xF) {
          size_t v32 = 15;
        }
        else {
          size_t v32 = v31;
        }
        memcpy((char *)__src + 1, v24, v32);
        uint64_t v33 = (v32 + 1);
        unsigned int v96 = __src;
        int v97 = __src;
        unsigned int v98 = (unsigned __int8 *)__src + v33;
        uint64_t v99 = 0;
        if (((unint64_t)__src & 3) != 0)
        {
          int v34 = 0;
          uint64_t v35 = __src;
          int v36 = 8 * ((__src ^ 3) & 3);
          uint64_t v37 = ((__src ^ 3) & 3) + 1;
          do
          {
            if (v35 >= (unsigned int *)((char *)__src + v33)) {
              int v38 = 255;
            }
            else {
              int v38 = *(unsigned __int8 *)v35;
            }
            int v34 = v38 | (v34 << 8);
            uint64_t v35 = (unsigned int *)((char *)v35 + 1);
            --v37;
          }
          while (v37);
          unsigned int v96 = (unsigned int *)((char *)__src + ((__src ^ 3) & 3) + 1);
          LODWORD(v99) = v34 << (24 - v36);
          HIDWORD(v99) = v36 + 8;
        }
        int v93 = 0;
        int v39 = FLACAudioStream::ParseFLACFrameHeader(a1, (uint64_t)&v96, (unsigned int *)&v95, v94, &v93);
        if (v39 == -11)
        {
          int v45 = v93 + v31;
LABEL_90:
          *(_DWORD *)(a1 + 488) = v45;
          goto LABEL_9;
        }
        if (v39)
        {
          uint64_t v4 = *(void *)(a1 + 8);
        }
        else
        {
          int v40 = *(_DWORD *)(a1 + 504);
          if (v40)
          {
            if (!*(_DWORD *)(a1 + 200))
            {
              *(_DWORD *)(a1 + 200) = 1;
              CADeprecated::CAAutoFree<AudioStreamPacketDescription>::reallocItems((void **)(a1 + 192), 1);
              int v40 = *(_DWORD *)(a1 + 504);
            }
            int v41 = *(AudioStreamPacketDescription **)(a1 + 192);
            v41->SInt64 mStartOffset = 0;
            v41->mVariableFramesInPacket = 0;
            v41->UInt32 mDataByteSize = v40 - 1;
            AudioFileStreamWrapper::CallPacketsProc(*(AudioFileStreamWrapper **)(a1 + 8), v40 - 1, 1u, *(const void **)(a1 + 288), v41, 1);
            ++*(void *)(a1 + 184);
          }
          memcpy(*(void **)(a1 + 288), __src, (v32 + 1));
          *(_DWORD *)(a1 + 504) = v33;
          uint64_t v4 = *(void *)(a1 + 8);
          int64_t v42 = *(void *)(v4 + 88);
          int64_t v43 = *(void *)(v4 + 96) + v32;
          *(void *)(v4 + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v43;
          if (v43 < v42) {
            goto LABEL_9;
          }
          int64_t v44 = v42 + *(unsigned int *)(v4 + 80);
          if (v44 <= v43 || v44 == v43) {
            goto LABEL_9;
          }
        }
      }
      *(unsigned char *)(a1 + 500) = 0;
    }
    int v46 = 0;
    uint64_t v47 = *(void *)(v4 + 88);
    uint64_t v48 = *(void *)(v4 + 96);
    uint64_t v49 = v47 + *(unsigned int *)(v4 + 80);
    BOOL v50 = v48 < v47 || v49 <= v48;
    int v51 = v50;
    unsigned int v52 = v49 - v48;
    if (!v50 && v52) {
      int v46 = (char *)(*(void *)(v4 + 72) + (v48 - v47));
    }
    if (v51) {
      size_t v53 = 0;
    }
    else {
      size_t v53 = v52;
    }
    if (v53 <= 1)
    {
      int v45 = 2;
      goto LABEL_90;
    }
    int v54 = 0;
    char v55 = 0;
    unint64_t v56 = 0;
    int v57 = 0;
    unint64_t v58 = v46 + 1;
    while (1)
    {
      unint64_t v59 = (unsigned __int8 *)&v46[v57];
      if ((v59[1] & 0xFC | (*v59 << 8)) == 0xFFF8)
      {
        if (v57 + 6 > v53)
        {
          if (v54 == v55 || v55 - v54 == 4 && !*(_DWORD *)v54) {
            *(_DWORD *)(a1 + 488) = v57 + 6;
          }
LABEL_135:
          if (*(_DWORD *)(a1 + 488))
          {
            if (!v54) {
              goto LABEL_9;
            }
LABEL_167:
            operator delete(v54);
            goto LABEL_9;
          }
          unint64_t v76 = v55 - v54;
          if (v55 == v54)
          {
            uint64_t v83 = *(unsigned int *)(a1 + 504);
            if (v83 && (int)v83 + (int)v53 <= (*(_DWORD *)(a1 + 496) + 1))
            {
              memcpy((void *)(*(void *)(a1 + 288) + v83), v46, v53);
              *(_DWORD *)(a1 + 504) += v53;
            }
            else
            {
              *(_DWORD *)(a1 + 504) = 0;
            }
            int v91 = v53 - 1;
          }
          else
          {
            uint64_t v77 = *((unsigned int *)v55 - 1);
            uint64_t v78 = *(unsigned int *)(a1 + 504);
            if (v78)
            {
              size_t v79 = *(unsigned int *)v54;
              if (v79 && (int)v79 + (int)v78 <= (*(_DWORD *)(a1 + 496) + 1))
              {
                memcpy((void *)(*(void *)(a1 + 288) + v78), v46, v79);
                *(_DWORD *)(a1 + 504) += *(_DWORD *)v54;
              }
              FLACAudioStream::FlushPacketBuffer(a1);
            }
            if (v76 >= 5)
            {
              unint64_t v80 = v76 >> 2;
              unsigned int v81 = (v76 >> 2) - 1;
              if (*(_DWORD *)(a1 + 200) >= v81)
              {
                if (v81) {
                  goto LABEL_151;
                }
                unsigned int v85 = *(AudioStreamPacketDescription **)(a1 + 192);
              }
              else
              {
                uint64_t v82 = (1 << -__clz(v80 - 2));
                *(_DWORD *)(a1 + 200) = v82;
                CADeprecated::CAAutoFree<AudioStreamPacketDescription>::reallocItems((void **)(a1 + 192), v82);
LABEL_151:
                uint64_t v84 = 0;
                uint64_t v86 = *(void *)(a1 + 184);
                unsigned int v85 = *(AudioStreamPacketDescription **)(a1 + 192);
                int v87 = (int *)(v54 + 4);
                do
                {
                  SInt64 v88 = *(v87 - 1);
                  unsigned int v89 = &v85[v84];
                  v89->SInt64 mStartOffset = v88;
                  int v90 = *v87++;
                  v89->mVariableFramesInPacket = 0;
                  v89->UInt32 mDataByteSize = v90 - v88;
                  ++v84;
                }
                while (v81 != v84);
                *(void *)(a1 + 184) = v86 + (v80 - 2) + 1;
              }
              AudioFileStreamWrapper::CallPacketsProc(*(AudioFileStreamWrapper **)(a1 + 8), v77, v81, v46, v85, 1);
            }
            if (v77)
            {
              *(void *)(*(void *)(a1 + 8) + 96) += v77;
              goto LABEL_167;
            }
            int v91 = v53 - 1;
            if (v53 <= *(_DWORD *)(a1 + 496) + 1)
            {
              memcpy(*(void **)(a1 + 288), v46, v53);
              *(_DWORD *)(a1 + 504) += v53;
            }
          }
          if (v46[v91] == 255) {
            *(unsigned char *)(a1 + 500) = 1;
          }
          *(void *)(*(void *)(a1 + 8) + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = *(void *)(*(void *)(a1 + 8) + 88)
                                                  + *(unsigned int *)(*(void *)(a1 + 8) + 80);
          if (v54) {
            goto LABEL_167;
          }
LABEL_9:
          uint64_t v4 = *(void *)(a1 + 8);
          uint64_t v6 = *(void *)(v4 + 88);
          uint64_t v7 = *(void *)(v4 + 96);
          uint64_t v8 = v6 + *(unsigned int *)(v4 + 80);
          int v3 = 527;
          if (v7 < v6 || v8 <= v7) {
            goto LABEL_160;
          }
          unsigned int v5 = v8 - v7;
          if (v8 == v7) {
            goto LABEL_160;
          }
          size_t v10 = *(unsigned int *)(a1 + 488);
          if (v10)
          {
            *(_DWORD *)(a1 + 25std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v10;
            if (v10 > v5)
            {
              *(void *)(a1 + 272) = v7;
              int v11 = *(char **)(v4 + 72);
              if (v11 == *(char **)(v4 + 128))
              {
                if (v8 == v7) {
                  int v12 = 0;
                }
                else {
                  int v12 = &v11[(v7 - v6)];
                }
                memmove(v11, v12, (v8 - v7));
                size_t v13 = *(unsigned int *)(a1 + 488);
                uint64_t v4 = *(void *)(a1 + 8);
                if (*(_DWORD *)(v4 + 120) < v13)
                {
                  *(_DWORD *)(v4 + 120) = v13;
                  CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v4 + 128), v13);
                  uint64_t v4 = *(void *)(a1 + 8);
                }
                *(_DWORD *)(v4 + 11std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v5;
                *(void *)(v4 + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = *(void *)(v4 + 88) + *(unsigned int *)(v4 + 80);
              }
              else
              {
                if (*(_DWORD *)(v4 + 120) < v10)
                {
                  *(_DWORD *)(v4 + 120) = v10;
                  CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v4 + 128), v10);
                  uint64_t v4 = *(void *)(a1 + 8);
                }
                unsigned int v5 = 0;
                *(_DWORD *)(v4 + 11std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
              }
              goto LABEL_26;
            }
            goto LABEL_38;
          }
          goto LABEL_39;
        }
        unsigned int v96 = (unsigned int *)&v46[v57];
        int v97 = v96;
        uint64_t v60 = &v59[(v53 - v57)];
        unsigned int v98 = v60;
        uint64_t v99 = 0;
        if ((v59 & 3) != 0)
        {
          int v61 = 0;
          uint64_t v62 = &v58[v57];
          int v63 = -8;
          do
          {
            int v64 = v61 << 8;
            LODWORD(v99) = v64;
            HIDWORD(v99) = v63 + 16;
            if (v59 >= v60) {
              int v65 = 255;
            }
            else {
              int v65 = *v59;
            }
            int v61 = v65 | v64;
            LODWORD(v99) = v61;
            unsigned int v96 = (unsigned int *)++v59;
            v63 += 8;
          }
          while ((v62++ & 3) != 0);
          LODWORD(v99) = v61 << (24 - v63);
        }
        __src[0] = 0;
        int v95 = 0;
        int v67 = FLACAudioStream::ParseFLACFrameHeader(a1, (uint64_t)&v96, __src, v94, &v95);
        if (!v67)
        {
          if ((unint64_t)v55 >= v56)
          {
            uint64_t v69 = (v55 - v54) >> 2;
            unint64_t v70 = v69 + 1;
            if ((unint64_t)(v69 + 1) >> 62) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            if ((uint64_t)(v56 - (void)v54) >> 1 > v70) {
              unint64_t v70 = (uint64_t)(v56 - (void)v54) >> 1;
            }
            if (v56 - (unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v71 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v71 = v70;
            }
            if (v71) {
              unint64_t v71 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v71);
            }
            else {
              uint64_t v72 = 0;
            }
            uint64_t v73 = (char *)(v71 + 4 * v69);
            *(_DWORD *)uint64_t v73 = v57;
            unsigned int v68 = v73 + 4;
            while (v55 != v54)
            {
              int v74 = *((_DWORD *)v55 - 1);
              v55 -= 4;
              *((_DWORD *)v73 - 1) = v74;
              v73 -= 4;
            }
            unint64_t v56 = v71 + 4 * v72;
            if (v54) {
              operator delete(v54);
            }
            int v54 = v73;
            unint64_t v58 = v46 + 1;
          }
          else
          {
            *(_DWORD *)char v55 = v57;
            unsigned int v68 = v55 + 4;
          }
          unsigned int v75 = *(_DWORD *)(a1 + 492);
          if (!v75) {
            unsigned int v75 = __src[0];
          }
          v57 += v75;
          char v55 = v68;
          goto LABEL_125;
        }
        if (v67 == -11)
        {
          if (v54 == v55 || v55 - v54 == 4 && !*(_DWORD *)v54) {
            *(_DWORD *)(a1 + 488) = v95 + v53;
          }
          goto LABEL_135;
        }
      }
      ++v57;
LABEL_125:
      if (v57 + 1 >= v53) {
        goto LABEL_135;
      }
    }
  }
  if (v2 != -1)
  {
    if (!v2) {
      goto LABEL_9;
    }
LABEL_160:
    *(_DWORD *)(a1 + 23std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v3;
  }
  return 0;
}

void sub_190143C14(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t FLACAudioStream::FlushPacketBuffer(uint64_t this)
{
  UInt32 v1 = *(_DWORD *)(this + 504);
  if (v1)
  {
    uint64_t v2 = this;
    if (!*(_DWORD *)(this + 200))
    {
      *(_DWORD *)(this + 200) = 1;
      CADeprecated::CAAutoFree<AudioStreamPacketDescription>::reallocItems((void **)(this + 192), 1);
      UInt32 v1 = *(_DWORD *)(v2 + 504);
    }
    int v3 = *(AudioStreamPacketDescription **)(v2 + 192);
    v3->SInt64 mStartOffset = 0;
    v3->mVariableFramesInPacket = 0;
    v3->UInt32 mDataByteSize = v1;
    this = AudioFileStreamWrapper::CallPacketsProc(*(AudioFileStreamWrapper **)(v2 + 8), v1, 1u, *(const void **)(v2 + 288), v3, 1);
    ++*(void *)(v2 + 184);
    *(_DWORD *)(v2 + 504) = 0;
  }
  return this;
}

uint64_t FLACAudioStream::ParseHeader(FLACAudioStream *this, uint64_t a2)
{
  int v4 = *((_DWORD *)this + 59);
  if (v4 > 349)
  {
    if (v4 <= 383)
    {
      if (v4 <= 366)
      {
        switch(v4)
        {
          case 350:
            goto LABEL_397;
          case 357:
            int v36 = *((_DWORD *)this + 64);
            uint64_t v37 = (unsigned __int8 *)*((void *)this + 33);
            goto LABEL_134;
          case 362:
            int v11 = *((_DWORD *)this + 64);
            int v12 = (unsigned __int8 *)*((void *)this + 33);
            goto LABEL_137;
        }
      }
      else if (v4 > 375)
      {
        if (v4 == 376) {
          goto LABEL_442;
        }
        if (v4 == 380) {
          goto LABEL_460;
        }
      }
      else
      {
        if (v4 == 367) {
          goto LABEL_327;
        }
        if (v4 == 371)
        {
          int v7 = *((_DWORD *)this + 64);
          uint64_t v8 = (unsigned __int8 *)*((void *)this + 33);
          goto LABEL_343;
        }
      }
    }
    else if (v4 > 428)
    {
      if (v4 > 507)
      {
        if (v4 == 508) {
          goto LABEL_267;
        }
        if (v4 == 514)
        {
          uint64_t v21 = *((void *)this + 1);
          LODWORD(v22) = *(_DWORD *)(v21 + 116);
          goto LABEL_313;
        }
      }
      else
      {
        if (v4 == 429) {
          goto LABEL_535;
        }
        if (v4 == 433) {
          goto LABEL_178;
        }
      }
    }
    else if (v4 > 407)
    {
      if (v4 == 408) {
        goto LABEL_515;
      }
      if (v4 == 413)
      {
        int v15 = *((_DWORD *)this + 64);
        uint64_t v16 = (unsigned __int8 *)*((void *)this + 33);
        goto LABEL_494;
      }
    }
    else
    {
      if (v4 == 384)
      {
        int v23 = *((_DWORD *)this + 64);
        uint64_t v24 = (unsigned __int8 *)*((void *)this + 33);
        goto LABEL_476;
      }
      if (v4 == 401) {
        goto LABEL_502;
      }
    }
    goto LABEL_70;
  }
  if (v4 <= 280)
  {
    if (v4 <= 174)
    {
      if (v4 == -1) {
        return 0;
      }
      if (v4)
      {
        if (v4 != 165) {
          goto LABEL_70;
        }
        int v9 = *((_DWORD *)this + 64);
        size_t v10 = (unsigned __int8 *)*((void *)this + 33);
      }
      else
      {
        int v9 = 4;
        *((_DWORD *)this + 64) = 4;
        size_t v10 = (unsigned __int8 *)this + 332;
        *((void *)this + 33) = (char *)this + 332;
      }
      LODWORD(result.location) = v9;
      StreamBuffer::Copy((void *)(*((void *)this + 1) + 72), (unsigned int *)&result, v10);
      int location = result.location;
      int v31 = *((_DWORD *)this + 64);
      *((void *)this + 33) += LODWORD(result.location);
      int v32 = v31 - location;
      *((_DWORD *)this + 64) = v32;
      if (v32)
      {
        uint64_t v29 = 0;
        int v40 = 165;
        goto LABEL_177;
      }
      unsigned int v33 = *((_DWORD *)this + 83);
      *((_DWORD *)this + 83) = bswap32(v33);
      if (v33 == 1130450022)
      {
        *((void *)this + 37) += 4;
        uint64_t v34 = *((void *)this + 1);
        LODWORD(result.location) = 1;
        if (!*(unsigned char *)(v34 + 104))
        {
          *(unsigned char *)(v34 + 104) = 1;
          uint64_t v35 = *(void (**)(void, void, uint64_t, CFRange *))(v34 + 24);
          if (v35) {
            v35(*(void *)(v34 + 40), *(unsigned int *)(v34 + 8), 1717988724, &result);
          }
        }
        goto LABEL_174;
      }
LABEL_169:
      uint64_t v29 = 1685348671;
      *((unsigned char *)this + 177) = 1;
      goto LABEL_72;
    }
    if (v4 <= 263)
    {
      if (v4 == 175)
      {
        int v25 = *((_DWORD *)this + 64);
        uint64_t v26 = (unsigned __int8 *)*((void *)this + 33);
        goto LABEL_123;
      }
      if (v4 == 188)
      {
        int v5 = *((_DWORD *)this + 64);
        uint64_t v6 = (unsigned __int8 *)*((void *)this + 33);
        goto LABEL_142;
      }
      goto LABEL_70;
    }
    if (v4 == 264) {
      goto LABEL_349;
    }
    if (v4 != 273)
    {
LABEL_70:
      uint64_t v29 = 0;
LABEL_72:
      int v40 = -1;
      goto LABEL_177;
    }
    int v17 = *((_DWORD *)this + 64);
    unsigned int v18 = (unsigned __int8 *)*((void *)this + 33);
LABEL_110:
    LODWORD(result.location) = v17;
    StreamBuffer::Copy((void *)(*((void *)this + 1) + 72), (unsigned int *)&result, v18);
    int v71 = result.location;
    int v72 = *((_DWORD *)this + 64);
    *((void *)this + 33) += LODWORD(result.location);
    int v73 = v72 - v71;
    *((_DWORD *)this + 64) = v73;
    if (v73)
    {
      uint64_t v29 = 0;
      int v40 = 273;
      goto LABEL_177;
    }
    CFIndex v74 = *((unsigned int *)this + 129);
    int v75 = *((_DWORD *)this + 128) + 4;
    *((_DWORD *)this + 128) = v75;
    if (*((_DWORD *)this + 127) - v75 <= v74) {
      goto LABEL_376;
    }
    CFMutableDictionaryRef Mutable = CFDataCreateMutable(0, v74);
    *((void *)this + 65) = Mutable;
    CFIndex v77 = *((unsigned int *)this + 129);
    if (!Mutable)
    {
      while (1)
      {
        *((_DWORD *)this + 64) = v77;
        if (!v77) {
          goto LABEL_376;
        }
LABEL_365:
        uint64_t v247 = *((void *)this + 1);
        uint64_t v249 = *(void *)(v247 + 88);
        uint64_t v248 = *(void *)(v247 + 96);
        uint64_t v250 = v249 + *(unsigned int *)(v247 + 80);
        unsigned int v251 = v250 - v248;
        if (v248 < v249 || v250 <= v248 || v250 == v248)
        {
          uint64_t v29 = 0;
          int v40 = 281;
          goto LABEL_177;
        }
        uint64_t v254 = *((unsigned int *)this + 64);
        uint64_t v255 = v248 + v254;
        BOOL v134 = v254 >= v251;
        int v256 = v254 - v251;
        if (v134)
        {
          LODWORD(v77) = v256;
        }
        else
        {
          uint64_t v250 = v255;
          LODWORD(v77) = 0;
        }
        *(void *)(v247 + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v250;
      }
    }
    CFDataSetLength(Mutable, v77);
    MutableBytePtr = CFDataGetMutableBytePtr(*((CFMutableDataRef *)this + 65));
    *((void *)this + 6std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = MutableBytePtr;
    int v38 = *((_DWORD *)this + 129);
    *((_DWORD *)this + 64) = v38;
    if (!MutableBytePtr) {
      goto LABEL_380;
    }
    int v39 = MutableBytePtr;
    *((void *)this + 33) = MutableBytePtr;
  }
  else
  {
    if (v4 > 312)
    {
      if (v4 > 328)
      {
        if (v4 == 329) {
          goto LABEL_426;
        }
        if (v4 == 332)
        {
          int v19 = *((_DWORD *)this + 64);
          size_t v20 = (unsigned __int8 *)*((void *)this + 33);
          goto LABEL_84;
        }
      }
      else
      {
        if (v4 == 313)
        {
          int v27 = *((_DWORD *)this + 64);
          BOOL v28 = (unsigned __int8 *)*((void *)this + 33);
          goto LABEL_79;
        }
        if (v4 == 321) {
          goto LABEL_413;
        }
      }
      goto LABEL_70;
    }
    if (v4 <= 291)
    {
      if (v4 == 281) {
        goto LABEL_365;
      }
      if (v4 != 289) {
        goto LABEL_70;
      }
      do
      {
        uint64_t v260 = *((void *)this + 1);
        uint64_t v262 = *(void *)(v260 + 88);
        uint64_t v261 = *(void *)(v260 + 96);
        uint64_t v263 = v262 + *(unsigned int *)(v260 + 80);
        unsigned int v264 = v263 - v261;
        if (v261 < v262 || v263 <= v261 || v263 == v261)
        {
          uint64_t v29 = 0;
          int v40 = 289;
          goto LABEL_177;
        }
        uint64_t v267 = *((unsigned int *)this + 64);
        uint64_t v268 = v261 + v267;
        BOOL v269 = v267 >= v264;
        int v270 = v267 - v264;
        if (v269) {
          uint64_t v268 = v263;
        }
        if (v269) {
          int v38 = v270;
        }
        else {
          int v38 = 0;
        }
        *(void *)(v260 + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v268;
        *((_DWORD *)this + 64) = v38;
LABEL_380:
        ;
      }
      while (v38);
      goto LABEL_175;
    }
    if (v4 != 292)
    {
      if (v4 == 305)
      {
        int v13 = *((_DWORD *)this + 64);
        unsigned int v14 = (unsigned __int8 *)*((void *)this + 33);
LABEL_73:
        LODWORD(result.location) = v13;
        StreamBuffer::Copy((void *)(*((void *)this + 1) + 72), (unsigned int *)&result, v14);
        int v41 = result.location;
        int v42 = *((_DWORD *)this + 64);
        *((void *)this + 33) += LODWORD(result.location);
        int v43 = v42 - v41;
        *((_DWORD *)this + 64) = v43;
        if (v43)
        {
          uint64_t v29 = 0;
          int v40 = 305;
          goto LABEL_177;
        }
        unint64_t v44 = *((unsigned int *)this + 136);
        *((_DWORD *)this + 128) += 4;
        std::vector<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>::reserve((void *)this + 71, v44);
        unsigned int v45 = 0;
        for (*((_DWORD *)this + 137) = 0; ; *((_DWORD *)this + 137) = v45)
        {
          if (v45 >= *((_DWORD *)this + 136))
          {
            uint64_t v67 = *((void *)this + 1);
            LODWORD(result.location) = 1;
            unsigned int v68 = *(void (**)(void, void, uint64_t, CFRange *))(v67 + 24);
            if (v68)
            {
              v68(*(void *)(v67 + 40), *(unsigned int *)(v67 + 8), 1986225779, &result);
              uint64_t v67 = *((void *)this + 1);
              uint64_t v69 = *(void (**)(void, void, uint64_t, CFRange *))(v67 + 24);
              LODWORD(result.location) = 1;
              if (v69)
              {
                v69(*(void *)(v67 + 40), *(unsigned int *)(v67 + 8), 1768842863, &result);
                uint64_t v67 = *((void *)this + 1);
              }
            }
            else
            {
              LODWORD(result.location) = 1;
            }
            LODWORD(result.location) = 1;
            if (!*(unsigned char *)(v67 + 110))
            {
              *(unsigned char *)(v67 + 110) = 1;
              unint64_t v70 = *(void (**)(void, void, uint64_t, CFRange *))(v67 + 24);
              if (v70) {
                v70(*(void *)(v67 + 40), *(unsigned int *)(v67 + 8), 1819243876, &result);
              }
            }
            goto LABEL_376;
          }
          if ((*((_DWORD *)this + 127) - *((_DWORD *)this + 128)) >= 5)
          {
            int v27 = 4;
            *((_DWORD *)this + 64) = 4;
            BOOL v28 = (unsigned __int8 *)this + 516;
            *((void *)this + 33) = (char *)this + 516;
LABEL_79:
            LODWORD(result.location) = v27;
            StreamBuffer::Copy((void *)(*((void *)this + 1) + 72), (unsigned int *)&result, v28);
            int v46 = result.location;
            int v47 = *((_DWORD *)this + 64);
            *((void *)this + 33) += LODWORD(result.location);
            int v48 = v47 - v46;
            *((_DWORD *)this + 64) = v48;
            if (v48)
            {
              uint64_t v29 = 0;
              int v40 = 313;
              goto LABEL_177;
            }
            CFIndex v49 = *((unsigned int *)this + 129);
            int v50 = *((_DWORD *)this + 128) + 4;
            *((_DWORD *)this + 128) = v50;
            if (*((_DWORD *)this + 127) - v50 >= v49)
            {
              int v51 = CFDataCreateMutable(0, v49);
              *((void *)this + 65) = v51;
              CFIndex v52 = *((unsigned int *)this + 129);
              if (v51)
              {
                CFDataSetLength(v51, v52);
                size_t v53 = CFDataGetMutableBytePtr(*((CFMutableDataRef *)this + 65));
                *((void *)this + 6std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v53;
                int v19 = *((_DWORD *)this + 129);
                *((_DWORD *)this + 64) = v19;
                if (v53)
                {
                  size_t v20 = v53;
                  *((void *)this + 33) = v53;
LABEL_84:
                  LODWORD(result.location) = v19;
                  StreamBuffer::Copy((void *)(*((void *)this + 1) + 72), (unsigned int *)&result, v20);
                  int v54 = result.location;
                  int v55 = *((_DWORD *)this + 64);
                  *((void *)this + 33) += LODWORD(result.location);
                  int v56 = v55 - v54;
                  *((_DWORD *)this + 64) = v56;
                  if (v56)
                  {
                    uint64_t v29 = 0;
                    int v40 = 332;
                    goto LABEL_177;
                  }
                  CFStringRef v57 = CFStringCreateFromExternalRepresentation(0, *((CFDataRef *)this + 65), 0x8000100u);
                  if (v57)
                  {
                    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&theString, v57);
                    CFStringRef v58 = theString;
                    if (theString)
                    {
                      if (sCreateEqualCharSetOnce != -1) {
                        dispatch_once_f(&sCreateEqualCharSetOnce, 0, (dispatch_function_t)CreateEqualCharSet);
                      }
                      CFCharacterSetRef v59 = (const __CFCharacterSet *)sEqualCharSet;
                      v395.length = CFStringGetLength(theString);
                      v395.int location = 0;
                      if (CFStringFindCharacterFromSet(v58, v59, v395, 0, &result))
                      {
                        CFIndex v60 = result.location;
                        if (result.location >= 1 && v60 < CFStringGetLength(theString) - 1)
                        {
                          v396.length = result.location;
                          v396.int location = 0;
                          CFStringRef v61 = CFStringCreateWithSubstring(0, theString, v396);
                          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v393, v61);
                          CFStringRef v62 = theString;
                          CFIndex v63 = result.location;
                          CFIndex Length = CFStringGetLength(theString);
                          v397.int location = v63 + 1;
                          v397.length = Length - (result.location + result.length);
                          CFStringRef v65 = CFStringCreateWithSubstring(0, v62, v397);
                          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v65);
                          CFTypeRef v66 = v393;
                          if (!v393) {
                            goto LABEL_95;
                          }
                          if (!cf) {
                            goto LABEL_98;
                          }
                          VorbisComment::AddUserComment((void *)this + 70, v393, &cf);
LABEL_95:
                          if (cf) {
                            CFRelease(cf);
                          }
                          CFTypeRef v66 = v393;
                          if (v393) {
LABEL_98:
                          }
                            CFRelease(v66);
                        }
                      }
                      if (theString) {
                        CFRelease(theString);
                      }
                    }
                  }
                }
                else
                {
                  while (v19)
                  {
LABEL_426:
                    uint64_t v292 = *((void *)this + 1);
                    uint64_t v294 = *(void *)(v292 + 88);
                    uint64_t v293 = *(void *)(v292 + 96);
                    uint64_t v295 = v294 + *(unsigned int *)(v292 + 80);
                    unsigned int v296 = v295 - v293;
                    if (v293 < v294 || v295 <= v293 || v295 == v293)
                    {
                      uint64_t v29 = 0;
                      int v40 = 329;
                      goto LABEL_177;
                    }
                    uint64_t v299 = *((unsigned int *)this + 64);
                    uint64_t v300 = v293 + v299;
                    BOOL v301 = v299 >= v296;
                    int v302 = v299 - v296;
                    if (v301) {
                      uint64_t v300 = v295;
                    }
                    if (v301) {
                      int v19 = v302;
                    }
                    else {
                      int v19 = 0;
                    }
                    *(void *)(v292 + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v300;
                    *((_DWORD *)this + 64) = v19;
                  }
                }
                *((_DWORD *)this + 128) += *((_DWORD *)this + 129);
                CFRelease(*((CFTypeRef *)this + 65));
                *((void *)this + 65) = 0;
                goto LABEL_122;
              }
              while (1)
              {
                *((_DWORD *)this + 64) = v52;
                if (!v52) {
                  break;
                }
LABEL_413:
                uint64_t v282 = *((void *)this + 1);
                uint64_t v284 = *(void *)(v282 + 88);
                uint64_t v283 = *(void *)(v282 + 96);
                uint64_t v285 = v284 + *(unsigned int *)(v282 + 80);
                unsigned int v286 = v285 - v283;
                if (v283 < v284 || v285 <= v283 || v285 == v283)
                {
                  uint64_t v29 = 0;
                  int v40 = 321;
                  goto LABEL_177;
                }
                uint64_t v289 = *((unsigned int *)this + 64);
                uint64_t v290 = v283 + v289;
                BOOL v134 = v289 >= v286;
                int v291 = v289 - v286;
                if (v134)
                {
                  LODWORD(v52) = v291;
                }
                else
                {
                  uint64_t v285 = v290;
                  LODWORD(v52) = 0;
                }
                *(void *)(v282 + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v285;
              }
            }
          }
LABEL_122:
          unsigned int v45 = *((_DWORD *)this + 137) + 1;
        }
      }
      goto LABEL_70;
    }
    int v38 = *((_DWORD *)this + 64);
    int v39 = (unsigned __int8 *)*((void *)this + 33);
  }
  LODWORD(result.location) = v38;
  StreamBuffer::Copy((void *)(*((void *)this + 1) + 72), (unsigned int *)&result, v39);
  int v79 = result.location;
  int v80 = *((_DWORD *)this + 64);
  *((void *)this + 33) += LODWORD(result.location);
  int v81 = v80 - v79;
  *((_DWORD *)this + 64) = v81;
  if (v81)
  {
    uint64_t v29 = 0;
    int v40 = 292;
    goto LABEL_177;
  }
  CFStringRef v82 = CFStringCreateFromExternalRepresentation(0, *((CFDataRef *)this + 65), 0x8000100u);
  *((void *)this + 67) = v82;
  if (v82)
  {
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v388, v82);
    VorbisComment::SetVendorString((const void **)this + 70, v388);
    if (v388) {
      CFRelease(v388);
    }
  }
LABEL_175:
  *((_DWORD *)this + 128) += *((_DWORD *)this + 129);
  CFRelease(*((CFTypeRef *)this + 65));
  *((void *)this + 65) = 0;
  if ((*((_DWORD *)this + 127) - *((_DWORD *)this + 128)) >= 5)
  {
    int v13 = 4;
    *((_DWORD *)this + 64) = 4;
    unsigned int v14 = (unsigned __int8 *)this + 544;
    *((void *)this + 33) = (char *)this + 544;
    goto LABEL_73;
  }
LABEL_376:
  unsigned int v257 = *((_DWORD *)this + 127);
  unsigned int v258 = *((_DWORD *)this + 128);
  BOOL v134 = v257 >= v258;
  unsigned int v259 = v257 - v258;
  if (v259 != 0 && v134)
  {
    while (1)
    {
      *((_DWORD *)this + 64) = v259;
      if (!v259) {
        goto LABEL_195;
      }
LABEL_397:
      uint64_t v271 = *((void *)this + 1);
      uint64_t v273 = *(void *)(v271 + 88);
      uint64_t v272 = *(void *)(v271 + 96);
      uint64_t v274 = v273 + *(unsigned int *)(v271 + 80);
      unsigned int v275 = v274 - v272;
      if (v272 < v273 || v274 <= v272 || v274 == v272)
      {
        uint64_t v29 = 0;
        int v40 = 350;
        goto LABEL_177;
      }
      uint64_t v278 = *((unsigned int *)this + 64);
      uint64_t v279 = v272 + v278;
      BOOL v280 = v278 >= v275;
      unsigned int v281 = v278 - v275;
      if (v280) {
        uint64_t v279 = v274;
      }
      if (v280) {
        unsigned int v259 = v281;
      }
      else {
        unsigned int v259 = 0;
      }
      *(void *)(v271 + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v279;
    }
  }
  while (1)
  {
    while (1)
    {
      while (1)
      {
LABEL_195:
        uint64_t v136 = *((void *)this + 37) + *((unsigned int *)this + 127);
        *((void *)this + 37) = v136;
        if ((*((_DWORD *)this + 84) & 0x80000000) != 0)
        {
          *((void *)this + 13) = v136;
          uint64_t v137 = *((void *)this + 1);
          LODWORD(result.location) = 1;
          unsigned int v138 = *(void (**)(void, void, uint64_t, CFRange *))(v137 + 24);
          if (v138) {
            v138(*(void *)(v137 + 40), *(unsigned int *)(v137 + 8), 1685022310, &result);
          }
          if (VorbisComment::GetWAVEChannelMask(*((VorbisComment **)this + 71), *((VorbisComment **)this + 72), (_DWORD *)this + 97))
          {
LABEL_202:
            uint64_t v140 = *((void *)this + 1);
            LODWORD(result.location) = 1;
            if (!*(unsigned char *)(v140 + 109))
            {
              *(unsigned char *)(v140 + 109) = 1;
              int v141 = *(void (**)(void, void, uint64_t, CFRange *))(v140 + 24);
              if (v141) {
                v141(*(void *)(v140 + 40), *(unsigned int *)(v140 + 8), 1668112752, &result);
              }
            }
            if (!*((void *)this + 70) && *((void *)this + 72) == *((void *)this + 71))
            {
              uint64_t v162 = *((void *)this + 1);
              uint64_t v163 = *(void *)(v162 + 48);
              uint64_t v164 = *(void *)(v162 + 56);
              if (v164 != v163)
              {
                unint64_t v165 = 0;
                unsigned int v166 = 1;
                do
                {
                  int v167 = *(_DWORD *)(v163 + 4 * v165);
                  unint64_t v165 = v166++;
                }
                while (v167 != 1986225779 && (v164 - v163) >> 2 > v165);
                if (v167 == 1986225779)
                {
                  LODWORD(result.location) = 1;
                  __int16 v169 = *(void (**)(void, void, uint64_t, CFRange *))(v162 + 24);
                  if (v169)
                  {
                    v169(*(void *)(v162 + 40), *(unsigned int *)(v162 + 8), 1986225779, &result);
                    uint64_t v162 = *((void *)this + 1);
                    uint64_t v163 = *(void *)(v162 + 48);
                    uint64_t v164 = *(void *)(v162 + 56);
                  }
                }
                if (v164 != v163)
                {
                  unint64_t v170 = 0;
                  unsigned int v171 = 1;
                  do
                  {
                    int v172 = *(_DWORD *)(v163 + 4 * v170);
                    unint64_t v170 = v171++;
                  }
                  while (v172 != 1768842863 && (v164 - v163) >> 2 > v170);
                  if (v172 == 1768842863)
                  {
                    LODWORD(result.location) = 1;
                    long long v174 = *(void (**)(void, void, uint64_t, CFRange *))(v162 + 24);
                    if (v174)
                    {
                      v174(*(void *)(v162 + 40), *(unsigned int *)(v162 + 8), 1768842863, &result);
                      uint64_t v162 = *((void *)this + 1);
                      uint64_t v163 = *(void *)(v162 + 48);
                      uint64_t v164 = *(void *)(v162 + 56);
                    }
                  }
                  if (v164 != v163)
                  {
                    unint64_t v175 = 0;
                    unint64_t v176 = (v164 - v163) >> 2;
                    unsigned int v177 = 1;
                    do
                    {
                      int v178 = *(_DWORD *)(v163 + 4 * v175);
                      unint64_t v175 = v177++;
                    }
                    while (v178 != 1819243876 && v176 > v175);
                    if (v178 == 1819243876)
                    {
                      LODWORD(result.location) = 1;
                      if (!*(unsigned char *)(v162 + 110))
                      {
                        *(unsigned char *)(v162 + 110) = 1;
                        int v180 = *(void (**)(void, void, uint64_t, CFRange *))(v162 + 24);
                        if (v180) {
                          v180(*(void *)(v162 + 40), *(unsigned int *)(v162 + 8), 1819243876, &result);
                        }
                      }
                    }
                  }
                }
              }
            }
            if (!*((void *)this + 74))
            {
              uint64_t v151 = *((void *)this + 1);
              uint64_t v152 = *(void *)(v151 + 48);
              uint64_t v153 = *(void *)(v151 + 56);
              uint64_t v154 = v153 - v152;
              if (v153 != v152)
              {
                unint64_t v155 = 0;
                unint64_t v156 = v154 >> 2;
                unsigned int v157 = 1;
                do
                {
                  int v158 = *(_DWORD *)(v152 + 4 * v155);
                  unint64_t v155 = v157++;
                }
                while (v158 != 1633776244 && v156 > v155);
                if (v158 == 1633776244)
                {
                  LODWORD(result.location) = 1;
                  long long v160 = *(void (**)(void, void, uint64_t, CFRange *))(v151 + 24);
                  if (v160) {
                    v160(*(void *)(v151 + 40), *(unsigned int *)(v151 + 8), 1633776244, &result);
                  }
                }
              }
            }
            int v142 = *((_DWORD *)this + 124);
            if (!v142)
            {
              int v143 = *((_DWORD *)this + 93);
              int v144 = *((_DWORD *)this + 82);
              if (v144 == 20) {
                int v145 = ((double)((v144 >> 3) * v143 * *((_DWORD *)this + 91)) * 1.5);
              }
              else {
                int v145 = (v144 >> 3) * v143 * *((_DWORD *)this + 91);
              }
              if (!v145) {
                int v145 = 0x100000;
              }
              if (v143) {
                int v146 = 8 * v143 + 18;
              }
              else {
                int v146 = 82;
              }
              int v142 = v145 + v146;
              *((_DWORD *)this + 124) = v142;
            }
            size_t v147 = (v142 + 1);
            if (*((_DWORD *)this + 71) < v147)
            {
              *((_DWORD *)this + 71) = v147;
              CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)this + 36, v147, 0);
              int v142 = *((_DWORD *)this + 124);
            }
            *((_DWORD *)this + 28) = v142;
            uint64_t v148 = *((void *)this + 1);
            LODWORD(result.location) = 1;
            long long v149 = *(void (**)(void, void, uint64_t, CFRange *))(v148 + 24);
            if (v149)
            {
              v149(*(void *)(v148 + 40), *(unsigned int *)(v148 + 8), 1886616165, &result);
              uint64_t v148 = *((void *)this + 1);
            }
            LODWORD(result.location) = 1;
            if (!*(_DWORD *)(v148 + 112))
            {
              *(_DWORD *)(v148 + 112) = 1;
              uint64_t v150 = *(void (**)(void, void, uint64_t, CFRange *))(v148 + 24);
              if (v150) {
                v150(*(void *)(v148 + 40), *(unsigned int *)(v148 + 8), 1919247481, &result);
              }
            }
            while (1)
            {
LABEL_267:
              uint64_t v181 = *((void *)this + 1);
              uint64_t v182 = *(unsigned int *)(v181 + 80);
              uint64_t v184 = *(void *)(v181 + 88);
              uint64_t v183 = *(void *)(v181 + 96);
              uint64_t v185 = v184 + v182;
              if (v183 < v184 || v185 <= v183 || v185 - v183 == 0)
              {
                uint64_t v29 = 0;
                int v40 = 508;
                goto LABEL_177;
              }
              if (FLACAudioStream::Resync(this)) {
                break;
              }
              size_t v188 = *((unsigned int *)this + 122);
              if (v188)
              {
                *((_DWORD *)this + 64) = v188;
                uint64_t v21 = *((void *)this + 1);
                uint64_t v189 = *(void *)(v21 + 88);
                uint64_t v190 = *(void *)(v21 + 96);
                uint64_t v191 = v189 + *(unsigned int *)(v21 + 80);
                BOOL v192 = v190 < v189 || v191 <= v190;
                BOOL v193 = v192;
                unsigned int v194 = v191 - v190;
                size_t v22 = v193 ? 0 : v194;
                if (v22 < v188)
                {
                  *((void *)this + 34) = v190;
                  v195 = *(char **)(v21 + 72);
                  if (v195 == *(char **)(v21 + 128))
                  {
                    if (v194) {
                      int v205 = v193;
                    }
                    else {
                      int v205 = 1;
                    }
                    if (v205) {
                      v206 = 0;
                    }
                    else {
                      v206 = &v195[(v190 - v189)];
                    }
                    memmove(v195, v206, v22);
                    size_t v207 = *((unsigned int *)this + 122);
                    uint64_t v21 = *((void *)this + 1);
                    if (*(_DWORD *)(v21 + 120) < v207)
                    {
                      *(_DWORD *)(v21 + 120) = v207;
                      CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v21 + 128), v207);
                      uint64_t v21 = *((void *)this + 1);
                    }
                    *(_DWORD *)(v21 + 11std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v22;
                    *(void *)(v21 + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = *(void *)(v21 + 88) + *(unsigned int *)(v21 + 80);
                  }
                  else
                  {
                    if (*(_DWORD *)(v21 + 120) < v188)
                    {
                      *(_DWORD *)(v21 + 120) = v188;
                      CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v21 + 128), v188);
                      uint64_t v21 = *((void *)this + 1);
                    }
                    LODWORD(v22) = 0;
                    *(_DWORD *)(v21 + 11std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
                  }
LABEL_313:
                  unsigned int v208 = *((_DWORD *)this + 64) - v22;
                  uint64_t v209 = *(void *)(v21 + 88);
                  uint64_t v210 = *(void *)(v21 + 96);
                  uint64_t v211 = v209 + *(unsigned int *)(v21 + 80);
                  if (v211 <= v210 || v210 < v209) {
                    unsigned int v213 = 0;
                  }
                  else {
                    unsigned int v213 = v211 - v210;
                  }
                  if (v208 <= v213) {
                    unsigned int v208 = v213;
                  }
                  LODWORD(result.location) = v208;
                  size_t v214 = v208 + v22;
                  if (*(_DWORD *)(v21 + 120) < v214)
                  {
                    *(_DWORD *)(v21 + 120) = v214;
                    CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v21 + 128), v214);
                    uint64_t v21 = *((void *)this + 1);
                  }
                  StreamBuffer::Copy((void *)(v21 + 72), (unsigned int *)&result, (unsigned __int8 *)(*(void *)(v21 + 128) + *(unsigned int *)(v21 + 116)));
                  uint64_t v215 = *((void *)this + 1);
                  unsigned int v216 = *(_DWORD *)(v215 + 116) + LODWORD(result.location);
                  *(_DWORD *)(v215 + 11std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v216;
                  if (v216 < *((_DWORD *)this + 64))
                  {
                    uint64_t v29 = 0;
                    int v40 = 514;
                    goto LABEL_177;
                  }
                  uint64_t v217 = *((void *)this + 34);
                  uint64_t v218 = *(void *)(v215 + 128);
                  *(void *)(v215 + 88) = v217;
                  *(void *)(v215 + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v217;
                  *(void *)(v215 + 72) = v218;
                  *(_DWORD *)(v215 + 80) = v216;
                }
              }
            }
            uint64_t v196 = 0;
            *(void *)a2 = this;
            *(void *)(a2 + 8) = AudioFileStreamObject::GeneratePackets;
            *(void *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
            uint64_t v197 = *((void *)this + 1);
            uint64_t v198 = *(void *)(v197 + 88);
            uint64_t v199 = *(void *)(v197 + 96);
            uint64_t v200 = v198 + *(unsigned int *)(v197 + 80);
            BOOL v201 = v199 < v198 || v200 <= v199;
            int v202 = v201;
            int v203 = v200 - v199;
            if (!v201 && v203) {
              uint64_t v196 = *(void *)(v197 + 72) + (v199 - v198);
            }
            uint64_t v29 = 0;
            *(void *)(a2 + 32) = v196;
            if (v202) {
              int v204 = 0;
            }
            else {
              int v204 = v203;
            }
            *(_DWORD *)(a2 + 24) = v204;
            return v29;
          }
          *((_DWORD *)this + 98) = *((_DWORD *)this + 93);
          unint64_t v139 = (_DWORD *)((char *)this + 144);
          if (AudioFormatGetPropertyInfo(0x636C636Du, 8u, (char *)this + 388, (UInt32 *)this + 36))
          {
            *unint64_t v139 = 0;
LABEL_201:
            CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)this + 17, 0x20uLL, 0);
            bzero(*((void **)this + 17), 0x20uLL);
            **((_DWORD **)this + 17) = kFLACChannelConfigToLayoutTag[*((_DWORD *)this + 93) - 1];
            *((_DWORD *)this + 3std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 32;
            goto LABEL_202;
          }
          double v161 = (void **)((char *)this + 136);
          CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)this + 17, *((unsigned int *)this + 36), 0);
          bzero(*((void **)this + 17), *((unsigned int *)this + 36));
          if (AudioFormatGetProperty(0x636C636Du, 8u, (char *)this + 388, (UInt32 *)this + 36, *((void **)this + 17)))
          {
            *unint64_t v139 = 0;
            if (!*v161) {
              goto LABEL_201;
            }
            free(*v161);
            *double v161 = 0;
          }
          if (*v139) {
            goto LABEL_202;
          }
          goto LABEL_201;
        }
LABEL_174:
        int v25 = 4;
        *((_DWORD *)this + 64) = 4;
        uint64_t v26 = (unsigned __int8 *)this + 336;
        *((void *)this + 33) = (char *)this + 336;
LABEL_123:
        LODWORD(result.location) = v25;
        StreamBuffer::Copy((void *)(*((void *)this + 1) + 72), (unsigned int *)&result, v26);
        int v83 = result.location;
        int v84 = *((_DWORD *)this + 64);
        *((void *)this + 33) += LODWORD(result.location);
        int v85 = v84 - v83;
        *((_DWORD *)this + 64) = v85;
        if (v85)
        {
          uint64_t v29 = 0;
          int v40 = 175;
          goto LABEL_177;
        }
        unsigned int v86 = bswap32(*((_DWORD *)this + 84));
        *((_DWORD *)this + 84) = v86;
        unsigned int v87 = v86 & 0xFFFFFF;
        *((_DWORD *)this + 127) = v86 & 0xFFFFFF;
        *((void *)this + 37) += 4;
        int v88 = HIBYTE(v86) & 0x7F;
        if (v88 > 5) {
          break;
        }
        if (v88)
        {
          if (v88 != 4) {
            goto LABEL_192;
          }
          *((_DWORD *)this + 128) = 0;
          if (!*((void *)this + 70) && v87 >= 5 && *((void *)this + 72) == *((void *)this + 71))
          {
            int v17 = 4;
            *((_DWORD *)this + 64) = 4;
            unsigned int v18 = (unsigned __int8 *)this + 516;
            *((void *)this + 33) = (char *)this + 516;
            goto LABEL_110;
          }
          goto LABEL_376;
        }
        if (v87 <= 0x21) {
          goto LABEL_169;
        }
        bzero((char *)this + 344, 0x28uLL);
        *((_DWORD *)this + 88) = 1718378851;
        int v5 = 34;
        *((_DWORD *)this + 64) = 34;
        uint64_t v6 = (unsigned __int8 *)this + 396;
        *((void *)this + 33) = (char *)this + 396;
LABEL_142:
        LODWORD(result.location) = v5;
        StreamBuffer::Copy((void *)(*((void *)this + 1) + 72), (unsigned int *)&result, v6);
        int v98 = result.location;
        int v99 = *((_DWORD *)this + 64);
        *((void *)this + 33) += LODWORD(result.location);
        int v100 = v99 - v98;
        *((_DWORD *)this + 64) = v100;
        if (v100)
        {
          uint64_t v29 = 0;
          int v40 = 188;
          goto LABEL_177;
        }
        result.int location = (CFIndex)this + 396;
        result.length = (CFIndex)this + 396;
        v390 = (char *)this + 430;
        uint64_t v391 = 0;
        if ((((unint64_t)this + 396) & 3) != 0)
        {
          int v101 = 0;
          int v102 = (char *)this + 397;
          unsigned int v103 = (unsigned __int8 *)this + 396;
          do
          {
            if (v103 >= (unsigned __int8 *)this + 430) {
              int v104 = 255;
            }
            else {
              int v104 = *v103;
            }
            int v101 = v104 | (v101 << 8);
            ++v103;
            BOOL v131 = (v102++ & 3) == 0;
          }
          while (!v131);
          result.int location = (CFIndex)this + ((this ^ 3) & 3) + 397;
          LODWORD(v391) = v101 << ((8 * ((this ^ 3) & 3)) ^ 0x18);
          HIDWORD(v391) = 8 * ((this ^ 3) & 3) + 8;
        }
        FLACUnpackStreamInfo((uint64_t)&result, (uint64_t)this + 432);
        int v105 = *((_DWORD *)this + 108);
        if (v105 != *((_DWORD *)this + 109)) {
          int v105 = 0;
        }
        *((_DWORD *)this + 91) = v105;
        unint64_t v106 = *((void *)this + 55);
        *(void *)((char *)this + 492) = v106;
        LODWORD(v10std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = *((_DWORD *)this + 112);
        *((double *)this + 43) = (double)v106;
        int v107 = *((_DWORD *)this + 113);
        *((_DWORD *)this + 93) = v107;
        int v108 = *((_DWORD *)this + 114);
        *((_DWORD *)this + 82) = v108;
        *((_DWORD *)this + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = kFLACChannelConfigToLayoutTag[v107 - 1];
        HIDWORD(v110) = v108;
        LODWORD(v110) = v108 - 16;
        unsigned int v109 = v110 >> 2;
        if (v109 >= 5 || ((0x17u >> v109) & 1) == 0) {
          goto LABEL_169;
        }
        *((_DWORD *)this + 89) = dword_1901DC360[v109];
        (*(void (**)(FLACAudioStream *, char *))(*(void *)this + 56))(this, (char *)this + 344);
        uint64_t v111 = *((void *)this + 1);
        LODWORD(result.location) = 1;
        if (!*(unsigned char *)(v111 + 105))
        {
          *(unsigned char *)(v111 + 105) = 1;
          unsigned int v112 = *(void (**)(void, void, uint64_t, CFRange *))(v111 + 24);
          if (v112) {
            v112(*(void *)(v111 + 40), *(unsigned int *)(v111 + 8), 1684434292, &result);
          }
        }
        uint64_t v113 = *((void *)this + 58);
        *((void *)this + 20) = v113;
        uint64_t v114 = *((unsigned int *)this + 91);
        if (v114)
        {
          int v115 = v113 <= v114 * (v113 / v114)
               ? v113 / v114
               : (v113 / v114) + 1;
          *((_DWORD *)this + 43) = v115 * v114 - v113;
          (*(void (**)(FLACAudioStream *))(*(void *)this + 80))(this);
          uint64_t v116 = *((void *)this + 1);
          LODWORD(result.location) = 1;
          unint64_t v117 = *(void (**)(void, void, uint64_t, CFRange *))(v116 + 24);
          if (v117) {
            v117(*(void *)(v116 + 40), *(unsigned int *)(v116 + 8), 1885564532, &result);
          }
        }
        CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)this + 15, 0x32uLL, 0);
        uint64_t v118 = *((void *)this + 15);
        *(_OWORD *)uint64_t v118 = xmmword_1901C6170;
        long long v120 = *(_OWORD *)((char *)this + 396);
        long long v119 = *(_OWORD *)((char *)this + 412);
        *(_WORD *)(v118 + 48) = *((_WORD *)this + 214);
        *(_OWORD *)(v118 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v120;
        *(_OWORD *)(v118 + 32) = v119;
        *((_DWORD *)this + 32) = 50;
        uint64_t v121 = *((void *)this + 1);
        LODWORD(result.location) = 1;
        *(unsigned char *)(v121 + 108) = 1;
        double v122 = *(void (**)(void, void, uint64_t, CFRange *))(v121 + 24);
        if (v122) {
          v122(*(void *)(v121 + 40), *(unsigned int *)(v121 + 8), 1835493731, &result);
        }
        unsigned int v123 = *((_DWORD *)this + 127);
        if (v123 >= 0x23)
        {
          unsigned int v124 = v123 - 34;
          while (1)
          {
            *((_DWORD *)this + 64) = v124;
            if (!v124) {
              break;
            }
LABEL_349:
            uint64_t v236 = *((void *)this + 1);
            uint64_t v238 = *(void *)(v236 + 88);
            uint64_t v237 = *(void *)(v236 + 96);
            uint64_t v239 = v238 + *(unsigned int *)(v236 + 80);
            unsigned int v240 = v239 - v237;
            if (v237 < v238 || v239 <= v237 || v239 == v237)
            {
              uint64_t v29 = 0;
              int v40 = 264;
              goto LABEL_177;
            }
            uint64_t v243 = *((unsigned int *)this + 64);
            uint64_t v244 = v237 + v243;
            BOOL v245 = v243 >= v240;
            unsigned int v246 = v243 - v240;
            if (v245) {
              uint64_t v244 = v239;
            }
            if (v245) {
              unsigned int v124 = v246;
            }
            else {
              unsigned int v124 = 0;
            }
            *(void *)(v236 + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v244;
          }
        }
      }
      if (v88 == 6) {
        break;
      }
      if (v88 == 127) {
        goto LABEL_169;
      }
LABEL_192:
      while (1)
      {
        *((_DWORD *)this + 64) = v87;
        if (!v87) {
          break;
        }
LABEL_178:
        uint64_t v125 = *((void *)this + 1);
        uint64_t v127 = *(void *)(v125 + 88);
        uint64_t v126 = *(void *)(v125 + 96);
        uint64_t v128 = v127 + *(unsigned int *)(v125 + 80);
        unsigned int v129 = v128 - v126;
        BOOL v131 = v126 < v127 || v128 <= v126 || v128 == v126;
        if (v131)
        {
          uint64_t v29 = 0;
          int v40 = 433;
          goto LABEL_177;
        }
        uint64_t v132 = *((unsigned int *)this + 64);
        uint64_t v133 = v126 + v132;
        BOOL v134 = v132 >= v129;
        unsigned int v135 = v132 - v129;
        if (v134) {
          uint64_t v133 = v128;
        }
        if (v134) {
          unsigned int v87 = v135;
        }
        else {
          unsigned int v87 = 0;
        }
        *(void *)(v125 + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v133;
      }
    }
    *((_DWORD *)this + 128) = 0;
    if (v87 >= 5)
    {
      int v36 = 4;
      *((_DWORD *)this + 64) = 4;
      uint64_t v37 = (unsigned __int8 *)this + 552;
      *((void *)this + 33) = (char *)this + 552;
LABEL_134:
      LODWORD(result.location) = v36;
      StreamBuffer::Copy((void *)(*((void *)this + 1) + 72), (unsigned int *)&result, v37);
      int v89 = result.location;
      int v90 = *((_DWORD *)this + 64);
      *((void *)this + 33) += LODWORD(result.location);
      int v91 = v90 - v89;
      *((_DWORD *)this + 64) = v91;
      if (v91)
      {
        uint64_t v29 = 0;
        int v40 = 357;
        goto LABEL_177;
      }
      *((_DWORD *)this + 138) = bswap32(*((_DWORD *)this + 138));
      int v92 = *((_DWORD *)this + 128) + 4;
      *((_DWORD *)this + 128) = v92;
      if ((*((_DWORD *)this + 127) - v92) >= 5)
      {
        int v11 = 4;
        *((_DWORD *)this + 64) = 4;
        int v12 = (unsigned __int8 *)this + 516;
        *((void *)this + 33) = (char *)this + 516;
LABEL_137:
        LODWORD(result.location) = v11;
        StreamBuffer::Copy((void *)(*((void *)this + 1) + 72), (unsigned int *)&result, v12);
        int v93 = result.location;
        int v94 = *((_DWORD *)this + 64);
        *((void *)this + 33) += LODWORD(result.location);
        int v95 = v94 - v93;
        *((_DWORD *)this + 64) = v95;
        if (v95)
        {
          uint64_t v29 = 0;
          int v40 = 362;
          goto LABEL_177;
        }
        unsigned int v96 = bswap32(*((_DWORD *)this + 129));
        *((_DWORD *)this + 129) = v96;
        int v97 = *((_DWORD *)this + 128) + 4;
        *((_DWORD *)this + 128) = v97;
        if (*((_DWORD *)this + 127) - v97 > v96)
        {
          while (1)
          {
            *((_DWORD *)this + 64) = v96;
            if (!v96) {
              break;
            }
LABEL_327:
            uint64_t v219 = *((void *)this + 1);
            uint64_t v221 = *(void *)(v219 + 88);
            uint64_t v220 = *(void *)(v219 + 96);
            uint64_t v222 = v221 + *(unsigned int *)(v219 + 80);
            unsigned int v223 = v222 - v220;
            if (v220 < v221 || v222 <= v220 || v222 == v220)
            {
              uint64_t v29 = 0;
              int v40 = 367;
              goto LABEL_177;
            }
            uint64_t v226 = *((unsigned int *)this + 64);
            uint64_t v227 = v220 + v226;
            BOOL v228 = v226 >= v223;
            unsigned int v229 = v226 - v223;
            if (v228) {
              uint64_t v227 = v222;
            }
            if (v228) {
              unsigned int v96 = v229;
            }
            else {
              unsigned int v96 = 0;
            }
            *(void *)(v219 + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v227;
          }
          int v230 = *((_DWORD *)this + 128) + *((_DWORD *)this + 129);
          *((_DWORD *)this + 128) = v230;
          if ((*((_DWORD *)this + 127) - v230) < 5) {
            goto LABEL_530;
          }
          uint64_t v8 = (unsigned __int8 *)this + 516;
          int v7 = 4;
          *((_DWORD *)this + 64) = 4;
          *((void *)this + 33) = (char *)this + 516;
LABEL_343:
          LODWORD(result.location) = v7;
          StreamBuffer::Copy((void *)(*((void *)this + 1) + 72), (unsigned int *)&result, v8);
          int v231 = result.location;
          int v232 = *((_DWORD *)this + 64);
          *((void *)this + 33) += LODWORD(result.location);
          int v233 = v232 - v231;
          *((_DWORD *)this + 64) = v233;
          if (v233)
          {
            uint64_t v29 = 0;
            int v40 = 371;
            goto LABEL_177;
          }
          unsigned int v234 = bswap32(*((_DWORD *)this + 129));
          *((_DWORD *)this + 129) = v234;
          int v235 = *((_DWORD *)this + 128) + 4;
          *((_DWORD *)this + 128) = v235;
          if (*((_DWORD *)this + 127) - v235 > v234)
          {
            while (1)
            {
              *((_DWORD *)this + 64) = v234;
              if (!v234) {
                break;
              }
LABEL_442:
              uint64_t v303 = *((void *)this + 1);
              uint64_t v305 = *(void *)(v303 + 88);
              uint64_t v304 = *(void *)(v303 + 96);
              uint64_t v306 = v305 + *(unsigned int *)(v303 + 80);
              unsigned int v307 = v306 - v304;
              if (v304 < v305 || v306 <= v304 || v306 == v304)
              {
                uint64_t v29 = 0;
                int v40 = 376;
                goto LABEL_177;
              }
              uint64_t v310 = *((unsigned int *)this + 64);
              uint64_t v311 = v304 + v310;
              BOOL v312 = v310 >= v307;
              unsigned int v313 = v310 - v307;
              if (v312) {
                uint64_t v311 = v306;
              }
              if (v312) {
                unsigned int v234 = v313;
              }
              else {
                unsigned int v234 = 0;
              }
              *(void *)(v303 + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v311;
            }
            int v314 = *((_DWORD *)this + 128) + *((_DWORD *)this + 129);
            *((_DWORD *)this + 128) = v314;
            if ((*((_DWORD *)this + 127) - v314) < 0x11) {
              goto LABEL_530;
            }
            int v315 = 16;
            while (1)
            {
              *((_DWORD *)this + 64) = v315;
              if (!v315) {
                break;
              }
LABEL_460:
              uint64_t v316 = *((void *)this + 1);
              uint64_t v318 = *(void *)(v316 + 88);
              uint64_t v317 = *(void *)(v316 + 96);
              uint64_t v319 = v318 + *(unsigned int *)(v316 + 80);
              unsigned int v320 = v319 - v317;
              if (v317 < v318 || v319 <= v317 || v319 == v317)
              {
                uint64_t v29 = 0;
                int v40 = 380;
                goto LABEL_177;
              }
              uint64_t v323 = *((unsigned int *)this + 64);
              uint64_t v324 = v317 + v323;
              BOOL v325 = v323 >= v320;
              int v326 = v323 - v320;
              if (v325) {
                uint64_t v324 = v319;
              }
              if (v325) {
                int v315 = v326;
              }
              else {
                int v315 = 0;
              }
              *(void *)(v316 + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v324;
            }
            int v327 = *((_DWORD *)this + 128) + 16;
            *((_DWORD *)this + 128) = v327;
            if ((*((_DWORD *)this + 127) - v327) < 5) {
              goto LABEL_530;
            }
            int v23 = 4;
            *((_DWORD *)this + 64) = 4;
            uint64_t v24 = (unsigned __int8 *)this + 516;
            *((void *)this + 33) = (char *)this + 516;
LABEL_476:
            LODWORD(result.location) = v23;
            StreamBuffer::Copy((void *)(*((void *)this + 1) + 72), (unsigned int *)&result, v24);
            int v328 = result.location;
            int v329 = *((_DWORD *)this + 64);
            *((void *)this + 33) += LODWORD(result.location);
            int v330 = v329 - v328;
            *((_DWORD *)this + 64) = v330;
            if (v330)
            {
              uint64_t v29 = 0;
              int v40 = 384;
              goto LABEL_177;
            }
            CFIndex v331 = bswap32(*((_DWORD *)this + 129));
            *((_DWORD *)this + 129) = v331;
            int v332 = *((_DWORD *)this + 128);
            int v333 = v332 + 4;
            *((_DWORD *)this + 128) = v332 + 4;
            if (v331 < -5 - v332)
            {
              int v334 = v333 + v331;
              unsigned int v335 = *((_DWORD *)this + 127);
              if (v333 + (int)v331 > v335 && v335 == (v334 & 0xFFFFFF)) {
                *((_DWORD *)this + 127) = v334;
              }
            }
            uint64_t v336 = *(void *)(*((void *)this + 1) + 48);
            uint64_t v337 = *(void *)(*((void *)this + 1) + 56);
            uint64_t v338 = v337 - v336;
            if (v337 != v336)
            {
              unint64_t v339 = 0;
              unint64_t v340 = v338 >> 2;
              unsigned int v341 = 1;
              do
              {
                int v342 = *(_DWORD *)(v336 + 4 * v339);
                unint64_t v339 = v341++;
              }
              while (v342 != 1633776244 && v340 > v339);
              if (v342 == 1633776244
                && *((_DWORD *)this + 138) == 3
                && !*((void *)this + 74)
                && *((_DWORD *)this + 127) - v333 >= v331)
              {
                break;
              }
            }
          }
        }
      }
    }
LABEL_530:
    unsigned int v374 = *((_DWORD *)this + 127);
    unsigned int v375 = *((_DWORD *)this + 128);
    BOOL v134 = v374 >= v375;
    unsigned int v376 = v374 - v375;
    if (v376 != 0 && v134)
    {
      while (1)
      {
        *((_DWORD *)this + 64) = v376;
        if (!v376) {
          break;
        }
LABEL_535:
        uint64_t v377 = *((void *)this + 1);
        uint64_t v379 = *(void *)(v377 + 88);
        uint64_t v378 = *(void *)(v377 + 96);
        uint64_t v380 = v379 + *(unsigned int *)(v377 + 80);
        unsigned int v381 = v380 - v378;
        if (v378 < v379 || v380 <= v378 || v380 == v378)
        {
          uint64_t v29 = 0;
          int v40 = 429;
          goto LABEL_177;
        }
        uint64_t v384 = *((unsigned int *)this + 64);
        uint64_t v385 = v378 + v384;
        BOOL v386 = v384 >= v381;
        unsigned int v387 = v384 - v381;
        if (v386) {
          uint64_t v385 = v380;
        }
        if (v386) {
          unsigned int v376 = v387;
        }
        else {
          unsigned int v376 = 0;
        }
        *(void *)(v377 + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v385;
      }
    }
  }
  v344 = CFDataCreateMutable(0, v331);
  *((void *)this + 74) = v344;
  CFIndex v345 = *((unsigned int *)this + 129);
  if (!v344)
  {
    while (1)
    {
      *((_DWORD *)this + 64) = v345;
      if (!v345) {
        goto LABEL_530;
      }
LABEL_502:
      uint64_t v353 = *((void *)this + 1);
      uint64_t v355 = *(void *)(v353 + 88);
      uint64_t v354 = *(void *)(v353 + 96);
      uint64_t v356 = v355 + *(unsigned int *)(v353 + 80);
      unsigned int v357 = v356 - v354;
      if (v354 < v355 || v356 <= v354 || v356 == v354)
      {
        uint64_t v29 = 0;
        int v40 = 401;
        goto LABEL_177;
      }
      uint64_t v360 = *((unsigned int *)this + 64);
      uint64_t v361 = v354 + v360;
      BOOL v134 = v360 >= v357;
      int v362 = v360 - v357;
      if (v134)
      {
        LODWORD(v345) = v362;
      }
      else
      {
        uint64_t v356 = v361;
        LODWORD(v345) = 0;
      }
      *(void *)(v353 + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v356;
    }
  }
  CFDataSetLength(v344, v345);
  v346 = CFDataGetMutableBytePtr(*((CFMutableDataRef *)this + 74));
  *((void *)this + 6std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v346;
  int v15 = *((_DWORD *)this + 129);
  *((_DWORD *)this + 64) = v15;
  if (v346)
  {
    uint64_t v16 = v346;
    *((void *)this + 33) = v346;
LABEL_494:
    LODWORD(result.location) = v15;
    StreamBuffer::Copy((void *)(*((void *)this + 1) + 72), (unsigned int *)&result, v16);
    int v347 = result.location;
    int v348 = *((_DWORD *)this + 64);
    *((void *)this + 33) += LODWORD(result.location);
    int v349 = v348 - v347;
    *((_DWORD *)this + 64) = v349;
    if (v349)
    {
      uint64_t v29 = 0;
      int v40 = 413;
      goto LABEL_177;
    }
    uint64_t v350 = *((void *)this + 74);
    *((_DWORD *)this + 128) += *((_DWORD *)this + 129);
    if (v350)
    {
      uint64_t v351 = *((void *)this + 1);
      LODWORD(result.location) = 1;
      double v352 = *(void (**)(void, void, uint64_t, CFRange *))(v351 + 24);
      if (v352) {
        v352(*(void *)(v351 + 40), *(unsigned int *)(v351 + 8), 1633776244, &result);
      }
    }
    goto LABEL_530;
  }
  while (1)
  {
    if (!v15)
    {
      CFRelease(*((CFTypeRef *)this + 74));
      *((void *)this + 74) = 0;
      *((_DWORD *)this + 128) += *((_DWORD *)this + 129);
      goto LABEL_530;
    }
LABEL_515:
    uint64_t v363 = *((void *)this + 1);
    uint64_t v365 = *(void *)(v363 + 88);
    uint64_t v364 = *(void *)(v363 + 96);
    uint64_t v366 = v365 + *(unsigned int *)(v363 + 80);
    unsigned int v367 = v366 - v364;
    BOOL v368 = v364 < v365 || v366 <= v364;
    if (v368 || v366 == v364) {
      break;
    }
    uint64_t v370 = *((unsigned int *)this + 64);
    uint64_t v371 = v364 + v370;
    BOOL v372 = v370 >= v367;
    int v373 = v370 - v367;
    if (v372) {
      uint64_t v371 = v366;
    }
    if (v372) {
      int v15 = v373;
    }
    else {
      int v15 = 0;
    }
    *(void *)(v363 + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v371;
    *((_DWORD *)this + 64) = v15;
  }
  uint64_t v29 = 0;
  int v40 = 408;
LABEL_177:
  *((_DWORD *)this + 59) = v40;
  return v29;
}

uint64_t FLACAudioStream::GetProperty(FLACAudioStream *this, int a2, unsigned int *a3, void *__dst)
{
  if (a2 <= 1819243875)
  {
    if (a2 == 1633776244)
    {
      if (*a3 >= 8)
      {
        size_t v10 = (const void *)*((void *)this + 74);
        if (v10)
        {
          CFRetain(v10);
          void *__dst = *((void *)this + 74);
        }
        uint64_t v11 = 0;
        *a3 = 8;
        return v11;
      }
      return 561211770;
    }
    if (a2 == 1768842863)
    {
      if (*a3 >= 8)
      {
        CFTypeRef cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        __int16 v15 = 257;
        VorbisComment::FillInfoDictionary((const __CFString **)this + 70, (CACFDictionary *)&cf);
        if (cf)
        {
          CFRetain(cf);
          CFTypeRef v7 = cf;
        }
        else
        {
          CFTypeRef v7 = 0;
        }
        void *__dst = v7;
        CACFDictionary::~CACFDictionary((CACFDictionary *)&cf);
        return 0;
      }
      return 561211770;
    }
LABEL_18:
    return AudioFileStreamObject::GetProperty(this, a2, a3, __dst);
  }
  if (a2 == 1819243876)
  {
    if (*a3 >= 8)
    {
      CFTypeRef cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      __int16 v15 = 257;
      int v12 = VorbisComment::FillLoudnessInfoDictionary((FLACAudioStream *)((char *)this + 560), (CACFDictionary *)&cf);
      uint64_t v11 = 1886681407;
      if (!v12 && CACFDictionary::Size((CACFDictionary *)&cf))
      {
        if (cf)
        {
          CFRetain(cf);
          CFTypeRef v13 = cf;
        }
        else
        {
          CFTypeRef v13 = 0;
        }
        uint64_t v11 = 0;
        void *__dst = v13;
      }
      CACFDictionary::~CACFDictionary((CACFDictionary *)&cf);
      return v11;
    }
    return 561211770;
  }
  if (a2 != 1986225779) {
    goto LABEL_18;
  }
  uint64_t v8 = (const void **)((char *)this + 560);
  return VorbisComment::GetVorbisCommentFieldList(v8, a3, (uint64_t)__dst);
}

void sub_190145974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t FLACAudioStream::GetPropertyInfo(FLACAudioStream *this, int a2, unsigned int *a3, unsigned __int8 *a4)
{
  if (a2 <= 1819243875)
  {
    if (a2 != 1633776244 && a2 != 1768842863) {
      return AudioFileStreamObject::GetPropertyInfo(this, a2, a3, a4);
    }
LABEL_10:
    if (a3)
    {
      unsigned int v6 = 8;
      goto LABEL_15;
    }
    goto LABEL_16;
  }
  if (a2 == 1819243876) {
    goto LABEL_10;
  }
  if (a2 != 1986225779) {
    return AudioFileStreamObject::GetPropertyInfo(this, a2, a3, a4);
  }
  if (a3)
  {
    if (*((void *)this + 70))
    {
      uint64_t v4 = *((void *)this + 72);
      uint64_t v5 = *((void *)this + 71);
    }
    else
    {
      uint64_t v4 = *((void *)this + 72);
      uint64_t v5 = *((void *)this + 71);
      if (v4 == v5)
      {
        unsigned int v6 = 0;
        goto LABEL_15;
      }
    }
    unsigned int v6 = 24 * ((unint64_t)(v4 - v5) >> 4) + 16;
LABEL_15:
    *a3 = v6;
  }
LABEL_16:
  if (a4) {
    *a4 = 0;
  }
  return 0;
}

uint64_t FLACAudioStream::Flush(FLACAudioStream *this)
{
  return 0;
}

void FLACAudioStream::~FLACAudioStream(FLACAudioStream *this)
{
  FLACAudioStream::~FLACAudioStream(this);
  JUMPOUT(0x192FC8940);
}

{
  const void *v2;
  const void *v3;
  const void *v4;
  void **v5;
  uint64_t vars8;

  *(void *)this = &unk_1EDF90580;
  uint64_t v2 = (const void *)*((void *)this + 65);
  if (v2) {
    CFRelease(v2);
  }
  int v3 = (const void *)*((void *)this + 74);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v5 = (void **)((char *)this + 568);
  std::vector<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v4 = (const void *)*((void *)this + 70);
  if (v4) {
    CFRelease(v4);
  }
  AudioFileStreamObject::~AudioFileStreamObject(this);
}

void VPTimeFreqConverter_Create()
{
}

void sub_190145CCC(_Unwind_Exception *a1)
{
  CFTypeRef v7 = (void *)v1[20];
  if (v7)
  {
    v1[21] = v7;
    operator delete(v7);
  }
  uint64_t v8 = *v5;
  if (*v5)
  {
    v1[18] = v8;
    operator delete(v8);
  }
  int v9 = *v3;
  if (*v3)
  {
    v1[15] = v9;
    operator delete(v9);
  }
  size_t v10 = *v4;
  if (*v4)
  {
    v1[12] = v10;
    operator delete(v10);
  }
  uint64_t v11 = *v2;
  if (*v2)
  {
    v1[9] = v11;
    operator delete(v11);
  }
  int v12 = (std::__shared_weak_count *)v1[5];
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  MEMORY[0x192FC8940](v1, 0x10A0C406C6E14A4);
  _Unwind_Resume(a1);
}

uint64_t VPTimeFreqConverter_Dispose(void *a1)
{
  if (a1)
  {
    uint64_t v2 = a1[6];
    if (v2) {
      MEMORY[0x192FC8910](v2, 0x1000C8052888210);
    }
    uint64_t v3 = a1[7];
    if (v3) {
      MEMORY[0x192FC8910](v3, 0x1000C8052888210);
    }
    uint64_t v4 = (void *)a1[20];
    if (v4)
    {
      a1[21] = v4;
      operator delete(v4);
    }
    uint64_t v5 = (void *)a1[17];
    if (v5)
    {
      a1[18] = v5;
      operator delete(v5);
    }
    unsigned int v6 = (void *)a1[14];
    if (v6)
    {
      a1[15] = v6;
      operator delete(v6);
    }
    CFTypeRef v7 = (void *)a1[11];
    if (v7)
    {
      a1[12] = v7;
      operator delete(v7);
    }
    uint64_t v8 = (void *)a1[8];
    if (v8)
    {
      a1[9] = v8;
      operator delete(v8);
    }
    int v9 = (std::__shared_weak_count *)a1[5];
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    MEMORY[0x192FC8940](a1, 0x10A0C406C6E14A4);
  }
  return 0;
}

uint64_t VPTimeFreqConverter_Analyze(uint64_t a1, const void *a2, DSPSplitComplex *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 4294967246;
  }
  if (!*(unsigned char *)(a1 + 184))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315394;
      uint64_t v11 = "vpTimeFreqConverter.cpp";
      __int16 v12 = 1024;
      int v13 = 69;
      uint64_t v5 = MEMORY[0x1E4F14500];
      unsigned int v6 = "%25s:%-5d _vp: vptimefreqconverter::analyze: not configured for conversion";
LABEL_11:
      _os_log_impl(&dword_18FEC0000, v5, OS_LOG_TYPE_ERROR, v6, (uint8_t *)&v10, 0x12u);
    }
    return 4294956433;
  }
  if ((*(_DWORD *)(a1 + 4) | 2) != 2)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315394;
      uint64_t v11 = "vpTimeFreqConverter.cpp";
      __int16 v12 = 1024;
      int v13 = 76;
      uint64_t v5 = MEMORY[0x1E4F14500];
      unsigned int v6 = "%25s:%-5d _vp: vptimefreqconverter::analyze: not configured for analysis";
      goto LABEL_11;
    }
    return 4294956433;
  }
  if (*(_DWORD *)a1) {
    return 4294967292;
  }
  memcpy(*(void **)(a1 + 64), (const void *)(*(void *)(a1 + 64) + 4 * *(unsigned int *)(a1 + 12)), 4 * (*(_DWORD *)(a1 + 16) - *(_DWORD *)(a1 + 12)));
  memcpy((void *)(*(void *)(a1 + 64) + 4 * (*(_DWORD *)(a1 + 16) - *(_DWORD *)(a1 + 12))), a2, 4 * *(unsigned int *)(a1 + 12));
  vDSP_vmul(*(const float **)(a1 + 136), 1, *(const float **)(a1 + 64), 1, *(float **)(a1 + 88), 1, *(unsigned int *)(a1 + 16));
  vDSP_vsmul(*(const float **)(a1 + 88), 1, (const float *)(a1 + 24), *(float **)(a1 + 88), 1, *(unsigned int *)(a1 + 16));
  uint64_t v4 = MultiRadixRealFFT::RealOutOfPlaceForwardTransform((MultiRadixRealFFT *)(a1 + 32), *(const float **)(a1 + 88), a3, 1.0);
  if (v4 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v10 = 136315394;
    uint64_t v11 = "vpTimeFreqConverter.cpp";
    __int16 v12 = 1024;
    int v13 = 95;
    _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d _vp: vptimefreqconverter::analyze: FFT error", (uint8_t *)&v10, 0x12u);
  }
  return v4;
}

uint64_t VPTimeFreqConverter_Synthesize(uint64_t a1, const DSPSplitComplex *a2, void *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 4294967246;
  }
  if (!*(unsigned char *)(a1 + 184))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      int v10 = "vpTimeFreqConverter.cpp";
      __int16 v11 = 1024;
      int v12 = 117;
      uint64_t v5 = MEMORY[0x1E4F14500];
      unsigned int v6 = "%25s:%-5d _vp: vptimefreqconverter::synthesize: not configured for conversion";
LABEL_11:
      _os_log_impl(&dword_18FEC0000, v5, OS_LOG_TYPE_ERROR, v6, (uint8_t *)&v9, 0x12u);
    }
    return 4294956433;
  }
  if ((*(_DWORD *)(a1 + 4) - 1) >= 2)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      int v10 = "vpTimeFreqConverter.cpp";
      __int16 v11 = 1024;
      int v12 = 124;
      uint64_t v5 = MEMORY[0x1E4F14500];
      unsigned int v6 = "%25s:%-5d _vp: vptimefreqconverter::synthesize: not configured for synthesis";
      goto LABEL_11;
    }
    return 4294956433;
  }
  if (*(_DWORD *)a1) {
    return 4294967292;
  }
  uint64_t v4 = MultiRadixRealFFT::RealOutOfPlaceInverseTransform((MultiRadixRealFFT *)(a1 + 32), a2, *(float **)(a1 + 88));
  if (v4)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      int v10 = "vpTimeFreqConverter.cpp";
      __int16 v11 = 1024;
      int v12 = 132;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d _vp: vptimefreqconverter::synthesize: IFFT error", (uint8_t *)&v9, 0x12u);
    }
  }
  else
  {
    vDSP_vmul(*(const float **)(a1 + 88), 1, *(const float **)(a1 + 160), 1, *(float **)(a1 + 88), 1, *(unsigned int *)(a1 + 16));
    vDSP_vadd(*(const float **)(a1 + 88), 1, *(const float **)(a1 + 112), 1, *(float **)(a1 + 112), 1, *(unsigned int *)(a1 + 16));
    memcpy(a3, *(const void **)(a1 + 112), 4 * *(unsigned int *)(a1 + 12));
    memmove(*(void **)(a1 + 112), (const void *)(*(void *)(a1 + 112) + 4 * *(unsigned int *)(a1 + 12)), 4 * (*(_DWORD *)(a1 + 16) - *(_DWORD *)(a1 + 12)));
    bzero((void *)(*(void *)(a1 + 112) + 4 * (*(_DWORD *)(a1 + 16) - *(_DWORD *)(a1 + 12))), 4 * *(unsigned int *)(a1 + 12));
  }
  return v4;
}

uint64_t DSPGraph::Wire::print(uint64_t result, void *a2, int a3, uint64_t a4)
{
  if (a3 >= 4)
  {
    int v4 = a4;
    (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)result + 32))(result, a2, a4, 1);
    DSPGraph::printi(a2, v4 + 4, "block size %u\n");
  }
  return result;
}

void sub_190146484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const char *DSPGraph::Wire::ClassName(DSPGraph::Wire *this)
{
  return "Wire";
}

void DSPGraph::Wire::~Wire(DSPGraph::Wire *this)
{
  *(void *)this = &unk_1EDF9C520;
  JUMPOUT(0x192FC8940);
}

{
  *(void *)this = &unk_1EDF9C520;
}

void DSPGraph::Wire::add(DSPGraph::Wire *this, DSPGraph::InputPort *a2)
{
  *((void *)a2 + 2) = this;
}

void DSPGraph::Wire::remove(DSPGraph::Wire *this, DSPGraph::InputPort *a2)
{
  *((void *)a2 + 2) = 0;
}

void *DSPGraph::Wire::removeAll(void *this)
{
  if (this[5])
  {
    UInt32 v1 = this;
    this = (void *)this[4];
    if (this)
    {
      do
      {
        uint64_t v2 = (void *)*this;
        operator delete(this);
        this = v2;
      }
      while (v2);
    }
    v1[4] = 0;
    uint64_t v3 = v1[3];
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(v1[2] + 8 * i) = 0;
    }
    v1[5] = 0;
  }
  return this;
}

void DSPGraph::Wire::addAll(DSPGraph::Wire *this, DSPGraph::Wire *a2)
{
  uint64_t v2 = (void *)*((void *)a2 + 4);
  if (v2)
  {
    int v4 = (float *)((char *)this + 16);
    do
    {
      unint64_t v5 = v2[2];
      std::__hash_table<DSPGraph::InputPort *,std::hash<DSPGraph::InputPort *>,std::equal_to<DSPGraph::InputPort *>,std::allocator<DSPGraph::InputPort *>>::__emplace_unique_key_args<DSPGraph::InputPort *,DSPGraph::InputPort * const&>(v4, v5, v5);
      *(void *)(v5 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = this;
      uint64_t v2 = (void *)*v2;
    }
    while (v2);
  }
}

uint64_t DSPGraph::Wire::setLocalFormat(uint64_t this, const AudioStreamBasicDescription *__s1, uint64_t a3)
{
  uint64_t v5 = this;
  if (*(unsigned char *)(this + 64))
  {
    unsigned int v6 = *(_DWORD **)(this + 120);
    this = memcmp(__s1, v6, 0x28uLL);
    if (this || v6[10] != a3)
    {
      std::string::basic_string[abi:ne180100]<0>(v24, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Wire.cpp");
      std::string::basic_string[abi:ne180100]<0>(v23, "setLocalFormat");
      uint64_t v7 = *(void *)(*(void *)(v5 + 8) + 8);
      uint64_t v8 = (void *)(v7 + 32);
      if (*(char *)(v7 + 55) < 0) {
        uint64_t v8 = (void *)*v8;
      }
      int16x8_t v9 = *(int16x8_t *)&__s1->mBytesPerPacket;
      long long v25 = *(_OWORD *)&__s1->mSampleRate;
      int16x8_t v26 = v9;
      uint64_t v27 = *(void *)&__s1->mBitsPerChannel;
      CA::StreamDescription::AsString((CA::StreamDescription *)v21, &v25, *(double *)&v25, v9);
      int v10 = v22;
      __int16 v11 = (void *)v21[0];
      int v12 = *(long long **)(v5 + 120);
      long long v25 = *v12;
      int16x8_t v26 = (int16x8_t)v12[1];
      uint64_t v27 = *((void *)v12 + 4);
      CA::StreamDescription::AsString((CA::StreamDescription *)v19, &v25, *(double *)v26.i64, v13);
      if (v10 >= 0) {
        __int16 v15 = v21;
      }
      else {
        __int16 v15 = v11;
      }
      if (v20 >= 0) {
        uint64_t v16 = v19;
      }
      else {
        uint64_t v16 = (void *)v19[0];
      }
      DSPGraph::strprintf((DSPGraph *)"Wire from box %s: format\n%s, %u block size\ndoes not match the one previously set\n%s, %u block size\n", v14, v8, v15, a3, v16, *(unsigned int *)(*(void *)(v5 + 120) + 40));
    }
  }
  else
  {
    long long v17 = *(_OWORD *)&__s1->mSampleRate;
    long long v18 = *(_OWORD *)&__s1->mBytesPerPacket;
    *(void *)(this + 104) = *(void *)&__s1->mBitsPerChannel;
    *(_OWORD *)(this + 88) = v18;
    *(_OWORD *)(this + 72) = v17;
    *(unsigned char *)(this + 64) = 1;
  }
  *(_DWORD *)(v5 + 112) = a3;
  *(void *)(v5 + 120) = v5 + 72;
  return this;
}

void sub_1901467F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (*(char *)(v38 - 89) < 0) {
    operator delete(*(void **)(v38 - 112));
  }
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::Wire::setSameFormat(uint64_t this, DSPGraph::Wire *a2)
{
  *(unsigned char *)(this + 64) = *((unsigned char *)a2 + 64);
  uint64_t v2 = (long long *)*((void *)a2 + 15);
  if (v2 == (long long *)((char *)a2 + 72))
  {
    long long v3 = *v2;
    long long v4 = v2[1];
    long long v5 = *(long long *)((char *)v2 + 28);
    uint64_t v2 = (long long *)(this + 72);
    *(_OWORD *)(this + 100) = v5;
    *(_OWORD *)(this + 88) = v4;
    *(_OWORD *)(this + 72) = v3;
  }
  *(void *)(this + 120) = v2;
  return this;
}

uint64_t WAVEAudioFile::GetMarkerList(WAVEAudioFile *this, unsigned int *a2, AudioFileMarkerList *a3)
{
  uint64_t v4 = *((void *)this + 18);
  uint64_t v5 = *((void *)this + 19) - v4;
  if (v5)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3);
    unsigned int v10 = 1;
    while (*(_DWORD *)(v4 + 24 * v8) != 1668637984)
    {
      uint64_t v8 = v10;
      if (v9 <= v10++) {
        goto LABEL_5;
      }
    }
    bzero(a3, *a2);
    uint64_t v13 = *(void *)(v4 + 24 * v8 + 16) + *(unsigned int *)(v4 + 24 * v8 + 4);
    uint64_t v35 = 0;
    ListChunkCFDataRef Data = (*(uint64_t (**)(void, void, uint64_t, uint64_t, char *, uint64_t *))(**((void **)this + 13) + 48))(*((void *)this + 13), 0, v13, 4, (char *)&v35 + 4, &v35);
    if (!ListChunkData)
    {
      unsigned int v14 = (*a2 - 8) / 0x28;
      if (*a2 < 8) {
        unsigned int v14 = 0;
      }
      uint64_t v15 = v35;
      if (SHIDWORD(v35) >= (int)v14) {
        uint64_t v16 = v14;
      }
      else {
        uint64_t v16 = HIDWORD(v35);
      }
      a3->UInt32 mSMPTE_TimeType = 0;
      a3->UInt32 mNumberMarkers = v16;
      unsigned int v34 = 0;
      unsigned int v33 = 0;
      ListChunkCFDataRef Data = WAVEAudioFile::GetListChunkData((uint64_t)this, &v34, &v33, 1633973356);
      if (ListChunkData)
      {
        long long v17 = v33;
      }
      else
      {
        long long v17 = v33;
        if ((int)v16 < 1)
        {
LABEL_21:
          ListChunkCFDataRef Data = 0;
        }
        else
        {
          uint64_t v18 = v13 + v15;
          uint64_t v19 = v34;
          CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          p_mMarkerID = &a3->mMarkers[0].mMarkerID;
          while (1)
          {
            HIDWORD(v29) = 24;
            ListChunkCFDataRef Data = (*(uint64_t (**)(void, void, uint64_t, uint64_t, unsigned int *, char *))(**((void **)this + 13) + 48))(*((void *)this + 13), 0, v18, 24, &v30, (char *)&v29 + 4);
            if (ListChunkData) {
              break;
            }
            uint64_t v24 = HIDWORD(v29);
            SInt32 v23 = v30;
            unsigned int v31 = bswap32(v31);
            cStr = 0;
            WAVEAudioFile::FindAssocDataName(v19, (uint64_t)v17, (const unsigned __int8 *)v30, &cStr, (const char **)&v29, v22);
            if (cStr)
            {
              CFStringRef v25 = CFStringCreateWithCString(v20, cStr, 0x500u);
              SInt32 v23 = v30;
            }
            else
            {
              CFStringRef v25 = 0;
            }
            v18 += v24;
            double v26 = (double)v32;
            *((void *)p_mMarkerID - 1) = v25;
            *((double *)p_mMarkerID - 2) = v26;
            SInt32 *p_mMarkerID = v23;
            *(void *)(p_mMarkerID + 3) = 0;
            p_mMarkerID += 10;
            if (!--v16) {
              goto LABEL_21;
            }
          }
        }
      }
      if (v17) {
        free(v17);
      }
    }
  }
  else
  {
LABEL_5:
    ListChunkCFDataRef Data = 0;
    *a2 = 0;
  }
  return ListChunkData;
}

{
  return (*(uint64_t (**)(WAVEAudioFile *, unsigned int *, AudioFileMarkerList *, uint64_t))(*(void *)this + 816))(this, a2, a3, 1);
}

void sub_190146B04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  if (a14) {
    free(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WAVEAudioFile::GetListChunkData(uint64_t a1, _DWORD *a2, void **a3, int a4)
{
  uint64_t v12 = 0;
  if (!WAVEAudioFile::FindListChunk(a1, &v12, a4))
  {
    uint64_t result = 0;
    *a2 = 0;
    return result;
  }
  uint64_t v7 = *(unsigned int *)(v12 + 4);
  unint64_t v8 = *(void *)(v12 + 8) - v7 - 4;
  if (v8 > 0xFFFFFFFE)
  {
    *a2 = 0;
    return 0xFFFFFFFFLL;
  }
  uint64_t v9 = v7 + *(void *)(v12 + 16) + 4;
  CADeprecated::CAAutoFree<unsigned char>::allocBytes(a3, *(void *)(v12 + 8) - v7 - 4, 1);
  int v11 = 0;
  uint64_t result = (*(uint64_t (**)(void, void, uint64_t, unint64_t, void *, int *))(**(void **)(a1 + 104)
                                                                                               + 48))(*(void *)(a1 + 104), 0, v9, v8, *a3, &v11);
  if (v11 != v8) {
    return 0xFFFFFFFFLL;
  }
  if (!result) {
    *a2 = v8;
  }
  return result;
}

uint64_t WAVEAudioFile::FindAssocDataName(uint64_t this, uint64_t a2, const unsigned __int8 *a3, void *a4, const char **a5, unsigned int *a6)
{
  if (this < 0xD)
  {
LABEL_10:
    *a4 = 0;
  }
  else
  {
    unsigned int v6 = 0;
    unsigned int v7 = 12;
    while (1)
    {
      int v8 = (*(unsigned __int8 *)(a2 + v6) << 24) | (*(unsigned __int8 *)(a2 + v6 + 1) << 16) | (*(unsigned __int8 *)(a2 + v6 + 2) << 8) | *(unsigned __int8 *)(a2 + v6 + 3);
      unsigned int v9 = ((*(unsigned __int8 *)(a2 + v6 + 4) | (*(unsigned __int8 *)(a2 + v6 + 5) << 8) | (*(unsigned __int8 *)(a2 + v6 + 6) << 16) | (*(unsigned __int8 *)(a2 + v6 + 7) << 24))
          + 1) & 0xFFFFFFFE;
      unsigned int v10 = v6 + 8;
      BOOL v11 = v8 == 1852798053 || v8 == 1818321516;
      if (v11
        && (*(unsigned __int8 *)(a2 + v10) | (*(unsigned __int8 *)(a2 + v6 + 9) << 8) | (*(unsigned __int8 *)(a2 + v6 + 10) << 16) | (*(unsigned __int8 *)(a2 + v6 + 11) << 24)) == a3)
      {
        break;
      }
      unsigned int v6 = v9 + v10;
      unsigned int v7 = v9 + v10 + 12;
      if (v7 >= this) {
        goto LABEL_10;
      }
    }
    *a4 = a2 + v7;
    *(_DWORD *)a5 = v9 + 8;
  }
  return this;
}

BOOL WAVEAudioFile::FindListChunk(uint64_t a1, void *a2, int a3)
{
  int v6 = 0;
  while (2)
  {
    uint64_t v7 = *(void *)(a1 + 144);
    uint64_t v8 = *(void *)(a1 + 152);
    uint64_t v9 = v8 - v7;
    if (v8 == v7)
    {
LABEL_12:
      BOOL result = 0;
      *a2 = 0;
      return result;
    }
    uint64_t v10 = 0;
    int v11 = 0;
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 3);
    unsigned int v13 = 1;
    while (1)
    {
      unsigned int v14 = (_DWORD *)(v7 + 24 * v10);
      if (*v14 == 1279873876) {
        break;
      }
LABEL_7:
      uint64_t v10 = v13;
      if (v12 <= v13++) {
        goto LABEL_12;
      }
    }
    if (v11 != v6)
    {
      ++v11;
      goto LABEL_7;
    }
    *a2 = v14;
    uint64_t v18 = 0;
    int v16 = (*(uint64_t (**)(void, void, void, uint64_t, char *, uint64_t *))(**(void **)(a1 + 104) + 48))(*(void *)(a1 + 104), 0, *(void *)(v7 + 24 * v10 + 16) + *(unsigned int *)(v7 + 24 * v10 + 4), 4, (char *)&v18 + 4, &v18);
    BOOL result = v16 == 0;
    if (!v16 && bswap32(HIDWORD(v18)) != a3)
    {
      ++v6;
      continue;
    }
    return result;
  }
}

uint64_t WAVEAudioFile::WriteChunkHeader(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v4 = 1869627199;
  int v5 = *(_DWORD *)(a2 + 4);
  if (v5 == 24)
  {
    if (*(_DWORD *)(a1 + 84) == 1463170150)
    {
      if (*(_DWORD *)a2 == 1919510118)
      {
        uint64_t v7 = 0;
      }
      else
      {
        uint64_t v7 = 0;
        uint64_t v9 = w64GUIDMap;
        while (1)
        {
          int v10 = *v9;
          v9 += 5;
          if (v10 == *(_DWORD *)a2) {
            break;
          }
          if (++v7 == 29) {
            return v4;
          }
        }
      }
      long long v12 = *(_OWORD *)&w64GUIDMap[5 * v7 + 1];
      uint64_t v8 = *(void *)(a2 + 16);
      uint64_t v13 = *(void *)(a2 + 8);
      int v11 = 0;
      uint64_t v4 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, long long *, int *))(**(void **)(a1 + 104)
                                                                                          + 56))(*(void *)(a1 + 104), 0, v8, 24, &v12, &v11);
      *a3 = v11;
    }
    return v4;
  }
  if (v5 != 8) {
    return v4;
  }
  return ChunkyAudioFile::WriteChunkHeader(a1, a2, a3);
}

uint64_t WAVEAudioFile::FileCode(WAVEAudioFile *this)
{
  return *((unsigned int *)this + 42);
}

uint64_t WAVEAudioFile::IsDataFormatSupported(WAVEAudioFile *this, const AudioStreamBasicDescription *a2)
{
  signed int mFormatID = a2->mFormatID;
  uint64_t result = 1;
  if (mFormatID <= 1667326770)
  {
    if ((mFormatID - 778924081) < 3) {
      return result;
    }
    if (mFormatID != 1096107074)
    {
      if (mFormatID == 1634492791) {
        return result;
      }
      return 0;
    }
    if (IsACELPnetSupported(void)::sCheckForACELPnetOnce[0] != -1) {
      dispatch_once(IsACELPnetSupported(void)::sCheckForACELPnetOnce, &__block_literal_global_12154);
    }
    return IsACELPnetSupported(void)::isACELPnetSupported;
  }
  else if (mFormatID <= 1836253185)
  {
    if (mFormatID == 1667326771) {
      return result;
    }
    if (mFormatID != 1819304813) {
      return 0;
    }
    AudioFormatFlags mFormatFlags = a2->mFormatFlags;
    unsigned int v7 = (0x101200u >> mFormatFlags) & 1;
    if (mFormatFlags >= 0x15) {
      unsigned int v7 = 0;
    }
    BOOL v8 = (mFormatFlags & 0xFFFFFFED) == 8;
    if (a2->mBitsPerChannel == 8) {
      return v8;
    }
    else {
      return v7;
    }
  }
  else if (((mFormatID - 1836253186) > 0x2F {
          || ((1 << (mFormatID - 2)) & 0x800000008001) == 0)
  }
         && mFormatID != 1970037111)
  {
    return 0;
  }
  return result;
}

void ___ZL19IsACELPnetSupportedv_block_invoke()
{
  UInt32 outPropertyDataSize = 0;
  if (!AudioFormatGetPropertyInfo(0x61636966u, 0, 0, &outPropertyDataSize))
  {
    if (outPropertyDataSize >= 4)
    {
      unint64_t v1 = (unint64_t)outPropertyDataSize >> 2;
      uint64_t v2 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v1);
      uint64_t v0 = (int *)v2;
      uint64_t v3 = 0;
      do
      {
        *(_DWORD *)&v2[v3] = 0;
        v3 += 4;
      }
      while (4 * v1 != v3);
    }
    else
    {
      uint64_t v0 = 0;
    }
    if (AudioFormatGetProperty(0x61636966u, 0, 0, &outPropertyDataSize, v0) || outPropertyDataSize < 4)
    {
      if (!v0) {
        return;
      }
    }
    else
    {
      unint64_t v4 = (unint64_t)outPropertyDataSize >> 2;
      int v5 = v0;
      while (1)
      {
        int v6 = *v5++;
        if (v6 == 1096107074) {
          break;
        }
        if (!--v4) {
          goto LABEL_9;
        }
      }
      IsACELPnetSupported(void)::isACELPnetSupported = 1;
    }
LABEL_9:
    operator delete(v0);
  }
}

void sub_1901471A8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WAVEAudioFile::GetInfoDictionary(WAVEAudioFile *this, CACFDictionary *a2)
{
  int v37 = 0;
  int v36 = 0;
  ListChunkCFDataRef Data = WAVEAudioFile::GetListChunkData((uint64_t)this, &v37, &v36, 1229866575);
  LODWORD(v5) = v37;
  if (ListChunkData) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v37 == 0;
  }
  int v7 = v6;
  if (v6)
  {
    if (*((_DWORD *)this + 21) != 1463170150) {
      goto LABEL_20;
    }
    uint64_t v8 = *((void *)this + 18);
    uint64_t v9 = *((void *)this + 19);
    uint64_t v10 = v9 - v8;
    if (v9 == v8) {
      goto LABEL_20;
    }
    uint64_t v11 = 0;
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (v10 >> 3);
    unsigned int v13 = 1;
    while (*(_DWORD *)(v8 + 24 * v11) != -1131126894)
    {
      uint64_t v11 = v13;
      if (v12 <= v13++) {
        goto LABEL_20;
      }
    }
    unint64_t v16 = *(void *)(v8 + 24 * v11 + 8);
    if (v16 < 0x1D || (uint64_t v17 = *(unsigned int *)(v8 + 24 * v11 + 4), v5 = v16 - v17 - 4, v5 > 0xFFFFFFFE))
    {
LABEL_20:
      LODWORD(v5) = 0;
      int v19 = 0;
    }
    else
    {
      uint64_t v18 = *(void *)(v8 + 24 * v11 + 16);
      CADeprecated::CAAutoFree<unsigned char>::allocBytes(&v36, v5, 1);
      int v38 = 0;
      int v19 = (*(uint64_t (**)(void, void, uint64_t, size_t, void *, int *))(**((void **)this + 13) + 48))(*((void *)this + 13), 0, v17 + v18 + 4, v5, v36, &v38);
      if (v38 == v5)
      {
        if (!v19) {
          goto LABEL_21;
        }
      }
      else
      {
        int v19 = -1;
      }
      LODWORD(v5) = 0;
    }
LABEL_21:
    BOOL v15 = v19 == 0;
    goto LABEL_22;
  }
  BOOL v15 = 1;
LABEL_22:
  CFAllocatorRef v20 = v36;
  if (v15 && v5)
  {
    uint64_t v21 = 0;
    CFAllocatorRef v22 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    do
    {
      if (v5 >= 8)
      {
        unsigned int v23 = 0;
        unsigned int v24 = v5;
        while (1)
        {
          CFStringRef v25 = &v20[v23];
          if (bswap32(*(_DWORD *)v25) == *(_DWORD *)&WAVEAudioFile::GetInfoDictionaryFromListChunk(CACFDictionary *)::listTypes[16 * v21]) {
            break;
          }
          unint64_t v26 = *((unsigned int *)v25 + 1);
          v23 += v26 + 8;
          if ((unint64_t)v24 - 8 < v26) {
            unsigned int v23 = v5;
          }
          if (v23 < v5 && !v20[v23]) {
            ++v23;
          }
          unsigned int v24 = v5 - v23;
          if (v5 - v23 <= 7) {
            goto LABEL_43;
          }
        }
        size_t v27 = *((unsigned int *)v25 + 1);
        if ((unint64_t)(v27 + v23) + 8 <= v5)
        {
          BOOL v28 = (const UInt8 *)(v25 + 8);
          if (v7)
          {
            unsigned int v29 = 4 * wcsnlen((const __int32 *)v25 + 2, v27 >> 2);
            CFStringEncoding v30 = 335544576;
          }
          else
          {
            unsigned int v29 = strnlen(v25 + 8, v27);
            CFStringEncoding v30 = 1280;
          }
          CFStringRef v31 = CFStringCreateWithBytes(v22, v28, v29, v30, 0);
          CFStringRef v32 = v31;
          if (v31)
          {
            if (CFStringGetLength(v31)) {
              CACFDictionary::AddString(a2, *(const __CFString **)&WAVEAudioFile::GetInfoDictionaryFromListChunk(CACFDictionary *)::listTypes[16 * v21 + 8], v32);
            }
            CFRelease(v32);
          }
        }
      }
LABEL_43:
      ++v21;
    }
    while (v21 != 6);
  }
  if (v20) {
    free(v20);
  }
  uint64_t v33 = *((void *)this + 65);
  if (v33) {
    FillInfoDictionaryFromID3Parser(a2, v33);
  }
  int v36 = 0;
  unsigned int v34 = (AudioFileObject *)(*(uint64_t (**)(WAVEAudioFile *, void **))(*(void *)this + 544))(this, &v36);
  if (!v34) {
    AudioFileObject::AddDurationToInfoDictionary(v34, a2, (double *)&v36);
  }
  return 0;
}

void sub_19014750C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  if (a9) {
    free(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WAVEAudioFile::SetChannelLayout(WAVEAudioFile *this, UInt32 a2, const AudioChannelLayout *a3)
{
  UInt32 ioPropertyDataSize = 4;
  int outPropertyData = 0;
  uint64_t result = AudioFormatGetProperty(0x6E63686Du, a2, a3, &ioPropertyDataSize, &outPropertyData);
  if (!result)
  {
    if (outPropertyData != *((_DWORD *)this + 13)) {
      return 4294967246;
    }
    unsigned int v7 = 0;
    uint64_t result = AudioFormatProperty_WAVEChannelMaskForChannelLayout(a3, &v7);
    if (result) {
      return result;
    }
    uint8x8_t v6 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.i32[0] == *((_DWORD *)this + 13))
    {
      *((_DWORD *)this + 114) = v7;
      return (*(uint64_t (**)(WAVEAudioFile *, char *))(*(void *)this + 184))(this, (char *)this + 24);
    }
    else
    {
      return 4294967246;
    }
  }
  return result;
}

uint64_t WAVEAudioFile::GetChannelLayout(WAVEAudioFile *this, unsigned int *a2, AudioChannelLayout *a3, int8x8_t a4)
{
  uint64_t v4 = 561211770;
  unsigned int v5 = *a2;
  if (*a2 >= 0x20)
  {
    if (*((_DWORD *)this + 8) == 1667326771)
    {
      uint64_t v4 = 0;
      *(_OWORD *)&a3->mChannelLayoutTag = 0u;
      *(_OWORD *)&a3->mChannelDescriptions[0].mChannelFlags = 0u;
      a3->mChannelLayoutTag = *((_DWORD *)this + 116);
      *a2 = 32;
    }
    else
    {
      int v9 = *((_DWORD *)this + 114);
      if (v9)
      {
        if (*((_DWORD *)this + 118))
        {
          if (v5 >= 0x21) {
            *a2 = 32;
          }
          uint64_t v4 = 0;
          *(void *)&a3->mChannelLayoutTag = 6619138;
          *(void *)&a3->mChannelDescriptions[0].mChannelFlags = 0;
          *(void *)&a3->mChannelDescriptions[0].mCoordinates[1] = 0;
          *(void *)&a3->UInt32 mNumberChannelDescriptions = 0;
        }
        else
        {
          unsigned int v10 = *((_DWORD *)this + 13);
          unsigned int v11 = AudioFormatProperty_ChannelLayoutSizeForWAVEChannelMask(*((_DWORD *)this + 114), v10, a4);
          if (v5 >= v11)
          {
            if (v5 > v11)
            {
              *a2 = v11;
              int v9 = *((_DWORD *)this + 114);
            }
            AudioFormatProperty_ChannelLayoutForWAVEChannelMask(v9, v10, a3, v12);
            return 0;
          }
        }
      }
      else
      {
        *a2 = 0;
        return 1667787583;
      }
    }
  }
  return v4;
}

uint64_t WAVEAudioFile::GetChannelLayoutSize(WAVEAudioFile *this, unsigned int *a2, unsigned int *a3, int8x8_t a4)
{
  if (a3) {
    *a3 = 1;
  }
  if (!a2) {
    return 0;
  }
  if (*((_DWORD *)this + 114)) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = *((_DWORD *)this + 8) == 1667326771;
  }
  if (v5)
  {
    unsigned int v6 = AudioFormatProperty_ChannelLayoutSizeForWAVEChannelMask(*((_DWORD *)this + 114), *((_DWORD *)this + 13), a4);
    uint64_t result = 0;
  }
  else
  {
    unsigned int v6 = 0;
    uint64_t result = 1667787583;
  }
  *a2 = v6;
  return result;
}

uint64_t WAVEAudioFile::SetRegionList(WAVEAudioFile *this, unsigned int a2, const AudioFileRegionList *a3)
{
  return 1886681407;
}

uint64_t WAVEAudioFile::GetRegionList(WAVEAudioFile *this, unsigned int *a2, AudioFileRegionList *a3)
{
  *a2 = 0;
  return 1886681407;
}

uint64_t WAVEAudioFile::GetRegionListSize(WAVEAudioFile *this, unsigned int *a2, unsigned int *a3)
{
  if (a2) {
    *a2 = 0;
  }
  if (a3) {
    *a3 = 0;
  }
  return 1886681407;
}

uint64_t WAVEAudioFile::SetMarkerList(WAVEAudioFile *this, unsigned int a2, const AudioFileMarkerList *a3)
{
  uint64_t v4 = this;
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  unsigned int v41 = 0;
  int v40 = 0;
  ListChunkCFDataRef Data = WAVEAudioFile::GetListChunkData((uint64_t)this, &v41, &v40, 1633973356);
  if (!ListChunkData)
  {
    uint64_t mNumberMarkers = a3->mNumberMarkers;
    CADeprecated::CAAutoFree<unsigned char>::CAAutoFree(&v39, (24 * mNumberMarkers) | 4u, 0);
    *(_WORD *)int v39 = mNumberMarkers;
    *((unsigned char *)v39 + 2) = BYTE2(mNumberMarkers);
    *((unsigned char *)v39 + 3) = BYTE3(mNumberMarkers);
    if (mNumberMarkers)
    {
      uint64_t v35 = v4;
      int v36 = a3;
      uint64_t v7 = 0;
      char v8 = 0;
      uint64_t v9 = v41;
      LODWORD(v10) = 4;
      unsigned int v11 = (char *)v40;
      uint64_t v37 = mNumberMarkers;
      do
      {
        int8x8_t v12 = (char *)a3 + 40 * v7;
        unsigned int v13 = (const unsigned __int8 *)*((unsigned int *)v12 + 6);
        double v14 = *((double *)v12 + 1);
        *((unsigned char *)v39 + v10) = (_BYTE)v13;
        *((unsigned char *)v39 + (v10 | 1)) = BYTE1(v13);
        *((unsigned char *)v39 + (v10 | 2)) = BYTE2(v13);
        *((unsigned char *)v39 + (v10 | 3)) = BYTE3(v13);
        *((unsigned char *)v39 + (v10 + 4)) = (int)v14;
        unsigned int v15 = (int)v14 >> 8;
        *((unsigned char *)v39 + (v10 + 5)) = v15;
        *((unsigned char *)v39 + (v10 + 6)) = (int)v14 >> 16;
        *((unsigned char *)v39 + (v10 + 7)) = (int)v14 >> 24;
        *((unsigned char *)v39 + (v10 + 8)) = 100;
        *((unsigned char *)v39 + (v10 + 9)) = 97;
        *((unsigned char *)v39 + (v10 + 10)) = 116;
        *((unsigned char *)v39 + (v10 + 11)) = 97;
        *((unsigned char *)v39 + (v10 + 12)) = 0;
        *((unsigned char *)v39 + (v10 + 13)) = 0;
        *((unsigned char *)v39 + (v10 + 14)) = 0;
        *((unsigned char *)v39 + (v10 + 15)) = 0;
        *((unsigned char *)v39 + (v10 + 16)) = 0;
        *((unsigned char *)v39 + (v10 + 17)) = 0;
        *((unsigned char *)v39 + (v10 + 18)) = 0;
        *((unsigned char *)v39 + (v10 + 19)) = 0;
        *((unsigned char *)v39 + (v10 + 20)) = (int)v14;
        *((unsigned char *)v39 + (v10 + 21)) = v15;
        *((unsigned char *)v39 + (v10 + 22)) = (int)v14 >> 16;
        *((unsigned char *)v39 + (v10 + 23)) = (int)v14 >> 24;
        CFStringRef v16 = (const __CFString *)*((void *)v12 + 2);
        if (v16 && CFStringGetCString(v16, buffer, 1024, 0x500u))
        {
          memset(v43, 0, sizeof(v43));
          WAVEAudioFile::FindAssocDataName(v9, (uint64_t)v11, v13, &v43[4], (const char **)v43, v17);
          if (*(void *)&v43[4]) {
            int v18 = *(_DWORD *)v43;
          }
          else {
            int v18 = 0;
          }
          int v19 = strlen(buffer);
          unsigned int v20 = (v19 & 0xFFFFFFFE) + 14;
          int v21 = v9 - v18;
          uint64_t mNumberMarkers = v37;
          size_t v38 = v21 + v20;
          CADeprecated::CAAutoFree<unsigned char>::CAAutoFree(&v42, v38, 0);
          *(_DWORD *)int v42 = 1818386796;
          *((_DWORD *)v42 + 1) = (v19 & 0xFFFFFFFE) + 6;
          CFAllocatorRef v22 = (char *)v42;
          *((_DWORD *)v42 + 2) = v13;
          memcpy(v22 + 12, buffer, (v19 + 1));
          if (v9 >= 9)
          {
            unsigned int v23 = 0;
            unsigned int v24 = 8;
            while (1)
            {
              int v25 = (v11[v23] << 24) | (v11[v23 + 1] << 16) | (v11[v23 + 2] << 8) | v11[v23 + 3];
              unsigned int v26 = ((v11[v23 + 4] | (v11[v23 + 5] << 8) | (v11[v23 + 6] << 16) | (v11[v23 + 7] << 24))
                   + 1) & 0xFFFFFFFE;
              if (v25 != 1852798053 && v25 != 1818321516) {
                break;
              }
              BOOL v28 = (unsigned __int8 *)&v11[v24];
              if ((*v28 | (v11[v23 + 9] << 8) | (v11[v23 + 10] << 16) | (v11[v23 + 11] << 24)) != v13)
              {
                unsigned int v29 = (char *)v42 + v20;
                CFStringEncoding v30 = v28 - 8;
                goto LABEL_18;
              }
LABEL_19:
              unsigned int v23 = v26 + v24;
              v24 += v26 + 8;
              if (v24 >= v9)
              {
                CFAllocatorRef v22 = (char *)v42;
                a3 = v36;
                uint64_t mNumberMarkers = v37;
                goto LABEL_21;
              }
            }
            unsigned int v29 = (char *)v42 + v20;
            CFStringEncoding v30 = (unsigned __int8 *)&v11[v24 - 8];
LABEL_18:
            memcpy(v29, v30, v26 + 8);
            v20 += v26 + 8;
            goto LABEL_19;
          }
LABEL_21:
          int v42 = 0;
          if (v11 == v22)
          {
            CFAllocatorRef v22 = v11;
          }
          else
          {
            free(v11);
            if (v42) {
              free(v42);
            }
          }
          char v8 = 1;
          unsigned int v11 = v22;
          uint64_t v9 = v38;
        }
        uint64_t v10 = (v10 + 24);
        ++v7;
      }
      while (v7 != mNumberMarkers);
      unsigned int v41 = v9;
      int v40 = v11;
      uint64_t v4 = v35;
    }
    else
    {
      char v8 = 0;
      uint64_t v10 = 4;
    }
    ListChunkCFDataRef Data = (*(uint64_t (**)(WAVEAudioFile *, uint64_t, uint64_t, void *))(*(void *)v4 + 768))(v4, 1668637984, v10, v39);
    if (v8)
    {
      size_t v31 = v41;
      CFStringRef v32 = v40;
      *(void *)buffer = 0;
      if (!WAVEAudioFile::FindListChunk((uint64_t)v4, buffer, 1633973356)
        || (uint64_t v33 = *(void *)buffer,
            **(_DWORD **)buffer = 1179405394,
            *(_DWORD *)&v43[4] = 1380731974,
            LODWORD(v42) = 4,
            !(*(unsigned int (**)(void, void, void, uint64_t, unsigned char *, void **))(**((void **)v4 + 13)
                                                                                               + 56))(*((void *)v4 + 13), 0, *(void *)(v33 + 16), 4, &v43[4], &v42)))
      {
        CADeprecated::CAAutoFree<char>::CAAutoFree(&v43[4], v31 + 4);
        **(_DWORD **)&v43[4] = 1819567201;
        memcpy((void *)(*(void *)&v43[4] + 4), v32, v31);
        (*(void (**)(WAVEAudioFile *, uint64_t, size_t, void))(*(void *)v4 + 760))(v4, 1279873876, v31 + 4, *(void *)&v43[4]);
        if (*(void *)&v43[4]) {
          free(*(void **)&v43[4]);
        }
      }
    }
    if (v39) {
      free(v39);
    }
  }
  if (v40) {
    free(v40);
  }
  return ListChunkData;
}

void sub_190147DA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  if (a18) {
    free(a18);
  }
  if (a13) {
    free(a13);
  }
  if (a14) {
    free(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WAVEAudioFile::GetMarkerListSize(WAVEAudioFile *this, unsigned int *a2, unsigned int *a3)
{
  if (a3) {
    *a3 = 1;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 18);
  uint64_t v5 = *((void *)this + 19);
  uint64_t v6 = v5 - v4;
  if (v5 == v4)
  {
LABEL_8:
    uint64_t result = 0;
    *a2 = 0;
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    unsigned int v9 = 1;
    while (*(_DWORD *)(v4 + 24 * v7) != 1668637984)
    {
      uint64_t v7 = v9;
      if (v8 <= v9++) {
        goto LABEL_8;
      }
    }
    uint64_t v12 = 0;
    uint64_t result = (*(uint64_t (**)(void, void, void, uint64_t, char *, uint64_t *))(**((void **)this + 13)
                                                                                           + 48))(*((void *)this + 13), 0, *(void *)(v4 + 24 * v7 + 16) + *(unsigned int *)(v4 + 24 * v7 + 4), 4, (char *)&v12 + 4, &v12);
    if (!result) {
      *a2 = 40 * HIDWORD(v12) + 8;
    }
  }
  return result;
}

uint64_t WAVEAudioFile::GetMagicCookieData(WAVEAudioFile *this, unsigned int *a2, char *a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = 2003334207;
  if (!a2 || !a3) {
    return v3;
  }
  if (*((_DWORD *)this + 8) == 1667326771)
  {
    unsigned int v34 = 0;
    uint64_t v3 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, _WORD *, unsigned int *))(**((void **)this + 13)
                                                                                              + 48))(*((void *)this + 13), 0, *((void *)this + 9) + 8, 10, v35, &v34);
    if (v3) {
      return v3;
    }
    LOWORD(v27) = 0;
    BOOL v28 = v35;
    unsigned int v29 = v34;
    char v30 = 0;
    uint64_t v31 = 0;
    CFStringRef v32 = 0;
    uint64_t v33 = 0xF6400000000;
    if (v34 < 0xA) {
      goto LABEL_27;
    }
    if (v35[0] != 2935)
    {
      if (v35[0] != 30475)
      {
LABEL_27:
        if (AC3PacketParser::IsValid((AC3PacketParser *)&v27) && *a2 >= 0xB) {
          AC3PacketParser::GetMagicCookie((AC3PacketParser *)&v27, a3, a2);
        }
        unsigned int v23 = v32;
        if (v32)
        {
LABEL_31:
          free(v23);
          return v3;
        }
        return v3;
      }
      char v30 = 1;
    }
    LOBYTE(v27) = 1;
    goto LABEL_27;
  }
  uint64_t v3 = 561211770;
  if (*((unsigned char *)this + 460))
  {
    uint64_t v7 = *((void *)this + 18);
    uint64_t v8 = *((void *)this + 19) - v7;
    if (v8)
    {
      uint64_t v9 = 0;
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
      unsigned int v11 = 1;
      while (*(_DWORD *)(v7 + 24 * v9) != 1718449184)
      {
        uint64_t v9 = v11;
        if (v10 <= v11++) {
          return 0;
        }
      }
      unint64_t v13 = *(void *)(v7 + 24 * v9 + 8);
      if (v13 <= 0xFFFFFFFE)
      {
        uint64_t v14 = v7 + 24 * v9;
        int v17 = *(_DWORD *)(v14 + 4);
        CFStringRef v16 = (unsigned int *)(v14 + 4);
        int v15 = v17;
        size_t v18 = (v13 - v17);
        if (*a2 < (int)v18 + 28) {
          return v3;
        }
        int v19 = (unsigned __int16 *)malloc_type_malloc(v18, 0x7C51E058uLL);
        if (v13 != v15 && v19 == 0)
        {
          exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          unsigned int v26 = std::bad_alloc::bad_alloc(exception);
        }
        int v21 = v19;
        if (v19)
        {
          int v27 = 0;
          uint64_t v3 = (*(uint64_t (**)(void, void, void, size_t, unsigned __int16 *, int *))(**((void **)this + 13) + 48))(*((void *)this + 13), 0, *(void *)(v7 + 24 * v9 + 16) + *v16, v18, v19, &v27);
          if (!v3)
          {
            *(void *)a3 = 0x616D72660C000000;
            unsigned int v22 = bswap32(*v21 | 0x6D730000);
            *((_DWORD *)a3 + 2) = v22;
            *((_DWORD *)a3 + 3) = bswap32(v18 + 8);
            *((_DWORD *)a3 + 4) = v22;
            memcpy(a3 + 20, v21, v18);
            *(void *)&a3[(v18 + 20)] = 0x8000000;
            *a2 = v18 + 28;
          }
          unsigned int v23 = v21;
          goto LABEL_31;
        }
      }
    }
    return 0;
  }
  return v3;
}

void sub_190148250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  if (a20) {
    free(a20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WAVEAudioFile::GetMagicCookieDataSize(WAVEAudioFile *this, unsigned int *a2, unsigned int *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 8) != 1667326771)
  {
    if (!a2) {
      return 2003334207;
    }
    if (!*((unsigned char *)this + 460)) {
      return 1886681407;
    }
    if (a3) {
      *a3 = 0;
    }
    *a2 = 0;
    uint64_t v5 = *((void *)this + 18);
    uint64_t v6 = *((void *)this + 19);
    uint64_t v7 = v6 - v5;
    if (v6 != v5)
    {
      uint64_t v8 = 0;
      unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 3);
      unsigned int v10 = 1;
      while (*(_DWORD *)(v5 + 24 * v8) != 1718449184)
      {
        uint64_t v8 = v10;
        if (v9 <= v10++) {
          return 0;
        }
      }
      unint64_t v12 = *(void *)(v5 + 24 * v8 + 8);
      if (v12 <= 0xFFFFFFFE)
      {
        uint64_t v4 = 0;
        *a2 = v12 - *(_DWORD *)(v5 + 24 * v8 + 4) + 28;
        return v4;
      }
    }
    return 0;
  }
  if (a3) {
    *a3 = 0;
  }
  if (!a2) {
    return 0;
  }
  *a2 = 0;
  unsigned int v21 = 0;
  uint64_t v4 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, _WORD *, unsigned int *))(**((void **)this + 13)
                                                                                            + 48))(*((void *)this + 13), 0, *((void *)this + 9) + 8, 10, v22, &v21);
  if (v4) {
    return v4;
  }
  __int16 v14 = 0;
  int v15 = v22;
  unsigned int v16 = v21;
  char v17 = 0;
  uint64_t v18 = 0;
  int v19 = 0;
  uint64_t v20 = 0xF6400000000;
  if (v21 >= 0xA)
  {
    if (v22[0] == 2935)
    {
LABEL_25:
      LOBYTE(v14) = 1;
      goto LABEL_26;
    }
    if (v22[0] == 30475)
    {
      char v17 = 1;
      goto LABEL_25;
    }
  }
LABEL_26:
  if (AC3PacketParser::IsValid((AC3PacketParser *)&v14)) {
    *a2 = 11;
  }
  if (v19) {
    free(v19);
  }
  return v4;
}

uint64_t WAVEAudioFile::GetNumBytes(WAVEAudioFile *this)
{
  unsigned int v1 = *((_DWORD *)this + 13);
  unsigned int v2 = *((_DWORD *)this + 119);
  if (v1 >= v2) {
    return *((void *)this + 1);
  }
  else {
    return (uint64_t)((double)v1 / (double)v2 * (double)*((uint64_t *)this + 1));
  }
}

uint64_t WAVEAudioFile::UpdateSize(WAVEAudioFile *this)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  int v63 = 0;
  int v1 = *((unsigned __int8 *)this + 516);
  unint64_t v62 = 0;
  int v61 = 0;
  uint64_t v4 = *((void *)this + 18);
  uint64_t v2 = *((void *)this + 19);
  uint64_t v3 = (char *)this + 144;
  uint64_t v5 = v2 - v4;
  if (v2 == v4)
  {
LABEL_5:
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioFormatInfo buf = 136315394;
      *(void *)&uint8_t buf[4] = "WAVEAudioFile.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1885;
      unsigned int v11 = MEMORY[0x1E4F14500];
      unint64_t v12 = "%25s:%-5d  Couldn't get the data chunk info";
      goto LABEL_7;
    }
    return 0;
  }
  uint64_t v7 = 0;
  unsigned int v8 = 0;
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3);
  while (1)
  {
    unsigned int v10 = (_DWORD *)(v4 + 24 * v7);
    if (*v10 == 1684108385) {
      break;
    }
    uint64_t v7 = ++v8;
    if (v9 <= v8) {
      goto LABEL_5;
    }
  }
  uint64_t v16 = 0;
  unsigned int v17 = 1;
  while (1)
  {
    uint64_t v18 = (int *)(v4 + 24 * v16);
    if (*v18 == *((_DWORD *)this + 42)) {
      break;
    }
    uint64_t v16 = v17;
    BOOL v38 = v9 > v17++;
    if (!v38)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        return 0;
      }
      *(_DWORD *)AudioFormatInfo buf = 136315394;
      *(void *)&uint8_t buf[4] = "WAVEAudioFile.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1888;
      unsigned int v11 = MEMORY[0x1E4F14500];
      unint64_t v12 = "%25s:%-5d  Couldn't get the RIFF/RF64/BW64 container chunk info";
LABEL_7:
      unint64_t v13 = buf;
LABEL_8:
      _os_log_impl(&dword_18FEC0000, v11, OS_LOG_TYPE_ERROR, v12, v13, 0x12u);
      return 0;
    }
  }
  int v58 = *((_DWORD *)this + 21);
  uint64_t v19 = v4 + 24 * v7;
  uint64_t v21 = *(void *)(v19 + 8);
  uint64_t v20 = (void *)(v19 + 8);
  uint64_t v22 = v21 - *((unsigned int *)v20 - 1);
  uint64_t v59 = (*(uint64_t (**)(WAVEAudioFile *))(*(void *)this + 224))(this);
  BOOL v38 = v22 <= v59;
  uint64_t v23 = v22 - v59;
  if (!v38)
  {
    ChunkyAudioFile::MoveUpTrailingChunks(this, v8, v23);
    uint64_t v24 = (*(uint64_t (**)(void, unint64_t *))(**((void **)this + 13) + 24))(*((void *)this + 13), &v62);
    if (v24)
    {
      uint64_t v14 = v24;
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        return v14;
      }
      *(_DWORD *)AudioFormatInfo buf = 136315394;
      *(void *)&uint8_t buf[4] = "WAVEAudioFile.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1898;
      int v25 = MEMORY[0x1E4F14500];
      unsigned int v26 = "%25s:%-5d  GetSize failed";
      goto LABEL_24;
    }
    (*(void (**)(void, unint64_t))(**((void **)this + 13) + 32))(*((void *)this + 13), v62 - v23);
  }
  uint64_t v27 = (*(uint64_t (**)(void, unint64_t *))(**((void **)this + 13) + 24))(*((void *)this + 13), &v62);
  if (v27)
  {
    uint64_t v14 = v27;
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return v14;
    }
    *(_DWORD *)AudioFormatInfo buf = 136315394;
    *(void *)&uint8_t buf[4] = "WAVEAudioFile.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1903;
    int v25 = MEMORY[0x1E4F14500];
    unsigned int v26 = "%25s:%-5d  GetSize failed";
    goto LABEL_24;
  }
  unint64_t v57 = v62 - *(unsigned int *)(v4 + 24 * v16 + 4);
  uint64_t v29 = *((void *)this + 18);
  uint64_t v30 = *((void *)this + 19);
  uint64_t v31 = v30 - v29;
  if (v30 == v29)
  {
LABEL_30:
    uint64_t v35 = 0;
  }
  else
  {
    uint64_t v32 = 0;
    unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * (v31 >> 3);
    unsigned int v34 = 1;
    while (1)
    {
      uint64_t v35 = v29 + 24 * v32;
      if (*(_DWORD *)v35 == 1685272116) {
        break;
      }
      uint64_t v32 = v34;
      BOOL v38 = v33 > v34++;
      if (!v38) {
        goto LABEL_30;
      }
    }
    if (*(void *)(v4 + 24 * v16 + 16) + 12 == *(void *)(v29 + 24 * v32 + 16)
      && (unint64_t)(*(uint64_t (**)(WAVEAudioFile *, void))(*(void *)this + 792))(this, *(void *)(v29 + 24 * v32 + 8)) >= 0x24)
    {
      int v52 = *((_DWORD *)this + 42);
      int v36 = 1;
      if (v52 == 1113011764 || v52 == 1380333108) {
        goto LABEL_40;
      }
      goto LABEL_32;
    }
  }
  int v36 = 0;
LABEL_32:
  uint64_t v37 = ~*((_DWORD *)this + 45);
  BOOL v38 = v59 > v37 || v62 > v37;
  if (v38)
  {
    if ((*(uint64_t (**)(WAVEAudioFile *))(*(void *)this + 800))(this)) {
      goto LABEL_40;
    }
    if (!(*(unsigned int (**)(WAVEAudioFile *))(*(void *)this + 808))(this)) {
      return 1868981823;
    }
  }
  if (!v1) {
    goto LABEL_72;
  }
LABEL_40:
  uint64_t v39 = (*(uint64_t (**)(WAVEAudioFile *))(*(void *)this + 240))(this) * *((unsigned int *)this + 11);
  *(void *)AudioFormatInfo buf = 0x1C34367364;
  *(void *)&buf[8] = v57;
  *(void *)&uint8_t buf[16] = v59;
  uint64_t v66 = v39;
  int v67 = 0;
  if (!v36)
  {
    uint64_t v41 = *((void *)this + 18);
    uint64_t v42 = *((void *)this + 19) - v41;
    if (v42)
    {
      uint64_t v43 = 0;
      unsigned int v44 = 0;
      unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * (v42 >> 3);
      while (1)
      {
        uint64_t v46 = v41 + 24 * v43;
        if (*(_DWORD *)v46 == 1247104587) {
          break;
        }
        uint64_t v43 = ++v44;
        if (v45 <= v44) {
          goto LABEL_48;
        }
      }
    }
    else
    {
LABEL_48:
      unsigned int v44 = 0;
      uint64_t v46 = 0;
    }
    unint64_t v47 = (*(uint64_t (**)(WAVEAudioFile *, void))(*(void *)this + 792))(this, *(void *)(v46 + 8));
    uint64_t v48 = *(void *)(v4 + 24 * v16 + 16) + 12;
    if (v48 != *(void *)(v46 + 16) || (unint64_t v49 = v47, v47 <= 0x23))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int v64 = 136315394;
        *(void *)&v64[4] = "WAVEAudioFile.cpp";
        *(_WORD *)&v64[12] = 1024;
        *(_DWORD *)&v64[14] = 1956;
        unsigned int v11 = MEMORY[0x1E4F14500];
        unint64_t v12 = "%25s:%-5d  Couldn't find a suitable JUNK chunk at the required offset of a ds64 chunk";
        unint64_t v13 = v64;
        goto LABEL_8;
      }
      return 0;
    }
    *(void *)int v64 = 0x864733634;
    uint64_t v50 = 36;
    if (v47 - 44 >= 0xFFFFFFFFFFFFFFF8) {
      uint64_t v50 = v47;
    }
    *(void *)&v64[8] = v50;
    *(void *)&v64[16] = v48;
    uint64_t v51 = (*(uint64_t (**)(WAVEAudioFile *, unsigned char *, int *))(*(void *)this + 776))(this, v64, &v61);
    if (v51) {
      return v51;
    }
    unint64_t v56 = v49;
    uint64_t v60 = 0;
    uint64_t v14 = (*(uint64_t (**)(WAVEAudioFile *, unsigned char *, unsigned char *, uint64_t *))(*(void *)this + 784))(this, v64, &buf[8], &v60);
    if (v14) {
      return v14;
    }
    if (v56 == *(void *)&v64[8])
    {
      *(_DWORD *)uint64_t v46 = *(_DWORD *)v64;
      *(void *)(v46 + 8) = v56;
    }
    else
    {
      std::vector<ChunkInfo64>::insert((uint64_t)v3, (char *)(*((void *)this + 18) + 24 * v44), (unint64_t)v64);
      uint64_t v53 = *(void *)(v46 + 16) + *(void *)&v64[8];
      *(void *)(v46 + 8) = v56 - *(void *)&v64[8];
      *(void *)(v46 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v53;
      uint64_t v14 = (*(uint64_t (**)(WAVEAudioFile *, uint64_t, int *))(*(void *)this + 776))(this, v46, &v61);
      if (v14) {
        return v14;
      }
    }
    goto LABEL_67;
  }
  uint64_t v40 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, unsigned char *, int *))(**((void **)this + 13) + 56))(*((void *)this + 13), 0, *(void *)(v35 + 16) + 8, 24, &buf[8], &v63);
  if (!v40)
  {
LABEL_67:
    int v54 = 1113011764;
    if (v58 == 1113011764 || (int v54 = 1380333108, v58 == 1380333108)) {
      *((_DWORD *)this + 42) = v54;
    }
    else {
      int v54 = *((_DWORD *)this + 42);
    }
    *uint64_t v18 = v54;
LABEL_72:
    *uint64_t v20 = v59 + *((unsigned int *)v20 - 1);
    uint64_t v55 = (*(uint64_t (**)(WAVEAudioFile *, _DWORD *, int *))(*(void *)this + 776))(this, v10, &v61);
    if (v55)
    {
      uint64_t v14 = v55;
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        return v14;
      }
      *(_DWORD *)AudioFormatInfo buf = 136315394;
      *(void *)&uint8_t buf[4] = "WAVEAudioFile.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2016;
      int v25 = MEMORY[0x1E4F14500];
      unsigned int v26 = "%25s:%-5d  Update to data chunk failed";
    }
    else
    {
      *(void *)(v4 + 24 * v16 + 8) = v57 + *(unsigned int *)(v4 + 24 * v16 + 4);
      uint64_t v14 = (*(uint64_t (**)(WAVEAudioFile *, int *, int *))(*(void *)this + 776))(this, v18, &v61);
      if (!v14 || !os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        return v14;
      }
      *(_DWORD *)AudioFormatInfo buf = 136315394;
      *(void *)&uint8_t buf[4] = "WAVEAudioFile.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2021;
      int v25 = MEMORY[0x1E4F14500];
      unsigned int v26 = "%25s:%-5d  Update to RIFF/RF64/BW64 chunk failed";
    }
LABEL_24:
    BOOL v28 = buf;
LABEL_25:
    _os_log_impl(&dword_18FEC0000, v25, OS_LOG_TYPE_ERROR, v26, v28, 0x12u);
    return v14;
  }
  uint64_t v14 = v40;
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)int v64 = 136315394;
    *(void *)&v64[4] = "WAVEAudioFile.cpp";
    *(_WORD *)&v64[12] = 1024;
    *(_DWORD *)&v64[14] = 1945;
    int v25 = MEMORY[0x1E4F14500];
    unsigned int v26 = "%25s:%-5d  Couldn't update the ds64 chunk with new size";
    BOOL v28 = v64;
    goto LABEL_25;
  }
  return v14;
}

uint64_t WAVEAudioFile::UpdateDataFormat(WAVEAudioFile *this, const AudioStreamBasicDescription *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (*(uint64_t (**)(WAVEAudioFile *))(*(void *)this + 176))(this);
  if (v4) {
    return v4;
  }
  uint64_t v4 = 1718449215;
  int v6 = *((_DWORD *)this + 10);
  UInt32 mBitsPerChannel = a2->mBitsPerChannel;
  v15[1] = a2->mChannelsPerFrame;
  unsigned int mSampleRate = a2->mSampleRate;
  __int16 v19 = mBitsPerChannel;
  __int16 v18 = v6;
  unsigned int v16 = mSampleRate;
  int v17 = v6 * mSampleRate;
  FormatTagFrosigned int mFormatID = AudioFormat_GetFormatTagFromFormatID(a2->mFormatID, a2->mFormatFlags);
  if (!FormatTagFromFormatID)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return v4;
    }
    *(_DWORD *)AudioFormatInfo buf = 136315394;
    int v25 = "WAVEAudioFile.cpp";
    __int16 v26 = 1024;
    int v27 = 2090;
    unint64_t v12 = MEMORY[0x1E4F14500];
    unint64_t v13 = "%25s:%-5d  Unsupported data format file";
LABEL_17:
    _os_log_impl(&dword_18FEC0000, v12, OS_LOG_TYPE_ERROR, v13, buf, 0x12u);
    return v4;
  }
  int v10 = *((_DWORD *)this + 114);
  if (v10)
  {
    v15[0] = -2;
    int v22 = v10;
    long long v23 = waveFormatExTagUUID;
    LOWORD(v23) = FormatTagFromFormatID;
    __int16 v21 = mBitsPerChannel;
    __int16 v20 = 22;
    unint64_t v11 = 40;
  }
  else
  {
    v15[0] = FormatTagFromFormatID;
    if (FormatTagFromFormatID != 1) {
      __int16 v21 = 0;
    }
    unint64_t v11 = 16;
  }
  unsigned int v14 = ChunkyAudioFile::ReplaceChunk(this, 1718449184, 0, v11, v15);
  if (v14 == -1) {
    uint64_t v4 = 1685348671;
  }
  else {
    uint64_t v4 = v14;
  }
  if (v4)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return v4;
    }
    *(_DWORD *)AudioFormatInfo buf = 136315394;
    int v25 = "WAVEAudioFile.cpp";
    __int16 v26 = 1024;
    int v27 = 2122;
    unint64_t v12 = MEMORY[0x1E4F14500];
    unint64_t v13 = "%25s:%-5d  FSWrite Failed";
    goto LABEL_17;
  }
  if (*((_DWORD *)this + 114) && !*((_DWORD *)this + 20)) {
    return (*(uint64_t (**)(WAVEAudioFile *))(*(void *)this + 64))(this);
  }
  else {
    return 0;
  }
}

uint64_t AudioFormat_GetFormatTagFromFormatID(int a1, char a2)
{
  if (a1 <= 1836253185)
  {
    switch(a1)
    {
      case 1096107074:
        if (IsACELPnetSupported(void)::sCheckForACELPnetOnce[0] != -1) {
          dispatch_once(IsACELPnetSupported(void)::sCheckForACELPnetOnce, &__block_literal_global_12154);
        }
        if (IsACELPnetSupported(void)::isACELPnetSupported) {
          return 304;
        }
        return 0;
      case 1634492791:
        return 6;
      case 1819304813:
        if (a2) {
          return 3;
        }
        else {
          return 1;
        }
      default:
        return 0;
    }
  }
  else
  {
    if (a1 <= 1836253232)
    {
      if (a1 == 1836253186) {
        return 2;
      }
      if (a1 == 1836253201) {
        return 17;
      }
      return 0;
    }
    if (a1 != 1836253233)
    {
      if (a1 == 1970037111) {
        return 7;
      }
      return 0;
    }
    return 49;
  }
}

uint64_t WAVEAudioFile::SetProperty(WAVEAudioFile *this, int a2, unsigned int a3, uint64_t *a4)
{
  if (a2 == 1714828386)
  {
    uint64_t result = 1886681407;
    if ((*((unsigned char *)this + 100) & 2) != 0)
    {
      int v11 = *((_DWORD *)this + 21);
      if (v11 == 1380333108 || v11 == 1113011764)
      {
        if (a3 < 4) {
          return 561211770;
        }
        *((unsigned char *)this + 51std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = *(_DWORD *)a4 != 0;
        unint64_t v13 = *(uint64_t (**)(WAVEAudioFile *))(*(void *)this + 216);
        return v13(this);
      }
    }
  }
  else
  {
    if (a2 == 1969321067)
    {
      if ((*((unsigned char *)this + 100) & 2) != 0) {
        return 0;
      }
      if (a3 >= 4)
      {
        int v5 = *(_DWORD *)a4;
        unsigned int v6 = *((_DWORD *)this + 117);
        if (*(_DWORD *)a4 >= v6) {
          return 2003334207;
        }
        if (v5 != *((_DWORD *)this + 118))
        {
          long long v7 = *(_OWORD *)((char *)this + 24);
          long long v8 = *(_OWORD *)((char *)this + 40);
          *(_OWORD *)&v18.unsigned int mSampleRate = v7;
          *(_OWORD *)&v18.mBytesPerPacket = v8;
          *(void *)&v18.UInt32 mBitsPerChannel = *((void *)this + 7);
          if (v6 >= 2)
          {
            if (v5)
            {
              UInt32 v9 = 2;
            }
            else
            {
              LODWORD(v7) = *((_DWORD *)this + 114) & 0x3FFFF;
              uint8x8_t v14 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v7);
              v14.i16[0] = vaddlv_u8(v14);
              UInt32 v9 = v14.i32[0];
            }
            v18.mBytesPerFrame = 0;
            v18.UInt32 mChannelsPerFrame = v9;
            v18.mBytesPerPacket = 0;
            if (!FillOutAudioDescription(&v18, 0, 0, 0)) {
              (*(void (**)(WAVEAudioFile *, AudioStreamBasicDescription *))(*(void *)this + 176))(this, &v18);
            }
            unsigned int v16 = *((_DWORD *)this + 119);
            if (v5) {
              int v17 = (v16 + 2 * (v5 - *((_DWORD *)this + 117))) * (*((_DWORD *)this + 14) >> 3);
            }
            else {
              int v17 = 0;
            }
            *((_DWORD *)this + 124) = v17;
            if (v16)
            {
              LODWORD(v15) = *((_DWORD *)this + 13);
              *((double *)this + 61) = (double)v15 / (double)v16;
            }
            *((_DWORD *)this + 118) = v5;
          }
        }
        return 0;
      }
      return 561211770;
    }
    return ChunkyAudioFile::SetProperty(this, a2, a3, a4);
  }
  return result;
}

uint64_t WAVEAudioFile::GetProperty(WAVEAudioFile *this, int a2, unsigned int *a3, uint64_t *a4)
{
  uint64_t result = 561211770;
  if (!a3 || !a4) {
    return result;
  }
  if (a2 <= 1768174446)
  {
    if (a2 != 1635017588)
    {
      if (a2 == 1714828386)
      {
        uint64_t result = 1886681407;
        if ((*((unsigned char *)this + 100) & 2) != 0)
        {
          int v6 = *((_DWORD *)this + 21);
          if (v6 == 1380333108 || v6 == 1113011764)
          {
            uint64_t result = 561211770;
            if (*a3 >= 4)
            {
              uint64_t result = 0;
              *(_DWORD *)a4 = *((unsigned __int8 *)this + 516);
              unsigned int v7 = 4;
LABEL_22:
              *a3 = v7;
              return result;
            }
          }
        }
        return result;
      }
      return ChunkyAudioFile::GetProperty(this, a2, a3, a4);
    }
    if (*a3 < 4) {
      return result;
    }
    uint64_t result = 0;
    int v8 = *((_DWORD *)this + 117);
LABEL_17:
    *(_DWORD *)a4 = v8;
    return result;
  }
  if (a2 != 1768174447)
  {
    if (a2 != 1969321067) {
      return ChunkyAudioFile::GetProperty(this, a2, a3, a4);
    }
    if (*a3 < 4) {
      return result;
    }
    uint64_t result = 0;
    int v8 = *((_DWORD *)this + 118);
    goto LABEL_17;
  }
  uint64_t result = 1886681407;
  uint64_t v9 = *((void *)this + 66);
  if (v9)
  {
    if ((*((unsigned char *)this + 100) & 2) == 0)
    {
      uint64_t result = 561211770;
      if (*a3 >= 8)
      {
        uint64_t result = 0;
        *a4 = v9;
        unsigned int v7 = 8;
        goto LABEL_22;
      }
    }
  }
  return result;
}

uint64_t WAVEAudioFile::GetPropertyInfo(WAVEAudioFile *this, int a2, unsigned int *a3, unsigned int *a4)
{
  if (a2 > 1768174446)
  {
    if (a2 != 1768174447)
    {
      if (a2 == 1969321067)
      {
LABEL_10:
        if (a3) {
          *a3 = 4;
        }
        if (a4)
        {
          uint64_t result = 0;
          *a4 = 1;
          return result;
        }
        return 0;
      }
      return ChunkyAudioFile::GetPropertyInfo(this, a2, a3, a4);
    }
    if (a3) {
      *a3 = 8;
    }
    if (!a4) {
      return 0;
    }
LABEL_21:
    uint64_t result = 0;
    *a4 = 0;
    return result;
  }
  if (a2 == 1635017588)
  {
    if (a3) {
      *a3 = 4;
    }
    if (!a4) {
      return 0;
    }
    goto LABEL_21;
  }
  if (a2 != 1714828386) {
    return ChunkyAudioFile::GetPropertyInfo(this, a2, a3, a4);
  }
  uint64_t result = 1886681407;
  if ((*((unsigned char *)this + 100) & 2) != 0)
  {
    int v6 = *((_DWORD *)this + 21);
    if (v6 == 1380333108 || v6 == 1113011764) {
      goto LABEL_10;
    }
  }
  return result;
}

uint64_t WAVEAudioFile::ReadPackets(WAVEAudioFile *this, uint64_t a2, unsigned int *a3, AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, char *a7)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (!a7)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      unsigned int v32 = 136315394;
      unint64_t v33 = "WAVEAudioFile.cpp";
      __int16 v34 = 1024;
      int v35 = 3191;
      __int16 v19 = MEMORY[0x1E4F14500];
      __int16 v20 = "%25s:%-5d  NULL buffer";
      goto LABEL_18;
    }
    return 4294967246;
  }
  if (!a6 || (int v8 = *a6) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      unsigned int v32 = 136315394;
      unint64_t v33 = "WAVEAudioFile.cpp";
      __int16 v34 = 1024;
      int v35 = 3193;
      __int16 v19 = MEMORY[0x1E4F14500];
      __int16 v20 = "%25s:%-5d  invalid num packets parameter";
LABEL_18:
      _os_log_impl(&dword_18FEC0000, v19, OS_LOG_TYPE_ERROR, v20, (uint8_t *)&v32, 0x12u);
      return 4294967246;
    }
    return 4294967246;
  }
  if (*((_DWORD *)this + 117) == 1)
  {
    uint64_t v13 = *((unsigned int *)this + 10);
    unsigned int v32 = v13 * v8;
    uint64_t v14 = (*(uint64_t (**)(WAVEAudioFile *, uint64_t, uint64_t, unsigned int *, char *))(*(void *)this + 72))(this, a2, v13 * a5, &v32, a7);
    uint64_t v15 = v14;
    if (!v14 || v14 == -39)
    {
      int v16 = v32;
      unsigned int v17 = *((_DWORD *)this + 10);
      if (v32 != v17 * *a6)
      {
        int v18 = v32 / v17;
        *a6 = v32 / v17;
        int v16 = *((_DWORD *)this + 10) * v18;
      }
      if (a3) {
        *a3 = v16;
      }
      if (v14 == -39) {
        return 0;
      }
      else {
        return v14;
      }
    }
    return v15;
  }
  uint64_t v22 = *((unsigned int *)this + 120);
  size_t v23 = (v22 * v8);
  unsigned int v32 = v22 * v8;
  uint64_t v24 = v22 * a5;
  int v25 = (void *)*((void *)this + 63);
  if (v25)
  {
    if (*((_DWORD *)this + 128) >= v23) {
      goto LABEL_26;
    }
    free(*((void **)this + 63));
    size_t v23 = *((_DWORD *)this + 120) * *a6;
    malloc_type_id_t v26 = 1984237655;
  }
  else
  {
    malloc_type_id_t v26 = 3874801137;
  }
  int v25 = malloc_type_calloc(v23, 1uLL, v26);
  *((void *)this + 63) = v25;
  *((_DWORD *)this + 128) = *((_DWORD *)this + 120) * *a6;
LABEL_26:
  uint64_t v27 = (*(uint64_t (**)(WAVEAudioFile *, uint64_t, uint64_t, unsigned int *, void *))(*(void *)this + 72))(this, a2, v24, &v32, v25);
  uint64_t v15 = v27;
  if (!v27 || v27 == -39)
  {
    unsigned int v28 = v32;
    unsigned int v29 = *((_DWORD *)this + 120);
    if (v32 != v29 * *a6)
    {
      int v30 = v32 / v29;
      *a6 = v32 / v29;
      unsigned int v28 = *((_DWORD *)this + 120) * v30;
      unsigned int v32 = v28;
    }
    if (a3) {
      *a3 = (*((double *)this + 61) * (double)v28);
    }
    if (v27 == -39) {
      uint64_t v15 = 0;
    }
    else {
      uint64_t v15 = v27;
    }
  }
  if (*a6)
  {
    unsigned int v31 = 0;
    do
    {
      memcpy(&a7[*((_DWORD *)this + 10) * v31], (const void *)(*((void *)this + 63) + *((unsigned int *)this + 124) + *((_DWORD *)this + 120) * v31), *((unsigned int *)this + 10));
      ++v31;
    }
    while (v31 < *a6);
  }
  return v15;
}

uint64_t WAVEAudioFile::ReadBytes(WAVEAudioFile *this, int a2, uint64_t a3, unsigned int *a4, void *a5)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a4 && a5)
  {
    uint64_t v5 = *((void *)this + 1);
    if (v5 <= a3)
    {
      *a4 = 0;
      return 4294967257;
    }
    else
    {
      uint64_t v6 = *((void *)this + 9);
      uint64_t v7 = v6 + a3;
      uint64_t v8 = v7 + *a4;
      uint64_t v9 = v5 + v6;
      if (v8 > v5 + v6) {
        *a4 = v9 - v7;
      }
      LODWORD(result) = (*(uint64_t (**)(void, void))(**((void **)this + 13) + 48))(*((void *)this + 13), 32 * (a2 == 0));
      if (result) {
        BOOL v11 = 1;
      }
      else {
        BOOL v11 = v8 <= v9;
      }
      if (v11) {
        return result;
      }
      else {
        return 4294967257;
      }
    }
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315394;
      uint64_t v13 = "WAVEAudioFile.cpp";
      __int16 v14 = 1024;
      int v15 = 3282;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  invalid num bytes parameter", (uint8_t *)&v12, 0x12u);
    }
    return 4294967246;
  }
}

uint64_t WAVEAudioFile::InitializeDataSource(WAVEAudioFile *this, const AudioStreamBasicDescription *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (IsSupportedWAVEFormat(a2->mFormatID))
  {
    uint64_t v3 = WAVEAudioFile::InitializeWAVEChunks(this);
    if (v3)
    {
      uint64_t v4 = v3;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        int v8 = 136315394;
        uint64_t v9 = "WAVEAudioFile.cpp";
        __int16 v10 = 1024;
        int v11 = 1491;
        uint64_t v5 = MEMORY[0x1E4F14500];
        uint64_t v6 = "%25s:%-5d  InitializeWAVEChunks";
LABEL_7:
        _os_log_impl(&dword_18FEC0000, v5, OS_LOG_TYPE_ERROR, v6, (uint8_t *)&v8, 0x12u);
      }
    }
    else
    {
      uint64_t v4 = WAVEAudioFile::ParseAudioFile(this);
      if (v4 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        int v8 = 136315394;
        uint64_t v9 = "WAVEAudioFile.cpp";
        __int16 v10 = 1024;
        int v11 = 1494;
        uint64_t v5 = MEMORY[0x1E4F14500];
        uint64_t v6 = "%25s:%-5d  ParseAudioFile";
        goto LABEL_7;
      }
    }
  }
  else
  {
    uint64_t v4 = 1718449215;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      uint64_t v9 = "WAVEAudioFile.cpp";
      __int16 v10 = 1024;
      int v11 = 1488;
      uint64_t v5 = MEMORY[0x1E4F14500];
      uint64_t v6 = "%25s:%-5d  Unsupported WAVE format";
      goto LABEL_7;
    }
  }
  return v4;
}

uint64_t IsSupportedWAVEFormat(int a1)
{
  uint64_t result = 1;
  if (a1 <= 1819304812)
  {
    if (a1 != 1096107074)
    {
      int v3 = 1634492791;
LABEL_7:
      if (a1 != v3) {
        return 0;
      }
      return result;
    }
    if (IsACELPnetSupported(void)::sCheckForACELPnetOnce[0] != -1) {
      dispatch_once(IsACELPnetSupported(void)::sCheckForACELPnetOnce, &__block_literal_global_12154);
    }
    return IsACELPnetSupported(void)::isACELPnetSupported;
  }
  else if (a1 != 1819304813 && a1 != 1836253233)
  {
    int v3 = 1970037111;
    goto LABEL_7;
  }
  return result;
}

uint64_t WAVEAudioFile::InitializeWAVEChunks(WAVEAudioFile *this)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  int v2 = *((_DWORD *)this + 21);
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  int v48 = 0;
  memset(v47, 0, sizeof(v47));
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  int v3 = (*(uint64_t (**)(void))(*(void *)this + 800))();
  int v4 = *((_DWORD *)this + 10);
  unsigned int v5 = *((_DWORD *)this + 11);
  if (v2 == 1463170150)
  {
    *((void *)this + 22) = 0x1800000028;
    *((_DWORD *)this + 4std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 24;
  }
  int v6 = *((_DWORD *)this + 8);
  int v7 = *((_DWORD *)this + 9);
  double v8 = *((double *)this + 3);
  int v9 = *((_DWORD *)this + 13);
  int v10 = *((_DWORD *)this + 14);
  if (v3)
  {
    *(void *)&v47[0] = 0x1C4A554E4BLL;
    unsigned int v11 = 1247104587;
  }
  else
  {
    unsigned int v11 = 0;
  }
  memset(v43, 0, sizeof(v43));
  uint64_t v42 = 0x10666D7420;
  *(_WORD *)&v43[2] = v9;
  *(_DWORD *)&v43[4] = v8;
  *(_WORD *)&v43[14] = v10;
  *(_WORD *)&unsigned char v43[12] = v4;
  if (v5) {
    *(_DWORD *)&v43[8] = v4 * v8 / v5;
  }
  uint64_t v35 = 0;
  FormatTagFrosigned int mFormatID = AudioFormat_GetFormatTagFromFormatID(v6, v7);
  if (FormatTagFromFormatID)
  {
    int v13 = *((_DWORD *)this + 114);
    if (v13)
    {
      *(_WORD *)uint64_t v43 = -2;
      *(_DWORD *)&v43[20] = v13;
      *(_OWORD *)&v43[24] = waveFormatExTagUUID;
      *(_WORD *)&v43[24] = FormatTagFromFormatID;
      *(_WORD *)&v43[18] = v10;
      *(_WORD *)&v43[16] = 22;
      uint64_t v14 = 40;
      HIDWORD(v42) = 40;
    }
    else
    {
      *(_WORD *)uint64_t v43 = FormatTagFromFormatID;
      if (FormatTagFromFormatID != 1) {
        *(_WORD *)&v43[18] = 0;
      }
      uint64_t v14 = 16;
    }
    uint64_t v19 = *((unsigned int *)this + 44);
    uint64_t v18 = *((unsigned int *)this + 45);
    LODWORD(v44) = 1718449184;
    HIDWORD(v44) = v18;
    if (v3) {
      v19 += 36;
    }
    uint64_t v45 = (v14 + v18);
    uint64_t v46 = v19;
    LODWORD(v39) = 1684108385;
    HIDWORD(v39) = v18;
    uint64_t v20 = v19 + v45;
    uint64_t v40 = v18;
    uint64_t v41 = v19 + v45;
    if (*((unsigned char *)this + 138))
    {
      uint64_t v41 = (4096 - *((_DWORD *)this + 46));
      LODWORD(v3std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 1179405394;
      HIDWORD(v3std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v18;
      uint64_t v21 = v41 - v20;
      uint64_t v37 = v41 - v20;
      uint64_t v38 = v19 + (v14 + v18);
      uint64_t v20 = v41;
    }
    else
    {
      uint64_t v21 = 0;
    }
    LODWORD(v49) = 1380533830;
    HIDWORD(v49) = v18;
    uint64_t v50 = v20 + v18;
    uint64_t v51 = 0;
    uint64_t v22 = (*(uint64_t (**)(WAVEAudioFile *, uint64_t *, char *))(*(void *)this + 776))(this, &v49, (char *)&v35 + 4);
    if (v22)
    {
      uint64_t v15 = v22;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioFormatInfo buf = 136315394;
        uint64_t v53 = "WAVEAudioFile.cpp";
        __int16 v54 = 1024;
        int v55 = 1387;
        uint64_t v16 = MEMORY[0x1E4F14500];
        unsigned int v17 = "%25s:%-5d  WriteChunkHeader for RIFF chunk Failed";
        goto LABEL_41;
      }
    }
    else
    {
      if (*((_DWORD *)this + 21) == 1463170150)
      {
        uint64_t v23 = 16;
        uint64_t v24 = (uint64_t *)&unk_1901DC414;
      }
      else
      {
        LODWORD(v35) = 1163280727;
        uint64_t v23 = 4;
        uint64_t v24 = &v35;
      }
      uint64_t v25 = HIDWORD(v35);
      uint64_t v26 = (*(uint64_t (**)(void, void, void, uint64_t, uint64_t *, char *))(**((void **)this + 13)
                                                                                          + 56))(*((void *)this + 13), 0, *((unsigned int *)this + 45), v23, v24, (char *)&v35 + 4);
      if (!v26)
      {
        uint64_t v27 = HIDWORD(v35) + v25;
        if (v3)
        {
          LODWORD(v47[0]) = bswap32(v11);
          uint64_t v28 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, _OWORD *, char *))(**((void **)this + 13)
                                                                                              + 56))(*((void *)this + 13), 0, v27, 36, v47, (char *)&v35 + 4);
          if (v28)
          {
            uint64_t v15 = v28;
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioFormatInfo buf = 136315394;
              uint64_t v53 = "WAVEAudioFile.cpp";
              __int16 v54 = 1024;
              int v55 = 1410;
              uint64_t v16 = MEMORY[0x1E4F14500];
              unsigned int v17 = "%25s:%-5d  FSWrite Failed";
              goto LABEL_41;
            }
            return v15;
          }
          v27 += HIDWORD(v35);
        }
        uint64_t v29 = (*(uint64_t (**)(WAVEAudioFile *, uint64_t *, char *))(*(void *)this + 776))(this, &v44, (char *)&v35 + 4);
        if (v29)
        {
          uint64_t v15 = v29;
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioFormatInfo buf = 136315394;
            uint64_t v53 = "WAVEAudioFile.cpp";
            __int16 v54 = 1024;
            int v55 = 1415;
            uint64_t v16 = MEMORY[0x1E4F14500];
            unsigned int v17 = "%25s:%-5d  WriteChunkHeader for fmt chunk Failed";
            goto LABEL_41;
          }
        }
        else
        {
          uint64_t v30 = v27 + HIDWORD(v35);
          LODWORD(v42) = 544501094;
          uint64_t v31 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, unsigned char *, char *))(**((void **)this + 13)
                                                                                             + 56))(*((void *)this + 13), 0, v30, v14, v43, (char *)&v35 + 4);
          if (v31)
          {
            uint64_t v15 = v31;
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioFormatInfo buf = 136315394;
              uint64_t v53 = "WAVEAudioFile.cpp";
              __int16 v54 = 1024;
              int v55 = 1424;
              uint64_t v16 = MEMORY[0x1E4F14500];
              unsigned int v17 = "%25s:%-5d  FSWrite Failed";
              goto LABEL_41;
            }
          }
          else
          {
            if (v21)
            {
              uint64_t v33 = (*(uint64_t (**)(WAVEAudioFile *, uint64_t *, char *))(*(void *)this + 776))(this, &v36, (char *)&v35 + 4);
              if (v33)
              {
                uint64_t v15 = v33;
                if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                  return v15;
                }
                *(_DWORD *)AudioFormatInfo buf = 136315394;
                uint64_t v53 = "WAVEAudioFile.cpp";
                __int16 v54 = 1024;
                int v55 = 1429;
                uint64_t v16 = MEMORY[0x1E4F14500];
                unsigned int v17 = "%25s:%-5d  WriteChunkHeader for filler chunk Failed";
                goto LABEL_41;
              }
              uint64_t v34 = v37 + v38;
              (*(void (**)(void, uint64_t))(**((void **)this + 13) + 32))(*((void *)this + 13), v37 + v38);
            }
            else
            {
              uint64_t v34 = v30 + HIDWORD(v35);
            }
            uint64_t v15 = (*(uint64_t (**)(WAVEAudioFile *, uint64_t *, char *))(*(void *)this + 776))(this, &v39, (char *)&v35 + 4);
            if (!v15)
            {
              *((void *)this + 9) = v34 + HIDWORD(v35);
              *((_DWORD *)this + 20) = 1;
              return v15;
            }
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioFormatInfo buf = 136315394;
              uint64_t v53 = "WAVEAudioFile.cpp";
              __int16 v54 = 1024;
              int v55 = 1437;
              uint64_t v16 = MEMORY[0x1E4F14500];
              unsigned int v17 = "%25s:%-5d  WriteChunkHeader for data chunk Failed";
              goto LABEL_41;
            }
          }
        }
        return v15;
      }
      uint64_t v15 = v26;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioFormatInfo buf = 136315394;
        uint64_t v53 = "WAVEAudioFile.cpp";
        __int16 v54 = 1024;
        int v55 = 1403;
        uint64_t v16 = MEMORY[0x1E4F14500];
        unsigned int v17 = "%25s:%-5d  WriteBytes for RIFF identifier failed";
        goto LABEL_41;
      }
    }
  }
  else
  {
    uint64_t v15 = 1718449215;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioFormatInfo buf = 136315394;
      uint64_t v53 = "WAVEAudioFile.cpp";
      __int16 v54 = 1024;
      int v55 = 1327;
      uint64_t v16 = MEMORY[0x1E4F14500];
      unsigned int v17 = "%25s:%-5d  Unsupported data format file";
LABEL_41:
      _os_log_impl(&dword_18FEC0000, v16, OS_LOG_TYPE_ERROR, v17, buf, 0x12u);
    }
  }
  return v15;
}

uint64_t WAVEAudioFile::ParseAudioFile(WAVEAudioFile *this)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  *((void *)this + 9) = 0;
  (*(void (**)(WAVEAudioFile *, void))(*(void *)this + 232))(this, 0);
  uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
  if ((*(unsigned int (**)(void, uint64_t *))(**((void **)this + 13) + 24))(*((void *)this + 13), &v14))
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
LABEL_5:
      unsigned int v4 = 0;
      goto LABEL_6;
    }
    unsigned int buf = 136315394;
    buf_4 = "WAVEAudioFile.cpp";
    __int16 v22 = 1024;
    int v23 = 1510;
    int v2 = MEMORY[0x1E4F14500];
    int v3 = "%25s:%-5d  GetSize Failed";
LABEL_4:
    _os_log_impl(&dword_18FEC0000, v2, OS_LOG_TYPE_ERROR, v3, (uint8_t *)&buf, 0x12u);
    goto LABEL_5;
  }
  int v15 = 0;
  int v8 = (*(uint64_t (**)(void, void, void, uint64_t, size_t *, int *))(**((void **)this + 13) + 48))(*((void *)this + 13), 0, 0, 8, &size, &v15);
  if (v8)
  {
    if (v8 == -39)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_5;
      }
      unsigned int buf = 136315394;
      buf_4 = "WAVEAudioFile.cpp";
      __int16 v22 = 1024;
      int v23 = 1514;
      int v2 = MEMORY[0x1E4F14500];
      int v3 = "%25s:%-5d  ";
    }
    else
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_5;
      }
      unsigned int buf = 136315394;
      buf_4 = "WAVEAudioFile.cpp";
      __int16 v22 = 1024;
      int v23 = 1515;
      int v2 = MEMORY[0x1E4F14500];
      int v3 = "%25s:%-5d  ReadBytes Failed";
    }
    goto LABEL_4;
  }
  if (size == 84)
  {
    if (BYTE1(size) != 65 || BYTE2(size) != 71) {
      goto LABEL_5;
    }
    unsigned int v4 = 128;
  }
  else
  {
    if (size != 73 || BYTE1(size) != 68 || BYTE2(size) != 51) {
      goto LABEL_5;
    }
    int v15 = 0;
    if ((*(unsigned int (**)(void, void, void, uint64_t, _DWORD *, int *))(**((void **)this + 13)
                                                                                          + 48))(*((void *)this + 13), 0, 0, 10, v17, &v15))
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_5;
      }
      unsigned int buf = 136315394;
      buf_4 = "WAVEAudioFile.cpp";
      __int16 v22 = 1024;
      int v23 = 1525;
      int v2 = MEMORY[0x1E4F14500];
      int v3 = "%25s:%-5d  ReadBytes Failed";
      goto LABEL_4;
    }
    unsigned int v4 = ID3Size(0xAu, (const unsigned __int8 *)v17, (int *)&buf);
  }
LABEL_6:
  uint64_t v5 = *((void *)this + 13);
  size_t size = 0x7FFFFFFFFFFFFFFFLL;
  if (v5)
  {
    if ((*(unsigned int (**)(uint64_t, size_t *))(*(void *)v5 + 24))(v5, &size))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        v17[0] = 136315394;
        *(void *)&v17[1] = "WAVEAudioFile.cpp";
        __int16 v18 = 1024;
        int v19 = 3323;
        int v6 = MEMORY[0x1E4F14500];
        int v7 = "%25s:%-5d  GetSize Failed";
LABEL_16:
        _os_log_impl(&dword_18FEC0000, v6, OS_LOG_TYPE_ERROR, v7, (uint8_t *)v17, 0x12u);
      }
    }
    else
    {
      LODWORD(v14) = 48;
      int v10 = (*(uint64_t (**)(uint64_t, void, void, uint64_t, unsigned int *, uint64_t *))(*(void *)v5 + 48))(v5, 0, v4, 48, &buf, &v14);
      if (v10 == -39 || v10 == 0)
      {
        int v12 = bswap32(buf);
        if (v12 > 1380533829)
        {
          if (v12 == 1919510118) {
            operator new();
          }
          if (v12 == 1380533830) {
            operator new();
          }
        }
        else if (v12 == 1113011764 || v12 == 1380333108)
        {
          operator new();
        }
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          v17[0] = 136315394;
          *(void *)&v17[1] = "WAVEAudioFile.cpp";
          __int16 v18 = 1024;
          int v19 = 3342;
          int v6 = MEMORY[0x1E4F14500];
          int v7 = "%25s:%-5d  File identifier not recognized";
          goto LABEL_16;
        }
      }
      else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        v17[0] = 136315394;
        *(void *)&v17[1] = "WAVEAudioFile.cpp";
        __int16 v18 = 1024;
        int v19 = 3327;
        int v6 = MEMORY[0x1E4F14500];
        int v7 = "%25s:%-5d  ReadBytes Failed";
        goto LABEL_16;
      }
    }
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    v17[0] = 136315394;
    *(void *)&v17[1] = "WAVEAudioFile.cpp";
    __int16 v18 = 1024;
    int v19 = 3320;
    int v6 = MEMORY[0x1E4F14500];
    int v7 = "%25s:%-5d  No data source";
    goto LABEL_16;
  }
  return 1685348671;
}

void sub_19014C1C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35)
{
  uint64_t v37 = *(void **)(v35 - 120);
  if (v37) {
    free(v37);
  }
  _Unwind_Resume(exception_object);
}

void CADeprecated::CAAutoFree<char>::allocBytes(void **a1, size_t size, int a3)
{
  int v6 = *a1;
  if (v6)
  {
    free(v6);
    *a1 = 0;
  }
  if (!a3)
  {
    int v8 = malloc_type_malloc(size, 0x7C51E058uLL);
    if (v8) {
      goto LABEL_7;
    }
LABEL_8:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    int v10 = std::bad_alloc::bad_alloc(exception);
  }
  int v7 = malloc_type_malloc(size, 0x2C8E6D5CuLL);
  if (!v7) {
    goto LABEL_8;
  }
  int v8 = v7;
  bzero(v7, size);
LABEL_7:
  *a1 = v8;
}

uint64_t FillDescriptionFromWAVEFormat(uint64_t a1, UInt32 a2, void *a3, uint64_t a4, int a5)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0u;
  int v10 = *(unsigned __int16 *)(a4 + 8);
  if (v10 == 65534)
  {
    if (*(_DWORD *)(a4 + 4) < 0x28u || *(unsigned __int16 *)(a4 + 24) <= 0x15u)
    {
      uint64_t v12 = 1685348671;
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        return v12;
      }
      *(_DWORD *)unsigned int buf = 136315394;
      uint64_t v25 = "WAVEAudioFile.cpp";
      __int16 v26 = 1024;
      int v27 = 852;
      int v13 = MEMORY[0x1E4F14500];
      uint64_t v14 = "%25s:%-5d  Invalid data format";
LABEL_26:
      _os_log_impl(&dword_18FEC0000, v13, OS_LOG_TYPE_ERROR, v14, buf, 0x12u);
      return v12;
    }
    if (*(void *)(a4 + 34) != 0x80001000000000 || *(void *)(a4 + 40) != 0x719B3800AA000080) {
      return 1718449215;
    }
    int v10 = *(unsigned __int16 *)(a4 + 32);
  }
  uint64_t v12 = 1718449215;
  if (!v10) {
    return v12;
  }
  BOOL v23 = 0;
  int AudioFormatIDFromFormatTag = AudioFormat_GetAudioFormatIDFromFormatTag((__int16)v10, &v23);
  *(_DWORD *)(a1 + 8) = AudioFormatIDFromFormatTag;
  if (AudioFormatIDFromFormatTag == 1061109567)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return v12;
    }
    *(_DWORD *)unsigned int buf = 136315394;
    uint64_t v25 = "WAVEAudioFile.cpp";
    __int16 v26 = 1024;
    int v27 = 870;
    int v13 = MEMORY[0x1E4F14500];
    uint64_t v14 = "%25s:%-5d  Unsupported data format file";
    goto LABEL_26;
  }
  LODWORD(v1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = *(_DWORD *)(a4 + 12);
  *(double *)a1 = (double)v16;
  if (*(__int16 *)(a4 + 8) == -2 && (int v17 = *(_DWORD *)(a4 + 28), v17 >= 1))
  {
    if (a5)
    {
      int v18 = 2;
    }
    else
    {
      if ((v17 & 0x3FFFF) != 0) {
        int v20 = -1;
      }
      else {
        int v20 = 0;
      }
      if ((v17 & 0x3FFFF) != 0) {
        int v21 = 2147483646;
      }
      else {
        int v21 = 0x7FFFFFFF;
      }
      if ((~v17 & 0x1800000) == 0) {
        int v20 = v21;
      }
      if ((~v17 & 0x6000000) != 0) {
        int v22 = 0;
      }
      else {
        int v22 = -1;
      }
      int v18 = *(unsigned __int16 *)(a4 + 10) + 2 * (((__PAIR64__(v22, ~v17 & 0x60000000) - 1) >> 32) + v20) + 2;
    }
  }
  else
  {
    int v18 = *(unsigned __int16 *)(a4 + 10);
  }
  *(_DWORD *)(a1 + 28) = v18;
  *(_DWORD *)(a1 + 32) = *(unsigned __int16 *)(a4 + 22);
  if (AudioFormatIDFromFormatTag == 1096107074) {
    *(_DWORD *)(a1 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = *(unsigned __int16 *)(a4 + 20);
  }
  uint64_t v12 = FillOutAudioDescription((AudioStreamBasicDescription *)a1, a2, a3, v23);
  if (v12 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)unsigned int buf = 136315394;
    uint64_t v25 = "WAVEAudioFile.cpp";
    __int16 v26 = 1024;
    int v27 = 890;
    int v13 = MEMORY[0x1E4F14500];
    uint64_t v14 = "%25s:%-5d  Couldn't get info about data format";
    goto LABEL_26;
  }
  return v12;
}

uint64_t WAVEID3CallbackProc(void *a1, int a2, unsigned int a3, int a4, void **a5, unsigned int *a6)
{
  if (a2 == 1)
  {
    uint64_t v14 = (void *)a1[67];
    if (v14) {
      free(v14);
    }
    uint64_t result = 0;
    a1[67] = 0;
  }
  else
  {
    if (a2) {
      return 0;
    }
    LODWORD(v9) = a4;
    unint64_t v25 = 0;
    (*(void (**)(void, unint64_t *))(*(void *)a1[13] + 24))(a1[13], &v25);
    uint64_t v11 = a1[66];
    unint64_t v12 = v25;
    if (v9 + (unint64_t)a3 + v11 > v25) {
      return 4294967272;
    }
    if (v9 <= 0x400) {
      LODWORD(v9) = 1024;
    }
    uint64_t v15 = a1[65];
    if (v15)
    {
      int v23 = 4;
      unsigned int v24 = 0;
      uint64_t result = ID3ParserGetProperty(v15, 0, 0, 1953720698, (uint64_t)&v23, (uint64_t)&v24);
      if (result) {
        return result;
      }
      if (v24 <= a3) {
        return 4294967272;
      }
      if (v9 >= v24 - a3) {
        LODWORD(v9) = v24 - a3;
      }
      uint64_t v11 = a1[66];
      unint64_t v12 = v25;
    }
    unint64_t v16 = v11 + v9;
    unsigned int v17 = v12 - v11;
    if (v16 <= v12) {
      size_t v9 = v9;
    }
    else {
      size_t v9 = v17;
    }
    int v18 = malloc_type_malloc(v9, 0x2C8E6D5CuLL);
    if (v18) {
      BOOL v19 = 1;
    }
    else {
      BOOL v19 = v9 == 0;
    }
    if (!v19)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      int v22 = std::bad_alloc::bad_alloc(exception);
    }
    int v20 = v18;
    bzero(v18, v9);
    a1[67] = v20;
    unsigned int v24 = 0;
    uint64_t result = (*(uint64_t (**)(void, void, void, size_t, void *, unsigned int *))(*(void *)a1[13] + 48))(a1[13], 0, a1[66] + a3, v9, v20, &v24);
    if (!result)
    {
      *a5 = (void *)a1[67];
      *a6 = v24;
    }
  }
  return result;
}

uint64_t AudioFormat_GetAudioFormatIDFromFormatTag(int a1, BOOL *a2)
{
  uint64_t result = 1061109567;
  *a2 = 0;
  if (a1 > 16)
  {
    if (a1 > 84)
    {
      if (a1 == 85)
      {
        return 778924083;
      }
      else if (a1 == 304)
      {
        if (IsACELPnetSupported(void)::sCheckForACELPnetOnce[0] != -1) {
          dispatch_once(IsACELPnetSupported(void)::sCheckForACELPnetOnce, &__block_literal_global_12154);
        }
        if (IsACELPnetSupported(void)::isACELPnetSupported) {
          return 1096107074;
        }
        else {
          return 1061109567;
        }
      }
    }
    else
    {
      if (a1 == 49) {
        unsigned int v4 = 1836253233;
      }
      else {
        unsigned int v4 = 1061109567;
      }
      if (a1 == 17) {
        return 1836253201;
      }
      else {
        return v4;
      }
    }
  }
  else
  {
    switch(a1)
    {
      case 1:
        uint64_t result = 1819304813;
        break;
      case 2:
        uint64_t result = 1836253186;
        break;
      case 3:
        uint64_t result = 1819304813;
        *a2 = 1;
        break;
      case 6:
        uint64_t result = 1634492791;
        break;
      case 7:
        uint64_t result = 1970037111;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t Wave64ChunkParser::NextChunk(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  unsigned int v20 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  unint64_t v3 = a1[4];
  if (a1[2] <= v3) {
    return 4294967257;
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t, void, unint64_t, uint64_t, uint64_t *, unsigned int *))(*(void *)a2 + 48))(a2, 0, a1[3] + v3, 24, &v17, &v20);
  if (v20 <= 0x17)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unsigned int buf = 136315394;
      int v22 = "WAVEAudioFile.cpp";
      __int16 v23 = 1024;
      int v24 = 3628;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  End of file", buf, 0x12u);
    }
    return 4294967257;
  }
  uint64_t v7 = v6;
  if (v6)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unsigned int buf = 136315394;
      int v22 = "WAVEAudioFile.cpp";
      __int16 v23 = 1024;
      int v24 = 3629;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ReadBytes failed", buf, 0x12u);
    }
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = &qword_1901DC388;
    while (v17 != *v10 || v18 != v10[1])
    {
      ++v9;
      int v10 = (uint64_t *)((char *)v10 + 20);
      if (v9 == 29)
      {
        int v12 = 707406378;
        goto LABEL_18;
      }
    }
    int v12 = w64GUIDMap[5 * v9];
LABEL_18:
    *(_DWORD *)a3 = v12;
    *(_DWORD *)(a3 + 4) = 24;
    uint64_t v13 = v19;
    *(void *)(a3 + 8) = v19;
    uint64_t v14 = a1[4];
    *(void *)(a3 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v14 + a1[3];
    unint64_t v15 = v14 + v13;
    a1[4] = v15;
    if (v15 < 0xFFFFFFFFFFFFFFF9)
    {
      if ((v15 & 7) == 0) {
        return 0;
      }
      uint64_t v7 = 0;
      unint64_t v16 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    }
    else
    {
      uint64_t v7 = 0;
      unint64_t v16 = -1;
    }
    a1[4] = v16;
  }
  return v7;
}

__n128 Wave64ChunkParser::ContainerChunk(__n128 *a1, uint64_t a2)
{
  *(void *)a2 = 0x1872696666;
  __n128 result = a1[1];
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void Wave64ChunkParser::~Wave64ChunkParser(Wave64ChunkParser *this)
{
}

uint64_t RF64ChunkParser::NextChunk(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  unsigned int v52 = 0;
  uint64_t v51 = 0;
  unint64_t v3 = *(void *)(a1 + 32);
  if (*(void *)(a1 + 16) <= v3) {
    return 4294967257;
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t, void, unint64_t, uint64_t, uint64_t *, unsigned int *))(*(void *)a2 + 48))(a2, 0, *(void *)(a1 + 24) + v3, 8, &v51, &v52);
  if (v52 <= 7)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unsigned int buf = 136315394;
      *(void *)&uint8_t buf[4] = "WAVEAudioFile.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3531;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  End of file", buf, 0x12u);
    }
    return 4294967257;
  }
  uint64_t v8 = v7;
  if (v7)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return v8;
    }
    *(_DWORD *)unsigned int buf = 136315394;
    *(void *)&uint8_t buf[4] = "WAVEAudioFile.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3532;
    int v10 = MEMORY[0x1E4F14500];
    uint64_t v11 = "%25s:%-5d  ReadBytes failed";
LABEL_10:
    _os_log_impl(&dword_18FEC0000, v10, OS_LOG_TYPE_ERROR, v11, buf, 0x12u);
    return v8;
  }
  int v13 = v51;
  unsigned int v12 = HIDWORD(v51);
  unsigned int v14 = bswap32(v51);
  LODWORD(v51) = v14;
  if (!*(unsigned char *)(a1 + 72))
  {
    unsigned int v59 = 0;
    memset(buf, 0, sizeof(buf));
    unsigned int v53 = 0;
    if (v13 == 875983716 && HIDWORD(v51) > 0x1B)
    {
      uint64_t v18 = (*(uint64_t (**)(uint64_t, void, void, uint64_t, uint8_t *, unsigned int *))(*(void *)a2 + 48))(a2, 0, *(void *)(a1 + 32) + *(void *)(a1 + 24), 36, buf, &v53);
      if (v53 <= 0x23)
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
LABEL_23:
          uint64_t v8 = 4294967257;
LABEL_42:
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            return v8;
          }
          *(_DWORD *)unsigned int buf = 136315394;
          *(void *)&uint8_t buf[4] = "WAVEAudioFile.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3540;
          int v10 = MEMORY[0x1E4F14500];
          uint64_t v11 = "%25s:%-5d  ParseDS64Chunk failed";
          goto LABEL_10;
        }
        *(_DWORD *)__int16 v54 = 136315394;
        int v55 = "WAVEAudioFile.cpp";
        __int16 v56 = 1024;
        int v57 = 3486;
        uint64_t v19 = MEMORY[0x1E4F14500];
LABEL_22:
        _os_log_impl(&dword_18FEC0000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d  End of file", v54, 0x12u);
        goto LABEL_23;
      }
      uint64_t v8 = v18;
      if (v18)
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_42;
        }
        *(_DWORD *)__int16 v54 = 136315394;
        int v55 = "WAVEAudioFile.cpp";
        __int16 v56 = 1024;
        int v57 = 3487;
        __int16 v26 = MEMORY[0x1E4F14500];
        int v27 = "%25s:%-5d  ReadBytes for DataSize64Chunk failed";
      }
      else
      {
        *(_DWORD *)unsigned int buf = bswap32(*(unsigned int *)buf);
        if (v59 < 0x15555553)
        {
          int v32 = *(_DWORD *)&buf[16];
          int v31 = *(_DWORD *)&buf[20];
          uint64_t v33 = (void **)(a1 + 48);
          uint64_t v34 = *(char **)(a1 + 56);
          unint64_t v35 = *(void *)(a1 + 64);
          if ((unint64_t)v34 >= v35)
          {
            unint64_t v37 = 0x1555555555555555;
            uint64_t v38 = (char *)*v33;
            unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((v34 - (unsigned char *)*v33) >> 2);
            unint64_t v40 = v39 + 1;
            if (v39 + 1 > 0x1555555555555555) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (void)v38) >> 2);
            if (2 * v41 > v40) {
              unint64_t v40 = 2 * v41;
            }
            if (v41 < 0xAAAAAAAAAAAAAAALL) {
              unint64_t v37 = v40;
            }
            if (v37)
            {
              unint64_t v37 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<auoop::RenderPipeConfig::CompactFormat>>(v37);
              uint64_t v38 = *(char **)(a1 + 48);
              uint64_t v34 = *(char **)(a1 + 56);
            }
            else
            {
              uint64_t v42 = 0;
            }
            uint64_t v43 = (_DWORD *)(v37 + 12 * v39);
            unint64_t v44 = v37 + 12 * v42;
            *uint64_t v43 = 1684108385;
            v43[1] = v32;
            v43[2] = v31;
            uint64_t v36 = v43 + 3;
            if (v34 != v38)
            {
              do
              {
                uint64_t v45 = *(void *)(v34 - 12);
                v34 -= 12;
                int v46 = *((_DWORD *)v34 + 2);
                *(void *)(v43 - 3) = v45;
                v43 -= 3;
                v43[2] = v46;
              }
              while (v34 != v38);
              uint64_t v38 = (char *)*v33;
            }
            *(void *)(a1 + 48) = v43;
            *(void *)(a1 + 5std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v36;
            *(void *)(a1 + 64) = v44;
            if (v38) {
              operator delete(v38);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v34 = 1684108385;
            *((_DWORD *)v34 + 1) = v32;
            *((_DWORD *)v34 + 2) = v31;
            uint64_t v36 = v34 + 12;
          }
          *(void *)(a1 + 5std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v36;
          if (v59 && 12 * (unint64_t)v59 + 28 <= SHIDWORD(v51))
          {
            std::vector<ChunkSize64>::resize(a1 + 48, v59 + 1);
            unsigned int v53 = 0;
            uint64_t v47 = (*(uint64_t (**)(uint64_t, void, uint64_t, void, uint64_t, unsigned int *))(*(void *)a2 + 48))(a2, 0, *(void *)(a1 + 24) + *(void *)(a1 + 32) + 36, 12 * v59, *(void *)(a1 + 48) + 12, &v53);
            if (12 * (unint64_t)v59 > v53)
            {
              if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                goto LABEL_23;
              }
              *(_DWORD *)__int16 v54 = 136315394;
              int v55 = "WAVEAudioFile.cpp";
              __int16 v56 = 1024;
              int v57 = 3504;
              uint64_t v19 = MEMORY[0x1E4F14500];
              goto LABEL_22;
            }
            uint64_t v8 = v47;
            if (v47)
            {
              if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                goto LABEL_42;
              }
              *(_DWORD *)__int16 v54 = 136315394;
              int v55 = "WAVEAudioFile.cpp";
              __int16 v56 = 1024;
              int v57 = 3505;
              __int16 v26 = MEMORY[0x1E4F14500];
              int v27 = "%25s:%-5d  ReadBytes for 64-bit chunk sizes failed";
              goto LABEL_41;
            }
            if (v59)
            {
              if (v59 + 1 > 2) {
                uint64_t v48 = v59 + 1;
              }
              else {
                uint64_t v48 = 2;
              }
              uint64_t v49 = v48 - 1;
              uint64_t v50 = (unsigned int *)((char *)*v33 + 12);
              do
              {
                *uint64_t v50 = bswap32(*v50);
                v50 += 3;
                --v49;
              }
              while (v49);
            }
          }
          *(unsigned char *)(a1 + 72) = 1;
          unsigned int v14 = v51;
          unsigned int v12 = HIDWORD(v51);
          goto LABEL_12;
        }
        uint64_t v8 = 1718449215;
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_42;
        }
        *(_DWORD *)__int16 v54 = 136315394;
        int v55 = "WAVEAudioFile.cpp";
        __int16 v56 = 1024;
        int v57 = 3491;
        __int16 v26 = MEMORY[0x1E4F14500];
        int v27 = "%25s:%-5d  'ds64' chunk has bad table length";
      }
    }
    else
    {
      uint64_t v8 = 1685348671;
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_42;
      }
      *(_DWORD *)__int16 v54 = 136315394;
      int v55 = "WAVEAudioFile.cpp";
      __int16 v56 = 1024;
      int v57 = 3483;
      __int16 v26 = MEMORY[0x1E4F14500];
      int v27 = "%25s:%-5d  ds64 chunk not found";
    }
LABEL_41:
    _os_log_impl(&dword_18FEC0000, v26, OS_LOG_TYPE_ERROR, v27, v54, 0x12u);
    goto LABEL_42;
  }
LABEL_12:
  *(_DWORD *)a3 = v14;
  *(_DWORD *)(a3 + 4) = 8;
  if (v12 == -1)
  {
    *(void *)(a3 + 8) = 8;
    uint64_t v20 = *(void *)(a1 + 48);
    uint64_t v21 = *(void *)(a1 + 56) - v20;
    if (v21)
    {
      uint64_t v22 = 0;
      unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * (v21 >> 2);
      unsigned int v24 = 1;
      uint64_t v15 = 16;
      while (v14 != *(_DWORD *)(v20 + 12 * v22))
      {
        uint64_t v22 = v24;
        if (v23 <= v24++) {
          goto LABEL_14;
        }
      }
      uint64_t v28 = *(void *)(v20 + 12 * v22 + 4);
      BOOL v29 = __CFADD__(v28, 8);
      uint64_t v30 = v28 + 8;
      if (v29) {
        uint64_t v15 = -1;
      }
      else {
        uint64_t v15 = v30;
      }
    }
    else
    {
      uint64_t v15 = 16;
    }
  }
  else
  {
    uint64_t v15 = v12 + 8;
  }
LABEL_14:
  uint64_t v8 = 0;
  *(void *)(a3 + 8) = v15;
  uint64_t v16 = *(void *)(a1 + 32);
  *(void *)(a3 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v16 + *(void *)(a1 + 24);
  uint64_t v17 = v16 + v15;
  *(void *)(a1 + 32) = v16 + v15;
  if ((v15 & 1) != 0 && v17 != -1)
  {
    uint64_t v8 = 0;
    *(void *)(a1 + 32) = v17 + 1;
  }
  return v8;
}

void std::vector<ChunkSize64>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = *(_DWORD **)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *(void *)a1) >> 2);
  unint64_t v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    uint64_t v21 = &v3[3 * a2];
    goto LABEL_19;
  }
  uint64_t v7 = *(void *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v7 - v4) >> 2) >= v6)
  {
    size_t v22 = 12 * ((12 * v6 - 12) / 0xC) + 12;
    bzero(*(void **)(a1 + 8), v22);
    uint64_t v21 = (_DWORD *)(v4 + v22);
LABEL_19:
    *(void *)(a1 + 8) = v21;
    return;
  }
  if (a2 > 0x1555555555555555) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v3) >> 2);
  uint64_t v9 = 2 * v8;
  if (2 * v8 <= a2) {
    uint64_t v9 = a2;
  }
  if (v8 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x1555555555555555;
  }
  else {
    unint64_t v10 = v9;
  }
  uint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<auoop::RenderPipeConfig::CompactFormat>>(v10);
  unsigned int v12 = &v11[12 * v5];
  unsigned int v14 = &v11[12 * v13];
  size_t v15 = 12 * ((12 * v6 - 12) / 0xC) + 12;
  bzero(v12, v15);
  uint64_t v16 = &v12[v15];
  uint64_t v18 = *(_DWORD **)a1;
  uint64_t v17 = *(_DWORD **)(a1 + 8);
  if (v17 != *(_DWORD **)a1)
  {
    do
    {
      uint64_t v19 = *(void *)(v17 - 3);
      v17 -= 3;
      int v20 = v17[2];
      *(void *)(v12 - 12) = v19;
      v12 -= 12;
      *((_DWORD *)v12 + 2) = v20;
    }
    while (v17 != v18);
    uint64_t v17 = *(_DWORD **)a1;
  }
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v16;
  *(void *)(a1 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v14;
  if (v17)
  {
    operator delete(v17);
  }
}

__n128 RF64ChunkParser::ContainerChunk(__n128 *a1, uint64_t a2)
{
  *(_DWORD *)a2 = a1[2].n128_u32[3];
  *(_DWORD *)(a2 + 4) = 8;
  __n128 result = a1[1];
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void RF64ChunkParser::~RF64ChunkParser(RF64ChunkParser *this)
{
  *(void *)this = &unk_1EDF90B98;
  int v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x192FC8940);
}

{
  void *v2;

  *(void *)this = &unk_1EDF90B98;
  int v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
}

uint64_t RIFFWAVE32ChunkParser::NextChunk(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  unsigned int v16 = 0;
  uint64_t v15 = 0;
  unint64_t v3 = a1[4];
  if (a1[2] <= v3) {
    return 4294967257;
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t, void, unint64_t, uint64_t, uint64_t *, unsigned int *))(*(void *)a2 + 48))(a2, 0, a1[3] + v3, 8, &v15, &v16);
  if (v16 <= 7)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unsigned int buf = 136315394;
      uint64_t v18 = "WAVEAudioFile.cpp";
      __int16 v19 = 1024;
      int v20 = 3399;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  End of file", buf, 0x12u);
    }
    return 4294967257;
  }
  uint64_t v7 = v6;
  if (v6)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unsigned int buf = 136315394;
      uint64_t v18 = "WAVEAudioFile.cpp";
      __int16 v19 = 1024;
      int v20 = 3400;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ReadBytes failed", buf, 0x12u);
    }
  }
  else
  {
    uint64_t v9 = HIDWORD(v15);
    *(_DWORD *)a3 = bswap32(v15);
    *(_DWORD *)(a3 + 4) = 8;
    uint64_t v10 = v9 + 8;
    char v11 = (v9 != -9) & __CFADD__(v9, 9);
    uint64_t v12 = 0xFFFFFFFFLL;
    if (!v11) {
      uint64_t v12 = v10;
    }
    *(void *)(a3 + 8) = v12;
    uint64_t v13 = a1[4];
    *(void *)(a3 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v13 + a1[3];
    unint64_t v14 = v13 + v12;
    a1[4] = v13 + v12;
    if ((v12 & 1) != 0 && v14 <= 0xFFFFFFFE)
    {
      uint64_t v7 = 0;
      a1[4] = v14 + 1;
    }
  }
  return v7;
}

__n128 RIFFWAVE32ChunkParser::ContainerChunk(__n128 *a1, uint64_t a2)
{
  *(void *)a2 = 0x852494646;
  __n128 result = a1[1];
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void RIFFWAVE32ChunkParser::~RIFFWAVE32ChunkParser(RIFFWAVE32ChunkParser *this)
{
}

uint64_t WAVEAudioFile::OpenFromDataSource(WAVEAudioFile *this)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = WAVEAudioFile::ParseAudioFile(this);
  if (v1 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v3 = 136315394;
    uint64_t v4 = "WAVEAudioFile.cpp";
    __int16 v5 = 1024;
    int v6 = 1476;
    _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  WAVEAudioFile::OpenFromDataSource Failed", (uint8_t *)&v3, 0x12u);
  }
  return v1;
}

uint64_t WAVEAudioFile::Create(WAVEAudioFile *this, const __CFURL *a2, const AudioStreamBasicDescription *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (IsSupportedWAVEFormat(a3->mFormatID))
  {
    uint64_t v6 = AudioFileObject::Create(this, a2, a3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        int v12 = 136315394;
        uint64_t v13 = "WAVEAudioFile.cpp";
        __int16 v14 = 1024;
        int v15 = 1459;
        unint64_t v8 = MEMORY[0x1E4F14500];
        uint64_t v9 = "%25s:%-5d  Couldn't create a new audio file object";
LABEL_7:
        _os_log_impl(&dword_18FEC0000, v8, OS_LOG_TYPE_ERROR, v9, (uint8_t *)&v12, 0x12u);
      }
    }
    else
    {
      uint64_t v11 = WAVEAudioFile::InitializeWAVEChunks(this);
      if (v11)
      {
        uint64_t v7 = v11;
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          return v7;
        }
        int v12 = 136315394;
        uint64_t v13 = "WAVEAudioFile.cpp";
        __int16 v14 = 1024;
        int v15 = 1462;
        unint64_t v8 = MEMORY[0x1E4F14500];
        uint64_t v9 = "%25s:%-5d  InitializeWAVEChunks";
        goto LABEL_7;
      }
      uint64_t v7 = WAVEAudioFile::ParseAudioFile(this);
      if (v7 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        int v12 = 136315394;
        uint64_t v13 = "WAVEAudioFile.cpp";
        __int16 v14 = 1024;
        int v15 = 1465;
        unint64_t v8 = MEMORY[0x1E4F14500];
        uint64_t v9 = "%25s:%-5d  ParseAudioFile";
        goto LABEL_7;
      }
    }
  }
  else
  {
    uint64_t v7 = 1718449215;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315394;
      uint64_t v13 = "WAVEAudioFile.cpp";
      __int16 v14 = 1024;
      int v15 = 1456;
      unint64_t v8 = MEMORY[0x1E4F14500];
      uint64_t v9 = "%25s:%-5d  Unsupported WAVE format";
      goto LABEL_7;
    }
  }
  return v7;
}

void WAVEAudioFile::~WAVEAudioFile(WAVEAudioFile *this)
{
  WAVEAudioFile::~WAVEAudioFile(this);
  JUMPOUT(0x192FC8940);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EDF8EB38;
  if (*((void *)this + 65)) {
    ID3ParserClose();
  }
  free(*((void **)this + 63));
  *(void *)this = &unk_1EDF90168;
  int v2 = (void *)*((void *)this + 18);
  if (v2)
  {
    *((void *)this + 19) = v2;
    operator delete(v2);
  }
  AudioFileObject::~AudioFileObject(this);
}

void WAVEAudioFormat::NewStream(WAVEAudioFormat *this)
{
}

void WAVEAudioFormat::New(WAVEAudioFormat *this)
{
}

uint64_t WAVEAudioFormat::GetHFSCodes(WAVEAudioFormat *this, unsigned int *a2, void *__dst)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t __src = 0x2E57415657415645;
  int v3 = *((_DWORD *)this + 2);
  if (v3 == 1463170150)
  {
    *a2 = 0;
  }
  else
  {
    if (v3 == 1113011764) {
      int v4 = 1113011764;
    }
    else {
      int v4 = 1380533830;
    }
    if (v3 == 1380333108) {
      int v5 = 1380333108;
    }
    else {
      int v5 = v4;
    }
    int v10 = v5;
    unsigned int v6 = *a2 >> 2;
    if (v6 >= 3) {
      unsigned int v6 = 3;
    }
    size_t v7 = 4 * v6;
    *a2 = v7;
    if (__dst) {
      memcpy(__dst, &__src, v7);
    }
  }
  return 0;
}

uint64_t WAVEAudioFormat::GetAvailableStreamDescriptions(WAVEAudioFormat *this, int a2, unsigned int *a3, void *__dst)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (a2 > 1836253185)
  {
    if (((a2 - 1836253186) > 0x2F || ((1 << (a2 - 2)) & 0x800000008001) == 0)
      && a2 != 1970037111)
    {
      goto LABEL_25;
    }
LABEL_16:
    memset(outPropertyData, 0, 40);
    DWORD2(outPropertyData[0]) = a2;
    UInt32 ioPropertyDataSize = 40;
    AudioFormatGetProperty(0x666D7469u, 0, 0, &ioPropertyDataSize, outPropertyData);
    unsigned int v10 = 1;
    if (__dst) {
      goto LABEL_17;
    }
LABEL_24:
    uint64_t result = 0;
    *a3 = 40 * v10;
    return result;
  }
  switch(a2)
  {
    case 1096107074:
      if (IsACELPnetSupported(void)::sCheckForACELPnetOnce[0] != -1) {
        dispatch_once(IsACELPnetSupported(void)::sCheckForACELPnetOnce, &__block_literal_global_12154);
      }
      if (IsACELPnetSupported(void)::isACELPnetSupported != 1) {
        goto LABEL_25;
      }
      memset((char *)outPropertyData + 8, 0, 72);
      DWORD2(outPropertyData[0]) = 1096107074;
      *(void *)&outPropertyData[0] = 0x40BF400000000000;
      UInt32 ioPropertyDataSize = 40;
      AudioFormatGetProperty(0x666D7469u, 0, 0, &ioPropertyDataSize, outPropertyData);
      LODWORD(outPropertyData[3]) = 1096107074;
      *((void *)&outPropertyData[2] + 1) = 0x40CF400000000000;
      UInt32 ioPropertyDataSize = 40;
      AudioFormatGetProperty(0x666D7469u, 0, 0, &ioPropertyDataSize, (char *)&outPropertyData[2] + 8);
      unsigned int v10 = 2;
      if (!__dst) {
        goto LABEL_24;
      }
      break;
    case 1634492791:
      goto LABEL_16;
    case 1819304813:
      uint64_t v6 = 0;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v15 = 0u;
      size_t v7 = (_DWORD *)&outPropertyData[1] + 1;
      memset(outPropertyData, 0, sizeof(outPropertyData));
      do
      {
        uint64_t v8 = v6 + 8;
        if (v6) {
          int v9 = 12;
        }
        else {
          int v9 = 8;
        }
        *(v7 - 3) = 1819304813;
        *(v7 - 2) = v9;
        void v7[3] = v8;
        *size_t v7 = 1;
        v7 += 10;
        uint64_t v6 = v8;
      }
      while (v8 != 32);
      *((void *)&v15 + 1) = 0x96C70636DLL;
      LODWORD(v17) = 32;
      DWORD1(v1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 1;
      *(void *)&long long v18 = 0x96C70636DLL;
      DWORD2(v19) = 64;
      HIDWORD(v18) = 1;
      unsigned int v10 = 6;
      if (!__dst) {
        goto LABEL_24;
      }
      break;
    default:
LABEL_25:
      *a3 = 0;
      return 1718449215;
  }
LABEL_17:
  if (*a3 / 0x28 < v10) {
    unsigned int v10 = *a3 / 0x28;
  }
  size_t v11 = 40 * v10;
  *a3 = v11;
  memcpy(__dst, outPropertyData, v11);
  return 0;
}

uint64_t WAVEAudioFormat::GetAvailableFormatIDs(WAVEAudioFormat *this, unsigned int *a2, void *__dst)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  long long v8 = xmmword_1901C6510;
  uint64_t v9 = 0x6D7300316D730002;
  if (IsACELPnetSupported(void)::sCheckForACELPnetOnce[0] != -1) {
    dispatch_once(IsACELPnetSupported(void)::sCheckForACELPnetOnce, &__block_literal_global_12154);
  }
  if (IsACELPnetSupported(void)::isACELPnetSupported == 1)
  {
    int v10 = 1096107074;
    unsigned int v5 = 7;
  }
  else
  {
    unsigned int v5 = 6;
  }
  if (*a2 >> 2 < v5) {
    unsigned int v5 = *a2 >> 2;
  }
  size_t v6 = 4 * v5;
  *a2 = v6;
  if (__dst) {
    memcpy(__dst, &v8, v6);
  }
  return 0;
}

void WAVEAudioFormat::GetFileTypeName(WAVEAudioFormat *this, const __CFString **a2)
{
  CABundleLocker::CABundleLocker((CABundleLocker *)&v9);
  int v4 = (__CFBundle *)sAudioToolboxBundle;
  if (sAudioToolboxBundle == -1)
  {
    pthread_once(&sOnce, InitGetAudioToolboxBundle);
    int v4 = (__CFBundle *)sAudioToolboxBundle;
    if (sAudioToolboxBundle) {
      goto LABEL_3;
    }
LABEL_12:
    CFStringRef v8 = (const __CFString *)CFRetain(@"WAVE");
    goto LABEL_13;
  }
  if (!sAudioToolboxBundle) {
    goto LABEL_12;
  }
LABEL_3:
  int v5 = *((_DWORD *)this + 2);
  size_t v6 = @"WAVE";
  if (v5 == 1463170150) {
    size_t v6 = @"Wave64";
  }
  if (v5 == 1380333108) {
    size_t v6 = @"RF64";
  }
  if (v5 == 1113011764) {
    CFStringRef v7 = @"BW64";
  }
  else {
    CFStringRef v7 = v6;
  }
  CFStringRef v8 = CFBundleCopyLocalizedString(v4, v7, v7, @"FileTypeNames");
LABEL_13:
  *a2 = v8;
  CABundleLocker::~CABundleLocker((CABundleLocker *)&v9);
}

void sub_19014E300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

const __CFArray *WAVEAudioFormat::GetMIMETypes(WAVEAudioFormat *this, const __CFArray **a2)
{
  values[4] = *(void **)MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 2) == 1463170150)
  {
    CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    int v4 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    int v5 = 0;
    CFIndex v6 = 0;
  }
  else
  {
    values[0] = @"audio/wav";
    values[1] = @"audio/wave";
    values[2] = @"audio/x-wav";
    values[3] = @"audio/vnd.wave";
    CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    int v4 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    int v5 = values;
    CFIndex v6 = 4;
  }
  CFArrayRef result = CFArrayCreate(v3, (const void **)v5, v6, v4);
  *a2 = result;
  return result;
}

const __CFArray *WAVEAudioFormat::GetUTIs(WAVEAudioFormat *this, const __CFArray **a2)
{
  v5[1] = *(const void **)MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 2) == 1463170150) {
    CFAllocatorRef v3 = @"com.sony.wave64";
  }
  else {
    CFAllocatorRef v3 = @"com.microsoft.waveform-audio";
  }
  v5[0] = v3;
  CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v5, 1, MEMORY[0x1E4F1D510]);
  *a2 = result;
  return result;
}

const __CFArray *WAVEAudioFormat::GetExtensions(WAVEAudioFormat *this, const __CFArray **a2)
{
  v5[1] = *(const void **)MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 2) == 1463170150) {
    CFAllocatorRef v3 = @"w64";
  }
  else {
    CFAllocatorRef v3 = @"wav";
  }
  v5[0] = v3;
  CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v5, 1, MEMORY[0x1E4F1D510]);
  *a2 = result;
  return result;
}

BOOL WAVEAudioFormat::FileDataIsThisFormat(WAVEAudioFormat *this, unsigned int a2, const void *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (a2 >> 2 >= 8) {
    unsigned int v3 = 8;
  }
  else {
    unsigned int v3 = a2 >> 2;
  }
  if (v3 < 3) {
    return 0;
  }
  uint64_t v8 = v3;
  if (v3 <= 7) {
    size_t v9 = 32 - v8 * 4;
  }
  else {
    size_t v9 = 0;
  }
  bzero(&__dst[v8], v9);
  memcpy(__dst, a3, 4 * v3);
  int v10 = *((_DWORD *)this + 2);
  if (v10 == 1113011764)
  {
LABEL_12:
    BOOL result = 0;
    unsigned int v11 = bswap32(__dst[0]);
    BOOL v12 = __dst[0] == 1179011410 || v11 == v10;
    if (v12 && v16 == 1163280727)
    {
      if (v11 != v10) {
        return v3 < 4 || __dst[0] != 1179011410 || v17 == 1263424842 && (v3 < 5 || v18 >= 0x24);
      }
      if (v3 >= 4)
      {
        int v13 = v17;
        int v14 = 875983716;
        return v13 == v14;
      }
      return 1;
    }
    return result;
  }
  if (v10 != 1463170150)
  {
    if (v10 != 1380333108)
    {
      BOOL result = 0;
      if (__dst[0] == 1179011410 && v16 == 1163280727) {
        return 1;
      }
      return result;
    }
    goto LABEL_12;
  }
  BOOL result = 0;
  if (__dst[0] == 1717987698 && __dst[1] == 298815790 && v16 == -618080603)
  {
    if (v3 >= 4)
    {
      if (v17 != 49412) {
        return 0;
      }
      if (v3 >= 7)
      {
        if (v19 != 1702257015) {
          return 0;
        }
        if (a2 >= 0x20)
        {
          int v13 = v20;
          int v14 = 299085043;
          return v13 == v14;
        }
      }
    }
    return 1;
  }
  return result;
}

BOOL WAVEAudioFormat::ExtensionIsThisFormat(WAVEAudioFormat *this, CFStringRef theString1)
{
  if (*((_DWORD *)this + 2) == 1463170150) {
    CFStringRef v3 = @"w64";
  }
  else {
    CFStringRef v3 = @"wav";
  }
  return CFStringCompare(theString1, v3, 1uLL) == kCFCompareEqualTo;
}

void WAVEAudioFormat::~WAVEAudioFormat(WAVEAudioFormat *this)
{
}

uint64_t LOASAudioStream::HandleDiscontinuity(LOASAudioStream *this)
{
  *((_DWORD *)this + 59) = 0;
  *((unsigned char *)this + 468) = 1;
  *((unsigned char *)this + 480) = 0;
  *((unsigned char *)this + 488) = 0;
  *((unsigned char *)this + 493) = 0;
  *((void *)this + 73) = *((void *)this + 72);
  *((void *)this + 77) = *((void *)this + 76);
  return 0;
}

uint64_t LOASAudioStream::PacketToDependencyInfo(LOASAudioStream *this, AudioPacketDependencyInfoTranslation *a2)
{
  if (*((_DWORD *)this + 158))
  {
    return PacketToDependencyInfoForRestrictedRandomAccess(a2, (LOASAudioStream *)((char *)this + 544), (LOASAudioStream *)((char *)this + 600));
  }
  else
  {
    AudioFileStreamObject::PacketToDependencyInfo(this, a2);
    return 0;
  }
}

uint64_t LOASAudioStream::ScanForIndependentPacket(uint64_t a1, int a2, AudioIndependentPacketTranslation *a3)
{
  if (*(_DWORD *)(a1 + 632)) {
    return ScanForIndependentPacketWithRestrictedRandomAccess(a2 == 1, a3, (SampleToRollDistanceTable **)(a1 + 544), (SyncSampleTable **)(a1 + 600));
  }
  else {
    return AudioFileStreamObject::ScanForIndependentPacket(a1, a2, a3);
  }
}

uint64_t LOASAudioStream::PacketToRollDistance(LOASAudioStream *this, AudioPacketRollDistanceTranslation *a2)
{
  a2->mRollDistance = 0;
  if (*((unsigned char *)this + 544) || *((unsigned char *)this + 600)) {
    return PacketToRollDistanceForRestrictedRandomAccess(a2, (LOASAudioStream *)((char *)this + 544), (LOASAudioStream *)((char *)this + 600));
  }
  else {
    return 0;
  }
}

uint64_t LOASAudioStream::RestrictsRandomAccess(LOASAudioStream *this)
{
  return *((unsigned int *)this + 158);
}

uint64_t LOASAudioStream::GeneratePackets(LOASAudioStream *this)
{
  uint64_t v1 = this;
  int v2 = *((_DWORD *)this + 59);
  if (v2 <= 404)
  {
    if (v2 <= 397)
    {
      if (v2 == -1) {
        return 0;
      }
      if (v2) {
        goto LABEL_18;
      }
      unsigned int v5 = *((_DWORD *)this + 102);
      if (!v5) {
        goto LABEL_25;
      }
      if (!LOASAudioStream::ConsolidateAccessUnitsAndCallPacketsProc(this, *((_DWORD *)this + 106) - *((void *)this + 52), v5, *((void *)this + 52), *((AudioStreamPacketDescription **)this + 55)))
      {
        *((void *)v1 + 23) += *((unsigned int *)v1 + 102);
        *((_DWORD *)v1 + 102) = 0;
        *((void *)v1 + 5std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = *((void *)v1 + 55);
        *((void *)v1 + 53) = *((void *)v1 + 52);
        goto LABEL_25;
      }
      goto LABEL_22;
    }
    if (v2 == 398) {
      goto LABEL_140;
    }
    if (v2 != 402) {
      goto LABEL_18;
    }
LABEL_27:
    while (2)
    {
      uint64_t v12 = *((void *)v1 + 1);
      uint64_t v17 = *(void *)(v12 + 88);
      uint64_t v16 = *(void *)(v12 + 96);
      uint64_t v18 = v17 + *(unsigned int *)(v12 + 80);
      unsigned int v13 = v18 - v16;
      BOOL v20 = v16 < v17 || v18 <= v16 || v18 == v16;
      if (v20)
      {
        uint64_t result = 0;
        int v14 = 402;
        goto LABEL_24;
      }
      if (!*((unsigned char *)v1 + 488)) {
        goto LABEL_72;
      }
      unsigned int v21 = *((unsigned __int8 *)v1 + 489);
      size_t v22 = 3 - v21;
      *((_DWORD *)v1 + 64) = v22;
      if (v22 <= v13) {
        goto LABEL_58;
      }
      *((void *)v1 + 34) = v16;
      uint64_t v23 = *(void *)(v12 + 72);
      if (v23 == *(void *)(v12 + 128))
      {
        if (v13) {
          unsigned int v24 = (const void *)(v23 + (v16 - v17));
        }
        else {
          unsigned int v24 = 0;
        }
        memmove(*(void **)(v12 + 72), v24, v13);
        size_t v25 = 3 - *((unsigned __int8 *)v1 + 489);
        uint64_t v12 = *((void *)v1 + 1);
        if (*(_DWORD *)(v12 + 120) < v25)
        {
          *(_DWORD *)(v12 + 120) = v25;
          CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v12 + 128), v25);
          uint64_t v12 = *((void *)v1 + 1);
        }
        *(_DWORD *)(v12 + 11std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v13;
        *(void *)(v12 + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = *(void *)(v12 + 88) + *(unsigned int *)(v12 + 80);
      }
      else
      {
        if (*(_DWORD *)(v12 + 120) < v22)
        {
          *(_DWORD *)(v12 + 120) = v22;
          CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v12 + 128), v22);
          uint64_t v12 = *((void *)v1 + 1);
        }
        unsigned int v13 = 0;
        *(_DWORD *)(v12 + 11std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
      }
LABEL_46:
      unsigned int v26 = *((_DWORD *)v1 + 64) - v13;
      uint64_t v27 = *(void *)(v12 + 88);
      uint64_t v28 = *(void *)(v12 + 96);
      uint64_t v29 = v27 + *(unsigned int *)(v12 + 80);
      if (v29 <= v28 || v28 < v27) {
        unsigned int v31 = 0;
      }
      else {
        unsigned int v31 = v29 - v28;
      }
      if (v26 <= v31) {
        unsigned int v26 = v31;
      }
      unsigned int v172 = v26;
      size_t v32 = v26 + v13;
      if (*(_DWORD *)(v12 + 120) < v32)
      {
        *(_DWORD *)(v12 + 120) = v32;
        CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v12 + 128), v32);
        uint64_t v12 = *((void *)v1 + 1);
      }
      StreamBuffer::Copy((void *)(v12 + 72), &v172, (unsigned __int8 *)(*(void *)(v12 + 128) + *(unsigned int *)(v12 + 116)));
      uint64_t v12 = *((void *)v1 + 1);
      unsigned int v13 = *(_DWORD *)(v12 + 116) + v172;
      *(_DWORD *)(v12 + 11std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v13;
      if (v13 < *((_DWORD *)v1 + 64))
      {
        uint64_t result = 0;
        int v14 = 405;
        goto LABEL_24;
      }
      uint64_t v16 = *((void *)v1 + 34);
      uint64_t v33 = *(void *)(v12 + 128);
      *(void *)(v12 + 88) = v16;
      *(void *)(v12 + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v16;
      *(void *)(v12 + 72) = v33;
      *(_DWORD *)(v12 + 80) = v13;
      unsigned int v21 = *((unsigned __int8 *)v1 + 489);
      uint64_t v18 = v16 + v13;
      uint64_t v17 = v16;
LABEL_58:
      uint64_t v34 = 0;
      if (v16 >= v17 && v16 < v18 && v13 != 0) {
        uint64_t v34 = (const void *)(*(void *)(v12 + 72) + (v16 - v17));
      }
      memcpy((char *)v1 + v21 + 490, v34, 3 - v21);
      if (!MP4::LOASHeader::IsLOASSyncWord((LOASAudioStream *)((char *)v1 + 490), (const unsigned __int8 *)3, (_DWORD *)v1 + 119, v36))
      {
LABEL_71:
        *((_WORD *)v1 + 244) = 0;
LABEL_72:
        if (!*((unsigned char *)v1 + 493)) {
          goto LABEL_157;
        }
        unsigned int v45 = *((_DWORD *)v1 + 124);
        size_t v46 = 10 - v45;
        *((_DWORD *)v1 + 64) = v46;
        uint64_t v10 = *((void *)v1 + 1);
        uint64_t v48 = *(void *)(v10 + 88);
        uint64_t v47 = *(void *)(v10 + 96);
        uint64_t v49 = v48 + *(unsigned int *)(v10 + 80);
        BOOL v51 = v47 < v48 || v49 <= v47;
        unsigned int v52 = v49 - v47;
        if (v51) {
          size_t v11 = 0;
        }
        else {
          size_t v11 = v52;
        }
        if (v11 >= v46)
        {
LABEL_108:
          CFStringRef v65 = 0;
          uint64_t v66 = (_WORD *)((char *)v1 + 500);
          if (v47 >= v48 && v47 < v49 && v52) {
            CFStringRef v65 = (const void *)(*(void *)(v10 + 72) + (v47 - v48));
          }
          memcpy((char *)v1 + v45 + 500, v65, 10 - v45);
          if (*v66 != 17481 || *((unsigned char *)v1 + 502) != 51)
          {
            if (*v66 != 16724 || *((unsigned char *)v1 + 502) != 71)
            {
LABEL_156:
              *((_DWORD *)v1 + 124) = 0;
              *((unsigned char *)v1 + 493) = 0;
LABEL_157:
              *((_DWORD *)v1 + 121) = 0;
              uint64_t v94 = *((void *)v1 + 1);
              uint64_t v95 = *(unsigned int *)(v94 + 80);
              uint64_t v96 = *(void *)(v94 + 88);
              uint64_t v97 = *(void *)(v94 + 96);
              uint64_t v98 = v96 + v95;
              BOOL v99 = v97 < v96 || v98 <= v97;
              int v100 = v99;
              if (v99 || v98 == v97) {
                uint64_t v101 = 0;
              }
              else {
                uint64_t v101 = *(void *)(v94 + 72) + (v97 - v96);
              }
              unsigned int v102 = 0;
              uint64_t v103 = 0;
              if (!v100) {
                LODWORD(v95) = v97 - v96;
              }
              int v166 = v95;
              if (v100) {
                unsigned int v104 = 0;
              }
              else {
                unsigned int v104 = v98 - v97;
              }
              *(void *)int v179 = 0;
              BOOL v20 = *((unsigned char *)v1 + 468) == 0;
              unsigned int v178 = 0;
              if (v20) {
                char v105 = 3;
              }
              else {
                char v105 = 0;
              }
              *((unsigned char *)v1 + 480) = 0;
              *((_DWORD *)v1 + 130) = 0;
              uint64_t v169 = v101 + 1;
              while (LOASAudioStream::ScanForSyncWord(v1, v104, (const unsigned __int8 *)v101, &v179[1], v179, v105, &v178))
              {
                unsigned int v107 = v179[0];
                unsigned int v106 = v179[1];
                if (v104 - v179[1] < v179[0])
                {
                  *((unsigned char *)v1 + 480) = 1;
                  *((_DWORD *)v1 + 118) = v106 + v166;
                  *((_DWORD *)v1 + 119) = v107;
                  v179[1] = v107 + v106;
                  unsigned int v102 = v106;
                }
                else
                {
                  if (!*((unsigned char *)v1 + 468)) {
                    goto LABEL_218;
                  }
                  *(void *)unint64_t v175 = v101 + v179[1];
                  uint64_t v176 = *(void *)v175 + v179[0];
                  uint64_t v177 = 0;
                  if ((v175[0] & 3) != 0 && v179[0] != 0)
                  {
                    int v109 = 0;
                    char v110 = v169 + LOBYTE(v179[1]);
                    int v111 = -8;
                    unint64_t v112 = v169 + v179[1];
                    do
                    {
                      LODWORD(v177) = v109 << 8;
                      HIDWORD(v177) = v111 + 16;
                      *(void *)unint64_t v175 = v112;
                      int v113 = *(unsigned __int8 *)(v112 - 1) | (v109 << 8);
                      LODWORD(v177) = v113;
                      v111 += 8;
                      if ((v110 & 3) == 0) {
                        break;
                      }
                      ++v110;
                      int v109 = v113;
                      BOOL v91 = v112++ >= v101 + v179[1] + (unint64_t)v179[0];
                    }
                    while (!v91);
                    LODWORD(v177) = v113 << (24 - v111);
                  }
                  unsigned int v172 = 0;
                  __int16 v173 = 1;
                  *(void *)long long v174 = 0;
                  *(_DWORD *)((char *)&v174[1] + 3) = 0;
                  memset(&v174[3], 0, 24);
                  if (!MP4::LOASHeader::Deserialize(&v172, (uint64_t)v175))
                  {
                    uint64_t v115 = v103;
                    unsigned int v168 = v102;
                    unsigned int v116 = v107 + v106;
                    int v117 = 4;
                    while (1)
                    {
                      unsigned int v118 = v116;
                      unsigned int v119 = v104 - v116;
                      if (v104 >= v116)
                      {
                        unsigned int v118 = v116;
                        if (v119 >= 3)
                        {
                          int v171 = 0;
                          long long v120 = (MP4::LOASHeader *)(v101 + v116);
                          if (MP4::LOASHeader::IsLOASSyncWord(v120, (const unsigned __int8 *)(v104 - v116), &v171, v114))
                          {
                            int v121 = v171;
                            if (__CFADD__(v116, v171)) {
                              int v121 = 0;
                            }
LABEL_212:
                            unsigned int v118 = v121 + v116;
                            goto LABEL_213;
                          }
                          if ((*(_WORD *)v120 != 17481 || *((unsigned char *)v120 + 2) != 51)
                            && (*(_WORD *)v120 != 16724 || *((unsigned char *)v120 + 2) != 71))
                          {
LABEL_222:
                            unsigned int v102 = v168;
                            uint64_t v103 = v115;
                            uint64_t v1 = this;
                            break;
                          }
                          unsigned int v118 = v116;
                          if (v119 >= 0xA)
                          {
                            int v170 = 0;
                            int v124 = ID3Size(0xAu, (const unsigned __int8 *)(v101 + v116), &v170);
                            if (__CFADD__(v116, v124)) {
                              int v121 = 0;
                            }
                            else {
                              int v121 = v124;
                            }
                            if (!v124) {
                              goto LABEL_222;
                            }
                            goto LABEL_212;
                          }
                        }
                      }
LABEL_213:
                      if (v118 == v116) {
                        unsigned int v116 = v104;
                      }
                      else {
                        unsigned int v116 = v118;
                      }
                      if (!--v117)
                      {
                        *((unsigned char *)this + 468) = 0;
                        unsigned int v106 = v179[1];
                        LODWORD(v103) = v115;
                        uint64_t v1 = this;
                        goto LABEL_218;
                      }
                    }
                  }
                  unsigned int v106 = v179[1];
                  if (*((unsigned char *)v1 + 468))
                  {
                    ++v179[1];
                  }
                  else
                  {
LABEL_218:
                    int v125 = *((_DWORD *)v1 + 121);
                    if (v125) {
                      uint64_t v103 = v103;
                    }
                    else {
                      uint64_t v103 = v106;
                    }
                    *((_DWORD *)v1 + 121) = v125 + 1;
                    unsigned int v102 = v179[0] + v106;
                    v179[1] = v179[0] + v106;
                    char v105 = 3;
                  }
                }
              }
              *((_DWORD *)v1 + 130) = v178;
              unsigned int v126 = *((_DWORD *)v1 + 121);
              if (!v126)
              {
LABEL_234:
                uint64_t v134 = *((void *)v1 + 1);
                uint64_t v135 = *(void *)(v134 + 96) + v102;
                *(void *)(v134 + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v135;
                if (*((unsigned char *)v1 + 480))
                {
                  size_t v3 = *((unsigned int *)v1 + 119);
                  if (*((_DWORD *)v1 + 71) < v3)
                  {
                    *((_DWORD *)v1 + 71) = v3;
                    CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)v1 + 36, v3, 0);
                    LODWORD(v3) = *((_DWORD *)v1 + 119);
                  }
                  *((_DWORD *)v1 + 64) = v3;
                  int v4 = (unsigned __int8 *)*((void *)v1 + 36);
                  *((void *)v1 + 33) = v4;
                  goto LABEL_238;
                }
                int v141 = 0;
                uint64_t v142 = *(void *)(v134 + 88);
                uint64_t v143 = v142 + *(unsigned int *)(v134 + 80);
                BOOL v145 = v135 < v142 || v143 <= v135;
                unsigned int v146 = v143 - v135;
                if (v145) {
                  size_t v147 = 0;
                }
                else {
                  size_t v147 = v146;
                }
                if (!v145 && v146) {
                  int v141 = (unsigned char *)(*(void *)(v134 + 72) + (v135 - v142));
                }
                if (v147 == 1)
                {
                  BOOL v148 = *v141 == 86;
                  *((unsigned char *)v1 + 488) = v148;
                  int v153 = *v141;
                  BOOL v152 = v153 == 73 || v153 == 84;
                }
                else
                {
                  if (v147 != 2)
                  {
                    *((unsigned char *)v1 + 488) = 0;
                    if ((v147 - 3) > 6)
                    {
                      *((unsigned char *)v1 + 493) = 0;
                      goto LABEL_283;
                    }
                    int v154 = *v141;
                    if (v154 == 84)
                    {
                      BOOL v155 = 0;
                      if (v141[1] == 65) {
                        BOOL v155 = v141[2] == 71;
                      }
                    }
                    else
                    {
                      BOOL v155 = 0;
                      if (v154 == 73)
                      {
                        if (v141[1] != 68 || (BOOL v155 = 1, v141[2] != 51)) {
                          BOOL v155 = 0;
                        }
                      }
                    }
                    *((unsigned char *)v1 + 493) = v155;
                    if (!v155) {
                      goto LABEL_283;
                    }
LABEL_272:
                    *((_DWORD *)v1 + 124) = v147;
                    *((_WORD *)v1 + 254) = 0;
                    *(void *)((char *)v1 + 500) = 0;
                    memcpy((char *)v1 + 500, v141, v147);
LABEL_283:
                    *(void *)(v134 + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = *(void *)(v134 + 88) + *(unsigned int *)(v134 + 80);
LABEL_25:
                    int v15 = *((_DWORD *)v1 + 130);
                    if (!v15) {
                      continue;
                    }
                    *((_DWORD *)v1 + 64) = v15;
LABEL_140:
                    while (1)
                    {
                      uint64_t v82 = *((void *)v1 + 1);
                      uint64_t v84 = *(void *)(v82 + 88);
                      uint64_t v83 = *(void *)(v82 + 96);
                      uint64_t v85 = v84 + *(unsigned int *)(v82 + 80);
                      unsigned int v86 = v85 - v83;
                      BOOL v87 = v83 < v84 || v85 <= v83;
                      if (v87 || v85 == v83) {
                        break;
                      }
                      uint64_t v89 = *((unsigned int *)v1 + 64);
                      uint64_t v90 = v83 + v89;
                      BOOL v91 = v89 >= v86;
                      int v92 = v89 - v86;
                      if (v91) {
                        uint64_t v90 = v85;
                      }
                      if (v91) {
                        int v93 = v92;
                      }
                      else {
                        int v93 = 0;
                      }
                      *(void *)(v82 + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v90;
                      *((_DWORD *)v1 + 64) = v93;
                      if (!v93)
                      {
                        *((_DWORD *)v1 + 130) = 0;
                        goto LABEL_27;
                      }
                    }
                    uint64_t result = 0;
                    int v14 = 398;
                    goto LABEL_24;
                  }
                  BOOL v148 = 0;
                  if (*v141 == 86) {
                    BOOL v148 = v141[1] > 0xDFu;
                  }
                  *((unsigned char *)v1 + 488) = v148;
                  int v149 = *v141;
                  int v150 = 68;
                  if (v149 != 73)
                  {
                    int v151 = 0;
                    if (v149 != 84) {
                      goto LABEL_269;
                    }
                    int v150 = 65;
                  }
                  BOOL v152 = v141[1] == v150;
                }
                int v151 = v152;
LABEL_269:
                *((unsigned char *)v1 + 493) = v151;
                if (v148)
                {
                  *((unsigned char *)v1 + 489) = v147;
                  *((_WORD *)v1 + 245) = 0;
                  *((unsigned char *)v1 + 492) = 0;
                  memcpy((char *)v1 + 490, v141, v147);
                  int v151 = *((unsigned __int8 *)v1 + 493);
                }
                if (!v151) {
                  goto LABEL_283;
                }
                goto LABEL_272;
              }
              uint64_t v127 = v1;
              unsigned int v128 = v103;
              if (*((_DWORD *)v127 + 50) < v126)
              {
                uint64_t v129 = (1 << -(char)__clz(v126 - 1));
                *((_DWORD *)this + 50) = v129;
                CADeprecated::CAAutoFree<AudioStreamPacketDescription>::reallocItems((void **)this + 24, v129);
              }
              unsigned int v130 = 0;
              unsigned int v172 = v128;
              v175[0] = 0;
              uint64_t v1 = this;
              while (LOASAudioStream::ScanForSyncWord(this, v104, (const unsigned __int8 *)v101, &v172, v175, 1, &v179[1]))
              {
                unsigned int v131 = v172;
                unsigned int v132 = v175[0];
                if (v104 - v172 >= v175[0])
                {
                  uint64_t v133 = *((void *)this + 24) + 16 * v130;
                  *(void *)uint64_t v133 = v172;
                  *(_DWORD *)(v133 + 8) = 0;
                  *(_DWORD *)(v133 + 12) = v132;
                }
                unsigned int v172 = v132 + v131;
                ++v130;
              }
              if (!LOASAudioStream::ConsolidateAccessUnitsAndCallPacketsProc(this, v102, *((_DWORD *)this + 121), v101, *((AudioStreamPacketDescription **)this + 24)))
              {
                *((void *)this + 23) += *((unsigned int *)this + 121);
                goto LABEL_234;
              }
LABEL_22:
              uint64_t result = 1718449215;
              goto LABEL_23;
            }
LABEL_134:
            unsigned int v79 = ID3Size(0xAu, (const unsigned __int8 *)v1 + 500, (int *)v1 + 129);
            *((_DWORD *)v1 + 128) = v79;
            unsigned int v80 = *((_DWORD *)v1 + 124);
            unsigned int v81 = v79 - v80;
            if (v79 > v80)
            {
              while (1)
              {
                *((_DWORD *)v1 + 64) = v81;
                if (!v81) {
                  goto LABEL_156;
                }
LABEL_286:
                uint64_t v156 = *((void *)v1 + 1);
                uint64_t v158 = *(void *)(v156 + 88);
                uint64_t v157 = *(void *)(v156 + 96);
                uint64_t v159 = v158 + *(unsigned int *)(v156 + 80);
                if (v157 < v158 || v159 <= v157) {
                  break;
                }
                unsigned int v161 = v159 - v157;
                if (v159 == v157) {
                  break;
                }
                uint64_t v162 = *((unsigned int *)v1 + 64);
                uint64_t v163 = v157 + v162;
                BOOL v164 = v162 >= v161;
                unsigned int v165 = v162 - v161;
                if (v164) {
                  uint64_t v163 = v159;
                }
                if (v164) {
                  unsigned int v81 = v165;
                }
                else {
                  unsigned int v81 = 0;
                }
                *(void *)(v156 + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v163;
              }
              uint64_t result = 0;
              int v14 = 447;
              goto LABEL_24;
            }
            goto LABEL_156;
          }
          uint64_t v69 = *((int *)v1 + 124);
          *((_DWORD *)v1 + 131) = -(int)v69;
          uint64_t v70 = *((void *)v1 + 1);
          *((void *)v1 + 6std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = *(void *)(v70 + 88) - v69;
          if (*((char *)v1 + 536) < 0)
          {
            BOOL v71 = 0;
            uint64_t v72 = *(void *)(v70 + 48);
            uint64_t v73 = *(void *)(v70 + 56) - v72;
            if (v73)
            {
              unint64_t v74 = 0;
              unint64_t v75 = v73 >> 2;
              unsigned int v76 = 1;
              do
              {
                BOOL v20 = *(_DWORD *)(v72 + 4 * v74) == 1768174437;
                BOOL v71 = v20;
                unint64_t v74 = v76++;
              }
              while (!v20 && v75 > v74);
            }
            *((unsigned char *)v1 + 53std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v71;
            if (!v71) {
              goto LABEL_134;
            }
          }
          else if (!*((unsigned char *)v1 + 536))
          {
            goto LABEL_134;
          }
          unsigned int v172 = 0;
          uint64_t v78 = *(void (**)(void, void, uint64_t, unsigned int *))(v70 + 24);
          if (v78) {
            v78(*(void *)(v70 + 40), *(unsigned int *)(v70 + 8), 1768174437, &v172);
          }
          goto LABEL_134;
        }
        *((void *)v1 + 34) = v47;
        unsigned int v53 = *(char **)(v10 + 72);
        if (v53 == *(char **)(v10 + 128))
        {
          if (v52) {
            int v54 = v51;
          }
          else {
            int v54 = 1;
          }
          if (v54) {
            int v55 = 0;
          }
          else {
            int v55 = &v53[(v47 - v48)];
          }
          memmove(v53, v55, v11);
          size_t v56 = (10 - *((_DWORD *)v1 + 124));
          uint64_t v10 = *((void *)v1 + 1);
          if (*(_DWORD *)(v10 + 120) < v56)
          {
            *(_DWORD *)(v10 + 120) = v56;
            CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v10 + 128), v56);
            uint64_t v10 = *((void *)v1 + 1);
          }
          *(_DWORD *)(v10 + 11std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v11;
          *(void *)(v10 + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = *(void *)(v10 + 88) + *(unsigned int *)(v10 + 80);
        }
        else
        {
          if (*(_DWORD *)(v10 + 120) < v46)
          {
            *(_DWORD *)(v10 + 120) = v46;
            CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v10 + 128), v46);
            uint64_t v10 = *((void *)v1 + 1);
          }
          LODWORD(v11) = 0;
          *(_DWORD *)(v10 + 11std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
        }
LABEL_96:
        unsigned int v57 = *((_DWORD *)v1 + 64) - v11;
        uint64_t v58 = *(void *)(v10 + 88);
        uint64_t v59 = *(void *)(v10 + 96);
        uint64_t v60 = v58 + *(unsigned int *)(v10 + 80);
        if (v60 <= v59 || v59 < v58) {
          unsigned int v62 = 0;
        }
        else {
          unsigned int v62 = v60 - v59;
        }
        if (v57 <= v62) {
          unsigned int v57 = v62;
        }
        unsigned int v172 = v57;
        size_t v63 = v57 + v11;
        if (*(_DWORD *)(v10 + 120) < v63)
        {
          *(_DWORD *)(v10 + 120) = v63;
          CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v10 + 128), v63);
          uint64_t v10 = *((void *)v1 + 1);
        }
        StreamBuffer::Copy((void *)(v10 + 72), &v172, (unsigned __int8 *)(*(void *)(v10 + 128) + *(unsigned int *)(v10 + 116)));
        uint64_t v10 = *((void *)v1 + 1);
        unsigned int v52 = *(_DWORD *)(v10 + 116) + v172;
        *(_DWORD *)(v10 + 11std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v52;
        if (v52 < *((_DWORD *)v1 + 64))
        {
          uint64_t result = 0;
          int v14 = 433;
          goto LABEL_24;
        }
        uint64_t v47 = *((void *)v1 + 34);
        uint64_t v64 = *(void *)(v10 + 128);
        *(void *)(v10 + 88) = v47;
        *(void *)(v10 + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v47;
        *(void *)(v10 + 72) = v64;
        *(_DWORD *)(v10 + 80) = v52;
        unsigned int v45 = *((_DWORD *)v1 + 124);
        uint64_t v49 = v47 + v52;
        uint64_t v48 = v47;
        goto LABEL_108;
      }
      break;
    }
    size_t v37 = *((unsigned int *)v1 + 119);
    if (*((_DWORD *)v1 + 71) < v37)
    {
      *((_DWORD *)v1 + 71) = v37;
      CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)v1 + 36, v37, 0);
    }
    uint64_t v38 = *((void *)v1 + 36);
    __int16 v39 = *((_WORD *)v1 + 245);
    *(unsigned char *)(v38 + 2) = *((unsigned char *)v1 + 492);
    *(_WORD *)uint64_t v38 = v39;
    uint64_t v7 = *((void *)v1 + 1);
    *(void *)(v7 + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = *(void *)(v7 + 96) - *((unsigned __int8 *)v1 + 489) + 3;
    unsigned int v6 = *((_DWORD *)v1 + 119) - 3;
    *((_DWORD *)v1 + 64) = v6;
    uint64_t v8 = (unsigned __int8 *)(*((void *)v1 + 36) + 3);
    *((void *)v1 + 33) = v8;
LABEL_68:
    unsigned int v172 = v6;
    StreamBuffer::Copy((void *)(v7 + 72), &v172, v8);
    unsigned int v40 = v172;
    int v41 = *((_DWORD *)v1 + 64);
    *((void *)v1 + 33) += v172;
    int v42 = v41 - v40;
    *((_DWORD *)v1 + 64) = v42;
    if (v42)
    {
      uint64_t result = 0;
      int v14 = 414;
      goto LABEL_24;
    }
    uint64_t v43 = (AudioStreamPacketDescription *)*((void *)v1 + 24);
    v43->SInt64 mStartOffset = 0;
    int v44 = *((_DWORD *)v1 + 119);
    v43->mVariableFramesInPacket = 0;
    v43->UInt32 mDataByteSize = v44;
    if (LOASAudioStream::ConsolidateAccessUnitsAndCallPacketsProc(v1, v44, 1u, *((void *)v1 + 36), v43)) {
      goto LABEL_22;
    }
    ++*((void *)v1 + 23);
    goto LABEL_71;
  }
  if (v2 <= 432)
  {
    if (v2 != 405)
    {
      if (v2 != 414) {
        goto LABEL_18;
      }
      unsigned int v6 = *((_DWORD *)this + 64);
      uint64_t v7 = *((void *)this + 1);
      uint64_t v8 = (unsigned __int8 *)*((void *)this + 33);
      goto LABEL_68;
    }
    uint64_t v12 = *((void *)this + 1);
    unsigned int v13 = *(_DWORD *)(v12 + 116);
    goto LABEL_46;
  }
  switch(v2)
  {
    case 433:
      uint64_t v10 = *((void *)this + 1);
      LODWORD(v11) = *(_DWORD *)(v10 + 116);
      goto LABEL_96;
    case 447:
      goto LABEL_286;
    case 592:
      LODWORD(v3) = *((_DWORD *)this + 64);
      int v4 = (unsigned __int8 *)*((void *)this + 33);
LABEL_238:
      unsigned int v172 = v3;
      StreamBuffer::Copy((void *)(*((void *)v1 + 1) + 72), &v172, v4);
      unsigned int v136 = v172;
      int v137 = *((_DWORD *)v1 + 64);
      *((void *)v1 + 33) += v172;
      int v138 = v137 - v136;
      *((_DWORD *)v1 + 64) = v138;
      if (v138)
      {
        uint64_t result = 0;
        int v14 = 592;
        goto LABEL_24;
      }
      if (!*((_DWORD *)v1 + 50))
      {
        *((_DWORD *)v1 + 50) = 1;
        CADeprecated::CAAutoFree<AudioStreamPacketDescription>::reallocItems((void **)v1 + 24, 1);
      }
      unint64_t v139 = (AudioStreamPacketDescription *)*((void *)v1 + 24);
      v139->SInt64 mStartOffset = 0;
      int v140 = *((_DWORD *)v1 + 119);
      v139->mVariableFramesInPacket = 0;
      v139->UInt32 mDataByteSize = v140;
      if (!LOASAudioStream::ConsolidateAccessUnitsAndCallPacketsProc(v1, v140, 1u, *((void *)v1 + 36), v139))
      {
        ++*((void *)v1 + 23);
        goto LABEL_25;
      }
      goto LABEL_22;
  }
LABEL_18:
  uint64_t result = 0;
LABEL_23:
  int v14 = -1;
LABEL_24:
  *((_DWORD *)v1 + 59) = v14;
  return result;
}

uint64_t LOASAudioStream::ConsolidateAccessUnitsAndCallPacketsProc(LOASAudioStream *this, int a2, unsigned int a3, uint64_t a4, AudioStreamPacketDescription *a5)
{
  std::vector<unsigned char>::vector(&__p, -3 * a3 + a2);
  if (a3)
  {
    size_t v9 = (AudioStreamPacketDescription *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(a3);
    memmove(v9, a5, 16 * a3);
  }
  else
  {
    size_t v9 = 0;
  }
  unsigned int v38 = 0;
  unsigned int v39 = a3;
  int v10 = MP4::LOASHeader::CopyByteAlignedAccessUnitsFromAudioSyncStream(&v39, (uint64_t)v9, a4, (uint64_t)this + 336, __p, (int)v41 - (int)__p, &v38);
  unsigned int v11 = v39;
  if (v39)
  {
    UInt32 v12 = v38;
    if (v38)
    {
      if (*((_DWORD *)this + 158) && *((void *)this + 80))
      {
        unsigned int v13 = (unsigned char *)*((void *)this + 73);
        uint64_t v14 = *((void *)this + 72);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v13[-v14] >> 3) >= 0x15)
        {
          int v15 = (unsigned char *)(v14 + 8 * ((uint64_t)&v13[-v14] >> 3) - 480);
          int64_t v16 = v13 - v15;
          if (v13 != v15) {
            memmove(*((void **)this + 72), v15, v13 - v15);
          }
          *((void *)this + 73) = v14 + v16;
        }
        uint64_t v17 = *((void *)this + 77);
        uint64_t v18 = *((void *)this + 76);
        if ((unint64_t)(v17 - v18) >= 0xA1)
        {
          if (v17 != v17 - 160) {
            memmove(*((void **)this + 76), (const void *)(v17 - 160), 0xA0uLL);
          }
          *((void *)this + 77) = v18 + 160;
        }
        uint64_t v19 = 0;
        if (v11 <= 1) {
          uint64_t v20 = 1;
        }
        else {
          uint64_t v20 = v11;
        }
        do
        {
          unsigned int v21 = &v9[v19];
          SInt64 mStartOffset = v21->mStartOffset;
          uint64_t v23 = (unsigned __int8 *)__p + v21->mStartOffset;
          uint64_t mDataByteSize = v21->mDataByteSize;
          v36[0] = v23;
          v36[1] = v23;
          size_t v25 = &v23[mDataByteSize];
          v36[2] = v25;
          uint64_t v37 = 0;
          if ((v23 & 3) != 0)
          {
            int v26 = 0;
            uint64_t v27 = (char *)__p + mStartOffset + 1;
            int v28 = -8;
            do
            {
              int v29 = v28;
              if (v23 >= v25) {
                int v30 = 255;
              }
              else {
                int v30 = *v23;
              }
              int v26 = v30 | (v26 << 8);
              ++v23;
              int v28 = v29 + 8;
            }
            while ((v27++ & 3) != 0);
            v36[0] = v23;
            LODWORD(v37) = v26 << (16 - v29);
            HIDWORD(v37) = v29 + 16;
          }
          v35[0] = 0;
          v35[1] = 0;
          PacketDependencyParser::PacketDependencyInfo(*((_DWORD **)this + 80), (uint64_t)v36, (uint64_t)v35);
          if (!LODWORD(v35[0]))
          {
            uint64_t v33 = *((void *)this + 23) + v19;
            if (HIDWORD(v35[0]))
            {
              long long v34 = xmmword_1901C6520;
              WORD4(v34) = WORD2(v35[0]);
              SampleToRollDistanceTable::append_entry((uint64_t)this + 544, (long long *)&v33);
            }
            else
            {
              SyncSampleTable::append_entry((uint64_t)this + 600, &v33);
            }
          }
          ++v19;
        }
        while (v19 != v20);
      }
      AudioFileStreamWrapper::CallPacketsProc(*((AudioFileStreamWrapper **)this + 1), v12, v11, __p, v9, 1);
    }
  }
  if (v9) {
    operator delete(v9);
  }
  if (__p)
  {
    int v41 = __p;
    operator delete(__p);
  }
  if (v10) {
    return 1718449215;
  }
  else {
    return 0;
  }
}

void sub_19014F930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t LOASAudioStream::ScanForSyncWord(LOASAudioStream *this, int a2, const unsigned __int8 *a3, unsigned int *a4, unsigned int *a5, char a6, unsigned int *a7)
{
  signed int v9 = *a4;
  unsigned int v34 = 0;
  *a5 = 0;
  *a7 = 0;
  signed int v10 = a2 - 3;
  if (v9 <= a2 - 3)
  {
    do
    {
      uint64_t v14 = (unsigned __int8 *)&a3[v9];
      unsigned int v15 = a2 - v9;
      if (MP4::LOASHeader::IsLOASSyncWord((MP4::LOASHeader *)v14, (const unsigned __int8 *)(a2 - v9), &v34, a4))
      {
        *a5 = v34;
        uint64_t result = 1;
        goto LABEL_37;
      }
      if (a6)
      {
        BOOL v16 = *(_WORD *)v14 == 17481 && v14[2] == 51;
        if (v16)
        {
          if (v15 < 0xA) {
            break;
          }
          uint64_t v18 = *((void *)this + 1);
          int v19 = v14 - *(void *)(v18 + 72);
          *((_DWORD *)this + 131) = v19;
          *((void *)this + 6std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = *(void *)(v18 + 88) + v19;
          if ((a6 & 2) != 0)
          {
            LODWORD(v20) = *((char *)this + 536);
            if ((v20 & 0x80000000) != 0)
            {
              uint64_t v21 = *(void *)(v18 + 48);
              uint64_t v20 = *(void *)(v18 + 56) - v21;
              if (v20)
              {
                unint64_t v22 = 0;
                unint64_t v23 = v20 >> 2;
                unsigned int v24 = 1;
                do
                {
                  BOOL v16 = *(_DWORD *)(v21 + 4 * v22) == 1768174437;
                  LODWORD(v20) = v16;
                  unint64_t v22 = v24++;
                  BOOL v25 = !v16 && v23 > v22;
                }
                while (v25);
              }
              *((unsigned char *)this + 53std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v20;
            }
            if (v20)
            {
              int v35 = 0;
              int v26 = *(void (**)(void, void, uint64_t, int *))(v18 + 24);
              if (v26) {
                v26(*(void *)(v18 + 40), *(unsigned int *)(v18 + 8), 1768174437, &v35);
              }
            }
          }
        }
        else
        {
          if (*(_WORD *)v14 != 16724 || v14[2] != 71) {
            goto LABEL_33;
          }
          if (v15 < 0xA) {
            break;
          }
        }
        unsigned int v27 = ID3Size(0xAu, &a3[v9], &v33);
        if (v27)
        {
          unsigned int v28 = v27;
          if (v15 < v27)
          {
            uint64_t result = 0;
            *a7 = v9 - a2 + v28;
            goto LABEL_35;
          }
          int v29 = v27 - 1;
        }
        else
        {
          int v29 = 2;
        }
        v9 += v29;
      }
LABEL_33:
      BOOL v25 = v9++ < v10;
    }
    while (v25);
  }
  uint64_t result = 0;
LABEL_35:
  signed int v9 = a2;
LABEL_37:
  *a4 = v9;
  return result;
}

uint64_t LOASAudioStream::ParseHeader(LOASAudioStream *this, uint64_t a2)
{
  uint64_t v4 = 1718449215;
  int v5 = *((_DWORD *)this + 59);
  if (v5 <= 87)
  {
    if (v5 == -1) {
      return 0;
    }
    if (!v5) {
      goto LABEL_10;
    }
    goto LABEL_7;
  }
  if (v5 == 105)
  {
    uint64_t v6 = *((void *)this + 1);
    LODWORD(v7) = *(_DWORD *)(v6 + 116);
    goto LABEL_38;
  }
  if (v5 == 88)
  {
    while (1)
    {
      while (1)
      {
LABEL_10:
        uint64_t v8 = *((void *)this + 1);
        uint64_t v9 = *(void *)(v8 + 88);
        uint64_t v10 = *(void *)(v8 + 96);
        uint64_t v11 = v9 + *(unsigned int *)(v8 + 80);
        BOOL v12 = v10 < v9 || v11 <= v10;
        if (v12 || v11 == v10)
        {
          uint64_t v4 = 0;
          int v71 = 88;
          goto LABEL_180;
        }
        *((unsigned char *)this + 648) = 0;
        *((_DWORD *)this + 163) = 0;
        *((_DWORD *)this + 11std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
        int v13 = LOASAudioStream::ScanForSyncWord(this, (int)v11 - (int)v10, (const unsigned __int8 *)(*(void *)(v8 + 72) + (v10 - v9)), (unsigned int *)this + 163, (unsigned int *)this + 116, 0, (unsigned int *)&inSpecifier);
        *((unsigned char *)this + 648) = v13;
        size_t v14 = *((unsigned int *)this + 116);
        *((_DWORD *)this + 64) = v14;
        uint64_t v6 = *((void *)this + 1);
        uint64_t v15 = *(unsigned int *)(v6 + 80);
        uint64_t v16 = *(void *)(v6 + 88);
        uint64_t v17 = *(void *)(v6 + 96);
        uint64_t v18 = v16 + v15;
        BOOL v20 = v17 < v16 || v18 <= v17;
        unsigned int v21 = v18 - v17;
        if (v20) {
          size_t v7 = 0;
        }
        else {
          size_t v7 = v21;
        }
        if (v7 < v14)
        {
          *((void *)this + 34) = v17;
          unint64_t v22 = *(char **)(v6 + 72);
          if (v22 == *(char **)(v6 + 128))
          {
            if (v21) {
              int v23 = v20;
            }
            else {
              int v23 = 1;
            }
            if (v23) {
              unsigned int v24 = 0;
            }
            else {
              unsigned int v24 = &v22[(v17 - v16)];
            }
            memmove(v22, v24, v7);
            size_t v25 = *((unsigned int *)this + 116);
            uint64_t v6 = *((void *)this + 1);
            if (*(_DWORD *)(v6 + 120) < v25)
            {
              *(_DWORD *)(v6 + 120) = v25;
              CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v6 + 128), v25);
              uint64_t v6 = *((void *)this + 1);
            }
            *(_DWORD *)(v6 + 11std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v7;
            *(void *)(v6 + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = *(void *)(v6 + 88) + *(unsigned int *)(v6 + 80);
          }
          else
          {
            if (*(_DWORD *)(v6 + 120) < v14)
            {
              *(_DWORD *)(v6 + 120) = v14;
              CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v6 + 128), v14);
              uint64_t v6 = *((void *)this + 1);
            }
            LODWORD(v7) = 0;
            *(_DWORD *)(v6 + 11std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
          }
LABEL_38:
          unsigned int v26 = *((_DWORD *)this + 64) - v7;
          uint64_t v27 = *(void *)(v6 + 88);
          uint64_t v28 = *(void *)(v6 + 96);
          uint64_t v29 = v27 + *(unsigned int *)(v6 + 80);
          if (v29 <= v28 || v28 < v27) {
            unsigned int v31 = 0;
          }
          else {
            unsigned int v31 = v29 - v28;
          }
          if (v26 <= v31) {
            unsigned int v26 = v31;
          }
          LODWORD(inSpecifier.mASBD.mSampleRate) = v26;
          size_t v32 = v26 + v7;
          if (*(_DWORD *)(v6 + 120) < v32)
          {
            *(_DWORD *)(v6 + 120) = v32;
            CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v6 + 128), v32);
            uint64_t v6 = *((void *)this + 1);
          }
          StreamBuffer::Copy((void *)(v6 + 72), (unsigned int *)&inSpecifier, (unsigned __int8 *)(*(void *)(v6 + 128) + *(unsigned int *)(v6 + 116)));
          uint64_t v6 = *((void *)this + 1);
          LODWORD(v15) = *(_DWORD *)(v6 + 116) + LODWORD(inSpecifier.mASBD.mSampleRate);
          *(_DWORD *)(v6 + 11std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v15;
          if (v15 < *((_DWORD *)this + 64))
          {
            uint64_t v4 = 0;
            int v71 = 105;
            goto LABEL_180;
          }
          uint64_t v16 = *((void *)this + 34);
          uint64_t v33 = *(void *)(v6 + 128);
          *(void *)(v6 + 88) = v16;
          *(void *)(v6 + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v16;
          *(void *)(v6 + 72) = v33;
          *(_DWORD *)(v6 + 80) = v15;
          int v13 = *((unsigned __int8 *)this + 648);
          uint64_t v17 = v16;
        }
        uint64_t v34 = v16 + v15;
        if (v13) {
          break;
        }
        *(void *)(v6 + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v34;
      }
      if (*((unsigned char *)this + 405) && !*((unsigned char *)this + 404))
      {
        *((void *)this + 13) = v17 + *((unsigned int *)this + 163);
        *((unsigned char *)this + 404) = 1;
      }
      int v35 = 0;
      BOOL v36 = v17 < v16 || v34 <= v17;
      int v37 = v36;
      unsigned int v38 = v34 - v17;
      if (!v36 && v38) {
        int v35 = (unsigned __int8 *)(*(void *)(v6 + 72) + (v17 - v16));
      }
      unsigned int v116 = 0;
      v117[0] = 1;
      v118[0] = 0;
      *(_DWORD *)((char *)v118 + 7) = 0;
      *(void *)((char *)&v118[2] + 4) = 0;
      *(void *)((char *)&v118[3] + 4) = 0;
      *(void *)((char *)&v118[1] + 4) = 0;
      if (v37) {
        uint64_t v39 = 0;
      }
      else {
        uint64_t v39 = v38;
      }
      v114[0] = v35;
      v114[1] = &v35[v39];
      uint64_t v115 = 0;
      if ((v35 & 3) != 0 && v39)
      {
        int v40 = 0;
        char v41 = (_BYTE)v35 + 1;
        int v42 = -8;
        uint64_t v43 = v35 + 1;
        do
        {
          LODWORD(v115) = v40 << 8;
          HIDWORD(v115) = v42 + 16;
          v114[0] = v43;
          int v44 = *(v43 - 1) | (v40 << 8);
          LODWORD(v115) = v44;
          v42 += 8;
          if ((v41 & 3) == 0) {
            break;
          }
          ++v41;
          int v40 = v44;
          BOOL v45 = v43++ >= &v35[v39];
        }
        while (!v45);
        LODWORD(v115) = v44 << (24 - v42);
      }
      if (MP4::LOASHeader::Deserialize(&v116, (uint64_t)v114)) {
        goto LABEL_119;
      }
      memset(&v113, 0, sizeof(v113));
      memset(&v112, 0, sizeof(v112));
      unsigned int v111 = -65536;
      if (MP4::LATMHeader::StreamFormatInfo((uint64_t)v117, v35 + 3, (int)v39 - 3, (std::vector<char> *)this + 14, &v113, &v112, &v111))
      {
        (*(void (**)(LOASAudioStream *, AudioStreamBasicDescription *))(*(void *)this + 56))(this, &v112);
        std::vector<char>::pointer begin = v113.__begin_;
        size_t v47 = v113.__end_ - v113.__begin_;
        CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)this + 15, (LODWORD(v113.__end_) - LODWORD(v113.__begin_)), 0);
        memcpy(*((void **)this + 15), begin, v47);
        *((_DWORD *)this + 32) = v47;
        unsigned int v48 = v111;
        if (v111 != -65536)
        {
          CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)this + 17, 0x20uLL, 0);
          bzero(*((void **)this + 17), 0x20uLL);
          *((_DWORD *)this + 3std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 32;
          **((_DWORD **)this + 17) = v48;
        }
        memset(&inSpecifier, 0, 40);
        inSpecifier.mASBD.signed int mFormatID = v112.mFormatID;
        inSpecifier.mMagicCookie = begin;
        *(void *)&inSpecifier.mMagicCookieSize = v47;
        UInt32 outPropertyDataSize = 0;
        int v49 = 0;
        if (!AudioFormatGetPropertyInfo(0x666C7374u, 0x38u, &inSpecifier, &outPropertyDataSize)
          && outPropertyDataSize >= 0x30)
        {
          std::vector<AudioFormatListItem>::vector(__p, outPropertyDataSize / 0x30uLL);
          int v49 = 0;
          if (!AudioFormatProperty_FormatList(&inSpecifier, 0x38u, &outPropertyDataSize, (AudioFormatListItem *)__p[0]))
          {
            int v49 = 1;
            (*(void (**)(LOASAudioStream *, void, void *))(*(void *)this + 64))(this, outPropertyDataSize, __p[0]);
          }
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        UInt32 ioPropertyDataSize = 4;
        AudioFormatGetProperty(0x66646570u, 0x28u, &v112, &ioPropertyDataSize, (char *)this + 632);
        if (*((_DWORD *)this + 158)) {
          operator new();
        }
        uint64_t v50 = *((void *)this + 1);
        uint64_t v51 = *(void *)(v50 + 96) + *((unsigned int *)this + 163);
        if (!*((unsigned char *)this + 404))
        {
          *((void *)this + 13) = v51;
          *((unsigned char *)this + 404) = 1;
        }
        *(void *)(v50 + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v51;
        LODWORD(__p[0]) = 1;
        if (!*(unsigned char *)(v50 + 104))
        {
          *(unsigned char *)(v50 + 104) = 1;
          unsigned int v52 = *(void (**)(void, void, uint64_t, void **))(v50 + 24);
          if (v52)
          {
            v52(*(void *)(v50 + 40), *(unsigned int *)(v50 + 8), 1717988724, __p);
            uint64_t v50 = *((void *)this + 1);
          }
        }
        LODWORD(__p[0]) = 1;
        unsigned int v53 = *(void (**)(void, void, uint64_t, void **))(v50 + 24);
        if (v53)
        {
          v53(*(void *)(v50 + 40), *(unsigned int *)(v50 + 8), 1685022310, __p);
          uint64_t v50 = *((void *)this + 1);
          int v54 = *(void (**)(void, void, uint64_t, void **))(v50 + 24);
          LODWORD(__p[0]) = 1;
          if (v54)
          {
            v54(*(void *)(v50 + 40), *(unsigned int *)(v50 + 8), 1920098672, __p);
            uint64_t v50 = *((void *)this + 1);
          }
        }
        else
        {
          LODWORD(__p[0]) = 1;
        }
        LODWORD(__p[0]) = 1;
        if (!*(unsigned char *)(v50 + 105))
        {
          *(unsigned char *)(v50 + 105) = 1;
          size_t v56 = *(void (**)(void, void, uint64_t, void **))(v50 + 24);
          if (v56)
          {
            v56(*(void *)(v50 + 40), *(unsigned int *)(v50 + 8), 1684434292, __p);
            uint64_t v50 = *((void *)this + 1);
          }
        }
        if (*((_DWORD *)this + 32))
        {
          LODWORD(__p[0]) = 1;
          *(unsigned char *)(v50 + 108) = 1;
          unsigned int v57 = *(void (**)(void, void, uint64_t, void **))(v50 + 24);
          if (v57)
          {
            v57(*(void *)(v50 + 40), *(unsigned int *)(v50 + 8), 1835493731, __p);
            uint64_t v50 = *((void *)this + 1);
          }
        }
        if (v48 != -65536)
        {
          LODWORD(__p[0]) = 1;
          if (!*(unsigned char *)(v50 + 109))
          {
            *(unsigned char *)(v50 + 109) = 1;
            uint64_t v58 = *(void (**)(void, void, uint64_t, void **))(v50 + 24);
            if (v58)
            {
              v58(*(void *)(v50 + 40), *(unsigned int *)(v50 + 8), 1668112752, __p);
              uint64_t v50 = *((void *)this + 1);
            }
          }
        }
        if (v49)
        {
          LODWORD(__p[0]) = 1;
          *(unsigned char *)(v50 + 108) = 1;
          uint64_t v59 = *(void (**)(void, void, uint64_t, void **))(v50 + 24);
          if (v59)
          {
            v59(*(void *)(v50 + 40), *(unsigned int *)(v50 + 8), 1718383476, __p);
            uint64_t v50 = *((void *)this + 1);
          }
        }
        LODWORD(__p[0]) = 1;
        if (!*(_DWORD *)(v50 + 112))
        {
          *(_DWORD *)(v50 + 112) = 1;
          uint64_t v60 = *(void (**)(void, void, uint64_t, void **))(v50 + 24);
          if (v60) {
            v60(*(void *)(v50 + 40), *(unsigned int *)(v50 + 8), 1919247481, __p);
          }
        }
        int v55 = 4;
        goto LABEL_161;
      }
      if (!*((unsigned char *)this + 405)) {
        goto LABEL_160;
      }
      if (*((_DWORD *)this + 102) < 0x2EEu) {
        break;
      }
      *((_DWORD *)this + 59) = -1;
      int v55 = 1;
LABEL_161:
      if (v113.__begin_) {
        operator delete(v113.__begin_);
      }
      if (v55)
      {
        if (v55 != 1)
        {
          uint64_t v95 = 0;
          *(void *)a2 = this;
          *(void *)(a2 + 8) = AudioFileStreamObject::GeneratePackets;
          *(void *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
          uint64_t v96 = *((void *)this + 1);
          uint64_t v97 = *(void *)(v96 + 88);
          uint64_t v98 = *(void *)(v96 + 96);
          uint64_t v99 = v97 + *(unsigned int *)(v96 + 80);
          BOOL v100 = v98 < v97 || v99 <= v98;
          int v101 = v100;
          int v102 = v99 - v98;
          if (!v100 && v102) {
            uint64_t v95 = *(void *)(v96 + 72) + (v98 - v97);
          }
          uint64_t v4 = 0;
          *(void *)(a2 + 32) = v95;
          if (v101) {
            int v103 = 0;
          }
          else {
            int v103 = v102;
          }
          *(_DWORD *)(a2 + 24) = v103;
        }
        return v4;
      }
    }
    unsigned int v61 = 0;
    int v62 = 0;
    uint64_t v63 = 0;
    uint64_t v64 = (char *)*((void *)this + 55);
    CFStringRef v65 = (char *)*((void *)this + 56);
    uint64_t v66 = (v65 - v64) >> 4;
    if (v65 != v64)
    {
      uint64_t v63 = *((void *)v65 - 2);
      int v62 = *((_DWORD *)v65 - 2);
      unsigned int v61 = *((_DWORD *)v65 - 1);
    }
    uint64_t v67 = v63 + v61;
    int v68 = *((_DWORD *)this + 116);
    unint64_t v69 = *((void *)this + 57);
    if ((unint64_t)v65 >= v69)
    {
      unint64_t v72 = v66 + 1;
      unint64_t v73 = (unint64_t)(v66 + 1) >> 60;
      if (v73) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v74 = 0;
      uint64_t v75 = v69 - (void)v64;
      if (v75 >> 3 > v72) {
        unint64_t v72 = v75 >> 3;
      }
      BOOL v45 = (unint64_t)v75 >= 0x7FFFFFFFFFFFFFF0;
      unint64_t v76 = 0xFFFFFFFFFFFFFFFLL;
      if (!v45) {
        unint64_t v76 = v72;
      }
      if (v76)
      {
        unint64_t v73 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v76);
        uint64_t v64 = (char *)*((void *)this + 55);
        CFStringRef v65 = (char *)*((void *)this + 56);
      }
      unint64_t v77 = v73 + 16 * v66;
      *(void *)unint64_t v77 = v67;
      unint64_t v78 = v73 + 16 * v74;
      *(_DWORD *)(v77 + 8) = v62;
      *(_DWORD *)(v77 + 12) = v68;
      uint64_t v70 = (_DWORD *)(v77 + 16);
      if (v65 != v64)
      {
        do
        {
          *(_OWORD *)(v77 - 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = *((_OWORD *)v65 - 1);
          v77 -= 16;
          v65 -= 16;
        }
        while (v65 != v64);
        uint64_t v64 = (char *)*((void *)this + 55);
      }
      *((void *)this + 55) = v77;
      *((void *)this + 5std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v70;
      *((void *)this + 57) = v78;
      if (v64) {
        operator delete(v64);
      }
    }
    else
    {
      *(void *)CFStringRef v65 = v67;
      uint64_t v70 = v65 + 16;
      *((_DWORD *)v65 + 2) = v62;
      *((_DWORD *)v65 + 3) = v68;
    }
    *((void *)this + 5std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v70;
    int64_t v79 = *((unsigned int *)this + 116);
    if (v79)
    {
      unsigned int v81 = (char *)*((void *)this + 53);
      uint64_t v80 = *((void *)this + 54);
      uint64_t v82 = v81;
      if (v80 - (uint64_t)v81 >= v79)
      {
        if (*((_DWORD *)this + 116))
        {
          memmove(v81, v35, v79);
          *((void *)this + 53) = &v81[v79];
          uint64_t v4 = 1718449215;
        }
        else
        {
          int v93 = (char *)*((void *)this + 53);
          if (&v81[-v79] < v81)
          {
            uint64_t v94 = 0;
            do
            {
              v81[v94] = v81[v94];
              ++v94;
            }
            while (v94);
            int v93 = v81;
          }
          *((void *)this + 53) = v93;
          uint64_t v4 = 1718449215;
          if (v81 != &v81[v79]) {
            memmove(&v81[v79], v81, -v79);
          }
          if (&v35[v79] != v35) {
            memmove(v81, v35, v79);
          }
        }
      }
      else
      {
        uint64_t v83 = *((void *)this + 52);
        uint64_t v84 = &v81[-v83];
        uint64_t v85 = (uint64_t)&v81[v79 - v83];
        if (v85 < 0) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        char v105 = (char *)*((void *)this + 52);
        uint64_t v106 = a2;
        unsigned int v86 = 0;
        unint64_t v87 = v80 - v83;
        if (2 * v87 > v85) {
          uint64_t v85 = 2 * v87;
        }
        if (v87 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v88 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v88 = v85;
        }
        if (v88) {
          unsigned int v86 = (char *)operator new(v88);
        }
        uint64_t v89 = &v84[(void)v86];
        uint64_t v90 = &v86[v88];
        memcpy(&v84[(void)v86], v35, v79);
        BOOL v91 = &v84[(void)v86 + v79];
        if (v105 != v81)
        {
          do
          {
            v84[(void)v86 - 1] = v84[(void)(v105 - 1)];
            --v84;
          }
          while (v84);
          uint64_t v82 = (char *)*((void *)this + 53);
          uint64_t v89 = v86;
        }
        if (v82 != v81) {
          memmove(v91, v81, v82 - v81);
        }
        int v92 = (void *)*((void *)this + 52);
        *((void *)this + 52) = v89;
        *((void *)this + 53) = &v91[v82 - v81];
        *((void *)this + 54) = v90;
        a2 = v106;
        uint64_t v4 = 1718449215;
        if (v92) {
          operator delete(v92);
        }
      }
    }
    ++*((_DWORD *)this + 102);
LABEL_160:
    int v55 = 0;
    *(void *)(*((void *)this + 1) + 96) += *((unsigned int *)this + 163)
                                               + (unint64_t)*((unsigned int *)this + 116);
    *((unsigned char *)this + 648) = 0;
    goto LABEL_161;
  }
LABEL_7:
  uint64_t v4 = 0;
LABEL_119:
  int v71 = -1;
LABEL_180:
  *((_DWORD *)this + 59) = v71;
  return v4;
}

void sub_19015063C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  uint64_t v16 = *(void **)(v14 + 48);
  if (v16) {
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t LOASAudioStream::GetProperty(LOASAudioStream *this, int a2, unsigned int *a3, void *__dst)
{
  if (a2 > 1768174432)
  {
    if (a2 == 1768174433)
    {
      uint64_t Property = 561211770;
      if (a3 && *a3 == 8)
      {
        uint64_t Property = 0;
        void *__dst = *((void *)this + 66);
      }
      return Property;
    }
    if (a2 != 1835493731)
    {
      if (a2 != 1768174437) {
        goto LABEL_34;
      }
      uint64_t Property = 561211770;
      if (!a3 || *a3 != 4) {
        return Property;
      }
      uint64_t Property = 0;
      int v11 = *((_DWORD *)this + 131);
      goto LABEL_21;
    }
    uint64_t v18 = *((void *)this + 1);
    int v19 = *(const void **)(v18 + 136);
    if (v19)
    {
      AudioFormatGetProperty(0x78686D63u, 0xCu, v19, a3, __dst);
      return 0;
    }
    if (*((unsigned char *)this + 177)) {
      return 1685348671;
    }
    if (*(_DWORD *)(v18 + 112)) {
      uint64_t Property = 1970170687;
    }
    else {
      uint64_t Property = 1836020325;
    }
    if (!*(unsigned char *)(v18 + 108)) {
      return Property;
    }
    size_t v21 = *a3;
    if (v21 != *((_DWORD *)this + 32)) {
      return 561211770;
    }
    unint64_t v22 = (const void *)*((void *)this + 15);
LABEL_79:
    memcpy(__dst, v22, v21);
    return 0;
  }
  switch(a2)
  {
    case 1668112752:
      uint64_t v12 = *((void *)this + 1);
      int v13 = *(const void **)(v12 + 136);
      if (v13)
      {
        if (*a3 != *((_DWORD *)this + 36)) {
          return 561211770;
        }
        ioPropertyDataSize[0] = 32;
        uint64_t Property = AudioFormatGetProperty(0x7868636Cu, 0xCu, v13, ioPropertyDataSize, &outPropertyData);
        if (Property) {
          return Property;
        }
        int v11 = **(_DWORD **)(*((void *)this + 1) + 136);
LABEL_21:
        *(_DWORD *)__dst = v11;
        return Property;
      }
      if (*((unsigned char *)this + 177)) {
        return 1685348671;
      }
      if (*(_DWORD *)(v12 + 112)) {
        uint64_t Property = 1970170687;
      }
      else {
        uint64_t Property = 1836020325;
      }
      if (!*(unsigned char *)(v12 + 109)) {
        return Property;
      }
      size_t v21 = *a3;
      if (v21 != *((_DWORD *)this + 36)) {
        return 561211770;
      }
      unint64_t v22 = (const void *)*((void *)this + 17);
      goto LABEL_79;
    case 1684434292:
      uint64_t v14 = *((void *)this + 1);
      uint64_t v15 = *(const void **)(v14 + 136);
      if (v15)
      {
        uint64_t v38 = 0;
        long long outPropertyData = 0u;
        long long v37 = 0u;
        uint64_t v16 = AudioFormatGetProperty(0x78686173u, 0xCu, v15, a3, &outPropertyData);
        if (*a3 == 40)
        {
          uint64_t Property = v16;
          if (!v16)
          {
            long long v17 = v37;
            *(_OWORD *)__dst = outPropertyData;
            *((_OWORD *)__dst + 1) = v17;
            __dst[4] = v38;
          }
          return Property;
        }
        return 561211770;
      }
      if (!*((unsigned char *)this + 177))
      {
        if (*(_DWORD *)(v14 + 112)) {
          uint64_t Property = 1970170687;
        }
        else {
          uint64_t Property = 1836020325;
        }
        if (!*(unsigned char *)(v14 + 105)) {
          return Property;
        }
        if (*a3 != 40) {
          return 561211770;
        }
        uint64_t Property = 0;
        long long v23 = *(_OWORD *)((char *)this + 24);
        long long v24 = *(_OWORD *)((char *)this + 40);
        __dst[4] = *((void *)this + 7);
        *(_OWORD *)__dst = v23;
        *((_OWORD *)__dst + 1) = v24;
        return Property;
      }
      return 1685348671;
    case 1718383476:
      size_t v7 = *(unsigned int **)(*((void *)this + 1) + 136);
      if (v7)
      {
        uint64_t Property = 1836020325;
        int v9 = bswap32(*v7);
        if (v9 <= 1902207330)
        {
          if (v9 <= 1885430114)
          {
            if (v9 != 1633772320)
            {
              if (v9 != 1633772392)
              {
                int v10 = 1633772400;
                goto LABEL_60;
              }
LABEL_67:
              UInt32 outSize = 2;
              OSType v25 = 1633772392;
              unsigned int v26 = 96;
LABEL_68:
              if (v26 <= *a3)
              {
                *(void *)UInt32 ioPropertyDataSize = 0;
                uint64_t v27 = OpenCodecComponent(v25, (OpaqueAudioComponentInstance **)ioPropertyDataSize, 0x61646563u);
                if (v27) {
                  return v27;
                }
                UInt32 outPropertyDataSize = 88;
                AudioFormatGetPropertyInfo(0x78686D63u, 0xCu, *(const void **)(*((void *)this + 1) + 136), &outPropertyDataSize);
                uint64_t v28 = malloc_type_calloc(1uLL, outPropertyDataSize, 0xC1FED70uLL);
                AudioFormatGetProperty(0x78686D63u, 0xCu, *(const void **)(*((void *)this + 1) + 136), &outPropertyDataSize, v28);
                Boolean outWritable = 0;
                uint64_t PropertyInfo = AudioCodecGetPropertyInfo(*(AudioCodec *)ioPropertyDataSize, 0x6163666Cu, &outSize, &outWritable);
                if (PropertyInfo)
                {
                  uint64_t Property = PropertyInfo;
                  AudioComponentInstanceDispose(*(AudioComponentInstance *)ioPropertyDataSize);
                }
                else
                {
                  std::vector<unsigned char>::vector(&outPropertyData, outSize);
                  int v30 = (void *)outPropertyData;
                  *(_DWORD *)long long outPropertyData = outPropertyDataSize;
                  v30[1] = v28;
                  uint64_t Property = AudioCodecGetProperty(*(AudioCodec *)ioPropertyDataSize, 0x6163666Cu, &outSize, v30);
                  if (!Property)
                  {
                    size_t v31 = outSize;
                    *a3 = outSize;
                    memcpy(__dst, (const void *)outPropertyData, v31);
                  }
                  AudioComponentInstanceDispose(*(AudioComponentInstance *)ioPropertyDataSize);
                  if ((void)outPropertyData)
                  {
                    *((void *)&outPropertyData + 1) = outPropertyData;
                    operator delete((void *)outPropertyData);
                  }
                }
                return Property;
              }
              return 561211770;
            }
            goto LABEL_65;
          }
          if (v9 == 1885430115) {
            goto LABEL_65;
          }
          if (v9 == 1885430632) {
            goto LABEL_67;
          }
          int v10 = 1885430640;
LABEL_60:
          if (v9 != v10) {
            return Property;
          }
          goto LABEL_66;
        }
        if (v9 <= 2053202274)
        {
          if (v9 == 1902207331) {
            goto LABEL_65;
          }
          if (v9 == 1902207848) {
            goto LABEL_67;
          }
          int v10 = 1902207856;
          goto LABEL_60;
        }
        switch(v9)
        {
          case 2053202800:
LABEL_66:
            UInt32 outSize = 3;
            OSType v25 = 1633772400;
            unsigned int v26 = 144;
            goto LABEL_68;
          case 2053202792:
            goto LABEL_67;
          case 2053202275:
LABEL_65:
            OSType v25 = 1633772320;
            UInt32 outSize = 1;
            unsigned int v26 = 48;
            goto LABEL_68;
        }
        return Property;
      }
      a2 = 1718383476;
      break;
  }
LABEL_34:
  return AudioFileStreamObject::GetProperty(this, a2, a3, __dst);
}

void sub_190150C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t LOASAudioStream::GetPropertyInfo(LOASAudioStream *this, int a2, unsigned int *a3, unsigned __int8 *a4)
{
  switch(a2)
  {
    case 1768174433:
      if (!a3) {
        goto LABEL_9;
      }
      unsigned int v6 = 8;
LABEL_8:
      *a3 = v6;
LABEL_9:
      if (a4)
      {
        uint64_t result = 0;
        *a4 = 0;
        return result;
      }
      return 0;
    case 1835493731:
      uint64_t v8 = *((void *)this + 1);
      int v9 = *(const void **)(v8 + 136);
      if (v9)
      {
        UInt32 outPropertyDataSize = 0;
        uint64_t result = AudioFormatGetPropertyInfo(0x78686D63u, 0xCu, v9, &outPropertyDataSize);
        if (!a3 || result) {
          return result;
        }
        UInt32 v10 = outPropertyDataSize;
      }
      else
      {
        if (*((unsigned char *)this + 177)) {
          return 1685348671;
        }
        if (*(_DWORD *)(v8 + 112)) {
          uint64_t result = 1970170687;
        }
        else {
          uint64_t result = 1836020325;
        }
        if (a4)
        {
          *a4 = 0;
          uint64_t v8 = *((void *)this + 1);
        }
        if (!*(unsigned char *)(v8 + 108)) {
          return result;
        }
        if (!a3) {
          return 0;
        }
        uint64_t result = 0;
        UInt32 v10 = *((_DWORD *)this + 32);
      }
      *a3 = v10;
      return result;
    case 1768174437:
      if (!a3) {
        goto LABEL_9;
      }
      unsigned int v6 = 4;
      goto LABEL_8;
  }
  return AudioFileStreamObject::GetPropertyInfo(this, a2, a3, a4);
}

void LOASAudioStream::~LOASAudioStream(LOASAudioStream *this)
{
  LOASAudioStream::~LOASAudioStream(this);
  JUMPOUT(0x192FC8940);
}

{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t vars8;

  *(void *)this = &unk_1EDF90750;
  int v2 = *((void *)this + 80);
  if (v2) {
    MEMORY[0x192FC8940](v2, 0x1000C403E1C8BA9);
  }
  size_t v3 = (void *)*((void *)this + 76);
  if (v3)
  {
    *((void *)this + 77) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 72);
  if (v4)
  {
    *((void *)this + 73) = v4;
    operator delete(v4);
  }
  int v5 = (void *)*((void *)this + 69);
  if (v5)
  {
    *((void *)this + 70) = v5;
    operator delete(v5);
  }
  unsigned int v6 = (void *)*((void *)this + 55);
  if (v6)
  {
    *((void *)this + 5std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v6;
    operator delete(v6);
  }
  size_t v7 = (void *)*((void *)this + 52);
  if (v7)
  {
    *((void *)this + 53) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 42);
  if (v8)
  {
    *((void *)this + 43) = v8;
    operator delete(v8);
  }
  AudioFileStreamObject::~AudioFileStreamObject(this);
}

uint64_t MP4CelpSpecificConfig::Deserialize(_DWORD *a1, uint64_t a2)
{
  int Bit = TBitstreamReader<unsigned int>::GetBit(a2);
  a1[3] = Bit;
  int v5 = TBitstreamReader<unsigned int>::GetBit(a2);
  if (Bit)
  {
    a1[4] = v5;
    a1[5] = TBitstreamReader<unsigned int>::GetBit(a2);
    a1[6] = TBitstreamReader<unsigned int>::GetBit(a2);
    if (a1[2] == 24) {
      a1[7] = TBitstreamReader<unsigned int>::GetBit(a2);
    }
    unsigned int v7 = *(_DWORD *)(a2 + 16);
    int v6 = *(_DWORD *)(a2 + 20);
    if (a1[4])
    {
      unsigned int v8 = v7 >> 29;
      int v9 = v6 - 3;
      *(_DWORD *)(a2 + 20) = v9;
      if (v9 < 0)
      {
        TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
        *(void *)a2 += 4;
        unsigned int v18 = *(_DWORD *)(a2 + 16);
        int v19 = *(_DWORD *)(a2 + 20);
        v8 |= v18 >> v19;
        *(_DWORD *)(a2 + 20) = v19 + 32;
        if (v19 == -32) {
          int v10 = 0;
        }
        else {
          int v10 = v18 << -(char)v19;
        }
      }
      else
      {
        int v10 = 8 * v7;
      }
      *(_DWORD *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v10;
      a1[8] = v8;
      goto LABEL_36;
    }
    unsigned int v15 = v7 >> 27;
    int v16 = v6 - 5;
    *(_DWORD *)(a2 + 20) = v16;
    if (v16 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
      long long v23 = (unsigned int *)(*(void *)a2 + 4);
      *(void *)a2 = v23;
      unsigned int v24 = *(_DWORD *)(a2 + 16);
      int v25 = *(_DWORD *)(a2 + 20);
      v15 |= v24 >> v25;
      int v16 = v25 + 32;
      if (v25 == -32)
      {
        unsigned int v26 = 0;
        a1[9] = v15;
        *(void *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0xFFFFFFFE00000000;
        goto LABEL_30;
      }
      unsigned int v17 = v24 << -(char)v25;
    }
    else
    {
      unsigned int v17 = 32 * v7;
    }
    a1[9] = v15;
    unsigned int v26 = v17 >> 30;
    int v27 = v16 - 2;
    *(_DWORD *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v17;
    *(_DWORD *)(a2 + 20) = v27;
    if (v27 >= 0)
    {
      int v28 = 4 * v17;
LABEL_33:
      *(_DWORD *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v28;
      a1[10] = v26;
      a1[11] = TBitstreamReader<unsigned int>::GetBit(a2);
      goto LABEL_36;
    }
    long long v23 = *(unsigned int **)a2;
LABEL_30:
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, v23);
    *(void *)a2 += 4;
    unsigned int v31 = *(_DWORD *)(a2 + 16);
    int v32 = *(_DWORD *)(a2 + 20);
    v26 |= v31 >> v32;
    *(_DWORD *)(a2 + 20) = v32 + 32;
    if (v32 == -32) {
      int v28 = 0;
    }
    else {
      int v28 = v31 << -(char)v32;
    }
    goto LABEL_33;
  }
  a1[12] = v5;
  unsigned int v11 = *(_DWORD *)(a2 + 16);
  unsigned int v12 = v11 >> 30;
  int v13 = *(_DWORD *)(a2 + 20) - 2;
  *(_DWORD *)(a2 + 20) = v13;
  if (v5)
  {
    if (v13 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
      *(void *)a2 += 4;
      unsigned int v21 = *(_DWORD *)(a2 + 16);
      int v22 = *(_DWORD *)(a2 + 20);
      v12 |= v21 >> v22;
      *(_DWORD *)(a2 + 20) = v22 + 32;
      if (v22 == -32) {
        int v14 = 0;
      }
      else {
        int v14 = v21 << -(char)v22;
      }
    }
    else
    {
      int v14 = 4 * v11;
    }
    *(_DWORD *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v14;
    a1[13] = v12;
  }
  else
  {
    if (v13 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
      *(void *)a2 += 4;
      unsigned int v29 = *(_DWORD *)(a2 + 16);
      int v30 = *(_DWORD *)(a2 + 20);
      v12 |= v29 >> v30;
      *(_DWORD *)(a2 + 20) = v30 + 32;
      if (v30 == -32) {
        int v20 = 0;
      }
      else {
        int v20 = v29 << -(char)v30;
      }
    }
    else
    {
      int v20 = 4 * v11;
    }
    *(_DWORD *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v20;
    a1[14] = v12;
  }
LABEL_36:
  if (a1[2] == 24)
  {
    unsigned int v33 = *(_DWORD *)(a2 + 16);
    unsigned int v34 = v33 >> 30;
    int v35 = *(_DWORD *)(a2 + 20) - 2;
    *(_DWORD *)(a2 + 20) = v35;
    if (v35 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
      *(void *)a2 += 4;
      unsigned int v37 = *(_DWORD *)(a2 + 16);
      int v38 = *(_DWORD *)(a2 + 20);
      v34 |= v37 >> v38;
      *(_DWORD *)(a2 + 20) = v38 + 32;
      if (v38 == -32) {
        int v36 = 0;
      }
      else {
        int v36 = v37 << -(char)v38;
      }
    }
    else
    {
      int v36 = 4 * v33;
    }
    *(_DWORD *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v36;
    a1[15] = v34;
  }
  return 0;
}

void MP4CelpSpecificConfig::~MP4CelpSpecificConfig(MP4CelpSpecificConfig *this)
{
}

uint64_t MP4SpatialAudioSpecificConfig::NumBands(MP4SpatialAudioSpecificConfig *this)
{
  return kBsFreqResTable[*((unsigned int *)this + 5)];
}

uint64_t MP4SpatialAudioSpecificConfig::Deserialize(uint64_t a1, uint64_t a2, int a3)
{
  int v6 = *(_DWORD *)(a2 + 8);
  int v7 = *(_DWORD *)a2;
  int v8 = *(_DWORD *)(a2 + 20);
  MP4SampleRate::Deserialize(*(MP4SampleRate **)(a1 + 8), a2, 1);
  unsigned int v9 = *(_DWORD *)(a2 + 16);
  int v10 = *(_DWORD *)(a2 + 20) - 32;
  *(_DWORD *)(a2 + 20) = v10;
  if (v10 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    unsigned int v12 = *(_DWORD *)(a2 + 16);
    int v11 = *(_DWORD *)(a2 + 20);
    int v14 = v11 + 32;
    BOOL v13 = v11 == -32;
    *(void *)a2 += 4;
    v9 |= v12 >> v11;
    int v15 = v12 << -(char)v11;
    if (v13) {
      int v15 = 0;
    }
    *(_DWORD *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v15;
    *(_DWORD *)(a2 + 20) = v14;
  }
  uint32x4_t v16 = (uint32x4_t)vdupq_n_s32(v9);
  *(_DWORD *)(a1 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v9 >> 25;
  *(int8x16_t *)(a1 + 20) = vandq_s8((int8x16_t)vshlq_u32(v16, (uint32x4_t)xmmword_1901C6530), (int8x16_t)xmmword_1901C6540);
  *(int8x16_t *)(a1 + 3std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = vandq_s8((int8x16_t)vshlq_u32(v16, (uint32x4_t)xmmword_1901C6550), (int8x16_t)xmmword_1901C6560);
  *(int8x8_t *)(a1 + 52) = vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v16.i8, (uint32x2_t)0xFFFFFFFEFFFFFFFCLL), (int8x8_t)0x300000001);
  *(_DWORD *)(a1 + 60) = v9 & 3;
  *(_DWORD *)(a1 + 64) = TBitstreamReader<unsigned int>::GetBit(a2);
  uint64_t v17 = *(unsigned int *)(a1 + 24);
  if (v17 > 7) {
    return 0xFFFFFFFFLL;
  }
  int v65 = v8;
  int v66 = a3;
  uint64_t v19 = 0;
  int v64 = v6 - v7;
  int v20 = (char *)&kBsTreeConfigurationTable[7 * v17];
  unsigned int v21 = *((_DWORD *)v20 + 1);
  unsigned int v22 = *((unsigned __int16 *)v20 + 5);
  if (v21 <= 1) {
    uint64_t v23 = 1;
  }
  else {
    uint64_t v23 = v21;
  }
  do
  {
    if ((v22 >> v19))
    {
      unsigned int v24 = *(_DWORD *)(a2 + 16);
      unsigned int v25 = v24 >> 27;
      int v26 = *(_DWORD *)(a2 + 20) - 5;
      *(_DWORD *)(a2 + 20) = v26;
      if (v26 < 0)
      {
        TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
        *(void *)a2 += 4;
        unsigned int v28 = *(_DWORD *)(a2 + 16);
        int v29 = *(_DWORD *)(a2 + 20);
        v25 |= v28 >> v29;
        *(_DWORD *)(a2 + 20) = v29 + 32;
        if (v29 == -32) {
          int v27 = 0;
        }
        else {
          int v27 = v28 << -(char)v29;
        }
      }
      else
      {
        int v27 = 32 * v24;
      }
      *(_DWORD *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v27;
    }
    else
    {
      unsigned int v25 = kBsFreqResTable[*(unsigned int *)(a1 + 20)];
    }
    *(_DWORD *)(a1 + 76 + 4 * v19++) = v25;
  }
  while (v23 != v19);
  if ((unint64_t)(v17 - 5) >= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v30 = 0;
    unsigned int v31 = kBsTreeConfigurationTable[7 * v17 + 3];
    if (v31 <= 1) {
      unsigned int v31 = 1;
    }
    uint64_t v32 = 4 * v31;
    do
    {
      *(_DWORD *)(a1 + v30 + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = TBitstreamReader<unsigned int>::GetBit(a2);
      unsigned int v33 = *(_DWORD *)(a2 + 16);
      unsigned int v34 = v33 >> 29;
      int v35 = *(_DWORD *)(a2 + 20) - 3;
      *(_DWORD *)(a2 + 20) = v35;
      if (v35 < 0)
      {
        TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
        *(void *)a2 += 4;
        unsigned int v37 = *(_DWORD *)(a2 + 16);
        int v38 = *(_DWORD *)(a2 + 20);
        v34 |= v37 >> v38;
        *(_DWORD *)(a2 + 20) = v38 + 32;
        if (v38 == -32) {
          int v36 = 0;
        }
        else {
          int v36 = v37 << -(char)v38;
        }
      }
      else
      {
        int v36 = 8 * v33;
      }
      *(_DWORD *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v36;
      *(_DWORD *)(a1 + v30 + 100) = v34;
      uint64_t v39 = a1 + 108;
      if (*(_DWORD *)(a1 + v30 + 96))
      {
        unsigned int v40 = *(_DWORD *)(a2 + 16);
        unsigned int v41 = v40 >> 29;
        int v42 = *(_DWORD *)(a2 + 20) - 3;
        *(_DWORD *)(a2 + 20) = v42;
        if (v42 < 0)
        {
          TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
          *(void *)a2 += 4;
          unsigned int v44 = *(_DWORD *)(a2 + 16);
          int v45 = *(_DWORD *)(a2 + 20);
          v41 |= v44 >> v45;
          *(_DWORD *)(a2 + 20) = v45 + 32;
          if (v45 == -32) {
            int v43 = 0;
          }
          else {
            int v43 = v44 << -(char)v45;
          }
        }
        else
        {
          int v43 = 8 * v40;
        }
        *(_DWORD *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v43;
        *(_DWORD *)(a1 + v30 + 104) = v41;
        unsigned int v46 = *(_DWORD *)(a2 + 16);
        unsigned int v47 = v46 >> 27;
        int v48 = *(_DWORD *)(a2 + 20) - 5;
        *(_DWORD *)(a2 + 20) = v48;
        if (v48 < 0)
        {
          TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
          *(void *)a2 += 4;
          unsigned int v50 = *(_DWORD *)(a2 + 16);
          int v51 = *(_DWORD *)(a2 + 20);
          v47 |= v50 >> v51;
          *(_DWORD *)(a2 + 20) = v51 + 32;
          if (v51 == -32) {
            int v49 = 0;
          }
          else {
            int v49 = v50 << -(char)v51;
          }
        }
        else
        {
          int v49 = 32 * v46;
        }
        *(_DWORD *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v49;
        *(_DWORD *)(a1 + v30 + 108) = v47;
        uint64_t v39 = a1 + 112;
      }
      *(_DWORD *)(v39 + v30) = kBsFreqResTable[*(unsigned int *)(a1 + 20)];
      v30 += 4;
    }
    while (v32 != v30);
  }
  int v52 = *(_DWORD *)(a1 + 56);
  BOOL v53 = __OFSUB__(v52, 2);
  if (v52 == 2) {
    *(_DWORD *)(a1 + 68) = TBitstreamReader<unsigned int>::GetBit(a2);
  }
  if (*(_DWORD *)(a1 + 64))
  {
    int Bit = TBitstreamReader<unsigned int>::GetBit(a2);
    *(_DWORD *)(a1 + 72) = Bit;
    if (!Bit) {
      operator new();
    }
  }
  int v55 = &kBsTreeConfigurationTable[7 * v17];
  size_t v56 = *(unsigned int **)a2;
  uint64_t v57 = *(void *)(a2 + 8);
  int v58 = *(void *)a2 - v57;
  int v59 = *(_DWORD *)(a2 + 20);
  if ((v59 & 7) != 0)
  {
    int v60 = *(_DWORD *)(a2 + 16);
    unsigned int v61 = v59 & 0xFFFFFFF8;
    *(_DWORD *)(a2 + 20) = v59 & 0xFFFFFFF8;
    if (v59 < 0 != v53)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, v56);
      int v63 = *(_DWORD *)(a2 + 20);
      size_t v56 = (unsigned int *)(*(void *)a2 + 4);
      *(void *)a2 = v56;
      unsigned int v61 = v63 + 32;
      *(_DWORD *)(a2 + 20) = v63 + 32;
      if (v63 == -32) {
        int v62 = 0;
      }
      else {
        int v62 = *(_DWORD *)(a2 + 16) << -(char)v63;
      }
    }
    else
    {
      int v62 = v60 << (v59 & 7);
    }
    *(_DWORD *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v62;
    uint64_t v57 = *(void *)(a2 + 8);
  }
  else
  {
    unsigned int v61 = *(_DWORD *)(a2 + 20);
  }
  MP4SpatialExtensionConfig::Deserialize(*(void *)(a1 + 128), a2, v55, v65 - v66 - v59 + v61 + 8 * (v58 + v64 + v57 - v56));
  uint64_t result = 0;
  *(unsigned char *)(a1 + 13std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 1;
  return result;
}

uint64_t ParamHRTF::Deserialize(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a2 + 16);
  unsigned int v5 = v4 >> 29;
  int v6 = *(_DWORD *)(a2 + 20) - 3;
  *(_DWORD *)(a2 + 20) = v6;
  if (v6 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    *(void *)a2 += 4;
    unsigned int v8 = *(_DWORD *)(a2 + 16);
    int v9 = *(_DWORD *)(a2 + 20);
    v5 |= v8 >> v9;
    *(_DWORD *)(a2 + 20) = v9 + 32;
    if (v9 == -32) {
      int v7 = 0;
    }
    else {
      int v7 = v8 << -(char)v9;
    }
  }
  else
  {
    int v7 = 8 * v4;
  }
  *(_DWORD *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v7;
  *(_DWORD *)a1 = v5;
  if (!v5) {
    return 0xFFFFFFFFLL;
  }
  int v10 = (unsigned __int16 *)((char *)&ParamHRTF::kParamHRTFFreqResTable + 4 * v5);
  int Bit = TBitstreamReader<unsigned int>::GetBit(a2);
  uint64_t v12 = 0;
  int v55 = v10 + 1;
  uint64_t v56 = a1;
  uint64_t v57 = *v10;
  if (Bit) {
    BOOL v13 = *v10 == 0;
  }
  else {
    BOOL v13 = 1;
  }
  char v14 = v13;
  char v54 = v14;
  int v15 = (unsigned int *)(a1 + 4);
  uint32x4_t v16 = (unsigned int *)(a1 + 564);
  uint64_t v17 = (unsigned int *)(a1 + 1124);
  unsigned int v18 = (unsigned int *)(a1 + 1384);
  do
  {
    uint64_t v19 = v15;
    uint64_t v20 = v57;
    if (v57)
    {
      do
      {
        unsigned int v21 = *(_DWORD *)(a2 + 16);
        unsigned int v22 = v21 >> 26;
        int v23 = *(_DWORD *)(a2 + 20) - 6;
        *(_DWORD *)(a2 + 20) = v23;
        if (v23 < 0)
        {
          TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
          *(void *)a2 += 4;
          unsigned int v25 = *(_DWORD *)(a2 + 16);
          int v26 = *(_DWORD *)(a2 + 20);
          v22 |= v25 >> v26;
          *(_DWORD *)(a2 + 20) = v26 + 32;
          if (v26 == -32) {
            int v24 = 0;
          }
          else {
            int v24 = v25 << -(char)v26;
          }
        }
        else
        {
          int v24 = v21 << 6;
        }
        *(_DWORD *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v24;
        *v19++ = v22;
        --v20;
      }
      while (v20);
      int v27 = v16;
      uint64_t v28 = v57;
      if ((v54 & 1) == 0)
      {
        do
        {
          unsigned int v29 = *(_DWORD *)(a2 + 16);
          unsigned int v30 = v29 >> 26;
          int v31 = *(_DWORD *)(a2 + 20) - 6;
          *(_DWORD *)(a2 + 20) = v31;
          if (v31 < 0)
          {
            TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
            *(void *)a2 += 4;
            unsigned int v33 = *(_DWORD *)(a2 + 16);
            int v34 = *(_DWORD *)(a2 + 20);
            v30 |= v33 >> v34;
            *(_DWORD *)(a2 + 20) = v34 + 32;
            if (v34 == -32) {
              int v32 = 0;
            }
            else {
              int v32 = v33 << -(char)v34;
            }
          }
          else
          {
            int v32 = v29 << 6;
          }
          *(_DWORD *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v32;
          *v27++ = v30;
          --v28;
        }
        while (v28);
      }
    }
    int v35 = TBitstreamReader<unsigned int>::GetBit(a2);
    *(_WORD *)(a1 + 1944) |= 1 << v12;
    if (v35)
    {
      uint64_t v36 = *v55 <= 1u ? 1 : *v55;
      unsigned int v37 = v17;
      do
      {
        unsigned int v38 = *(_DWORD *)(a2 + 16);
        unsigned int v39 = v38 >> 26;
        int v40 = *(_DWORD *)(a2 + 20) - 6;
        *(_DWORD *)(a2 + 20) = v40;
        if (v40 < 0)
        {
          TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
          *(void *)a2 += 4;
          unsigned int v42 = *(_DWORD *)(a2 + 16);
          int v43 = *(_DWORD *)(a2 + 20);
          v39 |= v42 >> v43;
          *(_DWORD *)(a2 + 20) = v43 + 32;
          if (v43 == -32) {
            int v41 = 0;
          }
          else {
            int v41 = v42 << -(char)v43;
          }
        }
        else
        {
          int v41 = v38 << 6;
        }
        *(_DWORD *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v41;
        *v37++ = v39;
        --v36;
      }
      while (v36);
      int v44 = TBitstreamReader<unsigned int>::GetBit(a2);
      *(_WORD *)(v56 + 1946) |= 1 << v12;
      if (v44)
      {
        int v45 = v18;
        uint64_t v46 = v57;
        if (v57)
        {
          do
          {
            unsigned int v47 = *(_DWORD *)(a2 + 16);
            unsigned int v48 = v47 >> 29;
            int v49 = *(_DWORD *)(a2 + 20) - 3;
            *(_DWORD *)(a2 + 20) = v49;
            if (v49 < 0)
            {
              TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
              *(void *)a2 += 4;
              unsigned int v51 = *(_DWORD *)(a2 + 16);
              int v52 = *(_DWORD *)(a2 + 20);
              v48 |= v51 >> v52;
              *(_DWORD *)(a2 + 20) = v52 + 32;
              if (v52 == -32) {
                int v50 = 0;
              }
              else {
                int v50 = v51 << -(char)v52;
              }
            }
            else
            {
              int v50 = 8 * v47;
            }
            *(_DWORD *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v50;
            *v45++ = v48;
            --v46;
          }
          while (v46);
        }
      }
    }
    ++v12;
    v15 += 28;
    v16 += 28;
    v17 += 13;
    v18 += 28;
    a1 = v56;
  }
  while (v12 != 5);
  return 0;
}

void MP4SpatialExtensionConfig::Deserialize(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned int a4)
{
  int v5 = *(_DWORD *)(a2 + 8);
  int v6 = *(unsigned int **)a2;
  int v7 = v5 - v6;
  int v8 = *(_DWORD *)(a2 + 20);
  if (v8 + 8 * v7 >= a4)
  {
    *(void *)(a1 + 8) = *(void *)a1;
    if ((int)(v8 - a4 + 8 * v7) >= 8)
    {
      uint64_t v114 = (std::vector<char> *)(a1 + 56);
      do
      {
        unsigned int v10 = *(_DWORD *)(a2 + 16);
        unsigned int v11 = v10 >> 28;
        int v12 = v8 - 4;
        *(_DWORD *)(a2 + 20) = v12;
        if (v12 < 0)
        {
          TBitstreamReader<unsigned int>::FillCacheFrom(a2, v6);
          *(void *)a2 += 4;
          unsigned int v14 = *(_DWORD *)(a2 + 16);
          int v15 = *(_DWORD *)(a2 + 20);
          v11 |= v14 >> v15;
          *(_DWORD *)(a2 + 20) = v15 + 32;
          if (v15 == -32) {
            int v13 = 0;
          }
          else {
            int v13 = v14 << -(char)v15;
          }
        }
        else
        {
          int v13 = 16 * v10;
        }
        *(_DWORD *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v13;
        uint64_t v17 = *(unsigned int **)(a1 + 8);
        unint64_t v16 = *(void *)(a1 + 16);
        if ((unint64_t)v17 >= v16)
        {
          uint64_t v19 = *(unsigned int **)a1;
          uint64_t v20 = ((uint64_t)v17 - *(void *)a1) >> 2;
          unint64_t v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v22 = v16 - (void)v19;
          if (v22 >> 1 > v21) {
            unint64_t v21 = v22 >> 1;
          }
          BOOL v23 = (unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL;
          unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v23) {
            unint64_t v24 = v21;
          }
          if (v24)
          {
            unint64_t v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v24);
            uint64_t v19 = *(unsigned int **)a1;
            uint64_t v17 = *(unsigned int **)(a1 + 8);
          }
          else
          {
            uint64_t v25 = 0;
          }
          int v26 = (unsigned int *)(v24 + 4 * v20);
          *int v26 = v11;
          unsigned int v18 = v26 + 1;
          while (v17 != v19)
          {
            unsigned int v27 = *--v17;
            *--int v26 = v27;
          }
          *(void *)a1 = v26;
          *(void *)(a1 + 8) = v18;
          *(void *)(a1 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v24 + 4 * v25;
          if (v19) {
            operator delete(v19);
          }
        }
        else
        {
          *uint64_t v17 = v11;
          unsigned int v18 = v17 + 1;
        }
        *(void *)(a1 + 8) = v18;
        unsigned int v28 = *(_DWORD *)(a2 + 16);
        unsigned int v29 = v28 >> 28;
        int v30 = *(_DWORD *)(a2 + 20) - 4;
        *(_DWORD *)(a2 + 20) = v30;
        if (v30 < 0)
        {
          TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
          *(void *)a2 += 4;
          unsigned int v32 = *(_DWORD *)(a2 + 16);
          int v33 = *(_DWORD *)(a2 + 20);
          v29 |= v32 >> v33;
          int v30 = v33 + 32;
          *(_DWORD *)(a2 + 20) = v33 + 32;
          if (v33 == -32) {
            unsigned int v31 = 0;
          }
          else {
            unsigned int v31 = v32 << -(char)v33;
          }
        }
        else
        {
          unsigned int v31 = 16 * v28;
        }
        *(_DWORD *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v31;
        if (v29 == 15)
        {
          unsigned int v34 = HIBYTE(v31);
          v30 -= 8;
          *(_DWORD *)(a2 + 20) = v30;
          if (v30 < 0)
          {
            TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
            *(void *)a2 += 4;
            unsigned int v35 = *(_DWORD *)(a2 + 16);
            int v36 = *(_DWORD *)(a2 + 20);
            v34 |= v35 >> v36;
            int v30 = v36 + 32;
            *(_DWORD *)(a2 + 20) = v36 + 32;
            unsigned int v31 = v36 == -32 ? 0 : v35 << -(char)v36;
          }
          else
          {
            v31 <<= 8;
          }
          *(_DWORD *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v31;
          unsigned int v29 = v34 + 15;
          if (v34 == 255)
          {
            unsigned int v37 = HIWORD(v31);
            v30 -= 16;
            *(_DWORD *)(a2 + 20) = v30;
            if (v30 < 0)
            {
              TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
              *(void *)a2 += 4;
              unsigned int v38 = *(_DWORD *)(a2 + 16);
              int v39 = *(_DWORD *)(a2 + 20);
              v37 |= v38 >> v39;
              int v30 = v39 + 32;
              *(_DWORD *)(a2 + 20) = v39 + 32;
              if (v39 == -32) {
                unsigned int v31 = 0;
              }
              else {
                unsigned int v31 = v38 << -(char)v39;
              }
            }
            else
            {
              v31 <<= 16;
            }
            *(_DWORD *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v31;
            unsigned int v29 = v37 + 270;
          }
        }
        int v40 = *(unsigned int **)a2;
        int v41 = *(_DWORD *)(*(void *)(a1 + 8) - 4);
        int v112 = *(_DWORD *)(a2 + 8);
        unsigned int v113 = v29;
        unsigned int v111 = *(unsigned int **)a2;
        if (v41 == 2)
        {
          unsigned int v46 = a3[5];
          if (v46)
          {
            int v47 = 0;
            int v48 = 0;
            int v49 = 0;
            BOOL v50 = 1;
LABEL_49:
            int v51 = 1;
            while (*(_DWORD *)(a2 + 20) + 8 * (*(_DWORD *)(a2 + 8) - *(_DWORD *)a2) >= 1)
            {
              int Bit = TBitstreamReader<unsigned int>::GetBit(a2);
              if (Bit)
              {
                ++v49;
                ++v51;
              }
              else
              {
                --v51;
              }
              if (!Bit) {
                ++v47;
              }
              if (!v51)
              {
                BOOL v50 = ++v48 < v46;
                if (v48 != v46) {
                  goto LABEL_49;
                }
                goto LABEL_62;
              }
            }
            if (v50) {
              goto LABEL_134;
            }
LABEL_62:
            while (v49)
            {
              TBitstreamReader<unsigned int>::GetBit(a2);
              if (TBitstreamReader<unsigned int>::GetBit(a2))
              {
                int v57 = *(_DWORD *)(a2 + 16);
                int v58 = *(_DWORD *)(a2 + 20) - 5;
                *(_DWORD *)(a2 + 20) = v58;
                if (v58 < 0)
                {
                  TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
                  int v60 = *(_DWORD *)(a2 + 20);
                  *(void *)a2 += 4;
                  *(_DWORD *)(a2 + 20) = v60 + 32;
                  if (v60 == -32) {
                    int v59 = 0;
                  }
                  else {
                    int v59 = *(_DWORD *)(a2 + 16) << -(char)v60;
                  }
                }
                else
                {
                  int v59 = 32 * v57;
                }
                *(_DWORD *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v59;
              }
              --v49;
            }
            if (v47)
            {
              int v62 = *(_DWORD *)(a2 + 16);
              int v61 = *(_DWORD *)(a2 + 20);
              do
              {
                v61 -= 5;
                *(_DWORD *)(a2 + 20) = v61;
                if (v61 < 0)
                {
                  TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
                  int v63 = *(_DWORD *)(a2 + 20);
                  *(void *)a2 += 4;
                  int v61 = v63 + 32;
                  *(_DWORD *)(a2 + 20) = v63 + 32;
                  if (v63 == -32) {
                    int v62 = 0;
                  }
                  else {
                    int v62 = *(_DWORD *)(a2 + 16) << -(char)v63;
                  }
                }
                else
                {
                  v62 *= 32;
                }
                *(_DWORD *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v62;
                --v47;
              }
              while (v47);
            }
          }
          goto LABEL_134;
        }
        if (v41 != 1)
        {
          if (v41) {
            return;
          }
          *(unsigned char *)(a1 + 24) = 1;
          unsigned int v42 = v31 >> 28;
          int v43 = v30 - 4;
          *(_DWORD *)(a2 + 20) = v30 - 4;
          if (v30 - 4 >= 0)
          {
            unsigned int v44 = 16 * v31;
            int v45 = v40;
            goto LABEL_82;
          }
          TBitstreamReader<unsigned int>::FillCacheFrom(a2, v40);
          int v45 = (unsigned int *)(*(void *)a2 + 4);
          *(void *)a2 = v45;
          unsigned int v64 = *(_DWORD *)(a2 + 16);
          int v65 = *(_DWORD *)(a2 + 20);
          v42 |= v64 >> v65;
          int v43 = v65 + 32;
          if (v65 == -32)
          {
            unsigned int v66 = 0;
            *(unsigned char *)(a1 + 25) = v42;
            *(void *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0xFFFFFFFE00000000;
          }
          else
          {
            unsigned int v44 = v64 << -(char)v65;
LABEL_82:
            *(unsigned char *)(a1 + 25) = v42;
            unsigned int v66 = v44 >> 30;
            int v67 = v43 - 2;
            *(_DWORD *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v44;
            *(_DWORD *)(a2 + 20) = v67;
            if (v67 >= 0)
            {
              int v68 = 4 * v44;
LABEL_92:
              *(_DWORD *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v68;
              *(unsigned char *)(a1 + 2std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v66;
              unint64_t v76 = (a3[3] + a3[1]);
              uint64_t v78 = *(void *)(a1 + 56);
              uint64_t v77 = *(void *)(a1 + 64);
              if (v76 <= v77 - v78)
              {
                if (v76 < v77 - v78)
                {
                  uint64_t v77 = v78 + v76;
                  *(void *)(a1 + 64) = v78 + v76;
                }
              }
              else
              {
                std::vector<unsigned char>::__append(v114, v76 - (v77 - v78));
                uint64_t v78 = *(void *)(a1 + 56);
                uint64_t v77 = *(void *)(a1 + 64);
              }
              if (v77 != v78)
              {
                uint64_t v79 = 0;
                unsigned int v80 = 0;
                do
                {
                  char v81 = TBitstreamReader<unsigned int>::GetBit(a2);
                  char v82 = v81;
                  uint64_t v84 = *(unsigned char **)(a1 + 40);
                  unint64_t v83 = *(void *)(a1 + 48);
                  if ((unint64_t)v84 >= v83)
                  {
                    unint64_t v86 = *(void *)(a1 + 32);
                    unint64_t v87 = &v84[-v86];
                    uint64_t v88 = (uint64_t)&v84[-v86 + 1];
                    if (v88 < 0) {
                      std::vector<float>::__throw_length_error[abi:ne180100]();
                    }
                    unint64_t v89 = v83 - v86;
                    if (2 * v89 > v88) {
                      uint64_t v88 = 2 * v89;
                    }
                    if (v89 >= 0x3FFFFFFFFFFFFFFFLL) {
                      size_t v90 = 0x7FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      size_t v90 = v88;
                    }
                    if (v90) {
                      BOOL v91 = (char *)operator new(v90);
                    }
                    else {
                      BOOL v91 = 0;
                    }
                    int v92 = &v87[(void)v91];
                    int v93 = &v87[(void)v91];
                    *int v93 = v82;
                    uint64_t v85 = v93 + 1;
                    if (v84 != (unsigned char *)v86)
                    {
                      uint64_t v94 = &v84[~v86];
                      do
                      {
                        char v95 = *--v84;
                        (v94--)[(void)v91] = v95;
                      }
                      while (v84 != (unsigned char *)v86);
                      uint64_t v84 = *(unsigned char **)(a1 + 32);
                      int v92 = v91;
                    }
                    *(void *)(a1 + 32) = v92;
                    *(void *)(a1 + 40) = v85;
                    *(void *)(a1 + 48) = &v91[v90];
                    if (v84) {
                      operator delete(v84);
                    }
                  }
                  else
                  {
                    *uint64_t v84 = v81;
                    uint64_t v85 = v84 + 1;
                  }
                  *(void *)(a1 + 40) = v85;
                  if (*(v85 - 1))
                  {
                    unsigned int v96 = *(_DWORD *)(a2 + 16);
                    unsigned int v97 = v96 >> 27;
                    int v98 = *(_DWORD *)(a2 + 20) - 5;
                    *(_DWORD *)(a2 + 20) = v98;
                    if (v98 < 0)
                    {
                      TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
                      *(void *)a2 += 4;
                      unsigned int v100 = *(_DWORD *)(a2 + 16);
                      int v101 = *(_DWORD *)(a2 + 20);
                      v97 |= v100 >> v101;
                      *(_DWORD *)(a2 + 20) = v101 + 32;
                      if (v101 == -32) {
                        int v99 = 0;
                      }
                      else {
                        int v99 = v100 << -(char)v101;
                      }
                    }
                    else
                    {
                      int v99 = 32 * v96;
                    }
                    *(_DWORD *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v99;
                    v114->__begin_[v79] = v97;
                  }
                  uint64_t v79 = ++v80;
                }
                while (*(void *)(a1 + 64) - *(void *)(a1 + 56) > (unint64_t)v80);
              }
              goto LABEL_134;
            }
          }
          TBitstreamReader<unsigned int>::FillCacheFrom(a2, v45);
          *(void *)a2 += 4;
          unsigned int v74 = *(_DWORD *)(a2 + 16);
          int v75 = *(_DWORD *)(a2 + 20);
          v66 |= v74 >> v75;
          *(_DWORD *)(a2 + 20) = v75 + 32;
          if (v75 == -32) {
            int v68 = 0;
          }
          else {
            int v68 = v74 << -(char)v75;
          }
          goto LABEL_92;
        }
        *(unsigned char *)(a1 + 80) = 1;
        unsigned int v53 = v31 >> 28;
        int v54 = v30 - 4;
        *(_DWORD *)(a2 + 20) = v30 - 4;
        if (v30 - 4 < 0)
        {
          TBitstreamReader<unsigned int>::FillCacheFrom(a2, v40);
          uint64_t v56 = (unsigned int *)(*(void *)a2 + 4);
          *(void *)a2 = v56;
          unsigned int v69 = *(_DWORD *)(a2 + 16);
          int v70 = *(_DWORD *)(a2 + 20);
          v53 |= v69 >> v70;
          int v54 = v70 + 32;
          if (v70 == -32)
          {
            unsigned int v71 = 0;
            *(unsigned char *)(a1 + 81) = v53;
            *(void *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0xFFFFFFFE00000000;
            goto LABEL_125;
          }
          unsigned int v55 = v69 << -(char)v70;
        }
        else
        {
          unsigned int v55 = 16 * v31;
          uint64_t v56 = v40;
        }
        *(unsigned char *)(a1 + 81) = v53;
        unsigned int v71 = v55 >> 30;
        int v72 = v54 - 2;
        *(_DWORD *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v55;
        *(_DWORD *)(a2 + 20) = v54 - 2;
        if (v54 - 2 >= 0)
        {
          unsigned int v73 = 4 * v55;
          goto LABEL_127;
        }
LABEL_125:
        TBitstreamReader<unsigned int>::FillCacheFrom(a2, v56);
        uint64_t v56 = (unsigned int *)(*(void *)a2 + 4);
        *(void *)a2 = v56;
        unsigned int v102 = *(_DWORD *)(a2 + 16);
        int v103 = *(_DWORD *)(a2 + 20);
        v71 |= v102 >> v103;
        int v72 = v103 + 32;
        if (v103 == -32)
        {
          unsigned int v104 = 0;
          *(unsigned char *)(a1 + 82) = v71;
          *(void *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0xFFFFFFFB00000000;
LABEL_130:
          TBitstreamReader<unsigned int>::FillCacheFrom(a2, v56);
          *(void *)a2 += 4;
          unsigned int v107 = *(_DWORD *)(a2 + 16);
          int v108 = *(_DWORD *)(a2 + 20);
          v104 |= v107 >> v108;
          *(_DWORD *)(a2 + 20) = v108 + 32;
          if (v108 == -32) {
            int v106 = 0;
          }
          else {
            int v106 = v107 << -(char)v108;
          }
          goto LABEL_133;
        }
        unsigned int v73 = v102 << -(char)v103;
LABEL_127:
        *(unsigned char *)(a1 + 82) = v71;
        unsigned int v104 = v73 >> 27;
        int v105 = v72 - 5;
        *(_DWORD *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v73;
        *(_DWORD *)(a2 + 20) = v105;
        if (v105 < 0) {
          goto LABEL_130;
        }
        int v106 = 32 * v73;
LABEL_133:
        *(_DWORD *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v106;
        *(unsigned char *)(a1 + 83) = v104;
LABEL_134:
        TBitstreamReader<unsigned int>::SkipBits(a2, *(_DWORD *)(a2 + 20) - v30 + 8 * (v113 + v111 - v112 + *(_DWORD *)(a2 + 8) - *(_DWORD *)a2));
        int v6 = *(unsigned int **)a2;
        int v8 = *(_DWORD *)(a2 + 20);
      }
      while ((int)(v8 - a4 + 8 * (*(_DWORD *)(a2 + 8) - *(void *)a2)) > 7);
    }
  }
}

void MP4SpatialAudioSpecificConfig::~MP4SpatialAudioSpecificConfig(MP4SpatialAudioSpecificConfig *this)
{
  MP4SpatialAudioSpecificConfig::~MP4SpatialAudioSpecificConfig(this);
  JUMPOUT(0x192FC8940);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;

  *(void *)this = &unk_1EDF944F8;
  int v2 = *((void *)this + 1);
  if (v2) {
    MEMORY[0x192FC8940](v2, 0x1000C4052888210);
  }
  size_t v3 = *((void *)this + 15);
  if (v3) {
    MEMORY[0x192FC8940](v3, 0x1000C4000E02AC3);
  }
  unsigned int v4 = *((void *)this + 16);
  if (v4)
  {
    int v5 = *(void **)(v4 + 56);
    if (v5)
    {
      *(void *)(v4 + 64) = v5;
      operator delete(v5);
    }
    int v6 = *(void **)(v4 + 32);
    if (v6)
    {
      *(void *)(v4 + 40) = v6;
      operator delete(v6);
    }
    int v7 = *(void **)v4;
    if (*(void *)v4)
    {
      *(void *)(v4 + 8) = v7;
      operator delete(v7);
    }
    MEMORY[0x192FC8940](v4, 0x1010C40ADE5291FLL);
  }
}

uint64_t MP4LDSpatialSpecificConfig::NumBands(MP4LDSpatialSpecificConfig *this)
{
  return kLDBsFreqResTable[*((unsigned int *)this + 5)];
}

uint64_t MP4LDSpatialSpecificConfig::Deserialize(uint64_t a1, uint64_t a2, int a3)
{
  int v6 = *(_DWORD *)(a2 + 8);
  int v7 = *(_DWORD *)a2;
  int v8 = *(_DWORD *)(a2 + 20);
  MP4SampleRate::Deserialize(*(MP4SampleRate **)(a1 + 8), a2, 1);
  unsigned int v9 = *(_DWORD *)(a2 + 16);
  unsigned int v10 = v9 >> 18;
  int v11 = *(_DWORD *)(a2 + 20) - 14;
  *(_DWORD *)(a2 + 20) = v11;
  if (v11 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    *(void *)a2 += 4;
    unsigned int v13 = *(_DWORD *)(a2 + 16);
    int v14 = *(_DWORD *)(a2 + 20);
    v10 |= v13 >> v14;
    *(_DWORD *)(a2 + 20) = v14 + 32;
    if (v14 == -32) {
      int v12 = 0;
    }
    else {
      int v12 = v13 << -(char)v14;
    }
  }
  else
  {
    int v12 = v9 << 14;
  }
  *(_DWORD *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v12;
  *(int8x8_t *)(a1 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v10), (uint32x2_t)0xFFFFFFFAFFFFFFF7), (int8x8_t)0x70000001FLL);
  int v15 = (v10 >> 2) & 0xF;
  *(_DWORD *)(a1 + 24) = v15;
  *(_DWORD *)(a1 + 28) = v10 & 3;
  if (v15 != 7) {
    *(_DWORD *)(a1 + 32) = TBitstreamReader<unsigned int>::GetBit(a2);
  }
  *(_DWORD *)(a1 + 3std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = TBitstreamReader<unsigned int>::GetBit(a2);
  unsigned int v16 = *(_DWORD *)(a2 + 16);
  int v17 = *(_DWORD *)(a2 + 20);
  if (*(_DWORD *)(a1 + 24) != 7)
  {
    unsigned int v18 = v16 >> 29;
    int v19 = v17 - 3;
    *(_DWORD *)(a2 + 20) = v19;
    if (v19 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
      unint64_t v21 = (unsigned int *)(*(void *)a2 + 4);
      *(void *)a2 = v21;
      unsigned int v22 = *(_DWORD *)(a2 + 16);
      int v23 = *(_DWORD *)(a2 + 20);
      v18 |= v22 >> v23;
      int v19 = v23 + 32;
      if (v23 == -32)
      {
        unsigned int v24 = 0;
        *(_DWORD *)(a1 + 40) = v18;
        *(void *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0xFFFFFFFD00000000;
        goto LABEL_17;
      }
      unsigned int v20 = v22 << -(char)v23;
    }
    else
    {
      unsigned int v20 = 8 * v16;
    }
    *(_DWORD *)(a1 + 40) = v18;
    unsigned int v24 = v20 >> 29;
    int v17 = v19 - 3;
    *(_DWORD *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v20;
    *(_DWORD *)(a2 + 20) = v17;
    if (v17 >= 0)
    {
      unsigned int v16 = 8 * v20;
LABEL_20:
      *(_DWORD *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v16;
      *(_DWORD *)(a1 + 44) = v24;
      goto LABEL_21;
    }
    unint64_t v21 = *(unsigned int **)a2;
LABEL_17:
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, v21);
    *(void *)a2 += 4;
    unsigned int v25 = *(_DWORD *)(a2 + 16);
    int v26 = *(_DWORD *)(a2 + 20);
    v24 |= v25 >> v26;
    int v17 = v26 + 32;
    if (v26 == -32) {
      unsigned int v16 = 0;
    }
    else {
      unsigned int v16 = v25 << -(char)v26;
    }
    goto LABEL_20;
  }
LABEL_21:
  unsigned int v27 = v16 >> 29;
  int v28 = v17 - 3;
  *(_DWORD *)(a2 + 20) = v28;
  if (v28 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    *(void *)a2 += 4;
    unsigned int v30 = *(_DWORD *)(a2 + 16);
    int v31 = *(_DWORD *)(a2 + 20);
    v27 |= v30 >> v31;
    int v28 = v31 + 32;
    *(_DWORD *)(a2 + 20) = v31 + 32;
    if (v31 == -32) {
      unsigned int v29 = 0;
    }
    else {
      unsigned int v29 = v30 << -(char)v31;
    }
  }
  else
  {
    unsigned int v29 = 8 * v16;
  }
  *(_DWORD *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v29;
  *(_DWORD *)(a1 + 48) = v27;
  if (*(_DWORD *)(a1 + 24) != 7)
  {
    *(_DWORD *)(a1 + 52) = TBitstreamReader<unsigned int>::GetBit(a2);
    unsigned int v29 = *(_DWORD *)(a2 + 16);
    int v28 = *(_DWORD *)(a2 + 20);
  }
  unsigned int v32 = v29 >> 30;
  int v33 = v28 - 2;
  *(_DWORD *)(a2 + 20) = v33;
  if (v33 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    unsigned int v35 = (unsigned int *)(*(void *)a2 + 4);
    *(void *)a2 = v35;
    unsigned int v36 = *(_DWORD *)(a2 + 16);
    int v37 = *(_DWORD *)(a2 + 20);
    v32 |= v36 >> v37;
    int v33 = v37 + 32;
    if (v37 == -32)
    {
      unsigned int v39 = 0;
      *(_DWORD *)(a1 + 5std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v32;
      unsigned int v38 = (_DWORD *)(a1 + 56);
      *(void *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0xFFFFFFFE00000000;
      goto LABEL_36;
    }
    unsigned int v34 = v36 << -(char)v37;
  }
  else
  {
    unsigned int v34 = 4 * v29;
  }
  *(_DWORD *)(a1 + 5std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v32;
  unsigned int v38 = (_DWORD *)(a1 + 56);
  unsigned int v39 = v34 >> 30;
  int v40 = v33 - 2;
  *(_DWORD *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v34;
  *(_DWORD *)(a2 + 20) = v40;
  if (v40 >= 0)
  {
    int v41 = 4 * v34;
    goto LABEL_39;
  }
  unsigned int v35 = *(unsigned int **)a2;
LABEL_36:
  TBitstreamReader<unsigned int>::FillCacheFrom(a2, v35);
  *(void *)a2 += 4;
  unsigned int v42 = *(_DWORD *)(a2 + 16);
  int v43 = *(_DWORD *)(a2 + 20);
  v39 |= v42 >> v43;
  *(_DWORD *)(a2 + 20) = v43 + 32;
  if (v43 == -32) {
    int v41 = 0;
  }
  else {
    int v41 = v42 << -(char)v43;
  }
LABEL_39:
  *(_DWORD *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v41;
  *(_DWORD *)(a1 + 60) = v39;
  unsigned int v44 = *(_DWORD *)(a1 + 24);
  if (v44 == 7)
  {
    *(_DWORD *)(a1 + 64) = 0;
  }
  else
  {
    *(_DWORD *)(a1 + 64) = TBitstreamReader<unsigned int>::GetBit(a2);
    unsigned int v44 = *(_DWORD *)(a1 + 24);
    if (v44 > 7) {
      return 0xFFFFFFFFLL;
    }
  }
  int v95 = a3;
  uint64_t v46 = 0;
  int v94 = v6 - v7;
  uint64_t v47 = v44;
  int v48 = &kBsTreeConfigurationTable[7 * v44];
  unsigned int v49 = v48[1];
  unsigned int v50 = *((unsigned __int16 *)v48 + 5);
  if (v49 <= 1) {
    uint64_t v51 = 1;
  }
  else {
    uint64_t v51 = v49;
  }
  do
  {
    if ((v50 >> v46))
    {
      unsigned int v52 = *(_DWORD *)(a2 + 16);
      unsigned int v53 = v52 >> 27;
      int v54 = *(_DWORD *)(a2 + 20) - 5;
      *(_DWORD *)(a2 + 20) = v54;
      if (v54 < 0)
      {
        TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
        *(void *)a2 += 4;
        unsigned int v56 = *(_DWORD *)(a2 + 16);
        int v57 = *(_DWORD *)(a2 + 20);
        v53 |= v56 >> v57;
        *(_DWORD *)(a2 + 20) = v57 + 32;
        if (v57 == -32) {
          int v55 = 0;
        }
        else {
          int v55 = v56 << -(char)v57;
        }
      }
      else
      {
        int v55 = 32 * v52;
      }
      *(_DWORD *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v55;
    }
    else
    {
      unsigned int v53 = kLDBsFreqResTable[*(unsigned int *)(a1 + 20)];
    }
    *(_DWORD *)(a1 + 76 + 4 * v46++) = v53;
  }
  while (v51 != v46);
  int v96 = v47;
  if ((unint64_t)(v47 - 5) >= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v58 = 0;
    unsigned int v59 = kBsTreeConfigurationTable[7 * v47 + 3];
    if (v59 <= 1) {
      unsigned int v59 = 1;
    }
    uint64_t v60 = 4 * v59;
    do
    {
      *(_DWORD *)(a1 + v58 + 9std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = TBitstreamReader<unsigned int>::GetBit(a2);
      unsigned int v61 = *(_DWORD *)(a2 + 16);
      unsigned int v62 = v61 >> 29;
      int v63 = *(_DWORD *)(a2 + 20) - 3;
      *(_DWORD *)(a2 + 20) = v63;
      if (v63 < 0)
      {
        TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
        *(void *)a2 += 4;
        unsigned int v65 = *(_DWORD *)(a2 + 16);
        int v66 = *(_DWORD *)(a2 + 20);
        v62 |= v65 >> v66;
        *(_DWORD *)(a2 + 20) = v66 + 32;
        if (v66 == -32) {
          int v64 = 0;
        }
        else {
          int v64 = v65 << -(char)v66;
        }
      }
      else
      {
        int v64 = 8 * v61;
      }
      *(_DWORD *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v64;
      *(_DWORD *)(a1 + v58 + 100) = v62;
      uint64_t v67 = a1 + 108;
      if (*(_DWORD *)(a1 + v58 + 96))
      {
        unsigned int v68 = *(_DWORD *)(a2 + 16);
        unsigned int v69 = v68 >> 29;
        int v70 = *(_DWORD *)(a2 + 20) - 3;
        *(_DWORD *)(a2 + 20) = v70;
        if (v70 < 0)
        {
          TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
          *(void *)a2 += 4;
          unsigned int v72 = *(_DWORD *)(a2 + 16);
          int v73 = *(_DWORD *)(a2 + 20);
          v69 |= v72 >> v73;
          *(_DWORD *)(a2 + 20) = v73 + 32;
          if (v73 == -32) {
            int v71 = 0;
          }
          else {
            int v71 = v72 << -(char)v73;
          }
        }
        else
        {
          int v71 = 8 * v68;
        }
        *(_DWORD *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v71;
        *(_DWORD *)(a1 + v58 + 104) = v69;
        unsigned int v74 = *(_DWORD *)(a2 + 16);
        unsigned int v75 = v74 >> 27;
        int v76 = *(_DWORD *)(a2 + 20) - 5;
        *(_DWORD *)(a2 + 20) = v76;
        if (v76 < 0)
        {
          TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
          *(void *)a2 += 4;
          unsigned int v78 = *(_DWORD *)(a2 + 16);
          int v79 = *(_DWORD *)(a2 + 20);
          v75 |= v78 >> v79;
          *(_DWORD *)(a2 + 20) = v79 + 32;
          if (v79 == -32) {
            int v77 = 0;
          }
          else {
            int v77 = v78 << -(char)v79;
          }
        }
        else
        {
          int v77 = 32 * v74;
        }
        *(_DWORD *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v77;
        *(_DWORD *)(a1 + v58 + 108) = v75;
        uint64_t v67 = a1 + 112;
      }
      *(_DWORD *)(v67 + v58) = kLDBsFreqResTable[*(unsigned int *)(a1 + 20)];
      v58 += 4;
    }
    while (v60 != v58);
  }
  BOOL v80 = __OFSUB__(*v38, 2);
  if (*v38 == 2) {
    *(_DWORD *)(a1 + 68) = TBitstreamReader<unsigned int>::GetBit(a2);
  }
  int v81 = *(_DWORD *)(a2 + 20);
  if (*(_DWORD *)(a1 + 64))
  {
    unsigned int v82 = *(_DWORD *)(a2 + 16);
    unsigned int v83 = v82 >> 30;
    BOOL v80 = __OFSUB__(v81, 2);
    v81 -= 2;
    *(_DWORD *)(a2 + 20) = v81;
    if (v81 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
      *(void *)a2 += 4;
      unsigned int v85 = *(_DWORD *)(a2 + 16);
      int v86 = *(_DWORD *)(a2 + 20);
      v83 |= v85 >> v86;
      BOOL v80 = __OFADD__(v86, 32);
      int v81 = v86 + 32;
      *(_DWORD *)(a2 + 20) = v86 + 32;
      int v84 = v86 == -32 ? 0 : v85 << -(char)v86;
    }
    else
    {
      int v84 = 4 * v82;
    }
    *(_DWORD *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v84;
    *(_DWORD *)(a1 + 72) = v83;
    if (!v83) {
      operator new();
    }
  }
  unint64_t v87 = *(unsigned int **)a2;
  uint64_t v88 = *(void *)(a2 + 8);
  int v89 = *(void *)a2 - v88;
  if ((v81 & 7) != 0)
  {
    int v90 = *(_DWORD *)(a2 + 16);
    unsigned int v91 = v81 & 0xFFFFFFF8;
    *(_DWORD *)(a2 + 20) = v81 & 0xFFFFFFF8;
    if (v81 < 0 != v80)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, v87);
      int v93 = *(_DWORD *)(a2 + 20);
      unint64_t v87 = (unsigned int *)(*(void *)a2 + 4);
      *(void *)a2 = v87;
      unsigned int v91 = v93 + 32;
      *(_DWORD *)(a2 + 20) = v93 + 32;
      if (v93 == -32) {
        int v92 = 0;
      }
      else {
        int v92 = *(_DWORD *)(a2 + 16) << -(char)v93;
      }
    }
    else
    {
      int v92 = v90 << (v81 & 7);
    }
    *(_DWORD *)(a2 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v92;
    uint64_t v88 = *(void *)(a2 + 8);
  }
  else
  {
    unsigned int v91 = v81;
  }
  MP4SpatialExtensionConfig::Deserialize(*(void *)(a1 + 128), a2, &kBsTreeConfigurationTable[7 * v96], v8 - v81 - v95 + v91 + 8 * (v89 + v94 + v88 - v87));
  uint64_t result = 0;
  *(unsigned char *)(a1 + 13std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 1;
  return result;
}

void MP4LDSpatialSpecificConfig::~MP4LDSpatialSpecificConfig(MP4LDSpatialSpecificConfig *this)
{
  MP4SpatialAudioSpecificConfig::~MP4SpatialAudioSpecificConfig(this);
  JUMPOUT(0x192FC8940);
}

void MP4SpatialAudioSpecificConfig::MP4SpatialAudioSpecificConfig(MP4SpatialAudioSpecificConfig *this)
{
  *(void *)this = &unk_1EDF944F8;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 5std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0u;
  *((_DWORD *)this + 18) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
  *((unsigned char *)this + 13std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 0;
  operator new();
}

void *to_string@<X0>(const AudioTimeStamp *a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  if (!a1) {
    return std::string::basic_string[abi:ne180100]<0>(a3, "NULL");
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"{ ", 2);
  AudioTimeStampFlags mFlags = a1->mFlags;
  if ((a2 & mFlags & 2) == 0)
  {
    if ((a2 & mFlags & 1) == 0)
    {
      if ((a2 & mFlags & 4) == 0) {
        goto LABEL_35;
      }
      goto LABEL_26;
    }
    goto LABEL_15;
  }
  caulk::make_string((caulk *)"hostTime=%.6f", (uint64_t)&__p, (double)a1->mHostTime * 0.0000000416666667);
  if ((v17 & 0x80u) == 0) {
    CFTypeRef p_p = &__p;
  }
  else {
    CFTypeRef p_p = __p;
  }
  if ((v17 & 0x80u) == 0) {
    uint64_t v8 = v17;
  }
  else {
    uint64_t v8 = v16;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)p_p, v8);
  if ((char)v17 < 0) {
    operator delete(__p);
  }
  AudioTimeStampFlags v9 = a2 & a1->mFlags;
  if (v9)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)", ", 2);
LABEL_15:
    caulk::make_string((caulk *)"sampleTime=%lld", (uint64_t)&__p, (uint64_t)a1->mSampleTime);
    if ((v17 & 0x80u) == 0) {
      int v11 = &__p;
    }
    else {
      int v11 = __p;
    }
    if ((v17 & 0x80u) == 0) {
      uint64_t v12 = v17;
    }
    else {
      uint64_t v12 = v16;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)v11, v12);
    if ((char)v17 < 0) {
      operator delete(__p);
    }
    AudioTimeStampFlags v9 = a2 & a1->mFlags;
  }
  if ((v9 & 4) != 0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)", ", 2);
LABEL_26:
    caulk::make_string((caulk *)"rateScalar=%.6f", (uint64_t)&__p, *(void *)&a1->mRateScalar);
    if ((v17 & 0x80u) == 0) {
      unsigned int v13 = &__p;
    }
    else {
      unsigned int v13 = __p;
    }
    if ((v17 & 0x80u) == 0) {
      uint64_t v14 = v17;
    }
    else {
      uint64_t v14 = v16;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)v13, v14);
    if ((char)v17 < 0) {
      operator delete(__p);
    }
  }
  LOBYTE(__p) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)&__p, 1);
LABEL_35:
  LOBYTE(__p) = 125;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)&__p, 1);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a3, (uint64_t)v19);
  uint64_t v18 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v19[-1] + *(void *)(v18 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v19[0] = MEMORY[0x1E4FBA470] + 16;
  if (v20 < 0) {
    operator delete((void *)v19[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (void *)MEMORY[0x192FC8840](&v21);
}

void *to_string@<X0>(const AudioChannelLayout *a1@<X0>, void *a2@<X8>)
{
  if (!a1) {
    return std::string::basic_string[abi:ne180100]<0>(a2, "NULL");
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v22);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"{ ", 2);
  caulk::make_string((caulk *)"tag=0x%x", (uint64_t)&__p, a1->mChannelLayoutTag);
  if ((v21 & 0x80u) == 0) {
    CFTypeRef p_p = &__p;
  }
  else {
    CFTypeRef p_p = __p;
  }
  if ((v21 & 0x80u) == 0) {
    uint64_t v5 = v21;
  }
  else {
    uint64_t v5 = v20;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)p_p, v5);
  if ((char)v21 < 0) {
    operator delete(__p);
  }
  if (a1->mChannelLayoutTag)
  {
    if (a1->mChannelLayoutTag == 0x10000)
    {
      caulk::make_string((caulk *)", channelBitmap=0x%x", (uint64_t)&__p, a1->mChannelBitmap);
      int v6 = (v21 & 0x80u) == 0 ? &__p : (void **)__p;
      uint64_t v7 = (v21 & 0x80u) == 0 ? v21 : v20;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)v6, v7);
      if ((char)v21 < 0) {
        operator delete(__p);
      }
    }
  }
  else
  {
    caulk::make_string((caulk *)", numberDescs=%u, descs=[", (uint64_t)&__p, a1->mNumberChannelDescriptions);
    if ((v21 & 0x80u) == 0) {
      AudioTimeStampFlags v9 = &__p;
    }
    else {
      AudioTimeStampFlags v9 = __p;
    }
    if ((v21 & 0x80u) == 0) {
      uint64_t v10 = v21;
    }
    else {
      uint64_t v10 = v20;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)v9, v10);
    if ((char)v21 < 0) {
      operator delete(__p);
    }
    if (a1->mNumberChannelDescriptions)
    {
      unint64_t v11 = 0;
      mChannelDescriptions = a1->mChannelDescriptions;
      do
      {
        if (v11) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)", ", 2);
        }
        CFTypeRef outPropertyData = 0;
        UInt32 ioPropertyDataSize = 8;
        if (AudioFormatGetProperty(0x63736E6Du, 0x14u, mChannelDescriptions, &ioPropertyDataSize, &outPropertyData))
        {
          std::ostream::operator<<();
        }
        else
        {
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, outPropertyData);
          if (!cf)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
          }
          applesauce::CF::convert_to<std::string,0>((uint64_t)&__p, (const __CFString *)cf);
          if ((v21 & 0x80u) == 0) {
            unsigned int v13 = &__p;
          }
          else {
            unsigned int v13 = __p;
          }
          if ((v21 & 0x80u) == 0) {
            uint64_t v14 = v21;
          }
          else {
            uint64_t v14 = v20;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)v13, v14);
          if ((char)v21 < 0) {
            operator delete(__p);
          }
          if (cf) {
            CFRelease(cf);
          }
        }
        ++v11;
        ++mChannelDescriptions;
      }
      while (v11 < a1->mNumberChannelDescriptions);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"]", 1);
  }
  LOBYTE(__p) = 125;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)&__p, 1);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a2, (uint64_t)v23);
  uint64_t v22 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v23[-1] + *(void *)(v22 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v23[0] = MEMORY[0x1E4FBA470] + 16;
  if (v24 < 0) {
    operator delete((void *)v23[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (void *)MEMORY[0x192FC8840](&v25);
}

void sub_190153214(void *a1)
{
  __cxa_free_exception(v1);
  __clang_call_terminate(a1);
}

void *to_string@<X0>(const AudioStreamPacketDescription *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  if (a1)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"{ numberDescs=", 14);
    std::ostream::operator<<();
    if (a2 <= a3 || a3 == 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = a3;
    }
    if (v8)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)", descs=[\n", 10);
      uint64_t v9 = 0;
      p_mVariableFramesInPacket = &a1->mVariableFramesInPacket;
      do
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"  [", 3);
        unint64_t v11 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"] byte offsets ", 15);
        uint64_t v12 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" - ", 3);
        unsigned int v13 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" (", 2);
        uint64_t v14 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)")", 1);
        if (*p_mVariableFramesInPacket)
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"; ", 2);
          int v15 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" fr\n", 4);
        }
        else
        {
          v22[0] = 10;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)v22, 1);
        }
        ++v9;
        p_mVariableFramesInPacket += 4;
      }
      while (v8 != v9);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"] }", 3);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a4, (uint64_t)v19);
    uint64_t v18 = *MEMORY[0x1E4FBA418];
    *(void *)((char *)&v19[-1] + *(void *)(v18 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v19[0] = MEMORY[0x1E4FBA470] + 16;
    if (v20 < 0) {
      operator delete((void *)v19[8]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (void *)MEMORY[0x192FC8840](&v21);
  }
  else
  {
    return std::string::basic_string[abi:ne180100]<0>(a4, "NULL");
  }
}

void sub_190153520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void *to_string@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  if (a1)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"{ numberInfos=", 14);
    std::ostream::operator<<();
    if (a2 <= a3 || a3 == 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = a3;
    }
    if (v8)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)", infos=[\n", 10);
      uint64_t v9 = 0;
      uint64_t v10 = a1 + 4;
      do
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"  [", 3);
        unint64_t v11 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"] isDep:", 8);
        uint64_t v12 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" preroll:", 9);
        unsigned int v13 = (void *)std::ostream::operator<<();
        uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" flags:0x", 9);
        *(_DWORD *)((char *)v14 + *(void *)(*v14 - 24) + 8) = *(_DWORD *)((unsigned char *)v14 + *(void *)(*v14 - 24)
                                                                                           + 8) & 0xFFFFFFB5 | 8;
        int v15 = (void *)std::ostream::operator<<();
        *(_DWORD *)((char *)v15 + *(void *)(*v15 - 24) + 8) = *(_DWORD *)((unsigned char *)v15 + *(void *)(*v15 - 24)
                                                                                           + 8) & 0xFFFFFFB5 | 2;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" (reserved:", 11);
        uint64_t v16 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)")\n", 2);
        ++v9;
        v10 += 16;
      }
      while (v8 != v9);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"] }", 3);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a4, (uint64_t)v20);
    uint64_t v19 = *MEMORY[0x1E4FBA418];
    *(void *)((char *)&v20[-1] + *(void *)(v19 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v20[0] = MEMORY[0x1E4FBA470] + 16;
    if (v21 < 0) {
      operator delete((void *)v20[8]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (void *)MEMORY[0x192FC8840](&v22);
  }
  else
  {
    return std::string::basic_string[abi:ne180100]<0>(a4, "NULL");
  }
}

void sub_190153828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void CAObjectDescription(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = 0;
  size_t v3 = (char *)CACopyObjectDescription(a1, &v5);
  if (v3)
  {
    unsigned int v4 = v3;
    std::string::basic_string[abi:ne180100]<0>(a2, v3);
    free(v4);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

uint64_t to_string@<X0>(const AudioBufferList *a1@<X0>, void *a2@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  unsigned int v4 = (void *)std::ostream::operator<<();
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" buffer", 7);
  if (a1->mNumberBuffers <= 1) {
    int v6 = ": ";
  }
  else {
    int v6 = "s: ";
  }
  if (a1->mNumberBuffers <= 1) {
    uint64_t v7 = 2;
  }
  else {
    uint64_t v7 = 3;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
  if (a1->mNumberBuffers)
  {
    unint64_t v8 = 0;
    p_mCFDataRef Data = &a1->mBuffers[0].mData;
    do
    {
      if (v8) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"; ", 2);
      }
      uint64_t v10 = (void *)std::ostream::operator<<();
      v18[0] = 45;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v18, 1);
      size_t v11 = strlen((const char *)*p_mData + *((unsigned int *)p_mData - 1));
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)*p_mData + *((unsigned int *)p_mData - 1), v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (", 2);
      uint64_t v12 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)")", 1);
      ++v8;
      p_mData += 2;
    }
    while (v8 < a1->mNumberBuffers);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a2, (uint64_t)v15);
  uint64_t v14 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v15[-1] + *(void *)(v14 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v15[0] = MEMORY[0x1E4FBA470] + 16;
  if (v16 < 0) {
    operator delete((void *)v15[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x192FC8840](&v17);
}

void sub_190153AE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void to_string(const AudioBufferList *a1@<X0>, AudioStreamBasicDescription *a2@<X2>, const char *a3@<X3>, unint64_t a4@<X1>, int a5@<W4>, void *a6@<X8>)
{
  AudioFormatString(&v24, a2);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v20);
  UInt32 mBytesPerFrame = v24.mBytesPerFrame;
  if ((v24.mFramesPerPacket & 0x80000000) == 0) {
    Float64 mSampleRate = COERCE_DOUBLE(&v24);
  }
  else {
    Float64 mSampleRate = v24.mSampleRate;
  }
  if (!a3) {
    a3 = "AudioBufferList";
  }
  size_t v12 = strlen(a3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)a3, v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"@", 1);
  unsigned int v13 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" (", 2);
  uint64_t v14 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" fr", 3);
  if (mSampleRate != 0.0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)", ", 2);
    size_t v15 = strlen(*(const char **)&mSampleRate);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, *(uint64_t *)&mSampleRate, v15);
  }
  if (a1->mNumberBuffers)
  {
    unint64_t v16 = 0;
    mBuffers = a1->mBuffers;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"    [", 5);
      *(void *)((char *)&v21[2] + *(void *)(v20 - 24)) = 2;
      uint64_t v18 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"] ", 2);
      DumpAudioBuffer(&v20, &mBuffers->mNumberChannels, a4, mBytesPerFrame, a5);
      ++v16;
      ++mBuffers;
    }
    while (v16 < a1->mNumberBuffers);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a6, (uint64_t)v21);
  uint64_t v20 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v21[-1] + *(void *)(v20 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v21[0] = MEMORY[0x1E4FBA470] + 16;
  if (v22 < 0) {
    operator delete((void *)v21[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FC8840](&v23);
  if (SHIBYTE(v24.mFramesPerPacket) < 0) {
    operator delete(*(void **)&v24.mSampleRate);
  }
}

void sub_190153DB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (*(char *)(v11 - 97) < 0) {
    operator delete(*(void **)(v11 - 120));
  }
  _Unwind_Resume(exception_object);
}

uint64_t AudioFormatString(const AudioStreamBasicDescription *a1, _DWORD *a2)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v12);
  if (a2[2] != 1819304813) {
    goto LABEL_10;
  }
  unsigned int v4 = a2[3];
  if (v4)
  {
    if (a2[8] == 32)
    {
      if ((v4 & 2) != 0)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"BEF", 3);
        UInt32 v7 = 10;
      }
      else
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"LEF", 3);
        UInt32 v7 = -10;
      }
      goto LABEL_11;
    }
LABEL_10:
    UInt32 v7 = 1;
    goto LABEL_11;
  }
  unsigned int v5 = a2[6];
  if (!v5)
  {
LABEL_6:
    UInt32 v7 = 0;
    goto LABEL_11;
  }
  if ((v4 & 0x20) != 0)
  {
    unsigned int v6 = 1;
  }
  else
  {
    unsigned int v6 = a2[7];
    if (!v6) {
      goto LABEL_6;
    }
  }
  UInt32 v7 = v5 / v6;
  if ((int)(v5 / v6) >= 1)
  {
    if (((v4 >> 7) & 0x3F) != 0)
    {
      uint64_t v9 = (void *)std::ostream::operator<<();
      LOBYTE(v10) = 46;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v10, 1);
      std::ostream::operator<<();
    }
    else
    {
      std::ostream::operator<<();
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"-bit", 4);
    if ((a2[3] & 2) != 0)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)" BEI", 4);
    }
    else
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)" LEI", 4);
      UInt32 v7 = -v7;
    }
  }
LABEL_11:
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(&v10, (uint64_t)v13);
  *(_OWORD *)&a1->Float64 mSampleRate = v10;
  *(void *)&a1->mBytesPerPacket = v11;
  a1->UInt32 mBytesPerFrame = v7;
  uint64_t v12 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v13[-1] + *(void *)(v12 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v13[0] = MEMORY[0x1E4FBA470] + 16;
  if (v14 < 0) {
    operator delete((void *)v13[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x192FC8840](&v15);
}

void sub_190154050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void *DumpAudioBuffer(void *a1, unsigned int *a2, unint64_t a3, int a4, int a5)
{
  long long v10 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" bytes ", 7);
  uint64_t v11 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"ch @ ", 5);
  std::ostream::operator<<();
  if (a3 >= 8) {
    a3 = 8;
  }
  if (a3)
  {
    if (*((void *)a2 + 1))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)":", 1);
      unint64_t v12 = a3 * *a2;
      if (v12)
      {
        unsigned int v13 = a1 + 3;
        char v14 = (char *)*((void *)a2 + 1);
        uint64_t v15 = a1 + 1;
        int v16 = a4 + 10;
        while (2)
        {
          switch(v16)
          {
            case 0:
            case 10:
            case 20:
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
              uint64_t v35 = *a1;
              *(void *)((char *)v13 + *(void *)(*a1 - 24)) = 6;
              *(void *)((char *)a1 + *(void *)(v35 - 24) + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = 3;
              v14 += 4;
              std::ostream::operator<<();
              goto LABEL_31;
            case 6:
            case 14:
              unsigned int v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
              *(_DWORD *)((char *)v15 + *(void *)(*a1 - 24)) = *(_DWORD *)((unsigned char *)v15 + *(void *)(*a1 - 24)) & 0xFFFFFFB5 | 8;
              std::operator<<[abi:ne180100]<std::char_traits<char>>(v34, 48);
              *(void *)((char *)v13 + *(void *)(*a1 - 24)) = 8;
              v14 += 4;
              std::ostream::operator<<();
              goto LABEL_31;
            case 7:
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
              uint64_t v23 = (uint64_t *)(*a1 - 24);
              uint64_t v22 = *v23;
              unsigned int v24 = *(_DWORD *)((unsigned char *)v15 + *v23) & 0xFFFFFFB5;
              if (a5)
              {
                *(_DWORD *)((char *)v15 + v22) = v24 | 8;
                std::operator<<[abi:ne180100]<std::char_traits<char>>(a1, 48);
                uint64_t v23 = (uint64_t *)(*a1 - 24);
                uint64_t v25 = 6;
              }
              else
              {
                *(_DWORD *)((char *)v15 + v22) = v24 | 2;
                uint64_t v25 = 8;
              }
              *(void *)((char *)v13 + *v23) = v25;
              goto LABEL_30;
            case 8:
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
              uint64_t v26 = *a1;
              uint64_t v27 = *(void *)(*a1 - 24);
              unsigned int v28 = *(_DWORD *)((unsigned char *)v15 + v27) & 0xFFFFFFB5;
              if (a5) {
                goto LABEL_15;
              }
              *(_DWORD *)((char *)v15 + v27) = v28 | 2;
              *(void *)((char *)v13 + *(void *)(v26 - 24)) = 6;
              goto LABEL_26;
            case 9:
            case 11:
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
              uint64_t v17 = *a1;
              uint64_t v18 = *(void *)(*a1 - 24);
              unsigned int v19 = *(_DWORD *)((unsigned char *)v15 + v18) & 0xFFFFFFB5;
              if (a5)
              {
                *(_DWORD *)((char *)v15 + v18) = v19 | 8;
                uint64_t v20 = std::operator<<[abi:ne180100]<std::char_traits<char>>(a1, 48);
                *(void *)((char *)v13 + *(void *)(*a1 - 24)) = 2;
                char v37 = *v14;
                char v21 = &v37;
              }
              else
              {
                *(_DWORD *)((char *)v15 + v18) = v19 | 2;
                *(void *)((char *)v13 + *(void *)(v17 - 24)) = 4;
                char v38 = *v14;
                char v21 = &v38;
                uint64_t v20 = a1;
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, 1);
              ++v14;
              goto LABEL_31;
            case 12:
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
              uint64_t v29 = *a1;
              uint64_t v27 = *(void *)(*a1 - 24);
              unsigned int v28 = *(_DWORD *)((unsigned char *)v15 + v27) & 0xFFFFFFB5;
              if (a5)
              {
LABEL_15:
                *(_DWORD *)((char *)v15 + v27) = v28 | 8;
                std::operator<<[abi:ne180100]<std::char_traits<char>>(a1, 48);
                *(void *)((char *)v13 + *(void *)(*a1 - 24)) = 4;
                std::ostream::operator<<();
              }
              else
              {
                *(_DWORD *)((char *)v15 + v27) = v28 | 2;
                *(void *)((char *)v13 + *(void *)(v29 - 24)) = 6;
LABEL_26:
                std::ostream::operator<<();
              }
              v14 += 2;
LABEL_31:
              if (!--v12) {
                return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"\n", 1);
              }
              continue;
            case 13:
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
              int v31 = (uint64_t *)(*a1 - 24);
              uint64_t v30 = *v31;
              unsigned int v32 = *(_DWORD *)((unsigned char *)v15 + *v31) & 0xFFFFFFB5;
              if (a5)
              {
                *(_DWORD *)((char *)v15 + v30) = v32 | 8;
                std::operator<<[abi:ne180100]<std::char_traits<char>>(a1, 48);
                int v31 = (uint64_t *)(*a1 - 24);
                uint64_t v33 = 6;
              }
              else
              {
                *(_DWORD *)((char *)v15 + v30) = v32 | 2;
                uint64_t v33 = 8;
              }
              *(void *)((char *)v13 + *v31) = v33;
LABEL_30:
              std::ostream::operator<<();
              v14 += 3;
              goto LABEL_31;
            default:
              goto LABEL_31;
          }
        }
      }
    }
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"\n", 1);
}

uint64_t to_string@<X0>(const AudioBufferList *a1@<X0>, const AudioStreamBasicDescription *a2@<X2>, const char *a3@<X3>, unint64_t a4@<X1>, int a5@<W4>, void *a6@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p.mBitsPerChannel);
  if (!a3) {
    a3 = "AudioBufferList";
  }
  size_t v9 = strlen(a3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p.mBitsPerChannel, (uint64_t)a3, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p.mBitsPerChannel, (uint64_t)"@", 1);
  long long v10 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)":\n", 2);
  if (a4)
  {
    unint64_t v11 = 0;
    unsigned int v12 = 0;
    int v13 = 0;
    unsigned int v32 = a2;
    while (1)
    {
      int v35 = v13;
      char v14 = (AudioStreamBasicDescription *)&a2[v11];
      if ((v14->mFormatFlags & 0x20) == 0) {
        break;
      }
      uint64_t mChannelsPerFrame = a2[v11].mChannelsPerFrame;
      if (mChannelsPerFrame) {
        goto LABEL_8;
      }
LABEL_22:
      v12 += mChannelsPerFrame;
      unint64_t v11 = (v35 + 1);
      int v13 = v35 + 1;
      if (v11 >= a4) {
        goto LABEL_23;
      }
    }
    uint64_t mChannelsPerFrame = 1;
LABEL_8:
    uint64_t v16 = 0;
    uint64_t v17 = &a2[v11];
    p_UInt32 mBytesPerFrame = &v17->mBytesPerFrame;
    p_mBytesPerPacket = &v17->mBytesPerPacket;
    uint64_t v19 = v12;
    unsigned int v34 = v12;
    uint64_t v20 = &a1->mBuffers[v12];
    do
    {
      if (v19 + v16 >= (unint64_t)a1->mNumberBuffers) {
        break;
      }
      AudioFormatString(&__p, v14);
      UInt32 v21 = *p_mBytesPerFrame;
      if (!*p_mBytesPerFrame)
      {
        UInt32 v21 = *p_mBytesPerPacket;
        __p.UInt32 mBytesPerFrame = 4;
      }
      UInt32 mDataByteSize = v20->mDataByteSize;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p.mBitsPerChannel, (uint64_t)"    [", 5);
      *(void *)((char *)&v39[2] + *(void *)(*(void *)&__p.mBitsPerChannel - 24)) = 2;
      uint64_t v23 = (void *)std::ostream::operator<<();
      unsigned int v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"] ", 2);
      *(void *)((char *)v24 + *(void *)(*v24 - 24) + 24) = 12;
      if ((__p.mFramesPerPacket & 0x80000000) == 0) {
        uint64_t p_p = (uint64_t)&__p;
      }
      else {
        uint64_t p_p = *(void *)&__p.mSampleRate;
      }
      if ((__p.mFramesPerPacket & 0x80000000) == 0) {
        uint64_t mFramesPerPacket_high = HIBYTE(__p.mFramesPerPacket);
      }
      else {
        uint64_t mFramesPerPacket_high = *(void *)&__p.mFormatID;
      }
      uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, p_p, mFramesPerPacket_high);
      unsigned int v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" ", 1);
      *(void *)((char *)v28 + *(void *)(*v28 - 24) + 24) = 5;
      uint64_t v29 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"fr ", 3);
      DumpAudioBuffer(&__p.mBitsPerChannel, &v20->mNumberChannels, mDataByteSize / v21, __p.mBytesPerFrame, a5);
      if (SHIBYTE(__p.mFramesPerPacket) < 0) {
        operator delete(*(void **)&__p.mSampleRate);
      }
      ++v16;
      ++v20;
    }
    while (mChannelsPerFrame != v16);
    a2 = v32;
    unsigned int v12 = v34;
    goto LABEL_22;
  }
LABEL_23:
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a6, (uint64_t)v39);
  *(void *)&__p.UInt32 mBitsPerChannel = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&__p.mBitsPerChannel + *(void *)(*(void *)&__p.mBitsPerChannel - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v39[0] = MEMORY[0x1E4FBA470] + 16;
  if (v40 < 0) {
    operator delete((void *)v39[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x192FC8840](&v41);
}

void sub_190154AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24)
{
}

uint64_t to_string@<X0>(const float *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v12);
  v16[0] = 124;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)v16, 1);
  __dst = a4;
  if (a3)
  {
    uint64_t v8 = 0;
    do
    {
      for (uint64_t i = a2; i; --i)
      {
        v16[0] = 32;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)v16, 1);
        *(void *)((char *)&v13[1] + *(void *)(v12 - 24)) = 3;
        std::ostream::operator<<();
        ++a1;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"| ", 2);
      ++v8;
    }
    while (v8 != a3);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(__dst, (uint64_t)v13);
  uint64_t v12 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v13[-1] + *(void *)(v12 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v13[0] = MEMORY[0x1E4FBA470] + 16;
  if (v14 < 0) {
    operator delete((void *)v13[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x192FC8840](&v15);
}

void sub_190154CF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void AUScopeElementString(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (a2 | a1)
  {
    if (a1 > 5) {
      caulk::make_string((caulk *)"scope %d, element %d", (uint64_t)a3, a1, a2);
    }
    else {
      caulk::make_string((caulk *)"%s scope, element %d", (uint64_t)a3, CAAUScopeElementFormatter::CAAUScopeElementFormatter(unsigned int,unsigned int)::scopeNames[a1], a2);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a3, "Global scope");
  }
}

uint64_t LOASAudioFile::CreatePacketTable(LOASAudioFile *this)
{
  return (*(uint64_t (**)(LOASAudioFile *, uint64_t, void, uint64_t))(*(void *)this + 688))(this, -1, 0, 1);
}

uint64_t LOASAudioFile::ScanForPackets(LOASAudioFile *this, uint64_t a2, DataSource *a3, char a4)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  v54.SInt64 mStartOffset = 0;
  *(void *)&v54.mVariableFramesInPacket = 0;
  uint64_t v52 = 0;
  if (*((unsigned char *)this + 312)) {
    return 0;
  }
  unsigned int v5 = a3;
  if (!a3) {
    unsigned int v5 = (DataSource *)*((void *)this + 13);
  }
  uint64_t v8 = (uint64_t *)*((void *)this + 15);
  if (!v8) {
    operator new();
  }
  uint64_t v9 = v8[3];
  if (a2 != -1 && v9 >= a2) {
    return 0;
  }
  unsigned int v53 = 0;
  uint64_t v10 = (*(uint64_t (**)(DataSource *, uint64_t *))(*(void *)v5 + 24))(v5, &v52);
  if (v10)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unsigned int buf = 136315394;
      *(void *)&uint8_t buf[4] = "LOASAudioFile.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 940;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  GetSize failed", buf, 0x12u);
    }
  }
  else
  {
    if (v9)
    {
      uint64_t v12 = *((void *)this + 9);
      CompressedPacketTable::operator[]((uint64_t)buf, v8, v9 - 1);
      uint64_t v13 = *(void *)buf;
      CompressedPacketTable::operator[]((uint64_t)&v45, v8, v9 - 1);
      uint64_t v14 = v13 + v12 + HIDWORD(v46);
    }
    else
    {
      (*(void (**)(LOASAudioFile *, void))(*(void *)this + 648))(this, 0);
      uint64_t v14 = *((void *)this + 9);
    }
    if (a2 == -1)
    {
      uint64_t v16 = -1;
    }
    else
    {
      uint64_t v15 = *((void *)this + 15);
      if (v15) {
        uint64_t v15 = *(void *)(v15 + 24);
      }
      uint64_t v16 = a2 - v15;
    }
    if (v14 >= v52)
    {
      uint64_t v10 = 0;
LABEL_73:
      *((unsigned char *)this + 312) = a4;
    }
    else
    {
      uint64_t v41 = (std::vector<char> *)((char *)this + 192);
      while (1)
      {
        UInt32 v51 = 0;
        uint64_t v17 = (*(uint64_t (**)(DataSource *, void, uint64_t, uint64_t, unsigned __int8 *, unsigned int *))(*(void *)v5 + 48))(v5, 0, v14, 10, v59, &v53);
        uint64_t v10 = v17;
        BOOL v19 = v17 == -39 || v17 == 0;
        BOOL v20 = v19 && v53 >= 3;
        if (!v20) {
          break;
        }
        if (MP4::LOASHeader::IsLOASSyncWord((MP4::LOASHeader *)v59, (const unsigned __int8 *)3, &v51, v18))
        {
          SInt64 v22 = v14 - *((void *)this + 9);
          v54.SInt64 mStartOffset = v22;
          unint64_t v23 = v51;
          v54.UInt32 mDataByteSize = v51;
          if (v23 > (*(unsigned int (**)(LOASAudioFile *))(*(void *)this + 632))(this)) {
            (*(void (**)(LOASAudioFile *, unint64_t))(*(void *)this + 648))(this, v23);
          }
          v14 += v23;
          if (v14 > v52) {
            goto LABEL_76;
          }
          AudioFileObject::AppendPacket(this, &v54);
          if ((*(unsigned int (**)(LOASAudioFile *))(*(void *)this + 272))(this))
          {
            std::vector<char>::pointer begin = (std::vector<char>::pointer)*((void *)this + 24);
            unint64_t v25 = *((void *)this + 25) - (void)begin;
            if (v23 > v25)
            {
              std::vector<unsigned char>::__append(v41, v23 - v25);
              std::vector<char>::pointer begin = v41->__begin_;
            }
            uint64_t v26 = (*(uint64_t (**)(DataSource *, void, SInt64, unint64_t, std::vector<char>::pointer, unsigned int *))(*(void *)v5 + 48))(v5, 0, *((void *)this + 9) + v22, v23, begin, &v53);
            uint64_t v10 = v26;
            if (v26 && v26 != -39 || v53 < v23) {
              break;
            }
            *(_DWORD *)unsigned int buf = 0;
            *(_WORD *)&uint8_t buf[4] = 1;
            *(void *)&buf[8] = 0;
            *(_DWORD *)&buf[15] = 0;
            uint64_t v57 = 0;
            uint64_t v58 = 0;
            uint64_t v56 = 0;
            std::vector<char>::pointer v27 = v41->__begin_;
            unsigned int v28 = &v41->__begin_[v23];
            v49[0] = v27;
            v49[1] = v28;
            uint64_t v50 = 0;
            if ((v27 & 3) != 0 && v23)
            {
              int v29 = 0;
              std::vector<char>::pointer v30 = v27 + 1;
              int v31 = -8;
              unint64_t v32 = (unint64_t)v30;
              do
              {
                LODWORD(v50) = v29 << 8;
                HIDWORD(v50) = v31 + 16;
                v49[0] = v32;
                int v33 = *(unsigned __int8 *)(v32 - 1) | (v29 << 8);
                LODWORD(v50) = v33;
                v31 += 8;
                if ((v30 & 3) == 0) {
                  break;
                }
                LOBYTE(v30) = (_BYTE)v30 + 1;
                int v29 = v33;
                BOOL v20 = v32++ >= (unint64_t)v28;
              }
              while (!v20);
              LODWORD(v50) = v33 << (24 - v31);
            }
            if (!MP4::LOASHeader::Deserialize((unsigned int *)buf, (uint64_t)v49))
            {
              if (!(*(unsigned int (**)(LOASAudioFile *))(*(void *)this + 272))(this)) {
                return 1718449215;
              }
              unsigned int v34 = (_DWORD *)*((void *)this + 38);
              if (!v34) {
                return 1718449215;
              }
              uint64_t v35 = (uint64_t)v41->__begin_;
              uint64_t v45 = v35;
              uint64_t v46 = v35;
              unint64_t v47 = v35 + v23;
              uint64_t v48 = 0;
              if ((v35 & 3) != 0)
              {
                int v36 = 0;
                int v37 = 0;
                uint64_t v38 = v35 + 1;
                unsigned int v39 = (unsigned __int8 *)v35;
                do
                {
                  if ((unint64_t)v39 >= v35 + v23) {
                    int v40 = 255;
                  }
                  else {
                    int v40 = *v39;
                  }
                  int v36 = v40 | (v36 << 8);
                  ++v39;
                  v37 += 8;
                  BOOL v19 = (v38++ & 3) == 0;
                }
                while (!v19);
                uint64_t v45 = v35 + ((v35 ^ 3) & 3) + 1;
                LODWORD(v48) = v36 << ((8 * ((v35 ^ 3) & 3)) ^ 0x18);
                HIDWORD(v48) = v37;
              }
              v44[0] = 0;
              v44[1] = 0;
              AT::TBitstreamReader<unsigned int>::SkipBits((uint64_t)&v45, HIDWORD(v58) + 24);
              PacketDependencyParser::PacketDependencyInfo(v34, (uint64_t)&v45, (uint64_t)v44);
              if (!LODWORD(v44[0]))
              {
                uint64_t v42 = v9;
                if (HIDWORD(v44[0]))
                {
                  long long v43 = xmmword_1901C6520;
                  WORD4(v43) = WORD2(v44[0]);
                  SampleToRollDistanceTable::append_entry((uint64_t)this + 216, (long long *)&v42);
                }
                else
                {
                  SyncSampleTable::append_entry((uint64_t)this + 272, &v42);
                }
              }
            }
          }
          if (v16 == -1) {
            uint64_t v16 = -1;
          }
          else {
            --v16;
          }
          if (!v16) {
            break;
          }
          ++v9;
        }
        else
        {
          unsigned int v21 = ID3Size(v53, v59, (int *)buf);
          if (!v21)
          {
            uint64_t v10 = 4294967256;
            break;
          }
          v14 += v21;
        }
        if (v14 >= v52) {
          goto LABEL_73;
        }
      }
    }
  }
  if ((v10 & 0xFFFFFFFE) == 0xFFFFFFD8)
  {
    if (v10 == -39)
    {
LABEL_76:
      uint64_t v10 = 0;
      *((unsigned char *)this + 312) = a4;
      return v10;
    }
    return 0;
  }
  return v10;
}

uint64_t LOASAudioFile::GetPacketSizeUpperBound(LOASAudioFile *this)
{
  unsigned int v12 = 0;
  long long v2 = *(_OWORD *)((char *)this + 40);
  *(_OWORD *)&v10.Float64 mSampleRate = *(_OWORD *)((char *)this + 24);
  *(_OWORD *)&v10.mBytesPerPacket = v2;
  *(void *)&v10.UInt32 mBitsPerChannel = *((void *)this + 7);
  AudioConverterRef inAudioConverter = 0;
  v9.Float64 mSampleRate = v10.mSampleRate;
  *(_OWORD *)&v9.signed int mFormatID = xmmword_1901C60C0;
  v9.UInt32 mBytesPerFrame = 4;
  v9.uint64_t mChannelsPerFrame = HIDWORD(v2);
  *(void *)&v9.UInt32 mBitsPerChannel = 32;
  int v3 = AudioConverterNewWithOptions(&v10, &v9, 0, &inAudioConverter);
  unsigned int v4 = inAudioConverter;
  if (!inAudioConverter) {
    return (*((_DWORD *)this + 13) << 10);
  }
  unsigned int v5 = (int *)*((void *)this + 21);
  unsigned int v6 = (int *)*((void *)this + 22);
  if (v5 != v6)
  {
    LODWORD(v18) = 1684891491;
    int v20 = v6 - v5;
    BOOL v19 = v5;
    uint64_t v13 = (int *)&v18;
    uint64_t v14 = (int **)&v20;
    uint64_t v15 = &v19;
    uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t))caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterSetProperty::$_0>;
    uint64_t v17 = &v13;
    int v3 = with_resolved((int)inAudioConverter, &v16);
  }
  if (!v3)
  {
    int v8 = 4;
    int v20 = 2020175987;
    uint64_t v18 = &v12;
    BOOL v19 = &v8;
    uint64_t v13 = &v20;
    uint64_t v14 = &v19;
    uint64_t v15 = (int **)&v18;
    uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t))caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterGetProperty::$_0>;
    uint64_t v17 = &v13;
    with_resolved((int)v4, &v16);
  }
  AudioConverterDispose(v4);
  uint64_t result = v12;
  if (!v12) {
    return (*((_DWORD *)this + 13) << 10);
  }
  return result;
}

uint64_t LOASAudioFile::FindMaximumPacketSize(LOASAudioFile *this)
{
  if (*((unsigned char *)this + 312)
    || !(*(unsigned int (**)(LOASAudioFile *, uint64_t, void, uint64_t))(*(void *)this + 688))(this, -1, 0, 1))
  {
    return *((unsigned int *)this + 28);
  }
  else
  {
    return 0;
  }
}

uint64_t LOASAudioFile::IsDataFormatSupported(LOASAudioFile *this, const AudioStreamBasicDescription *a2)
{
  return IsSupportedLATMFormat(a2->mFormatID);
}

uint64_t IsSupportedLATMFormat(int a1)
{
  uint64_t result = 1;
  if (a1 > 1634497331)
  {
    if (a1 > 1936487277)
    {
      if (a1 != 1936487278 && a1 != 1953986161)
      {
        int v3 = 1970495843;
LABEL_14:
        if (a1 != v3) {
          return 0;
        }
      }
    }
    else if (a1 != 1634497332 && a1 != 1836069684)
    {
      int v3 = 1936487267;
      goto LABEL_14;
    }
  }
  else if (((a1 - 1633772389) > 0xE || ((1 << (a1 - 101)) & 0x488F) == 0) {
         && (a1 - 778924081) >= 2)
  }
  {
    int v3 = 1633772320;
    goto LABEL_14;
  }
  return result;
}

uint64_t LOASAudioFile::GetEstimatedDuration(LOASAudioFile *this, double *a2)
{
  double v4 = *((double *)this + 3);
  uint64_t v5 = *((unsigned int *)this + 11);
  if (*((unsigned char *)this + 312))
  {
    if (v5) {
      double v6 = (double)((*(uint64_t (**)(LOASAudioFile *))(*(void *)this + 240))(this) * v5) / v4;
    }
    else {
      double v6 = 0.0;
    }
    uint64_t v7 = 0;
LABEL_8:
    *a2 = v6;
    return v7;
  }
  *a2 = 0.0;
  if ((*(unsigned int (**)(LOASAudioFile *, uint64_t, void, uint64_t))(*(void *)this + 688))(this, 16, 0, 1))
  {
    return 0;
  }
  AudioStreamBasicDescription v9 = (uint64_t *)*((void *)this + 15);
  if (!v9) {
    operator new();
  }
  uint64_t v21 = 0;
  uint64_t v7 = (*(uint64_t (**)(void, uint64_t *))(**((void **)this + 13) + 24))(*((void *)this + 13), &v21);
  if (!v7)
  {
    v21 -= *((void *)this + 9);
    unint64_t v10 = *((void *)this + 15);
    if (v10) {
      unint64_t v10 = *(void *)(v10 + 24);
    }
    uint64_t v11 = v10 - 1;
    unint64_t v12 = v10 >> 1;
    if (v12 >= 8) {
      uint64_t v13 = 8;
    }
    else {
      uint64_t v13 = v12;
    }
    uint64_t v14 = v11 - v13;
    CompressedPacketTable::operator[]((uint64_t)v20, v9, v11);
    uint64_t v15 = v20[0];
    CompressedPacketTable::operator[]((uint64_t)v18, v9, v11);
    uint64_t v16 = v15 + v19;
    CompressedPacketTable::operator[]((uint64_t)v17, v9, v13);
    double v6 = (double)v21 / (double)(v16 - v17[0]) * (double)(unint64_t)(v14 * v5) / v4;
    goto LABEL_8;
  }
  return v7;
}

uint64_t LOASAudioFile::GetInfoDictionary(LOASAudioFile *this, CACFDictionary *a2)
{
  double v5 = 0.0;
  int v3 = (AudioFileObject *)(*(uint64_t (**)(LOASAudioFile *, double *))(*(void *)this + 544))(this, &v5);
  if (v3) {
    return 1886681407;
  }
  AudioFileObject::AddDurationToInfoDictionary(v3, a2, &v5);
  return 0;
}

uint64_t LOASAudioFile::GetChannelLayout(LOASAudioFile *this, unsigned int *a2, AudioChannelLayout *a3)
{
  uint64_t result = 561211770;
  if (a2)
  {
    LODWORD(v5) = *a2;
    if (*a2 >= 0xC)
    {
      if (v5 >= 0x20) {
        size_t v5 = 32;
      }
      else {
        size_t v5 = v5;
      }
      *a2 = v5;
      if (a3)
      {
        bzero(a3, v5);
        uint64_t result = 0;
        a3->mChannelLayoutTag = *((_DWORD *)this + 35);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t LOASAudioFile::GetChannelLayoutSize(LOASAudioFile *this, unsigned int *a2, unsigned int *a3)
{
  if (a3) {
    *a3 = 0;
  }
  if (a2) {
    *a2 = 32;
  }
  return 0;
}

uint64_t LOASAudioFile::SetMagicCookieData(LOASAudioFile *this, unsigned int a2, char *a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  void v19[2] = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  v23[2] = 0;
  MP4AudioProgramConfig::Clear((MP4AudioProgramConfig *)v23);
  long long v25 = 0u;
  long long v24 = 0u;
  DecoderConfigDescr::cleanup((DecoderConfigDescr *)v19);
  bzero(v18, 0x5F0uLL);
  v16[0] = a3;
  v16[1] = &a3[a2];
  uint64_t v17 = 0;
  if ((a3 & 3) != 0 && a2)
  {
    int v6 = 0;
    char v7 = (_BYTE)a3 + 1;
    int v8 = -8;
    AudioStreamBasicDescription v9 = a3;
    do
    {
      int v10 = v8;
      int v11 = *v9++;
      int v6 = v11 | (v6 << 8);
      v8 += 8;
      if ((v7 & 3) == 0) {
        break;
      }
      ++v7;
    }
    while (v9 < &a3[a2]);
    v16[0] = v9;
    LODWORD(v17) = v6 << (24 - v8);
    HIDWORD(v17) = v10 + 16;
  }
  unsigned int v15 = 0;
  if (MP4AudioESDS::Deserialize((uint64_t)v18, (uint64_t)v16, (int *)&v15, 2))
  {
    uint64_t v12 = 1718449215;
  }
  else
  {
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)this + 21, a3, &a3[a2], a2);
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)this + 18, &a3[v15], &a3[v15 + v20], v20);
    uint64_t v13 = *((void *)this + 38);
    if (v13)
    {
      MEMORY[0x192FC8940](v13, 0x1000C403E1C8BA9);
      *((void *)this + 38) = 0;
    }
    if ((*(unsigned int (**)(LOASAudioFile *))(*(void *)this + 272))(this)) {
      operator new();
    }
    uint64_t v12 = 0;
  }
  if (*((void *)&v25 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v25 + 1));
  }
  if (*((void *)&v24 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v24 + 1));
  }
  return v12;
}

void sub_190155C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  MEMORY[0x192FC8940](v6, 0x1000C403E1C8BA9);
  MP4AudioESDS::~MP4AudioESDS((MP4AudioESDS *)va);
  _Unwind_Resume(a1);
}

uint64_t LOASAudioFile::GetMagicCookieData(LOASAudioFile *this, unsigned int *a2, void *__dst)
{
  uint64_t result = 2003334207;
  if (__dst)
  {
    uint64_t v6 = (unsigned char *)*((void *)this + 21);
    char v7 = (unsigned char *)*((void *)this + 22);
    if (v6 != v7)
    {
      uint64_t result = 561211770;
      if (a2)
      {
        size_t v8 = v7 - v6;
        if (v8 <= *a2)
        {
          memmove(__dst, v6, v8);
          uint64_t result = 0;
          *a2 = *((_DWORD *)this + 44) - *((_DWORD *)this + 42);
        }
      }
    }
  }
  return result;
}

uint64_t LOASAudioFile::GetMagicCookieDataSize(LOASAudioFile *this, unsigned int *a2, unsigned int *a3)
{
  if (a3) {
    *a3 = *((unsigned char *)this + 100) & 2;
  }
  if (a2) {
    *a2 = *((_DWORD *)this + 44) - *((_DWORD *)this + 42);
  }
  return 0;
}

uint64_t LOASAudioFile::PacketToDependencyInfo(LOASAudioFile *this, AudioPacketDependencyInfoTranslation *a2)
{
  if ((*(unsigned int (**)(LOASAudioFile *))(*(void *)this + 272))(this))
  {
    (*(void (**)(LOASAudioFile *, SInt64, void, uint64_t))(*(void *)this + 688))(this, a2->mPacket + 1, 0, 1);
    return PacketToDependencyInfoForRestrictedRandomAccess(a2, (LOASAudioFile *)((char *)this + 216), (LOASAudioFile *)((char *)this + 272));
  }
  else
  {
    AudioFileObject::PacketToDependencyInfo(this, a2);
    return 0;
  }
}

uint64_t LOASAudioFile::ScanForIndependentPacket(uint64_t a1, int a2, AudioIndependentPacketTranslation *a3)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 272))(a1))
  {
    (*(void (**)(uint64_t, SInt64, void, uint64_t))(*(void *)a1 + 688))(a1, a3->mPacket + 2, 0, 1);
    if (a2 == 1)
    {
      uint64_t v6 = *(void *)(a1 + 120);
      if (v6) {
        unint64_t v7 = *(void *)(v6 + 24);
      }
      else {
        unint64_t v7 = 0;
      }
      while (1)
      {
        uint64_t result = ScanForIndependentPacketWithRestrictedRandomAccess(1, a3, (SampleToRollDistanceTable **)(a1 + 216), (SyncSampleTable **)(a1 + 272));
        if (result) {
          break;
        }
        if (a3->mIndependentlyDecodablePacket == -1)
        {
          (*(void (**)(uint64_t, unint64_t, void, uint64_t))(*(void *)a1 + 688))(a1, v7 + 100, 0, 1);
          uint64_t v9 = *(void *)(a1 + 120);
          if (v9)
          {
            unint64_t v10 = *(void *)(v9 + 24);
            BOOL v11 = v10 > v7;
            unint64_t v7 = v10;
            if (v11) {
              continue;
            }
          }
        }
        return 0;
      }
    }
    else
    {
      return ScanForIndependentPacketWithRestrictedRandomAccess(0, a3, (SampleToRollDistanceTable **)(a1 + 216), (SyncSampleTable **)(a1 + 272));
    }
  }
  else
  {
    return AudioFileObject::ScanForIndependentPacket(a1, a2, a3);
  }
  return result;
}

uint64_t LOASAudioFile::PacketToRollDistance(LOASAudioFile *this, AudioPacketRollDistanceTranslation *a2)
{
  a2->mRollDistance = 0;
  (*(void (**)(LOASAudioFile *, SInt64, void, uint64_t))(*(void *)this + 688))(this, a2->mPacket + 1, 0, 1);
  if (!*((unsigned char *)this + 272) && !*((unsigned char *)this + 216)) {
    return 0;
  }
  return PacketToRollDistanceForRestrictedRandomAccess(a2, (LOASAudioFile *)((char *)this + 216), (LOASAudioFile *)((char *)this + 272));
}

uint64_t LOASAudioFile::GetNumPackets(LOASAudioFile *this)
{
  if (*((unsigned char *)this + 312)
    || (int v4 = (*(uint64_t (**)(LOASAudioFile *, uint64_t, void, uint64_t))(*(void *)this + 688))(this, -1, 0, 1), result = 0, !v4))
  {
    uint64_t v2 = *((void *)this + 15);
    if (v2) {
      return *(void *)(v2 + 24);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t LOASAudioFile::GetNumBytes(LOASAudioFile *this)
{
  uint64_t v3 = 0;
  (*(void (**)(void, uint64_t *))(**((void **)this + 13) + 24))(*((void *)this + 13), &v3);
  return v3 - *((void *)this + 9);
}

uint64_t LOASAudioFile::UpdateSize(LOASAudioFile *this)
{
  return 0;
}

uint64_t LOASAudioFile::GetFormatList(LOASAudioFile *this, UInt32 *ioPropertyDataSize, AudioFormatListItem *outPropertyData)
{
  Float64 v6 = *((double *)this + 3);
  AudioFormatID v7 = *((_DWORD *)this + 8);
  *(_OWORD *)unint64_t v10 = *(_OWORD *)((char *)this + 36);
  *(_OWORD *)&v10[12] = *((_OWORD *)this + 3);
  memset(inSpecifier, 0, sizeof(inSpecifier));
  DWORD2(inSpecifier[0]) = v7;
  uint64_t v8 = *((void *)this + 21);
  uint64_t v12 = 0;
  uint64_t v13 = v8;
  int v14 = *((_DWORD *)this + 44) - v8;
  if (AudioFormatGetProperty(0x666C7374u, 0x38u, inSpecifier, ioPropertyDataSize, outPropertyData))
  {
    outPropertyData->mASBD.Float64 mSampleRate = v6;
    outPropertyData->mASBD.signed int mFormatID = v7;
    *(_OWORD *)&outPropertyData->mASBD.AudioFormatFlags mFormatFlags = *(_OWORD *)v10;
    *(_OWORD *)&outPropertyData->mASBD.UInt32 mBytesPerFrame = *(_OWORD *)&v10[12];
    outPropertyData->mChannelLayoutTag = *((_DWORD *)this + 35);
    *UInt32 ioPropertyDataSize = 48;
  }
  return 0;
}

uint64_t LOASAudioFile::GetFormatListInfo(LOASAudioFile *this, UInt32 *outPropertyDataSize, unsigned int *a3)
{
  int v5 = *((_DWORD *)this + 8);
  memset(v8, 0, sizeof(v8));
  DWORD2(v8[0]) = v5;
  uint64_t v6 = *((void *)this + 21);
  uint64_t v9 = 0;
  uint64_t v10 = v6;
  int v11 = *((_DWORD *)this + 44) - v6;
  if (AudioFormatGetPropertyInfo(0x666C7374u, 0x38u, v8, outPropertyDataSize))
  {
    *UInt32 outPropertyDataSize = 48;
    *a3 = 0;
  }
  return 0;
}

uint64_t LOASAudioFile::SetDataFormat(LOASAudioFile *this, AudioStreamBasicDescription *a2)
{
  uint64_t v3 = AudioFileObject::SetDataFormat(this, a2);
  if (!v3 && (*(unsigned int (**)(LOASAudioFile *))(*(void *)this + 272))(this)) {
    *((unsigned char *)this + 272) = 1;
  }
  uint64_t v4 = *((void *)this + 38);
  if (v4)
  {
    MEMORY[0x192FC8940](v4, 0x1000C403E1C8BA9);
    *((void *)this + 38) = 0;
  }
  uint64_t v5 = *((unsigned int *)this + 11);
  if (!v5) {
    goto LABEL_14;
  }
  double v6 = *((double *)this + 3);
  double v7 = *((double *)this + 40);
  BOOL v8 = 9.22337204e18 / v7 <= v6 || v7 <= 0.0;
  uint64_t v9 = (uint64_t)(v6 * v7);
  if (v8) {
    uint64_t v9 = 0;
  }
  uint64_t v10 = v9 / v5;
  if (!v10) {
LABEL_14:
  }
    uint64_t v10 = 215;
  *((void *)this + 41) = v10;
  return v3;
}

uint64_t LOASAudioFile::SetProperty(LOASAudioFile *this, int a2, int a3, uint64_t *a4)
{
  if (a2 != 1919116903) {
    return AudioFileObject::SetProperty(this, a2, a3, a4);
  }
  if (a3 != 8) {
    return 561211770;
  }
  double v4 = *(double *)a4;
  *((void *)this + 40) = *a4;
  uint64_t v5 = *((unsigned int *)this + 11);
  if (!v5) {
    goto LABEL_11;
  }
  double v6 = *((double *)this + 3);
  BOOL v7 = 9.22337204e18 / v4 <= v6 || v4 <= 0.0;
  uint64_t v8 = (uint64_t)(v4 * v6);
  if (v7) {
    uint64_t v8 = 0;
  }
  uint64_t v9 = v8 / v5;
  if (!v9) {
LABEL_11:
  }
    uint64_t v9 = 215;
  uint64_t v10 = 0;
  *((void *)this + 41) = v9;
  return v10;
}

double LOASAudioFile::GetProperty(LOASAudioFile *this, int a2, unsigned int *a3, uint64_t *a4)
{
  if (a2 == 1919116903)
  {
    if (*a3 >= 8)
    {
      double result = *((double *)this + 40);
      *(double *)a4 = result;
      *a3 = 8;
    }
  }
  else
  {
    AudioFileObject::GetProperty(this, a2, a3, a4);
  }
  return result;
}

uint64_t LOASAudioFile::GetPropertyInfo(LOASAudioFile *this, int a2, unsigned int *a3, unsigned int *a4)
{
  if (a2 != 1919116903) {
    return AudioFileObject::GetPropertyInfo(this, a2, a3, a4);
  }
  if (a3) {
    *a3 = 8;
  }
  if (a4) {
    *a4 = *((unsigned char *)this + 100) & 2;
  }
  return 0;
}

uint64_t LOASAudioFile::WritePackets(LOASAudioFile *this, unsigned __int8 a2, unsigned int a3, const AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, char *a7)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  v72.SInt64 mStartOffset = 0;
  *(void *)&v72.mVariableFramesInPacket = 0;
  unsigned int v7 = *a6;
  if (!*a6)
  {
    uint64_t v15 = 2003334207;
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return v15;
    }
    *(_DWORD *)unsigned int buf = 136315394;
    *(void *)&uint8_t buf[4] = "LOASAudioFile.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 319;
    uint64_t v16 = MEMORY[0x1E4F14500];
    uint64_t v17 = "%25s:%-5d  WritePackets has no packets to write";
LABEL_19:
    unsigned int v20 = buf;
    goto LABEL_20;
  }
  if (!a4)
  {
    uint64_t v15 = 2003334207;
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return v15;
    }
    *(_DWORD *)unsigned int buf = 136315394;
    *(void *)&uint8_t buf[4] = "LOASAudioFile.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 321;
    uint64_t v16 = MEMORY[0x1E4F14500];
    uint64_t v17 = "%25s:%-5d  WritePackets has no packet descriptions";
    goto LABEL_19;
  }
  uint64_t v13 = (uint64_t *)*((void *)this + 15);
  if (v13) {
    uint64_t v14 = v13[3];
  }
  else {
    uint64_t v14 = 0;
  }
  if (v14 != a5)
  {
    uint64_t v15 = 1885563711;
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return v15;
    }
    *(_DWORD *)unsigned int buf = 136315394;
    *(void *)&uint8_t buf[4] = "LOASAudioFile.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 324;
    uint64_t v16 = MEMORY[0x1E4F14500];
    uint64_t v17 = "%25s:%-5d  WritePackets: only appending is supported";
    goto LABEL_19;
  }
  uint64_t v18 = *((void *)this + 18);
  uint64_t v19 = *((void *)this + 19);
  if (v18 == v19)
  {
    uint64_t v15 = 2003334207;
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return v15;
    }
    *(_DWORD *)unsigned int buf = 136315394;
    *(void *)&uint8_t buf[4] = "LOASAudioFile.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 327;
    uint64_t v16 = MEMORY[0x1E4F14500];
    uint64_t v17 = "%25s:%-5d  WritePackets has no magic cookie from which to derive an AudioSpecificConfig to serialize; please r"
          "efer to the headerdoc for kAudioFilePropertyMagicCookieData";
    goto LABEL_19;
  }
  if ((unint64_t)(v19 - v18) >> 24)
  {
    uint64_t v15 = 1718449215;
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return v15;
    }
    *(_DWORD *)unsigned int buf = 136315394;
    *(void *)&uint8_t buf[4] = "LOASAudioFile.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 328;
    uint64_t v16 = MEMORY[0x1E4F14500];
    uint64_t v17 = "%25s:%-5d  LATM can't accommodate an AudioSpecificConfig with a size requiring more than 3 bytes to store";
    goto LABEL_19;
  }
  if (!v13) {
    operator new();
  }
  UInt32 v22 = 0;
  uint64_t v23 = v7;
  p_uint64_t mDataByteSize = &a4->mDataByteSize;
  do
  {
    UInt32 v26 = *p_mDataByteSize;
    p_mDataByteSize += 4;
    UInt32 v25 = v26;
    if (v26 > v22) {
      UInt32 v22 = v25;
    }
    --v23;
  }
  while (v23);
  std::vector<char>::size_type v27 = v22 + 18 + *((_DWORD *)this + 38) - *((_DWORD *)this + 36);
  uint64_t v67 = (std::vector<char> *)((char *)this + 192);
  if (*((void *)this + 25) - *((void *)this + 24) < v27)
  {
    std::vector<unsigned char>::resize(v67, v27);
    unsigned int v7 = *a6;
  }
  if (!v7)
  {
    LODWORD(v28) = 0;
LABEL_92:
    uint64_t v15 = 0;
    *a6 = v28;
    return v15;
  }
  uint64_t v65 = a5;
  int v66 = v13;
  uint64_t v28 = 0;
  int v64 = a7;
  int v63 = a7 + 1;
  while (1)
  {
    int v29 = &a4[v28];
    SInt64 mStartOffset = v29->mStartOffset;
    uint64_t mDataByteSize = v29->mDataByteSize;
    v71[0] = 0;
    v71[1] = 0;
    UInt32 v70 = 0;
    uint64_t v69 = v28 + v65;
    if (v28 + v65)
    {
      uint64_t v32 = *((void *)this + 15);
      if (v32) {
        uint64_t v32 = *(void *)(v32 + 24);
      }
      CompressedPacketTable::operator[]((uint64_t)buf, v66, v32 - 1);
      uint64_t v33 = *((void *)this + 15);
      if (v33) {
        uint64_t v33 = *(void *)(v33 + 24);
      }
      uint64_t v34 = *(void *)buf;
      CompressedPacketTable::operator[]((uint64_t)v76, v66, v33 - 1);
      SInt64 v35 = v34 + *(unsigned int *)&v76[12];
    }
    else
    {
      SInt64 v35 = 0;
    }
    v72.SInt64 mStartOffset = v35;
    int v36 = &v64[mStartOffset];
    if ((*(unsigned int (**)(LOASAudioFile *))(*(void *)this + 272))(this))
    {
      int v37 = (_DWORD *)*((void *)this + 38);
      if (v37)
      {
        *(void *)unsigned int buf = &v64[mStartOffset];
        *(void *)&buf[8] = &v64[mStartOffset];
        *(void *)&uint8_t buf[16] = &v36[mDataByteSize];
        uint64_t v74 = 0;
        if ((v36 & 3) != 0)
        {
          int v38 = 0;
          unsigned int v39 = &v63[mStartOffset];
          int v40 = -8;
          uint64_t v41 = (unsigned __int8 *)&v64[mStartOffset];
          do
          {
            int v42 = v40;
            if (v41 >= (unsigned __int8 *)&v36[mDataByteSize]) {
              int v43 = 255;
            }
            else {
              int v43 = *v41;
            }
            int v38 = v43 | (v38 << 8);
            ++v41;
            int v40 = v42 + 8;
            BOOL v45 = (v39++ & 3) == 0;
          }
          while (!v45);
          *(void *)unsigned int buf = v41;
          LODWORD(v74) = v38 << (16 - v42);
          HIDWORD(v74) = v42 + 16;
        }
        PacketDependencyParser::PacketDependencyInfo(v37, (uint64_t)buf, (uint64_t)v71);
        int v68 = v71[0];
        if (LODWORD(v71[0])) {
          goto LABEL_57;
        }
      }
    }
    uint64_t v44 = *((void *)this + 42);
    if (v44 != -1 && v69 - v44 < *((void *)this + 41))
    {
      BOOL v45 = (*(unsigned int (**)(LOASAudioFile *))(*(void *)this + 272))(this) && HIDWORD(v71[0]) == 0;
      if (!v45)
      {
        int v68 = 0;
LABEL_57:
        int v46 = 0;
        int v47 = 4;
        goto LABEL_67;
      }
    }
    int v68 = 0;
    int v48 = *((_DWORD *)this + 38) - *((_DWORD *)this + 36);
    if ((8 * v48) <= 0xFF) {
      int v49 = 10;
    }
    else {
      int v49 = 11;
    }
    if (((8 * v48) & 0xFFFF0000) != 0) {
      int v50 = v48 + 1;
    }
    else {
      int v50 = *((_DWORD *)this + 38) - *((_DWORD *)this + 36);
    }
    BOOL v45 = ((8 * v48) & 0xFF000000) == 0;
    int v47 = v50 + v49;
    if (!v45) {
      ++v47;
    }
    int v46 = 1;
LABEL_67:
    unint64_t v51 = mDataByteSize + mDataByteSize / 0xFF + v47 + 1;
    std::vector<char>::pointer begin = (std::vector<char>::pointer)*((void *)this + 24);
    unint64_t v53 = *((void *)this + 25) - (void)begin;
    if (v51 > v53)
    {
      std::vector<unsigned char>::__append(v67, v51 - v53);
      std::vector<char>::pointer begin = v67->__begin_;
    }
    *(void *)unsigned int buf = begin;
    *(void *)&buf[8] = begin;
    AudioStreamPacketDescription v54 = &begin[v51];
    *(void *)&uint8_t buf[16] = v54;
    uint64_t v74 = 0x2000000000;
    int v75 = begin & 3;
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)buf, 695, 0xBu);
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)buf, 0, 0xDu);
    if (v46)
    {
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)buf, 0, 1u);
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)buf, 1, 1u);
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)buf, 0, 1u);
      MP4::LATMHeader::PutVariableSizeValue((uint64_t)buf, 0xFFu);
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)buf, 1, 1u);
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)buf, 0, 6u);
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)buf, 0, 4u);
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)buf, 0, 3u);
      MP4::LATMHeader::PutVariableSizeValue((uint64_t)buf, 8 * (*((_DWORD *)this + 38) - *((_DWORD *)this + 36)));
      uint64_t v55 = *((void *)this + 18);
      if (*((void *)this + 19) != v55)
      {
        uint64_t v56 = 0;
        unsigned int v57 = 1;
        do
        {
          AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)buf, *(unsigned __int8 *)(v55 + v56), 8u);
          uint64_t v56 = v57;
          uint64_t v55 = *((void *)this + 18);
        }
        while (*((void *)this + 19) - v55 > (unint64_t)v57++);
      }
      *((void *)this + 42) = v69;
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)buf, 0, 3u);
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)buf, 255, 8u);
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)buf, 0, 1u);
      int v59 = 0;
    }
    else
    {
      int v59 = 1;
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)buf, v59, 1u);
    unsigned int i = mDataByteSize;
    if (mDataByteSize >= 0xFF)
    {
      for (unsigned int i = mDataByteSize; i > 0xFE; i -= 255)
        AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)buf, 255, 8u);
    }
    AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)buf, i, 8u);
    if (mDataByteSize)
    {
      do
      {
        int v61 = *v36++;
        AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)buf, v61, 8u);
        --mDataByteSize;
      }
      while (mDataByteSize);
    }
    AT::TBitstreamWriter<unsigned int>::Flush((uint64_t)buf);
    UInt32 v70 = (8 * ((int)v54 - (int)begin) - (HIDWORD(v74) + 8 * (*(_DWORD *)&buf[16] - *(_DWORD *)&buf[8])) + 32) >> 3;
    unsigned int v62 = v70 - 3;
    if ((v70 - 3) >> 13)
    {
      uint64_t v15 = 1869627199;
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        return v15;
      }
      *(_DWORD *)int v76 = 136315394;
      *(void *)&v76[4] = "LOASAudioFile.cpp";
      *(_WORD *)&v76[12] = 1024;
      *(_DWORD *)&v76[14] = 467;
      uint64_t v16 = MEMORY[0x1E4F14500];
      uint64_t v17 = "%25s:%-5d  Packet is too large to be accommodated by LATM";
      goto LABEL_97;
    }
    if (v62 >= 0x100) {
      v67->__begin_[1] |= BYTE1(v62);
    }
    *(unsigned char *)(*((void *)this + 24) + 2) = v62;
    uint64_t v15 = (*(uint64_t (**)(void, void, SInt64, void, void, UInt32 *))(**((void **)this + 13) + 56))(*((void *)this + 13), 0, *((void *)this + 9) + v35, v70, *((void *)this + 24), &v70);
    if (v15) {
      break;
    }
    v72.mVariableFramesInPacket = a4[v28].mVariableFramesInPacket;
    v72.uint64_t mDataByteSize = v70;
    AudioFileObject::AppendPacket(this, &v72);
    if ((*(unsigned int (**)(LOASAudioFile *))(*(void *)this + 272))(this) && !v68)
    {
      *(void *)int v76 = v28 + v65;
      if (HIDWORD(v71[0]))
      {
        *(_OWORD *)&char v76[8] = xmmword_1901C6520;
        *(_WORD *)&v76[16] = WORD2(v71[0]);
        SampleToRollDistanceTable::append_entry((uint64_t)this + 216, (long long *)v76);
      }
      else
      {
        SyncSampleTable::append_entry((uint64_t)this + 272, v76);
      }
    }
    if (++v28 >= (unint64_t)*a6) {
      goto LABEL_92;
    }
  }
  if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
    return v15;
  }
  *(_DWORD *)int v76 = 136315394;
  *(void *)&v76[4] = "LOASAudioFile.cpp";
  *(_WORD *)&v76[12] = 1024;
  *(_DWORD *)&v76[14] = 517;
  uint64_t v16 = MEMORY[0x1E4F14500];
  uint64_t v17 = "%25s:%-5d  GetDataSource()->WriteBytes Failed";
LABEL_97:
  unsigned int v20 = v76;
LABEL_20:
  _os_log_impl(&dword_18FEC0000, v16, OS_LOG_TYPE_ERROR, v17, v20, 0x12u);
  return v15;
}

uint64_t LOASAudioFile::ReadPacketData(LOASAudioFile *this, uint64_t a2, unsigned int *a3, AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, unsigned char *a7)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  if (a4) {
    BOOL v7 = a7 == 0;
  }
  else {
    BOOL v7 = 0;
  }
  int v8 = v7;
  if (a3 && (int v10 = *a3) != 0)
  {
    if (a6 && (uint64_t v12 = *a6, v12))
    {
      if (v8)
      {
        uint64_t v13 = 1869627199;
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)unsigned int buf = 136315394;
          *(void *)&uint8_t buf[4] = "LOASAudioFile.cpp";
          LOWORD(v50[0]) = 1024;
          *(_DWORD *)((char *)v50 + 2) = 157;
          uint64_t v14 = MEMORY[0x1E4F14500];
          uint64_t v15 = "%25s:%-5d  can't provide packet descriptions for an LATM/LOAS file, in which packets are not necessarily byte-aligned";
LABEL_18:
          _os_log_impl(&dword_18FEC0000, v14, OS_LOG_TYPE_ERROR, v15, buf, 0x12u);
        }
      }
      else
      {
        uint64_t v22 = (*(uint64_t (**)(LOASAudioFile *, uint64_t, void, uint64_t))(*(void *)this + 688))(this, v12 + a5, 0, 1);
        if (v22)
        {
          uint64_t v13 = v22;
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            return v13;
          }
          *(_DWORD *)unsigned int buf = 136315394;
          *(void *)&uint8_t buf[4] = "LOASAudioFile.cpp";
          LOWORD(v50[0]) = 1024;
          *(_DWORD *)((char *)v50 + 2) = 163;
          uint64_t v14 = MEMORY[0x1E4F14500];
          uint64_t v15 = "%25s:%-5d  ScanForPackets (LATM/LOAS) failed";
          goto LABEL_18;
        }
        uint64_t v23 = (uint64_t *)*((void *)this + 15);
        if (v23)
        {
          if (v23[3] >= a5) {
            uint64_t v13 = 1685348671;
          }
          else {
            uint64_t v13 = 1885563711;
          }
          if (v23[3] >= a5 && v23 != 0)
          {
            unsigned int v48 = 0;
            uint64_t v25 = v23[3];
            *a3 = 0;
            uint64_t v26 = *a6;
            if (v26 + a5 > v25)
            {
              LODWORD(v2std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v25 - a5;
              *a6 = v25 - a5;
            }
            if (v26)
            {
              unsigned int v39 = (std::vector<char> *)((char *)this + 192);
              unint64_t v27 = *((void *)this + 25) - *((void *)this + 24);
              if (v27 < (*(unsigned int (**)(LOASAudioFile *))(*(void *)this + 632))(this))
              {
                unsigned int v28 = (*(uint64_t (**)(LOASAudioFile *))(*(void *)this + 632))(this);
                std::vector<unsigned char>::resize(v39, v28);
              }
              if (*a6)
              {
                uint64_t v29 = 0;
                unsigned int v30 = 0;
                p_uint64_t mDataByteSize = &a4->mDataByteSize;
                int v43 = v23;
                while (1)
                {
                  int v40 = p_mDataByteSize;
                  uint64_t v41 = v29;
                  unsigned int v42 = v30;
                  UInt32 v46 = 0;
                  int v47 = 1;
                  uint64_t v32 = a5 + v29;
                  uint64_t v45 = 0;
                  CompressedPacketTable::operator[]((uint64_t)buf, v23, a5 + v29);
                  uint64_t v33 = *(void *)buf;
                  CompressedPacketTable::operator[]((uint64_t)buf, v43, v32);
                  unsigned int v48 = v50[0];
                  uint64_t v34 = (*(uint64_t (**)(LOASAudioFile *, uint64_t, uint64_t, unsigned int *, void))(*(void *)this + 72))(this, a2, v33, &v48, *((void *)this + 24));
                  uint64_t v13 = v34;
                  if (v34 != -39 && v34 != 0) {
                    break;
                  }
                  unsigned int v36 = v48;
                  CompressedPacketTable::operator[]((uint64_t)buf, v43, v32);
                  if (v36 < v50[0])
                  {
                    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)unsigned int buf = 136315394;
                      *(void *)&uint8_t buf[4] = "LOASAudioFile.cpp";
                      LOWORD(v50[0]) = 1024;
                      *(_DWORD *)((char *)v50 + 2) = 212;
                      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ReadBytes did not provide the entire AudioSyncStream element", buf, 0x12u);
                    }
                    return 4294967257;
                  }
                  uint64_t v44 = 0;
                  HIDWORD(v45) = v48;
                  if (MP4::LOASHeader::CopyByteAlignedAccessUnitsFromAudioSyncStream(&v47, (uint64_t)&v44, (uint64_t)v39->__begin_, (uint64_t)this + 144, &a7[v42], v10 - v42, &v46))
                  {
                    uint64_t v13 = 1718449215;
                    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                      return v13;
                    }
                    *(_DWORD *)unsigned int buf = 136315394;
                    *(void *)&uint8_t buf[4] = "LOASAudioFile.cpp";
                    LOWORD(v50[0]) = 1024;
                    *(_DWORD *)((char *)v50 + 2) = 234;
                    uint64_t v14 = MEMORY[0x1E4F14500];
                    uint64_t v15 = "%25s:%-5d  Failed to parse or copy byte-aligned packet from AudioSyncStream";
                    goto LABEL_18;
                  }
                  if (!v47)
                  {
                    LODWORD(v29) = v41;
                    unsigned int v30 = v42;
                    goto LABEL_59;
                  }
                  *(void *)(v40 - 3) = v42;
                  UInt32 v37 = v46;
                  *(v40 - 1) = 0;
                  UInt32 *v40 = v37;
                  uint64_t v29 = v41 + 1;
                  unsigned int v30 = v37 + v42;
                  p_uint64_t mDataByteSize = v40 + 4;
                  uint64_t v23 = v43;
                  if (v41 + 1 >= (unint64_t)*a6) {
                    goto LABEL_59;
                  }
                }
                if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)unsigned int buf = 136315394;
                  *(void *)&uint8_t buf[4] = "LOASAudioFile.cpp";
                  LOWORD(v50[0]) = 1024;
                  *(_DWORD *)((char *)v50 + 2) = 211;
                  uint64_t v14 = MEMORY[0x1E4F14500];
                  uint64_t v15 = "%25s:%-5d  ReadBytes failed";
                  goto LABEL_18;
                }
              }
              else
              {
                LODWORD(v29) = 0;
                unsigned int v30 = 0;
                uint64_t v13 = 0;
LABEL_59:
                *a3 = v30;
                *a6 = v29;
              }
            }
            else
            {
              *a3 = 0;
              return 4294967257;
            }
          }
        }
        else if (a5 <= 0)
        {
          return 1685348671;
        }
        else
        {
          return 1885563711;
        }
      }
    }
    else
    {
      uint64_t v13 = 2003334207;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)unsigned int buf = 136315394;
        *(void *)&uint8_t buf[4] = "LOASAudioFile.cpp";
        LOWORD(v50[0]) = 1024;
        *(_DWORD *)((char *)v50 + 2) = 155;
        uint64_t v14 = MEMORY[0x1E4F14500];
        uint64_t v15 = "%25s:%-5d  invalid ioNumPackets parameter";
        goto LABEL_18;
      }
    }
  }
  else
  {
    uint64_t v13 = 2003334207;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unsigned int buf = 136315394;
      *(void *)&uint8_t buf[4] = "LOASAudioFile.cpp";
      LOWORD(v50[0]) = 1024;
      *(_DWORD *)((char *)v50 + 2) = 154;
      uint64_t v14 = MEMORY[0x1E4F14500];
      uint64_t v15 = "%25s:%-5d  invalid ioNumBytes parameter";
      goto LABEL_18;
    }
  }
  return v13;
}

uint64_t LOASAudioFile::ReadPackets(LOASAudioFile *this, uint64_t a2, unsigned int *a3, AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, void *a7)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  unsigned int v22 = 0;
  if (a6)
  {
    uint64_t v8 = *a6;
    if (v8)
    {
      if (a7)
      {
        uint64_t v15 = (*(uint64_t (**)(LOASAudioFile *, uint64_t, void, uint64_t))(*(void *)this + 688))(this, v8 + a5, 0, 1);
        if (v15)
        {
          uint64_t v16 = v15;
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)unsigned int buf = 136315394;
            long long v24 = "LOASAudioFile.cpp";
            __int16 v25 = 1024;
            int v26 = 119;
            uint64_t v17 = MEMORY[0x1E4F14500];
            uint64_t v18 = "%25s:%-5d  ScanForPackets (LATM/LOAS) failed";
LABEL_9:
            _os_log_impl(&dword_18FEC0000, v17, OS_LOG_TYPE_ERROR, v18, buf, 0x12u);
            return v16;
          }
          return v16;
        }
        int v19 = (*(uint64_t (**)(LOASAudioFile *))(*(void *)this + 632))(this);
        if (!v19) {
          int v19 = (*(uint64_t (**)(LOASAudioFile *))(*(void *)this + 656))(this);
        }
        unsigned int v22 = *a6 * v19;
      }
      uint64_t v20 = (*(uint64_t (**)(LOASAudioFile *, uint64_t, unsigned int *, AudioStreamPacketDescription *, uint64_t, unsigned int *, void *))(*(void *)this + 96))(this, a2, &v22, a4, a5, a6, a7);
      uint64_t v16 = v20;
      if (a3 && !v20) {
        *a3 = v22;
      }
      return v16;
    }
  }
  uint64_t v16 = 2003334207;
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)unsigned int buf = 136315394;
    long long v24 = "LOASAudioFile.cpp";
    __int16 v25 = 1024;
    int v26 = 111;
    uint64_t v17 = MEMORY[0x1E4F14500];
    uint64_t v18 = "%25s:%-5d  invalid ioNumPackets parameter";
    goto LABEL_9;
  }
  return v16;
}

uint64_t LOASAudioFile::InitializeDataSource(LOASAudioFile *this, const AudioStreamBasicDescription *a2)
{
  AudioFormatID mFormatID = a2->mFormatID;
  if (IsSupportedLATMFormat(mFormatID)) {
    BOOL v3 = mFormatID - 778924081 >= 2;
  }
  else {
    BOOL v3 = 0;
  }
  if (!v3 || mFormatID == 1836069684) {
    return 1718449215;
  }
  else {
    return 0;
  }
}

uint64_t LOASAudioFile::OpenFromDataSource(LOASAudioFile *this)
{
  uint64_t v2 = 0;
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  do
  {
    unsigned int v15 = 10;
    uint64_t v3 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, unsigned __int8 *, unsigned int *))(**((void **)this + 13) + 48))(*((void *)this + 13), 0, v2, 10, v21, &v15);
    if (v3)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)unsigned int buf = 136315394;
        *(void *)uint64_t v27 = "LOASAudioFile.cpp";
        *(_WORD *)&v27[8] = 1024;
        *(_DWORD *)&v27[10] = 613;
        _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ReadBytes Failed", buf, 0x12u);
      }
      goto LABEL_33;
    }
    if (!v15)
    {
      uint64_t v3 = 2003334207;
      goto LABEL_33;
    }
    if (v15 < 0xA) {
      break;
    }
    unsigned int v4 = ID3Size(v15, v21, (int *)buf);
    v2 += v4;
  }
  while (v4);
  *((void *)this + 9) = v2;
  int v20 = 0;
  *(_DWORD *)unsigned int buf = 0;
  *(_WORD *)uint64_t v27 = 1;
  *(void *)&v27[4] = 0;
  *(_DWORD *)&v27[11] = 0;
  uint64_t v28 = 0;
  uint64_t v30 = 0;
  uint64_t v29 = 0;
  memset(&v19, 0, sizeof(v19));
  memset(&v18, 0, sizeof(v18));
  std::vector<unsigned char>::__append(&v18, 0x2000uLL);
  std::vector<char>::pointer begin = (unsigned __int8 *)v18.__begin_;
  uint64_t v6 = (*(uint64_t (**)(void, void, void, uint64_t, std::vector<char>::pointer, int *))(**((void **)this + 13) + 48))(*((void *)this + 13), 0, *((void *)this + 9), 0x2000, v18.__begin_, &v20);
  uint64_t v3 = v6;
  v16[0] = begin;
  v16[1] = &begin[v20];
  uint64_t v17 = 0;
  if ((begin & 3) != 0 && v20)
  {
    int v7 = 0;
    char v8 = (_BYTE)begin + 1;
    int v9 = -8;
    int v10 = begin + 1;
    do
    {
      HIDWORD(v17) = v9 + 16;
      v16[0] = v10;
      int v7 = *(v10 - 1) | (v7 << 8);
      LODWORD(v17) = v7;
      v9 += 8;
      if ((v8 & 3) == 0) {
        break;
      }
      ++v8;
    }
    while (v10++ < &begin[v20]);
    LODWORD(v17) = v7 << (24 - v9);
  }
  if (v6 != -39 && v6)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_30;
    }
    *(_DWORD *)unsigned int v22 = 136315394;
    uint64_t v23 = "LOASAudioFile.cpp";
    __int16 v24 = 1024;
    int v25 = 651;
    uint64_t v12 = MEMORY[0x1E4F14500];
    uint64_t v13 = "%25s:%-5d  ReadBytes Failed";
    goto LABEL_29;
  }
  if (!MP4::LOASHeader::Deserialize((unsigned int *)buf, (uint64_t)v16))
  {
    if (MP4::LATMHeader::StreamFormatInfo((uint64_t)v27, begin + 3, v20 - 3, (std::vector<char> *)this + 6, (std::vector<char> *)this + 7, &v19, (unsigned int *)this + 35))
    {
      uint64_t v3 = (*(uint64_t (**)(LOASAudioFile *, AudioStreamBasicDescription *))(*(void *)this + 176))(this, &v19);
      if (!v3)
      {
        if ((*(unsigned int (**)(LOASAudioFile *))(*(void *)this + 272))(this)) {
          operator new();
        }
        uint64_t v3 = 0;
        goto LABEL_30;
      }
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_30;
      }
      *(_DWORD *)unsigned int v22 = 136315394;
      uint64_t v23 = "LOASAudioFile.cpp";
      __int16 v24 = 1024;
      int v25 = 662;
      uint64_t v12 = MEMORY[0x1E4F14500];
      uint64_t v13 = "%25s:%-5d  SetDataFormat Failed";
    }
    else
    {
      uint64_t v3 = 1718449215;
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_30;
      }
      *(_DWORD *)unsigned int v22 = 136315394;
      uint64_t v23 = "LOASAudioFile.cpp";
      __int16 v24 = 1024;
      int v25 = 659;
      uint64_t v12 = MEMORY[0x1E4F14500];
      uint64_t v13 = "%25s:%-5d  MP4::LATMHeader::GetStreamFormatInfo Failed";
    }
LABEL_29:
    _os_log_impl(&dword_18FEC0000, v12, OS_LOG_TYPE_ERROR, v13, v22, 0x12u);
    goto LABEL_30;
  }
  uint64_t v3 = 1718449215;
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)unsigned int v22 = 136315394;
    uint64_t v23 = "LOASAudioFile.cpp";
    __int16 v24 = 1024;
    int v25 = 654;
    uint64_t v12 = MEMORY[0x1E4F14500];
    uint64_t v13 = "%25s:%-5d  LOASHeader::Deserialize failed";
    goto LABEL_29;
  }
LABEL_30:
  if (begin) {
    operator delete(begin);
  }
  if (v3)
  {
LABEL_33:
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unsigned int buf = 136315394;
      *(void *)uint64_t v27 = "LOASAudioFile.cpp";
      *(_WORD *)&v27[8] = 1024;
      *(_DWORD *)&v27[10] = 551;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  LOASAudioFile::ParseAudioFile failed", buf, 0x12u);
    }
  }
  return v3;
}

void sub_190157BE8(_Unwind_Exception *a1)
{
  MEMORY[0x192FC8940](v2, 0x1000C403E1C8BA9);
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t LOASAudioFile::Create(LOASAudioFile *this, CFURLRef url, const AudioStreamBasicDescription *a3)
{
  CFStringRef v6 = CFURLCopyPathExtension(url);
  CFStringRef v7 = v6;
  if (v6 && CFEqual(v6, @"xhe"))
  {
    if (a3->mFormatID != 1970495843)
    {
      uint64_t v8 = 1718449215;
LABEL_14:
      CFRelease(v7);
      return v8;
    }
LABEL_16:
    uint64_t v8 = AudioFileObject::Create(this, url, a3);
    if (!v7) {
      return v8;
    }
    goto LABEL_14;
  }
  AudioFormatID mFormatID = a3->mFormatID;
  if (IsSupportedLATMFormat(mFormatID)) {
    BOOL v10 = mFormatID - 778924081 >= 2;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10 && mFormatID != 1836069684) {
    goto LABEL_16;
  }
  uint64_t v8 = 1718449215;
  if (v7) {
    goto LABEL_14;
  }
  return v8;
}

void LOASAudioFile::~LOASAudioFile(LOASAudioFile *this)
{
  LOASAudioFile::~LOASAudioFile(this);
  JUMPOUT(0x192FC8940);
}

{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t vars8;

  *(void *)this = &unk_1EDF8E230;
  uint64_t v2 = *((void *)this + 38);
  if (v2) {
    MEMORY[0x192FC8940](v2, 0x1000C403E1C8BA9);
  }
  uint64_t v3 = (void *)*((void *)this + 35);
  if (v3)
  {
    *((void *)this + 3std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = v3;
    operator delete(v3);
  }
  unsigned int v4 = (void *)*((void *)this + 31);
  if (v4)
  {
    *((void *)this + 32) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 28);
  if (v5)
  {
    *((void *)this + 29) = v5;
    operator delete(v5);
  }
  CFStringRef v6 = (void *)*((void *)this + 24);
  if (v6)
  {
    *((void *)this + 25) = v6;
    operator delete(v6);
  }
  CFStringRef v7 = (void *)*((void *)this + 21);
  if (v7)
  {
    *((void *)this + 22) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 18);
  if (v8)
  {
    *((void *)this + 19) = v8;
    operator delete(v8);
  }
  AudioFileObject::~AudioFileObject(this);
}

void LOASAudioFormat::NewStream(LOASAudioFormat *this)
{
}

void LOASAudioFormat::New(LOASAudioFormat *this)
{
}

uint64_t LOASAudioFormat::GetHFSCodes(LOASAudioFormat *this, unsigned int *a2, void *a3)
{
  *a2 = 0;
  return 0;
}

uint64_t LOASAudioFormat::GetAvailableStreamDescriptions(LOASAudioFormat *this, int a2, unsigned int *a3, void *a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  UInt32 outPropertyDataSize = 0;
  uint64_t PropertyInfo = AudioFormatGetPropertyInfo(0x61636966u, 0, 0, &outPropertyDataSize);
  if (PropertyInfo) {
    return PropertyInfo;
  }
  UInt32 v8 = outPropertyDataSize;
  unint64_t v9 = (unint64_t)outPropertyDataSize >> 2;
  CADeprecated::CAAutoFree<unsigned int>::CAAutoFree(&v17, v9, 1);
  uint64_t PropertyInfo = GetAllFormatIDs(&outPropertyDataSize, v17);
  BOOL v10 = v17;
  if (!PropertyInfo)
  {
    if (v8 < 4)
    {
      if (v17) {
        free(v17);
      }
    }
    else
    {
      uint64_t v11 = 0;
      if (v9 <= 1) {
        uint64_t v12 = 1;
      }
      else {
        uint64_t v12 = v9;
      }
      BOOL v13 = 1;
      do
      {
        if (v10[v11] == a2 && (IsSupportedLATMFormat(a2) & 1) != 0) {
          break;
        }
        BOOL v13 = ++v11 < v9;
      }
      while (v12 != v11);
      free(v10);
      uint64_t v17 = 0;
      if (v13)
      {
        uint64_t v20 = 0;
        memset(outPropertyData, 0, sizeof(outPropertyData));
        DWORD2(outPropertyData[0]) = a2;
        UInt32 ioPropertyDataSize = 40;
        AudioFormatGetProperty(0x666D7469u, 0, 0, &ioPropertyDataSize, outPropertyData);
        if (*a3 >= 0x28) {
          size_t v14 = 40;
        }
        else {
          size_t v14 = 0;
        }
        *a3 = v14;
        if (a4) {
          memcpy(a4, outPropertyData, v14);
        }
        uint64_t PropertyInfo = 0;
        BOOL v10 = v17;
        if (v17) {
          goto LABEL_4;
        }
        return PropertyInfo;
      }
    }
    *a3 = 0;
    return 1718449215;
  }
  if (v17) {
LABEL_4:
  }
    free(v10);
  return PropertyInfo;
}

void sub_190158228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  if (a11) {
    free(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t LOASAudioFormat::GetAvailableFormatIDs(LOASAudioFormat *this, unsigned int *a2, _DWORD *a3)
{
  if (a3) {
    unsigned int v5 = *a2 >> 2;
  }
  else {
    unsigned int v5 = 0;
  }
  UInt32 outPropertyDataSize = 0;
  uint64_t PropertyInfo = AudioFormatGetPropertyInfo(0x61636966u, 0, 0, &outPropertyDataSize);
  if (PropertyInfo) {
    return PropertyInfo;
  }
  UInt32 v8 = outPropertyDataSize;
  unint64_t v9 = (unint64_t)outPropertyDataSize >> 2;
  CADeprecated::CAAutoFree<unsigned int>::CAAutoFree(&outPropertyData, v9, 1);
  uint64_t PropertyInfo = GetAllFormatIDs(&outPropertyDataSize, outPropertyData);
  BOOL v10 = outPropertyData;
  if (!PropertyInfo)
  {
    if (v8 >= 4)
    {
      unsigned int v11 = 0;
      if (v9 <= 1) {
        unint64_t v9 = 1;
      }
      else {
        unint64_t v9 = v9;
      }
      BOOL v13 = (int *)outPropertyData;
      do
      {
        int v15 = *v13++;
        int v14 = v15;
        if (IsSupportedLATMFormat(v15))
        {
          if (a3 && v11 < v5) {
            a3[v11] = v14;
          }
          ++v11;
        }
        --v9;
      }
      while (v9);
    }
    else
    {
      unsigned int v11 = 0;
      unsigned int v12 = 0;
      if (!outPropertyData) {
        goto LABEL_23;
      }
    }
    free(v10);
    unsigned int v12 = v11;
LABEL_23:
    uint64_t PropertyInfo = 0;
    *a2 = 4 * v12;
    return PropertyInfo;
  }
  if (outPropertyData) {
    free(outPropertyData);
  }
  return PropertyInfo;
}

void sub_19015837C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  if (a9) {
    free(a9);
  }
  _Unwind_Resume(exception_object);
}

void LOASAudioFormat::GetFileTypeName(LOASAudioFormat *this, const __CFString **a2)
{
  CABundleLocker::CABundleLocker((CABundleLocker *)&v5);
  uint64_t v3 = (__CFBundle *)sAudioToolboxBundle;
  if (sAudioToolboxBundle == -1)
  {
    pthread_once(&sOnce, InitGetAudioToolboxBundle);
    uint64_t v3 = (__CFBundle *)sAudioToolboxBundle;
    if (sAudioToolboxBundle) {
      goto LABEL_3;
    }
LABEL_5:
    CFStringRef v4 = (const __CFString *)CFRetain(@"LATM/LOAS");
    goto LABEL_6;
  }
  if (!sAudioToolboxBundle) {
    goto LABEL_5;
  }
LABEL_3:
  CFStringRef v4 = CFBundleCopyLocalizedString(v3, @"LATM LOAS", @"LATM LOAS", @"FileTypeNames");
LABEL_6:
  *a2 = v4;
  CABundleLocker::~CABundleLocker((CABundleLocker *)&v5);
}

void sub_190158430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

const __CFArray *LOASAudioFormat::GetMIMETypes(LOASAudioFormat *this, const __CFArray **a2)
{
  v4[3] = *(const void **)MEMORY[0x1E4F143B8];
  v4[0] = @"audio/usac";
  v4[1] = @"audio/aac";
  v4[2] = @"audio/x-aac";
  CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v4, 3, MEMORY[0x1E4F1D510]);
  *a2 = result;
  return result;
}

const __CFArray *LOASAudioFormat::GetUTIs(LOASAudioFormat *this, const __CFArray **a2)
{
  v4[1] = *(const void **)MEMORY[0x1E4F143B8];
  v4[0] = @"public.mp4a-loas";
  CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v4, 1, MEMORY[0x1E4F1D510]);
  *a2 = result;
  return result;
}

const __CFArray *LOASAudioFormat::GetExtensions(LOASAudioFormat *this, const __CFArray **a2)
{
  v4[3] = *(const void **)MEMORY[0x1E4F143B8];
  v4[0] = @"loas";
  v4[1] = @"latm";
  v4[2] = @"xhe";
  CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v4, 3, MEMORY[0x1E4F1D510]);
  *a2 = result;
  return result;
}

uint64_t LOASAudioFormat::FileDataIsThisFormat(LOASAudioFormat *this, int a2, unsigned __int8 *a3)
{
  unsigned int v12 = 0;
  __int16 v13 = 1;
  *(void *)int v14 = 0;
  *(_DWORD *)((char *)&v14[1] + 3) = 0;
  memset(&v14[3], 0, 24);
  uint64_t v3 = (char *)&a3[a2];
  v10[0] = a3;
  v10[1] = v3;
  uint64_t v11 = 0;
  if ((a3 & 3) != 0 && a2)
  {
    int v4 = 0;
    char v5 = (_BYTE)a3 + 1;
    int v6 = -8;
    do
    {
      int v7 = v6;
      int v8 = *a3++;
      int v4 = v8 | (v4 << 8);
      v6 += 8;
      if ((v5 & 3) == 0) {
        break;
      }
      ++v5;
    }
    while (a3 < (unsigned __int8 *)v3);
    v10[0] = a3;
    LODWORD(v11) = v4 << (24 - v6);
    HIDWORD(v11) = v7 + 16;
  }
  if (MP4::LOASHeader::Deserialize(&v12, (uint64_t)v10)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 1;
  }
}

BOOL LOASAudioFormat::ExtensionIsThisFormat(LOASAudioFormat *this, CFStringRef theString1)
{
  uint64_t v3 = 1;
  if (CFStringCompare(theString1, @"latm", 1uLL)) {
    return CFStringCompare(theString1, @"loas", 1uLL) == kCFCompareEqualTo;
  }
  return v3;
}

void LOASAudioFormat::~LOASAudioFormat(LOASAudioFormat *this)
{
}

uint64_t caulk::inplace_function_detail::vtable<int,void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int>::vtable<APMIDIRouter::APMIDIRouter(void)::$_1>(caulk::inplace_function_detail::wrapper<APMIDIRouter::APMIDIRouter(void)::$_1>)::{lambda(void *,void *&&,AudioUnitPluginDispatch const&,unsigned char const*&&,unsigned int &&)#1}::__invoke(uint64_t a1, void *a2, uint64_t a3, void *a4, unsigned int *a5)
{
  char v5 = *(uint64_t (**)(void, void, void))(a3 + 168);
  if (v5) {
    return v5(*a2, *a4, *a5);
  }
  else {
    return 4294967292;
  }
}

uint64_t caulk::inplace_function_detail::vtable<int,void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,unsigned int>::vtable<APMIDIRouter::APMIDIRouter(void)::$_0>(caulk::inplace_function_detail::wrapper<APMIDIRouter::APMIDIRouter(void)::$_0>)::{lambda(void *,void *&&,AudioUnitPluginDispatch const&,unsigned int &&,void *&&,void *&&,void *&&)#1}::__invoke(uint64_t a1, void *a2, uint64_t a3, unsigned int *a4, unsigned int *a5, unsigned int *a6, unsigned int *a7)
{
  int v7 = *(uint64_t (**)(void, void, void, void, void))(a3 + 160);
  if (v7) {
    return v7(*a2, *a4, *a5, *a6, *a7);
  }
  else {
    return 4294967292;
  }
}

uint64_t *caulk::inplace_function<int ()(void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int),32ul,8ul,caulk::inplace_function_detail::vtable>::operator=(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    (*(void (**)(uint64_t *))(*a1 + 24))(a1 + 1);
    uint64_t v4 = *a2;
    *a2 = (uint64_t)&caulk::inplace_function_detail::vtable<int,void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int>::empty;
    *a1 = v4;
    (*(void (**)(uint64_t *, uint64_t *))(v4 + 16))(a1 + 1, a2 + 1);
  }
  return a1;
}

uint64_t *caulk::inplace_function<int ()(void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,unsigned int),32ul,8ul,caulk::inplace_function_detail::vtable>::operator=(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    (*(void (**)(uint64_t *))(*a1 + 24))(a1 + 1);
    uint64_t v4 = *a2;
    *a2 = (uint64_t)&caulk::inplace_function_detail::vtable<int,void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,unsigned int>::empty;
    *a1 = v4;
    (*(void (**)(uint64_t *, uint64_t *))(v4 + 16))(a1 + 1, a2 + 1);
  }
  return a1;
}

uint64_t caulk::inplace_function_detail::vtable<int,void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int>::vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_8>(caulk::inplace_function_detail::wrapper<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_8>)::{lambda(void *,void *&&,AudioUnitPluginDispatch const&,unsigned char const*&&,unsigned int &&)#1}::__invoke()
{
  return 4294967292;
}

uint64_t caulk::inplace_function_detail::vtable<int,void *,AudioUnitPluginDispatch const&,unsigned int,unsigned int,unsigned int,unsigned int>::vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_7>(caulk::inplace_function_detail::wrapper<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_7>)::{lambda(void *,void *&&,AudioUnitPluginDispatch const&,unsigned int &&,void *&&,void *&&,void *&&)#1}::__invoke()
{
  return 4294967292;
}

void caulk::inplace_function_detail::vtable<int,void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int>::vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_6>(caulk::inplace_function_detail::wrapper<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_6>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 8);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 caulk::inplace_function_detail::vtable<int,void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int>::vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_6>(caulk::inplace_function_detail::wrapper<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_6>)::{lambda(void *,void *)#2}::__invoke(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  return result;
}

void *caulk::inplace_function_detail::vtable<int,void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int>::vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_6>(caulk::inplace_function_detail::wrapper<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_6>)::{lambda(void *,void *)#1}::__invoke(void *result, void *a2)
{
  uint64_t v2 = a2[1];
  *__n128 result = *a2;
  result[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t caulk::inplace_function_detail::vtable<int,void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int>::vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_6>(caulk::inplace_function_detail::wrapper<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_6>)::{lambda(void *,void *&&,AudioUnitPluginDispatch const&,unsigned char const*&&,unsigned int &&)#1}::__invoke(int **a1, uint64_t *a2, uint64_t a3, uint64_t *a4, unsigned int *a5)
{
  v13[6] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a2;
  uint64_t v6 = *a4;
  uint64_t v7 = *a5;
  unsigned int v11 = 0;
  uint64_t v10 = *(void *)(a3 + 192);
  int v8 = *a1;
  unsigned int v12 = caulk::inplace_function<void ()(MIDI::EventList const*),48ul,8ul,caulk::inplace_function_detail::vtable>::k_wrapper_vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_6::operator() const(void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int)::{lambda(MIDI::EventList const*)#1}>;
  v13[0] = v5;
  v13[1] = &v10;
  v13[2] = &v11;
  MIDI::LegacyMIDIConverter<MIDI::MIDI_1_to_2_Translator>::convertLegacyDataToEventList(v8, v6, v7, 0, (uint64_t *)&v12);
  ((void (*)(void *))v12[3])(v13);
  return v11;
}

void sub_190158984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

__n128 caulk::inplace_function_detail::vtable<void,MIDI::EventList const*>::vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_6::operator() const(void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int)::{lambda(MIDI::EventList const*)#1}>(caulk::inplace_function_detail::wrapper<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_6::operator() const(void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int)::{lambda(MIDI::EventList const*)#1}>)::{lambda(void *,void *)#2}::__invoke(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

__n128 caulk::inplace_function_detail::vtable<void,MIDI::EventList const*>::vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_6::operator() const(void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int)::{lambda(MIDI::EventList const*)#1}>(caulk::inplace_function_detail::wrapper<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_6::operator() const(void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int)::{lambda(MIDI::EventList const*)#1}>)::{lambda(void *,void *)#1}::__invoke(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t caulk::inplace_function_detail::vtable<void,MIDI::EventList const*>::vtable<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_6::operator() const(void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int)::{lambda(MIDI::EventList const*)#1}>(caulk::inplace_function_detail::wrapper<APMIDIRouter::init(MIDIProtocolID,AudioUnitPluginDispatch const*)::$_6::operator() const(void *,AudioUnitPluginDispatch const&,unsigned char const*,unsigned int)::{lambda(MIDI::EventList const*)#1}>)::{lambda(void *,MIDI::EventList const*&&)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t result = (**(uint64_t (***)(void, void, void))(a1 + 8))(*(void *)a1, 0, *a2);
  **(_DWORD **)(a1 + 1std::__function::__value_func<std::unique_ptr<DSPGraph::Analyzer> ()(void)>::~__value_func[abi:ne180100]((void *)this + 6) = result;
  return result;
}