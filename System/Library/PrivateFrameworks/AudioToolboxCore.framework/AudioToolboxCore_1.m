void sub_18FF390C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  uint64_t v62;
  void *v64;

  if (*(char *)(v62 - 137) < 0) {
    operator delete(*(void **)(v62 - 160));
  }
  if (a62 < 0) {
    operator delete(__p);
  }
  v64 = *(void **)(v62 - 184);
  if (v64) {
    operator delete(v64);
  }
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::parse_content_id(unsigned __int8 *a1, const std::string *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  v4 = a1 + 23;
  v5 = (uint64_t *)(a1 + 8);
  if ((a1[23] & 0x80u) == 0) {
    std::string::size_type v6 = a1[23];
  }
  else {
    std::string::size_type v6 = *((void *)a1 + 1);
  }
  __int16 v25 = 0;
  v7 = std::string::basic_string((std::string *)v27, a2, 0, v6, (std::allocator<char> *)&v24);
  uint64_t v8 = v27[23];
  if (v27[23] >= 0) {
    uint64_t v9 = v27[23];
  }
  else {
    uint64_t v9 = *(void *)&v27[8];
  }
  uint64_t v10 = *v4;
  int v11 = (char)v10;
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *v5;
  }
  if (v9 != v10) {
    goto LABEL_19;
  }
  if (v11 >= 0) {
    v12 = a1;
  }
  else {
    v12 = *(unsigned __int8 **)a1;
  }
  if ((v27[23] & 0x80000000) != 0)
  {
    v15 = *(void **)v27;
    if (memcmp(*(const void **)v27, v12, *(size_t *)&v27[8]))
    {
      operator delete(v15);
      goto LABEL_31;
    }
  }
  else if (v27[23])
  {
    v13 = v27;
    while (*v13 == *v12)
    {
      ++v13;
      ++v12;
      if (!--v8) {
        goto LABEL_24;
      }
    }
LABEL_19:
    BOOL v14 = 1;
    if ((v27[23] & 0x80) == 0) {
      goto LABEL_20;
    }
    goto LABEL_30;
  }
LABEL_24:
  std::string::basic_string(&v24, a2, v6, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v26);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v16 = &v24;
  }
  else {
    v16 = (std::string *)v24.__r_.__value_.__r.__words[0];
  }
  v7 = (std::string *)sscanf((const char *)v16, "%04hx", &v25);
  BOOL v14 = v7 != 1;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if ((v27[23] & 0x80) == 0)
  {
LABEL_20:
    if (!v14) {
      goto LABEL_40;
    }
    goto LABEL_31;
  }
LABEL_30:
  operator delete(*(void **)v27);
  if (!v14)
  {
LABEL_40:
    int v21 = v25 & 0xFF00;
    int v20 = v25;
    int v22 = 0x10000;
    return v21 | v20 | v22;
  }
LABEL_31:
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v18 = a2;
    }
    else {
      v18 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    }
    if ((a1[23] & 0x80u) == 0) {
      v19 = a1;
    }
    else {
      v19 = *(unsigned __int8 **)a1;
    }
    *(_DWORD *)v27 = 136315906;
    *(void *)&v27[4] = "AudioMetadataSerializer.cpp";
    *(_WORD *)&v27[12] = 1024;
    *(_DWORD *)&v27[14] = 2119;
    *(_WORD *)&v27[18] = 2080;
    *(void *)&v27[20] = v18;
    __int16 v28 = 2080;
    v29 = v19;
    _os_log_impl(&dword_18FEC0000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d Content ID '%s' does not match expected pattern '%snnnn'", v27, 0x26u);
  }
  int v20 = 0;
  int v21 = 0;
  int v22 = 0;
  return v21 | v20 | v22;
}

void sub_18FF397C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::determine_element_status(int a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, char a7, double a8, double a9, double a10)
{
  if (!a1) {
    return 0;
  }
  if (a3 && a8 + a9 <= *(double *)&a2) {
    return 3;
  }
  if (a5 && *(double *)&a4 < a8)
  {
    double v11 = a8 - a10;
    if (v11 <= *(double *)&a4)
    {
      if (!a7)
      {
LABEL_23:
        if (a1 == 2) {
          return 2;
        }
        else {
          return 3;
        }
      }
    }
    else
    {
      unsigned __int8 v10 = 3;
      if (!a7 || v11 >= *(double *)&a6) {
        return v10;
      }
    }
    if (*(double *)&a6 >= a8) {
      return (4 * (a1 == 2));
    }
    goto LABEL_23;
  }
  double v12 = 0.0;
  if (a3) {
    double v12 = *(double *)&a2;
  }
  if (v12 < a8 && a1 == 2) {
    return 4;
  }
  else {
    return 0;
  }
}

char *std::map<unsigned short,anonymous namespace'::ElementRef<AudioMetadataContent>>::operator[](uint64_t **a1, unsigned __int16 a2)
{
  v5 = a1 + 1;
  v4 = (unsigned __int16 *)a1[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        std::string::size_type v6 = v4;
        unsigned int v7 = v4[16];
        if (v7 <= a2) {
          break;
        }
        v4 = (unsigned __int16 *)*v6;
        v5 = (uint64_t **)v6;
        if (!*v6) {
          goto LABEL_9;
        }
      }
      if (v7 >= a2) {
        break;
      }
      v4 = (unsigned __int16 *)v6[1];
      if (!v4)
      {
        v5 = (uint64_t **)(v6 + 1);
        goto LABEL_9;
      }
    }
  }
  else
  {
    std::string::size_type v6 = a1 + 1;
LABEL_9:
    uint64_t v8 = v6;
    std::string::size_type v6 = operator new(0x40uLL);
    *((_WORD *)v6 + 16) = a2;
    v6[6] = 0;
    v6[7] = 0;
    v6[5] = 0;
    *std::string::size_type v6 = 0;
    v6[1] = 0;
    v6[2] = v8;
    uint64_t *v5 = v6;
    uint64_t v9 = (uint64_t *)**a1;
    unsigned __int8 v10 = v6;
    if (v9)
    {
      *a1 = v9;
      unsigned __int8 v10 = *v5;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (char *)(v6 + 5);
}

uint64_t **std::map<unsigned short,anonymous namespace'::ElementRef<AudioMetadataObject>>::operator[](uint64_t **a1, unsigned __int16 a2)
{
  v5 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        std::string::size_type v6 = (uint64_t **)v4;
        unsigned int v7 = *((unsigned __int16 *)v4 + 16);
        if (v7 <= a2) {
          break;
        }
        v4 = *v6;
        v5 = v6;
        if (!*v6) {
          goto LABEL_9;
        }
      }
      if (v7 >= a2) {
        break;
      }
      v4 = v6[1];
      if (!v4)
      {
        v5 = v6 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    std::string::size_type v6 = a1 + 1;
LABEL_9:
    uint64_t v8 = operator new(0x40uLL);
    v8[16] = a2;
    *((void *)v8 + 6) = 0;
    *((void *)v8 + 7) = 0;
    *((void *)v8 + 5) = 0;
    std::string::size_type v6 = (uint64_t **)v8;
  }
  return v6 + 5;
}

uint64_t anonymous namespace'::gather_elements_from_object(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5, double a6, double a7, double a8)
{
  if (*(unsigned char *)(a2 + 24)) {
    double v14 = *(double *)(a2 + 28);
  }
  else {
    double v14 = 0.0;
  }
  if (*(unsigned char *)(a3 + 16)) {
    double v15 = *(double *)(a3 + 20);
  }
  else {
    double v15 = 0.0;
  }
  *(double *)v194 = v14 + v15;
  v194[1] = (uint64_t *)1;
  unint64_t v16 = *(unsigned int *)(a3 + 136);
  if (v16)
  {
    uint64_t v17 = 0;
    v191 = (uint64_t **)(a1 + 120);
    v18 = (void *)(a1 + 128);
    v189 = (void *)(a1 + 104);
    v183 = (void *)(a1 + 80);
    v182 = (uint64_t **)(a1 + 72);
    v188 = (void *)(a1 + 176);
    v185 = (uint64_t **)(a1 + 168);
    v186 = (uint64_t **)(a1 + 96);
    uint64_t v181 = a1 + 200;
    v187 = (void *)(a1 + 152);
    v184 = (uint64_t **)(a1 + 144);
    while (1)
    {
      uint64_t v19 = *(void *)(a3 + 140);
      if (**(void **)(v19 + 8 * v17)) {
        break;
      }
LABEL_245:
      if (++v17 >= v16) {
        goto LABEL_246;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v198, "ATU_");
    std::string::basic_string[abi:ne180100]<0>(&v197, **(char ***)(v19 + 8 * v17));
    if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v197.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v198.__r_.__value_.__l.__data_);
    }
    if (!HIDWORD(v20)) {
      goto LABEL_244;
    }
    uint64_t v21 = *v18;
    if (*v18)
    {
      int v22 = v18;
      do
      {
        unsigned int v23 = *(_DWORD *)(v21 + 32);
        BOOL v24 = v23 >= v20;
        if (v23 >= v20) {
          __int16 v25 = (uint64_t *)v21;
        }
        else {
          __int16 v25 = (uint64_t *)(v21 + 8);
        }
        if (v24) {
          int v22 = (void *)v21;
        }
        uint64_t v21 = *v25;
      }
      while (*v25);
      if (v22 != v18 && *((_DWORD *)v22 + 8) <= v20)
      {
LABEL_244:
        unint64_t v16 = *(unsigned int *)(a3 + 136);
        goto LABEL_245;
      }
    }
    char v26 = *(uint64_t **)(v19 + 8 * v17);
    double v8 = *(double *)v194;
    *(unsigned char *)v27 = a4;
    v27[1] = v26;
    *((double *)v27 + 2) = v8;
    uint64_t v28 = *(void *)(v19 + 8 * v17);
    v29 = *(void **)(v28 + 12);
    if (!v29 || !*v29) {
      goto LABEL_182;
    }
    std::string::basic_string[abi:ne180100]<0>(&v198, "AT_");
    std::string::basic_string[abi:ne180100]<0>(&v197, **(char ***)(v28 + 12));
    char v32 = v31;
    unint64_t v195 = v30;
    int v196 = v31;
    if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v197.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v198.__r_.__value_.__l.__data_);
    }
    if (!v32) {
      goto LABEL_182;
    }
    std::string::basic_string[abi:ne180100]<0>(&v198, **(char ***)(v28 + 12));
    if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
    {
      v34 = v189;
      if (v198.__r_.__value_.__l.__size_ < 8) {
        goto LABEL_41;
      }
      v33 = (std::string::value_type *)(v198.__r_.__value_.__r.__words[0] + 7);
    }
    else
    {
      v33 = &v198.__r_.__value_.__s.__data_[7];
      v34 = v189;
      if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 8) {
        goto LABEL_41;
      }
    }
    if (*v33 == 48)
    {
      BOOL v35 = 0;
      if ((SHIBYTE(v198.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_74;
      }
      goto LABEL_76;
    }
LABEL_41:
    uint64_t v36 = *v34;
    if (!*v34) {
      goto LABEL_72;
    }
    v37 = v34;
    do
    {
      unsigned int v38 = *(_DWORD *)(v36 + 32);
      BOOL v39 = v38 == v30;
      if (v38 >= v30) {
        char v40 = 1;
      }
      else {
        char v40 = -1;
      }
      if (v39)
      {
        unsigned int v41 = *(unsigned __int8 *)(v36 + 36);
        BOOL v42 = v41 == BYTE4(v30);
        char v40 = v41 >= BYTE4(v30) ? 1 : -1;
        if (v42) {
          char v40 = 0;
        }
      }
      BOOL v43 = (v40 & 0x80) == 0;
      if (v40 < 0) {
        v44 = (uint64_t *)(v36 + 8);
      }
      else {
        v44 = (uint64_t *)v36;
      }
      if (v43) {
        v37 = (void *)v36;
      }
      uint64_t v36 = *v44;
    }
    while (*v44);
    v34 = v189;
    if (v37 == v189) {
      goto LABEL_72;
    }
    unsigned int v45 = *((_DWORD *)v37 + 8);
    BOOL v46 = v45 == v30;
    if (v45 <= v30) {
      char v47 = 1;
    }
    else {
      char v47 = -1;
    }
    if (v46)
    {
      unsigned int v48 = *((unsigned __int8 *)v37 + 36);
      if (v48 <= BYTE4(v30)) {
        char v49 = 1;
      }
      else {
        char v49 = -1;
      }
      if (v48 == BYTE4(v30)) {
        char v47 = 0;
      }
      else {
        char v47 = v49;
      }
    }
    v34 = v189;
    if (v47 < 0) {
LABEL_72:
    }
      v37 = v34;
    BOOL v35 = v37 == v34;
    if ((SHIBYTE(v198.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_74:
      if (!v35) {
        goto LABEL_182;
      }
LABEL_77:
      v50 = *(uint64_t **)(v28 + 12);
      double v8 = *(double *)v194;
      *(unsigned char *)v51 = a4;
      v51[1] = v50;
      *((double *)v51 + 2) = v8;
      uint64_t v52 = *(void *)(*(void *)(v28 + 12) + 32);
      if (!v52 || !*(void *)v52) {
        goto LABEL_182;
      }
      std::string::basic_string[abi:ne180100]<0>(&v198, "AS_");
      std::string::basic_string[abi:ne180100]<0>(&v197, *(char **)v52);
      if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v197.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v198.__r_.__value_.__l.__data_);
      }
      if (!HIDWORD(v53)) {
        goto LABEL_182;
      }
      std::string::basic_string[abi:ne180100]<0>(&v198, *(char **)v52);
      if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
      {
        v55 = v183;
        if (v198.__r_.__value_.__l.__size_ < 8) {
          goto LABEL_91;
        }
        v54 = (std::string::value_type *)(v198.__r_.__value_.__r.__words[0] + 7);
      }
      else
      {
        v54 = &v198.__r_.__value_.__s.__data_[7];
        v55 = v183;
        if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 8) {
          goto LABEL_91;
        }
      }
      if (*v54 == 48)
      {
        BOOL v56 = 0;
        goto LABEL_104;
      }
LABEL_91:
      uint64_t v57 = *v55;
      if (!*v55) {
        goto LABEL_102;
      }
      v58 = v55;
      do
      {
        unsigned int v59 = *(_DWORD *)(v57 + 32);
        BOOL v60 = v59 >= v53;
        if (v59 >= v53) {
          v61 = (uint64_t *)v57;
        }
        else {
          v61 = (uint64_t *)(v57 + 8);
        }
        if (v60) {
          v58 = (void *)v57;
        }
        uint64_t v57 = *v61;
      }
      while (*v61);
      v55 = v183;
      if (v58 == v183 || *((_DWORD *)v58 + 8) > v53) {
LABEL_102:
      }
        v58 = v55;
      BOOL v56 = v58 == v55;
LABEL_104:
      if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v198.__r_.__value_.__l.__data_);
        if (!v56) {
          goto LABEL_182;
        }
      }
      else if (!v56)
      {
        goto LABEL_182;
      }
      double v8 = *(double *)v194;
      *(unsigned char *)v62 = a4;
      v62[1] = (uint64_t *)v52;
      *((double *)v62 + 2) = v8;
      v63 = *(void **)(v52 + 32);
      if (v63 && *v63)
      {
        std::string::basic_string[abi:ne180100]<0>(&v198, "AC_");
        std::string::basic_string[abi:ne180100]<0>(&v197, **(char ***)(v52 + 32));
        if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v197.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v198.__r_.__value_.__l.__data_);
        }
        if (HIDWORD(v180))
        {
          std::string::basic_string[abi:ne180100]<0>(&v198, **(char ***)(v52 + 32));
          if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
          {
            v65 = v188;
            if (v198.__r_.__value_.__l.__size_ < 8) {
              goto LABEL_122;
            }
            v64 = (std::string::value_type *)(v198.__r_.__value_.__r.__words[0] + 7);
          }
          else
          {
            v65 = v188;
            v64 = &v198.__r_.__value_.__s.__data_[7];
            if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 8) {
              goto LABEL_122;
            }
          }
          if (*v64 == 48)
          {
            BOOL v66 = 0;
            goto LABEL_135;
          }
LABEL_122:
          uint64_t v67 = *v65;
          if (!*v65) {
            goto LABEL_133;
          }
          v68 = v65;
          do
          {
            unsigned int v69 = *(_DWORD *)(v67 + 32);
            BOOL v70 = v69 >= v180;
            if (v69 >= v180) {
              v71 = (uint64_t *)v67;
            }
            else {
              v71 = (uint64_t *)(v67 + 8);
            }
            if (v70) {
              v68 = (void *)v67;
            }
            uint64_t v67 = *v71;
          }
          while (*v71);
          v65 = v188;
          if (v68 == v188 || *((_DWORD *)v68 + 8) > v180) {
LABEL_133:
          }
            v68 = v65;
          BOOL v66 = v68 == v65;
LABEL_135:
          if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v198.__r_.__value_.__l.__data_);
          }
          if (v66)
          {
            v72 = *(uint64_t **)(v52 + 32);
            double v8 = *(double *)v194;
            *(unsigned char *)v73 = a4;
            v73[1] = v72;
            *((double *)v73 + 2) = v8;
            if (a4 == 4)
            {
              uint64_t v74 = *(void *)(v52 + 32);
              int v75 = v180;
              if (*(_DWORD *)(v74 + 24))
              {
                unint64_t v76 = 0;
                uint64_t v171 = v74;
                do
                {
                  uint64_t v178 = *(void *)(*(void *)(v74 + 28) + 8 * v76);
                  if (*(void *)v178)
                  {
                    std::string::basic_string[abi:ne180100]<0>(&v197, *(char **)v178);
                    if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v197.__r_.__value_.__l.__data_);
                    }
                    if (HIDWORD(v179))
                    {
                      double v77 = 0.0;
                      double v78 = 0.0;
                      if (*(unsigned char *)(v178 + 8)) {
                        double v78 = *(double *)(v178 + 12);
                      }
                      if (*(unsigned char *)(v178 + 20)) {
                        double v77 = *(double *)(v178 + 24);
                      }
                      unint64_t v177 = v176 & 0xFFFFFFFFFFFFFF00;
                      if (v76 + 1 >= *(unsigned int *)(v74 + 24))
                      {
                        uint64_t v83 = v177;
                        unint64_t v82 = v175 & 0xFFFFFFFFFFFFFF00;
                      }
                      else
                      {
                        uint64_t v79 = *(void *)(*(void *)(v74 + 28) + 8 * (v76 + 1));
                        double v80 = 0.0;
                        double v81 = 0.0;
                        if (*(unsigned char *)(v79 + 8)) {
                          double v81 = *(double *)(v79 + 12);
                        }
                        if (*(unsigned char *)(v79 + 20)) {
                          double v80 = *(double *)(v79 + 24);
                        }
                        *(double *)&unint64_t v82 = *(double *)v194 + v81 + v80;
                        uint64_t v83 = v177 | 1;
                      }
                      unint64_t v175 = v82;
                      uint64_t v176 = v83;
                      if (v84 <= 2)
                      {
                        unint64_t v174 = v76;
                        char v172 = v199;
                        char v173 = v84;
                        uint64_t v85 = v181;
LABEL_158:
                        v86 = *(uint64_t **)v85;
                        v87 = (uint64_t **)v85;
                        if (*(void *)v85)
                        {
                          while (1)
                          {
                            uint64_t v85 = (uint64_t)v86;
                            unsigned int v88 = *((_DWORD *)v86 + 8);
                            if (v88 == v180)
                            {
                              unsigned int v89 = *(_DWORD *)(v85 + 36);
                              BOOL v90 = v89 == v179;
                              if (v89 > v179) {
                                goto LABEL_158;
                              }
                              if (v89 >= v179) {
                                char v91 = 1;
                              }
                              else {
                                char v91 = -1;
                              }
                              if (v90) {
                                char v91 = 0;
                              }
                            }
                            else
                            {
                              if (v88 > v180) {
                                goto LABEL_158;
                              }
                              char v91 = v88 >= v180 ? 1 : -1;
                            }
                            if ((v91 & 0x80) == 0) {
                              break;
                            }
                            v86 = *(uint64_t **)(v85 + 8);
                            if (!v86)
                            {
                              v87 = (uint64_t **)(v85 + 8);
                              goto LABEL_174;
                            }
                          }
                          v92 = (uint64_t *)v85;
                        }
                        else
                        {
LABEL_174:
                          v92 = (uint64_t *)operator new(0x40uLL);
                          v92[4] = (v179 << 32) | v180;
                          v92[5] = 0;
                          v92[6] = 0;
                          v92[7] = 0;
                          uint64_t *v92 = 0;
                          v92[1] = 0;
                          v92[2] = v85;
                          *v87 = v92;
                          uint64_t v93 = **(void **)(a1 + 192);
                          v94 = v92;
                          if (v93)
                          {
                            *(void *)(a1 + 192) = v93;
                            v94 = *v87;
                          }
                          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 200), v94);
                          ++*(void *)(a1 + 208);
                        }
                        *((unsigned char *)v92 + 40) = v173;
                        v92[6] = v178;
                        *((unsigned char *)v92 + 56) = v172;
                        int v75 = v180;
                        uint64_t v74 = v171;
                        unint64_t v76 = v174;
                      }
                    }
                  }
                  ++v76;
                }
                while (v76 < *(unsigned int *)(v74 + 24));
              }
              if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v198.__r_.__value_.__l.__data_);
              }
            }
          }
        }
      }
LABEL_182:
      v95 = *(void **)(v28 + 20);
      if (!v95 || !*v95) {
        goto LABEL_213;
      }
      std::string::basic_string[abi:ne180100]<0>(&v198, "AC_");
      std::string::basic_string[abi:ne180100]<0>(&v197, **(char ***)(v28 + 20));
      if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v197.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v198.__r_.__value_.__l.__data_);
      }
      if (!HIDWORD(v96))
      {
LABEL_213:
        v107 = *(void **)(v28 + 28);
        if (!v107 || !*v107) {
          goto LABEL_244;
        }
        std::string::basic_string[abi:ne180100]<0>(&v198, "AP_");
        std::string::basic_string[abi:ne180100]<0>(&v197, **(char ***)(v28 + 28));
        if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v197.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v198.__r_.__value_.__l.__data_);
        }
        if (!HIDWORD(v108)) {
          goto LABEL_244;
        }
        std::string::basic_string[abi:ne180100]<0>(&v198, **(char ***)(v28 + 28));
        if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
        {
          v110 = v187;
          if (v198.__r_.__value_.__l.__size_ < 8) {
            goto LABEL_228;
          }
          v109 = (std::string::value_type *)(v198.__r_.__value_.__r.__words[0] + 7);
        }
        else
        {
          v109 = &v198.__r_.__value_.__s.__data_[7];
          v110 = v187;
          if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 8) {
            goto LABEL_228;
          }
        }
        if (*v109 == 48)
        {
          BOOL v111 = 0;
          if ((SHIBYTE(v198.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_242;
          }
          goto LABEL_241;
        }
LABEL_228:
        uint64_t v112 = *v110;
        if (!*v110) {
          goto LABEL_239;
        }
        v113 = v110;
        do
        {
          unsigned int v114 = *(_DWORD *)(v112 + 32);
          BOOL v115 = v114 >= v108;
          if (v114 >= v108) {
            v116 = (uint64_t *)v112;
          }
          else {
            v116 = (uint64_t *)(v112 + 8);
          }
          if (v115) {
            v113 = (void *)v112;
          }
          uint64_t v112 = *v116;
        }
        while (*v116);
        v110 = v187;
        if (v113 == v187 || *((_DWORD *)v113 + 8) > v108) {
LABEL_239:
        }
          v113 = v110;
        BOOL v111 = v113 == v110;
        if ((SHIBYTE(v198.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_242;
        }
LABEL_241:
        operator delete(v198.__r_.__value_.__l.__data_);
LABEL_242:
        if (v111)
        {
          v117 = *(uint64_t **)(v28 + 28);
          double v8 = *(double *)v194;
          *(unsigned char *)v118 = a4;
          v118[1] = v117;
          *((double *)v118 + 2) = v8;
        }
        goto LABEL_244;
      }
      std::string::basic_string[abi:ne180100]<0>(&v198, **(char ***)(v28 + 20));
      if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
      {
        v98 = v188;
        if (v198.__r_.__value_.__l.__size_ < 8) {
          goto LABEL_197;
        }
        v97 = (std::string::value_type *)(v198.__r_.__value_.__r.__words[0] + 7);
      }
      else
      {
        v98 = v188;
        v97 = &v198.__r_.__value_.__s.__data_[7];
        if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 8) {
          goto LABEL_197;
        }
      }
      if (*v97 == 48)
      {
        BOOL v99 = 0;
        if ((SHIBYTE(v198.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_211;
        }
        goto LABEL_210;
      }
LABEL_197:
      uint64_t v100 = *v98;
      if (!*v98) {
        goto LABEL_208;
      }
      v101 = v98;
      do
      {
        unsigned int v102 = *(_DWORD *)(v100 + 32);
        BOOL v103 = v102 >= v96;
        if (v102 >= v96) {
          v104 = (uint64_t *)v100;
        }
        else {
          v104 = (uint64_t *)(v100 + 8);
        }
        if (v103) {
          v101 = (void *)v100;
        }
        uint64_t v100 = *v104;
      }
      while (*v104);
      v98 = v188;
      if (v101 == v188 || *((_DWORD *)v101 + 8) > v96) {
LABEL_208:
      }
        v101 = v98;
      BOOL v99 = v101 == v98;
      if ((SHIBYTE(v198.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_211;
      }
LABEL_210:
      operator delete(v198.__r_.__value_.__l.__data_);
LABEL_211:
      if (v99)
      {
        v105 = *(uint64_t **)(v28 + 20);
        double v8 = *(double *)v194;
        *(unsigned char *)v106 = a4;
        v106[1] = v105;
        *((double *)v106 + 2) = v8;
      }
      goto LABEL_213;
    }
LABEL_76:
    operator delete(v198.__r_.__value_.__l.__data_);
    if (!v35) {
      goto LABEL_182;
    }
    goto LABEL_77;
  }
LABEL_246:
  v119 = *(void **)(a3 + 104);
  if (v119 && *v119)
  {
    std::string::basic_string[abi:ne180100]<0>(&v198, "AP_");
    std::string::basic_string[abi:ne180100]<0>(&v197, **(char ***)(a3 + 104));
    if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v197.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v198.__r_.__value_.__l.__data_);
    }
    if (HIDWORD(v120))
    {
      std::string::basic_string[abi:ne180100]<0>(&v198, **(char ***)(a3 + 104));
      if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v198.__r_.__value_.__l.__size_ < 8) {
          goto LABEL_261;
        }
        v121 = (std::string::value_type *)(v198.__r_.__value_.__r.__words[0] + 7);
      }
      else
      {
        if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 8) {
          goto LABEL_261;
        }
        v121 = &v198.__r_.__value_.__s.__data_[7];
      }
      if (*v121 == 48)
      {
        BOOL v122 = 0;
        if ((SHIBYTE(v198.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_275;
        }
        goto LABEL_274;
      }
LABEL_261:
      uint64_t v123 = a1 + 152;
      uint64_t v124 = *(void *)(a1 + 152);
      if (!v124) {
        goto LABEL_272;
      }
      uint64_t v125 = a1 + 152;
      do
      {
        unsigned int v126 = *(_DWORD *)(v124 + 32);
        BOOL v127 = v126 >= v120;
        if (v126 >= v120) {
          v128 = (uint64_t *)v124;
        }
        else {
          v128 = (uint64_t *)(v124 + 8);
        }
        if (v127) {
          uint64_t v125 = v124;
        }
        uint64_t v124 = *v128;
      }
      while (*v128);
      if (v125 == v123 || *(_DWORD *)(v125 + 32) > v120) {
LABEL_272:
      }
        uint64_t v125 = a1 + 152;
      BOOL v122 = v125 == v123;
      if ((SHIBYTE(v198.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_275;
      }
LABEL_274:
      operator delete(v198.__r_.__value_.__l.__data_);
LABEL_275:
      if (v122)
      {
        v129 = *(uint64_t **)(a3 + 104);
        double v8 = *(double *)v194;
        *(unsigned char *)v130 = a4;
        v130[1] = v129;
        *((double *)v130 + 2) = v8;
      }
    }
  }
  if (*(_DWORD *)(a3 + 112))
  {
    unint64_t v131 = 0;
    char v132 = 0;
    v133 = (uint64_t **)(a1 + 48);
    v134 = (uint64_t *)(a1 + 56);
    do
    {
      uint64_t v135 = *(void *)(a3 + 116);
      v136 = *(void **)(v135 + 8 * v131);
      if (v136 && *v136)
      {
        std::string::basic_string[abi:ne180100]<0>(&v198, "AO_");
        std::string::basic_string[abi:ne180100]<0>(&v197, **(char ***)(v135 + 8 * v131));
        if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v197.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v198.__r_.__value_.__l.__data_);
        }
        if (HIDWORD(v137))
        {
          uint64_t v138 = *v134;
          if (!*v134) {
            goto LABEL_297;
          }
          uint64_t v139 = a1 + 56;
          do
          {
            unsigned int v140 = *(unsigned __int16 *)(v138 + 32);
            BOOL v141 = v140 >= (unsigned __int16)v137;
            if (v140 >= (unsigned __int16)v137) {
              v142 = (uint64_t *)v138;
            }
            else {
              v142 = (uint64_t *)(v138 + 8);
            }
            if (v141) {
              uint64_t v139 = v138;
            }
            uint64_t v138 = *v142;
          }
          while (*v142);
          if ((uint64_t *)v139 == v134 || *(unsigned __int16 *)(v139 + 32) > (unsigned __int16)v137)
          {
LABEL_297:
            uint64_t v143 = *(void *)(v135 + 8 * v131);
            if (*(unsigned char *)(v143 + 16)) {
              double v144 = *(double *)(v143 + 20);
            }
            else {
              double v144 = 0.0;
            }
            if (*(unsigned char *)(v143 + 28)) {
              double v8 = *(double *)(v143 + 32);
            }
            else {
              *(void *)&v8 &= 0xFFFFFFFFFFFFFF00;
            }
            double v145 = v14 + v144;
            double v146 = v14 + v144;
            double v147 = v14 + v144 + v8;
            if (*(unsigned char *)(v143 + 28)) {
              uint64_t v148 = *(void *)&v147;
            }
            else {
              uint64_t v148 = 0;
            }
            if (v149 != 3)
            {
              uint64_t v150 = v149;
              if (v149 != 4) {
                char v132 = 1;
              }
              *(unsigned char *)v151 = v150;
              v151[1] = (uint64_t *)v143;
              *((double *)v151 + 2) = v145;
              if (v150 != 2
              {
              }
            }
          }
        }
      }
      ++v131;
    }
    while (v131 < *(unsigned int *)(a3 + 112));
  }
  else
  {
    char v132 = 0;
  }
  if (*(_DWORD *)(a3 + 124))
  {
    unint64_t v152 = 0;
    v153 = (uint64_t **)(a1 + 48);
    v154 = (uint64_t *)(a1 + 56);
    do
    {
      uint64_t v155 = *(void *)(*(void *)(a3 + 128) + 8 * v152);
      if (v155 && *(void *)v155)
      {
        std::string::basic_string[abi:ne180100]<0>(&v198, "AO_");
        std::string::basic_string[abi:ne180100]<0>(&v197, *(char **)v155);
        if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v197.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v198.__r_.__value_.__l.__data_);
        }
        if (HIDWORD(v156))
        {
          uint64_t v157 = *v154;
          if (!*v154) {
            goto LABEL_354;
          }
          uint64_t v158 = a1 + 56;
          do
          {
            unsigned int v159 = *(unsigned __int16 *)(v157 + 32);
            BOOL v160 = v159 >= (unsigned __int16)v156;
            if (v159 >= (unsigned __int16)v156) {
              v161 = (uint64_t *)v157;
            }
            else {
              v161 = (uint64_t *)(v157 + 8);
            }
            if (v160) {
              uint64_t v158 = v157;
            }
            uint64_t v157 = *v161;
          }
          while (*v161);
          if ((uint64_t *)v158 == v154 || *(unsigned __int16 *)(v158 + 32) > (unsigned __int16)v156)
          {
LABEL_354:
            if (*(unsigned char *)(v155 + 16)) {
              double v162 = *(double *)(v155 + 20);
            }
            else {
              double v162 = 0.0;
            }
            if (*(unsigned char *)(v155 + 28)) {
              double v8 = *(double *)(v155 + 32);
            }
            else {
              *(void *)&v8 &= 0xFFFFFFFFFFFFFF00;
            }
            double v163 = v14 + v162;
            double v164 = v14 + v162;
            double v165 = v14 + v162 + v8;
            if (*(unsigned char *)(v155 + 28)) {
              uint64_t v166 = *(void *)&v165;
            }
            else {
              uint64_t v166 = 0;
            }
            if (v167 != 3)
            {
              uint64_t v168 = v167;
              if (v167 != 4) {
                char v132 = 1;
              }
              *(unsigned char *)v169 = v168;
              v169[1] = (uint64_t *)v155;
              *((double *)v169 + 2) = v163;
              if (v168 != 2
              {
              }
            }
          }
        }
      }
      ++v152;
    }
    while (v152 < *(unsigned int *)(a3 + 124));
  }
  return v132 & 1;
}

void sub_18FF3A9C4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 145) < 0) {
    operator delete(*(void **)(v1 - 168));
  }
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::parse_format_id(unsigned __int8 *a1, const std::string *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  v4 = a1 + 23;
  v5 = (uint64_t *)(a1 + 8);
  if ((a1[23] & 0x80u) == 0) {
    std::string::size_type v6 = a1[23];
  }
  else {
    std::string::size_type v6 = *((void *)a1 + 1);
  }
  int v25 = 0;
  unsigned int v7 = std::string::basic_string((std::string *)v27, a2, 0, v6, (std::allocator<char> *)&v24);
  uint64_t v8 = v27[23];
  if (v27[23] >= 0) {
    uint64_t v9 = v27[23];
  }
  else {
    uint64_t v9 = *(void *)&v27[8];
  }
  uint64_t v10 = *v4;
  int v11 = (char)v10;
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *v5;
  }
  if (v9 != v10) {
    goto LABEL_19;
  }
  if (v11 >= 0) {
    double v12 = a1;
  }
  else {
    double v12 = *(unsigned __int8 **)a1;
  }
  if ((v27[23] & 0x80000000) != 0)
  {
    double v15 = *(void **)v27;
    if (memcmp(*(const void **)v27, v12, *(size_t *)&v27[8]))
    {
      operator delete(v15);
      goto LABEL_31;
    }
  }
  else if (v27[23])
  {
    v13 = v27;
    while (*v13 == *v12)
    {
      ++v13;
      ++v12;
      if (!--v8) {
        goto LABEL_24;
      }
    }
LABEL_19:
    BOOL v14 = 1;
    if ((v27[23] & 0x80) == 0) {
      goto LABEL_20;
    }
    goto LABEL_30;
  }
LABEL_24:
  std::string::basic_string(&v24, a2, v6, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v26);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v16 = &v24;
  }
  else {
    unint64_t v16 = (std::string *)v24.__r_.__value_.__r.__words[0];
  }
  unsigned int v7 = (std::string *)sscanf((const char *)v16, "%08x", &v25);
  BOOL v14 = v7 != 1;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if ((v27[23] & 0x80) == 0)
  {
LABEL_20:
    if (!v14) {
      goto LABEL_40;
    }
    goto LABEL_31;
  }
LABEL_30:
  operator delete(*(void **)v27);
  if (!v14)
  {
LABEL_40:
    unsigned int v21 = v25 & 0xFFFFFF00;
    int v20 = v25;
    uint64_t v22 = 0x100000000;
    return v22 | v21 | v20;
  }
LABEL_31:
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v18 = a2;
    }
    else {
      v18 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    }
    if ((a1[23] & 0x80u) == 0) {
      uint64_t v19 = a1;
    }
    else {
      uint64_t v19 = *(unsigned __int8 **)a1;
    }
    *(_DWORD *)v27 = 136315906;
    *(void *)&v27[4] = "AudioMetadataSerializer.cpp";
    *(_WORD *)&v27[12] = 1024;
    *(_DWORD *)&v27[14] = 2133;
    *(_WORD *)&v27[18] = 2080;
    *(void *)&v27[20] = v18;
    __int16 v28 = 2080;
    v29 = v19;
    _os_log_impl(&dword_18FEC0000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d Format ID '%s' does not match expected pattern '%sxxxxyyyy'", v27, 0x26u);
  }
  int v20 = 0;
  unsigned int v21 = 0;
  uint64_t v22 = 0;
  return v22 | v21 | v20;
}

void sub_18FF3ACA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **std::map<unsigned int,anonymous namespace'::ElementRef<AudioMetadataStreamFormat>>::operator[](uint64_t **a1, unsigned int a2)
{
  v5 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        std::string::size_type v6 = (uint64_t **)v4;
        unsigned int v7 = *((_DWORD *)v4 + 8);
        if (v7 <= a2) {
          break;
        }
        v4 = *v6;
        v5 = v6;
        if (!*v6) {
          goto LABEL_9;
        }
      }
      if (v7 >= a2) {
        break;
      }
      v4 = v6[1];
      if (!v4)
      {
        v5 = v6 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    std::string::size_type v6 = a1 + 1;
LABEL_9:
    uint64_t v8 = (uint64_t *)v6;
    std::string::size_type v6 = (uint64_t **)operator new(0x40uLL);
    *((_DWORD *)v6 + 8) = a2;
    v6[6] = 0;
    v6[7] = 0;
    v6[5] = 0;
    *std::string::size_type v6 = 0;
    v6[1] = 0;
    v6[2] = v8;
    uint64_t *v5 = (uint64_t *)v6;
    uint64_t v9 = (uint64_t *)**a1;
    uint64_t v10 = (uint64_t *)v6;
    if (v9)
    {
      *a1 = v9;
      uint64_t v10 = *v5;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v6 + 5;
}

unint64_t anonymous namespace'::parse_track_format_id(unsigned __int8 *a1, const std::string *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  v4 = a1 + 23;
  v5 = (uint64_t *)(a1 + 8);
  if ((a1[23] & 0x80u) == 0) {
    std::string::size_type v6 = a1[23];
  }
  else {
    std::string::size_type v6 = *((void *)a1 + 1);
  }
  int v25 = 0;
  unsigned __int8 v24 = 0;
  unsigned int v7 = std::string::basic_string((std::string *)v27, a2, 0, v6, (std::allocator<char> *)&v23);
  uint64_t v8 = v27[23];
  if (v27[23] >= 0) {
    uint64_t v9 = v27[23];
  }
  else {
    uint64_t v9 = *(void *)&v27[8];
  }
  uint64_t v10 = *v4;
  int v11 = (char)v10;
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *v5;
  }
  if (v9 != v10) {
    goto LABEL_19;
  }
  if (v11 >= 0) {
    double v12 = a1;
  }
  else {
    double v12 = *(unsigned __int8 **)a1;
  }
  if ((v27[23] & 0x80000000) != 0)
  {
    double v15 = *(void **)v27;
    if (memcmp(*(const void **)v27, v12, *(size_t *)&v27[8]))
    {
      operator delete(v15);
      goto LABEL_31;
    }
  }
  else if (v27[23])
  {
    v13 = v27;
    while (*v13 == *v12)
    {
      ++v13;
      ++v12;
      if (!--v8) {
        goto LABEL_24;
      }
    }
LABEL_19:
    BOOL v14 = 1;
    if ((v27[23] & 0x80) == 0) {
      goto LABEL_20;
    }
    goto LABEL_30;
  }
LABEL_24:
  std::string::basic_string(&v23, a2, v6, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v26);
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v16 = &v23;
  }
  else {
    unint64_t v16 = (std::string *)v23.__r_.__value_.__r.__words[0];
  }
  unsigned int v7 = (std::string *)sscanf((const char *)v16, "%08x_%02hhx", &v25, &v24);
  BOOL v14 = v7 != 2;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if ((v27[23] & 0x80) == 0)
  {
LABEL_20:
    if (!v14) {
      goto LABEL_40;
    }
    goto LABEL_31;
  }
LABEL_30:
  operator delete(*(void **)v27);
  if (!v14)
  {
LABEL_40:
    unint64_t v21 = v25 & 0xFFFFFF00 | ((unint64_t)v24 << 32);
    uint64_t v20 = v25;
    return v21 | v20;
  }
LABEL_31:
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v18 = a2;
    }
    else {
      v18 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    }
    if ((a1[23] & 0x80u) == 0) {
      uint64_t v19 = a1;
    }
    else {
      uint64_t v19 = *(unsigned __int8 **)a1;
    }
    *(_DWORD *)v27 = 136315906;
    *(void *)&v27[4] = "AudioMetadataSerializer.cpp";
    *(_WORD *)&v27[12] = 1024;
    *(_DWORD *)&v27[14] = 2148;
    *(_WORD *)&v27[18] = 2080;
    *(void *)&v27[20] = v18;
    __int16 v28 = 2080;
    v29 = v19;
    _os_log_impl(&dword_18FEC0000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d Format ID '%s' does not match expected pattern '%sxxxxyyyy_zz'", v27, 0x26u);
  }
  uint64_t v20 = 0;
  unint64_t v21 = 0;
  return v21 | v20;
}

void sub_18FF3AFFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **std::map<std::tuple<unsigned int,unsigned char>,anonymous namespace'::ElementRef<AudioMetadataTrackFormat>>::operator[](uint64_t **a1, unsigned int *a2)
{
  v5 = a1 + 1;
  v4 = a1[1];
  if (!v4)
  {
    uint64_t v8 = a1 + 1;
    goto LABEL_22;
  }
  unsigned int v6 = *a2;
  unsigned int v7 = *((unsigned __int8 *)a2 + 4);
  do
  {
    while (1)
    {
      uint64_t v8 = (uint64_t **)v4;
      unsigned int v9 = *((_DWORD *)v4 + 8);
      if (v6 == v9) {
        break;
      }
      if (v6 >= v9)
      {
        if (v9 >= v6) {
          char v13 = 1;
        }
        else {
          char v13 = -1;
        }
        if ((v13 & 0x80) == 0) {
          return v8 + 5;
        }
        goto LABEL_19;
      }
LABEL_13:
      v4 = *v8;
      v5 = v8;
      if (!*v8) {
        goto LABEL_22;
      }
    }
    unsigned int v10 = *((unsigned __int8 *)v8 + 36);
    if (v7 < v10) {
      goto LABEL_13;
    }
    BOOL v11 = v10 == v7;
    if (v10 >= v7) {
      char v12 = 1;
    }
    else {
      char v12 = -1;
    }
    if (v11) {
      char v12 = 0;
    }
    if ((v12 & 0x80) == 0) {
      return v8 + 5;
    }
LABEL_19:
    v4 = v8[1];
  }
  while (v4);
  v5 = v8 + 1;
LABEL_22:
  BOOL v14 = (uint64_t *)v8;
  uint64_t v8 = (uint64_t **)operator new(0x40uLL);
  v8[4] = *(uint64_t **)a2;
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *uint64_t v8 = 0;
  v8[1] = 0;
  v8[2] = v14;
  uint64_t *v5 = (uint64_t *)v8;
  double v15 = (uint64_t *)**a1;
  unint64_t v16 = (uint64_t *)v8;
  if (v15)
  {
    *a1 = v15;
    unint64_t v16 = *v5;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v16);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v8 + 5;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  unsigned int v6 = (uint64_t **)v3[2];
  unsigned int v7 = *v6;
  if (*v6 == v3)
  {
    *unsigned int v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      unsigned int v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      unsigned int v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    uint64_t *v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 != v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      uint64_t v18 = v7[1];
      *(void *)uint64_t v12 = v18;
      if (v18) {
        *(void *)(v18 + 16) = v12;
      }
      v7[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
      v7[1] = v12;
      *(void *)(v12 + 16) = v7;
      if (result == (uint64_t *)v12) {
        result = v7;
      }
      unsigned int v7 = *(uint64_t **)v12;
    }
    uint64_t v19 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v19 + 24)) {
      goto LABEL_68;
    }
    uint64_t v20 = (uint64_t *)v7[1];
    if (v20 && !*((unsigned char *)v20 + 24))
    {
      if (v19 && !*((unsigned char *)v19 + 24))
      {
LABEL_68:
        uint64_t v20 = v7;
      }
      else
      {
        *((unsigned char *)v20 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v26 = *v20;
        v7[1] = *v20;
        if (v26) {
          *(void *)(v26 + 16) = v7;
        }
        v20[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
        *uint64_t v20 = (uint64_t)v7;
        v7[2] = (uint64_t)v20;
        uint64_t v19 = v7;
      }
      uint64_t v23 = v20[2];
      *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v19 + 24) = 1;
      unsigned __int8 v24 = *(uint64_t **)v23;
      uint64_t v27 = *(void *)(*(void *)v23 + 8);
      *(void *)uint64_t v23 = v27;
      if (v27) {
        *(void *)(v27 + 16) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      v24[1] = v23;
      goto LABEL_72;
    }
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
LABEL_49:
    unsigned int v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    char v13 = *(uint64_t **)(v12 + 8);
    uint64_t v14 = *v13;
    *(void *)(v12 + 8) = *v13;
    if (v14) {
      *(void *)(v14 + 16) = v12;
    }
    v13[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
    uint64_t *v13 = v12;
    *(void *)(v12 + 16) = v13;
    if (result == (uint64_t *)*v7) {
      result = v7;
    }
    unsigned int v7 = *(uint64_t **)(*v7 + 8);
  }
  double v15 = (void *)*v7;
  if (!*v7 || *((unsigned char *)v15 + 24))
  {
    unint64_t v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_59;
    }
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      uint64_t v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  unint64_t v16 = (uint64_t *)v7[1];
  if (v16 && !*((unsigned char *)v16 + 24))
  {
LABEL_59:
    double v15 = v7;
  }
  else
  {
    *((unsigned char *)v15 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v22 = v15[1];
    uint64_t *v7 = v22;
    if (v22) {
      *(void *)(v22 + 16) = v7;
    }
    v15[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    unint64_t v16 = v7;
  }
  uint64_t v23 = v15[2];
  *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v16 + 24) = 1;
  unsigned __int8 v24 = *(uint64_t **)(v23 + 8);
  uint64_t v25 = *v24;
  *(void *)(v23 + 8) = *v24;
  if (v25) {
    *(void *)(v25 + 16) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  *unsigned __int8 v24 = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

BOOL anonymous namespace'::encode_var_uint(unint64_t this, uint64_t a2, unsigned __int8 *a3, unint64_t *a4)
{
  long long v19 = 0u;
  memset(v18, 0, sizeof(v18));
  do
  {
    char v17 = this & 0x7F;
    std::deque<unsigned char>::push_back(v18, &v17);
    BOOL v8 = this > 0x7F;
    this >>= 7;
  }
  while (v8);
  uint64_t v9 = *((void *)&v19 + 1);
  if (*((void *)&v19 + 1))
  {
    while (1)
    {
      uint64_t v10 = v9 - 1;
      char v11 = *(unsigned char *)(*(void *)(*((void *)&v18[0] + 1) + (((unint64_t)(v19 + v10) >> 9) & 0x7FFFFFFFFFFFF8))
                     + ((v19 + v10) & 0xFFF));
      *((void *)&v19 + 1) = v10;
      std::deque<unsigned char>::__maybe_remove_back_spare[abi:ne180100](v18);
      uint64_t v12 = *(void *)a3;
      unint64_t v13 = *(void *)a3 + 1;
      BOOL v14 = v13 <= (unint64_t)a4;
      if (v13 > (unint64_t)a4) {
        break;
      }
      uint64_t v9 = *((void *)&v19 + 1);
      char v15 = v11 | 0x80;
      if (!*((void *)&v19 + 1)) {
        char v15 = v11;
      }
      *(void *)a3 = v13;
      *(unsigned char *)(a2 + v12) = v15;
      if (!v9) {
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    BOOL v14 = 1;
  }
  std::deque<unsigned char>::~deque[abi:ne180100]((uint64_t)v18);
  return v14;
}

void sub_18FF3B598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::deque<unsigned char>::~deque[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void anonymous namespace'::encode_string(const char *a1, unint64_t *a2)
{
  if (a1)
  {
    size_t v4 = strlen(a1);
    if (v4)
    {
      uint64_t v5 = 0;
      unsigned int v6 = (unsigned char *)a2[1];
      do
      {
        char v7 = a1[v5];
        unint64_t v8 = a2[2];
        if ((unint64_t)v6 >= v8)
        {
          unint64_t v10 = *a2;
          char v11 = &v6[-*a2];
          unint64_t v12 = (unint64_t)(v11 + 1);
          if ((uint64_t)(v11 + 1) < 0) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v13 = v8 - v10;
          if (2 * v13 > v12) {
            unint64_t v12 = 2 * v13;
          }
          if (v13 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v14 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v14 = v12;
          }
          if (v14) {
            char v15 = (char *)operator new(v14);
          }
          else {
            char v15 = 0;
          }
          unint64_t v16 = &v11[(void)v15];
          char v17 = &v11[(void)v15];
          char *v17 = v7;
          uint64_t v9 = v17 + 1;
          if (v6 != (unsigned char *)v10)
          {
            uint64_t v18 = &v6[~v10];
            do
            {
              char v19 = *--v6;
              (v18--)[(void)v15] = v19;
            }
            while (v6 != (unsigned char *)v10);
            unsigned int v6 = (unsigned char *)*a2;
            unint64_t v16 = v15;
          }
          *a2 = (unint64_t)v16;
          a2[1] = (unint64_t)v9;
          a2[2] = (unint64_t)&v15[v14];
          if (v6) {
            operator delete(v6);
          }
        }
        else
        {
          *unsigned int v6 = v7;
          uint64_t v9 = v6 + 1;
        }
        a2[1] = (unint64_t)v9;
        ++v5;
        unsigned int v6 = v9;
      }
      while (v5 != v4);
    }
  }
  else
  {
  }
}

void anonymous namespace'::encode_content_ids(__int16 **a1, unint64_t *a2)
{
  size_t v4 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 != v5)
  {
    unsigned int v6 = (unsigned char *)a2[1];
    do
    {
      __int16 v7 = *v4;
      unint64_t v8 = a2[2];
      if ((unint64_t)v6 >= v8)
      {
        unint64_t v10 = *a2;
        char v11 = &v6[-*a2];
        unint64_t v12 = (unint64_t)(v11 + 1);
        if ((uint64_t)(v11 + 1) < 0) {
          goto LABEL_40;
        }
        unint64_t v13 = v8 - v10;
        if (2 * v13 > v12) {
          unint64_t v12 = 2 * v13;
        }
        if (v13 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v14 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v14 = v12;
        }
        if (v14) {
          char v15 = (char *)operator new(v14);
        }
        else {
          char v15 = 0;
        }
        unint64_t v16 = &v11[(void)v15];
        char v17 = &v11[(void)v15];
        unsigned char *v17 = HIBYTE(v7);
        uint64_t v9 = v17 + 1;
        if (v6 != (unsigned char *)v10)
        {
          uint64_t v18 = &v6[~v10];
          do
          {
            char v19 = *--v6;
            (v18--)[(void)v15] = v19;
          }
          while (v6 != (unsigned char *)v10);
          unsigned int v6 = (unsigned char *)*a2;
          unint64_t v16 = v15;
        }
        *a2 = (unint64_t)v16;
        a2[1] = (unint64_t)v9;
        a2[2] = (unint64_t)&v15[v14];
        if (v6) {
          operator delete(v6);
        }
      }
      else
      {
        *unsigned int v6 = HIBYTE(v7);
        uint64_t v9 = v6 + 1;
      }
      a2[1] = (unint64_t)v9;
      unint64_t v20 = a2[2];
      if ((unint64_t)v9 >= v20)
      {
        unint64_t v21 = *a2;
        uint64_t v22 = &v9[-*a2];
        unint64_t v23 = (unint64_t)(v22 + 1);
        if ((uint64_t)(v22 + 1) < 0) {
LABEL_40:
        }
          std::vector<float>::__throw_length_error[abi:ne180100]();
        unint64_t v24 = v20 - v21;
        if (2 * v24 > v23) {
          unint64_t v23 = 2 * v24;
        }
        if (v24 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v25 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v25 = v23;
        }
        if (v25) {
          unint64_t v26 = (unint64_t)operator new(v25);
        }
        else {
          unint64_t v26 = 0;
        }
        uint64_t v27 = (char *)(v26 + v25);
        v22[v26] = v7;
        unsigned int v6 = &v22[v26 + 1];
        if (v9 == (unsigned char *)v21)
        {
          *a2 = (unint64_t)&v22[v26];
          a2[1] = (unint64_t)v6;
          a2[2] = (unint64_t)v27;
        }
        else
        {
          __int16 v28 = &v9[~v21];
          do
          {
            char v29 = *--v9;
            (v28--)[v26] = v29;
          }
          while (v9 != (unsigned char *)v21);
          uint64_t v9 = (unsigned char *)*a2;
          *a2 = v26;
          a2[1] = (unint64_t)v6;
          a2[2] = (unint64_t)v27;
          if (!v9) {
            goto LABEL_38;
          }
        }
        operator delete(v9);
      }
      else
      {
        *uint64_t v9 = v7;
        unsigned int v6 = v9 + 1;
      }
LABEL_38:
      a2[1] = (unint64_t)v6;
      ++v4;
    }
    while (v4 != v5);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(uint64_t a1)
{
  if (a1 < 0) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(2 * a1);
}

void anonymous namespace'::encode_loudness_metadata(uint64_t a1, unint64_t *a2)
{
  if (*(float *)(a1 + 16) == 0.0) {
    char v4 = *(unsigned char *)(a1 + 40) << 6;
  }
  else {
    char v4 = (*(unsigned char *)(a1 + 40) << 6) | 0x20;
  }
  if (*(float *)(a1 + 20) != 0.0) {
    v4 |= 0x10u;
  }
  if (*(float *)(a1 + 24) != 0.0) {
    v4 |= 8u;
  }
  if (*(float *)(a1 + 28) != 0.0) {
    v4 += 4;
  }
  if (*(float *)(a1 + 32) != 0.0) {
    v4 += 2;
  }
  if (*(float *)(a1 + 36) == 0.0) {
    char v5 = v4;
  }
  else {
    char v5 = v4 + 1;
  }
  __int16 v7 = (unsigned char *)a2[1];
  unint64_t v6 = a2[2];
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = *a2;
    unint64_t v10 = &v7[-*a2];
    unint64_t v11 = (unint64_t)(v10 + 1);
    if ((uint64_t)(v10 + 1) < 0) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = v6 - v9;
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v13 = v11;
    }
    if (v13) {
      unint64_t v14 = (unint64_t)operator new(v13);
    }
    else {
      unint64_t v14 = 0;
    }
    char v15 = (char *)(v14 + v13);
    v10[v14] = v5;
    uint64_t v8 = (uint64_t)&v10[v14 + 1];
    if (v7 == (unsigned char *)v9)
    {
      v14 += (unint64_t)v10;
    }
    else
    {
      unint64_t v16 = &v7[~v9];
      do
      {
        char v17 = *--v7;
        (v16--)[v14] = v17;
      }
      while (v7 != (unsigned char *)v9);
      __int16 v7 = (unsigned char *)*a2;
    }
    *a2 = v14;
    a2[1] = v8;
    a2[2] = (unint64_t)v15;
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    unsigned char *v7 = v5;
    uint64_t v8 = (uint64_t)(v7 + 1);
  }
  a2[1] = v8;
  float v18 = *(float *)(a1 + 16);
  if (v18 != 0.0) {
  float v19 = *(float *)(a1 + 20);
  }
  if (v19 != 0.0) {
  float v20 = *(float *)(a1 + 24);
  }
  if (v20 != 0.0) {
  float v21 = *(float *)(a1 + 28);
  }
  if (v21 != 0.0) {
  float v22 = *(float *)(a1 + 32);
  }
  if (v22 != 0.0) {
  float v23 = *(float *)(a1 + 36);
  }
  if (v23 != 0.0)
  {
  }
}

void anonymous namespace'::encode_float_32(unint64_t *a1, float a2)
{
  char v5 = (unsigned char *)a1[1];
  unint64_t v4 = a1[2];
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v7 = *a1;
    uint64_t v8 = &v5[-*a1];
    unint64_t v9 = (unint64_t)(v8 + 1);
    if ((uint64_t)(v8 + 1) < 0) {
      goto LABEL_74;
    }
    unint64_t v10 = v4 - v7;
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v9;
    }
    if (v11) {
      unint64_t v12 = (unint64_t)operator new(v11);
    }
    else {
      unint64_t v12 = 0;
    }
    size_t v13 = (char *)(v12 + v11);
    v8[v12] = HIBYTE(a2);
    unint64_t v6 = &v8[v12 + 1];
    if (v5 == (unsigned char *)v7)
    {
      v12 += (unint64_t)v8;
    }
    else
    {
      unint64_t v14 = &v5[~v7];
      do
      {
        char v15 = *--v5;
        (v14--)[v12] = v15;
      }
      while (v5 != (unsigned char *)v7);
      char v5 = (unsigned char *)*a1;
    }
    *a1 = v12;
    a1[1] = (unint64_t)v6;
    a1[2] = (unint64_t)v13;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    unsigned char *v5 = HIBYTE(a2);
    unint64_t v6 = v5 + 1;
  }
  a1[1] = (unint64_t)v6;
  unint64_t v16 = a1[2];
  if ((unint64_t)v6 < v16)
  {
    *unint64_t v6 = BYTE2(a2);
    char v17 = v6 + 1;
    goto LABEL_37;
  }
  unint64_t v18 = *a1;
  float v19 = &v6[-*a1];
  unint64_t v20 = (unint64_t)(v19 + 1);
  if ((uint64_t)(v19 + 1) < 0) {
    goto LABEL_74;
  }
  unint64_t v21 = v16 - v18;
  if (2 * v21 > v20) {
    unint64_t v20 = 2 * v21;
  }
  if (v21 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v22 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v22 = v20;
  }
  if (v22) {
    unint64_t v23 = (unint64_t)operator new(v22);
  }
  else {
    unint64_t v23 = 0;
  }
  unint64_t v24 = (char *)(v23 + v22);
  v19[v23] = BYTE2(a2);
  char v17 = &v19[v23 + 1];
  if (v6 == (unsigned char *)v18)
  {
    *a1 = (unint64_t)&v19[v23];
    a1[1] = (unint64_t)v17;
    a1[2] = (unint64_t)v24;
LABEL_36:
    operator delete(v6);
    goto LABEL_37;
  }
  size_t v25 = &v6[~v18];
  do
  {
    char v26 = *--v6;
    (v25--)[v23] = v26;
  }
  while (v6 != (unsigned char *)v18);
  unint64_t v6 = (unsigned char *)*a1;
  *a1 = v23;
  a1[1] = (unint64_t)v17;
  a1[2] = (unint64_t)v24;
  if (v6) {
    goto LABEL_36;
  }
LABEL_37:
  a1[1] = (unint64_t)v17;
  unint64_t v27 = a1[2];
  if ((unint64_t)v17 < v27)
  {
    unsigned char *v17 = BYTE1(a2);
    __int16 v28 = v17 + 1;
    goto LABEL_55;
  }
  unint64_t v29 = *a1;
  uint64_t v30 = &v17[-*a1];
  unint64_t v31 = (unint64_t)(v30 + 1);
  if ((uint64_t)(v30 + 1) < 0) {
    goto LABEL_74;
  }
  unint64_t v32 = v27 - v29;
  if (2 * v32 > v31) {
    unint64_t v31 = 2 * v32;
  }
  if (v32 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v33 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v33 = v31;
  }
  if (v33) {
    unint64_t v34 = (unint64_t)operator new(v33);
  }
  else {
    unint64_t v34 = 0;
  }
  BOOL v35 = (char *)(v34 + v33);
  v30[v34] = BYTE1(a2);
  __int16 v28 = &v30[v34 + 1];
  if (v17 == (unsigned char *)v29)
  {
    *a1 = (unint64_t)&v30[v34];
    a1[1] = (unint64_t)v28;
    a1[2] = (unint64_t)v35;
LABEL_54:
    operator delete(v17);
    goto LABEL_55;
  }
  uint64_t v36 = &v17[~v29];
  do
  {
    char v37 = *--v17;
    (v36--)[v34] = v37;
  }
  while (v17 != (unsigned char *)v29);
  char v17 = (unsigned char *)*a1;
  *a1 = v34;
  a1[1] = (unint64_t)v28;
  a1[2] = (unint64_t)v35;
  if (v17) {
    goto LABEL_54;
  }
LABEL_55:
  a1[1] = (unint64_t)v28;
  unint64_t v38 = a1[2];
  if ((unint64_t)v28 < v38)
  {
    *__int16 v28 = LOBYTE(a2);
    uint64_t v39 = (uint64_t)(v28 + 1);
    goto LABEL_73;
  }
  unint64_t v40 = *a1;
  unsigned int v41 = &v28[-*a1];
  unint64_t v42 = (unint64_t)(v41 + 1);
  if ((uint64_t)(v41 + 1) < 0) {
LABEL_74:
  }
    std::vector<float>::__throw_length_error[abi:ne180100]();
  unint64_t v43 = v38 - v40;
  if (2 * v43 > v42) {
    unint64_t v42 = 2 * v43;
  }
  if (v43 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v44 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v44 = v42;
  }
  if (v44) {
    unint64_t v45 = (unint64_t)operator new(v44);
  }
  else {
    unint64_t v45 = 0;
  }
  BOOL v46 = (char *)(v45 + v44);
  v41[v45] = LOBYTE(a2);
  uint64_t v39 = (uint64_t)&v41[v45 + 1];
  if (v28 == (unsigned char *)v40)
  {
    *a1 = (unint64_t)&v41[v45];
    a1[1] = v39;
    a1[2] = (unint64_t)v46;
LABEL_72:
    operator delete(v28);
    goto LABEL_73;
  }
  char v47 = &v28[~v40];
  do
  {
    char v48 = *--v28;
    (v47--)[v45] = v48;
  }
  while (v28 != (unsigned char *)v40);
  __int16 v28 = (unsigned char *)*a1;
  *a1 = v45;
  a1[1] = v39;
  a1[2] = (unint64_t)v46;
  if (v28) {
    goto LABEL_72;
  }
LABEL_73:
  a1[1] = v39;
}

void anonymous namespace'::encode_float_64(unint64_t *a1, double a2)
{
  char v5 = (unsigned char *)a1[1];
  unint64_t v4 = a1[2];
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v7 = *a1;
    uint64_t v8 = &v5[-*a1];
    unint64_t v9 = (unint64_t)(v8 + 1);
    if ((uint64_t)(v8 + 1) < 0) {
      goto LABEL_146;
    }
    unint64_t v10 = v4 - v7;
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v9;
    }
    if (v11) {
      unint64_t v12 = (unint64_t)operator new(v11);
    }
    else {
      unint64_t v12 = 0;
    }
    size_t v13 = (char *)(v12 + v11);
    v8[v12] = HIBYTE(a2);
    unint64_t v6 = &v8[v12 + 1];
    if (v5 == (unsigned char *)v7)
    {
      v12 += (unint64_t)v8;
    }
    else
    {
      unint64_t v14 = &v5[~v7];
      do
      {
        char v15 = *--v5;
        (v14--)[v12] = v15;
      }
      while (v5 != (unsigned char *)v7);
      char v5 = (unsigned char *)*a1;
    }
    *a1 = v12;
    a1[1] = (unint64_t)v6;
    a1[2] = (unint64_t)v13;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    unsigned char *v5 = HIBYTE(a2);
    unint64_t v6 = v5 + 1;
  }
  a1[1] = (unint64_t)v6;
  unint64_t v16 = a1[2];
  if ((unint64_t)v6 < v16)
  {
    *unint64_t v6 = BYTE6(a2);
    char v17 = v6 + 1;
    goto LABEL_37;
  }
  unint64_t v18 = *a1;
  float v19 = &v6[-*a1];
  unint64_t v20 = (unint64_t)(v19 + 1);
  if ((uint64_t)(v19 + 1) < 0) {
    goto LABEL_146;
  }
  unint64_t v21 = v16 - v18;
  if (2 * v21 > v20) {
    unint64_t v20 = 2 * v21;
  }
  if (v21 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v22 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v22 = v20;
  }
  if (v22) {
    unint64_t v23 = (unint64_t)operator new(v22);
  }
  else {
    unint64_t v23 = 0;
  }
  unint64_t v24 = (char *)(v23 + v22);
  v19[v23] = BYTE6(a2);
  char v17 = &v19[v23 + 1];
  if (v6 == (unsigned char *)v18)
  {
    *a1 = (unint64_t)&v19[v23];
    a1[1] = (unint64_t)v17;
    a1[2] = (unint64_t)v24;
LABEL_36:
    operator delete(v6);
    goto LABEL_37;
  }
  size_t v25 = &v6[~v18];
  do
  {
    char v26 = *--v6;
    (v25--)[v23] = v26;
  }
  while (v6 != (unsigned char *)v18);
  unint64_t v6 = (unsigned char *)*a1;
  *a1 = v23;
  a1[1] = (unint64_t)v17;
  a1[2] = (unint64_t)v24;
  if (v6) {
    goto LABEL_36;
  }
LABEL_37:
  a1[1] = (unint64_t)v17;
  unint64_t v27 = a1[2];
  if ((unint64_t)v17 < v27)
  {
    unsigned char *v17 = BYTE5(a2);
    __int16 v28 = v17 + 1;
    goto LABEL_55;
  }
  unint64_t v29 = *a1;
  uint64_t v30 = &v17[-*a1];
  unint64_t v31 = (unint64_t)(v30 + 1);
  if ((uint64_t)(v30 + 1) < 0) {
    goto LABEL_146;
  }
  unint64_t v32 = v27 - v29;
  if (2 * v32 > v31) {
    unint64_t v31 = 2 * v32;
  }
  if (v32 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v33 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v33 = v31;
  }
  if (v33) {
    unint64_t v34 = (unint64_t)operator new(v33);
  }
  else {
    unint64_t v34 = 0;
  }
  BOOL v35 = (char *)(v34 + v33);
  v30[v34] = BYTE5(a2);
  __int16 v28 = &v30[v34 + 1];
  if (v17 == (unsigned char *)v29)
  {
    *a1 = (unint64_t)&v30[v34];
    a1[1] = (unint64_t)v28;
    a1[2] = (unint64_t)v35;
LABEL_54:
    operator delete(v17);
    goto LABEL_55;
  }
  uint64_t v36 = &v17[~v29];
  do
  {
    char v37 = *--v17;
    (v36--)[v34] = v37;
  }
  while (v17 != (unsigned char *)v29);
  char v17 = (unsigned char *)*a1;
  *a1 = v34;
  a1[1] = (unint64_t)v28;
  a1[2] = (unint64_t)v35;
  if (v17) {
    goto LABEL_54;
  }
LABEL_55:
  a1[1] = (unint64_t)v28;
  unint64_t v38 = a1[2];
  if ((unint64_t)v28 < v38)
  {
    *__int16 v28 = BYTE4(a2);
    uint64_t v39 = v28 + 1;
    goto LABEL_73;
  }
  unint64_t v40 = *a1;
  unsigned int v41 = &v28[-*a1];
  unint64_t v42 = (unint64_t)(v41 + 1);
  if ((uint64_t)(v41 + 1) < 0) {
    goto LABEL_146;
  }
  unint64_t v43 = v38 - v40;
  if (2 * v43 > v42) {
    unint64_t v42 = 2 * v43;
  }
  if (v43 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v44 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v44 = v42;
  }
  if (v44) {
    unint64_t v45 = (unint64_t)operator new(v44);
  }
  else {
    unint64_t v45 = 0;
  }
  BOOL v46 = (char *)(v45 + v44);
  v41[v45] = BYTE4(a2);
  uint64_t v39 = &v41[v45 + 1];
  if (v28 == (unsigned char *)v40)
  {
    *a1 = (unint64_t)&v41[v45];
    a1[1] = (unint64_t)v39;
    a1[2] = (unint64_t)v46;
LABEL_72:
    operator delete(v28);
    goto LABEL_73;
  }
  char v47 = &v28[~v40];
  do
  {
    char v48 = *--v28;
    (v47--)[v45] = v48;
  }
  while (v28 != (unsigned char *)v40);
  __int16 v28 = (unsigned char *)*a1;
  *a1 = v45;
  a1[1] = (unint64_t)v39;
  a1[2] = (unint64_t)v46;
  if (v28) {
    goto LABEL_72;
  }
LABEL_73:
  a1[1] = (unint64_t)v39;
  unint64_t v49 = a1[2];
  if ((unint64_t)v39 < v49)
  {
    *uint64_t v39 = BYTE3(a2);
    v50 = v39 + 1;
    goto LABEL_91;
  }
  unint64_t v51 = *a1;
  uint64_t v52 = &v39[-*a1];
  unint64_t v53 = (unint64_t)(v52 + 1);
  if ((uint64_t)(v52 + 1) < 0) {
    goto LABEL_146;
  }
  unint64_t v54 = v49 - v51;
  if (2 * v54 > v53) {
    unint64_t v53 = 2 * v54;
  }
  if (v54 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v55 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v55 = v53;
  }
  if (v55) {
    unint64_t v56 = (unint64_t)operator new(v55);
  }
  else {
    unint64_t v56 = 0;
  }
  uint64_t v57 = (char *)(v56 + v55);
  v52[v56] = BYTE3(a2);
  v50 = &v52[v56 + 1];
  if (v39 == (unsigned char *)v51)
  {
    *a1 = (unint64_t)&v52[v56];
    a1[1] = (unint64_t)v50;
    a1[2] = (unint64_t)v57;
LABEL_90:
    operator delete(v39);
    goto LABEL_91;
  }
  v58 = &v39[~v51];
  do
  {
    char v59 = *--v39;
    (v58--)[v56] = v59;
  }
  while (v39 != (unsigned char *)v51);
  uint64_t v39 = (unsigned char *)*a1;
  *a1 = v56;
  a1[1] = (unint64_t)v50;
  a1[2] = (unint64_t)v57;
  if (v39) {
    goto LABEL_90;
  }
LABEL_91:
  a1[1] = (unint64_t)v50;
  unint64_t v60 = a1[2];
  if ((unint64_t)v50 < v60)
  {
    unsigned char *v50 = BYTE2(a2);
    v61 = v50 + 1;
    goto LABEL_109;
  }
  unint64_t v62 = *a1;
  v63 = &v50[-*a1];
  unint64_t v64 = (unint64_t)(v63 + 1);
  if ((uint64_t)(v63 + 1) < 0) {
    goto LABEL_146;
  }
  unint64_t v65 = v60 - v62;
  if (2 * v65 > v64) {
    unint64_t v64 = 2 * v65;
  }
  if (v65 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v66 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v66 = v64;
  }
  if (v66) {
    unint64_t v67 = (unint64_t)operator new(v66);
  }
  else {
    unint64_t v67 = 0;
  }
  v68 = (char *)(v67 + v66);
  v63[v67] = BYTE2(a2);
  v61 = &v63[v67 + 1];
  if (v50 == (unsigned char *)v62)
  {
    *a1 = (unint64_t)&v63[v67];
    a1[1] = (unint64_t)v61;
    a1[2] = (unint64_t)v68;
LABEL_108:
    operator delete(v50);
    goto LABEL_109;
  }
  unsigned int v69 = &v50[~v62];
  do
  {
    char v70 = *--v50;
    (v69--)[v67] = v70;
  }
  while (v50 != (unsigned char *)v62);
  v50 = (unsigned char *)*a1;
  *a1 = v67;
  a1[1] = (unint64_t)v61;
  a1[2] = (unint64_t)v68;
  if (v50) {
    goto LABEL_108;
  }
LABEL_109:
  a1[1] = (unint64_t)v61;
  unint64_t v71 = a1[2];
  if ((unint64_t)v61 < v71)
  {
    unsigned char *v61 = BYTE1(a2);
    v72 = v61 + 1;
    goto LABEL_127;
  }
  unint64_t v73 = *a1;
  uint64_t v74 = &v61[-*a1];
  unint64_t v75 = (unint64_t)(v74 + 1);
  if ((uint64_t)(v74 + 1) < 0) {
    goto LABEL_146;
  }
  unint64_t v76 = v71 - v73;
  if (2 * v76 > v75) {
    unint64_t v75 = 2 * v76;
  }
  if (v76 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v77 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v77 = v75;
  }
  if (v77) {
    unint64_t v78 = (unint64_t)operator new(v77);
  }
  else {
    unint64_t v78 = 0;
  }
  uint64_t v79 = (char *)(v78 + v77);
  v74[v78] = BYTE1(a2);
  v72 = &v74[v78 + 1];
  if (v61 == (unsigned char *)v73)
  {
    *a1 = (unint64_t)&v74[v78];
    a1[1] = (unint64_t)v72;
    a1[2] = (unint64_t)v79;
LABEL_126:
    operator delete(v61);
    goto LABEL_127;
  }
  double v80 = &v61[~v73];
  do
  {
    char v81 = *--v61;
    (v80--)[v78] = v81;
  }
  while (v61 != (unsigned char *)v73);
  v61 = (unsigned char *)*a1;
  *a1 = v78;
  a1[1] = (unint64_t)v72;
  a1[2] = (unint64_t)v79;
  if (v61) {
    goto LABEL_126;
  }
LABEL_127:
  a1[1] = (unint64_t)v72;
  unint64_t v82 = a1[2];
  if ((unint64_t)v72 < v82)
  {
    unsigned char *v72 = LOBYTE(a2);
    uint64_t v83 = (uint64_t)(v72 + 1);
    goto LABEL_145;
  }
  unint64_t v84 = *a1;
  uint64_t v85 = &v72[-*a1];
  unint64_t v86 = (unint64_t)(v85 + 1);
  if ((uint64_t)(v85 + 1) < 0) {
LABEL_146:
  }
    std::vector<float>::__throw_length_error[abi:ne180100]();
  unint64_t v87 = v82 - v84;
  if (2 * v87 > v86) {
    unint64_t v86 = 2 * v87;
  }
  if (v87 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v88 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v88 = v86;
  }
  if (v88) {
    unint64_t v89 = (unint64_t)operator new(v88);
  }
  else {
    unint64_t v89 = 0;
  }
  BOOL v90 = (char *)(v89 + v88);
  v85[v89] = LOBYTE(a2);
  uint64_t v83 = (uint64_t)&v85[v89 + 1];
  if (v72 == (unsigned char *)v84)
  {
    *a1 = (unint64_t)&v85[v89];
    a1[1] = v83;
    a1[2] = (unint64_t)v90;
LABEL_144:
    operator delete(v72);
    goto LABEL_145;
  }
  char v91 = &v72[~v84];
  do
  {
    char v92 = *--v72;
    (v91--)[v89] = v92;
  }
  while (v72 != (unsigned char *)v84);
  v72 = (unsigned char *)*a1;
  *a1 = v89;
  a1[1] = v83;
  a1[2] = (unint64_t)v90;
  if (v72) {
    goto LABEL_144;
  }
LABEL_145:
  a1[1] = v83;
}

BOOL anonymous namespace'::encode_bytes(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unint64_t *a4)
{
  unint64_t v8 = *(void *)(a1 + 8) - *(void *)a1;
  if (result)
  {
    unint64_t v10 = *(void *)a3 + v8;
    if (v10 <= (unint64_t)a4)
    {
      uint64_t v11 = *(void *)(a1 + 8);
      if (v11 != *(void *)a1)
      {
        memmove((void *)(a2 + *(void *)a3), *(const void **)a1, v11 - *(void *)a1);
        unint64_t v10 = *(void *)a3 + v8;
      }
      *(void *)a3 = v10;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void anonymous namespace'::encode_format_ids(int **a1, unint64_t *a2)
{
  unint64_t v4 = *a1;
  char v5 = a1[1];
  if (*a1 != v5)
  {
    unint64_t v6 = (unsigned char *)a2[1];
    while (1)
    {
      int v7 = *v4;
      unint64_t v8 = a2[2];
      if ((unint64_t)v6 >= v8)
      {
        unint64_t v10 = *a2;
        uint64_t v11 = &v6[-*a2];
        unint64_t v12 = (unint64_t)(v11 + 1);
        if ((uint64_t)(v11 + 1) < 0) {
          goto LABEL_76;
        }
        unint64_t v13 = v8 - v10;
        if (2 * v13 > v12) {
          unint64_t v12 = 2 * v13;
        }
        if (v13 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v14 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v14 = v12;
        }
        if (v14) {
          char v15 = (char *)operator new(v14);
        }
        else {
          char v15 = 0;
        }
        unint64_t v16 = &v11[(void)v15];
        char v17 = &v11[(void)v15];
        unsigned char *v17 = HIBYTE(v7);
        unint64_t v9 = v17 + 1;
        if (v6 != (unsigned char *)v10)
        {
          unint64_t v18 = &v6[~v10];
          do
          {
            char v19 = *--v6;
            (v18--)[(void)v15] = v19;
          }
          while (v6 != (unsigned char *)v10);
          unint64_t v6 = (unsigned char *)*a2;
          unint64_t v16 = v15;
        }
        *a2 = (unint64_t)v16;
        a2[1] = (unint64_t)v9;
        a2[2] = (unint64_t)&v15[v14];
        if (v6) {
          operator delete(v6);
        }
      }
      else
      {
        *unint64_t v6 = HIBYTE(v7);
        unint64_t v9 = v6 + 1;
      }
      a2[1] = (unint64_t)v9;
      unint64_t v20 = a2[2];
      if ((unint64_t)v9 < v20)
      {
        *unint64_t v9 = BYTE2(v7);
        unint64_t v21 = v9 + 1;
        goto LABEL_38;
      }
      unint64_t v22 = *a2;
      unint64_t v23 = &v9[-*a2];
      unint64_t v24 = (unint64_t)(v23 + 1);
      if ((uint64_t)(v23 + 1) < 0) {
        goto LABEL_76;
      }
      unint64_t v25 = v20 - v22;
      if (2 * v25 > v24) {
        unint64_t v24 = 2 * v25;
      }
      size_t v26 = v25 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v24;
      unint64_t v27 = v26 ? (unint64_t)operator new(v26) : 0;
      __int16 v28 = (char *)(v27 + v26);
      v23[v27] = BYTE2(v7);
      unint64_t v21 = &v23[v27 + 1];
      if (v9 == (unsigned char *)v22) {
        break;
      }
      unint64_t v29 = &v9[~v22];
      do
      {
        char v30 = *--v9;
        (v29--)[v27] = v30;
      }
      while (v9 != (unsigned char *)v22);
      unint64_t v9 = (unsigned char *)*a2;
      *a2 = v27;
      a2[1] = (unint64_t)v21;
      a2[2] = (unint64_t)v28;
      if (v9) {
        goto LABEL_37;
      }
LABEL_38:
      a2[1] = (unint64_t)v21;
      unint64_t v31 = a2[2];
      if ((unint64_t)v21 < v31)
      {
        *unint64_t v21 = BYTE1(v7);
        unint64_t v32 = v21 + 1;
        goto LABEL_56;
      }
      unint64_t v33 = *a2;
      unint64_t v34 = &v21[-*a2];
      unint64_t v35 = (unint64_t)(v34 + 1);
      if ((uint64_t)(v34 + 1) < 0) {
        goto LABEL_76;
      }
      unint64_t v36 = v31 - v33;
      if (2 * v36 > v35) {
        unint64_t v35 = 2 * v36;
      }
      if (v36 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v37 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v37 = v35;
      }
      if (v37) {
        unint64_t v38 = (unint64_t)operator new(v37);
      }
      else {
        unint64_t v38 = 0;
      }
      uint64_t v39 = (char *)(v38 + v37);
      v34[v38] = BYTE1(v7);
      unint64_t v32 = &v34[v38 + 1];
      if (v21 == (unsigned char *)v33)
      {
        *a2 = (unint64_t)&v34[v38];
        a2[1] = (unint64_t)v32;
        a2[2] = (unint64_t)v39;
LABEL_55:
        operator delete(v21);
        goto LABEL_56;
      }
      unint64_t v40 = &v21[~v33];
      do
      {
        char v41 = *--v21;
        (v40--)[v38] = v41;
      }
      while (v21 != (unsigned char *)v33);
      unint64_t v21 = (unsigned char *)*a2;
      *a2 = v38;
      a2[1] = (unint64_t)v32;
      a2[2] = (unint64_t)v39;
      if (v21) {
        goto LABEL_55;
      }
LABEL_56:
      a2[1] = (unint64_t)v32;
      unint64_t v42 = a2[2];
      if ((unint64_t)v32 >= v42)
      {
        unint64_t v43 = *a2;
        size_t v44 = &v32[-*a2];
        unint64_t v45 = (unint64_t)(v44 + 1);
        if ((uint64_t)(v44 + 1) < 0) {
LABEL_76:
        }
          std::vector<float>::__throw_length_error[abi:ne180100]();
        unint64_t v46 = v42 - v43;
        if (2 * v46 > v45) {
          unint64_t v45 = 2 * v46;
        }
        if (v46 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v47 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v47 = v45;
        }
        if (v47) {
          unint64_t v48 = (unint64_t)operator new(v47);
        }
        else {
          unint64_t v48 = 0;
        }
        unint64_t v49 = (char *)(v48 + v47);
        v44[v48] = v7;
        unint64_t v6 = &v44[v48 + 1];
        if (v32 == (unsigned char *)v43)
        {
          *a2 = (unint64_t)&v44[v48];
          a2[1] = (unint64_t)v6;
          a2[2] = (unint64_t)v49;
        }
        else
        {
          v50 = &v32[~v43];
          do
          {
            char v51 = *--v32;
            (v50--)[v48] = v51;
          }
          while (v32 != (unsigned char *)v43);
          unint64_t v32 = (unsigned char *)*a2;
          *a2 = v48;
          a2[1] = (unint64_t)v6;
          a2[2] = (unint64_t)v49;
          if (!v32) {
            goto LABEL_74;
          }
        }
        operator delete(v32);
      }
      else
      {
        *unint64_t v32 = v7;
        unint64_t v6 = v32 + 1;
      }
LABEL_74:
      a2[1] = (unint64_t)v6;
      if (++v4 == v5) {
        return;
      }
    }
    *a2 = (unint64_t)&v23[v27];
    a2[1] = (unint64_t)v21;
    a2[2] = (unint64_t)v28;
LABEL_37:
    operator delete(v9);
    goto LABEL_38;
  }
}

void anonymous namespace'::encode_string(uint64_t a1, unint64_t *a2)
{
  if (*(char *)(a1 + 23) >= 0) {
    unint64_t v4 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    unint64_t v4 = *(void *)(a1 + 8);
  }
  uint64_t v5 = *(unsigned __int8 *)(a1 + 23);
  if ((v5 & 0x80u) == 0) {
    unint64_t v6 = (char *)a1;
  }
  else {
    unint64_t v6 = *(char **)a1;
  }
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a1 + 8);
  }
  if (v5)
  {
    int v7 = &v6[v5];
    unint64_t v8 = (unsigned char *)a2[1];
    do
    {
      char v9 = *v6;
      unint64_t v10 = a2[2];
      if ((unint64_t)v8 >= v10)
      {
        unint64_t v12 = *a2;
        unint64_t v13 = &v8[-*a2];
        unint64_t v14 = (unint64_t)(v13 + 1);
        if ((uint64_t)(v13 + 1) < 0) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v15 = v10 - v12;
        if (2 * v15 > v14) {
          unint64_t v14 = 2 * v15;
        }
        if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v16 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v16 = v14;
        }
        if (v16) {
          char v17 = (char *)operator new(v16);
        }
        else {
          char v17 = 0;
        }
        unint64_t v18 = &v13[(void)v17];
        char v19 = &v13[(void)v17];
        unsigned char *v19 = v9;
        uint64_t v11 = v19 + 1;
        if (v8 != (unsigned char *)v12)
        {
          unint64_t v20 = &v8[~v12];
          do
          {
            char v21 = *--v8;
            (v20--)[(void)v17] = v21;
          }
          while (v8 != (unsigned char *)v12);
          unint64_t v8 = (unsigned char *)*a2;
          unint64_t v18 = v17;
        }
        *a2 = (unint64_t)v18;
        a2[1] = (unint64_t)v11;
        a2[2] = (unint64_t)&v17[v16];
        if (v8) {
          operator delete(v8);
        }
      }
      else
      {
        *unint64_t v8 = v9;
        uint64_t v11 = v8 + 1;
      }
      a2[1] = (unint64_t)v11;
      ++v6;
      unint64_t v8 = v11;
    }
    while (v6 != v7);
  }
}

void anonymous namespace'::encode_format_id(int a1, unint64_t *a2)
{
  uint64_t v5 = (unsigned char *)a2[1];
  unint64_t v4 = a2[2];
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v7 = *a2;
    unint64_t v8 = &v5[-*a2];
    unint64_t v9 = (unint64_t)(v8 + 1);
    if ((uint64_t)(v8 + 1) < 0) {
      goto LABEL_74;
    }
    unint64_t v10 = v4 - v7;
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v9;
    }
    if (v11) {
      unint64_t v12 = (unint64_t)operator new(v11);
    }
    else {
      unint64_t v12 = 0;
    }
    unint64_t v13 = (char *)(v12 + v11);
    v8[v12] = HIBYTE(a1);
    unint64_t v6 = &v8[v12 + 1];
    if (v5 == (unsigned char *)v7)
    {
      v12 += (unint64_t)v8;
    }
    else
    {
      unint64_t v14 = &v5[~v7];
      do
      {
        char v15 = *--v5;
        (v14--)[v12] = v15;
      }
      while (v5 != (unsigned char *)v7);
      uint64_t v5 = (unsigned char *)*a2;
    }
    *a2 = v12;
    a2[1] = (unint64_t)v6;
    a2[2] = (unint64_t)v13;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    unsigned char *v5 = HIBYTE(a1);
    unint64_t v6 = v5 + 1;
  }
  a2[1] = (unint64_t)v6;
  unint64_t v16 = a2[2];
  if ((unint64_t)v6 < v16)
  {
    *unint64_t v6 = BYTE2(a1);
    char v17 = v6 + 1;
    goto LABEL_37;
  }
  unint64_t v18 = *a2;
  char v19 = &v6[-*a2];
  unint64_t v20 = (unint64_t)(v19 + 1);
  if ((uint64_t)(v19 + 1) < 0) {
    goto LABEL_74;
  }
  unint64_t v21 = v16 - v18;
  if (2 * v21 > v20) {
    unint64_t v20 = 2 * v21;
  }
  if (v21 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v22 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v22 = v20;
  }
  if (v22) {
    unint64_t v23 = (unint64_t)operator new(v22);
  }
  else {
    unint64_t v23 = 0;
  }
  unint64_t v24 = (char *)(v23 + v22);
  v19[v23] = BYTE2(a1);
  char v17 = &v19[v23 + 1];
  if (v6 == (unsigned char *)v18)
  {
    *a2 = (unint64_t)&v19[v23];
    a2[1] = (unint64_t)v17;
    a2[2] = (unint64_t)v24;
LABEL_36:
    operator delete(v6);
    goto LABEL_37;
  }
  unint64_t v25 = &v6[~v18];
  do
  {
    char v26 = *--v6;
    (v25--)[v23] = v26;
  }
  while (v6 != (unsigned char *)v18);
  unint64_t v6 = (unsigned char *)*a2;
  *a2 = v23;
  a2[1] = (unint64_t)v17;
  a2[2] = (unint64_t)v24;
  if (v6) {
    goto LABEL_36;
  }
LABEL_37:
  a2[1] = (unint64_t)v17;
  unint64_t v27 = a2[2];
  if ((unint64_t)v17 < v27)
  {
    unsigned char *v17 = BYTE1(a1);
    __int16 v28 = v17 + 1;
    goto LABEL_55;
  }
  unint64_t v29 = *a2;
  char v30 = &v17[-*a2];
  unint64_t v31 = (unint64_t)(v30 + 1);
  if ((uint64_t)(v30 + 1) < 0) {
    goto LABEL_74;
  }
  unint64_t v32 = v27 - v29;
  if (2 * v32 > v31) {
    unint64_t v31 = 2 * v32;
  }
  if (v32 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v33 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v33 = v31;
  }
  if (v33) {
    unint64_t v34 = (unint64_t)operator new(v33);
  }
  else {
    unint64_t v34 = 0;
  }
  unint64_t v35 = (char *)(v34 + v33);
  v30[v34] = BYTE1(a1);
  __int16 v28 = &v30[v34 + 1];
  if (v17 == (unsigned char *)v29)
  {
    *a2 = (unint64_t)&v30[v34];
    a2[1] = (unint64_t)v28;
    a2[2] = (unint64_t)v35;
LABEL_54:
    operator delete(v17);
    goto LABEL_55;
  }
  unint64_t v36 = &v17[~v29];
  do
  {
    char v37 = *--v17;
    (v36--)[v34] = v37;
  }
  while (v17 != (unsigned char *)v29);
  char v17 = (unsigned char *)*a2;
  *a2 = v34;
  a2[1] = (unint64_t)v28;
  a2[2] = (unint64_t)v35;
  if (v17) {
    goto LABEL_54;
  }
LABEL_55:
  a2[1] = (unint64_t)v28;
  unint64_t v38 = a2[2];
  if ((unint64_t)v28 < v38)
  {
    *__int16 v28 = a1;
    uint64_t v39 = (uint64_t)(v28 + 1);
    goto LABEL_73;
  }
  unint64_t v40 = *a2;
  char v41 = &v28[-*a2];
  unint64_t v42 = (unint64_t)(v41 + 1);
  if ((uint64_t)(v41 + 1) < 0) {
LABEL_74:
  }
    std::vector<float>::__throw_length_error[abi:ne180100]();
  unint64_t v43 = v38 - v40;
  if (2 * v43 > v42) {
    unint64_t v42 = 2 * v43;
  }
  if (v43 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v44 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v44 = v42;
  }
  if (v44) {
    unint64_t v45 = (unint64_t)operator new(v44);
  }
  else {
    unint64_t v45 = 0;
  }
  unint64_t v46 = (char *)(v45 + v44);
  v41[v45] = a1;
  uint64_t v39 = (uint64_t)&v41[v45 + 1];
  if (v28 == (unsigned char *)v40)
  {
    *a2 = (unint64_t)&v41[v45];
    a2[1] = v39;
    a2[2] = (unint64_t)v46;
LABEL_72:
    operator delete(v28);
    goto LABEL_73;
  }
  size_t v47 = &v28[~v40];
  do
  {
    char v48 = *--v28;
    (v47--)[v45] = v48;
  }
  while (v28 != (unsigned char *)v40);
  __int16 v28 = (unsigned char *)*a2;
  *a2 = v45;
  a2[1] = v39;
  a2[2] = (unint64_t)v46;
  if (v28) {
    goto LABEL_72;
  }
LABEL_73:
  a2[1] = v39;
}

uint64_t anonymous namespace'::encode_track_uids(uint64_t a1, int a2, uint64_t a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t v5 = *(void **)(a1 + 120);
  uint64_t v85 = (void *)(a1 + 128);
  if (v5 != (void *)(a1 + 128))
  {
    int v9 = a2;
    while (1)
    {
      if (v9 == 2)
      {
        unint64_t v10 = *a4;
        unint64_t v11 = *a4 + 1;
        if (v11 > (unint64_t)a5) {
          return 0;
        }
        char v12 = *((unsigned char *)v5 + 40) << 6;
        *a4 = v11;
        *(unsigned char *)(a3 + v10) = v12;
      }
      if (!result) {
        return result;
      }
      if (*((unsigned char *)v5 + 40) == 2)
      {
          return 0;
        goto LABEL_147;
      }
      uint64_t v14 = v5[6];
      unint64_t v89 = 0;
      BOOL v90 = 0;
      size_t v88 = 0;
      char v15 = *(void **)(v14 + 12);
      if (v15 && *v15)
      {
        std::string::basic_string[abi:ne180100]<0>(v92, "AT_");
        std::string::basic_string[abi:ne180100]<0>(&__p, **(char ***)(v14 + 12));
        BOOL v18 = v17 != 0;
        if (v17) {
          unint64_t v19 = v16;
        }
        else {
          unint64_t v19 = 0;
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v93 < 0) {
          operator delete(v92[0]);
        }
      }
      else
      {
        unint64_t v19 = 0;
        BOOL v18 = 0;
      }
      unint64_t v20 = *(void **)(v14 + 20);
      if (v20 && *v20)
      {
        std::string::basic_string[abi:ne180100]<0>(v92, "AC_");
        std::string::basic_string[abi:ne180100]<0>(&__p, **(char ***)(v14 + 20));
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v93 < 0) {
          operator delete(v92[0]);
        }
        int v87 = BYTE4(v84);
      }
      else
      {
        LODWORD(v84) = 0;
        int v87 = 0;
      }
      unint64_t v21 = *(void **)(v14 + 28);
      if (v21 && *v21)
      {
        std::string::basic_string[abi:ne180100]<0>(v92, "AP_");
        std::string::basic_string[abi:ne180100]<0>(&__p, **(char ***)(v14 + 28));
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v93 < 0) {
          operator delete(v92[0]);
        }
        int v86 = BYTE4(v83);
      }
      else
      {
        LODWORD(v83) = 0;
        int v86 = 0;
      }
      float v22 = *(float *)(v14 + 8);
      int v23 = *(_DWORD *)(v14 + 36);
      unint64_t v24 = (char *)operator new(1uLL);
      if (v23) {
        char v25 = ((v22 != 0.0) << 7) | 0x40;
      }
      else {
        char v25 = (v22 != 0.0) << 7;
      }
      if (v18) {
        v25 |= 0x20u;
      }
      if (v87) {
        v25 |= 0x10u;
      }
      if (v86) {
        v25 += 8;
      }
      *unint64_t v24 = v25;
      unint64_t v89 = v24 + 1;
      BOOL v90 = v24 + 1;
      size_t v88 = v24;
      if (v22 != 0.0)
      {
        int v23 = *(_DWORD *)(v14 + 36);
      }
      if (v23) {
      if (v18)
      }
        break;
LABEL_140:
      if (v87) {
      if (v86)
      }
      if (v88) {
        operator delete(v88);
      }
      if (!v78) {
        return 0;
      }
LABEL_147:
      uint64_t v79 = (void *)v5[1];
      if (v79)
      {
        do
        {
          double v80 = v79;
          uint64_t v79 = (void *)*v79;
        }
        while (v79);
      }
      else
      {
        do
        {
          double v80 = (void *)v5[2];
          BOOL v81 = *v80 == (void)v5;
          uint64_t v5 = v80;
        }
        while (!v81);
      }
      uint64_t v5 = v80;
      if (v80 == v85) {
        return 1;
      }
    }
    char v26 = v89;
    unint64_t v27 = v90;
    if (v89 >= v90)
    {
      unint64_t v29 = (unint64_t)v88;
      uint64_t v30 = v89 - (unsigned char *)v88;
      uint64_t v31 = v89 - (unsigned char *)v88 + 1;
      if (v31 < 0) {
        goto LABEL_156;
      }
      if (2 * (v90 - (unsigned char *)v88) > (unint64_t)v31) {
        uint64_t v31 = 2 * (v90 - (unsigned char *)v88);
      }
      if ((unint64_t)(v90 - (unsigned char *)v88) >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v32 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v32 = v31;
      }
      if (v32) {
        size_t v33 = (char *)operator new(v32);
      }
      else {
        size_t v33 = 0;
      }
      unint64_t v34 = &v33[v30];
      unint64_t v35 = &v33[v30];
      *unint64_t v35 = BYTE3(v19);
      __int16 v28 = v35 + 1;
      if (v26 != (char *)v29)
      {
        unint64_t v36 = &v26[~v29];
        do
        {
          char v37 = *--v26;
          (v36--)[(void)v33] = v37;
        }
        while (v26 != (char *)v29);
        char v26 = (char *)v88;
        unint64_t v34 = v33;
      }
      unint64_t v27 = &v33[v32];
      size_t v88 = v34;
      BOOL v90 = &v33[v32];
      if (v26) {
        operator delete(v26);
      }
    }
    else
    {
      *unint64_t v89 = BYTE3(v19);
      __int16 v28 = v26 + 1;
    }
    unint64_t v89 = v28;
    if (v28 < v27)
    {
      *__int16 v28 = BYTE2(v19);
      unint64_t v38 = v28 + 1;
      goto LABEL_85;
    }
    unint64_t v39 = (unint64_t)v88;
    uint64_t v40 = v28 - (unsigned char *)v88;
    uint64_t v41 = v28 - (unsigned char *)v88 + 1;
    if (v41 < 0) {
      goto LABEL_156;
    }
    if (2 * (v27 - (unsigned char *)v88) > (unint64_t)v41) {
      uint64_t v41 = 2 * (v27 - (unsigned char *)v88);
    }
    if ((unint64_t)(v27 - (unsigned char *)v88) >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v42 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v42 = v41;
    }
    if (v42) {
      unint64_t v43 = operator new(v42);
    }
    else {
      unint64_t v43 = 0;
    }
    size_t v44 = (char *)v43 + v40;
    unint64_t v27 = (char *)v43 + v42;
    unint64_t v45 = (char *)v43 + v40;
    *unint64_t v45 = BYTE2(v19);
    unint64_t v38 = v45 + 1;
    if (v28 == (char *)v39)
    {
      size_t v88 = v44;
      unint64_t v89 = v38;
      BOOL v90 = (char *)v43 + v42;
    }
    else
    {
      unint64_t v46 = &v28[~v39];
      do
      {
        char v47 = *--v28;
        (v46--)[(void)v43] = v47;
      }
      while (v28 != (char *)v39);
      __int16 v28 = (char *)v88;
      size_t v88 = v43;
      unint64_t v89 = v38;
      BOOL v90 = (char *)v43 + v42;
      if (!v28)
      {
LABEL_85:
        unint64_t v89 = v38;
        if (v38 < v27)
        {
          *unint64_t v38 = BYTE1(v19);
          char v48 = v38 + 1;
          int v9 = a2;
          goto LABEL_103;
        }
        unint64_t v49 = (unint64_t)v88;
        uint64_t v50 = v38 - (unsigned char *)v88;
        uint64_t v51 = v38 - (unsigned char *)v88 + 1;
        if (v51 < 0) {
          goto LABEL_156;
        }
        if (2 * (v27 - (unsigned char *)v88) > (unint64_t)v51) {
          uint64_t v51 = 2 * (v27 - (unsigned char *)v88);
        }
        if ((unint64_t)(v27 - (unsigned char *)v88) >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v52 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v52 = v51;
        }
        if (v52) {
          unint64_t v53 = operator new(v52);
        }
        else {
          unint64_t v53 = 0;
        }
        int v9 = a2;
        unint64_t v54 = (char *)v53 + v50;
        size_t v55 = (char *)v53 + v50;
        unsigned char *v55 = BYTE1(v19);
        char v48 = v55 + 1;
        if (v38 == (char *)v49)
        {
          size_t v88 = v54;
          unint64_t v89 = v48;
          BOOL v90 = (char *)v53 + v52;
        }
        else
        {
          unint64_t v56 = &v38[~v49];
          do
          {
            char v57 = *--v38;
            (v56--)[(void)v53] = v57;
          }
          while (v38 != (char *)v49);
          unint64_t v38 = (char *)v88;
          size_t v88 = v53;
          unint64_t v89 = v48;
          BOOL v90 = (char *)v53 + v52;
          if (!v38)
          {
LABEL_103:
            unint64_t v89 = v48;
            if (v48 < v90)
            {
              *char v48 = v19;
              v58 = v48 + 1;
              goto LABEL_121;
            }
            unint64_t v59 = (unint64_t)v88;
            uint64_t v60 = v48 - (unsigned char *)v88;
            uint64_t v61 = v48 - (unsigned char *)v88 + 1;
            if (v61 < 0) {
              goto LABEL_156;
            }
            unint64_t v62 = v90 - (unsigned char *)v88;
            if (2 * (v90 - (unsigned char *)v88) > (unint64_t)v61) {
              uint64_t v61 = 2 * v62;
            }
            if (v62 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v63 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v63 = v61;
            }
            if (v63) {
              unint64_t v64 = operator new(v63);
            }
            else {
              unint64_t v64 = 0;
            }
            unint64_t v65 = (char *)v64 + v63;
            *((unsigned char *)v64 + v60) = v19;
            v58 = (char *)v64 + v60 + 1;
            if (v48 == (char *)v59)
            {
              size_t v88 = (char *)v64 + v60;
              unint64_t v89 = (char *)v64 + v60 + 1;
              BOOL v90 = v65;
            }
            else
            {
              size_t v66 = &v48[~v59];
              do
              {
                char v67 = *--v48;
                (v66--)[(void)v64] = v67;
              }
              while (v48 != (char *)v59);
              char v48 = (char *)v88;
              size_t v88 = v64;
              unint64_t v89 = (char *)v64 + v60 + 1;
              BOOL v90 = v65;
              if (!v48)
              {
LABEL_121:
                unint64_t v89 = v58;
                if (v58 >= v90)
                {
                  unint64_t v69 = (unint64_t)v88;
                  uint64_t v70 = v58 - (unsigned char *)v88;
                  uint64_t v71 = v58 - (unsigned char *)v88 + 1;
                  if (v71 < 0) {
LABEL_156:
                  }
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  unint64_t v72 = v90 - (unsigned char *)v88;
                  if (2 * (v90 - (unsigned char *)v88) > (unint64_t)v71) {
                    uint64_t v71 = 2 * v72;
                  }
                  if (v72 >= 0x3FFFFFFFFFFFFFFFLL) {
                    size_t v73 = 0x7FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    size_t v73 = v71;
                  }
                  if (v73) {
                    uint64_t v74 = operator new(v73);
                  }
                  else {
                    uint64_t v74 = 0;
                  }
                  unint64_t v75 = (char *)v74 + v73;
                  *((unsigned char *)v74 + v70) = BYTE4(v19);
                  uint64_t v68 = (uint64_t)v74 + v70 + 1;
                  if (v58 == (char *)v69)
                  {
                    size_t v88 = (char *)v74 + v70;
                    unint64_t v89 = (char *)v74 + v70 + 1;
                    BOOL v90 = v75;
                  }
                  else
                  {
                    unint64_t v76 = &v58[~v69];
                    do
                    {
                      char v77 = *--v58;
                      (v76--)[(void)v74] = v77;
                    }
                    while (v58 != (char *)v69);
                    v58 = (char *)v88;
                    size_t v88 = v74;
                    unint64_t v89 = (char *)v74 + v70 + 1;
                    BOOL v90 = v75;
                    if (!v58) {
                      goto LABEL_139;
                    }
                  }
                  operator delete(v58);
                }
                else
                {
                  char *v58 = BYTE4(v19);
                  uint64_t v68 = (uint64_t)(v58 + 1);
                }
LABEL_139:
                unint64_t v89 = (char *)v68;
                goto LABEL_140;
              }
            }
            operator delete(v48);
            goto LABEL_121;
          }
        }
        operator delete(v38);
        goto LABEL_103;
      }
    }
    operator delete(v28);
    unint64_t v27 = v90;
    goto LABEL_85;
  }
  return 1;
}

void sub_18FF3D400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::encode_pack_formats(uint64_t a1, int a2, uint64_t a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t v5 = *(void **)(a1 + 144);
  BOOL v127 = (void *)(a1 + 152);
  if (v5 == (void *)(a1 + 152)) {
    return 1;
  }
  while (1)
  {
    if (a2 == 2)
    {
      unint64_t v6 = *a4;
      unint64_t v7 = *a4 + 1;
      if (v7 > (unint64_t)a5) {
        return 0;
      }
      char v8 = *((unsigned char *)v5 + 40) << 6;
      *a4 = v7;
      *(unsigned char *)(a3 + v6) = v8;
    }
    if (!result) {
      return result;
    }
    if (*((unsigned char *)v5 + 40) == 2)
    {
        return 0;
    }
    else
    {
      uint64_t v10 = v5[6];
      v133 = 0;
      v134 = 0;
      char v132 = 0;
      char v11 = 32 * v145;
      char v12 = v133;
      if (v133 >= v134)
      {
        unint64_t v14 = (unint64_t)v132;
        uint64_t v15 = v133 - (unsigned char *)v132;
        uint64_t v16 = v133 - (unsigned char *)v132 + 1;
        if (v16 < 0) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v17 = v134 - (unsigned char *)v132;
        if (2 * (v134 - (unsigned char *)v132) > (unint64_t)v16) {
          uint64_t v16 = 2 * v17;
        }
        if (v17 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v18 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v18 = v16;
        }
        if (v18) {
          unint64_t v19 = (char *)operator new(v18);
        }
        else {
          unint64_t v19 = 0;
        }
        unint64_t v20 = &v19[v15];
        v19[v15] = v11;
        uint64_t v13 = (uint64_t)&v19[v15 + 1];
        if (v12 != (char *)v14)
        {
          unint64_t v21 = &v12[~v14];
          do
          {
            char v22 = *--v12;
            (v21--)[(void)v19] = v22;
          }
          while (v12 != (char *)v14);
          char v12 = (char *)v132;
          unint64_t v20 = v19;
        }
        char v132 = v20;
        v134 = &v19[v18];
        if (v12) {
          operator delete(v12);
        }
      }
      else
      {
        char *v133 = v11;
        uint64_t v13 = (uint64_t)(v12 + 1);
      }
      v133 = (char *)v13;
      if (!v145) {
      BOOL v141 = 0;
      }
      v142 = 0;
      unint64_t v143 = 0;
      if (*(_DWORD *)(v10 + 28))
      {
        int v23 = 0;
        unint64_t v24 = 0;
        unint64_t v25 = 0;
        unint64_t v26 = 0;
        do
        {
          unint64_t v27 = *(char ***)(*(void *)(v10 + 32) + 8 * v26);
          std::string::basic_string[abi:ne180100]<0>(&v138, "AC_");
          std::string::basic_string[abi:ne180100]<0>(&__p, *v27);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v140) < 0) {
            operator delete(v138);
          }
          if (HIDWORD(v28))
          {
            if ((unint64_t)v23 >= v25)
            {
              uint64_t v30 = v23 - v24;
              unint64_t v31 = v30 + 1;
              if ((unint64_t)(v30 + 1) >> 62)
              {
                unint64_t v143 = v25;
                BOOL v141 = v24;
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              if ((uint64_t)(v25 - (void)v24) >> 1 > v31) {
                unint64_t v31 = (uint64_t)(v25 - (void)v24) >> 1;
              }
              if (v25 - (unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v32 = v31;
              }
              if (v32) {
                unint64_t v32 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v32);
              }
              else {
                uint64_t v33 = 0;
              }
              unint64_t v34 = (int *)(v32 + 4 * v30);
              int *v34 = v28;
              unint64_t v29 = v34 + 1;
              while (v23 != v24)
              {
                int v35 = *--v23;
                *--unint64_t v34 = v35;
              }
              unint64_t v25 = v32 + 4 * v33;
              v142 = v29;
              if (v24) {
                operator delete(v24);
              }
              unint64_t v24 = v34;
            }
            else
            {
              *int v23 = v28;
              unint64_t v29 = v23 + 1;
            }
            v142 = v29;
            int v23 = v29;
          }
          ++v26;
        }
        while (v26 < *(unsigned int *)(v10 + 28));
        unint64_t v143 = v25;
        BOOL v141 = v24;
      }
      uint64_t v138 = 0;
      uint64_t v139 = 0;
      unint64_t v140 = 0;
      if (*(_DWORD *)(v10 + 40))
      {
        unint64_t v36 = 0;
        char v37 = 0;
        unint64_t v38 = 0;
        unint64_t v39 = 0;
        do
        {
          uint64_t v40 = *(char ***)(*(void *)(v10 + 44) + 8 * v39);
          std::string::basic_string[abi:ne180100]<0>(&__p, "AP_");
          std::string::basic_string[abi:ne180100]<0>(&v136, *v40);
          if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v136.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (HIDWORD(v41))
          {
            if ((unint64_t)v36 >= v38)
            {
              uint64_t v43 = (v36 - v37) >> 2;
              unint64_t v44 = v43 + 1;
              if ((unint64_t)(v43 + 1) >> 62)
              {
                unint64_t v140 = v38;
                uint64_t v138 = v37;
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              if ((uint64_t)(v38 - (void)v37) >> 1 > v44) {
                unint64_t v44 = (uint64_t)(v38 - (void)v37) >> 1;
              }
              if (v38 - (unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v45 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v45 = v44;
              }
              if (v45) {
                unint64_t v45 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v45);
              }
              else {
                uint64_t v46 = 0;
              }
              char v47 = (char *)(v45 + 4 * v43);
              *(_DWORD *)char v47 = v41;
              size_t v42 = v47 + 4;
              while (v36 != v37)
              {
                int v48 = *((_DWORD *)v36 - 1);
                v36 -= 4;
                *((_DWORD *)v47 - 1) = v48;
                v47 -= 4;
              }
              unint64_t v38 = v45 + 4 * v46;
              uint64_t v139 = v42;
              if (v37) {
                operator delete(v37);
              }
              char v37 = v47;
            }
            else
            {
              *(_DWORD *)unint64_t v36 = v41;
              size_t v42 = v36 + 4;
            }
            uint64_t v139 = v42;
            unint64_t v36 = v42;
          }
          ++v39;
        }
        while (v39 < *(unsigned int *)(v10 + 40));
        unint64_t v140 = v38;
        uint64_t v138 = v37;
      }
      unsigned int v49 = *(unsigned __int8 *)(v10 + 96);
      if (v49 >= 0xA) {
        LOBYTE(v49) = 10;
      }
      char v50 = (8 * v49) | ((*(float *)(v10 + 52) != 0.0) << 7);
      if (v145 == 2)
      {
        v58 = *(char ***)(v10 + 80);
        if (v58 && *v58)
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "AP_");
          std::string::basic_string[abi:ne180100]<0>(&v136, *v58);
          if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v136.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          int v126 = BYTE4(v124);
        }
        else
        {
          LODWORD(v124) = 0;
          int v126 = 0;
        }
        uint64_t v61 = *(char ***)(v10 + 88);
        if (v61 && *v61)
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "AP_");
          std::string::basic_string[abi:ne180100]<0>(&v136, *v61);
          if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v136.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          int v62 = BYTE4(v123);
        }
        else
        {
          LODWORD(v123) = 0;
          int v62 = 0;
        }
        char v63 = v50 | 4;
        if (!v126) {
          char v63 = v50;
        }
        if (v62) {
          char v64 = v63 | 2;
        }
        else {
          char v64 = v63;
        }
        unint64_t v65 = v133;
        int v125 = v62;
        if (v133 >= v134)
        {
          unint64_t v79 = (unint64_t)v132;
          uint64_t v80 = v133 - (unsigned char *)v132;
          uint64_t v81 = v133 - (unsigned char *)v132 + 1;
          if (v81 < 0) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v82 = v134 - (unsigned char *)v132;
          if (2 * (v134 - (unsigned char *)v132) > (unint64_t)v81) {
            uint64_t v81 = 2 * v82;
          }
          if (v82 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v83 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v83 = v81;
          }
          if (v83) {
            uint64_t v84 = (char *)operator new(v83);
          }
          else {
            uint64_t v84 = 0;
          }
          char v91 = &v84[v80];
          v84[v80] = v64;
          uint64_t v66 = (uint64_t)&v84[v80 + 1];
          if (v65 != (char *)v79)
          {
            char v92 = &v65[~v79];
            do
            {
              char v93 = *--v65;
              (v92--)[(void)v84] = v93;
            }
            while (v65 != (char *)v79);
            unint64_t v65 = (char *)v132;
            char v91 = v84;
          }
          char v132 = v91;
          v134 = &v84[v83];
          int v62 = v125;
          if (v65) {
            operator delete(v65);
          }
        }
        else
        {
          char *v133 = v64;
          uint64_t v66 = (uint64_t)(v65 + 1);
        }
        v133 = (char *)v66;
        memset(&__p, 0, sizeof(__p));
        if (*(_DWORD *)(v10 + 56))
        {
          v94 = 0;
          v95 = 0;
          std::string::size_type v96 = 0;
          unint64_t v97 = 0;
          do
          {
            v98 = *(char ***)(*(void *)(v10 + 60) + 8 * v97);
            std::string::basic_string[abi:ne180100]<0>(&v136, "AP_");
            std::string::basic_string[abi:ne180100]<0>(&v135, *v98);
            if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v135.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v136.__r_.__value_.__l.__data_);
            }
            if (HIDWORD(v99))
            {
              if ((unint64_t)v94 >= v96)
              {
                uint64_t v101 = v94 - v95;
                unint64_t v102 = v101 + 1;
                if ((unint64_t)(v101 + 1) >> 62)
                {
                  __p.__r_.__value_.__r.__words[2] = v96;
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v95;
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                if ((uint64_t)(v96 - (void)v95) >> 1 > v102) {
                  unint64_t v102 = (uint64_t)(v96 - (void)v95) >> 1;
                }
                if (v96 - (unint64_t)v95 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v103 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v103 = v102;
                }
                if (v103) {
                  unint64_t v103 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v103);
                }
                else {
                  uint64_t v104 = 0;
                }
                v105 = (_DWORD *)(v103 + 4 * v101);
                _DWORD *v105 = v99;
                std::string::size_type v100 = (std::string::size_type)(v105 + 1);
                while (v94 != v95)
                {
                  int v106 = *--v94;
                  *--v105 = v106;
                }
                std::string::size_type v96 = v103 + 4 * v104;
                __p.__r_.__value_.__l.__size_ = v100;
                if (v95) {
                  operator delete(v95);
                }
                v95 = v105;
              }
              else
              {
                _DWORD *v94 = v99;
                std::string::size_type v100 = (std::string::size_type)(v94 + 1);
              }
              __p.__r_.__value_.__l.__size_ = v100;
              v94 = (_DWORD *)v100;
            }
            ++v97;
          }
          while (v97 < *(unsigned int *)(v10 + 56));
          __p.__r_.__value_.__r.__words[2] = v96;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v95;
          int v62 = v125;
        }
        else
        {
          std::string::size_type v96 = 0;
          v95 = 0;
        }
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v95;
        if (*(_DWORD *)(v10 + 68))
        {
          unint64_t v107 = 0;
          unint64_t v108 = v95;
          do
          {
            v109 = *(char ***)(*(void *)(v10 + 72) + 8 * v107);
            std::string::basic_string[abi:ne180100]<0>(&v136, "AP_");
            std::string::basic_string[abi:ne180100]<0>(&v135, *v109);
            if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v135.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v136.__r_.__value_.__l.__data_);
            }
            if (HIDWORD(v110))
            {
              if ((unint64_t)v95 >= v96)
              {
                uint64_t v112 = ((char *)v95 - v108) >> 2;
                unint64_t v113 = v112 + 1;
                if ((unint64_t)(v112 + 1) >> 62)
                {
                  __p.__r_.__value_.__r.__words[2] = v96;
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v108;
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                if ((uint64_t)(v96 - (void)v108) >> 1 > v113) {
                  unint64_t v113 = (uint64_t)(v96 - (void)v108) >> 1;
                }
                if (v96 - (unint64_t)v108 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v114 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v114 = v113;
                }
                if (v114) {
                  unint64_t v114 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v114);
                }
                else {
                  uint64_t v115 = 0;
                }
                v116 = (_DWORD *)(v114 + 4 * v112);
                _DWORD *v116 = v110;
                std::string::size_type v111 = (std::string::size_type)(v116 + 1);
                while (v95 != (_DWORD *)v108)
                {
                  int v117 = *--v95;
                  *--v116 = v117;
                }
                std::string::size_type v96 = v114 + 4 * v115;
                __p.__r_.__value_.__l.__size_ = v111;
                if (v108) {
                  operator delete(v108);
                }
                unint64_t v108 = v116;
              }
              else
              {
                _DWORD *v95 = v110;
                std::string::size_type v111 = (std::string::size_type)(v95 + 1);
              }
              __p.__r_.__value_.__l.__size_ = v111;
              v95 = (_DWORD *)v111;
            }
            ++v107;
          }
          while (v107 < *(unsigned int *)(v10 + 68));
          __p.__r_.__value_.__r.__words[2] = v96;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v108;
          v95 = v108;
          int v62 = v125;
        }
        if (v126) {
        if (v62)
        }
        if (v95)
        {
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)v95;
          operator delete(v95);
        }
      }
      else if (v145 == 4)
      {
        int v51 = *(unsigned __int8 *)(v10 + 60);
        char v52 = v50 | 4;
        char v53 = v50 | 2;
        if (v51 != 1) {
          char v53 = (8 * v49) | ((*(float *)(v10 + 52) != 0.0) << 7);
        }
        if (v51 != 2) {
          char v52 = v53;
        }
        if (v51 == 3) {
          char v54 = v50 | 6;
        }
        else {
          char v54 = v52;
        }
        char v55 = *(unsigned char *)(v10 + 61) + v54;
        unint64_t v56 = v133;
        if (v133 >= v134)
        {
          unint64_t v67 = (unint64_t)v132;
          uint64_t v68 = v133 - (unsigned char *)v132;
          uint64_t v69 = v133 - (unsigned char *)v132 + 1;
          if (v69 < 0) {
            goto LABEL_253;
          }
          unint64_t v70 = v134 - (unsigned char *)v132;
          if (2 * (v134 - (unsigned char *)v132) > (unint64_t)v69) {
            uint64_t v69 = 2 * v70;
          }
          if (v70 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v71 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v71 = v69;
          }
          if (v71) {
            unint64_t v72 = (char *)operator new(v71);
          }
          else {
            unint64_t v72 = 0;
          }
          uint64_t v85 = &v72[v68];
          v72[v68] = v55;
          uint64_t v57 = (uint64_t)&v72[v68 + 1];
          if (v56 != (char *)v67)
          {
            int v86 = &v56[~v67];
            do
            {
              char v87 = *--v56;
              (v86--)[(void)v72] = v87;
            }
            while (v56 != (char *)v67);
            unint64_t v56 = (char *)v132;
            uint64_t v85 = v72;
          }
          char v132 = v85;
          v134 = &v72[v71];
          if (v56) {
            operator delete(v56);
          }
        }
        else
        {
          char *v133 = v55;
          uint64_t v57 = (uint64_t)(v56 + 1);
        }
        v133 = (char *)v57;
      }
      else
      {
        unint64_t v59 = v133;
        if (v133 >= v134)
        {
          unint64_t v73 = (unint64_t)v132;
          uint64_t v74 = v133 - (unsigned char *)v132;
          uint64_t v75 = v133 - (unsigned char *)v132 + 1;
          if (v75 < 0) {
LABEL_253:
          }
            std::vector<float>::__throw_length_error[abi:ne180100]();
          unint64_t v76 = v134 - (unsigned char *)v132;
          if (2 * (v134 - (unsigned char *)v132) > (unint64_t)v75) {
            uint64_t v75 = 2 * v76;
          }
          if (v76 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v77 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v77 = v75;
          }
          if (v77) {
            BOOL v78 = (char *)operator new(v77);
          }
          else {
            BOOL v78 = 0;
          }
          size_t v88 = &v78[v74];
          v78[v74] = v50;
          uint64_t v60 = (uint64_t)&v78[v74 + 1];
          if (v59 != (char *)v73)
          {
            unint64_t v89 = &v59[~v73];
            do
            {
              char v90 = *--v59;
              (v89--)[(void)v78] = v90;
            }
            while (v59 != (char *)v73);
            unint64_t v59 = (char *)v132;
            size_t v88 = v78;
          }
          char v132 = v88;
          v134 = &v78[v77];
          if (v59) {
            operator delete(v59);
          }
        }
        else
        {
          char *v133 = v50;
          uint64_t v60 = (uint64_t)(v59 + 1);
        }
        v133 = (char *)v60;
      }
      float v118 = *(float *)(v10 + 52);
      if (v118 != 0.0) {
      if (v138)
      }
        operator delete(v138);
      if (v141) {
        operator delete(v141);
      }
      if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v144.__r_.__value_.__l.__data_);
      }
      if (v132) {
        operator delete(v132);
      }
      if (!v119) {
        return 0;
      }
    }
    unint64_t v120 = (void *)v5[1];
    if (v120)
    {
      do
      {
        v121 = v120;
        unint64_t v120 = (void *)*v120;
      }
      while (v120);
    }
    else
    {
      do
      {
        v121 = (void *)v5[2];
        BOOL v122 = *v121 == (void)v5;
        uint64_t v5 = v121;
      }
      while (!v122);
    }
    uint64_t v5 = v121;
    if (v121 == v127) {
      return 1;
    }
  }
}

void sub_18FF3DFF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *__p,uint64_t a40,uint64_t a41)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v43 = *(void **)(v41 - 144);
  if (v43)
  {
    *(void *)(v41 - 136) = v43;
    operator delete(v43);
  }
  if (*(char *)(v41 - 97) < 0) {
    operator delete(*(void **)(v41 - 120));
  }
  if (a18) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_18FF3E1E0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  *(void *)(v40 - 128) = v39;
  *(void *)(v40 - 144) = v38;
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  JUMPOUT(0x18FF3E19CLL);
}

uint64_t anonymous namespace'::encode_channel_formats(uint64_t a1, int a2, uint64_t a3, unsigned __int8 *a4, unint64_t *a5, double a6, double a7, double a8)
{
  char v8 = *(void **)(a1 + 168);
  int v9 = (void *)(a1 + 176);
  if (v8 == (void *)(a1 + 176)) {
    return 1;
  }
  uint64_t v13 = a5;
  unint64_t v14 = (unint64_t *)a4;
  uint64_t v15 = a3;
  unint64_t v108 = (void *)(a1 + 176);
  while (1)
  {
    if (a2 == 2)
    {
      unint64_t v16 = *v14;
      unint64_t v17 = *v14 + 1;
      if (v17 > (unint64_t)v13) {
        return 0;
      }
      char v18 = *((unsigned char *)v8 + 40) << 6;
      *unint64_t v14 = v17;
      *(unsigned char *)(v15 + v16) = v18;
    }
    if (!result) {
      return result;
    }
    if (*((unsigned char *)v8 + 40) == 2) {
      break;
    }
    uint64_t v20 = v8[6];
    int v21 = *((_DWORD *)v8 + 8);
    double v22 = *((double *)v8 + 7);
    unint64_t v114 = 0;
    unint64_t v115 = 0;
    unint64_t v113 = 0;
    char v23 = 32 * v122;
    unint64_t v24 = v114;
    if ((unint64_t)v114 >= v115)
    {
      unint64_t v26 = (unint64_t)v113;
      int64_t v27 = v114 - (unsigned char *)v113;
      int64_t v28 = v114 - (unsigned char *)v113 + 1;
      if (v28 < 0) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v29 = v115 - (void)v113;
      if (2 * (v115 - (unint64_t)v113) > v28) {
        int64_t v28 = 2 * v29;
      }
      if (v29 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v30 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v30 = v28;
      }
      if (v30) {
        unint64_t v31 = (char *)operator new(v30);
      }
      else {
        unint64_t v31 = 0;
      }
      unint64_t v32 = &v31[v27];
      uint64_t v33 = &v31[v27];
      char *v33 = v23;
      unint64_t v25 = v33 + 1;
      if (v24 != (char *)v26)
      {
        unint64_t v34 = &v24[~v26];
        do
        {
          char v35 = *--v24;
          (v34--)[(void)v31] = v35;
        }
        while (v24 != (char *)v26);
        unint64_t v24 = (char *)v113;
        unint64_t v32 = v31;
      }
      unint64_t v113 = v32;
      unint64_t v115 = (unint64_t)&v31[v30];
      if (v24) {
        operator delete(v24);
      }
    }
    else
    {
      *unint64_t v114 = v23;
      unint64_t v25 = v24 + 1;
    }
    unint64_t v114 = v25;
    if (!v122) {
    uint64_t v36 = 0;
    }
    int v37 = 0;
    int v38 = 0;
    double v39 = 0.0;
    char v40 = 1;
    float v41 = 0.0;
    do
    {
      char v42 = v40;
      uint64_t v43 = v20 + 8 * v36;
      unint64_t v44 = (float *)(v43 + 36);
      int v45 = *(unsigned __int8 *)(v43 + 40);
      if (v45 == 2)
      {
        float v41 = *v44;
        int v38 = 1;
      }
      else if (v45 == 1)
      {
        *(float *)&double v39 = *v44;
        int v37 = 1;
      }
      char v40 = 0;
      uint64_t v36 = 1;
    }
    while ((v42 & 1) != 0);
    if (v38) {
      char v46 = ((v37 != 0) << 7) | 0x40;
    }
    else {
      char v46 = (v37 != 0) << 7;
    }
    double v47 = *(double *)&v114;
    if ((unint64_t)v114 >= v115)
    {
      unint64_t v49 = (unint64_t)v113;
      int64_t v50 = v114 - (unsigned char *)v113;
      int64_t v51 = v114 - (unsigned char *)v113 + 1;
      if (v51 < 0) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v52 = v115 - (void)v113;
      if (2 * (v115 - (unint64_t)v113) > v51) {
        int64_t v51 = 2 * v52;
      }
      if (v52 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v53 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v53 = v51;
      }
      if (v53) {
        char v54 = (char *)operator new(v53);
      }
      else {
        char v54 = 0;
      }
      char v55 = &v54[v50];
      unint64_t v56 = &v54[v50];
      *unint64_t v56 = v46;
      int v48 = v56 + 1;
      if (*(void *)&v47 != v49)
      {
        unint64_t v57 = ~v49 + *(void *)&v47;
        do
        {
          char v58 = *(unsigned char *)--*(void *)&v47;
          v54[v57--] = v58;
        }
        while (*(void *)&v47 != v49);
        double v47 = *(double *)&v113;
        char v55 = v54;
      }
      unint64_t v113 = v55;
      unint64_t v115 = (unint64_t)&v54[v53];
      if (v47 != 0.0) {
        operator delete(*(void **)&v47);
      }
    }
    else
    {
      *unint64_t v114 = v46;
      int v48 = (char *)++*(void *)&v47;
    }
    unint64_t v114 = v48;
    if (v37) {
    if (v38)
    }
    int64x2_t v119 = 0uLL;
    unint64_t v120 = 0;
    if (!*(_DWORD *)(v20 + 24))
    {
      unint64_t v82 = 0;
      goto LABEL_106;
    }
    unint64_t v59 = 0;
    do
    {
      uint64_t v60 = *(void *)(*(void *)(v20 + 28) + 8 * v59);
      std::string::basic_string[abi:ne180100]<0>(&__p, *(char **)v60);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (*(unsigned char *)(v60 + 8)) {
        double v62 = *(double *)(v60 + 12);
      }
      else {
        double v62 = 0.0;
      }
      if (*(unsigned char *)(v60 + 20)) {
        double v39 = *(double *)(v60 + 24);
      }
      else {
        *(void *)&v39 &= 0xFFFFFFFFFFFFFF00;
      }
      double v63 = v22 + v62;
      if (*(unsigned char *)(v60 + 20)) {
        double v64 = v63 + v39;
      }
      else {
        double v64 = 0.0;
      }
      ++v59;
      unint64_t v65 = *(unsigned int *)(v20 + 24);
      if (v59 >= v65)
      {
        char v68 = 0;
        *(void *)&v47 &= 0xFFFFFFFFFFFFFF00;
      }
      else
      {
        uint64_t v66 = *(void *)(*(void *)(v20 + 28) + 8 * v59);
        if (*(unsigned char *)(v66 + 8)) {
          double v67 = *(double *)(v66 + 12);
        }
        else {
          double v67 = 0.0;
        }
        if (*(unsigned char *)(v66 + 20))
        {
          double v47 = v22 + v67 + *(double *)(v66 + 24);
          char v68 = 1;
        }
        else
        {
          double v47 = 0.0;
          char v68 = 0;
        }
      }
      if (HIDWORD(v61)
      {
        if (v118)
        {
          uint64_t v69 = (void *)v119.i64[1];
          if (v119.i64[1] < (unint64_t)v120)
          {
            *(void *)v119.i64[1] = 0;
            v69[1] = 0;
            v69[2] = 0;
            std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v69, v116, v117, v117 - (void)v116);
            v119.i64[1] = (uint64_t)(v69 + 3);
            goto LABEL_100;
          }
          unint64_t v70 = 0xAAAAAAAAAAAAAAABLL * ((v119.i64[1] - v119.i64[0]) >> 3);
          unint64_t v71 = v70 + 1;
          if (v70 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)&v120[-v119.i64[0]] >> 3) > v71) {
            unint64_t v71 = 0x5555555555555556 * ((uint64_t)&v120[-v119.i64[0]] >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v120[-v119.i64[0]] >> 3) >= 0x555555555555555) {
            unint64_t v72 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v72 = v71;
          }
          int v125 = &v120;
          if (v72)
          {
            if (v72 > 0xAAAAAAAAAAAAAAALL) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            unint64_t v73 = (char *)operator new(24 * v72);
          }
          else
          {
            unint64_t v73 = 0;
          }
          uint64_t v74 = &v73[24 * v70];
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v73;
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)v74;
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v74;
          uint64_t v124 = &v73[24 * v72];
          *((void *)v74 + 1) = 0;
          *((void *)v74 + 2) = 0;
          *(void *)uint64_t v74 = 0;
          std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v74, v116, v117, v117 - (void)v116);
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
          std::string::size_type v76 = __p.__r_.__value_.__r.__words[2] + 24;
          __p.__r_.__value_.__r.__words[2] += 24;
          size_t v77 = (void *)v119.i64[1];
          BOOL v78 = (void *)v119.i64[0];
          if (v119.i64[1] == v119.i64[0])
          {
            int64x2_t v80 = vdupq_n_s64(v119.u64[1]);
          }
          else
          {
            do
            {
              *(void *)(size - 24) = 0;
              *(void *)(size - 16) = 0;
              size -= 24;
              *(void *)(size + 16) = 0;
              long long v79 = *(_OWORD *)(v77 - 3);
              v77 -= 3;
              *(_OWORD *)std::string::size_type size = v79;
              *(void *)(size + 16) = v77[2];
              *size_t v77 = 0;
              v77[1] = 0;
              v77[2] = 0;
            }
            while (v77 != v78);
            int64x2_t v80 = v119;
            std::string::size_type v76 = __p.__r_.__value_.__r.__words[2];
          }
          v119.i64[0] = size;
          v119.i64[1] = v76;
          *(int64x2_t *)&__p.__r_.__value_.__r.__words[1] = v80;
          uint64_t v81 = v120;
          unint64_t v120 = v124;
          uint64_t v124 = v81;
          __p.__r_.__value_.__r.__words[0] = v80.i64[0];
          std::__split_buffer<std::vector<unsigned char>>::~__split_buffer((uint64_t)&__p);
          v119.i64[1] = v76;
          if (v118)
          {
LABEL_100:
            if (v116) {
              operator delete(v116);
            }
          }
        }
        unint64_t v65 = *(unsigned int *)(v20 + 24);
      }
    }
    while (v59 < v65);
    unint64_t v82 = 0xAAAAAAAAAAAAAAABLL * ((v119.i64[1] - v119.i64[0]) >> 3);
LABEL_106:
    uint64_t v83 = v119.i64[1];
    for (uint64_t i = v119.i64[0]; i != v83; i += 24)
    {
      int v86 = *(char **)i;
      uint64_t v85 = *(unsigned char **)(i + 8);
      uint64_t v87 = (uint64_t)&v85[-*(void *)i];
      if (v87 >= 1)
      {
        size_t v88 = v114;
        if ((uint64_t)(v115 - (void)v114) >= v87)
        {
          if (v85 != v86) {
            memmove(v114, *(const void **)i, v85 - v86);
          }
          unint64_t v114 = &v88[v85 - v86];
        }
        else
        {
          int64_t v89 = v114 - (unsigned char *)v113;
          uint64_t v90 = v114 - (unsigned char *)v113 + v87;
          if (v90 < 0) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v91 = v115 - (void)v113;
          if (2 * (v115 - (unint64_t)v113) > v90) {
            uint64_t v90 = 2 * v91;
          }
          if (v91 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v92 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v92 = v90;
          }
          if (v92) {
            char v93 = (char *)operator new(v92);
          }
          else {
            char v93 = 0;
          }
          v94 = &v93[v89];
          v95 = &v94[v87];
          std::string::size_type v96 = v94;
          do
          {
            char v97 = *v86++;
            *v96++ = v97;
            --v87;
          }
          while (v87);
          v98 = (char *)v113;
          if (v113 == v88)
          {
            uint64_t v101 = v88;
          }
          else
          {
            unint64_t v99 = v88;
            do
            {
              char v100 = *--v99;
              *--v94 = v100;
            }
            while (v99 != v98);
            uint64_t v101 = v114;
          }
          uint64_t v102 = v101 - v88;
          if (v101 != v88) {
            memmove(v95, v88, v101 - v88);
          }
          unint64_t v103 = v113;
          unint64_t v113 = v94;
          unint64_t v114 = &v95[v102];
          unint64_t v115 = (unint64_t)&v93[v92];
          if (v103) {
            operator delete(v103);
          }
        }
      }
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v119;
    std::vector<std::vector<unsigned char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v121.__r_.__value_.__l.__data_);
    }
    uint64_t v15 = a3;
    unint64_t v14 = (unint64_t *)a4;
    uint64_t v13 = a5;
    int v9 = v108;
    if (v113) {
      operator delete(v113);
    }
    if (!v104) {
      return 0;
    }
LABEL_139:
    v105 = (void *)v8[1];
    if (v105)
    {
      do
      {
        int v106 = v105;
        v105 = (void *)*v105;
      }
      while (v105);
    }
    else
    {
      do
      {
        int v106 = (void *)v8[2];
        BOOL v107 = *v106 == (void)v8;
        char v8 = v106;
      }
      while (!v107);
    }
    char v8 = v106;
    if (v106 == v9) {
      return 1;
    }
  }
    goto LABEL_139;
  return 0;
}

void sub_18FF3EABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,char a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::encode_block_formats_stand_alone(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unint64_t *a4)
{
  unint64_t v4 = *(void **)(a1 + 192);
  uint64_t v5 = (void *)(a1 + 200);
  if (v4 == (void *)(a1 + 200)) {
    return 1;
  }
  while (1)
  {
    uint64_t v9 = *(void *)a3;
    unint64_t v10 = *(void *)a3 + 1;
    if (v10 > (unint64_t)a4) {
      break;
    }
    char v11 = *((unsigned char *)v4 + 40) << 6;
    *(void *)a3 = v10;
    *(unsigned char *)(a2 + v9) = v11;
    uint64_t v12 = *(void *)a3;
    unint64_t v13 = *(void *)a3 + 1;
    if (v13 > (unint64_t)a4) {
      break;
    }
    *(void *)a3 = v13;
    *(unsigned char *)(a2 + v12) = 0x80;
    uint64_t v14 = *(void *)a3;
    if (*(void *)a3 + 8 >= (unint64_t)a4) {
      break;
    }
    char v15 = *((unsigned char *)v4 + 35);
    *(void *)a3 = v14 + 1;
    *(unsigned char *)(a2 + v14) = v15;
    char v16 = *((_WORD *)v4 + 17);
    uint64_t v17 = (*(void *)a3)++;
    *(unsigned char *)(a2 + v17) = v16;
    int v18 = *((_DWORD *)v4 + 8) >> 8;
    uint64_t v19 = (*(void *)a3)++;
    *(unsigned char *)(a2 + v19) = v18;
    LOBYTE(v18) = *((_DWORD *)v4 + 8);
    uint64_t v20 = (*(void *)a3)++;
    *(unsigned char *)(a2 + v20) = v18;
    LOBYTE(v18) = *((unsigned char *)v4 + 39);
    uint64_t v21 = (*(void *)a3)++;
    *(unsigned char *)(a2 + v21) = v18;
    LOBYTE(v18) = *((_WORD *)v4 + 19);
    uint64_t v22 = (*(void *)a3)++;
    *(unsigned char *)(a2 + v22) = v18;
    int v23 = *((_DWORD *)v4 + 9) >> 8;
    uint64_t v24 = (*(void *)a3)++;
    *(unsigned char *)(a2 + v24) = v23;
    LOBYTE(v23) = *((_DWORD *)v4 + 9);
    uint64_t v25 = (*(void *)a3)++;
    *(unsigned char *)(a2 + v25) = v23;
    if (*((unsigned char *)v4 + 40) == 2)
    {
        return 0;
    }
    else
    {
      if (v31)
      {
        {
          if (__p[0]) {
            operator delete(__p[0]);
          }
          return 0;
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
    }
    unint64_t v26 = (void *)v4[1];
    if (v26)
    {
      do
      {
        int64_t v27 = v26;
        unint64_t v26 = (void *)*v26;
      }
      while (v26);
    }
    else
    {
      do
      {
        int64_t v27 = (void *)v4[2];
        BOOL v28 = *v27 == (void)v4;
        unint64_t v4 = v27;
      }
      while (!v28);
    }
    unint64_t v4 = v27;
    if (v27 == v5) {
      return 1;
    }
  }
  return 0;
}

void sub_18FF3ED80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::PacketBuilder::~PacketBuilder(_anonymous_namespace_::PacketBuilder *this)
{
}

void anonymous namespace'::encode_block_format(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v241 = *MEMORY[0x1E4F143B8];
  std::string __p = 0;
  v235 = 0;
  v236 = 0;
  if ((a3 & 0xFF00000000) != 0) {
  if (a5)
  }
  {
    char v7 = 32 * a4;
    char v8 = v235;
    if (v235 >= v236)
    {
      unint64_t v10 = (unint64_t)__p;
      uint64_t v11 = v235 - (unsigned char *)__p;
      uint64_t v12 = v235 - (unsigned char *)__p + 1;
      if (v12 < 0) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v13 = v236 - (unsigned char *)__p;
      if (2 * (v236 - (unsigned char *)__p) > (unint64_t)v12) {
        uint64_t v12 = 2 * v13;
      }
      if (v13 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v14 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v14 = v12;
      }
      if (v14) {
        char v15 = operator new(v14);
      }
      else {
        char v15 = 0;
      }
      char v16 = (char *)v15 + v14;
      *((unsigned char *)v15 + v11) = v7;
      uint64_t v9 = (uint64_t)v15 + v11 + 1;
      if (v8 == (char *)v10)
      {
        char v15 = (char *)v15 + v11;
      }
      else
      {
        uint64_t v17 = &v8[~v10];
        do
        {
          char v18 = *--v8;
          (v17--)[(void)v15] = v18;
        }
        while (v8 != (char *)v10);
        char v8 = (char *)__p;
      }
      std::string __p = v15;
      v236 = v16;
      if (v8) {
        operator delete(v8);
      }
    }
    else
    {
      char *v235 = v7;
      uint64_t v9 = (uint64_t)(v8 + 1);
    }
    v235 = (char *)v9;
  }
  char v19 = 16 * *(unsigned char *)(a2 + 157);
  float v20 = *(float *)(a2 + 32);
  if (*(unsigned char *)(a2 + 156)) {
    BOOL v21 = 1;
  }
  else {
    BOOL v21 = v20 == 1.0;
  }
  if (!v21 || (int v22 = 0, *(unsigned char *)(a2 + 156) == 1) && v20 != 0.0)
  {
    v19 |= 8u;
    int v22 = 1;
  }
  if (*(unsigned char *)(a2 + 158)) {
    v19 += 4;
  }
  if (*(unsigned char *)(a2 + 40)) {
    char v23 = 3;
  }
  else {
    char v23 = 1;
  }
  if (*(unsigned char *)(a2 + 41)) {
    char v24 = v23;
  }
  else {
    char v24 = 0;
  }
  char v25 = v19 + v24;
  unint64_t v26 = v235;
  if (v235 >= v236)
  {
    unint64_t v28 = (unint64_t)__p;
    uint64_t v29 = v235 - (unsigned char *)__p;
    uint64_t v30 = v235 - (unsigned char *)__p + 1;
    if (v30 < 0) {
      goto LABEL_454;
    }
    unint64_t v31 = v236 - (unsigned char *)__p;
    if (2 * (v236 - (unsigned char *)__p) > (unint64_t)v30) {
      uint64_t v30 = 2 * v31;
    }
    if (v31 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v32 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v32 = v30;
    }
    if (v32) {
      uint64_t v33 = operator new(v32);
    }
    else {
      uint64_t v33 = 0;
    }
    unint64_t v34 = (char *)v33 + v32;
    *((unsigned char *)v33 + v29) = v25;
    int64_t v27 = (char *)v33 + v29 + 1;
    if (v26 == (char *)v28)
    {
      uint64_t v33 = (char *)v33 + v29;
    }
    else
    {
      char v35 = &v26[~v28];
      do
      {
        char v36 = *--v26;
        (v35--)[(void)v33] = v36;
      }
      while (v26 != (char *)v28);
      unint64_t v26 = (char *)__p;
    }
    std::string __p = v33;
    v236 = v34;
    if (v26) {
      operator delete(v26);
    }
  }
  else
  {
    char *v235 = v25;
    int64_t v27 = v26 + 1;
  }
  v235 = v27;
  uint64_t v37 = a2;
  if (!v22) {
    goto LABEL_77;
  }
  char v38 = *(unsigned char *)(a2 + 156) << 7;
  if (v27 >= v236)
  {
    unint64_t v40 = (unint64_t)__p;
    uint64_t v41 = v27 - (unsigned char *)__p;
    uint64_t v42 = v27 - (unsigned char *)__p + 1;
    if (v42 < 0) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v43 = v236 - (unsigned char *)__p;
    if (2 * (v236 - (unsigned char *)__p) > (unint64_t)v42) {
      uint64_t v42 = 2 * v43;
    }
    if (v43 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v44 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v44 = v42;
    }
    if (v44) {
      int v45 = operator new(v44);
    }
    else {
      int v45 = 0;
    }
    char v46 = (char *)v45 + v44;
    *((unsigned char *)v45 + v41) = v38;
    uint64_t v39 = (uint64_t)v45 + v41 + 1;
    if (v27 == (char *)v40)
    {
      std::string __p = (char *)v45 + v41;
      v236 = v46;
    }
    else
    {
      double v47 = &v27[~v40];
      do
      {
        char v48 = *--v27;
        (v47--)[(void)v45] = v48;
      }
      while (v27 != (char *)v40);
      int64_t v27 = (char *)__p;
      std::string __p = v45;
      v236 = v46;
      if (!v27) {
        goto LABEL_76;
      }
    }
    operator delete(v27);
  }
  else
  {
    *int64_t v27 = v38;
    uint64_t v39 = (uint64_t)(v27 + 1);
  }
LABEL_76:
  v235 = (char *)v39;
  uint64_t v37 = a2;
LABEL_77:
  if (*(unsigned char *)(v37 + 41)) {
  switch(a4)
  }
  {
    case 1:
      if (*(unsigned char *)(a2 + 52)) {
        char v49 = (16 * *(unsigned char *)(a2 + 108)) | 0xA;
      }
      else {
        char v49 = 16 * *(unsigned char *)(a2 + 108);
      }
      if (*(unsigned char *)(a2 + 53)) {
        char v50 = v49 | 5;
      }
      else {
        char v50 = v49;
      }
      int64_t v51 = v235;
      if (v235 >= v236)
      {
        unint64_t v82 = (unint64_t)__p;
        uint64_t v83 = v235 - (unsigned char *)__p;
        uint64_t v84 = v235 - (unsigned char *)__p + 1;
        if (v84 < 0) {
          goto LABEL_454;
        }
        unint64_t v85 = v236 - (unsigned char *)__p;
        if (2 * (v236 - (unsigned char *)__p) > (unint64_t)v84) {
          uint64_t v84 = 2 * v85;
        }
        if (v85 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v86 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v86 = v84;
        }
        if (v86) {
          uint64_t v87 = operator new(v86);
        }
        else {
          uint64_t v87 = 0;
        }
        uint64_t v102 = (char *)v87 + v83;
        unint64_t v52 = (char *)v87 + v86;
        *uint64_t v102 = v50;
        size_t v53 = v102 + 1;
        if (v51 == (char *)v82)
        {
          uint64_t v87 = v102;
        }
        else
        {
          unint64_t v103 = &v51[~v82];
          do
          {
            char v104 = *--v51;
            (v103--)[(void)v87] = v104;
          }
          while (v51 != (char *)v82);
          int64_t v51 = (char *)__p;
        }
        std::string __p = v87;
        v236 = v52;
        if (v51) {
          operator delete(v51);
        }
      }
      else
      {
        char *v235 = v50;
        unint64_t v52 = v236;
        size_t v53 = v51 + 1;
      }
      v235 = v53;
      if (*(unsigned char *)(a2 + 53)) {
        char v113 = ((*(unsigned char *)(a2 + 52) != 0) << 7) | 0x40;
      }
      else {
        char v113 = (*(unsigned char *)(a2 + 52) != 0) << 7;
      }
      if (v53 < v52)
      {
        *size_t v53 = v113;
        uint64_t v114 = (uint64_t)(v53 + 1);
        goto LABEL_252;
      }
      unint64_t v115 = (unint64_t)__p;
      uint64_t v116 = v53 - (unsigned char *)__p;
      uint64_t v117 = v53 - (unsigned char *)__p + 1;
      if (v117 < 0) {
        goto LABEL_454;
      }
      if (2 * (v52 - (unsigned char *)__p) > (unint64_t)v117) {
        uint64_t v117 = 2 * (v52 - (unsigned char *)__p);
      }
      if ((unint64_t)(v52 - (unsigned char *)__p) >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v118 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v118 = v117;
      }
      if (v118) {
        int64x2_t v119 = operator new(v118);
      }
      else {
        int64x2_t v119 = 0;
      }
      *((unsigned char *)v119 + v116) = v113;
      uint64_t v114 = (uint64_t)v119 + v116 + 1;
      if (v53 == (char *)v115)
      {
        std::string __p = (char *)v119 + v116;
        v236 = (char *)v119 + v118;
      }
      else
      {
        unsigned __int8 v122 = &v53[~v115];
        do
        {
          char v123 = *--v53;
          (v122--)[(void)v119] = v123;
        }
        while (v53 != (char *)v115);
        size_t v53 = (char *)__p;
        std::string __p = v119;
        v236 = (char *)v119 + v118;
        if (!v53) {
          goto LABEL_252;
        }
      }
      operator delete(v53);
LABEL_252:
      v235 = (char *)v114;
      uint64_t v37 = a2;
      if (*(unsigned char *)(a2 + 52)) {
      if (*(unsigned char *)(a2 + 53))
      }
      if (*(unsigned char *)(a2 + 52)) {
      if (*(unsigned char *)(a2 + 53))
      }
      if (*(unsigned char *)(a2 + 52)) {
      if (!*(unsigned char *)(a2 + 53))
      }
        goto LABEL_403;
      float v112 = *(float *)(a2 + 80);
LABEL_264:
LABEL_403:
      v207 = v235;
      unint64_t v206 = (unint64_t)v236;
      if (*(unsigned char *)(v37 + 8))
      {
        if (v235 >= v236)
        {
          unint64_t v209 = (unint64_t)__p;
          uint64_t v210 = v235 - (unsigned char *)__p;
          uint64_t v211 = v235 - (unsigned char *)__p + 1;
          if (v211 < 0) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v212 = v236 - (unsigned char *)__p;
          if (2 * (v236 - (unsigned char *)__p) > (unint64_t)v211) {
            uint64_t v211 = 2 * v212;
          }
          if (v212 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v213 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v213 = v211;
          }
          if (v213) {
            v214 = operator new(v213);
          }
          else {
            v214 = 0;
          }
          v215 = (char *)v214 + v213;
          *((unsigned char *)v214 + v210) = 0;
          uint64_t v208 = (uint64_t)v214 + v210 + 1;
          if (v207 == (unsigned char *)v209)
          {
            v214 = (char *)v214 + v210;
          }
          else
          {
            v216 = &v207[~v209];
            do
            {
              char v217 = *--v207;
              (v216--)[(void)v214] = v217;
            }
            while (v207 != (unsigned char *)v209);
            v207 = __p;
          }
          std::string __p = v214;
          v235 = (char *)v208;
          v236 = v215;
          if (v207) {
            operator delete(v207);
          }
        }
        else
        {
          char *v235 = 0;
          uint64_t v208 = (uint64_t)(v207 + 1);
        }
        v235 = (char *)v208;
        v207 = v235;
        unint64_t v206 = (unint64_t)v236;
      }
      if (*(unsigned char *)(a2 + 20))
      {
        if ((unint64_t)v207 >= v206)
        {
          unint64_t v219 = (unint64_t)__p;
          uint64_t v220 = v207 - (unsigned char *)__p;
          uint64_t v221 = v207 - (unsigned char *)__p + 1;
          if (v221 < 0) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v222 = v206 - (void)__p;
          if (2 * v222 > v221) {
            uint64_t v221 = 2 * v222;
          }
          if (v222 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v223 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v223 = v221;
          }
          if (v223) {
            v224 = operator new(v223);
          }
          else {
            v224 = 0;
          }
          v225 = (char *)v224 + v223;
          *((unsigned char *)v224 + v220) = 1;
          uint64_t v218 = (uint64_t)v224 + v220 + 1;
          if (v207 == (unsigned char *)v219)
          {
            v224 = (char *)v224 + v220;
          }
          else
          {
            v226 = &v207[~v219];
            do
            {
              char v227 = *--v207;
              (v226--)[(void)v224] = v227;
            }
            while (v207 != (unsigned char *)v219);
            v207 = __p;
          }
          std::string __p = v224;
          v235 = (char *)v218;
          v236 = v225;
          if (v207) {
            operator delete(v207);
          }
        }
        else
        {
          unsigned char *v207 = 1;
          uint64_t v218 = (uint64_t)(v207 + 1);
        }
        v235 = (char *)v218;
        v207 = v235;
        unint64_t v206 = (unint64_t)v236;
      }
      *(void *)a1 = __p;
      *(void *)(a1 + 8) = v207;
      *(void *)(a1 + 16) = v206;
      *(unsigned char *)(a1 + 24) = 1;
      return;
    case 2:
      uint64_t v66 = *(char ***)(a2 + 44);
      if (!v66 || !*v66) {
        goto LABEL_127;
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "AC_");
      std::string::basic_string[abi:ne180100]<0>(&v233, *v66);
      if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v233.__r_.__value_.__l.__data_);
      }
      if (v240 < 0) {
        operator delete(*(void **)buf);
      }
      if (HIDWORD(v67))
      {
        v94 = v235;
        if (v235 >= v236)
        {
          unint64_t v163 = (unint64_t)__p;
          uint64_t v164 = v235 - (unsigned char *)__p;
          uint64_t v165 = v235 - (unsigned char *)__p + 1;
          if (v165 < 0) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v166 = v236 - (unsigned char *)__p;
          if (2 * (v236 - (unsigned char *)__p) > (unint64_t)v165) {
            uint64_t v165 = 2 * v166;
          }
          if (v166 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v167 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v167 = v165;
          }
          if (v167) {
            uint64_t v168 = operator new(v167);
          }
          else {
            uint64_t v168 = 0;
          }
          v228 = (char *)v168 + v167;
          *((unsigned char *)v168 + v164) = 0x80;
          uint64_t v95 = (uint64_t)v168 + v164 + 1;
          if (v94 == (char *)v163)
          {
            uint64_t v168 = (char *)v168 + v164;
          }
          else
          {
            v229 = &v94[~v163];
            do
            {
              char v230 = *--v94;
              (v229--)[(void)v168] = v230;
            }
            while (v94 != (char *)v163);
            v94 = (char *)__p;
          }
          std::string __p = v168;
          v235 = (char *)v95;
          v236 = v228;
          if (v94) {
            operator delete(v94);
          }
        }
        else
        {
          char *v235 = 0x80;
          uint64_t v95 = (uint64_t)(v94 + 1);
        }
        v235 = (char *)v95;
        uint64_t v69 = v235;
      }
      else
      {
LABEL_127:
        char v68 = v235;
        if (v235 >= v236)
        {
          unint64_t v88 = (unint64_t)__p;
          uint64_t v89 = v235 - (unsigned char *)__p;
          uint64_t v90 = v235 - (unsigned char *)__p + 1;
          if (v90 < 0) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v91 = v236 - (unsigned char *)__p;
          if (2 * (v236 - (unsigned char *)__p) > (unint64_t)v90) {
            uint64_t v90 = 2 * v91;
          }
          if (v91 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v92 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v92 = v90;
          }
          if (v92) {
            char v93 = operator new(v92);
          }
          else {
            char v93 = 0;
          }
          unint64_t v140 = (char *)v93 + v92;
          *((unsigned char *)v93 + v89) = 0;
          uint64_t v69 = (char *)v93 + v89 + 1;
          if (v68 == (char *)v88)
          {
            char v93 = (char *)v93 + v89;
          }
          else
          {
            BOOL v141 = &v68[~v88];
            do
            {
              char v142 = *--v68;
              (v141--)[(void)v93] = v142;
            }
            while (v68 != (char *)v88);
            char v68 = (char *)__p;
          }
          std::string __p = v93;
          v235 = v69;
          v236 = v140;
          if (v68) {
            operator delete(v68);
          }
        }
        else
        {
          char *v235 = 0;
          uint64_t v69 = v68 + 1;
        }
        v235 = v69;
      }
      if (*(unsigned char *)(a2 + 56))
      {
        if (v69 >= v236)
        {
          unint64_t v145 = (unint64_t)__p;
          uint64_t v146 = v69 - (unsigned char *)__p;
          uint64_t v147 = v69 - (unsigned char *)__p + 1;
          if (v147 < 0) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v148 = v236 - (unsigned char *)__p;
          if (2 * (v236 - (unsigned char *)__p) > (unint64_t)v147) {
            uint64_t v147 = 2 * v148;
          }
          if (v148 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v149 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v149 = v147;
          }
          if (v149) {
            uint64_t v150 = operator new(v149);
          }
          else {
            uint64_t v150 = 0;
          }
          uint64_t v157 = (char *)v150 + v149;
          *((unsigned char *)v150 + v146) = -64;
          uint64_t v143 = (uint64_t)v150 + v146 + 1;
          if (v69 == (char *)v145)
          {
            uint64_t v150 = (char *)v150 + v146;
          }
          else
          {
            uint64_t v158 = &v69[~v145];
            do
            {
              char v159 = *--v69;
              (v158--)[(void)v150] = v159;
            }
            while (v69 != (char *)v145);
            uint64_t v69 = (char *)__p;
          }
          std::string __p = v150;
          v235 = (char *)v143;
          v236 = v157;
          if (v69) {
            operator delete(v69);
          }
        }
        else
        {
          *uint64_t v69 = -64;
          uint64_t v143 = (uint64_t)(v69 + 1);
        }
        v235 = (char *)v143;
        uint64_t v37 = a2;
      }
      else
      {
        if (v69 >= v236)
        {
          unint64_t v151 = (unint64_t)__p;
          uint64_t v152 = v69 - (unsigned char *)__p;
          uint64_t v153 = v69 - (unsigned char *)__p + 1;
          if (v153 < 0) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v154 = v236 - (unsigned char *)__p;
          if (2 * (v236 - (unsigned char *)__p) > (unint64_t)v153) {
            uint64_t v153 = 2 * v154;
          }
          if (v154 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v155 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v155 = v153;
          }
          if (v155) {
            unint64_t v156 = operator new(v155);
          }
          else {
            unint64_t v156 = 0;
          }
          v169 = (char *)v156 + v155;
          *((unsigned char *)v156 + v152) = 0;
          uint64_t v144 = (uint64_t)v156 + v152 + 1;
          if (v69 == (char *)v151)
          {
            unint64_t v156 = (char *)v156 + v152;
          }
          else
          {
            v170 = &v69[~v151];
            do
            {
              char v171 = *--v69;
              (v170--)[(void)v156] = v171;
            }
            while (v69 != (char *)v151);
            uint64_t v69 = (char *)__p;
          }
          std::string __p = v156;
          v235 = (char *)v144;
          v236 = v169;
          if (v69) {
            operator delete(v69);
          }
        }
        else
        {
          *uint64_t v69 = 0;
          uint64_t v144 = (uint64_t)(v69 + 1);
        }
        v235 = (char *)v144;
        uint64_t v37 = a2;
      }
      if (!*(_DWORD *)(v37 + 60)) {
        goto LABEL_403;
      }
      unsigned int v172 = 0;
      while (1)
      {
        uint64_t v173 = *(void *)(*(void *)(v37 + 64) + 8 * v172);
        if (*(void *)(v173 + 12))
        {
          char v174 = 0;
          int v175 = 2;
        }
        else
        {
          char v174 = *(unsigned char *)(v173 + 44) << 7;
          int v175 = 1;
        }
        char v176 = v174 | (32 * v175);
        uint64_t v177 = *(void *)(v173 + 28);
        char v178 = v177 ? 16 : 8;
        char v179 = v178 | v176;
        uint64_t v180 = *(void *)(v173 + 20);
        char v181 = v180 ? 4 : 2;
        char v182 = v181 | v179;
        v183 = v235;
        if (v235 >= v236)
        {
          unint64_t v185 = (unint64_t)__p;
          uint64_t v186 = v235 - (unsigned char *)__p;
          uint64_t v187 = v235 - (unsigned char *)__p + 1;
          if (v187 < 0) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v188 = v236 - (unsigned char *)__p;
          if (2 * (v236 - (unsigned char *)__p) > (unint64_t)v187) {
            uint64_t v187 = 2 * v188;
          }
          if (v188 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v189 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v189 = v187;
          }
          if (v189) {
            v190 = (char *)operator new(v189);
          }
          else {
            v190 = 0;
          }
          v191 = &v190[v186];
          v192 = &v190[v186];
          char *v192 = v182;
          v184 = v192 + 1;
          if (v183 != (char *)v185)
          {
            v193 = &v183[~v185];
            do
            {
              char v194 = *--v183;
              (v193--)[(void)v190] = v194;
            }
            while (v183 != (char *)v185);
            v183 = (char *)__p;
            v191 = v190;
          }
          std::string __p = v191;
          v235 = v184;
          v236 = &v190[v189];
          if (v183) {
            operator delete(v183);
          }
        }
        else
        {
          char *v235 = v182;
          v184 = v183 + 1;
        }
        v235 = v184;
        if (v175 == 1) {
        else
        }
        if (v177) {
        else
        }
        if (v180) {
        else
        }
        int v196 = *(void **)(v173 + 36);
        if (!v196 || !*v196) {
          break;
        }
        std::string::basic_string[abi:ne180100]<0>(buf, "AC_");
        std::string::basic_string[abi:ne180100]<0>(&v233, **(char ***)(v173 + 36));
        std::string v197 = v195;
        if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v233.__r_.__value_.__l.__data_);
        }
        if (v240 < 0) {
          operator delete(*(void **)buf);
        }
        if (!((unint64_t)v197 >> 32)) {
          break;
        }
        ++v172;
        uint64_t v37 = a2;
        if (!*(_DWORD *)(a2 + 60)) {
          goto LABEL_403;
        }
      }
      if (os_log_type_enabled(v198, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&buf[4] = "AudioMetadataSerializer.cpp";
        __int16 v238 = 1024;
        int v239 = 387;
        _os_log_impl(&dword_18FEC0000, v198, OS_LOG_TYPE_ERROR, "%25s:%-5d Encountered Matrix block format with missing coefficient input channel", buf, 0x12u);
      }
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 24) = 0;
      if (__p)
      {
        v235 = (char *)__p;
        operator delete(__p);
      }
      return;
    case 3:
      if (*(unsigned char *)(a2 + 120)) {
        char v54 = (16 * *(unsigned char *)(a2 + 121)) | 8;
      }
      else {
        char v54 = 16 * *(unsigned char *)(a2 + 121);
      }
      if (*(unsigned char *)(a2 + 56)) {
        v54 |= 4u;
      }
      if (*(unsigned char *)(a2 + 72)) {
        v54 |= 2u;
      }
      if (*(float *)(a2 + 76) == 0.0) {
        char v55 = v54;
      }
      else {
        char v55 = v54 + 1;
      }
      unint64_t v56 = v235;
      if (v235 >= v236)
      {
        unint64_t v70 = (unint64_t)__p;
        uint64_t v71 = v235 - (unsigned char *)__p;
        uint64_t v72 = v235 - (unsigned char *)__p + 1;
        if (v72 < 0) {
          goto LABEL_454;
        }
        unint64_t v73 = v236 - (unsigned char *)__p;
        if (2 * (v236 - (unsigned char *)__p) > (unint64_t)v72) {
          uint64_t v72 = 2 * v73;
        }
        if (v73 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v74 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v74 = v72;
        }
        if (v74) {
          uint64_t v75 = operator new(v74);
        }
        else {
          uint64_t v75 = 0;
        }
        std::string::size_type v96 = (char *)v75 + v71;
        unint64_t v57 = (char *)v75 + v74;
        *std::string::size_type v96 = v55;
        char v58 = v96 + 1;
        if (v56 == (char *)v70)
        {
          uint64_t v75 = v96;
        }
        else
        {
          char v97 = &v56[~v70];
          do
          {
            char v98 = *--v56;
            (v97--)[(void)v75] = v98;
          }
          while (v56 != (char *)v70);
          unint64_t v56 = (char *)__p;
        }
        std::string __p = v75;
        v236 = v57;
        if (v56) {
          operator delete(v56);
        }
      }
      else
      {
        char *v235 = v55;
        unint64_t v57 = v236;
        char v58 = v56 + 1;
      }
      v235 = v58;
      if (*(unsigned char *)(a2 + 96)) {
        char v105 = ((*(unsigned char *)(a2 + 84) != 0) << 7) | 0x40;
      }
      else {
        char v105 = (*(unsigned char *)(a2 + 84) != 0) << 7;
      }
      if (v58 >= v57)
      {
        unint64_t v107 = (unint64_t)__p;
        uint64_t v108 = v58 - (unsigned char *)__p;
        uint64_t v109 = v58 - (unsigned char *)__p + 1;
        if (v109 < 0) {
LABEL_454:
        }
          std::vector<float>::__throw_length_error[abi:ne180100]();
        if (2 * (v57 - (unsigned char *)__p) > (unint64_t)v109) {
          uint64_t v109 = 2 * (v57 - (unsigned char *)__p);
        }
        if ((unint64_t)(v57 - (unsigned char *)__p) >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v110 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v110 = v109;
        }
        if (v110) {
          std::string::size_type v111 = operator new(v110);
        }
        else {
          std::string::size_type v111 = 0;
        }
        *((unsigned char *)v111 + v108) = v105;
        uint64_t v106 = (uint64_t)v111 + v108 + 1;
        if (v58 == (char *)v107)
        {
          std::string __p = (char *)v111 + v108;
          v236 = (char *)v111 + v110;
        }
        else
        {
          unint64_t v120 = &v58[~v107];
          do
          {
            char v121 = *--v58;
            (v120--)[(void)v111] = v121;
          }
          while (v58 != (char *)v107);
          char v58 = (char *)__p;
          std::string __p = v111;
          v236 = (char *)v111 + v110;
          if (!v58) {
            goto LABEL_229;
          }
        }
        operator delete(v58);
      }
      else
      {
        char *v58 = v105;
        uint64_t v106 = (uint64_t)(v58 + 1);
      }
LABEL_229:
      v235 = (char *)v106;
      if (*(unsigned char *)(a2 + 72))
      {
      }
      float v124 = *(float *)(a2 + 76);
      if (v124 != 0.0) {
      if (*(unsigned char *)(a2 + 84))
      }
      if (*(unsigned char *)(a2 + 96))
      {
      }
      int v125 = v235;
      if (*(unsigned char *)(a2 + 104))
      {
        if (v235 >= v236)
        {
          unint64_t v128 = (unint64_t)__p;
          uint64_t v129 = v235 - (unsigned char *)__p;
          uint64_t v130 = v235 - (unsigned char *)__p + 1;
          if (v130 < 0) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v131 = v236 - (unsigned char *)__p;
          if (2 * (v236 - (unsigned char *)__p) > (unint64_t)v130) {
            uint64_t v130 = 2 * v131;
          }
          if (v131 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v132 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v132 = v130;
          }
          if (v132) {
            v133 = operator new(v132);
          }
          else {
            v133 = 0;
          }
          BOOL v160 = (char *)v133 + v132;
          *((unsigned char *)v133 + v129) = -64;
          uint64_t v126 = (uint64_t)v133 + v129 + 1;
          if (v125 == (char *)v128)
          {
            v133 = (char *)v133 + v129;
          }
          else
          {
            v161 = &v125[~v128];
            do
            {
              char v162 = *--v125;
              (v161--)[(void)v133] = v162;
            }
            while (v125 != (char *)v128);
            int v125 = (char *)__p;
          }
          std::string __p = v133;
          v236 = v160;
          if (v125) {
            operator delete(v125);
          }
        }
        else
        {
          char *v235 = -64;
          uint64_t v126 = (uint64_t)(v125 + 1);
        }
        v235 = (char *)v126;
        uint64_t v37 = a2;
      }
      else
      {
        if (v235 >= v236)
        {
          unint64_t v134 = (unint64_t)__p;
          uint64_t v135 = v235 - (unsigned char *)__p;
          uint64_t v136 = v235 - (unsigned char *)__p + 1;
          if (v136 < 0) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v137 = v236 - (unsigned char *)__p;
          if (2 * (v236 - (unsigned char *)__p) > (unint64_t)v136) {
            uint64_t v136 = 2 * v137;
          }
          if (v137 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v138 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v138 = v136;
          }
          if (v138) {
            uint64_t v139 = operator new(v138);
          }
          else {
            uint64_t v139 = 0;
          }
          char v199 = (char *)v139 + v138;
          *((unsigned char *)v139 + v135) = 0;
          uint64_t v127 = (uint64_t)v139 + v135 + 1;
          if (v125 == (char *)v134)
          {
            uint64_t v139 = (char *)v139 + v135;
          }
          else
          {
            v200 = &v125[~v134];
            do
            {
              char v201 = *--v125;
              (v200--)[(void)v139] = v201;
            }
            while (v125 != (char *)v134);
            int v125 = (char *)__p;
          }
          std::string __p = v139;
          v236 = v199;
          if (v125) {
            operator delete(v125);
          }
        }
        else
        {
          char *v235 = 0;
          uint64_t v127 = (uint64_t)(v125 + 1);
        }
        v235 = (char *)v127;
        uint64_t v37 = a2;
      }
      if (*(_DWORD *)(v37 + 116))
      {
        unint64_t v202 = 0;
        do
        {
          uint64_t v203 = *(void *)(*(void *)(v37 + 108) + 8 * v202);
          float v204 = *(float *)(v203 + 12);
          if (*(unsigned char *)(v203 + 32))
          {
            v205 = (float *)(v203 + 24);
          }
          else
          {
            v205 = (float *)(v203 + 16);
          }
          ++v202;
          uint64_t v37 = a2;
        }
        while (v202 < *(unsigned int *)(a2 + 116));
      }
      goto LABEL_403;
    case 4:
      if (*(unsigned char *)(a2 + 96)) {
        char v59 = 0x80;
      }
      else {
        char v59 = 0;
      }
      int v60 = *(unsigned __int8 *)(a2 + 98);
      char v61 = v59 | 0x60;
      char v62 = v59 | 0x40;
      if (v60 == 1) {
        v59 |= 0x20u;
      }
      if (v60 == 2) {
        char v59 = v62;
      }
      if (v60 == 3) {
        char v59 = v61;
      }
      if (*(unsigned char *)(a2 + 52)) {
        v59 += 16;
      }
      if (*(unsigned char *)(a2 + 53)) {
        v59 += 8;
      }
      if (*(unsigned char *)(a2 + 54)) {
        v59 += 4;
      }
      if (*(float *)(a2 + 92) == 0.0) {
        char v63 = v59;
      }
      else {
        char v63 = v59 + 2;
      }
      double v64 = v235;
      if (v235 >= v236)
      {
        unint64_t v76 = (unint64_t)__p;
        uint64_t v77 = v235 - (unsigned char *)__p;
        uint64_t v78 = v235 - (unsigned char *)__p + 1;
        if (v78 < 0) {
          goto LABEL_454;
        }
        unint64_t v79 = v236 - (unsigned char *)__p;
        if (2 * (v236 - (unsigned char *)__p) > (unint64_t)v78) {
          uint64_t v78 = 2 * v79;
        }
        if (v79 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v80 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v80 = v78;
        }
        if (v80) {
          uint64_t v81 = operator new(v80);
        }
        else {
          uint64_t v81 = 0;
        }
        unint64_t v99 = (char *)v81 + v80;
        *((unsigned char *)v81 + v77) = v63;
        uint64_t v65 = (uint64_t)v81 + v77 + 1;
        if (v64 == (char *)v76)
        {
          uint64_t v81 = (char *)v81 + v77;
        }
        else
        {
          char v100 = &v64[~v76];
          do
          {
            char v101 = *--v64;
            (v100--)[(void)v81] = v101;
          }
          while (v64 != (char *)v76);
          double v64 = (char *)__p;
        }
        std::string __p = v81;
        v236 = v99;
        if (v64) {
          operator delete(v64);
        }
      }
      else
      {
        char *v235 = v63;
        uint64_t v65 = (uint64_t)(v64 + 1);
      }
      v235 = (char *)v65;
      uint64_t v37 = a2;
      float v112 = *(float *)(a2 + 92);
      if (v112 == 0.0) {
        goto LABEL_403;
      }
      goto LABEL_264;
    default:
      goto LABEL_403;
  }
}

void sub_18FF40268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::encode_var_uint(unint64_t a1, unint64_t *a2)
{
  long long v25 = 0u;
  memset(v24, 0, sizeof(v24));
  do
  {
    char v23 = a1 & 0x7F;
    std::deque<unsigned char>::push_back(v24, &v23);
    BOOL v4 = a1 > 0x7F;
    a1 >>= 7;
  }
  while (v4);
  for (uint64_t i = *((void *)&v25 + 1); *((void *)&v25 + 1); uint64_t i = *((void *)&v25 + 1))
  {
    uint64_t v6 = i - 1;
    char v7 = *(unsigned char *)(*(void *)(*((void *)&v24[0] + 1) + (((unint64_t)(v25 + v6) >> 9) & 0x7FFFFFFFFFFFF8))
                  + ((v25 + v6) & 0xFFF));
    *((void *)&v25 + 1) = v6;
    std::deque<unsigned char>::__maybe_remove_back_spare[abi:ne180100](v24);
    if (*((void *)&v25 + 1)) {
      char v8 = v7 | 0x80;
    }
    else {
      char v8 = v7;
    }
    unint64_t v10 = (unsigned char *)a2[1];
    unint64_t v9 = a2[2];
    if ((unint64_t)v10 >= v9)
    {
      unint64_t v12 = *a2;
      unint64_t v13 = &v10[-*a2];
      unint64_t v14 = (unint64_t)(v13 + 1);
      if ((uint64_t)(v13 + 1) < 0) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v15 = v9 - v12;
      if (2 * v15 > v14) {
        unint64_t v14 = 2 * v15;
      }
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v16 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v16 = v14;
      }
      if (v16) {
        uint64_t v17 = (char *)operator new(v16);
      }
      else {
        uint64_t v17 = 0;
      }
      char v18 = &v13[(void)v17];
      char v19 = &v13[(void)v17];
      unsigned char *v19 = v8;
      uint64_t v11 = v19 + 1;
      if (v10 != (unsigned char *)v12)
      {
        float v20 = &v10[~v12];
        do
        {
          char v21 = *--v10;
          (v20--)[(void)v17] = v21;
        }
        while (v10 != (unsigned char *)v12);
        unint64_t v10 = (unsigned char *)*a2;
        char v18 = v17;
      }
      *a2 = (unint64_t)v18;
      a2[1] = (unint64_t)v11;
      a2[2] = (unint64_t)&v17[v16];
      if (v10) {
        operator delete(v10);
      }
    }
    else
    {
      *unint64_t v10 = v8;
      uint64_t v11 = v10 + 1;
    }
    a2[1] = (unint64_t)v11;
  }
  return std::deque<unsigned char>::~deque[abi:ne180100]((uint64_t)v24);
}

void sub_18FF40498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::deque<unsigned char>::~deque[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::log(_anonymous_namespace_ *this)
{
  uint64_t v1 = &unk_1E9299000;
  {
    uint64_t v1 = (void *)&unk_1E9299000;
    if (v3)
    {
      uint64_t v1 = (void *)&unk_1E9299000;
    }
  }
  return v1[37];
}

void std::deque<unsigned char>::push_back(void *a1, unsigned char *a2)
{
  BOOL v4 = (char *)a1[2];
  uint64_t v5 = (char *)a1[1];
  uint64_t v6 = v4 - v5;
  if (v4 == v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = ((v4 - v5) << 9) - 1;
  }
  unint64_t v8 = a1[4];
  unint64_t v9 = a1[5] + v8;
  if (v7 == v9)
  {
    if (v8 >= 0x1000)
    {
      a1[4] = v8 - 4096;
      uint64_t v12 = *(void *)v5;
      unint64_t v10 = v5 + 8;
      uint64_t v11 = v12;
      a1[1] = v10;
      if ((char *)a1[3] == v4)
      {
        uint64_t v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 <= *a1)
        {
          if (v4 == (char *)*a1) {
            unint64_t v41 = 1;
          }
          else {
            unint64_t v41 = (uint64_t)&v4[-*a1] >> 2;
          }
          uint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v41);
          size_t v44 = &v42[8 * (v41 >> 2)];
          int v45 = (uint64_t *)a1[1];
          BOOL v4 = v44;
          uint64_t v46 = a1[2] - (void)v45;
          if (v46)
          {
            BOOL v4 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v47 = 8 * (v46 >> 3);
            char v48 = &v42[8 * (v41 >> 2)];
            do
            {
              uint64_t v49 = *v45++;
              *(void *)char v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          char v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v4;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            BOOL v4 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v14 = v13 >> 3;
          BOOL v15 = v13 >> 3 < -1;
          uint64_t v16 = (v13 >> 3) + 2;
          if (v15) {
            uint64_t v17 = v16;
          }
          else {
            uint64_t v17 = v14 + 1;
          }
          uint64_t v18 = -(v17 >> 1);
          uint64_t v19 = v17 >> 1;
          float v20 = &v10[-8 * v19];
          int64_t v21 = v4 - v10;
          if (v4 == v10)
          {
            int v22 = v4;
          }
          else
          {
            memmove(&v10[-8 * v19], v10, v4 - v10);
            int v22 = (char *)a1[1];
          }
          BOOL v4 = &v20[v21];
          a1[1] = &v22[8 * v18];
          a1[2] = &v20[v21];
        }
      }
      *(void *)BOOL v4 = v11;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      uint64_t v5 = (char *)a1[1];
      unint64_t v9 = a1[5] + a1[4];
      goto LABEL_84;
    }
    uint64_t v23 = v6 >> 3;
    char v24 = (char *)a1[3];
    long long v25 = (char *)*a1;
    uint64_t v26 = (uint64_t)&v24[-*a1];
    if (v6 >> 3 < (unint64_t)(v26 >> 3))
    {
      int64_t v27 = operator new(0x1000uLL);
      unint64_t v28 = v27;
      if (v24 == v4)
      {
        if (v25 == v5)
        {
          if (v4 == v5) {
            unint64_t v51 = 1;
          }
          else {
            unint64_t v51 = v26 >> 2;
          }
          uint64_t v52 = 2 * v51;
          size_t v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v51);
          uint64_t v5 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          char v55 = (uint64_t *)a1[1];
          unint64_t v56 = v5;
          uint64_t v57 = a1[2] - (void)v55;
          if (v57)
          {
            unint64_t v56 = &v5[v57 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v58 = 8 * (v57 >> 3);
            char v59 = v5;
            do
            {
              uint64_t v60 = *v55++;
              *(void *)char v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          char v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v5;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            uint64_t v5 = (char *)a1[1];
          }
        }
        *((void *)v5 - 1) = v28;
        char v62 = (char *)a1[1];
        char v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        uint64_t v64 = *((void *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          uint64_t v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1) {
              unint64_t v96 = 1;
            }
            else {
              unint64_t v96 = (uint64_t)&v63[-*a1] >> 2;
            }
            char v97 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v96);
            unint64_t v99 = &v97[8 * (v96 >> 2)];
            char v100 = (uint64_t *)a1[1];
            char v63 = v99;
            uint64_t v101 = a1[2] - (void)v100;
            if (v101)
            {
              char v63 = &v99[v101 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v102 = 8 * (v101 >> 3);
              unint64_t v103 = &v97[8 * (v96 >> 2)];
              do
              {
                uint64_t v104 = *v100++;
                *(void *)unint64_t v103 = v104;
                v103 += 8;
                v102 -= 8;
              }
              while (v102);
            }
            char v105 = (char *)*a1;
            *a1 = v97;
            a1[1] = v99;
            a1[2] = v63;
            a1[3] = &v97[8 * v98];
            if (v105)
            {
              operator delete(v105);
              char v63 = (char *)a1[2];
            }
          }
          else
          {
            uint64_t v66 = v65 >> 3;
            BOOL v15 = v65 >> 3 < -1;
            uint64_t v67 = (v65 >> 3) + 2;
            if (v15) {
              uint64_t v68 = v67;
            }
            else {
              uint64_t v68 = v66 + 1;
            }
            uint64_t v69 = -(v68 >> 1);
            uint64_t v70 = v68 >> 1;
            uint64_t v71 = &v62[-8 * v70];
            int64_t v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              char v62 = (char *)a1[1];
            }
            char v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(void *)char v63 = v64;
      }
      else
      {
        *(void *)BOOL v4 = v27;
      }
      goto LABEL_82;
    }
    if (v24 == v25) {
      unint64_t v29 = 1;
    }
    else {
      unint64_t v29 = v26 >> 2;
    }
    uint64_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v29);
    uint64_t v32 = v31;
    uint64_t v33 = &v30[8 * v23];
    *(void *)&long long v34 = v30;
    *((void *)&v34 + 1) = v33;
    long long v109 = v34;
    char v35 = operator new(0x1000uLL);
    *(void *)&long long v36 = v33;
    *((void *)&v36 + 1) = &v30[8 * v32];
    if (v23 == v32)
    {
      uint64_t v37 = 8 * v23;
      *(void *)&long long v38 = v109;
      if (v6 >= 1)
      {
        uint64_t v39 = v37 >> 3;
        if (v39 >= -1) {
          unint64_t v40 = v39 + 1;
        }
        else {
          unint64_t v40 = v39 + 2;
        }
        v33 -= 8 * (v40 >> 1);
        *(void *)&long long v36 = v33;
        *((void *)&v38 + 1) = v33;
        goto LABEL_56;
      }
      uint64_t v73 = v37 >> 2;
      if (v4 == v5) {
        unint64_t v74 = 1;
      }
      else {
        unint64_t v74 = v73;
      }
      uint64_t v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v74);
      uint64_t v33 = &v75[8 * (v74 >> 2)];
      *(void *)&long long v38 = v75;
      *((void *)&v38 + 1) = v33;
      *(void *)&long long v36 = v33;
      *((void *)&v36 + 1) = &v75[8 * v76];
      if (!v30) {
        goto LABEL_56;
      }
      long long v106 = v36;
      long long v109 = v38;
      operator delete(v30);
      long long v36 = v106;
    }
    long long v38 = v109;
LABEL_56:
    *(void *)uint64_t v33 = v35;
    *(void *)&long long v36 = v36 + 8;
    for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
    {
      uint64_t v78 = (void *)*((void *)&v38 + 1);
      if (*((void *)&v38 + 1) == (void)v38)
      {
        size_t v80 = (unsigned char *)v36;
        if ((unint64_t)v36 >= *((void *)&v36 + 1))
        {
          if (*((void *)&v36 + 1) == *((void *)&v38 + 1)) {
            unint64_t v85 = 1;
          }
          else {
            unint64_t v85 = (uint64_t)(*((void *)&v36 + 1) - *((void *)&v38 + 1)) >> 2;
          }
          size_t v86 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v85);
          unint64_t v79 = &v86[(2 * v85 + 6) & 0xFFFFFFFFFFFFFFF8];
          unint64_t v88 = v79;
          uint64_t v89 = v80 - (unsigned char *)v78;
          if (v80 != (unsigned char *)v78)
          {
            unint64_t v88 = &v79[v89 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v90 = 8 * (v89 >> 3);
            unint64_t v91 = v79;
            size_t v92 = v78;
            do
            {
              uint64_t v93 = *v92++;
              *(void *)unint64_t v91 = v93;
              v91 += 8;
              v90 -= 8;
            }
            while (v90);
          }
          *(void *)&long long v38 = v86;
          *((void *)&v38 + 1) = v79;
          *(void *)&long long v36 = v88;
          *((void *)&v36 + 1) = &v86[8 * v87];
          if (v78)
          {
            long long v107 = v36;
            long long v111 = v38;
            operator delete(v78);
            long long v36 = v107;
            long long v38 = v111;
          }
        }
        else
        {
          uint64_t v81 = (uint64_t)(*((void *)&v36 + 1) - v36) >> 3;
          if (v81 >= -1) {
            uint64_t v82 = v81 + 1;
          }
          else {
            uint64_t v82 = v81 + 2;
          }
          uint64_t v83 = v82 >> 1;
          uint64_t v84 = v36 + 8 * (v82 >> 1);
          unint64_t v79 = (char *)(v84 - (v36 - *((void *)&v38 + 1)));
          if ((void)v36 == *((void *)&v38 + 1))
          {
            size_t v80 = (unsigned char *)*((void *)&v38 + 1);
          }
          else
          {
            uint64_t v108 = *((void *)&v36 + 1);
            uint64_t v110 = v38;
            memmove((void *)(v84 - (v36 - *((void *)&v38 + 1))), *((const void **)&v38 + 1), v36 - *((void *)&v38 + 1));
            *((void *)&v36 + 1) = v108;
            *(void *)&long long v38 = v110;
          }
          *((void *)&v38 + 1) = v79;
          *(void *)&long long v36 = &v80[8 * v83];
        }
      }
      else
      {
        unint64_t v79 = (char *)*((void *)&v38 + 1);
      }
      uint64_t v94 = *(void *)(i - 8);
      *((void *)v79 - 1) = v94;
      *((void *)&v38 + 1) -= 8;
    }
    uint64_t v95 = (char *)*a1;
    *(_OWORD *)a1 = v38;
    *((_OWORD *)a1 + 1) = v36;
    if (v95) {
      operator delete(v95);
    }
    goto LABEL_83;
  }
LABEL_84:
  *(unsigned char *)(*(void *)&v5[(v9 >> 9) & 0x7FFFFFFFFFFFF8] + (v9 & 0xFFF)) = *a2;
  ++a1[5];
}

void sub_18FF40A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11)
{
  operator delete(v11);
  if ((void)a11) {
    operator delete((void *)a11);
  }
  _Unwind_Resume(a1);
}

void std::deque<unsigned char>::__maybe_remove_back_spare[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v1 = a1[2];
  if (v1 == v2) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = ((v1 - v2) << 9) - 1;
  }
  if ((unint64_t)(v3 - (a1[5] + a1[4])) >= 0x2000)
  {
    operator delete(*(void **)(v1 - 8));
    a1[2] -= 8;
  }
}

uint64_t std::deque<unsigned char>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 2048;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 4096;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t anonymous namespace'::encode_format_element_id(char a1, int a2, uint64_t a3, unint64_t *a4, unint64_t a5)
{
  unint64_t v5 = *a4;
  unint64_t v6 = *a4 + 1;
  if (v6 > a5) {
    return 0;
  }
  *a4 = v6;
  *(unsigned char *)(a3 + v5) = 16 * a1;
  unint64_t v7 = *a4;
  if (*a4 + 4 >= a5) {
    return 0;
  }
  *a4 = v7 + 1;
  *(unsigned char *)(a3 + v7) = HIBYTE(a2);
  unint64_t v8 = (*a4)++;
  *(unsigned char *)(a3 + v8) = BYTE2(a2);
  unint64_t v9 = (*a4)++;
  *(unsigned char *)(a3 + v9) = BYTE1(a2);
  unint64_t v10 = (*a4)++;
  *(unsigned char *)(a3 + v10) = a2;
  return 1;
}

std::string *anonymous namespace'::determine_channel_type(std::string *this, const std::string::value_type *a2, std::string::value_type *a3)
{
  unint64_t v4 = this;
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (a2) {
    this = std::string::__assign_external(this, a2);
  }
  if (*a3) {
    v4[1].__r_.__value_.__s.__data_[0] = *a3;
  }
  std::string::size_type size = HIBYTE(v4->__r_.__value_.__r.__words[2]);
  int v6 = (char)size;
  if ((size & 0x80u) != 0) {
    std::string::size_type size = v4->__r_.__value_.__l.__size_;
  }
  if (size == 4)
  {
    unint64_t v7 = (std::string *)v4->__r_.__value_.__r.__words[0];
    if (v6 >= 0) {
      unint64_t v7 = v4;
    }
    int v8 = v4[1].__r_.__value_.__s.__data_[0];
    if (LODWORD(v7->__r_.__value_.__l.__data_) == 825241648 && v8 == 1)
    {
      char v14 = 1;
      goto LABEL_36;
    }
    if (LODWORD(v7->__r_.__value_.__l.__data_) == 842018864 && v8 == 2)
    {
      char v14 = 2;
      goto LABEL_36;
    }
    if (LODWORD(v7->__r_.__value_.__l.__data_) == 858796080 && v8 == 3)
    {
      char v14 = 3;
      goto LABEL_36;
    }
    if (LODWORD(v7->__r_.__value_.__l.__data_) == 875573296 && v8 == 4)
    {
      char v14 = 4;
      goto LABEL_36;
    }
    if (LODWORD(v7->__r_.__value_.__l.__data_) == 892350512 && v8 == 5)
    {
      char v14 = 5;
      goto LABEL_36;
    }
  }
  char v14 = 0;
LABEL_36:
  v4[1].__r_.__value_.__s.__data_[1] = v14;
  return this;
}

void sub_18FF40D70(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::parse_block_format_id(int a1, const std::string *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  int v24 = 0;
  int v25 = 0;
  unint64_t v4 = std::string::basic_string((std::string *)v27, a2, 0, 3uLL, (std::allocator<char> *)&v23);
  uint64_t v5 = v27[23];
  if (v27[23] < 0) {
    uint64_t v5 = *(void *)&v27[8];
  }
  if (v5 != 3) {
    goto LABEL_10;
  }
  int v6 = *(unsigned __int16 **)v27;
  if (v27[23] >= 0) {
    int v6 = (unsigned __int16 *)v27;
  }
  int v7 = *v6;
  int v8 = *((unsigned __int8 *)v6 + 2);
  if (v7 == 16961 && v8 == 95)
  {
    std::string::basic_string(&v23, a2, 3uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v26);
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v16 = &v23;
    }
    else {
      uint64_t v16 = (std::string *)v23.__r_.__value_.__r.__words[0];
    }
    unint64_t v4 = (std::string *)sscanf((const char *)v16, "%08x_%08x", &v25, &v24);
    BOOL v10 = v4 != 2;
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    if ((v27[23] & 0x80) == 0)
    {
LABEL_11:
      if (v10) {
        goto LABEL_12;
      }
      goto LABEL_24;
    }
  }
  else
  {
LABEL_10:
    BOOL v10 = 1;
    if ((v27[23] & 0x80) == 0) {
      goto LABEL_11;
    }
  }
  operator delete(*(void **)v27);
  if (v10)
  {
LABEL_12:
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v12 = a2;
      }
      else {
        uint64_t v12 = (const std::string *)a2->__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)int64_t v27 = 136315650;
      *(void *)&v27[4] = "AudioMetadataSerializer.cpp";
      *(_WORD *)&v27[12] = 1024;
      *(_DWORD *)&v27[14] = 2100;
      *(_WORD *)&v27[18] = 2080;
      *(void *)&v27[20] = v12;
      uint64_t v13 = "%25s:%-5d Block format ID '%s' does not match expected pattern 'AB_xxxxyyyy_zz'";
      char v14 = v11;
      uint32_t v15 = 28;
LABEL_31:
      _os_log_impl(&dword_18FEC0000, v14, OS_LOG_TYPE_ERROR, v13, v27, v15);
      goto LABEL_32;
    }
    goto LABEL_32;
  }
LABEL_24:
  if (v25 != a1)
  {
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int64_t v21 = a2;
      }
      else {
        int64_t v21 = (const std::string *)a2->__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)int64_t v27 = 136315906;
      *(void *)&v27[4] = "AudioMetadataSerializer.cpp";
      *(_WORD *)&v27[12] = 1024;
      *(_DWORD *)&v27[14] = 2105;
      *(_WORD *)&v27[18] = 2080;
      *(void *)&v27[20] = v21;
      __int16 v28 = 1024;
      int v29 = a1;
      uint64_t v13 = "%25s:%-5d Block format ID '%s' does not match containing channel format ID 'AC_%08x'";
      char v14 = v20;
      uint32_t v15 = 34;
      goto LABEL_31;
    }
LABEL_32:
    int v18 = 0;
    unsigned int v17 = 0;
    uint64_t v19 = 0;
    return v19 | v17 | v18;
  }
  unsigned int v17 = v24 & 0xFFFFFF00;
  int v18 = v24;
  uint64_t v19 = 0x100000000;
  return v19 | v17 | v18;
}

void sub_18FF40FFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    int v6 = result;
    uint64_t result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_18FF41080(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<unsigned char>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      int v6 = (char *)v1[1];
      do
      {
        size_t v8 = (void *)*((void *)v6 - 3);
        v6 -= 24;
        uint64_t v7 = v8;
        if (v8)
        {
          *((void *)v4 - 2) = v7;
          operator delete(v7);
        }
        unint64_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<std::vector<unsigned char>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    unint64_t v4 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v4)
    {
      *(void *)(v2 - 16) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
}

void sub_18FF411F0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
  return result;
}

void anonymous namespace'::gather_elements_from_pack_format(uint64_t a1, uint64_t a2, char a3, uint64_t **a4)
{
  unint64_t v6 = *(unsigned int *)(a2 + 28);
  if (v6)
  {
    uint64_t v7 = 0;
    size_t v8 = (void *)(a1 + 176);
    unint64_t v9 = (uint64_t **)(a1 + 168);
    while (1)
    {
      uint64_t v10 = *(void *)(a2 + 32);
      if (**(void **)(v10 + 8 * v7)) {
        break;
      }
LABEL_34:
      if (++v7 >= v6) {
        goto LABEL_35;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v94, "AC_");
    std::string::basic_string[abi:ne180100]<0>(&__p, **(char ***)(v10 + 8 * v7));
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v94.__r_.__value_.__l.__data_);
    }
    if (!HIDWORD(v11))
    {
LABEL_33:
      unint64_t v6 = *(unsigned int *)(a2 + 28);
      goto LABEL_34;
    }
    std::string::basic_string[abi:ne180100]<0>(&v94, **(char ***)(v10 + 8 * v7));
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v94.__r_.__value_.__l.__size_ < 8) {
        goto LABEL_17;
      }
      uint64_t v12 = (std::string::value_type *)(v94.__r_.__value_.__r.__words[0] + 7);
    }
    else
    {
      uint64_t v12 = &v94.__r_.__value_.__s.__data_[7];
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 8) {
        goto LABEL_17;
      }
    }
    if (*v12 == 48)
    {
      BOOL v13 = 0;
      if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_31;
      }
      goto LABEL_30;
    }
LABEL_17:
    uint64_t v14 = *v8;
    if (!*v8) {
      goto LABEL_28;
    }
    uint32_t v15 = v8;
    do
    {
      unsigned int v16 = *(_DWORD *)(v14 + 32);
      BOOL v17 = v16 >= v11;
      if (v16 >= v11) {
        int v18 = (uint64_t *)v14;
      }
      else {
        int v18 = (uint64_t *)(v14 + 8);
      }
      if (v17) {
        uint32_t v15 = (void *)v14;
      }
      uint64_t v14 = *v18;
    }
    while (*v18);
    if (v15 == v8 || *((_DWORD *)v15 + 8) > v11) {
LABEL_28:
    }
      uint32_t v15 = v8;
    BOOL v13 = v15 == v8;
    if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_31;
    }
LABEL_30:
    operator delete(v94.__r_.__value_.__l.__data_);
LABEL_31:
    if (v13)
    {
      uint64_t v19 = *(uint64_t **)(v10 + 8 * v7);
      float v20 = *a4;
      *(unsigned char *)int64_t v21 = a3;
      v21[1] = v19;
      v21[2] = v20;
    }
    goto LABEL_33;
  }
LABEL_35:
  unint64_t v22 = *(unsigned int *)(a2 + 40);
  if (v22)
  {
    uint64_t v23 = 0;
    int v24 = (uint64_t *)(a1 + 152);
    while (1)
    {
      uint64_t v25 = *(void *)(a2 + 44);
      if (**(void **)(v25 + 8 * v23)) {
        break;
      }
LABEL_68:
      if (++v23 >= v22) {
        goto LABEL_69;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v94, "AP_");
    std::string::basic_string[abi:ne180100]<0>(&__p, **(char ***)(v25 + 8 * v23));
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v94.__r_.__value_.__l.__data_);
    }
    if (!HIDWORD(v26))
    {
LABEL_67:
      unint64_t v22 = *(unsigned int *)(a2 + 40);
      goto LABEL_68;
    }
    std::string::basic_string[abi:ne180100]<0>(&v94, **(char ***)(v25 + 8 * v23));
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v94.__r_.__value_.__l.__size_ < 8) {
        goto LABEL_51;
      }
      int64_t v27 = (std::string::value_type *)(v94.__r_.__value_.__r.__words[0] + 7);
    }
    else
    {
      int64_t v27 = &v94.__r_.__value_.__s.__data_[7];
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 8) {
        goto LABEL_51;
      }
    }
    if (*v27 == 48)
    {
      BOOL v28 = 0;
      if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_65;
      }
      goto LABEL_64;
    }
LABEL_51:
    uint64_t v29 = *v24;
    if (!*v24) {
      goto LABEL_62;
    }
    uint64_t v30 = (uint64_t *)(a1 + 152);
    do
    {
      unsigned int v31 = *(_DWORD *)(v29 + 32);
      BOOL v32 = v31 >= v26;
      if (v31 >= v26) {
        uint64_t v33 = (uint64_t *)v29;
      }
      else {
        uint64_t v33 = (uint64_t *)(v29 + 8);
      }
      if (v32) {
        uint64_t v30 = (uint64_t *)v29;
      }
      uint64_t v29 = *v33;
    }
    while (*v33);
    if (v30 == v24 || *((_DWORD *)v30 + 8) > v26) {
LABEL_62:
    }
      uint64_t v30 = (uint64_t *)(a1 + 152);
    BOOL v28 = v30 == v24;
    if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_65;
    }
LABEL_64:
    operator delete(v94.__r_.__value_.__l.__data_);
LABEL_65:
    if (v28)
    {
      long long v34 = *(uint64_t **)(v25 + 8 * v23);
      char v35 = *a4;
      *(unsigned char *)long long v36 = a3;
      v36[1] = v34;
      v36[2] = v35;
    }
    goto LABEL_67;
  }
LABEL_69:
  if (v95 != 2) {
    goto LABEL_206;
  }
  uint64_t v37 = a4;
  long long v38 = &__p.__r_.__value_.__s.__data_[7];
  unint64_t v39 = *(unsigned int *)(a2 + 56);
  if (v39)
  {
    unint64_t v40 = 0;
    unint64_t v41 = (uint64_t *)(a1 + 152);
    do
    {
      uint64_t v42 = *(char ***)(*(void *)(a2 + 60) + 8 * v40);
      if (!v42 || !*v42) {
        goto LABEL_105;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "AP_");
      std::string::basic_string[abi:ne180100]<0>(&v93, *v42);
      if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v93.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (!HIDWORD(v43)) {
        goto LABEL_104;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, *v42);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        if (__p.__r_.__value_.__l.__size_ < 8) {
          goto LABEL_87;
        }
        size_t v44 = (std::string::value_type *)(__p.__r_.__value_.__r.__words[0] + 7);
      }
      else
      {
        size_t v44 = &__p.__r_.__value_.__s.__data_[7];
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 8) {
          goto LABEL_87;
        }
      }
      if (*v44 != 48)
      {
LABEL_87:
        uint64_t v46 = *v41;
        if (!*v41) {
          goto LABEL_98;
        }
        uint64_t v47 = (uint64_t *)(a1 + 152);
        do
        {
          unsigned int v48 = *(_DWORD *)(v46 + 32);
          BOOL v49 = v48 >= v43;
          if (v48 >= v43) {
            char v50 = (uint64_t *)v46;
          }
          else {
            char v50 = (uint64_t *)(v46 + 8);
          }
          if (v49) {
            uint64_t v47 = (uint64_t *)v46;
          }
          uint64_t v46 = *v50;
        }
        while (*v50);
        if (v47 == v41 || *((_DWORD *)v47 + 8) > v43) {
LABEL_98:
        }
          uint64_t v47 = (uint64_t *)(a1 + 152);
        BOOL v45 = v47 == v41;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_100:
          if (!v45) {
            goto LABEL_104;
          }
LABEL_103:
          unint64_t v51 = *a4;
          *(unsigned char *)uint64_t v52 = a3;
          v52[1] = (uint64_t *)v42;
          v52[2] = v51;
          goto LABEL_104;
        }
        goto LABEL_102;
      }
      BOOL v45 = 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_100;
      }
LABEL_102:
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v45) {
        goto LABEL_103;
      }
LABEL_104:
      unint64_t v39 = *(unsigned int *)(a2 + 56);
LABEL_105:
      ++v40;
    }
    while (v40 < v39);
  }
  unint64_t v53 = *(unsigned int *)(a2 + 68);
  if (v53)
  {
    unint64_t v54 = 0;
    char v55 = (uint64_t *)(a1 + 152);
    do
    {
      unint64_t v56 = *(char ***)(*(void *)(a2 + 72) + 8 * v54);
      if (!v56 || !*v56) {
        goto LABEL_141;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "AP_");
      std::string::basic_string[abi:ne180100]<0>(&v93, *v56);
      if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v93.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (!HIDWORD(v57)) {
        goto LABEL_140;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, *v56);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        if (__p.__r_.__value_.__l.__size_ < 8) {
          goto LABEL_123;
        }
        uint64_t v58 = (std::string::value_type *)(__p.__r_.__value_.__r.__words[0] + 7);
      }
      else
      {
        uint64_t v58 = &__p.__r_.__value_.__s.__data_[7];
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 8) {
          goto LABEL_123;
        }
      }
      if (*v58 != 48)
      {
LABEL_123:
        uint64_t v60 = *v55;
        if (!*v55) {
          goto LABEL_134;
        }
        char v61 = (uint64_t *)(a1 + 152);
        do
        {
          unsigned int v62 = *(_DWORD *)(v60 + 32);
          BOOL v63 = v62 >= v57;
          if (v62 >= v57) {
            uint64_t v64 = (uint64_t *)v60;
          }
          else {
            uint64_t v64 = (uint64_t *)(v60 + 8);
          }
          if (v63) {
            char v61 = (uint64_t *)v60;
          }
          uint64_t v60 = *v64;
        }
        while (*v64);
        if (v61 == v55 || *((_DWORD *)v61 + 8) > v57) {
LABEL_134:
        }
          char v61 = (uint64_t *)(a1 + 152);
        BOOL v59 = v61 == v55;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_136:
          if (!v59) {
            goto LABEL_140;
          }
LABEL_139:
          uint64_t v65 = *a4;
          *(unsigned char *)uint64_t v66 = a3;
          v66[1] = (uint64_t *)v56;
          v66[2] = v65;
          goto LABEL_140;
        }
        goto LABEL_138;
      }
      BOOL v59 = 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_136;
      }
LABEL_138:
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v59) {
        goto LABEL_139;
      }
LABEL_140:
      unint64_t v53 = *(unsigned int *)(a2 + 68);
LABEL_141:
      ++v54;
    }
    while (v54 < v53);
  }
  uint64_t v67 = *(char ***)(a2 + 80);
  if (v67 && *v67)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "AP_");
    std::string::basic_string[abi:ne180100]<0>(&v93, *v67);
    if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v93.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (HIDWORD(v68))
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, *v67);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        if (__p.__r_.__value_.__l.__size_ < 8) {
          goto LABEL_156;
        }
        uint64_t v69 = (std::string::value_type *)(__p.__r_.__value_.__r.__words[0] + 7);
      }
      else
      {
        uint64_t v69 = &__p.__r_.__value_.__s.__data_[7];
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 8) {
          goto LABEL_156;
        }
      }
      if (*v69 == 48)
      {
        BOOL v70 = 0;
        goto LABEL_169;
      }
LABEL_156:
      uint64_t v71 = a1 + 152;
      uint64_t v72 = *(void *)(a1 + 152);
      if (!v72) {
        goto LABEL_167;
      }
      uint64_t v73 = a1 + 152;
      do
      {
        unsigned int v74 = *(_DWORD *)(v72 + 32);
        BOOL v75 = v74 >= v68;
        if (v74 >= v68) {
          uint64_t v76 = (uint64_t *)v72;
        }
        else {
          uint64_t v76 = (uint64_t *)(v72 + 8);
        }
        if (v75) {
          uint64_t v73 = v72;
        }
        uint64_t v72 = *v76;
      }
      while (*v76);
      if (v73 == v71 || *(_DWORD *)(v73 + 32) > v68) {
LABEL_167:
      }
        uint64_t v73 = a1 + 152;
      BOOL v70 = v73 == v71;
LABEL_169:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (!v70) {
          goto LABEL_174;
        }
      }
      else if (!v70)
      {
        goto LABEL_174;
      }
      uint64_t v77 = *v37;
      *(unsigned char *)uint64_t v78 = a3;
      v78[1] = (uint64_t *)v67;
      v78[2] = v77;
    }
  }
LABEL_174:
  unint64_t v79 = *(char ***)(a2 + 88);
  if (v79 && *v79)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "AP_");
    std::string::basic_string[abi:ne180100]<0>(&v93, *v79);
    if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v93.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (HIDWORD(v80))
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, *v79);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v81 = a1;
        if (__p.__r_.__value_.__l.__size_ < 8) {
          goto LABEL_188;
        }
        long long v38 = (std::string::value_type *)(__p.__r_.__value_.__r.__words[0] + 7);
      }
      else
      {
        uint64_t v81 = a1;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 8) {
          goto LABEL_188;
        }
      }
      if (*v38 == 48)
      {
        BOOL v82 = 0;
        goto LABEL_201;
      }
LABEL_188:
      uint64_t v83 = v81 + 152;
      uint64_t v84 = *(void *)(v81 + 152);
      if (!v84) {
        goto LABEL_199;
      }
      uint64_t v85 = v81 + 152;
      do
      {
        unsigned int v86 = *(_DWORD *)(v84 + 32);
        BOOL v87 = v86 >= v80;
        if (v86 >= v80) {
          unint64_t v88 = (uint64_t *)v84;
        }
        else {
          unint64_t v88 = (uint64_t *)(v84 + 8);
        }
        if (v87) {
          uint64_t v85 = v84;
        }
        uint64_t v84 = *v88;
      }
      while (*v88);
      if (v85 == v83 || *(_DWORD *)(v85 + 32) > v80) {
LABEL_199:
      }
        uint64_t v85 = v83;
      BOOL v82 = v85 == v83;
LABEL_201:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (!v82) {
          goto LABEL_206;
        }
      }
      else if (!v82)
      {
        goto LABEL_206;
      }
      uint64_t v89 = *v37;
      *(unsigned char *)uint64_t v90 = a3;
      v90[1] = (uint64_t *)v79;
      v90[2] = v89;
    }
  }
LABEL_206:
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v94.__r_.__value_.__l.__data_);
  }
}

void sub_18FF41B30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_18FF41EB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18FF420A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_18FF42294(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18FF42398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_18FF42518(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18FF42688(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18FF42980(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18FF42BCC(_Unwind_Exception *a1)
{
  unint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_18FF42C14()
{
}

void sub_18FF42C1C()
{
}

void sub_18FF42C24()
{
}

void sub_18FF42CA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18FF42E28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18FF43014(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void DecoderConfigDescr::DecoderConfigDescr(DecoderConfigDescr *this)
{
  *((_DWORD *)this + 2) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 7) = 0;
  *((_DWORD *)this + 24) = 0;
  MP4AudioProgramConfig::Clear((DecoderConfigDescr *)((char *)this + 88));
  *(_OWORD *)((char *)this + 1192) = 0u;
  *(_OWORD *)((char *)this + 1208) = 0u;
  DecoderConfigDescr::cleanup(this);
}

void MP4AudioESDS::SetDecoderConfigDescriptor(uint64_t a1, long long *a2)
{
  if ((long long *)(a1 + 296) != a2)
  {
    long long v5 = *a2;
    long long v6 = a2[1];
    *(_OWORD *)(a1 + 324) = *(long long *)((char *)a2 + 28);
    *(_OWORD *)(a1 + 296) = v5;
    *(_OWORD *)(a1 + 312) = v6;
    *(_DWORD *)(a1 + 340) = *((_DWORD *)a2 + 11);
    uint64_t v7 = *((void *)a2 + 6);
    *(_DWORD *)(a1 + 352) = *((_DWORD *)a2 + 14);
    *(void *)(a1 + 344) = v7;
    *(_DWORD *)(a1 + 356) = *((_DWORD *)a2 + 15);
    long long v8 = a2[4];
    *(void *)(a1 + 376) = *((void *)a2 + 10);
    *(_OWORD *)(a1 + 360) = v8;
    *(void *)(a1 + 384) = *((void *)a2 + 11);
    *(_DWORD *)(a1 + 392) = *((_DWORD *)a2 + 24);
    memcpy((void *)(a1 + 396), (char *)a2 + 100, 0x440uLL);
    uint64_t v9 = *((void *)a2 + 149);
    uint64_t v10 = *((void *)a2 + 150);
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)(a1 + 1488) = v9;
    unint64_t v11 = *(std::__shared_weak_count **)(a1 + 1496);
    *(void *)(a1 + 1496) = v10;
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    uint64_t v12 = *((void *)a2 + 151);
    uint64_t v13 = *((void *)a2 + 152);
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)(a1 + 1504) = v12;
    uint64_t v14 = *(std::__shared_weak_count **)(a1 + 1512);
    *(void *)(a1 + 1512) = v13;
    if (v14)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
  }
}

void MP4AudioESDS::~MP4AudioESDS(MP4AudioESDS *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 189);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 187);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void DecoderConfigDescr::~DecoderConfigDescr(DecoderConfigDescr *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 152);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 150);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void MP4AudioProgramConfig::Clear(MP4AudioProgramConfig *this)
{
  *(void *)this = 0;
  bzero((char *)this + 8, 4uLL);
  bzero((char *)this + 12, 0x84uLL);
  bzero((char *)this + 144, 0x84uLL);
  bzero((char *)this + 276, 0x84uLL);
  bzero((char *)this + 408, 0x84uLL);
  bzero((char *)this + 540, 0x84uLL);
  bzero((char *)this + 672, 0x84uLL);
  bzero((char *)this + 804, 0xCuLL);
  bzero((char *)this + 816, 0xCuLL);
  bzero((char *)this + 828, 0xCuLL);
  *((_DWORD *)this + 210) = 0;
  bzero((char *)this + 844, 0x100uLL);
}

void DecoderConfigDescr::cleanup(DecoderConfigDescr *this)
{
  uint64_t v2 = (char *)this + 1192;
  *((void *)this + 6) = 0;
  *((void *)this + 8) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((void *)this + 4) = 0;
  bzero((char *)this + 88, 0x44CuLL);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 150);
  *(_OWORD *)uint64_t v2 = 0u;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 152);
  *((void *)v2 + 2) = 0;
  *((void *)v2 + 3) = 0;
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void *CADeprecated::CAAutoFree<AudioFormatListItem>::CAAutoFree(void *a1, uint64_t a2, int a3)
{
  *a1 = 0;
  size_t v5 = 48 * a2;
  if (a3)
  {
    long long v6 = malloc_type_malloc(48 * a2, 0x2C8E6D5CuLL);
    uint64_t v7 = v6;
    if (!a2 || v6)
    {
      bzero(v6, v5);
      goto LABEL_7;
    }
LABEL_8:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    unint64_t v11 = std::bad_alloc::bad_alloc(exception);
  }
  long long v8 = malloc_type_malloc(48 * a2, 0x7C51E058uLL);
  uint64_t v7 = v8;
  if (a2 && !v8) {
    goto LABEL_8;
  }
LABEL_7:
  *a1 = v7;
  return a1;
}

void *std::__list_imp<ID3FrameInfo>::clear(void *result)
{
  if (result[2])
  {
    uint64_t v1 = result;
    uint64_t result = (void *)result[1];
    uint64_t v2 = *v1;
    uint64_t v3 = *result;
    *(void *)(v3 + 8) = *(void *)(*v1 + 8);
    **(void **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        unint64_t v4 = (void *)result[1];
        operator delete(result);
        uint64_t result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

uint64_t AudioFormatEncryptedFormatTranslator::EncryptFormatInFlavor(signed int a1, int a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a2 == 1667392371)
  {
    uint64_t result = 1902207331;
    if (a1 > 1634754914)
    {
      if (a1 <= 1700998450)
      {
        if (a1 == 1634754915) {
          return (result + 3840);
        }
        if (a1 == 1700997939) {
          return 1902324531;
        }
      }
      else
      {
        switch(a1)
        {
          case 1700998451:
            return 1902469939;
          case 1718378851:
            return 1902537827;
          case 1970495843:
            return 1903522657;
        }
      }
    }
    else if (a1 <= 1633772399)
    {
      if (a1 == 1633772320) {
        return result;
      }
      if (a1 == 1633772392) {
        return (result + 517);
      }
    }
    else
    {
      switch(a1)
      {
        case 1633772400:
          return (result + 525);
        case 1633889587:
          return (result + 464);
        case 1634492771:
          return 1902928227;
      }
    }
    long long v8 = CADefaultLog();
    uint64_t result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    CAX4CCString::CAX4CCString((CAX4CCString *)v9, a1);
    *(_DWORD *)buf = 136315650;
    unint64_t v11 = "AudioFormatEncryptedFormatTranslator.h";
    __int16 v12 = 1024;
    int v13 = 222;
    __int16 v14 = 2080;
    uint32_t v15 = v9;
    size_t v5 = "%25s:%-5d Unknown format ID: %s";
    goto LABEL_62;
  }
  if (a2 != 2053467747)
  {
    if (a2 != 1885695587)
    {
      unint64_t v4 = CADefaultLog();
      uint64_t result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      *(_DWORD *)buf = 136315394;
      unint64_t v11 = "AudioFormatEncryptedFormatTranslator.h";
      __int16 v12 = 1024;
      int v13 = 229;
      size_t v5 = "%25s:%-5d Invalid encryption flavor";
      long long v6 = v4;
      uint32_t v7 = 18;
      goto LABEL_63;
    }
    uint64_t result = 1885430115;
    if (a1 <= 1634754914)
    {
      if (a1 <= 1633772399)
      {
        if (a1 == 1633772320) {
          return result;
        }
        if (a1 != 1633772392) {
          goto LABEL_56;
        }
        return (result + 517);
      }
      if (a1 != 1633772400)
      {
        if (a1 != 1633889587)
        {
LABEL_56:
          long long v8 = CADefaultLog();
          uint64_t result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
          if (!result) {
            return result;
          }
          CAX4CCString::CAX4CCString((CAX4CCString *)v9, a1);
          *(_DWORD *)buf = 136315650;
          unint64_t v11 = "AudioFormatEncryptedFormatTranslator.h";
          __int16 v12 = 1024;
          int v13 = 191;
          __int16 v14 = 2080;
          uint32_t v15 = v9;
          size_t v5 = "%25s:%-5d Unknown format ID: %s";
          goto LABEL_62;
        }
        return (result + 464);
      }
      return (result + 525);
    }
    if (a1 > 1700998450)
    {
      if (a1 == 1700998451) {
        return 1885692723;
      }
      if (a1 == 1970495843) {
        return 1886745441;
      }
      goto LABEL_56;
    }
    if (a1 != 1634754915)
    {
      if (a1 == 1700997939) {
        return 1885547315;
      }
      goto LABEL_56;
    }
    return (result + 3840);
  }
  uint64_t result = 2053202275;
  if (a1 <= 1633889586)
  {
    switch(a1)
    {
      case 1633772320:
        return result;
      case 1633772392:
        return (result + 517);
      case 1633772400:
        return (result + 525);
    }
  }
  else if (a1 > 1700997938)
  {
    if (a1 == 1700997939) {
      return 2053319475;
    }
    if (a1 == 1700998451) {
      return 2053464883;
    }
  }
  else
  {
    if (a1 == 1633889587) {
      return (result + 464);
    }
    if (a1 == 1634492771) {
      return 2053923171;
    }
  }
  long long v8 = CADefaultLog();
  uint64_t result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  if (!result) {
    return result;
  }
  CAX4CCString::CAX4CCString((CAX4CCString *)v9, a1);
  *(_DWORD *)buf = 136315650;
  unint64_t v11 = "AudioFormatEncryptedFormatTranslator.h";
  __int16 v12 = 1024;
  int v13 = 204;
  __int16 v14 = 2080;
  uint32_t v15 = v9;
  size_t v5 = "%25s:%-5d Unknown format ID: %s";
LABEL_62:
  long long v6 = v8;
  uint32_t v7 = 28;
LABEL_63:
  _os_log_impl(&dword_18FEC0000, v6, OS_LOG_TYPE_ERROR, v5, buf, v7);
  return 0;
}

void CAX4CCString::CAX4CCString(CAX4CCString *this, unsigned int a2)
{
  unsigned int v4 = bswap32(a2);
  *(_DWORD *)((char *)this + 1) = v4;
  uint64_t v5 = MEMORY[0x1E4F14390];
  if ((v4 & 0x80) != 0)
  {
    if (!__maskrune((char)v4, 0x40000uLL)) {
      goto LABEL_17;
    }
  }
  else if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * (char)v4 + 60) & 0x40000) == 0)
  {
    goto LABEL_17;
  }
  unsigned int v6 = *((char *)this + 2);
  if ((v6 & 0x80000000) != 0)
  {
    if (!__maskrune(v6, 0x40000uLL)) {
      goto LABEL_17;
    }
  }
  else if ((*(_DWORD *)(v5 + 4 * v6 + 60) & 0x40000) == 0)
  {
    goto LABEL_17;
  }
  unsigned int v7 = *((char *)this + 3);
  if ((v7 & 0x80000000) != 0)
  {
    if (!__maskrune(v7, 0x40000uLL)) {
      goto LABEL_17;
    }
LABEL_13:
    unsigned int v8 = *((char *)this + 4);
    if ((v8 & 0x80000000) != 0)
    {
      if (!__maskrune(v8, 0x40000uLL)) {
        goto LABEL_17;
      }
    }
    else if ((*(_DWORD *)(v5 + 4 * v8 + 60) & 0x40000) == 0)
    {
      goto LABEL_17;
    }
    *(_WORD *)((char *)this + 5) = 39;
    *(unsigned char *)this = 39;
    return;
  }
  if ((*(_DWORD *)(v5 + 4 * v7 + 60) & 0x40000) != 0) {
    goto LABEL_13;
  }
LABEL_17:
  if (a2 + 199999 > 0x61A7E) {
    snprintf((char *)this, 0x10uLL, "0x%x");
  }
  else {
    snprintf((char *)this, 0x10uLL, "%d");
  }
}

std::runtime_error *std::overflow_error::overflow_error[abi:ne180100](std::runtime_error *a1, const char *a2)
{
  uint64_t result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E4FBA4E0] + 16);
  return result;
}

void IPCAUClient::RemoteAUServer::ServerPortDied(IPCAUClient::RemoteAUServer *this)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = CADeprecated::TSingleton<IPCAUClient>::instance();
  char v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
  if (kInterAppAudioScope)
  {
    uint64_t v2 = *(NSObject **)kInterAppAudioScope;
    if (!*(void *)kInterAppAudioScope) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    unsigned int v8 = "IPCAUClient.cpp";
    __int16 v9 = 1024;
    int v10 = 400;
    __int16 v11 = 2048;
    __int16 v12 = this;
    _os_log_impl(&dword_18FEC0000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d %p", buf, 0x1Cu);
  }
LABEL_7:
  uint64_t v4 = *((void *)this + 22);
  uint64_t v3 = *((void *)this + 23);
  while (v4 != v3)
  {
    RemoteAUPropertyListeners::Notify(*(RemoteAUPropertyListeners **)(*(void *)v4 + 104), *(OpaqueAudioComponentInstance **)(*(void *)v4 + 112), *(void *)(*(void *)v4 + 72), 101, 0, 0);
    v4 += 8;
  }
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v5);
}

void sub_18FF43C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t CADeprecated::TSingleton<IPCAUClient>::instance()
{
  if (atomic_load_explicit((atomic_ullong *volatile)&CADeprecated::TSingleton<IPCAUClient>::sOnce, memory_order_acquire) != -1)
  {
    uint64_t v3 = &v1;
    uint64_t v2 = &v3;
    std::__call_once(&CADeprecated::TSingleton<IPCAUClient>::sOnce, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<CADeprecated::TSingleton<IPCAUClient>::instance(void)::{lambda(void)#1} &&>>);
  }
  return CADeprecated::TSingleton<IPCAUClient>::sInstance;
}

void CADeprecated::CAMutex::Locker::~Locker(CADeprecated::CAMutex::Locker *this)
{
  if (*((unsigned char *)this + 8)) {
    (*(void (**)(void))(**(void **)this + 24))();
  }
}

void RemoteAUPropertyListeners::Notify(RemoteAUPropertyListeners *this, OpaqueAudioComponentInstance *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int64_t v6 = a2 - this;
  if (a2 != this)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    if (v7 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(0xAAAAAAAAAAAAAAABLL * (v6 >> 3));
    memmove(v13, this, v6);
    if (8 * (v6 >> 3))
    {
      __int16 v14 = v13;
      do
      {
        if (*(_DWORD *)v14 == a4) {
          (*((void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))v14 + 1))(*((void *)v14 + 2), a3, a4, a5, a6);
        }
        v14 += 24;
      }
      while (v14 != &v13[24 * v7]);
    }
    if (v13)
    {
      operator delete(v13);
    }
  }
}

void sub_18FF43E4C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<CADeprecated::TSingleton<IPCAUClient>::instance(void)::{lambda(void)#1} &&>>()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_18FF44294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, dispatch_object_t object)
{
  std::__split_buffer<std::function<void ()(void)>>::~__split_buffer((uint64_t)&object);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&a9);
  int v18 = *(void **)(v13 + 336);
  if (v18)
  {
    *(void *)(v13 + 344) = v18;
    operator delete(v18);
  }
  CADeprecated::XBasicMIGServer::~XBasicMIGServer(v15);
  MEMORY[0x192FC78F0](v14);
  MEMORY[0x192FC7910](v13);
  MEMORY[0x192FC8940](v13, 0x10F0C40230246F9);
  _Unwind_Resume(a1);
}

uint64_t CADeprecated::TSingleton<AURegistrationServerConnection>::instance()
{
  if (atomic_load_explicit((atomic_ullong *volatile)&CADeprecated::TSingleton<AURegistrationServerConnection>::sOnce, memory_order_acquire) != -1)
  {
    uint64_t v3 = &v1;
    uint64_t v2 = &v3;
    std::__call_once(&CADeprecated::TSingleton<AURegistrationServerConnection>::sOnce, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<CADeprecated::TSingleton<AURegistrationServerConnection>::instance(void)::{lambda(void)#1} &&>>);
  }
  return CADeprecated::TSingleton<AURegistrationServerConnection>::sInstance;
}

void IPCAUClient::ConnectToRegistrationServer(atomic_uint *volatile *this)
{
  mach_msg_return_t v12;
  mach_port_name_t v13;
  mach_port_name_t v14;
  NSObject *v15;
  CFDataRef theData;
  CFTypeRef v17;
  CFStringRef Identifier;
  atomic_uint *volatile *v19;
  char v20;
  uint8_t buf[4];
  mach_port_name_t rcv_name[9];
  const UInt8 *v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;

  BOOL v28 = *MEMORY[0x1E4F143B8];
  uint64_t v19 = this;
  float v20 = (*((uint64_t (**)(atomic_uint *volatile *))*this + 2))(this);
  MainBundle = CFBundleGetMainBundle();
  uint64_t v3 = MainBundle;
  if (MainBundle)
  {
    Identifier = CFBundleGetIdentifier(MainBundle);
    CFTypeRef ValueForInfoDictionaryKey = CFBundleGetValueForInfoDictionaryKey(v3, (CFStringRef)*MEMORY[0x1E4F1CC48]);
    BOOL v17 = ValueForInfoDictionaryKey;
    if (Identifier)
    {
      if (ValueForInfoDictionaryKey)
      {
        CASerializer::CASerializer((CASerializer *)&theData, 0);
        operator<<();
        operator<<();
        mach_port_name_t v5 = *(_DWORD *)(CADeprecated::TSingleton<AURegistrationServerConnection>::instance() + 48);
        unsigned int explicit = atomic_load_explicit(this[34], memory_order_acquire);
        int Length = (int)theData;
        if (theData)
        {
          BytePtr = CFDataGetBytePtr(theData);
          int Length = (int)theData;
          if (theData) {
            int Length = CFDataGetLength(theData);
          }
        }
        else
        {
          BytePtr = 0;
        }
        memset(rcv_name, 0, 32);
        rcv_name[5] = 2;
        rcv_name[6] = explicit;
        rcv_name[8] = 1245184;
        uint64_t v23 = BytePtr;
        int v24 = 16777472;
        uint64_t v25 = Length;
        unint64_t v26 = *MEMORY[0x1E4F14068];
        int64_t v27 = Length;
        mach_port_name_t reply_port = mig_get_reply_port();
        rcv_name[1] = v5;
        rcv_name[2] = reply_port;
        *(_DWORD *)buf = -2147478253;
        *(void *)&rcv_name[3] = 0x15F9600000000;
        if (MEMORY[0x1E4F14B18])
        {
          voucher_mach_msg_set((mach_msg_header_t *)buf);
          mach_port_name_t reply_port = rcv_name[2];
        }
        __int16 v12 = mach_msg((mach_msg_header_t *)buf, 275, 0x44u, 0x2Cu, reply_port, gMediaServerTimeout, 0);
        uint64_t v13 = v12;
        if ((v12 - 268435458) <= 0xE && ((1 << (v12 - 2)) & 0x4003) != 0)
        {
          mig_put_reply_port(rcv_name[2]);
        }
        else
        {
          if (!v12)
          {
            if (rcv_name[4] == 71)
            {
              uint64_t v14 = -308;
            }
            else if (rcv_name[4] == 90106)
            {
              uint64_t v14 = -300;
              if ((*(_DWORD *)buf & 0x80000000) == 0 && rcv_name[0] == 36 && !rcv_name[1])
              {
                uint64_t v14 = rcv_name[7];
                if (!rcv_name[7]) {
                  goto LABEL_40;
                }
              }
            }
            else
            {
              uint64_t v14 = -301;
            }
LABEL_43:
            mach_msg_destroy((mach_msg_header_t *)buf);
            uint64_t v13 = v14;
LABEL_44:
            if (kInterAppAudioScope)
            {
              uint32_t v15 = *(NSObject **)kInterAppAudioScope;
              if (!*(void *)kInterAppAudioScope) {
                goto LABEL_50;
              }
            }
            else
            {
              uint32_t v15 = MEMORY[0x1E4F14500];
            }
            if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              *(void *)rcv_name = "IPCAUClient.cpp";
              LOWORD(rcv_name[2]) = 1024;
              *(mach_port_name_t *)((char *)&rcv_name[2] + 2) = 139;
              HIWORD(rcv_name[3]) = 1024;
              rcv_name[4] = v13;
              _os_log_impl(&dword_18FEC0000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d IPCAUClient: can't connect to server (%d)", buf, 0x18u);
            }
            goto LABEL_50;
          }
          mig_dealloc_reply_port(rcv_name[2]);
        }
        uint64_t v14 = 268435460;
        if (v13 == 268435460)
        {
          if ((*(_WORD *)buf & 0x1F00) == 0x1100) {
            mach_port_deallocate(*MEMORY[0x1E4F14960], rcv_name[2]);
          }
          goto LABEL_43;
        }
        if (v13) {
          goto LABEL_44;
        }
LABEL_40:
        IPCAUClient::RefreshRemoteAUList((IPCAUClient *)this);
LABEL_50:
        MEMORY[0x192FC7960](&theData);
        goto LABEL_51;
      }
      if (kInterAppAudioScope)
      {
        __int16 v9 = *(NSObject **)kInterAppAudioScope;
        if (!*(void *)kInterAppAudioScope) {
          goto LABEL_51;
        }
      }
      else
      {
        __int16 v9 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)rcv_name = "IPCAUClient.cpp";
        LOWORD(rcv_name[2]) = 1024;
        *(mach_port_name_t *)((char *)&rcv_name[2] + 2) = 129;
        int v10 = "%25s:%-5d IPCAUClient: bundle display name is nil";
        goto LABEL_14;
      }
      goto LABEL_51;
    }
  }
  else
  {
    BOOL v17 = 0;
    Identifier = 0;
  }
  if (kInterAppAudioScope)
  {
    __int16 v9 = *(NSObject **)kInterAppAudioScope;
    if (!*(void *)kInterAppAudioScope) {
      goto LABEL_51;
    }
  }
  else
  {
    __int16 v9 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)rcv_name = "IPCAUClient.cpp";
    LOWORD(rcv_name[2]) = 1024;
    *(mach_port_name_t *)((char *)&rcv_name[2] + 2) = 125;
    int v10 = "%25s:%-5d IPCAUClient: main bundle ID is nil";
LABEL_14:
    _os_log_impl(&dword_18FEC0000, v9, OS_LOG_TYPE_ERROR, v10, buf, 0x12u);
  }
LABEL_51:
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v19);
}

void sub_18FF447D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)va);
  _Unwind_Resume(a1);
}

void AudioToolboxSoftLink::instance(AudioToolboxSoftLink *this)
{
  {
    if (v1)
    {
      AudioToolboxSoftLink::AudioToolboxSoftLink(v1);
    }
  }
}

void sub_18FF44870(_Unwind_Exception *a1)
{
}

void CADeprecated::XBasicMIGServer::~XBasicMIGServer(CADeprecated::XBasicMIGServer *this)
{
  *(void *)this = &unk_1EDF94C90;
  uint64_t v2 = (const void *)*((void *)this + 8);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

{
  uint64_t vars8;

  CADeprecated::XBasicMIGServer::~XBasicMIGServer(this);
  JUMPOUT(0x192FC8940);
}

void IPCAUClient::InterruptionListener(IPCAUClient *this, void *a2, unsigned int a3, _DWORD *a4, const void *a5)
{
  if (*a4 == 1)
  {
    __int16 v12 = this;
    char v13 = (*(uint64_t (**)(IPCAUClient *, void *))(*(void *)this + 16))(this, a2);
    int64_t v6 = (char *)*((void *)this + 39);
    unint64_t v7 = (char *)this + 320;
    if (v6 != v7)
    {
      do
      {
        unsigned int v8 = (IPCAUClient::AUInstance *)*((void *)v6 + 5);
        if (*((unsigned char *)v8 + 84)) {
          IPCAUClient::AUInstance::Uninitialize(v8);
        }
        __int16 v9 = (char *)*((void *)v6 + 1);
        if (v9)
        {
          do
          {
            int v10 = v9;
            __int16 v9 = *(char **)v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            int v10 = (char *)*((void *)v6 + 2);
            BOOL v11 = *(void *)v10 == (void)v6;
            int64_t v6 = v10;
          }
          while (!v11);
        }
        int64_t v6 = v10;
      }
      while (v10 != v7);
    }
    CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v12);
  }
}

void sub_18FF449D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void IPCAUClient::AUInstance::Uninitialize(IPCAUClient::AUInstance *this)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 84))
  {
    *((unsigned char *)this + 84) = 0;
    *((void *)this + 59) = 0;
    mach_port_deallocate(*MEMORY[0x1E4F14960], *((_DWORD *)this + 6));
    *((_DWORD *)this + 6) = 0;
    uint64_t v2 = *((void *)this + 2);
    if (*(_DWORD *)(v2 + 48))
    {
      int v11 = 0;
      IPCAUClient::RemoteAUServer::TransientWaker::TransientWaker(&v9, v2, &v11);
      if (v11)
      {
LABEL_16:
        IPCAUClient::RemoteAUServer::TransientWaker::~TransientWaker((IPCAUClient::RemoteAUServer::TransientWaker *)&v9);
        return;
      }
      if (v10) {
        mach_msg_timeout_t v3 = 0x7FFFFFFF;
      }
      else {
        mach_msg_timeout_t v3 = 10000;
      }
      int v4 = IPCAUClient_Uninitialize(*(_DWORD *)(*((void *)this + 2) + 48), v3, *((_DWORD *)this + 20));
      int v5 = v4;
      if (v4 == 268435459 || v4 == -308)
      {
        if (kInterAppAudioScope)
        {
          int64_t v6 = *(NSObject **)kInterAppAudioScope;
          if (!*(void *)kInterAppAudioScope) {
            goto LABEL_15;
          }
        }
        else
        {
          int64_t v6 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315906;
          char v13 = "IPCAUClient.cpp";
          __int16 v14 = 1024;
          int v15 = 433;
          __int16 v16 = 1024;
          int v17 = v5;
          __int16 v18 = 1024;
          int v19 = -66749;
          _os_log_impl(&dword_18FEC0000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d converting result %d -> %d", buf, 0x1Eu);
        }
      }
LABEL_15:
      uint64_t v7 = *((void *)this + 2);
      uint64_t v8 = CADeprecated::TSingleton<AURegistrationServerConnection>::instance();
      IPCAURegClient_SetProcessWakeState(*(_DWORD *)(v8 + 48), *(_DWORD *)(v7 + 52), 3, buf);
      goto LABEL_16;
    }
  }
}

void sub_18FF44B88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  IPCAUClient::RemoteAUServer::TransientWaker::~TransientWaker((IPCAUClient::RemoteAUServer::TransientWaker *)va);
  _Unwind_Resume(a1);
}

uint64_t *IPCAUClient::RemoteAUServer::TransientWaker::TransientWaker(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  *a1 = a2;
  uint64_t v9 = CADeprecated::TSingleton<IPCAUClient>::instance();
  char v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
  uint64_t v5 = *a1;
  *((unsigned char *)a1 + 8) = 0;
  uint64_t v6 = CADeprecated::TSingleton<AURegistrationServerConnection>::instance();
  int v11 = 0;
  int v7 = IPCAURegClient_SetProcessWakeState(*(_DWORD *)(v6 + 48), *(_DWORD *)(v5 + 52), 0, &v11);
  *((unsigned char *)a1 + 8) = v11 != 0;
  *a3 = v7;
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v9);
  return a1;
}

void sub_18FF44C50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)va);
  _Unwind_Resume(a1);
}

void IPCAUClient::RemoteAUServer::TransientWaker::~TransientWaker(IPCAUClient::RemoteAUServer::TransientWaker *this)
{
  uint64_t v4 = CADeprecated::TSingleton<IPCAUClient>::instance();
  char v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
  uint64_t v2 = *(void *)this;
  uint64_t v3 = CADeprecated::TSingleton<AURegistrationServerConnection>::instance();
  IPCAURegClient_SetProcessWakeState(*(_DWORD *)(v3 + 48), *(_DWORD *)(v2 + 52), 1, &v6);
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v4);
}

void AudioToolboxSoftLink::AudioToolboxSoftLink(AudioToolboxSoftLink *this)
{
  AudioToolboxSoftLink::instance(void)::global = 0;
  off_1E92968C0 = 0;
  char v1 = dlopen("/System/Library/Frameworks/AudioToolbox.framework/AudioToolbox", 1);
  if (!v1) {
    __assert_rtn("AudioToolboxSoftLink", "AudioToolboxSoftLink.h", 27, "lib != nullptr");
  }
  uint64_t v2 = v1;
  AudioToolboxSoftLink::instance(void)::global = dlsym(v1, "AudioSessionAddInterruptionListenerOnPrimarySession");
  if (!AudioToolboxSoftLink::instance(void)::global || (off_1E92968C0 = dlsym(v2, "AudioSessionCheckActive")) == 0) {
    __assert_rtn("init", "DLSymbol.h", 23, "mImpl != nullptr");
  }
}

void IPCAUClient::RefreshRemoteAUList(IPCAUClient *this)
{
  mach_msg_return_t v6;
  unsigned int v7;
  const char **v9;
  const void *v10;
  unsigned char *v11;
  unsigned char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  NSObject *v21;
  NSObject *v22;
  std::recursive_mutex *v23;
  char *v24;
  char *v25;
  int v26;
  const void *v27;
  const void *v28;
  std::recursive_mutex *v29[2];
  void *v30;
  void *__p;
  char *v32;
  char *v33;
  IPCAUClient *v34;
  char v35;
  AudioComponentVector v36;
  CFTypeRef v37;
  AudioComponentVector cf;
  CFTypeRef v39;
  void msg[8];
  AudioComponentVector buf;
  uint64_t v42;

  uint64_t v42 = *MEMORY[0x1E4F143B8];
  int v1 = 268435460;
  long long v34 = this;
  char v35 = (*(uint64_t (**)(IPCAUClient *))(*(void *)this + 16))(this);
  int v2 = 5;
  uint64_t v3 = MEMORY[0x1E4F14B18];
  do
  {
    unsigned int v4 = *(_DWORD *)(CADeprecated::TSingleton<AURegistrationServerConnection>::instance() + 48);
    memset((char *)&msg[4] + 4, 0, 28);
    memset((char *)msg + 4, 0, 32);
    mach_port_name_t reply_port = mig_get_reply_port();
    msg[1] = __PAIR64__(reply_port, v4);
    LODWORD(msg[0]) = 5395;
    msg[2] = 0x15F9700000000;
    if (v3)
    {
      voucher_mach_msg_set((mach_msg_header_t *)msg);
      mach_port_name_t reply_port = HIDWORD(msg[1]);
    }
    int v6 = mach_msg((mach_msg_header_t *)msg, 275, 0x18u, 0x40u, reply_port, gMediaServerTimeout, 0);
    int v7 = v6;
    if ((v6 - 268435458) <= 0xE && ((1 << (v6 - 2)) & 0x4003) != 0)
    {
      mig_put_reply_port(HIDWORD(msg[1]));
      goto LABEL_19;
    }
    if (!v6)
    {
      if (HIDWORD(msg[2]) == 71)
      {
        int v7 = -308;
      }
      else if (HIDWORD(msg[2]) == 90107)
      {
        if ((msg[0] & 0x80000000) != 0)
        {
          int v7 = -300;
          if (LODWORD(msg[3]) != 1 || *(void *)((char *)msg + 4) != 56 || HIBYTE(msg[4]) != 1) {
            goto LABEL_28;
          }
          int v7 = msg[5];
          if (LODWORD(msg[5]) == HIDWORD(msg[6]))
          {
            char v10 = *(const void **)((char *)&msg[3] + 4);
            goto LABEL_34;
          }
        }
        else if (HIDWORD(msg[0]) == 36 && LODWORD(msg[4]))
        {
          if (LODWORD(msg[1])) {
            int v7 = -300;
          }
          else {
            int v7 = msg[4];
          }
          goto LABEL_28;
        }
        int v7 = -300;
      }
      else
      {
        int v7 = -301;
      }
LABEL_28:
      mach_msg_destroy((mach_msg_header_t *)msg);
      goto LABEL_29;
    }
    mig_dealloc_reply_port(HIDWORD(msg[1]));
LABEL_19:
    if (v7 == 268435460)
    {
      if ((msg[0] & 0x1F00) == 0x1100) {
        mach_port_deallocate(*MEMORY[0x1E4F14960], HIDWORD(msg[1]));
      }
      mach_msg_destroy((mach_msg_header_t *)msg);
      goto LABEL_49;
    }
LABEL_29:
    if (v7 != 268435459)
    {
      if (v7)
      {
        int v1 = v7;
        goto LABEL_49;
      }
      char v10 = 0;
LABEL_34:
      CADeserializer::CADeserializer((CADeserializer *)msg, v10);
      std::string __p = 0;
      BOOL v32 = 0;
      uint64_t v33 = 0;
      uint64_t v30 = &unk_1EDF8F810;
      LODWORD(v29[0]) = 0;
      CADeserializer::Read((CADeserializer *)msg, v29);
      int v11 = __p;
      if (LODWORD(v29[0]) > (unint64_t)((v33 - (unsigned char *)__p) >> 3))
      {
        __int16 v12 = v32;
        char v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(LODWORD(v29[0]));
        __int16 v14 = &v13[(v12 - v11) & 0xFFFFFFFFFFFFFFF8];
        __int16 v16 = &v13[8 * v15];
        __int16 v18 = (char *)__p;
        int v17 = v32;
        int v19 = v14;
        if (v32 != __p)
        {
          do
          {
            uint64_t v20 = *((void *)v17 - 1);
            v17 -= 8;
            *((void *)v19 - 1) = v20;
            v19 -= 8;
          }
          while (v17 != v18);
          int v17 = (char *)__p;
        }
        std::string __p = v19;
        BOOL v32 = v14;
        uint64_t v33 = v16;
        if (v17) {
          operator delete(v17);
        }
      }
      if (LODWORD(v29[0]))
      {
        LODWORD(v39) = 0;
        cf.__begin_ = 0;
        v36.__begin_ = 0;
        LODWORD(v37) = 0;
        CADeserializer::Read((CADeserializer *)msg, &v39);
        operator>>();
        CADeserializer::Read((CADeserializer *)msg, &buf);
        CADeserializer::Read((CADeserializer *)msg, (char *)&buf.__begin_ + 4);
        CADeserializer::Read((CADeserializer *)msg, &buf.__end_);
        CADeserializer::Read((CADeserializer *)msg, (char *)&buf.__end_ + 4);
        CADeserializer::Read((CADeserializer *)msg, &buf.__end_cap_);
        operator>>();
        CADeserializer::Read((CADeserializer *)msg, &v37);
        operator new();
      }
      mig_deallocate((vm_address_t)v10, v7);
      if (kInterAppAudioScope)
      {
        int64_t v21 = *(NSObject **)kInterAppAudioScope;
        if (!*(void *)kInterAppAudioScope)
        {
LABEL_58:
          GlobalComponentPluginMgr((uint64_t *)v29);
          uint64_t v23 = v29[1];
          memset(&cf, 0, 24);
          cf.mSorted = 1;
          int v24 = (char *)__p;
          uint64_t v25 = v32;
          if (__p != v32)
          {
            do
            {
              unint64_t v26 = *(_DWORD *)(*(void *)v24 + 8);
              if (v26 != getpid())
              {
                int64_t v27 = *(const void **)(*(void *)v24 + 16);
                if (v27) {
                  CFRetain(*(CFTypeRef *)(*(void *)v24 + 16));
                }
                applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v39, v27);
                BOOL v28 = *(const void **)(*(void *)v24 + 48);
                if (v28) {
                  CFRetain(*(CFTypeRef *)(*(void *)v24 + 48));
                }
                applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v37, v28);
                operator new();
              }
              v24 += 8;
            }
            while (v24 != v25);
          }
          AudioComponentVector::subtract(&buf, &cf, (AudioComponentVector *)&v23->__m_.__opaque[40]);
          AudioComponentVector::subtract(&v36, (AudioComponentVector *)&v23->__m_.__opaque[40], &cf);
          AudioComponentMgr_Base::addAndRemoveComponents((char **)v23, &buf, (const AudioComponentVector *)v36.__begin_, (const AudioComponentVector *)v36.__end_);
          if (&v23->__m_.__opaque[40] != (char *)&cf) {
            std::vector<std::shared_ptr<APComponent>>::__assign_with_size[abi:ne180100]<std::shared_ptr<APComponent>*,std::shared_ptr<APComponent>*>((uint64_t *)&v23->__m_.__opaque[40], (uint64_t *)cf.__begin_, (uint64_t *)cf.__end_, ((char *)cf.__end_ - (char *)cf.__begin_) >> 4);
          }
          v23[1].__m_.__opaque[0] = cf.mSorted;
          unint64_t v39 = &v36;
          std::vector<std::shared_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
          v36.__begin_ = &buf;
          std::vector<std::shared_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
          buf.__begin_ = &cf;
          std::vector<std::shared_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
          if (v29[0]) {
            std::recursive_mutex::unlock(v29[0]);
          }
          dispatch_async(MEMORY[0x1E4F14428], &__block_literal_global_485);
          OwnedPtrVector<PublishedAU *>::~OwnedPtrVector(&v30);
          MEMORY[0x192FC7A90](msg);
          goto LABEL_71;
        }
      }
      else
      {
        int64_t v21 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf.__begin_) = 136315650;
        *(void **)((char *)&buf.__begin_ + 4) = "IPCAUClient.cpp";
        WORD2(buf.__end_) = 1024;
        *(_DWORD *)((char *)&buf.__end_ + 6) = 175;
        WORD1(buf.__end_cap_.__value_) = 1024;
        HIDWORD(buf.__end_cap_.__value_) = (unint64_t)(v32 - (unsigned char *)__p) >> 3;
        _os_log_impl(&dword_18FEC0000, v21, OS_LOG_TYPE_DEBUG, "%25s:%-5d Fetched %d remote AU's", (uint8_t *)&buf, 0x18u);
      }
      goto LABEL_58;
    }
    sleep(1u);
    uint64_t v9 = (const char **)CADeprecated::TSingleton<AURegistrationServerConnection>::instance();
    AURegistrationServerConnection::Connect(v9);
    --v2;
  }
  while (v2);
  int v1 = 268435459;
LABEL_49:
  if (kInterAppAudioScope)
  {
    unint64_t v22 = *(NSObject **)kInterAppAudioScope;
    if (!*(void *)kInterAppAudioScope) {
      goto LABEL_71;
    }
  }
  else
  {
    unint64_t v22 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
  {
    LODWORD(msg[0]) = 136315650;
    *(void *)((char *)msg + 4) = "IPCAUClient.cpp";
    WORD2(msg[1]) = 1024;
    *(_DWORD *)((char *)&msg[1] + 6) = 165;
    WORD1(msg[2]) = 1024;
    HIDWORD(msg[2]) = v1;
    _os_log_impl(&dword_18FEC0000, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d IPCAUClient: error fetching list (%d)", (uint8_t *)msg, 0x18u);
  }
LABEL_71:
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v34);
}

void sub_18FF456E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::recursive_mutex *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, __int16 *a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  a19 = (__int16 *)(v32 - 160);
  std::vector<std::shared_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  a19 = &a25;
  std::vector<std::shared_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  if (a11) {
    std::recursive_mutex::unlock(a11);
  }
  OwnedPtrVector<PublishedAU *>::~OwnedPtrVector(&a13);
  MEMORY[0x192FC7A90](&a32);
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&a17);
  _Unwind_Resume(a1);
}

void *OwnedPtrVector<PublishedAU *>::~OwnedPtrVector(void *a1)
{
  *a1 = &unk_1EDF8F810;
  int v2 = (char *)a1[1];
  uint64_t v3 = (char *)a1[2];
  if (v2 != v3)
  {
    unsigned int v4 = (char *)a1[1];
    do
    {
      if (*(void *)v4) {
        (*(void (**)(void))(**(void **)v4 + 8))(*(void *)v4);
      }
      v4 += 8;
    }
    while (v4 != v3);
    char v5 = (unsigned char *)a1[2];
    uint64_t v6 = v5 - v3;
    if (v5 != v3) {
      memmove(v2, v3, v5 - v3);
    }
    int v7 = (char *)a1[1];
    a1[2] = &v2[v6];
    int v2 = v7;
  }
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void ___ZN11IPCAUClient19RefreshRemoteAUListEv_block_invoke()
{
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterPostNotification(LocalCenter, @"com.apple.coreaudio.AudioComponentRegistrationsChanged", 0, 0, 1u);
}

void OwnedPtrVector<PublishedAU *>::~OwnedPtrVector(void *a1)
{
  OwnedPtrVector<PublishedAU *>::~OwnedPtrVector(a1);
  JUMPOUT(0x192FC8940);
}

uint64_t std::__split_buffer<std::function<void ()(void)>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)(i - 32));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__function::__func<IPCAUClient::IPCAUClient(void)::$_0,std::allocator<IPCAUClient::IPCAUClient(void)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
}

uint64_t std::__function::__func<IPCAUClient::IPCAUClient(void)::$_0,std::allocator<IPCAUClient::IPCAUClient(void)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EDF9E7E8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<IPCAUClient::IPCAUClient(void)::$_0,std::allocator<IPCAUClient::IPCAUClient(void)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EDF9E7E8;
  result[1] = v3;
  return result;
}

void std::__function::__func<IPCAUClient::IPCAUClient(void)::$_0,std::allocator<IPCAUClient::IPCAUClient(void)::$_0>,void ()(void)>::~__func()
{
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<CADeprecated::TSingleton<AURegistrationServerConnection>::instance(void)::{lambda(void)#1} &&>>()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_18FF45C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  MEMORY[0x192FC7860]((char *)v9 + 192);
  std::vector<std::function<void ()(void)>>::__destroy_vector::operator()[abi:ne180100]((void ***)&object);
  CADeprecated::XRemoteMachServer::~XRemoteMachServer(v9);
  MEMORY[0x192FC8940](v9, 0x10F1C405F9E03EALL);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<CADeprecated::XMachReceivePort>::__on_zero_shared()
{
}

void std::__shared_ptr_emplace<CADeprecated::XMachReceivePort>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2428;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

void std::__shared_ptr_emplace<CADeprecated::XMachReceivePort>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2428;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t CADeprecated::XRemoteMachServer::GetDebugName(CADeprecated::XRemoteMachServer *this)
{
  return *((void *)this + 4);
}

void IPCAUClient::RemoteAUServer::~RemoteAUServer(IPCAUClient::RemoteAUServer *this)
{
  IPCAUClient::RemoteAUServer::~RemoteAUServer(this);
  JUMPOUT(0x192FC8940);
}

{
  NSObject *v2;
  const void *v3;
  void *v4;
  void *v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  IPCAUClient::RemoteAUServer *v11;
  uint64_t v12;

  __int16 v12 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1EDF94C28;
  if (kInterAppAudioScope)
  {
    uint64_t v2 = *(NSObject **)kInterAppAudioScope;
    if (!*(void *)kInterAppAudioScope) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = 136315650;
    int v7 = "IPCAUClient.cpp";
    uint64_t v8 = 1024;
    uint64_t v9 = 392;
    char v10 = 2048;
    int v11 = this;
    _os_log_impl(&dword_18FEC0000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d destruct %p", (uint8_t *)&v6, 0x1Cu);
  }
LABEL_7:
  uint64_t v3 = (const void *)*((void *)this + 21);
  if (v3) {
    CFRelease(v3);
  }
  unsigned int v4 = (void *)*((void *)this + 25);
  if (v4)
  {
    *((void *)this + 26) = v4;
    operator delete(v4);
  }
  char v5 = (void *)*((void *)this + 22);
  if (v5)
  {
    *((void *)this + 23) = v5;
    operator delete(v5);
  }
  CADeprecated::XRemoteMachServer::~XRemoteMachServer(this);
}

void sub_18FF45EA8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

BOOL TOpaqueObject<IPCAUClient::AUInstance,unsigned int,BaseOpaqueObject>::isa(uint64_t a1, void *a2)
{
  return a2 == &TOpaqueRTTI<IPCAUClient::AUInstance>::sRTTI || a2 == (void *)MEMORY[0x1E4FB9468];
}

void IPCAUClient::AUInstance::~AUInstance(IPCAUClient::AUInstance *this)
{
  IPCAUClient::AUInstance::~AUInstance(this);
  JUMPOUT(0x192FC8940);
}

{
  const void *v2;
  void *v3;
  void **v4;
  uint64_t vars8;

  *(void *)this = &unk_1EDF94BF8;
  uint64_t v2 = (const void *)*((void *)this + 65);
  if (v2) {
    _Block_release(v2);
  }
  MEMORY[0x192FC7910]((char *)this + 384);
  *((void *)this + 35) = &unk_1EDF93440;
  unsigned int v4 = (void **)((char *)this + 344);
  std::vector<IPCAUSharedMemoryBase::Element>::__destroy_vector::operator()[abi:ne180100](&v4);
  SharableMemoryBlock::~SharableMemoryBlock((xpc_object_t *)this + 35);
  TThreadSafeList<IPCAUClient::RenderCallback>::~TThreadSafeList((uint64_t)this + 128);
  uint64_t v3 = (void *)*((void *)this + 13);
  if (v3)
  {
    *((void *)this + 14) = v3;
    operator delete(v3);
  }
  BaseOpaqueObject::~BaseOpaqueObject(this);
}

void std::vector<IPCAUSharedMemoryBase::Element>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  int v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    char v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::__destroy_at[abi:ne180100]<IPCAUSharedMemoryBase::Element,0>(v4);
      }
      while ((void *)v4 != v2);
      char v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void SharableMemoryBlock::~SharableMemoryBlock(xpc_object_t *this)
{
  *this = (xpc_object_t)(MEMORY[0x1E4FB94A8] + 16);
  (*(void (**)(void))(MEMORY[0x1E4FB94A8] + 32))();
  xpc_release(this[6]);
  this[6] = 0;
}

uint64_t TThreadSafeList<IPCAUClient::RenderCallback>::~TThreadSafeList(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    do
    {
      *(void *)a1 = *v2;
      MEMORY[0x192FC8940]();
      uint64_t v2 = *(void **)a1;
    }
    while (*(void *)a1);
  }
  while (1)
  {
    uint64_t v3 = *(void **)(a1 + 8);
    if (!v3) {
      break;
    }
    *(void *)(a1 + 8) = *v3;
    MEMORY[0x192FC8940]();
  }
  while (1)
  {
    uint64_t v4 = *(void **)(a1 + 16);
    if (!v4) {
      break;
    }
    *(void *)(a1 + 16) = *v4;
    MEMORY[0x192FC8940]();
  }
  return a1;
}

void std::__destroy_at[abi:ne180100]<IPCAUSharedMemoryBase::Element,0>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v2) {
    std::default_delete<CADeprecated::CABufferList>::operator()[abi:ne180100](v2);
  }
  uint64_t v3 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v3)
  {
    std::default_delete<CADeprecated::CABufferList>::operator()[abi:ne180100](v3);
  }
}

void std::default_delete<CADeprecated::CABufferList>::operator()[abi:ne180100](void *__p)
{
  uint64_t v2 = __p[1];
  if (v2) {
    MEMORY[0x192FC8910](v2, 0x1000C8077774924);
  }
  operator delete(__p);
}

void IPCAUSharedMemoryBase::Free(IPCAUSharedMemoryBase *this)
{
  SharableMemoryBlock::Free(this);
  if (!*((unsigned char *)this + 92))
  {
    uint64_t v3 = *((void *)this + 8);
    for (uint64_t i = *((void *)this + 9); i != v3; std::__destroy_at[abi:ne180100]<IPCAUSharedMemoryBase::Element,0>(i))
      i -= 56;
    *((void *)this + 9) = v3;
  }
}

void IPCAUSharedMemoryBase::~IPCAUSharedMemoryBase(xpc_object_t *this)
{
  *this = &unk_1EDF93440;
  uint64_t v2 = this + 8;
  std::vector<IPCAUSharedMemoryBase::Element>::__destroy_vector::operator()[abi:ne180100](&v2);
  SharableMemoryBlock::~SharableMemoryBlock(this);
  JUMPOUT(0x192FC8940);
}

{
  void **v2;
  uint64_t vars8;

  *this = &unk_1EDF93440;
  uint64_t v2 = this + 8;
  std::vector<IPCAUSharedMemoryBase::Element>::__destroy_vector::operator()[abi:ne180100](&v2);
  SharableMemoryBlock::~SharableMemoryBlock(this);
}

OSStatus AudioOutputUnitPublish(const AudioComponentDescription *inDesc, CFStringRef inName, UInt32 inVersion, AudioUnit inOutputUnit)
{
  uint64_t v5 = *(void *)&inVersion;
  SystemAUsSoftLink::instance((SystemAUsSoftLink *)inDesc);
  uint64_t v8 = (uint64_t (*)(const AudioComponentDescription *, CFStringRef, uint64_t, AudioUnit))off_1EB3D5068;
  return v8(inDesc, inName, v5, inOutputUnit);
}

void CADeprecated::CAGuard::Locker::~Locker(CADeprecated::CAGuard::Locker *this)
{
  if (*((unsigned char *)this + 8)) {
    (*(void (**)(void))(**(void **)this + 24))();
  }
}

uint64_t IPCAUClient::AUInstance::CloseMethod(IPCAUClient::AUInstance *this, void *a2)
{
  mach_msg_return_t v38;
  mach_msg_return_t v39;
  int v40;
  mach_msg_timeout_t v41;
  int v42;
  mach_port_name_t reply_port;
  uint64_t v44;
  uint64_t v45;
  NSObject *v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  unsigned char buf[48];
  uint64_t v52;

  uint64_t v52 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)this + 4);
  uint64_t v4 = *(void *)(v3 + 16);
  uint64_t v5 = CADeprecated::TSingleton<AURegistrationServerConnection>::instance();
  uint64_t v6 = IPCAURegClient_SetProcessWakeState(*(_DWORD *)(v5 + 48), *(_DWORD *)(v4 + 52), 3, buf);
  if (!kInterAppAudioScope)
  {
    int v7 = MEMORY[0x1E4F14500];
LABEL_5:
    uint64_t v6 = os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG);
    if (v6)
    {
      uint64_t v8 = *(void *)(v3 + 72);
      *(_DWORD *)buf = 136316162;
      *(void *)&uint8_t buf[4] = "IPCAUClient.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 501;
      *(_WORD *)&buf[18] = 2048;
      *(void *)&buf[20] = this;
      *(_WORD *)&buf[28] = 2048;
      *(void *)&buf[30] = v3;
      *(_WORD *)&buf[38] = 2048;
      *(void *)&buf[40] = v8;
      _os_log_impl(&dword_18FEC0000, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d self %p This %p instance %p", buf, 0x30u);
    }
    goto LABEL_7;
  }
  int v7 = *(NSObject **)kInterAppAudioScope;
  if (*(void *)kInterAppAudioScope) {
    goto LABEL_5;
  }
LABEL_7:
  uint64_t v9 = (uint64_t *)CADeprecated::TSingleton<IPCAUClient>::instance(v6);
  *(void *)buf = v9;
  buf[8] = (*(uint64_t (**)(uint64_t *))(*v9 + 16))(v9);
  char v10 = (uint64_t *)v9[40];
  if (v10)
  {
    unint64_t v11 = *(void *)(v3 + 72);
    __int16 v12 = v9 + 40;
    char v13 = (void *)v9[40];
    do
    {
      unint64_t v14 = v13[4];
      BOOL v15 = v14 >= v11;
      if (v14 >= v11) {
        __int16 v16 = v13;
      }
      else {
        __int16 v16 = v13 + 1;
      }
      if (v15) {
        __int16 v12 = v13;
      }
      char v13 = (void *)*v16;
    }
    while (*v16);
    if (v12 != v9 + 40 && v11 >= v12[4])
    {
      int v17 = (uint64_t *)v12[1];
      if (v17)
      {
        do
        {
          __int16 v18 = v17;
          int v17 = (uint64_t *)*v17;
        }
        while (v17);
      }
      else
      {
        int v19 = v12;
        do
        {
          __int16 v18 = (uint64_t *)v19[2];
          BOOL v20 = *v18 == (void)v19;
          int v19 = v18;
        }
        while (!v20);
      }
      if ((uint64_t *)v9[39] == v12) {
        v9[39] = (uint64_t)v18;
      }
      --v9[41];
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v10, v12);
      operator delete(v12);
    }
  }
  uint64_t v21 = *(void *)(v3 + 16);
  uint64_t v23 = *(char **)(v21 + 176);
  unint64_t v22 = *(char **)(v21 + 184);
  while (v23 != v22)
  {
    if (*(void *)v23 == v3)
    {
      int64_t v24 = v22 - (v23 + 8);
      if (v22 != v23 + 8) {
        memmove(v23, v23 + 8, v22 - (v23 + 8));
      }
      *(void *)(v21 + 184) = &v23[v24];
      break;
    }
    v23 += 8;
  }
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)buf);
  char v50 = 0;
  IPCAUClient::RemoteAUServer::TransientWaker::TransientWaker(&v48, *(void *)(v3 + 16), &v50);
  uint64_t v25 = v50;
  unint64_t v26 = (void *)MEMORY[0x1E4F14068];
  uint64_t v27 = MEMORY[0x1E4F14B18];
  if (v50) {
    goto LABEL_35;
  }
  unint64_t v40 = *(_DWORD *)(*(void *)(v3 + 16) + 48);
  if (v49) {
    unint64_t v41 = 0x7FFFFFFF;
  }
  else {
    unint64_t v41 = 10000;
  }
  uint64_t v42 = *(_DWORD *)(v3 + 80);
  memset(&buf[4], 0, 40);
  *(void *)&buf[24] = *MEMORY[0x1E4F14068];
  *(_DWORD *)&buf[32] = v42;
  mach_port_name_t reply_port = mig_get_reply_port();
  *(_DWORD *)&buf[8] = v40;
  *(_DWORD *)&unsigned char buf[12] = reply_port;
  *(_DWORD *)buf = 5395;
  *(void *)&buf[16] = 0x1605900000000;
  if (v27)
  {
    voucher_mach_msg_set((mach_msg_header_t *)buf);
    mach_port_name_t reply_port = *(_DWORD *)&buf[12];
  }
  size_t v44 = mach_msg((mach_msg_header_t *)buf, 275, 0x24u, 0x2Cu, reply_port, v41, 0);
  BOOL v45 = v44;
  if ((v44 - 268435458) <= 0xE && ((1 << (v44 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(*(mach_port_t *)&buf[12]);
  }
  else
  {
    if (!v44)
    {
      if (*(_DWORD *)&buf[20] == 71)
      {
        BOOL v45 = 4294966988;
      }
      else if (*(_DWORD *)&buf[20] == 90301)
      {
        BOOL v45 = 4294966996;
        if ((*(_DWORD *)buf & 0x80000000) == 0 && *(_DWORD *)&buf[4] == 36 && !*(_DWORD *)&buf[8])
        {
          BOOL v45 = *(unsigned int *)&buf[32];
          if (!*(_DWORD *)&buf[32])
          {
            uint64_t v25 = 0;
            goto LABEL_35;
          }
        }
      }
      else
      {
        BOOL v45 = 4294966995;
      }
      goto LABEL_82;
    }
    mig_dealloc_reply_port(*(mach_port_t *)&buf[12]);
  }
  if (v45 != 268435460) {
    goto LABEL_83;
  }
  if ((*(_WORD *)buf & 0x1F00) == 0x1100) {
    mach_port_deallocate(*MEMORY[0x1E4F14960], *(mach_port_name_t *)&buf[12]);
  }
  BOOL v45 = 268435460;
LABEL_82:
  mach_msg_destroy((mach_msg_header_t *)buf);
LABEL_83:
  if (v45 != 268435459 && v45 != -308)
  {
    uint64_t v25 = v45;
    goto LABEL_35;
  }
  uint64_t v25 = 4294900547;
  if (kInterAppAudioScope)
  {
    uint64_t v47 = *(NSObject **)kInterAppAudioScope;
    if (!*(void *)kInterAppAudioScope) {
      goto LABEL_35;
    }
  }
  else
  {
    uint64_t v47 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "IPCAUClient.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 433;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v45;
    *(_WORD *)&buf[24] = 1024;
    *(_DWORD *)&buf[26] = -66749;
    _os_log_impl(&dword_18FEC0000, v47, OS_LOG_TYPE_DEFAULT, "%25s:%-5d converting result %d -> %d", buf, 0x1Eu);
  }
LABEL_35:
  uint64_t v28 = sleep(1u);
  uint64_t v29 = CADeprecated::TSingleton<IPCAUClient>::instance(v28);
  unint64_t v30 = *(void *)(v29 + 344) - *(void *)(v29 + 336);
  if ((int)(v30 >> 3) >= 1)
  {
    unint64_t v31 = (v30 >> 3) + 1;
    do
    {
      uint64_t v32 = *(void *)(v29 + 336) + 8 * (v31 - 2);
      uint64_t v33 = *(void **)v32;
      if (*(void *)(*(void *)v32 + 176) == *(void *)(*(void *)v32 + 184) && v33[25] == v33[26])
      {
        uint64_t v34 = *(void *)(v29 + 344);
        uint64_t v35 = v34 - (v32 + 8);
        if (v34 != v32 + 8) {
          memmove((void *)(*(void *)(v29 + 336) + 8 * (v31 - 2)), (const void *)(v32 + 8), v34 - (v32 + 8));
        }
        *(void *)(v29 + 344) = v32 + v35;
        (*(void (**)(void *))(*v33 + 8))(v33);
      }
      --v31;
    }
    while (v31 > 1);
  }
  int v36 = *(_DWORD *)(CADeprecated::TSingleton<AURegistrationServerConnection>::instance() + 48);
  *(void *)&buf[24] = *v26;
  *(_OWORD *)&buf[32] = *(_OWORD *)(v3 + 56);
  mach_port_name_t v37 = mig_get_reply_port();
  *(void *)buf = 5395;
  *(_DWORD *)&buf[8] = v36;
  *(_DWORD *)&unsigned char buf[12] = v37;
  *(void *)&buf[16] = 0x15F9A00000000;
  if (v27)
  {
    voucher_mach_msg_set((mach_msg_header_t *)buf);
    mach_port_name_t v37 = *(_DWORD *)&buf[12];
  }
  long long v38 = mach_msg((mach_msg_header_t *)buf, 275, 0x30u, 0x2Cu, v37, gMediaServerTimeout, 0);
  unint64_t v39 = v38;
  if ((v38 - 268435458) <= 0xE && ((1 << (v38 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(*(mach_port_t *)&buf[12]);
    goto LABEL_64;
  }
  if (v38)
  {
    mig_dealloc_reply_port(*(mach_port_t *)&buf[12]);
LABEL_64:
    if (v39 == 268435460)
    {
      if ((*(_WORD *)buf & 0x1F00) == 0x1100) {
        mach_port_deallocate(*MEMORY[0x1E4F14960], *(mach_port_name_t *)&buf[12]);
      }
      goto LABEL_67;
    }
    goto LABEL_68;
  }
  if (*(_DWORD *)&buf[20] != 90110
    || (*(_DWORD *)buf & 0x80000000) != 0
    || *(_DWORD *)&buf[4] != 36
    || *(_DWORD *)&buf[8]
    || *(_DWORD *)&buf[32])
  {
LABEL_67:
    mach_msg_destroy((mach_msg_header_t *)buf);
  }
LABEL_68:
  IPCAUClient::RemoteAUServer::TransientWaker::~TransientWaker((IPCAUClient::RemoteAUServer::TransientWaker *)&v48);
  return v25;
}

void sub_18FF46A84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  IPCAUClient::RemoteAUServer::TransientWaker::~TransientWaker((IPCAUClient::RemoteAUServer::TransientWaker *)va);
  _Unwind_Resume(a1);
}

uint64_t IPCAUClient::AUInstance::OpenMethod(IPCAUClient::AUInstance *this, const UInt8 *a2, OpaqueAudioComponentInstance *a3)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = 4294900547;
  uint64_t v4 = *((void *)this + 4);
  if (*(_DWORD *)(*(void *)(v4 + 16) + 48))
  {
    CFBundleRef MainBundle = CFBundleGetMainBundle();
    if (MainBundle)
    {
      uint64_t v8 = MainBundle;
      unsigned int v52 = 0;
      IPCAUClient::RemoteAUServer::TransientWaker::TransientWaker(&v50, *(void *)(v4 + 16), &v52);
      uint64_t v9 = v52;
      if (v52)
      {
LABEL_91:
        IPCAUClient::RemoteAUServer::TransientWaker::~TransientWaker((IPCAUClient::RemoteAUServer::TransientWaker *)&v50);
        return v9;
      }
      theData[1] = (CFDataRef)CFBundleGetIdentifier(v8);
      CASerializer::CASerializer((CASerializer *)theData, 0);
      uint64_t v10 = operator<<();
      int v11 = *(_DWORD *)(*(void *)(v4 + 16) + 48);
      if (v51) {
        mach_msg_timeout_t v12 = 0x7FFFFFFF;
      }
      else {
        mach_msg_timeout_t v12 = 10000;
      }
      unsigned int explicit = atomic_load_explicit(*(atomic_uint *volatile *)(CADeprecated::TSingleton<IPCAUClient>::instance(v10) + 272), memory_order_acquire);
      int v14 = *(_DWORD *)(v4 + 8);
      long long v47 = *(_OWORD *)(v4 + 28);
      int v48 = *(_DWORD *)(v4 + 44);
      int Length = (int)theData[0];
      if (theData[0])
      {
        BytePtr = CFDataGetBytePtr(theData[0]);
        int Length = (int)theData[0];
        if (theData[0]) {
          int Length = CFDataGetLength(theData[0]);
        }
      }
      else
      {
        BytePtr = 0;
      }
      long long v18 = *(_OWORD *)(v4 + 56);
      memset(&buf[4], 0, 32);
      *(_DWORD *)&buf[24] = 2;
      *(_DWORD *)&buf[28] = explicit;
      *(_DWORD *)&buf[36] = 1245184;
      unint64_t v54 = BytePtr;
      LODWORD(v55) = 16777472;
      HIDWORD(v55) = Length;
      uint64_t v56 = *MEMORY[0x1E4F14068];
      long long v58 = v47;
      int v57 = v14;
      int v59 = v48;
      int v60 = Length;
      long long v61 = v18;
      mach_port_name_t reply_port = mig_get_reply_port();
      *(_DWORD *)&buf[8] = v11;
      *(_DWORD *)&unsigned char buf[12] = reply_port;
      *(_DWORD *)buf = -2147478253;
      *(void *)&buf[16] = 0x1605800000000;
      if (MEMORY[0x1E4F14B18])
      {
        voucher_mach_msg_set((mach_msg_header_t *)buf);
        mach_port_name_t reply_port = *(_DWORD *)&buf[12];
      }
      uint64_t v20 = mach_msg((mach_msg_header_t *)buf, 275, 0x6Cu, 0x30u, reply_port, v12, 0);
      uint64_t v21 = v20;
      if ((v20 - 268435458) <= 0xE && ((1 << (v20 - 2)) & 0x4003) != 0)
      {
        mig_put_reply_port(*(mach_port_t *)&buf[12]);
        goto LABEL_36;
      }
      if (v20)
      {
        mig_dealloc_reply_port(*(mach_port_t *)&buf[12]);
LABEL_36:
        if (v21 == 268435460)
        {
          if ((*(_WORD *)buf & 0x1F00) == 0x1100) {
            mach_port_deallocate(*MEMORY[0x1E4F14960], *(mach_port_name_t *)&buf[12]);
          }
          mach_msg_destroy((mach_msg_header_t *)buf);
          uint64_t v3 = 268435460;
          goto LABEL_54;
        }
LABEL_45:
        if (v21 == 268435459 || v21 == -308)
        {
          if (kInterAppAudioScope)
          {
            uint64_t v23 = *(NSObject **)kInterAppAudioScope;
            if (!*(void *)kInterAppAudioScope)
            {
LABEL_90:
              MEMORY[0x192FC7960](theData);
              uint64_t v9 = v3;
              goto LABEL_91;
            }
          }
          else
          {
            uint64_t v23 = MEMORY[0x1E4F14500];
          }
          uint64_t v20 = os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
          if (v20)
          {
            *(_DWORD *)buf = 136315906;
            *(void *)&uint8_t buf[4] = "IPCAUClient.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 433;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v21;
            *(_WORD *)&buf[24] = 1024;
            *(_DWORD *)&buf[26] = -66749;
            _os_log_impl(&dword_18FEC0000, v23, OS_LOG_TYPE_DEFAULT, "%25s:%-5d converting result %d -> %d", buf, 0x1Eu);
          }
        }
        else
        {
          uint64_t v3 = v21;
        }
LABEL_54:
        if (kInterAppAudioScope)
        {
          int64_t v24 = *(NSObject **)kInterAppAudioScope;
          if (!*(void *)kInterAppAudioScope) {
            goto LABEL_60;
          }
        }
        else
        {
          int64_t v24 = MEMORY[0x1E4F14500];
        }
        uint64_t v20 = os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG);
        if (v20)
        {
          *(_DWORD *)buf = 136316418;
          *(void *)&uint8_t buf[4] = "IPCAUClient.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 488;
          *(_WORD *)&buf[18] = 2048;
          *(void *)&buf[20] = this;
          *(_WORD *)&buf[28] = 2048;
          *(void *)&buf[30] = v4;
          *(_WORD *)&buf[38] = 2048;
          unint64_t v54 = a2;
          LOWORD(v55) = 1024;
          *(_DWORD *)((char *)&v55 + 2) = v3;
          _os_log_impl(&dword_18FEC0000, v24, OS_LOG_TYPE_DEBUG, "%25s:%-5d self %p This %p instance %p err %d", buf, 0x36u);
        }
LABEL_60:
        if (!v3)
        {
          *(void *)(v4 + 72) = a2;
          uint64_t v25 = CADeprecated::TSingleton<IPCAUClient>::instance(v20);
          *(void *)buf = v25;
          buf[8] = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 16))(v25);
          unint64_t v26 = *(void *)(v4 + 72);
          uint64_t v27 = *(void **)(v25 + 320);
          if (v27)
          {
            while (1)
            {
              while (1)
              {
                uint64_t v28 = v27;
                unint64_t v29 = v27[4];
                if (v26 >= v29) {
                  break;
                }
                uint64_t v27 = (void *)*v28;
                unint64_t v30 = v28;
                if (!*v28) {
                  goto LABEL_69;
                }
              }
              if (v29 >= v26) {
                break;
              }
              uint64_t v27 = (void *)v28[1];
              if (!v27)
              {
                unint64_t v30 = v28 + 1;
                goto LABEL_69;
              }
            }
          }
          else
          {
            unint64_t v30 = (void *)(v25 + 320);
            uint64_t v28 = (void *)(v25 + 320);
LABEL_69:
            unint64_t v31 = operator new(0x30uLL);
            *(void *)&long long v32 = v26;
            *((void *)&v32 + 1) = v4;
            v31[2] = v32;
            *(void *)unint64_t v31 = 0;
            *((void *)v31 + 1) = 0;
            *((void *)v31 + 2) = v28;
            *unint64_t v30 = v31;
            uint64_t v33 = **(void **)(v25 + 312);
            if (v33)
            {
              *(void *)(v25 + 312) = v33;
              unint64_t v31 = (_OWORD *)*v30;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v25 + 320), (uint64_t *)v31);
            ++*(void *)(v25 + 328);
          }
          uint64_t v34 = *(void **)(v4 + 16);
          int v36 = (void *)v34[23];
          unint64_t v35 = v34[24];
          if ((unint64_t)v36 >= v35)
          {
            long long v38 = (void *)v34[22];
            uint64_t v39 = v36 - v38;
            unint64_t v40 = v39 + 1;
            if ((unint64_t)(v39 + 1) >> 61) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v41 = v35 - (void)v38;
            if (v41 >> 2 > v40) {
              unint64_t v40 = v41 >> 2;
            }
            if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v42 = v40;
            }
            if (v42)
            {
              if (v42 >> 61) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              unint64_t v43 = (char *)operator new(8 * v42);
            }
            else
            {
              unint64_t v43 = 0;
            }
            size_t v44 = &v43[8 * v39];
            *(void *)size_t v44 = v4;
            mach_port_name_t v37 = v44 + 8;
            if (v36 != v38)
            {
              do
              {
                uint64_t v45 = *--v36;
                *((void *)v44 - 1) = v45;
                v44 -= 8;
              }
              while (v36 != v38);
              int v36 = (void *)v34[22];
            }
            v34[22] = v44;
            v34[23] = v37;
            v34[24] = &v43[8 * v42];
            if (v36) {
              operator delete(v36);
            }
          }
          else
          {
            *int v36 = v4;
            mach_port_name_t v37 = v36 + 1;
          }
          v34[23] = v37;
          CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)buf);
          uint64_t v3 = 0;
        }
        goto LABEL_90;
      }
      if (*(_DWORD *)&buf[20] == 71)
      {
        uint64_t v21 = 4294966988;
      }
      else if (*(_DWORD *)&buf[20] == 90300)
      {
        if ((*(_DWORD *)buf & 0x80000000) == 0)
        {
          if (*(_DWORD *)&buf[4] == 40)
          {
            if (!*(_DWORD *)&buf[8])
            {
              uint64_t v21 = *(unsigned int *)&buf[32];
              if (!*(_DWORD *)&buf[32])
              {
                uint64_t v3 = 0;
                *(_DWORD *)(v4 + 80) = *(_DWORD *)&buf[36];
                goto LABEL_54;
              }
              goto LABEL_44;
            }
          }
          else if (*(_DWORD *)&buf[4] == 36)
          {
            if (*(_DWORD *)&buf[8]) {
              BOOL v22 = 1;
            }
            else {
              BOOL v22 = *(_DWORD *)&buf[32] == 0;
            }
            if (v22) {
              uint64_t v21 = 4294966996;
            }
            else {
              uint64_t v21 = *(unsigned int *)&buf[32];
            }
            goto LABEL_44;
          }
        }
        uint64_t v21 = 4294966996;
      }
      else
      {
        uint64_t v21 = 4294966995;
      }
LABEL_44:
      mach_msg_destroy((mach_msg_header_t *)buf);
      goto LABEL_45;
    }
    if (kInterAppAudioScope)
    {
      int v17 = *(NSObject **)kInterAppAudioScope;
      if (!*(void *)kInterAppAudioScope) {
        return 4294967246;
      }
    }
    else
    {
      int v17 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "IPCAUClient.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 475;
      _os_log_impl(&dword_18FEC0000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d IPCAUClient: main bundle is nil", buf, 0x12u);
    }
    return 4294967246;
  }
  return v3;
}

void sub_18FF47138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)va2);
  MEMORY[0x192FC7960]((uint64_t *)va);
  IPCAUClient::RemoteAUServer::TransientWaker::~TransientWaker((IPCAUClient::RemoteAUServer::TransientWaker *)va1);
  _Unwind_Resume(a1);
}

void IPCAUSharedMemory::~IPCAUSharedMemory(xpc_object_t *this)
{
  *this = &unk_1EDF93440;
  uint64_t v2 = this + 8;
  std::vector<IPCAUSharedMemoryBase::Element>::__destroy_vector::operator()[abi:ne180100](&v2);
  SharableMemoryBlock::~SharableMemoryBlock(this);
}

{
  void **v2;
  uint64_t vars8;

  *this = &unk_1EDF93440;
  uint64_t v2 = this + 8;
  std::vector<IPCAUSharedMemoryBase::Element>::__destroy_vector::operator()[abi:ne180100](&v2);
  SharableMemoryBlock::~SharableMemoryBlock(this);
  JUMPOUT(0x192FC8940);
}

uint64_t IPCAUSharedMemory::RecomputeHeaderSize(uint64_t this, int a2)
{
  int v2 = 4 * a2 + 2275;
  if (!a2) {
    int v2 = 2279;
  }
  *(_DWORD *)(this + 56) = (v2 + *(_DWORD *)(this + 96)) & 0xFFFFFFF0;
  return this;
}

uint64_t (*IPCAUClient::AUInstance::LookupMethod(IPCAUClient::AUInstance *this))(void *)
{
  if ((this - 1) > 0x13) {
    return 0;
  }
  else {
    return off_1EDFA4180[(int)this - 1];
  }
}

uint64_t IPCAU_Process(IPCAUClient::AUInstance **a1, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4, AudioBufferList *a5)
{
  if (a2 && a3 && a5) {
    return IPCAUClient::AUInstance::RenderOrProcess(a1[4], 1, a2, a3, 0, a4, a5);
  }
  else {
    return 4294967246;
  }
}

uint64_t IPCAUClient::AUInstance::RenderOrProcess(IPCAUClient::AUInstance *this, char a2, unsigned int *a3, const AudioTimeStamp *a4, uint64_t a5, uint64_t a6, AudioBufferList *a7)
{
  uint64_t v96 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 84))
  {
    if (!*((void *)this + 59)) {
      *((void *)this + 59) = pthread_self();
    }
    uint64_t v81 = (char *)this + 384;
    char v82 = (*(uint64_t (**)(void))(*((void *)this + 48) + 16))();
    unsigned int i = 0;
    int v14 = (unsigned int *)IPCAUSharedMemoryBase::mutableAudioBufferList((IPCAUClient::AUInstance *)((char *)this + 280), *((_DWORD *)this + 23), a6);
    if (!v14) {
      goto LABEL_77;
    }
    BOOL v15 = v14;
    if (a7->mNumberBuffers != *v14)
    {
      uint64_t v18 = 4294967246;
      goto LABEL_78;
    }
    uint64_t v16 = *((void *)this + 38);
    if (!v16)
    {
LABEL_33:
      if (a2)
      {
        uint64_t v18 = 4294967292;
LABEL_79:
        CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v81);
        return v18;
      }
      if (*((unsigned char *)this + 152))
      {
        uint64_t v27 = (char *)this + 128;
        while (1)
        {
          uint64_t v28 = (void *)*((void *)this + 17);
          if (!v28) {
            break;
          }
          unint64_t v29 = (void *)*((void *)this + 17);
          atomic_compare_exchange_strong((atomic_ullong *volatile)this + 17, (unint64_t *)&v29, 0);
          if (v29 == v28)
          {
            unint64_t v30 = 0;
            do
            {
              unint64_t v31 = (void *)v30;
              unint64_t v30 = (unint64_t)v28;
              uint64_t v28 = (void *)*v28;
              *(void *)unint64_t v30 = v31;
            }
            while (v28);
            while (1)
            {
              long long v32 = v31;
              int v33 = *(_DWORD *)(v30 + 8);
              if (v33)
              {
                if (v33 == 2)
                {
                  uint64_t v41 = *(void **)v27;
                  if (*(void *)v27)
                  {
                    do
                    {
                      unint64_t v42 = (void *)*v41;
                      do
                      {
                        uint64_t v43 = *((void *)this + 18);
                        *uint64_t v41 = v43;
                        uint64_t v44 = v43;
                        atomic_compare_exchange_strong((atomic_ullong *volatile)this + 18, (unint64_t *)&v44, (unint64_t)v41);
                      }
                      while (v44 != v43);
                      uint64_t v41 = v42;
                    }
                    while (v42);
                  }
                  do
                  {
                    uint64_t v45 = *((void *)this + 18);
                    *(void *)unint64_t v30 = v45;
                    uint64_t v46 = v45;
                    atomic_compare_exchange_strong((atomic_ullong *volatile)this + 18, (unint64_t *)&v46, v30);
                  }
                  while (v46 != v45);
                }
                else if (v33 == 1)
                {
                  uint64_t v34 = *(void **)v27;
                  if (*(void *)v27)
                  {
                    unint64_t v35 = (void *)((char *)this + 128);
                    while (1)
                    {
                      int v36 = v34;
                      if (v34[2] == *(void *)(v30 + 16) && v34[3] == *(void *)(v30 + 24)) {
                        break;
                      }
                      uint64_t v34 = (void *)*v34;
                      unint64_t v35 = v36;
                      if (!*v36) {
                        goto LABEL_67;
                      }
                    }
                    *unint64_t v35 = *v34;
                    do
                    {
                      uint64_t v47 = *((void *)this + 18);
                      *int v36 = v47;
                      uint64_t v48 = v47;
                      atomic_compare_exchange_strong((atomic_ullong *volatile)this + 18, (unint64_t *)&v48, (unint64_t)v36);
                    }
                    while (v48 != v47);
                  }
                  do
                  {
LABEL_67:
                    uint64_t v49 = *((void *)this + 18);
                    *(void *)unint64_t v30 = v49;
                    uint64_t v50 = v49;
                    atomic_compare_exchange_strong((atomic_ullong *volatile)this + 18, (unint64_t *)&v50, v30);
                  }
                  while (v50 != v49);
                }
              }
              else
              {
                mach_port_name_t v37 = *(unint64_t **)v27;
                long long v38 = (unint64_t *)((char *)this + 128);
                if (*(void *)v27)
                {
                  while (1)
                  {
                    long long v38 = v37;
                    if (v37[2] == *(void *)(v30 + 16) && v37[3] == *(void *)(v30 + 24)) {
                      break;
                    }
                    mach_port_name_t v37 = (unint64_t *)*v37;
                    if (!*v38) {
                      goto LABEL_56;
                    }
                  }
                  do
                  {
                    uint64_t v39 = *((void *)this + 18);
                    *(void *)unint64_t v30 = v39;
                    uint64_t v40 = v39;
                    atomic_compare_exchange_strong((atomic_ullong *volatile)this + 18, (unint64_t *)&v40, v30);
                  }
                  while (v40 != v39);
                }
                else
                {
LABEL_56:
                  *long long v38 = v30;
                  *(void *)unint64_t v30 = 0;
                }
              }
              if (!v32) {
                goto LABEL_69;
              }
              unint64_t v31 = (void *)*v32;
              unint64_t v30 = (unint64_t)v32;
            }
          }
        }
LABEL_69:
        for (unsigned int i = *a3 | 4;
              ;
              (*((void (**)(void, unsigned int *, const AudioTimeStamp *, uint64_t, uint64_t, AudioBufferList *))v27
               + 2))(*((void *)v27 + 3), &i, a4, a5, a6, a7))
        {
          uint64_t v27 = *(char **)v27;
          if (!v27) {
            break;
          }
        }
      }
      if (!*((_DWORD *)this + 23)) {
        goto LABEL_84;
      }
      if (!*((_DWORD *)this + 40))
      {
        uint64_t v18 = 4294956420;
        goto LABEL_78;
      }
      char v51 = (AudioBufferList *)IPCAUSharedMemoryBase::mutableAudioBufferList((IPCAUClient::AUInstance *)((char *)this + 280), 0, a6);
      if (v51)
      {
        if (*((_DWORD *)this + 40) == 2) {
          uint64_t v52 = (*((uint64_t (**)(void, unsigned int *, const AudioTimeStamp *, void, uint64_t, AudioBufferList *))this
        }
                 + 21))(*((void *)this + 22), a3, a4, 0, a6, v51);
        else {
          uint64_t v52 = AudioUnitRender(*((AudioUnit *)this + 23), a3, a4, *((_DWORD *)this + 48), a6, v51);
        }
        uint64_t v18 = v52;
        if (v52) {
          goto LABEL_78;
        }
LABEL_84:
        if (*((unsigned char *)this + 153))
        {
          int v54 = 0;
          int v55 = 0;
        }
        else
        {
          uint64_t v56 = (CADeprecated::CAPThread *)pthread_self();
          ScheduledPriority = (auoop *)CADeprecated::CAPThread::GetScheduledPriority(v56, v57);
          int v54 = (int)ScheduledPriority;
          auoop::gWorkgroupManager(ScheduledPriority);
          int v55 = *(_DWORD *)auoop::tlsWorkgroupPort();
          *((unsigned char *)this + 153) = 1;
        }
        int v59 = *((_DWORD *)this + 6);
        int v60 = *((_DWORD *)this + 20);
        uint64_t mSampleTime = (uint64_t)a4->mSampleTime;
        UInt64 mHostTime = a4->mHostTime;
        Float64 mRateScalar = a4->mRateScalar;
        AudioTimeStampFlags v64 = a4->mFlags & 7;
        memset(&msg[4], 0, 32);
        *(_DWORD *)&msg[24] = 1;
        *(_DWORD *)&msg[28] = v55;
        unsigned int v84 = 1245184;
        uint64_t v85 = *MEMORY[0x1E4F14068];
        AudioUnitRenderActionFlags v65 = *a3;
        int v86 = v60;
        AudioUnitRenderActionFlags v87 = v65;
        uint64_t v88 = mSampleTime;
        UInt64 v89 = mHostTime;
        Float64 v90 = mRateScalar;
        AudioTimeStampFlags v91 = v64;
        int v92 = 0;
        int v93 = a5;
        int v94 = a6;
        int v95 = v54;
        mach_port_name_t reply_port = mig_get_reply_port();
        *(_DWORD *)&msg[8] = v59;
        *(_DWORD *)&msg[12] = reply_port;
        *(_DWORD *)msg = -2147478253;
        *(void *)&msg[16] = 0x1606600000000;
        if (MEMORY[0x1E4F14B18])
        {
          voucher_mach_msg_set((mach_msg_header_t *)msg);
          mach_port_name_t reply_port = *(_DWORD *)&msg[12];
        }
        uint64_t v67 = mach_msg((mach_msg_header_t *)msg, 275, 0x64u, 0x30u, reply_port, gMediaServerTimeout, 0);
        uint64_t v68 = v67;
        if ((v67 - 268435458) <= 0xE && ((1 << (v67 - 2)) & 0x4003) != 0)
        {
          mig_put_reply_port(*(mach_port_t *)&msg[12]);
          goto LABEL_105;
        }
        if (v67)
        {
          mig_dealloc_reply_port(*(mach_port_t *)&msg[12]);
LABEL_105:
          uint64_t v18 = 268435460;
          if (v68 == 268435460)
          {
            if ((*(_WORD *)msg & 0x1F00) == 0x1100) {
              mach_port_deallocate(*MEMORY[0x1E4F14960], *(mach_port_name_t *)&msg[12]);
            }
            mach_msg_destroy((mach_msg_header_t *)msg);
            goto LABEL_78;
          }
          goto LABEL_114;
        }
        if (*(_DWORD *)&msg[20] == 71)
        {
          uint64_t v68 = 4294966988;
        }
        else if (*(_DWORD *)&msg[20] == 90314)
        {
          if ((*(_DWORD *)msg & 0x80000000) == 0)
          {
            if (*(_DWORD *)&msg[4] == 40)
            {
              if (!*(_DWORD *)&msg[8])
              {
                uint64_t v68 = *(unsigned int *)&msg[32];
                if (!*(_DWORD *)&msg[32])
                {
                  *a3 = v84;
                  goto LABEL_126;
                }
                goto LABEL_113;
              }
            }
            else if (*(_DWORD *)&msg[4] == 36)
            {
              if (*(_DWORD *)&msg[8]) {
                BOOL v69 = 1;
              }
              else {
                BOOL v69 = *(_DWORD *)&msg[32] == 0;
              }
              if (v69) {
                uint64_t v68 = 4294966996;
              }
              else {
                uint64_t v68 = *(unsigned int *)&msg[32];
              }
              goto LABEL_113;
            }
          }
          uint64_t v68 = 4294966996;
        }
        else
        {
          uint64_t v68 = 4294966995;
        }
LABEL_113:
        mach_msg_destroy((mach_msg_header_t *)msg);
LABEL_114:
        if (v68 == 268435459) {
          goto LABEL_117;
        }
        if (v68)
        {
          if (v68 != -308)
          {
            uint64_t v18 = v68;
            goto LABEL_78;
          }
LABEL_117:
          uint64_t v18 = 4294900547;
          if (kInterAppAudioScope)
          {
            BOOL v70 = *(NSObject **)kInterAppAudioScope;
            if (!*(void *)kInterAppAudioScope) {
              goto LABEL_78;
            }
          }
          else
          {
            BOOL v70 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)msg = 136315906;
            *(void *)&msg[4] = "IPCAUClient.cpp";
            *(_WORD *)&msg[12] = 1024;
            *(_DWORD *)&msg[14] = 433;
            *(_WORD *)&msg[18] = 1024;
            *(_DWORD *)&msg[20] = v68;
            *(_WORD *)&msg[24] = 1024;
            *(_DWORD *)&msg[26] = -66749;
            _os_log_impl(&dword_18FEC0000, v70, OS_LOG_TYPE_DEFAULT, "%25s:%-5d converting result %d -> %d", msg, 0x1Eu);
          }
          goto LABEL_78;
        }
LABEL_126:
        if (*((unsigned char *)this + 152))
        {
          unsigned int i = *a3 | 8;
          for (j = (char *)this + 128;
                ;
                (*((void (**)(void, unsigned int *, const AudioTimeStamp *, uint64_t, uint64_t, unsigned int *))j
                 + 2))(*((void *)j + 3), &i, a4, a5, a6, v15))
          {
            j = *(char **)j;
            if (!j) {
              break;
            }
          }
        }
        unint64_t v72 = *v15;
        if (v72)
        {
          unint64_t v73 = 0;
          for (unint64_t k = 0; k < v72; ++k)
          {
            size_t v75 = v15[v73 / 4 + 3];
            a7->mBuffers[v73 / 0x10].mDataByteSize = v75;
            mData = a7->mBuffers[v73 / 0x10].mData;
            uint64_t v77 = *(void **)&v15[v73 / 4 + 4];
            if (mData)
            {
              memcpy(mData, v77, v75);
              unint64_t v72 = *v15;
            }
            else
            {
              a7->mBuffers[v73 / 0x10].mData = v77;
            }
            uint64_t v18 = 0;
            v73 += 16;
          }
        }
        else
        {
          uint64_t v18 = 0;
        }
        goto LABEL_78;
      }
LABEL_77:
      uint64_t v18 = 4294956421;
      goto LABEL_78;
    }
    uint64_t v17 = v16 + *((unsigned int *)this + 94);
    if (*(unsigned char *)(v17 + 2176))
    {
      uint64_t v18 = 4294900549;
LABEL_78:
      **((_DWORD **)this + 38) = 0;
      goto LABEL_79;
    }
    uint64_t v19 = v17 + 2048;
    *(_DWORD *)(v17 + 2120) = 0;
    uint64_t v20 = (unsigned int (*)(void, uint64_t, uint64_t))*((void *)this + 61);
    if (v20 && !v20(*((void *)this + 60), v17 + 2104, v17 + 2112)) {
      *(_DWORD *)(v19 + 72) |= 0x100u;
    }
    uint64_t v21 = (unsigned int (*)(void, uint64_t, uint64_t, uint64_t, uint64_t))*((void *)this + 62);
    if (v21 && !v21(*((void *)this + 60), v19 + 76, v19 + 80, v19 + 84, v19 + 88)) {
      *(_DWORD *)(v19 + 72) |= 0x200u;
    }
    msg[0] = 0;
    __int16 v79 = 0;
    char v78 = 0;
    BOOL v22 = (unsigned int (*)(void, unsigned char *, char *, __int16 *, uint64_t, char *, uint64_t, uint64_t))*((void *)this + 64);
    if (v22 && !v22(*((void *)this + 60), msg, (char *)&v79 + 1, &v79, v19 + 96, &v78, v19 + 104, v19 + 112))
    {
      int v26 = *(_DWORD *)(v19 + 72);
      int v25 = v26 | 0x400;
      *(_DWORD *)(v19 + 72) = v26 | 0x400;
      if (msg[0])
      {
        int v25 = v26 | 0x402;
        *(_DWORD *)(v19 + 72) = v26 | 0x402;
      }
      if (!HIBYTE(v79)) {
        goto LABEL_28;
      }
      v25 |= 4u;
    }
    else
    {
      uint64_t v23 = (unsigned int (*)(void, unsigned char *, __int16 *, uint64_t, char *, uint64_t, uint64_t))*((void *)this + 63);
      if (!v23 || v23(*((void *)this + 60), msg, &v79, v19 + 96, &v78, v19 + 104, v19 + 112))
      {
LABEL_32:
        *(void *)(v19 + 120) = mach_absolute_time();
        goto LABEL_33;
      }
      int v24 = *(_DWORD *)(v19 + 72);
      int v25 = v24 | 0x400;
      *(_DWORD *)(v19 + 72) = v24 | 0x400;
      if (!msg[0])
      {
LABEL_28:
        if ((_BYTE)v79)
        {
          v25 |= 1u;
          *(_DWORD *)(v19 + 72) = v25;
        }
        if (v78) {
          *(_DWORD *)(v19 + 72) = v25 | 8;
        }
        goto LABEL_32;
      }
      int v25 = v24 | 0x402;
    }
    *(_DWORD *)(v19 + 72) = v25;
    goto LABEL_28;
  }
  return 4294956429;
}

void sub_18FF47B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)va);
  _Unwind_Resume(a1);
}

void *IPCAUSharedMemoryBase::mutableAudioBufferList(IPCAUSharedMemoryBase *this, unsigned int a2, unsigned int a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)this + 8);
  if (0x6DB6DB6DB6DB6DB7 * ((*((void *)this + 9) - v3) >> 3) <= (unint64_t)a2) {
    return 0;
  }
  unsigned int v5 = *((_DWORD *)this + 22);
  if (v5 >= a3) {
    unsigned int v5 = a3;
  }
  uint64_t v6 = v3 + 56 * a2;
  unsigned int v7 = v5 * *(_DWORD *)(v6 + 24);
  uint64_t v8 = *(_DWORD **)(v6 + 40);
  unsigned int v9 = v8[4];
  if (v9) {
    BOOL v10 = v9 >= v7;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
    {
      int v18 = 136315394;
      uint64_t v19 = "CABufferList.h";
      __int16 v20 = 1024;
      int v21 = 246;
      _os_log_impl(&dword_18FEC0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE [(mBufferCapacity == 0 || nBytes <= mBufferCapacity) != 0 is false]: ", (uint8_t *)&v18, 0x12u);
    }
    __break(1u);
  }
  uint64_t v11 = v8 + 6;
  uint64_t v12 = v8[6];
  if (v12)
  {
    char v13 = v8 + 9;
    int v14 = v12;
    do
    {
      unsigned int *v13 = v7;
      v13 += 4;
      --v14;
    }
    while (v14);
  }
  BOOL v15 = (void *)(*(void *)(v3 + 56 * a2 + 48) + 24);
  memcpy(v15, v11, (16 * v12) | 8);
  return v15;
}

uint64_t IPCAU_RemovePropertyListenerWithUserData(IPCAUClient::AUInstance **a1, int a2, void (*a3)(void *, OpaqueAudioComponentInstance *, unsigned int, unsigned int, unsigned int), void *a4)
{
  return IPCAUClient::AUInstance::RemovePropertyListener(a1[4], a2, a3, a4, 1);
}

uint64_t IPCAUClient::AUInstance::RemovePropertyListener(IPCAUClient::AUInstance *this, int a2, void (*a3)(void *, OpaqueAudioComponentInstance *, unsigned int, unsigned int, unsigned int), void *a4, int a5)
{
  mach_msg_return_t v20;
  mach_msg_return_t v21;
  int v22;
  NSObject *v23;
  uint64_t v25;
  char v26;
  unsigned int v27;
  unsigned char msg[36];
  uint64_t v29;
  uint64_t v30;

  unint64_t v30 = *MEMORY[0x1E4F143B8];
  if (!*(_DWORD *)(*((void *)this + 2) + 48)) {
    return 4294900547;
  }
  uint64_t v8 = *((void *)this + 13);
  uint64_t v7 = *((void *)this + 14);
  if (v8 == v7) {
    goto LABEL_22;
  }
  uint64_t v9 = *((void *)this + 13);
  while (*(_DWORD *)v9 != a2
       || *(void (**)(void *, OpaqueAudioComponentInstance *, unsigned int, unsigned int, unsigned int))(v9 + 8) != a3
       || a5 && *(void **)(v9 + 16) != a4)
  {
    v9 += 24;
    if (v9 == v7) {
      goto LABEL_14;
    }
  }
  uint64_t v11 = v7 - (v9 + 24);
  if (v7 != v9 + 24)
  {
    memmove((void *)v9, (const void *)(v9 + 24), v7 - (v9 + 24));
    uint64_t v8 = *((void *)this + 13);
  }
  uint64_t v7 = v9 + v11;
  *((void *)this + 14) = v9 + v11;
LABEL_14:
  if (v8 == v7)
  {
LABEL_22:
    BOOL v14 = 1;
  }
  else
  {
    uint64_t v12 = v8 + 24;
    do
    {
      int v13 = *(_DWORD *)(v12 - 24);
      BOOL v15 = v13 == a2;
      BOOL v14 = v13 != a2;
      BOOL v15 = v15 || v12 == v7;
      v12 += 24;
    }
    while (!v15);
  }
  uint64_t v10 = 0;
  if ((a2 & 0xFFFFFFFE) != 0x64 && v14)
  {
    uint64_t v27 = 0;
    IPCAUClient::RemoteAUServer::TransientWaker::TransientWaker(&v25, *((void *)this + 2), &v27);
    uint64_t v10 = v27;
    if (v27)
    {
      IPCAUClient::RemoteAUServer::TransientWaker::~TransientWaker((IPCAUClient::RemoteAUServer::TransientWaker *)&v25);
      return v10;
    }
    int v16 = *(_DWORD *)(*((void *)this + 2) + 48);
    if (v26) {
      mach_msg_timeout_t v17 = 0x7FFFFFFF;
    }
    else {
      mach_msg_timeout_t v17 = 10000;
    }
    int v18 = *((_DWORD *)this + 20);
    unint64_t v29 = 0;
    memset(&msg[4], 0, 32);
    *(void *)&msg[24] = *MEMORY[0x1E4F14068];
    *(_DWORD *)&msg[32] = v18;
    LODWORD(v29) = a2;
    mach_port_name_t reply_port = mig_get_reply_port();
    *(_DWORD *)&msg[8] = v16;
    *(_DWORD *)&msg[12] = reply_port;
    *(_DWORD *)msg = 5395;
    *(void *)&msg[16] = 0x1606100000000;
    if (MEMORY[0x1E4F14B18])
    {
      voucher_mach_msg_set((mach_msg_header_t *)msg);
      mach_port_name_t reply_port = *(_DWORD *)&msg[12];
    }
    __int16 v20 = mach_msg((mach_msg_header_t *)msg, 275, 0x28u, 0x2Cu, reply_port, v17, 0);
    int v21 = v20;
    if ((v20 - 268435458) <= 0xE && ((1 << (v20 - 2)) & 0x4003) != 0)
    {
      mig_put_reply_port(*(mach_port_t *)&msg[12]);
    }
    else
    {
      if (!v20)
      {
        if (*(_DWORD *)&msg[20] == 71)
        {
          uint64_t v22 = -308;
        }
        else if (*(_DWORD *)&msg[20] == 90309)
        {
          uint64_t v22 = -300;
          if ((*(_DWORD *)msg & 0x80000000) == 0 && *(_DWORD *)&msg[4] == 36 && !*(_DWORD *)&msg[8])
          {
            uint64_t v22 = *(_DWORD *)&msg[32];
            if (!*(_DWORD *)&msg[32]) {
              goto LABEL_58;
            }
          }
        }
        else
        {
          uint64_t v22 = -301;
        }
        goto LABEL_49;
      }
      mig_dealloc_reply_port(*(mach_port_t *)&msg[12]);
    }
    uint64_t v22 = 268435460;
    if (v21 != 268435460)
    {
LABEL_50:
      if (v21 != 268435459 && v21 != -308) {
        goto LABEL_58;
      }
      if (kInterAppAudioScope)
      {
        uint64_t v23 = *(NSObject **)kInterAppAudioScope;
        if (!*(void *)kInterAppAudioScope)
        {
LABEL_58:
          IPCAUClient::RemoteAUServer::TransientWaker::~TransientWaker((IPCAUClient::RemoteAUServer::TransientWaker *)&v25);
          return 0;
        }
      }
      else
      {
        uint64_t v23 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)msg = 136315906;
        *(void *)&msg[4] = "IPCAUClient.cpp";
        *(_WORD *)&msg[12] = 1024;
        *(_DWORD *)&msg[14] = 433;
        *(_WORD *)&msg[18] = 1024;
        *(_DWORD *)&msg[20] = v21;
        *(_WORD *)&msg[24] = 1024;
        *(_DWORD *)&msg[26] = -66749;
        _os_log_impl(&dword_18FEC0000, v23, OS_LOG_TYPE_DEFAULT, "%25s:%-5d converting result %d -> %d", msg, 0x1Eu);
      }
      goto LABEL_58;
    }
    if ((*(_WORD *)msg & 0x1F00) == 0x1100) {
      mach_port_deallocate(*MEMORY[0x1E4F14960], *(mach_port_name_t *)&msg[12]);
    }
LABEL_49:
    mach_msg_destroy((mach_msg_header_t *)msg);
    int v21 = v22;
    goto LABEL_50;
  }
  return v10;
}

uint64_t IPCAU_RemoveRenderNotify(void *a1, int (*a2)(void *, unsigned int *, const AudioTimeStamp *, unsigned int, unsigned int, AudioBufferList *), unint64_t a3)
{
  uint64_t v5 = a1[4];
  uint64_t v6 = TThreadSafeList<IPCAUClient::RenderCallback>::AllocNode(v5 + 128);
  *((_DWORD *)v6 + 2) = 1;
  v6[2] = (unint64_t)a2;
  v6[3] = a3;
  do
  {
    unint64_t v7 = *(void *)(v5 + 136);
    *uint64_t v6 = v7;
    unint64_t v8 = v7;
    atomic_compare_exchange_strong((atomic_ullong *volatile)(v5 + 136), &v8, (unint64_t)v6);
  }
  while (v8 != v7);
  return 0;
}

unint64_t *TThreadSafeList<IPCAUClient::RenderCallback>::AllocNode(uint64_t a1)
{
  do
  {
    uint64_t result = *(unint64_t **)(a1 + 16);
    if (!result) {
      operator new();
    }
    uint64_t v3 = *(unint64_t **)(a1 + 16);
    atomic_compare_exchange_strong((atomic_ullong *volatile)(a1 + 16), (unint64_t *)&v3, 0);
  }
  while (v3 != result);
  unint64_t v4 = *result;
  if (*result)
  {
    uint64_t v5 = (void *)*result;
    do
    {
      uint64_t v6 = v5;
      uint64_t v5 = (void *)*v5;
    }
    while (v5);
    do
    {
      uint64_t v7 = *(void *)(a1 + 16);
      *uint64_t v6 = v7;
      uint64_t v8 = v7;
      atomic_compare_exchange_strong((atomic_ullong *volatile)(a1 + 16), (unint64_t *)&v8, v4);
    }
    while (v8 != v7);
  }
  return result;
}

uint64_t IPCAU_AddRenderNotify(void *a1, int (*a2)(void *, unsigned int *, const AudioTimeStamp *, unsigned int, unsigned int, AudioBufferList *), unint64_t a3)
{
  uint64_t v5 = a1[4];
  *(unsigned char *)(v5 + 152) = 1;
  uint64_t v6 = TThreadSafeList<IPCAUClient::RenderCallback>::AllocNode(v5 + 128);
  *((_DWORD *)v6 + 2) = 0;
  v6[2] = (unint64_t)a2;
  v6[3] = a3;
  do
  {
    unint64_t v7 = *(void *)(v5 + 136);
    *uint64_t v6 = v7;
    unint64_t v8 = v7;
    atomic_compare_exchange_strong((atomic_ullong *volatile)(v5 + 136), &v8, (unint64_t)v6);
  }
  while (v8 != v7);
  return 0;
}

uint64_t IPCAU_Render(IPCAUClient::AUInstance **a1, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4, uint64_t a5, AudioBufferList *a6)
{
  if (a2 && a3 && a6) {
    return IPCAUClient::AUInstance::RenderOrProcess(a1[4], 0, a2, a3, a4, a5, a6);
  }
  else {
    return 4294967246;
  }
}

uint64_t IPCAU_RemovePropertyListener(IPCAUClient::AUInstance **a1, int a2, void (*a3)(void *, OpaqueAudioComponentInstance *, unsigned int, unsigned int, unsigned int))
{
  return IPCAUClient::AUInstance::RemovePropertyListener(a1[4], a2, a3, 0, 0);
}

uint64_t IPCAU_AddPropertyListener(void *a1, int a2, void (*a3)(void *, OpaqueAudioComponentInstance *, unsigned int, unsigned int, unsigned int), void *a4)
{
  mach_msg_return_t v33;
  mach_msg_return_t v34;
  int v35;
  NSObject *v36;
  uint64_t v38;
  char v39;
  unsigned int v40;
  unsigned char msg[36];
  uint64_t v42;
  uint64_t v43;

  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = 4294900547;
  uint64_t v5 = a1[4];
  if (*(_DWORD *)(*(void *)(v5 + 16) + 48))
  {
    uint64_t v9 = *(void *)(v5 + 104);
    unint64_t v10 = *(void *)(v5 + 112);
    if (v9 == v10)
    {
      BOOL v13 = 1;
    }
    else
    {
      uint64_t v11 = v9 + 24;
      do
      {
        int v12 = *(_DWORD *)(v11 - 24);
        BOOL v13 = v12 != a2;
        BOOL v14 = v12 == a2 || v11 == v10;
        v11 += 24;
      }
      while (!v14);
    }
    unint64_t v15 = *(void *)(v5 + 120);
    if (v10 >= v15)
    {
      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v9) >> 3);
      unint64_t v18 = v17 + 1;
      if (v17 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - v9) >> 3);
      if (2 * v19 > v18) {
        unint64_t v18 = 2 * v19;
      }
      if (v19 >= 0x555555555555555) {
        unint64_t v20 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v20 = v18;
      }
      if (v20) {
        unint64_t v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v20);
      }
      else {
        uint64_t v21 = 0;
      }
      unint64_t v22 = v20 + 24 * v17;
      unint64_t v23 = v20 + 24 * v21;
      *(_DWORD *)unint64_t v22 = a2;
      *(void *)(v22 + 8) = a3;
      *(void *)(v22 + 16) = a4;
      unint64_t v16 = v22 + 24;
      int v25 = *(char **)(v5 + 104);
      int v24 = *(char **)(v5 + 112);
      if (v24 != v25)
      {
        do
        {
          long long v26 = *(_OWORD *)(v24 - 24);
          *(void *)(v22 - 8) = *((void *)v24 - 1);
          *(_OWORD *)(v22 - 24) = v26;
          v22 -= 24;
          v24 -= 24;
        }
        while (v24 != v25);
        int v24 = *(char **)(v5 + 104);
      }
      *(void *)(v5 + 104) = v22;
      *(void *)(v5 + 112) = v16;
      *(void *)(v5 + 120) = v23;
      if (v24) {
        operator delete(v24);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v10 = a2;
      unint64_t v16 = v10 + 24;
      *(void *)(v10 + 8) = a3;
      *(void *)(v10 + 16) = a4;
    }
    *(void *)(v5 + 112) = v16;
    char v27 = !v13;
    if ((a2 & 0xFFFFFFFE) == 0x64) {
      char v27 = 1;
    }
    if (v27) {
      return 0;
    }
    uint64_t v40 = 0;
    IPCAUClient::RemoteAUServer::TransientWaker::TransientWaker(&v38, *(void *)(v5 + 16), &v40);
    uint64_t v28 = v40;
    if (v40)
    {
      IPCAUClient::RemoteAUServer::TransientWaker::~TransientWaker((IPCAUClient::RemoteAUServer::TransientWaker *)&v38);
      return v28;
    }
    int v29 = *(_DWORD *)(*(void *)(v5 + 16) + 48);
    if (v39) {
      mach_msg_timeout_t v30 = 0x7FFFFFFF;
    }
    else {
      mach_msg_timeout_t v30 = 10000;
    }
    int v31 = *(_DWORD *)(v5 + 80);
    unint64_t v42 = 0;
    memset(&msg[4], 0, 32);
    *(void *)&msg[24] = *MEMORY[0x1E4F14068];
    *(_DWORD *)&msg[32] = v31;
    LODWORD(v42) = a2;
    mach_port_name_t reply_port = mig_get_reply_port();
    *(_DWORD *)&msg[8] = v29;
    *(_DWORD *)&msg[12] = reply_port;
    *(_DWORD *)msg = 5395;
    *(void *)&msg[16] = 0x1606000000000;
    if (MEMORY[0x1E4F14B18])
    {
      voucher_mach_msg_set((mach_msg_header_t *)msg);
      mach_port_name_t reply_port = *(_DWORD *)&msg[12];
    }
    int v33 = mach_msg((mach_msg_header_t *)msg, 275, 0x28u, 0x2Cu, reply_port, v30, 0);
    uint64_t v34 = v33;
    if ((v33 - 268435458) <= 0xE && ((1 << (v33 - 2)) & 0x4003) != 0)
    {
      mig_put_reply_port(*(mach_port_t *)&msg[12]);
    }
    else
    {
      if (!v33)
      {
        if (*(_DWORD *)&msg[20] == 71)
        {
          unint64_t v35 = -308;
        }
        else if (*(_DWORD *)&msg[20] == 90308)
        {
          unint64_t v35 = -300;
          if ((*(_DWORD *)msg & 0x80000000) == 0 && *(_DWORD *)&msg[4] == 36 && !*(_DWORD *)&msg[8])
          {
            unint64_t v35 = *(_DWORD *)&msg[32];
            if (!*(_DWORD *)&msg[32]) {
              goto LABEL_63;
            }
          }
        }
        else
        {
          unint64_t v35 = -301;
        }
        goto LABEL_54;
      }
      mig_dealloc_reply_port(*(mach_port_t *)&msg[12]);
    }
    unint64_t v35 = 268435460;
    if (v34 != 268435460)
    {
LABEL_55:
      if (v34 != 268435459 && v34 != -308) {
        goto LABEL_63;
      }
      if (kInterAppAudioScope)
      {
        int v36 = *(NSObject **)kInterAppAudioScope;
        if (!*(void *)kInterAppAudioScope)
        {
LABEL_63:
          IPCAUClient::RemoteAUServer::TransientWaker::~TransientWaker((IPCAUClient::RemoteAUServer::TransientWaker *)&v38);
          return 0;
        }
      }
      else
      {
        int v36 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)msg = 136315906;
        *(void *)&msg[4] = "IPCAUClient.cpp";
        *(_WORD *)&msg[12] = 1024;
        *(_DWORD *)&msg[14] = 433;
        *(_WORD *)&msg[18] = 1024;
        *(_DWORD *)&msg[20] = v34;
        *(_WORD *)&msg[24] = 1024;
        *(_DWORD *)&msg[26] = -66749;
        _os_log_impl(&dword_18FEC0000, v36, OS_LOG_TYPE_DEFAULT, "%25s:%-5d converting result %d -> %d", msg, 0x1Eu);
      }
      goto LABEL_63;
    }
    if ((*(_WORD *)msg & 0x1F00) == 0x1100) {
      mach_port_deallocate(*MEMORY[0x1E4F14960], *(mach_port_name_t *)&msg[12]);
    }
LABEL_54:
    mach_msg_destroy((mach_msg_header_t *)msg);
    uint64_t v34 = v35;
    goto LABEL_55;
  }
  return v4;
}

uint64_t IPCAU_Reset(void *a1, int a2, int a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1[4];
  if (kInterAppAudioScope)
  {
    uint64_t v6 = *(NSObject **)kInterAppAudioScope;
    if (!*(void *)kInterAppAudioScope) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v6 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "IPCAUClient.cpp";
    *(_WORD *)rcv_name = 1024;
    *(_DWORD *)&rcv_name[2] = 1002;
    *(_WORD *)&rcv_name[6] = 2048;
    *(void *)&rcv_name[8] = v5;
    _os_log_impl(&dword_18FEC0000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d %p", buf, 0x1Cu);
  }
LABEL_7:
  uint64_t v7 = 4294900547;
  uint64_t v8 = *(void *)(v5 + 16);
  if (*(_DWORD *)(v8 + 48))
  {
    unsigned int v21 = 0;
    IPCAUClient::RemoteAUServer::TransientWaker::TransientWaker(&v19, v8, &v21);
    uint64_t v9 = v21;
    if (v21)
    {
LABEL_44:
      IPCAUClient::RemoteAUServer::TransientWaker::~TransientWaker((IPCAUClient::RemoteAUServer::TransientWaker *)&v19);
      return v9;
    }
    int v10 = *(_DWORD *)(*(void *)(v5 + 16) + 48);
    if (v20) {
      mach_msg_timeout_t v11 = 0x7FFFFFFF;
    }
    else {
      mach_msg_timeout_t v11 = 10000;
    }
    unsigned int v12 = *(_DWORD *)(v5 + 80);
    *(void *)&rcv_name[12] = *MEMORY[0x1E4F14068];
    unsigned int v24 = v12;
    int v25 = a2;
    int v26 = a3;
    mach_port_name_t reply_port = mig_get_reply_port();
    *(void *)buf = 5395;
    *(_DWORD *)&buf[8] = v10;
    *(_DWORD *)rcv_name = reply_port;
    *(void *)&rcv_name[4] = 0x1605C00000000;
    if (MEMORY[0x1E4F14B18])
    {
      voucher_mach_msg_set((mach_msg_header_t *)buf);
      mach_port_name_t reply_port = *(_DWORD *)rcv_name;
    }
    uint64_t v14 = mach_msg((mach_msg_header_t *)buf, 275, 0x2Cu, 0x2Cu, reply_port, v11, 0);
    uint64_t v15 = v14;
    if ((v14 - 268435458) <= 0xE && ((1 << (v14 - 2)) & 0x4003) != 0)
    {
      mig_put_reply_port(*(mach_port_t *)rcv_name);
    }
    else
    {
      if (!v14)
      {
        if (*(_DWORD *)&rcv_name[8] == 71)
        {
          uint64_t v16 = 4294966988;
        }
        else if (*(_DWORD *)&rcv_name[8] == 90304)
        {
          uint64_t v16 = 4294966996;
          if ((*(_DWORD *)buf & 0x80000000) == 0 && *(_DWORD *)&buf[4] == 36 && !*(_DWORD *)&buf[8])
          {
            uint64_t v16 = v24;
            if (!v24)
            {
              uint64_t v7 = 0;
              goto LABEL_41;
            }
          }
        }
        else
        {
          uint64_t v16 = 4294966995;
        }
        goto LABEL_31;
      }
      mig_dealloc_reply_port(*(mach_port_t *)rcv_name);
    }
    uint64_t v16 = 268435460;
    if (v15 != 268435460) {
      goto LABEL_32;
    }
    if ((*(_WORD *)buf & 0x1F00) == 0x1100) {
      mach_port_deallocate(*MEMORY[0x1E4F14960], *(mach_port_name_t *)rcv_name);
    }
LABEL_31:
    mach_msg_destroy((mach_msg_header_t *)buf);
    uint64_t v15 = v16;
LABEL_32:
    if (v15 == 268435459 || v15 == -308)
    {
      if (kInterAppAudioScope)
      {
        unint64_t v17 = *(NSObject **)kInterAppAudioScope;
        if (!*(void *)kInterAppAudioScope) {
          goto LABEL_41;
        }
      }
      else
      {
        unint64_t v17 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "IPCAUClient.cpp";
        *(_WORD *)rcv_name = 1024;
        *(_DWORD *)&rcv_name[2] = 433;
        *(_WORD *)&rcv_name[6] = 1024;
        *(_DWORD *)&rcv_name[8] = v15;
        *(_WORD *)&rcv_name[12] = 1024;
        *(_DWORD *)&rcv_name[14] = -66749;
        _os_log_impl(&dword_18FEC0000, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d converting result %d -> %d", buf, 0x1Eu);
      }
      goto LABEL_41;
    }
    uint64_t v7 = v15;
LABEL_41:
    if (*(unsigned char *)(v5 + 84))
    {
      *(void *)buf = v5 + 384;
      buf[8] = (*(uint64_t (**)(void))(*(void *)(v5 + 384) + 16))();
      **(_DWORD **)(v5 + 304) = 0;
      CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)buf);
    }
    uint64_t v9 = v7;
    goto LABEL_44;
  }
  return v7;
}

void sub_18FF48998(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  IPCAUClient::RemoteAUServer::TransientWaker::~TransientWaker((IPCAUClient::RemoteAUServer::TransientWaker *)va);
  _Unwind_Resume(a1);
}

uint64_t IPCAU_SetParameter(void *a1, mach_msg_size_t a2, int a3, int a4, float a5, mach_port_t a6)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = 4294900547;
  uint64_t v8 = a1[4];
  uint64_t v9 = *(void *)(v8 + 16);
  if (*(_DWORD *)(v9 + 48))
  {
    uint64_t v14 = *(_opaque_pthread_t **)(v8 + 472);
    if (!v14) {
      goto LABEL_5;
    }
    if (v14 != pthread_self())
    {
      uint64_t v9 = *(void *)(v8 + 16);
LABEL_5:
      unsigned int v26 = 0;
      IPCAUClient::RemoteAUServer::TransientWaker::TransientWaker(&v24, v9, &v26);
      uint64_t v15 = v26;
      if (!v26)
      {
        mach_port_t v16 = *(_DWORD *)(*(void *)(v8 + 16) + 48);
        if (v25) {
          mach_msg_timeout_t v17 = 0x7FFFFFFF;
        }
        else {
          mach_msg_timeout_t v17 = 10000;
        }
        unsigned int v18 = *(_DWORD *)(v8 + 80);
        uint64_t v28 = *MEMORY[0x1E4F14068];
        unsigned int v29 = v18;
        mach_msg_size_t v30 = a2;
        int v31 = a3;
        int v32 = a4;
        float v33 = a5;
        mach_port_t v34 = a6;
        mach_port_t reply_port = mig_get_reply_port();
        *(void *)&msg.msgh_bits = 5395;
        msg.msgh_remote_port = v16;
        msg.msgh_local_port = reply_port;
        *(void *)&msg.msgh_voucher_port = 0x1606400000000;
        if (MEMORY[0x1E4F14B18])
        {
          voucher_mach_msg_set(&msg);
          mach_port_t reply_port = msg.msgh_local_port;
        }
        uint64_t v20 = mach_msg(&msg, 275, 0x38u, 0x2Cu, reply_port, v17, 0);
        uint64_t v15 = v20;
        if ((v20 - 268435458) <= 0xE && ((1 << (v20 - 2)) & 0x4003) != 0)
        {
          mig_put_reply_port(msg.msgh_local_port);
LABEL_24:
          uint64_t v21 = 268435460;
          if (v15 != 268435460)
          {
LABEL_30:
            if (v15 != 268435459 && v15 != -308) {
              goto LABEL_39;
            }
            if (kInterAppAudioScope)
            {
              unint64_t v22 = *(NSObject **)kInterAppAudioScope;
              if (!*(void *)kInterAppAudioScope)
              {
LABEL_38:
                uint64_t v15 = 4294900547;
                goto LABEL_39;
              }
            }
            else
            {
              unint64_t v22 = MEMORY[0x1E4F14500];
            }
            if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
            {
              msg.msgh_bits = 136315906;
              *(void *)&msg.msgh_std::string::size_type size = "IPCAUClient.cpp";
              LOWORD(msg.msgh_local_port) = 1024;
              *(mach_port_t *)((char *)&msg.msgh_local_port + 2) = 433;
              HIWORD(msg.msgh_voucher_port) = 1024;
              msg.msgh_id = v15;
              LOWORD(v28) = 1024;
              *(_DWORD *)((char *)&v28 + 2) = -66749;
              _os_log_impl(&dword_18FEC0000, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d converting result %d -> %d", (uint8_t *)&msg, 0x1Eu);
            }
            goto LABEL_38;
          }
          if ((msg.msgh_bits & 0x1F00) == 0x1100) {
            mach_port_deallocate(*MEMORY[0x1E4F14960], msg.msgh_local_port);
          }
LABEL_29:
          mach_msg_destroy(&msg);
          uint64_t v15 = v21;
          goto LABEL_30;
        }
        if (v20)
        {
          mig_dealloc_reply_port(msg.msgh_local_port);
          goto LABEL_24;
        }
        if (msg.msgh_id == 71)
        {
          uint64_t v21 = 4294966988;
          goto LABEL_29;
        }
        if (msg.msgh_id != 90312)
        {
          uint64_t v21 = 4294966995;
          goto LABEL_29;
        }
        uint64_t v21 = 4294966996;
        if ((msg.msgh_bits & 0x80000000) != 0) {
          goto LABEL_29;
        }
        if (msg.msgh_size != 36) {
          goto LABEL_29;
        }
        if (msg.msgh_remote_port) {
          goto LABEL_29;
        }
        uint64_t v21 = v29;
        if (v29) {
          goto LABEL_29;
        }
        uint64_t v15 = 0;
      }
LABEL_39:
      IPCAUClient::RemoteAUServer::TransientWaker::~TransientWaker((IPCAUClient::RemoteAUServer::TransientWaker *)&v24);
      return v15;
    }
    LOBYTE(msg.msgh_bits) = 2;
    BYTE1(msg.msgh_bits) = a3;
    HIWORD(msg.msgh_bits) = a4;
    msg.msgh_std::string::size_type size = a2;
    *(float *)&msg.msgh_remote_port = a5;
    msg.msgh_local_port = a6;
    return IPCAUClient::AUInstance::ControlMessage((IPCAUClient::AUInstance *)v8, &msg, 0x10uLL, 0, 0);
  }
  return v7;
}

uint64_t IPCAUClient::AUInstance::ControlMessage(IPCAUClient::AUInstance *this, const void *a2, size_t a3, const void *a4, size_t a5)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 84))
  {
    unint64_t v23 = (char *)this + 384;
    char v24 = (*(uint64_t (**)(char *))(*((void *)this + 48) + 16))((char *)this + 384);
    int v10 = (unsigned int *)*((void *)this + 38);
    unsigned int v11 = 2044;
    if (v10) {
      unsigned int v11 = 2044 - *v10;
    }
    if (v11 >= (int)a5 + (int)a3) {
      goto LABEL_30;
    }
    int v12 = *((_DWORD *)this + 6);
    int v13 = *((_DWORD *)this + 20);
    *(_OWORD *)&msg[20] = 0u;
    uint64_t v26 = 0;
    *(_OWORD *)&msg[4] = 0u;
    *(void *)&msg[24] = *MEMORY[0x1E4F14068];
    *(_DWORD *)&msg[32] = v13;
    mach_port_name_t reply_port = mig_get_reply_port();
    *(_DWORD *)&msg[8] = v12;
    *(_DWORD *)&msg[12] = reply_port;
    *(_DWORD *)mach_msg_header_t msg = 5395;
    *(void *)&msg[16] = 0x1606700000000;
    if (MEMORY[0x1E4F14B18])
    {
      voucher_mach_msg_set((mach_msg_header_t *)msg);
      mach_port_name_t reply_port = *(_DWORD *)&msg[12];
    }
    uint64_t v15 = mach_msg((mach_msg_header_t *)msg, 275, 0x24u, 0x2Cu, reply_port, gMediaServerTimeout, 0);
    uint64_t v16 = v15;
    if ((v15 - 268435458) <= 0xE && ((1 << (v15 - 2)) & 0x4003) != 0)
    {
      mig_put_reply_port(*(mach_port_t *)&msg[12]);
    }
    else
    {
      if (!v15)
      {
        if (*(_DWORD *)&msg[20] == 71)
        {
          uint64_t v17 = 4294966988;
        }
        else if (*(_DWORD *)&msg[20] == 90315)
        {
          uint64_t v17 = 4294966996;
          if ((*(_DWORD *)msg & 0x80000000) == 0 && *(_DWORD *)&msg[4] == 36 && !*(_DWORD *)&msg[8])
          {
            uint64_t v17 = *(unsigned int *)&msg[32];
            if (!*(_DWORD *)&msg[32]) {
              goto LABEL_29;
            }
          }
        }
        else
        {
          uint64_t v17 = 4294966995;
        }
        goto LABEL_25;
      }
      mig_dealloc_reply_port(*(mach_port_t *)&msg[12]);
    }
    uint64_t v17 = 268435460;
    if (v16 != 268435460)
    {
LABEL_26:
      if (v16 != -308 && v16 != 268435459)
      {
        if (!v16)
        {
LABEL_29:
          int v10 = (unsigned int *)*((void *)this + 38);
LABEL_30:
          if (v10) {
            unsigned int v18 = *v10;
          }
          else {
            unsigned int v18 = 0;
          }
          if (v10) {
            uint64_t v20 = v10 + 1;
          }
          else {
            uint64_t v20 = 0;
          }
          uint64_t v21 = (char *)v20 + v18;
          memcpy(v21, a2, a3);
          if (a4) {
            memcpy(&v21[a3], a4, a5);
          }
          uint64_t v16 = 0;
          **((_DWORD **)this + 38) = v18 + a5 + a3;
        }
LABEL_46:
        CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v23);
        return v16;
      }
      if (kInterAppAudioScope)
      {
        uint64_t v19 = *(NSObject **)kInterAppAudioScope;
        if (!*(void *)kInterAppAudioScope)
        {
LABEL_45:
          uint64_t v16 = 4294900547;
          goto LABEL_46;
        }
      }
      else
      {
        uint64_t v19 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)mach_msg_header_t msg = 136315906;
        *(void *)&msg[4] = "IPCAUClient.cpp";
        *(_WORD *)&msg[12] = 1024;
        *(_DWORD *)&msg[14] = 433;
        *(_WORD *)&msg[18] = 1024;
        *(_DWORD *)&msg[20] = v16;
        *(_WORD *)&msg[24] = 1024;
        *(_DWORD *)&msg[26] = -66749;
        _os_log_impl(&dword_18FEC0000, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d converting result %d -> %d", msg, 0x1Eu);
      }
      goto LABEL_45;
    }
    if ((*(_WORD *)msg & 0x1F00) == 0x1100) {
      mach_port_deallocate(*MEMORY[0x1E4F14960], *(mach_port_name_t *)&msg[12]);
    }
LABEL_25:
    mach_msg_destroy((mach_msg_header_t *)msg);
    uint64_t v16 = v17;
    goto LABEL_26;
  }
  return 4294956429;
}

uint64_t IPCAU_GetParameter(void *a1, int a2, int a3, int a4, float *a5)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (!a5) {
    return 4294967246;
  }
  uint64_t v6 = 4294900547;
  uint64_t v7 = a1[4];
  uint64_t v8 = *(void *)(v7 + 16);
  if (*(_DWORD *)(v8 + 48))
  {
    unsigned int v23 = 0;
    IPCAUClient::RemoteAUServer::TransientWaker::TransientWaker(&v21, v8, &v23);
    uint64_t v12 = v23;
    if (v23)
    {
LABEL_4:
      IPCAUClient::RemoteAUServer::TransientWaker::~TransientWaker((IPCAUClient::RemoteAUServer::TransientWaker *)&v21);
      return v12;
    }
    mach_port_t v14 = *(_DWORD *)(*(void *)(v7 + 16) + 48);
    if (v22) {
      mach_msg_timeout_t v15 = 0x7FFFFFFF;
    }
    else {
      mach_msg_timeout_t v15 = 10000;
    }
    unsigned int v16 = *(_DWORD *)(v7 + 80);
    uint64_t v25 = *MEMORY[0x1E4F14068];
    unsigned int v26 = v16;
    int v27 = a2;
    int v28 = a3;
    int v29 = a4;
    mach_port_t reply_port = mig_get_reply_port();
    *(void *)&msg.msgh_bits = 5395;
    msg.msgh_remote_port = v14;
    msg.msgh_local_port = reply_port;
    *(void *)&msg.msgh_voucher_port = 0x1606300000000;
    if (MEMORY[0x1E4F14B18])
    {
      voucher_mach_msg_set(&msg);
      mach_port_t reply_port = msg.msgh_local_port;
    }
    uint64_t v18 = mach_msg(&msg, 275, 0x30u, 0x30u, reply_port, v15, 0);
    uint64_t v12 = v18;
    if ((v18 - 268435458) <= 0xE && ((1 << (v18 - 2)) & 0x4003) != 0)
    {
      mig_put_reply_port(msg.msgh_local_port);
      goto LABEL_28;
    }
    if (v18)
    {
      mig_dealloc_reply_port(msg.msgh_local_port);
LABEL_28:
      if (v12 == 268435460)
      {
        if ((msg.msgh_bits & 0x1F00) == 0x1100) {
          mach_port_deallocate(*MEMORY[0x1E4F14960], msg.msgh_local_port);
        }
        mach_msg_destroy(&msg);
        uint64_t v12 = 268435460;
        goto LABEL_4;
      }
LABEL_37:
      if (v12 != 268435459 && v12 != -308) {
        goto LABEL_4;
      }
      if (kInterAppAudioScope)
      {
        uint64_t v20 = *(NSObject **)kInterAppAudioScope;
        if (!*(void *)kInterAppAudioScope)
        {
LABEL_45:
          uint64_t v12 = 4294900547;
          goto LABEL_4;
        }
      }
      else
      {
        uint64_t v20 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        msg.msgh_bits = 136315906;
        *(void *)&msg.msgh_std::string::size_type size = "IPCAUClient.cpp";
        LOWORD(msg.msgh_local_port) = 1024;
        *(mach_port_t *)((char *)&msg.msgh_local_port + 2) = 433;
        HIWORD(msg.msgh_voucher_port) = 1024;
        msg.msgh_id = v12;
        LOWORD(v25) = 1024;
        *(_DWORD *)((char *)&v25 + 2) = -66749;
        _os_log_impl(&dword_18FEC0000, v20, OS_LOG_TYPE_DEFAULT, "%25s:%-5d converting result %d -> %d", (uint8_t *)&msg, 0x1Eu);
      }
      goto LABEL_45;
    }
    if (msg.msgh_id == 71)
    {
      uint64_t v12 = 4294966988;
    }
    else if (msg.msgh_id == 90311)
    {
      if ((msg.msgh_bits & 0x80000000) == 0)
      {
        if (msg.msgh_size == 40)
        {
          if (!msg.msgh_remote_port)
          {
            uint64_t v12 = v26;
            if (!v26)
            {
              *(_DWORD *)a5 = v27;
              goto LABEL_4;
            }
            goto LABEL_36;
          }
        }
        else if (msg.msgh_size == 36)
        {
          if (msg.msgh_remote_port) {
            BOOL v19 = 1;
          }
          else {
            BOOL v19 = v26 == 0;
          }
          if (v19) {
            uint64_t v12 = 4294966996;
          }
          else {
            uint64_t v12 = v26;
          }
          goto LABEL_36;
        }
      }
      uint64_t v12 = 4294966996;
    }
    else
    {
      uint64_t v12 = 4294966995;
    }
LABEL_36:
    mach_msg_destroy(&msg);
    goto LABEL_37;
  }
  return v6;
}

uint64_t IPCAU_SetProperty(void *a1, int a2, unsigned int a3, int a4, const AudioStreamBasicDescription *__src, size_t __n)
{
  unsigned int v6 = __n;
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = a1[4];
  if (kInterAppAudioScope)
  {
    uint64_t v12 = *(NSObject **)kInterAppAudioScope;
    if (!*(void *)kInterAppAudioScope) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v12 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    AUPropertyValueFormatter::AUPropertyValueFormatter((AUPropertyValueFormatter *)v39, a2, a3, a4, __src, v6);
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "IPCAUClient.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1129;
    *(_WORD *)&buf[18] = 2048;
    *(void *)&buf[20] = v11;
    *(_WORD *)&buf[28] = 2080;
    *(void *)&buf[30] = *(void *)v39;
    _os_log_impl(&dword_18FEC0000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d -> %p: %s", buf, 0x26u);
    if (*(void *)v39) {
      free(*(void **)v39);
    }
  }
LABEL_8:
  uint64_t v13 = 4294900547;
  uint64_t v37 = 0;
  long long outData = 0u;
  long long v36 = 0u;
  uint64_t v14 = *(void *)(v11 + 16);
  if (!*(_DWORD *)(v14 + 48))
  {
    uint64_t Property = 4294900547;
    goto LABEL_59;
  }
  unsigned int v38 = 0;
  if (a2 > 26)
  {
    if (a2 == 27)
    {
      if (*(unsigned char *)(v11 + 84)) {
        goto LABEL_35;
      }
      if (v6 < 0x28) {
        goto LABEL_38;
      }
      memcpy((void *)(v11 + 480), __src, v6);
    }
    else
    {
      if (a2 != 100) {
        goto LABEL_36;
      }
      if (v6 != 8) {
        goto LABEL_38;
      }
      char v22 = *(const void **)(v11 + 520);
      if (v22) {
        _Block_release(v22);
      }
      Float64 mSampleRate = __src->mSampleRate;
      *(Float64 *)(v11 + 520) = __src->mSampleRate;
      if (mSampleRate != 0.0)
      {
        uint64_t Property = 0;
        *(void *)(v11 + 520) = _Block_copy(*(const void **)&mSampleRate);
        goto LABEL_59;
      }
    }
    uint64_t Property = 0;
    goto LABEL_59;
  }
  if (a2 == 1)
  {
    if (!*(unsigned char *)(v11 + 84))
    {
      if (v6 >= 0x10)
      {
        if (!a4)
        {
          char v24 = *(OpaqueAudioComponentInstance **)&__src->mSampleRate;
          if (*(void *)&__src->mSampleRate)
          {
            *(_DWORD *)buf = 40;
            uint64_t Property = AudioUnitGetProperty(v24, 8u, 2u, __src->mFormatID, &outData, (UInt32 *)buf);
            unsigned int v38 = Property;
            if (Property) {
              goto LABEL_59;
            }
            uint64_t v14 = *(void *)(v11 + 16);
          }
          IPCAUClient::RemoteAUServer::TransientWaker::TransientWaker(&v33, v14, &v38);
          uint64_t Property = v38;
          if (!v38)
          {
            mach_port_t v25 = *(_DWORD *)(*(void *)(v11 + 16) + 48);
            if (v34) {
              mach_msg_timeout_t v26 = 0x7FFFFFFF;
            }
            else {
              mach_msg_timeout_t v26 = 10000;
            }
            unsigned int v27 = *(_DWORD *)(v11 + 80);
            char v28 = *(void *)&__src->mSampleRate != 0;
            *(_OWORD *)buf = outData;
            *(_OWORD *)&buf[16] = v36;
            *(void *)&buf[32] = v37;
            uint64_t v29 = IPCAUClient_ConnectInput(v25, v26, v27, v28, (long long *)buf);
            uint64_t v21 = v29;
            if (v29 == 268435459) {
              goto LABEL_52;
            }
            if (!v29)
            {
              uint64_t v13 = 0;
              *(_DWORD *)(v11 + 160) = *(void *)&__src->mSampleRate != 0;
              *(_OWORD *)(v11 + 184) = *(_OWORD *)&__src->mSampleRate;
              goto LABEL_67;
            }
LABEL_51:
            if (v21 != -308)
            {
              uint64_t v13 = v21;
              goto LABEL_67;
            }
LABEL_52:
            if (kInterAppAudioScope)
            {
              uint64_t v30 = *(NSObject **)kInterAppAudioScope;
              if (!*(void *)kInterAppAudioScope) {
                goto LABEL_67;
              }
            }
            else
            {
              uint64_t v30 = MEMORY[0x1E4F14500];
            }
            if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)uint64_t v39 = 136315906;
              *(void *)&v39[4] = "IPCAUClient.cpp";
              __int16 v40 = 1024;
              int v41 = 433;
              __int16 v42 = 1024;
              int v43 = v21;
              __int16 v44 = 1024;
              int v45 = -66749;
              _os_log_impl(&dword_18FEC0000, v30, OS_LOG_TYPE_DEFAULT, "%25s:%-5d converting result %d -> %d", v39, 0x1Eu);
            }
            goto LABEL_67;
          }
LABEL_45:
          IPCAUClient::RemoteAUServer::TransientWaker::~TransientWaker((IPCAUClient::RemoteAUServer::TransientWaker *)&v33);
          goto LABEL_59;
        }
LABEL_33:
        uint64_t Property = 4294956419;
        goto LABEL_59;
      }
LABEL_38:
      uint64_t Property = 4294956445;
      goto LABEL_59;
    }
LABEL_35:
    uint64_t Property = 4294956447;
    goto LABEL_59;
  }
  if (a2 != 23) {
LABEL_36:
  }
    PropertyMarshaller::PropertyMarshaller((PropertyMarshaller *)v39, 0);
  if (*(unsigned char *)(v11 + 84)) {
    goto LABEL_35;
  }
  if (v6 < 0x10) {
    goto LABEL_38;
  }
  if (a4) {
    goto LABEL_33;
  }
  IPCAUClient::RemoteAUServer::TransientWaker::TransientWaker(&v33, v14, &v38);
  uint64_t Property = v38;
  if (v38) {
    goto LABEL_45;
  }
  mach_port_t v16 = *(_DWORD *)(*(void *)(v11 + 16) + 48);
  if (v34) {
    mach_msg_timeout_t v17 = 0x7FFFFFFF;
  }
  else {
    mach_msg_timeout_t v17 = 10000;
  }
  unsigned int v18 = *(_DWORD *)(v11 + 80);
  char v19 = *(void *)&__src->mSampleRate != 0;
  *(_OWORD *)buf = outData;
  *(_OWORD *)&buf[16] = v36;
  *(void *)&buf[32] = v37;
  uint64_t v20 = IPCAUClient_ConnectInput(v16, v17, v18, v19, (long long *)buf);
  uint64_t v21 = v20;
  if (v20 == 268435459) {
    goto LABEL_52;
  }
  if (v20) {
    goto LABEL_51;
  }
  uint64_t v13 = 0;
  *(_DWORD *)(v11 + 160) = 2 * (*(void *)&__src->mSampleRate != 0);
  *(_OWORD *)(v11 + 168) = *(_OWORD *)&__src->mSampleRate;
LABEL_67:
  IPCAUClient::RemoteAUServer::TransientWaker::~TransientWaker((IPCAUClient::RemoteAUServer::TransientWaker *)&v33);
  uint64_t Property = v13;
LABEL_59:
  if (kInterAppAudioScope)
  {
    int v31 = *(NSObject **)kInterAppAudioScope;
    if (!*(void *)kInterAppAudioScope) {
      return Property;
    }
  }
  else
  {
    int v31 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
  {
    CAX4CCString::CAX4CCString((CAX4CCString *)v39, Property);
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "IPCAUClient.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1131;
    *(_WORD *)&buf[18] = 2048;
    *(void *)&buf[20] = v11;
    *(_WORD *)&buf[28] = 2080;
    *(void *)&buf[30] = v39;
    _os_log_impl(&dword_18FEC0000, v31, OS_LOG_TYPE_DEBUG, "%25s:%-5d <- %p (%s)", buf, 0x26u);
  }
  return Property;
}

void sub_18FF49C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
}

void AUPropertyValueFormatter::AUPropertyValueFormatter(AUPropertyValueFormatter *this, int a2, unsigned int a3, int a4, const AudioStreamBasicDescription *a5, int a6)
{
  *(void *)this = 0;
  mach_msg_timeout_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v12 = funopen(&v16, 0, (int (__cdecl *)(void *, const char *, int))CAMemoryStream::Write, 0, 0);
  uint64_t v13 = v12;
  mach_port_t v16 = v12;
  if (a3 > 7) {
    fprintf(v12, "scope %d", a3);
  }
  else {
    fputs(gScopeNames[a3], v12);
  }
  fprintf(v13, ", el %d: ", a4);
  if (a2 == 8)
  {
    CAFormatter::CAFormatter((CAFormatter *)&v15, a5);
    fprintf(v13, "stream format: %s", (const char *)v15);
    if (v15) {
      free(v15);
    }
  }
  else
  {
    fprintf(v13, "prop %d, %d bytes @ %p", a2, a6, a5);
  }
  uint64_t v14 = CAMemoryStream::cstr(&v16);
  mach_msg_timeout_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  *(void *)this = v14;
  fclose(v16);
  free(v17);
}

void sub_18FF49D94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, FILE *a13, void *a14)
{
  fclose(a13);
  free(a14);
  if (*v14) {
    free(*v14);
  }
  _Unwind_Resume(a1);
}

void PropertyMarshaller::PropertyMarshaller(PropertyMarshaller *this, const void *a2)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(void *)this = &unk_1EDF927B0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = 0;
  if (a2) {
    operator new();
  }
  operator new();
}

void sub_18FF49EC0(_Unwind_Exception *a1)
{
  MEMORY[0x192FC8940](v4, 0x20C4093837F09);
  uint64_t v6 = *(void *)(v1 + 40);
  *(void *)(v1 + 40) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  std::unique_ptr<CADeserializer>::reset[abi:ne180100](v2, 0);
  std::unique_ptr<CASerializer>::reset[abi:ne180100](v3, 0);
  _Unwind_Resume(a1);
}

void PropertyMarshaller::~PropertyMarshaller(PropertyMarshaller *this)
{
  *(void *)this = &unk_1EDF927B0;
  uint64_t v2 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::unique_ptr<CADeserializer>::reset[abi:ne180100]((uint64_t *)this + 2, 0);
  std::unique_ptr<CASerializer>::reset[abi:ne180100]((uint64_t *)this + 1, 0);
}

uint64_t std::unique_ptr<CADeserializer>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    MEMORY[0x192FC7A90]();
    JUMPOUT(0x192FC8940);
  }
  return result;
}

uint64_t std::unique_ptr<CASerializer>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    MEMORY[0x192FC7960]();
    JUMPOUT(0x192FC8940);
  }
  return result;
}

uint64_t AudioUnitPropertyMarshaller::InvalidPropertySizeError(AudioUnitPropertyMarshaller *this)
{
  return 4294956445;
}

uint64_t AudioUnitPropertyMarshaller::UnknownPropertyError(AudioUnitPropertyMarshaller *this)
{
  return 4294956417;
}

uint64_t AudioUnitPropertyMarshaller::GetMarshaller(AudioUnitPropertyMarshaller *this, AudioUnitPropertyMarshaller *a2)
{
  return AudioUnitPropertyMarshaller::CreateMarshaller(a2);
}

void AudioUnitPropertyMarshaller::~AudioUnitPropertyMarshaller(AudioUnitPropertyMarshaller *this)
{
  PropertyMarshaller::~PropertyMarshaller(this);
  JUMPOUT(0x192FC8940);
}

uint64_t IPCAU_GetProperty(void *a1, int a2, unsigned int a3, int a4, CFURLRef *a5, unsigned int *a6)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  uint64_t v47 = a5;
  if (!a6)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "IPCAUClient.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1080;
      __int16 v49 = 2080;
      *(void *)uint64_t v50 = "AudioUnitGetProperty: null size pointer";
      uint64_t v20 = MEMORY[0x1E4F14500];
LABEL_16:
      _os_log_impl(&dword_18FEC0000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d  ca_debug_string: %s", buf, 0x1Cu);
    }
    return 4294967246;
  }
  if (a5)
  {
    int v11 = *a6;
    if (*a6)
    {
      uint64_t v12 = a1[4];
      unsigned int v46 = 0;
      if (a2 == 102)
      {
        CFUUIDRef v13 = CFUUIDCreateFromUUIDBytes(0, *(CFUUIDBytes *)(v12 + 56));
        if (v13)
        {
          CFUUIDRef v14 = v13;
          CFStringRef v15 = CFUUIDCreateString(0, v13);
          if (v15)
          {
            CFStringRef v16 = v15;
            CFStringRef v17 = CFStringCreateWithFormat(0, 0, @"com-apple-audiounit:%@/%c", v15, 78);
            if (v17)
            {
              CFStringRef v18 = v17;
              CFURLRef v19 = CFURLCreateWithString(0, v17, 0);
              CFRelease(v18);
            }
            else
            {
              CFURLRef v19 = 0;
            }
            CFRelease(v16);
          }
          else
          {
            CFURLRef v19 = 0;
          }
          CFRelease(v14);
        }
        else
        {
          CFURLRef v19 = 0;
        }
        *a5 = v19;
        if (v19) {
          uint64_t v22 = 0;
        }
        else {
          uint64_t v22 = 4294967246;
        }
LABEL_44:
        if (kInterAppAudioScope)
        {
          int v32 = *(NSObject **)kInterAppAudioScope;
          if (!*(void *)kInterAppAudioScope) {
            return v22;
          }
        }
        else
        {
          int v32 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
        {
          AUPropertyValueFormatter::AUPropertyValueFormatter((AUPropertyValueFormatter *)&v44, a2, a3, a4, (const AudioStreamBasicDescription *)v47, *a6);
          uint64_t v33 = v44;
          CAX4CCString::CAX4CCString((CAX4CCString *)v57, v22);
          *(_DWORD *)buf = 136316162;
          *(void *)&uint8_t buf[4] = "IPCAUClient.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1122;
          __int16 v49 = 2048;
          *(void *)uint64_t v50 = v12;
          *(_WORD *)&v50[8] = 2080;
          *(void *)&v50[10] = v33;
          *(_WORD *)&v50[18] = 2080;
          char v51 = (const void **)v57;
          _os_log_impl(&dword_18FEC0000, v32, OS_LOG_TYPE_DEBUG, "%25s:%-5d <- %p %s (%s)", buf, 0x30u);
          if (v44) {
            free(v44);
          }
        }
        return v22;
      }
      uint64_t v22 = 4294900547;
      uint64_t v23 = *(void *)(v12 + 16);
      if (*(_DWORD *)(v23 + 48))
      {
        buf[16] = 1;
        *(void *)buf = &unk_1EDF93860;
        *(void *)&buf[8] = 256;
        *(void *)&v50[4] = &v53;
        *(void *)&v50[12] = &v54;
        char v51 = (const void **)&v55;
        uint64_t v52 = &v56;
        int v54 = 0;
        uint64_t v55 = 0;
        int v56 = 0;
        if (kInterAppAudioScope)
        {
          char v24 = *(NSObject **)kInterAppAudioScope;
          if (!*(void *)kInterAppAudioScope) {
            goto LABEL_28;
          }
        }
        else
        {
          char v24 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
        {
          v57[0] = 136315650;
          *(void *)&v57[1] = "IPCAUClient.cpp";
          LOWORD(v57[3]) = 1024;
          *(_DWORD *)((char *)&v57[3] + 2) = 1109;
          HIWORD(v57[4]) = 2048;
          *(void *)&v57[5] = v12;
          _os_log_impl(&dword_18FEC0000, v24, OS_LOG_TYPE_DEBUG, "%25s:%-5d -> %p", (uint8_t *)v57, 0x1Cu);
          uint64_t v23 = *(void *)(v12 + 16);
        }
LABEL_28:
        IPCAUClient::RemoteAUServer::TransientWaker::TransientWaker((uint64_t *)&v44, v23, &v46);
        uint64_t v25 = v46;
        if (v46)
        {
          IPCAUClient::RemoteAUServer::TransientWaker::~TransientWaker((IPCAUClient::RemoteAUServer::TransientWaker *)&v44);
          MIGVariableLengthRefs::~MIGVariableLengthRefs((MIGVariableLengthRefs *)buf);
          return v25;
        }
        int v26 = *(_DWORD *)(*(void *)(v12 + 16) + 48);
        if (v45) {
          mach_msg_timeout_t v27 = 0x7FFFFFFF;
        }
        else {
          mach_msg_timeout_t v27 = 10000;
        }
        int v28 = *(_DWORD *)(v12 + 80);
        __dst = *(void **)&v50[4];
        int v41 = *(_DWORD **)&v50[12];
        __int16 v42 = v51;
        int v43 = v52;
        memset(__n, 0, sizeof(__n));
        long long v58 = 0u;
        memset(&v57[1], 0, 32);
        *(void *)&v57[6] = *MEMORY[0x1E4F14068];
        v57[8] = v28;
        *(void *)&long long v58 = __PAIR64__(a3, a2);
        *((void *)&v58 + 1) = __PAIR64__(v11, a4);
        mach_port_name_t reply_port = mig_get_reply_port();
        v57[3] = reply_port;
        v57[0] = 5395;
        v57[2] = v26;
        *(void *)&v57[4] = 0x1605E00000000;
        if (MEMORY[0x1E4F14B18])
        {
          voucher_mach_msg_set((mach_msg_header_t *)v57);
          mach_port_name_t reply_port = v57[3];
        }
        uint64_t v30 = mach_msg((mach_msg_header_t *)v57, 275, 0x34u, 0x144u, reply_port, v27, 0);
        uint64_t v31 = v30;
        if ((v30 - 268435458) <= 0xE && ((1 << (v30 - 2)) & 0x4003) != 0)
        {
          mig_put_reply_port(v57[3]);
        }
        else
        {
          if (!v30)
          {
            if (v57[5] == 71)
            {
              uint64_t v31 = 4294966988;
            }
            else if (v57[5] == 90306)
            {
              if ((v57[0] & 0x80000000) != 0)
              {
                uint64_t v31 = 4294966996;
                if (v57[6] == 1
                  && v57[1] >= 0x3Cu
                  && v57[1] <= 0x13Cu
                  && !v57[2]
                  && BYTE3(v58) == 1
                  && LODWORD(__n[0]) <= 0x100
                  && (v57[1] - 60) >= LODWORD(__n[0]))
                {
                  unsigned int v34 = (LODWORD(__n[0]) + 3) & 0xFFFFFFFC;
                  if (v57[1] == v34 + 60)
                  {
                    uint64_t v35 = (char *)v57 + v34;
                    if (DWORD1(v58) == *((_DWORD *)v35 + 14))
                    {
                      long long v36 = v35 - 256;
                      int v37 = __n[0];
                      memcpy(__dst, (char *)__n + 4, LODWORD(__n[0]));
                      uint64_t v31 = 0;
                      *int v41 = v37;
                      *__int16 v42 = *(const void **)&v57[7];
                      *int v43 = *((_DWORD *)v36 + 78);
                      goto LABEL_84;
                    }
                  }
                }
              }
              else if (v57[1] == 36)
              {
                uint64_t v31 = 4294966996;
                if (v57[8])
                {
                  if (v57[2]) {
                    uint64_t v31 = 4294966996;
                  }
                  else {
                    uint64_t v31 = v57[8];
                  }
                }
              }
              else
              {
                uint64_t v31 = 4294966996;
              }
            }
            else
            {
              uint64_t v31 = 4294966995;
            }
            mach_msg_destroy((mach_msg_header_t *)v57);
LABEL_79:
            if (v31 == 268435459 || v31 == -308)
            {
              if (kInterAppAudioScope)
              {
                unsigned int v38 = *(NSObject **)kInterAppAudioScope;
                if (!*(void *)kInterAppAudioScope)
                {
LABEL_92:
                  IPCAUClient::RemoteAUServer::TransientWaker::~TransientWaker((IPCAUClient::RemoteAUServer::TransientWaker *)&v44);
                  MIGVariableLengthRefs::~MIGVariableLengthRefs((MIGVariableLengthRefs *)buf);
                  goto LABEL_44;
                }
              }
              else
              {
                unsigned int v38 = MEMORY[0x1E4F14500];
              }
              if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
              {
                v57[0] = 136315906;
                *(void *)&v57[1] = "IPCAUClient.cpp";
                LOWORD(v57[3]) = 1024;
                *(_DWORD *)((char *)&v57[3] + 2) = 433;
                HIWORD(v57[4]) = 1024;
                v57[5] = v31;
                LOWORD(v57[6]) = 1024;
                *(_DWORD *)((char *)&v57[6] + 2) = -66749;
                _os_log_impl(&dword_18FEC0000, v38, OS_LOG_TYPE_DEFAULT, "%25s:%-5d converting result %d -> %d", (uint8_t *)v57, 0x1Eu);
              }
              goto LABEL_92;
            }
LABEL_84:
            uint64_t v22 = v31;
            if (!v31)
            {
              if (*v51) {
                uint64_t v39 = *v51;
              }
              else {
                uint64_t v39 = *(const void **)&v50[4];
              }
              PropertyMarshaller::PropertyMarshaller((PropertyMarshaller *)v57, v39);
            }
            goto LABEL_92;
          }
          mig_dealloc_reply_port(v57[3]);
        }
        if (v31 == 268435460)
        {
          if ((v57[0] & 0x1F00) == 0x1100) {
            mach_port_deallocate(*MEMORY[0x1E4F14960], v57[3]);
          }
          mach_msg_destroy((mach_msg_header_t *)v57);
          uint64_t v31 = 268435460;
          goto LABEL_84;
        }
        goto LABEL_79;
      }
      return v22;
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "IPCAUClient.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1087;
      __int16 v49 = 2080;
      *(void *)uint64_t v50 = "AudioUnitGetProperty: zero size on entry";
      uint64_t v20 = MEMORY[0x1E4F14500];
      goto LABEL_16;
    }
    return 4294967246;
  }
  return IPCAU_GetPropertyInfo(a1, a2, a3, a4, a6, 0);
}

void sub_18FF4A958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
}

uint64_t IPCAU_GetPropertyInfo(void *a1, int a2, unsigned int a3, int a4, unsigned int *a5, unsigned __int8 *a6)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  unsigned int v28 = 0;
  if (a2 <= 26)
  {
    uint64_t v11 = 0;
    unsigned __int8 v12 = 1;
    unsigned int v13 = 16;
    if (a2 != 1 && a2 != 23) {
      goto LABEL_15;
    }
LABEL_10:
    if (!a5) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (a2 == 102)
  {
    uint64_t v11 = 0;
    unsigned __int8 v12 = 0;
    unsigned int v13 = 8;
    goto LABEL_10;
  }
  if (a2 == 27)
  {
    uint64_t v11 = 0;
    unsigned __int8 v12 = 1;
    unsigned int v13 = 40;
    if (!a5) {
      goto LABEL_12;
    }
LABEL_11:
    *a5 = v13;
    goto LABEL_12;
  }
LABEL_15:
  uint64_t v11 = 4294900547;
  uint64_t v15 = a1[4];
  uint64_t v16 = *(void *)(v15 + 16);
  if (!*(_DWORD *)(v16 + 48)) {
    return v11;
  }
  IPCAUClient::RemoteAUServer::TransientWaker::TransientWaker(&v26, v16, &v28);
  uint64_t v17 = v28;
  if (v28)
  {
    IPCAUClient::RemoteAUServer::TransientWaker::~TransientWaker((IPCAUClient::RemoteAUServer::TransientWaker *)&v26);
    return v17;
  }
  int v18 = *(_DWORD *)(*(void *)(v15 + 16) + 48);
  if (v27) {
    mach_msg_timeout_t v19 = 0x7FFFFFFF;
  }
  else {
    mach_msg_timeout_t v19 = 10000;
  }
  int v20 = *(_DWORD *)(v15 + 80);
  long long v30 = 0u;
  memset(&msg[4], 0, 32);
  *(void *)&msg[24] = *MEMORY[0x1E4F14068];
  *(_DWORD *)&msg[32] = v20;
  *(void *)&long long v30 = __PAIR64__(a3, a2);
  DWORD2(v30) = a4;
  mach_port_name_t reply_port = mig_get_reply_port();
  *(_DWORD *)&msg[8] = v18;
  *(_DWORD *)&msg[12] = reply_port;
  *(_DWORD *)mach_msg_header_t msg = 5395;
  *(void *)&msg[16] = 0x1605D00000000;
  if (MEMORY[0x1E4F14B18])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    mach_port_name_t reply_port = *(_DWORD *)&msg[12];
  }
  uint64_t v22 = mach_msg((mach_msg_header_t *)msg, 275, 0x30u, 0x34u, reply_port, v19, 0);
  uint64_t v23 = v22;
  if ((v22 - 268435458) <= 0xE && ((1 << (v22 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(*(mach_port_t *)&msg[12]);
    goto LABEL_39;
  }
  if (!v22)
  {
    if (*(_DWORD *)&msg[20] == 71)
    {
      uint64_t v23 = 4294966988;
    }
    else if (*(_DWORD *)&msg[20] == 90305)
    {
      if ((*(_DWORD *)msg & 0x80000000) == 0)
      {
        if (*(_DWORD *)&msg[4] == 44)
        {
          if (!*(_DWORD *)&msg[8])
          {
            uint64_t v23 = *(unsigned int *)&msg[32];
            if (!*(_DWORD *)&msg[32])
            {
              unsigned int v13 = v30;
              unsigned __int8 v12 = BYTE4(v30);
              goto LABEL_58;
            }
            goto LABEL_47;
          }
        }
        else if (*(_DWORD *)&msg[4] == 36)
        {
          if (*(_DWORD *)&msg[8]) {
            BOOL v24 = 1;
          }
          else {
            BOOL v24 = *(_DWORD *)&msg[32] == 0;
          }
          if (v24) {
            uint64_t v23 = 4294966996;
          }
          else {
            uint64_t v23 = *(unsigned int *)&msg[32];
          }
          goto LABEL_47;
        }
      }
      uint64_t v23 = 4294966996;
    }
    else
    {
      uint64_t v23 = 4294966995;
    }
LABEL_47:
    mach_msg_destroy((mach_msg_header_t *)msg);
    goto LABEL_48;
  }
  mig_dealloc_reply_port(*(mach_port_t *)&msg[12]);
LABEL_39:
  if (v23 != 268435460)
  {
LABEL_48:
    if (v23 != 268435459 && v23 != -308)
    {
      unsigned int v13 = 0;
      unsigned __int8 v12 = 0;
      goto LABEL_58;
    }
    if (kInterAppAudioScope)
    {
      uint64_t v25 = *(NSObject **)kInterAppAudioScope;
      if (!*(void *)kInterAppAudioScope)
      {
LABEL_57:
        unsigned int v13 = 0;
        unsigned __int8 v12 = 0;
        uint64_t v23 = 4294900547;
        goto LABEL_58;
      }
    }
    else
    {
      uint64_t v25 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)mach_msg_header_t msg = 136315906;
      *(void *)&msg[4] = "IPCAUClient.cpp";
      *(_WORD *)&msg[12] = 1024;
      *(_DWORD *)&msg[14] = 433;
      *(_WORD *)&msg[18] = 1024;
      *(_DWORD *)&msg[20] = v23;
      *(_WORD *)&msg[24] = 1024;
      *(_DWORD *)&msg[26] = -66749;
      _os_log_impl(&dword_18FEC0000, v25, OS_LOG_TYPE_DEFAULT, "%25s:%-5d converting result %d -> %d", msg, 0x1Eu);
    }
    goto LABEL_57;
  }
  if ((*(_WORD *)msg & 0x1F00) == 0x1100) {
    mach_port_deallocate(*MEMORY[0x1E4F14960], *(mach_port_name_t *)&msg[12]);
  }
  mach_msg_destroy((mach_msg_header_t *)msg);
  unsigned int v13 = 0;
  unsigned __int8 v12 = 0;
  uint64_t v23 = 268435460;
LABEL_58:
  IPCAUClient::RemoteAUServer::TransientWaker::~TransientWaker((IPCAUClient::RemoteAUServer::TransientWaker *)&v26);
  uint64_t v11 = v23;
  if (a5) {
    goto LABEL_11;
  }
LABEL_12:
  if (a6) {
    *a6 = v12;
  }
  return v11;
}

void MIGVariableLengthRefs::~MIGVariableLengthRefs(MIGVariableLengthRefs *this)
{
  *(void *)this = &unk_1EDF93470;
  if (*((unsigned char *)this + 16))
  {
    uint64_t v2 = (void *)*((void *)this + 5);
    if (v2)
    {
      if (*v2)
      {
        MEMORY[0x192FCA060](*MEMORY[0x1E4F14960], *v2, **((unsigned int **)this + 6));
        **((void **)this + 5) = 0;
        **((_DWORD **)this + 6) = 0;
      }
    }
  }
}

{
  uint64_t vars8;

  MIGVariableLengthRefs::~MIGVariableLengthRefs(this);
  JUMPOUT(0x192FC8940);
}

void MIGVariableLengthVars2<unsigned char [256]>::~MIGVariableLengthVars2(MIGVariableLengthRefs *a1)
{
  MIGVariableLengthRefs::~MIGVariableLengthRefs(a1);
  JUMPOUT(0x192FC8940);
}

uint64_t IPCAU_Uninitialize(void *a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (IPCAUClient::AUInstance *)a1[4];
  if (kInterAppAudioScope)
  {
    uint64_t v2 = *(NSObject **)kInterAppAudioScope;
    if (!*(void *)kInterAppAudioScope) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    int v4 = 136315650;
    uint64_t v5 = "IPCAUClient.cpp";
    __int16 v6 = 1024;
    int v7 = 994;
    __int16 v8 = 2048;
    uint64_t v9 = v1;
    _os_log_impl(&dword_18FEC0000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d %p", (uint8_t *)&v4, 0x1Cu);
  }
LABEL_7:
  IPCAUClient::AUInstance::Uninitialize(v1);
  return 0;
}

uint64_t IPCAU_Initialize(BOOL a1)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  if (!kInterAppAudioScope)
  {
    uint64_t v2 = MEMORY[0x1E4F14500];
LABEL_5:
    a1 = os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG);
    if (a1)
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "IPCAUClient.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 987;
      *(_WORD *)&unsigned char buf[18] = 2048;
      *(void *)&buf[20] = v1;
      _os_log_impl(&dword_18FEC0000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d %p", buf, 0x1Cu);
    }
    goto LABEL_7;
  }
  uint64_t v2 = *(NSObject **)kInterAppAudioScope;
  if (*(void *)kInterAppAudioScope) {
    goto LABEL_5;
  }
LABEL_7:
  double v31 = 0.0;
  AudioToolboxSoftLink::instance((AudioToolboxSoftLink *)a1);
  uint64_t v3 = off_1E92968C0(&v31);
  if (!v3)
  {
    if (*(unsigned char *)(v1 + 84)) {
      return 0;
    }
    uint64_t inited = 4294900547;
    uint64_t v6 = *(void *)(v1 + 16);
    if (!*(_DWORD *)(v6 + 48)) {
      return 4294900547;
    }
    uint64_t v7 = CADeprecated::TSingleton<AURegistrationServerConnection>::instance();
    uint64_t v3 = IPCAURegClient_SetProcessWakeState(*(_DWORD *)(v7 + 48), *(_DWORD *)(v6 + 52), 2, buf);
    unsigned int v32 = v3;
    if (!v3)
    {
      v30[0] = &v32;
      v30[1] = v1;
      BOOL v8 = *(void *)(v1 + 520) != 0;
      IPCAUClient::RemoteAUServer::TransientWaker::TransientWaker(&v28, *(void *)(v1 + 16), &v32);
      uint64_t v3 = v32;
      if (v32)
      {
LABEL_72:
        IPCAUClient::RemoteAUServer::TransientWaker::~TransientWaker((IPCAUClient::RemoteAUServer::TransientWaker *)&v28);
        applesauce::raii::v1::detail::ScopeGuard<IPCAUClient::AUInstance::Initialize(void)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard((uint64_t)v30);
        return v3;
      }
      BOOL v24 = &unk_1EDF94DE0;
      uint64_t v25 = 0;
      int v26 = 0;
      char v27 = 1;
      int v9 = *(_DWORD *)(*(void *)(v1 + 16) + 48);
      if (v29) {
        mach_msg_timeout_t v10 = 0x7FFFFFFF;
      }
      else {
        mach_msg_timeout_t v10 = 10000;
      }
      int v11 = *(_DWORD *)(v1 + 80);
      long long v34 = 0u;
      memset(v36, 0, 96);
      long long v35 = 0u;
      memset(&buf[4], 0, 32);
      *(void *)&buf[24] = *MEMORY[0x1E4F14068];
      *(_DWORD *)&buf[32] = v11;
      LODWORD(v34) = v8;
      mach_port_name_t reply_port = mig_get_reply_port();
      *(_DWORD *)&buf[8] = v9;
      *(_DWORD *)&unsigned char buf[12] = reply_port;
      *(_DWORD *)buf = 5395;
      *(void *)&buf[16] = 0x1605A00000000;
      if (MEMORY[0x1E4F14B18])
      {
        voucher_mach_msg_set((mach_msg_header_t *)buf);
        mach_port_name_t reply_port = *(_DWORD *)&buf[12];
      }
      uint64_t v13 = mach_msg((mach_msg_header_t *)buf, 275, 0x28u, 0xA4u, reply_port, v10, 0);
      uint64_t v14 = v13;
      if ((v13 - 268435458) <= 0xE && ((1 << (v13 - 2)) & 0x4003) != 0)
      {
        mig_put_reply_port(*(mach_port_t *)&buf[12]);
        goto LABEL_33;
      }
      if (v13)
      {
        mig_dealloc_reply_port(*(mach_port_t *)&buf[12]);
LABEL_33:
        if (v14 == 268435460)
        {
          if ((*(_WORD *)buf & 0x1F00) == 0x1100) {
            mach_port_deallocate(*MEMORY[0x1E4F14960], *(mach_port_name_t *)&buf[12]);
          }
          mach_msg_destroy((mach_msg_header_t *)buf);
          unsigned int v32 = 268435460;
          uint64_t inited = 268435460;
          goto LABEL_71;
        }
        goto LABEL_55;
      }
      if (*(_DWORD *)&buf[20] == 71)
      {
        uint64_t v14 = 4294966988;
      }
      else if (*(_DWORD *)&buf[20] == 90302)
      {
        if ((*(_DWORD *)buf & 0x80000000) != 0)
        {
          uint64_t v14 = 4294966996;
          if (*(_DWORD *)&buf[24] != 2
            || *(_DWORD *)&buf[4] < 0x4Cu
            || *(_DWORD *)&buf[4] > 0x9Cu
            || *(_DWORD *)&buf[8]
            || WORD1(v34) << 16 != 1114112
            || HIWORD(v34) << 16 != 1114112)
          {
            goto LABEL_54;
          }
          uint64_t v14 = v36[1];
          if (v36[1] <= 2u && v36[1] <= (buf[4] - 76) / 0x28u)
          {
            size_t v15 = 40 * v36[1];
            if (*(_DWORD *)&buf[4] == 40 * v36[1] + 76)
            {
              *(void *)(v1 + 88) = *((void *)&v35 + 1);
              *(_DWORD *)(v1 + 96) = v36[0];
              memcpy((void *)(v1 + 200), &v36[2], v15);
              int v26 = *(_DWORD *)&buf[28];
              *(_DWORD *)(v1 + 24) = DWORD1(v34);
              unsigned int v32 = 0;
              *(void *)buf = &v32;
              *(void *)&buf[8] = v1;
              *(void *)&buf[16] = &v28;
              if (v14)
              {
                uint64_t v16 = (double *)(v1 + 200);
                uint64_t v17 = v14;
                while (*v16 == v31)
                {
                  v16 += 5;
                  if (!--v17) {
                    goto LABEL_62;
                  }
                }
                uint64_t inited = 4294900550;
                goto LABEL_74;
              }
LABEL_62:
              HIDWORD(v25) = IPCAUSharedMemoryBase::InitPhase1((IPCAUSharedMemoryBase *)(v1 + 280), (const AudioStreamBasicDescription *)(v1 + 200), v14, *(_DWORD *)(v1 + 88));
              *(unsigned char *)(v1 + 372) = 1;
              uint64_t inited = SharableMemoryBlock::InitClient();
              *(unsigned char *)(v1 + 372) = 0;
              if (inited)
              {
                uint64_t v20 = *(void *)(v1 + 344);
                uint64_t v19 = *(void *)(v1 + 352);
                if (v19 != v20)
                {
                  do
                  {
                    v19 -= 56;
                    std::__destroy_at[abi:ne180100]<IPCAUSharedMemoryBase::Element,0>(v19);
                  }
                  while (v19 != v20);
                  *(void *)(v1 + 352) = v20;
                }
                unsigned int v32 = inited;
              }
              else
              {
                IPCAUSharedMemoryBase::InitPhase2((IPCAUSharedMemoryBase *)(v1 + 280));
                unsigned int v32 = 0;
                uint64_t v22 = v1 + 384;
                char v23 = (*(uint64_t (**)(void))(*(void *)(v1 + 384) + 16))();
                uint64_t v21 = *(_DWORD **)(v1 + 304);
                *uint64_t v21 = 0;
                *((unsigned char *)v21 + *(unsigned int *)(v1 + 376) + 2176) = 0;
                CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v22);
                *(unsigned char *)(v1 + 84) = 1;
                *(unsigned char *)(v1 + 153) = 0;
                *(void *)(v1 + 472) = 0;
                uint64_t inited = v32;
              }
LABEL_74:
              applesauce::raii::v1::detail::ScopeGuard<IPCAUClient::AUInstance::Initialize(void)::$_1,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard((uint64_t)buf);
              goto LABEL_71;
            }
          }
        }
        else if (*(_DWORD *)&buf[4] == 36)
        {
          uint64_t v14 = 4294966996;
          if (*(_DWORD *)&buf[32])
          {
            if (*(_DWORD *)&buf[8]) {
              uint64_t v14 = 4294966996;
            }
            else {
              uint64_t v14 = *(unsigned int *)&buf[32];
            }
          }
          goto LABEL_54;
        }
        uint64_t v14 = 4294966996;
      }
      else
      {
        uint64_t v14 = 4294966995;
      }
LABEL_54:
      mach_msg_destroy((mach_msg_header_t *)buf);
LABEL_55:
      if (v14 == 268435459 || v14 == -308)
      {
        if (kInterAppAudioScope)
        {
          int v18 = *(NSObject **)kInterAppAudioScope;
          if (!*(void *)kInterAppAudioScope)
          {
LABEL_70:
            unsigned int v32 = -66749;
            goto LABEL_71;
          }
        }
        else
        {
          int v18 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315906;
          *(void *)&uint8_t buf[4] = "IPCAUClient.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 433;
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = v14;
          *(_WORD *)&buf[24] = 1024;
          *(_DWORD *)&buf[26] = -66749;
          _os_log_impl(&dword_18FEC0000, v18, OS_LOG_TYPE_DEFAULT, "%25s:%-5d converting result %d -> %d", buf, 0x1Eu);
        }
        goto LABEL_70;
      }
      unsigned int v32 = v14;
      uint64_t inited = v14;
      if (v14)
      {
LABEL_71:
        SharableMemoryBlock::MachClientToken::~MachClientToken((SharableMemoryBlock::MachClientToken *)&v24);
        uint64_t v3 = inited;
        goto LABEL_72;
      }
      *(void *)buf = &v32;
      *(void *)&buf[8] = v1;
      *(void *)&buf[16] = &v28;
      goto LABEL_62;
    }
  }
  return v3;
}

void sub_18FF4B584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va3, a4);
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v12 = va_arg(va3, void);
  uint64_t v14 = va_arg(va3, void);
  uint64_t v15 = va_arg(va3, void);
  uint64_t v16 = va_arg(va3, void);
  applesauce::raii::v1::detail::ScopeGuard<IPCAUClient::AUInstance::Initialize(void)::$_1,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard((uint64_t)va3);
  SharableMemoryBlock::MachClientToken::~MachClientToken((SharableMemoryBlock::MachClientToken *)va);
  IPCAUClient::RemoteAUServer::TransientWaker::~TransientWaker((IPCAUClient::RemoteAUServer::TransientWaker *)va1);
  applesauce::raii::v1::detail::ScopeGuard<IPCAUClient::AUInstance::Initialize(void)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t applesauce::raii::v1::detail::ScopeGuard<IPCAUClient::AUInstance::Initialize(void)::$_1,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard(uint64_t a1)
{
  if (**(_DWORD **)a1)
  {
    if (*(unsigned char *)(*(void *)(a1 + 16) + 8)) {
      mach_msg_timeout_t v2 = 0x7FFFFFFF;
    }
    else {
      mach_msg_timeout_t v2 = 10000;
    }
    IPCAUClient_Uninitialize(*(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 16) + 48), v2, *(_DWORD *)(*(void *)(a1 + 8) + 80));
  }
  return a1;
}

void SharableMemoryBlock::MachClientToken::~MachClientToken(SharableMemoryBlock::MachClientToken *this)
{
  *(void *)this = &unk_1EDF94DE0;
  if (*((unsigned char *)this + 20)) {
    SharableMemoryBlock::MachClientToken::Reset(this);
  }
}

{
  uint64_t vars8;

  SharableMemoryBlock::MachClientToken::~MachClientToken(this);
  JUMPOUT(0x192FC8940);
}

uint64_t applesauce::raii::v1::detail::ScopeGuard<IPCAUClient::AUInstance::Initialize(void)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard(uint64_t a1)
{
  if (**(_DWORD **)a1)
  {
    uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 16);
    uint64_t v3 = CADeprecated::TSingleton<AURegistrationServerConnection>::instance();
    IPCAURegClient_SetProcessWakeState(*(_DWORD *)(v3 + 48), *(_DWORD *)(v2 + 52), 3, &v5);
  }
  return a1;
}

uint64_t IPCAUSharedMemoryBase::InitPhase1(IPCAUSharedMemoryBase *this, const AudioStreamBasicDescription *a2, uint64_t a3, int a4)
{
  unsigned int v5 = a3;
  (*(void (**)(IPCAUSharedMemoryBase *, uint64_t))(*(void *)this + 24))(this, a3);
  *((_DWORD *)this + 22) = a4;
  uint64_t v9 = (unsigned char *)*((void *)this + 8);
  uint64_t v8 = (char *)*((void *)this + 9);
  unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((v8 - v9) >> 3);
  unint64_t v11 = v5 - v10;
  if (v5 > v10)
  {
    uint64_t v12 = *((void *)this + 10);
    if (0x6DB6DB6DB6DB6DB7 * ((v12 - (uint64_t)v8) >> 3) >= v11)
    {
      bzero(*((void **)this + 9), 56 * ((56 * v11 - 56) / 0x38) + 56);
      *((void *)this + 9) = &v8[56 * ((56 * v11 - 56) / 0x38) + 56];
      goto LABEL_24;
    }
    unint64_t v13 = 0x6DB6DB6DB6DB6DB7 * ((v12 - (uint64_t)v9) >> 3);
    unint64_t v14 = 0xDB6DB6DB6DB6DB6ELL * ((v12 - (uint64_t)v9) >> 3);
    if (v14 <= v5) {
      unint64_t v14 = v5;
    }
    if (v13 >= 0x249249249249249) {
      unint64_t v15 = 0x492492492492492;
    }
    else {
      unint64_t v15 = v14;
    }
    if (v15 > 0x492492492492492) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v16 = 56 * v15;
    uint64_t v17 = (char *)operator new(56 * v15);
    int v18 = &v17[8 * ((v8 - v9) >> 3)];
    uint64_t v19 = &v17[v16];
    bzero(v18, 56 * ((56 * v11 - 56) / 0x38) + 56);
    uint64_t v20 = &v18[56 * ((56 * v11 - 56) / 0x38) + 56];
    if (v8 == v9)
    {
      *((void *)this + 8) = v18;
      *((void *)this + 9) = v20;
      *((void *)this + 10) = v19;
      if (!v8) {
        goto LABEL_24;
      }
    }
    else
    {
      do
      {
        long long v21 = *(_OWORD *)(v8 - 56);
        long long v22 = *(_OWORD *)(v8 - 40);
        *((void *)v18 - 3) = *((void *)v8 - 3);
        *(_OWORD *)(v18 - 40) = v22;
        *(_OWORD *)(v18 - 56) = v21;
        uint64_t v23 = *((void *)v8 - 2);
        *((void *)v8 - 2) = 0;
        *((void *)v18 - 2) = v23;
        uint64_t v24 = *((void *)v8 - 1);
        *((void *)v8 - 1) = 0;
        *((void *)v18 - 1) = v24;
        v18 -= 56;
        v8 -= 56;
      }
      while (v8 != v9);
      uint64_t v25 = (char *)*((void *)this + 8);
      uint64_t v8 = (char *)*((void *)this + 9);
      *((void *)this + 8) = v18;
      *((void *)this + 9) = v20;
      *((void *)this + 10) = v19;
      if (v8 != v25)
      {
        do
        {
          v8 -= 56;
          std::__destroy_at[abi:ne180100]<IPCAUSharedMemoryBase::Element,0>((uint64_t)v8);
        }
        while (v8 != v25);
        uint64_t v8 = v25;
      }
      if (!v8) {
        goto LABEL_24;
      }
    }
    operator delete(v8);
    goto LABEL_24;
  }
  if (v5 < v10)
  {
    int v26 = &v9[56 * v5];
    while (v8 != v26)
    {
      v8 -= 56;
      std::__destroy_at[abi:ne180100]<IPCAUSharedMemoryBase::Element,0>((uint64_t)v8);
    }
    *((void *)this + 9) = v26;
  }
LABEL_24:
  uint64_t result = *((unsigned int *)this + 14);
  if (v5)
  {
    uint64_t v28 = 0;
    do
    {
      uint64_t v29 = *((void *)this + 8) + v28;
      long long v31 = *(_OWORD *)&a2->mSampleRate;
      long long v30 = *(_OWORD *)&a2->mBytesPerPacket;
      *(void *)(v29 + 32) = *(void *)&a2->mBitsPerChannel;
      *(_OWORD *)uint64_t v29 = v31;
      *(_OWORD *)(v29 + 16) = v30;
      if ((*(unsigned char *)(v29 + 12) & 0x20) != 0) {
        int v32 = *(_DWORD *)(v29 + 28);
      }
      else {
        int v32 = 1;
      }
      result += ((*((_DWORD *)this + 22) * *(_DWORD *)(v29 + 24) + 15) & 0xFFFFFFF0) * v32;
      v28 += 56;
      ++a2;
    }
    while (56 * v5 != v28);
  }
  return result;
}

void IPCAUSharedMemoryBase::InitPhase2(IPCAUSharedMemoryBase *this)
{
  uint64_t v1 = *((void *)this + 8);
  uint64_t v2 = *((void *)this + 9);
  if (v1 != v2)
  {
    uint64_t v4 = *((void *)this + 3) + *((unsigned int *)this + 14);
    do
    {
      int v5 = *(_DWORD *)(v1 + 12);
      if ((v5 & 0x20) != 0) {
        unsigned int v6 = *(_DWORD *)(v1 + 28);
      }
      else {
        unsigned int v6 = 1;
      }
      int v7 = *(_DWORD *)(v1 + 24);
      int v8 = *((_DWORD *)this + 22);
      uint64_t v9 = CADeprecated::CABufferList::New((uint64_t)"", v5, *(_DWORD *)(v1 + 28));
      unint64_t v10 = *(void **)(v1 + 40);
      *(void *)(v1 + 40) = v9;
      if (v10) {
        std::default_delete<CADeprecated::CABufferList>::operator()[abi:ne180100](v10);
      }
      unint64_t v11 = CADeprecated::CABufferList::New((uint64_t)"", *(_DWORD *)(v1 + 12), *(_DWORD *)(v1 + 28));
      uint64_t v12 = *(void **)(v1 + 48);
      *(void *)(v1 + 48) = v11;
      if (v12) {
        std::default_delete<CADeprecated::CABufferList>::operator()[abi:ne180100](v12);
      }
      uint64_t v13 = *(void *)(v1 + 40);
      *(_DWORD *)(v13 + 24) = v6;
      if (v6)
      {
        uint64_t v14 = (v8 * v7 + 15) & 0xFFFFFFF0;
        int v15 = *(_DWORD *)(v1 + 12);
        uint64_t v16 = v6;
        uint64_t v17 = (void *)(v13 + 40);
        do
        {
          int v18 = *(_DWORD *)(v1 + 28);
          if ((v15 & 0x20) != 0) {
            int v18 = 1;
          }
          void *v17 = v4;
          *((_DWORD *)v17 - 2) = v18;
          *((_DWORD *)v17 - 1) = v14;
          v4 += v14;
          v17 += 2;
          --v16;
        }
        while (v16);
      }
      v1 += 56;
    }
    while (v1 != v2);
  }
  __dmb(0xBu);
}

void *CADeprecated::CABufferList::New(uint64_t a1, char a2, unsigned int a3)
{
  if ((a2 & 0x20) != 0) {
    unsigned int v4 = a3;
  }
  else {
    unsigned int v4 = 1;
  }
  if ((a2 & 0x20) != 0) {
    int v5 = 1;
  }
  else {
    int v5 = a3;
  }
  uint64_t result = operator new(16 * v4 + 32);
  *uint64_t result = a1;
  result[1] = 0;
  *((_DWORD *)result + 4) = 0;
  *((_DWORD *)result + 6) = v4;
  if (v4)
  {
    int v7 = (char *)(result + 4);
    do
    {
      *(_DWORD *)int v7 = v5;
      *((_DWORD *)v7 + 1) = 0;
      *((void *)v7 + 1) = 0;
      v7 += 16;
      --v4;
    }
    while (v4);
  }
  return result;
}

BOOL SharableMemoryBlock::MachClientToken::IsValid(SharableMemoryBlock::MachClientToken *this)
{
  return *((_DWORD *)this + 4) != 0;
}

uint64_t (*IPCAUClient::AUInstance::LookupMethod_Music(IPCAUClient::AUInstance *this))(void *)
{
  uint64_t v1 = IPCAU_MIDIEvent;
  if (this != 257)
  {
    if (this == 258)
    {
      return (uint64_t (*)(void *))IPCAU_SysEx;
    }
    else if ((this - 1) > 0x13)
    {
      return 0;
    }
    else
    {
      return off_1EDFA4180[(int)this - 1];
    }
  }
  return (uint64_t (*)(void *))v1;
}

uint64_t IPCAU_MIDIEvent(void *a1, char a2, char a3, char a4, int a5)
{
  int v5 = (IPCAUClient::AUInstance *)a1[4];
  v7[0] = 0;
  v7[1] = a2;
  v7[2] = a3;
  v7[3] = a4;
  int v8 = a5;
  return IPCAUClient::AUInstance::ControlMessage(v5, v7, 8uLL, 0, 0);
}

uint64_t IPCAU_SysEx(void *a1, const unsigned __int8 *a2, unsigned int a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1[4];
  if (!*(unsigned char *)(v3 + 84)) {
    return 4294956429;
  }
  uint64_t v4 = 4294900547;
  mach_port_t v5 = *(_DWORD *)(*(void *)(v3 + 16) + 48);
  if (v5)
  {
    if (a3 <= 0x7F7)
    {
      LOWORD(v13.msgh_bits) = 1;
      HIWORD(v13.msgh_bits) = a3;
      return IPCAUClient::AUInstance::ControlMessage((IPCAUClient::AUInstance *)v3, &v13, 4uLL, a2, a3);
    }
    int v7 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)uint64_t v14 = 1;
    *(void *)&v14[4] = a2;
    int v15 = 16777472;
    unsigned int v16 = a3;
    uint64_t v17 = *MEMORY[0x1E4F14068];
    int v18 = v7;
    unsigned int v19 = a3;
    mach_port_t reply_port = mig_get_reply_port();
    *(void *)&v13.msgh_bits = 2147489043;
    v13.msgh_remote_port = v5;
    v13.msgh_local_port = reply_port;
    *(void *)&v13.msgh_voucher_port = 0x1606800000000;
    if (MEMORY[0x1E4F14B18])
    {
      voucher_mach_msg_set(&v13);
      mach_port_t reply_port = v13.msgh_local_port;
    }
    uint64_t v9 = mach_msg(&v13, 275, 0x3Cu, 0x2Cu, reply_port, gMediaServerTimeout, 0);
    uint64_t v10 = v9;
    if ((v9 - 268435458) <= 0xE && ((1 << (v9 - 2)) & 0x4003) != 0)
    {
      mig_put_reply_port(v13.msgh_local_port);
    }
    else
    {
      if (!v9)
      {
        if (v13.msgh_id == 71)
        {
          uint64_t v11 = 4294966988;
        }
        else if (v13.msgh_id == 90316)
        {
          uint64_t v11 = 4294966996;
          if ((v13.msgh_bits & 0x80000000) == 0 && *(void *)&v13.msgh_size == 36)
          {
            uint64_t v11 = *(unsigned int *)&v14[8];
            if (!*(_DWORD *)&v14[8]) {
              return 0;
            }
          }
        }
        else
        {
          uint64_t v11 = 4294966995;
        }
        goto LABEL_25;
      }
      mig_dealloc_reply_port(v13.msgh_local_port);
    }
    uint64_t v11 = 268435460;
    if (v10 != 268435460)
    {
LABEL_26:
      if (v10 != 268435459 && v10 != -308) {
        return v10;
      }
      if (kInterAppAudioScope)
      {
        uint64_t v12 = *(NSObject **)kInterAppAudioScope;
        if (!*(void *)kInterAppAudioScope) {
          return v4;
        }
      }
      else
      {
        uint64_t v12 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        v13.msgh_bits = 136315906;
        *(void *)&v13.msgh_std::string::size_type size = "IPCAUClient.cpp";
        LOWORD(v13.msgh_local_port) = 1024;
        *(mach_port_t *)((char *)&v13.msgh_local_port + 2) = 433;
        HIWORD(v13.msgh_voucher_port) = 1024;
        v13.msgh_id = v10;
        *(_WORD *)uint64_t v14 = 1024;
        *(_DWORD *)&v14[2] = -66749;
        _os_log_impl(&dword_18FEC0000, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d converting result %d -> %d", (uint8_t *)&v13, 0x1Eu);
      }
      return v4;
    }
    if ((v13.msgh_bits & 0x1F00) == 0x1100) {
      mach_port_deallocate(*MEMORY[0x1E4F14960], v13.msgh_local_port);
    }
LABEL_25:
    mach_msg_destroy(&v13);
    uint64_t v10 = v11;
    goto LABEL_26;
  }
  return v4;
}

uint64_t MP4::AudioSpecificConfig::Deserialize(_DWORD *a1, int *a2, unsigned int a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  int v6 = a2[2];
  int v7 = *a2;
  int v8 = a2[5];
  v16[2] = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  v19[2] = 0;
  MP4AudioProgramConfig::Clear((MP4AudioProgramConfig *)v19);
  long long v21 = 0u;
  long long v20 = 0u;
  DecoderConfigDescr::cleanup((DecoderConfigDescr *)v16);
  bzero(v15, 0x5F0uLL);
  uint64_t v9 = DecoderConfigDescr::DeserializeMPEG4AudioSpecificConfig(v16, (uint64_t)a2, a3);
  if (v9)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315394;
      uint64_t v12 = "LATMHeader.cpp";
      __int16 v13 = 1024;
      int v14 = 86;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioSpecificConfig::Deserialize: cannot parse AudioSpecificConfig", (uint8_t *)&v11, 0x12u);
    }
  }
  else
  {
    *a1 = v8 - a2[5] + 8 * (*a2 - a2[2] + v6 - v7);
  }
  if (*((void *)&v21 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v21 + 1));
  }
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
  return v9;
}

void sub_18FF4C06C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  MP4AudioESDS::~MP4AudioESDS((MP4AudioESDS *)va);
  _Unwind_Resume(a1);
}

uint64_t MP4::LATMHeader::PutVariableSizeValue(uint64_t a1, unsigned int a2)
{
  unsigned int v6 = a2;
  if (HIBYTE(a2)) {
    unsigned int v3 = 3;
  }
  else {
    unsigned int v3 = 0;
  }
  if ((a2 & 0xFF00) != 0) {
    unsigned int v3 = 1;
  }
  if ((a2 & 0xFF0000) != 0) {
    uint64_t v4 = 2;
  }
  else {
    uint64_t v4 = v3;
  }
  AT::TBitstreamWriter<unsigned int>::PutBits(a1, v4, 2u);
  do
    uint64_t result = AT::TBitstreamWriter<unsigned int>::PutBits(a1, *((unsigned __int8 *)&v6 + v4--), 8u);
  while (v4 != -1);
  return result;
}

uint64_t MP4::LATMHeader::GetVariableSizeValue(uint64_t a1)
{
  unsigned int v2 = *(_DWORD *)(a1 + 16);
  unsigned int v3 = v2 >> 30;
  int v4 = *(_DWORD *)(a1 + 20) - 2;
  *(_DWORD *)(a1 + 20) = v4;
  if (v4 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a1, *(unsigned int **)a1);
    unsigned int v7 = *(_DWORD *)(a1 + 16);
    int v6 = *(_DWORD *)(a1 + 20);
    int v4 = v6 + 32;
    BOOL v8 = v6 == -32;
    *(void *)a1 += 4;
    v3 |= v7 >> v6;
    unsigned int v5 = v7 << -(char)v6;
    if (v8) {
      unsigned int v5 = 0;
    }
    *(_DWORD *)(a1 + 16) = v5;
    *(_DWORD *)(a1 + 20) = v4;
    if (v3 == -1) {
      return 0;
    }
  }
  else
  {
    unsigned int v5 = 4 * v2;
    *(_DWORD *)(a1 + 16) = v5;
  }
  LODWORD(v9) = 0;
  unsigned int v10 = v3 + 1;
  do
  {
    unsigned int v11 = HIBYTE(v5);
    v4 -= 8;
    *(_DWORD *)(a1 + 20) = v4;
    if (v4 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a1, *(unsigned int **)a1);
      *(void *)a1 += 4;
      unsigned int v12 = *(_DWORD *)(a1 + 16);
      int v13 = *(_DWORD *)(a1 + 20);
      v11 |= v12 >> v13;
      int v4 = v13 + 32;
      *(_DWORD *)(a1 + 20) = v13 + 32;
      if (v13 == -32) {
        unsigned int v5 = 0;
      }
      else {
        unsigned int v5 = v12 << -(char)v13;
      }
    }
    else
    {
      v5 <<= 8;
    }
    *(_DWORD *)(a1 + 16) = v5;
    uint64_t v9 = v11 + (v9 << 8);
    --v10;
  }
  while (v10);
  return v9;
}

uint64_t MP4::LATMHeader::StreamFormatInfo(uint64_t a1, unsigned __int8 *a2, int a3, std::vector<char> *a4, std::vector<char> *a5, AudioStreamBasicDescription *a6, unsigned int *a7)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  LODWORD(v50) = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  v54[2] = 0;
  MP4AudioProgramConfig::Clear((MP4AudioProgramConfig *)v54);
  long long v56 = 0u;
  long long v55 = 0u;
  DecoderConfigDescr::cleanup((DecoderConfigDescr *)&v49);
  uint64_t v14 = 0;
  if (!*(unsigned char *)(a1 + 1))
  {
    if (*(unsigned char *)(a1 + 11)) {
      goto LABEL_35;
    }
    long long v36 = a7;
    unsigned int v15 = *(_DWORD *)(a1 + 28);
    int v16 = *(_DWORD *)(a1 + 4);
    int v17 = *(_DWORD *)(a1 + 20);
    unsigned int v18 = v15 >> 3;
    if ((v15 & 7) != 0) {
      unint64_t v19 = v18 + 1;
    }
    else {
      unint64_t v19 = v18;
    }
    std::vector<char>::pointer begin = a4->__begin_;
    unint64_t v21 = a4->__end_ - a4->__begin_;
    if (v19 <= v21)
    {
      if (v19 < v21) {
        a4->__end_ = &begin[v19];
      }
    }
    else
    {
      std::vector<unsigned char>::__append(a4, v19 - v21);
      std::vector<char>::pointer begin = a4->__begin_;
    }
    v41[0] = a2;
    v41[1] = &a2[a3];
    char v42 = 0;
    int v43 = 0;
    MP4::LATMHeader::CopyBitsToByteAlignedBuffer(v41, v17 + v16, v15, begin);
    bzero(v48, 0x5F0uLL);
    int v51 = 6144;
    uint64_t v50 = 0x500000040;
    int v22 = v19;
    if (!v19) {
      int v22 = DecoderConfigDescr::MPEG4AudioSpecificPayloadSerializeByteCount((DecoderConfigDescr *)&v49);
    }
    unint64_t v23 = (v22 + 37);
    std::vector<char>::pointer v24 = a5->__begin_;
    unint64_t v25 = a5->__end_ - a5->__begin_;
    if (v23 <= v25)
    {
      if (v23 < v25) {
        a5->__end_ = &v24[v23];
      }
    }
    else
    {
      std::vector<unsigned char>::__append(a5, v23 - v25);
      std::vector<char>::pointer v24 = a5->__begin_;
    }
    v39[0] = v24;
    v39[1] = v24;
    int v26 = &v24[v23];
    v39[2] = &v24[v23];
    v39[3] = 0x2000000000;
    int v40 = v24 & 3;
    v37[0] = v24;
    v37[1] = &v24[v23];
    uint64_t v38 = 0;
    if ((v24 & 3) != 0)
    {
      int v27 = 0;
      std::vector<char>::pointer v28 = v24 + 1;
      int v29 = -8;
      std::vector<char>::pointer v30 = v28;
      do
      {
        HIDWORD(v38) = v29 + 16;
        v37[0] = v30;
        int v27 = *(v30 - 1) | (v27 << 8);
        LODWORD(v38) = v27;
        v29 += 8;
        if ((v28 & 3) == 0) {
          break;
        }
        LOBYTE(v28) = (_BYTE)v28 + 1;
      }
      while (v30++ < v26);
      LODWORD(v38) = v27 << (24 - v29);
    }
    if (MP4AudioESDS::Serialize((uint64_t)v48, (uint64_t)v39, v19, (unsigned __int8 *)a4->__begin_))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        char v45 = "LATMHeader.cpp";
        __int16 v46 = 1024;
        int v47 = 332;
        int v32 = MEMORY[0x1E4F14500];
        uint64_t v33 = "%25s:%-5d  MP4AudioESDS::Serialize Failed";
LABEL_34:
        _os_log_impl(&dword_18FEC0000, v32, OS_LOG_TYPE_ERROR, v33, buf, 0x12u);
        goto LABEL_35;
      }
      goto LABEL_35;
    }
    if (MP4AudioESDS::Deserialize((uint64_t)v48, (uint64_t)v37, 0, 0))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        char v45 = "LATMHeader.cpp";
        __int16 v46 = 1024;
        int v47 = 340;
        int v32 = MEMORY[0x1E4F14500];
        uint64_t v33 = "%25s:%-5d  MP4AudioESDS::Deserialize Failed";
        goto LABEL_34;
      }
LABEL_35:
      uint64_t v14 = 0;
      goto LABEL_36;
    }
    if (DecoderConfigDescr::MakeStreamDescription((DecoderConfigDescr *)&v49, a6, v34))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        char v45 = "LATMHeader.cpp";
        __int16 v46 = 1024;
        int v47 = 343;
        int v32 = MEMORY[0x1E4F14500];
        uint64_t v33 = "%25s:%-5d  MP4AudioESDS::DecoderConfigDescr::MakeStreamDescription Failed";
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    if (DecoderConfigDescr::GetChannelLayoutTag((DecoderConfigDescr *)&v49, v36))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        char v45 = "LATMHeader.cpp";
        __int16 v46 = 1024;
        int v47 = 346;
        int v32 = MEMORY[0x1E4F14500];
        uint64_t v33 = "%25s:%-5d  MP4AudioESDS::DecoderConfigDescr::GetChannelLayoutTag Failed";
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    uint64_t v14 = 1;
  }
LABEL_36:
  if (*((void *)&v56 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v56 + 1));
  }
  if (*((void *)&v55 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v55 + 1));
  }
  return v14;
}

void sub_18FF4C61C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  MP4AudioESDS::~MP4AudioESDS((MP4AudioESDS *)va);
  _Unwind_Resume(a1);
}

void std::vector<unsigned char>::__append(std::vector<char> *this, std::vector<char>::size_type __n)
{
  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (value - end >= __n)
  {
    if (__n)
    {
      bzero(this->__end_, __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    std::vector<char>::pointer begin = this->__begin_;
    int64_t v7 = end - this->__begin_;
    unint64_t v8 = v7 + __n;
    if ((uint64_t)(v7 + __n) < 0) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = value - begin;
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      unsigned int v11 = (char *)operator new(v10);
    }
    else {
      unsigned int v11 = 0;
    }
    unsigned int v12 = &v11[v7];
    int v13 = &v11[v10];
    bzero(v12, __n);
    if (end == begin)
    {
      unsigned int v11 = v12;
    }
    else
    {
      uint64_t v14 = &end[~(unint64_t)begin];
      do
      {
        char v15 = *--end;
        (v14--)[(void)v11] = v15;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v11;
    this->__end_ = &v12[__n];
    this->__end_cap_.__value_ = v13;
    if (end)
    {
      operator delete(end);
    }
  }
}

unsigned __int8 **MP4::LATMHeader::CopyBitsToByteAlignedBuffer(unsigned __int8 **result, int a2, unsigned int a3, unsigned char *a4)
{
  int v4 = *((_DWORD *)result + 5);
  unsigned int v5 = a2 - v4;
  if (a2 > v4)
  {
    *((_DWORD *)result + 5) = 0;
    *((unsigned char *)result + 16) = 0;
    int v4 = 0;
    if (v5 >= 8)
    {
      *result += v5 >> 3;
      a2 = v5 & 7;
    }
    else
    {
      a2 = v5;
    }
  }
  if ((a2 - 9) >= 0xFFFFFFF8)
  {
    int v6 = *((unsigned __int8 *)result + 16);
    int v7 = v4 - a2;
    *((_DWORD *)result + 5) = v7;
    if (v7 < 0)
    {
      unint64_t v9 = *result;
      if (result[1] - *result < 1) {
        int v10 = 255;
      }
      else {
        int v10 = *v9;
      }
      int v11 = v10 << -(char)v7;
      int v12 = v7 + 8;
      *((_DWORD *)result + 5) = v12;
      *uint64_t result = v9 + 1;
      if (v12) {
        LOBYTE(v8) = v11;
      }
      else {
        LOBYTE(v8) = 0;
      }
    }
    else
    {
      int v8 = v6 << a2;
    }
    *((unsigned char *)result + 16) = v8;
  }
  if (a3 >= 8)
  {
    do
    {
      int v13 = *((unsigned __int8 *)result + 16);
      int v14 = *((_DWORD *)result + 5);
      *((_DWORD *)result + 5) = v14 - 8;
      if (v14 - 8 < 0)
      {
        int v16 = *result;
        if (result[1] - *result < 1) {
          unsigned int v17 = 255;
        }
        else {
          unsigned int v17 = *v16;
        }
        *((_DWORD *)result + 5) = v14;
        *uint64_t result = v16 + 1;
        v13 |= v17 >> v14;
        if (v14) {
          char v15 = v17 << (8 - v14);
        }
        else {
          char v15 = 0;
        }
      }
      else
      {
        char v15 = 0;
      }
      *((unsigned char *)result + 16) = v15;
      *a4++ = v13;
      a3 -= 8;
    }
    while (a3 > 7);
  }
  if (a3)
  {
    unsigned int v18 = *((unsigned __int8 *)result + 16);
    unsigned int v19 = v18 >> (8 - a3);
    int v20 = *((_DWORD *)result + 5) - a3;
    *((_DWORD *)result + 5) = v20;
    if (v20 < 0)
    {
      int v22 = *result;
      if (result[1] - *result < 1) {
        unsigned int v23 = 255;
      }
      else {
        unsigned int v23 = *v22;
      }
      unsigned int v24 = v23 << -(char)v20;
      int v25 = v20 + 8;
      *((_DWORD *)result + 5) = v25;
      *uint64_t result = v22 + 1;
      v19 |= v23 >> v25;
      if (v25) {
        LOBYTE(v21) = v24;
      }
      else {
        LOBYTE(v21) = 0;
      }
    }
    else
    {
      int v21 = v18 << a3;
    }
    *((unsigned char *)result + 16) = v21;
    *a4 = v19 << (8 - a3);
  }
  return result;
}

uint64_t MP4::LOASHeader::Deserialize(unsigned int *a1, uint64_t a2)
{
  uint64_t v97 = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a2 + 8);
  int v4 = *(unsigned int **)a2;
  int v5 = v3 - v4;
  int v6 = *(_DWORD *)(a2 + 20);
  if ((v6 + 8 * v5) < 0x18) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v8 = *(_DWORD *)(a2 + 16);
  unsigned int v9 = v8 >> 21;
  int v10 = v6 - 11;
  *(_DWORD *)(a2 + 20) = v10;
  if (v10 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, v4);
    int v4 = (unsigned int *)(*(void *)a2 + 4);
    *(void *)a2 = v4;
    unsigned int v12 = *(_DWORD *)(a2 + 16);
    int v13 = *(_DWORD *)(a2 + 20);
    v9 |= v12 >> v13;
    int v10 = v13 + 32;
    *(_DWORD *)(a2 + 20) = v13 + 32;
    unsigned int v11 = v13 == -32 ? 0 : v12 << -(char)v13;
  }
  else
  {
    unsigned int v11 = v8 << 11;
  }
  *(_DWORD *)(a2 + 16) = v11;
  if (v9 != 695) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v14 = v11 >> 19;
  int v15 = v10 - 13;
  *(_DWORD *)(a2 + 20) = v15;
  if (v15 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, v4);
    int v4 = (unsigned int *)(*(void *)a2 + 4);
    *(void *)a2 = v4;
    unsigned int v19 = *(_DWORD *)(a2 + 16);
    int v20 = *(_DWORD *)(a2 + 20);
    v14 |= v19 >> v20;
    int v15 = v20 + 32;
    *(_DWORD *)(a2 + 20) = v20 + 32;
    if (v20 == -32) {
      int v16 = 0;
    }
    else {
      int v16 = v19 << -(char)v20;
    }
  }
  else
  {
    int v16 = v11 << 13;
  }
  *(_DWORD *)(a2 + 16) = v16;
  *a1 = v14;
  int v21 = v15 + 8 * (*(_DWORD *)(a2 + 8) - v4);
  if (!*((unsigned char *)a1 + 4) || (int Bit = TBitstreamReader<unsigned int>::GetBit(a2), *((unsigned char *)a1 + 5) = Bit != 0, Bit))
  {
    int v23 = 0;
    goto LABEL_18;
  }
  int v38 = *(_DWORD *)(a2 + 8);
  int v39 = *(_DWORD *)a2;
  int v40 = *(_DWORD *)(a2 + 20);
  a1[2] = v21 - v40 + 8 * (*(_DWORD *)a2 - v38);
  int v41 = TBitstreamReader<unsigned int>::GetBit(a2);
  *((unsigned char *)a1 + 12) = v41 != 0;
  if (v41)
  {
    int v42 = TBitstreamReader<unsigned int>::GetBit(a2);
    *((unsigned char *)a1 + 13) = v42 != 0;
    if (v42) {
      goto LABEL_40;
    }
    if (*((unsigned char *)a1 + 12)) {
      MP4::LATMHeader::GetVariableSizeValue(a2);
    }
  }
  else
  {
    *((unsigned char *)a1 + 13) = 0;
  }
  int v44 = TBitstreamReader<unsigned int>::GetBit(a2);
  *((unsigned char *)a1 + 14) = v44 != 0;
  if (!v44)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v93 = 136315394;
      int v94 = "LATMHeader.cpp";
      __int16 v95 = 1024;
      int v96 = 150;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  allStreamsSameTimeFraming == false not supported", (uint8_t *)&v93, 0x12u);
    }
    uint64_t v17 = 4294967293;
    goto LABEL_74;
  }
  unsigned int v45 = *(_DWORD *)(a2 + 16);
  unsigned int v46 = v45 >> 26;
  int v47 = *(_DWORD *)(a2 + 20) - 6;
  *(_DWORD *)(a2 + 20) = v47;
  if (v47 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    *(void *)a2 += 4;
    unsigned int v49 = *(_DWORD *)(a2 + 16);
    int v50 = *(_DWORD *)(a2 + 20);
    v46 |= v49 >> v50;
    int v47 = v50 + 32;
    *(_DWORD *)(a2 + 20) = v50 + 32;
    if (v50 == -32) {
      unsigned int v48 = 0;
    }
    else {
      unsigned int v48 = v49 << -(char)v50;
    }
  }
  else
  {
    unsigned int v48 = v45 << 6;
  }
  *(_DWORD *)(a2 + 16) = v48;
  *((unsigned char *)a1 + 16) = v46;
  if ((_BYTE)v46)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v93 = 136315394;
      int v94 = "LATMHeader.cpp";
      __int16 v95 = 1024;
      int v96 = 153;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  multiple subframes not supported", (uint8_t *)&v93, 0x12u);
    }
    uint64_t v17 = 4294967292;
LABEL_74:
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v93 = 136315394;
      int v94 = "LATMHeader.cpp";
      __int16 v95 = 1024;
      int v96 = 254;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Can't deserialize StreamMuxConfig", (uint8_t *)&v93, 0x12u);
    }
    return v17;
  }
  unsigned int v54 = v48 >> 28;
  int v55 = v47 - 4;
  *(_DWORD *)(a2 + 20) = v55;
  if (v55 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
    *(void *)a2 += 4;
    unsigned int v57 = *(_DWORD *)(a2 + 16);
    int v58 = *(_DWORD *)(a2 + 20);
    v54 |= v57 >> v58;
    int v55 = v58 + 32;
    *(_DWORD *)(a2 + 20) = v58 + 32;
    if (v58 == -32) {
      unsigned int v56 = 0;
    }
    else {
      unsigned int v56 = v57 << -(char)v58;
    }
  }
  else
  {
    unsigned int v56 = 16 * v48;
  }
  *(_DWORD *)(a2 + 16) = v56;
  *((unsigned char *)a1 + 17) = v54;
  if ((_BYTE)v54)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v93 = 136315394;
      int v94 = "LATMHeader.cpp";
      __int16 v95 = 1024;
      int v96 = 156;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  multiple programs not supported", (uint8_t *)&v93, 0x12u);
    }
    uint64_t v17 = 4294967291;
    goto LABEL_74;
  }
  int v59 = v40 + 8 * (v38 - v39);
  unsigned int v60 = -1;
  do
  {
    unsigned int v61 = v56 >> 29;
    int v62 = v55 - 3;
    *(_DWORD *)(a2 + 20) = v62;
    if (v62 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
      *(void *)a2 += 4;
      unsigned int v64 = *(_DWORD *)(a2 + 16);
      int v65 = *(_DWORD *)(a2 + 20);
      v61 |= v64 >> v65;
      *(_DWORD *)(a2 + 20) = v65 + 32;
      if (v65 == -32) {
        int v63 = 0;
      }
      else {
        int v63 = v64 << -(char)v65;
      }
    }
    else
    {
      int v63 = 8 * v56;
    }
    *(_DWORD *)(a2 + 16) = v63;
    if ((_BYTE)v61)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        int v93 = 136315394;
        int v94 = "LATMHeader.cpp";
        __int16 v95 = 1024;
        int v96 = 161;
        _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  multiple layers not supported", (uint8_t *)&v93, 0x12u);
      }
      uint64_t v17 = 4294967290;
      goto LABEL_74;
    }
    if (v60 == -1)
    {
      *((unsigned char *)a1 + 15) = 0;
    }
    else
    {
      int v66 = TBitstreamReader<unsigned int>::GetBit(a2);
      *((unsigned char *)a1 + 15) = v66 != 0;
      if (v66) {
        goto LABEL_92;
      }
    }
    if (!*((unsigned char *)a1 + 12))
    {
      a1[6] = v59 - *(_DWORD *)(a2 + 20) + 8 * (*(_DWORD *)a2 - *(_DWORD *)(a2 + 8));
      if (!MP4::AudioSpecificConfig::Deserialize(a1 + 8, (int *)a2, 0)) {
        goto LABEL_92;
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        int v93 = 136315394;
        int v94 = "LATMHeader.cpp";
        __int16 v95 = 1024;
        int v96 = 176;
        uint64_t v81 = MEMORY[0x1E4F14500];
        goto LABEL_124;
      }
LABEL_125:
      uint64_t v17 = 4294967289;
      goto LABEL_74;
    }
    unsigned int VariableSizeValue = MP4::LATMHeader::GetVariableSizeValue(a2);
    int v68 = *(_DWORD *)(a2 + 20) + 8 * (*(_DWORD *)(a2 + 8) - *(_DWORD *)a2);
    a1[6] = v59 - v68;
    if (MP4::AudioSpecificConfig::Deserialize(a1 + 8, (int *)a2, VariableSizeValue))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        int v93 = 136315394;
        int v94 = "LATMHeader.cpp";
        __int16 v95 = 1024;
        int v96 = 185;
        uint64_t v81 = MEMORY[0x1E4F14500];
LABEL_124:
        _os_log_impl(&dword_18FEC0000, v81, OS_LOG_TYPE_ERROR, "%25s:%-5d  Can't deserialize AudioSpecificConfig", (uint8_t *)&v93, 0x12u);
        goto LABEL_125;
      }
      goto LABEL_125;
    }
    unsigned int v69 = v68 - *(_DWORD *)(a2 + 20) + 8 * (*(_DWORD *)a2 - *(_DWORD *)(a2 + 8));
    if (VariableSizeValue < v69)
    {
      uint64_t v17 = 4294967288;
      goto LABEL_74;
    }
    TBitstreamReader<unsigned int>::SkipBits(a2, VariableSizeValue - v69);
LABEL_92:
    unsigned int v70 = *(_DWORD *)(a2 + 16);
    unsigned int v71 = v70 >> 29;
    int v72 = *(_DWORD *)(a2 + 20) - 3;
    *(_DWORD *)(a2 + 20) = v72;
    if (v72 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
      *(void *)a2 += 4;
      unsigned int v74 = *(_DWORD *)(a2 + 16);
      int v75 = *(_DWORD *)(a2 + 20);
      v71 |= v74 >> v75;
      int v72 = v75 + 32;
      *(_DWORD *)(a2 + 20) = v75 + 32;
      if (v75 == -32) {
        unsigned int v73 = 0;
      }
      else {
        unsigned int v73 = v74 << -(char)v75;
      }
    }
    else
    {
      unsigned int v73 = 8 * v70;
    }
    *(_DWORD *)(a2 + 16) = v73;
    if (v71 == 1)
    {
      *((unsigned char *)a1 + 18) = 1;
      unsigned int v76 = v73 >> 23;
      int v55 = v72 - 9;
      *(_DWORD *)(a2 + 20) = v55;
      if (v55 < 0)
      {
        TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
        *(void *)a2 += 4;
        unsigned int v78 = *(_DWORD *)(a2 + 16);
        int v79 = *(_DWORD *)(a2 + 20);
        v76 |= v78 >> v79;
        int v55 = v79 + 32;
        *(_DWORD *)(a2 + 20) = v79 + 32;
        if (v79 == -32) {
          unsigned int v56 = 0;
        }
        else {
          unsigned int v56 = v78 << -(char)v79;
        }
      }
      else
      {
        unsigned int v56 = v73 << 9;
      }
      *(_DWORD *)(a2 + 16) = v56;
      a1[5] = v76 + 20;
    }
    else
    {
      if (v71)
      {
        uint64_t v17 = 4294967287;
        goto LABEL_74;
      }
      *((unsigned char *)a1 + 18) = 0;
      int v55 = v72 - 8;
      *(_DWORD *)(a2 + 20) = v55;
      if (v55 >= 0)
      {
        unsigned int v56 = v73 << 8;
LABEL_105:
        *(_DWORD *)(a2 + 16) = v56;
        goto LABEL_111;
      }
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
      int v77 = *(_DWORD *)(a2 + 20);
      *(void *)a2 += 4;
      int v55 = v77 + 32;
      *(_DWORD *)(a2 + 20) = v77 + 32;
      if (v77 != -32)
      {
        unsigned int v56 = *(_DWORD *)(a2 + 16) << -(char)v77;
        goto LABEL_105;
      }
      unsigned int v56 = 0;
      *(_DWORD *)(a2 + 16) = 0;
    }
LABEL_111:
    ++v60;
  }
  while (v60 < *((unsigned __int8 *)a1 + 17));
  if (TBitstreamReader<unsigned int>::GetBit(a2))
  {
    if (*((unsigned char *)a1 + 12))
    {
      unsigned int v80 = MP4::LATMHeader::GetVariableSizeValue(a2);
    }
    else
    {
      unsigned int v82 = 0;
      unsigned int v84 = *(_DWORD *)(a2 + 16);
      int v83 = *(_DWORD *)(a2 + 20);
      int v85 = 4;
      do
      {
        unsigned int v86 = v84 >> 23;
        v83 -= 9;
        *(_DWORD *)(a2 + 20) = v83;
        if (v83 < 0)
        {
          TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
          *(void *)a2 += 4;
          unsigned int v87 = *(_DWORD *)(a2 + 16);
          int v88 = *(_DWORD *)(a2 + 20);
          v86 |= v87 >> v88;
          int v83 = v88 + 32;
          *(_DWORD *)(a2 + 20) = v88 + 32;
          if (v88 == -32) {
            unsigned int v84 = 0;
          }
          else {
            unsigned int v84 = v87 << -(char)v88;
          }
        }
        else
        {
          v84 <<= 9;
        }
        *(_DWORD *)(a2 + 16) = v84;
        unsigned int v80 = v86 | (v82 << 8);
        unsigned int v82 = v80;
        --v85;
      }
      while (v85);
    }
    a1[7] = v80;
  }
  if (TBitstreamReader<unsigned int>::GetBit(a2))
  {
    int v89 = *(_DWORD *)(a2 + 16);
    int v90 = *(_DWORD *)(a2 + 20) - 8;
    *(_DWORD *)(a2 + 20) = v90;
    if (v90 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
      int v92 = *(_DWORD *)(a2 + 20);
      *(void *)a2 += 4;
      *(_DWORD *)(a2 + 20) = v92 + 32;
      if (v92 == -32) {
        int v91 = 0;
      }
      else {
        int v91 = *(_DWORD *)(a2 + 16) << -(char)v92;
      }
    }
    else
    {
      int v91 = v89 << 8;
    }
    *(_DWORD *)(a2 + 16) = v91;
  }
LABEL_40:
  int v23 = a1[7];
LABEL_18:
  if (*((unsigned char *)a1 + 13)) {
    return 4294967294;
  }
  unsigned int v24 = 0;
  do
  {
    a1[9] = 0;
    if (*((unsigned char *)a1 + 18))
    {
      a1[9] = a1[5];
      int v25 = *(_DWORD *)(a2 + 20);
    }
    else
    {
      unsigned int v26 = *(_DWORD *)(a2 + 16);
      int v25 = *(_DWORD *)(a2 + 20);
      do
      {
        unsigned int v27 = HIBYTE(v26);
        v25 -= 8;
        *(_DWORD *)(a2 + 20) = v25;
        if (v25 < 0)
        {
          TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
          *(void *)a2 += 4;
          unsigned int v28 = *(_DWORD *)(a2 + 16);
          int v29 = *(_DWORD *)(a2 + 20);
          v27 |= v28 >> v29;
          int v25 = v29 + 32;
          *(_DWORD *)(a2 + 20) = v29 + 32;
          if (v29 == -32) {
            unsigned int v26 = 0;
          }
          else {
            unsigned int v26 = v28 << -(char)v29;
          }
        }
        else
        {
          v26 <<= 8;
        }
        *(_DWORD *)(a2 + 16) = v26;
        a1[9] += v27;
      }
      while (v27 == 255 && v25 + 8 * (*(_DWORD *)(a2 + 8) - *(_DWORD *)a2) > 8);
    }
    a1[10] = v21 - v25 + 8 * (*(_DWORD *)a2 - *(_DWORD *)(a2 + 8));
    if (v23) {
      TBitstreamReader<unsigned int>::SkipBits(a2, v23);
    }
    unsigned int v30 = *((unsigned __int8 *)a1 + 16);
    BOOL v32 = __OFSUB__(v24, v30);
  }
  while (v24++ < v30);
  int v33 = *(_DWORD *)(a2 + 20);
  char v34 = v33 & 7;
  if ((v33 & 7) != 0)
  {
    int v35 = *(_DWORD *)(a2 + 16);
    signed int v36 = v33 & 0xFFFFFFF8;
    *(_DWORD *)(a2 + 20) = v36;
    if (v36 < 0 != v32)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom(a2, *(unsigned int **)a2);
      int v43 = *(_DWORD *)(a2 + 20);
      *(void *)a2 += 4;
      *(_DWORD *)(a2 + 20) = v43 + 32;
      if (v43 == -32) {
        int v37 = 0;
      }
      else {
        int v37 = *(_DWORD *)(a2 + 16) << -(char)v43;
      }
    }
    else
    {
      int v37 = v35 << v34;
    }
    *(_DWORD *)(a2 + 16) = v37;
  }
  unsigned int v51 = a1[10];
  unsigned int v52 = a1[9] + (v51 >> 3);
  unsigned int v53 = *a1;
  if (v52 > *a1) {
    return 4294967285;
  }
  uint64_t v17 = 0;
  if ((v51 & 7) != 0 && v52 == v53) {
    return 4294967285;
  }
  return v17;
}

uint64_t MP4::LOASHeader::IsLOASSyncWord(MP4::LOASHeader *this, const unsigned __int8 *a2, _DWORD *a3, unsigned int *a4)
{
  int v5 = (unsigned int *)this;
  v16[0] = this;
  v16[1] = (char *)this + a2;
  uint64_t v17 = 0;
  if ((this & 3) == 0 || !a2)
  {
    uint64_t result = 0;
    *a3 = 0;
    if (a2 < 3) {
      return result;
    }
    unsigned int v13 = 0;
    HIDWORD(v17) = -11;
    goto LABEL_11;
  }
  int v6 = 0;
  char v7 = (_BYTE)this + 1;
  int v8 = -8;
  do
  {
    int v9 = *(unsigned __int8 *)v5;
    int v5 = (unsigned int *)((char *)v5 + 1);
    int v6 = v9 | (v6 << 8);
    v8 += 8;
    if ((v7 & 3) == 0) {
      break;
    }
    ++v7;
  }
  while (v5 < (unsigned int *)((char *)this + a2));
  uint64_t result = 0;
  v16[0] = v5;
  unsigned int v11 = v6 << (24 - v8);
  LODWORD(v17) = v11;
  *a3 = 0;
  if (a2 > 2)
  {
    int v12 = v8 - 3;
    unsigned int v13 = v11 >> 21;
    HIDWORD(v17) = v8 - 3;
    if (((v8 - 3) & 0x80000000) == 0)
    {
      unsigned int v14 = v11 << 11;
      goto LABEL_14;
    }
LABEL_11:
    TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v16, v5);
    int v5 = (unsigned int *)(v16[0] + 4);
    v16[0] += 4;
    v13 |= v17 >> SBYTE4(v17);
    int v12 = HIDWORD(v17) + 32;
    if (HIDWORD(v17) == -32) {
      unsigned int v14 = 0;
    }
    else {
      unsigned int v14 = v17 << -BYTE4(v17);
    }
LABEL_14:
    LODWORD(v17) = v14;
    if (v13 == 695)
    {
      unsigned int v15 = v14 >> 19;
      HIDWORD(v17) = v12 - 13;
      if (v12 - 13 < 0)
      {
        TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v16, v5);
        v15 |= v17 >> SBYTE4(v17);
      }
      *a3 = v15 + 3;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t MP4::LOASHeader::CopyByteAlignedAccessUnitsFromAudioSyncStream(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5, unsigned int a6, _DWORD *a7)
{
  char v7 = a1;
  if (*a1)
  {
    unsigned int v8 = a6;
    int v38 = a7;
    unint64_t v11 = 0;
    int v12 = 0;
    char v41 = a3 + 1;
    uint64_t v42 = a3;
    while (1)
    {
      uint64_t v13 = *(void *)(a2 + 16 * v11);
      uint64_t v14 = a2 + 16 * v11;
      uint64_t v15 = *(unsigned int *)(v14 + 12);
      int v44 = (_DWORD *)(v14 + 12);
      int v16 = (unsigned __int8 *)(a3 + v13);
      unsigned int v55 = 0;
      __int16 v56 = 1;
      memset(v57, 0, 11);
      uint64_t v59 = 0;
      uint64_t v60 = 0;
      uint64_t v58 = 0;
      uint64_t v17 = (unsigned __int8 *)(a3 + v13 + v15);
      v53[0] = a3 + v13;
      v53[1] = v17;
      uint64_t v54 = 0;
      if (((a3 + v13) & 3) != 0 && v15 != 0)
      {
        int v19 = 0;
        char v20 = v41 + v13;
        int v21 = -8;
        int v22 = v16;
        do
        {
          int v23 = v21;
          int v24 = *v22++;
          int v19 = v24 | (v19 << 8);
          v21 += 8;
          if ((v20 & 3) == 0) {
            break;
          }
          ++v20;
        }
        while (v22 < v17);
        v53[0] = v22;
        LODWORD(v54) = v19 << (24 - v21);
        HIDWORD(v54) = v23 + 16;
      }
      uint64_t v25 = MP4::LOASHeader::Deserialize(&v55, (uint64_t)v53);
      if (v25) {
        goto LABEL_36;
      }
      unsigned int v45 = v12;
      if (a4 && !HIBYTE(v56) && !HIBYTE(v57[1]))
      {
        unsigned int v26 = HIDWORD(v59);
        int v27 = v57[0];
        int v28 = HIDWORD(v58);
        unsigned int v29 = HIDWORD(v59) >> 3;
        memset(&v52, 0, sizeof(v52));
        if ((v59 & 0x700000000) != 0) {
          std::vector<char>::size_type v30 = v29 + 1;
        }
        else {
          std::vector<char>::size_type v30 = v29;
        }
        if (v30)
        {
          std::vector<unsigned char>::__append(&v52, v30);
          std::vector<char>::pointer begin = v52.__begin_;
        }
        else
        {
          std::vector<char>::pointer begin = 0;
        }
        v49[0] = v16;
        v49[1] = v17;
        char v50 = 0;
        int v51 = 0;
        MP4::LATMHeader::CopyBitsToByteAlignedBuffer(v49, v27 + v28 + 24, v26, begin);
        if (*(void *)(a4 + 8) - *(void *)a4 == v30)
        {
          int v32 = memcmp(begin, *(const void **)a4, v30);
          BOOL v33 = v32 == 0;
          if (v32) {
            uint64_t v25 = 4294967288;
          }
          else {
            uint64_t v25 = 0;
          }
        }
        else
        {
          BOOL v33 = 0;
          uint64_t v25 = 4294967288;
        }
        char v7 = a1;
        if (begin) {
          operator delete(begin);
        }
        if (!v33)
        {
LABEL_38:
          a7 = v38;
          int v12 = v45;
          goto LABEL_39;
        }
        unsigned int v8 = a6;
      }
      uint64_t v34 = v60;
      int v35 = v60 + v45;
      if (v60 + v45 > v8) {
        goto LABEL_38;
      }
      unsigned int v36 = HIDWORD(v60) + 24;
      if ((v60 & 0x700000000) != 0)
      {
        v46[0] = v16;
        v46[1] = v17;
        char v47 = 0;
        int v48 = 0;
        MP4::LATMHeader::CopyBitsToByteAlignedBuffer(v46, v36, 8 * v60, a5);
      }
      else
      {
        memcpy(a5, &v16[v36 >> 3], v60);
      }
      a3 = v42;
      *(void *)(a2 + 16 * v11) = v45;
      _DWORD *v44 = v34;
      *(_DWORD *)(a2 + 16 * v11 + 8) = 0;
      a5 += v34;
      ++v11;
      int v12 = v35;
      if (v11 >= *v7)
      {
        int v12 = v35;
LABEL_36:
        a7 = v38;
        goto LABEL_39;
      }
    }
  }
  LODWORD(v11) = 0;
  int v12 = 0;
  uint64_t v25 = 0;
LABEL_39:
  *a7 = v12;
  _DWORD *v7 = v11;
  return v25;
}

void sub_18FF4D818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SoundCheckAnalyzer::Finish(SoundCheckAnalyzer *this, CACFDictionary *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if ((*((unsigned char *)this + 8) & 8) != 0)
  {
    unint64_t v11 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
    int v12 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
    *(void *)__str = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    __int16 v23 = 257;
    Mutable = CFDictionaryCreateMutable(0, 0, v11, v12);
    __int16 v21 = 257;
    unsigned int v18 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    __int16 v19 = 257;
    if ((*((unsigned char *)this + 8) & 2) != 0)
    {
      uint64_t v13 = *((void *)this + 7);
      if (v13)
      {
        computeItuLoudnessValue(v13);
        computeEbuLoudnessRange(*((void *)this + 7));
        uint64_t v14 = *((void *)this + 7);
        if (*(unsigned char *)(v14 + 2148))
        {
          CACFDictionary::AddFloat32((CACFDictionary *)&Mutable, @"aa itu loudness", *(float *)(v14 + 2144));
          uint64_t v14 = *((void *)this + 7);
        }
        if (*(unsigned char *)(v14 + 2156))
        {
          CACFDictionary::AddFloat32((CACFDictionary *)&Mutable, @"aa ebu loudness range", *(float *)(v14 + 2152));
          uint64_t v14 = *((void *)this + 7);
        }
        if (*(unsigned char *)(v14 + 2164))
        {
          CACFDictionary::AddFloat32((CACFDictionary *)&Mutable, @"aa ebu top of loudness range", *(float *)(v14 + 2160));
          uint64_t v14 = *((void *)this + 7);
        }
        if (*(unsigned char *)(v14 + 2172))
        {
          CACFDictionary::AddFloat32((CACFDictionary *)&Mutable, @"aa ebu max momentary loudness", *(float *)(v14 + 2168));
          uint64_t v14 = *((void *)this + 7);
        }
        if (*(unsigned char *)(v14 + 2180)) {
          CACFDictionary::AddFloat32((CACFDictionary *)&Mutable, @"aa ebu max short-term loudness", *(float *)(v14 + 2176));
        }
      }
    }
    if ((*((unsigned char *)this + 8) & 4) != 0
      && TruePeakAnalyzer::PeakValue((SoundCheckAnalyzer *)((char *)this + 64)) >= *((float *)this + 26))
    {
      float v15 = TruePeakAnalyzer::PeakValue((SoundCheckAnalyzer *)((char *)this + 64));
      CACFDictionary::AddFloat32((CACFDictionary *)&Mutable, @"aa itu true peak", v15);
      float v16 = TruePeakAnalyzer::SamplePeakValue((SoundCheckAnalyzer *)((char *)this + 64));
      CACFDictionary::AddFloat32((CACFDictionary *)&Mutable, @"aa itu sample peak", v16);
    }
    if (CACFDictionary::Size((CACFDictionary *)__str)) {
      CACFDictionary::AddDictionary(a2, @"sound check info", *(const __CFDictionary **)__str);
    }
    if (CACFDictionary::Size((CACFDictionary *)&Mutable)) {
      CACFDictionary::AddDictionary(a2, @"main loudness parameters", Mutable);
    }
    if (CACFDictionary::Size((CACFDictionary *)&v18)) {
      CACFDictionary::AddDictionary(a2, @"additional loudness parameters", v18);
    }
    CACFDictionary::~CACFDictionary((CACFDictionary *)&v18);
    CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
    CACFDictionary::~CACFDictionary((CACFDictionary *)__str);
  }
  else
  {
    snprintf(__str, 0x20uLL, "%u", 0);
    CACFDictionary::AddCString(a2, @"aa version", __str);
    if ((*((unsigned char *)this + 8) & 2) != 0)
    {
      uint64_t v4 = *((void *)this + 7);
      if (v4)
      {
        computeItuLoudnessValue(v4);
        computeEbuLoudnessRange(*((void *)this + 7));
        uint64_t v6 = *((void *)this + 7);
        if (*(unsigned char *)(v6 + 2148))
        {
          AddToDictionaryVA(a2, @"aa itu loudness", v5, *(float *)(v6 + 2144));
          uint64_t v6 = *((void *)this + 7);
        }
        if (*(unsigned char *)(v6 + 2156))
        {
          AddToDictionaryVA(a2, @"aa ebu loudness range", v5, *(float *)(v6 + 2152));
          uint64_t v6 = *((void *)this + 7);
        }
        if (*(unsigned char *)(v6 + 2164))
        {
          AddToDictionaryVA(a2, @"aa ebu top of loudness range", v5, *(float *)(v6 + 2160));
          uint64_t v6 = *((void *)this + 7);
        }
        if (*(unsigned char *)(v6 + 2172))
        {
          AddToDictionaryVA(a2, @"aa ebu max momentary loudness", v5, *(float *)(v6 + 2168));
          uint64_t v6 = *((void *)this + 7);
        }
        if (*(unsigned char *)(v6 + 2180)) {
          AddToDictionaryVA(a2, @"aa ebu max short-term loudness", v5, *(float *)(v6 + 2176));
        }
      }
    }
    if ((*((unsigned char *)this + 8) & 4) != 0
      && TruePeakAnalyzer::PeakValue((SoundCheckAnalyzer *)((char *)this + 64)) >= *((float *)this + 26))
    {
      float v7 = TruePeakAnalyzer::PeakValue((SoundCheckAnalyzer *)((char *)this + 64));
      AddToDictionaryVA(a2, @"aa itu true peak", v8, v7);
      float v9 = TruePeakAnalyzer::SamplePeakValue((SoundCheckAnalyzer *)((char *)this + 64));
      AddToDictionaryVA(a2, @"aa itu sample peak", v10, v9);
    }
  }
  return 0;
}

void sub_18FF4DC10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va1);
  _Unwind_Resume(a1);
}

uint64_t AddToDictionaryVA(CACFDictionary *a1, const __CFString *a2, const char *a3, ...)
{
  va_start(va, a3);
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t result = vsnprintf(__str, 0x40uLL, "%6.2f", va);
  if ((result & 0x80000000) == 0) {
    return CACFDictionary::AddCString(a1, a2, __str);
  }
  return result;
}

void SoundCheckAnalyzer::~SoundCheckAnalyzer(SoundCheckAnalyzer *this)
{
  SoundCheckAnalyzer::~SoundCheckAnalyzer(this);
  JUMPOUT(0x192FC8940);
}

{
  unsigned char *v2;
  unsigned char *v3;
  void *v4;

  *(void *)this = &unk_1EDF927E8;
  removeGatedLoudness((void **)this + 7);
  unsigned int v2 = (unsigned char *)*((void *)this + 11);
  if (v2)
  {
    int v3 = (unsigned char *)*((void *)this + 12);
    if (v3 != v2) {
      *((void *)this + 12) = &v3[(v2 - v3 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v2);
    *((void *)this + 11) = 0;
    *((void *)this + 12) = 0;
  }
  uint64_t v4 = (void *)*((void *)this + 8);
  if (v4)
  {
    *((void *)this + 9) = v4;
    operator delete(v4);
  }
}

uint64_t SoundCheckAnalyzer::Start(int32x2_t *this, const AudioStreamBasicDescription *a2, const AudioChannelLayout *a3)
{
  if ((a2->mFormatFlags & 0x23) != 1) {
    return 4294967246;
  }
  long long v5 = *(_OWORD *)&a2->mSampleRate;
  long long v6 = *(_OWORD *)&a2->mBytesPerPacket;
  this[6] = *(int32x2_t *)&a2->mBitsPerChannel;
  *(_OWORD *)this[2].i8 = v5;
  *(_OWORD *)this[4].i8 = v6;
  __int32 v7 = this[1].i32[0];
  if ((v7 & 2) == 0) {
    goto LABEL_7;
  }
  if (a3)
  {
    AudioChannelLayoutTag mChannelLayoutTag = a3->mChannelLayoutTag;
    mChannelsPerFrame = (CAAudioChannelLayout *)a2->mChannelsPerFrame;
  }
  else
  {
    mChannelsPerFrame = (CAAudioChannelLayout *)a2->mChannelsPerFrame;
    if (mChannelsPerFrame == 1)
    {
      AudioChannelLayoutTag mChannelLayoutTag = 6553601;
    }
    else
    {
      if (mChannelsPerFrame != 2) {
        return 1718449215;
      }
      AudioChannelLayoutTag mChannelLayoutTag = 6619138;
    }
  }
  float mSampleRate = a2->mSampleRate;
  uint64_t result = initGatedLoudness(mChannelsPerFrame, mChannelLayoutTag, &this[7], mSampleRate);
  if (!result)
  {
    __int32 v7 = this[1].i32[0];
LABEL_7:
    if ((v7 & 4) == 0) {
      return 0;
    }
    unint64_t v12 = (int)a2->mChannelsPerFrame;
    uint64_t v13 = (TruePeak *)this[8];
    this[9] = (int32x2_t)v13;
    if (v12)
    {
      uint64_t v14 = *(void *)&this[10] - (void)v13;
      if (v12 <= v14 >> 7)
      {
        unint64_t v29 = v12 << 7;
        char v20 = (TruePeak *)((char *)v13 + 128 * v12);
        do
        {
          TruePeak::TruePeak(v13);
          uint64_t v13 = (TruePeak *)((char *)v13 + 128);
          v29 -= 128;
        }
        while (v29);
        this[9] = (int32x2_t)v20;
      }
      else
      {
        if ((v12 & 0x80000000) != 0) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v14 >> 6;
        if (v14 >> 6 <= v12) {
          uint64_t v15 = v12;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFF80) {
          unint64_t v16 = 0x1FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v15;
        }
        if (v16 >> 57) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v17 = (char *)operator new(v16 << 7);
        uint64_t v18 = 0;
        __int16 v19 = &v17[128 * v16];
        char v20 = (TruePeak *)&v17[128 * v12];
        do
        {
          TruePeak::TruePeak((TruePeak *)&v17[v18]);
          v18 += 128;
        }
        while (v12 << 7 != v18);
        int v22 = (char *)this[8];
        __int16 v21 = (char *)this[9];
        if (v21 != v22)
        {
          do
          {
            long long v23 = *((_OWORD *)v21 - 8);
            long long v24 = *((_OWORD *)v21 - 7);
            long long v25 = *((_OWORD *)v21 - 5);
            *((_OWORD *)v17 - 6) = *((_OWORD *)v21 - 6);
            *((_OWORD *)v17 - 5) = v25;
            *((_OWORD *)v17 - 8) = v23;
            *((_OWORD *)v17 - 7) = v24;
            long long v26 = *((_OWORD *)v21 - 4);
            long long v27 = *((_OWORD *)v21 - 3);
            long long v28 = *((_OWORD *)v21 - 2);
            *((_WORD *)v17 - 8) = *((_WORD *)v21 - 8);
            *((_OWORD *)v17 - 3) = v27;
            *((_OWORD *)v17 - 2) = v28;
            *((_OWORD *)v17 - 4) = v26;
            v17 -= 128;
            v21 -= 128;
          }
          while (v21 != v22);
          __int16 v21 = v22;
        }
        this[8] = (int32x2_t)v17;
        this[9] = (int32x2_t)v20;
        this[10] = (int32x2_t)v19;
        if (v21)
        {
          operator delete(v21);
          char v20 = (TruePeak *)this[9];
        }
      }
    }
    else
    {
      char v20 = v13;
    }
    int32x2_t v30 = this[8];
    if (v20 != (TruePeak *)v30)
    {
      unint64_t v31 = ((uint64_t)v20 - *(void *)&v30) >> 7;
      if (v31 <= 1) {
        unint64_t v31 = 1;
      }
      int v32 = (unsigned char *)(*(void *)&v30 + 112);
      do
      {
        *int v32 = 0;
        v32 += 128;
        --v31;
      }
      while (v31);
    }
    if ((int)v12 > 1)
    {
      std::valarray<float>::resize((uint64_t)&this[11], 0x8000);
      char v20 = (TruePeak *)this[9];
    }
    int32x2_t v33 = this[8];
    if (v20 == (TruePeak *)v33) {
      return 0;
    }
    uint64_t v34 = 0;
    unint64_t v35 = 0;
    do
    {
      TruePeak::Reset((TruePeak *)(*(void *)&v33 + v34));
      ++v35;
      int32x2_t v33 = this[8];
      int32x2_t v36 = this[9];
      v34 += 128;
    }
    while (v35 < (uint64_t)(*(void *)&v36 - *(void *)&v33) >> 7);
    if (*(void *)&v36 == *(void *)&v33)
    {
      return 0;
    }
    else
    {
      TruePeak::GetStats();
      uint64_t result = 0;
      this[13] = vrev64_s32(v37);
    }
  }
  return result;
}

void sub_18FF4E01C(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 72) = v2;
  _Unwind_Resume(exception_object);
}

void parseInfoStringsChunk(unsigned __int8 *a1, uint64_t a2, CACFDictionary *a3)
{
  if ((unint64_t)a2 >= 4 && *(_DWORD *)a1 && a2 >= 5)
  {
    int v5 = 0;
    long long v6 = &a1[a2];
    unsigned int v20 = bswap32(*(_DWORD *)a1);
    __int32 v7 = a1 + 4;
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    float v9 = &a1[a2 - 1];
    __int16 v19 = &a1[a2 - 2];
    while (!*v7)
    {
      unint64_t v10 = 0;
LABEL_15:
      CFStringRef v12 = CFStringCreateWithBytes(v8, v7, v10, 0x8000100u, 0);
      if (v12)
      {
        uint64_t v13 = (unsigned __int8 *)&v7[v10 + 1];
        if (v13 >= v6) {
          return;
        }
        CFStringRef v14 = v12;
        if (*v13)
        {
          unint64_t v15 = 0;
          while (&v19[-v10] - v7 != v15)
          {
            if (!v7[v10 + 2 + v15++])
            {
              if (v15 < v6 - v13) {
                goto LABEL_24;
              }
              return;
            }
          }
          return;
        }
        unint64_t v15 = 0;
LABEL_24:
        CFStringRef v17 = CFStringCreateWithBytes(v8, &v7[v10 + 1], v15, 0x8000100u, 0);
        if (v17)
        {
          CFStringRef v18 = v17;
          if (CFStringGetLength(v17) && CFStringGetLength(v14)) {
            CACFDictionary::AddString(a3, v14, v18);
          }
          v13 += v15 + 1;
          CFRelease(v18);
        }
        CFRelease(v14);
        __int32 v7 = v13;
      }
      if (++v5 >= v20 || v7 >= v6) {
        return;
      }
    }
    unint64_t v10 = 0;
    while (v9 - v7 != v10)
    {
      if (!v7[++v10])
      {
        if (v10 < v6 - v7) {
          goto LABEL_15;
        }
        return;
      }
    }
  }
}

uint64_t CAFtoAF_FormatListItem(uint64_t result, AudioFormatListItem *a2)
{
  *(void *)&a2->mASBD.mBitsPerChannel = 0;
  *(_OWORD *)&a2->mASBD.float mSampleRate = 0u;
  *(_OWORD *)&a2->mASBD.mBytesPerPacket = 0u;
  a2->mASBD.float mSampleRate = *(Float64 *)result;
  AudioFormatID v2 = *(_DWORD *)(result + 8);
  a2->mASBD.mFormatID = v2;
  UInt32 v3 = *(_DWORD *)(result + 16);
  UInt32 v4 = *(_DWORD *)(result + 20);
  a2->mASBD.mBytesPerPacket = v3;
  a2->mASBD.mFramesPerPacket = v4;
  UInt32 v5 = *(_DWORD *)(result + 24);
  UInt32 v6 = *(_DWORD *)(result + 28);
  a2->mASBD.mChannelsPerFrame = v5;
  a2->mASBD.mBitsPerChannel = v6;
  if (v4 == 1) {
    a2->mASBD.mBytesPerFrame = v3;
  }
  AudioFormatFlags v7 = *(_DWORD *)(result + 12);
  if (v2 == 1819304813)
  {
    if (v7) {
      int v8 = 1;
    }
    else {
      int v8 = 4;
    }
    int v9 = (v8 | *(_DWORD *)(result + 12) & 2) ^ 2;
    if ((v6 & 7) != 0 || (v6 >> 3) * v5 != v3) {
      AudioFormatFlags v10 = v9 | 0x10;
    }
    else {
      AudioFormatFlags v10 = v9 | 8;
    }
    a2->mASBD.mFormatFlags = v10;
  }
  else
  {
    a2->mASBD.mFormatFlags = v7;
  }
  a2->AudioChannelLayoutTag mChannelLayoutTag = *(_DWORD *)(result + 32);
  return result;
}

BOOL CAFRegionChunk_BtoN(CAFRegionChunk *a1, unint64_t a2)
{
  UInt32 mNumberRegions = a1->mNumberRegions;
  UInt32 v3 = bswap32(mNumberRegions);
  a1->mSMPTE_TimeType = bswap32(a1->mSMPTE_TimeType);
  a1->UInt32 mNumberRegions = v3;
  if (!mNumberRegions) {
    return 0;
  }
  UInt32 v4 = 0;
  mRegions = (int8x8_t *)a1->mRegions;
  while (1)
  {
    BOOL v6 = (char *)mRegions - (char *)a1 + 40 > a2;
    if ((char *)mRegions - (char *)a1 + 40 > a2) {
      break;
    }
    unint64_t v7 = a2 - ((char *)mRegions - (char *)a1);
    unint64_t v8 = v7 - 12;
    if (v7 < 0xC) {
      break;
    }
    int8x8_t *mRegions = vrev32_s8(*mRegions);
    unsigned int v9 = mRegions[1].u32[0];
    uint64_t v10 = bswap32(v9);
    mRegions[1].i32[0] = v10;
    if (v10 > (v8 / 0x1C)) {
      break;
    }
    if (v9)
    {
      unint64_t v11 = mRegions + 2;
      uint64_t v12 = v10;
      do
      {
        v11[-1].i32[1] = bswap32(v11[-1].u32[1]);
        *unint64_t v11 = (int8x8_t)bswap64((unint64_t)*v11);
        v11[1].i32[0] = bswap32(v11[1].u32[0]);
        v11[2] = vrev32_s8(v11[2]);
        unint64_t v11 = (int8x8_t *)((char *)v11 + 28);
        --v12;
      }
      while (v12);
    }
    mRegions = (int8x8_t *)((char *)mRegions + 28 * v10 + 12);
    if (++v4 == v3) {
      return 0;
    }
  }
  a1->UInt32 mNumberRegions = v4;
  return v6;
}

void std::vector<CAFStringsWrapper::CAFStringWrapper>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  AudioFormatID v2 = (void **)**a1;
  if (v2)
  {
    UInt32 v4 = (void **)v1[1];
    UInt32 v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0) {
          operator delete(*(v4 - 3));
        }
        v4 -= 4;
      }
      while (v4 != v2);
      UInt32 v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<CAFStringsWrapper::CAFStringWrapper>::__construct_one_at_end[abi:ne180100]<CAFStringsWrapper::CAFStringWrapper const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(_DWORD *)uint64_t v3 = *(_DWORD *)a2;
  UInt32 v4 = (std::string *)(v3 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 8);
    *(void *)(v3 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *(void *)(a1 + 8) = v3 + 32;
}

void sub_18FF4E484(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *std::vector<CAFStringsWrapper::CAFStringWrapper>::__push_back_slow_path<CAFStringsWrapper::CAFStringWrapper const&>(unint64_t *a1, uint64_t a2)
{
  unint64_t v3 = *a1;
  unint64_t v2 = a1[1];
  uint64_t v4 = (uint64_t)(v2 - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v23 = a1 + 2;
  if (v9)
  {
    if (v9 >> 59) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v10 = (char *)operator new(32 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  unint64_t v11 = &v10[32 * v4];
  unsigned int v20 = v10;
  v21.i64[0] = (uint64_t)v11;
  v21.i64[1] = (uint64_t)v11;
  int v22 = &v10[32 * v9];
  *(_DWORD *)unint64_t v11 = *(_DWORD *)a2;
  uint64_t v12 = (std::string *)(v11 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
    unint64_t v3 = *a1;
    unint64_t v2 = a1[1];
    uint64_t v13 = (char *)v21.i64[1];
    unint64_t v11 = (char *)v21.i64[0];
  }
  else
  {
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 8);
    *((void *)v11 + 3) = *(void *)(a2 + 24);
    uint64_t v13 = v11;
  }
  if (v2 == v3)
  {
    int64x2_t v16 = vdupq_n_s64(v3);
  }
  else
  {
    do
    {
      int v14 = *(_DWORD *)(v2 - 32);
      v2 -= 32;
      *((_DWORD *)v11 - 8) = v14;
      v11 -= 32;
      long long v15 = *(_OWORD *)(v2 + 8);
      *((void *)v11 + 3) = *(void *)(v2 + 24);
      *(_OWORD *)(v11 + 8) = v15;
      *(void *)(v2 + 16) = 0;
      *(void *)(v2 + 24) = 0;
      *(void *)(v2 + 8) = 0;
    }
    while (v2 != v3);
    int64x2_t v16 = *(int64x2_t *)a1;
  }
  CFStringRef v17 = v13 + 32;
  *a1 = (unint64_t)v11;
  a1[1] = (unint64_t)(v13 + 32);
  int64x2_t v21 = v16;
  unint64_t v18 = a1[2];
  a1[2] = (unint64_t)v22;
  int v22 = (char *)v18;
  unsigned int v20 = (char *)v16.i64[0];
  std::__split_buffer<CAFStringsWrapper::CAFStringWrapper>::~__split_buffer((uint64_t)&v20);
  return v17;
}

void sub_18FF4E5E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CAFStringsWrapper::CAFStringWrapper>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<CAFStringsWrapper::CAFStringWrapper>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = v2 - 32;
      *(void *)(a1 + 16) = v2 - 32;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        uint64_t v4 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void CADeprecated::CAAutoFree<CAFStrings>::allocBytes(void **a1, size_t size)
{
  uint64_t v4 = *a1;
  if (v4)
  {
    free(v4);
    *a1 = 0;
  }
  unint64_t v5 = malloc_type_malloc(size, 0x2C8E6D5CuLL);
  BOOL v6 = v5;
  if (size && !v5)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v8 = std::bad_alloc::bad_alloc(exception);
  }
  bzero(v5, size);
  *a1 = v6;
}

char *CAFStringsWrapper::Get(CAFStringsWrapper *this, uint64_t a2, int a3)
{
  if (((a2 - (void)this) & 0x1FFFFFFFE0) == 0) {
    return 0;
  }
  uint64_t v3 = 0;
  uint64_t v4 = this;
  while (1)
  {
    int v5 = *(_DWORD *)v4;
    uint64_t v4 = (CAFStringsWrapper *)((char *)v4 + 32);
    if (v5 == a3) {
      break;
    }
    if (((unint64_t)(a2 - (void)this) >> 5) == ++v3) {
      return 0;
    }
  }
  unint64_t v7 = (char *)this + 32 * v3;
  uint64_t result = v7 + 8;
  if (v7[31] < 0) {
    return *(char **)result;
  }
  return result;
}

void CAFStringsWrapper::Put(CAFStringsWrapper *this, int a2, std::string::value_type *__s)
{
  memset(&__p, 0, sizeof(__p));
  int v13 = a2;
  std::string::__assign_external(&__p, __s);
  unint64_t v5 = *((void *)this + 1);
  unint64_t v6 = v5 - *(void *)this;
  if ((v6 & 0x1FFFFFFFE0) != 0)
  {
    uint64_t v7 = 0;
    uint64_t v8 = (v6 >> 5);
    unint64_t v9 = *(int **)this;
    while (1)
    {
      int v10 = *v9;
      v9 += 8;
      if (v10 == a2) {
        break;
      }
      if (v8 == ++v7) {
        goto LABEL_5;
      }
    }
    uint64_t v12 = *(void *)this + 32 * v7;
    *(_DWORD *)uint64_t v12 = v13;
    std::string::operator=((std::string *)(v12 + 8), &__p);
  }
  else
  {
LABEL_5:
    if (v5 >= *((void *)this + 2))
    {
      unint64_t v11 = std::vector<CAFStringsWrapper::CAFStringWrapper>::__push_back_slow_path<CAFStringsWrapper::CAFStringWrapper const&>((unint64_t *)this, (uint64_t)&v13);
    }
    else
    {
      std::vector<CAFStringsWrapper::CAFStringWrapper>::__construct_one_at_end[abi:ne180100]<CAFStringsWrapper::CAFStringWrapper const&>((uint64_t)this, (uint64_t)&v13);
      unint64_t v11 = (char *)(v5 + 32);
    }
    *((void *)this + 1) = v11;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_18FF4E824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int32x4_t *UpmixMonoToStereoInterleaved32_ARM(int32x4_t *result, __int32 *a2, unsigned int a3)
{
  if ((a2 & 0xF) != 0 && a3)
  {
    char v3 = (_BYTE)a2 + 8;
    do
    {
      __int32 v4 = result->i32[0];
      uint64_t result = (int32x4_t *)((char *)result + 4);
      unint64_t v5 = a2 + 2;
      *a2 = v4;
      a2[1] = v4;
      unsigned int v6 = a3 - 1;
      if ((v3 & 0xF) == 0) {
        break;
      }
      v3 += 8;
      a2 += 2;
      --a3;
    }
    while (a3);
  }
  else
  {
    unint64_t v5 = a2;
    unsigned int v6 = a3;
  }
  if (v6 >= 4)
  {
    unsigned int v7 = v6 >> 2;
    do
    {
      int32x4_t v8 = *result++;
      v13.val[0] = (float32x2_t)v8.i64[0];
      v13.val[1] = (float32x2_t)v8.i64[0];
      unint64_t v9 = v5 + 8;
      vst2_f32((float *)v5, v13);
      int v10 = (int32x4_t *)(v5 + 4);
      *int v10 = vzip2q_s32(v8, v8);
      unint64_t v5 = v9;
      --v7;
    }
    while (v7);
    unint64_t v5 = v9;
  }
  for (int i = v6 & 3; i; --i)
  {
    __int32 v12 = result->i32[0];
    uint64_t result = (int32x4_t *)((char *)result + 4);
    __int32 *v5 = v12;
    v5[1] = v12;
    v5 += 2;
  }
  return result;
}

int16x8_t *UpmixMonoToStereoInterleaved16_ARM(int16x8_t *result, __int16 *a2, unsigned int a3)
{
  if ((a2 & 0xF) != 0 && a3)
  {
    char v3 = (_BYTE)a2 + 4;
    do
    {
      __int16 v4 = result->i16[0];
      uint64_t result = (int16x8_t *)((char *)result + 2);
      *a2 = v4;
      unint64_t v5 = a2 + 2;
      a2[1] = v4;
      unsigned int v6 = a3 - 1;
      if ((v3 & 0xF) == 0) {
        break;
      }
      v3 += 4;
      a2 += 2;
      --a3;
    }
    while (a3);
  }
  else
  {
    unint64_t v5 = a2;
    unsigned int v6 = a3;
  }
  if (v6 >= 8)
  {
    unsigned int v7 = v6 >> 3;
    do
    {
      int16x8_t v8 = *result++;
      v13.val[0] = (int16x4_t)v8.i64[0];
      v13.val[1] = (int16x4_t)v8.i64[0];
      unint64_t v9 = v5 + 16;
      vst2_s16(v5, v13);
      int v10 = (int16x8_t *)(v5 + 8);
      *int v10 = vzip2q_s16(v8, v8);
      unint64_t v5 = v9;
      --v7;
    }
    while (v7);
    unint64_t v5 = v9;
  }
  for (int i = v6 & 7; i; --i)
  {
    __int16 v12 = result->i16[0];
    uint64_t result = (int16x8_t *)((char *)result + 2);
    __int16 *v5 = v12;
    v5[1] = v12;
    v5 += 2;
  }
  return result;
}

__int16 *DownmixStereoInterleavedInt16ToMono_ARM(__int16 *result, int16x8_t *a2, unsigned int a3)
{
  if ((a2 & 0xF) != 0 && a3)
  {
    char v3 = (_BYTE)a2 + 2;
    do
    {
      __int16 v4 = (int16x8_t *)(result + 2);
      int v5 = result[1] + *result;
      int v6 = (23170 * v5) >> 15;
      int v7 = ((23170 * v5) >> 31) ^ v6;
      if (v5 > 1) {
        __int16 v8 = 0x7FFF;
      }
      else {
        __int16 v8 = 0x8000;
      }
      if (v7 < 0x8000) {
        __int16 v8 = v6;
      }
      a2->i16[0] = v8;
      a2 = (int16x8_t *)((char *)a2 + 2);
      unsigned int v9 = a3 - 1;
      if ((v3 & 0xF) == 0) {
        break;
      }
      v3 += 2;
      result += 2;
      --a3;
    }
    while (a3);
  }
  else
  {
    unsigned int v9 = a3;
    __int16 v4 = (int16x8_t *)result;
  }
  if (v9 >= 8)
  {
    unsigned int v10 = v9 >> 3;
    int32x4_t v11 = vdupq_n_s32(0x5A82u);
    do
    {
      int16x8_t v12 = *v4;
      int16x8_t v13 = v4[1];
      v4 += 2;
      *a2++ = vqrshrn_high_n_s32(vqrshrn_n_s32(vmulq_s32(vpaddlq_s16(v12), v11), 0xFuLL), vmulq_s32(vpaddlq_s16(v13), v11), 0xFuLL);
      --v10;
    }
    while (v10);
  }
  for (int i = v9 & 7; i; --i)
  {
    int v15 = v4->i16[1] + v4->i16[0];
    int v16 = (23170 * v15) >> 15;
    int v17 = ((23170 * v15) >> 31) ^ v16;
    if (v15 > 1) {
      __int16 v18 = 0x7FFF;
    }
    else {
      __int16 v18 = 0x8000;
    }
    if (v17 < 0x8000) {
      __int16 v18 = v16;
    }
    a2->i16[0] = v18;
    a2 = (int16x8_t *)((char *)a2 + 2);
    __int16 v4 = (int16x8_t *)((char *)v4 + 4);
  }
  return result;
}

_OWORD *SwapPCM16_ARM(_OWORD *result, int8x16_t *a2, unsigned int a3)
{
  if ((a2 & 0xF) != 0 && a3)
  {
    char v3 = (_BYTE)a2 + 2;
    do
    {
      unsigned int v4 = *(unsigned __int16 *)result;
      uint64_t result = (_OWORD *)((char *)result + 2);
      a2->i16[0] = bswap32(v4) >> 16;
      a2 = (int8x16_t *)((char *)a2 + 2);
      unsigned int v5 = a3 - 1;
      if ((v3 & 0xF) == 0) {
        break;
      }
      v3 += 2;
      --a3;
    }
    while (a3);
  }
  else
  {
    unsigned int v5 = a3;
  }
  if (v5 >= 0x10)
  {
    unsigned int v6 = v5 >> 4;
    do
    {
      int8x16_t v7 = *(int8x16_t *)result;
      int8x16_t v8 = *((int8x16_t *)result + 1);
      result += 2;
      *a2 = vrev16q_s8(v7);
      a2[1] = vrev16q_s8(v8);
      a2 += 2;
      --v6;
    }
    while (v6);
  }
  for (int i = v5 & 0xF; i; --i)
  {
    unsigned int v10 = *(unsigned __int16 *)result;
    uint64_t result = (_OWORD *)((char *)result + 2);
    a2->i16[0] = bswap32(v10) >> 16;
    a2 = (int8x16_t *)((char *)a2 + 2);
  }
  return result;
}

int16x8_t *NativeInt16ToNativeInt32_ARM(int16x8_t *result, uint32x4_t *a2, unsigned int a3, char a4)
{
  if ((a2 & 0xF) != 0 && a3)
  {
    char v4 = (_BYTE)a2 + 4;
    do
    {
      int v5 = result->i16[0];
      uint64_t result = (int16x8_t *)((char *)result + 2);
      a2->i32[0] = v5 << a4;
      a2 = (uint32x4_t *)((char *)a2 + 4);
      unsigned int v6 = a3 - 1;
      if ((v4 & 0xF) == 0) {
        break;
      }
      v4 += 4;
      --a3;
    }
    while (a3);
  }
  else
  {
    unsigned int v6 = a3;
  }
  if (v6 >= 8)
  {
    uint32x4_t v7 = (uint32x4_t)vdupq_n_s32(a4);
    unsigned int v8 = v6 >> 3;
    do
    {
      int16x8_t v9 = *result++;
      *a2 = vshlq_u32((uint32x4_t)vmovl_s16(*(int16x4_t *)v9.i8), v7);
      a2[1] = vshlq_u32((uint32x4_t)vmovl_high_s16(v9), v7);
      a2 += 2;
      --v8;
    }
    while (v8);
  }
  for (int i = v6 & 7; i; --i)
  {
    int v11 = result->i16[0];
    uint64_t result = (int16x8_t *)((char *)result + 2);
    a2->i32[0] = v11 << a4;
    a2 = (uint32x4_t *)((char *)a2 + 4);
  }
  return result;
}

int32x4_t *NativeInt32ToNativeInt16_ARM(int32x4_t *result, int16x8_t *a2, unsigned int a3, int a4)
{
  if ((a2 & 0xF) != 0 && a3)
  {
    char v4 = a4 - 1;
    char v5 = (_BYTE)a2 + 2;
    do
    {
      int v6 = result->i32[0];
      uint64_t result = (int32x4_t *)((char *)result + 4);
      int v7 = ((v6 >> v4) + 1) >> 1;
      int v8 = (((v6 >> v4) + 1) >> 31) ^ v7;
      if (v6 >> v4 > 0) {
        __int16 v9 = 0x7FFF;
      }
      else {
        __int16 v9 = 0x8000;
      }
      if (v8 < 0x8000) {
        __int16 v9 = v7;
      }
      a2->i16[0] = v9;
      a2 = (int16x8_t *)((char *)a2 + 2);
      unsigned int v10 = a3 - 1;
      if ((v5 & 0xF) == 0) {
        break;
      }
      v5 += 2;
      --a3;
    }
    while (a3);
  }
  else
  {
    unsigned int v10 = a3;
  }
  if (v10 >= 0x10)
  {
    int32x4_t v11 = vdupq_n_s32(-a4);
    unsigned int v12 = v10 >> 4;
    do
    {
      int16x8_t v13 = vqmovn_high_s32(vqmovn_s32(vqrshlq_s32(result[2], v11)), vqrshlq_s32(result[3], v11));
      *a2 = vqmovn_high_s32(vqmovn_s32(vqrshlq_s32(*result, v11)), vqrshlq_s32(result[1], v11));
      a2[1] = v13;
      a2 += 2;
      result += 4;
      --v12;
    }
    while (v12);
  }
  int v14 = v10 & 0xF;
  if (v14)
  {
    char v15 = a4 - 1;
    do
    {
      int v16 = result->i32[0];
      uint64_t result = (int32x4_t *)((char *)result + 4);
      int v17 = ((v16 >> v15) + 1) >> 1;
      int v18 = (((v16 >> v15) + 1) >> 31) ^ v17;
      if (v16 >> v15 > 0) {
        __int16 v19 = 0x7FFF;
      }
      else {
        __int16 v19 = 0x8000;
      }
      if (v18 < 0x8000) {
        __int16 v19 = v17;
      }
      a2->i16[0] = v19;
      a2 = (int16x8_t *)((char *)a2 + 2);
      --v14;
    }
    while (v14);
  }
  return result;
}

int32x4_t *NativeInt32ToNativeInt24_ARM(int32x4_t *result, uint64_t a2, unsigned int a3, int a4)
{
  if ((a2 & 0xF) != 0 && a3)
  {
    char v4 = a4 - 1;
    char v5 = a2 + 3;
    do
    {
      int v6 = result->i32[0];
      uint64_t result = (int32x4_t *)((char *)result + 4);
      int v7 = ((v6 >> v4) + 1) >> 1;
      int v8 = (((v6 >> v4) + 1) >> 31) ^ v7;
      if (v6 >> v4 > 0) {
        unsigned int v9 = 0x7FFFFF;
      }
      else {
        unsigned int v9 = -8388608;
      }
      if (v8 < 0x800000) {
        unsigned int v9 = v7;
      }
      *(_WORD *)a2 = v9;
      unsigned int v10 = HIWORD(v9);
      int32x4_t v11 = (int8x16_t *)(a2 + 3);
      *(unsigned char *)(a2 + 2) = v10;
      unsigned int v12 = a3 - 1;
      if ((v5 & 0xF) == 0) {
        break;
      }
      v5 += 3;
      a2 += 3;
      --a3;
    }
    while (a3);
  }
  else
  {
    unsigned int v12 = a3;
    int32x4_t v11 = (int8x16_t *)a2;
  }
  if (v12 >= 8)
  {
    int32x4_t v13 = vdupq_n_s32(-a4);
    unsigned int v14 = v12 >> 3;
    v15.i64[0] = 0xFFFF000000;
    v15.i64[1] = 0xFFFF000000;
    do
    {
      int32x4_t v16 = *result;
      int32x4_t v17 = result[1];
      result += 2;
      int8x16_t v18 = (int8x16_t)vqrshlq_s32(v16, v13);
      int8x16_t v19 = (int8x16_t)vqrshlq_s32(v17, v13);
      uint64_t v20 = v19.u32[1];
      int32x2_t v21 = vzip2_s32(*(int32x2_t *)v18.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL));
      __int32 v22 = v18.i32[0];
      uint64_t v23 = v18.u8[10];
      uint64_t v24 = v19.u32[3];
      __int32 v25 = v19.i32[2];
      v18.i64[0] = v18.i32[2];
      unint64_t v26 = (unint64_t)(v19.i32[0] & 0xFFFFFF) << 24;
      v19.i64[0] = 0xFFFF000000;
      v19.i64[1] = v26;
      v18.i64[1] = v20;
      int8x16_t v27 = (int8x16_t)vshlq_u64((uint64x2_t)v18, (uint64x2_t)xmmword_1901C5F80);
      v28.i64[0] = vandq_s8(v27, v15).u64[0];
      v28.i64[1] = vorrq_s8(v27, v19).i64[1];
      *(void *)&v21 &= 0xFFFFFF00FFFFFFuLL;
      v29.i64[0] = v21.u32[0];
      v29.i64[1] = v21.u32[1];
      v19.i64[0] = v22 & 0xFFFFFF;
      v19.i64[1] = v23;
      *int32x4_t v11 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vorrq_s8(v28, v29), (uint64x2_t)xmmword_1901C5F90), v19);
      v11[1].i64[0] = (v24 << 40) | ((unint64_t)(v25 & 0xFFFFFF) << 16) | (unsigned __int16)(v20 >> 8);
      int32x4_t v11 = (int8x16_t *)((char *)v11 + 24);
      --v14;
    }
    while (v14);
  }
  int v30 = v12 & 7;
  if (v30)
  {
    char v31 = a4 - 1;
    do
    {
      int v32 = result->i32[0];
      uint64_t result = (int32x4_t *)((char *)result + 4);
      int v33 = ((v32 >> v31) + 1) >> 1;
      int v34 = (((v32 >> v31) + 1) >> 31) ^ v33;
      if (v32 >> v31 > 0) {
        int v35 = 0x7FFFFF;
      }
      else {
        int v35 = -8388608;
      }
      if (v34 < 0x800000) {
        int v35 = v33;
      }
      v11->i16[0] = v35;
      v11->i8[2] = BYTE2(v35);
      int32x4_t v11 = (int8x16_t *)((char *)v11 + 3);
      --v30;
    }
    while (v30);
  }
  return result;
}

unsigned __int8 *NativeInt24ToNativeInt32_ARM(unsigned __int8 *result, uint64_t a2, unsigned int a3, char a4)
{
  char v4 = 8 - a4;
  if ((result & 7) != 0 && a3)
  {
    char v5 = (_BYTE)result + 3;
    do
    {
      int v6 = (*result << 8) | (result[1] << 16) | (result[2] << 24);
      result += 3;
      *(_DWORD *)a2 = v6 >> v4;
      a2 += 4;
      unsigned int v7 = a3 - 1;
      if ((v5 & 7) == 0) {
        break;
      }
      v5 += 3;
      --a3;
    }
    while (a3);
  }
  else
  {
    unsigned int v7 = a3;
  }
  if (v7 >= 8)
  {
    unsigned int v8 = v7 >> 3;
    uint32x2_t v9 = (uint32x2_t)vdup_n_s32(a4);
    do
    {
      unint64_t v10 = *(void *)result;
      unint64_t v11 = *((void *)result + 1);
      uint64_t v12 = *((void *)result + 2);
      result += 24;
      *(uint32x2_t *)a2 = vshl_u32((uint32x2_t)vmovn_s64(vshrq_n_s64((int64x2_t)vshlq_u64((uint64x2_t)vdupq_n_s64(v10), (uint64x2_t)xmmword_1901C5FA0), 0x28uLL)), v9);
      *(_DWORD *)(a2 + 8) = (((char)v11 << 16) | HIWORD(v10)) << a4;
      *(uint32x2_t *)(a2 + 12) = vshl_u32((uint32x2_t)vmovn_s64(vshrq_n_s64((int64x2_t)vshlq_u64((uint64x2_t)vdupq_n_s64(v11), (uint64x2_t)xmmword_1901C5FB0), 0x28uLL)), v9);
      *(_DWORD *)(a2 + 20) = (((__int16)v12 << 8) | HIBYTE(v11)) << a4;
      *(_DWORD *)(a2 + 24) = (int)((unint64_t)v12 >> 8) >> 8 << a4;
      uint64_t v13 = a2 + 32;
      *(_DWORD *)(a2 + 28) = (v12 >> 40) << a4;
      a2 += 32;
      --v8;
    }
    while (v8);
    a2 = v13;
  }
  for (int i = v7 & 7; i; --i)
  {
    int v15 = (*result << 8) | (result[1] << 16) | (result[2] << 24);
    result += 3;
    *(_DWORD *)a2 = v15 >> v4;
    a2 += 4;
  }
  return result;
}

int32x4_t *NativeInt32ToNativeInt32_ARM(int32x4_t *result, int32x4_t *a2, unsigned int a3, signed int a4)
{
  if ((a2 & 0xF) != 0 && a3)
  {
    char v4 = (_BYTE)a2 + 4;
    do
    {
      int v5 = result->i32[0];
      uint64_t result = (int32x4_t *)((char *)result + 4);
      int v6 = v5 >> -(char)a4;
      int v7 = v5 << a4;
      if (a4 < 0) {
        int v7 = v6;
      }
      a2->i32[0] = v7;
      a2 = (int32x4_t *)((char *)a2 + 4);
      unsigned int v8 = a3 - 1;
      if ((v4 & 0xF) == 0) {
        break;
      }
      v4 += 4;
      --a3;
    }
    while (a3);
  }
  else
  {
    unsigned int v8 = a3;
  }
  if (v8 >= 8)
  {
    int32x4_t v9 = vdupq_n_s32(a4);
    unsigned int v10 = v8 >> 3;
    do
    {
      int32x4_t v11 = *result;
      int32x4_t v12 = result[1];
      result += 2;
      *a2 = vshlq_s32(v11, v9);
      a2[1] = vshlq_s32(v12, v9);
      a2 += 2;
      --v10;
    }
    while (v10);
  }
  for (int i = v8 & 7; i; --i)
  {
    int v14 = result->i32[0];
    uint64_t result = (int32x4_t *)((char *)result + 4);
    int v15 = v14 >> -(char)a4;
    int v16 = v14 << a4;
    if (a4 < 0) {
      int v16 = v15;
    }
    a2->i32[0] = v16;
    a2 = (int32x4_t *)((char *)a2 + 4);
  }
  return result;
}

float Native824FixedToLowAlignedInt32_ARM(int32x4_t *a1, int8x16_t *a2, unsigned int a3, int a4, int32x4_t a5)
{
  unsigned int v5 = a4 - 25;
  unsigned int v6 = ~(-1 << a4);
  unsigned int v7 = 32 - a4;
  if (a3 >= 4)
  {
    a5 = vdupq_n_s32(v5);
    int8x16_t v8 = (int8x16_t)vdupq_n_s32(v6);
    int32x4_t v9 = vdupq_n_s32(v7);
    unsigned int v10 = a3 >> 2;
    int32x4_t v11 = vnegq_s32(v9);
    do
    {
      int32x4_t v12 = *a1++;
      *a2++ = vandq_s8((int8x16_t)vshlq_s32(vqshlq_s32(vqrshlq_s32(v12, a5), v9), v11), v8);
      --v10;
    }
    while (v10);
  }
  int v13 = a3 & 3;
  if ((a3 & 3) != 0)
  {
    do
    {
      int v14 = a1->i32[0];
      a1 = (int32x4_t *)((char *)a1 + 4);
      a5.i32[0] = vqshls_s32(vqrshls_s32(v14, v5), v7);
      a2->i32[0] = (a5.i32[0] >> v7) & v6;
      a2 = (int8x16_t *)((char *)a2 + 4);
      --v13;
    }
    while (v13);
  }
  return *(float *)a5.i32;
}

int16x8_t *NativeLowAlignedInt32ToInt16_ARM(int16x8_t *result, int16x8_t *a2, unsigned int a3)
{
  if ((a2 & 0xF) != 0 && a3)
  {
    char v3 = (_BYTE)a2 + 2;
    do
    {
      __int32 v4 = result->i32[0];
      uint64_t result = (int16x8_t *)((char *)result + 4);
      a2->i16[0] = v4;
      a2 = (int16x8_t *)((char *)a2 + 2);
      unsigned int v5 = a3 - 1;
      if ((v3 & 0xF) == 0) {
        break;
      }
      v3 += 2;
      --a3;
    }
    while (a3);
  }
  else
  {
    unsigned int v5 = a3;
  }
  if (v5 >= 8)
  {
    unsigned int v6 = v5 >> 3;
    do
    {
      int16x8_t v7 = *result;
      int16x8_t v8 = result[1];
      result += 2;
      *a2++ = vuzp1q_s16(v7, v8);
      --v6;
    }
    while (v6);
  }
  for (int i = v5 & 7; i; --i)
  {
    __int32 v10 = result->i32[0];
    uint64_t result = (int16x8_t *)((char *)result + 4);
    a2->i16[0] = v10;
    a2 = (int16x8_t *)((char *)a2 + 2);
  }
  return result;
}

_OWORD *NativeInt16ToLowAlignedInt32_ARM(_OWORD *result, uint32x4_t *a2, unsigned int a3)
{
  if ((a2 & 0xF) != 0 && a3)
  {
    char v3 = (_BYTE)a2 + 4;
    do
    {
      __int32 v4 = *(unsigned __int16 *)result;
      uint64_t result = (_OWORD *)((char *)result + 2);
      a2->i32[0] = v4;
      a2 = (uint32x4_t *)((char *)a2 + 4);
      unsigned int v5 = a3 - 1;
      if ((v3 & 0xF) == 0) {
        break;
      }
      v3 += 4;
      --a3;
    }
    while (a3);
  }
  else
  {
    unsigned int v5 = a3;
  }
  if (v5 >= 0x10)
  {
    unsigned int v6 = v5 >> 4;
    do
    {
      uint16x8_t v7 = *(uint16x8_t *)result;
      uint16x8_t v8 = *((uint16x8_t *)result + 1);
      result += 2;
      *a2 = vmovl_u16(*(uint16x4_t *)v7.i8);
      a2[1] = vmovl_high_u16(v7);
      a2[2] = vmovl_u16(*(uint16x4_t *)v8.i8);
      a2[3] = vmovl_high_u16(v8);
      a2 += 4;
      --v6;
    }
    while (v6);
  }
  for (int i = v5 & 0xF; i; --i)
  {
    __int32 v10 = *(unsigned __int16 *)result;
    uint64_t result = (_OWORD *)((char *)result + 2);
    a2->i32[0] = v10;
    a2 = (uint32x4_t *)((char *)a2 + 4);
  }
  return result;
}

const __int16 *StereoDeinterleaveNativeInt16ToScaledFloat32_ARM(const __int16 *result, float32x4_t **a2, unsigned int a3, float a4)
{
  __int32 v4 = *a2;
  f32 = (float *)a2[1];
  if (((f32 ^ *a2) & 0xF) != 0 || ((unint64_t)*a2 & 0xF) == 0 || a3 == 0)
  {
    unsigned int v8 = a3;
  }
  else
  {
    unint64_t v9 = 0;
    do
    {
      float v10 = (float)result[v9 / 2 + 1] * a4;
      v4->f32[v9 / 4] = (float)result[v9 / 2] * a4;
      f32[v9 / 4] = v10;
      unsigned int v8 = a3 - 1;
      char v11 = (_BYTE)v4 + 4 + v9;
      v9 += 4;
      if ((v11 & 0xF) == 0) {
        break;
      }
      --a3;
    }
    while (a3);
    f32 = (float *)((char *)f32 + v9);
    uint64_t result = (const __int16 *)((char *)result + v9);
    __int32 v4 = (float32x4_t *)((char *)v4 + v9);
    *a2 = v4;
    a2[1] = (float32x4_t *)f32;
  }
  if (v8 >= 8)
  {
    unsigned int v12 = v8 >> 3;
    do
    {
      int16x8x2_t v15 = vld2q_s16(result);
      result += 16;
      float32x4_t *v4 = vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v15.val[0].i8)), a4);
      (*a2)[1] = vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(v15.val[0])), a4);
      *a2[1] = vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v15.val[1].i8)), a4);
      a2[1][1] = vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(v15.val[1])), a4);
      __int32 v4 = *a2 + 2;
      f32 = a2[1][2].f32;
      *a2 = v4;
      a2[1] = (float32x4_t *)f32;
      --v12;
    }
    while (v12);
  }
  int v13 = v8 & 7;
  if (v13)
  {
    do
    {
      float v14 = (float)result[1] * a4;
      v4->f32[0] = (float)*result * a4;
      __int32 v4 = (float32x4_t *)((char *)v4 + 4);
      *f32++ = v14;
      result += 2;
      --v13;
    }
    while (v13);
    *a2 = v4;
    a2[1] = (float32x4_t *)f32;
  }
  return result;
}

float32x4_t **StereoInterleaveFloat32ToNativeInt16Scaled_ARM(float32x4_t **result, __int16 *a2, unsigned int a3, float a4)
{
  if ((a2 & 0xF) != 0 && a3)
  {
    unint64_t v4 = 0;
    unsigned int v5 = *result;
    unsigned int v6 = result[1];
    do
    {
      uint16x8_t v7 = &a2[v4 / 2];
      unsigned int v8 = llroundf(v5->f32[v4 / 4] * a4);
      unsigned int v9 = llroundf(v6->f32[v4 / 4] * a4);
      int8x8_t v10 = vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0x800000008000, (int32x2_t)veor_s8((int8x8_t)vcltz_s32((int32x2_t)__PAIR64__(v9, v8)), (int8x8_t)__PAIR64__(v9, v8))), (int8x8_t)__PAIR64__(v9, v8), vbsl_s8((int8x8_t)vcgtz_s32((int32x2_t)__PAIR64__(v9, v8)), (int8x8_t)0x7F0000007FLL, (int8x8_t)0x800000008000));
      v7[1] = v10.i16[2];
      __int16 *v7 = v10.i16[0];
      unsigned int v11 = a3 - 1;
      LOBYTE(v8) = (_BYTE)a2 + 4 + v4;
      v4 += 4;
      if ((v8 & 0xF) == 0) {
        break;
      }
      --a3;
    }
    while (a3);
    a2 = (__int16 *)((char *)a2 + v4);
    *uint64_t result = (float32x4_t *)((char *)v5 + v4);
    result[1] = (float32x4_t *)((char *)v6 + v4);
  }
  else
  {
    unsigned int v11 = a3;
  }
  if (v11 >= 8)
  {
    unsigned int v12 = v11 >> 3;
    int v13 = *result;
    float v14 = result[1];
    do
    {
      v24.val[0] = vqmovn_high_s32(vqmovn_s32(vcvtaq_s32_f32(vmulq_n_f32(*v13, a4))), vcvtaq_s32_f32(vmulq_n_f32(v13[1], a4)));
      v24.val[1] = vqmovn_high_s32(vqmovn_s32(vcvtaq_s32_f32(vmulq_n_f32(*v14, a4))), vcvtaq_s32_f32(vmulq_n_f32(v14[1], a4)));
      vst2q_s16(a2, v24);
      a2 += 16;
      int v13 = *result + 2;
      float v14 = result[1] + 2;
      *uint64_t result = v13;
      result[1] = v14;
      --v12;
    }
    while (v12);
  }
  int v15 = v11 & 7;
  if (v15)
  {
    int v16 = *result;
    int32x4_t v17 = (float *)result[1];
    do
    {
      float v18 = v16->f32[0];
      int v16 = (float32x4_t *)((char *)v16 + 4);
      float v19 = v18;
      float v20 = *v17++;
      unsigned int v21 = llroundf(v19 * a4);
      unsigned int v22 = llroundf(v20 * a4);
      int8x8_t v23 = vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0x800000008000, (int32x2_t)veor_s8((int8x8_t)vcltz_s32((int32x2_t)__PAIR64__(v22, v21)), (int8x8_t)__PAIR64__(v22, v21))), (int8x8_t)__PAIR64__(v22, v21), vbsl_s8((int8x8_t)vcgtz_s32((int32x2_t)__PAIR64__(v22, v21)), (int8x8_t)0x7F0000007FLL, (int8x8_t)0x800000008000));
      a2[1] = v23.i16[2];
      *a2 = v23.i16[0];
      a2 += 2;
      --v15;
    }
    while (v15);
    *uint64_t result = v16;
    result[1] = (float32x4_t *)v17;
  }
  return result;
}

float32_t StereoDeinterleaveInt824ToFloat32_ARM(int *a1, float32x4_t *a2, float32x4_t *a3, unsigned int a4)
{
  if (((a3 ^ a2) & 0xF) != 0 || (a2 & 0xF) == 0 || a4 == 0)
  {
    unsigned int v6 = a4;
  }
  else
  {
    uint64_t v7 = 0;
    do
    {
      unsigned int v8 = a1 + 2;
      v9.f32[0] = vcvts_n_f32_s32(*a1, 0x18uLL);
      float v10 = vcvts_n_f32_s32(a1[1], 0x18uLL);
      a2->i32[v7] = v9.i32[0];
      a3->f32[v7] = v10;
      unsigned int v6 = a4 - 1;
      char v11 = (_BYTE)a2 + 4 + v7 * 4;
      ++v7;
      if ((v11 & 0xF) == 0) {
        break;
      }
      a1 += 2;
      --a4;
    }
    while (a4);
    a2 = (float32x4_t *)((char *)a2 + v7 * 4);
    a3 = (float32x4_t *)((char *)a3 + v7 * 4);
    a1 = v8;
  }
  if (v6 >= 4)
  {
    unsigned int v12 = v6 >> 2;
    do
    {
      float32x4x2_t v18 = vld2q_f32((const float *)a1);
      a1 += 8;
      float32x4_t v13 = vcvtq_n_f32_s32((int32x4_t)v18.val[0], 0x18uLL);
      float32x4_t v9 = vcvtq_n_f32_s32((int32x4_t)v18.val[1], 0x18uLL);
      *a2++ = v13;
      *a3++ = v9;
      --v12;
    }
    while (v12);
  }
  for (int i = v6 & 3; i; --i)
  {
    int v15 = *a1;
    int v16 = a1[1];
    a1 += 2;
    v9.f32[0] = vcvts_n_f32_s32(v15, 0x18uLL);
    a2->i32[0] = v9.i32[0];
    a2 = (float32x4_t *)((char *)a2 + 4);
    a3->f32[0] = vcvts_n_f32_s32(v16, 0x18uLL);
    a3 = (float32x4_t *)((char *)a3 + 4);
  }
  return v9.f32[0];
}

float32_t StereoInterleaveFloat32ToInt824_ARM(float32x4_t *a1, float32x4_t *a2, uint64_t a3, unsigned int a4)
{
  if ((a3 & 0xF) != 0 && a4)
  {
    uint64_t v4 = 0;
    char v5 = a3 + 8;
    do
    {
      v6.i32[0] = vcvts_n_s32_f32(a2->f32[v4], 0x18uLL);
      uint64_t v7 = a3 + 8;
      *(_DWORD *)a3 = vcvts_n_s32_f32(a1->f32[v4], 0x18uLL);
      *(_DWORD *)(a3 + 4) = v6.i32[0];
      unsigned int v8 = a4 - 1;
      ++v4;
      if ((v5 & 0xF) == 0) {
        break;
      }
      v5 += 8;
      a3 += 8;
      --a4;
    }
    while (a4);
    a1 = (float32x4_t *)((char *)a1 + v4 * 4);
    a2 = (float32x4_t *)((char *)a2 + v4 * 4);
    a3 = v7;
  }
  else
  {
    unsigned int v8 = a4;
  }
  if (v8 >= 4)
  {
    unsigned int v9 = v8 >> 2;
    do
    {
      float32x4_t v10 = *a1++;
      float32x4_t v6 = v10;
      float32x4_t v11 = *a2++;
      v18.val[0] = (float32x4_t)vcvtq_n_s32_f32(v6, 0x18uLL);
      v18.val[1] = (float32x4_t)vcvtq_n_s32_f32(v11, 0x18uLL);
      vst2q_f32((float *)a3, v18);
      a3 += 32;
      --v9;
    }
    while (v9);
  }
  for (int i = v8 & 3; i; --i)
  {
    float v13 = a1->f32[0];
    a1 = (float32x4_t *)((char *)a1 + 4);
    float v14 = v13;
    float v15 = a2->f32[0];
    a2 = (float32x4_t *)((char *)a2 + 4);
    int v16 = vcvts_n_s32_f32(v14, 0x18uLL);
    v6.i32[0] = vcvts_n_s32_f32(v15, 0x18uLL);
    *(_DWORD *)a3 = v16;
    *(_DWORD *)(a3 + 4) = v6.i32[0];
    a3 += 8;
  }
  return v6.f32[0];
}

_OWORD *StereoInterleaveInt824ToInt16_ARM(_OWORD *result, _OWORD *a2, __int16 *a3, unsigned int a4)
{
  if ((a3 & 0xF) != 0 && a4)
  {
    unint64_t v4 = 0;
    do
    {
      char v5 = &a3[v4 / 2];
      int v6 = *(_DWORD *)((char *)result + v4);
      int v7 = v6 >> 9;
      int v8 = (v6 >> 31) ^ (v6 >> 9);
      if (v6 > 511) {
        __int16 v9 = 0x7FFF;
      }
      else {
        __int16 v9 = 0x8000;
      }
      if (v8 < 0x8000) {
        __int16 v9 = v7;
      }
      __int16 *v5 = v9;
      int v10 = *(_DWORD *)((char *)a2 + v4);
      int v11 = v10 >> 9;
      int v12 = (v10 >> 31) ^ (v10 >> 9);
      if (v10 > 511) {
        __int16 v13 = 0x7FFF;
      }
      else {
        __int16 v13 = 0x8000;
      }
      if (v12 < 0x8000) {
        __int16 v13 = v11;
      }
      v5[1] = v13;
      unsigned int v14 = a4 - 1;
      char v15 = (_BYTE)a3 + 4 + v4;
      v4 += 4;
      if ((v15 & 0xF) == 0) {
        break;
      }
      --a4;
    }
    while (a4);
    uint64_t result = (_OWORD *)((char *)result + v4);
    a2 = (_OWORD *)((char *)a2 + v4);
    a3 = (__int16 *)((char *)a3 + v4);
  }
  else
  {
    unsigned int v14 = a4;
  }
  if (v14 >= 8)
  {
    unsigned int v16 = v14 >> 3;
    do
    {
      int32x4_t v17 = *(int32x4_t *)result;
      int32x4_t v18 = *((int32x4_t *)result + 1);
      result += 2;
      int32x4_t v19 = *(int32x4_t *)a2;
      int32x4_t v20 = *((int32x4_t *)a2 + 1);
      a2 += 2;
      v30.val[0] = vqshrn_high_n_s32(vqshrn_n_s32(v17, 9uLL), v18, 9uLL);
      v30.val[1] = vqshrn_high_n_s32(vqshrn_n_s32(v19, 9uLL), v20, 9uLL);
      vst2q_s16(a3, v30);
      a3 += 16;
      --v16;
    }
    while (v16);
  }
  for (int i = v14 & 7; i; --i)
  {
    int v22 = *(_DWORD *)result;
    uint64_t result = (_OWORD *)((char *)result + 4);
    int v23 = v22 >> 9;
    int v24 = (v22 >> 31) ^ (v22 >> 9);
    if (v22 > 511) {
      __int16 v25 = 0x7FFF;
    }
    else {
      __int16 v25 = 0x8000;
    }
    if (v24 < 0x8000) {
      __int16 v25 = v23;
    }
    *a3 = v25;
    int v26 = *(_DWORD *)a2;
    a2 = (_OWORD *)((char *)a2 + 4);
    int v27 = v26 >> 9;
    int v28 = (v26 >> 31) ^ (v26 >> 9);
    if (v26 > 511) {
      __int16 v29 = 0x7FFF;
    }
    else {
      __int16 v29 = 0x8000;
    }
    if (v28 < 0x8000) {
      __int16 v29 = v27;
    }
    a3[1] = v29;
    a3 += 2;
  }
  return result;
}

const __int16 *StereoDeinterleaveInt16ToInt824_ARM(const __int16 *result, int32x4_t *a2, int32x4_t *a3, unsigned int a4)
{
  if ((a2 & 0xF) != 0)
  {
    unint64_t v4 = 0;
    do
    {
      if ((((_BYTE)a3 + (_BYTE)v4) & 0xF) == 0 || a4 == 0) {
        break;
      }
      int v6 = result[v4 / 2 + 1];
      a2->i32[v4 / 4] = result[v4 / 2] << 9;
      a3->i32[v4 / 4] = v6 << 9;
      --a4;
      LOBYTE(v6) = (_BYTE)a2 + 4 + v4;
      v4 += 4;
    }
    while ((v6 & 0xF) != 0);
    uint64_t result = (const __int16 *)((char *)result + v4);
    a2 = (int32x4_t *)((char *)a2 + v4);
    a3 = (int32x4_t *)((char *)a3 + v4);
  }
  if (a4 >= 8)
  {
    unsigned int v7 = a4 >> 3;
    do
    {
      int16x8x2_t v9 = vld2q_s16(result);
      result += 16;
      *a2 = vshll_n_s16(*(int16x4_t *)v9.val[0].i8, 9uLL);
      a2[1] = vshll_high_n_s16(v9.val[0], 9uLL);
      a2 += 2;
      *a3 = vshll_n_s16(*(int16x4_t *)v9.val[1].i8, 9uLL);
      a3[1] = vshll_high_n_s16(v9.val[1], 9uLL);
      a3 += 2;
      --v7;
    }
    while (v7);
  }
  int v8 = a4 & 7;
  if ((a4 & 7) != 0)
  {
    do
    {
      a2->i32[0] = *result << 9;
      a2 = (int32x4_t *)((char *)a2 + 4);
      a3->i32[0] = result[1] << 9;
      a3 = (int32x4_t *)((char *)a3 + 4);
      result += 2;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint32x4_t *NativeLowAlignedInt32To824Fixed_ARM(uint32x4_t *result, int32x4_t *a2, unsigned int a3, int a4)
{
  unsigned int v4 = 32 - a4;
  unsigned int v5 = a3 - 12;
  if (a3 >= 0xC)
  {
    uint32x4_t v6 = (uint32x4_t)vdupq_n_s32(v4);
    unsigned int v7 = result + 3;
    a3 &= 3u;
    int32x4_t v8 = vshrq_n_s32((int32x4_t)vshlq_u32(*result, v6), 7uLL);
    int32x4_t v9 = (int32x4_t)vshlq_u32(result[1], v6);
    uint32x4_t v10 = result[2];
    if (v5 >= 4)
    {
      unsigned int v12 = v5 >> 2;
      do
      {
        *a2++ = v8;
        uint32x4_t v13 = *v7++;
        uint32x4_t v11 = v13;
        int32x4_t v8 = vshrq_n_s32(v9, 7uLL);
        int32x4_t v9 = (int32x4_t)vshlq_u32(v10, v6);
        uint32x4_t v10 = v13;
        --v12;
      }
      while (v12);
    }
    else
    {
      uint32x4_t v11 = result[2];
    }
    *a2 = v8;
    a2[1] = vshrq_n_s32(v9, 7uLL);
    a2[2] = vshrq_n_s32((int32x4_t)vshlq_u32(v11, v6), 7uLL);
    a2 += 3;
    uint64_t result = v7;
  }
  for (; a3; --a3)
  {
    __int32 v14 = result->i32[0];
    uint64_t result = (uint32x4_t *)((char *)result + 4);
    a2->i32[0] = v14 << v4 >> 7;
    a2 = (int32x4_t *)((char *)a2 + 4);
  }
  return result;
}

int32x4_t *NativeInt32ToFloat32Scaled_ARM(int32x4_t *result, float32x4_t *a2, int a3, float a4)
{
  if (a3 >= 16)
  {
    float32x4_t v4 = vmulq_n_f32(vcvtq_f32_s32(*result), a4);
    float32x4_t v5 = vcvtq_f32_s32(result[1]);
    int32x4_t v6 = result[2];
    result += 3;
    unsigned int v7 = a3 - 12;
    do
    {
      int32x4_t v8 = a2;
      *a2++ = v4;
      float32x4_t v4 = vmulq_n_f32(v5, a4);
      float32x4_t v5 = vcvtq_f32_s32(v6);
      int32x4_t v9 = *result++;
      int32x4_t v6 = v9;
      v7 -= 4;
    }
    while (v7 > 3);
    *a2 = v4;
    a2[1] = vmulq_n_f32(v5, a4);
    a2[2] = vmulq_n_f32(vcvtq_f32_s32(v6), a4);
    a2 = v8 + 4;
    if (!v7) {
      return result;
    }
    goto LABEL_9;
  }
  if (a3 < 4)
  {
    unsigned int v7 = a3;
    if (!a3) {
      return result;
    }
    goto LABEL_9;
  }
  do
  {
    int32x4_t v10 = *result++;
    *a2++ = vmulq_n_f32(vcvtq_f32_s32(v10), a4);
    unsigned int v7 = a3 - 4;
    BOOL v11 = a3 > 7;
    a3 -= 4;
  }
  while (v11);
  for (; v7; --v7)
  {
LABEL_9:
    int v12 = result->i32[0];
    uint64_t result = (int32x4_t *)((char *)result + 4);
    a2->f32[0] = (float)(int)llroundf((float)v12) * a4;
    a2 = (float32x4_t *)((char *)a2 + 4);
  }
  return result;
}

float32x4_t *Float32ToNativeInt32Scaled_ARM(float32x4_t *result, int32x4_t *a2, unsigned int a3, float a4)
{
  if ((a2 & 0xF) != 0 && a3)
  {
    char v4 = (_BYTE)a2 + 4;
    do
    {
      float v5 = result->f32[0];
      uint64_t result = (float32x4_t *)((char *)result + 4);
      a2->i32[0] = llroundf(v5 * a4);
      a2 = (int32x4_t *)((char *)a2 + 4);
      unsigned int v6 = a3 - 1;
      if ((v4 & 0xF) == 0) {
        break;
      }
      v4 += 4;
      --a3;
    }
    while (a3);
  }
  else
  {
    unsigned int v6 = a3;
  }
  if (v6 >= 8)
  {
    unsigned int v7 = v6 >> 3;
    do
    {
      float32x4_t v8 = *result;
      float32x4_t v9 = result[1];
      result += 2;
      *a2 = vcvtaq_s32_f32(vmulq_n_f32(v8, a4));
      a2[1] = vcvtaq_s32_f32(vmulq_n_f32(v9, a4));
      a2 += 2;
      --v7;
    }
    while (v7);
  }
  for (int i = v6 & 7; i; --i)
  {
    float v11 = result->f32[0];
    uint64_t result = (float32x4_t *)((char *)result + 4);
    a2->i32[0] = llroundf(v11 * a4);
    a2 = (int32x4_t *)((char *)a2 + 4);
  }
  return result;
}

float32x4_t *MultiChannelInterleaveFloat32ToNativeLowAlignedInt32_ARM(float32x4_t *result, uint32x4_t *a2, unsigned int a3, int a4, double a5)
{
  unsigned int v6 = a3;
  unsigned int v7 = a2;
  float32x4_t v8 = result;
  uint64_t v9 = result->u32[0];
  if (v9 == 1) {
    uint64_t result = Float32ToNativeLowAlignedInt32_ARM((float32x4_t *)result[1].i64[0], a2, a3, a4, a5);
  }
  int32x4_t v10 = &v8->i64[1];
  LODWORD(a5) = 1065353216 - (a4 << 23);
  float32x4_t v11 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a5, 0);
  uint32x4_t v12 = (uint32x4_t)vdupq_n_s32(a4 - 32);
  if (v9 < 4)
  {
    unsigned int i = v9;
  }
  else
  {
    uint64_t v13 = v9;
    for (unsigned int i = v9; i > 3; i -= 4)
    {
      char v15 = (float32x4_t *)v10[1];
      unsigned int v16 = (float32x4_t *)v10[3];
      int32x4_t v17 = (int32x4_t *)v7;
      int32x4_t v18 = (float32x4_t *)v10[5];
      unsigned int v19 = v6;
      uint64_t result = (float32x4_t *)v7;
      int32x4_t v20 = (float32x4_t *)v10[7];
      if (v6 >= 4)
      {
        do
        {
          float32x4_t v21 = *v15++;
          float32x4_t v22 = v21;
          float32x4_t v23 = *v16++;
          float32x4_t v24 = v23;
          float32x4_t v25 = *v18++;
          float32x4_t v26 = v25;
          float32x4_t v27 = *v20++;
          int32x4_t v28 = vcvtq_n_s32_f32(vaddq_f32(v11, v22), 0x1FuLL);
          int32x4_t v29 = vcvtq_n_s32_f32(vaddq_f32(v11, v24), 0x1FuLL);
          int32x4_t v30 = vcvtq_n_s32_f32(vaddq_f32(v11, v26), 0x1FuLL);
          int32x4_t v31 = vcvtq_n_s32_f32(vaddq_f32(v11, v27), 0x1FuLL);
          uint32x4_t v32 = vshlq_u32((uint32x4_t)vqaddq_s32(v28, vcltzq_s32(v28)), v12);
          uint32x4_t v33 = vshlq_u32((uint32x4_t)vqaddq_s32(v29, vcltzq_s32(v29)), v12);
          uint32x4_t v34 = vshlq_u32((uint32x4_t)vqaddq_s32(v30, vcltzq_s32(v30)), v12);
          uint32x4_t v35 = vshlq_u32((uint32x4_t)vqaddq_s32(v31, vcltzq_s32(v31)), v12);
          result->i32[0] = v32.i32[0];
          result->i32[1] = v33.i32[0];
          result->i32[2] = v34.i32[0];
          result->i32[3] = v35.i32[0];
          int32x4_t v17 = (int32x4_t *)&result[v9];
          int32x2_t v36 = (__int32 *)((char *)result + v13 * 4);
          *int32x2_t v36 = v32.i32[1];
          v36[1] = v33.i32[1];
          v36[2] = v34.i32[1];
          v36[3] = v35.i32[1];
          int32x2_t v37 = &v36[v13];
          __int32 *v37 = v32.i32[2];
          v37[1] = v33.i32[2];
          void v37[2] = v34.i32[2];
          v37[3] = v35.i32[2];
          int v38 = &v37[v13];
          *int v38 = v32.i32[3];
          v38[1] = v33.i32[3];
          v38[2] = v34.i32[3];
          v38[3] = v35.i32[3];
          uint64_t result = (float32x4_t *)&v38[v13];
          v19 -= 4;
        }
        while (v19 > 3);
      }
      for (; v19; --v19)
      {
        __int32 v39 = v15->i32[0];
        char v15 = (float32x4_t *)((char *)v15 + 4);
        v40.i32[0] = v39;
        v40.i32[1] = v16->i32[0];
        unsigned int v16 = (float32x4_t *)((char *)v16 + 4);
        v40.i32[2] = v18->i32[0];
        int32x4_t v18 = (float32x4_t *)((char *)v18 + 4);
        v40.i32[3] = v20->i32[0];
        int32x4_t v20 = (float32x4_t *)((char *)v20 + 4);
        int32x4_t v41 = vcvtq_n_s32_f32(vaddq_f32(v11, v40), 0x1FuLL);
        int32x4_t *v17 = vqaddq_s32(v41, vcltzq_s32(v41));
        int32x4_t v17 = (int32x4_t *)((char *)v17 + v13 * 4);
      }
      v10 += 8;
      ++v7;
    }
  }
  if (i > 1)
  {
    uint64_t v42 = (float32x4_t *)v10[1];
    int v43 = (float32x4_t *)v10[3];
    uint64_t v44 = v9;
    if (v6 < 4)
    {
      __int16 v56 = (int32x2_t *)v7;
      unsigned int j = v6;
      if (!v6)
      {
LABEL_21:
        i -= 2;
        v10 += 4;
        unsigned int v7 = (uint32x4_t *)((char *)v7 + 8);
        goto LABEL_22;
      }
    }
    else
    {
      unsigned int v45 = v7;
      for (unsigned int j = v6; j > 3; j -= 4)
      {
        float32x4_t v47 = *v42++;
        float32x4_t v48 = v47;
        float32x4_t v49 = *v43++;
        int32x4_t v50 = vcvtq_n_s32_f32(vaddq_f32(v11, v48), 0x1FuLL);
        int32x4_t v51 = vcvtq_n_s32_f32(vaddq_f32(v11, v49), 0x1FuLL);
        uint32x4_t v52 = vshlq_u32((uint32x4_t)vqaddq_s32(v50, vcltzq_s32(v50)), v12);
        uint32x4_t v53 = vshlq_u32((uint32x4_t)vqaddq_s32(v51, vcltzq_s32(v51)), v12);
        uint64_t v54 = v45;
        unsigned int v55 = &v45->i32[v44];
        v54->i32[0] = v52.i32[0];
        v54->i32[1] = v53.i32[0];
        __int16 v56 = (int32x2_t *)&v54[v9];
        __int32 *v55 = v52.i32[1];
        v55[1] = v53.i32[1];
        unsigned int v57 = &v55[v44];
        *unsigned int v57 = v52.i32[2];
        v57[1] = v53.i32[2];
        uint64_t v58 = &v57[v44];
        __int32 *v58 = v52.i32[3];
        v58[1] = v53.i32[3];
        unsigned int v45 = (uint32x4_t *)&v58[v44];
      }
      if (!j) {
        goto LABEL_21;
      }
    }
    float32x2_t v59 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a5, 0);
    do
    {
      __int32 v60 = v42->i32[0];
      uint64_t v42 = (float32x4_t *)((char *)v42 + 4);
      v61.i32[0] = v60;
      v61.i32[1] = v43->i32[0];
      int v43 = (float32x4_t *)((char *)v43 + 4);
      int32x2_t v62 = vcvt_n_s32_f32(vadd_f32(v59, v61), 0x1FuLL);
      *__int16 v56 = vqadd_s32(v62, vcltz_s32(v62));
      __int16 v56 = (int32x2_t *)((char *)v56 + v44 * 4);
      --j;
    }
    while (j);
    goto LABEL_21;
  }
LABEL_22:
  if (i)
  {
    int v63 = (float32x4_t *)v10[1];
    uint64_t v64 = v9;
    if (v6 >= 4)
    {
      do
      {
        int v65 = v7;
        float32x4_t v66 = *v63++;
        int32x4_t v67 = vcvtq_n_s32_f32(vaddq_f32(v11, v66), 0x1FuLL);
        uint32x4_t v68 = vshlq_u32((uint32x4_t)vqaddq_s32(v67, vcltzq_s32(v67)), v12);
        v7->i32[0] = v68.i32[0];
        v7->i32[v9] = v68.i32[1];
        unsigned int v69 = &v7->i32[v64 + v64];
        *unsigned int v69 = v68.i32[2];
        unsigned int v70 = &v69[v64];
        *unsigned int v70 = v68.i32[3];
        v6 -= 4;
        unsigned int v7 = (uint32x4_t *)&v70[v64];
      }
      while (v6 > 3);
      unsigned int v7 = &v65[v9];
    }
    for (; v6; --v6)
    {
      float v71 = v63->f32[0];
      int v63 = (float32x4_t *)((char *)v63 + 4);
      int v72 = vcvts_n_s32_f32(v71 + *(float *)&a5, 0x1FuLL);
      if (v72 == 0x80000000) {
        unsigned int v73 = 0x80000000;
      }
      else {
        unsigned int v73 = v72 + (v72 >> 31);
      }
      v7->i32[0] = v73 >> (32 - a4);
      unsigned int v7 = (uint32x4_t *)((char *)v7 + v64 * 4);
    }
  }
  return result;
}

float32x4_t *Float32ToNativeLowAlignedInt64_ARM(float32x4_t *a1, int32x4_t *a2, unsigned int a3, int a4, double a5)
{
  unsigned int v6 = a2;
  unsigned int v7 = (uint32x4_t *)((char *)a2 + 4 * a3);
  uint64_t result = Float32ToNativeLowAlignedInt32_ARM(a1, v7, a3, a4, a5);
  if (a3 >= 4)
  {
    unsigned int v9 = a3 >> 2;
    do
    {
      int32x4_t v10 = *(int32x4_t *)v7++;
      *unsigned int v6 = vzip1q_s32(v10, (int32x4_t)0);
      v6[1] = vzip2q_s32(v10, (int32x4_t)0);
      v6 += 2;
      --v9;
    }
    while (v9);
  }
  int v11 = a3 & 3;
  if ((a3 & 3) != 0)
  {
    do
    {
      unsigned __int32 v12 = v7->i32[0];
      unsigned int v7 = (uint32x4_t *)((char *)v7 + 4);
      v6->i64[0] = v12;
      unsigned int v6 = (int32x4_t *)((char *)v6 + 8);
      --v11;
    }
    while (v11);
  }
  return result;
}

uint32x4_t *NativeLowAlignedInt64ToFloat32_ARM(const float *a1, uint32x4_t *a2, unsigned int a3, int a4)
{
  if (a3 >= 4)
  {
    unsigned int v5 = a3 >> 2;
    char v4 = (unsigned long long *)a2;
    do
    {
      unsigned long long v6 = (unsigned __int128)vld2q_f32(a1);
      a1 += 8;
      *v4++ = v6;
      --v5;
    }
    while (v5);
  }
  else
  {
    char v4 = (unsigned long long *)a2;
  }
  int v7 = a3 & 3;
  if ((a3 & 3) != 0)
  {
    do
    {
      float v8 = *a1;
      a1 += 2;
      *(float *)char v4 = v8;
      char v4 = (unsigned long long *)((char *)v4 + 4);
      --v7;
    }
    while (v7);
  }
  return NativeLowAlignedInt32ToFloat32_ARM(a2, (float32x4_t *)a2, a3, a4);
}

void removeGatedLoudness(void **a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (*a1)
    {
      char v3 = (void *)v2[266];
      if (v3)
      {
        free(v3);
        uint64_t v2 = *a1;
      }
      char v4 = (void *)v2[267];
      if (v4)
      {
        free(v4);
        uint64_t v2 = *a1;
      }
      unsigned int v5 = (void *)v2[6];
      if (v5)
      {
        free(v5);
        uint64_t v2 = *a1;
      }
      unsigned long long v6 = (void *)v2[3];
      if (v6)
      {
        free(v6);
        uint64_t v2 = *a1;
      }
      int v7 = (void *)v2[273];
      if (v7)
      {
        float v8 = (vDSP_biquad_SetupStruct *)v7[2];
        if (v8) {
          vDSP_biquad_DestroySetup(v8);
        }
        unsigned int v9 = (unsigned char *)v7[3];
        if (v9)
        {
          int32x4_t v10 = (unsigned char *)v7[4];
          if (v10 != v9) {
            unsigned char v7[4] = &v10[(v9 - v10 + 3) & 0xFFFFFFFFFFFFFFFCLL];
          }
          operator delete(v9);
          v7[3] = 0;
          unsigned char v7[4] = 0;
        }
        MEMORY[0x192FC8940](v7, 0x10A0C40B6373B8BLL);
        v2[273] = 0;
        uint64_t v2 = *a1;
      }
      free(v2);
      *a1 = 0;
    }
  }
}

uint64_t initGatedLoudness(CAAudioChannelLayout *a1, int a2, void *a3, float a4)
{
  __Coefficients[10] = *(double *)MEMORY[0x1E4F143B8];
  int inSpecifier = a2;
  if (a1 > 0x200) {
    return 4294967246;
  }
  unsigned int v5 = a1;
  memset_pattern16(__b, &unk_1901C66F0, 0x400uLL);
  uint64_t v6 = 0;
  int32x4_t v7 = (int32x4_t)xmmword_1901C5FC0;
  v8.i64[0] = 0x400000004;
  v8.i64[1] = 0x400000004;
  do
  {
    *(int32x4_t *)&__src[v6] = v7;
    int32x4_t v7 = vaddq_s32(v7, v8);
    v6 += 4;
  }
  while (v6 != 256);
  if (v5 < 3)
  {
    unsigned int v9 = v5;
    goto LABEL_6;
  }
  int v21 = caulk::numeric::exceptional_mul<unsigned int>(v5, 0x14u);
  LODWORD(__Coefficients[0]) = caulk::numeric::exceptional_add<unsigned int>(12, v21);
  float32x4_t v22 = (unsigned int *)CAAudioChannelLayout::Create(v5);
  if (AudioFormatGetProperty(0x636D706Cu, 4u, &inSpecifier, (UInt32 *)__Coefficients, v22))
  {
    MEMORY[0x192FC7C50](v22);
    return 4294967246;
  }
  unsigned int v5 = (CAAudioChannelLayout *)v22[2];
  if (!v5)
  {
    MEMORY[0x192FC7C50](v22);
    LODWORD(v5) = 0;
    unsigned int v9 = 0;
    goto LABEL_6;
  }
  float32x4_t v23 = 0;
  unsigned int v9 = 0;
  int v24 = 0;
  uint64_t v25 = 3;
  do
  {
    int v26 = v22[v25];
    if (v26 <= 300)
    {
      char v28 = v26 + 1;
      if ((v26 + 1) <= 0x2E)
      {
        if (((1 << v28) & 0x30000018C0) != 0)
        {
          __b[v9] = 1068792545;
LABEL_29:
          __src[v9++] = v23;
          goto LABEL_42;
        }
        if (((1 << v28) & 0x400000000003) != 0) {
          goto LABEL_41;
        }
        if (((1 << v28) & 0x4000000020) != 0) {
          goto LABEL_42;
        }
      }
      if ((v26 - 200) >= 8 && v26 != 100) {
        goto LABEL_29;
      }
    }
    else if (v26 < 0x10000)
    {
      BOOL v29 = (v26 - 301) > 3 || v26 == 303;
      if (v29 && v26 != 400) {
        goto LABEL_29;
      }
    }
    else if ((v26 - 0x10000) >= 0x10 && v26 != 0x1FFFF)
    {
      goto LABEL_29;
    }
LABEL_41:
    int v24 = 1;
LABEL_42:
    float32x4_t v23 = (CAAudioChannelLayout *)((char *)v23 + 1);
    v25 += 5;
  }
  while (v5 != v23);
  MEMORY[0x192FC7C50](v22);
  if (!v24)
  {
LABEL_6:
    if (a3 && !*a3)
    {
      *a3 = 0;
      int32x4_t v10 = malloc_type_calloc(1uLL, 0x890uLL, 0x10900409F0D3898uLL);
      int v11 = v10;
      uint32x4_t v33 = v10;
      if (v9)
      {
        if (v10)
        {
          *(_DWORD *)int32x4_t v10 = v5;
          *((_DWORD *)v10 + 1) = v9;
          size_t v12 = 4 * v9;
          memcpy(v10 + 7, __src, v12);
          memcpy(v11 + 135, __b, v12);
          uint32x2_t v13 = vcvt_u32_f32(vmla_n_f32((float32x2_t)0x3F0000003F000000, (float32x2_t)0x404000003ECCCCCDLL, a4));
          float32x2_t v14 = vcvt_f32_u32(v13);
          float v15 = vmlas_n_f32(0.5, 0.25, v14.f32[0]);
          *((_DWORD *)v11 + 4) = v15;
          *(float *)v16.i32 = (float)v15;
          v11[1] = v13;
          *(uint32x2_t *)((char *)v11 + 36) = vcvt_u32_f32(vadd_f32(vdiv_f32(v14, (float32x2_t)vdup_lane_s32(v16, 0)), (float32x2_t)0x3F0000003F000000));
          *((_DWORD *)v11 + 8) = 0;
          *(_OWORD *)(v11 + 263) = xmmword_1901C5FD0;
          *((_DWORD *)v11 + 530) = 715;
          int32x4_t v17 = malloc_type_calloc(0x2CBuLL, 4uLL, 0x100004052888210uLL);
          v11[266] = v17;
          if (v17)
          {
            int32x4_t v18 = malloc_type_calloc(*((unsigned int *)v11 + 530), 4uLL, 0x100004052888210uLL);
            v11[267] = v18;
            if (v18)
            {
              unsigned int v19 = malloc_type_malloc(8 * (*((_DWORD *)v11 + 10) * v5), 0x100004000313F17uLL);
              v11[6] = v19;
              if (v19)
              {
                int32x4_t v20 = malloc_type_malloc(4 * (*((_DWORD *)v11 + 4) * v5), 0x100004052888210uLL);
                v11[3] = v20;
                if (v20)
                {
                  *((_DWORD *)v11 + 5) = 0;
                  *((unsigned char *)v11 + 2148) = 0;
                  *((unsigned char *)v11 + 2156) = 0;
                  *((unsigned char *)v11 + 2164) = 0;
                  *((unsigned char *)v11 + 2180) = 0;
                  *((unsigned char *)v11 + 2172) = 0;
                  *((_DWORD *)v11 + 544) = -525502228;
                  *((_DWORD *)v11 + 542) = -525502228;
                  operator new();
                }
              }
            }
          }
        }
      }
      removeGatedLoudness(&v33);
    }
  }
  return 4294967246;
}

void computeItuLoudnessValue(uint64_t a1)
{
  unint64_t v2 = *(unsigned int *)(a1 + 2120);
  if (!v2) {
    goto LABEL_14;
  }
  unint64_t v3 = 0;
  unsigned int v4 = 0;
  double v5 = 0.0;
  do
  {
    float v6 = *(float *)(a1 + 2112);
    float v7 = *(float *)(a1 + 2104);
    if ((float)(v6 + (float)((float)v3 * v7)) > -70.0)
    {
      float v8 = __exp10f((float)((float)(v6 + (float)((float)((float)v3 + 0.5) * v7)) + 0.691) * 0.1);
      unsigned int v9 = *(_DWORD *)(*(void *)(a1 + 2128) + 4 * v3);
      double v5 = v5 + (float)(v8 * (float)v9);
      v4 += v9;
      unint64_t v2 = *(unsigned int *)(a1 + 2120);
    }
    ++v3;
  }
  while (v3 < v2);
  if (!v4)
  {
LABEL_14:
    float v21 = -70.0;
    goto LABEL_15;
  }
  float v10 = v5;
  float v11 = log10f(v10 / (float)v4);
  if (v2)
  {
    unint64_t v12 = 0;
    unsigned int v13 = 0;
    float v14 = (float)((float)(v11 * 10.0) + -0.691) + -10.0;
    double v15 = 0.0;
    do
    {
      float v16 = *(float *)(a1 + 2112);
      float v17 = *(float *)(a1 + 2104);
      if ((float)(v16 + (float)((float)v12 * v17)) > v14)
      {
        float v18 = __exp10f((float)((float)(v16 + (float)((float)((float)v12 + 0.5) * v17)) + 0.691) * 0.1);
        unsigned int v19 = *(_DWORD *)(*(void *)(a1 + 2128) + 4 * v12);
        double v15 = v15 + (float)(v18 * (float)v19);
        v13 += v19;
        unint64_t v2 = *(unsigned int *)(a1 + 2120);
      }
      ++v12;
    }
    while (v12 < v2);
    if (v13)
    {
      float v20 = v15;
      float v21 = (float)(log10f(v20 / (float)v13) * 10.0) + -0.691;
LABEL_15:
      *(float *)(a1 + 2144) = v21;
      *(unsigned char *)(a1 + 2148) = 1;
    }
  }
}

void computeEbuLoudnessRange(uint64_t a1)
{
  unint64_t v1 = *(unsigned int *)(a1 + 2120);
  if (v1)
  {
    unint64_t v3 = 0;
    unsigned int v4 = 0;
    double v5 = 0.0;
    do
    {
      float v6 = *(float *)(a1 + 2112);
      float v7 = *(float *)(a1 + 2104);
      if ((float)(v6 + (float)((float)v3 * v7)) > -70.0)
      {
        float v8 = __exp10f((float)((float)(v6 + (float)((float)((float)v3 + 0.5) * v7)) + 0.691) * 0.1);
        unsigned int v9 = *(_DWORD *)(*(void *)(a1 + 2136) + 4 * v3);
        double v5 = v5 + (float)(v8 * (float)v9);
        v4 += v9;
        unint64_t v1 = *(unsigned int *)(a1 + 2120);
      }
      ++v3;
    }
    while (v3 < v1);
    if (v4)
    {
      float v10 = v5;
      float v11 = log10f(v10 / (float)v4);
      if (v1)
      {
        uint64_t v12 = 0;
        unsigned int v13 = 0;
        float v14 = (float)((float)(v11 * 10.0) + -0.691) + -20.0;
        float v15 = *(float *)(a1 + 2112);
        float v16 = *(float *)(a1 + 2104);
        do
        {
          if ((float)(v15 + (float)((float)v12 * v16)) > v14) {
            v13 += *(_DWORD *)(*(void *)(a1 + 2136) + 4 * v12);
          }
          ++v12;
        }
        while (v1 != v12);
        if (v13)
        {
          uint64_t v17 = 0;
          int v18 = 0;
          int v19 = 0;
          int v20 = 0;
          float v21 = (float)v13;
          int v22 = (int)(float)((float)((float)v13 * 0.1) + 0.5);
          int v23 = (int)(float)((float)(v21 * 0.95) + 0.5);
          double v24 = 0.0;
          double v25 = 0.0;
          do
          {
            if ((float)(v15 + (float)((float)v17 * v16)) > v14)
            {
              v20 += *(_DWORD *)(*(void *)(a1 + 2136) + 4 * v17);
              if (!((v20 < v22) | v19 & 1)) {
                double v25 = (float)(v15 + (float)((float)((float)v17 + 0.5) * v16));
              }
              v19 |= ((v20 < v22) | v19) ^ 1;
              if (!((v20 < v23) | v18 & 1)) {
                double v24 = (float)(v15 + (float)((float)((float)v17 + 0.5) * v16));
              }
              v18 |= v20 >= v23;
            }
            ++v17;
          }
          while (v1 != v17);
          if (v19 & v18)
          {
            float v26 = v24 - v25;
            *(float *)(a1 + 2152) = v26;
            *(unsigned char *)(a1 + 2156) = 1;
            float v27 = v24;
            *(float *)(a1 + 2160) = v27;
            *(unsigned char *)(a1 + 2164) = 1;
          }
        }
      }
    }
  }
}

void loudnessMeasurementGenerateBlocks(int *a1, unsigned int a2, char *__src)
{
  unint64_t v3 = __src;
  unsigned int v4 = a2;
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  int v6 = *a1;
  uint64_t v7 = a1[1];
  unsigned int v8 = a1[4];
  uint64_t v52 = a1[9];
  uint64_t v53 = a1[10];
  uint64_t v54 = ((v53 - 1) * v7);
  unsigned int v9 = a1 + 14;
  float v10 = (float)a1[2];
  unsigned int v11 = a2;
  unsigned int v55 = v8;
  int v49 = *a1;
  do
  {
    int v12 = a1[5];
    if (v12) {
      BOOL v13 = 1;
    }
    else {
      BOOL v13 = v8 > v4;
    }
    if (!v13)
    {
      uint64_t v17 = &v3[4 * (v4 - v11) * v6];
      unsigned int v56 = v11 - v8;
LABEL_15:
      memmove(*((void **)a1 + 6), (const void *)(*((void *)a1 + 6) + 8 * v7), 8 * ((v53 - 1) * v7));
      uint64_t v18 = *((void *)a1 + 273);
      if (v18)
      {
        uint64_t v19 = *((void *)a1 + 6);
        int v20 = (double *)(v19 + 8 * v54);
        if (v7) {
          bzero((void *)(v19 + 8 * v54), 8 * v7);
        }
        if (v8)
        {
          unsigned int v21 = v55;
          do
          {
            if (v21 >= 0x100) {
              vDSP_Length v22 = 256;
            }
            else {
              vDSP_Length v22 = v21;
            }
            if (v7)
            {
              for (uint64_t i = 0; i != v7; ++i)
              {
                uint64_t v24 = 0;
                float __C = 0.0;
                int v25 = v9[i];
                int v26 = *(_DWORD *)(v18 + 8);
                do
                {
                  __Y[v24++] = *(float *)&v17[4 * v25];
                  v25 += v26;
                }
                while (v22 != v24);
                vDSP_biquad(*(const vDSP_biquad_SetupStruct **)(v18 + 16), (float *)(*(void *)(v18 + 24) + 4 * (6 * i)), __Y, 1, __Y, 1, v22);
                vDSP_svesq(__Y, 1, &__C, v22);
                v20[i] = v20[i] + __C;
              }
            }
            v17 += 4 * (*(_DWORD *)(v18 + 8) * v22);
            v21 -= v22;
          }
          while (v21);
        }
        if (*(float *)v18 != 1.0 && v7 != 0)
        {
          double v28 = (float)(*(float *)v18 * *(float *)v18);
          uint64_t v29 = v7;
          do
          {
            *int v20 = *v20 * v28;
            ++v20;
            --v29;
          }
          while (v29);
        }
        unint64_t v3 = __src;
        int v6 = v49;
        unsigned int v4 = a2;
        unsigned int v8 = v55;
      }
      unsigned int v30 = a1[8];
      if (v30 < v53) {
        a1[8] = ++v30;
      }
      if (v30 >= v52)
      {
        if (v7)
        {
          uint64_t v31 = 0;
          float v32 = 0.0;
          do
          {
            if (v52)
            {
              unsigned int v33 = 0;
              double v34 = 0.0;
              uint64_t v35 = v52;
              do
              {
                double v34 = v34 + *(double *)(*((void *)a1 + 6) + 8 * v54 + 8 * v31 - 8 * v33);
                v33 += v7;
                --v35;
              }
              while (v35);
            }
            else
            {
              double v34 = 0.0;
            }
            float v36 = v34;
            float v32 = v32 + (float)(*(float *)&a1[v31++ + 270] * v36);
          }
          while (v31 != v7);
        }
        else
        {
          float v32 = 0.0;
        }
        float v37 = (float)(log10f(v32 / v10) * 10.0) + -0.691;
        float v38 = v37 - *((float *)a1 + 528);
        if (v38 >= 0.0)
        {
          unsigned int v39 = (float)(v38 * *((float *)a1 + 527));
          if (a1[530] > v39) {
            ++*(_DWORD *)(*((void *)a1 + 266) + 4 * v39);
          }
        }
        if (*((float *)a1 + 542) < v37)
        {
          *((float *)a1 + 542) = v37;
          *((unsigned char *)a1 + 2172) = 1;
        }
      }
      if (a1[8] >= v53)
      {
        if (v7)
        {
          uint64_t v40 = 0;
          float v41 = 0.0;
          do
          {
            if (v53)
            {
              unsigned int v42 = 0;
              double v43 = 0.0;
              uint64_t v44 = v53;
              do
              {
                double v43 = v43 + *(double *)(*((void *)a1 + 6) + 8 * v54 + 8 * v40 - 8 * v42);
                v42 += v7;
                --v44;
              }
              while (v44);
            }
            else
            {
              double v43 = 0.0;
            }
            float v45 = v43;
            float v41 = v41 + (float)(*(float *)&a1[v40++ + 270] * v45);
          }
          while (v40 != v7);
        }
        else
        {
          float v41 = 0.0;
        }
        float v46 = (float)(log10f(v41 / (float)a1[3]) * 10.0) + -0.691;
        float v47 = v46 - *((float *)a1 + 528);
        if (v47 >= 0.0)
        {
          unsigned int v48 = (float)(v47 * *((float *)a1 + 527));
          if (a1[530] > v48) {
            ++*(_DWORD *)(*((void *)a1 + 267) + 4 * v48);
          }
        }
        unsigned int v11 = v56;
        if (*((float *)a1 + 544) < v46)
        {
          *((float *)a1 + 544) = v46;
          *((unsigned char *)a1 + 2180) = 1;
        }
      }
      else
      {
        unsigned int v11 = v56;
      }
      continue;
    }
    if (v8 - v12 >= v4) {
      unsigned int v14 = v4;
    }
    else {
      unsigned int v14 = v8 - v12;
    }
    memcpy((void *)(*((void *)a1 + 3) + 4 * (v12 * v6)), v3, 4 * v14 * v6);
    unsigned int v11 = v4 - v14;
    unsigned int v15 = a1[5] + v14;
    unsigned int v8 = v55;
    BOOL v16 = v15 >= v55;
    if (v15 >= v55) {
      unsigned int v15 = 0;
    }
    a1[5] = v15;
    if (v16)
    {
      unsigned int v56 = v11;
      uint64_t v17 = (char *)*((void *)a1 + 3);
      goto LABEL_15;
    }
  }
  while (v11 >= v8);
  if (v11)
  {
    memcpy((void *)(*((void *)a1 + 3) + 4 * (a1[5] * v6)), &v3[4 * (v4 - v11) * v6], 4 * v11 * v6);
    a1[5] += v11;
  }
}

uint64_t acv2::SampleRateConverter::SetPropertySettings(acv2::SampleRateConverter *this, CFDictionaryRef theDict)
{
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(theDict, @"parameters");
  if (!Value) {
    return 4294967246;
  }
  CFArrayRef v4 = Value;
  ValueAtIndex = CFArrayGetValueAtIndex(Value, 0);
  if (!ValueAtIndex) {
    return 4294967246;
  }
  unsigned int v20 = 0;
  uint64_t v18 = ValueAtIndex;
  __int16 v19 = 0;
  if (CACFDictionary::GetUInt32((CACFDictionary *)&v18, @"current value", &v20))
  {
    switch(v20)
    {
      case 0u:
        int v17 = 0;
        goto LABEL_12;
      case 1u:
        int v7 = 32;
        goto LABEL_11;
      case 3u:
        int v7 = 96;
        goto LABEL_11;
      case 4u:
        int v7 = 127;
        goto LABEL_11;
      default:
        int v7 = 64;
LABEL_11:
        int v17 = v7;
LABEL_12:
        uint64_t v6 = (*(uint64_t (**)(acv2::SampleRateConverter *, uint64_t, uint64_t, int *))(*(void *)this + 96))(this, 1936876401, 4, &v17);
        if (v6) {
          break;
        }
        unsigned int v8 = CFArrayGetValueAtIndex(v4, 1);
        if (!v8) {
          goto LABEL_21;
        }
        unsigned int v15 = v8;
        __int16 v16 = 256;
        if ((CACFDictionary::GetUInt32((CACFDictionary *)&v15, @"current value", &v20) & 1) == 0)
        {
          uint64_t v6 = 4294967246;
          goto LABEL_32;
        }
        uint64_t v6 = (*(uint64_t (**)(acv2::SampleRateConverter *, uint64_t, uint64_t, unsigned int *))(*(void *)this + 96))(this, 1886547309, 4, &v20);
        if (v6) {
          goto LABEL_32;
        }
        if (CFArrayGetCount(v4) < 3) {
          goto LABEL_31;
        }
        unsigned int v9 = CFArrayGetValueAtIndex(v4, 2);
        if (!v9) {
          goto LABEL_31;
        }
        BOOL v13 = v9;
        __int16 v14 = 256;
        if ((CACFDictionary::GetUInt32((CACFDictionary *)&v13, @"current value", &v20) & 1) == 0) {
          goto LABEL_30;
        }
        switch(v20)
        {
          case 0u:
            int v10 = 1818848869;
            break;
          case 2u:
            int v10 = 1650553971;
            break;
          case 3u:
            int v10 = 1835626096;
            break;
          default:
            int v10 = 1852797549;
            break;
        }
        int v12 = v10;
        uint64_t v6 = (*(uint64_t (**)(acv2::SampleRateConverter *, uint64_t, uint64_t, int *))(*(void *)this + 96))(this, 1936876385, 4, &v12);
        if (v6)
        {
          CACFDictionary::~CACFDictionary((CACFDictionary *)&v13);
        }
        else
        {
LABEL_30:
          CACFDictionary::~CACFDictionary((CACFDictionary *)&v13);
LABEL_31:
          uint64_t v6 = 0;
        }
LABEL_32:
        CACFDictionary::~CACFDictionary((CACFDictionary *)&v15);
        break;
    }
  }
  else
  {
LABEL_21:
    uint64_t v6 = 4294967246;
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v18);
  return v6;
}

void sub_18FF50F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va1);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va2);
  _Unwind_Resume(a1);
}

void acv2::SampleRateConverter::GetPropertySettings(acv2::SampleRateConverter *this@<X0>, applesauce::CF::DictionaryRef *a2@<X8>)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  CABundleLocker::CABundleLocker((CABundleLocker *)&v54);
  unint64_t v3 = (__CFBundle *)sAudioToolboxBundle;
  if (sAudioToolboxBundle == -1)
  {
    pthread_once(&sOnce, InitGetAudioToolboxBundle);
    unint64_t v3 = (__CFBundle *)sAudioToolboxBundle;
  }
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    *(void *)a2 = 0;
    goto LABEL_64;
  }
  applesauce::CF::DictionaryRef::DictionaryRef(a2, Mutable);
  int valuePtr = 0;
  if (v3) {
    uint64_t v6 = CFBundleCopyLocalizedString(v3, @"Sample Rate Converter", @"Sample Rate Converter", @"ConverterNames");
  }
  else {
    uint64_t v6 = CFRetain(@"Sample Rate Converter");
  }
  uint64_t v7 = v6;
  CFDictionaryAddValue(Mutable, @"name", v6);
  CFRelease(v7);
  unsigned int v8 = (const void *)(*(uint64_t (**)(acv2::SampleRateConverter *))(*(void *)this + 56))(this);
  CFDictionaryAddValue(Mutable, @"converter", v8);
  int valuePtr = 0;
  CFNumberRef v9 = CFNumberCreate(v4, kCFNumberSInt32Type, &valuePtr);
  CFDictionaryAddValue(Mutable, @"version", v9);
  CFRelease(v9);
  CFMutableDictionaryRef theDict = 0;
  CFMutableDictionaryRef v66 = 0;
  CFMutableDictionaryRef v67 = 0;
  int TypeID = CFNumberGetTypeID();
  uint64_t v11 = 0;
  int v12 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  int valuePtr = TypeID;
  BOOL v13 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  do
  {
    __int16 v14 = CFDictionaryCreateMutable(v4, 0, v12, v13);
    *(CFMutableDictionaryRef *)((char *)&theDict + v11) = v14;
    CFNumberRef v15 = CFNumberCreate(v4, kCFNumberSInt32Type, &valuePtr);
    CFDictionaryAddValue(v14, @"value type", v15);
    CFRelease(v15);
    v11 += 8;
  }
  while (v11 != 24);
  if (v3) {
    __int16 v16 = (void *)CFBundleCopyLocalizedString(v3, @"Quality", @"Quality", @"ConverterSettings");
  }
  else {
    __int16 v16 = (void *)CFRetain(@"Quality");
  }
  int v17 = v16;
  uint64_t v18 = Mutable;
  __int16 v19 = theDict;
  CFDictionaryAddValue(theDict, @"key", @"Quality");
  CFDictionaryAddValue(v19, @"name", v17);
  CFRelease(v17);
  int valuePtr = 0;
  CFNumberRef v20 = CFNumberCreate(v4, kCFNumberSInt32Type, &valuePtr);
  CFDictionaryAddValue(v19, @"hint", v20);
  CFRelease(v20);
  uint64_t v64 = 0;
  *(_OWORD *)values = 0u;
  long long v63 = 0u;
  if (v3)
  {
    values[0] = (void *)CFBundleCopyLocalizedString(v3, @"Faster", @"Faster", @"ConverterSettings");
    values[1] = (void *)CFBundleCopyLocalizedString(v3, @"Fast", @"Fast", @"ConverterSettings");
    *(void *)&long long v63 = CFBundleCopyLocalizedString(v3, @"Normal", @"Normal", @"ConverterSettings");
    *((void *)&v63 + 1) = CFBundleCopyLocalizedString(v3, @"Better", @"Better", @"ConverterSettings");
    unsigned int v21 = (void *)CFBundleCopyLocalizedString(v3, @"Best", @"Best", @"ConverterSettings");
  }
  else
  {
    values[0] = (void *)CFRetain(@"Faster");
    values[1] = (void *)CFRetain(@"Fast");
    *(void *)&long long v63 = CFRetain(@"Normal");
    *((void *)&v63 + 1) = CFRetain(@"Better");
    unsigned int v21 = (void *)CFRetain(@"Best");
  }
  uint64_t v64 = v21;
  CFArrayRef v22 = CFArrayCreate(v4, (const void **)values, 5, MEMORY[0x1E4F1D510]);
  CFDictionaryAddValue(v19, @"available values", v22);
  for (uint64_t i = 0; i != 5; ++i)
    CFRelease(values[i]);
  CFRelease(v22);
  unsigned int v24 = *((_DWORD *)this + 69);
  if (v24 > 0xF)
  {
    if (v24 > 0x2F)
    {
      if (v24 > 0x4F)
      {
        if (v24 > 0x6E) {
          int v25 = 4;
        }
        else {
          int v25 = 3;
        }
      }
      else
      {
        int v25 = 2;
      }
    }
    else
    {
      int v25 = 1;
    }
    int valuePtr = v25;
  }
  else
  {
    int valuePtr = 0;
  }
  CFNumberRef v26 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFDictionaryAddValue(v19, @"current value", v26);
  CFRelease(v26);
  if (v3) {
    float v27 = CFBundleCopyLocalizedString(v3, @"Quality setting for the sample rate converter.", @"Quality setting for the sample rate converter.", @"ConverterSettings");
  }
  else {
    float v27 = CFRetain(@"Quality setting for the sample rate converter.");
  }
  double v28 = v27;
  CFDictionaryAddValue(v19, @"summary", v27);
  CFRelease(v28);
  if (v3) {
    uint64_t v29 = (void *)CFBundleCopyLocalizedString(v3, @"Priming Method", @"Priming Method", @"ConverterSettings");
  }
  else {
    uint64_t v29 = (void *)CFRetain(@"Priming Method");
  }
  unsigned int v30 = v29;
  uint64_t v31 = v66;
  CFDictionaryAddValue(v66, @"key", @"Priming Method");
  CFDictionaryAddValue(v31, @"name", v30);
  CFRelease(v30);
  int valuePtr = 2;
  CFNumberRef v32 = CFNumberCreate(v4, kCFNumberSInt32Type, &valuePtr);
  CFDictionaryAddValue(v31, @"hint", v32);
  CFRelease(v32);
  uint64_t v59 = 0;
  __int32 v60 = 0;
  float32x2_t v61 = 0;
  if (v3)
  {
    uint64_t v59 = (void *)CFBundleCopyLocalizedString(v3, @"Pre", @"Pre", @"ConverterSettings");
    __int32 v60 = (void *)CFBundleCopyLocalizedString(v3, @"Normal", @"Normal", @"ConverterSettings");
    unsigned int v33 = (void *)CFBundleCopyLocalizedString(v3, @"None", @"None", @"ConverterSettings");
  }
  else
  {
    uint64_t v59 = (void *)CFRetain(@"Pre");
    __int32 v60 = (void *)CFRetain(@"Normal");
    unsigned int v33 = (void *)CFRetain(@"None");
  }
  float32x2_t v61 = v33;
  CFArrayRef v34 = CFArrayCreate(v4, (const void **)&v59, 3, MEMORY[0x1E4F1D510]);
  CFDictionaryAddValue(v31, @"available values", v34);
  for (uint64_t j = 0; j != 24; j += 8)
    CFRelease(*(void **)((char *)&v59 + j));
  CFRelease(v34);
  int valuePtr = *((_DWORD *)this + 70);
  CFNumberRef v36 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFDictionaryAddValue(v31, @"current value", v36);
  CFRelease(v36);
  if (v3) {
    float v37 = CFBundleCopyLocalizedString(v3, @"Priming method for the sample rate converter.", @"Priming method for the sample rate converter.", @"ConverterSettings");
  }
  else {
    float v37 = CFRetain(@"Priming method for the sample rate converter.");
  }
  float v38 = v37;
  CFDictionaryAddValue(v31, @"summary", v37);
  CFRelease(v38);
  if (v3) {
    unsigned int v39 = (void *)CFBundleCopyLocalizedString(v3, @"Complexity", @"Complexity", @"ConverterSettings");
  }
  else {
    unsigned int v39 = (void *)CFRetain(@"Complexity");
  }
  uint64_t v40 = v39;
  float v41 = v67;
  CFDictionaryAddValue(v67, @"key", @"Complexity");
  CFDictionaryAddValue(v41, @"name", v40);
  CFRelease(v40);
  int valuePtr = 1;
  CFNumberRef v42 = CFNumberCreate(v4, kCFNumberSInt32Type, &valuePtr);
  CFDictionaryAddValue(v41, @"hint", v42);
  CFRelease(v42);
  unsigned int v55 = 0;
  unsigned int v56 = 0;
  unsigned int v57 = 0;
  if (v3)
  {
    unsigned int v55 = (void *)CFBundleCopyLocalizedString(v3, @"Linear", @"Linear", @"ConverterSettings");
    unsigned int v56 = (void *)CFBundleCopyLocalizedString(v3, @"Normal", @"Normal", @"ConverterSettings");
    unsigned int v57 = (void *)CFBundleCopyLocalizedString(v3, @"Mastering", @"Mastering", @"ConverterSettings");
    double v43 = (void *)CFBundleCopyLocalizedString(v3, @"Minimum Phase", @"Minimum Phase", @"ConverterSettings");
  }
  else
  {
    unsigned int v55 = (void *)CFRetain(@"Linear");
    unsigned int v56 = (void *)CFRetain(@"Normal");
    unsigned int v57 = (void *)CFRetain(@"Mastering");
    double v43 = (void *)CFRetain(@"Minimum Phase");
  }
  uint64_t v58 = v43;
  CFArrayRef v44 = CFArrayCreate(v4, (const void **)&v59, 3, MEMORY[0x1E4F1D510]);
  CFDictionaryAddValue(v41, @"available values", v44);
  for (uint64_t k = 0; k != 24; k += 8)
    CFRelease(*(void **)((char *)&v55 + k));
  CFRelease(v44);
  int v46 = *((_DWORD *)this + 68);
  if (v46 <= 1835626095)
  {
    if (v46 != 1650553971)
    {
      if (v46 == 1818848869) {
        int valuePtr = 0;
      }
      goto LABEL_60;
    }
    int v47 = 2;
    goto LABEL_59;
  }
  if (v46 == 1835626096)
  {
    int v47 = 3;
    goto LABEL_59;
  }
  if (v46 == 1852797549)
  {
    int v47 = 1;
LABEL_59:
    int valuePtr = v47;
  }
LABEL_60:
  CFNumberRef v48 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFDictionaryAddValue(v41, @"current value", v48);
  CFRelease(v48);
  if (v3) {
    int v49 = CFBundleCopyLocalizedString(v3, @"sample rate converter complexity setting.", @"sample rate converter complexity setting.", @"ConverterSettings");
  }
  else {
    int v49 = CFRetain(@"sample rate converter complexity setting.");
  }
  int32x4_t v50 = v49;
  CFDictionaryAddValue(v41, @"summary", v49);
  CFRelease(v50);
  CFArrayRef v51 = CFArrayCreate(v4, (const void **)&theDict, 2, MEMORY[0x1E4F1D510]);
  CFRelease(theDict);
  CFRelease(v66);
  CFDictionaryAddValue(v18, @"parameters", v51);
  CFRelease(v51);
LABEL_64:
  CABundleLocker::~CABundleLocker((CABundleLocker *)&v54);
}

void sub_18FF519BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void applesauce::CF::DictionaryRef::~DictionaryRef(const void **this)
{
  unint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t acv2::SampleRateConverter::HasPropertySettings(acv2::SampleRateConverter *this)
{
  return 1;
}

uint64_t acv2::SampleRateConverter::NeedsBufferedInput(acv2::SampleRateConverter *this)
{
  return 1;
}

uint64_t acv2::SampleRateConverter::GetPropertyInfo(acv2::SampleRateConverter *this, int a2, unsigned int *a3, unsigned __int8 *a4)
{
  uint64_t result = 1886547824;
  if (a2 <= 1886547308)
  {
    if (a2 <= 1835626095)
    {
      if (a2 != 1667850867)
      {
        int v7 = 1668244083;
LABEL_9:
        if (a2 != v7) {
          return result;
        }
      }
LABEL_10:
      if (!a3) {
        goto LABEL_21;
      }
      unsigned int v8 = 4;
      goto LABEL_20;
    }
    if (a2 != 1835626096)
    {
      if (a2 != 1886546285) {
        return result;
      }
      if (!a3)
      {
LABEL_21:
        unsigned __int8 v10 = 0;
        if (!a4) {
          return 0;
        }
LABEL_32:
        uint64_t result = 0;
        *a4 = v10;
        return result;
      }
      unsigned int v8 = 8;
LABEL_20:
      *a3 = v8;
      goto LABEL_21;
    }
    goto LABEL_23;
  }
  if (a2 > 1936876400)
  {
    if (a2 != 1936876401)
    {
      if (a2 != 2020569203)
      {
        int v7 = 2020175987;
        goto LABEL_9;
      }
      goto LABEL_10;
    }
LABEL_23:
    if (!a3) {
      goto LABEL_26;
    }
    unsigned int v9 = 4;
    goto LABEL_25;
  }
  if (a2 == 1886547309)
  {
    if (a3) {
      *a3 = 4;
    }
    if (!a4) {
      return 0;
    }
    unsigned __int8 v10 = (*(uint64_t (**)(void))(**((void **)this + 20) + 32))(*((void *)this + 20));
    goto LABEL_32;
  }
  if (a2 != 1936876400) {
    return result;
  }
  if (a3)
  {
    unsigned int v9 = 8;
LABEL_25:
    *a3 = v9;
  }
LABEL_26:
  if (a4)
  {
    unsigned __int8 v10 = 1;
    goto LABEL_32;
  }
  return 0;
}

uint64_t acv2::SampleRateConverter::description@<X0>(int16x8_t *this@<X0>, void *a2@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  acv2::AudioConverterBase::description(this, __p);
  if ((v13 & 0x80u) == 0) {
    CFAllocatorRef v4 = __p;
  }
  else {
    CFAllocatorRef v4 = (void **)__p[0];
  }
  if ((v13 & 0x80u) == 0) {
    uint64_t v5 = v13;
  }
  else {
    uint64_t v5 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)v4, v5);
  if ((char)v13 < 0) {
    operator delete(__p[0]);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"    Algorithm ", 14);
  uint64_t v6 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)", quality ", 10);
  int v7 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", ", 2);
  unsigned int v8 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)this[10].i64[0] + 104))(this[10].i64[0]);
  size_t v9 = strlen(v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" @ ", 3);
  unsigned __int8 v10 = (void *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)__p, 1);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a2, (uint64_t)v15);
  uint64_t v14 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v15[-1] + *(void *)(v14 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v15[0] = MEMORY[0x1E4FBA470] + 16;
  if (v16 < 0) {
    operator delete((void *)v15[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x192FC8840](&v17);
}

void sub_18FF51E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA418];
  uint64_t v3 = *MEMORY[0x1E4FBA418];
  *(void *)a1 = *MEMORY[0x1E4FBA418];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FC8840](a1 + 112);
  return a1;
}

__CFString *acv2::SampleRateConverter::ConverterName(acv2::SampleRateConverter *this)
{
  return @"SampleRateConverter";
}

void acv2::SampleRateConverter::~SampleRateConverter(std::pmr **this)
{
  *this = (std::pmr *)&unk_1EDF95C60;
  ACAudioSpan::~ACAudioSpan(this + 21);
  uint64_t v2 = this[20];
  this[20] = 0;
  if (v2) {
    (*(void (**)(std::pmr *))(*(void *)v2 + 8))(v2);
  }
  acv2::AudioConverterBase::~AudioConverterBase((acv2::AudioConverterBase *)this);
  JUMPOUT(0x192FC8940);
}

{
  std::pmr *v2;
  uint64_t vars8;

  *this = (std::pmr *)&unk_1EDF95C60;
  ACAudioSpan::~ACAudioSpan(this + 21);
  uint64_t v2 = this[20];
  this[20] = 0;
  if (v2) {
    (*(void (**)(std::pmr *))(*(void *)v2 + 8))(v2);
  }
  acv2::AudioConverterBase::~AudioConverterBase((acv2::AudioConverterBase *)this);
}

caulk::rt_safe_memory_resource *std::allocator_traits<caulk::rt_allocator<AudioStreamPacketDescription>>::deallocate[abi:ne180100](caulk::rt_safe_memory_resource *result, unint64_t a2)
{
  if (!(a2 >> 60))
  {
    uint64_t v2 = result;
    uint64_t result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E4FB7E88];
    if (*MEMORY[0x1E4FB7E88]) {
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, v2);
    }
  }
  __break(1u);
  return result;
}

uint64_t _ZNSt3__18optionalI19ACMetadataContainerE7emplaceB8ne180100IJEvEERS1_DpOT_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v2 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v2;
      std::allocator_traits<caulk::rt_allocator<char>>::deallocate[abi:ne180100](v2);
    }
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 40) = 1;
  return a1;
}

void CA::AudioBuffers::~AudioBuffers(std::pmr **this)
{
}

void VorbisComment::Clear(VorbisComment *this)
{
  uint64_t v2 = *(const void **)this;
  *(void *)this = 0;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v4 = *((void *)this + 1);
  for (uint64_t i = *((void *)this + 2);
        i != v4;
        std::__destroy_at[abi:ne180100]<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>,0>(i))
  {
    i -= 16;
  }
  *((void *)this + 2) = v4;
}

void VorbisComment::SetVendorString(const void **a1, const void *a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (a2) {
    CFRetain(a2);
  }
  if (v2) {
    CFRelease(v2);
  }
}

void *std::vector<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>::reserve(void *result, unint64_t a2)
{
  if (a2 > (uint64_t)(result[2] - *result) >> 4)
  {
    uint64_t v2 = result;
    uint64_t v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 16 * v4;
    std::vector<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>::__swap_out_circular_buffer(v2, v5);
    return (void *)std::__split_buffer<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>::~__split_buffer((uint64_t)v5);
  }
  return result;
}

void *VorbisComment::AddUserComment(void *this, CFTypeRef cf, const void **a3)
{
  if (cf && *a3)
  {
    uint64_t v5 = this;
    this = CFRetain(cf);
    uint64_t v6 = *a3;
    if (v6) {
      this = CFRetain(v6);
    }
    unint64_t v7 = v5[3];
    unsigned int v8 = (void *)v5[2];
    if ((unint64_t)v8 >= v7)
    {
      uint64_t v10 = v5[1];
      uint64_t v11 = ((uint64_t)v8 - v10) >> 4;
      unint64_t v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 60) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v13 = v7 - v10;
      if (v13 >> 3 > v12) {
        unint64_t v12 = v13 >> 3;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v12;
      }
      v18[4] = v5 + 3;
      CFNumberRef v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v14);
      char v16 = &v15[16 * v11];
      v18[0] = v15;
      v18[1] = v16;
      v18[3] = &v15[16 * v17];
      *(void *)char v16 = cf;
      *((void *)v16 + 1) = v6;
      _OWORD v18[2] = v16 + 16;
      std::vector<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>::__swap_out_circular_buffer(v5 + 1, v18);
      size_t v9 = (void *)v5[2];
      this = (void *)std::__split_buffer<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>::~__split_buffer((uint64_t)v18);
    }
    else
    {
      *unsigned int v8 = cf;
      v8[1] = v6;
      size_t v9 = v8 + 2;
    }
    v5[2] = v9;
  }
  return this;
}

void sub_18FF52390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void applesauce::CF::StringRef::~StringRef(const void **this)
{
  unint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

void *std::vector<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>::__swap_out_circular_buffer(void *result, void *a2)
{
  uint64_t v3 = (void *)*result;
  uint64_t v2 = (void *)result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    uint64_t v5 = *(v2 - 2);
    v2 -= 2;
    *(void *)(v4 - 16) = v5;
    v4 -= 16;
    *uint64_t v2 = 0;
    *(void *)(v4 + 8) = v2[1];
    v2[1] = 0;
  }
  a2[1] = v4;
  uint64_t v6 = (void *)*result;
  *uint64_t result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
    std::__destroy_at[abi:ne180100]<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>,0>(i - 16);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>::~pair(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>,0>(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
}

void std::vector<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 16;
        std::__destroy_at[abi:ne180100]<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>,0>(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t VorbisComment::GetVorbisCommentFieldList(const void **a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v3 = (char *)a1[1];
  uint64_t v4 = (char *)a1[2];
  uint64_t v5 = *a1;
  if (*a1) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = v4 == v3;
  }
  if (v6) {
    return 0;
  }
  unint64_t v8 = (unint64_t)(v4 - v3) >> 4;
  unsigned int v9 = 24 * v8 + 16;
  if (*a2 < v9) {
    return 561211770;
  }
  if (24 * v8 == -16) {
    return 0;
  }
  uint64_t v18 = *a1;
  keys = @"VENDOR";
  if (v5)
  {
    *(void *)a3 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&keys, &v18, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = (char *)a1[2];
  }
  *(_DWORD *)(a3 + 8) = v8;
  if (v3 != v4)
  {
    unsigned int v13 = 0;
    do
    {
      uint64_t v14 = a3 + 24 * v13;
      char v16 = *(const void **)v3;
      CFNumberRef v15 = (const void *)*((void *)v3 + 1);
      *(void *)(v14 + 24) = v15;
      uint64_t v17 = (const void **)(v14 + 24);
      *(v17 - 1) = v16;
      if (v16)
      {
        CFRetain(v16);
        CFNumberRef v15 = *v17;
      }
      if (v15) {
        CFRetain(v15);
      }
      *(void *)(a3 + 24 * v13++ + 32) = 0;
      v3 += 16;
    }
    while (v3 != v4);
  }
  uint64_t result = 0;
  *a2 = v9;
  return result;
}

void VorbisComment::SetVendorString(const void **this, const __CFString *a2)
{
  CFStringRef Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, Copy);
  VorbisComment::SetVendorString(this, cf);
  if (cf) {
    CFRelease(cf);
  }
}

CFCharacterSetRef CreateEqualCharSet(void *a1)
{
  CFCharacterSetRef result = CFCharacterSetCreateWithCharactersInString(0, @"=");
  sEqualCharSet = (uint64_t)result;
  return result;
}

void VorbisComment::RemoveUserCommentsWithFieldName(VorbisComment *this, const __CFString *a2)
{
  uint64_t v2 = (CFStringRef *)*((void *)this + 1);
  if (v2 != *((CFStringRef **)this + 2))
  {
    do
    {
      CFStringRef v5 = *v2;
      v14.length = CFStringGetLength(*v2);
      v14.location = 0;
      if (CFStringCompareWithOptions(v5, a2, v14, 1uLL))
      {
        v2 += 2;
        BOOL v6 = (CFStringRef *)*((void *)this + 2);
      }
      else
      {
        uint64_t v7 = (uint64_t)(v2 + 2);
        unint64_t v8 = (CFStringRef *)*((void *)this + 2);
        if (v2 + 2 == v8)
        {
          BOOL v6 = v2;
        }
        else
        {
          unsigned int v9 = v2;
          BOOL v6 = v2;
          do
          {
            long long v10 = *((_OWORD *)v6 + 1);
            v6 += 2;
            CFStringRef v11 = *v9;
            CFStringRef v12 = v9[1];
            *(_OWORD *)unsigned int v9 = v10;
            *BOOL v6 = v11;
            v9[3] = v12;
            unsigned int v13 = v9 + 4;
            unsigned int v9 = v6;
          }
          while (v13 != v8);
          uint64_t v7 = *((void *)this + 2);
        }
        while ((CFStringRef *)v7 != v6)
        {
          v7 -= 16;
          std::__destroy_at[abi:ne180100]<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>,0>(v7);
        }
        *((void *)this + 2) = v6;
      }
    }
    while (v2 != v6);
  }
}

void VorbisComment::FillInfoDictionary(const __CFString **this, CACFDictionary *a2)
{
  if (*this)
  {
    CACFDictionary::AddString(a2, @"source encoder", *this);
  }
  else if (this[2] == this[1])
  {
    return;
  }
  if (sInitKeyDictionariesOnce != -1) {
    dispatch_once_f(&sInitKeyDictionariesOnce, 0, (dispatch_function_t)InitializeKeyDictionaries);
  }
  uint64_t v4 = (CFStringRef *)this[1];
  CFStringRef v5 = (CFStringRef *)this[2];
  if (v4 != v5)
  {
    CFDictionaryRef v6 = (const __CFDictionary *)sVorbisCommentKeysToInfoDictionaryKeys;
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    do
    {
      CFIndex Length = CFStringGetLength(*v4);
      MutableCFStringRef Copy = CFStringCreateMutableCopy(v7, Length, *v4);
      CFStringUppercase(MutableCopy, 0);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&key, MutableCopy);
      CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v6, key);
      if (Value && (CACFDictionary::HasKey(a2, Value) & 1) == 0) {
        CACFDictionary::AddString(a2, Value, v4[1]);
      }
      if (key) {
        CFRelease(key);
      }
      v4 += 2;
    }
    while (v4 != v5);
  }
}

void sub_18FF52978(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  _Unwind_Resume(a1);
}

CFDictionaryRef InitializeKeyDictionaries(void *a1)
{
  CFDictionaryRef result = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&sVorbisCommentKeys, (const void **)&sInfoDictionaryKeys, 9, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  sVorbisCommentKeysToInfoDictionaryKeys = (uint64_t)result;
  return result;
}

uint64_t VorbisComment::FillLoudnessInfoDictionary(VorbisComment *this, CACFDictionary *a2)
{
  if (__PAIR128__(*((void *)this + 2), 0) == *(_OWORD *)this) {
    return 2003334207;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  __int16 v13 = 257;
  uint64_t v4 = (CFStringRef *)*((void *)this + 1);
  CFStringRef v5 = (CFStringRef *)*((void *)this + 2);
  if (v4 != v5)
  {
    int v6 = 0;
    char v7 = 0;
    while (1)
    {
      CFStringRef v8 = *v4;
      v14.length = CFStringGetLength(*v4);
      v14.location = 0;
      if (CFStringCompareWithOptions(v8, @"LOUDNESS", v14, 1uLL) == kCFCompareEqualTo) {
        break;
      }
      AddTextToReplayGainDict((CFComparisonResult)v8, v4[1], (CACFDictionary *)&Mutable);
      if (v7) {
        goto LABEL_9;
      }
      char v7 = 0;
LABEL_11:
      v4 += 2;
      if (v4 == v5) {
        goto LABEL_14;
      }
    }
    if ((v7 & 1) == 0)
    {
      applesauce::CF::convert_to<std::string,0>((uint64_t)&__p, v4[1]);
      operator new[]();
    }
LABEL_9:
    if (CACFDictionary::Size((CACFDictionary *)&Mutable) == 4) {
      goto LABEL_14;
    }
    char v7 = 1;
    goto LABEL_11;
  }
  int v6 = 0;
LABEL_14:
  if (CACFDictionary::Size((CACFDictionary *)&Mutable))
  {
    int v9 = CACFDictionary::Size((CACFDictionary *)&Mutable);
    CACFDictionary::AddDictionary(a2, @"REPLAYGAIN", Mutable);
    int v6 = v9;
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  if (!v6) {
    return 2003334207;
  }
  else {
    return 0;
  }
}

void sub_18FF52D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&a17);
  _Unwind_Resume(a1);
}

CFMutableDictionaryRef CACFDictionary::SetCFMutableDictionaryFromCopy(CACFDictionary *this, CFDictionaryRef theDict, char a3)
{
  if (*((unsigned char *)this + 8))
  {
    int v6 = *(const void **)this;
    if (*(void *)this) {
      CFRelease(v6);
    }
  }
  CFMutableDictionaryRef result = CFDictionaryCreateMutableCopy(0, 0, theDict);
  *(void *)this = result;
  *((unsigned char *)this + 9) = 1;
  *((unsigned char *)this + 8) = a3;
  return result;
}

void applesauce::CF::details::parse_object<minijson::const_buffer_context>(CFDictionaryRef *a1, void *a2)
{
  int32x2_t v62 = 0;
  unint64_t v63 = 0;
  float32x2_t v61 = (uint64_t *)&v62;
  unint64_t v3 = a2[1];
  if (v3 >= 0x21)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    void *exception = &unk_1EDF9E1E8;
    CFStringRef v8 = a2 + 5;
    int v57 = 12;
LABEL_108:
    uint64_t v58 = *v8 - 1;
    if (!*v8) {
      uint64_t v58 = 0;
    }
    exception[1] = v58;
    *((_DWORD *)exception + 4) = v57;
  }
  LOBYTE(v4) = 0;
  unsigned __int8 v64 = 0;
  unsigned int v5 = *(unsigned __int8 *)a2;
  if (v5 <= 2)
  {
    char v6 = 8 * v5;
    unsigned int v4 = 0x5B7B00u >> v6;
    unsigned __int8 v64 = 1u >> v6;
  }
  int v7 = 0;
  *(_DWORD *)a2 = 0;
  CFStringRef v8 = a2 + 5;
  CFArrayRef v59 = (const __CFArray *)*MEMORY[0x1E4F1CFD0];
  CFArrayRef v9 = (const __CFArray *)*MEMORY[0x1E4F1CFC8];
  long long v10 = "";
  uint64_t v11 = MEMORY[0x1E4F14390];
LABEL_5:
  if (v7 != 6)
  {
    int v12 = v64;
    while (1)
    {
      if (a2[1] != v3)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        void *exception = &unk_1EDF9E1E8;
        int v57 = 11;
        goto LABEL_108;
      }
      if (v12)
      {
        unint64_t v13 = a2[5];
        if (v13 >= a2[4])
        {
          unsigned int v15 = 0;
          LOBYTE(v4) = 0;
LABEL_14:
          int v16 = *(_DWORD *)(v11 + 4 * v15 + 60) & 0x4000;
          goto LABEL_15;
        }
        uint64_t v14 = a2[2];
        a2[5] = v13 + 1;
        LOBYTE(v4) = *(unsigned char *)(v14 + v13);
      }
      unsigned int v15 = (char)v4;
      if ((v4 & 0x80) == 0) {
        goto LABEL_14;
      }
      int v16 = __maskrune((char)v4, 0x4000uLL);
LABEL_15:
      int v12 = 1;
      if (!v16)
      {
        unsigned __int8 v64 = 1;
        char v65 = v4;
        switch(v7)
        {
          case 0:
            if (v4 == 123)
            {
              int v7 = 1;
              char v17 = 44;
              LOBYTE(v4) = 123;
              goto LABEL_69;
            }
            exception = __cxa_allocate_exception(0x18uLL);
            void *exception = &unk_1EDF9E1E8;
            int v57 = 8;
            goto LABEL_108;
          case 1:
            if (v4 == 34) {
              goto LABEL_30;
            }
            if (v4 != 125)
            {
LABEL_112:
              exception = __cxa_allocate_exception(0x18uLL);
              void *exception = &unk_1EDF9E1E8;
              int v57 = 1;
              goto LABEL_108;
            }
            int v7 = 6;
            char v17 = 44;
            goto LABEL_69;
          case 2:
            if (v4 != 34) {
              goto LABEL_112;
            }
LABEL_30:
            a2[7] = a2[3] + a2[6];
            minijson::detail::read_quoted_string<minijson::const_buffer_context>((minijson::detail::buffer_context_base *)a2);
            long long v10 = (char *)a2[7];
            int v7 = 3;
            goto LABEL_67;
          case 3:
            if (v4 != 58)
            {
              exception = __cxa_allocate_exception(0x18uLL);
              void *exception = &unk_1EDF9E1E8;
              int v57 = 9;
              goto LABEL_108;
            }
            int v7 = 4;
            char v17 = 44;
            LOBYTE(v4) = 58;
            goto LABEL_69;
          case 4:
            minijson::detail::parse_value_helper<minijson::const_buffer_context>((uint64_t)&p_valuePtr, (minijson::detail::buffer_context_base *)a2, &v65, &v64);
            switch((int)p_valuePtr)
            {
              case 0:
                applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&v72, v67[0]);
                std::string::basic_string[abi:ne180100]<0>(&valuePtr, v10);
                uint64_t v18 = std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v61, &valuePtr, (uint64_t)&valuePtr);
                CFArrayRef v19 = (const __CFArray *)v18[7];
                v18[7] = v72;
                int v72 = (uint64_t *)v19;
                if (SHIBYTE(v71) < 0)
                {
                  operator delete((void *)valuePtr.i64[0]);
                  CFArrayRef v19 = (const __CFArray *)v72;
                  if (!v72) {
                    goto LABEL_66;
                  }
                }
                else if (!v19)
                {
                  goto LABEL_66;
                }
                CFRelease(v19);
                goto LABEL_66;
              case 1:
                valuePtr.i64[0] = v68;
                CFArrayRef v25 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
                int v72 = (uint64_t *)v25;
                if (!v25)
                {
                  uint64_t v29 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v29, "Could not construct");
LABEL_71:
                }
                std::string::basic_string[abi:ne180100]<0>(&valuePtr, v10);
                CFNumberRef v26 = std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v61, &valuePtr, (uint64_t)&valuePtr);
                CFArrayRef v27 = (const __CFArray *)v26[7];
                v26[7] = (uint64_t *)v25;
                int v72 = (uint64_t *)v27;
                if (SHIBYTE(v71) < 0)
                {
                  operator delete((void *)valuePtr.i64[0]);
                  if (!v27) {
                    goto LABEL_66;
                  }
                }
                else if (!v27)
                {
                  goto LABEL_66;
                }
                CFRelease(v27);
LABEL_66:
                int v7 = 5;
LABEL_67:
                LOBYTE(v4) = v65;
                break;
              case 2:
                if (v67[1]) {
                  CFArrayRef v22 = v59;
                }
                else {
                  CFArrayRef v22 = v9;
                }
                int v72 = (uint64_t *)v22;
                std::string::basic_string[abi:ne180100]<0>(&valuePtr, v10);
                int v23 = std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v61, &valuePtr, (uint64_t)&valuePtr);
                CFArrayRef v21 = (const __CFArray *)v23[7];
                v23[7] = (uint64_t *)v22;
                int v72 = (uint64_t *)v21;
                if ((SHIBYTE(v71) & 0x80000000) == 0)
                {
                  if (v21) {
                    goto LABEL_61;
                  }
                  goto LABEL_66;
                }
                operator delete((void *)valuePtr.i64[0]);
                if (!v21) {
                  goto LABEL_66;
                }
                goto LABEL_61;
              case 3:
                applesauce::CF::details::parse_object<minijson::const_buffer_context>(&v72, a2);
                std::string::basic_string[abi:ne180100]<0>(&valuePtr, v10);
                unsigned int v24 = std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v61, &valuePtr, (uint64_t)&valuePtr);
                CFArrayRef v21 = (const __CFArray *)v24[7];
                v24[7] = v72;
                int v72 = (uint64_t *)v21;
                if ((SHIBYTE(v71) & 0x80000000) == 0)
                {
                  if (v21) {
                    goto LABEL_61;
                  }
                  goto LABEL_66;
                }
                operator delete((void *)valuePtr.i64[0]);
                if (!v21) {
                  goto LABEL_66;
                }
                goto LABEL_61;
              case 4:
                applesauce::CF::details::parse_array<minijson::const_buffer_context>((CFArrayRef *)&v72, a2);
                std::string::basic_string[abi:ne180100]<0>(&valuePtr, v10);
                CFNumberRef v20 = std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v61, &valuePtr, (uint64_t)&valuePtr);
                CFArrayRef v21 = (const __CFArray *)v20[7];
                v20[7] = v72;
                int v72 = (uint64_t *)v21;
                if ((SHIBYTE(v71) & 0x80000000) == 0)
                {
                  if (v21) {
                    goto LABEL_61;
                  }
                  goto LABEL_66;
                }
                operator delete((void *)valuePtr.i64[0]);
                if (!v21) {
                  goto LABEL_66;
                }
                goto LABEL_61;
              case 5:
                int v72 = 0;
                std::string::basic_string[abi:ne180100]<0>(&valuePtr, v10);
                double v28 = std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v61, &valuePtr, (uint64_t)&valuePtr);
                CFArrayRef v21 = (const __CFArray *)v28[7];
                v28[7] = 0;
                int v72 = (uint64_t *)v21;
                if (SHIBYTE(v71) < 0)
                {
                  operator delete((void *)valuePtr.i64[0]);
                  if (!v21) {
                    goto LABEL_66;
                  }
                }
                else if (!v21)
                {
                  goto LABEL_66;
                }
LABEL_61:
                CFRelease(v21);
                goto LABEL_66;
              default:
                goto LABEL_66;
            }
            goto LABEL_68;
          case 5:
            if (v4 == 44)
            {
              int v7 = 2;
LABEL_68:
              char v17 = v4;
            }
            else
            {
              if (v4 != 125)
              {
                exception = __cxa_allocate_exception(0x18uLL);
                void *exception = &unk_1EDF9E1E8;
                int v57 = 10;
                goto LABEL_108;
              }
              int v7 = 6;
              char v17 = 44;
              LOBYTE(v4) = 125;
            }
LABEL_69:
            if (!v17)
            {
              uint64_t v29 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v29, "This line should never be reached, please file a bug report");
              goto LABEL_71;
            }
            break;
          default:
            goto LABEL_67;
        }
        goto LABEL_5;
      }
    }
  }
  uint64_t v30 = a2[1];
  if (v30) {
    a2[1] = v30 - 1;
  }
  int64x2_t valuePtr = 0uLL;
  unint64_t v71 = 0;
  if (v63)
  {
    if (v63 >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unsigned int v69 = &v71;
    uint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v63);
    unsigned int v33 = &v31[16 * v32];
    v67[1] = v31;
    unint64_t v68 = (unint64_t)v33;
    CFArrayRef v34 = (void *)valuePtr.i64[1];
    uint64_t v35 = (void *)valuePtr.i64[0];
    if (valuePtr.i64[1] == valuePtr.i64[0])
    {
      int64x2_t v38 = vdupq_n_s64(valuePtr.u64[1]);
      CFNumberRef v36 = v31;
    }
    else
    {
      CFNumberRef v36 = v31;
      do
      {
        uint64_t v37 = *(v34 - 2);
        v34 -= 2;
        *((void *)v36 - 2) = v37;
        v36 -= 16;
        void *v34 = 0;
        *((void *)v36 + 1) = v34[1];
        v34[1] = 0;
      }
      while (v34 != v35);
      int64x2_t v38 = valuePtr;
      uint64_t v31 = v67[1];
      unsigned int v33 = (char *)v68;
    }
    valuePtr.i64[0] = (uint64_t)v36;
    valuePtr.i64[1] = (uint64_t)v31;
    *(int64x2_t *)CFMutableDictionaryRef v67 = v38;
    unint64_t v39 = v71;
    unint64_t v71 = (unint64_t)v33;
    unint64_t v68 = v39;
    p_int64x2_t valuePtr = (int64x2_t *)v38.i64[0];
    std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer((uint64_t)&p_valuePtr);
  }
  uint64_t v40 = v61;
  if (v61 != (uint64_t *)&v62)
  {
    float v41 = (char *)valuePtr.i64[1];
    do
    {
      if ((unint64_t)v41 >= v71)
      {
        uint64_t v42 = (uint64_t)&v41[-valuePtr.i64[0]] >> 4;
        if ((unint64_t)(v42 + 1) >> 60) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v43 = (uint64_t)(v71 - valuePtr.i64[0]) >> 3;
        if (v43 <= v42 + 1) {
          unint64_t v43 = v42 + 1;
        }
        if (v71 - valuePtr.i64[0] >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v44 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v44 = v43;
        }
        unsigned int v69 = &v71;
        if (v44) {
          unint64_t v44 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v44);
        }
        else {
          uint64_t v45 = 0;
        }
        p_int64x2_t valuePtr = (int64x2_t *)v44;
        v67[0] = (char *)(v44 + 16 * v42);
        v67[1] = v67[0];
        unint64_t v68 = v44 + 16 * v45;
        applesauce::CF::TypeRefPair::TypeRefPair<std::string const&,applesauce::CF::TypeRef const&>((CFStringRef *)v67[0], (const UInt8 *)v40 + 32, (const void **)v40 + 7);
        int v46 = v67[0];
        float v41 = v67[1] + 16;
        v67[1] += 16;
        int v47 = (void *)valuePtr.i64[1];
        CFNumberRef v48 = (void *)valuePtr.i64[0];
        if (valuePtr.i64[1] == valuePtr.i64[0])
        {
          int64x2_t v50 = vdupq_n_s64(valuePtr.u64[1]);
        }
        else
        {
          do
          {
            uint64_t v49 = *(v47 - 2);
            v47 -= 2;
            *((void *)v46 - 2) = v49;
            v46 -= 16;
            *int v47 = 0;
            *((void *)v46 + 1) = v47[1];
            v47[1] = 0;
          }
          while (v47 != v48);
          int64x2_t v50 = valuePtr;
          float v41 = v67[1];
        }
        valuePtr.i64[0] = (uint64_t)v46;
        valuePtr.i64[1] = (uint64_t)v41;
        *(int64x2_t *)CFMutableDictionaryRef v67 = v50;
        unint64_t v51 = v71;
        unint64_t v71 = v68;
        unint64_t v68 = v51;
        p_int64x2_t valuePtr = (int64x2_t *)v50.i64[0];
        std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer((uint64_t)&p_valuePtr);
      }
      else
      {
        applesauce::CF::TypeRefPair::TypeRefPair<std::string const&,applesauce::CF::TypeRef const&>((CFStringRef *)v41, (const UInt8 *)v40 + 32, (const void **)v40 + 7);
        v41 += 16;
      }
      valuePtr.i64[1] = (uint64_t)v41;
      uint64_t v52 = (uint64_t *)v40[1];
      if (v52)
      {
        do
        {
          uint64_t v53 = v52;
          uint64_t v52 = (uint64_t *)*v52;
        }
        while (v52);
      }
      else
      {
        do
        {
          uint64_t v53 = (uint64_t *)v40[2];
          BOOL v54 = *v53 == (void)v40;
          uint64_t v40 = v53;
        }
        while (!v54);
      }
      uint64_t v40 = v53;
    }
    while (v53 != (uint64_t *)&v62);
  }
  CFDictionaryRef CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((void ***)&valuePtr);
  p_int64x2_t valuePtr = &valuePtr;
  std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_valuePtr);
  *a1 = CFDictionaryRef;
  std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::destroy(v62);
}

void sub_18FF53644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  __cxa_free_exception(v26);
  std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::destroy(a13);
  _Unwind_Resume(a1);
}

void applesauce::CF::TypeRef::~TypeRef(const void **this)
{
  unint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

std::runtime_error *applesauce::CF::construct_error(std::runtime_error *this)
{
  return std::runtime_error::runtime_error(this, "Could not construct");
}

CFDictionaryRef applesauce::CF::details::make_CFDictionaryRef(void ***a1)
{
  uint64_t v2 = ((char *)a1[1] - (char *)*a1) >> 4;
  keys = 0;
  uint64_t v37 = 0;
  unint64_t v38 = 0;
  std::vector<void const*>::reserve((void **)&keys, v2);
  values = 0;
  CFArrayRef v34 = 0;
  unint64_t v35 = 0;
  std::vector<void const*>::reserve((void **)&values, v2);
  unint64_t v3 = *a1;
  unsigned int v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      unsigned int v5 = *v3;
      if (!*v3 || !v3[1])
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      char v6 = v37;
      if ((unint64_t)v37 >= v38)
      {
        CFStringRef v8 = keys;
        uint64_t v9 = v37 - keys;
        unint64_t v10 = v9 + 1;
        if ((unint64_t)(v9 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v11 = v38 - (void)keys;
        if ((uint64_t)(v38 - (void)keys) >> 2 > v10) {
          unint64_t v10 = v11 >> 2;
        }
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v10;
        }
        if (v12) {
          unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v12);
        }
        else {
          uint64_t v13 = 0;
        }
        uint64_t v14 = (void **)(v12 + 8 * v9);
        *uint64_t v14 = v5;
        int v7 = v14 + 1;
        if (v6 != v8)
        {
          do
          {
            unsigned int v15 = *--v6;
            *--uint64_t v14 = v15;
          }
          while (v6 != v8);
          char v6 = keys;
        }
        keys = v14;
        unint64_t v38 = v12 + 8 * v13;
        if (v6) {
          operator delete(v6);
        }
      }
      else
      {
        const void *v37 = v5;
        int v7 = v6 + 1;
      }
      uint64_t v37 = v7;
      int v16 = v3[1];
      char v17 = v34;
      if ((unint64_t)v34 >= v35)
      {
        CFArrayRef v19 = values;
        uint64_t v20 = v34 - values;
        unint64_t v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v22 = v35 - (void)values;
        if ((uint64_t)(v35 - (void)values) >> 2 > v21) {
          unint64_t v21 = v22 >> 2;
        }
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v23 = v21;
        }
        if (v23) {
          unint64_t v23 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v23);
        }
        else {
          uint64_t v24 = 0;
        }
        CFArrayRef v25 = (void **)(v23 + 8 * v20);
        *CFArrayRef v25 = v16;
        uint64_t v18 = v25 + 1;
        if (v17 != v19)
        {
          do
          {
            CFNumberRef v26 = *--v17;
            *--CFArrayRef v25 = v26;
          }
          while (v17 != v19);
          char v17 = values;
        }
        values = v25;
        unint64_t v35 = v23 + 8 * v24;
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        void *v34 = v16;
        uint64_t v18 = v17 + 1;
      }
      CFArrayRef v34 = v18;
      v3 += 2;
    }
    while (v3 != v4);
  }
  CFArrayRef v27 = keys;
  double v28 = values;
  CFDictionaryRef v29 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, v2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v29)
  {
    uint64_t v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v32, "Could not construct");
  }
  if (v28) {
    operator delete(v28);
  }
  if (v27) {
    operator delete(v27);
  }
  return v29;
}

void sub_18FF53A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12)
{
  __cxa_free_exception(v12);
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(a1);
}

void std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unsigned int v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 16;
        std::__destroy_at[abi:ne180100]<applesauce::CF::TypeRefPair,0>(v4);
      }
      while ((void *)v4 != v2);
      unsigned int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,applesauce::CF::TypeRef>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,applesauce::CF::TypeRef>,0>(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 24);
  if (v2) {
    CFRelease(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void std::__destroy_at[abi:ne180100]<applesauce::CF::TypeRefPair,0>(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
}

CFStringRef *applesauce::CF::TypeRefPair::TypeRefPair<std::string const&,applesauce::CF::TypeRef const&>(CFStringRef *a1, const UInt8 *a2, const void **a3)
{
  CFIndex v5 = *((void *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    CFIndex v6 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    CFIndex v6 = v5;
  }
  CFStringRef v7 = CFStringCreateWithBytes(0, a2, v6, 0x8000100u, 0);
  *a1 = v7;
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFStringRef v8 = (const __CFString *)*a3;
  if (v8) {
    CFRetain(v8);
  }
  a1[1] = v8;
  return a1;
}

void sub_18FF53CC4(_Unwind_Exception *exception_object)
{
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
    std::__destroy_at[abi:ne180100]<applesauce::CF::TypeRefPair,0>(i - 16);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<void const*>::reserve(void **a1, unint64_t a2)
{
  if (a2 > ((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    int64_t v3 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(a2);
    CFIndex v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    CFStringRef v7 = &v4[8 * v6];
    uint64_t v9 = (char *)*a1;
    CFStringRef v8 = (char *)a1[1];
    unint64_t v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        uint64_t v11 = *((void *)v8 - 1);
        v8 -= 8;
        *((void *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v8 != v9);
      CFStringRef v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void *minijson::detail::read_quoted_string<minijson::const_buffer_context>(minijson::detail::buffer_context_base *this)
{
  char v42 = 0;
  int v41 = 0;
  unint64_t v2 = *((void *)this + 5);
  if (v2 >= *((void *)this + 4))
  {
LABEL_66:
    exception = __cxa_allocate_exception(0x18uLL);
    uint64_t v24 = *((void *)this + 5);
    BOOL v25 = v24 != 0;
    uint64_t v26 = v24 - 1;
    if (!v25) {
      uint64_t v26 = 0;
    }
    void *exception = &unk_1EDF9E1E8;
    exception[1] = v26;
    int v27 = 5;
    goto LABEL_69;
  }
  uint64_t v3 = 0;
  unsigned __int16 v4 = 0;
  int v5 = 1;
  uint64_t v6 = MEMORY[0x1E4F14390];
  while (1)
  {
    uint64_t v7 = *((void *)this + 2);
    *((void *)this + 5) = v2 + 1;
    int v8 = *(char *)(v7 + v2);
    if (!v8) {
      goto LABEL_66;
    }
    if (v5 != 3) {
      break;
    }
    *((unsigned char *)&v41 + v3) = v8;
    if (v3 == 3)
    {
      for (uint64_t i = 0; i != 4; ++i)
      {
        if (*((char *)&v41 + i) < 0 || (*(_DWORD *)(v6 + 4 * *((unsigned __int8 *)&v41 + i) + 60) & 0x10000) == 0)
        {
          CFDictionaryRef v29 = __cxa_allocate_exception(1uLL);
        }
      }
      unsigned int v12 = minijson::detail::parse_long((minijson::detail *)&v41, (const char *)0x10);
      if (!((unsigned __int16)v12 | v4))
      {
        uint64_t v32 = __cxa_allocate_exception(0x18uLL);
        uint64_t v33 = *((void *)this + 5);
        BOOL v25 = v33 != 0;
        uint64_t v34 = v33 - 1;
        if (!v25) {
          uint64_t v34 = 0;
        }
        *uint64_t v32 = &unk_1EDF9E1E8;
        v32[1] = v34;
        *((_DWORD *)v32 + 4) = 13;
      }
      if (v4)
      {
        if ((unsigned __int16)((unsigned __int16)(v4 + 0x2000) >> 11) > 0x1Eu)
        {
          if ((unsigned __int16)(v4 >> 10) > 0x36u
            || (unsigned __int16)((unsigned __int16)(v12 + 0x2000) >> 10) <= 0x3Eu)
          {
LABEL_78:
            unint64_t v35 = __cxa_allocate_exception(1uLL);
          }
          unsigned int v17 = (unsigned __int16)(v12 + 9216) | ((unsigned __int16)(v4 + 10240) << 10);
          unsigned int v13 = ((v17 + 0x10000) >> 18) | 0xF0;
          unsigned int v16 = ((v17 + 0x10000) >> 12) & 0x3F | 0x80;
          int v15 = (v17 >> 6) & 0x3F | 0x80;
          unsigned int v14 = (((v12 + 9216) & 0x3F) << 24) | 0x80000000;
        }
        else
        {
          if ((_WORD)v12) {
            goto LABEL_78;
          }
          unsigned int v13 = v4;
          if (v4 >= 0x80u)
          {
            unsigned int v16 = v4 & 0x3F | 0x80;
            unsigned int v14 = 0;
            if (v4 > 0x7FFu)
            {
              int v15 = v4 & 0x3F | 0x80;
              unsigned int v16 = (v4 >> 6) & 0x3F | 0x80;
              unsigned int v13 = (v4 >> 12) | 0xE0;
            }
            else
            {
              int v15 = 0;
              unsigned int v13 = (v4 >> 6) | 0xC0;
            }
          }
          else
          {
            unsigned int v14 = 0;
            int v15 = 0;
            unsigned int v16 = 0;
          }
        }
        uint64_t v18 = 0;
        int v40 = v14 | (v15 << 16) | (v16 << 8) | v13;
        do
        {
          if (v18 && !*((unsigned char *)&v40 + v18)) {
            break;
          }
          minijson::detail::buffer_context_base::write(this, *((unsigned char *)&v40 + v18++));
        }
        while (v18 != 4);
LABEL_62:
        uint64_t v3 = 0;
LABEL_63:
        unsigned __int16 v4 = 0;
LABEL_64:
        int v5 = 1;
        goto LABEL_65;
      }
      if ((unsigned __int16)v12 >> 10 != 54)
      {
        if ((unsigned __int16)((unsigned __int16)(v12 + 0x2000) >> 11) > 0x1Eu)
        {
          unint64_t v38 = __cxa_allocate_exception(1uLL);
        }
        int v19 = (unsigned __int16)v12;
        if ((unsigned __int16)v12 >= 0x80u)
        {
          if ((unsigned __int16)v12 > 0x7FFu)
          {
            int v19 = ((unsigned __int16)v12 >> 12) | 0xE0;
            int v21 = (v12 >> 6) & 0x3F | 0x80;
            int v20 = v12 & 0x3F | 0x80;
          }
          else
          {
            int v20 = 0;
            int v19 = ((unsigned __int16)v12 >> 6) | 0xC0;
            int v21 = v12 & 0x3F | 0x80;
          }
        }
        else
        {
          int v20 = 0;
          int v21 = 0;
        }
        uint64_t v22 = 0;
        int v39 = (v20 << 16) | (v21 << 8) | v19;
        do
        {
          if (v22 && !*((unsigned char *)&v39 + v22)) {
            break;
          }
          minijson::detail::buffer_context_base::write(this, *((unsigned char *)&v39 + v22++));
        }
        while (v22 != 4);
        goto LABEL_62;
      }
      uint64_t v3 = 0;
      int v5 = 1;
      unsigned __int16 v4 = v12;
    }
    else
    {
      int v5 = 3;
      ++v3;
    }
LABEL_65:
    unint64_t v2 = *((void *)this + 5);
    if (v2 >= *((void *)this + 4)) {
      goto LABEL_66;
    }
  }
  if (v5 == 2)
  {
    if (v8 > 97)
    {
      int v5 = 3;
      switch(v8)
      {
        case 'n':
          uint64_t v9 = this;
          char v10 = 10;
          break;
        case 'o':
        case 'p':
        case 'q':
        case 's':
          goto LABEL_79;
        case 'r':
          uint64_t v9 = this;
          char v10 = 13;
          break;
        case 't':
          uint64_t v9 = this;
          char v10 = 9;
          break;
        case 'u':
          goto LABEL_65;
        default:
          if (v8 == 98)
          {
            uint64_t v9 = this;
            char v10 = 8;
          }
          else
          {
            if (v8 != 102)
            {
LABEL_79:
              exception = __cxa_allocate_exception(0x18uLL);
              uint64_t v36 = *((void *)this + 5);
              BOOL v25 = v36 != 0;
              uint64_t v37 = v36 - 1;
              if (!v25) {
                uint64_t v37 = 0;
              }
              void *exception = &unk_1EDF9E1E8;
              exception[1] = v37;
              int v27 = 3;
LABEL_69:
              *((_DWORD *)exception + 4) = v27;
            }
            uint64_t v9 = this;
            char v10 = 12;
          }
          break;
      }
    }
    else
    {
      switch(v8)
      {
        case '""':
          uint64_t v9 = this;
          char v10 = 34;
          break;
        case '/':
          uint64_t v9 = this;
          char v10 = 47;
          break;
        case '\\':
          uint64_t v9 = this;
          char v10 = 92;
          break;
        default:
          goto LABEL_79;
      }
    }
    minijson::detail::buffer_context_base::write(v9, v10);
    goto LABEL_64;
  }
  if (v8 == 92)
  {
    int v5 = 2;
    goto LABEL_65;
  }
  if (v4)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    uint64_t v30 = *((void *)this + 5);
    BOOL v25 = v30 != 0;
    uint64_t v31 = v30 - 1;
    if (!v25) {
      uint64_t v31 = 0;
    }
    void *exception = &unk_1EDF9E1E8;
    exception[1] = v31;
    int v27 = 2;
    goto LABEL_69;
  }
  if (v8 != 34)
  {
    minijson::detail::buffer_context_base::write(this, v8);
    goto LABEL_63;
  }
  return minijson::detail::buffer_context_base::write(this, 0);
}

void sub_18FF5434C(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    exception = __cxa_allocate_exception(0x18uLL);
    uint64_t v4 = *(void *)(v2 + 40);
    BOOL v5 = v4 != 0;
    uint64_t v6 = v4 - 1;
    if (!v5) {
      uint64_t v6 = 0;
    }
    void *exception = &unk_1EDF9E1E8;
    exception[1] = v6;
    *((_DWORD *)exception + 4) = 4;
  }
  _Unwind_Resume(exception_object);
}

void sub_18FF543CC()
{
}

uint64_t minijson::detail::parse_value_helper<minijson::const_buffer_context>(uint64_t result, minijson::detail::buffer_context_base *this, unsigned char *a3, unsigned char *a4)
{
  uint64_t v5 = result;
  int v6 = *a3;
  switch(v6)
  {
    case '""':
      *((void *)this + 7) = *((void *)this + 3) + *((void *)this + 6);
      CFMutableDictionaryRef result = (uint64_t)minijson::detail::read_quoted_string<minijson::const_buffer_context>(this);
      uint64_t v8 = *((void *)this + 7);
      *(_DWORD *)uint64_t v5 = 0;
      *(_WORD *)(v5 + 4) = 0;
      *(void *)(v5 + 16) = 0;
      *(void *)(v5 + 24) = 0;
      *(void *)(v5 + 8) = v8;
      return result;
    case '[':
      *(_DWORD *)CFMutableDictionaryRef result = 4;
      *(_WORD *)(result + 4) = 0;
      *(void *)(result + 16) = 0;
      *(void *)(result + 24) = 0;
      *(void *)(result + 8) = "";
      int v7 = 2;
      goto LABEL_6;
    case '{':
      *(_DWORD *)CFMutableDictionaryRef result = 3;
      *(_WORD *)(result + 4) = 0;
      *(void *)(result + 16) = 0;
      *(void *)(result + 24) = 0;
      *(void *)(result + 8) = "";
      int v7 = 1;
LABEL_6:
      *(_DWORD *)this = v7;
      ++*((void *)this + 1);
      return result;
  }
  *((void *)this + 7) = *((void *)this + 3) + *((void *)this + 6);
  if (v6) {
    minijson::detail::buffer_context_base::write(this, v6);
  }
  unint64_t v11 = *((void *)this + 5);
  if (v11 >= *((void *)this + 4)) {
    goto LABEL_23;
  }
  uint64_t v12 = MEMORY[0x1E4F14390];
  while (1)
  {
    uint64_t v13 = *((void *)this + 2);
    *((void *)this + 5) = v11 + 1;
    int v14 = *(unsigned __int8 *)(v13 + v11);
    int v15 = (char)v14;
    if (v14 <= 92)
    {
      if (v14 == 44) {
        goto LABEL_27;
      }
      if (!v14) {
        goto LABEL_23;
      }
    }
    else if (v14 == 93 || v14 == 125)
    {
      goto LABEL_27;
    }
    if (((char)v14 & 0x80000000) == 0)
    {
      if ((*(_DWORD *)(v12 + 4 * (char)v14 + 60) & 0x4000) != 0) {
        break;
      }
      goto LABEL_22;
    }
    if (__maskrune((char)v14, 0x4000uLL)) {
      break;
    }
LABEL_22:
    minijson::detail::buffer_context_base::write(this, v15);
    unint64_t v11 = *((void *)this + 5);
    if (v11 >= *((void *)this + 4)) {
      goto LABEL_23;
    }
  }
  if (!v15)
  {
LABEL_23:
    exception = __cxa_allocate_exception(0x18uLL);
    uint64_t v17 = *((void *)this + 5);
    BOOL v18 = v17 != 0;
    uint64_t v19 = v17 - 1;
    if (!v18) {
      uint64_t v19 = 0;
    }
    void *exception = &unk_1EDF9E1E8;
    exception[1] = v19;
    *((_DWORD *)exception + 4) = 7;
  }
LABEL_27:
  minijson::detail::buffer_context_base::write(this, 0);
  int v20 = (char *)*((void *)this + 7);
  if (!strcmp(v20, "true"))
  {
    int v24 = 2;
    CFMutableDictionaryRef result = 1;
    double v21 = 1.0;
LABEL_33:
    char v23 = 1;
    char v22 = 1;
    goto LABEL_34;
  }
  double v21 = 0.0;
  if (!strcmp(v20, "false"))
  {
    CFMutableDictionaryRef result = 0;
    int v24 = 2;
    goto LABEL_33;
  }
  if (!strcmp(v20, "null"))
  {
    CFMutableDictionaryRef result = 0;
    char v23 = 0;
    char v22 = 0;
    int v24 = 5;
  }
  else
  {
    CFMutableDictionaryRef result = minijson::detail::parse_long((minijson::detail *)v20, (const char *)0xA);
    double v21 = (double)result;
    char v22 = 1;
    char v23 = 1;
    int v24 = 1;
  }
LABEL_34:
  *(_DWORD *)uint64_t v5 = v24;
  *(unsigned char *)(v5 + 4) = v22;
  *(unsigned char *)(v5 + 5) = v23;
  *(void *)(v5 + 8) = v20;
  *(void *)(v5 + 16) = result;
  *(double *)(v5 + 24) = v21;
  *a3 = v15;
  *a4 = 0;
  return result;
}

void sub_18FF546C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10)
{
  if (a2 != 1) {
    _Unwind_Resume(exception_object);
  }
  __cxa_begin_catch(exception_object);
  if (v10)
  {
    unsigned int v12 = *(unsigned __int8 *)v10;
    if (*v10)
    {
      uint64_t v13 = 1;
      do
      {
        if ((v12 & 0x80) != 0 || (*(_DWORD *)(v11 + 4 * v12 + 60) & 0x400) == 0)
        {
          unsigned int v14 = v12 - 43;
          if (v14 > 0x3A || ((1 << v14) & 0x40000000400000DLL) == 0) {
            goto LABEL_13;
          }
        }
        unsigned int v12 = v10[v13++];
      }
      while (v12);
      int v15 = *__error();
      *__error() = 0;
      a10 = 0;
      strtod(v10, &a10);
      unsigned int v16 = __error();
      int v17 = *v16;
      int *v16 = v15;
      if (!*a10 && v17 != 34)
      {
        __cxa_end_catch();
        JUMPOUT(0x18FF54648);
      }
    }
  }
LABEL_13:
  exception = __cxa_allocate_exception(1uLL);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRef::TypeRef(applesauce::CF::TypeRef *this, char *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  if ((v9 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v9 & 0x80u) == 0) {
    CFIndex v4 = v9;
  }
  else {
    CFIndex v4 = (CFIndex)__p[1];
  }
  CFStringRef v5 = CFStringCreateWithBytes(0, (const UInt8 *)v3, v4, 0x8000100u, 0);
  *(void *)this = v5;
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  if ((char)v9 < 0) {
    operator delete(__p[0]);
  }
  return this;
}

void sub_18FF548E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*v15) {
    CFRelease(*v15);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::__value_type<std::string,applesauce::CF::TypeRef>,std::__map_value_compare<std::string,std::__value_type<std::string,applesauce::CF::TypeRef>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,applesauce::CF::TypeRef>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, void *a2, uint64_t a3)
{
  int v6 = a1 + 1;
  CFStringRef v5 = a1[1];
  if (v5)
  {
    do
    {
      while (1)
      {
        int v6 = (uint64_t **)v5;
        uint64_t v8 = v5 + 4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4) & 0x80) == 0) {
          break;
        }
        CFStringRef v5 = *v6;
        unsigned __int8 v9 = v6;
        if (!*v6) {
          goto LABEL_9;
        }
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, a2) & 0x80) == 0) {
        return v6;
      }
      unsigned __int8 v9 = v6 + 1;
      CFStringRef v5 = v6[1];
    }
    while (v5);
  }
  else
  {
    unsigned __int8 v9 = a1 + 1;
  }
LABEL_9:
  char v10 = (uint64_t *)v6;
  int v6 = (uint64_t **)operator new(0x40uLL);
  *((_OWORD *)v6 + 2) = *(_OWORD *)a3;
  uint64_t v11 = *(uint64_t **)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  v6[6] = v11;
  v6[7] = 0;
  *int v6 = 0;
  v6[1] = 0;
  v6[2] = v10;
  *unsigned __int8 v9 = (uint64_t *)v6;
  unsigned int v12 = (uint64_t *)**a1;
  uint64_t v13 = (uint64_t *)v6;
  if (v12)
  {
    *a1 = v12;
    uint64_t v13 = *v9;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v13);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v6;
}

void applesauce::CF::details::parse_array<minijson::const_buffer_context>(CFArrayRef *a1, void *a2)
{
  int64x2_t v99 = 0uLL;
  v100[0] = 0;
  unint64_t v3 = a2[1];
  if (v3 >= 0x21)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    void *exception = &unk_1EDF9E1E8;
    uint64_t v8 = a2 + 5;
    int v93 = 12;
LABEL_138:
    uint64_t v94 = *v8 - 1;
    if (!*v8) {
      uint64_t v94 = 0;
    }
    exception[1] = v94;
    *((_DWORD *)exception + 4) = v93;
  }
  LOBYTE(v4) = 0;
  unsigned __int8 v105 = 0;
  unsigned int v5 = *(unsigned __int8 *)a2;
  if (v5 <= 2)
  {
    char v6 = 8 * v5;
    unsigned int v4 = 0x5B7B00u >> v6;
    unsigned __int8 v105 = 1u >> v6;
  }
  int v7 = 0;
  *(_DWORD *)a2 = 0;
  uint64_t v8 = a2 + 5;
  uint64_t v98 = *MEMORY[0x1E4F1CFD0];
  uint64_t v97 = *MEMORY[0x1E4F1CFC8];
  uint64_t v9 = MEMORY[0x1E4F14390];
LABEL_5:
  if (v7 != 4)
  {
    int v10 = v105;
    while (1)
    {
      if (a2[1] != v3)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        void *exception = &unk_1EDF9E1E8;
        int v93 = 11;
        goto LABEL_138;
      }
      if (v10)
      {
        unint64_t v11 = a2[5];
        if (v11 >= a2[4])
        {
          unsigned int v13 = 0;
          LOBYTE(v4) = 0;
LABEL_14:
          int v14 = *(_DWORD *)(v9 + 4 * v13 + 60) & 0x4000;
          goto LABEL_15;
        }
        uint64_t v12 = a2[2];
        a2[5] = v11 + 1;
        LOBYTE(v4) = *(unsigned char *)(v12 + v11);
      }
      unsigned int v13 = (char)v4;
      if ((v4 & 0x80) == 0) {
        goto LABEL_14;
      }
      int v14 = __maskrune((char)v4, 0x4000uLL);
LABEL_15:
      int v10 = 1;
      if (!v14)
      {
        unsigned __int8 v105 = 1;
        char v106 = v4;
        switch(v7)
        {
          case 0:
            if (v4 != 91)
            {
              exception = __cxa_allocate_exception(0x18uLL);
              void *exception = &unk_1EDF9E1E8;
              int v93 = 8;
              goto LABEL_138;
            }
            int v7 = 1;
            char v15 = 44;
            LOBYTE(v4) = 91;
LABEL_113:
            if (!v15)
            {
              __int16 v95 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v95, "This line should never be reached, please file a bug report");
            }
            goto LABEL_5;
          case 1:
            if (v4 != 93) {
              break;
            }
            goto LABEL_25;
          case 2:
            break;
          case 3:
            if (v4 == 44)
            {
              int v7 = 2;
LABEL_112:
              char v15 = v4;
              goto LABEL_113;
            }
            if (v4 == 93)
            {
LABEL_25:
              int v7 = 4;
              char v15 = 44;
              LOBYTE(v4) = 93;
              goto LABEL_113;
            }
            exception = __cxa_allocate_exception(0x18uLL);
            void *exception = &unk_1EDF9E1E8;
            int v93 = 10;
            goto LABEL_138;
          default:
            goto LABEL_111;
        }
        minijson::detail::parse_value_helper<minijson::const_buffer_context>((uint64_t)&v101, (minijson::detail::buffer_context_base *)a2, &v106, &v105);
        switch(v101)
        {
          case 0:
            unsigned int v16 = v102;
            if (v99.i64[1] < v100[0])
            {
              applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)v99.i64[1], v102);
              uint64_t v17 = v99.i64[1] + 8;
              goto LABEL_102;
            }
            uint64_t v37 = (v99.i64[1] - v99.i64[0]) >> 3;
            if ((unint64_t)(v37 + 1) >> 61) {
              goto LABEL_143;
            }
            unint64_t v38 = (v100[0] - v99.i64[0]) >> 2;
            if (v38 <= v37 + 1) {
              unint64_t v38 = v37 + 1;
            }
            if (v100[0] - v99.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL) {
              unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v39 = v38;
            }
            long long v111 = v100;
            if (v39) {
              unint64_t v39 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v39);
            }
            else {
              uint64_t v40 = 0;
            }
            std::string __p = (void *)v39;
            v109.i64[0] = v39 + 8 * v37;
            v109.i64[1] = v109.i64[0];
            unint64_t v110 = v39 + 8 * v40;
            applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)v109.i64[0], v16);
            uint64_t v62 = v109.i64[0];
            uint64_t v17 = v109.i64[1] + 8;
            v109.i64[1] += 8;
            unint64_t v63 = (void *)v99.i64[1];
            unsigned __int8 v64 = (void *)v99.i64[0];
            if (v99.i64[1] == v99.i64[0]) {
              goto LABEL_100;
            }
            do
            {
              uint64_t v65 = *--v63;
              *(void *)(v62 - 8) = v65;
              v62 -= 8;
              void *v63 = 0;
            }
            while (v63 != v64);
            goto LABEL_99;
          case 1:
            double v29 = v104;
            if (v99.i64[1] < v100[0])
            {
              std::construct_at[abi:ne180100]<applesauce::CF::TypeRef,double,applesauce::CF::TypeRef*>((CFNumberRef *)v99.i64[1], v104);
              uint64_t v17 = v99.i64[1] + 8;
LABEL_102:
              v99.i64[1] = v17;
              goto LABEL_110;
            }
            uint64_t v41 = (v99.i64[1] - v99.i64[0]) >> 3;
            if (!((unint64_t)(v41 + 1) >> 61))
            {
              unint64_t v42 = (v100[0] - v99.i64[0]) >> 2;
              if (v42 <= v41 + 1) {
                unint64_t v42 = v41 + 1;
              }
              if (v100[0] - v99.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL) {
                unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v43 = v42;
              }
              long long v111 = v100;
              if (v43) {
                unint64_t v43 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v43);
              }
              else {
                uint64_t v44 = 0;
              }
              std::string __p = (void *)v43;
              v109.i64[0] = v43 + 8 * v41;
              v109.i64[1] = v109.i64[0];
              unint64_t v110 = v43 + 8 * v44;
              std::construct_at[abi:ne180100]<applesauce::CF::TypeRef,double,applesauce::CF::TypeRef*>((CFNumberRef *)v109.i64[0], v29);
              uint64_t v62 = v109.i64[0];
              uint64_t v17 = v109.i64[1] + 8;
              v109.i64[1] += 8;
              unint64_t v63 = (void *)v99.i64[1];
              CFMutableDictionaryRef v66 = (void *)v99.i64[0];
              if (v99.i64[1] == v99.i64[0])
              {
LABEL_100:
                int64x2_t v68 = vdupq_n_s64((unint64_t)v63);
              }
              else
              {
                do
                {
                  uint64_t v67 = *--v63;
                  *(void *)(v62 - 8) = v67;
                  v62 -= 8;
                  void *v63 = 0;
                }
                while (v63 != v66);
LABEL_99:
                int64x2_t v68 = v99;
                uint64_t v17 = v109.i64[1];
              }
              v99.i64[0] = v62;
              v99.i64[1] = v17;
              int64x2_t v109 = v68;
              unint64_t v69 = v100[0];
              v100[0] = v110;
              unint64_t v110 = v69;
              std::string __p = (void *)v68.i64[0];
              std::__split_buffer<applesauce::CF::TypeRef>::~__split_buffer((uint64_t)&__p);
              goto LABEL_102;
            }
            goto LABEL_143;
          case 2:
            uint64_t v25 = v103;
            uint64_t v26 = (void *)v99.i64[1];
            if (v99.i64[1] < v100[0])
            {
              uint64_t v27 = v98;
              if (!v103) {
                uint64_t v27 = v97;
              }
              *(void *)v99.i64[1] = v27;
              double v28 = v26 + 1;
              goto LABEL_109;
            }
            uint64_t v31 = (void *)v99.i64[0];
            uint64_t v32 = (v99.i64[1] - v99.i64[0]) >> 3;
            unint64_t v33 = v32 + 1;
            if ((unint64_t)(v32 + 1) >> 61) {
              goto LABEL_143;
            }
            uint64_t v34 = v100[0] - v99.i64[0];
            if ((v100[0] - v99.i64[0]) >> 2 > v33) {
              unint64_t v33 = v34 >> 2;
            }
            if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v35 = v33;
            }
            long long v111 = v100;
            if (v35)
            {
              unint64_t v35 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v35);
              uint64_t v26 = (void *)v99.i64[1];
              uint64_t v31 = (void *)v99.i64[0];
            }
            else
            {
              uint64_t v36 = 0;
            }
            int v57 = (void *)(v35 + 8 * v32);
            unint64_t v58 = v35 + 8 * v36;
            unint64_t v110 = v58;
            uint64_t v59 = v97;
            if (v25) {
              uint64_t v59 = v98;
            }
            *int v57 = v59;
            __int32 v60 = v57 + 1;
            v109.i64[1] = (uint64_t)(v57 + 1);
            if (v26 == v31) {
              goto LABEL_107;
            }
            do
            {
              uint64_t v61 = *--v26;
              *--int v57 = v61;
              *uint64_t v26 = 0;
            }
            while (v26 != v31);
            goto LABEL_106;
          case 3:
            applesauce::CF::details::parse_object<minijson::const_buffer_context>(&v107, a2);
            BOOL v18 = (void *)v99.i64[1];
            if (v99.i64[1] < v100[0]) {
              goto LABEL_41;
            }
            unint64_t v51 = (void *)v99.i64[0];
            uint64_t v52 = (v99.i64[1] - v99.i64[0]) >> 3;
            unint64_t v53 = v52 + 1;
            if ((unint64_t)(v52 + 1) >> 61) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v54 = v100[0] - v99.i64[0];
            if ((v100[0] - v99.i64[0]) >> 2 > v53) {
              unint64_t v53 = v54 >> 2;
            }
            if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v55 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v55 = v53;
            }
            long long v111 = v100;
            if (v55)
            {
              unint64_t v55 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v55);
              BOOL v18 = (void *)v99.i64[1];
              unint64_t v51 = (void *)v99.i64[0];
            }
            else
            {
              uint64_t v56 = 0;
            }
            unsigned int v78 = (void *)(v55 + 8 * v52);
            unint64_t v79 = v55 + 8 * v56;
            unint64_t v110 = v79;
            *unsigned int v78 = v107;
            unsigned int v80 = v78 + 1;
            long long v107 = 0;
            v109.i64[1] = (uint64_t)(v78 + 1);
            if (v18 == v51)
            {
              int v77 = 0;
            }
            else
            {
              do
              {
                uint64_t v81 = *--v18;
                *--unsigned int v78 = v81;
                void *v18 = 0;
              }
              while (v18 != v51);
              unsigned int v80 = (void *)v109.i64[1];
              unint64_t v79 = v110;
              int v77 = v107;
            }
            int64x2_t v84 = v99;
            v99.i64[0] = (uint64_t)v78;
            int64x2_t v109 = v84;
            unint64_t v85 = v100[0];
            v100[0] = v79;
            unint64_t v110 = v85;
            std::string __p = (void *)v84.i64[0];
            std::__split_buffer<applesauce::CF::TypeRef>::~__split_buffer((uint64_t)&__p);
            v99.i64[1] = (uint64_t)v80;
            if (v77) {
              goto LABEL_125;
            }
            goto LABEL_110;
          case 4:
            applesauce::CF::details::parse_array<minijson::const_buffer_context>(&v107, a2);
            BOOL v18 = (void *)v99.i64[1];
            if (v99.i64[1] < v100[0])
            {
LABEL_41:
              void *v18 = v107;
              v99.i64[1] = (uint64_t)(v18 + 1);
            }
            else
            {
              uint64_t v19 = (void *)v99.i64[0];
              uint64_t v20 = (v99.i64[1] - v99.i64[0]) >> 3;
              unint64_t v21 = v20 + 1;
              if ((unint64_t)(v20 + 1) >> 61) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v22 = v100[0] - v99.i64[0];
              if ((v100[0] - v99.i64[0]) >> 2 > v21) {
                unint64_t v21 = v22 >> 2;
              }
              if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v23 = v21;
              }
              long long v111 = v100;
              if (v23)
              {
                unint64_t v23 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v23);
                BOOL v18 = (void *)v99.i64[1];
                uint64_t v19 = (void *)v99.i64[0];
              }
              else
              {
                uint64_t v24 = 0;
              }
              unsigned int v73 = (void *)(v23 + 8 * v20);
              unint64_t v74 = v23 + 8 * v24;
              unint64_t v110 = v74;
              *unsigned int v73 = v107;
              int v75 = v73 + 1;
              long long v107 = 0;
              v109.i64[1] = (uint64_t)(v73 + 1);
              if (v18 == v19)
              {
                int v77 = 0;
              }
              else
              {
                do
                {
                  uint64_t v76 = *--v18;
                  *--unsigned int v73 = v76;
                  void *v18 = 0;
                }
                while (v18 != v19);
                int v75 = (void *)v109.i64[1];
                unint64_t v74 = v110;
                int v77 = v107;
              }
              int64x2_t v82 = v99;
              v99.i64[0] = (uint64_t)v73;
              int64x2_t v109 = v82;
              unint64_t v83 = v100[0];
              v100[0] = v74;
              unint64_t v110 = v83;
              std::string __p = (void *)v82.i64[0];
              std::__split_buffer<applesauce::CF::TypeRef>::~__split_buffer((uint64_t)&__p);
              v99.i64[1] = (uint64_t)v75;
              if (v77) {
LABEL_125:
              }
                CFRelease(v77);
            }
            goto LABEL_110;
          case 5:
            uint64_t v30 = (void *)v99.i64[1];
            if (v99.i64[1] >= v100[0])
            {
              uint64_t v45 = (void *)v99.i64[0];
              uint64_t v46 = (v99.i64[1] - v99.i64[0]) >> 3;
              unint64_t v47 = v46 + 1;
              if ((unint64_t)(v46 + 1) >> 61) {
LABEL_143:
              }
                std::vector<float>::__throw_length_error[abi:ne180100]();
              uint64_t v48 = v100[0] - v99.i64[0];
              if ((v100[0] - v99.i64[0]) >> 2 > v47) {
                unint64_t v47 = v48 >> 2;
              }
              if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v49 = v47;
              }
              long long v111 = v100;
              if (v49)
              {
                unint64_t v49 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v49);
                uint64_t v30 = (void *)v99.i64[1];
                uint64_t v45 = (void *)v99.i64[0];
              }
              else
              {
                uint64_t v50 = 0;
              }
              int v57 = (void *)(v49 + 8 * v46);
              unint64_t v58 = v49 + 8 * v50;
              unint64_t v110 = v58;
              *int v57 = 0;
              __int32 v60 = v57 + 1;
              v109.i64[1] = (uint64_t)(v57 + 1);
              if (v30 == v45)
              {
LABEL_107:
                double v28 = v60;
              }
              else
              {
                do
                {
                  uint64_t v70 = *--v30;
                  *--int v57 = v70;
                  *uint64_t v30 = 0;
                }
                while (v30 != v45);
LABEL_106:
                double v28 = (void *)v109.i64[1];
                unint64_t v58 = v110;
              }
              int64x2_t v71 = v99;
              v99.i64[0] = (uint64_t)v57;
              v99.i64[1] = (uint64_t)v28;
              int64x2_t v109 = v71;
              unint64_t v72 = v100[0];
              v100[0] = v58;
              unint64_t v110 = v72;
              std::string __p = (void *)v71.i64[0];
              std::__split_buffer<applesauce::CF::TypeRef>::~__split_buffer((uint64_t)&__p);
            }
            else
            {
              *(void *)v99.i64[1] = 0;
              double v28 = v30 + 1;
            }
LABEL_109:
            v99.i64[1] = (uint64_t)v28;
LABEL_110:
            int v7 = 3;
LABEL_111:
            LOBYTE(v4) = v106;
            goto LABEL_112;
          default:
            goto LABEL_110;
        }
      }
    }
  }
  uint64_t v86 = a2[1];
  if (v86) {
    a2[1] = v86 - 1;
  }
  std::vector<void const*>::vector(&__p, (v99.i64[1] - v99.i64[0]) >> 3);
  int v88 = (uint64_t *)v99.i64[1];
  unsigned int v87 = (uint64_t *)v99.i64[0];
  if (v99.i64[0] != v99.i64[1])
  {
    int v89 = __p;
    do
    {
      uint64_t v90 = *v87++;
      *v89++ = v90;
    }
    while (v87 != v88);
  }
  CFArrayRef CFArray = applesauce::CF::details::make_CFArrayRef<void const*>((const void **)__p, v109.i64[0]);
  if (__p)
  {
    v109.i64[0] = (uint64_t)__p;
    operator delete(__p);
  }
  *a1 = CFArray;
  std::string __p = &v99;
  std::vector<applesauce::CF::TypeRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_18FF552F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,const void *a22,void *__p,uint64_t a24)
{
  a16 = &a13;
  std::vector<applesauce::CF::TypeRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

void std::vector<applesauce::CF::TypeRef>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unsigned int v4 = (char *)v1[1];
    unsigned int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        char v6 = (const void *)*((void *)v4 - 1);
        v4 -= 8;
        std::__destroy_at[abi:ne180100]<applesauce::CF::TypeRef,0>(v6);
      }
      while (v4 != v2);
      unsigned int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<applesauce::CF::TypeRef,0>(const void *a1)
{
  if (a1) {
    CFRelease(a1);
  }
}

void *std::vector<void const*>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unsigned int v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(a2);
    *a1 = v4;
    a1[2] = &v4[8 * v5];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_18FF554CC(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

CFArrayRef applesauce::CF::details::make_CFArrayRef<void const*>(const void **values, uint64_t a2)
{
  CFArrayRef result = CFArrayCreate(0, values, (a2 - (uint64_t)values) >> 3, MEMORY[0x1E4F1D510]);
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
  }
  return result;
}

void sub_18FF55558(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

CFNumberRef *std::construct_at[abi:ne180100]<applesauce::CF::TypeRef,double,applesauce::CF::TypeRef*>(CFNumberRef *a1, double a2)
{
  double valuePtr = a2;
  CFNumberRef v3 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  *a1 = v3;
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_18FF555F8(_Unwind_Exception *exception_object)
{
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<applesauce::CF::TypeRef>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    unsigned int v4 = *(const void **)(i - 8);
    *(void *)(a1 + 16) = i - 8;
    std::__destroy_at[abi:ne180100]<applesauce::CF::TypeRef,0>(v4);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, void *a2)
{
  size_t v2 = a1[1];
  if (*((char *)a1 + 23) >= 0)
  {
    size_t v3 = *((unsigned __int8 *)a1 + 23);
  }
  else
  {
    a1 = (void *)*a1;
    size_t v3 = v2;
  }
  size_t v4 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (void *)*a2;
    size_t v5 = v4;
  }
  if (v5 >= v3) {
    size_t v6 = v3;
  }
  else {
    size_t v6 = v5;
  }
  int v7 = memcmp(a1, a2, v6);
  if (v7)
  {
    if ((v7 & 0x80000000) == 0) {
      return 1;
    }
  }
  else
  {
    if (v3 == v5) {
      return 0;
    }
    if (v3 >= v5) {
      return 1;
    }
  }
  return 255;
}

uint64_t minijson::detail::parse_long(minijson::detail *this, const char *a2)
{
  if (!this) {
    goto LABEL_11;
  }
  unsigned int v3 = *(char *)this;
  if (!v3) {
    goto LABEL_11;
  }
  int v4 = (int)a2;
  if ((v3 & 0x80000000) != 0)
  {
    if (__maskrune(v3, 0x4000uLL)) {
      goto LABEL_11;
    }
  }
  else if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v3 + 60) & 0x4000) != 0)
  {
    goto LABEL_11;
  }
  int v5 = *__error();
  *__error() = 0;
  __endptr = 0;
  uint64_t v6 = strtol((const char *)this, &__endptr, v4);
  int v7 = __error();
  int v8 = *v7;
  int *v7 = v5;
  if (*__endptr || v8 == 34 && (unint64_t)(v6 - 0x7FFFFFFFFFFFFFFFLL) <= 1)
  {
LABEL_11:
    exception = __cxa_allocate_exception(1uLL);
  }
  return v6;
}

void *minijson::detail::buffer_context_base::write(void *this, char a2)
{
  unint64_t v2 = this[6];
  if (v2 >= this[5])
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid write call, please file a bug report");
  }
  uint64_t v3 = this[3];
  this[6] = v2 + 1;
  *(unsigned char *)(v3 + v2) = a2;
  return this;
}

void sub_18FF55844(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

const char *minijson::parse_error::what(minijson::parse_error *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  if (v1 > 0xD) {
    return "";
  }
  else {
    return off_1E56804D8[v1];
  }
}

void minijson::parse_error::~parse_error(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x192FC8940);
}

std::runtime_error *applesauce::CF::convert_error(std::runtime_error *this)
{
  return std::runtime_error::runtime_error(this, "Could not convert");
}

void applesauce::CF::details::to_description_json_style_helper(uint64_t a1, CFTypeRef *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v108 = *MEMORY[0x1E4F143B8];
  if (!*a2) {
    goto LABEL_37;
  }
  CFTypeID v8 = CFGetTypeID(*a2);
  CFTypeID TypeID = CFBooleanGetTypeID();
  CFBooleanRef v10 = (const __CFBoolean *)*a2;
  if (v8 == TypeID)
  {
    if (v10)
    {
      CFTypeID v11 = CFBooleanGetTypeID();
      if (v11 == CFGetTypeID(v10))
      {
        if (CFBooleanGetValue(v10))
        {
LABEL_6:
          *(unsigned char *)(a1 + 23) = 4;
          int v12 = 1702195828;
LABEL_46:
          *(_DWORD *)a1 = v12;
          *(unsigned char *)(a1 + 4) = 0;
          return;
        }
LABEL_18:
        *(unsigned char *)(a1 + 23) = 5;
        strcpy((char *)a1, "false");
        return;
      }
      CFTypeID v20 = CFNumberGetTypeID();
      if (v20 == CFGetTypeID(v10))
      {
        unsigned __int16 v21 = applesauce::CF::details::number_convert_as<BOOL>(v10);
        if (v21 > 0xFFu)
        {
          if ((_BYTE)v21) {
            goto LABEL_6;
          }
          goto LABEL_18;
        }
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      applesauce::CF::convert_error(exception);
LABEL_184:
    }
LABEL_183:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    goto LABEL_184;
  }
  if (!v10) {
    goto LABEL_38;
  }
  CFTypeID v13 = CFGetTypeID(*a2);
  CFTypeID v14 = CFNumberGetTypeID();
  CFTypeRef v15 = *a2;
  if (v13 != v14)
  {
    if (v15)
    {
      CFTypeID v22 = CFGetTypeID(v15);
      if (v22 == CFStringGetTypeID())
      {
        *((unsigned char *)&v105.__r_.__value_.__s + 23) = 1;
        LOWORD(v105.__r_.__value_.__l.__data_) = 34;
        if (!*a2)
        {
          uint64_t v94 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v94, "Could not construct");
        }
        unint64_t v23 = &v103;
        applesauce::CF::convert_to<std::string,0>((uint64_t)&v103, (const __CFString *)*a2);
        if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        {
          std::string::size_type size = HIBYTE(v103.__r_.__value_.__r.__words[2]);
        }
        else
        {
          std::string::size_type size = v103.__r_.__value_.__l.__size_;
          unint64_t v23 = (std::string *)v103.__r_.__value_.__r.__words[0];
        }
        memset(&v104, 0, sizeof(v104));
        if (size)
        {
          do
          {
            int v25 = v23->__r_.__value_.__s.__data_[0];
            if (v25 == 92 || v25 == 34)
            {
              std::string::push_back(&v104, 92);
              LOBYTE(v25) = v23->__r_.__value_.__s.__data_[0];
            }
            std::string::push_back(&v104, v25);
            unint64_t v23 = (std::string *)((char *)v23 + 1);
            --size;
          }
          while (size);
          unsigned int v26 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
          std::string::size_type v27 = v104.__r_.__value_.__l.__size_;
          std::string::size_type v28 = v104.__r_.__value_.__r.__words[0];
        }
        else
        {
          std::string::size_type v27 = 0;
          std::string::size_type v28 = 0;
          unsigned int v26 = 0;
        }
        if ((v26 & 0x80u) == 0) {
          uint64_t v70 = &v104;
        }
        else {
          uint64_t v70 = (std::string *)v28;
        }
        if ((v26 & 0x80u) == 0) {
          std::string::size_type v71 = v26;
        }
        else {
          std::string::size_type v71 = v27;
        }
        unint64_t v72 = std::string::append(&v105, (const std::string::value_type *)v70, v71);
        long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
        valuePtr.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
        *(_OWORD *)&valuePtr.__r_.__value_.__l.__data_ = v73;
        v72->__r_.__value_.__l.__size_ = 0;
        v72->__r_.__value_.__r.__words[2] = 0;
        v72->__r_.__value_.__r.__words[0] = 0;
        unint64_t v74 = std::string::append(&valuePtr, "\"", 1uLL);
        long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
        *(void *)(a1 + 16) = *((void *)&v74->__r_.__value_.__l + 2);
        *(_OWORD *)a1 = v75;
        v74->__r_.__value_.__l.__size_ = 0;
        v74->__r_.__value_.__r.__words[2] = 0;
        v74->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(valuePtr.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v104.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v103.__r_.__value_.__l.__data_);
        }
        if ((SHIBYTE(v105.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return;
        }
        unint64_t v69 = (void *)v105.__r_.__value_.__r.__words[0];
        goto LABEL_116;
      }
      if (*a2)
      {
        CFTypeID v29 = CFGetTypeID(*a2);
        CFTypeID v30 = CFArrayGetTypeID();
        CFBooleanRef v10 = (const __CFBoolean *)*a2;
        if (v29 == v30)
        {
          std::__function::__value_func<std::pair<std::string,std::string> ()(applesauce::CF::TypeRef,applesauce::CF::TypeRef)>::__value_func[abi:ne180100]((uint64_t)v107, a4);
          applesauce::CF::details::to_description_json_style_array((std::string *)a1, v10, a3, (uint64_t)v107);
          uint64_t v31 = v107;
LABEL_135:
          std::__function::__value_func<std::pair<std::string,std::string> ()(applesauce::CF::TypeRef,applesauce::CF::TypeRef)>::~__value_func[abi:ne180100](v31);
          return;
        }
        if (v10)
        {
          CFTypeID v76 = CFGetTypeID(*a2);
          CFTypeID v77 = CFDictionaryGetTypeID();
          CFBooleanRef v10 = (const __CFBoolean *)*a2;
          if (v76 == v77)
          {
            std::__function::__value_func<std::pair<std::string,std::string> ()(applesauce::CF::TypeRef,applesauce::CF::TypeRef)>::__value_func[abi:ne180100]((uint64_t)v106, a4);
            applesauce::CF::details::to_description_json_style_object(a1, v10, a3, (uint64_t)v106);
            uint64_t v31 = v106;
            goto LABEL_135;
          }
        }
LABEL_38:
        CFTypeID v32 = CFGetTypeID(v10);
        if (v32 == CFNullGetTypeID() || (CFTypeRef v33 = *a2) == 0)
        {
          *(unsigned char *)(a1 + 23) = 4;
          int v12 = 1819047278;
          goto LABEL_46;
        }
        if (!*(void *)(a4 + 24))
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Error, not a json style CFDictionary");
          goto LABEL_184;
        }
        CFTypeRef v98 = 0;
        CFRetain(v33);
        uint64_t v34 = *(void *)(a4 + 24);
        CFTypeRef cf = v33;
        if (!v34) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(std::string *__return_ptr))(*(void *)v34 + 48))(&valuePtr);
        CFRelease(cf);
        if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::size_type v35 = valuePtr.__r_.__value_.__l.__size_;
          if (valuePtr.__r_.__value_.__l.__size_)
          {
            p_std::string valuePtr = (std::string *)valuePtr.__r_.__value_.__r.__words[0];
LABEL_50:
            memset(&v96, 0, sizeof(v96));
            do
            {
              int v37 = p_valuePtr->__r_.__value_.__s.__data_[0];
              if (v37 == 92 || v37 == 34)
              {
                std::string::push_back(&v96, 92);
                LOBYTE(v37) = p_valuePtr->__r_.__value_.__s.__data_[0];
              }
              std::string::push_back(&v96, v37);
              p_std::string valuePtr = (std::string *)((char *)p_valuePtr + 1);
              --v35;
            }
            while (v35);
            unint64_t v38 = std::string::insert(&v96, 0, "{ \"", 3uLL);
            long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
            v103.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v39;
            v38->__r_.__value_.__l.__size_ = 0;
            v38->__r_.__value_.__r.__words[2] = 0;
            v38->__r_.__value_.__r.__words[0] = 0;
            uint64_t v40 = std::string::append(&v103, "\" : \"", 5uLL);
            long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
            v104.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v41;
            v40->__r_.__value_.__l.__size_ = 0;
            v40->__r_.__value_.__r.__words[2] = 0;
            v40->__r_.__value_.__r.__words[0] = 0;
            if ((v102 & 0x80u) == 0) {
              unint64_t v42 = &v100;
            }
            else {
              unint64_t v42 = v100;
            }
            if ((v102 & 0x80u) == 0) {
              uint64_t v43 = v102;
            }
            else {
              uint64_t v43 = v101;
            }
            memset(&__p, 0, sizeof(__p));
            if (v43)
            {
              do
              {
                int v44 = *v42;
                if (v44 == 92 || v44 == 34)
                {
                  std::string::push_back(&__p, 92);
                  LOBYTE(v44) = *v42;
                }
                std::string::push_back(&__p, v44);
                ++v42;
                --v43;
              }
              while (v43);
              unsigned int v45 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              std::string::size_type v46 = __p.__r_.__value_.__l.__size_;
              std::string::size_type v47 = __p.__r_.__value_.__r.__words[0];
            }
            else
            {
              std::string::size_type v46 = 0;
              std::string::size_type v47 = 0;
              unsigned int v45 = 0;
            }
            if ((v45 & 0x80u) == 0) {
              p_p = &__p;
            }
            else {
              p_p = (std::string *)v47;
            }
            if ((v45 & 0x80u) == 0) {
              std::string::size_type v55 = v45;
            }
            else {
              std::string::size_type v55 = v46;
            }
            uint64_t v56 = std::string::append(&v104, (const std::string::value_type *)p_p, v55);
            long long v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
            v105.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v57;
            v56->__r_.__value_.__l.__size_ = 0;
            v56->__r_.__value_.__r.__words[2] = 0;
            v56->__r_.__value_.__r.__words[0] = 0;
            unint64_t v58 = std::string::append(&v105, "\" }", 3uLL);
            long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
            *(void *)(a1 + 16) = *((void *)&v58->__r_.__value_.__l + 2);
            *(_OWORD *)a1 = v59;
            v58->__r_.__value_.__l.__size_ = 0;
            v58->__r_.__value_.__r.__words[2] = 0;
            v58->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v105.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v104.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v103.__r_.__value_.__l.__data_);
            }
            if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_112;
            }
            __int32 v60 = (void *)v96.__r_.__value_.__r.__words[0];
LABEL_111:
            operator delete(v60);
LABEL_112:
            if ((char)v102 < 0) {
              operator delete(v100);
            }
            if ((SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              return;
            }
            unint64_t v69 = (void *)valuePtr.__r_.__value_.__r.__words[0];
LABEL_116:
            operator delete(v69);
            return;
          }
        }
        else
        {
          std::string::size_type v35 = HIBYTE(valuePtr.__r_.__value_.__r.__words[2]);
          if (*((unsigned char *)&valuePtr.__r_.__value_.__s + 23))
          {
            p_std::string valuePtr = &valuePtr;
            goto LABEL_50;
          }
        }
        *((unsigned char *)&v104.__r_.__value_.__s + 23) = 1;
        LOWORD(v104.__r_.__value_.__l.__data_) = 34;
        if ((v102 & 0x80u) == 0) {
          uint64_t v48 = &v100;
        }
        else {
          uint64_t v48 = v100;
        }
        if ((v102 & 0x80u) == 0) {
          uint64_t v49 = v102;
        }
        else {
          uint64_t v49 = v101;
        }
        memset(&v103, 0, sizeof(v103));
        if (v49)
        {
          do
          {
            int v50 = *v48;
            if (v50 == 92 || v50 == 34)
            {
              std::string::push_back(&v103, 92);
              LOBYTE(v50) = *v48;
            }
            std::string::push_back(&v103, v50);
            ++v48;
            --v49;
          }
          while (v49);
          unsigned int v51 = HIBYTE(v103.__r_.__value_.__r.__words[2]);
          std::string::size_type v52 = v103.__r_.__value_.__l.__size_;
          std::string::size_type v53 = v103.__r_.__value_.__r.__words[0];
        }
        else
        {
          std::string::size_type v52 = 0;
          std::string::size_type v53 = 0;
          unsigned int v51 = 0;
        }
        if ((v51 & 0x80u) == 0) {
          unint64_t v63 = &v103;
        }
        else {
          unint64_t v63 = (std::string *)v53;
        }
        if ((v51 & 0x80u) == 0) {
          std::string::size_type v64 = v51;
        }
        else {
          std::string::size_type v64 = v52;
        }
        uint64_t v65 = std::string::append(&v104, (const std::string::value_type *)v63, v64);
        long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
        v105.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v66;
        v65->__r_.__value_.__l.__size_ = 0;
        v65->__r_.__value_.__r.__words[2] = 0;
        v65->__r_.__value_.__r.__words[0] = 0;
        uint64_t v67 = std::string::append(&v105, "\"", 1uLL);
        long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
        *(void *)(a1 + 16) = *((void *)&v67->__r_.__value_.__l + 2);
        *(_OWORD *)a1 = v68;
        v67->__r_.__value_.__l.__size_ = 0;
        v67->__r_.__value_.__r.__words[2] = 0;
        v67->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v105.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v103.__r_.__value_.__l.__data_);
        }
        if ((SHIBYTE(v104.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_112;
        }
        __int32 v60 = (void *)v104.__r_.__value_.__r.__words[0];
        goto LABEL_111;
      }
    }
LABEL_37:
    CFBooleanRef v10 = 0;
    goto LABEL_38;
  }
  if (!v15) {
    goto LABEL_183;
  }
  float v16 = applesauce::CF::convert_to<float,0>((uint64_t)v15);
  if (vabds_f32(floorf(v16), v16) >= 0.00000011921)
  {
    std::to_string((std::string *)a1, v16);
  }
  else
  {
    CFNumberRef v17 = (const __CFNumber *)*a2;
    if (!*a2) {
      goto LABEL_183;
    }
    CFTypeID v18 = CFNumberGetTypeID();
    if (v18 == CFGetTypeID(v17))
    {
      switch(CFNumberGetType(v17))
      {
        case kCFNumberSInt8Type:
          valuePtr.__r_.__value_.__s.__data_[0] = 0;
          int Value = CFNumberGetValue(v17, kCFNumberSInt8Type, &valuePtr);
          goto LABEL_152;
        case kCFNumberSInt16Type:
          LOWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
          int v84 = CFNumberGetValue(v17, kCFNumberSInt16Type, &valuePtr);
          goto LABEL_147;
        case kCFNumberSInt32Type:
          LODWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
          int v83 = CFNumberGetValue(v17, kCFNumberSInt32Type, &valuePtr);
          goto LABEL_173;
        case kCFNumberSInt64Type:
          valuePtr.__r_.__value_.__r.__words[0] = 0;
          int v78 = CFNumberGetValue(v17, kCFNumberSInt64Type, &valuePtr);
          goto LABEL_164;
        case kCFNumberFloat32Type:
          LODWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
          int v79 = CFNumberGetValue(v17, kCFNumberFloat32Type, &valuePtr);
          goto LABEL_139;
        case kCFNumberFloat64Type:
          valuePtr.__r_.__value_.__r.__words[0] = 0;
          int v82 = CFNumberGetValue(v17, kCFNumberFloat64Type, &valuePtr);
          goto LABEL_149;
        case kCFNumberCharType:
          valuePtr.__r_.__value_.__s.__data_[0] = 0;
          int Value = CFNumberGetValue(v17, kCFNumberCharType, &valuePtr);
LABEL_152:
          int v88 = Value;
          if (Value) {
            unsigned __int8 v89 = valuePtr.__r_.__value_.__s.__data_[0];
          }
          else {
            unsigned __int8 v89 = 0;
          }
          if (valuePtr.__r_.__value_.__s.__data_[0] >= 0 || Value == 0) {
            uint64_t v91 = 0;
          }
          else {
            uint64_t v91 = -256;
          }
          if (!v88) {
            goto LABEL_178;
          }
          uint64_t v62 = v91 & 0xFFFFFFFFFFFFFF00 | v89;
          goto LABEL_169;
        case kCFNumberShortType:
          LOWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
          int v84 = CFNumberGetValue(v17, kCFNumberShortType, &valuePtr);
LABEL_147:
          int v85 = v84;
          unsigned __int8 v86 = valuePtr.__r_.__value_.__s.__data_[0];
          uint64_t data_low = SLOWORD(valuePtr.__r_.__value_.__l.__data_);
          goto LABEL_174;
        case kCFNumberIntType:
          LODWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
          int v83 = CFNumberGetValue(v17, kCFNumberIntType, &valuePtr);
LABEL_173:
          int v85 = v83;
          unsigned __int8 v86 = valuePtr.__r_.__value_.__s.__data_[0];
          uint64_t data_low = SLODWORD(valuePtr.__r_.__value_.__l.__data_);
LABEL_174:
          unint64_t v92 = data_low & 0xFFFFFFFFFFFFFF00 | v86;
          if (v85) {
            uint64_t v62 = v92;
          }
          else {
            uint64_t v62 = 0;
          }
          if (!v85) {
            goto LABEL_178;
          }
          goto LABEL_169;
        case kCFNumberLongType:
          valuePtr.__r_.__value_.__r.__words[0] = 0;
          int v78 = CFNumberGetValue(v17, kCFNumberLongType, &valuePtr);
          goto LABEL_164;
        case kCFNumberLongLongType:
          valuePtr.__r_.__value_.__r.__words[0] = 0;
          int v78 = CFNumberGetValue(v17, kCFNumberLongLongType, &valuePtr);
          goto LABEL_164;
        case kCFNumberFloatType:
          LODWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
          int v79 = CFNumberGetValue(v17, kCFNumberFloatType, &valuePtr);
LABEL_139:
          int v80 = v79;
          uint64_t v81 = (uint64_t)*(float *)&valuePtr.__r_.__value_.__l.__data_;
          goto LABEL_165;
        case kCFNumberDoubleType:
          valuePtr.__r_.__value_.__r.__words[0] = 0;
          int v82 = CFNumberGetValue(v17, kCFNumberDoubleType, &valuePtr);
          goto LABEL_149;
        case kCFNumberCFIndexType:
          valuePtr.__r_.__value_.__r.__words[0] = 0;
          int v78 = CFNumberGetValue(v17, kCFNumberCFIndexType, &valuePtr);
          goto LABEL_164;
        case kCFNumberNSIntegerType:
          valuePtr.__r_.__value_.__r.__words[0] = 0;
          int v78 = CFNumberGetValue(v17, kCFNumberNSIntegerType, &valuePtr);
LABEL_164:
          int v80 = v78;
          uint64_t v81 = valuePtr.__r_.__value_.__r.__words[0];
          goto LABEL_165;
        case kCFNumberCGFloatType:
          valuePtr.__r_.__value_.__r.__words[0] = 0;
          int v82 = CFNumberGetValue(v17, kCFNumberCGFloatType, &valuePtr);
LABEL_149:
          int v80 = v82;
          uint64_t v81 = (uint64_t)*(double *)&valuePtr.__r_.__value_.__l.__data_;
LABEL_165:
          if (v80) {
            uint64_t v62 = v81;
          }
          else {
            uint64_t v62 = 0;
          }
          if (v80) {
            goto LABEL_169;
          }
          goto LABEL_178;
        default:
          goto LABEL_178;
      }
    }
    CFTypeID v61 = CFBooleanGetTypeID();
    if (v61 != CFGetTypeID(v17))
    {
LABEL_178:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      applesauce::CF::convert_error(exception);
      goto LABEL_184;
    }
    uint64_t v62 = CFBooleanGetValue(v17);
LABEL_169:
    std::to_string((std::string *)a1, v62);
  }
}

void sub_18FF563E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  std::__function::__value_func<std::pair<std::string,std::string> ()(applesauce::CF::TypeRef,applesauce::CF::TypeRef)>::~__value_func[abi:ne180100]((void *)(v47 - 136));
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<std::pair<std::string,std::string> ()(applesauce::CF::TypeRef,applesauce::CF::TypeRef)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

float applesauce::CF::convert_to<float,0>(uint64_t a1)
{
  unint64_t v1 = applesauce::CF::convert_as<float,0>(a1);
  if (!HIDWORD(v1))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
  }
  return *(float *)&v1;
}

void sub_18FF566D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<std::pair<std::string,std::string> ()(applesauce::CF::TypeRef,applesauce::CF::TypeRef)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

std::string *applesauce::CF::details::to_description_json_style_array(std::string *this, CFArrayRef theArray, uint64_t a3, uint64_t a4)
{
  v24[4] = *MEMORY[0x1E4F143B8];
  *((unsigned char *)&this->__r_.__value_.__s + 23) = 1;
  LOWORD(this->__r_.__value_.__l.__data_) = 91;
  if (theArray)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    CFIndex v9 = CFArrayGetCount(theArray);
    if (Count)
    {
      if (v9)
      {
        unint64_t v10 = 0;
        uint64_t v11 = a3 + 2;
        CFIndex v12 = v9 - 1;
        char v13 = 1;
        do
        {
          if ((v13 & 1) == 0)
          {
            std::string::append(this, ",", 1uLL);
            std::string::append(this, " ", 1uLL);
          }
          if (CFArrayGetCount(theArray) <= v10
            || (ValueAtIndex = CFArrayGetValueAtIndex(theArray, v10), (CFTypeRef v15 = ValueAtIndex) == 0))
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not find item");
          }
          CFRetain(ValueAtIndex);
          unsigned __int16 v21 = v15;
          std::__function::__value_func<std::pair<std::string,std::string> ()(applesauce::CF::TypeRef,applesauce::CF::TypeRef)>::__value_func[abi:ne180100]((uint64_t)v24, a4);
          applesauce::CF::details::to_description_json_style_helper(__p, &v21, v11, v24);
          if ((v23 & 0x80u) == 0) {
            float v16 = __p;
          }
          else {
            float v16 = (void **)__p[0];
          }
          if ((v23 & 0x80u) == 0) {
            std::string::size_type v17 = v23;
          }
          else {
            std::string::size_type v17 = (std::string::size_type)__p[1];
          }
          std::string::append(this, (const std::string::value_type *)v16, v17);
          if ((char)v23 < 0) {
            operator delete(__p[0]);
          }
          std::__function::__value_func<std::pair<std::string,std::string> ()(applesauce::CF::TypeRef,applesauce::CF::TypeRef)>::~__value_func[abi:ne180100](v24);
          CFRelease(v15);
          if (Count - 1 == v10) {
            break;
          }
          char v13 = 0;
        }
        while (v12 != v10++);
      }
    }
  }
  return std::string::append(this, "]", 1uLL);
}

void sub_18FF56978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void applesauce::CF::details::to_description_json_style_object(uint64_t a1, const __CFDictionary *a2, uint64_t a3, uint64_t a4)
{
  v75[4] = *MEMORY[0x1E4F143B8];
  char v7 = 1;
  *(unsigned char *)(a1 + 23) = 1;
  *(_WORD *)a1 = 123;
  uint64_t v8 = a3 + 2;
  applesauce::CF::DictionaryRef_iterator<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::DictionaryRef_iterator((uint64_t)&v69, a2);
  applesauce::CF::DictionaryRef_iterator<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::DictionaryRef_iterator((uint64_t)&v63, a2);
  uint64_t v64 = (v66 - (unsigned char *)v65) >> 3;
  while (1)
  {
    if (v69 && v70 != (v72 - v71) >> 3)
    {
      uint64_t v9 = v63;
      goto LABEL_8;
    }
    uint64_t v9 = v63;
    if (!v63 || v64 == (v66 - (unsigned char *)v65) >> 3) {
      break;
    }
LABEL_8:
    if (v69 == v9 && v70 == v64) {
      break;
    }
    if ((v7 & 1) == 0)
    {
      std::string::append((std::string *)a1, ",", 1uLL);
      std::string::append((std::string *)a1, " ", 1uLL);
    }
    applesauce::CF::DictionaryRef_iterator<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::operator->(cf, &v69);
    CFTypeRef v10 = cf[0];
    BOOL v12 = 0;
    if (cf[0])
    {
      CFTypeID v11 = CFGetTypeID(cf[0]);
      if (v11 == CFStringGetTypeID()) {
        BOOL v12 = 1;
      }
    }
    if (cf[1]) {
      CFRelease(cf[1]);
    }
    if (v10) {
      CFRelease(v10);
    }
    if (v12)
    {
      applesauce::CF::DictionaryRef_iterator<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::operator->(&v53, &v69);
      char v13 = (const void *)v53.__r_.__value_.__r.__words[0];
      if (!v53.__r_.__value_.__r.__words[0])
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      applesauce::CF::convert_to<std::string,0>((uint64_t)&__p, (const __CFString *)v53.__r_.__value_.__l.__data_);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      memset(&v61, 0, sizeof(v61));
      for (; size; --size)
      {
        int v16 = p_p->__r_.__value_.__s.__data_[0];
        if (v16 == 92 || v16 == 34)
        {
          std::string::push_back(&v61, 92);
          LOBYTE(v16) = p_p->__r_.__value_.__s.__data_[0];
        }
        std::string::push_back(&v61, v16);
        p_p = (std::string *)((char *)p_p + 1);
      }
      std::string::size_type v17 = std::string::insert(&v61, 0, "\"", 1uLL);
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v62.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      uint64_t v19 = std::string::append(&v62, "\" : ", 4uLL);
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      int64_t v57 = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)CFTypeRef cf = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      if (v57 >= 0) {
        unsigned __int16 v21 = cf;
      }
      else {
        unsigned __int16 v21 = (CFTypeRef *)cf[0];
      }
      if (v57 >= 0) {
        std::string::size_type v22 = HIBYTE(v57);
      }
      else {
        std::string::size_type v22 = (std::string::size_type)cf[1];
      }
      std::string::append((std::string *)a1, (const std::string::value_type *)v21, v22);
      if (SHIBYTE(v57) < 0) {
        operator delete((void *)cf[0]);
      }
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v62.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v61.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v53.__r_.__value_.__l.__size_) {
        CFRelease((CFTypeRef)v53.__r_.__value_.__l.__size_);
      }
      CFRelease(v13);
      applesauce::CF::DictionaryRef_iterator<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::operator->(&v62, &v69);
      std::__function::__value_func<std::pair<std::string,std::string> ()(applesauce::CF::TypeRef,applesauce::CF::TypeRef)>::__value_func[abi:ne180100]((uint64_t)v75, a4);
      applesauce::CF::details::to_description_json_style_helper(cf, &v62.__r_.__value_.__r.__words[1], v8, v75);
      if (v57 >= 0) {
        unsigned __int8 v23 = cf;
      }
      else {
        unsigned __int8 v23 = (CFTypeRef *)cf[0];
      }
      if (v57 >= 0) {
        std::string::size_type v24 = HIBYTE(v57);
      }
      else {
        std::string::size_type v24 = (std::string::size_type)cf[1];
      }
      std::string::append((std::string *)a1, (const std::string::value_type *)v23, v24);
      if (SHIBYTE(v57) < 0) {
        operator delete((void *)cf[0]);
      }
      std::__function::__value_func<std::pair<std::string,std::string> ()(applesauce::CF::TypeRef,applesauce::CF::TypeRef)>::~__value_func[abi:ne180100](v75);
      if (v62.__r_.__value_.__l.__size_) {
        CFRelease((CFTypeRef)v62.__r_.__value_.__l.__size_);
      }
      if (v62.__r_.__value_.__r.__words[0]) {
        CFRelease(v62.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      if (!*(void *)(a4 + 24))
      {
        uint64_t v48 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v48, "Error, not a json style CFDictionary");
      }
      applesauce::CF::DictionaryRef_iterator<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::operator->(&v62, &v69);
      int v25 = (const void *)v62.__r_.__value_.__r.__words[0];
      if (v62.__r_.__value_.__r.__words[0]) {
        CFRetain(v62.__r_.__value_.__l.__data_);
      }
      CFTypeRef v54 = 0;
      CFTypeRef v55 = v25;
      uint64_t v26 = *(void *)(a4 + 24);
      if (!v26) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(CFTypeRef *__return_ptr))(*(void *)v26 + 48))(cf);
      if (v54) {
        CFRelease(v54);
      }
      if (v55) {
        CFRelease(v55);
      }
      if (v62.__r_.__value_.__l.__size_) {
        CFRelease((CFTypeRef)v62.__r_.__value_.__l.__size_);
      }
      if (v25) {
        CFRelease(v25);
      }
      if (SHIBYTE(v57) < 0)
      {
        std::string::size_type v27 = (char *)cf[1];
        if (!cf[1])
        {
LABEL_136:
          int v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v50, "Error, not a json style CFDictionary");
        }
        std::string::size_type v28 = (CFTypeRef *)cf[0];
      }
      else
      {
        std::string::size_type v27 = (char *)HIBYTE(v57);
        if (!HIBYTE(v57)) {
          goto LABEL_136;
        }
        std::string::size_type v28 = cf;
      }
      memset(&v52, 0, sizeof(v52));
      do
      {
        int v29 = *(unsigned __int8 *)v28;
        if (v29 == 92 || v29 == 34)
        {
          std::string::push_back(&v52, 92);
          LOBYTE(v29) = *(unsigned char *)v28;
        }
        std::string::push_back(&v52, v29);
        std::string::size_type v28 = (CFTypeRef *)((char *)v28 + 1);
        --v27;
      }
      while (v27);
      CFTypeID v30 = std::string::insert(&v52, 0, "\"", 1uLL);
      long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      v53.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      CFTypeID v32 = std::string::append(&v53, "\" : \"", 5uLL);
      long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      if ((v59 & 0x80u) == 0) {
        uint64_t v34 = v58;
      }
      else {
        uint64_t v34 = (void **)v58[0];
      }
      if ((v59 & 0x80u) == 0) {
        unint64_t v35 = v59;
      }
      else {
        unint64_t v35 = (unint64_t)v58[1];
      }
      memset(&v51, 0, sizeof(v51));
      if (v35)
      {
        do
        {
          int v36 = *(unsigned __int8 *)v34;
          if (v36 == 92 || v36 == 34)
          {
            std::string::push_back(&v51, 92);
            LOBYTE(v36) = *(unsigned char *)v34;
          }
          std::string::push_back(&v51, v36);
          uint64_t v34 = (void **)((char *)v34 + 1);
          --v35;
        }
        while (v35);
        std::string::size_type v37 = HIBYTE(v51.__r_.__value_.__r.__words[2]);
        std::string::size_type v38 = v51.__r_.__value_.__l.__size_;
        std::string::size_type v39 = v51.__r_.__value_.__r.__words[0];
      }
      else
      {
        std::string::size_type v38 = 0;
        std::string::size_type v39 = 0;
        std::string::size_type v37 = 0;
      }
      if ((v37 & 0x80u) == 0) {
        uint64_t v40 = &v51;
      }
      else {
        uint64_t v40 = (std::string *)v39;
      }
      if ((v37 & 0x80u) == 0) {
        std::string::size_type v41 = v37;
      }
      else {
        std::string::size_type v41 = v38;
      }
      unint64_t v42 = std::string::append(&__p, (const std::string::value_type *)v40, v41);
      long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
      v61.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v43;
      v42->__r_.__value_.__l.__size_ = 0;
      v42->__r_.__value_.__r.__words[2] = 0;
      v42->__r_.__value_.__r.__words[0] = 0;
      int v44 = std::string::append(&v61, "\"", 1uLL);
      long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
      v62.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v45;
      v44->__r_.__value_.__l.__size_ = 0;
      v44->__r_.__value_.__r.__words[2] = 0;
      v44->__r_.__value_.__r.__words[0] = 0;
      if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v46 = &v62;
      }
      else {
        std::string::size_type v46 = (std::string *)v62.__r_.__value_.__r.__words[0];
      }
      if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v47 = HIBYTE(v62.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v47 = v62.__r_.__value_.__l.__size_;
      }
      std::string::append((std::string *)a1, (const std::string::value_type *)v46, v47);
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v62.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v61.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v51.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v53.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v52.__r_.__value_.__l.__data_);
      }
      if ((char)v59 < 0) {
        operator delete(v58[0]);
      }
      if (SHIBYTE(v57) < 0) {
        operator delete((void *)cf[0]);
      }
    }
    char v7 = 0;
    ++v70;
  }
  std::string::append((std::string *)a1, "}", 1uLL);
  if (v67)
  {
    long long v68 = v67;
    operator delete(v67);
  }
  if (v65)
  {
    long long v66 = v65;
    operator delete(v65);
  }
  if (v73)
  {
    unint64_t v74 = v73;
    operator delete(v73);
  }
  if (v71)
  {
    unint64_t v72 = v71;
    operator delete(v71);
  }
}

void sub_18FF5716C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,uint64_t a62,uint64_t a63)
{
  std::pair<std::string,std::string>::~pair((uint64_t)&a33);
  applesauce::CF::DictionaryRef_iterator<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::~DictionaryRef_iterator(&a63);
  applesauce::CF::DictionaryRef_iterator<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::~DictionaryRef_iterator((void *)(v64 - 192));
  if (*(char *)(v63 + 23) < 0) {
    operator delete(*(void **)v63);
  }
  _Unwind_Resume(a1);
}

__n128 std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(std::string *a1, std::string *a2, char *__s)
{
  size_t v6 = strlen(__s);
  char v7 = (__n128 *)std::string::append(a2, __s, v6);
  __n128 result = *v7;
  *a1 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

__n128 std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(std::string *a1, char *__s, std::string *a3)
{
  size_t v6 = strlen(__s);
  char v7 = (__n128 *)std::string::insert(a3, 0, __s, v6);
  __n128 result = *v7;
  *a1 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x192FC8940);
}

uint64_t applesauce::CF::DictionaryRef_iterator<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::DictionaryRef_iterator(uint64_t a1, CFDictionaryRef theDict)
{
  *(void *)a1 = theDict;
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v3 = (char **)(a1 + 40);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 56) = 0;
  if (theDict)
  {
    CFIndex Count = CFDictionaryGetCount(theDict);
    std::vector<void const*>::resize((char **)(a1 + 16), Count);
    std::vector<void const*>::resize(v3, Count);
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)a1, *(const void ***)(a1 + 16), *(const void ***)(a1 + 40));
  }
  return a1;
}

void applesauce::CF::DictionaryRef_iterator<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::operator->(void *a1, void *a2)
{
  unint64_t v2 = a2[1];
  if ((v2 & 0x8000000000000000) != 0 || (uint64_t v4 = a2[2], v2 >= (a2[3] - v4) >> 3))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::out_of_range::out_of_range[abi:ne180100](exception, "DictionaryRef_iterator iterator out of range.");
  }
  size_t v6 = *(const void **)(v4 + 8 * v2);
  if (v6)
  {
    CFRetain(*(CFTypeRef *)(v4 + 8 * v2));
    unint64_t v2 = a2[1];
  }
  uint64_t v7 = a2[5];
  uint64_t v8 = *(const void **)(v7 + 8 * v2);
  if (v8) {
    CFRetain(*(CFTypeRef *)(v7 + 8 * v2));
  }
  if (v6) {
    CFRetain(v6);
  }
  *a1 = v6;
  if (v8)
  {
    CFRetain(v8);
    a1[1] = v8;
    CFRelease(v8);
    if (!v6) {
      return;
    }
  }
  else
  {
    a1[1] = 0;
    if (!v6) {
      return;
    }
  }
  CFRelease(v6);
}

void sub_18FF57640(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t applesauce::CF::DictionaryRef_iterator<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::iterator_proxy::~iterator_proxy(uint64_t a1)
{
  unint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  return a1;
}

void *applesauce::CF::DictionaryRef_iterator<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::~DictionaryRef_iterator(void *a1)
{
  unint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::vector<void const*>::resize(char **a1, unint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = (v4 - *a1) >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    uint64_t v19 = &v3[8 * a2];
    goto LABEL_19;
  }
  unint64_t v6 = a2 - v5;
  uint64_t v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 3)
  {
    bzero(a1[1], 8 * v6);
    uint64_t v19 = &v4[8 * v6];
LABEL_19:
    a1[1] = v19;
    return;
  }
  if (a2 >> 61) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = v7 - v3;
  uint64_t v9 = v8 >> 2;
  if (v8 >> 2 <= a2) {
    uint64_t v9 = a2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  CFTypeID v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v10);
  BOOL v12 = &v11[8 * v5];
  CFTypeID v14 = &v11[8 * v13];
  bzero(v12, 8 * v6);
  CFTypeRef v15 = &v12[8 * v6];
  std::string::size_type v17 = *a1;
  int v16 = a1[1];
  if (v16 != *a1)
  {
    do
    {
      uint64_t v18 = *((void *)v16 - 1);
      v16 -= 8;
      *((void *)v12 - 1) = v18;
      v12 -= 8;
    }
    while (v16 != v17);
    int v16 = *a1;
  }
  *a1 = v12;
  a1[1] = v15;
  a1[2] = v14;
  if (v16)
  {
    operator delete(v16);
  }
}

std::runtime_error *applesauce::CF::not_found(std::runtime_error *this)
{
  return std::runtime_error::runtime_error(this, "Could not find item");
}

uint64_t applesauce::CF::convert_as<float,0>(uint64_t result)
{
  if (result)
  {
    CFNumberRef v1 = (const __CFNumber *)result;
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v1))
    {
      switch(CFNumberGetType(v1))
      {
        case kCFNumberSInt8Type:
          LOBYTE(valuePtr) = 0;
          int Value = CFNumberGetValue(v1, kCFNumberSInt8Type, &valuePtr);
          goto LABEL_15;
        case kCFNumberSInt16Type:
          LOWORD(valuePtr) = 0;
          int Value = CFNumberGetValue(v1, kCFNumberSInt16Type, &valuePtr);
          goto LABEL_17;
        case kCFNumberSInt32Type:
          LODWORD(valuePtr) = 0;
          int Value = CFNumberGetValue(v1, kCFNumberSInt32Type, &valuePtr);
          goto LABEL_20;
        case kCFNumberSInt64Type:
          double valuePtr = 0.0;
          int Value = CFNumberGetValue(v1, kCFNumberSInt64Type, &valuePtr);
          goto LABEL_28;
        case kCFNumberFloat32Type:
          LODWORD(valuePtr) = 0;
          int Value = CFNumberGetValue(v1, kCFNumberFloat32Type, &valuePtr);
          goto LABEL_24;
        case kCFNumberFloat64Type:
          double valuePtr = 0.0;
          int Value = CFNumberGetValue(v1, kCFNumberFloat64Type, &valuePtr);
          goto LABEL_30;
        case kCFNumberCharType:
          LOBYTE(valuePtr) = 0;
          int Value = CFNumberGetValue(v1, kCFNumberCharType, &valuePtr);
LABEL_15:
          int v8 = SLOBYTE(valuePtr);
          goto LABEL_18;
        case kCFNumberShortType:
          LOWORD(valuePtr) = 0;
          int Value = CFNumberGetValue(v1, kCFNumberShortType, &valuePtr);
LABEL_17:
          int v8 = SLOWORD(valuePtr);
LABEL_18:
          float v9 = (float)v8;
          goto LABEL_31;
        case kCFNumberIntType:
          LODWORD(valuePtr) = 0;
          int Value = CFNumberGetValue(v1, kCFNumberIntType, &valuePtr);
LABEL_20:
          float v9 = (float)SLODWORD(valuePtr);
          goto LABEL_31;
        case kCFNumberLongType:
          double valuePtr = 0.0;
          int Value = CFNumberGetValue(v1, kCFNumberLongType, &valuePtr);
          goto LABEL_28;
        case kCFNumberLongLongType:
          double valuePtr = 0.0;
          int Value = CFNumberGetValue(v1, kCFNumberLongLongType, &valuePtr);
          goto LABEL_28;
        case kCFNumberFloatType:
          LODWORD(valuePtr) = 0;
          int Value = CFNumberGetValue(v1, kCFNumberFloatType, &valuePtr);
LABEL_24:
          uint64_t v10 = LODWORD(valuePtr);
          goto LABEL_32;
        case kCFNumberDoubleType:
          double valuePtr = 0.0;
          int Value = CFNumberGetValue(v1, kCFNumberDoubleType, &valuePtr);
          goto LABEL_30;
        case kCFNumberCFIndexType:
          double valuePtr = 0.0;
          int Value = CFNumberGetValue(v1, kCFNumberCFIndexType, &valuePtr);
          goto LABEL_28;
        case kCFNumberNSIntegerType:
          double valuePtr = 0.0;
          int Value = CFNumberGetValue(v1, kCFNumberNSIntegerType, &valuePtr);
LABEL_28:
          float v9 = (float)*(uint64_t *)&valuePtr;
          goto LABEL_31;
        case kCFNumberCGFloatType:
          double valuePtr = 0.0;
          int Value = CFNumberGetValue(v1, kCFNumberCGFloatType, &valuePtr);
LABEL_30:
          float v9 = valuePtr;
LABEL_31:
          uint64_t v10 = LODWORD(v9);
LABEL_32:
          uint64_t v7 = v10 | 0x100000000;
          if (!Value) {
            uint64_t v7 = 0;
          }
          int v5 = v7 & 0xFFFFFF00;
          uint64_t v6 = v7 & 0x100000000;
          break;
        default:
          int v5 = 0;
          uint64_t v6 = 0;
          LOBYTE(v7) = 0;
          break;
      }
      return v6 | v5 & 0xFFFFFF00 | v7;
    }
    else
    {
      CFTypeID v4 = CFBooleanGetTypeID();
      if (v4 == CFGetTypeID(v1)) {
        return COERCE_UNSIGNED_INT((float)CFBooleanGetValue(v1)) | 0x100000000;
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

uint64_t applesauce::CF::details::number_convert_as<BOOL>(const __CFNumber *a1)
{
  switch(CFNumberGetType(a1))
  {
    case kCFNumberSInt8Type:
      LOBYTE(valuePtr) = 0;
      CFNumberRef v2 = a1;
      CFNumberType v3 = kCFNumberSInt8Type;
      goto LABEL_10;
    case kCFNumberSInt16Type:
      LOWORD(valuePtr) = 0;
      CFNumberRef v5 = a1;
      CFNumberType v6 = kCFNumberSInt16Type;
      goto LABEL_12;
    case kCFNumberSInt32Type:
      LODWORD(valuePtr) = 0;
      CFNumberRef v7 = a1;
      CFNumberType v8 = kCFNumberSInt32Type;
      goto LABEL_14;
    case kCFNumberSInt64Type:
      double valuePtr = 0.0;
      CFNumberRef v9 = a1;
      CFNumberType v10 = kCFNumberSInt64Type;
      goto LABEL_25;
    case kCFNumberFloat32Type:
      LODWORD(valuePtr) = 0;
      CFNumberRef v11 = a1;
      CFNumberType v12 = kCFNumberFloat32Type;
      goto LABEL_21;
    case kCFNumberFloat64Type:
      double valuePtr = 0.0;
      CFNumberRef v13 = a1;
      CFNumberType v14 = kCFNumberFloat64Type;
      goto LABEL_29;
    case kCFNumberCharType:
      LOBYTE(valuePtr) = 0;
      CFNumberRef v2 = a1;
      CFNumberType v3 = kCFNumberCharType;
LABEL_10:
      int Value = CFNumberGetValue(v2, v3, &valuePtr);
      BOOL v16 = Value == 0;
      int v17 = LOBYTE(valuePtr);
      goto LABEL_15;
    case kCFNumberShortType:
      LOWORD(valuePtr) = 0;
      CFNumberRef v5 = a1;
      CFNumberType v6 = kCFNumberShortType;
LABEL_12:
      int Value = CFNumberGetValue(v5, v6, &valuePtr);
      BOOL v16 = Value == 0;
      int v17 = LOWORD(valuePtr);
      goto LABEL_15;
    case kCFNumberIntType:
      LODWORD(valuePtr) = 0;
      CFNumberRef v7 = a1;
      CFNumberType v8 = kCFNumberIntType;
LABEL_14:
      int Value = CFNumberGetValue(v7, v8, &valuePtr);
      BOOL v16 = Value == 0;
      int v17 = LODWORD(valuePtr);
LABEL_15:
      BOOL v18 = v16 || v17 == 0;
      goto LABEL_33;
    case kCFNumberLongType:
      double valuePtr = 0.0;
      CFNumberRef v9 = a1;
      CFNumberType v10 = kCFNumberLongType;
      goto LABEL_25;
    case kCFNumberLongLongType:
      double valuePtr = 0.0;
      CFNumberRef v9 = a1;
      CFNumberType v10 = kCFNumberLongLongType;
      goto LABEL_25;
    case kCFNumberFloatType:
      LODWORD(valuePtr) = 0;
      CFNumberRef v11 = a1;
      CFNumberType v12 = kCFNumberFloatType;
LABEL_21:
      int Value = CFNumberGetValue(v11, v12, &valuePtr);
      BOOL v19 = *(float *)&valuePtr == 0.0;
      goto LABEL_30;
    case kCFNumberDoubleType:
      double valuePtr = 0.0;
      CFNumberRef v13 = a1;
      CFNumberType v14 = kCFNumberDoubleType;
      goto LABEL_29;
    case kCFNumberCFIndexType:
      double valuePtr = 0.0;
      CFNumberRef v9 = a1;
      CFNumberType v10 = kCFNumberCFIndexType;
      goto LABEL_25;
    case kCFNumberNSIntegerType:
      double valuePtr = 0.0;
      CFNumberRef v9 = a1;
      CFNumberType v10 = kCFNumberNSIntegerType;
LABEL_25:
      int Value = CFNumberGetValue(v9, v10, &valuePtr);
      if (Value) {
        BOOL v18 = *(void *)&valuePtr == 0;
      }
      else {
        BOOL v18 = 1;
      }
      goto LABEL_33;
    case kCFNumberCGFloatType:
      double valuePtr = 0.0;
      CFNumberRef v13 = a1;
      CFNumberType v14 = kCFNumberCGFloatType;
LABEL_29:
      int Value = CFNumberGetValue(v13, v14, &valuePtr);
      BOOL v19 = valuePtr == 0.0;
LABEL_30:
      BOOL v18 = v19 || Value == 0;
LABEL_33:
      int v4 = !v18;
      if (!Value) {
        goto LABEL_38;
      }
      int v20 = 256;
      break;
    default:
      int v4 = 0;
LABEL_38:
      int v20 = 0;
      break;
  }
  return v20 | v4;
}

void std::__function::__func<VorbisComment::SetLoudnessInfoDictionary(CACFDictionary *)::$_0,std::allocator<VorbisComment::SetLoudnessInfoDictionary(CACFDictionary *)::$_0>,std::pair<std::string,std::string> ()(applesauce::CF::TypeRef,applesauce::CF::TypeRef)>::operator()(const void **a1@<X1>, const void **a2@<X2>, std::string *a3@<X8>)
{
  int v4 = *a1;
  *a1 = 0;
  CFNumberRef v5 = *a2;
  *a2 = 0;
  if (!v4)
  {
    if (!v5)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Error, neither key nor value is valid in JSON handler function");
    }
    CFTypeID v7 = CFGetTypeID(v5);
    std::to_string(&v9, v7);
    std::string::basic_string[abi:ne180100]<0>(a3, "Unsupported CoreFoundation type");
    a3[1] = v9;
LABEL_6:
    CFRelease(v5);
    if (!v4) {
      return;
    }
    goto LABEL_7;
  }
  CFTypeID v6 = CFGetTypeID(v4);
  std::to_string(&v9, v6);
  std::string::basic_string[abi:ne180100]<0>(a3, "bad key");
  a3[1] = v9;
  if (v5) {
    goto LABEL_6;
  }
LABEL_7:
  CFRelease(v4);
}

void sub_18FF57E10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

void std::__function::__func<VorbisComment::SetLoudnessInfoDictionary(CACFDictionary *)::$_0,std::allocator<VorbisComment::SetLoudnessInfoDictionary(CACFDictionary *)::$_0>,std::pair<std::string,std::string> ()(applesauce::CF::TypeRef,applesauce::CF::TypeRef)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF8B0C0;
}

void *std::__function::__func<VorbisComment::SetLoudnessInfoDictionary(CACFDictionary *)::$_0,std::allocator<VorbisComment::SetLoudnessInfoDictionary(CACFDictionary *)::$_0>,std::pair<std::string,std::string> ()(applesauce::CF::TypeRef,applesauce::CF::TypeRef)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDF8B0C0;
  return result;
}

void std::__function::__func<VorbisComment::SetLoudnessInfoDictionary(CACFDictionary *)::$_0,std::allocator<VorbisComment::SetLoudnessInfoDictionary(CACFDictionary *)::$_0>,std::pair<std::string,std::string> ()(applesauce::CF::TypeRef,applesauce::CF::TypeRef)>::~__func()
{
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA488] + 104;
  *(void *)(a1 + 128) = MEMORY[0x1E4FBA488] + 104;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = MEMORY[0x1E4FBA488] + 64;
  *(void *)(a1 + 16) = MEMORY[0x1E4FBA488] + 64;
  CFNumberRef v5 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  uint64_t v7 = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = v6;
  *(void *)(a1 + 8) = 0;
  CFNumberType v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  uint64_t v9 = MEMORY[0x1E4FBA488] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v10 = v5[5];
  uint64_t v11 = v5[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v3 + *(void *)(v11 - 24)) = v10;
  uint64_t v12 = v5[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 24)) = v5[6];
  *(void *)a1 = v9;
  *(void *)(a1 + 128) = v2;
  *(void *)(a1 + 16) = v4;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_18FF581AC(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x192FC8840](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA408];
  uint64_t v3 = *MEMORY[0x1E4FBA408];
  *(void *)a1 = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x192FC8840](a1 + 128);
  return a1;
}

uint64_t VorbisComment::GetWAVEChannelMask(VorbisComment *this, VorbisComment *a2, _DWORD *a3)
{
  uint64_t v3 = 2003334207;
  if (this != a2)
  {
    uint64_t v6 = this;
    while (1)
    {
      CFStringRef v7 = *(const __CFString **)v6;
      v21.length = CFStringGetLength(*(CFStringRef *)v6);
      v21.location = 0;
      if (CFStringCompareWithOptions(v7, @"WAVEFORMATEXTENSIBLE_CHANNEL_MASK", v21, 1uLL) == kCFCompareEqualTo) {
        break;
      }
      uint64_t v6 = (VorbisComment *)((char *)v6 + 16);
      if (v6 == a2) {
        return v3;
      }
    }
    CFStringRef v8 = (const __CFString *)*((void *)v6 + 1);
    int v20 = 0;
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v16);
    *(_DWORD *)((char *)&v17[1] + *(void *)(v17[0] - 24)) = *(_DWORD *)((unsigned char *)&v17[1] + *(void *)(v17[0] - 24)) & 0xFFFFFFB5 | 8;
    applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v8);
    if ((v15 & 0x80u) == 0) {
      uint64_t v9 = __p;
    }
    else {
      uint64_t v9 = (void **)__p[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v10 = v15;
    }
    else {
      uint64_t v10 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v9, v10);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    MEMORY[0x192FC8500](v16, &v20);
    int v11 = v20;
    v16[0] = *MEMORY[0x1E4FBA408];
    uint64_t v12 = *(void *)(MEMORY[0x1E4FBA408] + 72);
    *(void *)((char *)v16 + *(void *)(v16[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
    v17[0] = v12;
    v17[1] = MEMORY[0x1E4FBA470] + 16;
    if (v18 < 0) {
      operator delete((void *)v17[9]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x192FC8840](&v19);
    uint64_t v3 = 0;
    *a3 = v11;
  }
  return v3;
}

void sub_18FF58554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  a16 = *MEMORY[0x1E4FBA408];
  uint64_t v36 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  a18 = v36;
  a19 = MEMORY[0x1E4FBA470] + 16;
  if (a32 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x192FC8840](&a35);
  _Unwind_Resume(a1);
}

uint64_t VorbisComment::SetWAVEChannelMask(const void **this)
{
  if (!*this && this[2] == this[1]) {
    VorbisComment::SetVendorString(this, @"Apple");
  }
  VorbisComment::RemoveUserCommentsWithFieldName((VorbisComment *)this, @"WAVEFORMATEXTENSIBLE_CHANNEL_MASK");
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v19);
  *(_DWORD *)((char *)v21 + *(void *)(v20 - 24)) = *(_DWORD *)((unsigned char *)v21 + *(void *)(v20 - 24)) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  std::string::basic_string[abi:ne180100]<0>(v17, "0x");
  CFRetain(@"WAVEFORMATEXTENSIBLE_CHANNEL_MASK");
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, @"WAVEFORMATEXTENSIBLE_CHANNEL_MASK");
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(&__dst, (uint64_t)v21);
  if ((v18 & 0x80u) == 0) {
    uint64_t v2 = v17;
  }
  else {
    uint64_t v2 = (void **)v17[0];
  }
  if ((v18 & 0x80u) == 0) {
    std::string::size_type v3 = v18;
  }
  else {
    std::string::size_type v3 = (std::string::size_type)v17[1];
  }
  uint64_t v4 = std::string::insert(&__dst, 0, (const std::string::value_type *)v2, v3);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  int64_t v14 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (v14 >= 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if (v6)
  {
    if (v14 >= 0) {
      CFIndex v7 = HIBYTE(v14);
    }
    else {
      CFIndex v7 = (CFIndex)__p[1];
    }
    CFStringRef v8 = CFStringCreateWithBytes(0, (const UInt8 *)v6, v7, 0x8000100u, 0);
    CFStringRef v15 = v8;
    if (!v8)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
  }
  else
  {
    CFStringRef v8 = 0;
    CFStringRef v15 = 0;
  }
  VorbisComment::AddUserComment(this, cf, (const void **)&v15);
  if (v8) {
    CFRelease(v8);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (cf) {
    CFRelease(cf);
  }
  if ((char)v18 < 0) {
    operator delete(v17[0]);
  }
  v19[0] = *MEMORY[0x1E4FBA408];
  uint64_t v10 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v19 + *(void *)(v19[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  uint64_t v20 = v10;
  v21[0] = MEMORY[0x1E4FBA470] + 16;
  if (v22 < 0) {
    operator delete((void *)v21[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x192FC8840](&v23);
}

void sub_18FF589B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,int a24,const void *a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  applesauce::CF::StringRef::~StringRef(&a25);
  if (a31 < 0) {
    operator delete(a26);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a32);
  _Unwind_Resume(a1);
}

uint64_t DSPGraph::Box::isLatencyDelay(DSPGraph::Box *this)
{
  return 0;
}

void DSPGraph::Box::getComponentName(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

uint64_t DSPGraph::Box::hasPresetData(DSPGraph::Box *this)
{
  return 1;
}

uint64_t DSPGraph::Box::asFreqSRCBox(DSPGraph::Box *this)
{
  return 0;
}

uint64_t DSPGraph::Box::asSRCBox(DSPGraph::Box *this)
{
  return 0;
}

uint64_t DSPGraph::Box::asBoxProxy(DSPGraph::Box *this)
{
  return 0;
}

double DSPGraph::VolumeCurveBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result = 1.29504994e171;
  *(_OWORD *)a1 = xmmword_1901C5FF0;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t DSPGraph::Box::usesFixedBlockSize(DSPGraph::Box *this)
{
  return 0;
}

void DSPGraph::VolumeCurveBox::getParameterInfo(DSPGraph::VolumeCurveBox *this@<X0>, int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  if (a2)
  {
    char v5 = 0;
    int v6 = -10866;
LABEL_6:
    *(_DWORD *)a4 = v6;
    goto LABEL_7;
  }
  DSPGraph::VolumeCurveBox::parameterInfos(this);
  if (0x4EC4EC4EC4EC4EC5 * ((qword_1E9299170 - DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos) >> 3) <= (unint64_t)a3)
  {
    char v5 = 0;
    int v6 = -10878;
    goto LABEL_6;
  }
  DSPGraph::VolumeCurveBox::parameterInfos(v8);
  uint64_t v9 = DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos + 104 * a3;
  long long v10 = *(_OWORD *)(v9 + 80);
  *(_OWORD *)(a4 + 64) = *(_OWORD *)(v9 + 64);
  *(_OWORD *)(a4 + 80) = v10;
  *(void *)(a4 + 96) = *(void *)(v9 + 96);
  long long v11 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)a4 = *(_OWORD *)v9;
  *(_OWORD *)(a4 + 16) = v11;
  long long v12 = *(_OWORD *)(v9 + 48);
  *(_OWORD *)(a4 + 32) = *(_OWORD *)(v9 + 32);
  *(_OWORD *)(a4 + 48) = v12;
  char v5 = 1;
LABEL_7:
  *(unsigned char *)(a4 + 104) = v5;
}

void sub_18FF58B60(void *a1)
{
  __cxa_begin_catch(a1);
  *(_DWORD *)uint64_t v1 = -1;
  *(unsigned char *)(v1 + 104) = 0;
  __cxa_end_catch();
  JUMPOUT(0x18FF58B54);
}

void DSPGraph::VolumeCurveBox::parameterInfos(DSPGraph::VolumeCurveBox *this)
{
  {
    if (v1)
    {
      DSPGraph::VolumeCurveBox::ParameterInfos::ParameterInfos(v1);
    }
  }
}

void sub_18FF58BE0(_Unwind_Exception *a1)
{
}

void DSPGraph::VolumeCurveBox::ParameterInfos::ParameterInfos(DSPGraph::VolumeCurveBox::ParameterInfos *this)
{
  uint64_t v158 = *MEMORY[0x1E4F143B8];
  qword_1E9299170 = 0;
  qword_1E9299178 = 0;
  DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos = 0;
  uint64_t v157 = 0;
  long long v155 = 0u;
  long long v156 = 0u;
  long long v153 = 0u;
  long long v154 = 0u;
  long long v151 = 0u;
  long long v152 = 0u;
  LODWORD(v156) = 1;
  DWORD2(v156) = 1097859072;
  strlcpy((char *)&v151, "Transfer function", 0x34uLL);
  *((void *)&v155 + 1) = @"Transfer function";
  LODWORD(v157) = v157 | 0xC8000000;
  uint64_t v1 = qword_1E9299170;
  if (qword_1E9299170 >= (unint64_t)qword_1E9299178)
  {
    CFStringRef v8 = (void *)DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos;
    uint64_t v9 = 0x4EC4EC4EC4EC4EC5
       * ((qword_1E9299170 - DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos) >> 3);
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) > 0x276276276276276) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    if (0x9D89D89D89D89D8ALL
       * ((qword_1E9299178 - DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos) >> 3) > v10)
      unint64_t v10 = 0x9D89D89D89D89D8ALL
          * ((qword_1E9299178 - DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos) >> 3);
    if ((unint64_t)(0x4EC4EC4EC4EC4EC5
                          * ((qword_1E9299178 - DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos) >> 3)) >= 0x13B13B13B13B13BLL)
      unint64_t v11 = 0x276276276276276;
    else {
      unint64_t v11 = v10;
    }
    if (v11)
    {
      unint64_t v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioUnitParameterInfo>>(v11);
      CFStringRef v8 = (void *)DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos;
      uint64_t v1 = qword_1E9299170;
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v13 = v11 + 104 * v9;
    uint64_t v14 = v11 + 104 * v12;
    long long v15 = v151;
    long long v16 = v153;
    *(_OWORD *)(v13 + 16) = v152;
    *(_OWORD *)(v13 + 32) = v16;
    *(_OWORD *)uint64_t v13 = v15;
    long long v17 = v154;
    long long v18 = v155;
    long long v19 = v156;
    *(void *)(v13 + 96) = v157;
    *(_OWORD *)(v13 + 64) = v18;
    *(_OWORD *)(v13 + 80) = v19;
    *(_OWORD *)(v13 + 48) = v17;
    uint64_t v7 = v13 + 104;
    if ((void *)v1 == v8)
    {
      uint64_t v25 = v13;
    }
    else
    {
      do
      {
        long long v20 = *(_OWORD *)(v1 - 104);
        long long v21 = *(_OWORD *)(v1 - 88);
        *(_OWORD *)(v13 - 72) = *(_OWORD *)(v1 - 72);
        *(_OWORD *)(v13 - 88) = v21;
        *(_OWORD *)(v13 - 104) = v20;
        long long v22 = *(_OWORD *)(v1 - 56);
        long long v23 = *(_OWORD *)(v1 - 40);
        long long v24 = *(_OWORD *)(v1 - 24);
        uint64_t v25 = v13 - 104;
        *(void *)(v13 - 8) = *(void *)(v1 - 8);
        *(_OWORD *)(v13 - 24) = v24;
        *(_OWORD *)(v13 - 40) = v23;
        *(_OWORD *)(v13 - 56) = v22;
        v1 -= 104;
        v13 -= 104;
      }
      while ((void *)v1 != v8);
    }
    DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos = v25;
    qword_1E9299170 = v7;
    qword_1E9299178 = v14;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    long long v2 = v151;
    long long v3 = v153;
    *(_OWORD *)(qword_1E9299170 + 16) = v152;
    *(_OWORD *)(v1 + 32) = v3;
    *(_OWORD *)uint64_t v1 = v2;
    long long v4 = v154;
    long long v5 = v155;
    long long v6 = v156;
    *(void *)(v1 + 96) = v157;
    *(_OWORD *)(v1 + 64) = v5;
    *(_OWORD *)(v1 + 80) = v6;
    *(_OWORD *)(v1 + 48) = v4;
    uint64_t v7 = v1 + 104;
  }
  qword_1E9299170 = v7;
  uint64_t v157 = 0;
  long long v155 = 0u;
  long long v153 = 0u;
  long long v154 = 0u;
  long long v151 = 0u;
  long long v152 = 0u;
  LODWORD(v156) = 13;
  *(void *)((char *)&v156 + 4) = 0x7F800000FF800000;
  HIDWORD(v156) = -1032847360;
  strlcpy((char *)&v151, "Minimum volume", 0x34uLL);
  *((void *)&v155 + 1) = @"Minimum volume";
  LODWORD(v157) = v157 | 0xC8000000;
  uint64_t v26 = qword_1E9299170;
  if (qword_1E9299170 >= (unint64_t)qword_1E9299178)
  {
    long long v33 = (void *)DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos;
    uint64_t v34 = 0x4EC4EC4EC4EC4EC5
        * ((qword_1E9299170 - DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos) >> 3);
    unint64_t v35 = v34 + 1;
    if ((unint64_t)(v34 + 1) > 0x276276276276276) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    if (0x9D89D89D89D89D8ALL
       * ((qword_1E9299178 - DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos) >> 3) > v35)
      unint64_t v35 = 0x9D89D89D89D89D8ALL
          * ((qword_1E9299178 - DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos) >> 3);
    if ((unint64_t)(0x4EC4EC4EC4EC4EC5
                          * ((qword_1E9299178 - DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos) >> 3)) >= 0x13B13B13B13B13BLL)
      unint64_t v36 = 0x276276276276276;
    else {
      unint64_t v36 = v35;
    }
    if (v36)
    {
      unint64_t v36 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioUnitParameterInfo>>(v36);
      long long v33 = (void *)DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos;
      uint64_t v26 = qword_1E9299170;
    }
    else
    {
      uint64_t v37 = 0;
    }
    uint64_t v38 = v36 + 104 * v34;
    uint64_t v39 = v36 + 104 * v37;
    long long v40 = v151;
    long long v41 = v153;
    *(_OWORD *)(v38 + 16) = v152;
    *(_OWORD *)(v38 + 32) = v41;
    *(_OWORD *)uint64_t v38 = v40;
    long long v42 = v154;
    long long v43 = v155;
    long long v44 = v156;
    *(void *)(v38 + 96) = v157;
    *(_OWORD *)(v38 + 64) = v43;
    *(_OWORD *)(v38 + 80) = v44;
    *(_OWORD *)(v38 + 48) = v42;
    uint64_t v32 = v38 + 104;
    if ((void *)v26 == v33)
    {
      uint64_t v50 = v38;
    }
    else
    {
      do
      {
        long long v45 = *(_OWORD *)(v26 - 104);
        long long v46 = *(_OWORD *)(v26 - 88);
        *(_OWORD *)(v38 - 72) = *(_OWORD *)(v26 - 72);
        *(_OWORD *)(v38 - 88) = v46;
        *(_OWORD *)(v38 - 104) = v45;
        long long v47 = *(_OWORD *)(v26 - 56);
        long long v48 = *(_OWORD *)(v26 - 40);
        long long v49 = *(_OWORD *)(v26 - 24);
        uint64_t v50 = v38 - 104;
        *(void *)(v38 - 8) = *(void *)(v26 - 8);
        *(_OWORD *)(v38 - 24) = v49;
        *(_OWORD *)(v38 - 40) = v48;
        *(_OWORD *)(v38 - 56) = v47;
        v26 -= 104;
        v38 -= 104;
      }
      while ((void *)v26 != v33);
    }
    DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos = v50;
    qword_1E9299170 = v32;
    qword_1E9299178 = v39;
    if (v33) {
      operator delete(v33);
    }
  }
  else
  {
    long long v27 = v151;
    long long v28 = v153;
    *(_OWORD *)(qword_1E9299170 + 16) = v152;
    *(_OWORD *)(v26 + 32) = v28;
    *(_OWORD *)uint64_t v26 = v27;
    long long v29 = v154;
    long long v30 = v155;
    long long v31 = v156;
    *(void *)(v26 + 96) = v157;
    *(_OWORD *)(v26 + 64) = v30;
    *(_OWORD *)(v26 + 80) = v31;
    *(_OWORD *)(v26 + 48) = v29;
    uint64_t v32 = v26 + 104;
  }
  qword_1E9299170 = v32;
  uint64_t v157 = 0;
  long long v155 = 0u;
  HIDWORD(v156) = 0;
  long long v153 = 0u;
  long long v154 = 0u;
  long long v151 = 0u;
  long long v152 = 0u;
  LODWORD(v156) = 13;
  *(void *)((char *)&v156 + 4) = 0x7F800000FF800000;
  strlcpy((char *)&v151, "Maximum volume", 0x34uLL);
  *((void *)&v155 + 1) = @"Maximum volume";
  LODWORD(v157) = v157 | 0xC8000000;
  uint64_t v51 = qword_1E9299170;
  if (qword_1E9299170 >= (unint64_t)qword_1E9299178)
  {
    unint64_t v58 = (void *)DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos;
    uint64_t v59 = 0x4EC4EC4EC4EC4EC5
        * ((qword_1E9299170 - DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos) >> 3);
    unint64_t v60 = v59 + 1;
    if ((unint64_t)(v59 + 1) > 0x276276276276276) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    if (0x9D89D89D89D89D8ALL
       * ((qword_1E9299178 - DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos) >> 3) > v60)
      unint64_t v60 = 0x9D89D89D89D89D8ALL
          * ((qword_1E9299178 - DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos) >> 3);
    if ((unint64_t)(0x4EC4EC4EC4EC4EC5
                          * ((qword_1E9299178 - DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos) >> 3)) >= 0x13B13B13B13B13BLL)
      unint64_t v61 = 0x276276276276276;
    else {
      unint64_t v61 = v60;
    }
    if (v61)
    {
      unint64_t v61 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioUnitParameterInfo>>(v61);
      unint64_t v58 = (void *)DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos;
      uint64_t v51 = qword_1E9299170;
    }
    else
    {
      uint64_t v62 = 0;
    }
    uint64_t v63 = v61 + 104 * v59;
    uint64_t v64 = v61 + 104 * v62;
    long long v65 = v151;
    long long v66 = v153;
    *(_OWORD *)(v63 + 16) = v152;
    *(_OWORD *)(v63 + 32) = v66;
    *(_OWORD *)uint64_t v63 = v65;
    long long v67 = v154;
    long long v68 = v155;
    long long v69 = v156;
    *(void *)(v63 + 96) = v157;
    *(_OWORD *)(v63 + 64) = v68;
    *(_OWORD *)(v63 + 80) = v69;
    *(_OWORD *)(v63 + 48) = v67;
    uint64_t v57 = v63 + 104;
    if ((void *)v51 == v58)
    {
      uint64_t v75 = v63;
    }
    else
    {
      do
      {
        long long v70 = *(_OWORD *)(v51 - 104);
        long long v71 = *(_OWORD *)(v51 - 88);
        *(_OWORD *)(v63 - 72) = *(_OWORD *)(v51 - 72);
        *(_OWORD *)(v63 - 88) = v71;
        *(_OWORD *)(v63 - 104) = v70;
        long long v72 = *(_OWORD *)(v51 - 56);
        long long v73 = *(_OWORD *)(v51 - 40);
        long long v74 = *(_OWORD *)(v51 - 24);
        uint64_t v75 = v63 - 104;
        *(void *)(v63 - 8) = *(void *)(v51 - 8);
        *(_OWORD *)(v63 - 24) = v74;
        *(_OWORD *)(v63 - 40) = v73;
        *(_OWORD *)(v63 - 56) = v72;
        v51 -= 104;
        v63 -= 104;
      }
      while ((void *)v51 != v58);
    }
    DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos = v75;
    qword_1E9299170 = v57;
    qword_1E9299178 = v64;
    if (v58) {
      operator delete(v58);
    }
  }
  else
  {
    long long v52 = v151;
    long long v53 = v153;
    *(_OWORD *)(qword_1E9299170 + 16) = v152;
    *(_OWORD *)(v51 + 32) = v53;
    *(_OWORD *)uint64_t v51 = v52;
    long long v54 = v154;
    long long v55 = v155;
    long long v56 = v156;
    *(void *)(v51 + 96) = v157;
    *(_OWORD *)(v51 + 64) = v55;
    *(_OWORD *)(v51 + 80) = v56;
    *(_OWORD *)(v51 + 48) = v54;
    uint64_t v57 = v51 + 104;
  }
  qword_1E9299170 = v57;
  uint64_t v157 = 0;
  long long v155 = 0u;
  *(void *)&long long v156 = 0;
  long long v153 = 0u;
  long long v154 = 0u;
  long long v151 = 0u;
  long long v152 = 0u;
  *((void *)&v156 + 1) = 0x3E8000003F800000;
  strlcpy((char *)&v151, "Raw slider value", 0x34uLL);
  *((void *)&v155 + 1) = @"Raw slider value";
  LODWORD(v157) = v157 | 0xC8000000;
  uint64_t v76 = qword_1E9299170;
  if (qword_1E9299170 >= (unint64_t)qword_1E9299178)
  {
    int v83 = (void *)DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos;
    uint64_t v84 = 0x4EC4EC4EC4EC4EC5
        * ((qword_1E9299170 - DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos) >> 3);
    unint64_t v85 = v84 + 1;
    if ((unint64_t)(v84 + 1) > 0x276276276276276) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    if (0x9D89D89D89D89D8ALL
       * ((qword_1E9299178 - DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos) >> 3) > v85)
      unint64_t v85 = 0x9D89D89D89D89D8ALL
          * ((qword_1E9299178 - DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos) >> 3);
    if ((unint64_t)(0x4EC4EC4EC4EC4EC5
                          * ((qword_1E9299178 - DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos) >> 3)) >= 0x13B13B13B13B13BLL)
      unint64_t v86 = 0x276276276276276;
    else {
      unint64_t v86 = v85;
    }
    if (v86)
    {
      unint64_t v86 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioUnitParameterInfo>>(v86);
      int v83 = (void *)DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos;
      uint64_t v76 = qword_1E9299170;
    }
    else
    {
      uint64_t v87 = 0;
    }
    uint64_t v88 = v86 + 104 * v84;
    uint64_t v89 = v86 + 104 * v87;
    long long v90 = v151;
    long long v91 = v153;
    *(_OWORD *)(v88 + 16) = v152;
    *(_OWORD *)(v88 + 32) = v91;
    *(_OWORD *)uint64_t v88 = v90;
    long long v92 = v154;
    long long v93 = v155;
    long long v94 = v156;
    *(void *)(v88 + 96) = v157;
    *(_OWORD *)(v88 + 64) = v93;
    *(_OWORD *)(v88 + 80) = v94;
    *(_OWORD *)(v88 + 48) = v92;
    uint64_t v82 = v88 + 104;
    if ((void *)v76 == v83)
    {
      uint64_t v100 = v88;
    }
    else
    {
      do
      {
        long long v95 = *(_OWORD *)(v76 - 104);
        long long v96 = *(_OWORD *)(v76 - 88);
        *(_OWORD *)(v88 - 72) = *(_OWORD *)(v76 - 72);
        *(_OWORD *)(v88 - 88) = v96;
        *(_OWORD *)(v88 - 104) = v95;
        long long v97 = *(_OWORD *)(v76 - 56);
        long long v98 = *(_OWORD *)(v76 - 40);
        long long v99 = *(_OWORD *)(v76 - 24);
        uint64_t v100 = v88 - 104;
        *(void *)(v88 - 8) = *(void *)(v76 - 8);
        *(_OWORD *)(v88 - 24) = v99;
        *(_OWORD *)(v88 - 40) = v98;
        *(_OWORD *)(v88 - 56) = v97;
        v76 -= 104;
        v88 -= 104;
      }
      while ((void *)v76 != v83);
    }
    DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos = v100;
    qword_1E9299170 = v82;
    qword_1E9299178 = v89;
    if (v83) {
      operator delete(v83);
    }
  }
  else
  {
    long long v77 = v151;
    long long v78 = v153;
    *(_OWORD *)(qword_1E9299170 + 16) = v152;
    *(_OWORD *)(v76 + 32) = v78;
    *(_OWORD *)uint64_t v76 = v77;
    long long v79 = v154;
    long long v80 = v155;
    long long v81 = v156;
    *(void *)(v76 + 96) = v157;
    *(_OWORD *)(v76 + 64) = v80;
    *(_OWORD *)(v76 + 80) = v81;
    *(_OWORD *)(v76 + 48) = v79;
    uint64_t v82 = v76 + 104;
  }
  qword_1E9299170 = v82;
  uint64_t v157 = 0;
  long long v155 = 0u;
  *(void *)&long long v156 = 0;
  long long v153 = 0u;
  long long v154 = 0u;
  long long v151 = 0u;
  long long v152 = 0u;
  *((void *)&v156 + 1) = 0x3E8000003F800000;
  strlcpy((char *)&v151, "Mapped slider value", 0x34uLL);
  *((void *)&v155 + 1) = @"Mapped slider value";
  LODWORD(v157) = v157 | 0x48000000;
  uint64_t v101 = qword_1E9299170;
  if (qword_1E9299170 >= (unint64_t)qword_1E9299178)
  {
    uint64_t v108 = (void *)DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos;
    uint64_t v109 = 0x4EC4EC4EC4EC4EC5
         * ((qword_1E9299170 - DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos) >> 3);
    unint64_t v110 = v109 + 1;
    if ((unint64_t)(v109 + 1) > 0x276276276276276) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    if (0x9D89D89D89D89D8ALL
       * ((qword_1E9299178 - DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos) >> 3) > v110)
      unint64_t v110 = 0x9D89D89D89D89D8ALL
           * ((qword_1E9299178 - DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos) >> 3);
    if ((unint64_t)(0x4EC4EC4EC4EC4EC5
                          * ((qword_1E9299178 - DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos) >> 3)) >= 0x13B13B13B13B13BLL)
      unint64_t v111 = 0x276276276276276;
    else {
      unint64_t v111 = v110;
    }
    if (v111)
    {
      unint64_t v111 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioUnitParameterInfo>>(v111);
      uint64_t v108 = (void *)DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos;
      uint64_t v101 = qword_1E9299170;
    }
    else
    {
      uint64_t v112 = 0;
    }
    uint64_t v113 = v111 + 104 * v109;
    uint64_t v114 = v111 + 104 * v112;
    long long v115 = v151;
    long long v116 = v153;
    *(_OWORD *)(v113 + 16) = v152;
    *(_OWORD *)(v113 + 32) = v116;
    *(_OWORD *)uint64_t v113 = v115;
    long long v117 = v154;
    long long v118 = v155;
    long long v119 = v156;
    *(void *)(v113 + 96) = v157;
    *(_OWORD *)(v113 + 64) = v118;
    *(_OWORD *)(v113 + 80) = v119;
    *(_OWORD *)(v113 + 48) = v117;
    uint64_t v107 = v113 + 104;
    if ((void *)v101 == v108)
    {
      uint64_t v125 = v113;
    }
    else
    {
      do
      {
        long long v120 = *(_OWORD *)(v101 - 104);
        long long v121 = *(_OWORD *)(v101 - 88);
        *(_OWORD *)(v113 - 72) = *(_OWORD *)(v101 - 72);
        *(_OWORD *)(v113 - 88) = v121;
        *(_OWORD *)(v113 - 104) = v120;
        long long v122 = *(_OWORD *)(v101 - 56);
        long long v123 = *(_OWORD *)(v101 - 40);
        long long v124 = *(_OWORD *)(v101 - 24);
        uint64_t v125 = v113 - 104;
        *(void *)(v113 - 8) = *(void *)(v101 - 8);
        *(_OWORD *)(v113 - 24) = v124;
        *(_OWORD *)(v113 - 40) = v123;
        *(_OWORD *)(v113 - 56) = v122;
        v101 -= 104;
        v113 -= 104;
      }
      while ((void *)v101 != v108);
    }
    DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos = v125;
    qword_1E9299170 = v107;
    qword_1E9299178 = v114;
    if (v108) {
      operator delete(v108);
    }
  }
  else
  {
    long long v102 = v151;
    long long v103 = v153;
    *(_OWORD *)(qword_1E9299170 + 16) = v152;
    *(_OWORD *)(v101 + 32) = v103;
    *(_OWORD *)uint64_t v101 = v102;
    long long v104 = v154;
    long long v105 = v155;
    long long v106 = v156;
    *(void *)(v101 + 96) = v157;
    *(_OWORD *)(v101 + 64) = v105;
    *(_OWORD *)(v101 + 80) = v106;
    *(_OWORD *)(v101 + 48) = v104;
    uint64_t v107 = v101 + 104;
  }
  qword_1E9299170 = v107;
  uint64_t v157 = 0;
  long long v155 = 0u;
  long long v153 = 0u;
  long long v154 = 0u;
  long long v151 = 0u;
  long long v152 = 0u;
  LODWORD(v156) = 13;
  *(void *)((char *)&v156 + 4) = 0x7F800000FF800000;
  HIDWORD(v156) = -1036779520;
  strlcpy((char *)&v151, "Decibel gain", 0x34uLL);
  *((void *)&v155 + 1) = @"Decibel gain";
  LODWORD(v157) = v157 | 0x48000000;
  uint64_t v126 = qword_1E9299170;
  if (qword_1E9299170 >= (unint64_t)qword_1E9299178)
  {
    v133 = (void *)DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos;
    uint64_t v134 = 0x4EC4EC4EC4EC4EC5
         * ((qword_1E9299170 - DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos) >> 3);
    unint64_t v135 = v134 + 1;
    if ((unint64_t)(v134 + 1) > 0x276276276276276) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    if (0x9D89D89D89D89D8ALL
       * ((qword_1E9299178 - DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos) >> 3) > v135)
      unint64_t v135 = 0x9D89D89D89D89D8ALL
           * ((qword_1E9299178 - DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos) >> 3);
    if ((unint64_t)(0x4EC4EC4EC4EC4EC5
                          * ((qword_1E9299178 - DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos) >> 3)) >= 0x13B13B13B13B13BLL)
      unint64_t v136 = 0x276276276276276;
    else {
      unint64_t v136 = v135;
    }
    if (v136)
    {
      unint64_t v136 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioUnitParameterInfo>>(v136);
      v133 = (void *)DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos;
      uint64_t v126 = qword_1E9299170;
    }
    else
    {
      uint64_t v137 = 0;
    }
    uint64_t v138 = v136 + 104 * v134;
    uint64_t v139 = v136 + 104 * v137;
    long long v140 = v151;
    long long v141 = v153;
    *(_OWORD *)(v138 + 16) = v152;
    *(_OWORD *)(v138 + 32) = v141;
    *(_OWORD *)uint64_t v138 = v140;
    long long v142 = v154;
    long long v143 = v155;
    long long v144 = v156;
    *(void *)(v138 + 96) = v157;
    *(_OWORD *)(v138 + 64) = v143;
    *(_OWORD *)(v138 + 80) = v144;
    *(_OWORD *)(v138 + 48) = v142;
    uint64_t v132 = v138 + 104;
    if ((void *)v126 == v133)
    {
      uint64_t v150 = v138;
    }
    else
    {
      do
      {
        long long v145 = *(_OWORD *)(v126 - 104);
        long long v146 = *(_OWORD *)(v126 - 88);
        *(_OWORD *)(v138 - 72) = *(_OWORD *)(v126 - 72);
        *(_OWORD *)(v138 - 88) = v146;
        *(_OWORD *)(v138 - 104) = v145;
        long long v147 = *(_OWORD *)(v126 - 56);
        long long v148 = *(_OWORD *)(v126 - 40);
        long long v149 = *(_OWORD *)(v126 - 24);
        uint64_t v150 = v138 - 104;
        *(void *)(v138 - 8) = *(void *)(v126 - 8);
        *(_OWORD *)(v138 - 24) = v149;
        *(_OWORD *)(v138 - 40) = v148;
        *(_OWORD *)(v138 - 56) = v147;
        v126 -= 104;
        v138 -= 104;
      }
      while ((void *)v126 != v133);
    }
    DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos = v150;
    qword_1E9299170 = v132;
    qword_1E9299178 = v139;
    if (v133) {
      operator delete(v133);
    }
  }
  else
  {
    long long v127 = v151;
    long long v128 = v153;
    *(_OWORD *)(qword_1E9299170 + 16) = v152;
    *(_OWORD *)(v126 + 32) = v128;
    *(_OWORD *)uint64_t v126 = v127;
    long long v129 = v154;
    long long v130 = v155;
    long long v131 = v156;
    *(void *)(v126 + 96) = v157;
    *(_OWORD *)(v126 + 64) = v130;
    *(_OWORD *)(v126 + 80) = v131;
    *(_OWORD *)(v126 + 48) = v129;
    uint64_t v132 = v126 + 104;
  }
  qword_1E9299170 = v132;
}

void sub_18FF596B4(_Unwind_Exception *exception_object)
{
  if (DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos)
  {
    qword_1E9299170 = DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos;
    operator delete((void *)DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<AudioUnitParameterInfo>>(unint64_t a1)
{
  if (a1 >= 0x276276276276277) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(104 * a1);
}

std::vector<unsigned int> *DSPGraph::VolumeCurveBox::getParameterList@<X0>(std::vector<unsigned int> *this@<X0>, int a2@<W1>, std::vector<unsigned int> *a3@<X8>)
{
  if (a2)
  {
    a3->__begin_ = 0;
    a3->__end_ = 0;
    a3->__end_cap_.__value_ = 0;
  }
  else
  {
    DSPGraph::VolumeCurveBox::parameterInfos((DSPGraph::VolumeCurveBox *)this);
    this = std::vector<unsigned int>::vector(a3, 0x4EC4EC4EC4EC4EC5* ((qword_1E9299170 - DSPGraph::VolumeCurveBox::parameterInfos(void)::sParameterInfos) >> 3));
    std::vector<unsigned int>::pointer begin = a3->__begin_;
    std::vector<unsigned int>::pointer end = a3->__end_;
    if (a3->__begin_ != end)
    {
      unsigned int v6 = 0;
      do
        *begin++ = v6++;
      while (begin != end);
    }
  }
  return this;
}

std::vector<unsigned int> *__cdecl std::vector<unsigned int>::vector(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<float>::__vallocate[abi:ne180100](this, __n);
    std::vector<unsigned int>::pointer end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_18FF59818(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

float DSPGraph::VolumeCurveBox::getParameter(DSPGraph::VolumeCurveBox *this, int a2, int a3)
{
  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v6, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_VolumeCurveBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v5, "getParameter");
    std::string::basic_string[abi:ne180100]<0>(&v4, "");
    DSPGraph::ThrowException(-10878, &v6, 257, &v5, &v4);
  }
  switch(a2)
  {
    case 0:
      float result = (float)*((unsigned int *)this + 193);
      break;
    case 1:
      float result = *((float *)this + 196);
      break;
    case 2:
      float result = *((float *)this + 197);
      break;
    case 3:
      float result = *((float *)this + 198);
      break;
    case 4:
      float result = *((float *)this + 199);
      break;
    case 5:
      float result = *((float *)this + 200);
      break;
    default:
      std::string::basic_string[abi:ne180100]<0>(&v6, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_VolumeCurveBox.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v5, "getParameter");
      std::string::basic_string[abi:ne180100]<0>(&v4, "");
      DSPGraph::ThrowException(-10878, &v6, 283, &v5, &v4);
  }
  return result;
}

void sub_18FF59950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

void DSPGraph::VolumeCurveBox::setParameter(DSPGraph::VolumeCurveBox *this, int a2, int a3, float a4)
{
  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v21, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_VolumeCurveBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v20, "setParameter");
    std::string::basic_string[abi:ne180100]<0>(&v19, "");
    DSPGraph::ThrowException(-10878, &v21, 208, &v20, &v19);
  }
  switch(a2)
  {
    case 0:
      unsigned int v6 = a4;
      *((_DWORD *)this + 193) = a4;
      float v7 = 1.0;
      float v8 = 2.0;
      float v9 = 1.0;
      if (v6 <= 0xF)
      {
        float v8 = flt_1901C6984[v6];
        float v9 = flt_1901C69C4[v6];
      }
      *((float *)this + 194) = v8;
      *((float *)this + 195) = v9;
      float v10 = *((float *)this + 198);
      if (v10 < 0.0) {
        float v10 = 0.0;
      }
      if (v10 <= 1.0) {
        float v7 = v10;
      }
      goto LABEL_21;
    case 1:
      float v16 = *((float *)this + 197);
      if (v16 < a4)
      {
        std::string::basic_string[abi:ne180100]<0>(&v21, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_VolumeCurveBox.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v20, "setParameter");
        std::string::basic_string[abi:ne180100]<0>(&v19, "MinVolume must be less than MaxVolume");
        DSPGraph::ThrowException(-10878, &v21, 222, &v20, &v19);
      }
      *((float *)this + 196) = a4;
      float v17 = *((float *)this + 198);
      if (v17 < 0.0) {
        float v17 = 0.0;
      }
      if (v17 > 1.0) {
        float v17 = 1.0;
      }
      float v18 = powf(v17, *((float *)this + 194) / *((float *)this + 195));
      *((float *)this + 199) = v18;
      float v14 = a4 + (float)(v18 * (float)(v16 - a4));
      goto LABEL_28;
    case 2:
      float v11 = *((float *)this + 196);
      if (v11 > a4)
      {
        std::string::basic_string[abi:ne180100]<0>(&v21, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_VolumeCurveBox.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v20, "setParameter");
        std::string::basic_string[abi:ne180100]<0>(&v19, "MaxVolume must be greater than MinVolume");
        DSPGraph::ThrowException(-10878, &v21, 231, &v20, &v19);
      }
      *((float *)this + 197) = a4;
      float v12 = *((float *)this + 198);
      if (v12 < 0.0) {
        float v12 = 0.0;
      }
      if (v12 > 1.0) {
        float v12 = 1.0;
      }
      float v13 = powf(v12, *((float *)this + 194) / *((float *)this + 195));
      *((float *)this + 199) = v13;
      float v14 = v11 + (float)(v13 * (float)(a4 - v11));
      goto LABEL_28;
    case 3:
      float v7 = 0.0;
      if (a4 >= 0.0) {
        float v7 = a4;
      }
      if (v7 > 1.0) {
        float v7 = 1.0;
      }
      *((float *)this + 198) = v7;
      float v8 = *((float *)this + 194);
      float v9 = *((float *)this + 195);
LABEL_21:
      float v15 = powf(v7, v8 / v9);
      *((float *)this + 199) = v15;
      float v14 = *((float *)this + 196) + (float)(v15 * (float)(*((float *)this + 197) - *((float *)this + 196)));
LABEL_28:
      *((float *)this + 200) = v14;
      return;
    default:
      std::string::basic_string[abi:ne180100]<0>(&v21, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_VolumeCurveBox.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v20, "setParameter");
      std::string::basic_string[abi:ne180100]<0>(&v19, "");
      DSPGraph::ThrowException(-10878, &v21, 246, &v20, &v19);
  }
}

void sub_18FF59C88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::VolumeCurveBox::canProcessInPlace(DSPGraph::VolumeCurveBox *this)
{
  return 1;
}

uint64_t DSPGraph::Box::isBypassed(DSPGraph::Box *this)
{
  return 0;
}

uint64_t DSPGraph::Box::canBypass(DSPGraph::Box *this)
{
  return 0;
}

const char *DSPGraph::VolumeCurveBox::ClassName(DSPGraph::VolumeCurveBox *this)
{
  return "VolumeCurveBox";
}

void DSPGraph::VolumeCurveBox::~VolumeCurveBox(DSPGraph::VolumeCurveBox *this)
{
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x192FC8940);
}

uint64_t DSPGraph::streamToString@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v6);
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v4 + 48))(v4, &v6);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a2, (uint64_t)v7);
  uint64_t v6 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v7[-1] + *(void *)(v6 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v7[0] = MEMORY[0x1E4FBA470] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x192FC8840](&v9);
}

void sub_18FF59EC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t DSPGraph::MakeFloatNoninterleavedFormat@<X0>(uint64_t this@<X0>, double a2@<D0>, unsigned int a3@<W1>, uint64_t a4@<X8>)
{
  *(_DWORD *)(a4 + 16) = a3 >> 3;
  *(_DWORD *)(a4 + 20) = 1;
  *(double *)a4 = a2;
  *(void *)(a4 + 8) = 0x296C70636DLL;
  *(_DWORD *)(a4 + 24) = a3 >> 3;
  *(_DWORD *)(a4 + 28) = this;
  *(_DWORD *)(a4 + 32) = a3;
  *(_DWORD *)(a4 + 36) = 0;
  return this;
}

uint64_t DSPGraph::MakeFloatInterleavedFormat@<X0>(uint64_t this@<X0>, double a2@<D0>, int a3@<W1>, uint64_t a4@<X8>)
{
  unsigned int v4 = (a3 * this) >> 3;
  *(_DWORD *)(a4 + 16) = v4;
  *(_DWORD *)(a4 + 20) = 1;
  *(double *)a4 = a2;
  *(void *)(a4 + 8) = 0x96C70636DLL;
  *(_DWORD *)(a4 + 24) = v4;
  *(_DWORD *)(a4 + 28) = this;
  *(_DWORD *)(a4 + 32) = a3;
  *(_DWORD *)(a4 + 36) = 0;
  return this;
}

uint64_t DSPGraph::MakeCBRFormat@<X0>(uint64_t this@<X0>, double a2@<D0>, int a3@<W1>, int a4@<W2>, int a5@<W3>, int a6@<W4>, uint64_t a7@<X8>)
{
  *(double *)a7 = a2;
  *(_DWORD *)(a7 + 8) = this;
  *(_DWORD *)(a7 + 12) = a6;
  *(_DWORD *)(a7 + 16) = a5;
  *(_DWORD *)(a7 + 20) = a4;
  *(_DWORD *)(a7 + 24) = 0;
  *(_DWORD *)(a7 + 28) = a3;
  *(void *)(a7 + 32) = 0;
  return this;
}

void DSPGraph::printi(void *a1, unsigned int a2, char *__s)
{
  unsigned int v4 = a2;
  if (a2 >= 0x40)
  {
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"                                                                ", 64);
      v4 -= 64;
    }
    while (v4 > 0x3F);
  }
  if (v4)
  {
    uint64_t v6 = &asc_19020F491[-v4 + 64];
    size_t v7 = strlen(v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v6, v7);
  }
  strlen(__s);
  operator new[]();
}

void sub_18FF5A0A4(_Unwind_Exception *a1)
{
  MEMORY[0x192FC8910](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

DSPGraph *DSPGraph::OSTypeToStr(DSPGraph *this, char *a2, unsigned int a3)
{
  if (a2)
  {
    unsigned int v4 = &a2[(void)this];
    unsigned int v14 = bswap32(a3);
    if ((uint64_t)a2 <= 0)
    {
      float v12 = v4 - 1;
    }
    else
    {
      unint64_t v5 = 0;
      uint64_t v6 = MEMORY[0x1E4F14390];
      size_t v7 = (char *)this;
      do
      {
        unsigned int v8 = *((char *)&v14 + v5);
        if ((v8 & 0x80000000) != 0) {
          int v9 = __maskrune(*((char *)&v14 + v5), 0x40000uLL);
        }
        else {
          int v9 = *(_DWORD *)(v6 + 4 * v8 + 60) & 0x40000;
        }
        if (v8 == 92 || v9 == 0)
        {
          int v11 = snprintf(v7, v4 - v7, "\\x%02x", v8);
          v7 += v11 & ~(v11 >> 31);
        }
        else
        {
          *v7++ = v8;
        }
        if (v5 > 2) {
          break;
        }
        ++v5;
      }
      while (v7 < v4);
      if (v7 >= v4) {
        float v12 = v4 - 1;
      }
      else {
        float v12 = v7;
      }
    }
    char *v12 = 0;
  }
  return this;
}

uint64_t DSPGraph::StrToOSType(DSPGraph *this, char *a2, unsigned int *a3)
{
  uint64_t v4 = 0;
  unsigned int v16 = 0;
  uint64_t v5 = MEMORY[0x1E4F14390];
  uint64_t v6 = this;
  while (1)
  {
    int v7 = *(unsigned __int8 *)v6;
    if (v7 == 92) {
      break;
    }
    if (!*(unsigned char *)v6)
    {
      unsigned int v8 = v6;
LABEL_18:
      *(_DWORD *)a2 = bswap32(v16);
      return v8 - this;
    }
    unsigned int v8 = (DSPGraph *)((char *)v6 + 1);
LABEL_14:
    *((unsigned char *)&v16 + v4++) = v7;
    uint64_t v6 = v8;
    if (v4 == 4) {
      goto LABEL_18;
    }
  }
  if (*((unsigned char *)v6 + 1) == 120 && strlen((const char *)v6 + 2) >= 2)
  {
    char v9 = 0;
    unsigned int v8 = (DSPGraph *)((char *)v6 + 4);
    uint64_t v10 = 2;
    while (1)
    {
      char v11 = v9;
      __darwin_ct_rune_t v12 = __tolower(*((char *)v6 + v10));
      if (v12 << 24 < 0
        || (*(_DWORD *)(v5 + 4 * v12 + 60) & 0x400) == 0
        && ((v12 << 24) - 1610612737) >= 0x6FFFFFF)
      {
        break;
      }
      char v9 = 1;
      uint64_t v10 = 3;
      if (v11)
      {
        unsigned int v15 = 0;
        if (sscanf((const char *)v6 + 2, "%02X", &v15) != 1) {
          return 0;
        }
        LOBYTE(v7) = v15;
        if (v15 >= 0x100) {
          return 0;
        }
        goto LABEL_14;
      }
    }
  }
  return 0;
}

void *DSPGraph::print4cc(void *a1, unsigned int a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  *(void *)__s = 0;
  uint64_t v6 = 0;
  DSPGraph::OSTypeToStr((DSPGraph *)__s, (char *)0x10, a2);
  size_t v3 = strlen(__s);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v3);
}

void *DSPGraph::printACD(void *a1, unsigned int *a2, int a3)
{
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" (", 2);
  DSPGraph::print4cc(v6, *a2);
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  DSPGraph::print4cc(v7, a2[1]);
  unsigned int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  DSPGraph::print4cc(v8, a2[2]);
  float result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)") ", 3);
  if (a3)
  {
    char v10 = 10;
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&v10, 1);
  }
  return result;
}

const char *DSPGraph::errstring(DSPGraph *this)
{
  if ((int)this <= 1718775072)
  {
    if ((int)this > 1667788320)
    {
      if ((int)this <= 1718188064)
      {
        if (this == 1667788321) {
          return "channel counts error";
        }
        if (this == 1701602593) {
          return "element count error";
        }
      }
      else
      {
        switch(this)
        {
          case 0x66697821:
            return "requires fixed block size";
          case 0x666D6321:
            return "format conflict";
          case 0x666D743F:
            return "format not supported";
        }
      }
    }
    else if ((int)this <= 1633906208)
    {
      if (this == 561211770) {
        return "wrong property size";
      }
      if (this == 1633903905) {
        return "already connected";
      }
    }
    else
    {
      switch(this)
      {
        case 0x61636E21:
          return "AudioComponent not found";
        case 0x616E7321:
          return "AudioUnit not supported";
        case 0x63666721:
          return "configured state error";
      }
    }
  }
  else if ((int)this <= 1869640254)
  {
    if ((int)this <= 1768975392)
    {
      if (this == 1718775073) {
        return "frame count error";
      }
      if (this == 1768843553) {
        return "initialized state error";
      }
    }
    else
    {
      switch(this)
      {
        case 0x69706C21:
          return "cannot process in place";
        case 0x6D706C21:
          return "must process in place";
        case 0x6E666421:
          return "not found";
      }
    }
  }
  else if ((int)this > 1953460256)
  {
    switch(this)
    {
      case 0x746F7021:
        return "illegal topology";
      case 0x75637021:
        return "unconnected property";
      case 0x756E6321:
        return "unconnected port";
    }
  }
  else
  {
    switch(this)
    {
      case 0x6F70723F:
        return "operation not supported";
      case 0x70727321:
        return "parse failed";
      case 0x726E6721:
        return "range error";
    }
  }
  return "";
}

double DSPGraph::decompileFormat@<D0>(DSPGraph *this@<X0>, const AudioStreamBasicDescription *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v3 = a2;
  v40[2] = *MEMORY[0x1E4F143B8];
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  int v6 = *((_DWORD *)this + 2);
  if (v6 == 1819304813)
  {
    if ((~*((_DWORD *)this + 3) & 0x21) == 0 && *((_DWORD *)this + 8) == 32)
    {
      std::to_string(&v37, (int)*(double *)this);
      long long v22 = std::string::insert(&v37, 0, "(", 1uLL);
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v38.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      long long v24 = std::string::append(&v38, " ", 1uLL);
      long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v39.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&__p, *((_DWORD *)this + 7));
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      long long v28 = std::string::append(&v39, (const std::string::value_type *)p_p, size);
      std::string::size_type v29 = v28->__r_.__value_.__r.__words[0];
      v40[0] = v28->__r_.__value_.__l.__size_;
      *(void *)((char *)v40 + 7) = *(std::string::size_type *)((char *)&v28->__r_.__value_.__r.__words[1] + 7);
      char v30 = HIBYTE(v28->__r_.__value_.__r.__words[2]);
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      if (*(char *)(a3 + 23) < 0) {
        operator delete(*(void **)a3);
      }
      uint64_t v31 = v40[0];
      *(void *)a3 = v29;
      *(void *)(a3 + 8) = v31;
      *(void *)(a3 + 15) = *(void *)((char *)v40 + 7);
      *(unsigned char *)(a3 + 23) = v30;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v39.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v38.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v37.__r_.__value_.__l.__data_);
      }
      if (v3 >= 2)
      {
        std::to_string(&v38, v3);
        uint64_t v32 = std::string::insert(&v38, 0, " ", 1uLL);
        long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        v39.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v34 = &v39;
        }
        else {
          uint64_t v34 = (std::string *)v39.__r_.__value_.__r.__words[0];
        }
        if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v35 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v35 = v39.__r_.__value_.__l.__size_;
        }
        std::string::append((std::string *)a3, (const std::string::value_type *)v34, v35);
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v39.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v38.__r_.__value_.__l.__data_);
        }
      }
      goto LABEL_29;
    }
  }
  else if (v6 == 1718773105)
  {
    std::to_string(&v37, (int)*(double *)this);
    uint64_t v7 = std::string::insert(&v37, 0, "(freq ", 6uLL);
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    char v9 = std::string::append(&v38, " ", 1uLL);
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, *((_DWORD *)this + 7));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v11 = &__p;
    }
    else {
      char v11 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v12 = __p.__r_.__value_.__l.__size_;
    }
    float v13 = std::string::append(&v39, (const std::string::value_type *)v11, v12);
    std::string::size_type v14 = v13->__r_.__value_.__r.__words[0];
    v40[0] = v13->__r_.__value_.__l.__size_;
    *(void *)((char *)v40 + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    char v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(a3 + 23) < 0) {
      operator delete(*(void **)a3);
    }
    uint64_t v16 = v40[0];
    *(void *)a3 = v14;
    *(void *)(a3 + 8) = v16;
    *(void *)(a3 + 15) = *(void *)((char *)v40 + 7);
    *(unsigned char *)(a3 + 23) = v15;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    std::to_string(&v38, v3);
    float v17 = std::string::insert(&v38, 0, " ", 1uLL);
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v19 = &v39;
    }
    else {
      long long v19 = (std::string *)v39.__r_.__value_.__r.__words[0];
    }
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v20 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v20 = v39.__r_.__value_.__l.__size_;
    }
    std::string::append((std::string *)a3, (const std::string::value_type *)v19, v20);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
LABEL_29:
    std::string::append((std::string *)a3, ")", 1uLL);
    return result;
  }
  DSPGraph::ToText(this, &v39);
  if (*(char *)(a3 + 23) < 0) {
    operator delete(*(void **)a3);
  }
  double result = *(double *)&v39.__r_.__value_.__l.__data_;
  *(std::string *)a3 = v39;
  return result;
}

void sub_18FF5AB68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (*(char *)(v33 + 23) < 0) {
    operator delete(*(void **)v33);
  }
  _Unwind_Resume(exception_object);
}

void DSPGraph::ToText(DSPGraph *this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  int v5 = *((_DWORD *)this + 2);
  if (v5 != 1819304813)
  {
    int v12 = 24;
    uint64_t v13 = MEMORY[0x1E4F14390];
    while (1)
    {
      unsigned int v14 = *((_DWORD *)this + 2);
      unsigned int v15 = v14 >> v12;
      unsigned int v16 = (v14 >> v12);
      if (v16 < 0x80)
      {
        int v17 = *(_DWORD *)(v13 + 4 * (v14 >> v12) + 60);
        if ((v17 & 0x500) != 0 || (v17 & 0x2000) != 0) {
          goto LABEL_28;
        }
      }
      else if (__maskrune((v14 >> v12), 0x500uLL) || __maskrune(v16, 0x2000uLL))
      {
        goto LABEL_28;
      }
      std::string::append(a2, "\\x", 2uLL);
      std::string::push_back(a2, a0123456789abcd[v15 >> 4]);
      LOBYTE(v15) = a0123456789abcd[v15 & 0xF];
LABEL_28:
      std::string::push_back(a2, v15);
      v12 -= 8;
      if (v12 == -8) {
        goto LABEL_29;
      }
    }
  }
  int v6 = *((_DWORD *)this + 3);
  if ((v6 & 2) != 0)
  {
    std::string::append(a2, "BE", 2uLL);
    int v6 = *((_DWORD *)this + 3);
  }
  uint64_t v7 = "F";
  if ((v6 & 1) == 0) {
    uint64_t v7 = "UI";
  }
  if ((v6 & 4) != 0) {
    long long v8 = "I";
  }
  else {
    long long v8 = v7;
  }
  if ((v6 & 5) != 0) {
    std::string::size_type v9 = 1;
  }
  else {
    std::string::size_type v9 = 2;
  }
  std::string::append(a2, v8, v9);
  std::to_string(&v39, *((_DWORD *)this + 8));
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v10 = &v39;
  }
  else {
    long long v10 = (std::string *)v39.__r_.__value_.__r.__words[0];
  }
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v39.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v10, size);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
LABEL_29:
  std::string::push_back(a2, 64);
  std::to_string(&v39, (int)*(double *)this);
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v18 = &v39;
  }
  else {
    long long v18 = (std::string *)v39.__r_.__value_.__r.__words[0];
  }
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v19 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v19 = v39.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v18, v19);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (v5 != 1819304813 && *((_DWORD *)this + 3))
  {
    std::string::append(a2, "/", 1uLL);
    unsigned int v20 = *((_DWORD *)this + 3);
    if (v20)
    {
      memset(&v39, 0, sizeof(v39));
      do
      {
        std::string::push_back(&v39, a0123456789abcd[v20 & 0xF]);
        BOOL v21 = v20 >= 0x10;
        v20 >>= 4;
      }
      while (v21);
      std::string::size_type v22 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      char v23 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      std::string::size_type v25 = v39.__r_.__value_.__l.__size_;
      std::string::size_type v24 = v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v26 = &v39;
      }
      else {
        uint64_t v26 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v27 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v27 = v39.__r_.__value_.__l.__size_;
      }
      long long v28 = (std::string *)((char *)v26 + v27 - 1);
      if (v27) {
        BOOL v29 = v28 > v26;
      }
      else {
        BOOL v29 = 0;
      }
      if (v29)
      {
        char v30 = &v26->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v31 = *(v30 - 1);
          *(v30 - 1) = v28->__r_.__value_.__s.__data_[0];
          v28->__r_.__value_.__s.__data_[0] = v31;
          long long v28 = (std::string *)((char *)v28 - 1);
          BOOL v21 = v30++ >= (char *)v28;
        }
        while (!v21);
        std::string::size_type v22 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
        std::string::size_type v25 = v39.__r_.__value_.__l.__size_;
        std::string::size_type v24 = v39.__r_.__value_.__r.__words[0];
        char v23 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      if (v23 >= 0) {
        uint64_t v32 = &v39;
      }
      else {
        uint64_t v32 = (std::string *)v24;
      }
      if (v23 >= 0) {
        std::string::size_type v33 = v22;
      }
      else {
        std::string::size_type v33 = v25;
      }
      std::string::append(a2, (const std::string::value_type *)v32, v33);
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v39.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      std::string::append(a2, "0", 1uLL);
    }
  }
  if (*((_DWORD *)this + 5) != 1)
  {
    std::string::push_back(a2, 35);
    std::to_string(&v39, *((_DWORD *)this + 5));
    uint64_t v34 = (v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v39
        : (std::string *)v39.__r_.__value_.__r.__words[0];
    std::string::size_type v35 = (v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(v39.__r_.__value_.__r.__words[2])
        : v39.__r_.__value_.__l.__size_;
    std::string::append(a2, (const std::string::value_type *)v34, v35);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
  }
  if (*((_DWORD *)this + 7) >= 2u)
  {
    std::string::push_back(a2, 44);
    std::to_string(&v39, *((_DWORD *)this + 7));
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v36 = &v39;
    }
    else {
      unint64_t v36 = (std::string *)v39.__r_.__value_.__r.__words[0];
    }
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v37 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v37 = v39.__r_.__value_.__l.__size_;
    }
    std::string::append(a2, (const std::string::value_type *)v36, v37);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    if (v5 == 1819304813)
    {
      if ((*((_DWORD *)this + 3) & 0x20) != 0) {
        std::string::value_type v38 = 68;
      }
      else {
        std::string::value_type v38 = 73;
      }
      std::string::push_back(a2, v38);
    }
  }
}

void sub_18FF5B02C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void DSPGraph::asDecompileString(char *a1@<X0>, std::string *a2@<X8>)
{
  unsigned int v3 = a2;
  LODWORD(a2) = a1[23];
  if (a1[23] < 0)
  {
    if (!*((void *)a1 + 1))
    {
      a2 = 0;
      v3->__r_.__value_.__r.__words[0] = 0;
      v3->__r_.__value_.__l.__size_ = 0;
      v3->__r_.__value_.__r.__words[2] = 0;
      goto LABEL_31;
    }
    uint64_t v4 = *(char **)a1;
  }
  else
  {
    uint64_t v4 = a1;
    if (!a1[23])
    {
      v3->__r_.__value_.__r.__words[0] = 0;
      v3->__r_.__value_.__l.__size_ = 0;
      v3->__r_.__value_.__r.__words[2] = 0;
LABEL_12:
      a2 = (std::string *)a2;
LABEL_31:
      std::string::reserve(v3, (std::string::size_type)a2->__r_.__value_.__r.__words + 2);
      std::string::push_back(v3, 34);
      int v16 = a1[23];
      if (v16 >= 0) {
        int v17 = a1;
      }
      else {
        int v17 = *(const std::string::value_type **)a1;
      }
      if (v16 >= 0) {
        std::string::size_type v18 = a1[23];
      }
      else {
        std::string::size_type v18 = *((void *)a1 + 1);
      }
      std::string::append(v3, v17, v18);
      std::string::push_back(v3, 34);
      return;
    }
  }
  unsigned int v5 = *v4;
  if ((v5 & 0x80000000) != 0)
  {
    int v6 = __maskrune(*v4, 0x500uLL);
    LODWORD(a2) = a1[23];
  }
  else
  {
    int v6 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v5 + 60) & 0x500;
  }
  if (v5 != 95 && !v6)
  {
LABEL_11:
    v3->__r_.__value_.__r.__words[0] = 0;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    if ((a2 & 0x80) != 0)
    {
      a2 = (std::string *)*((void *)a1 + 1);
      goto LABEL_31;
    }
    goto LABEL_12;
  }
  BOOL v7 = (char)a2 < 0;
  std::string::size_type v8 = *((void *)a1 + 1);
  unint64_t v9 = a2;
  if ((char)a2 < 0) {
    unint64_t v9 = *((void *)a1 + 1);
  }
  if (v9 >= 2)
  {
    unint64_t v10 = 1;
    uint64_t v11 = MEMORY[0x1E4F14390];
    do
    {
      int v12 = *(char **)a1;
      if (!v7) {
        int v12 = a1;
      }
      unsigned int v13 = v12[v10];
      if ((v13 & 0x80000000) != 0)
      {
        if (!__maskrune(v12[v10], 0x500uLL))
        {
LABEL_23:
          unsigned int v14 = memchr("_-+=|./:!@#$%^&*<>?~", v13, 0x15uLL);
          LODWORD(a2) = a1[23];
          if (!v14) {
            goto LABEL_11;
          }
          goto LABEL_24;
        }
      }
      else if ((*(_DWORD *)(v11 + 4 * v13 + 60) & 0x500) == 0)
      {
        goto LABEL_23;
      }
      LODWORD(a2) = a1[23];
LABEL_24:
      ++v10;
      BOOL v7 = (char)a2 < 0;
      std::string::size_type v8 = *((void *)a1 + 1);
      unint64_t v15 = a2;
      if ((char)a2 < 0) {
        unint64_t v15 = *((void *)a1 + 1);
      }
    }
    while (v10 < v15);
  }
  if ((a2 & 0x80) != 0)
  {
    std::string::size_type v19 = *(const std::string::value_type **)a1;
    std::string::__init_copy_ctor_external(v3, v19, v8);
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    v3->__r_.__value_.__r.__words[2] = *((void *)a1 + 2);
  }
}

void sub_18FF5B294(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::SimpleABL::SimpleABL(uint64_t this)
{
  *(void *)this = 0;
  *(unsigned char *)(this + 8) = 0;
  return this;
}

{
  *(void *)this = 0;
  *(unsigned char *)(this + 8) = 0;
  return this;
}

uint64_t DSPGraph::SimpleABL::SimpleABL(uint64_t this, AudioBufferList *a2)
{
  *(void *)this = a2;
  *(unsigned char *)(this + 8) = 0;
  return this;
}

{
  *(void *)this = a2;
  *(unsigned char *)(this + 8) = 0;
  return this;
}

void DSPGraph::SimpleABL::~SimpleABL(DSPGraph::SimpleABL *this)
{
}

{
  DSPGraph::SimpleABL::free(this);
}

uint64_t DSPGraph::SimpleABL::set(uint64_t this, AudioBufferList *a2)
{
  if (*(unsigned char *)(this + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(&v4, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Utils.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v3, "set");
    std::string::basic_string[abi:ne180100]<0>(&v2, "setting a buffer list which is already allocated.");
    DSPGraph::ThrowException(1869640255, &v4, 578, &v3, &v2);
  }
  *(unsigned char *)(this + 8) = 0;
  *(void *)this = a2;
  return this;
}

void sub_18FF5B3B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

void DSPGraph::SimpleABL::zero(DSPGraph::SimpleABL *this, unsigned int a2, unsigned int a3)
{
  long long v3 = *(_DWORD **)this;
  if (*(void *)this && *v3)
  {
    unint64_t v5 = 0;
    uint64_t v6 = a2;
    uint64_t v7 = 4;
    size_t v8 = a3;
    do
    {
      bzero((void *)(*(void *)&v3[v7] + v6), v8);
      ++v5;
      long long v3 = *(_DWORD **)this;
      v7 += 4;
    }
    while (v5 < **(unsigned int **)this);
  }
}

void DSPGraph::SimpleABL::zero(DSPGraph::SimpleABL *this)
{
  uint64_t v1 = *(_DWORD **)this;
  if (*(void *)this && *v1)
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    do
    {
      bzero(*(void **)&v1[v3 + 4], v1[v3 + 3]);
      ++v4;
      uint64_t v1 = *(_DWORD **)this;
      v3 += 4;
    }
    while (v4 < **(unsigned int **)this);
  }
}

void *DSPGraph::SimpleABL::copy(void *this, DSPGraph::SimpleABL *a2, int a3)
{
  uint64_t v3 = (_DWORD *)*this;
  if (!*this)
  {
    std::string::basic_string[abi:ne180100]<0>(&v15, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Utils.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v14, "copy");
    std::string::basic_string[abi:ne180100]<0>(&v13, "null internal ABL");
    DSPGraph::ThrowException(1768843553, &v15, 635, &v14, &v13);
  }
  unint64_t v4 = *(_DWORD **)a2;
  if (!*(void *)a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v15, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Utils.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v14, "copy");
    std::string::basic_string[abi:ne180100]<0>(&v13, "null destination ABL");
    DSPGraph::ThrowException(1768843553, &v15, 639, &v14, &v13);
  }
  if (*v3 != *v4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v15, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Utils.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v14, "copy");
    std::string::basic_string[abi:ne180100]<0>(&v13, "mABL->mNumberBuffers != toABL->mNumberBuffers");
    DSPGraph::ThrowException(1718444833, &v15, 642, &v14, &v13);
  }
  if (*v3)
  {
    uint64_t v6 = this;
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      size_t v9 = v3[v7 + 3];
      unint64_t v10 = &v4[v7];
      if (v9 > v4[v7 + 3])
      {
        std::string::basic_string[abi:ne180100]<0>(&v15, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Utils.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v14, "copy");
        DSPGraph::strprintf((DSPGraph *)"mABL->mBuffers[%u].mDataByteSize (%u) > toABL->mBuffers[%u].mDataByteSize (%u)", v12, v8, *(unsigned int *)(*v6 + 16 * v8 + 12), v8, v10[3]);
      }
      uint64_t v11 = *(void **)&v3[v7 + 4];
      this = (void *)*((void *)v10 + 2);
      if (v11 != this)
      {
        this = memcpy(this, v11, v9);
        uint64_t v3 = (_DWORD *)*v6;
      }
      if (a3) {
        v10[3] = v3[v7 + 3];
      }
      ++v8;
      v7 += 4;
    }
    while (v8 < *v3);
  }
  return this;
}

void sub_18FF5B6F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (*(char *)(v25 - 49) < 0) {
    operator delete(*(void **)(v25 - 72));
  }
  _Unwind_Resume(exception_object);
}

void DSPGraph::RingBuffer::~RingBuffer(DSPGraph::RingBuffer *this)
{
}

{
  DSPGraph::SimpleABL::free(this);
  DSPGraph::SimpleABL::free(this);
}

unsigned int **DSPGraph::RingBuffer::write(DSPGraph::RingBuffer *this, uint64_t a2, unsigned int **a3)
{
  return DSPGraph::RingBuffer::write(this, a2, a2, a3);
}

os_log_t ___ZN8DSPGraph6getLogEv_block_invoke()
{
  os_log_t result = os_log_create("com.apple.coreaudio", "DSPGraph");
  DSPGraph::getLog(void)::gLog = (uint64_t)result;
  return result;
}

unsigned int **DSPGraph::RingBuffer::read(DSPGraph::RingBuffer *this, unsigned int a2, unsigned int **a3)
{
  return DSPGraph::RingBuffer::read(this, a2, a2, a3);
}

uint64_t MP4BoxParser_Full::GetBoxHeaderSize(MP4BoxParser_Full *this)
{
  return (*((_DWORD *)this + 9) + 4);
}

uint64_t MP4BoxParser_SampleDescription::Init(MP4BoxParser_SampleDescription *this)
{
  uint64_t result = MP4BoxParser_Full::Initialize(this);
  if (!result)
  {
    if (*((_DWORD *)this + 5) == 1937011556)
    {
      return MP4BoxParser_SampleDescription::DeserializeBoxFieldsFromDataSource((MP4BoxParser **)this);
    }
    else
    {
      return 4294967294;
    }
  }
  return result;
}

uint64_t MP4BoxParser_SampleDescription::DeserializeBoxFieldsFromDataSource(MP4BoxParser **this)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = (*((uint64_t (**)(MP4BoxParser **))*this + 3))(this);
  uint64_t v68 = 0;
  uint64_t DataSourceSize = MP4BoxParser::GetDataSourceSize(this[1], &v68);
  if (!DataSourceSize)
  {
    uint64_t DataSourceSize = MP4BoxParser::ReadDataSourceBytes(this[1], v2, 4uLL, (char *)this + 60);
    unsigned int v4 = *((_DWORD *)this + 15);
    *((_DWORD *)this + 15) = bswap32(v4);
    if (!DataSourceSize)
    {
      if (!v4) {
        return 0;
      }
      uint64_t DataSourceSize = MP4BoxParser::ReadDataSourceBytes(this[1], v2 + 4, 8uLL, v67);
      if (!DataSourceSize)
      {
        uint64_t DataSourceSize = 1667787583;
        uint64_t v6 = bswap32(v67[0]);
        if (v68 - (v2 + 4) + 8 >= v6)
        {
          *((_DWORD *)this + 16) = bswap32(v67[1]);
          if ((v6 + 2147483640) >= 0x8000001C)
          {
            uint64_t DataSourceBytes = MP4BoxParser::ReadDataSourceBytes(this[1], v2 + 20, 8uLL, &v69);
            if (DataSourceBytes) {
              return DataSourceBytes;
            }
            uint64_t DataSourceBytes = 1718449215;
            unsigned int v8 = bswap32(v69) >> 16;
            *((_DWORD *)this + 17) = v8;
            if (v8 != *((unsigned __int8 *)this + 56)) {
              return DataSourceBytes;
            }
            int v9 = *((_DWORD *)this + 16);
            if (v9 == 1768973165 || v9 == 1718641517)
            {
              LOWORD(v65[0]) = 0;
              uint64_t DataSourceBytes = MP4BoxParser::ReadDataSourceBytes(this[1], v2 + 28, 2uLL, v65);
              *((_WORD *)this + 60) = bswap32(LOWORD(v65[0])) >> 16;
              if (DataSourceBytes) {
                return DataSourceBytes;
              }
              LOWORD(outPropertyDataSize[0]) = 0;
              uint64_t DataSourceBytes = MP4BoxParser::ReadDataSourceBytes(this[1], v2 + 30, 2uLL, outPropertyDataSize);
              if (DataSourceBytes) {
                return DataSourceBytes;
              }
              *((_WORD *)this + 61) = bswap32(LOWORD(outPropertyDataSize[0])) >> 16;
              LOWORD(v66) = 0;
              uint64_t DataSourceBytes = MP4BoxParser::ReadDataSourceBytes(this[1], v2 + 32, 2uLL, &v66);
              if (DataSourceBytes) {
                return DataSourceBytes;
              }
              LODWORD(inSpecifier) = 0;
              uint64_t DataSourceBytes = MP4BoxParser::ReadDataSourceBytes(this[1], v2 + 36, 4uLL, &inSpecifier);
              if (DataSourceBytes) {
                return DataSourceBytes;
              }
              *((_DWORD *)this + 31) = bswap32(inSpecifier) >> 16;
            }
            unsigned int v10 = v6 - 36;
            if ((v6 - 36) >= 9)
            {
              uint64_t DataSourceSize = 0;
              unsigned int v57 = v2 + 40;
              long long v52 = (const UInt8 *)&v66 + 4;
              CFAllocatorRef v55 = (CFAllocatorRef)*MEMORY[0x1E4F1CF80];
              long long v56 = (std::vector<char> *)(this + 20);
              long long v54 = this + 16;
              long long v53 = (CACFDictionary *)(this + 13);
              while (1)
              {
                uint64_t v11 = v57;
                uint64_t DataSourceBytes = MP4BoxParser::ReadDataSourceBytes(this[1], v57, 8uLL, &v66);
                if (DataSourceBytes) {
                  return DataSourceBytes;
                }
                size_t v12 = bswap32(v66);
                if (v10 < v12 || v12 <= 7) {
                  return 0;
                }
                unsigned int v14 = HIDWORD(v66);
                std::vector<unsigned char>::vector(v65, v12);
                long long v15 = (char *)v65[0];
                uint64_t v16 = MP4BoxParser::ReadDataSourceBytes(this[1], v11, v12, v65[0]);
                uint64_t v17 = v16;
                if (v16)
                {
                  BOOL v18 = 0;
                  uint64_t DataSourceSize = v16;
                  goto LABEL_134;
                }
                int v19 = bswap32(v14);
                std::vector<char>::size_type v20 = (v12 - 8);
                uint64_t v21 = (unsigned int *)(v15 + 8);
                v57 += v12;
                v10 -= v12;
                if (v19 <= 1702061170)
                {
                  if (v19 > 1684103986)
                  {
                    if (v19 > 1684425824)
                    {
                      if (v19 == 1684425825) {
                        goto LABEL_84;
                      }
                      int v31 = 1700998451;
                    }
                    else
                    {
                      if (v19 == 1684103987) {
                        goto LABEL_84;
                      }
                      int v31 = 1684366131;
                    }
                    if (v19 != v31) {
                      goto LABEL_110;
                    }
LABEL_84:
                    if (!this[11])
                    {
                      int v35 = *((_DWORD *)this + 16);
                      if (v35 <= 1700998450)
                      {
                        if (v35 == 1633889587)
                        {
                          int v36 = 862151012;
                          goto LABEL_124;
                        }
                        if (v35 == 1685220723) {
                          goto LABEL_125;
                        }
                        goto LABEL_127;
                      }
                      if (v35 == 1716281667)
                      {
                        int v36 = 1632396900;
                        goto LABEL_124;
                      }
                      if (v35 != 1701733217)
                      {
                        if (v35 == 1700998451)
                        {
                          int v36 = 862152036;
LABEL_124:
                          if (v14 != v36) {
                            goto LABEL_132;
                          }
                          goto LABEL_125;
                        }
LABEL_127:
                        if (v35 != 1685220723) {
                          goto LABEL_132;
                        }
                        uint64_t v17 = 0;
LABEL_129:
                        *((_DWORD *)this + 18) = v19;
                        goto LABEL_133;
                      }
LABEL_125:
                      *((_DWORD *)this + 24) = v12;
                      CA_calloc(v12);
                      this[11] = v47;
                      memcpy(v47, v65[0], *((unsigned int *)this + 24));
                    }
                    int v35 = *((_DWORD *)this + 16);
                    goto LABEL_127;
                  }
                  if (v19 <= 1667785069)
                  {
                    if (v19 != 1633889587)
                    {
                      if (v19 != 1634492771) {
                        goto LABEL_110;
                      }
                      unsigned int v28 = v12 - 8;
                      uint64_t v17 = 0;
                      goto LABEL_58;
                    }
                    goto LABEL_84;
                  }
                  if (v19 != 1667785070)
                  {
                    if (v19 == 1667788396)
                    {
                      long long v60 = 0u;
                      long long v61 = 0u;
                      long long inSpecifier = 0u;
                      outPropertyDataSize[0] = 0;
                      HIDWORD(v60) = *((unsigned __int16 *)this + 60);
                      *((void **)&v61 + 1) = v65[0];
                      uint64_t v62 = v12;
                      if (!AudioFormatGetPropertyInfo(0x6463636Cu, 0x38u, &inSpecifier, outPropertyDataSize))
                      {
                        std::vector<unsigned char>::resize(v56, outPropertyDataSize[0]);
                        if (AudioFormatGetProperty(0x6463636Cu, 0x38u, &inSpecifier, outPropertyDataSize, v56->__begin_))
                        {
                          std::vector<char>::size_type v34 = 0;
                        }
                        else
                        {
                          std::vector<char>::size_type v34 = outPropertyDataSize[0];
                        }
                        std::vector<unsigned char>::resize(v56, v34);
                      }
LABEL_132:
                      uint64_t v17 = 0;
LABEL_133:
                      BOOL v18 = 1;
                      goto LABEL_134;
                    }
LABEL_110:
                    unsigned int outPropertyData = 0;
                    if (IsConfigBoxForCodingName(*((_DWORD *)this + 16), v19, &outPropertyData))
                    {
                      if (!this[11]) {
                        MP4BoxParser_SampleDescription::GetMagicCookieAndAudioChannelLayoutFromConfigBox((MP4BoxParser_SampleDescription *)this, *((_DWORD *)this + 16), outPropertyData, v19, v12, v65[0]);
                      }
                    }
                    else
                    {
                      CFStringRef v45 = CFStringCreateWithBytes(v55, v52, 4, 0x8000100u, 0);
                      if (v45)
                      {
                        *(void *)&long long inSpecifier = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
                        WORD4(inSpecifier) = 257;
                        *(void *)outPropertyDataSize = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
                        LOWORD(v64) = 257;
                        if (CACFDictionary::HasKey(v53, v45))
                        {
                          CACFDictionary::GetCACFArray(v53, v45, (CACFArray *)&inSpecifier);
                          if (*((unsigned char *)this + 113))
                          {
                            if (*(void *)v53) {
                              CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)v53, v45);
                            }
                          }
                        }
                        CACFArray::SetCFMutableArrayFromCopy((CACFArray *)outPropertyDataSize, (CFArrayRef)inSpecifier);
                        CFDataRef v46 = CFDataCreate(0, (const UInt8 *)v15 + 8, (v12 - 8));
                        CACFArray::AppendData((CACFArray *)outPropertyDataSize, v46);
                        CFRelease(v46);
                        CACFDictionary::AddArray(v53, v45, *(const __CFArray **)outPropertyDataSize);
                        CFRelease(v45);
                        CACFArray::~CACFArray((CACFArray *)outPropertyDataSize);
                        CACFArray::~CACFArray((CACFArray *)&inSpecifier);
                      }
                    }
                    goto LABEL_132;
                  }
                  std::vector<unsigned char>::resize(v56, v20);
                  long long v40 = memcpy(this[20], v15 + 8, (v12 - 8));
                  if (*((_DWORD *)this + 16) != 1634492771 || !this[11]) {
                    goto LABEL_132;
                  }
                  MEMORY[0x1F4188790](v40);
                  long long v42 = (char *)&v52 - ((v41 + 15) & 0x1FFFFFFF0);
                  long long v43 = this[11];
                  memcpy(v42, v43, *((unsigned int *)this + 24));
                  free(v43);
                  LODWORD(v43) = *((_DWORD *)this + 24) + v12;
                  CA_calloc(v43);
                  this[11] = v44;
                  memcpy(v44, v42, *((unsigned int *)this + 24));
                  memcpy((char *)this[11] + *((unsigned int *)this + 24), v65[0], v12);
                  *((_DWORD *)this + 24) = v43;
                  BOOL v18 = 1;
LABEL_109:
                  uint64_t v17 = 0;
                }
                else
                {
                  if (v19 <= 1935767393)
                  {
                    if (v19 <= 1885564226)
                    {
                      if (v19 != 1702061171 && v19 != 1832149349) {
                        goto LABEL_110;
                      }
                      uint64_t v17 = 0;
                      unsigned int v28 = v12 - 8;
                      if (v20 >= 5 && !this[11]) {
                        operator new();
                      }
LABEL_58:
                      if (v28 >= 5 && !this[11])
                      {
                        size_t v29 = (v12 - 12);
                        *((_DWORD *)this + 24) = v29;
                        CA_calloc(v29);
                        this[11] = v30;
                        memcpy(v30, v15 + 12, *((unsigned int *)this + 24));
                      }
                      if (*((_DWORD *)this + 16) != 1685220723) {
                        goto LABEL_133;
                      }
                      goto LABEL_129;
                    }
                    if (v19 == 1885564227)
                    {
                      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v54, (char *)v65[0], (char *)v65[0] + v12, v12);
                      goto LABEL_132;
                    }
                    if (v19 != 1935764850) {
                      goto LABEL_110;
                    }
LABEL_90:
                    if (this[11]) {
                      goto LABEL_132;
                    }
                    uint64_t v37 = (v12 - 8);
                    *((_DWORD *)this + 24) = 47;
                    CA_calloc(0x2FuLL);
                    this[11] = (MP4BoxParser *)v38;
                    unint64_t v39 = *((unsigned int *)this + 24);
                    if (v39 < 0x2F || v37 + 38 > v39)
                    {
                      BOOL v18 = 0;
                      uint64_t v17 = 0xFFFFFFFFLL;
                      uint64_t DataSourceSize = 0xFFFFFFFFLL;
                      goto LABEL_134;
                    }
                    *(void *)uint64_t v38 = 0x616D72660C000000;
                    *(_DWORD *)(v38 + 8) = v14;
                    *(void *)(v38 + 12) = 0x61646E650A000000;
                    *(_WORD *)(v38 + 20) = 0;
                    HIDWORD(v66) = 1919770980;
                    *(void *)(v38 + 22) = v66;
                    uint64_t v48 = v38 + 30;
                    memcpy((void *)(v38 + 30), v21, (v12 - 8));
                    uint64_t v17 = 0;
                    *(void *)(v48 + v37) = 0x8000000;
                    goto LABEL_133;
                  }
                  if (v19 <= 1936289381)
                  {
                    if (v19 != 1935767394)
                    {
                      if (v19 == 1935832164)
                      {
                        if (v20 >= 5)
                        {
                          CFStringRef v32 = CFStringCreateWithBytes(v55, (const UInt8 *)v15 + 12, (v12 - 12), 0x8000100u, 0);
                          CFStringRef v33 = v32;
                          if (v32)
                          {
                            *((_DWORD *)this + 38) = BitDepthFromCFString(v32);
                            CFRelease(v33);
                          }
                        }
                        goto LABEL_132;
                      }
                      goto LABEL_110;
                    }
                    goto LABEL_90;
                  }
                  unsigned int v22 = v12 - 8;
                  switch(v19)
                  {
                    case 1936289382:
                      uint64_t v17 = 0;
                      BOOL v18 = 1;
                      if (v20 >= 0x20 && *((_DWORD *)this + 16) == 1701733217)
                      {
                        if (bswap32(*((_DWORD *)v15 + 2)) >= 0xC && *((_DWORD *)v15 + 3) == 1634562662) {
                          *((_DWORD *)this + 19) = bswap32(*((_DWORD *)v15 + 4));
                        }
                        uint64_t v17 = 0;
                        if (bswap32(*((_DWORD *)v15 + 5)) >= 0x14 && *((_DWORD *)v15 + 6) == 1835557747)
                        {
                          uint64_t v17 = 0;
                          *((_DWORD *)this + 20) = bswap32(*((_DWORD *)v15 + 8));
                        }
                      }
                      break;
                    case 1936875892:
                      uint64_t v17 = 0;
                      BOOL v18 = 1;
                      if (v20 >= 8 && *((_DWORD *)this + 17))
                      {
                        uint64_t v17 = 0;
                        *((_DWORD *)this + 31) = bswap32(*((_DWORD *)v15 + 3));
                      }
                      break;
                    case 2002876005:
                      if (v22 < 8) {
                        goto LABEL_132;
                      }
                      unsigned int v23 = 0;
                      unint64_t v24 = (unint64_t)&v15[v22 + 8];
                      uint64_t v25 = (unsigned int *)(v15 + 16);
                      while (1)
                      {
                        uint64_t v26 = bswap32(*v21);
                        BOOL v18 = v26 > 7;
                        if (v26 < 8)
                        {
                          uint64_t v17 = 0;
                          uint64_t DataSourceSize = 1718449215;
                          goto LABEL_134;
                        }
                        unsigned int v27 = v21[1];
                        uint64_t v17 = bswap32(v27);
                        if (v17 == 1718775137)
                        {
                          v21 += 3;
                          if (v24 < (unint64_t)v21) {
                            goto LABEL_132;
                          }
                          unsigned int v23 = bswap32(*v25);
                        }
                        else
                        {
                          if (!v17) {
                            goto LABEL_133;
                          }
                          if (v27 == 1935962981 && v23 == 1836069985)
                          {
                            BOOL v49 = v26 >= 0xC && this[11] == 0;
                            if (v49 && (int)v26 - 8 <= (int)v24 - (int)v25)
                            {
                              size_t v50 = (v26 - 12);
                              *((_DWORD *)this + 24) = v50;
                              CA_calloc(v50);
                              this[11] = v51;
                              memcpy(v51, v21 + 3, *((unsigned int *)this + 24));
                            }
                            goto LABEL_132;
                          }
                          uint64_t v21 = (unsigned int *)((char *)v21 + v26);
                        }
                        uint64_t v25 = v21 + 2;
                        BOOL v18 = 1;
                        if (v24 < (unint64_t)(v21 + 2)) {
                          goto LABEL_109;
                        }
                      }
                    default:
                      goto LABEL_110;
                  }
                }
LABEL_134:
                if (v65[0])
                {
                  v65[1] = v65[0];
                  operator delete(v65[0]);
                }
                if (!v18) {
                  return DataSourceSize;
                }
                if (v10 < 9) {
                  return v17;
                }
              }
            }
            return 0;
          }
        }
      }
    }
  }
  return DataSourceSize;
}

void sub_18FF5C5D0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 184);
  if (v3)
  {
    *(void *)(v1 - 176) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::default_delete<MP4AudioESDS>::operator()[abi:ne180100](uint64_t a1)
{
  unsigned int v2 = *(std::__shared_weak_count **)(a1 + 1512);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 1496);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  JUMPOUT(0x192FC8940);
}

void CA_calloc(size_t a1)
{
  unsigned int v2 = malloc_type_malloc(a1, 0x2C8E6D5CuLL);
  if (a1 && !v2)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    unsigned int v4 = std::bad_alloc::bad_alloc(exception);
  }
  bzero(v2, a1);
}

void std::vector<unsigned char>::resize(std::vector<char> *this, std::vector<char>::size_type __sz)
{
  std::vector<char>::size_type v2 = this->__end_ - this->__begin_;
  BOOL v3 = __sz >= v2;
  std::vector<char>::size_type v4 = __sz - v2;
  if (v4 != 0 && v3)
  {
    std::vector<unsigned char>::__append(this, v4);
  }
  else if (!v3)
  {
    this->__end_ = &this->__begin_[__sz];
  }
}

BOOL IsConfigBoxForCodingName(int a1, int a2, unsigned int *outPropertyData)
{
  if (a1 == 1685220723)
  {
    uint64_t inSpecifier = 0x46D703466;
    int v14 = a2;
    ioPropertyDataSize[0] = 4;
    BOOL v5 = AudioFormatGetProperty(0x6964656Eu, 0xCu, &inSpecifier, ioPropertyDataSize, outPropertyData) == 0;
    UInt32 v6 = ioPropertyDataSize[0];
  }
  else
  {
    uint64_t inSpecifier = 0x46D703466;
    int v14 = a1;
    int v12 = 0;
    *(void *)ioPropertyDataSize = 0;
    UInt32 v10 = 12;
    if (AudioFormatGetProperty(0x656E636Eu, 0xCu, &inSpecifier, &v10, ioPropertyDataSize)) {
      return 0;
    }
    if (v10 != 12 || v12 != a2) {
      return 0;
    }
    UInt32 v10 = 4;
    BOOL v5 = AudioFormatGetProperty(0x6964636Eu, 0xCu, &inSpecifier, &v10, outPropertyData) == 0;
    UInt32 v6 = v10;
  }
  return v5 && v6 == 4;
}

void MP4BoxParser_SampleDescription::GetMagicCookieAndAudioChannelLayoutFromConfigBox(MP4BoxParser_SampleDescription *this, int a2, int a3, int a4, unsigned int a5, void *a6)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  inSpecifier[0] = a3;
  inSpecifier[1] = 1836069990;
  size_t v29 = a6;
  uint64_t v30 = a5;
  UInt32 outPropertyDataSize = 0;
  if (AudioFormatGetPropertyInfo(0x6D636563u, 0x18u, inSpecifier, &outPropertyDataSize))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "MP4_BoxParser_SampleDescription.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 452;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  CanonicalMagicCookieFromEncapsulatedMagicCookie not supported for specifier", (uint8_t *)buf, 0x12u);
    }
LABEL_4:
    UInt32 v10 = 0;
    goto LABEL_5;
  }
  size_t v11 = outPropertyDataSize;
  int v12 = malloc_type_malloc(outPropertyDataSize, 0x2C8E6D5CuLL);
  UInt32 v10 = v12;
  if (v11 && !v12)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    unsigned int v22 = std::bad_alloc::bad_alloc(exception);
  }
  bzero(v12, v11);
  if (AudioFormatGetProperty(0x6D636563u, 0x18u, inSpecifier, &outPropertyDataSize, v10))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "MP4_BoxParser_SampleDescription.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 456;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Couldn't extract magic cookie", (uint8_t *)buf, 0x12u);
    }
  }
  else
  {
    UInt32 v13 = outPropertyDataSize;
    *((_DWORD *)this + 24) = outPropertyDataSize;
    *((void *)this + 11) = v10;
    if (a2 == 1685220723) {
      *((_DWORD *)this + 18) = a4;
    }
    if (v10)
    {
      uint64_t v32 = 0;
      int v35 = 0;
      memset(buf, 0, sizeof(buf));
      CFStringRef v33 = v10;
      UInt32 v34 = v13;
      UInt32 v26 = 0;
      buf[2] = a3;
      if (AudioFormatGetPropertyInfo(0x636C6669u, 0x38u, buf, &v26))
      {
        long long v25 = 0u;
        memset(outPropertyData, 0, sizeof(outPropertyData));
        UInt32 ioPropertyDataSize = 48;
        if (!AudioFormatGetProperty(0x666C7374u, 0x38u, buf, &ioPropertyDataSize, outPropertyData))
        {
          int v14 = (_DWORD *)*((void *)this + 20);
          unint64_t v15 = *((void *)this + 21) - (void)v14;
          if (v15 > 0x1F)
          {
            if (v15 != 32) {
              *((void *)this + 21) = v14 + 8;
            }
          }
          else
          {
            std::vector<unsigned char>::__append((std::vector<char> *)((char *)this + 160), 32 - v15);
            int v14 = (_DWORD *)*((void *)this + 20);
          }
          *int v14 = DWORD2(v25);
        }
      }
      else
      {
        uint64_t v16 = (char *)*((void *)this + 20);
        unint64_t v17 = *((void *)this + 21) - (void)v16;
        if (v26 <= v17)
        {
          if (v26 < v17) {
            *((void *)this + 21) = &v16[v26];
          }
        }
        else
        {
          std::vector<unsigned char>::__append((std::vector<char> *)((char *)this + 160), v26 - v17);
          uint64_t v16 = (char *)*((void *)this + 20);
        }
        if (AudioFormatGetProperty(0x636C6669u, 0x38u, buf, &v26, v16)) {
          unint64_t v18 = 0;
        }
        else {
          unint64_t v18 = v26;
        }
        uint64_t v19 = *((void *)this + 20);
        unint64_t v20 = *((void *)this + 21) - v19;
        if (v18 <= v20)
        {
          if (v18 < v20) {
            *((void *)this + 21) = v19 + v18;
          }
        }
        else
        {
          std::vector<unsigned char>::__append((std::vector<char> *)((char *)this + 160), v18 - v20);
        }
      }
      goto LABEL_4;
    }
  }
LABEL_5:
  free(v10);
}

CFMutableArrayRef CACFArray::SetCFMutableArrayFromCopy(CACFArray *this, CFArrayRef theArray)
{
  if (*((unsigned char *)this + 8))
  {
    std::vector<char>::size_type v4 = *(const void **)this;
    if (*(void *)this) {
      CFRelease(v4);
    }
  }
  CFMutableArrayRef result = CFArrayCreateMutableCopy(0, 0, theArray);
  *(void *)this = result;
  *((_WORD *)this + 4) = 257;
  return result;
}

void CACFArray::~CACFArray(CACFArray *this)
{
  if (*((unsigned char *)this + 8))
  {
    std::vector<char>::size_type v2 = *(const void **)this;
    if (*(void *)this) {
      CFRelease(v2);
    }
  }
}

void MP4BoxParser_SampleDescription::~MP4BoxParser_SampleDescription(MP4BoxParser_SampleDescription *this)
{
  MP4BoxParser_SampleDescription::~MP4BoxParser_SampleDescription(this);
  JUMPOUT(0x192FC8940);
}

{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;

  *(void *)this = &unk_1EDF945C8;
  std::vector<char>::size_type v2 = (void *)*((void *)this + 11);
  if (v2) {
    free(v2);
  }
  BOOL v3 = *((void *)this + 23);
  *((void *)this + 23) = 0;
  if (v3) {
    std::default_delete<MP4AudioESDS>::operator()[abi:ne180100](v3);
  }
  std::vector<char>::size_type v4 = (void *)*((void *)this + 20);
  if (v4)
  {
    *((void *)this + 21) = v4;
    operator delete(v4);
  }
  BOOL v5 = (void *)*((void *)this + 16);
  if (v5)
  {
    *((void *)this + 17) = v5;
    operator delete(v5);
  }
  CACFDictionary::~CACFDictionary((MP4BoxParser_SampleDescription *)((char *)this + 104));
  UInt32 v6 = *((void *)this + 1);
  *(void *)this = &unk_1EDF8DA18;
  *((void *)this + 1) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
}

uint64_t MP4BoxParser_SampleDescription::MP4BoxParser_SampleDescription(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_1EDF8DA18;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 88))(a2, a3);
  *(unsigned char *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = 8;
  *(void *)a1 = &unk_1EDF945C8;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(void *)(a1 + 60) = 0;
  *(void *)(a1 + 76) = 0;
  *(void *)(a1 + 68) = 0;
  *(void *)(a1 + 104) = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  *(_WORD *)(a1 + 112) = 257;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  return a1;
}

void sub_18FF5CE34(_Unwind_Exception *exception_object)
{
  uint64_t v4 = v1[1];
  *uint64_t v1 = v2;
  v1[1] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MP4BoxParser_SampleDescription::GetASBD(MP4BoxParser_SampleDescription *this, AudioStreamBasicDescription *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7, unsigned int *a8)
{
  UInt32 v43 = 40;
  HIDWORD(v10) = 0;
  *(_OWORD *)&a2->float mSampleRate = 0u;
  *(_OWORD *)&a2->mBytesPerPacket = 0u;
  *(void *)&a2->mBitsPerChannel = 0;
  int v11 = *((_DWORD *)this + 16);
  if (v11 == 1701733217)
  {
    int v11 = *((_DWORD *)this + 19);
  }
  else if (v11 == 1685220723)
  {
    int v12 = *((_DWORD *)this + 18);
    if (v12 != 1684103987)
    {
      if (v12 != 1684366131)
      {
        if (v12 != 1702061171)
        {
          int v11 = 1685220723;
          goto LABEL_36;
        }
        goto LABEL_30;
      }
LABEL_18:
      uint64_t Property = ParseEAC3MP4Cookie(*((unsigned int **)this + 11), *((_DWORD *)this + 24), (BOOL *)a2, 0, 0, 0, a7, a8, v39, inSpecifier, v41, v42);
LABEL_50:
      uint64_t StreamDescription = Property;
      goto LABEL_51;
    }
LABEL_25:
    int v20 = (*(uint64_t (**)(MP4BoxParser_SampleDescription *))(*(void *)this + 24))(this);
    uint64_t StreamDescription = MP4BoxParser::ReadDataSourceBytes(*((MP4BoxParser **)this + 1), (v20 + 4), 0x2FuLL, &inSpecifier);
    if (StreamDescription) {
      goto LABEL_51;
    }
    *(void *)&a2->mBitsPerChannel = 0;
    *(_OWORD *)&a2->float mSampleRate = 0u;
    *(_OWORD *)&a2->mBytesPerPacket = 0u;
    uint64_t Property = ParseAC3MP4Cookie(*((unsigned __int8 **)this + 11), *((_DWORD *)this + 24), a2, 0, v21, v22);
    goto LABEL_50;
  }
  if (v11 > 1768973164)
  {
    if (v11 > 1836069984)
    {
      if (v11 == 1935767394)
      {
        a2->uint64_t mFormatID = 1935767394;
        a2->mChannelsPerFrame = 1;
        Float64 v34 = 16000.0;
      }
      else
      {
        if (v11 != 1935764850)
        {
          int v13 = 1836069985;
          goto LABEL_29;
        }
        a2->uint64_t mFormatID = 1935764850;
        a2->mChannelsPerFrame = 1;
        Float64 v34 = 8000.0;
      }
      a2->float mSampleRate = v34;
LABEL_48:
      UInt32 v30 = *((_DWORD *)this + 24);
      size_t v29 = (const void *)*((void *)this + 11);
      p_uint64_t inSpecifier = &v43;
      AudioFormatPropertyID v32 = 1718449257;
LABEL_49:
      uint64_t Property = AudioFormatGetProperty(v32, v30, v29, p_inSpecifier, a2);
      goto LABEL_50;
    }
    if (v11 == 1768973165) {
      goto LABEL_38;
    }
    int v13 = 1832149349;
LABEL_29:
    if (v11 == v13)
    {
LABEL_30:
      uint64_t v23 = *((void *)this + 23);
      if (!v23) {
        goto LABEL_42;
      }
      uint64_t StreamDescription = DecoderConfigDescr::MakeStreamDescription((DecoderConfigDescr *)(v23 + 296), a2, 0.0);
      if (StreamDescription) {
        goto LABEL_51;
      }
      uint64_t mFormatID = a2->mFormatID;
      if (mFormatID != 1634497332 && mFormatID != 1936487278 && mFormatID != 1936487267)
      {
LABEL_42:
        uint64_t StreamDescription = 0;
        goto LABEL_51;
      }
      AudioFormatFlags mFormatFlags = a2->mFormatFlags;
      goto LABEL_61;
    }
    goto LABEL_36;
  }
  if (v11 > 1700998450)
  {
    if (v11 == 1700998451) {
      goto LABEL_18;
    }
    if (v11 == 1716281667)
    {
      a2->uint64_t mFormatID = 1718378851;
      uint64_t StreamDescription = AudioFormatGetProperty(0x666D7469u, *((_DWORD *)this + 24), *((const void **)this + 11), &v43, a2);
      if (StreamDescription) {
        goto LABEL_51;
      }
      int SourceBitDepthFromASBD = GetSourceBitDepthFromASBD((const AudioStreamBasicDescription *)a2->mFormatID, a2->mFormatFlags);
      goto LABEL_62;
    }
    if (v11 != 1718641517) {
      goto LABEL_36;
    }
LABEL_38:
    LODWORD(inSpecifier) = 40;
    LODWORD(v10) = *((_DWORD *)this + 31);
    UInt32 v25 = *((unsigned __int16 *)this + 60);
    UInt32 v26 = *((unsigned __int16 *)this + 61);
    a2->float mSampleRate = (double)v10;
    if (v11 == 1718641517) {
      AudioFormatFlags v27 = 11;
    }
    else {
      AudioFormatFlags v27 = 14;
    }
    a2->uint64_t mFormatID = 1819304813;
    a2->AudioFormatFlags mFormatFlags = v27;
    UInt32 v28 = (v26 >> 3) * v25;
    a2->mBytesPerPacket = v28;
    a2->mFramesPerPacket = 1;
    a2->mBytesPerFrame = v28;
    a2->mChannelsPerFrame = v25;
    a2->mBitsPerChannel = v26;
    size_t v29 = (const void *)*((void *)this + 16);
    UInt32 v30 = *((_DWORD *)this + 34) - v29;
    p_uint64_t inSpecifier = (UInt32 *)&inSpecifier;
    AudioFormatPropertyID v32 = 1885565796;
    goto LABEL_49;
  }
  if (v11 == 1633889587) {
    goto LABEL_25;
  }
  if (v11 != 1634492771)
  {
LABEL_36:
    uint64_t inSpecifier = 0x46D703466;
    LODWORD(v41) = v11;
    HIDWORD(v39) = 4;
    uint64_t StreamDescription = AudioFormatGetProperty(0x6964636Eu, 0xCu, &inSpecifier, (UInt32 *)&v39 + 1, &a2->mFormatID);
    if (StreamDescription) {
      goto LABEL_51;
    }
    goto LABEL_48;
  }
  uint64_t v15 = *((void *)this + 11);
  uint64_t StreamDescription = 4294967246;
  if (v15 && *((_DWORD *)this + 24) >= 0x18u)
  {
    a2->uint64_t mFormatID = 1634492771;
    a2->float mSampleRate = (double)bswap32(*(_DWORD *)(v15 + 20));
    HIDWORD(v18) = *(unsigned __int8 *)(v15 + 5);
    LODWORD(v18) = (HIDWORD(v18) << 24) - 0x10000000;
    unsigned __int8 v17 = v18 >> 26;
    if (v17 > 4u) {
      AudioFormatFlags mFormatFlags = 0;
    }
    else {
      AudioFormatFlags mFormatFlags = dword_1901DC068[v17];
    }
    a2->AudioFormatFlags mFormatFlags = mFormatFlags;
    a2->mChannelsPerFrame = *(unsigned __int8 *)(v15 + 9);
    unsigned int v38 = bswap32(*(_DWORD *)v15);
    a2->mBytesPerPacket = 0;
    *(void *)&a2->mFramesPerPacket = v38;
    *(void *)&a2->mBitsPerChannel = 0;
    uint64_t mFormatID = 1634492771;
LABEL_61:
    int SourceBitDepthFromASBD = GetSourceBitDepthFromASBD((const AudioStreamBasicDescription *)mFormatID, mFormatFlags);
    uint64_t StreamDescription = 0;
LABEL_62:
    *((_DWORD *)this + 38) = SourceBitDepthFromASBD;
  }
LABEL_51:
  int v35 = *((_DWORD *)this + 16);
  if (v35 == 1685220723)
  {
    int v36 = 1885695587;
    goto LABEL_57;
  }
  if (v35 == 1701733217)
  {
    int v36 = *((_DWORD *)this + 20);
    if (v36 == 1667392371)
    {
LABEL_57:
      a2->uint64_t mFormatID = AudioFormatEncryptedFormatTranslator::EncryptFormatInFlavor(a2->mFormatID, v36);
      return StreamDescription;
    }
    if (v36 == 1667591779)
    {
      int v36 = 1667591779;
      goto LABEL_57;
    }
  }
  return StreamDescription;
}

const __CFDictionary *MP4BoxParser_SampleDescription::GetASEBoxes(MP4BoxParser_SampleDescription *this, const __CFDictionary **a2)
{
  BOOL v3 = (CFDictionaryRef *)((char *)this + 104);
  if (CACFDictionary::Size((MP4BoxParser_SampleDescription *)((char *)this + 104)) && *v3) {
    CFDictionaryRef result = CFDictionaryCreateCopy(0, *v3);
  }
  else {
    CFDictionaryRef result = 0;
  }
  *a2 = result;
  return result;
}

uint64_t MP4BoxParser_SampleDescription::GetChannelLayout(MP4BoxParser_SampleDescription *this, AudioChannelLayout **a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7, unsigned int *a8)
{
  int v11 = *((_DWORD *)this + 16);
  *a2 = 0;
  *a3 = 0;
  if (v11 == 1701733217)
  {
    int v11 = *((_DWORD *)this + 19);
  }
  else if (v11 == 1685220723)
  {
    int v11 = *((_DWORD *)this + 18);
    if (v11 != 1684103987)
    {
      if (v11 != 1684366131)
      {
        int v12 = 1702061171;
LABEL_11:
        if (v11 == v12) {
          goto LABEL_12;
        }
LABEL_38:
        uint64_t v21 = *((void *)this + 21) - *((void *)this + 20);
        *a3 = v21;
        if (!v21) {
          return 0;
        }
        size_t v22 = v21;
        uint64_t v23 = (AudioChannelLayout *)malloc_type_malloc(v21, 0x2C8E6D5CuLL);
        unint64_t v24 = v23;
        if (v23)
        {
          bzero(v23, v22);
          *a2 = v24;
          memcpy(v24, *((const void **)this + 20), *a3);
          return 0;
        }
        goto LABEL_44;
      }
      goto LABEL_24;
    }
    goto LABEL_30;
  }
  if (v11 > 1700998450)
  {
    if (v11 != 1700998451)
    {
      if (v11 == 1836069985)
      {
LABEL_12:
        if (!*((void *)this + 23)) {
          return 0;
        }
        *a3 = 32;
        int v13 = (AudioChannelLayout *)malloc_type_malloc(0x20uLL, 0x2C8E6D5CuLL);
        if (v13)
        {
          *(_OWORD *)&v13->AudioChannelLayoutTag mChannelLayoutTag = 0u;
          *(_OWORD *)&v13->mChannelDescriptions[0].mChannelFlags = 0u;
          *a2 = v13;
          DecoderConfigDescr::GetChannelLayoutTag((DecoderConfigDescr *)(*((void *)this + 23) + 296), &v13->mChannelLayoutTag);
          AudioChannelLayoutTag mChannelLayoutTag = (*a2)->mChannelLayoutTag;
          if (mChannelLayoutTag == 6553601 || mChannelLayoutTag == 6619138 || !((mChannelLayoutTag + 0x10000) >> 17))
          {
            free(*a2);
            uint64_t v15 = 0;
            *a2 = 0;
            *a3 = 0;
            return v15;
          }
          return 0;
        }
LABEL_44:
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        AudioFormatFlags v27 = std::bad_alloc::bad_alloc(exception);
      }
      int v12 = 1832149349;
      goto LABEL_11;
    }
LABEL_24:
    LODWORD(v30.mSampleRate) = 0;
    uint64_t v15 = ParseEAC3MP4Cookie(*((unsigned int **)this + 11), *((_DWORD *)this + 24), 0, &v30, 0, 0, a7, a8, *(unsigned int **)&v28.mSampleRate, v28.mFormatID, *(BOOL **)&v28.mBytesPerPacket, *(unsigned int **)&v28.mBytesPerFrame);
    if (!v15
      && LODWORD(v30.mSampleRate) != 6553601
      && LODWORD(v30.mSampleRate) != 6619138
      && (LODWORD(v30.mSampleRate) + 0x10000) >= 0x20000)
    {
      *a3 = 32;
      uint64_t v16 = (char *)malloc_type_malloc(0x20uLL, 0x2C8E6D5CuLL);
      if (!v16) {
        goto LABEL_44;
      }
      *(void *)(v16 + 20) = 0;
      *(void *)(v16 + 12) = 0;
      *((_DWORD *)v16 + 7) = 0;
      *a2 = (AudioChannelLayout *)v16;
      unsigned int mSampleRate_low = LODWORD(v30.mSampleRate);
      goto LABEL_36;
    }
    return v15;
  }
  if (v11 != 1633889587)
  {
    if (v11 != 1634492771) {
      goto LABEL_38;
    }
    if (*((_DWORD *)this + 24) != 48 || *(_DWORD *)(*((void *)this + 11) + 28) != 1851877475) {
      return 0;
    }
    *a3 = 32;
    uint64_t v16 = (char *)malloc_type_malloc(0x20uLL, 0x2C8E6D5CuLL);
    if (!v16) {
      goto LABEL_44;
    }
    uint64_t v15 = 0;
    *(_OWORD *)uint64_t v16 = 0u;
    *((_OWORD *)v16 + 1) = 0u;
    *a2 = (AudioChannelLayout *)v16;
    unsigned int mSampleRate_low = bswap32(*(_DWORD *)(*((void *)this + 11) + 36));
LABEL_37:
    *(_DWORD *)uint64_t v16 = mSampleRate_low;
    return v15;
  }
LABEL_30:
  int v18 = (*(uint64_t (**)(MP4BoxParser_SampleDescription *))(*(void *)this + 24))(this);
  if (MP4BoxParser::ReadDataSourceBytes(*((MP4BoxParser **)this + 1), (v18 + 4), 0x2FuLL, &v30))return 0; {
  unsigned int v29 = 0;
  }
  uint64_t v15 = ParseAC3MP4Cookie(*((unsigned __int8 **)this + 11), *((_DWORD *)this + 24), &v28, &v29, v19, v20);
  if (!v15 && v29 != 6553601 && v29 != 6619138 && v29 + 0x10000 >= 0x20000)
  {
    *a3 = 32;
    CA_calloc(0x20uLL);
    *a2 = (AudioChannelLayout *)v16;
    unsigned int mSampleRate_low = v29;
LABEL_36:
    *((_DWORD *)v16 + 1) = 0;
    *((_DWORD *)v16 + 2) = 0;
    goto LABEL_37;
  }
  return v15;
}

void AudioMetadataTimeline::AudioMetadataTimeline(AudioMetadataTimeline *this)
{
  uint64_t v2 = (char *)this + 592;
  BOOL v3 = (char *)this + 600;
  *((void *)this + 76) = 0;
  *((void *)this + 75) = 0;
  bzero(this, 0x250uLL);
  *((void *)this + 74) = v3;
  *((void *)this + 79) = 0;
  *((void *)this + 78) = 0;
  *((void *)this + 77) = (char *)this + 624;
  *((void *)this + 82) = 0;
  *((void *)this + 81) = 0;
  *((void *)this + 80) = (char *)this + 648;
  AudioMetadataMemoryPool::create<AudioMetadataFormatExtended>(&v6, (uint64_t)v2);
  *((void *)&v4 + 1) = *((void *)&v6 + 1);
  BOOL v5 = (std::__shared_weak_count *)*((void *)this + 1);
  *(_OWORD *)this = v6;
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    long long v4 = *(_OWORD *)this;
  }
  if (*((void *)&v4 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v4 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  operator new[]();
}

void sub_18FF5DCAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  AudioMetadataMemoryPool::~AudioMetadataMemoryPool(v15);
  std::deque<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::~deque[abi:ne180100](v14 + 528);
  std::deque<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::~deque[abi:ne180100](v14 + 464);
  std::deque<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::~deque[abi:ne180100](v14 + 400);
  std::deque<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::~deque[abi:ne180100](v14 + 336);
  std::deque<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::~deque[abi:ne180100](v14 + 272);
  std::deque<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::~deque[abi:ne180100](v14 + 208);
  std::deque<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::~deque[abi:ne180100](v14 + 144);
  std::deque<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::~deque[abi:ne180100](v14 + 80);
  std::deque<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::~deque[abi:ne180100](v14 + 16);
  uint64_t v16 = *(std::__shared_weak_count **)(v14 + 8);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  _Unwind_Resume(a1);
}

void AudioMetadataMemoryPool::create<AudioMetadataFormatExtended>(void *a1, uint64_t a2)
{
  long long v4 = (char *)operator new(0x90uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(_OWORD *)(v4 + 24) = 0u;
  *(void *)long long v4 = &unk_1EDFA23B8;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *((void *)v4 + 17) = 0;
  *a1 = v4 + 24;
  a1[1] = v4;
  uint64_t v7 = v4 + 24;
  BOOL v5 = std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)(a2 + 48), (unint64_t)(v4 + 24), (uint64_t *)&v7);
  atomic_fetch_add_explicit((atomic_ullong *volatile)v4 + 1, 1uLL, memory_order_relaxed);
  long long v6 = (std::__shared_weak_count *)v5[6];
  void v5[5] = (uint64_t)(v4 + 24);
  v5[6] = (uint64_t)v4;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_18FF5DE5C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void AudioMetadataMemoryPool::~AudioMetadataMemoryPool(AudioMetadataMemoryPool *this)
{
}

uint64_t std::deque<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  BOOL v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    long long v4 = (void *)(a1 + 40);
    BOOL v3 = *(void ***)(a1 + 8);
  }
  else
  {
    long long v4 = (void *)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 32);
    long long v6 = &v2[v5 >> 8];
    uint64_t v7 = (uint64_t)*v6;
    uint64_t v8 = (uint64_t)*v6 + 16 * v5;
    uint64_t v9 = *(uint64_t *)((char *)v2 + (((*(void *)(a1 + 40) + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*(unsigned char *)(a1 + 40) + v5);
    if (v8 != v9)
    {
      do
      {
        unint64_t v10 = *(std::__shared_weak_count **)(v8 + 8);
        if (v10)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
          uint64_t v7 = (uint64_t)*v6;
        }
        v8 += 16;
        if (v8 - v7 == 4096)
        {
          uint64_t v11 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v11;
          uint64_t v8 = v11;
        }
      }
      while (v8 != v9);
      uint64_t v2 = *(void ***)(a1 + 8);
      BOOL v3 = *(void ***)(a1 + 16);
    }
  }
  void *v4 = 0;
  unint64_t v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      BOOL v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v13 = v12 >> 3;
  if (v13 == 1)
  {
    uint64_t v14 = 128;
    goto LABEL_16;
  }
  if (v13 == 2)
  {
    uint64_t v14 = 256;
LABEL_16:
    *(void *)(a1 + 32) = v14;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v15 = *v2++;
      operator delete(v15);
    }
    while (v2 != v3);
    uint64_t v17 = *(void *)(a1 + 8);
    uint64_t v16 = *(void *)(a1 + 16);
    if (v16 != v17) {
      *(void *)(a1 + 16) = v16 + ((v17 - v16 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::destroy(*a1);
    std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::destroy(a1[1]);
    uint64_t v2 = (std::__shared_weak_count *)a1[6];
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::__map_value_compare<void *,std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::__map_value_compare<void *,std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>>>::destroy(*a1);
    std::__tree<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::__map_value_compare<void *,std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>>>::destroy(a1[1]);
    uint64_t v2 = a1[5];
    if (v2)
    {
      uint64_t v3 = a1[6];
      long long v4 = (void *)a1[5];
      if (v3 != v2)
      {
        do
        {
          unint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
          if (v5) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v5);
          }
          v3 -= 16;
        }
        while (v3 != v2);
        long long v4 = (void *)a1[5];
      }
      a1[6] = v2;
      operator delete(v4);
    }
    operator delete(a1);
  }
}

void std::shared_ptr<void *[]>::shared_ptr[abi:ne180100]<void *,std::default_delete<void *[]>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_18FF5E154(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    MEMORY[0x192FC8910](v1, 0x80C80B8603338);
  }
  __cxa_rethrow();
}

void sub_18FF5E17C(_Unwind_Exception *a1)
{
}

uint64_t **std::__tree<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::__map_value_compare<void *,std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>(uint64_t **a1, unint64_t a2, uint64_t **a3)
{
  long long v6 = a1 + 1;
  unint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        unint64_t v5 = *v7;
        long long v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      unint64_t v5 = v7[1];
      if (!v5)
      {
        long long v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = (uint64_t *)v7;
    uint64_t v7 = (uint64_t **)operator new(0x40uLL);
    unsigned char v7[4] = *a3;
    v7[5] = 0;
    v7[6] = 0;
    v7[7] = 0;
    char *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *long long v6 = (uint64_t *)v7;
    unint64_t v10 = (uint64_t *)**a1;
    uint64_t v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      uint64_t v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void std::vector<std::shared_ptr<void *[]>>::push_back[abi:ne180100](uint64_t a1, long long *a2)
{
  unint64_t v5 = *(void **)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v8 = *(void **)a1;
    uint64_t v9 = ((uint64_t)v5 - *(void *)a1) >> 4;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v4 - (void)v8;
    if (v11 >> 3 > v10) {
      unint64_t v10 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v13 = (char *)operator new(16 * v12);
    uint64_t v14 = &v13[16 * v9];
    long long v15 = *a2;
    *(_OWORD *)uint64_t v14 = *a2;
    if (*((void *)&v15 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 1uLL, memory_order_relaxed);
      unint64_t v8 = *(void **)a1;
      unint64_t v5 = *(void **)(a1 + 8);
    }
    uint64_t v16 = &v13[16 * v12];
    uint64_t v7 = v14 + 16;
    if (v5 == v8)
    {
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v7;
      *(void *)(a1 + 16) = v16;
    }
    else
    {
      do
      {
        long long v17 = *((_OWORD *)v5 - 1);
        v5 -= 2;
        *((_OWORD *)v14 - 1) = v17;
        v14 -= 16;
        void *v5 = 0;
        v5[1] = 0;
      }
      while (v5 != v8);
      unint64_t v8 = *(void **)a1;
      int v18 = *(void **)(a1 + 8);
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v7;
      *(void *)(a1 + 16) = v16;
      while (v18 != v8)
      {
        uint64_t v19 = (std::__shared_weak_count *)*(v18 - 1);
        if (v19) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v19);
        }
        v18 -= 2;
      }
    }
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    uint64_t v6 = *((void *)a2 + 1);
    void *v5 = *(void *)a2;
    v5[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v7 = v5 + 2;
  }
  *(void *)(a1 + 8) = v7;
}

uint64_t std::__shared_ptr_pointer<void * *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    JUMPOUT(0x192FC8910);
  }
  return result;
}

void std::__shared_ptr_pointer<void * *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

uint64_t *std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>(uint64_t **a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 1;
  unint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        unint64_t v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      unint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = (uint64_t *)operator new(0x38uLL);
    uint64_t v10 = *a3;
    v9[5] = 0;
    v9[6] = 0;
    v9[4] = v10;
    return v9;
  }
  return (uint64_t *)v7;
}

void std::__shared_ptr_emplace<AudioMetadataFormatExtended>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA23B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

void std::__shared_ptr_emplace<AudioMetadataFormatExtended>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA23B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void AudioMetadataTimeline::addEvent(uint64_t a1, unsigned int **a2, double a3)
{
  v2692 = 0;
  v2693 = 0;
  v2694 = 0;
  v2689 = 0;
  v2690 = 0;
  v2691 = 0;
  v2686 = 0;
  v2687 = 0;
  uint64_t v2688 = 0;
  v2683 = 0;
  v2684 = 0;
  v2685 = 0;
  v2680 = 0;
  v2681 = 0;
  v2682 = 0;
  v2677 = 0;
  v2678 = 0;
  v2679 = 0;
  v2674 = 0;
  v2675 = 0;
  v2676 = 0;
  v2671 = 0;
  v2672 = 0;
  v2673 = 0;
  v2668 = 0;
  v2669 = 0;
  v2670 = 0;
  uint64_t v6 = (char *)operator new(0x40uLL);
  uint64_t v7 = (atomic_ullong *)v6;
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EDFA2738;
  *(_OWORD *)(v6 + 24) = 0u;
  v2603 = v6 + 24;
  *(_OWORD *)(v6 + 40) = 0u;
  *((void *)v6 + 7) = 0;
  unint64_t v8 = *a2;
  atomic_ullong v9 = (atomic_ullong)a2[1];
  if (v9)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    uint64_t v10 = (std::__shared_weak_count *)*((void *)v6 + 4);
    v7[3] = (atomic_ullong)v8;
    unsigned char v7[4] = v9;
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
  }
  else
  {
    *((void *)v6 + 3) = v8;
    *((void *)v6 + 4) = 0;
  }
  uint64_t v11 = (std::__shared_weak_count *)v7[6];
  v7[5] = 0;
  v7[6] = 0;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  unint64_t v12 = *a2;
  v2636 = (std::__shared_weak_count *)v7;
  v2616 = (int64x2_t *)a1;
  v2604 = a2;
  if (**a2)
  {
    uint64_t v13 = 0;
    uint64_t v2613 = a1 + 592;
    uint64_t v14 = (uint64_t **)(a1 + 640);
    v2637 = (uint64_t **)(a1 + 640);
    while (1)
    {
      uint64_t v2601 = v13;
      unint64_t v15 = *(void *)(*(void *)(v12 + 1) + 8 * v13);
      uint64_t v16 = (char *)operator new(0x40uLL);
      *((void *)v16 + 1) = 0;
      long long v17 = (atomic_ullong *)(v16 + 8);
      *((void *)v16 + 2) = 0;
      *(void *)uint64_t v16 = &unk_1EDFA25E8;
      *(_OWORD *)(v16 + 24) = 0u;
      v2605 = v16 + 24;
      unint64_t v2606 = v15;
      *(_OWORD *)(v16 + 40) = 0u;
      v2607 = v16;
      *((void *)v16 + 7) = 0;
      *(void *)&long long v2695 = v15;
      if (!std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>(v14, v15, (uint64_t *)&v2695)[5])__assert_rtn("lookup", "AudioMetadataTimeline.hpp", 109, "mObjects[rawPtr] != nullptr"); {
      int v18 = std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>(v14, v15, (uint64_t *)&v2695);
      }
      long long v19 = *(_OWORD *)(v18 + 5);
      uint64_t v20 = v18[6];
      if (v20) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v21 = (std::__shared_weak_count *)*((void *)v2607 + 4);
      *(_OWORD *)(v2607 + 24) = v19;
      if (v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }
      size_t v22 = (std::__shared_weak_count *)*((void *)v2607 + 6);
      atomic_fetch_add_explicit(v7 + 1, 1uLL, memory_order_relaxed);
      *((void *)v2607 + 5) = v2603;
      *((void *)v2607 + 6) = v7;
      if (v22) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      }
      *((double *)v2607 + 7) = a3;
      uint64_t v23 = v2693;
      if (v2693 >= v2694)
      {
        UInt32 v26 = v2692;
        uint64_t v27 = (v2693 - v2692) >> 4;
        unint64_t v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 60) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v29 = v2694 - v2692;
        if ((v2694 - v2692) >> 3 > v28) {
          unint64_t v28 = v29 >> 3;
        }
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v30 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v28;
        }
        if (v30 >> 60) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        int v31 = (char *)operator new(16 * v30);
        *(void *)&long long v32 = v2605;
        *((void *)&v32 + 1) = v2607;
        CFStringRef v33 = &v31[16 * v27];
        *(_OWORD *)CFStringRef v33 = v32;
        UInt32 v25 = v33 + 16;
        atomic_fetch_add_explicit(v17, 1uLL, memory_order_relaxed);
        if (v23 == v26)
        {
          v2692 = v33;
          v2693 = v33 + 16;
          v2694 = &v31[16 * v30];
        }
        else
        {
          do
          {
            long long v34 = *((_OWORD *)v23 - 1);
            v23 -= 16;
            *((_OWORD *)v33 - 1) = v34;
            v33 -= 16;
            *(void *)uint64_t v23 = 0;
            *((void *)v23 + 1) = 0;
          }
          while (v23 != v26);
          int v35 = v2692;
          uint64_t v23 = v2693;
          v2692 = v33;
          v2693 = v25;
          v2694 = &v31[16 * v30];
          if (v23 != v35)
          {
            do
            {
              int v36 = (std::__shared_weak_count *)*((void *)v23 - 1);
              if (v36) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v36);
              }
              v23 -= 16;
            }
            while (v23 != v35);
            uint64_t v23 = v35;
          }
        }
        unint64_t v24 = v2604;
        if (v23) {
          operator delete(v23);
        }
      }
      else
      {
        unint64_t v24 = v2604;
        *(void *)v2693 = v2605;
        *((void *)v23 + 1) = v2607;
        atomic_fetch_add_explicit((atomic_ullong *volatile)v2607 + 1, 1uLL, memory_order_relaxed);
        UInt32 v25 = v23 + 16;
      }
      unint64_t v37 = v2606;
      v2693 = v25;
      if (*(_DWORD *)(v2606 + 52)) {
        break;
      }
LABEL_267:
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v2607);
      uint64_t v13 = v2601 + 1;
      unint64_t v12 = *v24;
      if (v2601 + 1 >= (unint64_t)**v24)
      {
        unint64_t v195 = v2692;
        goto LABEL_271;
      }
    }
    uint64_t v38 = 0;
    while (1)
    {
      uint64_t v2602 = v38;
      unint64_t v39 = *(void *)(*(void *)(v37 + 56) + 8 * v38);
      long long v40 = (char *)operator new(0x40uLL);
      *((void *)v40 + 1) = 0;
      uint64_t v41 = (atomic_ullong *)(v40 + 8);
      *((void *)v40 + 2) = 0;
      *(void *)long long v40 = &unk_1EDFA2578;
      *(_OWORD *)(v40 + 24) = 0u;
      *(void *)&long long v2614 = v40 + 24;
      *((void *)&v2614 + 1) = v40;
      *(_OWORD *)(v40 + 40) = 0u;
      *((void *)v40 + 7) = 0;
      *(void *)&long long v2695 = v39;
      if (!std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>(v14, v39, (uint64_t *)&v2695)[5])__assert_rtn("lookup", "AudioMetadataTimeline.hpp", 109, "mObjects[rawPtr] != nullptr"); {
      long long v42 = std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>(v14, v39, (uint64_t *)&v2695);
      }
      long long v43 = *(_OWORD *)(v42 + 5);
      uint64_t v44 = v42[6];
      if (v44) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v44 + 8), 1uLL, memory_order_relaxed);
      }
      CFStringRef v45 = *(std::__shared_weak_count **)(*((void *)&v2614 + 1) + 32);
      *(_OWORD *)(*((void *)&v2614 + 1) + 24) = v43;
      if (v45) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v45);
      }
      atomic_fetch_add_explicit((atomic_ullong *volatile)v2607 + 1, 1uLL, memory_order_relaxed);
      CFDataRef v46 = *(std::__shared_weak_count **)(*((void *)&v2614 + 1) + 48);
      *(void *)(*((void *)&v2614 + 1) + 40) = v2605;
      *(void *)(*((void *)&v2614 + 1) + 48) = v2607;
      if (v46) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v46);
      }
      *(double *)(*((void *)&v2614 + 1) + 56) = a3;
      long long v47 = v2690;
      if (v2690 < v2691)
      {
        *(void *)v2690 = v2614;
        v47[1] = *((void *)&v2614 + 1);
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v2614 + 1) + 8), 1uLL, memory_order_relaxed);
        uint64_t v48 = (char *)(v47 + 2);
        goto LABEL_62;
      }
      unint64_t v49 = (unint64_t)v2689;
      uint64_t v50 = (v2690 - v2689) >> 4;
      unint64_t v51 = v50 + 1;
      if ((unint64_t)(v50 + 1) >> 60) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v52 = v2691 - v2689;
      if ((v2691 - v2689) >> 3 > v51) {
        unint64_t v51 = v52 >> 3;
      }
      if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v53 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v53 = v51;
      }
      if (v53 >> 60) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      long long v54 = (char *)operator new(16 * v53);
      CFAllocatorRef v55 = &v54[16 * v50];
      *(_OWORD *)CFAllocatorRef v55 = v2614;
      uint64_t v48 = v55 + 16;
      atomic_fetch_add_explicit(v41, 1uLL, memory_order_relaxed);
      if (v47 == (void *)v49)
      {
        v2689 = v55;
        v2690 = v55 + 16;
        v2691 = &v54[16 * v53];
        if (v47) {
          goto LABEL_61;
        }
      }
      else
      {
        do
        {
          long long v56 = *((_OWORD *)v47 - 1);
          v47 -= 2;
          *((_OWORD *)v55 - 1) = v56;
          v55 -= 16;
          *long long v47 = 0;
          v47[1] = 0;
        }
        while (v47 != (void *)v49);
        unint64_t v57 = (unint64_t)v2689;
        long long v47 = v2690;
        v2689 = v55;
        v2690 = v48;
        v2691 = &v54[16 * v53];
        if (v47 != (void *)v57)
        {
          do
          {
            unint64_t v58 = (std::__shared_weak_count *)*(v47 - 1);
            if (v58) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v58);
            }
            v47 -= 2;
          }
          while (v47 != (void *)v57);
          long long v47 = (void *)v57;
        }
        if (v47) {
LABEL_61:
        }
          operator delete(v47);
      }
LABEL_62:
      v2690 = v48;
      if (*(_DWORD *)(v39 + 24))
      {
        uint64_t v59 = 0;
        unint64_t v2612 = v39;
        while (2)
        {
          uint64_t v2608 = v59;
          unint64_t v60 = *(void *)(*(void *)(v39 + 28) + 8 * v59);
          long long v61 = (char *)operator new(0x40uLL);
          *((void *)v61 + 1) = 0;
          *((void *)v61 + 2) = 0;
          *(void *)long long v61 = &unk_1EDFA2540;
          *(_OWORD *)(v61 + 24) = 0u;
          *(_OWORD *)(v61 + 40) = 0u;
          *((void *)v61 + 7) = 0;
          *(void *)&long long v2667 = v61 + 24;
          *((void *)&v2667 + 1) = v61;
          unint64_t v2617 = v60;
          AudioMetadataMemoryPool::lookup<AudioMetadataObject>(&v2695, v2613, v60);
          uint64_t v62 = (std::__shared_weak_count *)*((void *)v61 + 4);
          *(_OWORD *)(v61 + 24) = v2695;
          if (v62) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v62);
          }
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v2614 + 1) + 8), 1uLL, memory_order_relaxed);
          uint64_t v63 = (std::__shared_weak_count *)*((void *)v61 + 6);
          *(_OWORD *)(v61 + 40) = v2614;
          if (v63) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v63);
          }
          *((double *)v61 + 7) = a3;
          std::vector<std::shared_ptr<void *[]>>::push_back[abi:ne180100]((uint64_t)&v2686, &v2667);
          unint64_t v64 = v60;
          unint64_t v2611 = *(void *)(v60 + 104);
          if (!v2611) {
            goto LABEL_154;
          }
          long long v65 = (char *)operator new(0x40uLL);
          *((void *)v65 + 1) = 0;
          uint64_t v66 = (atomic_ullong *)(v65 + 8);
          *((void *)v65 + 2) = 0;
          *(void *)long long v65 = &unk_1EDFA2620;
          *(_OWORD *)(v65 + 24) = 0u;
          v2610 = v65 + 24;
          *(_OWORD *)(v65 + 40) = 0u;
          *((void *)v65 + 7) = 0;
          *(void *)&long long v2695 = v2611;
          if (!std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>(v14, v2611, (uint64_t *)&v2695)[5])__assert_rtn("lookup", "AudioMetadataTimeline.hpp", 109, "mObjects[rawPtr] != nullptr"); {
          long long v67 = std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>(v14, v2611, (uint64_t *)&v2695);
          }
          long long v68 = *(_OWORD *)(v67 + 5);
          uint64_t v69 = v67[6];
          if (v69) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v69 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v70 = (std::__shared_weak_count *)*((void *)v65 + 4);
          *(_OWORD *)(v65 + 24) = v68;
          if (v70) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v70);
          }
          atomic_fetch_add_explicit((atomic_ullong *volatile)v61 + 1, 1uLL, memory_order_relaxed);
          long long v71 = (std::__shared_weak_count *)*((void *)v65 + 6);
          *((void *)v65 + 5) = v61 + 24;
          *((void *)v65 + 6) = v61;
          if (v71) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v71);
          }
          *((double *)v65 + 7) = a3;
          long long v72 = v2684;
          v2609 = v65;
          if (v2684 < v2685)
          {
            *(void *)v2684 = v2610;
            v72[1] = v65;
            atomic_fetch_add_explicit((atomic_ullong *volatile)v65 + 1, 1uLL, memory_order_relaxed);
            long long v73 = (char *)(v72 + 2);
            goto LABEL_94;
          }
          unint64_t v74 = (unint64_t)v2683;
          uint64_t v75 = (v2684 - v2683) >> 4;
          unint64_t v76 = v75 + 1;
          if ((unint64_t)(v75 + 1) >> 60) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v77 = v2685 - v2683;
          if ((v2685 - v2683) >> 3 > v76) {
            unint64_t v76 = v77 >> 3;
          }
          if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v78 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v78 = v76;
          }
          if (v78 >> 60) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          long long v79 = (char *)operator new(16 * v78);
          *(void *)&long long v80 = v2610;
          *((void *)&v80 + 1) = v2609;
          long long v81 = &v79[16 * v75];
          *(_OWORD *)long long v81 = v80;
          long long v73 = v81 + 16;
          atomic_fetch_add_explicit(v66, 1uLL, memory_order_relaxed);
          if (v72 == (void *)v74)
          {
            v2683 = v81;
            v2684 = v81 + 16;
            v2685 = &v79[16 * v78];
            long long v65 = v2609;
            if (v72) {
              goto LABEL_93;
            }
          }
          else
          {
            do
            {
              long long v82 = *((_OWORD *)v72 - 1);
              v72 -= 2;
              *((_OWORD *)v81 - 1) = v82;
              v81 -= 16;
              void *v72 = 0;
              v72[1] = 0;
            }
            while (v72 != (void *)v74);
            unint64_t v83 = (unint64_t)v2683;
            long long v72 = v2684;
            v2683 = v81;
            v2684 = v73;
            v2685 = &v79[16 * v78];
            long long v65 = v2609;
            if (v72 != (void *)v83)
            {
              do
              {
                uint64_t v84 = (std::__shared_weak_count *)*(v72 - 1);
                if (v84) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v84);
                }
                v72 -= 2;
              }
              while (v72 != (void *)v83);
              long long v72 = (void *)v83;
            }
            if (v72) {
LABEL_93:
            }
              operator delete(v72);
          }
LABEL_94:
          v2684 = v73;
          if (*(_DWORD *)(v2611 + 28))
          {
            unint64_t v85 = **(void **)(v2611 + 32);
            unint64_t v86 = (char *)operator new(0x40uLL);
            *((void *)v86 + 1) = 0;
            v2615 = (atomic_ullong *)(v86 + 8);
            *((void *)v86 + 2) = 0;
            *(void *)unint64_t v86 = &unk_1EDFA2700;
            *(_OWORD *)(v86 + 24) = 0u;
            v2647 = v86 + 24;
            *(_OWORD *)(v86 + 40) = 0u;
            *((void *)v86 + 7) = 0;
            *(void *)&long long v2695 = v85;
            if (!std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>(v14, v85, (uint64_t *)&v2695)[5])__assert_rtn("lookup", "AudioMetadataTimeline.hpp", 109, "mObjects[rawPtr] != nullptr"); {
            uint64_t v87 = std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>(v14, v85, (uint64_t *)&v2695);
            }
            long long v88 = *(_OWORD *)(v87 + 5);
            uint64_t v89 = v87[6];
            if (v89) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v89 + 8), 1uLL, memory_order_relaxed);
            }
            long long v90 = (std::__shared_weak_count *)*((void *)v86 + 4);
            *(_OWORD *)(v86 + 24) = v88;
            if (v90) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v90);
            }
            atomic_fetch_add_explicit((atomic_ullong *volatile)v65 + 1, 1uLL, memory_order_relaxed);
            long long v91 = (std::__shared_weak_count *)*((void *)v86 + 6);
            *((void *)v86 + 5) = v2610;
            *((void *)v86 + 6) = v65;
            if (v91) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v91);
            }
            *((double *)v86 + 7) = a3;
            long long v92 = v2681;
            if (v2681 >= v2682)
            {
              unint64_t v94 = (unint64_t)v2680;
              uint64_t v95 = (v2681 - v2680) >> 4;
              unint64_t v96 = v95 + 1;
              if ((unint64_t)(v95 + 1) >> 60) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v97 = v2682 - v2680;
              if ((v2682 - v2680) >> 3 > v96) {
                unint64_t v96 = v97 >> 3;
              }
              if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v98 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v98 = v96;
              }
              if (v98 >> 60) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              long long v99 = (char *)operator new(16 * v98);
              *(void *)&long long v100 = v86 + 24;
              *((void *)&v100 + 1) = v86;
              uint64_t v101 = &v99[16 * v95];
              *(_OWORD *)uint64_t v101 = v100;
              long long v93 = v101 + 16;
              atomic_fetch_add_explicit(v2615, 1uLL, memory_order_relaxed);
              if (v92 == (void *)v94)
              {
                v2680 = v101;
                v2681 = v101 + 16;
                v2682 = &v99[16 * v98];
                if (!v92) {
                  goto LABEL_120;
                }
              }
              else
              {
                do
                {
                  long long v102 = *((_OWORD *)v92 - 1);
                  v92 -= 2;
                  *((_OWORD *)v101 - 1) = v102;
                  v101 -= 16;
                  void *v92 = 0;
                  v92[1] = 0;
                }
                while (v92 != (void *)v94);
                unint64_t v103 = (unint64_t)v2680;
                long long v92 = v2681;
                v2680 = v101;
                v2681 = v93;
                v2682 = &v99[16 * v98];
                if (v92 != (void *)v103)
                {
                  do
                  {
                    long long v104 = (std::__shared_weak_count *)*(v92 - 1);
                    if (v104) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v104);
                    }
                    v92 -= 2;
                  }
                  while (v92 != (void *)v103);
                  long long v92 = (void *)v103;
                }
                if (!v92) {
                  goto LABEL_120;
                }
              }
              operator delete(v92);
            }
            else
            {
              *(void *)v2681 = v2647;
              v92[1] = v86;
              atomic_fetch_add_explicit((atomic_ullong *volatile)v86 + 1, 1uLL, memory_order_relaxed);
              long long v93 = (char *)(v92 + 2);
            }
LABEL_120:
            v2681 = v93;
            if (!*(_DWORD *)(v85 + 24))
            {
LABEL_150:
              atomic_fetch_add_explicit(v2615, 1uLL, memory_order_relaxed);
              operator new[]();
            }
            uint64_t v105 = 0;
            while (1)
            {
              unint64_t v106 = *(void *)(*(void *)(v85 + 28) + 8 * v105);
              uint64_t v107 = (char *)operator new(0x40uLL);
              *((void *)v107 + 1) = 0;
              *((void *)v107 + 2) = 0;
              *(void *)uint64_t v107 = &unk_1EDFA2658;
              *(_OWORD *)(v107 + 24) = 0u;
              *(_OWORD *)(v107 + 40) = 0u;
              *((void *)v107 + 7) = 0;
              *(void *)&long long v2695 = v106;
              if (!std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>(v14, v106, (uint64_t *)&v2695)[5])__assert_rtn("lookup", "AudioMetadataTimeline.hpp", 109, "mObjects[rawPtr] != nullptr"); {
              uint64_t v108 = std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>(v14, v106, (uint64_t *)&v2695);
              }
              long long v109 = *(_OWORD *)(v108 + 5);
              uint64_t v110 = v108[6];
              if (v110) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v110 + 8), 1uLL, memory_order_relaxed);
              }
              unint64_t v111 = (std::__shared_weak_count *)*((void *)v107 + 4);
              *(_OWORD *)(v107 + 24) = v109;
              if (v111) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v111);
              }
              atomic_fetch_add_explicit((atomic_ullong *volatile)v86 + 1, 1uLL, memory_order_relaxed);
              uint64_t v112 = (std::__shared_weak_count *)*((void *)v107 + 6);
              *((void *)v107 + 5) = v2647;
              *((void *)v107 + 6) = v86;
              if (v112) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v112);
              }
              *((double *)v107 + 7) = a3;
              uint64_t v113 = v2678;
              if (v2678 >= v2679)
              {
                long long v115 = v2677;
                uint64_t v116 = (v2678 - v2677) >> 4;
                unint64_t v117 = v116 + 1;
                if ((unint64_t)(v116 + 1) >> 60) {
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v118 = v2679 - v2677;
                if ((v2679 - v2677) >> 3 > v117) {
                  unint64_t v117 = v118 >> 3;
                }
                if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v119 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v119 = v117;
                }
                if (v119 >> 60) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                long long v120 = (char *)operator new(16 * v119);
                *(void *)&long long v121 = v107 + 24;
                *((void *)&v121 + 1) = v107;
                long long v122 = &v120[16 * v116];
                *(_OWORD *)long long v122 = v121;
                uint64_t v114 = v122 + 16;
                atomic_fetch_add_explicit((atomic_ullong *volatile)v107 + 1, 1uLL, memory_order_relaxed);
                if (v113 == v115)
                {
                  v2677 = &v120[16 * v116];
                  v2678 = v122 + 16;
                  v2679 = &v120[16 * v119];
                  uint64_t v14 = v2637;
                  if (!v113) {
                    goto LABEL_149;
                  }
                }
                else
                {
                  do
                  {
                    long long v123 = *((_OWORD *)v113 - 1);
                    v113 -= 16;
                    *((_OWORD *)v122 - 1) = v123;
                    v122 -= 16;
                    *(void *)uint64_t v113 = 0;
                    *((void *)v113 + 1) = 0;
                  }
                  while (v113 != v115);
                  long long v124 = v2677;
                  uint64_t v113 = v2678;
                  v2677 = v122;
                  v2678 = v114;
                  v2679 = &v120[16 * v119];
                  uint64_t v14 = v2637;
                  if (v113 != v124)
                  {
                    do
                    {
                      uint64_t v125 = (std::__shared_weak_count *)*((void *)v113 - 1);
                      if (v125) {
                        std::__shared_weak_count::__release_shared[abi:ne180100](v125);
                      }
                      v113 -= 16;
                    }
                    while (v113 != v124);
                    uint64_t v113 = v124;
                  }
                  if (!v113) {
                    goto LABEL_149;
                  }
                }
                operator delete(v113);
              }
              else
              {
                *(void *)v2678 = v107 + 24;
                *((void *)v113 + 1) = v107;
                atomic_fetch_add_explicit((atomic_ullong *volatile)v107 + 1, 1uLL, memory_order_relaxed);
                uint64_t v114 = v113 + 16;
              }
LABEL_149:
              v2678 = v114;
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v107);
              if (++v105 >= (unint64_t)*(unsigned int *)(v85 + 24)) {
                goto LABEL_150;
              }
            }
          }
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v65);
          unint64_t v64 = v2617;
LABEL_154:
          if (*(_DWORD *)(v64 + 136))
          {
            unint64_t v126 = 0;
            while (1)
            {
              unint64_t v127 = *(void *)(*(void *)(v64 + 140) + 8 * v126);
              long long v128 = (char *)operator new(0x40uLL);
              *((void *)v128 + 1) = 0;
              *((void *)v128 + 2) = 0;
              *(void *)long long v128 = &unk_1EDFA25B0;
              *(_OWORD *)(v128 + 24) = 0u;
              long long v129 = v128 + 24;
              *(_OWORD *)(v128 + 40) = 0u;
              *((void *)v128 + 7) = 0;
              *(void *)&long long v2695 = v127;
              if (!std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>(v2637, v127, (uint64_t *)&v2695)[5])__assert_rtn("lookup", "AudioMetadataTimeline.hpp", 109, "mObjects[rawPtr] != nullptr"); {
              long long v130 = std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>(v2637, v127, (uint64_t *)&v2695);
              }
              long long v131 = *(_OWORD *)(v130 + 5);
              uint64_t v132 = v130[6];
              if (v132) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v132 + 8), 1uLL, memory_order_relaxed);
              }
              v133 = (std::__shared_weak_count *)*((void *)v128 + 4);
              *(_OWORD *)(v128 + 24) = v131;
              if (v133) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v133);
              }
              long long v134 = v2667;
              if (*((void *)&v2667 + 1)) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v2667 + 1) + 8), 1uLL, memory_order_relaxed);
              }
              unint64_t v135 = (std::__shared_weak_count *)*((void *)v128 + 6);
              *(_OWORD *)(v128 + 40) = v134;
              if (v135) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v135);
              }
              *((double *)v128 + 7) = a3;
              unint64_t v136 = v2675;
              if (v2675 < v2676)
              {
                *(void *)v2675 = v129;
                v136[1] = v128;
                atomic_fetch_add_explicit((atomic_ullong *volatile)v128 + 1, 1uLL, memory_order_relaxed);
                uint64_t v137 = (char *)(v136 + 2);
                goto LABEL_186;
              }
              unint64_t v138 = (unint64_t)v2674;
              uint64_t v139 = (v2675 - v2674) >> 4;
              unint64_t v140 = v139 + 1;
              if ((unint64_t)(v139 + 1) >> 60) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v141 = v2676 - v2674;
              if ((v2676 - v2674) >> 3 > v140) {
                unint64_t v140 = v141 >> 3;
              }
              if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v142 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v142 = v140;
              }
              if (v142 >> 60) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              long long v143 = (char *)operator new(16 * v142);
              *(void *)&long long v144 = v128 + 24;
              *((void *)&v144 + 1) = v128;
              long long v145 = &v143[16 * v139];
              *(_OWORD *)long long v145 = v144;
              uint64_t v137 = v145 + 16;
              atomic_fetch_add_explicit((atomic_ullong *volatile)v128 + 1, 1uLL, memory_order_relaxed);
              if (v136 == (void *)v138) {
                break;
              }
              do
              {
                long long v146 = *((_OWORD *)v136 - 1);
                v136 -= 2;
                *((_OWORD *)v145 - 1) = v146;
                v145 -= 16;
                void *v136 = 0;
                v136[1] = 0;
              }
              while (v136 != (void *)v138);
              unint64_t v147 = (unint64_t)v2674;
              unint64_t v136 = v2675;
              v2674 = v145;
              v2675 = v137;
              v2676 = &v143[16 * v142];
              if (v136 == (void *)v147) {
                goto LABEL_184;
              }
              uint64_t v7 = (atomic_ullong *)v2636;
              do
              {
                long long v148 = (std::__shared_weak_count *)*(v136 - 1);
                if (v148) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v148);
                }
                v136 -= 2;
              }
              while (v136 != (void *)v147);
              unint64_t v136 = (void *)v147;
              if (v147) {
                goto LABEL_185;
              }
LABEL_186:
              v2675 = v137;
              unint64_t v149 = *(void *)(v127 + 12);
              if (v149)
              {
                uint64_t v150 = (char *)operator new(0x40uLL);
                *((void *)v150 + 1) = 0;
                *((void *)v150 + 2) = 0;
                *(void *)uint64_t v150 = &unk_1EDFA2690;
                *(_OWORD *)(v150 + 24) = 0u;
                long long v151 = v150 + 24;
                *(_OWORD *)(v150 + 40) = 0u;
                *((void *)v150 + 7) = 0;
                *(void *)&long long v2695 = v149;
                if (!std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>(v2637, v149, (uint64_t *)&v2695)[5])__assert_rtn("lookup", "AudioMetadataTimeline.hpp", 109, "mObjects[rawPtr] != nullptr"); {
                long long v152 = std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>(v2637, v149, (uint64_t *)&v2695);
                }
                long long v153 = *(_OWORD *)(v152 + 5);
                uint64_t v154 = v152[6];
                if (v154) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v154 + 8), 1uLL, memory_order_relaxed);
                }
                long long v155 = (std::__shared_weak_count *)*((void *)v150 + 4);
                *(_OWORD *)(v150 + 24) = v153;
                if (v155) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v155);
                }
                atomic_fetch_add_explicit((atomic_ullong *volatile)v128 + 1, 1uLL, memory_order_relaxed);
                long long v156 = (std::__shared_weak_count *)*((void *)v150 + 6);
                *((void *)v150 + 5) = v129;
                *((void *)v150 + 6) = v128;
                if (v156) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v156);
                }
                *((double *)v150 + 7) = a3;
                uint64_t v157 = v2672;
                if (v2672 < v2673)
                {
                  *(void *)v2672 = v151;
                  v157[1] = v150;
                  atomic_fetch_add_explicit((atomic_ullong *volatile)v150 + 1, 1uLL, memory_order_relaxed);
                  uint64_t v158 = (char *)(v157 + 2);
                  goto LABEL_212;
                }
                unint64_t v159 = (unint64_t)v2671;
                uint64_t v160 = (v2672 - v2671) >> 4;
                unint64_t v161 = v160 + 1;
                if ((unint64_t)(v160 + 1) >> 60) {
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v162 = v2673 - v2671;
                if ((v2673 - v2671) >> 3 > v161) {
                  unint64_t v161 = v162 >> 3;
                }
                if ((unint64_t)v162 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v163 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v163 = v161;
                }
                if (v163 >> 60) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                uint64_t v164 = (char *)operator new(16 * v163);
                *(void *)&long long v165 = v150 + 24;
                *((void *)&v165 + 1) = v150;
                unint64_t v166 = &v164[16 * v160];
                *(_OWORD *)unint64_t v166 = v165;
                uint64_t v158 = v166 + 16;
                atomic_fetch_add_explicit((atomic_ullong *volatile)v150 + 1, 1uLL, memory_order_relaxed);
                if (v157 == (void *)v159)
                {
                  v2671 = v166;
                  v2672 = v166 + 16;
                  v2673 = &v164[16 * v163];
                  uint64_t v7 = (atomic_ullong *)v2636;
                  unint64_t v39 = v2612;
                  if (v157) {
                    goto LABEL_211;
                  }
                }
                else
                {
                  do
                  {
                    long long v167 = *((_OWORD *)v157 - 1);
                    v157 -= 2;
                    *((_OWORD *)v166 - 1) = v167;
                    v166 -= 16;
                    *uint64_t v157 = 0;
                    v157[1] = 0;
                  }
                  while (v157 != (void *)v159);
                  unint64_t v168 = (unint64_t)v2671;
                  uint64_t v157 = v2672;
                  v2671 = v166;
                  v2672 = v158;
                  v2673 = &v164[16 * v163];
                  unint64_t v39 = v2612;
                  if (v157 == (void *)v168)
                  {
                    uint64_t v7 = (atomic_ullong *)v2636;
                    if (v157) {
                      goto LABEL_211;
                    }
                  }
                  else
                  {
                    uint64_t v7 = (atomic_ullong *)v2636;
                    do
                    {
                      v169 = (std::__shared_weak_count *)*(v157 - 1);
                      if (v169) {
                        std::__shared_weak_count::__release_shared[abi:ne180100](v169);
                      }
                      v157 -= 2;
                    }
                    while (v157 != (void *)v168);
                    uint64_t v157 = (void *)v168;
                    if (v168) {
LABEL_211:
                    }
                      operator delete(v157);
                  }
                }
LABEL_212:
                v2672 = v158;
                unint64_t v170 = *(void *)(v149 + 32);
                if (v170)
                {
                  char v171 = (char *)operator new(0x40uLL);
                  *((void *)v171 + 1) = 0;
                  *((void *)v171 + 2) = 0;
                  *(void *)char v171 = &unk_1EDFA26C8;
                  *(_OWORD *)(v171 + 24) = 0u;
                  *(_OWORD *)(v171 + 40) = 0u;
                  *((void *)v171 + 7) = 0;
                  *(void *)&long long v2695 = v170;
                  if (!std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>(v2637, v170, (uint64_t *)&v2695)[5])__assert_rtn("lookup", "AudioMetadataTimeline.hpp", 109, "mObjects[rawPtr] != nullptr"); {
                  unsigned int v172 = std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>(v2637, v170, (uint64_t *)&v2695);
                  }
                  long long v173 = *(_OWORD *)(v172 + 5);
                  uint64_t v174 = v172[6];
                  if (v174) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v174 + 8), 1uLL, memory_order_relaxed);
                  }
                  int v175 = (std::__shared_weak_count *)*((void *)v171 + 4);
                  *(_OWORD *)(v171 + 24) = v173;
                  if (v175) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v175);
                  }
                  atomic_fetch_add_explicit((atomic_ullong *volatile)v150 + 1, 1uLL, memory_order_relaxed);
                  char v176 = (std::__shared_weak_count *)*((void *)v171 + 6);
                  *((void *)v171 + 5) = v151;
                  *((void *)v171 + 6) = v150;
                  if (v176) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v176);
                  }
                  *((double *)v171 + 7) = a3;
                  uint64_t v177 = v2669;
                  if (v2669 < v2670)
                  {
                    *(void *)v2669 = v171 + 24;
                    v177[1] = v171;
                    atomic_fetch_add_explicit((atomic_ullong *volatile)v171 + 1, 1uLL, memory_order_relaxed);
                    char v178 = (long long *)(v177 + 2);
                    goto LABEL_238;
                  }
                  unint64_t v179 = (unint64_t)v2668;
                  uint64_t v180 = v2669 - v2668;
                  unint64_t v181 = v180 + 1;
                  if ((unint64_t)(v180 + 1) >> 60) {
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v182 = (char *)v2670 - (char *)v2668;
                  if (((char *)v2670 - (char *)v2668) >> 3 > v181) {
                    unint64_t v181 = v182 >> 3;
                  }
                  if ((unint64_t)v182 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v183 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v183 = v181;
                  }
                  if (v183 >> 60) {
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  }
                  v184 = (char *)operator new(16 * v183);
                  *(void *)&long long v185 = v171 + 24;
                  *((void *)&v185 + 1) = v171;
                  uint64_t v186 = &v184[16 * v180];
                  *(_OWORD *)uint64_t v186 = v185;
                  char v178 = (long long *)(v186 + 16);
                  atomic_fetch_add_explicit((atomic_ullong *volatile)v171 + 1, 1uLL, memory_order_relaxed);
                  if (v177 == (void *)v179)
                  {
                    v2668 = (long long *)&v184[16 * v180];
                    v2669 = (long long *)(v186 + 16);
                    v2670 = (long long *)&v184[16 * v183];
                    uint64_t v7 = (atomic_ullong *)v2636;
                    unint64_t v39 = v2612;
                    if (v177) {
                      goto LABEL_237;
                    }
                  }
                  else
                  {
                    do
                    {
                      long long v187 = *((_OWORD *)v177 - 1);
                      v177 -= 2;
                      *((_OWORD *)v186 - 1) = v187;
                      v186 -= 16;
                      *uint64_t v177 = 0;
                      v177[1] = 0;
                    }
                    while (v177 != (void *)v179);
                    unint64_t v188 = (unint64_t)v2668;
                    uint64_t v177 = v2669;
                    v2668 = (long long *)v186;
                    v2669 = v178;
                    v2670 = (long long *)&v184[16 * v183];
                    unint64_t v39 = v2612;
                    if (v177 == (void *)v188)
                    {
                      uint64_t v7 = (atomic_ullong *)v2636;
                      if (v177) {
                        goto LABEL_237;
                      }
                    }
                    else
                    {
                      uint64_t v7 = (atomic_ullong *)v2636;
                      do
                      {
                        size_t v189 = (std::__shared_weak_count *)*(v177 - 1);
                        if (v189) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](v189);
                        }
                        v177 -= 2;
                      }
                      while (v177 != (void *)v188);
                      uint64_t v177 = (void *)v188;
                      if (v188) {
LABEL_237:
                      }
                        operator delete(v177);
                    }
                  }
LABEL_238:
                  v2669 = v178;
                  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v171);
                }
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v150);
              }
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v128);
              ++v126;
              unint64_t v64 = v2617;
              if (v126 >= *(unsigned int *)(v2617 + 136)) {
                goto LABEL_250;
              }
            }
            v2674 = v145;
            v2675 = v145 + 16;
            v2676 = &v143[16 * v142];
LABEL_184:
            uint64_t v7 = (atomic_ullong *)v2636;
            if (!v136) {
              goto LABEL_186;
            }
LABEL_185:
            operator delete(v136);
            goto LABEL_186;
          }
LABEL_250:
          if (*(_DWORD *)(v64 + 112))
          {
            unint64_t v190 = 0;
            do
            {
              unint64_t v191 = *(void *)(*(void *)(v39 + 28) + 8 * v190);
              v192 = (char *)operator new(0x40uLL);
              *((void *)v192 + 1) = 0;
              *((void *)v192 + 2) = 0;
              *(void *)v192 = &unk_1EDFA2540;
              *(_OWORD *)(v192 + 40) = 0u;
              *((void *)v192 + 7) = 0;
              *(_OWORD *)(v192 + 24) = 0u;
              *(void *)&long long v2695 = v192 + 24;
              *((void *)&v2695 + 1) = v192;
              AudioMetadataMemoryPool::lookup<AudioMetadataObject>(&v2666, v2613, v191);
              v193 = (std::__shared_weak_count *)*((void *)v192 + 4);
              *(_OWORD *)(v192 + 24) = v2666;
              if (v193) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v193);
              }
              *((double *)v192 + 7) = a3;
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v2614 + 1) + 8), 1uLL, memory_order_relaxed);
              char v194 = (std::__shared_weak_count *)*((void *)v192 + 6);
              *(_OWORD *)(v192 + 40) = v2614;
              if (v194) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v194);
              }
              std::vector<std::shared_ptr<void *[]>>::push_back[abi:ne180100]((uint64_t)&v2686, &v2695);
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v192);
              ++v190;
            }
            while (v190 < *(unsigned int *)(v2617 + 112));
          }
          if (*((void *)&v2667 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v2667 + 1));
          }
          uint64_t v59 = v2608 + 1;
          uint64_t v14 = v2637;
          if (v2608 + 1 >= (unint64_t)*(unsigned int *)(v39 + 24)) {
            break;
          }
          continue;
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v2614 + 1));
      uint64_t v38 = v2602 + 1;
      unint64_t v37 = v2606;
      unint64_t v24 = v2604;
      if (v2602 + 1 >= (unint64_t)*(unsigned int *)(v2606 + 52)) {
        goto LABEL_267;
      }
    }
  }
  unint64_t v195 = 0;
LABEL_271:
  unint64_t v196 = 126 - 2 * __clz((v2693 - v195) >> 4);
  if (v2693 == v195) {
    uint64_t v197 = 0;
  }
  else {
    uint64_t v197 = v196;
  }
  std::__introsort<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>*,false>(v195, (unint64_t)v2693, v197, 1);
  std::string v198 = (long long *)v2693;
  if (v2692 != v2693)
  {
    char v199 = v2692 + 16;
    while (v199 != v2693)
    {
      char v201 = v199 - 16;
      uint64_t v200 = *((void *)v199 - 2);
      uint64_t v202 = *(void *)v199;
      v199 += 16;
      if (v200 == v202)
      {
        uint64_t v203 = (long long *)(v201 + 32);
        if (v201 + 32 != v2693)
        {
          do
          {
            uint64_t v204 = *(void *)v203;
            if (*(void *)v201 != *(void *)v203)
            {
              uint64_t v205 = *((void *)v203 + 1);
              *(void *)uint64_t v203 = 0;
              *((void *)v203 + 1) = 0;
              *((void *)v201 + 2) = v204;
              v201 += 16;
              unint64_t v206 = (std::__shared_weak_count *)*((void *)v201 + 1);
              *((void *)v201 + 1) = v205;
              if (v206) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v206);
              }
            }
            ++v203;
          }
          while (v203 != v198);
          std::string v198 = (long long *)v2693;
        }
        if (v201 + 16 != (char *)v198)
        {
          std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>(v198, v198, (uint64_t)(v201 + 16));
          uint64_t v208 = v207;
          for (uint64_t i = v2693; i != v208; i -= 16)
          {
            uint64_t v210 = (std::__shared_weak_count *)*((void *)i - 1);
            if (v210) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v210);
            }
          }
          v2693 = v208;
        }
        break;
      }
    }
  }
  unint64_t v211 = 126 - 2 * __clz((v2690 - v2689) >> 4);
  if (v2690 == v2689) {
    uint64_t v212 = 0;
  }
  else {
    uint64_t v212 = v211;
  }
  std::__introsort<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>*,false>((unint64_t)v2689, (unint64_t)v2690, v212, 1);
  size_t v213 = (long long *)v2690;
  if (v2689 != v2690)
  {
    v214 = v2689 + 16;
    while (v214 != v2690)
    {
      v216 = v214 - 16;
      uint64_t v215 = *((void *)v214 - 2);
      uint64_t v217 = *(void *)v214;
      v214 += 16;
      if (v215 == v217)
      {
        uint64_t v218 = (long long *)(v216 + 32);
        if (v216 + 32 != v2690)
        {
          do
          {
            uint64_t v219 = *(void *)v218;
            if (*(void *)v216 != *(void *)v218)
            {
              uint64_t v220 = *((void *)v218 + 1);
              *(void *)uint64_t v218 = 0;
              *((void *)v218 + 1) = 0;
              *((void *)v216 + 2) = v219;
              v216 += 16;
              uint64_t v221 = (std::__shared_weak_count *)*((void *)v216 + 1);
              *((void *)v216 + 1) = v220;
              if (v221) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v221);
              }
            }
            ++v218;
          }
          while (v218 != v213);
          size_t v213 = (long long *)v2690;
        }
        if (v216 + 16 != (char *)v213)
        {
          std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>(v213, v213, (uint64_t)(v216 + 16));
          size_t v223 = v222;
          for (uint64_t j = v2690; j != v223; j -= 16)
          {
            v225 = (std::__shared_weak_count *)*((void *)j - 1);
            if (v225) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v225);
            }
          }
          v2690 = v223;
        }
        break;
      }
    }
  }
  unint64_t v226 = 126 - 2 * __clz((v2687 - v2686) >> 4);
  if (v2687 == v2686) {
    uint64_t v227 = 0;
  }
  else {
    uint64_t v227 = v226;
  }
  std::__introsort<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>*,false>(v2686, (unint64_t)v2687, v227, 1);
  v228 = (long long *)v2687;
  if (v2686 != v2687)
  {
    v229 = v2686 + 16;
    while (v229 != v2687)
    {
      v231 = v229 - 16;
      uint64_t v230 = *((void *)v229 - 2);
      uint64_t v232 = *(void *)v229;
      v229 += 16;
      if (v230 == v232)
      {
        std::string v233 = (long long *)(v231 + 32);
        if (v231 + 32 != v2687)
        {
          do
          {
            uint64_t v234 = *(void *)v233;
            if (*(void *)v231 != *(void *)v233)
            {
              uint64_t v235 = *((void *)v233 + 1);
              *(void *)std::string v233 = 0;
              *((void *)v233 + 1) = 0;
              *((void *)v231 + 2) = v234;
              v231 += 16;
              v236 = (std::__shared_weak_count *)*((void *)v231 + 1);
              *((void *)v231 + 1) = v235;
              if (v236) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v236);
              }
            }
            ++v233;
          }
          while (v233 != v228);
          v228 = (long long *)v2687;
        }
        if (v231 + 16 != (char *)v228)
        {
          std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>(v228, v228, (uint64_t)(v231 + 16));
          __int16 v238 = v237;
          for (uint64_t k = v2687; k != v238; k -= 16)
          {
            char v240 = (std::__shared_weak_count *)*((void *)k - 1);
            if (v240) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v240);
            }
          }
          v2687 = v238;
        }
        break;
      }
    }
  }
  unint64_t v241 = 126 - 2 * __clz((v2684 - v2683) >> 4);
  if (v2684 == v2683) {
    uint64_t v242 = 0;
  }
  else {
    uint64_t v242 = v241;
  }
  std::__introsort<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*,false>((unint64_t)v2683, (unint64_t)v2684, v242, 1);
  v243 = (long long *)v2684;
  if (v2683 != v2684)
  {
    v244 = v2683 + 16;
    while (v244 != v2684)
    {
      v246 = v244 - 16;
      uint64_t v245 = *((void *)v244 - 2);
      uint64_t v247 = *(void *)v244;
      v244 += 16;
      if (v245 == v247)
      {
        v248 = (long long *)(v246 + 32);
        if (v246 + 32 != v2684)
        {
          do
          {
            uint64_t v249 = *(void *)v248;
            if (*(void *)v246 != *(void *)v248)
            {
              uint64_t v250 = *((void *)v248 + 1);
              *(void *)v248 = 0;
              *((void *)v248 + 1) = 0;
              *((void *)v246 + 2) = v249;
              v246 += 16;
              v251 = (std::__shared_weak_count *)*((void *)v246 + 1);
              *((void *)v246 + 1) = v250;
              if (v251) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v251);
              }
            }
            ++v248;
          }
          while (v248 != v243);
          v243 = (long long *)v2684;
        }
        if (v246 + 16 != (char *)v243)
        {
          std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>(v243, v243, (uint64_t)(v246 + 16));
          v253 = v252;
          for (m = v2684; m != v253; m -= 16)
          {
            v255 = (std::__shared_weak_count *)*((void *)m - 1);
            if (v255) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v255);
            }
          }
          v2684 = v253;
        }
        break;
      }
    }
  }
  unint64_t v256 = 126 - 2 * __clz((v2681 - v2680) >> 4);
  if (v2681 == v2680) {
    uint64_t v257 = 0;
  }
  else {
    uint64_t v257 = v256;
  }
  std::__introsort<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*,false>((unint64_t)v2680, (unint64_t)v2681, v257, 1);
  v258 = (long long *)v2681;
  if (v2680 != v2681)
  {
    v259 = v2680 + 16;
    while (v259 != v2681)
    {
      v261 = v259 - 16;
      uint64_t v260 = *((void *)v259 - 2);
      uint64_t v262 = *(void *)v259;
      v259 += 16;
      if (v260 == v262)
      {
        v263 = (long long *)(v261 + 32);
        if (v261 + 32 != v2681)
        {
          do
          {
            uint64_t v264 = *(void *)v263;
            if (*(void *)v261 != *(void *)v263)
            {
              uint64_t v265 = *((void *)v263 + 1);
              *(void *)v263 = 0;
              *((void *)v263 + 1) = 0;
              *((void *)v261 + 2) = v264;
              v261 += 16;
              v266 = (std::__shared_weak_count *)*((void *)v261 + 1);
              *((void *)v261 + 1) = v265;
              if (v266) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v266);
              }
            }
            ++v263;
          }
          while (v263 != v258);
          v258 = (long long *)v2681;
        }
        if (v261 + 16 != (char *)v258)
        {
          std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>(v258, v258, (uint64_t)(v261 + 16));
          v268 = v267;
          for (n = v2681; n != v268; n -= 16)
          {
            v270 = (std::__shared_weak_count *)*((void *)n - 1);
            if (v270) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v270);
            }
          }
          v2681 = v268;
        }
        break;
      }
    }
  }
  unint64_t v271 = 126 - 2 * __clz((v2678 - v2677) >> 4);
  if (v2678 == v2677) {
    uint64_t v272 = 0;
  }
  else {
    uint64_t v272 = v271;
  }
  std::__introsort<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,false>(v2677, (unint64_t)v2678, v272, 1);
  v273 = (long long *)v2678;
  if (v2677 != v2678)
  {
    v274 = v2677 + 16;
    while (v274 != v2678)
    {
      v276 = v274 - 16;
      uint64_t v275 = *((void *)v274 - 2);
      uint64_t v277 = *(void *)v274;
      v274 += 16;
      if (v275 == v277)
      {
        v278 = (long long *)(v276 + 32);
        if (v276 + 32 != v2678)
        {
          do
          {
            uint64_t v279 = *(void *)v278;
            if (*(void *)v276 != *(void *)v278)
            {
              uint64_t v280 = *((void *)v278 + 1);
              *(void *)v278 = 0;
              *((void *)v278 + 1) = 0;
              *((void *)v276 + 2) = v279;
              v276 += 16;
              v281 = (std::__shared_weak_count *)*((void *)v276 + 1);
              *((void *)v276 + 1) = v280;
              if (v281) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v281);
              }
            }
            ++v278;
          }
          while (v278 != v273);
          v273 = (long long *)v2678;
        }
        if (v276 + 16 != (char *)v273)
        {
          std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>(v273, v273, (uint64_t)(v276 + 16));
          v283 = v282;
          for (iuint64_t i = v2678; ii != v283; ii -= 16)
          {
            v285 = (std::__shared_weak_count *)*((void *)ii - 1);
            if (v285) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v285);
            }
          }
          v2678 = v283;
        }
        break;
      }
    }
  }
  unint64_t v286 = 126 - 2 * __clz((v2675 - v2674) >> 4);
  if (v2675 == v2674) {
    uint64_t v287 = 0;
  }
  else {
    uint64_t v287 = v286;
  }
  std::__introsort<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*,false>((unint64_t)v2674, (unint64_t)v2675, v287, 1);
  v288 = (long long *)v2675;
  if (v2674 != v2675)
  {
    v289 = v2674 + 16;
    while (v289 != v2675)
    {
      v291 = v289 - 16;
      uint64_t v290 = *((void *)v289 - 2);
      uint64_t v292 = *(void *)v289;
      v289 += 16;
      if (v290 == v292)
      {
        v293 = (long long *)(v291 + 32);
        if (v291 + 32 != v2675)
        {
          do
          {
            uint64_t v294 = *(void *)v293;
            if (*(void *)v291 != *(void *)v293)
            {
              uint64_t v295 = *((void *)v293 + 1);
              *(void *)v293 = 0;
              *((void *)v293 + 1) = 0;
              *((void *)v291 + 2) = v294;
              v291 += 16;
              v296 = (std::__shared_weak_count *)*((void *)v291 + 1);
              *((void *)v291 + 1) = v295;
              if (v296) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v296);
              }
            }
            ++v293;
          }
          while (v293 != v288);
          v288 = (long long *)v2675;
        }
        if (v291 + 16 != (char *)v288)
        {
          std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>(v288, v288, (uint64_t)(v291 + 16));
          v298 = v297;
          for (juint64_t j = v2675; jj != v298; jj -= 16)
          {
            v300 = (std::__shared_weak_count *)*((void *)jj - 1);
            if (v300) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v300);
            }
          }
          v2675 = v298;
        }
        break;
      }
    }
  }
  unint64_t v301 = 126 - 2 * __clz((v2672 - v2671) >> 4);
  if (v2672 == v2671) {
    uint64_t v302 = 0;
  }
  else {
    uint64_t v302 = v301;
  }
  std::__introsort<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*,false>((unint64_t)v2671, (unint64_t)v2672, v302, 1);
  v303 = (long long *)v2672;
  if (v2671 != v2672)
  {
    v304 = v2671 + 16;
    while (v304 != v2672)
    {
      v306 = v304 - 16;
      uint64_t v305 = *((void *)v304 - 2);
      uint64_t v307 = *(void *)v304;
      v304 += 16;
      if (v305 == v307)
      {
        v308 = (long long *)(v306 + 32);
        if (v306 + 32 != v2672)
        {
          do
          {
            uint64_t v309 = *(void *)v308;
            if (*(void *)v306 != *(void *)v308)
            {
              uint64_t v310 = *((void *)v308 + 1);
              *(void *)v308 = 0;
              *((void *)v308 + 1) = 0;
              *((void *)v306 + 2) = v309;
              v306 += 16;
              v311 = (std::__shared_weak_count *)*((void *)v306 + 1);
              *((void *)v306 + 1) = v310;
              if (v311) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v311);
              }
            }
            ++v308;
          }
          while (v308 != v303);
          v303 = (long long *)v2672;
        }
        if (v306 + 16 != (char *)v303)
        {
          std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>(v303, v303, (uint64_t)(v306 + 16));
          v313 = v312;
          for (kuint64_t k = v2672; kk != v313; kk -= 16)
          {
            v315 = (std::__shared_weak_count *)*((void *)kk - 1);
            if (v315) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v315);
            }
          }
          v2672 = v313;
        }
        break;
      }
    }
  }
  unint64_t v316 = 126 - 2 * __clz(v2669 - v2668);
  if (v2669 == v2668) {
    uint64_t v317 = 0;
  }
  else {
    uint64_t v317 = v316;
  }
  std::__introsort<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,false>((unint64_t)v2668, (unint64_t)v2669, v317, 1);
  v318 = v2669;
  if (v2668 == v2669)
  {
    v318 = v2668;
  }
  else
  {
    v319 = v2668 + 1;
    while (v319 != v2669)
    {
      v321 = v319 - 1;
      uint64_t v320 = *((void *)v319 - 2);
      uint64_t v322 = *(void *)v319++;
      if (v320 == v322)
      {
        v323 = v321 + 2;
        if (v321 + 2 != v2669)
        {
          do
          {
            uint64_t v324 = *(void *)v323;
            if (*(void *)v321 != *(void *)v323)
            {
              uint64_t v325 = *((void *)v323 + 1);
              *(void *)v323 = 0;
              *((void *)v323 + 1) = 0;
              *((void *)v321++ + 2) = v324;
              v326 = (std::__shared_weak_count *)*((void *)v321 + 1);
              *((void *)v321 + 1) = v325;
              if (v326) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v326);
              }
            }
            ++v323;
          }
          while (v323 != v318);
          v318 = v2669;
        }
        if (v321 + 1 != v318)
        {
          std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>(v318, v318, (uint64_t)(v321 + 1));
          v318 = v327;
          for (mm = v2669; mm != v318; --mm)
          {
            v329 = (std::__shared_weak_count *)*((void *)mm - 1);
            if (v329) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v329);
            }
          }
          v2669 = v318;
        }
        break;
      }
    }
  }
  v330 = *v2604;
  unint64_t v331 = **v2604;
  v333 = v2692;
  v332 = v2693;
  if (v331 != (v2693 - v2692) >> 4)
  {
    v2599 = "root->audioProgrammes.count == programmes.size()";
    int v2600 = 285;
    goto LABEL_3194;
  }
  if (v330[3] != (v2690 - v2689) >> 4)
  {
    v2599 = "root->audioContents.count == contents.size()";
    int v2600 = 286;
    goto LABEL_3194;
  }
  if (v330[6] != (v2687 - v2686) >> 4)
  {
    v2599 = "root->audioObjects.count == objects.size()";
    int v2600 = 287;
    goto LABEL_3194;
  }
  if (v330[9] != (v2684 - v2683) >> 4)
  {
    v2599 = "root->audioPackFormats.count == packFormats.size()";
    int v2600 = 288;
    goto LABEL_3194;
  }
  if (v330[12] != (v2681 - v2680) >> 4)
  {
    v2599 = "root->audioChannelFormats.count == channelFormats.size()";
    int v2600 = 289;
    goto LABEL_3194;
  }
  if (v330[21] != (v2675 - v2674) >> 4)
  {
    v2599 = "root->audioTrackUIDs.count == trackUIDs.size()";
    int v2600 = 290;
    goto LABEL_3194;
  }
  if (v330[18] != (v2672 - v2671) >> 4)
  {
    v2599 = "root->audioTrackFormats.count == trackFormats.size()";
    int v2600 = 291;
    goto LABEL_3194;
  }
  if (v330[15] != v318 - v2668)
  {
    v2599 = "root->audioStreamFormats.count == streamFormats.size()";
    int v2600 = 292;
LABEL_3194:
    __assert_rtn("addEvent", "AudioMetadataTimeline.cpp", v2600, v2599);
  }
  unint64_t v334 = v2616[3].u64[0];
  uint64_t v335 = v2616[3].i64[1];
  unint64_t v336 = v334 + v335;
  unint64_t v337 = (v334 + v335) >> 8;
  v339 = (char *)v2616[1].i64[1];
  v338 = (char *)v2616[2].i64[0];
  v340 = &v339[8 * v337];
  unint64_t v341 = v334 >> 8;
  int64_t v342 = v338 - v339;
  if (v338 == v339)
  {
    uint64_t v343 = 0;
    uint64_t v345 = 0;
    v344 = &v339[8 * v341];
  }
  else
  {
    uint64_t v343 = *(void *)v340 + 16 * v336;
    v344 = &v339[8 * v341];
    uint64_t v345 = *(void *)v344 + 16 * v334;
  }
  if (v343 == v345) {
    unint64_t v346 = 0;
  }
  else {
    unint64_t v346 = ((v343 - *(void *)v340) >> 4) + 32 * (v340 - v344) - ((v345 - *(void *)v344) >> 4);
  }
  v347 = v2616 + 1;
  if (v346 >= v335 - v346)
  {
    uint64_t v360 = 32 * v342 - 1;
    uint64_t v361 = v338 - v339;
    if (v338 == v339) {
      uint64_t v360 = 0;
    }
    unint64_t v362 = v360 - v336;
    BOOL v363 = v331 >= v362;
    unint64_t v364 = v331 - v362;
    if (v364 == 0 || !v363)
    {
LABEL_710:
      v546 = &v339[8 * v337];
      if (v338 == v339) {
        uint64_t v547 = 0;
      }
      else {
        uint64_t v547 = *(void *)v546 + 16 * v336;
      }
      unint64_t v548 = v335 - v346;
      if (v335 - v346 >= v331)
      {
        v552 = (void *)v547;
        v551 = v546;
        if (!v331) {
          goto LABEL_764;
        }
      }
      else
      {
        if (v548 >= v331 >> 1) {
          v549 = &v332[16 * (v335 - v346 - v331)];
        }
        else {
          v549 = &v333[16 * v548];
        }
        if (v549 == v332)
        {
          v552 = (void *)v547;
          v551 = v546;
        }
        else
        {
          v550 = v549;
          v551 = &v339[8 * v337];
          v552 = (void *)v547;
          do
          {
            void *v552 = *(void *)v550;
            uint64_t v553 = *((void *)v550 + 1);
            v552[1] = v553;
            if (v553) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v553 + 8), 1uLL, memory_order_relaxed);
            }
            v552 += 2;
            if ((void *)((char *)v552 - *(void *)v551) == (void *)4096)
            {
              v554 = (void *)*((void *)v551 + 1);
              v551 += 8;
              v552 = v554;
            }
            ++v2616[3].i64[1];
            v550 += 16;
          }
          while (v550 != v332);
          v332 = v549;
        }
        unint64_t v331 = v548;
        if (!v548) {
          goto LABEL_764;
        }
      }
      uint64_t v555 = ((v547 - *(void *)v546) >> 4) - v331;
      if (v555 < 1)
      {
        unint64_t v558 = 255 - v555;
        v556 = (uint64_t *)&v546[-8 * (v558 >> 8)];
        uint64_t v557 = *v556 + 16 * ~(_BYTE)v558;
      }
      else
      {
        v556 = (uint64_t *)&v546[8 * ((unint64_t)v555 >> 8)];
        uint64_t v557 = *v556 + 16 * v555;
      }
      if (v557 != v547)
      {
        v559 = v556;
        uint64_t v560 = v557;
        do
        {
          *(_OWORD *)v552 = *(_OWORD *)v560;
          v552 += 2;
          *(void *)uint64_t v560 = 0;
          *(void *)(v560 + 8) = 0;
          if ((void *)((char *)v552 - *(void *)v551) == (void *)4096)
          {
            v561 = (void *)*((void *)v551 + 1);
            v551 += 8;
            v552 = v561;
          }
          v560 += 16;
          if (v560 - *v559 == 4096)
          {
            uint64_t v562 = v559[1];
            ++v559;
            uint64_t v560 = v562;
          }
          ++v2616[3].i64[1];
        }
        while (v560 != v547);
      }
      if (v331 < v548)
      {
        uint64_t v563 = ((v547 - *(void *)v546) >> 4) - v548;
        if (v563 < 1)
        {
          unint64_t v566 = 255 - v563;
          v564 = (uint64_t *)&v546[-8 * (v566 >> 8)];
          uint64_t v565 = *v564 + 16 * ~(_BYTE)v566;
        }
        else
        {
          v564 = (uint64_t *)&v546[8 * ((unint64_t)v563 >> 8)];
          uint64_t v565 = *v564 + 16 * v563;
        }
        if (v564 == v556)
        {
          uint64_t v572 = v565;
          v570 = v546;
        }
        else
        {
          uint64_t v569 = *v556;
          v568 = v556 - 1;
          uint64_t v567 = v569;
          v570 = v546;
          while (1)
          {
            std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>(&v2695, v567, v557, v570, v547);
            v570 = (char *)*((void *)&v2695 + 1);
            uint64_t v547 = v2696;
            if (v568 == v564) {
              break;
            }
            uint64_t v571 = *v568--;
            uint64_t v567 = v571;
            uint64_t v557 = v571 + 4096;
          }
          uint64_t v557 = *v564 + 4096;
          uint64_t v572 = v565;
        }
        std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>(&v2695, v572, v557, v570, v547);
        uint64_t v547 = v2696;
        v546 = (char *)*((void *)&v2695 + 1);
      }
      if (v333 != v332)
      {
        uint64_t v573 = *(void *)v546;
        while (1)
        {
          uint64_t v574 = v547 - v573;
          if ((v332 - v333) >> 4 >= v574 >> 4) {
            uint64_t v575 = v574 >> 4;
          }
          else {
            uint64_t v575 = (v332 - v333) >> 4;
          }
          if (v575)
          {
            v576 = (std::__shared_weak_count **)(v332 - 8);
            uint64_t v577 = -16 * v575;
            v578 = (std::__shared_weak_count **)(v547 - 8);
            do
            {
              v580 = *(v576 - 1);
              v579 = *v576;
              if (*v576) {
                atomic_fetch_add_explicit(&v579->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              v581 = *v578;
              *(v578 - 1) = v580;
              *v578 = v579;
              if (v581) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v581);
              }
              v576 -= 2;
              v578 -= 2;
              v577 += 16;
            }
            while (v577);
          }
          v332 -= 16 * v575;
          if (v332 == v333) {
            break;
          }
          uint64_t v582 = *((void *)v546 - 1);
          v546 -= 8;
          uint64_t v573 = v582;
          uint64_t v547 = v582 + 4096;
        }
      }
      goto LABEL_764;
    }
    if (v338 == v339) {
      unint64_t v365 = v364 + 1;
    }
    else {
      unint64_t v365 = v364;
    }
    if ((_BYTE)v365) {
      unint64_t v366 = (v365 >> 8) + 1;
    }
    else {
      unint64_t v366 = v365 >> 8;
    }
    if (v366 >= v341) {
      unint64_t v367 = v334 >> 8;
    }
    else {
      unint64_t v367 = v366;
    }
    unint64_t v2638 = v346;
    if (v366 <= v341)
    {
      v2616[3].i64[0] = v334 - (v367 << 8);
      if (v367)
      {
        v374 = (uint64_t *)v2616;
        do
        {
          v375 = (void *)v374[3];
          uint64_t v378 = *v375;
          v376 = (char *)(v375 + 1);
          uint64_t v377 = v378;
          v374[3] = (uint64_t)v376;
          if (v338 == (char *)v374[5])
          {
            uint64_t v379 = (uint64_t)&v376[-v347->i64[0]];
            if ((unint64_t)v376 <= v347->i64[0])
            {
              if (v338 == (char *)v347->i64[0]) {
                unint64_t v387 = 1;
              }
              else {
                unint64_t v387 = (uint64_t)&v338[-v347->i64[0]] >> 2;
              }
              v388 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v387);
              v390 = &v388[8 * (v387 >> 2)];
              v391 = (uint64_t *)v2616[1].i64[1];
              v338 = v390;
              uint64_t v392 = v2616[2].i64[0] - (void)v391;
              if (v392)
              {
                v338 = &v390[v392 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v393 = 8 * (v392 >> 3);
                v394 = &v388[8 * (v387 >> 2)];
                do
                {
                  uint64_t v395 = *v391++;
                  *(void *)v394 = v395;
                  v394 += 8;
                  v393 -= 8;
                }
                while (v393);
              }
              v374 = (uint64_t *)v2616;
              v396 = (void *)v2616[1].i64[0];
              v2616[1].i64[0] = (uint64_t)v388;
              v2616[1].i64[1] = (uint64_t)v390;
              v2616[2].i64[0] = (uint64_t)v338;
              v2616[2].i64[1] = (uint64_t)&v388[8 * v389];
              if (v396)
              {
                operator delete(v396);
                v338 = (char *)v2616[2].i64[0];
              }
            }
            else
            {
              uint64_t v380 = v379 >> 3;
              BOOL v381 = v379 >> 3 < -1;
              uint64_t v382 = (v379 >> 3) + 2;
              if (v381) {
                uint64_t v383 = v382;
              }
              else {
                uint64_t v383 = v380 + 1;
              }
              v384 = &v376[-8 * (v383 >> 1)];
              int64_t v385 = v338 - v376;
              v374 = (uint64_t *)v2616;
              if (v338 != v376)
              {
                memmove(&v376[-8 * (v383 >> 1)], v376, v338 - v376);
                v338 = (char *)v2616[1].i64[1];
              }
              v386 = &v338[-8 * (v383 >> 1)];
              v338 = &v384[v385];
              v2616[1].i64[1] = (uint64_t)v386;
              v2616[2].i64[0] = (uint64_t)&v384[v385];
            }
          }
          else
          {
            v374 = (uint64_t *)v2616;
          }
          *(void *)v338 = v377;
          v338 = (char *)(v374[4] + 8);
          v374[4] = (uint64_t)v338;
          --v367;
        }
        while (v367);
        goto LABEL_709;
      }
    }
    else
    {
      unint64_t v368 = v366 - v367;
      uint64_t v369 = v2616[2].i64[1] - v2616[1].i64[0];
      if (v368 <= (v369 >> 3) - (v361 >> 3))
      {
        if (v368)
        {
          while (v2616[2].i64[1] != v2616[2].i64[0])
          {
            *(void *)&long long v2695 = operator new(0x1000uLL);
            std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(v347, &v2695);
            if (!--v368)
            {
              v338 = (char *)v2616[2].i64[0];
              goto LABEL_686;
            }
          }
          for (uint64_t nn = 0; nn != v368; ++nn)
          {
            *(void *)&long long v2695 = operator new(0x1000uLL);
            std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v347, &v2695);
            v338 = (char *)v2616[2].i64[0];
            if (&v338[-v2616[1].i64[1]] == (char *)8) {
              uint64_t v522 = 255;
            }
            else {
              uint64_t v522 = 256;
            }
            uint64_t v523 = v522 + v2616[3].i64[0];
            v2616[3].i64[0] = v523;
          }
          v367 += v368;
          v524 = v2616;
        }
        else
        {
LABEL_686:
          v524 = v2616;
          uint64_t v523 = v2616[3].i64[0];
        }
        v524[3].i64[0] = v523 - (v367 << 8);
        if (v367)
        {
          v374 = (uint64_t *)v2616;
          do
          {
            v525 = (void *)v374[3];
            uint64_t v528 = *v525;
            v526 = (char *)(v525 + 1);
            uint64_t v527 = v528;
            v374[3] = (uint64_t)v526;
            if (v338 == (char *)v374[5])
            {
              uint64_t v529 = (uint64_t)&v526[-v347->i64[0]];
              if ((unint64_t)v526 <= v347->i64[0])
              {
                if (v338 == (char *)v347->i64[0]) {
                  unint64_t v536 = 1;
                }
                else {
                  unint64_t v536 = (uint64_t)&v338[-v347->i64[0]] >> 2;
                }
                v537 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v536);
                v539 = &v537[8 * (v536 >> 2)];
                v540 = (uint64_t *)v2616[1].i64[1];
                v338 = v539;
                uint64_t v541 = v2616[2].i64[0] - (void)v540;
                if (v541)
                {
                  v338 = &v539[v541 & 0xFFFFFFFFFFFFFFF8];
                  uint64_t v542 = 8 * (v541 >> 3);
                  v543 = &v537[8 * (v536 >> 2)];
                  do
                  {
                    uint64_t v544 = *v540++;
                    *(void *)v543 = v544;
                    v543 += 8;
                    v542 -= 8;
                  }
                  while (v542);
                }
                v374 = (uint64_t *)v2616;
                v545 = (void *)v2616[1].i64[0];
                v2616[1].i64[0] = (uint64_t)v537;
                v2616[1].i64[1] = (uint64_t)v539;
                v2616[2].i64[0] = (uint64_t)v338;
                v2616[2].i64[1] = (uint64_t)&v537[8 * v538];
                if (v545)
                {
                  operator delete(v545);
                  v338 = (char *)v2616[2].i64[0];
                }
              }
              else
              {
                uint64_t v530 = v529 >> 3;
                BOOL v381 = v529 >> 3 < -1;
                uint64_t v531 = (v529 >> 3) + 2;
                if (v381) {
                  uint64_t v532 = v531;
                }
                else {
                  uint64_t v532 = v530 + 1;
                }
                v533 = &v526[-8 * (v532 >> 1)];
                int64_t v534 = v338 - v526;
                v374 = (uint64_t *)v2616;
                if (v338 != v526)
                {
                  memmove(&v526[-8 * (v532 >> 1)], v526, v338 - v526);
                  v338 = (char *)v2616[1].i64[1];
                }
                v535 = &v338[-8 * (v532 >> 1)];
                v338 = &v533[v534];
                v2616[1].i64[1] = (uint64_t)v535;
                v2616[2].i64[0] = (uint64_t)&v533[v534];
              }
            }
            else
            {
              v374 = (uint64_t *)v2616;
            }
            *(void *)v338 = v527;
            v338 = (char *)(v374[4] + 8);
            v374[4] = (uint64_t)v338;
            --v367;
          }
          while (v367);
          goto LABEL_709;
        }
      }
      else
      {
        uint64_t v370 = v361 >> 3;
        if (v369 >> 2 <= v368 + (v361 >> 3)) {
          unint64_t v371 = v368 + (v361 >> 3);
        }
        else {
          unint64_t v371 = v369 >> 2;
        }
        v2697 = &v2616[2].i8[8];
        if (v371) {
          unint64_t v371 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v371);
        }
        else {
          uint64_t v372 = 0;
        }
        *(void *)&long long v2695 = v371;
        *((void *)&v2695 + 1) = v371 + 8 * (v370 - v367);
        *(void *)&long long v2696 = *((void *)&v2695 + 1);
        *((void *)&v2696 + 1) = v371 + 8 * v372;
        v440 = v2616;
        do
        {
          *(void *)&long long v2667 = operator new(0x1000uLL);
          std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(&v2695, &v2667);
          --v368;
        }
        while (v368);
        unint64_t v2619 = v367 << 8;
        v441 = (char *)v2696;
        if (v367)
        {
          v442 = (void *)v2616[1].i64[1];
          unint64_t v2649 = v331;
          do
          {
            if (v441 == *((char **)&v2696 + 1))
            {
              v443 = (char *)*((void *)&v2695 + 1);
              v444 = (void *)v2695;
              if (*((void *)&v2695 + 1) <= (unint64_t)v2695)
              {
                if (v441 == (char *)v2695) {
                  unint64_t v451 = 1;
                }
                else {
                  unint64_t v451 = (uint64_t)&v441[-v2695] >> 2;
                }
                v452 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v451);
                uint64_t v454 = v441 - v443;
                BOOL v417 = v441 == v443;
                v441 = &v452[8 * (v451 >> 2)];
                if (!v417)
                {
                  v441 = &v452[8 * (v451 >> 2) + (v454 & 0xFFFFFFFFFFFFFFF8)];
                  uint64_t v455 = 8 * (v454 >> 3);
                  v456 = &v452[8 * (v451 >> 2)];
                  do
                  {
                    uint64_t v457 = *(void *)v443;
                    v443 += 8;
                    *(void *)v456 = v457;
                    v456 += 8;
                    v455 -= 8;
                  }
                  while (v455);
                }
                *(void *)&long long v2695 = v452;
                *((void *)&v2695 + 1) = &v452[8 * (v451 >> 2)];
                *(void *)&long long v2696 = v441;
                *((void *)&v2696 + 1) = &v452[8 * v453];
                if (v444) {
                  operator delete(v444);
                }
                v440 = v2616;
              }
              else
              {
                unint64_t v445 = v346;
                uint64_t v446 = (uint64_t)(*((void *)&v2695 + 1) - v2695) >> 3;
                if (v446 >= -1) {
                  uint64_t v447 = v446 + 1;
                }
                else {
                  uint64_t v447 = v446 + 2;
                }
                uint64_t v448 = *((void *)&v2695 + 1) - 8 * (v447 >> 1);
                v449 = &v441[-*((void *)&v2695 + 1)];
                if (v441 != *((char **)&v2695 + 1))
                {
                  memmove((void *)(*((void *)&v2695 + 1) - 8 * (v447 >> 1)), *((const void **)&v2695 + 1), (size_t)&v441[-*((void *)&v2695 + 1)]);
                  v441 = v443;
                }
                v450 = &v441[-8 * (v447 >> 1)];
                v441 = &v449[v448];
                *((void *)&v2695 + 1) = v450;
                *(void *)&long long v2696 = &v449[v448];
                v440 = v2616;
                unint64_t v346 = v445;
                unint64_t v331 = v2649;
              }
            }
            *(void *)v441 = *v442;
            v441 = (char *)(v2696 + 8);
            *(void *)&long long v2696 = v2696 + 8;
            v442 = (void *)(v440[1].i64[1] + 8);
            v440[1].i64[1] = (uint64_t)v442;
            --v367;
          }
          while (v367);
        }
        uint64_t v458 = v440[2].i64[0];
        v459 = (char *)*((void *)&v2695 + 1);
        v460 = (char *)v2695;
        v461 = (char *)*((void *)&v2696 + 1);
        while (v458 != v2616[1].i64[1])
        {
          if (v459 == v460)
          {
            if (v441 >= v461)
            {
              if (v461 == v460) {
                unint64_t v466 = 1;
              }
              else {
                unint64_t v466 = (v461 - v460) >> 2;
              }
              v467 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v466);
              v469 = v467;
              v459 = &v467[(2 * v466 + 6) & 0xFFFFFFFFFFFFFFF8];
              uint64_t v470 = v441 - v460;
              BOOL v417 = v441 == v460;
              v441 = v459;
              if (!v417)
              {
                v441 = &v459[v470 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v471 = 8 * (v470 >> 3);
                v472 = v459;
                v473 = v460;
                do
                {
                  uint64_t v474 = *(void *)v473;
                  v473 += 8;
                  *(void *)v472 = v474;
                  v472 += 8;
                  v471 -= 8;
                }
                while (v471);
              }
              v461 = &v467[8 * v468];
              if (v460) {
                operator delete(v460);
              }
              v460 = v469;
            }
            else
            {
              uint64_t v462 = (v461 - v441) >> 3;
              if (v462 >= -1) {
                unint64_t v463 = v462 + 1;
              }
              else {
                unint64_t v463 = v462 + 2;
              }
              v464 = &v441[8 * (v463 >> 1)];
              v459 = &v464[-(v441 - v460)];
              size_t v465 = v441 - v460;
              BOOL v417 = v441 == v460;
              v441 = v464;
              if (!v417) {
                memmove(v459, v460, v465);
              }
            }
          }
          uint64_t v475 = *(void *)(v458 - 8);
          v458 -= 8;
          *((void *)v459 - 1) = v475;
          v459 -= 8;
        }
        *(void *)&long long v2695 = v460;
        *((void *)&v2695 + 1) = v459;
        *(void *)&long long v2696 = v441;
        *((void *)&v2696 + 1) = v461;
        long long v478 = v2695;
        int64x2_t v477 = (int64x2_t)v2696;
        *(void *)&long long v2695 = v2616[1].i64[0];
        v476 = (void *)v2695;
        *((void *)&v2695 + 1) = v458;
        v2616[1] = (int64x2_t)v478;
        v2616[2] = v477;
        v2616[3].i64[0] -= v2619;
        if (v476)
        {
          operator delete(v476);
          v338 = (char *)v2616[2].i64[0];
        }
        else
        {
          v338 = (char *)v477.i64[0];
        }
      }
    }
    v374 = (uint64_t *)v2616;
LABEL_709:
    uint64_t v335 = v374[7];
    v339 = (char *)v374[3];
    unint64_t v336 = v374[6] + v335;
    unint64_t v337 = v336 >> 8;
    unint64_t v346 = v2638;
    goto LABEL_710;
  }
  unint64_t v348 = v331 - v334;
  if (v331 > v334)
  {
    uint64_t v349 = 32 * v342 - 1;
    uint64_t v350 = v338 - v339;
    if (v338 == v339)
    {
      uint64_t v349 = 0;
      ++v348;
    }
    if ((_BYTE)v348) {
      unint64_t v351 = (v348 >> 8) + 1;
    }
    else {
      unint64_t v351 = v348 >> 8;
    }
    unint64_t v352 = v349 - v336;
    if (v351 >= v352 >> 8) {
      unint64_t v353 = v352 >> 8;
    }
    else {
      unint64_t v353 = v351;
    }
    if (v351 <= v352 >> 8)
    {
      for (v2616[3].i64[0] = v334 + (v353 << 8); v353; --v353)
      {
        uint64_t v373 = v2616[2].i64[0];
        *(void *)&long long v2695 = *(void *)(v373 - 8);
        v2616[2].i64[0] = v373 - 8;
        std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v347, &v2695);
      }
      goto LABEL_630;
    }
    unint64_t v354 = v351 - v353;
    uint64_t v355 = v2616[1].i64[0];
    uint64_t v356 = v2616[2].i64[1] - v355;
    if (v351 - v353 > (v356 >> 3) - (v350 >> 3))
    {
      BOOL v357 = v338 == v339;
      if (v356 >> 2 <= v354 + (v350 >> 3)) {
        unint64_t v358 = v354 + (v350 >> 3);
      }
      else {
        unint64_t v358 = v356 >> 2;
      }
      v2697 = &v2616[2].i8[8];
      if (v358) {
        unint64_t v358 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v358);
      }
      else {
        uint64_t v359 = 0;
      }
      unint64_t v402 = (v351 << 8) - v357;
      *(void *)&long long v2695 = v358;
      *((void *)&v2695 + 1) = v358;
      *(void *)&long long v2696 = v358;
      *((void *)&v2696 + 1) = v358 + 8 * v359;
      v403 = (uint64_t *)v2616;
      do
      {
        *(void *)&long long v2667 = operator new(0x1000uLL);
        std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(&v2695, &v2667);
        --v354;
      }
      while (v354);
      unint64_t v2618 = v402;
      uint64_t v404 = v2616[2].i64[0];
      v405 = (char *)v2696;
      if (v353)
      {
        unint64_t v2648 = v331;
        do
        {
          if (v405 == *((char **)&v2696 + 1))
          {
            v406 = (char *)*((void *)&v2695 + 1);
            v407 = (void *)v2695;
            if (*((void *)&v2695 + 1) <= (unint64_t)v2695)
            {
              if (v405 == (char *)v2695) {
                unint64_t v414 = 1;
              }
              else {
                unint64_t v414 = (uint64_t)&v405[-v2695] >> 2;
              }
              v415 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v414);
              uint64_t v418 = v405 - v406;
              BOOL v417 = v405 == v406;
              v405 = &v415[8 * (v414 >> 2)];
              if (!v417)
              {
                v405 = &v415[8 * (v414 >> 2) + (v418 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v419 = 8 * (v418 >> 3);
                v420 = &v415[8 * (v414 >> 2)];
                do
                {
                  uint64_t v421 = *(void *)v406;
                  v406 += 8;
                  *(void *)v420 = v421;
                  v420 += 8;
                  v419 -= 8;
                }
                while (v419);
              }
              *(void *)&long long v2695 = v415;
              *((void *)&v2695 + 1) = &v415[8 * (v414 >> 2)];
              *(void *)&long long v2696 = v405;
              *((void *)&v2696 + 1) = &v415[8 * v416];
              if (v407) {
                operator delete(v407);
              }
              v403 = (uint64_t *)v2616;
            }
            else
            {
              unint64_t v408 = v346;
              uint64_t v409 = (uint64_t)(*((void *)&v2695 + 1) - v2695) >> 3;
              if (v409 >= -1) {
                uint64_t v410 = v409 + 1;
              }
              else {
                uint64_t v410 = v409 + 2;
              }
              uint64_t v411 = *((void *)&v2695 + 1) - 8 * (v410 >> 1);
              v412 = &v405[-*((void *)&v2695 + 1)];
              if (v405 != *((char **)&v2695 + 1))
              {
                memmove((void *)(*((void *)&v2695 + 1) - 8 * (v410 >> 1)), *((const void **)&v2695 + 1), (size_t)&v405[-*((void *)&v2695 + 1)]);
                v405 = v406;
              }
              v413 = &v405[-8 * (v410 >> 1)];
              v405 = &v412[v411];
              *((void *)&v2695 + 1) = v413;
              *(void *)&long long v2696 = &v412[v411];
              v403 = (uint64_t *)v2616;
              unint64_t v346 = v408;
              unint64_t v331 = v2648;
            }
          }
          *(void *)v405 = *(void *)(v404 - 8);
          v405 = (char *)(v2696 + 8);
          *(void *)&long long v2696 = v2696 + 8;
          uint64_t v404 = v403[4] - 8;
          v403[4] = v404;
          --v353;
        }
        while (v353);
      }
      v422 = (uint64_t *)v403[3];
      if (v422 == (uint64_t *)v404)
      {
        v422 = (uint64_t *)v404;
      }
      else
      {
        do
        {
          if (v405 == *((char **)&v2696 + 1))
          {
            v423 = (char *)*((void *)&v2695 + 1);
            v424 = (void *)v2695;
            if (*((void *)&v2695 + 1) <= (unint64_t)v2695)
            {
              if (v405 == (char *)v2695) {
                unint64_t v432 = 1;
              }
              else {
                unint64_t v432 = (uint64_t)&v405[-v2695] >> 2;
              }
              v433 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v432);
              uint64_t v435 = v405 - v423;
              BOOL v417 = v405 == v423;
              v405 = &v433[8 * (v432 >> 2)];
              if (!v417)
              {
                v405 = &v433[8 * (v432 >> 2) + (v435 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v436 = 8 * (v435 >> 3);
                v437 = &v433[8 * (v432 >> 2)];
                do
                {
                  uint64_t v438 = *(void *)v423;
                  v423 += 8;
                  *(void *)v437 = v438;
                  v437 += 8;
                  v436 -= 8;
                }
                while (v436);
              }
              *(void *)&long long v2695 = v433;
              *((void *)&v2695 + 1) = &v433[8 * (v432 >> 2)];
              *(void *)&long long v2696 = v405;
              *((void *)&v2696 + 1) = &v433[8 * v434];
              if (v424) {
                operator delete(v424);
              }
              v403 = (uint64_t *)v2616;
            }
            else
            {
              unint64_t v425 = v331;
              unint64_t v426 = v346;
              uint64_t v427 = (uint64_t)(*((void *)&v2695 + 1) - v2695) >> 3;
              if (v427 >= -1) {
                uint64_t v428 = v427 + 1;
              }
              else {
                uint64_t v428 = v427 + 2;
              }
              uint64_t v429 = *((void *)&v2695 + 1) - 8 * (v428 >> 1);
              v430 = &v405[-*((void *)&v2695 + 1)];
              if (v405 != *((char **)&v2695 + 1))
              {
                memmove((void *)(*((void *)&v2695 + 1) - 8 * (v428 >> 1)), *((const void **)&v2695 + 1), (size_t)&v405[-*((void *)&v2695 + 1)]);
                v405 = v423;
              }
              v431 = &v405[-8 * (v428 >> 1)];
              v405 = &v430[v429];
              *((void *)&v2695 + 1) = v431;
              *(void *)&long long v2696 = &v430[v429];
              v403 = (uint64_t *)v2616;
              unint64_t v346 = v426;
              unint64_t v331 = v425;
            }
          }
          uint64_t v439 = *v422++;
          *(void *)v405 = v439;
          v405 = (char *)(v2696 + 8);
          *(void *)&long long v2696 = v2696 + 8;
        }
        while (v422 != (uint64_t *)v403[4]);
        uint64_t v404 = v403[3];
      }
      v479 = (void *)v403[2];
      *((_OWORD *)v403 + 1) = v2695;
      *(void *)&long long v2695 = v479;
      *((void *)&v2695 + 1) = v404;
      *(void *)&long long v2696 = v422;
      uint64_t v480 = *((void *)&v2696 + 1);
      v403[4] = (uint64_t)v405;
      v403[5] = v480;
      v403[6] += v2618;
      if (v479) {
        operator delete(v479);
      }
LABEL_630:
      unint64_t v334 = v2616[3].u64[0];
      v339 = (char *)v2616[1].i64[1];
      v338 = (char *)v2616[2].i64[0];
      unint64_t v341 = v334 >> 8;
      goto LABEL_631;
    }
    if (v354)
    {
      if (v339 == (char *)v355)
      {
LABEL_528:
        unint64_t v399 = v354;
        do
        {
          *(void *)&long long v2695 = operator new(0x1000uLL);
          std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(v347, &v2695);
          --v399;
        }
        while (v399);
        v353 += v354;
        v400 = v2616;
        unint64_t v334 = v2616[3].u64[0];
LABEL_537:
        for (v400[3].i64[0] = v334 + (v353 << 8); v353; --v353)
        {
          uint64_t v401 = v2616[2].i64[0];
          *(void *)&long long v2695 = *(void *)(v401 - 8);
          v2616[2].i64[0] = v401 - 8;
          std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v347, &v2695);
        }
        goto LABEL_630;
      }
      while (1)
      {
        *(void *)&long long v2695 = operator new(0x1000uLL);
        std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v347, &v2695);
        uint64_t v397 = v2616[1].i64[1];
        uint64_t v398 = v2616[2].i64[0] - v397 == 8 ? 255 : 256;
        unint64_t v334 = v398 + v2616[3].i64[0];
        v2616[3].i64[0] = v334;
        if (!--v354) {
          break;
        }
        if (v397 == v347->i64[0]) {
          goto LABEL_528;
        }
      }
    }
    v400 = v2616;
    goto LABEL_537;
  }
LABEL_631:
  v481 = &v339[8 * v341];
  if (v338 == v339) {
    v482 = 0;
  }
  else {
    v482 = (long long *)(*(void *)v481 + 16 * v334);
  }
  if (v331 <= v346)
  {
    v486 = v482;
    v485 = &v339[8 * v341];
    if (!v331) {
      goto LABEL_764;
    }
    goto LABEL_649;
  }
  v483 = &v333[16 * (v331 - v346)];
  if (v346 < v331 >> 1) {
    v483 = &v332[-16 * v346];
  }
  if (v483 == v333)
  {
    v486 = v482;
    v485 = &v339[8 * v341];
  }
  else
  {
    v484 = v483;
    v485 = &v339[8 * v341];
    v486 = v482;
    do
    {
      if (v486 == *(long long **)v485)
      {
        uint64_t v487 = *((void *)v485 - 1);
        v485 -= 8;
        v486 = (long long *)(v487 + 4096);
      }
      uint64_t v488 = *((void *)v484 - 2);
      v484 -= 16;
      *((void *)v486-- - 2) = v488;
      uint64_t v489 = *((void *)v484 + 1);
      *((void *)v486 + 1) = v489;
      if (v489)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v489 + 8), 1uLL, memory_order_relaxed);
        unint64_t v334 = v2616[3].u64[0];
      }
      --v334;
      uint64_t v490 = v2616[3].i64[1] + 1;
      v2616[3].i64[0] = v334;
      v2616[3].i64[1] = v490;
    }
    while (v484 != v333);
    v333 = v483;
  }
  unint64_t v331 = v346;
  if (v346)
  {
LABEL_649:
    v491 = (long long **)std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator+[abi:ne180100](v481, (uint64_t)v482, v331);
    v493 = v491;
    v494 = v492;
    if (v482 != v492)
    {
      v495 = v491;
      v496 = v492;
      do
      {
        if (v486 == *(long long **)v485)
        {
          uint64_t v497 = *((void *)v485 - 1);
          v485 -= 8;
          v486 = (long long *)(v497 + 4096);
        }
        if (v496 == *v495)
        {
          uint64_t v498 = (uint64_t)*--v495;
          v496 = (long long *)(v498 + 4096);
        }
        long long v499 = *--v496;
        *--v486 = v499;
        *(void *)v496 = 0;
        *((void *)v496 + 1) = 0;
        v2616[3] = vaddq_s64(v2616[3], (int64x2_t)xmmword_1901C6000);
      }
      while (v496 != v482);
    }
    if (v331 < v346)
    {
      v500 = (long long **)std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator+[abi:ne180100](v481, (uint64_t)v482, v346);
      v502 = v501;
      if (v493 == v500)
      {
        v511 = v494;
        v512 = v502;
        v508 = v481;
        uint64_t v509 = (uint64_t)v482;
      }
      else
      {
        v503 = v500;
        v505 = *v493;
        v504 = v493 + 1;
        v506 = v505 + 256;
        v507 = v494;
        v508 = v481;
        uint64_t v509 = (uint64_t)v482;
        while (1)
        {
          std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>(&v2695, v507, v506, v508, v509);
          v508 = (char *)*((void *)&v2695 + 1);
          uint64_t v509 = v2696;
          if (v504 == v503) {
            break;
          }
          v510 = *v504++;
          v507 = v510;
          v506 = v510 + 256;
        }
        v511 = *v503;
        v512 = v502;
      }
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>(&v2695, v511, v512, v508, v509);
      v482 = (long long *)v2696;
      v481 = (char *)*((void *)&v2695 + 1);
    }
    if (v333 != v332)
    {
      v513 = *(char **)v481;
      while (1)
      {
        uint64_t v514 = v513 - (char *)v482 + 4096;
        if ((v332 - v333) >> 4 >= v514 >> 4) {
          uint64_t v515 = v514 >> 4;
        }
        else {
          uint64_t v515 = (v332 - v333) >> 4;
        }
        if (v515)
        {
          v516 = &v333[16 * v515];
          do
          {
            uint64_t v518 = *(void *)v333;
            uint64_t v517 = *((void *)v333 + 1);
            if (v517) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v517 + 8), 1uLL, memory_order_relaxed);
            }
            v519 = (std::__shared_weak_count *)*((void *)v482 + 1);
            *(void *)v482 = v518;
            *((void *)v482 + 1) = v517;
            if (v519) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v519);
            }
            v333 += 16;
            ++v482;
          }
          while (v333 != v516);
          v333 = v516;
        }
        if (v333 == v332) {
          break;
        }
        v520 = (char *)*((void *)v481 + 1);
        v481 += 8;
        v513 = v520;
        v482 = (long long *)v520;
      }
    }
  }
LABEL_764:
  atomic_fetch_add(v2616[4].i64, (v2693 - v2692) >> 4);
  unint64_t v583 = v2616[7].u64[0];
  uint64_t v584 = v2616[7].i64[1];
  unint64_t v585 = v583 + v584;
  unint64_t v586 = (v583 + v584) >> 8;
  v588 = (char *)v2616[5].i64[1];
  v587 = (char *)v2616[6].i64[0];
  v589 = &v588[8 * v586];
  unint64_t v590 = v583 >> 8;
  int64_t v591 = v587 - v588;
  if (v587 == v588)
  {
    uint64_t v592 = 0;
    uint64_t v597 = 0;
    v593 = v2689;
    v594 = v2690;
    unint64_t v595 = (v2690 - v2689) >> 4;
    v596 = &v588[8 * v590];
  }
  else
  {
    uint64_t v592 = *(void *)v589 + 16 * v585;
    v593 = v2689;
    v594 = v2690;
    unint64_t v595 = (v2690 - v2689) >> 4;
    v596 = &v588[8 * v590];
    uint64_t v597 = *(void *)v596 + 16 * v583;
  }
  if (v592 == v597) {
    unint64_t v598 = 0;
  }
  else {
    unint64_t v598 = ((v592 - *(void *)v589) >> 4) + 32 * (v589 - v596) - ((v597 - *(void *)v596) >> 4);
  }
  v599 = v2616 + 5;
  if (v598 >= v584 - v598)
  {
    uint64_t v612 = 32 * v591 - 1;
    uint64_t v613 = v587 - v588;
    if (v587 == v588) {
      uint64_t v612 = 0;
    }
    unint64_t v614 = v612 - v585;
    BOOL v363 = v595 >= v614;
    unint64_t v615 = v595 - v614;
    if (v615 == 0 || !v363)
    {
LABEL_1019:
      v795 = &v588[8 * v586];
      if (v587 == v588) {
        uint64_t v796 = 0;
      }
      else {
        uint64_t v796 = *(void *)v795 + 16 * v585;
      }
      unint64_t v797 = v584 - v598;
      if (v797 >= v595)
      {
        v801 = (void *)v796;
        v800 = &v588[8 * v586];
        if (!v595) {
          goto LABEL_1066;
        }
      }
      else
      {
        v798 = &v594[16 * (v797 - v595)];
        if (v797 < v595 >> 1) {
          v798 = &v593[16 * v797];
        }
        if (v798 == v594)
        {
          v801 = (void *)v796;
          v800 = &v588[8 * v586];
        }
        else
        {
          v799 = v798;
          v800 = v795;
          v801 = (void *)v796;
          do
          {
            void *v801 = *(void *)v799;
            uint64_t v802 = *((void *)v799 + 1);
            v801[1] = v802;
            if (v802) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v802 + 8), 1uLL, memory_order_relaxed);
            }
            v801 += 2;
            if ((void *)((char *)v801 - *(void *)v800) == (void *)4096)
            {
              v803 = (void *)*((void *)v800 + 1);
              v800 += 8;
              v801 = v803;
            }
            ++v2616[7].i64[1];
            v799 += 16;
          }
          while (v799 != v594);
          v594 = v798;
        }
        unint64_t v595 = v797;
        if (!v797) {
          goto LABEL_1066;
        }
      }
      v804 = std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator-[abi:ne180100](v795, v796, v595);
      v806 = v804;
      uint64_t v807 = v805;
      if (v796 != v805)
      {
        v808 = v804;
        uint64_t v809 = v805;
        do
        {
          *(_OWORD *)v801 = *(_OWORD *)v809;
          v801 += 2;
          *(void *)uint64_t v809 = 0;
          *(void *)(v809 + 8) = 0;
          if ((void *)((char *)v801 - *(void *)v800) == (void *)4096)
          {
            v810 = (void *)*((void *)v800 + 1);
            v800 += 8;
            v801 = v810;
          }
          v809 += 16;
          if (v809 - *v808 == 4096)
          {
            uint64_t v811 = v808[1];
            ++v808;
            uint64_t v809 = v811;
          }
          ++v2616[7].i64[1];
        }
        while (v809 != v796);
      }
      if (v595 < v797)
      {
        v812 = std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator-[abi:ne180100](v795, v796, v797);
        uint64_t v814 = v813;
        if (v812 == v806)
        {
          uint64_t v823 = v807;
          v820 = v795;
          uint64_t v821 = v796;
        }
        else
        {
          v815 = v812;
          uint64_t v818 = *v806;
          v817 = v806 - 1;
          uint64_t v816 = v818;
          uint64_t v819 = v807;
          v820 = v795;
          uint64_t v821 = v796;
          while (1)
          {
            std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>(&v2695, v816, v819, v820, v821);
            v820 = (char *)*((void *)&v2695 + 1);
            uint64_t v821 = v2696;
            if (v817 == v815) {
              break;
            }
            uint64_t v822 = *v817--;
            uint64_t v816 = v822;
            uint64_t v819 = v822 + 4096;
          }
          uint64_t v823 = *v815 + 4096;
          uint64_t v813 = v814;
        }
        std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>(&v2695, v813, v823, v820, v821);
        uint64_t v796 = v2696;
        v795 = (char *)*((void *)&v2695 + 1);
      }
      if (v593 != v594)
      {
        uint64_t v824 = *(void *)v795;
        while (1)
        {
          uint64_t v825 = v796 - v824;
          if ((v594 - v593) >> 4 >= v825 >> 4) {
            uint64_t v826 = v825 >> 4;
          }
          else {
            uint64_t v826 = (v594 - v593) >> 4;
          }
          if (v826)
          {
            v827 = (std::__shared_weak_count **)(v594 - 8);
            uint64_t v828 = -16 * v826;
            v829 = (std::__shared_weak_count **)(v796 - 8);
            do
            {
              v831 = *(v827 - 1);
              v830 = *v827;
              if (*v827) {
                atomic_fetch_add_explicit(&v830->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              v832 = *v829;
              *(v829 - 1) = v831;
              *v829 = v830;
              if (v832) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v832);
              }
              v827 -= 2;
              v829 -= 2;
              v828 += 16;
            }
            while (v828);
          }
          v594 -= 16 * v826;
          if (v594 == v593) {
            break;
          }
          uint64_t v833 = *((void *)v795 - 1);
          v795 -= 8;
          uint64_t v824 = v833;
          uint64_t v796 = v833 + 4096;
        }
      }
      goto LABEL_1066;
    }
    if (v587 == v588) {
      unint64_t v616 = v615 + 1;
    }
    else {
      unint64_t v616 = v615;
    }
    if ((_BYTE)v616) {
      unint64_t v617 = (v616 >> 8) + 1;
    }
    else {
      unint64_t v617 = v616 >> 8;
    }
    if (v617 >= v590) {
      unint64_t v618 = v583 >> 8;
    }
    else {
      unint64_t v618 = v617;
    }
    unint64_t v2639 = v598;
    if (v617 <= v590)
    {
      v2616[7].i64[0] = v583 - (v618 << 8);
      if (v618)
      {
        v625 = (uint64_t *)v2616;
        do
        {
          v626 = (void *)v625[11];
          uint64_t v629 = *v626;
          v627 = (char *)(v626 + 1);
          uint64_t v628 = v629;
          v625[11] = (uint64_t)v627;
          if (v587 == (char *)v625[13])
          {
            uint64_t v630 = (uint64_t)&v627[-v599->i64[0]];
            if ((unint64_t)v627 <= v599->i64[0])
            {
              if (v587 == (char *)v599->i64[0]) {
                unint64_t v637 = 1;
              }
              else {
                unint64_t v637 = (uint64_t)&v587[-v599->i64[0]] >> 2;
              }
              v638 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v637);
              v640 = &v638[8 * (v637 >> 2)];
              v641 = (uint64_t *)v2616[5].i64[1];
              v587 = v640;
              uint64_t v642 = v2616[6].i64[0] - (void)v641;
              if (v642)
              {
                v587 = &v640[v642 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v643 = 8 * (v642 >> 3);
                v644 = &v638[8 * (v637 >> 2)];
                do
                {
                  uint64_t v645 = *v641++;
                  *(void *)v644 = v645;
                  v644 += 8;
                  v643 -= 8;
                }
                while (v643);
              }
              v625 = (uint64_t *)v2616;
              v646 = (void *)v2616[5].i64[0];
              v2616[5].i64[0] = (uint64_t)v638;
              v2616[5].i64[1] = (uint64_t)v640;
              v2616[6].i64[0] = (uint64_t)v587;
              v2616[6].i64[1] = (uint64_t)&v638[8 * v639];
              if (v646)
              {
                operator delete(v646);
                v587 = (char *)v2616[6].i64[0];
              }
            }
            else
            {
              uint64_t v631 = v630 >> 3;
              BOOL v381 = v630 >> 3 < -1;
              uint64_t v632 = (v630 >> 3) + 2;
              if (v381) {
                uint64_t v633 = v632;
              }
              else {
                uint64_t v633 = v631 + 1;
              }
              v634 = &v627[-8 * (v633 >> 1)];
              int64_t v635 = v587 - v627;
              v625 = (uint64_t *)v2616;
              if (v587 != v627)
              {
                memmove(&v627[-8 * (v633 >> 1)], v627, v587 - v627);
                v587 = (char *)v2616[5].i64[1];
              }
              v636 = &v587[-8 * (v633 >> 1)];
              v587 = &v634[v635];
              v2616[5].i64[1] = (uint64_t)v636;
              v2616[6].i64[0] = (uint64_t)&v634[v635];
            }
          }
          else
          {
            v625 = (uint64_t *)v2616;
          }
          *(void *)v587 = v628;
          v587 = (char *)(v625[12] + 8);
          v625[12] = (uint64_t)v587;
          --v618;
        }
        while (v618);
        goto LABEL_1018;
      }
    }
    else
    {
      unint64_t v619 = v617 - v618;
      uint64_t v620 = v2616[6].i64[1] - v2616[5].i64[0];
      if (v619 <= (v620 >> 3) - (v613 >> 3))
      {
        if (v619)
        {
          while (v2616[6].i64[1] != v2616[6].i64[0])
          {
            *(void *)&long long v2695 = operator new(0x1000uLL);
            std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(v599, &v2695);
            if (!--v619)
            {
              v587 = (char *)v2616[6].i64[0];
              goto LABEL_995;
            }
          }
          for (uint64_t i1 = 0; i1 != v619; ++i1)
          {
            *(void *)&long long v2695 = operator new(0x1000uLL);
            std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v599, &v2695);
            v587 = (char *)v2616[6].i64[0];
            if (&v587[-v2616[5].i64[1]] == (char *)8) {
              uint64_t v771 = 255;
            }
            else {
              uint64_t v771 = 256;
            }
            uint64_t v772 = v771 + v2616[7].i64[0];
            v2616[7].i64[0] = v772;
          }
          v618 += v619;
          v773 = v2616;
        }
        else
        {
LABEL_995:
          v773 = v2616;
          uint64_t v772 = v2616[7].i64[0];
        }
        v773[7].i64[0] = v772 - (v618 << 8);
        if (v618)
        {
          v625 = (uint64_t *)v2616;
          do
          {
            v774 = (void *)v625[11];
            uint64_t v777 = *v774;
            v775 = (char *)(v774 + 1);
            uint64_t v776 = v777;
            v625[11] = (uint64_t)v775;
            if (v587 == (char *)v625[13])
            {
              uint64_t v778 = (uint64_t)&v775[-v599->i64[0]];
              if ((unint64_t)v775 <= v599->i64[0])
              {
                if (v587 == (char *)v599->i64[0]) {
                  unint64_t v785 = 1;
                }
                else {
                  unint64_t v785 = (uint64_t)&v587[-v599->i64[0]] >> 2;
                }
                v786 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v785);
                v788 = &v786[8 * (v785 >> 2)];
                v789 = (uint64_t *)v2616[5].i64[1];
                v587 = v788;
                uint64_t v790 = v2616[6].i64[0] - (void)v789;
                if (v790)
                {
                  v587 = &v788[v790 & 0xFFFFFFFFFFFFFFF8];
                  uint64_t v791 = 8 * (v790 >> 3);
                  v792 = &v786[8 * (v785 >> 2)];
                  do
                  {
                    uint64_t v793 = *v789++;
                    *(void *)v792 = v793;
                    v792 += 8;
                    v791 -= 8;
                  }
                  while (v791);
                }
                v625 = (uint64_t *)v2616;
                v794 = (void *)v2616[5].i64[0];
                v2616[5].i64[0] = (uint64_t)v786;
                v2616[5].i64[1] = (uint64_t)v788;
                v2616[6].i64[0] = (uint64_t)v587;
                v2616[6].i64[1] = (uint64_t)&v786[8 * v787];
                if (v794)
                {
                  operator delete(v794);
                  v587 = (char *)v2616[6].i64[0];
                }
              }
              else
              {
                uint64_t v779 = v778 >> 3;
                BOOL v381 = v778 >> 3 < -1;
                uint64_t v780 = (v778 >> 3) + 2;
                if (v381) {
                  uint64_t v781 = v780;
                }
                else {
                  uint64_t v781 = v779 + 1;
                }
                v782 = &v775[-8 * (v781 >> 1)];
                int64_t v783 = v587 - v775;
                v625 = (uint64_t *)v2616;
                if (v587 != v775)
                {
                  memmove(&v775[-8 * (v781 >> 1)], v775, v587 - v775);
                  v587 = (char *)v2616[5].i64[1];
                }
                v784 = &v587[-8 * (v781 >> 1)];
                v587 = &v782[v783];
                v2616[5].i64[1] = (uint64_t)v784;
                v2616[6].i64[0] = (uint64_t)&v782[v783];
              }
            }
            else
            {
              v625 = (uint64_t *)v2616;
            }
            *(void *)v587 = v776;
            v587 = (char *)(v625[12] + 8);
            v625[12] = (uint64_t)v587;
            --v618;
          }
          while (v618);
          goto LABEL_1018;
        }
      }
      else
      {
        uint64_t v621 = v613 >> 3;
        if (v620 >> 2 <= v619 + (v613 >> 3)) {
          unint64_t v622 = v619 + (v613 >> 3);
        }
        else {
          unint64_t v622 = v620 >> 2;
        }
        v2697 = &v2616[6].i8[8];
        if (v622) {
          unint64_t v622 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v622);
        }
        else {
          uint64_t v623 = 0;
        }
        *(void *)&long long v2695 = v622;
        *((void *)&v2695 + 1) = v622 + 8 * (v621 - v618);
        *(void *)&long long v2696 = *((void *)&v2695 + 1);
        *((void *)&v2696 + 1) = v622 + 8 * v623;
        v689 = v2616;
        do
        {
          *(void *)&long long v2667 = operator new(0x1000uLL);
          std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(&v2695, &v2667);
          --v619;
        }
        while (v619);
        unint64_t v2621 = v618 << 8;
        v690 = (char *)v2696;
        if (v618)
        {
          v691 = (void *)v2616[5].i64[1];
          unint64_t v2651 = v595;
          do
          {
            if (v690 == *((char **)&v2696 + 1))
            {
              v692 = (char *)*((void *)&v2695 + 1);
              v693 = (void *)v2695;
              if (*((void *)&v2695 + 1) <= (unint64_t)v2695)
              {
                if (v690 == (char *)v2695) {
                  unint64_t v700 = 1;
                }
                else {
                  unint64_t v700 = (uint64_t)&v690[-v2695] >> 2;
                }
                v701 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v700);
                uint64_t v703 = v690 - v692;
                BOOL v417 = v690 == v692;
                v690 = &v701[8 * (v700 >> 2)];
                if (!v417)
                {
                  v690 = &v701[8 * (v700 >> 2) + (v703 & 0xFFFFFFFFFFFFFFF8)];
                  uint64_t v704 = 8 * (v703 >> 3);
                  v705 = &v701[8 * (v700 >> 2)];
                  do
                  {
                    uint64_t v706 = *(void *)v692;
                    v692 += 8;
                    *(void *)v705 = v706;
                    v705 += 8;
                    v704 -= 8;
                  }
                  while (v704);
                }
                *(void *)&long long v2695 = v701;
                *((void *)&v2695 + 1) = &v701[8 * (v700 >> 2)];
                *(void *)&long long v2696 = v690;
                *((void *)&v2696 + 1) = &v701[8 * v702];
                if (v693) {
                  operator delete(v693);
                }
                v689 = v2616;
              }
              else
              {
                unint64_t v694 = v598;
                uint64_t v695 = (uint64_t)(*((void *)&v2695 + 1) - v2695) >> 3;
                if (v695 >= -1) {
                  uint64_t v696 = v695 + 1;
                }
                else {
                  uint64_t v696 = v695 + 2;
                }
                uint64_t v697 = *((void *)&v2695 + 1) - 8 * (v696 >> 1);
                v698 = &v690[-*((void *)&v2695 + 1)];
                if (v690 != *((char **)&v2695 + 1))
                {
                  memmove((void *)(*((void *)&v2695 + 1) - 8 * (v696 >> 1)), *((const void **)&v2695 + 1), (size_t)&v690[-*((void *)&v2695 + 1)]);
                  v690 = v692;
                }
                v699 = &v690[-8 * (v696 >> 1)];
                v690 = &v698[v697];
                *((void *)&v2695 + 1) = v699;
                *(void *)&long long v2696 = &v698[v697];
                v689 = v2616;
                unint64_t v598 = v694;
                unint64_t v595 = v2651;
              }
            }
            *(void *)v690 = *v691;
            v690 = (char *)(v2696 + 8);
            *(void *)&long long v2696 = v2696 + 8;
            v691 = (void *)(v689[5].i64[1] + 8);
            v689[5].i64[1] = (uint64_t)v691;
            --v618;
          }
          while (v618);
        }
        uint64_t v707 = v689[6].i64[0];
        v708 = (char *)*((void *)&v2695 + 1);
        v709 = (char *)v2695;
        v710 = (char *)*((void *)&v2696 + 1);
        while (v707 != v2616[5].i64[1])
        {
          if (v708 == v709)
          {
            if (v690 >= v710)
            {
              if (v710 == v709) {
                unint64_t v715 = 1;
              }
              else {
                unint64_t v715 = (v710 - v709) >> 2;
              }
              v716 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v715);
              v718 = v716;
              v708 = &v716[(2 * v715 + 6) & 0xFFFFFFFFFFFFFFF8];
              uint64_t v719 = v690 - v709;
              BOOL v417 = v690 == v709;
              v690 = v708;
              if (!v417)
              {
                v690 = &v708[v719 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v720 = 8 * (v719 >> 3);
                v721 = v708;
                v722 = v709;
                do
                {
                  uint64_t v723 = *(void *)v722;
                  v722 += 8;
                  *(void *)v721 = v723;
                  v721 += 8;
                  v720 -= 8;
                }
                while (v720);
              }
              v710 = &v716[8 * v717];
              if (v709) {
                operator delete(v709);
              }
              v709 = v718;
            }
            else
            {
              uint64_t v711 = (v710 - v690) >> 3;
              if (v711 >= -1) {
                unint64_t v712 = v711 + 1;
              }
              else {
                unint64_t v712 = v711 + 2;
              }
              v713 = &v690[8 * (v712 >> 1)];
              v708 = &v713[-(v690 - v709)];
              size_t v714 = v690 - v709;
              BOOL v417 = v690 == v709;
              v690 = v713;
              if (!v417) {
                memmove(v708, v709, v714);
              }
            }
          }
          uint64_t v724 = *(void *)(v707 - 8);
          v707 -= 8;
          *((void *)v708 - 1) = v724;
          v708 -= 8;
        }
        *(void *)&long long v2695 = v709;
        *((void *)&v2695 + 1) = v708;
        *(void *)&long long v2696 = v690;
        *((void *)&v2696 + 1) = v710;
        long long v727 = v2695;
        int64x2_t v726 = (int64x2_t)v2696;
        *(void *)&long long v2695 = v2616[5].i64[0];
        v725 = (void *)v2695;
        *((void *)&v2695 + 1) = v707;
        v2616[5] = (int64x2_t)v727;
        v2616[6] = v726;
        v2616[7].i64[0] -= v2621;
        if (v725)
        {
          operator delete(v725);
          v587 = (char *)v2616[6].i64[0];
        }
        else
        {
          v587 = (char *)v726.i64[0];
        }
      }
    }
    v625 = (uint64_t *)v2616;
LABEL_1018:
    uint64_t v584 = v625[15];
    v588 = (char *)v625[11];
    unint64_t v585 = v625[14] + v584;
    unint64_t v586 = v585 >> 8;
    unint64_t v598 = v2639;
    goto LABEL_1019;
  }
  unint64_t v600 = v595 - v583;
  if (v595 > v583)
  {
    uint64_t v601 = 32 * v591 - 1;
    uint64_t v602 = v587 - v588;
    if (v587 == v588)
    {
      uint64_t v601 = 0;
      ++v600;
    }
    if ((_BYTE)v600) {
      unint64_t v603 = (v600 >> 8) + 1;
    }
    else {
      unint64_t v603 = v600 >> 8;
    }
    unint64_t v604 = v601 - v585;
    if (v603 >= v604 >> 8) {
      unint64_t v605 = v604 >> 8;
    }
    else {
      unint64_t v605 = v603;
    }
    if (v603 <= v604 >> 8)
    {
      for (v2616[7].i64[0] = v583 + (v605 << 8); v605; --v605)
      {
        uint64_t v624 = v2616[6].i64[0];
        *(void *)&long long v2695 = *(void *)(v624 - 8);
        v2616[6].i64[0] = v624 - 8;
        std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v599, &v2695);
      }
      goto LABEL_939;
    }
    unint64_t v606 = v603 - v605;
    uint64_t v607 = v2616[5].i64[0];
    uint64_t v608 = v2616[6].i64[1] - v607;
    if (v603 - v605 > (v608 >> 3) - (v602 >> 3))
    {
      BOOL v609 = v587 == v588;
      if (v608 >> 2 <= v606 + (v602 >> 3)) {
        unint64_t v610 = v606 + (v602 >> 3);
      }
      else {
        unint64_t v610 = v608 >> 2;
      }
      v2697 = &v2616[6].i8[8];
      if (v610) {
        unint64_t v610 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v610);
      }
      else {
        uint64_t v611 = 0;
      }
      unint64_t v652 = (v603 << 8) - v609;
      *(void *)&long long v2695 = v610;
      *((void *)&v2695 + 1) = v610;
      *(void *)&long long v2696 = v610;
      *((void *)&v2696 + 1) = v610 + 8 * v611;
      v653 = (uint64_t *)v2616;
      do
      {
        *(void *)&long long v2667 = operator new(0x1000uLL);
        std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(&v2695, &v2667);
        --v606;
      }
      while (v606);
      unint64_t v2620 = v652;
      uint64_t v654 = v2616[6].i64[0];
      v655 = (char *)v2696;
      if (v605)
      {
        unint64_t v2650 = v595;
        do
        {
          if (v655 == *((char **)&v2696 + 1))
          {
            v656 = (char *)*((void *)&v2695 + 1);
            v657 = (void *)v2695;
            if (*((void *)&v2695 + 1) <= (unint64_t)v2695)
            {
              if (v655 == (char *)v2695) {
                unint64_t v664 = 1;
              }
              else {
                unint64_t v664 = (uint64_t)&v655[-v2695] >> 2;
              }
              v665 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v664);
              uint64_t v667 = v655 - v656;
              BOOL v417 = v655 == v656;
              v655 = &v665[8 * (v664 >> 2)];
              if (!v417)
              {
                v655 = &v665[8 * (v664 >> 2) + (v667 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v668 = 8 * (v667 >> 3);
                v669 = &v665[8 * (v664 >> 2)];
                do
                {
                  uint64_t v670 = *(void *)v656;
                  v656 += 8;
                  *(void *)v669 = v670;
                  v669 += 8;
                  v668 -= 8;
                }
                while (v668);
              }
              *(void *)&long long v2695 = v665;
              *((void *)&v2695 + 1) = &v665[8 * (v664 >> 2)];
              *(void *)&long long v2696 = v655;
              *((void *)&v2696 + 1) = &v665[8 * v666];
              if (v657) {
                operator delete(v657);
              }
              v653 = (uint64_t *)v2616;
            }
            else
            {
              unint64_t v658 = v598;
              uint64_t v659 = (uint64_t)(*((void *)&v2695 + 1) - v2695) >> 3;
              if (v659 >= -1) {
                uint64_t v660 = v659 + 1;
              }
              else {
                uint64_t v660 = v659 + 2;
              }
              uint64_t v661 = *((void *)&v2695 + 1) - 8 * (v660 >> 1);
              v662 = &v655[-*((void *)&v2695 + 1)];
              if (v655 != *((char **)&v2695 + 1))
              {
                memmove((void *)(*((void *)&v2695 + 1) - 8 * (v660 >> 1)), *((const void **)&v2695 + 1), (size_t)&v655[-*((void *)&v2695 + 1)]);
                v655 = v656;
              }
              v663 = &v655[-8 * (v660 >> 1)];
              v655 = &v662[v661];
              *((void *)&v2695 + 1) = v663;
              *(void *)&long long v2696 = &v662[v661];
              v653 = (uint64_t *)v2616;
              unint64_t v598 = v658;
              unint64_t v595 = v2650;
            }
          }
          *(void *)v655 = *(void *)(v654 - 8);
          v655 = (char *)(v2696 + 8);
          *(void *)&long long v2696 = v2696 + 8;
          uint64_t v654 = v653[12] - 8;
          v653[12] = v654;
          --v605;
        }
        while (v605);
      }
      v671 = (uint64_t *)v653[11];
      if (v671 == (uint64_t *)v654)
      {
        v671 = (uint64_t *)v654;
      }
      else
      {
        do
        {
          if (v655 == *((char **)&v2696 + 1))
          {
            v672 = (char *)*((void *)&v2695 + 1);
            v673 = (void *)v2695;
            if (*((void *)&v2695 + 1) <= (unint64_t)v2695)
            {
              if (v655 == (char *)v2695) {
                unint64_t v681 = 1;
              }
              else {
                unint64_t v681 = (uint64_t)&v655[-v2695] >> 2;
              }
              v682 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v681);
              uint64_t v684 = v655 - v672;
              BOOL v417 = v655 == v672;
              v655 = &v682[8 * (v681 >> 2)];
              if (!v417)
              {
                v655 = &v682[8 * (v681 >> 2) + (v684 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v685 = 8 * (v684 >> 3);
                v686 = &v682[8 * (v681 >> 2)];
                do
                {
                  uint64_t v687 = *(void *)v672;
                  v672 += 8;
                  *(void *)v686 = v687;
                  v686 += 8;
                  v685 -= 8;
                }
                while (v685);
              }
              *(void *)&long long v2695 = v682;
              *((void *)&v2695 + 1) = &v682[8 * (v681 >> 2)];
              *(void *)&long long v2696 = v655;
              *((void *)&v2696 + 1) = &v682[8 * v683];
              if (v673) {
                operator delete(v673);
              }
              v653 = (uint64_t *)v2616;
            }
            else
            {
              unint64_t v674 = v595;
              unint64_t v675 = v598;
              uint64_t v676 = (uint64_t)(*((void *)&v2695 + 1) - v2695) >> 3;
              if (v676 >= -1) {
                uint64_t v677 = v676 + 1;
              }
              else {
                uint64_t v677 = v676 + 2;
              }
              uint64_t v678 = *((void *)&v2695 + 1) - 8 * (v677 >> 1);
              v679 = &v655[-*((void *)&v2695 + 1)];
              if (v655 != *((char **)&v2695 + 1))
              {
                memmove((void *)(*((void *)&v2695 + 1) - 8 * (v677 >> 1)), *((const void **)&v2695 + 1), (size_t)&v655[-*((void *)&v2695 + 1)]);
                v655 = v672;
              }
              v680 = &v655[-8 * (v677 >> 1)];
              v655 = &v679[v678];
              *((void *)&v2695 + 1) = v680;
              *(void *)&long long v2696 = &v679[v678];
              v653 = (uint64_t *)v2616;
              unint64_t v598 = v675;
              unint64_t v595 = v674;
            }
          }
          uint64_t v688 = *v671++;
          *(void *)v655 = v688;
          v655 = (char *)(v2696 + 8);
          *(void *)&long long v2696 = v2696 + 8;
        }
        while (v671 != (uint64_t *)v653[12]);
        uint64_t v654 = v653[11];
      }
      v728 = (void *)v653[10];
      *((_OWORD *)v653 + 5) = v2695;
      *(void *)&long long v2695 = v728;
      *((void *)&v2695 + 1) = v654;
      *(void *)&long long v2696 = v671;
      uint64_t v729 = *((void *)&v2696 + 1);
      v653[12] = (uint64_t)v655;
      v653[13] = v729;
      v653[14] += v2620;
      if (v728) {
        operator delete(v728);
      }
LABEL_939:
      unint64_t v583 = v2616[7].u64[0];
      v588 = (char *)v2616[5].i64[1];
      v587 = (char *)v2616[6].i64[0];
      unint64_t v590 = v583 >> 8;
      goto LABEL_940;
    }
    if (v606)
    {
      if (v588 == (char *)v607)
      {
LABEL_838:
        unint64_t v649 = v606;
        do
        {
          *(void *)&long long v2695 = operator new(0x1000uLL);
          std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(v599, &v2695);
          --v649;
        }
        while (v649);
        v605 += v606;
        v650 = v2616;
        unint64_t v583 = v2616[7].u64[0];
LABEL_846:
        for (v650[7].i64[0] = v583 + (v605 << 8); v605; --v605)
        {
          uint64_t v651 = v2616[6].i64[0];
          *(void *)&long long v2695 = *(void *)(v651 - 8);
          v2616[6].i64[0] = v651 - 8;
          std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v599, &v2695);
        }
        goto LABEL_939;
      }
      while (1)
      {
        *(void *)&long long v2695 = operator new(0x1000uLL);
        std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v599, &v2695);
        uint64_t v647 = v2616[5].i64[1];
        uint64_t v648 = v2616[6].i64[0] - v647 == 8 ? 255 : 256;
        unint64_t v583 = v648 + v2616[7].i64[0];
        v2616[7].i64[0] = v583;
        if (!--v606) {
          break;
        }
        if (v647 == v599->i64[0]) {
          goto LABEL_838;
        }
      }
    }
    v650 = v2616;
    goto LABEL_846;
  }
LABEL_940:
  v730 = &v588[8 * v590];
  if (v587 == v588) {
    v731 = 0;
  }
  else {
    v731 = (long long *)(*(void *)v730 + 16 * v583);
  }
  if (v595 <= v598)
  {
    v735 = v731;
    v734 = &v588[8 * v590];
    if (!v595) {
      goto LABEL_1066;
    }
    goto LABEL_958;
  }
  v732 = &v593[16 * (v595 - v598)];
  if (v598 < v595 >> 1) {
    v732 = &v594[-16 * v598];
  }
  if (v732 == v593)
  {
    v735 = v731;
    v734 = &v588[8 * v590];
  }
  else
  {
    v733 = v732;
    v734 = &v588[8 * v590];
    v735 = v731;
    do
    {
      if (v735 == *(long long **)v734)
      {
        uint64_t v736 = *((void *)v734 - 1);
        v734 -= 8;
        v735 = (long long *)(v736 + 4096);
      }
      uint64_t v737 = *((void *)v733 - 2);
      v733 -= 16;
      *((void *)v735-- - 2) = v737;
      uint64_t v738 = *((void *)v733 + 1);
      *((void *)v735 + 1) = v738;
      if (v738)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v738 + 8), 1uLL, memory_order_relaxed);
        unint64_t v583 = v2616[7].u64[0];
      }
      --v583;
      uint64_t v739 = v2616[7].i64[1] + 1;
      v2616[7].i64[0] = v583;
      v2616[7].i64[1] = v739;
    }
    while (v733 != v593);
    v593 = v732;
  }
  unint64_t v595 = v598;
  if (v598)
  {
LABEL_958:
    v740 = (long long **)std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator+[abi:ne180100](v730, (uint64_t)v731, v595);
    v742 = v740;
    v743 = v741;
    if (v731 != v741)
    {
      v744 = v740;
      v745 = v741;
      do
      {
        if (v735 == *(long long **)v734)
        {
          uint64_t v746 = *((void *)v734 - 1);
          v734 -= 8;
          v735 = (long long *)(v746 + 4096);
        }
        if (v745 == *v744)
        {
          uint64_t v747 = (uint64_t)*--v744;
          v745 = (long long *)(v747 + 4096);
        }
        long long v748 = *--v745;
        *--v735 = v748;
        *(void *)v745 = 0;
        *((void *)v745 + 1) = 0;
        v2616[7] = vaddq_s64(v2616[7], (int64x2_t)xmmword_1901C6000);
      }
      while (v745 != v731);
    }
    if (v595 < v598)
    {
      v749 = (long long **)std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator+[abi:ne180100](v730, (uint64_t)v731, v598);
      v751 = v750;
      if (v742 == v749)
      {
        v760 = v743;
        v761 = v751;
        v757 = v730;
        uint64_t v758 = (uint64_t)v731;
      }
      else
      {
        v752 = v749;
        v754 = *v742;
        v753 = v742 + 1;
        v755 = v754 + 256;
        v756 = v743;
        v757 = v730;
        uint64_t v758 = (uint64_t)v731;
        while (1)
        {
          std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>(&v2695, v756, v755, v757, v758);
          v757 = (char *)*((void *)&v2695 + 1);
          uint64_t v758 = v2696;
          if (v753 == v752) {
            break;
          }
          v759 = *v753++;
          v756 = v759;
          v755 = v759 + 256;
        }
        v760 = *v752;
        v761 = v751;
      }
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>(&v2695, v760, v761, v757, v758);
      v731 = (long long *)v2696;
      v730 = (char *)*((void *)&v2695 + 1);
    }
    if (v593 != v594)
    {
      v762 = *(char **)v730;
      while (1)
      {
        uint64_t v763 = v762 - (char *)v731 + 4096;
        if ((v594 - v593) >> 4 >= v763 >> 4) {
          uint64_t v764 = v763 >> 4;
        }
        else {
          uint64_t v764 = (v594 - v593) >> 4;
        }
        if (v764)
        {
          v765 = &v593[16 * v764];
          do
          {
            uint64_t v767 = *(void *)v593;
            uint64_t v766 = *((void *)v593 + 1);
            if (v766) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v766 + 8), 1uLL, memory_order_relaxed);
            }
            v768 = (std::__shared_weak_count *)*((void *)v731 + 1);
            *(void *)v731 = v767;
            *((void *)v731 + 1) = v766;
            if (v768) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v768);
            }
            v593 += 16;
            ++v731;
          }
          while (v593 != v765);
          v593 = v765;
        }
        if (v593 == v594) {
          break;
        }
        v769 = (char *)*((void *)v730 + 1);
        v730 += 8;
        v762 = v769;
        v731 = (long long *)v769;
      }
    }
  }
LABEL_1066:
  atomic_fetch_add(v2616[8].i64, (v2690 - v2689) >> 4);
  unint64_t v834 = v2616[11].u64[0];
  uint64_t v835 = v2616[11].i64[1];
  unint64_t v836 = v834 + v835;
  unint64_t v837 = (v834 + v835) >> 8;
  v839 = (char *)v2616[9].i64[1];
  v838 = (char *)v2616[10].i64[0];
  v840 = &v839[8 * v837];
  unint64_t v841 = v834 >> 8;
  int64_t v842 = v838 - v839;
  if (v838 == v839)
  {
    uint64_t v843 = 0;
    uint64_t v848 = 0;
    v844 = v2686;
    v845 = v2687;
    unint64_t v846 = (v2687 - v2686) >> 4;
    v847 = &v839[8 * v841];
  }
  else
  {
    uint64_t v843 = *(void *)v840 + 16 * v836;
    v844 = v2686;
    v845 = v2687;
    unint64_t v846 = (v2687 - v2686) >> 4;
    v847 = &v839[8 * v841];
    uint64_t v848 = *(void *)v847 + 16 * v834;
  }
  if (v843 == v848) {
    unint64_t v849 = 0;
  }
  else {
    unint64_t v849 = ((v843 - *(void *)v840) >> 4) + 32 * (v840 - v847) - ((v848 - *(void *)v847) >> 4);
  }
  v850 = v2616 + 9;
  if (v849 >= v835 - v849)
  {
    uint64_t v863 = 32 * v842 - 1;
    uint64_t v864 = v838 - v839;
    if (v838 == v839) {
      uint64_t v863 = 0;
    }
    unint64_t v865 = v863 - v836;
    BOOL v363 = v846 >= v865;
    unint64_t v866 = v846 - v865;
    if (v866 == 0 || !v363)
    {
LABEL_1321:
      v1046 = &v839[8 * v837];
      if (v838 == v839) {
        uint64_t v1047 = 0;
      }
      else {
        uint64_t v1047 = *(void *)v1046 + 16 * v836;
      }
      unint64_t v1048 = v835 - v849;
      if (v1048 >= v846)
      {
        v1052 = (void *)v1047;
        v1051 = &v839[8 * v837];
        if (!v846) {
          goto LABEL_1368;
        }
      }
      else
      {
        v1049 = &v845[16 * (v1048 - v846)];
        if (v1048 < v846 >> 1) {
          v1049 = &v844[16 * v1048];
        }
        if (v1049 == v845)
        {
          v1052 = (void *)v1047;
          v1051 = &v839[8 * v837];
        }
        else
        {
          v1050 = v1049;
          v1051 = v1046;
          v1052 = (void *)v1047;
          do
          {
            void *v1052 = *(void *)v1050;
            uint64_t v1053 = *((void *)v1050 + 1);
            v1052[1] = v1053;
            if (v1053) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v1053 + 8), 1uLL, memory_order_relaxed);
            }
            v1052 += 2;
            if ((void *)((char *)v1052 - *(void *)v1051) == (void *)4096)
            {
              v1054 = (void *)*((void *)v1051 + 1);
              v1051 += 8;
              v1052 = v1054;
            }
            ++v2616[11].i64[1];
            v1050 += 16;
          }
          while (v1050 != v845);
          v845 = v1049;
        }
        unint64_t v846 = v1048;
        if (!v1048) {
          goto LABEL_1368;
        }
      }
      v1055 = std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator-[abi:ne180100](v1046, v1047, v846);
      v1057 = v1055;
      uint64_t v1058 = v1056;
      if (v1047 != v1056)
      {
        v1059 = v1055;
        uint64_t v1060 = v1056;
        do
        {
          *(_OWORD *)v1052 = *(_OWORD *)v1060;
          v1052 += 2;
          *(void *)uint64_t v1060 = 0;
          *(void *)(v1060 + 8) = 0;
          if ((void *)((char *)v1052 - *(void *)v1051) == (void *)4096)
          {
            v1061 = (void *)*((void *)v1051 + 1);
            v1051 += 8;
            v1052 = v1061;
          }
          v1060 += 16;
          if (v1060 - *v1059 == 4096)
          {
            uint64_t v1062 = v1059[1];
            ++v1059;
            uint64_t v1060 = v1062;
          }
          ++v2616[11].i64[1];
        }
        while (v1060 != v1047);
      }
      if (v846 < v1048)
      {
        v1063 = std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator-[abi:ne180100](v1046, v1047, v1048);
        uint64_t v1065 = v1064;
        if (v1063 == v1057)
        {
          uint64_t v1074 = v1058;
          v1071 = v1046;
          uint64_t v1072 = v1047;
        }
        else
        {
          v1066 = v1063;
          uint64_t v1069 = *v1057;
          v1068 = v1057 - 1;
          uint64_t v1067 = v1069;
          uint64_t v1070 = v1058;
          v1071 = v1046;
          uint64_t v1072 = v1047;
          while (1)
          {
            std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>(&v2695, v1067, v1070, v1071, v1072);
            v1071 = (char *)*((void *)&v2695 + 1);
            uint64_t v1072 = v2696;
            if (v1068 == v1066) {
              break;
            }
            uint64_t v1073 = *v1068--;
            uint64_t v1067 = v1073;
            uint64_t v1070 = v1073 + 4096;
          }
          uint64_t v1074 = *v1066 + 4096;
          uint64_t v1064 = v1065;
        }
        std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>(&v2695, v1064, v1074, v1071, v1072);
        uint64_t v1047 = v2696;
        v1046 = (char *)*((void *)&v2695 + 1);
      }
      if (v844 != v845)
      {
        uint64_t v1075 = *(void *)v1046;
        while (1)
        {
          uint64_t v1076 = v1047 - v1075;
          if ((v845 - v844) >> 4 >= v1076 >> 4) {
            uint64_t v1077 = v1076 >> 4;
          }
          else {
            uint64_t v1077 = (v845 - v844) >> 4;
          }
          if (v1077)
          {
            v1078 = (std::__shared_weak_count **)(v845 - 8);
            uint64_t v1079 = -16 * v1077;
            v1080 = (std::__shared_weak_count **)(v1047 - 8);
            do
            {
              v1082 = *(v1078 - 1);
              v1081 = *v1078;
              if (*v1078) {
                atomic_fetch_add_explicit(&v1081->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              v1083 = *v1080;
              *(v1080 - 1) = v1082;
              *v1080 = v1081;
              if (v1083) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v1083);
              }
              v1078 -= 2;
              v1080 -= 2;
              v1079 += 16;
            }
            while (v1079);
          }
          v845 -= 16 * v1077;
          if (v845 == v844) {
            break;
          }
          uint64_t v1084 = *((void *)v1046 - 1);
          v1046 -= 8;
          uint64_t v1075 = v1084;
          uint64_t v1047 = v1084 + 4096;
        }
      }
      goto LABEL_1368;
    }
    if (v838 == v839) {
      unint64_t v867 = v866 + 1;
    }
    else {
      unint64_t v867 = v866;
    }
    if ((_BYTE)v867) {
      unint64_t v868 = (v867 >> 8) + 1;
    }
    else {
      unint64_t v868 = v867 >> 8;
    }
    if (v868 >= v841) {
      unint64_t v869 = v834 >> 8;
    }
    else {
      unint64_t v869 = v868;
    }
    unint64_t v2640 = v849;
    if (v868 <= v841)
    {
      v2616[11].i64[0] = v834 - (v869 << 8);
      if (v869)
      {
        v876 = (uint64_t *)v2616;
        do
        {
          v877 = (void *)v876[19];
          uint64_t v880 = *v877;
          v878 = (char *)(v877 + 1);
          uint64_t v879 = v880;
          v876[19] = (uint64_t)v878;
          if (v838 == (char *)v876[21])
          {
            uint64_t v881 = (uint64_t)&v878[-v850->i64[0]];
            if ((unint64_t)v878 <= v850->i64[0])
            {
              if (v838 == (char *)v850->i64[0]) {
                unint64_t v888 = 1;
              }
              else {
                unint64_t v888 = (uint64_t)&v838[-v850->i64[0]] >> 2;
              }
              v889 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v888);
              v891 = &v889[8 * (v888 >> 2)];
              v892 = (uint64_t *)v2616[9].i64[1];
              v838 = v891;
              uint64_t v893 = v2616[10].i64[0] - (void)v892;
              if (v893)
              {
                v838 = &v891[v893 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v894 = 8 * (v893 >> 3);
                v895 = &v889[8 * (v888 >> 2)];
                do
                {
                  uint64_t v896 = *v892++;
                  *(void *)v895 = v896;
                  v895 += 8;
                  v894 -= 8;
                }
                while (v894);
              }
              v876 = (uint64_t *)v2616;
              v897 = (void *)v2616[9].i64[0];
              v2616[9].i64[0] = (uint64_t)v889;
              v2616[9].i64[1] = (uint64_t)v891;
              v2616[10].i64[0] = (uint64_t)v838;
              v2616[10].i64[1] = (uint64_t)&v889[8 * v890];
              if (v897)
              {
                operator delete(v897);
                v838 = (char *)v2616[10].i64[0];
              }
            }
            else
            {
              uint64_t v882 = v881 >> 3;
              BOOL v381 = v881 >> 3 < -1;
              uint64_t v883 = (v881 >> 3) + 2;
              if (v381) {
                uint64_t v884 = v883;
              }
              else {
                uint64_t v884 = v882 + 1;
              }
              v885 = &v878[-8 * (v884 >> 1)];
              int64_t v886 = v838 - v878;
              v876 = (uint64_t *)v2616;
              if (v838 != v878)
              {
                memmove(&v878[-8 * (v884 >> 1)], v878, v838 - v878);
                v838 = (char *)v2616[9].i64[1];
              }
              v887 = &v838[-8 * (v884 >> 1)];
              v838 = &v885[v886];
              v2616[9].i64[1] = (uint64_t)v887;
              v2616[10].i64[0] = (uint64_t)&v885[v886];
            }
          }
          else
          {
            v876 = (uint64_t *)v2616;
          }
          *(void *)v838 = v879;
          v838 = (char *)(v876[20] + 8);
          v876[20] = (uint64_t)v838;
          --v869;
        }
        while (v869);
        goto LABEL_1320;
      }
    }
    else
    {
      unint64_t v870 = v868 - v869;
      uint64_t v871 = v2616[10].i64[1] - v2616[9].i64[0];
      if (v870 <= (v871 >> 3) - (v864 >> 3))
      {
        if (v870)
        {
          while (v2616[10].i64[1] != v2616[10].i64[0])
          {
            *(void *)&long long v2695 = operator new(0x1000uLL);
            std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(v850, &v2695);
            if (!--v870)
            {
              v838 = (char *)v2616[10].i64[0];
              goto LABEL_1297;
            }
          }
          for (uint64_t i2 = 0; i2 != v870; ++i2)
          {
            *(void *)&long long v2695 = operator new(0x1000uLL);
            std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v850, &v2695);
            v838 = (char *)v2616[10].i64[0];
            if (&v838[-v2616[9].i64[1]] == (char *)8) {
              uint64_t v1022 = 255;
            }
            else {
              uint64_t v1022 = 256;
            }
            uint64_t v1023 = v1022 + v2616[11].i64[0];
            v2616[11].i64[0] = v1023;
          }
          v869 += v870;
          v1024 = v2616;
        }
        else
        {
LABEL_1297:
          v1024 = v2616;
          uint64_t v1023 = v2616[11].i64[0];
        }
        v1024[11].i64[0] = v1023 - (v869 << 8);
        if (v869)
        {
          v876 = (uint64_t *)v2616;
          do
          {
            v1025 = (void *)v876[19];
            uint64_t v1028 = *v1025;
            v1026 = (char *)(v1025 + 1);
            uint64_t v1027 = v1028;
            v876[19] = (uint64_t)v1026;
            if (v838 == (char *)v876[21])
            {
              uint64_t v1029 = (uint64_t)&v1026[-v850->i64[0]];
              if ((unint64_t)v1026 <= v850->i64[0])
              {
                if (v838 == (char *)v850->i64[0]) {
                  unint64_t v1036 = 1;
                }
                else {
                  unint64_t v1036 = (uint64_t)&v838[-v850->i64[0]] >> 2;
                }
                v1037 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1036);
                v1039 = &v1037[8 * (v1036 >> 2)];
                v1040 = (uint64_t *)v2616[9].i64[1];
                v838 = v1039;
                uint64_t v1041 = v2616[10].i64[0] - (void)v1040;
                if (v1041)
                {
                  v838 = &v1039[v1041 & 0xFFFFFFFFFFFFFFF8];
                  uint64_t v1042 = 8 * (v1041 >> 3);
                  v1043 = &v1037[8 * (v1036 >> 2)];
                  do
                  {
                    uint64_t v1044 = *v1040++;
                    *(void *)v1043 = v1044;
                    v1043 += 8;
                    v1042 -= 8;
                  }
                  while (v1042);
                }
                v876 = (uint64_t *)v2616;
                v1045 = (void *)v2616[9].i64[0];
                v2616[9].i64[0] = (uint64_t)v1037;
                v2616[9].i64[1] = (uint64_t)v1039;
                v2616[10].i64[0] = (uint64_t)v838;
                v2616[10].i64[1] = (uint64_t)&v1037[8 * v1038];
                if (v1045)
                {
                  operator delete(v1045);
                  v838 = (char *)v2616[10].i64[0];
                }
              }
              else
              {
                uint64_t v1030 = v1029 >> 3;
                BOOL v381 = v1029 >> 3 < -1;
                uint64_t v1031 = (v1029 >> 3) + 2;
                if (v381) {
                  uint64_t v1032 = v1031;
                }
                else {
                  uint64_t v1032 = v1030 + 1;
                }
                v1033 = &v1026[-8 * (v1032 >> 1)];
                int64_t v1034 = v838 - v1026;
                v876 = (uint64_t *)v2616;
                if (v838 != v1026)
                {
                  memmove(&v1026[-8 * (v1032 >> 1)], v1026, v838 - v1026);
                  v838 = (char *)v2616[9].i64[1];
                }
                v1035 = &v838[-8 * (v1032 >> 1)];
                v838 = &v1033[v1034];
                v2616[9].i64[1] = (uint64_t)v1035;
                v2616[10].i64[0] = (uint64_t)&v1033[v1034];
              }
            }
            else
            {
              v876 = (uint64_t *)v2616;
            }
            *(void *)v838 = v1027;
            v838 = (char *)(v876[20] + 8);
            v876[20] = (uint64_t)v838;
            --v869;
          }
          while (v869);
          goto LABEL_1320;
        }
      }
      else
      {
        uint64_t v872 = v864 >> 3;
        if (v871 >> 2 <= v870 + (v864 >> 3)) {
          unint64_t v873 = v870 + (v864 >> 3);
        }
        else {
          unint64_t v873 = v871 >> 2;
        }
        v2697 = &v2616[10].i8[8];
        if (v873) {
          unint64_t v873 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v873);
        }
        else {
          uint64_t v874 = 0;
        }
        *(void *)&long long v2695 = v873;
        *((void *)&v2695 + 1) = v873 + 8 * (v872 - v869);
        *(void *)&long long v2696 = *((void *)&v2695 + 1);
        *((void *)&v2696 + 1) = v873 + 8 * v874;
        v940 = v2616;
        do
        {
          *(void *)&long long v2667 = operator new(0x1000uLL);
          std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(&v2695, &v2667);
          --v870;
        }
        while (v870);
        unint64_t v2623 = v869 << 8;
        v941 = (char *)v2696;
        if (v869)
        {
          v942 = (void *)v2616[9].i64[1];
          unint64_t v2653 = v846;
          do
          {
            if (v941 == *((char **)&v2696 + 1))
            {
              v943 = (char *)*((void *)&v2695 + 1);
              v944 = (void *)v2695;
              if (*((void *)&v2695 + 1) <= (unint64_t)v2695)
              {
                if (v941 == (char *)v2695) {
                  unint64_t v951 = 1;
                }
                else {
                  unint64_t v951 = (uint64_t)&v941[-v2695] >> 2;
                }
                v952 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v951);
                uint64_t v954 = v941 - v943;
                BOOL v417 = v941 == v943;
                v941 = &v952[8 * (v951 >> 2)];
                if (!v417)
                {
                  v941 = &v952[8 * (v951 >> 2) + (v954 & 0xFFFFFFFFFFFFFFF8)];
                  uint64_t v955 = 8 * (v954 >> 3);
                  v956 = &v952[8 * (v951 >> 2)];
                  do
                  {
                    uint64_t v957 = *(void *)v943;
                    v943 += 8;
                    *(void *)v956 = v957;
                    v956 += 8;
                    v955 -= 8;
                  }
                  while (v955);
                }
                *(void *)&long long v2695 = v952;
                *((void *)&v2695 + 1) = &v952[8 * (v951 >> 2)];
                *(void *)&long long v2696 = v941;
                *((void *)&v2696 + 1) = &v952[8 * v953];
                if (v944) {
                  operator delete(v944);
                }
                v940 = v2616;
              }
              else
              {
                unint64_t v945 = v849;
                uint64_t v946 = (uint64_t)(*((void *)&v2695 + 1) - v2695) >> 3;
                if (v946 >= -1) {
                  uint64_t v947 = v946 + 1;
                }
                else {
                  uint64_t v947 = v946 + 2;
                }
                uint64_t v948 = *((void *)&v2695 + 1) - 8 * (v947 >> 1);
                v949 = &v941[-*((void *)&v2695 + 1)];
                if (v941 != *((char **)&v2695 + 1))
                {
                  memmove((void *)(*((void *)&v2695 + 1) - 8 * (v947 >> 1)), *((const void **)&v2695 + 1), (size_t)&v941[-*((void *)&v2695 + 1)]);
                  v941 = v943;
                }
                v950 = &v941[-8 * (v947 >> 1)];
                v941 = &v949[v948];
                *((void *)&v2695 + 1) = v950;
                *(void *)&long long v2696 = &v949[v948];
                v940 = v2616;
                unint64_t v849 = v945;
                unint64_t v846 = v2653;
              }
            }
            *(void *)v941 = *v942;
            v941 = (char *)(v2696 + 8);
            *(void *)&long long v2696 = v2696 + 8;
            v942 = (void *)(v940[9].i64[1] + 8);
            v940[9].i64[1] = (uint64_t)v942;
            --v869;
          }
          while (v869);
        }
        uint64_t v958 = v940[10].i64[0];
        v959 = (char *)*((void *)&v2695 + 1);
        v960 = (char *)v2695;
        v961 = (char *)*((void *)&v2696 + 1);
        while (v958 != v2616[9].i64[1])
        {
          if (v959 == v960)
          {
            if (v941 >= v961)
            {
              if (v961 == v960) {
                unint64_t v966 = 1;
              }
              else {
                unint64_t v966 = (v961 - v960) >> 2;
              }
              v967 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v966);
              v969 = v967;
              v959 = &v967[(2 * v966 + 6) & 0xFFFFFFFFFFFFFFF8];
              uint64_t v970 = v941 - v960;
              BOOL v417 = v941 == v960;
              v941 = v959;
              if (!v417)
              {
                v941 = &v959[v970 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v971 = 8 * (v970 >> 3);
                v972 = v959;
                v973 = v960;
                do
                {
                  uint64_t v974 = *(void *)v973;
                  v973 += 8;
                  *(void *)v972 = v974;
                  v972 += 8;
                  v971 -= 8;
                }
                while (v971);
              }
              v961 = &v967[8 * v968];
              if (v960) {
                operator delete(v960);
              }
              v960 = v969;
            }
            else
            {
              uint64_t v962 = (v961 - v941) >> 3;
              if (v962 >= -1) {
                unint64_t v963 = v962 + 1;
              }
              else {
                unint64_t v963 = v962 + 2;
              }
              v964 = &v941[8 * (v963 >> 1)];
              v959 = &v964[-(v941 - v960)];
              size_t v965 = v941 - v960;
              BOOL v417 = v941 == v960;
              v941 = v964;
              if (!v417) {
                memmove(v959, v960, v965);
              }
            }
          }
          uint64_t v975 = *(void *)(v958 - 8);
          v958 -= 8;
          *((void *)v959 - 1) = v975;
          v959 -= 8;
        }
        *(void *)&long long v2695 = v960;
        *((void *)&v2695 + 1) = v959;
        *(void *)&long long v2696 = v941;
        *((void *)&v2696 + 1) = v961;
        long long v978 = v2695;
        int64x2_t v977 = (int64x2_t)v2696;
        *(void *)&long long v2695 = v2616[9].i64[0];
        v976 = (void *)v2695;
        *((void *)&v2695 + 1) = v958;
        v2616[9] = (int64x2_t)v978;
        v2616[10] = v977;
        v2616[11].i64[0] -= v2623;
        if (v976)
        {
          operator delete(v976);
          v838 = (char *)v2616[10].i64[0];
        }
        else
        {
          v838 = (char *)v977.i64[0];
        }
      }
    }
    v876 = (uint64_t *)v2616;
LABEL_1320:
    uint64_t v835 = v876[23];
    v839 = (char *)v876[19];
    unint64_t v836 = v876[22] + v835;
    unint64_t v837 = v836 >> 8;
    unint64_t v849 = v2640;
    goto LABEL_1321;
  }
  unint64_t v851 = v846 - v834;
  if (v846 > v834)
  {
    uint64_t v852 = 32 * v842 - 1;
    uint64_t v853 = v838 - v839;
    if (v838 == v839)
    {
      uint64_t v852 = 0;
      ++v851;
    }
    if ((_BYTE)v851) {
      unint64_t v854 = (v851 >> 8) + 1;
    }
    else {
      unint64_t v854 = v851 >> 8;
    }
    unint64_t v855 = v852 - v836;
    if (v854 >= v855 >> 8) {
      unint64_t v856 = v855 >> 8;
    }
    else {
      unint64_t v856 = v854;
    }
    if (v854 <= v855 >> 8)
    {
      for (v2616[11].i64[0] = v834 + (v856 << 8); v856; --v856)
      {
        uint64_t v875 = v2616[10].i64[0];
        *(void *)&long long v2695 = *(void *)(v875 - 8);
        v2616[10].i64[0] = v875 - 8;
        std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v850, &v2695);
      }
      goto LABEL_1241;
    }
    unint64_t v857 = v854 - v856;
    uint64_t v858 = v2616[9].i64[0];
    uint64_t v859 = v2616[10].i64[1] - v858;
    if (v854 - v856 > (v859 >> 3) - (v853 >> 3))
    {
      BOOL v860 = v838 == v839;
      if (v859 >> 2 <= v857 + (v853 >> 3)) {
        unint64_t v861 = v857 + (v853 >> 3);
      }
      else {
        unint64_t v861 = v859 >> 2;
      }
      v2697 = &v2616[10].i8[8];
      if (v861) {
        unint64_t v861 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v861);
      }
      else {
        uint64_t v862 = 0;
      }
      unint64_t v903 = (v854 << 8) - v860;
      *(void *)&long long v2695 = v861;
      *((void *)&v2695 + 1) = v861;
      *(void *)&long long v2696 = v861;
      *((void *)&v2696 + 1) = v861 + 8 * v862;
      v904 = (uint64_t *)v2616;
      do
      {
        *(void *)&long long v2667 = operator new(0x1000uLL);
        std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(&v2695, &v2667);
        --v857;
      }
      while (v857);
      unint64_t v2622 = v903;
      uint64_t v905 = v2616[10].i64[0];
      v906 = (char *)v2696;
      if (v856)
      {
        unint64_t v2652 = v846;
        do
        {
          if (v906 == *((char **)&v2696 + 1))
          {
            v907 = (char *)*((void *)&v2695 + 1);
            v908 = (void *)v2695;
            if (*((void *)&v2695 + 1) <= (unint64_t)v2695)
            {
              if (v906 == (char *)v2695) {
                unint64_t v915 = 1;
              }
              else {
                unint64_t v915 = (uint64_t)&v906[-v2695] >> 2;
              }
              v916 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v915);
              uint64_t v918 = v906 - v907;
              BOOL v417 = v906 == v907;
              v906 = &v916[8 * (v915 >> 2)];
              if (!v417)
              {
                v906 = &v916[8 * (v915 >> 2) + (v918 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v919 = 8 * (v918 >> 3);
                v920 = &v916[8 * (v915 >> 2)];
                do
                {
                  uint64_t v921 = *(void *)v907;
                  v907 += 8;
                  *(void *)v920 = v921;
                  v920 += 8;
                  v919 -= 8;
                }
                while (v919);
              }
              *(void *)&long long v2695 = v916;
              *((void *)&v2695 + 1) = &v916[8 * (v915 >> 2)];
              *(void *)&long long v2696 = v906;
              *((void *)&v2696 + 1) = &v916[8 * v917];
              if (v908) {
                operator delete(v908);
              }
              v904 = (uint64_t *)v2616;
            }
            else
            {
              unint64_t v909 = v849;
              uint64_t v910 = (uint64_t)(*((void *)&v2695 + 1) - v2695) >> 3;
              if (v910 >= -1) {
                uint64_t v911 = v910 + 1;
              }
              else {
                uint64_t v911 = v910 + 2;
              }
              uint64_t v912 = *((void *)&v2695 + 1) - 8 * (v911 >> 1);
              v913 = &v906[-*((void *)&v2695 + 1)];
              if (v906 != *((char **)&v2695 + 1))
              {
                memmove((void *)(*((void *)&v2695 + 1) - 8 * (v911 >> 1)), *((const void **)&v2695 + 1), (size_t)&v906[-*((void *)&v2695 + 1)]);
                v906 = v907;
              }
              v914 = &v906[-8 * (v911 >> 1)];
              v906 = &v913[v912];
              *((void *)&v2695 + 1) = v914;
              *(void *)&long long v2696 = &v913[v912];
              v904 = (uint64_t *)v2616;
              unint64_t v849 = v909;
              unint64_t v846 = v2652;
            }
          }
          *(void *)v906 = *(void *)(v905 - 8);
          v906 = (char *)(v2696 + 8);
          *(void *)&long long v2696 = v2696 + 8;
          uint64_t v905 = v904[20] - 8;
          v904[20] = v905;
          --v856;
        }
        while (v856);
      }
      v922 = (uint64_t *)v904[19];
      if (v922 == (uint64_t *)v905)
      {
        v922 = (uint64_t *)v905;
      }
      else
      {
        do
        {
          if (v906 == *((char **)&v2696 + 1))
          {
            v923 = (char *)*((void *)&v2695 + 1);
            v924 = (void *)v2695;
            if (*((void *)&v2695 + 1) <= (unint64_t)v2695)
            {
              if (v906 == (char *)v2695) {
                unint64_t v932 = 1;
              }
              else {
                unint64_t v932 = (uint64_t)&v906[-v2695] >> 2;
              }
              v933 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v932);
              uint64_t v935 = v906 - v923;
              BOOL v417 = v906 == v923;
              v906 = &v933[8 * (v932 >> 2)];
              if (!v417)
              {
                v906 = &v933[8 * (v932 >> 2) + (v935 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v936 = 8 * (v935 >> 3);
                v937 = &v933[8 * (v932 >> 2)];
                do
                {
                  uint64_t v938 = *(void *)v923;
                  v923 += 8;
                  *(void *)v937 = v938;
                  v937 += 8;
                  v936 -= 8;
                }
                while (v936);
              }
              *(void *)&long long v2695 = v933;
              *((void *)&v2695 + 1) = &v933[8 * (v932 >> 2)];
              *(void *)&long long v2696 = v906;
              *((void *)&v2696 + 1) = &v933[8 * v934];
              if (v924) {
                operator delete(v924);
              }
              v904 = (uint64_t *)v2616;
            }
            else
            {
              unint64_t v925 = v846;
              unint64_t v926 = v849;
              uint64_t v927 = (uint64_t)(*((void *)&v2695 + 1) - v2695) >> 3;
              if (v927 >= -1) {
                uint64_t v928 = v927 + 1;
              }
              else {
                uint64_t v928 = v927 + 2;
              }
              uint64_t v929 = *((void *)&v2695 + 1) - 8 * (v928 >> 1);
              v930 = &v906[-*((void *)&v2695 + 1)];
              if (v906 != *((char **)&v2695 + 1))
              {
                memmove((void *)(*((void *)&v2695 + 1) - 8 * (v928 >> 1)), *((const void **)&v2695 + 1), (size_t)&v906[-*((void *)&v2695 + 1)]);
                v906 = v923;
              }
              v931 = &v906[-8 * (v928 >> 1)];
              v906 = &v930[v929];
              *((void *)&v2695 + 1) = v931;
              *(void *)&long long v2696 = &v930[v929];
              v904 = (uint64_t *)v2616;
              unint64_t v849 = v926;
              unint64_t v846 = v925;
            }
          }
          uint64_t v939 = *v922++;
          *(void *)v906 = v939;
          v906 = (char *)(v2696 + 8);
          *(void *)&long long v2696 = v2696 + 8;
        }
        while (v922 != (uint64_t *)v904[20]);
        uint64_t v905 = v904[19];
      }
      v979 = (void *)v904[18];
      *((_OWORD *)v904 + 9) = v2695;
      *(void *)&long long v2695 = v979;
      *((void *)&v2695 + 1) = v905;
      *(void *)&long long v2696 = v922;
      uint64_t v980 = *((void *)&v2696 + 1);
      v904[20] = (uint64_t)v906;
      v904[21] = v980;
      v904[22] += v2622;
      if (v979) {
        operator delete(v979);
      }
LABEL_1241:
      unint64_t v834 = v2616[11].u64[0];
      v839 = (char *)v2616[9].i64[1];
      v838 = (char *)v2616[10].i64[0];
      unint64_t v841 = v834 >> 8;
      goto LABEL_1242;
    }
    if (v857)
    {
      if (v839 == (char *)v858)
      {
LABEL_1140:
        unint64_t v900 = v857;
        do
        {
          *(void *)&long long v2695 = operator new(0x1000uLL);
          std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(v850, &v2695);
          --v900;
        }
        while (v900);
        v856 += v857;
        v901 = v2616;
        unint64_t v834 = v2616[11].u64[0];
LABEL_1148:
        for (v901[11].i64[0] = v834 + (v856 << 8); v856; --v856)
        {
          uint64_t v902 = v2616[10].i64[0];
          *(void *)&long long v2695 = *(void *)(v902 - 8);
          v2616[10].i64[0] = v902 - 8;
          std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v850, &v2695);
        }
        goto LABEL_1241;
      }
      while (1)
      {
        *(void *)&long long v2695 = operator new(0x1000uLL);
        std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v850, &v2695);
        uint64_t v898 = v2616[9].i64[1];
        uint64_t v899 = v2616[10].i64[0] - v898 == 8 ? 255 : 256;
        unint64_t v834 = v899 + v2616[11].i64[0];
        v2616[11].i64[0] = v834;
        if (!--v857) {
          break;
        }
        if (v898 == v850->i64[0]) {
          goto LABEL_1140;
        }
      }
    }
    v901 = v2616;
    goto LABEL_1148;
  }
LABEL_1242:
  v981 = &v839[8 * v841];
  if (v838 == v839) {
    v982 = 0;
  }
  else {
    v982 = (long long *)(*(void *)v981 + 16 * v834);
  }
  if (v846 <= v849)
  {
    v986 = v982;
    v985 = &v839[8 * v841];
    if (!v846) {
      goto LABEL_1368;
    }
    goto LABEL_1260;
  }
  v983 = &v844[16 * (v846 - v849)];
  if (v849 < v846 >> 1) {
    v983 = &v845[-16 * v849];
  }
  if (v983 == v844)
  {
    v986 = v982;
    v985 = &v839[8 * v841];
  }
  else
  {
    v984 = v983;
    v985 = &v839[8 * v841];
    v986 = v982;
    do
    {
      if (v986 == *(long long **)v985)
      {
        uint64_t v987 = *((void *)v985 - 1);
        v985 -= 8;
        v986 = (long long *)(v987 + 4096);
      }
      uint64_t v988 = *((void *)v984 - 2);
      v984 -= 16;
      *((void *)v986-- - 2) = v988;
      uint64_t v989 = *((void *)v984 + 1);
      *((void *)v986 + 1) = v989;
      if (v989)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v989 + 8), 1uLL, memory_order_relaxed);
        unint64_t v834 = v2616[11].u64[0];
      }
      --v834;
      uint64_t v990 = v2616[11].i64[1] + 1;
      v2616[11].i64[0] = v834;
      v2616[11].i64[1] = v990;
    }
    while (v984 != v844);
    v844 = v983;
  }
  unint64_t v846 = v849;
  if (v849)
  {
LABEL_1260:
    v991 = (long long **)std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator+[abi:ne180100](v981, (uint64_t)v982, v846);
    v993 = v991;
    v994 = v992;
    if (v982 != v992)
    {
      v995 = v991;
      v996 = v992;
      do
      {
        if (v986 == *(long long **)v985)
        {
          uint64_t v997 = *((void *)v985 - 1);
          v985 -= 8;
          v986 = (long long *)(v997 + 4096);
        }
        if (v996 == *v995)
        {
          uint64_t v998 = (uint64_t)*--v995;
          v996 = (long long *)(v998 + 4096);
        }
        long long v999 = *--v996;
        *--v986 = v999;
        *(void *)v996 = 0;
        *((void *)v996 + 1) = 0;
        v2616[11] = vaddq_s64(v2616[11], (int64x2_t)xmmword_1901C6000);
      }
      while (v996 != v982);
    }
    if (v846 < v849)
    {
      v1000 = (long long **)std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator+[abi:ne180100](v981, (uint64_t)v982, v849);
      v1002 = v1001;
      if (v993 == v1000)
      {
        v1011 = v994;
        v1012 = v1002;
        v1008 = v981;
        uint64_t v1009 = (uint64_t)v982;
      }
      else
      {
        v1003 = v1000;
        v1005 = *v993;
        v1004 = v993 + 1;
        v1006 = v1005 + 256;
        v1007 = v994;
        v1008 = v981;
        uint64_t v1009 = (uint64_t)v982;
        while (1)
        {
          std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>(&v2695, v1007, v1006, v1008, v1009);
          v1008 = (char *)*((void *)&v2695 + 1);
          uint64_t v1009 = v2696;
          if (v1004 == v1003) {
            break;
          }
          v1010 = *v1004++;
          v1007 = v1010;
          v1006 = v1010 + 256;
        }
        v1011 = *v1003;
        v1012 = v1002;
      }
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>(&v2695, v1011, v1012, v1008, v1009);
      v982 = (long long *)v2696;
      v981 = (char *)*((void *)&v2695 + 1);
    }
    if (v844 != v845)
    {
      v1013 = *(char **)v981;
      while (1)
      {
        uint64_t v1014 = v1013 - (char *)v982 + 4096;
        if ((v845 - v844) >> 4 >= v1014 >> 4) {
          uint64_t v1015 = v1014 >> 4;
        }
        else {
          uint64_t v1015 = (v845 - v844) >> 4;
        }
        if (v1015)
        {
          v1016 = &v844[16 * v1015];
          do
          {
            uint64_t v1018 = *(void *)v844;
            uint64_t v1017 = *((void *)v844 + 1);
            if (v1017) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v1017 + 8), 1uLL, memory_order_relaxed);
            }
            v1019 = (std::__shared_weak_count *)*((void *)v982 + 1);
            *(void *)v982 = v1018;
            *((void *)v982 + 1) = v1017;
            if (v1019) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v1019);
            }
            v844 += 16;
            ++v982;
          }
          while (v844 != v1016);
          v844 = v1016;
        }
        if (v844 == v845) {
          break;
        }
        v1020 = (char *)*((void *)v981 + 1);
        v981 += 8;
        v1013 = v1020;
        v982 = (long long *)v1020;
      }
    }
  }
LABEL_1368:
  atomic_fetch_add(v2616[12].i64, (v2687 - v2686) >> 4);
  unint64_t v1085 = v2616[15].u64[0];
  uint64_t v1086 = v2616[15].i64[1];
  unint64_t v1087 = v1085 + v1086;
  unint64_t v1088 = (v1085 + v1086) >> 8;
  v1090 = (char *)v2616[13].i64[1];
  v1089 = (char *)v2616[14].i64[0];
  v1091 = &v1090[8 * v1088];
  int64_t v1092 = v1089 - v1090;
  if (v1089 == v1090)
  {
    uint64_t v1093 = 0;
    uint64_t v1099 = 0;
    v1094 = v2683;
    v1095 = v2684;
    unint64_t v1096 = (v2684 - v2683) >> 4;
    unint64_t v1097 = v1085 >> 8;
    v1098 = &v1090[8 * (v1085 >> 8)];
  }
  else
  {
    uint64_t v1093 = *(void *)v1091 + 16 * v1087;
    v1094 = v2683;
    v1095 = v2684;
    unint64_t v1096 = (v2684 - v2683) >> 4;
    unint64_t v1097 = v1085 >> 8;
    v1098 = &v1090[8 * (v1085 >> 8)];
    uint64_t v1099 = *(void *)v1098 + 16 * v1085;
  }
  if (v1093 == v1099) {
    unint64_t v1100 = 0;
  }
  else {
    unint64_t v1100 = ((v1093 - *(void *)v1091) >> 4) + 32 * (v1091 - v1098) - ((v1099 - *(void *)v1098) >> 4);
  }
  v1101 = v2616 + 13;
  if (v1100 >= v1086 - v1100)
  {
    uint64_t v1114 = 32 * v1092 - 1;
    uint64_t v1115 = v1089 - v1090;
    if (v1089 == v1090) {
      uint64_t v1114 = 0;
    }
    unint64_t v1116 = v1114 - v1087;
    BOOL v363 = v1096 >= v1116;
    unint64_t v1117 = v1096 - v1116;
    if (v1117 == 0 || !v363)
    {
LABEL_1623:
      v1297 = &v1090[8 * v1088];
      if (v1089 == v1090) {
        uint64_t v1298 = 0;
      }
      else {
        uint64_t v1298 = *(void *)v1297 + 16 * v1087;
      }
      unint64_t v1299 = v1086 - v1100;
      if (v1299 >= v1096)
      {
        v1303 = (void *)v1298;
        v1302 = &v1090[8 * v1088];
        if (!v1096) {
          goto LABEL_1670;
        }
      }
      else
      {
        v1300 = &v1095[16 * (v1299 - v1096)];
        if (v1299 < v1096 >> 1) {
          v1300 = &v1094[16 * v1299];
        }
        if (v1300 == v1095)
        {
          v1303 = (void *)v1298;
          v1302 = &v1090[8 * v1088];
        }
        else
        {
          v1301 = v1300;
          v1302 = v1297;
          v1303 = (void *)v1298;
          do
          {
            void *v1303 = *(void *)v1301;
            uint64_t v1304 = *((void *)v1301 + 1);
            v1303[1] = v1304;
            if (v1304) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v1304 + 8), 1uLL, memory_order_relaxed);
            }
            v1303 += 2;
            if ((void *)((char *)v1303 - *(void *)v1302) == (void *)4096)
            {
              v1305 = (void *)*((void *)v1302 + 1);
              v1302 += 8;
              v1303 = v1305;
            }
            ++v2616[15].i64[1];
            v1301 += 16;
          }
          while (v1301 != v1095);
          v1095 = v1300;
        }
        unint64_t v1096 = v1299;
        if (!v1299) {
          goto LABEL_1670;
        }
      }
      v1306 = std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator-[abi:ne180100](v1297, v1298, v1096);
      v1308 = v1306;
      uint64_t v1309 = v1307;
      if (v1298 != v1307)
      {
        v1310 = v1306;
        uint64_t v1311 = v1307;
        do
        {
          *(_OWORD *)v1303 = *(_OWORD *)v1311;
          v1303 += 2;
          *(void *)uint64_t v1311 = 0;
          *(void *)(v1311 + 8) = 0;
          if ((void *)((char *)v1303 - *(void *)v1302) == (void *)4096)
          {
            v1312 = (void *)*((void *)v1302 + 1);
            v1302 += 8;
            v1303 = v1312;
          }
          v1311 += 16;
          if (v1311 - *v1310 == 4096)
          {
            uint64_t v1313 = v1310[1];
            ++v1310;
            uint64_t v1311 = v1313;
          }
          ++v2616[15].i64[1];
        }
        while (v1311 != v1298);
      }
      if (v1096 < v1299)
      {
        v1314 = std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator-[abi:ne180100](v1297, v1298, v1299);
        uint64_t v1316 = v1315;
        if (v1314 == v1308)
        {
          uint64_t v1325 = v1309;
          v1322 = v1297;
          uint64_t v1323 = v1298;
        }
        else
        {
          v1317 = v1314;
          uint64_t v1320 = *v1308;
          v1319 = v1308 - 1;
          uint64_t v1318 = v1320;
          uint64_t v1321 = v1309;
          v1322 = v1297;
          uint64_t v1323 = v1298;
          while (1)
          {
            std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>(&v2695, v1318, v1321, v1322, v1323);
            v1322 = (char *)*((void *)&v2695 + 1);
            uint64_t v1323 = v2696;
            if (v1319 == v1317) {
              break;
            }
            uint64_t v1324 = *v1319--;
            uint64_t v1318 = v1324;
            uint64_t v1321 = v1324 + 4096;
          }
          uint64_t v1325 = *v1317 + 4096;
          uint64_t v1315 = v1316;
        }
        std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>(&v2695, v1315, v1325, v1322, v1323);
        uint64_t v1298 = v2696;
        v1297 = (char *)*((void *)&v2695 + 1);
      }
      if (v1094 != v1095)
      {
        uint64_t v1326 = *(void *)v1297;
        while (1)
        {
          uint64_t v1327 = v1298 - v1326;
          if ((v1095 - v1094) >> 4 >= v1327 >> 4) {
            uint64_t v1328 = v1327 >> 4;
          }
          else {
            uint64_t v1328 = (v1095 - v1094) >> 4;
          }
          if (v1328)
          {
            v1329 = (std::__shared_weak_count **)(v1095 - 8);
            uint64_t v1330 = -16 * v1328;
            v1331 = (std::__shared_weak_count **)(v1298 - 8);
            do
            {
              v1333 = *(v1329 - 1);
              v1332 = *v1329;
              if (*v1329) {
                atomic_fetch_add_explicit(&v1332->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              v1334 = *v1331;
              *(v1331 - 1) = v1333;
              *v1331 = v1332;
              if (v1334) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v1334);
              }
              v1329 -= 2;
              v1331 -= 2;
              v1330 += 16;
            }
            while (v1330);
          }
          v1095 -= 16 * v1328;
          if (v1095 == v1094) {
            break;
          }
          uint64_t v1335 = *((void *)v1297 - 1);
          v1297 -= 8;
          uint64_t v1326 = v1335;
          uint64_t v1298 = v1335 + 4096;
        }
      }
      goto LABEL_1670;
    }
    if (v1089 == v1090) {
      unint64_t v1118 = v1117 + 1;
    }
    else {
      unint64_t v1118 = v1117;
    }
    if ((_BYTE)v1118) {
      unint64_t v1119 = (v1118 >> 8) + 1;
    }
    else {
      unint64_t v1119 = v1118 >> 8;
    }
    if (v1119 >= v1097) {
      unint64_t v1120 = v1097;
    }
    else {
      unint64_t v1120 = v1119;
    }
    unint64_t v2641 = v1100;
    if (v1119 <= v1097)
    {
      v2616[15].i64[0] = v1085 - (v1120 << 8);
      if (v1120)
      {
        v1127 = (uint64_t *)v2616;
        do
        {
          v1128 = (void *)v1127[27];
          uint64_t v1131 = *v1128;
          v1129 = (char *)(v1128 + 1);
          uint64_t v1130 = v1131;
          v1127[27] = (uint64_t)v1129;
          if (v1089 == (char *)v1127[29])
          {
            uint64_t v1132 = (uint64_t)&v1129[-v1101->i64[0]];
            if ((unint64_t)v1129 <= v1101->i64[0])
            {
              if (v1089 == (char *)v1101->i64[0]) {
                unint64_t v1139 = 1;
              }
              else {
                unint64_t v1139 = (uint64_t)&v1089[-v1101->i64[0]] >> 2;
              }
              v1140 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1139);
              v1142 = &v1140[8 * (v1139 >> 2)];
              v1143 = (uint64_t *)v2616[13].i64[1];
              v1089 = v1142;
              uint64_t v1144 = v2616[14].i64[0] - (void)v1143;
              if (v1144)
              {
                v1089 = &v1142[v1144 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v1145 = 8 * (v1144 >> 3);
                v1146 = &v1140[8 * (v1139 >> 2)];
                do
                {
                  uint64_t v1147 = *v1143++;
                  *(void *)v1146 = v1147;
                  v1146 += 8;
                  v1145 -= 8;
                }
                while (v1145);
              }
              v1127 = (uint64_t *)v2616;
              v1148 = (void *)v2616[13].i64[0];
              v2616[13].i64[0] = (uint64_t)v1140;
              v2616[13].i64[1] = (uint64_t)v1142;
              v2616[14].i64[0] = (uint64_t)v1089;
              v2616[14].i64[1] = (uint64_t)&v1140[8 * v1141];
              if (v1148)
              {
                operator delete(v1148);
                v1089 = (char *)v2616[14].i64[0];
              }
            }
            else
            {
              uint64_t v1133 = v1132 >> 3;
              BOOL v381 = v1132 >> 3 < -1;
              uint64_t v1134 = (v1132 >> 3) + 2;
              if (v381) {
                uint64_t v1135 = v1134;
              }
              else {
                uint64_t v1135 = v1133 + 1;
              }
              v1136 = &v1129[-8 * (v1135 >> 1)];
              int64_t v1137 = v1089 - v1129;
              v1127 = (uint64_t *)v2616;
              if (v1089 != v1129)
              {
                memmove(&v1129[-8 * (v1135 >> 1)], v1129, v1089 - v1129);
                v1089 = (char *)v2616[13].i64[1];
              }
              v1138 = &v1089[-8 * (v1135 >> 1)];
              v1089 = &v1136[v1137];
              v2616[13].i64[1] = (uint64_t)v1138;
              v2616[14].i64[0] = (uint64_t)&v1136[v1137];
            }
          }
          else
          {
            v1127 = (uint64_t *)v2616;
          }
          *(void *)v1089 = v1130;
          v1089 = (char *)(v1127[28] + 8);
          v1127[28] = (uint64_t)v1089;
          --v1120;
        }
        while (v1120);
        goto LABEL_1622;
      }
    }
    else
    {
      unint64_t v1121 = v1119 - v1120;
      uint64_t v1122 = v2616[14].i64[1] - v2616[13].i64[0];
      if (v1121 <= (v1122 >> 3) - (v1115 >> 3))
      {
        if (v1121)
        {
          while (v2616[14].i64[1] != v2616[14].i64[0])
          {
            *(void *)&long long v2695 = operator new(0x1000uLL);
            std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(v1101, &v2695);
            if (!--v1121)
            {
              v1089 = (char *)v2616[14].i64[0];
              goto LABEL_1599;
            }
          }
          for (uint64_t i3 = 0; i3 != v1121; ++i3)
          {
            *(void *)&long long v2695 = operator new(0x1000uLL);
            std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v1101, &v2695);
            v1089 = (char *)v2616[14].i64[0];
            if (&v1089[-v2616[13].i64[1]] == (char *)8) {
              uint64_t v1273 = 255;
            }
            else {
              uint64_t v1273 = 256;
            }
            uint64_t v1274 = v1273 + v2616[15].i64[0];
            v2616[15].i64[0] = v1274;
          }
          v1120 += v1121;
          v1275 = v2616;
        }
        else
        {
LABEL_1599:
          v1275 = v2616;
          uint64_t v1274 = v2616[15].i64[0];
        }
        v1275[15].i64[0] = v1274 - (v1120 << 8);
        if (v1120)
        {
          v1127 = (uint64_t *)v2616;
          do
          {
            v1276 = (void *)v1127[27];
            uint64_t v1279 = *v1276;
            v1277 = (char *)(v1276 + 1);
            uint64_t v1278 = v1279;
            v1127[27] = (uint64_t)v1277;
            if (v1089 == (char *)v1127[29])
            {
              uint64_t v1280 = (uint64_t)&v1277[-v1101->i64[0]];
              if ((unint64_t)v1277 <= v1101->i64[0])
              {
                if (v1089 == (char *)v1101->i64[0]) {
                  unint64_t v1287 = 1;
                }
                else {
                  unint64_t v1287 = (uint64_t)&v1089[-v1101->i64[0]] >> 2;
                }
                v1288 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1287);
                v1290 = &v1288[8 * (v1287 >> 2)];
                v1291 = (uint64_t *)v2616[13].i64[1];
                v1089 = v1290;
                uint64_t v1292 = v2616[14].i64[0] - (void)v1291;
                if (v1292)
                {
                  v1089 = &v1290[v1292 & 0xFFFFFFFFFFFFFFF8];
                  uint64_t v1293 = 8 * (v1292 >> 3);
                  v1294 = &v1288[8 * (v1287 >> 2)];
                  do
                  {
                    uint64_t v1295 = *v1291++;
                    *(void *)v1294 = v1295;
                    v1294 += 8;
                    v1293 -= 8;
                  }
                  while (v1293);
                }
                v1127 = (uint64_t *)v2616;
                v1296 = (void *)v2616[13].i64[0];
                v2616[13].i64[0] = (uint64_t)v1288;
                v2616[13].i64[1] = (uint64_t)v1290;
                v2616[14].i64[0] = (uint64_t)v1089;
                v2616[14].i64[1] = (uint64_t)&v1288[8 * v1289];
                if (v1296)
                {
                  operator delete(v1296);
                  v1089 = (char *)v2616[14].i64[0];
                }
              }
              else
              {
                uint64_t v1281 = v1280 >> 3;
                BOOL v381 = v1280 >> 3 < -1;
                uint64_t v1282 = (v1280 >> 3) + 2;
                if (v381) {
                  uint64_t v1283 = v1282;
                }
                else {
                  uint64_t v1283 = v1281 + 1;
                }
                v1284 = &v1277[-8 * (v1283 >> 1)];
                int64_t v1285 = v1089 - v1277;
                v1127 = (uint64_t *)v2616;
                if (v1089 != v1277)
                {
                  memmove(&v1277[-8 * (v1283 >> 1)], v1277, v1089 - v1277);
                  v1089 = (char *)v2616[13].i64[1];
                }
                v1286 = &v1089[-8 * (v1283 >> 1)];
                v1089 = &v1284[v1285];
                v2616[13].i64[1] = (uint64_t)v1286;
                v2616[14].i64[0] = (uint64_t)&v1284[v1285];
              }
            }
            else
            {
              v1127 = (uint64_t *)v2616;
            }
            *(void *)v1089 = v1278;
            v1089 = (char *)(v1127[28] + 8);
            v1127[28] = (uint64_t)v1089;
            --v1120;
          }
          while (v1120);
          goto LABEL_1622;
        }
      }
      else
      {
        uint64_t v1123 = v1115 >> 3;
        if (v1122 >> 2 <= v1121 + (v1115 >> 3)) {
          unint64_t v1124 = v1121 + (v1115 >> 3);
        }
        else {
          unint64_t v1124 = v1122 >> 2;
        }
        v2697 = &v2616[14].i8[8];
        if (v1124) {
          unint64_t v1124 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1124);
        }
        else {
          uint64_t v1125 = 0;
        }
        *(void *)&long long v2695 = v1124;
        *((void *)&v2695 + 1) = v1124 + 8 * (v1123 - v1120);
        *(void *)&long long v2696 = *((void *)&v2695 + 1);
        *((void *)&v2696 + 1) = v1124 + 8 * v1125;
        v1191 = v2616;
        do
        {
          *(void *)&long long v2667 = operator new(0x1000uLL);
          std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(&v2695, &v2667);
          --v1121;
        }
        while (v1121);
        unint64_t v2625 = v1120 << 8;
        v1192 = (char *)v2696;
        if (v1120)
        {
          v1193 = (void *)v2616[13].i64[1];
          unint64_t v2655 = v1096;
          do
          {
            if (v1192 == *((char **)&v2696 + 1))
            {
              v1194 = (char *)*((void *)&v2695 + 1);
              v1195 = (void *)v2695;
              if (*((void *)&v2695 + 1) <= (unint64_t)v2695)
              {
                if (v1192 == (char *)v2695) {
                  unint64_t v1202 = 1;
                }
                else {
                  unint64_t v1202 = (uint64_t)&v1192[-v2695] >> 2;
                }
                v1203 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1202);
                uint64_t v1205 = v1192 - v1194;
                BOOL v417 = v1192 == v1194;
                v1192 = &v1203[8 * (v1202 >> 2)];
                if (!v417)
                {
                  v1192 = &v1203[8 * (v1202 >> 2) + (v1205 & 0xFFFFFFFFFFFFFFF8)];
                  uint64_t v1206 = 8 * (v1205 >> 3);
                  v1207 = &v1203[8 * (v1202 >> 2)];
                  do
                  {
                    uint64_t v1208 = *(void *)v1194;
                    v1194 += 8;
                    *(void *)v1207 = v1208;
                    v1207 += 8;
                    v1206 -= 8;
                  }
                  while (v1206);
                }
                *(void *)&long long v2695 = v1203;
                *((void *)&v2695 + 1) = &v1203[8 * (v1202 >> 2)];
                *(void *)&long long v2696 = v1192;
                *((void *)&v2696 + 1) = &v1203[8 * v1204];
                if (v1195) {
                  operator delete(v1195);
                }
                v1191 = v2616;
              }
              else
              {
                unint64_t v1196 = v1100;
                uint64_t v1197 = (uint64_t)(*((void *)&v2695 + 1) - v2695) >> 3;
                if (v1197 >= -1) {
                  uint64_t v1198 = v1197 + 1;
                }
                else {
                  uint64_t v1198 = v1197 + 2;
                }
                uint64_t v1199 = *((void *)&v2695 + 1) - 8 * (v1198 >> 1);
                v1200 = &v1192[-*((void *)&v2695 + 1)];
                if (v1192 != *((char **)&v2695 + 1))
                {
                  memmove((void *)(*((void *)&v2695 + 1) - 8 * (v1198 >> 1)), *((const void **)&v2695 + 1), (size_t)&v1192[-*((void *)&v2695 + 1)]);
                  v1192 = v1194;
                }
                v1201 = &v1192[-8 * (v1198 >> 1)];
                v1192 = &v1200[v1199];
                *((void *)&v2695 + 1) = v1201;
                *(void *)&long long v2696 = &v1200[v1199];
                v1191 = v2616;
                unint64_t v1100 = v1196;
                unint64_t v1096 = v2655;
              }
            }
            *(void *)v1192 = *v1193;
            v1192 = (char *)(v2696 + 8);
            *(void *)&long long v2696 = v2696 + 8;
            v1193 = (void *)(v1191[13].i64[1] + 8);
            v1191[13].i64[1] = (uint64_t)v1193;
            --v1120;
          }
          while (v1120);
        }
        uint64_t v1209 = v1191[14].i64[0];
        v1210 = (char *)*((void *)&v2695 + 1);
        v1211 = (char *)v2695;
        v1212 = (char *)*((void *)&v2696 + 1);
        while (v1209 != v2616[13].i64[1])
        {
          if (v1210 == v1211)
          {
            if (v1192 >= v1212)
            {
              if (v1212 == v1211) {
                unint64_t v1217 = 1;
              }
              else {
                unint64_t v1217 = (v1212 - v1211) >> 2;
              }
              v1218 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1217);
              v1220 = v1218;
              v1210 = &v1218[(2 * v1217 + 6) & 0xFFFFFFFFFFFFFFF8];
              uint64_t v1221 = v1192 - v1211;
              BOOL v417 = v1192 == v1211;
              v1192 = v1210;
              if (!v417)
              {
                v1192 = &v1210[v1221 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v1222 = 8 * (v1221 >> 3);
                v1223 = v1210;
                v1224 = v1211;
                do
                {
                  uint64_t v1225 = *(void *)v1224;
                  v1224 += 8;
                  *(void *)v1223 = v1225;
                  v1223 += 8;
                  v1222 -= 8;
                }
                while (v1222);
              }
              v1212 = &v1218[8 * v1219];
              if (v1211) {
                operator delete(v1211);
              }
              v1211 = v1220;
            }
            else
            {
              uint64_t v1213 = (v1212 - v1192) >> 3;
              if (v1213 >= -1) {
                unint64_t v1214 = v1213 + 1;
              }
              else {
                unint64_t v1214 = v1213 + 2;
              }
              v1215 = &v1192[8 * (v1214 >> 1)];
              v1210 = &v1215[-(v1192 - v1211)];
              size_t v1216 = v1192 - v1211;
              BOOL v417 = v1192 == v1211;
              v1192 = v1215;
              if (!v417) {
                memmove(v1210, v1211, v1216);
              }
            }
          }
          uint64_t v1226 = *(void *)(v1209 - 8);
          v1209 -= 8;
          *((void *)v1210 - 1) = v1226;
          v1210 -= 8;
        }
        *(void *)&long long v2695 = v1211;
        *((void *)&v2695 + 1) = v1210;
        *(void *)&long long v2696 = v1192;
        *((void *)&v2696 + 1) = v1212;
        long long v1229 = v2695;
        int64x2_t v1228 = (int64x2_t)v2696;
        *(void *)&long long v2695 = v2616[13].i64[0];
        v1227 = (void *)v2695;
        *((void *)&v2695 + 1) = v1209;
        v2616[13] = (int64x2_t)v1229;
        v2616[14] = v1228;
        v2616[15].i64[0] -= v2625;
        if (v1227)
        {
          operator delete(v1227);
          v1089 = (char *)v2616[14].i64[0];
        }
        else
        {
          v1089 = (char *)v1228.i64[0];
        }
      }
    }
    v1127 = (uint64_t *)v2616;
LABEL_1622:
    uint64_t v1086 = v1127[31];
    v1090 = (char *)v1127[27];
    unint64_t v1087 = v1127[30] + v1086;
    unint64_t v1088 = v1087 >> 8;
    unint64_t v1100 = v2641;
    goto LABEL_1623;
  }
  unint64_t v1102 = v1096 - v1085;
  if (v1096 > v1085)
  {
    uint64_t v1103 = 32 * v1092 - 1;
    uint64_t v1104 = v1089 - v1090;
    if (v1089 == v1090)
    {
      uint64_t v1103 = 0;
      ++v1102;
    }
    if ((_BYTE)v1102) {
      unint64_t v1105 = (v1102 >> 8) + 1;
    }
    else {
      unint64_t v1105 = v1102 >> 8;
    }
    unint64_t v1106 = v1103 - v1087;
    if (v1105 >= v1106 >> 8) {
      unint64_t v1107 = v1106 >> 8;
    }
    else {
      unint64_t v1107 = v1105;
    }
    if (v1105 <= v1106 >> 8)
    {
      for (v2616[15].i64[0] = v1085 + (v1107 << 8); v1107; --v1107)
      {
        uint64_t v1126 = v2616[14].i64[0];
        *(void *)&long long v2695 = *(void *)(v1126 - 8);
        v2616[14].i64[0] = v1126 - 8;
        std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v1101, &v2695);
      }
      goto LABEL_1543;
    }
    unint64_t v1108 = v1105 - v1107;
    uint64_t v1109 = v2616[13].i64[0];
    uint64_t v1110 = v2616[14].i64[1] - v1109;
    if (v1105 - v1107 > (v1110 >> 3) - (v1104 >> 3))
    {
      BOOL v1111 = v1089 == v1090;
      if (v1110 >> 2 <= v1108 + (v1104 >> 3)) {
        unint64_t v1112 = v1108 + (v1104 >> 3);
      }
      else {
        unint64_t v1112 = v1110 >> 2;
      }
      v2697 = &v2616[14].i8[8];
      if (v1112) {
        unint64_t v1112 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1112);
      }
      else {
        uint64_t v1113 = 0;
      }
      unint64_t v1154 = (v1105 << 8) - v1111;
      *(void *)&long long v2695 = v1112;
      *((void *)&v2695 + 1) = v1112;
      *(void *)&long long v2696 = v1112;
      *((void *)&v2696 + 1) = v1112 + 8 * v1113;
      v1155 = (uint64_t *)v2616;
      do
      {
        *(void *)&long long v2667 = operator new(0x1000uLL);
        std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(&v2695, &v2667);
        --v1108;
      }
      while (v1108);
      unint64_t v2624 = v1154;
      uint64_t v1156 = v2616[14].i64[0];
      v1157 = (char *)v2696;
      if (v1107)
      {
        unint64_t v2654 = v1096;
        do
        {
          if (v1157 == *((char **)&v2696 + 1))
          {
            v1158 = (char *)*((void *)&v2695 + 1);
            v1159 = (void *)v2695;
            if (*((void *)&v2695 + 1) <= (unint64_t)v2695)
            {
              if (v1157 == (char *)v2695) {
                unint64_t v1166 = 1;
              }
              else {
                unint64_t v1166 = (uint64_t)&v1157[-v2695] >> 2;
              }
              v1167 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1166);
              uint64_t v1169 = v1157 - v1158;
              BOOL v417 = v1157 == v1158;
              v1157 = &v1167[8 * (v1166 >> 2)];
              if (!v417)
              {
                v1157 = &v1167[8 * (v1166 >> 2) + (v1169 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v1170 = 8 * (v1169 >> 3);
                v1171 = &v1167[8 * (v1166 >> 2)];
                do
                {
                  uint64_t v1172 = *(void *)v1158;
                  v1158 += 8;
                  *(void *)v1171 = v1172;
                  v1171 += 8;
                  v1170 -= 8;
                }
                while (v1170);
              }
              *(void *)&long long v2695 = v1167;
              *((void *)&v2695 + 1) = &v1167[8 * (v1166 >> 2)];
              *(void *)&long long v2696 = v1157;
              *((void *)&v2696 + 1) = &v1167[8 * v1168];
              if (v1159) {
                operator delete(v1159);
              }
              v1155 = (uint64_t *)v2616;
            }
            else
            {
              unint64_t v1160 = v1100;
              uint64_t v1161 = (uint64_t)(*((void *)&v2695 + 1) - v2695) >> 3;
              if (v1161 >= -1) {
                uint64_t v1162 = v1161 + 1;
              }
              else {
                uint64_t v1162 = v1161 + 2;
              }
              uint64_t v1163 = *((void *)&v2695 + 1) - 8 * (v1162 >> 1);
              v1164 = &v1157[-*((void *)&v2695 + 1)];
              if (v1157 != *((char **)&v2695 + 1))
              {
                memmove((void *)(*((void *)&v2695 + 1) - 8 * (v1162 >> 1)), *((const void **)&v2695 + 1), (size_t)&v1157[-*((void *)&v2695 + 1)]);
                v1157 = v1158;
              }
              v1165 = &v1157[-8 * (v1162 >> 1)];
              v1157 = &v1164[v1163];
              *((void *)&v2695 + 1) = v1165;
              *(void *)&long long v2696 = &v1164[v1163];
              v1155 = (uint64_t *)v2616;
              unint64_t v1100 = v1160;
              unint64_t v1096 = v2654;
            }
          }
          *(void *)v1157 = *(void *)(v1156 - 8);
          v1157 = (char *)(v2696 + 8);
          *(void *)&long long v2696 = v2696 + 8;
          uint64_t v1156 = v1155[28] - 8;
          v1155[28] = v1156;
          --v1107;
        }
        while (v1107);
      }
      v1173 = (uint64_t *)v1155[27];
      if (v1173 == (uint64_t *)v1156)
      {
        v1173 = (uint64_t *)v1156;
      }
      else
      {
        do
        {
          if (v1157 == *((char **)&v2696 + 1))
          {
            v1174 = (char *)*((void *)&v2695 + 1);
            v1175 = (void *)v2695;
            if (*((void *)&v2695 + 1) <= (unint64_t)v2695)
            {
              if (v1157 == (char *)v2695) {
                unint64_t v1183 = 1;
              }
              else {
                unint64_t v1183 = (uint64_t)&v1157[-v2695] >> 2;
              }
              v1184 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1183);
              uint64_t v1186 = v1157 - v1174;
              BOOL v417 = v1157 == v1174;
              v1157 = &v1184[8 * (v1183 >> 2)];
              if (!v417)
              {
                v1157 = &v1184[8 * (v1183 >> 2) + (v1186 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v1187 = 8 * (v1186 >> 3);
                v1188 = &v1184[8 * (v1183 >> 2)];
                do
                {
                  uint64_t v1189 = *(void *)v1174;
                  v1174 += 8;
                  *(void *)v1188 = v1189;
                  v1188 += 8;
                  v1187 -= 8;
                }
                while (v1187);
              }
              *(void *)&long long v2695 = v1184;
              *((void *)&v2695 + 1) = &v1184[8 * (v1183 >> 2)];
              *(void *)&long long v2696 = v1157;
              *((void *)&v2696 + 1) = &v1184[8 * v1185];
              if (v1175) {
                operator delete(v1175);
              }
              v1155 = (uint64_t *)v2616;
            }
            else
            {
              unint64_t v1176 = v1096;
              unint64_t v1177 = v1100;
              uint64_t v1178 = (uint64_t)(*((void *)&v2695 + 1) - v2695) >> 3;
              if (v1178 >= -1) {
                uint64_t v1179 = v1178 + 1;
              }
              else {
                uint64_t v1179 = v1178 + 2;
              }
              uint64_t v1180 = *((void *)&v2695 + 1) - 8 * (v1179 >> 1);
              v1181 = &v1157[-*((void *)&v2695 + 1)];
              if (v1157 != *((char **)&v2695 + 1))
              {
                memmove((void *)(*((void *)&v2695 + 1) - 8 * (v1179 >> 1)), *((const void **)&v2695 + 1), (size_t)&v1157[-*((void *)&v2695 + 1)]);
                v1157 = v1174;
              }
              v1182 = &v1157[-8 * (v1179 >> 1)];
              v1157 = &v1181[v1180];
              *((void *)&v2695 + 1) = v1182;
              *(void *)&long long v2696 = &v1181[v1180];
              v1155 = (uint64_t *)v2616;
              unint64_t v1100 = v1177;
              unint64_t v1096 = v1176;
            }
          }
          uint64_t v1190 = *v1173++;
          *(void *)v1157 = v1190;
          v1157 = (char *)(v2696 + 8);
          *(void *)&long long v2696 = v2696 + 8;
        }
        while (v1173 != (uint64_t *)v1155[28]);
        uint64_t v1156 = v1155[27];
      }
      v1230 = (void *)v1155[26];
      *((_OWORD *)v1155 + 13) = v2695;
      *(void *)&long long v2695 = v1230;
      *((void *)&v2695 + 1) = v1156;
      *(void *)&long long v2696 = v1173;
      uint64_t v1231 = *((void *)&v2696 + 1);
      v1155[28] = (uint64_t)v1157;
      v1155[29] = v1231;
      v1155[30] += v2624;
      if (v1230) {
        operator delete(v1230);
      }
LABEL_1543:
      unint64_t v1085 = v2616[15].u64[0];
      v1090 = (char *)v2616[13].i64[1];
      v1089 = (char *)v2616[14].i64[0];
      unint64_t v1097 = v1085 >> 8;
      goto LABEL_1544;
    }
    if (v1108)
    {
      if (v1090 == (char *)v1109)
      {
LABEL_1442:
        unint64_t v1151 = v1108;
        do
        {
          *(void *)&long long v2695 = operator new(0x1000uLL);
          std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(v1101, &v2695);
          --v1151;
        }
        while (v1151);
        v1107 += v1108;
        v1152 = v2616;
        unint64_t v1085 = v2616[15].u64[0];
LABEL_1450:
        for (v1152[15].i64[0] = v1085 + (v1107 << 8); v1107; --v1107)
        {
          uint64_t v1153 = v2616[14].i64[0];
          *(void *)&long long v2695 = *(void *)(v1153 - 8);
          v2616[14].i64[0] = v1153 - 8;
          std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v1101, &v2695);
        }
        goto LABEL_1543;
      }
      while (1)
      {
        *(void *)&long long v2695 = operator new(0x1000uLL);
        std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v1101, &v2695);
        uint64_t v1149 = v2616[13].i64[1];
        uint64_t v1150 = v2616[14].i64[0] - v1149 == 8 ? 255 : 256;
        unint64_t v1085 = v1150 + v2616[15].i64[0];
        v2616[15].i64[0] = v1085;
        if (!--v1108) {
          break;
        }
        if (v1149 == v1101->i64[0]) {
          goto LABEL_1442;
        }
      }
    }
    v1152 = v2616;
    goto LABEL_1450;
  }
LABEL_1544:
  v1232 = &v1090[8 * v1097];
  if (v1089 == v1090) {
    v1233 = 0;
  }
  else {
    v1233 = (long long *)(*(void *)v1232 + 16 * v1085);
  }
  if (v1096 <= v1100)
  {
    v1237 = v1233;
    v1236 = &v1090[8 * v1097];
    if (!v1096) {
      goto LABEL_1670;
    }
    goto LABEL_1562;
  }
  v1234 = &v1094[16 * (v1096 - v1100)];
  if (v1100 < v1096 >> 1) {
    v1234 = &v1095[-16 * v1100];
  }
  if (v1234 == v1094)
  {
    v1237 = v1233;
    v1236 = &v1090[8 * v1097];
  }
  else
  {
    v1235 = v1234;
    v1236 = &v1090[8 * v1097];
    v1237 = v1233;
    do
    {
      if (v1237 == *(long long **)v1236)
      {
        uint64_t v1238 = *((void *)v1236 - 1);
        v1236 -= 8;
        v1237 = (long long *)(v1238 + 4096);
      }
      uint64_t v1239 = *((void *)v1235 - 2);
      v1235 -= 16;
      *((void *)v1237-- - 2) = v1239;
      uint64_t v1240 = *((void *)v1235 + 1);
      *((void *)v1237 + 1) = v1240;
      if (v1240)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v1240 + 8), 1uLL, memory_order_relaxed);
        unint64_t v1085 = v2616[15].u64[0];
      }
      --v1085;
      uint64_t v1241 = v2616[15].i64[1] + 1;
      v2616[15].i64[0] = v1085;
      v2616[15].i64[1] = v1241;
    }
    while (v1235 != v1094);
    v1094 = v1234;
  }
  unint64_t v1096 = v1100;
  if (v1100)
  {
LABEL_1562:
    v1242 = (long long **)std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator+[abi:ne180100](v1232, (uint64_t)v1233, v1096);
    v1244 = v1242;
    v1245 = v1243;
    if (v1233 != v1243)
    {
      v1246 = v1242;
      v1247 = v1243;
      do
      {
        if (v1237 == *(long long **)v1236)
        {
          uint64_t v1248 = *((void *)v1236 - 1);
          v1236 -= 8;
          v1237 = (long long *)(v1248 + 4096);
        }
        if (v1247 == *v1246)
        {
          uint64_t v1249 = (uint64_t)*--v1246;
          v1247 = (long long *)(v1249 + 4096);
        }
        long long v1250 = *--v1247;
        *--v1237 = v1250;
        *(void *)v1247 = 0;
        *((void *)v1247 + 1) = 0;
        v2616[15] = vaddq_s64(v2616[15], (int64x2_t)xmmword_1901C6000);
      }
      while (v1247 != v1233);
    }
    if (v1096 < v1100)
    {
      v1251 = (long long **)std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator+[abi:ne180100](v1232, (uint64_t)v1233, v1100);
      v1253 = v1252;
      if (v1244 == v1251)
      {
        v1262 = v1245;
        v1263 = v1253;
        v1259 = v1232;
        uint64_t v1260 = (uint64_t)v1233;
      }
      else
      {
        v1254 = v1251;
        v1256 = *v1244;
        v1255 = v1244 + 1;
        v1257 = v1256 + 256;
        v1258 = v1245;
        v1259 = v1232;
        uint64_t v1260 = (uint64_t)v1233;
        while (1)
        {
          std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>(&v2695, v1258, v1257, v1259, v1260);
          v1259 = (char *)*((void *)&v2695 + 1);
          uint64_t v1260 = v2696;
          if (v1255 == v1254) {
            break;
          }
          v1261 = *v1255++;
          v1258 = v1261;
          v1257 = v1261 + 256;
        }
        v1262 = *v1254;
        v1263 = v1253;
      }
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>(&v2695, v1262, v1263, v1259, v1260);
      v1233 = (long long *)v2696;
      v1232 = (char *)*((void *)&v2695 + 1);
    }
    if (v1094 != v1095)
    {
      v1264 = *(char **)v1232;
      while (1)
      {
        uint64_t v1265 = v1264 - (char *)v1233 + 4096;
        if ((v1095 - v1094) >> 4 >= v1265 >> 4) {
          uint64_t v1266 = v1265 >> 4;
        }
        else {
          uint64_t v1266 = (v1095 - v1094) >> 4;
        }
        if (v1266)
        {
          v1267 = &v1094[16 * v1266];
          do
          {
            uint64_t v1269 = *(void *)v1094;
            uint64_t v1268 = *((void *)v1094 + 1);
            if (v1268) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v1268 + 8), 1uLL, memory_order_relaxed);
            }
            v1270 = (std::__shared_weak_count *)*((void *)v1233 + 1);
            *(void *)v1233 = v1269;
            *((void *)v1233 + 1) = v1268;
            if (v1270) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v1270);
            }
            v1094 += 16;
            ++v1233;
          }
          while (v1094 != v1267);
          v1094 = v1267;
        }
        if (v1094 == v1095) {
          break;
        }
        v1271 = (char *)*((void *)v1232 + 1);
        v1232 += 8;
        v1264 = v1271;
        v1233 = (long long *)v1271;
      }
    }
  }
LABEL_1670:
  atomic_fetch_add(v2616[16].i64, (v2684 - v2683) >> 4);
  unint64_t v1336 = v2616[19].u64[0];
  uint64_t v1337 = v2616[19].i64[1];
  unint64_t v1338 = v1336 + v1337;
  unint64_t v1339 = (v1336 + v1337) >> 8;
  v1341 = (char *)v2616[17].i64[1];
  v1340 = (char *)v2616[18].i64[0];
  v1342 = &v1341[8 * v1339];
  int64_t v1343 = v1340 - v1341;
  if (v1340 == v1341)
  {
    uint64_t v1344 = 0;
    uint64_t v1350 = 0;
    v1345 = v2680;
    v1346 = v2681;
    unint64_t v1347 = (v2681 - v2680) >> 4;
    unint64_t v1348 = v1336 >> 8;
    v1349 = &v1341[8 * (v1336 >> 8)];
  }
  else
  {
    uint64_t v1344 = *(void *)v1342 + 16 * v1338;
    v1345 = v2680;
    v1346 = v2681;
    unint64_t v1347 = (v2681 - v2680) >> 4;
    unint64_t v1348 = v1336 >> 8;
    v1349 = &v1341[8 * (v1336 >> 8)];
    uint64_t v1350 = *(void *)v1349 + 16 * v1336;
  }
  if (v1344 == v1350) {
    unint64_t v1351 = 0;
  }
  else {
    unint64_t v1351 = ((v1344 - *(void *)v1342) >> 4) + 32 * (v1342 - v1349) - ((v1350 - *(void *)v1349) >> 4);
  }
  v1352 = v2616 + 17;
  if (v1351 >= v1337 - v1351)
  {
    uint64_t v1366 = 32 * v1343 - 1;
    uint64_t v1367 = v1340 - v1341;
    if (v1340 == v1341) {
      uint64_t v1366 = 0;
    }
    unint64_t v1368 = v1366 - v1338;
    BOOL v363 = v1347 >= v1368;
    unint64_t v1369 = v1347 - v1368;
    if (v1369 == 0 || !v363)
    {
LABEL_1925:
      v1550 = &v1341[8 * v1339];
      if (v1340 == v1341) {
        uint64_t v1551 = 0;
      }
      else {
        uint64_t v1551 = *(void *)v1550 + 16 * v1338;
      }
      unint64_t v1552 = v1337 - v1351;
      if (v1552 >= v1347)
      {
        v1556 = (void *)v1551;
        v1555 = &v1341[8 * v1339];
        if (!v1347) {
          goto LABEL_1972;
        }
      }
      else
      {
        v1553 = &v1346[16 * (v1552 - v1347)];
        if (v1552 < v1347 >> 1) {
          v1553 = &v1345[16 * v1552];
        }
        if (v1553 == v1346)
        {
          v1556 = (void *)v1551;
          v1555 = &v1341[8 * v1339];
        }
        else
        {
          v1554 = v1553;
          v1555 = v1550;
          v1556 = (void *)v1551;
          do
          {
            void *v1556 = *(void *)v1554;
            uint64_t v1557 = *((void *)v1554 + 1);
            v1556[1] = v1557;
            if (v1557) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v1557 + 8), 1uLL, memory_order_relaxed);
            }
            v1556 += 2;
            if ((void *)((char *)v1556 - *(void *)v1555) == (void *)4096)
            {
              v1558 = (void *)*((void *)v1555 + 1);
              v1555 += 8;
              v1556 = v1558;
            }
            ++v2616[19].i64[1];
            v1554 += 16;
          }
          while (v1554 != v1346);
          v1346 = v1553;
        }
        unint64_t v1347 = v1552;
        if (!v1552) {
          goto LABEL_1972;
        }
      }
      v1559 = std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator-[abi:ne180100](v1550, v1551, v1347);
      v1561 = v1559;
      uint64_t v1562 = v1560;
      if (v1551 != v1560)
      {
        v1563 = v1559;
        uint64_t v1564 = v1560;
        do
        {
          *(_OWORD *)v1556 = *(_OWORD *)v1564;
          v1556 += 2;
          *(void *)uint64_t v1564 = 0;
          *(void *)(v1564 + 8) = 0;
          if ((void *)((char *)v1556 - *(void *)v1555) == (void *)4096)
          {
            v1565 = (void *)*((void *)v1555 + 1);
            v1555 += 8;
            v1556 = v1565;
          }
          v1564 += 16;
          if (v1564 - *v1563 == 4096)
          {
            uint64_t v1566 = v1563[1];
            ++v1563;
            uint64_t v1564 = v1566;
          }
          ++v2616[19].i64[1];
        }
        while (v1564 != v1551);
      }
      if (v1347 < v1552)
      {
        v1567 = std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator-[abi:ne180100](v1550, v1551, v1552);
        uint64_t v1569 = v1568;
        if (v1567 == v1561)
        {
          uint64_t v1578 = v1562;
          v1575 = v1550;
          uint64_t v1576 = v1551;
        }
        else
        {
          v1570 = v1567;
          uint64_t v1573 = *v1561;
          v1572 = v1561 - 1;
          uint64_t v1571 = v1573;
          uint64_t v1574 = v1562;
          v1575 = v1550;
          uint64_t v1576 = v1551;
          while (1)
          {
            std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>(&v2695, v1571, v1574, v1575, v1576);
            v1575 = (char *)*((void *)&v2695 + 1);
            uint64_t v1576 = v2696;
            if (v1572 == v1570) {
              break;
            }
            uint64_t v1577 = *v1572--;
            uint64_t v1571 = v1577;
            uint64_t v1574 = v1577 + 4096;
          }
          uint64_t v1578 = *v1570 + 4096;
          uint64_t v1568 = v1569;
        }
        std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>(&v2695, v1568, v1578, v1575, v1576);
        uint64_t v1551 = v2696;
        v1550 = (char *)*((void *)&v2695 + 1);
      }
      if (v1345 != v1346)
      {
        uint64_t v1579 = *(void *)v1550;
        while (1)
        {
          uint64_t v1580 = v1551 - v1579;
          if ((v1346 - v1345) >> 4 >= v1580 >> 4) {
            uint64_t v1581 = v1580 >> 4;
          }
          else {
            uint64_t v1581 = (v1346 - v1345) >> 4;
          }
          if (v1581)
          {
            v1582 = (std::__shared_weak_count **)(v1346 - 8);
            uint64_t v1583 = -16 * v1581;
            v1584 = (std::__shared_weak_count **)(v1551 - 8);
            do
            {
              v1586 = *(v1582 - 1);
              v1585 = *v1582;
              if (*v1582) {
                atomic_fetch_add_explicit(&v1585->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              v1587 = *v1584;
              *(v1584 - 1) = v1586;
              *v1584 = v1585;
              if (v1587) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v1587);
              }
              v1582 -= 2;
              v1584 -= 2;
              v1583 += 16;
            }
            while (v1583);
          }
          v1346 -= 16 * v1581;
          if (v1346 == v1345) {
            break;
          }
          uint64_t v1588 = *((void *)v1550 - 1);
          v1550 -= 8;
          uint64_t v1579 = v1588;
          uint64_t v1551 = v1588 + 4096;
        }
      }
      goto LABEL_1972;
    }
    if (v1340 == v1341) {
      unint64_t v1370 = v1369 + 1;
    }
    else {
      unint64_t v1370 = v1369;
    }
    if ((_BYTE)v1370) {
      unint64_t v1371 = (v1370 >> 8) + 1;
    }
    else {
      unint64_t v1371 = v1370 >> 8;
    }
    if (v1371 >= v1348) {
      unint64_t v1372 = v1348;
    }
    else {
      unint64_t v1372 = v1371;
    }
    unint64_t v2642 = v1351;
    if (v1371 <= v1348)
    {
      v2616[19].i64[0] = v1336 - (v1372 << 8);
      if (v1372)
      {
        v1380 = (uint64_t *)v2616;
        do
        {
          v1381 = (void *)v1380[35];
          uint64_t v1384 = *v1381;
          v1382 = (char *)(v1381 + 1);
          uint64_t v1383 = v1384;
          v1380[35] = (uint64_t)v1382;
          if (v1340 == (char *)v1380[37])
          {
            uint64_t v1385 = (uint64_t)&v1382[-v1352->i64[0]];
            if ((unint64_t)v1382 <= v1352->i64[0])
            {
              if (v1340 == (char *)v1352->i64[0]) {
                unint64_t v1392 = 1;
              }
              else {
                unint64_t v1392 = (uint64_t)&v1340[-v1352->i64[0]] >> 2;
              }
              v1393 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1392);
              v1395 = &v1393[8 * (v1392 >> 2)];
              v1396 = (uint64_t *)v2616[17].i64[1];
              v1340 = v1395;
              uint64_t v1397 = v2616[18].i64[0] - (void)v1396;
              if (v1397)
              {
                v1340 = &v1395[v1397 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v1398 = 8 * (v1397 >> 3);
                v1399 = &v1393[8 * (v1392 >> 2)];
                do
                {
                  uint64_t v1400 = *v1396++;
                  *(void *)v1399 = v1400;
                  v1399 += 8;
                  v1398 -= 8;
                }
                while (v1398);
              }
              v1380 = (uint64_t *)v2616;
              v1401 = (void *)v2616[17].i64[0];
              v2616[17].i64[0] = (uint64_t)v1393;
              v2616[17].i64[1] = (uint64_t)v1395;
              v2616[18].i64[0] = (uint64_t)v1340;
              v2616[18].i64[1] = (uint64_t)&v1393[8 * v1394];
              if (v1401)
              {
                operator delete(v1401);
                v1340 = (char *)v2616[18].i64[0];
              }
            }
            else
            {
              uint64_t v1386 = v1385 >> 3;
              BOOL v381 = v1385 >> 3 < -1;
              uint64_t v1387 = (v1385 >> 3) + 2;
              if (v381) {
                uint64_t v1388 = v1387;
              }
              else {
                uint64_t v1388 = v1386 + 1;
              }
              v1389 = &v1382[-8 * (v1388 >> 1)];
              int64_t v1390 = v1340 - v1382;
              v1380 = (uint64_t *)v2616;
              if (v1340 != v1382)
              {
                memmove(&v1382[-8 * (v1388 >> 1)], v1382, v1340 - v1382);
                v1340 = (char *)v2616[17].i64[1];
              }
              v1391 = &v1340[-8 * (v1388 >> 1)];
              v1340 = &v1389[v1390];
              v2616[17].i64[1] = (uint64_t)v1391;
              v2616[18].i64[0] = (uint64_t)&v1389[v1390];
            }
          }
          else
          {
            v1380 = (uint64_t *)v2616;
          }
          *(void *)v1340 = v1383;
          v1340 = (char *)(v1380[36] + 8);
          v1380[36] = (uint64_t)v1340;
          --v1372;
        }
        while (v1372);
        goto LABEL_1924;
      }
    }
    else
    {
      unint64_t v1373 = v1371 - v1372;
      uint64_t v1374 = v2616[18].i64[1] - v2616[17].i64[0];
      if (v1371 - v1372 <= (v1374 >> 3) - (v1367 >> 3))
      {
        if (v1373)
        {
          while (v2616[18].i64[1] != v2616[18].i64[0])
          {
            *(void *)&long long v2695 = operator new(0x1000uLL);
            std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(v1352, &v2695);
            if (!--v1373)
            {
              v1340 = (char *)v2616[18].i64[0];
              goto LABEL_1901;
            }
          }
          for (uint64_t i4 = 0; i4 != v1373; ++i4)
          {
            *(void *)&long long v2695 = operator new(0x1000uLL);
            std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v1352, &v2695);
            v1340 = (char *)v2616[18].i64[0];
            if (&v1340[-v2616[17].i64[1]] == (char *)8) {
              uint64_t v1526 = 255;
            }
            else {
              uint64_t v1526 = 256;
            }
            uint64_t v1527 = v1526 + v2616[19].i64[0];
            v2616[19].i64[0] = v1527;
          }
          v1372 += v1373;
          v1528 = v2616;
        }
        else
        {
LABEL_1901:
          v1528 = v2616;
          uint64_t v1527 = v2616[19].i64[0];
        }
        v1528[19].i64[0] = v1527 - (v1372 << 8);
        if (v1372)
        {
          v1380 = (uint64_t *)v2616;
          do
          {
            v1529 = (void *)v1380[35];
            uint64_t v1532 = *v1529;
            v1530 = (char *)(v1529 + 1);
            uint64_t v1531 = v1532;
            v1380[35] = (uint64_t)v1530;
            if (v1340 == (char *)v1380[37])
            {
              uint64_t v1533 = (uint64_t)&v1530[-v1352->i64[0]];
              if ((unint64_t)v1530 <= v1352->i64[0])
              {
                if (v1340 == (char *)v1352->i64[0]) {
                  unint64_t v1540 = 1;
                }
                else {
                  unint64_t v1540 = (uint64_t)&v1340[-v1352->i64[0]] >> 2;
                }
                v1541 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1540);
                v1543 = &v1541[8 * (v1540 >> 2)];
                v1544 = (uint64_t *)v2616[17].i64[1];
                v1340 = v1543;
                uint64_t v1545 = v2616[18].i64[0] - (void)v1544;
                if (v1545)
                {
                  v1340 = &v1543[v1545 & 0xFFFFFFFFFFFFFFF8];
                  uint64_t v1546 = 8 * (v1545 >> 3);
                  v1547 = &v1541[8 * (v1540 >> 2)];
                  do
                  {
                    uint64_t v1548 = *v1544++;
                    *(void *)v1547 = v1548;
                    v1547 += 8;
                    v1546 -= 8;
                  }
                  while (v1546);
                }
                v1380 = (uint64_t *)v2616;
                v1549 = (void *)v2616[17].i64[0];
                v2616[17].i64[0] = (uint64_t)v1541;
                v2616[17].i64[1] = (uint64_t)v1543;
                v2616[18].i64[0] = (uint64_t)v1340;
                v2616[18].i64[1] = (uint64_t)&v1541[8 * v1542];
                if (v1549)
                {
                  operator delete(v1549);
                  v1340 = (char *)v2616[18].i64[0];
                }
              }
              else
              {
                uint64_t v1534 = v1533 >> 3;
                BOOL v381 = v1533 >> 3 < -1;
                uint64_t v1535 = (v1533 >> 3) + 2;
                if (v381) {
                  uint64_t v1536 = v1535;
                }
                else {
                  uint64_t v1536 = v1534 + 1;
                }
                v1537 = &v1530[-8 * (v1536 >> 1)];
                int64_t v1538 = v1340 - v1530;
                v1380 = (uint64_t *)v2616;
                if (v1340 != v1530)
                {
                  memmove(&v1530[-8 * (v1536 >> 1)], v1530, v1340 - v1530);
                  v1340 = (char *)v2616[17].i64[1];
                }
                v1539 = &v1340[-8 * (v1536 >> 1)];
                v1340 = &v1537[v1538];
                v2616[17].i64[1] = (uint64_t)v1539;
                v2616[18].i64[0] = (uint64_t)&v1537[v1538];
              }
            }
            else
            {
              v1380 = (uint64_t *)v2616;
            }
            *(void *)v1340 = v1531;
            v1340 = (char *)(v1380[36] + 8);
            v1380[36] = (uint64_t)v1340;
            --v1372;
          }
          while (v1372);
          goto LABEL_1924;
        }
      }
      else
      {
        uint64_t v1375 = v1367 >> 3;
        unint64_t v1376 = v1374 >> 2;
        if (v1376 <= v1373 + (v1367 >> 3)) {
          v1377 = (char *)(v1373 + (v1367 >> 3));
        }
        else {
          v1377 = (char *)v1376;
        }
        v2697 = &v2616[18].i8[8];
        if (v1377) {
          v1377 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>((unint64_t)v1377);
        }
        else {
          uint64_t v1378 = 0;
        }
        *(void *)&long long v2695 = v1377;
        *((void *)&v2695 + 1) = &v1377[8 * (v1375 - v1372)];
        *(void *)&long long v2696 = *((void *)&v2695 + 1);
        *((void *)&v2696 + 1) = &v1377[8 * v1378];
        v1444 = v2616;
        do
        {
          *(void *)&long long v2667 = operator new(0x1000uLL);
          std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(&v2695, &v2667);
          --v1373;
        }
        while (v1373);
        unint64_t v2627 = v1372 << 8;
        v1445 = (char *)v2696;
        if (v1372)
        {
          v1446 = (void *)v2616[17].i64[1];
          unint64_t v2657 = v1347;
          do
          {
            if (v1445 == *((char **)&v2696 + 1))
            {
              v1447 = (char *)*((void *)&v2695 + 1);
              v1448 = (void *)v2695;
              if (*((void *)&v2695 + 1) <= (unint64_t)v2695)
              {
                if (v1445 == (char *)v2695) {
                  unint64_t v1455 = 1;
                }
                else {
                  unint64_t v1455 = (uint64_t)&v1445[-v2695] >> 2;
                }
                v1456 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1455);
                uint64_t v1458 = v1445 - v1447;
                BOOL v417 = v1445 == v1447;
                v1445 = &v1456[8 * (v1455 >> 2)];
                if (!v417)
                {
                  v1445 = &v1456[8 * (v1455 >> 2) + (v1458 & 0xFFFFFFFFFFFFFFF8)];
                  uint64_t v1459 = 8 * (v1458 >> 3);
                  v1460 = &v1456[8 * (v1455 >> 2)];
                  do
                  {
                    uint64_t v1461 = *(void *)v1447;
                    v1447 += 8;
                    *(void *)v1460 = v1461;
                    v1460 += 8;
                    v1459 -= 8;
                  }
                  while (v1459);
                }
                *(void *)&long long v2695 = v1456;
                *((void *)&v2695 + 1) = &v1456[8 * (v1455 >> 2)];
                *(void *)&long long v2696 = v1445;
                *((void *)&v2696 + 1) = &v1456[8 * v1457];
                if (v1448) {
                  operator delete(v1448);
                }
                v1444 = v2616;
              }
              else
              {
                unint64_t v1449 = v1351;
                uint64_t v1450 = (uint64_t)(*((void *)&v2695 + 1) - v2695) >> 3;
                if (v1450 >= -1) {
                  uint64_t v1451 = v1450 + 1;
                }
                else {
                  uint64_t v1451 = v1450 + 2;
                }
                uint64_t v1452 = *((void *)&v2695 + 1) - 8 * (v1451 >> 1);
                v1453 = &v1445[-*((void *)&v2695 + 1)];
                if (v1445 != *((char **)&v2695 + 1))
                {
                  memmove((void *)(*((void *)&v2695 + 1) - 8 * (v1451 >> 1)), *((const void **)&v2695 + 1), (size_t)&v1445[-*((void *)&v2695 + 1)]);
                  v1445 = v1447;
                }
                v1454 = &v1445[-8 * (v1451 >> 1)];
                v1445 = &v1453[v1452];
                *((void *)&v2695 + 1) = v1454;
                *(void *)&long long v2696 = &v1453[v1452];
                v1444 = v2616;
                unint64_t v1351 = v1449;
                unint64_t v1347 = v2657;
              }
            }
            *(void *)v1445 = *v1446;
            v1445 = (char *)(v2696 + 8);
            *(void *)&long long v2696 = v2696 + 8;
            v1446 = (void *)(v1444[17].i64[1] + 8);
            v1444[17].i64[1] = (uint64_t)v1446;
            --v1372;
          }
          while (v1372);
        }
        uint64_t v1462 = v1444[18].i64[0];
        v1463 = (char *)*((void *)&v2695 + 1);
        v1464 = (char *)v2695;
        v1465 = (char *)*((void *)&v2696 + 1);
        while (v1462 != v2616[17].i64[1])
        {
          if (v1463 == v1464)
          {
            if (v1445 >= v1465)
            {
              if (v1465 == v1464) {
                unint64_t v1470 = 1;
              }
              else {
                unint64_t v1470 = (v1465 - v1464) >> 2;
              }
              v1471 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1470);
              v1473 = v1471;
              v1463 = &v1471[(2 * v1470 + 6) & 0xFFFFFFFFFFFFFFF8];
              uint64_t v1474 = v1445 - v1464;
              BOOL v417 = v1445 == v1464;
              v1445 = v1463;
              if (!v417)
              {
                v1445 = &v1463[v1474 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v1475 = 8 * (v1474 >> 3);
                v1476 = v1463;
                v1477 = v1464;
                do
                {
                  uint64_t v1478 = *(void *)v1477;
                  v1477 += 8;
                  *(void *)v1476 = v1478;
                  v1476 += 8;
                  v1475 -= 8;
                }
                while (v1475);
              }
              v1465 = &v1471[8 * v1472];
              if (v1464) {
                operator delete(v1464);
              }
              v1464 = v1473;
            }
            else
            {
              uint64_t v1466 = (v1465 - v1445) >> 3;
              if (v1466 >= -1) {
                unint64_t v1467 = v1466 + 1;
              }
              else {
                unint64_t v1467 = v1466 + 2;
              }
              v1468 = &v1445[8 * (v1467 >> 1)];
              v1463 = &v1468[-(v1445 - v1464)];
              size_t v1469 = v1445 - v1464;
              BOOL v417 = v1445 == v1464;
              v1445 = v1468;
              if (!v417) {
                memmove(v1463, v1464, v1469);
              }
            }
          }
          uint64_t v1479 = *(void *)(v1462 - 8);
          v1462 -= 8;
          *((void *)v1463 - 1) = v1479;
          v1463 -= 8;
        }
        *(void *)&long long v2695 = v1464;
        *((void *)&v2695 + 1) = v1463;
        *(void *)&long long v2696 = v1445;
        *((void *)&v2696 + 1) = v1465;
        long long v1482 = v2695;
        int64x2_t v1481 = (int64x2_t)v2696;
        *(void *)&long long v2695 = v2616[17].i64[0];
        v1480 = (void *)v2695;
        *((void *)&v2695 + 1) = v1462;
        v2616[17] = (int64x2_t)v1482;
        v2616[18] = v1481;
        v2616[19].i64[0] -= v2627;
        if (v1480)
        {
          operator delete(v1480);
          v1340 = (char *)v2616[18].i64[0];
        }
        else
        {
          v1340 = (char *)v1481.i64[0];
        }
      }
    }
    v1380 = (uint64_t *)v2616;
LABEL_1924:
    uint64_t v1337 = v1380[39];
    v1341 = (char *)v1380[35];
    unint64_t v1338 = v1380[38] + v1337;
    unint64_t v1339 = v1338 >> 8;
    unint64_t v1351 = v2642;
    goto LABEL_1925;
  }
  unint64_t v1353 = v1347 - v1336;
  if (v1347 > v1336)
  {
    uint64_t v1354 = 32 * v1343 - 1;
    uint64_t v1355 = v1340 - v1341;
    if (v1340 == v1341)
    {
      uint64_t v1354 = 0;
      ++v1353;
    }
    if ((_BYTE)v1353) {
      unint64_t v1356 = (v1353 >> 8) + 1;
    }
    else {
      unint64_t v1356 = v1353 >> 8;
    }
    unint64_t v1357 = v1354 - v1338;
    if (v1356 >= v1357 >> 8) {
      unint64_t v1358 = v1357 >> 8;
    }
    else {
      unint64_t v1358 = v1356;
    }
    if (v1356 <= v1357 >> 8)
    {
      for (v2616[19].i64[0] = v1336 + (v1358 << 8); v1358; --v1358)
      {
        uint64_t v1379 = v2616[18].i64[0];
        *(void *)&long long v2695 = *(void *)(v1379 - 8);
        v2616[18].i64[0] = v1379 - 8;
        std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v1352, &v2695);
      }
      goto LABEL_1845;
    }
    unint64_t v1359 = v1356 - v1358;
    uint64_t v1360 = v2616[17].i64[0];
    uint64_t v1361 = v2616[18].i64[1] - v1360;
    if (v1356 - v1358 > (v1361 >> 3) - (v1355 >> 3))
    {
      uint64_t v1362 = v1355 >> 3;
      BOOL v1363 = v1340 == v1341;
      if (v1361 >> 2 <= v1359 + v1362) {
        unint64_t v1364 = v1359 + v1362;
      }
      else {
        unint64_t v1364 = v1361 >> 2;
      }
      v2697 = &v2616[18].i8[8];
      if (v1364) {
        unint64_t v1364 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1364);
      }
      else {
        uint64_t v1365 = 0;
      }
      unint64_t v1407 = (v1356 << 8) - v1363;
      *(void *)&long long v2695 = v1364;
      *((void *)&v2695 + 1) = v1364;
      *(void *)&long long v2696 = v1364;
      *((void *)&v2696 + 1) = v1364 + 8 * v1365;
      v1408 = (uint64_t *)v2616;
      do
      {
        *(void *)&long long v2667 = operator new(0x1000uLL);
        std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(&v2695, &v2667);
        --v1359;
      }
      while (v1359);
      unint64_t v2626 = v1407;
      uint64_t v1409 = v2616[18].i64[0];
      v1410 = (char *)v2696;
      if (v1358)
      {
        unint64_t v2656 = v1347;
        do
        {
          if (v1410 == *((char **)&v2696 + 1))
          {
            v1411 = (char *)*((void *)&v2695 + 1);
            v1412 = (void *)v2695;
            if (*((void *)&v2695 + 1) <= (unint64_t)v2695)
            {
              if (v1410 == (char *)v2695) {
                unint64_t v1419 = 1;
              }
              else {
                unint64_t v1419 = (uint64_t)&v1410[-v2695] >> 2;
              }
              v1420 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1419);
              uint64_t v1422 = v1410 - v1411;
              BOOL v417 = v1410 == v1411;
              v1410 = &v1420[8 * (v1419 >> 2)];
              if (!v417)
              {
                v1410 = &v1420[8 * (v1419 >> 2) + (v1422 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v1423 = 8 * (v1422 >> 3);
                v1424 = &v1420[8 * (v1419 >> 2)];
                do
                {
                  uint64_t v1425 = *(void *)v1411;
                  v1411 += 8;
                  *(void *)v1424 = v1425;
                  v1424 += 8;
                  v1423 -= 8;
                }
                while (v1423);
              }
              *(void *)&long long v2695 = v1420;
              *((void *)&v2695 + 1) = &v1420[8 * (v1419 >> 2)];
              *(void *)&long long v2696 = v1410;
              *((void *)&v2696 + 1) = &v1420[8 * v1421];
              if (v1412) {
                operator delete(v1412);
              }
              v1408 = (uint64_t *)v2616;
            }
            else
            {
              unint64_t v1413 = v1351;
              uint64_t v1414 = (uint64_t)(*((void *)&v2695 + 1) - v2695) >> 3;
              if (v1414 >= -1) {
                uint64_t v1415 = v1414 + 1;
              }
              else {
                uint64_t v1415 = v1414 + 2;
              }
              uint64_t v1416 = *((void *)&v2695 + 1) - 8 * (v1415 >> 1);
              v1417 = &v1410[-*((void *)&v2695 + 1)];
              if (v1410 != *((char **)&v2695 + 1))
              {
                memmove((void *)(*((void *)&v2695 + 1) - 8 * (v1415 >> 1)), *((const void **)&v2695 + 1), (size_t)&v1410[-*((void *)&v2695 + 1)]);
                v1410 = v1411;
              }
              v1418 = &v1410[-8 * (v1415 >> 1)];
              v1410 = &v1417[v1416];
              *((void *)&v2695 + 1) = v1418;
              *(void *)&long long v2696 = &v1417[v1416];
              v1408 = (uint64_t *)v2616;
              unint64_t v1351 = v1413;
              unint64_t v1347 = v2656;
            }
          }
          *(void *)v1410 = *(void *)(v1409 - 8);
          v1410 = (char *)(v2696 + 8);
          *(void *)&long long v2696 = v2696 + 8;
          uint64_t v1409 = v1408[36] - 8;
          v1408[36] = v1409;
          --v1358;
        }
        while (v1358);
      }
      v1426 = (uint64_t *)v1408[35];
      if (v1426 == (uint64_t *)v1409)
      {
        v1426 = (uint64_t *)v1409;
      }
      else
      {
        do
        {
          if (v1410 == *((char **)&v2696 + 1))
          {
            v1427 = (char *)*((void *)&v2695 + 1);
            v1428 = (void *)v2695;
            if (*((void *)&v2695 + 1) <= (unint64_t)v2695)
            {
              if (v1410 == (char *)v2695) {
                unint64_t v1436 = 1;
              }
              else {
                unint64_t v1436 = (uint64_t)&v1410[-v2695] >> 2;
              }
              v1437 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1436);
              uint64_t v1439 = v1410 - v1427;
              BOOL v417 = v1410 == v1427;
              v1410 = &v1437[8 * (v1436 >> 2)];
              if (!v417)
              {
                v1410 = &v1437[8 * (v1436 >> 2) + (v1439 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v1440 = 8 * (v1439 >> 3);
                v1441 = &v1437[8 * (v1436 >> 2)];
                do
                {
                  uint64_t v1442 = *(void *)v1427;
                  v1427 += 8;
                  *(void *)v1441 = v1442;
                  v1441 += 8;
                  v1440 -= 8;
                }
                while (v1440);
              }
              *(void *)&long long v2695 = v1437;
              *((void *)&v2695 + 1) = &v1437[8 * (v1436 >> 2)];
              *(void *)&long long v2696 = v1410;
              *((void *)&v2696 + 1) = &v1437[8 * v1438];
              if (v1428) {
                operator delete(v1428);
              }
              v1408 = (uint64_t *)v2616;
            }
            else
            {
              unint64_t v1429 = v1347;
              unint64_t v1430 = v1351;
              uint64_t v1431 = (uint64_t)(*((void *)&v2695 + 1) - v2695) >> 3;
              if (v1431 >= -1) {
                uint64_t v1432 = v1431 + 1;
              }
              else {
                uint64_t v1432 = v1431 + 2;
              }
              uint64_t v1433 = *((void *)&v2695 + 1) - 8 * (v1432 >> 1);
              v1434 = &v1410[-*((void *)&v2695 + 1)];
              if (v1410 != *((char **)&v2695 + 1))
              {
                memmove((void *)(*((void *)&v2695 + 1) - 8 * (v1432 >> 1)), *((const void **)&v2695 + 1), (size_t)&v1410[-*((void *)&v2695 + 1)]);
                v1410 = v1427;
              }
              v1435 = &v1410[-8 * (v1432 >> 1)];
              v1410 = &v1434[v1433];
              *((void *)&v2695 + 1) = v1435;
              *(void *)&long long v2696 = &v1434[v1433];
              v1408 = (uint64_t *)v2616;
              unint64_t v1351 = v1430;
              unint64_t v1347 = v1429;
            }
          }
          uint64_t v1443 = *v1426++;
          *(void *)v1410 = v1443;
          v1410 = (char *)(v2696 + 8);
          *(void *)&long long v2696 = v2696 + 8;
        }
        while (v1426 != (uint64_t *)v1408[36]);
        uint64_t v1409 = v1408[35];
      }
      v1483 = (void *)v1408[34];
      *((_OWORD *)v1408 + 17) = v2695;
      *(void *)&long long v2695 = v1483;
      *((void *)&v2695 + 1) = v1409;
      *(void *)&long long v2696 = v1426;
      uint64_t v1484 = *((void *)&v2696 + 1);
      v1408[36] = (uint64_t)v1410;
      v1408[37] = v1484;
      v1408[38] += v2626;
      if (v1483) {
        operator delete(v1483);
      }
LABEL_1845:
      unint64_t v1336 = v2616[19].u64[0];
      v1341 = (char *)v2616[17].i64[1];
      v1340 = (char *)v2616[18].i64[0];
      unint64_t v1348 = v1336 >> 8;
      goto LABEL_1846;
    }
    if (v1359)
    {
      if (v1341 == (char *)v1360)
      {
LABEL_1744:
        unint64_t v1404 = v1359;
        do
        {
          *(void *)&long long v2695 = operator new(0x1000uLL);
          std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(v1352, &v2695);
          --v1404;
        }
        while (v1404);
        v1358 += v1359;
        v1405 = v2616;
        unint64_t v1336 = v2616[19].u64[0];
LABEL_1752:
        for (v1405[19].i64[0] = v1336 + (v1358 << 8); v1358; --v1358)
        {
          uint64_t v1406 = v2616[18].i64[0];
          *(void *)&long long v2695 = *(void *)(v1406 - 8);
          v2616[18].i64[0] = v1406 - 8;
          std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v1352, &v2695);
        }
        goto LABEL_1845;
      }
      while (1)
      {
        *(void *)&long long v2695 = operator new(0x1000uLL);
        std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v1352, &v2695);
        uint64_t v1402 = v2616[17].i64[1];
        uint64_t v1403 = v2616[18].i64[0] - v1402 == 8 ? 255 : 256;
        unint64_t v1336 = v1403 + v2616[19].i64[0];
        v2616[19].i64[0] = v1336;
        if (!--v1359) {
          break;
        }
        if (v1402 == v1352->i64[0]) {
          goto LABEL_1744;
        }
      }
    }
    v1405 = v2616;
    goto LABEL_1752;
  }
LABEL_1846:
  v1485 = &v1341[8 * v1348];
  if (v1340 == v1341) {
    v1486 = 0;
  }
  else {
    v1486 = (long long *)(*(void *)v1485 + 16 * v1336);
  }
  if (v1347 <= v1351)
  {
    v1490 = v1486;
    v1489 = &v1341[8 * v1348];
    if (!v1347) {
      goto LABEL_1972;
    }
    goto LABEL_1864;
  }
  v1487 = &v1345[16 * (v1347 - v1351)];
  if (v1351 < v1347 >> 1) {
    v1487 = &v1346[-16 * v1351];
  }
  if (v1487 == v1345)
  {
    v1490 = v1486;
    v1489 = &v1341[8 * v1348];
  }
  else
  {
    v1488 = v1487;
    v1489 = &v1341[8 * v1348];
    v1490 = v1486;
    do
    {
      if (v1490 == *(long long **)v1489)
      {
        uint64_t v1491 = *((void *)v1489 - 1);
        v1489 -= 8;
        v1490 = (long long *)(v1491 + 4096);
      }
      uint64_t v1492 = *((void *)v1488 - 2);
      v1488 -= 16;
      *((void *)v1490-- - 2) = v1492;
      uint64_t v1493 = *((void *)v1488 + 1);
      *((void *)v1490 + 1) = v1493;
      if (v1493)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v1493 + 8), 1uLL, memory_order_relaxed);
        unint64_t v1336 = v2616[19].u64[0];
      }
      --v1336;
      uint64_t v1494 = v2616[19].i64[1] + 1;
      v2616[19].i64[0] = v1336;
      v2616[19].i64[1] = v1494;
    }
    while (v1488 != v1345);
    v1345 = v1487;
  }
  unint64_t v1347 = v1351;
  if (v1351)
  {
LABEL_1864:
    v1495 = (long long **)std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator+[abi:ne180100](v1485, (uint64_t)v1486, v1347);
    v1497 = v1495;
    v1498 = v1496;
    if (v1486 != v1496)
    {
      v1499 = v1495;
      v1500 = v1496;
      do
      {
        if (v1490 == *(long long **)v1489)
        {
          uint64_t v1501 = *((void *)v1489 - 1);
          v1489 -= 8;
          v1490 = (long long *)(v1501 + 4096);
        }
        if (v1500 == *v1499)
        {
          uint64_t v1502 = (uint64_t)*--v1499;
          v1500 = (long long *)(v1502 + 4096);
        }
        long long v1503 = *--v1500;
        *--v1490 = v1503;
        *(void *)v1500 = 0;
        *((void *)v1500 + 1) = 0;
        v2616[19] = vaddq_s64(v2616[19], (int64x2_t)xmmword_1901C6000);
      }
      while (v1500 != v1486);
    }
    if (v1347 < v1351)
    {
      v1504 = (long long **)std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator+[abi:ne180100](v1485, (uint64_t)v1486, v1351);
      v1506 = v1505;
      if (v1497 == v1504)
      {
        v1515 = v1498;
        v1516 = v1506;
        v1512 = v1485;
        uint64_t v1513 = (uint64_t)v1486;
      }
      else
      {
        v1507 = v1504;
        v1509 = *v1497;
        v1508 = v1497 + 1;
        v1510 = v1509 + 256;
        v1511 = v1498;
        v1512 = v1485;
        uint64_t v1513 = (uint64_t)v1486;
        while (1)
        {
          std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>(&v2695, v1511, v1510, v1512, v1513);
          v1512 = (char *)*((void *)&v2695 + 1);
          uint64_t v1513 = v2696;
          if (v1508 == v1507) {
            break;
          }
          v1514 = *v1508++;
          v1511 = v1514;
          v1510 = v1514 + 256;
        }
        v1515 = *v1507;
        v1516 = v1506;
      }
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>(&v2695, v1515, v1516, v1512, v1513);
      v1486 = (long long *)v2696;
      v1485 = (char *)*((void *)&v2695 + 1);
    }
    if (v1345 != v1346)
    {
      v1517 = *(char **)v1485;
      while (1)
      {
        uint64_t v1518 = v1517 - (char *)v1486 + 4096;
        if ((v1346 - v1345) >> 4 >= v1518 >> 4) {
          uint64_t v1519 = v1518 >> 4;
        }
        else {
          uint64_t v1519 = (v1346 - v1345) >> 4;
        }
        if (v1519)
        {
          v1520 = &v1345[16 * v1519];
          do
          {
            uint64_t v1522 = *(void *)v1345;
            uint64_t v1521 = *((void *)v1345 + 1);
            if (v1521) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v1521 + 8), 1uLL, memory_order_relaxed);
            }
            v1523 = (std::__shared_weak_count *)*((void *)v1486 + 1);
            *(void *)v1486 = v1522;
            *((void *)v1486 + 1) = v1521;
            if (v1523) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v1523);
            }
            v1345 += 16;
            ++v1486;
          }
          while (v1345 != v1520);
          v1345 = v1520;
        }
        if (v1345 == v1346) {
          break;
        }
        v1524 = (char *)*((void *)v1485 + 1);
        v1485 += 8;
        v1517 = v1524;
        v1486 = (long long *)v1524;
      }
    }
  }
LABEL_1972:
  atomic_fetch_add(v2616[20].i64, (v2681 - v2680) >> 4);
  unint64_t v1589 = v2616[23].u64[0];
  uint64_t v1590 = v2616[23].i64[1];
  unint64_t v1591 = v1589 + v1590;
  unint64_t v1592 = (v1589 + v1590) >> 8;
  v1594 = (char *)v2616[21].i64[1];
  v1593 = (char *)v2616[22].i64[0];
  v1595 = &v1594[8 * v1592];
  int64_t v1596 = v1593 - v1594;
  if (v1593 == v1594)
  {
    uint64_t v1597 = 0;
    uint64_t v1603 = 0;
    v1598 = v2677;
    v1599 = v2678;
    unint64_t v1600 = (v2678 - v2677) >> 4;
    unint64_t v1601 = v1589 >> 8;
    v1602 = &v1594[8 * (v1589 >> 8)];
  }
  else
  {
    uint64_t v1597 = *(void *)v1595 + 16 * v1591;
    v1598 = v2677;
    v1599 = v2678;
    unint64_t v1600 = (v2678 - v2677) >> 4;
    unint64_t v1601 = v1589 >> 8;
    v1602 = &v1594[8 * (v1589 >> 8)];
    uint64_t v1603 = *(void *)v1602 + 16 * v1589;
  }
  if (v1597 == v1603) {
    unint64_t v1604 = 0;
  }
  else {
    unint64_t v1604 = ((v1597 - *(void *)v1595) >> 4) + 32 * (v1595 - v1602) - ((v1603 - *(void *)v1602) >> 4);
  }
  v1605 = v2616 + 21;
  if (v1604 >= v1590 - v1604)
  {
    uint64_t v1619 = 32 * v1596 - 1;
    uint64_t v1620 = v1593 - v1594;
    if (v1593 == v1594) {
      uint64_t v1619 = 0;
    }
    unint64_t v1621 = v1619 - v1591;
    BOOL v363 = v1600 >= v1621;
    unint64_t v1622 = v1600 - v1621;
    if (v1622 == 0 || !v363)
    {
LABEL_2227:
      v1803 = &v1594[8 * v1592];
      if (v1593 == v1594) {
        uint64_t v1804 = 0;
      }
      else {
        uint64_t v1804 = *(void *)v1803 + 16 * v1591;
      }
      unint64_t v1805 = v1590 - v1604;
      if (v1805 >= v1600)
      {
        v1809 = (void *)v1804;
        v1808 = &v1594[8 * v1592];
        if (!v1600) {
          goto LABEL_2274;
        }
      }
      else
      {
        v1806 = &v1599[16 * (v1805 - v1600)];
        if (v1805 < v1600 >> 1) {
          v1806 = &v1598[16 * v1805];
        }
        if (v1806 == v1599)
        {
          v1809 = (void *)v1804;
          v1808 = &v1594[8 * v1592];
        }
        else
        {
          v1807 = v1806;
          v1808 = v1803;
          v1809 = (void *)v1804;
          do
          {
            void *v1809 = *(void *)v1807;
            uint64_t v1810 = *((void *)v1807 + 1);
            v1809[1] = v1810;
            if (v1810) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v1810 + 8), 1uLL, memory_order_relaxed);
            }
            v1809 += 2;
            if ((void *)((char *)v1809 - *(void *)v1808) == (void *)4096)
            {
              v1811 = (void *)*((void *)v1808 + 1);
              v1808 += 8;
              v1809 = v1811;
            }
            ++v2616[23].i64[1];
            v1807 += 16;
          }
          while (v1807 != v1599);
          v1599 = v1806;
        }
        unint64_t v1600 = v1805;
        if (!v1805) {
          goto LABEL_2274;
        }
      }
      v1812 = std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator-[abi:ne180100](v1803, v1804, v1600);
      v1814 = v1812;
      uint64_t v1815 = v1813;
      if (v1804 != v1813)
      {
        v1816 = v1812;
        uint64_t v1817 = v1813;
        do
        {
          *(_OWORD *)v1809 = *(_OWORD *)v1817;
          v1809 += 2;
          *(void *)uint64_t v1817 = 0;
          *(void *)(v1817 + 8) = 0;
          if ((void *)((char *)v1809 - *(void *)v1808) == (void *)4096)
          {
            v1818 = (void *)*((void *)v1808 + 1);
            v1808 += 8;
            v1809 = v1818;
          }
          v1817 += 16;
          if (v1817 - *v1816 == 4096)
          {
            uint64_t v1819 = v1816[1];
            ++v1816;
            uint64_t v1817 = v1819;
          }
          ++v2616[23].i64[1];
        }
        while (v1817 != v1804);
      }
      if (v1600 < v1805)
      {
        v1820 = std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator-[abi:ne180100](v1803, v1804, v1805);
        uint64_t v1822 = v1821;
        if (v1820 == v1814)
        {
          uint64_t v1831 = v1815;
          v1828 = v1803;
          uint64_t v1829 = v1804;
        }
        else
        {
          v1823 = v1820;
          uint64_t v1826 = *v1814;
          v1825 = v1814 - 1;
          uint64_t v1824 = v1826;
          uint64_t v1827 = v1815;
          v1828 = v1803;
          uint64_t v1829 = v1804;
          while (1)
          {
            std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>(&v2695, v1824, v1827, v1828, v1829);
            v1828 = (char *)*((void *)&v2695 + 1);
            uint64_t v1829 = v2696;
            if (v1825 == v1823) {
              break;
            }
            uint64_t v1830 = *v1825--;
            uint64_t v1824 = v1830;
            uint64_t v1827 = v1830 + 4096;
          }
          uint64_t v1831 = *v1823 + 4096;
          uint64_t v1821 = v1822;
        }
        std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>(&v2695, v1821, v1831, v1828, v1829);
        uint64_t v1804 = v2696;
        v1803 = (char *)*((void *)&v2695 + 1);
      }
      if (v1598 != v1599)
      {
        uint64_t v1832 = *(void *)v1803;
        while (1)
        {
          uint64_t v1833 = v1804 - v1832;
          if ((v1599 - v1598) >> 4 >= v1833 >> 4) {
            uint64_t v1834 = v1833 >> 4;
          }
          else {
            uint64_t v1834 = (v1599 - v1598) >> 4;
          }
          if (v1834)
          {
            v1835 = (std::__shared_weak_count **)(v1599 - 8);
            uint64_t v1836 = -16 * v1834;
            v1837 = (std::__shared_weak_count **)(v1804 - 8);
            do
            {
              v1839 = *(v1835 - 1);
              v1838 = *v1835;
              if (*v1835) {
                atomic_fetch_add_explicit(&v1838->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              v1840 = *v1837;
              *(v1837 - 1) = v1839;
              *v1837 = v1838;
              if (v1840) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v1840);
              }
              v1835 -= 2;
              v1837 -= 2;
              v1836 += 16;
            }
            while (v1836);
          }
          v1599 -= 16 * v1834;
          if (v1599 == v1598) {
            break;
          }
          uint64_t v1841 = *((void *)v1803 - 1);
          v1803 -= 8;
          uint64_t v1832 = v1841;
          uint64_t v1804 = v1841 + 4096;
        }
      }
      goto LABEL_2274;
    }
    if (v1593 == v1594) {
      unint64_t v1623 = v1622 + 1;
    }
    else {
      unint64_t v1623 = v1622;
    }
    if ((_BYTE)v1623) {
      unint64_t v1624 = (v1623 >> 8) + 1;
    }
    else {
      unint64_t v1624 = v1623 >> 8;
    }
    if (v1624 >= v1601) {
      unint64_t v1625 = v1601;
    }
    else {
      unint64_t v1625 = v1624;
    }
    unint64_t v2643 = v1604;
    if (v1624 <= v1601)
    {
      v2616[23].i64[0] = v1589 - (v1625 << 8);
      if (v1625)
      {
        v1633 = (uint64_t *)v2616;
        do
        {
          v1634 = (void *)v1633[43];
          uint64_t v1637 = *v1634;
          v1635 = (char *)(v1634 + 1);
          uint64_t v1636 = v1637;
          v1633[43] = (uint64_t)v1635;
          if (v1593 == (char *)v1633[45])
          {
            uint64_t v1638 = (uint64_t)&v1635[-v1605->i64[0]];
            if ((unint64_t)v1635 <= v1605->i64[0])
            {
              if (v1593 == (char *)v1605->i64[0]) {
                unint64_t v1645 = 1;
              }
              else {
                unint64_t v1645 = (uint64_t)&v1593[-v1605->i64[0]] >> 2;
              }
              v1646 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1645);
              v1648 = &v1646[8 * (v1645 >> 2)];
              v1649 = (uint64_t *)v2616[21].i64[1];
              v1593 = v1648;
              uint64_t v1650 = v2616[22].i64[0] - (void)v1649;
              if (v1650)
              {
                v1593 = &v1648[v1650 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v1651 = 8 * (v1650 >> 3);
                v1652 = &v1646[8 * (v1645 >> 2)];
                do
                {
                  uint64_t v1653 = *v1649++;
                  *(void *)v1652 = v1653;
                  v1652 += 8;
                  v1651 -= 8;
                }
                while (v1651);
              }
              v1633 = (uint64_t *)v2616;
              v1654 = (void *)v2616[21].i64[0];
              v2616[21].i64[0] = (uint64_t)v1646;
              v2616[21].i64[1] = (uint64_t)v1648;
              v2616[22].i64[0] = (uint64_t)v1593;
              v2616[22].i64[1] = (uint64_t)&v1646[8 * v1647];
              if (v1654)
              {
                operator delete(v1654);
                v1593 = (char *)v2616[22].i64[0];
              }
            }
            else
            {
              uint64_t v1639 = v1638 >> 3;
              BOOL v381 = v1638 >> 3 < -1;
              uint64_t v1640 = (v1638 >> 3) + 2;
              if (v381) {
                uint64_t v1641 = v1640;
              }
              else {
                uint64_t v1641 = v1639 + 1;
              }
              v1642 = &v1635[-8 * (v1641 >> 1)];
              int64_t v1643 = v1593 - v1635;
              v1633 = (uint64_t *)v2616;
              if (v1593 != v1635)
              {
                memmove(&v1635[-8 * (v1641 >> 1)], v1635, v1593 - v1635);
                v1593 = (char *)v2616[21].i64[1];
              }
              v1644 = &v1593[-8 * (v1641 >> 1)];
              v1593 = &v1642[v1643];
              v2616[21].i64[1] = (uint64_t)v1644;
              v2616[22].i64[0] = (uint64_t)&v1642[v1643];
            }
          }
          else
          {
            v1633 = (uint64_t *)v2616;
          }
          *(void *)v1593 = v1636;
          v1593 = (char *)(v1633[44] + 8);
          v1633[44] = (uint64_t)v1593;
          --v1625;
        }
        while (v1625);
        goto LABEL_2226;
      }
    }
    else
    {
      unint64_t v1626 = v1624 - v1625;
      uint64_t v1627 = v2616[22].i64[1] - v2616[21].i64[0];
      if (v1624 - v1625 <= (v1627 >> 3) - (v1620 >> 3))
      {
        if (v1626)
        {
          while (v2616[22].i64[1] != v2616[22].i64[0])
          {
            *(void *)&long long v2695 = operator new(0x1000uLL);
            std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(v1605, &v2695);
            if (!--v1626)
            {
              v1593 = (char *)v2616[22].i64[0];
              goto LABEL_2203;
            }
          }
          for (uint64_t i5 = 0; i5 != v1626; ++i5)
          {
            *(void *)&long long v2695 = operator new(0x1000uLL);
            std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v1605, &v2695);
            v1593 = (char *)v2616[22].i64[0];
            if (&v1593[-v2616[21].i64[1]] == (char *)8) {
              uint64_t v1779 = 255;
            }
            else {
              uint64_t v1779 = 256;
            }
            uint64_t v1780 = v1779 + v2616[23].i64[0];
            v2616[23].i64[0] = v1780;
          }
          v1625 += v1626;
          v1781 = v2616;
        }
        else
        {
LABEL_2203:
          v1781 = v2616;
          uint64_t v1780 = v2616[23].i64[0];
        }
        v1781[23].i64[0] = v1780 - (v1625 << 8);
        if (v1625)
        {
          v1633 = (uint64_t *)v2616;
          do
          {
            v1782 = (void *)v1633[43];
            uint64_t v1785 = *v1782;
            v1783 = (char *)(v1782 + 1);
            uint64_t v1784 = v1785;
            v1633[43] = (uint64_t)v1783;
            if (v1593 == (char *)v1633[45])
            {
              uint64_t v1786 = (uint64_t)&v1783[-v1605->i64[0]];
              if ((unint64_t)v1783 <= v1605->i64[0])
              {
                if (v1593 == (char *)v1605->i64[0]) {
                  unint64_t v1793 = 1;
                }
                else {
                  unint64_t v1793 = (uint64_t)&v1593[-v1605->i64[0]] >> 2;
                }
                v1794 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1793);
                v1796 = &v1794[8 * (v1793 >> 2)];
                v1797 = (uint64_t *)v2616[21].i64[1];
                v1593 = v1796;
                uint64_t v1798 = v2616[22].i64[0] - (void)v1797;
                if (v1798)
                {
                  v1593 = &v1796[v1798 & 0xFFFFFFFFFFFFFFF8];
                  uint64_t v1799 = 8 * (v1798 >> 3);
                  v1800 = &v1794[8 * (v1793 >> 2)];
                  do
                  {
                    uint64_t v1801 = *v1797++;
                    *(void *)v1800 = v1801;
                    v1800 += 8;
                    v1799 -= 8;
                  }
                  while (v1799);
                }
                v1633 = (uint64_t *)v2616;
                v1802 = (void *)v2616[21].i64[0];
                v2616[21].i64[0] = (uint64_t)v1794;
                v2616[21].i64[1] = (uint64_t)v1796;
                v2616[22].i64[0] = (uint64_t)v1593;
                v2616[22].i64[1] = (uint64_t)&v1794[8 * v1795];
                if (v1802)
                {
                  operator delete(v1802);
                  v1593 = (char *)v2616[22].i64[0];
                }
              }
              else
              {
                uint64_t v1787 = v1786 >> 3;
                BOOL v381 = v1786 >> 3 < -1;
                uint64_t v1788 = (v1786 >> 3) + 2;
                if (v381) {
                  uint64_t v1789 = v1788;
                }
                else {
                  uint64_t v1789 = v1787 + 1;
                }
                v1790 = &v1783[-8 * (v1789 >> 1)];
                int64_t v1791 = v1593 - v1783;
                v1633 = (uint64_t *)v2616;
                if (v1593 != v1783)
                {
                  memmove(&v1783[-8 * (v1789 >> 1)], v1783, v1593 - v1783);
                  v1593 = (char *)v2616[21].i64[1];
                }
                v1792 = &v1593[-8 * (v1789 >> 1)];
                v1593 = &v1790[v1791];
                v2616[21].i64[1] = (uint64_t)v1792;
                v2616[22].i64[0] = (uint64_t)&v1790[v1791];
              }
            }
            else
            {
              v1633 = (uint64_t *)v2616;
            }
            *(void *)v1593 = v1784;
            v1593 = (char *)(v1633[44] + 8);
            v1633[44] = (uint64_t)v1593;
            --v1625;
          }
          while (v1625);
          goto LABEL_2226;
        }
      }
      else
      {
        uint64_t v1628 = v1620 >> 3;
        unint64_t v1629 = v1627 >> 2;
        if (v1629 <= v1626 + (v1620 >> 3)) {
          v1630 = (char *)(v1626 + (v1620 >> 3));
        }
        else {
          v1630 = (char *)v1629;
        }
        v2697 = &v2616[22].i8[8];
        if (v1630) {
          v1630 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>((unint64_t)v1630);
        }
        else {
          uint64_t v1631 = 0;
        }
        *(void *)&long long v2695 = v1630;
        *((void *)&v2695 + 1) = &v1630[8 * (v1628 - v1625)];
        *(void *)&long long v2696 = *((void *)&v2695 + 1);
        *((void *)&v2696 + 1) = &v1630[8 * v1631];
        v1697 = v2616;
        do
        {
          *(void *)&long long v2667 = operator new(0x1000uLL);
          std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(&v2695, &v2667);
          --v1626;
        }
        while (v1626);
        unint64_t v2629 = v1625 << 8;
        v1698 = (char *)v2696;
        if (v1625)
        {
          v1699 = (void *)v2616[21].i64[1];
          unint64_t v2659 = v1600;
          do
          {
            if (v1698 == *((char **)&v2696 + 1))
            {
              v1700 = (char *)*((void *)&v2695 + 1);
              v1701 = (void *)v2695;
              if (*((void *)&v2695 + 1) <= (unint64_t)v2695)
              {
                if (v1698 == (char *)v2695) {
                  unint64_t v1708 = 1;
                }
                else {
                  unint64_t v1708 = (uint64_t)&v1698[-v2695] >> 2;
                }
                v1709 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1708);
                uint64_t v1711 = v1698 - v1700;
                BOOL v417 = v1698 == v1700;
                v1698 = &v1709[8 * (v1708 >> 2)];
                if (!v417)
                {
                  v1698 = &v1709[8 * (v1708 >> 2) + (v1711 & 0xFFFFFFFFFFFFFFF8)];
                  uint64_t v1712 = 8 * (v1711 >> 3);
                  v1713 = &v1709[8 * (v1708 >> 2)];
                  do
                  {
                    uint64_t v1714 = *(void *)v1700;
                    v1700 += 8;
                    *(void *)v1713 = v1714;
                    v1713 += 8;
                    v1712 -= 8;
                  }
                  while (v1712);
                }
                *(void *)&long long v2695 = v1709;
                *((void *)&v2695 + 1) = &v1709[8 * (v1708 >> 2)];
                *(void *)&long long v2696 = v1698;
                *((void *)&v2696 + 1) = &v1709[8 * v1710];
                if (v1701) {
                  operator delete(v1701);
                }
                v1697 = v2616;
              }
              else
              {
                unint64_t v1702 = v1604;
                uint64_t v1703 = (uint64_t)(*((void *)&v2695 + 1) - v2695) >> 3;
                if (v1703 >= -1) {
                  uint64_t v1704 = v1703 + 1;
                }
                else {
                  uint64_t v1704 = v1703 + 2;
                }
                uint64_t v1705 = *((void *)&v2695 + 1) - 8 * (v1704 >> 1);
                v1706 = &v1698[-*((void *)&v2695 + 1)];
                if (v1698 != *((char **)&v2695 + 1))
                {
                  memmove((void *)(*((void *)&v2695 + 1) - 8 * (v1704 >> 1)), *((const void **)&v2695 + 1), (size_t)&v1698[-*((void *)&v2695 + 1)]);
                  v1698 = v1700;
                }
                v1707 = &v1698[-8 * (v1704 >> 1)];
                v1698 = &v1706[v1705];
                *((void *)&v2695 + 1) = v1707;
                *(void *)&long long v2696 = &v1706[v1705];
                v1697 = v2616;
                unint64_t v1604 = v1702;
                unint64_t v1600 = v2659;
              }
            }
            *(void *)v1698 = *v1699;
            v1698 = (char *)(v2696 + 8);
            *(void *)&long long v2696 = v2696 + 8;
            v1699 = (void *)(v1697[21].i64[1] + 8);
            v1697[21].i64[1] = (uint64_t)v1699;
            --v1625;
          }
          while (v1625);
        }
        uint64_t v1715 = v1697[22].i64[0];
        v1716 = (char *)*((void *)&v2695 + 1);
        v1717 = (char *)v2695;
        v1718 = (char *)*((void *)&v2696 + 1);
        while (v1715 != v2616[21].i64[1])
        {
          if (v1716 == v1717)
          {
            if (v1698 >= v1718)
            {
              if (v1718 == v1717) {
                unint64_t v1723 = 1;
              }
              else {
                unint64_t v1723 = (v1718 - v1717) >> 2;
              }
              v1724 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1723);
              v1726 = v1724;
              v1716 = &v1724[(2 * v1723 + 6) & 0xFFFFFFFFFFFFFFF8];
              uint64_t v1727 = v1698 - v1717;
              BOOL v417 = v1698 == v1717;
              v1698 = v1716;
              if (!v417)
              {
                v1698 = &v1716[v1727 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v1728 = 8 * (v1727 >> 3);
                v1729 = v1716;
                v1730 = v1717;
                do
                {
                  uint64_t v1731 = *(void *)v1730;
                  v1730 += 8;
                  *(void *)v1729 = v1731;
                  v1729 += 8;
                  v1728 -= 8;
                }
                while (v1728);
              }
              v1718 = &v1724[8 * v1725];
              if (v1717) {
                operator delete(v1717);
              }
              v1717 = v1726;
            }
            else
            {
              uint64_t v1719 = (v1718 - v1698) >> 3;
              if (v1719 >= -1) {
                unint64_t v1720 = v1719 + 1;
              }
              else {
                unint64_t v1720 = v1719 + 2;
              }
              v1721 = &v1698[8 * (v1720 >> 1)];
              v1716 = &v1721[-(v1698 - v1717)];
              size_t v1722 = v1698 - v1717;
              BOOL v417 = v1698 == v1717;
              v1698 = v1721;
              if (!v417) {
                memmove(v1716, v1717, v1722);
              }
            }
          }
          uint64_t v1732 = *(void *)(v1715 - 8);
          v1715 -= 8;
          *((void *)v1716 - 1) = v1732;
          v1716 -= 8;
        }
        *(void *)&long long v2695 = v1717;
        *((void *)&v2695 + 1) = v1716;
        *(void *)&long long v2696 = v1698;
        *((void *)&v2696 + 1) = v1718;
        long long v1735 = v2695;
        int64x2_t v1734 = (int64x2_t)v2696;
        *(void *)&long long v2695 = v2616[21].i64[0];
        v1733 = (void *)v2695;
        *((void *)&v2695 + 1) = v1715;
        v2616[21] = (int64x2_t)v1735;
        v2616[22] = v1734;
        v2616[23].i64[0] -= v2629;
        if (v1733)
        {
          operator delete(v1733);
          v1593 = (char *)v2616[22].i64[0];
        }
        else
        {
          v1593 = (char *)v1734.i64[0];
        }
      }
    }
    v1633 = (uint64_t *)v2616;
LABEL_2226:
    uint64_t v1590 = v1633[47];
    v1594 = (char *)v1633[43];
    unint64_t v1591 = v1633[46] + v1590;
    unint64_t v1592 = v1591 >> 8;
    unint64_t v1604 = v2643;
    goto LABEL_2227;
  }
  unint64_t v1606 = v1600 - v1589;
  if (v1600 > v1589)
  {
    uint64_t v1607 = 32 * v1596 - 1;
    uint64_t v1608 = v1593 - v1594;
    if (v1593 == v1594)
    {
      uint64_t v1607 = 0;
      ++v1606;
    }
    if ((_BYTE)v1606) {
      unint64_t v1609 = (v1606 >> 8) + 1;
    }
    else {
      unint64_t v1609 = v1606 >> 8;
    }
    unint64_t v1610 = v1607 - v1591;
    if (v1609 >= v1610 >> 8) {
      unint64_t v1611 = v1610 >> 8;
    }
    else {
      unint64_t v1611 = v1609;
    }
    if (v1609 <= v1610 >> 8)
    {
      for (v2616[23].i64[0] = v1589 + (v1611 << 8); v1611; --v1611)
      {
        uint64_t v1632 = v2616[22].i64[0];
        *(void *)&long long v2695 = *(void *)(v1632 - 8);
        v2616[22].i64[0] = v1632 - 8;
        std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v1605, &v2695);
      }
      goto LABEL_2147;
    }
    unint64_t v1612 = v1609 - v1611;
    uint64_t v1613 = v2616[21].i64[0];
    uint64_t v1614 = v2616[22].i64[1] - v1613;
    if (v1609 - v1611 > (v1614 >> 3) - (v1608 >> 3))
    {
      uint64_t v1615 = v1608 >> 3;
      BOOL v1616 = v1593 == v1594;
      if (v1614 >> 2 <= v1612 + v1615) {
        unint64_t v1617 = v1612 + v1615;
      }
      else {
        unint64_t v1617 = v1614 >> 2;
      }
      v2697 = &v2616[22].i8[8];
      if (v1617) {
        unint64_t v1617 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1617);
      }
      else {
        uint64_t v1618 = 0;
      }
      unint64_t v1660 = (v1609 << 8) - v1616;
      *(void *)&long long v2695 = v1617;
      *((void *)&v2695 + 1) = v1617;
      *(void *)&long long v2696 = v1617;
      *((void *)&v2696 + 1) = v1617 + 8 * v1618;
      v1661 = (uint64_t *)v2616;
      do
      {
        *(void *)&long long v2667 = operator new(0x1000uLL);
        std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(&v2695, &v2667);
        --v1612;
      }
      while (v1612);
      unint64_t v2628 = v1660;
      uint64_t v1662 = v2616[22].i64[0];
      v1663 = (char *)v2696;
      if (v1611)
      {
        unint64_t v2658 = v1600;
        do
        {
          if (v1663 == *((char **)&v2696 + 1))
          {
            v1664 = (char *)*((void *)&v2695 + 1);
            v1665 = (void *)v2695;
            if (*((void *)&v2695 + 1) <= (unint64_t)v2695)
            {
              if (v1663 == (char *)v2695) {
                unint64_t v1672 = 1;
              }
              else {
                unint64_t v1672 = (uint64_t)&v1663[-v2695] >> 2;
              }
              v1673 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1672);
              uint64_t v1675 = v1663 - v1664;
              BOOL v417 = v1663 == v1664;
              v1663 = &v1673[8 * (v1672 >> 2)];
              if (!v417)
              {
                v1663 = &v1673[8 * (v1672 >> 2) + (v1675 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v1676 = 8 * (v1675 >> 3);
                v1677 = &v1673[8 * (v1672 >> 2)];
                do
                {
                  uint64_t v1678 = *(void *)v1664;
                  v1664 += 8;
                  *(void *)v1677 = v1678;
                  v1677 += 8;
                  v1676 -= 8;
                }
                while (v1676);
              }
              *(void *)&long long v2695 = v1673;
              *((void *)&v2695 + 1) = &v1673[8 * (v1672 >> 2)];
              *(void *)&long long v2696 = v1663;
              *((void *)&v2696 + 1) = &v1673[8 * v1674];
              if (v1665) {
                operator delete(v1665);
              }
              v1661 = (uint64_t *)v2616;
            }
            else
            {
              unint64_t v1666 = v1604;
              uint64_t v1667 = (uint64_t)(*((void *)&v2695 + 1) - v2695) >> 3;
              if (v1667 >= -1) {
                uint64_t v1668 = v1667 + 1;
              }
              else {
                uint64_t v1668 = v1667 + 2;
              }
              uint64_t v1669 = *((void *)&v2695 + 1) - 8 * (v1668 >> 1);
              v1670 = &v1663[-*((void *)&v2695 + 1)];
              if (v1663 != *((char **)&v2695 + 1))
              {
                memmove((void *)(*((void *)&v2695 + 1) - 8 * (v1668 >> 1)), *((const void **)&v2695 + 1), (size_t)&v1663[-*((void *)&v2695 + 1)]);
                v1663 = v1664;
              }
              v1671 = &v1663[-8 * (v1668 >> 1)];
              v1663 = &v1670[v1669];
              *((void *)&v2695 + 1) = v1671;
              *(void *)&long long v2696 = &v1670[v1669];
              v1661 = (uint64_t *)v2616;
              unint64_t v1604 = v1666;
              unint64_t v1600 = v2658;
            }
          }
          *(void *)v1663 = *(void *)(v1662 - 8);
          v1663 = (char *)(v2696 + 8);
          *(void *)&long long v2696 = v2696 + 8;
          uint64_t v1662 = v1661[44] - 8;
          v1661[44] = v1662;
          --v1611;
        }
        while (v1611);
      }
      v1679 = (uint64_t *)v1661[43];
      if (v1679 == (uint64_t *)v1662)
      {
        v1679 = (uint64_t *)v1662;
      }
      else
      {
        do
        {
          if (v1663 == *((char **)&v2696 + 1))
          {
            v1680 = (char *)*((void *)&v2695 + 1);
            v1681 = (void *)v2695;
            if (*((void *)&v2695 + 1) <= (unint64_t)v2695)
            {
              if (v1663 == (char *)v2695) {
                unint64_t v1689 = 1;
              }
              else {
                unint64_t v1689 = (uint64_t)&v1663[-v2695] >> 2;
              }
              v1690 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1689);
              uint64_t v1692 = v1663 - v1680;
              BOOL v417 = v1663 == v1680;
              v1663 = &v1690[8 * (v1689 >> 2)];
              if (!v417)
              {
                v1663 = &v1690[8 * (v1689 >> 2) + (v1692 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v1693 = 8 * (v1692 >> 3);
                v1694 = &v1690[8 * (v1689 >> 2)];
                do
                {
                  uint64_t v1695 = *(void *)v1680;
                  v1680 += 8;
                  *(void *)v1694 = v1695;
                  v1694 += 8;
                  v1693 -= 8;
                }
                while (v1693);
              }
              *(void *)&long long v2695 = v1690;
              *((void *)&v2695 + 1) = &v1690[8 * (v1689 >> 2)];
              *(void *)&long long v2696 = v1663;
              *((void *)&v2696 + 1) = &v1690[8 * v1691];
              if (v1681) {
                operator delete(v1681);
              }
              v1661 = (uint64_t *)v2616;
            }
            else
            {
              unint64_t v1682 = v1600;
              unint64_t v1683 = v1604;
              uint64_t v1684 = (uint64_t)(*((void *)&v2695 + 1) - v2695) >> 3;
              if (v1684 >= -1) {
                uint64_t v1685 = v1684 + 1;
              }
              else {
                uint64_t v1685 = v1684 + 2;
              }
              uint64_t v1686 = *((void *)&v2695 + 1) - 8 * (v1685 >> 1);
              v1687 = &v1663[-*((void *)&v2695 + 1)];
              if (v1663 != *((char **)&v2695 + 1))
              {
                memmove((void *)(*((void *)&v2695 + 1) - 8 * (v1685 >> 1)), *((const void **)&v2695 + 1), (size_t)&v1663[-*((void *)&v2695 + 1)]);
                v1663 = v1680;
              }
              v1688 = &v1663[-8 * (v1685 >> 1)];
              v1663 = &v1687[v1686];
              *((void *)&v2695 + 1) = v1688;
              *(void *)&long long v2696 = &v1687[v1686];
              v1661 = (uint64_t *)v2616;
              unint64_t v1604 = v1683;
              unint64_t v1600 = v1682;
            }
          }
          uint64_t v1696 = *v1679++;
          *(void *)v1663 = v1696;
          v1663 = (char *)(v2696 + 8);
          *(void *)&long long v2696 = v2696 + 8;
        }
        while (v1679 != (uint64_t *)v1661[44]);
        uint64_t v1662 = v1661[43];
      }
      v1736 = (void *)v1661[42];
      *((_OWORD *)v1661 + 21) = v2695;
      *(void *)&long long v2695 = v1736;
      *((void *)&v2695 + 1) = v1662;
      *(void *)&long long v2696 = v1679;
      uint64_t v1737 = *((void *)&v2696 + 1);
      v1661[44] = (uint64_t)v1663;
      v1661[45] = v1737;
      v1661[46] += v2628;
      if (v1736) {
        operator delete(v1736);
      }
LABEL_2147:
      unint64_t v1589 = v2616[23].u64[0];
      v1594 = (char *)v2616[21].i64[1];
      v1593 = (char *)v2616[22].i64[0];
      unint64_t v1601 = v1589 >> 8;
      goto LABEL_2148;
    }
    if (v1612)
    {
      if (v1594 == (char *)v1613)
      {
LABEL_2046:
        unint64_t v1657 = v1612;
        do
        {
          *(void *)&long long v2695 = operator new(0x1000uLL);
          std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(v1605, &v2695);
          --v1657;
        }
        while (v1657);
        v1611 += v1612;
        v1658 = v2616;
        unint64_t v1589 = v2616[23].u64[0];
LABEL_2054:
        for (v1658[23].i64[0] = v1589 + (v1611 << 8); v1611; --v1611)
        {
          uint64_t v1659 = v2616[22].i64[0];
          *(void *)&long long v2695 = *(void *)(v1659 - 8);
          v2616[22].i64[0] = v1659 - 8;
          std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v1605, &v2695);
        }
        goto LABEL_2147;
      }
      while (1)
      {
        *(void *)&long long v2695 = operator new(0x1000uLL);
        std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v1605, &v2695);
        uint64_t v1655 = v2616[21].i64[1];
        uint64_t v1656 = v2616[22].i64[0] - v1655 == 8 ? 255 : 256;
        unint64_t v1589 = v1656 + v2616[23].i64[0];
        v2616[23].i64[0] = v1589;
        if (!--v1612) {
          break;
        }
        if (v1655 == v1605->i64[0]) {
          goto LABEL_2046;
        }
      }
    }
    v1658 = v2616;
    goto LABEL_2054;
  }
LABEL_2148:
  v1738 = &v1594[8 * v1601];
  if (v1593 == v1594) {
    v1739 = 0;
  }
  else {
    v1739 = (long long *)(*(void *)v1738 + 16 * v1589);
  }
  if (v1600 <= v1604)
  {
    v1743 = v1739;
    v1742 = &v1594[8 * v1601];
    if (!v1600) {
      goto LABEL_2274;
    }
    goto LABEL_2166;
  }
  v1740 = &v1598[16 * (v1600 - v1604)];
  if (v1604 < v1600 >> 1) {
    v1740 = &v1599[-16 * v1604];
  }
  if (v1740 == v1598)
  {
    v1743 = v1739;
    v1742 = &v1594[8 * v1601];
  }
  else
  {
    v1741 = v1740;
    v1742 = &v1594[8 * v1601];
    v1743 = v1739;
    do
    {
      if (v1743 == *(long long **)v1742)
      {
        uint64_t v1744 = *((void *)v1742 - 1);
        v1742 -= 8;
        v1743 = (long long *)(v1744 + 4096);
      }
      uint64_t v1745 = *((void *)v1741 - 2);
      v1741 -= 16;
      *((void *)v1743-- - 2) = v1745;
      uint64_t v1746 = *((void *)v1741 + 1);
      *((void *)v1743 + 1) = v1746;
      if (v1746)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v1746 + 8), 1uLL, memory_order_relaxed);
        unint64_t v1589 = v2616[23].u64[0];
      }
      --v1589;
      uint64_t v1747 = v2616[23].i64[1] + 1;
      v2616[23].i64[0] = v1589;
      v2616[23].i64[1] = v1747;
    }
    while (v1741 != v1598);
    v1598 = v1740;
  }
  unint64_t v1600 = v1604;
  if (v1604)
  {
LABEL_2166:
    v1748 = (long long **)std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator+[abi:ne180100](v1738, (uint64_t)v1739, v1600);
    v1750 = v1748;
    v1751 = v1749;
    if (v1739 != v1749)
    {
      v1752 = v1748;
      v1753 = v1749;
      do
      {
        if (v1743 == *(long long **)v1742)
        {
          uint64_t v1754 = *((void *)v1742 - 1);
          v1742 -= 8;
          v1743 = (long long *)(v1754 + 4096);
        }
        if (v1753 == *v1752)
        {
          uint64_t v1755 = (uint64_t)*--v1752;
          v1753 = (long long *)(v1755 + 4096);
        }
        long long v1756 = *--v1753;
        *--v1743 = v1756;
        *(void *)v1753 = 0;
        *((void *)v1753 + 1) = 0;
        v2616[23] = vaddq_s64(v2616[23], (int64x2_t)xmmword_1901C6000);
      }
      while (v1753 != v1739);
    }
    if (v1600 < v1604)
    {
      v1757 = (long long **)std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator+[abi:ne180100](v1738, (uint64_t)v1739, v1604);
      v1759 = v1758;
      if (v1750 == v1757)
      {
        v1768 = v1751;
        v1769 = v1759;
        v1765 = v1738;
        uint64_t v1766 = (uint64_t)v1739;
      }
      else
      {
        v1760 = v1757;
        v1762 = *v1750;
        v1761 = v1750 + 1;
        v1763 = v1762 + 256;
        v1764 = v1751;
        v1765 = v1738;
        uint64_t v1766 = (uint64_t)v1739;
        while (1)
        {
          std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>(&v2695, v1764, v1763, v1765, v1766);
          v1765 = (char *)*((void *)&v2695 + 1);
          uint64_t v1766 = v2696;
          if (v1761 == v1760) {
            break;
          }
          v1767 = *v1761++;
          v1764 = v1767;
          v1763 = v1767 + 256;
        }
        v1768 = *v1760;
        v1769 = v1759;
      }
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>(&v2695, v1768, v1769, v1765, v1766);
      v1739 = (long long *)v2696;
      v1738 = (char *)*((void *)&v2695 + 1);
    }
    if (v1598 != v1599)
    {
      v1770 = *(char **)v1738;
      while (1)
      {
        uint64_t v1771 = v1770 - (char *)v1739 + 4096;
        if ((v1599 - v1598) >> 4 >= v1771 >> 4) {
          uint64_t v1772 = v1771 >> 4;
        }
        else {
          uint64_t v1772 = (v1599 - v1598) >> 4;
        }
        if (v1772)
        {
          v1773 = &v1598[16 * v1772];
          do
          {
            uint64_t v1775 = *(void *)v1598;
            uint64_t v1774 = *((void *)v1598 + 1);
            if (v1774) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v1774 + 8), 1uLL, memory_order_relaxed);
            }
            v1776 = (std::__shared_weak_count *)*((void *)v1739 + 1);
            *(void *)v1739 = v1775;
            *((void *)v1739 + 1) = v1774;
            if (v1776) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v1776);
            }
            v1598 += 16;
            ++v1739;
          }
          while (v1598 != v1773);
          v1598 = v1773;
        }
        if (v1598 == v1599) {
          break;
        }
        v1777 = (char *)*((void *)v1738 + 1);
        v1738 += 8;
        v1770 = v1777;
        v1739 = (long long *)v1777;
      }
    }
  }
LABEL_2274:
  atomic_fetch_add(v2616[24].i64, (v2678 - v2677) >> 4);
  unint64_t v1842 = v2616[27].u64[0];
  uint64_t v1843 = v2616[27].i64[1];
  unint64_t v1844 = v1842 + v1843;
  unint64_t v1845 = (v1842 + v1843) >> 8;
  v1847 = (char *)v2616[25].i64[1];
  v1846 = (char *)v2616[26].i64[0];
  v1848 = &v1847[8 * v1845];
  int64_t v1849 = v1846 - v1847;
  if (v1846 == v1847)
  {
    uint64_t v1850 = 0;
    uint64_t v1856 = 0;
    v1851 = v2674;
    v1852 = v2675;
    unint64_t v1853 = (v2675 - v2674) >> 4;
    unint64_t v1854 = v1842 >> 8;
    v1855 = &v1847[8 * (v1842 >> 8)];
  }
  else
  {
    uint64_t v1850 = *(void *)v1848 + 16 * v1844;
    v1851 = v2674;
    v1852 = v2675;
    unint64_t v1853 = (v2675 - v2674) >> 4;
    unint64_t v1854 = v1842 >> 8;
    v1855 = &v1847[8 * (v1842 >> 8)];
    uint64_t v1856 = *(void *)v1855 + 16 * v1842;
  }
  if (v1850 == v1856) {
    unint64_t v1857 = 0;
  }
  else {
    unint64_t v1857 = ((v1850 - *(void *)v1848) >> 4) + 32 * (v1848 - v1855) - ((v1856 - *(void *)v1855) >> 4);
  }
  v1858 = v2616 + 25;
  if (v1857 >= v1843 - v1857)
  {
    uint64_t v1872 = 32 * v1849 - 1;
    uint64_t v1873 = v1846 - v1847;
    if (v1846 == v1847) {
      uint64_t v1872 = 0;
    }
    unint64_t v1874 = v1872 - v1844;
    BOOL v363 = v1853 >= v1874;
    unint64_t v1875 = v1853 - v1874;
    if (v1875 == 0 || !v363)
    {
LABEL_2529:
      v2056 = &v1847[8 * v1845];
      if (v1846 == v1847) {
        uint64_t v2057 = 0;
      }
      else {
        uint64_t v2057 = *(void *)v2056 + 16 * v1844;
      }
      unint64_t v2058 = v1843 - v1857;
      if (v2058 >= v1853)
      {
        v2062 = (void *)v2057;
        v2061 = &v1847[8 * v1845];
        if (!v1853) {
          goto LABEL_2576;
        }
      }
      else
      {
        v2059 = &v1852[16 * (v2058 - v1853)];
        if (v2058 < v1853 >> 1) {
          v2059 = &v1851[16 * v2058];
        }
        if (v2059 == v1852)
        {
          v2062 = (void *)v2057;
          v2061 = &v1847[8 * v1845];
        }
        else
        {
          v2060 = v2059;
          v2061 = v2056;
          v2062 = (void *)v2057;
          do
          {
            void *v2062 = *(void *)v2060;
            uint64_t v2063 = *((void *)v2060 + 1);
            v2062[1] = v2063;
            if (v2063) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v2063 + 8), 1uLL, memory_order_relaxed);
            }
            v2062 += 2;
            if ((void *)((char *)v2062 - *(void *)v2061) == (void *)4096)
            {
              v2064 = (void *)*((void *)v2061 + 1);
              v2061 += 8;
              v2062 = v2064;
            }
            ++v2616[27].i64[1];
            v2060 += 16;
          }
          while (v2060 != v1852);
          v1852 = v2059;
        }
        unint64_t v1853 = v2058;
        if (!v2058) {
          goto LABEL_2576;
        }
      }
      v2065 = std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator-[abi:ne180100](v2056, v2057, v1853);
      v2067 = v2065;
      uint64_t v2068 = v2066;
      if (v2057 != v2066)
      {
        v2069 = v2065;
        uint64_t v2070 = v2066;
        do
        {
          *(_OWORD *)v2062 = *(_OWORD *)v2070;
          v2062 += 2;
          *(void *)uint64_t v2070 = 0;
          *(void *)(v2070 + 8) = 0;
          if ((void *)((char *)v2062 - *(void *)v2061) == (void *)4096)
          {
            v2071 = (void *)*((void *)v2061 + 1);
            v2061 += 8;
            v2062 = v2071;
          }
          v2070 += 16;
          if (v2070 - *v2069 == 4096)
          {
            uint64_t v2072 = v2069[1];
            ++v2069;
            uint64_t v2070 = v2072;
          }
          ++v2616[27].i64[1];
        }
        while (v2070 != v2057);
      }
      if (v1853 < v2058)
      {
        v2073 = std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator-[abi:ne180100](v2056, v2057, v2058);
        uint64_t v2075 = v2074;
        if (v2073 == v2067)
        {
          uint64_t v2084 = v2068;
          v2081 = v2056;
          uint64_t v2082 = v2057;
        }
        else
        {
          v2076 = v2073;
          uint64_t v2079 = *v2067;
          v2078 = v2067 - 1;
          uint64_t v2077 = v2079;
          uint64_t v2080 = v2068;
          v2081 = v2056;
          uint64_t v2082 = v2057;
          while (1)
          {
            std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>(&v2695, v2077, v2080, v2081, v2082);
            v2081 = (char *)*((void *)&v2695 + 1);
            uint64_t v2082 = v2696;
            if (v2078 == v2076) {
              break;
            }
            uint64_t v2083 = *v2078--;
            uint64_t v2077 = v2083;
            uint64_t v2080 = v2083 + 4096;
          }
          uint64_t v2084 = *v2076 + 4096;
          uint64_t v2074 = v2075;
        }
        std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>(&v2695, v2074, v2084, v2081, v2082);
        uint64_t v2057 = v2696;
        v2056 = (char *)*((void *)&v2695 + 1);
      }
      if (v1851 != v1852)
      {
        uint64_t v2085 = *(void *)v2056;
        while (1)
        {
          uint64_t v2086 = v2057 - v2085;
          if ((v1852 - v1851) >> 4 >= v2086 >> 4) {
            uint64_t v2087 = v2086 >> 4;
          }
          else {
            uint64_t v2087 = (v1852 - v1851) >> 4;
          }
          if (v2087)
          {
            v2088 = (std::__shared_weak_count **)(v1852 - 8);
            uint64_t v2089 = -16 * v2087;
            v2090 = (std::__shared_weak_count **)(v2057 - 8);
            do
            {
              v2092 = *(v2088 - 1);
              v2091 = *v2088;
              if (*v2088) {
                atomic_fetch_add_explicit(&v2091->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              v2093 = *v2090;
              *(v2090 - 1) = v2092;
              *v2090 = v2091;
              if (v2093) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v2093);
              }
              v2088 -= 2;
              v2090 -= 2;
              v2089 += 16;
            }
            while (v2089);
          }
          v1852 -= 16 * v2087;
          if (v1852 == v1851) {
            break;
          }
          uint64_t v2094 = *((void *)v2056 - 1);
          v2056 -= 8;
          uint64_t v2085 = v2094;
          uint64_t v2057 = v2094 + 4096;
        }
      }
      goto LABEL_2576;
    }
    if (v1846 == v1847) {
      unint64_t v1876 = v1875 + 1;
    }
    else {
      unint64_t v1876 = v1875;
    }
    if ((_BYTE)v1876) {
      unint64_t v1877 = (v1876 >> 8) + 1;
    }
    else {
      unint64_t v1877 = v1876 >> 8;
    }
    if (v1877 >= v1854) {
      unint64_t v1878 = v1854;
    }
    else {
      unint64_t v1878 = v1877;
    }
    unint64_t v2644 = v1857;
    if (v1877 <= v1854)
    {
      v2616[27].i64[0] = v1842 - (v1878 << 8);
      if (v1878)
      {
        v1886 = (uint64_t *)v2616;
        do
        {
          v1887 = (void *)v1886[51];
          uint64_t v1890 = *v1887;
          v1888 = (char *)(v1887 + 1);
          uint64_t v1889 = v1890;
          v1886[51] = (uint64_t)v1888;
          if (v1846 == (char *)v1886[53])
          {
            uint64_t v1891 = (uint64_t)&v1888[-v1858->i64[0]];
            if ((unint64_t)v1888 <= v1858->i64[0])
            {
              if (v1846 == (char *)v1858->i64[0]) {
                unint64_t v1898 = 1;
              }
              else {
                unint64_t v1898 = (uint64_t)&v1846[-v1858->i64[0]] >> 2;
              }
              v1899 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1898);
              v1901 = &v1899[8 * (v1898 >> 2)];
              v1902 = (uint64_t *)v2616[25].i64[1];
              v1846 = v1901;
              uint64_t v1903 = v2616[26].i64[0] - (void)v1902;
              if (v1903)
              {
                v1846 = &v1901[v1903 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v1904 = 8 * (v1903 >> 3);
                v1905 = &v1899[8 * (v1898 >> 2)];
                do
                {
                  uint64_t v1906 = *v1902++;
                  *(void *)v1905 = v1906;
                  v1905 += 8;
                  v1904 -= 8;
                }
                while (v1904);
              }
              v1886 = (uint64_t *)v2616;
              v1907 = (void *)v2616[25].i64[0];
              v2616[25].i64[0] = (uint64_t)v1899;
              v2616[25].i64[1] = (uint64_t)v1901;
              v2616[26].i64[0] = (uint64_t)v1846;
              v2616[26].i64[1] = (uint64_t)&v1899[8 * v1900];
              if (v1907)
              {
                operator delete(v1907);
                v1846 = (char *)v2616[26].i64[0];
              }
            }
            else
            {
              uint64_t v1892 = v1891 >> 3;
              BOOL v381 = v1891 >> 3 < -1;
              uint64_t v1893 = (v1891 >> 3) + 2;
              if (v381) {
                uint64_t v1894 = v1893;
              }
              else {
                uint64_t v1894 = v1892 + 1;
              }
              v1895 = &v1888[-8 * (v1894 >> 1)];
              int64_t v1896 = v1846 - v1888;
              v1886 = (uint64_t *)v2616;
              if (v1846 != v1888)
              {
                memmove(&v1888[-8 * (v1894 >> 1)], v1888, v1846 - v1888);
                v1846 = (char *)v2616[25].i64[1];
              }
              v1897 = &v1846[-8 * (v1894 >> 1)];
              v1846 = &v1895[v1896];
              v2616[25].i64[1] = (uint64_t)v1897;
              v2616[26].i64[0] = (uint64_t)&v1895[v1896];
            }
          }
          else
          {
            v1886 = (uint64_t *)v2616;
          }
          *(void *)v1846 = v1889;
          v1846 = (char *)(v1886[52] + 8);
          v1886[52] = (uint64_t)v1846;
          --v1878;
        }
        while (v1878);
        goto LABEL_2528;
      }
    }
    else
    {
      unint64_t v1879 = v1877 - v1878;
      uint64_t v1880 = v2616[26].i64[1] - v2616[25].i64[0];
      if (v1877 - v1878 <= (v1880 >> 3) - (v1873 >> 3))
      {
        if (v1879)
        {
          while (v2616[26].i64[1] != v2616[26].i64[0])
          {
            *(void *)&long long v2695 = operator new(0x1000uLL);
            std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(v1858, &v2695);
            if (!--v1879)
            {
              v1846 = (char *)v2616[26].i64[0];
              goto LABEL_2505;
            }
          }
          for (uint64_t i6 = 0; i6 != v1879; ++i6)
          {
            *(void *)&long long v2695 = operator new(0x1000uLL);
            std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v1858, &v2695);
            v1846 = (char *)v2616[26].i64[0];
            if (&v1846[-v2616[25].i64[1]] == (char *)8) {
              uint64_t v2032 = 255;
            }
            else {
              uint64_t v2032 = 256;
            }
            uint64_t v2033 = v2032 + v2616[27].i64[0];
            v2616[27].i64[0] = v2033;
          }
          v1878 += v1879;
          v2034 = v2616;
        }
        else
        {
LABEL_2505:
          v2034 = v2616;
          uint64_t v2033 = v2616[27].i64[0];
        }
        v2034[27].i64[0] = v2033 - (v1878 << 8);
        if (v1878)
        {
          v1886 = (uint64_t *)v2616;
          do
          {
            v2035 = (void *)v1886[51];
            uint64_t v2038 = *v2035;
            v2036 = (char *)(v2035 + 1);
            uint64_t v2037 = v2038;
            v1886[51] = (uint64_t)v2036;
            if (v1846 == (char *)v1886[53])
            {
              uint64_t v2039 = (uint64_t)&v2036[-v1858->i64[0]];
              if ((unint64_t)v2036 <= v1858->i64[0])
              {
                if (v1846 == (char *)v1858->i64[0]) {
                  unint64_t v2046 = 1;
                }
                else {
                  unint64_t v2046 = (uint64_t)&v1846[-v1858->i64[0]] >> 2;
                }
                v2047 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v2046);
                v2049 = &v2047[8 * (v2046 >> 2)];
                v2050 = (uint64_t *)v2616[25].i64[1];
                v1846 = v2049;
                uint64_t v2051 = v2616[26].i64[0] - (void)v2050;
                if (v2051)
                {
                  v1846 = &v2049[v2051 & 0xFFFFFFFFFFFFFFF8];
                  uint64_t v2052 = 8 * (v2051 >> 3);
                  v2053 = &v2047[8 * (v2046 >> 2)];
                  do
                  {
                    uint64_t v2054 = *v2050++;
                    *(void *)v2053 = v2054;
                    v2053 += 8;
                    v2052 -= 8;
                  }
                  while (v2052);
                }
                v1886 = (uint64_t *)v2616;
                v2055 = (void *)v2616[25].i64[0];
                v2616[25].i64[0] = (uint64_t)v2047;
                v2616[25].i64[1] = (uint64_t)v2049;
                v2616[26].i64[0] = (uint64_t)v1846;
                v2616[26].i64[1] = (uint64_t)&v2047[8 * v2048];
                if (v2055)
                {
                  operator delete(v2055);
                  v1846 = (char *)v2616[26].i64[0];
                }
              }
              else
              {
                uint64_t v2040 = v2039 >> 3;
                BOOL v381 = v2039 >> 3 < -1;
                uint64_t v2041 = (v2039 >> 3) + 2;
                if (v381) {
                  uint64_t v2042 = v2041;
                }
                else {
                  uint64_t v2042 = v2040 + 1;
                }
                v2043 = &v2036[-8 * (v2042 >> 1)];
                int64_t v2044 = v1846 - v2036;
                v1886 = (uint64_t *)v2616;
                if (v1846 != v2036)
                {
                  memmove(&v2036[-8 * (v2042 >> 1)], v2036, v1846 - v2036);
                  v1846 = (char *)v2616[25].i64[1];
                }
                v2045 = &v1846[-8 * (v2042 >> 1)];
                v1846 = &v2043[v2044];
                v2616[25].i64[1] = (uint64_t)v2045;
                v2616[26].i64[0] = (uint64_t)&v2043[v2044];
              }
            }
            else
            {
              v1886 = (uint64_t *)v2616;
            }
            *(void *)v1846 = v2037;
            v1846 = (char *)(v1886[52] + 8);
            v1886[52] = (uint64_t)v1846;
            --v1878;
          }
          while (v1878);
          goto LABEL_2528;
        }
      }
      else
      {
        uint64_t v1881 = v1873 >> 3;
        unint64_t v1882 = v1880 >> 2;
        if (v1882 <= v1879 + (v1873 >> 3)) {
          v1883 = (char *)(v1879 + (v1873 >> 3));
        }
        else {
          v1883 = (char *)v1882;
        }
        v2697 = &v2616[26].i8[8];
        if (v1883) {
          v1883 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>((unint64_t)v1883);
        }
        else {
          uint64_t v1884 = 0;
        }
        *(void *)&long long v2695 = v1883;
        *((void *)&v2695 + 1) = &v1883[8 * (v1881 - v1878)];
        *(void *)&long long v2696 = *((void *)&v2695 + 1);
        *((void *)&v2696 + 1) = &v1883[8 * v1884];
        v1950 = v2616;
        do
        {
          *(void *)&long long v2667 = operator new(0x1000uLL);
          std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(&v2695, &v2667);
          --v1879;
        }
        while (v1879);
        unint64_t v2631 = v1878 << 8;
        v1951 = (char *)v2696;
        if (v1878)
        {
          v1952 = (void *)v2616[25].i64[1];
          unint64_t v2661 = v1853;
          do
          {
            if (v1951 == *((char **)&v2696 + 1))
            {
              v1953 = (char *)*((void *)&v2695 + 1);
              v1954 = (void *)v2695;
              if (*((void *)&v2695 + 1) <= (unint64_t)v2695)
              {
                if (v1951 == (char *)v2695) {
                  unint64_t v1961 = 1;
                }
                else {
                  unint64_t v1961 = (uint64_t)&v1951[-v2695] >> 2;
                }
                v1962 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1961);
                uint64_t v1964 = v1951 - v1953;
                BOOL v417 = v1951 == v1953;
                v1951 = &v1962[8 * (v1961 >> 2)];
                if (!v417)
                {
                  v1951 = &v1962[8 * (v1961 >> 2) + (v1964 & 0xFFFFFFFFFFFFFFF8)];
                  uint64_t v1965 = 8 * (v1964 >> 3);
                  v1966 = &v1962[8 * (v1961 >> 2)];
                  do
                  {
                    uint64_t v1967 = *(void *)v1953;
                    v1953 += 8;
                    *(void *)v1966 = v1967;
                    v1966 += 8;
                    v1965 -= 8;
                  }
                  while (v1965);
                }
                *(void *)&long long v2695 = v1962;
                *((void *)&v2695 + 1) = &v1962[8 * (v1961 >> 2)];
                *(void *)&long long v2696 = v1951;
                *((void *)&v2696 + 1) = &v1962[8 * v1963];
                if (v1954) {
                  operator delete(v1954);
                }
                v1950 = v2616;
              }
              else
              {
                unint64_t v1955 = v1857;
                uint64_t v1956 = (uint64_t)(*((void *)&v2695 + 1) - v2695) >> 3;
                if (v1956 >= -1) {
                  uint64_t v1957 = v1956 + 1;
                }
                else {
                  uint64_t v1957 = v1956 + 2;
                }
                uint64_t v1958 = *((void *)&v2695 + 1) - 8 * (v1957 >> 1);
                v1959 = &v1951[-*((void *)&v2695 + 1)];
                if (v1951 != *((char **)&v2695 + 1))
                {
                  memmove((void *)(*((void *)&v2695 + 1) - 8 * (v1957 >> 1)), *((const void **)&v2695 + 1), (size_t)&v1951[-*((void *)&v2695 + 1)]);
                  v1951 = v1953;
                }
                v1960 = &v1951[-8 * (v1957 >> 1)];
                v1951 = &v1959[v1958];
                *((void *)&v2695 + 1) = v1960;
                *(void *)&long long v2696 = &v1959[v1958];
                v1950 = v2616;
                unint64_t v1857 = v1955;
                unint64_t v1853 = v2661;
              }
            }
            *(void *)v1951 = *v1952;
            v1951 = (char *)(v2696 + 8);
            *(void *)&long long v2696 = v2696 + 8;
            v1952 = (void *)(v1950[25].i64[1] + 8);
            v1950[25].i64[1] = (uint64_t)v1952;
            --v1878;
          }
          while (v1878);
        }
        uint64_t v1968 = v1950[26].i64[0];
        v1969 = (char *)*((void *)&v2695 + 1);
        v1970 = (char *)v2695;
        v1971 = (char *)*((void *)&v2696 + 1);
        while (v1968 != v2616[25].i64[1])
        {
          if (v1969 == v1970)
          {
            if (v1951 >= v1971)
            {
              if (v1971 == v1970) {
                unint64_t v1976 = 1;
              }
              else {
                unint64_t v1976 = (v1971 - v1970) >> 2;
              }
              v1977 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1976);
              v1979 = v1977;
              v1969 = &v1977[(2 * v1976 + 6) & 0xFFFFFFFFFFFFFFF8];
              uint64_t v1980 = v1951 - v1970;
              BOOL v417 = v1951 == v1970;
              v1951 = v1969;
              if (!v417)
              {
                v1951 = &v1969[v1980 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v1981 = 8 * (v1980 >> 3);
                v1982 = v1969;
                v1983 = v1970;
                do
                {
                  uint64_t v1984 = *(void *)v1983;
                  v1983 += 8;
                  *(void *)v1982 = v1984;
                  v1982 += 8;
                  v1981 -= 8;
                }
                while (v1981);
              }
              v1971 = &v1977[8 * v1978];
              if (v1970) {
                operator delete(v1970);
              }
              v1970 = v1979;
            }
            else
            {
              uint64_t v1972 = (v1971 - v1951) >> 3;
              if (v1972 >= -1) {
                unint64_t v1973 = v1972 + 1;
              }
              else {
                unint64_t v1973 = v1972 + 2;
              }
              v1974 = &v1951[8 * (v1973 >> 1)];
              v1969 = &v1974[-(v1951 - v1970)];
              size_t v1975 = v1951 - v1970;
              BOOL v417 = v1951 == v1970;
              v1951 = v1974;
              if (!v417) {
                memmove(v1969, v1970, v1975);
              }
            }
          }
          uint64_t v1985 = *(void *)(v1968 - 8);
          v1968 -= 8;
          *((void *)v1969 - 1) = v1985;
          v1969 -= 8;
        }
        *(void *)&long long v2695 = v1970;
        *((void *)&v2695 + 1) = v1969;
        *(void *)&long long v2696 = v1951;
        *((void *)&v2696 + 1) = v1971;
        long long v1988 = v2695;
        int64x2_t v1987 = (int64x2_t)v2696;
        *(void *)&long long v2695 = v2616[25].i64[0];
        v1986 = (void *)v2695;
        *((void *)&v2695 + 1) = v1968;
        v2616[25] = (int64x2_t)v1988;
        v2616[26] = v1987;
        v2616[27].i64[0] -= v2631;
        if (v1986)
        {
          operator delete(v1986);
          v1846 = (char *)v2616[26].i64[0];
        }
        else
        {
          v1846 = (char *)v1987.i64[0];
        }
      }
    }
    v1886 = (uint64_t *)v2616;
LABEL_2528:
    uint64_t v1843 = v1886[55];
    v1847 = (char *)v1886[51];
    unint64_t v1844 = v1886[54] + v1843;
    unint64_t v1845 = v1844 >> 8;
    unint64_t v1857 = v2644;
    goto LABEL_2529;
  }
  unint64_t v1859 = v1853 - v1842;
  if (v1853 > v1842)
  {
    uint64_t v1860 = 32 * v1849 - 1;
    uint64_t v1861 = v1846 - v1847;
    if (v1846 == v1847)
    {
      uint64_t v1860 = 0;
      ++v1859;
    }
    if ((_BYTE)v1859) {
      unint64_t v1862 = (v1859 >> 8) + 1;
    }
    else {
      unint64_t v1862 = v1859 >> 8;
    }
    unint64_t v1863 = v1860 - v1844;
    if (v1862 >= v1863 >> 8) {
      unint64_t v1864 = v1863 >> 8;
    }
    else {
      unint64_t v1864 = v1862;
    }
    if (v1862 <= v1863 >> 8)
    {
      for (v2616[27].i64[0] = v1842 + (v1864 << 8); v1864; --v1864)
      {
        uint64_t v1885 = v2616[26].i64[0];
        *(void *)&long long v2695 = *(void *)(v1885 - 8);
        v2616[26].i64[0] = v1885 - 8;
        std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v1858, &v2695);
      }
      goto LABEL_2449;
    }
    unint64_t v1865 = v1862 - v1864;
    uint64_t v1866 = v2616[25].i64[0];
    uint64_t v1867 = v2616[26].i64[1] - v1866;
    if (v1862 - v1864 > (v1867 >> 3) - (v1861 >> 3))
    {
      uint64_t v1868 = v1861 >> 3;
      BOOL v1869 = v1846 == v1847;
      if (v1867 >> 2 <= v1865 + v1868) {
        unint64_t v1870 = v1865 + v1868;
      }
      else {
        unint64_t v1870 = v1867 >> 2;
      }
      v2697 = &v2616[26].i8[8];
      if (v1870) {
        unint64_t v1870 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1870);
      }
      else {
        uint64_t v1871 = 0;
      }
      unint64_t v1913 = (v1862 << 8) - v1869;
      *(void *)&long long v2695 = v1870;
      *((void *)&v2695 + 1) = v1870;
      *(void *)&long long v2696 = v1870;
      *((void *)&v2696 + 1) = v1870 + 8 * v1871;
      v1914 = (uint64_t *)v2616;
      do
      {
        *(void *)&long long v2667 = operator new(0x1000uLL);
        std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(&v2695, &v2667);
        --v1865;
      }
      while (v1865);
      unint64_t v2630 = v1913;
      uint64_t v1915 = v2616[26].i64[0];
      v1916 = (char *)v2696;
      if (v1864)
      {
        unint64_t v2660 = v1853;
        do
        {
          if (v1916 == *((char **)&v2696 + 1))
          {
            v1917 = (char *)*((void *)&v2695 + 1);
            v1918 = (void *)v2695;
            if (*((void *)&v2695 + 1) <= (unint64_t)v2695)
            {
              if (v1916 == (char *)v2695) {
                unint64_t v1925 = 1;
              }
              else {
                unint64_t v1925 = (uint64_t)&v1916[-v2695] >> 2;
              }
              v1926 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1925);
              uint64_t v1928 = v1916 - v1917;
              BOOL v417 = v1916 == v1917;
              v1916 = &v1926[8 * (v1925 >> 2)];
              if (!v417)
              {
                v1916 = &v1926[8 * (v1925 >> 2) + (v1928 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v1929 = 8 * (v1928 >> 3);
                v1930 = &v1926[8 * (v1925 >> 2)];
                do
                {
                  uint64_t v1931 = *(void *)v1917;
                  v1917 += 8;
                  *(void *)v1930 = v1931;
                  v1930 += 8;
                  v1929 -= 8;
                }
                while (v1929);
              }
              *(void *)&long long v2695 = v1926;
              *((void *)&v2695 + 1) = &v1926[8 * (v1925 >> 2)];
              *(void *)&long long v2696 = v1916;
              *((void *)&v2696 + 1) = &v1926[8 * v1927];
              if (v1918) {
                operator delete(v1918);
              }
              v1914 = (uint64_t *)v2616;
            }
            else
            {
              unint64_t v1919 = v1857;
              uint64_t v1920 = (uint64_t)(*((void *)&v2695 + 1) - v2695) >> 3;
              if (v1920 >= -1) {
                uint64_t v1921 = v1920 + 1;
              }
              else {
                uint64_t v1921 = v1920 + 2;
              }
              uint64_t v1922 = *((void *)&v2695 + 1) - 8 * (v1921 >> 1);
              v1923 = &v1916[-*((void *)&v2695 + 1)];
              if (v1916 != *((char **)&v2695 + 1))
              {
                memmove((void *)(*((void *)&v2695 + 1) - 8 * (v1921 >> 1)), *((const void **)&v2695 + 1), (size_t)&v1916[-*((void *)&v2695 + 1)]);
                v1916 = v1917;
              }
              v1924 = &v1916[-8 * (v1921 >> 1)];
              v1916 = &v1923[v1922];
              *((void *)&v2695 + 1) = v1924;
              *(void *)&long long v2696 = &v1923[v1922];
              v1914 = (uint64_t *)v2616;
              unint64_t v1857 = v1919;
              unint64_t v1853 = v2660;
            }
          }
          *(void *)v1916 = *(void *)(v1915 - 8);
          v1916 = (char *)(v2696 + 8);
          *(void *)&long long v2696 = v2696 + 8;
          uint64_t v1915 = v1914[52] - 8;
          v1914[52] = v1915;
          --v1864;
        }
        while (v1864);
      }
      v1932 = (uint64_t *)v1914[51];
      if (v1932 == (uint64_t *)v1915)
      {
        v1932 = (uint64_t *)v1915;
      }
      else
      {
        do
        {
          if (v1916 == *((char **)&v2696 + 1))
          {
            v1933 = (char *)*((void *)&v2695 + 1);
            v1934 = (void *)v2695;
            if (*((void *)&v2695 + 1) <= (unint64_t)v2695)
            {
              if (v1916 == (char *)v2695) {
                unint64_t v1942 = 1;
              }
              else {
                unint64_t v1942 = (uint64_t)&v1916[-v2695] >> 2;
              }
              v1943 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v1942);
              uint64_t v1945 = v1916 - v1933;
              BOOL v417 = v1916 == v1933;
              v1916 = &v1943[8 * (v1942 >> 2)];
              if (!v417)
              {
                v1916 = &v1943[8 * (v1942 >> 2) + (v1945 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v1946 = 8 * (v1945 >> 3);
                v1947 = &v1943[8 * (v1942 >> 2)];
                do
                {
                  uint64_t v1948 = *(void *)v1933;
                  v1933 += 8;
                  *(void *)v1947 = v1948;
                  v1947 += 8;
                  v1946 -= 8;
                }
                while (v1946);
              }
              *(void *)&long long v2695 = v1943;
              *((void *)&v2695 + 1) = &v1943[8 * (v1942 >> 2)];
              *(void *)&long long v2696 = v1916;
              *((void *)&v2696 + 1) = &v1943[8 * v1944];
              if (v1934) {
                operator delete(v1934);
              }
              v1914 = (uint64_t *)v2616;
            }
            else
            {
              unint64_t v1935 = v1853;
              unint64_t v1936 = v1857;
              uint64_t v1937 = (uint64_t)(*((void *)&v2695 + 1) - v2695) >> 3;
              if (v1937 >= -1) {
                uint64_t v1938 = v1937 + 1;
              }
              else {
                uint64_t v1938 = v1937 + 2;
              }
              uint64_t v1939 = *((void *)&v2695 + 1) - 8 * (v1938 >> 1);
              v1940 = &v1916[-*((void *)&v2695 + 1)];
              if (v1916 != *((char **)&v2695 + 1))
              {
                memmove((void *)(*((void *)&v2695 + 1) - 8 * (v1938 >> 1)), *((const void **)&v2695 + 1), (size_t)&v1916[-*((void *)&v2695 + 1)]);
                v1916 = v1933;
              }
              v1941 = &v1916[-8 * (v1938 >> 1)];
              v1916 = &v1940[v1939];
              *((void *)&v2695 + 1) = v1941;
              *(void *)&long long v2696 = &v1940[v1939];
              v1914 = (uint64_t *)v2616;
              unint64_t v1857 = v1936;
              unint64_t v1853 = v1935;
            }
          }
          uint64_t v1949 = *v1932++;
          *(void *)v1916 = v1949;
          v1916 = (char *)(v2696 + 8);
          *(void *)&long long v2696 = v2696 + 8;
        }
        while (v1932 != (uint64_t *)v1914[52]);
        uint64_t v1915 = v1914[51];
      }
      v1989 = (void *)v1914[50];
      *((_OWORD *)v1914 + 25) = v2695;
      *(void *)&long long v2695 = v1989;
      *((void *)&v2695 + 1) = v1915;
      *(void *)&long long v2696 = v1932;
      uint64_t v1990 = *((void *)&v2696 + 1);
      v1914[52] = (uint64_t)v1916;
      v1914[53] = v1990;
      v1914[54] += v2630;
      if (v1989) {
        operator delete(v1989);
      }
LABEL_2449:
      unint64_t v1842 = v2616[27].u64[0];
      v1847 = (char *)v2616[25].i64[1];
      v1846 = (char *)v2616[26].i64[0];
      unint64_t v1854 = v1842 >> 8;
      goto LABEL_2450;
    }
    if (v1865)
    {
      if (v1847 == (char *)v1866)
      {
LABEL_2348:
        unint64_t v1910 = v1865;
        do
        {
          *(void *)&long long v2695 = operator new(0x1000uLL);
          std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(v1858, &v2695);
          --v1910;
        }
        while (v1910);
        v1864 += v1865;
        v1911 = v2616;
        unint64_t v1842 = v2616[27].u64[0];
LABEL_2356:
        for (v1911[27].i64[0] = v1842 + (v1864 << 8); v1864; --v1864)
        {
          uint64_t v1912 = v2616[26].i64[0];
          *(void *)&long long v2695 = *(void *)(v1912 - 8);
          v2616[26].i64[0] = v1912 - 8;
          std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v1858, &v2695);
        }
        goto LABEL_2449;
      }
      while (1)
      {
        *(void *)&long long v2695 = operator new(0x1000uLL);
        std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v1858, &v2695);
        uint64_t v1908 = v2616[25].i64[1];
        uint64_t v1909 = v2616[26].i64[0] - v1908 == 8 ? 255 : 256;
        unint64_t v1842 = v1909 + v2616[27].i64[0];
        v2616[27].i64[0] = v1842;
        if (!--v1865) {
          break;
        }
        if (v1908 == v1858->i64[0]) {
          goto LABEL_2348;
        }
      }
    }
    v1911 = v2616;
    goto LABEL_2356;
  }
LABEL_2450:
  v1991 = &v1847[8 * v1854];
  if (v1846 == v1847) {
    v1992 = 0;
  }
  else {
    v1992 = (long long *)(*(void *)v1991 + 16 * v1842);
  }
  if (v1853 <= v1857)
  {
    v1996 = v1992;
    v1995 = &v1847[8 * v1854];
    if (!v1853) {
      goto LABEL_2576;
    }
    goto LABEL_2468;
  }
  v1993 = &v1851[16 * (v1853 - v1857)];
  if (v1857 < v1853 >> 1) {
    v1993 = &v1852[-16 * v1857];
  }
  if (v1993 == v1851)
  {
    v1996 = v1992;
    v1995 = &v1847[8 * v1854];
  }
  else
  {
    v1994 = v1993;
    v1995 = &v1847[8 * v1854];
    v1996 = v1992;
    do
    {
      if (v1996 == *(long long **)v1995)
      {
        uint64_t v1997 = *((void *)v1995 - 1);
        v1995 -= 8;
        v1996 = (long long *)(v1997 + 4096);
      }
      uint64_t v1998 = *((void *)v1994 - 2);
      v1994 -= 16;
      *((void *)v1996-- - 2) = v1998;
      uint64_t v1999 = *((void *)v1994 + 1);
      *((void *)v1996 + 1) = v1999;
      if (v1999)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v1999 + 8), 1uLL, memory_order_relaxed);
        unint64_t v1842 = v2616[27].u64[0];
      }
      --v1842;
      uint64_t v2000 = v2616[27].i64[1] + 1;
      v2616[27].i64[0] = v1842;
      v2616[27].i64[1] = v2000;
    }
    while (v1994 != v1851);
    v1851 = v1993;
  }
  unint64_t v1853 = v1857;
  if (v1857)
  {
LABEL_2468:
    v2001 = (long long **)std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator+[abi:ne180100](v1991, (uint64_t)v1992, v1853);
    v2003 = v2001;
    v2004 = v2002;
    if (v1992 != v2002)
    {
      v2005 = v2001;
      v2006 = v2002;
      do
      {
        if (v1996 == *(long long **)v1995)
        {
          uint64_t v2007 = *((void *)v1995 - 1);
          v1995 -= 8;
          v1996 = (long long *)(v2007 + 4096);
        }
        if (v2006 == *v2005)
        {
          uint64_t v2008 = (uint64_t)*--v2005;
          v2006 = (long long *)(v2008 + 4096);
        }
        long long v2009 = *--v2006;
        *--v1996 = v2009;
        *(void *)v2006 = 0;
        *((void *)v2006 + 1) = 0;
        v2616[27] = vaddq_s64(v2616[27], (int64x2_t)xmmword_1901C6000);
      }
      while (v2006 != v1992);
    }
    if (v1853 < v1857)
    {
      v2010 = (long long **)std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator+[abi:ne180100](v1991, (uint64_t)v1992, v1857);
      v2012 = v2011;
      if (v2003 == v2010)
      {
        v2021 = v2004;
        v2022 = v2012;
        v2018 = v1991;
        uint64_t v2019 = (uint64_t)v1992;
      }
      else
      {
        v2013 = v2010;
        v2015 = *v2003;
        v2014 = v2003 + 1;
        v2016 = v2015 + 256;
        v2017 = v2004;
        v2018 = v1991;
        uint64_t v2019 = (uint64_t)v1992;
        while (1)
        {
          std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>(&v2695, v2017, v2016, v2018, v2019);
          v2018 = (char *)*((void *)&v2695 + 1);
          uint64_t v2019 = v2696;
          if (v2014 == v2013) {
            break;
          }
          v2020 = *v2014++;
          v2017 = v2020;
          v2016 = v2020 + 256;
        }
        v2021 = *v2013;
        v2022 = v2012;
      }
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>(&v2695, v2021, v2022, v2018, v2019);
      v1992 = (long long *)v2696;
      v1991 = (char *)*((void *)&v2695 + 1);
    }
    if (v1851 != v1852)
    {
      v2023 = *(char **)v1991;
      while (1)
      {
        uint64_t v2024 = v2023 - (char *)v1992 + 4096;
        if ((v1852 - v1851) >> 4 >= v2024 >> 4) {
          uint64_t v2025 = v2024 >> 4;
        }
        else {
          uint64_t v2025 = (v1852 - v1851) >> 4;
        }
        if (v2025)
        {
          v2026 = &v1851[16 * v2025];
          do
          {
            uint64_t v2028 = *(void *)v1851;
            uint64_t v2027 = *((void *)v1851 + 1);
            if (v2027) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v2027 + 8), 1uLL, memory_order_relaxed);
            }
            v2029 = (std::__shared_weak_count *)*((void *)v1992 + 1);
            *(void *)v1992 = v2028;
            *((void *)v1992 + 1) = v2027;
            if (v2029) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v2029);
            }
            v1851 += 16;
            ++v1992;
          }
          while (v1851 != v2026);
          v1851 = v2026;
        }
        if (v1851 == v1852) {
          break;
        }
        v2030 = (char *)*((void *)v1991 + 1);
        v1991 += 8;
        v2023 = v2030;
        v1992 = (long long *)v2030;
      }
    }
  }
LABEL_2576:
  atomic_fetch_add(v2616[28].i64, (v2675 - v2674) >> 4);
  unint64_t v2095 = v2616[31].u64[0];
  uint64_t v2096 = v2616[31].i64[1];
  unint64_t v2097 = v2095 + v2096;
  unint64_t v2098 = (v2095 + v2096) >> 8;
  v2100 = (char *)v2616[29].i64[1];
  v2099 = (char *)v2616[30].i64[0];
  v2101 = &v2100[8 * v2098];
  unint64_t v2102 = v2095 >> 8;
  int64_t v2103 = v2099 - v2100;
  if (v2099 == v2100)
  {
    uint64_t v2104 = 0;
    uint64_t v2109 = 0;
    v2105 = v2671;
    v2106 = v2672;
    unint64_t v2107 = (v2672 - v2671) >> 4;
    v2108 = &v2100[8 * v2102];
  }
  else
  {
    uint64_t v2104 = *(void *)v2101 + 16 * v2097;
    v2105 = v2671;
    v2106 = v2672;
    unint64_t v2107 = (v2672 - v2671) >> 4;
    v2108 = &v2100[8 * v2102];
    uint64_t v2109 = *(void *)v2108 + 16 * v2095;
  }
  if (v2104 == v2109) {
    unint64_t v2110 = 0;
  }
  else {
    unint64_t v2110 = ((v2104 - *(void *)v2101) >> 4) + 32 * (v2101 - v2108) - ((v2109 - *(void *)v2108) >> 4);
  }
  v2111 = v2616 + 29;
  if (v2110 >= v2096 - v2110)
  {
    uint64_t v2125 = 32 * v2103 - 1;
    uint64_t v2126 = v2099 - v2100;
    if (v2099 == v2100) {
      uint64_t v2125 = 0;
    }
    unint64_t v2127 = v2125 - v2097;
    BOOL v363 = v2107 >= v2127;
    unint64_t v2128 = v2107 - v2127;
    if (v2128 == 0 || !v363)
    {
LABEL_2831:
      v2309 = &v2100[8 * v2098];
      if (v2099 == v2100) {
        uint64_t v2310 = 0;
      }
      else {
        uint64_t v2310 = *(void *)v2309 + 16 * v2097;
      }
      unint64_t v2311 = v2096 - v2110;
      if (v2311 >= v2107)
      {
        v2315 = (void *)v2310;
        v2314 = &v2100[8 * v2098];
        if (!v2107) {
          goto LABEL_2878;
        }
      }
      else
      {
        v2312 = &v2106[16 * (v2311 - v2107)];
        if (v2311 < v2107 >> 1) {
          v2312 = &v2105[16 * v2311];
        }
        if (v2312 == v2106)
        {
          v2315 = (void *)v2310;
          v2314 = &v2100[8 * v2098];
        }
        else
        {
          v2313 = v2312;
          v2314 = v2309;
          v2315 = (void *)v2310;
          do
          {
            void *v2315 = *(void *)v2313;
            uint64_t v2316 = *((void *)v2313 + 1);
            v2315[1] = v2316;
            if (v2316) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v2316 + 8), 1uLL, memory_order_relaxed);
            }
            v2315 += 2;
            if ((void *)((char *)v2315 - *(void *)v2314) == (void *)4096)
            {
              v2317 = (void *)*((void *)v2314 + 1);
              v2314 += 8;
              v2315 = v2317;
            }
            ++v2616[31].i64[1];
            v2313 += 16;
          }
          while (v2313 != v2106);
          v2106 = v2312;
        }
        unint64_t v2107 = v2311;
        if (!v2311) {
          goto LABEL_2878;
        }
      }
      v2318 = std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator-[abi:ne180100](v2309, v2310, v2107);
      v2320 = v2318;
      uint64_t v2321 = v2319;
      if (v2310 != v2319)
      {
        v2322 = v2318;
        uint64_t v2323 = v2319;
        do
        {
          *(_OWORD *)v2315 = *(_OWORD *)v2323;
          v2315 += 2;
          *(void *)uint64_t v2323 = 0;
          *(void *)(v2323 + 8) = 0;
          if ((void *)((char *)v2315 - *(void *)v2314) == (void *)4096)
          {
            v2324 = (void *)*((void *)v2314 + 1);
            v2314 += 8;
            v2315 = v2324;
          }
          v2323 += 16;
          if (v2323 - *v2322 == 4096)
          {
            uint64_t v2325 = v2322[1];
            ++v2322;
            uint64_t v2323 = v2325;
          }
          ++v2616[31].i64[1];
        }
        while (v2323 != v2310);
      }
      if (v2107 < v2311)
      {
        v2326 = std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator-[abi:ne180100](v2309, v2310, v2311);
        uint64_t v2328 = v2327;
        if (v2326 == v2320)
        {
          uint64_t v2337 = v2321;
          v2334 = v2309;
          uint64_t v2335 = v2310;
        }
        else
        {
          v2329 = v2326;
          uint64_t v2332 = *v2320;
          v2331 = v2320 - 1;
          uint64_t v2330 = v2332;
          uint64_t v2333 = v2321;
          v2334 = v2309;
          uint64_t v2335 = v2310;
          while (1)
          {
            std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>(&v2695, v2330, v2333, v2334, v2335);
            v2334 = (char *)*((void *)&v2695 + 1);
            uint64_t v2335 = v2696;
            if (v2331 == v2329) {
              break;
            }
            uint64_t v2336 = *v2331--;
            uint64_t v2330 = v2336;
            uint64_t v2333 = v2336 + 4096;
          }
          uint64_t v2337 = *v2329 + 4096;
          uint64_t v2327 = v2328;
        }
        std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>(&v2695, v2327, v2337, v2334, v2335);
        uint64_t v2310 = v2696;
        v2309 = (char *)*((void *)&v2695 + 1);
      }
      if (v2105 != v2106)
      {
        uint64_t v2338 = *(void *)v2309;
        while (1)
        {
          uint64_t v2339 = v2310 - v2338;
          if ((v2106 - v2105) >> 4 >= v2339 >> 4) {
            uint64_t v2340 = v2339 >> 4;
          }
          else {
            uint64_t v2340 = (v2106 - v2105) >> 4;
          }
          if (v2340)
          {
            v2341 = (std::__shared_weak_count **)(v2106 - 8);
            uint64_t v2342 = -16 * v2340;
            v2343 = (std::__shared_weak_count **)(v2310 - 8);
            do
            {
              v2345 = *(v2341 - 1);
              v2344 = *v2341;
              if (*v2341) {
                atomic_fetch_add_explicit(&v2344->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              v2346 = *v2343;
              *(v2343 - 1) = v2345;
              *v2343 = v2344;
              if (v2346) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v2346);
              }
              v2341 -= 2;
              v2343 -= 2;
              v2342 += 16;
            }
            while (v2342);
          }
          v2106 -= 16 * v2340;
          if (v2106 == v2105) {
            break;
          }
          uint64_t v2347 = *((void *)v2309 - 1);
          v2309 -= 8;
          uint64_t v2338 = v2347;
          uint64_t v2310 = v2347 + 4096;
        }
      }
      goto LABEL_2878;
    }
    if (v2099 == v2100) {
      unint64_t v2129 = v2128 + 1;
    }
    else {
      unint64_t v2129 = v2128;
    }
    if ((_BYTE)v2129) {
      unint64_t v2130 = (v2129 >> 8) + 1;
    }
    else {
      unint64_t v2130 = v2129 >> 8;
    }
    if (v2130 >= v2102) {
      unint64_t v2131 = v2095 >> 8;
    }
    else {
      unint64_t v2131 = v2130;
    }
    unint64_t v2645 = v2110;
    if (v2130 <= v2102)
    {
      v2616[31].i64[0] = v2095 - (v2131 << 8);
      if (v2131)
      {
        v2139 = (uint64_t *)v2616;
        do
        {
          v2140 = (void *)v2139[59];
          uint64_t v2143 = *v2140;
          v2141 = (char *)(v2140 + 1);
          uint64_t v2142 = v2143;
          v2139[59] = (uint64_t)v2141;
          if (v2099 == (char *)v2139[61])
          {
            uint64_t v2144 = (uint64_t)&v2141[-v2111->i64[0]];
            if ((unint64_t)v2141 <= v2111->i64[0])
            {
              if (v2099 == (char *)v2111->i64[0]) {
                unint64_t v2151 = 1;
              }
              else {
                unint64_t v2151 = (uint64_t)&v2099[-v2111->i64[0]] >> 2;
              }
              v2152 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v2151);
              v2154 = &v2152[8 * (v2151 >> 2)];
              v2155 = (uint64_t *)v2616[29].i64[1];
              v2099 = v2154;
              uint64_t v2156 = v2616[30].i64[0] - (void)v2155;
              if (v2156)
              {
                v2099 = &v2154[v2156 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v2157 = 8 * (v2156 >> 3);
                v2158 = &v2152[8 * (v2151 >> 2)];
                do
                {
                  uint64_t v2159 = *v2155++;
                  *(void *)v2158 = v2159;
                  v2158 += 8;
                  v2157 -= 8;
                }
                while (v2157);
              }
              v2139 = (uint64_t *)v2616;
              v2160 = (void *)v2616[29].i64[0];
              v2616[29].i64[0] = (uint64_t)v2152;
              v2616[29].i64[1] = (uint64_t)v2154;
              v2616[30].i64[0] = (uint64_t)v2099;
              v2616[30].i64[1] = (uint64_t)&v2152[8 * v2153];
              if (v2160)
              {
                operator delete(v2160);
                v2099 = (char *)v2616[30].i64[0];
              }
            }
            else
            {
              uint64_t v2145 = v2144 >> 3;
              BOOL v381 = v2144 >> 3 < -1;
              uint64_t v2146 = (v2144 >> 3) + 2;
              if (v381) {
                uint64_t v2147 = v2146;
              }
              else {
                uint64_t v2147 = v2145 + 1;
              }
              v2148 = &v2141[-8 * (v2147 >> 1)];
              int64_t v2149 = v2099 - v2141;
              v2139 = (uint64_t *)v2616;
              if (v2099 != v2141)
              {
                memmove(&v2141[-8 * (v2147 >> 1)], v2141, v2099 - v2141);
                v2099 = (char *)v2616[29].i64[1];
              }
              v2150 = &v2099[-8 * (v2147 >> 1)];
              v2099 = &v2148[v2149];
              v2616[29].i64[1] = (uint64_t)v2150;
              v2616[30].i64[0] = (uint64_t)&v2148[v2149];
            }
          }
          else
          {
            v2139 = (uint64_t *)v2616;
          }
          *(void *)v2099 = v2142;
          v2099 = (char *)(v2139[60] + 8);
          v2139[60] = (uint64_t)v2099;
          --v2131;
        }
        while (v2131);
        goto LABEL_2830;
      }
    }
    else
    {
      unint64_t v2132 = v2130 - v2131;
      uint64_t v2133 = v2616[30].i64[1] - v2616[29].i64[0];
      if (v2130 - v2131 <= (v2133 >> 3) - (v2126 >> 3))
      {
        if (v2132)
        {
          while (v2616[30].i64[1] != v2616[30].i64[0])
          {
            *(void *)&long long v2695 = operator new(0x1000uLL);
            std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(v2111, &v2695);
            if (!--v2132)
            {
              v2099 = (char *)v2616[30].i64[0];
              goto LABEL_2807;
            }
          }
          for (uint64_t i7 = 0; i7 != v2132; ++i7)
          {
            *(void *)&long long v2695 = operator new(0x1000uLL);
            std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v2111, &v2695);
            v2099 = (char *)v2616[30].i64[0];
            if (&v2099[-v2616[29].i64[1]] == (char *)8) {
              uint64_t v2285 = 255;
            }
            else {
              uint64_t v2285 = 256;
            }
            uint64_t v2286 = v2285 + v2616[31].i64[0];
            v2616[31].i64[0] = v2286;
          }
          v2131 += v2132;
          v2287 = v2616;
        }
        else
        {
LABEL_2807:
          v2287 = v2616;
          uint64_t v2286 = v2616[31].i64[0];
        }
        v2287[31].i64[0] = v2286 - (v2131 << 8);
        if (v2131)
        {
          v2139 = (uint64_t *)v2616;
          do
          {
            v2288 = (void *)v2139[59];
            uint64_t v2291 = *v2288;
            v2289 = (char *)(v2288 + 1);
            uint64_t v2290 = v2291;
            v2139[59] = (uint64_t)v2289;
            if (v2099 == (char *)v2139[61])
            {
              uint64_t v2292 = (uint64_t)&v2289[-v2111->i64[0]];
              if ((unint64_t)v2289 <= v2111->i64[0])
              {
                if (v2099 == (char *)v2111->i64[0]) {
                  unint64_t v2299 = 1;
                }
                else {
                  unint64_t v2299 = (uint64_t)&v2099[-v2111->i64[0]] >> 2;
                }
                v2300 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v2299);
                v2302 = &v2300[8 * (v2299 >> 2)];
                v2303 = (uint64_t *)v2616[29].i64[1];
                v2099 = v2302;
                uint64_t v2304 = v2616[30].i64[0] - (void)v2303;
                if (v2304)
                {
                  v2099 = &v2302[v2304 & 0xFFFFFFFFFFFFFFF8];
                  uint64_t v2305 = 8 * (v2304 >> 3);
                  v2306 = &v2300[8 * (v2299 >> 2)];
                  do
                  {
                    uint64_t v2307 = *v2303++;
                    *(void *)v2306 = v2307;
                    v2306 += 8;
                    v2305 -= 8;
                  }
                  while (v2305);
                }
                v2139 = (uint64_t *)v2616;
                v2308 = (void *)v2616[29].i64[0];
                v2616[29].i64[0] = (uint64_t)v2300;
                v2616[29].i64[1] = (uint64_t)v2302;
                v2616[30].i64[0] = (uint64_t)v2099;
                v2616[30].i64[1] = (uint64_t)&v2300[8 * v2301];
                if (v2308)
                {
                  operator delete(v2308);
                  v2099 = (char *)v2616[30].i64[0];
                }
              }
              else
              {
                uint64_t v2293 = v2292 >> 3;
                BOOL v381 = v2292 >> 3 < -1;
                uint64_t v2294 = (v2292 >> 3) + 2;
                if (v381) {
                  uint64_t v2295 = v2294;
                }
                else {
                  uint64_t v2295 = v2293 + 1;
                }
                v2296 = &v2289[-8 * (v2295 >> 1)];
                int64_t v2297 = v2099 - v2289;
                v2139 = (uint64_t *)v2616;
                if (v2099 != v2289)
                {
                  memmove(&v2289[-8 * (v2295 >> 1)], v2289, v2099 - v2289);
                  v2099 = (char *)v2616[29].i64[1];
                }
                v2298 = &v2099[-8 * (v2295 >> 1)];
                v2099 = &v2296[v2297];
                v2616[29].i64[1] = (uint64_t)v2298;
                v2616[30].i64[0] = (uint64_t)&v2296[v2297];
              }
            }
            else
            {
              v2139 = (uint64_t *)v2616;
            }
            *(void *)v2099 = v2290;
            v2099 = (char *)(v2139[60] + 8);
            v2139[60] = (uint64_t)v2099;
            --v2131;
          }
          while (v2131);
          goto LABEL_2830;
        }
      }
      else
      {
        uint64_t v2134 = v2126 >> 3;
        unint64_t v2135 = v2133 >> 2;
        if (v2135 <= v2132 + (v2126 >> 3)) {
          v2136 = (char *)(v2132 + (v2126 >> 3));
        }
        else {
          v2136 = (char *)v2135;
        }
        v2697 = &v2616[30].i8[8];
        if (v2136) {
          v2136 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>((unint64_t)v2136);
        }
        else {
          uint64_t v2137 = 0;
        }
        *(void *)&long long v2695 = v2136;
        *((void *)&v2695 + 1) = &v2136[8 * (v2134 - v2131)];
        *(void *)&long long v2696 = *((void *)&v2695 + 1);
        *((void *)&v2696 + 1) = &v2136[8 * v2137];
        v2203 = v2616;
        do
        {
          *(void *)&long long v2667 = operator new(0x1000uLL);
          std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(&v2695, &v2667);
          --v2132;
        }
        while (v2132);
        unint64_t v2633 = v2131 << 8;
        v2204 = (char *)v2696;
        if (v2131)
        {
          v2205 = (void *)v2616[29].i64[1];
          unint64_t v2663 = v2107;
          do
          {
            if (v2204 == *((char **)&v2696 + 1))
            {
              v2206 = (char *)*((void *)&v2695 + 1);
              v2207 = (void *)v2695;
              if (*((void *)&v2695 + 1) <= (unint64_t)v2695)
              {
                if (v2204 == (char *)v2695) {
                  unint64_t v2214 = 1;
                }
                else {
                  unint64_t v2214 = (uint64_t)&v2204[-v2695] >> 2;
                }
                v2215 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v2214);
                uint64_t v2217 = v2204 - v2206;
                BOOL v417 = v2204 == v2206;
                v2204 = &v2215[8 * (v2214 >> 2)];
                if (!v417)
                {
                  v2204 = &v2215[8 * (v2214 >> 2) + (v2217 & 0xFFFFFFFFFFFFFFF8)];
                  uint64_t v2218 = 8 * (v2217 >> 3);
                  v2219 = &v2215[8 * (v2214 >> 2)];
                  do
                  {
                    uint64_t v2220 = *(void *)v2206;
                    v2206 += 8;
                    *(void *)v2219 = v2220;
                    v2219 += 8;
                    v2218 -= 8;
                  }
                  while (v2218);
                }
                *(void *)&long long v2695 = v2215;
                *((void *)&v2695 + 1) = &v2215[8 * (v2214 >> 2)];
                *(void *)&long long v2696 = v2204;
                *((void *)&v2696 + 1) = &v2215[8 * v2216];
                if (v2207) {
                  operator delete(v2207);
                }
                v2203 = v2616;
              }
              else
              {
                unint64_t v2208 = v2110;
                uint64_t v2209 = (uint64_t)(*((void *)&v2695 + 1) - v2695) >> 3;
                if (v2209 >= -1) {
                  uint64_t v2210 = v2209 + 1;
                }
                else {
                  uint64_t v2210 = v2209 + 2;
                }
                uint64_t v2211 = *((void *)&v2695 + 1) - 8 * (v2210 >> 1);
                v2212 = &v2204[-*((void *)&v2695 + 1)];
                if (v2204 != *((char **)&v2695 + 1))
                {
                  memmove((void *)(*((void *)&v2695 + 1) - 8 * (v2210 >> 1)), *((const void **)&v2695 + 1), (size_t)&v2204[-*((void *)&v2695 + 1)]);
                  v2204 = v2206;
                }
                v2213 = &v2204[-8 * (v2210 >> 1)];
                v2204 = &v2212[v2211];
                *((void *)&v2695 + 1) = v2213;
                *(void *)&long long v2696 = &v2212[v2211];
                v2203 = v2616;
                unint64_t v2110 = v2208;
                unint64_t v2107 = v2663;
              }
            }
            *(void *)v2204 = *v2205;
            v2204 = (char *)(v2696 + 8);
            *(void *)&long long v2696 = v2696 + 8;
            v2205 = (void *)(v2203[29].i64[1] + 8);
            v2203[29].i64[1] = (uint64_t)v2205;
            --v2131;
          }
          while (v2131);
        }
        uint64_t v2221 = v2203[30].i64[0];
        v2222 = (char *)*((void *)&v2695 + 1);
        v2223 = (char *)v2695;
        v2224 = (char *)*((void *)&v2696 + 1);
        while (v2221 != v2616[29].i64[1])
        {
          if (v2222 == v2223)
          {
            if (v2204 >= v2224)
            {
              if (v2224 == v2223) {
                unint64_t v2229 = 1;
              }
              else {
                unint64_t v2229 = (v2224 - v2223) >> 2;
              }
              v2230 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v2229);
              v2232 = v2230;
              v2222 = &v2230[(2 * v2229 + 6) & 0xFFFFFFFFFFFFFFF8];
              uint64_t v2233 = v2204 - v2223;
              BOOL v417 = v2204 == v2223;
              v2204 = v2222;
              if (!v417)
              {
                v2204 = &v2222[v2233 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v2234 = 8 * (v2233 >> 3);
                v2235 = v2222;
                v2236 = v2223;
                do
                {
                  uint64_t v2237 = *(void *)v2236;
                  v2236 += 8;
                  *(void *)v2235 = v2237;
                  v2235 += 8;
                  v2234 -= 8;
                }
                while (v2234);
              }
              v2224 = &v2230[8 * v2231];
              if (v2223) {
                operator delete(v2223);
              }
              v2223 = v2232;
            }
            else
            {
              uint64_t v2225 = (v2224 - v2204) >> 3;
              if (v2225 >= -1) {
                unint64_t v2226 = v2225 + 1;
              }
              else {
                unint64_t v2226 = v2225 + 2;
              }
              v2227 = &v2204[8 * (v2226 >> 1)];
              v2222 = &v2227[-(v2204 - v2223)];
              size_t v2228 = v2204 - v2223;
              BOOL v417 = v2204 == v2223;
              v2204 = v2227;
              if (!v417) {
                memmove(v2222, v2223, v2228);
              }
            }
          }
          uint64_t v2238 = *(void *)(v2221 - 8);
          v2221 -= 8;
          *((void *)v2222 - 1) = v2238;
          v2222 -= 8;
        }
        *(void *)&long long v2695 = v2223;
        *((void *)&v2695 + 1) = v2222;
        *(void *)&long long v2696 = v2204;
        *((void *)&v2696 + 1) = v2224;
        long long v2241 = v2695;
        int64x2_t v2240 = (int64x2_t)v2696;
        *(void *)&long long v2695 = v2616[29].i64[0];
        v2239 = (void *)v2695;
        *((void *)&v2695 + 1) = v2221;
        v2616[29] = (int64x2_t)v2241;
        v2616[30] = v2240;
        v2616[31].i64[0] -= v2633;
        if (v2239)
        {
          operator delete(v2239);
          v2099 = (char *)v2616[30].i64[0];
        }
        else
        {
          v2099 = (char *)v2240.i64[0];
        }
      }
    }
    v2139 = (uint64_t *)v2616;
LABEL_2830:
    uint64_t v2096 = v2139[63];
    v2100 = (char *)v2139[59];
    unint64_t v2097 = v2139[62] + v2096;
    unint64_t v2098 = v2097 >> 8;
    unint64_t v2110 = v2645;
    goto LABEL_2831;
  }
  unint64_t v2112 = v2107 - v2095;
  if (v2107 > v2095)
  {
    uint64_t v2113 = 32 * v2103 - 1;
    uint64_t v2114 = v2099 - v2100;
    if (v2099 == v2100)
    {
      uint64_t v2113 = 0;
      ++v2112;
    }
    if ((_BYTE)v2112) {
      unint64_t v2115 = (v2112 >> 8) + 1;
    }
    else {
      unint64_t v2115 = v2112 >> 8;
    }
    unint64_t v2116 = v2113 - v2097;
    if (v2115 >= v2116 >> 8) {
      unint64_t v2117 = v2116 >> 8;
    }
    else {
      unint64_t v2117 = v2115;
    }
    if (v2115 <= v2116 >> 8)
    {
      for (v2616[31].i64[0] = v2095 + (v2117 << 8); v2117; --v2117)
      {
        uint64_t v2138 = v2616[30].i64[0];
        *(void *)&long long v2695 = *(void *)(v2138 - 8);
        v2616[30].i64[0] = v2138 - 8;
        std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v2111, &v2695);
      }
      goto LABEL_2751;
    }
    unint64_t v2118 = v2115 - v2117;
    uint64_t v2119 = v2616[29].i64[0];
    uint64_t v2120 = v2616[30].i64[1] - v2119;
    if (v2115 - v2117 > (v2120 >> 3) - (v2114 >> 3))
    {
      uint64_t v2121 = v2114 >> 3;
      BOOL v2122 = v2099 == v2100;
      if (v2120 >> 2 <= v2118 + v2121) {
        unint64_t v2123 = v2118 + v2121;
      }
      else {
        unint64_t v2123 = v2120 >> 2;
      }
      v2697 = &v2616[30].i8[8];
      if (v2123) {
        unint64_t v2123 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v2123);
      }
      else {
        uint64_t v2124 = 0;
      }
      unint64_t v2166 = (v2115 << 8) - v2122;
      *(void *)&long long v2695 = v2123;
      *((void *)&v2695 + 1) = v2123;
      *(void *)&long long v2696 = v2123;
      *((void *)&v2696 + 1) = v2123 + 8 * v2124;
      v2167 = (uint64_t *)v2616;
      do
      {
        *(void *)&long long v2667 = operator new(0x1000uLL);
        std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(&v2695, &v2667);
        --v2118;
      }
      while (v2118);
      unint64_t v2632 = v2166;
      uint64_t v2168 = v2616[30].i64[0];
      v2169 = (char *)v2696;
      if (v2117)
      {
        unint64_t v2662 = v2107;
        do
        {
          if (v2169 == *((char **)&v2696 + 1))
          {
            v2170 = (char *)*((void *)&v2695 + 1);
            v2171 = (void *)v2695;
            if (*((void *)&v2695 + 1) <= (unint64_t)v2695)
            {
              if (v2169 == (char *)v2695) {
                unint64_t v2178 = 1;
              }
              else {
                unint64_t v2178 = (uint64_t)&v2169[-v2695] >> 2;
              }
              v2179 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v2178);
              uint64_t v2181 = v2169 - v2170;
              BOOL v417 = v2169 == v2170;
              v2169 = &v2179[8 * (v2178 >> 2)];
              if (!v417)
              {
                v2169 = &v2179[8 * (v2178 >> 2) + (v2181 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v2182 = 8 * (v2181 >> 3);
                v2183 = &v2179[8 * (v2178 >> 2)];
                do
                {
                  uint64_t v2184 = *(void *)v2170;
                  v2170 += 8;
                  *(void *)v2183 = v2184;
                  v2183 += 8;
                  v2182 -= 8;
                }
                while (v2182);
              }
              *(void *)&long long v2695 = v2179;
              *((void *)&v2695 + 1) = &v2179[8 * (v2178 >> 2)];
              *(void *)&long long v2696 = v2169;
              *((void *)&v2696 + 1) = &v2179[8 * v2180];
              if (v2171) {
                operator delete(v2171);
              }
              v2167 = (uint64_t *)v2616;
            }
            else
            {
              unint64_t v2172 = v2110;
              uint64_t v2173 = (uint64_t)(*((void *)&v2695 + 1) - v2695) >> 3;
              if (v2173 >= -1) {
                uint64_t v2174 = v2173 + 1;
              }
              else {
                uint64_t v2174 = v2173 + 2;
              }
              uint64_t v2175 = *((void *)&v2695 + 1) - 8 * (v2174 >> 1);
              v2176 = &v2169[-*((void *)&v2695 + 1)];
              if (v2169 != *((char **)&v2695 + 1))
              {
                memmove((void *)(*((void *)&v2695 + 1) - 8 * (v2174 >> 1)), *((const void **)&v2695 + 1), (size_t)&v2169[-*((void *)&v2695 + 1)]);
                v2169 = v2170;
              }
              v2177 = &v2169[-8 * (v2174 >> 1)];
              v2169 = &v2176[v2175];
              *((void *)&v2695 + 1) = v2177;
              *(void *)&long long v2696 = &v2176[v2175];
              v2167 = (uint64_t *)v2616;
              unint64_t v2110 = v2172;
              unint64_t v2107 = v2662;
            }
          }
          *(void *)v2169 = *(void *)(v2168 - 8);
          v2169 = (char *)(v2696 + 8);
          *(void *)&long long v2696 = v2696 + 8;
          uint64_t v2168 = v2167[60] - 8;
          v2167[60] = v2168;
          --v2117;
        }
        while (v2117);
      }
      v2185 = (uint64_t *)v2167[59];
      if (v2185 == (uint64_t *)v2168)
      {
        v2185 = (uint64_t *)v2168;
      }
      else
      {
        do
        {
          if (v2169 == *((char **)&v2696 + 1))
          {
            v2186 = (char *)*((void *)&v2695 + 1);
            v2187 = (void *)v2695;
            if (*((void *)&v2695 + 1) <= (unint64_t)v2695)
            {
              if (v2169 == (char *)v2695) {
                unint64_t v2195 = 1;
              }
              else {
                unint64_t v2195 = (uint64_t)&v2169[-v2695] >> 2;
              }
              v2196 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v2195);
              uint64_t v2198 = v2169 - v2186;
              BOOL v417 = v2169 == v2186;
              v2169 = &v2196[8 * (v2195 >> 2)];
              if (!v417)
              {
                v2169 = &v2196[8 * (v2195 >> 2) + (v2198 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v2199 = 8 * (v2198 >> 3);
                v2200 = &v2196[8 * (v2195 >> 2)];
                do
                {
                  uint64_t v2201 = *(void *)v2186;
                  v2186 += 8;
                  *(void *)v2200 = v2201;
                  v2200 += 8;
                  v2199 -= 8;
                }
                while (v2199);
              }
              *(void *)&long long v2695 = v2196;
              *((void *)&v2695 + 1) = &v2196[8 * (v2195 >> 2)];
              *(void *)&long long v2696 = v2169;
              *((void *)&v2696 + 1) = &v2196[8 * v2197];
              if (v2187) {
                operator delete(v2187);
              }
              v2167 = (uint64_t *)v2616;
            }
            else
            {
              unint64_t v2188 = v2107;
              unint64_t v2189 = v2110;
              uint64_t v2190 = (uint64_t)(*((void *)&v2695 + 1) - v2695) >> 3;
              if (v2190 >= -1) {
                uint64_t v2191 = v2190 + 1;
              }
              else {
                uint64_t v2191 = v2190 + 2;
              }
              uint64_t v2192 = *((void *)&v2695 + 1) - 8 * (v2191 >> 1);
              v2193 = &v2169[-*((void *)&v2695 + 1)];
              if (v2169 != *((char **)&v2695 + 1))
              {
                memmove((void *)(*((void *)&v2695 + 1) - 8 * (v2191 >> 1)), *((const void **)&v2695 + 1), (size_t)&v2169[-*((void *)&v2695 + 1)]);
                v2169 = v2186;
              }
              v2194 = &v2169[-8 * (v2191 >> 1)];
              v2169 = &v2193[v2192];
              *((void *)&v2695 + 1) = v2194;
              *(void *)&long long v2696 = &v2193[v2192];
              v2167 = (uint64_t *)v2616;
              unint64_t v2110 = v2189;
              unint64_t v2107 = v2188;
            }
          }
          uint64_t v2202 = *v2185++;
          *(void *)v2169 = v2202;
          v2169 = (char *)(v2696 + 8);
          *(void *)&long long v2696 = v2696 + 8;
        }
        while (v2185 != (uint64_t *)v2167[60]);
        uint64_t v2168 = v2167[59];
      }
      v2242 = (void *)v2167[58];
      *((_OWORD *)v2167 + 29) = v2695;
      *(void *)&long long v2695 = v2242;
      *((void *)&v2695 + 1) = v2168;
      *(void *)&long long v2696 = v2185;
      uint64_t v2243 = *((void *)&v2696 + 1);
      v2167[60] = (uint64_t)v2169;
      v2167[61] = v2243;
      v2167[62] += v2632;
      if (v2242) {
        operator delete(v2242);
      }
LABEL_2751:
      unint64_t v2095 = v2616[31].u64[0];
      v2100 = (char *)v2616[29].i64[1];
      v2099 = (char *)v2616[30].i64[0];
      unint64_t v2102 = v2095 >> 8;
      goto LABEL_2752;
    }
    if (v2118)
    {
      if (v2100 == (char *)v2119)
      {
LABEL_2650:
        unint64_t v2163 = v2118;
        do
        {
          *(void *)&long long v2695 = operator new(0x1000uLL);
          std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(v2111, &v2695);
          --v2163;
        }
        while (v2163);
        v2117 += v2118;
        v2164 = v2616;
        unint64_t v2095 = v2616[31].u64[0];
LABEL_2658:
        for (v2164[31].i64[0] = v2095 + (v2117 << 8); v2117; --v2117)
        {
          uint64_t v2165 = v2616[30].i64[0];
          *(void *)&long long v2695 = *(void *)(v2165 - 8);
          v2616[30].i64[0] = v2165 - 8;
          std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v2111, &v2695);
        }
        goto LABEL_2751;
      }
      while (1)
      {
        *(void *)&long long v2695 = operator new(0x1000uLL);
        std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v2111, &v2695);
        uint64_t v2161 = v2616[29].i64[1];
        uint64_t v2162 = v2616[30].i64[0] - v2161 == 8 ? 255 : 256;
        unint64_t v2095 = v2162 + v2616[31].i64[0];
        v2616[31].i64[0] = v2095;
        if (!--v2118) {
          break;
        }
        if (v2161 == v2111->i64[0]) {
          goto LABEL_2650;
        }
      }
    }
    v2164 = v2616;
    goto LABEL_2658;
  }
LABEL_2752:
  v2244 = &v2100[8 * v2102];
  if (v2099 == v2100) {
    v2245 = 0;
  }
  else {
    v2245 = (long long *)(*(void *)v2244 + 16 * v2095);
  }
  if (v2107 <= v2110)
  {
    v2249 = v2245;
    v2248 = &v2100[8 * v2102];
    if (!v2107) {
      goto LABEL_2878;
    }
    goto LABEL_2770;
  }
  v2246 = &v2105[16 * (v2107 - v2110)];
  if (v2110 < v2107 >> 1) {
    v2246 = &v2106[-16 * v2110];
  }
  if (v2246 == v2105)
  {
    v2249 = v2245;
    v2248 = &v2100[8 * v2102];
  }
  else
  {
    v2247 = v2246;
    v2248 = &v2100[8 * v2102];
    v2249 = v2245;
    do
    {
      if (v2249 == *(long long **)v2248)
      {
        uint64_t v2250 = *((void *)v2248 - 1);
        v2248 -= 8;
        v2249 = (long long *)(v2250 + 4096);
      }
      uint64_t v2251 = *((void *)v2247 - 2);
      v2247 -= 16;
      *((void *)v2249-- - 2) = v2251;
      uint64_t v2252 = *((void *)v2247 + 1);
      *((void *)v2249 + 1) = v2252;
      if (v2252)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v2252 + 8), 1uLL, memory_order_relaxed);
        unint64_t v2095 = v2616[31].u64[0];
      }
      --v2095;
      uint64_t v2253 = v2616[31].i64[1] + 1;
      v2616[31].i64[0] = v2095;
      v2616[31].i64[1] = v2253;
    }
    while (v2247 != v2105);
    v2105 = v2246;
  }
  unint64_t v2107 = v2110;
  if (v2110)
  {
LABEL_2770:
    v2254 = (long long **)std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator+[abi:ne180100](v2244, (uint64_t)v2245, v2107);
    v2256 = v2254;
    v2257 = v2255;
    if (v2245 != v2255)
    {
      v2258 = v2254;
      v2259 = v2255;
      do
      {
        if (v2249 == *(long long **)v2248)
        {
          uint64_t v2260 = *((void *)v2248 - 1);
          v2248 -= 8;
          v2249 = (long long *)(v2260 + 4096);
        }
        if (v2259 == *v2258)
        {
          uint64_t v2261 = (uint64_t)*--v2258;
          v2259 = (long long *)(v2261 + 4096);
        }
        long long v2262 = *--v2259;
        *--v2249 = v2262;
        *(void *)v2259 = 0;
        *((void *)v2259 + 1) = 0;
        v2616[31] = vaddq_s64(v2616[31], (int64x2_t)xmmword_1901C6000);
      }
      while (v2259 != v2245);
    }
    if (v2107 < v2110)
    {
      v2263 = (long long **)std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator+[abi:ne180100](v2244, (uint64_t)v2245, v2110);
      v2265 = v2264;
      if (v2256 == v2263)
      {
        v2274 = v2257;
        v2275 = v2265;
        v2271 = v2244;
        uint64_t v2272 = (uint64_t)v2245;
      }
      else
      {
        v2266 = v2263;
        v2268 = *v2256;
        v2267 = v2256 + 1;
        v2269 = v2268 + 256;
        v2270 = v2257;
        v2271 = v2244;
        uint64_t v2272 = (uint64_t)v2245;
        while (1)
        {
          std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>(&v2695, v2270, v2269, v2271, v2272);
          v2271 = (char *)*((void *)&v2695 + 1);
          uint64_t v2272 = v2696;
          if (v2267 == v2266) {
            break;
          }
          v2273 = *v2267++;
          v2270 = v2273;
          v2269 = v2273 + 256;
        }
        v2274 = *v2266;
        v2275 = v2265;
      }
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>(&v2695, v2274, v2275, v2271, v2272);
      v2245 = (long long *)v2696;
      v2244 = (char *)*((void *)&v2695 + 1);
    }
    if (v2105 != v2106)
    {
      v2276 = *(char **)v2244;
      while (1)
      {
        uint64_t v2277 = v2276 - (char *)v2245 + 4096;
        if ((v2106 - v2105) >> 4 >= v2277 >> 4) {
          uint64_t v2278 = v2277 >> 4;
        }
        else {
          uint64_t v2278 = (v2106 - v2105) >> 4;
        }
        if (v2278)
        {
          v2279 = &v2105[16 * v2278];
          do
          {
            uint64_t v2281 = *(void *)v2105;
            uint64_t v2280 = *((void *)v2105 + 1);
            if (v2280) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v2280 + 8), 1uLL, memory_order_relaxed);
            }
            v2282 = (std::__shared_weak_count *)*((void *)v2245 + 1);
            *(void *)v2245 = v2281;
            *((void *)v2245 + 1) = v2280;
            if (v2282) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v2282);
            }
            v2105 += 16;
            ++v2245;
          }
          while (v2105 != v2279);
          v2105 = v2279;
        }
        if (v2105 == v2106) {
          break;
        }
        v2283 = (char *)*((void *)v2244 + 1);
        v2244 += 8;
        v2276 = v2283;
        v2245 = (long long *)v2283;
      }
    }
  }
LABEL_2878:
  atomic_fetch_add(v2616[32].i64, (v2672 - v2671) >> 4);
  uint64_t v2348 = v2616[35].i64[1];
  unint64_t v2349 = v2616[35].u64[0];
  unint64_t v2350 = v2349 + v2348;
  v2351 = (char *)v2616[33].i64[1];
  unint64_t v2352 = (v2349 + v2348) >> 8;
  v2353 = &v2351[8 * v2352];
  v2354 = (char *)v2616[34].i64[0];
  int64_t v2355 = v2354 - v2351;
  if (v2354 == v2351)
  {
    uint64_t v2356 = 0;
    uint64_t v2362 = 0;
    v2357 = (char *)v2668;
    v2358 = (char *)v2669;
    unint64_t v2359 = v2669 - v2668;
    unint64_t v2360 = v2349 >> 8;
    v2361 = &v2351[8 * (v2349 >> 8)];
  }
  else
  {
    uint64_t v2356 = *(void *)v2353 + 16 * v2350;
    v2357 = (char *)v2668;
    v2358 = (char *)v2669;
    unint64_t v2359 = v2669 - v2668;
    unint64_t v2360 = v2349 >> 8;
    v2361 = &v2351[8 * (v2349 >> 8)];
    uint64_t v2362 = *(void *)v2361 + 16 * v2349;
  }
  if (v2356 == v2362) {
    unint64_t v2363 = 0;
  }
  else {
    unint64_t v2363 = ((v2356 - *(void *)v2353) >> 4) + 32 * (v2353 - v2361) - ((v2362 - *(void *)v2361) >> 4);
  }
  v2364 = v2616 + 33;
  if (v2363 >= v2348 - v2363)
  {
    uint64_t v2378 = 32 * v2355 - 1;
    uint64_t v2379 = v2354 - v2351;
    if (v2354 == v2351) {
      uint64_t v2378 = 0;
    }
    unint64_t v2380 = v2378 - v2350;
    BOOL v363 = v2359 >= v2380;
    unint64_t v2381 = v2359 - v2380;
    if (v2381 == 0 || !v363)
    {
LABEL_3133:
      v2560 = &v2351[8 * v2352];
      if (v2354 == v2351) {
        uint64_t v2561 = 0;
      }
      else {
        uint64_t v2561 = *(void *)v2560 + 16 * v2350;
      }
      unint64_t v2562 = v2348 - v2363;
      if (v2562 >= v2359)
      {
        v2566 = (void *)v2561;
        v2565 = &v2351[8 * v2352];
        if (!v2359) {
          goto LABEL_3180;
        }
      }
      else
      {
        v2563 = &v2358[16 * (v2562 - v2359)];
        if (v2562 < v2359 >> 1) {
          v2563 = &v2357[16 * v2562];
        }
        if (v2563 == v2358)
        {
          v2566 = (void *)v2561;
          v2565 = &v2351[8 * v2352];
        }
        else
        {
          v2564 = v2563;
          v2565 = v2560;
          v2566 = (void *)v2561;
          do
          {
            void *v2566 = *(void *)v2564;
            uint64_t v2567 = *((void *)v2564 + 1);
            v2566[1] = v2567;
            if (v2567) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v2567 + 8), 1uLL, memory_order_relaxed);
            }
            v2566 += 2;
            if ((void *)((char *)v2566 - *(void *)v2565) == (void *)4096)
            {
              v2568 = (void *)*((void *)v2565 + 1);
              v2565 += 8;
              v2566 = v2568;
            }
            ++v2616[35].i64[1];
            v2564 += 16;
          }
          while (v2564 != v2358);
          v2358 = v2563;
        }
        unint64_t v2359 = v2562;
        if (!v2562) {
          goto LABEL_3180;
        }
      }
      v2569 = std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator-[abi:ne180100](v2560, v2561, v2359);
      v2571 = v2569;
      uint64_t v2572 = v2570;
      if (v2561 != v2570)
      {
        v2573 = v2569;
        uint64_t v2574 = v2570;
        do
        {
          *(_OWORD *)v2566 = *(_OWORD *)v2574;
          v2566 += 2;
          *(void *)uint64_t v2574 = 0;
          *(void *)(v2574 + 8) = 0;
          if ((void *)((char *)v2566 - *(void *)v2565) == (void *)4096)
          {
            v2575 = (void *)*((void *)v2565 + 1);
            v2565 += 8;
            v2566 = v2575;
          }
          v2574 += 16;
          if (v2574 - *v2573 == 4096)
          {
            uint64_t v2576 = v2573[1];
            ++v2573;
            uint64_t v2574 = v2576;
          }
          ++v2616[35].i64[1];
        }
        while (v2574 != v2561);
      }
      if (v2359 < v2562)
      {
        v2577 = std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator-[abi:ne180100](v2560, v2561, v2562);
        uint64_t v2579 = v2578;
        if (v2577 == v2571)
        {
          uint64_t v2588 = v2572;
          v2585 = v2560;
          uint64_t v2586 = v2561;
        }
        else
        {
          v2580 = v2577;
          uint64_t v2583 = *v2571;
          v2582 = v2571 - 1;
          uint64_t v2581 = v2583;
          uint64_t v2584 = v2572;
          v2585 = v2560;
          uint64_t v2586 = v2561;
          while (1)
          {
            std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>(&v2695, v2581, v2584, v2585, v2586);
            v2585 = (char *)*((void *)&v2695 + 1);
            uint64_t v2586 = v2696;
            if (v2582 == v2580) {
              break;
            }
            uint64_t v2587 = *v2582--;
            uint64_t v2581 = v2587;
            uint64_t v2584 = v2587 + 4096;
          }
          uint64_t v2588 = *v2580 + 4096;
          uint64_t v2578 = v2579;
        }
        std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>(&v2695, v2578, v2588, v2585, v2586);
        uint64_t v2561 = v2696;
        v2560 = (char *)*((void *)&v2695 + 1);
      }
      if (v2357 != v2358)
      {
        uint64_t v2589 = *(void *)v2560;
        while (1)
        {
          uint64_t v2590 = v2561 - v2589;
          if ((v2358 - v2357) >> 4 >= v2590 >> 4) {
            uint64_t v2591 = v2590 >> 4;
          }
          else {
            uint64_t v2591 = (v2358 - v2357) >> 4;
          }
          if (v2591)
          {
            v2592 = (std::__shared_weak_count **)(v2358 - 8);
            uint64_t v2593 = -16 * v2591;
            v2594 = (std::__shared_weak_count **)(v2561 - 8);
            do
            {
              v2596 = *(v2592 - 1);
              v2595 = *v2592;
              if (*v2592) {
                atomic_fetch_add_explicit(&v2595->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              v2597 = *v2594;
              *(v2594 - 1) = v2596;
              *v2594 = v2595;
              if (v2597) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v2597);
              }
              v2592 -= 2;
              v2594 -= 2;
              v2593 += 16;
            }
            while (v2593);
          }
          v2358 -= 16 * v2591;
          if (v2358 == v2357) {
            break;
          }
          uint64_t v2598 = *((void *)v2560 - 1);
          v2560 -= 8;
          uint64_t v2589 = v2598;
          uint64_t v2561 = v2598 + 4096;
        }
      }
      goto LABEL_3180;
    }
    if (v2354 == v2351) {
      unint64_t v2382 = v2381 + 1;
    }
    else {
      unint64_t v2382 = v2381;
    }
    if ((_BYTE)v2382) {
      unint64_t v2383 = (v2382 >> 8) + 1;
    }
    else {
      unint64_t v2383 = v2382 >> 8;
    }
    if (v2383 >= v2360) {
      unint64_t v2384 = v2360;
    }
    else {
      unint64_t v2384 = v2383;
    }
    unint64_t v2646 = v2363;
    if (v2383 <= v2360)
    {
      v2616[35].i64[0] = v2349 - (v2384 << 8);
      if (v2384)
      {
        v2392 = (uint64_t *)v2616;
        do
        {
          v2393 = (void *)v2392[67];
          uint64_t v2396 = *v2393;
          v2394 = (char *)(v2393 + 1);
          uint64_t v2395 = v2396;
          v2392[67] = (uint64_t)v2394;
          if (v2354 == (char *)v2392[69])
          {
            uint64_t v2397 = (uint64_t)&v2394[-v2364->i64[0]];
            if ((unint64_t)v2394 <= v2364->i64[0])
            {
              if (v2354 == (char *)v2364->i64[0]) {
                unint64_t v2404 = 1;
              }
              else {
                unint64_t v2404 = (uint64_t)&v2354[-v2364->i64[0]] >> 2;
              }
              v2405 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v2404);
              v2407 = &v2405[8 * (v2404 >> 2)];
              v2408 = (uint64_t *)v2616[33].i64[1];
              v2354 = v2407;
              uint64_t v2409 = v2616[34].i64[0] - (void)v2408;
              if (v2409)
              {
                v2354 = &v2407[v2409 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v2410 = 8 * (v2409 >> 3);
                v2411 = &v2405[8 * (v2404 >> 2)];
                do
                {
                  uint64_t v2412 = *v2408++;
                  *(void *)v2411 = v2412;
                  v2411 += 8;
                  v2410 -= 8;
                }
                while (v2410);
              }
              v2392 = (uint64_t *)v2616;
              v2413 = (void *)v2616[33].i64[0];
              v2616[33].i64[0] = (uint64_t)v2405;
              v2616[33].i64[1] = (uint64_t)v2407;
              v2616[34].i64[0] = (uint64_t)v2354;
              v2616[34].i64[1] = (uint64_t)&v2405[8 * v2406];
              if (v2413)
              {
                operator delete(v2413);
                v2354 = (char *)v2616[34].i64[0];
              }
            }
            else
            {
              uint64_t v2398 = v2397 >> 3;
              BOOL v381 = v2397 >> 3 < -1;
              uint64_t v2399 = (v2397 >> 3) + 2;
              if (v381) {
                uint64_t v2400 = v2399;
              }
              else {
                uint64_t v2400 = v2398 + 1;
              }
              v2401 = &v2394[-8 * (v2400 >> 1)];
              int64_t v2402 = v2354 - v2394;
              v2392 = (uint64_t *)v2616;
              if (v2354 != v2394)
              {
                memmove(&v2394[-8 * (v2400 >> 1)], v2394, v2354 - v2394);
                v2354 = (char *)v2616[33].i64[1];
              }
              v2403 = &v2354[-8 * (v2400 >> 1)];
              v2354 = &v2401[v2402];
              v2616[34].i64[0] = (uint64_t)&v2401[v2402];
              v2616[33].i64[1] = (uint64_t)v2403;
            }
          }
          else
          {
            v2392 = (uint64_t *)v2616;
          }
          *(void *)v2354 = v2395;
          v2354 = (char *)(v2392[68] + 8);
          v2392[68] = (uint64_t)v2354;
          --v2384;
        }
        while (v2384);
        goto LABEL_3132;
      }
    }
    else
    {
      unint64_t v2385 = v2383 - v2384;
      uint64_t v2386 = v2616[34].i64[1] - v2616[33].i64[0];
      if (v2383 - v2384 <= (v2386 >> 3) - (v2379 >> 3))
      {
        if (v2385)
        {
          while (v2616[34].i64[1] != v2616[34].i64[0])
          {
            *(void *)&long long v2695 = operator new(0x1000uLL);
            std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(v2364, &v2695);
            if (!--v2385)
            {
              v2354 = (char *)v2616[34].i64[0];
              goto LABEL_3109;
            }
          }
          for (uint64_t i8 = 0; i8 != v2385; ++i8)
          {
            *(void *)&long long v2695 = operator new(0x1000uLL);
            std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v2364, &v2695);
            v2354 = (char *)v2616[34].i64[0];
            if (&v2354[-v2616[33].i64[1]] == (char *)8) {
              uint64_t v2536 = 255;
            }
            else {
              uint64_t v2536 = 256;
            }
            uint64_t v2537 = v2536 + v2616[35].i64[0];
            v2616[35].i64[0] = v2537;
          }
          v2384 += v2385;
          v2538 = v2616;
        }
        else
        {
LABEL_3109:
          v2538 = v2616;
          uint64_t v2537 = v2616[35].i64[0];
        }
        v2538[35].i64[0] = v2537 - (v2384 << 8);
        if (v2384)
        {
          v2392 = (uint64_t *)v2616;
          do
          {
            v2539 = (void *)v2392[67];
            uint64_t v2542 = *v2539;
            v2540 = (char *)(v2539 + 1);
            uint64_t v2541 = v2542;
            v2392[67] = (uint64_t)v2540;
            if (v2354 == (char *)v2392[69])
            {
              uint64_t v2543 = (uint64_t)&v2540[-v2364->i64[0]];
              if ((unint64_t)v2540 <= v2364->i64[0])
              {
                if (v2354 == (char *)v2364->i64[0]) {
                  unint64_t v2550 = 1;
                }
                else {
                  unint64_t v2550 = (uint64_t)&v2354[-v2364->i64[0]] >> 2;
                }
                v2551 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v2550);
                v2553 = &v2551[8 * (v2550 >> 2)];
                v2554 = (uint64_t *)v2616[33].i64[1];
                v2354 = v2553;
                uint64_t v2555 = v2616[34].i64[0] - (void)v2554;
                if (v2555)
                {
                  v2354 = &v2553[v2555 & 0xFFFFFFFFFFFFFFF8];
                  uint64_t v2556 = 8 * (v2555 >> 3);
                  v2557 = &v2551[8 * (v2550 >> 2)];
                  do
                  {
                    uint64_t v2558 = *v2554++;
                    *(void *)v2557 = v2558;
                    v2557 += 8;
                    v2556 -= 8;
                  }
                  while (v2556);
                }
                v2392 = (uint64_t *)v2616;
                v2559 = (void *)v2616[33].i64[0];
                v2616[33].i64[0] = (uint64_t)v2551;
                v2616[33].i64[1] = (uint64_t)v2553;
                v2616[34].i64[0] = (uint64_t)v2354;
                v2616[34].i64[1] = (uint64_t)&v2551[8 * v2552];
                if (v2559)
                {
                  operator delete(v2559);
                  v2354 = (char *)v2616[34].i64[0];
                }
              }
              else
              {
                uint64_t v2544 = v2543 >> 3;
                BOOL v381 = v2543 >> 3 < -1;
                uint64_t v2545 = (v2543 >> 3) + 2;
                if (v381) {
                  uint64_t v2546 = v2545;
                }
                else {
                  uint64_t v2546 = v2544 + 1;
                }
                v2547 = &v2540[-8 * (v2546 >> 1)];
                int64_t v2548 = v2354 - v2540;
                v2392 = (uint64_t *)v2616;
                if (v2354 != v2540)
                {
                  memmove(&v2540[-8 * (v2546 >> 1)], v2540, v2354 - v2540);
                  v2354 = (char *)v2616[33].i64[1];
                }
                v2549 = &v2354[-8 * (v2546 >> 1)];
                v2354 = &v2547[v2548];
                v2616[34].i64[0] = (uint64_t)&v2547[v2548];
                v2616[33].i64[1] = (uint64_t)v2549;
              }
            }
            else
            {
              v2392 = (uint64_t *)v2616;
            }
            *(void *)v2354 = v2541;
            v2354 = (char *)(v2392[68] + 8);
            v2392[68] = (uint64_t)v2354;
            --v2384;
          }
          while (v2384);
          goto LABEL_3132;
        }
      }
      else
      {
        uint64_t v2387 = v2379 >> 3;
        unint64_t v2388 = v2386 >> 2;
        if (v2388 <= v2385 + (v2379 >> 3)) {
          v2389 = (char *)(v2385 + (v2379 >> 3));
        }
        else {
          v2389 = (char *)v2388;
        }
        v2697 = &v2616[34].i8[8];
        if (v2389) {
          v2389 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>((unint64_t)v2389);
        }
        else {
          uint64_t v2390 = 0;
        }
        *(void *)&long long v2695 = v2389;
        *((void *)&v2695 + 1) = &v2389[8 * (v2387 - v2384)];
        *(void *)&long long v2696 = *((void *)&v2695 + 1);
        *((void *)&v2696 + 1) = &v2389[8 * v2390];
        v2456 = v2616;
        do
        {
          *(void *)&long long v2667 = operator new(0x1000uLL);
          std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(&v2695, &v2667);
          --v2385;
        }
        while (v2385);
        unint64_t v2635 = v2384 << 8;
        v2457 = (char *)v2696;
        if (v2384)
        {
          v2458 = (void *)v2616[33].i64[1];
          unint64_t v2665 = v2359;
          do
          {
            if (v2457 == *((char **)&v2696 + 1))
            {
              v2459 = (char *)*((void *)&v2695 + 1);
              v2460 = (void *)v2695;
              if (*((void *)&v2695 + 1) <= (unint64_t)v2695)
              {
                if (v2457 == (char *)v2695) {
                  unint64_t v2467 = 1;
                }
                else {
                  unint64_t v2467 = (uint64_t)&v2457[-v2695] >> 2;
                }
                v2468 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v2467);
                uint64_t v2470 = v2457 - v2459;
                BOOL v417 = v2457 == v2459;
                v2457 = &v2468[8 * (v2467 >> 2)];
                if (!v417)
                {
                  v2457 = &v2468[8 * (v2467 >> 2) + (v2470 & 0xFFFFFFFFFFFFFFF8)];
                  uint64_t v2471 = 8 * (v2470 >> 3);
                  v2472 = &v2468[8 * (v2467 >> 2)];
                  do
                  {
                    uint64_t v2473 = *(void *)v2459;
                    v2459 += 8;
                    *(void *)v2472 = v2473;
                    v2472 += 8;
                    v2471 -= 8;
                  }
                  while (v2471);
                }
                *(void *)&long long v2695 = v2468;
                *((void *)&v2695 + 1) = &v2468[8 * (v2467 >> 2)];
                *(void *)&long long v2696 = v2457;
                *((void *)&v2696 + 1) = &v2468[8 * v2469];
                if (v2460) {
                  operator delete(v2460);
                }
                v2456 = v2616;
              }
              else
              {
                unint64_t v2461 = v2363;
                uint64_t v2462 = (uint64_t)(*((void *)&v2695 + 1) - v2695) >> 3;
                if (v2462 >= -1) {
                  uint64_t v2463 = v2462 + 1;
                }
                else {
                  uint64_t v2463 = v2462 + 2;
                }
                uint64_t v2464 = *((void *)&v2695 + 1) - 8 * (v2463 >> 1);
                v2465 = &v2457[-*((void *)&v2695 + 1)];
                if (v2457 != *((char **)&v2695 + 1))
                {
                  memmove((void *)(*((void *)&v2695 + 1) - 8 * (v2463 >> 1)), *((const void **)&v2695 + 1), (size_t)&v2457[-*((void *)&v2695 + 1)]);
                  v2457 = v2459;
                }
                v2466 = &v2457[-8 * (v2463 >> 1)];
                v2457 = &v2465[v2464];
                *((void *)&v2695 + 1) = v2466;
                *(void *)&long long v2696 = &v2465[v2464];
                v2456 = v2616;
                unint64_t v2363 = v2461;
                unint64_t v2359 = v2665;
              }
            }
            *(void *)v2457 = *v2458;
            v2457 = (char *)(v2696 + 8);
            *(void *)&long long v2696 = v2696 + 8;
            v2458 = (void *)(v2456[33].i64[1] + 8);
            v2456[33].i64[1] = (uint64_t)v2458;
            --v2384;
          }
          while (v2384);
        }
        uint64_t v2474 = v2456[34].i64[0];
        v2475 = (char *)*((void *)&v2695 + 1);
        v2476 = (char *)v2695;
        v2477 = (char *)*((void *)&v2696 + 1);
        while (v2474 != v2616[33].i64[1])
        {
          if (v2475 == v2476)
          {
            if (v2457 >= v2477)
            {
              if (v2477 == v2476) {
                unint64_t v2482 = 1;
              }
              else {
                unint64_t v2482 = (v2477 - v2476) >> 2;
              }
              v2483 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v2482);
              v2485 = v2483;
              v2475 = &v2483[(2 * v2482 + 6) & 0xFFFFFFFFFFFFFFF8];
              uint64_t v2486 = v2457 - v2476;
              BOOL v417 = v2457 == v2476;
              v2457 = v2475;
              if (!v417)
              {
                v2457 = &v2475[v2486 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v2487 = 8 * (v2486 >> 3);
                v2488 = v2475;
                v2489 = v2476;
                do
                {
                  uint64_t v2490 = *(void *)v2489;
                  v2489 += 8;
                  *(void *)v2488 = v2490;
                  v2488 += 8;
                  v2487 -= 8;
                }
                while (v2487);
              }
              v2477 = &v2483[8 * v2484];
              if (v2476) {
                operator delete(v2476);
              }
              v2476 = v2485;
            }
            else
            {
              uint64_t v2478 = (v2477 - v2457) >> 3;
              if (v2478 >= -1) {
                unint64_t v2479 = v2478 + 1;
              }
              else {
                unint64_t v2479 = v2478 + 2;
              }
              v2480 = &v2457[8 * (v2479 >> 1)];
              v2475 = &v2480[-(v2457 - v2476)];
              size_t v2481 = v2457 - v2476;
              BOOL v417 = v2457 == v2476;
              v2457 = v2480;
              if (!v417) {
                memmove(v2475, v2476, v2481);
              }
            }
          }
          uint64_t v2491 = *(void *)(v2474 - 8);
          v2474 -= 8;
          *((void *)v2475 - 1) = v2491;
          v2475 -= 8;
        }
        *(void *)&long long v2695 = v2476;
        *((void *)&v2695 + 1) = v2475;
        *(void *)&long long v2696 = v2457;
        *((void *)&v2696 + 1) = v2477;
        long long v2494 = v2695;
        int64x2_t v2493 = (int64x2_t)v2696;
        *(void *)&long long v2695 = v2616[33].i64[0];
        v2492 = (void *)v2695;
        *((void *)&v2695 + 1) = v2474;
        v2616[33] = (int64x2_t)v2494;
        v2616[34] = v2493;
        v2616[35].i64[0] -= v2635;
        if (v2492)
        {
          operator delete(v2492);
          v2354 = (char *)v2616[34].i64[0];
        }
        else
        {
          v2354 = (char *)v2493.i64[0];
        }
      }
    }
    v2392 = (uint64_t *)v2616;
LABEL_3132:
    uint64_t v2348 = v2392[71];
    v2351 = (char *)v2392[67];
    unint64_t v2350 = v2392[70] + v2348;
    unint64_t v2352 = v2350 >> 8;
    unint64_t v2363 = v2646;
    goto LABEL_3133;
  }
  unint64_t v2365 = v2359 - v2349;
  if (v2359 > v2349)
  {
    uint64_t v2366 = 32 * v2355 - 1;
    uint64_t v2367 = v2354 - v2351;
    if (v2354 == v2351)
    {
      uint64_t v2366 = 0;
      ++v2365;
    }
    if ((_BYTE)v2365) {
      unint64_t v2368 = (v2365 >> 8) + 1;
    }
    else {
      unint64_t v2368 = v2365 >> 8;
    }
    unint64_t v2369 = v2366 - v2350;
    if (v2368 >= v2369 >> 8) {
      unint64_t v2370 = v2369 >> 8;
    }
    else {
      unint64_t v2370 = v2368;
    }
    if (v2368 <= v2369 >> 8)
    {
      for (v2616[35].i64[0] = v2349 + (v2370 << 8); v2370; --v2370)
      {
        uint64_t v2391 = v2616[34].i64[0];
        *(void *)&long long v2695 = *(void *)(v2391 - 8);
        v2616[34].i64[0] = v2391 - 8;
        std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v2364, &v2695);
      }
      goto LABEL_3053;
    }
    unint64_t v2371 = v2368 - v2370;
    uint64_t v2372 = v2616[33].i64[0];
    uint64_t v2373 = v2616[34].i64[1] - v2372;
    if (v2368 - v2370 > (v2373 >> 3) - (v2367 >> 3))
    {
      uint64_t v2374 = v2367 >> 3;
      BOOL v2375 = v2354 == v2351;
      if (v2373 >> 2 <= v2371 + v2374) {
        unint64_t v2376 = v2371 + v2374;
      }
      else {
        unint64_t v2376 = v2373 >> 2;
      }
      v2697 = &v2616[34].i8[8];
      if (v2376) {
        unint64_t v2376 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v2376);
      }
      else {
        uint64_t v2377 = 0;
      }
      unint64_t v2419 = (v2368 << 8) - v2375;
      *(void *)&long long v2695 = v2376;
      *((void *)&v2695 + 1) = v2376;
      *(void *)&long long v2696 = v2376;
      *((void *)&v2696 + 1) = v2376 + 8 * v2377;
      v2420 = (uint64_t *)v2616;
      do
      {
        *(void *)&long long v2667 = operator new(0x1000uLL);
        std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(&v2695, &v2667);
        --v2371;
      }
      while (v2371);
      unint64_t v2634 = v2419;
      uint64_t v2421 = v2616[34].i64[0];
      v2422 = (char *)v2696;
      if (v2370)
      {
        unint64_t v2664 = v2359;
        do
        {
          if (v2422 == *((char **)&v2696 + 1))
          {
            v2423 = (char *)*((void *)&v2695 + 1);
            v2424 = (void *)v2695;
            if (*((void *)&v2695 + 1) <= (unint64_t)v2695)
            {
              if (v2422 == (char *)v2695) {
                unint64_t v2431 = 1;
              }
              else {
                unint64_t v2431 = (uint64_t)&v2422[-v2695] >> 2;
              }
              v2432 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v2431);
              uint64_t v2434 = v2422 - v2423;
              BOOL v417 = v2422 == v2423;
              v2422 = &v2432[8 * (v2431 >> 2)];
              if (!v417)
              {
                v2422 = &v2432[8 * (v2431 >> 2) + (v2434 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v2435 = 8 * (v2434 >> 3);
                v2436 = &v2432[8 * (v2431 >> 2)];
                do
                {
                  uint64_t v2437 = *(void *)v2423;
                  v2423 += 8;
                  *(void *)v2436 = v2437;
                  v2436 += 8;
                  v2435 -= 8;
                }
                while (v2435);
              }
              *(void *)&long long v2695 = v2432;
              *((void *)&v2695 + 1) = &v2432[8 * (v2431 >> 2)];
              *(void *)&long long v2696 = v2422;
              *((void *)&v2696 + 1) = &v2432[8 * v2433];
              if (v2424) {
                operator delete(v2424);
              }
              v2420 = (uint64_t *)v2616;
            }
            else
            {
              unint64_t v2425 = v2363;
              uint64_t v2426 = (uint64_t)(*((void *)&v2695 + 1) - v2695) >> 3;
              if (v2426 >= -1) {
                uint64_t v2427 = v2426 + 1;
              }
              else {
                uint64_t v2427 = v2426 + 2;
              }
              uint64_t v2428 = *((void *)&v2695 + 1) - 8 * (v2427 >> 1);
              v2429 = &v2422[-*((void *)&v2695 + 1)];
              if (v2422 != *((char **)&v2695 + 1))
              {
                memmove((void *)(*((void *)&v2695 + 1) - 8 * (v2427 >> 1)), *((const void **)&v2695 + 1), (size_t)&v2422[-*((void *)&v2695 + 1)]);
                v2422 = v2423;
              }
              v2430 = &v2422[-8 * (v2427 >> 1)];
              v2422 = &v2429[v2428];
              *((void *)&v2695 + 1) = v2430;
              *(void *)&long long v2696 = &v2429[v2428];
              v2420 = (uint64_t *)v2616;
              unint64_t v2363 = v2425;
              unint64_t v2359 = v2664;
            }
          }
          *(void *)v2422 = *(void *)(v2421 - 8);
          v2422 = (char *)(v2696 + 8);
          *(void *)&long long v2696 = v2696 + 8;
          uint64_t v2421 = v2420[68] - 8;
          v2420[68] = v2421;
          --v2370;
        }
        while (v2370);
      }
      v2438 = (uint64_t *)v2420[67];
      if (v2438 == (uint64_t *)v2421)
      {
        v2438 = (uint64_t *)v2421;
      }
      else
      {
        do
        {
          if (v2422 == *((char **)&v2696 + 1))
          {
            v2439 = (char *)*((void *)&v2695 + 1);
            v2440 = (void *)v2695;
            if (*((void *)&v2695 + 1) <= (unint64_t)v2695)
            {
              if (v2422 == (char *)v2695) {
                unint64_t v2448 = 1;
              }
              else {
                unint64_t v2448 = (uint64_t)&v2422[-v2695] >> 2;
              }
              v2449 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v2448);
              uint64_t v2451 = v2422 - v2439;
              BOOL v417 = v2422 == v2439;
              v2422 = &v2449[8 * (v2448 >> 2)];
              if (!v417)
              {
                v2422 = &v2449[8 * (v2448 >> 2) + (v2451 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v2452 = 8 * (v2451 >> 3);
                v2453 = &v2449[8 * (v2448 >> 2)];
                do
                {
                  uint64_t v2454 = *(void *)v2439;
                  v2439 += 8;
                  *(void *)v2453 = v2454;
                  v2453 += 8;
                  v2452 -= 8;
                }
                while (v2452);
              }
              *(void *)&long long v2695 = v2449;
              *((void *)&v2695 + 1) = &v2449[8 * (v2448 >> 2)];
              *(void *)&long long v2696 = v2422;
              *((void *)&v2696 + 1) = &v2449[8 * v2450];
              if (v2440) {
                operator delete(v2440);
              }
              v2420 = (uint64_t *)v2616;
            }
            else
            {
              unint64_t v2441 = v2359;
              unint64_t v2442 = v2363;
              uint64_t v2443 = (uint64_t)(*((void *)&v2695 + 1) - v2695) >> 3;
              if (v2443 >= -1) {
                uint64_t v2444 = v2443 + 1;
              }
              else {
                uint64_t v2444 = v2443 + 2;
              }
              uint64_t v2445 = *((void *)&v2695 + 1) - 8 * (v2444 >> 1);
              v2446 = &v2422[-*((void *)&v2695 + 1)];
              if (v2422 != *((char **)&v2695 + 1))
              {
                memmove((void *)(*((void *)&v2695 + 1) - 8 * (v2444 >> 1)), *((const void **)&v2695 + 1), (size_t)&v2422[-*((void *)&v2695 + 1)]);
                v2422 = v2439;
              }
              v2447 = &v2422[-8 * (v2444 >> 1)];
              v2422 = &v2446[v2445];
              *((void *)&v2695 + 1) = v2447;
              *(void *)&long long v2696 = &v2446[v2445];
              v2420 = (uint64_t *)v2616;
              unint64_t v2363 = v2442;
              unint64_t v2359 = v2441;
            }
          }
          uint64_t v2455 = *v2438++;
          *(void *)v2422 = v2455;
          v2422 = (char *)(v2696 + 8);
          *(void *)&long long v2696 = v2696 + 8;
        }
        while (v2438 != (uint64_t *)v2420[68]);
        uint64_t v2421 = v2420[67];
      }
      v2495 = (void *)v2420[66];
      *((_OWORD *)v2420 + 33) = v2695;
      *(void *)&long long v2695 = v2495;
      *((void *)&v2695 + 1) = v2421;
      v2420[68] = (uint64_t)v2422;
      *(void *)&long long v2696 = v2438;
      v2420[69] = *((void *)&v2696 + 1);
      v2420[70] += v2634;
      if (v2495) {
        operator delete(v2495);
      }
LABEL_3053:
      v2351 = (char *)v2616[33].i64[1];
      unint64_t v2349 = v2616[35].u64[0];
      v2354 = (char *)v2616[34].i64[0];
      unint64_t v2360 = v2349 >> 8;
      goto LABEL_3054;
    }
    if (v2371)
    {
      if (v2351 == (char *)v2372)
      {
LABEL_2952:
        unint64_t v2416 = v2371;
        do
        {
          *(void *)&long long v2695 = operator new(0x1000uLL);
          std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(v2364, &v2695);
          --v2416;
        }
        while (v2416);
        v2370 += v2371;
        v2417 = v2616;
        unint64_t v2349 = v2616[35].u64[0];
LABEL_2960:
        for (v2417[35].i64[0] = v2349 + (v2370 << 8); v2370; --v2370)
        {
          uint64_t v2418 = v2616[34].i64[0];
          *(void *)&long long v2695 = *(void *)(v2418 - 8);
          v2616[34].i64[0] = v2418 - 8;
          std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v2364, &v2695);
        }
        goto LABEL_3053;
      }
      while (1)
      {
        *(void *)&long long v2695 = operator new(0x1000uLL);
        std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front((uint64_t)v2364, &v2695);
        uint64_t v2414 = v2616[33].i64[1];
        uint64_t v2415 = v2616[34].i64[0] - v2414 == 8 ? 255 : 256;
        unint64_t v2349 = v2415 + v2616[35].i64[0];
        v2616[35].i64[0] = v2349;
        if (!--v2371) {
          break;
        }
        if (v2414 == v2364->i64[0]) {
          goto LABEL_2952;
        }
      }
    }
    v2417 = v2616;
    goto LABEL_2960;
  }
LABEL_3054:
  v2496 = &v2351[8 * v2360];
  if (v2354 == v2351) {
    v2497 = 0;
  }
  else {
    v2497 = (long long *)(*(void *)v2496 + 16 * v2349);
  }
  if (v2359 <= v2363)
  {
    v2501 = v2497;
    v2500 = &v2351[8 * v2360];
    if (!v2359) {
      goto LABEL_3180;
    }
    goto LABEL_3072;
  }
  v2498 = &v2357[16 * (v2359 - v2363)];
  if (v2363 < v2359 >> 1) {
    v2498 = &v2358[-16 * v2363];
  }
  if (v2498 == v2357)
  {
    v2501 = v2497;
    v2500 = &v2351[8 * v2360];
  }
  else
  {
    v2499 = v2498;
    v2500 = &v2351[8 * v2360];
    v2501 = v2497;
    do
    {
      if (v2501 == *(long long **)v2500)
      {
        uint64_t v2502 = *((void *)v2500 - 1);
        v2500 -= 8;
        v2501 = (long long *)(v2502 + 4096);
      }
      uint64_t v2503 = *((void *)v2499 - 2);
      v2499 -= 16;
      *((void *)v2501-- - 2) = v2503;
      uint64_t v2504 = *((void *)v2499 + 1);
      *((void *)v2501 + 1) = v2504;
      if (v2504)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v2504 + 8), 1uLL, memory_order_relaxed);
        unint64_t v2349 = v2616[35].u64[0];
      }
      v2616[35].i64[0] = --v2349;
      ++v2616[35].i64[1];
    }
    while (v2499 != v2357);
    v2357 = v2498;
  }
  unint64_t v2359 = v2363;
  if (v2363)
  {
LABEL_3072:
    v2505 = (long long **)std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator+[abi:ne180100](v2496, (uint64_t)v2497, v2359);
    v2507 = v2505;
    v2508 = v2506;
    if (v2497 != v2506)
    {
      v2509 = v2505;
      v2510 = v2506;
      do
      {
        if (v2501 == *(long long **)v2500)
        {
          uint64_t v2511 = *((void *)v2500 - 1);
          v2500 -= 8;
          v2501 = (long long *)(v2511 + 4096);
        }
        if (v2510 == *v2509)
        {
          uint64_t v2512 = (uint64_t)*--v2509;
          v2510 = (long long *)(v2512 + 4096);
        }
        long long v2513 = *--v2510;
        *--v2501 = v2513;
        *(void *)v2510 = 0;
        *((void *)v2510 + 1) = 0;
        v2616[35] = vaddq_s64(v2616[35], (int64x2_t)xmmword_1901C6000);
      }
      while (v2510 != v2497);
    }
    if (v2359 < v2363)
    {
      v2514 = (long long **)std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator+[abi:ne180100](v2496, (uint64_t)v2497, v2363);
      v2516 = v2515;
      if (v2507 == v2514)
      {
        v2525 = v2508;
        v2526 = v2516;
        v2522 = v2496;
        uint64_t v2523 = (uint64_t)v2497;
      }
      else
      {
        v2517 = v2514;
        v2519 = *v2507;
        v2518 = v2507 + 1;
        v2520 = v2519 + 256;
        v2521 = v2508;
        v2522 = v2496;
        uint64_t v2523 = (uint64_t)v2497;
        while (1)
        {
          std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>(&v2695, v2521, v2520, v2522, v2523);
          v2522 = (char *)*((void *)&v2695 + 1);
          uint64_t v2523 = v2696;
          if (v2518 == v2517) {
            break;
          }
          v2524 = *v2518++;
          v2521 = v2524;
          v2520 = v2524 + 256;
        }
        v2525 = *v2517;
        v2526 = v2516;
      }
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>(&v2695, v2525, v2526, v2522, v2523);
      v2497 = (long long *)v2696;
      v2496 = (char *)*((void *)&v2695 + 1);
    }
    if (v2357 != v2358)
    {
      v2527 = *(char **)v2496;
      while (1)
      {
        uint64_t v2528 = v2527 - (char *)v2497 + 4096;
        if ((v2358 - v2357) >> 4 >= v2528 >> 4) {
          uint64_t v2529 = v2528 >> 4;
        }
        else {
          uint64_t v2529 = (v2358 - v2357) >> 4;
        }
        if (v2529)
        {
          v2530 = &v2357[16 * v2529];
          do
          {
            uint64_t v2532 = *(void *)v2357;
            uint64_t v2531 = *((void *)v2357 + 1);
            if (v2531) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v2531 + 8), 1uLL, memory_order_relaxed);
            }
            v2533 = (std::__shared_weak_count *)*((void *)v2497 + 1);
            *(void *)v2497 = v2532;
            *((void *)v2497 + 1) = v2531;
            if (v2533) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v2533);
            }
            v2357 += 16;
            ++v2497;
          }
          while (v2357 != v2530);
          v2357 = v2530;
        }
        if (v2357 == v2358) {
          break;
        }
        v2534 = (char *)*((void *)v2496 + 1);
        v2496 += 8;
        v2527 = v2534;
        v2497 = (long long *)v2534;
      }
    }
  }
LABEL_3180:
  atomic_fetch_add(v2616[36].i64, v2669 - v2668);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2636);
  *(void *)&long long v2695 = &v2668;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2695);
  *(void *)&long long v2695 = &v2671;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2695);
  *(void *)&long long v2695 = &v2674;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2695);
  *(void *)&long long v2695 = &v2677;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2695);
  *(void *)&long long v2695 = &v2680;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2695);
  *(void *)&long long v2695 = &v2683;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2695);
  *(void *)&long long v2695 = &v2686;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2695);
  *(void *)&long long v2695 = &v2689;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2695);
  *(void *)&long long v2695 = &v2692;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2695);
}

void sub_18FF690E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *******a36,uint64_t a37,void ******a38,uint64_t a39,uint64_t a40,void *****a41,uint64_t a42,uint64_t a43,void ****a44,uint64_t a45,uint64_t a46,void ***a47,uint64_t a48,uint64_t a49,void **a50)
{
  if (*(void *)(v50 - 160)) {
    operator delete(*(void **)(v50 - 160));
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](a30);
  a36 = &a38;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a36);
  a38 = &a41;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a38);
  a41 = &a44;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a41);
  a44 = &a47;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a44);
  a47 = &a50;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a47);
  a50 = (void **)(v50 - 256);
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&a50);
  *(void *)(v50 - 256) = v50 - 232;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v50 - 256));
  *(void *)(v50 - 232) = v50 - 208;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v50 - 232));
  *(void *)(v50 - 208) = v50 - 184;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v50 - 208));
  _Unwind_Resume(a1);
}

void sub_18FF69654(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *(void ***)(v1 - 152);
  uint64_t v3 = *(void ***)(v1 - 144);
  while (v2 != v3)
  {
    unint64_t v4 = *v2++;
    operator delete(v4);
  }
  __cxa_rethrow();
}

void sub_18FF69678()
{
}

void sub_18FF69698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *******a36,std::__shared_weak_count *a37,void ******a38,uint64_t a39,uint64_t a40,void *****a41,uint64_t a42,uint64_t a43,void ****a44,uint64_t a45,uint64_t a46,void ***a47,uint64_t a48,uint64_t a49,void **a50)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  if (a37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a37);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  std::__shared_weak_count::__release_shared[abi:ne180100](v50);
  a36 = &a38;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a36);
  a38 = &a41;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a38);
  a41 = &a44;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a41);
  a44 = &a47;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a44);
  a47 = &a50;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a47);
  a50 = (void **)(v51 - 256);
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&a50);
  *(void *)(v51 - 256) = v51 - 232;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 256));
  *(void *)(v51 - 232) = v51 - 208;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 232));
  *(void *)(v51 - 208) = v51 - 184;
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 208));
  _Unwind_Resume(a1);
}

void sub_18FF696B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37)
{
  if (a37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a37);
  }
  JUMPOUT(0x18FF69810);
}

void sub_18FF6973C()
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v0);
  JUMPOUT(0x18FF697F0);
}

void sub_18FF69784()
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v0);
  JUMPOUT(0x18FF697ECLL);
}

void sub_18FF697BC()
{
}

void sub_18FF697C4()
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v0);
  JUMPOUT(0x18FF697FCLL);
}

void std::__introsort<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>*,false>(void *a1, unint64_t a2, uint64_t a3, char a4)
{
uint64_t *AudioMetadataMemoryPool::lookup<AudioMetadataObject>(void *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v8 = a3;
  BOOL v5 = (uint64_t **)(a2 + 48);
  if (!std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>((uint64_t **)(a2 + 48), a3, (uint64_t *)&v8)[5])__assert_rtn("lookup", "AudioMetadataTimeline.hpp", 109, "mObjects[rawPtr] != nullptr"); {
  uint64_t result = std::__tree<std::__value_type<void *,std::shared_ptr<void>>,std::__map_value_compare<void *,std::__value_type<void *,std::shared_ptr<void>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::shared_ptr<void>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>(v5, a3, (uint64_t *)&v8);
  }
  uint64_t v7 = result[6];
  *a1 = result[5];
  a1[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>*,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
void std::__introsort<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>*,false>(void *a1, unint64_t a2, uint64_t a3, char a4)
{
void std::__introsort<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
void std::__introsort<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
void std::__introsort<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,false>(void *a1, unint64_t a2, uint64_t a3, char a4)
{
void std::__introsort<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
void std::__introsort<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
void std::__introsort<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
void std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    BOOL v4 = (char *)v1[1];
    BOOL v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (std::__shared_weak_count *)*((void *)v4 - 1);
        if (v6) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        }
        v4 -= 16;
      }
      while (v4 != v2);
      BOOL v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator+[abi:ne180100](void *result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = a3 + ((a2 - *result) >> 4);
    if (v3 < 1) {
      result -= (unint64_t)(255 - v3) >> 8;
    }
    else {
      result += (unint64_t)v3 >> 8;
    }
  }
  return result;
}

void *std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator-[abi:ne180100](void *result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = ((a2 - *result) >> 4) - a3;
    if (v3 < 1) {
      result -= (unint64_t)(255 - v3) >> 8;
    }
    else {
      result += (unint64_t)v3 >> 8;
    }
  }
  return result;
}

void std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v6 = a4;
  if (a2 == a3)
  {
    uint64_t v9 = a2;
  }
  else
  {
    uint64_t v9 = a3;
    uint64_t v10 = *a4;
    uint64_t v11 = a3;
    while (1)
    {
      uint64_t v12 = a5 - v10;
      if ((v11 - a2) >> 4 >= v12 >> 4) {
        uint64_t v13 = v12 >> 4;
      }
      else {
        uint64_t v13 = (v11 - a2) >> 4;
      }
      if (v13)
      {
        uint64_t v14 = -16 * v13;
        unint64_t v15 = (long long *)(v11 - 16);
        do
        {
          long long v16 = *v15;
          *(void *)unint64_t v15 = 0;
          *((void *)v15 + 1) = 0;
          long long v17 = *(std::__shared_weak_count **)(a5 - 8);
          *(_OWORD *)(a5 - 16) = v16;
          a5 -= 16;
          if (v17) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v17);
          }
          --v15;
          v14 += 16;
        }
        while (v14);
      }
      v11 -= 16 * v13;
      if (v11 == a2) {
        break;
      }
      uint64_t v18 = *--v6;
      uint64_t v10 = v18;
      a5 = v18 + 4096;
    }
    if (*v6 + 4096 == a5)
    {
      uint64_t v19 = v6[1];
      ++v6;
      a5 = v19;
    }
  }
  *a1 = v9;
  a1[1] = v6;
  a1[2] = a5;
}

void std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_back(void *a1, void *a2)
{
  BOOL v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    BOOL v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      long long v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      BOOL v20 = (uint64_t *)a1[1];
      BOOL v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        BOOL v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      BOOL v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        BOOL v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        BOOL v4 = (char *)a1[1];
      }
      unint64_t v15 = &v4[8 * v11];
      BOOL v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)BOOL v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::allocator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>>::push_front(uint64_t a1, void *a2)
{
  BOOL v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v11);
      BOOL v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      unint64_t v15 = *(uint64_t **)(a1 + 8);
      unint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        unint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        BOOL v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      BOOL v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        BOOL v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    BOOL v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

long long *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> **,long,256l>,0>(long long *result, long long *a2, long long *a3, void *a4, uint64_t a5)
{
  BOOL v5 = a4;
  uint64_t v6 = a2;
  uint64_t v7 = result;
  if (a2 == a3)
  {
    uint64_t v8 = a2;
  }
  else
  {
    uint64_t v8 = a3;
    uint64_t v9 = *a4;
    while (1)
    {
      uint64_t v10 = v9 - a5 + 4096;
      uint64_t v11 = v8 - v6 >= v10 >> 4 ? v10 >> 4 : v8 - v6;
      uint64_t result = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>(v6, &v6[v11], a5);
      if (result == v8) {
        break;
      }
      uint64_t v6 = result;
      uint64_t v13 = v5[1];
      ++v5;
      uint64_t v9 = v13;
      a5 = v13;
    }
    a5 = v12;
    if (*v5 + 4096 == v12)
    {
      uint64_t v14 = v5[1];
      ++v5;
      a5 = v14;
    }
  }
  *(void *)uint64_t v7 = v8;
  *((void *)v7 + 1) = v5;
  *((void *)v7 + 2) = a5;
  return result;
}

long long *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> *>(long long *a1, long long *a2, uint64_t a3)
{
  BOOL v4 = a1;
  if (a1 != a2)
  {
    do
    {
      long long v6 = *v4;
      *(void *)BOOL v4 = 0;
      *((void *)v4 + 1) = 0;
      uint64_t v7 = *(std::__shared_weak_count **)(a3 + 8);
      *(_OWORD *)a3 = v6;
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      ++v4;
      a3 += 16;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

BOOL lessThan(void *a1, void **a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = *a2;
  if (!*a2 || !*a1 || !*v2) {
    return 0;
  }
  BOOL v4 = (void *)a1[2];
  BOOL v5 = (std::__shared_weak_count *)a1[3];
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v2 = *a2;
  }
  long long v6 = (void *)v2[2];
  uint64_t v7 = (std::__shared_weak_count *)v2[3];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v10[0] = v6;
  v10[1] = &v7->__vftable;
  if (!v7)
  {
    BOOL v8 = lessThan(v4, v10);
    if (!v5) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  BOOL v8 = lessThan(v4, v10);
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  if (v5) {
LABEL_13:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
LABEL_14:
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v8;
}

{
  void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  void *v5;
  std::__shared_weak_count *v6;
  BOOL v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;

  if (!a1) {
    return 0;
  }
  uint64_t v2 = *a2;
  if (!*a2 || !*a1 || !*v2) {
    return 0;
  }
  uint64_t v3 = (void *)a1[2];
  BOOL v4 = (std::__shared_weak_count *)a1[3];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v2 = *a2;
  }
  BOOL v5 = (void *)v2[2];
  long long v6 = (std::__shared_weak_count *)v2[3];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = 0;
  if (v3 && v5)
  {
    if (*v3 && *v5)
    {
      BOOL v8 = v3[2];
      uint64_t v9 = (std::__shared_weak_count *)v3[3];
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v10 = (uint64_t *)v5[2];
      uint64_t v11 = (std::__shared_weak_count *)v5[3];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v7 = 0;
      if (v8 && v10) {
        v7 = *(void *)v8 && (uint64_t v12 = *v10) != 0 && *(double *)(*(void *)v8 + 20) < *(double *)(v12 + 20);
      }
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
    }
    else
    {
      uint64_t v7 = 0;
    }
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return v7;
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(void **)a2;
  BOOL v8 = (std::__shared_weak_count **)(a2 + 8);
  uint64_t v7 = *(std::__shared_weak_count **)(a2 + 8);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = (std::__shared_weak_count **)(a1 + 8);
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 8);
  uint64_t v34 = *(void **)a1;
  uint64_t v35 = v9;
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    BOOL v11 = lessThan(v6, &v34);
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    if (!v7) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  BOOL v11 = lessThan(v6, &v34);
  if (v7) {
LABEL_5:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
LABEL_6:
  if (!v11)
  {
    unint64_t v16 = *(void **)a3;
    uint64_t v17 = *(std::__shared_weak_count **)(a3 + 8);
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v18 = *(std::__shared_weak_count **)(a2 + 8);
    uint64_t v34 = *(void **)a2;
    uint64_t v35 = v18;
    if (v18)
    {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      BOOL v19 = lessThan(v16, &v34);
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      if (!v17) {
        goto LABEL_16;
      }
    }
    else
    {
      BOOL v19 = lessThan(v16, &v34);
      if (!v17)
      {
LABEL_16:
        if (!v19) {
          return;
        }
        uint64_t v20 = *(void **)a2;
        *(void *)a2 = *(void *)a3;
        *(void *)a3 = v20;
        uint64_t v21 = *(void *)(a2 + 8);
        *(void *)(a2 + 8) = *(void *)(a3 + 8);
        *(void *)(a3 + 8) = v21;
        uint64_t v22 = *(void **)a2;
        uint64_t v23 = *(std::__shared_weak_count **)(a2 + 8);
        if (v23) {
          atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v24 = *(std::__shared_weak_count **)(a1 + 8);
        uint64_t v34 = *(void **)a1;
        uint64_t v35 = v24;
        if (v24)
        {
          atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
          BOOL v25 = lessThan(v22, &v34);
          std::__shared_weak_count::__release_shared[abi:ne180100](v24);
          if (!v23)
          {
LABEL_22:
            if (!v25) {
              return;
            }
            UInt32 v26 = *(void **)a1;
            *(void *)a1 = *(void *)a2;
            *(void *)a2 = v26;
            goto LABEL_39;
          }
        }
        else
        {
          BOOL v25 = lessThan(v22, &v34);
          if (!v23) {
            goto LABEL_22;
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
        goto LABEL_22;
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    goto LABEL_16;
  }
  uint64_t v12 = *(void **)a3;
  uint64_t v13 = *(std::__shared_weak_count **)(a3 + 8);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = *(std::__shared_weak_count **)(a2 + 8);
  uint64_t v34 = *(void **)a2;
  uint64_t v35 = v14;
  if (v14)
  {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    BOOL v15 = lessThan(v12, &v34);
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  else
  {
    BOOL v15 = lessThan(v12, &v34);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  uint64_t v27 = *(void **)a1;
  if (!v15)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)a2 = v27;
    uint64_t v28 = *(std::__shared_weak_count **)(a1 + 8);
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = v28;
    BOOL v29 = *(void **)a3;
    unint64_t v30 = *(std::__shared_weak_count **)(a3 + 8);
    if (v30)
    {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v28 = *v8;
    }
    uint64_t v34 = *(void **)a2;
    uint64_t v35 = v28;
    if (v28)
    {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      BOOL v31 = lessThan(v29, &v34);
      std::__shared_weak_count::__release_shared[abi:ne180100](v28);
      if (!v30)
      {
LABEL_36:
        if (!v31) {
          return;
        }
        BOOL v32 = *(void **)a2;
        *(void *)a2 = *(void *)a3;
        *(void *)a3 = v32;
        uint64_t v10 = v8;
        goto LABEL_38;
      }
    }
    else
    {
      BOOL v31 = lessThan(v29, &v34);
      if (!v30) {
        goto LABEL_36;
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    goto LABEL_36;
  }
  *(void *)a1 = *(void *)a3;
  *(void *)a3 = v27;
LABEL_38:
  BOOL v8 = (std::__shared_weak_count **)(a3 + 8);
LABEL_39:
  CFStringRef v33 = *v10;
  *uint64_t v10 = *v8;
  *BOOL v8 = v33;
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(a1, a2, a3);
  BOOL v8 = *(void **)a4;
  uint64_t v9 = *(std::__shared_weak_count **)(a4 + 8);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(a3 + 8);
  UInt32 v26 = *(void **)a3;
  uint64_t v27 = v10;
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    BOOL v11 = lessThan(v8, &v26);
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    if (!v9) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  BOOL v11 = lessThan(v8, &v26);
  if (v9) {
LABEL_5:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
LABEL_6:
  if (!v11) {
    return;
  }
  uint64_t v12 = *(void **)a3;
  *(void *)a3 = *(void *)a4;
  *(void *)a4 = v12;
  uint64_t v13 = *(void *)(a3 + 8);
  *(void *)(a3 + 8) = *(void *)(a4 + 8);
  *(void *)(a4 + 8) = v13;
  uint64_t v14 = *(void **)a3;
  BOOL v15 = *(std::__shared_weak_count **)(a3 + 8);
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v16 = *(std::__shared_weak_count **)(a2 + 8);
  UInt32 v26 = *(void **)a2;
  uint64_t v27 = v16;
  if (v16)
  {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    BOOL v17 = lessThan(v14, &v26);
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    if (!v15) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  BOOL v17 = lessThan(v14, &v26);
  if (v15) {
LABEL_11:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
LABEL_12:
  if (!v17) {
    return;
  }
  uint64_t v18 = *(void **)a2;
  *(void *)a2 = *(void *)a3;
  *(void *)a3 = v18;
  uint64_t v19 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = *(void *)(a3 + 8);
  *(void *)(a3 + 8) = v19;
  uint64_t v20 = *(void **)a2;
  uint64_t v21 = *(std::__shared_weak_count **)(a2 + 8);
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v22 = *(std::__shared_weak_count **)(a1 + 8);
  UInt32 v26 = *(void **)a1;
  uint64_t v27 = v22;
  if (v22)
  {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    BOOL v23 = lessThan(v20, &v26);
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    if (!v21) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  BOOL v23 = lessThan(v20, &v26);
  if (v21) {
LABEL_17:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
LABEL_18:
  if (v23)
  {
    uint64_t v24 = *(void **)a1;
    *(void *)a1 = *(void *)a2;
    *(void *)a2 = v24;
    uint64_t v25 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = v25;
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(a1, a2, a3, a4);
  uint64_t v10 = *(void **)a5;
  BOOL v11 = *(std::__shared_weak_count **)(a5 + 8);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *(std::__shared_weak_count **)(a4 + 8);
  uint64_t v34 = *(void **)a4;
  uint64_t v35 = v12;
  if (v12)
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    BOOL v13 = lessThan(v10, &v34);
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    if (!v11) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  BOOL v13 = lessThan(v10, &v34);
  if (v11) {
LABEL_5:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
LABEL_6:
  if (!v13) {
    return;
  }
  uint64_t v14 = *(void **)a4;
  *(void *)a4 = *(void *)a5;
  *(void *)a5 = v14;
  uint64_t v15 = *(void *)(a4 + 8);
  *(void *)(a4 + 8) = *(void *)(a5 + 8);
  *(void *)(a5 + 8) = v15;
  unint64_t v16 = *(void **)a4;
  BOOL v17 = *(std::__shared_weak_count **)(a4 + 8);
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = *(std::__shared_weak_count **)(a3 + 8);
  uint64_t v34 = *(void **)a3;
  uint64_t v35 = v18;
  if (v18)
  {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    BOOL v19 = lessThan(v16, &v34);
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    if (!v17) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  BOOL v19 = lessThan(v16, &v34);
  if (v17) {
LABEL_11:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
LABEL_12:
  if (!v19) {
    return;
  }
  uint64_t v20 = *(void **)a3;
  *(void *)a3 = *(void *)a4;
  *(void *)a4 = v20;
  uint64_t v21 = *(void *)(a3 + 8);
  *(void *)(a3 + 8) = *(void *)(a4 + 8);
  *(void *)(a4 + 8) = v21;
  uint64_t v22 = *(void **)a3;
  BOOL v23 = *(std::__shared_weak_count **)(a3 + 8);
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v24 = *(std::__shared_weak_count **)(a2 + 8);
  uint64_t v34 = *(void **)a2;
  uint64_t v35 = v24;
  if (v24)
  {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    BOOL v25 = lessThan(v22, &v34);
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    if (!v23) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  BOOL v25 = lessThan(v22, &v34);
  if (v23) {
LABEL_17:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
LABEL_18:
  if (!v25) {
    return;
  }
  UInt32 v26 = *(void **)a2;
  *(void *)a2 = *(void *)a3;
  *(void *)a3 = v26;
  uint64_t v27 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = *(void *)(a3 + 8);
  *(void *)(a3 + 8) = v27;
  uint64_t v28 = *(void **)a2;
  BOOL v29 = *(std::__shared_weak_count **)(a2 + 8);
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v30 = *(std::__shared_weak_count **)(a1 + 8);
  uint64_t v34 = *(void **)a1;
  uint64_t v35 = v30;
  if (v30)
  {
    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    BOOL v31 = lessThan(v28, &v34);
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    if (!v29) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  BOOL v31 = lessThan(v28, &v34);
  if (v29) {
LABEL_23:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
LABEL_24:
  if (v31)
  {
    BOOL v32 = *(void **)a1;
    *(void *)a1 = *(void *)a2;
    *(void *)a2 = v32;
    uint64_t v33 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = v33;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      long long v6 = *(void **)(a2 - 16);
      uint64_t v7 = *(std::__shared_weak_count **)(a2 - 8);
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v8 = *(std::__shared_weak_count **)(a1 + 8);
      BOOL v31 = *(void **)a1;
      BOOL v32 = v8;
      if (v8)
      {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        BOOL v9 = lessThan(v6, &v31);
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        if (!v7) {
          goto LABEL_7;
        }
      }
      else
      {
        BOOL v9 = lessThan(v6, &v31);
        if (!v7)
        {
LABEL_7:
          if (v9)
          {
            uint64_t v10 = *(void **)a1;
            *(void *)a1 = *(void *)(v2 - 16);
            *(void *)(v2 - 16) = v10;
            uint64_t v11 = *(void *)(a1 + 8);
            *(void *)(a1 + 8) = *(void *)(v2 - 8);
            *(void *)(v2 - 8) = v11;
          }
          return 1;
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      goto LABEL_7;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(a1, a1 + 16, a2 - 16);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16);
      return 1;
    default:
      uint64_t v12 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(a1, a1 + 16, a1 + 32);
      uint64_t v13 = a1 + 48;
      if (a1 + 48 == v2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      uint64_t v30 = v2;
LABEL_11:
      unint64_t v16 = *(void **)v13;
      BOOL v17 = *(std::__shared_weak_count **)(v13 + 8);
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v18 = *(std::__shared_weak_count **)(v12 + 8);
      BOOL v31 = *(void **)v12;
      BOOL v32 = v18;
      if (v18)
      {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        BOOL v19 = lessThan(v16, &v31);
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        if (!v17) {
          goto LABEL_16;
        }
        goto LABEL_15;
      }
      BOOL v19 = lessThan(v16, &v31);
      if (v17) {
LABEL_15:
      }
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
LABEL_16:
      if (!v19) {
        goto LABEL_36;
      }
      uint64_t v20 = *(void **)v13;
      uint64_t v21 = *(std::__shared_weak_count **)(v13 + 8);
      uint64_t v22 = v14;
      *(void *)uint64_t v13 = 0;
      *(void *)(v13 + 8) = 0;
      break;
  }
  while (1)
  {
    uint64_t v23 = a1 + v22;
    long long v24 = *(_OWORD *)(a1 + v22 + 32);
    *(void *)(v23 + 32) = 0;
    *(void *)(v23 + 40) = 0;
    BOOL v25 = *(std::__shared_weak_count **)(a1 + v22 + 56);
    *(_OWORD *)(v23 + 48) = v24;
    if (v25) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    }
    if (v22 == -32) {
      break;
    }
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    UInt32 v26 = *(std::__shared_weak_count **)(a1 + v22 + 24);
    BOOL v31 = *(void **)(a1 + v22 + 16);
    BOOL v32 = v26;
    if (!v26)
    {
      BOOL v27 = lessThan(v20, &v31);
      if (!v21) {
        goto LABEL_26;
      }
LABEL_25:
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      goto LABEL_26;
    }
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    BOOL v27 = lessThan(v20, &v31);
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
    if (v21) {
      goto LABEL_25;
    }
LABEL_26:
    v22 -= 16;
    if (!v27)
    {
      uint64_t v28 = (void *)(a1 + v22 + 48);
      goto LABEL_33;
    }
  }
  uint64_t v28 = (void *)a1;
LABEL_33:
  uint64_t v2 = v30;
  BOOL v29 = (std::__shared_weak_count *)v28[1];
  *uint64_t v28 = v20;
  v28[1] = v21;
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  if (++v15 != 8)
  {
LABEL_36:
    uint64_t v12 = v13;
    v14 += 16;
    v13 += 16;
    if (v13 == v2) {
      return 1;
    }
    goto LABEL_11;
  }
  return v13 + 16 == v30;
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(void **)a2;
  BOOL v8 = (std::__shared_weak_count **)(a2 + 8);
  uint64_t v7 = *(std::__shared_weak_count **)(a2 + 8);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = (std::__shared_weak_count **)(a1 + 8);
  BOOL v9 = *(std::__shared_weak_count **)(a1 + 8);
  uint64_t v34 = *(void **)a1;
  uint64_t v35 = v9;
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    BOOL v11 = lessThan(v6, &v34);
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    if (!v7) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  BOOL v11 = lessThan(v6, &v34);
  if (v7) {
LABEL_5:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
LABEL_6:
  if (!v11)
  {
    unint64_t v16 = *(void **)a3;
    BOOL v17 = *(std::__shared_weak_count **)(a3 + 8);
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v18 = *(std::__shared_weak_count **)(a2 + 8);
    uint64_t v34 = *(void **)a2;
    uint64_t v35 = v18;
    if (v18)
    {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      BOOL v19 = lessThan(v16, &v34);
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      if (!v17) {
        goto LABEL_16;
      }
    }
    else
    {
      BOOL v19 = lessThan(v16, &v34);
      if (!v17)
      {
LABEL_16:
        if (!v19) {
          return;
        }
        uint64_t v20 = *(void **)a2;
        *(void *)a2 = *(void *)a3;
        *(void *)a3 = v20;
        uint64_t v21 = *(void *)(a2 + 8);
        *(void *)(a2 + 8) = *(void *)(a3 + 8);
        *(void *)(a3 + 8) = v21;
        uint64_t v22 = *(void **)a2;
        uint64_t v23 = *(std::__shared_weak_count **)(a2 + 8);
        if (v23) {
          atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long long v24 = *(std::__shared_weak_count **)(a1 + 8);
        uint64_t v34 = *(void **)a1;
        uint64_t v35 = v24;
        if (v24)
        {
          atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
          BOOL v25 = lessThan(v22, &v34);
          std::__shared_weak_count::__release_shared[abi:ne180100](v24);
          if (!v23)
          {
LABEL_22:
            if (!v25) {
              return;
            }
            UInt32 v26 = *(void **)a1;
            *(void *)a1 = *(void *)a2;
            *(void *)a2 = v26;
            goto LABEL_39;
          }
        }
        else
        {
          BOOL v25 = lessThan(v22, &v34);
          if (!v23) {
            goto LABEL_22;
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
        goto LABEL_22;
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    goto LABEL_16;
  }
  uint64_t v12 = *(void **)a3;
  uint64_t v13 = *(std::__shared_weak_count **)(a3 + 8);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = *(std::__shared_weak_count **)(a2 + 8);
  uint64_t v34 = *(void **)a2;
  uint64_t v35 = v14;
  if (v14)
  {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    BOOL v15 = lessThan(v12, &v34);
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  else
  {
    BOOL v15 = lessThan(v12, &v34);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  BOOL v27 = *(void **)a1;
  if (!v15)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)a2 = v27;
    uint64_t v28 = *(std::__shared_weak_count **)(a1 + 8);
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = v28;
    BOOL v29 = *(void **)a3;
    uint64_t v30 = *(std::__shared_weak_count **)(a3 + 8);
    if (v30)
    {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v28 = *v8;
    }
    uint64_t v34 = *(void **)a2;
    uint64_t v35 = v28;
    if (v28)
    {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      BOOL v31 = lessThan(v29, &v34);
      std::__shared_weak_count::__release_shared[abi:ne180100](v28);
      if (!v30)
      {
LABEL_36:
        if (!v31) {
          return;
        }
        BOOL v32 = *(void **)a2;
        *(void *)a2 = *(void *)a3;
        *(void *)a3 = v32;
        uint64_t v10 = v8;
        goto LABEL_38;
      }
    }
    else
    {
      BOOL v31 = lessThan(v29, &v34);
      if (!v30) {
        goto LABEL_36;
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    goto LABEL_36;
  }
  *(void *)a1 = *(void *)a3;
  *(void *)a3 = v27;
LABEL_38:
  BOOL v8 = (std::__shared_weak_count **)(a3 + 8);
LABEL_39:
  uint64_t v33 = *v10;
  *uint64_t v10 = *v8;
  *BOOL v8 = v33;
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(a1, a2, a3);
  BOOL v8 = *(void **)a4;
  BOOL v9 = *(std::__shared_weak_count **)(a4 + 8);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(a3 + 8);
  UInt32 v26 = *(void **)a3;
  BOOL v27 = v10;
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    BOOL v11 = lessThan(v8, &v26);
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    if (!v9) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  BOOL v11 = lessThan(v8, &v26);
  if (v9) {
LABEL_5:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
LABEL_6:
  if (!v11) {
    return;
  }
  uint64_t v12 = *(void **)a3;
  *(void *)a3 = *(void *)a4;
  *(void *)a4 = v12;
  uint64_t v13 = *(void *)(a3 + 8);
  *(void *)(a3 + 8) = *(void *)(a4 + 8);
  *(void *)(a4 + 8) = v13;
  uint64_t v14 = *(void **)a3;
  BOOL v15 = *(std::__shared_weak_count **)(a3 + 8);
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v16 = *(std::__shared_weak_count **)(a2 + 8);
  UInt32 v26 = *(void **)a2;
  BOOL v27 = v16;
  if (v16)
  {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    BOOL v17 = lessThan(v14, &v26);
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    if (!v15) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  BOOL v17 = lessThan(v14, &v26);
  if (v15) {
LABEL_11:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
LABEL_12:
  if (!v17) {
    return;
  }
  uint64_t v18 = *(void **)a2;
  *(void *)a2 = *(void *)a3;
  *(void *)a3 = v18;
  uint64_t v19 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = *(void *)(a3 + 8);
  *(void *)(a3 + 8) = v19;
  uint64_t v20 = *(void **)a2;
  uint64_t v21 = *(std::__shared_weak_count **)(a2 + 8);
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v22 = *(std::__shared_weak_count **)(a1 + 8);
  UInt32 v26 = *(void **)a1;
  BOOL v27 = v22;
  if (v22)
  {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    BOOL v23 = lessThan(v20, &v26);
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    if (!v21) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  BOOL v23 = lessThan(v20, &v26);
  if (v21) {
LABEL_17:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
LABEL_18:
  if (v23)
  {
    long long v24 = *(void **)a1;
    *(void *)a1 = *(void *)a2;
    *(void *)a2 = v24;
    uint64_t v25 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = v25;
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(a1, a2, a3, a4);
  uint64_t v10 = *(void **)a5;
  BOOL v11 = *(std::__shared_weak_count **)(a5 + 8);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *(std::__shared_weak_count **)(a4 + 8);
  uint64_t v34 = *(void **)a4;
  uint64_t v35 = v12;
  if (v12)
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    BOOL v13 = lessThan(v10, &v34);
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    if (!v11) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  BOOL v13 = lessThan(v10, &v34);
  if (v11) {
LABEL_5:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
LABEL_6:
  if (!v13) {
    return;
  }
  uint64_t v14 = *(void **)a4;
  *(void *)a4 = *(void *)a5;
  *(void *)a5 = v14;
  uint64_t v15 = *(void *)(a4 + 8);
  *(void *)(a4 + 8) = *(void *)(a5 + 8);
  *(void *)(a5 + 8) = v15;
  unint64_t v16 = *(void **)a4;
  BOOL v17 = *(std::__shared_weak_count **)(a4 + 8);
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = *(std::__shared_weak_count **)(a3 + 8);
  uint64_t v34 = *(void **)a3;
  uint64_t v35 = v18;
  if (v18)
  {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    BOOL v19 = lessThan(v16, &v34);
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    if (!v17) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  BOOL v19 = lessThan(v16, &v34);
  if (v17) {
LABEL_11:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
LABEL_12:
  if (!v19) {
    return;
  }
  uint64_t v20 = *(void **)a3;
  *(void *)a3 = *(void *)a4;
  *(void *)a4 = v20;
  uint64_t v21 = *(void *)(a3 + 8);
  *(void *)(a3 + 8) = *(void *)(a4 + 8);
  *(void *)(a4 + 8) = v21;
  uint64_t v22 = *(void **)a3;
  BOOL v23 = *(std::__shared_weak_count **)(a3 + 8);
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v24 = *(std::__shared_weak_count **)(a2 + 8);
  uint64_t v34 = *(void **)a2;
  uint64_t v35 = v24;
  if (v24)
  {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    BOOL v25 = lessThan(v22, &v34);
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    if (!v23) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  BOOL v25 = lessThan(v22, &v34);
  if (v23) {
LABEL_17:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
LABEL_18:
  if (!v25) {
    return;
  }
  UInt32 v26 = *(void **)a2;
  *(void *)a2 = *(void *)a3;
  *(void *)a3 = v26;
  uint64_t v27 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = *(void *)(a3 + 8);
  *(void *)(a3 + 8) = v27;
  uint64_t v28 = *(void **)a2;
  BOOL v29 = *(std::__shared_weak_count **)(a2 + 8);
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v30 = *(std::__shared_weak_count **)(a1 + 8);
  uint64_t v34 = *(void **)a1;
  uint64_t v35 = v30;
  if (v30)
  {
    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    BOOL v31 = lessThan(v28, &v34);
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    if (!v29) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  BOOL v31 = lessThan(v28, &v34);
  if (v29) {
LABEL_23:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
LABEL_24:
  if (v31)
  {
    BOOL v32 = *(void **)a1;
    *(void *)a1 = *(void *)a2;
    *(void *)a2 = v32;
    uint64_t v33 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = v33;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      long long v6 = *(void **)(a2 - 16);
      uint64_t v7 = *(std::__shared_weak_count **)(a2 - 8);
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v8 = *(std::__shared_weak_count **)(a1 + 8);
      BOOL v31 = *(void **)a1;
      BOOL v32 = v8;
      if (v8)
      {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        BOOL v9 = lessThan(v6, &v31);
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        if (!v7) {
          goto LABEL_7;
        }
      }
      else
      {
        BOOL v9 = lessThan(v6, &v31);
        if (!v7)
        {
LABEL_7:
          if (v9)
          {
            uint64_t v10 = *(void **)a1;
            *(void *)a1 = *(void *)(v2 - 16);
            *(void *)(v2 - 16) = v10;
            uint64_t v11 = *(void *)(a1 + 8);
            *(void *)(a1 + 8) = *(void *)(v2 - 8);
            *(void *)(v2 - 8) = v11;
          }
          return 1;
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      goto LABEL_7;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(a1, a1 + 16, a2 - 16);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16);
      return 1;
    default:
      uint64_t v12 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(a1, a1 + 16, a1 + 32);
      uint64_t v13 = a1 + 48;
      if (a1 + 48 == v2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      uint64_t v30 = v2;
LABEL_11:
      unint64_t v16 = *(void **)v13;
      BOOL v17 = *(std::__shared_weak_count **)(v13 + 8);
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v18 = *(std::__shared_weak_count **)(v12 + 8);
      BOOL v31 = *(void **)v12;
      BOOL v32 = v18;
      if (v18)
      {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        BOOL v19 = lessThan(v16, &v31);
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        if (!v17) {
          goto LABEL_16;
        }
        goto LABEL_15;
      }
      BOOL v19 = lessThan(v16, &v31);
      if (v17) {
LABEL_15:
      }
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
LABEL_16:
      if (!v19) {
        goto LABEL_36;
      }
      uint64_t v20 = *(void **)v13;
      uint64_t v21 = *(std::__shared_weak_count **)(v13 + 8);
      uint64_t v22 = v14;
      *(void *)uint64_t v13 = 0;
      *(void *)(v13 + 8) = 0;
      break;
  }
  while (1)
  {
    uint64_t v23 = a1 + v22;
    long long v24 = *(_OWORD *)(a1 + v22 + 32);
    *(void *)(v23 + 32) = 0;
    *(void *)(v23 + 40) = 0;
    BOOL v25 = *(std::__shared_weak_count **)(a1 + v22 + 56);
    *(_OWORD *)(v23 + 48) = v24;
    if (v25) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    }
    if (v22 == -32) {
      break;
    }
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    UInt32 v26 = *(std::__shared_weak_count **)(a1 + v22 + 24);
    BOOL v31 = *(void **)(a1 + v22 + 16);
    BOOL v32 = v26;
    if (!v26)
    {
      BOOL v27 = lessThan(v20, &v31);
      if (!v21) {
        goto LABEL_26;
      }
LABEL_25:
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      goto LABEL_26;
    }
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    BOOL v27 = lessThan(v20, &v31);
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
    if (v21) {
      goto LABEL_25;
    }
LABEL_26:
    v22 -= 16;
    if (!v27)
    {
      uint64_t v28 = (void *)(a1 + v22 + 48);
      goto LABEL_33;
    }
  }
  uint64_t v28 = (void *)a1;
LABEL_33:
  uint64_t v2 = v30;
  BOOL v29 = (std::__shared_weak_count *)v28[1];
  *uint64_t v28 = v20;
  v28[1] = v21;
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  if (++v15 != 8)
  {
LABEL_36:
    uint64_t v12 = v13;
    v14 += 16;
    v13 += 16;
    if (v13 == v2) {
      return 1;
    }
    goto LABEL_11;
  }
  return v13 + 16 == v30;
}

BOOL sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(void *a1, std::__shared_weak_count *a2, uint64_t a3)
{
  if (a2) {
    atomic_fetch_add_explicit(&a2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(void **)a3;
  BOOL v5 = *(std::__shared_weak_count **)(a3 + 8);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v6 = 0;
  if (a1 && v4)
  {
    if (*a1 && *v4)
    {
      uint64_t v7 = (uint64_t *)a1[2];
      BOOL v8 = (std::__shared_weak_count *)a1[3];
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v9 = (uint64_t *)v4[2];
      uint64_t v10 = (std::__shared_weak_count *)v4[3];
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v6 = 0;
      if (v7 && v9)
      {
        uint64_t v11 = *v7;
        BOOL v6 = v11 && (v12 = *v9) != 0 && *(double *)(v11 + 20) < *(double *)(v12 + 20);
      }
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
    }
    else
    {
      BOOL v6 = 0;
    }
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (a2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a2);
  }
  return v6;
}

BOOL std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>(void *a1, void **a2, void **a3)
{
  BOOL v6 = (uint64_t *)(a2 + 1);
  BOOL v7 = sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(*a2, (std::__shared_weak_count *)a2[1], (uint64_t)a1);
  BOOL result = sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(*a3, (std::__shared_weak_count *)a3[1], (uint64_t)a2);
  if (v7)
  {
    BOOL v9 = (void *)*a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v9;
      uint64_t v10 = a1 + 1;
    }
    else
    {
      *a1 = *a2;
      *a2 = v9;
      uint64_t v14 = (void *)a1[1];
      a1[1] = a2[1];
      a2[1] = v14;
      BOOL result = sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(*a3, (std::__shared_weak_count *)a3[1], (uint64_t)a2);
      if (!result) {
        return result;
      }
      int v15 = *a2;
      *a2 = *a3;
      *a3 = v15;
      uint64_t v10 = v6;
    }
    BOOL v6 = (uint64_t *)(a3 + 1);
    goto LABEL_10;
  }
  if (result)
  {
    uint64_t v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    uint64_t v12 = a2[1];
    a2[1] = a3[1];
    a3[1] = v12;
    BOOL result = sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(*a2, (std::__shared_weak_count *)a2[1], (uint64_t)a1);
    if (result)
    {
      uint64_t v13 = (void *)*a1;
      *a1 = *a2;
      uint64_t v10 = a1 + 1;
      *a2 = v13;
LABEL_10:
      uint64_t v16 = *v10;
      *uint64_t v10 = *v6;
      *BOOL v6 = v16;
    }
  }
  return result;
}

BOOL std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>(void *a1, void **a2, void **a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>(a1, a2, a3);
  BOOL result = sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(*(void **)a4, *(std::__shared_weak_count **)(a4 + 8), (uint64_t)a3);
  if (result)
  {
    BOOL v9 = *a3;
    *a3 = *(void **)a4;
    *(void *)a4 = v9;
    uint64_t v10 = a3[1];
    a3[1] = *(void **)(a4 + 8);
    *(void *)(a4 + 8) = v10;
    BOOL result = sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(*a3, (std::__shared_weak_count *)a3[1], (uint64_t)a2);
    if (result)
    {
      uint64_t v11 = *a2;
      *a2 = *a3;
      *a3 = v11;
      uint64_t v12 = a2[1];
      a2[1] = a3[1];
      a3[1] = v12;
      BOOL result = sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(*a2, (std::__shared_weak_count *)a2[1], (uint64_t)a1);
      if (result)
      {
        uint64_t v13 = (void *)*a1;
        *a1 = *a2;
        *a2 = v13;
        uint64_t v14 = (void *)a1[1];
        a1[1] = a2[1];
        a2[1] = v14;
      }
    }
  }
  return result;
}

BOOL std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>(void *a1, void **a2, void **a3, uint64_t a4, uint64_t a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>(a1, a2, a3, a4);
  BOOL result = sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(*(void **)a5, *(std::__shared_weak_count **)(a5 + 8), a4);
  if (result)
  {
    uint64_t v11 = *(void *)a4;
    *(void *)a4 = *(void *)a5;
    *(void *)a5 = v11;
    uint64_t v12 = *(void *)(a4 + 8);
    *(void *)(a4 + 8) = *(void *)(a5 + 8);
    *(void *)(a5 + 8) = v12;
    BOOL result = sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(*(void **)a4, *(std::__shared_weak_count **)(a4 + 8), (uint64_t)a3);
    if (result)
    {
      uint64_t v13 = *a3;
      *a3 = *(void **)a4;
      *(void *)a4 = v13;
      uint64_t v14 = a3[1];
      a3[1] = *(void **)(a4 + 8);
      *(void *)(a4 + 8) = v14;
      BOOL result = sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(*a3, (std::__shared_weak_count *)a3[1], (uint64_t)a2);
      if (result)
      {
        int v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        uint64_t v16 = a2[1];
        a2[1] = a3[1];
        a3[1] = v16;
        BOOL result = sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(*a2, (std::__shared_weak_count *)a2[1], (uint64_t)a1);
        if (result)
        {
          BOOL v17 = (void *)*a1;
          *a1 = *a2;
          *a2 = v17;
          uint64_t v18 = (void *)a1[1];
          a1[1] = a2[1];
          a2[1] = v18;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(*(void **)(a2 - 16), *(std::__shared_weak_count **)(a2 - 8), a1))
      {
        uint64_t v6 = *(void *)a1;
        *(void *)a1 = *(void *)(a2 - 16);
        *(void *)(a2 - 16) = v6;
        uint64_t v7 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = *(void *)(a2 - 8);
        *(void *)(a2 - 8) = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>((void *)a1, (void **)(a1 + 16), (void **)(a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>((void *)a1, (void **)(a1 + 16), (void **)(a1 + 32), a2 - 16);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>((void *)a1, (void **)(a1 + 16), (void **)(a1 + 32), a1 + 48, a2 - 16);
      return 1;
    default:
      uint64_t v8 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>((void *)a1, (void **)(a1 + 16), (void **)(a1 + 32));
      uint64_t v9 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    if (sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(*(void **)v9, *(std::__shared_weak_count **)(v9 + 8), v8))
    {
      long long v12 = *(_OWORD *)v9;
      *(void *)uint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
      uint64_t v13 = (void *)v12;
      long long v22 = v12;
      uint64_t v14 = (std::__shared_weak_count *)*((void *)&v12 + 1);
      uint64_t v15 = v10;
      while (1)
      {
        uint64_t v16 = a1 + v15;
        long long v17 = *(_OWORD *)(a1 + v15 + 32);
        *(void *)(v16 + 32) = 0;
        *(void *)(v16 + 40) = 0;
        uint64_t v18 = *(std::__shared_weak_count **)(a1 + v15 + 56);
        *(_OWORD *)(v16 + 48) = v17;
        if (v18) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        }
        if (v15 == -32) {
          break;
        }
        BOOL v19 = sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(v13, v14, a1 + v15 + 16);
        v15 -= 16;
        if (!v19)
        {
          uint64_t v20 = a1 + v15 + 48;
          goto LABEL_14;
        }
      }
      uint64_t v20 = a1;
LABEL_14:
      uint64_t v21 = *(std::__shared_weak_count **)(v20 + 8);
      *(_OWORD *)uint64_t v20 = v22;
      if (v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }
      if (++v11 == 8) {
        return v9 + 16 == a2;
      }
    }
    uint64_t v8 = v9;
    v10 += 16;
    v9 += 16;
    if (v9 == a2) {
      return 1;
    }
  }
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(uint64_t **)a2;
  uint64_t v8 = (std::__shared_weak_count **)(a2 + 8);
  uint64_t v7 = *(std::__shared_weak_count **)(a2 + 8);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(uint64_t **)a1;
  int v11 = (std::__shared_weak_count **)(a1 + 8);
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 8);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v6) {
    BOOL v12 = v9 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12 || (v13 = *v6) == 0 || (uint64_t v14 = *v9) == 0)
  {
    BOOL v15 = 0;
    if (!v10) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  BOOL v15 = *(double *)(v13 + 12) < *(double *)(v14 + 12);
  if (v10) {
LABEL_14:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
LABEL_15:
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v16 = *(uint64_t **)a3;
  long long v17 = *(std::__shared_weak_count **)(a3 + 8);
  if (v15)
  {
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v19 = *(uint64_t **)a2;
    uint64_t v18 = *(std::__shared_weak_count **)(a2 + 8);
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v20 = 0;
    if (v16 && v19)
    {
      uint64_t v21 = *v16;
      BOOL v20 = v21 && (v22 = *v19) != 0 && *(double *)(v21 + 12) < *(double *)(v22 + 12);
    }
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
    uint64_t v28 = *(uint64_t **)a1;
    if (v20)
    {
      *(void *)a1 = *(void *)a3;
      *(void *)a3 = v28;
LABEL_74:
      uint64_t v8 = (std::__shared_weak_count **)(a3 + 8);
LABEL_82:
      uint64_t v47 = *v11;
      *int v11 = *v8;
      *uint64_t v8 = v47;
      return;
    }
    *(void *)a1 = *(void *)a2;
    *(void *)a2 = v28;
    BOOL v29 = *(std::__shared_weak_count **)(a1 + 8);
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = v29;
    uint64_t v30 = *(uint64_t **)a3;
    BOOL v31 = *(std::__shared_weak_count **)(a3 + 8);
    if (v31)
    {
      atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
      BOOL v29 = *v8;
    }
    BOOL v32 = *(uint64_t **)a2;
    if (v29) {
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v33 = 0;
    if (v30 && v32)
    {
      uint64_t v34 = *v30;
      v33 = v34 && (uint64_t v35 = *v32) != 0 && *(double *)(v34 + 12) < *(double *)(v35 + 12);
    }
    if (v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    }
    if (v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v31);
    }
    if (v33)
    {
      uint64_t v45 = *(uint64_t **)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v45;
      int v11 = v8;
      goto LABEL_74;
    }
  }
  else
  {
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v24 = *(uint64_t **)a2;
    uint64_t v23 = *(std::__shared_weak_count **)(a2 + 8);
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v25 = 0;
    if (v16 && v24)
    {
      uint64_t v26 = *v16;
      BOOL v25 = v26 && (v27 = *v24) != 0 && *(double *)(v26 + 12) < *(double *)(v27 + 12);
    }
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
    if (v25)
    {
      long long v36 = *(uint64_t **)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v36;
      uint64_t v37 = *(void *)(a2 + 8);
      *(void *)(a2 + 8) = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = v37;
      BOOL v38 = *(uint64_t **)a2;
      BOOL v39 = *(std::__shared_weak_count **)(a2 + 8);
      if (v39) {
        atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v41 = *(uint64_t **)a1;
      long long v40 = *(std::__shared_weak_count **)(a1 + 8);
      if (v40) {
        atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v42 = 0;
      if (v38 && v41)
      {
        uint64_t v43 = *v38;
        BOOL v42 = v43 && (v44 = *v41) != 0 && *(double *)(v43 + 12) < *(double *)(v44 + 12);
      }
      if (v40) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v40);
      }
      if (v39) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v39);
      }
      if (v42)
      {
        BOOL v46 = *(uint64_t **)a1;
        *(void *)a1 = *(void *)a2;
        *(void *)a2 = v46;
        goto LABEL_82;
      }
    }
  }
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>((uint64_t)a1, (uint64_t)a2, (uint64_t)a3);
  uint64_t v8 = *(uint64_t **)a4;
  uint64_t v9 = *(std::__shared_weak_count **)(a4 + 8);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v11 = *a3;
  uint64_t v10 = (std::__shared_weak_count *)a3[1];
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v12 = 0;
  if (v8 && v11)
  {
    uint64_t v13 = *v8;
    v12 = v13 && (uint64_t v14 = *v11) != 0 && *(double *)(v13 + 12) < *(double *)(v14 + 12);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (v12)
  {
    BOOL v15 = *a3;
    *a3 = *(uint64_t **)a4;
    *(void *)a4 = v15;
    uint64_t v16 = a3[1];
    a3[1] = *(uint64_t **)(a4 + 8);
    *(void *)(a4 + 8) = v16;
    long long v17 = *a3;
    uint64_t v18 = (std::__shared_weak_count *)a3[1];
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v20 = *a2;
    BOOL v19 = (std::__shared_weak_count *)a2[1];
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v21 = 0;
    if (v17 && v20)
    {
      uint64_t v22 = *v17;
      BOOL v21 = v22 && (v23 = *v20) != 0 && *(double *)(v22 + 12) < *(double *)(v23 + 12);
    }
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
    if (v21)
    {
      long long v24 = *a2;
      *a2 = *a3;
      *a3 = v24;
      BOOL v25 = a2[1];
      a2[1] = a3[1];
      a3[1] = v25;
      uint64_t v26 = *a2;
      uint64_t v27 = (std::__shared_weak_count *)a2[1];
      if (v27) {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v29 = *a1;
      uint64_t v28 = (std::__shared_weak_count *)a1[1];
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v30 = 0;
      if (v26 && v29)
      {
        uint64_t v31 = *v26;
        BOOL v30 = v31 && (v32 = *v29) != 0 && *(double *)(v31 + 12) < *(double *)(v32 + 12);
      }
      if (v28) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v28);
      }
      if (v27) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      }
      if (v30)
      {
        BOOL v33 = *a1;
        *a1 = *a2;
        *a2 = v33;
        uint64_t v34 = a1[1];
        a1[1] = a2[1];
        a2[1] = v34;
      }
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4, uint64_t a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>((uint64_t **)a1, (uint64_t **)a2, (uint64_t **)a3, (uint64_t)a4);
  uint64_t v10 = *(uint64_t **)a5;
  int v11 = *(std::__shared_weak_count **)(a5 + 8);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = *a4;
  BOOL v12 = (std::__shared_weak_count *)a4[1];
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v14 = 0;
  if (v10 && v13)
  {
    uint64_t v15 = *v10;
    BOOL v14 = v15 && (v16 = *v13) != 0 && *(double *)(v15 + 12) < *(double *)(v16 + 12);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (v14)
  {
    long long v17 = *a4;
    *a4 = *(uint64_t **)a5;
    *(void *)a5 = v17;
    uint64_t v18 = a4[1];
    a4[1] = *(uint64_t **)(a5 + 8);
    *(void *)(a5 + 8) = v18;
    BOOL v19 = *a4;
    BOOL v20 = (std::__shared_weak_count *)a4[1];
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v22 = *(uint64_t **)a3;
    BOOL v21 = *(std::__shared_weak_count **)(a3 + 8);
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v23 = 0;
    if (v19 && v22)
    {
      uint64_t v24 = *v19;
      v23 = v24 && (uint64_t v25 = *v22) != 0 && *(double *)(v24 + 12) < *(double *)(v25 + 12);
    }
    if (v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    }
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    if (v23)
    {
      uint64_t v26 = *(uint64_t **)a3;
      *(void *)a3 = *a4;
      *a4 = v26;
      uint64_t v27 = *(uint64_t **)(a3 + 8);
      *(void *)(a3 + 8) = a4[1];
      a4[1] = v27;
      uint64_t v28 = *(uint64_t **)a3;
      BOOL v29 = *(std::__shared_weak_count **)(a3 + 8);
      if (v29) {
        atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v31 = *(uint64_t **)a2;
      BOOL v30 = *(std::__shared_weak_count **)(a2 + 8);
      if (v30) {
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v32 = 0;
      if (v28 && v31)
      {
        uint64_t v33 = *v28;
        BOOL v32 = v33 && (v34 = *v31) != 0 && *(double *)(v33 + 12) < *(double *)(v34 + 12);
      }
      if (v30) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v30);
      }
      if (v29) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v29);
      }
      if (v32)
      {
        uint64_t v35 = *(uint64_t **)a2;
        *(void *)a2 = *(void *)a3;
        *(void *)a3 = v35;
        uint64_t v36 = *(void *)(a2 + 8);
        *(void *)(a2 + 8) = *(void *)(a3 + 8);
        *(void *)(a3 + 8) = v36;
        uint64_t v37 = *(uint64_t **)a2;
        BOOL v38 = *(std::__shared_weak_count **)(a2 + 8);
        if (v38) {
          atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long long v40 = *(uint64_t **)a1;
        BOOL v39 = *(std::__shared_weak_count **)(a1 + 8);
        if (v39) {
          atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        BOOL v41 = 0;
        if (v37 && v40)
        {
          uint64_t v42 = *v37;
          BOOL v41 = v42 && (v43 = *v40) != 0 && *(double *)(v42 + 12) < *(double *)(v43 + 12);
        }
        if (v39) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v39);
        }
        if (v38) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v38);
        }
        if (v41)
        {
          uint64_t v44 = *(uint64_t **)a1;
          *(void *)a1 = *(void *)a2;
          *(void *)a2 = v44;
          uint64_t v45 = *(void *)(a1 + 8);
          *(void *)(a1 + 8) = *(void *)(a2 + 8);
          *(void *)(a2 + 8) = v45;
        }
      }
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(uint64_t **)(a2 - 16);
      uint64_t v7 = *(std::__shared_weak_count **)(a2 - 8);
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v9 = *(uint64_t **)a1;
      uint64_t v8 = *(std::__shared_weak_count **)(a1 + 8);
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v10 = 0;
      if (v6 && v9)
      {
        uint64_t v11 = *v6;
        BOOL v10 = v11 && (v12 = *v9) != 0 && *(double *)(v11 + 12) < *(double *)(v12 + 12);
      }
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      if (v10)
      {
        uint64_t v37 = *(uint64_t **)a1;
        *(void *)a1 = *(void *)(a2 - 16);
        *(void *)(a2 - 16) = v37;
        uint64_t v38 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = *(void *)(a2 - 8);
        *(void *)(a2 - 8) = v38;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(a1, a1 + 16, a2 - 16);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>((uint64_t **)a1, (uint64_t **)(a1 + 16), (uint64_t **)(a1 + 32), a2 - 16);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(a1, a1 + 16, a1 + 32, (uint64_t **)(a1 + 48), a2 - 16);
      return 1;
    default:
      uint64_t v13 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*>(a1, a1 + 16, a1 + 32);
      uint64_t v14 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v15 = 0;
      int v16 = 0;
      break;
  }
  while (2)
  {
    long long v17 = *(uint64_t **)v14;
    uint64_t v18 = *(std::__shared_weak_count **)(v14 + 8);
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v20 = *(uint64_t **)v13;
    BOOL v19 = *(std::__shared_weak_count **)(v13 + 8);
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v17) {
      BOOL v21 = v20 == 0;
    }
    else {
      BOOL v21 = 1;
    }
    if (!v21)
    {
      uint64_t v22 = *v17;
      if (v22)
      {
        uint64_t v23 = *v20;
        if (v23)
        {
          BOOL v24 = *(double *)(v22 + 12) < *(double *)(v23 + 12);
          if (!v19) {
            goto LABEL_27;
          }
          goto LABEL_26;
        }
      }
    }
    BOOL v24 = 0;
    if (v19) {
LABEL_26:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
LABEL_27:
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
    if (!v24) {
      goto LABEL_55;
    }
    uint64_t v26 = *(uint64_t **)v14;
    uint64_t v25 = *(std::__shared_weak_count **)(v14 + 8);
    uint64_t v27 = v15;
    *(void *)uint64_t v14 = 0;
    *(void *)(v14 + 8) = 0;
    while (1)
    {
      uint64_t v28 = a1 + v27;
      long long v29 = *(_OWORD *)(a1 + v27 + 32);
      *(void *)(v28 + 32) = 0;
      *(void *)(v28 + 40) = 0;
      BOOL v30 = *(std::__shared_weak_count **)(a1 + v27 + 56);
      *(_OWORD *)(v28 + 48) = v29;
      if (v30) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v30);
      }
      if (v27 == -32) {
        break;
      }
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v32 = *(uint64_t **)(a1 + v27 + 16);
      uint64_t v31 = *(std::__shared_weak_count **)(a1 + v27 + 24);
      if (v31) {
        atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v33 = 0;
      if (v26 && v32)
      {
        if (!*v26 || (uint64_t v34 = *v32) == 0)
        {
          BOOL v33 = 0;
          if (!v31) {
            goto LABEL_45;
          }
LABEL_44:
          std::__shared_weak_count::__release_shared[abi:ne180100](v31);
          goto LABEL_45;
        }
        BOOL v33 = *(double *)(*v26 + 12) < *(double *)(v34 + 12);
      }
      if (v31) {
        goto LABEL_44;
      }
LABEL_45:
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      v27 -= 16;
      if (!v33)
      {
        uint64_t v35 = (void *)(a1 + v27 + 48);
        goto LABEL_52;
      }
    }
    uint64_t v35 = (void *)a1;
LABEL_52:
    uint64_t v36 = (std::__shared_weak_count *)v35[1];
    *uint64_t v35 = v26;
    v35[1] = v25;
    if (v36) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v36);
    }
    if (++v16 != 8)
    {
LABEL_55:
      uint64_t v13 = v14;
      v15 += 16;
      v14 += 16;
      if (v14 == a2) {
        return 1;
      }
      continue;
    }
    return v14 + 16 == a2;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(void **)(a2 - 16);
      uint64_t v7 = *(std::__shared_weak_count **)(a2 - 8);
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v8 = *(std::__shared_weak_count **)(a1 + 8);
      uint64_t v31 = *(void **)a1;
      BOOL v32 = v8;
      if (v8)
      {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        BOOL v9 = lessThan(v6, &v31);
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        if (!v7) {
          goto LABEL_7;
        }
      }
      else
      {
        BOOL v9 = lessThan(v6, &v31);
        if (!v7)
        {
LABEL_7:
          if (v9)
          {
            BOOL v10 = *(void **)a1;
            *(void *)a1 = *(void *)(v2 - 16);
            *(void *)(v2 - 16) = v10;
            uint64_t v11 = *(void *)(a1 + 8);
            *(void *)(a1 + 8) = *(void *)(v2 - 8);
            *(void *)(v2 - 8) = v11;
          }
          return 1;
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      goto LABEL_7;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(a1, a1 + 16, a2 - 16);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16);
      return 1;
    default:
      uint64_t v12 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>*>(a1, a1 + 16, a1 + 32);
      uint64_t v13 = a1 + 48;
      if (a1 + 48 == v2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      uint64_t v30 = v2;
LABEL_11:
      int v16 = *(void **)v13;
      long long v17 = *(std::__shared_weak_count **)(v13 + 8);
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v18 = *(std::__shared_weak_count **)(v12 + 8);
      uint64_t v31 = *(void **)v12;
      BOOL v32 = v18;
      if (v18)
      {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        BOOL v19 = lessThan(v16, &v31);
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        if (!v17) {
          goto LABEL_16;
        }
        goto LABEL_15;
      }
      BOOL v19 = lessThan(v16, &v31);
      if (v17) {
LABEL_15:
      }
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
LABEL_16:
      if (!v19) {
        goto LABEL_36;
      }
      BOOL v20 = *(void **)v13;
      BOOL v21 = *(std::__shared_weak_count **)(v13 + 8);
      uint64_t v22 = v14;
      *(void *)uint64_t v13 = 0;
      *(void *)(v13 + 8) = 0;
      break;
  }
  while (1)
  {
    uint64_t v23 = a1 + v22;
    long long v24 = *(_OWORD *)(a1 + v22 + 32);
    *(void *)(v23 + 32) = 0;
    *(void *)(v23 + 40) = 0;
    uint64_t v25 = *(std::__shared_weak_count **)(a1 + v22 + 56);
    *(_OWORD *)(v23 + 48) = v24;
    if (v25) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    }
    if (v22 == -32) {
      break;
    }
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v26 = *(std::__shared_weak_count **)(a1 + v22 + 24);
    uint64_t v31 = *(void **)(a1 + v22 + 16);
    BOOL v32 = v26;
    if (!v26)
    {
      BOOL v27 = lessThan(v20, &v31);
      if (!v21) {
        goto LABEL_26;
      }
LABEL_25:
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      goto LABEL_26;
    }
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    BOOL v27 = lessThan(v20, &v31);
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
    if (v21) {
      goto LABEL_25;
    }
LABEL_26:
    v22 -= 16;
    if (!v27)
    {
      uint64_t v28 = (void *)(a1 + v22 + 48);
      goto LABEL_33;
    }
  }
  uint64_t v28 = (void *)a1;
LABEL_33:
  uint64_t v2 = v30;
  long long v29 = (std::__shared_weak_count *)v28[1];
  *uint64_t v28 = v20;
  v28[1] = v21;
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  if (++v15 != 8)
  {
LABEL_36:
    uint64_t v12 = v13;
    v14 += 16;
    v13 += 16;
    if (v13 == v2) {
      return 1;
    }
    goto LABEL_11;
  }
  return v13 + 16 == v30;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(*(void **)(a2 - 16), *(std::__shared_weak_count **)(a2 - 8), a1))
      {
        uint64_t v6 = *(void *)a1;
        *(void *)a1 = *(void *)(a2 - 16);
        *(void *)(a2 - 16) = v6;
        uint64_t v7 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = *(void *)(a2 - 8);
        *(void *)(a2 - 8) = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>((void *)a1, (void **)(a1 + 16), (void **)(a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>((void *)a1, (void **)(a1 + 16), (void **)(a1 + 32), a2 - 16);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>((void *)a1, (void **)(a1 + 16), (void **)(a1 + 32), a1 + 48, a2 - 16);
      return 1;
    default:
      uint64_t v8 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>*>((void *)a1, (void **)(a1 + 16), (void **)(a1 + 32));
      uint64_t v9 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    if (sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(*(void **)v9, *(std::__shared_weak_count **)(v9 + 8), v8))
    {
      long long v12 = *(_OWORD *)v9;
      *(void *)uint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
      uint64_t v13 = (void *)v12;
      long long v22 = v12;
      uint64_t v14 = (std::__shared_weak_count *)*((void *)&v12 + 1);
      uint64_t v15 = v10;
      while (1)
      {
        uint64_t v16 = a1 + v15;
        long long v17 = *(_OWORD *)(a1 + v15 + 32);
        *(void *)(v16 + 32) = 0;
        *(void *)(v16 + 40) = 0;
        uint64_t v18 = *(std::__shared_weak_count **)(a1 + v15 + 56);
        *(_OWORD *)(v16 + 48) = v17;
        if (v18) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        }
        if (v15 == -32) {
          break;
        }
        BOOL v19 = sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> const&)#1}::operator()(v13, v14, a1 + v15 + 16);
        v15 -= 16;
        if (!v19)
        {
          uint64_t v20 = a1 + v15 + 48;
          goto LABEL_14;
        }
      }
      uint64_t v20 = a1;
LABEL_14:
      BOOL v21 = *(std::__shared_weak_count **)(v20 + 8);
      *(_OWORD *)uint64_t v20 = v22;
      if (v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }
      if (++v11 == 8) {
        return v9 + 16 == a2;
      }
    }
    uint64_t v8 = v9;
    v10 += 16;
    v9 += 16;
    if (v9 == a2) {
      return 1;
    }
  }
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(uint64_t **)a2;
  uint64_t v8 = (std::__shared_weak_count **)(a2 + 8);
  uint64_t v7 = *(std::__shared_weak_count **)(a2 + 8);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(uint64_t **)a1;
  int v11 = (std::__shared_weak_count **)(a1 + 8);
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 8);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v6) {
    BOOL v12 = v9 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12 || (v13 = *v6) == 0 || (uint64_t v14 = *v9) == 0)
  {
    BOOL v15 = 0;
    if (!v10) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  BOOL v15 = *(double *)(v13 + 20) < *(double *)(v14 + 20);
  if (v10) {
LABEL_14:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
LABEL_15:
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v16 = *(uint64_t **)a3;
  long long v17 = *(std::__shared_weak_count **)(a3 + 8);
  if (v15)
  {
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v19 = *(uint64_t **)a2;
    uint64_t v18 = *(std::__shared_weak_count **)(a2 + 8);
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v20 = 0;
    if (v16 && v19)
    {
      uint64_t v21 = *v16;
      BOOL v20 = v21 && (v22 = *v19) != 0 && *(double *)(v21 + 20) < *(double *)(v22 + 20);
    }
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
    uint64_t v28 = *(uint64_t **)a1;
    if (v20)
    {
      *(void *)a1 = *(void *)a3;
      *(void *)a3 = v28;
LABEL_74:
      uint64_t v8 = (std::__shared_weak_count **)(a3 + 8);
LABEL_82:
      uint64_t v47 = *v11;
      *int v11 = *v8;
      *uint64_t v8 = v47;
      return;
    }
    *(void *)a1 = *(void *)a2;
    *(void *)a2 = v28;
    long long v29 = *(std::__shared_weak_count **)(a1 + 8);
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = v29;
    uint64_t v30 = *(uint64_t **)a3;
    uint64_t v31 = *(std::__shared_weak_count **)(a3 + 8);
    if (v31)
    {
      atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
      long long v29 = *v8;
    }
    BOOL v32 = *(uint64_t **)a2;
    if (v29) {
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v33 = 0;
    if (v30 && v32)
    {
      uint64_t v34 = *v30;
      v33 = v34 && (uint64_t v35 = *v32) != 0 && *(double *)(v34 + 20) < *(double *)(v35 + 20);
    }
    if (v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    }
    if (v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v31);
    }
    if (v33)
    {
      uint64_t v45 = *(uint64_t **)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v45;
      int v11 = v8;
      goto LABEL_74;
    }
  }
  else
  {
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v24 = *(uint64_t **)a2;
    uint64_t v23 = *(std::__shared_weak_count **)(a2 + 8);
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v25 = 0;
    if (v16 && v24)
    {
      uint64_t v26 = *v16;
      BOOL v25 = v26 && (v27 = *v24) != 0 && *(double *)(v26 + 20) < *(double *)(v27 + 20);
    }
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
    if (v25)
    {
      uint64_t v36 = *(uint64_t **)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v36;
      uint64_t v37 = *(void *)(a2 + 8);
      *(void *)(a2 + 8) = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = v37;
      uint64_t v38 = *(uint64_t **)a2;
      BOOL v39 = *(std::__shared_weak_count **)(a2 + 8);
      if (v39) {
        atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v41 = *(uint64_t **)a1;
      long long v40 = *(std::__shared_weak_count **)(a1 + 8);
      if (v40) {
        atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v42 = 0;
      if (v38 && v41)
      {
        uint64_t v43 = *v38;
        BOOL v42 = v43 && (v44 = *v41) != 0 && *(double *)(v43 + 20) < *(double *)(v44 + 20);
      }
      if (v40) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v40);
      }
      if (v39) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v39);
      }
      if (v42)
      {
        BOOL v46 = *(uint64_t **)a1;
        *(void *)a1 = *(void *)a2;
        *(void *)a2 = v46;
        goto LABEL_82;
      }
    }
  }
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>*>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>*>((uint64_t)a1, (uint64_t)a2, (uint64_t)a3);
  uint64_t v8 = *(uint64_t **)a4;
  uint64_t v9 = *(std::__shared_weak_count **)(a4 + 8);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v11 = *a3;
  uint64_t v10 = (std::__shared_weak_count *)a3[1];
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v12 = 0;
  if (v8 && v11)
  {
    uint64_t v13 = *v8;
    v12 = v13 && (uint64_t v14 = *v11) != 0 && *(double *)(v13 + 20) < *(double *)(v14 + 20);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (v12)
  {
    BOOL v15 = *a3;
    *a3 = *(uint64_t **)a4;
    *(void *)a4 = v15;
    uint64_t v16 = a3[1];
    a3[1] = *(uint64_t **)(a4 + 8);
    *(void *)(a4 + 8) = v16;
    long long v17 = *a3;
    uint64_t v18 = (std::__shared_weak_count *)a3[1];
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v20 = *a2;
    BOOL v19 = (std::__shared_weak_count *)a2[1];
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v21 = 0;
    if (v17 && v20)
    {
      uint64_t v22 = *v17;
      BOOL v21 = v22 && (v23 = *v20) != 0 && *(double *)(v22 + 20) < *(double *)(v23 + 20);
    }
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
    if (v21)
    {
      long long v24 = *a2;
      *a2 = *a3;
      *a3 = v24;
      BOOL v25 = a2[1];
      a2[1] = a3[1];
      a3[1] = v25;
      uint64_t v26 = *a2;
      uint64_t v27 = (std::__shared_weak_count *)a2[1];
      if (v27) {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v29 = *a1;
      uint64_t v28 = (std::__shared_weak_count *)a1[1];
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v30 = 0;
      if (v26 && v29)
      {
        uint64_t v31 = *v26;
        BOOL v30 = v31 && (v32 = *v29) != 0 && *(double *)(v31 + 20) < *(double *)(v32 + 20);
      }
      if (v28) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v28);
      }
      if (v27) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      }
      if (v30)
      {
        BOOL v33 = *a1;
        *a1 = *a2;
        *a2 = v33;
        uint64_t v34 = a1[1];
        a1[1] = a2[1];
        a2[1] = v34;
      }
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4, uint64_t a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>*>((uint64_t **)a1, (uint64_t **)a2, (uint64_t **)a3, (uint64_t)a4);
  uint64_t v10 = *(uint64_t **)a5;
  int v11 = *(std::__shared_weak_count **)(a5 + 8);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = *a4;
  BOOL v12 = (std::__shared_weak_count *)a4[1];
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v14 = 0;
  if (v10 && v13)
  {
    uint64_t v15 = *v10;
    BOOL v14 = v15 && (v16 = *v13) != 0 && *(double *)(v15 + 20) < *(double *)(v16 + 20);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (v14)
  {
    long long v17 = *a4;
    *a4 = *(uint64_t **)a5;
    *(void *)a5 = v17;
    uint64_t v18 = a4[1];
    a4[1] = *(uint64_t **)(a5 + 8);
    *(void *)(a5 + 8) = v18;
    BOOL v19 = *a4;
    BOOL v20 = (std::__shared_weak_count *)a4[1];
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v22 = *(uint64_t **)a3;
    BOOL v21 = *(std::__shared_weak_count **)(a3 + 8);
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v23 = 0;
    if (v19 && v22)
    {
      uint64_t v24 = *v19;
      v23 = v24 && (uint64_t v25 = *v22) != 0 && *(double *)(v24 + 20) < *(double *)(v25 + 20);
    }
    if (v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    }
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    if (v23)
    {
      uint64_t v26 = *(uint64_t **)a3;
      *(void *)a3 = *a4;
      *a4 = v26;
      uint64_t v27 = *(uint64_t **)(a3 + 8);
      *(void *)(a3 + 8) = a4[1];
      a4[1] = v27;
      uint64_t v28 = *(uint64_t **)a3;
      long long v29 = *(std::__shared_weak_count **)(a3 + 8);
      if (v29) {
        atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v31 = *(uint64_t **)a2;
      BOOL v30 = *(std::__shared_weak_count **)(a2 + 8);
      if (v30) {
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v32 = 0;
      if (v28 && v31)
      {
        uint64_t v33 = *v28;
        BOOL v32 = v33 && (v34 = *v31) != 0 && *(double *)(v33 + 20) < *(double *)(v34 + 20);
      }
      if (v30) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v30);
      }
      if (v29) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v29);
      }
      if (v32)
      {
        uint64_t v35 = *(uint64_t **)a2;
        *(void *)a2 = *(void *)a3;
        *(void *)a3 = v35;
        uint64_t v36 = *(void *)(a2 + 8);
        *(void *)(a2 + 8) = *(void *)(a3 + 8);
        *(void *)(a3 + 8) = v36;
        uint64_t v37 = *(uint64_t **)a2;
        uint64_t v38 = *(std::__shared_weak_count **)(a2 + 8);
        if (v38) {
          atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long long v40 = *(uint64_t **)a1;
        BOOL v39 = *(std::__shared_weak_count **)(a1 + 8);
        if (v39) {
          atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        BOOL v41 = 0;
        if (v37 && v40)
        {
          uint64_t v42 = *v37;
          BOOL v41 = v42 && (v43 = *v40) != 0 && *(double *)(v42 + 20) < *(double *)(v43 + 20);
        }
        if (v39) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v39);
        }
        if (v38) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v38);
        }
        if (v41)
        {
          uint64_t v44 = *(uint64_t **)a1;
          *(void *)a1 = *(void *)a2;
          *(void *)a2 = v44;
          uint64_t v45 = *(void *)(a1 + 8);
          *(void *)(a1 + 8) = *(void *)(a2 + 8);
          *(void *)(a2 + 8) = v45;
        }
      }
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(uint64_t **)(a2 - 16);
      uint64_t v7 = *(std::__shared_weak_count **)(a2 - 8);
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v9 = *(uint64_t **)a1;
      uint64_t v8 = *(std::__shared_weak_count **)(a1 + 8);
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v10 = 0;
      if (v6 && v9)
      {
        uint64_t v11 = *v6;
        BOOL v10 = v11 && (v12 = *v9) != 0 && *(double *)(v11 + 20) < *(double *)(v12 + 20);
      }
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      if (v10)
      {
        uint64_t v37 = *(uint64_t **)a1;
        *(void *)a1 = *(void *)(a2 - 16);
        *(void *)(a2 - 16) = v37;
        uint64_t v38 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = *(void *)(a2 - 8);
        *(void *)(a2 - 8) = v38;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>*>(a1, a1 + 16, a2 - 16);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>*>((uint64_t **)a1, (uint64_t **)(a1 + 16), (uint64_t **)(a1 + 32), a2 - 16);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>*>(a1, a1 + 16, a1 + 32, (uint64_t **)(a1 + 48), a2 - 16);
      return 1;
    default:
      uint64_t v13 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>*>(a1, a1 + 16, a1 + 32);
      uint64_t v14 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v15 = 0;
      int v16 = 0;
      break;
  }
  while (2)
  {
    long long v17 = *(uint64_t **)v14;
    uint64_t v18 = *(std::__shared_weak_count **)(v14 + 8);
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v20 = *(uint64_t **)v13;
    BOOL v19 = *(std::__shared_weak_count **)(v13 + 8);
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v17) {
      BOOL v21 = v20 == 0;
    }
    else {
      BOOL v21 = 1;
    }
    if (!v21)
    {
      uint64_t v22 = *v17;
      if (v22)
      {
        uint64_t v23 = *v20;
        if (v23)
        {
          BOOL v24 = *(double *)(v22 + 20) < *(double *)(v23 + 20);
          if (!v19) {
            goto LABEL_27;
          }
          goto LABEL_26;
        }
      }
    }
    BOOL v24 = 0;
    if (v19) {
LABEL_26:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
LABEL_27:
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
    if (!v24) {
      goto LABEL_55;
    }
    uint64_t v26 = *(uint64_t **)v14;
    uint64_t v25 = *(std::__shared_weak_count **)(v14 + 8);
    uint64_t v27 = v15;
    *(void *)uint64_t v14 = 0;
    *(void *)(v14 + 8) = 0;
    while (1)
    {
      uint64_t v28 = a1 + v27;
      long long v29 = *(_OWORD *)(a1 + v27 + 32);
      *(void *)(v28 + 32) = 0;
      *(void *)(v28 + 40) = 0;
      BOOL v30 = *(std::__shared_weak_count **)(a1 + v27 + 56);
      *(_OWORD *)(v28 + 48) = v29;
      if (v30) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v30);
      }
      if (v27 == -32) {
        break;
      }
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v32 = *(uint64_t **)(a1 + v27 + 16);
      uint64_t v31 = *(std::__shared_weak_count **)(a1 + v27 + 24);
      if (v31) {
        atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v33 = 0;
      if (v26 && v32)
      {
        if (!*v26 || (uint64_t v34 = *v32) == 0)
        {
          BOOL v33 = 0;
          if (!v31) {
            goto LABEL_45;
          }
LABEL_44:
          std::__shared_weak_count::__release_shared[abi:ne180100](v31);
          goto LABEL_45;
        }
        BOOL v33 = *(double *)(*v26 + 20) < *(double *)(v34 + 20);
      }
      if (v31) {
        goto LABEL_44;
      }
LABEL_45:
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      v27 -= 16;
      if (!v33)
      {
        uint64_t v35 = (void *)(a1 + v27 + 48);
        goto LABEL_52;
      }
    }
    uint64_t v35 = (void *)a1;
LABEL_52:
    uint64_t v36 = (std::__shared_weak_count *)v35[1];
    *uint64_t v35 = v26;
    v35[1] = v25;
    if (v36) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v36);
    }
    if (++v16 != 8)
    {
LABEL_55:
      uint64_t v13 = v14;
      v15 += 16;
      v14 += 16;
      if (v14 == a2) {
        return 1;
      }
      continue;
    }
    return v14 + 16 == a2;
  }
}

BOOL sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1}::operator()(void *a1, std::__shared_weak_count *a2, uint64_t a3)
{
  if (a2) {
    atomic_fetch_add_explicit(&a2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(void **)a3;
  BOOL v5 = *(std::__shared_weak_count **)(a3 + 8);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v6 = 0;
  if (a1 && v4)
  {
    if (*a1 && *v4)
    {
      uint64_t v7 = (uint64_t *)a1[2];
      uint64_t v8 = (std::__shared_weak_count *)a1[3];
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v9 = (uint64_t *)v4[2];
      BOOL v10 = (std::__shared_weak_count *)v4[3];
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v6 = 0;
      if (v7 && v9)
      {
        uint64_t v11 = *v7;
        BOOL v6 = v11 && (v12 = *v9) != 0 && *(double *)(v11 + 28) < *(double *)(v12 + 28);
      }
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
    }
    else
    {
      BOOL v6 = 0;
    }
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (a2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a2);
  }
  return v6;
}

BOOL std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>*>(void *a1, void **a2, void **a3)
{
  BOOL v6 = (uint64_t *)(a2 + 1);
  BOOL v7 = sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1}::operator()(*a2, (std::__shared_weak_count *)a2[1], (uint64_t)a1);
  BOOL result = sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1}::operator()(*a3, (std::__shared_weak_count *)a3[1], (uint64_t)a2);
  if (v7)
  {
    uint64_t v9 = (void *)*a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v9;
      BOOL v10 = a1 + 1;
    }
    else
    {
      *a1 = *a2;
      *a2 = v9;
      uint64_t v14 = (void *)a1[1];
      a1[1] = a2[1];
      a2[1] = v14;
      BOOL result = sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1}::operator()(*a3, (std::__shared_weak_count *)a3[1], (uint64_t)a2);
      if (!result) {
        return result;
      }
      uint64_t v15 = *a2;
      *a2 = *a3;
      *a3 = v15;
      BOOL v10 = v6;
    }
    BOOL v6 = (uint64_t *)(a3 + 1);
    goto LABEL_10;
  }
  if (result)
  {
    uint64_t v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    uint64_t v12 = a2[1];
    a2[1] = a3[1];
    a3[1] = v12;
    BOOL result = sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1}::operator()(*a2, (std::__shared_weak_count *)a2[1], (uint64_t)a1);
    if (result)
    {
      uint64_t v13 = (void *)*a1;
      *a1 = *a2;
      BOOL v10 = a1 + 1;
      *a2 = v13;
LABEL_10:
      uint64_t v16 = *v10;
      *BOOL v10 = *v6;
      *BOOL v6 = v16;
    }
  }
  return result;
}

BOOL std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>*>(void *a1, void **a2, void **a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>*>(a1, a2, a3);
  BOOL result = sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1}::operator()(*(void **)a4, *(std::__shared_weak_count **)(a4 + 8), (uint64_t)a3);
  if (result)
  {
    uint64_t v9 = *a3;
    *a3 = *(void **)a4;
    *(void *)a4 = v9;
    BOOL v10 = a3[1];
    a3[1] = *(void **)(a4 + 8);
    *(void *)(a4 + 8) = v10;
    BOOL result = sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1}::operator()(*a3, (std::__shared_weak_count *)a3[1], (uint64_t)a2);
    if (result)
    {
      uint64_t v11 = *a2;
      *a2 = *a3;
      *a3 = v11;
      uint64_t v12 = a2[1];
      a2[1] = a3[1];
      a3[1] = v12;
      BOOL result = sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1}::operator()(*a2, (std::__shared_weak_count *)a2[1], (uint64_t)a1);
      if (result)
      {
        uint64_t v13 = (void *)*a1;
        *a1 = *a2;
        *a2 = v13;
        uint64_t v14 = (void *)a1[1];
        a1[1] = a2[1];
        a2[1] = v14;
      }
    }
  }
  return result;
}

BOOL std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>*>(void *a1, void **a2, void **a3, uint64_t a4, uint64_t a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>*>(a1, a2, a3, a4);
  BOOL result = sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1}::operator()(*(void **)a5, *(std::__shared_weak_count **)(a5 + 8), a4);
  if (result)
  {
    uint64_t v11 = *(void *)a4;
    *(void *)a4 = *(void *)a5;
    *(void *)a5 = v11;
    uint64_t v12 = *(void *)(a4 + 8);
    *(void *)(a4 + 8) = *(void *)(a5 + 8);
    *(void *)(a5 + 8) = v12;
    BOOL result = sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1}::operator()(*(void **)a4, *(std::__shared_weak_count **)(a4 + 8), (uint64_t)a3);
    if (result)
    {
      uint64_t v13 = *a3;
      *a3 = *(void **)a4;
      *(void *)a4 = v13;
      uint64_t v14 = a3[1];
      a3[1] = *(void **)(a4 + 8);
      *(void *)(a4 + 8) = v14;
      BOOL result = sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1}::operator()(*a3, (std::__shared_weak_count *)a3[1], (uint64_t)a2);
      if (result)
      {
        uint64_t v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        uint64_t v16 = a2[1];
        a2[1] = a3[1];
        a3[1] = v16;
        BOOL result = sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1}::operator()(*a2, (std::__shared_weak_count *)a2[1], (uint64_t)a1);
        if (result)
        {
          long long v17 = (void *)*a1;
          *a1 = *a2;
          *a2 = v17;
          uint64_t v18 = (void *)a1[1];
          a1[1] = a2[1];
          a2[1] = v18;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1}::operator()(*(void **)(a2 - 16), *(std::__shared_weak_count **)(a2 - 8), a1))
      {
        uint64_t v6 = *(void *)a1;
        *(void *)a1 = *(void *)(a2 - 16);
        *(void *)(a2 - 16) = v6;
        uint64_t v7 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = *(void *)(a2 - 8);
        *(void *)(a2 - 8) = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>*>((void *)a1, (void **)(a1 + 16), (void **)(a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>*>((void *)a1, (void **)(a1 + 16), (void **)(a1 + 32), a2 - 16);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>*>((void *)a1, (void **)(a1 + 16), (void **)(a1 + 32), a1 + 48, a2 - 16);
      return 1;
    default:
      uint64_t v8 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>*>((void *)a1, (void **)(a1 + 16), (void **)(a1 + 32));
      uint64_t v9 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    if (sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1}::operator()(*(void **)v9, *(std::__shared_weak_count **)(v9 + 8), v8))
    {
      long long v12 = *(_OWORD *)v9;
      *(void *)uint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
      uint64_t v13 = (void *)v12;
      long long v22 = v12;
      uint64_t v14 = (std::__shared_weak_count *)*((void *)&v12 + 1);
      uint64_t v15 = v10;
      while (1)
      {
        uint64_t v16 = a1 + v15;
        long long v17 = *(_OWORD *)(a1 + v15 + 32);
        *(void *)(v16 + 32) = 0;
        *(void *)(v16 + 40) = 0;
        uint64_t v18 = *(std::__shared_weak_count **)(a1 + v15 + 56);
        *(_OWORD *)(v16 + 48) = v17;
        if (v18) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        }
        if (v15 == -32) {
          break;
        }
        BOOL v19 = sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> const&)#1}::operator()(v13, v14, a1 + v15 + 16);
        v15 -= 16;
        if (!v19)
        {
          uint64_t v20 = a1 + v15 + 48;
          goto LABEL_14;
        }
      }
      uint64_t v20 = a1;
LABEL_14:
      BOOL v21 = *(std::__shared_weak_count **)(v20 + 8);
      *(_OWORD *)uint64_t v20 = v22;
      if (v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }
      if (++v11 == 8) {
        return v9 + 16 == a2;
      }
    }
    uint64_t v8 = v9;
    v10 += 16;
    v9 += 16;
    if (v9 == a2) {
      return 1;
    }
  }
}

void std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA26C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

void std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA26C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2690;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

void std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2690;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA25B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

void std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA25B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2658;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

void std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2658;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2700;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

void std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2700;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2620;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

void std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2620;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2540;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

void std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2540;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2578;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

void std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2578;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA25E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

void std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA25E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(uint64_t **)a2;
  uint64_t v8 = (std::__shared_weak_count **)(a2 + 8);
  uint64_t v7 = *(std::__shared_weak_count **)(a2 + 8);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(uint64_t **)a1;
  int v11 = (std::__shared_weak_count **)(a1 + 8);
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 8);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v6) {
    BOOL v12 = v9 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12 || (v13 = *v6) == 0 || (uint64_t v14 = *v9) == 0)
  {
    BOOL v15 = 0;
    if (!v10) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  BOOL v15 = *(double *)(v13 + 28) < *(double *)(v14 + 28);
  if (v10) {
LABEL_14:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
LABEL_15:
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v16 = *(uint64_t **)a3;
  long long v17 = *(std::__shared_weak_count **)(a3 + 8);
  if (v15)
  {
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v19 = *(uint64_t **)a2;
    uint64_t v18 = *(std::__shared_weak_count **)(a2 + 8);
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v20 = 0;
    if (v16 && v19)
    {
      uint64_t v21 = *v16;
      BOOL v20 = v21 && (v22 = *v19) != 0 && *(double *)(v21 + 28) < *(double *)(v22 + 28);
    }
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
    uint64_t v28 = *(uint64_t **)a1;
    if (v20)
    {
      *(void *)a1 = *(void *)a3;
      *(void *)a3 = v28;
LABEL_74:
      uint64_t v8 = (std::__shared_weak_count **)(a3 + 8);
LABEL_82:
      uint64_t v47 = *v11;
      *int v11 = *v8;
      *uint64_t v8 = v47;
      return;
    }
    *(void *)a1 = *(void *)a2;
    *(void *)a2 = v28;
    long long v29 = *(std::__shared_weak_count **)(a1 + 8);
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = v29;
    BOOL v30 = *(uint64_t **)a3;
    uint64_t v31 = *(std::__shared_weak_count **)(a3 + 8);
    if (v31)
    {
      atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
      long long v29 = *v8;
    }
    BOOL v32 = *(uint64_t **)a2;
    if (v29) {
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v33 = 0;
    if (v30 && v32)
    {
      uint64_t v34 = *v30;
      v33 = v34 && (uint64_t v35 = *v32) != 0 && *(double *)(v34 + 28) < *(double *)(v35 + 28);
    }
    if (v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    }
    if (v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v31);
    }
    if (v33)
    {
      uint64_t v45 = *(uint64_t **)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v45;
      int v11 = v8;
      goto LABEL_74;
    }
  }
  else
  {
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v24 = *(uint64_t **)a2;
    uint64_t v23 = *(std::__shared_weak_count **)(a2 + 8);
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v25 = 0;
    if (v16 && v24)
    {
      uint64_t v26 = *v16;
      BOOL v25 = v26 && (v27 = *v24) != 0 && *(double *)(v26 + 28) < *(double *)(v27 + 28);
    }
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
    if (v25)
    {
      uint64_t v36 = *(uint64_t **)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v36;
      uint64_t v37 = *(void *)(a2 + 8);
      *(void *)(a2 + 8) = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = v37;
      uint64_t v38 = *(uint64_t **)a2;
      BOOL v39 = *(std::__shared_weak_count **)(a2 + 8);
      if (v39) {
        atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v41 = *(uint64_t **)a1;
      long long v40 = *(std::__shared_weak_count **)(a1 + 8);
      if (v40) {
        atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v42 = 0;
      if (v38 && v41)
      {
        uint64_t v43 = *v38;
        BOOL v42 = v43 && (v44 = *v41) != 0 && *(double *)(v43 + 28) < *(double *)(v44 + 28);
      }
      if (v40) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v40);
      }
      if (v39) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v39);
      }
      if (v42)
      {
        BOOL v46 = *(uint64_t **)a1;
        *(void *)a1 = *(void *)a2;
        *(void *)a2 = v46;
        goto LABEL_82;
      }
    }
  }
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>*>(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>*>((uint64_t)a1, (uint64_t)a2, (uint64_t)a3);
  uint64_t v8 = *(uint64_t **)a4;
  uint64_t v9 = *(std::__shared_weak_count **)(a4 + 8);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v11 = *a3;
  uint64_t v10 = (std::__shared_weak_count *)a3[1];
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v12 = 0;
  if (v8 && v11)
  {
    uint64_t v13 = *v8;
    v12 = v13 && (uint64_t v14 = *v11) != 0 && *(double *)(v13 + 28) < *(double *)(v14 + 28);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (v12)
  {
    BOOL v15 = *a3;
    *a3 = *(uint64_t **)a4;
    *(void *)a4 = v15;
    uint64_t v16 = a3[1];
    a3[1] = *(uint64_t **)(a4 + 8);
    *(void *)(a4 + 8) = v16;
    long long v17 = *a3;
    uint64_t v18 = (std::__shared_weak_count *)a3[1];
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v20 = *a2;
    BOOL v19 = (std::__shared_weak_count *)a2[1];
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v21 = 0;
    if (v17 && v20)
    {
      uint64_t v22 = *v17;
      BOOL v21 = v22 && (v23 = *v20) != 0 && *(double *)(v22 + 28) < *(double *)(v23 + 28);
    }
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
    if (v21)
    {
      BOOL v24 = *a2;
      *a2 = *a3;
      *a3 = v24;
      BOOL v25 = a2[1];
      a2[1] = a3[1];
      a3[1] = v25;
      uint64_t v26 = *a2;
      uint64_t v27 = (std::__shared_weak_count *)a2[1];
      if (v27) {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v29 = *a1;
      uint64_t v28 = (std::__shared_weak_count *)a1[1];
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v30 = 0;
      if (v26 && v29)
      {
        uint64_t v31 = *v26;
        BOOL v30 = v31 && (v32 = *v29) != 0 && *(double *)(v31 + 28) < *(double *)(v32 + 28);
      }
      if (v28) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v28);
      }
      if (v27) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      }
      if (v30)
      {
        BOOL v33 = *a1;
        *a1 = *a2;
        *a2 = v33;
        uint64_t v34 = a1[1];
        a1[1] = a2[1];
        a2[1] = v34;
      }
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4, uint64_t a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>*>((uint64_t **)a1, (uint64_t **)a2, (uint64_t **)a3, (uint64_t)a4);
  uint64_t v10 = *(uint64_t **)a5;
  int v11 = *(std::__shared_weak_count **)(a5 + 8);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = *a4;
  BOOL v12 = (std::__shared_weak_count *)a4[1];
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v14 = 0;
  if (v10 && v13)
  {
    uint64_t v15 = *v10;
    BOOL v14 = v15 && (v16 = *v13) != 0 && *(double *)(v15 + 28) < *(double *)(v16 + 28);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (v14)
  {
    long long v17 = *a4;
    *a4 = *(uint64_t **)a5;
    *(void *)a5 = v17;
    uint64_t v18 = a4[1];
    a4[1] = *(uint64_t **)(a5 + 8);
    *(void *)(a5 + 8) = v18;
    BOOL v19 = *a4;
    BOOL v20 = (std::__shared_weak_count *)a4[1];
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v22 = *(uint64_t **)a3;
    BOOL v21 = *(std::__shared_weak_count **)(a3 + 8);
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v23 = 0;
    if (v19 && v22)
    {
      uint64_t v24 = *v19;
      v23 = v24 && (uint64_t v25 = *v22) != 0 && *(double *)(v24 + 28) < *(double *)(v25 + 28);
    }
    if (v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    }
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    if (v23)
    {
      uint64_t v26 = *(uint64_t **)a3;
      *(void *)a3 = *a4;
      *a4 = v26;
      uint64_t v27 = *(uint64_t **)(a3 + 8);
      *(void *)(a3 + 8) = a4[1];
      a4[1] = v27;
      uint64_t v28 = *(uint64_t **)a3;
      long long v29 = *(std::__shared_weak_count **)(a3 + 8);
      if (v29) {
        atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v31 = *(uint64_t **)a2;
      BOOL v30 = *(std::__shared_weak_count **)(a2 + 8);
      if (v30) {
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v32 = 0;
      if (v28 && v31)
      {
        uint64_t v33 = *v28;
        BOOL v32 = v33 && (v34 = *v31) != 0 && *(double *)(v33 + 28) < *(double *)(v34 + 28);
      }
      if (v30) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v30);
      }
      if (v29) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v29);
      }
      if (v32)
      {
        uint64_t v35 = *(uint64_t **)a2;
        *(void *)a2 = *(void *)a3;
        *(void *)a3 = v35;
        uint64_t v36 = *(void *)(a2 + 8);
        *(void *)(a2 + 8) = *(void *)(a3 + 8);
        *(void *)(a3 + 8) = v36;
        uint64_t v37 = *(uint64_t **)a2;
        uint64_t v38 = *(std::__shared_weak_count **)(a2 + 8);
        if (v38) {
          atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long long v40 = *(uint64_t **)a1;
        BOOL v39 = *(std::__shared_weak_count **)(a1 + 8);
        if (v39) {
          atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        BOOL v41 = 0;
        if (v37 && v40)
        {
          uint64_t v42 = *v37;
          BOOL v41 = v42 && (v43 = *v40) != 0 && *(double *)(v42 + 28) < *(double *)(v43 + 28);
        }
        if (v39) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v39);
        }
        if (v38) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v38);
        }
        if (v41)
        {
          uint64_t v44 = *(uint64_t **)a1;
          *(void *)a1 = *(void *)a2;
          *(void *)a2 = v44;
          uint64_t v45 = *(void *)(a1 + 8);
          *(void *)(a1 + 8) = *(void *)(a2 + 8);
          *(void *)(a2 + 8) = v45;
        }
      }
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(uint64_t **)(a2 - 16);
      uint64_t v7 = *(std::__shared_weak_count **)(a2 - 8);
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v9 = *(uint64_t **)a1;
      uint64_t v8 = *(std::__shared_weak_count **)(a1 + 8);
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v10 = 0;
      if (v6 && v9)
      {
        uint64_t v11 = *v6;
        BOOL v10 = v11 && (v12 = *v9) != 0 && *(double *)(v11 + 28) < *(double *)(v12 + 28);
      }
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      if (v10)
      {
        uint64_t v37 = *(uint64_t **)a1;
        *(void *)a1 = *(void *)(a2 - 16);
        *(void *)(a2 - 16) = v37;
        uint64_t v38 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = *(void *)(a2 - 8);
        *(void *)(a2 - 8) = v38;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>*>(a1, a1 + 16, a2 - 16);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>*>((uint64_t **)a1, (uint64_t **)(a1 + 16), (uint64_t **)(a1 + 32), a2 - 16);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>*>(a1, a1 + 16, a1 + 32, (uint64_t **)(a1 + 48), a2 - 16);
      return 1;
    default:
      uint64_t v13 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,void sortAndRemoveDuplicates<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>(std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>> &)::{lambda(std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>> const&)#1} &,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>*>(a1, a1 + 16, a1 + 32);
      uint64_t v14 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v15 = 0;
      int v16 = 0;
      break;
  }
  while (2)
  {
    long long v17 = *(uint64_t **)v14;
    uint64_t v18 = *(std::__shared_weak_count **)(v14 + 8);
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v20 = *(uint64_t **)v13;
    BOOL v19 = *(std::__shared_weak_count **)(v13 + 8);
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v17) {
      BOOL v21 = v20 == 0;
    }
    else {
      BOOL v21 = 1;
    }
    if (!v21)
    {
      uint64_t v22 = *v17;
      if (v22)
      {
        uint64_t v23 = *v20;
        if (v23)
        {
          BOOL v24 = *(double *)(v22 + 28) < *(double *)(v23 + 28);
          if (!v19) {
            goto LABEL_27;
          }
          goto LABEL_26;
        }
      }
    }
    BOOL v24 = 0;
    if (v19) {
LABEL_26:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
LABEL_27:
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
    if (!v24) {
      goto LABEL_55;
    }
    uint64_t v26 = *(uint64_t **)v14;
    uint64_t v25 = *(std::__shared_weak_count **)(v14 + 8);
    uint64_t v27 = v15;
    *(void *)uint64_t v14 = 0;
    *(void *)(v14 + 8) = 0;
    while (1)
    {
      uint64_t v28 = a1 + v27;
      long long v29 = *(_OWORD *)(a1 + v27 + 32);
      *(void *)(v28 + 32) = 0;
      *(void *)(v28 + 40) = 0;
      BOOL v30 = *(std::__shared_weak_count **)(a1 + v27 + 56);
      *(_OWORD *)(v28 + 48) = v29;
      if (v30) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v30);
      }
      if (v27 == -32) {
        break;
      }
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v32 = *(uint64_t **)(a1 + v27 + 16);
      uint64_t v31 = *(std::__shared_weak_count **)(a1 + v27 + 24);
      if (v31) {
        atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v33 = 0;
      if (v26 && v32)
      {
        if (!*v26 || (uint64_t v34 = *v32) == 0)
        {
          BOOL v33 = 0;
          if (!v31) {
            goto LABEL_45;
          }
LABEL_44:
          std::__shared_weak_count::__release_shared[abi:ne180100](v31);
          goto LABEL_45;
        }
        BOOL v33 = *(double *)(*v26 + 28) < *(double *)(v34 + 28);
      }
      if (v31) {
        goto LABEL_44;
      }
LABEL_45:
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      v27 -= 16;
      if (!v33)
      {
        uint64_t v35 = (void *)(a1 + v27 + 48);
        goto LABEL_52;
      }
    }
    uint64_t v35 = (void *)a1;
LABEL_52:
    uint64_t v36 = (std::__shared_weak_count *)v35[1];
    *uint64_t v35 = v26;
    v35[1] = v25;
    if (v36) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v36);
    }
    if (++v16 != 8)
    {
LABEL_55:
      uint64_t v13 = v14;
      v15 += 16;
      v14 += 16;
      if (v14 == a2) {
        return 1;
      }
      continue;
    }
    return v14 + 16 == a2;
  }
}

void std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2738;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

void std::__shared_ptr_emplace<AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2738;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t isActiveDuringTimeFrame<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(void *a1, double *a2, double *a3)
{
  uint64_t v3 = *a1;
  if (*(unsigned char *)(*a1 + 8))
  {
    double v4 = *(double *)(v3 + 12);
    if (*(unsigned char *)(v3 + 20))
    {
      double v5 = v4 + *(double *)(v3 + 24);
      BOOL v6 = v4 <= *a3;
      if (v4 < *a2) {
        BOOL v6 = 0;
      }
      return v5 >= *a2 && v5 <= *a3 || v6;
    }
    else
    {
      return v4 <= *a3 && v4 >= *a2;
    }
  }
  uint64_t v9 = a1[2];
  BOOL v10 = (std::__shared_weak_count *)a1[3];
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *(void *)(v9 + 16);
  uint64_t v12 = *(std::__shared_weak_count **)(v9 + 24);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = *(void **)(v11 + 16);
  uint64_t v14 = *(std::__shared_weak_count **)(v11 + 24);
  if (v14)
  {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v8 = isActiveDuringTimeFrame<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(v13, a2, a3);
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    if (!v12) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  uint64_t v8 = isActiveDuringTimeFrame<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(v13, a2, a3);
  if (v12) {
LABEL_17:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
LABEL_18:
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  return v8;
}

uint64_t isActiveDuringTimeFrame<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(void *a1, double *a2, double *a3)
{
  uint64_t v3 = *a1;
  if (*(unsigned char *)(*a1 + 16))
  {
    double v4 = *(double *)(v3 + 20);
    if (*(unsigned char *)(v3 + 28))
    {
      double v5 = v4 + *(double *)(v3 + 32);
      BOOL v6 = v4 <= *a3;
      if (v4 < *a2) {
        BOOL v6 = 0;
      }
      return v5 >= *a2 && v5 <= *a3 || v6;
    }
    else
    {
      return v4 <= *a3 && v4 >= *a2;
    }
  }
  uint64_t v9 = a1[2];
  BOOL v10 = (std::__shared_weak_count *)a1[3];
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *(uint64_t **)(v9 + 16);
  uint64_t v11 = *(std::__shared_weak_count **)(v9 + 24);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = *v12;
  if (!*(unsigned char *)(*v12 + 24))
  {
LABEL_28:
    BOOL v8 = 1;
    if (!v11) {
      goto LABEL_35;
    }
LABEL_34:
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    goto LABEL_35;
  }
  if (*(unsigned char *)(v13 + 36))
  {
    double v14 = *(double *)(v13 + 40);
    double v15 = *a3;
    if (v14 >= *a2 && v14 <= v15) {
      goto LABEL_28;
    }
    double v17 = *(double *)(v13 + 28);
    if (v17 < *a2)
    {
      BOOL v8 = 0;
      if (!v11) {
        goto LABEL_35;
      }
      goto LABEL_34;
    }
    BOOL v8 = v17 <= v15;
    if (v11) {
      goto LABEL_34;
    }
  }
  else
  {
    double v18 = *(double *)(v13 + 28);
    BOOL v8 = v18 <= *a3 && v18 >= *a2;
    if (v11) {
      goto LABEL_34;
    }
  }
LABEL_35:
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  return v8;
}

void AudioMetadataTimeline::retrieveMetadataForTimeframe(AudioMetadataTimeline *this@<X0>, double *a2@<X1>, double *a3@<X2>, void *a4@<X8>)
{
  BOOL v6 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = 0;
  uint64_t v8 = *(void *)this;
  **(_DWORD **)this = 0;
  do
  {
    *(void *)(*(void *)(v8 + 4) + v7) = 0;
    v7 += 8;
  }
  while (v7 != 0x8000);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = 0;
  uint64_t v11 = *(void *)this;
  *(_DWORD *)(*(void *)this + 12) = 0;
  do
  {
    *(void *)(*(void *)(v11 + 16) + v10) = 0;
    v10 += 8;
  }
  while (v10 != 0x8000);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = 0;
  uint64_t v14 = *(void *)this;
  *(_DWORD *)(*(void *)this + 24) = 0;
  do
  {
    *(void *)(*(void *)(v14 + 28) + v13) = 0;
    v13 += 8;
  }
  while (v13 != 0x8000);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  double v15 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = 0;
  uint64_t v17 = *(void *)this;
  *(_DWORD *)(*(void *)this + 36) = 0;
  do
  {
    *(void *)(*(void *)(v17 + 40) + v16) = 0;
    v16 += 8;
  }
  while (v16 != 0x8000);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  double v18 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v19 = 0;
  uint64_t v20 = *(void *)this;
  *(_DWORD *)(*(void *)this + 48) = 0;
  do
  {
    *(void *)(*(void *)(v20 + 52) + v19) = 0;
    v19 += 8;
  }
  while (v19 != 0x8000);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  BOOL v21 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v22 = 0;
  uint64_t v23 = *(void *)this;
  *(_DWORD *)(*(void *)this + 60) = 0;
  do
  {
    *(void *)(*(void *)(v23 + 64) + v22) = 0;
    v22 += 8;
  }
  while (v22 != 0x8000);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  BOOL v24 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v25 = 0;
  uint64_t v26 = *(void *)this;
  *(_DWORD *)(*(void *)this + 72) = 0;
  do
  {
    *(void *)(*(void *)(v26 + 76) + v25) = 0;
    v25 += 8;
  }
  while (v25 != 0x8000);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  uint64_t v27 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v27) {
    atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v28 = 0;
  uint64_t v29 = *(void *)this;
  *(_DWORD *)(*(void *)this + 84) = 0;
  do
  {
    *(void *)(*(void *)(v29 + 88) + v28) = 0;
    v28 += 8;
  }
  while (v28 != 0x8000);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  uint64_t v30 = *(void *)this;
  unint64_t v31 = atomic_load((unint64_t *)this + 9);
  unint64_t v32 = atomic_load((unint64_t *)this + 8);
  if (v31 >= v32) {
    goto LABEL_91;
  }
  char v33 = 0;
  unint64_t v34 = v31;
  do
  {
    uint64_t v35 = *(void *)(*((void *)this + 3) + (((v31 + *((void *)this + 6)) >> 5) & 0x7FFFFFFFFFFFFF8))
        + 16 * (v31 + *((unsigned char *)this + 48));
    uint64_t v37 = *(uint64_t **)v35;
    uint64_t v36 = *(std::__shared_weak_count **)(v35 + 8);
    if (v36) {
      atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v38 = *v37;
    if (!*(unsigned char *)(v38 + 24))
    {
LABEL_63:
      BOOL v43 = 1;
      if (v36) {
        goto LABEL_69;
      }
      goto LABEL_70;
    }
    if (*(unsigned char *)(v38 + 36))
    {
      double v39 = *(double *)(v38 + 40);
      double v40 = *a3;
      if (v39 >= *a2 && v39 <= v40) {
        goto LABEL_63;
      }
      double v42 = *(double *)(v38 + 28);
      if (v42 >= *a2)
      {
        BOOL v43 = v42 <= v40;
        if (v36) {
          goto LABEL_69;
        }
      }
      else
      {
        BOOL v43 = 0;
        if (v36) {
          goto LABEL_69;
        }
      }
    }
    else
    {
      double v44 = *(double *)(v38 + 28);
      BOOL v43 = v44 <= *a3 && v44 >= *a2;
      if (v36) {
LABEL_69:
      }
        std::__shared_weak_count::__release_shared[abi:ne180100](v36);
    }
LABEL_70:
    if (v33 & 1 | !v43)
    {
      if (!v43 && (v33 & 1) != 0) {
        goto LABEL_78;
      }
    }
    else
    {
      char v33 = 1;
      unint64_t v34 = v31;
    }
    ++v31;
  }
  while (v32 != v31);
  unint64_t v31 = v32;
LABEL_78:
  if ((v33 & 1) != 0 && v34 < v31)
  {
    unsigned int v45 = *(_DWORD *)v30;
    uint64_t v46 = *((void *)this + 6);
    do
    {
      uint64_t v47 = **(void **)(*(void *)(*((void *)this + 3) + (((v46 + v34) >> 5) & 0x7FFFFFFFFFFFFF8))
                        + 16 * (v46 + v34));
      long long v48 = *(void **)(v30 + 4);
      if (v45)
      {
        if (*v48 != v47)
        {
          unint64_t v49 = 0;
          while (v45 - 1 != v49)
          {
            uint64_t v50 = v48[++v49];
            if (v50 == v47)
            {
              if (v49 < v45) {
                goto LABEL_90;
              }
              break;
            }
          }
          v48[v45++] = v47;
          *(_DWORD *)uint64_t v30 = v45;
          if (v45 >= 0x1000) {
LABEL_353:
          }
            __assert_rtn("addSubObject", "AudioMetadataTimeline.cpp", 457, "ref->count < kMaxObjectCount");
        }
      }
      else
      {
        *long long v48 = v47;
        unsigned int v45 = 1;
        *(_DWORD *)uint64_t v30 = 1;
      }
LABEL_90:
      ++v34;
    }
    while (v34 != v31);
  }
LABEL_91:
  uint64_t v51 = *(void *)this;
  unint64_t v52 = atomic_load((unint64_t *)this + 17);
  unint64_t v53 = atomic_load((unint64_t *)this + 16);
  if (v52 >= v53) {
    goto LABEL_137;
  }
  char v54 = 0;
  unint64_t v55 = v52;
  while (2)
  {
    uint64_t v56 = (uint64_t *)(*(void *)(*((void *)this + 11) + (((v52 + *((void *)this + 14)) >> 5) & 0x7FFFFFFFFFFFFF8))
                    + 16 * (v52 + *((unsigned char *)this + 112)));
    uint64_t v57 = *v56;
    BOOL v58 = (std::__shared_weak_count *)v56[1];
    if (v58) {
      atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v60 = *(uint64_t **)(v57 + 16);
    uint64_t v59 = *(std::__shared_weak_count **)(v57 + 24);
    if (v59) {
      atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v61 = *v60;
    if (*(unsigned char *)(*v60 + 24))
    {
      if (*(unsigned char *)(v61 + 36))
      {
        double v62 = *(double *)(v61 + 40);
        double v63 = *a3;
        if (v62 >= *a2 && v62 <= v63) {
          goto LABEL_107;
        }
        double v65 = *(double *)(v61 + 28);
        if (v65 < *a2)
        {
          BOOL v66 = 0;
          if (!v59) {
            goto LABEL_114;
          }
LABEL_113:
          std::__shared_weak_count::__release_shared[abi:ne180100](v59);
          goto LABEL_114;
        }
        BOOL v66 = v65 <= v63;
        if (v59) {
          goto LABEL_113;
        }
      }
      else
      {
        double v67 = *(double *)(v61 + 28);
        BOOL v66 = v67 <= *a3 && v67 >= *a2;
        if (v59) {
          goto LABEL_113;
        }
      }
    }
    else
    {
LABEL_107:
      BOOL v66 = 1;
      if (v59) {
        goto LABEL_113;
      }
    }
LABEL_114:
    if (v58) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v58);
    }
    if (v54 & 1 | !v66)
    {
      if (!v66 && (v54 & 1) != 0) {
        goto LABEL_124;
      }
    }
    else
    {
      char v54 = 1;
      unint64_t v55 = v52;
    }
    if (v53 != ++v52) {
      continue;
    }
    break;
  }
  unint64_t v52 = v53;
LABEL_124:
  if ((v54 & 1) != 0 && v55 < v52)
  {
    unsigned int v68 = *(_DWORD *)(v51 + 12);
    uint64_t v69 = *((void *)this + 14);
    do
    {
      uint64_t v70 = **(void **)(*(void *)(*((void *)this + 11) + (((v69 + v55) >> 5) & 0x7FFFFFFFFFFFFF8))
                        + 16 * (v69 + v55));
      uint64_t v71 = *(void **)(v51 + 16);
      if (v68)
      {
        if (*v71 != v70)
        {
          unint64_t v72 = 0;
          do
          {
            if (v68 - 1 == v72) {
              goto LABEL_133;
            }
            uint64_t v73 = v71[++v72];
          }
          while (v73 != v70);
          if (v72 >= v68)
          {
LABEL_133:
            v71[v68++] = v70;
            *(_DWORD *)(v51 + 12) = v68;
            if (v68 >= 0x1000) {
              goto LABEL_353;
            }
          }
        }
      }
      else
      {
        void *v71 = v70;
        unsigned int v68 = 1;
        *(_DWORD *)(v51 + 12) = 1;
      }
      ++v55;
    }
    while (v55 != v52);
  }
LABEL_137:
  uint64_t v74 = *(void *)this;
  unint64_t v75 = atomic_load((unint64_t *)this + 25);
  unint64_t v76 = atomic_load((unint64_t *)this + 24);
  if (v75 < v76)
  {
    char v77 = 0;
    unint64_t v78 = v75;
    do
    {
      uint64_t v79 = *(void *)(*((void *)this + 19) + (((v75 + *((void *)this + 22)) >> 5) & 0x7FFFFFFFFFFFFF8));
      uint64_t v80 = (v75 + *((unsigned char *)this + 176));
      long long v81 = *(_OWORD *)(v79 + 16 * v80);
      BOOL v82 = *(std::__shared_weak_count **)(v79 + 16 * v80 + 8);
      if (v82)
      {
        atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
        char v83 = isActiveDuringTimeFrame<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>((void *)v81, a2, a3);
        std::__shared_weak_count::__release_shared[abi:ne180100](v82);
      }
      else
      {
        char v83 = isActiveDuringTimeFrame<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(*(void **)(v79 + 16 * v80), a2, a3);
      }
      if (v77 & 1 | ((v83 & 1) == 0))
      {
        if (!(v83 & 1 | ((v77 & 1) == 0))) {
          goto LABEL_148;
        }
      }
      else
      {
        char v77 = 1;
        unint64_t v78 = v75;
      }
      ++v75;
    }
    while (v76 != v75);
    unint64_t v75 = v76;
LABEL_148:
    if ((v77 & 1) != 0 && v78 < v75)
    {
      unsigned int v84 = *(_DWORD *)(v74 + 24);
      uint64_t v85 = *((void *)this + 22);
      do
      {
        uint64_t v86 = **(void **)(*(void *)(*((void *)this + 19) + (((v85 + v78) >> 5) & 0x7FFFFFFFFFFFFF8))
                          + 16 * (v85 + v78));
        long long v87 = *(void **)(v74 + 28);
        if (v84)
        {
          if (*v87 != v86)
          {
            unint64_t v88 = 0;
            do
            {
              if (v84 - 1 == v88) {
                goto LABEL_157;
              }
              uint64_t v89 = v87[++v88];
            }
            while (v89 != v86);
            if (v88 >= v84)
            {
LABEL_157:
              v87[v84++] = v86;
              *(_DWORD *)(v74 + 24) = v84;
              if (v84 >= 0x1000) {
                goto LABEL_353;
              }
            }
          }
        }
        else
        {
          *long long v87 = v86;
          unsigned int v84 = 1;
          *(_DWORD *)(v74 + 24) = 1;
        }
        ++v78;
      }
      while (v78 != v75);
    }
  }
  unint64_t v218 = a3;
  uint64_t v90 = *(void *)this;
  unint64_t v91 = atomic_load((unint64_t *)this + 49);
  unint64_t v92 = atomic_load((unint64_t *)this + 48);
  if (v91 < v92)
  {
    char v93 = 0;
    unint64_t v94 = v91;
    do
    {
      uint64_t v95 = *(void *)(*((void *)this + 43) + (((v91 + *((void *)this + 46)) >> 5) & 0x7FFFFFFFFFFFFF8));
      uint64_t v96 = (v91 + *((unsigned char *)this + 368));
      long long v97 = *(_OWORD *)(v95 + 16 * v96);
      long long v98 = *(std::__shared_weak_count **)(v95 + 16 * v96 + 8);
      if (v98)
      {
        atomic_fetch_add_explicit(&v98->__shared_owners_, 1uLL, memory_order_relaxed);
        char v99 = isActiveDuringTimeFrame<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>((void *)v97, a2, a3);
        std::__shared_weak_count::__release_shared[abi:ne180100](v98);
      }
      else
      {
        char v99 = isActiveDuringTimeFrame<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(*(void **)(v95 + 16 * v96), a2, a3);
      }
      if (v93 & 1 | ((v99 & 1) == 0))
      {
        if (!(v99 & 1 | ((v93 & 1) == 0))) {
          goto LABEL_172;
        }
      }
      else
      {
        char v93 = 1;
        unint64_t v94 = v91;
      }
      ++v91;
    }
    while (v92 != v91);
    unint64_t v91 = v92;
LABEL_172:
    if (v93)
    {
      if (v94 < v91)
      {
        unsigned int v100 = *(_DWORD *)(v90 + 48);
        uint64_t v101 = *((void *)this + 46);
        unint64_t v102 = v94;
        do
        {
          uint64_t v103 = **(void **)(*(void *)(*(void *)(*((void *)this + 43)
                                                     + (((v101 + v102) >> 5) & 0x7FFFFFFFFFFFFF8))
                                         + 16 * (v101 + v102))
                             + 16);
          uint64_t v104 = *(void **)(v90 + 52);
          if (v100)
          {
            if (*v104 != v103)
            {
              unint64_t v105 = 0;
              do
              {
                if (v100 - 1 == v105) {
                  goto LABEL_181;
                }
                uint64_t v106 = v104[++v105];
              }
              while (v106 != v103);
              if (v105 >= v100)
              {
LABEL_181:
                v104[v100++] = v103;
                *(_DWORD *)(v90 + 48) = v100;
                if (v100 >= 0x1000) {
                  goto LABEL_353;
                }
              }
            }
          }
          else
          {
            void *v104 = v103;
            unsigned int v100 = 1;
            *(_DWORD *)(v90 + 48) = 1;
          }
          ++v102;
        }
        while (v102 != v91);
      }
      if (v91 != v94) {
        goto LABEL_218;
      }
    }
  }
  unint64_t v107 = atomic_load((unint64_t *)this + 41);
  unint64_t v108 = atomic_load((unint64_t *)this + 40);
  if (v107 >= v108) {
    goto LABEL_218;
  }
  uint64_t v216 = *(void *)this;
  char v109 = 0;
  unint64_t v110 = v107;
  while (2)
  {
    BOOL v111 = (uint64_t *)(*(void *)(*((void *)this + 35)
                                 + (((v107 + *((void *)this + 38)) >> 5) & 0x7FFFFFFFFFFFFF8))
                     + 16 * (v107 + *((unsigned char *)this + 304)));
    uint64_t v112 = *v111;
    long long v113 = (std::__shared_weak_count *)v111[1];
    if (v113) {
      atomic_fetch_add_explicit(&v113->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v114 = *(void *)(v112 + 16);
    uint64_t v115 = *(std::__shared_weak_count **)(v112 + 24);
    if (v115) {
      atomic_fetch_add_explicit(&v115->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v116 = *(void **)(v114 + 16);
    uint64_t v117 = *(std::__shared_weak_count **)(v114 + 24);
    if (v117)
    {
      atomic_fetch_add_explicit(&v117->__shared_owners_, 1uLL, memory_order_relaxed);
      char v118 = isActiveDuringTimeFrame<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(v116, a2, v218);
      std::__shared_weak_count::__release_shared[abi:ne180100](v117);
      if (v115) {
        goto LABEL_194;
      }
    }
    else
    {
      char v118 = isActiveDuringTimeFrame<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(v116, a2, v218);
      if (v115) {
LABEL_194:
      }
        std::__shared_weak_count::__release_shared[abi:ne180100](v115);
    }
    if (v113) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v113);
    }
    if (v109 & 1 | ((v118 & 1) == 0))
    {
      if (!(v118 & 1 | ((v109 & 1) == 0))) {
        goto LABEL_205;
      }
    }
    else
    {
      char v109 = 1;
      unint64_t v110 = v107;
    }
    if (v108 != ++v107) {
      continue;
    }
    break;
  }
  unint64_t v107 = v108;
LABEL_205:
  if ((v109 & 1) != 0 && v110 < v107)
  {
    unsigned int v119 = *(_DWORD *)(v216 + 48);
    uint64_t v120 = *((void *)this + 38);
    do
    {
      uint64_t v121 = **(void **)(*(void *)(*((void *)this + 35) + (((v110 + v120) >> 5) & 0x7FFFFFFFFFFFFF8))
                         + 16 * (v110 + v120));
      BOOL v122 = *(void **)(v216 + 52);
      if (v119)
      {
        if (*v122 != v121)
        {
          unint64_t v123 = 0;
          do
          {
            if (v119 - 1 == v123) {
              goto LABEL_214;
            }
            uint64_t v124 = v122[++v123];
          }
          while (v124 != v121);
          if (v123 >= v119)
          {
LABEL_214:
            v122[v119++] = v121;
            *(_DWORD *)(v216 + 48) = v119;
            if (v119 >= 0x1000) {
              goto LABEL_353;
            }
          }
        }
      }
      else
      {
        *BOOL v122 = v121;
        unsigned int v119 = 1;
        *(_DWORD *)(v216 + 48) = 1;
      }
      ++v110;
    }
    while (v110 != v107);
  }
LABEL_218:
  unint64_t v125 = atomic_load((unint64_t *)this + 49);
  unint64_t v126 = atomic_load((unint64_t *)this + 48);
  if (v125 >= v126)
  {
    uint64_t v217 = 0;
    uint64_t v135 = 0;
  }
  else
  {
    char v127 = 0;
    unint64_t v128 = v125;
    do
    {
      uint64_t v129 = *(void *)(*((void *)this + 43) + (((v125 + *((void *)this + 46)) >> 5) & 0x7FFFFFFFFFFFFF8));
      uint64_t v130 = (v125 + *((unsigned char *)this + 368));
      long long v131 = *(_OWORD *)(v129 + 16 * v130);
      uint64_t v132 = *(std::__shared_weak_count **)(v129 + 16 * v130 + 8);
      if (v132)
      {
        atomic_fetch_add_explicit(&v132->__shared_owners_, 1uLL, memory_order_relaxed);
        char v133 = isActiveDuringTimeFrame<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>((void *)v131, a2, v218);
        std::__shared_weak_count::__release_shared[abi:ne180100](v132);
      }
      else
      {
        char v133 = isActiveDuringTimeFrame<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataBlockFormat,AudioMetadataTimeline::Node<AudioMetadataChannelFormat,AudioMetadataTimeline::Node<AudioMetadataPackFormat,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>(*(void **)(v129 + 16 * v130), a2, v218);
      }
      if (v127 & 1 | ((v133 & 1) == 0))
      {
        if (!(v133 & 1 | ((v127 & 1) == 0))) {
          goto LABEL_229;
        }
      }
      else
      {
        char v127 = 1;
        unint64_t v128 = v125;
      }
      ++v125;
    }
    while (v126 != v125);
    unint64_t v125 = v126;
LABEL_229:
    if (v127) {
      uint64_t v134 = v128;
    }
    else {
      uint64_t v134 = 0;
    }
    uint64_t v217 = v134;
    if (v127) {
      uint64_t v135 = v125;
    }
    else {
      uint64_t v135 = 0;
    }
  }
  uint64_t v136 = *(void *)this;
  if (*(_DWORD *)(*(void *)this + 48))
  {
    unint64_t v137 = 0;
    uint64_t v138 = *((void *)this + 46) >> 8;
    uint64_t v139 = *((void *)this + 46);
    do
    {
      uint64_t v140 = *(void *)(*(void *)(v136 + 52) + 8 * v137);
      *(_DWORD *)(v140 + 24) = 0;
      uint64_t v141 = *((void *)this + 43);
      BOOL v142 = (void *)(v141 + 8 * v138);
      if (*((void *)this + 44) == v141)
      {
        long long v143 = std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator+[abi:ne180100]((void *)(v141 + 8 * v138), 0, v217);
        BOOL v145 = v147;
        uint64_t v146 = 0;
      }
      else
      {
        long long v143 = std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator+[abi:ne180100](v142, *v142 + 16 * v139, v217);
        BOOL v145 = v144;
        uint64_t v146 = *v142 + 16 * v139;
      }
      std::__deque_iterator<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>*,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>&,std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>**,long,256l>::operator+[abi:ne180100](v142, v146, v135);
      if (v145 != v148)
      {
        unsigned int v149 = 0;
        do
        {
          if (*(void *)(*v145)[2] == v140)
          {
            *(void *)(*(void *)(v140 + 28) + 8 * v149++) = **v145;
            *(_DWORD *)(v140 + 24) = v149;
            if (v149 >= 0x1000) {
              goto LABEL_353;
            }
          }
          v145 += 2;
          if ((void **)((char *)v145 - *v143) == (void **)4096)
          {
            long long v150 = (void **)v143[1];
            ++v143;
            BOOL v145 = v150;
          }
        }
        while (v145 != v148);
        uint64_t v136 = *(void *)this;
      }
      ++v137;
    }
    while (v137 < *(unsigned int *)(v136 + 48));
  }
  unint64_t v151 = atomic_load((unint64_t *)this + 33);
  unint64_t v152 = atomic_load((unint64_t *)this + 32);
  if (v151 >= v152) {
    goto LABEL_278;
  }
  char v153 = 0;
  unint64_t v154 = v151;
  while (2)
  {
    long long v155 = (uint64_t *)(*(void *)(*((void *)this + 27)
                                 + (((v151 + *((void *)this + 30)) >> 5) & 0x7FFFFFFFFFFFFF8))
                     + 16 * (v151 + *((unsigned char *)this + 240)));
    uint64_t v156 = *v155;
    uint64_t v157 = (std::__shared_weak_count *)v155[1];
    if (v157) {
      atomic_fetch_add_explicit(&v157->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v158 = *(void **)(v156 + 16);
    unint64_t v159 = *(std::__shared_weak_count **)(v156 + 24);
    if (v159)
    {
      atomic_fetch_add_explicit(&v159->__shared_owners_, 1uLL, memory_order_relaxed);
      char v160 = isActiveDuringTimeFrame<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(v158, a2, v218);
      std::__shared_weak_count::__release_shared[abi:ne180100](v159);
      if (v157) {
        goto LABEL_256;
      }
    }
    else
    {
      char v160 = isActiveDuringTimeFrame<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>(v158, a2, v218);
      if (v157) {
LABEL_256:
      }
        std::__shared_weak_count::__release_shared[abi:ne180100](v157);
    }
    if (v153 & 1 | ((v160 & 1) == 0))
    {
      if (!(v160 & 1 | ((v153 & 1) == 0))) {
        goto LABEL_265;
      }
    }
    else
    {
      char v153 = 1;
      unint64_t v154 = v151;
    }
    if (v152 != ++v151) {
      continue;
    }
    break;
  }
  unint64_t v151 = v152;
LABEL_265:
  if ((v153 & 1) != 0 && v154 < v151)
  {
    unsigned int v161 = *(_DWORD *)(v136 + 36);
    uint64_t v162 = *((void *)this + 30);
    do
    {
      uint64_t v163 = **(void **)(*(void *)(*((void *)this + 27) + (((v154 + v162) >> 5) & 0x7FFFFFFFFFFFFF8))
                         + 16 * (v154 + v162));
      uint64_t v164 = *(void **)(v136 + 40);
      if (v161)
      {
        if (*v164 != v163)
        {
          unint64_t v165 = 0;
          do
          {
            if (v161 - 1 == v165) {
              goto LABEL_274;
            }
            uint64_t v166 = v164[++v165];
          }
          while (v166 != v163);
          if (v165 >= v161)
          {
LABEL_274:
            v164[v161++] = v163;
            *(_DWORD *)(v136 + 36) = v161;
            if (v161 >= 0x1000) {
              goto LABEL_353;
            }
          }
        }
      }
      else
      {
        *uint64_t v164 = v163;
        unsigned int v161 = 1;
        *(_DWORD *)(v136 + 36) = 1;
      }
      ++v154;
    }
    while (v154 != v151);
  }
LABEL_278:
  uint64_t v167 = *(void *)this;
  unint64_t v168 = atomic_load((unint64_t *)this + 57);
  unint64_t v169 = atomic_load((unint64_t *)this + 56);
  if (v168 < v169)
  {
    unint64_t v170 = v168;
    do
    {
      uint64_t v171 = *(std::__shared_weak_count **)(*(void *)(*((void *)this + 51)
                                                      + (((v170 + *((void *)this + 54)) >> 5) & 0x7FFFFFFFFFFFFF8))
                                          + 16 * (v170 + *((unsigned char *)this + 432))
                                          + 8);
      if (v171)
      {
        atomic_fetch_add_explicit(&v171->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v171);
      }
      ++v170;
    }
    while (v169 != v170);
    unsigned int v172 = *(_DWORD *)(v167 + 84);
    uint64_t v173 = *((void *)this + 54);
    do
    {
      uint64_t v174 = **(void **)(*(void *)(*((void *)this + 51) + (((v168 + v173) >> 5) & 0x7FFFFFFFFFFFFF8))
                         + 16 * (v168 + v173));
      uint64_t v175 = *(void **)(v167 + 88);
      if (v172)
      {
        if (*v175 != v174)
        {
          unint64_t v176 = 0;
          do
          {
            if (v172 - 1 == v176) {
              goto LABEL_290;
            }
            uint64_t v177 = v175[++v176];
          }
          while (v177 != v174);
          if (v176 >= v172)
          {
LABEL_290:
            v175[v172++] = v174;
            *(_DWORD *)(v167 + 84) = v172;
            if (v172 >= 0x1000) {
              goto LABEL_353;
            }
          }
        }
      }
      else
      {
        *uint64_t v175 = v174;
        unsigned int v172 = 1;
        *(_DWORD *)(v167 + 84) = 1;
      }
      ++v168;
    }
    while (v168 != v169);
  }
  uint64_t v178 = *(void *)this;
  unint64_t v179 = atomic_load((unint64_t *)this + 65);
  unint64_t v180 = atomic_load((unint64_t *)this + 64);
  if (v179 < v180)
  {
    unint64_t v181 = v179;
    do
    {
      uint64_t v182 = (uint64_t *)(*(void *)(*((void *)this + 59)
                                   + (((v181 + *((void *)this + 62)) >> 5) & 0x7FFFFFFFFFFFFF8))
                       + 16 * (v181 + *((unsigned char *)this + 496)));
      uint64_t v183 = *v182;
      uint64_t v184 = (std::__shared_weak_count *)v182[1];
      if (v184) {
        atomic_fetch_add_explicit(&v184->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v185 = *(std::__shared_weak_count **)(v183 + 24);
      if (v185)
      {
        atomic_fetch_add_explicit(&v185->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v185);
      }
      if (v184) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v184);
      }
      ++v181;
    }
    while (v180 != v181);
    unsigned int v186 = *(_DWORD *)(v178 + 72);
    uint64_t v187 = *((void *)this + 62);
    do
    {
      uint64_t v188 = **(void **)(*(void *)(*((void *)this + 59) + (((v187 + v179) >> 5) & 0x7FFFFFFFFFFFFF8))
                         + 16 * (v187 + v179));
      size_t v189 = *(void **)(v178 + 76);
      if (v186)
      {
        if (*v189 != v188)
        {
          unint64_t v190 = 0;
          do
          {
            if (v186 - 1 == v190) {
              goto LABEL_310;
            }
            uint64_t v191 = v189[++v190];
          }
          while (v191 != v188);
          if (v190 >= v186)
          {
LABEL_310:
            v189[v186++] = v188;
            *(_DWORD *)(v178 + 72) = v186;
            if (v186 >= 0x1000) {
              goto LABEL_353;
            }
          }
        }
      }
      else
      {
        void *v189 = v188;
        unsigned int v186 = 1;
        *(_DWORD *)(v178 + 72) = 1;
      }
      ++v179;
    }
    while (v179 != v180);
  }
  uint64_t v192 = *(void *)this;
  unint64_t v193 = atomic_load((unint64_t *)this + 73);
  unint64_t v194 = atomic_load((unint64_t *)this + 72);
  if (v193 < v194)
  {
    unint64_t v195 = v193;
    do
    {
      unint64_t v196 = (uint64_t *)(*(void *)(*((void *)this + 67)
                                   + (((v195 + *((void *)this + 70)) >> 5) & 0x7FFFFFFFFFFFFF8))
                       + 16 * (v195 + *((unsigned char *)this + 560)));
      uint64_t v197 = *v196;
      std::string v198 = (std::__shared_weak_count *)v196[1];
      if (v198) {
        atomic_fetch_add_explicit(&v198->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v199 = *(void *)(v197 + 16);
      uint64_t v200 = *(std::__shared_weak_count **)(v197 + 24);
      if (v200) {
        atomic_fetch_add_explicit(&v200->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v201 = *(std::__shared_weak_count **)(v199 + 24);
      if (v201)
      {
        atomic_fetch_add_explicit(&v201->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v201);
      }
      if (v200) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v200);
      }
      if (v198) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v198);
      }
      ++v195;
    }
    while (v194 != v195);
    unsigned int v202 = *(_DWORD *)(v192 + 60);
    uint64_t v203 = *((void *)this + 70);
    do
    {
      uint64_t v204 = **(void **)(*(void *)(*((void *)this + 67) + (((v203 + v193) >> 5) & 0x7FFFFFFFFFFFFF8))
                         + 16 * (v203 + v193));
      BOOL v205 = *(void **)(v192 + 64);
      if (v202)
      {
        if (*v205 != v204)
        {
          unint64_t v206 = 0;
          do
          {
            if (v202 - 1 == v206) {
              goto LABEL_334;
            }
            uint64_t v207 = v205[++v206];
          }
          while (v207 != v204);
          if (v206 >= v202)
          {
LABEL_334:
            v205[v202++] = v204;
            *(_DWORD *)(v192 + 60) = v202;
            if (v202 >= 0x1000) {
              goto LABEL_353;
            }
          }
        }
      }
      else
      {
        void *v205 = v204;
        unsigned int v202 = 1;
        *(_DWORD *)(v192 + 60) = 1;
      }
      ++v193;
    }
    while (v193 != v194);
  }
  uint64_t v208 = *(void *)this;
  if (*(_DWORD *)(*(void *)this + 60))
  {
    for (unint64_t i = 0; i < *(unsigned int *)(v208 + 60); ++i)
    {
      uint64_t v210 = *(void *)(*(void *)(*(void *)(v208 + 64) + 8 * i) + 32);
      if (v210)
      {
        uint64_t v211 = *(unsigned int *)(v208 + 48);
        if (v211)
        {
          uint64_t v212 = *(void **)(v208 + 52);
          uint64_t v213 = *(unsigned int *)(v208 + 48);
          do
          {
            if (v210 == *v212) {
              goto LABEL_349;
            }
            ++v212;
            --v213;
          }
          while (v213);
          *(void *)(*(void *)(v208 + 52) + 8 * v211) = v210;
          *(_DWORD *)(v208 + 48) = v211 + 1;
          if ((v211 + 1) > 0xFFF) {
            goto LABEL_353;
          }
        }
        else
        {
          **(void **)(v208 + 52) = v210;
          *(_DWORD *)(v208 + 48) = 1;
        }
        uint64_t v208 = *(void *)this;
      }
LABEL_349:
      ;
    }
  }
  uint64_t v214 = *((void *)this + 1);
  *a4 = v208;
  a4[1] = v214;
  if (v214) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v214 + 8), 1uLL, memory_order_relaxed);
  }
}

void std::vector<std::pair<BOOL,std::shared_ptr<unsigned char []>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    double v4 = (char *)v1[1];
    double v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        BOOL v6 = (std::__shared_weak_count *)*((void *)v4 - 1);
        if (v6) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        }
        v4 -= 24;
      }
      while (v4 != v2);
      double v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void AudioMetadataMemoryPool_AP::requestMetadataBuffer(AudioMetadataMemoryPool_AP *this)
{
}

void sub_18FF78A38(void *a1)
{
  __cxa_begin_catch(a1);
  MEMORY[0x192FC8910](v1, 0x1000C8077774924);
  __cxa_rethrow();
}

void sub_18FF78A5C(_Unwind_Exception *a1)
{
}

uint64_t std::__shared_ptr_pointer<unsigned char *,AudioMetadataMemoryPool_AP::requestMetadataBuffer(unsigned int)::$_0,std::allocator<unsigned char>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    JUMPOUT(0x192FC8910);
  }
  return result;
}

void std::__shared_ptr_pointer<unsigned char *,AudioMetadataMemoryPool_AP::requestMetadataBuffer(unsigned int)::$_0,std::allocator<unsigned char>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

uint64_t AudioMetadataMemoryPool_AP::markAsUsed(uint64_t this, const unsigned __int8 *a2)
{
  uint64_t v2 = *(void *)(this + 24);
  uint64_t v3 = *(void *)(this + 32);
  if (v2 != v3)
  {
    while (*(const unsigned __int8 **)(v2 + 8) != a2)
    {
      v2 += 24;
      if (v2 == v3) {
        return this;
      }
    }
  }
  if (v2 != v3) {
    *(unsigned char *)uint64_t v2 = 1;
  }
  return this;
}

void AudioMetadataMemoryPool_AP::clearUnused(AudioMetadataMemoryPool_AP *this)
{
  uint64_t v1 = *((void *)this + 3);
  uint64_t v2 = *((void *)this + 4);
  if (v1 != v2)
  {
    while (*(unsigned char *)v1 && *(void *)(v1 + 8) != 0)
    {
      v1 += 24;
      if (v1 == v2) {
        return;
      }
    }
    if (v1 != v2)
    {
      uint64_t v5 = v1 + 24;
      if (v1 + 24 != v2)
      {
        do
        {
          uint64_t v6 = *(void *)(v5 + 8);
          if (*(unsigned char *)v5) {
            BOOL v7 = v6 == 0;
          }
          else {
            BOOL v7 = 1;
          }
          if (!v7)
          {
            *(unsigned char *)uint64_t v1 = 1;
            uint64_t v8 = *(void *)(v5 + 16);
            *(void *)(v5 + 8) = 0;
            *(void *)(v5 + 16) = 0;
            uint64_t v9 = *(std::__shared_weak_count **)(v1 + 16);
            *(void *)(v1 + 8) = v6;
            *(void *)(v1 + 16) = v8;
            if (v9) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v9);
            }
            v1 += 24;
          }
          v5 += 24;
        }
        while (v5 != v2);
        uint64_t v2 = *((void *)this + 4);
      }
    }
    if (v1 != v2)
    {
      while (v2 != v1)
      {
        uint64_t v10 = *(std::__shared_weak_count **)(v2 - 8);
        if (v10) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        }
        v2 -= 24;
      }
      *((void *)this + 4) = v1;
    }
  }
}

uint64_t *AudioMetadataTimeline_AP::AudioMetadataTimeline_AP(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  if (v4)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    uint64_t v3 = *a1;
  }
  *((_OWORD *)a1 + 1) = 0u;
  *((_WORD *)a1 + 24) = 0;
  *((_OWORD *)a1 + 2) = 0u;
  if (!v3) {
    __assert_rtn("AudioMetadataTimeline_AP", "AudioMetadataTimeline.cpp", 755, "mMemoryPool");
  }
  uint64_t v5 = (char *)operator new(0x14000uLL);
  uint64_t v6 = v5 + 81920;
  a1[2] = (uint64_t)v5;
  a1[3] = (uint64_t)v5;
  a1[4] = (uint64_t)(v5 + 81920);
  bzero(v5, 0x14000uLL);
  a1[3] = (uint64_t)v6;
  return a1;
}

void sub_18FF78D1C(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 8);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  _Unwind_Resume(exception_object);
}

__n128 AudioMetadataTimeline_AP::addEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(a1 + 48));
  if ((v2 & 1) == 0)
  {
    if (atomic_load((unsigned int *)(a1 + 44)))
    {
      unsigned int v6 = atomic_load((unsigned int *)(a1 + 44));
      int v7 = v6 - 1;
    }
    else
    {
      int v7 = 2047;
    }
    unsigned int v8 = atomic_load((unsigned int *)(a1 + 40));
    if (v8 == v7)
    {
      AUMetadata_log_category();
      uint64_t v9 = AUMetadata_log_category(void)::gLog;
      if (os_log_type_enabled((os_log_t)AUMetadata_log_category(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        int v33 = 136315394;
        unint64_t v34 = "AudioMetadataTimeline.cpp";
        __int16 v35 = 1024;
        int v36 = 833;
        _os_log_impl(&dword_18FEC0000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Dropping metadata event! The event buffer is full!", (uint8_t *)&v33, 0x12u);
      }
      return result;
    }
    uint64_t v11 = *(uint64_t ***)a1;
    unint64_t v12 = atomic_load((unsigned int *)(a1 + 40));
    uint64_t v13 = *v11;
    if (v12 >= ((char *)v11[2] - (char *)*v11) >> 4) {
      __assert_rtn("addMetadataPayloadToMemoryPool", "AudioMetadataTimeline.cpp", 672, "index < mMemoryPool.capacity()");
    }
    if (*(unsigned char *)a2 == 1 && (uint64_t v14 = *(void *)(a2 + 32)) != 0 && *(_DWORD *)(a2 + 28))
    {
      double v15 = v11[1];
      uint64_t v16 = *v11;
      if (v13 != v15)
      {
        while (*v16 != v14)
        {
          v16 += 2;
          if (v16 == v15) {
            goto LABEL_25;
          }
        }
      }
      if (v16 == v15)
      {
LABEL_25:
        uint64_t v26 = v11[3];
        uint64_t v25 = v11[4];
        if (v26 != v25)
        {
          while (v26[1] != v14)
          {
            v26 += 3;
            if (v26 == v25) {
              goto LABEL_36;
            }
          }
        }
        if (v26 == v25)
        {
LABEL_36:
          AUMetadata_log_category();
          unint64_t v31 = AUMetadata_log_category(void)::gLog;
          if (os_log_type_enabled((os_log_t)AUMetadata_log_category(void)::gLog, OS_LOG_TYPE_ERROR))
          {
            uint64_t v32 = *(void *)(a2 + 32);
            int v33 = 136315650;
            unint64_t v34 = "AudioMetadataTimeline.cpp";
            __int16 v35 = 1024;
            int v36 = 706;
            __int16 v37 = 2048;
            uint64_t v38 = v32;
            _os_log_impl(&dword_18FEC0000, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d AudioMetadataTimeline_AP:addMetadataPayloadToMemoryPool:unrecognized payload, %p was never allocated by us.", (uint8_t *)&v33, 0x1Cu);
          }
          operator new();
        }
        uint64_t v27 = &v13[2 * v12];
        uint64_t v29 = v26[1];
        uint64_t v28 = v26[2];
        if (v28) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v30 = (std::__shared_weak_count *)v27[1];
        *uint64_t v27 = v29;
        v27[1] = v28;
        if (v30) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v30);
        }
        double v18 = (std::__shared_weak_count *)v26[2];
        v26[1] = 0;
        v26[2] = 0;
        if (!v18) {
          goto LABEL_18;
        }
      }
      else
      {
        uint64_t v22 = &v13[2 * v12];
        uint64_t v24 = *v16;
        uint64_t v23 = v16[1];
        if (v23) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
        }
        double v18 = (std::__shared_weak_count *)v22[1];
        *uint64_t v22 = v24;
        v22[1] = v23;
        if (!v18) {
          goto LABEL_18;
        }
      }
    }
    else
    {
      uint64_t v17 = &v13[2 * v12];
      double v18 = (std::__shared_weak_count *)v17[1];
      uint64_t *v17 = 0;
      v17[1] = 0;
      if (!v18)
      {
LABEL_18:
        unsigned int v19 = atomic_load((unsigned int *)(a1 + 40));
        uint64_t v20 = *(void *)(a1 + 16) + 40 * v19;
        __n128 result = *(__n128 *)a2;
        long long v21 = *(_OWORD *)(a2 + 16);
        *(void *)(v20 + 32) = *(void *)(a2 + 32);
        *(__n128 *)uint64_t v20 = result;
        *(_OWORD *)(v20 + 16) = v21;
        LOWORD(v20) = atomic_load((unsigned int *)(a1 + 40));
        atomic_store(((_WORD)v20 + 1) & 0x7FF, (unsigned int *)(a1 + 40));
        return result;
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    goto LABEL_18;
  }
  return result;
}

void sub_18FF79090(_Unwind_Exception *exception_object)
{
  if (v1) {
    MEMORY[0x192FC8940](v1, 0x1000C4077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<unsigned char *,std::shared_ptr<unsigned char []>::__shared_ptr_default_delete<unsigned char [],unsigned char>,std::allocator<unsigned char>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    JUMPOUT(0x192FC8910);
  }
  return result;
}

void std::__shared_ptr_pointer<unsigned char *,std::shared_ptr<unsigned char []>::__shared_ptr_default_delete<unsigned char [],unsigned char>,std::allocator<unsigned char>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

uint64_t AudioMetadataTimeline_AP::retrieveMetadataForTimeframe(AudioMetadataTimeline_AP *this, double *a2, const unsigned int *a3, double a4, double a5, double a6, double a7)
{
  unsigned __int8 v7 = atomic_load((unsigned __int8 *)this + 48);
  if (v7) {
    return 0;
  }
  unsigned int v8 = atomic_load((unsigned int *)this + 11);
  unsigned int v9 = atomic_load((unsigned int *)this + 10);
  if (v8 == v9) {
    return 0;
  }
  char v11 = 0;
  unint64_t v12 = (unsigned __int8 *)this + 49;
  atomic_compare_exchange_strong((atomic_uchar *volatile)this + 49, (unsigned __int8 *)&v11, 1u);
  if (v11
    || (unsigned int v13 = atomic_load((unsigned int *)this + 11),
        LODWORD(a6) = *a3,
        double v14 = *a2 + (double)*(unint64_t *)&a6,
        *(double *)(*((void *)this + 2) + 40 * v13 + 12) >= v14))
  {
LABEL_12:
    uint64_t result = 0;
  }
  else
  {
    while (1)
    {
      double v15 = (unsigned int *)((char *)this + 44);
      unsigned int v16 = atomic_load((unsigned int *)this + 11);
      uint64_t v17 = *((void *)this + 2);
      double v18 = *a2;
      LODWORD(v14) = *a3;
      double v14 = *a2 + (double)*(unint64_t *)&v14;
      uint64_t v19 = v17 + 40 * v16;
      double v20 = *(double *)(v19 + 12);
      LODWORD(a7) = *(_DWORD *)(v19 + 20);
      a7 = v20 + (double)*(unint64_t *)&a7;
      if (a7 < v14) {
        double v14 = a7;
      }
      if (v20 > v18) {
        double v18 = *(double *)(v19 + 12);
      }
      if (v14 - v18 > 0.0) {
        break;
      }
      __int16 v21 = atomic_load(v15);
      atomic_store((v21 + 1) & 0x7FF, v15);
      unsigned int v22 = atomic_load(v15);
      unsigned int v23 = atomic_load((unsigned int *)this + 10);
      if (v22 == v23) {
        goto LABEL_12;
      }
    }
    uint64_t result = v17 + 40 * v16;
  }
  atomic_store(0, v12);
  return result;
}

uint64_t AudioMetadataTimeline_AP::markBufferFreeSampleTime(uint64_t this, double a2, double a3, double a4)
{
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)(this + 48));
  if ((v4 & 1) == 0)
  {
    unsigned int v5 = atomic_load((unsigned int *)(this + 44));
    unsigned int v6 = atomic_load((unsigned int *)(this + 40));
    if (v5 != v6)
    {
      char v7 = 0;
      atomic_compare_exchange_strong((atomic_uchar *volatile)(this + 49), (unsigned __int8 *)&v7, 1u);
      if (!v7)
      {
        do
        {
          unsigned int v8 = (unsigned int *)(this + 44);
          unsigned int v9 = atomic_load((unsigned int *)(this + 44));
          uint64_t v10 = *(void *)(this + 16) + 40 * v9;
          LODWORD(a4) = *(_DWORD *)(v10 + 20);
          a4 = (double)*(unint64_t *)&a4;
          if (*(double *)(v10 + 12) + a4 > a2) {
            break;
          }
          __int16 v11 = atomic_load(v8);
          atomic_store((v11 + 1) & 0x7FF, v8);
          unsigned int v12 = atomic_load(v8);
          unsigned int v13 = atomic_load((unsigned int *)(this + 40));
        }
        while (v12 != v13);
      }
      atomic_store(0, (unsigned __int8 *)(this + 49));
    }
  }
  return this;
}

void AudioMetadataTimeline_AP::clear(AudioMetadataTimeline_AP *this)
{
  char v1 = 0;
  unsigned __int8 v2 = (unsigned __int8 *)this + 48;
  atomic_compare_exchange_strong((atomic_uchar *volatile)this + 48, (unsigned __int8 *)&v1, 1u);
  if (!v1)
  {
    unsigned __int8 v4 = atomic_load((unsigned __int8 *)this + 49);
    if (v4)
    {
      do
      {
        __ns.__rep_ = 5000000;
        std::this_thread::sleep_for (&__ns);
        unsigned __int8 v5 = atomic_load((unsigned __int8 *)this + 49);
      }
      while ((v5 & 1) != 0);
    }
    atomic_store(0, (unsigned int *)this + 11);
    atomic_store(0, (unsigned int *)this + 10);
  }
  atomic_store(0, v2);
}

void sub_18FF79330(_Unwind_Exception *a1)
{
  atomic_store(0, (unsigned __int8 *)(v1 + 48));
  _Unwind_Resume(a1);
}

void RenderContextChangeGenerator::~RenderContextChangeGenerator(RenderContextChangeGenerator *this)
{
  id mObserver = this->mObserver;
  if (mObserver) {
    _Block_release(mObserver);
  }
}

void RenderContextChangeGenerator::checkChange(RenderContextChangeGenerator *this)
{
  unsigned __int8 v2 = (void *)os_workgroup_interval_copy_current_4AudioToolbox();
  unsigned __int8 v5 = v2;
  if (v2 == this->mLastWorkgroup)
  {
    if (!v2) {
      return;
    }
  }
  else
  {
    this->mLastWorkgroup = v2;
    v6[0] = v2;
    memset(&v6[1], 0, 24);
    (*((void (**)(id, void *, uint64_t, uint64_t))this->mObserver + 2))(this->mObserver, v6, v3, v4);
    if (!v5) {
      return;
    }
  }
  os_release(v5);
}

void ConvertToIeeeExtended(unsigned char *a1, long double a2)
{
  __int16 v3 = a2 < 0.0;
  if (a2 < 0.0) {
    a2 = -a2;
  }
  if (a2 == 0.0)
  {
    __int16 v4 = 0;
    LODWORD(v5) = 0;
    LODWORD(v6) = 0;
  }
  else
  {
    __int16 v7 = v3 << 15;
    int __e = 0;
    long double v8 = frexp(a2, &__e);
    if (__e <= 0x4000 && v8 < 1.0)
    {
      int v10 = __e + 16382;
      if (__e <= -16383)
      {
        long double v8 = ldexp(v8, v10);
        LOWORD(v10) = 0;
      }
      __int16 v4 = v10 | v7;
      double v11 = ldexp(v8, 32);
      double v12 = floor(v11);
      uint64_t v5 = (uint64_t)(v12 + -2147483650.0) + 0x80000000;
      uint64_t v6 = (uint64_t)(floor(ldexp(v11 - v12, 32)) + -2147483650.0) + 0x80000000;
    }
    else
    {
      LODWORD(v5) = 0;
      LODWORD(v6) = 0;
      __int16 v4 = v7 | 0x7FFF;
    }
  }
  *a1 = HIBYTE(v4);
  a1[1] = v4;
  a1[2] = BYTE3(v5);
  a1[3] = BYTE2(v5);
  a1[4] = BYTE1(v5);
  a1[5] = v5;
  a1[6] = BYTE3(v6);
  a1[7] = BYTE2(v6);
  a1[8] = BYTE1(v6);
  a1[9] = v6;
}

uint64_t GetAudioToolboxBundle(void)
{
  uint64_t result = sAudioToolboxBundle;
  if (sAudioToolboxBundle == -1)
  {
    pthread_once(&sOnce, InitGetAudioToolboxBundle);
    return sAudioToolboxBundle;
  }
  return result;
}

void InitGetAudioToolboxBundle(void)
{
  CFBundleRef BundleWithIdentifier = CFBundleGetBundleWithIdentifier(@"com.apple.audio.toolbox.AudioToolbox");
  sAudioToolboxBundle = (uint64_t)BundleWithIdentifier;
  if (BundleWithIdentifier)
  {
    CFRetain(BundleWithIdentifier);
  }
  else
  {
    syslog(3, "CFBundleGetBundleWithIdentifier(\"com.apple.audio.toolbox.AudioToolbox\") returned NULL");
  }
}

float AudioFormatProperty_SoundCheckVolumeDB(const __CFDictionary *a1, BOOL a2, float *a3)
{
  if (!a1) {
    return 0.0;
  }
  CFDictionaryRef v9 = a1;
  __int16 v10 = 0;
  float v3 = 0.0;
  if (CACFDictionary::HasKey((CACFDictionary *)&v9, @"sc ave perceived power coeff"))
  {
    if (CACFDictionary::HasKey((CACFDictionary *)&v9, @"sc peak amplitude"))
    {
      unsigned int v8 = 0;
      __int16 v7 = 0;
      if ((CACFDictionary::GetString((CACFDictionary *)&v9, @"sc ave perceived power coeff", (const __CFString **)&v7) & 1) != 0&& !GetMaxSoundCheckValueFromString(v7, &v8))
      {
        unsigned int v5 = v8;
        if (v8)
        {
          unsigned int v8 = 0;
          __int16 v7 = 0;
          if ((CACFDictionary::GetString((CACFDictionary *)&v9, @"sc peak amplitude", (const __CFString **)&v7) & 1) != 0
            && !GetMaxSoundCheckValueFromString(v7, &v8)
            && v8)
          {
            float v6 = sqrtf(1000.0 / (float)v5);
            if ((float)(v6 * (float)v8) >= 29200.0) {
              float v6 = 29200.0 / (float)v8;
            }
            float v3 = log10f(v6) * 20.0;
          }
        }
      }
    }
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v9);
  return v3;
}

void sub_18FF796E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  _Unwind_Resume(a1);
}

uint64_t GetMaxSoundCheckValueFromString(const __CFString *a1, unsigned int *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = 2003334207;
  if (a1)
  {
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    *(_OWORD *)buffer = 0u;
    long long v12 = 0u;
    CFStringEncoding SystemEncoding = CFStringGetSystemEncoding();
    if (CFStringGetCString(a1, buffer, 256, SystemEncoding))
    {
      char v6 = 1;
      __int16 v7 = buffer;
      while (1)
      {
        if (*v7 == 32)
        {
          do
            int v8 = *++v7;
          while (v8 == 32);
        }
        else if (!*v7)
        {
          return 0;
        }
        unsigned int v10 = 0;
        if (sscanf(v7, "%u", &v10) != 1) {
          return v2;
        }
        if (v6 & 1 | (v10 > *a2)) {
          *a2 = v10;
        }
        while ((*v7 | 0x20) != 0x20)
          ++v7;
        uint64_t v2 = 0;
        char v6 = 0;
      }
    }
  }
  return v2;
}

uint64_t AudioFormat_ComputeLoudnessScalar(uint64_t a1, int a2, int a3, float *a4)
{
  *(void *)&v74[5] = *MEMORY[0x1E4F143B8];
  AudioFormatRegisterScopeOnce();
  if (kAudioFormatSubsystem)
  {
    if (*(unsigned char *)(kAudioFormatSubsystem + 8))
    {
      int v8 = *(NSObject **)kAudioFormatSubsystem;
      if (*(void *)kAudioFormatSubsystem)
      {
        if (!os_log_type_enabled(*(os_log_t *)kAudioFormatSubsystem, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_224;
        }
        *(_DWORD *)buf = 136315906;
        uint64_t v70 = "AudioFormatCommon.cpp";
        __int16 v71 = 1024;
        int v72 = 307;
        __int16 v73 = 1024;
        v74[0] = a2;
        LOWORD(v74[1]) = 1024;
        *(_DWORD *)((char *)&v74[1] + 2) = a3;
        _os_log_impl(&dword_18FEC0000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d ->AudioFormat_ComputeLoudnessScalar %d %x", buf, 0x1Eu);
        if (kAudioFormatSubsystem)
        {
          if (*(unsigned char *)(kAudioFormatSubsystem + 8))
          {
            int v8 = *(NSObject **)kAudioFormatSubsystem;
            if (*(void *)kAudioFormatSubsystem)
            {
LABEL_224:
              if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136315650;
                uint64_t v70 = "AudioFormatCommon.cpp";
                __int16 v71 = 1024;
                int v72 = 308;
                __int16 v73 = 2112;
                *(void *)uint64_t v74 = a1;
                _os_log_impl(&dword_18FEC0000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d Loudness Info Dictionary %@", buf, 0x1Cu);
              }
            }
          }
        }
      }
    }
  }
  if (a4)
  {
    *a4 = 1.0;
    CFStringRef theString1 = 0;
    uint64_t v67 = a1;
    __int16 v68 = 0;
    BOOL v9 = a1
      && (CACFDictionary::GetString((CACFDictionary *)&v67, @"media kind", &theString1), theString1)
      && CFEqual(theString1, @"Music");
    unsigned int v10 = (os_log_t *)kAudioFormatSubsystem;
    if (kAudioFormatSubsystem)
    {
      if (*(unsigned char *)(kAudioFormatSubsystem + 8))
      {
        double v11 = *(NSObject **)kAudioFormatSubsystem;
        if (*(void *)kAudioFormatSubsystem)
        {
          if (!os_log_type_enabled(*(os_log_t *)kAudioFormatSubsystem, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_225;
          }
          *(_DWORD *)buf = 136315650;
          uint64_t v70 = "AudioFormatCommon.cpp";
          __int16 v71 = 1024;
          int v72 = 325;
          __int16 v73 = 1024;
          v74[0] = a2;
          _os_log_impl(&dword_18FEC0000, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d inSoundCheckEnabled %d", buf, 0x18u);
          unsigned int v10 = (os_log_t *)kAudioFormatSubsystem;
          if (kAudioFormatSubsystem)
          {
            if (*(unsigned char *)(kAudioFormatSubsystem + 8))
            {
              double v11 = *(NSObject **)kAudioFormatSubsystem;
              if (*(void *)kAudioFormatSubsystem)
              {
LABEL_225:
                if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
                  goto LABEL_223;
                }
                *(_DWORD *)buf = 136315650;
                uint64_t v70 = "AudioFormatCommon.cpp";
                __int16 v71 = 1024;
                int v72 = 326;
                __int16 v73 = 1024;
                v74[0] = v9;
                _os_log_impl(&dword_18FEC0000, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d isMusic %d", buf, 0x18u);
                unsigned int v10 = (os_log_t *)kAudioFormatSubsystem;
                if (kAudioFormatSubsystem)
                {
                  if (*(unsigned char *)(kAudioFormatSubsystem + 8))
                  {
LABEL_223:
                    long long v12 = *v10;
                    if (*v10)
                    {
                      if (os_log_type_enabled(*v10, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)buf = 136315650;
                        uint64_t v70 = "AudioFormatCommon.cpp";
                        __int16 v71 = 1024;
                        int v72 = 327;
                        __int16 v73 = 1024;
                        v74[0] = a3 & 1;
                        _os_log_impl(&dword_18FEC0000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d isToSpeaker %d", buf, 0x18u);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (a2) {
      BOOL v13 = v9;
    }
    else {
      BOOL v13 = 0;
    }
    if (!v13)
    {
      uint64_t v24 = kAudioFormatSubsystem;
      if (kAudioFormatSubsystem)
      {
        long long v25 = *(NSObject **)kAudioFormatSubsystem;
        if (!*(void *)kAudioFormatSubsystem) {
          goto LABEL_82;
        }
      }
      else
      {
        long long v25 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        uint64_t v70 = "AudioFormatCommon.cpp";
        __int16 v71 = 1024;
        int v72 = 331;
        uint64_t v29 = "%25s:%-5d Not Music media kind or sound check not enabled, no gain adjustment.";
LABEL_80:
        _os_log_impl(&dword_18FEC0000, v25, OS_LOG_TYPE_DEBUG, v29, buf, 0x12u);
      }
LABEL_81:
      uint64_t v24 = kAudioFormatSubsystem;
      if (!kAudioFormatSubsystem)
      {
LABEL_86:
        uint64_t v23 = 0;
LABEL_219:
        CACFDictionary::~CACFDictionary((CACFDictionary *)&v67);
        return v23;
      }
LABEL_82:
      if (*(unsigned char *)(v24 + 8))
      {
        uint64_t v30 = *(NSObject **)v24;
        if (*(void *)v24)
        {
          if (os_log_type_enabled(*(os_log_t *)v24, OS_LOG_TYPE_DEBUG))
          {
            double v31 = *a4;
            *(_DWORD *)buf = 136315650;
            uint64_t v70 = "AudioFormatCommon.cpp";
            __int16 v71 = 1024;
            int v72 = 496;
            __int16 v73 = 2048;
            *(double *)uint64_t v74 = v31;
            _os_log_impl(&dword_18FEC0000, v30, OS_LOG_TYPE_DEBUG, "%25s:%-5d adjust scalar   %12.6f (linear amplitude)", buf, 0x1Cu);
          }
        }
      }
      goto LABEL_86;
    }
    if (!v67) {
      goto LABEL_81;
    }
    BOOL v65 = 0;
    CACFPreferencesGetAppFloatValue(@"target_loudness", @"com.apple.coreaudio", &v65);
    float v15 = v14;
    if (v65) {
      float v16 = v15;
    }
    else {
      float v16 = -16.0;
    }
    if (kAudioFormatSubsystem)
    {
      if (*(unsigned char *)(kAudioFormatSubsystem + 8))
      {
        long long v17 = *(NSObject **)kAudioFormatSubsystem;
        if (*(void *)kAudioFormatSubsystem)
        {
          if (os_log_type_enabled(*(os_log_t *)kAudioFormatSubsystem, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315650;
            uint64_t v70 = "AudioFormatCommon.cpp";
            __int16 v71 = 1024;
            int v72 = 348;
            __int16 v73 = 2048;
            *(double *)uint64_t v74 = v16;
            _os_log_impl(&dword_18FEC0000, v17, OS_LOG_TYPE_DEBUG, "%25s:%-5d targetLoudness  %12.3f dB", buf, 0x1Cu);
          }
        }
      }
    }
    long long v64 = 0;
    float v62 = 0.0;
    float v63 = -144.0;
    float v61 = 0.0;
    BOOL v60 = 0;
    if (CACFDictionary::HasKey((CACFDictionary *)&v67, @"adjust to album loudness")) {
      CACFDictionary::GetBool((CACFDictionary *)&v67, @"adjust to album loudness", &v60);
    }
    BOOL v59 = 0;
    AppBooleanint Value = CACFPreferencesGetAppBooleanValue(@"force_album_loudness", @"com.apple.coreaudio", &v59);
    if (v59)
    {
      BOOL v19 = AppBooleanValue;
      BOOL v60 = AppBooleanValue;
      if (!kAudioFormatSubsystem)
      {
LABEL_50:
        if (v19
          && CACFDictionary::GetDictionary((CACFDictionary *)&v67, @"album loudness parameters", &v64))
        {
          if (kAudioFormatSubsystem)
          {
            if (*(unsigned char *)(kAudioFormatSubsystem + 8))
            {
              long long v21 = *(NSObject **)kAudioFormatSubsystem;
              if (*(void *)kAudioFormatSubsystem)
              {
                if (os_log_type_enabled(*(os_log_t *)kAudioFormatSubsystem, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 136315394;
                  uint64_t v70 = "AudioFormatCommon.cpp";
                  __int16 v71 = 1024;
                  int v72 = 370;
                  _os_log_impl(&dword_18FEC0000, v21, OS_LOG_TYPE_DEBUG, "%25s:%-5d USING ALBUM LOUDNESS PARAMS", buf, 0x12u);
                }
              }
            }
          }
          uint64_t v57 = v64;
          __int16 v58 = 0;
          if (CACFDictionary::GetFloat32((CACFDictionary *)&v57, @"aa itu loudness", &v62))
          {
            if ((LODWORD(v62) & 0x7FFFFFFFu) < 0x7F800000)
            {
              CACFDictionary::GetFloat32((CACFDictionary *)&v57, @"aa itu true peak", &v63);
              if ((LODWORD(v63) & 0x7FFFFFFFu) >= 0x7F800000)
              {
                if (kAudioFormatSubsystem)
                {
                  long long v22 = *(NSObject **)kAudioFormatSubsystem;
                  if (!*(void *)kAudioFormatSubsystem) {
                    goto LABEL_217;
                  }
                }
                else
                {
                  long long v22 = MEMORY[0x1E4F14500];
                }
                if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 136315394;
                  uint64_t v70 = "AudioFormatCommon.cpp";
                  __int16 v71 = 1024;
                  int v72 = 384;
                  unint64_t v53 = "%25s:%-5d ItuTruePeak value is not finite.";
                  goto LABEL_216;
                }
LABEL_217:
                CACFDictionary::~CACFDictionary((CACFDictionary *)&v57);
                goto LABEL_218;
              }
              goto LABEL_76;
            }
            if (kAudioFormatSubsystem)
            {
              long long v22 = *(NSObject **)kAudioFormatSubsystem;
              if (!*(void *)kAudioFormatSubsystem) {
                goto LABEL_217;
              }
            }
            else
            {
              long long v22 = MEMORY[0x1E4F14500];
            }
            if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_217;
            }
            *(_DWORD *)buf = 136315394;
            uint64_t v70 = "AudioFormatCommon.cpp";
            __int16 v71 = 1024;
            int v72 = 378;
            unint64_t v53 = "%25s:%-5d ItuLoudness value is not finite.";
          }
          else
          {
            if (kAudioFormatSubsystem)
            {
              long long v22 = *(NSObject **)kAudioFormatSubsystem;
              if (!*(void *)kAudioFormatSubsystem) {
                goto LABEL_217;
              }
            }
            else
            {
              long long v22 = MEMORY[0x1E4F14500];
            }
            if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_217;
            }
            *(_DWORD *)buf = 136315394;
            uint64_t v70 = "AudioFormatCommon.cpp";
            __int16 v71 = 1024;
            int v72 = 374;
            unint64_t v53 = "%25s:%-5d ItuLoudnessKey not present in AlbumLoudnessParameters dictionary.";
          }
          goto LABEL_216;
        }
        if (CACFDictionary::GetDictionary((CACFDictionary *)&v67, @"main loudness parameters", &v64))
        {
          if (kAudioFormatSubsystem)
          {
            if (*(unsigned char *)(kAudioFormatSubsystem + 8))
            {
              long long v26 = *(NSObject **)kAudioFormatSubsystem;
              if (*(void *)kAudioFormatSubsystem)
              {
                if (os_log_type_enabled(*(os_log_t *)kAudioFormatSubsystem, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 136315394;
                  uint64_t v70 = "AudioFormatCommon.cpp";
                  __int16 v71 = 1024;
                  int v72 = 388;
                  _os_log_impl(&dword_18FEC0000, v26, OS_LOG_TYPE_DEBUG, "%25s:%-5d USING MAIN LOUDNESS PARAMS", buf, 0x12u);
                }
              }
            }
          }
          uint64_t v57 = v64;
          __int16 v58 = 0;
          if (CACFDictionary::GetFloat32((CACFDictionary *)&v57, @"aa itu loudness", &v62))
          {
            if ((LODWORD(v62) & 0x7FFFFFFFu) >= 0x7F800000)
            {
              if (kAudioFormatSubsystem)
              {
                long long v22 = *(NSObject **)kAudioFormatSubsystem;
                if (!*(void *)kAudioFormatSubsystem) {
                  goto LABEL_217;
                }
              }
              else
              {
                long long v22 = MEMORY[0x1E4F14500];
              }
              if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_217;
              }
              *(_DWORD *)buf = 136315394;
              uint64_t v70 = "AudioFormatCommon.cpp";
              __int16 v71 = 1024;
              int v72 = 396;
              unint64_t v53 = "%25s:%-5d ItuLoudness value is not finite.";
            }
            else
            {
              CACFDictionary::GetFloat32((CACFDictionary *)&v57, @"aa itu true peak", &v63);
              if ((LODWORD(v63) & 0x7FFFFFFFu) < 0x7F800000)
              {
LABEL_76:
                CACFDictionary::~CACFDictionary((CACFDictionary *)&v57);
                int v27 = 0;
                float v28 = 20.0;
                goto LABEL_118;
              }
              if (kAudioFormatSubsystem)
              {
                long long v22 = *(NSObject **)kAudioFormatSubsystem;
                if (!*(void *)kAudioFormatSubsystem) {
                  goto LABEL_217;
                }
              }
              else
              {
                long long v22 = MEMORY[0x1E4F14500];
              }
              if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_217;
              }
              *(_DWORD *)buf = 136315394;
              uint64_t v70 = "AudioFormatCommon.cpp";
              __int16 v71 = 1024;
              int v72 = 402;
              unint64_t v53 = "%25s:%-5d ItuTruePeak value is not finite.";
            }
          }
          else
          {
            if (kAudioFormatSubsystem)
            {
              long long v22 = *(NSObject **)kAudioFormatSubsystem;
              if (!*(void *)kAudioFormatSubsystem) {
                goto LABEL_217;
              }
            }
            else
            {
              long long v22 = MEMORY[0x1E4F14500];
            }
            if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_217;
            }
            *(_DWORD *)buf = 136315394;
            uint64_t v70 = "AudioFormatCommon.cpp";
            __int16 v71 = 1024;
            int v72 = 392;
            unint64_t v53 = "%25s:%-5d ItuLoudnessKey not present in MainLoudnessParameters dictionary.";
          }
LABEL_216:
          _os_log_impl(&dword_18FEC0000, v22, OS_LOG_TYPE_DEFAULT, v53, buf, 0x12u);
          goto LABEL_217;
        }
        int Float32 = CACFDictionary::GetFloat32((CACFDictionary *)&v67, @"precalculated sc adjustment", &v61);
        if (v65) {
          int v33 = 0;
        }
        else {
          int v33 = Float32;
        }
        if (v33 == 1)
        {
          float v34 = v61;
          if ((LODWORD(v61) & 0x7FFFFFFFu) < 0x7F800000)
          {
            if (kAudioFormatSubsystem)
            {
              if (*(unsigned char *)(kAudioFormatSubsystem + 8))
              {
                __int16 v35 = *(NSObject **)kAudioFormatSubsystem;
                if (*(void *)kAudioFormatSubsystem)
                {
                  if (os_log_type_enabled(*(os_log_t *)kAudioFormatSubsystem, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 136315394;
                    uint64_t v70 = "AudioFormatCommon.cpp";
                    __int16 v71 = 1024;
                    int v72 = 410;
                    _os_log_impl(&dword_18FEC0000, v35, OS_LOG_TYPE_DEBUG, "%25s:%-5d USING precalculated adjustment", buf, 0x12u);
                    float v34 = v61;
                  }
                }
              }
            }
            float v36 = 1.1755e-38;
            if (v34 >= 1.1755e-38) {
              float v36 = v34;
            }
            float v37 = log10f(v36);
            int v27 = 0;
            float v38 = v37 * 20.0;
            float v62 = -16.0 - v38;
            float v28 = fminf(v38, 20.0);
            goto LABEL_118;
          }
          if (kAudioFormatSubsystem)
          {
            uint64_t v51 = *(NSObject **)kAudioFormatSubsystem;
            if (!*(void *)kAudioFormatSubsystem) {
              goto LABEL_218;
            }
          }
          else
          {
            uint64_t v51 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315394;
            uint64_t v70 = "AudioFormatCommon.cpp";
            __int16 v71 = 1024;
            int v72 = 407;
            char v54 = "%25s:%-5d PrecalculatedSCAdjustment value is not finite.";
LABEL_212:
            _os_log_impl(&dword_18FEC0000, v51, OS_LOG_TYPE_DEFAULT, v54, buf, 0x12u);
          }
        }
        else
        {
          if (CACFDictionary::GetDictionary((CACFDictionary *)&v67, @"sound check info", &v64))
          {
            if (kAudioFormatSubsystem)
            {
              if (*(unsigned char *)(kAudioFormatSubsystem + 8))
              {
                uint64_t v39 = *(NSObject **)kAudioFormatSubsystem;
                if (*(void *)kAudioFormatSubsystem)
                {
                  if (os_log_type_enabled(*(os_log_t *)kAudioFormatSubsystem, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)buf = 136315394;
                    uint64_t v70 = "AudioFormatCommon.cpp";
                    __int16 v71 = 1024;
                    int v72 = 416;
                    _os_log_impl(&dword_18FEC0000, v39, OS_LOG_TYPE_DEBUG, "%25s:%-5d USING SOUND CHECK INFO", buf, 0x12u);
                  }
                }
              }
            }
            uint64_t v57 = v64;
            __int16 v58 = 0;
            unsigned int v56 = 0;
            if ((GetMaxSoundCheckValue((CACFDictionary *)&v57, @"sc ave perceived power coeff", &v56) & 1) == 0)
            {
              if (kAudioFormatSubsystem)
              {
                long long v22 = *(NSObject **)kAudioFormatSubsystem;
                if (!*(void *)kAudioFormatSubsystem) {
                  goto LABEL_217;
                }
              }
              else
              {
                long long v22 = MEMORY[0x1E4F14500];
              }
              if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_217;
              }
              *(_DWORD *)buf = 136315394;
              uint64_t v70 = "AudioFormatCommon.cpp";
              __int16 v71 = 1024;
              int v72 = 422;
              unint64_t v53 = "%25s:%-5d AvePerceivedPowerCoeff is not present in SoundCheck dictionary.";
              goto LABEL_216;
            }
            unsigned int v40 = v56;
            if (!v56)
            {
              if (kAudioFormatSubsystem)
              {
                long long v22 = *(NSObject **)kAudioFormatSubsystem;
                if (!*(void *)kAudioFormatSubsystem) {
                  goto LABEL_217;
                }
              }
              else
              {
                long long v22 = MEMORY[0x1E4F14500];
              }
              if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136315394;
                uint64_t v70 = "AudioFormatCommon.cpp";
                __int16 v71 = 1024;
                int v72 = 426;
                unint64_t v53 = "%25s:%-5d AvePerceivedPowerCoeff is not present in SoundCheck dictionary.";
                goto LABEL_216;
              }
              goto LABEL_217;
            }
            *(_DWORD *)buf = 0;
            if (GetMaxSoundCheckValue((CACFDictionary *)&v57, @"sc peak amplitude", (unsigned int *)buf))
            {
              float v41 = (float)*(unsigned int *)buf / 32767.0;
              if (v41 < 1.1755e-38) {
                float v41 = 1.1755e-38;
              }
              float v63 = log10f(v41) * 20.0;
            }
            float v42 = sqrtf(1000.0 / (float)v40);
            if (v42 < 1.1755e-38) {
              float v42 = 1.1755e-38;
            }
            float v28 = 20.0;
            float v62 = -16.0 - (float)(log10f(v42) * 20.0);
            CACFDictionary::~CACFDictionary((CACFDictionary *)&v57);
            int v27 = 1;
LABEL_118:
            float v43 = v16 - v62;
            if ((float)(v16 - v62) > 0.0)
            {
              float v44 = fmaxf(-1.0 - v63, 0.0);
              if (v44 < v43) {
                float v43 = v44;
              }
              if (v28 < v43) {
                float v43 = v28;
              }
            }
            float v45 = floorf(v43 + 0.5);
            if (v27) {
              float v46 = v45;
            }
            else {
              float v46 = v43;
            }
            *a4 = __exp10f(v46 * 0.05);
            uint64_t v47 = (os_log_t *)kAudioFormatSubsystem;
            if (kAudioFormatSubsystem)
            {
              if (*(unsigned char *)(kAudioFormatSubsystem + 8))
              {
                long long v48 = *(NSObject **)kAudioFormatSubsystem;
                if (*(void *)kAudioFormatSubsystem)
                {
                  if (!os_log_type_enabled(*(os_log_t *)kAudioFormatSubsystem, OS_LOG_TYPE_DEBUG)) {
                    goto LABEL_231;
                  }
                  *(_DWORD *)buf = 136315650;
                  uint64_t v70 = "AudioFormatCommon.cpp";
                  __int16 v71 = 1024;
                  int v72 = 486;
                  __int16 v73 = 2048;
                  *(double *)uint64_t v74 = v16;
                  _os_log_impl(&dword_18FEC0000, v48, OS_LOG_TYPE_DEBUG, "%25s:%-5d targetLoudness  %12.3f dB", buf, 0x1Cu);
                  uint64_t v47 = (os_log_t *)kAudioFormatSubsystem;
                  if (kAudioFormatSubsystem)
                  {
                    if (*(unsigned char *)(kAudioFormatSubsystem + 8))
                    {
                      long long v48 = *(NSObject **)kAudioFormatSubsystem;
                      if (*(void *)kAudioFormatSubsystem)
                      {
LABEL_231:
                        if (!os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG)) {
                          goto LABEL_226;
                        }
                        *(_DWORD *)buf = 136315650;
                        uint64_t v70 = "AudioFormatCommon.cpp";
                        __int16 v71 = 1024;
                        int v72 = 487;
                        __int16 v73 = 2048;
                        *(double *)uint64_t v74 = v62;
                        _os_log_impl(&dword_18FEC0000, v48, OS_LOG_TYPE_DEBUG, "%25s:%-5d programLoudness %12.3f dB", buf, 0x1Cu);
                        uint64_t v47 = (os_log_t *)kAudioFormatSubsystem;
                        if (kAudioFormatSubsystem)
                        {
                          if (*(unsigned char *)(kAudioFormatSubsystem + 8))
                          {
LABEL_226:
                            unint64_t v49 = *v47;
                            if (*v47)
                            {
                              if (!os_log_type_enabled(*v47, OS_LOG_TYPE_DEBUG)) {
                                goto LABEL_227;
                              }
                              *(_DWORD *)buf = 136315650;
                              uint64_t v70 = "AudioFormatCommon.cpp";
                              __int16 v71 = 1024;
                              int v72 = 488;
                              __int16 v73 = 2048;
                              *(double *)uint64_t v74 = v63;
                              _os_log_impl(&dword_18FEC0000, v49, OS_LOG_TYPE_DEBUG, "%25s:%-5d peakDB          %12.3f dB", buf, 0x1Cu);
                              uint64_t v47 = (os_log_t *)kAudioFormatSubsystem;
                              if (kAudioFormatSubsystem)
                              {
                                if (*(unsigned char *)(kAudioFormatSubsystem + 8))
                                {
                                  unint64_t v49 = *(NSObject **)kAudioFormatSubsystem;
                                  if (*(void *)kAudioFormatSubsystem)
                                  {
LABEL_227:
                                    if (!os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG)) {
                                      goto LABEL_228;
                                    }
                                    *(_DWORD *)buf = 136315650;
                                    uint64_t v70 = "AudioFormatCommon.cpp";
                                    __int16 v71 = 1024;
                                    int v72 = 489;
                                    __int16 v73 = 2048;
                                    *(double *)uint64_t v74 = v28;
                                    _os_log_impl(&dword_18FEC0000, v49, OS_LOG_TYPE_DEBUG, "%25s:%-5d maxAdjust       %12.3f dB", buf, 0x1Cu);
                                    uint64_t v47 = (os_log_t *)kAudioFormatSubsystem;
                                    if (kAudioFormatSubsystem)
                                    {
                                      if (*(unsigned char *)(kAudioFormatSubsystem + 8))
                                      {
LABEL_228:
                                        uint64_t v50 = *v47;
                                        if (*v47)
                                        {
                                          if (!os_log_type_enabled(*v47, OS_LOG_TYPE_DEBUG)) {
                                            goto LABEL_229;
                                          }
                                          *(_DWORD *)buf = 136315650;
                                          uint64_t v70 = "AudioFormatCommon.cpp";
                                          __int16 v71 = 1024;
                                          int v72 = 490;
                                          __int16 v73 = 2048;
                                          *(double *)uint64_t v74 = v46;
                                          _os_log_impl(&dword_18FEC0000, v50, OS_LOG_TYPE_DEBUG, "%25s:%-5d adjust          %12.3f dB", buf, 0x1Cu);
                                          uint64_t v47 = (os_log_t *)kAudioFormatSubsystem;
                                          if (kAudioFormatSubsystem)
                                          {
                                            if (*(unsigned char *)(kAudioFormatSubsystem + 8))
                                            {
                                              uint64_t v50 = *(NSObject **)kAudioFormatSubsystem;
                                              if (*(void *)kAudioFormatSubsystem)
                                              {
LABEL_229:
                                                if (!os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG)) {
                                                  goto LABEL_230;
                                                }
                                                *(_DWORD *)buf = 136315650;
                                                uint64_t v70 = "AudioFormatCommon.cpp";
                                                __int16 v71 = 1024;
                                                int v72 = 491;
                                                __int16 v73 = 2048;
                                                *(double *)uint64_t v74 = (float)(v46 + v62);
                                                _os_log_impl(&dword_18FEC0000, v50, OS_LOG_TYPE_DEBUG, "%25s:%-5d result loudness %12.3f dB", buf, 0x1Cu);
                                                uint64_t v47 = (os_log_t *)kAudioFormatSubsystem;
                                                if (kAudioFormatSubsystem)
                                                {
                                                  if (*(unsigned char *)(kAudioFormatSubsystem + 8))
                                                  {
LABEL_230:
                                                    long long v25 = *v47;
                                                    if (*v47)
                                                    {
                                                      if (os_log_type_enabled(*v47, OS_LOG_TYPE_DEBUG))
                                                      {
                                                        *(_DWORD *)buf = 136315394;
                                                        uint64_t v70 = "AudioFormatCommon.cpp";
                                                        __int16 v71 = 1024;
                                                        int v72 = 492;
                                                        uint64_t v29 = "%25s:%-5d ---";
                                                        goto LABEL_80;
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            goto LABEL_81;
          }
          if (kAudioFormatSubsystem)
          {
            if (*(unsigned char *)(kAudioFormatSubsystem + 8))
            {
              unint64_t v52 = *(NSObject **)kAudioFormatSubsystem;
              if (*(void *)kAudioFormatSubsystem)
              {
                if (os_log_type_enabled(*(os_log_t *)kAudioFormatSubsystem, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 136315394;
                  uint64_t v70 = "AudioFormatCommon.cpp";
                  __int16 v71 = 1024;
                  int v72 = 456;
                  _os_log_impl(&dword_18FEC0000, v52, OS_LOG_TYPE_DEBUG, "%25s:%-5d LID HAS NO LOUDNESS INFO", buf, 0x12u);
                }
              }
            }
          }
          if (theString1) {
            goto LABEL_86;
          }
          if (kAudioFormatSubsystem)
          {
            uint64_t v51 = *(NSObject **)kAudioFormatSubsystem;
            if (!*(void *)kAudioFormatSubsystem) {
              goto LABEL_218;
            }
          }
          else
          {
            uint64_t v51 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315394;
            uint64_t v70 = "AudioFormatCommon.cpp";
            __int16 v71 = 1024;
            int v72 = 458;
            char v54 = "%25s:%-5d Loudness Info Dictionary contains neither MainLoudnessParametersKey nor SoundCheckInfoKey no"
                  "r PrecalculatedSCAdjustmentKey nor MediaKindKey.";
            goto LABEL_212;
          }
        }
LABEL_218:
        uint64_t v23 = 4294967246;
        goto LABEL_219;
      }
      if (*(unsigned char *)(kAudioFormatSubsystem + 8))
      {
        long long v20 = *(NSObject **)kAudioFormatSubsystem;
        if (*(void *)kAudioFormatSubsystem)
        {
          if (os_log_type_enabled(*(os_log_t *)kAudioFormatSubsystem, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315650;
            uint64_t v70 = "AudioFormatCommon.cpp";
            __int16 v71 = 1024;
            int v72 = 366;
            __int16 v73 = 1024;
            v74[0] = v19;
            _os_log_impl(&dword_18FEC0000, v20, OS_LOG_TYPE_DEBUG, "%25s:%-5d Force album loudness to %d", buf, 0x18u);
          }
        }
      }
    }
    BOOL v19 = v60;
    goto LABEL_50;
  }
  return 4294967246;
}

void sub_18FF7AB4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va1);
  _Unwind_Resume(a1);
}

void AudioFormatRegisterScopeOnce(void)
{
  if (atomic_load_explicit((atomic_ullong *volatile)AudioFormatRegisterScopeOnce(void)::onceflag, memory_order_acquire) != -1)
  {
    uint64_t v2 = &v0;
    uint64_t v1 = &v2;
    std::__call_once(AudioFormatRegisterScopeOnce(void)::onceflag, &v1, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AudioFormatRegisterScopeOnce(void)::$_0 &&>>);
  }
}

uint64_t GetMaxSoundCheckValue(CACFDictionary *a1, const __CFString *a2, unsigned int *a3)
{
  unsigned int v7 = 0;
  uint64_t v6 = 0;
  int String = CACFDictionary::GetString(a1, a2, (const __CFString **)&v6);
  uint64_t result = 0;
  if (String)
  {
    if (GetMaxSoundCheckValueFromString(v6, &v7))
    {
      return 0;
    }
    else
    {
      *a3 = v7;
      return 1;
    }
  }
  return result;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AudioFormatRegisterScopeOnce(void)::$_0 &&>>()
{
}

uint64_t AudioFormat_GetDRCTypeFromPacket(uint64_t a1, _DWORD *a2)
{
  AudioCodec inCodec = 0;
  OSType v2 = *(_DWORD *)(a1 + 8);
  UInt32 ioPropertyDataSize = 16;
  uint64_t outPropertyData = a1;
  int v9 = 0;
  if (v2 >> 8 == 6381923) {
    OSType v3 = 1633772320;
  }
  else {
    OSType v3 = v2;
  }
  if (v3 != 1634492771 && v3 != 1633772320) {
    return 1718449215;
  }
  uint64_t result = OpenCodecComponent(v3, &inCodec, 0x61646563u);
  if (!result)
  {
    uint64_t result = AudioCodecGetProperty(inCodec, 0x64726374u, &ioPropertyDataSize, &outPropertyData);
    if (!result) {
      *a2 = v9;
    }
  }
  return result;
}

uint64_t AudioFormatProperty_AlbumLoudness(CFArrayRef *a1, const __CFDictionary **a2)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  if (kAudioFormatSubsystem)
  {
    __int16 v4 = *(NSObject **)kAudioFormatSubsystem;
    if (!*(void *)kAudioFormatSubsystem) {
      goto LABEL_7;
    }
  }
  else
  {
    __int16 v4 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "AudioFormatCommon.cpp";
    __int16 v45 = 1024;
    int v46 = 553;
    _os_log_impl(&dword_18FEC0000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d AudioFormatProperty_AlbumLoudness", buf, 0x12u);
  }
LABEL_7:
  AudioFormatRegisterScopeOnce();
  *a2 = 0;
  float v43 = 0;
  CFArrayRef v41 = *a1;
  __int16 v42 = 0;
  CFIndex Count = CFArrayGetCount(v41);
  int v33 = a2;
  if (Count < 1)
  {
    uint64_t v34 = 0;
    float v10 = -1.0e10;
    int v14 = -1000000000;
    int v13 = -1000000000;
    int v12 = -1000000000;
    int v11 = -1000000000;
    float v9 = -1.0e10;
    float v8 = -1.0e10;
    float v7 = -1.0e10;
LABEL_53:
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    __int16 v40 = 256;
    if (v43) {
      CACFDictionary::AddString((CACFDictionary *)&Mutable, @"media kind", v43);
    }
    if (v10 != -1.0e10) {
      CACFDictionary::AddFloat32((CACFDictionary *)&Mutable, @"precalculated sc adjustment", v10);
    }
    if (v8 != -1.0e10) {
      CACFDictionary::AddFloat32((CACFDictionary *)&Mutable, @"anchor loudness", v8);
    }
    if (v14 != -1000000000) {
      CACFDictionary::AddUInt32((CACFDictionary *)&Mutable, @"bit depth pcm master");
    }
    if ((v34 & 1) != 0 && (v7 != -1.0e10 || v9 != -1.0e10))
    {
      *(void *)buf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      *(_WORD *)&_DWORD buf[8] = 257;
      if (v7 != -1.0e10) {
        CACFDictionary::AddFloat32((CACFDictionary *)buf, @"aa itu loudness", v7);
      }
      if (v9 != -1.0e10) {
        CACFDictionary::AddFloat32((CACFDictionary *)buf, @"aa itu true peak", v9);
      }
      CACFDictionary::AddDictionary((CACFDictionary *)&Mutable, @"main loudness parameters", *(const __CFDictionary **)buf);
      CACFDictionary::~CACFDictionary((CACFDictionary *)buf);
    }
    if ((v34 & 0x100000000) != 0)
    {
      __int16 v35 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      __int16 v36 = 257;
      if (v13 != -1000000000)
      {
        snprintf(buf, 0x20uLL, "%u", v13);
        CACFDictionary::AddCString((CACFDictionary *)&v35, @"sc ave perceived power coeff", buf);
      }
      if (v12 != -1000000000)
      {
        snprintf(buf, 0x20uLL, "%u", v12);
        CACFDictionary::AddCString((CACFDictionary *)&v35, @"sc max perceived power coeff", buf);
      }
      if (v11 != -1000000000)
      {
        snprintf(buf, 0x20uLL, "%u", v11);
        CACFDictionary::AddCString((CACFDictionary *)&v35, @"sc peak amplitude", buf);
      }
      CACFDictionary::AddDictionary((CACFDictionary *)&Mutable, @"sound check info", v35);
      CACFDictionary::~CACFDictionary((CACFDictionary *)&v35);
    }
    if (kAudioFormatSubsystem)
    {
      long long v26 = *(NSObject **)kAudioFormatSubsystem;
      if (!*(void *)kAudioFormatSubsystem)
      {
LABEL_83:
        uint64_t *v33 = Mutable;
        CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
        uint64_t v27 = 0;
        goto LABEL_112;
      }
    }
    else
    {
      long long v26 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "AudioFormatCommon.cpp";
      __int16 v45 = 1024;
      int v46 = 703;
      __int16 v47 = 2112;
      CFMutableDictionaryRef v48 = Mutable;
      _os_log_impl(&dword_18FEC0000, v26, OS_LOG_TYPE_DEBUG, "%25s:%-5d Album Loudness Info :\n%@", buf, 0x1Cu);
    }
    goto LABEL_83;
  }
  CFIndex v6 = 0;
  uint64_t v34 = 0;
  float v7 = -1.0e10;
  float v8 = -1.0e10;
  float v9 = -1.0e10;
  float v10 = -1.0e10;
  int v11 = -1000000000;
  int v12 = -1000000000;
  int v13 = -1000000000;
  int v14 = -1000000000;
  while (1)
  {
    ValueAtIndex = (void *)CFArrayGetValueAtIndex(*a1, v6);
    CFTypeID v16 = CFGetTypeID(ValueAtIndex);
    if (v16 != CFDictionaryGetTypeID()) {
      goto LABEL_50;
    }
    *(void *)float v38 = 0;
    CFMutableDictionaryRef Mutable = (CFMutableDictionaryRef)ValueAtIndex;
    __int16 v40 = 0;
    if (!v43) {
      CACFDictionary::GetString((CACFDictionary *)&Mutable, @"media kind", (const __CFString **)&v43);
    }
    if (CACFDictionary::GetFloat32((CACFDictionary *)&Mutable, @"precalculated sc adjustment", (float *)&v38[1]))break; {
LABEL_16:
    }
    if (CACFDictionary::GetFloat32((CACFDictionary *)&Mutable, @"anchor loudness", (float *)&v38[1]))
    {
      if ((v38[1] & 0x7FFFFFFF) >= 0x7F800000)
      {
        if (kAudioFormatSubsystem)
        {
          float v28 = *(NSObject **)kAudioFormatSubsystem;
          if (!*(void *)kAudioFormatSubsystem) {
            goto LABEL_111;
          }
        }
        else
        {
          float v28 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "AudioFormatCommon.cpp";
          __int16 v45 = 1024;
          int v46 = 602;
          uint64_t v30 = "%25s:%-5d AnchorLoudness value is not finite.";
          goto LABEL_102;
        }
        goto LABEL_111;
      }
      if (v8 < *(float *)&v38[1]) {
        float v8 = *(float *)&v38[1];
      }
    }
    int UInt32 = CACFDictionary::GetUInt32((CACFDictionary *)&Mutable, @"bit depth pcm master", v38);
    unsigned int v18 = v38[0];
    if (v14 > (int)v38[0]) {
      unsigned int v18 = v14;
    }
    if (UInt32) {
      int v14 = v18;
    }
    float v37 = 0;
    if (CACFDictionary::GetDictionary((CACFDictionary *)&Mutable, @"main loudness parameters", &v37))
    {
      __int16 v35 = v37;
      __int16 v36 = 0;
      if (CACFDictionary::GetFloat32((CACFDictionary *)&v35, @"aa itu loudness", (float *)&v38[1]))
      {
        if ((v38[1] & 0x7FFFFFFF) >= 0x7F800000)
        {
          if (kAudioFormatSubsystem)
          {
            uint64_t v29 = *(NSObject **)kAudioFormatSubsystem;
            if (!*(void *)kAudioFormatSubsystem) {
              goto LABEL_110;
            }
          }
          else
          {
            uint64_t v29 = MEMORY[0x1E4F14500];
          }
          if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_110;
          }
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "AudioFormatCommon.cpp";
          __int16 v45 = 1024;
          int v46 = 619;
          double v31 = "%25s:%-5d ItuLoudness value is not finite.";
          goto LABEL_109;
        }
        if (v7 < *(float *)&v38[1]) {
          float v7 = *(float *)&v38[1];
        }
      }
      if (CACFDictionary::GetFloat32((CACFDictionary *)&v35, @"aa itu true peak", (float *)&v38[1]))
      {
        if ((v38[1] & 0x7FFFFFFF) >= 0x7F800000)
        {
          if (kAudioFormatSubsystem)
          {
            uint64_t v29 = *(NSObject **)kAudioFormatSubsystem;
            if (!*(void *)kAudioFormatSubsystem)
            {
LABEL_110:
              CACFDictionary::~CACFDictionary((CACFDictionary *)&v35);
              goto LABEL_111;
            }
          }
          else
          {
            uint64_t v29 = MEMORY[0x1E4F14500];
          }
          if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_110;
          }
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "AudioFormatCommon.cpp";
          __int16 v45 = 1024;
          int v46 = 627;
          double v31 = "%25s:%-5d ItuTruePeak value is not finite.";
LABEL_109:
          _os_log_impl(&dword_18FEC0000, v29, OS_LOG_TYPE_DEFAULT, v31, buf, 0x12u);
          goto LABEL_110;
        }
        if (v9 < *(float *)&v38[1]) {
          float v9 = *(float *)&v38[1];
        }
      }
      CACFDictionary::~CACFDictionary((CACFDictionary *)&v35);
      LOBYTE(v34) = 1;
    }
    __int16 v35 = 0;
    if (CACFDictionary::GetDictionary((CACFDictionary *)&Mutable, @"sound check info", &v35))
    {
      *(void *)buf = v35;
      *(_WORD *)&_DWORD buf[8] = 0;
      int v19 = GetMaxSoundCheckValue((CACFDictionary *)buf, @"sc ave perceived power coeff", v38);
      unsigned int v20 = v38[0];
      if (v13 > (int)v38[0]) {
        unsigned int v20 = v13;
      }
      if (v19) {
        int v13 = v20;
      }
      int v21 = GetMaxSoundCheckValue((CACFDictionary *)buf, @"sc max perceived power coeff", v38);
      signed int v22 = v38[0];
      int v23 = GetMaxSoundCheckValue((CACFDictionary *)buf, @"sc peak amplitude", v38);
      if (v12 <= v22) {
        signed int v24 = v22;
      }
      else {
        signed int v24 = v12;
      }
      if (v21) {
        int v12 = v24;
      }
      unsigned int v25 = v38[0];
      if (v11 > (int)v38[0]) {
        unsigned int v25 = v11;
      }
      if (v23) {
        int v11 = v25;
      }
      CACFDictionary::~CACFDictionary((CACFDictionary *)buf);
      BYTE4(v34) = 1;
    }
    CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
LABEL_50:
    if (Count == ++v6) {
      goto LABEL_53;
    }
  }
  if ((v38[1] & 0x7FFFFFFF) < 0x7F800000)
  {
    if (v10 < *(float *)&v38[1]) {
      float v10 = *(float *)&v38[1];
    }
    goto LABEL_16;
  }
  if (kAudioFormatSubsystem)
  {
    float v28 = *(NSObject **)kAudioFormatSubsystem;
    if (!*(void *)kAudioFormatSubsystem) {
      goto LABEL_111;
    }
  }
  else
  {
    float v28 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "AudioFormatCommon.cpp";
    __int16 v45 = 1024;
    int v46 = 594;
    uint64_t v30 = "%25s:%-5d PrecalculatedSCAdjustment value is not finite.";
LABEL_102:
    _os_log_impl(&dword_18FEC0000, v28, OS_LOG_TYPE_DEFAULT, v30, buf, 0x12u);
  }
LABEL_111:
  CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  uint64_t v27 = 4294967246;
LABEL_112:
  CACFArray::~CACFArray((CACFArray *)&v41);
  return v27;
}

void sub_18FF7B618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  CACFArray::~CACFArray((CACFArray *)va1);
  _Unwind_Resume(a1);
}

void CA::ADMBuilder::ADMBuilder(CA::ADMBuilder *this)
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_18FF7B8A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, _Unwind_Exception *exception_object,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  std::unique_ptr<_xmlParserCtxt,std::function<void ()(_xmlParserCtxt*)>>::reset[abi:ne180100](v27, 0);
  std::__function::__value_func<void ()(_xmlParserCtxt *)>::~__value_func[abi:ne180100](v29);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>>>::~__hash_table(v33);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>>>::~__hash_table(v32);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>>>::~__hash_table(v31);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>>>::~__hash_table(a21);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v30);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a22);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v28);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a23);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v26);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a24);
  uint64_t v34 = *(void *)(v25 + 624);
  *(void *)(v25 + 624) = 0;
  if (v34) {
    std::default_delete<std::string>::operator()[abi:ne180100](v34);
  }
  uint64_t v35 = *(void *)(v25 + 616);
  *(void *)(v25 + 616) = 0;
  if (v35) {
    std::default_delete<CA::ADMLoudnessMetadata>::operator()[abi:ne180100](v35);
  }
  a25 = v25 + 584;
  std::vector<std::vector<std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  a25 = v25 + 560;
  std::vector<std::vector<std::optional<std::string>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  a25 = v25 + 536;
  std::vector<std::optional<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  a25 = v25 + 512;
  std::vector<std::optional<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  a25 = v25 + 488;
  std::vector<std::optional<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  a25 = v25 + 464;
  std::vector<std::optional<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  a25 = v25 + 440;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  a25 = v25 + 416;
  std::vector<std::optional<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  a25 = v25 + 392;
  std::vector<std::optional<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  a25 = v25 + 368;
  std::vector<std::vector<std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  a25 = v25 + 344;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  a25 = v25 + 320;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  a25 = v25 + 296;
  std::vector<std::optional<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  a25 = v25 + 272;
  std::vector<std::optional<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  a25 = v25 + 248;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  a25 = v25 + 224;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  a25 = v25 + 200;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  a25 = v25 + 176;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  a25 = v25 + 152;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  a25 = v25 + 128;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  a25 = v25 + 104;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  a25 = v25 + 80;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  a25 = v25 + 56;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  std::deque<CA::ADMBuilder::Impl::ADMElement>::~deque[abi:ne180100](v25 + 8);
  std::unique_ptr<CA::ADM>::reset[abi:ne180100]((char ***)v25, 0);
  MEMORY[0x192FC8940](v25, 0x10A0C4048A64E4ALL);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(_xmlParserCtxt *)>::~__value_func[abi:ne180100](void *a1)
{
  OSType v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *std::unique_ptr<_xmlParserCtxt,std::function<void ()(_xmlParserCtxt*)>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    uint64_t v4 = v2;
    uint64_t v3 = result[4];
    if (!v3) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v3 + 48))(v3, &v4);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<CA::ADMPackFormat>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(*(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::default_delete<std::string>::operator()[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  JUMPOUT(0x192FC8940);
}

uint64_t std::default_delete<CA::ADMLoudnessMetadata>::operator()[abi:ne180100](uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*(unsigned char *)(result + 88) && *(char *)(result + 87) < 0) {
      operator delete(*(void **)(result + 64));
    }
    if (*(unsigned char *)(v1 + 56) && *(char *)(v1 + 55) < 0) {
      operator delete(*(void **)(v1 + 32));
    }
    if (*(unsigned char *)(v1 + 24) && *(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    JUMPOUT(0x192FC8940);
  }
  return result;
}

void std::vector<std::vector<std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        CFIndex v6 = v4;
        std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::vector<std::optional<std::string>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        CFIndex v6 = v4;
        std::vector<std::optional<std::string>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::optional<std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((unsigned char *)v4 - 8) && *((char *)v4 - 9) < 0) {
          operator delete(*(v4 - 4));
        }
        v4 -= 4;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        CFIndex v6 = v4;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::deque<CA::ADMBuilder::Impl::ADMElement>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 512;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 1024;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      float v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char ***std::unique_ptr<CA::ADM>::reset[abi:ne180100](char ***result, char **a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    uint64_t v6 = (void **)(v2 + 33);
    std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v6);
    uint64_t v6 = (void **)(v2 + 30);
    std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v6);
    uint64_t v6 = (void **)(v2 + 27);
    std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v6);
    uint64_t v6 = (void **)(v2 + 24);
    std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v6);
    uint64_t v6 = (void **)(v2 + 21);
    std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v6);
    uint64_t v6 = (void **)(v2 + 18);
    std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v6);
    uint64_t v6 = (void **)(v2 + 15);
    std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v6);
    uint64_t v6 = (void **)(v2 + 12);
    std::vector<std::shared_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100](&v6);
    uint64_t v6 = (void **)(v2 + 9);
    std::vector<std::shared_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100](&v6);
    uint64_t v6 = (void **)(v2 + 6);
    std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v6);
    uint64_t v6 = (void **)(v2 + 3);
    std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v6);
    uint64_t v3 = *v2;
    if (*v2)
    {
      unint64_t v4 = v2[1];
      unint64_t v5 = *v2;
      if (v4 != v3)
      {
        do
          CA::ADMProgramme::~ADMProgramme((CA::ADMProgramme *)(v4 - 368));
        while (v4 != v3);
        unint64_t v5 = *v2;
      }
      v2[1] = v3;
      operator delete(v5);
    }
    JUMPOUT(0x192FC8940);
  }
  return result;
}

void CA::ADMProgramme::~ADMProgramme(CA::ADMProgramme *this)
{
  uint64_t v2 = (void **)((char *)this + 344);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((unsigned char *)this + 336))
  {
    uint64_t v2 = (void **)((char *)this + 312);
    std::vector<CA::ADMRenderer>::__destroy_vector::operator()[abi:ne180100](&v2);
    uint64_t v2 = (void **)((char *)this + 288);
    std::vector<std::shared_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100](&v2);
  }
  uint64_t v2 = (void **)((char *)this + 216);
  std::vector<CA::ADMLoudnessMetadata>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = (void **)((char *)this + 192);
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = (void **)((char *)this + 168);
  std::vector<CA::ADMLabel>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((unsigned char *)this + 88) && *((char *)this + 87) < 0) {
    operator delete(*((void **)this + 8));
  }
  if (*((unsigned char *)this + 56) && *((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((unsigned char *)this + 24))
  {
    if (*((char *)this + 23) < 0) {
      operator delete(*(void **)this);
    }
  }
}

void std::vector<CA::ADMLoudnessMetadata>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 144;
        std::__destroy_at[abi:ne180100]<CA::ADMLoudnessMetadata,0>(v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<CA::ADMLabel>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::__destroy_at[abi:ne180100]<CA::ADMLabel,0>(v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<CA::ADMLabel,0>(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(unsigned char *)(a1 + 24) && *(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<CA::ADMLoudnessMetadata,0>(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 88) && *(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(unsigned char *)(a1 + 56) && *(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(unsigned char *)(a1 + 24) && *(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::vector<CA::ADMRenderer>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 120;
        std::__destroy_at[abi:ne180100]<CA::ADMRenderer,0>(v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<CA::ADMRenderer,0>(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 96);
  std::vector<std::shared_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(unsigned char *)(a1 + 88) && *(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(unsigned char *)(a1 + 56) && *(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(unsigned char *)(a1 + 24) && *(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(void **__p)
{
  if (__p)
  {
    uint64_t v1 = __p;
    do
    {
      uint64_t v2 = (void **)*v1;
      if (*((char *)v1 + 39) < 0) {
        operator delete(v1[2]);
      }
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<CA::ADMPackFormat>>,0>(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void CA::ADMBuilder::Impl::xml_error_stub(CA::ADMBuilder::Impl *this, const char *a2, const char *a3, ...)
{
  va_start(va, a3);
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  va_copy(v8, va);
  unint64_t v5 = CA::ADMBuilder::Impl::log(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 136315650;
    float v10 = "ADMBuilder.cpp";
    __int16 v11 = 1024;
    int v12 = 1735;
    __int16 v13 = 2080;
    int v14 = p_p;
    _os_log_impl(&dword_18FEC0000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d XML error: %s", buf, 0x1Cu);
  }
  if (!*((_DWORD *)this + 158)) {
    *((_DWORD *)this + 158) = -66608;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void anonymous namespace'::format(std::string *this, const char *__format, char **a3)
{
  size_t v6 = vsnprintf(0, 0, __format, *a3) + 1;
  std::string::basic_string[abi:ne180100](this, v6, 0);
  if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    float v7 = this;
  }
  else {
    float v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  int v8 = vsnprintf((char *)v7, v6, __format, *a3);
  std::string::resize(this, v8, 0);
}

void sub_18FF7C820(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CA::ADMBuilder::Impl::log(CA::ADMBuilder::Impl *this)
{
  uint64_t v1 = &unk_1E9299000;
  {
    uint64_t v1 = (void *)&unk_1E9299000;
    if (v3)
    {
      CA::ADMBuilder::Impl::log(void)::log = (uint64_t)os_log_create("com.apple.coreaudio", "ADMBuilder");
      uint64_t v1 = (void *)&unk_1E9299000;
    }
  }
  return v1[49];
}

void CA::ADMBuilder::Impl::xml_warning_stub(CA::ADMBuilder::Impl *this, const char *a2, const char *a3, ...)
{
  va_start(va, a3);
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  va_copy(v7, va);
  uint64_t v4 = CA::ADMBuilder::Impl::log(this);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 136315650;
    uint64_t v9 = "ADMBuilder.cpp";
    __int16 v10 = 1024;
    int v11 = 1745;
    __int16 v12 = 2080;
    __int16 v13 = p_p;
    _os_log_impl(&dword_18FEC0000, v4, OS_LOG_TYPE_INFO, "%25s:%-5d XML warning: %s", buf, 0x1Cu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void CA::ADMBuilder::Impl::xml_end_element_stub(CA::ADMBuilder::Impl *this, void *a2, const unsigned __int8 *a3)
{
  uint64_t v111 = *MEMORY[0x1E4F143B8];
  if (!*((_DWORD *)this + 158))
  {
    uint64_t v5 = *((void *)this + 2);
    uint64_t v4 = *((void *)this + 3);
    uint64_t v6 = ((v4 - v5) << 7) - 1;
    if (v4 == v5) {
      uint64_t v6 = 0;
    }
    uint64_t v7 = *((void *)this + 6) - 1;
    unint64_t v8 = v7 + *((void *)this + 5);
    int v9 = *(_DWORD *)(*(void *)(v5 + ((v8 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v8 & 0x3FF));
    *((void *)this + 6) = v7;
    if (v6 - v8 >= 0x800)
    {
      operator delete(*(void **)(v4 - 8));
      *((void *)this + 3) -= 8;
    }
    switch(v9)
    {
      case 4:
        __int16 v10 = (long long *)*((void *)this + 78);
        uint64_t v11 = *(void *)(*(void *)(*(void *)this + 8) - 192);
        goto LABEL_95;
      case 5:
        uint64_t v19 = *((void *)this + 41);
        goto LABEL_114;
      case 7:
        uint64_t v20 = CA::ADMBuilder::Impl::parse_float((int)this, *((std::string **)this + 78));
        uint64_t v21 = *(void *)(*(void *)this + 8);
        *(unsigned char *)(v21 - 124) = BYTE4(v20);
        *(_DWORD *)(v21 - 128) = v20;
        goto LABEL_127;
      case 10:
        uint64_t v19 = *((void *)this + 44);
        goto LABEL_114;
      case 12:
        uint64_t v22 = *((void *)this + 47);
        goto LABEL_76;
      case 13:
        uint64_t v19 = *(void *)(*(void *)this + 8);
        goto LABEL_114;
      case 14:
        unint64_t v23 = *((void *)this + 6) + *((void *)this + 5) - 1;
        int v24 = *(_DWORD *)(*(void *)(*((void *)this + 2) + ((v23 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v23 & 0x3FF));
        if (v24 == 21)
        {
          uint64_t v25 = (long long **)(*(void *)(*(void *)(*(void *)this + 32) - 16) + 144);
        }
        else
        {
          if (v24 != 3) {
            goto LABEL_127;
          }
          uint64_t v25 = (long long **)(*(void *)(*(void *)this + 8) - 152);
        }
        std::vector<CA::ADMLoudnessMetadata>::push_back[abi:ne180100](v25, *((long long **)this + 77));
        uint64_t v101 = *((void *)this + 77);
        *((void *)this + 77) = 0;
        if (v101) {
          std::default_delete<CA::ADMLoudnessMetadata>::operator()[abi:ne180100](v101);
        }
        goto LABEL_127;
      case 15:
        uint64_t v26 = CA::ADMBuilder::Impl::parse_float((int)this, *((std::string **)this + 78));
        uint64_t v27 = *((void *)this + 77);
        *(_DWORD *)(v27 + 96) = v26;
        *(unsigned char *)(v27 + 100) = BYTE4(v26);
        goto LABEL_127;
      case 16:
        uint64_t v28 = CA::ADMBuilder::Impl::parse_float((int)this, *((std::string **)this + 78));
        uint64_t v29 = *((void *)this + 77);
        *(_DWORD *)(v29 + 104) = v28;
        *(unsigned char *)(v29 + 108) = BYTE4(v28);
        goto LABEL_127;
      case 17:
        uint64_t v30 = CA::ADMBuilder::Impl::parse_float((int)this, *((std::string **)this + 78));
        uint64_t v31 = *((void *)this + 77);
        *(_DWORD *)(v31 + 112) = v30;
        *(unsigned char *)(v31 + 116) = BYTE4(v30);
        goto LABEL_127;
      case 18:
        uint64_t v32 = CA::ADMBuilder::Impl::parse_float((int)this, *((std::string **)this + 78));
        uint64_t v33 = *((void *)this + 77);
        *(_DWORD *)(v33 + 120) = v32;
        *(unsigned char *)(v33 + 124) = BYTE4(v32);
        goto LABEL_127;
      case 19:
        uint64_t v34 = CA::ADMBuilder::Impl::parse_float((int)this, *((std::string **)this + 78));
        uint64_t v35 = *((void *)this + 77);
        *(_DWORD *)(v35 + 128) = v34;
        *(unsigned char *)(v35 + 132) = BYTE4(v34);
        goto LABEL_127;
      case 20:
        uint64_t v36 = CA::ADMBuilder::Impl::parse_float((int)this, *((std::string **)this + 78));
        uint64_t v37 = *((void *)this + 77);
        *(_DWORD *)(v37 + 136) = v36;
        *(unsigned char *)(v37 + 140) = BYTE4(v36);
        goto LABEL_127;
      case 22:
        __int16 v10 = (long long *)*((void *)this + 78);
        uint64_t v11 = *(void *)(*(void *)(*(void *)(*(void *)this + 32) - 16) + 104);
        goto LABEL_95;
      case 23:
        uint64_t v19 = *((void *)this + 8);
        goto LABEL_114;
      case 24:
        uint64_t v38 = *(void *)(*(void *)this + 32);
        unint64_t v39 = CA::ADMBuilder::Impl::parse_uint((uint64_t)this, *((std::string **)this + 78));
        if (!HIDWORD(v39)) {
          goto LABEL_127;
        }
        if (v39 == 2)
        {
          uint64_t v40 = *(void *)(v38 - 16);
          if (!*(unsigned char *)(v40 + 169) || *(unsigned char *)(v40 + 168) == 2)
          {
            __int16 v104 = 258;
            goto LABEL_168;
          }
          CFArrayRef v41 = CA::ADMBuilder::Impl::log((CA::ADMBuilder::Impl *)v39);
          if (!os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)) {
            goto LABEL_181;
          }
          std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, *(void *)(v38 - 16), "");
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          LODWORD(buf.__first_) = 136315650;
          *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__first_ + 4) = (std::__split_buffer<std::string>::pointer)"ADMBuilder.cpp";
          WORD2(buf.__begin_) = 1024;
          *(_DWORD *)((char *)&buf.__begin_ + 6) = 1497;
          WORD1(buf.__end_) = 2080;
          *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__end_ + 4) = p_p;
        }
        else
        {
          if (v39 != 1)
          {
            if (v39)
            {
              unint64_t v105 = CA::ADMBuilder::Impl::log((CA::ADMBuilder::Impl *)v39);
              if (os_log_type_enabled(v105, OS_LOG_TYPE_ERROR))
              {
                std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, *(void *)(v38 - 16), "");
                uint64_t v106 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                     ? &__p
                     : (std::string *)__p.__r_.__value_.__r.__words[0];
                LODWORD(buf.__first_) = 136315650;
                *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__first_ + 4) = (std::__split_buffer<std::string>::pointer)"ADMBuilder.cpp";
                WORD2(buf.__begin_) = 1024;
                *(_DWORD *)((char *)&buf.__begin_ + 6) = 1505;
                WORD1(buf.__end_) = 2080;
                *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__end_ + 4) = v106;
                _os_log_impl(&dword_18FEC0000, v105, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown dialogue type in content '%s'", (uint8_t *)&buf, 0x1Cu);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
              }
              int v70 = -66598;
              goto LABEL_182;
            }
            uint64_t v40 = *(void *)(v38 - 16);
            if (*(unsigned char *)(v40 + 169) && *(unsigned char *)(v40 + 168))
            {
              CFArrayRef v41 = CA::ADMBuilder::Impl::log((CA::ADMBuilder::Impl *)v39);
              if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
              {
                std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, *(void *)(v38 - 16), "");
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  __int16 v42 = &__p;
                }
                else {
                  __int16 v42 = (std::string *)__p.__r_.__value_.__r.__words[0];
                }
                LODWORD(buf.__first_) = 136315650;
                *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__first_ + 4) = (std::__split_buffer<std::string>::pointer)"ADMBuilder.cpp";
                WORD2(buf.__begin_) = 1024;
                *(_DWORD *)((char *)&buf.__begin_ + 6) = 1475;
                WORD1(buf.__end_) = 2080;
                *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__end_ + 4) = v42;
                goto LABEL_179;
              }
LABEL_181:
              int v70 = -66602;
LABEL_182:
              *((_DWORD *)this + 158) = v70;
LABEL_127:
              uint64_t v94 = *((void *)this + 78);
              if (v94)
              {
                *((void *)this + 78) = 0;
                std::default_delete<std::string>::operator()[abi:ne180100](v94);
              }
              return;
            }
            __int16 v104 = 256;
LABEL_168:
            *(_WORD *)(v40 + 168) = v104;
            goto LABEL_127;
          }
          uint64_t v40 = *(void *)(v38 - 16);
          if (!*(unsigned char *)(v40 + 169) || *(unsigned char *)(v40 + 168) == 1)
          {
            __int16 v104 = 257;
            goto LABEL_168;
          }
          CFArrayRef v41 = CA::ADMBuilder::Impl::log((CA::ADMBuilder::Impl *)v39);
          if (!os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)) {
            goto LABEL_181;
          }
          std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, *(void *)(v38 - 16), "");
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v108 = &__p;
          }
          else {
            unint64_t v108 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          LODWORD(buf.__first_) = 136315650;
          *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__first_ + 4) = (std::__split_buffer<std::string>::pointer)"ADMBuilder.cpp";
          WORD2(buf.__begin_) = 1024;
          *(_DWORD *)((char *)&buf.__begin_ + 6) = 1487;
          WORD1(buf.__end_) = 2080;
          *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__end_ + 4) = v108;
        }
LABEL_179:
        _os_log_impl(&dword_18FEC0000, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d Conflicting dialogue type in content '%s'", (uint8_t *)&buf, 0x1Cu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        goto LABEL_181;
      case 25:
        uint64_t v43 = *(void *)(*(void *)(*(void *)this + 32) - 16);
        float v44 = (long long *)*((void *)this + 78);
        unint64_t v45 = *(void *)(v43 + 184);
        unint64_t v46 = *(void *)(v43 + 192);
        if (v45 < v46)
        {
          long long v47 = *v44;
          *(void *)(v45 + 16) = *((void *)v44 + 2);
          *(_OWORD *)unint64_t v45 = v47;
          *((void *)v44 + 1) = 0;
          *((void *)v44 + 2) = 0;
          *(void *)float v44 = 0;
          unint64_t v48 = v45 + 24;
LABEL_152:
          *(void *)(v43 + 184) = v48;
          goto LABEL_127;
        }
        uint64_t v95 = *(void *)(v43 + 176);
        unint64_t v96 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v45 - v95) >> 3);
        unint64_t v97 = v96 + 1;
        if (v96 + 1 <= 0xAAAAAAAAAAAAAAALL)
        {
          unint64_t v98 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v46 - v95) >> 3);
          if (2 * v98 > v97) {
            unint64_t v97 = 2 * v98;
          }
          if (v98 >= 0x555555555555555) {
            unint64_t v99 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v99 = v97;
          }
          buf.__end_cap_.__value_ = (std::allocator<std::string> *)(v43 + 192);
          if (v99) {
            unint64_t v99 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v99);
          }
          else {
            uint64_t v100 = 0;
          }
          unint64_t v102 = (std::string *)(v99 + 24 * v96);
          buf.__first_ = (std::__split_buffer<std::string>::pointer)v99;
          buf.__begin_ = v102;
          buf.__end_cap_.__value_ = (std::string *)(v99 + 24 * v100);
          long long v103 = *v44;
          v102->__r_.__value_.__r.__words[2] = *((void *)v44 + 2);
          *(_OWORD *)&v102->__r_.__value_.__l.__data_ = v103;
          *((void *)v44 + 1) = 0;
          *((void *)v44 + 2) = 0;
          *(void *)float v44 = 0;
          buf.__end_ = v102 + 1;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)(v43 + 176), &buf);
          unint64_t v48 = *(void *)(v43 + 184);
          std::__split_buffer<std::string>::~__split_buffer(&buf);
          goto LABEL_152;
        }
        goto LABEL_183;
      case 27:
        uint64_t v19 = *((void *)this + 11);
        goto LABEL_114;
      case 28:
        uint64_t v19 = *((void *)this + 14);
        goto LABEL_114;
      case 29:
        __int16 v10 = (long long *)*((void *)this + 78);
        uint64_t v11 = *(void *)(*(void *)(*(void *)(*(void *)this + 56) - 16) + 200);
        goto LABEL_95;
      case 30:
        __int16 v10 = (long long *)*((void *)this + 78);
        uint64_t v11 = *(void *)(*(void *)(*(void *)(*(void *)this + 56) - 16) + 224);
        goto LABEL_95;
      case 31:
        uint64_t v19 = *((void *)this + 17);
        goto LABEL_114;
      case 32:
        uint64_t v19 = *((void *)this + 20);
        goto LABEL_114;
      case 34:
        *(_WORD *)(*(void *)(*(void *)(*(void *)this + 56) - 16) + 388) = CA::ADMBuilder::Impl::parse_BOOL((uint64_t)this, *((unsigned __int8 **)this + 78));
        goto LABEL_127;
      case 35:
        *(_WORD *)(*(void *)(*(void *)(*(void *)this + 56) - 16) + 418) = CA::ADMBuilder::Impl::parse_BOOL((uint64_t)this, *((unsigned __int8 **)this + 78));
        goto LABEL_127;
      case 37:
        __int16 v10 = (long long *)*((void *)this + 78);
        uint64_t v11 = *(void *)(*(void *)(*(void *)(*(void *)(*(void *)this + 56) - 16) + 432) - 152);
        goto LABEL_95;
      case 39:
        *(_WORD *)(*(void *)(*(void *)(*(void *)(*(void *)this + 56) - 16) + 432) - 36) = CA::ADMBuilder::Impl::parse_BOOL((uint64_t)this, *((unsigned __int8 **)this + 78));
        goto LABEL_127;
      case 40:
        *(_WORD *)(*(void *)(*(void *)(*(void *)(*(void *)this + 56) - 16) + 432) - 8) = CA::ADMBuilder::Impl::parse_BOOL((uint64_t)this, *((unsigned __int8 **)this + 78));
        goto LABEL_127;
      case 42:
        uint64_t v19 = *((void *)this + 23);
        goto LABEL_114;
      case 43:
        uint64_t v19 = *((void *)this + 26);
        goto LABEL_114;
      case 44:
        uint64_t v19 = *((void *)this + 29);
        goto LABEL_114;
      case 45:
        uint64_t v19 = *((void *)this + 32);
        goto LABEL_114;
      case 46:
        __int16 v12 = (long long *)*((void *)this + 78);
        uint64_t v13 = *((void *)this + 35);
        goto LABEL_111;
      case 47:
        __int16 v12 = (long long *)*((void *)this + 78);
        uint64_t v13 = *((void *)this + 38);
        goto LABEL_111;
      case 48:
        uint64_t v49 = CA::ADMBuilder::Impl::parse_float((int)this, *((std::string **)this + 78));
        uint64_t v50 = *(void *)(*(void *)(*(void *)this + 80) - 16);
        *(unsigned char *)(v50 + 188) = BYTE4(v49);
        *(_DWORD *)(v50 + 184) = v49;
        goto LABEL_127;
      case 49:
        __int16 v12 = (long long *)*((void *)this + 78);
        uint64_t v51 = *(void *)(*(void *)(*(void *)this + 80) - 16) + 272;
        goto LABEL_112;
      case 50:
        uint64_t v52 = CA::ADMBuilder::Impl::parse_float((int)this, *((std::string **)this + 78));
        uint64_t v53 = *(void *)(*(void *)(*(void *)this + 80) - 16);
        *(unsigned char *)(v53 + 308) = BYTE4(v52);
        *(_DWORD *)(v53 + 304) = v52;
        goto LABEL_127;
      case 51:
        *(_WORD *)(*(void *)(*(void *)(*(void *)this + 80) - 16) + 312) = CA::ADMBuilder::Impl::parse_BOOL((uint64_t)this, *((unsigned __int8 **)this + 78));
        goto LABEL_127;
      case 54:
        __int16 v12 = (long long *)*((void *)this + 78);
        uint64_t v51 = *(void *)(*(void *)(*(void *)this + 272) - 16) + 48;
        goto LABEL_112;
      case 55:
        __int16 v12 = (long long *)*((void *)this + 78);
        uint64_t v51 = *(void *)(*(void *)(*(void *)this + 272) - 16) + 80;
        goto LABEL_112;
      case 56:
        __int16 v12 = (long long *)*((void *)this + 78);
        uint64_t v51 = *(void *)(*(void *)(*(void *)this + 272) - 16) + 112;
        goto LABEL_112;
      case 57:
        __int16 v12 = (long long *)*((void *)this + 78);
        uint64_t v13 = *((void *)this + 68);
        goto LABEL_111;
      case 58:
        __int16 v12 = (long long *)*((void *)this + 78);
        uint64_t v13 = *((void *)this + 62);
        goto LABEL_111;
      case 59:
        __int16 v12 = (long long *)*((void *)this + 78);
        uint64_t v13 = *((void *)this + 65);
        goto LABEL_111;
      case 61:
        uint64_t v54 = CA::ADMBuilder::Impl::parse_float((int)this, *((std::string **)this + 78));
        uint64_t v55 = *(void *)(*(void *)(*(void *)this + 128) - 16);
        *(unsigned char *)(v55 + 132) = BYTE4(v54);
        *(_DWORD *)(v55 + 128) = v54;
        goto LABEL_127;
      case 62:
        uint64_t v56 = CA::ADMBuilder::Impl::parse_float((int)this, *((std::string **)this + 78));
        uint64_t v57 = *(void *)(*(void *)(*(void *)this + 128) - 16);
        *(unsigned char *)(v57 + 140) = BYTE4(v56);
        *(_DWORD *)(v57 + 136) = v56;
        goto LABEL_127;
      case 64:
        unint64_t v58 = CA::ADMBuilder::Impl::parse_uint((uint64_t)this, *((std::string **)this + 78));
        BOOL v59 = (_DWORD *)(*(void *)(*(void *)(*(void *)(*(void *)this + 128) - 16) + 152) - 372);
        *(unsigned char *)(*(void *)(*(void *)(*(void *)(*(void *)this + 128) - 16) + 152) - 368) = BYTE4(v58);
        goto LABEL_132;
      case 65:
        __int16 v60 = CA::ADMBuilder::Impl::parse_BOOL((uint64_t)this, *((unsigned __int8 **)this + 78));
        float v61 = (_WORD *)(*(void *)(*(void *)(*(void *)(*(void *)this + 128) - 16) + 152) - 364);
        goto LABEL_108;
      case 66:
        __int16 v12 = (long long *)*((void *)this + 78);
        uint64_t v51 = *(void *)(*(void *)(*(void *)(*(void *)this + 128) - 16) + 152) - 296;
        goto LABEL_112;
      case 67:
        __int16 v12 = (long long *)*((void *)this + 78);
        uint64_t v13 = *(void *)(*((void *)this + 71) - 16);
        goto LABEL_111;
      case 68:
        unsigned __int16 v14 = CA::ADMBuilder::Impl::parse_BOOL((uint64_t)this, *((unsigned __int8 **)this + 78));
        if (v14 >= 0x100u) {
          *(unsigned char *)(*(void *)(*(void *)(*(void *)(*(void *)this + 128) - 16) + 152) - 316) = v14;
        }
        goto LABEL_127;
      case 70:
        uint64_t v22 = *((void *)this + 74);
LABEL_76:
        uint64_t v19 = *(void *)(v22 - 16);
        goto LABEL_114;
      case 71:
        uint64_t v62 = CA::ADMBuilder::Impl::parse_float((int)this, *((std::string **)this + 78));
        uint64_t v63 = *(void *)(*(void *)(*(void *)(*(void *)this + 128) - 16) + 152);
        *(unsigned char *)(v63 - 172) = BYTE4(v62);
        *(_DWORD *)(v63 - 176) = v62;
        goto LABEL_127;
      case 72:
        uint64_t v15 = CA::ADMBuilder::Impl::parse_float((int)this, *((std::string **)this + 78));
        uint64_t v16 = *(void *)(*(void *)(*(void *)(*(void *)this + 128) - 16) + 152);
        *(unsigned char *)(v16 - 164) = BYTE4(v15);
        *(_DWORD *)(v16 - 168) = v15;
        goto LABEL_127;
      case 73:
        uint64_t v64 = CA::ADMBuilder::Impl::parse_float((int)this, *((std::string **)this + 78));
        uint64_t v65 = *(void *)(*(void *)(*(void *)(*(void *)this + 128) - 16) + 152);
        *(unsigned char *)(v65 - 156) = BYTE4(v64);
        *(_DWORD *)(v65 - 160) = v64;
        goto LABEL_127;
      case 74:
        BOOL v66 = (CA::ADMBuilder::Impl *)CA::ADMBuilder::Impl::parse_BOOL((uint64_t)this, *((unsigned __int8 **)this + 78));
        if (*((_DWORD *)this + 158)) {
          goto LABEL_127;
        }
        uint64_t v67 = *(void *)(*(void *)(*(void *)(*(void *)this + 128) - 16) + 152);
        if (!*(unsigned char *)(v67 - 151))
        {
          *(_WORD *)(v67 - 152) = (_WORD)v66;
          goto LABEL_127;
        }
        if ((unsigned __int16)v66 >= 0x100u && *(unsigned __int8 *)(v67 - 152) == v66) {
          goto LABEL_127;
        }
        __int16 v68 = CA::ADMBuilder::Impl::log(v66);
        if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
        {
          std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, *(void *)(*(void *)(*(void *)(*(void *)this + 128) - 16) + 152) - 480, "");
          uint64_t v69 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &__p
              : (std::string *)__p.__r_.__value_.__r.__words[0];
          LODWORD(buf.__first_) = 136315650;
          *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__first_ + 4) = (std::__split_buffer<std::string>::pointer)"ADMBuilder.cpp";
          WORD2(buf.__begin_) = 1024;
          *(_DWORD *)((char *)&buf.__begin_ + 6) = 1636;
          WORD1(buf.__end_) = 2080;
          *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__end_ + 4) = v69;
          _os_log_impl(&dword_18FEC0000, v68, OS_LOG_TYPE_ERROR, "%25s:%-5d Conflicting coordinate systems in block format '%s'", (uint8_t *)&buf, 0x1Cu);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        int v70 = -66603;
        goto LABEL_182;
      case 75:
        uint64_t v17 = CA::ADMBuilder::Impl::parse_float((int)this, *((std::string **)this + 78));
        uint64_t v18 = *(void *)(*(void *)(*(void *)(*(void *)this + 128) - 16) + 152);
        *(unsigned char *)(v18 - 144) = BYTE4(v17);
        *(_DWORD *)(v18 - 148) = v17;
        goto LABEL_127;
      case 76:
        unsigned __int16 v71 = CA::ADMBuilder::Impl::parse_BOOL((uint64_t)this, *((unsigned __int8 **)this + 78));
        if (v71 >= 0x100u) {
          *(unsigned char *)(*(void *)(*(void *)(*(void *)(*(void *)this + 128) - 16) + 152) - 140) = v71;
        }
        goto LABEL_127;
      case 77:
        unint64_t v72 = CA::ADMBuilder::Impl::parse_float((int)this, *((std::string **)this + 78));
        if (HIDWORD(v72)) {
          *(_DWORD *)(*(void *)(*(void *)(*(void *)(*(void *)this + 128) - 16) + 152) - 124) = v72;
        }
        goto LABEL_127;
      case 79:
        __int16 v10 = (long long *)*((void *)this + 78);
        uint64_t v11 = *(void *)(*(void *)(*(void *)(*(void *)(*(void *)this + 128) - 16) + 152) - 104);
LABEL_95:
        uint64_t v73 = v11 - 24;
        if (*(char *)(v11 - 1) < 0) {
          operator delete(*(void **)v73);
        }
        long long v74 = *v10;
        *(void *)(v73 + 16) = *((void *)v10 + 2);
        *(_OWORD *)uint64_t v73 = v74;
        *((unsigned char *)v10 + 23) = 0;
        *(unsigned char *)__int16 v10 = 0;
        goto LABEL_127;
      case 80:
        __int16 v12 = (long long *)*((void *)this + 78);
        uint64_t v51 = *(void *)(*(void *)(*(void *)(*(void *)this + 128) - 16) + 152) - 88;
        goto LABEL_112;
      case 81:
        uint64_t v75 = CA::ADMBuilder::Impl::parse_float((int)this, *((std::string **)this + 78));
        uint64_t v76 = *(void *)(*(void *)(*(void *)(*(void *)this + 128) - 16) + 152);
        if (*(unsigned __int8 *)(v76 - 52) == BYTE4(v75))
        {
          if (*(unsigned char *)(v76 - 52)) {
            *(_DWORD *)(v76 - 56) = *(float *)&v75;
          }
        }
        else if (*(unsigned char *)(v76 - 52))
        {
          *(unsigned char *)(v76 - 52) = 0;
        }
        else
        {
          *(_DWORD *)(v76 - 56) = *(float *)&v75;
          *(unsigned char *)(v76 - 52) = 1;
        }
        goto LABEL_127;
      case 82:
        uint64_t v77 = CA::ADMBuilder::Impl::parse_float((int)this, *((std::string **)this + 78));
        uint64_t v78 = *(void *)(*(void *)(*(void *)(*(void *)this + 128) - 16) + 152);
        if (*(unsigned __int8 *)(v78 - 44) == BYTE4(v77))
        {
          if (*(unsigned char *)(v78 - 44)) {
            *(_DWORD *)(v78 - 48) = (int)*(float *)&v77;
          }
        }
        else if (*(unsigned char *)(v78 - 44))
        {
          *(unsigned char *)(v78 - 44) = 0;
        }
        else
        {
          *(_DWORD *)(v78 - 48) = (int)*(float *)&v77;
          *(unsigned char *)(v78 - 44) = 1;
        }
        goto LABEL_127;
      case 83:
        __int16 v12 = (long long *)*((void *)this + 78);
        uint64_t v51 = *(void *)(*(void *)(*(void *)(*(void *)this + 128) - 16) + 152) - 40;
        goto LABEL_112;
      case 84:
        uint64_t v79 = CA::ADMBuilder::Impl::parse_float((int)this, *((std::string **)this + 78));
        uint64_t v80 = *(void *)(*(void *)(*(void *)(*(void *)this + 128) - 16) + 152);
        *(unsigned char *)(v80 - 4) = BYTE4(v79);
        *(_DWORD *)(v80 - 8) = v79;
        goto LABEL_127;
      case 85:
        __int16 v60 = CA::ADMBuilder::Impl::parse_BOOL((uint64_t)this, *((unsigned __int8 **)this + 78));
        float v61 = (_WORD *)(*(void *)(*(void *)(*(void *)(*(void *)this + 128) - 16) + 152) - 300);
LABEL_108:
        _WORD *v61 = v60;
        goto LABEL_127;
      case 87:
        __int16 v12 = (long long *)*((void *)this + 78);
        uint64_t v13 = *((void *)this + 59);
        goto LABEL_111;
      case 89:
        __int16 v12 = (long long *)*((void *)this + 78);
        uint64_t v13 = *((void *)this + 50);
        goto LABEL_111;
      case 90:
        __int16 v12 = (long long *)*((void *)this + 78);
        uint64_t v13 = *((void *)this + 53);
LABEL_111:
        uint64_t v51 = v13 - 32;
LABEL_112:
        std::optional<std::string>::operator=[abi:ne180100]<std::string,void>(v51, v12);
        goto LABEL_127;
      case 91:
        uint64_t v19 = *((void *)this + 56);
LABEL_114:
        long long v81 = (long long *)*((void *)this + 78);
        unint64_t v82 = *(void *)(v19 - 16);
        unint64_t v83 = *(void *)(v19 - 8);
        if (v82 >= v83)
        {
          uint64_t v86 = *(void *)(v19 - 24);
          unint64_t v87 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v82 - v86) >> 3);
          unint64_t v88 = v87 + 1;
          if (v87 + 1 > 0xAAAAAAAAAAAAAAALL) {
LABEL_183:
          }
            std::vector<float>::__throw_length_error[abi:ne180100]();
          unint64_t v89 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v83 - v86) >> 3);
          if (2 * v89 > v88) {
            unint64_t v88 = 2 * v89;
          }
          if (v89 >= 0x555555555555555) {
            unint64_t v90 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v90 = v88;
          }
          buf.__end_cap_.__value_ = (std::allocator<std::string> *)(v19 - 8);
          if (v90) {
            unint64_t v90 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v90);
          }
          else {
            uint64_t v91 = 0;
          }
          unint64_t v92 = (std::string *)(v90 + 24 * v87);
          buf.__first_ = (std::__split_buffer<std::string>::pointer)v90;
          buf.__begin_ = v92;
          buf.__end_cap_.__value_ = (std::string *)(v90 + 24 * v91);
          long long v93 = *v81;
          v92->__r_.__value_.__r.__words[2] = *((void *)v81 + 2);
          *(_OWORD *)&v92->__r_.__value_.__l.__data_ = v93;
          *((void *)v81 + 1) = 0;
          *((void *)v81 + 2) = 0;
          *(void *)long long v81 = 0;
          buf.__end_ = v92 + 1;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)(v19 - 24), &buf);
          unint64_t v85 = *(void *)(v19 - 16);
          std::__split_buffer<std::string>::~__split_buffer(&buf);
        }
        else
        {
          long long v84 = *v81;
          *(void *)(v82 + 16) = *((void *)v81 + 2);
          *(_OWORD *)unint64_t v82 = v84;
          *((void *)v81 + 1) = 0;
          *((void *)v81 + 2) = 0;
          *(void *)long long v81 = 0;
          unint64_t v85 = v82 + 24;
        }
        *(void *)(v19 - 16) = v85;
        goto LABEL_127;
      case 92:
        unint64_t v58 = CA::ADMBuilder::Impl::parse_float((int)this, *((std::string **)this + 78));
        if (HIDWORD(v58))
        {
          BOOL v59 = (_DWORD *)*((void *)this + 76);
LABEL_132:
          *BOOL v59 = v58;
        }
        goto LABEL_127;
      default:
        goto LABEL_127;
    }
  }
}

void std::vector<CA::ADMLoudnessMetadata>::push_back[abi:ne180100](long long **a1, long long *a2)
{
  unint64_t v4 = (unint64_t)a1[1];
  unint64_t v5 = (unint64_t)a1[2];
  if (v4 >= v5)
  {
    unint64_t v8 = 0x8E38E38E38E38E39 * ((uint64_t)(v4 - (void)*a1) >> 4);
    if (v8 + 1 > 0x1C71C71C71C71C7) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - (void)*a1) >> 4);
    uint64_t v10 = 2 * v9;
    if (2 * v9 <= v8 + 1) {
      uint64_t v10 = v8 + 1;
    }
    if (v9 >= 0xE38E38E38E38E3) {
      unint64_t v11 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11)
    {
      if (v11 > 0x1C71C71C71C71C7) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      __int16 v12 = (char *)operator new(144 * v11);
    }
    else
    {
      __int16 v12 = 0;
    }
    uint64_t v13 = (long long *)&v12[144 * v11];
    std::construct_at[abi:ne180100]<CA::ADMLoudnessMetadata,CA::ADMLoudnessMetadata,CA::ADMLoudnessMetadata*>((uint64_t)&v12[144 * v8], a2);
    uint64_t v7 = v14 + 9;
    uint64_t v16 = *a1;
    uint64_t v15 = a1[1];
    if (v15 == *a1)
    {
      *a1 = v14;
      a1[1] = v7;
      a1[2] = v13;
    }
    else
    {
      do
      {
        v15 -= 9;
        std::construct_at[abi:ne180100]<CA::ADMLoudnessMetadata,CA::ADMLoudnessMetadata,CA::ADMLoudnessMetadata*>((uint64_t)(v14 - 9), v15);
      }
      while (v15 != v16);
      uint64_t v15 = *a1;
      uint64_t v17 = (uint64_t)a1[1];
      *a1 = v14;
      a1[1] = v7;
      a1[2] = v13;
      while ((long long *)v17 != v15)
      {
        v17 -= 144;
        std::__destroy_at[abi:ne180100]<CA::ADMLoudnessMetadata,0>(v17);
      }
    }
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    std::construct_at[abi:ne180100]<CA::ADMLoudnessMetadata,CA::ADMLoudnessMetadata,CA::ADMLoudnessMetadata*>(v4, a2);
    uint64_t v7 = (long long *)(v6 + 144);
  }
  a1[1] = v7;
}

uint64_t CA::ADMBuilder::Impl::parse_float(int a1, std::string *__str)
{
  return COERCE_UNSIGNED_INT(std::stof(__str, 0)) | 0x100000000;
}

void sub_18FF7DB90(void *a1)
{
  __cxa_begin_catch(a1);
  *(_DWORD *)(v1 + 632) = -66607;
  __cxa_end_catch();
  JUMPOUT(0x18FF7DB7CLL);
}

uint64_t CA::ADMBuilder::Impl::parse_uint(uint64_t a1, std::string *__str)
{
  int v3 = std::stoi(__str, 0, 10);
  if (v3 < 0)
  {
    int v5 = 0;
    uint64_t v6 = 0;
    unsigned int v4 = 0;
    *(_DWORD *)(a1 + 632) = -66606;
  }
  else
  {
    unsigned int v4 = v3 & 0xFFFFFF00;
    int v5 = v3;
    uint64_t v6 = 0x100000000;
  }
  return v6 | v4 | v5;
}

void sub_18FF7DC14(void *a1)
{
  __cxa_begin_catch(a1);
  *(_DWORD *)(v1 + 632) = -66606;
  __cxa_end_catch();
  JUMPOUT(0x18FF7DC00);
}

void std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(std::string *a1, uint64_t a2, char *__s)
{
  if (*(unsigned char *)(a2 + 24))
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a1, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      a1->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a1, __s);
  }
}

uint64_t CA::ADMBuilder::Impl::parse_BOOL(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = a2[23];
  int v3 = (char)v2;
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *((void *)a2 + 1);
  }
  if (v2 == 1)
  {
    if (v3 >= 0) {
      unsigned int v4 = a2;
    }
    else {
      unsigned int v4 = *(unsigned __int8 **)a2;
    }
    int v5 = *v4;
    if (v5 == 48)
    {
      int v6 = 0;
      goto LABEL_12;
    }
    if (v5 == 49)
    {
      int v6 = 1;
LABEL_12:
      int v7 = 1;
      return v6 | (v7 << 8);
    }
  }
  int v6 = 0;
  int v7 = 0;
  *(_DWORD *)(a1 + 632) = -66605;
  return v6 | (v7 << 8);
}

uint64_t std::optional<std::string>::operator=[abi:ne180100]<std::string,void>(uint64_t a1, long long *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v4 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v4;
    *((unsigned char *)a2 + 23) = 0;
    *(unsigned char *)a2 = 0;
  }
  else
  {
    long long v5 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v5;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

__n128 std::construct_at[abi:ne180100]<CA::ADMLoudnessMetadata,CA::ADMLoudnessMetadata,CA::ADMLoudnessMetadata*>(uint64_t a1, long long *a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  if (*((unsigned char *)a2 + 24))
  {
    long long v2 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v2;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  *(unsigned char *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  if (*((unsigned char *)a2 + 56))
  {
    long long v3 = a2[2];
    *(void *)(a1 + 48) = *((void *)a2 + 6);
    *(_OWORD *)(a1 + 32) = v3;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 6) = 0;
    *((void *)a2 + 4) = 0;
    *(unsigned char *)(a1 + 56) = 1;
  }
  *(unsigned char *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 88) = 0;
  if (*((unsigned char *)a2 + 88))
  {
    long long v4 = a2[4];
    *(void *)(a1 + 80) = *((void *)a2 + 10);
    *(_OWORD *)(a1 + 64) = v4;
    *((void *)a2 + 9) = 0;
    *((void *)a2 + 10) = 0;
    *((void *)a2 + 8) = 0;
    *(unsigned char *)(a1 + 88) = 1;
  }
  __n128 result = (__n128)a2[6];
  long long v6 = a2[7];
  *(_OWORD *)(a1 + 125) = *(long long *)((char *)a2 + 125);
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v6;
  return result;
}

void CA::ADMBuilder::Impl::xml_characters_stub(CA::ADMBuilder::Impl *this, void *__src, const unsigned __int8 *a3)
{
  if (*((_DWORD *)this + 158)) {
    return;
  }
  if ((a3 & 0x80000000) != 0) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v5 = (int)a3;
  if (a3 >= 0x17)
  {
    uint64_t v7 = ((int)a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if (((int)a3 | 7) != 0x17) {
      uint64_t v7 = (int)a3 | 7;
    }
    uint64_t v8 = v7 + 1;
    p_dst = (std::string *)operator new(v7 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = (_BYTE)a3;
    p_dst = &__dst;
    if (!a3) {
      goto LABEL_10;
    }
  }
  memcpy(p_dst, __src, v5);
LABEL_10:
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  char v9 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  std::string::size_type v10 = __dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v11 = &__dst;
  }
  else {
    unint64_t v11 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __dst.__r_.__value_.__l.__size_;
  }
  uint64_t v13 = MEMORY[0x1E4F14390];
  if (size)
  {
    unsigned __int16 v14 = (std::string *)((char *)v11 + size);
    uint64_t v15 = v11;
    while (1)
    {
      unsigned int v16 = v15->__r_.__value_.__s.__data_[0];
      if (!((v16 & 0x80000000) != 0 ? __maskrune(v16, 0x4000uLL) : *(_DWORD *)(v13 + 4 * v16 + 60) & 0x4000)) {
        break;
      }
      uint64_t v15 = (std::string *)((char *)v15 + 1);
      if (!--size)
      {
        uint64_t v15 = v14;
        break;
      }
    }
    char v9 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    std::string::size_type v10 = __dst.__r_.__value_.__r.__words[0];
  }
  else
  {
    uint64_t v15 = v11;
  }
  if (v9 >= 0) {
    uint64_t v18 = &__dst;
  }
  else {
    uint64_t v18 = (std::string *)v10;
  }
  std::string::erase(&__dst, (char *)v11 - (char *)v18, (char *)v15 - (char *)v11);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v19 = (std::string *)((char *)&__dst + HIBYTE(__dst.__r_.__value_.__r.__words[2]));
  }
  else {
    uint64_t v19 = (std::string *)(__dst.__r_.__value_.__r.__words[0] + __dst.__r_.__value_.__l.__size_);
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v20 = &__dst;
  }
  else {
    uint64_t v20 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  while (v19 != v20)
  {
    unsigned int v22 = SHIBYTE(v19[-1].__r_.__value_.__r.__words[2]);
    uint64_t v19 = (std::string *)((char *)v19 - 1);
    unsigned int v21 = v22;
    if ((v22 & 0x80000000) != 0) {
      int v23 = __maskrune(v21, 0x4000uLL);
    }
    else {
      int v23 = *(_DWORD *)(v13 + 4 * v21 + 60) & 0x4000;
    }
    if (!v23)
    {
      uint64_t v20 = (std::string *)((char *)&v19->__r_.__value_.__l.__data_ + 1);
      break;
    }
  }
  int v24 = (char *)&__dst + HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    uint64_t v25 = &__dst;
  }
  else
  {
    int v24 = (char *)(__dst.__r_.__value_.__r.__words[0] + __dst.__r_.__value_.__l.__size_);
    uint64_t v25 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  std::string::erase(&__dst, (char *)v20 - (char *)v25, v24 - (char *)v20);
  uint64_t v26 = (std::string *)*((void *)this + 78);
  if (v26)
  {
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v27 = &__dst;
    }
    else {
      uint64_t v27 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v28 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v28 = __dst.__r_.__value_.__l.__size_;
    }
    std::string::append(v26, (const std::string::value_type *)v27, v28);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_18FF7E008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CA::ADMBuilder::Impl::xml_start_element_stub(CA::ADMBuilder::Impl *this, char *__s1, const unsigned __int8 **a3, const unsigned __int8 **a4)
{
  uint64_t v623 = *MEMORY[0x1E4F143B8];
  if (!*((_DWORD *)this + 158))
  {
    uint64_t v6 = *((void *)this + 6);
    if (v6)
    {
      int v8 = *(_DWORD *)(*(void *)(*((void *)this + 2)
                                 + (((unint64_t)(v6 + *((void *)this + 5) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                     + 4 * ((v6 + *((void *)this + 5) - 1) & 0x3FF));
      int v9 = 1;
      if (v8 > 32)
      {
        if (v8 <= 59)
        {
          int v10 = v8 - 33;
          switch(v10)
          {
            case 0:
              uint64_t v11 = *(void *)(*(void *)(*(void *)this + 56) - 16);
              if (!*(unsigned char *)(v11 + 372)) {
                goto LABEL_1278;
              }
              uint64_t v12 = v11 + 288;
              goto LABEL_106;
            case 1:
            case 2:
            case 4:
            case 6:
            case 7:
              goto LABEL_825;
            case 3:
              uint64_t v47 = *(void *)(*(void *)this + 56);
              uint64_t v48 = *(void *)(*(void *)(v47 - 16) + 432);
              if (!strcmp(__s1, "audioObjectLabel"))
              {
                CA::ADMBuilder::Impl::label_from_attributes(buf, a3);
                unint64_t v104 = *(void *)(v48 - 152);
                if (v104 >= *(void *)(v48 - 144))
                {
                  char v153 = std::vector<CA::ADMLabel>::__push_back_slow_path<CA::ADMLabel>((void **)(v48 - 160), (uint64_t)buf);
                  int v154 = buf[2].__r_.__value_.__s.__data_[7];
                  *(void *)(v48 - 152) = v153;
                  if (v154 < 0) {
                    operator delete((void *)buf[1].__r_.__value_.__l.__size_);
                  }
                }
                else
                {
                  *(unsigned char *)unint64_t v104 = 0;
                  *(unsigned char *)(v104 + 24) = 0;
                  if (buf[1].__r_.__value_.__s.__data_[0])
                  {
                    long long v105 = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
                    *(void *)(v104 + 16) = *((void *)&buf[0].__r_.__value_.__l + 2);
                    *(_OWORD *)unint64_t v104 = v105;
                    memset(buf, 0, 24);
                    *(unsigned char *)(v104 + 24) = 1;
                  }
                  long long v106 = *(_OWORD *)&buf[1].__r_.__value_.__r.__words[1];
                  *(void *)(v104 + 48) = buf[2].__r_.__value_.__l.__data_;
                  *(_OWORD *)(v104 + 32) = v106;
                  memset(&buf[1].__r_.__value_.__r.__words[1], 0, sizeof(std::string));
                  *(void *)(v48 - 152) = v104 + 56;
                }
                if (buf[1].__r_.__value_.__s.__data_[0] && SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(buf[0].__r_.__value_.__l.__data_);
                }
                operator new();
              }
              if (!strcmp(__s1, "audioObjectInteraction"))
              {
                CA::ADMBuilder::Impl::parse_interaction((CA::ADMBuilder::Impl *)buf, (const unsigned __int8 **)this, (const char **)a3);
                uint64_t v132 = (_OWORD *)(v48 - 136);
                if (*(unsigned char *)(v48 - 52))
                {
                  *(_OWORD *)(v48 - 104) = *(_OWORD *)&buf[1].__r_.__value_.__r.__words[1];
                  *(_OWORD *)(v48 - 88) = *(_OWORD *)&buf[2].__r_.__value_.__l.__data_;
                  *(_OWORD *)(v48 - 72) = *(_OWORD *)&buf[2].__r_.__value_.__r.__words[2];
                  *(_WORD *)(v48 - 56) = buf[3].__r_.__value_.__r.__words[1];
                  *uint64_t v132 = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
                  *(_OWORD *)(v48 - 120) = *(_OWORD *)&buf[0].__r_.__value_.__r.__words[2];
                }
                else
                {
                  *(_OWORD *)(v48 - 104) = *(_OWORD *)&buf[1].__r_.__value_.__r.__words[1];
                  *(_OWORD *)(v48 - 88) = *(_OWORD *)&buf[2].__r_.__value_.__l.__data_;
                  *(_OWORD *)(v48 - 72) = *(_OWORD *)&buf[2].__r_.__value_.__r.__words[2];
                  *(_DWORD *)(v48 - 56) = buf[3].__r_.__value_.__r.__words[1];
                  *uint64_t v132 = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
                  *(_OWORD *)(v48 - 120) = *(_OWORD *)&buf[0].__r_.__value_.__r.__words[2];
                  *(unsigned char *)(v48 - 52) = 1;
                }
                std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::clear((uint64_t)this + 800);
                int v9 = 38;
                goto LABEL_825;
              }
              if (!strcmp(__s1, "gain"))
              {
                if (!*(unsigned char *)(v48 - 40)) {
                  *(unsigned char *)(v48 - 40) = 1;
                }
                *(void *)(v48 - 48) = 0;
                if (a3)
                {
                  uint64_t v178 = *a3;
                  if (*a3)
                  {
                    unint64_t v179 = (unsigned __int8 **)(a3 + 2);
                    do
                    {
                      if (!strcmp((const char *)v178, "gainUnit"))
                      {
                        std::string::basic_string[abi:ne180100]<0>(buf, (char *)*(v179 - 1));
                        unsigned __int16 v180 = CA::ADMBuilder::Impl::parse_gain_unit((uint64_t)this, (uint64_t *)buf);
                        if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(buf[0].__r_.__value_.__l.__data_);
                        }
                        if (v180 >= 0x100u) {
                          *(unsigned char *)(v48 - 44) = v180;
                        }
                      }
                      unint64_t v181 = *v179;
                      v179 += 2;
                      uint64_t v178 = v181;
                    }
                    while (v181);
                  }
                }
                operator new();
              }
              if (!strcmp(__s1, "headLocked")) {
                operator new();
              }
              uint64_t v49 = (char *)strcmp(__s1, "positionOffset");
              if (v49)
              {
                if (!strcmp(__s1, "mute")) {
                  operator new();
                }
                goto LABEL_825;
              }
              *((void *)this + 76) = 0;
              if (!a3) {
                goto LABEL_798;
              }
              uint64_t v49 = (char *)*a3;
              if (!*a3) {
                goto LABEL_798;
              }
              int v228 = 0;
              unsigned __int8 v572 = 0;
              uint64_t v229 = (unsigned __int8 **)(a3 + 2);
              break;
            case 5:
              uint64_t v11 = *(void *)(*(void *)(*(void *)this + 56) - 16);
              uint64_t v50 = *(void *)(v11 + 432);
              if (!*(unsigned char *)(v50 - 52)) {
LABEL_1278:
              }
                std::__throw_bad_optional_access[abi:ne180100]();
              uint64_t v12 = v50 - 136;
LABEL_106:
              int v51 = CA::ADMBuilder::Impl::parse_interaction_subelement((uint64_t)this, v11, v12, __s1, (const char **)a3);
              goto LABEL_121;
            case 8:
              if (!strcmp(__s1, "audioChannelFormatIDRef")) {
                operator new();
              }
              if (!strcmp(__s1, "audioPackFormatIDRef")) {
                operator new();
              }
              if (!strcmp(__s1, "encodePackFormatIDRef")) {
                operator new();
              }
              if (!strcmp(__s1, "decodePackFormatIDRef")) {
                operator new();
              }
              if (!strcmp(__s1, "inputPackFormatIDRef")) {
                operator new();
              }
              if (!strcmp(__s1, "outputPackFormatIDRef")) {
                operator new();
              }
              if (!strcmp(__s1, "absoluteDistance")) {
                operator new();
              }
              if (!strcmp(__s1, "normalization")) {
                operator new();
              }
              if (!strcmp(__s1, "nfcRefDist")) {
                operator new();
              }
              if (!strcmp(__s1, "screenRef")) {
                operator new();
              }
              goto LABEL_825;
            default:
              if (v10 == 52)
              {
                if (!strcmp(__s1, "audioMXFLookUp"))
                {
                  uint64_t v130 = *(void *)(*(void *)this + 272);
                  memset(buf, 0, 96);
                  long long v131 = *(unsigned char **)(v130 - 16);
                  if (v131[144])
                  {
                    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)(v131 + 48), (__n128 *)buf);
                    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)(v131 + 80), (__n128 *)&buf[1].__r_.__value_.__r.__words[1]);
                    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)(v131 + 112), (__n128 *)&buf[2].__r_.__value_.__r.__words[2]);
                    if (buf[3].__r_.__value_.__s.__data_[16] && buf[3].__r_.__value_.__s.__data_[15] < 0) {
                      operator delete((void *)buf[2].__r_.__value_.__r.__words[2]);
                    }
                  }
                  else
                  {
                    v131[48] = 0;
                    v131[72] = 0;
                    v131[80] = 0;
                    v131[104] = 0;
                    v131[112] = 0;
                    v131[136] = 0;
                    v131[144] = 1;
                  }
                  if (buf[2].__r_.__value_.__s.__data_[8] && buf[2].__r_.__value_.__s.__data_[7] < 0) {
                    operator delete((void *)buf[1].__r_.__value_.__l.__size_);
                  }
                  if (buf[1].__r_.__value_.__s.__data_[0] && SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(buf[0].__r_.__value_.__l.__data_);
                  }
                  int v9 = 53;
                }
                else
                {
                  if (!strcmp(__s1, "audioTrackFormatIDRef")) {
                    operator new();
                  }
                  if (!strcmp(__s1, "audioChannelFormatIDRef")) {
                    operator new();
                  }
                  if (!strcmp(__s1, "audioPackFormatIDRef")) {
                    operator new();
                  }
                }
              }
              else if (v10 == 53)
              {
                if (!strcmp(__s1, "packageUIDRef")) {
                  operator new();
                }
                if (!strcmp(__s1, "trackIDRef")) {
                  operator new();
                }
                if (!strcmp(__s1, "channelIDRef")) {
                  operator new();
                }
              }
              goto LABEL_825;
          }
          while (1)
          {
            int64_t v230 = (char *)*(v229 - 1);
            if (!strcmp(v49, "coordinate"))
            {
              std::string::basic_string[abi:ne180100]<0>(buf, v230);
              v231 = (CA::ADMBuilder::Impl *)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)this + 840, (unsigned __int8 *)buf, (uint64_t)buf);
              char v232 = (char)v231;
              if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
                operator delete(buf[0].__r_.__value_.__l.__data_);
              }
              if ((v232 & 1) == 0)
              {
                std::string v233 = CA::ADMBuilder::Impl::log(v231);
                if (os_log_type_enabled(v233, OS_LOG_TYPE_ERROR))
                {
                  std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, *(void *)(v47 - 16), "");
                  uint64_t v234 = __p;
                  if (__p[23] < 0) {
                    uint64_t v234 = *(unsigned char **)__p;
                  }
                  LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                  *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseObject.cpp";
                  WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 252;
                  WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                  *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v234;
                  _os_log_impl(&dword_18FEC0000, v233, OS_LOG_TYPE_ERROR, "%25s:%-5d Multiple coordinates for position offset of object '%s'", (uint8_t *)buf, 0x1Cu);
                  if ((__p[23] & 0x80000000) != 0) {
                    operator delete(*(void **)__p);
                  }
                }
                *((_DWORD *)this + 158) = -66589;
                goto LABEL_604;
              }
              if (!strcmp(v230, "azimuth"))
              {
                unsigned __int8 v572 = 0;
                *(_DWORD *)(v48 - 32) = 0;
                int v228 = 1;
                *(unsigned char *)(v48 - 28) = 1;
                uint64_t v238 = v48 - 32;
LABEL_603:
                *((void *)this + 76) = v238;
                goto LABEL_604;
              }
              if (!strcmp(v230, "elevation"))
              {
                unsigned __int8 v572 = 0;
                *(_DWORD *)(v48 - 24) = 0;
                int v228 = 1;
                *(unsigned char *)(v48 - 20) = 1;
                uint64_t v238 = v48 - 24;
                goto LABEL_603;
              }
              if (!strcmp(v230, "distance"))
              {
                unsigned __int8 v572 = 0;
                *(_DWORD *)(v48 - 16) = 0;
                int v228 = 1;
                *(unsigned char *)(v48 - 12) = 1;
                uint64_t v238 = v48 - 16;
                goto LABEL_603;
              }
              if (!strcmp(v230, "X"))
              {
                *(_DWORD *)(v48 - 32) = 0;
                unsigned __int8 v572 = 1;
                *(unsigned char *)(v48 - 28) = 1;
                uint64_t v240 = v48 - 32;
              }
              else if (!strcmp(v230, "Y"))
              {
                *(_DWORD *)(v48 - 24) = 0;
                unsigned __int8 v572 = 1;
                *(unsigned char *)(v48 - 20) = 1;
                uint64_t v240 = v48 - 24;
              }
              else
              {
                uint64_t v235 = (CA::ADMBuilder::Impl *)strcmp(v230, "Z");
                if (v235)
                {
                  uint64_t v236 = CA::ADMBuilder::Impl::log(v235);
                  if (os_log_type_enabled(v236, OS_LOG_TYPE_ERROR))
                  {
                    std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, *(void *)(v47 - 16), "");
                    v237 = __p;
                    if (__p[23] < 0) {
                      v237 = *(unsigned char **)__p;
                    }
                    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseObject.cpp";
                    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 246;
                    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v237;
                    _os_log_impl(&dword_18FEC0000, v236, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown coordinate given for position offset of object '%s'", (uint8_t *)buf, 0x1Cu);
                    if ((__p[23] & 0x80000000) != 0) {
                      operator delete(*(void **)__p);
                    }
                  }
                  *((_DWORD *)this + 158) = -66593;
                  goto LABEL_604;
                }
                *(_DWORD *)(v48 - 16) = 0;
                unsigned __int8 v572 = 1;
                *(unsigned char *)(v48 - 12) = 1;
                uint64_t v240 = v48 - 16;
              }
              *((void *)this + 76) = v240;
              int v228 = 1;
            }
LABEL_604:
            int v239 = *v229;
            v229 += 2;
            uint64_t v49 = (char *)v239;
            if (!v239)
            {
              if (*((_DWORD *)this + 158)) {
                goto LABEL_686;
              }
              if (*((void *)this + 76))
              {
                if (v228)
                {
                  uint64_t v313 = *(void *)(v47 - 16);
                  if (*(unsigned char *)(v313 + 417))
                  {
                    if (*(unsigned __int8 *)(v313 + 416) != v572)
                    {
                      v314 = CA::ADMBuilder::Impl::log(0);
                      if (os_log_type_enabled(v314, OS_LOG_TYPE_ERROR))
                      {
                        std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, *(void *)(v47 - 16), "");
                        v315 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
                        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseObject.cpp";
                        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 269;
                        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v315;
                        _os_log_impl(&dword_18FEC0000, v314, OS_LOG_TYPE_ERROR, "%25s:%-5d Conflicting coordinate systems for position offset of object '%s'", (uint8_t *)buf, 0x1Cu);
                        if ((__p[23] & 0x80000000) != 0) {
                          operator delete(*(void **)__p);
                        }
                      }
                      int v199 = -66603;
                      goto LABEL_685;
                    }
LABEL_1099:
                    operator new();
                  }
                  *(_WORD *)(v313 + 416) = v572 | 0x100;
                  if (!*((_DWORD *)this + 158) && *((void *)this + 76)) {
                    goto LABEL_1099;
                  }
LABEL_686:
                  int v9 = 1;
                  goto LABEL_825;
                }
                uint64_t v475 = CA::ADMBuilder::Impl::log(0);
                if (os_log_type_enabled(v475, OS_LOG_TYPE_ERROR))
                {
                  std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, *(void *)(v47 - 16), "");
                  v476 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
                  LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                  *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseObject.cpp";
                  WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 278;
                  WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                  *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v476;
                  _os_log_impl(&dword_18FEC0000, v475, OS_LOG_TYPE_ERROR, "%25s:%-5d Ambiguous coordinate system for position offset of object '%s'", (uint8_t *)buf, 0x1Cu);
                  if ((__p[23] & 0x80000000) != 0) {
                    operator delete(*(void **)__p);
                  }
                }
                int v199 = -66597;
              }
              else
              {
LABEL_798:
                unint64_t v316 = CA::ADMBuilder::Impl::log((CA::ADMBuilder::Impl *)v49);
                if (os_log_type_enabled(v316, OS_LOG_TYPE_ERROR))
                {
                  std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, *(void *)(v47 - 16), "");
                  uint64_t v317 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
                  LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                  *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseObject.cpp";
                  WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 261;
                  WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                  *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v317;
                  _os_log_impl(&dword_18FEC0000, v316, OS_LOG_TYPE_ERROR, "%25s:%-5d Missing coordinate for position offset of object '%s'", (uint8_t *)buf, 0x1Cu);
                  if ((__p[23] & 0x80000000) != 0) {
                    operator delete(*(void **)__p);
                  }
                }
                int v199 = -66592;
              }
LABEL_685:
              *((_DWORD *)this + 158) = v199;
              goto LABEL_686;
            }
          }
        }
        if (v8 <= 77)
        {
          if (v8 != 60)
          {
            if (v8 != 63)
            {
              if (v8 != 69) {
                goto LABEL_825;
              }
              uint64_t v13 = *(void *)(*(void *)(*(void *)(*(void *)this + 128) - 16) + 152);
              if (strcmp(__s1, "coefficient")) {
                goto LABEL_825;
              }
              buf[0].__r_.__value_.__s.__data_[0] = 0;
              buf[0].__r_.__value_.__s.__data_[8] = 0;
              buf[0].__r_.__value_.__s.__data_[16] = 0;
              buf[1].__r_.__value_.__s.__data_[16] = 0;
              buf[2].__r_.__value_.__s.__data_[0] = 0;
              buf[2].__r_.__value_.__s.__data_[4] = 0;
              buf[2].__r_.__value_.__s.__data_[8] = 0;
              buf[3].__r_.__value_.__s.__data_[8] = 0;
              buf[3].__r_.__value_.__s.__data_[16] = 0;
              buf[3].__r_.__value_.__s.__data_[20] = 0;
              buf[4].__r_.__value_.__s.__data_[0] = 0;
              LOBYTE(v582) = 0;
              *((void *)&v582 + 1) = 0;
              *(void *)&long long v583 = 0;
              if (!a3 || (unsigned __int16 v14 = *a3) == 0)
              {
LABEL_44:
                uint64_t v26 = *(__n128 **)(v13 - 192);
                unint64_t v27 = *(void *)(v13 - 184);
                if ((unint64_t)v26 >= v27)
                {
                  uint64_t v159 = *(void *)(v13 - 200);
                  unint64_t v160 = 0x8E38E38E38E38E39 * (((uint64_t)v26 - v159) >> 4);
                  if (v160 + 1 > 0x1C71C71C71C71C7) {
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  }
                  unint64_t v161 = 0x8E38E38E38E38E39 * ((uint64_t)(v27 - v159) >> 4);
                  uint64_t v162 = 2 * v161;
                  if (2 * v161 <= v160 + 1) {
                    uint64_t v162 = v160 + 1;
                  }
                  if (v161 >= 0xE38E38E38E38E3) {
                    unint64_t v163 = 0x1C71C71C71C71C7;
                  }
                  else {
                    unint64_t v163 = v162;
                  }
                  if (v163)
                  {
                    unint64_t v165 = (__n128 *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ADMMatrixCoefficient>>(v163);
                  }
                  else
                  {
                    unint64_t v165 = 0;
                    uint64_t v164 = 0;
                  }
                  uint64_t v213 = &v165[9 * v164];
                  std::construct_at[abi:ne180100]<CA::ADMMatrixCoefficient,CA::ADMMatrixCoefficient,CA::ADMMatrixCoefficient*>(&v165[9 * v160], (uint64_t)buf);
                  uint64_t v29 = v214 + 144;
                  uint64_t v216 = *(char **)(v13 - 200);
                  BOOL v215 = *(char **)(v13 - 192);
                  if (v215 == v216)
                  {
                    *(void *)(v13 - 200) = v214;
                    *(void *)(v13 - 192) = v29;
                    *(void *)(v13 - 184) = v213;
                  }
                  else
                  {
                    do
                    {
                      v215 -= 144;
                      std::construct_at[abi:ne180100]<CA::ADMMatrixCoefficient,CA::ADMMatrixCoefficient,CA::ADMMatrixCoefficient*>((__n128 *)(v214 - 144), (uint64_t)v215);
                    }
                    while (v215 != v216);
                    uint64_t v217 = *(char **)(v13 - 200);
                    BOOL v215 = *(char **)(v13 - 192);
                    *(void *)(v13 - 200) = v214;
                    *(void *)(v13 - 192) = v29;
                    *(void *)(v13 - 184) = v213;
                    if (v215 != v217)
                    {
                      do
                      {
                        v215 -= 144;
                        std::__destroy_at[abi:ne180100]<CA::ADMMatrixCoefficient,0>((uint64_t)v215);
                      }
                      while (v215 != v217);
                      BOOL v215 = v217;
                    }
                  }
                  if (v215) {
                    operator delete(v215);
                  }
                }
                else
                {
                  std::construct_at[abi:ne180100]<CA::ADMMatrixCoefficient,CA::ADMMatrixCoefficient,CA::ADMMatrixCoefficient*>(v26, (uint64_t)buf);
                  uint64_t v29 = v28 + 144;
                  *(void *)(v13 - 192) = v28 + 144;
                }
                *(void *)(v13 - 192) = v29;
                operator new();
              }
              uint64_t v15 = (unsigned __int8 **)(a3 + 2);
              while (1)
              {
                unsigned int v16 = (char *)*(v15 - 1);
                if (!strcmp((const char *)v14, "gainUnit"))
                {
                  if (!buf[0].__r_.__value_.__s.__data_[8])
                  {
                    buf[0].__r_.__value_.__s.__data_[8] = 1;
                    buf[0].__r_.__value_.__r.__words[0] = 1065353216;
                  }
                  std::string::basic_string[abi:ne180100]<0>(__p, v16);
                  unsigned __int16 v21 = CA::ADMBuilder::Impl::parse_gain_unit((uint64_t)this, (uint64_t *)__p);
                  if ((__p[23] & 0x80000000) != 0) {
                    operator delete(*(void **)__p);
                  }
                  if (v21 >= 0x100u) {
                    buf[0].__r_.__value_.__s.__data_[4] = v21;
                  }
                  goto LABEL_43;
                }
                if (!strcmp((const char *)v14, "gain"))
                {
                  if (!buf[0].__r_.__value_.__s.__data_[8])
                  {
                    buf[0].__r_.__value_.__s.__data_[8] = 1;
                    buf[0].__r_.__value_.__r.__words[0] = 0;
                  }
                  std::string::basic_string[abi:ne180100]<0>(__p, v16);
                  unint64_t v22 = CA::ADMBuilder::Impl::parse_float((int)this, (std::string *)__p);
                  if ((__p[23] & 0x80000000) != 0) {
                    operator delete(*(void **)__p);
                  }
                  if (HIDWORD(v22)) {
                    LODWORD(buf[0].__r_.__value_.__l.__data_) = v22;
                  }
                  goto LABEL_43;
                }
                int v17 = strcmp((const char *)v14, "gainVar");
                uint64_t v18 = (std::string *)&buf[0].__r_.__value_.__r.__words[2];
                if (!v17) {
                  goto LABEL_26;
                }
                if (!strcmp((const char *)v14, "phase"))
                {
                  std::string::basic_string[abi:ne180100]<0>(__p, v16);
                  uint64_t v23 = CA::ADMBuilder::Impl::parse_float((int)this, (std::string *)__p);
                  LODWORD(buf[2].__r_.__value_.__l.__data_) = v23;
                  buf[2].__r_.__value_.__s.__data_[4] = BYTE4(v23);
                  goto LABEL_41;
                }
                int v19 = strcmp((const char *)v14, "phaseVar");
                uint64_t v18 = (std::string *)&buf[2].__r_.__value_.__r.__words[1];
                if (!v19) {
                  goto LABEL_26;
                }
                if (!strcmp((const char *)v14, "delay"))
                {
                  std::string::basic_string[abi:ne180100]<0>(__p, v16);
                  uint64_t v24 = CA::ADMBuilder::Impl::parse_float((int)this, (std::string *)__p);
                  LODWORD(buf[3].__r_.__value_.__r.__words[2]) = v24;
                  buf[3].__r_.__value_.__s.__data_[20] = BYTE4(v24);
LABEL_41:
                  if ((__p[23] & 0x80000000) != 0) {
                    operator delete(*(void **)__p);
                  }
                  goto LABEL_43;
                }
                int v20 = strcmp((const char *)v14, "delayVar");
                uint64_t v18 = &buf[4];
                if (!v20) {
LABEL_26:
                }
                  std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>(v18, v16);
LABEL_43:
                uint64_t v25 = *v15;
                v15 += 2;
                unsigned __int16 v14 = v25;
                if (!v25) {
                  goto LABEL_44;
                }
              }
            }
            uint64_t v61 = *(void *)(*(void *)(*(void *)(*(void *)this + 128) - 16) + 152);
            uint64_t v62 = (CA::ADMBuilder::Impl *)strcmp(__s1, "gain");
            if (!v62)
            {
              if (!*(unsigned char *)(v61 - 376))
              {
                *(unsigned char *)(v61 - 376) = 1;
                *(void *)(v61 - 384) = 0;
                if (a3)
                {
                  uint64_t v183 = *a3;
                  if (*a3)
                  {
                    uint64_t v184 = (unsigned __int8 **)(a3 + 2);
                    do
                    {
                      if (!strcmp((const char *)v183, "gainUnit"))
                      {
                        std::string::basic_string[abi:ne180100]<0>(buf, (char *)*(v184 - 1));
                        unsigned __int16 v185 = CA::ADMBuilder::Impl::parse_gain_unit((uint64_t)this, (uint64_t *)buf);
                        if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(buf[0].__r_.__value_.__l.__data_);
                        }
                        if (v185 >= 0x100u) {
                          *(unsigned char *)(v61 - 380) = v185;
                        }
                      }
                      unsigned int v186 = *v184;
                      v184 += 2;
                      uint64_t v183 = v186;
                    }
                    while (v186);
                  }
                }
                operator new();
              }
              uint64_t v121 = CA::ADMBuilder::Impl::log(v62);
              if (!os_log_type_enabled(v121, OS_LOG_TYPE_ERROR)) {
                goto LABEL_684;
              }
              std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, v61 - 480, "");
              if (__p[23] >= 0) {
                BOOL v122 = __p;
              }
              else {
                BOOL v122 = *(unsigned char **)__p;
              }
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseBlockFormat.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 19;
              WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
              *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v122;
              unint64_t v123 = "%25s:%-5d Multiple importance elements for block format '%s'";
              goto LABEL_682;
            }
            uint64_t v63 = (CA::ADMBuilder::Impl *)strcmp(__s1, "importance");
            if (!v63)
            {
              if (!*(unsigned char *)(v61 - 368)) {
                operator new();
              }
              uint64_t v121 = CA::ADMBuilder::Impl::log(v63);
              if (!os_log_type_enabled(v121, OS_LOG_TYPE_ERROR)) {
                goto LABEL_684;
              }
              std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, v61 - 480, "");
              if (__p[23] >= 0) {
                uint64_t v141 = __p;
              }
              else {
                uint64_t v141 = *(unsigned char **)__p;
              }
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseBlockFormat.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 43;
              WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
              *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v141;
              unint64_t v123 = "%25s:%-5d Multiple importance elements for block format '%s'";
              goto LABEL_682;
            }
            uint64_t v64 = (CA::ADMBuilder::Impl *)strcmp(__s1, "headLocked");
            if (!v64)
            {
              if (!*(unsigned char *)(v61 - 363)) {
                operator new();
              }
              uint64_t v121 = CA::ADMBuilder::Impl::log(v64);
              if (!os_log_type_enabled(v121, OS_LOG_TYPE_ERROR)) {
                goto LABEL_684;
              }
              std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, v61 - 480, "");
              if (__p[23] >= 0) {
                uint64_t v182 = __p;
              }
              else {
                uint64_t v182 = *(unsigned char **)__p;
              }
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseBlockFormat.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 52;
              WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
              *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v182;
              unint64_t v123 = "%25s:%-5d Multiple headLocked elements for block format '%s'";
              goto LABEL_682;
            }
            uint64_t v65 = (CA::ADMBuilder::Impl *)strcmp(__s1, "headphoneVirtualise");
            if (v65)
            {
              BOOL v66 = (CA::ADMBuilder::Impl *)strcmp(__s1, "speakerLabel");
              if (!v66)
              {
                if (!*(unsigned char *)(v61 - 272)) {
                  operator new();
                }
                uint64_t v121 = CA::ADMBuilder::Impl::log(v66);
                if (!os_log_type_enabled(v121, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_684;
                }
                std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, v61 - 480, "");
                if (__p[23] >= 0) {
                  v246 = __p;
                }
                else {
                  v246 = *(unsigned char **)__p;
                }
                LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseBlockFormat.cpp";
                WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 83;
                WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v246;
                unint64_t v123 = "%25s:%-5d Multiple speaker label elements for block format '%s'";
                goto LABEL_682;
              }
              uint64_t v67 = (std::string *)strcmp(__s1, "position");
              if (!v67)
              {
                *((void *)this + 76) = 0;
                memset(&v579, 0, sizeof(v579));
                memset(&v578, 0, sizeof(v578));
                buf[0].__r_.__value_.__s.__data_[0] = 0;
                buf[1].__r_.__value_.__s.__data_[0] = 0;
                if (!a3) {
                  goto LABEL_1033;
                }
                v267 = *a3;
                if (!*a3) {
                  goto LABEL_1033;
                }
                LODWORD(v268) = 0;
                int v566 = 0;
                int v573 = 0;
                LODWORD(v269) = 0;
                v270 = (unsigned __int8 **)(a3 + 2);
                while (1)
                {
                  unint64_t v271 = (char *)*(v270 - 1);
                  if (!strcmp((const char *)v267, "bound"))
                  {
                    std::string::basic_string[abi:ne180100]<0>(__p, v271);
                    uint64_t v272 = (CA::ADMBuilder::Impl *)CA::ADMBuilder::Impl::parse_bound((uint64_t)this, (unsigned __int16 *)__p);
                    v269 = v272;
                    if ((__p[23] & 0x80000000) != 0) {
                      operator delete(*(void **)__p);
                    }
                    if (!((unint64_t)v269 >> 32))
                    {
                      uint64_t v453 = CA::ADMBuilder::Impl::log(v272);
                      uint64_t v67 = (std::string *)os_log_type_enabled(v453, OS_LOG_TYPE_ERROR);
                      if (v67)
                      {
                        std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&v577, v61 - 480, "");
                        uint64_t v454 = (v577.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                             ? &v577
                             : (std::string *)v577.__r_.__value_.__r.__words[0];
                        *(_DWORD *)std::string __p = 136315650;
                        *(void *)&__p[4] = "ADMBuilderParseBlockFormat.cpp";
                        *(_WORD *)&__p[12] = 1024;
                        *(_DWORD *)&__p[14] = 103;
                        *(_WORD *)&__p[18] = 2080;
                        *(void *)&__p[20] = v454;
                        _os_log_impl(&dword_18FEC0000, v453, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown bound for position of block format '%s'", __p, 0x1Cu);
                        if (SHIBYTE(v577.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(v577.__r_.__value_.__l.__data_);
                        }
                      }
                      *((_DWORD *)this + 158) = -66596;
                      int v573 = BYTE4(v269);
LABEL_979:
                      if (v566)
                      {
                        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)__p, (const void **)&v579.__r_.__value_.__l.__data_, (const void **)&v578.__r_.__value_.__l.__data_);
                        uint64_t v455 = (CA::ADMBuilder::Impl *)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)this + 800, __p, (uint64_t)__p);
                        char v456 = (char)v455;
                        if ((__p[23] & 0x80000000) != 0) {
                          operator delete(*(void **)__p);
                        }
                        if ((v456 & 1) == 0)
                        {
                          uint64_t v457 = CA::ADMBuilder::Impl::log(v455);
                          if (os_log_type_enabled(v457, OS_LOG_TYPE_ERROR))
                          {
                            std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&v577, v61 - 480, "");
                            uint64_t v458 = (v577.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                                 ? &v577
                                 : (std::string *)v577.__r_.__value_.__r.__words[0];
                            *(_DWORD *)std::string __p = 136315650;
                            *(void *)&__p[4] = "ADMBuilderParseBlockFormat.cpp";
                            *(_WORD *)&__p[12] = 1024;
                            *(_DWORD *)&__p[14] = 244;
                            *(_WORD *)&__p[18] = 2080;
                            *(void *)&__p[20] = v458;
                            _os_log_impl(&dword_18FEC0000, v457, OS_LOG_TYPE_ERROR, "%25s:%-5d Multiple coordinates for position of block format '%s'", __p, 0x1Cu);
                            if (SHIBYTE(v577.__r_.__value_.__r.__words[2]) < 0) {
                              operator delete(v577.__r_.__value_.__l.__data_);
                            }
                          }
                          int v459 = -66589;
                          goto LABEL_1041;
                        }
                        unsigned int v460 = v268 - 3;
                        if (*(unsigned char *)(v61 - 151))
                        {
                          if (*(unsigned char *)(v61 - 152) != v460 < 3)
                          {
                            v461 = CA::ADMBuilder::Impl::log(v455);
                            if (os_log_type_enabled(v461, OS_LOG_TYPE_ERROR))
                            {
                              std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&v577, v61 - 480, "");
                              uint64_t v462 = (v577.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                                   ? &v577
                                   : (std::string *)v577.__r_.__value_.__r.__words[0];
                              *(_DWORD *)std::string __p = 136315650;
                              *(void *)&__p[4] = "ADMBuilderParseBlockFormat.cpp";
                              *(_WORD *)&__p[12] = 1024;
                              *(_DWORD *)&__p[14] = 132;
                              *(_WORD *)&__p[18] = 2080;
                              *(void *)&__p[20] = v462;
                              _os_log_impl(&dword_18FEC0000, v461, OS_LOG_TYPE_ERROR, "%25s:%-5d Conflicting coordinate systems for position of block format '%s'", __p, 0x1Cu);
                              if (SHIBYTE(v577.__r_.__value_.__r.__words[2]) < 0) {
                                operator delete(v577.__r_.__value_.__l.__data_);
                              }
                            }
                            *((_DWORD *)this + 158) = -66603;
                          }
                        }
                        else
                        {
                          *(_WORD *)(v61 - 152) = (v460 < 3) | 0x100;
                        }
                        if (v573)
                        {
                          if (v269 != 1)
                          {
                            if (!v269 && v268 <= 5)
                            {
                              if (((1 << (char)v268) & 9) != 0)
                              {
                                *(_DWORD *)(v61 - 240) = 0;
                                uint64_t v477 = v61 - 240;
                              }
                              else if (((1 << (char)v268) & 0x12) != 0)
                              {
                                *(_DWORD *)(v61 - 232) = 0;
                                uint64_t v477 = v61 - 232;
                              }
                              else
                              {
                                *(_DWORD *)(v61 - 224) = 0;
                                uint64_t v477 = v61 - 224;
                              }
                              goto LABEL_1192;
                            }
LABEL_1268:
                            operator new();
                          }
                          if (v268 > 5) {
                            goto LABEL_1268;
                          }
                          if (((1 << (char)v268) & 9) != 0)
                          {
                            uint64_t v512 = v61 - 264;
                            *(_DWORD *)(v61 - 264) = 0;
                            v513 = (unsigned char *)(v61 - 260);
                          }
                          else
                          {
                            if (((1 << (char)v268) & 0x12) != 0)
                            {
                              *(_DWORD *)(v61 - 256) = 0;
                              uint64_t v477 = v61 - 256;
                            }
                            else
                            {
                              *(_DWORD *)(v61 - 248) = 0;
                              uint64_t v477 = v61 - 248;
                            }
LABEL_1192:
                            v513 = (unsigned char *)(v477 + 4);
                            uint64_t v512 = v477;
                          }
LABEL_1267:
                          unsigned char *v513 = 1;
                          *((void *)this + 76) = v512;
                          goto LABEL_1268;
                        }
                        if (v268 > 5) {
                          goto LABEL_1268;
                        }
                        if (((1 << (char)v268) & 9) == 0)
                        {
                          if (((1 << (char)v268) & 0x12) == 0)
                          {
                            uint64_t v512 = v61 - 328;
                            *(_DWORD *)(v61 - 328) = 0;
                            v513 = (unsigned char *)(v61 - 324);
                            goto LABEL_1267;
                          }
                          if (buf[1].__r_.__value_.__s.__data_[0])
                          {
                            std::string::size_type size = HIBYTE(buf[0].__r_.__value_.__r.__words[2]);
                            if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                              std::string::size_type size = buf[0].__r_.__value_.__l.__size_;
                            }
                            if (size != 3) {
                              goto LABEL_1077;
                            }
                            v479 = buf;
                            if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                              v479 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
                            }
                            int data_low = LOWORD(v479->__r_.__value_.__l.__data_);
                            int v481 = v479->__r_.__value_.__s.__data_[2];
                            if (data_low == 28532 && v481 == 112)
                            {
                              uint64_t v488 = (__int16 *)(v61 - 320);
                              if (!*(unsigned char *)(v61 - 319) || *(unsigned char *)(v61 - 320))
                              {
                                if (*(unsigned char *)(v61 - 319) && *(unsigned char *)(v61 - 320) == 1) {
                                  __int16 v489 = 261;
                                }
                                else {
                                  __int16 v489 = 258;
                                }
                              }
                              else
                              {
                                __int16 v489 = 260;
                              }
                            }
                            else
                            {
LABEL_1077:
                              std::string::size_type v483 = HIBYTE(buf[0].__r_.__value_.__r.__words[2]);
                              if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                                std::string::size_type v483 = buf[0].__r_.__value_.__l.__size_;
                              }
                              if (v483 != 6) {
                                goto LABEL_1266;
                              }
                              v484 = buf;
                              if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                                v484 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
                              }
                              int data = (int)v484->__r_.__value_.__l.__data_;
                              int v486 = WORD2(v484->__r_.__value_.__r.__words[0]);
                              if (data != 1953787746 || v486 != 28015) {
                                goto LABEL_1266;
                              }
                              uint64_t v488 = (__int16 *)(v61 - 320);
                              if (!*(unsigned char *)(v61 - 319) || *(unsigned char *)(v61 - 320))
                              {
                                if (*(unsigned char *)(v61 - 319) && *(unsigned char *)(v61 - 320) == 1) {
                                  __int16 v489 = 263;
                                }
                                else {
                                  __int16 v489 = 259;
                                }
                              }
                              else
                              {
                                __int16 v489 = 262;
                              }
                            }
                            *uint64_t v488 = v489;
                          }
LABEL_1266:
                          uint64_t v512 = v61 - 336;
                          *(_DWORD *)(v61 - 336) = 0;
                          v513 = (unsigned char *)(v61 - 332);
                          goto LABEL_1267;
                        }
                        if (buf[1].__r_.__value_.__s.__data_[0])
                        {
                          std::string::size_type v502 = HIBYTE(buf[0].__r_.__value_.__r.__words[2]);
                          if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                            std::string::size_type v502 = buf[0].__r_.__value_.__l.__size_;
                          }
                          if (v502 != 4) {
                            goto LABEL_1146;
                          }
                          v503 = buf;
                          if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                            v503 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
                          }
                          if (LODWORD(v503->__r_.__value_.__l.__data_) == 1952867692)
                          {
                            v510 = (__int16 *)(v61 - 320);
                            int v547 = *(unsigned __int8 *)(v61 - 320);
                            if (*(unsigned char *)(v61 - 319) && v547 == 2)
                            {
                              __int16 v511 = 260;
                            }
                            else if (*(unsigned char *)(v61 - 319) && v547 == 3)
                            {
                              __int16 v511 = 262;
                            }
                            else
                            {
                              __int16 v511 = 256;
                            }
                          }
                          else
                          {
LABEL_1146:
                            std::string::size_type v504 = HIBYTE(buf[0].__r_.__value_.__r.__words[2]);
                            if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                              std::string::size_type v504 = buf[0].__r_.__value_.__l.__size_;
                            }
                            if (v504 != 5) {
                              goto LABEL_1263;
                            }
                            v505 = buf;
                            if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                              v505 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
                            }
                            int v506 = (int)v505->__r_.__value_.__l.__data_;
                            int v507 = v505->__r_.__value_.__s.__data_[4];
                            if (v506 != 1751607666 || v507 != 116) {
                              goto LABEL_1263;
                            }
                            v510 = (__int16 *)(v61 - 320);
                            int v509 = *(unsigned __int8 *)(v61 - 320);
                            if (*(unsigned char *)(v61 - 319) && v509 == 2)
                            {
                              __int16 v511 = 261;
                            }
                            else if (*(unsigned char *)(v61 - 319) && v509 == 3)
                            {
                              __int16 v511 = 263;
                            }
                            else
                            {
                              __int16 v511 = 257;
                            }
                          }
                          __int16 *v510 = v511;
                        }
LABEL_1263:
                        uint64_t v512 = v61 - 344;
                        *(_DWORD *)(v61 - 344) = 0;
                        v513 = (unsigned char *)(v61 - 340);
                        goto LABEL_1267;
                      }
LABEL_1033:
                      if (!*((_DWORD *)this + 158))
                      {
                        v473 = CA::ADMBuilder::Impl::log((CA::ADMBuilder::Impl *)v67);
                        if (os_log_type_enabled(v473, OS_LOG_TYPE_ERROR))
                        {
                          std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&v577, v61 - 480, "");
                          uint64_t v474 = (v577.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                               ? &v577
                               : (std::string *)v577.__r_.__value_.__r.__words[0];
                          *(_DWORD *)std::string __p = 136315650;
                          *(void *)&__p[4] = "ADMBuilderParseBlockFormat.cpp";
                          *(_WORD *)&__p[12] = 1024;
                          *(_DWORD *)&__p[14] = 249;
                          *(_WORD *)&__p[18] = 2080;
                          *(void *)&__p[20] = v474;
                          _os_log_impl(&dword_18FEC0000, v473, OS_LOG_TYPE_ERROR, "%25s:%-5d Missing coordinate for position of block format '%s'", __p, 0x1Cu);
                          if (SHIBYTE(v577.__r_.__value_.__r.__words[2]) < 0) {
                            operator delete(v577.__r_.__value_.__l.__data_);
                          }
                        }
                        int v459 = -66592;
LABEL_1041:
                        *((_DWORD *)this + 158) = v459;
                      }
                      int v9 = 1;
                      if (buf[1].__r_.__value_.__s.__data_[0] && SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(buf[0].__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(v578.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v578.__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(v579.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v579.__r_.__value_.__l.__data_);
                      }
                      goto LABEL_825;
                    }
                    uint64_t v67 = std::string::__assign_external(&v579, v271);
                    int v573 = BYTE4(v269);
                  }
                  else if (!strcmp((const char *)v267, "coordinate"))
                  {
                    std::string::basic_string[abi:ne180100]<0>(__p, v271);
                    v273 = (CA::ADMBuilder::Impl *)CA::ADMBuilder::Impl::parse_coordinate((uint64_t)this, __p);
                    v268 = v273;
                    if ((__p[23] & 0x80000000) != 0) {
                      operator delete(*(void **)__p);
                    }
                    if (!((unint64_t)v268 >> 32))
                    {
                      uint64_t v471 = CA::ADMBuilder::Impl::log(v273);
                      uint64_t v67 = (std::string *)os_log_type_enabled(v471, OS_LOG_TYPE_ERROR);
                      if (v67)
                      {
                        std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&v577, v61 - 480, "");
                        v472 = (v577.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                             ? &v577
                             : (std::string *)v577.__r_.__value_.__r.__words[0];
                        *(_DWORD *)std::string __p = 136315650;
                        *(void *)&__p[4] = "ADMBuilderParseBlockFormat.cpp";
                        *(_WORD *)&__p[12] = 1024;
                        *(_DWORD *)&__p[14] = 113;
                        *(_WORD *)&__p[18] = 2080;
                        *(void *)&__p[20] = v472;
                        _os_log_impl(&dword_18FEC0000, v471, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown coordinate for position of block format '%s'", __p, 0x1Cu);
                        if (SHIBYTE(v577.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(v577.__r_.__value_.__l.__data_);
                        }
                      }
                      goto LABEL_1033;
                    }
                    uint64_t v67 = std::string::__assign_external(&v578, v271);
                    int v566 = BYTE4(v268);
                  }
                  else
                  {
                    uint64_t v67 = (std::string *)strcmp((const char *)v267, "screenEdgeLock");
                    if (!v67) {
                      uint64_t v67 = std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>(buf, v271);
                    }
                  }
                  v274 = *v270;
                  v270 += 2;
                  v267 = v274;
                  if (!v274) {
                    goto LABEL_979;
                  }
                }
              }
              __int16 v68 = (CA::ADMBuilder::Impl *)strcmp(__s1, "outputChannelFormatIDRef");
              if (!v68 || (__int16 v68 = (CA::ADMBuilder::Impl *)strcmp(__s1, "outputChannelIDRef"), !v68))
              {
                if (!*(unsigned char *)(*(void *)(*((void *)this + 71) - 16) - 8)) {
                  operator new();
                }
                uint64_t v121 = CA::ADMBuilder::Impl::log(v68);
                if (!os_log_type_enabled(v121, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_684;
                }
                std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, v61 - 480, "");
                if (__p[23] >= 0) {
                  v266 = __p;
                }
                else {
                  v266 = *(unsigned char **)__p;
                }
                LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseBlockFormat.cpp";
                WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 256;
                WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v266;
                unint64_t v123 = "%25s:%-5d Multiple output channel formats for block format '%s'";
                goto LABEL_682;
              }
              uint64_t v69 = (CA::ADMBuilder::Impl *)strcmp(__s1, "jumpPosition");
              if (!v69)
              {
                if (!*(unsigned char *)(v61 - 304))
                {
                  *(_DWORD *)(v61 - 308) = 0;
                  *(void *)(v61 - 316) = 0;
                  *(unsigned char *)(v61 - 304) = 1;
                  if (a3)
                  {
                    unint64_t v463 = *a3;
                    if (*a3)
                    {
                      v464 = (unsigned __int8 **)(a3 + 2);
                      do
                      {
                        if (!strcmp((const char *)v463, "interpolationLength"))
                        {
                          std::string::basic_string[abi:ne180100]<0>(buf, (char *)*(v464 - 1));
                          uint64_t v465 = CA::ADMBuilder::Impl::parse_float((int)this, buf);
                          *(_DWORD *)(v61 - 312) = v465;
                          *(unsigned char *)(v61 - 308) = BYTE4(v465);
                          if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
                            operator delete(buf[0].__r_.__value_.__l.__data_);
                          }
                        }
                        unint64_t v466 = *v464;
                        v464 += 2;
                        unint64_t v463 = v466;
                      }
                      while (v466);
                    }
                  }
                  operator new();
                }
                uint64_t v121 = CA::ADMBuilder::Impl::log(v69);
                if (!os_log_type_enabled(v121, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_684;
                }
                std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, v61 - 480, "");
                if (__p[23] >= 0) {
                  uint64_t v435 = __p;
                }
                else {
                  uint64_t v435 = *(unsigned char **)__p;
                }
                LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseBlockFormat.cpp";
                WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 265;
                WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v435;
                unint64_t v123 = "%25s:%-5d Multiple jump positions for block format '%s'";
                goto LABEL_682;
              }
              if (!strcmp(__s1, "matrix"))
              {
                int v9 = 69;
                goto LABEL_825;
              }
              int v70 = (CA::ADMBuilder::Impl *)strcmp(__s1, "width");
              if (!v70)
              {
                if (!*(unsigned char *)(v61 - 172)) {
                  operator new();
                }
                uint64_t v121 = CA::ADMBuilder::Impl::log(v70);
                if (!os_log_type_enabled(v121, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_684;
                }
                std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, v61 - 480, "");
                if (__p[23] >= 0) {
                  v452 = __p;
                }
                else {
                  v452 = *(unsigned char **)__p;
                }
                LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseBlockFormat.cpp";
                WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 287;
                WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v452;
                unint64_t v123 = "%25s:%-5d Multiple width elements for block format '%s'";
                goto LABEL_682;
              }
              unsigned __int16 v71 = (CA::ADMBuilder::Impl *)strcmp(__s1, "height");
              if (!v71)
              {
                if (!*(unsigned char *)(v61 - 164)) {
                  operator new();
                }
                uint64_t v121 = CA::ADMBuilder::Impl::log(v71);
                if (!os_log_type_enabled(v121, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_684;
                }
                std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, v61 - 480, "");
                if (__p[23] >= 0) {
                  uint64_t v470 = __p;
                }
                else {
                  uint64_t v470 = *(unsigned char **)__p;
                }
                LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseBlockFormat.cpp";
                WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 296;
                WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v470;
                unint64_t v123 = "%25s:%-5d Multiple height elements for block format '%s'";
                goto LABEL_682;
              }
              unint64_t v72 = (CA::ADMBuilder::Impl *)strcmp(__s1, "depth");
              if (!v72)
              {
                if (!*(unsigned char *)(v61 - 156)) {
                  operator new();
                }
                uint64_t v121 = CA::ADMBuilder::Impl::log(v72);
                if (!os_log_type_enabled(v121, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_684;
                }
                std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, v61 - 480, "");
                if (__p[23] >= 0) {
                  uint64_t v490 = __p;
                }
                else {
                  uint64_t v490 = *(unsigned char **)__p;
                }
                LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseBlockFormat.cpp";
                WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 305;
                WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v490;
                unint64_t v123 = "%25s:%-5d Multiple depth elements for block format '%s'";
                goto LABEL_682;
              }
              if (!strcmp(__s1, "cartesian")) {
                operator new();
              }
              uint64_t v73 = (CA::ADMBuilder::Impl *)strcmp(__s1, "diffuse");
              if (!v73)
              {
                if (!*(unsigned char *)(v61 - 144)) {
                  operator new();
                }
                uint64_t v121 = CA::ADMBuilder::Impl::log(v73);
                if (!os_log_type_enabled(v121, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_684;
                }
                std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, v61 - 480, "");
                if (__p[23] >= 0) {
                  long long v499 = __p;
                }
                else {
                  long long v499 = *(unsigned char **)__p;
                }
                LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseBlockFormat.cpp";
                WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 317;
                WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v499;
                unint64_t v123 = "%25s:%-5d Multiple diffuse elements for block format '%s'";
                goto LABEL_682;
              }
              long long v74 = (CA::ADMBuilder::Impl *)strcmp(__s1, "channelLock");
              if (!v74)
              {
                if (!*(unsigned char *)(v61 - 128))
                {
                  *(_DWORD *)(v61 - 132) = 0;
                  *(void *)(v61 - 140) = 0;
                  *(unsigned char *)(v61 - 128) = 1;
                  if (a3)
                  {
                    v533 = *a3;
                    if (*a3)
                    {
                      int64_t v534 = (unsigned __int8 **)(a3 + 2);
                      do
                      {
                        if (!strcmp((const char *)v533, "maxDistance"))
                        {
                          std::string::basic_string[abi:ne180100]<0>(buf, (char *)*(v534 - 1));
                          uint64_t v535 = CA::ADMBuilder::Impl::parse_float((int)this, buf);
                          *(_DWORD *)(v61 - 136) = v535;
                          *(unsigned char *)(v61 - 132) = BYTE4(v535);
                          if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
                            operator delete(buf[0].__r_.__value_.__l.__data_);
                          }
                        }
                        unint64_t v536 = *v534;
                        v534 += 2;
                        v533 = v536;
                      }
                      while (v536);
                    }
                  }
                  operator new();
                }
                uint64_t v121 = CA::ADMBuilder::Impl::log(v74);
                if (!os_log_type_enabled(v121, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_684;
                }
                std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, v61 - 480, "");
                if (__p[23] >= 0) {
                  uint64_t v531 = __p;
                }
                else {
                  uint64_t v531 = *(unsigned char **)__p;
                }
                LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseBlockFormat.cpp";
                WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 326;
                WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v531;
                unint64_t v123 = "%25s:%-5d Multiple channel lock elements for block format '%s'";
                goto LABEL_682;
              }
              uint64_t v75 = (CA::ADMBuilder::Impl *)strcmp(__s1, "objectDivergence");
              if (v75)
              {
                if (!strcmp(__s1, "zoneExclusion"))
                {
                  int v9 = 78;
                }
                else
                {
                  if (!strcmp(__s1, "screenRef")) {
                    operator new();
                  }
                  if (!strcmp(__s1, "equation")) {
                    operator new();
                  }
                  if (!strcmp(__s1, "order")) {
                    operator new();
                  }
                  if (!strcmp(__s1, "degree")) {
                    operator new();
                  }
                  if (!strcmp(__s1, "normalization")) {
                    operator new();
                  }
                  if (!strcmp(__s1, "nfcRefDist")) {
                    operator new();
                  }
                }
                goto LABEL_825;
              }
              if (*(unsigned char *)(v61 - 116))
              {
                uint64_t v121 = CA::ADMBuilder::Impl::log(v75);
                if (os_log_type_enabled(v121, OS_LOG_TYPE_ERROR))
                {
                  std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, v61 - 480, "");
                  if (__p[23] >= 0) {
                    uint64_t v532 = __p;
                  }
                  else {
                    uint64_t v532 = *(unsigned char **)__p;
                  }
                  LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                  *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseBlockFormat.cpp";
                  WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 345;
                  WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                  *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v532;
                  unint64_t v123 = "%25s:%-5d Multiple channel lock elements for block format '%s'";
                  goto LABEL_682;
                }
                goto LABEL_684;
              }
              *(unsigned char *)(v61 - 116) = 1;
              *(void *)(v61 - 124) = 0;
              if (!a3) {
                goto LABEL_1277;
              }
              v537 = *a3;
              if (!*a3) {
                goto LABEL_1277;
              }
              int v538 = 0;
              int v539 = 0;
              v540 = (unsigned __int8 **)(a3 + 2);
              while (1)
              {
                uint64_t v541 = (char *)*(v540 - 1);
                unint64_t v542 = strcmp((const char *)v537, "azimuthRange");
                if (!v542) {
                  break;
                }
                unint64_t v542 = strcmp((const char *)v537, "positionRange");
                if (!v542)
                {
                  if (v538 && !v539) {
                    goto LABEL_1257;
                  }
                  std::string::basic_string[abi:ne180100]<0>(buf, v541);
                  unint64_t v542 = CA::ADMBuilder::Impl::parse_float((int)this, buf);
                  float v543 = *(float *)&v542;
                  if (!HIDWORD(v542)) {
                    float v543 = 0.0;
                  }
                  *(float *)(v61 - 120) = v543;
                  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(buf[0].__r_.__value_.__l.__data_);
                  }
                  int v539 = 1;
LABEL_1229:
                  int v538 = 1;
                }
                v545 = *v540;
                v540 += 2;
                v537 = v545;
                if (!v545)
                {
                  if (v538)
                  {
                    int v546 = 0;
                    goto LABEL_1258;
                  }
                  goto LABEL_1277;
                }
              }
              if (v538 && v539 == 1)
              {
LABEL_1257:
                int v546 = 1;
LABEL_1258:
                if (*(unsigned char *)(v61 - 151))
                {
                  if (v539 != *(unsigned __int8 *)(v61 - 152)) {
                    int v546 = 1;
                  }
                }
                else
                {
                  *(_WORD *)(v61 - 152) = v539 | 0x100;
                }
                if (!*((_DWORD *)this + 158) && v546)
                {
                  unint64_t v548 = CA::ADMBuilder::Impl::log((CA::ADMBuilder::Impl *)v542);
                  if (os_log_type_enabled(v548, OS_LOG_TYPE_ERROR))
                  {
                    std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, v61 - 480, "");
                    if (__p[23] >= 0) {
                      v549 = __p;
                    }
                    else {
                      v549 = *(unsigned char **)__p;
                    }
                    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseBlockFormat.cpp";
                    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 387;
                    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v549;
                    uint64_t v140 = "%25s:%-5d Conflicting coordinate systems used in block format '%s'";
                    v248 = v548;
                    goto LABEL_638;
                  }
                  goto LABEL_640;
                }
LABEL_1277:
                operator new();
              }
              std::string::basic_string[abi:ne180100]<0>(buf, v541);
              unint64_t v542 = CA::ADMBuilder::Impl::parse_float((int)this, buf);
              float v544 = *(float *)&v542;
              if (!HIDWORD(v542)) {
                float v544 = 0.0;
              }
              *(float *)(v61 - 120) = v544;
              if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
                operator delete(buf[0].__r_.__value_.__l.__data_);
              }
              int v539 = 0;
              goto LABEL_1229;
            }
            if (*(unsigned char *)(v61 - 348))
            {
              uint64_t v121 = CA::ADMBuilder::Impl::log(v65);
              if (os_log_type_enabled(v121, OS_LOG_TYPE_ERROR))
              {
                std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, v61 - 480, "");
                if (__p[23] >= 0) {
                  unint64_t v206 = __p;
                }
                else {
                  unint64_t v206 = *(unsigned char **)__p;
                }
                LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseBlockFormat.cpp";
                WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 63;
                WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v206;
                unint64_t v123 = "%25s:%-5d Multiple headphoneVirtualise values for block format '%s'";
LABEL_682:
                _os_log_impl(&dword_18FEC0000, v121, OS_LOG_TYPE_ERROR, v123, (uint8_t *)buf, 0x1Cu);
                if ((__p[23] & 0x80000000) != 0) {
                  operator delete(*(void **)__p);
                }
              }
LABEL_684:
              int v199 = -66586;
              goto LABEL_685;
            }
            uint64_t v307 = v61 - 360;
            *(_DWORD *)(v307 + 8) = 0;
            *(void *)uint64_t v307 = 0;
            *(unsigned char *)(v61 - 348) = 1;
            if (!a3) {
              goto LABEL_825;
            }
            v308 = *a3;
            if (!*a3) {
              goto LABEL_825;
            }
            uint64_t v309 = (unsigned __int8 **)(a3 + 2);
            while (1)
            {
              uint64_t v310 = (char *)*(v309 - 1);
              if (!strcmp((const char *)v308, "bypass")) {
                break;
              }
              if (!strcmp((const char *)v308, "DRR"))
              {
                std::string::basic_string[abi:ne180100]<0>(buf, v310);
                uint64_t v311 = CA::ADMBuilder::Impl::parse_float((int)this, buf);
                *(_DWORD *)(v61 - 356) = v311;
                *(unsigned char *)(v61 - 352) = BYTE4(v311);
                goto LABEL_779;
              }
LABEL_781:
              v312 = *v309;
              v309 += 2;
              v308 = v312;
              int v9 = 1;
              if (!v312) {
                goto LABEL_825;
              }
            }
            std::string::basic_string[abi:ne180100]<0>(buf, v310);
            *(_WORD *)uint64_t v307 = CA::ADMBuilder::Impl::parse_BOOL((uint64_t)this, (unsigned __int8 *)buf);
LABEL_779:
            if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buf[0].__r_.__value_.__l.__data_);
            }
            goto LABEL_781;
          }
          uint64_t v570 = *(void *)(*(void *)this + 128);
          if (!strcmp(__s1, "audioBlockFormat"))
          {
            buf[0].__r_.__value_.__s.__data_[0] = 0;
            buf[1].__r_.__value_.__s.__data_[0] = 0;
            buf[1].__r_.__value_.__s.__data_[8] = 0;
            buf[2].__r_.__value_.__s.__data_[8] = 0;
            buf[2].__r_.__value_.__s.__data_[16] = 0;
            buf[3].__r_.__value_.__s.__data_[16] = 0;
            buf[4].__r_.__value_.__s.__data_[0] = 0;
            buf[4].__r_.__value_.__s.__data_[8] = 0;
            buf[4].__r_.__value_.__s.__data_[12] = 0;
            buf[4].__r_.__value_.__s.__data_[16] = 0;
            WORD2(buf[4].__r_.__value_.__r.__words[2]) = 0;
            LOBYTE(v582) = 0;
            BYTE12(v582) = 0;
            LOBYTE(v583) = 0;
            BYTE4(v583) = 0;
            BYTE8(v583) = 0;
            BYTE12(v583) = 0;
            LOBYTE(v584) = 0;
            BYTE4(v584) = 0;
            WORD4(v584) = 0;
            BYTE12(v584) = 0;
            BYTE8(v585) = 0;
            WORD6(v585) = 0;
            LOBYTE(v586) = 0;
            char v588 = 0;
            char v589 = 0;
            char v590 = 0;
            char v591 = 0;
            char v592 = 0;
            char v593 = 0;
            char v594 = 0;
            char v595 = 0;
            char v596 = 0;
            char v597 = 0;
            char v598 = 0;
            char v599 = 0;
            char v600 = 0;
            v602[28] = 0;
            v602[32] = 0;
            v602[36] = 0;
            v602[40] = 0;
            v602[44] = 0;
            __int16 v603 = 0;
            char v604 = 0;
            char v605 = 0;
            char v606 = 0;
            char v607 = 0;
            char v608 = 0;
            char v609 = 0;
            char v613 = 0;
            char v614 = 0;
            char v615 = 0;
            char v616 = 0;
            char v617 = 0;
            LOBYTE(v618) = 0;
            char v620 = 0;
            char v621 = 0;
            char v622 = 0;
            long long v601 = 0u;
            memset(v602, 0, 25);
            memset(v610, 0, sizeof(v610));
            LOBYTE(v611) = 0;
            if (a3)
            {
              uint64_t v124 = *a3;
              if (*a3)
              {
                unint64_t v125 = (unsigned __int8 **)(a3 + 2);
                do
                {
                  unint64_t v126 = (std::string::value_type *)*(v125 - 1);
                  if (!strcmp((const char *)v124, "audioBlockFormatID"))
                  {
                    std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>(buf, v126);
                  }
                  else if (!strcmp((const char *)v124, "rtime"))
                  {
                    CA::ADMTime::parse((CA::ADMTime *)v126, (uint64_t)__p);
                    if (!__p[24]) {
                      *((_DWORD *)this + 158) = -66604;
                    }
                    *(_OWORD *)&buf[1].__r_.__value_.__r.__words[1] = *(_OWORD *)__p;
                    *(_OWORD *)((char *)&buf[1].__r_.__value_.__r.__words[2] + 1) = *(_OWORD *)&__p[9];
                  }
                  else if (!strcmp((const char *)v124, "duration"))
                  {
                    CA::ADMTime::parse((CA::ADMTime *)v126, (uint64_t)__p);
                    if (!__p[24]) {
                      *((_DWORD *)this + 158) = -66604;
                    }
                    *(_OWORD *)&buf[2].__r_.__value_.__r.__words[2] = *(_OWORD *)__p;
                    *(_OWORD *)((char *)&buf[3].__r_.__value_.__l.__data_ + 1) = *(_OWORD *)&__p[9];
                  }
                  char v127 = *v125;
                  v125 += 2;
                  uint64_t v124 = v127;
                }
                while (v127);
              }
            }
            std::vector<CA::ADMBlockFormat>::push_back[abi:ne180100]((long long **)(*(void *)(v570 - 16) + 144), (long long *)buf);
            uint64_t v128 = *((void *)this + 71) - 24;
            __p[0] = 0;
            __p[24] = 0;
            std::vector<std::optional<std::string>>::push_back[abi:ne180100](v128, (long long *)__p);
            if (__p[24] && (__p[23] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
            uint64_t v129 = (void ***)(*((void *)this + 74) - 24);
            memset(__p, 0, 24);
            std::vector<std::vector<std::string>>::push_back[abi:ne180100](v129, (uint64_t)__p);
            v579.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v579);
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::clear((uint64_t)this + 800);
            if (v620 && v619 < 0) {
              operator delete(v618);
            }
            if (v613 && v612 < 0) {
              operator delete(v611);
            }
            *(void *)std::string __p = v610;
            std::vector<CA::ADMZone>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            *(void *)std::string __p = v602;
            std::vector<CA::ADMMatrixCoefficient>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            if (*((void *)&v601 + 1)) {
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v601 + 1));
            }
            if (v588 && v587 < 0) {
              operator delete(v586);
            }
            if (buf[1].__r_.__value_.__s.__data_[0] && SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buf[0].__r_.__value_.__l.__data_);
            }
            int v9 = 63;
            goto LABEL_825;
          }
          uint64_t v76 = (CA::ADMBuilder::Impl *)strcmp(__s1, "frequency");
          if (v76) {
            goto LABEL_825;
          }
          if (!a3 || (uint64_t v76 = (CA::ADMBuilder::Impl *)*a3) == 0)
          {
LABEL_526:
            uint64_t v207 = CA::ADMBuilder::Impl::log(v76);
            if (os_log_type_enabled(v207, OS_LOG_TYPE_ERROR))
            {
              std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, *(void *)(v570 - 16), "");
              uint64_t v208 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseChannelFormat.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 74;
              WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
              *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v208;
              _os_log_impl(&dword_18FEC0000, v207, OS_LOG_TYPE_ERROR, "%25s:%-5d Missing type definition for frequency of channel format '%s'", (uint8_t *)buf, 0x1Cu);
              if ((__p[23] & 0x80000000) != 0) {
                operator delete(*(void **)__p);
              }
            }
            int v199 = -66587;
            goto LABEL_685;
          }
          uint64_t v77 = (unsigned __int8 **)(a3 + 2);
          while (1)
          {
            uint64_t v78 = (const char *)*(v77 - 1);
            if (!strcmp((const char *)v76, "typeDefinition")) {
              break;
            }
LABEL_174:
            uint64_t v79 = *v77;
            v77 += 2;
            uint64_t v76 = (CA::ADMBuilder::Impl *)v79;
            if (!v79) {
              goto LABEL_526;
            }
          }
          uint64_t v80 = (CA::ADMBuilder::Impl *)strcmp(v78, "lowPass");
          if (v80)
          {
            long long v81 = (CA::ADMBuilder::Impl *)strcmp(v78, "highPass");
            if (v81)
            {
              unint64_t v82 = CA::ADMBuilder::Impl::log(v81);
              if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
              {
                std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, *(void *)(v570 - 16), "");
                unint64_t v83 = __p;
                if (__p[23] < 0) {
                  unint64_t v83 = *(unsigned char **)__p;
                }
                LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
                *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseChannelFormat.cpp";
                WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 66;
                WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v78;
                WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2080;
                *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + 6) = (std::string::size_type)v83;
                _os_log_impl(&dword_18FEC0000, v82, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown type definition '%s' for frequency of channel format '%s'", (uint8_t *)buf, 0x26u);
                if ((__p[23] & 0x80000000) != 0) {
                  operator delete(*(void **)__p);
                }
              }
              *((_DWORD *)this + 158) = -66588;
              goto LABEL_174;
            }
            if (!*(unsigned char *)(*(void *)(v570 - 16) + 140)) {
              operator new();
            }
            unint64_t v87 = CA::ADMBuilder::Impl::log(v81);
            if (!os_log_type_enabled(v87, OS_LOG_TYPE_ERROR)) {
              goto LABEL_196;
            }
            std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, *(void *)(v570 - 16), "");
            unint64_t v88 = __p;
            if (__p[23] < 0) {
              unint64_t v88 = *(unsigned char **)__p;
            }
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseChannelFormat.cpp";
            WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 56;
            WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
            *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v88;
            uint64_t v86 = v87;
          }
          else
          {
            if (!*(unsigned char *)(*(void *)(v570 - 16) + 132)) {
              operator new();
            }
            long long v84 = CA::ADMBuilder::Impl::log(v80);
            if (!os_log_type_enabled(v84, OS_LOG_TYPE_ERROR)) {
              goto LABEL_196;
            }
            std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, *(void *)(v570 - 16), "");
            unint64_t v85 = __p;
            if (__p[23] < 0) {
              unint64_t v85 = *(unsigned char **)__p;
            }
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseChannelFormat.cpp";
            WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 46;
            WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
            *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v85;
            uint64_t v86 = v84;
          }
          _os_log_impl(&dword_18FEC0000, v86, OS_LOG_TYPE_ERROR, "%25s:%-5d Multiple lowPass values for channel format '%s'", (uint8_t *)buf, 0x1Cu);
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
LABEL_196:
          *((_DWORD *)this + 158) = -66586;
          goto LABEL_174;
        }
        if (v8 != 78)
        {
          if (v8 == 86)
          {
            if (!strcmp(__s1, "audioStreamFormatIDRef")) {
              operator new();
            }
          }
          else if (v8 == 88)
          {
            if (!strcmp(__s1, "audioChannelFormatIDRef")) {
              operator new();
            }
            if (!strcmp(__s1, "audioPackFormatIDRef")) {
              operator new();
            }
            if (!strcmp(__s1, "audioTrackFormatIDRef")) {
              operator new();
            }
          }
          goto LABEL_825;
        }
        uint64_t v571 = *(void *)(*(void *)(*(void *)(*(void *)this + 128) - 16) + 152);
        if (strcmp(__s1, "zone")) {
          goto LABEL_825;
        }
        if (!a3 || (unint64_t v90 = *a3) == 0)
        {
          LOBYTE(v91) = 0;
          LOBYTE(v92) = 0;
          char v142 = 0;
          LOBYTE(v93) = 0;
          char v143 = 0;
          unsigned __int8 v144 = 0;
          char v145 = 0;
          unsigned __int8 v146 = 0;
          char v147 = 0;
          unsigned __int8 v148 = 0;
          uint64_t v149 = 0;
          LODWORD(v565) = v89;
          LODWORD(v564) = v89;
          LODWORD(v563) = v89;
          LODWORD(v558) = v89;
          LODWORD(v554) = v89;
          goto LABEL_406;
        }
        LOBYTE(v91) = 0;
        LOBYTE(v92) = 0;
        LOBYTE(v555) = 0;
        uint64_t v557 = 0;
        LOBYTE(v93) = 0;
        LOBYTE(v559) = 0;
        unsigned __int8 v561 = 0;
        unsigned __int8 v552 = 0;
        unsigned __int8 v553 = 0;
        uint64_t v550 = 0;
        LOBYTE(v551) = 0;
        int v94 = 0;
        int v95 = 0;
        unint64_t v96 = (unsigned __int8 **)(a3 + 2);
        LODWORD(v565) = v571 - 480;
        LODWORD(v564) = v571 - 480;
        LODWORD(v563) = v571 - 480;
        LODWORD(v558) = v571 - 480;
        LODWORD(v554) = v571 - 480;
        while (1)
        {
          unint64_t v97 = (char *)*(v96 - 1);
          if (!strcmp((const char *)v90, "minX"))
          {
            if (v94 && !v95)
            {
LABEL_540:
              int v212 = 1;
LABEL_543:
              char v143 = v559;
              unsigned __int8 v144 = v561;
              char v145 = v555;
              char v142 = (char)v557;
              if (*(unsigned char *)(v571 - 151))
              {
                if (v95 != *(unsigned __int8 *)(v571 - 152)) {
                  int v212 = 1;
                }
              }
              else
              {
                *(_WORD *)(v571 - 152) = v95 | 0x100;
              }
              unsigned __int8 v148 = v552;
              unsigned __int8 v146 = v553;
              uint64_t v149 = v550;
              char v147 = v551;
              if (!*((_DWORD *)this + 158) && v212)
              {
                uint64_t v138 = CA::ADMBuilder::Impl::log(v557);
                if (os_log_type_enabled(v138, OS_LOG_TYPE_ERROR))
                {
                  std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, v571 - 480, "");
                  if (__p[23] >= 0) {
                    uint64_t v247 = __p;
                  }
                  else {
                    uint64_t v247 = *(unsigned char **)__p;
                  }
                  LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                  *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseBlockFormat.cpp";
                  WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 574;
                  WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                  *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v247;
                  uint64_t v140 = "%25s:%-5d Conflicting coordinate systems used in block format '%s'";
LABEL_637:
                  v248 = v138;
LABEL_638:
                  _os_log_impl(&dword_18FEC0000, v248, OS_LOG_TYPE_ERROR, v140, (uint8_t *)buf, 0x1Cu);
                  if ((__p[23] & 0x80000000) != 0) {
                    operator delete(*(void **)__p);
                  }
                }
LABEL_640:
                int v199 = -66603;
                goto LABEL_685;
              }
              goto LABEL_406;
            }
            std::string::basic_string[abi:ne180100]<0>(buf, v97);
            unint64_t v92 = CA::ADMBuilder::Impl::parse_float((int)this, buf);
            if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buf[0].__r_.__value_.__l.__data_);
            }
            unint64_t v565 = v92 >> 8;
            unint64_t v91 = HIDWORD(v92);
          }
          else if (!strcmp((const char *)v90, "maxX"))
          {
            if (v94 && !v95) {
              goto LABEL_540;
            }
            std::string::basic_string[abi:ne180100]<0>(buf, v97);
            unint64_t v93 = CA::ADMBuilder::Impl::parse_float((int)this, buf);
            if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buf[0].__r_.__value_.__l.__data_);
            }
            unint64_t v564 = v93 >> 8;
            uint64_t v557 = (CA::ADMBuilder::Impl *)HIDWORD(v93);
          }
          else if (!strcmp((const char *)v90, "minY"))
          {
            if (v94 && !v95) {
              goto LABEL_540;
            }
            std::string::basic_string[abi:ne180100]<0>(buf, v97);
            unint64_t v99 = CA::ADMBuilder::Impl::parse_float((int)this, buf);
            if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buf[0].__r_.__value_.__l.__data_);
            }
            unsigned __int8 v561 = v99;
            unint64_t v563 = v99 >> 8;
            unint64_t v559 = HIDWORD(v99);
          }
          else if (!strcmp((const char *)v90, "maxY"))
          {
            if (v94 && !v95) {
              goto LABEL_540;
            }
            std::string::basic_string[abi:ne180100]<0>(buf, v97);
            unint64_t v100 = CA::ADMBuilder::Impl::parse_float((int)this, buf);
            if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buf[0].__r_.__value_.__l.__data_);
            }
            unint64_t v558 = v100 >> 8;
            unsigned __int8 v553 = v100;
            unint64_t v555 = HIDWORD(v100);
          }
          else if (!strcmp((const char *)v90, "minZ"))
          {
            if (v94 && !v95) {
              goto LABEL_540;
            }
            std::string::basic_string[abi:ne180100]<0>(buf, v97);
            unint64_t v101 = CA::ADMBuilder::Impl::parse_float((int)this, buf);
            if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buf[0].__r_.__value_.__l.__data_);
            }
            unint64_t v554 = v101 >> 8;
            unint64_t v551 = HIDWORD(v101);
            unsigned __int8 v552 = v101;
          }
          else
          {
            if (strcmp((const char *)v90, "maxZ"))
            {
              if (!strcmp((const char *)v90, "minAzimuth"))
              {
                if (v94 && v95 == 1) {
                  goto LABEL_540;
                }
                std::string::basic_string[abi:ne180100]<0>(buf, v97);
                unint64_t v92 = CA::ADMBuilder::Impl::parse_float((int)this, buf);
                if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(buf[0].__r_.__value_.__l.__data_);
                }
                int v95 = 0;
                int v94 = 1;
                unint64_t v565 = v92 >> 8;
                unint64_t v91 = HIDWORD(v92);
              }
              else if (!strcmp((const char *)v90, "maxAzimuth"))
              {
                if (v94 && v95 == 1) {
                  goto LABEL_540;
                }
                std::string::basic_string[abi:ne180100]<0>(buf, v97);
                unint64_t v93 = CA::ADMBuilder::Impl::parse_float((int)this, buf);
                if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(buf[0].__r_.__value_.__l.__data_);
                }
                int v95 = 0;
                int v94 = 1;
                unint64_t v564 = v93 >> 8;
                uint64_t v557 = (CA::ADMBuilder::Impl *)HIDWORD(v93);
              }
              else if (!strcmp((const char *)v90, "minElevation"))
              {
                if (v94 && v95 == 1) {
                  goto LABEL_540;
                }
                std::string::basic_string[abi:ne180100]<0>(buf, v97);
                unint64_t v103 = CA::ADMBuilder::Impl::parse_float((int)this, buf);
                if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(buf[0].__r_.__value_.__l.__data_);
                }
                int v95 = 0;
                int v94 = 1;
                unint64_t v559 = HIDWORD(v103);
                unsigned __int8 v561 = v103;
                unint64_t v563 = v103 >> 8;
              }
              else if (!strcmp((const char *)v90, "maxElevation"))
              {
                if (v94 && v95 == 1) {
                  goto LABEL_540;
                }
                std::string::basic_string[abi:ne180100]<0>(buf, v97);
                unint64_t v98 = CA::ADMBuilder::Impl::parse_float((int)this, buf);
                if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(buf[0].__r_.__value_.__l.__data_);
                }
                int v95 = 0;
                int v94 = 1;
                unint64_t v558 = v98 >> 8;
                unint64_t v555 = HIDWORD(v98);
                unsigned __int8 v553 = v98;
              }
              goto LABEL_248;
            }
            if (v94 && !v95) {
              goto LABEL_540;
            }
            std::string::basic_string[abi:ne180100]<0>(buf, v97);
            uint64_t v550 = CA::ADMBuilder::Impl::parse_float((int)this, buf);
            if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buf[0].__r_.__value_.__l.__data_);
            }
          }
          int v95 = 1;
          int v94 = 1;
LABEL_248:
          unint64_t v102 = *v96;
          v96 += 2;
          unint64_t v90 = v102;
          if (!v102)
          {
            if (v94)
            {
              int v212 = 0;
              goto LABEL_543;
            }
            uint64_t v149 = v550;
            char v147 = v551;
            unsigned __int8 v148 = v552;
            unsigned __int8 v146 = v553;
            char v143 = v559;
            unsigned __int8 v144 = v561;
            char v145 = v555;
            char v142 = (char)v557;
LABEL_406:
            unint64_t v150 = *(void *)(v571 - 104);
            unint64_t v151 = *(void *)(v571 - 96);
            if (v150 >= v151)
            {
              char v560 = v143;
              unsigned __int8 v562 = v144;
              char v556 = v145;
              uint64_t v166 = *(void *)(v571 - 112);
              unint64_t v167 = 0x8E38E38E38E38E39 * ((uint64_t)(v150 - v166) >> 3);
              unint64_t v168 = v167 + 1;
              if (v167 + 1 > 0x38E38E38E38E38ELL) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              unsigned __int8 v169 = v93;
              char v170 = v142;
              unint64_t v171 = 0x8E38E38E38E38E39 * ((uint64_t)(v151 - v166) >> 3);
              if (2 * v171 > v168) {
                unint64_t v168 = 2 * v171;
              }
              if (v171 >= 0x1C71C71C71C71C7) {
                unint64_t v172 = 0x38E38E38E38E38ELL;
              }
              else {
                unint64_t v172 = v168;
              }
              if (v172)
              {
                unsigned __int8 v173 = v146;
                char v174 = v147;
                unsigned __int8 v175 = v148;
                uint64_t v176 = v149;
                unint64_t v172 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ADMZone>>(v172);
                uint64_t v149 = v176;
                unsigned __int8 v148 = v175;
                char v147 = v174;
                unsigned __int8 v146 = v173;
              }
              else
              {
                uint64_t v177 = 0;
              }
              unint64_t v220 = v172 + 72 * v167;
              *(unsigned char *)(v220 + 4) = v91;
              *(_DWORD *)unint64_t v220 = v92 | (v565 << 8);
              *(unsigned char *)(v220 + 12) = v170;
              unint64_t v221 = v172 + 72 * v177;
              *(_DWORD *)(v220 + 8) = v169 | (v564 << 8);
              *(unsigned char *)(v220 + 20) = v560;
              *(_DWORD *)(v220 + 16) = v562 | (v563 << 8);
              *(unsigned char *)(v220 + 28) = v556;
              *(_DWORD *)(v220 + 24) = v146 | (v558 << 8);
              *(unsigned char *)(v220 + 36) = v147;
              *(_DWORD *)(v220 + 32) = v148 | (v554 << 8);
              *(unsigned char *)(v220 + 44) = BYTE4(v149);
              *(_DWORD *)(v220 + 40) = v149;
              *(void *)(v220 + 56) = 0;
              *(void *)(v220 + 64) = 0;
              *(void *)(v220 + 48) = 0;
              unint64_t v152 = v220 + 72;
              unint64_t v222 = *(char **)(v571 - 112);
              BOOL v223 = *(char **)(v571 - 104);
              if (v223 == v222)
              {
                *(void *)(v571 - 112) = v220;
                *(void *)(v571 - 104) = v152;
                *(void *)(v571 - 96) = v221;
              }
              else
              {
                do
                {
                  long long v224 = *(_OWORD *)(v223 - 72);
                  long long v225 = *(_OWORD *)(v223 - 56);
                  *(_OWORD *)(v220 - 43) = *(_OWORD *)(v223 - 43);
                  *(_OWORD *)(v220 - 56) = v225;
                  *(_OWORD *)(v220 - 72) = v224;
                  long long v226 = *(_OWORD *)(v223 - 24);
                  *(void *)(v220 - 8) = *((void *)v223 - 1);
                  *(_OWORD *)(v220 - 24) = v226;
                  v220 -= 72;
                  *((void *)v223 - 2) = 0;
                  *((void *)v223 - 1) = 0;
                  *((void *)v223 - 3) = 0;
                  v223 -= 72;
                }
                while (v223 != v222);
                uint64_t v227 = *(char **)(v571 - 112);
                BOOL v223 = *(char **)(v571 - 104);
                *(void *)(v571 - 112) = v220;
                *(void *)(v571 - 104) = v152;
                *(void *)(v571 - 96) = v221;
                if (v223 != v227)
                {
                  do
                  {
                    if (*(v223 - 1) < 0) {
                      operator delete(*((void **)v223 - 3));
                    }
                    v223 -= 72;
                  }
                  while (v223 != v227);
                  BOOL v223 = v227;
                }
              }
              if (v223) {
                operator delete(v223);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v150 = v92 | (v565 << 8);
              *(unsigned char *)(v150 + 4) = v91;
              *(_DWORD *)(v150 + 8) = v93 | (v564 << 8);
              *(unsigned char *)(v150 + 12) = v142;
              *(_DWORD *)(v150 + 16) = v144 | (v563 << 8);
              *(unsigned char *)(v150 + 20) = v143;
              *(_DWORD *)(v150 + 24) = v146 | (v558 << 8);
              *(unsigned char *)(v150 + 28) = v145;
              *(_DWORD *)(v150 + 32) = v148 | (v554 << 8);
              *(unsigned char *)(v150 + 36) = v147;
              *(_DWORD *)(v150 + 40) = v149;
              *(unsigned char *)(v150 + 44) = BYTE4(v149);
              *(void *)(v150 + 56) = 0;
              *(void *)(v150 + 64) = 0;
              *(void *)(v150 + 48) = 0;
              unint64_t v152 = v150 + 72;
              *(void *)(v571 - 104) = v150 + 72;
            }
            *(void *)(v571 - 104) = v152;
            operator new();
          }
        }
      }
      switch(v8)
      {
        case 0:
          break;
        case 1:
        case 4:
        case 5:
        case 7:
        case 10:
        case 12:
        case 13:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
          goto LABEL_825;
        case 2:
          int v51 = CA::ADMBuilder::Impl::parse_model(this, __s1, (const char **)a3);
LABEL_121:
          int v9 = v51;
          goto LABEL_825;
        case 3:
          uint64_t v55 = *(void *)(*(void *)this + 8);
          if (!strcmp(__s1, "audioProgrammeLabel"))
          {
            CA::ADMBuilder::Impl::label_from_attributes(buf, a3);
            unint64_t v118 = *(void *)(v55 - 192);
            if (v118 >= *(void *)(v55 - 184))
            {
              uint64_t v157 = std::vector<CA::ADMLabel>::__push_back_slow_path<CA::ADMLabel>((void **)(v55 - 200), (uint64_t)buf);
              int v158 = buf[2].__r_.__value_.__s.__data_[7];
              *(void *)(v55 - 192) = v157;
              if (v158 < 0) {
                operator delete((void *)buf[1].__r_.__value_.__l.__size_);
              }
            }
            else
            {
              *(unsigned char *)unint64_t v118 = 0;
              *(unsigned char *)(v118 + 24) = 0;
              if (buf[1].__r_.__value_.__s.__data_[0])
              {
                long long v119 = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
                *(void *)(v118 + 16) = *((void *)&buf[0].__r_.__value_.__l + 2);
                *(_OWORD *)unint64_t v118 = v119;
                memset(buf, 0, 24);
                *(unsigned char *)(v118 + 24) = 1;
              }
              long long v120 = *(_OWORD *)&buf[1].__r_.__value_.__r.__words[1];
              *(void *)(v118 + 48) = buf[2].__r_.__value_.__l.__data_;
              *(_OWORD *)(v118 + 32) = v120;
              memset(&buf[1].__r_.__value_.__r.__words[1], 0, sizeof(std::string));
              *(void *)(v55 - 192) = v118 + 56;
            }
            if (buf[1].__r_.__value_.__s.__data_[0] && SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buf[0].__r_.__value_.__l.__data_);
            }
            operator new();
          }
          if (!strcmp(__s1, "audioContentIDRef")) {
            operator new();
          }
          if (!strcmp(__s1, "loudnessMetadata")) {
            CA::ADMBuilder::Impl::loudness_metadata_from_attributes((CA::ADMBuilder::Impl *)buf, a3);
          }
          if (!strcmp(__s1, "audioProgrammeReferenceScreen"))
          {
            *(_OWORD *)(v55 - 128) = 0u;
            uint64_t v200 = v55 - 128;
            int v201 = *(unsigned __int8 *)(v55 - 84);
            *(_OWORD *)(v200 + 16) = 0u;
            *(_OWORD *)(v200 + 28) = 0u;
            if (!v201) {
              *(unsigned char *)(v55 - 84) = 1;
            }
            if (a3 && (unsigned int v202 = *a3) != 0)
            {
              uint64_t v203 = (unsigned __int8 **)(a3 + 2);
              int v9 = 6;
              do
              {
                if (!strcmp((const char *)v202, "aspectRatio"))
                {
                  std::string::basic_string[abi:ne180100]<0>(buf, (char *)*(v203 - 1));
                  uint64_t v204 = CA::ADMBuilder::Impl::parse_float((int)this, buf);
                  *(_DWORD *)uint64_t v200 = v204;
                  *(unsigned char *)(v200 + 4) = BYTE4(v204);
                  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(buf[0].__r_.__value_.__l.__data_);
                  }
                }
                BOOL v205 = *v203;
                v203 += 2;
                unsigned int v202 = v205;
              }
              while (v205);
            }
            else
            {
              int v9 = 6;
            }
          }
          else
          {
            if (strcmp(__s1, "authoringInformation"))
            {
              if (!strcmp(__s1, "alternativeValueSetIDRef")) {
                operator new();
              }
              goto LABEL_686;
            }
            unint64_t v241 = (void **)(v55 - 80);
            memset(buf, 0, 48);
            uint64_t v242 = (void **)(v55 - 56);
            if (*(unsigned char *)(v55 - 32))
            {
              if (*v241)
              {
                std::vector<std::shared_ptr<CA::ADMPackFormat>>::__clear[abi:ne180100]((uint64_t *)(v55 - 80));
                operator delete(*v241);
                *unint64_t v241 = 0;
                *(void *)(v55 - 72) = 0;
                *(void *)(v55 - 64) = 0;
              }
              *(_OWORD *)(v55 - 80) = 0u;
              *(void *)(v55 - 64) = *((void *)&buf[0].__r_.__value_.__l + 2);
              memset(buf, 0, 24);
              uint64_t v243 = *(void *)(v55 - 56);
              if (v243)
              {
                uint64_t v244 = *(void *)(v55 - 48);
                uint64_t v245 = *(void **)(v55 - 56);
                if (v244 != v243)
                {
                  do
                  {
                    v244 -= 120;
                    std::__destroy_at[abi:ne180100]<CA::ADMRenderer,0>(v244);
                  }
                  while (v244 != v243);
                  uint64_t v245 = *v242;
                }
                *(void *)(v55 - 48) = v243;
                operator delete(v245);
                *uint64_t v242 = 0;
                *(void *)(v55 - 48) = 0;
                *(void *)(v55 - 40) = 0;
              }
              *(std::string *)(v55 - 56) = buf[1];
              memset(&buf[1], 0, sizeof(std::string));
            }
            else
            {
              *unint64_t v241 = 0;
              *(void *)(v55 - 72) = 0;
              *(void *)(v55 - 64) = 0;
              *(void *)(v55 - 64) = *((void *)&buf[0].__r_.__value_.__l + 2);
              memset(buf, 0, 24);
              *uint64_t v242 = 0;
              *(void *)(v55 - 48) = 0;
              *(void *)(v55 - 40) = 0;
              *(std::string *)(v55 - 56) = buf[1];
              memset(&buf[1], 0, sizeof(std::string));
              *(unsigned char *)(v55 - 32) = 1;
            }
            *(void *)std::string __p = &buf[1];
            std::vector<CA::ADMRenderer>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            *(void *)std::string __p = buf;
            std::vector<std::shared_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            int v9 = 8;
          }
          goto LABEL_825;
        case 6:
          uint64_t v54 = *(void *)(*(void *)this + 8);
          if (strcmp(__s1, "screenCentrePosition"))
          {
            if (strcmp(__s1, "screenWidth"))
            {
              if (!strcmp(__s1, "aspectRatio")) {
                operator new();
              }
              goto LABEL_825;
            }
            if (!a3) {
              goto LABEL_825;
            }
            char v133 = *a3;
            if (!*a3) {
              goto LABEL_825;
            }
            char v112 = 0;
            uint64_t v134 = (unsigned __int8 **)(a3 + 2);
            while (1)
            {
              uint64_t v135 = (char *)*(v134 - 1);
              uint64_t v115 = (CA::ADMBuilder::Impl *)strcmp((const char *)v133, "azimuth");
              if (!v115) {
                break;
              }
              uint64_t v115 = (CA::ADMBuilder::Impl *)strcmp((const char *)v133, "X");
              if (!v115)
              {
                if (!*(unsigned char *)(v54 - 119) || *(unsigned char *)(v54 - 120))
                {
                  *(_WORD *)(v54 - 120) = 257;
                  std::string::basic_string[abi:ne180100]<0>(buf, v135);
                  uint64_t v115 = (CA::ADMBuilder::Impl *)CA::ADMBuilder::Impl::parse_float((int)this, buf);
                  goto LABEL_387;
                }
LABEL_389:
                char v112 = 1;
              }
LABEL_390:
              unint64_t v137 = *v134;
              v134 += 2;
              char v133 = v137;
              if (!v137)
              {
LABEL_391:
                if ((v112 & 1) == 0) {
                  goto LABEL_686;
                }
                uint64_t v138 = CA::ADMBuilder::Impl::log(v115);
                if (os_log_type_enabled(v138, OS_LOG_TYPE_ERROR))
                {
                  std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, v54 - 368, "");
                  if (__p[23] >= 0) {
                    uint64_t v139 = __p;
                  }
                  else {
                    uint64_t v139 = *(unsigned char **)__p;
                  }
                  LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                  *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseProgramme.cpp";
                  WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 141;
                  WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                  *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v139;
                  uint64_t v140 = "%25s:%-5d Conflicting coordinate systems used in programme '%s' reference screen";
                  goto LABEL_637;
                }
                goto LABEL_640;
              }
            }
            if (*(unsigned char *)(v54 - 119)) {
              BOOL v136 = *(unsigned char *)(v54 - 120) == 0;
            }
            else {
              BOOL v136 = 1;
            }
            if (v136)
            {
              *(_WORD *)(v54 - 120) = 256;
              std::string::basic_string[abi:ne180100]<0>(buf, v135);
              uint64_t v115 = (CA::ADMBuilder::Impl *)CA::ADMBuilder::Impl::parse_float((int)this, buf);
LABEL_387:
              *(_DWORD *)(v54 - 92) = v115;
              *(unsigned char *)(v54 - 88) = BYTE4(v115);
              if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
                operator delete(buf[0].__r_.__value_.__l.__data_);
              }
              goto LABEL_390;
            }
            goto LABEL_389;
          }
          if (!a3) {
            goto LABEL_825;
          }
          uint64_t v111 = *a3;
          if (!*a3) {
            goto LABEL_825;
          }
          char v112 = 0;
          long long v113 = (unsigned __int8 **)(a3 + 2);
          while (1)
          {
            uint64_t v114 = (char *)*(v113 - 1);
            uint64_t v115 = (CA::ADMBuilder::Impl *)strcmp((const char *)v111, "azimuth");
            if (!v115) {
              break;
            }
            uint64_t v115 = (CA::ADMBuilder::Impl *)strcmp((const char *)v111, "elevation");
            if (!v115)
            {
              if (!*(unsigned char *)(v54 - 119) || !*(unsigned char *)(v54 - 120))
              {
                *(_WORD *)(v54 - 120) = 256;
                std::string::basic_string[abi:ne180100]<0>(buf, v114);
                uint64_t v115 = (CA::ADMBuilder::Impl *)CA::ADMBuilder::Impl::parse_float((int)this, buf);
                goto LABEL_302;
              }
              goto LABEL_314;
            }
            uint64_t v115 = (CA::ADMBuilder::Impl *)strcmp((const char *)v111, "distance");
            if (!v115)
            {
              if (!*(unsigned char *)(v54 - 119) || !*(unsigned char *)(v54 - 120))
              {
                *(_WORD *)(v54 - 120) = 256;
                std::string::basic_string[abi:ne180100]<0>(buf, v114);
                uint64_t v115 = (CA::ADMBuilder::Impl *)CA::ADMBuilder::Impl::parse_float((int)this, buf);
LABEL_306:
                *(_DWORD *)(v54 - 100) = v115;
                *(unsigned char *)(v54 - 96) = BYTE4(v115);
LABEL_307:
                if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(buf[0].__r_.__value_.__l.__data_);
                }
                goto LABEL_315;
              }
              goto LABEL_314;
            }
            uint64_t v115 = (CA::ADMBuilder::Impl *)strcmp((const char *)v111, "X");
            if (!v115)
            {
              if (!*(unsigned char *)(v54 - 119) || *(unsigned char *)(v54 - 120))
              {
                *(_WORD *)(v54 - 120) = 257;
                std::string::basic_string[abi:ne180100]<0>(buf, v114);
                uint64_t v115 = (CA::ADMBuilder::Impl *)CA::ADMBuilder::Impl::parse_float((int)this, buf);
LABEL_298:
                *(_DWORD *)(v54 - 116) = v115;
                *(unsigned char *)(v54 - 112) = BYTE4(v115);
                goto LABEL_307;
              }
              goto LABEL_314;
            }
            uint64_t v115 = (CA::ADMBuilder::Impl *)strcmp((const char *)v111, "Y");
            if (!v115)
            {
              if (!*(unsigned char *)(v54 - 119) || *(unsigned char *)(v54 - 120))
              {
                *(_WORD *)(v54 - 120) = 257;
                std::string::basic_string[abi:ne180100]<0>(buf, v114);
                uint64_t v115 = (CA::ADMBuilder::Impl *)CA::ADMBuilder::Impl::parse_float((int)this, buf);
LABEL_302:
                *(_DWORD *)(v54 - 108) = v115;
                *(unsigned char *)(v54 - 104) = BYTE4(v115);
                goto LABEL_307;
              }
              goto LABEL_314;
            }
            uint64_t v115 = (CA::ADMBuilder::Impl *)strcmp((const char *)v111, "Z");
            if (!v115)
            {
              if (!*(unsigned char *)(v54 - 119) || *(unsigned char *)(v54 - 120))
              {
                *(_WORD *)(v54 - 120) = 257;
                std::string::basic_string[abi:ne180100]<0>(buf, v114);
                uint64_t v115 = (CA::ADMBuilder::Impl *)CA::ADMBuilder::Impl::parse_float((int)this, buf);
                goto LABEL_306;
              }
              goto LABEL_314;
            }
LABEL_315:
            uint64_t v117 = *v113;
            v113 += 2;
            uint64_t v111 = v117;
            if (!v117) {
              goto LABEL_391;
            }
          }
          if (*(unsigned char *)(v54 - 119)) {
            BOOL v116 = *(unsigned char *)(v54 - 120) == 0;
          }
          else {
            BOOL v116 = 1;
          }
          if (v116)
          {
            *(_WORD *)(v54 - 120) = 256;
            std::string::basic_string[abi:ne180100]<0>(buf, v114);
            uint64_t v115 = (CA::ADMBuilder::Impl *)CA::ADMBuilder::Impl::parse_float((int)this, buf);
            goto LABEL_298;
          }
LABEL_314:
          char v112 = 1;
          goto LABEL_315;
        case 8:
          uint64_t v56 = *(void *)(*(void *)this + 8);
          if (!strcmp(__s1, "referenceLayout"))
          {
            int v9 = 9;
          }
          else
          {
            if (strcmp(__s1, "renderer")) {
              goto LABEL_686;
            }
            memset(buf, 0, sizeof(buf));
            unint64_t v57 = *(void *)(v56 - 48);
            unint64_t v58 = *(void *)(v56 - 40);
            if (v57 >= v58)
            {
              uint64_t v190 = *(void *)(v56 - 56);
              unint64_t v191 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v57 - v190) >> 3);
              if (v191 + 1 > 0x222222222222222) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v192 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v58 - v190) >> 3);
              uint64_t v193 = 2 * v192;
              if (2 * v192 <= v191 + 1) {
                uint64_t v193 = v191 + 1;
              }
              if (v192 >= 0x111111111111111) {
                unint64_t v194 = 0x222222222222222;
              }
              else {
                unint64_t v194 = v193;
              }
              if (v194)
              {
                if (v194 > 0x222222222222222) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                unint64_t v195 = (char *)operator new(120 * v194);
              }
              else
              {
                unint64_t v195 = 0;
              }
              uint64_t v249 = &v195[120 * v194];
              std::construct_at[abi:ne180100]<CA::ADMRenderer,CA::ADMRenderer,CA::ADMRenderer*>((uint64_t)&v195[120 * v191], (long long *)buf);
              uint64_t v60 = v250 + 120;
              v252 = *(long long **)(v56 - 56);
              v251 = *(long long **)(v56 - 48);
              if (v251 == v252)
              {
                *(void *)(v56 - 56) = v250;
                *(void *)(v56 - 48) = v60;
                *(void *)(v56 - 40) = v249;
              }
              else
              {
                do
                {
                  v251 = (long long *)((char *)v251 - 120);
                  std::construct_at[abi:ne180100]<CA::ADMRenderer,CA::ADMRenderer,CA::ADMRenderer*>(v250 - 120, v251);
                }
                while (v251 != v252);
                v253 = *(long long **)(v56 - 56);
                v251 = *(long long **)(v56 - 48);
                *(void *)(v56 - 56) = v250;
                *(void *)(v56 - 48) = v60;
                *(void *)(v56 - 40) = v249;
                if (v251 != v253)
                {
                  do
                  {
                    v251 = (long long *)((char *)v251 - 120);
                    std::__destroy_at[abi:ne180100]<CA::ADMRenderer,0>((uint64_t)v251);
                  }
                  while (v251 != v253);
                  v251 = v253;
                }
              }
              if (v251) {
                operator delete(v251);
              }
            }
            else
            {
              std::construct_at[abi:ne180100]<CA::ADMRenderer,CA::ADMRenderer,CA::ADMRenderer*>(v57, (long long *)buf);
              uint64_t v60 = v59 + 120;
              *(void *)(v56 - 48) = v59 + 120;
            }
            *(void *)(v56 - 48) = v60;
            *(void *)std::string __p = &buf[4];
            std::vector<std::shared_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            if (buf[3].__r_.__value_.__s.__data_[16] && buf[3].__r_.__value_.__s.__data_[15] < 0) {
              operator delete((void *)buf[2].__r_.__value_.__r.__words[2]);
            }
            if (buf[2].__r_.__value_.__s.__data_[8] && buf[2].__r_.__value_.__s.__data_[7] < 0) {
              operator delete((void *)buf[1].__r_.__value_.__l.__size_);
            }
            if (buf[1].__r_.__value_.__s.__data_[0] && SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buf[0].__r_.__value_.__l.__data_);
            }
            uint64_t v254 = *(void *)(v56 - 48);
            v255 = (void ***)(*((void *)this + 47) - 24);
            memset(buf, 0, 24);
            std::vector<std::vector<std::string>>::push_back[abi:ne180100](v255, (uint64_t)buf);
            *(void *)std::string __p = buf;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            if (a3 && (unint64_t v256 = *a3) != 0)
            {
              uint64_t v257 = (unsigned __int8 **)(a3 + 2);
              do
              {
                v258 = (std::string::value_type *)*(v257 - 1);
                int v259 = strcmp((const char *)v256, "uri");
                uint64_t v260 = (std::string *)(v254 - 120);
                if (!v259
                  || (v261 = strcmp((const char *)v256, "name"), uint64_t v260 = (std::string *)(v254 - 88), !v261)
                  || (v262 = strcmp((const char *)v256, "version"), uint64_t v260 = (std::string *)(v254 - 56), !v262))
                {
                  std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>(v260, v258);
                }
                v263 = *v257;
                v257 += 2;
                unint64_t v256 = v263;
                int v9 = 11;
              }
              while (v263);
            }
            else
            {
              int v9 = 11;
            }
          }
          goto LABEL_825;
        case 9:
          if (!strcmp(__s1, "audioPackFormatIDRef")) {
            operator new();
          }
          goto LABEL_825;
        case 11:
          if (!strcmp(__s1, "audioPackFormatIDRef")) {
            operator new();
          }
          goto LABEL_825;
        case 14:
          if (!strcmp(__s1, "integratedLoudness")) {
            operator new();
          }
          if (!strcmp(__s1, "loudnessRange")) {
            operator new();
          }
          if (!strcmp(__s1, "maxTruePeak")) {
            operator new();
          }
          if (!strcmp(__s1, "maxMomentary")) {
            operator new();
          }
          if (!strcmp(__s1, "maxShortTerm")) {
            operator new();
          }
          if (!strcmp(__s1, "dialogueLoudness")) {
            operator new();
          }
          goto LABEL_825;
        case 21:
          uint64_t v52 = *(void *)(*(void *)this + 32);
          if (!strcmp(__s1, "audioContentLabel"))
          {
            uint64_t v107 = *(void *)(v52 - 16);
            CA::ADMBuilder::Impl::label_from_attributes(buf, a3);
            unint64_t v108 = *(void *)(v107 + 104);
            if (v108 >= *(void *)(v107 + 112))
            {
              long long v155 = std::vector<CA::ADMLabel>::__push_back_slow_path<CA::ADMLabel>((void **)(v107 + 96), (uint64_t)buf);
              int v156 = buf[2].__r_.__value_.__s.__data_[7];
              *(void *)(v107 + 104) = v155;
              if (v156 < 0) {
                operator delete((void *)buf[1].__r_.__value_.__l.__size_);
              }
            }
            else
            {
              *(unsigned char *)unint64_t v108 = 0;
              *(unsigned char *)(v108 + 24) = 0;
              if (buf[1].__r_.__value_.__s.__data_[0])
              {
                long long v109 = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
                *(void *)(v108 + 16) = *((void *)&buf[0].__r_.__value_.__l + 2);
                *(_OWORD *)unint64_t v108 = v109;
                memset(buf, 0, 24);
                *(unsigned char *)(v108 + 24) = 1;
              }
              long long v110 = *(_OWORD *)&buf[1].__r_.__value_.__r.__words[1];
              *(void *)(v108 + 48) = buf[2].__r_.__value_.__l.__data_;
              *(_OWORD *)(v108 + 32) = v110;
              memset(&buf[1].__r_.__value_.__r.__words[1], 0, sizeof(std::string));
              *(void *)(v107 + 104) = v108 + 56;
            }
            if (buf[1].__r_.__value_.__s.__data_[0] && SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buf[0].__r_.__value_.__l.__data_);
            }
            operator new();
          }
          if (!strcmp(__s1, "audioObjectIDRef")) {
            operator new();
          }
          if (!strcmp(__s1, "loudnessMetadata")) {
            CA::ADMBuilder::Impl::loudness_metadata_from_attributes((CA::ADMBuilder::Impl *)buf, a3);
          }
          uint64_t v53 = (CA::ADMBuilder::Impl *)strcmp(__s1, "dialogue");
          if (v53)
          {
            if (!strcmp(__s1, "alternativeValueSetIDRef")) {
              operator new();
            }
            goto LABEL_825;
          }
          uint64_t v196 = *(void *)(v52 - 16);
          if (*(unsigned char *)(v196 + 171))
          {
            uint64_t v197 = CA::ADMBuilder::Impl::log(v53);
            if (os_log_type_enabled(v197, OS_LOG_TYPE_ERROR))
            {
              std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, *(void *)(v52 - 16), "");
              std::string v198 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseContent.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 29;
              WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
              *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v198;
              _os_log_impl(&dword_18FEC0000, v197, OS_LOG_TYPE_ERROR, "%25s:%-5d Multiple dialogue sub-elements for content '%s'", (uint8_t *)buf, 0x1Cu);
              if ((__p[23] & 0x80000000) != 0) {
                operator delete(*(void **)__p);
              }
            }
            int v199 = -66590;
            goto LABEL_685;
          }
          *(_DWORD *)(v196 + 168) = 0x1000000;
          if (!a3) {
            goto LABEL_771;
          }
          uint64_t v275 = *a3;
          if (!*a3) {
            goto LABEL_771;
          }
          v276 = (unsigned __int8 **)(a3 + 2);
          while (1)
          {
            uint64_t v277 = (char *)*(v276 - 1);
            v278 = (CA::ADMBuilder::Impl *)strcmp((const char *)v275, "nonDialogueContentKind");
            if (!v278) {
              break;
            }
            uint64_t v279 = (CA::ADMBuilder::Impl *)strcmp((const char *)v275, "dialogueContentKind");
            if (!v279)
            {
              uint64_t v288 = *(void *)(v52 - 16);
              if (!*(unsigned char *)(v288 + 169) || *(unsigned char *)(v288 + 168) == 1)
              {
                *(_WORD *)(v288 + 168) = 257;
                std::string::basic_string[abi:ne180100]<0>(buf, v277);
                v289 = (CA::ADMBuilder::Impl *)CA::ADMBuilder::Impl::parse_uint((uint64_t)this, buf);
                uint64_t v290 = v289;
                if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(buf[0].__r_.__value_.__l.__data_);
                }
                if ((unint64_t)v290 >> 32)
                {
                  switch((int)v290)
                  {
                    case 0:
                      goto LABEL_733;
                    case 1:
                      goto LABEL_746;
                    case 2:
                      goto LABEL_745;
                    case 3:
LABEL_728:
                      uint64_t v291 = *(void *)(v52 - 16);
                      char v292 = 3;
                      goto LABEL_756;
                    default:
                      uint64_t v302 = CA::ADMBuilder::Impl::log(v289);
                      if (os_log_type_enabled(v302, OS_LOG_TYPE_ERROR))
                      {
                        std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, *(void *)(v52 - 16), "");
                        v303 = __p;
                        if (__p[23] < 0) {
                          v303 = *(unsigned char **)__p;
                        }
                        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseContent.cpp";
                        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 119;
                        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v303;
                        _os_log_impl(&dword_18FEC0000, v302, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown dialogue kind in content '%s'", (uint8_t *)buf, 0x1Cu);
                        if ((__p[23] & 0x80000000) != 0) {
                          operator delete(*(void **)__p);
                        }
                      }
                      int v301 = -66600;
                      goto LABEL_769;
                  }
                }
                goto LABEL_770;
              }
              uint64_t v295 = CA::ADMBuilder::Impl::log(v279);
              if (!os_log_type_enabled(v295, OS_LOG_TYPE_ERROR)) {
                goto LABEL_744;
              }
              std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, *(void *)(v52 - 16), "");
              v296 = __p;
              if (__p[23] < 0) {
                v296 = *(unsigned char **)__p;
              }
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseContent.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 93;
              WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
              *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v296;
              uint64_t v287 = v295;
LABEL_742:
              _os_log_impl(&dword_18FEC0000, v287, OS_LOG_TYPE_ERROR, "%25s:%-5d Conflicting dialogue type in content '%s'", (uint8_t *)buf, 0x1Cu);
              if ((__p[23] & 0x80000000) != 0) {
                operator delete(*(void **)__p);
              }
              goto LABEL_744;
            }
            uint64_t v280 = (CA::ADMBuilder::Impl *)strcmp((const char *)v275, "mixedContentKind");
            if (!v280)
            {
              uint64_t v281 = *(void *)(v52 - 16);
              if (!*(unsigned char *)(v281 + 169) || *(unsigned char *)(v281 + 168) == 2)
              {
                *(_WORD *)(v281 + 168) = 258;
                std::string::basic_string[abi:ne180100]<0>(buf, v277);
                v282 = (CA::ADMBuilder::Impl *)CA::ADMBuilder::Impl::parse_uint((uint64_t)this, buf);
                v283 = v282;
                if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(buf[0].__r_.__value_.__l.__data_);
                }
                if ((unint64_t)v283 >> 32)
                {
                  switch((int)v283)
                  {
                    case 0:
                      goto LABEL_733;
                    case 1:
                      goto LABEL_746;
                    case 2:
                      goto LABEL_745;
                    case 3:
                      goto LABEL_728;
                    default:
                      v304 = CA::ADMBuilder::Impl::log(v282);
                      if (os_log_type_enabled(v304, OS_LOG_TYPE_ERROR))
                      {
                        std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, *(void *)(v52 - 16), "");
                        uint64_t v305 = __p;
                        if (__p[23] < 0) {
                          uint64_t v305 = *(unsigned char **)__p;
                        }
                        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseContent.cpp";
                        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 156;
                        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                        *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v305;
                        _os_log_impl(&dword_18FEC0000, v304, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown dialogue kind in content '%s'", (uint8_t *)buf, 0x1Cu);
                        if ((__p[23] & 0x80000000) != 0) {
                          operator delete(*(void **)__p);
                        }
                      }
                      int v301 = -66599;
                      goto LABEL_769;
                  }
                }
                goto LABEL_770;
              }
              v297 = CA::ADMBuilder::Impl::log(v280);
              if (os_log_type_enabled(v297, OS_LOG_TYPE_ERROR))
              {
                std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, *(void *)(v52 - 16), "");
                v298 = __p;
                if (__p[23] < 0) {
                  v298 = *(unsigned char **)__p;
                }
                LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseContent.cpp";
                WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 130;
                WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v298;
                uint64_t v287 = v297;
                goto LABEL_742;
              }
LABEL_744:
              *((_DWORD *)this + 158) = -66602;
            }
LABEL_770:
            v306 = *v276;
            v276 += 2;
            uint64_t v275 = v306;
            if (!v306) {
LABEL_771:
            }
              operator new();
          }
          uint64_t v284 = *(void *)(v52 - 16);
          if (!*(unsigned char *)(v284 + 169) || !*(unsigned char *)(v284 + 168))
          {
            *(_WORD *)(v284 + 168) = 256;
            std::string::basic_string[abi:ne180100]<0>(buf, v277);
            v293 = (CA::ADMBuilder::Impl *)CA::ADMBuilder::Impl::parse_uint((uint64_t)this, buf);
            uint64_t v294 = v293;
            if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buf[0].__r_.__value_.__l.__data_);
            }
            if ((unint64_t)v294 >> 32)
            {
              switch((int)v294)
              {
                case 0:
LABEL_733:
                  *(unsigned char *)(*(void *)(v52 - 16) + 170) = 0;
                  goto LABEL_770;
                case 1:
LABEL_746:
                  uint64_t v291 = *(void *)(v52 - 16);
                  char v292 = 1;
                  goto LABEL_756;
                case 2:
LABEL_745:
                  uint64_t v291 = *(void *)(v52 - 16);
                  char v292 = 2;
                  goto LABEL_756;
                case 4:
                  uint64_t v291 = *(void *)(v52 - 16);
                  char v292 = 4;
                  goto LABEL_756;
                case 5:
                  uint64_t v291 = *(void *)(v52 - 16);
                  char v292 = 5;
                  goto LABEL_756;
                case 6:
                  uint64_t v291 = *(void *)(v52 - 16);
                  char v292 = 6;
LABEL_756:
                  *(unsigned char *)(v291 + 170) = v292;
                  break;
                default:
                  v299 = CA::ADMBuilder::Impl::log(v293);
                  if (os_log_type_enabled(v299, OS_LOG_TYPE_ERROR))
                  {
                    std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, *(void *)(v52 - 16), "");
                    v300 = __p;
                    if (__p[23] < 0) {
                      v300 = *(unsigned char **)__p;
                    }
                    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseContent.cpp";
                    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 82;
                    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v300;
                    _os_log_impl(&dword_18FEC0000, v299, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown non-dialogue kind in content '%s'", (uint8_t *)buf, 0x1Cu);
                    if ((__p[23] & 0x80000000) != 0) {
                      operator delete(*(void **)__p);
                    }
                  }
                  int v301 = -66601;
LABEL_769:
                  *((_DWORD *)this + 158) = v301;
                  break;
              }
            }
            goto LABEL_770;
          }
          v285 = CA::ADMBuilder::Impl::log(v278);
          if (!os_log_type_enabled(v285, OS_LOG_TYPE_ERROR)) {
            goto LABEL_744;
          }
          std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, *(void *)(v52 - 16), "");
          unint64_t v286 = __p;
          if (__p[23] < 0) {
            unint64_t v286 = *(unsigned char **)__p;
          }
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseContent.cpp";
          WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 42;
          WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
          *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v286;
          uint64_t v287 = v285;
          goto LABEL_742;
        default:
          if (v8 != 26) {
            goto LABEL_825;
          }
          uint64_t v30 = *(void *)(*(void *)this + 56);
          uint64_t v32 = *(void *)(v30 - 16);
          uint64_t v31 = *(std::__shared_weak_count **)(v30 - 8);
          if (v31) {
            atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (!strcmp(__s1, "audioPackFormatIDRef")) {
            operator new();
          }
          if (!strcmp(__s1, "audioObjectIDRef")) {
            operator new();
          }
          if (!strcmp(__s1, "audioObjectLabel"))
          {
            CA::ADMBuilder::Impl::label_from_attributes(buf, a3);
            unint64_t v187 = *(void *)(v32 + 200);
            if (v187 >= *(void *)(v32 + 208))
            {
              unint64_t v218 = std::vector<CA::ADMLabel>::__push_back_slow_path<CA::ADMLabel>((void **)(v32 + 192), (uint64_t)buf);
              int v219 = buf[2].__r_.__value_.__s.__data_[7];
              *(void *)(v32 + 200) = v218;
              if (v219 < 0) {
                operator delete((void *)buf[1].__r_.__value_.__l.__size_);
              }
            }
            else
            {
              *(unsigned char *)unint64_t v187 = 0;
              *(unsigned char *)(v187 + 24) = 0;
              if (buf[1].__r_.__value_.__s.__data_[0])
              {
                long long v188 = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
                *(void *)(v187 + 16) = *((void *)&buf[0].__r_.__value_.__l + 2);
                *(_OWORD *)unint64_t v187 = v188;
                memset(buf, 0, 24);
                *(unsigned char *)(v187 + 24) = 1;
              }
              long long v189 = *(_OWORD *)&buf[1].__r_.__value_.__r.__words[1];
              *(void *)(v187 + 48) = buf[2].__r_.__value_.__l.__data_;
              *(_OWORD *)(v187 + 32) = v189;
              memset(&buf[1].__r_.__value_.__r.__words[1], 0, sizeof(std::string));
              *(void *)(v32 + 200) = v187 + 56;
            }
            if (buf[1].__r_.__value_.__s.__data_[0] && SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buf[0].__r_.__value_.__l.__data_);
            }
            operator new();
          }
          if (!strcmp(__s1, "audioComplementaryObjectGroupLabel"))
          {
            CA::ADMBuilder::Impl::label_from_attributes(buf, a3);
            unint64_t v209 = *(void *)(v32 + 224);
            if (v209 >= *(void *)(v32 + 232))
            {
              uint64_t v264 = std::vector<CA::ADMLabel>::__push_back_slow_path<CA::ADMLabel>((void **)(v32 + 216), (uint64_t)buf);
              int v265 = buf[2].__r_.__value_.__s.__data_[7];
              *(void *)(v32 + 224) = v264;
              if (v265 < 0) {
                operator delete((void *)buf[1].__r_.__value_.__l.__size_);
              }
            }
            else
            {
              *(unsigned char *)unint64_t v209 = 0;
              *(unsigned char *)(v209 + 24) = 0;
              if (buf[1].__r_.__value_.__s.__data_[0])
              {
                long long v210 = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
                *(void *)(v209 + 16) = *((void *)&buf[0].__r_.__value_.__l + 2);
                *(_OWORD *)unint64_t v209 = v210;
                memset(buf, 0, 24);
                *(unsigned char *)(v209 + 24) = 1;
              }
              long long v211 = *(_OWORD *)&buf[1].__r_.__value_.__r.__words[1];
              *(void *)(v209 + 48) = buf[2].__r_.__value_.__l.__data_;
              *(_OWORD *)(v209 + 32) = v211;
              memset(&buf[1].__r_.__value_.__r.__words[1], 0, sizeof(std::string));
              *(void *)(v32 + 224) = v209 + 56;
            }
            if (buf[1].__r_.__value_.__s.__data_[0] && SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buf[0].__r_.__value_.__l.__data_);
            }
            operator new();
          }
          if (!strcmp(__s1, "audioComplementaryObjectIDRef")) {
            operator new();
          }
          if (!strcmp(__s1, "audioTrackUIDRef")) {
            operator new();
          }
          if (!strcmp(__s1, "audioObjectInteraction"))
          {
            CA::ADMBuilder::Impl::parse_interaction((CA::ADMBuilder::Impl *)buf, (const unsigned __int8 **)this, (const char **)a3);
            uint64_t v318 = *(void *)(*(void *)(*(void *)this + 56) - 16);
            v319 = (_OWORD *)(v318 + 288);
            long long v320 = *(_OWORD *)&buf[2].__r_.__value_.__l.__data_;
            if (*(unsigned char *)(v318 + 372))
            {
              *(_OWORD *)(v318 + 320) = *(_OWORD *)&buf[1].__r_.__value_.__r.__words[1];
              *(_OWORD *)(v318 + 336) = v320;
              *(_OWORD *)(v318 + 352) = *(_OWORD *)&buf[2].__r_.__value_.__r.__words[2];
              *(_WORD *)(v318 + 368) = buf[3].__r_.__value_.__r.__words[1];
              long long v321 = *(_OWORD *)&buf[0].__r_.__value_.__r.__words[2];
              _OWORD *v319 = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
              *(_OWORD *)(v318 + 304) = v321;
            }
            else
            {
              *(_OWORD *)(v318 + 320) = *(_OWORD *)&buf[1].__r_.__value_.__r.__words[1];
              *(_OWORD *)(v318 + 336) = v320;
              *(_OWORD *)(v318 + 352) = *(_OWORD *)&buf[2].__r_.__value_.__r.__words[2];
              *(_DWORD *)(v318 + 368) = buf[3].__r_.__value_.__r.__words[1];
              long long v436 = *(_OWORD *)&buf[0].__r_.__value_.__r.__words[2];
              _OWORD *v319 = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
              *(_OWORD *)(v318 + 304) = v436;
              *(unsigned char *)(v318 + 372) = 1;
            }
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::clear((uint64_t)this + 800);
            int v9 = 33;
            if (!v31) {
              goto LABEL_825;
            }
            goto LABEL_1138;
          }
          if (!strcmp(__s1, "gain"))
          {
            if (!*(unsigned char *)(v32 + 384)) {
              *(unsigned char *)(v32 + 384) = 1;
            }
            *(void *)(v32 + 376) = 0;
            if (a3)
            {
              uint64_t v322 = *a3;
              if (*a3)
              {
                v323 = (unsigned __int8 **)(a3 + 2);
                do
                {
                  if (!strcmp((const char *)v322, "gainUnit"))
                  {
                    std::string::basic_string[abi:ne180100]<0>(buf, (char *)*(v323 - 1));
                    unsigned __int16 v324 = CA::ADMBuilder::Impl::parse_gain_unit((uint64_t)this, (uint64_t *)buf);
                    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(buf[0].__r_.__value_.__l.__data_);
                    }
                    if (v324 >= 0x100u) {
                      *(unsigned char *)(v32 + 380) = v324;
                    }
                  }
                  uint64_t v325 = *v323;
                  v323 += 2;
                  uint64_t v322 = v325;
                }
                while (v325);
              }
            }
            operator new();
          }
          if (!strcmp(__s1, "headLocked")) {
            operator new();
          }
          uint64_t v33 = (char *)strcmp(__s1, "positionOffset");
          if (v33)
          {
            if (!strcmp(__s1, "mute")) {
              operator new();
            }
            if (!strcmp(__s1, "alternativeValueSet"))
            {
              buf[0].__r_.__value_.__s.__data_[0] = 0;
              buf[1].__r_.__value_.__s.__data_[0] = 0;
              BYTE4(v583) = 0;
              BYTE8(v583) = 0;
              LOBYTE(v584) = 0;
              WORD2(v584) = 0;
              BYTE8(v584) = 0;
              BYTE12(v584) = 0;
              LOBYTE(v585) = 0;
              BYTE4(v585) = 0;
              BYTE8(v585) = 0;
              BYTE12(v585) = 0;
              LOWORD(v586) = 0;
              memset(&buf[1].__r_.__value_.__r.__words[1], 0, 25);
              if (a3)
              {
                uint64_t v34 = *a3;
                if (*a3)
                {
                  uint64_t v35 = (unsigned __int8 **)(a3 + 2);
                  do
                  {
                    if (!strcmp((const char *)v34, "alternativeValueSetID")) {
                      std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>(buf, (std::string::value_type *)*(v35 - 1));
                    }
                    uint64_t v36 = *v35;
                    v35 += 2;
                    uint64_t v34 = v36;
                  }
                  while (v36);
                }
              }
              unint64_t v37 = *(void *)(v32 + 432);
              unint64_t v38 = *(void *)(v32 + 440);
              if (v37 >= v38)
              {
                uint64_t v491 = *(void *)(v32 + 424);
                unint64_t v492 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - v491) >> 6);
                unint64_t v493 = v492 + 1;
                if (v492 + 1 > 0x155555555555555) {
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v494 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - v491) >> 6);
                if (2 * v494 > v493) {
                  unint64_t v493 = 2 * v494;
                }
                if (v494 >= 0xAAAAAAAAAAAAAALL) {
                  unint64_t v495 = 0x155555555555555;
                }
                else {
                  unint64_t v495 = v493;
                }
                if (v495)
                {
                  if (v495 > 0x155555555555555) {
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  }
                  v496 = (char *)operator new(192 * v495);
                }
                else
                {
                  v496 = 0;
                }
                uint64_t v514 = (std::string *)&v496[192 * v492];
                v514->__r_.__value_.__s.__data_[0] = 0;
                v514[1].__r_.__value_.__s.__data_[0] = 0;
                if (buf[1].__r_.__value_.__s.__data_[0])
                {
                  *uint64_t v514 = buf[0];
                  memset(buf, 0, 24);
                  v514[1].__r_.__value_.__s.__data_[0] = 1;
                }
                uint64_t v515 = &v496[192 * v492];
                *((void *)v515 + 6) = buf[2].__r_.__value_.__l.__data_;
                *((_OWORD *)v515 + 2) = *(_OWORD *)&buf[1].__r_.__value_.__r.__words[1];
                v516 = &v496[192 * v495];
                memset(&buf[1].__r_.__value_.__r.__words[1], 0, sizeof(std::string));
                *(_OWORD *)(v515 + 120) = v582;
                *(_OWORD *)(v515 + 104) = *(_OWORD *)&buf[4].__r_.__value_.__r.__words[1];
                *(_OWORD *)(v515 + 88) = *(_OWORD *)&buf[3].__r_.__value_.__r.__words[2];
                *(_OWORD *)(v515 + 72) = *(_OWORD *)&buf[3].__r_.__value_.__l.__data_;
                *((_WORD *)v515 + 92) = (_WORD)v586;
                *(_OWORD *)(v515 + 168) = v585;
                *(_OWORD *)(v515 + 152) = v584;
                *(_OWORD *)(v515 + 136) = v583;
                *(_OWORD *)(v515 + 56) = *(_OWORD *)&buf[2].__r_.__value_.__r.__words[1];
                unint64_t v46 = v514 + 8;
                uint64_t v517 = *(char **)(v32 + 424);
                uint64_t v518 = *(char **)(v32 + 432);
                if (v518 == v517)
                {
                  *(void *)(v32 + 424) = v514;
                  *(void *)(v32 + 432) = v46;
                  *(void *)(v32 + 440) = v516;
                }
                else
                {
                  uint64_t v519 = 0;
                  do
                  {
                    v520 = &v514[v519];
                    v514[v519 - 8].__r_.__value_.__s.__data_[0] = 0;
                    v521 = &v518[v519 * 24];
                    v514[v519 - 7].__r_.__value_.__s.__data_[0] = 0;
                    if (v518[v519 * 24 - 168])
                    {
                      uint64_t v522 = v521 - 192;
                      long long v523 = *((_OWORD *)v521 - 12);
                      *((void *)&v514[v519 - 7] - 1) = *((void *)v521 - 22);
                      *(_OWORD *)&v514[v519 - 8].__r_.__value_.__l.__data_ = v523;
                      *((void *)v522 + 1) = 0;
                      *((void *)v522 + 2) = 0;
                      *(void *)uint64_t v522 = 0;
                      v520[-7].__r_.__value_.__s.__data_[0] = 1;
                    }
                    v520[-7].__r_.__value_.__l.__size_ = 0;
                    v520[-7].__r_.__value_.__r.__words[2] = 0;
                    v520[-6].__r_.__value_.__r.__words[0] = 0;
                    *(_OWORD *)&v520[-7].__r_.__value_.__r.__words[1] = *((_OWORD *)v521 - 10);
                    v520[-6].__r_.__value_.__r.__words[0] = *((void *)v521 - 18);
                    *((void *)v521 - 19) = 0;
                    *((void *)v521 - 18) = 0;
                    *((void *)v521 - 20) = 0;
                    long long v524 = *(_OWORD *)(v521 - 104);
                    long long v525 = *(_OWORD *)(v521 - 88);
                    long long v526 = *(_OWORD *)(v521 - 72);
                    *(_OWORD *)&v520[-5].__r_.__value_.__l.__data_ = *(_OWORD *)(v521 - 120);
                    *(_OWORD *)&v520[-3].__r_.__value_.__l.__data_ = v526;
                    *(_OWORD *)&v520[-4].__r_.__value_.__r.__words[1] = v525;
                    *(_OWORD *)&v520[-5].__r_.__value_.__r.__words[2] = v524;
                    long long v527 = *(_OWORD *)(v521 - 40);
                    long long v528 = *(_OWORD *)(v521 - 24);
                    __int16 v529 = *((_WORD *)v521 - 4);
                    *(_OWORD *)&v520[-3].__r_.__value_.__r.__words[2] = *(_OWORD *)(v521 - 56);
                    LOWORD(v520[-1].__r_.__value_.__r.__words[2]) = v529;
                    *(_OWORD *)&v520[-1].__r_.__value_.__l.__data_ = v528;
                    *(_OWORD *)&v520[-2].__r_.__value_.__r.__words[1] = v527;
                    *(_OWORD *)&v520[-6].__r_.__value_.__r.__words[1] = *(_OWORD *)(v521 - 136);
                    v519 -= 8;
                  }
                  while (&v518[v519 * 24] != v517);
                  uint64_t v530 = *(char **)(v32 + 424);
                  uint64_t v518 = *(char **)(v32 + 432);
                  *(void *)(v32 + 424) = &v514[v519];
                  *(void *)(v32 + 432) = v46;
                  *(void *)(v32 + 440) = v516;
                  if (v518 != v530)
                  {
                    do
                    {
                      v518 -= 192;
                      std::__destroy_at[abi:ne180100]<CA::ADMAlternativeValueSet,0>((uint64_t)v518);
                    }
                    while (v518 != v530);
                    uint64_t v518 = v530;
                  }
                }
                if (v518) {
                  operator delete(v518);
                }
              }
              else
              {
                *(unsigned char *)unint64_t v37 = 0;
                *(unsigned char *)(v37 + 24) = 0;
                if (buf[1].__r_.__value_.__s.__data_[0])
                {
                  long long v39 = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
                  *(void *)(v37 + 16) = *((void *)&buf[0].__r_.__value_.__l + 2);
                  *(_OWORD *)unint64_t v37 = v39;
                  memset(buf, 0, 24);
                  *(unsigned char *)(v37 + 24) = 1;
                }
                *(void *)(v37 + 32) = 0;
                *(void *)(v37 + 40) = 0;
                *(void *)(v37 + 48) = 0;
                *(_OWORD *)(v37 + 32) = *(_OWORD *)&buf[1].__r_.__value_.__r.__words[1];
                *(void *)(v37 + 48) = buf[2].__r_.__value_.__l.__data_;
                memset(&buf[1].__r_.__value_.__r.__words[1], 0, sizeof(std::string));
                *(_OWORD *)(v37 + 56) = *(_OWORD *)&buf[2].__r_.__value_.__r.__words[1];
                long long v40 = *(_OWORD *)&buf[3].__r_.__value_.__r.__words[2];
                long long v41 = *(_OWORD *)&buf[4].__r_.__value_.__r.__words[1];
                long long v42 = v582;
                *(_OWORD *)(v37 + 72) = *(_OWORD *)&buf[3].__r_.__value_.__l.__data_;
                *(_OWORD *)(v37 + 120) = v42;
                *(_OWORD *)(v37 + 104) = v41;
                *(_OWORD *)(v37 + 88) = v40;
                long long v43 = v584;
                long long v44 = v585;
                __int16 v45 = (__int16)v586;
                *(_OWORD *)(v37 + 136) = v583;
                *(_WORD *)(v37 + 184) = v45;
                *(_OWORD *)(v37 + 168) = v44;
                *(_OWORD *)(v37 + 152) = v43;
                unint64_t v46 = (std::string *)(v37 + 192);
                *(void *)(v32 + 432) = v37 + 192;
              }
              *(void *)(v32 + 432) = v46;
              std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::clear((uint64_t)this + 840);
              *(void *)std::string __p = &buf[1].__r_.__value_.__l.__size_;
              std::vector<CA::ADMLabel>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              if (buf[1].__r_.__value_.__s.__data_[0] && SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
                operator delete(buf[0].__r_.__value_.__l.__data_);
              }
              int v9 = 36;
              if (!v31) {
                goto LABEL_825;
              }
LABEL_1138:
              std::__shared_weak_count::__release_shared[abi:ne180100](v31);
              goto LABEL_825;
            }
LABEL_1137:
            int v9 = 1;
            if (!v31) {
              goto LABEL_825;
            }
            goto LABEL_1138;
          }
          *((void *)this + 76) = 0;
          if (a3)
          {
            uint64_t v33 = (char *)*a3;
            if (*a3)
            {
              int v437 = 0;
              unsigned __int8 v438 = 0;
              uint64_t v439 = (unsigned __int8 **)(a3 + 2);
              while (1)
              {
                v440 = (char *)*(v439 - 1);
                if (!strcmp(v33, "coordinate"))
                {
                  std::string::basic_string[abi:ne180100]<0>(buf, v440);
                  v441 = (CA::ADMBuilder::Impl *)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)this + 800, (unsigned __int8 *)buf, (uint64_t)buf);
                  char v442 = (char)v441;
                  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(buf[0].__r_.__value_.__l.__data_);
                  }
                  if (v442)
                  {
                    if (!strcmp(v440, "azimuth"))
                    {
                      unsigned __int8 v438 = 0;
                      *(_DWORD *)(v32 + 392) = 0;
                      int v437 = 1;
                      *(unsigned char *)(v32 + 396) = 1;
                      uint64_t v449 = v32 + 392;
LABEL_959:
                      *((void *)this + 76) = v449;
                      goto LABEL_960;
                    }
                    if (!strcmp(v440, "elevation"))
                    {
                      unsigned __int8 v438 = 0;
                      *(_DWORD *)(v32 + 400) = 0;
                      int v437 = 1;
                      *(unsigned char *)(v32 + 404) = 1;
                      uint64_t v449 = v32 + 400;
                      goto LABEL_959;
                    }
                    if (!strcmp(v440, "distance"))
                    {
                      unsigned __int8 v438 = 0;
                      *(_DWORD *)(v32 + 408) = 0;
                      int v437 = 1;
                      *(unsigned char *)(v32 + 412) = 1;
                      uint64_t v449 = v32 + 408;
                      goto LABEL_959;
                    }
                    if (!strcmp(v440, "X"))
                    {
                      *(_DWORD *)(v32 + 392) = 0;
                      unsigned __int8 v438 = 1;
                      *(unsigned char *)(v32 + 396) = 1;
                      uint64_t v451 = v32 + 392;
LABEL_965:
                      *((void *)this + 76) = v451;
                      int v437 = 1;
                      goto LABEL_960;
                    }
                    if (!strcmp(v440, "Y"))
                    {
                      *(_DWORD *)(v32 + 400) = 0;
                      unsigned __int8 v438 = 1;
                      *(unsigned char *)(v32 + 404) = 1;
                      uint64_t v451 = v32 + 400;
                      goto LABEL_965;
                    }
                    uint64_t v446 = (CA::ADMBuilder::Impl *)strcmp(v440, "Z");
                    if (!v446)
                    {
                      *(_DWORD *)(v32 + 408) = 0;
                      unsigned __int8 v438 = 1;
                      *(unsigned char *)(v32 + 412) = 1;
                      uint64_t v451 = v32 + 408;
                      goto LABEL_965;
                    }
                    uint64_t v447 = CA::ADMBuilder::Impl::log(v446);
                    if (os_log_type_enabled(v447, OS_LOG_TYPE_ERROR))
                    {
                      std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, v32, "");
                      uint64_t v448 = __p;
                      if (__p[23] < 0) {
                        uint64_t v448 = *(unsigned char **)__p;
                      }
                      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseObject.cpp";
                      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 100;
                      WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                      *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v448;
                      _os_log_impl(&dword_18FEC0000, v447, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown coordinate given for position offset of object '%s'", (uint8_t *)buf, 0x1Cu);
                      if ((__p[23] & 0x80000000) != 0) {
                        operator delete(*(void **)__p);
                      }
                    }
                    int v445 = -66593;
                  }
                  else
                  {
                    v443 = CA::ADMBuilder::Impl::log(v441);
                    if (os_log_type_enabled(v443, OS_LOG_TYPE_ERROR))
                    {
                      std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, v32, "");
                      v444 = __p;
                      if (__p[23] < 0) {
                        v444 = *(unsigned char **)__p;
                      }
                      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseObject.cpp";
                      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 106;
                      WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                      *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v444;
                      _os_log_impl(&dword_18FEC0000, v443, OS_LOG_TYPE_ERROR, "%25s:%-5d Multiple coordinates for position offset of object '%s'", (uint8_t *)buf, 0x1Cu);
                      if ((__p[23] & 0x80000000) != 0) {
                        operator delete(*(void **)__p);
                      }
                    }
                    int v445 = -66589;
                  }
                  *((_DWORD *)this + 158) = v445;
                }
LABEL_960:
                v450 = *v439;
                v439 += 2;
                uint64_t v33 = (char *)v450;
                if (!v450) {
                  goto LABEL_1009;
                }
              }
            }
          }
          unsigned __int8 v438 = 0;
          int v437 = 0;
LABEL_1009:
          if (*((_DWORD *)this + 158)) {
            goto LABEL_1137;
          }
          if (!*((void *)this + 76))
          {
            uint64_t v497 = CA::ADMBuilder::Impl::log((CA::ADMBuilder::Impl *)v33);
            if (os_log_type_enabled(v497, OS_LOG_TYPE_ERROR))
            {
              std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, v32, "");
              uint64_t v498 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseObject.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 115;
              WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
              *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v498;
              _os_log_impl(&dword_18FEC0000, v497, OS_LOG_TYPE_ERROR, "%25s:%-5d Missing coordinate for position offset of object '%s'", (uint8_t *)buf, 0x1Cu);
              if ((__p[23] & 0x80000000) != 0) {
                operator delete(*(void **)__p);
              }
            }
            int v469 = -66592;
            goto LABEL_1136;
          }
          if (v437)
          {
            if (*(unsigned char *)(v32 + 417))
            {
              if (*(unsigned __int8 *)(v32 + 416) != v438)
              {
                v467 = CA::ADMBuilder::Impl::log((CA::ADMBuilder::Impl *)v33);
                if (os_log_type_enabled(v467, OS_LOG_TYPE_ERROR))
                {
                  std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, v32, "");
                  uint64_t v468 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
                  LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                  *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseObject.cpp";
                  WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 123;
                  WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                  *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v468;
                  _os_log_impl(&dword_18FEC0000, v467, OS_LOG_TYPE_ERROR, "%25s:%-5d Conflicting coordinate systems for position offset of object '%s'", (uint8_t *)buf, 0x1Cu);
                  if ((__p[23] & 0x80000000) != 0) {
                    operator delete(*(void **)__p);
                  }
                }
                int v469 = -66603;
LABEL_1136:
                *((_DWORD *)this + 158) = v469;
                goto LABEL_1137;
              }
            }
            else
            {
              *(_WORD *)(v32 + 416) = v438 | 0x100;
              if (*((_DWORD *)this + 158) || !*((void *)this + 76)) {
                goto LABEL_1137;
              }
            }
            operator new();
          }
          v500 = CA::ADMBuilder::Impl::log((CA::ADMBuilder::Impl *)v33);
          if (os_log_type_enabled(v500, OS_LOG_TYPE_ERROR))
          {
            std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)__p, v32, "");
            v501 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseObject.cpp";
            WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 132;
            WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
            *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v501;
            _os_log_impl(&dword_18FEC0000, v500, OS_LOG_TYPE_ERROR, "%25s:%-5d Ambiguous coordinate system for position offset of object '%s'", (uint8_t *)buf, 0x1Cu);
            if ((__p[23] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
          }
          int v469 = -66597;
          goto LABEL_1136;
      }
    }
    if (!strcmp(__s1, "audioFormatExtended"))
    {
      if (!*(void *)this) {
        operator new();
      }
      goto LABEL_686;
    }
    int v9 = 0;
LABEL_825:
    v326 = (char *)*((void *)this + 3);
    v327 = (char *)*((void *)this + 2);
    uint64_t v328 = v326 - v327;
    if (v326 == v327) {
      uint64_t v329 = 0;
    }
    else {
      uint64_t v329 = ((v326 - v327) << 7) - 1;
    }
    unint64_t v331 = *((void *)this + 5);
    uint64_t v330 = *((void *)this + 6);
    unint64_t v332 = v330 + v331;
    if (v329 != v330 + v331) {
      goto LABEL_908;
    }
    if (v331 >= 0x400)
    {
      *((void *)this + 5) = v331 - 1024;
      uint64_t v335 = *(void *)v327;
      v333 = v327 + 8;
      uint64_t v334 = v335;
      *((void *)this + 2) = v333;
      if (*((char **)this + 4) == v326)
      {
        unint64_t v336 = *((void *)this + 1);
        uint64_t v337 = (uint64_t)&v333[-v336];
        if ((unint64_t)v333 <= v336)
        {
          uint64_t v366 = (uint64_t)&v326[-v336];
          BOOL v116 = v366 == 0;
          uint64_t v367 = v366 >> 2;
          if (v116) {
            unint64_t v368 = 1;
          }
          else {
            unint64_t v368 = v367;
          }
          uint64_t v369 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v368);
          unint64_t v371 = &v369[8 * (v368 >> 2)];
          uint64_t v372 = (uint64_t *)*((void *)this + 2);
          v326 = v371;
          uint64_t v373 = *((void *)this + 3) - (void)v372;
          if (v373)
          {
            v326 = &v371[v373 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v374 = 8 * (v373 >> 3);
            v375 = &v369[8 * (v368 >> 2)];
            do
            {
              uint64_t v376 = *v372++;
              *(void *)v375 = v376;
              v375 += 8;
              v374 -= 8;
            }
            while (v374);
          }
          uint64_t v377 = (void *)*((void *)this + 1);
          *((void *)this + 1) = v369;
          *((void *)this + 2) = v371;
          *((void *)this + 3) = v326;
          *((void *)this + 4) = &v369[8 * v370];
          if (v377)
          {
            operator delete(v377);
            v326 = (char *)*((void *)this + 3);
          }
        }
        else
        {
          uint64_t v338 = v337 >> 3;
          BOOL v339 = v337 >> 3 < -1;
          uint64_t v340 = (v337 >> 3) + 2;
          if (v339) {
            uint64_t v341 = v340;
          }
          else {
            uint64_t v341 = v338 + 1;
          }
          uint64_t v342 = -(v341 >> 1);
          uint64_t v343 = v341 >> 1;
          v344 = &v333[-8 * v343];
          int64_t v345 = v326 - v333;
          if (v326 == v333)
          {
            unint64_t v346 = v326;
          }
          else
          {
            memmove(&v333[-8 * v343], v333, v326 - v333);
            unint64_t v346 = (char *)*((void *)this + 2);
          }
          v326 = &v344[v345];
          *((void *)this + 2) = &v346[8 * v342];
          *((void *)this + 3) = &v344[v345];
        }
      }
      *(void *)v326 = v334;
LABEL_906:
      *((void *)this + 3) += 8;
LABEL_907:
      v327 = (char *)*((void *)this + 2);
      uint64_t v330 = *((void *)this + 6);
      unint64_t v332 = *((void *)this + 5) + v330;
LABEL_908:
      *(_DWORD *)(*(void *)&v327[(v332 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v332 & 0x3FF)) = v9;
      *((void *)this + 6) = v330 + 1;
      return;
    }
    uint64_t v347 = v328 >> 3;
    unint64_t v348 = (char *)*((void *)this + 4);
    uint64_t v349 = (char *)*((void *)this + 1);
    uint64_t v350 = v348 - v349;
    if (v328 >> 3 < (unint64_t)((v348 - v349) >> 3))
    {
      BOOL v351 = v348 == v326;
      unint64_t v352 = operator new(0x1000uLL);
      unint64_t v353 = v352;
      if (v351)
      {
        if (v349 == v327)
        {
          if (v326 == v327) {
            unint64_t v378 = 1;
          }
          else {
            unint64_t v378 = v350 >> 2;
          }
          uint64_t v379 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v378);
          v327 = &v379[8 * ((v378 + 3) >> 2)];
          BOOL v381 = (uint64_t *)*((void *)this + 2);
          uint64_t v382 = v327;
          uint64_t v383 = *((void *)this + 3) - (void)v381;
          if (v383)
          {
            uint64_t v382 = &v327[v383 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v384 = 8 * (v383 >> 3);
            int64_t v385 = v327;
            do
            {
              uint64_t v386 = *v381++;
              *(void *)int64_t v385 = v386;
              v385 += 8;
              v384 -= 8;
            }
            while (v384);
          }
          unint64_t v387 = (void *)*((void *)this + 1);
          *((void *)this + 1) = v379;
          *((void *)this + 2) = v327;
          *((void *)this + 3) = v382;
          *((void *)this + 4) = &v379[8 * v380];
          if (v387)
          {
            operator delete(v387);
            v327 = (char *)*((void *)this + 2);
          }
        }
        *((void *)v327 - 1) = v353;
        v388 = (char *)*((void *)this + 2);
        uint64_t v389 = (char *)*((void *)this + 3);
        *((void *)this + 2) = v388 - 8;
        uint64_t v390 = *((void *)v388 - 1);
        *((void *)this + 2) = v388;
        if (v389 == *((char **)this + 4))
        {
          unint64_t v391 = *((void *)this + 1);
          uint64_t v392 = (uint64_t)&v388[-v391];
          if ((unint64_t)v388 <= v391)
          {
            uint64_t v423 = (uint64_t)&v389[-v391];
            BOOL v116 = v423 == 0;
            uint64_t v424 = v423 >> 2;
            if (v116) {
              unint64_t v425 = 1;
            }
            else {
              unint64_t v425 = v424;
            }
            unint64_t v426 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v425);
            uint64_t v428 = &v426[8 * (v425 >> 2)];
            uint64_t v429 = (uint64_t *)*((void *)this + 2);
            uint64_t v389 = v428;
            uint64_t v430 = *((void *)this + 3) - (void)v429;
            if (v430)
            {
              uint64_t v389 = &v428[v430 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v431 = 8 * (v430 >> 3);
              unint64_t v432 = &v426[8 * (v425 >> 2)];
              do
              {
                uint64_t v433 = *v429++;
                *(void *)unint64_t v432 = v433;
                v432 += 8;
                v431 -= 8;
              }
              while (v431);
            }
            uint64_t v434 = (void *)*((void *)this + 1);
            *((void *)this + 1) = v426;
            *((void *)this + 2) = v428;
            *((void *)this + 3) = v389;
            *((void *)this + 4) = &v426[8 * v427];
            if (v434)
            {
              operator delete(v434);
              uint64_t v389 = (char *)*((void *)this + 3);
            }
          }
          else
          {
            uint64_t v393 = v392 >> 3;
            BOOL v339 = v392 >> 3 < -1;
            uint64_t v394 = (v392 >> 3) + 2;
            if (v339) {
              uint64_t v395 = v394;
            }
            else {
              uint64_t v395 = v393 + 1;
            }
            uint64_t v396 = -(v395 >> 1);
            uint64_t v397 = v395 >> 1;
            uint64_t v398 = &v388[-8 * v397];
            int64_t v399 = v389 - v388;
            if (v389 != v388)
            {
              memmove(&v388[-8 * v397], v388, v389 - v388);
              v388 = (char *)*((void *)this + 2);
            }
            uint64_t v389 = &v398[v399];
            *((void *)this + 2) = &v388[8 * v396];
            *((void *)this + 3) = &v398[v399];
          }
        }
        *(void *)uint64_t v389 = v390;
      }
      else
      {
        *(void *)v326 = v352;
      }
      goto LABEL_906;
    }
    if (v348 == v349) {
      unint64_t v354 = 1;
    }
    else {
      unint64_t v354 = v350 >> 2;
    }
    uint64_t v355 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v354);
    uint64_t v357 = v356;
    unint64_t v358 = &v355[8 * v347];
    *(void *)&long long v359 = v355;
    *((void *)&v359 + 1) = v358;
    long long v574 = v359;
    uint64_t v360 = operator new(0x1000uLL);
    *(void *)&long long v361 = v358;
    *((void *)&v361 + 1) = &v355[8 * v357];
    if (v347 == v357)
    {
      uint64_t v362 = 8 * v347;
      *(void *)&long long v363 = v574;
      if (v328 >= 1)
      {
        uint64_t v364 = v362 >> 3;
        if (v364 >= -1) {
          unint64_t v365 = v364 + 1;
        }
        else {
          unint64_t v365 = v364 + 2;
        }
        v358 -= 8 * (v365 >> 1);
        *(void *)&long long v361 = v358;
        *((void *)&v363 + 1) = v358;
        goto LABEL_880;
      }
      uint64_t v400 = v362 >> 2;
      if (v326 == v327) {
        unint64_t v401 = 1;
      }
      else {
        unint64_t v401 = v400;
      }
      unint64_t v402 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v401);
      unint64_t v358 = &v402[8 * (v401 >> 2)];
      *(void *)&long long v363 = v402;
      *((void *)&v363 + 1) = v358;
      *(void *)&long long v361 = v358;
      *((void *)&v361 + 1) = &v402[8 * v403];
      if (!v355) {
        goto LABEL_880;
      }
      long long v567 = v361;
      long long v574 = v363;
      operator delete(v355);
      long long v361 = v567;
    }
    long long v363 = v574;
LABEL_880:
    *(void *)unint64_t v358 = v360;
    *(void *)&long long v361 = v361 + 8;
    for (uint64_t i = *((void *)this + 3); i != *((void *)this + 2); i -= 8)
    {
      v405 = (void *)*((void *)&v363 + 1);
      if (*((void *)&v363 + 1) == (void)v363)
      {
        v407 = (unsigned char *)v361;
        if ((unint64_t)v361 >= *((void *)&v361 + 1))
        {
          if (*((void *)&v361 + 1) == *((void *)&v363 + 1)) {
            unint64_t v412 = 1;
          }
          else {
            unint64_t v412 = (uint64_t)(*((void *)&v361 + 1) - *((void *)&v363 + 1)) >> 2;
          }
          v413 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v412);
          v406 = &v413[(2 * v412 + 6) & 0xFFFFFFFFFFFFFFF8];
          v415 = v406;
          uint64_t v416 = v407 - (unsigned char *)v405;
          if (v407 != (unsigned char *)v405)
          {
            v415 = &v406[v416 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v417 = 8 * (v416 >> 3);
            uint64_t v418 = v406;
            uint64_t v419 = v405;
            do
            {
              uint64_t v420 = *v419++;
              *(void *)uint64_t v418 = v420;
              v418 += 8;
              v417 -= 8;
            }
            while (v417);
          }
          *(void *)&long long v363 = v413;
          *((void *)&v363 + 1) = v406;
          *(void *)&long long v361 = v415;
          *((void *)&v361 + 1) = &v413[8 * v414];
          if (v405)
          {
            long long v568 = v361;
            long long v576 = v363;
            operator delete(v405);
            long long v361 = v568;
            long long v363 = v576;
          }
        }
        else
        {
          uint64_t v408 = (uint64_t)(*((void *)&v361 + 1) - v361) >> 3;
          if (v408 >= -1) {
            uint64_t v409 = v408 + 1;
          }
          else {
            uint64_t v409 = v408 + 2;
          }
          uint64_t v410 = v409 >> 1;
          uint64_t v411 = v361 + 8 * (v409 >> 1);
          v406 = (char *)(v411 - (v361 - *((void *)&v363 + 1)));
          if ((void)v361 == *((void *)&v363 + 1))
          {
            v407 = (unsigned char *)*((void *)&v363 + 1);
          }
          else
          {
            uint64_t v569 = *((void *)&v361 + 1);
            uint64_t v575 = v363;
            memmove((void *)(v411 - (v361 - *((void *)&v363 + 1))), *((const void **)&v363 + 1), v361 - *((void *)&v363 + 1));
            *((void *)&v361 + 1) = v569;
            *(void *)&long long v363 = v575;
          }
          *((void *)&v363 + 1) = v406;
          *(void *)&long long v361 = &v407[8 * v410];
        }
      }
      else
      {
        v406 = (char *)*((void *)&v363 + 1);
      }
      uint64_t v421 = *(void *)(i - 8);
      *((void *)v406 - 1) = v421;
      *((void *)&v363 + 1) -= 8;
    }
    v422 = (void *)*((void *)this + 1);
    *(_OWORD *)((char *)this + 8) = v363;
    *(_OWORD *)((char *)this + 24) = v361;
    if (v422) {
      operator delete(v422);
    }
    goto LABEL_907;
  }
}

void sub_18FF84B18(_Unwind_Exception *a1)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<CA::ADMBuilder::Impl::Impl(void)::$_0,std::allocator<CA::ADMBuilder::Impl::Impl(void)::$_0>,void ()(_xmlParserCtxt *)>::operator()(uint64_t a1, xmlParserCtxtPtr *a2)
{
  if (*a2) {
    xmlFreeParserCtxt(*a2);
  }
}

void std::__function::__func<CA::ADMBuilder::Impl::Impl(void)::$_0,std::allocator<CA::ADMBuilder::Impl::Impl(void)::$_0>,void ()(_xmlParserCtxt *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA0C78;
}

void *std::__function::__func<CA::ADMBuilder::Impl::Impl(void)::$_0,std::allocator<CA::ADMBuilder::Impl::Impl(void)::$_0>,void ()(_xmlParserCtxt *)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDFA0C78;
  return result;
}

void std::__function::__func<CA::ADMBuilder::Impl::Impl(void)::$_0,std::allocator<CA::ADMBuilder::Impl::Impl(void)::$_0>,void ()(_xmlParserCtxt *)>::~__func()
{
}

void CA::ADMBuilder::~ADMBuilder(CA::ADMBuilder *this)
{
}

{
  std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0);
}

uint64_t *std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *__n128 result = a2;
  if (v2)
  {
    std::unique_ptr<_xmlParserCtxt,std::function<void ()(_xmlParserCtxt*)>>::reset[abi:ne180100]((uint64_t *)(v2 + 1040), 0);
    std::__function::__value_func<void ()(_xmlParserCtxt *)>::~__value_func[abi:ne180100]((void *)(v2 + 1048));
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>>>::~__hash_table(v2 + 1000);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>>>::~__hash_table(v2 + 960);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>>>::~__hash_table(v2 + 920);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>>>::~__hash_table(v2 + 880);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v2 + 840);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v2 + 800);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v2 + 760);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v2 + 720);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v2 + 680);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v2 + 640);
    uint64_t v3 = *(void *)(v2 + 624);
    *(void *)(v2 + 624) = 0;
    if (v3) {
      std::default_delete<std::string>::operator()[abi:ne180100](v3);
    }
    uint64_t v4 = *(void *)(v2 + 616);
    *(void *)(v2 + 616) = 0;
    if (v4) {
      std::default_delete<CA::ADMLoudnessMetadata>::operator()[abi:ne180100](v4);
    }
    std::string::size_type v5 = (void **)(v2 + 584);
    std::vector<std::vector<std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100](&v5);
    std::string::size_type v5 = (void **)(v2 + 560);
    std::vector<std::vector<std::optional<std::string>>>::__destroy_vector::operator()[abi:ne180100](&v5);
    std::string::size_type v5 = (void **)(v2 + 536);
    std::vector<std::optional<std::string>>::__destroy_vector::operator()[abi:ne180100](&v5);
    std::string::size_type v5 = (void **)(v2 + 512);
    std::vector<std::optional<std::string>>::__destroy_vector::operator()[abi:ne180100](&v5);
    std::string::size_type v5 = (void **)(v2 + 488);
    std::vector<std::optional<std::string>>::__destroy_vector::operator()[abi:ne180100](&v5);
    std::string::size_type v5 = (void **)(v2 + 464);
    std::vector<std::optional<std::string>>::__destroy_vector::operator()[abi:ne180100](&v5);
    std::string::size_type v5 = (void **)(v2 + 440);
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v5);
    std::string::size_type v5 = (void **)(v2 + 416);
    std::vector<std::optional<std::string>>::__destroy_vector::operator()[abi:ne180100](&v5);
    std::string::size_type v5 = (void **)(v2 + 392);
    std::vector<std::optional<std::string>>::__destroy_vector::operator()[abi:ne180100](&v5);
    std::string::size_type v5 = (void **)(v2 + 368);
    std::vector<std::vector<std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100](&v5);
    std::string::size_type v5 = (void **)(v2 + 344);
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v5);
    std::string::size_type v5 = (void **)(v2 + 320);
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v5);
    std::string::size_type v5 = (void **)(v2 + 296);
    std::vector<std::optional<std::string>>::__destroy_vector::operator()[abi:ne180100](&v5);
    std::string::size_type v5 = (void **)(v2 + 272);
    std::vector<std::optional<std::string>>::__destroy_vector::operator()[abi:ne180100](&v5);
    std::string::size_type v5 = (void **)(v2 + 248);
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v5);
    std::string::size_type v5 = (void **)(v2 + 224);
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v5);
    std::string::size_type v5 = (void **)(v2 + 200);
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v5);
    std::string::size_type v5 = (void **)(v2 + 176);
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v5);
    std::string::size_type v5 = (void **)(v2 + 152);
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v5);
    std::string::size_type v5 = (void **)(v2 + 128);
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v5);
    std::string::size_type v5 = (void **)(v2 + 104);
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v5);
    std::string::size_type v5 = (void **)(v2 + 80);
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v5);
    std::string::size_type v5 = (void **)(v2 + 56);
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v5);
    std::deque<CA::ADMBuilder::Impl::ADMElement>::~deque[abi:ne180100](v2 + 8);
    std::unique_ptr<CA::ADM>::reset[abi:ne180100]((char ***)v2, 0);
    JUMPOUT(0x192FC8940);
  }
  return result;
}

void *CA::ADMBuilder::ADMBuilder(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *__n128 result = v2;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = *a2;
  *a2 = 0;
  *__n128 result = v2;
  return result;
}

uint64_t *CA::ADMBuilder::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100](a1, v3);
  return a1;
}

uint64_t CA::ADMBuilder::parse(CA::ADMBuilder *this, const char *a2, int a3, int a4)
{
  uint64_t v5 = *(void *)this;
  uint64_t result = *(unsigned int *)(*(void *)this + 632);
  if (!result)
  {
    xmlParseChunk(*(xmlParserCtxtPtr *)(v5 + 1040), a2, a3, a4);
    return *(unsigned int *)(*(void *)this + 632);
  }
  return result;
}

void CA::ADMBuilder::build(std::string::size_type this@<X0>, int8x8_t *a2@<X8>)
{
  uint64_t v353 = *MEMORY[0x1E4F143B8];
  uint64_t v349 = (int8x8_t **)this;
  uint64_t v3 = *(int8x8_t **)this;
  uint64_t v4 = **(uint64_t ***)this;
  if (v4)
  {
    uint64_t v5 = *v4;
    if (v4[1] != *v4)
    {
      unint64_t v348 = a2;
      uint64_t v6 = 0;
      while (1)
      {
        uint64_t v7 = *(void *)(*(void *)&v3[40] + 24 * v6);
        if (*(void *)(*(void *)&v3[40] + 24 * v6 + 8) != v7) {
          break;
        }
LABEL_26:
        if (*(unsigned char *)(v5 + 368 * v6 + 336))
        {
          uint64_t v33 = (uint64_t *)(*(void *)&v3[43] + 24 * v6);
          uint64_t v35 = *v33;
          uint64_t v34 = v33[1];
          if (*v33 != v34)
          {
            while (1)
            {
              CA::ADMBuilder::Impl::resolve_pack_format_reference((CA::ADMBuilder::Impl *)&v350, v3, v35);
              std::string::size_type v37 = v350.__r_.__value_.__r.__words[0];
              if (v350.__r_.__value_.__r.__words[0])
              {
                uint64_t v38 = **(void **)v3 + 368 * v6;
                long long v39 = (void *)(v38 + 288);
                long long v40 = *(void **)(v38 + 296);
                unint64_t v41 = *(void *)(v38 + 304);
                if ((unint64_t)v40 >= v41)
                {
                  uint64_t v47 = ((uint64_t)v40 - *v39) >> 4;
                  unint64_t v48 = v47 + 1;
                  if ((unint64_t)(v47 + 1) >> 60) {
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v49 = v38 + 304;
                  uint64_t v50 = v41 - *v39;
                  if (v50 >> 3 > v48) {
                    unint64_t v48 = v50 >> 3;
                  }
                  if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v51 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v51 = v48;
                  }
                  *(void *)&buf[32] = v49;
                  uint64_t v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v51);
                  uint64_t v53 = &v52[16 * v47];
                  *(void *)std::__split_buffer<std::string> buf = v52;
                  *(void *)&_DWORD buf[8] = v53;
                  *(void *)&buf[24] = &v52[16 * v54];
                  std::string::size_type size = v350.__r_.__value_.__l.__size_;
                  *(_OWORD *)uint64_t v53 = *(_OWORD *)&v350.__r_.__value_.__l.__data_;
                  if (size) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(size + 8), 1uLL, memory_order_relaxed);
                  }
                  *(void *)&buf[16] = v53 + 16;
                  std::vector<std::shared_ptr<unsigned char []>>::__swap_out_circular_buffer(v39, buf);
                  long long v43 = (void *)v39[1];
                  std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)buf);
                }
                else
                {
                  *long long v40 = v350.__r_.__value_.__r.__words[0];
                  std::string::size_type v42 = v350.__r_.__value_.__l.__size_;
                  v40[1] = v350.__r_.__value_.__l.__size_;
                  if (v42) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v42 + 8), 1uLL, memory_order_relaxed);
                  }
                  long long v43 = v40 + 2;
                  v39[1] = v40 + 2;
                }
                v39[1] = v43;
              }
              else
              {
                long long v44 = CA::ADMBuilder::Impl::log(v36);
                if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
                {
                  std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, **(void **)v3 + 368 * v6, "");
                  p_p = &__p;
                  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                  }
                  uint64_t v46 = v35;
                  if (*(char *)(v35 + 23) < 0) {
                    uint64_t v46 = *(void *)v35;
                  }
                  *(_DWORD *)std::__split_buffer<std::string> buf = 136315906;
                  *(void *)&uint8_t buf[4] = "ADMBuilder.cpp";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 216;
                  *(_WORD *)&unsigned char buf[18] = 2080;
                  *(void *)&buf[20] = p_p;
                  *(_WORD *)&buf[28] = 2080;
                  *(void *)&buf[30] = v46;
                  _os_log_impl(&dword_18FEC0000, v44, OS_LOG_TYPE_ERROR, "%25s:%-5d Programme '%s' references unknown pack format '%s' for reference layout", buf, 0x26u);
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__p.__r_.__value_.__l.__data_);
                  }
                }
              }
              this = v350.__r_.__value_.__l.__size_;
              if (v350.__r_.__value_.__l.__size_) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v350.__r_.__value_.__l.__size_);
              }
              if (!v37) {
                goto LABEL_454;
              }
              v35 += 24;
              if (v35 == v34)
              {
                uint64_t v4 = (uint64_t *)*v3;
                uint64_t v5 = **(void **)v3;
                break;
              }
            }
          }
          if (*(void *)(v5 + 368 * v6 + 320) != *(void *)(v5 + 368 * v6 + 312))
          {
            uint64_t v56 = 0;
            while (1)
            {
              unint64_t v57 = (uint64_t *)(*(void *)(*(void *)&v3[46] + 24 * v6) + 24 * v56);
              uint64_t v59 = *v57;
              uint64_t v58 = v57[1];
              if (*v57 != v58) {
                break;
              }
LABEL_85:
              if (++v56 >= 0xEEEEEEEEEEEEEEEFLL
                          * ((uint64_t)(*(void *)(v5 + 368 * v6 + 320) - *(void *)(v5 + 368 * v6 + 312)) >> 3))
                goto LABEL_86;
            }
            while (1)
            {
              CA::ADMBuilder::Impl::resolve_pack_format_reference((CA::ADMBuilder::Impl *)&v350, v3, v59);
              std::string::size_type v61 = v350.__r_.__value_.__r.__words[0];
              if (v350.__r_.__value_.__r.__words[0])
              {
                uint64_t v62 = *(void *)(**(void **)v3 + 368 * v6 + 312) + 120 * v56;
                unint64_t v65 = *(void *)(v62 + 112);
                uint64_t v63 = v62 + 112;
                unint64_t v64 = v65;
                uint64_t v67 = (void *)(v63 - 8);
                BOOL v66 = *(void **)(v63 - 8);
                if ((unint64_t)v66 >= v65)
                {
                  uint64_t v73 = (void *)(v63 - 16);
                  uint64_t v74 = *(void *)(v63 - 16);
                  uint64_t v75 = ((uint64_t)v66 - v74) >> 4;
                  unint64_t v76 = v75 + 1;
                  if ((unint64_t)(v75 + 1) >> 60) {
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v77 = v64 - v74;
                  if (v77 >> 3 > v76) {
                    unint64_t v76 = v77 >> 3;
                  }
                  if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v78 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v78 = v76;
                  }
                  *(void *)&buf[32] = v63;
                  uint64_t v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v78);
                  uint64_t v80 = &v79[16 * v75];
                  *(void *)std::__split_buffer<std::string> buf = v79;
                  *(void *)&_DWORD buf[8] = v80;
                  *(void *)&buf[24] = &v79[16 * v81];
                  std::string::size_type v82 = v350.__r_.__value_.__l.__size_;
                  *(_OWORD *)uint64_t v80 = *(_OWORD *)&v350.__r_.__value_.__l.__data_;
                  if (v82) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v82 + 8), 1uLL, memory_order_relaxed);
                  }
                  *(void *)&buf[16] = v80 + 16;
                  std::vector<std::shared_ptr<unsigned char []>>::__swap_out_circular_buffer(v73, buf);
                  uint64_t v69 = (void *)*v67;
                  std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)buf);
                }
                else
                {
                  *BOOL v66 = v350.__r_.__value_.__r.__words[0];
                  std::string::size_type v68 = v350.__r_.__value_.__l.__size_;
                  v66[1] = v350.__r_.__value_.__l.__size_;
                  if (v68) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v68 + 8), 1uLL, memory_order_relaxed);
                  }
                  uint64_t v69 = v66 + 2;
                  *uint64_t v67 = v66 + 2;
                }
                *uint64_t v67 = v69;
              }
              else
              {
                int v70 = CA::ADMBuilder::Impl::log(v60);
                if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
                {
                  std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, **(void **)v3 + 368 * v6, "");
                  unsigned __int16 v71 = &__p;
                  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    unsigned __int16 v71 = (std::string *)__p.__r_.__value_.__r.__words[0];
                  }
                  uint64_t v72 = v59;
                  if (*(char *)(v59 + 23) < 0) {
                    uint64_t v72 = *(void *)v59;
                  }
                  *(_DWORD *)std::__split_buffer<std::string> buf = 136315906;
                  *(void *)&uint8_t buf[4] = "ADMBuilder.cpp";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 232;
                  *(_WORD *)&unsigned char buf[18] = 2080;
                  *(void *)&buf[20] = v71;
                  *(_WORD *)&buf[28] = 2080;
                  *(void *)&buf[30] = v72;
                  _os_log_impl(&dword_18FEC0000, v70, OS_LOG_TYPE_ERROR, "%25s:%-5d Programme '%s' references unknown pack format '%s' for reference layout", buf, 0x26u);
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__p.__r_.__value_.__l.__data_);
                  }
                }
              }
              this = v350.__r_.__value_.__l.__size_;
              if (v350.__r_.__value_.__l.__size_) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v350.__r_.__value_.__l.__size_);
              }
              if (!v61) {
                goto LABEL_454;
              }
              v59 += 24;
              if (v59 == v58)
              {
                uint64_t v4 = (uint64_t *)*v3;
                uint64_t v5 = **(void **)v3;
                goto LABEL_85;
              }
            }
          }
        }
LABEL_86:
        if (++v6 >= 0xD37A6F4DE9BD37A7 * ((v4[1] - v5) >> 4))
        {
          a2 = v348;
          uint64_t v3 = *v349;
          uint64_t v4 = (uint64_t *)**v349;
          goto LABEL_88;
        }
      }
      unint64_t v8 = 0;
      while (1)
      {
        int v9 = (void *)*v3;
        int v10 = *(long long **)(*(void *)v3 + 24);
        uint64_t v11 = *(long long **)(*(void *)v3 + 32);
        if (v10 == v11) {
          break;
        }
        uint64_t v12 = (unsigned __int8 *)(v7 + 24 * v8);
        while (1)
        {
          uint64_t v13 = *(unsigned __int8 **)v10;
          this = std::operator==[abi:ne180100]<std::string,std::string>(v12, *(unsigned __int8 **)v10);
          if (this) {
            break;
          }
          if (++v10 == v11) {
            goto LABEL_407;
          }
        }
        uint64_t v14 = *v9 + 368 * v6;
        unint64_t v17 = *(void *)(v14 + 208);
        uint64_t v15 = v14 + 208;
        unint64_t v16 = v17;
        int v19 = (void *)(v15 - 8);
        uint64_t v18 = *(unsigned __int8 ***)(v15 - 8);
        if ((unint64_t)v18 >= v17)
        {
          unint64_t v22 = (void *)(v15 - 16);
          uint64_t v23 = *(void *)(v15 - 16);
          uint64_t v24 = ((uint64_t)v18 - v23) >> 4;
          unint64_t v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 60) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v26 = v16 - v23;
          if (v26 >> 3 > v25) {
            unint64_t v25 = v26 >> 3;
          }
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v27 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v27 = v25;
          }
          *(void *)&buf[32] = v15;
          uint64_t v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v27);
          uint64_t v29 = &v28[16 * v24];
          *(void *)std::__split_buffer<std::string> buf = v28;
          *(void *)&_DWORD buf[8] = v29;
          *(void *)&buf[24] = &v28[16 * v30];
          long long v31 = *v10;
          *(_OWORD *)uint64_t v29 = *v10;
          if (*((void *)&v31 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v31 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          *(void *)&buf[16] = v29 + 16;
          std::vector<std::shared_ptr<unsigned char []>>::__swap_out_circular_buffer(v22, buf);
          unsigned __int16 v21 = (void *)*v19;
          this = std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)buf);
        }
        else
        {
          std::string *v18 = v13;
          uint64_t v20 = *((void *)v10 + 1);
          v18[1] = (unsigned __int8 *)v20;
          if (v20) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
          }
          unsigned __int16 v21 = v18 + 2;
          void *v19 = v18 + 2;
        }
        void *v19 = v21;
        ++v8;
        uint64_t v32 = (uint64_t *)(*(void *)&v3[40] + 24 * v6);
        uint64_t v7 = *v32;
        if (v8 >= 0xAAAAAAAAAAAAAAABLL * ((v32[1] - *v32) >> 3))
        {
          uint64_t v4 = (uint64_t *)*v3;
          uint64_t v5 = **(void **)v3;
          goto LABEL_26;
        }
      }
LABEL_407:
      uint64_t v330 = CA::ADMBuilder::Impl::log((CA::ADMBuilder::Impl *)this);
      if (os_log_type_enabled(v330, OS_LOG_TYPE_ERROR))
      {
        std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, **(void **)v3 + 368 * v6, "");
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v331 = &__p;
        }
        else {
          unint64_t v331 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        uint64_t v332 = *(void *)(*(void *)&v3[40] + 24 * v6) + 24 * v8;
        if (*(char *)(v332 + 23) < 0) {
          uint64_t v332 = *(void *)v332;
        }
        a2 = v348;
        *(_DWORD *)std::__split_buffer<std::string> buf = 136315906;
        *(void *)&uint8_t buf[4] = "ADMBuilder.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 203;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = v331;
        *(_WORD *)&buf[28] = 2080;
        *(void *)&buf[30] = v332;
        v333 = "%25s:%-5d Programme '%s' references unknown content '%s'";
        goto LABEL_421;
      }
      goto LABEL_454;
    }
LABEL_88:
    if (v4[4] == v4[3])
    {
LABEL_114:
      unint64_t v348 = a2;
      if (v4[7] != v4[6])
      {
        uint64_t v105 = 0;
        while (1)
        {
          uint64_t v106 = *(void *)(*(void *)&v3[10] + 24 * v105);
          if (*(void *)(*(void *)&v3[10] + 24 * v105 + 8) != v106) {
            break;
          }
LABEL_138:
          uint64_t v128 = *(void *)(*(void *)&v3[19] + 24 * v105);
          if (*(void *)(*(void *)&v3[19] + 24 * v105 + 8) != v128)
          {
            unint64_t v129 = 0;
            while (1)
            {
              uint64_t v130 = v128 + 24 * v129;
              uint64_t v131 = *(unsigned __int8 *)(v130 + 23);
              int v132 = (char)v131;
              if ((v131 & 0x80u) != 0) {
                uint64_t v131 = *(void *)(v130 + 8);
              }
              if (v131 != 12) {
                break;
              }
              char v133 = v132 >= 0 ? (uint64_t *)v130 : *(uint64_t **)v130;
              uint64_t v134 = *v133;
              int v135 = *((_DWORD *)v133 + 2);
              if (v134 != 0x303030305F555441 || v135 != 808464432) {
                break;
              }
              long long v155 = (char *)operator new(0xE0uLL);
              *((void *)v155 + 1) = 0;
              *((void *)v155 + 2) = 0;
              *(void *)long long v155 = &unk_1EDFA27A8;
              *(_OWORD *)(v155 + 24) = 0u;
              *(_OWORD *)(v155 + 4std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0u;
              *(_OWORD *)(v155 + 56) = 0u;
              *(_OWORD *)(v155 + 72) = 0u;
              *(_OWORD *)(v155 + 88) = 0u;
              *(_OWORD *)(v155 + 104) = 0u;
              *(_OWORD *)(v155 + 12std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0u;
              *(_OWORD *)(v155 + 136) = 0u;
              *(_OWORD *)(v155 + 152) = 0u;
              *(_OWORD *)(v155 + 168) = 0u;
              *(_OWORD *)(v155 + 184) = 0u;
              *(_OWORD *)(v155 + 20std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0u;
              *((void *)v155 + 27) = 0;
              std::string::basic_string[abi:ne180100]<0>((void *)v155 + 3, "ATU_00000000");
              v155[48] = 1;
              int v156 = *(void **)(*(void *)(*(void *)v3 + 48) + 16 * v105);
              uint64_t v157 = (void *)v156[34];
              unint64_t v158 = v156[35];
              if ((unint64_t)v157 >= v158)
              {
                uint64_t v160 = v156[33];
                uint64_t v161 = ((uint64_t)v157 - v160) >> 4;
                unint64_t v162 = v161 + 1;
                if ((unint64_t)(v161 + 1) >> 60) {
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v163 = v158 - v160;
                if (v163 >> 3 > v162) {
                  unint64_t v162 = v163 >> 3;
                }
                if ((unint64_t)v163 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v164 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v164 = v162;
                }
                *(void *)&buf[32] = v156 + 35;
                unint64_t v165 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v164);
                *(void *)&long long v166 = v155 + 24;
                *((void *)&v166 + 1) = v155;
                unint64_t v167 = &v165[16 * v161];
                *(void *)std::__split_buffer<std::string> buf = v165;
                *(void *)&_DWORD buf[8] = v167;
                *(void *)&buf[24] = &v165[16 * v168];
                *(_OWORD *)unint64_t v167 = v166;
                atomic_fetch_add_explicit((atomic_ullong *volatile)v155 + 1, 1uLL, memory_order_relaxed);
                *(void *)&buf[16] = v167 + 16;
                std::vector<std::shared_ptr<unsigned char []>>::__swap_out_circular_buffer(v156 + 33, buf);
                uint64_t v159 = (void *)v156[34];
                std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)buf);
              }
              else
              {
                *uint64_t v157 = v155 + 24;
                v157[1] = v155;
                atomic_fetch_add_explicit((atomic_ullong *volatile)v155 + 1, 1uLL, memory_order_relaxed);
                uint64_t v159 = v157 + 2;
                v156[34] = v157 + 2;
              }
              v156[34] = v159;
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v155);
LABEL_178:
              ++v129;
              uint64_t v128 = *(void *)(*(void *)&v3[19] + 24 * v105);
              if (v129 >= 0xAAAAAAAAAAAAAAABLL * ((*(void *)(*(void *)&v3[19] + 24 * v105 + 8) - v128) >> 3)) {
                goto LABEL_179;
              }
            }
            int8x8_t v137 = *v3;
            uint64_t v138 = *(long long **)(*(void *)v3 + 264);
            uint64_t v139 = *(long long **)(*(void *)v3 + 272);
            while (v138 != v139)
            {
              uint64_t v140 = *(unsigned __int8 **)v138;
              this = std::operator==[abi:ne180100]<std::string,std::string>((unsigned __int8 *)v130, *(unsigned __int8 **)v138);
              if (this)
              {
                uint64_t v141 = *(void **)(*(void *)(*(void *)&v137 + 48) + 16 * v105);
                char v142 = (unsigned __int8 **)v141[34];
                unint64_t v143 = v141[35];
                if ((unint64_t)v142 >= v143)
                {
                  uint64_t v146 = v141[33];
                  uint64_t v147 = ((uint64_t)v142 - v146) >> 4;
                  unint64_t v148 = v147 + 1;
                  if ((unint64_t)(v147 + 1) >> 60) {
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v149 = v143 - v146;
                  if (v149 >> 3 > v148) {
                    unint64_t v148 = v149 >> 3;
                  }
                  if ((unint64_t)v149 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v150 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v150 = v148;
                  }
                  *(void *)&buf[32] = v141 + 35;
                  unint64_t v151 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v150);
                  unint64_t v152 = &v151[16 * v147];
                  *(void *)std::__split_buffer<std::string> buf = v151;
                  *(void *)&_DWORD buf[8] = v152;
                  *(void *)&buf[24] = &v151[16 * v153];
                  long long v154 = *v138;
                  *(_OWORD *)unint64_t v152 = *v138;
                  if (*((void *)&v154 + 1)) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v154 + 1) + 8), 1uLL, memory_order_relaxed);
                  }
                  *(void *)&buf[16] = v152 + 16;
                  std::vector<std::shared_ptr<unsigned char []>>::__swap_out_circular_buffer(v141 + 33, buf);
                  char v145 = (void *)v141[34];
                  this = std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)buf);
                }
                else
                {
                  void *v142 = v140;
                  uint64_t v144 = *((void *)v138 + 1);
                  v142[1] = (unsigned __int8 *)v144;
                  if (v144) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v144 + 8), 1uLL, memory_order_relaxed);
                  }
                  char v145 = v142 + 2;
                  v141[34] = v142 + 2;
                }
                v141[34] = v145;
                goto LABEL_178;
              }
              ++v138;
            }
            uint64_t v330 = CA::ADMBuilder::Impl::log((CA::ADMBuilder::Impl *)this);
            if (!os_log_type_enabled(v330, OS_LOG_TYPE_ERROR)) {
              goto LABEL_454;
            }
            std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, *(void *)(*(void *)(*(void *)v3 + 48) + 16 * v105), "");
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v338 = &__p;
            }
            else {
              uint64_t v338 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            uint64_t v339 = *(void *)(*(void *)&v3[19] + 24 * v105) + 24 * v129;
            if (*(char *)(v339 + 23) < 0) {
              uint64_t v339 = *(void *)v339;
            }
            a2 = v348;
            *(_DWORD *)std::__split_buffer<std::string> buf = 136315906;
            *(void *)&uint8_t buf[4] = "ADMBuilder.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 308;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = v338;
            *(_WORD *)&buf[28] = 2080;
            *(void *)&buf[30] = v339;
            v333 = "%25s:%-5d Object '%s' references unknown track UID '%s'";
            goto LABEL_421;
          }
LABEL_179:
          uint64_t v169 = *(void *)(*(void *)&v3[16] + 24 * v105);
          if (*(void *)(*(void *)&v3[16] + 24 * v105 + 8) != v169)
          {
            unint64_t v170 = 0;
            while (1)
            {
              unint64_t v171 = *(long long **)(*(void *)v3 + 48);
              unint64_t v172 = *(long long **)(*(void *)v3 + 56);
              if (v171 == v172) {
                break;
              }
              unsigned __int8 v173 = (unsigned __int8 *)(v169 + 24 * v170);
              char v174 = *(long long **)(*(void *)v3 + 48);
              while (1)
              {
                this = std::operator==[abi:ne180100]<std::string,std::string>(v173, *(unsigned __int8 **)v174);
                if (this) {
                  break;
                }
                if (++v174 == v172) {
                  goto LABEL_437;
                }
              }
              unsigned __int8 v175 = *(void **)&v171[v105];
              long long v176 = *v174;
              uint64_t v177 = *((void *)v174 + 1);
              if (v177) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v177 + 16), 1uLL, memory_order_relaxed);
              }
              unint64_t v179 = (_OWORD *)v175[31];
              unint64_t v178 = v175[32];
              if ((unint64_t)v179 >= v178)
              {
                uint64_t v181 = v175[30];
                uint64_t v182 = ((uint64_t)v179 - v181) >> 4;
                if ((unint64_t)(v182 + 1) >> 60) {
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                long long v347 = v176;
                uint64_t v183 = v178 - v181;
                uint64_t v184 = v183 >> 3;
                if (v183 >> 3 <= (unint64_t)(v182 + 1)) {
                  uint64_t v184 = v182 + 1;
                }
                if ((unint64_t)v183 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v185 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v185 = v184;
                }
                if (v185 >> 60) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                this = (std::string::size_type)operator new(16 * v185);
                unsigned int v186 = (_OWORD *)(this + 16 * v182);
                unint64_t v187 = (char *)(this + 16 * v185);
                *unsigned int v186 = v347;
                unsigned __int16 v180 = v186 + 1;
                long long v188 = (void *)v175[30];
                long long v189 = (void *)v175[31];
                if (v189 == v188)
                {
                  v175[30] = v186;
                  v175[31] = v180;
                  v175[32] = v187;
                }
                else
                {
                  do
                  {
                    long long v190 = *((_OWORD *)v189 - 1);
                    v189 -= 2;
                    *--unsigned int v186 = v190;
                    void *v189 = 0;
                    v189[1] = 0;
                  }
                  while (v189 != v188);
                  unint64_t v191 = (void *)v175[30];
                  long long v189 = (void *)v175[31];
                  v175[30] = v186;
                  v175[31] = v180;
                  v175[32] = v187;
                  if (v189 != v191)
                  {
                    do
                    {
                      this = *(v189 - 1);
                      if (this) {
                        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)this);
                      }
                      v189 -= 2;
                    }
                    while (v189 != v191);
                    long long v189 = v191;
                  }
                }
                if (v189) {
                  operator delete(v189);
                }
              }
              else
              {
                *unint64_t v179 = v176;
                unsigned __int16 v180 = v179 + 1;
                v175[31] = v180;
              }
              v175[31] = v180;
              ++v170;
              uint64_t v169 = *(void *)(*(void *)&v3[16] + 24 * v105);
              if (v170 >= 0xAAAAAAAAAAAAAAABLL * ((*(void *)(*(void *)&v3[16] + 24 * v105 + 8) - v169) >> 3)) {
                goto LABEL_208;
              }
            }
LABEL_437:
            uint64_t v330 = CA::ADMBuilder::Impl::log((CA::ADMBuilder::Impl *)this);
            if (os_log_type_enabled(v330, OS_LOG_TYPE_ERROR))
            {
              std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, *(void *)(*(void *)(*(void *)v3 + 48) + 16 * v105), "");
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v340 = &__p;
              }
              else {
                uint64_t v340 = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              uint64_t v341 = *(void *)(*(void *)&v3[16] + 24 * v105) + 24 * v170;
              if (*(char *)(v341 + 23) < 0) {
                uint64_t v341 = *(void *)v341;
              }
              a2 = v348;
              *(_DWORD *)std::__split_buffer<std::string> buf = 136315906;
              *(void *)&uint8_t buf[4] = "ADMBuilder.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 325;
              *(_WORD *)&unsigned char buf[18] = 2080;
              *(void *)&buf[20] = v340;
              *(_WORD *)&buf[28] = 2080;
              *(void *)&buf[30] = v341;
              v333 = "%25s:%-5d Object '%s' references unknown complementary object '%s'";
              goto LABEL_421;
            }
            goto LABEL_454;
          }
LABEL_208:
          uint64_t v192 = *(void *)(*(void *)&v3[13] + 24 * v105);
          if (*(void *)(*(void *)&v3[13] + 24 * v105 + 8) != v192)
          {
            uint64_t v193 = 0;
            unint64_t v194 = 0;
            do
            {
              CA::ADMBuilder::Impl::resolve_pack_format_reference((CA::ADMBuilder::Impl *)&v350, v3, v192 + v193);
              std::string::size_type v196 = v350.__r_.__value_.__r.__words[0];
              if (v350.__r_.__value_.__r.__words[0])
              {
                uint64_t v197 = *(void **)(*(void *)(*(void *)v3 + 48) + 16 * v105);
                std::string v198 = (void *)v197[19];
                unint64_t v199 = v197[20];
                if ((unint64_t)v198 >= v199)
                {
                  uint64_t v205 = v197[18];
                  uint64_t v206 = ((uint64_t)v198 - v205) >> 4;
                  unint64_t v207 = v206 + 1;
                  if ((unint64_t)(v206 + 1) >> 60) {
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v208 = v199 - v205;
                  if (v208 >> 3 > v207) {
                    unint64_t v207 = v208 >> 3;
                  }
                  if ((unint64_t)v208 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v209 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v209 = v207;
                  }
                  *(void *)&buf[32] = v197 + 20;
                  long long v210 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v209);
                  long long v211 = &v210[16 * v206];
                  *(void *)std::__split_buffer<std::string> buf = v210;
                  *(void *)&_DWORD buf[8] = v211;
                  *(void *)&buf[24] = &v210[16 * v212];
                  std::string::size_type v213 = v350.__r_.__value_.__l.__size_;
                  *(_OWORD *)long long v211 = *(_OWORD *)&v350.__r_.__value_.__l.__data_;
                  if (v213) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v213 + 8), 1uLL, memory_order_relaxed);
                  }
                  *(void *)&buf[16] = v211 + 16;
                  std::vector<std::shared_ptr<unsigned char []>>::__swap_out_circular_buffer(v197 + 18, buf);
                  int v201 = (void *)v197[19];
                  std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)buf);
                }
                else
                {
                  *std::string v198 = v350.__r_.__value_.__r.__words[0];
                  std::string::size_type v200 = v350.__r_.__value_.__l.__size_;
                  v198[1] = v350.__r_.__value_.__l.__size_;
                  if (v200) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v200 + 8), 1uLL, memory_order_relaxed);
                  }
                  int v201 = v198 + 2;
                  v197[19] = v198 + 2;
                }
                v197[19] = v201;
              }
              else
              {
                unsigned int v202 = CA::ADMBuilder::Impl::log(v195);
                if (os_log_type_enabled(v202, OS_LOG_TYPE_ERROR))
                {
                  std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, *(void *)(*(void *)(*(void *)v3 + 48) + 16 * v105), "");
                  uint64_t v203 = &__p;
                  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    uint64_t v203 = (std::string *)__p.__r_.__value_.__r.__words[0];
                  }
                  uint64_t v204 = (uint64_t **)(*(void *)(*(void *)&v3[13] + 24 * v105) + v193);
                  if (*((char *)v204 + 23) < 0) {
                    uint64_t v204 = (uint64_t **)*v204;
                  }
                  *(_DWORD *)std::__split_buffer<std::string> buf = 136315906;
                  *(void *)&uint8_t buf[4] = "ADMBuilder.cpp";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 337;
                  *(_WORD *)&unsigned char buf[18] = 2080;
                  *(void *)&buf[20] = v203;
                  *(_WORD *)&buf[28] = 2080;
                  *(void *)&buf[30] = v204;
                  _os_log_impl(&dword_18FEC0000, v202, OS_LOG_TYPE_ERROR, "%25s:%-5d Object '%s' references unknown pack format '%s'", buf, 0x26u);
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__p.__r_.__value_.__l.__data_);
                  }
                }
              }
              this = v350.__r_.__value_.__l.__size_;
              if (v350.__r_.__value_.__l.__size_) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v350.__r_.__value_.__l.__size_);
              }
              if (!v196) {
                goto LABEL_454;
              }
              ++v194;
              uint64_t v192 = *(void *)(*(void *)&v3[13] + 24 * v105);
              v193 += 24;
            }
            while (v194 < 0xAAAAAAAAAAAAAAABLL * ((*(void *)(*(void *)&v3[13] + 24 * v105 + 8) - v192) >> 3));
          }
          if (++v105 >= (unint64_t)((uint64_t)(*(void *)(*(void *)v3 + 56)
                                                    - *(void *)(*(void *)v3 + 48)) >> 4))
          {
            a2 = v348;
            uint64_t v3 = *v349;
            uint64_t v4 = (uint64_t *)**v349;
            goto LABEL_238;
          }
        }
        unint64_t v107 = 0;
        while (1)
        {
          uint64_t v108 = *(void *)(*(void *)v3 + 48);
          uint64_t v109 = *(void *)(*(void *)v3 + 56);
          if (v108 == v109)
          {
LABEL_423:
            uint64_t v330 = CA::ADMBuilder::Impl::log((CA::ADMBuilder::Impl *)this);
            if (!os_log_type_enabled(v330, OS_LOG_TYPE_ERROR)) {
              goto LABEL_454;
            }
            std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, *(void *)(*(void *)(*(void *)v3 + 48) + 16 * v105), "");
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unint64_t v336 = &__p;
            }
            else {
              unint64_t v336 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            uint64_t v337 = *(void *)(*(void *)&v3[10] + 24 * v105) + 24 * v107;
            if (*(char *)(v337 + 23) < 0) {
              uint64_t v337 = *(void *)v337;
            }
            a2 = v348;
            *(_DWORD *)std::__split_buffer<std::string> buf = 136315906;
            *(void *)&uint8_t buf[4] = "ADMBuilder.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 287;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = v336;
            *(_WORD *)&buf[28] = 2080;
            *(void *)&buf[30] = v337;
            v333 = "%25s:%-5d Object '%s' references unknown object '%s'";
            goto LABEL_421;
          }
          long long v110 = (unsigned __int8 *)(v106 + 24 * v107);
          uint64_t v111 = *(void *)(*(void *)v3 + 48);
          while (1)
          {
            char v112 = *(unsigned __int8 **)v111;
            this = std::operator==[abi:ne180100]<std::string,std::string>(v110, *(unsigned __int8 **)v111);
            if (this) {
              break;
            }
            v111 += 16;
            if (v111 == v109) {
              goto LABEL_423;
            }
          }
          long long v113 = (uint64_t *)(v108 + 16 * v105);
          if (this) {
            break;
          }
          uint64_t v114 = *v113;
          uint64_t v115 = *(unsigned __int8 ***)(*v113 + 176);
          unint64_t v116 = *(void *)(*v113 + 184);
          if ((unint64_t)v115 >= v116)
          {
            uint64_t v119 = *(void *)(v114 + 168);
            uint64_t v120 = ((uint64_t)v115 - v119) >> 4;
            unint64_t v121 = v120 + 1;
            if ((unint64_t)(v120 + 1) >> 60) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v122 = v116 - v119;
            if (v122 >> 3 > v121) {
              unint64_t v121 = v122 >> 3;
            }
            if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v123 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v123 = v121;
            }
            *(void *)&buf[32] = *v113 + 184;
            uint64_t v124 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v123);
            unint64_t v125 = &v124[16 * v120];
            *(void *)std::__split_buffer<std::string> buf = v124;
            *(void *)&_DWORD buf[8] = v125;
            *(void *)&buf[24] = &v124[16 * v126];
            long long v127 = *(_OWORD *)v111;
            *(_OWORD *)unint64_t v125 = *(_OWORD *)v111;
            if (*((void *)&v127 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v127 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            *(void *)&buf[16] = v125 + 16;
            std::vector<std::shared_ptr<unsigned char []>>::__swap_out_circular_buffer((void *)(v114 + 168), buf);
            unint64_t v118 = *(void **)(v114 + 176);
            this = std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)buf);
          }
          else
          {
            *uint64_t v115 = v112;
            uint64_t v117 = *(void *)(v111 + 8);
            v115[1] = (unsigned __int8 *)v117;
            if (v117) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v117 + 8), 1uLL, memory_order_relaxed);
            }
            unint64_t v118 = v115 + 2;
            *(void *)(v114 + 176) = v115 + 2;
          }
          *(void *)(v114 + 176) = v118;
          ++v107;
          uint64_t v106 = *(void *)(*(void *)&v3[10] + 24 * v105);
          if (v107 >= 0xAAAAAAAAAAAAAAABLL * ((*(void *)(*(void *)&v3[10] + 24 * v105 + 8) - v106) >> 3)) {
            goto LABEL_138;
          }
        }
        uint64_t v342 = CA::ADMBuilder::Impl::log((CA::ADMBuilder::Impl *)this);
        if (!os_log_type_enabled(v342, OS_LOG_TYPE_ERROR)) {
          goto LABEL_454;
        }
        std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, *(void *)(*(void *)(*(void *)v3 + 48) + 16 * v105), "");
        int v343 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        std::string::size_type v344 = __p.__r_.__value_.__r.__words[0];
        std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&v350, *(void *)v111, "");
        int64_t v345 = &__p;
        if (v343 < 0) {
          int64_t v345 = (std::string *)v344;
        }
        if ((v350.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v346 = &v350;
        }
        else {
          unint64_t v346 = (std::string *)v350.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::__split_buffer<std::string> buf = 136315906;
        *(void *)&uint8_t buf[4] = "ADMBuilder.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 276;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = v345;
        *(_WORD *)&buf[28] = 2080;
        *(void *)&buf[30] = v346;
        _os_log_impl(&dword_18FEC0000, v342, OS_LOG_TYPE_ERROR, "%25s:%-5d Object '%s' referencing object '%s' leads to a reference cycle", buf, 0x26u);
        if (SHIBYTE(v350.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v350.__r_.__value_.__l.__data_);
        }
        a2 = v348;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_455;
        }
LABEL_422:
        operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_455;
      }
LABEL_238:
      if (v4[10] != v4[9])
      {
        uint64_t v214 = 0;
        while (1)
        {
          BOOL v215 = (uint64_t *)(*(void *)&v3[25] + 24 * v214);
          uint64_t v217 = *v215;
          uint64_t v216 = v215[1];
          while (v217 != v216)
          {
            CA::ADMBuilder::Impl::resolve_pack_format_reference((CA::ADMBuilder::Impl *)&v350, v3, v217);
            std::string::size_type v219 = v350.__r_.__value_.__r.__words[0];
            if (v350.__r_.__value_.__r.__words[0])
            {
              unint64_t v220 = *(void **)(*(void *)(*(void *)v3 + 72) + 16 * v214);
              unint64_t v221 = (void *)v220[21];
              unint64_t v222 = v220[22];
              if ((unint64_t)v221 >= v222)
              {
                uint64_t v228 = v220[20];
                uint64_t v229 = ((uint64_t)v221 - v228) >> 4;
                unint64_t v230 = v229 + 1;
                if ((unint64_t)(v229 + 1) >> 60) {
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v231 = v222 - v228;
                if (v231 >> 3 > v230) {
                  unint64_t v230 = v231 >> 3;
                }
                if ((unint64_t)v231 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v232 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v232 = v230;
                }
                *(void *)&buf[32] = v220 + 22;
                std::string v233 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v232);
                uint64_t v234 = &v233[16 * v229];
                *(void *)std::__split_buffer<std::string> buf = v233;
                *(void *)&_DWORD buf[8] = v234;
                *(void *)&buf[24] = &v233[16 * v235];
                std::string::size_type v236 = v350.__r_.__value_.__l.__size_;
                *(_OWORD *)uint64_t v234 = *(_OWORD *)&v350.__r_.__value_.__l.__data_;
                if (v236) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v236 + 8), 1uLL, memory_order_relaxed);
                }
                *(void *)&buf[16] = v234 + 16;
                std::vector<std::shared_ptr<unsigned char []>>::__swap_out_circular_buffer(v220 + 20, buf);
                long long v224 = (void *)v220[21];
                std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)buf);
              }
              else
              {
                *unint64_t v221 = v350.__r_.__value_.__r.__words[0];
                std::string::size_type v223 = v350.__r_.__value_.__l.__size_;
                v221[1] = v350.__r_.__value_.__l.__size_;
                if (v223) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v223 + 8), 1uLL, memory_order_relaxed);
                }
                long long v224 = v221 + 2;
                v220[21] = v221 + 2;
              }
              v220[21] = v224;
            }
            else
            {
              long long v225 = CA::ADMBuilder::Impl::log(v218);
              if (os_log_type_enabled(v225, OS_LOG_TYPE_ERROR))
              {
                std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, *(void *)(*(void *)(*(void *)v3 + 72) + 16 * v214), "");
                long long v226 = &__p;
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  long long v226 = (std::string *)__p.__r_.__value_.__r.__words[0];
                }
                uint64_t v227 = v217;
                if (*(char *)(v217 + 23) < 0) {
                  uint64_t v227 = *(void *)v217;
                }
                *(_DWORD *)std::__split_buffer<std::string> buf = 136315906;
                *(void *)&uint8_t buf[4] = "ADMBuilder.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 354;
                *(_WORD *)&unsigned char buf[18] = 2080;
                *(void *)&buf[20] = v226;
                *(_WORD *)&buf[28] = 2080;
                *(void *)&buf[30] = v227;
                _os_log_impl(&dword_18FEC0000, v225, OS_LOG_TYPE_ERROR, "%25s:%-5d Pack format '%s' references unknown pack format '%s'", buf, 0x26u);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
              }
            }
            if (v350.__r_.__value_.__l.__size_) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v350.__r_.__value_.__l.__size_);
            }
            if (!v219) {
              goto LABEL_454;
            }
            v217 += 24;
          }
          v237 = (uint64_t *)(*(void *)&v3[28] + 24 * v214);
          uint64_t v239 = *v237;
          uint64_t v238 = v237[1];
          while (v239 != v238)
          {
            CA::ADMBuilder::Impl::resolve_pack_format_reference((CA::ADMBuilder::Impl *)&v350, v3, v239);
            std::string::size_type v241 = v350.__r_.__value_.__r.__words[0];
            if (v350.__r_.__value_.__r.__words[0])
            {
              uint64_t v242 = *(void **)(*(void *)(*(void *)v3 + 72) + 16 * v214);
              std::string::size_type v243 = v350.__r_.__value_.__l.__size_;
              if (v350.__r_.__value_.__l.__size_) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v350.__r_.__value_.__l.__size_ + 16), 1uLL, memory_order_relaxed);
              }
              unint64_t v244 = v242[26];
              uint64_t v245 = (std::string::size_type *)v242[25];
              if ((unint64_t)v245 >= v244)
              {
                uint64_t v250 = v242[24];
                uint64_t v251 = ((uint64_t)v245 - v250) >> 4;
                unint64_t v252 = v251 + 1;
                if ((unint64_t)(v251 + 1) >> 60) {
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v253 = v244 - v250;
                if (v253 >> 3 > v252) {
                  unint64_t v252 = v253 >> 3;
                }
                if ((unint64_t)v253 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v254 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v254 = v252;
                }
                *(void *)&buf[32] = v242 + 26;
                v255 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v254);
                unint64_t v256 = (std::string::size_type *)&v255[16 * v251];
                *(void *)std::__split_buffer<std::string> buf = v255;
                *(void *)&_DWORD buf[8] = v256;
                *(void *)&buf[24] = &v255[16 * v257];
                *unint64_t v256 = v241;
                v256[1] = v243;
                *(void *)&buf[16] = v256 + 2;
                std::vector<std::shared_ptr<unsigned char []>>::__swap_out_circular_buffer(v242 + 24, buf);
                v246 = (void *)v242[25];
                std::__split_buffer<std::weak_ptr<CA::ADMPackFormat>>::~__split_buffer((uint64_t)buf);
              }
              else
              {
                *uint64_t v245 = v241;
                v245[1] = v243;
                v246 = v245 + 2;
                v242[25] = v245 + 2;
              }
              v242[25] = v246;
            }
            else
            {
              uint64_t v247 = CA::ADMBuilder::Impl::log(v240);
              if (os_log_type_enabled(v247, OS_LOG_TYPE_ERROR))
              {
                std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, *(void *)(*(void *)(*(void *)v3 + 72) + 16 * v214), "");
                v248 = &__p;
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  v248 = (std::string *)__p.__r_.__value_.__r.__words[0];
                }
                uint64_t v249 = v239;
                if (*(char *)(v239 + 23) < 0) {
                  uint64_t v249 = *(void *)v239;
                }
                *(_DWORD *)std::__split_buffer<std::string> buf = 136315906;
                *(void *)&uint8_t buf[4] = "ADMBuilder.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 365;
                *(_WORD *)&unsigned char buf[18] = 2080;
                *(void *)&buf[20] = v248;
                *(_WORD *)&buf[28] = 2080;
                *(void *)&buf[30] = v249;
                _os_log_impl(&dword_18FEC0000, v247, OS_LOG_TYPE_ERROR, "%25s:%-5d Pack format '%s' references unknown encode pack format '%s'", buf, 0x26u);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
              }
            }
            if (v350.__r_.__value_.__l.__size_) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v350.__r_.__value_.__l.__size_);
            }
            if (!v241) {
              goto LABEL_454;
            }
            v239 += 24;
          }
          v258 = (uint64_t *)(*(void *)&v3[31] + 24 * v214);
          uint64_t v260 = *v258;
          uint64_t v259 = v258[1];
          while (v260 != v259)
          {
            CA::ADMBuilder::Impl::resolve_pack_format_reference((CA::ADMBuilder::Impl *)&v350, v3, v260);
            std::string::size_type v262 = v350.__r_.__value_.__r.__words[0];
            if (v350.__r_.__value_.__r.__words[0])
            {
              v263 = *(void **)(*(void *)(*(void *)v3 + 72) + 16 * v214);
              std::string::size_type v264 = v350.__r_.__value_.__l.__size_;
              if (v350.__r_.__value_.__l.__size_) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v350.__r_.__value_.__l.__size_ + 16), 1uLL, memory_order_relaxed);
              }
              unint64_t v265 = v263[29];
              v266 = (std::string::size_type *)v263[28];
              if ((unint64_t)v266 >= v265)
              {
                uint64_t v271 = v263[27];
                uint64_t v272 = ((uint64_t)v266 - v271) >> 4;
                unint64_t v273 = v272 + 1;
                if ((unint64_t)(v272 + 1) >> 60) {
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v274 = v265 - v271;
                if (v274 >> 3 > v273) {
                  unint64_t v273 = v274 >> 3;
                }
                if ((unint64_t)v274 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v275 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v275 = v273;
                }
                *(void *)&buf[32] = v263 + 29;
                v276 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v275);
                uint64_t v277 = (std::string::size_type *)&v276[16 * v272];
                *(void *)std::__split_buffer<std::string> buf = v276;
                *(void *)&_DWORD buf[8] = v277;
                *(void *)&buf[24] = &v276[16 * v278];
                *uint64_t v277 = v262;
                v277[1] = v264;
                *(void *)&buf[16] = v277 + 2;
                std::vector<std::shared_ptr<unsigned char []>>::__swap_out_circular_buffer(v263 + 27, buf);
                v267 = (void *)v263[28];
                std::__split_buffer<std::weak_ptr<CA::ADMPackFormat>>::~__split_buffer((uint64_t)buf);
              }
              else
              {
                std::string::size_type *v266 = v262;
                v266[1] = v264;
                v267 = v266 + 2;
                v263[28] = v266 + 2;
              }
              v263[28] = v267;
            }
            else
            {
              v268 = CA::ADMBuilder::Impl::log(v261);
              if (os_log_type_enabled(v268, OS_LOG_TYPE_ERROR))
              {
                std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, *(void *)(*(void *)(*(void *)v3 + 72) + 16 * v214), "");
                v269 = &__p;
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  v269 = (std::string *)__p.__r_.__value_.__r.__words[0];
                }
                uint64_t v270 = v260;
                if (*(char *)(v260 + 23) < 0) {
                  uint64_t v270 = *(void *)v260;
                }
                *(_DWORD *)std::__split_buffer<std::string> buf = 136315906;
                *(void *)&uint8_t buf[4] = "ADMBuilder.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 376;
                *(_WORD *)&unsigned char buf[18] = 2080;
                *(void *)&buf[20] = v269;
                *(_WORD *)&buf[28] = 2080;
                *(void *)&buf[30] = v270;
                _os_log_impl(&dword_18FEC0000, v268, OS_LOG_TYPE_ERROR, "%25s:%-5d Pack format '%s' references unknown decode pack format '%s'", buf, 0x26u);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
              }
            }
            if (v350.__r_.__value_.__l.__size_) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v350.__r_.__value_.__l.__size_);
            }
            if (!v262) {
              goto LABEL_454;
            }
            v260 += 24;
          }
          uint64_t v279 = *(void *)&v3[34] + 32 * v214;
          if (*(unsigned char *)(v279 + 24))
          {
            CA::ADMBuilder::Impl::resolve_pack_format_reference((CA::ADMBuilder::Impl *)&v350, v3, *(void *)&v3[34] + 32 * v214);
            std::string::size_type v281 = v350.__r_.__value_.__r.__words[0];
            if (v350.__r_.__value_.__r.__words[0])
            {
              uint64_t v282 = *(void *)(*(void *)(*(void *)v3 + 72) + 16 * v214);
              std::string::size_type v283 = v350.__r_.__value_.__l.__size_;
              if (v350.__r_.__value_.__l.__size_) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v350.__r_.__value_.__l.__size_ + 16), 1uLL, memory_order_relaxed);
              }
              uint64_t v284 = *(std::__shared_weak_count **)(v282 + 248);
              *(void *)(v282 + 24std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v281;
              *(void *)(v282 + 248) = v283;
              if (v284) {
                std::__shared_weak_count::__release_weak(v284);
              }
            }
            else
            {
              v285 = CA::ADMBuilder::Impl::log(v280);
              if (os_log_type_enabled(v285, OS_LOG_TYPE_ERROR))
              {
                std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, *(void *)(*(void *)(*(void *)v3 + 72) + 16 * v214), "");
                unint64_t v286 = &__p;
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  unint64_t v286 = (std::string *)__p.__r_.__value_.__r.__words[0];
                }
                if (*(char *)(v279 + 23) < 0) {
                  uint64_t v279 = *(void *)v279;
                }
                *(_DWORD *)std::__split_buffer<std::string> buf = 136315906;
                *(void *)&uint8_t buf[4] = "ADMBuilder.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 387;
                *(_WORD *)&unsigned char buf[18] = 2080;
                *(void *)&buf[20] = v286;
                *(_WORD *)&buf[28] = 2080;
                *(void *)&buf[30] = v279;
                _os_log_impl(&dword_18FEC0000, v285, OS_LOG_TYPE_ERROR, "%25s:%-5d Pack format '%s' references unknown input pack format '%s'", buf, 0x26u);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
              }
            }
            if (v350.__r_.__value_.__l.__size_) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v350.__r_.__value_.__l.__size_);
            }
            if (!v281) {
              break;
            }
          }
          uint64_t v287 = *(void *)&v3[37] + 32 * v214;
          if (*(unsigned char *)(v287 + 24))
          {
            CA::ADMBuilder::Impl::resolve_pack_format_reference((CA::ADMBuilder::Impl *)&v350, v3, *(void *)&v3[37] + 32 * v214);
            std::string::size_type v289 = v350.__r_.__value_.__r.__words[0];
            if (v350.__r_.__value_.__r.__words[0])
            {
              uint64_t v290 = *(void *)(*(void *)(*(void *)v3 + 72) + 16 * v214);
              std::string::size_type v291 = v350.__r_.__value_.__l.__size_;
              if (v350.__r_.__value_.__l.__size_) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v350.__r_.__value_.__l.__size_ + 16), 1uLL, memory_order_relaxed);
              }
              char v292 = *(std::__shared_weak_count **)(v290 + 264);
              *(void *)(v290 + 256) = v289;
              *(void *)(v290 + 264) = v291;
              if (v292) {
                std::__shared_weak_count::__release_weak(v292);
              }
            }
            else
            {
              v293 = CA::ADMBuilder::Impl::log(v288);
              if (os_log_type_enabled(v293, OS_LOG_TYPE_ERROR))
              {
                std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, *(void *)(*(void *)(*(void *)v3 + 72) + 16 * v214), "");
                uint64_t v294 = &__p;
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  uint64_t v294 = (std::string *)__p.__r_.__value_.__r.__words[0];
                }
                if (*(char *)(v287 + 23) < 0) {
                  uint64_t v287 = *(void *)v287;
                }
                *(_DWORD *)std::__split_buffer<std::string> buf = 136315906;
                *(void *)&uint8_t buf[4] = "ADMBuilder.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 399;
                *(_WORD *)&unsigned char buf[18] = 2080;
                *(void *)&buf[20] = v294;
                *(_WORD *)&buf[28] = 2080;
                *(void *)&buf[30] = v287;
                _os_log_impl(&dword_18FEC0000, v293, OS_LOG_TYPE_ERROR, "%25s:%-5d Pack format '%s' references unknown output pack format '%s'", buf, 0x26u);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
              }
            }
            if (v350.__r_.__value_.__l.__size_) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v350.__r_.__value_.__l.__size_);
            }
            if (!v289) {
              break;
            }
          }
          uint64_t v295 = (uint64_t *)(*(void *)&v3[22] + 24 * v214);
          uint64_t v297 = *v295;
          uint64_t v296 = v295[1];
          while (v297 != v296)
          {
            CA::ADMBuilder::Impl::resolve_channel_format_reference(&v350, (uint64_t *)v3, v297);
            std::string::size_type v299 = v350.__r_.__value_.__r.__words[0];
            if (v350.__r_.__value_.__r.__words[0])
            {
              v300 = *(void **)(*(void *)(*(void *)v3 + 72) + 16 * v214);
              int v301 = (void *)v300[18];
              unint64_t v302 = v300[19];
              if ((unint64_t)v301 >= v302)
              {
                uint64_t v308 = v300[17];
                uint64_t v309 = ((uint64_t)v301 - v308) >> 4;
                unint64_t v310 = v309 + 1;
                if ((unint64_t)(v309 + 1) >> 60) {
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v311 = v302 - v308;
                if (v311 >> 3 > v310) {
                  unint64_t v310 = v311 >> 3;
                }
                if ((unint64_t)v311 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v312 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v312 = v310;
                }
                *(void *)&buf[32] = v300 + 19;
                uint64_t v313 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v312);
                v314 = &v313[16 * v309];
                *(void *)std::__split_buffer<std::string> buf = v313;
                *(void *)&_DWORD buf[8] = v314;
                *(void *)&buf[24] = &v313[16 * v315];
                std::string::size_type v316 = v350.__r_.__value_.__l.__size_;
                *(_OWORD *)v314 = *(_OWORD *)&v350.__r_.__value_.__l.__data_;
                if (v316) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v316 + 8), 1uLL, memory_order_relaxed);
                }
                *(void *)&buf[16] = v314 + 16;
                std::vector<std::shared_ptr<unsigned char []>>::__swap_out_circular_buffer(v300 + 17, buf);
                v304 = (void *)v300[18];
                std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)buf);
              }
              else
              {
                *int v301 = v350.__r_.__value_.__r.__words[0];
                std::string::size_type v303 = v350.__r_.__value_.__l.__size_;
                v301[1] = v350.__r_.__value_.__l.__size_;
                if (v303) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v303 + 8), 1uLL, memory_order_relaxed);
                }
                v304 = v301 + 2;
                v300[18] = v301 + 2;
              }
              v300[18] = v304;
            }
            else
            {
              uint64_t v305 = CA::ADMBuilder::Impl::log(v298);
              if (os_log_type_enabled(v305, OS_LOG_TYPE_ERROR))
              {
                std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, *(void *)(*(void *)(*(void *)v3 + 72) + 16 * v214), "");
                v306 = &__p;
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  v306 = (std::string *)__p.__r_.__value_.__r.__words[0];
                }
                uint64_t v307 = v297;
                if (*(char *)(v297 + 23) < 0) {
                  uint64_t v307 = *(void *)v297;
                }
                *(_DWORD *)std::__split_buffer<std::string> buf = 136315906;
                *(void *)&uint8_t buf[4] = "ADMBuilder.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 409;
                *(_WORD *)&unsigned char buf[18] = 2080;
                *(void *)&buf[20] = v306;
                *(_WORD *)&buf[28] = 2080;
                *(void *)&buf[30] = v307;
                _os_log_impl(&dword_18FEC0000, v305, OS_LOG_TYPE_ERROR, "%25s:%-5d Pack format '%s' references unknown channel format '%s'", buf, 0x26u);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
              }
            }
            if (v350.__r_.__value_.__l.__size_) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v350.__r_.__value_.__l.__size_);
            }
            if (!v299) {
              goto LABEL_454;
            }
            v297 += 24;
          }
          if (++v214 >= (unint64_t)((uint64_t)(*(void *)(*(void *)v3 + 80)
                                                    - *(void *)(*(void *)v3 + 72)) >> 4))
          {
            a2 = v348;
            uint64_t v3 = *v349;
            uint64_t v4 = (uint64_t *)**v349;
            goto LABEL_382;
          }
        }
LABEL_454:
        a2 = v348;
        goto LABEL_455;
      }
LABEL_382:
      if (v4[28] != v4[27])
      {
        uint64_t v317 = 0;
        uint64_t v318 = 0;
        unint64_t v319 = 0;
        do
        {
          int8x8_t v320 = v3[58];
          long long v321 = (void *)(*(void *)&v320 + v317);
          if (*(unsigned char *)(*(void *)&v320 + v317 + 24))
          {
            CA::ADMBuilder::Impl::resolve_stream_format_reference(&v350, (uint64_t)v3, *(void *)&v320 + v317);
            std::string::size_type v323 = v350.__r_.__value_.__r.__words[0];
            if (v350.__r_.__value_.__r.__words[0])
            {
              uint64_t v324 = *(void *)(*(void *)(*(void *)v3 + 216) + v318);
              std::string::size_type v325 = v350.__r_.__value_.__l.__size_;
              if (v350.__r_.__value_.__l.__size_) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v350.__r_.__value_.__l.__size_ + 16), 1uLL, memory_order_relaxed);
              }
              v326 = *(std::__shared_weak_count **)(v324 + 136);
              *(void *)(v324 + 128) = v323;
              *(void *)(v324 + 136) = v325;
              if (v326) {
                std::__shared_weak_count::__release_weak(v326);
              }
            }
            else
            {
              v327 = CA::ADMBuilder::Impl::log(v322);
              if (os_log_type_enabled(v327, OS_LOG_TYPE_ERROR))
              {
                std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, *(void *)(*(void *)(*(void *)v3 + 216) + v318), "");
                uint64_t v328 = &__p;
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  uint64_t v328 = (std::string *)__p.__r_.__value_.__r.__words[0];
                }
                if (*(char *)(*(void *)&v320 + v317 + 23) < 0) {
                  long long v321 = (void *)*v321;
                }
                *(_DWORD *)std::__split_buffer<std::string> buf = 136315906;
                *(void *)&uint8_t buf[4] = "ADMBuilder.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 427;
                *(_WORD *)&unsigned char buf[18] = 2080;
                *(void *)&buf[20] = v328;
                *(_WORD *)&buf[28] = 2080;
                *(void *)&buf[30] = v321;
                _os_log_impl(&dword_18FEC0000, v327, OS_LOG_TYPE_ERROR, "%25s:%-5d Track format '%s' references unknown stream format '%s'", buf, 0x26u);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
              }
            }
            if (v350.__r_.__value_.__l.__size_) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v350.__r_.__value_.__l.__size_);
            }
            if (!v323) {
              goto LABEL_454;
            }
            uint64_t v4 = (uint64_t *)*v3;
          }
          ++v319;
          v318 += 16;
          v317 += 32;
        }
        while (v319 < (v4[28] - v4[27]) >> 4);
        a2 = v348;
        uint64_t v3 = *v349;
      }
      if (CA::ADMBuilder::Impl::build_stream_formats(v3)
        && CA::ADMBuilder::Impl::build_track_uids(*v349)
        && CA::ADMBuilder::Impl::build_channel_formats((CA::ADMBuilder::Impl *)*v349))
      {
        uint64_t v329 = *v349;
        *a2 = **v349;
        a2 = v329;
      }
    }
    else
    {
      uint64_t v83 = 0;
      int8x8_t v84 = v3[7];
      while (*(void *)(*(void *)&v84 + 24 * v83 + 8) == *(void *)(*(void *)&v84 + 24 * v83))
      {
LABEL_112:
        if (++v83 >= (unint64_t)((v4[4] - v4[3]) >> 4))
        {
          uint64_t v3 = *v349;
          uint64_t v4 = (uint64_t *)**v349;
          goto LABEL_114;
        }
      }
      unint64_t v85 = 0;
      while (1)
      {
        int8x8_t v86 = *v3;
        unint64_t v88 = *(long long **)(*(void *)v3 + 48);
        unint64_t v87 = *(long long **)(*(void *)v3 + 56);
        if (v88 == v87) {
          break;
        }
        int v89 = (unsigned __int8 *)(*(void *)(*(void *)&v84 + 24 * v83) + 24 * v85);
        while (1)
        {
          unint64_t v90 = *(unsigned __int8 **)v88;
          this = std::operator==[abi:ne180100]<std::string,std::string>(v89, *(unsigned __int8 **)v88);
          if (this) {
            break;
          }
          if (++v88 == v87) {
            goto LABEL_414;
          }
        }
        unint64_t v91 = *(void **)(*(void *)(*(void *)&v86 + 24) + 16 * v83);
        unint64_t v92 = (unsigned __int8 **)v91[16];
        unint64_t v93 = v91[17];
        if ((unint64_t)v92 >= v93)
        {
          uint64_t v96 = v91[15];
          uint64_t v97 = ((uint64_t)v92 - v96) >> 4;
          unint64_t v98 = v97 + 1;
          if ((unint64_t)(v97 + 1) >> 60) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v99 = v93 - v96;
          if (v99 >> 3 > v98) {
            unint64_t v98 = v99 >> 3;
          }
          if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v100 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v100 = v98;
          }
          *(void *)&buf[32] = v91 + 17;
          unint64_t v101 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v100);
          unint64_t v102 = &v101[16 * v97];
          *(void *)std::__split_buffer<std::string> buf = v101;
          *(void *)&_DWORD buf[8] = v102;
          *(void *)&buf[24] = &v101[16 * v103];
          long long v104 = *v88;
          *(_OWORD *)unint64_t v102 = *v88;
          if (*((void *)&v104 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v104 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          *(void *)&buf[16] = v102 + 16;
          std::vector<std::shared_ptr<unsigned char []>>::__swap_out_circular_buffer(v91 + 15, buf);
          int v95 = (void *)v91[16];
          this = std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)buf);
        }
        else
        {
          std::string *v92 = v90;
          uint64_t v94 = *((void *)v88 + 1);
          v92[1] = (unsigned __int8 *)v94;
          if (v94) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v94 + 8), 1uLL, memory_order_relaxed);
          }
          int v95 = v92 + 2;
          v91[16] = v92 + 2;
        }
        v91[16] = v95;
        ++v85;
        int8x8_t v84 = v3[7];
        if (v85 >= 0xAAAAAAAAAAAAAAABLL
                  * ((uint64_t)(*(void *)(*(void *)&v84 + 24 * v83 + 8) - *(void *)(*(void *)&v84 + 24 * v83)) >> 3))
        {
          uint64_t v4 = (uint64_t *)*v3;
          goto LABEL_112;
        }
      }
LABEL_414:
      uint64_t v330 = CA::ADMBuilder::Impl::log((CA::ADMBuilder::Impl *)this);
      if (os_log_type_enabled(v330, OS_LOG_TYPE_ERROR))
      {
        std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, *(void *)(*(void *)(*(void *)v3 + 24) + 16 * v83), "");
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v334 = &__p;
        }
        else {
          uint64_t v334 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        uint64_t v335 = *(void *)(*(void *)&v3[7] + 24 * v83) + 24 * v85;
        if (*(char *)(v335 + 23) < 0) {
          uint64_t v335 = *(void *)v335;
        }
        *(_DWORD *)std::__split_buffer<std::string> buf = 136315906;
        *(void *)&uint8_t buf[4] = "ADMBuilder.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 257;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = v334;
        *(_WORD *)&buf[28] = 2080;
        *(void *)&buf[30] = v335;
        v333 = "%25s:%-5d Content '%s' references unknown object '%s'";
LABEL_421:
        _os_log_impl(&dword_18FEC0000, v330, OS_LOG_TYPE_ERROR, v333, buf, 0x26u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_422;
        }
      }
    }
  }
LABEL_455:
  *a2 = 0;
}

void sub_18FF87498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CA::ADMBuilder::Impl::build_stream_formats(int8x8_t *this)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (*(void *)(*(void *)this + 176) == *(void *)(*(void *)this + 168)) {
    return 1;
  }
  uint64_t v2 = 0;
  while (1)
  {
    uint64_t v3 = *(void *)&this[49] + 32 * v2;
    if (*(unsigned char *)(v3 + 24))
    {
      CA::ADMBuilder::Impl::resolve_channel_format_reference(&v43, (uint64_t *)this, *(void *)&this[49] + 32 * v2);
      uint64_t v5 = v43;
      if ((void)v43)
      {
        uint64_t v6 = *(void *)(*(void *)(*(void *)this + 168) + 16 * v2);
        uint64_t v7 = *((void *)&v43 + 1);
        if (*((void *)&v43 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v43 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        unint64_t v8 = *(std::__shared_weak_count **)(v6 + 136);
        *(void *)(v6 + 128) = v5;
        *(void *)(v6 + 136) = v7;
        if (v8) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        }
      }
      else
      {
        int v9 = CA::ADMBuilder::Impl::log(v4);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, *(void *)(*(void *)(*(void *)this + 168) + 16 * v2), "");
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if (*(char *)(v3 + 23) < 0) {
            uint64_t v3 = *(void *)v3;
          }
          *(_DWORD *)std::__split_buffer<std::string> buf = 136315906;
          *(void *)&uint8_t buf[4] = "ADMBuilder.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 445;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = p_p;
          *(_WORD *)&buf[28] = 2080;
          *(void *)&buf[30] = v3;
          _os_log_impl(&dword_18FEC0000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Stream format '%s' references unknown channel format '%s'", buf, 0x26u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
      }
      if (*((void *)&v43 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v43 + 1));
      }
      if (!v5) {
        break;
      }
    }
    uint64_t v11 = *(void *)&this[52] + 32 * v2;
    if (*(unsigned char *)(v11 + 24))
    {
      CA::ADMBuilder::Impl::resolve_pack_format_reference((CA::ADMBuilder::Impl *)&v43, this, *(void *)&this[52] + 32 * v2);
      uint64_t v13 = v43;
      if ((void)v43)
      {
        uint64_t v14 = *(void *)(*(void *)(*(void *)this + 168) + 16 * v2);
        uint64_t v15 = *((void *)&v43 + 1);
        if (*((void *)&v43 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v43 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        unint64_t v16 = *(std::__shared_weak_count **)(v14 + 152);
        *(void *)(v14 + 144) = v13;
        *(void *)(v14 + 152) = v15;
        if (v16) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        }
      }
      else
      {
        unint64_t v17 = CA::ADMBuilder::Impl::log(v12);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, *(void *)(*(void *)(*(void *)this + 168) + 16 * v2), "");
          uint64_t v18 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if (*(char *)(v11 + 23) < 0) {
            uint64_t v11 = *(void *)v11;
          }
          *(_DWORD *)std::__split_buffer<std::string> buf = 136315906;
          *(void *)&uint8_t buf[4] = "ADMBuilder.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 456;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v18;
          *(_WORD *)&buf[28] = 2080;
          *(void *)&buf[30] = v11;
          _os_log_impl(&dword_18FEC0000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d Stream format '%s' references unknown pack format '%s'", buf, 0x26u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
      }
      if (*((void *)&v43 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v43 + 1));
      }
      if (!v13) {
        break;
      }
    }
    int v19 = (uint64_t *)(*(void *)&this[55] + 24 * v2);
    uint64_t v21 = *v19;
    uint64_t v20 = v19[1];
    while (v21 != v20)
    {
      CA::ADMBuilder::Impl::resolve_track_format_reference(&v43, (uint64_t)this, v21);
      uint64_t v23 = v43;
      if ((void)v43)
      {
        uint64_t v24 = *(void **)(*(void *)(*(void *)this + 168) + 16 * v2);
        unint64_t v25 = (void *)v24[21];
        unint64_t v26 = v24[22];
        if ((unint64_t)v25 >= v26)
        {
          uint64_t v32 = v24[20];
          uint64_t v33 = ((uint64_t)v25 - v32) >> 4;
          unint64_t v34 = v33 + 1;
          if ((unint64_t)(v33 + 1) >> 60) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v35 = v26 - v32;
          if (v35 >> 3 > v34) {
            unint64_t v34 = v35 >> 3;
          }
          if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v36 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v36 = v34;
          }
          *(void *)&buf[32] = v24 + 22;
          std::string::size_type v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v36);
          uint64_t v38 = &v37[16 * v33];
          *(void *)std::__split_buffer<std::string> buf = v37;
          *(void *)&_DWORD buf[8] = v38;
          *(void *)&buf[24] = &v37[16 * v39];
          uint64_t v40 = *((void *)&v43 + 1);
          *(_OWORD *)uint64_t v38 = v43;
          if (v40) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v40 + 8), 1uLL, memory_order_relaxed);
          }
          *(void *)&buf[16] = v38 + 16;
          std::vector<std::shared_ptr<unsigned char []>>::__swap_out_circular_buffer(v24 + 20, buf);
          uint64_t v28 = (void *)v24[21];
          std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)buf);
        }
        else
        {
          uint64_t v27 = *((void *)&v43 + 1);
          *unint64_t v25 = v43;
          v25[1] = v27;
          if (v27) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v28 = v25 + 2;
          v24[21] = v25 + 2;
        }
        v24[21] = v28;
      }
      else
      {
        uint64_t v29 = CA::ADMBuilder::Impl::log(v22);
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, *(void *)(*(void *)(*(void *)this + 168) + 16 * v2), "");
          uint64_t v30 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          uint64_t v31 = v21;
          if (*(char *)(v21 + 23) < 0) {
            uint64_t v31 = *(void *)v21;
          }
          *(_DWORD *)std::__split_buffer<std::string> buf = 136315906;
          *(void *)&uint8_t buf[4] = "ADMBuilder.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 466;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v30;
          *(_WORD *)&buf[28] = 2080;
          *(void *)&buf[30] = v31;
          _os_log_impl(&dword_18FEC0000, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d Stream format '%s' references unknown track format '%s'", buf, 0x26u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
      }
      if (*((void *)&v43 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v43 + 1));
      }
      if (!v23) {
        return 0;
      }
      v21 += 24;
    }
    if (++v2 >= (unint64_t)((uint64_t)(*(void *)(*(void *)this + 176) - *(void *)(*(void *)this + 168)) >> 4)) {
      return 1;
    }
  }
  return 0;
}

void sub_18FF87A64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CA::ADMBuilder::Impl::build_track_uids(int8x8_t *this)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (*(void *)(*(void *)this + 272) == *(void *)(*(void *)this + 264)) {
    return 1;
  }
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  unint64_t v4 = 0;
  while (1)
  {
    int8x8_t v5 = this[67];
    uint64_t v6 = (void *)(*(void *)&v5 + v2);
    if (*(unsigned char *)(*(void *)&v5 + v2 + 24))
    {
      CA::ADMBuilder::Impl::resolve_track_format_reference(&v34, (uint64_t)this, *(void *)&v5 + v2);
      uint64_t v8 = v34;
      if (v34)
      {
        uint64_t v9 = *(void *)(*(void *)(*(void *)this + 264) + v3);
        int v10 = v35;
        if (v35) {
          atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v11 = *(std::__shared_weak_count **)(v9 + 160);
        *(void *)(v9 + 152) = v8;
        *(void *)(v9 + 16std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v10;
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
      }
      else
      {
        uint64_t v12 = CA::ADMBuilder::Impl::log(v7);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, *(void *)(*(void *)(*(void *)this + 264) + v3), "");
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if (*(char *)(*(void *)&v5 + v2 + 23) < 0) {
            uint64_t v6 = (void *)*v6;
          }
          *(_DWORD *)std::__split_buffer<std::string> buf = 136315906;
          std::string::size_type v37 = "ADMBuilder.cpp";
          __int16 v38 = 1024;
          int v39 = 484;
          __int16 v40 = 2080;
          unint64_t v41 = p_p;
          __int16 v42 = 2080;
          long long v43 = v6;
          _os_log_impl(&dword_18FEC0000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d Track UID '%s' references unknown track format '%s'", buf, 0x26u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
      }
      if (v35) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v35);
      }
      if (!v8) {
        break;
      }
    }
    int8x8_t v14 = this[61];
    uint64_t v15 = (void *)(*(void *)&v14 + v2);
    if (*(unsigned char *)(*(void *)&v14 + v2 + 24))
    {
      CA::ADMBuilder::Impl::resolve_channel_format_reference(&v34, (uint64_t *)this, *(void *)&v14 + v2);
      uint64_t v17 = v34;
      if (v34)
      {
        uint64_t v18 = *(void *)(*(void *)(*(void *)this + 264) + v3);
        int v19 = v35;
        if (v35) {
          atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v20 = *(std::__shared_weak_count **)(v18 + 176);
        *(void *)(v18 + 168) = v17;
        *(void *)(v18 + 176) = v19;
        if (v20) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v20);
        }
      }
      else
      {
        uint64_t v21 = CA::ADMBuilder::Impl::log(v16);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, *(void *)(*(void *)(*(void *)this + 264) + v3), "");
          unint64_t v22 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            unint64_t v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if (*(char *)(*(void *)&v14 + v2 + 23) < 0) {
            uint64_t v15 = (void *)*v15;
          }
          *(_DWORD *)std::__split_buffer<std::string> buf = 136315906;
          std::string::size_type v37 = "ADMBuilder.cpp";
          __int16 v38 = 1024;
          int v39 = 495;
          __int16 v40 = 2080;
          unint64_t v41 = v22;
          __int16 v42 = 2080;
          long long v43 = v15;
          _os_log_impl(&dword_18FEC0000, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d Track UID '%s' references unknown channel format '%s'", buf, 0x26u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
      }
      if (v35) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v35);
      }
      if (!v17) {
        break;
      }
    }
    int8x8_t v23 = this[64];
    uint64_t v24 = (void *)(*(void *)&v23 + v2);
    if (*(unsigned char *)(*(void *)&v23 + v2 + 24))
    {
      CA::ADMBuilder::Impl::resolve_pack_format_reference((CA::ADMBuilder::Impl *)&v34, this, *(void *)&v23 + v2);
      uint64_t v26 = v34;
      if (v34)
      {
        uint64_t v27 = *(void *)(*(void *)(*(void *)this + 264) + v3);
        uint64_t v28 = v35;
        if (v35) {
          atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v29 = *(std::__shared_weak_count **)(v27 + 192);
        *(void *)(v27 + 184) = v26;
        *(void *)(v27 + 192) = v28;
        if (v29) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v29);
        }
      }
      else
      {
        uint64_t v30 = CA::ADMBuilder::Impl::log(v25);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        {
          std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, *(void *)(*(void *)(*(void *)this + 264) + v3), "");
          uint64_t v31 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v31 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if (*(char *)(*(void *)&v23 + v2 + 23) < 0) {
            uint64_t v24 = (void *)*v24;
          }
          *(_DWORD *)std::__split_buffer<std::string> buf = 136315906;
          std::string::size_type v37 = "ADMBuilder.cpp";
          __int16 v38 = 1024;
          int v39 = 506;
          __int16 v40 = 2080;
          unint64_t v41 = v31;
          __int16 v42 = 2080;
          long long v43 = v24;
          _os_log_impl(&dword_18FEC0000, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d Track UID '%s' references unknown pack format '%s'", buf, 0x26u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
      }
      if (v35) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v35);
      }
      if (!v26) {
        break;
      }
    }
    ++v4;
    v3 += 16;
    v2 += 32;
    if (v4 >= (uint64_t)(*(void *)(*(void *)this + 272) - *(void *)(*(void *)this + 264)) >> 4) {
      return 1;
    }
  }
  return 0;
}

void sub_18FF87ED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CA::ADMBuilder::Impl::build_channel_formats(CA::ADMBuilder::Impl *this)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)this;
  uint64_t v2 = *(void *)(*(void *)this + 120);
  if (*(void *)(*(void *)this + 128) == v2) {
    return 1;
  }
  uint64_t v4 = 0;
  while (*(void *)(*(void *)(v2 + 16 * v4) + 152) == *(void *)(*(void *)(v2 + 16 * v4) + 144))
  {
LABEL_42:
    if (++v4 >= (unint64_t)((*(void *)(v1 + 128) - v2) >> 4)) {
      return 1;
    }
  }
  uint64_t v5 = 0;
  while (1)
  {
    uint64_t v6 = *(void *)(*((void *)this + 70) + 24 * v4) + 32 * v5;
    if (*(unsigned char *)(v6 + 24))
    {
      CA::ADMBuilder::Impl::resolve_channel_format_reference(&v32, (uint64_t *)this, *(void *)(*((void *)this + 70) + 24 * v4) + 32 * v5);
      uint64_t v8 = v32;
      if (v32)
      {
        uint64_t v9 = *(void *)(*(void *)(*(void *)(*(void *)this + 120) + 16 * v4) + 144);
        int v10 = v33;
        if (v33) {
          atomic_fetch_add_explicit(&v33->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        *(void *)(v9 + 480 * v5 + 264) = v8;
        uint64_t v11 = v9 + 480 * v5;
        uint64_t v12 = *(std::__shared_weak_count **)(v11 + 272);
        *(void *)(v11 + 272) = v10;
        if (v12) {
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      else
      {
        uint64_t v13 = CA::ADMBuilder::Impl::log(v7);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, *(void *)(*(void *)(*(void *)(*(void *)this + 120) + 16 * v4) + 144) + 480 * v5, "");
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if (*(char *)(v6 + 23) < 0) {
            uint64_t v6 = *(void *)v6;
          }
          *(_DWORD *)std::__split_buffer<std::string> buf = 136315906;
          uint64_t v35 = "ADMBuilder.cpp";
          __int16 v36 = 1024;
          int v37 = 528;
          __int16 v38 = 2080;
          int v39 = p_p;
          __int16 v40 = 2080;
          unint64_t v41 = (void *)v6;
          _os_log_impl(&dword_18FEC0000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d Block format '%s' references unknown channel format '%s'", buf, 0x26u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
      }
      if (v33) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v33);
      }
      if (!v8) {
        return 0;
      }
      uint64_t v1 = *(void *)this;
    }
    uint64_t v15 = *(void *)(*(void *)(v1 + 120) + 16 * v4);
    uint64_t v16 = *(void *)(v15 + 144);
    if (*(void *)(v16 + 480 * v5 + 288) != *(void *)(v16 + 480 * v5 + 280)) {
      break;
    }
LABEL_40:
    if (++v5 >= 0xEEEEEEEEEEEEEEEFLL * ((*(void *)(v15 + 152) - v16) >> 5))
    {
      uint64_t v2 = *(void *)(v1 + 120);
      goto LABEL_42;
    }
  }
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  unint64_t v19 = 0;
  while (1)
  {
    uint64_t v20 = *(void *)(*(void *)(*((void *)this + 73) + 24 * v4) + 24 * v5);
    uint64_t v21 = (void *)(v20 + v17);
    CA::ADMBuilder::Impl::resolve_channel_format_reference(&v32, (uint64_t *)this, v20 + v17);
    uint64_t v23 = v32;
    if (v32)
    {
      uint64_t v24 = *(void *)(*(void *)(*(void *)(*(void *)(*(void *)this + 120) + 16 * v4) + 144) + 480 * v5 + 280);
      unint64_t v25 = v33;
      if (v33) {
        atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v26 = v24 + v18;
      uint64_t v27 = *(std::__shared_weak_count **)(v26 + 136);
      *(void *)(v26 + 128) = v23;
      *(void *)(v26 + 136) = v25;
      if (v27) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      }
    }
    else
    {
      uint64_t v28 = CA::ADMBuilder::Impl::log(v22);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&__p, *(void *)(*(void *)(*(void *)(*(void *)this + 120) + 16 * v4) + 144) + 480 * v5, "");
        uint64_t v29 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if (*(char *)(v20 + v17 + 23) < 0) {
          uint64_t v21 = (void *)*v21;
        }
        *(_DWORD *)std::__split_buffer<std::string> buf = 136315906;
        uint64_t v35 = "ADMBuilder.cpp";
        __int16 v36 = 1024;
        int v37 = 544;
        __int16 v38 = 2080;
        int v39 = v29;
        __int16 v40 = 2080;
        unint64_t v41 = v21;
        _os_log_impl(&dword_18FEC0000, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d Block format '%s' references unknown channel format '%s'", buf, 0x26u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
    if (v33) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    }
    if (!v23) {
      return 0;
    }
    ++v19;
    uint64_t v1 = *(void *)this;
    uint64_t v15 = *(void *)(*(void *)(*(void *)this + 120) + 16 * v4);
    uint64_t v16 = *(void *)(v15 + 144);
    v18 += 144;
    v17 += 24;
    if (v19 >= 0x8E38E38E38E38E39
              * ((uint64_t)(*(void *)(v16 + 480 * v5 + 288) - *(void *)(v16 + 480 * v5 + 280)) >> 4))
      goto LABEL_40;
  }
}

void sub_18FF88334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void CA::ADMBuilder::Impl::resolve_channel_format_reference(void *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6 = std::__string_hash<char>::operator()[abi:ne180100](a3);
  int8x8_t v7 = (int8x8_t)a2[116];
  if (v7)
  {
    unint64_t v8 = v6;
    uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
    v9.i16[0] = vaddlv_u8(v9);
    unint64_t v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v11 = v6;
      if (v6 >= *(void *)&v7) {
        unint64_t v11 = v6 % *(void *)&v7;
      }
    }
    else
    {
      unint64_t v11 = (*(void *)&v7 - 1) & v6;
    }
    uint64_t v12 = *(unsigned __int8 ***)(a2[115] + 8 * v11);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, (unsigned __int8 *)a3))
          {
            uint64_t v25 = *((void *)i + 6);
            *a1 = *((void *)i + 5);
            a1[1] = v25;
            if (v25) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
            }
            return;
          }
        }
        else
        {
          if (v10 > 1)
          {
            if (v14 >= *(void *)&v7) {
              v14 %= *(void *)&v7;
            }
          }
          else
          {
            v14 &= *(void *)&v7 - 1;
          }
          if (v14 != v11) {
            break;
          }
        }
      }
    }
  }
  int v15 = *(char *)(a3 + 23);
  if (v15 < 0)
  {
    if (*(void *)(a3 + 8) != 11)
    {
LABEL_58:
      *a1 = 0;
      a1[1] = 0;
      return;
    }
    uint64_t v16 = *(void *)a3;
  }
  else
  {
    uint64_t v16 = a3;
    if (v15 != 11) {
      goto LABEL_58;
    }
  }
  if (*(unsigned char *)(v16 + 7) != 48) {
    goto LABEL_58;
  }
  if (std::string::starts_with[abi:ne180100]((const void **)a3, "AC_0001"))
  {
    std::string::basic_string(&__p, (const std::string *)a3, 8uLL, 3uLL, (std::allocator<char> *)&v32);
    char v19 = v18;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v19 && v17 && v17 < 0x29)
    {
      CA::ADMBuilder::Impl::build_common_channel_format(a1, a2, 1, v17 - 1);
      return;
    }
    goto LABEL_58;
  }
  if (std::string::starts_with[abi:ne180100]((const void **)a3, "AC_0004"))
  {
    p_p = &__p;
    std::string::basic_string(&__p, (const std::string *)a3, 7uLL, 4uLL, (std::allocator<char> *)&v32);
    uint64_t v21 = 0;
    char v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = __p.__r_.__value_.__l.__size_;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    uint64_t v24 = (const char **)CA::ADMCommonFormats::channel_formats_hoa;
    while (v21 != 258)
    {
      if (size == strlen(*v24) && !memcmp(p_p, *v24, size))
      {
        CA::ADMBuilder::Impl::build_common_channel_format(a1, a2, 4, v21);
        char v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        break;
      }
      ++v21;
      v24 += 4;
    }
    if (v22 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v21 == 258) {
      goto LABEL_58;
    }
  }
  else
  {
    if (!std::string::starts_with[abi:ne180100]((const void **)a3, "AC_0005")) {
      goto LABEL_58;
    }
    uint64_t v26 = &__p;
    std::string::basic_string(&__p, (const std::string *)a3, 7uLL, 4uLL, (std::allocator<char> *)&v32);
    uint64_t v27 = 0;
    char v28 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v29 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v29 = __p.__r_.__value_.__l.__size_;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    uint64_t v30 = (const char **)CA::ADMCommonFormats::channel_formats_binaural;
    while (v27 != 2)
    {
      if (v29 == strlen(*v30) && !memcmp(v26, *v30, v29))
      {
        CA::ADMBuilder::Impl::build_common_channel_format(a1, a2, 5, v27);
        char v28 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        break;
      }
      ++v27;
      v30 += 2;
    }
    if (v28 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v27 == 2) {
      goto LABEL_58;
    }
  }
}

void sub_18FF886A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::string::starts_with[abi:ne180100](const void **a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    unint64_t v6 = a1;
    a1 = (const void **)*a1;
    size_t v5 = (size_t)v6[1];
  }
  else
  {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  return v5 >= v4 && memcmp(a1, __s, v4) == 0;
}

uint64_t anonymous namespace'::parse_hex_digits(unsigned __int8 *a1)
{
  uint64_t v1 = a1[23];
  uint64_t v2 = *((void *)a1 + 1);
  if ((v1 & 0x80u) == 0) {
    uint64_t v3 = a1;
  }
  else {
    uint64_t v3 = *(unsigned __int8 **)a1;
  }
  uint64_t result = 0;
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = v2;
  }
  for (; v1; --v1)
  {
    int v5 = *v3;
    result *= 16;
    if ((v5 - 48) > 9)
    {
      if (v5 != 97) {
        return 0;
      }
    }
    else
    {
      result += (v5 - 48);
    }
    ++v3;
  }
  return result;
}

void CA::ADMBuilder::Impl::build_common_channel_format(void *a1, uint64_t *a2, int a3, uint64_t a4)
{
  CA::ADMBuilder::Impl::common_channel_format_id((uint64_t)&v85, a3, a4);
  if (!v87)
  {
    *a1 = 0;
    a1[1] = 0;
    return;
  }
  unint64_t v8 = (char *)operator new(0xC0uLL);
  uint8x8_t v9 = v8;
  *((void *)v8 + 1) = 0;
  unint64_t v10 = (atomic_ullong *)(v8 + 8);
  *((void *)v8 + 2) = 0;
  *(void *)unint64_t v8 = &unk_1EDFA2888;
  *(_OWORD *)(v8 + 24) = 0u;
  unint64_t v11 = v8 + 24;
  *(_OWORD *)(v8 + 4std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 12std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_OWORD *)(v8 + 168) = 0u;
  *((void *)v8 + 23) = 0;
  if (SHIBYTE(v86) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v8 + 1, (const std::string::value_type *)v85, *((std::string::size_type *)&v85 + 1));
  }
  else
  {
    *unint64_t v11 = v85;
    *((void *)v8 + 5) = v86;
  }
  v9[48] = 1;
  switch(a3)
  {
    case 1:
      std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>((std::string *)(v9 + 56), CA::ADMCommonFormats::channel_formats_direct_speakers[3 * a4]);
      std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>((std::string *)(v9 + 88), "0001");
      uint64_t v21 = (std::string *)(v9 + 120);
      if (v9[144])
      {
        std::string::__assign_external(v21, "DirectSpeakers");
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(v21, "DirectSpeakers");
        v9[144] = 1;
      }
      long long v83 = 0u;
      long long v84 = 0u;
      long long v81 = 0u;
      long long v82 = 0u;
      long long v79 = 0u;
      long long v80 = 0u;
      long long v77 = 0u;
      long long v78 = 0u;
      long long v75 = 0u;
      long long v76 = 0u;
      long long v73 = 0u;
      long long v74 = 0u;
      long long v71 = 0u;
      long long v72 = 0u;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v65 = 0u;
      long long v66 = 0u;
      long long v63 = 0u;
      long long v64 = 0u;
      long long v62 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      *(_OWORD *)uint64_t v55 = 0u;
      std::vector<CA::ADMBlockFormat>::push_back[abi:ne180100]((long long **)v9 + 21, (long long *)v55);
      if ((_BYTE)v84 && SHIBYTE(v83) < 0) {
        operator delete(*((void **)&v82 + 1));
      }
      if ((_BYTE)v81 && SHIBYTE(v80) < 0) {
        operator delete(*((void **)&v79 + 1));
      }
      v54.__r_.__value_.__r.__words[0] = (std::string::size_type)&v78;
      std::vector<CA::ADMZone>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
      v54.__r_.__value_.__r.__words[0] = (std::string::size_type)&v72 + 8;
      std::vector<CA::ADMMatrixCoefficient>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
      if ((void)v72) {
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v72);
      }
      if ((_BYTE)v68 && SHIBYTE(v67) < 0) {
        operator delete(*((void **)&v66 + 1));
      }
      if (BYTE8(v56) && SBYTE7(v56) < 0) {
        operator delete(v55[0]);
      }
      if (!v9[48]) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      if (v9[47] >= 0) {
        size_t v22 = v9[47];
      }
      else {
        size_t v22 = *((void *)v9 + 4);
      }
      uint64_t v23 = v55;
      std::string::basic_string[abi:ne180100]((uint64_t)v55, v22 + 9);
      if (SBYTE7(v56) < 0) {
        uint64_t v23 = (void **)v55[0];
      }
      if (v22)
      {
        if (v9[47] >= 0) {
          uint64_t v24 = v11;
        }
        else {
          uint64_t v24 = (const void *)*((void *)v9 + 3);
        }
        memmove(v23, v24, v22);
      }
      strcpy((char *)v23 + v22, "_00000001");
      std::optional<std::string>::operator=[abi:ne180100]<std::string,void>(*((void *)v9 + 22) - 480, (long long *)v55);
      if (SBYTE7(v56) < 0) {
        operator delete(v55[0]);
      }
      uint64_t v25 = *((void *)v9 + 22);
      uint64_t v26 = (uint64_t *)(v25 - 480);
      if (*(unsigned char *)(v25 - 456))
      {
        if (*(char *)(v25 - 457) < 0) {
          uint64_t v26 = (uint64_t *)*v26;
        }
        *((unsigned char *)v26 + 1) = 66;
        std::string::basic_string[abi:ne180100]<0>(&v54, "urn:itu:bs:2051:0:speaker:");
        size_t v27 = strlen(CA::ADMCommonFormats::channel_formats_direct_speakers[3 * a4 + 1]);
        char v28 = std::string::append(&v54, CA::ADMCommonFormats::channel_formats_direct_speakers[3 * a4 + 1], v27);
        *(_OWORD *)uint64_t v55 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        *(void *)&long long v56 = *((void *)&v28->__r_.__value_.__l + 2);
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        std::optional<std::string>::operator=[abi:ne180100]<std::string,void>(*((void *)v9 + 22) - 296, (long long *)v55);
        if (SBYTE7(v56) < 0) {
          operator delete(v55[0]);
        }
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v54.__r_.__value_.__l.__data_);
        }
        size_t v29 = &CA::ADMCommonFormats::channel_formats_direct_speakers[3 * a4];
        uint64_t v30 = *((void *)v9 + 22) - 480;
        *(_DWORD *)(v30 + 136) = *((_DWORD *)v29 + 4);
        *(unsigned char *)(v30 + 14std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1;
        int v31 = *((_DWORD *)v29 + 5);
        uint64_t v32 = *((void *)v9 + 22) - 480;
        *(_DWORD *)(v32 + 144) = v31;
        *(unsigned char *)(v32 + 148) = 1;
        uint64_t v33 = *((void *)v9 + 22) - 480;
        *(_DWORD *)(v33 + 152) = 1065353216;
        *(unsigned char *)(v33 + 156) = 1;
        goto LABEL_113;
      }
      goto LABEL_129;
    case 4:
      std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>((std::string *)(v9 + 56), CA::ADMCommonFormats::channel_formats_hoa[4 * a4 + 1]);
      std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>((std::string *)(v9 + 88), "0004");
      std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>((std::string *)v9 + 5, "HOA");
      long long v83 = 0u;
      long long v84 = 0u;
      long long v81 = 0u;
      long long v82 = 0u;
      long long v79 = 0u;
      long long v80 = 0u;
      long long v77 = 0u;
      long long v78 = 0u;
      long long v75 = 0u;
      long long v76 = 0u;
      long long v73 = 0u;
      long long v74 = 0u;
      long long v71 = 0u;
      long long v72 = 0u;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v65 = 0u;
      long long v66 = 0u;
      long long v63 = 0u;
      long long v64 = 0u;
      long long v62 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      *(_OWORD *)uint64_t v55 = 0u;
      std::vector<CA::ADMBlockFormat>::push_back[abi:ne180100]((long long **)v9 + 21, (long long *)v55);
      if ((_BYTE)v84 && SHIBYTE(v83) < 0) {
        operator delete(*((void **)&v82 + 1));
      }
      if ((_BYTE)v81 && SHIBYTE(v80) < 0) {
        operator delete(*((void **)&v79 + 1));
      }
      v54.__r_.__value_.__r.__words[0] = (std::string::size_type)&v78;
      std::vector<CA::ADMZone>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
      v54.__r_.__value_.__r.__words[0] = (std::string::size_type)&v72 + 8;
      std::vector<CA::ADMMatrixCoefficient>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
      if ((void)v72) {
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v72);
      }
      if ((_BYTE)v68 && SHIBYTE(v67) < 0) {
        operator delete(*((void **)&v66 + 1));
      }
      if (BYTE8(v56) && SBYTE7(v56) < 0) {
        operator delete(v55[0]);
      }
      if (!v9[48]) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      if (v9[47] >= 0) {
        size_t v13 = v9[47];
      }
      else {
        size_t v13 = *((void *)v9 + 4);
      }
      unint64_t v14 = v55;
      std::string::basic_string[abi:ne180100]((uint64_t)v55, v13 + 9);
      if (SBYTE7(v56) < 0) {
        unint64_t v14 = (void **)v55[0];
      }
      if (v13)
      {
        if (v9[47] >= 0) {
          int v15 = v11;
        }
        else {
          int v15 = (const void *)*((void *)v9 + 3);
        }
        memmove(v14, v15, v13);
      }
      strcpy((char *)v14 + v13, "_00000001");
      std::optional<std::string>::operator=[abi:ne180100]<std::string,void>(*((void *)v9 + 22) - 480, (long long *)v55);
      if (SBYTE7(v56) < 0) {
        operator delete(v55[0]);
      }
      uint64_t v16 = *((void *)v9 + 22);
      unint64_t v17 = (uint64_t *)(v16 - 480);
      if (*(unsigned char *)(v16 - 456))
      {
        if (*(char *)(v16 - 457) < 0) {
          unint64_t v17 = (uint64_t *)*v17;
        }
        *((unsigned char *)v17 + 1) = 66;
        char v18 = &CA::ADMCommonFormats::channel_formats_hoa[4 * a4];
        std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>((std::string *)(*((void *)v9 + 22) - 40), v18[3]);
        uint64_t v19 = *((void *)v9 + 22);
        *(_DWORD *)(v19 - 56) = *((_DWORD *)v18 + 4);
        *(unsigned char *)(v19 - 52) = 1;
        uint64_t v20 = *((void *)v9 + 22);
        *(_DWORD *)(v20 - 48) = *((_DWORD *)v18 + 5);
        *(unsigned char *)(v20 - 44) = 1;
        goto LABEL_113;
      }
LABEL_129:
      std::__throw_bad_optional_access[abi:ne180100]();
    case 5:
      std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>((std::string *)(v9 + 56), CA::ADMCommonFormats::channel_formats_binaural[2 * a4 + 1]);
      std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>((std::string *)(v9 + 88), "0005");
      uint64_t v12 = (std::string *)(v9 + 120);
      if (v9[144])
      {
        std::string::__assign_external(v12, "Binaural");
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(v12, "Binaural");
        v9[144] = 1;
      }
      long long v83 = 0u;
      long long v84 = 0u;
      long long v81 = 0u;
      long long v82 = 0u;
      long long v79 = 0u;
      long long v80 = 0u;
      long long v77 = 0u;
      long long v78 = 0u;
      long long v75 = 0u;
      long long v76 = 0u;
      long long v73 = 0u;
      long long v74 = 0u;
      long long v71 = 0u;
      long long v72 = 0u;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v65 = 0u;
      long long v66 = 0u;
      long long v63 = 0u;
      long long v64 = 0u;
      long long v62 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      *(_OWORD *)uint64_t v55 = 0u;
      std::vector<CA::ADMBlockFormat>::push_back[abi:ne180100]((long long **)v9 + 21, (long long *)v55);
      if ((_BYTE)v84 && SHIBYTE(v83) < 0) {
        operator delete(*((void **)&v82 + 1));
      }
      if ((_BYTE)v81 && SHIBYTE(v80) < 0) {
        operator delete(*((void **)&v79 + 1));
      }
      v54.__r_.__value_.__r.__words[0] = (std::string::size_type)&v78;
      std::vector<CA::ADMZone>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
      v54.__r_.__value_.__r.__words[0] = (std::string::size_type)&v72 + 8;
      std::vector<CA::ADMMatrixCoefficient>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
      if ((void)v72) {
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v72);
      }
      if ((_BYTE)v68 && SHIBYTE(v67) < 0) {
        operator delete(*((void **)&v66 + 1));
      }
      if (BYTE8(v56) && SBYTE7(v56) < 0) {
        operator delete(v55[0]);
      }
      if (!v9[48]) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      if (v9[47] >= 0) {
        size_t v34 = v9[47];
      }
      else {
        size_t v34 = *((void *)v9 + 4);
      }
      uint64_t v35 = v55;
      std::string::basic_string[abi:ne180100]((uint64_t)v55, v34 + 9);
      if (SBYTE7(v56) < 0) {
        uint64_t v35 = (void **)v55[0];
      }
      if (v34)
      {
        if (v9[47] >= 0) {
          __int16 v36 = v11;
        }
        else {
          __int16 v36 = (const void *)*((void *)v9 + 3);
        }
        memmove(v35, v36, v34);
      }
      strcpy((char *)v35 + v34, "_00000001");
      std::optional<std::string>::operator=[abi:ne180100]<std::string,void>(*((void *)v9 + 22) - 480, (long long *)v55);
      if (SBYTE7(v56) < 0) {
        operator delete(v55[0]);
      }
      uint64_t v37 = *((void *)v9 + 22);
      __int16 v38 = (uint64_t *)(v37 - 480);
      if (*(unsigned char *)(v37 - 456))
      {
        if (*(char *)(v37 - 457) < 0) {
          __int16 v38 = (uint64_t *)*v38;
        }
        *((unsigned char *)v38 + 1) = 66;
LABEL_113:
        v55[0] = v11;
        int v39 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(a2 + 115), (unsigned __int8 *)v11, (long long **)v55);
        atomic_fetch_add_explicit((atomic_ullong *volatile)v9 + 1, 1uLL, memory_order_relaxed);
        __int16 v40 = (std::__shared_weak_count *)*((void *)v39 + 6);
        *((void *)v39 + 5) = v11;
        *((void *)v39 + 6) = v9;
        if (v40) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v40);
        }
        uint64_t v41 = *a2;
        uint64_t v42 = *(void **)(*a2 + 152);
        unint64_t v43 = *(void *)(*a2 + 160);
        if ((unint64_t)v42 >= v43)
        {
          uint64_t v45 = *(void *)(v41 + 144);
          uint64_t v46 = ((uint64_t)v42 - v45) >> 4;
          unint64_t v47 = v46 + 1;
          if ((unint64_t)(v46 + 1) >> 60) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v48 = v43 - v45;
          if (v48 >> 3 > v47) {
            unint64_t v47 = v48 >> 3;
          }
          if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v49 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v49 = v47;
          }
          *(void *)&long long v57 = *a2 + 160;
          uint64_t v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v49);
          *(void *)&long long v51 = v11;
          *((void *)&v51 + 1) = v9;
          uint64_t v52 = &v50[16 * v46];
          v55[0] = v50;
          v55[1] = v52;
          *((void *)&v56 + 1) = &v50[16 * v53];
          *(_OWORD *)uint64_t v52 = v51;
          atomic_fetch_add_explicit(v10, 1uLL, memory_order_relaxed);
          *(void *)&long long v56 = v52 + 16;
          std::vector<std::shared_ptr<unsigned char []>>::__swap_out_circular_buffer((void *)(v41 + 144), v55);
          uint64_t v44 = *(void **)(v41 + 152);
          std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)v55);
        }
        else
        {
          *uint64_t v42 = v11;
          v42[1] = v9;
          atomic_fetch_add_explicit((atomic_ullong *volatile)v9 + 1, 1uLL, memory_order_relaxed);
          uint64_t v44 = v42 + 2;
          *(void *)(v41 + 152) = v42 + 2;
        }
        *(void *)(v41 + 152) = v44;
        *a1 = v11;
        a1[1] = v9;
        atomic_fetch_add_explicit((atomic_ullong *volatile)v9 + 1, 1uLL, memory_order_relaxed);
        goto LABEL_125;
      }
      goto LABEL_129;
  }
  *a1 = 0;
  a1[1] = 0;
LABEL_125:
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v9);
  if (v87)
  {
    if (SHIBYTE(v86) < 0) {
      operator delete((void *)v85);
    }
  }
}

void sub_18FF890E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  if (*(unsigned char *)(v17 - 88))
  {
    if (*(char *)(v17 - 89) < 0) {
      operator delete(*(void **)(v17 - 112));
    }
  }
  _Unwind_Resume(a1);
}

void CA::ADMBuilder::Impl::common_channel_format_id(uint64_t a1, int a2, uint64_t a3)
{
  v15[2] = *MEMORY[0x1E4F143B8];
  if (a2 == 5)
  {
    std::string::basic_string[abi:ne180100]<0>(&v14, "AC_0005");
    int8x8_t v7 = CA::ADMCommonFormats::channel_formats_binaural[2 * a3];
    size_t v8 = strlen(v7);
    uint8x8_t v9 = std::string::append(&v14, v7, v8);
    goto LABEL_7;
  }
  if (a2 == 4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v14, "AC_0004");
    unint64_t v10 = CA::ADMCommonFormats::channel_formats_hoa[4 * a3];
    size_t v11 = strlen(v10);
    uint8x8_t v9 = std::string::append(&v14, v10, v11);
LABEL_7:
    std::string::size_type v5 = v9->__r_.__value_.__r.__words[0];
    v15[0] = v9->__r_.__value_.__l.__size_;
    *(void *)((char *)v15 + 7) = *(std::string::size_type *)((char *)&v9->__r_.__value_.__r.__words[1] + 7);
    char v6 = HIBYTE(v9->__r_.__value_.__r.__words[2]);
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
    goto LABEL_9;
  }
  if (a2 != 1)
  {
    char v13 = 0;
    *(unsigned char *)a1 = 0;
    goto LABEL_11;
  }
  v15[0] = v14.__r_.__value_.__l.__size_;
  std::string::size_type v5 = v14.__r_.__value_.__r.__words[0];
  *(void *)((char *)v15 + 7) = *(std::string::size_type *)((char *)&v14.__r_.__value_.__r.__words[1] + 7);
  char v6 = HIBYTE(v14.__r_.__value_.__r.__words[2]);
LABEL_9:
  uint64_t v12 = v15[0];
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v12;
  *(void *)(a1 + 15) = *(void *)((char *)v15 + 7);
  *(unsigned char *)(a1 + 23) = v6;
  char v13 = 1;
LABEL_11:
  *(unsigned char *)(a1 + 24) = v13;
}

void sub_18FF892CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>(std::string *a1, std::string::value_type *a2)
{
  if (a1[1].__r_.__value_.__s.__data_[0]) {
    return std::string::__assign_external(a1, a2);
  }
  uint64_t result = (std::string *)std::string::basic_string[abi:ne180100]<0>(a1, a2);
  result[1].__r_.__value_.__s.__data_[0] = 1;
  return result;
}

void std::vector<CA::ADMBlockFormat>::push_back[abi:ne180100](long long **a1, long long *a2)
{
  unint64_t v4 = (unint64_t)a1[1];
  unint64_t v5 = (unint64_t)a1[2];
  if (v4 >= v5)
  {
    unint64_t v7 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v4 - (void)*a1) >> 5);
    if (v7 + 1 > 0x88888888888888) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v5 - (void)*a1) >> 5);
    uint64_t v9 = 2 * v8;
    if (2 * v8 <= v7 + 1) {
      uint64_t v9 = v7 + 1;
    }
    if (v8 >= 0x44444444444444) {
      unint64_t v10 = 0x88888888888888;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10)
    {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ADMBlockFormat>>(v10);
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v11 = 0;
    }
    char v13 = (long long *)&v12[480 * v11];
    uint64_t v14 = std::construct_at[abi:ne180100]<CA::ADMBlockFormat,CA::ADMBlockFormat,CA::ADMBlockFormat*>((uint64_t)&v12[480 * v7], a2);
    uint64_t v6 = v14 + 480;
    uint64_t v16 = *a1;
    int v15 = a1[1];
    if (v15 == *a1)
    {
      *a1 = (long long *)v14;
      a1[1] = (long long *)v6;
      a1[2] = v13;
    }
    else
    {
      do
      {
        v15 -= 30;
        uint64_t v14 = std::construct_at[abi:ne180100]<CA::ADMBlockFormat,CA::ADMBlockFormat,CA::ADMBlockFormat*>(v14 - 480, v15);
      }
      while (v15 != v16);
      int v15 = *a1;
      uint64_t v17 = (void **)a1[1];
      *a1 = (long long *)v14;
      a1[1] = (long long *)v6;
      a1[2] = v13;
      while (v17 != (void **)v15)
      {
        v17 -= 60;
        CA::ADMBlockFormat::~ADMBlockFormat(v17);
      }
    }
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    uint64_t v6 = std::construct_at[abi:ne180100]<CA::ADMBlockFormat,CA::ADMBlockFormat,CA::ADMBlockFormat*>(v4, a2) + 480;
  }
  a1[1] = (long long *)v6;
}

void std::vector<CA::ADMZone>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    unint64_t v4 = (void **)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0) {
          operator delete(*(v4 - 3));
        }
        v4 -= 9;
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<CA::ADMMatrixCoefficient>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 144;
        std::__destroy_at[abi:ne180100]<CA::ADMMatrixCoefficient,0>(v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__throw_bad_optional_access[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x1E4FBA4F8] + 16;
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    uint64_t v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

void CA::ADMBlockFormat::~ADMBlockFormat(void **this)
{
  if (*((unsigned char *)this + 464) && *((char *)this + 463) < 0) {
    operator delete(this[55]);
  }
  if (*((unsigned char *)this + 416) && *((char *)this + 415) < 0) {
    operator delete(this[49]);
  }
  uint64_t v3 = this + 46;
  std::vector<CA::ADMZone>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = this + 35;
  std::vector<CA::ADMMatrixCoefficient>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = (std::__shared_weak_count *)this[34];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  if (*((unsigned char *)this + 208) && *((char *)this + 207) < 0) {
    operator delete(this[23]);
  }
  if (*((unsigned char *)this + 24))
  {
    if (*((char *)this + 23) < 0) {
      operator delete(*this);
    }
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, long long **a3)
{
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint64_t v12 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  int v15 = (void *)(a1 + 16);
  uint64_t v16 = operator new(0x38uLL);
  v41[0] = v16;
  v41[1] = a1 + 16;
  char v42 = 0;
  void *v16 = 0;
  v16[1] = v8;
  uint64_t v17 = (std::string *)(v16 + 2);
  char v18 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)v18, *((void *)v18 + 1));
  }
  else
  {
    long long v19 = *v18;
    v16[4] = *((void *)v18 + 2);
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v19;
  }
  v16[5] = 0;
  v16[6] = 0;
  char v42 = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v9 || (float)(v21 * (float)v9) < v20)
  {
    BOOL v22 = 1;
    if (v9 >= 3) {
      BOOL v22 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v9);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      int8x8_t prime = (int8x8_t)v24;
    }
    else {
      int8x8_t prime = (int8x8_t)v23;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if (*(void *)&prime > v9) {
      goto LABEL_33;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        unint64_t v32 = std::__next_prime(v32);
      }
      else
      {
        uint64_t v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2) {
          unint64_t v32 = v34;
        }
      }
      if (*(void *)&prime <= v32) {
        int8x8_t prime = (int8x8_t)v32;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v26 = operator new(8 * *(void *)&prime);
          size_t v27 = *(void **)a1;
          *(void *)a1 = v26;
          if (v27) {
            operator delete(v27);
          }
          uint64_t v28 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v28++) = 0;
          while (*(void *)&prime != v28);
          size_t v29 = (void *)*v15;
          if (*v15)
          {
            unint64_t v30 = v29[1];
            uint8x8_t v31 = (uint8x8_t)vcnt_s8(prime);
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.u32[0] > 1uLL)
            {
              if (v30 >= *(void *)&prime) {
                v30 %= *(void *)&prime;
              }
            }
            else
            {
              v30 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v3std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v15;
            uint64_t v35 = (void *)*v29;
            if (*v29)
            {
              do
              {
                unint64_t v36 = v35[1];
                if (v31.u32[0] > 1uLL)
                {
                  if (v36 >= *(void *)&prime) {
                    v36 %= *(void *)&prime;
                  }
                }
                else
                {
                  v36 &= *(void *)&prime - 1;
                }
                if (v36 != v30)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v36))
                  {
                    *(void *)(*(void *)a1 + 8 * v36) = v29;
                    goto LABEL_58;
                  }
                  void *v29 = *v35;
                  *uint64_t v35 = **(void **)(*(void *)a1 + 8 * v36);
                  **(void **)(*(void *)a1 + 8 * v36) = v35;
                  uint64_t v35 = v29;
                }
                unint64_t v36 = v30;
LABEL_58:
                size_t v29 = v35;
                uint64_t v35 = (void *)*v35;
                unint64_t v30 = v36;
              }
              while (v35);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        __int16 v40 = *(void **)a1;
        *(void *)a1 = 0;
        if (v40) {
          operator delete(v40);
        }
        unint64_t v9 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v37 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
  uint64_t i = (unsigned __int8 *)v41[0];
  if (v37)
  {
    *(void *)v41[0] = *v37;
LABEL_75:
    const char *v37 = i;
    goto LABEL_76;
  }
  *(void *)v41[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(*(void *)a1 + 8 * v3) = v15;
  if (*(void *)i)
  {
    unint64_t v38 = *(void *)(*(void *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v38 >= v9) {
        v38 %= v9;
      }
    }
    else
    {
      v38 &= v9 - 1;
    }
    uint64_t v37 = (unsigned __int8 **)(*(void *)a1 + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  v41[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,void *>>>>::reset[abi:ne180100]((uint64_t)v41);
  return i;
}

void sub_18FF89B44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<CA::ADMPackFormat>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<CA::ADMMatrixCoefficient,0>(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 136);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(unsigned char *)(a1 + 120) && *(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(unsigned char *)(a1 + 80) && *(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(unsigned char *)(a1 + 40) && *(char *)(a1 + 39) < 0)
  {
    unint64_t v3 = *(void **)(a1 + 16);
    operator delete(v3);
  }
}

uint64_t std::construct_at[abi:ne180100]<CA::ADMBlockFormat,CA::ADMBlockFormat,CA::ADMBlockFormat*>(uint64_t result, long long *a2)
{
  *(unsigned char *)uint64_t result = 0;
  *(unsigned char *)(result + 24) = 0;
  if (*((unsigned char *)a2 + 24))
  {
    long long v2 = *a2;
    *(void *)(result + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t result = v2;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    *(unsigned char *)(result + 24) = 1;
  }
  long long v3 = a2[8];
  long long v4 = a2[9];
  long long v5 = a2[10];
  uint64_t v6 = *(void *)((char *)a2 + 174);
  long long v7 = a2[4];
  long long v8 = a2[5];
  long long v9 = a2[6];
  long long v10 = a2[7];
  long long v11 = a2[2];
  long long v12 = a2[3];
  *(unsigned char *)(result + 184) = 0;
  *(_OWORD *)(result + 48) = v12;
  *(_OWORD *)(result + 32) = v11;
  *(_OWORD *)(result + 112) = v10;
  *(_OWORD *)(result + 96) = v9;
  *(_OWORD *)(result + 8std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v8;
  *(_OWORD *)(result + 64) = v7;
  *(void *)(result + 174) = v6;
  *(_OWORD *)(result + 16std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v5;
  *(_OWORD *)(result + 144) = v4;
  *(_OWORD *)(result + 128) = v3;
  *(unsigned char *)(result + 208) = 0;
  if (*((unsigned char *)a2 + 208))
  {
    long long v13 = *(long long *)((char *)a2 + 184);
    *(void *)(result + 20std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = *((void *)a2 + 25);
    *(_OWORD *)(result + 184) = v13;
    *((void *)a2 + 24) = 0;
    *((void *)a2 + 25) = 0;
    *((void *)a2 + 23) = 0;
    *(unsigned char *)(result + 208) = 1;
  }
  long long v14 = *(long long *)((char *)a2 + 216);
  long long v15 = *(long long *)((char *)a2 + 232);
  *(_OWORD *)(result + 245) = *(long long *)((char *)a2 + 245);
  *(_OWORD *)(result + 232) = v15;
  *(_OWORD *)(result + 216) = v14;
  uint64_t v16 = *((void *)a2 + 34);
  *(void *)(result + 264) = *((void *)a2 + 33);
  *(void *)(result + 272) = v16;
  *((void *)a2 + 33) = 0;
  *((void *)a2 + 34) = 0;
  *(void *)(result + 28std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
  *(void *)(result + 288) = 0;
  *(void *)(result + 296) = 0;
  uint64_t v17 = *((void *)a2 + 36);
  *(void *)(result + 28std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = *((void *)a2 + 35);
  *(void *)(result + 288) = v17;
  *(void *)(result + 296) = *((void *)a2 + 37);
  *((void *)a2 + 35) = 0;
  *((void *)a2 + 36) = 0;
  *((void *)a2 + 37) = 0;
  long long v18 = a2[19];
  long long v19 = a2[20];
  long long v20 = a2[21];
  *(_OWORD *)(result + 349) = *(long long *)((char *)a2 + 349);
  *(_OWORD *)(result + 32std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v19;
  *(_OWORD *)(result + 336) = v20;
  *(_OWORD *)(result + 304) = v18;
  *(void *)(result + 376) = 0;
  *(void *)(result + 384) = 0;
  *(void *)(result + 368) = 0;
  *(_OWORD *)(result + 368) = a2[23];
  *(void *)(result + 384) = *((void *)a2 + 48);
  *((void *)a2 + 46) = 0;
  *((void *)a2 + 47) = 0;
  *((void *)a2 + 48) = 0;
  *(unsigned char *)(result + 392) = 0;
  *(unsigned char *)(result + 416) = 0;
  if (*((unsigned char *)a2 + 416))
  {
    long long v21 = *(long long *)((char *)a2 + 392);
    *(void *)(result + 408) = *((void *)a2 + 51);
    *(_OWORD *)(result + 392) = v21;
    *((void *)a2 + 5std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
    *((void *)a2 + 51) = 0;
    *((void *)a2 + 49) = 0;
    *(unsigned char *)(result + 416) = 1;
  }
  uint64_t v22 = *((void *)a2 + 53);
  *(void *)(result + 429) = *(void *)((char *)a2 + 429);
  *(void *)(result + 424) = v22;
  *(unsigned char *)(result + 44std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
  *(unsigned char *)(result + 464) = 0;
  if (*((unsigned char *)a2 + 464))
  {
    long long v23 = *(long long *)((char *)a2 + 440);
    *(void *)(result + 456) = *((void *)a2 + 57);
    *(_OWORD *)(result + 44std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v23;
    *((void *)a2 + 56) = 0;
    *((void *)a2 + 57) = 0;
    *((void *)a2 + 55) = 0;
    *(unsigned char *)(result + 464) = 1;
  }
  *(void *)(result + 472) = *((void *)a2 + 59);
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ADMBlockFormat>>(unint64_t a1)
{
  if (a1 >= 0x88888888888889) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(480 * a1);
}

void std::__shared_ptr_emplace<CA::ADMChannelFormat>::__on_zero_shared(uint64_t a1)
{
  long long v3 = (void **)(a1 + 168);
  std::vector<CA::ADMBlockFormat>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(unsigned char *)(a1 + 144) && *(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  if (*(unsigned char *)(a1 + 112) && *(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(unsigned char *)(a1 + 80) && *(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(unsigned char *)(a1 + 48) && *(char *)(a1 + 47) < 0)
  {
    long long v2 = *(void **)(a1 + 24);
    operator delete(v2);
  }
}

void std::vector<CA::ADMBlockFormat>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  long long v2 = (void **)**a1;
  if (v2)
  {
    long long v4 = (void **)v1[1];
    long long v5 = v2;
    if (v4 != v2)
    {
      do
        CA::ADMBlockFormat::~ADMBlockFormat(v4 - 60);
      while (v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__shared_ptr_emplace<CA::ADMChannelFormat>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2888;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

void std::__shared_ptr_emplace<CA::ADMChannelFormat>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2888;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void anonymous namespace'::format(_anonymous_namespace_ *this@<X0>, uint64_t a2@<X8>, ...)
{
  va_start(va, a2);
  size_t v5 = vsnprintf(0, 0, (const char *)this, va) + 1;
  std::string::basic_string[abi:ne180100]((void *)a2, v5, 0);
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v6 = (char *)a2;
  }
  else {
    uint64_t v6 = *(char **)a2;
  }
  int v7 = vsnprintf(v6, v5, (const char *)this, va);
  std::string::resize((std::string *)a2, v7, 0);
}

void sub_18FF8A08C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void CA::ADMBuilder::Impl::resolve_track_format_reference(void *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = std::__string_hash<char>::operator()[abi:ne180100](a3);
  int8x8_t v7 = *(int8x8_t *)(a2 + 1008);
  if (v7)
  {
    unint64_t v8 = v6;
    uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
    v9.i16[0] = vaddlv_u8(v9);
    unint64_t v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v11 = v6;
      if (v6 >= *(void *)&v7) {
        unint64_t v11 = v6 % *(void *)&v7;
      }
    }
    else
    {
      unint64_t v11 = (*(void *)&v7 - 1) & v6;
    }
    long long v12 = *(unsigned __int8 ***)(*(void *)(a2 + 1000) + 8 * v11);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, (unsigned __int8 *)a3))
          {
            uint64_t v25 = *((void *)i + 6);
            *a1 = *((void *)i + 5);
            a1[1] = v25;
            if (v25) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
            }
            return;
          }
        }
        else
        {
          if (v10 > 1)
          {
            if (v14 >= *(void *)&v7) {
              v14 %= *(void *)&v7;
            }
          }
          else
          {
            v14 &= *(void *)&v7 - 1;
          }
          if (v14 != v11) {
            break;
          }
        }
      }
    }
  }
  int v15 = *(char *)(a3 + 23);
  if (v15 < 0)
  {
    if (*(void *)(a3 + 8) != 14) {
      goto LABEL_47;
    }
    uint64_t v16 = *(void *)a3;
  }
  else
  {
    uint64_t v16 = a3;
    if (v15 != 14) {
      goto LABEL_47;
    }
  }
  if (*(unsigned char *)(v16 + 7) != 48) {
    goto LABEL_47;
  }
  if (std::string::starts_with[abi:ne180100]((const void **)a3, "AT_0001"))
  {
    std::string::basic_string(&__p, (const std::string *)a3, 8uLL, 3uLL, (std::allocator<char> *)&v27);
    char v19 = v18;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v19 && v17 && v17 < 0x29)
    {
      CA::ADMBuilder::Impl::build_common_track_format(a1, a2, 1, v17 - 1);
      return;
    }
    goto LABEL_47;
  }
  if (!std::string::starts_with[abi:ne180100]((const void **)a3, "AT_0005")) {
    goto LABEL_47;
  }
  p_p = &__p;
  std::string::basic_string(&__p, (const std::string *)a3, 7uLL, 4uLL, (std::allocator<char> *)&v27);
  uint64_t v21 = 0;
  char v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = __p.__r_.__value_.__l.__size_;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  unint64_t v24 = (const char **)CA::ADMCommonFormats::channel_formats_binaural;
  while (v21 != 2)
  {
    if (size == strlen(*v24) && !memcmp(p_p, *v24, size))
    {
      CA::ADMBuilder::Impl::build_common_track_format(a1, a2, 5, v21);
      char v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      break;
    }
    ++v21;
    v24 += 2;
  }
  if (v22 < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v21 == 2)
  {
LABEL_47:
    *a1 = 0;
    a1[1] = 0;
  }
}

void sub_18FF8A334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CA::ADMBuilder::Impl::resolve_pack_format_reference(CA::ADMBuilder::Impl *a1, int8x8_t *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  unint64_t v6 = std::__string_hash<char>::operator()[abi:ne180100](a3);
  int8x8_t v7 = a2[111];
  if (v7)
  {
    unint64_t v8 = v6;
    uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
    v9.i16[0] = vaddlv_u8(v9);
    unint64_t v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v11 = v6;
      if (v6 >= *(void *)&v7) {
        unint64_t v11 = v6 % *(void *)&v7;
      }
    }
    else
    {
      unint64_t v11 = (*(void *)&v7 - 1) & v6;
    }
    long long v12 = *(unsigned __int8 ***)(*(void *)&a2[110] + 8 * v11);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, (unsigned __int8 *)v3))
          {
            uint64_t v23 = *((void *)i + 6);
            *(void *)a1 = *((void *)i + 5);
            *((void *)a1 + 1) = v23;
            if (v23) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
            }
            return;
          }
        }
        else
        {
          if (v10 > 1)
          {
            if (v14 >= *(void *)&v7) {
              v14 %= *(void *)&v7;
            }
          }
          else
          {
            v14 &= *(void *)&v7 - 1;
          }
          if (v14 != v11) {
            break;
          }
        }
      }
    }
  }
  unint64_t v15 = 0;
  int v16 = 0;
  unint64_t v17 = 0;
  if (*(char *)(v3 + 23) < 0) {
    uint64_t v3 = *(void *)v3;
  }
  char v18 = (const char **)CA::ADMCommonFormats::pack_formats;
  while (v17 != 347)
  {
    if (!strcmp((const char *)v3, *v18))
    {
      if (!v16) {
        unint64_t v15 = v17;
      }
      int v16 = 1;
    }
    else if (v16)
    {
      char v19 = a1;
      uint64_t v20 = (uint64_t)a2;
      unint64_t v21 = v15;
      unint64_t v22 = v17;
      goto LABEL_30;
    }
    ++v17;
    v18 += 6;
  }
  if (!v16)
  {
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    return;
  }
  char v19 = a1;
  uint64_t v20 = (uint64_t)a2;
  unint64_t v21 = v15;
  unint64_t v22 = 347;
LABEL_30:
  CA::ADMBuilder::Impl::build_common_pack_format(v19, v20, v21, v22);
}

void CA::ADMBuilder::Impl::build_common_pack_format(CA::ADMBuilder::Impl *this, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5 = a3;
  unint64_t v8 = CA::ADMCommonFormats::pack_formats[6 * a3];
  int v9 = v8[6];
  unint64_t v10 = (char *)operator new(0x158uLL);
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)unint64_t v10 = &unk_1EDFA27E0;
  *(_OWORD *)(v10 + 24) = 0u;
  unint64_t v11 = (unsigned __int8 *)(v10 + 24);
  *(_OWORD *)(v10 + 4std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0u;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *(_OWORD *)(v10 + 88) = 0u;
  *(_OWORD *)(v10 + 104) = 0u;
  *(_OWORD *)(v10 + 12std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0u;
  *(_OWORD *)(v10 + 136) = 0u;
  *(_OWORD *)(v10 + 152) = 0u;
  *(_OWORD *)(v10 + 168) = 0u;
  *(_OWORD *)(v10 + 184) = 0u;
  *(_OWORD *)(v10 + 20std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0u;
  *(_OWORD *)(v10 + 216) = 0u;
  *(_OWORD *)(v10 + 232) = 0u;
  *(_OWORD *)(v10 + 248) = 0u;
  *(_OWORD *)(v10 + 264) = 0u;
  *(_OWORD *)(v10 + 28std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0u;
  *(_OWORD *)(v10 + 296) = 0u;
  *(_OWORD *)(v10 + 312) = 0u;
  *(_OWORD *)(v10 + 328) = 0u;
  *(void *)this = v10 + 24;
  *((void *)this + 1) = v10;
  long long v72 = this;
  std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>((std::string *)v10 + 1, v8);
  std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>((std::string *)(v10 + 56), CA::ADMCommonFormats::pack_formats[6 * v5 + 1]);
  std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>((std::string *)(v10 + 88), CA::ADMCommonFormats::pack_formats[6 * v5 + 2]);
  std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>((std::string *)v10 + 5, CA::ADMCommonFormats::pack_formats[6 * v5 + 3]);
  unint64_t v12 = a4 - v5;
  if (a4 > v5)
  {
    int v13 = v9 - 48;
    unint64_t v14 = v10 + 184;
    unint64_t v15 = v10 + 160;
    unint64_t v5 = (unint64_t)&CA::ADMCommonFormats::pack_formats[6 * v5 + 5];
    do
    {
      int v16 = *(char **)(v5 - 8);
      if (v16)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, v16);
        CA::ADMBuilder::Impl::resolve_pack_format_reference(&v76, a2, __p);
        char v18 = (_OWORD *)*((void *)v10 + 24);
        unint64_t v17 = *((void *)v10 + 25);
        if ((unint64_t)v18 >= v17)
        {
          uint64_t v23 = ((uint64_t)v18 - *v14) >> 4;
          if ((unint64_t)(v23 + 1) >> 60) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v24 = v17 - *v14;
          uint64_t v25 = v24 >> 3;
          if (v24 >> 3 <= (unint64_t)(v23 + 1)) {
            uint64_t v25 = v23 + 1;
          }
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v26 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v26 = v25;
          }
          long long v81 = v10 + 200;
          char v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v26);
          uint64_t v28 = &v27[16 * v23];
          long long v77 = v27;
          long long v78 = v28;
          long long v80 = &v27[16 * v29];
          *(_OWORD *)uint64_t v28 = v76;
          long long v79 = v28 + 16;
          std::vector<std::shared_ptr<unsigned char []>>::__swap_out_circular_buffer((void *)v10 + 23, &v77);
          char v19 = (_OWORD *)*((void *)v10 + 24);
          std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)&v77);
        }
        else
        {
          _OWORD *v18 = v76;
          char v19 = v18 + 1;
        }
        *((void *)v10 + 24) = v19;
      }
      else
      {
        CA::ADMBuilder::Impl::common_channel_format_id((uint64_t)__p, v13, *(void *)v5);
        if (!v75) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        CA::ADMBuilder::Impl::resolve_channel_format_reference(&v76, (uint64_t *)a2, (uint64_t)__p);
        unint64_t v21 = (_OWORD *)*((void *)v10 + 21);
        unint64_t v20 = *((void *)v10 + 22);
        if ((unint64_t)v21 >= v20)
        {
          uint64_t v30 = ((uint64_t)v21 - *v15) >> 4;
          if ((unint64_t)(v30 + 1) >> 60) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v31 = v20 - *v15;
          uint64_t v32 = v31 >> 3;
          if (v31 >> 3 <= (unint64_t)(v30 + 1)) {
            uint64_t v32 = v30 + 1;
          }
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v33 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v33 = v32;
          }
          long long v81 = v10 + 176;
          uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v33);
          uint64_t v35 = &v34[16 * v30];
          long long v77 = v34;
          long long v78 = v35;
          long long v80 = &v34[16 * v36];
          *(_OWORD *)uint64_t v35 = v76;
          long long v79 = v35 + 16;
          std::vector<std::shared_ptr<unsigned char []>>::__swap_out_circular_buffer((void *)v10 + 20, &v77);
          unint64_t v22 = (_OWORD *)*((void *)v10 + 21);
          std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)&v77);
        }
        else
        {
          *unint64_t v21 = v76;
          unint64_t v22 = v21 + 1;
          *((void *)v10 + 21) = v22;
        }
        *((void *)v10 + 21) = v22;
        if (!v75) {
          goto LABEL_27;
        }
      }
      if (v74 < 0) {
        operator delete(__p[0]);
      }
LABEL_27:
      v5 += 48;
      --v12;
    }
    while (v12);
  }
  uint64_t v37 = (uint64_t *)(a2 + 880);
  unint64_t v38 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v11);
  unint64_t v39 = v38;
  unint64_t v40 = *(void *)(a2 + 888);
  if (v40)
  {
    uint8x8_t v41 = (uint8x8_t)vcnt_s8((int8x8_t)v40);
    v41.i16[0] = vaddlv_u8(v41);
    unint64_t v42 = v41.u32[0];
    if (v41.u32[0] > 1uLL)
    {
      unint64_t v5 = v38;
      if (v38 >= v40) {
        unint64_t v5 = v38 % v40;
      }
    }
    else
    {
      unint64_t v5 = (v40 - 1) & v38;
    }
    unint64_t v43 = *(void ***)(*v37 + 8 * v5);
    if (v43)
    {
      uint64_t v44 = (char *)*v43;
      if (*v43)
      {
        do
        {
          unint64_t v45 = *((void *)v44 + 1);
          if (v45 == v39)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v44 + 16, v11)) {
              goto LABEL_70;
            }
          }
          else
          {
            if (v42 > 1)
            {
              if (v45 >= v40) {
                v45 %= v40;
              }
            }
            else
            {
              v45 &= v40 - 1;
            }
            if (v45 != v5) {
              break;
            }
          }
          uint64_t v44 = *(char **)v44;
        }
        while (v44);
      }
    }
  }
  uint64_t v44 = (char *)operator new(0x38uLL);
  uint64_t v46 = (void *)(a2 + 896);
  long long v77 = v44;
  long long v78 = (char *)(a2 + 896);
  LOBYTE(v79) = 0;
  *(void *)uint64_t v44 = 0;
  *((void *)v44 + 1) = v39;
  unint64_t v47 = (std::string *)(v44 + 16);
  if (v10[47] < 0)
  {
    std::string::__init_copy_ctor_external(v47, *((const std::string::value_type **)v10 + 3), *((void *)v10 + 4));
  }
  else
  {
    *(_OWORD *)&v47->__r_.__value_.__l.__data_ = *(_OWORD *)v11;
    *((void *)v44 + 4) = *((void *)v10 + 5);
  }
  *((void *)v44 + 5) = 0;
  *((void *)v44 + 6) = 0;
  LOBYTE(v79) = 1;
  float v48 = (float)(unint64_t)(*(void *)(a2 + 904) + 1);
  float v49 = *(float *)(a2 + 912);
  if (!v40 || (float)(v49 * (float)v40) < v48)
  {
    BOOL v50 = 1;
    if (v40 >= 3) {
      BOOL v50 = (v40 & (v40 - 1)) != 0;
    }
    unint64_t v51 = v50 | (2 * v40);
    unint64_t v52 = vcvtps_u32_f32(v48 / v49);
    if (v51 <= v52) {
      size_t v53 = v52;
    }
    else {
      size_t v53 = v51;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>>>::__rehash<true>(a2 + 880, v53);
    unint64_t v40 = *(void *)(a2 + 888);
    if ((v40 & (v40 - 1)) != 0)
    {
      if (v39 >= v40) {
        unint64_t v5 = v39 % v40;
      }
      else {
        unint64_t v5 = v39;
      }
    }
    else
    {
      unint64_t v5 = (v40 - 1) & v39;
    }
  }
  uint64_t v54 = *v37;
  uint64_t v55 = *(void **)(*v37 + 8 * v5);
  if (v55)
  {
    *(void *)uint64_t v44 = *v55;
LABEL_68:
    void *v55 = v44;
    goto LABEL_69;
  }
  *(void *)uint64_t v44 = *v46;
  *uint64_t v46 = v44;
  *(void *)(v54 + 8 * v5) = v46;
  if (*(void *)v44)
  {
    unint64_t v56 = *(void *)(*(void *)v44 + 8);
    if ((v40 & (v40 - 1)) != 0)
    {
      if (v56 >= v40) {
        v56 %= v40;
      }
    }
    else
    {
      v56 &= v40 - 1;
    }
    uint64_t v55 = (void *)(*v37 + 8 * v56);
    goto LABEL_68;
  }
LABEL_69:
  long long v77 = 0;
  ++*(void *)(a2 + 904);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v77);
LABEL_70:
  atomic_fetch_add_explicit((atomic_ullong *volatile)v10 + 1, 1uLL, memory_order_relaxed);
  long long v57 = (std::__shared_weak_count *)*((void *)v44 + 6);
  *((void *)v44 + 5) = v11;
  *((void *)v44 + 6) = v10;
  if (v57) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v57);
  }
  uint64_t v58 = *(void *)a2;
  long long v59 = *(void **)(*(void *)a2 + 104);
  long long v60 = (char *)(*(void *)a2 + 112);
  if ((unint64_t)v59 >= *(void *)v60)
  {
    uint64_t v63 = *(void *)(v58 + 96);
    uint64_t v64 = ((uint64_t)v59 - v63) >> 4;
    unint64_t v65 = v64 + 1;
    if ((unint64_t)(v64 + 1) >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v66 = *(void *)v60 - v63;
    if (v66 >> 3 > v65) {
      unint64_t v65 = v66 >> 3;
    }
    if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v67 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v67 = v65;
    }
    long long v81 = v60;
    long long v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v67);
    long long v69 = &v68[16 * v64];
    long long v77 = v68;
    long long v78 = v69;
    long long v80 = &v68[16 * v70];
    long long v71 = *(_OWORD *)v72;
    *(_OWORD *)long long v69 = *(_OWORD *)v72;
    if (*((void *)&v71 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v71 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    long long v79 = v69 + 16;
    std::vector<std::shared_ptr<unsigned char []>>::__swap_out_circular_buffer((void *)(v58 + 96), &v77);
    long long v62 = *(void **)(v58 + 104);
    std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)&v77);
  }
  else
  {
    uint64_t v61 = *((void *)v72 + 1);
    *long long v59 = *(void *)v72;
    v59[1] = v61;
    if (v61) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v61 + 8), 1uLL, memory_order_relaxed);
    }
    long long v62 = v59 + 2;
    *(void *)(v58 + 104) = v59 + 2;
  }
  *(void *)(v58 + 104) = v62;
}

void sub_18FF8AB3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a21);
  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<CA::ADMPackFormat>::__on_zero_shared(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 320) && *(char *)(a1 + 319) < 0) {
    operator delete(*(void **)(a1 + 296));
  }
  long long v2 = *(std::__shared_weak_count **)(a1 + 288);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 272);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  unint64_t v5 = (void **)(a1 + 240);
  std::vector<std::weak_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100](&v5);
  unint64_t v5 = (void **)(a1 + 216);
  std::vector<std::weak_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100](&v5);
  unint64_t v5 = (void **)(a1 + 184);
  std::vector<std::shared_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100](&v5);
  unint64_t v5 = (void **)(a1 + 160);
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  if (*(unsigned char *)(a1 + 144) && *(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  if (*(unsigned char *)(a1 + 112) && *(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(unsigned char *)(a1 + 80) && *(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(unsigned char *)(a1 + 48) && *(char *)(a1 + 47) < 0)
  {
    long long v4 = *(void **)(a1 + 24);
    operator delete(v4);
  }
}

void std::vector<std::weak_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  long long v2 = (char *)**a1;
  if (v2)
  {
    long long v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unint64_t v6 = (std::__shared_weak_count *)*((void *)v4 - 1);
        if (v6) {
          std::__shared_weak_count::__release_weak(v6);
        }
        v4 -= 16;
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__shared_ptr_emplace<CA::ADMPackFormat>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA27E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

void std::__shared_ptr_emplace<CA::ADMPackFormat>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA27E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void CA::ADMBuilder::Impl::build_common_track_format(void *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (char *)operator new(0xA8uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)unint64_t v8 = &unk_1EDFA2818;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 4std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 12std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  memset(&__p, 0, sizeof(__p));
  int v68 = a3;
  if (a3 == 5)
  {
    std::string::basic_string[abi:ne180100]<0>(&v70, "AT_0005");
    size_t v9 = strlen(CA::ADMCommonFormats::channel_formats_hoa[4 * a4]);
    unint64_t v10 = std::string::append(&v70, CA::ADMCommonFormats::channel_formats_hoa[4 * a4], v9);
    uint64_t v11 = a4;
    unint64_t v67 = (atomic_ullong *)(v8 + 8);
    long long v12 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v72.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v12;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    int v13 = std::string::append(&v72, "_01", 3uLL);
    std::string::size_type v14 = v13->__r_.__value_.__r.__words[0];
    *(void *)&long long v75 = v13->__r_.__value_.__l.__size_;
    *(void *)((char *)&v75 + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    char v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    __p.__r_.__value_.__r.__words[0] = v14;
    __p.__r_.__value_.__l.__size_ = v75;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)&v75 + 7);
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = v15;
    if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v72.__r_.__value_.__l.__data_);
    }
    a4 = v11;
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v70.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if (a3 != 1) {
      goto LABEL_73;
    }
    unint64_t v67 = (atomic_ullong *)(v8 + 8);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v72;
  }
  std::optional<std::string>::operator=[abi:ne180100]<std::string&,void>((std::string *)v8 + 1, &__p);
  int v16 = (uint64_t *)(a2 + 1000);
  unint64_t v17 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&__p);
  unint64_t v18 = v17;
  unint64_t v19 = *(void *)(a2 + 1008);
  if (v19)
  {
    uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v19);
    v20.i16[0] = vaddlv_u8(v20);
    unint64_t v21 = v20.u32[0];
    if (v20.u32[0] > 1uLL)
    {
      unint64_t v4 = v17;
      if (v17 >= v19) {
        unint64_t v4 = v17 % v19;
      }
    }
    else
    {
      unint64_t v4 = (v19 - 1) & v17;
    }
    unint64_t v22 = *(void ***)(*v16 + 8 * v4);
    if (v22)
    {
      uint64_t v23 = (char *)*v22;
      if (*v22)
      {
        uint64_t v24 = a4;
        do
        {
          unint64_t v25 = *((void *)v23 + 1);
          if (v25 == v18)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v23 + 16, (unsigned __int8 *)&__p))
            {
              unint64_t v65 = v8 + 24;
              int v66 = v68;
              goto LABEL_55;
            }
          }
          else
          {
            if (v21 > 1)
            {
              if (v25 >= v19) {
                v25 %= v19;
              }
            }
            else
            {
              v25 &= v19 - 1;
            }
            if (v25 != v4) {
              break;
            }
          }
          uint64_t v23 = *(char **)v23;
        }
        while (v23);
      }
    }
  }
  uint64_t v23 = (char *)operator new(0x38uLL);
  unint64_t v26 = (void *)(a2 + 1016);
  v72.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
  v72.__r_.__value_.__l.__size_ = a2 + 1016;
  v72.__r_.__value_.__s.__data_[16] = 0;
  *(void *)uint64_t v23 = 0;
  *((void *)v23 + 1) = v18;
  char v27 = (std::string *)(v23 + 16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v27, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((void *)v23 + 4) = *((void *)&__p.__r_.__value_.__l + 2);
  }
  *((void *)v23 + 5) = 0;
  *((void *)v23 + 6) = 0;
  v72.__r_.__value_.__s.__data_[16] = 1;
  float v28 = (float)(unint64_t)(*(void *)(a2 + 1024) + 1);
  float v29 = *(float *)(a2 + 1032);
  if (!v19 || (float)(v29 * (float)v19) < v28)
  {
    BOOL v30 = 1;
    if (v19 >= 3) {
      BOOL v30 = (v19 & (v19 - 1)) != 0;
    }
    unint64_t v31 = v30 | (2 * v19);
    unint64_t v32 = vcvtps_u32_f32(v28 / v29);
    if (v31 <= v32) {
      size_t v33 = v32;
    }
    else {
      size_t v33 = v31;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>>>::__rehash<true>(a2 + 1000, v33);
    unint64_t v19 = *(void *)(a2 + 1008);
    if ((v19 & (v19 - 1)) != 0)
    {
      if (v18 >= v19) {
        unint64_t v4 = v18 % v19;
      }
      else {
        unint64_t v4 = v18;
      }
    }
    else
    {
      unint64_t v4 = (v19 - 1) & v18;
    }
  }
  uint64_t v24 = a4;
  uint64_t v34 = *v16;
  uint64_t v35 = *(void **)(*v16 + 8 * v4);
  if (v35)
  {
    *(void *)uint64_t v23 = *v35;
    unint64_t v65 = v8 + 24;
    int v66 = v68;
LABEL_53:
    *uint64_t v35 = v23;
    goto LABEL_54;
  }
  *(void *)uint64_t v23 = *v26;
  *unint64_t v26 = v23;
  *(void *)(v34 + 8 * v4) = v26;
  unint64_t v65 = v8 + 24;
  int v66 = v68;
  if (*(void *)v23)
  {
    unint64_t v36 = *(void *)(*(void *)v23 + 8);
    if ((v19 & (v19 - 1)) != 0)
    {
      if (v36 >= v19) {
        v36 %= v19;
      }
    }
    else
    {
      v36 &= v19 - 1;
    }
    uint64_t v35 = (void *)(*v16 + 8 * v36);
    goto LABEL_53;
  }
LABEL_54:
  v72.__r_.__value_.__r.__words[0] = 0;
  ++*(void *)(a2 + 1024);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v72);
LABEL_55:
  atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 1, 1uLL, memory_order_relaxed);
  uint64_t v37 = (std::__shared_weak_count *)*((void *)v23 + 6);
  *((void *)v23 + 5) = v65;
  *((void *)v23 + 6) = v8;
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  uint64_t v38 = v24;
  if (v66 == 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v70, "PCM_");
    size_t v48 = strlen(CA::ADMCommonFormats::channel_formats_direct_speakers[3 * v24]);
    float v49 = std::string::append(&v70, CA::ADMCommonFormats::channel_formats_direct_speakers[3 * v24], v48);
    std::string v72 = *v49;
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    std::optional<std::string>::operator=[abi:ne180100]<std::string,void>((uint64_t)(v8 + 56), (long long *)&v72);
    if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v72.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v70.__r_.__value_.__l.__data_);
    }
    std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>((std::string *)(v8 + 88), "0001");
    std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>((std::string *)v8 + 5, "PCM");
    CA::ADMBuilder::Impl::resolve_stream_format_reference(&v70, a2, (uint64_t)&v72);
    long long v50 = *(_OWORD *)&v70.__r_.__value_.__l.__data_;
    if (v70.__r_.__value_.__l.__size_) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v70.__r_.__value_.__l.__size_ + 16), 1uLL, memory_order_relaxed);
    }
    unint64_t v51 = (std::__shared_weak_count *)*((void *)v8 + 20);
    *(_OWORD *)(v8 + 152) = v50;
    if (v51) {
      std::__shared_weak_count::__release_weak(v51);
    }
    if (*((void *)&v50 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v50 + 1));
    }
    if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v72.__r_.__value_.__l.__data_);
    }
    unint64_t v47 = v8 + 24;
    goto LABEL_87;
  }
  if (v66 != 5)
  {
LABEL_73:
    *a1 = 0;
    a1[1] = 0;
    goto LABEL_97;
  }
  std::string::basic_string[abi:ne180100]<0>(&v70, "PCM_");
  unint64_t v39 = CA::ADMCommonFormats::channel_formats_binaural[2 * v24 + 1];
  size_t v40 = strlen(v39);
  uint8x8_t v41 = std::string::append(&v70, v39, v40);
  std::string v72 = *v41;
  v41->__r_.__value_.__l.__size_ = 0;
  v41->__r_.__value_.__r.__words[2] = 0;
  v41->__r_.__value_.__r.__words[0] = 0;
  std::optional<std::string>::operator=[abi:ne180100]<std::string,void>((uint64_t)(v8 + 56), (long long *)&v72);
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v72.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v70.__r_.__value_.__l.__data_);
  }
  std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>((std::string *)(v8 + 88), "0005");
  std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>((std::string *)v8 + 5, "PCM");
  std::string::basic_string[abi:ne180100]<0>(&v70, "AS_0005");
  size_t v42 = strlen(CA::ADMCommonFormats::channel_formats_hoa[4 * v38]);
  unint64_t v43 = std::string::append(&v70, CA::ADMCommonFormats::channel_formats_hoa[4 * v38], v42);
  long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  v72.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  CA::ADMBuilder::Impl::resolve_stream_format_reference(&v75, a2, (uint64_t)&v72);
  long long v45 = v75;
  if (*((void *)&v75 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v75 + 1) + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v46 = (std::__shared_weak_count *)*((void *)v8 + 20);
  *(_OWORD *)(v8 + 152) = v45;
  if (v46) {
    std::__shared_weak_count::__release_weak(v46);
  }
  if (*((void *)&v45 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v45 + 1));
  }
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v72.__r_.__value_.__l.__data_);
  }
  unint64_t v47 = v8 + 24;
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v70.__r_.__value_.__l.__data_);
  }
LABEL_87:
  uint64_t v52 = *(void *)a2;
  size_t v53 = *(void **)(*(void *)a2 + 248);
  unint64_t v54 = *(void *)(*(void *)a2 + 256);
  if ((unint64_t)v53 >= v54)
  {
    uint64_t v56 = *(void *)(v52 + 240);
    uint64_t v57 = ((uint64_t)v53 - v56) >> 4;
    unint64_t v58 = v57 + 1;
    if ((unint64_t)(v57 + 1) >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v59 = v54 - v56;
    if (v59 >> 3 > v58) {
      unint64_t v58 = v59 >> 3;
    }
    if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v60 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v60 = v58;
    }
    uint64_t v74 = v52 + 256;
    uint64_t v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v60);
    *(void *)&long long v62 = v47;
    *((void *)&v62 + 1) = v8;
    uint64_t v63 = &v61[16 * v57];
    v72.__r_.__value_.__r.__words[0] = (std::string::size_type)v61;
    v72.__r_.__value_.__l.__size_ = (std::string::size_type)v63;
    long long v73 = &v61[16 * v64];
    *(_OWORD *)uint64_t v63 = v62;
    atomic_fetch_add_explicit(v67, 1uLL, memory_order_relaxed);
    v72.__r_.__value_.__r.__words[2] = (std::string::size_type)(v63 + 16);
    std::vector<std::shared_ptr<unsigned char []>>::__swap_out_circular_buffer((void *)(v52 + 240), &v72);
    uint64_t v55 = *(void **)(v52 + 248);
    std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)&v72);
  }
  else
  {
    *size_t v53 = v47;
    v53[1] = v8;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 1, 1uLL, memory_order_relaxed);
    uint64_t v55 = v53 + 2;
    *(void *)(v52 + 248) = v53 + 2;
  }
  *(void *)(v52 + 248) = v55;
  *a1 = v47;
  a1[1] = v8;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 1, 1uLL, memory_order_relaxed);
LABEL_97:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v8);
}

void sub_18FF8B5CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a19 < 0) {
    operator delete(a14);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  _Unwind_Resume(a1);
}

std::string *std::optional<std::string>::operator=[abi:ne180100]<std::string&,void>(std::string *this, const std::string *a2)
{
  if (this[1].__r_.__value_.__s.__data_[0])
  {
    std::string::operator=(this, a2);
  }
  else
  {
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(this, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      this->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return this;
}

void CA::ADMBuilder::Impl::resolve_stream_format_reference(void *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = std::__string_hash<char>::operator()[abi:ne180100](a3);
  int8x8_t v7 = *(int8x8_t *)(a2 + 968);
  if (v7)
  {
    unint64_t v8 = v6;
    uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
    v9.i16[0] = vaddlv_u8(v9);
    unint64_t v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v11 = v6;
      if (v6 >= *(void *)&v7) {
        unint64_t v11 = v6 % *(void *)&v7;
      }
    }
    else
    {
      unint64_t v11 = (*(void *)&v7 - 1) & v6;
    }
    long long v12 = *(unsigned __int8 ***)(*(void *)(a2 + 960) + 8 * v11);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, (unsigned __int8 *)a3))
          {
            uint64_t v25 = *((void *)i + 6);
            *a1 = *((void *)i + 5);
            a1[1] = v25;
            if (v25) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
            }
            return;
          }
        }
        else
        {
          if (v10 > 1)
          {
            if (v14 >= *(void *)&v7) {
              v14 %= *(void *)&v7;
            }
          }
          else
          {
            v14 &= *(void *)&v7 - 1;
          }
          if (v14 != v11) {
            break;
          }
        }
      }
    }
  }
  int v15 = *(char *)(a3 + 23);
  if (v15 < 0)
  {
    if (*(void *)(a3 + 8) != 11) {
      goto LABEL_47;
    }
    uint64_t v16 = *(void *)a3;
  }
  else
  {
    uint64_t v16 = a3;
    if (v15 != 11) {
      goto LABEL_47;
    }
  }
  if (*(unsigned char *)(v16 + 7) != 48) {
    goto LABEL_47;
  }
  if (std::string::starts_with[abi:ne180100]((const void **)a3, "AS_0001"))
  {
    std::string::basic_string(&__p, (const std::string *)a3, 8uLL, 3uLL, (std::allocator<char> *)&v27);
    char v19 = v18;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v19 && v17 && v17 < 0x29)
    {
      CA::ADMBuilder::Impl::build_common_stream_format(a1, a2, 1, v17 - 1);
      return;
    }
    goto LABEL_47;
  }
  if (!std::string::starts_with[abi:ne180100]((const void **)a3, "AS_0005")) {
    goto LABEL_47;
  }
  p_p = &__p;
  std::string::basic_string(&__p, (const std::string *)a3, 7uLL, 4uLL, (std::allocator<char> *)&v27);
  uint64_t v21 = 0;
  char v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = __p.__r_.__value_.__l.__size_;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  uint64_t v24 = (const char **)CA::ADMCommonFormats::channel_formats_binaural;
  while (v21 != 2)
  {
    if (size == strlen(*v24) && !memcmp(p_p, *v24, size))
    {
      CA::ADMBuilder::Impl::build_common_stream_format(a1, a2, 5, v21);
      char v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      break;
    }
    ++v21;
    v24 += 2;
  }
  if (v22 < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v21 == 2)
  {
LABEL_47:
    *a1 = 0;
    a1[1] = 0;
  }
}

void sub_18FF8B968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CA::ADMBuilder::Impl::build_common_stream_format(void *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v96 = *MEMORY[0x1E4F143B8];
  int8x8_t v7 = (char *)operator new(0xD0uLL);
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = 0;
  *(void *)int8x8_t v7 = &unk_1EDFA2850;
  *(_OWORD *)(v7 + 24) = 0u;
  *(_OWORD *)(v7 + 4std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0u;
  *(_OWORD *)(v7 + 56) = 0u;
  *(_OWORD *)(v7 + 72) = 0u;
  *(_OWORD *)(v7 + 88) = 0u;
  *(_OWORD *)(v7 + 104) = 0u;
  *(_OWORD *)(v7 + 12std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0u;
  *(_OWORD *)(v7 + 136) = 0u;
  *(_OWORD *)(v7 + 152) = 0u;
  *(_OWORD *)(v7 + 168) = 0u;
  *(_OWORD *)(v7 + 184) = 0u;
  *((void *)v7 + 25) = 0;
  memset(&__p, 0, sizeof(__p));
  if (a3 == 5)
  {
    std::string::basic_string[abi:ne180100]<0>(&v92, "AS_0005");
    long long v85 = (atomic_ullong *)(v7 + 8);
    size_t v8 = strlen(CA::ADMCommonFormats::channel_formats_binaural[2 * a4]);
    uint8x8_t v9 = std::string::append(&v92, CA::ADMCommonFormats::channel_formats_binaural[2 * a4], v8);
    std::string::size_type v10 = v9->__r_.__value_.__r.__words[0];
    v95.__r_.__value_.__r.__words[0] = v9->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v95.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v9->__r_.__value_.__r.__words[1] + 7);
    char v11 = HIBYTE(v9->__r_.__value_.__r.__words[2]);
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    __p.__r_.__value_.__r.__words[0] = v10;
    __p.__r_.__value_.__l.__size_ = v95.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v95.__r_.__value_.__r.__words + 7);
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = v11;
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v92.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if (a3 != 1)
    {
      *a1 = 0;
      a1[1] = 0;
      goto LABEL_111;
    }
    long long v85 = (atomic_ullong *)(v7 + 8);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v92;
  }
  std::optional<std::string>::operator=[abi:ne180100]<std::string&,void>((std::string *)v7 + 1, &__p);
  long long v12 = (uint64_t *)(a2 + 960);
  unint64_t v13 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&__p);
  unint64_t v14 = v13;
  unint64_t v15 = *(void *)(a2 + 968);
  if (v15)
  {
    uint8x8_t v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
    v16.i16[0] = vaddlv_u8(v16);
    unint64_t v17 = v16.u32[0];
    if (v16.u32[0] > 1uLL)
    {
      unint64_t v4 = v13;
      if (v13 >= v15) {
        unint64_t v4 = v13 % v15;
      }
    }
    else
    {
      unint64_t v4 = (v15 - 1) & v13;
    }
    char v18 = *(void ***)(*v12 + 8 * v4);
    if (v18)
    {
      char v19 = (char *)*v18;
      if (*v18)
      {
        do
        {
          unint64_t v20 = *((void *)v19 + 1);
          if (v20 == v14)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v19 + 16, (unsigned __int8 *)&__p))
            {
              long long v84 = v7 + 24;
              goto LABEL_52;
            }
          }
          else
          {
            if (v17 > 1)
            {
              if (v20 >= v15) {
                v20 %= v15;
              }
            }
            else
            {
              v20 &= v15 - 1;
            }
            if (v20 != v4) {
              break;
            }
          }
          char v19 = *(char **)v19;
        }
        while (v19);
      }
    }
  }
  char v19 = (char *)operator new(0x38uLL);
  uint64_t v21 = (void *)(a2 + 976);
  v92.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
  v92.__r_.__value_.__l.__size_ = a2 + 976;
  v92.__r_.__value_.__s.__data_[16] = 0;
  *(void *)char v19 = 0;
  *((void *)v19 + 1) = v14;
  char v22 = (std::string *)(v19 + 16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v22, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v22->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((void *)v19 + 4) = *((void *)&__p.__r_.__value_.__l + 2);
  }
  *((void *)v19 + 5) = 0;
  *((void *)v19 + 6) = 0;
  v92.__r_.__value_.__s.__data_[16] = 1;
  float v23 = (float)(unint64_t)(*(void *)(a2 + 984) + 1);
  float v24 = *(float *)(a2 + 992);
  if (!v15 || (float)(v24 * (float)v15) < v23)
  {
    BOOL v25 = 1;
    if (v15 >= 3) {
      BOOL v25 = (v15 & (v15 - 1)) != 0;
    }
    unint64_t v26 = v25 | (2 * v15);
    unint64_t v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27) {
      size_t v28 = v27;
    }
    else {
      size_t v28 = v26;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>>>::__rehash<true>(a2 + 960, v28);
    unint64_t v15 = *(void *)(a2 + 968);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15) {
        unint64_t v4 = v14 % v15;
      }
      else {
        unint64_t v4 = v14;
      }
    }
    else
    {
      unint64_t v4 = (v15 - 1) & v14;
    }
  }
  uint64_t v29 = *v12;
  BOOL v30 = *(void **)(*v12 + 8 * v4);
  if (v30)
  {
    *(void *)char v19 = *v30;
    long long v84 = v7 + 24;
LABEL_50:
    *BOOL v30 = v19;
    goto LABEL_51;
  }
  *(void *)char v19 = *v21;
  *uint64_t v21 = v19;
  *(void *)(v29 + 8 * v4) = v21;
  long long v84 = v7 + 24;
  if (*(void *)v19)
  {
    unint64_t v31 = *(void *)(*(void *)v19 + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v31 >= v15) {
        v31 %= v15;
      }
    }
    else
    {
      v31 &= v15 - 1;
    }
    BOOL v30 = (void *)(*v12 + 8 * v31);
    goto LABEL_50;
  }
LABEL_51:
  v92.__r_.__value_.__r.__words[0] = 0;
  ++*(void *)(a2 + 984);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v92);
LABEL_52:
  atomic_fetch_add_explicit((atomic_ullong *volatile)v7 + 1, 1uLL, memory_order_relaxed);
  unint64_t v32 = (std::__shared_weak_count *)*((void *)v19 + 6);
  *((void *)v19 + 5) = v84;
  *((void *)v19 + 6) = v7;
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  if (a3 == 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v95, "PCM_");
    size_t v48 = strlen(CA::ADMCommonFormats::channel_formats_direct_speakers[3 * a4]);
    float v49 = std::string::append(&v95, CA::ADMCommonFormats::channel_formats_direct_speakers[3 * a4], v48);
    std::string v92 = *v49;
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    std::optional<std::string>::operator=[abi:ne180100]<std::string,void>((uint64_t)(v7 + 56), (long long *)&v92);
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v92.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v95.__r_.__value_.__l.__data_);
    }
    std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>((std::string *)(v7 + 88), "0001");
    std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>((std::string *)v7 + 5, "PCM");
    CA::ADMBuilder::Impl::resolve_channel_format_reference(&v95, (uint64_t *)a2, (uint64_t)&v92);
    long long v50 = (std::__shared_weak_count *)*((void *)v7 + 20);
    *(_OWORD *)(v7 + 152) = *(_OWORD *)&v95.__r_.__value_.__l.__data_;
    if (v50) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v50);
    }
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v92.__r_.__value_.__l.__data_);
    }
    CA::ADMBuilder::Impl::resolve_track_format_reference(&v89, a2, &v95);
    unint64_t v51 = *((void *)v7 + 25);
    uint64_t v52 = (_OWORD *)*((void *)v7 + 24);
    if ((unint64_t)v52 >= v51)
    {
      uint64_t v54 = *((void *)v7 + 23);
      uint64_t v55 = ((uint64_t)v52 - v54) >> 4;
      if ((unint64_t)(v55 + 1) >> 60) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v56 = v51 - v54;
      uint64_t v57 = v56 >> 3;
      if (v56 >> 3 <= (unint64_t)(v55 + 1)) {
        uint64_t v57 = v55 + 1;
      }
      if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v58 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v58 = v57;
      }
      uint64_t v94 = (uint64_t)(v7 + 200);
      uint64_t v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v58);
      unint64_t v60 = &v59[16 * v55];
      v92.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
      v92.__r_.__value_.__l.__size_ = (std::string::size_type)v60;
      unint64_t v93 = &v59[16 * v61];
      *(_OWORD *)unint64_t v60 = *(_OWORD *)&v89.__r_.__value_.__l.__data_;
      v92.__r_.__value_.__r.__words[2] = (std::string::size_type)(v60 + 16);
      std::vector<std::shared_ptr<unsigned char []>>::__swap_out_circular_buffer((void *)v7 + 23, &v92);
      size_t v53 = (_OWORD *)*((void *)v7 + 24);
      std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)&v92);
      long long v84 = v7 + 24;
    }
    else
    {
      *uint64_t v52 = *(_OWORD *)&v89.__r_.__value_.__l.__data_;
      size_t v53 = v52 + 1;
    }
    *((void *)v7 + 24) = v53;
    if ((SHIBYTE(v95.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_101;
    }
    long long v62 = (void *)v95.__r_.__value_.__r.__words[0];
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v95, "PCM_");
    size_t v33 = strlen(CA::ADMCommonFormats::channel_formats_binaural[2 * a4 + 1]);
    uint64_t v34 = std::string::append(&v95, CA::ADMCommonFormats::channel_formats_binaural[2 * a4 + 1], v33);
    std::string v92 = *v34;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    std::optional<std::string>::operator=[abi:ne180100]<std::string,void>((uint64_t)(v7 + 56), (long long *)&v92);
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v92.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v95.__r_.__value_.__l.__data_);
    }
    std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>((std::string *)(v7 + 88), "0005");
    std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>((std::string *)v7 + 5, "PCM");
    std::string::basic_string[abi:ne180100]<0>(&v95, "AC_0005");
    uint64_t v35 = CA::ADMCommonFormats::channel_formats_hoa[4 * a4];
    size_t v36 = strlen(v35);
    uint64_t v37 = std::string::append(&v95, v35, v36);
    long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v92.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    CA::ADMBuilder::Impl::resolve_channel_format_reference(&v89, (uint64_t *)a2, (uint64_t)&v92);
    unint64_t v39 = (std::__shared_weak_count *)*((void *)v7 + 20);
    *(_OWORD *)(v7 + 152) = *(_OWORD *)&v89.__r_.__value_.__l.__data_;
    if (v39) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v39);
    }
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v92.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v95.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v88, "AT_0005");
    size_t v40 = strlen(v35);
    uint8x8_t v41 = std::string::append(&v88, v35, v40);
    long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    v89.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    unint64_t v43 = std::string::append(&v89, "_01", 3uLL);
    long long v84 = v7 + 24;
    long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    v95.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    CA::ADMBuilder::Impl::resolve_track_format_reference(&v90, a2, &v95);
    unint64_t v45 = *((void *)v7 + 25);
    uint64_t v46 = (_OWORD *)*((void *)v7 + 24);
    if ((unint64_t)v46 >= v45)
    {
      uint64_t v63 = *((void *)v7 + 23);
      uint64_t v64 = ((uint64_t)v46 - v63) >> 4;
      if ((unint64_t)(v64 + 1) >> 60) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v65 = v45 - v63;
      uint64_t v66 = v65 >> 3;
      if (v65 >> 3 <= (unint64_t)(v64 + 1)) {
        uint64_t v66 = v64 + 1;
      }
      if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v67 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v67 = v66;
      }
      uint64_t v94 = (uint64_t)(v7 + 200);
      int v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v67);
      long long v69 = &v68[16 * v64];
      v92.__r_.__value_.__r.__words[0] = (std::string::size_type)v68;
      v92.__r_.__value_.__l.__size_ = (std::string::size_type)v69;
      unint64_t v93 = &v68[16 * v70];
      *(_OWORD *)long long v69 = v90;
      v92.__r_.__value_.__r.__words[2] = (std::string::size_type)(v69 + 16);
      std::vector<std::shared_ptr<unsigned char []>>::__swap_out_circular_buffer((void *)v7 + 23, &v92);
      unint64_t v47 = (_OWORD *)*((void *)v7 + 24);
      std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)&v92);
      long long v84 = v7 + 24;
    }
    else
    {
      *uint64_t v46 = v90;
      unint64_t v47 = v46 + 1;
    }
    *((void *)v7 + 24) = v47;
    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v95.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v89.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_101;
    }
    long long v62 = (void *)v88.__r_.__value_.__r.__words[0];
  }
  operator delete(v62);
LABEL_101:
  uint64_t v71 = *(void *)a2;
  std::string v72 = *(void **)(*(void *)a2 + 200);
  unint64_t v73 = *(void *)(*(void *)a2 + 208);
  if ((unint64_t)v72 >= v73)
  {
    uint64_t v75 = *(void *)(v71 + 192);
    uint64_t v76 = ((uint64_t)v72 - v75) >> 4;
    unint64_t v77 = v76 + 1;
    if ((unint64_t)(v76 + 1) >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v78 = v73 - v75;
    if (v78 >> 3 > v77) {
      unint64_t v77 = v78 >> 3;
    }
    if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v79 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v79 = v77;
    }
    uint64_t v94 = *(void *)a2 + 208;
    long long v80 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v79);
    *(void *)&long long v81 = v84;
    *((void *)&v81 + 1) = v7;
    long long v82 = &v80[16 * v76];
    v92.__r_.__value_.__r.__words[0] = (std::string::size_type)v80;
    v92.__r_.__value_.__l.__size_ = (std::string::size_type)v82;
    unint64_t v93 = &v80[16 * v83];
    *(_OWORD *)long long v82 = v81;
    atomic_fetch_add_explicit(v85, 1uLL, memory_order_relaxed);
    v92.__r_.__value_.__r.__words[2] = (std::string::size_type)(v82 + 16);
    std::vector<std::shared_ptr<unsigned char []>>::__swap_out_circular_buffer((void *)(v71 + 192), &v92);
    uint64_t v74 = *(void **)(v71 + 200);
    std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)&v92);
  }
  else
  {
    void *v72 = v84;
    v72[1] = v7;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v7 + 1, 1uLL, memory_order_relaxed);
    uint64_t v74 = v72 + 2;
    *(void *)(v71 + 20std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v72 + 2;
  }
  *(void *)(v71 + 20std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v74;
  *a1 = v84;
  a1[1] = v7;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v7 + 1, 1uLL, memory_order_relaxed);
LABEL_111:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v7);
}

void sub_18FF8C320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a28);
  }
  if (*(char *)(v42 - 105) < 0) {
    operator delete(*(void **)(v42 - 128));
  }
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a19 < 0) {
    operator delete(a14);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<CA::ADMStreamFormat>::__on_zero_shared(uint64_t a1)
{
  unint64_t v5 = (void **)(a1 + 184);
  std::vector<std::shared_ptr<AudioMetadataTimeline::Node<AudioMetadataStreamFormat,AudioMetadataTimeline::Node<AudioMetadataTrackFormat,AudioMetadataTimeline::Node<AudioMetadataTrackUID,AudioMetadataTimeline::Node<AudioMetadataObject,AudioMetadataTimeline::Node<AudioMetadataContent,AudioMetadataTimeline::Node<AudioMetadataProgramme,AudioMetadataTimeline::Node<AudioMetadataFormatExtended,decltype(nullptr)>>>>>>>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  long long v2 = *(std::__shared_weak_count **)(a1 + 176);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  long long v3 = *(std::__shared_weak_count **)(a1 + 160);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*(unsigned char *)(a1 + 144) && *(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  if (*(unsigned char *)(a1 + 112) && *(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(unsigned char *)(a1 + 80) && *(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(unsigned char *)(a1 + 48) && *(char *)(a1 + 47) < 0)
  {
    unint64_t v4 = *(void **)(a1 + 24);
    operator delete(v4);
  }
}

void std::__shared_ptr_emplace<CA::ADMStreamFormat>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2850;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

void std::__shared_ptr_emplace<CA::ADMStreamFormat>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2850;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CA::ADMTrackFormat>::__on_zero_shared(uint64_t a1)
{
  long long v2 = *(std::__shared_weak_count **)(a1 + 160);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  if (*(unsigned char *)(a1 + 144) && *(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  if (*(unsigned char *)(a1 + 112) && *(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(unsigned char *)(a1 + 80) && *(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(unsigned char *)(a1 + 48) && *(char *)(a1 + 47) < 0)
  {
    long long v3 = *(void **)(a1 + 24);
    operator delete(v3);
  }
}

void std::__shared_ptr_emplace<CA::ADMTrackFormat>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2818;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

void std::__shared_ptr_emplace<CA::ADMTrackFormat>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2818;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__split_buffer<std::weak_ptr<CA::ADMPackFormat>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 16;
    unint64_t v4 = *(std::__shared_weak_count **)(v2 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_weak(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 16;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

BOOL std::operator==[abi:ne180100]<std::string,std::string>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a2[24];
  if (a2[24])
  {
    uint64_t v3 = a1[23];
    if ((v3 & 0x80u) == 0) {
      uint64_t v4 = a1[23];
    }
    else {
      uint64_t v4 = *((void *)a1 + 1);
    }
    uint64_t v5 = a2[23];
    int v6 = (char)v5;
    if ((v5 & 0x80u) != 0) {
      uint64_t v5 = *((void *)a2 + 1);
    }
    if (v4 == v5)
    {
      if (v6 < 0) {
        a2 = *(unsigned __int8 **)a2;
      }
      if ((v3 & 0x80) != 0)
      {
        return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
      }
      else if (a1[23])
      {
        uint64_t v7 = v3 - 1;
        do
        {
          int v9 = *a1++;
          int v8 = v9;
          int v11 = *a2++;
          int v10 = v11;
          BOOL v13 = v7-- != 0;
          BOOL v14 = v8 == v10;
          uint64_t v2 = v8 == v10;
        }
        while (v14 && v13);
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t anonymous namespace'::object_reachable(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(*(void *)a2 + 168);
  uint64_t v3 = *(void **)(*(void *)a2 + 176);
  if (v2 == v3) {
    return 0;
  }
  uint64_t v5 = *a1;
  {
    v2 += 2;
    if (v2 == v3) {
      return 0;
    }
  }
  return 1;
}

void std::__shared_ptr_emplace<CA::ADMTrackUID>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 200);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 184);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*(unsigned char *)(a1 + 168))
  {
    if (*(unsigned char *)(a1 + 160) && *(char *)(a1 + 159) < 0) {
      operator delete(*(void **)(a1 + 136));
    }
    if (*(unsigned char *)(a1 + 128) && *(char *)(a1 + 127) < 0) {
      operator delete(*(void **)(a1 + 104));
    }
    if (*(unsigned char *)(a1 + 96) && *(char *)(a1 + 95) < 0) {
      operator delete(*(void **)(a1 + 72));
    }
  }
  if (*(unsigned char *)(a1 + 48) && *(char *)(a1 + 47) < 0)
  {
    uint64_t v5 = *(void **)(a1 + 24);
    operator delete(v5);
  }
}

void std::__shared_ptr_emplace<CA::ADMTrackUID>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA27A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

void std::__shared_ptr_emplace<CA::ADMTrackUID>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA27A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(*(void ***)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

uint64_t CA::ADMBuilder::Impl::parse_bound(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2 = *((unsigned __int8 *)a2 + 23);
  int v3 = (char)v2;
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *((void *)a2 + 1);
  }
  if (v2 == 3)
  {
    if (v3 >= 0) {
      uint64_t v4 = a2;
    }
    else {
      uint64_t v4 = *(unsigned __int16 **)a2;
    }
    if (*v4 == 26989 && *((unsigned char *)v4 + 2) == 110)
    {
      uint64_t v10 = 0;
      uint64_t v9 = 0x100000000;
      return v10 | v9;
    }
    int v6 = *v4;
    int v7 = *((unsigned __int8 *)v4 + 2);
    if (v6 == 24941 && v7 == 120)
    {
      uint64_t v9 = 0x100000000;
      uint64_t v10 = 1;
      return v10 | v9;
    }
  }
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  *(_DWORD *)(a1 + 632) = -66596;
  return v10 | v9;
}

uint64_t CA::ADMBuilder::Impl::parse_coordinate(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = a2[23];
  int v3 = (char)v2;
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *((void *)a2 + 1);
  }
  switch(v2)
  {
    case 1:
      if (v3 >= 0) {
        uint64_t v4 = a2;
      }
      else {
        uint64_t v4 = *(unsigned __int8 **)a2;
      }
      unsigned int v5 = *v4 - 88;
      if (v5 >= 3) {
        goto LABEL_31;
      }
      uint64_t v6 = v5 + 3;
      goto LABEL_18;
    case 7:
      if (v3 >= 0) {
        int v7 = (int *)a2;
      }
      else {
        int v7 = *(int **)a2;
      }
      int v8 = *v7;
      int v9 = *(int *)((char *)v7 + 3);
      if (v8 != 1835629153 || v9 != 1752462701) {
        goto LABEL_31;
      }
      uint64_t v6 = 0;
LABEL_18:
      uint64_t v11 = 0x100000000;
      break;
    case 8:
      if (v3 >= 0) {
        long long v12 = a2;
      }
      else {
        long long v12 = *(void **)a2;
      }
      if (*v12 != 0x65636E6174736964) {
        goto LABEL_31;
      }
      uint64_t v11 = 0x100000000;
      uint64_t v6 = 2;
      break;
    case 9:
      if (v3 >= 0) {
        BOOL v13 = a2;
      }
      else {
        BOOL v13 = *(unsigned __int8 **)a2;
      }
      uint64_t v14 = *(void *)v13;
      int v15 = v13[8];
      if (v14 != 0x6F69746176656C65 || v15 != 110) {
        goto LABEL_31;
      }
      uint64_t v11 = 0x100000000;
      uint64_t v6 = 1;
      break;
    default:
LABEL_31:
      uint64_t v11 = 0;
      uint64_t v6 = 0;
      *(_DWORD *)(a1 + 632) = -66593;
      break;
  }
  return v6 | v11;
}

uint64_t CA::ADMBuilder::Impl::parse_gain_unit(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *((unsigned __int8 *)a2 + 23);
  int v3 = (char)v2;
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = a2[1];
  }
  if (v2 == 6)
  {
    if (v3 >= 0) {
      uint64_t v6 = (int *)a2;
    }
    else {
      uint64_t v6 = (int *)*a2;
    }
    int v7 = *v6;
    int v8 = *((unsigned __int16 *)v6 + 2);
    if (v7 == 1701734764 && v8 == 29281)
    {
      int v5 = 0;
      goto LABEL_19;
    }
  }
  else if (v2 == 2)
  {
    uint64_t v4 = v3 >= 0 ? a2 : (uint64_t *)*a2;
    if (*(_WORD *)v4 == 16996)
    {
      int v5 = 1;
LABEL_19:
      int v10 = 1;
      return v5 | (v10 << 8);
    }
  }
  int v5 = 0;
  int v10 = 0;
  *(_DWORD *)(a1 + 632) = -66594;
  return v5 | (v10 << 8);
}

void CA::ADMBuilder::Impl::parse_interaction(CA::ADMBuilder::Impl *this, const unsigned __int8 **a2, const char **a3)
{
  *((unsigned char *)this + 8) = 0;
  *((unsigned char *)this + 16) = 0;
  *((unsigned char *)this + 2std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
  *((unsigned char *)this + 28) = 0;
  *((unsigned char *)this + 32) = 0;
  *((unsigned char *)this + 36) = 0;
  *((unsigned char *)this + 4std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
  *((unsigned char *)this + 44) = 0;
  *((unsigned char *)this + 48) = 0;
  *((unsigned char *)this + 52) = 0;
  *((unsigned char *)this + 56) = 0;
  *((unsigned char *)this + 6std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
  *((unsigned char *)this + 64) = 0;
  *((unsigned char *)this + 68) = 0;
  *((unsigned char *)this + 72) = 0;
  *((unsigned char *)this + 76) = 0;
  *((_WORD *)this + 4std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
  *(_DWORD *)this = 0;
  *((_WORD *)this + 2) = 0;
  if (a3)
  {
    int v3 = *a3;
    if (*a3)
    {
      for (uint64_t i = a3 + 2; ; i += 2)
      {
        int v7 = (char *)*(i - 1);
        if (!strcmp(v3, "onOffInteract")) {
          break;
        }
        if (!strcmp(v3, "gainInteract"))
        {
          std::string::basic_string[abi:ne180100]<0>(__p, v7);
          *((_WORD *)this + 1) = CA::ADMBuilder::Impl::parse_BOOL((uint64_t)a2, (unsigned __int8 *)__p);
LABEL_10:
          if (v10 < 0) {
            operator delete(__p[0]);
          }
          goto LABEL_12;
        }
        if (!strcmp(v3, "positionInteract"))
        {
          std::string::basic_string[abi:ne180100]<0>(__p, v7);
          *((_WORD *)this + 2) = CA::ADMBuilder::Impl::parse_BOOL((uint64_t)a2, (unsigned __int8 *)__p);
          goto LABEL_10;
        }
LABEL_12:
        int v8 = *i;
        int v3 = v8;
        if (!v8) {
          return;
        }
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v7);
      *(_WORD *)this = CA::ADMBuilder::Impl::parse_BOOL((uint64_t)a2, (unsigned __int8 *)__p);
      goto LABEL_10;
    }
  }
}

uint64_t CA::ADMBuilder::Impl::parse_interaction_subelement(uint64_t a1, uint64_t a2, uint64_t a3, char *__s1, const char **a5)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = strcmp(__s1, "gainInteractionRange");
  if (!v10)
  {
    if (!a5) {
      goto LABEL_62;
    }
    unint64_t v27 = *a5;
    if (!*a5) {
      goto LABEL_62;
    }
    uint64_t v59 = a2;
    int v28 = 0;
    LODWORD(v29) = 0;
    char v30 = 0;
    unint64_t v31 = a5 + 2;
    while (1)
    {
      unint64_t v32 = (char *)*(v31 - 1);
      if (!strcmp(v27, "bound"))
      {
        std::string::basic_string[abi:ne180100]<0>(__p, v32);
        uint64_t v10 = CA::ADMBuilder::Impl::parse_bound(a1, (unsigned __int16 *)__p);
        unint64_t v29 = v10;
        if (SBYTE3(v67) < 0) {
          operator delete(*(void **)__p);
        }
        int v28 = BYTE4(v29);
        if (!HIDWORD(v29))
        {
          uint64_t v35 = CA::ADMBuilder::Impl::log((CA::ADMBuilder::Impl *)v10);
          uint64_t v10 = os_log_type_enabled(v35, OS_LOG_TYPE_ERROR);
          if (v10)
          {
            std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&v62, v59, "");
            size_t v36 = (v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &v62
                : (std::string *)v62.__r_.__value_.__r.__words[0];
            *(_DWORD *)std::string __p = 136315650;
            *(void *)&__p[4] = "ADMBuilder.cpp";
            __int16 v64 = 1024;
            int v65 = 692;
            __int16 v66 = 2080;
            unint64_t v67 = v36;
            _os_log_impl(&dword_18FEC0000, v35, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown bound for gain interaction range of object '%s'", __p, 0x1Cu);
            if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v62.__r_.__value_.__l.__data_);
            }
          }
          *(_DWORD *)(a1 + 632) = -66596;
          goto LABEL_56;
        }
      }
      else
      {
        uint64_t v10 = strcmp(v27, "gainUnit");
        if (!v10)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, v32);
          uint64_t v10 = CA::ADMBuilder::Impl::parse_gain_unit(a1, (uint64_t *)__p);
          unsigned __int16 v33 = v10;
          if (SBYTE3(v67) < 0) {
            operator delete(*(void **)__p);
          }
          if (v33 <= 0xFFu)
          {
            uint64_t v37 = CA::ADMBuilder::Impl::log((CA::ADMBuilder::Impl *)v10);
            uint64_t v10 = os_log_type_enabled(v37, OS_LOG_TYPE_ERROR);
            if (v10)
            {
              std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&v62, v59, "");
              long long v38 = (v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                  ? &v62
                  : (std::string *)v62.__r_.__value_.__r.__words[0];
              *(_DWORD *)std::string __p = 136315650;
              *(void *)&__p[4] = "ADMBuilder.cpp";
              __int16 v64 = 1024;
              int v65 = 703;
              __int16 v66 = 2080;
              unint64_t v67 = v38;
              _os_log_impl(&dword_18FEC0000, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown unit for gain interaction range of object '%s'", __p, 0x1Cu);
              if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v62.__r_.__value_.__l.__data_);
              }
            }
LABEL_56:
            a2 = v59;
            if (v28)
            {
              if (v29 == 1)
              {
                if (!*(unsigned char *)(a3 + 28)) {
                  *(unsigned char *)(a3 + 28) = 1;
                }
                *(void *)(a3 + 2std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
                *(unsigned char *)(a3 + 24) = v30;
                *(void *)(a1 + 608) = a3 + 20;
                operator new();
              }
              if (!v29)
              {
                if (!*(unsigned char *)(a3 + 16)) {
                  *(unsigned char *)(a3 + 16) = 1;
                }
                *(void *)(a3 + 8) = 0;
                *(unsigned char *)(a3 + 12) = v30;
                *(void *)(a1 + 608) = a3 + 8;
                operator new();
              }
              return 1;
            }
LABEL_62:
            if (!*(_DWORD *)(a1 + 632))
            {
              uint64_t v39 = a2;
              size_t v40 = CA::ADMBuilder::Impl::log((CA::ADMBuilder::Impl *)v10);
              if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
              {
                std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&v62, v39, "");
                uint8x8_t v41 = (v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                    ? &v62
                    : (std::string *)v62.__r_.__value_.__r.__words[0];
                *(_DWORD *)std::string __p = 136315650;
                *(void *)&__p[4] = "ADMBuilder.cpp";
                __int16 v64 = 1024;
                int v65 = 730;
                __int16 v66 = 2080;
                unint64_t v67 = v41;
                _os_log_impl(&dword_18FEC0000, v40, OS_LOG_TYPE_ERROR, "%25s:%-5d Missing bound for gain interaction range of object '%s'", __p, 0x1Cu);
                if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v62.__r_.__value_.__l.__data_);
                }
              }
              *(_DWORD *)(a1 + 632) = -66595;
            }
            return 1;
          }
          char v30 = v33;
        }
      }
      uint64_t v34 = *v31;
      v31 += 2;
      unint64_t v27 = v34;
      if (!v34) {
        goto LABEL_56;
      }
    }
  }
  uint64_t v11 = (std::string *)strcmp(__s1, "positionInteractionRange");
  if (v11) {
    return 1;
  }
  uint64_t v57 = a3;
  memset(&v62, 0, sizeof(v62));
  memset(&v61, 0, sizeof(v61));
  if (!a5 || (long long v12 = *a5) == 0)
  {
LABEL_81:
    if (*(_DWORD *)(a1 + 632)) {
      goto LABEL_90;
    }
    uint64_t v45 = a2;
    uint64_t v46 = CA::ADMBuilder::Impl::log((CA::ADMBuilder::Impl *)v11);
    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
    {
      std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&v60, v45, "");
      unint64_t v47 = (v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v60
          : (std::string *)v60.__r_.__value_.__r.__words[0];
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = "ADMBuilder.cpp";
      __int16 v64 = 1024;
      int v65 = 767;
      __int16 v66 = 2080;
      unint64_t v67 = v47;
      _os_log_impl(&dword_18FEC0000, v46, OS_LOG_TYPE_ERROR, "%25s:%-5d Missing bound for position interaction range of object '%s'", __p, 0x1Cu);
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v60.__r_.__value_.__l.__data_);
      }
    }
    int v26 = -66595;
    goto LABEL_89;
  }
  uint64_t v58 = a2;
  int v13 = 0;
  LODWORD(v14) = 0;
  int v15 = 0;
  LODWORD(v16) = 0;
  unint64_t v17 = a5 + 2;
  while (1)
  {
    char v18 = (char *)*(v17 - 1);
    if (!strcmp(v12, "bound"))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, v18);
      unint64_t v20 = (CA::ADMBuilder::Impl *)CA::ADMBuilder::Impl::parse_bound(a1, (unsigned __int16 *)__p);
      uint64_t v14 = v20;
      if (SBYTE3(v67) < 0) {
        operator delete(*(void **)__p);
      }
      if (!((unint64_t)v14 >> 32))
      {
        unint64_t v43 = CA::ADMBuilder::Impl::log(v20);
        uint64_t v11 = (std::string *)os_log_type_enabled(v43, OS_LOG_TYPE_ERROR);
        if (v11)
        {
          std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&v60, v58, "");
          long long v44 = (v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &v60
              : (std::string *)v60.__r_.__value_.__r.__words[0];
          *(_DWORD *)std::string __p = 136315650;
          *(void *)&__p[4] = "ADMBuilder.cpp";
          __int16 v64 = 1024;
          int v65 = 746;
          __int16 v66 = 2080;
          unint64_t v67 = v44;
          _os_log_impl(&dword_18FEC0000, v43, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown bound for position interaction range of object '%s'", __p, 0x1Cu);
          if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v60.__r_.__value_.__l.__data_);
          }
        }
        *(_DWORD *)(a1 + 632) = -66596;
        a2 = v58;
        goto LABEL_81;
      }
      uint64_t v11 = std::string::__assign_external(&v62, v18);
      int v13 = BYTE4(v14);
      goto LABEL_16;
    }
    uint64_t v11 = (std::string *)strcmp(v12, "coordinate");
    if (!v11) {
      break;
    }
LABEL_16:
    uint64_t v21 = *v17;
    v17 += 2;
    long long v12 = v21;
    if (!v21) {
      goto LABEL_17;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v18);
  char v19 = (CA::ADMBuilder::Impl *)CA::ADMBuilder::Impl::parse_coordinate(a1, __p);
  uint8x8_t v16 = v19;
  if (SBYTE3(v67) < 0) {
    operator delete(*(void **)__p);
  }
  if ((unint64_t)v16 >> 32)
  {
    uint64_t v11 = std::string::__assign_external(&v61, v18);
    int v15 = BYTE4(v16);
    goto LABEL_16;
  }
  size_t v53 = CA::ADMBuilder::Impl::log(v19);
  uint64_t v11 = (std::string *)os_log_type_enabled(v53, OS_LOG_TYPE_ERROR);
  int v15 = BYTE4(v16);
  if (v11)
  {
    std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&v60, v58, "");
    uint64_t v54 = (v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v60
        : (std::string *)v60.__r_.__value_.__r.__words[0];
    *(_DWORD *)std::string __p = 136315650;
    *(void *)&__p[4] = "ADMBuilder.cpp";
    __int16 v64 = 1024;
    int v65 = 756;
    __int16 v66 = 2080;
    unint64_t v67 = v54;
    _os_log_impl(&dword_18FEC0000, v53, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown coordinate for position interaction range of object '%s'", __p, 0x1Cu);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v60.__r_.__value_.__l.__data_);
    }
  }
LABEL_17:
  a2 = v58;
  if (!v13) {
    goto LABEL_81;
  }
  if (!v15)
  {
    if (*(_DWORD *)(a1 + 632)) {
      goto LABEL_90;
    }
    size_t v48 = CA::ADMBuilder::Impl::log((CA::ADMBuilder::Impl *)v11);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&v60, v58, "");
      float v49 = (v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v60
          : (std::string *)v60.__r_.__value_.__r.__words[0];
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = "ADMBuilder.cpp";
      __int16 v64 = 1024;
      int v65 = 774;
      __int16 v66 = 2080;
      unint64_t v67 = v49;
      _os_log_impl(&dword_18FEC0000, v48, OS_LOG_TYPE_ERROR, "%25s:%-5d Missing coordinate for position interaction range of object '%s'", __p, 0x1Cu);
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v60.__r_.__value_.__l.__data_);
      }
    }
    int v26 = -66592;
LABEL_89:
    *(_DWORD *)(a1 + 632) = v26;
    goto LABEL_90;
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)__p, (const void **)&v62.__r_.__value_.__l.__data_, (const void **)&v61.__r_.__value_.__l.__data_);
  char v22 = (CA::ADMBuilder::Impl *)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(a1 + 800, __p, (uint64_t)__p);
  char v23 = (char)v22;
  if (SBYTE3(v67) < 0) {
    operator delete(*(void **)__p);
  }
  if ((v23 & 1) == 0)
  {
    float v24 = CA::ADMBuilder::Impl::log(v22);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&v60, v58, "");
      BOOL v25 = (v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v60
          : (std::string *)v60.__r_.__value_.__r.__words[0];
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = "ADMBuilder.cpp";
      __int16 v64 = 1024;
      int v65 = 866;
      __int16 v66 = 2080;
      unint64_t v67 = v25;
      _os_log_impl(&dword_18FEC0000, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d Multiple coordinates for position interaction range of object '%s'", __p, 0x1Cu);
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v60.__r_.__value_.__l.__data_);
      }
    }
    int v26 = -66589;
    goto LABEL_89;
  }
  unsigned int v50 = v16 - 3;
  if (*(unsigned char *)(v57 + 81))
  {
    if (*(unsigned char *)(v57 + 80) != v50 < 3)
    {
      unint64_t v51 = CA::ADMBuilder::Impl::log(v22);
      if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
      {
        std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&v60, v58, "");
        uint64_t v52 = (v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v60
            : (std::string *)v60.__r_.__value_.__r.__words[0];
        *(_DWORD *)std::string __p = 136315650;
        *(void *)&__p[4] = "ADMBuilder.cpp";
        __int16 v64 = 1024;
        int v65 = 788;
        __int16 v66 = 2080;
        unint64_t v67 = v52;
        _os_log_impl(&dword_18FEC0000, v51, OS_LOG_TYPE_ERROR, "%25s:%-5d Conflicting coordinate systems for position interaction range of object '%s'", __p, 0x1Cu);
        if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v60.__r_.__value_.__l.__data_);
        }
      }
      *(_DWORD *)(a1 + 632) = -66603;
    }
  }
  else
  {
    *(_WORD *)(v57 + 8std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = (v50 < 3) | 0x100;
  }
  if (v14 == 1)
  {
    switch((int)v16)
    {
      case 0:
      case 3:
        *(_DWORD *)(v57 + 56) = 0;
        uint64_t v56 = v57 + 56;
        goto LABEL_130;
      case 1:
      case 4:
        *(_DWORD *)(v57 + 64) = 0;
        uint64_t v56 = v57 + 64;
        goto LABEL_130;
      case 2:
      case 5:
        *(_DWORD *)(v57 + 72) = 0;
        uint64_t v56 = v57 + 72;
LABEL_130:
        *(unsigned char *)(v56 + 4) = 1;
        *(void *)(a1 + 608) = v56;
        break;
      default:
        break;
    }
    operator new();
  }
  if (!v14)
  {
    switch((int)v16)
    {
      case 0:
      case 3:
        *(_DWORD *)(v57 + 32) = 0;
        uint64_t v55 = v57 + 32;
        goto LABEL_126;
      case 1:
      case 4:
        *(_DWORD *)(v57 + 4std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
        uint64_t v55 = v57 + 40;
        goto LABEL_126;
      case 2:
      case 5:
        *(_DWORD *)(v57 + 48) = 0;
        uint64_t v55 = v57 + 48;
LABEL_126:
        *(unsigned char *)(v55 + 4) = 1;
        *(void *)(a1 + 608) = v55;
        break;
      default:
        break;
    }
    operator new();
  }
LABEL_90:
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v62.__r_.__value_.__l.__data_);
  }
  return 1;
}

void sub_18FF8D8CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(uint64_t a1, const void **a2, const void **a3)
{
  if (*((char *)a2 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  if (*((char *)a3 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v6 = (size_t)a3[1];
  }
  uint64_t result = std::string::basic_string[abi:ne180100](a1, v6 + v5);
  if (*(char *)(result + 23) >= 0) {
    int v8 = (char *)result;
  }
  else {
    int v8 = *(char **)result;
  }
  if (v5)
  {
    if (*((char *)a2 + 23) >= 0) {
      int v9 = a2;
    }
    else {
      int v9 = *a2;
    }
    uint64_t result = (uint64_t)memmove(v8, v9, v5);
  }
  uint64_t v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a3 + 23) >= 0) {
      uint64_t v11 = a3;
    }
    else {
      uint64_t v11 = *a3;
    }
    uint64_t result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    long long v12 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2)) {
            return 0;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  int v15 = operator new(0x28uLL);
  void *v15 = 0;
  v15[1] = v8;
  *((_OWORD *)v15 + 1) = *(_OWORD *)a3;
  v15[4] = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>>>::__rehash<true>(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v22 = *(void *)a1;
  char v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    void *v15 = *v23;
LABEL_38:
    *char v23 = v15;
    goto LABEL_39;
  }
  void *v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v22 + 8 * v3) = a1 + 16;
  if (*v15)
  {
    unint64_t v24 = *(void *)(*v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9) {
        v24 %= v9;
      }
    }
    else
    {
      v24 &= v9 - 1;
    }
    char v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return 1;
}

void sub_18FF8DC64(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

std::string *CA::ADMBuilder::Impl::label_from_attributes(std::string *this, const unsigned __int8 **a2)
{
  this->__r_.__value_.__s.__data_[0] = 0;
  this[1].__r_.__value_.__s.__data_[0] = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  this[2].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  if (a2)
  {
    uint64_t v2 = this;
    this = (std::string *)*a2;
    if (*a2)
    {
      unint64_t v3 = a2 + 2;
      do
      {
        if (!strcmp((const char *)this, "language")) {
          std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>(v2, (std::string::value_type *)*(v3 - 1));
        }
        uint64_t v4 = (uint64_t)*v3;
        v3 += 2;
        this = (std::string *)v4;
      }
      while (v4);
    }
  }
  return this;
}

void sub_18FF8DD4C(_Unwind_Exception *a1)
{
  CA::ADMLabel::~ADMLabel(v1);
  _Unwind_Resume(a1);
}

void CA::ADMLabel::~ADMLabel(void **this)
{
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((unsigned char *)this + 24))
  {
    if (*((char *)this + 23) < 0) {
      operator delete(*this);
    }
  }
}

void CA::ADMBuilder::Impl::loudness_metadata_from_attributes(CA::ADMBuilder::Impl *this, const unsigned __int8 **a2)
{
}

void sub_18FF8DEB4(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::default_delete<CA::ADMLoudnessMetadata>::operator()[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

BOOL Synchronously_ServicingMainRunLoop(uint64_t a1)
{
  Current = CFRunLoopGetCurrent();
  if (Current == CFRunLoopGetMain())
  {
    CFRunLoopSourceContext context = *(CFRunLoopSourceContext *)byte_1EDFA4220;
    {
      Synchronously_ServicingMainRunLoop::source = (uint64_t)CFRunLoopSourceCreate(0, 0, &context);
    }
    CFRunLoopAddSource(Current, (CFRunLoopSourceRef)Synchronously_ServicingMainRunLoop::source, @"com.apple.coreaudio.synchronously");
    uint64_t v7 = 0;
    unint64_t v8 = &v7;
    uint64_t v9 = 0x2000000000;
    char v10 = 0;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 0x40000000;
    v6[2] = __Synchronously_ServicingMainRunLoop_block_invoke;
    v6[3] = &unk_1E56805F0;
    void v6[4] = &v7;
    v6[5] = Current;
    (*(void (**)(uint64_t, void *))(a1 + 16))(a1, v6);
    if (!*((unsigned char *)v8 + 24))
    {
      CFStringRef v4 = (const __CFString *)*MEMORY[0x1E4F1D418];
      do
        CFRunLoopRunInMode(v4, 20.0, 1u);
      while (!*((unsigned char *)v8 + 24));
    }
    CFRunLoopRemoveSource(Current, (CFRunLoopSourceRef)Synchronously_ServicingMainRunLoop::source, @"com.apple.coreaudio.synchronously");
    uint64_t v5 = *((unsigned __int8 *)v8 + 24);
    _Block_object_dispose(&v7, 8);
    return v5;
  }
  else
  {
    return Synchronously(a1);
  }
}

void sub_18FF8E088(_Unwind_Exception *a1)
{
}

uint64_t BufferedSoundCheckAnalyzer::Finish(BufferedSoundCheckAnalyzer *this, CACFDictionary *a2)
{
  uint64_t v4 = *((void *)this + 22);
  uint64_t v5 = *(unsigned int *)(v4 + 48);
  if (v5)
  {
    bzero((void *)(*(void *)(v4 + 24) + v5), (*(_DWORD *)(v4 + 16) - v5));
    (*(void (**)(void, void, void))v4)(*(void *)(v4 + 8), *(void *)(v4 + 24), *(unsigned int *)(v4 + 16));
  }
  SoundCheckAnalyzer::Finish(this, a2);
  return 0;
}

void BufferedSoundCheckAnalyzer::~BufferedSoundCheckAnalyzer(BufferedSoundCheckAnalyzer *this)
{
  BufferedSoundCheckAnalyzer::~BufferedSoundCheckAnalyzer(this);
  JUMPOUT(0x192FC8940);
}

{
  OpaqueAudioConverter *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t vars8;

  *(void *)this = &unk_1EDF93FD0;
  uint64_t v2 = (OpaqueAudioConverter *)*((void *)this + 14);
  if (v2) {
    AudioConverterDispose(v2);
  }
  unint64_t v3 = *((void *)this + 22);
  *((void *)this + 22) = 0;
  if (v3) {
    std::default_delete<BlockBufferer>::operator()[abi:ne180100](v3);
  }
  uint64_t v4 = *((void *)this + 19);
  *((void *)this + 19) = 0;
  if (v4) {
    MEMORY[0x192FC8940](v4, 0x1080C404ACF7207);
  }
  uint64_t v5 = (void *)*((void *)this + 15);
  if (v5)
  {
    *((void *)this + 16) = v5;
    operator delete(v5);
  }
  SoundCheckAnalyzer::~SoundCheckAnalyzer(this);
}

void std::default_delete<BlockBufferer>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x192FC8940);
}

uint64_t BufferedSoundCheckAnalyzer::Start(int32x2_t *this, AudioStreamBasicDescription *a2, const AudioChannelLayout *a3, void *a4, int a5)
{
  LODWORD(v19.mSampleRate) = 0;
  if (CAStreamBasicDescription::IdentifyCommonPCMFormat(a2, (int *)&v19)
    && LODWORD(v19.mSampleRate) == 1
    && (a2->mFormatFlags & 0x20) == 0)
  {
    char v10 = this;
    unint64_t v11 = a2;
    goto LABEL_14;
  }
  UInt32 mChannelsPerFrame = a2->mChannelsPerFrame;
  v19.float mSampleRate = a2->mSampleRate;
  *(void *)&v19.uint64_t mFormatID = 0x96C70636DLL;
  v19.mBytesPerPacket = 4 * mChannelsPerFrame;
  v19.mFramesPerPacket = 1;
  v19.mBytesPerFrame = 4 * mChannelsPerFrame;
  v19.UInt32 mChannelsPerFrame = mChannelsPerFrame;
  *(void *)&v19.mBitsPerChannel = 32;
  uint64_t v13 = AudioConverterNewWithOptions(a2, &v19, 0, &this[14]);
  if (!v13)
  {
    if (!a5) {
      goto LABEL_8;
    }
    int32x2_t v14 = this[14];
    int v23 = a5;
    int v24 = 1684891491;
    uint64_t v22 = a4;
    v20[0] = &v24;
    v20[1] = &v23;
    v20[2] = &v22;
    v21[0] = (uint64_t (*)(uint64_t, uint64_t))caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterSetProperty::$_0>;
    v21[1] = (uint64_t (*)(uint64_t, uint64_t))v20;
    uint64_t v13 = with_resolved(v14.i32[0], v21);
    if (!v13)
    {
LABEL_8:
      if ((a2->mFormatFlags & 0x20) != 0) {
        size_t v15 = (16 * a2->mChannelsPerFrame) | 8;
      }
      else {
        size_t v15 = 24;
      }
      this[20].i32[0] = v15;
      float v16 = operator new(v15);
      int32x2_t v17 = this[19];
      this[19] = (int32x2_t)v16;
      if (v17) {
        MEMORY[0x192FC8940](*(void *)&v17, 0x1080C404ACF7207);
      }
      unint64_t v11 = &v19;
      char v10 = this;
LABEL_14:
      SoundCheckAnalyzer::Start(v10, v11, a3);
      operator new();
    }
  }
  return v13;
}

void sub_18FF8E4FC(_Unwind_Exception *a1)
{
  MEMORY[0x192FC8940](v1, 0x1090C4053D77133);
  _Unwind_Resume(a1);
}

uint64_t CAStreamBasicDescription::IdentifyCommonPCMFormat(_DWORD *a1, int *a2)
{
  if (a1[2] != 1819304813) {
    return 0;
  }
  if (a1[5] != 1) {
    return 0;
  }
  unsigned int v2 = a1[6];
  if (v2 != a1[4]) {
    return 0;
  }
  unsigned int v3 = a1[8];
  if (v2 < v3 >> 3) {
    return 0;
  }
  unsigned int v4 = a1[7];
  if (!v4) {
    return 0;
  }
  unsigned int v5 = a1[3];
  if ((v5 & 0x20) == 0)
  {
    BOOL v9 = v2 == v2 / v4 * v4;
    v2 /= v4;
    if (!v9) {
      return 0;
    }
  }
  int v6 = 0;
  if ((v5 & 2) == 0 && 8 * v2 == v3)
  {
    if (v5)
    {
      if ((v5 & 0x1F84) != 0) {
        return 0;
      }
      if (v2 == 4) {
        int v6 = 1;
      }
      else {
        int v6 = 4 * (v2 == 8);
      }
    }
    else if ((v5 & 4) != 0)
    {
      int v8 = (v5 >> 7) & 0x3F;
      if (v8 == 24 && v2 == 4)
      {
        int v6 = 3;
      }
      else if (v8 || v2 != 4)
      {
        BOOL v9 = v2 == 2 && v8 == 0;
        if (v9) {
          int v6 = 2;
        }
        else {
          int v6 = 0;
        }
      }
      else
      {
        int v6 = 5;
      }
    }
    else
    {
      int v6 = 0;
    }
  }
  *a2 = v6;
  return 1;
}

uint64_t BufferedSoundCheckAnalyzer::ReceiveBufferedBlock(BufferedSoundCheckAnalyzer *this, char *a2, const unsigned __int8 *a3)
{
  unsigned int v3 = *((_DWORD *)this + 10);
  unsigned int v4 = a3 / v3;
  if ((a3 / v3) & 0x7FFF) != 0 && (*((_DWORD *)this + 2)) {
    return 4294967246;
  }
  if (v3 <= a3)
  {
    int v7 = 0;
    do
    {
      if (v4 >= 0x8000) {
        signed int v8 = 0x8000;
      }
      else {
        signed int v8 = v4;
      }
      int v9 = *((_DWORD *)this + 2);
      if ((v9 & 2) != 0)
      {
        char v10 = (int *)*((void *)this + 7);
        if (v10)
        {
          loudnessMeasurementGenerateBlocks(v10, v8, &a2[4 * v7]);
          int v9 = *((_DWORD *)this + 2);
        }
      }
      int v27 = v8;
      int v28 = v7;
      if ((v9 & 4) != 0 && a2)
      {
        unint64_t v11 = &a2[4 * v7];
        uint64_t v12 = *((void *)this + 8);
        uint64_t v13 = *((void *)this + 9);
        uint64_t v14 = v13 - v12;
        if (v13 - v12 == 128)
        {
          TruePeak::Process(*((TruePeak **)this + 8), v8, (const float *)&a2[4 * v7]);
        }
        else
        {
          uint64_t v15 = v14 >> 7;
          if ((unint64_t)(v14 >> 7) <= 1) {
            uint64_t v16 = 1;
          }
          else {
            uint64_t v16 = v14 >> 7;
          }
          do
          {
            uint64_t v17 = (*((void *)this + 12) - *((void *)this + 11)) >> 2;
            if (v8 >= (int)v17) {
              uint64_t v18 = v17;
            }
            else {
              uint64_t v18 = v8;
            }
            if (v13 != v12)
            {
              uint64_t v19 = 0;
              do
              {
                unint64_t v20 = (const float *)*((void *)this + 11);
                size_t v21 = (float *)v20;
                uint64_t v22 = v18;
                int v23 = v19;
                if ((int)v18 >= 1)
                {
                  do
                  {
                    *v21++ = *(float *)&v11[4 * v23];
                    v23 += v15;
                    --v22;
                  }
                  while (v22);
                }
                TruePeak::Process((TruePeak *)(*((void *)this + 8) + (v19++ << 7)), v18, v20);
              }
              while (v19 != v16);
            }
            v11 += 4 * v15 * (int)v18;
            BOOL v24 = __OFSUB__(v8, v18);
            v8 -= v18;
          }
          while (!((v8 < 0) ^ v24 | (v8 == 0)));
        }
      }
      int v7 = v28 + v27;
      v4 -= v27;
    }
    while (v4);
  }
  return 0;
}

uint64_t BufferedSoundCheckAnalyzer::ProcessBuffer(BufferedSoundCheckAnalyzer *this, int a2, const AudioBufferList *__src, AudioStreamPacketDescription *a4)
{
  if (*((void *)this + 14))
  {
    uint64_t v9 = *((void *)this + 15);
    uint64_t v10 = *((void *)this + 16);
    signed int v8 = (std::vector<char> *)((char *)this + 120);
    if (v9 == v10)
    {
      std::vector<char>::size_type v11 = (*((_DWORD *)this + 10) << 15);
      if (v11) {
        std::vector<unsigned char>::__append(v8, v11);
      }
    }
    *((_DWORD *)this + 36) = a2;
    memcpy(*((void **)this + 19), __src, *((unsigned int *)this + 40));
    *((void *)this + 21) = a4;
    while (1)
    {
      UInt32 ioOutputDataPacketSize = 0x8000;
      int v12 = *((_DWORD *)this + 10);
      UInt32 v13 = *((_DWORD *)this + 11);
      v20.mNumberBuffers = 1;
      uint64_t v14 = (OpaqueAudioConverter *)*((void *)this + 14);
      v20.mBuffers[0].mData = (void *)*((void *)this + 15);
      v20.mBuffers[0].mNumberChannels = v13;
      v20.mBuffers[0].mDataByteSize = v12 << 15;
      uint64_t v15 = AudioConverterFillComplexBuffer(v14, (AudioConverterComplexInputDataProc)BufferedSoundCheckAnalyzer::ACInputProc, this, &ioOutputDataPacketSize, &v20, 0);
      if (ioOutputDataPacketSize)
      {
        if (BlockBufferer::AddInput(*((BlockBufferer **)this + 22), *((const unsigned __int8 **)this + 15), *((_DWORD *)this + 10) * ioOutputDataPacketSize))break; {
      }
        }
      if (v15)
      {
        if (v15 == 5) {
          return 0;
        }
        return v15;
      }
    }
    return v15;
  }
  else
  {
    mData = (const unsigned __int8 *)__src->mBuffers[0].mData;
    int v18 = *((_DWORD *)this + 10);
    uint64_t v19 = (BlockBufferer *)*((void *)this + 22);
    return BlockBufferer::AddInput(v19, mData, v18 * a2);
  }
}

uint64_t BlockBufferer::AddInput(BlockBufferer *this, const unsigned __int8 *__src, unsigned int a3)
{
  unsigned int v3 = a3;
  unsigned int v4 = __src;
  uint64_t v6 = *((unsigned int *)this + 12);
  if (v6)
  {
    unsigned int v7 = *((_DWORD *)this + 4) - v6;
    if (v7 >= a3) {
      size_t v8 = a3;
    }
    else {
      size_t v8 = v7;
    }
    memcpy((void *)(*((void *)this + 3) + v6), __src, v8);
    unsigned int v9 = *((_DWORD *)this + 12) + v8;
    *((_DWORD *)this + 12) = v9;
    if (v9 < *((_DWORD *)this + 4)) {
      return 0;
    }
    uint64_t result = (*(uint64_t (**)(void, void))this)(*((void *)this + 1), *((void *)this + 3));
    if (result) {
      return result;
    }
    v3 -= v8;
    v4 += v8;
  }
  unsigned int v11 = *((_DWORD *)this + 4);
  size_t v12 = v3 % v11;
  if (v11 <= v3)
  {
    uint64_t v13 = v3 - v12;
    uint64_t result = (*(uint64_t (**)(void, const unsigned __int8 *, uint64_t))this)(*((void *)this + 1), v4, v13);
    if (result) {
      return result;
    }
  }
  else
  {
    LODWORD(v13) = 0;
  }
  if (v12) {
    memcpy(*((void **)this + 3), &v4[v13], v12);
  }
  uint64_t result = 0;
  *((_DWORD *)this + 12) = v12;
  return result;
}

uint64_t BufferedSoundCheckAnalyzer::ACInputProc(BufferedSoundCheckAnalyzer *this, OpaqueAudioConverter *a2, unsigned int *__dst, AudioBufferList *a4, AudioStreamPacketDescription **a5, void *a6)
{
  int v6 = *((_DWORD *)a5 + 36);
  if (!v6) {
    return 5;
  }
  *(_DWORD *)a2 = v6;
  memcpy(__dst, a5[19], *((unsigned int *)a5 + 40));
  if (a4) {
    *(void *)&a4->mNumberBuffers = a5[21];
  }
  uint64_t result = 0;
  *((_DWORD *)a5 + 36) = 0;
  return result;
}

uint64_t ID3TagBase::Init(ID3TagBase *this)
{
  if (*((unsigned char *)this + 9) != 73 || *((unsigned char *)this + 10) != 68 || *((unsigned char *)this + 11) != 51) {
    return 0;
  }
  int v1 = ((*((unsigned char *)this + 15) & 0x7F) << 21) | ((*((unsigned char *)this + 16) & 0x7F) << 14) | ((*((unsigned char *)this + 17) & 0x7F) << 7) | *((unsigned char *)this + 18) & 0x7F;
  char v2 = *((unsigned char *)this + 14);
  if ((v2 & 0x10) != 0)
  {
    unsigned int v3 = v1 + 20;
    *((_DWORD *)this + 15) = 10;
  }
  else
  {
    unsigned int v3 = v1 + 10;
  }
  unsigned int v4 = *((unsigned __int8 *)this + 12);
  *((_DWORD *)this + 16) = v4;
  if (v2 < 0)
  {
    *((unsigned char *)this + 68) = (v4 & 0xFE) == 2;
    *((unsigned char *)this + 69) = v4 == 4;
  }
  int v5 = v4 >= 3 ? 10 : 6;
  *((_DWORD *)this + 13) = v3;
  *((_DWORD *)this + 14) = v5;
  if (v3 < v5 + 11) {
    return 0;
  }
  uint64_t v6 = 1;
  *((unsigned char *)this + 8) = 1;
  return v6;
}

void ID3TagBase::~ID3TagBase(ID3TagBase *this)
{
  *(void *)this = &unk_1EDF8C248;
  std::__list_imp<ID3FrameInfo>::clear((void *)this + 3);
  JUMPOUT(0x192FC8940);
}

{
  *(void *)this = &unk_1EDF8C248;
  std::__list_imp<ID3FrameInfo>::clear((void *)this + 3);
}

uint64_t ID3ParserHandle::ID3API_GetProperty(ID3ParserHandle *this, unsigned int a2, int *a3, int a4, unsigned int *a5, int *a6)
{
  uint64_t v6 = 1936292415;
  if (!a5) {
    return v6;
  }
  uint64_t v6 = 1886548031;
  if (a4 <= 1718185573)
  {
    if (a4 == 1717792372)
    {
      uint64_t v6 = 1936292415;
      if (*a5 < 4) {
        return v6;
      }
      *a5 = 0;
      uint64_t v40 = *((void *)this + 2);
      if (v40)
      {
        if (!*(unsigned char *)(v40 + 48))
        {
          do
          {
            uint64_t v41 = ID3ParserHandle::CallReadProcForMoreFrames(this);
            if (v41)
            {
              uint64_t v6 = v41;
              if (a6) {
                *a6 = 0;
              }
              *a5 = 0;
              return v6;
            }
            uint64_t v40 = *((void *)this + 2);
          }
          while (!*(unsigned char *)(v40 + 48));
          *a5 = 4;
        }
        if (a6)
        {
          uint64_t v6 = 0;
          *a6 = *(void *)(v40 + 40);
          return v6;
        }
      }
      else
      {
        CFTypeRef cf = 0;
        LODWORD(__src) = 0;
        if (a6)
        {
          uint64_t v6 = (*((uint64_t (**)(void, void, uint64_t, uint64_t, CFTypeRef *, unsigned __int8 **))this + 3))(*((void *)this + 4), 0, 125, 2, &cf, &__src);
          if (v6) {
            return v6;
          }
          if (*(unsigned char *)cf || !*((unsigned char *)cf + 1)) {
            int v42 = 6;
          }
          else {
            int v42 = 7;
          }
          *a6 = v42;
          (*((void (**)(void, uint64_t, uint64_t, uint64_t, CFTypeRef *, unsigned __int8 **))this + 3))(*((void *)this + 4), 1, 125, 2, &cf, &__src);
        }
      }
      return 0;
    }
    if (a4 != 1717854580) {
      return v6;
    }
    uint64_t v6 = 1936746047;
    if (a2 < 4) {
      return v6;
    }
    if (!a3) {
      return v6;
    }
    uint64_t v6 = 1936292415;
    if (*a5 < 8) {
      return v6;
    }
    unsigned int v55 = 0;
    __src = 0;
    uint64_t v13 = *((void *)this + 2);
    int v14 = *a3;
    if (!v13)
    {
      if (v14 == 97)
      {
        CFTypeRef cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        LOWORD(v53) = 257;
        CACFDictionary::AddString((CACFDictionary *)&cf, @"language", @"eng");
        CACFDictionary::AddString((CACFDictionary *)&cf, @"identifier", &stru_1EDFA53D0);
        CFStringRef v43 = ID3ParserHandle::CopyV1String(this, *a3);
        if (v43)
        {
          CACFDictionary::AddString((CACFDictionary *)&cf, @"text", v43);
          CFRelease(v43);
          if (cf)
          {
            CFRetain(cf);
            CFTypeRef v44 = cf;
          }
          else
          {
            CFTypeRef v44 = 0;
          }
          uint64_t v6 = 0;
          *(void *)a6 = v44;
        }
        else
        {
          uint64_t v6 = 2003334207;
        }
        CACFDictionary::~CACFDictionary((CACFDictionary *)&cf);
      }
      else
      {
        CFStringRef v48 = ID3ParserHandle::CopyV1String(this, *a3);
        if (v48)
        {
          uint64_t v6 = 0;
          *(void *)a6 = v48;
        }
        else
        {
          return 2003334207;
        }
      }
      return v6;
    }
    uint64_t v15 = v13 + 24;
    uint64_t v16 = v15;
    while (1)
    {
      uint64_t v16 = *(void *)(v16 + 8);
      if (v16 == v15) {
        break;
      }
      if (*(_DWORD *)(v16 + 24) == v14)
      {
        uint64_t v17 = *(unsigned int *)(v16 + 20);
        uint64_t v6 = (*((uint64_t (**)(void, void))this + 3))(*((void *)this + 4), 0);
        if (!v6)
        {
          CFTypeRef cf = 0;
          ID3TagBase::CopyFrameData(*((ID3TagBase **)this + 2), (char *)__src, v55, *a3, &cf);
          if (cf)
          {
            uint64_t v6 = 0;
            *(void *)a6 = cf;
            *a5 = 8;
          }
          else
          {
            uint64_t v6 = 2003334207;
          }
          (*((void (**)(void, uint64_t, void, uint64_t, unsigned __int8 **, unsigned int *))this + 3))(*((void *)this + 4), 1, *a3, v17, &__src, &v55);
        }
        return v6;
      }
    }
    return 1852794431;
  }
  if (a4 != 1718185574)
  {
    if (a4 == 1953916274)
    {
      uint64_t v6 = 1936292415;
      if (*a5 < 4) {
        return v6;
      }
      *a5 = 4;
      if (a6)
      {
        uint64_t v39 = *((void *)this + 2);
        if (v39) {
          int v12 = *(_DWORD *)(v39 + 64);
        }
        else {
          int v12 = 1;
        }
        goto LABEL_232;
      }
    }
    else
    {
      if (a4 != 1953720698) {
        return v6;
      }
      uint64_t v6 = 1936292415;
      if (*a5 < 4) {
        return v6;
      }
      *a5 = 4;
      if (a6)
      {
        uint64_t v11 = *((void *)this + 2);
        if (v11) {
          int v12 = *(_DWORD *)(v11 + 52);
        }
        else {
          int v12 = 128;
        }
LABEL_232:
        uint64_t v6 = 0;
        *a6 = v12;
        return v6;
      }
    }
    return 0;
  }
  uint64_t v6 = 1936746047;
  if (a2 < 8) {
    return v6;
  }
  if (!a3) {
    return v6;
  }
  uint64_t v6 = 1936292415;
  if (*a5 < 0xC) {
    return v6;
  }
  uint64_t v18 = *((void *)this + 2);
  int v19 = *a3;
  if (v18)
  {
    if (v19
      && a3[1]
      && !ID3TagBase::MultipleFramesAllowed((ID3TagBase *)*(unsigned int *)(v18 + 64), v19))
    {
      return 1768321599;
    }
    uint64_t v6 = 1852794431;
    *a5 = 12;
    while (1)
    {
      uint64_t v20 = *((void *)this + 2);
      size_t v21 = (ID3TagBase *)*a3;
      uint64_t v22 = a3[1];
      uint64_t v23 = v20 + 24;
      int v24 = *(_DWORD *)(v20 + 40);
      if (v24) {
        BOOL v25 = v24 - 1 >= v22;
      }
      else {
        BOOL v25 = 0;
      }
      char v26 = !v25;
      if (v21)
      {
        if ((v26 & 1) == 0)
        {
          unsigned int v27 = *(_DWORD *)(v20 + 64);
          if (v21 >> 24) {
            BOOL v28 = 0;
          }
          else {
            BOOL v28 = v27 >= 3;
          }
          if (v28)
          {
            LODWORD(v21) = ID3TagBase::TranslateV2IDToV3(v21);
            goto LABEL_62;
          }
          if (v21 >> 24) {
            BOOL v29 = v27 == 2;
          }
          else {
            BOOL v29 = 0;
          }
          if (!v29) {
            goto LABEL_62;
          }
          if ((int)v21 > 1414219096)
          {
            if ((int)v21 <= 1414677322)
            {
              if ((int)v21 > 1414484568)
              {
                if ((int)v21 > 1414549330)
                {
                  if (v21 == 1414549331)
                  {
                    LODWORD(v21) = 5525569;
                  }
                  else if (v21 == 1414550850)
                  {
                    LODWORD(v21) = 5525570;
                  }
                }
                else
                {
                  switch((int)v21)
                  {
                    case 1414546737:
                      LODWORD(v21) = 5525553;
                      break;
                    case 1414546738:
                      LODWORD(v21) = 5525554;
                      break;
                    case 1414546739:
                      LODWORD(v21) = 5525555;
                      break;
                    case 1414546740:
                      LODWORD(v21) = 5525556;
                      break;
                    default:
                      if (v21 == 1414484569) {
                        LODWORD(v21) = 5525330;
                      }
                      break;
                  }
                }
              }
              else if ((int)v21 > 1414480203)
              {
                if ((int)v21 > 1414483032)
                {
                  if (v21 == 1414483033)
                  {
                    LODWORD(v21) = 5525324;
                  }
                  else if (v21 == 1414484037)
                  {
                    LODWORD(v21) = 5525313;
                  }
                }
                else if (v21 == 1414480204)
                {
                  LODWORD(v21) = 5525332;
                }
                else if (v21 == 1414481486)
                {
                  LODWORD(v21) = 5525318;
                }
              }
              else if ((int)v21 > 1414284621)
              {
                if (v21 == 1414284622)
                {
                  LODWORD(v21) = 5524549;
                }
                else if (v21 == 1414350148)
                {
                  LODWORD(v21) = 5524820;
                }
              }
              else if (v21 == 1414219097)
              {
                LODWORD(v21) = 5524293;
              }
              else if (v21 == 1414283598)
              {
                LODWORD(v21) = 5524545;
              }
              goto LABEL_62;
            }
            if ((int)v21 > 1431522387)
            {
              if ((int)v21 > 1464811857)
              {
                if ((int)v21 <= 1464882497)
                {
                  if (v21 == 1464811858)
                  {
                    LODWORD(v21) = 5718354;
                  }
                  else if (v21 == 1464811859)
                  {
                    LODWORD(v21) = 5718355;
                  }
                  goto LABEL_62;
                }
                if (v21 == 1464882498)
                {
                  LODWORD(v21) = 5722178;
                  goto LABEL_62;
                }
                if (v21 != 1465407576) {
                  goto LABEL_62;
                }
                unsigned __int16 v36 = 22616;
              }
              else
              {
                if ((int)v21 <= 1464029007)
                {
                  if (v21 == 1431522388)
                  {
                    LODWORD(v21) = 5590100;
                  }
                  else if (v21 == 1464029005)
                  {
                    LODWORD(v21) = 5718861;
                  }
                  goto LABEL_62;
                }
                if (v21 == 1464029008)
                {
                  LODWORD(v21) = 5718864;
                  goto LABEL_62;
                }
                if (v21 != 1464811846) {
                  goto LABEL_62;
                }
                unsigned __int16 v36 = 16710;
              }
              LODWORD(v21) = v36 | 0x570000;
              goto LABEL_62;
            }
            if ((int)v21 <= 1414746690)
            {
              switch(v21)
              {
                case 0x5452434B:
                  LODWORD(v21) = 5526091;
                  break;
                case 0x54524441:
                  LODWORD(v21) = 5526084;
                  break;
                case 0x5453495A:
                  LODWORD(v21) = 5526345;
                  break;
              }
              goto LABEL_62;
            }
            if ((int)v21 > 1415075927)
            {
              if (v21 == 1415075928)
              {
                LODWORD(v21) = 5527640;
              }
              else if (v21 == 1415136594)
              {
                LODWORD(v21) = 5527877;
              }
              goto LABEL_62;
            }
            if (v21 == 1414746691)
            {
              unsigned __int16 v38 = 21059;
              goto LABEL_200;
            }
            if (v21 != 1414746949) {
              goto LABEL_62;
            }
            int v34 = 5526083;
            int v35 = 272;
          }
          else
          {
            if ((int)v21 <= 1398361171)
            {
              if ((int)v21 <= 1279872586)
              {
                if ((int)v21 <= 1162958144)
                {
                  switch(v21)
                  {
                    case 0x41454E43:
                      LODWORD(v21) = 4411969;
                      break;
                    case 0x41504943:
                      LODWORD(v21) = 5261635;
                      break;
                    case 0x434F4D4D:
                      LODWORD(v21) = 4411213;
                      break;
                  }
                }
                else if ((int)v21 > 1195724609)
                {
                  if (v21 == 1195724610)
                  {
                    LODWORD(v21) = 4670799;
                  }
                  else if (v21 == 1229999187)
                  {
                    LODWORD(v21) = 4804684;
                  }
                }
                else if (v21 == 1162958145)
                {
                  LODWORD(v21) = 4542805;
                }
                else if (v21 == 1163150159)
                {
                  LODWORD(v21) = 4543555;
                }
              }
              else if ((int)v21 > 1347375180)
              {
                if ((int)v21 > 1381384515)
                {
                  if (v21 == 1381384516)
                  {
                    unsigned __int16 v37 = 22081;
                  }
                  else
                  {
                    if (v21 != 1381388866) {
                      goto LABEL_62;
                    }
                    unsigned __int16 v37 = 17750;
                  }
                  LODWORD(v21) = v37 | 0x520000;
                }
                else if (v21 == 1347375181)
                {
                  LODWORD(v21) = 5263184;
                }
                else if (v21 == 1380078918)
                {
                  LODWORD(v21) = 4347206;
                }
              }
              else if ((int)v21 > 1296845907)
              {
                if (v21 == 1296845908)
                {
                  LODWORD(v21) = 5065804;
                }
                else if (v21 == 1346588244)
                {
                  LODWORD(v21) = 4410964;
                }
              }
              else if (v21 == 1279872587)
              {
                LODWORD(v21) = 5000779;
              }
              else if (v21 == 1296254025)
              {
                LODWORD(v21) = 5063497;
              }
LABEL_62:
              uint64_t v30 = *(void *)(v20 + 32);
              if (v30 != v23)
              {
                int v32 = 0;
                do
                {
                  if (*(_DWORD *)(v30 + 16) == v21)
                  {
                    if (v32 == v22) {
                      goto LABEL_243;
                    }
                    ++v32;
                  }
                  uint64_t v30 = *(void *)(v30 + 8);
                }
                while (v30 != v23);
              }
              goto LABEL_68;
            }
            if ((int)v21 > 1413762136)
            {
              if ((int)v21 > 1414090052)
              {
                if ((int)v21 > 1414091825)
                {
                  if (v21 == 1414091826)
                  {
                    LODWORD(v21) = 5526578;
                  }
                  else if (v21 == 1414091827)
                  {
                    LODWORD(v21) = 5526579;
                  }
                  goto LABEL_62;
                }
                if (v21 != 1414090053)
                {
                  if (v21 == 1414091825) {
                    LODWORD(v21) = 5526577;
                  }
                  goto LABEL_62;
                }
                int v34 = 5521740;
                int v35 = 2049;
              }
              else
              {
                if ((int)v21 > 1413830739)
                {
                  if (v21 == 1413830740)
                  {
                    LODWORD(v21) = 5527636;
                  }
                  else if (v21 == 1413893204)
                  {
                    LODWORD(v21) = 5523028;
                  }
                  goto LABEL_62;
                }
                if (v21 == 1413762137)
                {
                  LODWORD(v21) = 5522521;
                  goto LABEL_62;
                }
                if (v21 != 1413828163) {
                  goto LABEL_62;
                }
                int v34 = 5521740;
                int v35 = 1026;
              }
            }
            else
            {
              if ((int)v21 <= 1413697356)
              {
                if ((int)v21 <= 1413565505)
                {
                  if (v21 == 1398361172)
                  {
                    LODWORD(v21) = 5459028;
                  }
                  else if (v21 == 1398363203)
                  {
                    LODWORD(v21) = 5461059;
                  }
                  goto LABEL_62;
                }
                if (v21 != 1413565506)
                {
                  if (v21 == 1413632077) {
                    LODWORD(v21) = 5522000;
                  }
                  goto LABEL_62;
                }
                unsigned __int16 v38 = 16716;
LABEL_200:
                LODWORD(v21) = v38 | 0x540000;
                goto LABEL_62;
              }
              if ((int)v21 > 1413697359)
              {
                if (v21 == 1413697360)
                {
                  LODWORD(v21) = 5522258;
                }
                else if (v21 == 1413759316)
                {
                  LODWORD(v21) = 5522497;
                }
                goto LABEL_62;
              }
              if (v21 == 1413697357)
              {
                int v34 = 5521740;
                int v35 = 513;
              }
              else
              {
                if (v21 != 1413697358) {
                  goto LABEL_62;
                }
                int v34 = 5521740;
                int v35 = 515;
              }
            }
          }
          LODWORD(v21) = v34 | v35;
          goto LABEL_62;
        }
      }
      else if ((v26 & 1) == 0)
      {
        uint64_t v30 = *(void *)(v20 + 32);
        if (v22)
        {
          unint64_t v31 = v22 + 1;
          do
          {
            uint64_t v30 = *(void *)(v30 + 8);
            --v31;
          }
          while (v31 > 1);
        }
        if (v30 != v23)
        {
LABEL_243:
          CFTypeRef cf = *(CFTypeRef *)(v30 + 16);
          int v53 = *(_DWORD *)(v30 + 24);
          uint64_t v6 = 0;
          if (a6)
          {
            *(void *)a6 = cf;
            int v47 = v53;
            goto LABEL_262;
          }
          return v6;
        }
      }
LABEL_68:
      if (*(unsigned char *)(v20 + 48)) {
        return v6;
      }
      uint64_t v33 = ID3ParserHandle::CallReadProcForMoreFrames(this);
      if (v33) {
        return v33;
      }
    }
  }
  if (!v19)
  {
    if (!a6) {
      return 0;
    }
    uint64_t v49 = a3[1];
    if (v49 <= 6)
    {
      uint64_t v6 = 0;
      int v50 = dword_1901C6EA8[v49];
      int v51 = dword_1901C6EC4[v49];
      int v47 = dword_1901C6EE0[v49];
      *a6 = v50;
      a6[1] = v51;
LABEL_262:
      a6[2] = v47;
      return v6;
    }
    return 1852794431;
  }
  if (a3[1]) {
    return 1852794431;
  }
  if (!a6) {
    return 0;
  }
  int v45 = *a3;
  return ID3ParserHandle::GetV1FrameInfoByID(v45, (uint64_t)a6);
}

void sub_18FF8FA7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ID3ParserHandle::CallReadProcForMoreFrames(ID3ParserHandle *this)
{
  uint64_t v1 = 0;
  unsigned int v49 = 0;
  uint64_t v2 = *((void *)this + 2);
  if (*(unsigned char *)(v2 + 48)) {
    return v1;
  }
  int v5 = *(_DWORD *)(v2 + 40);
  if (v5)
  {
    uint64_t v6 = *(void *)(v2 + 32);
    uint64_t v7 = (v5 - 1);
    if (v7)
    {
      unint64_t v8 = v7 + 1;
      do
      {
        uint64_t v6 = *(void *)(v6 + 8);
        --v8;
      }
      while (v8 > 1);
    }
    if (v6 == v2 + 24) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = v6 + 16;
    }
    uint64_t v10 = (*(_DWORD *)(v9 + 4) + *(_DWORD *)(v9 + 8));
    if (v10 >= *(_DWORD *)(v2 + 52))
    {
      uint64_t v1 = 0;
      *(unsigned char *)(v2 + 48) = 1;
      return v1;
    }
  }
  else
  {
    uint64_t v10 = 10;
  }
  uint64_t v1 = 0;
  if ((int)v10 < 1) {
    return v1;
  }
  __src = 0;
  if (*(unsigned char *)(v2 + 68))
  {
    std::string __dst = 0;
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    uint64_t v12 = v2 + 52;
    int v11 = *(_DWORD *)(v2 + 52);
    v43[0] = *(_DWORD *)(v12 + 4);
    unsigned int v13 = v11 - v10;
    if (v13 >= 2 * v43[0]) {
      uint64_t v14 = 2 * v43[0];
    }
    else {
      uint64_t v14 = v13;
    }
    uint64_t v1 = (*((uint64_t (**)(void, void, uint64_t, uint64_t, void **, unsigned int *))this + 3))(*((void *)this + 4), 0, v10, v14, &__src, &v49);
    if (!v1)
    {
      if (v49 >= v14) {
        unint64_t v15 = v14;
      }
      else {
        unint64_t v15 = v49;
      }
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__dst, (char *)__src, (char *)__src + v15, v15);
    }
    (*((void (**)(void, uint64_t, uint64_t, uint64_t, void **, unsigned int *))this + 3))(*((void *)this + 4), 1, v10, v14, &__src, &v49);
    uint64_t v16 = (unsigned __int8 *)__dst;
    if (!v1)
    {
      BOOL v17 = ResynchroniseBytes((unsigned __int8 *)__dst, v46 - __dst, *(_DWORD *)(*((void *)this + 2) + 56), v43);
      uint64_t v18 = *((void *)this + 2);
      if (v17)
      {
        unsigned int FrameDataSize = ID3TagBase::GetFrameDataSize(*((ID3TagBase **)this + 2), v16, *(_DWORD *)(v18 + 56), 0);
        unsigned int v44 = FrameDataSize;
        unsigned int v20 = v43[0] + 2 * FrameDataSize;
        unsigned int v21 = *(_DWORD *)(v18 + 52) - v10;
        if (v21 >= v20) {
          uint64_t v22 = v20;
        }
        else {
          uint64_t v22 = v21;
        }
        uint64_t v1 = (*((uint64_t (**)(void, void, uint64_t, uint64_t, void **, unsigned int *))this + 3))(*((void *)this + 4), 0, v10, v22, &__src, &v49);
        if (!v1)
        {
          if (v49 >= v22) {
            unint64_t v23 = v22;
          }
          else {
            unint64_t v23 = v49;
          }
          std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__dst, (char *)__src, (char *)__src + v23, v23);
        }
        (*((void (**)(void, uint64_t, uint64_t, uint64_t, void **, unsigned int *))this + 3))(*((void *)this + 4), 1, v10, v22, &__src, &v49);
        uint64_t v16 = (unsigned __int8 *)__dst;
        if (!v1)
        {
          BOOL v24 = ResynchroniseBytes((unsigned __int8 *)__dst, v46 - __dst, *(_DWORD *)(*((void *)this + 2) + 56) + FrameDataSize, &v44);
          uint64_t v25 = *((void *)this + 2);
          if (v24)
          {
            unsigned int v26 = v44;
            ID3TagBase::SetFrameDataSize(v25, v16, *(_DWORD *)(v25 + 56), v44 - *(_DWORD *)(v25 + 56));
            ID3ParserHandle::ParseDataForFrames(*((void *)this + 2), v16, v26, v10, 0);
            uint64_t v1 = 0;
            if (!v16) {
              return v1;
            }
          }
          else
          {
            *(unsigned char *)(v25 + 48) = 1;
            if (!v16) {
              return v1;
            }
          }
          goto LABEL_47;
        }
      }
      else
      {
        uint64_t v1 = 0;
        *(unsigned char *)(v18 + 48) = 1;
      }
    }
    if (!v16) {
      return v1;
    }
LABEL_47:
    operator delete(v16);
    return v1;
  }
  uint64_t v27 = (*((uint64_t (**)(void, void, uint64_t, void, void **, unsigned int *))this + 3))(*((void *)this + 4), 0, v10, *(unsigned int *)(v2 + 56), &__src, &v49);
  if (v27)
  {
    uint64_t v1 = v27;
    (*((void (**)(void, uint64_t, uint64_t, void, void **, unsigned int *))this + 3))(*((void *)this + 4), 1, v10, *(unsigned int *)(*((void *)this + 2) + 56), &__src, &v49);
  }
  else
  {
    unsigned int v44 = 0;
    BOOL v28 = (ID3TagBase *)*((void *)this + 2);
    BOOL v29 = (unsigned __int8 *)__src;
    size_t v30 = v49;
    unsigned int v31 = ID3TagBase::GetFrameDataSize(v28, (unsigned __int8 *)__src, v49, &v44);
    if (*((_DWORD *)v28 + 16) == 4
      && v31 >= 0x80
      && v44 > v31
      && (unsigned int v33 = *((_DWORD *)v28 + 13),
          int v32 = *((_DWORD *)v28 + 14),
          uint64_t v34 = v31 + v10 + v32,
          v34 < v33)
      && v44 + v10 + v32 <= v33)
    {
      v44 += v32;
      std::string __dst = 0;
      CADeprecated::CAAutoFree<unsigned char>::allocBytes(&__dst, v30, 1);
      int v35 = (unsigned __int8 *)__dst;
      if (__dst)
      {
        memcpy(__dst, __src, v30);
        (*((void (**)(void, uint64_t, uint64_t, void, void **, unsigned int *))this + 3))(*((void *)this + 4), 1, v10, *(unsigned int *)(*((void *)this + 2) + 56), &__src, &v49);
        *(void *)CFStringRef v43 = 0;
        unsigned int v42 = 0;
        uint64_t v1 = (*((uint64_t (**)(void, void, uint64_t, void, unsigned int *, unsigned int *))this + 3))(*((void *)this + 4), 0, v34, *(unsigned int *)(*((void *)this + 2) + 56), v43, &v42);
        if (!v1)
        {
          uint64_t v36 = *((void *)this + 2);
          if (*(void *)v43 && v42 >= 4)
          {
            unsigned int v37 = bswap32(**(_DWORD **)v43);
            if (*(_DWORD *)(v36 + 64) == 2) {
              LODWORD(v1) = v37 >> 8;
            }
            else {
              LODWORD(v1) = v37;
            }
          }
          (*((void (**)(void, uint64_t, uint64_t, void, unsigned int *, unsigned int *))this + 3))(*((void *)this + 4), 1, v34, *(unsigned int *)(v36 + 56), v43, &v42);
          uint64_t v38 = *((void *)this + 2);
          if (ID3TagBase::IsValidFrameID((ID3TagBase *)*(unsigned int *)(v38 + 64), v1))
          {
            ID3ParserHandle::ParseDataForFrames(v38, v35, v30, v10, 0);
            uint64_t v1 = 0;
          }
          else
          {
            *(void *)CFStringRef v43 = 0;
            unsigned int v42 = 0;
            uint64_t v1 = (*((uint64_t (**)(void, void, void, void, unsigned int *, unsigned int *))this + 3))(*((void *)this + 4), 0, v44 + v10, *(unsigned int *)(v38 + 56), v43, &v42);
            if (!v1)
            {
              uint64_t v39 = *((void *)this + 2);
              if (*(void *)v43 && v42 >= 4)
              {
                unsigned int v40 = bswap32(**(_DWORD **)v43);
                if (*(_DWORD *)(v39 + 64) == 2) {
                  LODWORD(v1) = v40 >> 8;
                }
                else {
                  LODWORD(v1) = v40;
                }
              }
              (*((void (**)(void, uint64_t, uint64_t, void, unsigned int *, unsigned int *))this + 3))(*((void *)this + 4), 1, v34, *(unsigned int *)(v39 + 56), v43, &v42);
              uint64_t v41 = *((void *)this + 2);
              if (ID3TagBase::IsValidFrameID((ID3TagBase *)*(unsigned int *)(v41 + 64), v1))
              {
                ID3ParserHandle::ParseDataForFrames(v41, v35, v30, v10, 1);
                uint64_t v1 = 0;
              }
              else
              {
                uint64_t v1 = 2003334207;
              }
            }
          }
        }
        free(v35);
      }
      else
      {
        return 2003334207;
      }
    }
    else
    {
      ID3ParserHandle::ParseDataForFrames((uint64_t)v28, v29, v30, v10, 0);
      (*((void (**)(void, uint64_t, uint64_t, void, void **, unsigned int *))this + 3))(*((void *)this + 4), 1, v10, *(unsigned int *)(*((void *)this + 2) + 56), &__src, &v49);
      return 0;
    }
  }
  return v1;
}

void sub_18FF90010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  free(v12);
  _Unwind_Resume(a1);
}

uint64_t ID3TagBase::MultipleFramesAllowed(ID3TagBase *this, int a2)
{
  int v2 = (int)this;
  if (this == 2) {
    int v3 = 5527640;
  }
  else {
    int v3 = 1415075928;
  }
  int v4 = 5724248;
  if (this != 2) {
    int v4 = 1465407576;
  }
  uint64_t result = 1;
  if (v3 != a2 && v4 != a2)
  {
    if (v2 == 2)
    {
      uint64_t result = 0;
      if ((a2 & 0xFFFF0000) == 0x540000 || (a2 & 0xFFFF0000) == 0x570000) {
        return result;
      }
LABEL_14:
      uint64_t result = 0;
      if (a2 <= 1163150158)
      {
        if (a2 <= 5063496)
        {
          if (a2 <= 4542804)
          {
            if (a2 == 4347206) {
              return result;
            }
            int v6 = 4410964;
          }
          else
          {
            if (a2 == 4542805 || a2 == 4543555) {
              return result;
            }
            int v6 = 4804684;
          }
        }
        else if (a2 > 5396032)
        {
          if (a2 == 5396033 || a2 == 5461059) {
            return result;
          }
          int v6 = 1162958145;
        }
        else
        {
          if (a2 == 5063497 || a2 == 5065804) {
            return result;
          }
          int v6 = 5391702;
        }
      }
      else if (a2 > 1347375954)
      {
        if (a2 > 1381388865)
        {
          if (a2 == 1381388866 || a2 == 1398363203) {
            return result;
          }
          int v6 = 1431520594;
        }
        else
        {
          if (a2 == 1347375955 || a2 == 1380078918) {
            return result;
          }
          int v6 = 1381384516;
        }
      }
      else if (a2 > 1296845907)
      {
        if (a2 == 1296845908 || a2 == 1331121733) {
          return result;
        }
        int v6 = 1346588244;
      }
      else
      {
        if (a2 == 1163150159 || a2 == 1229999187) {
          return result;
        }
        int v6 = 1296254025;
      }
      if (a2 != v6) {
        return 1;
      }
      return result;
    }
    uint64_t result = 0;
    if ((a2 & 0xFF000000) != 0x54000000 && (a2 & 0xFF000000) != 0x57000000) {
      goto LABEL_14;
    }
  }
  return result;
}

uint64_t ID3ParserHandle::GetV1FrameInfoByID(int a1, uint64_t a2)
{
  uint64_t v3 = 0x1E54495432;
  int v4 = 3;
  uint64_t result = 1852794431;
  if (a1 > 1129270604)
  {
    if (a1 > 1414091825)
    {
      if (a1 <= 1414677322)
      {
        if (a1 == 1414091826)
        {
LABEL_29:
          uint64_t result = 0;
          *(void *)a2 = v3;
          *(_DWORD *)(a2 + 8) = v4;
          return result;
        }
        if (a1 != 1414546737) {
          return result;
        }
LABEL_11:
        uint64_t v3 = 0x1E54504531;
        int v4 = 33;
        goto LABEL_29;
      }
      if (a1 == 1414677323) {
        goto LABEL_28;
      }
      int v7 = 1415136594;
LABEL_24:
      if (a1 != v7) {
        return result;
      }
      uint64_t v3 = 0x454594552;
      int v4 = 93;
      goto LABEL_29;
    }
    if (a1 != 1129270605)
    {
      if (a1 != 1413565506)
      {
        int v6 = 1413697358;
        goto LABEL_18;
      }
LABEL_27:
      uint64_t v3 = 0x1E54414C42;
      int v4 = 63;
      goto LABEL_29;
    }
LABEL_26:
    uint64_t v3 = 0x1E434F4D4DLL;
    int v4 = 97;
    goto LABEL_29;
  }
  if (a1 <= 5525552)
  {
    if (a1 != 4411213)
    {
      if (a1 != 5521740)
      {
        int v6 = 5522255;
LABEL_18:
        if (a1 != v6) {
          return result;
        }
        uint64_t v3 = 0x154434F4ELL;
        int v4 = 127;
        goto LABEL_29;
      }
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  if (a1 > 5526577)
  {
    if (a1 == 5526578) {
      goto LABEL_29;
    }
    int v7 = 5527877;
    goto LABEL_24;
  }
  if (a1 == 5525553) {
    goto LABEL_11;
  }
  if (a1 == 5526091)
  {
LABEL_28:
    uint64_t v3 = 0x25452434BLL;
    int v4 = 125;
    goto LABEL_29;
  }
  return result;
}

uint64_t ID3TagBase::CopyFrameData(ID3TagBase *this, char *__src, unsigned int a3, int a4, const void **a5)
{
  if (a5)
  {
    *a5 = 0;
    unsigned int v7 = *((_DWORD *)this + 14);
    if (v7 < a3)
    {
      unint64_t v8 = __src;
      uint64_t v9 = (char *)this + 24;
      do
      {
        uint64_t v9 = (char *)*((void *)v9 + 1);
        if (v9 == (char *)this + 24) {
          return 0xFFFFFFFFLL;
        }
      }
      while (*((_DWORD *)v9 + 6) != a4);
      unint64_t v10 = *((unsigned int *)v9 + 5);
      if (v10 > a3) {
        return 0xFFFFFFFFLL;
      }
      unsigned int v12 = *((_DWORD *)v9 + 4);
      std::string __p = 0;
      std::string __dst = 0;
      uint64_t v44 = 0;
      int v13 = *((_DWORD *)this + 16);
      if (v13 == 4)
      {
        unsigned int v15 = __src[9];
        if ((v15 & 0xC) == 0 && (v15 & 3) != 1)
        {
          int v14 = (v15 >> 1) & 1;
          goto LABEL_13;
        }
      }
      else if (v13 != 3 || __src[9] < 0x40u)
      {
        int v14 = 0;
LABEL_13:
        if (!*((unsigned char *)this + 68) && ((*((unsigned char *)this + 69) == 0) & ~v14) != 0)
        {
          uint64_t result = 0;
          goto LABEL_35;
        }
        if (v13 == 4)
        {
          if (__src[9])
          {
            std::vector<unsigned char>::reserve((unint64_t *)&__p, v10 - 4);
            std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>((uint64_t)&__p, (char *)__p, v8, &v8[*((unsigned int *)this + 14)], *((unsigned int *)this + 14));
            std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>((uint64_t)&__p, (char *)__dst, &v8[*((unsigned int *)this + 14) + 4], &v8[*((unsigned int *)v9 + 5)], *((unsigned int *)v9 + 5) - (*((unsigned int *)this + 14) + 4));
LABEL_23:
            uint64_t result = (uint64_t)__p;
            uint64_t v16 = __dst - __p - v7;
            if (__dst - __p != v7)
            {
              BOOL v17 = (char *)__p + v7;
              uint64_t v18 = &v17[v16];
              int v19 = (unsigned __int8 *)v17;
              unsigned int v20 = (unsigned __int8 *)v17;
              unsigned int v21 = v17;
              do
              {
                int v22 = *v20++;
                *v21++ = v22;
                if (v22 == 255 && v20 < (unsigned __int8 *)v18)
                {
                  unsigned int v20 = v19 + 2;
                  int v24 = v19[1];
                  if (v24)
                  {
                    unsigned int v21 = v17 + 2;
                    v17[1] = v24;
                  }
                  else
                  {
                    LODWORD(v16) = v16 - 1;
                  }
                }
                BOOL v17 = v21;
                int v19 = v20;
              }
              while (v20 < (unsigned __int8 *)v18);
              uint64_t result = (uint64_t)__p;
            }
            LODWORD(v1std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v16 + v7;
            int v13 = *((_DWORD *)this + 16);
            unint64_t v8 = (char *)result;
LABEL_35:
            if (v13 == 2)
            {
              unsigned int v26 = v12 & 0xFFFF0000;
              if ((v12 & 0xFFFF0000) == 0x540000)
              {
                int v25 = 5527640;
LABEL_40:
                if (v25 != v12)
                {
                  TextFrameint String = ID3TagBase::CreateTextFrameString(this, (unsigned __int8 *)v8, v10);
                  goto LABEL_75;
                }
                if (v13 == 2) {
                  int v27 = 5724248;
                }
                else {
                  int v27 = 1465407576;
                }
                BOOL v28 = v27 == v12;
                BOOL v29 = v27 == v12;
                if (!v28 && v13 == 2)
                {
                  unsigned int v26 = v12 & 0xFFFF0000;
                  goto LABEL_71;
                }
LABEL_52:
                int32x4_t v30 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v13 == 2)), 0x1FuLL)), (int8x16_t)xmmword_1901C6020, (int8x16_t)xmmword_1901C6010);
                int32x4_t v31 = vdupq_n_s32(v12);
                if (v13 == 2) {
                  int v32 = 5590100;
                }
                else {
                  int v32 = 1431522388;
                }
                char v33 = vmaxv_u16((uint16x4_t)vmovn_s32(vceqq_s32(v30, v31)));
                if (v13 == 2) {
                  int v34 = 4670799;
                }
                else {
                  int v34 = 1195724610;
                }
                if ((v33 & 1) != 0 || v32 == v12 || v34 == v12 || v12 == 1347570006)
                {
                  if (v13 == 2) {
                    int v36 = 4411213;
                  }
                  else {
                    int v36 = 1129270605;
                  }
                  if (v36 == v12 || v32 == v12)
                  {
                    TextFrameint String = ID3TagBase::CreateExtendedTextDictionary(this, (unsigned __int8 *)v8, v10);
                  }
                  else if (v12 == 1347570006)
                  {
                    TextFrameint String = ID3TagBase::CreatePRIVFrameDictionary(this, (unsigned __int8 *)v8, v10);
                  }
                  else
                  {
                    if (v13 == 2) {
                      int v40 = 5261635;
                    }
                    else {
                      int v40 = 1095780675;
                    }
                    if (v40 == v12)
                    {
                      TextFrameint String = ID3TagBase::CreatePictureFrameDictionary(this, (unsigned __int8 *)v8, v10);
                    }
                    else if (v29)
                    {
                      TextFrameint String = ID3TagBase::CreateWXXXFrameDictionary(this, (unsigned __int8 *)v8, v10);
                    }
                    else
                    {
                      if (v13 == 2) {
                        int v41 = 5527640;
                      }
                      else {
                        int v41 = 1415075928;
                      }
                      if (v41 == v12)
                      {
                        TextFrameint String = ID3TagBase::CreateTXXXFrameDictionary(this, (unsigned __int8 *)v8, v10);
                      }
                      else
                      {
                        if (v34 != v12)
                        {
LABEL_76:
                          if (result)
                          {
                            operator delete((void *)result);
                            return 0;
                          }
                          return result;
                        }
                        TextFrameint String = ID3TagBase::CreateGEOBFrameDictionary(this, (unsigned __int8 *)v8, v10);
                      }
                    }
                  }
                }
                else
                {
                  TextFrameint String = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)&v8[*((unsigned int *)this + 14)], (v10 - *((_DWORD *)this + 14)));
                }
LABEL_75:
                *a5 = TextFrameString;
                uint64_t result = (uint64_t)__p;
                goto LABEL_76;
              }
              if (v12 != 5724248)
              {
LABEL_71:
                if (v26 == 5701632) {
                  goto LABEL_72;
                }
LABEL_49:
                BOOL v29 = 0;
                goto LABEL_52;
              }
            }
            else
            {
              if ((v12 & 0xFF000000) == 0x54000000)
              {
                int v25 = 1415075928;
                goto LABEL_40;
              }
              if (v12 != 1465407576)
              {
                if ((v12 & 0xFF000000) == 0x57000000)
                {
LABEL_72:
                  uint64_t v37 = *((unsigned int *)this + 14);
                  uint64_t v38 = (const UInt8 *)&v8[v37];
                  size_t v39 = strnlen(&v8[v37], (v10 - v37));
                  TextFrameint String = CFURLCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v38, v39, 0x201u, 0);
                  goto LABEL_75;
                }
                goto LABEL_49;
              }
            }
            BOOL v29 = 1;
            goto LABEL_52;
          }
        }
        else
        {
          unsigned int v7 = 0;
        }
        std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, __src, &__src[v10], v10);
        goto LABEL_23;
      }
    }
  }
  return 0xFFFFFFFFLL;
}

void sub_18FF908F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

CFStringRef ID3ParserHandle::CopyV1String(ID3ParserHandle *this, int a2)
{
  CFStringRef v3 = 0;
  bytes = 0;
  int v16 = 0;
  if (a2 <= 92)
  {
    switch(a2)
    {
      case 3:
        if ((*((unsigned int (**)(void, void, uint64_t, uint64_t, UInt8 **, int *))this + 3))(*((void *)this + 4), 0, 3, 30, &bytes, &v16))
        {
          return 0;
        }
        if (!*bytes) {
          goto LABEL_52;
        }
        uint64_t v11 = 0;
        int v12 = 0;
        do
        {
          if (bytes[v11] == 32)
          {
            ++v12;
          }
          else
          {
            if (!bytes[v11]) {
              break;
            }
            int v12 = 0;
          }
          ++v11;
        }
        while (v11 != 30);
        if (v11 != v12) {
          CFStringRef v3 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], bytes, (v11 - v12), 0x201u, 0);
        }
        else {
LABEL_52:
        }
          CFStringRef v3 = 0;
        (*((void (**)(void, uint64_t, uint64_t, uint64_t, UInt8 **, int *))this + 3))(*((void *)this + 4), 1, 3, 30, &bytes, &v16);
        break;
      case 33:
        if ((*((unsigned int (**)(void, void, uint64_t, uint64_t, UInt8 **, int *))this + 3))(*((void *)this + 4), 0, 33, 30, &bytes, &v16))
        {
          return 0;
        }
        if (!*bytes) {
          goto LABEL_62;
        }
        uint64_t v13 = 0;
        int v14 = 0;
        do
        {
          if (bytes[v13] == 32)
          {
            ++v14;
          }
          else
          {
            if (!bytes[v13]) {
              break;
            }
            int v14 = 0;
          }
          ++v13;
        }
        while (v13 != 30);
        if (v13 != v14) {
          CFStringRef v3 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], bytes, (v13 - v14), 0x201u, 0);
        }
        else {
LABEL_62:
        }
          CFStringRef v3 = 0;
        (*((void (**)(void, uint64_t, uint64_t, uint64_t, UInt8 **, int *))this + 3))(*((void *)this + 4), 1, 33, 30, &bytes, &v16);
        break;
      case 63:
        if ((*((unsigned int (**)(void, void, uint64_t, uint64_t, UInt8 **, int *))this + 3))(*((void *)this + 4), 0, 63, 30, &bytes, &v16))
        {
          return 0;
        }
        if (!*bytes) {
          goto LABEL_27;
        }
        uint64_t v6 = 0;
        int v7 = 0;
        do
        {
          if (bytes[v6] == 32)
          {
            ++v7;
          }
          else
          {
            if (!bytes[v6]) {
              break;
            }
            int v7 = 0;
          }
          ++v6;
        }
        while (v6 != 30);
        if (v6 != v7) {
          CFStringRef v3 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], bytes, (v6 - v7), 0x201u, 0);
        }
        else {
LABEL_27:
        }
          CFStringRef v3 = 0;
        (*((void (**)(void, uint64_t, uint64_t, uint64_t, UInt8 **, int *))this + 3))(*((void *)this + 4), 1, 63, 30, &bytes, &v16);
        break;
      default:
        return v3;
    }
  }
  else
  {
    if (a2 > 124)
    {
      if (a2 == 125)
      {
        if (!(*((unsigned int (**)(void, void, uint64_t, uint64_t, UInt8 **, int *))this + 3))(*((void *)this + 4), 0, 125, 2, &bytes, &v16))
        {
          if (*bytes || !bytes[1]) {
            CFStringRef v3 = 0;
          }
          else {
            CFStringRef v3 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%d", bytes[1]);
          }
          (*((void (**)(void, uint64_t, uint64_t, uint64_t, UInt8 **, int *))this + 3))(*((void *)this + 4), 1, 125, 2, &bytes, &v16);
          return v3;
        }
      }
      else
      {
        if (a2 != 127) {
          return v3;
        }
        if (!(*((unsigned int (**)(void, void, uint64_t, uint64_t, UInt8 **, int *))this + 3))(*((void *)this + 4), 0, 127, 1, &bytes, &v16))
        {
          unint64_t v8 = *bytes;
          if (v8 > 0x93) {
            CFStringRef v3 = 0;
          }
          else {
            CFStringRef v3 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kGenreTable[v8], 0x201u);
          }
          (*((void (**)(void, uint64_t, uint64_t, uint64_t, UInt8 **, int *))this + 3))(*((void *)this + 4), 1, 127, 1, &bytes, &v16);
          return v3;
        }
      }
      return 0;
    }
    if (a2 != 93)
    {
      if (a2 != 97) {
        return v3;
      }
      if (!(*((unsigned int (**)(void, void, uint64_t, uint64_t, UInt8 **, int *))this + 3))(*((void *)this + 4), 0, 97, 30, &bytes, &v16))
      {
        if (!*bytes) {
          goto LABEL_14;
        }
        uint64_t v4 = 0;
        int v5 = 0;
        do
        {
          if (bytes[v4] == 32)
          {
            ++v5;
          }
          else
          {
            if (!bytes[v4]) {
              break;
            }
            int v5 = 0;
          }
          ++v4;
        }
        while (v4 != 30);
        if (v4 != v5) {
          CFStringRef v3 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], bytes, (v4 - v5), 0x201u, 0);
        }
        else {
LABEL_14:
        }
          CFStringRef v3 = 0;
        (*((void (**)(void, uint64_t, uint64_t, uint64_t, UInt8 **, int *))this + 3))(*((void *)this + 4), 1, 97, 30, &bytes, &v16);
        return v3;
      }
      return 0;
    }
    if ((*((unsigned int (**)(void, void, uint64_t, uint64_t, UInt8 **, int *))this + 3))(*((void *)this + 4), 0, 93, 4, &bytes, &v16))
    {
      return 0;
    }
    if (!*bytes) {
      goto LABEL_42;
    }
    uint64_t v9 = 0;
    int v10 = 0;
    do
    {
      if (bytes[v9] == 32)
      {
        ++v10;
      }
      else
      {
        if (!bytes[v9]) {
          break;
        }
        int v10 = 0;
      }
      ++v9;
    }
    while (v9 != 4);
    if (v9 != v10) {
      CFStringRef v3 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], bytes, (v9 - v10), 0x201u, 0);
    }
    else {
LABEL_42:
    }
      CFStringRef v3 = 0;
    (*((void (**)(void, uint64_t, uint64_t, uint64_t, UInt8 **, int *))this + 3))(*((void *)this + 4), 1, 93, 4, &bytes, &v16);
  }
  return v3;
}

void std::vector<unsigned char>::reserve(unint64_t *a1, size_t __sz)
{
  unint64_t v2 = *a1;
  if (a1[2] - *a1 < __sz)
  {
    if ((__sz & 0x8000000000000000) != 0) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    int v5 = (char *)a1[1];
    uint64_t v6 = operator new(__sz);
    int v7 = &v5[(void)v6 - v2];
    unint64_t v8 = v7;
    if (v5 != (char *)v2)
    {
      uint64_t v9 = &v5[~v2];
      do
      {
        char v10 = *--v5;
        (v9--)[(void)v6] = v10;
      }
      while (v5 != (char *)v2);
      unint64_t v8 = v6;
    }
    *a1 = (unint64_t)v8;
    a1[1] = (unint64_t)v7;
    a1[2] = (unint64_t)&v6[__sz];
    if (v2)
    {
      operator delete((void *)v2);
    }
  }
}

void std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(uint64_t a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  if (a5 < 1) {
    return;
  }
  char v10 = *(unsigned char **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    uint64_t v11 = *(char **)a1;
    uint64_t v12 = (uint64_t)&v10[a5 - *(void *)a1];
    if (v12 < 0) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = (char *)(__dst - v11);
    unint64_t v14 = v9 - (void)v11;
    if (2 * v14 > v12) {
      uint64_t v12 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v12;
    }
    if (v15) {
      int v16 = (char *)operator new(v15);
    }
    else {
      int v16 = 0;
    }
    unsigned int v26 = &v13[(void)v16];
    memcpy(&v13[(void)v16], __src, a5);
    if (v11 == __dst)
    {
      int v27 = &v13[(void)v16];
    }
    else
    {
      do
      {
        v13[(void)v16 - 1] = v13[(void)(v11 - 1)];
        --v13;
      }
      while (v13);
      char v10 = *(unsigned char **)(a1 + 8);
      int v27 = v16;
    }
    BOOL v28 = &v26[a5];
    BOOL v29 = &v16[v15];
    if (v10 != __dst) {
      memmove(v28, __dst, v10 - __dst);
    }
    int32x4_t v30 = *(char **)a1;
    *(void *)a1 = v27;
    *(void *)(a1 + 8) = &v28[v10 - __dst];
    *(void *)(a1 + 16) = v29;
    if (v30)
    {
      operator delete(v30);
    }
    return;
  }
  uint64_t v17 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    uint64_t v18 = &__src[a5];
    unsigned int v20 = *(unsigned char **)(a1 + 8);
LABEL_17:
    unsigned int v21 = &__dst[a5];
    int v22 = &v20[-a5];
    unint64_t v23 = v20;
    if (&v20[-a5] < v10)
    {
      int v24 = (char *)(&v10[a5] - v20);
      unint64_t v23 = v20;
      do
      {
        char v25 = *v22++;
        *v23++ = v25;
        --v24;
      }
      while (v24);
    }
    *(void *)(a1 + 8) = v23;
    if (v20 != v21) {
      memmove(&__dst[a5], __dst, v20 - v21);
    }
    if (v18 != __src)
    {
      memmove(__dst, __src, v18 - __src);
    }
    return;
  }
  uint64_t v18 = &__src[v17];
  int64_t v19 = a4 - &__src[v17];
  if (a4 != &__src[v17]) {
    memmove(*(void **)(a1 + 8), &__src[v17], a4 - &__src[v17]);
  }
  unsigned int v20 = &v10[v19];
  *(void *)(a1 + 8) = &v10[v19];
  if (v17 >= 1) {
    goto LABEL_17;
  }
}

CFStringRef ID3TagBase::CreateTextFrameString(ID3TagBase *this, unsigned __int8 *a2, unsigned int a3)
{
  if (!*((unsigned char *)this + 8)) {
    return 0;
  }
  uint64_t v5 = (*((_DWORD *)this + 14) + 1);
  uint64_t v6 = (unsigned __int8 *)(a3 - v5);
  if (a3 < v5) {
    return 0;
  }
  int EncodingFromFrame = ID3TagBase::GetEncodingFromFrame(this, a2, a3);
  uint64_t v9 = &a2[v5];
  unsigned int v10 = ID3TagBase::StringSizeInBytes((ID3TagBase *)v9, v6, EncodingFromFrame);
  if (v10) {
    BOOL v11 = a2 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11 || a3 < 4)
  {
    if (!a2) {
      return 0;
    }
LABEL_28:
    CFIndex v21 = v10;
    if ((EncodingFromFrame - 1) > 2u) {
      CFStringEncoding v22 = 513;
    }
    else {
      CFStringEncoding v22 = dword_1901C6E9C[(EncodingFromFrame - 1)];
    }
    if (v10 >= 2 && (EncodingFromFrame - 1) <= 1)
    {
      int v23 = *v9;
      if (v23 == 254)
      {
        if (v9[1] == 255)
        {
LABEL_36:
          Boolean v24 = 1;
LABEL_39:
          CFAllocatorRef v25 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          return CFStringCreateWithBytes(v25, &a2[v5], v21, v22, v24);
        }
      }
      else if (v23 == 255 && v9[1] == 254)
      {
        goto LABEL_36;
      }
    }
    Boolean v24 = 0;
    goto LABEL_39;
  }
  unsigned int v14 = bswap32(*(_DWORD *)a2);
  if (*((_DWORD *)this + 16) == 2)
  {
    v14 >>= 8;
    int v15 = 5522255;
  }
  else
  {
    int v15 = 1413697358;
  }
  if (v15 != v14 || *v9 != 40) {
    goto LABEL_28;
  }
  if (v10 < 2) {
    return 0;
  }
  int v16 = 0;
  uint64_t v17 = &a2[v5 + 1];
  int v18 = 1;
  do
  {
    int v20 = *v17++;
    int v19 = v20;
    if (v20 == 40)
    {
      ++v18;
    }
    else
    {
      if ((v19 - 48) > 9) {
        break;
      }
      ++v16;
    }
    --v10;
  }
  while (v10 > 1);
  if (!v16) {
    return 0;
  }
  return CreateCFStringFromV1GenreFrame(&a2[v5], v18, v16);
}

const __CFString *ID3TagBase::CreateExtendedTextDictionary(ID3TagBase *this, unsigned __int8 *a2, unsigned int a3)
{
  if (*((unsigned char *)this + 8))
  {
    int v4 = *((_DWORD *)this + 14);
    unsigned int v5 = v4 + 4;
    if (a3 >= v4 + 4)
    {
      int EncodingFromFrame = ID3TagBase::GetEncodingFromFrame(this, a2, a3);
      unsigned int v8 = EncodingFromFrame - 1;
      int v9 = (EncodingFromFrame - 1) >= 2 ? 1 : 2;
      int v10 = v9 + v5;
      if (v9 + v5 <= a3)
      {
        int v13 = EncodingFromFrame;
        uint64_t v14 = (v4 + 1);
        CFTypeRef cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        __int16 v30 = 257;
        CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFStringRef v16 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], &a2[v14], 3, 0x201u, 0);
        if (!v16) {
          goto LABEL_38;
        }
        CACFDictionary::AddString((CACFDictionary *)&cf, @"language", v16);
        CFRelease(v16);
        uint64_t v17 = (unsigned __int8 *)(a3 - v5);
        if (a3 <= v5) {
          goto LABEL_38;
        }
        int v18 = &a2[v5];
        CFIndex v19 = ID3TagBase::StringSizeInBytes((ID3TagBase *)v18, v17, v13);
        if (v8 > 2u) {
          CFStringEncoding v20 = 513;
        }
        else {
          CFStringEncoding v20 = dword_1901C6E9C[v8];
        }
        if (v19 >= 2 && v8 <= 1)
        {
          int v21 = *v18;
          if (v21 == 254)
          {
            if (v18[1] == 255)
            {
LABEL_19:
              Boolean v22 = 1;
LABEL_22:
              CFStringRef v23 = CFStringCreateWithBytes(v15, v18, v19, v20, v22);
              if (!v23) {
                goto LABEL_38;
              }
              CACFDictionary::AddString((CACFDictionary *)&cf, @"identifier", v23);
              CFRelease(v23);
              if (a3 <= v10 + (int)v19) {
                goto LABEL_38;
              }
              Boolean v24 = &a2[(v10 + v19)];
              CFIndex v25 = ID3TagBase::StringSizeInBytes((ID3TagBase *)v24, (unsigned __int8 *)(a3 - (v10 + v19)), v13);
              if (v8 > 2u) {
                CFStringEncoding v26 = 513;
              }
              else {
                CFStringEncoding v26 = dword_1901C6E9C[v8];
              }
              if (v25 >= 2 && v8 <= 1)
              {
                int v27 = *v24;
                if (v27 == 254)
                {
                  if (v24[1] == 255)
                  {
LABEL_32:
                    Boolean v28 = 1;
LABEL_35:
                    CFStringRef v11 = CFStringCreateWithBytes(v15, v24, v25, v26, v28);
                    if (!v11)
                    {
LABEL_39:
                      CACFDictionary::~CACFDictionary((CACFDictionary *)&cf);
                      return v11;
                    }
                    CACFDictionary::AddString((CACFDictionary *)&cf, @"text", v11);
                    CFRelease(v11);
                    if (cf)
                    {
                      CFRetain(cf);
                      CFStringRef v11 = (const __CFString *)cf;
                      goto LABEL_39;
                    }
LABEL_38:
                    CFStringRef v11 = 0;
                    goto LABEL_39;
                  }
                }
                else if (v27 == 255 && v24[1] == 254)
                {
                  goto LABEL_32;
                }
              }
              Boolean v28 = 0;
              goto LABEL_35;
            }
          }
          else if (v21 == 255 && v18[1] == 254)
          {
            goto LABEL_19;
          }
        }
        Boolean v22 = 0;
        goto LABEL_22;
      }
    }
  }
  return 0;
}

void sub_18FF91538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

CFTypeRef ID3TagBase::CreatePRIVFrameDictionary(ID3TagBase *this, unsigned __int8 *a2, unsigned int a3)
{
  if (!*((unsigned char *)this + 8)) {
    return 0;
  }
  CFTypeRef v4 = 0;
  if (a2 && a3 >= 4)
  {
    if (*((_DWORD *)this + 16) == 2 || *(_DWORD *)a2 != 1447645776) {
      return 0;
    }
    uint64_t v7 = *((unsigned int *)this + 14);
    if ((int)v7 + 1 > a3) {
      return 0;
    }
    int EncodingFromFrame = ID3TagBase::GetEncodingFromFrame(this, a2, a3);
    CFTypeRef cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    __int16 v20 = 257;
    unsigned int v10 = ID3TagBase::StringSizeInBytes((ID3TagBase *)&a2[v7], (unsigned __int8 *)(a3 - v7), EncodingFromFrame);
    CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    unsigned int v12 = v10;
    unsigned int v13 = EncodingFromFrame - 1;
    if (v13 > 2u) {
      CFStringEncoding v14 = 513;
    }
    else {
      CFStringEncoding v14 = dword_1901C6E9C[v13];
    }
    CFStringRef v15 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], &a2[v7], v10, v14, 0);
    if (v15)
    {
      if (v13 >= 2) {
        int v16 = 1;
      }
      else {
        int v16 = 2;
      }
      unsigned int v17 = v16 + v7 + v12;
      if (a3 > v17 && (CFDataRef v18 = CFDataCreate(v11, &a2[v17], a3 - v17)) != 0)
      {
        CACFDictionary::AddString((CACFDictionary *)&cf, @"identifier", v15);
        CFRelease(v15);
        CACFDictionary::AddData((CACFDictionary *)&cf, @"data", v18);
        CFRelease(v18);
        if (cf)
        {
          CFRetain(cf);
          CFTypeRef v4 = cf;
LABEL_25:
          CACFDictionary::~CACFDictionary((CACFDictionary *)&cf);
          return v4;
        }
      }
      else
      {
        CFRelease(v15);
      }
    }
    CFTypeRef v4 = 0;
    goto LABEL_25;
  }
  return v4;
}

void sub_18FF91710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

CFTypeRef ID3TagBase::CreatePictureFrameDictionary(ID3TagBase *this, unsigned __int8 *a2, unsigned int a3)
{
  if (!*((unsigned char *)this + 8)) {
    return 0;
  }
  CFTypeRef v4 = 0;
  if (a2 && a3 >= 4)
  {
    unsigned int v7 = bswap32(*(_DWORD *)a2);
    int v8 = *((_DWORD *)this + 16);
    if (v8 == 2)
    {
      v7 >>= 8;
      int v9 = 5261635;
    }
    else
    {
      int v9 = 1095780675;
    }
    if (v9 != v7) {
      return 0;
    }
    int v10 = *((_DWORD *)this + 14);
    unsigned int v11 = v8 == 2 ? v10 + 5 : v10 + 3;
    if (v11 > a3) {
      return 0;
    }
    int EncodingFromFrame = ID3TagBase::GetEncodingFromFrame(this, a2, a3);
    int v14 = v10 + 1;
    CFTypeRef cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    __int16 v39 = 257;
    int v15 = *((_DWORD *)this + 14);
    unsigned int v16 = EncodingFromFrame - 1;
    if (*((_DWORD *)this + 16) == 2)
    {
      if (v16 >= 2) {
        int v17 = 6;
      }
      else {
        int v17 = 7;
      }
      if (v17 + v15 > a3) {
        goto LABEL_62;
      }
      CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFStringRef v19 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], &a2[v14], 3, 0x201u, 0);
      LODWORD(v2std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
    }
    else
    {
      if (v16 >= 2) {
        int v21 = 4;
      }
      else {
        int v21 = 5;
      }
      if (v21 + v15 > a3) {
        goto LABEL_62;
      }
      Boolean v22 = &a2[v14];
      unsigned int v23 = a3 - v14;
      if (a3 == v14)
      {
        LODWORD(v2std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
      }
      else
      {
        uint64_t v24 = 0;
        if (v23 <= 1) {
          uint64_t v20 = 1;
        }
        else {
          uint64_t v20 = v23;
        }
        while (v22[v24])
        {
          if (v20 == ++v24) {
            goto LABEL_33;
          }
        }
        LODWORD(v2std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v24;
      }
LABEL_33:
      CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFStringRef v19 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v22, v20, 0x201u, 0);
    }
    if (!v19) {
      goto LABEL_62;
    }
    CACFDictionary::AddString((CACFDictionary *)&cf, @"MIME", v19);
    CFRelease(v19);
    unsigned int v25 = *((_DWORD *)this + 16) == 2 ? v10 + 4 : v10 + v20 + 2;
    if (v25 >= a3) {
      goto LABEL_62;
    }
    unsigned int v26 = a2[v25];
    if (v26 > 0x14) {
      unsigned int v26 = 0;
    }
    CFStringRef v27 = CFStringCreateWithCString(v18, kPictureTypeTable[v26], 0x201u);
    if (!v27) {
      goto LABEL_62;
    }
    CACFDictionary::AddString((CACFDictionary *)&cf, @"picturetype", v27);
    CFRelease(v27);
    unsigned int v28 = v25 + 1;
    if (a3 <= v28) {
      goto LABEL_62;
    }
    BOOL v29 = &a2[v28];
    CFIndex v30 = ID3TagBase::StringSizeInBytes((ID3TagBase *)v29, (unsigned __int8 *)(a3 - v28), EncodingFromFrame);
    if (v16 > 2u) {
      CFStringEncoding v31 = 513;
    }
    else {
      CFStringEncoding v31 = dword_1901C6E9C[v16];
    }
    if (v30 >= 2 && v16 <= 1)
    {
      int v32 = *v29;
      if (v32 == 254)
      {
        if (v29[1] == 255)
        {
LABEL_51:
          Boolean v33 = 1;
LABEL_54:
          CFStringRef v34 = CFStringCreateWithBytes(v18, &a2[v28], v30, v31, v33);
          if (v34)
          {
            CACFDictionary::AddString((CACFDictionary *)&cf, @"identifier", v34);
            CFRelease(v34);
            int v35 = v16 >= 2 ? 1 : 2;
            unsigned int v36 = v28 + v35 + v30;
            if (a3 > v36)
            {
              CFDataRef v37 = CFDataCreate(v18, &a2[v36], a3 - v36);
              if (v37)
              {
                CACFDictionary::AddData((CACFDictionary *)&cf, @"data", v37);
                CFRelease(v37);
                if (cf)
                {
                  CFRetain(cf);
                  CFTypeRef v4 = cf;
LABEL_63:
                  CACFDictionary::~CACFDictionary((CACFDictionary *)&cf);
                  return v4;
                }
              }
            }
          }
LABEL_62:
          CFTypeRef v4 = 0;
          goto LABEL_63;
        }
      }
      else if (v32 == 255 && v29[1] == 254)
      {
        goto LABEL_51;
      }
    }
    Boolean v33 = 0;
    goto LABEL_54;
  }
  return v4;
}

void sub_18FF91AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

CFTypeRef ID3TagBase::CreateWXXXFrameDictionary(ID3TagBase *this, unsigned __int8 *a2, unsigned int a3)
{
  if (!*((unsigned char *)this + 8)) {
    return 0;
  }
  CFTypeRef v4 = 0;
  if (a2 && a3 >= 4)
  {
    unsigned int v6 = bswap32(*(_DWORD *)a2);
    if (*((_DWORD *)this + 16) == 2)
    {
      v6 >>= 8;
      int v7 = 5724248;
    }
    else
    {
      int v7 = 1465407576;
    }
    if (v7 != v6) {
      return 0;
    }
    unsigned int v8 = *((_DWORD *)this + 14) + 1;
    int v9 = (unsigned __int8 *)(a3 - v8);
    if (a3 < v8) {
      return 0;
    }
    int EncodingFromFrame = ID3TagBase::GetEncodingFromFrame(this, a2, a3);
    unsigned int v11 = EncodingFromFrame - 1;
    int v12 = (EncodingFromFrame - 1) >= 2 ? 1 : 2;
    unsigned int v13 = v12 + v8;
    if (v12 + v8 > a3) {
      return 0;
    }
    int v15 = EncodingFromFrame;
    CFTypeRef cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    __int16 v28 = 257;
    unsigned int v16 = &a2[v8];
    unsigned int v17 = ID3TagBase::StringSizeInBytes((ID3TagBase *)v16, v9, v15);
    CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    unsigned int v19 = v17;
    if (v11 > 2u) {
      CFStringEncoding v20 = 513;
    }
    else {
      CFStringEncoding v20 = dword_1901C6E9C[v11];
    }
    if (v17 >= 2 && v11 <= 1)
    {
      int v21 = *v16;
      if (v21 == 254)
      {
        if (v16[1] == 255)
        {
LABEL_23:
          Boolean v22 = 1;
          goto LABEL_26;
        }
      }
      else if (v21 == 255 && v16[1] == 254)
      {
        goto LABEL_23;
      }
    }
    Boolean v22 = 0;
LABEL_26:
    CFStringRef v23 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v16, v17, v20, v22);
    if (v23
      && (CACFDictionary::AddString((CACFDictionary *)&cf, @"identifier", v23), CFRelease(v23), a3 > v13 + v19)
      && (uint64_t v24 = (const char *)&a2[v13 + v19],
          size_t v25 = strnlen(v24, a3 - (v13 + v19)),
          (CFURLRef v26 = CFURLCreateWithBytes(v18, (const UInt8 *)v24, v25, 0x201u, 0)) != 0)
      && (CACFDictionary::AddURL((CACFDictionary *)&cf, @"text", v26), CFRelease(v26), cf))
    {
      CFRetain(cf);
      CFTypeRef v4 = cf;
    }
    else
    {
      CFTypeRef v4 = 0;
    }
    CACFDictionary::~CACFDictionary((CACFDictionary *)&cf);
  }
  return v4;
}

void sub_18FF91D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

const __CFString *ID3TagBase::CreateTXXXFrameDictionary(ID3TagBase *this, unsigned __int8 *a2, unsigned int a3)
{
  if (!*((unsigned char *)this + 8)) {
    return 0;
  }
  CFStringRef v4 = 0;
  if (a2 && a3 >= 4)
  {
    unsigned int v6 = bswap32(*(_DWORD *)a2);
    if (*((_DWORD *)this + 16) == 2)
    {
      v6 >>= 8;
      int v7 = 5527640;
    }
    else
    {
      int v7 = 1415075928;
    }
    if (v7 != v6) {
      return 0;
    }
    unsigned int v8 = *((_DWORD *)this + 14) + 1;
    if (a3 < v8) {
      return 0;
    }
    int EncodingFromFrame = ID3TagBase::GetEncodingFromFrame(this, a2, a3);
    unsigned int v10 = EncodingFromFrame - 1;
    int v11 = (EncodingFromFrame - 1) >= 2 ? 1 : 2;
    unsigned int v12 = v11 + v8;
    if (v11 + v8 > a3) {
      return 0;
    }
    int v14 = EncodingFromFrame;
    CFTypeRef cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    __int16 v29 = 257;
    int v15 = &a2[v8];
    unsigned int v16 = ID3TagBase::StringSizeInBytes((ID3TagBase *)v15, (unsigned __int8 *)(a3 - v8), v14);
    CFAllocatorRef v17 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    unsigned int v18 = v16;
    if (v10 > 2u) {
      CFStringEncoding v19 = 513;
    }
    else {
      CFStringEncoding v19 = dword_1901C6E9C[v10];
    }
    if (v16 >= 2 && v10 <= 1)
    {
      int v20 = *v15;
      if (v20 == 254)
      {
        if (v15[1] == 255)
        {
LABEL_23:
          Boolean v21 = 1;
LABEL_26:
          CFStringRef v22 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v15, v16, v19, v21);
          if (!v22) {
            goto LABEL_42;
          }
          CACFDictionary::AddString((CACFDictionary *)&cf, @"identifier", v22);
          CFRelease(v22);
          if (a3 <= v12 + v18) {
            goto LABEL_42;
          }
          CFStringRef v23 = &a2[v12 + v18];
          CFIndex v24 = ID3TagBase::StringSizeInBytes((ID3TagBase *)v23, (unsigned __int8 *)(a3 - (v12 + v18)), v14);
          if (v10 > 2u) {
            CFStringEncoding v25 = 513;
          }
          else {
            CFStringEncoding v25 = dword_1901C6E9C[v10];
          }
          if (v24 >= 2 && v10 <= 1)
          {
            int v26 = *v23;
            if (v26 == 254)
            {
              if (v23[1] == 255)
              {
LABEL_36:
                Boolean v27 = 1;
LABEL_39:
                CFStringRef v4 = CFStringCreateWithBytes(v17, v23, v24, v25, v27);
                if (!v4)
                {
LABEL_43:
                  CACFDictionary::~CACFDictionary((CACFDictionary *)&cf);
                  return v4;
                }
                CACFDictionary::AddString((CACFDictionary *)&cf, @"text", v4);
                CFRelease(v4);
                if (cf)
                {
                  CFRetain(cf);
                  CFStringRef v4 = (const __CFString *)cf;
                  goto LABEL_43;
                }
LABEL_42:
                CFStringRef v4 = 0;
                goto LABEL_43;
              }
            }
            else if (v26 == 255 && v23[1] == 254)
            {
              goto LABEL_36;
            }
          }
          Boolean v27 = 0;
          goto LABEL_39;
        }
      }
      else if (v20 == 255 && v15[1] == 254)
      {
        goto LABEL_23;
      }
    }
    Boolean v21 = 0;
    goto LABEL_26;
  }
  return v4;
}

void sub_18FF91FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

CFTypeRef ID3TagBase::CreateGEOBFrameDictionary(ID3TagBase *this, unsigned __int8 *a2, unsigned int a3)
{
  if (!*((unsigned char *)this + 8)) {
    return 0;
  }
  CFTypeRef v4 = 0;
  if (a2 && a3 >= 4)
  {
    unsigned int v6 = bswap32(*(_DWORD *)a2);
    if (*((_DWORD *)this + 16) == 2)
    {
      v6 >>= 8;
      int v7 = 4670799;
    }
    else
    {
      int v7 = 1195724610;
    }
    if (v7 != v6) {
      return 0;
    }
    int v8 = *((_DWORD *)this + 14);
    int v9 = v8 + 1;
    if (a3 < v8 + 1) {
      return 0;
    }
    int EncodingFromFrame = ID3TagBase::GetEncodingFromFrame(this, a2, a3);
    int v11 = v8 + 2;
    unsigned int v12 = EncodingFromFrame - 1;
    int v13 = (EncodingFromFrame - 1) >= 2 ? 1 : 2;
    if (v11 + 2 * v13 > a3) {
      return 0;
    }
    int v15 = EncodingFromFrame;
    CFTypeRef cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    __int16 v39 = 257;
    unsigned int v16 = &a2[v9];
    unsigned int v17 = a3 - v9;
    if (a3 == v9)
    {
      LODWORD(v18) = 0;
    }
    else
    {
      uint64_t v19 = 0;
      if (v17 <= 1) {
        uint64_t v18 = 1;
      }
      else {
        uint64_t v18 = v17;
      }
      while (v16[v19])
      {
        if (v18 == ++v19) {
          goto LABEL_24;
        }
      }
      LODWORD(v18) = v19;
    }
LABEL_24:
    CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFStringRef v21 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v16, v18, 0x201u, 0);
    if (!v21) {
      goto LABEL_55;
    }
    CACFDictionary::AddString((CACFDictionary *)&cf, @"MIME", v21);
    CFRelease(v21);
    unsigned int v22 = v11 + v18;
    if (a3 <= v22) {
      goto LABEL_55;
    }
    CFStringRef v23 = &a2[v22];
    CFIndex v24 = ID3TagBase::StringSizeInBytes((ID3TagBase *)v23, (unsigned __int8 *)(a3 - v22), v15);
    if (v12 > 2u) {
      CFStringEncoding v25 = 513;
    }
    else {
      CFStringEncoding v25 = dword_1901C6E9C[v12];
    }
    if (v24 >= 2 && v12 <= 1)
    {
      int v26 = *v23;
      if (v26 == 254)
      {
        if (v23[1] == 255)
        {
LABEL_34:
          Boolean v27 = 1;
LABEL_37:
          CFStringRef v28 = CFStringCreateWithBytes(v20, &a2[v22], v24, v25, v27);
          if (!v28) {
            goto LABEL_55;
          }
          CACFDictionary::AddString((CACFDictionary *)&cf, @"filename", v28);
          CFRelease(v28);
          unsigned int v29 = v22 + v13 + v24;
          if (a3 <= v29) {
            goto LABEL_55;
          }
          CFIndex v30 = &a2[v29];
          CFIndex v31 = ID3TagBase::StringSizeInBytes((ID3TagBase *)v30, (unsigned __int8 *)(a3 - v29), v15);
          if (v12 > 2u) {
            CFStringEncoding v32 = 513;
          }
          else {
            CFStringEncoding v32 = dword_1901C6E9C[v12];
          }
          if (v31 >= 2 && v12 <= 1)
          {
            int v33 = *v30;
            if (v33 == 254)
            {
              if (v30[1] == 255)
              {
LABEL_47:
                Boolean v34 = 1;
LABEL_50:
                CFStringRef v35 = CFStringCreateWithBytes(v20, &a2[v29], v31, v32, v34);
                if (v35)
                {
                  CACFDictionary::AddString((CACFDictionary *)&cf, @"identifier", v35);
                  CFRelease(v35);
                  unsigned int v36 = v29 + v13 + v31;
                  if (a3 > v36)
                  {
                    CFDataRef v37 = CFDataCreate(v20, &a2[v36], a3 - v36);
                    if (v37)
                    {
                      CACFDictionary::AddData((CACFDictionary *)&cf, @"data", v37);
                      CFRelease(v37);
                      if (cf)
                      {
                        CFRetain(cf);
                        CFTypeRef v4 = cf;
LABEL_56:
                        CACFDictionary::~CACFDictionary((CACFDictionary *)&cf);
                        return v4;
                      }
                    }
                  }
                }
LABEL_55:
                CFTypeRef v4 = 0;
                goto LABEL_56;
              }
            }
            else if (v33 == 255 && v30[1] == 254)
            {
              goto LABEL_47;
            }
          }
          Boolean v34 = 0;
          goto LABEL_50;
        }
      }
      else if (v26 == 255 && v23[1] == 254)
      {
        goto LABEL_34;
      }
    }
    Boolean v27 = 0;
    goto LABEL_37;
  }
  return v4;
}

void sub_18FF92344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ID3TagBase::GetEncodingFromFrame(ID3TagBase *this, unsigned __int8 *a2, unsigned int a3)
{
  if (a2 && a3 > 3)
  {
    int v3 = bswap32(*(_DWORD *)a2);
    int v4 = *((_DWORD *)this + 16);
    if (v4 == 2) {
      int v3 = v3 >> 8;
    }
  }
  else
  {
    int v3 = 0;
    int v4 = *((_DWORD *)this + 16);
  }
  if (v4 == 2)
  {
    if (v3 == 5724248 || (v3 & 0xFFFF0000) == 0x540000) {
      goto LABEL_39;
    }
    if ((v3 & 0xFFFF0000) == 0x570000) {
      return 0;
    }
  }
  else
  {
    if (v3 == 1465407576 || (v3 & 0xFF000000) == 0x54000000) {
      goto LABEL_39;
    }
    if ((v3 & 0xFF000000) == 0x57000000) {
      return 0;
    }
  }
  uint64_t v5 = 0;
  if (v3 > 1129270604)
  {
    if (v3 > 1331121732)
    {
      if (v3 > 1415075927)
      {
        if (v3 == 1431522388) {
          goto LABEL_39;
        }
        int v6 = 1415075928;
      }
      else
      {
        if (v3 == 1331121733) {
          goto LABEL_39;
        }
        int v6 = 1398361172;
      }
    }
    else if (v3 > 1195724609)
    {
      if (v3 == 1195724610) {
        goto LABEL_39;
      }
      int v6 = 1229999187;
    }
    else
    {
      if (v3 == 1129270605) {
        goto LABEL_39;
      }
      int v6 = 1129270610;
    }
  }
  else if (v3 > 5459027)
  {
    if (v3 > 5590099)
    {
      if (v3 == 5590100) {
        goto LABEL_39;
      }
      int v6 = 1095780675;
    }
    else
    {
      if (v3 == 5459028) {
        goto LABEL_39;
      }
      int v6 = 5527640;
    }
  }
  else if (v3 > 4804683)
  {
    if (v3 == 4804684) {
      goto LABEL_39;
    }
    int v6 = 5261635;
  }
  else
  {
    if (v3 == 4411213) {
      goto LABEL_39;
    }
    int v6 = 4670799;
  }
  if (v3 == v6)
  {
LABEL_39:
    uint64_t v7 = *((unsigned int *)this + 14);
    if ((int)v7 + 1 <= a3) {
      return a2[v7];
    }
    return 0;
  }
  return v5;
}

uint64_t ID3TagBase::StringSizeInBytes(ID3TagBase *this, unsigned __int8 *a2, int a3)
{
  if ((a3 - 1) >= 2) {
    int v3 = 1;
  }
  else {
    int v3 = 2;
  }
  if (a2)
  {
    unsigned int v5 = 0;
    uint64_t result = 0;
    while (1)
    {
      if ((a3 - 1) >= 2)
      {
        if (!*((unsigned char *)this + v5)) {
          return result;
        }
        int v7 = 1;
      }
      else
      {
        if (v5 + 1 >= a2 || !*((unsigned char *)this + v5) && !*((unsigned char *)this + v5 + 1)) {
          return result;
        }
        int v7 = 2;
      }
      uint64_t result = (result + v7);
      v5 += v3;
      if (v5 >= a2) {
        return result;
      }
    }
  }
  return 0;
}

CFStringRef CreateCFStringFromV1GenreFrame(unsigned __int8 *a1, int a2, unsigned __int8 a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  unsigned __int8 pStr = a3;
  int v3 = &a1[a2];
  size_t v4 = a3;
  bzero(&v12[v4], v4 ^ 0xFF);
  memcpy(v12, v3, v4);
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringRef v6 = CFStringCreateWithPascalString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], &pStr, 0x201u);
  if (!v6) {
    return 0;
  }
  CFStringRef v7 = v6;
  Intint Value = CFStringGetIntValue(v6);
  if (IntValue > 0x93) {
    CFStringRef v9 = 0;
  }
  else {
    CFStringRef v9 = CFStringCreateWithCString(v5, kGenreTable[IntValue], 0x201u);
  }
  CFRelease(v7);
  return v9;
}

uint64_t ID3TagBase::TranslateV2IDToV3(ID3TagBase *this)
{
  if ((int)this <= 5525312)
  {
    if ((int)this <= 5459027)
    {
      if ((int)this <= 4804683)
      {
        int v1 = 4411968;
        if (this == 4670799) {
          int v13 = 1195724610;
        }
        else {
          int v13 = (int)this;
        }
        if (this == 4543555) {
          int v14 = 1163150159;
        }
        else {
          int v14 = v13;
        }
        if (this == 4542805) {
          int v15 = 1162958145;
        }
        else {
          int v15 = (int)this;
        }
        if (this == 4411969) {
          int v16 = 1095061059;
        }
        else {
          int v16 = v15;
        }
        if ((int)this <= 4543554) {
          unsigned int v3 = v16;
        }
        else {
          unsigned int v3 = v14;
        }
        int v4 = 4347206;
        int v5 = 1380078918;
        if (this == 4411213) {
          int v17 = 1129270605;
        }
        else {
          int v17 = (int)this;
        }
        if (this == 4410964) {
          int v7 = 1346588244;
        }
        else {
          int v7 = v17;
        }
        goto LABEL_126;
      }
      if ((int)this > 5261634)
      {
        int v1 = 5391701;
        if (this == 5396033) {
          int v23 = 1381384516;
        }
        else {
          int v23 = (int)this;
        }
        if (this == 5391702) {
          unsigned int v3 = 1381388866;
        }
        else {
          unsigned int v3 = v23;
        }
        int v4 = 5261635;
        int v5 = 1095780675;
        BOOL v6 = this == 5263184;
        int v7 = 1347375181;
      }
      else
      {
        int v1 = 5063496;
        if (this == 5065804) {
          int v10 = 1296845908;
        }
        else {
          int v10 = (int)this;
        }
        if (this == 5063497) {
          unsigned int v3 = 1296254025;
        }
        else {
          unsigned int v3 = v10;
        }
        int v4 = 4804684;
        int v5 = 1229999187;
        BOOL v6 = this == 5000779;
        int v7 = 1279872587;
      }
    }
    else
    {
      if ((int)this <= 5522520)
      {
        if ((int)this <= 5522252)
        {
          int v1 = 5521739;
          if (this == 5522000) {
            int v2 = 1413632077;
          }
          else {
            int v2 = (int)this;
          }
          if (this == 5521740) {
            unsigned int v3 = 1413565506;
          }
          else {
            unsigned int v3 = v2;
          }
          int v4 = 5459028;
          int v5 = 1398361172;
          BOOL v6 = this == 5461059;
          int v7 = 1398363203;
          goto LABEL_124;
        }
        int v1 = 5522257;
        if (this == 5522497) {
          int v22 = 1413759316;
        }
        else {
          int v22 = (int)this;
        }
        if (this == 5522258) {
          unsigned int v3 = 1413697360;
        }
        else {
          unsigned int v3 = v22;
        }
        int v4 = 5522253;
        int v5 = 1413697357;
        if (this == 5522255) {
          int v7 = 1413697358;
        }
        else {
          int v7 = (int)this;
        }
LABEL_126:
        if (this == v4) {
          unsigned int v26 = v5;
        }
        else {
          unsigned int v26 = v7;
        }
        if ((int)this <= v1) {
          return v26;
        }
        else {
          return v3;
        }
      }
      if ((int)this > 5524292)
      {
        int v1 = 5524548;
        if (this == 5524820) {
          int v25 = 1414350148;
        }
        else {
          int v25 = (int)this;
        }
        if (this == 5524549) {
          unsigned int v3 = 1414284622;
        }
        else {
          unsigned int v3 = v25;
        }
        int v4 = 5524293;
        int v5 = 1414219097;
        BOOL v6 = this == 5524545;
        int v7 = 1414283598;
      }
      else
      {
        int v1 = 5523027;
        if (this == 5523789) {
          int v12 = 1414090053;
        }
        else {
          int v12 = (int)this;
        }
        if (this == 5523028) {
          unsigned int v3 = 1413893204;
        }
        else {
          unsigned int v3 = v12;
        }
        int v4 = 5522521;
        int v5 = 1413762137;
        BOOL v6 = this == 5522766;
        int v7 = 1413828163;
      }
    }
LABEL_124:
    if (!v6) {
      int v7 = (int)this;
    }
    goto LABEL_126;
  }
  if ((int)this > 5526354)
  {
    if ((int)this > 5590099)
    {
      if ((int)this > 5718860)
      {
        int v1 = 5722177;
        if (this == 5724248) {
          int v24 = 1465407576;
        }
        else {
          int v24 = (int)this;
        }
        if (this == 5722178) {
          unsigned int v3 = 1464882498;
        }
        else {
          unsigned int v3 = v24;
        }
        int v4 = 5718861;
        int v5 = 1464029005;
        BOOL v6 = this == 5718864;
        int v7 = 1464029008;
      }
      else
      {
        int v1 = 5718353;
        if (this == 5718355) {
          int v11 = 1464811859;
        }
        else {
          int v11 = (int)this;
        }
        if (this == 5718354) {
          unsigned int v3 = 1464811858;
        }
        else {
          unsigned int v3 = v11;
        }
        int v4 = 5590100;
        int v5 = 1431522388;
        BOOL v6 = this == 5718342;
        int v7 = 1464811846;
      }
      goto LABEL_124;
    }
    if ((int)this > 5526578)
    {
      int v1 = 5527639;
      if (this == 5527877) {
        int v18 = 1415136594;
      }
      else {
        int v18 = (int)this;
      }
      if (this == 5527640) {
        unsigned int v3 = 1415075928;
      }
      else {
        unsigned int v3 = v18;
      }
      int v4 = 5526579;
      int v5 = 1414091827;
      BOOL v6 = this == 5527636;
      int v7 = 1413830740;
      goto LABEL_124;
    }
    if (this == 5526578) {
      unsigned int v27 = 1414091826;
    }
    else {
      unsigned int v27 = this;
    }
    if (this == 5526577) {
      unsigned int v27 = 1414091825;
    }
    if (this == 5526355) {
      return 1414746949;
    }
    else {
      return v27;
    }
  }
  else
  {
    if ((int)this > 5525568)
    {
      int v1 = 5526083;
      if (this == 5526345) {
        int v19 = 1414744410;
      }
      else {
        int v19 = (int)this;
      }
      if (this == 5526091) {
        int v20 = 1414677323;
      }
      else {
        int v20 = v19;
      }
      if (this == 5526084) {
        unsigned int v3 = 1414677569;
      }
      else {
        unsigned int v3 = v20;
      }
      int v4 = 5525569;
      int v5 = 1414549331;
      int v21 = 1414746691;
      if (this != 5526083) {
        int v21 = (int)this;
      }
      if (this == 5525570) {
        int v7 = 1414550850;
      }
      else {
        int v7 = v21;
      }
      goto LABEL_126;
    }
    if ((int)this > 5525329)
    {
      switch((int)this)
      {
        case 5525553:
          uint64_t result = 1414546737;
          break;
        case 5525554:
          uint64_t result = 1414546738;
          break;
        case 5525555:
          uint64_t result = 1414546739;
          break;
        case 5525556:
          uint64_t result = 1414546740;
          break;
        default:
          if (this == 5525332) {
            unsigned int v28 = 1414480204;
          }
          else {
            unsigned int v28 = this;
          }
          if (this == 5525330) {
            uint64_t result = 1414484569;
          }
          else {
            uint64_t result = v28;
          }
          break;
      }
    }
    else
    {
      if (this == 5525324) {
        unsigned int v8 = 1414483033;
      }
      else {
        unsigned int v8 = this;
      }
      if (this == 5525318) {
        unsigned int v8 = 1414481486;
      }
      if (this == 5525313) {
        return 1414484037;
      }
      else {
        return v8;
      }
    }
  }
  return result;
}

BOOL ResynchroniseBytes(unsigned __int8 *a1, int a2, unsigned int a3, unsigned int *a4)
{
  unsigned int v4 = 0;
  unsigned int v5 = 0;
  if (a3 && a2)
  {
    unsigned int v5 = 0;
    unsigned int v4 = 0;
    BOOL v6 = a1;
    int v7 = &a1[a2];
    while (1)
    {
      unsigned int v8 = v6 + 1;
      int v9 = *v6;
      *a1 = v9;
      if (v9 != 255 || v8 >= v7) {
        goto LABEL_11;
      }
      unsigned int v8 = v6 + 2;
      int v11 = v6[1];
      if (v11) {
        break;
      }
      v5 += 2;
      BOOL v6 = v8;
      ++a1;
      ++v4;
LABEL_13:
      if (v4 >= a3 || v6 >= v7) {
        goto LABEL_15;
      }
    }
    if (v4 + 1 < a3)
    {
      a1[1] = v11;
      a1 += 2;
      v5 += 2;
      v4 += 2;
      BOOL v6 = v8;
      goto LABEL_13;
    }
LABEL_11:
    BOOL v6 = v8;
    ++a1;
    ++v4;
    ++v5;
    goto LABEL_13;
  }
LABEL_15:
  if (a4) {
    *a4 = v5;
  }
  return v4 == a3;
}

uint64_t ID3TagBase::GetFrameDataSize(ID3TagBase *this, unsigned __int8 *a2, unsigned int a3, unsigned int *a4)
{
  if (!a2) {
    return 0;
  }
  unsigned int v4 = *((_DWORD *)this + 16);
  if (v4 < 3)
  {
    if (a3 < 6) {
      return 0;
    }
    unsigned int v13 = *(_DWORD *)(a2 + 2) & 0xFFFFFF00;
LABEL_27:
    uint64_t result = bswap32(v13);
    unsigned int v6 = result;
    if (!a4) {
      return result;
    }
LABEL_28:
    *a4 = v6;
    return result;
  }
  if (v4 != 4)
  {
    if (a3 < 8) {
      return 0;
    }
    unsigned int v13 = *((_DWORD *)a2 + 1);
    goto LABEL_27;
  }
  if (a3 < 9) {
    return 0;
  }
  unsigned int v5 = *((_DWORD *)a2 + 1);
  unsigned int v6 = bswap32(v5);
  int v7 = v5 & 0x800000;
  if ((v5 & 0x80000000) == 0) {
    unsigned int v8 = (v5 << 6) & 0x3FC000 | (*((_DWORD *)a2 + 1) << 21) | (v5 >> 9) & 0x7F80 | HIBYTE(v5);
  }
  else {
    unsigned int v8 = v6;
  }
  if (v6 >= 0x80 && (*((_DWORD *)a2 + 1) & 0x80) == 0 && (*((_DWORD *)a2 + 1) & 0x8000) == 0 && v7 == 0) {
    uint64_t result = v8;
  }
  else {
    uint64_t result = v6;
  }
  if (a4) {
    goto LABEL_28;
  }
  return result;
}

uint64_t ID3TagBase::SetFrameDataSize(uint64_t this, unsigned __int8 *a2, unsigned int a3, unsigned int a4)
{
  if (a2)
  {
    unsigned int v4 = *(_DWORD *)(this + 64);
    if (v4 < 3)
    {
      if (a3 >= 6 && !HIBYTE(a4))
      {
        unsigned __int8 v7 = a2[2];
        *(_DWORD *)(a2 + 2) = bswap32(a4);
        a2[2] = v7;
      }
    }
    else
    {
      if (v4 == 4)
      {
        if (a4 >> 28) {
          return this;
        }
        unsigned int v5 = bswap32(a4);
        unsigned int v6 = v5 & 0x7F | (((v5 >> 14) & 0x7F) << 16) & 0x80FF80FF | (((v5 >> 21) & 0x7F) << 24) | (((v5 >> 7) & 0x7F) << 8);
      }
      else
      {
        if (a3 < 8) {
          return this;
        }
        unsigned int v6 = bswap32(a4);
      }
      *((_DWORD *)a2 + 1) = v6;
    }
  }
  return this;
}

uint64_t ID3ParserHandle::ParseDataForFrames(uint64_t this, unsigned __int8 *a2, unsigned int a3, unsigned int a4, int a5)
{
  if (!*(unsigned char *)(this + 48))
  {
    unsigned int v5 = 0;
    if (*(_DWORD *)(this + 56) <= a3) {
      return ID3TagBase::ProvideFrameData((ID3TagBase *)this, a2, a3, a4, &v5, a5);
    }
  }
  return this;
}

BOOL ID3TagBase::IsValidFrameID(ID3TagBase *this, int a2)
{
  if (this == 4)
  {
    unsigned __int8 v7 = "CNEACNEA ARCCIPACIPA CIPIPSA        MMOCMMOC MOCRMOCRMOC    RCNERCNE MRC2UQEAUQE UQEOCTEOCTE CTEBOEGBOEG OEGDIR"
         "GDIRG    KNILKNIL KNLIDCMIDCM ICMTLLMTLLM LLMENWOENWO    TSCPTSCP SCPTNCPTNCP TNCMPOPMPOP POPSSOPSSOP    VIRPVI"
         "RP    FUBRFUBR FUB2AVRDAVR AVRBRVRBRVR VERKEES        NGIS        TLYSTLYS TLSCTYSCTYS CTSBLATBLAT LATMPBTMPBT "
         "PBTTACTTACT TCTPMCTPMCT PCTMOCTMOCT MCTNOCTNOCT OCTPOCTPOCT RCT    TADT ADTNEDT        SEDTSEDT SDTYLDTYLDT YDT"
         "RODT        CRDTREYT EYTLRDT        GTDT        CNETCNET NETTXETTXET TXTDEFTDEFT DFTTLFTTLFT TFTDIGTDIGT DIT   "
         " EMIT MITLPITSLPI LPI1TIT1TIT 1TT2TIT2TIT 2TT3TIT3TIT 3TTYEKTYEKT EKTDWKTDWKT WKTNALTNALT ALTNELTNELT ELTLCMT  "
         "      DEMTDEMT TMTOOMT        LAOTLAOT TOTNFOTNFOT FOTYLOTYLOT LOTEPOTEPOT AOTLRDTYROT ROTNWOTNWOT    1EPT1EPT "
         "1PT2EPT2EPT 2PT3EPT3EPT 3PT4EPT4EPT 4PTSOPTSOPT APTORPT        BUPTBUPT BPTKCRTKCRT KRT    ADRT DRTNSRTNSRT    "
         "OSRTOSRT        ZIST IST2OST2OST 2STAOST        COSTCOST CSTPOST        TOST        CRSTCRST CRTESSTESST SSTTSS"
         "T        XXXTXXXT XXTDIFUDIFU IFURESURESU    TLSUTLSU TLUMOCWMOCW MCWPOCWPOCW PCWFAOWFAOW FAWRAOWRAOW RAWSAOWSA"
         "OW SAWSROWSROW    YAPWYAPW    BUPWBUPW BPWXXXWXXXW XXW";
    do
    {
      int v9 = *(_DWORD *)v7;
      v7 += 12;
      int v8 = v9;
      BOOL result = v9 != 0;
    }
    while (v9 != a2 && v8 != 0);
  }
  else if (this == 3)
  {
    int v2 = "CNEA ARCCIPACIPA CIPIPSA        MMOCMMOC MOCRMOCRMOC    RCNERCNE MRC2UQEAUQE UQEOCTEOCTE CTEBOEGBOEG OEGDIRGDIRG    KNILKNIL KNLIDCMIDCM ICMTLLMTLLM LLMENWOENWO    TSCPTSCP SCPTNCPTNCP TNCMPOPMPOP POPSSOPSSOP    VIRPVIRP    FUBRFUBR FUB2AVRDAVR AVRBRVRBRVR VERKEES        NGIS        TLYSTLYS TLSCTYSCTYS CTSBLATBLAT LATMPBTMPBT PBTTACTTACT TCTPMCTPMCT PCTMOCTMOCT MCTNOCTNOCT OCTPOCTPOCT RCT    TADT ADTNEDT        SEDTSEDT SDTYLDTYLDT YDTRODT        CRDTREYT EYTLRDT        GTDT        CNETCNET NETTXETTXET TXTDEFTDEFT DFTTLFTTLFT TFTDIGTDIGT DIT    EMIT MITLPITSLPI LPI1TIT1TIT 1TT2TIT2TIT 2TT3TIT3TIT 3TTYEKTYEKT EKTDWKTDWKT WKTNALTNALT ALTNELTNELT ELTLCMT        DEMTDEMT TMTOOMT        LAOTLAOT TOTNFOTNFOT FOTYLOTYLOT LOTEPOTEPOT AOTLRDTYROT ROTNWOTNWOT    1EPT1EPT 1PT2EPT2EPT 2PT3EPT3EPT 3PT4EPT4EPT 4PTSOPTSOPT APTORPT        BUPTBUPT BPTKCRTKCRT KRT    ADRT DRTNSRTNSRT    OSRTOSRT        ZIST IST2OST2OST 2STAOST        COSTCOST CSTPOST        TOST        CRSTCRST CRTESSTESST SSTTSST        XXXTXXXT XXTDIFUDIFU IFURESURESU    TLSUTLSU TLUMOCWMOCW MCWPOCWPOCW PCWFAOWFAOW FAWRAOWRAOW RAWSAOWSAOW SAWSROWSROW    YAPWYAPW    BUPWBUPW BPWXXXWXXXW XXW";
    do
    {
      int v4 = *(_DWORD *)v2;
      v2 += 12;
      int v3 = v4;
      BOOL result = v4 != 0;
    }
    while (v4 != a2 && v3 != 0);
  }
  else
  {
    int v11 = " ARCCIPACIPA CIPIPSA        MMOCMMOC MOCRMOCRMOC    RCNERCNE MRC2UQEAUQE UQEOCTEOCTE CTEBOEGBOEG OEGDIRGDIRG    KNILKNIL KNLIDCMIDCM ICMTLLMTLLM LLMENWOENWO    TSCPTSCP SCPTNCPTNCP TNCMPOPMPOP POPSSOPSSOP    VIRPVIRP    FUBRFUBR FUB2AVRDAVR AVRBRVRBRVR VERKEES        NGIS        TLYSTLYS TLSCTYSCTYS CTSBLATBLAT LATMPBTMPBT PBTTACTTACT TCTPMCTPMCT PCTMOCTMOCT MCTNOCTNOCT OCTPOCTPOCT RCT    TADT ADTNEDT        SEDTSEDT SDTYLDTYLDT YDTRODT        CRDTREYT EYTLRDT        GTDT        CNETCNET NETTXETTXET TXTDEFTDEFT DFTTLFTTLFT TFTDIGTDIGT DIT    EMIT MITLPITSLPI LPI1TIT1TIT 1TT2TIT2TIT 2TT3TIT3TIT 3TTYEKTYEKT EKTDWKTDWKT WKTNALTNALT ALTNELTNELT ELTLCMT        DEMTDEMT TMTOOMT        LAOTLAOT TOTNFOTNFOT FOTYLOTYLOT LOTEPOTEPOT AOTLRDTYROT ROTNWOTNWOT    1EPT1EPT 1PT2EPT2EPT 2PT3EPT3EPT 3PT4EPT4EPT 4PTSOPTSOPT APTORPT        BUPTBUPT BPTKCRTKCRT KRT    ADRT DRTNSRTNSRT    OSRTOSRT        ZIST IST2OST2OST 2STAOST        COSTCOST CSTPOST        TOST        CRSTCRST CRTESSTESST SSTTSST        XXXTXXXT XXTDIFUDIFU IFURESURESU    TLSUTLSU TLUMOCWMOCW MCWPOCWPOCW PCWFAOWFAOW FAWRAOWRAOW RAWSAOWSAOW SAWSROWSROW    YAPWYAPW    BUPWBUPW BPWXXXWXXXW XXW";
    do
    {
      int v13 = *(_DWORD *)v11;
      v11 += 12;
      int v12 = v13;
      BOOL result = v13 != 0;
    }
    while (v13 != a2 && v12 != 0);
  }
  return result;
}

uint64_t ID3TagBase::ProvideFrameData(ID3TagBase *this, unsigned __int8 *a2, unsigned int a3, unsigned int a4, unsigned int *a5, int a6)
{
  if (*((unsigned char *)this + 48)) {
    return 0;
  }
  unsigned int v9 = *((_DWORD *)this + 14);
  if (v9 > a3) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v11 = *((_DWORD *)this + 13);
  if (v9 + a4 > v11) {
    goto LABEL_5;
  }
  int v15 = (char *)this + 24;
  int v16 = *((_DWORD *)this + 10);
  if (v16)
  {
    uint64_t v17 = *((void *)this + 4);
    uint64_t v18 = (v16 - 1);
    if (v18)
    {
      unint64_t v19 = v18 + 1;
      do
      {
        uint64_t v17 = *(void *)(v17 + 8);
        --v19;
      }
      while (v19 > 1);
    }
    if ((char *)v17 == v15) {
      uint64_t v20 = 0;
    }
    else {
      uint64_t v20 = v17 + 16;
    }
    unsigned int v21 = *(_DWORD *)(v20 + 4) + *(_DWORD *)(v20 + 8);
    if (v21 > a4)
    {
      int v22 = (char *)this + 24;
      while (1)
      {
        int v22 = (char *)*((void *)v22 + 1);
        if (v22 == v15) {
          break;
        }
        if (*((_DWORD *)v22 + 6) == a4)
        {
          if (!a5) {
            return 0;
          }
          uint64_t result = 0;
          *a5 = *((_DWORD *)v22 + 5);
          return result;
        }
      }
      return 0xFFFFFFFFLL;
    }
    if (v21 < a4) {
      return 0xFFFFFFFFLL;
    }
  }
  else if (a4 != 10)
  {
    return 0xFFFFFFFFLL;
  }
  unsigned int v31 = 0;
  unsigned int FrameDataSize = ID3TagBase::GetFrameDataSize(this, a2, a3, &v31);
  unsigned int v24 = a6 ? v31 : FrameDataSize;
  if (__CFADD__(v9, v24)
    || v24 > v9 - a4 + v11
    || !v24
    && (!a2 || a3 <= 3
      ? (v27 = 0, unsigned int v26 = (ID3TagBase *)*((unsigned int *)this + 16))
      : (ID3TagBase *)((unsigned int v25 = bswap32(*(_DWORD *)a2), v26 = (ID3TagBase *)*((unsigned int *)this + 16), v26 != 2)
                     ? (int v27 = v25)
                     : (int v27 = v25 >> 8)),
        !ID3TagBase::IsValidFrameID(v26, v27)))
  {
LABEL_5:
    *((unsigned char *)this + 48) = 1;
    return 0xFFFFFFFFLL;
  }
  uint64_t v28 = 0;
  uint64_t v29 = v24 + v9;
  if (a2 && a3 >= 4)
  {
    LODWORD(v28) = bswap32(*(_DWORD *)a2);
    if (*((_DWORD *)this + 16) == 2) {
      uint64_t v28 = v28 >> 8;
    }
    else {
      uint64_t v28 = v28;
    }
  }
  ID3FrameList::Add((uint64_t *)this + 3, v28 | (v29 << 32), a4);
  unsigned int v30 = *((_DWORD *)this + 13);
  if (v30 <= v29 + a4 || v30 - (v29 + a4) < *((_DWORD *)this + 14)) {
    *((unsigned char *)this + 48) = 1;
  }
  uint64_t result = 0;
  if (a5) {
    *a5 = v29;
  }
  return result;
}

void *ID3FrameList::Add(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t result = operator new(0x20uLL);
  result[1] = a1;
  result[2] = a2;
  *((_DWORD *)result + 6) = a3;
  uint64_t v7 = *a1;
  *uint64_t result = *a1;
  *(void *)(v7 + 8) = result;
  *a1 = (uint64_t)result;
  ++a1[2];
  return result;
}

BOOL TOpaqueObject<ID3ParserHandle,OpaqueID3ParserID *,BaseOpaqueObject>::isa(uint64_t a1, void *a2)
{
  return a2 == &TOpaqueRTTI<ID3ParserHandle>::sRTTI || a2 == (void *)MEMORY[0x1E4FB9468];
}

void ID3ParserHandle::~ID3ParserHandle(ID3ParserHandle *this)
{
  ID3ParserHandle::~ID3ParserHandle(this);
  JUMPOUT(0x192FC8940);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1EDF90670;
  int v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  BaseOpaqueObject::~BaseOpaqueObject(this);
}

void ID3Creator::~ID3Creator(ID3Creator *this)
{
}

void FillInfoDictionaryFromID3Parser(CACFDictionary *a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  theint String = 0;
  uint64_t v10 = 1413565506;
  int v12 = 12;
  if (!ID3ParserGetProperty(a2, 8, (uint64_t)&v10, 1718185574, (uint64_t)&v12, (uint64_t)v13))
  {
    int v12 = 8;
    if (!ID3ParserGetProperty(a2, 4, (uint64_t)v14, 1717854580, (uint64_t)&v12, (uint64_t)&theString))
    {
      if (CFStringGetLength(theString)) {
        CACFDictionary::AddString(a1, @"album", theString);
      }
      CFRelease(theString);
      theint String = 0;
    }
  }
  LODWORD(v1std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1414546737;
  int v12 = 12;
  if (!ID3ParserGetProperty(a2, 8, (uint64_t)&v10, 1718185574, (uint64_t)&v12, (uint64_t)v13))
  {
    int v12 = 8;
    if (!ID3ParserGetProperty(a2, 4, (uint64_t)v14, 1717854580, (uint64_t)&v12, (uint64_t)&theString))
    {
      if (CFStringGetLength(theString)) {
        CACFDictionary::AddString(a1, @"artist", theString);
      }
      CFRelease(theString);
      theint String = 0;
    }
  }
  LODWORD(v1std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1413632077;
  int v12 = 12;
  if (!ID3ParserGetProperty(a2, 8, (uint64_t)&v10, 1718185574, (uint64_t)&v12, (uint64_t)v13))
  {
    int v12 = 8;
    if (!ID3ParserGetProperty(a2, 4, (uint64_t)v14, 1717854580, (uint64_t)&v12, (uint64_t)&theString))
    {
      if (CFStringGetLength(theString)) {
        CACFDictionary::AddString(a1, @"tempo", theString);
      }
      CFRelease(theString);
      theint String = 0;
    }
  }
  LODWORD(v1std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1414219097;
  int v12 = 12;
  if (!ID3ParserGetProperty(a2, 8, (uint64_t)&v10, 1718185574, (uint64_t)&v12, (uint64_t)v13))
  {
    int v12 = 8;
    if (!ID3ParserGetProperty(a2, 4, (uint64_t)v14, 1717854580, (uint64_t)&v12, (uint64_t)&theString))
    {
      if (CFStringGetLength(theString)) {
        CACFDictionary::AddString(a1, @"key signature", theString);
      }
      CFRelease(theString);
      theint String = 0;
    }
  }
  LODWORD(v1std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1414677323;
  int v12 = 12;
  if (!ID3ParserGetProperty(a2, 8, (uint64_t)&v10, 1718185574, (uint64_t)&v12, (uint64_t)v13))
  {
    int v12 = 8;
    if (!ID3ParserGetProperty(a2, 4, (uint64_t)v14, 1717854580, (uint64_t)&v12, (uint64_t)&theString))
    {
      if (CFStringGetLength(theString)) {
        CACFDictionary::AddString(a1, @"track number", theString);
      }
      CFRelease(theString);
      theint String = 0;
    }
  }
  LODWORD(v1std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1415136594;
  int v12 = 12;
  if (!ID3ParserGetProperty(a2, 8, (uint64_t)&v10, 1718185574, (uint64_t)&v12, (uint64_t)v13))
  {
    int v12 = 8;
    if (!ID3ParserGetProperty(a2, 4, (uint64_t)v14, 1717854580, (uint64_t)&v12, (uint64_t)&theString))
    {
      if (CFStringGetLength(theString)) {
        CACFDictionary::AddString(a1, @"year", theString);
      }
      CFRelease(theString);
      theint String = 0;
    }
  }
  LODWORD(v1std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1413697357;
  int v12 = 12;
  if (!ID3ParserGetProperty(a2, 8, (uint64_t)&v10, 1718185574, (uint64_t)&v12, (uint64_t)v13))
  {
    int v12 = 8;
    if (!ID3ParserGetProperty(a2, 4, (uint64_t)v14, 1717854580, (uint64_t)&v12, (uint64_t)&theString))
    {
      if (CFStringGetLength(theString)) {
        CACFDictionary::AddString(a1, @"composer", theString);
      }
      CFRelease(theString);
      theint String = 0;
    }
  }
  LODWORD(v1std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1413830740;
  int v12 = 12;
  if (!ID3ParserGetProperty(a2, 8, (uint64_t)&v10, 1718185574, (uint64_t)&v12, (uint64_t)v13))
  {
    int v12 = 8;
    if (!ID3ParserGetProperty(a2, 4, (uint64_t)v14, 1717854580, (uint64_t)&v12, (uint64_t)&theString))
    {
      if (CFStringGetLength(theString)) {
        CACFDictionary::AddString(a1, @"lyricist", theString);
      }
      CFRelease(theString);
      theint String = 0;
    }
  }
  LODWORD(v1std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1414091826;
  int v12 = 12;
  if (!ID3ParserGetProperty(a2, 8, (uint64_t)&v10, 1718185574, (uint64_t)&v12, (uint64_t)v13))
  {
    int v12 = 8;
    if (!ID3ParserGetProperty(a2, 4, (uint64_t)v14, 1717854580, (uint64_t)&v12, (uint64_t)&theString))
    {
      if (CFStringGetLength(theString)) {
        CACFDictionary::AddString(a1, @"title", theString);
      }
      CFRelease(theString);
      theint String = 0;
    }
  }
  LODWORD(v1std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1413697360;
  int v12 = 12;
  if (!ID3ParserGetProperty(a2, 8, (uint64_t)&v10, 1718185574, (uint64_t)&v12, (uint64_t)v13))
  {
    int v12 = 8;
    if (!ID3ParserGetProperty(a2, 4, (uint64_t)v14, 1717854580, (uint64_t)&v12, (uint64_t)&theString))
    {
      if (CFStringGetLength(theString)) {
        CACFDictionary::AddString(a1, @"copyright", theString);
      }
      CFRelease(theString);
      theint String = 0;
    }
  }
  LODWORD(v1std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1413828163;
  int v12 = 12;
  if (!ID3ParserGetProperty(a2, 8, (uint64_t)&v10, 1718185574, (uint64_t)&v12, (uint64_t)v13))
  {
    int v12 = 8;
    if (!ID3ParserGetProperty(a2, 4, (uint64_t)v14, 1717854580, (uint64_t)&v12, (uint64_t)&theString))
    {
      if (CFStringGetLength(theString)) {
        CACFDictionary::AddString(a1, @"encoding application", theString);
      }
      CFRelease(theString);
      theint String = 0;
    }
  }
  LODWORD(v1std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1413697358;
  int v12 = 12;
  if (!ID3ParserGetProperty(a2, 8, (uint64_t)&v10, 1718185574, (uint64_t)&v12, (uint64_t)v13))
  {
    int v12 = 8;
    if (!ID3ParserGetProperty(a2, 4, (uint64_t)v14, 1717854580, (uint64_t)&v12, (uint64_t)&theString))
    {
      if (CFStringGetLength(theString)) {
        CACFDictionary::AddString(a1, @"genre", theString);
      }
      CFRelease(theString);
      theint String = 0;
    }
  }
  int v3 = 0;
  CFTypeRef cf = 0;
  do
  {
    LODWORD(v1std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1129270605;
    HIDWORD(v1std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v3;
    int v12 = 12;
    if (ID3ParserGetProperty(a2, 8, (uint64_t)&v10, 1718185574, (uint64_t)&v12, (uint64_t)v13)) {
      break;
    }
    int v12 = 8;
    if (ID3ParserGetProperty(a2, 4, (uint64_t)v14, 1717854580, (uint64_t)&v12, (uint64_t)&cf)) {
      break;
    }
    CFStringRef v6 = 0;
    CFTypeRef v7 = cf;
    __int16 v8 = 0;
    CACFDictionary::GetString((CACFDictionary *)&v7, @"identifier", &v6);
    if (v6)
    {
      CFStringGetCString(v6, buffer, 256, 0x600u);
      BOOL v4 = *(_DWORD *)buffer != 1853183081;
      if (*(_DWORD *)buffer != 1853183081)
      {
        CFStringRef v6 = 0;
        CACFDictionary::GetString((CACFDictionary *)&v7, @"text", &v6);
        if (v6)
        {
          if (CFStringGetLength(v6)) {
            CACFDictionary::AddString(a1, @"comments", v6);
          }
        }
        goto LABEL_71;
      }
    }
    else
    {
      BOOL v4 = 0;
    }
    ++v3;
LABEL_71:
    CFRelease(cf);
    CFTypeRef cf = 0;
    CACFDictionary::~CACFDictionary((CACFDictionary *)&v7);
  }
  while (!v4);
}

void sub_18FF93C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  _Unwind_Resume(a1);
}

uint64_t ID3ParserGetProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!a5) {
    return 2003334207;
  }
  if (!a6) {
    return 2003334207;
  }
  uint64_t v6 = BaseOpaqueObject::ResolveOpaqueRef();
  if (!v6) {
    return 2003334207;
  }
  CFTypeRef v7 = *(uint64_t (**)(void))(*(void *)v6 + 32);
  return v7();
}

uint64_t ID3ParserOpen(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 && a3) {
    operator new();
  }
  return 2003334207;
}

void sub_18FF93F1C(void *a1)
{
  MEMORY[0x192FC8940](v1, 0x10A1C4085EB5FF6);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18FF93EE0);
}

uint64_t ID3ParserClose()
{
  uint64_t v0 = BaseOpaqueObject::ResolveOpaqueRef();
  if (v0) {
    (*(void (**)(uint64_t))(*(void *)v0 + 8))(v0);
  }
  return 0;
}

uint64_t ID3CreatorCallbackProc(void *a1, unsigned int a2, unsigned int a3, unsigned int a4, void **a5, unsigned int *a6)
{
  *a5 = (void *)(a1[2] + a3);
  *a6 = *((_DWORD *)a1 + 6) - a3;
  return 0;
}

void ID3Creator::ID3Creator(ID3Creator *this)
{
  *(void *)this = &unk_1EDF8C228;
  *((unsigned char *)this + 8) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 0;
  *(void *)((char *)this + 28) = 0xA00000003;
  int v2 = (char *)malloc_type_malloc(0xAuLL, 0x7C51E058uLL);
  if (!v2)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    unsigned int v5 = std::bad_alloc::bad_alloc(exception);
  }
  *((void *)this + 2) = v2;
  *((_DWORD *)this + 6) = 10;
  char v3 = *((_DWORD *)this + 7);
  *(_WORD *)int v2 = 17481;
  v2[2] = 51;
  v2[3] = v3;
  *((_WORD *)v2 + 2) = 0;
  *(_DWORD *)(v2 + 6) = 167772160;
  *((unsigned char *)this + 8) = 1;
}

uint64_t GetSoundCheckDictionaryFromID3(uint64_t a1, CACFDictionary *a2, _DWORD *a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  unsigned int v18 = 2003334207;
  unsigned int v24 = 0;
  int v20 = 4;
  if (!ID3ParserGetProperty(a1, 0, 0, 1717792372, (uint64_t)&v20, (uint64_t)&v24) && v24)
  {
    unsigned int v6 = 1;
    while (1)
    {
      v21[0] = 1129270605;
      v21[1] = v6 - 1;
      int v20 = 12;
      if (!ID3ParserGetProperty(a1, 8, (uint64_t)v21, 1718185574, (uint64_t)&v20, (uint64_t)v22))
      {
        CFDictionaryRef theDict = 0;
        int v20 = 8;
        if (!ID3ParserGetProperty(a1, 4, (uint64_t)&v23, 1717854580, (uint64_t)&v20, (uint64_t)&theDict))
        {
          if (a3) {
            *a3 = v23;
          }
          if (a2) {
            break;
          }
        }
      }
      BOOL v7 = 0;
LABEL_7:
      if (v6++ >= v24 || v7) {
        return v18;
      }
    }
    uint64_t v10 = a2;
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(theDict, @"identifier");
    CFStringRef v12 = (const __CFString *)CFDictionaryGetValue(theDict, @"text");
    BOOL v7 = 0;
    if (Value)
    {
      CFStringRef v13 = v12;
      if (v12)
      {
        if (CFEqual(Value, @"iTunNORM"))
        {
          long long v31 = 0u;
          long long v32 = 0u;
          long long v29 = 0u;
          long long v30 = 0u;
          long long v27 = 0u;
          long long v28 = 0u;
          *(_OWORD *)buffer = 0u;
          long long v26 = 0u;
          if (CFStringGetCString(v13, buffer, 128, 0x201u))
          {
            a2 = v10;
            int v15 = ParseiTunesNORMData(buffer, v10, v14);
            BOOL v7 = v15 == 0;
            unsigned int v16 = v18;
            if (!v15) {
              unsigned int v16 = 0;
            }
            unsigned int v18 = v16;
            goto LABEL_20;
          }
        }
        BOOL v7 = 0;
      }
    }
    a2 = v10;
LABEL_20:
    CFRelease(theDict);
    goto LABEL_7;
  }
  return v18;
}

uint64_t ID3Creator::AddCommentFrame(ID3Creator *this, const void *__src, size_t __n, void *a4, const char *a5)
{
  if (!*((unsigned char *)this + 8)) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v6 = __n;
  unsigned int v9 = __n + 13;
  unsigned int v10 = *((_DWORD *)this + 9);
  if (v10)
  {
    int v11 = *((_DWORD *)this + 6);
    CFStringRef v12 = (char *)*((void *)this + 2);
    unsigned int v13 = *((_DWORD *)this + 8) + v9;
    int v14 = v10 - v13;
    if (v10 >= v13)
    {
LABEL_9:
      unsigned int v18 = &v12[v11 - v10];
      *((_DWORD *)this + 9) = v14;
      goto LABEL_17;
    }
    int v15 = v13 - v10;
    unsigned int v16 = v13 - v10 + v11;
    CFStringRef v12 = (char *)reallocf(v12, v16);
    if (v16) {
      BOOL v17 = v12 == 0;
    }
    else {
      BOOL v17 = 0;
    }
    if (!v17)
    {
      int v14 = 0;
      *((void *)this + 2) = v12;
      *((_DWORD *)this + 6) += v15;
      goto LABEL_9;
    }
LABEL_30:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    long long v29 = std::bad_alloc::bad_alloc(exception);
  }
  unsigned int v20 = *((_DWORD *)this + 6) + v9 + *((_DWORD *)this + 8);
  unsigned int v21 = (char *)reallocf(*((void **)this + 2), v20);
  if (v21) {
    BOOL v22 = 1;
  }
  else {
    BOOL v22 = v20 == 0;
  }
  if (!v22) {
    goto LABEL_30;
  }
  *((void *)this + 2) = v21;
  uint64_t v23 = *((unsigned int *)this + 6);
  unsigned int v18 = &v21[v23];
  *((_DWORD *)this + 6) = v23 + v9 + *((_DWORD *)this + 8);
LABEL_17:
  _OWORD v18[2] = 77;
  *(_WORD *)unsigned int v18 = 20291;
  unsigned int v24 = *((_DWORD *)this + 7);
  if (v24 < 3)
  {
    unsigned int v25 = v18 + 3;
  }
  else
  {
    v18[3] = 77;
    unsigned int v25 = v18 + 4;
    unsigned int v24 = *((_DWORD *)this + 7);
  }
  if (v24 == 4)
  {
    unsigned int v27 = bswap32(v9 & 0x7F | (((v9 >> 14) & 0x7F) << 16) & 0x80FF80FF | (((v9 >> 21) & 0x7F) << 24) | (((v9 >> 7) & 0x7F) << 8));
  }
  else
  {
    if (v24 != 3)
    {
      if (v24 == 2)
      {
        unsigned int v26 = bswap32(v9);
        v25[2] = HIBYTE(v26);
        *(_WORD *)unsigned int v25 = v26 >> 8;
        v25 += 3;
      }
      goto LABEL_27;
    }
    unsigned int v27 = bswap32(v9);
  }
  *(_DWORD *)unsigned int v25 = v27;
  v25 += 4;
LABEL_27:
  if (*((_DWORD *)this + 7) >= 3u)
  {
    *(_WORD *)unsigned int v25 = 0;
    v25 += 2;
  }
  *unsigned int v25 = 0;
  *(_WORD *)(v25 + 1) = 28261;
  v25[3] = 103;
  *(void *)(v25 + 4) = *a4;
  v25[12] = 0;
  memcpy(v25 + 13, __src, v6);
  uint64_t result = 0;
  *(_DWORD *)(*((void *)this + 2) + 6) = bswap32(*((_DWORD *)this + 6) & 0x7F | (((*((_DWORD *)this + 6) >> 14) & 0x7F) << 16) & 0x80FF80FF | (((*((_DWORD *)this + 6) >> 21) & 0x7F) << 24) | (((*((_DWORD *)this + 6) >> 7) & 0x7F) << 8));
  return result;
}

uint64_t AAAnalysisBase::ComputeNumberOfAnalysisFramesForLength(uint64_t this, uint64_t a2)
{
  if (!a2) {
    *(void *)(this + 56) = 1;
  }
  return this;
}

uint64_t AAAnalysisBase::CallProgressCallback(AAAnalyzer **this, __n128 a2)
{
  return AAAnalyzer::CallProgressCallback(this[8], a2);
}

uint64_t AAAnalysisBase::CallResultsCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return AAAnalyzer::CallResultsCallback(*(void *)(a1 + 64), a2, a3, a4);
}

uint64_t AAAnalysisBase::CompleteFinal(AAAnalysisBase *this, float a2, float a3)
{
  return 0;
}

uint64_t AAAnalysisBase::Complete(AAAnalysisBase *this, float a2, float a3)
{
  return (*(uint64_t (**)(float, float))(*(void *)this + 40))(a2, a3);
}

uint64_t AAAnalysisBase::PushAudio(AAAnalysisBase *this, unsigned int a2, const AudioBufferList *a3)
{
  return 0;
}

uint64_t AAAnalysisBase::Prepare(AAAnalysisBase *this)
{
  return 0;
}

void AAAnalysisBase::~AAAnalysisBase(AAAnalysisBase *this)
{
  *(void *)this = &unk_1EDF8EE80;
  MEMORY[0x192FC7C80]((char *)this + 48);
  JUMPOUT(0x192FC8940);
}

{
  *(void *)this = &unk_1EDF8EE80;
  MEMORY[0x192FC7C80]((char *)this + 48);
}

uint64_t AAAnalysisBase::AAAnalysisBase(uint64_t a1, long long *a2, AudioChannelLayout *a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = &unk_1EDF8EE80;
  long long v8 = *a2;
  long long v9 = a2[1];
  *(void *)(a1 + 4std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = *((void *)a2 + 4);
  *(_OWORD *)(a1 + 24) = v9;
  *(_OWORD *)(a1 + 8) = v8;
  CAAudioChannelLayout::CAAudioChannelLayout((CAAudioChannelLayout *)(a1 + 48), a3);
  *(void *)(a1 + 56) = a4;
  *(void *)(a1 + 64) = a5;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 8std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a4);
  return a1;
}

uint64_t AudioFormatProperty_ValidateChannelLayout(const AudioChannelLayout *a1, unsigned int a2)
{
  if (a2 < 0xC) {
    return 4294967246;
  }
  UInt32 mNumberChannelDescriptions = a1->mNumberChannelDescriptions;
  if (a2 == 12)
  {
    if (mNumberChannelDescriptions) {
      return 4294967246;
    }
  }
  if (20 * (unint64_t)mNumberChannelDescriptions + 12 > a2) {
    return 4294967246;
  }
  unsigned int v23 = 0;
  uint64_t Property = AudioFormatProperty_NumberOfChannelsForLayout(a1, &v23);
  if (!Property)
  {
    uint64_t v6 = mNumberChannelDescriptions;
    uint64_t Property = mNumberChannelDescriptions != 0 && mNumberChannelDescriptions != v23 ? 4294967246 : 0;
    if (mNumberChannelDescriptions && (mNumberChannelDescriptions == 0 || mNumberChannelDescriptions == v23))
    {
      AudioChannelLayoutTag mChannelLayoutTag = a1->mChannelLayoutTag;
      AudioChannelLayoutTag inSpecifier = mChannelLayoutTag;
      if (mChannelLayoutTag == 0x10000)
      {
        UInt32 outPropertyDataSize = 0;
        uint64_t PropertyInfo = AudioFormatGetPropertyInfo(0x636D7062u, 4u, &a1->mChannelBitmap, &outPropertyDataSize);
        if (PropertyInfo) {
          return PropertyInfo;
        }
        uint64_t outPropertyData = 0;
        CADeprecated::CAAutoFree<unsigned char>::allocBytes(&outPropertyData, outPropertyDataSize, 1);
        unsigned int v13 = (char *)outPropertyData;
        uint64_t Property = AudioFormatGetProperty(0x636D7062u, 4u, &a1->mChannelBitmap, &outPropertyDataSize, outPropertyData);
        if (Property)
        {
LABEL_42:
          if (v13) {
            free(v13);
          }
          return Property;
        }
        uint64_t v14 = a1->mNumberChannelDescriptions;
        if (v14)
        {
          unint64_t v15 = 0;
          uint64_t v16 = 20 * v14;
          while (a1->mChannelDescriptions[v15 / 0x14].mChannelLabel == *(_DWORD *)&v13[v15 + 12])
          {
            v15 += 20;
            if (v16 == v15) {
              goto LABEL_50;
            }
          }
          goto LABEL_52;
        }
      }
      else
      {
        if (!mChannelLayoutTag)
        {
          mChannelDescriptions = a1->mChannelDescriptions;
          while (1)
          {
            AudioChannelLabel mChannelLabel = mChannelDescriptions->mChannelLabel;
            ++mChannelDescriptions;
            int v9 = mChannelLabel;
            if (mChannelLabel - 0x10000 >= 0x40000)
            {
              if (v9 <= 199)
              {
                switch(v9)
                {
                  case -1:
                  case 0:
                  case 1:
                  case 2:
                  case 3:
                  case 4:
                  case 5:
                  case 6:
                  case 7:
                  case 8:
                  case 9:
                  case 10:
                  case 11:
                  case 12:
                  case 13:
                  case 14:
                  case 15:
                  case 16:
                  case 17:
                  case 18:
                  case 33:
                  case 34:
                  case 35:
                  case 36:
                  case 37:
                  case 38:
                  case 39:
                  case 40:
                  case 41:
                  case 42:
                  case 43:
                  case 44:
                  case 45:
                  case 49:
                  case 51:
                  case 52:
                  case 53:
                  case 54:
                  case 55:
                  case 56:
                  case 57:
                  case 58:
                  case 59:
                  case 60:
                  case 61:
                  case 62:
                  case 63:
                  case 64:
                  case 65:
                  case 66:
                  case 100:
                    goto LABEL_19;
                  default:
                    return 560360820;
                }
              }
              if (v9 > 300)
              {
                BOOL v11 = (v9 - 301) > 4 || v9 == 303;
                if (v11 && v9 != 500 && v9 != 400) {
                  return 560360820;
                }
              }
              else if ((v9 - 200) >= 0xA)
              {
                return 560360820;
              }
            }
LABEL_19:
            if (!--v6) {
              return 0;
            }
          }
        }
        UInt32 outPropertyDataSize = 0;
        uint64_t PropertyInfo = AudioFormatGetPropertyInfo(0x636D706Cu, 4u, &inSpecifier, &outPropertyDataSize);
        if (PropertyInfo) {
          return PropertyInfo;
        }
        uint64_t outPropertyData = 0;
        CADeprecated::CAAutoFree<unsigned char>::allocBytes(&outPropertyData, outPropertyDataSize, 1);
        unsigned int v13 = (char *)outPropertyData;
        uint64_t Property = AudioFormatGetProperty(0x636D706Cu, 4u, &inSpecifier, &outPropertyDataSize, outPropertyData);
        if (Property) {
          goto LABEL_42;
        }
        uint64_t v17 = a1->mNumberChannelDescriptions;
        if (v17)
        {
          unint64_t v18 = 0;
          uint64_t v19 = 20 * v17;
          while (a1->mChannelDescriptions[v18 / 0x14].mChannelLabel == *(_DWORD *)&v13[v18 + 12])
          {
            v18 += 20;
            if (v19 == v18) {
              goto LABEL_50;
            }
          }
LABEL_52:
          free(v13);
          return 4294967246;
        }
      }
      if (v13) {
LABEL_50:
      }
        free(v13);
      return 0;
    }
  }
  return Property;
}

void sub_18FF94974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10) {
    free(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AudioFormatProperty_LayoutTagForBitmap(int a1)
{
  if (a1 > 62)
  {
    if (a1 <= 262)
    {
      switch(a1)
      {
        case 63:
          return 7929862;
        case 255:
          return 8257544;
        case 259:
          return 8585219;
      }
    }
    else if (a1 > 270)
    {
      if (a1 == 271) {
        return 8978437;
      }
      if (a1 == 319) {
        return 8192007;
      }
    }
    else
    {
      if (a1 == 263) {
        return 7536644;
      }
      if (a1 == 267) {
        return 8781828;
      }
    }
    return 0x10000;
  }
  if (a1 > 14)
  {
    if (a1 > 54)
    {
      if (a1 == 55) {
        return 7667717;
      }
      if (a1 == 59) {
        return 8847365;
      }
    }
    else
    {
      if (a1 == 15) {
        return 8912900;
      }
      if (a1 == 51) {
        return 8650756;
      }
    }
    return 0x10000;
  }
  int v1 = a1 - 3;
  uint64_t result = 6553601;
  switch(v1)
  {
    case 0:
      uint64_t result = 6619138;
      break;
    case 1:
      return result;
    case 4:
      uint64_t result = 7405571;
      break;
    case 8:
      uint64_t result = 8716291;
      break;
    default:
      return 0x10000;
  }
  return result;
}

uint64_t AudioFormatProperty_BitmapForLayoutTag(int a1)
{
  if (a1 <= 8257543)
  {
    if (a1 <= 7536643)
    {
      switch(a1)
      {
        case 6553601:
          return 4;
        case 6619138:
          return 3;
        case 7405571:
          return 7;
      }
    }
    else if (a1 > 7929861)
    {
      if (a1 == 7929862) {
        return 63;
      }
      if (a1 == 8192007) {
        return 319;
      }
    }
    else
    {
      if (a1 == 7536644) {
        return 263;
      }
      if (a1 == 7667717) {
        return 55;
      }
    }
  }
  else if (a1 > 8781827)
  {
    if (a1 > 8912899)
    {
      if (a1 == 8912900) {
        return 15;
      }
      if (a1 == 8978437) {
        return 271;
      }
    }
    else
    {
      if (a1 == 8781828) {
        return 267;
      }
      if (a1 == 8847365) {
        return 59;
      }
    }
  }
  else if (a1 > 8650755)
  {
    if (a1 == 8650756) {
      return 51;
    }
    if (a1 == 8716291) {
      return 11;
    }
  }
  else
  {
    if (a1 == 8257544) {
      return 255;
    }
    if (a1 == 8585219) {
      return 259;
    }
  }
  return 0;
}

uint64_t AudioFormatProperty_WAVEChannelMaskForChannelLayout(const AudioChannelLayout *inSpecifier, unsigned int *a2)
{
  signed int mChannelLayoutTag = inSpecifier->mChannelLayoutTag;
  if ((int)inSpecifier->mChannelLayoutTag > 8716290)
  {
    if (mChannelLayoutTag > 12124163)
    {
      if (mChannelLayoutTag <= 12255237)
      {
        if (mChannelLayoutTag == 12124164)
        {
          unsigned int v4 = 51;
          goto LABEL_56;
        }
        if (mChannelLayoutTag == 12189701)
        {
          unsigned int v4 = 55;
          goto LABEL_56;
        }
      }
      else
      {
        switch(mChannelLayoutTag)
        {
          case 12255238:
            unsigned int v4 = 63;
            goto LABEL_56;
          case 12320775:
            unsigned int v4 = 1807;
            goto LABEL_56;
          case 12386312:
            unsigned int v4 = 1599;
            goto LABEL_56;
        }
      }
    }
    else if (mChannelLayoutTag <= 8847364)
    {
      if (mChannelLayoutTag == 8716291)
      {
        unsigned int v4 = 11;
        goto LABEL_56;
      }
      if (mChannelLayoutTag == 8781828)
      {
        unsigned int v4 = 267;
        goto LABEL_56;
      }
    }
    else
    {
      switch(mChannelLayoutTag)
      {
        case 8847365:
          unsigned int v4 = 1547;
          goto LABEL_56;
        case 8912900:
          unsigned int v4 = 15;
          goto LABEL_56;
        case 8978437:
          unsigned int v4 = 271;
          goto LABEL_56;
      }
    }
    goto LABEL_58;
  }
  if (mChannelLayoutTag > 7536643)
  {
    if (mChannelLayoutTag <= 7929861)
    {
      if (mChannelLayoutTag == 7536644)
      {
        unsigned int v4 = 263;
        goto LABEL_56;
      }
      if (mChannelLayoutTag == 7667717)
      {
        unsigned int v4 = 1543;
        goto LABEL_56;
      }
    }
    else
    {
      switch(mChannelLayoutTag)
      {
        case 7929862:
          unsigned int v4 = 1551;
          goto LABEL_56;
        case 8585219:
          unsigned int v4 = 259;
          goto LABEL_56;
        case 8650756:
          unsigned int v4 = 1539;
          goto LABEL_56;
      }
    }
    goto LABEL_58;
  }
  if (mChannelLayoutTag > 6553600)
  {
    switch(mChannelLayoutTag)
    {
      case 6553601:
        unsigned int v4 = 4;
        goto LABEL_56;
      case 6619138:
        unsigned int v4 = 3;
        goto LABEL_56;
      case 7405571:
        unsigned int v4 = 7;
LABEL_56:
        uint64_t result = 0;
        *a2 = v4;
        return result;
    }
    goto LABEL_58;
  }
  if (mChannelLayoutTag)
  {
    if (mChannelLayoutTag == 0x10000)
    {
      AudioChannelBitmap mChannelBitmap = inSpecifier->mChannelBitmap;
      if ((mChannelBitmap & 0x630) == 0)
      {
        AudioChannelBitmap v6 = inSpecifier->mChannelBitmap;
LABEL_62:
        if (v6) {
          AudioChannelBitmap mChannelBitmap = v6;
        }
        goto LABEL_66;
      }
      if ((mChannelBitmap & 0x7C0) == 0)
      {
        AudioChannelBitmap v6 = (32 * mChannelBitmap) & 0x600 | mChannelBitmap & 0xFFFFFFCF;
        goto LABEL_62;
      }
LABEL_66:
      *a2 = mChannelBitmap;
      if (mChannelBitmap) {
        return 0;
      }
      else {
        return 560360820;
      }
    }
LABEL_58:
    UInt32 ioPropertyDataSize = 4;
    AudioChannelBitmap outPropertyData = 0;
    uint64_t result = AudioFormatGetProperty(0x626D7467u, 4u, inSpecifier, &ioPropertyDataSize, &outPropertyData);
    if (result) {
      return result;
    }
    AudioChannelBitmap mChannelBitmap = outPropertyData;
    goto LABEL_66;
  }
  uint64_t mNumberChannelDescriptions = inSpecifier->mNumberChannelDescriptions;
  if (!mNumberChannelDescriptions)
  {
    AudioChannelBitmap mChannelBitmap = 0;
    goto LABEL_66;
  }
  unsigned int v8 = 0;
  AudioChannelBitmap mChannelBitmap = 0;
  mChannelDescriptions = inSpecifier->mChannelDescriptions;
  while (1)
  {
    AudioChannelLabel mChannelLabel = mChannelDescriptions->mChannelLabel;
    ++mChannelDescriptions;
    uint64_t v11 = mChannelLabel - 1;
    if (v11 > 0x21) {
      return 560360820;
    }
    if (((0x30003F9FFuLL >> v11) & 1) == 0) {
      return 560360820;
    }
    unsigned int v12 = dword_1901C7108[v11];
    if (v12 <= v8) {
      return 560360820;
    }
    mChannelBitmap |= v12;
    unsigned int v8 = v12;
    if (!--mNumberChannelDescriptions) {
      goto LABEL_66;
    }
  }
}

uint64_t AudioFormatProperty_LayoutTagForWAVEChannelMask(int a1, unsigned int *a2)
{
  unsigned int v3 = a1;
  *a2 = 0;
  if ((a1 & 0x630) == 0) {
    goto LABEL_9;
  }
  if ((a1 & 0x1F0) == 0)
  {
    unsigned int v3 = (a1 >> 5) & 0x30 | a1 & 0xFFFFF9FF;
LABEL_9:
    uint64_t result = AudioFormatProperty_LayoutTagForBitmap(v3);
    if (result == 0x10000) {
      *a2 = v3;
    }
    return result;
  }
  if (a1 <= 62)
  {
    if (a1 == 51) {
      return 12124164;
    }
    if (a1 == 55) {
      return 12189701;
    }
  }
  else
  {
    switch(a1)
    {
      case 63:
        return 12255238;
      case 1599:
        return 12386312;
      case 1807:
        return 12320775;
    }
  }
  return 0;
}

uint64_t AudioFormatProperty_ChannelLayoutSizeForWAVEChannelMask(int a1, unsigned int a2, int8x8_t a3)
{
  int v3 = a1 & 0x3FFFF;
  a3.i32[0] = v3;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(a3);
  v4.i16[0] = vaddlv_u8(v4);
  unsigned int v5 = v4.i32[0];
  if (a2) {
    unsigned int v6 = a2;
  }
  else {
    unsigned int v6 = v4.i32[0];
  }
  if (v4.i32[0] <= v6)
  {
    if (v4.i32[0] != v6) {
      return 20 * v6 + 12;
    }
  }
  else
  {
    do
    {
      v3 &= ~(0x80000000 >> __clz(v3));
      --v5;
    }
    while (v5 > v6);
  }
  if (AudioFormatProperty_LayoutTagForWAVEChannelMask(v3, &v8)) {
    return 32;
  }
  return 20 * v6 + 12;
}

void AudioFormatProperty_ChannelLayoutForWAVEChannelMask(int a1, unsigned int a2, AudioChannelLayout *a3, int8x8_t a4)
{
  int v5 = a1 & 0x3FFFF;
  a4.i32[0] = a1 & 0x3FFFF;
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(a4);
  v6.i16[0] = vaddlv_u8(v6);
  unsigned int v7 = v6.i32[0];
  if (a2) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = v6.u32[0];
  }
  if (v6.i32[0] <= v8)
  {
    unsigned int v10 = v6.i32[0];
    if (v6.i32[0] != v8) {
      goto LABEL_11;
    }
  }
  else
  {
    unsigned int v9 = v6.i32[0];
    do
    {
      v5 &= ~(0x80000000 >> __clz(v5));
      --v9;
    }
    while (v9 > v8);
    unsigned int v10 = v8;
  }
  unsigned int v34 = 0;
  AudioChannelLayoutTag v11 = AudioFormatProperty_LayoutTagForWAVEChannelMask(v5, &v34);
  if (v11)
  {
    unsigned int v12 = v34;
    a3->signed int mChannelLayoutTag = v11;
    *(void *)&a3->AudioChannelBitmap mChannelBitmap = v12;
    return;
  }
LABEL_11:
  *(void *)&a3->signed int mChannelLayoutTag = 0;
  a3->uint64_t mNumberChannelDescriptions = v8;
  mChannelDescriptions = a3->mChannelDescriptions;
  bzero(a3->mChannelDescriptions, 20 * v8);
  unsigned int v14 = 0;
  if (v5)
  {
    unsigned int v14 = 1;
    mChannelDescriptions->AudioChannelLabel mChannelLabel = 1;
    if ((v5 & 2) == 0)
    {
LABEL_13:
      if ((v5 & 4) == 0) {
        goto LABEL_14;
      }
      goto LABEL_41;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_13;
  }
  uint64_t v18 = v14++;
  mChannelDescriptions[v18].AudioChannelLabel mChannelLabel = 2;
  if ((v5 & 4) == 0)
  {
LABEL_14:
    if ((v5 & 8) == 0) {
      goto LABEL_15;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t v19 = v14++;
  mChannelDescriptions[v19].AudioChannelLabel mChannelLabel = 3;
  if ((v5 & 8) == 0)
  {
LABEL_15:
    if ((v5 & 0x10) == 0) {
      goto LABEL_16;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t v20 = v14++;
  mChannelDescriptions[v20].AudioChannelLabel mChannelLabel = 4;
  if ((v5 & 0x10) == 0)
  {
LABEL_16:
    if ((v5 & 0x20) == 0) {
      goto LABEL_17;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t v21 = v14++;
  mChannelDescriptions[v21].AudioChannelLabel mChannelLabel = 33;
  if ((v5 & 0x20) == 0)
  {
LABEL_17:
    if ((v5 & 0x40) == 0) {
      goto LABEL_18;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t v22 = v14++;
  mChannelDescriptions[v22].AudioChannelLabel mChannelLabel = 34;
  if ((v5 & 0x40) == 0)
  {
LABEL_18:
    if ((v5 & 0x80) == 0) {
      goto LABEL_19;
    }
    goto LABEL_46;
  }
LABEL_45:
  uint64_t v23 = v14++;
  mChannelDescriptions[v23].AudioChannelLabel mChannelLabel = 7;
  if ((v5 & 0x80) == 0)
  {
LABEL_19:
    if ((v5 & 0x100) == 0) {
      goto LABEL_20;
    }
    goto LABEL_47;
  }
LABEL_46:
  uint64_t v24 = v14++;
  mChannelDescriptions[v24].AudioChannelLabel mChannelLabel = 8;
  if ((v5 & 0x100) == 0)
  {
LABEL_20:
    if ((v5 & 0x200) == 0) {
      goto LABEL_21;
    }
    goto LABEL_48;
  }
LABEL_47:
  uint64_t v25 = v14++;
  mChannelDescriptions[v25].AudioChannelLabel mChannelLabel = 9;
  if ((v5 & 0x200) == 0)
  {
LABEL_21:
    if ((v5 & 0x400) == 0) {
      goto LABEL_22;
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t v26 = v14++;
  mChannelDescriptions[v26].AudioChannelLabel mChannelLabel = 5;
  if ((v5 & 0x400) == 0)
  {
LABEL_22:
    if ((v5 & 0x800) == 0) {
      goto LABEL_23;
    }
    goto LABEL_50;
  }
LABEL_49:
  uint64_t v27 = v14++;
  mChannelDescriptions[v27].AudioChannelLabel mChannelLabel = 6;
  if ((v5 & 0x800) == 0)
  {
LABEL_23:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_51;
  }
LABEL_50:
  uint64_t v28 = v14++;
  mChannelDescriptions[v28].AudioChannelLabel mChannelLabel = 12;
  if ((v5 & 0x1000) == 0)
  {
LABEL_24:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_52;
  }
LABEL_51:
  uint64_t v29 = v14++;
  mChannelDescriptions[v29].AudioChannelLabel mChannelLabel = 13;
  if ((v5 & 0x2000) == 0)
  {
LABEL_25:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t v30 = v14++;
  mChannelDescriptions[v30].AudioChannelLabel mChannelLabel = 14;
  if ((v5 & 0x4000) == 0)
  {
LABEL_26:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_54;
  }
LABEL_53:
  uint64_t v31 = v14++;
  mChannelDescriptions[v31].AudioChannelLabel mChannelLabel = 15;
  if ((v5 & 0x8000) == 0)
  {
LABEL_27:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_28;
    }
LABEL_55:
    uint64_t v33 = v14++;
    mChannelDescriptions[v33].AudioChannelLabel mChannelLabel = 17;
    if ((v5 & 0x20000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
LABEL_54:
  uint64_t v32 = v14++;
  mChannelDescriptions[v32].AudioChannelLabel mChannelLabel = 16;
  if ((v5 & 0x10000) != 0) {
    goto LABEL_55;
  }
LABEL_28:
  if ((v5 & 0x20000) != 0) {
LABEL_29:
  }
    mChannelDescriptions[v14].AudioChannelLabel mChannelLabel = 18;
LABEL_30:
  if (v10 < v8)
  {
    if (v8 >= v7) {
      unsigned int v15 = v7;
    }
    else {
      unsigned int v15 = v8;
    }
    int v16 = v8 - v10;
    uint64_t v17 = &a3->mChannelDescriptions[v15];
    do
    {
      v17->AudioChannelLabel mChannelLabel = 0;
      ++v17;
      --v16;
    }
    while (v16);
  }
  if (v8)
  {
    do
    {
      SetDefaultChannelPosition((uint64_t)mChannelDescriptions++);
      --v8;
    }
    while (v8);
  }
}

int *AudioFormat_IsAmbisonicChannelLayout(int *result)
{
  if (result)
  {
    int v1 = *result;
    if (*result && ((unsigned int v2 = v1 & 0xFFFF0000, (v1 & 0xFFFF0000) == 0x6B0000) || v2 == 12517376 || v2 == 12451840)) {
      return (int *)((unsigned __int16)*result != 0);
    }
    else {
      return 0;
    }
  }
  return result;
}

void AudioFormatProperty_ChannelLayoutForBitmap(__int32 a1, AudioChannelLayout *a2, int8x8_t a3)
{
  *(void *)&a2->signed int mChannelLayoutTag = 0;
  a3.i32[0] = a1;
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(a3);
  v5.i16[0] = vaddlv_u8(v5);
  uint64_t v6 = v5.u32[0];
  a2->uint64_t mNumberChannelDescriptions = v5.i32[0];
  mChannelDescriptions = a2->mChannelDescriptions;
  bzero(a2->mChannelDescriptions, (20 * v5.i32[0]));
  unsigned int v8 = 0;
  if (a1)
  {
    unsigned int v8 = 1;
    mChannelDescriptions->AudioChannelLabel mChannelLabel = 1;
    if ((a1 & 2) == 0)
    {
LABEL_3:
      if ((a1 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_36;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v13 = v8++;
  mChannelDescriptions[v13].AudioChannelLabel mChannelLabel = 2;
  if ((a1 & 4) == 0)
  {
LABEL_4:
    if ((a1 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t v14 = v8++;
  mChannelDescriptions[v14].AudioChannelLabel mChannelLabel = 3;
  if ((a1 & 8) == 0)
  {
LABEL_5:
    if ((a1 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t v15 = v8++;
  mChannelDescriptions[v15].AudioChannelLabel mChannelLabel = 4;
  if ((a1 & 0x10) == 0)
  {
LABEL_6:
    if ((a1 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_39;
  }
LABEL_38:
  uint64_t v16 = v8++;
  mChannelDescriptions[v16].AudioChannelLabel mChannelLabel = 5;
  if ((a1 & 0x20) == 0)
  {
LABEL_7:
    if ((a1 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t v17 = v8++;
  mChannelDescriptions[v17].AudioChannelLabel mChannelLabel = 6;
  if ((a1 & 0x40) == 0)
  {
LABEL_8:
    if ((a1 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t v18 = v8++;
  mChannelDescriptions[v18].AudioChannelLabel mChannelLabel = 7;
  if ((a1 & 0x80) == 0)
  {
LABEL_9:
    if ((a1 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t v19 = v8++;
  mChannelDescriptions[v19].AudioChannelLabel mChannelLabel = 8;
  if ((a1 & 0x100) == 0)
  {
LABEL_10:
    if ((a1 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t v20 = v8++;
  mChannelDescriptions[v20].AudioChannelLabel mChannelLabel = 9;
  if ((a1 & 0x200) == 0)
  {
LABEL_11:
    if ((a1 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t v21 = v8++;
  mChannelDescriptions[v21].AudioChannelLabel mChannelLabel = 10;
  if ((a1 & 0x400) == 0)
  {
LABEL_12:
    if ((a1 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t v22 = v8++;
  mChannelDescriptions[v22].AudioChannelLabel mChannelLabel = 11;
  if ((a1 & 0x800) == 0)
  {
LABEL_13:
    if ((a1 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_46;
  }
LABEL_45:
  uint64_t v23 = v8++;
  mChannelDescriptions[v23].AudioChannelLabel mChannelLabel = 12;
  if ((a1 & 0x1000) == 0)
  {
LABEL_14:
    if ((a1 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_47;
  }
LABEL_46:
  uint64_t v24 = v8++;
  mChannelDescriptions[v24].AudioChannelLabel mChannelLabel = 13;
  if ((a1 & 0x2000) == 0)
  {
LABEL_15:
    if ((a1 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_48;
  }
LABEL_47:
  uint64_t v25 = v8++;
  mChannelDescriptions[v25].AudioChannelLabel mChannelLabel = 14;
  if ((a1 & 0x4000) == 0)
  {
LABEL_16:
    if ((a1 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t v26 = v8++;
  mChannelDescriptions[v26].AudioChannelLabel mChannelLabel = 15;
  if ((a1 & 0x8000) == 0)
  {
LABEL_17:
    if ((a1 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_50;
  }
LABEL_49:
  uint64_t v27 = v8++;
  mChannelDescriptions[v27].AudioChannelLabel mChannelLabel = 16;
  if ((a1 & 0x10000) == 0)
  {
LABEL_18:
    if ((a1 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_51;
  }
LABEL_50:
  uint64_t v28 = v8++;
  mChannelDescriptions[v28].AudioChannelLabel mChannelLabel = 17;
  if ((a1 & 0x20000) == 0)
  {
LABEL_19:
    if ((a1 & 0x200000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_52;
  }
LABEL_51:
  uint64_t v29 = v8++;
  mChannelDescriptions[v29].AudioChannelLabel mChannelLabel = 18;
  if ((a1 & 0x200000) == 0)
  {
LABEL_20:
    if ((a1 & 0x800000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t v30 = v8++;
  mChannelDescriptions[v30].AudioChannelLabel mChannelLabel = 49;
  if ((a1 & 0x800000) == 0)
  {
LABEL_21:
    if ((a1 & 0x1000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_54;
  }
LABEL_53:
  uint64_t v31 = v8++;
  mChannelDescriptions[v31].AudioChannelLabel mChannelLabel = 51;
  if ((a1 & 0x1000000) == 0)
  {
LABEL_22:
    if ((a1 & 0x2000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_55;
  }
LABEL_54:
  uint64_t v32 = v8++;
  mChannelDescriptions[v32].AudioChannelLabel mChannelLabel = 52;
  if ((a1 & 0x2000000) == 0)
  {
LABEL_23:
    if ((a1 & 0x4000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
LABEL_55:
  uint64_t v33 = v8++;
  mChannelDescriptions[v33].AudioChannelLabel mChannelLabel = 53;
  if ((a1 & 0x4000000) != 0)
  {
LABEL_24:
    uint64_t v9 = v8++;
    mChannelDescriptions[v9].AudioChannelLabel mChannelLabel = 54;
  }
LABEL_25:
  if (v8 < v6)
  {
    unsigned int v10 = &a2->mChannelDescriptions[v8];
    uint64_t v11 = v6 - v8;
    do
    {
      v10->AudioChannelLabel mChannelLabel = -1;
      ++v10;
      --v11;
    }
    while (v11);
  }
  if (a1)
  {
    if (v6 <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = v6;
    }
    do
    {
      SetDefaultChannelPosition((uint64_t)mChannelDescriptions++);
      --v12;
    }
    while (v12);
  }
}

uint64_t AudioFormat_AreChannelLayoutsEquivalent(const AudioChannelLayout *a1, const AudioChannelLayout *a2, unsigned int *a3)
{
  *a3 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t FullChannelLayout = AudioFormat_GetFullChannelLayout(a1, &v17);
  if (FullChannelLayout)
  {
    uint64_t v6 = FullChannelLayout;
    unsigned int v7 = 0;
    unsigned int v8 = v17;
  }
  else
  {
    uint64_t v6 = AudioFormat_GetFullChannelLayout(a2, &v16);
    unsigned int v7 = v16;
    unsigned int v8 = v17;
    if (!v6)
    {
      uint64_t mNumberChannelDescriptions = v17->mNumberChannelDescriptions;
      if (mNumberChannelDescriptions == v16->mNumberChannelDescriptions)
      {
        if (mNumberChannelDescriptions)
        {
          unint64_t v10 = 0;
          uint64_t v11 = 20 * mNumberChannelDescriptions;
          while (1)
          {
            AudioChannelLabel mChannelLabel = v17->mChannelDescriptions[v10 / 0x14].mChannelLabel;
            if (mChannelLabel != v16->mChannelDescriptions[v10 / 0x14].mChannelLabel
              || mChannelLabel == 100
              && (v17->mChannelDescriptions[v10 / 0x14].mChannelFlags != v16->mChannelDescriptions[v10 / 0x14].mChannelFlags
               || v17->mChannelDescriptions[v10 / 0x14].mCoordinates[0] != v16->mChannelDescriptions[v10 / 0x14].mCoordinates[0]
               || v17->mChannelDescriptions[v10 / 0x14].mCoordinates[1] != v16->mChannelDescriptions[v10 / 0x14].mCoordinates[1]
               || v17->mChannelDescriptions[v10 / 0x14].mCoordinates[2] != v16->mChannelDescriptions[v10 / 0x14].mCoordinates[2]))
            {
              break;
            }
            v10 += 20;
            if (v11 == v10) {
              goto LABEL_14;
            }
          }
        }
        else
        {
LABEL_14:
          int v13 = HIWORD(v17->mChannelLayoutTag) << 16;
          int v14 = HIWORD(v16->mChannelLayoutTag) << 16;
          if ((v13 != 12451840 || v14 != 12517376) && (v13 != 12517376 || v14 != 12451840))
          {
            uint64_t v6 = 0;
            *a3 = 1;
            goto LABEL_19;
          }
        }
      }
      uint64_t v6 = 0;
    }
  }
LABEL_19:
  free(v8);
  free(v7);
  return v6;
}

uint64_t AudioFormat_GetFullChannelLayout(const AudioChannelLayout *a1, AudioChannelLayout **a2)
{
  unsigned int v10 = 0;
  uint64_t v4 = AudioFormatProperty_NumberOfChannelsForLayout(a1, &v10);
  if (!v4)
  {
    size_t v5 = 20 * v10 + 12;
    uint64_t v6 = (AudioChannelLayout *)malloc_type_malloc(v5, 0xEB85F60AuLL);
    *a2 = v6;
    AudioChannelLayoutTag mChannelLayoutTag = a1->mChannelLayoutTag;
    if (a1->mChannelLayoutTag == 0x10000)
    {
      AudioFormatProperty_ChannelLayoutForBitmap(a1->mChannelBitmap, v6, v7);
      return 0;
    }
    if (!mChannelLayoutTag)
    {
      memcpy(v6, a1, v5);
      return 0;
    }
    uint64_t v4 = AudioFormatProperty_ChannelLayoutForTag(mChannelLayoutTag, v6);
    if (v4)
    {
      free(*a2);
      *a2 = 0;
    }
  }
  return v4;
}

uint64_t AudioFormatProperty_HashForChannelLayout(const AudioChannelLayout *a1, unsigned int *a2)
{
  *a2 = 0;
  uint64_t v9 = 0;
  uint64_t FullChannelLayout = AudioFormat_GetFullChannelLayout(a1, &v9);
  uint64_t v4 = v9;
  if (!FullChannelLayout && v9->mNumberChannelDescriptions)
  {
    unint64_t v5 = 0;
    unsigned int v6 = *a2;
    int8x8_t v7 = &v9->mChannelDescriptions[0].mCoordinates[2];
    do
    {
      unsigned int v6 = v6 - *((_DWORD *)v7 - 4) + 8 * *((_DWORD *)v7 - 4);
      *a2 = v6;
      if (*((_DWORD *)v7 - 4) == 100)
      {
        unsigned int v6 = (float)((float)((float)((float)(*(v7 - 1) * 11.0) + (float)(*(v7 - 2) * 7.0))
                                         + (float)(*v7 * 13.0))
                                 + (float)v6);
        *a2 = v6;
      }
      ++v5;
      v7 += 5;
    }
    while (v5 < v4->mNumberChannelDescriptions);
  }
  free(v4);
  return FullChannelLayout;
}

uint64_t AudioFormatProperty_SpeakerHemispheresForChannelLayout(const AudioChannelLayout *this, const AudioChannelLayout *a2)
{
  AudioChannelLayoutTag mChannelLayoutTag = this->mChannelLayoutTag;
  if (this->mChannelLayoutTag)
  {
    uint64_t v4 = (CAAudioChannelLayout *)CAAudioChannelLayout::NumberChannels((CAAudioChannelLayout *)this, a2);
    unint64_t v5 = (AudioChannelLayout *)CAAudioChannelLayout::Create(v4);
    if (this->mChannelLayoutTag == 0x10000) {
      AudioFormatProperty_ChannelLayoutForBitmap(this->mChannelBitmap, v5, v6);
    }
    else {
      AudioFormatProperty_ChannelLayoutForTag(this->mChannelLayoutTag, v5);
    }
  }
  else
  {
    unint64_t v5 = (AudioChannelLayout *)this;
  }
  if (v5->mNumberChannelDescriptions)
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    mChannelDescriptions = v5->mChannelDescriptions;
    AudioChannelLayoutTag v10 = v5->mChannelLayoutTag;
    while (1)
    {
      long long v11 = *(_OWORD *)&mChannelDescriptions->mChannelLabel;
      float v22 = mChannelDescriptions->mCoordinates[2];
      long long v21 = v11;
      if (!v10) {
        SetDefaultChannelPosition((uint64_t)&v21);
      }
      if (BYTE4(v21)) {
        break;
      }
      if ((BYTE4(v21) & 2) != 0)
      {
        unsigned int v12 = v8 | 2;
        if (*((float *)&v21 + 2) <= 0.0) {
          unsigned int v12 = v8;
        }
        if (*((float *)&v21 + 2) < 0.0) {
          unsigned int v12 = v8 | 1;
        }
        float v13 = fabsf(*((float *)&v21 + 2));
        unsigned int v14 = v12 | 8;
        if (v13 >= 90.0) {
          unsigned int v14 = v12;
        }
        unsigned int v15 = v12 | 4;
        if (v13 > 90.0) {
          uint64_t v8 = v15;
        }
        else {
          uint64_t v8 = v14;
        }
        BOOL v16 = *((float *)&v21 + 3) <= 0.0;
        if (*((float *)&v21 + 3) >= 0.0) {
          goto LABEL_22;
        }
LABEL_34:
        uint64_t v8 = v8 | 0x10;
      }
LABEL_35:
      ++v7;
      ++mChannelDescriptions;
      if (v7 >= v5->mNumberChannelDescriptions)
      {
        if (mChannelLayoutTag) {
          goto LABEL_37;
        }
        return v8;
      }
    }
    unsigned int v17 = v8 | 2;
    if (*((float *)&v21 + 2) <= 0.0) {
      unsigned int v17 = v8;
    }
    if (*((float *)&v21 + 2) < 0.0) {
      unsigned int v17 = v8 | 1;
    }
    unsigned int v18 = v17 | 8;
    if (*((float *)&v21 + 3) <= 0.0) {
      unsigned int v18 = v17;
    }
    unsigned int v19 = v17 | 4;
    if (*((float *)&v21 + 3) < 0.0) {
      uint64_t v8 = v19;
    }
    else {
      uint64_t v8 = v18;
    }
    BOOL v16 = v22 <= 0.0;
    if (v22 >= 0.0)
    {
LABEL_22:
      if (!v16) {
        uint64_t v8 = v8 | 0x20;
      }
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  uint64_t v8 = 0;
  if (mChannelLayoutTag) {
LABEL_37:
  }
    MEMORY[0x192FC7C50](v5);
  return v8;
}

void AudioFormat_CompleteChannelLayoutWithCoordinates(const CA::ChannelLayout *a1@<X0>, void *a2@<X8>)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD **)a1;
  if (**(_DWORD **)a1 || v3[2] <= 1u)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    uint64_t v4 = *((void *)a1 + 1);
    size_t v5 = v4 - (void)v3;
LABEL_4:
    std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(a2, v3, v4, v5);
    return;
  }
  uint64_t v4 = *((void *)a1 + 1);
  size_t v5 = v4 - (void)v3;
  if (v4 - (void)v3 != 12)
  {
    int8x8_t v6 = v3 + 3;
    unint64_t v7 = v3 + 5;
    while (1)
    {
      uint64_t v8 = 0;
      do
        float v9 = fabsf(*(float *)&v7[v8]);
      while (v9 < 0.00000011921 && v8++ != 2);
      if (v9 >= 0.00000011921) {
        break;
      }
      v6 += 5;
      v7 += 5;
      if (v6 == (_DWORD *)v4) {
        goto LABEL_17;
      }
    }
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    goto LABEL_4;
  }
LABEL_17:
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(a2, v3, v4, v5);
  uint64_t v11 = *a2;
  unint64_t v12 = *(unsigned int *)(*a2 + 8);
  unint64_t v13 = (a2[1] - *a2 - 12) / 0x14uLL;
  if (v13 < v12) {
LABEL_22:
  }
    __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
  uint64_t v14 = v11 + 20;
  uint64_t v15 = -1;
  while (++v15 < v12)
  {
    int inSpecifier = *(_DWORD *)(v14 - 8);
    UInt32 ioPropertyDataSize = 20;
    OSStatus Property = AudioFormatGetProperty(0x6473636Cu, 4u, &inSpecifier, &ioPropertyDataSize, outPropertyData);
    if (Property)
    {
      unsigned int v18 = CADefaultLog();
      if (v18)
      {
        unsigned int v19 = v18;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::__split_buffer<std::string> buf = 136315906;
          uint64_t v27 = "AudioFormatChannelLayouts.cpp";
          __int16 v28 = 1024;
          int v29 = 2832;
          __int16 v30 = 1024;
          int v31 = inSpecifier;
          __int16 v32 = 1024;
          OSStatus v33 = Property;
          _os_log_impl(&dword_18FEC0000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to get default coordinates for %u err: %d", buf, 0x1Eu);
        }
      }
      return;
    }
    *(_DWORD *)(v14 - 4) = v22;
    uint64_t v17 = v23;
    *(_DWORD *)(v14 + 8) = v24;
    *(void *)uint64_t v14 = v17;
    v14 += 20;
    unint64_t v12 = *(unsigned int *)(v11 + 8);
    if (v13 < v12) {
      goto LABEL_22;
    }
  }
}

void sub_18FF961A8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t MP4BoxParser::GetBoxHeaderSize(MP4BoxParser *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t MP4BoxParser_FileType::Init(MP4BoxParser_FileType *this)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = MP4BoxParser::Initialize(this);
  if (!v2)
  {
    if (*((_DWORD *)this + 5) != 1718909296) {
      return 4294967294;
    }
    if ((unint64_t)(*((void *)this + 3) - 129) < 0xFFFFFFFFFFFFFF93) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v18 = 0;
    unsigned int v4 = (*(uint64_t (**)(MP4BoxParser_FileType *))(*(void *)this + 24))(this);
    uint64_t v5 = MP4BoxParser::ReadDataSourceBytes(*((MP4BoxParser **)this + 1), v4, 8uLL, &v19);
    *((int8x8_t *)this + 7) = vrev32_s8(v19);
    unint64_t v6 = *((void *)this + 3) + 0x3FFFFFFF0;
    *((_DWORD *)this + 16) = v6 >> 2;
    if (!(v6 >> 2)) {
      return v5;
    }
    uint64_t DataSourceSize = MP4BoxParser::GetDataSourceSize(*((MP4BoxParser **)this + 1), &v18);
    if (DataSourceSize)
    {
      uint64_t v2 = DataSourceSize;
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        return v2;
      }
      *(_DWORD *)std::__split_buffer<std::string> buf = 136315394;
      long long v21 = "MP4_BoxParser_FileType.cpp";
      __int16 v22 = 1024;
      int v23 = 99;
      uint64_t v8 = MEMORY[0x1E4F14500];
      float v9 = "%25s:%-5d  unable to determine data source size";
LABEL_11:
      _os_log_impl(&dword_18FEC0000, v8, OS_LOG_TYPE_ERROR, v9, buf, 0x12u);
      return v2;
    }
    int v10 = (*(uint64_t (**)(MP4BoxParser_FileType *))(*(void *)this + 24))(this);
    if (v18 < (int64_t)(v10 + (v6 & 0xFFFFFFFC)) || *((_DWORD *)this + 16) > 0x14u) {
      return 0xFFFFFFFFLL;
    }
    if (!*((void *)this + 9))
    {
      uint64_t v11 = malloc_type_malloc(v6 & 0xFFFFFFFC, 0x7C51E058uLL);
      if ((v6 & 0xFFFFFFFC) != 0 && !v11)
      {
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        uint64_t v17 = std::bad_alloc::bad_alloc(exception);
      }
      *((void *)this + 9) = v11;
    }
    unsigned int v12 = (*(uint64_t (**)(MP4BoxParser_FileType *))(*(void *)this + 24))(this);
    uint64_t DataSourceBytes = MP4BoxParser::ReadDataSourceBytes(*((MP4BoxParser **)this + 1), v12 + 8, v6 & 0xFFFFFFFC, *((void **)this + 9));
    if (DataSourceBytes)
    {
      uint64_t v2 = DataSourceBytes;
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        return v2;
      }
      *(_DWORD *)std::__split_buffer<std::string> buf = 136315394;
      long long v21 = "MP4_BoxParser_FileType.cpp";
      __int16 v22 = 1024;
      int v23 = 107;
      uint64_t v8 = MEMORY[0x1E4F14500];
      float v9 = "%25s:%-5d  unable to read compatible brand identifiers";
      goto LABEL_11;
    }
    if (*((_DWORD *)this + 16))
    {
      unint64_t v14 = 0;
      uint64_t v15 = *((void *)this + 9);
      do
      {
        uint64_t v2 = 0;
        *(_DWORD *)(v15 + 4 * v14) = bswap32(*(_DWORD *)(v15 + 4 * v14));
        ++v14;
      }
      while (v14 < *((unsigned int *)this + 16));
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

void MP4BoxParser_FileType::~MP4BoxParser_FileType(MP4BoxParser_FileType *this)
{
  MP4BoxParser_FileType::~MP4BoxParser_FileType(this);
  JUMPOUT(0x192FC8940);
}

{
  void *v2;
  uint64_t v3;

  *(void *)this = &unk_1EDF93490;
  uint64_t v2 = (void *)*((void *)this + 9);
  if (v2) {
    free(v2);
  }
  int v3 = *((void *)this + 1);
  *(void *)this = &unk_1EDF8DA18;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
}

uint64_t MP4BoxParser_FileType::MP4BoxParser_FileType(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1EDF8DA18;
  (*(void (**)(uint64_t, void))(*(void *)a2 + 88))(a2, 0);
  *(unsigned char *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 2std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = 8;
  *(void *)a1 = &unk_1EDF93490;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  return a1;
}

void swix::connection_config::~connection_config(swix::connection_config *this)
{
  if (*((unsigned char *)this + 120)) {
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)this + 11);
  }
  uint64_t v2 = *((void *)this + 7);
  if (v2) {
    dispatch_release(v2);
  }
  xpc_release(*((xpc_object_t *)this + 6));
  *((void *)this + 6) = 0;
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

__n128 std::__function::__func<AudioConverterService::addRemoteClient(swix::connection_config const&,auoop::WorkgroupMirror &)::{lambda(void)#1},std::allocator<AudioConverterService::addRemoteClient(swix::connection_config const&,auoop::WorkgroupMirror &)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EDF8B468;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<AudioConverterService::addRemoteClient(swix::connection_config const&,auoop::WorkgroupMirror &)::{lambda(void)#1},std::allocator<AudioConverterService::addRemoteClient(swix::connection_config const&,auoop::WorkgroupMirror &)::{lambda(void)#1}>,void ()(void)>::~__func()
{
}

void swix::connection::configure_rebuilt_connection(swix::connection *this, const applesauce::xpc::connection *a2)
{
}

void XPCListener::~XPCListener(XPCListener *this)
{
  swix::connection::~connection(this);
  JUMPOUT(0x192FC8940);
}

uint64_t *std::unique_ptr<auoop::WorkgroupMirror>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *result;
  *__n128 result = 0;
  if (v1)
  {
    caulk::concurrent::guarded_lookup_hash_table<unsigned long,caulk::mach::os_workgroup_managed,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long)>>::~guarded_lookup_hash_table(v1 + 8);
    JUMPOUT(0x192FC8940);
  }
  return result;
}

void std::vector<std::unique_ptr<RemoteAudioConverter>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (RemoteAudioConverter **)**a1;
  if (v2)
  {
    unsigned int v4 = (RemoteAudioConverter **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<RemoteAudioConverter>::reset[abi:ne180100](--v4, 0);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__optional_destruct_base<applesauce::xpc::endpoint,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    xpc_release(*(xpc_object_t *)a1);
    *(void *)a1 = 0;
  }
  return a1;
}

uint64_t caulk::concurrent::guarded_lookup_hash_table<unsigned long,caulk::mach::os_workgroup_managed,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long)>>::~guarded_lookup_hash_table(uint64_t a1)
{
  if (atomic_load((unsigned int *)(a1 + 48)))
  {
    _os_assert_log();
    uint64_t result = _os_crash();
    __break(1u);
  }
  else
  {
    uint64_t v3 = atomic_load((unint64_t *)(a1 + 40));
    if (v3)
    {
      uint64_t v4 = caulk::concurrent::guarded_lookup_hash_table<unsigned long,caulk::mach::os_workgroup_managed,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long)>>::table_impl::~table_impl(v3);
      MEMORY[0x192FC8940](v4, 0x1060C402CF69088);
    }
    std::mutex::~mutex((std::mutex *)(a1 + 80));
    uint64_t v5 = *(uint64_t **)(a1 + 56);
    if (v5)
    {
      unint64_t v6 = *(uint64_t **)(a1 + 64);
      unint64_t v7 = *(void **)(a1 + 56);
      if (v6 != v5)
      {
        do
          std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<unsigned long,caulk::mach::os_workgroup_managed,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long)>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<unsigned long,caulk::mach::os_workgroup_managed,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long)>>::table_impl>>::reset[abi:ne180100](--v6);
        while (v6 != v5);
        unint64_t v7 = *(void **)(a1 + 56);
      }
      *(void *)(a1 + 64) = v5;
      operator delete(v7);
    }
    uint64_t v8 = *(void *)(a1 + 24);
    if (v8 == a1)
    {
      (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    }
    else if (v8)
    {
      (*(void (**)(uint64_t))(*(void *)v8 + 40))(v8);
    }
    return a1;
  }
  return result;
}

uint64_t caulk::concurrent::guarded_lookup_hash_table<unsigned long,caulk::mach::os_workgroup_managed,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long)>>::table_impl::~table_impl(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (unsigned int **)(a1 + 16);
    do
    {
      if ((unint64_t)*v3 + 1 >= 2) {
        caulk::concurrent::guarded_lookup_hash_table<unsigned long,caulk::mach::os_workgroup_managed,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long)>>::element_t::release(*v3);
      }
      ++v3;
      --v2;
    }
    while (v2);
  }
  return a1;
}

uint64_t std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<unsigned long,caulk::mach::os_workgroup_managed,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long)>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<unsigned long,caulk::mach::os_workgroup_managed,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long)>>::table_impl>>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    caulk::concurrent::guarded_lookup_hash_table<unsigned long,caulk::mach::os_workgroup_managed,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long)>>::table_impl::~table_impl(result);
    JUMPOUT(0x192FC8940);
  }
  return result;
}

unsigned int *caulk::concurrent::guarded_lookup_hash_table<unsigned long,caulk::mach::os_workgroup_managed,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long)>>::element_t::release(unsigned int *result)
{
  if ((atomic_fetch_add((atomic_uint *volatile)result, 0xFFFF0000) & 0xFFFF0000) == 0x10000)
  {
    if (atomic_load(result))
    {
      _os_assert_log();
      _os_crash();
      __break(1u);
    }
    else
    {
      caulk::mach::os_workgroup_managed::~os_workgroup_managed((caulk::mach::os_workgroup_managed *)(result + 4));
    }
    JUMPOUT(0x192FC8940);
  }
  return result;
}

void caulk::synchronized<std::vector<std::unique_ptr<RemoteAudioConverter>>,std::recursive_mutex,caulk::empty_atomic_interface<std::vector<std::unique_ptr<RemoteAudioConverter>>>>::~synchronized(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 64);
  std::vector<std::unique_ptr<RemoteAudioConverter>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)a1);
}

void ___ZN21AudioConverterService27setupMemoryPressureWarningsEv_block_invoke(uint64_t a1)
{
  buffer[58] = *(rusage_info_t *)MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  pid_t v2 = getpid();
  int v3 = proc_pid_rusage(v2, 6, buffer);
  rusage_info_t v4 = buffer[9];
  AudioConverterLog();
  uint64_t v5 = AudioConverterLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    if (v3) {
      rusage_info_t v4 = 0;
    }
    std::recursive_mutex::lock((std::recursive_mutex *)(v1 + 56));
    uint64_t v6 = (*(void *)(v1 + 128) - *(void *)(v1 + 120)) >> 3;
    std::recursive_mutex::unlock((std::recursive_mutex *)(v1 + 56));
    int v7 = 136316162;
    uint64_t v8 = "AudioConverterService.cpp";
    __int16 v9 = 1024;
    int v10 = 110;
    __int16 v11 = 2048;
    uint64_t v12 = v1;
    __int16 v13 = 2048;
    rusage_info_t v14 = v4;
    __int16 v15 = 1024;
    int v16 = v6;
    _os_log_impl(&dword_18FEC0000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d AudioConverterService -> %p: Memory pressure 80%% of the critical level at %llu bytes. Current number of out-of-process converters: %u The service will shut down if the limit is exceeded.", (uint8_t *)&v7, 0x2Cu);
  }
}

uint64_t std::__function::__func<std::hash<unsigned long>,std::allocator<std::hash<unsigned long>>,unsigned int ()(unsigned long)>::operator()(uint64_t a1, unsigned int *a2)
{
  return *a2;
}

void std::__function::__func<std::hash<unsigned long>,std::allocator<std::hash<unsigned long>>,unsigned int ()(unsigned long)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9E3B0;
}

void *std::__function::__func<std::hash<unsigned long>,std::allocator<std::hash<unsigned long>>,unsigned int ()(unsigned long)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EDF9E3B0;
  return result;
}

void std::__function::__func<std::hash<unsigned long>,std::allocator<std::hash<unsigned long>>,unsigned int ()(unsigned long)>::~__func()
{
}

void applesauce::xpc::connection::~connection(xpc_object_t *this)
{
  *this = 0;
}

void ___Z33AudioConverterServiceRunInProcessv_block_invoke(uint64_t a1, uint64_t a2, dispatch_queue_s *a3)
{
  object[18] = *(xpc_object_t *)MEMORY[0x1E4F143B8];
  applesauce::xpc::connection::create((applesauce::xpc::connection *)object, 0, a3);
  operator new();
}

void sub_18FF97000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void std::valarray<float>::resize(uint64_t a1, uint64_t a2)
{
  rusage_info_t v4 = *(unsigned char **)a1;
  if (v4)
  {
    uint64_t v5 = *(unsigned char **)(a1 + 8);
    if (v5 != v4) {
      *(void *)(a1 + 8) = &v5[(v4 - v5 + 3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
  }
  if (a2)
  {
    uint64_t v6 = operator new(4 * a2);
    *(void *)a1 = v6;
    do
    {
      *v6++ = 0;
      --a2;
    }
    while (a2);
    *(void *)(a1 + 8) = v6;
  }
}

float TruePeakAnalyzer::PeakValue(TruePeakAnalyzer *this)
{
  float v1 = *((float *)this + 10);
  uint64_t v3 = *(void *)this;
  uint64_t v2 = *((void *)this + 1);
  if (v2 != *(void *)this)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      unint64_t v7 = (v2 - v3) >> 7;
      if (v7 >= v5 >> 32)
      {
        TruePeak::GetStats();
        float v8 = v10;
        uint64_t v3 = *(void *)this;
        uint64_t v2 = *((void *)this + 1);
        unint64_t v7 = (v2 - *(void *)this) >> 7;
      }
      else
      {
        float v8 = *((float *)this + 10);
      }
      if (v8 > v1) {
        float v1 = v8;
      }
      ++v6;
      v5 += 0x100000000;
    }
    while (v6 < v7);
  }
  return v1;
}

float TruePeakAnalyzer::SamplePeakValue(TruePeakAnalyzer *this)
{
  float v1 = (float *)((char *)this + 44);
  float v2 = *((float *)this + 11);
  uint64_t v4 = *(void *)this;
  uint64_t v3 = *((void *)this + 1);
  if (v3 != *(void *)this)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    unint64_t v8 = (v3 - *(void *)this) >> 7;
    do
    {
      if (v8 >= v6 >> 32)
      {
        __int16 v9 = (float *)&v11;
        TruePeak::GetStats();
        uint64_t v4 = *(void *)this;
        uint64_t v3 = *((void *)this + 1);
      }
      else
      {
        __int16 v9 = v1;
      }
      if (*v9 > v2) {
        float v2 = *v9;
      }
      ++v7;
      unint64_t v8 = (v3 - v4) >> 7;
      v6 += 0x100000000;
    }
    while (v7 < v8);
  }
  return v2;
}

void sub_18FF97444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18FF97B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  MEMORY[0x192FC7A90](va);
  _Unwind_Resume(a1);
}

void AddApp(InterAppAudioAppInfo *a1, float a2, NSMutableArray *a3)
{
  uint64_t v6 = [InterAppAudioApp alloc];
  *(float *)&double v7 = a2;
  id v8 = [(InterAppAudioApp *)v6 init:a1 iconSize:v7];
  [(NSMutableArray *)a3 addObject:v8];

  var2 = a1->var2;
  if (var2)
  {
    CFRelease(var2);
    a1->var2 = 0;
  }
  var3 = a1->var3;
  if (var3)
  {
    CFRelease(var3);
    a1->var3 = 0;
  }
  var4 = a1->var4;
  if (var4)
  {
    CFRelease(var4);
    a1->var4 = 0;
  }
  var5 = a1->var5;
  if (var5)
  {
    CFRelease(var5);
    a1->var5 = 0;
  }
}

void DSPGraph::Profiler::Profiler(uint64_t a1, void *a2)
{
}

{
  uint64_t v2;
  uint64_t v3;

  uint64_t v3 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = *a2;
  float v2 = a2[1];
  *(void *)(a1 + 8) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  operator new();
}

{
  DSPGraph::Profiler::Profiler(a1, a2);
}

void sub_18FF9834C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<void ()(DSPGraph::Graph *,unsigned int)>::~__value_func[abi:ne180100](va);
  uint64_t v9 = *(void *)(v6 + 8);
  *(void *)(v6 + 8) = 0;
  if (v9) {
    MEMORY[0x192FC8930](v9, 64);
  }
  MEMORY[0x192FC8940](v6, 0x1020C4062D53EE8);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>>>>::~__hash_table(v5);
  std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Graph>>::reset[abi:ne180100](v7, 0);
  float v10 = *(std::__shared_weak_count **)(v4 + 8);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Graph>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    DSPGraph::Graph::removeRenderCallback(*(DSPGraph::Graph **)v2, *(_DWORD *)(v2 + 20));
    DSPGraph::Graph::removeRenderCallback(*(DSPGraph::Graph **)v2, *(_DWORD *)(v2 + 16));
    uint64_t v3 = *(void *)(v2 + 8);
    *(void *)(v2 + 8) = 0;
    if (v3) {
      MEMORY[0x192FC8930](v3, 64);
    }
    JUMPOUT(0x192FC8940);
  }
  return result;
}

uint64_t *std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    DSPGraph::Box::removeRenderCallback(*(DSPGraph::Box **)v2, *(_DWORD *)(v2 + 20));
    DSPGraph::Box::removeRenderCallback(*(DSPGraph::Box **)v2, *(_DWORD *)(v2 + 16));
    uint64_t v3 = *(void *)(v2 + 8);
    *(void *)(v2 + 8) = 0;
    if (v3) {
      MEMORY[0x192FC8930](v3, 64);
    }
    JUMPOUT(0x192FC8940);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>>>>::__deallocate_node(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>>>>::__deallocate_node(void *a1)
{
  if (a1)
  {
    float v1 = a1;
    do
    {
      uint64_t v2 = (void *)*v1;
      std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>::reset[abi:ne180100](v1 + 3, 0);
      operator delete(v1);
      float v1 = v2;
    }
    while (v2);
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>>,void *>>>::operator()[abi:ne180100](char a1, uint64_t *__p)
{
  if (a1) {
    std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>::reset[abi:ne180100](__p + 3, 0);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

void *std::__function::__value_func<void ()(DSPGraph::Box *,unsigned int)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__func<DSPGraph::Profiler::TMetrics<DSPGraph::Box>::TMetrics(DSPGraph::Box*,double)::{lambda(DSPGraph::Box*,unsigned int)#2},std::allocator<DSPGraph::Profiler::TMetrics<DSPGraph::Box>::TMetrics(DSPGraph::Box*,double)::{lambda(DSPGraph::Box*,unsigned int)#2}>,void ()(DSPGraph::Box*,unsigned int)>::operator()(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  return DSPGraph::Metrics::stop(*(atomic_uint **)(a1 + 8), *a3);
}

uint64_t std::__function::__func<DSPGraph::Profiler::TMetrics<DSPGraph::Box>::TMetrics(DSPGraph::Box*,double)::{lambda(DSPGraph::Box*,unsigned int)#2},std::allocator<DSPGraph::Profiler::TMetrics<DSPGraph::Box>::TMetrics(DSPGraph::Box*,double)::{lambda(DSPGraph::Box*,unsigned int)#2}>,void ()(DSPGraph::Box*,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EDFA1F50;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<DSPGraph::Profiler::TMetrics<DSPGraph::Box>::TMetrics(DSPGraph::Box*,double)::{lambda(DSPGraph::Box*,unsigned int)#2},std::allocator<DSPGraph::Profiler::TMetrics<DSPGraph::Box>::TMetrics(DSPGraph::Box*,double)::{lambda(DSPGraph::Box*,unsigned int)#2}>,void ()(DSPGraph::Box*,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EDFA1F50;
  result[1] = v3;
  return result;
}

void std::__function::__func<DSPGraph::Profiler::TMetrics<DSPGraph::Box>::TMetrics(DSPGraph::Box*,double)::{lambda(DSPGraph::Box*,unsigned int)#2},std::allocator<DSPGraph::Profiler::TMetrics<DSPGraph::Box>::TMetrics(DSPGraph::Box*,double)::{lambda(DSPGraph::Box*,unsigned int)#2}>,void ()(DSPGraph::Box*,unsigned int)>::~__func()
{
}

double std::__function::__func<DSPGraph::Profiler::TMetrics<DSPGraph::Box>::TMetrics(DSPGraph::Box*,double)::{lambda(DSPGraph::Box*,unsigned int)#1},std::allocator<DSPGraph::Profiler::TMetrics<DSPGraph::Box>::TMetrics(DSPGraph::Box*,double)::{lambda(DSPGraph::Box*,unsigned int)#1}>,void ()(DSPGraph::Box*,unsigned int)>::operator()(uint64_t a1)
{
  *(void *)&double result = DSPGraph::Metrics::start((DSPGraph::Metrics *)*(void *)(a1 + 8)).u64[0];
  return result;
}

uint64_t std::__function::__func<DSPGraph::Profiler::TMetrics<DSPGraph::Box>::TMetrics(DSPGraph::Box*,double)::{lambda(DSPGraph::Box*,unsigned int)#1},std::allocator<DSPGraph::Profiler::TMetrics<DSPGraph::Box>::TMetrics(DSPGraph::Box*,double)::{lambda(DSPGraph::Box*,unsigned int)#1}>,void ()(DSPGraph::Box*,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EDFA1F98;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<DSPGraph::Profiler::TMetrics<DSPGraph::Box>::TMetrics(DSPGraph::Box*,double)::{lambda(DSPGraph::Box*,unsigned int)#1},std::allocator<DSPGraph::Profiler::TMetrics<DSPGraph::Box>::TMetrics(DSPGraph::Box*,double)::{lambda(DSPGraph::Box*,unsigned int)#1}>,void ()(DSPGraph::Box*,unsigned int)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_1EDFA1F98;
  result[1] = v3;
  return result;
}

void std::__function::__func<DSPGraph::Profiler::TMetrics<DSPGraph::Box>::TMetrics(DSPGraph::Box*,double)::{lambda(DSPGraph::Box*,unsigned int)#1},std::allocator<DSPGraph::Profiler::TMetrics<DSPGraph::Box>::TMetrics(DSPGraph::Box*,double)::{lambda(DSPGraph::Box*,unsigned int)#1}>,void ()(DSPGraph::Box*,unsigned int)>::~__func()
{
}

void *std::__function::__value_func<void ()(DSPGraph::Graph *,unsigned int)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__func<DSPGraph::Profiler::TMetrics<DSPGraph::Graph>::TMetrics(DSPGraph::Graph*,double)::{lambda(DSPGraph::Graph*,unsigned int)#2},std::allocator<DSPGraph::Profiler::TMetrics<DSPGraph::Graph>::TMetrics(DSPGraph::Graph*,double)::{lambda(DSPGraph::Graph*,unsigned int)#2}>,void ()(DSPGraph::Graph*,unsigned int)>::operator()(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  return DSPGraph::Metrics::stop(*(atomic_uint **)(a1 + 8), *a3);
}

uint64_t std::__function::__func<DSPGraph::Profiler::TMetrics<DSPGraph::Graph>::TMetrics(DSPGraph::Graph*,double)::{lambda(DSPGraph::Graph*,unsigned int)#2},std::allocator<DSPGraph::Profiler::TMetrics<DSPGraph::Graph>::TMetrics(DSPGraph::Graph*,double)::{lambda(DSPGraph::Graph*,unsigned int)#2}>,void ()(DSPGraph::Graph*,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EDFA1FE0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<DSPGraph::Profiler::TMetrics<DSPGraph::Graph>::TMetrics(DSPGraph::Graph*,double)::{lambda(DSPGraph::Graph*,unsigned int)#2},std::allocator<DSPGraph::Profiler::TMetrics<DSPGraph::Graph>::TMetrics(DSPGraph::Graph*,double)::{lambda(DSPGraph::Graph*,unsigned int)#2}>,void ()(DSPGraph::Graph*,unsigned int)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_1EDFA1FE0;
  result[1] = v3;
  return result;
}

void std::__function::__func<DSPGraph::Profiler::TMetrics<DSPGraph::Graph>::TMetrics(DSPGraph::Graph*,double)::{lambda(DSPGraph::Graph*,unsigned int)#2},std::allocator<DSPGraph::Profiler::TMetrics<DSPGraph::Graph>::TMetrics(DSPGraph::Graph*,double)::{lambda(DSPGraph::Graph*,unsigned int)#2}>,void ()(DSPGraph::Graph*,unsigned int)>::~__func()
{
}

double std::__function::__func<DSPGraph::Profiler::TMetrics<DSPGraph::Graph>::TMetrics(DSPGraph::Graph*,double)::{lambda(DSPGraph::Graph*,unsigned int)#1},std::allocator<DSPGraph::Profiler::TMetrics<DSPGraph::Graph>::TMetrics(DSPGraph::Graph*,double)::{lambda(DSPGraph::Graph*,unsigned int)#1}>,void ()(DSPGraph::Graph*,unsigned int)>::operator()(uint64_t a1)
{
  *(void *)&double result = DSPGraph::Metrics::start((DSPGraph::Metrics *)*(void *)(a1 + 8)).u64[0];
  return result;
}

uint64_t std::__function::__func<DSPGraph::Profiler::TMetrics<DSPGraph::Graph>::TMetrics(DSPGraph::Graph*,double)::{lambda(DSPGraph::Graph*,unsigned int)#1},std::allocator<DSPGraph::Profiler::TMetrics<DSPGraph::Graph>::TMetrics(DSPGraph::Graph*,double)::{lambda(DSPGraph::Graph*,unsigned int)#1}>,void ()(DSPGraph::Graph*,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EDFA2028;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<DSPGraph::Profiler::TMetrics<DSPGraph::Graph>::TMetrics(DSPGraph::Graph*,double)::{lambda(DSPGraph::Graph*,unsigned int)#1},std::allocator<DSPGraph::Profiler::TMetrics<DSPGraph::Graph>::TMetrics(DSPGraph::Graph*,double)::{lambda(DSPGraph::Graph*,unsigned int)#1}>,void ()(DSPGraph::Graph*,unsigned int)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_1EDFA2028;
  result[1] = v3;
  return result;
}

void std::__function::__func<DSPGraph::Profiler::TMetrics<DSPGraph::Graph>::TMetrics(DSPGraph::Graph*,double)::{lambda(DSPGraph::Graph*,unsigned int)#1},std::allocator<DSPGraph::Profiler::TMetrics<DSPGraph::Graph>::TMetrics(DSPGraph::Graph*,double)::{lambda(DSPGraph::Graph*,unsigned int)#1}>,void ()(DSPGraph::Graph*,unsigned int)>::~__func()
{
}

void DSPGraph::Profiler::~Profiler(DSPGraph::Profiler *this)
{
  uint64_t v2 = (void *)((char *)this + 24);
  if (*((void *)this + 6))
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>>>>::__deallocate_node(*((void **)this + 5));
    *((void *)this + 5) = 0;
    uint64_t v3 = *((void *)this + 4);
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*v2 + 8 * i) = 0;
    }
    *((void *)this + 6) = 0;
  }
  std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Graph>>::reset[abi:ne180100]((uint64_t *)this + 2, 0);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Box>>>>>::~__hash_table((uint64_t)v2);
  std::unique_ptr<DSPGraph::Profiler::TMetrics<DSPGraph::Graph>>::reset[abi:ne180100]((uint64_t *)this + 2, 0);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void DSPGraph::Profiler::copyStatistics(DSPGraph::Profiler *this@<X0>, CFDictionaryRef *a2@<X8>)
{
  memset(v11, 0, sizeof(v11));
  uint64_t v4 = (char *)(*(void *)this + 408);
  if (*(char *)(*(void *)this + 431) < 0) {
    uint64_t v4 = *(char **)v4;
  }
  uint64_t v12 = (void ***)v4;
  DSPGraph::Metrics::getStatistics(v9, *(void *)(*((void *)this + 2) + 8));
  DSPGraph::Profiler::copyStatistics(void)const::$_0::operator()((CFDictionaryRef *)&v10, v9);
  std::vector<applesauce::CF::TypeRefPair>::emplace_back<char const*,applesauce::CF::DictionaryRef>(v11, (char **)&v12, &v10);
  if (v10) {
    CFRelease(v10);
  }
  for (uint64_t i = (void *)*((void *)this + 5); i; uint64_t i = (void *)*i)
  {
    uint64_t v6 = DSPGraph::Graph::box(*(int8x8_t **)this, i[2]);
    double v7 = (char *)(v6 + 32);
    if (*(char *)(v6 + 55) < 0) {
      double v7 = *(char **)v7;
    }
    uint64_t v12 = (void ***)v7;
    DSPGraph::Metrics::getStatistics(v8, *(void *)(i[3] + 8));
    DSPGraph::Profiler::copyStatistics(void)const::$_0::operator()((CFDictionaryRef *)&v10, v8);
    std::vector<applesauce::CF::TypeRefPair>::emplace_back<char const*,applesauce::CF::DictionaryRef>(v11, (char **)&v12, &v10);
    if (v10) {
      CFRelease(v10);
    }
  }
  *a2 = applesauce::CF::details::make_CFDictionaryRef(v11);
  uint64_t v12 = v11;
  std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
}

void sub_18FF98B88(_Unwind_Exception *a1)
{
  *(void *)(v1 - 4std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v1 - 64;
  std::vector<applesauce::CF::TypeRefPair>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 40));
  _Unwind_Resume(a1);
}

void DSPGraph::Profiler::copyStatistics(void)const::$_0::operator()(CFDictionaryRef *a1, uint64_t *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,unsigned long long const&>((applesauce::CF::TypeRef *)v11, "WNumBlocks", a2);
  applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,unsigned long long const&>((applesauce::CF::TypeRef *)&v12, "WNumFrames", a2 + 1);
  applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,unsigned long long const&>((applesauce::CF::TypeRef *)&v13, "WCPUTime", a2 + 2);
  applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,unsigned long long const&>((applesauce::CF::TypeRef *)&v14, "WCPUCycleCount", a2 + 3);
  applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,unsigned long long const&>((applesauce::CF::TypeRef *)&v15, "WCPUInstrCount", a2 + 4);
  applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,unsigned long long const&>((applesauce::CF::TypeRef *)&v16, "WWallClockTime", a2 + 5);
  applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&v17, "WPeakCPU");
  uint64_t valuePtr = a2[6];
  if (!CFNumberCreate(0, kCFNumberDoubleType, &valuePtr))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,unsigned long long const&>((applesauce::CF::TypeRef *)&v19, "WPeakCPUBlockNum", a2 + 7);
  LODWORD(valuePtr) = 0;
  applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,unsigned int>((applesauce::CF::TypeRef *)&v20, "WAvgMemDelta", (int *)&valuePtr);
  int v8 = 0;
  applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,unsigned int>((applesauce::CF::TypeRef *)&v21, "CurrMem", &v8);
  applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,unsigned long long const&>((applesauce::CF::TypeRef *)&v22, "TNumBlocks", a2 + 8);
  applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,unsigned long long const&>((applesauce::CF::TypeRef *)&v23, "TNumFrames", a2 + 9);
  applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,unsigned long long const&>((applesauce::CF::TypeRef *)&v24, "TCPUTime", a2 + 10);
  applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,unsigned long long const&>((applesauce::CF::TypeRef *)&v25, "TCPUCycleCount", a2 + 11);
  applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,unsigned long long const&>((applesauce::CF::TypeRef *)&v26, "TCPUInstrCount", a2 + 12);
  applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,unsigned long long const&>((applesauce::CF::TypeRef *)v27, "TWallClockTime", a2 + 13);
  v9[0] = v11;
  v9[1] = 16;
  uint64_t v4 = 0;
  *a1 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v9);
  do
  {
    uint64_t v5 = *(const void **)&v27[v4 + 8];
    if (v5) {
      CFRelease(v5);
    }
    uint64_t v6 = *(const void **)&v27[v4];
    if (v6) {
      CFRelease(v6);
    }
    v4 -= 16;
  }
  while (v4 != -256);
}

void sub_18FF98E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,CFTypeRef a27)
{
  if (a27) {
    CFRelease(a27);
  }
  applesauce::CF::TypeRef::~TypeRef(v27);
  while (v27 != (const void **)&a14)
  {
    v27 -= 2;
    applesauce::CF::TypeRefPair::~TypeRefPair((applesauce::CF::TypeRefPair *)v27);
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<applesauce::CF::TypeRefPair>::emplace_back<char const*,applesauce::CF::DictionaryRef>(void *a1, char **a2, const void **a3)
{
  uint64_t v6 = a1 + 2;
  unint64_t v7 = a1[2];
  unint64_t v8 = a1[1];
  if (v8 >= v7)
  {
    uint64_t v11 = (uint64_t)(v8 - *a1) >> 4;
    if ((unint64_t)(v11 + 1) >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v7 - *a1;
    uint64_t v13 = v12 >> 3;
    if (v12 >> 3 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    uint64_t v20 = v6;
    if (v14) {
      unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v14);
    }
    else {
      uint64_t v15 = 0;
    }
    unint64_t v16 = v14;
    uint64_t v17 = (applesauce::CF::TypeRef *)(v14 + 16 * v11);
    uint64_t v18 = v17;
    unint64_t v19 = v14 + 16 * v15;
    applesauce::CF::TypeRefPair::TypeRefPair<char const*,applesauce::CF::DictionaryRef>(v17, *a2, a3);
    uint64_t v18 = (applesauce::CF::TypeRef *)((char *)v17 + 16);
    std::vector<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>::__swap_out_circular_buffer(a1, &v16);
    unint64_t v10 = a1[1];
    uint64_t result = std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer((uint64_t)&v16);
  }
  else
  {
    uint64_t result = (uint64_t)applesauce::CF::TypeRefPair::TypeRefPair<char const*,applesauce::CF::DictionaryRef>((applesauce::CF::TypeRef *)a1[1], *a2, a3);
    unint64_t v10 = v8 + 16;
    a1[1] = v8 + 16;
  }
  a1[1] = v10;
  return result;
}

void sub_18FF99030(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<applesauce::CF::TypeRefPair>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const*,applesauce::CF::DictionaryRef>(applesauce::CF::TypeRef *a1, char *a2, const void **a3)
{
  applesauce::CF::TypeRef::TypeRef(a1, a2);
  uint64_t v5 = *a3;
  if (v5) {
    CFRetain(v5);
  }
  *((void *)a1 + 1) = v5;
  return a1;
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,unsigned long long const&>(applesauce::CF::TypeRef *a1, char *a2, uint64_t *a3)
{
  applesauce::CF::TypeRef::TypeRef(a1, a2);
  uint64_t valuePtr = *a3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberLongLongType, &valuePtr);
  *((void *)a1 + 1) = v5;
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_18FF9912C(_Unwind_Exception *a1)
{
  uint64_t v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,unsigned int>(applesauce::CF::TypeRef *a1, char *a2, int *a3)
{
  applesauce::CF::TypeRef::TypeRef(a1, a2);
  int valuePtr = *a3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *((void *)a1 + 1) = v5;
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_18FF99200(_Unwind_Exception *a1)
{
  uint64_t v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

CFDictionaryRef applesauce::CF::details::make_CFDictionaryRef(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 8);
  keys = 0;
  CFDataRef v37 = 0;
  unint64_t v38 = 0;
  std::vector<void const*>::reserve((void **)&keys, v2);
  values = 0;
  uint64_t v34 = 0;
  unint64_t v35 = 0;
  std::vector<void const*>::reserve((void **)&values, v2);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    uint64_t v4 = *(void ***)a1;
    uint64_t v5 = *(void *)a1 + 16 * v3;
    do
    {
      uint64_t v6 = *v4;
      unint64_t v7 = v37;
      if ((unint64_t)v37 >= v38)
      {
        uint64_t v9 = keys;
        uint64_t v10 = v37 - keys;
        unint64_t v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v12 = v38 - (void)keys;
        if ((uint64_t)(v38 - (void)keys) >> 2 > v11) {
          unint64_t v11 = v12 >> 2;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v11;
        }
        if (v13) {
          unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v13);
        }
        else {
          uint64_t v14 = 0;
        }
        uint64_t v15 = (void **)(v13 + 8 * v10);
        char *v15 = v6;
        unint64_t v8 = v15 + 1;
        if (v7 != v9)
        {
          do
          {
            unint64_t v16 = *--v7;
            *--uint64_t v15 = v16;
          }
          while (v7 != v9);
          unint64_t v7 = keys;
        }
        keys = v15;
        unint64_t v38 = v13 + 8 * v14;
        if (v7) {
          operator delete(v7);
        }
      }
      else
      {
        NSObject *v37 = v6;
        unint64_t v8 = v7 + 1;
      }
      CFDataRef v37 = v8;
      uint64_t v17 = v4[1];
      uint64_t v18 = v34;
      if ((unint64_t)v34 >= v35)
      {
        uint64_t v20 = values;
        uint64_t v21 = v34 - values;
        unint64_t v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v23 = v35 - (void)values;
        if ((uint64_t)(v35 - (void)values) >> 2 > v22) {
          unint64_t v22 = v23 >> 2;
        }
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v22;
        }
        if (v24) {
          unint64_t v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v24);
        }
        else {
          uint64_t v25 = 0;
        }
        uint64_t v26 = (void **)(v24 + 8 * v21);
        *uint64_t v26 = v17;
        unint64_t v19 = v26 + 1;
        if (v18 != v20)
        {
          do
          {
            uint64_t v27 = *--v18;
            *--uint64_t v26 = v27;
          }
          while (v18 != v20);
          uint64_t v18 = values;
        }
        values = v26;
        unint64_t v35 = v24 + 8 * v25;
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        const char *v34 = v17;
        unint64_t v19 = v18 + 1;
      }
      uint64_t v34 = v19;
      v4 += 2;
    }
    while (v4 != (void **)v5);
  }
  uint64_t v28 = keys;
  int v29 = values;
  CFDictionaryRef v30 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, v2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v30)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  if (v29) {
    operator delete(v29);
  }
  if (v28) {
    operator delete(v28);
  }
  return v30;
}

void sub_18FF994B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12)
{
  __cxa_free_exception(v12);
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(a1);
}

void applesauce::CF::TypeRefPair::~TypeRefPair(applesauce::CF::TypeRefPair *this)
{
  unint64_t v2 = (const void *)*((void *)this + 1);
  if (v2) {
    CFRelease(v2);
  }
  if (*(void *)this) {
    CFRelease(*(CFTypeRef *)this);
  }
}

uint64_t AudioFileRestrictedHandle::AFAPI_RemoveUserData(AudioFileID *this, UInt32 a2, UInt32 a3)
{
  if (*((unsigned char *)this + 96)) {
    return AudioFileRemoveUserData(this[11], a2, a3);
  }
  else {
    return 4294967258;
  }
}

uint64_t AudioFileRestrictedHandle::AFAPI_SetUserData(AudioFileID *this, UInt32 a2, UInt32 a3, UInt32 a4, const void *a5)
{
  if (*((unsigned char *)this + 96)) {
    return AudioFileSetUserData(this[11], a2, a3, a4, a5);
  }
  else {
    return 4294967258;
  }
}

uint64_t AudioFileRestrictedHandle::AFAPI_GetUserDataAtOffset(AudioFileID *this, UInt32 a2, UInt32 a3, SInt64 a4, unsigned int *a5, void *a6)
{
  if (*((unsigned char *)this + 96)) {
    return AudioFileGetUserDataAtOffset(this[11], a2, a3, a4, a5, a6);
  }
  else {
    return 4294967258;
  }
}

uint64_t AudioFileRestrictedHandle::AFAPI_GetUserData(AudioFileID *this, UInt32 a2, UInt32 a3, unsigned int *a4, void *a5)
{
  if (*((unsigned char *)this + 96)) {
    return AudioFileGetUserData(this[11], a2, a3, a4, a5);
  }
  else {
    return 4294967258;
  }
}

uint64_t AudioFileRestrictedHandle::AFAPI_GetUserDataSize64(AudioFileID *this, UInt32 a2, UInt32 a3, unint64_t *a4)
{
  if (*((unsigned char *)this + 96)) {
    return AudioFileGetUserDataSize64(this[11], a2, a3, a4);
  }
  else {
    return 4294967258;
  }
}

uint64_t AudioFileRestrictedHandle::AFAPI_GetUserDataSize(AudioFileID *this, UInt32 a2, UInt32 a3, unsigned int *a4)
{
  if (*((unsigned char *)this + 96)) {
    return AudioFileGetUserDataSize(this[11], a2, a3, a4);
  }
  else {
    return 4294967258;
  }
}

uint64_t AudioFileRestrictedHandle::AFAPI_CountUserData(AudioFileID *this, UInt32 a2, unsigned int *a3)
{
  if (*((unsigned char *)this + 96)) {
    return AudioFileCountUserData(this[11], a2, a3);
  }
  else {
    return 4294967258;
  }
}

uint64_t AudioFileRestrictedHandle::AFAPI_SetProperty(AudioFileRestrictedHandle *this, AudioFilePropertyID a2, UInt32 a3, CFDictionaryRef *inPropertyData)
{
  if (a2 == 1634495607)
  {
    if (a3 < 8) {
      return 561211770;
    }
    std::vector<unsigned char>::vector(v46, 0x2000uLL);
    uint64_t v9 = 0;
    unsigned int v45 = 0;
    uint64_t v6 = (uint64_t)v46[0];
    do
    {
      uint64_t v6 = (*((uint64_t (**)(void, uint64_t, uint64_t, uint64_t, unsigned int *))this + 4))(*((void *)this + 3), v9, 0x2000, v6, &v45);
      if (v6) {
        goto LABEL_60;
      }
      if (v45 < 0xA) {
        break;
      }
      uint64_t v6 = (uint64_t)v46[0];
      unsigned int v10 = ID3Size(v45, (const unsigned __int8 *)v46[0], v44);
      v9 += v10;
    }
    while (v10);
    AudioFileAllowListFilter::AudioFileAllowListFilter((AudioFileAllowListFilter *)v44, *inPropertyData);
    uint64_t AudioFileFormatRegistry = GetAudioFileFormatRegistry();
    uint64_t v12 = *((void *)this + 8);
    uint64_t v13 = *((void *)this + 9);
    if (v12 == v13) {
      goto LABEL_44;
    }
    uint64_t v14 = (AudioFileFormatRegistry *)AudioFileFormatRegistry;
    while (1)
    {
      AudioFileAllowListFilter::GetAllowedTypes((uint64_t)&v42, (uint64_t)v44, v12);
      unint64_t v16 = v42;
      uint64_t v15 = v43;
      uint64_t v17 = v42;
      if (v42 == v43)
      {
        char v21 = 1;
        if (v42) {
          goto LABEL_30;
        }
        goto LABEL_31;
      }
      while (1)
      {
        uint64_t v18 = (AudioFileFormatBase *)AudioFileFormatRegistry::Get(v14, *v17);
        if ((*(unsigned int (**)(AudioFileFormatBase *, void, void *))(*(void *)v18 + 24))(v18, v45, v46[0]) != 1)goto LABEL_19; {
        uint64_t v19 = NewAudioFileHandle(v18);
        }
        uint64_t v20 = (unsigned int *)v19;
        if (!v19) {
          goto LABEL_19;
        }
        if (!(*(unsigned int (**)(uint64_t, void, void, void, void, void))(*(void *)v19 + 56))(v19, *((void *)this + 3), *((void *)this + 4), *((void *)this + 5), *((void *)this + 6), *((void *)this + 7)))break; {
        (*(void (**)(unsigned int *))(*(void *)v20 + 8))(v20);
        }
LABEL_19:
        if (++v17 == v15)
        {
          char v21 = 1;
          goto LABEL_29;
        }
      }
      LODWORD(v36) = 40;
      if ((*(unsigned int (**)(unsigned int *, uint64_t, long long *, char *))(*(void *)v20 + 144))(v20, 1684434292, &v36, v40)|| !AudioFileAllowListFilter::IsDataFormatAllowed((AudioFileAllowListFilter *)v44, v41))
      {
        (*(void (**)(unsigned int *))(*(void *)v20 + 8))(v20);
        std::string __p = 0;
        unint64_t v38 = 0;
        uint64_t v39 = 0;
        std::vector<AudioFileInfo>::__init_with_size[abi:ne180100]<AudioFileInfo*,AudioFileInfo*>(&__p, *((const void **)this + 8), *((void *)this + 9), (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 4);
        uint64_t v6 = 1718449215;
        if (__p)
        {
          unint64_t v38 = __p;
          operator delete(__p);
        }
      }
      else
      {
        uint64_t v6 = 0;
        *((void *)this + 11) = v20[2];
        *((unsigned char *)this + 96) = 1;
      }
      char v21 = 0;
LABEL_29:
      unint64_t v16 = v42;
      if (v42) {
LABEL_30:
      }
        operator delete(v16);
LABEL_31:
      if ((v21 & 1) == 0) {
        goto LABEL_59;
      }
      v12 += 16;
      if (v12 == v13)
      {
        unint64_t v22 = (long long *)*((void *)this + 8);
        uint64_t v12 = *((void *)this + 9);
        if (v22 != (long long *)v12)
        {
          long long v36 = *v22;
          AudioFileAllowListFilter::GetAllowedTypes((uint64_t)&v42, (uint64_t)v44, (uint64_t)&v36);
          uint64_t v23 = v42;
          unint64_t v24 = v43;
          if (v42 == v43)
          {
            int v29 = 1;
            goto LABEL_55;
          }
          uint64_t v25 = v42;
          while (1)
          {
            uint64_t v26 = (AudioFileFormatBase *)AudioFileFormatRegistry::Get(v14, *v25);
            if ((*(unsigned int (**)(AudioFileFormatBase *, void, void *))(*(void *)v26 + 24))(v26, v45, v46[0]))
            {
              uint64_t v27 = NewAudioFileHandle(v26);
              uint64_t v28 = (unsigned int *)v27;
              if (v27)
              {
                if (!(*(unsigned int (**)(uint64_t, void, void, void, void, void))(*(void *)v27 + 56))(v27, *((void *)this + 3), *((void *)this + 4), *((void *)this + 5), *((void *)this + 6), *((void *)this + 7)))
                {
                  int v35 = 40;
                  uint64_t v6 = 1718449215;
                  if ((*(unsigned int (**)(unsigned int *, uint64_t, int *, char *))(*(void *)v28 + 144))(v28, 1684434292, &v35, v40)|| !AudioFileAllowListFilter::IsDataFormatAllowed((AudioFileAllowListFilter *)v44, v41))
                  {
                    (*(void (**)(unsigned int *))(*(void *)v28 + 8))(v28);
                    __int16 v32 = 0;
                    OSStatus v33 = 0;
                    uint64_t v34 = 0;
                    std::vector<AudioFileInfo>::__init_with_size[abi:ne180100]<AudioFileInfo*,AudioFileInfo*>(&v32, *((const void **)this + 8), *((void *)this + 9), (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 4);
                    if (v32)
                    {
                      OSStatus v33 = v32;
                      operator delete(v32);
                    }
                  }
                  else
                  {
                    uint64_t v6 = 0;
                    *((void *)this + 11) = v28[2];
                    *((unsigned char *)this + 96) = 1;
                  }
                  int v29 = 0;
LABEL_54:
                  uint64_t v23 = v42;
LABEL_55:
                  if (v23) {
                    operator delete(v23);
                  }
                  if (v29)
                  {
                    CFDictionaryRef v30 = (const void *)*((void *)this + 8);
                    uint64_t v12 = *((void *)this + 9);
                    goto LABEL_45;
                  }
                  goto LABEL_59;
                }
                (*(void (**)(unsigned int *))(*(void *)v28 + 8))(v28);
              }
            }
            if (++v25 == v24)
            {
              int v29 = 1;
              goto LABEL_54;
            }
          }
        }
LABEL_44:
        CFDictionaryRef v30 = (const void *)v12;
LABEL_45:
        memset(v31, 0, sizeof(v31));
        std::vector<AudioFileInfo>::__init_with_size[abi:ne180100]<AudioFileInfo*,AudioFileInfo*>(v31, v30, v12, (v12 - (uint64_t)v30) >> 4);
        uint64_t v6 = 1954115647;
        if (v31[0]) {
          operator delete(v31[0]);
        }
LABEL_59:
        AudioFileAllowListFilter::~AudioFileAllowListFilter((AudioFileAllowListFilter *)v44);
LABEL_60:
        if (v46[0])
        {
          v46[1] = v46[0];
          operator delete(v46[0]);
        }
        return v6;
      }
    }
  }
  if (!*((unsigned char *)this + 96)) {
    return 4294967258;
  }
  unint64_t v7 = (OpaqueAudioFileID *)*((void *)this + 11);
  return AudioFileSetProperty(v7, a2, a3, inPropertyData);
}

void sub_18FF99B74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,char a31)
{
  if (__p) {
    operator delete(__p);
  }
  AudioFileAllowListFilter::~AudioFileAllowListFilter((AudioFileAllowListFilter *)&a31);
  OSStatus v33 = *(void **)(v31 - 112);
  if (v33)
  {
    *(void *)(v31 - 104) = v33;
    operator delete(v33);
  }
  _Unwind_Resume(a1);
}

void *std::vector<AudioFileInfo>::__init_with_size[abi:ne180100]<AudioFileInfo*,AudioFileInfo*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<AudioFileInfo>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_18FF99C7C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<AudioFileInfo>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)operator new(16 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * a2];
  return result;
}

uint64_t AudioFileRestrictedHandle::AFAPI_GetProperty(AudioFileID *this, AudioFilePropertyID a2, unsigned int *a3, void *a4)
{
  if (*((unsigned char *)this + 96)) {
    return AudioFileGetProperty(this[11], a2, a3, a4);
  }
  else {
    return 4294967258;
  }
}

uint64_t AudioFileRestrictedHandle::AFAPI_GetPropertyInfo(AudioFileID *this, AudioFilePropertyID a2, unsigned int *a3, unsigned int *a4)
{
  if (*((unsigned char *)this + 96)) {
    return AudioFileGetPropertyInfo(this[11], a2, a3, a4);
  }
  else {
    return 4294967258;
  }
}

uint64_t AudioFileRestrictedHandle::AFAPI_WritePacketsWithDependencyInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(unsigned char *)(a1 + 96)) {
    return AudioFileWritePacketsWithDependencyInfo(*(void *)(a1 + 88), a2, a3, a4, a5, a6, a7, a8);
  }
  else {
    return 4294967258;
  }
}

uint64_t AudioFileRestrictedHandle::AFAPI_WritePackets(AudioFileID *this, Boolean a2, UInt32 a3, const AudioStreamPacketDescription *a4, SInt64 a5, unsigned int *a6, const void *a7)
{
  if (*((unsigned char *)this + 96)) {
    return AudioFileWritePackets(this[11], a2, a3, a4, a5, a6, a7);
  }
  else {
    return 4294967258;
  }
}

uint64_t AudioFileRestrictedHandle::AFAPI_ReadPacketData(AudioFileID *this, Boolean a2, unsigned int *a3, AudioStreamPacketDescription *a4, SInt64 a5, unsigned int *a6, void *a7)
{
  if (*((unsigned char *)this + 96)) {
    return AudioFileReadPacketData(this[11], a2, a3, a4, a5, a6, a7);
  }
  else {
    return 4294967258;
  }
}

uint64_t AudioFileRestrictedHandle::AFAPI_ReadPackets(AudioFileID *this, Boolean a2, unsigned int *a3, AudioStreamPacketDescription *a4, SInt64 a5, unsigned int *a6, void *a7)
{
  if (*((unsigned char *)this + 96)) {
    return AudioFileReadPackets(this[11], a2, a3, a4, a5, a6, a7);
  }
  else {
    return 4294967258;
  }
}

uint64_t AudioFileRestrictedHandle::AFAPI_WriteBytes(AudioFileID *this, Boolean a2, SInt64 a3, unsigned int *a4, const void *a5)
{
  if (*((unsigned char *)this + 96)) {
    return AudioFileWriteBytes(this[11], a2, a3, a4, a5);
  }
  else {
    return 4294967258;
  }
}

uint64_t AudioFileRestrictedHandle::AFAPI_ReadBytes(AudioFileID *this, Boolean a2, SInt64 a3, unsigned int *a4, void *a5)
{
  if (*((unsigned char *)this + 96)) {
    return AudioFileReadBytes(this[11], a2, a3, a4, a5);
  }
  else {
    return 4294967258;
  }
}

uint64_t AudioFileRestrictedHandle::AFAPI_Optimize(AudioFileID *this)
{
  if (*((unsigned char *)this + 96)) {
    return AudioFileOptimize(this[11]);
  }
  else {
    return 4294967258;
  }
}

uint64_t AudioFileRestrictedHandle::AFAPI_Close(AudioFileRestrictedHandle *this)
{
  if (!*((unsigned char *)this + 96)) {
    return 4294967258;
  }
  uint64_t result = AudioFileClose(*((AudioFileID *)this + 11));
  if (*((unsigned char *)this + 96)) {
    *((unsigned char *)this + 96) = 0;
  }
  return result;
}

uint64_t AudioFileRestrictedHandle::AFAPI_InitializeWithCallbacks(AudioFileRestrictedHandle *this, void *a2, int (*a3)(void *, uint64_t, unsigned int, void *, unsigned int *), int (*a4)(void *, uint64_t, unsigned int, const void *, unsigned int *), uint64_t (*a5)(void *), int (*a6)(void *, uint64_t), unsigned int a7, const AudioStreamBasicDescription *a8, unsigned int a9)
{
  return 1869627199;
}

uint64_t AudioFileRestrictedHandle::AFAPI_OpenWithCallbacks(AudioFileRestrictedHandle *this, void *a2, int (*a3)(void *, uint64_t, unsigned int, void *, unsigned int *), int (*a4)(void *, uint64_t, unsigned int, const void *, unsigned int *), uint64_t (*a5)(void *), int (*a6)(void *, uint64_t))
{
  return 1869627199;
}

uint64_t AudioFileRestrictedHandle::AFAPI_OpenURL(AudioFileRestrictedHandle *this, const __CFURL *a2)
{
  return 1869627199;
}

uint64_t AudioFileRestrictedHandle::AFAPI_Initialize(AudioFileRestrictedHandle *this, const __CFURL *a2, const AudioStreamBasicDescription *a3)
{
  return 1869627199;
}

uint64_t AudioFileRestrictedHandle::AFAPI_CreateURL(AudioFileRestrictedHandle *this, const __CFURL *a2, const AudioStreamBasicDescription *a3)
{
  return 1869627199;
}

uint64_t AudioFileRestrictedHandle::PrintObject(AudioFileRestrictedHandle *this, __sFILE *a2)
{
  return fprintf(a2, "< AudioFile (restricted) %d [%p] >\n", *((_DWORD *)this + 2), this);
}

void AudioFileRestrictedHandle::~AudioFileRestrictedHandle(AudioFileID *this)
{
  AudioFileRestrictedHandle::~AudioFileRestrictedHandle(this);
  JUMPOUT(0x192FC8940);
}

{
  OpaqueAudioFileID *v2;
  uint64_t vars8;

  *this = (AudioFileID)&unk_1EDF93CA0;
  if (*((unsigned char *)this + 96))
  {
    AudioFileClose(this[11]);
    if (*((unsigned char *)this + 96)) {
      *((unsigned char *)this + 96) = 0;
    }
  }
  unint64_t v2 = this[8];
  if (v2)
  {
    this[9] = v2;
    operator delete(v2);
  }
  BaseOpaqueObject::~BaseOpaqueObject((BaseOpaqueObject *)this);
}

uint64_t AudioFileIPODLibHandle::AFAPI_RemoveUserData(AudioFileIPODLibHandle *this)
{
  return 1886547263;
}

uint64_t AudioFileIPODLibHandle::AFAPI_SetUserData(AudioFileIPODLibHandle *this, unsigned int a2, unsigned int a3, unsigned int a4, const void *a5)
{
  return 1886547263;
}

uint64_t AudioFileIPODLibHandle::AFAPI_GetUserDataAtOffset(AudioFileIPODLibHandle *this, unsigned int a2, unsigned int a3, uint64_t a4, unsigned int *a5, void *a6)
{
  return 4294967292;
}

uint64_t AudioFileIPODLibHandle::AFAPI_GetUserData(AudioFileIPODLibHandle *this, unsigned int a2, unsigned int a3, unsigned int *a4, void *a5)
{
  return 4294967292;
}

uint64_t AudioFileIPODLibHandle::AFAPI_GetUserDataSize64(AudioFileIPODLibHandle *this, unsigned int a2, unsigned int a3, unint64_t *a4)
{
  return 4294967292;
}

uint64_t AudioFileIPODLibHandle::AFAPI_GetUserDataSize(AudioFileIPODLibHandle *this, unsigned int a2, unsigned int a3, unsigned int *a4)
{
  return 4294967292;
}

uint64_t AudioFileIPODLibHandle::AFAPI_CountUserData(AudioFileIPODLibHandle *this, unsigned int a2, unsigned int *a3)
{
  return 4294967292;
}

uint64_t AudioFileIPODLibHandle::AFAPI_SetProperty(AudioFileIPODLibHandle *this, unsigned int a2, unsigned int a3, const void *a4)
{
  return 1886547263;
}

int64_t AudioFileIPODLibHandle::AFAPI_GetProperty(AudioFileIPODLibHandle *this, unsigned int a2, unsigned int *a3, void *a4)
{
  int v8 = IsBinaryProperty(a2);
  if ((v8 & 1) == 0 && a2 != 1633776244 && a2 != 1819243876 && a2 != 1768842863) {
    return 1886681407;
  }
  xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
  char v32 = 1;
  uint64_t v30 = MEMORY[0x1E4FB94A0] + 16;
  xpc_object_t xdict = v9;
  if (v9)
  {
    xpc_dictionary_set_uint64(v9, "type", 0x70726F70uLL);
    xpc_dictionary_set_uint64(xdict, "selector", a2);
  }
  unsigned int v10 = (xpc_connection_t *)*((void *)this + 3);
  if (!v10[1]) {
    goto LABEL_21;
  }
  xpc_object_t v11 = xpc_connection_send_message_with_reply_sync(v10[1], xdict);
  uint64_t v12 = v11;
  if (v11) {
    BOOL v13 = v11 == (xpc_object_t)MEMORY[0x1E4F14520];
  }
  else {
    BOOL v13 = 1;
  }
  if (!v13 && v11 != (xpc_object_t)MEMORY[0x1E4F14528])
  {
    if (object_getClass(v11) != (Class)MEMORY[0x1E4F14590]) {
      goto LABEL_19;
    }
    char v29 = 1;
    uint64_t v27 = MEMORY[0x1E4FB94A0] + 16;
    xpc_object_t v28 = v12;
    xpc_object_t value = xpc_dictionary_get_value(v12, "status");
    uint64_t v18 = value;
    if (!value
      || object_getClass(value) != (Class)MEMORY[0x1E4F145C0]
      || (int64_t v15 = xpc_int64_get_value(v18), !v15))
    {
      int64_t v15 = 2003334207;
      if (v28)
      {
        xpc_object_t v19 = xpc_dictionary_get_value(v28, "data");
        uint64_t v20 = v19;
        if (v19)
        {
          if (object_getClass(v19) == (Class)MEMORY[0x1E4F14580])
          {
            size_t length = xpc_data_get_length(v20);
            bytes_ptr = xpc_data_get_bytes_ptr(v20);
            if (HIDWORD(length))
            {
              int64_t v15 = 561211770;
            }
            else
            {
              if (v8)
              {
                if (*a3 >= length) {
                  size_t v23 = length;
                }
                else {
                  size_t v23 = *a3;
                }
                *a3 = v23;
                memcpy(a4, bytes_ptr, v23);
              }
              else
              {
                char v26 = 1;
                CFDataRef v25 = CFDataCreate(0, (const UInt8 *)bytes_ptr, length);
                CFPropertyListRef v24 = CFPropertyListCreateWithData((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v25, 0, 0, 0);
                if (!v24)
                {
                  CACFData::~CACFData((CACFData *)&v25);
                  int64_t v15 = 1667787583;
                  goto LABEL_43;
                }
                *a3 = 8;
                *a4 = v24;
                CACFData::~CACFData((CACFData *)&v25);
              }
              int64_t v15 = 0;
            }
          }
        }
      }
    }
LABEL_43:
    XPC_Object::~XPC_Object((XPC_Object *)&v27);
    goto LABEL_23;
  }
  if (v11) {
LABEL_19:
  }
    xpc_release(v12);
  unsigned int v10 = (xpc_connection_t *)*((void *)this + 3);
  if (v10) {
LABEL_21:
  }
    (*((void (**)(xpc_connection_t *))*v10 + 1))(v10);
  int64_t v15 = 2003334207;
  *((void *)this + 3) = 0;
LABEL_23:
  XPC_Object::~XPC_Object((XPC_Object *)&v30);
  return v15;
}

void sub_18FF9A27C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14)
{
}

uint64_t IsBinaryProperty(int a1)
{
  uint64_t result = 1;
  if (a1 <= 1718775914)
  {
    if (a1 <= 1684434291)
    {
      if (a1 <= 1652125802)
      {
        if (a1 == 1650683508) {
          return result;
        }
        int v3 = 1651663220;
        goto LABEL_31;
      }
      if (a1 == 1652125803 || a1 == 1667787108) {
        return result;
      }
      int v3 = 1668112752;
    }
    else if (a1 > 1701082481)
    {
      if (a1 == 1701082482 || a1 == 1717988724) {
        return result;
      }
      int v3 = 1718383476;
    }
    else
    {
      if (a1 == 1684434292 || a1 == 1685022310) {
        return result;
      }
      int v3 = 1685289589;
    }
LABEL_31:
    if (a1 != v3) {
      return 0;
    }
    return result;
  }
  if (a1 > 1886086769)
  {
    if (a1 > 1886616164)
    {
      if (a1 == 1886616165 || a1 == 1920168566) {
        return result;
      }
      int v3 = 1935832164;
    }
    else
    {
      if (a1 == 1886086770 || a1 == 1886090594) {
        return result;
      }
      int v3 = 1886283375;
    }
    goto LABEL_31;
  }
  if (a1 > 1869640812)
  {
    if (a1 == 1869640813 || a1 == 1885564532) {
      return result;
    }
    int v3 = 1886085753;
    goto LABEL_31;
  }
  if (a1 != 1718775915 && a1 != 1768174452)
  {
    int v3 = 1835493731;
    goto LABEL_31;
  }
  return result;
}

void CACFData::~CACFData(CACFData *this)
{
  if (*((unsigned char *)this + 8))
  {
    unint64_t v2 = *(const void **)this;
    if (*(void *)this) {
      CFRelease(v2);
    }
  }
}

int64_t AudioFileIPODLibHandle::AFAPI_GetPropertyInfo(AudioFileIPODLibHandle *this, unsigned int a2, unsigned int *a3, unsigned int *a4)
{
  if ((IsBinaryProperty(a2) & 1) == 0 && a2 != 1633776244 && a2 != 1819243876 && a2 != 1768842863) {
    return 1886681407;
  }
  xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
  char v27 = 1;
  uint64_t v25 = MEMORY[0x1E4FB94A0] + 16;
  xpc_object_t xdict = v8;
  if (v8)
  {
    xpc_dictionary_set_uint64(v8, "type", 0x696E666FuLL);
    xpc_dictionary_set_uint64(xdict, "selector", a2);
  }
  xpc_object_t v9 = (xpc_connection_t *)*((void *)this + 3);
  if (!v9[1]) {
    goto LABEL_22;
  }
  xpc_object_t v10 = xpc_connection_send_message_with_reply_sync(v9[1], xdict);
  xpc_object_t v11 = v10;
  if (v10) {
    BOOL v12 = v10 == (xpc_object_t)MEMORY[0x1E4F14520];
  }
  else {
    BOOL v12 = 1;
  }
  if (v12 || v10 == (xpc_object_t)MEMORY[0x1E4F14528])
  {
    if (!v10)
    {
LABEL_21:
      xpc_object_t v9 = (xpc_connection_t *)*((void *)this + 3);
      if (!v9)
      {
LABEL_23:
        *((void *)this + 3) = 0;
        XPC_Object::~XPC_Object((XPC_Object *)&v25);
        return 2003334207;
      }
LABEL_22:
      (*((void (**)(xpc_connection_t *))*v9 + 1))(v9);
      goto LABEL_23;
    }
LABEL_20:
    xpc_release(v11);
    goto LABEL_21;
  }
  if (object_getClass(v10) != (Class)MEMORY[0x1E4F14590]) {
    goto LABEL_20;
  }
  char v24 = 1;
  uint64_t v22 = MEMORY[0x1E4FB94A0] + 16;
  xpc_object_t v23 = v11;
  xpc_object_t value = xpc_dictionary_get_value(v11, "status");
  uint64_t v17 = value;
  if (!value || object_getClass(value) != (Class)MEMORY[0x1E4F145C0] || (int64_t v14 = xpc_int64_get_value(v17), !v14))
  {
    if (a4)
    {
      if (v23)
      {
        xpc_object_t v18 = xpc_dictionary_get_value(v23, "writable");
        xpc_object_t v19 = v18;
        if (v18)
        {
          if (object_getClass(v18) == (Class)MEMORY[0x1E4F145F8]) {
            *a4 = xpc_uint64_get_value(v19);
          }
        }
      }
    }
    if (a3
      && v23
      && (xpc_object_t v20 = xpc_dictionary_get_value(v23, "size"), (v21 = v20) != 0)
      && object_getClass(v20) == (Class)MEMORY[0x1E4F145F8])
    {
      int64_t v14 = 0;
      *a3 = xpc_uint64_get_value(v21);
    }
    else
    {
      int64_t v14 = 0;
    }
  }
  XPC_Object::~XPC_Object((XPC_Object *)&v22);
  XPC_Object::~XPC_Object((XPC_Object *)&v25);
  return v14;
}

void sub_18FF9A778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t AudioFileIPODLibHandle::AFAPI_WritePacketsWithDependencyInfo()
{
  return 1886547263;
}

uint64_t AudioFileIPODLibHandle::AFAPI_WritePackets(AudioFileIPODLibHandle *this, unsigned __int8 a2, unsigned int a3, const AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, const void *a7)
{
  return 1886547263;
}

int64_t AudioFileIPODLibHandle::AFAPI_ReadPacketData(AudioFileIPODLibHandle *this, unsigned __int8 a2, unsigned int *a3, AudioStreamPacketDescription *a4, int64_t a5, unsigned int *a6, void *a7)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  xpc_object_t v13 = xpc_dictionary_create(0, 0, 0);
  char v56 = 1;
  uint64_t v54 = MEMORY[0x1E4FB94A0] + 16;
  xpc_object_t xdict = v13;
  if (v13)
  {
    xpc_dictionary_set_uint64(v13, "type", 0x72656164uLL);
    xpc_dictionary_set_uint64(xdict, "numbytes", *a3);
    xpc_dictionary_set_uint64(xdict, "numpackets", *a6);
    xpc_dictionary_set_int64(xdict, "startingPacket", a5);
  }
  int64_t v14 = (xpc_connection_t *)*((void *)this + 3);
  if (!v14[1]) {
    goto LABEL_17;
  }
  xpc_object_t v15 = xpc_connection_send_message_with_reply_sync(v14[1], xdict);
  unint64_t v16 = v15;
  if (v15) {
    BOOL v17 = v15 == (xpc_object_t)MEMORY[0x1E4F14520];
  }
  else {
    BOOL v17 = 1;
  }
  if (!v17 && v15 != (xpc_object_t)MEMORY[0x1E4F14528])
  {
    if (object_getClass(v15) != (Class)MEMORY[0x1E4F14590]) {
      goto LABEL_15;
    }
    char v53 = 1;
    uint64_t v51 = MEMORY[0x1E4FB94A0] + 16;
    xpc_object_t v52 = v16;
    xpc_object_t value = xpc_dictionary_get_value(v16, "status");
    uint64_t v22 = value;
    if (value)
    {
      if (object_getClass(value) == (Class)MEMORY[0x1E4F145C0])
      {
        int64_t v19 = xpc_int64_get_value(v22);
        if (v19)
        {
LABEL_58:
          XPC_Object::~XPC_Object((XPC_Object *)&v51);
          XPC_Object::~XPC_Object((XPC_Object *)&v54);
          return v19;
        }
      }
    }
    if (v52)
    {
      xpc_object_t v23 = xpc_dictionary_get_value(v52, "status");
      char v24 = v23;
      if (v23 && object_getClass(v23) == (Class)MEMORY[0x1E4F145C0]) {
        xpc_int64_get_value(v24);
      }
      xpc_object_t v25 = xpc_dictionary_get_value(v52, "numbytes");
      char v26 = v25;
      char v27 = (objc_class *)MEMORY[0x1E4F145F8];
      if (v25 && object_getClass(v25) == v27) {
        *a3 = xpc_uint64_get_value(v26);
      }
      if (v52)
      {
        xpc_object_t v28 = xpc_dictionary_get_value(v52, "numpackets");
        char v29 = v28;
        if (v28)
        {
          if (object_getClass(v28) == v27) {
            *a6 = xpc_uint64_get_value(v29);
          }
        }
      }
    }
    uint64_t v48 = 2;
    uint64_t v47 = (unsigned int (**)(void **))&unk_1EDF94DB8;
    int v49 = -1;
    char v50 = 1;
    if (!v52) {
      goto LABEL_36;
    }
    xpc_object_t v30 = xpc_dictionary_get_value(v52, "bufsize");
    uint64_t v31 = v30;
    if (!v30) {
      goto LABEL_37;
    }
    if (object_getClass(v30) == (Class)MEMORY[0x1E4F145F8]) {
      LODWORD(v31) = xpc_uint64_get_value(v31);
    }
    else {
LABEL_36:
    }
      LODWORD(v31) = 0;
LABEL_37:
    int v32 = xpc_dictionary_dup_fd(v52, "bufFD");
    if (v32 >= 1)
    {
      HIDWORD(v48) = v31;
      int v49 = v32;
    }
    if (*((unsigned char *)this + 88))
    {
      if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::__split_buffer<std::string> buf = 136315394;
        uint64_t v58 = "SharedAudioBufferList.h";
        __int16 v59 = 1024;
        int v60 = 195;
        _os_log_impl(&dword_18FEC0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE [(!mIsServer) != 0 is false]: ", buf, 0x12u);
      }
      __break(1u);
    }
    if (v47[2]((void **)&v47))
    {
      (*(void (**)(char *))(*((void *)this + 4) + 16))((char *)this + 32);
      int inited = SharableMemoryBlock::InitClient();
      if (inited) {
        AudioFileIPODLibHandle::Fail(this, inited);
      }
    }
    uint64_t v34 = (unsigned int *)*((void *)this + 7);
    unsigned int v35 = *v34;
    long long v36 = (char *)*((void *)this + 12);
    if (v36)
    {
      unsigned int v37 = *(_DWORD *)v36;
      if (*(_DWORD *)v36 >= v35)
      {
LABEL_47:
        if (v35 - 1 >= v37)
        {
          uint64_t v44 = 0;
        }
        else
        {
          unint64_t v38 = v34 + 8;
          *(_DWORD *)long long v36 = v35;
          uint64_t v39 = v36 + 16;
          uint64_t v41 = v34[2];
          unsigned int v40 = v34[3];
          unsigned int v42 = v34[1];
          uint64_t v43 = v35;
          do
          {
            *uint64_t v39 = v38;
            unint64_t v38 = (_DWORD *)((char *)v38 + v41);
            *((_DWORD *)v39 - 2) = v42;
            *((_DWORD *)v39 - 1) = v40;
            v39 += 2;
            --v43;
          }
          while (v43);
          if (v34[4]) {
            uint64_t v44 = v38;
          }
          else {
            uint64_t v44 = 0;
          }
        }
        memcpy(a7, *((const void **)v36 + 2), *a3);
        if (a4 && v44) {
          memcpy(a4, v44, 16 * *a6);
        }
        SharableMemoryBlock::FDClientToken::~FDClientToken((SharableMemoryBlock::FDClientToken *)&v47);
        int64_t v19 = 0;
        goto LABEL_58;
      }
      free(v36);
      *((void *)this + 12) = 0;
    }
    long long v36 = (char *)malloc_type_malloc(16 * (v35 - 1) + 24, 0x7C51E058uLL);
    if (!v36)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      uint64_t v46 = std::bad_alloc::bad_alloc(exception);
    }
    *((void *)this + 12) = v36;
    *(_DWORD *)long long v36 = v35;
    uint64_t v34 = (unsigned int *)*((void *)this + 7);
    unsigned int v37 = v35;
    unsigned int v35 = *v34;
    goto LABEL_47;
  }
  if (v15) {
LABEL_15:
  }
    xpc_release(v16);
  int64_t v14 = (xpc_connection_t *)*((void *)this + 3);
  if (v14) {
LABEL_17:
  }
    (*((void (**)(xpc_connection_t *))*v14 + 1))(v14);
  *((void *)this + 3) = 0;
  XPC_Object::~XPC_Object((XPC_Object *)&v54);
  return 2003334207;
}

void sub_18FF9AD38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  SharableMemoryBlock::FDClientToken::~FDClientToken((SharableMemoryBlock::FDClientToken *)va);
  XPC_Object::~XPC_Object((XPC_Object *)va1);
  XPC_Object::~XPC_Object((XPC_Object *)va2);
  _Unwind_Resume(a1);
}

void AudioFileIPODLibHandle::Fail(AudioFileIPODLibHandle *this, int a2)
{
  uint64_t v4 = *((void *)this + 3);
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *((void *)this + 3) = 0;
  }
  exception = __cxa_allocate_exception(4uLL);
  _DWORD *exception = a2;
  __cxa_throw(exception, MEMORY[0x1E4FBA3A8], 0);
}

void SharableMemoryBlock::FDClientToken::~FDClientToken(SharableMemoryBlock::FDClientToken *this)
{
  *(void *)this = &unk_1EDF94DB8;
  if (*((unsigned char *)this + 20)) {
    SharableMemoryBlock::FDClientToken::Reset(this);
  }
}

{
  uint64_t vars8;

  SharableMemoryBlock::FDClientToken::~FDClientToken(this);
  JUMPOUT(0x192FC8940);
}

BOOL SharableMemoryBlock::FDClientToken::IsValid(SharableMemoryBlock::FDClientToken *this)
{
  return *((_DWORD *)this + 4) != -1;
}

uint64_t AudioFileIPODLibHandle::AFAPI_ReadPackets(AudioFileIPODLibHandle *this, unsigned __int8 a2, unsigned int *a3, AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, void *a7)
{
  return 4294967292;
}

uint64_t AudioFileIPODLibHandle::AFAPI_WriteBytes(AudioFileIPODLibHandle *this, unsigned __int8 a2, uint64_t a3, unsigned int *a4, const void *a5)
{
  return 1886547263;
}

uint64_t AudioFileIPODLibHandle::AFAPI_ReadBytes(AudioFileIPODLibHandle *this, unsigned __int8 a2, uint64_t a3, unsigned int *a4, void *a5)
{
  return 4294967292;
}

uint64_t AudioFileIPODLibHandle::AFAPI_Optimize(AudioFileIPODLibHandle *this)
{
  return 1886547263;
}

int64_t AudioFileIPODLibHandle::AFAPI_Close(AudioFileIPODLibHandle *this)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  char v16 = 1;
  uint64_t v14 = MEMORY[0x1E4FB94A0] + 16;
  xpc_object_t message = v2;
  if (v2) {
    xpc_dictionary_set_uint64(v2, "type", 0x636C6F73uLL);
  }
  uint64_t v3 = (xpc_connection_t *)*((void *)this + 3);
  if (!v3[1]) {
    goto LABEL_17;
  }
  xpc_object_t v4 = xpc_connection_send_message_with_reply_sync(v3[1], message);
  uint64_t v5 = v4;
  if (v4) {
    BOOL v6 = v4 == (xpc_object_t)MEMORY[0x1E4F14520];
  }
  else {
    BOOL v6 = 1;
  }
  if (v6 || v4 == (xpc_object_t)MEMORY[0x1E4F14528])
  {
    if (!v4)
    {
LABEL_16:
      uint64_t v3 = (xpc_connection_t *)*((void *)this + 3);
      if (!v3)
      {
LABEL_18:
        *((void *)this + 3) = 0;
        XPC_Object::~XPC_Object((XPC_Object *)&v14);
        return 2003334207;
      }
LABEL_17:
      (*((void (**)(xpc_connection_t *))*v3 + 1))(v3);
      goto LABEL_18;
    }
LABEL_15:
    xpc_release(v5);
    goto LABEL_16;
  }
  if (object_getClass(v4) != (Class)MEMORY[0x1E4F14590]) {
    goto LABEL_15;
  }
  char v13 = 1;
  v12[0] = MEMORY[0x1E4FB94A0] + 16;
  v12[1] = v5;
  xpc_object_t value = xpc_dictionary_get_value(v5, "status");
  xpc_object_t v11 = value;
  if (!value || object_getClass(value) != (Class)MEMORY[0x1E4F145C0] || (int64_t v8 = xpc_int64_get_value(v11), !v8)) {
    int64_t v8 = 0;
  }
  XPC_Object::~XPC_Object((XPC_Object *)v12);
  XPC_Object::~XPC_Object((XPC_Object *)&v14);
  return v8;
}

void sub_18FF9B048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t AudioFileIPODLibHandle::AFAPI_InitializeWithCallbacks(AudioFileIPODLibHandle *this, void *a2, int (*a3)(void *, uint64_t, unsigned int, void *, unsigned int *), int (*a4)(void *, uint64_t, unsigned int, const void *, unsigned int *), uint64_t (*a5)(void *), int (*a6)(void *, uint64_t), unsigned int a7, const AudioStreamBasicDescription *a8, unsigned int a9)
{
  return 1886547263;
}

uint64_t AudioFileIPODLibHandle::AFAPI_OpenWithCallbacks(AudioFileIPODLibHandle *this, void *a2, int (*a3)(void *, uint64_t, unsigned int, void *, unsigned int *), int (*a4)(void *, uint64_t, unsigned int, const void *, unsigned int *), uint64_t (*a5)(void *), int (*a6)(void *, uint64_t))
{
  return 1886547263;
}

uint64_t AudioFileIPODLibHandle::AFAPI_OpenURL(AudioFileIPODLibHandle *this, const __CFURL *a2)
{
  return 4294967292;
}

uint64_t AudioFileIPODLibHandle::AFAPI_Initialize(AudioFileIPODLibHandle *this, const __CFURL *a2, const AudioStreamBasicDescription *a3)
{
  return 1886547263;
}

uint64_t AudioFileIPODLibHandle::AFAPI_CreateURL(AudioFileIPODLibHandle *this, const __CFURL *a2, const AudioStreamBasicDescription *a3)
{
  return 1886547263;
}

uint64_t AudioFileIPODLibHandle::PrintObject(AudioFileIPODLibHandle *this, __sFILE *a2)
{
  return fprintf(a2, "< AudioFile (ipod-library) %d [%p] >\n", *((_DWORD *)this + 2), this);
}

void AudioFileIPODLibHandle::~AudioFileIPODLibHandle(AudioFileIPODLibHandle *this)
{
  AudioFileIPODLibHandle::~AudioFileIPODLibHandle(this);
  JUMPOUT(0x192FC8940);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1EDF93748;
  xpc_object_t v2 = *((void *)this + 3);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *((void *)this + 3) = 0;
  }
  SharedAudioBufferList::~SharedAudioBufferList((AudioFileIPODLibHandle *)((char *)this + 32));
  BaseOpaqueObject::~BaseOpaqueObject(this);
}

void SharedAudioBufferList::~SharedAudioBufferList(SharedAudioBufferList *this)
{
  *(void *)this = &unk_1EDF935C0;
  xpc_object_t v2 = (void *)*((void *)this + 8);
  if (v2)
  {
    free(v2);
    *((void *)this + 8) = 0;
  }
  SharableMemoryBlock::~SharableMemoryBlock((xpc_object_t *)this);
}

{
  uint64_t vars8;

  SharedAudioBufferList::~SharedAudioBufferList(this);
  JUMPOUT(0x192FC8940);
}

uint64_t AudioFileObjectHandle::AFAPI_RemoveUserData(AudioFileObjectHandle *this)
{
  uint64_t v1 = (unsigned char *)*((void *)this + 3);
  if ((v1[100] & 2) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v1 + 600))();
  }
  else {
    return 1886547263;
  }
}

uint64_t AudioFileObjectHandle::AFAPI_SetUserData(AudioFileObjectHandle *this, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t v5 = (unsigned char *)*((void *)this + 3);
  if ((v5[100] & 2) != 0) {
    return (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t, const void *))(*(void *)v5 + 592))(v5, a2, a3, a4, a5);
  }
  else {
    return 1886547263;
  }
}

uint64_t AudioFileObjectHandle::AFAPI_GetUserDataAtOffset(AudioFileObjectHandle *this, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, void *a6)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, unsigned int *, void *))(**((void **)this + 3)
                                                                                              + 584))(*((void *)this + 3), a2, a3, a4, a5, a6);
}

uint64_t AudioFileObjectHandle::AFAPI_GetUserData(AudioFileObjectHandle *this, uint64_t a2, uint64_t a3, unsigned int *a4, void *a5)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, unsigned int *, void *))(**((void **)this + 3) + 576))(*((void *)this + 3), a2, a3, a4, a5);
}

uint64_t AudioFileObjectHandle::AFAPI_GetUserDataSize64(AudioFileObjectHandle *this, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, unint64_t *))(**((void **)this + 3) + 568))(*((void *)this + 3), a2, a3, a4);
}

uint64_t AudioFileObjectHandle::AFAPI_GetUserDataSize(AudioFileObjectHandle *this, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, unsigned int *))(**((void **)this + 3) + 560))(*((void *)this + 3), a2, a3, a4);
}

uint64_t AudioFileObjectHandle::AFAPI_CountUserData(AudioFileObjectHandle *this, uint64_t a2, unsigned int *a3)
{
  return (*(uint64_t (**)(void, uint64_t, unsigned int *))(**((void **)this + 3) + 552))(*((void *)this + 3), a2, a3);
}

uint64_t AudioFileObjectHandle::AFAPI_SetProperty(AudioFileObjectHandle *this, int a2, unsigned int a3, const void *a4)
{
  xpc_object_t v4 = (unsigned char *)*((void *)this + 3);
  if (a2 == 1969321067 || (v4[100] & 2) != 0) {
    return (*(uint64_t (**)(void))(*(void *)v4 + 168))();
  }
  else {
    return 1886547263;
  }
}

uint64_t AudioFileObjectHandle::AFAPI_WritePacketsWithDependencyInfo(uint64_t a1)
{
  uint64_t v1 = *(unsigned char **)(a1 + 24);
  if ((v1[100] & 2) != 0) {
    return (*(uint64_t (**)(unsigned char *))(*(void *)v1 + 144))(v1);
  }
  else {
    return 1886547263;
  }
}

uint64_t AudioFileObjectHandle::AFAPI_WritePackets(AudioFileObjectHandle *this, uint64_t a2, uint64_t a3, const AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, const void *a7)
{
  uint64_t v7 = (unsigned char *)*((void *)this + 3);
  if ((v7[100] & 2) != 0) {
    return (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, const AudioStreamPacketDescription *, uint64_t, unsigned int *, const void *))(*(void *)v7 + 136))(v7, a2, a3, a4, a5, a6, a7);
  }
  else {
    return 1886547263;
  }
}

uint64_t AudioFileObjectHandle::AFAPI_ReadPacketData(AudioFileObjectHandle *this, uint64_t a2, unsigned int *a3, AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, void *a7)
{
  return (*(uint64_t (**)(void, uint64_t, unsigned int *, AudioStreamPacketDescription *, uint64_t, unsigned int *, void *))(**((void **)this + 3) + 96))(*((void *)this + 3), a2, a3, a4, a5, a6, a7);
}

uint64_t AudioFileObjectHandle::AFAPI_WriteBytes(AudioFileObjectHandle *this, uint64_t a2, uint64_t a3, unsigned int *a4, const void *a5)
{
  uint64_t v5 = (_DWORD *)*((void *)this + 3);
  if (v5[10]) {
    return (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t, unsigned int *, const void *))(*(void *)v5 + 80))(v5, a2, a3, a4, a5);
  }
  else {
    return 1869627199;
  }
}

uint64_t AudioFileObjectHandle::AFAPI_ReadBytes(AudioFileObjectHandle *this, uint64_t a2, uint64_t a3, unsigned int *a4, void *a5)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, unsigned int *, void *))(**((void **)this + 3) + 72))(*((void *)this + 3), a2, a3, a4, a5);
}

uint64_t AudioFileObjectHandle::AFAPI_Optimize(AudioFileObject **this)
{
  return AudioFileObject::DoOptimize(this[3]);
}

void AudioFileObjectHandle::AFAPI_InitializeWithCallbacks(AudioFileObject **this, void *a2, int (*a3)(void *, uint64_t, unsigned int, void *, unsigned int *), int (*a4)(void *, uint64_t, unsigned int, const void *, unsigned int *), uint64_t (*a5)(void *), int (*a6)(void *, uint64_t), unsigned int a7, const AudioStreamBasicDescription *a8, unsigned int a9)
{
}

void AudioFileObjectHandle::AFAPI_OpenWithCallbacks(AudioFileObject **this, void *a2, int (*a3)(void *, uint64_t, unsigned int, void *, unsigned int *), int (*a4)(void *, uint64_t, unsigned int, const void *, unsigned int *), uint64_t (*a5)(void *), int (*a6)(void *, uint64_t))
{
}

uint64_t AudioFileObjectHandle::AFAPI_Initialize(AudioFileObjectHandle *this, const __CFURL *a2, const AudioStreamBasicDescription *a3, uint64_t a4)
{
  uint64_t v7 = (AudioFileObject *)*((void *)this + 3);
  AudioFileObject::SetURL(v7, a2);
  *((unsigned char *)v7 + 10std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 3;
  *((unsigned char *)v7 + 138) = (a4 & 2) == 0;
  int64_t v8 = *(uint64_t (**)(AudioFileObject *, const __CFURL *, const AudioStreamBasicDescription *, uint64_t))(*(void *)v7 + 32);
  return v8(v7, a2, a3, a4);
}

uint64_t AudioFileObjectHandle::AFAPI_CreateURL(AudioFileObject **this, const AudioStreamBasicDescription *a2, AudioStreamBasicDescription *a3, char a4)
{
  return AudioFileObject::DoCreate(this[3], a2, a3, a4);
}

uint64_t AudioFileObjectHandle::PrintObject(AudioFileObjectHandle *this, __sFILE *a2)
{
  return fprintf(a2, "< AudioFile %d [%p] >\n", *((_DWORD *)this + 2), this);
}

Class ___ZN22AudioFileIPODLibHandleC2EPK7__CFURLj_block_invoke(int a1, id a2)
{
  if (a2 != (id)MEMORY[0x1E4F14528] && a2 != 0 && a2 != (id)MEMORY[0x1E4F14520]) {
    return object_getClass(a2);
  }
  return result;
}

Class ___ZN22AudioFileIPODLibHandleC2EPK7__CFURLj_block_invoke_2(int a1, id a2)
{
  if (a2) {
    return object_getClass(a2);
  }
  return result;
}

uint64_t MP4BoxParser_TrackFragmentHeader::Init(MP4BoxParser **this)
{
  uint64_t result = MP4BoxParser_Full::Initialize((MP4BoxParser_Full *)this);
  if (!result)
  {
    if (*((_DWORD *)this + 5) != 1952868452) {
      return 4294967294;
    }
    uint64_t v3 = (*((unsigned int (**)(MP4BoxParser **))*this + 3))(this);
    uint64_t result = MP4BoxParser::ReadDataSourceBytes(this[1], v3, 4uLL, (char *)this + 60);
    *((_DWORD *)this + 15) = bswap32(*((_DWORD *)this + 15));
    uint64_t v4 = v3 + 4;
    char v5 = *((unsigned char *)this + 59);
    if (v5)
    {
      uint64_t result = MP4BoxParser::ReadDataSourceBytes(this[1], v3 + 4, 8uLL, this + 8);
      this[8] = (MP4BoxParser *)bswap64((unint64_t)this[8]);
      uint64_t v4 = v3 + 12;
      char v5 = *((unsigned char *)this + 59);
    }
    else if ((*((unsigned char *)this + 57) & 2) != 0)
    {
      *((unsigned char *)this + 89) = 1;
    }
    unsigned int v6 = 0;
    if ((v5 & 2) != 0)
    {
      uint64_t result = MP4BoxParser::ReadDataSourceBytes(this[1], v4, 4uLL, &v6);
      *((_DWORD *)this + 18) = bswap32(v6);
      v4 += 4;
      char v5 = *((unsigned char *)this + 59);
      if ((v5 & 8) == 0)
      {
LABEL_10:
        if ((v5 & 0x10) == 0) {
          goto LABEL_11;
        }
        goto LABEL_17;
      }
    }
    else if ((v5 & 8) == 0)
    {
      goto LABEL_10;
    }
    uint64_t result = MP4BoxParser::ReadDataSourceBytes(this[1], v4, 4uLL, &v6);
    *((_DWORD *)this + 19) = bswap32(v6);
    v4 += 4;
    char v5 = *((unsigned char *)this + 59);
    if ((v5 & 0x10) == 0)
    {
LABEL_11:
      if ((v5 & 0x20) == 0)
      {
LABEL_13:
        *((unsigned char *)this + 88) = (*((unsigned char *)this + 57) & 1) == 0;
        return result;
      }
LABEL_12:
      uint64_t result = MP4BoxParser::ReadDataSourceBytes(this[1], v4, 4uLL, &v6);
      *((_DWORD *)this + 21) = bswap32(v6);
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = MP4BoxParser::ReadDataSourceBytes(this[1], v4, 4uLL, &v6);
    *((_DWORD *)this + 2std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = bswap32(v6);
    v4 += 4;
    if ((*((unsigned char *)this + 59) & 0x20) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  return result;
}

void MP4BoxParser_TrackFragmentHeader::~MP4BoxParser_TrackFragmentHeader(MP4BoxParser_TrackFragmentHeader *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDF8DA18;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  JUMPOUT(0x192FC8940);
}

{
  uint64_t v2;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDF8DA18;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

uint64_t MP4BoxParser_TrackFragmentHeader::MP4BoxParser_TrackFragmentHeader(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_1EDF8DA18;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 88))(a2, a3);
  *(unsigned char *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 2std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = 8;
  *(void *)a1 = &unk_1EDF94860;
  *(_DWORD *)(a1 + 6std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
  *(void *)(a1 + 64) = -1;
  *(void *)(a1 + 72) = -1;
  *(void *)(a1 + 8std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = -1;
  *(_WORD *)(a1 + 88) = 0;
  return a1;
}

uint64_t clientParamToSynthParam(int a1, int *a2, float *a3, float a4)
{
  if (a1 <= 1019)
  {
    switch(a1)
    {
      case 1000:
        float v4 = fminf(a4, 1.0);
        BOOL v5 = a4 <= 0.0;
        float v6 = 0.0;
        if (!v5) {
          float v6 = v4;
        }
        a1 = 5000;
        if (!a2) {
          goto LABEL_71;
        }
        goto LABEL_70;
      case 1001:
        float v12 = fminf(a4, 1.0);
        if (a4 <= -1.0) {
          float v13 = -1.0;
        }
        else {
          float v13 = v12;
        }
        float v6 = v13 * 0.5 + 0.5;
        a1 = 5001;
        if (!a2) {
          goto LABEL_71;
        }
        goto LABEL_70;
      case 1010:
        float v14 = fminf(a4, 1.0);
        if (a4 <= -1.0) {
          float v15 = -1.0;
        }
        else {
          float v15 = v14;
        }
        float v6 = (float)(v15 * 63.5) + 63.5;
        a1 = 73;
        if (!a2) {
          goto LABEL_71;
        }
        goto LABEL_70;
      case 1011:
        float v16 = fminf(a4, 1.0);
        if (a4 <= -1.0) {
          float v17 = -1.0;
        }
        else {
          float v17 = v16;
        }
        float v6 = (float)(v17 * 63.5) + 63.5;
        a1 = 75;
        if (!a2) {
          goto LABEL_71;
        }
        goto LABEL_70;
      case 1012:
        float v18 = fminf(a4, 1.0);
        if (a4 <= -1.0) {
          float v19 = -1.0;
        }
        else {
          float v19 = v18;
        }
        float v6 = (float)(v19 * 63.5) + 63.5;
        a1 = 72;
        if (!a2) {
          goto LABEL_71;
        }
        goto LABEL_70;
      case 1013:
        float v20 = fminf(a4, 1.0);
        if (a4 <= -1.0) {
          float v21 = -1.0;
        }
        else {
          float v21 = v20;
        }
        float v6 = v21 * 0.5 + 0.5;
        a1 = 5004;
        if (!a2) {
          goto LABEL_71;
        }
        goto LABEL_70;
      case 1015:
        float v22 = fminf(a4, 1.0);
        if (a4 <= -1.0) {
          float v23 = -1.0;
        }
        else {
          float v23 = v22;
        }
        float v6 = v23 * 0.5 + 0.5;
        a1 = 5011;
        if (!a2) {
          goto LABEL_71;
        }
        goto LABEL_70;
      default:
        goto LABEL_25;
    }
  }
  uint64_t v7 = 4294967292;
  if (a1 <= 2009)
  {
    switch(a1)
    {
      case 1020:
        return v7;
      case 2000:
        float v26 = fminf(a4, 1.0);
        BOOL v5 = a4 <= 0.0;
        float v6 = 0.0;
        if (!v5) {
          float v6 = v26;
        }
        a1 = 5002;
        if (!a2) {
          goto LABEL_71;
        }
        goto LABEL_70;
      case 2001:
        float v10 = fminf(a4, 1.0);
        if (a4 <= -1.0) {
          float v11 = -1.0;
        }
        else {
          float v11 = v10;
        }
        float v6 = v11 * 0.5 + 0.5;
        a1 = 5003;
        if (!a2) {
          goto LABEL_71;
        }
        goto LABEL_70;
    }
    goto LABEL_25;
  }
  if (a1 > 2011)
  {
    if (a1 == 2012)
    {
      float v27 = fminf(a4, 1.0);
      if (a4 <= -1.0) {
        float v28 = -1.0;
      }
      else {
        float v28 = v27;
      }
      float v6 = (float)(v28 * 63.5) + 63.5;
      a1 = 81;
      if (!a2) {
        goto LABEL_71;
      }
      goto LABEL_70;
    }
    if (a1 == 2020) {
      return v7;
    }
LABEL_25:
    if (a1 > 0xFF) {
      return 4294962494;
    }
    float v30 = 127.0;
    if (a4 < 1.0) {
      float v30 = a4 * 127.0;
    }
    BOOL v5 = a4 <= 0.0;
    float v6 = 0.0;
    if (!v5) {
      float v6 = v30;
    }
    if (!a2) {
      goto LABEL_71;
    }
    goto LABEL_70;
  }
  if (a1 == 2010)
  {
    float v24 = fminf(a4, 1.0);
    if (a4 <= -1.0) {
      float v25 = -1.0;
    }
    else {
      float v25 = v24;
    }
    float v6 = (float)(v25 * 63.5) + 63.5;
    a1 = 79;
    if (!a2) {
      goto LABEL_71;
    }
  }
  else
  {
    float v8 = fminf(a4, 1.0);
    if (a4 <= -1.0) {
      float v9 = -1.0;
    }
    else {
      float v9 = v8;
    }
    float v6 = (float)(v9 * 63.5) + 63.5;
    a1 = 80;
    if (!a2) {
      goto LABEL_71;
    }
  }
LABEL_70:
  *a2 = a1;
LABEL_71:
  uint64_t v7 = 0;
  if (a3) {
    *a3 = v6;
  }
  return v7;
}

uint64_t acv2::AudioConverterBase::SetPropertySettings(acv2::AudioConverterBase *this, const __CFDictionary *a2)
{
  return 0;
}

void acv2::AudioConverterBase::GetPropertySettings(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t acv2::AudioConverterBase::HasPropertySettings(acv2::AudioConverterBase *this)
{
  return 0;
}

void acv2::AudioConverterBase::description(int16x8_t *this@<X0>, void *a2@<X8>)
{
  float v4 = (const void *)(*(uint64_t (**)(int16x8_t *))(this->i64[0] + 56))(this);
  if (v4)
  {
    BOOL v5 = v4;
    CFRetain(v4);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v25, v5);
  }
  else
  {
    CFStringRef v25 = 0;
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"  ", 2);
  if (!v25)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  float v6 = __p;
  applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v25);
  if (v17.i8[7] < 0) {
    float v6 = (void **)__p[0];
  }
  size_t v7 = strlen((const char *)v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)" ", 1);
  float v8 = (void *)std::ostream::operator<<();
  LOBYTE(v19[0]) = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v19, 1);
  if (v17.i8[7] < 0) {
    operator delete(__p[0]);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"    ", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Input:  ", 8);
  int16x8_t v9 = this[2];
  *(int16x8_t *)std::string __p = this[1];
  int16x8_t v17 = v9;
  uint64_t v18 = this[3].i64[0];
  float v10 = v19;
  CA::StreamDescription::AsString((CA::StreamDescription *)v19, __p, *(double *)__p, v9);
  if (v20 < 0) {
    float v10 = (void **)v19[0];
  }
  size_t v11 = strlen((const char *)v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)v10, v11);
  char v26 = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)&v26, 1);
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"    ", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Output: ", 8);
  int16x8_t v12 = *(int16x8_t *)((char *)this + 72);
  *(int16x8_t *)std::string __p = *(int16x8_t *)((char *)this + 56);
  int16x8_t v17 = v12;
  uint64_t v18 = this[5].i64[1];
  float v13 = v19;
  CA::StreamDescription::AsString((CA::StreamDescription *)v19, __p, *(double *)__p, v12);
  if (v20 < 0) {
    float v13 = (void **)v19[0];
  }
  size_t v14 = strlen((const char *)v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)v13, v14);
  char v26 = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)&v26, 1);
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a2, (uint64_t)v22);
  uint64_t v21 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v22[-1] + *(void *)(v21 - 2std::__tree<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::__map_value_compare<void *,std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>>>::destroy(*((void **)this + 4)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v22[0] = MEMORY[0x1E4FBA470] + 16;
  if (v23 < 0) {
    operator delete((void *)v22[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FC8840](&v24);
  if (v25) {
    CFRelease(v25);
  }
}

void sub_18FF9C090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  __cxa_free_exception(v24);
  std::ostringstream::~ostringstream((uint64_t)&a24);
  applesauce::CF::StringRef::~StringRef((const void **)(v25 - 48));
  _Unwind_Resume(a1);
}

void acv2::AudioConverterBase::createCapturer(void *a1, const char *a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  int16x8_t v9 = getenv("TMPDIR");
  if (v9) {
    float v10 = v9;
  }
  else {
    float v10 = "/tmp";
  }
  pid_t v11 = getpid();
  int v12 = acv2::AudioConverterBase::createCapturer(char const*,std::unique_ptr<AudioConverterCapturer> &,CA::StreamDescription const&,void *)::counter++;
  snprintf(__str, 0x80uLL, "%s/%d-%d-%d-%.f-%p%s.caf", v10, v11, v12, *(_DWORD *)(a4 + 28), *(double *)a4, a5, a2);
  std::string::basic_string[abi:ne180100]<0>(a1, __str);
  AudioConverterLog();
  float v13 = AudioConverterLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::__split_buffer<std::string> buf = 136315906;
    float v16 = "AudioConverterBase.cpp";
    __int16 v17 = 1024;
    int v18 = 68;
    __int16 v19 = 2080;
    char v20 = __str;
    __int16 v21 = 2048;
    float v22 = a5;
    _os_log_impl(&dword_18FEC0000, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Opening capturer %s for converter -> %p", buf, 0x26u);
  }
  operator new();
}

void sub_18FF9C5D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  MEMORY[0x192FC8940](v23, 0x1032C40BE2BDED3);
  if (*(char *)(a16 + 23) < 0) {
    operator delete(*(void **)a16);
  }
  _Unwind_Resume(a1);
}

OpaqueExtAudioFile *acv2::AudioConverterBase::writeCapture(acv2::AudioConverterBase *this, AudioConverterCapturer *a2, const ACAudioSpan *a3)
{
  float v4 = (const AudioBufferList *)*((void *)a2 + 2);
  uint64_t mNumberBuffers = v4->mNumberBuffers;
  if (mNumberBuffers)
  {
    UInt32 v6 = *((_DWORD *)a2 + 2);
    p_mDataByteSize = &v4->mBuffers[0].mDataByteSize;
    do
    {
      UInt32 *p_mDataByteSize = v6;
      p_mDataByteSize += 4;
      --mNumberBuffers;
    }
    while (mNumberBuffers);
  }
  return AudioConverterCapturer::write(this, v4, *((const AudioStreamPacketDescription **)a2 + 4), *(_DWORD *)a2);
}

uint64_t MP4BoxParser_TrackFragment::Init(MP4BoxParser_TrackFragment *this)
{
  uint64_t v2 = MP4BoxParser::Initialize(this);
  if (!v2)
  {
    if (*((_DWORD *)this + 5) == 1953653094)
    {
      if (*((unsigned char *)this + 64)) {
        operator new();
      }
      uint64_t v2 = 0;
      if ((*(unsigned int (**)(void))(**((void **)this + 1) + 144))(*((void *)this + 1))) {
        operator new();
      }
    }
    else
    {
      return 4294967294;
    }
  }
  return v2;
}

void MP4BoxParser_TrackFragment::~MP4BoxParser_TrackFragment(MP4BoxParser_TrackFragment *this)
{
  MP4BoxParser_TrackFragment::~MP4BoxParser_TrackFragment(this);
  JUMPOUT(0x192FC8940);
}

{
  uint64_t v2;
  CompressedPacketTable *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;

  *(void *)this = &unk_1EDF94090;
  if (*((unsigned char *)this + 64))
  {
    uint64_t v2 = *((void *)this + 9);
    if (v2)
    {
      std::__list_imp<MP4BoxInfo>::clear(*((uint64_t **)this + 9));
      MEMORY[0x192FC8940](v2, 0x1020C4062D53EE8);
    }
  }
  uint64_t v3 = (CompressedPacketTable *)*((void *)this + 10);
  if (v3)
  {
    CompressedPacketTable::~CompressedPacketTable(v3);
    MEMORY[0x192FC8940]();
  }
  float v4 = (void *)*((void *)this + 27);
  if (v4)
  {
    *((void *)this + 28) = v4;
    operator delete(v4);
  }
  BOOL v5 = (void *)*((void *)this + 23);
  if (v5)
  {
    *((void *)this + 24) = v5;
    operator delete(v5);
  }
  UInt32 v6 = (void *)*((void *)this + 20);
  if (v6)
  {
    *((void *)this + 21) = v6;
    operator delete(v6);
  }
  size_t v7 = (void *)*((void *)this + 16);
  if (v7)
  {
    *((void *)this + 17) = v7;
    operator delete(v7);
  }
  float v8 = (void *)*((void *)this + 13);
  if (v8)
  {
    *((void *)this + 14) = v8;
    operator delete(v8);
  }
  int16x8_t v9 = *((void *)this + 1);
  *(void *)this = &unk_1EDF8DA18;
  *((void *)this + 1) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
}

void std::__list_imp<MP4BoxInfo>::clear(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        BOOL v5 = (uint64_t *)v3[1];
        UInt32 v6 = (std::__shared_weak_count *)v3[6];
        if (v6) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        }
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t MP4BoxParser_TrackFragment::GetTrackID(MP4BoxParser_TrackFragment *this, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2 == a2) {
    return 0;
  }
  while (*(_DWORD *)(v2 + 16) != 1952868452)
  {
    uint64_t v2 = *(void *)(v2 + 8);
    if (v2 == a2) {
      return 0;
    }
  }
  MP4BoxParser_TrackFragmentHeader::MP4BoxParser_TrackFragmentHeader((uint64_t)&v7, (uint64_t)this, *(void *)(v2 + 32));
  if (MP4BoxParser_TrackFragmentHeader::Init(&v7))
  {
    uint64_t v3 = v8;
    size_t v7 = (MP4BoxParser *)&unk_1EDF8DA18;
    uint64_t v8 = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    return 0;
  }
  uint64_t v4 = v9;
  uint64_t v6 = v8;
  size_t v7 = (MP4BoxParser *)&unk_1EDF8DA18;
  uint64_t v8 = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return v4;
}

void sub_18FF9CB64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MP4BoxParser_TrackFragment::ParsePackets(uint64_t this)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  if (!*(_DWORD *)(this + 88))
  {
    uint64_t v1 = this;
    uint64_t v2 = *(void *)(this + 72);
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3 != v2)
    {
      while (*(_DWORD *)(v3 + 16) != 1952868452)
      {
        uint64_t v3 = *(void *)(v3 + 8);
        if (v3 == v2) {
          return this;
        }
      }
      MP4BoxParser_TrackFragmentHeader::MP4BoxParser_TrackFragmentHeader((uint64_t)&v45, *(void *)(this + 8), *(void *)(v3 + 32));
      if (MP4BoxParser_TrackFragmentHeader::Init(&v45)) {
        goto LABEL_8;
      }
      uint64_t v4 = v47;
      if (v47 == -1)
      {
        if (!v51 && *(_DWORD *)(*(void *)(v1 + 56) + 76)) {
          goto LABEL_8;
        }
        uint64_t v4 = *(void *)(v1 + 256);
      }
      unsigned int v5 = v48;
      unsigned int v32 = v49;
      if (v48 == -1 && (unsigned int v5 = *(_DWORD *)(v1 + 272), v5 == -1))
      {
        unsigned int v5 = 0;
      }
      else if (v5)
      {
        *(_DWORD *)(v1 + 248) = v5;
      }
      if (v32 == -1)
      {
        unsigned int v6 = *(_DWORD *)(v1 + 276);
        BOOL v7 = v6 != -1;
        if (v6 == -1) {
          unsigned int v6 = 0;
        }
        char v31 = v7;
        unsigned int v32 = v6;
      }
      else
      {
        char v31 = 1;
      }
      if (v50)
      {
        uint64_t v34 = 0;
        uint64_t v8 = *(void *)(v1 + 72);
        uint64_t v9 = *(void *)(v8 + 8);
        if (v9 != v8)
        {
          unsigned int v10 = 0;
          pid_t v11 = (unsigned char *)(v1 + 208);
          uint64_t v30 = v4;
          uint64_t v12 = v4;
          while (1)
          {
            unsigned int v13 = 0;
            uint64_t v14 = v9;
            do
            {
              if (*(_DWORD *)(v14 + 16) == 1953658222) {
                ++v13;
              }
              uint64_t v14 = *(void *)(v14 + 8);
            }
            while (v14 != v8);
            if (v10 >= v13) {
              goto LABEL_69;
            }
            int v15 = 0;
            while (*(_DWORD *)(v9 + 16) != 1953658222)
            {
LABEL_37:
              uint64_t v9 = *(void *)(v9 + 8);
              if (v9 == v8) {
                goto LABEL_68;
              }
            }
            if (v15 != v10)
            {
              ++v15;
              goto LABEL_37;
            }
            uint64_t v16 = *(void *)(v1 + 8);
            uint64_t v17 = *(void *)(v9 + 32);
            v35[0] = (MP4BoxParser *)&unk_1EDF8DA18;
            (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 88))(v16, v17);
            char v36 = 0;
            int v37 = 0;
            uint64_t v38 = 0;
            char v39 = 0;
            int v40 = 8;
            v35[0] = (MP4BoxParser *)&unk_1EDF944C8;
            long long v41 = 0u;
            long long v42 = 0u;
            uint64_t v43 = -1;
            int v44 = 0;
            if (!MP4BoxParser_TrackFragmentRun::Init(v35))
            {
              int v18 = HIDWORD(v42);
              if (v43 != -1) {
                uint64_t v12 = v4 + (int)v43;
              }
              if (HIDWORD(v42)) {
                break;
              }
            }
LABEL_67:
            MP4BoxParser_TrackFragmentRun::~MP4BoxParser_TrackFragmentRun((MP4BoxParser_TrackFragmentRun *)v35);
            uint64_t v8 = *(void *)(v1 + 72);
LABEL_68:
            ++v10;
            uint64_t v9 = *(void *)(v8 + 8);
            if (v9 == v8) {
              goto LABEL_69;
            }
          }
          int v19 = 0;
          while (1)
          {
            *(void *)&long long v33 = v12;
            unsigned int v20 = v5;
            if (BYTE1(v44))
            {
              uint64_t v21 = (DWORD2(v42) * v19);
              if (*((void *)&v41 + 1) - (void)v41 < v21 + (unint64_t)DWORD2(v42)) {
                goto LABEL_66;
              }
              unsigned int v20 = bswap32(*(_DWORD *)(v41 + v21 + 4 * v44));
            }
            if (!v20)
            {
LABEL_66:
              *(_DWORD *)(v1 + 88) += v18;
              uint64_t v4 = v30;
              goto LABEL_67;
            }
            if (v20 > *(_DWORD *)(v1 + 248)) {
              *(_DWORD *)(v1 + 248) = v20;
            }
            *(void *)(v1 + 240) += v20;
            HIDWORD(v33) = v20;
            float v22 = *(char ***)(v1 + 80);
            if (v22) {
              CompressedPacketTable::push_back(v22, &v33);
            }
            unsigned int v23 = HIDWORD(v43);
            if (BYTE2(v44))
            {
              if (HIDWORD(v43) == -1)
              {
                uint64_t v24 = (DWORD2(v42) * v19);
                if (*((void *)&v41 + 1) - (void)v41 < v24 + (unint64_t)DWORD2(v42))
                {
LABEL_61:
                  *pid_t v11 = 1;
LABEL_64:
                  uint64_t v34 = (v19 + *(_DWORD *)(v1 + 88));
                  SyncSampleTable::append_entry(v1 + 208, &v34);
                  goto LABEL_65;
                }
                unsigned int v23 = bswap32(*(_DWORD *)(v41 + v24 + 4 * (BYTE1(v44) + v44)));
              }
              else if (v19)
              {
                goto LABEL_61;
              }
            }
            else
            {
              if (v19 != 0 || HIDWORD(v43) == -1) {
                unsigned int v23 = v32;
              }
              if (!((v19 == 0 && HIDWORD(v43) != -1) | v31 & 1)) {
                goto LABEL_65;
              }
            }
            *pid_t v11 = 1;
            if ((v23 & 0x10000) == 0) {
              goto LABEL_64;
            }
LABEL_65:
            v12 += v20;
            if (v18 == ++v19) {
              goto LABEL_66;
            }
          }
        }
LABEL_69:
        uint64_t v25 = *(DataSource **)(v1 + 8);
        char v26 = *(uint8_t **)(v1 + 56);
        MP4BoxParser_Track::GetInfoFromTrackSubBoxes((MP4BoxParser_Track *)v26);
        MP4GetRollGroup(v25, v8, 0, 1919904876, v26 + 120, *(_DWORD *)(v1 + 88), v1 + 96);
        if (!*(unsigned char *)(v1 + 96))
        {
          float v27 = *(DataSource **)(v1 + 8);
          uint64_t v28 = *(void *)(v1 + 72);
          char v29 = *(uint8_t **)(v1 + 56);
          MP4BoxParser_Track::GetInfoFromTrackSubBoxes((MP4BoxParser_Track *)v29);
          MP4GetRollGroup(v27, v28, 0, 1886547820, v29 + 208, *(_DWORD *)(v1 + 88), v1 + 152);
        }
      }
LABEL_8:
      this = v46;
      unsigned int v45 = (MP4BoxParser *)&unk_1EDF8DA18;
      uint64_t v46 = 0;
      if (this) {
        return (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
      }
    }
  }
  return this;
}

void sub_18FF9D090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a32) {
    (*(void (**)(uint64_t))(*(void *)a32 + 8))(a32);
  }
  _Unwind_Resume(exception_object);
}

void SyncSampleTable::append_entry(uint64_t a1, void *a2)
{
  unsigned int v5 = *(char **)(a1 + 16);
  unint64_t v4 = *(void *)(a1 + 24);
  if ((unint64_t)v5 >= v4)
  {
    BOOL v7 = *(char **)(a1 + 8);
    uint64_t v8 = (v5 - v7) >> 3;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 2 > v9) {
      unint64_t v9 = v10 >> 2;
    }
    BOOL v11 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v9;
    }
    if (v12)
    {
      unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v12);
      BOOL v7 = *(char **)(a1 + 8);
      unsigned int v5 = *(char **)(a1 + 16);
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = (void *)(v12 + 8 * v8);
    unint64_t v15 = v12 + 8 * v13;
    *uint64_t v14 = *a2;
    unsigned int v6 = v14 + 1;
    while (v5 != v7)
    {
      uint64_t v16 = *((void *)v5 - 1);
      v5 -= 8;
      *--uint64_t v14 = v16;
    }
    *(void *)(a1 + 8) = v14;
    *(void *)(a1 + 16) = v6;
    *(void *)(a1 + 24) = v15;
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    *(void *)unsigned int v5 = *a2;
    unsigned int v6 = v5 + 8;
  }
  *(void *)(a1 + 16) = v6;
  *(unsigned char *)a1 = 1;
}

void acv2::PostDecodeRenderer::~PostDecodeRenderer(AudioUnit *this)
{
  acv2::PostDecodeRenderer::~PostDecodeRenderer(this);
  JUMPOUT(0x192FC8940);
}

{
  OpaqueAudioComponentInstance *v2;
  std::pmr **v3;

  *this = (AudioUnit)&unk_1EDF959E8;
  AudioUnitUninitialize(this[1]);
  AudioComponentInstanceDispose(this[1]);
  uint64_t v2 = this[9];
  if (v2)
  {
    this[10] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::pmr **)this[8];
  this[8] = 0;
  if (v3) {
    std::default_delete<CA::AudioBuffers>::operator()[abi:ne180100](v3);
  }
}

void std::default_delete<CA::AudioBuffers>::operator()[abi:ne180100](std::pmr **a1)
{
  ExtendedAudioBufferList_Destroy(*a1);
  JUMPOUT(0x192FC8940);
}

BOOL acv2::PostDecodeRenderer::SupportsProperty(acv2::PostDecodeRenderer *this, AudioUnitPropertyID a2)
{
  Boolean outWritable = 0;
  UInt32 outDataSize = 0;
  return AudioUnitGetPropertyInfo(this, a2, 0, 0, &outDataSize, &outWritable) == 0;
}

uint64_t MP4BoxParser_TrackExtends::Init(MP4BoxParser_TrackExtends *this)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t result = MP4BoxParser_Full::Initialize(this);
  if (!result)
  {
    if (*((_DWORD *)this + 5) == 1953654136)
    {
      int8x16_t v4 = 0uLL;
      unsigned int v5 = 0;
      unsigned int v3 = (*(uint64_t (**)(MP4BoxParser_TrackExtends *))(*(void *)this + 24))(this);
      uint64_t result = MP4BoxParser::ReadDataSourceBytes(*((MP4BoxParser **)this + 1), v3, 0x14uLL, &v4);
      if (!result)
      {
        *(int8x16_t *)((char *)this + 6std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = vrev32q_s8(v4);
        *((_DWORD *)this + 19) = bswap32(v5);
      }
    }
    else
    {
      return 4294967294;
    }
  }
  return result;
}

void MP4BoxParser_TrackExtends::~MP4BoxParser_TrackExtends(MP4BoxParser_TrackExtends *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDF8DA18;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  JUMPOUT(0x192FC8940);
}

{
  uint64_t v2;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDF8DA18;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

uint64_t MP4BoxParser_Track::GetNumPackets(MP4BoxParser_Track *this)
{
  if (MP4BoxParser_Track::GetInfoFromTrackSubBoxes(this)) {
    return 0;
  }
  else {
    return *((unsigned int *)this + 25);
  }
}

uint64_t MP4BoxParser_Track::GetInfoFromTrackSubBoxes(MP4BoxParser_Track *this)
{
  uint64_t v98 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 80)) {
    return 0;
  }
  uint64_t v3 = *((void *)this + 8);
  if (!v3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = *(void *)(v3 + 8);
  if (v4 == v3) {
    return 0xFFFFFFFFLL;
  }
  while (*(_DWORD *)(v4 + 16) != 1835297121)
  {
    uint64_t v4 = *(void *)(v4 + 8);
    if (v4 == v3) {
      return 0xFFFFFFFFLL;
    }
  }
  uint64_t v5 = *(void *)(v4 + 40);
  if (!v5) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = *(void *)(v5 + 8);
  if (v6 == v5) {
    return 0xFFFFFFFFLL;
  }
  uint64_t SampleSize = 0xFFFFFFFFLL;
  while (*(_DWORD *)(v6 + 16) != 1835296868)
  {
    uint64_t v6 = *(void *)(v6 + 8);
    if (v6 == v5) {
      return SampleSize;
    }
  }
  uint64_t v8 = *(std::__shared_weak_count **)(v6 + 48);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *((void *)this + 1);
  long long v90 = (MP4BoxParser *)&unk_1EDF8DA18;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v9 + 88))(&v91);
  char v92 = 0;
  int v93 = 0;
  uint64_t v94 = 0;
  char v95 = 0;
  int v96 = 8;
  long long v90 = (MP4BoxParser *)&unk_1EDF93B60;
  int v97 = 0;
  uint64_t SampleSize = MP4BoxParser_MediaHeader::Init(&v90);
  if (SampleSize) {
    goto LABEL_19;
  }
  *((_DWORD *)this + 24) = v97;
  MP4BoxParser_Track::GetSampleTableBox((MP4BoxParser_Track *)v68, *((void *)this + 8));
  if (!v72)
  {
    uint64_t SampleSize = 0xFFFFFFFFLL;
LABEL_19:
    int v10 = 1;
    goto LABEL_20;
  }
  uint64_t v12 = v70;
  if (v70)
  {
    MP4BoxParser_Track::GetChunkOffsetBox((MP4BoxParser_Track *)v64, *((void *)this + 8));
    if (v67)
    {
      MP4BoxParser_ChunkOffset::MP4BoxParser_ChunkOffset((MP4BoxParser_ChunkOffset *)&v87, *((DataSource **)this + 1), v65);
      uint64_t SampleSize = MP4BoxParser_ChunkOffset::Init(v13);
      if (SampleSize)
      {
LABEL_30:
        int v10 = 1;
LABEL_31:
        uint64_t v14 = v88;
        char v87 = &unk_1EDF8DA18;
        uint64_t v88 = 0;
        if (v14) {
          (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
        }
        if (v66) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v66);
        }
        goto LABEL_38;
      }
      if (v89)
      {
        v77[0] = 0;
        MP4BoxParser_ChunkOffset::GetChunkOffset((MP4BoxParser_ChunkOffset *)&v87, 0, v77);
        uint64_t v15 = v77[0];
      }
      else
      {
        uint64_t v15 = 0;
      }
      *((void *)this + 11) = v15;
      MP4BoxParser_Track::GetSampleSizeBox((MP4BoxParser_Track *)v60, (uint64_t)this);
      if (!v63)
      {
        uint64_t SampleSize = 0xFFFFFFFFLL;
        goto LABEL_30;
      }
      MP4BoxParser_SampleSize::MP4BoxParser_SampleSize((MP4BoxParser_SampleSize *)&v82, *((DataSource **)this + 1), v61);
      uint64_t SampleSize = MP4BoxParser_SampleSize::Init(&v82);
      if (SampleSize) {
        goto LABEL_50;
      }
      *((_DWORD *)this + 25) = v86;
      *((void *)this + 13) = MP4BoxParser_SampleSize::GetByteCount((MP4BoxParser_SampleSize *)&v82);
      if (v84 == 1937011578)
      {
        if (v85)
        {
          uint64_t SampleSize = MP4BoxParser_SampleSize::GetSampleSize((MP4BoxParser_SampleSize *)&v82, 0, (unsigned int *)this + 92);
          if (SampleSize) {
            goto LABEL_50;
          }
        }
      }
      uint64_t v17 = v69;
      uint64_t SampleSize = MP4GetRollGroupDescription(*((void *)this + 1), v12, v69, 1919904876, (uint64_t)this + 120, v16);
      if (SampleSize) {
        goto LABEL_50;
      }
      uint64_t SampleSize = MP4GetRollGroupDescription(*((void *)this + 1), v12, v17, 1886547820, (uint64_t)this + 208, v18);
      if (SampleSize) {
        goto LABEL_50;
      }
      MP4GetRollGroup(*((DataSource **)this + 1), v12, v17, 1919904876, (uint8_t *)this + 120, *((_DWORD *)this + 25), (uint64_t)this + 152);
      if (!*((unsigned char *)this + 152)) {
        MP4GetRollGroup(*((DataSource **)this + 1), v12, v17, 1886547820, (uint8_t *)this + 208, *((_DWORD *)this + 25), (uint64_t)this + 240);
      }
      uint64_t v20 = *(void *)(v12 + 8);
      if (v20 != v12)
      {
        while (*(_DWORD *)(v20 + 16) != 1937011571)
        {
          uint64_t v20 = *(void *)(v20 + 8);
          if (v20 == v12) {
            goto LABEL_61;
          }
        }
        MP4BoxParser_SyncSampleTable::MP4BoxParser_SyncSampleTable((MP4BoxParser_SyncSampleTable *)v77, *((DataSource **)this + 1), *(void *)(v20 + 32) + v17);
        uint64_t SampleSize = MP4BoxParser_SyncSampleTable::Init((MP4BoxParser **)v77);
        if (SampleSize
          || v78
          && (uint64_t SampleSize = MP4BoxParser_SyncSampleTable::GetSyncSampleTable((MP4BoxParser_SyncSampleTable *)v77, (MP4BoxParser_Track *)((char *)this + 296)), SampleSize))
        {
          MP4BoxParser_SyncSampleTable::~MP4BoxParser_SyncSampleTable((MP4BoxParser_SyncSampleTable *)v77);
LABEL_50:
          int v10 = 1;
LABEL_51:
          uint64_t v19 = v83;
          long long v82 = (MP4BoxParser *)&unk_1EDF8DA18;
          uint64_t v83 = 0;
          if (v19) {
            (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
          }
          if (v62) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v62);
          }
          goto LABEL_31;
        }
        MP4BoxParser_SyncSampleTable::~MP4BoxParser_SyncSampleTable((MP4BoxParser_SyncSampleTable *)v77);
      }
LABEL_61:
      MP4BoxParser_Track::GetSampleTableSubBox((MP4BoxParser_Track *)v56, *((void *)this + 8), 1937011556);
      if (v59)
      {
        MP4BoxParser_SampleDescription::MP4BoxParser_SampleDescription((uint64_t)v77, *((void *)this + 1), v57);
        uint64_t SampleSize = MP4BoxParser_SampleDescription::Init((MP4BoxParser_SampleDescription *)v77);
        if (SampleSize
          || (MP4BoxParser_SampleDescription::GetASEBoxes((MP4BoxParser_SampleDescription *)v77, (const __CFDictionary **)this + 54), uint64_t v21 = (double *)((char *)this + 328), *((void *)this + 45) = 0, *(_OWORD *)((char *)this + 328) = 0u, *(_OWORD *)((char *)this + 344) = 0u, SampleSize = MP4BoxParser_SampleDescription::GetASBD((MP4BoxParser_SampleDescription *)v77, (AudioStreamBasicDescription *)((char *)this + 328), v22, v23, v24, v25, v26, v27), SampleSize))
        {
          int v28 = 1;
        }
        else
        {
          if (*((_DWORD *)this + 86))
          {
            if (*((_DWORD *)this + 92))
            {
              unsigned int v49 = v89;
              MP4BoxParser_Track::GetSampleTableSubBox((MP4BoxParser_Track *)v52, *((void *)this + 8), 1937011555);
              if (v55)
              {
                MP4BoxParser_SampleToChunk::MP4BoxParser_SampleToChunk((MP4BoxParser_SampleToChunk *)&v73, *((DataSource **)this + 1), v53);
                if (!MP4BoxParser_SampleToChunk::Init(&v73))
                {
                  *(void *)char v51 = 0;
                  if (v49)
                  {
                    unsigned int v29 = 0;
                    unsigned int v48 = 0;
                    uint64_t v30 = *((void *)this + 11);
                    while (1)
                    {
                      uint64_t v50 = 0;
                      if (MP4BoxParser_Track::GetChunkOffset(this, v29, &v50)) {
                        break;
                      }
                      uint64_t v31 = v50;
                      if (v50 != v30 + *((unsigned int *)this + 92) * (unint64_t)v51[0]) {
                        break;
                      }
                      if (v29 >= v51[1])
                      {
                        if (MP4BoxParser_SampleToChunk::GetSampleCountForChunkIndex(&v73, v29, v48, v51, &v51[1]))break; {
                        ++v48;
                        }
                      }
                      ++v29;
                      uint64_t v30 = v31;
                      if (v49 == v29)
                      {
                        unsigned int v29 = v49;
                        break;
                      }
                    }
                  }
                  else
                  {
                    unsigned int v29 = 0;
                  }
                  *((unsigned char *)this + 44std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v49 == v29;
                }
                uint64_t v32 = v74;
                unint64_t v73 = (MP4BoxParser *)&unk_1EDF8DA18;
                uint64_t v74 = 0;
                if (v32) {
                  (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
                }
                if (v54) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v54);
                }
              }
            }
          }
          size_t v33 = __n;
          *((_DWORD *)this + 96) = __n;
          CA_calloc(v33);
          *((void *)this + 49) = v34;
          int v28 = 1;
          uint64_t SampleSize = 0xFFFFFFFFLL;
          if (v34)
          {
            int v35 = __n;
            if (*((_DWORD *)this + 96) >= __n)
            {
              memcpy(v34, __src, __n);
              *((_DWORD *)this + 96) = v35;
              uint64_t SampleSize = MP4BoxParser_SampleDescription::GetChannelLayout((MP4BoxParser_SampleDescription *)v77, (AudioChannelLayout **)this + 47, (unsigned int *)this + 93, v36, v37, v38, v39, v40);
              if (!SampleSize)
              {
                if (*((unsigned char *)this + 120) || *((unsigned char *)this + 208) || *((unsigned char *)this + 296))
                {
                  uint64_t v41 = *((void *)this + 8);
                  uint64_t v42 = *(void *)(v41 + 8);
                  if (v42 != v41)
                  {
                    while (*(_DWORD *)(v42 + 16) != 1701082227)
                    {
                      uint64_t v42 = *(void *)(v42 + 8);
                      if (v42 == v41) {
                        goto LABEL_110;
                      }
                    }
                    MP4BoxParser_EditListExcludingPrimingAndRemainderFrames::MP4BoxParser_EditListExcludingPrimingAndRemainderFrames((MP4BoxParser_EditListExcludingPrimingAndRemainderFrames *)&v73, *((DataSource **)this + 1), *(void *)(v42 + 32) + 8);
                    if (!MP4BoxParser_EditListExcludingPrimingAndRemainderFrames::Init(&v73))
                    {
                      LODWORD(v43) = v76;
                      *((_DWORD *)this + 105) = v75;
                      unsigned int v44 = *((_DWORD *)this + 24);
                      if (v44 && vabdd_f64(*v21, (double)v44) >= 0.0000999999975) {
                        unint64_t v43 = (unint64_t)(*v21 / (double)v44 * (double)v43);
                      }
                      *((_DWORD *)this + 104) = v43;
                    }
                    uint64_t v45 = v74;
                    unint64_t v73 = (MP4BoxParser *)&unk_1EDF8DA18;
                    uint64_t v74 = 0;
                    if (v45) {
                      (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
                    }
                  }
                }
LABEL_110:
                *((_DWORD *)this + 106) = v81;
                int v46 = *((_DWORD *)this + 84);
                BOOL v47 = v46 == 1935767394 || v46 == 1935764850;
                if (v47 && *((_DWORD *)this + 86) && (v84 != 1937011578 || !v85))
                {
                  *((_DWORD *)this + 88) = 0;
                  *((_DWORD *)this + 86) = 0;
                }
                int v28 = 0;
                *((unsigned char *)this + 8std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1;
              }
            }
          }
        }
        MP4BoxParser_SampleDescription::~MP4BoxParser_SampleDescription((MP4BoxParser_SampleDescription *)v77);
        if (v58) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v58);
        }
      }
      else
      {
        uint64_t SampleSize = 0xFFFFFFFFLL;
        int v28 = 1;
      }
      int v10 = v28;
      goto LABEL_51;
    }
    uint64_t SampleSize = 0xFFFFFFFFLL;
    int v10 = 1;
  }
  else
  {
    int v10 = 1;
    uint64_t SampleSize = 0xFFFFFFFFLL;
  }
LABEL_38:
  if (v71) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v71);
  }
LABEL_20:
  uint64_t v11 = v91;
  long long v90 = (MP4BoxParser *)&unk_1EDF8DA18;
  uint64_t v91 = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (!v10) {
    return 0;
  }
  return SampleSize;
}

void sub_18FF9DDE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,std::__shared_weak_count *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  if (a43) {
    (*(void (**)(uint64_t))(*(void *)a43 + 8))(a43);
  }
  MP4BoxParser_SampleDescription::~MP4BoxParser_SampleDescription((MP4BoxParser_SampleDescription *)&a52);
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  unint64_t v56 = STACK[0x220];
  STACK[0x218] = (unint64_t)&unk_1EDF8DA18;
  STACK[0x220] = 0;
  if (v56) {
    (*(void (**)(unint64_t))(*(void *)v56 + 8))(v56);
  }
  if (a28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a28);
  }
  uint64_t v57 = *(void *)(v54 - 216);
  *(void *)(v54 - 224) = &unk_1EDF8DA18;
  *(void *)(v54 - 216) = 0;
  if (v57) {
    (*(void (**)(uint64_t))(*(void *)v57 + 8))(v57);
  }
  if (a34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a34);
  }
  if (a40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a40);
  }
  uint64_t v58 = *(void *)(v54 - 152);
  *(void *)(v54 - 16std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v53;
  *(void *)(v54 - 152) = 0;
  if (v58) {
    (*(void (**)(uint64_t))(*(void *)v58 + 8))(v58);
  }
  if (v52) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v52);
  }
  _Unwind_Resume(a1);
}

__n128 MP4BoxParser_Track::GetSampleTableBox(MP4BoxParser_Track *this, uint64_t a2)
{
  if (!a2) {
    goto LABEL_15;
  }
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2 == a2) {
    goto LABEL_15;
  }
  while (*(_DWORD *)(v2 + 16) != 1835297121)
  {
    uint64_t v2 = *(void *)(v2 + 8);
    if (v2 == a2) {
      goto LABEL_15;
    }
  }
  uint64_t v3 = *(void *)(v2 + 40);
  if (!v3) {
    goto LABEL_15;
  }
  uint64_t v4 = *(void *)(v3 + 8);
  if (v4 == v3) {
    goto LABEL_15;
  }
  while (*(_DWORD *)(v4 + 16) != 1835626086)
  {
    uint64_t v4 = *(void *)(v4 + 8);
    if (v4 == v3) {
      goto LABEL_15;
    }
  }
  uint64_t v5 = *(void *)(v4 + 40);
  if (!v5 || (uint64_t v6 = *(__n128 **)(v5 + 8), v6 == (__n128 *)v5))
  {
LABEL_15:
    *(unsigned char *)this = 0;
    *((unsigned char *)this + 4std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
  }
  else
  {
    while (v6[1].n128_u32[0] != 1937007212)
    {
      uint64_t v6 = (__n128 *)v6->n128_u64[1];
      if (v6 == (__n128 *)v5) {
        goto LABEL_15;
      }
    }
    __n128 v12 = v6[1];
    unint64_t v8 = v6[2].n128_u64[0];
    unint64_t v7 = v6[2].n128_u64[1];
    unint64_t v9 = v6[3].n128_u64[0];
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v10 = *(void *)(v2 + 32) + v8 + *(void *)(v4 + 32);
    __n128 result = v12;
    *(__n128 *)this = v12;
    *((void *)this + 2) = v10;
    *((void *)this + 3) = v7;
    *((void *)this + 4) = v9;
    *((unsigned char *)this + 4std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1;
  }
  return result;
}

__n128 MP4BoxParser_Track::GetChunkOffsetBox(MP4BoxParser_Track *this, uint64_t a2)
{
  if (!a2)
  {
    *(unsigned char *)this = 0;
    *((unsigned char *)this + 4std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
    return result;
  }
  result.n128_u64[0] = MP4BoxParser_Track::GetSampleTableBox((MP4BoxParser_Track *)v12, a2).n128_u64[0];
  int v4 = v16;
  if (!v16 || !v14 || (uint64_t v5 = *(__n128 **)(v14 + 8), v5 == (__n128 *)v14))
  {
LABEL_10:
    *(unsigned char *)this = 0;
    *((unsigned char *)this + 4std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
    if (!v4) {
      return result;
    }
    goto LABEL_11;
  }
  uint64_t v6 = *(__n128 **)(v14 + 8);
  while (v6[1].n128_u32[0] != 1937007471)
  {
    uint64_t v6 = (__n128 *)v6->n128_u64[1];
    if (v6 == (__n128 *)v14)
    {
      while (v5[1].n128_u32[0] != 1668232756)
      {
        uint64_t v5 = (__n128 *)v5->n128_u64[1];
        if (v5 == (__n128 *)v14) {
          goto LABEL_10;
        }
      }
      uint64_t v6 = v5;
      break;
    }
  }
  __n128 v11 = v6[1];
  unint64_t v8 = v6[2].n128_u64[0];
  unint64_t v7 = v6[2].n128_u64[1];
  unint64_t v9 = v6[3].n128_u64[0];
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = v13 + v8;
  __n128 result = v11;
  *(__n128 *)this = v11;
  *((void *)this + 2) = v10;
  *((void *)this + 3) = v7;
  *((void *)this + 4) = v9;
  *((unsigned char *)this + 4std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1;
  if (v4)
  {
LABEL_11:
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
  return result;
}

double MP4BoxParser_Track::GetSampleSizeBox(MP4BoxParser_Track *this, uint64_t a2)
{
  *(void *)&double result = MP4BoxParser_Track::GetSampleTableSubBox(this, *(void *)(a2 + 64), 1937011578).n128_u64[0];
  if (!*((unsigned char *)this + 40))
  {
    *(void *)&double result = MP4BoxParser_Track::GetSampleTableSubBox((MP4BoxParser_Track *)&v5, *(void *)(a2 + 64), 1937013298).n128_u64[0];
    if (v8)
    {
      *(_OWORD *)this = v5;
      *((void *)this + 2) = v6;
      double result = *(double *)&v7;
      *(_OWORD *)((char *)this + 24) = v7;
      *((unsigned char *)this + 4std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1;
    }
  }
  return result;
}

__n128 MP4BoxParser_Track::GetSampleTableSubBox(MP4BoxParser_Track *this, uint64_t a2, int a3)
{
  if (a2)
  {
    result.n128_u64[0] = MP4BoxParser_Track::GetSampleTableBox((MP4BoxParser_Track *)v13, a2).n128_u64[0];
    int v6 = v17;
    if (v17 && v15)
    {
      for (uint64_t i = *(__n128 **)(v15 + 8); i != (__n128 *)v15; uint64_t i = (__n128 *)i->n128_u64[1])
      {
        if (i[1].n128_u32[0] == a3)
        {
          __n128 v12 = i[1];
          unint64_t v9 = i[2].n128_u64[0];
          unint64_t v8 = i[2].n128_u64[1];
          unint64_t v10 = i[3].n128_u64[0];
          if (v10) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v11 = v14 + v9;
          __n128 result = v12;
          *(__n128 *)this = v12;
          *((void *)this + 2) = v11;
          *((void *)this + 3) = v8;
          *((void *)this + 4) = v10;
          *((unsigned char *)this + 4std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1;
          if (v6) {
            goto LABEL_9;
          }
          return result;
        }
      }
    }
    *(unsigned char *)this = 0;
    *((unsigned char *)this + 4std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
    if (v6)
    {
LABEL_9:
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
    }
  }
  else
  {
    *(unsigned char *)this = 0;
    *((unsigned char *)this + 4std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
  }
  return result;
}

uint64_t MP4BoxParser_Track::GetChunkOffset(MP4BoxParser_Track *this, int a2, uint64_t *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  __n128 ChunkOffsetBox = MP4BoxParser_Track::GetChunkOffsetBox((MP4BoxParser_Track *)v11, *((void *)this + 8));
  if (!v13) {
    return 1667787583;
  }
  uint64_t v7 = *((void *)this + 1);
  uint64_t v14 = (MP4BoxParser *)&unk_1EDF8DA18;
  (*(void (**)(uint64_t *__return_ptr, __n128))(*(void *)v7 + 88))(&v15, ChunkOffsetBox);
  char v16 = 0;
  int v17 = 0;
  uint64_t v18 = 0;
  char v19 = 0;
  int v20 = 8;
  uint64_t v14 = (MP4BoxParser *)&unk_1EDF93B30;
  int v21 = 0;
  uint64_t v8 = MP4BoxParser_ChunkOffset::Init(&v14);
  if (!v8) {
    MP4BoxParser_ChunkOffset::GetChunkOffset((MP4BoxParser_ChunkOffset *)&v14, a2, a3);
  }
  uint64_t v9 = v15;
  uint64_t v14 = (MP4BoxParser *)&unk_1EDF8DA18;
  uint64_t v15 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  return v8;
}

void sub_18FF9E4F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MP4BoxParser_Track::Init(MP4BoxParser_Track *this)
{
  uint64_t result = MP4BoxParser::Initialize(this);
  if (!result)
  {
    if (*((_DWORD *)this + 5) == 1953653099)
    {
      if (*((unsigned char *)this + 56)) {
        operator new();
      }
      return 0;
    }
    else
    {
      return 4294967294;
    }
  }
  return result;
}

void MP4BoxParser_Track::~MP4BoxParser_Track(MP4BoxParser_Track *this)
{
  MP4BoxParser_Track::~MP4BoxParser_Track(this);
  JUMPOUT(0x192FC8940);
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  CompressedPacketTable *v5;
  const void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;

  *(void *)this = &unk_1EDF92748;
  uint64_t v2 = (void *)*((void *)this + 47);
  if (v2) {
    free(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 49);
  if (v3) {
    free(v3);
  }
  if (*((unsigned char *)this + 56))
  {
    int v4 = *((void *)this + 8);
    if (v4)
    {
      std::__list_imp<MP4BoxInfo>::clear(*((uint64_t **)this + 8));
      MEMORY[0x192FC8940](v4, 0x1020C4062D53EE8);
    }
  }
  long long v5 = (CompressedPacketTable *)*((void *)this + 14);
  if (v5)
  {
    CompressedPacketTable::~CompressedPacketTable(v5);
    MEMORY[0x192FC8940]();
  }
  int v6 = (const void *)*((void *)this + 54);
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 38);
  if (v7)
  {
    *((void *)this + 39) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 34);
  if (v8)
  {
    *((void *)this + 35) = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)*((void *)this + 31);
  if (v9)
  {
    *((void *)this + 32) = v9;
    operator delete(v9);
  }
  unint64_t v10 = (void *)*((void *)this + 27);
  if (v10)
  {
    *((void *)this + 28) = v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)*((void *)this + 23);
  if (v11)
  {
    *((void *)this + 24) = v11;
    operator delete(v11);
  }
  __n128 v12 = (void *)*((void *)this + 20);
  if (v12)
  {
    *((void *)this + 21) = v12;
    operator delete(v12);
  }
  char v13 = (void *)*((void *)this + 16);
  if (v13)
  {
    *((void *)this + 17) = v13;
    operator delete(v13);
  }
  uint64_t v14 = *((void *)this + 1);
  *(void *)this = &unk_1EDF8DA18;
  *((void *)this + 1) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
}

uint64_t MP4Parser_PacketProvider::GetNumPackets(MP4Parser_PacketProvider *this)
{
  if (MP4BoxParser_Track::GetInfoFromTrackSubBoxes(this)) {
    int v2 = 0;
  }
  else {
    int v2 = *((_DWORD *)this + 25);
  }
  return (*((_DWORD *)this + 111) + v2);
}

void MP4Parser_PacketProvider::~MP4Parser_PacketProvider(MP4Parser_PacketProvider *this)
{
  MP4Parser_PacketProvider::~MP4Parser_PacketProvider(this);
  JUMPOUT(0x192FC8940);
}

{
  CompressedPacketTable *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EDF93C38;
  int v2 = (CompressedPacketTable *)*((void *)this + 58);
  if (v2)
  {
    CompressedPacketTable::~CompressedPacketTable(v2);
    MEMORY[0x192FC8940]();
  }
  MP4BoxParser_Track::~MP4BoxParser_Track(this);
}

uint64_t MP4BoxParser_Track::MP4BoxParser_Track(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  *(void *)a1 = &unk_1EDF8DA18;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 88))(a2, a3);
  *(unsigned char *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 2std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = 8;
  *(void *)a1 = &unk_1EDF92748;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a4;
  *(_DWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 76) = a5;
  *(unsigned char *)(a1 + 8std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 32std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
  *(void *)(a1 + 304) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_WORD *)(a1 + 12std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
  *(void *)(a1 + 124) = 0;
  *(void *)(a1 + 14std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
  *(void *)(a1 + 132) = 0;
  *(void *)(a1 + 145) = 0;
  *(_WORD *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 16std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0u;
  *(void *)(a1 + 22std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
  *(void *)(a1 + 212) = 0;
  *(void *)(a1 + 233) = 0;
  *(void *)(a1 + 228) = 0;
  *(unsigned char *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 28std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 384) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 40std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
  *(void *)(a1 + 408) = 0;
  *(_DWORD *)(a1 + 416) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 42std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0xFFFFFFFFLL;
  *(void *)(a1 + 432) = 0;
  *(unsigned char *)(a1 + 44std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
  return a1;
}

uint64_t MP4BoxParser_Track::GetTrackType(MP4BoxParser_Track *this)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((void *)this + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  if (v2 == v1) {
    return 0;
  }
  while (*(_DWORD *)(v2 + 16) != 1835297121)
  {
    uint64_t v2 = *(void *)(v2 + 8);
    if (v2 == v1) {
      return 0;
    }
  }
  uint64_t v3 = *(void *)(v2 + 40);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(void *)(v3 + 8);
  if (v4 == v3) {
    return 0;
  }
  while (*(_DWORD *)(v4 + 16) != 1751411826)
  {
    uint64_t v4 = *(void *)(v4 + 8);
    if (v4 == v3) {
      return 0;
    }
  }
  uint64_t v5 = *((void *)this + 1);
  unint64_t v10 = (void (**)(MP4BoxParser_HandlerReference *__hidden))&unk_1EDF8DA18;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v5 + 88))(&v11);
  char v12 = 0;
  int v13 = 0;
  uint64_t v14 = 0;
  char v15 = 0;
  int v16 = 8;
  unint64_t v10 = off_1EDF94498;
  if (MP4BoxParser_HandlerReference::Init((MP4BoxParser **)&v10))
  {
    uint64_t v6 = v11;
    unint64_t v10 = (void (**)(MP4BoxParser_HandlerReference *__hidden))&unk_1EDF8DA18;
    uint64_t v11 = 0;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    return 0;
  }
  uint64_t v7 = v17;
  uint64_t v9 = v11;
  unint64_t v10 = (void (**)(MP4BoxParser_HandlerReference *__hidden))&unk_1EDF8DA18;
  uint64_t v11 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  return v7;
}

void sub_18FF9EBEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MP4BoxParser_Track::GetTrackID(MP4BoxParser_Track *this)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((void *)this + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  if (v2 == v1) {
    return 0;
  }
  while (*(_DWORD *)(v2 + 16) != 1953196132)
  {
    uint64_t v2 = *(void *)(v2 + 8);
    if (v2 == v1) {
      return 0;
    }
  }
  uint64_t v3 = *((void *)this + 1);
  uint64_t v8 = (void (**)(MP4BoxParser_TrackHeader *__hidden))&unk_1EDF8DA18;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v3 + 88))(&v9);
  char v10 = 0;
  int v11 = 0;
  uint64_t v12 = 0;
  char v13 = 0;
  int v14 = 8;
  uint64_t v8 = off_1EDF93BC0;
  unsigned int v15 = 0;
  if (MP4BoxParser_TrackHeader::Init((MP4BoxParser **)&v8))
  {
    uint64_t v4 = v9;
    uint64_t v8 = (void (**)(MP4BoxParser_TrackHeader *__hidden))&unk_1EDF8DA18;
    uint64_t v9 = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    return 0;
  }
  uint64_t v5 = v15;
  uint64_t v7 = v9;
  uint64_t v8 = (void (**)(MP4BoxParser_TrackHeader *__hidden))&unk_1EDF8DA18;
  uint64_t v9 = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return v5;
}

void sub_18FF9EDBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  _Unwind_Resume(exception_object);
}

void MP4BoxParser_Track::UpdateOffsetTableToIndex(MP4BoxParser_Track *this, unsigned int a2)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 440))
  {
    CompressedPacketCFIndex Count = MP4BoxParser_Track::GetCompressedPacketCount(this);
    if (CompressedPacketCount <= a2)
    {
      __n128 SampleTableSubBox = MP4BoxParser_Track::GetSampleTableSubBox((MP4BoxParser_Track *)v33, *((void *)this + 8), 1937011555);
      if (v35)
      {
        uint64_t v6 = *((void *)this + 1);
        uint64_t v45 = (MP4BoxParser *)&unk_1EDF8DA18;
        (*(void (**)(uint64_t *__return_ptr, __n128))(*(void *)v6 + 88))(&v46, SampleTableSubBox);
        char v47 = 0;
        int v48 = 0;
        uint64_t v49 = 0;
        char v50 = 0;
        int v51 = 8;
        uint64_t v45 = (MP4BoxParser *)&unk_1EDF94028;
        int v52 = 0;
        if (!MP4BoxParser_SampleToChunk::Init(&v45))
        {
          double SampleSizeBox = MP4BoxParser_Track::GetSampleSizeBox((MP4BoxParser_Track *)v30, (uint64_t)this);
          if (v32)
          {
            uint64_t v9 = *((void *)this + 1);
            uint64_t v36 = (MP4BoxParser *)&unk_1EDF8DA18;
            (*(void (**)(uint64_t *__return_ptr, double))(*(void *)v9 + 88))(&v37, SampleSizeBox);
            char v38 = 0;
            int v39 = 0;
            uint64_t v40 = 0;
            char v41 = 0;
            int v42 = 8;
            uint64_t v36 = (MP4BoxParser *)&unk_1EDF939D0;
            int v43 = 0;
            int v44 = 0;
            if (!MP4BoxParser_SampleSize::Init(&v36))
            {
              unsigned int v10 = v44 - 1;
              if (v44 - 1 >= a2) {
                unsigned int v10 = a2;
              }
              int v11 = *((_DWORD *)this + 100);
              unsigned int v12 = *((_DWORD *)this + 102);
              int v13 = *((_DWORD *)this + 103);
              int v14 = *((_DWORD *)this + 101);
              uint64_t v28 = 0;
              *(void *)unsigned int v29 = 0;
              DWORD2(v27) = 0;
              unsigned int v24 = v10 + 1;
              if (v10 + 1 > CompressedPacketCount)
              {
                unsigned int v15 = 0;
                unsigned int v23 = v10 - CompressedPacketCount;
                while (1)
                {
                  MP4BoxParser_SampleToChunk::GetSampleCountForChunkIndex(&v45, v11, v14, v29, &v29[1]);
                  ++v15;
                  if (v12 < v29[0]) {
                    break;
                  }
                  char v17 = v15 >= v23;
LABEL_28:
                  *((void *)this + 51) = 0;
                  if (++v11 == v29[1])
                  {
                    ++v14;
                    *((_DWORD *)this + 101) = v11;
                  }
                  int v13 = 0;
                  unsigned int v12 = 0;
                  if ((CompressedPacketCount >= v24) | v17 & 1) {
                    goto LABEL_31;
                  }
                }
                unsigned int v22 = v15;
                unsigned int v16 = 0;
                char v17 = 0;
                unsigned int v18 = v12 + 1;
                while (1)
                {
                  unsigned int v26 = 0;
                  if (MP4BoxParser_SampleSize::GetSampleSize((MP4BoxParser_SampleSize *)&v36, CompressedPacketCount + v16, &v26))break; {
                  unsigned int v19 = v26;
                  }
                  uint64_t v25 = 0;
                  if (MP4BoxParser_Track::GetChunkOffset(this, v11, &v25)) {
                    break;
                  }
                  v25 += *((unsigned int *)this + 103);
                  *(void *)&long long v27 = v25;
                  HIDWORD(v27) = v19;
                  int v20 = (char **)*((void *)this + 14);
                  if (!v20)
                  {
                    if (!(*(unsigned int (**)(void))(**((void **)this + 1) + 144))(*((void *)this + 1))) {
                      break;
                    }
                    if (!MP4BoxParser_Track::GetInfoFromTrackSubBoxes(this)) {
                      operator new();
                    }
                    int v20 = (char **)*((void *)this + 14);
                    if (!v20) {
                      break;
                    }
                  }
                  CompressedPacketTable::push_back(v20, &v27);
                  v13 += v19;
                  *((_DWORD *)this + 102) = v18 + v16;
                  *((_DWORD *)this + 103) = v13;
                  ++v16;
                  v17 |= CompressedPacketCount + v16 >= v24;
                  if (v16 >= v29[0])
                  {
                    ++*((_DWORD *)this + 100);
                    CompressedPacketCount += v16;
                    unsigned int v15 = v22;
                    goto LABEL_28;
                  }
                }
              }
            }
LABEL_31:
            uint64_t v21 = v37;
            uint64_t v36 = (MP4BoxParser *)&unk_1EDF8DA18;
            uint64_t v37 = 0;
            if (v21) {
              (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
            }
            if (v32 && v31) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v31);
            }
          }
        }
        uint64_t v7 = v46;
        uint64_t v45 = (MP4BoxParser *)&unk_1EDF8DA18;
        uint64_t v46 = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        }
        if (v34) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v34);
        }
      }
    }
  }
}

void sub_18FF9F274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (a33) {
    (*(void (**)(uint64_t))(*(void *)a33 + 8))(a33);
  }
  if (a25 && a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  uint64_t v36 = *(void *)(v34 - 152);
  *(void *)(v34 - 16std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v33;
  *(void *)(v34 - 152) = 0;
  if (v36) {
    (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
  }
  if (a30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a30);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MP4BoxParser_Track::GetCompressedPacketCount(MP4BoxParser_Track *this)
{
  if (!MP4BoxParser_Track::GetInfoFromTrackSubBoxes(this) && *((_DWORD *)this + 86)) {
    return (*(unsigned int (**)(MP4BoxParser_Track *))(*(void *)this + 32))(this);
  }
  uint64_t v2 = *((void *)this + 14);
  if (v2) {
    return *(void *)(v2 + 24);
  }
  else {
    return 0;
  }
}

uint64_t MP4BoxParser_Track::GetCompressedPacketOffset(uint64_t **this, unsigned int a2, unint64_t *a3)
{
  if (*((unsigned char *)this + 440))
  {
    uint64_t result = MP4BoxParser_Track::GetInfoFromTrackSubBoxes((MP4BoxParser_Track *)this);
    if (result) {
      return result;
    }
    unint64_t v7 = (unint64_t)this[11] + *((unsigned int *)this + 86) * (unint64_t)a2;
    goto LABEL_6;
  }
  if (this[14])
  {
    MP4BoxParser_Track::UpdateOffsetTableToIndex((MP4BoxParser_Track *)this, a2);
    CompressedPacketTable::operator[]((uint64_t)v8, this[14], a2);
    uint64_t result = 0;
    unint64_t v7 = v8[0];
LABEL_6:
    *a3 = v7;
    return result;
  }
  return 0xFFFFFFFFLL;
}

uint64_t MP4BoxParser_Track::GetByteCountForPackets(MP4BoxParser_Track *this, unsigned int a2, int a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  double SampleSizeBox = MP4BoxParser_Track::GetSampleSizeBox((MP4BoxParser_Track *)v14, (uint64_t)this);
  if (!v16) {
    return 0;
  }
  uint64_t v7 = *((void *)this + 1);
  char v17 = (MP4BoxParser *)&unk_1EDF8DA18;
  (*(void (**)(uint64_t *__return_ptr, double))(*(void *)v7 + 88))(&v18, SampleSizeBox);
  char v19 = 0;
  int v20 = 0;
  uint64_t v21 = 0;
  char v22 = 0;
  int v23 = 8;
  char v17 = (MP4BoxParser *)&unk_1EDF939D0;
  int v24 = 0;
  int v25 = 0;
  if (MP4BoxParser_SampleSize::Init(&v17))
  {
    uint64_t v8 = v18;
    char v17 = (MP4BoxParser *)&unk_1EDF8DA18;
    uint64_t v18 = 0;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    uint64_t v9 = 0;
  }
  else
  {
    unsigned int v13 = 0;
    if (v20 == 1937011578 && v24)
    {
      int SampleSize = MP4BoxParser_SampleSize::GetSampleSize((MP4BoxParser_SampleSize *)&v17, 0, &v13);
      uint64_t v11 = v18;
      if (SampleSize) {
        uint64_t v9 = 0;
      }
      else {
        uint64_t v9 = v13 * a3;
      }
    }
    else
    {
      if (a3 + a2 > a2)
      {
        LODWORD(v9) = 0;
        while (1)
        {
          unsigned int v13 = 0;
          if (MP4BoxParser_SampleSize::GetSampleSize((MP4BoxParser_SampleSize *)&v17, a2, &v13)) {
            break;
          }
          uint64_t v9 = v13 + v9;
          ++a2;
          if (!--a3) {
            goto LABEL_18;
          }
        }
      }
      uint64_t v9 = 0;
LABEL_18:
      uint64_t v11 = v18;
    }
    char v17 = (MP4BoxParser *)&unk_1EDF8DA18;
    uint64_t v18 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  return v9;
}

void sub_18FF9F654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a18) {
    (*(void (**)(uint64_t))(*(void *)a18 + 8))(a18);
  }
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MP4BoxParser_Track::GetLoudnessInfo(MP4BoxParser_Track *this, const __CFDictionary **a2)
{
  uint64_t v3 = *((void *)this + 8);
  if (!v3) {
    goto LABEL_14;
  }
  uint64_t v4 = *(void *)(v3 + 8);
  if (v4 == v3) {
    goto LABEL_14;
  }
  while (*(_DWORD *)(v4 + 16) != 1969517665)
  {
    uint64_t v4 = *(void *)(v4 + 8);
    if (v4 == v3) {
      goto LABEL_14;
    }
  }
  uint64_t v6 = *(void *)(v4 + 40);
  if (!v6 || (uint64_t v7 = *(void *)(v6 + 8), v7 == v6))
  {
LABEL_14:
    uint64_t v10 = 0;
    *a2 = 0;
    return v10;
  }
  int v8 = 1819632756;
  uint64_t v9 = *(void *)(v6 + 8);
  while (*(_DWORD *)(v9 + 16) != 1819632756)
  {
    uint64_t v9 = *(void *)(v9 + 8);
    if (v9 == v6)
    {
      int v8 = 1818848870;
      while (*(_DWORD *)(v7 + 16) != 1818848870)
      {
        uint64_t v7 = *(void *)(v7 + 8);
        if (v7 == v6) {
          goto LABEL_14;
        }
      }
      uint64_t v9 = v7;
      break;
    }
  }
  uint64_t v13 = *(void *)(v9 + 24);
  uint64_t v12 = *(void *)(v9 + 32);
  int v14 = *(std::__shared_weak_count **)(v9 + 48);
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = *(void *)(v4 + 32) + v12;
  if ((v8 & 0x6C7D6EFF) == 0x6C756474)
  {
    p_int inSpecifier = 0;
    uint64_t v40 = 0;
    std::string __p = 0;
    LOBYTE(inSpecifier) = 0;
    if (v13 == 8)
    {
      char v22 = 0;
      uint64_t v21 = 0;
    }
    else
    {
      std::vector<unsigned char>::__append(&p_inSpecifier, (v13 - 8), &inSpecifier);
      uint64_t v21 = (void **)p_inSpecifier;
      char v22 = v40;
    }
    uint64_t DataSourceBytes = MP4BoxParser::ReadDataSourceBytes(*((MP4BoxParser **)this + 1), v15 + 8, (char *)v22 - (char *)v21, v21);
    if (DataSourceBytes) {
      goto LABEL_33;
    }
    if (v22 == v21) {
      goto LABEL_38;
    }
    int inSpecifier = (char **)CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)v21, (char *)v22 - (char *)v21);
    ioPropertyDataSize[0] = 8;
    uint64_t DataSourceBytes = AudioFormatGetProperty(0x6C646C62u, 8u, &inSpecifier, ioPropertyDataSize, a2);
    if (inSpecifier) {
      CFRelease(inSpecifier);
    }
    if (DataSourceBytes)
    {
LABEL_33:
      char v23 = 0;
    }
    else
    {
LABEL_38:
      uint64_t DataSourceBytes = 0;
      char v23 = 1;
    }
    if (v21) {
      operator delete(v21);
    }
    uint64_t v10 = DataSourceBytes;
    if ((v23 & 1) == 0) {
      goto LABEL_44;
    }
LABEL_42:
    uint64_t v10 = DataSourceBytes;
    goto LABEL_44;
  }
  if ((v8 & 0x6C7D6EFF) != 0x6C696E66)
  {
    uint64_t v10 = 4294967246;
    goto LABEL_44;
  }
  int inSpecifier = 0;
  int v48 = 0;
  uint64_t v49 = 0;
  p_int inSpecifier = &inSpecifier;
  LOBYTE(v4std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
  char v16 = operator new(0x18uLL);
  int v48 = v16 + 3;
  uint64_t v49 = (char *)(v16 + 3);
  v16[1] = 0;
  void v16[2] = 0;
  void *v16 = 0;
  int inSpecifier = (char **)v16;
  unint64_t v17 = (v13 - 12);
  *(void *)UInt32 ioPropertyDataSize = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  LOBYTE(p_inSpecifier) = 0;
  std::vector<unsigned char>::__append(ioPropertyDataSize, v17, &p_inSpecifier);
  uint64_t v18 = *(_WORD **)ioPropertyDataSize;
  uint64_t DataSourceBytes = MP4BoxParser::ReadDataSourceBytes(*((MP4BoxParser **)this + 1), v15 + 12, v17, *(void **)ioPropertyDataSize);
  uint64_t v10 = DataSourceBytes;
  if (!DataSourceBytes)
  {
    uint64_t v10 = 561211770;
    if (v17 < 5)
    {
      uint64_t DataSourceBytes = 0;
      goto LABEL_24;
    }
    if (v17 < 2 * (unint64_t)*((unsigned __int8 *)v18 + 4) + 5)
    {
      uint64_t DataSourceBytes = 0;
      goto LABEL_25;
    }
    std::vector<ISOLoudnessInfo>::resize(inSpecifier, 1uLL);
    int v24 = *inSpecifier;
    *(unsigned char *)int v24 = 0;
    *(_WORD *)((char *)v24 + 1) = *v18;
    *((_WORD *)v24 + 2) = 0;
    *((_WORD *)v24 + 3) = v18[1];
    *((_WORD *)v24 + 4) = 768;
    unint64_t v25 = *((unsigned __int8 *)v18 + 4);
    *((unsigned char *)v24 + 1std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v25;
    std::vector<LoudnessMethod>::resize((char **)v24 + 2, v25);
    uint64_t v26 = (*inSpecifier)[10];
    if ((*inSpecifier)[10])
    {
      long long v27 = (char *)(v18 + 3);
      uint64_t v28 = *((void *)*inSpecifier + 2) + 1;
      do
      {
        *(_WORD *)(v28 - 1) = *(_WORD *)(v27 - 1);
        *(_WORD *)(v28 + 1) = 768;
        v27 += 2;
        v28 += 4;
        --v26;
      }
      while (v26);
    }
    std::string __p = 0;
    int v42 = 0;
    uint64_t v43 = 0;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    __int16 v38 = 257;
    CFTypeRef cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    __int16 v36 = 257;
    float v34 = 0.0;
    char v33 = 0;
    if (FindCanonicalLoudness((uint64_t)inSpecifier, (uint64_t)v48, (uint64_t)&p_inSpecifier))
    {
      uint64_t v29 = ExpandLegacyLoudnessBox((CACFDictionary *)&Mutable, (uint64_t)&p_inSpecifier, &v34, &v33);
      uint64_t DataSourceBytes = v29;
      if (v29)
      {
        int v20 = 1;
        uint64_t v10 = v29;
LABEL_63:
        CACFDictionary::~CACFDictionary((CACFDictionary *)&cf);
        CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
        if (__p)
        {
          int v42 = __p;
          operator delete(__p);
        }
LABEL_26:
        operator delete(v18);
        p_int inSpecifier = &inSpecifier;
        std::vector<ISOLoudnessInfoBox>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_inSpecifier);
        if (v20) {
          goto LABEL_44;
        }
        goto LABEL_42;
      }
      if (CACFDictionary::Size((CACFDictionary *)&Mutable)) {
        CACFDictionary::AddDictionary((CACFDictionary *)&cf, @"main loudness parameters", Mutable);
      }
      if (v33)
      {
        uint64_t v31 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        __int16 v32 = 257;
        CACFDictionary::AddFloat32((CACFDictionary *)&v31, @"aa itu loudness", v34);
        CACFDictionary::AddDictionary((CACFDictionary *)&cf, @"dialogue anchor parameters", v31);
        CACFDictionary::~CACFDictionary((CACFDictionary *)&v31);
      }
    }
    if (CACFDictionary::Size((CACFDictionary *)&cf) && cf)
    {
      CFRetain(cf);
      CFDictionaryRef v30 = (const __CFDictionary *)cf;
    }
    else
    {
      CFDictionaryRef v30 = 0;
    }
    uint64_t DataSourceBytes = 0;
    int v20 = 0;
    *a2 = v30;
    goto LABEL_63;
  }
LABEL_24:
  if (v18)
  {
LABEL_25:
    int v20 = 1;
    goto LABEL_26;
  }
  p_int inSpecifier = &inSpecifier;
  std::vector<ISOLoudnessInfoBox>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_inSpecifier);
LABEL_44:
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  return v10;
}

void sub_18FF9FB80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21)
{
  CACFDictionary::~CACFDictionary((CACFDictionary *)&a12);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&a14);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  operator delete(v22);
  a16 = v23 - 72;
  std::vector<ISOLoudnessInfoBox>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  _Unwind_Resume(a1);
}

void std::vector<unsigned char>::__append(void *a1, unint64_t a2, unsigned char *a3)
{
  unint64_t v4 = a2;
  uint64_t v7 = (unsigned char *)a1[1];
  uint64_t v6 = a1[2];
  if (v6 - (uint64_t)v7 >= a2)
  {
    if (a2)
    {
      uint64_t v13 = &v7[a2];
      do
      {
        *v7++ = *a3;
        --v4;
      }
      while (v4);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    int v8 = &v7[-*a1];
    unint64_t v9 = (unint64_t)&v8[a2];
    if ((uint64_t)&v8[a2] < 0) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = v6 - *a1;
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v9;
    }
    if (v11) {
      uint64_t v12 = operator new(v11);
    }
    else {
      uint64_t v12 = 0;
    }
    int v14 = &v8[(void)v12];
    uint64_t v15 = &v8[(void)v12 + v4];
    char v16 = &v8[(void)v12];
    do
    {
      *v16++ = *a3;
      --v4;
    }
    while (v4);
    unint64_t v17 = (unsigned char *)*a1;
    if (v7 != (unsigned char *)*a1)
    {
      do
      {
        char v18 = *--v7;
        *--int v14 = v18;
      }
      while (v7 != v17);
      uint64_t v7 = (unsigned char *)*a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = (char *)v12 + v11;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

void std::vector<ISOLoudnessInfo>::resize(char **a1, unint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 3);
  unint64_t v6 = a2 - v5;
  if (a2 > v5)
  {
    uint64_t v7 = a1[2];
    if (0xCCCCCCCCCCCCCCCDLL * ((v7 - v4) >> 3) >= v6)
    {
      bzero(a1[1], 40 * ((40 * v6 - 40) / 0x28) + 40);
      a1[1] = &v4[40 * ((40 * v6 - 40) / 0x28) + 40];
      return;
    }
    if (a2 > 0x666666666666666) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - v3) >> 3);
    uint64_t v9 = 2 * v8;
    if (2 * v8 <= a2) {
      uint64_t v9 = a2;
    }
    if (v8 >= 0x333333333333333) {
      unint64_t v10 = 0x666666666666666;
    }
    else {
      unint64_t v10 = v9;
    }
    size_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ISOLoudnessInfo>>(v10);
    uint64_t v12 = &v11[40 * v5];
    int v14 = &v11[40 * v13];
    bzero(v12, 40 * ((40 * v6 - 40) / 0x28) + 40);
    uint64_t v15 = &v12[40 * ((40 * v6 - 40) / 0x28) + 40];
    char v16 = *a1;
    unint64_t v17 = a1[1];
    if (v17 == *a1)
    {
      *a1 = v12;
      a1[1] = v15;
      a1[2] = v14;
      if (!v17) {
        return;
      }
    }
    else
    {
      do
      {
        uint64_t v18 = *((void *)v17 - 5);
        v17 -= 40;
        int v19 = *(_DWORD *)(v17 + 7);
        *((void *)v12 - 5) = v18;
        v12 -= 40;
        *(_DWORD *)(v12 + 7) = v19;
        *((void *)v12 + 3) = 0;
        *((void *)v12 + 4) = 0;
        *((void *)v12 + 2) = 0;
        *((_OWORD *)v12 + 1) = *((_OWORD *)v17 + 1);
        *((void *)v12 + 4) = *((void *)v17 + 4);
        *((void *)v17 + 2) = 0;
        *((void *)v17 + 3) = 0;
        *((void *)v17 + 4) = 0;
      }
      while (v17 != v16);
      int v20 = *a1;
      unint64_t v17 = a1[1];
      *a1 = v12;
      a1[1] = v15;
      a1[2] = v14;
      if (v17 != v20)
      {
        do
        {
          uint64_t v21 = (void *)*((void *)v17 - 3);
          if (v21)
          {
            *((void *)v17 - 2) = v21;
            operator delete(v21);
          }
          v17 -= 40;
        }
        while (v17 != v20);
        unint64_t v17 = v20;
      }
      if (!v17) {
        return;
      }
    }
    operator delete(v17);
    return;
  }
  if (a2 < v5)
  {
    char v22 = &v3[40 * a2];
    while (v4 != v22)
    {
      uint64_t v23 = (void *)*((void *)v4 - 3);
      if (v23)
      {
        *((void *)v4 - 2) = v23;
        operator delete(v23);
      }
      v4 -= 40;
    }
    a1[1] = v22;
  }
}

void std::vector<LoudnessMethod>::resize(char **a1, unint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  unint64_t v5 = (v4 - *a1) >> 2;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    int v19 = &v3[4 * a2];
    goto LABEL_19;
  }
  unint64_t v6 = a2 - v5;
  uint64_t v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 2)
  {
    bzero(a1[1], 4 * v6);
    int v19 = &v4[4 * v6];
LABEL_19:
    a1[1] = v19;
    return;
  }
  if (a2 >> 62) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = v7 - v3;
  uint64_t v9 = v8 >> 1;
  if (v8 >> 1 <= a2) {
    uint64_t v9 = a2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  size_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v10);
  uint64_t v12 = &v11[4 * v5];
  int v14 = &v11[4 * v13];
  bzero(v12, 4 * v6);
  uint64_t v15 = &v12[4 * v6];
  unint64_t v17 = *a1;
  char v16 = a1[1];
  if (v16 != *a1)
  {
    do
    {
      int v18 = *((_DWORD *)v16 - 1);
      v16 -= 4;
      *((_DWORD *)v12 - 1) = v18;
      v12 -= 4;
    }
    while (v16 != v17);
    char v16 = *a1;
  }
  *a1 = v12;
  a1[1] = v15;
  a1[2] = v14;
  if (v16)
  {
    operator delete(v16);
  }
}

void std::vector<ISOLoudnessInfoBox>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    unint64_t v4 = (void **)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        unint64_t v6 = v4;
        std::vector<ISOLoudnessInfo>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<ISOLoudnessInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unint64_t v6 = (void *)*((void *)v4 - 3);
        if (v6)
        {
          *((void *)v4 - 2) = v6;
          operator delete(v6);
        }
        v4 -= 40;
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<ISOLoudnessInfo>>(unint64_t a1)
{
  if (a1 >= 0x666666666666667) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(40 * a1);
}

BOOL MP4BoxParser_Track::GetPacketTableInfo(MP4BoxParser_Track *this, AudioFilePacketTableInfo *a2, uint64_t a3, unsigned int a4, int a5)
{
  int v5 = *((_DWORD *)this + 105);
  if ((v5 & 0x80000000) == 0)
  {
    SInt64 v6 = *((unsigned int *)this + 87);
    uint64_t v7 = *((int *)this + 104);
    if (v6 * a3 >= v7)
    {
      SInt64 v8 = v6 * a3 - v7;
    }
    else
    {
      LODWORD(v7) = v6 * a3;
      SInt64 v8 = 0;
    }
    a2->mPrimingFrames = v7;
    double v9 = *((double *)this + 41) * (double)v5;
    a2->mNumberValidFrames = v8;
    uint64_t v10 = (uint64_t)(v9 / (double)a4);
    if (v10 >= 1 && v8 > v10)
    {
      SInt64 v12 = v8 - v10;
      if (!a5 || v12 < v6)
      {
        a2->mRemainderFrames = v12;
        a2->mNumberValidFrames = v8 - (int)v12;
      }
    }
  }
  return v5 >= 0;
}

void MP4Parser_PacketProvider::MP4Parser_PacketProvider(MP4Parser_PacketProvider *this, const void *a2)
{
}

uint64_t MP4Parser_PacketProvider::AddTrackFragment(MP4BoxParser_Track *a1, const void *a2)
{
  v4[35] = *MEMORY[0x1E4F143B8];
  uint64_t result = MP4BoxParser_Track::GetInfoFromTrackSubBoxes(a1);
  if (!result) {
    MP4BoxParser::MP4BoxParser((MP4BoxParser *)v4, a2);
  }
  return result;
}

void sub_18FFA071C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  MP4BoxParser_TrackFragment::~MP4BoxParser_TrackFragment((MP4BoxParser_TrackFragment *)va);
  _Unwind_Resume(a1);
}

void SampleToRollDistanceTable::append_entry(uint64_t a1, long long *a2)
{
  if (*(unsigned char *)a1
    && (uint64_t v4 = *(void *)(a1 + 40), v4 != *(void *)(a1 + 32))
    && (uint64_t v5 = *(void *)(v4 - 16), *(void *)a2 == v5 + *(void *)(v4 - 24))
    && *((unsigned __int16 *)a2 + 8) == *(unsigned __int16 *)(v4 - 8))
  {
    *(void *)(v4 - 16) = *((void *)a2 + 1) + v5;
  }
  else
  {
    SInt64 v6 = *(char **)(a1 + 8);
    uint64_t v7 = *(char **)(a1 + 16);
    if (v6 == v7)
    {
LABEL_10:
      unint64_t v9 = *(void *)(a1 + 24);
      if ((unint64_t)v7 >= v9)
      {
        uint64_t v11 = v7 - v6;
        if (v7 - v6 <= -3) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v12 = v11 >> 1;
        unint64_t v13 = v9 - (void)v6;
        if (v13 <= (v11 >> 1) + 1) {
          unint64_t v14 = v12 + 1;
        }
        else {
          unint64_t v14 = v13;
        }
        BOOL v15 = v13 >= 0x7FFFFFFFFFFFFFFELL;
        uint64_t v16 = 0x7FFFFFFFFFFFFFFFLL;
        if (!v15) {
          uint64_t v16 = v14;
        }
        if (v16)
        {
          uint64_t v16 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v16);
          SInt64 v6 = *(char **)(a1 + 8);
          uint64_t v7 = *(char **)(a1 + 16);
        }
        else
        {
          uint64_t v17 = 0;
        }
        int v18 = (_WORD *)(v16 + 2 * v12);
        uint64_t v19 = v16 + 2 * v17;
        _WORD *v18 = *((_WORD *)a2 + 8);
        uint64_t v10 = v18 + 1;
        while (v7 != v6)
        {
          __int16 v20 = *((_WORD *)v7 - 1);
          v7 -= 2;
          *--int v18 = v20;
        }
        *(void *)(a1 + 8) = v18;
        *(void *)(a1 + 16) = v10;
        *(void *)(a1 + 24) = v19;
        if (v6) {
          operator delete(v6);
        }
      }
      else
      {
        *(_WORD *)uint64_t v7 = *((_WORD *)a2 + 8);
        uint64_t v10 = v7 + 2;
      }
      *(void *)(a1 + 16) = v10;
    }
    else
    {
      SInt64 v8 = *(unsigned __int16 **)(a1 + 8);
      while (*v8 != *((__int16 *)a2 + 8))
      {
        if (++v8 == (unsigned __int16 *)v7) {
          goto LABEL_10;
        }
      }
    }
    char v22 = *(void **)(a1 + 40);
    unint64_t v21 = *(void *)(a1 + 48);
    if ((unint64_t)v22 >= v21)
    {
      unint64_t v25 = *(void **)(a1 + 32);
      unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * (v22 - v25) + 1;
      if (v26 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - (void)v25) >> 3);
      if (2 * v27 > v26) {
        unint64_t v26 = 2 * v27;
      }
      if (v27 >= 0x555555555555555) {
        unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v28 = v26;
      }
      if (v28)
      {
        if (v28 > 0xAAAAAAAAAAAAAAALL) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v29 = (char *)operator new(24 * v28);
      }
      else
      {
        uint64_t v29 = 0;
      }
      CFDictionaryRef v30 = &v29[8 * (v22 - v25)];
      *(_OWORD *)CFDictionaryRef v30 = *a2;
      *((void *)v30 + 2) = *((void *)a2 + 2);
      int v24 = v30 + 24;
      if (v22 != v25)
      {
        do
        {
          long long v31 = *(_OWORD *)(v22 - 3);
          *((void *)v30 - 1) = *(v22 - 1);
          *(_OWORD *)(v30 - 24) = v31;
          v30 -= 24;
          v22 -= 3;
        }
        while (v22 != v25);
        char v22 = *(void **)(a1 + 32);
      }
      *(void *)(a1 + 32) = v30;
      *(void *)(a1 + 4std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v24;
      *(void *)(a1 + 48) = &v29[24 * v28];
      if (v22) {
        operator delete(v22);
      }
    }
    else
    {
      long long v23 = *a2;
      v22[2] = *((void *)a2 + 2);
      *(_OWORD *)char v22 = v23;
      int v24 = v22 + 3;
    }
    *(void *)(a1 + 4std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v24;
    *(unsigned char *)a1 = 1;
  }
}

uint64_t MP4Parser_PacketProvider::GetMaximumPacketSize(MP4Parser_PacketProvider *this)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (!(*(unsigned int (**)(void))(**((void **)this + 1) + 144))(*((void *)this + 1))
    || (double SampleSizeBox = MP4BoxParser_Track::GetSampleSizeBox((MP4BoxParser_Track *)v11, (uint64_t)this), !v13))
  {
    unsigned int v4 = 0;
    goto LABEL_19;
  }
  uint64_t v3 = *((void *)this + 1);
  BOOL v15 = (MP4BoxParser *)&unk_1EDF8DA18;
  (*(void (**)(uint64_t *__return_ptr, double))(*(void *)v3 + 88))(&v16, SampleSizeBox);
  char v17 = 0;
  int v18 = 0;
  uint64_t v19 = 0;
  char v20 = 0;
  int v21 = 8;
  BOOL v15 = (MP4BoxParser *)&unk_1EDF939D0;
  unsigned int v22 = 0;
  unsigned int v23 = 0;
  if (!MP4BoxParser_SampleSize::Init(&v15))
  {
    if (v18 == 1937011578)
    {
      unsigned int v4 = v22;
      if (v22) {
        goto LABEL_15;
      }
    }
    unsigned int v14 = 0;
    if (v23)
    {
      unsigned int v5 = 0;
      unsigned int v4 = 0;
      do
      {
        int SampleSize = MP4BoxParser_SampleSize::GetSampleSize((MP4BoxParser_SampleSize *)&v15, v5, &v14);
        unsigned int v7 = v14;
        if (v14 <= v4) {
          unsigned int v7 = v4;
        }
        if (!SampleSize) {
          unsigned int v4 = v7;
        }
        ++v5;
      }
      while (v5 < v23);
      goto LABEL_15;
    }
  }
  unsigned int v4 = 0;
LABEL_15:
  uint64_t v8 = v16;
  BOOL v15 = (MP4BoxParser *)&unk_1EDF8DA18;
  uint64_t v16 = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
LABEL_19:
  unsigned int v9 = *((_DWORD *)this + 114);
  if (v4 <= v9) {
    return v9;
  }
  else {
    return v4;
  }
}

void sub_18FFA0BB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a18) {
    (*(void (**)(uint64_t))(*(void *)a18 + 8))(a18);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MP4Parser_PacketProvider::GetPacketInfo(MP4Parser_PacketProvider *this, unsigned int a2, unsigned int *a3, unint64_t *a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (MP4BoxParser_Track::GetInfoFromTrackSubBoxes(this))
  {
    unsigned int v8 = 0;
LABEL_13:
    uint64_t v11 = 1885563711;
    if ((*(unsigned int (**)(MP4Parser_PacketProvider *))(*(void *)this + 32))(this) > a2)
    {
      char v13 = (uint64_t *)*((void *)this + 58);
      if (v13)
      {
        uint64_t v14 = a2 - v8;
        CompressedPacketTable::operator[]((uint64_t)&v20, v13, v14);
        *a4 = (unint64_t)v20;
        CompressedPacketTable::operator[]((uint64_t)&v20, v13, v14);
        uint64_t v11 = 0;
        *a3 = HIDWORD(v21);
      }
    }
    return v11;
  }
  unsigned int v8 = *((_DWORD *)this + 25);
  if (v8 <= a2) {
    goto LABEL_13;
  }
  if (!(*(unsigned int (**)(void))(**((void **)this + 1) + 144))(*((void *)this + 1))) {
    return 0xFFFFFFFFLL;
  }
  double SampleSizeBox = MP4BoxParser_Track::GetSampleSizeBox((MP4BoxParser_Track *)v17, (uint64_t)this);
  if (!v19) {
    return 0;
  }
  uint64_t v10 = *((void *)this + 1);
  char v20 = (MP4BoxParser *)&unk_1EDF8DA18;
  (*(void (**)(uint64_t *__return_ptr, double))(*(void *)v10 + 88))(&v21, SampleSizeBox);
  char v22 = 0;
  int v23 = 0;
  uint64_t v24 = 0;
  char v25 = 0;
  int v26 = 8;
  char v20 = (MP4BoxParser *)&unk_1EDF939D0;
  int v27 = 0;
  int v28 = 0;
  uint64_t v11 = MP4BoxParser_SampleSize::Init(&v20);
  if (!v11)
  {
    unsigned int v16 = 0;
    if (!MP4BoxParser_SampleSize::GetSampleSize((MP4BoxParser_SampleSize *)&v20, a2, &v16))
    {
      *a3 = v16;
      MP4BoxParser_Track::GetCompressedPacketOffset((uint64_t **)this, a2, a4);
    }
  }
  uint64_t v12 = v21;
  char v20 = (MP4BoxParser *)&unk_1EDF8DA18;
  uint64_t v21 = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  return v11;
}

void sub_18FFA0E6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a18) {
    (*(void (**)(uint64_t))(*(void *)a18 + 8))(a18);
  }
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MP4Parser_PacketProvider::GetContiguousPacketCountAndSize(uint64_t **this, unsigned int a2, unsigned int a3, unsigned int *a4, unsigned int *a5)
{
  *a4 = 0;
  *a5 = 0;
  int InfoFromTrackSubBoxes = MP4BoxParser_Track::GetInfoFromTrackSubBoxes((MP4BoxParser_Track *)this);
  unsigned int v11 = 0;
  if (!InfoFromTrackSubBoxes)
  {
    unsigned int v11 = *((_DWORD *)this + 25);
    if (v11 > a2)
    {
      MP4BoxParser_Track::UpdateOffsetTableToIndex((MP4BoxParser_Track *)this, a3 + a2);
      CompressedPacketCFIndex Count = MP4BoxParser_Track::GetCompressedPacketCount((MP4BoxParser_Track *)this);
      if (CompressedPacketCount > a2)
      {
        if (*((unsigned char *)this + 440))
        {
          unsigned int v13 = ((uint64_t (*)(uint64_t **))(*this)[4])(this) - a2;
          if (v13 >= a3) {
            unsigned int v14 = a3;
          }
          else {
            unsigned int v14 = v13;
          }
LABEL_28:
          if (v14 >= a3) {
            int v28 = a3;
          }
          else {
            int v28 = v14;
          }
          *a4 = v28;
          if (v28) {
            unsigned int ByteCountForPackets = MP4BoxParser_Track::GetByteCountForPackets((MP4BoxParser_Track *)this, a2, v28);
          }
          else {
            unsigned int ByteCountForPackets = 0;
          }
          uint64_t result = 0;
          *a5 = ByteCountForPackets;
          return result;
        }
        char v22 = this[14];
        if (v22)
        {
          if (a3 + a2 <= CompressedPacketCount) {
            unsigned int v23 = a3;
          }
          else {
            unsigned int v23 = CompressedPacketCount - a2;
          }
          CompressedPacketTable::operator[]((uint64_t)&v33, v22, a2);
          unsigned int v24 = v33;
          CompressedPacketTable::operator[]((uint64_t)&v33, this[14], a2);
          if (v23 == 1)
          {
            unsigned int v14 = 1;
          }
          else
          {
            uint64_t v25 = v34;
            unsigned int v14 = 1;
            while (1)
            {
              uint64_t v26 = v25 + v24;
              CompressedPacketTable::operator[]((uint64_t)&v33, this[14], a2 + v14);
              if (v26 < v33) {
                break;
              }
              CompressedPacketTable::operator[]((uint64_t)&v33, this[14], a2 + v14);
              unsigned int v24 = v33;
              CompressedPacketTable::operator[]((uint64_t)&v33, this[14], a2 + v14);
              uint64_t v25 = v34;
              if (v14++ >= v23 - 1)
              {
                unsigned int v14 = v23;
                goto LABEL_28;
              }
            }
          }
          goto LABEL_28;
        }
      }
      unsigned int v14 = 0;
      goto LABEL_28;
    }
  }
  uint64_t v15 = a2 - v11;
  if (v15 >= *((_DWORD *)this + 111)) {
    return 1885563711;
  }
  unsigned int v16 = this[58];
  if (v16)
  {
    do
    {
      ++*a4;
      CompressedPacketTable::operator[]((uint64_t)&v33, v16, v15);
      *a5 += v34;
      if (*a4 == a3) {
        break;
      }
      unint64_t v17 = v15 + 1;
      unint64_t v18 = *((unsigned int *)this + 111);
      if (v15 + 1 < v18)
      {
        CompressedPacketTable::operator[]((uint64_t)&v33, v16, v15);
        uint64_t v19 = v33;
        CompressedPacketTable::operator[]((uint64_t)v31, v16, v15);
        uint64_t v20 = v19 + v32;
        CompressedPacketTable::operator[]((uint64_t)v30, v16, v17);
        if (v20 != v30[0]) {
          return 0;
        }
        unint64_t v18 = *((unsigned int *)this + 111);
      }
      uint64_t v15 = v17;
    }
    while (v17 < v18);
  }
  return 0;
}

uint64_t MP4Parser_PacketProvider::GetPacketOffset(MP4Parser_PacketProvider *this, unsigned int a2, unint64_t *a3)
{
  if ((*(unsigned int (**)(MP4Parser_PacketProvider *))(*(void *)this + 32))(this) <= a2) {
    return 1885563711;
  }
  if (!(*(unsigned int (**)(void))(**((void **)this + 1) + 144))(*((void *)this + 1))) {
    return 0xFFFFFFFFLL;
  }
  if (MP4BoxParser_Track::GetInfoFromTrackSubBoxes(this) || *((_DWORD *)this + 25) <= a2)
  {
    if (!*((void *)this + 58)) {
      return 0xFFFFFFFFLL;
    }
    CompressedPacketTable::operator[]((uint64_t)v7, *((uint64_t **)this + 58), a2 - *((_DWORD *)this + 25));
    *a3 = v7[0];
    return 0;
  }
  if (!(*(unsigned int (**)(void))(**((void **)this + 1) + 144))(*((void *)this + 1))) {
    return 0xFFFFFFFFLL;
  }
  MP4BoxParser_Track::UpdateOffsetTableToIndex(this, a2);
  return MP4BoxParser_Track::GetCompressedPacketOffset((uint64_t **)this, a2, a3);
}

uint64_t MP4Parser_PacketProvider::GetPacketIndexForOffset(MP4Parser_PacketProvider *this, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = *a3;
  if (v6 >= (*(unsigned int (**)(MP4Parser_PacketProvider *))(*(void *)this + 32))(this)) {
    return 0;
  }
  uint64_t v8 = 0;
  while (1)
  {
    uint64_t result = MP4Parser_PacketProvider::GetPacketOffset(this, v6, (unint64_t *)&v8);
    if (result) {
      break;
    }
    if (v8 >= a2)
    {
      uint64_t result = 0;
      *a3 = v6;
      return result;
    }
    if (++v6 >= (*(unsigned int (**)(MP4Parser_PacketProvider *))(*(void *)this + 32))(this)) {
      return 0;
    }
  }
  return result;
}

uint64_t DataSource::SetCloseOnDelete(uint64_t this, char a2)
{
  *(unsigned char *)(this + 8) = a2;
  return this;
}

void DataSource::Slice(DataSource *this)
{
}

uint64_t Slice_DataSource::IsInMemory(Slice_DataSource *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 144))();
}

uint64_t Slice_DataSource::CanWrite(Slice_DataSource *this)
{
  return 0;
}

uint64_t Slice_DataSource::CanRead(Slice_DataSource *this)
{
  return 1;
}

uint64_t Slice_DataSource::CanSetSize(Slice_DataSource *this)
{
  return 0;
}

uint64_t Slice_DataSource::CanGetSize(Slice_DataSource *this)
{
  return 1;
}

uint64_t Slice_DataSource::CanSeek(Slice_DataSource *this)
{
  return 1;
}

void Slice_DataSource::Slice(Slice *this)
{
}

uint64_t Slice_DataSource::WithData(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = 0;
  uint64_t v8 = (*(uint64_t (**)(void *, uint64_t *))(*a1 + 24))(a1, &v13);
  if (v8)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::__split_buffer<std::string> buf = 136315394;
      unint64_t v17 = "DataSource.cpp";
      __int16 v18 = 1024;
      int v19 = 834;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  DataSource data unable to determine size", buf, 0x12u);
    }
  }
  else if (a2 < 0 || v13 <= a2)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::__split_buffer<std::string> buf = 136315394;
      unint64_t v17 = "DataSource.cpp";
      __int16 v18 = 1024;
      int v19 = 835;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  DataSource data bad position", buf, 0x12u);
    }
    return 4294967256;
  }
  else if (v13 - a3 >= a2)
  {
    uint64_t v10 = a1[2];
    uint64_t v11 = a1[3];
    uint64_t v12 = (void *)a4[3];
    if (v12)
    {
      if (v12 == a4)
      {
        uint64_t v15 = v14;
        (*(void (**)(void *, void *))(*a4 + 24))(a4, v14);
      }
      else
      {
        uint64_t v15 = (void *)(*(uint64_t (**)(void *))(*v12 + 16))(v12);
      }
    }
    else
    {
      uint64_t v15 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)v10 + 80))(v10, v11 + a2, a3, v14);
    std::__function::__value_func<void ()(void const*)>::~__value_func[abi:ne180100](v14);
    return 0;
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::__split_buffer<std::string> buf = 136315394;
      unint64_t v17 = "DataSource.cpp";
      __int16 v18 = 1024;
      int v19 = 836;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  DataSource data insufficient amount", buf, 0x12u);
    }
    return 4294967257;
  }
  return v8;
}

void sub_18FFA17A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__function::__value_func<void ()(void const*)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(void const*)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t DataSource::WriteBytes64(DataSource *this, unsigned __int16 a2, uint64_t a3, unint64_t a4, char *a5, unint64_t *a6)
{
  if (a4)
  {
    unint64_t v8 = a4;
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    while (1)
    {
      uint64_t v12 = v8 >= 0xFFFFFFFF ? 0xFFFFFFFFLL : v8;
      unsigned int v15 = 0;
      uint64_t result = (*(uint64_t (**)(DataSource *, void, uint64_t, uint64_t, char *, unsigned int *))(*(void *)this + 56))(this, a2, a3, v12, &a5[v11], &v15);
      v10 += v15;
      if (result || v15 < v12) {
        break;
      }
      a3 = 0;
      v11 += v12;
      a2 = 1;
      v8 -= v12;
      if (!v8) {
        goto LABEL_14;
      }
    }
  }
  else
  {
    unint64_t v10 = 0;
LABEL_14:
    uint64_t result = 0;
  }
  if (a6) {
    *a6 = v10;
  }
  return result;
}

uint64_t DataSource::ReadBytes64(DataSource *this, unsigned __int16 a2, uint64_t a3, unint64_t a4, char *a5, unint64_t *a6)
{
  if (a4)
  {
    unint64_t v8 = a4;
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    while (1)
    {
      uint64_t v12 = v8 >= 0xFFFFFFFF ? 0xFFFFFFFFLL : v8;
      unsigned int v15 = 0;
      uint64_t result = (*(uint64_t (**)(DataSource *, void, uint64_t, uint64_t, char *, unsigned int *))(*(void *)this + 48))(this, a2, a3, v12, &a5[v11], &v15);
      v10 += v15;
      if (result || v15 < v12) {
        break;
      }
      a3 = 0;
      v11 += v12;
      a2 = 1;
      v8 -= v12;
      if (!v8) {
        goto LABEL_14;
      }
    }
  }
  else
  {
    unint64_t v10 = 0;
LABEL_14:
    uint64_t result = 0;
  }
  if (a6) {
    *a6 = v10;
  }
  return result;
}

void Slice_DataSource::WriteBytes(Slice_DataSource *this, unsigned __int16 a2, uint64_t a3, unsigned int a4, const void *a5, unsigned int *a6)
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "not writable");
}

void sub_18FFA1A40(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Slice_DataSource::ReadBytes(Slice_DataSource *this, char a2, uint64_t a3, unsigned int a4, void *a5, unsigned int *a6)
{
  if (a6) {
    *a6 = 0;
  }
  uint64_t v14 = 0;
  uint64_t result = (*(uint64_t (**)(Slice_DataSource *, uint64_t *))(*(void *)this + 24))(this, &v14);
  if (!result)
  {
    if ((a2 & 3) == 2)
    {
      a3 += v14;
    }
    else if ((a2 & 3) == 1)
    {
      a3 += *((void *)this + 4);
    }
    else if ((a2 & 3) != 0)
    {
      a3 = 0;
    }
    uint64_t result = 4294967256;
    if ((a3 & 0x8000000000000000) == 0 && v14 > a3)
    {
      if (v14 - a3 >= a4) {
        uint64_t v12 = a4;
      }
      else {
        uint64_t v12 = v14 - a3;
      }
      if (v12 < 1)
      {
        return 4294967246;
      }
      else
      {
        unsigned int v13 = v12;
        uint64_t result = (*(uint64_t (**)(void, void, uint64_t))(**((void **)this + 2) + 48))(*((void *)this + 2), 0, *((void *)this + 3) + a3);
        if (a6) {
          *a6 = v13;
        }
        *((void *)this + 4) = a3 + v13;
      }
    }
  }
  return result;
}

uint64_t Slice_DataSource::GetPos(Slice_DataSource *this, uint64_t *a2)
{
  *a2 = *((void *)this + 4);
  return 0;
}

uint64_t Slice_DataSource::SetSize(Slice_DataSource *this, uint64_t a2)
{
  *((void *)this + 5) = a2;
  *((unsigned char *)this + 48) = 1;
  return 0;
}

uint64_t Slice_DataSource::GetSize(Slice_DataSource *this, uint64_t *a2)
{
  if (*((unsigned char *)this + 48))
  {
    uint64_t v4 = *((void *)this + 5);
LABEL_3:
    uint64_t result = 0;
    *a2 = v4;
    return result;
  }
  uint64_t result = (*(uint64_t (**)(void, uint64_t *))(**((void **)this + 2) + 24))(*((void *)this + 2), a2);
  if (!result)
  {
    uint64_t v6 = *((void *)this + 3);
    if (*a2 < v6) {
      uint64_t v6 = *a2;
    }
    uint64_t v4 = *a2 - v6;
    goto LABEL_3;
  }
  return result;
}

uint64_t DataSource::GetSize32(DataSource *this, unsigned int *a2)
{
  uint64_t v4 = 0;
  uint64_t result = (*(uint64_t (**)(DataSource *, uint64_t *))(*(void *)this + 24))(this, &v4);
  if (!result)
  {
    if (v4 <= 0xFFFFFFFFLL)
    {
      uint64_t result = 0;
      *a2 = v4;
    }
    else
    {
      return 1868981823;
    }
  }
  return result;
}

void Slice_DataSource::~Slice_DataSource(Slice_DataSource *this)
{
}

uint64_t DataSource::WithData(uint64_t a1, uint64_t a2, size_t size, uint64_t a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  unsigned int v12 = 0;
  unint64_t v8 = malloc_type_calloc(1uLL, size, 0x2B2D8D1BuLL);
  if (v8)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t, void, uint64_t, size_t, void *, unsigned int *))(*(void *)a1 + 48))(a1, 0, a2, size, v8, &v12);
    if (v9)
    {
      uint64_t v10 = v9;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::__split_buffer<std::string> buf = 136315394;
        uint64_t v14 = "DataSource.cpp";
        __int16 v15 = 1024;
        int v16 = 121;
        _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  DataSource data read failed", buf, 0x12u);
      }
    }
    else if (v12 >= size)
    {
      std::function<void ()(void const*)>::operator()(*(void *)(a4 + 24), (uint64_t)v8);
      uint64_t v10 = 0;
    }
    else
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::__split_buffer<std::string> buf = 136315394;
        uint64_t v14 = "DataSource.cpp";
        __int16 v15 = 1024;
        int v16 = 122;
        _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  DataSource data insufficient amount", buf, 0x12u);
      }
      uint64_t v10 = 4294967257;
    }
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::__split_buffer<std::string> buf = 136315394;
      uint64_t v14 = "DataSource.cpp";
      __int16 v15 = 1024;
      int v16 = 118;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  DataSource data insufficient memory", buf, 0x12u);
    }
    uint64_t v10 = 4294967188;
  }
  free(v8);
  return v10;
}

uint64_t std::function<void ()(void const*)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  if (!a1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v3);
}

uint64_t UnixFile_DataSource::IsInMemory(UnixFile_DataSource *this)
{
  return 0;
}

uint64_t UnixFile_DataSource::CanWrite(UnixFile_DataSource *this)
{
  return *((unsigned char *)this + 16) & 2;
}

uint64_t UnixFile_DataSource::CanRead(UnixFile_DataSource *this)
{
  return *((unsigned char *)this + 16) & 1;
}

uint64_t UnixFile_DataSource::CanSetSize(UnixFile_DataSource *this)
{
  return 1;
}

uint64_t UnixFile_DataSource::CanGetSize(UnixFile_DataSource *this)
{
  return 1;
}

uint64_t UnixFile_DataSource::CanSeek(UnixFile_DataSource *this)
{
  return 1;
}

uint64_t UnixFile_DataSource::WriteBytes(UnixFile_DataSource *this, unsigned int a2, uint64_t a3, unsigned int a4, const void *a5, unsigned int *a6)
{
  if (a6) {
    *a6 = 0;
  }
  if (!a5) {
    return 4294967246;
  }
  uint64_t v11 = UnixFile_DataSource::UFCurrentOffset(this, a2, a3);
  if (v11 < 0) {
    return 4294967256;
  }
  off_t v12 = v11;
  *((void *)this + 3) = -1;
  int v13 = (a2 >> 5) & 1;
  uint64_t v14 = *((unsigned int *)this + 5);
  if (v14 != v13)
  {
    *((_DWORD *)this + 5) = v13;
    fcntl(*((_DWORD *)this + 3), 48, v14);
  }
  ssize_t v15 = pwrite(*((_DWORD *)this + 3), a5, a4, v12);
  if (v15 == -1) {
    return 4294967256;
  }
  unsigned int v16 = v15;
  *((void *)this + 4) = v15 + v12;
  uint64_t result = 0;
  if (a6) {
    *a6 = v16;
  }
  return result;
}

uint64_t UnixFile_DataSource::GetPos(UnixFile_DataSource *this, uint64_t *a2)
{
  *a2 = *((void *)this + 4);
  return 0;
}

uint64_t UnixFile_DataSource::SetSize(UnixFile_DataSource *this, off_t a2)
{
  *((void *)this + 3) = -1;
  if (ftruncate(*((_DWORD *)this + 3), a2) == -1) {
    return 1886547263;
  }
  uint64_t result = 0;
  *((void *)this + 3) = a2;
  return result;
}

uint64_t Seekable_DataSource::IsInMemory(Seekable_DataSource *this)
{
  return 0;
}

BOOL Seekable_DataSource::CanWrite(Seekable_DataSource *this)
{
  return *((void *)this + 5) != 0;
}

BOOL Seekable_DataSource::CanRead(Seekable_DataSource *this)
{
  return *((void *)this + 4) != 0;
}

BOOL Seekable_DataSource::CanSetSize(Seekable_DataSource *this)
{
  return *((void *)this + 7) != 0;
}

BOOL Seekable_DataSource::CanGetSize(Seekable_DataSource *this)
{
  return *((void *)this + 6) != 0;
}

uint64_t Seekable_DataSource::CanSeek(Seekable_DataSource *this)
{
  return 1;
}

uint64_t Seekable_DataSource::WriteBytes(Seekable_DataSource *this, char a2, uint64_t a3, uint64_t a4, const void *a5, unsigned int *a6)
{
  uint64_t v6 = (uint64_t (*)(void, uint64_t, uint64_t, const void *, unsigned int *))*((void *)this + 5);
  if (!v6) {
    return 1869627199;
  }
  if (!a5) {
    return 4294967246;
  }
  uint64_t v19 = 0;
  int v12 = a2 & 3;
  if (v12 == 2)
  {
    uint64_t result = (*(uint64_t (**)(Seekable_DataSource *, uint64_t *))(*(void *)this + 24))(this, &v19);
    if (result) {
      return result;
    }
    uint64_t v14 = (void *)((char *)this + 24);
    uint64_t v15 = v19;
LABEL_11:
    uint64_t v16 = v15 + a3;
    if (v15 + a3 < 0) {
      return 4294967256;
    }
    goto LABEL_14;
  }
  uint64_t v14 = (void *)((char *)this + 24);
  if ((a2 & 3) != 0)
  {
    if (v12 != 1)
    {
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      if (v12 != 2) {
        goto LABEL_15;
      }
      goto LABEL_11;
    }
    uint64_t v16 = *v14 + a3;
    if (v16 < 0) {
      return 4294967256;
    }
  }
  else
  {
    uint64_t v16 = a3;
    if (a3 < 0) {
      return 4294967256;
    }
  }
LABEL_14:
  uint64_t v6 = (uint64_t (*)(void, uint64_t, uint64_t, const void *, unsigned int *))*((void *)this + 5);
LABEL_15:
  unsigned int v18 = 0;
  uint64_t result = v6(*((void *)this + 2), v16, a4, a5, &v18);
  if (!result)
  {
    uint64_t v17 = v18;
    if (a6) {
      *a6 = v18;
    }
    *uint64_t v14 = v16 + v17;
  }
  return result;
}

uint64_t Seekable_DataSource::ReadBytes(Seekable_DataSource *this, char a2, uint64_t a3, unsigned int a4, void *a5, unsigned int *a6)
{
  if (a6) {
    *a6 = 0;
  }
  if (!*((void *)this + 4)) {
    return 1869627199;
  }
  if (!a5) {
    return 4294967246;
  }
  uint64_t v17 = 0;
  uint64_t result = (*(uint64_t (**)(Seekable_DataSource *, uint64_t *))(*(void *)this + 24))(this, &v17);
  if (result) {
    return result;
  }
  int v13 = a2 & 3;
  if ((a2 & 3) == 0) {
    goto LABEL_10;
  }
  if (v13 == 1)
  {
    a3 += *((void *)this + 3);
    if (a3 < 0) {
      return 4294967256;
    }
    goto LABEL_18;
  }
  if (v13 == 2)
  {
    a3 += v17;
LABEL_10:
    if (a3 < 0) {
      return 4294967256;
    }
    goto LABEL_18;
  }
  a3 = 0;
LABEL_18:
  if (v17 <= a3) {
    return 4294967257;
  }
  if (v17 - a3 >= a4) {
    uint64_t v14 = a4;
  }
  else {
    uint64_t v14 = v17 - a3;
  }
  unsigned int v16 = 0;
  uint64_t result = (*((uint64_t (**)(void, uint64_t, uint64_t, void *, unsigned int *))this + 4))(*((void *)this + 2), a3, v14, a5, &v16);
  uint64_t v15 = v16;
  if (a6) {
    *a6 = v16;
  }
  *((void *)this + 3) = a3 + v15;
  return result;
}

uint64_t Seekable_DataSource::GetPos(Seekable_DataSource *this, uint64_t *a2)
{
  *a2 = *((void *)this + 3);
  return 0;
}

uint64_t Seekable_DataSource::SetSize(Seekable_DataSource *this)
{
  uint64_t v1 = (uint64_t (*)(void))*((void *)this + 7);
  if (v1) {
    return v1(*((void *)this + 2));
  }
  else {
    return 1869627199;
  }
}

uint64_t Seekable_DataSource::GetSize(Seekable_DataSource *this, uint64_t *a2)
{
  uint64_t v3 = (uint64_t (*)(void))*((void *)this + 6);
  if (v3) {
    uint64_t v4 = v3(*((void *)this + 2));
  }
  else {
    uint64_t v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  *a2 = v4;
  return 0;
}

void Seekable_DataSource::~Seekable_DataSource(Seekable_DataSource *this)
{
}

uint64_t Cached_DataSource::IsInMemory(Cached_DataSource *this)
{
  return 0;
}

uint64_t Cached_DataSource::CanWrite(Cached_DataSource *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 136))();
}

uint64_t Cached_DataSource::CanRead(Cached_DataSource *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 128))();
}

uint64_t Cached_DataSource::CanSetSize(Cached_DataSource *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 120))();
}

uint64_t Cached_DataSource::CanGetSize(Cached_DataSource *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 112))();
}

uint64_t Cached_DataSource::CanSeek(Cached_DataSource *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 104))();
}

uint64_t Cached_DataSource::WriteBytes(Cached_DataSource *this, uint64_t a2, int64_t a3, uint64_t a4, char *__src, unsigned int *a6)
{
  if (!__src) {
    return 4294967246;
  }
  uint64_t v29 = 0;
  int v12 = a2 & 3;
  if (v12 == 2)
  {
    uint64_t result = (*(uint64_t (**)(Cached_DataSource *, uint64_t *))(*(void *)this + 24))(this, &v29);
    if (result) {
      return result;
    }
    uint64_t v14 = v29;
LABEL_9:
    int64_t v15 = v14 + a3;
LABEL_10:
    if ((v15 & 0x8000000000000000) == 0) {
      goto LABEL_11;
    }
    return 4294967256;
  }
  int64_t v15 = a3;
  if ((a2 & 3) == 0) {
    goto LABEL_10;
  }
  if (v12 != 1)
  {
    uint64_t v14 = 0;
    int64_t v15 = 0;
    if (v12 != 2) {
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  int64_t v15 = *((void *)this + 8) + a3;
  if (v15 < 0) {
    return 4294967256;
  }
LABEL_11:
  uint64_t v16 = *((void *)this + 3);
  if (v16)
  {
    unint64_t v17 = *((unsigned int *)this + 8);
    BOOL v18 = v17 > v15;
    unint64_t v19 = v17 - v15;
    if (v18)
    {
      if (v19 >= a4) {
        size_t v20 = a4;
      }
      else {
        size_t v20 = v19;
      }
      memcpy((void *)(v16 + v15), __src, v20);
    }
  }
  uint64_t v21 = *((void *)this + 5);
  if (v21)
  {
    int64_t v22 = *((void *)this + 7);
    if (v15 + a4 >= v22)
    {
      uint64_t v23 = *((unsigned int *)this + 13);
      if (v15 < v22 + v23)
      {
        if (v22 <= v15) {
          int64_t v24 = v15;
        }
        else {
          int64_t v24 = *((void *)this + 7);
        }
        unint64_t v25 = v22 - v24 + v23;
        if (v25 >= (unint64_t)a4 - (v24 - v15)) {
          size_t v26 = a4 - (v24 - v15);
        }
        else {
          size_t v26 = v25;
        }
        memcpy((void *)(v21 + v24 - v22), &__src[v24 - v15], v26);
      }
    }
  }
  unsigned int v28 = 0;
  uint64_t result = (*(uint64_t (**)(void, uint64_t, int64_t, uint64_t, char *, unsigned int *))(**((void **)this + 2) + 56))(*((void *)this + 2), a2, a3, a4, __src, &v28);
  unsigned int v27 = v28;
  *((void *)this + 8) = v15 + v28;
  if (a6) {
    *a6 = v27;
  }
  return result;
}

uint64_t Cached_DataSource::GetPos(Cached_DataSource *this, uint64_t *a2)
{
  return (*(uint64_t (**)(void, uint64_t *))(**((void **)this + 2) + 40))(*((void *)this + 2), a2);
}

uint64_t Cached_DataSource::SetSize(Cached_DataSource *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 32))();
}

uint64_t Buffer_DataSource::IsInMemory(Buffer_DataSource *this)
{
  return 1;
}

uint64_t Buffer_DataSource::CanWrite(Buffer_DataSource *this)
{
  return 0;
}

uint64_t Buffer_DataSource::CanRead(Buffer_DataSource *this)
{
  return 1;
}

uint64_t Buffer_DataSource::CanSetSize(Buffer_DataSource *this)
{
  return 0;
}

uint64_t Buffer_DataSource::CanGetSize(Buffer_DataSource *this)
{
  return 1;
}

uint64_t Buffer_DataSource::CanSeek(Buffer_DataSource *this)
{
  return 1;
}

void Buffer_DataSource::Slice(Buffer_DataSource *this)
{
}

uint64_t Buffer_DataSource::WithData(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a2 - a1[4];
  if (v4 < 0 || (uint64_t v5 = a1[2], v4 >= v5))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      unint64_t v8 = "DataSource.cpp";
      __int16 v9 = 1024;
      int v10 = 764;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  DataSource data bad position", (uint8_t *)&v7, 0x12u);
    }
    return 4294967256;
  }
  else if (v4 <= v5 - a3)
  {
    std::function<void ()(void const*)>::operator()(*(void *)(a4 + 24), a1[3] + v4);
    return 0;
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      unint64_t v8 = "DataSource.cpp";
      __int16 v9 = 1024;
      int v10 = 765;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  DataSource data insufficient amount", (uint8_t *)&v7, 0x12u);
    }
    return 4294967257;
  }
}

void Buffer_DataSource::WriteBytes(Buffer_DataSource *this, unsigned __int16 a2, uint64_t a3, unsigned int a4, const void *a5, unsigned int *a6)
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "not writable");
}

void sub_18FFA2958(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Buffer_DataSource::ReadBytes(Buffer_DataSource *this, char a2, uint64_t a3, unsigned int a4, void *__dst, unsigned int *a6)
{
  if (a6) {
    *a6 = 0;
  }
  uint64_t v8 = *((void *)this + 2);
  uint64_t v9 = *((void *)this + 4);
  if ((a2 & 3) == 2)
  {
    uint64_t v10 = v8 + a3 + v9;
  }
  else if ((a2 & 3) == 1)
  {
    uint64_t v10 = *((void *)this + 5) + a3;
  }
  else if ((a2 & 3) != 0)
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = a3;
  }
  uint64_t result = 4294967256;
  uint64_t v12 = v10 - v9;
  if (v10 - v9 >= 0)
  {
    BOOL v13 = v8 <= v12;
    uint64_t v14 = v8 - v12;
    if (!v13)
    {
      if (v14 >= a4) {
        int64_t v15 = a4;
      }
      else {
        int64_t v15 = v14;
      }
      if (v15 <= 0)
      {
        if (a6) {
          *a6 = 0;
        }
        return 4294967246;
      }
      else
      {
        memcpy(__dst, (const void *)(*((void *)this + 3) + v12), v15);
        if (a6) {
          *a6 = v15;
        }
        uint64_t result = 0;
        *((void *)this + 5) = v15 + v12 + *((void *)this + 4);
      }
    }
  }
  return result;
}

uint64_t Buffer_DataSource::GetPos(Buffer_DataSource *this, uint64_t *a2)
{
  *a2 = *((void *)this + 5);
  return 0;
}

uint64_t Buffer_DataSource::SetSize(Buffer_DataSource *this, uint64_t a2)
{
  *((void *)this + 2) = a2 - *((void *)this + 4);
  return 0;
}

uint64_t Buffer_DataSource::GetSize(Buffer_DataSource *this, uint64_t *a2)
{
  *a2 = *((void *)this + 4) + *((void *)this + 2);
  return 0;
}

void Buffer_DataSource::~Buffer_DataSource(Buffer_DataSource *this)
{
}

void *CADefaultLog()
{
  p_vtable = &OBJC_METACLASS___CarbonComponentScannerXPCClient.vtable;
  {
    p_vtable = (void **)(&OBJC_METACLASS___CarbonComponentScannerXPCClient + 24);
    if (v2)
    {
      CADefaultLog::global = (uint64_t)os_log_create("com.apple.coreaudio", "default");
      p_vtable = (void **)(&OBJC_METACLASS___CarbonComponentScannerXPCClient + 24);
    }
  }
  return p_vtable[492];
}

uint64_t ParseAC3Header(unsigned __int8 *a1, unsigned int a2, AudioStreamBasicDescription *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6, unsigned int *a7, int *a8)
{
  *(void *)&v82[11] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = 560226676;
  if (a1 && a2 >= 0xA)
  {
    if (a2 >= 0xC) {
      unsigned int v16 = 12;
    }
    else {
      unsigned int v16 = a2;
    }
    uint64_t v17 = CheckAndSwapAC3Header(a1, v16, &v81);
    if (v17) {
      return v17;
    }
    v79[0] = (unsigned int *)&v81;
    v79[1] = (unsigned int *)&v82[v16 - 1];
    uint64_t v80 = 0;
    if (((unint64_t)&v81 & 3) != 0)
    {
      int v18 = 0;
      unint64_t v19 = &v81;
      size_t v20 = v82;
      int v21 = -8;
      do
      {
        int v22 = v21;
        int v23 = *v19++;
        int v18 = v23 | (v18 << 8);
        v21 += 8;
        if ((v20 & 3) == 0) {
          break;
        }
        LOBYTE(v2std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = (_BYTE)v20 + 1;
      }
      while (v19 < &v82[v16 - 1]);
      v79[0] = (unsigned int *)v19;
      LODWORD(v8std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v18 << (24 - v21);
      HIDWORD(v8std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v22 + 16;
    }
    TBitstreamReader<unsigned int>::SkipBits((uint64_t)v79, 40);
    unsigned int v24 = v80 >> 27;
    HIDWORD(v80) -= 5;
    if (v80 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v79, v79[0]++);
      char v26 = BYTE4(v80);
      v24 |= v80 >> SBYTE4(v80);
      HIDWORD(v80) += 32;
      if (HIDWORD(v80)) {
        int v25 = v80 << -v26;
      }
      else {
        int v25 = 0;
      }
    }
    else
    {
      int v25 = 32 * v80;
    }
    LODWORD(v8std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v25;
    TBitstreamReader<unsigned int>::PutBack((uint64_t)v79, 13);
    if (v24 > 8u)
    {
      if (a2 < 0xC || v24 - 17 < 0xFFFFFFFA) {
        return v8;
      }
      TBitstreamReader<unsigned int>::PutBack((uint64_t)v79, 16);
      unsigned int v27 = v80 >> 30;
      HIDWORD(v80) -= 2;
      if (v80 < 0)
      {
        TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v79, v79[0]++);
        char v32 = BYTE4(v80);
        v27 |= v80 >> SBYTE4(v80);
        HIDWORD(v80) += 32;
        if (HIDWORD(v80)) {
          int v28 = v80 << -v32;
        }
        else {
          int v28 = 0;
        }
      }
      else
      {
        int v28 = 4 * v80;
      }
      LODWORD(v8std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v28;
      TBitstreamReader<unsigned int>::SkipBits((uint64_t)v79, 3);
      unsigned int v38 = v80 >> 21;
      int v39 = HIDWORD(v80) - 11;
      HIDWORD(v80) -= 11;
      if (v80 < 0)
      {
        TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v79, v79[0]);
        char v41 = ++v79[0];
        v38 |= v80 >> SBYTE4(v80);
        int v39 = HIDWORD(v80) + 32;
        if (HIDWORD(v80) == -32)
        {
          unsigned int v43 = 0;
          int v42 = 2 * v38 + 2;
          uint64_t v80 = 0xFFFFFFFE00000000;
          goto LABEL_54;
        }
        unsigned int v40 = v80 << -BYTE4(v80);
      }
      else
      {
        unsigned int v40 = v80 << 11;
      }
      int v42 = 2 * v38 + 2;
      unsigned int v43 = v40 >> 30;
      int v44 = v39 - 2;
      uint64_t v80 = __PAIR64__(v44, v40);
      if (v44 >= 0)
      {
        int v78 = v42;
        unsigned int v45 = 4 * v40;
        goto LABEL_56;
      }
      char v41 = v79[0];
LABEL_54:
      TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v79, v41);
      uint64_t v53 = ++v79[0];
      v43 |= v80 >> SBYTE4(v80);
      int v44 = HIDWORD(v80) + 32;
      int v78 = v42;
      if (HIDWORD(v80) == -32)
      {
        unsigned int v54 = 0;
        uint64_t v80 = 0xFFFFFFFE00000000;
        goto LABEL_60;
      }
      unsigned int v45 = v80 << -BYTE4(v80);
LABEL_56:
      unsigned int v54 = v45 >> 30;
      int v55 = v44 - 2;
      uint64_t v80 = __PAIR64__(v55, v45);
      if (v55 >= 0)
      {
        unsigned int v56 = 4 * v45;
LABEL_63:
        LODWORD(v8std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v56;
        if (v43 != 3)
        {
          uint64_t v57 = &theSampleRateTable[v43];
          int v58 = theNumberOfBlocks[v54] << 8;
          goto LABEL_67;
        }
        if (v54 != 3)
        {
          uint64_t v57 = (Float64 *)((char *)&theSecondarySampleRateTable + 8 * v54);
          int v58 = 1536;
LABEL_67:
          Float64 v34 = *v57;
          unsigned int v59 = v56 >> 29;
          HIDWORD(v8std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v55 - 3;
          UInt32 v76 = v58;
          if (v55 - 3 < 0)
          {
            TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v79, v79[0]++);
            char v61 = BYTE4(v80);
            v59 |= v80 >> SBYTE4(v80);
            HIDWORD(v80) += 32;
            if (HIDWORD(v80)) {
              int v60 = v80 << -v61;
            }
            else {
              int v60 = 0;
            }
          }
          else
          {
            int v60 = 8 * v56;
          }
          LODWORD(v8std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v60;
          int Bit = TBitstreamReader<unsigned int>::GetBit((uint64_t)v79);
          TBitstreamReader<unsigned int>::SkipBits((uint64_t)v79, 5);
          unsigned int v63 = v80 >> 27;
          HIDWORD(v80) -= 5;
          if (v80 < 0)
          {
            TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v79, v79[0]++);
            char v65 = BYTE4(v80);
            v63 |= v80 >> SBYTE4(v80);
            HIDWORD(v80) += 32;
            if (HIDWORD(v80)) {
              int v64 = v80 << -v65;
            }
            else {
              int v64 = 0;
            }
          }
          else
          {
            int v64 = 32 * v80;
          }
          LODWORD(v8std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v64;
          if (TBitstreamReader<unsigned int>::GetBit((uint64_t)v79)) {
            TBitstreamReader<unsigned int>::SkipBits((uint64_t)v79, 8);
          }
          if (!(_BYTE)v59)
          {
            TBitstreamReader<unsigned int>::SkipBits((uint64_t)v79, 5);
            if (TBitstreamReader<unsigned int>::GetBit((uint64_t)v79)) {
              TBitstreamReader<unsigned int>::SkipBits((uint64_t)v79, 8);
            }
          }
          if (v27 == 1 && TBitstreamReader<unsigned int>::GetBit((uint64_t)v79))
          {
            unsigned int v77 = WORD1(v80);
            HIDWORD(v80) -= 16;
            if (v80 < 0)
            {
              TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v79, v79[0]);
              v77 |= (unsigned __int16)(v80 >> SBYTE4(v80));
            }
          }
          else
          {
            unsigned int v77 = 0;
          }
          if (Bit) {
            UInt32 v66 = theChannelTable[v59] + 1;
          }
          else {
            UInt32 v66 = theChannelTable[v59];
          }
          if (!a4)
          {
            UInt32 v68 = v76;
            if (!a5) {
              goto LABEL_114;
            }
            goto LABEL_113;
          }
          unsigned int ChannelLayoutTag = GetChannelLayoutTag(v59, Bit != 0);
          UInt32 v68 = v76;
          goto LABEL_112;
        }
        return v8;
      }
      uint64_t v53 = v79[0];
LABEL_60:
      TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v79, v53);
      ++v79[0];
      v54 |= v80 >> SBYTE4(v80);
      int v55 = HIDWORD(v80) + 32;
      if (HIDWORD(v80) == -32) {
        unsigned int v56 = 0;
      }
      else {
        unsigned int v56 = v80 << -BYTE4(v80);
      }
      goto LABEL_63;
    }
    unsigned int v29 = v80 >> 30;
    int v30 = HIDWORD(v80) - 2;
    HIDWORD(v80) -= 2;
    if (v80 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v79, v79[0]++);
      v29 |= v80 >> SBYTE4(v80);
      int v30 = HIDWORD(v80) + 32;
      if (HIDWORD(v80) == -32) {
        unsigned int v31 = 0;
      }
      else {
        unsigned int v31 = v80 << -BYTE4(v80);
      }
    }
    else
    {
      unsigned int v31 = 4 * v80;
    }
    LODWORD(v8std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v31;
    int v33 = v29;
    if (v29 == 3) {
      return v8;
    }
    Float64 v34 = theSampleRateTable[v29];
    unsigned int v35 = v31 >> 26;
    HIDWORD(v8std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v30 - 6;
    if (v30 - 6 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v79, v79[0]++);
      char v37 = BYTE4(v80);
      v35 |= v80 >> SBYTE4(v80);
      HIDWORD(v80) += 32;
      int v36 = HIDWORD(v80) ? v80 << -v37 : 0;
    }
    else
    {
      int v36 = v31 << 6;
    }
    LODWORD(v8std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v36;
    if (v35 > 0x25) {
      return v8;
    }
    int v46 = framesizetab[38 * v33 + v35];
    if (a7) {
      *a7 = 2 * framesizetab[38 * v33 + 37];
    }
    TBitstreamReader<unsigned int>::SkipBits((uint64_t)v79, 5);
    unsigned int v47 = v80 >> 29;
    int v48 = HIDWORD(v80) - 3;
    HIDWORD(v80) -= 3;
    if (v80 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v79, v79[0]);
      char v50 = ++v79[0];
      v47 |= v80 >> SBYTE4(v80);
      int v48 = HIDWORD(v80) + 32;
      if (HIDWORD(v80) == -32)
      {
        unsigned int v51 = 0;
        uint64_t v80 = 0xFFFFFFFD00000000;
        goto LABEL_95;
      }
      unsigned int v49 = v80 << -BYTE4(v80);
    }
    else
    {
      unsigned int v49 = 8 * v80;
    }
    unsigned int v51 = v49 >> 29;
    LODWORD(v8std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v49;
    HIDWORD(v8std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v48 - 3;
    if (v48 - 3 >= 0)
    {
      unsigned int v77 = v47;
      int v52 = 8 * v49;
LABEL_98:
      LODWORD(v8std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v52;
      unsigned int v71 = v51;
      if ((v51 & 1) != 0 && v51 != 1) {
        TBitstreamReader<unsigned int>::SkipBits((uint64_t)v79, 2);
      }
      if ((v51 & 4) != 0) {
        TBitstreamReader<unsigned int>::SkipBits((uint64_t)v79, 2);
      }
      if (v51 == 2) {
        TBitstreamReader<unsigned int>::SkipBits((uint64_t)v79, 2);
      }
      int v78 = 2 * v46;
      int v72 = TBitstreamReader<unsigned int>::GetBit((uint64_t)v79);
      unsigned int v63 = v80 >> 27;
      HIDWORD(v80) -= 5;
      if (v80 < 0)
      {
        TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v79, v79[0]);
        v63 |= v80 >> SBYTE4(v80);
      }
      if (v72) {
        UInt32 v66 = theChannelTable[v71] + 1;
      }
      else {
        UInt32 v66 = theChannelTable[v71];
      }
      if (!a4)
      {
        UInt32 v68 = 1536;
        if (!a5) {
          goto LABEL_114;
        }
        goto LABEL_113;
      }
      unsigned int ChannelLayoutTag = GetChannelLayoutTag(v71, v72 != 0);
      UInt32 v68 = 1536;
LABEL_112:
      *a4 = ChannelLayoutTag;
      if (!a5)
      {
LABEL_114:
        if (a3)
        {
          a3->float mSampleRate = v34;
          if (v24 <= 8u) {
            AudioFormatID v73 = 1633889587;
          }
          else {
            AudioFormatID v73 = 1700998451;
          }
          a3->uint64_t mFormatID = v73;
          a3->AudioFormatFlags mFormatFlags = 0;
          a3->mBytesPerPacket = 0;
          a3->mFramesPerPacket = v68;
          a3->mBytesPerFrame = 0;
          a3->UInt32 mChannelsPerFrame = v66;
          *(void *)&a3->mBitsPerChannel = 0;
        }
        if (a8)
        {
          if (v63) {
            int v74 = -v63;
          }
          else {
            int v74 = -31;
          }
          *a8 = v74;
        }
        uint64_t v8 = 0;
        if (a6) {
          *a6 = v77;
        }
        return v8;
      }
LABEL_113:
      *a5 = v78;
      goto LABEL_114;
    }
    char v50 = v79[0];
LABEL_95:
    TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v79, v50);
    ++v79[0];
    char v69 = BYTE4(v80);
    v51 |= v80 >> SBYTE4(v80);
    BOOL v70 = HIDWORD(v80) == -32;
    HIDWORD(v80) += 32;
    unsigned int v77 = v47;
    if (v70) {
      int v52 = 0;
    }
    else {
      int v52 = v80 << -v69;
    }
    goto LABEL_98;
  }
  return v8;
}

uint64_t CheckAndSwapAC3Header(unsigned __int8 *a1, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v3 = 560226676;
  if (a2 >= 2)
  {
    int v4 = *a1;
    if (v4 == 119)
    {
      if (a1[1] == 11)
      {
        if ((a2 & 0xFFFFFFFE) != 0)
        {
          unint64_t v6 = 0;
          do
          {
            int v7 = &a3[v6];
            unsigned __int8 *v7 = a1[v6 + 1];
            v7[1] = a1[v6];
            v6 += 2;
          }
          while (v6 < (a2 & 0xFFFFFFFE));
        }
        uint64_t v3 = 0;
        if (a2) {
          a3[a2 - 1] = a1[a2 - 1];
        }
      }
    }
    else if (v4 == 11 && a1[1] == 119)
    {
      uint64_t v3 = a2;
      do
      {
        unsigned __int8 v5 = *a1++;
        *a3++ = v5;
        --v3;
      }
      while (v3);
    }
  }
  return v3;
}

uint64_t GetChannelLayoutTag(int a1, int a2)
{
  switch(a1)
  {
    case 1:
      BOOL v2 = a2 == 0;
      unsigned int v3 = 6553601;
      unsigned int v4 = 9764866;
      goto LABEL_12;
    case 3:
      unsigned int v5 = 9961476;
      BOOL v6 = a2 == 0;
      unsigned int v7 = 9830403;
      goto LABEL_6;
    case 4:
      unsigned int v5 = 10027012;
      BOOL v6 = a2 == 0;
      unsigned int v7 = 8585219;
LABEL_6:
      if (v6) {
        return v7;
      }
      else {
        return v5;
      }
    case 5:
      BOOL v2 = a2 == 0;
      unsigned int v3 = 9895940;
      unsigned int v4 = 10092549;
      goto LABEL_12;
    case 6:
      BOOL v2 = a2 == 0;
      unsigned int v3 = 8650756;
      unsigned int v4 = 9043973;
      goto LABEL_12;
    case 7:
      BOOL v2 = a2 == 0;
      unsigned int v3 = 7798789;
      unsigned int v4 = 8060934;
      goto LABEL_12;
    default:
      BOOL v2 = a2 == 0;
      unsigned int v3 = 6619138;
      unsigned int v4 = 8716291;
LABEL_12:
      if (v2) {
        return v3;
      }
      else {
        return v4;
      }
  }
}

uint64_t ParseAC3MP4Cookie(unsigned __int8 *a1, unsigned int a2, AudioStreamBasicDescription *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6)
{
  uint64_t result = 560226676;
  if (a1)
  {
    if (a2 >= 0xB)
    {
      unint64_t v8 = (unint64_t)a1[8] >> 6;
      if (v8 != 3)
      {
        Float64 v10 = theSampleRateTable[v8];
        unint64_t v11 = a1[9];
        uint64_t v12 = (v11 >> 3) & 7;
        int v13 = theChannelTable[v12];
        unsigned int v14 = v11 & 4;
        if (a4) {
          *a4 = GetChannelLayoutTag(v12, v14 != 0);
        }
        uint64_t result = 0;
        if (a3)
        {
          a3->float mSampleRate = v10;
          *(_OWORD *)&a3->uint64_t mFormatID = xmmword_1901C6030;
          a3->mBytesPerFrame = 0;
          a3->UInt32 mChannelsPerFrame = v13 + (v14 >> 2);
          *(void *)&a3->mBitsPerChannel = 0;
        }
      }
    }
  }
  return result;
}

uint64_t ConvertAC3HeaderToAC3MP4Cookie(unsigned __int8 *a1, unsigned int a2, unsigned __int8 *a3, unsigned int *a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t result = 560226676;
  if (a1)
  {
    if (a2 >= 0xA)
    {
      if (a3)
      {
        if (*a4 >= 0xB)
        {
          *(void *)a3 = 0x336361640B000000;
          uint64_t result = CheckAndSwapAC3Header(a1, 0xAu, v16);
          if (!result)
          {
            unsigned int v8 = v17;
            int v9 = v18;
            a3[8] = v17 & 0xC0 | (v18 >> 2);
            unsigned __int8 v10 = v19;
            unsigned int v11 = ((char)v19 >> 2) & 0x38 | (v9 << 6);
            int v12 = v19 >> 5;
            if (((v12 != 1) & ((char)v19 >> 5)) != 0) {
              int v13 = 5;
            }
            else {
              int v13 = 3;
            }
            if ((v19 & 0x80u) != 0) {
              v13 += 2;
            }
            if (v12 == 2) {
              unsigned int v14 = v13 + 2;
            }
            else {
              unsigned int v14 = v13;
            }
            if (v14 <= 7)
            {
              char v15 = 7;
            }
            else
            {
              unsigned __int8 v10 = v20;
              char v15 = 15;
            }
            a3[9] = (4 * ((v10 >> (v15 - v14)) & 1)) | (v8 >> 4) & 3 | v11;
            a3[10] = (16 * v8) & 0x60;
            *a4 = 11;
          }
        }
      }
    }
  }
  return result;
}

unsigned char *ConvertAC3MP4CookieToAC3Header(unsigned char *result, uint64_t a2, unsigned __int8 *a3, unsigned int *a4)
{
  if (result && a2 && *(_DWORD *)a3 >= 0xAu)
  {
    *(_WORD *)a2 = 30475;
    *(void *)(a2 + 2) = 0;
    char v4 = result[8] & 0xC0;
    *(unsigned char *)(a2 + 4) = v4;
    char v5 = v4 & 0xCF | (16 * (result[9] & 3));
    *(unsigned char *)(a2 + 4) = v5;
    *(unsigned char *)(a2 + 4) = (result[10] >> 4) & 0xE | v5;
    char v6 = result[8];
    *(unsigned char *)(a2 + 5) = 4 * v6;
    *(unsigned char *)(a2 + 5) = (result[9] >> 6) & 3 | (4 * v6);
    char v7 = (4 * result[9]) & 0xE0;
    *(unsigned char *)(a2 + 6) = v7;
    unsigned int v8 = result[9];
    int v9 = (v8 >> 2) & 1;
    int v10 = (v8 >> 3) & 7;
    if (((v10 != 1) & (v8 >> 3)) != 0) {
      char v11 = 2;
    }
    else {
      char v11 = 0;
    }
    if ((v8 & 0x20) != 0) {
      char v12 = v11 + 2;
    }
    else {
      char v12 = v11;
    }
    if (v10 == 2) {
      v12 += 2;
    }
    *(unsigned char *)(a2 + 6) = v7 | (v9 << (4 - v12));
    *(_DWORD *)a3 = 10;
  }
  return result;
}

uint64_t GetAC3PacketIndex(unsigned __int8 *a1, int *a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t result = 560226676;
  if (a1)
  {
    uint64_t result = CheckAndSwapAC3Header(a1, 0xAu, v11);
    if (!result)
    {
      if (v13 - 88 > 0x2F)
      {
        uint64_t result = 560226676;
        if (v13 > 0x47u) {
          return result;
        }
        int v10 = 0;
        *a3 = 1;
      }
      else
      {
        unsigned int v8 = v12;
        unint64_t v9 = (unint64_t)v12 >> 6;
        uint64_t result = 560226676;
        if (v9 == 3) {
          return result;
        }
        *a3 = dword_1901C72E0[v9];
        int v10 = (v8 >> 3) & 7;
      }
      uint64_t result = 0;
      *a2 = v10;
    }
  }
  return result;
}

uint64_t CombineEAC3PacketChannelsLayouts(uint64_t result, int a2, int a3, unsigned int *a4)
{
  if (!a3)
  {
    unsigned int v4 = result;
    if (result == 8060934)
    {
      unsigned int v4 = 10289159;
      if (a2 > 10027011)
      {
        if (a2 == 10027012) {
          goto LABEL_16;
        }
        int v5 = 10092549;
      }
      else
      {
        if (a2 == 8585219) {
          goto LABEL_16;
        }
        int v5 = 9895940;
      }
      if (a2 != v5) {
        unsigned int v4 = 8060934;
      }
    }
LABEL_16:
    *a4 = v4;
    return result;
  }
  unsigned int v4 = 10485768;
  *a4 = result;
  if ((a3 & 0x400) != 0)
  {
    unsigned int v4 = 10551304;
    goto LABEL_16;
  }
  if ((a3 & 0x200) != 0) {
    goto LABEL_16;
  }
  if ((a3 & 0x100) == 0)
  {
    if ((a3 & 0x80) != 0)
    {
      unsigned int v4 = 10944520;
      if ((a3 & 8) == 0) {
        unsigned int v4 = 10354695;
      }
    }
    else if ((a3 & 0x40) != 0)
    {
      unsigned int v4 = 10616840;
    }
    else if ((a3 & 0x20) != 0)
    {
      unsigned int v4 = 10682376;
    }
    else if ((a3 & 0x10) != 0)
    {
      unsigned int v4 = 10747912;
    }
    else
    {
      if ((a3 & 8) == 0) {
        return result;
      }
      unsigned int v4 = 10420231;
    }
    goto LABEL_16;
  }
  *a4 = 10289159;
  if ((a3 & 0x80) != 0)
  {
    unsigned int v4 = 10813448;
    goto LABEL_16;
  }
  if ((a3 & 8) != 0)
  {
    unsigned int v4 = 10878984;
    goto LABEL_16;
  }
  if (result == 7798789)
  {
    unsigned int v4 = 10158086;
    goto LABEL_16;
  }
  return result;
}

uint64_t ParseEAC3MP4Cookie(unsigned int *a1, unsigned int a2, BOOL *a3, AudioStreamBasicDescription *a4, unsigned int *a5, AudioStreamBasicDescription *a6, unsigned int *a7, unsigned int *a8, unsigned int *a9, unsigned int a10, BOOL *a11, unsigned int *a12)
{
  uint64_t v16 = 4294967246;
  if (!a1 || a2 < 0xD) {
    return v16;
  }
  uint64_t v69 = v15;
  uint64_t v70 = v14;
  uint64_t v71 = v12;
  uint64_t v72 = v13;
  uint64_t v21 = (unsigned int *)((char *)a1 + a2);
  UInt32 v66 = a1;
  char v67 = v21;
  int64_t v68 = 0;
  if ((a1 & 3) != 0)
  {
    int v22 = 0;
    char v23 = (_BYTE)a1 + 1;
    int v24 = -8;
    do
    {
      int v25 = v24;
      int v26 = *(unsigned __int8 *)a1;
      a1 = (unsigned int *)((char *)a1 + 1);
      int v22 = v26 | (v22 << 8);
      v24 += 8;
      if ((v23 & 3) == 0) {
        break;
      }
      ++v23;
    }
    while (a1 < v21);
    UInt32 v66 = a1;
    LODWORD(v68) = v22 << (24 - v24);
    HIDWORD(v68) = v25 + 16;
  }
  TBitstreamReader<unsigned int>::SkipBits((uint64_t)&v66, 32);
  TBitstreamReader<unsigned int>::SkipBits((uint64_t)&v66, 32);
  int v27 = HIDWORD(v68) - 13;
  HIDWORD(v68) -= 13;
  if (v68 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)&v66, v66);
    unsigned int v29 = ++v66;
    int v27 = HIDWORD(v68) + 32;
    if (HIDWORD(v68) == -32)
    {
      unsigned int v30 = 0;
      int64_t v68 = 0xFFFFFFFD00000000;
      goto LABEL_16;
    }
    unsigned int v28 = v68 << -BYTE4(v68);
  }
  else
  {
    unsigned int v28 = v68 << 13;
  }
  unsigned int v30 = v28 >> 29;
  int v31 = v27 - 3;
  int64_t v68 = __PAIR64__(v31, v28);
  if (v31 >= 0)
  {
    unsigned int v32 = 8 * v28;
    goto LABEL_19;
  }
  unsigned int v29 = v66;
LABEL_16:
  TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)&v66, v29);
  ++v66;
  v30 |= v68 >> SBYTE4(v68);
  int v31 = HIDWORD(v68) + 32;
  if (HIDWORD(v68) == -32) {
    unsigned int v32 = 0;
  }
  else {
    unsigned int v32 = v68 << -BYTE4(v68);
  }
LABEL_19:
  LODWORD(v68) = v32;
  if ((_BYTE)v30 == 0xFF) {
    return 4294967246;
  }
  unsigned int v33 = v32 >> 30;
  int v34 = v31 - 2;
  HIDWORD(v68) = v34;
  if (v34 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)&v66, v66);
    ++v66;
    v33 |= v68 >> SBYTE4(v68);
    int v34 = HIDWORD(v68) + 32;
    if (HIDWORD(v68) == -32) {
      unsigned int v35 = 0;
    }
    else {
      unsigned int v35 = v68 << -BYTE4(v68);
    }
  }
  else
  {
    unsigned int v35 = 4 * v32;
  }
  LODWORD(v68) = v35;
  double v36 = 0.0;
  if (v33 != 3) {
    double v36 = theSampleRateTable[v33];
  }
  unsigned int v37 = v35 >> 27;
  HIDWORD(v68) = v34 - 5;
  if (v34 - 5 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)&v66, v66);
    ++v66;
    char v39 = BYTE4(v68);
    v37 |= v68 >> SBYTE4(v68);
    HIDWORD(v68) += 32;
    if (HIDWORD(v68)) {
      int v38 = v68 << -v39;
    }
    else {
      int v38 = 0;
    }
  }
  else
  {
    int v38 = 32 * v35;
  }
  LODWORD(v68) = v38;
  unsigned int v40 = v37 - 11;
  if (v37 >= 9u && v40 > 5) {
    return 560226676;
  }
  TBitstreamReader<unsigned int>::SkipBits((uint64_t)&v66, 1);
  TBitstreamReader<unsigned int>::GetBit((uint64_t)&v66);
  int v41 = HIDWORD(v68) - 3;
  HIDWORD(v68) -= 3;
  if (v68 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)&v66, v66);
    unsigned int v43 = ++v66;
    int v41 = HIDWORD(v68) + 32;
    if (HIDWORD(v68) == -32)
    {
      unsigned int v44 = 0;
      int64_t v68 = 0xFFFFFFFD00000000;
      goto LABEL_43;
    }
    unsigned int v42 = v68 << -BYTE4(v68);
  }
  else
  {
    unsigned int v42 = 8 * v68;
  }
  unsigned int v44 = v42 >> 29;
  LODWORD(v68) = v42;
  HIDWORD(v68) = v41 - 3;
  if (v41 - 3 >= 0)
  {
    int v45 = 8 * v42;
    goto LABEL_46;
  }
  unsigned int v43 = v66;
LABEL_43:
  TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)&v66, v43);
  ++v66;
  char v46 = BYTE4(v68);
  v44 |= v68 >> SBYTE4(v68);
  HIDWORD(v68) += 32;
  if (HIDWORD(v68)) {
    int v45 = v68 << -v46;
  }
  else {
    int v45 = 0;
  }
LABEL_46:
  LODWORD(v68) = v45;
  BOOL v47 = TBitstreamReader<unsigned int>::GetBit((uint64_t)&v66) != 0;
  uint64_t ChannelLayoutTag = GetChannelLayoutTag(v44, v47);
  unsigned int v65 = ChannelLayoutTag;
  TBitstreamReader<unsigned int>::SkipBits((uint64_t)&v66, 3);
  unsigned int v50 = v68 >> 28;
  int v51 = HIDWORD(v68) - 4;
  HIDWORD(v68) -= 4;
  if (v68 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)&v66, v66);
    ++v66;
    char v53 = BYTE4(v68);
    v50 |= v68 >> SBYTE4(v68);
    int v51 = HIDWORD(v68) + 32;
    HIDWORD(v68) += 32;
    if (HIDWORD(v68)) {
      unsigned int v52 = v68 << -v53;
    }
    else {
      unsigned int v52 = 0;
    }
  }
  else
  {
    unsigned int v52 = 16 * v68;
  }
  LODWORD(v68) = v52;
  if ((_BYTE)v50)
  {
    unsigned int v54 = v52 >> 23;
    int v55 = v51 - 9;
    HIDWORD(v68) = v51 - 9;
    if (v51 - 9 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)&v66, v66);
      ++v66;
      char v57 = BYTE4(v68);
      v54 |= v68 >> SBYTE4(v68);
      int v55 = HIDWORD(v68) + 32;
      HIDWORD(v68) += 32;
      if (HIDWORD(v68)) {
        int v56 = v68 << -v57;
      }
      else {
        int v56 = 0;
      }
    }
    else
    {
      int v56 = v52 << 9;
    }
    LODWORD(v68) = v56;
    unsigned int v58 = (v54 >> 7) & 2 | (8 * (__rbit32(v54) >> 24));
    v49.i32[0] = v58;
    uint8x8_t v59 = (uint8x8_t)vcnt_s8(v49);
    v59.i16[0] = vaddlv_u8(v59);
    CombineEAC3PacketChannelsLayouts(ChannelLayoutTag, v59.i32[0], v58, &v65);
  }
  else
  {
    TBitstreamReader<unsigned int>::SkipBits((uint64_t)&v66, 1);
    int v55 = HIDWORD(v68);
  }
  if (v55 + 8 * ((int)v67 - (int)v66) >= 8)
  {
    TBitstreamReader<unsigned int>::SkipBits((uint64_t)&v66, 7);
    if (TBitstreamReader<unsigned int>::GetBit((uint64_t)&v66))
    {
      int v60 = HIDWORD(v68);
      if (HIDWORD(v68) + 8 * ((int)v67 - (int)v66) >= 8)
      {
        int v61 = BYTE3(v68);
        HIDWORD(v68) -= 8;
        if (v60 - 8 < 0)
        {
          TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)&v66, v66);
          v61 |= (v68 >> SBYTE4(v68));
        }
        if ((v61 - 1) > 0xF) {
          return 4294967246;
        }
      }
    }
  }
  if (a4) {
    LODWORD(a4->mSampleRate) = ChannelLayoutTag;
  }
  unsigned __int16 v62 = v65;
  if (a6) {
    LODWORD(a6->mSampleRate) = v65;
  }
  if (v40 >= 6) {
    unsigned int v63 = 1633889587;
  }
  else {
    unsigned int v63 = 1700998451;
  }
  if (a3)
  {
    *(double *)a3 = v36;
    *((_DWORD *)a3 + 2) = v63;
    *(void *)(a3 + 12) = 0;
    *(void *)(a3 + 2std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1536;
    *((_DWORD *)a3 + 7) = (unsigned __int16)ChannelLayoutTag;
    *((void *)a3 + 4) = 0;
  }
  uint64_t v16 = 0;
  if (a5)
  {
    *(double *)a5 = v36;
    a5[2] = v63;
    *(void *)(a5 + 3) = 0;
    *(void *)(a5 + 5) = 1536;
    a5[7] = v62;
    *((void *)a5 + 4) = 0;
  }
  return v16;
}

uint64_t ConvertEAC3HeaderToEAC3MP4Cookie(unsigned __int8 *a1, unsigned int a2, unsigned __int8 *a3, unsigned int *a4)
{
  *(void *)&v186[3] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = 560226676;
  if (!a1) {
    return v4;
  }
  unsigned int v5 = a2;
  if (a2 < 0xC) {
    return v4;
  }
  uint64_t v181 = 0;
  uint64_t v182 = 0;
  uint64_t v183 = 0;
  *(void *)unsigned __int16 v180 = 0;
  unsigned int v179 = 0;
  memset(v185, 0, sizeof(v185));
  unsigned int v177 = 0;
  uint64_t __src = 0x336365640D000000;
  v174[0] = v185;
  v174[1] = v185;
  v174[2] = v186;
  __int16 v175 = 0;
  uint64_t v176 = 16;
  if (ParseAC3Header(a1, a2, &v178, &v177, &v180[1], &v179, v180, 0)) {
    return v4;
  }
  if ((v178.mFormatID & 0xFBFFFFFF) != 0x61632D33)
  {
    *a4 = 0;
    return v4;
  }
  unint64_t v171 = 0;
  unint64_t v172 = 0;
  uint64_t v173 = 0;
  if ((v5 & 0xFFFFFFFE) >= 0x8A) {
    unint64_t v9 = 138;
  }
  else {
    unint64_t v9 = v5 & 0xFFFFFFFE;
  }
  LOBYTE(v16std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
  if (v9)
  {
    std::vector<unsigned char>::__append(&v171, v9, &v160);
    char v11 = v171;
    int v10 = (int)v172;
  }
  else
  {
    char v11 = 0;
    int v10 = 0;
  }
  int v12 = v10 - v11;
  uint64_t v13 = CheckAndSwapAC3Header(a1, v10 - (int)v11, v11);
  if (v13)
  {
    uint64_t v4 = v13;
    if (!v11) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  v169[0] = (unsigned int *)v11;
  v169[1] = (unsigned int *)&v11[v12];
  int64_t v170 = 0;
  if ((v11 & 3) != 0 && v12)
  {
    int v16 = 0;
    char v17 = (_BYTE)v11 + 1;
    int v18 = -8;
    unsigned __int8 v19 = (unsigned int *)(v11 + 1);
    do
    {
      HIDWORD(v17std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v18 + 16;
      LODWORD(v17std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v16 << 8;
      v169[0] = v19;
      int v20 = *((unsigned __int8 *)v19 - 1) | (v16 << 8);
      LODWORD(v17std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v20;
      v18 += 8;
      if ((v17 & 3) == 0) {
        break;
      }
      ++v17;
      int v16 = v20;
      BOOL v21 = v19 >= (unsigned int *)&v11[v12];
      unsigned __int8 v19 = (unsigned int *)((char *)v19 + 1);
    }
    while (!v21);
    LODWORD(v17std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v20 << (24 - v18);
  }
  LODWORD(v14) = v180[1];
  AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)v174, (unsigned __int16)(v178.mSampleRate* (double)v14/ (double)__PAIR64__(HIDWORD(v178.mSampleRate), v178.mFramesPerPacket)/ 1000.0), 0xDu);
  AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)v174, 0, 3u);
  std::string __dst = a3;
  if (v178.mFormatID != 1633889587)
  {
    TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 16);
    unsigned int v24 = v170 >> 30;
    HIDWORD(v170) -= 2;
    if (v170 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v169, v169[0]++);
      char v27 = BYTE4(v170);
      v24 |= v170 >> SBYTE4(v170);
      HIDWORD(v170) += 32;
      if (HIDWORD(v170)) {
        int v25 = v170 << -v27;
      }
      else {
        int v25 = 0;
      }
    }
    else
    {
      int v25 = 4 * v170;
    }
    LODWORD(v17std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v25;
    TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 14);
    LODWORD(v22) = v170 >> 30;
    int v35 = HIDWORD(v170) - 2;
    HIDWORD(v170) -= 2;
    if (v170 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v169, v169[0]++);
      char v37 = BYTE4(v170);
      LODWORD(v22) = (v170 >> SBYTE4(v170)) | v22;
      int v35 = HIDWORD(v170) + 32;
      HIDWORD(v170) += 32;
      if (HIDWORD(v170)) {
        unsigned int v36 = v170 << -v37;
      }
      else {
        unsigned int v36 = 0;
      }
    }
    else
    {
      unsigned int v36 = 4 * v170;
    }
    LODWORD(v17std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v36;
    unsigned int v38 = v22;
    if (v22 == 3)
    {
      TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 2);
      int v152 = 3;
      unsigned int v39 = v170;
      int v40 = HIDWORD(v170);
    }
    else
    {
      unsigned int v41 = v36 >> 30;
      int v40 = v35 - 2;
      HIDWORD(v17std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v40;
      if (v40 < 0)
      {
        TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v169, v169[0]++);
        v41 |= v170 >> SBYTE4(v170);
        int v40 = HIDWORD(v170) + 32;
        if (HIDWORD(v170) == -32) {
          unsigned int v39 = 0;
        }
        else {
          unsigned int v39 = v170 << -BYTE4(v170);
        }
      }
      else
      {
        unsigned int v39 = 4 * v36;
      }
      LODWORD(v17std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v39;
      int v152 = v41;
    }
    unsigned int v46 = v39 >> 29;
    HIDWORD(v17std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v40 - 3;
    if (v40 - 3 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v169, v169[0]++);
      char v48 = BYTE4(v170);
      v46 |= v170 >> SBYTE4(v170);
      HIDWORD(v170) += 32;
      if (HIDWORD(v170)) {
        int v47 = v170 << -v48;
      }
      else {
        int v47 = 0;
      }
    }
    else
    {
      int v47 = 8 * v39;
    }
    LODWORD(v17std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v47;
    int Bit = TBitstreamReader<unsigned int>::GetBit((uint64_t)v169);
    unsigned int v49 = v170 >> 27;
    HIDWORD(v170) -= 5;
    if (v170 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v169, v169[0]++);
      char v51 = BYTE4(v170);
      v49 |= v170 >> SBYTE4(v170);
      HIDWORD(v170) += 32;
      if (HIDWORD(v170)) {
        int v50 = v170 << -v51;
      }
      else {
        int v50 = 0;
      }
    }
    else
    {
      int v50 = 32 * v170;
    }
    LOBYTE(v154) = v49;
    LODWORD(v17std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v50;
    TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 5);
    if (TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1) {
      TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 8);
    }
    LOBYTE(v158) = v46;
    if (!(_BYTE)v46)
    {
      TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 5);
      if (TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1) {
        TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 8);
      }
    }
    if (v24 == 1 && TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1) {
      TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 16);
    }
    if (TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) != 1) {
      goto LABEL_165;
    }
    if (v46 >= 3u)
    {
      TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 2);
      if (v46) {
        TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 6);
      }
    }
    if ((v46 & 4) != 0) {
      TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 6);
    }
    if (Bit && TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1) {
      TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 5);
    }
    if ((_BYTE)v24)
    {
LABEL_165:
      if (TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) != 1) {
        goto LABEL_178;
      }
      TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 5);
      if (v46 == 2)
      {
        int v62 = 4;
      }
      else
      {
        if (v46 < 7u)
        {
LABEL_171:
          if (TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1) {
            TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 8);
          }
          if (!(_BYTE)v46 && TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1) {
            TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 8);
          }
          if (v38 <= 2) {
            TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 1);
          }
LABEL_178:
          if (!(_BYTE)v24 && v152 != 3) {
            goto LABEL_180;
          }
          if (v24 == 2)
          {
            if (v152 == 3)
            {
LABEL_180:
              int v63 = 1;
LABEL_181:
              TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, v63);
              goto LABEL_186;
            }
            if (TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1)
            {
              int v63 = 6;
              goto LABEL_181;
            }
          }
LABEL_186:
          uint64_t v140 = a4;
          if (TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1)
          {
            unsigned int v64 = v170 >> 26;
            BOOL v65 = HIDWORD(v170) - 6 < 0;
            HIDWORD(v170) -= 6;
            char v150 = (char)v22;
            if (v65)
            {
              TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v169, v169[0]++);
              char v67 = BYTE4(v170);
              v64 |= v170 >> SBYTE4(v170);
              HIDWORD(v170) += 32;
              if (HIDWORD(v170)) {
                int v66 = v170 << -v67;
              }
              else {
                int v66 = 0;
              }
            }
            else
            {
              int v66 = v170 << 6;
            }
            LODWORD(v17std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v66;
            unsigned __int8 v68 = v64 + 1;
            std::vector<unsigned char>::reserve((unint64_t *)&v181, (v64 + 1));
            if ((_BYTE)v64 != 0xFF)
            {
              int v69 = 0;
              do
              {
                unsigned int v70 = BYTE3(v170);
                HIDWORD(v170) -= 8;
                if (v170 < 0)
                {
                  TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v169, v169[0]++);
                  char v72 = BYTE4(v170);
                  v70 |= v170 >> SBYTE4(v170);
                  HIDWORD(v170) += 32;
                  if (HIDWORD(v170)) {
                    int v71 = v170 << -v72;
                  }
                  else {
                    int v71 = 0;
                  }
                }
                else
                {
                  int v71 = v170 << 8;
                }
                LODWORD(v17std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v71;
                AudioFormatID v73 = v182;
                if (v182 >= (unsigned int *)v183)
                {
                  int v75 = v181;
                  int64_t v76 = (char *)v182 - (char *)v181;
                  uint64_t v77 = (char *)v182 - (char *)v181 + 1;
                  if (v77 < 0) {
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  }
                  unint64_t v78 = v183 - (char *)v181;
                  if (2 * (v183 - (char *)v181) > (unint64_t)v77) {
                    uint64_t v77 = 2 * v78;
                  }
                  if (v78 >= 0x3FFFFFFFFFFFFFFFLL) {
                    size_t v79 = 0x7FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    size_t v79 = v77;
                  }
                  if (v79) {
                    uint64_t v80 = (unsigned int *)operator new(v79);
                  }
                  else {
                    uint64_t v80 = 0;
                  }
                  unsigned __int8 v81 = (unsigned int *)((char *)v80 + v76);
                  long long v82 = (char *)v80 + v76;
                  *long long v82 = v70;
                  int v74 = (unsigned int *)(v82 + 1);
                  if (v73 != v75)
                  {
                    uint64_t v83 = (char *)v73 + ~(unint64_t)v75;
                    do
                    {
                      char v84 = *((unsigned char *)v73 - 1);
                      AudioFormatID v73 = (unsigned int *)((char *)v73 - 1);
                      (v83--)[(void)v80] = v84;
                    }
                    while (v73 != v75);
                    AudioFormatID v73 = v181;
                    unsigned __int8 v81 = v80;
                  }
                  uint64_t v181 = v81;
                  uint64_t v183 = (char *)v80 + v79;
                  if (v73) {
                    operator delete(v73);
                  }
                }
                else
                {
                  *(unsigned char *)uint64_t v182 = v70;
                  int v74 = (unsigned int *)((char *)v73 + 1);
                }
                uint64_t v182 = v74;
                ++v69;
              }
              while (v69 < v68);
            }
            LOBYTE(v32) = 0;
            LOBYTE(v22) = v150;
          }
          else
          {
            LOBYTE(v32) = 0;
          }
LABEL_219:
          AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)v174, v22, 2u);
          AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)v174, v154, 5u);
          AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)v174, 0, 2u);
          AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)v174, v32, 3u);
          AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)v174, v158, 3u);
          AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)v174, Bit, 1u);
          AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)v174, 0, 3u);
          AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)v174, 0, 5u);
          TBitstreamWriter<unsigned short>::Flush((uint64_t)v174);
          unsigned int v85 = v180[1];
          uint64_t v86 = 13;
          if (v5 > v180[1] && v5 - v180[1] >= 0xC)
          {
            char v87 = 0;
            char v159 = 0;
            LODWORD(v88) = 0;
            int v144 = 0;
            unsigned int v89 = v171;
            size_t v153 = v172 - v171;
            double mSampleRate = v178.mSampleRate;
            uint64_t v148 = v171 & 3;
            unint64_t v151 = (char *)(v171 + 12);
            UInt32 mFramesPerPacket = v178.mFramesPerPacket;
            uint64_t v91 = (v171 ^ 3) & 3;
            unint64_t v143 = (unsigned int *)&v171[v91 + 1];
            char v142 = (8 * ((v171 ^ 3) & 3)) ^ 0x18;
            uint64_t v92 = 8 * v91 + 8;
            int v146 = -1;
            int v157 = -1;
            int v145 = -1;
            do
            {
              uint64_t v93 = v86;
              v5 -= v85;
              uint64_t v88 = v85 + v88;
              if (ParseAC3Header(&a1[v88], v5, &v178, &v177, &v180[1], &v179, v180, 0)) {
                BOOL v94 = 0;
              }
              else {
                BOOL v94 = mSampleRate == v178.mSampleRate;
              }
              if (!v94 || mFramesPerPacket != v178.mFramesPerPacket || v178.mFormatID != 1700998451) {
                goto LABEL_311;
              }
              bzero(v89, v153);
              uint64_t v95 = CheckAndSwapAC3Header(&a1[v88], 0xCu, v89);
              if (v95)
              {
                uint64_t v4 = v95;
                goto LABEL_311;
              }
              long long v166 = (unsigned int *)v89;
              unint64_t v167 = v151;
              uint64_t v168 = 0;
              if (v148)
              {
                uint64_t v96 = 0;
                int v97 = 0;
                uint64_t v98 = v89;
                do
                {
                  int v99 = *v98++;
                  int v97 = v99 | (v97 << 8);
                  v96 += 8;
                }
                while (v92 != v96);
                long long v166 = v143;
                LODWORD(v168) = v97 << v142;
                HIDWORD(v168) = v96;
              }
              TBitstreamReader<unsigned int>::SkipBits((uint64_t)&v166, 16);
              unsigned int v100 = v168 >> 30;
              int v101 = HIDWORD(v168) - 2;
              HIDWORD(v168) -= 2;
              if (v168 < 0)
              {
                TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)&v166, v166);
                uint64_t v103 = ++v166;
                v100 |= v168 >> SBYTE4(v168);
                int v101 = HIDWORD(v168) + 32;
                if (HIDWORD(v168) == -32)
                {
                  unsigned int v104 = 0;
                  uint64_t v168 = 0xFFFFFFFD00000000;
                  goto LABEL_242;
                }
                unsigned int v102 = v168 << -BYTE4(v168);
              }
              else
              {
                unsigned int v102 = 4 * v168;
              }
              unsigned int v104 = v102 >> 29;
              LODWORD(v168) = v102;
              HIDWORD(v168) = v101 - 3;
              if (v101 - 3 >= 0)
              {
                int v105 = 8 * v102;
                goto LABEL_245;
              }
              uint64_t v103 = v166;
LABEL_242:
              TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)&v166, v103);
              ++v166;
              char v106 = BYTE4(v168);
              v104 |= v168 >> SBYTE4(v168);
              HIDWORD(v168) += 32;
              if (HIDWORD(v168)) {
                int v105 = v168 << -v106;
              }
              else {
                int v105 = 0;
              }
LABEL_245:
              LODWORD(v168) = v105;
              if (v100 == 1)
              {
                uint64_t v86 = v93;
                if ((v159 & 1) == 0)
                {
                  ++BYTE3(__src);
                  uint64_t v86 = BYTE3(__src);
                }
                if (++v87 > 8u || (int v107 = v104, v104 <= v157))
                {
LABEL_294:
                  *uint64_t v140 = 0;
                  goto LABEL_311;
                }
                char v108 = v179;
                uint32x4_t v109 = (uint32x4_t)vdupq_n_s32(v179);
                int8x16_t v110 = (int8x16_t)vshlq_u32(v109, (uint32x4_t)xmmword_1901C6040);
                unsigned __int32 v111 = vshlq_u32(v109, (uint32x4_t)xmmword_1901C6050).u32[0];
                int8x16_t v112 = (int8x16_t)vshlq_u32(v109, (uint32x4_t)xmmword_1901C6060);
                v112.i32[0] = v111;
                int8x16_t v113 = vorrq_s8(vandq_s8(v110, (int8x16_t)xmmword_1901C6080), vandq_s8(v112, (int8x16_t)xmmword_1901C6070));
                *(int8x8_t *)v113.uint64_t i8 = vorr_s8(*(int8x8_t *)v113.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v113, v113, 8uLL));
                v185[(v86 - 2) - 8] = v185[(v86 - 2) - 8] & 0xE1 | (2 * (v87 & 0xF)) | ((unsigned __int16)(v113.i16[0] | v113.i16[2]) >> 8);
                v185[(v86 - 1) - 8] |= v108 & 0x20 | v113.i8[0] | v113.i8[4];
                char v159 = 1;
              }
              else
              {
                if ((v100 | 2) != 2)
                {
                  uint64_t v86 = v93;
                  goto LABEL_282;
                }
                if (!(_BYTE)v100 && v104 <= v145) {
                  goto LABEL_294;
                }
                if (v104 <= v146 && v100 == 2) {
                  goto LABEL_294;
                }
                if (++v144 > 7) {
                  goto LABEL_294;
                }
                if ((_BYTE)v100) {
                  int v115 = v145;
                }
                else {
                  int v115 = v104;
                }
                int v116 = v146;
                if ((_BYTE)v100) {
                  int v116 = v104;
                }
                int v145 = v115;
                int v146 = v116;
                uint64_t v160 = &v185[v93 - 8];
                uint64_t v161 = v160;
                unint64_t v162 = &v160[(45 - v93)];
                __int16 v163 = 0;
                int v164 = 16;
                int v165 = v160 & 1;
                TBitstreamReader<unsigned int>::SkipBits((uint64_t)&v166, 11);
                unsigned int v117 = v170 >> 30;
                HIDWORD(v170) -= 2;
                if (v170 < 0)
                {
                  TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v169, v169[0]++);
                  char v119 = BYTE4(v170);
                  v117 |= v170 >> SBYTE4(v170);
                  HIDWORD(v170) += 32;
                  if (HIDWORD(v170)) {
                    int v118 = v170 << -v119;
                  }
                  else {
                    int v118 = 0;
                  }
                }
                else
                {
                  int v118 = 4 * v170;
                }
                LODWORD(v17std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v118;
                TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 2);
                unsigned int v120 = v170 >> 29;
                HIDWORD(v170) -= 3;
                if (v170 < 0)
                {
                  TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v169, v169[0]++);
                  char v122 = BYTE4(v170);
                  v120 |= v170 >> SBYTE4(v170);
                  HIDWORD(v170) += 32;
                  if (HIDWORD(v170)) {
                    int v121 = v170 << -v122;
                  }
                  else {
                    int v121 = 0;
                  }
                }
                else
                {
                  int v121 = 8 * v170;
                }
                LODWORD(v17std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v121;
                int v123 = TBitstreamReader<unsigned int>::GetBit((uint64_t)v169);
                unsigned int v124 = v170 >> 27;
                HIDWORD(v170) -= 5;
                if (v170 < 0)
                {
                  TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v169, v169[0]++);
                  char v126 = BYTE4(v170);
                  v124 |= v170 >> SBYTE4(v170);
                  HIDWORD(v170) += 32;
                  if (HIDWORD(v170)) {
                    int v125 = v170 << -v126;
                  }
                  else {
                    int v125 = 0;
                  }
                }
                else
                {
                  int v125 = 32 * v170;
                }
                LODWORD(v17std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v125;
                AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)&v160, v117, 2u);
                AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)&v160, v124, 5u);
                AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)&v160, 0, 2u);
                AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)&v160, 0, 3u);
                AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)&v160, v120, 3u);
                AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)&v160, v123, 1u);
                AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)&v160, 0, 3u);
                AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)&v160, 0, 5u);
                TBitstreamWriter<unsigned short>::Flush((uint64_t)&v160);
                char v159 = 0;
                char v87 = 0;
                BYTE3(__src) += 3;
                uint64_t v86 = BYTE3(__src);
                ++v185[1];
                int v107 = -1;
              }
              int v157 = v107;
LABEL_282:
              unsigned int v85 = v180[1];
            }
            while (v5 > v180[1] && v5 - v180[1] > 0xB);
          }
          long long v127 = v181;
          if ((char *)v182 - (char *)v181 != 2)
          {
            uint64_t v128 = __dst;
LABEL_306:
            if (v128)
            {
              if (*v140 >= v86)
              {
                *uint64_t v140 = v86;
                memcpy(v128, &__src, v86);
                uint64_t v4 = 0;
              }
              else
              {
                uint64_t v4 = 560100710;
              }
            }
            else
            {
              uint64_t v4 = 0;
              *uint64_t v140 = v86;
            }
            goto LABEL_311;
          }
          long long v166 = v181;
          unint64_t v167 = (char *)v181 + 2;
          uint64_t v168 = 0;
          uint64_t v128 = __dst;
          if ((v181 & 3) != 0)
          {
            int v129 = 0;
            uint64_t v130 = 0;
            if ((v181 & 3) == 3) {
              uint64_t v131 = 1;
            }
            else {
              uint64_t v131 = 2;
            }
            int v132 = 8 * v131 - 8;
            do
            {
              uint64_t v133 = v130 + 1;
              int v129 = *((unsigned __int8 *)v181 + v130) | (v129 << 8);
              uint64_t v130 = v133;
            }
            while (v131 != v133);
            long long v127 = (unsigned int *)((char *)v181 + v133);
            long long v166 = (unsigned int *)((char *)v181 + v133);
            unsigned int v134 = v129 << (32 - 8 * v131);
            unsigned int v135 = v134 >> 25;
            LODWORD(v168) = v134;
            HIDWORD(v168) = v132 | 1;
            if ((v132 & 0x80000000) == 0)
            {
              unsigned int v136 = v134 << 7;
              goto LABEL_300;
            }
          }
          else
          {
            unsigned int v135 = 0;
            HIDWORD(v168) = -7;
          }
          TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)&v166, v127);
          ++v166;
          char v137 = BYTE4(v168);
          v135 |= v168 >> SBYTE4(v168);
          HIDWORD(v168) += 32;
          if (HIDWORD(v168)) {
            unsigned int v136 = v168 << -v137;
          }
          else {
            unsigned int v136 = 0;
          }
LABEL_300:
          LODWORD(v168) = v136;
          if (!v135 && TBitstreamReader<unsigned int>::GetBit((uint64_t)&v166) == 1)
          {
            int v138 = BYTE3(v168);
            HIDWORD(v168) -= 8;
            if (v168 < 0)
            {
              TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)&v166, v166);
              char v139 = BYTE4(v168);
              HIDWORD(v168) += 32;
              ++v166;
              v138 |= v168 >> v139;
            }
            if (v138 - 1 <= 0xF)
            {
              uint64_t v160 = &v185[v86 - 8];
              uint64_t v161 = v160;
              unint64_t v162 = &v160[(45 - v86)];
              __int16 v163 = 0;
              int v164 = 16;
              int v165 = v160 & 1;
              BYTE3(__src) += 3;
              LODWORD(v86) = BYTE3(__src);
              AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)&v160, 0, 7u);
              AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)&v160, 1, 1u);
              AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)&v160, v138, 8u);
              AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)&v160, 0, 8u);
            }
          }
          goto LABEL_306;
        }
        int v62 = 2;
      }
      TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, v62);
      goto LABEL_171;
    }
    if (TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1) {
      TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 6);
    }
    if (!(_BYTE)v46
      && TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1
      && TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1)
    {
      TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 6);
    }
    if (TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1) {
      TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 6);
    }
    unsigned int v52 = v170 >> 30;
    int v53 = HIDWORD(v170) - 2;
    HIDWORD(v170) -= 2;
    if (v170 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v169, v169[0]++);
      char v55 = BYTE4(v170);
      v52 |= v170 >> SBYTE4(v170);
      int v53 = HIDWORD(v170) + 32;
      HIDWORD(v170) += 32;
      if (HIDWORD(v170)) {
        unsigned int v54 = v170 << -v55;
      }
      else {
        unsigned int v54 = 0;
      }
    }
    else
    {
      unsigned int v54 = 4 * v170;
    }
    LODWORD(v17std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v54;
    char v149 = (char)v22;
    if (v52 == 1)
    {
      int v22 = a4;
      int v56 = 5;
    }
    else
    {
      if (v52 == 3)
      {
        unsigned int v57 = v54 >> 27;
        HIDWORD(v17std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v53 - 5;
        if (v53 - 5 < 0)
        {
          TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v169, v169[0]++);
          char v59 = BYTE4(v170);
          v57 |= v170 >> SBYTE4(v170);
          HIDWORD(v170) += 32;
          if (HIDWORD(v170)) {
            int v58 = v170 << -v59;
          }
          else {
            int v58 = 0;
          }
        }
        else
        {
          int v58 = 32 * v54;
        }
        LODWORD(v17std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v58;
        if (TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1)
        {
          TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 5);
          if (TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1) {
            TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 4);
          }
          if (TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1) {
            TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 4);
          }
          if (TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1) {
            TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 4);
          }
          if (TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1) {
            TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 4);
          }
          if (TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1) {
            TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 4);
          }
          if (TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1) {
            TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 4);
          }
          if (TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1)
          {
            if (TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1) {
              TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 4);
            }
            if (TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1) {
              TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 4);
            }
          }
        }
        unsigned __int8 v147 = v57;
        int v22 = a4;
        if (TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1)
        {
          TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 5);
          if (TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1)
          {
            TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 7);
            if (TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1) {
              TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 8);
            }
          }
        }
        int v60 = 0;
        do
        {
          TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 8);
          ++v60;
        }
        while (v147 + 2 > v60);
        goto LABEL_151;
      }
      int v22 = a4;
      if (v52 != 2)
      {
LABEL_151:
        a4 = v22;
        LOBYTE(v22) = v149;
        if (v46 <= 1u)
        {
          if (TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1) {
            TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 14);
          }
          if (!(_BYTE)v46 && TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1) {
            TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 14);
          }
        }
        if (TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1)
        {
          int v61 = 2;
          switch(v152)
          {
            case 0:
              TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 5);
              goto LABEL_165;
            case 1:
              goto LABEL_162;
            case 2:
              int v61 = 3;
              goto LABEL_162;
            case 3:
              int v61 = 6;
              do
              {
LABEL_162:
                if (TBitstreamReader<unsigned int>::GetBit((uint64_t)v169) == 1) {
                  TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 5);
                }
                --v61;
              }
              while (v61);
              break;
            default:
              goto LABEL_165;
          }
        }
        goto LABEL_165;
      }
      int v56 = 12;
    }
    TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, v56);
    goto LABEL_151;
  }
  TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 32);
  LODWORD(v22) = v170 >> 30;
  HIDWORD(v170) -= 2;
  if (v170 < 0)
  {
    TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v169, v169[0]++);
    char v26 = BYTE4(v170);
    LODWORD(v22) = (v170 >> SBYTE4(v170)) | v22;
    HIDWORD(v170) += 32;
    if (HIDWORD(v170)) {
      int v23 = v170 << -v26;
    }
    else {
      int v23 = 0;
    }
  }
  else
  {
    int v23 = 4 * v170;
  }
  LODWORD(v17std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v23;
  if (v22 != 3)
  {
    TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 6);
    unsigned int v28 = v170 >> 27;
    int v29 = HIDWORD(v170) - 5;
    HIDWORD(v170) -= 5;
    if (v170 < 0)
    {
      TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v169, v169[0]);
      int v31 = ++v169[0];
      int v29 = HIDWORD(v170) + 32;
      unsigned int v154 = (v170 >> SBYTE4(v170)) | v28;
      if (HIDWORD(v170) == -32)
      {
        unsigned int v32 = 0;
        int64_t v170 = 0xFFFFFFFD00000000;
        goto LABEL_56;
      }
      unsigned int v30 = v170 << -BYTE4(v170);
    }
    else
    {
      LOBYTE(v154) = v170 >> 27;
      unsigned int v30 = 32 * v170;
    }
    unsigned int v32 = v30 >> 29;
    int v33 = v29 - 3;
    int64_t v170 = __PAIR64__(v33, v30);
    if (v33 >= 0)
    {
      unsigned int v34 = 8 * v30;
      goto LABEL_58;
    }
    int v31 = v169[0];
LABEL_56:
    TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v169, v31);
    unsigned int v42 = ++v169[0];
    v32 |= v170 >> SBYTE4(v170);
    int v33 = HIDWORD(v170) + 32;
    if (HIDWORD(v170) == -32)
    {
      unsigned int v44 = 0;
      int64_t v170 = 0xFFFFFFFD00000000;
      goto LABEL_62;
    }
    unsigned int v34 = v170 << -BYTE4(v170);
LABEL_58:
    unsigned int v158 = v34 >> 29;
    LODWORD(v17std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v34;
    HIDWORD(v17std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v33 - 3;
    if (v33 - 3 >= 0)
    {
      int v43 = 8 * v34;
LABEL_65:
      LODWORD(v17std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v43;
      if ((v158 & 1) != 0 && v158 != 1) {
        TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 2);
      }
      if ((v158 & 4) != 0) {
        TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 2);
      }
      if (v158 == 2) {
        TBitstreamReader<unsigned int>::SkipBits((uint64_t)v169, 2);
      }
      uint64_t v140 = a4;
      int Bit = TBitstreamReader<unsigned int>::GetBit((uint64_t)v169);
      goto LABEL_219;
    }
    unsigned int v42 = v169[0];
    unsigned int v44 = v34 >> 29;
LABEL_62:
    TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v169, v42);
    ++v169[0];
    char v45 = BYTE4(v170);
    unsigned int v158 = (v170 >> SBYTE4(v170)) | v44;
    HIDWORD(v170) += 32;
    if (HIDWORD(v170)) {
      int v43 = v170 << -v45;
    }
    else {
      int v43 = 0;
    }
    goto LABEL_65;
  }
LABEL_311:
  char v11 = v171;
  if (v171)
  {
LABEL_14:
    unint64_t v172 = v11;
    operator delete(v11);
  }
LABEL_15:
  if (v181) {
    operator delete(v181);
  }
  return v4;
}

void sub_18FFA56C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  unsigned int v44 = *(void **)(v42 - 184);
  if (v44) {
    operator delete(v44);
  }
  _Unwind_Resume(exception_object);
}

void std::default_delete<ACOutputBuffer>::operator()[abi:ne180100](uint64_t a1)
{
  BOOL v2 = *(void **)(a1 + 112);
  if (v2)
  {
    *(void *)(a1 + 12std::unique_ptr<CA::ADMBuilder::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v2;
    operator delete(v2);
  }
  ACAudioSpan::~ACAudioSpan((std::pmr **)(a1 + 8));
  JUMPOUT(0x192FC8940);
}

void caulk::function_ref<caulk::expected<unsigned int,int> ()(ACAudioSpan &)>::empty_invoker()
{
  exception = __cxa_allocate_exception(8uLL);
}

uint64_t acv2::AudioConverterChain::description(acv2::AudioConverterChain *this, void *a2)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"AudioConverter ", 15);
  uint64_t v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" (", 2);
  unsigned int v5 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"):\n", 3);
  char v6 = (_DWORD *)a2[44];
  if (*v6 != 0x10000)
  {
    if (*v6)
    {
      if (!(unsigned __int16)*v6) {
        goto LABEL_9;
      }
    }
    else if (!v6[2])
    {
      goto LABEL_9;
    }
LABEL_8:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"  Input layout tag:  0x", 23);
    *(_DWORD *)((char *)v20 + *(void *)(v19 - 2std::__tree<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::__map_value_compare<void *,std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>>>::destroy(*((void **)this + 4)) = *(_DWORD *)((unsigned char *)v20 + *(void *)(v19 - 24)) & 0xFFFFFFB5 | 8;
    unsigned int v8 = (void *)std::ostream::operator<<();
    *(_DWORD *)((char *)v8 + *(void *)(*v8 - 24) + 8) = *(_DWORD *)((unsigned char *)v8 + *(void *)(*v8 - 24) + 8) & 0xFFFFFFB5 | 2;
    LOBYTE(__p[0]) = 10;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)__p, 1);
    goto LABEL_9;
  }
  uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6[1]);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.i32[0]) {
    goto LABEL_8;
  }
LABEL_9:
  uint64_t v9 = a2[13];
  for (uint64_t i = a2[14]; v9 != i; v9 += 8)
  {
    (*(void (**)(void **__return_ptr))(**(void **)v9 + 64))(__p);
    if ((v18 & 0x80u) == 0) {
      char v11 = __p;
    }
    else {
      char v11 = (void **)__p[0];
    }
    if ((v18 & 0x80u) == 0) {
      uint64_t v12 = v18;
    }
    else {
      uint64_t v12 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)v11, v12);
    if ((char)v18 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v13 = (_DWORD *)a2[47];
  if (*v13 != 0x10000)
  {
    if (*v13)
    {
      if (!(unsigned __int16)*v13) {
        goto LABEL_27;
      }
    }
    else if (!v13[2])
    {
      goto LABEL_27;
    }
LABEL_26:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"  Output layout tag:  0x", 24);
    *(_DWORD *)((char *)v20 + *(void *)(v19 - 2std::__tree<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::__map_value_compare<void *,std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>>>::destroy(*((void **)this + 4)) = *(_DWORD *)((unsigned char *)v20 + *(void *)(v19 - 24)) & 0xFFFFFFB5 | 8;
    uint64_t v15 = (void *)std::ostream::operator<<();
    *(_DWORD *)((char *)v15 + *(void *)(*v15 - 24) + 8) = *(_DWORD *)((unsigned char *)v15 + *(void *)(*v15 - 24) + 8) & 0xFFFFFFB5 | 2;
    LOBYTE(__p[0]) = 10;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)__p, 1);
    goto LABEL_27;
  }
  uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13[1]);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.i32[0]) {
    goto LABEL_26;
  }
LABEL_27:
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(this, (uint64_t)v20);
  uint64_t v19 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v20[-1] + *(void *)(v19 - 2std::__tree<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::__map_value_compare<void *,std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>,std::less<void *>,true>,std::allocator<std::__value_type<void *,std::vector<std::shared_ptr<void *[]>>>>>::destroy(*((void **)this + 4)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v20[0] = MEMORY[0x1E4FBA470] + 16;
  if (v21 < 0) {
    operator delete((void *)v20[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x192FC8840](&v22);
}