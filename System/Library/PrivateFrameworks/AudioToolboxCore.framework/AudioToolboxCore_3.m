void sub_190044CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t **a37)
{
  uint64_t v37;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)&STACK[0x4D8]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v37 - 128);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a37, *(unsigned __int8 *)(v37 - 128));
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(void *a1, uint64_t a2, int a3)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v6 = (std::__shared_weak_count *)operator new(0x28uLL);
  v6->__shared_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2AB8;
  v6->__shared_weak_owners_ = 0;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDF9E238;
  v6[1].__shared_owners_ = (uint64_t)a1;
  *(void *)&long long v7 = v6 + 1;
  *((void *)&v7 + 1) = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  v15[0] = v7;
  memset(&v15[1], 0, 64);
  v8 = localeconv();
  v16 = v8;
  thousands_sep = v8->thousands_sep;
  if (thousands_sep) {
    char v10 = *thousands_sep;
  }
  else {
    char v10 = 0;
  }
  char v17 = v10;
  decimal_point = v8->decimal_point;
  if (v8->decimal_point) {
    LOBYTE(decimal_point) = *decimal_point;
  }
  char v18 = (char)decimal_point;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  char v51 = 32;
  v12 = operator new(0x208uLL);
  v52 = v12;
  unint64_t v54 = 0x8000000000000208;
  uint64_t v53 = 512;
  *(void *)&long long v13 = 0x2020202020202020;
  *((void *)&v13 + 1) = 0x2020202020202020;
  _OWORD *v12 = v13;
  v12[1] = v13;
  v12[2] = v13;
  v12[3] = v13;
  v12[4] = v13;
  v12[5] = v13;
  v12[6] = v13;
  v12[7] = v13;
  v12[8] = v13;
  v12[9] = v13;
  v12[10] = v13;
  v12[11] = v13;
  v12[12] = v13;
  v12[13] = v13;
  v12[14] = v13;
  v12[15] = v13;
  v12[16] = v13;
  v12[17] = v13;
  v12[18] = v13;
  v12[19] = v13;
  v12[20] = v13;
  v12[21] = v13;
  v12[22] = v13;
  v12[23] = v13;
  v12[24] = v13;
  v12[25] = v13;
  v12[26] = v13;
  v12[27] = v13;
  v12[28] = v13;
  v12[29] = v13;
  v12[30] = v13;
  v12[31] = v13;
  *((unsigned char *)v12 + 512) = 0;
  int v55 = 0;
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump((char *)v15, a2, a3 >= 0, a3 & ~(a3 >> 31), 0);
  return nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~serializer((uint64_t)v15);
}

void sub_1900459E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~serializer((uint64_t)&a9);
  if (*(char *)(v9 + 23) < 0) {
    operator delete(*(void **)v9);
  }
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(char *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  switch(*(unsigned char *)a2)
  {
    case 0:
      goto LABEL_29;
    case 1:
      uint64_t v9 = **(void **)a1;
      if (!*(void *)(*(void *)(a2 + 8) + 16))
      {
        long long v46 = *(uint64_t (**)(void))(v9 + 8);
        goto LABEL_52;
      }
      if (a3)
      {
        (*(void (**)(void))(v9 + 8))();
        unsigned int v10 = a5 + a4;
        v11 = (char **)(a1 + 608);
        if (a1[631] < 0)
        {
          unint64_t v12 = *((void *)a1 + 77);
          if (v12 >= v10) {
            goto LABEL_6;
          }
        }
        else
        {
          unint64_t v12 = a1[631];
          if (v10 <= v12)
          {
LABEL_6:
            long long v13 = *(void **)(a2 + 8);
            v14 = (void *)*v13;
            if (v13[2] == 1)
            {
              v15 = (void *)*v13;
            }
            else
            {
              unint64_t v79 = 0;
              do
              {
                v80 = a1 + 608;
                if (a1[631] < 0) {
                  v80 = *v11;
                }
                (*(void (**)(void, char *, void))(**(void **)a1 + 8))(*(void *)a1, v80, (a5 + a4));
                (***(void (****)(void))a1)();
                nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v14 + 4);
                (*(void (**)(void, const char *, uint64_t))(**(void **)a1 + 8))(*(void *)a1, "\": ", 3);
                nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v14 + 7, 1, a4, (a5 + a4));
                (*(void (**)(void, const char *, uint64_t))(**(void **)a1 + 8))(*(void *)a1, ",\n", 2);
                v81 = (void *)v14[1];
                if (v81)
                {
                  do
                  {
                    v15 = v81;
                    v81 = (void *)*v81;
                  }
                  while (v81);
                }
                else
                {
                  do
                  {
                    v15 = (void *)v14[2];
                    BOOL v58 = *v15 == (void)v14;
                    v14 = v15;
                  }
                  while (!v58);
                }
                ++v79;
                long long v13 = *(void **)(a2 + 8);
                v14 = v15;
              }
              while (v79 < v13[2] - 1);
            }
            v82 = v13 + 1;
            if (v15 == v82) {
              __assert_rtn("dump", "serializer.hpp", 138, "i != val.m_value.object->cend()");
            }
            v83 = (void *)v15[1];
            if (v83)
            {
              do
              {
                v84 = v83;
                v83 = (void *)*v83;
              }
              while (v83);
            }
            else
            {
              v86 = v15;
              do
              {
                v84 = (void *)v86[2];
                BOOL v58 = *v84 == (void)v86;
                v86 = v84;
              }
              while (!v58);
            }
            if (v84 != v82) {
              __assert_rtn("dump", "serializer.hpp", 139, "std::next(i) == val.m_value.object->cend()");
            }
            v87 = a1 + 608;
            if (a1[631] < 0) {
              v87 = *v11;
            }
            (*(void (**)(void, char *, void))(**(void **)a1 + 8))(*(void *)a1, v87, (a5 + a4));
            (***(void (****)(void))a1)();
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v15 + 4);
            (*(void (**)(void, const char *, uint64_t))(**(void **)a1 + 8))(*(void *)a1, "\": ", 3);
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v15 + 7, 1, a4, (a5 + a4));
            (***(void (****)(void))a1)();
            v78 = *(void (**)(void))(**(void **)a1 + 8);
            goto LABEL_145;
          }
        }
        std::string::resize((std::string *)(a1 + 608), 2 * v12, 32);
        goto LABEL_6;
      }
      (*(void (**)(void))v9)();
      uint64_t v53 = *(void *)(a2 + 8);
      unint64_t v54 = *(void **)v53;
      if (*(void *)(v53 + 16) != 1)
      {
        unint64_t v55 = 0;
        do
        {
          (***(void (****)(void, uint64_t))a1)(*(void *)a1, 34);
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v54 + 4);
          (*(void (**)(void, const char *, uint64_t))(**(void **)a1 + 8))(*(void *)a1, "\":", 2);
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v54 + 7, 0, a4, a5);
          (***(void (****)(void))a1)();
          uint64_t v56 = (void *)v54[1];
          v57 = v54;
          if (v56)
          {
            do
            {
              unint64_t v54 = v56;
              uint64_t v56 = (void *)*v56;
            }
            while (v56);
          }
          else
          {
            do
            {
              unint64_t v54 = (void *)v57[2];
              BOOL v58 = *v54 == (void)v57;
              v57 = v54;
            }
            while (!v58);
          }
          ++v55;
          uint64_t v53 = *(void *)(a2 + 8);
        }
        while (v55 < *(void *)(v53 + 16) - 1);
      }
      v59 = (void *)(v53 + 8);
      if (v54 == v59) {
        __assert_rtn("dump", "serializer.hpp", 166, "i != val.m_value.object->cend()");
      }
      v60 = (void *)v54[1];
      if (v60)
      {
        do
        {
          v61 = v60;
          v60 = (void *)*v60;
        }
        while (v60);
      }
      else
      {
        v85 = v54;
        do
        {
          v61 = (void *)v85[2];
          BOOL v58 = *v61 == (void)v85;
          v85 = v61;
        }
        while (!v58);
      }
      if (v61 != v59) {
        __assert_rtn("dump", "serializer.hpp", 167, "std::next(i) == val.m_value.object->cend()");
      }
      (***(void (****)(void, uint64_t))a1)(*(void *)a1, 34);
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v54 + 4);
      (*(void (**)(void, const char *, uint64_t))(**(void **)a1 + 8))(*(void *)a1, "\":", 2);
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v54 + 7, 0, a4, a5);
LABEL_146:
      v16 = ***(uint64_t (****)(void))a1;
LABEL_147:
      return v16();
    case 2:
      char v17 = **(void (****)(void))a1;
      if (**(void **)(a2 + 8) != *(void *)(*(void *)(a2 + 8) + 8))
      {
        if (!a3)
        {
          (*v17)();
          long long v48 = *(uint64_t **)(a2 + 8);
          uint64_t v50 = *v48;
          uint64_t v49 = v48[1];
          if (v50 == v49 - 16)
          {
            uint64_t v51 = v50;
          }
          else
          {
            uint64_t v51 = v50;
            do
            {
              nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v51, 0, a4, a5);
              (***(void (****)(void))a1)();
              v51 += 16;
              v52 = *(uint64_t **)(a2 + 8);
              uint64_t v49 = v52[1];
            }
            while (v51 != v49 - 16);
            uint64_t v50 = *v52;
          }
          if (v50 == v49) {
            __assert_rtn("dump", "serializer.hpp", 229, "not val.m_value.array->empty()");
          }
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v51, 0, a4, a5);
          goto LABEL_130;
        }
        v17[1]();
        unsigned int v18 = a5 + a4;
        long long v19 = a1 + 608;
        if (a1[631] < 0)
        {
          unint64_t v20 = *((void *)a1 + 77);
          if (v20 >= v18) {
            goto LABEL_14;
          }
        }
        else
        {
          unint64_t v20 = a1[631];
          if (v18 <= v20)
          {
LABEL_14:
            long long v21 = *(uint64_t **)(a2 + 8);
            uint64_t v23 = *v21;
            uint64_t v22 = v21[1];
            if (v23 != v22 - 16)
            {
              do
              {
                long long v24 = a1 + 608;
                if (a1[631] < 0) {
                  long long v24 = *(char **)v19;
                }
                (*(void (**)(void, char *, void))(**(void **)a1 + 8))(*(void *)a1, v24, (a5 + a4));
                nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v23, 1, a4, (a5 + a4));
                (*(void (**)(void, const char *, uint64_t))(**(void **)a1 + 8))(*(void *)a1, ",\n", 2);
                v23 += 16;
                long long v25 = *(uint64_t **)(a2 + 8);
                uint64_t v22 = v25[1];
              }
              while (v23 != v22 - 16);
              uint64_t v23 = *v25;
            }
            if (v23 == v22) {
              __assert_rtn("dump", "serializer.hpp", 208, "not val.m_value.array->empty()");
            }
            long long v26 = a1 + 608;
            if (a1[631] < 0) {
              long long v26 = *(char **)v19;
            }
            (*(void (**)(void, char *, void))(**(void **)a1 + 8))(*(void *)a1, v26, (a5 + a4));
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, *(void *)(*(void *)(a2 + 8) + 8) - 16, 1, a4, (a5 + a4));
            (***(void (****)(void))a1)();
            if (a1[631] < 0) {
              long long v19 = *(char **)v19;
            }
            (*(void (**)(void, char *, void))(**(void **)a1 + 8))(*(void *)a1, v19, a5);
LABEL_130:
            v16 = ***(uint64_t (****)(void))a1;
            goto LABEL_147;
          }
        }
        std::string::resize((std::string *)(a1 + 608), 2 * v20, 32);
        goto LABEL_14;
      }
      long long v46 = (uint64_t (*)(void))v17[1];
LABEL_52:
      return v46();
    case 3:
      (***(void (****)(void))a1)();
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, *(uint64_t **)(a2 + 8));
      v16 = ***(uint64_t (****)(void))a1;
      goto LABEL_147;
    case 4:
      v16 = *(uint64_t (**)(void))(**(void **)a1 + 8);
      goto LABEL_276;
    case 5:
      unint64_t v29 = *(void *)(a2 + 8);
      if (!v29) {
        goto LABEL_46;
      }
      long long v30 = a1 + 16;
      if ((v29 & 0x8000000000000000) != 0)
      {
        *long long v30 = 45;
        unint64_t v29 = -(uint64_t)v29;
        unsigned int v31 = 1;
        if (v29 >= 0xA)
        {
          unint64_t v65 = v29;
          while (1)
          {
            if (v65 <= 0x63)
            {
              ++v31;
              goto LABEL_193;
            }
            if (v65 <= 0x3E7)
            {
              v31 += 2;
              goto LABEL_193;
            }
            if (v65 >> 4 <= 0x270) {
              break;
            }
            v31 += 4;
            BOOL v33 = v65 >= 0x186A0;
            v65 /= 0x2710uLL;
            if (!v33) {
              goto LABEL_193;
            }
          }
          v31 += 3;
        }
      }
      else
      {
        if (v29 < 0xA)
        {
LABEL_41:
          uint64_t v34 = (uint64_t)(a1 + 17);
          goto LABEL_202;
        }
        unsigned int v31 = 1;
        unint64_t v32 = *(void *)(a2 + 8);
        while (v32 > 0x63)
        {
          if (v32 <= 0x3E7)
          {
            v31 += 2;
            goto LABEL_194;
          }
          if (v32 >> 4 <= 0x270)
          {
            v31 += 3;
            goto LABEL_194;
          }
          v31 += 4;
          BOOL v33 = v32 >= 0x186A0;
          v32 /= 0x2710uLL;
          if (!v33) {
            goto LABEL_194;
          }
        }
      }
LABEL_193:
      ++v31;
LABEL_194:
      if (v31 >= 0x3F) {
LABEL_282:
      }
        __assert_rtn("dump_integer", "serializer.hpp", 726, "n_chars < number_buffer.size() - 1");
      uint64_t v34 = (uint64_t)&v30[v31];
      if (v29 < 0x64)
      {
LABEL_198:
        unint64_t v126 = v29;
      }
      else
      {
        do
        {
          unint64_t v126 = v29 / 0x64;
          *(_WORD *)(v34 - 2) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(unsigned long long)::digits_to_99[v29 % 0x64];
          v34 -= 2;
          unint64_t v128 = v29 >> 4;
          v29 /= 0x64uLL;
        }
        while (v128 > 0x270);
      }
LABEL_199:
      if (v126 >= 0xA)
      {
        *(_WORD *)(v34 - 2) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(unsigned long long)::digits_to_99[v126];
        goto LABEL_203;
      }
      LOBYTE(v29) = v126;
LABEL_202:
      *(unsigned char *)(v34 - 1) = v29 + 48;
LABEL_203:
      v129 = *(uint64_t (****)(void))a1;
      goto LABEL_275;
    case 6:
      unint64_t v29 = *(void *)(a2 + 8);
      if (!v29)
      {
LABEL_46:
        long long v41 = ***(uint64_t (****)(void))a1;
LABEL_80:
        return v41();
      }
      if (v29 < 0xA) {
        goto LABEL_41;
      }
      unsigned int v62 = 1;
      unint64_t v63 = *(void *)(a2 + 8);
      while (1)
      {
        if (v63 <= 0x63)
        {
          ++v62;
          goto LABEL_182;
        }
        if (v63 <= 0x3E7)
        {
          v62 += 2;
          goto LABEL_182;
        }
        if (v63 >> 4 <= 0x270) {
          break;
        }
        v62 += 4;
        BOOL v33 = v63 >= 0x186A0;
        v63 /= 0x2710uLL;
        if (!v33) {
          goto LABEL_182;
        }
      }
      v62 += 3;
LABEL_182:
      if (v62 >= 0x3F) {
        goto LABEL_282;
      }
      uint64_t v34 = (uint64_t)&a1[v62 + 16];
      if (v29 < 0x64) {
        goto LABEL_198;
      }
      do
      {
        unint64_t v126 = v29 / 0x64;
        *(_WORD *)(v34 - 2) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(unsigned long long)::digits_to_99[v29 % 0x64];
        v34 -= 2;
        unint64_t v127 = v29 >> 4;
        v29 /= 0x64uLL;
      }
      while (v127 > 0x270);
      goto LABEL_199;
    case 7:
      double v27 = *(double *)(a2 + 8);
      if ((*(void *)&v27 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
LABEL_29:
        v16 = *(uint64_t (**)(void))(**(void **)a1 + 8);
        goto LABEL_276;
      }
      if ((*(void *)&v27 & 0x8000000000000000) != 0)
      {
        double v27 = -v27;
        uint64_t v28 = (uint64_t)(a1 + 17);
        a1[16] = 45;
      }
      else
      {
        uint64_t v28 = (uint64_t)(a1 + 16);
      }
      if (v27 == 0.0)
      {
        *(_WORD *)uint64_t v28 = 11824;
        *(unsigned char *)(v28 + 2) = 48;
        goto LABEL_274;
      }
      if ((uint64_t)&a1[-v28 + 80] <= 16) {
        __assert_rtn("to_chars", "to_chars.hpp", 1082, "last - first >= std::numeric_limits<FloatType>::max_digits10");
      }
      if ((*(void *)&v27 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
        __assert_rtn("grisu2", "to_chars.hpp", 889, "std::isfinite(value)");
      }
      if (v27 <= 0.0) {
        __assert_rtn("grisu2", "to_chars.hpp", 890, "value > 0");
      }
      uint64_t v66 = *(void *)&v27 & 0xFFFFFFFFFFFFFLL;
      unint64_t v159 = (unint64_t)&a1[-v28 + 80];
      if (*(void *)&v27 >> 52)
      {
        unint64_t v69 = (*(void *)&v27 >> 52) - 1075;
        uint64_t v71 = 2 * (v66 | 0x10000000000000);
        unsigned int v70 = (*(void *)&v27 >> 52) - 1076;
        uint64_t v88 = *(void *)&v27 >> 53;
        uint64_t v89 = 4 * (v66 | 0x10000000000000);
        int v90 = (*(void *)&v27 >> 52) - 1077;
        uint64_t v91 = 0x10000000000000;
        if (v66)
        {
          uint64_t v89 = 2 * (v66 | 0x10000000000000);
          int v90 = (*(void *)&v27 >> 52) - 1076;
          uint64_t v91 = v66 | 0x10000000000000;
        }
        if (v88) {
          uint64_t v67 = v89;
        }
        else {
          uint64_t v67 = 2 * (v66 | 0x10000000000000);
        }
        if (v88) {
          int v68 = v90;
        }
        else {
          int v68 = (*(void *)&v27 >> 52) - 1076;
        }
        if (v88) {
          uint64_t v66 = v91;
        }
        else {
          v66 |= 0x10000000000000uLL;
        }
      }
      else
      {
        uint64_t v67 = 2 * v66;
        int v68 = -1075;
        unint64_t v69 = 4294966222;
        unsigned int v70 = -1075;
        uint64_t v71 = 2 * v66;
      }
      uint64_t v92 = nlohmann::detail::dtoa_impl::diyfp::normalize(v71 | 1, v70);
      uint64_t v94 = v93;
      char v95 = v68 - v93;
      if (v68 - (int)v93 < 0)
      {
        v157 = "delta >= 0";
        int v158 = 162;
        goto LABEL_296;
      }
      unint64_t v96 = (v67 - 1) << v95;
      if (v96 >> v95 != v67 - 1)
      {
        v157 = "((x.f << delta) >> delta) == x.f";
        int v158 = 163;
LABEL_296:
        __assert_rtn("normalize_to", "to_chars.hpp", v158, v157);
      }
      uint64_t v97 = v92;
      uint64_t v98 = nlohmann::detail::dtoa_impl::diyfp::normalize(v66, v69);
      if (v94 != v99) {
        __assert_rtn("grisu2", "to_chars.hpp", 828, "m_plus.e == v.e");
      }
      if ((int)v94 <= -1501) {
        __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 466, "e >= -1500");
      }
      if ((int)v94 >= 1501) {
        __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 467, "e <= 1500");
      }
      int v100 = 78913 * (-61 - (int)v94) / 0x40000;
      if ((int)v94 < -61) {
        ++v100;
      }
      if (v100 <= -315) {
        __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 472, "index >= 0");
      }
      unsigned int v101 = (int)((v100 + 307 + (((__int16)(v100 + 307) >> 28) & 7)) << 16) >> 19;
      if (v101 >= 0x4F) {
        __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 473, "static_cast<std::size_t>(index) < kCachedPowers.size()");
      }
      v102 = (uint64_t *)((char *)&nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent(int)::kCachedPowers
                       + 16 * (unsigned __int16)v101);
      unint64_t v103 = v102[1];
      if ((int)v103 + (int)v94 <= -125) {
        __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 476, "kAlpha <= cached.e + e + 64");
      }
      if ((int)v103 + (int)v94 >= -95) {
        __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 477, "kGamma >= cached.e + e + 64");
      }
      uint64_t v104 = *v102;
      unint64_t v105 = nlohmann::detail::dtoa_impl::diyfp::mul(v98, v94, *v102);
      int v107 = v106;
      unint64_t v108 = nlohmann::detail::dtoa_impl::diyfp::mul(v96, v94, v104);
      int v110 = v109;
      unint64_t v111 = nlohmann::detail::dtoa_impl::diyfp::mul(v97, v94, v104);
      int v113 = v112;
      if (v112 <= -61) {
        __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 601, "M_plus.e >= kAlpha");
      }
      if (v112 >= -31) {
        __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 602, "M_plus.e <= kGamma");
      }
      unint64_t v114 = v108 + 1;
      unint64_t v115 = v111 - 1;
      unint64_t v116 = nlohmann::detail::dtoa_impl::diyfp::sub(v111 - 1, v112, v114, v110);
      unint64_t v117 = nlohmann::detail::dtoa_impl::diyfp::sub(v115, v113, v105, v107);
      int v118 = -v113;
      unint64_t v119 = v115 >> -(char)v113;
      if (!v119) {
        __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 623, "p1 > 0");
      }
      unint64_t v120 = v117;
      unint64_t v121 = HIDWORD(v103);
      uint64_t v122 = (1 << v118) - 1;
      unint64_t v123 = v122 & v115;
      if (v119 <= 0x3B9AC9FF)
      {
        if (v119 <= 0x5F5E0FF)
        {
          if (v119 <= 0x98967F)
          {
            if (v119 <= 0xF423F)
            {
              unsigned int v130 = v119 >> 5;
              unsigned int v131 = v119 >> 4;
              if (v119 <= 9) {
                int v132 = 1;
              }
              else {
                int v132 = 10;
              }
              if (v119 <= 9) {
                int v133 = 1;
              }
              else {
                int v133 = 2;
              }
              if (v119 <= 0x63) {
                int v134 = v133;
              }
              else {
                int v134 = 3;
              }
              if (v119 <= 0x63) {
                int v135 = v132;
              }
              else {
                int v135 = 100;
              }
              if (v119 <= 0x3E7) {
                int v136 = v134;
              }
              else {
                int v136 = 4;
              }
              if (v119 <= 0x3E7) {
                int v137 = v135;
              }
              else {
                int v137 = 1000;
              }
              if (v131 <= 0x270) {
                int v138 = v136;
              }
              else {
                int v138 = 5;
              }
              if (v131 <= 0x270) {
                int v139 = v137;
              }
              else {
                int v139 = 10000;
              }
              if (v130 <= 0xC34) {
                unsigned int v125 = v138;
              }
              else {
                unsigned int v125 = 6;
              }
              if (v130 > 0xC34) {
                unsigned int v124 = 100000;
              }
              else {
                unsigned int v124 = v139;
              }
            }
            else
            {
              unsigned int v124 = 1000000;
              unsigned int v125 = 7;
            }
          }
          else
          {
            unsigned int v124 = 10000000;
            unsigned int v125 = 8;
          }
        }
        else
        {
          unsigned int v124 = 100000000;
          unsigned int v125 = 9;
        }
      }
      else
      {
        unsigned int v124 = 1000000000;
        unsigned int v125 = 10;
      }
      uint64_t v140 = 0;
      int v141 = -1;
      v142 = (char *)v125;
      do
      {
        unsigned int v143 = v119 / v124;
        if (v119 / v124 >= 0xA) {
          __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 659, "d <= 9");
        }
        unint64_t v119 = v119 % v124;
        v144 = (char *)(v140 + 1);
        *(unsigned char *)(v28 + v140) = v143 + 48;
        if ((v119 << v118) + v123 <= v116)
        {
          int v148 = v142 + v141;
          nlohmann::detail::dtoa_impl::grisu2_round(v28, (char *)(v140 + 1), v120, v116, (v119 << v118) + v123, (unint64_t)v124 << v118);
          goto LABEL_247;
        }
        v124 /= 0xAu;
        --v141;
        ++v140;
      }
      while (v142 != v144);
      if (v123 <= v116) {
        __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 746, "p2 > delta");
      }
      uint64_t v145 = 0;
      do
      {
        if (v123 >= 0x199999999999999ALL) {
          __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 757, "p2 <= (std::numeric_limits<std::uint64_t>::max)() / 10");
        }
        unint64_t v146 = (10 * v123) >> v118;
        if (v146 >= 0xA) {
          __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 766, "d <= 9");
        }
        v144[v28 + v145] = v146 + 48;
        uint64_t v147 = 5 * v116;
        unint64_t v123 = (10 * v123) & v122;
        v116 *= 10;
        v120 *= 10;
        ++v145;
      }
      while (v123 > 2 * v147);
      v144 += v145;
      int v148 = ~(v145 - 1);
      nlohmann::detail::dtoa_impl::grisu2_round(v28, v144, v120, v116, v123, 1 << v118);
LABEL_247:
      if ((int)v144 >= 18) {
        __assert_rtn("to_chars", "to_chars.hpp", 1092, "len <= std::numeric_limits<FloatType>::max_digits10");
      }
      if (v159 <= 0x15) {
        __assert_rtn("to_chars", "to_chars.hpp", 1100, "last - first >= 2 + (-kMinExp - 1) + std::numeric_limits<FloatType>::max_digits10");
      }
      if (v159 == 22) {
        __assert_rtn("to_chars", "to_chars.hpp", 1101, "last - first >= std::numeric_limits<FloatType>::max_digits10 + 6");
      }
      uint64_t v149 = v148 - (int)v121 + (uint64_t)(int)v144;
      if (((v148 - v121) & 0x80000000) == 0 && (int)v149 <= 15)
      {
        memset((void *)(v28 + (int)v144), 48, v148 - (int)v121);
        *(unsigned char *)(v28 + v149) = 46;
        *(unsigned char *)(v28 + (int)v149 + 1) = 48;
        goto LABEL_274;
      }
      if ((v149 - 16) >= 0xFFFFFFF1)
      {
        if (((v148 - v121) & 0x80000000) == 0) {
          __assert_rtn("format_buffer", "to_chars.hpp", 1006, "k > n");
        }
        v150 = (unsigned char *)(v28 + v149);
        memmove(v150 + 1, v150, (int)v144 - (unint64_t)v149);
        unsigned char *v150 = 46;
      }
      else
      {
        if (v149 == 0 || v149 >= 0xFFFFFFFD)
        {
          memmove((void *)(v28 + -(int)v149 + 2), (const void *)v28, (int)v144);
          *(_WORD *)uint64_t v28 = 11824;
          memset((void *)(v28 + 2), 48, -(int)v149);
          goto LABEL_274;
        }
        if (v144 == 1)
        {
          uint64_t v151 = 1;
        }
        else
        {
          memmove((void *)(v28 + 2), (const void *)(v28 + 1), (int)v144 - 1);
          *(unsigned char *)(v28 + 1) = 46;
          uint64_t v151 = (int)v144 + 1;
        }
        v152 = (unsigned char *)(v28 + v151);
        unsigned char *v152 = 101;
        if ((int)v149 <= -999) {
          __assert_rtn("append_exponent", "to_chars.hpp", 926, "e > -1000");
        }
        if ((int)v149 >= 1001) {
          __assert_rtn("append_exponent", "to_chars.hpp", 927, "e < 1000");
        }
        int v153 = v149 - 1;
        if ((int)v149 >= 1) {
          char v154 = 43;
        }
        else {
          char v154 = 45;
        }
        if (v153 < 0) {
          int v153 = 1 - v149;
        }
        v152[1] = v154;
        if (v153 <= 9)
        {
          v152[2] = 48;
          char v155 = v153 + 48;
LABEL_272:
          v152[3] = v155;
          goto LABEL_274;
        }
        if (v153 <= 0x63)
        {
          v152[2] = v153 / 0xAu + 48;
          char v155 = (v153 % 0xAu) | 0x30;
          goto LABEL_272;
        }
        v152[2] = (unsigned __int16)v153 / 0x64u + 48;
        unsigned __int8 v156 = (unsigned __int16)v153 % 0x64u;
        v152[3] = (v156 / 0xAu) | 0x30;
        v152[4] = (v156 % 0xAu) | 0x30;
      }
LABEL_274:
      v129 = *(uint64_t (****)(void))a1;
LABEL_275:
      v16 = (*v129)[1];
LABEL_276:
      return v16();
    case 8:
      long long v35 = *(void (**)(void))(**(void **)a1 + 8);
      if (!a3)
      {
        v35();
        long long v42 = *(unsigned __int8 ***)(a2 + 8);
        long long v44 = *v42;
        long long v43 = v42[1];
        if (v44 != v43)
        {
          while (v44 != v43 - 1)
          {
            unsigned int v45 = *v44++;
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(a1, v45);
            (***(void (****)(void, uint64_t))a1)(*(void *)a1, 44);
            long long v43 = *(unsigned __int8 **)(*(void *)(a2 + 8) + 8);
          }
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(a1, *v44);
        }
        (*(void (**)(void, const char *, uint64_t))(**(void **)a1 + 8))(*(void *)a1, "],\"subtype\":", 12);
        uint64_t v64 = *(void *)(a2 + 8);
        if (*(unsigned char *)(v64 + 25))
        {
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(a1, *(unsigned __int8 *)(v64 + 24));
          long long v41 = ***(uint64_t (****)(void))a1;
          goto LABEL_80;
        }
        v16 = *(uint64_t (**)(void))(**(void **)a1 + 8);
        goto LABEL_276;
      }
      v35();
      uint64_t v36 = (a5 + a4);
      long long v37 = (char **)(a1 + 608);
      if (a1[631] < 0)
      {
        unint64_t v38 = *((void *)a1 + 77);
        if (v38 >= v36)
        {
          long long v39 = *(uint64_t (****)(void))a1;
          goto LABEL_100;
        }
      }
      else
      {
        unint64_t v38 = a1[631];
        if (v36 <= v38)
        {
          long long v39 = *(uint64_t (****)(void))a1;
          long long v40 = a1 + 608;
          goto LABEL_101;
        }
      }
      std::string::resize((std::string *)(a1 + 608), 2 * v38, 32);
      long long v39 = *(uint64_t (****)(void))a1;
      long long v40 = a1 + 608;
      if ((a1[631] & 0x80000000) == 0)
      {
LABEL_101:
        ((void (*)(uint64_t (***)(void), char *, uint64_t))(*v39)[1])(v39, v40, v36);
        (*(void (**)(void, const char *, uint64_t))(**(void **)a1 + 8))(*(void *)a1, "\"bytes\": [", 10);
        v72 = *(unsigned __int8 ***)(a2 + 8);
        v74 = *v72;
        v73 = v72[1];
        if (v74 != v73)
        {
          if (v74 != v73 - 1)
          {
            do
            {
              unsigned int v75 = *v74++;
              nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(a1, v75);
              (*(void (**)(void, const char *, uint64_t))(**(void **)a1 + 8))(*(void *)a1, ", ", 2);
            }
            while (v74 != (unsigned __int8 *)(*(void *)(*(void *)(a2 + 8) + 8) - 1));
          }
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(a1, *v74);
        }
        (*(void (**)(void, const char *, uint64_t))(**(void **)a1 + 8))(*(void *)a1, "],\n", 3);
        v76 = a1 + 608;
        if (a1[631] < 0) {
          v76 = *v37;
        }
        (*(void (**)(void, char *, uint64_t))(**(void **)a1 + 8))(*(void *)a1, v76, v36);
        (*(void (**)(void, const char *, uint64_t))(**(void **)a1 + 8))(*(void *)a1, "\"subtype\": ", 11);
        uint64_t v77 = *(void *)(a2 + 8);
        if (*(unsigned char *)(v77 + 25)) {
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(a1, *(unsigned __int8 *)(v77 + 24));
        }
        else {
          (*(void (**)(void, const char *, uint64_t))(**(void **)a1 + 8))(*(void *)a1, "null", 4);
        }
        (***(void (****)(void, uint64_t))a1)(*(void *)a1, 10);
        v78 = *(void (**)(void))(**(void **)a1 + 8);
LABEL_145:
        v78();
        goto LABEL_146;
      }
LABEL_100:
      long long v40 = *v37;
      goto LABEL_101;
    case 9:
      v16 = *(uint64_t (**)(void))(**(void **)a1 + 8);
      goto LABEL_276;
    default:
      __assert_rtn("dump", "serializer.hpp", 363, "false");
  }
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~serializer(uint64_t a1)
{
  if (*(char *)(a1 + 631) < 0) {
    operator delete(*(void **)(a1 + 608));
  }
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped(uint64_t result, uint64_t *a2)
{
  int v2 = *((char *)a2 + 23);
  uint64_t v3 = a2[1];
  if (v2 >= 0) {
    uint64_t v3 = *((unsigned __int8 *)a2 + 23);
  }
  if (!v3) {
    return result;
  }
  v5 = (void *)result;
  unsigned int v6 = 0;
  unsigned int v7 = 0;
  unint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unsigned int v12 = v2 >> 31;
  uint64_t v13 = result + 90;
  do
  {
    if (v12) {
      v14 = (uint64_t *)*a2;
    }
    else {
      v14 = a2;
    }
    uint64_t v15 = *((unsigned __int8 *)v14 + v8);
    if (v7) {
      unsigned int v6 = v15 & 0x3F | (v6 << 6);
    }
    else {
      unsigned int v6 = (0xFFu >> nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode(unsigned char &,unsigned int &,unsigned char)::utf8d[v15]) & v15;
    }
    unint64_t v16 = 16 * v7
        + nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode(unsigned char &,unsigned int &,unsigned char)::utf8d[v15]
        + 256;
    if (v16 >= 0x190) {
      __assert_rtn("decode", "serializer.hpp", 892, "index < 400");
    }
    unsigned int v7 = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode(unsigned char &,unsigned int &,unsigned char)::utf8d[v16];
    if (v7 == 1)
    {
      int v18 = *((_DWORD *)v5 + 158);
      if ((v18 - 1) >= 2)
      {
        if (!v18)
        {
          char v40 = 3;
          *(_DWORD *)__str = 0;
          snprintf(__str, 3uLL, "%.2X", v15);
          exception = __cxa_allocate_exception(0x20uLL);
          std::to_string(&v33, v8);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v34, "invalid UTF-8 byte at index ", &v33);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v35, &v34, ": 0x");
          if (v40 >= 0) {
            double v27 = __str;
          }
          else {
            double v27 = *(char **)__str;
          }
          if (v40 >= 0) {
            std::string::size_type v28 = v40;
          }
          else {
            std::string::size_type v28 = v39;
          }
          unint64_t v29 = std::string::append(&v35, v27, v28);
          long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
          std::string::size_type v37 = v29->__r_.__value_.__r.__words[2];
          long long v36 = v30;
          v29->__r_.__value_.__l.__size_ = 0;
          v29->__r_.__value_.__r.__words[2] = 0;
          v29->__r_.__value_.__r.__words[0] = 0;
          nlohmann::detail::type_error::create((uint64_t)exception, 316, (uint64_t)&v36);
        }
        __assert_rtn("dump_escaped", "serializer.hpp", 562, "false");
      }
      v8 -= v9 != 0;
      if (v18 != 1)
      {
        unsigned int v7 = 0;
        uint64_t v9 = 0;
        uint64_t v11 = v10;
        goto LABEL_39;
      }
      uint64_t v19 = v13 + v10;
      uint64_t v11 = v10 + 3;
      *(_WORD *)uint64_t v19 = -16401;
      *(unsigned char *)(v19 + 2) = -67;
      unint64_t v20 = v10 - 497;
      goto LABEL_36;
    }
    if (!v7)
    {
      switch(v6)
      {
        case 8u:
          __int16 v17 = 25180;
          goto LABEL_34;
        case 9u:
          __int16 v17 = 29788;
          goto LABEL_34;
        case 0xAu:
          __int16 v17 = 28252;
          goto LABEL_34;
        case 0xBu:
          goto LABEL_27;
        case 0xCu:
          __int16 v17 = 26204;
          goto LABEL_34;
        case 0xDu:
          __int16 v17 = 29276;
          goto LABEL_34;
        default:
          if (v6 == 34)
          {
            __int16 v17 = 8796;
            goto LABEL_34;
          }
          if (v6 == 92)
          {
            __int16 v17 = 23644;
LABEL_34:
            *(_WORD *)(v13 + v11) = v17;
            v11 += 2;
            goto LABEL_35;
          }
LABEL_27:
          if (v6 > 0x1F)
          {
            if ((v2 & 0x80u) == 0) {
              uint64_t v23 = a2;
            }
            else {
              uint64_t v23 = (uint64_t *)*a2;
            }
            *(unsigned char *)(v13 + v11++) = *((unsigned char *)v23 + v8);
          }
          else
          {
            result = snprintf((char *)(v13 + v11), 7uLL, "\\u%04x", v6);
            v11 += 6;
          }
LABEL_35:
          unint64_t v20 = v11 - 500;
          break;
      }
LABEL_36:
      if (v20 <= 0xC)
      {
        result = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v5 + 8))(*v5, v13, v11);
        unsigned int v7 = 0;
        uint64_t v11 = 0;
        uint64_t v10 = 0;
        uint64_t v9 = 0;
      }
      else
      {
        unsigned int v7 = 0;
        uint64_t v9 = 0;
        uint64_t v10 = v11;
      }
      goto LABEL_39;
    }
    if ((v2 & 0x80u) == 0) {
      long long v21 = a2;
    }
    else {
      long long v21 = (uint64_t *)*a2;
    }
    *(unsigned char *)(v13 + v11++) = *((unsigned char *)v21 + v8);
    ++v9;
LABEL_39:
    ++v8;
    int v2 = *((char *)a2 + 23);
    unsigned int v12 = v2 >> 31;
    unint64_t v22 = a2[1];
    if (v2 >= 0) {
      unint64_t v22 = *((unsigned __int8 *)a2 + 23);
    }
  }
  while (v8 < v22);
  if (v7)
  {
    int v25 = *((_DWORD *)v5 + 158);
    switch(v25)
    {
      case 1:
        (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v5 + 8))(*v5, v13, v10);
        long long v24 = *(uint64_t (**)(void))(*(void *)*v5 + 8);
        break;
      case 2:
        long long v24 = *(uint64_t (**)(void))(*(void *)*v5 + 8);
        break;
      case 0:
        char v40 = 3;
        *(_DWORD *)__str = 0;
        unsigned int v31 = (uint64_t *)*a2;
        if (v2 >= 0) {
          unsigned int v31 = a2;
        }
        snprintf(__str, 3uLL, "%.2X", *((unsigned __int8 *)v31 + v22 - 1));
        unint64_t v32 = __cxa_allocate_exception(0x20uLL);
        std::operator+<char>();
        nlohmann::detail::type_error::create((uint64_t)v32, 316, (uint64_t)&v36);
      default:
        __assert_rtn("dump_escaped", "serializer.hpp", 625, "false");
    }
LABEL_50:
    return v24();
  }
  else if (v11)
  {
    long long v24 = *(uint64_t (**)(void))(*(void *)*v5 + 8);
    goto LABEL_50;
  }
  return result;
}

void sub_190047C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a33 < 0)
  {
    operator delete(__p);
    if ((v40 & 1) == 0)
    {
LABEL_6:
      if (a39 < 0) {
        operator delete(a34);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v40)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v39);
  goto LABEL_6;
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(void *a1, unsigned int a2)
{
  if (!a2) {
    return (**(uint64_t (***)(void, uint64_t))*a1)(*a1, 48);
  }
  LOBYTE(v2) = a2;
  if (a2 < 0xA)
  {
    uint64_t v3 = 1;
LABEL_8:
    char v6 = v2 | 0x30;
    goto LABEL_9;
  }
  if (a2 >= 0x64)
  {
    *(_WORD *)((char *)a1 + 17) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(unsigned long long)::digits_to_99[(a2 - 100 * ((41 * a2) >> 12))];
    uint64_t v3 = 3;
    unsigned int v2 = (41 * a2) >> 12;
    goto LABEL_8;
  }
  v5 = (char *)&nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(unsigned long long)::digits_to_99[a2];
  *((unsigned char *)a1 + 17) = v5[1];
  char v6 = *v5;
  uint64_t v3 = 2;
LABEL_9:
  *((unsigned char *)a1 + 16) = v6;
  return (*(uint64_t (**)(void, void *, uint64_t))(*(void *)*a1 + 8))(*a1, a1 + 2, v3);
}

unint64_t nlohmann::detail::dtoa_impl::diyfp::mul(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ((a3 * (unint64_t)HIDWORD(a1)) >> 32)
       + HIDWORD(a3) * (unint64_t)HIDWORD(a1)
       + ((HIDWORD(a3) * (unint64_t)a1) >> 32)
       + ((((a3 * (unint64_t)a1) >> 32)
         + (HIDWORD(a3) * a1)
         + (a3 * HIDWORD(a1))
         + 0x80000000) >> 32);
}

unint64_t nlohmann::detail::dtoa_impl::diyfp::sub(unint64_t a1, int a2, unint64_t a3, int a4)
{
  if (a2 != a4)
  {
    char v6 = "x.e == y.e";
    int v7 = 66;
LABEL_6:
    __assert_rtn("sub", "to_chars.hpp", v7, v6);
  }
  BOOL v4 = a1 >= a3;
  unint64_t result = a1 - a3;
  if (!v4)
  {
    char v6 = "x.f >= y.f";
    int v7 = 67;
    goto LABEL_6;
  }
  return result;
}

uint64_t nlohmann::detail::dtoa_impl::grisu2_round(uint64_t this, char *a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  if ((int)a2 <= 0) {
    __assert_rtn("grisu2_round", "to_chars.hpp", 545, "len >= 1");
  }
  if (a3 > a4) {
    __assert_rtn("grisu2_round", "to_chars.hpp", 546, "dist <= delta");
  }
  if (a4 < a5) {
    __assert_rtn("grisu2_round", "to_chars.hpp", 547, "rest <= delta");
  }
  if (!a6) {
    __assert_rtn("grisu2_round", "to_chars.hpp", 548, "ten_k > 0");
  }
  if (a5 < a3 && a4 - a5 >= a6)
  {
    uint64_t v6 = (a2 - 1);
    uint64_t v7 = -(uint64_t)a5;
    unint64_t v8 = a6 + a5;
    do
    {
      if (v8 >= a3 && a3 + v7 <= v8 - a3) {
        break;
      }
      int v9 = *(unsigned __int8 *)(this + v6);
      if (v9 == 48) {
        __assert_rtn("grisu2_round", "to_chars.hpp", 573, "buf[len - 1] != '0'");
      }
      *(unsigned char *)(this + v6) = v9 - 1;
      if (v8 >= a3) {
        break;
      }
      unint64_t v10 = a4 - a6 + v7;
      v7 -= a6;
      v8 += a6;
    }
    while (v10 >= a6);
  }
  return this;
}

uint64_t nlohmann::detail::dtoa_impl::diyfp::normalize(uint64_t result, unint64_t a2)
{
  if (!result) {
    __assert_rtn("normalize", "to_chars.hpp", 143, "x.f != 0");
  }
  for (; (result & 0x8000000000000000) == 0; a2 = (a2 - 1) | a2 & 0xFFFFFFFF00000000)
    result *= 2;
  return result;
}

void nlohmann::detail::output_string_adapter<char,std::string>::~output_string_adapter()
{
}

std::string *nlohmann::detail::output_string_adapter<char,std::string>::write_characters(uint64_t a1, const std::string::value_type *a2, std::string::size_type a3)
{
  return std::string::append(*(std::string **)(a1 + 8), a2, a3);
}

void nlohmann::detail::output_string_adapter<char,std::string>::write_character(uint64_t a1, std::string::value_type a2)
{
}

uint64_t std::__shared_ptr_emplace<nlohmann::detail::output_string_adapter<char,std::string>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void std::__shared_ptr_emplace<nlohmann::detail::output_string_adapter<char,std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2AB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

void std::__shared_ptr_emplace<nlohmann::detail::output_string_adapter<char,std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2AB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t ADTSAudioStream::HandleDiscontinuity(ADTSAudioStream *this)
{
  *((_DWORD *)this + 59) = 0;
  *((unsigned char *)this + 332) = 1;
  *((unsigned char *)this + 344) = 0;
  *((unsigned char *)this + 356) = 0;
  *((unsigned char *)this + 373) = 0;
  return 0;
}

uint64_t ADTSAudioStream::GeneratePackets(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 236);
  if (v2 <= 282)
  {
    if (v2 > 275)
    {
      if (v2 == 276) {
        goto LABEL_140;
      }
      if (v2 == 280) {
        goto LABEL_22;
      }
    }
    else
    {
      if (v2 == -1) {
        return 0;
      }
      if (!v2) {
        goto LABEL_20;
      }
    }
    goto LABEL_16;
  }
  if (v2 <= 313)
  {
    if (v2 == 283)
    {
      uint64_t v12 = *(void *)(a1 + 8);
      unsigned int v13 = *(_DWORD *)(v12 + 116);
      goto LABEL_41;
    }
    if (v2 == 300)
    {
      unsigned int v5 = *(_DWORD *)(a1 + 256);
      uint64_t v6 = *(void *)(a1 + 8);
      uint64_t v7 = *(unsigned __int8 **)(a1 + 264);
      goto LABEL_68;
    }
    goto LABEL_16;
  }
  if (v2 == 314)
  {
    uint64_t v10 = *(void *)(a1 + 8);
    LODWORD(v11) = *(_DWORD *)(v10 + 116);
    goto LABEL_95;
  }
  if (v2 == 328) {
    goto LABEL_249;
  }
  if (v2 != 419)
  {
LABEL_16:
    uint64_t result = 0;
    int v9 = -1;
    goto LABEL_262;
  }
  LODWORD(v3) = *(_DWORD *)(a1 + 256);
  BOOL v4 = *(unsigned __int8 **)(a1 + 264);
LABEL_198:
  v150[0] = v3;
  StreamBuffer::Copy((void *)(*(void *)(a1 + 8) + 72), v150, v4);
  unsigned int v119 = v150[0];
  int v120 = *(_DWORD *)(a1 + 256);
  *(void *)(a1 + 264) += v150[0];
  int v121 = v120 - v119;
  *(_DWORD *)(a1 + 256) = v121;
  if (v121)
  {
    uint64_t result = 0;
    int v9 = 419;
    goto LABEL_262;
  }
  if (!*(_DWORD *)(a1 + 200))
  {
    *(_DWORD *)(a1 + 200) = 1;
    CADeprecated::CAAutoFree<AudioStreamPacketDescription>::reallocItems((void **)(a1 + 192), 1);
  }
  SInt64 v122 = *(unsigned int *)(a1 + 352);
  unint64_t v123 = *(AudioStreamPacketDescription **)(a1 + 192);
  v123->mStartOffset = v122;
  UInt32 v124 = *(_DWORD *)(a1 + 340);
  v123->mVariableFramesInPacket = 0;
  v123->mDataByteSize = v124 - v122;
  AudioFileStreamWrapper::CallPacketsProc(*(AudioFileStreamWrapper **)(a1 + 8), v124, 1u, *(const void **)(a1 + 288), v123, 1);
  ++*(void *)(a1 + 184);
LABEL_20:
  while (1)
  {
    int v14 = *(_DWORD *)(a1 + 400);
    if (v14) {
      break;
    }
LABEL_22:
    uint64_t v12 = *(void *)(a1 + 8);
    uint64_t v16 = *(void *)(v12 + 88);
    uint64_t v15 = *(void *)(v12 + 96);
    uint64_t v17 = v16 + *(unsigned int *)(v12 + 80);
    unsigned int v13 = v17 - v15;
    BOOL v19 = v15 < v16 || v17 <= v15 || v17 == v15;
    if (v19)
    {
      uint64_t result = 0;
      int v9 = 280;
      goto LABEL_262;
    }
    if (*(unsigned char *)(a1 + 356))
    {
      unsigned int v20 = *(_DWORD *)(a1 + 360);
      size_t v21 = *(_DWORD *)(a1 + 352) - v20;
      *(_DWORD *)(a1 + 256) = v21;
      if (v21 > v13)
      {
        *(void *)(a1 + 272) = v15;
        uint64_t v22 = *(void *)(v12 + 72);
        if (v22 == *(void *)(v12 + 128))
        {
          if (v17 == v15) {
            uint64_t v23 = 0;
          }
          else {
            uint64_t v23 = (const void *)(v22 + (v15 - v16));
          }
          memmove(*(void **)(v12 + 72), v23, (v17 - v15));
          size_t v24 = (*(_DWORD *)(a1 + 352) - *(_DWORD *)(a1 + 360));
          uint64_t v12 = *(void *)(a1 + 8);
          if (*(_DWORD *)(v12 + 120) < v24)
          {
            *(_DWORD *)(v12 + 120) = v24;
            CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v12 + 128), v24);
            uint64_t v12 = *(void *)(a1 + 8);
          }
          *(_DWORD *)(v12 + 116) = v13;
          *(void *)(v12 + 96) = *(void *)(v12 + 88) + *(unsigned int *)(v12 + 80);
        }
        else
        {
          if (*(_DWORD *)(v12 + 120) < v21)
          {
            *(_DWORD *)(v12 + 120) = v21;
            CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v12 + 128), v21);
            uint64_t v12 = *(void *)(a1 + 8);
          }
          unsigned int v13 = 0;
          *(_DWORD *)(v12 + 116) = 0;
        }
LABEL_41:
        unsigned int v25 = *(_DWORD *)(a1 + 256) - v13;
        uint64_t v26 = *(void *)(v12 + 88);
        uint64_t v27 = *(void *)(v12 + 96);
        uint64_t v28 = v26 + *(unsigned int *)(v12 + 80);
        if (v28 <= v27 || v27 < v26) {
          unsigned int v30 = 0;
        }
        else {
          unsigned int v30 = v28 - v27;
        }
        if (v25 <= v30) {
          unsigned int v25 = v30;
        }
        v150[0] = v25;
        size_t v31 = v25 + v13;
        if (*(_DWORD *)(v12 + 120) < v31)
        {
          *(_DWORD *)(v12 + 120) = v31;
          CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v12 + 128), v31);
          uint64_t v12 = *(void *)(a1 + 8);
        }
        StreamBuffer::Copy((void *)(v12 + 72), v150, (unsigned __int8 *)(*(void *)(v12 + 128) + *(unsigned int *)(v12 + 116)));
        uint64_t v12 = *(void *)(a1 + 8);
        unsigned int v13 = *(_DWORD *)(v12 + 116) + v150[0];
        *(_DWORD *)(v12 + 116) = v13;
        if (v13 < *(_DWORD *)(a1 + 256))
        {
          uint64_t result = 0;
          int v9 = 283;
          goto LABEL_262;
        }
        uint64_t v15 = *(void *)(a1 + 272);
        uint64_t v32 = *(void *)(v12 + 128);
        *(void *)(v12 + 88) = v15;
        *(void *)(v12 + 96) = v15;
        *(void *)(v12 + 72) = v32;
        *(_DWORD *)(v12 + 80) = v13;
        unsigned int v20 = *(_DWORD *)(a1 + 360);
        uint64_t v17 = v15 + v13;
        uint64_t v16 = v15;
      }
      std::string v33 = 0;
      if (v15 >= v16 && v15 < v17 && v13 != 0) {
        std::string v33 = (const void *)(*(void *)(v12 + 72) + (v15 - v16));
      }
      memcpy((void *)(a1 + 364 + v20), v33, *(_DWORD *)(a1 + 352) - v20);
      if (*(unsigned __int8 *)(a1 + 364) == 255 && *(unsigned __int8 *)(a1 + 365) >= 0xF0u)
      {
        BOOL v36 = ADTSAudioStream::ParseADTSPacket(a1, *(_DWORD *)(a1 + 352), a1 + 364, (uint64_t)v150, 0);
        *(unsigned char *)(a1 + 356) = v36;
        size_t v37 = (unsigned __int16)size;
        unsigned int v38 = *(_DWORD *)(a1 + 352);
        if (v38 > (unsigned __int16)size) {
          return 1885563711;
        }
        *(_DWORD *)(a1 + 340) = (unsigned __int16)size;
        if (v36)
        {
          if (*(_DWORD *)(a1 + 284) < v37)
          {
            *(_DWORD *)(a1 + 284) = v37;
            CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)(a1 + 288), v37, 0);
            unsigned int v38 = *(_DWORD *)(a1 + 352);
          }
          memcpy(*(void **)(a1 + 288), (const void *)(a1 + 364), v38);
          uint64_t v6 = *(void *)(a1 + 8);
          uint64_t v39 = *(unsigned int *)(a1 + 352);
          *(void *)(v6 + 96) += (v39 - *(_DWORD *)(a1 + 360));
          unsigned int v5 = *(_DWORD *)(a1 + 340) - v39;
          *(_DWORD *)(a1 + 256) = v5;
          uint64_t v7 = (unsigned __int8 *)(*(void *)(a1 + 288) + v39);
          *(void *)(a1 + 264) = v7;
LABEL_68:
          v150[0] = v5;
          StreamBuffer::Copy((void *)(v6 + 72), v150, v7);
          unsigned int v40 = v150[0];
          int v41 = *(_DWORD *)(a1 + 256);
          *(void *)(a1 + 264) += v150[0];
          int v42 = v41 - v40;
          *(_DWORD *)(a1 + 256) = v42;
          if (v42)
          {
            uint64_t result = 0;
            int v9 = 300;
            goto LABEL_262;
          }
          SInt64 v43 = *(unsigned int *)(a1 + 352);
          long long v44 = *(AudioStreamPacketDescription **)(a1 + 192);
          v44->mStartOffset = v43;
          UInt32 v45 = *(_DWORD *)(a1 + 340);
          v44->mVariableFramesInPacket = 0;
          v44->mDataByteSize = v45 - v43;
          AudioFileStreamWrapper::CallPacketsProc(*(AudioFileStreamWrapper **)(a1 + 8), v45, 1u, *(const void **)(a1 + 288), v44, 1);
          ++*(void *)(a1 + 184);
        }
      }
      *(_DWORD *)(a1 + 360) = 0;
      *(unsigned char *)(a1 + 356) = 0;
    }
    if (!*(unsigned char *)(a1 + 373)) {
      goto LABEL_157;
    }
    unsigned int v46 = *(_DWORD *)(a1 + 376);
    size_t v47 = 10 - v46;
    *(_DWORD *)(a1 + 256) = v47;
    uint64_t v10 = *(void *)(a1 + 8);
    uint64_t v49 = *(void *)(v10 + 88);
    uint64_t v48 = *(void *)(v10 + 96);
    uint64_t v50 = v49 + *(unsigned int *)(v10 + 80);
    BOOL v52 = v48 < v49 || v50 <= v48;
    unsigned int v53 = v50 - v48;
    if (v52) {
      size_t v11 = 0;
    }
    else {
      size_t v11 = v53;
    }
    if (v11 < v47)
    {
      *(void *)(a1 + 272) = v48;
      unint64_t v54 = *(char **)(v10 + 72);
      if (v54 == *(char **)(v10 + 128))
      {
        if (v53) {
          int v55 = v52;
        }
        else {
          int v55 = 1;
        }
        if (v55) {
          uint64_t v56 = 0;
        }
        else {
          uint64_t v56 = &v54[(v48 - v49)];
        }
        memmove(v54, v56, v11);
        size_t v57 = (10 - *(_DWORD *)(a1 + 376));
        uint64_t v10 = *(void *)(a1 + 8);
        if (*(_DWORD *)(v10 + 120) < v57)
        {
          *(_DWORD *)(v10 + 120) = v57;
          CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v10 + 128), v57);
          uint64_t v10 = *(void *)(a1 + 8);
        }
        *(_DWORD *)(v10 + 116) = v11;
        *(void *)(v10 + 96) = *(void *)(v10 + 88) + *(unsigned int *)(v10 + 80);
      }
      else
      {
        if (*(_DWORD *)(v10 + 120) < v47)
        {
          *(_DWORD *)(v10 + 120) = v47;
          CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v10 + 128), v47);
          uint64_t v10 = *(void *)(a1 + 8);
        }
        LODWORD(v11) = 0;
        *(_DWORD *)(v10 + 116) = 0;
      }
LABEL_95:
      unsigned int v58 = *(_DWORD *)(a1 + 256) - v11;
      uint64_t v59 = *(void *)(v10 + 88);
      uint64_t v60 = *(void *)(v10 + 96);
      uint64_t v61 = v59 + *(unsigned int *)(v10 + 80);
      if (v61 <= v60 || v60 < v59) {
        unsigned int v63 = 0;
      }
      else {
        unsigned int v63 = v61 - v60;
      }
      if (v58 <= v63) {
        unsigned int v58 = v63;
      }
      v150[0] = v58;
      size_t v64 = v58 + v11;
      if (*(_DWORD *)(v10 + 120) < v64)
      {
        *(_DWORD *)(v10 + 120) = v64;
        CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v10 + 128), v64);
        uint64_t v10 = *(void *)(a1 + 8);
      }
      StreamBuffer::Copy((void *)(v10 + 72), v150, (unsigned __int8 *)(*(void *)(v10 + 128) + *(unsigned int *)(v10 + 116)));
      uint64_t v10 = *(void *)(a1 + 8);
      unsigned int v53 = *(_DWORD *)(v10 + 116) + v150[0];
      *(_DWORD *)(v10 + 116) = v53;
      if (v53 < *(_DWORD *)(a1 + 256))
      {
        uint64_t result = 0;
        int v9 = 314;
        goto LABEL_262;
      }
      uint64_t v48 = *(void *)(a1 + 272);
      uint64_t v65 = *(void *)(v10 + 128);
      *(void *)(v10 + 88) = v48;
      *(void *)(v10 + 96) = v48;
      *(void *)(v10 + 72) = v65;
      *(_DWORD *)(v10 + 80) = v53;
      unsigned int v46 = *(_DWORD *)(a1 + 376);
      uint64_t v50 = v48 + v53;
      uint64_t v49 = v48;
    }
    uint64_t v66 = 0;
    uint64_t v67 = (_WORD *)(a1 + 380);
    if (v48 >= v49 && v48 < v50 && v53) {
      uint64_t v66 = (const void *)(*(void *)(v10 + 72) + (v48 - v49));
    }
    memcpy((void *)(a1 + 380 + v46), v66, 10 - v46);
    if (*v67 == 17481 && *(unsigned char *)(a1 + 382) == 51)
    {
      uint64_t v70 = *(int *)(a1 + 376);
      *(_DWORD *)(a1 + 404) = -(int)v70;
      uint64_t v71 = *(void *)(a1 + 8);
      *(void *)(a1 + 408) = *(void *)(v71 + 88) - v70;
      if (*(char *)(a1 + 416) < 0)
      {
        BOOL v72 = 0;
        uint64_t v73 = *(void *)(v71 + 48);
        uint64_t v74 = *(void *)(v71 + 56) - v73;
        if (v74)
        {
          unint64_t v75 = 0;
          unint64_t v76 = v74 >> 2;
          unsigned int v77 = 1;
          do
          {
            BOOL v19 = *(_DWORD *)(v73 + 4 * v75) == 1768174437;
            BOOL v72 = v19;
            unint64_t v75 = v77++;
          }
          while (!v19 && v76 > v75);
        }
        *(unsigned char *)(a1 + 416) = v72;
        if (v72) {
          goto LABEL_131;
        }
      }
      else
      {
        if (!*(unsigned char *)(a1 + 416)) {
          goto LABEL_133;
        }
LABEL_131:
        v150[0] = 0;
        unint64_t v79 = *(void (**)(void, void, uint64_t, unsigned int *))(v71 + 24);
        if (v79) {
          v79(*(void *)(v71 + 40), *(unsigned int *)(v71 + 8), 1768174437, v150);
        }
      }
LABEL_133:
      unsigned int v80 = ID3Size(0xAu, (const unsigned __int8 *)(a1 + 380), (int *)(a1 + 396));
      *(_DWORD *)(a1 + 392) = v80;
      unsigned int v81 = *(_DWORD *)(a1 + 376);
      unsigned int v82 = v80 - v81;
      if (v80 > v81)
      {
        while (1)
        {
          *(_DWORD *)(a1 + 256) = v82;
          if (!v82) {
            break;
          }
LABEL_249:
          uint64_t v139 = *(void *)(a1 + 8);
          uint64_t v141 = *(void *)(v139 + 88);
          uint64_t v140 = *(void *)(v139 + 96);
          uint64_t v142 = v141 + *(unsigned int *)(v139 + 80);
          BOOL v143 = v140 < v141 || v142 <= v140;
          if (v143 || (unsigned int v144 = v142 - v140, v142 == v140))
          {
            uint64_t result = 0;
            int v9 = 328;
            goto LABEL_262;
          }
          uint64_t v145 = *(unsigned int *)(a1 + 256);
          uint64_t v146 = v140 + v145;
          BOOL v147 = v145 >= v144;
          unsigned int v148 = v145 - v144;
          if (v147) {
            uint64_t v146 = v142;
          }
          if (v147) {
            unsigned int v82 = v148;
          }
          else {
            unsigned int v82 = 0;
          }
          *(void *)(v139 + 96) = v146;
        }
      }
      goto LABEL_156;
    }
    if (*v67 == 16724 && *(unsigned char *)(a1 + 382) == 71) {
      goto LABEL_133;
    }
LABEL_156:
    *(_DWORD *)(a1 + 376) = 0;
    *(unsigned char *)(a1 + 373) = 0;
LABEL_157:
    *(_DWORD *)(a1 + 348) = 0;
    uint64_t v95 = *(void *)(a1 + 8);
    uint64_t v96 = *(void *)(v95 + 88);
    uint64_t v97 = *(void *)(v95 + 96);
    uint64_t v98 = v96 + *(unsigned int *)(v95 + 80);
    BOOL v99 = v97 < v96 || v98 <= v97;
    int v100 = v99;
    if (v99 || v98 == v97) {
      unsigned int v101 = 0;
    }
    else {
      unsigned int v101 = (const void *)(*(void *)(v95 + 72) + (v97 - v96));
    }
    UInt32 v102 = 0;
    int v103 = 0;
    if (v100) {
      int v104 = *(_DWORD *)(v95 + 80);
    }
    else {
      int v104 = v97 - v96;
    }
    if (v100) {
      int v105 = 0;
    }
    else {
      int v105 = v98 - v97;
    }
    uint64_t v149 = 0;
    if (*(unsigned char *)(a1 + 332)) {
      char v106 = 0;
    }
    else {
      char v106 = 3;
    }
    *(unsigned char *)(a1 + 344) = 0;
    *(_DWORD *)(a1 + 400) = 0;
    while (ADTSAudioStream::ScanForSyncWord(a1, v105, (uint64_t)v101, (_DWORD *)&v149 + 1, (uint64_t)v150, 0, v106, &v149))
    {
      int v107 = *(_DWORD *)(a1 + 348);
      UInt32 v102 = HIDWORD(v149);
      if (!v107) {
        int v103 = HIDWORD(v149);
      }
      int v108 = (unsigned __int16)size;
      if (v105 - HIDWORD(v149) >= (unsigned __int16)size)
      {
        *(_DWORD *)(a1 + 348) = v107 + 1;
        UInt32 v109 = v102 + v108;
        UInt32 v102 = v109;
      }
      else
      {
        *(unsigned char *)(a1 + 344) = 1;
        *(_DWORD *)(a1 + 336) = v102 + v104;
        *(_DWORD *)(a1 + 340) = v108;
        UInt32 v109 = v102 + v108;
      }
      HIDWORD(v149) = v109;
      if (*(unsigned char *)(a1 + 332))
      {
        *(unsigned char *)(a1 + 332) = 0;
        char v106 = 3;
      }
    }
    *(_DWORD *)(a1 + 400) = v149;
    unsigned int v110 = *(_DWORD *)(a1 + 348);
    if (v110)
    {
      if (*(_DWORD *)(a1 + 200) < v110)
      {
        uint64_t v111 = (1 << -__clz(v110 - 1));
        *(_DWORD *)(a1 + 200) = v111;
        CADeprecated::CAAutoFree<AudioStreamPacketDescription>::reallocItems((void **)(a1 + 192), v111);
      }
      unsigned int v112 = 0;
      HIDWORD(v149) = v103;
      while (ADTSAudioStream::ScanForSyncWord(a1, v105, (uint64_t)v101, (_DWORD *)&v149 + 1, (uint64_t)v150, 0, 1, &v149))
      {
        int v113 = HIDWORD(v149);
        int v114 = (unsigned __int16)size;
        if (v105 - HIDWORD(v149) >= (unsigned __int16)size)
        {
          int v115 = *(_DWORD *)(a1 + 352);
          uint64_t v116 = *(void *)(a1 + 192) + 16 * v112;
          *(void *)uint64_t v116 = (v115 + HIDWORD(v149));
          *(_DWORD *)(v116 + 8) = 0;
          *(_DWORD *)(v116 + 12) = v114 - v115;
        }
        HIDWORD(v149) = v113 + v114;
        ++v112;
      }
      AudioFileStreamWrapper::CallPacketsProc(*(AudioFileStreamWrapper **)(a1 + 8), v102, *(_DWORD *)(a1 + 348), v101, *(AudioStreamPacketDescription **)(a1 + 192), 1);
      *(void *)(a1 + 184) += *(unsigned int *)(a1 + 348);
    }
    uint64_t v117 = *(void *)(a1 + 8);
    uint64_t v118 = *(void *)(v117 + 96) + v102;
    *(void *)(v117 + 96) = v118;
    if (*(unsigned char *)(a1 + 344))
    {
      size_t v3 = *(unsigned int *)(a1 + 340);
      if (*(_DWORD *)(a1 + 284) < v3)
      {
        *(_DWORD *)(a1 + 284) = v3;
        CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)(a1 + 288), v3, 0);
        LODWORD(v3) = *(_DWORD *)(a1 + 340);
      }
      *(_DWORD *)(a1 + 256) = v3;
      BOOL v4 = *(unsigned __int8 **)(a1 + 288);
      *(void *)(a1 + 264) = v4;
      goto LABEL_198;
    }
    unsigned int v125 = 0;
    uint64_t v126 = *(void *)(v117 + 88);
    uint64_t v127 = v126 + *(unsigned int *)(v117 + 80);
    BOOL v129 = v118 < v126 || v127 <= v118;
    unsigned int v130 = v127 - v118;
    if (v129) {
      size_t v131 = 0;
    }
    else {
      size_t v131 = v130;
    }
    if (!v129 && v130) {
      unsigned int v125 = (unsigned __int8 *)(*(void *)(v117 + 72) + (v118 - v126));
    }
    if (!v131) {
      goto LABEL_220;
    }
    if (v131 == 1)
    {
      BOOL v132 = *v125 == 255;
      *(unsigned char *)(a1 + 356) = v132;
      int v133 = *v125;
      BOOL v134 = v133 == 73 || v133 == 84;
      goto LABEL_229;
    }
    if (v131 <= *(_DWORD *)(a1 + 352) - 1)
    {
      BOOL v132 = 0;
      if (*v125 == 255) {
        BOOL v132 = v125[1] > 0xEFu;
      }
      *(unsigned char *)(a1 + 356) = v132;
    }
    else
    {
LABEL_220:
      BOOL v132 = 0;
      *(unsigned char *)(a1 + 356) = 0;
    }
    if (v131 == 2)
    {
      int v135 = *v125;
      int v136 = 68;
      if (v135 != 73)
      {
        int v137 = 0;
        if (v135 != 84) {
          goto LABEL_232;
        }
        int v136 = 65;
      }
      BOOL v134 = v125[1] == v136;
      goto LABEL_229;
    }
    if ((v131 - 3) <= 6)
    {
      int v138 = *v125;
      if (v138 != 84)
      {
        int v137 = 0;
        if (v138 == 73)
        {
          if (v125[1] != 68 || (int v137 = 1, v125[2] != 51)) {
            int v137 = 0;
          }
        }
LABEL_232:
        *(unsigned char *)(a1 + 373) = v137;
        if (!v132) {
          goto LABEL_234;
        }
LABEL_233:
        *(_DWORD *)(a1 + 360) = v131;
        bzero((void *)(a1 + 364), *(unsigned int *)(a1 + 352));
        memcpy((void *)(a1 + 364), v125, v131);
        int v137 = *(unsigned __int8 *)(a1 + 373);
        goto LABEL_234;
      }
      int v137 = 0;
      if (v125[1] != 65) {
        goto LABEL_232;
      }
      BOOL v134 = v125[2] == 71;
LABEL_229:
      int v137 = v134;
      goto LABEL_232;
    }
    int v137 = 0;
    *(unsigned char *)(a1 + 373) = 0;
    if (v132) {
      goto LABEL_233;
    }
LABEL_234:
    if (v137)
    {
      *(_DWORD *)(a1 + 376) = v131;
      *(_WORD *)(a1 + 388) = 0;
      *(void *)(a1 + 380) = 0;
      memcpy((void *)(a1 + 380), v125, v131);
    }
    *(void *)(v117 + 96) = *(void *)(v117 + 88) + *(unsigned int *)(v117 + 80);
  }
  *(_DWORD *)(a1 + 256) = v14;
LABEL_140:
  while (1)
  {
    uint64_t v83 = *(void *)(a1 + 8);
    uint64_t v85 = *(void *)(v83 + 88);
    uint64_t v84 = *(void *)(v83 + 96);
    uint64_t v86 = v85 + *(unsigned int *)(v83 + 80);
    unsigned int v87 = v86 - v84;
    BOOL v88 = v84 < v85 || v86 <= v84;
    if (v88 || v86 == v84) {
      break;
    }
    uint64_t v90 = *(unsigned int *)(a1 + 256);
    uint64_t v91 = v84 + v90;
    BOOL v92 = v90 >= v87;
    int v93 = v90 - v87;
    if (v92) {
      uint64_t v91 = v86;
    }
    if (v92) {
      int v94 = v93;
    }
    else {
      int v94 = 0;
    }
    *(void *)(v83 + 96) = v91;
    *(_DWORD *)(a1 + 256) = v94;
    if (!v94)
    {
      *(_DWORD *)(a1 + 400) = 0;
      goto LABEL_22;
    }
  }
  uint64_t result = 0;
  int v9 = 276;
LABEL_262:
  *(_DWORD *)(a1 + 236) = v9;
  return result;
}

BOOL ADTSAudioStream::ParseADTSPacket(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4, int a5)
{
  if (a2 <= 6) {
    return 0;
  }
  uint64_t v23 = v5;
  uint64_t v24 = v6;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(void *)(a4 + 48) = 0;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_DWORD *)(a4 + 8) = 1633772320;
  *(_DWORD *)(a4 + 20) = 1024;
  *(void *)&long long v21 = a3;
  *((void *)&v21 + 1) = 8 * a2;
  long long v22 = a3;
  if ((unsigned __int16)CABitStreamReader::ReadBits((CABitStreamReader *)&v21, 0xCu) != 4095) {
    return 0;
  }
  *(unsigned char *)(a4 + 46) = CABitStreamReader::ReadBits((CABitStreamReader *)&v21, 1u);
  char Bits = CABitStreamReader::ReadBits((CABitStreamReader *)&v21, 2u);
  *(unsigned char *)(a4 + 47) = Bits;
  if (Bits) {
    return 0;
  }
  char v12 = CABitStreamReader::ReadBits((CABitStreamReader *)&v21, 1u);
  *(unsigned char *)(a4 + 48) = v12;
  unsigned __int8 v13 = CABitStreamReader::ReadBits((CABitStreamReader *)&v21, 2u);
  *(unsigned char *)(a4 + 49) = v13;
  unsigned __int8 v14 = CABitStreamReader::ReadBits((CABitStreamReader *)&v21, 4u);
  *(unsigned char *)(a4 + 51) = v14;
  *(double *)a4 = gAACSampleRates[v14];
  *(unsigned char *)(a4 + 50) = CABitStreamReader::ReadBits((CABitStreamReader *)&v21, 1u);
  unsigned __int8 v15 = CABitStreamReader::ReadBits((CABitStreamReader *)&v21, 3u);
  *(unsigned char *)(a4 + 53) = v15;
  *(unsigned char *)(a4 + 52) = CABitStreamReader::ReadBits((CABitStreamReader *)&v21, 2u);
  CABitStreamReader::ReadBits((CABitStreamReader *)&v21, 2u);
  unsigned __int16 v16 = CABitStreamReader::ReadBits((CABitStreamReader *)&v21, 0xDu);
  *(_WORD *)(a4 + 44) = v16;
  if (v16 < 7u) {
    return 0;
  }
  CABitStreamReader::ReadBits((CABitStreamReader *)&v21, 0xBu);
  if (CABitStreamReader::ReadBits((CABitStreamReader *)&v21, 2u)) {
    return 0;
  }
  int v17 = v13;
  if (v15)
  {
    if (v15 == 7) {
      int v18 = 8;
    }
    else {
      int v18 = v15;
    }
    *(_DWORD *)(a4 + 28) = v18;
    *(_DWORD *)(a4 + 40) = gAACChannelConfigToLayoutTag[v15];
  }
  else if (a5)
  {
    if (!v12) {
      CABitStreamReader::ReadBits((CABitStreamReader *)&v21, 0x10u);
    }
    CABitStreamReader::ReadBits((CABitStreamReader *)&v21, BYTE12(v22) & 7);
    v20[0] = v21;
    v20[1] = v22;
    ParseADTSChannelConfig((CABitStreamReader *)v20, (int *)(a4 + 28), (int *)(a4 + 40));
    int v17 = *(unsigned __int8 *)(a4 + 49);
  }
  if (!v17)
  {
    int v17 = 1;
    *(unsigned char *)(a4 + 49) = 1;
  }
  int v19 = *(char *)(a1 + 417);
  if (v19 == -1)
  {
    *(unsigned char *)(a1 + 417) = *(unsigned char *)(a4 + 46);
    *(_WORD *)(a1 + 418) = *(_WORD *)(a4 + 47);
    *(unsigned char *)(a1 + 420) = v17;
    *(_DWORD *)(a1 + 421) = *(_DWORD *)(a4 + 50);
    return 1;
  }
  return v19 == *(unsigned __int8 *)(a4 + 46)
      && *(char *)(a1 + 418) == *(unsigned __int8 *)(a4 + 47)
      && *(char *)(a1 + 420) == v17
      && *(char *)(a1 + 419) == *(unsigned __int8 *)(a4 + 48)
      && *(char *)(a1 + 421) == *(unsigned __int8 *)(a4 + 50)
      && *(char *)(a1 + 422) == *(unsigned __int8 *)(a4 + 51)
      && *(char *)(a1 + 423) == *(unsigned __int8 *)(a4 + 52)
      && *(char *)(a1 + 424) == *(unsigned __int8 *)(a4 + 53);
}

uint64_t ADTSAudioStream::ScanForSyncWord(uint64_t a1, int a2, uint64_t a3, _DWORD *a4, uint64_t a5, int a6, char a7, _DWORD *a8)
{
  int v10 = *a4;
  *a8 = 0;
  if (v10 > a2 - *(_DWORD *)(a1 + 352))
  {
    uint64_t result = 0;
    int v10 = a2;
    goto LABEL_42;
  }
  std::string v33 = a4;
  while (1)
  {
    unsigned __int16 v16 = (unsigned __int8 *)(a3 + v10);
    if (*v16 == 255 && v16[1] >= 0xF0u)
    {
      if (ADTSAudioStream::ParseADTSPacket(a1, a2 - v10, a3 + v10, a5, a6))
      {
        uint64_t result = 1;
        goto LABEL_41;
      }
      goto LABEL_38;
    }
    if (a7) {
      break;
    }
LABEL_38:
    BOOL v27 = v10++ < a2 - *(_DWORD *)(a1 + 352);
    if (!v27)
    {
LABEL_39:
      uint64_t result = 0;
      goto LABEL_40;
    }
  }
  BOOL v17 = *(_WORD *)v16 == 17481 && v16[2] == 51;
  if (v17)
  {
    unsigned int v19 = a2 - v10;
    if ((a2 - v10) < 0xA) {
      goto LABEL_39;
    }
    uint64_t v20 = *(void *)(a1 + 8);
    int v21 = v16 - *(void *)(v20 + 72);
    *(_DWORD *)(a1 + 404) = v21;
    *(void *)(a1 + 408) = *(void *)(v20 + 88) + v21;
    if ((a7 & 2) != 0)
    {
      LODWORD(v22) = *(char *)(a1 + 416);
      if ((v22 & 0x80000000) != 0)
      {
        uint64_t v23 = *(void *)(v20 + 48);
        uint64_t v22 = *(void *)(v20 + 56) - v23;
        if (v22)
        {
          unint64_t v24 = 0;
          unint64_t v25 = v22 >> 2;
          unsigned int v26 = 1;
          do
          {
            BOOL v17 = *(_DWORD *)(v23 + 4 * v24) == 1768174437;
            LODWORD(v22) = v17;
            unint64_t v24 = v26++;
            BOOL v27 = !v17 && v25 > v24;
          }
          while (v27);
        }
        *(unsigned char *)(a1 + 416) = v22;
      }
      if (v22)
      {
        int v35 = 0;
        uint64_t v28 = *(void (**)(void, void, uint64_t, int *))(v20 + 24);
        if (v28) {
          v28(*(void *)(v20 + 40), *(unsigned int *)(v20 + 8), 1768174437, &v35);
        }
      }
    }
  }
  else
  {
    if (*(_WORD *)v16 != 16724 || v16[2] != 71) {
      goto LABEL_38;
    }
    unsigned int v19 = a2 - v10;
    if ((a2 - v10) < 0xA) {
      goto LABEL_39;
    }
  }
  unsigned int v29 = ID3Size(0xAu, (const unsigned __int8 *)(a3 + v10), &v34);
  if (!v29)
  {
    int v31 = 2;
    goto LABEL_37;
  }
  unsigned int v30 = v29;
  if (v19 >= v29)
  {
    int v31 = v29 - 1;
LABEL_37:
    v10 += v31;
    goto LABEL_38;
  }
  uint64_t result = 0;
  *a8 = v10 - a2 + v30;
LABEL_40:
  int v10 = a2;
LABEL_41:
  a4 = v33;
LABEL_42:
  *a4 = v10;
  return result;
}

uint64_t ADTSAudioStream::ParseHeader(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 236);
  if (v4 <= 77)
  {
    if (v4 == -1) {
      return 0;
    }
    if (!v4) {
      goto LABEL_10;
    }
    goto LABEL_7;
  }
  if (v4 == 95)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    LODWORD(v7) = *(_DWORD *)(v6 + 116);
    goto LABEL_50;
  }
  if (v4 != 78)
  {
LABEL_7:
    uint64_t v5 = 0;
    goto LABEL_93;
  }
  while (1)
  {
LABEL_10:
    uint64_t v8 = *(void *)(a1 + 8);
    uint64_t v10 = *(void *)(v8 + 88);
    uint64_t v9 = *(void *)(v8 + 96);
    uint64_t v11 = v10 + *(unsigned int *)(v8 + 80);
    BOOL v12 = v9 < v10 || v11 <= v9;
    if (v12 || v11 == v9)
    {
      uint64_t v5 = 0;
      int v55 = 78;
      goto LABEL_94;
    }
    uint64_t v13 = 0;
    *(unsigned char *)(a1 + 425) = 0;
    *(_OWORD *)(a1 + 428) = 0u;
    *(_OWORD *)(a1 + 444) = 0u;
    *(_OWORD *)(a1 + 460) = 0u;
    *(_OWORD *)(a1 + 472) = 0u;
    uint64_t v14 = *(void *)(v8 + 88);
    uint64_t v15 = *(void *)(v8 + 96);
    uint64_t v16 = v14 + *(unsigned int *)(v8 + 80);
    BOOL v18 = v15 < v14 || v16 <= v15;
    int v19 = v16 - v15;
    if (v18) {
      int v20 = 0;
    }
    else {
      int v20 = v19;
    }
    if (!v18 && v19) {
      uint64_t v13 = *(void *)(v8 + 72) + (v15 - v14);
    }
    int v21 = ADTSAudioStream::ScanForSyncWord(a1, v20, v13, (_DWORD *)(a1 + 428), a1 + 432, 1, 0, &outPropertyData);
    *(unsigned char *)(a1 + 425) = v21;
    size_t v22 = *(unsigned __int16 *)(a1 + 476);
    *(_DWORD *)(a1 + 256) = v22;
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v23 = *(unsigned int *)(v6 + 80);
    uint64_t v25 = *(void *)(v6 + 88);
    uint64_t v24 = *(void *)(v6 + 96);
    uint64_t v26 = v25 + v23;
    BOOL v28 = v24 < v25 || v26 <= v24;
    unsigned int v29 = v26 - v24;
    if (v28) {
      size_t v7 = 0;
    }
    else {
      size_t v7 = v29;
    }
    if (v7 < v22)
    {
      *(void *)(a1 + 272) = v24;
      unsigned int v30 = *(char **)(v6 + 72);
      if (v30 == *(char **)(v6 + 128))
      {
        if (v29) {
          int v31 = v28;
        }
        else {
          int v31 = 1;
        }
        if (v31) {
          uint64_t v32 = 0;
        }
        else {
          uint64_t v32 = &v30[(v24 - v25)];
        }
        memmove(v30, v32, v7);
        size_t v33 = *(unsigned __int16 *)(a1 + 476);
        uint64_t v6 = *(void *)(a1 + 8);
        if (*(_DWORD *)(v6 + 120) < v33)
        {
          *(_DWORD *)(v6 + 120) = v33;
          CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v6 + 128), v33);
          uint64_t v6 = *(void *)(a1 + 8);
        }
        *(_DWORD *)(v6 + 116) = v7;
        *(void *)(v6 + 96) = *(void *)(v6 + 88) + *(unsigned int *)(v6 + 80);
      }
      else
      {
        if (*(_DWORD *)(v6 + 120) < v22)
        {
          *(_DWORD *)(v6 + 120) = v22;
          CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v6 + 128), v22);
          uint64_t v6 = *(void *)(a1 + 8);
        }
        LODWORD(v7) = 0;
        *(_DWORD *)(v6 + 116) = 0;
      }
LABEL_50:
      unsigned int v34 = *(_DWORD *)(a1 + 256) - v7;
      uint64_t v35 = *(void *)(v6 + 88);
      uint64_t v36 = *(void *)(v6 + 96);
      uint64_t v37 = v35 + *(unsigned int *)(v6 + 80);
      if (v37 <= v36 || v36 < v35) {
        unsigned int v39 = 0;
      }
      else {
        unsigned int v39 = v37 - v36;
      }
      if (v34 <= v39) {
        unsigned int v34 = v39;
      }
      LODWORD(outPropertyData) = v34;
      size_t v40 = v34 + v7;
      if (*(_DWORD *)(v6 + 120) < v40)
      {
        *(_DWORD *)(v6 + 120) = v40;
        CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v6 + 128), v40);
        uint64_t v6 = *(void *)(a1 + 8);
      }
      StreamBuffer::Copy((void *)(v6 + 72), (unsigned int *)&outPropertyData, (unsigned __int8 *)(*(void *)(v6 + 128) + *(unsigned int *)(v6 + 116)));
      uint64_t v6 = *(void *)(a1 + 8);
      LODWORD(v23) = *(_DWORD *)(v6 + 116) + outPropertyData;
      *(_DWORD *)(v6 + 116) = v23;
      if (v23 < *(_DWORD *)(a1 + 256))
      {
        uint64_t v5 = 0;
        int v55 = 95;
        goto LABEL_94;
      }
      uint64_t v24 = *(void *)(a1 + 272);
      uint64_t v41 = *(void *)(v6 + 128);
      *(void *)(v6 + 88) = v24;
      *(void *)(v6 + 96) = v24;
      *(void *)(v6 + 72) = v41;
      *(_DWORD *)(v6 + 80) = v23;
      int v21 = *(unsigned __int8 *)(a1 + 425);
      uint64_t v25 = v24;
    }
    if (v21) {
      break;
    }
    *(void *)(v6 + 96) = v25 + v23;
  }
  int v42 = 0;
  uint64_t v43 = v25 + v23;
  BOOL v44 = v24 < v25 || v43 <= v24;
  int v45 = v44;
  unsigned int v46 = v43 - v24;
  if (!v44 && v46) {
    int v42 = (const unsigned __int8 *)(*(void *)(v6 + 72) + (v24 - v25));
  }
  uint64_t outPropertyData = 0;
  LOWORD(v87) = 0;
  HIDWORD(v87) = 0;
  if (v45) {
    unsigned int v47 = 0;
  }
  else {
    unsigned int v47 = v46;
  }
  if (!ADTSHeader::Deserialize((ADTSHeader *)&outPropertyData, v42, v47))
  {
    if ((outPropertyData & 0x1000) != 0) {
      int v48 = 7;
    }
    else {
      int v48 = 9;
    }
    *(_DWORD *)(a1 + 352) = v48;
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 56))(a1, a1 + 432);
  uint64_t v49 = *(void *)(a1 + 8);
  uint64_t v50 = *(void *)(v49 + 96) + *(unsigned int *)(a1 + 428);
  *(void *)(a1 + 104) = v50;
  *(void *)(v49 + 96) = v50;
  *(_DWORD *)(a1 + 128) = 0;
  uint64_t v51 = *(void *)(v49 + 88);
  uint64_t v52 = v51 + *(unsigned int *)(v49 + 80);
  if (v52 <= v50 || v50 < v51) {
    unsigned int v54 = 0;
  }
  else {
    unsigned int v54 = v52 - v50;
  }
  if (v54 < *(unsigned __int16 *)(a1 + 476))
  {
    uint64_t v5 = 2003334207;
    goto LABEL_93;
  }
  uint64_t v90 = 0;
  uint64_t v56 = OpenCodecComponent(0x61616320u, &v90, 0x61646563u);
  if (v56)
  {
    uint64_t v5 = v56;
    goto LABEL_93;
  }
  UInt32 ioPropertyDataSize = 32;
  unsigned int v58 = &v42[*(unsigned int *)(a1 + 428)];
  __dst[0] = 0;
  if (v58[2] > 0x3Fu)
  {
    uint64_t v59 = 0;
  }
  else
  {
    CADeprecated::CAAutoFree<unsigned char>::allocBytes(__dst, *(unsigned __int16 *)(a1 + 476), 0);
    uint64_t v59 = (unsigned __int8 *)__dst[0];
    memcpy(__dst[0], &v42[*(unsigned int *)(a1 + 428)], *(unsigned __int16 *)(a1 + 476));
    v59[2] |= 0x40u;
    unsigned int v58 = v59;
  }
  LODWORD(outPropertyData) = *(unsigned __int16 *)(a1 + 476);
  unsigned int v87 = v58;
  LODWORD(size) = 0;
  uint64_t v89 = 0;
  OSStatus Property = AudioCodecGetProperty(v90, 0x6D327364u, &ioPropertyDataSize, &outPropertyData);
  if (Property)
  {
    AudioComponentInstanceDispose(v90);
    int v61 = 15;
  }
  else
  {
    int v61 = 0;
  }
  if (v59) {
    free(v59);
  }
  if (Property)
  {
    int v62 = 0;
    goto LABEL_106;
  }
  size_t v63 = size;
  if (size)
  {
    *(_DWORD *)(a1 + 128) = size;
    CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)(a1 + 120), v63, 0);
    uint64_t v89 = *(void *)(a1 + 120);
    if (AudioCodecGetProperty(v90, 0x6D327364u, &ioPropertyDataSize, &outPropertyData))
    {
      *(_DWORD *)(a1 + 128) = 0;
      size_t v64 = *(void **)(a1 + 120);
      if (v64)
      {
        free(v64);
        *(void *)(a1 + 120) = 0;
      }
      int v62 = 0;
LABEL_113:
      uint64_t v65 = *(void *)(a1 + 8);
      LODWORD(outPropertyData) = 1;
      if (!*(unsigned char *)(v65 + 104))
      {
        *(unsigned char *)(v65 + 104) = 1;
        uint64_t v66 = *(void (**)(void, void, uint64_t, uint64_t *))(v65 + 24);
        if (v66)
        {
          v66(*(void *)(v65 + 40), *(unsigned int *)(v65 + 8), 1717988724, &outPropertyData);
          uint64_t v65 = *(void *)(a1 + 8);
        }
      }
      if (*(_DWORD *)(a1 + 128))
      {
        LODWORD(outPropertyData) = 1;
        *(unsigned char *)(v65 + 108) = 1;
        uint64_t v67 = *(void (**)(void, void, uint64_t, uint64_t *))(v65 + 24);
        if (v67)
        {
          v67(*(void *)(v65 + 40), *(unsigned int *)(v65 + 8), 1835493731, &outPropertyData);
          uint64_t v65 = *(void *)(a1 + 8);
        }
      }
      if (v62)
      {
        LODWORD(outPropertyData) = 1;
        *(unsigned char *)(v65 + 108) = 1;
        int v68 = *(void (**)(void, void, uint64_t, uint64_t *))(v65 + 24);
        if (v68)
        {
          v68(*(void *)(v65 + 40), *(unsigned int *)(v65 + 8), 1718383476, &outPropertyData);
          uint64_t v65 = *(void *)(a1 + 8);
        }
      }
      LODWORD(outPropertyData) = 1;
      if (!*(unsigned char *)(v65 + 105))
      {
        *(unsigned char *)(v65 + 105) = 1;
        unint64_t v69 = *(void (**)(void, void, uint64_t, uint64_t *))(v65 + 24);
        if (v69)
        {
          v69(*(void *)(v65 + 40), *(unsigned int *)(v65 + 8), 1684434292, &outPropertyData);
          uint64_t v65 = *(void *)(a1 + 8);
        }
      }
      LODWORD(outPropertyData) = 1;
      uint64_t v70 = *(void (**)(void, void, uint64_t, uint64_t *))(v65 + 24);
      if (v70)
      {
        v70(*(void *)(v65 + 40), *(unsigned int *)(v65 + 8), 1685022310, &outPropertyData);
        uint64_t v65 = *(void *)(a1 + 8);
      }
      LODWORD(outPropertyData) = 1;
      if (!*(_DWORD *)(v65 + 112))
      {
        *(_DWORD *)(v65 + 112) = 1;
        uint64_t v71 = *(void (**)(void, void, uint64_t, uint64_t *))(v65 + 24);
        if (v71) {
          v71(*(void *)(v65 + 40), *(unsigned int *)(v65 + 8), 1919247481, &outPropertyData);
        }
      }
      uint64_t v72 = 0;
      *(void *)a2 = a1;
      *(void *)(a2 + 8) = AudioFileStreamObject::GeneratePackets;
      *(void *)(a2 + 16) = 0;
      uint64_t v73 = *(void *)(a1 + 8);
      uint64_t v74 = *(void *)(v73 + 88);
      uint64_t v75 = *(void *)(v73 + 96);
      uint64_t v76 = v74 + *(unsigned int *)(v73 + 80);
      BOOL v77 = v75 < v74 || v76 <= v75;
      int v78 = v77;
      int v79 = v76 - v75;
      if (!v77 && v79) {
        uint64_t v72 = *(void *)(v73 + 72) + (v75 - v74);
      }
      uint64_t v5 = 0;
      *(void *)(a2 + 32) = v72;
      if (v78) {
        int v80 = 0;
      }
      else {
        int v80 = v79;
      }
      *(_DWORD *)(a2 + 24) = v80;
      return v5;
    }
    Boolean outWritable = 0;
    int v62 = 0;
    if (AudioCodecGetPropertyInfo(v90, 0x6163666Cu, &ioPropertyDataSize, &outWritable) || ioPropertyDataSize < 0x30) {
      goto LABEL_153;
    }
    std::vector<unsigned char>::vector(__dst, ioPropertyDataSize);
    unsigned int v81 = __dst[0];
    *(_DWORD *)__dst[0] = *(_DWORD *)(a1 + 128);
    v81[1] = *(void *)(a1 + 120);
    OSStatus v82 = AudioCodecGetProperty(v90, 0x6163666Cu, &ioPropertyDataSize, v81);
    if (v82)
    {
      AudioComponentInstanceDispose(v90);
      int v62 = 0;
      int v61 = 15;
    }
    else
    {
      (*(void (**)(uint64_t, void, void *))(*(void *)a1 + 64))(a1, ioPropertyDataSize, __dst[0]);
      int v61 = 0;
      int v62 = 1;
    }
    if (__dst[0])
    {
      __dst[1] = __dst[0];
      operator delete(__dst[0]);
    }
    if (!v82)
    {
LABEL_153:
      AudioComponentInstanceDispose(v90);
      if (size)
      {
        int v61 = 0;
        *(_DWORD *)(a1 + 128) = size;
      }
      else
      {
        *(_DWORD *)(a1 + 236) = -1;
        int v61 = 1;
      }
    }
LABEL_106:
    if (v61 == 1) {
      return 2003334207;
    }
    goto LABEL_113;
  }
  uint64_t v5 = 2003334207;
  AudioComponentInstanceDispose(v90);
LABEL_93:
  int v55 = -1;
LABEL_94:
  *(_DWORD *)(a1 + 236) = v55;
  return v5;
}

void sub_1900499EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ADTSAudioStream::GetProperty(ADTSAudioStream *this, int a2, unsigned int *a3, void *__dst)
{
  if (a2 > 1768174432)
  {
    if (a2 == 1768174433)
    {
      uint64_t Property = 561211770;
      if (a3 && *a3 == 8)
      {
        uint64_t Property = 0;
        *__dst = *((void *)this + 51);
      }
      return Property;
    }
    if (a2 != 1835493731)
    {
      if (a2 != 1768174437) {
        goto LABEL_34;
      }
      uint64_t Property = 561211770;
      if (!a3 || *a3 != 4) {
        return Property;
      }
      uint64_t Property = 0;
      int v11 = *((_DWORD *)this + 101);
      goto LABEL_21;
    }
    uint64_t v18 = *((void *)this + 1);
    int v19 = *(const void **)(v18 + 136);
    if (v19)
    {
      AudioFormatGetProperty(0x78686D63u, 0xCu, v19, a3, __dst);
      return 0;
    }
    if (*((unsigned char *)this + 177)) {
      return 1685348671;
    }
    if (*(_DWORD *)(v18 + 112)) {
      uint64_t Property = 1970170687;
    }
    else {
      uint64_t Property = 1836020325;
    }
    if (!*(unsigned char *)(v18 + 108)) {
      return Property;
    }
    size_t v21 = *a3;
    if (v21 != *((_DWORD *)this + 32)) {
      return 561211770;
    }
    size_t v22 = (const void *)*((void *)this + 15);
LABEL_79:
    memcpy(__dst, v22, v21);
    return 0;
  }
  switch(a2)
  {
    case 1668112752:
      uint64_t v12 = *((void *)this + 1);
      uint64_t v13 = *(const void **)(v12 + 136);
      if (v13)
      {
        if (*a3 != *((_DWORD *)this + 36)) {
          return 561211770;
        }
        ioPropertyDataSize[0] = 32;
        uint64_t Property = AudioFormatGetProperty(0x7868636Cu, 0xCu, v13, ioPropertyDataSize, &outPropertyData);
        if (Property) {
          return Property;
        }
        int v11 = **(_DWORD **)(*((void *)this + 1) + 136);
LABEL_21:
        *(_DWORD *)__dst = v11;
        return Property;
      }
      if (*((unsigned char *)this + 177)) {
        return 1685348671;
      }
      if (*(_DWORD *)(v12 + 112)) {
        uint64_t Property = 1970170687;
      }
      else {
        uint64_t Property = 1836020325;
      }
      if (!*(unsigned char *)(v12 + 109)) {
        return Property;
      }
      size_t v21 = *a3;
      if (v21 != *((_DWORD *)this + 36)) {
        return 561211770;
      }
      size_t v22 = (const void *)*((void *)this + 17);
      goto LABEL_79;
    case 1684434292:
      uint64_t v14 = *((void *)this + 1);
      uint64_t v15 = *(const void **)(v14 + 136);
      if (v15)
      {
        uint64_t v38 = 0;
        long long outPropertyData = 0u;
        long long v37 = 0u;
        uint64_t v16 = AudioFormatGetProperty(0x78686173u, 0xCu, v15, a3, &outPropertyData);
        if (*a3 == 40)
        {
          uint64_t Property = v16;
          if (!v16)
          {
            long long v17 = v37;
            *(_OWORD *)__dst = outPropertyData;
            *((_OWORD *)__dst + 1) = v17;
            __dst[4] = v38;
          }
          return Property;
        }
        return 561211770;
      }
      if (!*((unsigned char *)this + 177))
      {
        if (*(_DWORD *)(v14 + 112)) {
          uint64_t Property = 1970170687;
        }
        else {
          uint64_t Property = 1836020325;
        }
        if (!*(unsigned char *)(v14 + 105)) {
          return Property;
        }
        if (*a3 != 40) {
          return 561211770;
        }
        uint64_t Property = 0;
        long long v23 = *(_OWORD *)((char *)this + 24);
        long long v24 = *(_OWORD *)((char *)this + 40);
        __dst[4] = *((void *)this + 7);
        *(_OWORD *)__dst = v23;
        *((_OWORD *)__dst + 1) = v24;
        return Property;
      }
      return 1685348671;
    case 1718383476:
      size_t v7 = *(unsigned int **)(*((void *)this + 1) + 136);
      if (v7)
      {
        uint64_t Property = 1836020325;
        int v9 = bswap32(*v7);
        if (v9 <= 1902207330)
        {
          if (v9 <= 1885430114)
          {
            if (v9 != 1633772320)
            {
              if (v9 != 1633772392)
              {
                int v10 = 1633772400;
                goto LABEL_60;
              }
LABEL_67:
              UInt32 outSize = 2;
              OSType v25 = 1633772392;
              unsigned int v26 = 96;
LABEL_68:
              if (v26 <= *a3)
              {
                *(void *)UInt32 ioPropertyDataSize = 0;
                uint64_t v27 = OpenCodecComponent(v25, (OpaqueAudioComponentInstance **)ioPropertyDataSize, 0x61646563u);
                if (v27) {
                  return v27;
                }
                UInt32 outPropertyDataSize = 88;
                AudioFormatGetPropertyInfo(0x78686D63u, 0xCu, *(const void **)(*((void *)this + 1) + 136), &outPropertyDataSize);
                BOOL v28 = malloc_type_calloc(1uLL, outPropertyDataSize, 0x4F8856E0uLL);
                AudioFormatGetProperty(0x78686D63u, 0xCu, *(const void **)(*((void *)this + 1) + 136), &outPropertyDataSize, v28);
                Boolean outWritable = 0;
                uint64_t PropertyInfo = AudioCodecGetPropertyInfo(*(AudioCodec *)ioPropertyDataSize, 0x6163666Cu, &outSize, &outWritable);
                if (PropertyInfo)
                {
                  uint64_t Property = PropertyInfo;
                  AudioComponentInstanceDispose(*(AudioComponentInstance *)ioPropertyDataSize);
                }
                else
                {
                  std::vector<unsigned char>::vector(&outPropertyData, outSize);
                  unsigned int v30 = (void *)outPropertyData;
                  *(_DWORD *)long long outPropertyData = outPropertyDataSize;
                  v30[1] = v28;
                  uint64_t Property = AudioCodecGetProperty(*(AudioCodec *)ioPropertyDataSize, 0x6163666Cu, &outSize, v30);
                  if (!Property)
                  {
                    size_t v31 = outSize;
                    *a3 = outSize;
                    memcpy(__dst, (const void *)outPropertyData, v31);
                  }
                  AudioComponentInstanceDispose(*(AudioComponentInstance *)ioPropertyDataSize);
                  if ((void)outPropertyData)
                  {
                    *((void *)&outPropertyData + 1) = outPropertyData;
                    operator delete((void *)outPropertyData);
                  }
                }
                return Property;
              }
              return 561211770;
            }
            goto LABEL_65;
          }
          if (v9 == 1885430115) {
            goto LABEL_65;
          }
          if (v9 == 1885430632) {
            goto LABEL_67;
          }
          int v10 = 1885430640;
LABEL_60:
          if (v9 != v10) {
            return Property;
          }
          goto LABEL_66;
        }
        if (v9 <= 2053202274)
        {
          if (v9 == 1902207331) {
            goto LABEL_65;
          }
          if (v9 == 1902207848) {
            goto LABEL_67;
          }
          int v10 = 1902207856;
          goto LABEL_60;
        }
        switch(v9)
        {
          case 2053202800:
LABEL_66:
            UInt32 outSize = 3;
            OSType v25 = 1633772400;
            unsigned int v26 = 144;
            goto LABEL_68;
          case 2053202792:
            goto LABEL_67;
          case 2053202275:
LABEL_65:
            OSType v25 = 1633772320;
            UInt32 outSize = 1;
            unsigned int v26 = 48;
            goto LABEL_68;
        }
        return Property;
      }
      a2 = 1718383476;
      break;
  }
LABEL_34:
  return AudioFileStreamObject::GetProperty(this, a2, a3, __dst);
}

void sub_190049FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ADTSAudioStream::GetPropertyInfo(ADTSAudioStream *this, int a2, unsigned int *a3, unsigned __int8 *a4)
{
  switch(a2)
  {
    case 1768174433:
      if (!a3) {
        goto LABEL_9;
      }
      unsigned int v6 = 8;
LABEL_8:
      *a3 = v6;
LABEL_9:
      if (a4)
      {
        uint64_t result = 0;
        *a4 = 0;
        return result;
      }
      return 0;
    case 1835493731:
      uint64_t v8 = *((void *)this + 1);
      int v9 = *(const void **)(v8 + 136);
      if (v9)
      {
        UInt32 outPropertyDataSize = 0;
        uint64_t result = AudioFormatGetPropertyInfo(0x78686D63u, 0xCu, v9, &outPropertyDataSize);
        if (!a3 || result) {
          return result;
        }
        UInt32 v10 = outPropertyDataSize;
      }
      else
      {
        if (*((unsigned char *)this + 177)) {
          return 1685348671;
        }
        if (*(_DWORD *)(v8 + 112)) {
          uint64_t result = 1970170687;
        }
        else {
          uint64_t result = 1836020325;
        }
        if (a4)
        {
          *a4 = 0;
          uint64_t v8 = *((void *)this + 1);
        }
        if (!*(unsigned char *)(v8 + 108)) {
          return result;
        }
        if (!a3) {
          return 0;
        }
        uint64_t result = 0;
        UInt32 v10 = *((_DWORD *)this + 32);
      }
      *a3 = v10;
      return result;
    case 1768174437:
      if (!a3) {
        goto LABEL_9;
      }
      unsigned int v6 = 4;
      goto LABEL_8;
  }
  return AudioFileStreamObject::GetPropertyInfo(this, a2, a3, a4);
}

void ADTSAudioStream::~ADTSAudioStream(ADTSAudioStream *this)
{
  AudioFileStreamObject::~AudioFileStreamObject(this);
  JUMPOUT(0x192FC8940);
}

uint64_t DSPGraph::Exception::what(DSPGraph::Exception *this)
{
  uint64_t result = (uint64_t)this + 72;
  if (*((char *)this + 95) < 0) {
    return *(void *)result;
  }
  return result;
}

void DSPGraph::Exception::print(uint64_t a1, void *a2, uint64_t a3, unsigned int a4)
{
}

void sub_19004A3B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void DSPGraph::Exception::print(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void _CAInitDefaultDeferredLog(void)
{
  if (gDefaultDeferredLogOnce != -1) {
    dispatch_once(&gDefaultDeferredLogOnce, &__block_literal_global_4783);
  }
}

void ___Z25_CAInitDefaultDeferredLogv_block_invoke()
{
  v0 = (caulk::deferred_logger *)CADefaultLog();
  caulk::deferred_logger::create_v((uint64_t *)&v4, v0, v1);
  long long v2 = v4;
  long long v4 = 0uLL;
  size_t v3 = (std::__shared_weak_count *)*((void *)&gCADefaultDeferredLog + 1);
  gCADefaultDeferredLog = v2;
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    if (*((void *)&v4 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v4 + 1));
    }
  }
}

BOOL CAShouldEmitRateLimitedRTErrorLog(void)
{
  uint64_t v0 = mach_absolute_time();
  if (v0 <= gLastRateLimitedRTLogHostTime + 24000000) {
    return atomic_fetch_add(gMessageCount, 1u) + 1 < 0x1A;
  }
  gMessageCount[0] = 0;
  gLastRateLimitedRTLogHostTime = v0;
  return 1;
}

void std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  long long v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<unsigned int>>::__clear[abi:ne180100]((uint64_t *)v2);
    size_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::vector<unsigned int>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      unsigned int v6 = *(void **)(v4 - 24);
      v4 -= 24;
      uint64_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

BOOL VBAP::find_duplicate_vertex(VBAP *this, const float *a2, const float *a3, const float *a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  MEMORY[0x1F4188790](this);
  int v9 = (float *)((char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v10 < 2) {
    return 0;
  }
  unsigned int v11 = 2;
  vDSP_Length v12 = 1;
  do
  {
    vDSP_vsmul((const float *)this, 1, (const float *)this + v12, v9, 1, v12);
    vDSP_vsma(a2, 1, &a2[v12], v9, 1, v9, 1, v12);
    vDSP_vsma(a3, 1, &a3[v12], v9, 1, v9, 1, v12);
    HIDWORD(v15) = 0;
    vDSP_maxv(v9, 1, (float *)&v15 + 1, v12);
    BOOL result = *((float *)&v15 + 1) > 1.0;
    vDSP_Length v12 = v11++;
  }
  while (*((float *)&v15 + 1) <= 1.0 && v12 < (unint64_t)a4);
  return result;
}

void *std::vector<double>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<double>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_19004A72C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t VBAP::delaunayTriangulation(size_t a1, void *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v521 = *MEMORY[0x1E4F143B8];
  unint64_t v7 = (uint64_t)(a2[1] - *a2) >> 2;
  unint64_t v8 = (int)(v7 / 3);
  std::vector<double>::vector(v506, v8);
  std::vector<double>::vector(v505, v8);
  std::vector<double>::vector(v504, v8);
  size_t v473 = a1;
  unint64_t v16 = v7 / 3;
  long long v17 = (float64_t *)v506[0];
  uint64_t v18 = v505[0];
  int v19 = v504[0];
  uint64_t __p = (v7 / 3) - 1;
  if ((int)(v7 / 3) >= 1)
  {
    uint64_t v20 = (v7 / 3);
    size_t v21 = (float *)(*a2 + 8);
    size_t v22 = (double *)v506[0];
    long long v23 = v505[0];
    long long v24 = v504[0];
    do
    {
      *v22++ = *(v21 - 2);
      *v23++ = *(v21 - 1);
      float v25 = *v21;
      v21 += 3;
      double v9 = v25;
      *v24++ = v25;
      --v20;
    }
    while (v20);
  }
  if (CDelaunayTriangles3D::check_coplanar(v17, v18, v19, (const double *)(v7 / 3), v9, v10, v11, v12, v13, v14, v15))
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
LABEL_8:
      uint64_t v32 = 4294967246;
      goto LABEL_359;
    }
    LODWORD(buf[0].f64[0]) = 136315906;
    *(void *)((char *)buf[0].f64 + 4) = "VBAP.cpp";
    WORD2(buf[0].f64[1]) = 1024;
    *(_DWORD *)((char *)&buf[0].f64[1] + 6) = 779;
    WORD1(buf[1].f64[0]) = 2080;
    *(void *)((char *)buf[1].f64 + 4) = "delaunayTriangulation";
    WORD2(buf[1].f64[1]) = 1024;
    *(_DWORD *)((char *)&buf[1].f64[1] + 6) = 779;
    size_t v31 = MEMORY[0x1E4F14500];
LABEL_7:
    _os_log_impl(&dword_18FEC0000, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d CADSPUtility:%s:%d: Delaunay Triangulation Error: Convex hull could not be created. Check for overlapping speakers. ", (uint8_t *)buf, 0x22u);
    goto LABEL_8;
  }
  uint64_t v33 = *(void *)(a3 + 8);
  unint64_t v34 = (v33 - *(void *)a3) >> 2;
  int v35 = 2 * v16 - 4;
  unint64_t v478 = v34 / 3;
  uint64_t v480 = v35;
  if (v34 / 3 == v35)
  {
    if (v473 + 224 != a3) {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v473 + 224), *(char **)a3, v33, v34);
    }
    goto LABEL_70;
  }
  uint64_t v36 = (std::vector<int> *)(v473 + 224);
  std::vector<unsigned int>::resize((std::vector<int> *)(v473 + 224), (3 * v35));
  long long v37 = *(void **)(v473 + 224);
  uint64_t v38 = *(void *)(v473 + 232) - (void)v37;
  if (v38 >= 1) {
    bzero(v37, 4 * (((unint64_t)v38 >> 2) - ((unint64_t)v38 > 3)) + 4);
  }
  v501 = (CDelaunayTriangles3D *)(v473 + 176);
  std::__list_imp<ID3FrameInfo>::clear((void *)(v473 + 176));
  size_t v39 = v473 + 200;
  unint64_t v40 = (v7 / 3);
  unint64_t v41 = *(void *)(v473 + 216);
  if (v41 <= v16)
  {
    if (v41 < v40)
    {
      BOOL v44 = operator new(0x18uLL);
      int v45 = v44;
      *BOOL v44 = 0;
      v44[1] = 0;
      *((_DWORD *)v44 + 4) = 0;
      if (v40 + ~v41)
      {
        unint64_t v488 = v40 - v41;
        uint64_t v46 = v41 - v40 + 1;
        unsigned int v47 = v44;
        do
        {
          BOOL v44 = operator new(0x18uLL);
          *BOOL v44 = v47;
          v44[1] = 0;
          v47[1] = v44;
          unsigned int v47 = v44;
          *((_DWORD *)v44 + 4) = 0;
          _CF = __CFADD__(v46++, 1);
        }
        while (!_CF);
        uint64_t v48 = v488;
      }
      else
      {
        uint64_t v48 = 1;
      }
      v44[1] = v39;
      uint64_t v51 = *(void *)(v473 + 200);
      *int v45 = v51;
      *(void *)(v51 + 8) = v45;
      *(void *)(v473 + 200) = v44;
      *(void *)(v473 + 216) = v48 + v41;
    }
  }
  else
  {
    if (v40 <= v41 >> 1)
    {
      uint64_t v43 = *(uint64_t **)(v473 + 208);
      if ((v7 / 3))
      {
        unint64_t v49 = v40 + 1;
        do
        {
          uint64_t v43 = (uint64_t *)v43[1];
          --v49;
        }
        while (v49 > 1);
      }
    }
    else
    {
      uint64_t v42 = v41 - v40;
      if ((uint64_t)(v41 - v40) < 1)
      {
        unint64_t v50 = v40 - v41 + 1;
        uint64_t v43 = (uint64_t *)(v473 + 200);
        do
        {
          uint64_t v43 = (uint64_t *)v43[1];
          --v50;
        }
        while (v50 > 1);
      }
      else
      {
        uint64_t v43 = (uint64_t *)(v473 + 200);
        do
        {
          uint64_t v43 = (uint64_t *)*v43;
          --v42;
        }
        while (v42);
      }
    }
    std::list<int>::erase(v473 + 200, v43, (uint64_t *)(v473 + 200));
  }
  uint64_t v52 = *(void *)(v473 + 208);
  if (v52 != v39)
  {
    int v53 = 0;
    do
    {
      *(_DWORD *)(v52 + 16) = v53;
      uint64_t v52 = *(void *)(v52 + 8);
      ++v53;
    }
    while (v52 != v39);
  }
  if ((int)__p < 2)
  {
    int v55 = 0;
  }
  else
  {
    uint64_t v54 = 0;
    int v55 = 0;
    double v56 = *v17;
    double v57 = *v18;
    double v58 = (*v18 - v18[1]) * (*v18 - v18[1]) + (*v17 - v17[1]) * (*v17 - v17[1]) + (*v19 - v19[1]) * (*v19 - v19[1]);
    uint64_t v59 = v18 + 2;
    uint64_t v60 = v17 + 2;
    do
    {
      double v61 = *v19 - v19[v54 + 2];
      double v62 = (v57 - v59[v54]) * (v57 - v59[v54]) + (v56 - v60[v54]) * (v56 - v60[v54]) + v61 * v61;
      _NF = v62 < v58;
      if (v62 < v58) {
        double v58 = (v57 - v59[v54]) * (v57 - v59[v54]) + (v56 - v60[v54]) * (v56 - v60[v54]) + v61 * v61;
      }
      ++v54;
      if (_NF) {
        int v55 = v54;
      }
    }
    while (__p - 1 != v54);
  }
  LODWORD(buf[0].f64[0]) = 0;
  HIDWORD(buf[0].f64[0]) = v55 + 1;
  size_t v64 = operator new(0x18uLL);
  float64_t v65 = buf[0].f64[0];
  v64[1] = v501;
  v64[2] = *(void *)&v65;
  uint64_t v66 = *(void *)(v473 + 176);
  *size_t v64 = v66;
  *(void *)(v66 + 8) = v64;
  *(void *)(v473 + 176) = v64;
  ++*(void *)(v473 + 192);
  int one_delaunay3 = CDelaunayTriangles3D::find_one_delaunay3(v501, v17, v18, v19, (int *)HIDWORD(*(void *)&v65), SLODWORD(v65));
  if (one_delaunay3 < 0)
  {
    int v68 = CDelaunayTriangles3D::find_one_delaunay3(v501, v17, v18, v19, *(int **)&v65, SHIDWORD(v65));
    *(void *)&float64_t v69 = HIDWORD(*(void *)&v65);
  }
  else
  {
    int v68 = one_delaunay3;
    float64_t v69 = v65;
    *(void *)&v65 >>= 32;
  }
  if (v68 < 1)
  {
    LODWORD(v74) = 0;
LABEL_68:
    int v72 = v480;
    goto LABEL_69;
  }
  std::vector<int>::pointer begin = v36->__begin_;
  *std::vector<int>::pointer begin = LODWORD(v65);
  begin[1] = LODWORD(v69);
  begin[2] = v68;
  v511[0] = (int32x2_t)__PAIR64__(LODWORD(v69), v68);
  CDelaunayTriangles3D::add_edge_to_buffer(v501, v511);
  v511[0] = (int32x2_t)__PAIR64__(v68, LODWORD(v65));
  CDelaunayTriangles3D::add_edge_to_buffer(v501, v511);
  CDelaunayTriangles3D::check_avail_vertices(v501, LODWORD(v65) | (*(void *)&v69 << 32), v68);
  if (!*(void *)(v473 + 216))
  {
    LODWORD(v74) = 1;
    goto LABEL_68;
  }
  size_t v71 = v473 + 176;
  int v72 = v480;
  if (v480 <= 1) {
    uint64_t v73 = 1;
  }
  else {
    uint64_t v73 = v480;
  }
  uint64_t __pa = v73;
  uint64_t v74 = 1;
  size_t v75 = v473;
  v493 = (uint64_t *)(v473 + 224);
  while (2)
  {
    if (*(void *)(v75 + 192))
    {
      uint64_t v76 = (void *)v71;
      BOOL v77 = *(void **)(v75 + 184);
      if (v77 != v76)
      {
        int v78 = v76;
        while (1)
        {
          int v78 = (void *)*v78;
          int v79 = (int *)v78[2];
          unsigned int v80 = CDelaunayTriangles3D::find_one_delaunay3(v501, v17, v18, v19, v79, SHIDWORD(v79));
          if ((v80 & 0x80000000) == 0) {
            break;
          }
          if (v78 == v77)
          {
            *(void *)&buf[0].f64[0] = v79;
LABEL_66:
            int v72 = v480;
            uint64_t v36 = (std::vector<int> *)(v473 + 224);
            goto LABEL_69;
          }
        }
        *(void *)&buf[0].f64[0] = v79;
        if (v74 == __pa)
        {
          LODWORD(v74) = __pa;
          goto LABEL_66;
        }
        unsigned int v81 = v80;
        uint64_t v36 = (std::vector<int> *)(v473 + 224);
        uint64_t v82 = *v493;
        *(_DWORD *)(*v493 + 4 * (3 * v74)) = v79;
        *(_DWORD *)(v82 + 4 * (3 * v74 + 1)) = HIDWORD(v79);
        *(_DWORD *)(v82 + 4 * (3 * v74 + 2)) = v80;
        size_t v71 = v473 + 176;
        std::list<std::array<int,2ul>>::remove(v501, buf);
        v511[0] = (int32x2_t)__PAIR64__(HIDWORD(v79), v81);
        CDelaunayTriangles3D::add_edge_to_buffer(v501, v511);
        v511[0] = (int32x2_t)__PAIR64__(v81, v79);
        CDelaunayTriangles3D::add_edge_to_buffer(v501, v511);
        ++v74;
        unint64_t v488 = v488 & 0xFFFFFFFF00000000 | v81;
        CDelaunayTriangles3D::check_avail_vertices(v501, (unint64_t)v79, v81);
        size_t v75 = v473;
        int v72 = v480;
        if (*(void *)(v473 + 216)) {
          continue;
        }
      }
    }
    break;
  }
LABEL_69:
  if (v74 != v72)
  {
    std::vector<unsigned int>::resize(v36, v74);
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_8;
    }
    LODWORD(buf[0].f64[0]) = 136315906;
    *(void *)((char *)buf[0].f64 + 4) = "VBAP.cpp";
    WORD2(buf[0].f64[1]) = 1024;
    *(_DWORD *)((char *)&buf[0].f64[1] + 6) = 792;
    WORD1(buf[1].f64[0]) = 2080;
    *(void *)((char *)buf[1].f64 + 4) = "delaunayTriangulation";
    WORD2(buf[1].f64[1]) = 1024;
    *(_DWORD *)((char *)&buf[1].f64[1] + 6) = 792;
    size_t v31 = MEMORY[0x1E4F14500];
    goto LABEL_7;
  }
LABEL_70:
  size_t v83 = v473;
  if (*(_DWORD *)v473 == 1 && *(void *)(v473 + 304) >= 2uLL)
  {
    uint64_t v85 = *(void *)(v473 + 224);
    uint64_t v84 = *(void *)(v473 + 232);
    if ((unint64_t)(v84 - v85) >= 0xC)
    {
      int v86 = 0;
      unsigned int v87 = 0;
      BOOL v88 = 0;
      v489 = 0;
      uint64_t v89 = 0;
      uint64_t v90 = 0;
      unint64_t v494 = 0;
      __pb = 0;
      uint64_t v91 = 0;
      unint64_t v485 = 0;
      LODWORD(v92) = 0;
      do
      {
        uint64_t v93 = 0;
        unsigned int v94 = 0;
        int v95 = 0;
        unint64_t v96 = ((uint64_t)(*(void *)(v473 + 64) - *(void *)(v473 + 56)) >> 2) / 3uLL;
        do
        {
          unsigned int v97 = *(_DWORD *)(v85 + 4 * (v86 + v93));
          if (v97 >= v96) {
            *((_DWORD *)buf[0].f64 + v94++) = v97;
          }
          else {
            int v95 = *(_DWORD *)(v85 + 4 * (v86 + v93));
          }
          ++v93;
        }
        while (v93 != 3);
        if (v94 == 2)
        {
          int v502 = v92;
          if ((unint64_t)v90 >= v494)
          {
            uint64_t v98 = (v90 - v89) >> 2;
            unint64_t v99 = v98 + 1;
            if ((unint64_t)(v98 + 1) >> 62) {
              goto LABEL_368;
            }
            if ((uint64_t)(v494 - (void)v89) >> 1 > v99) {
              unint64_t v99 = (uint64_t)(v494 - (void)v89) >> 1;
            }
            if (v494 - (unint64_t)v89 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v100 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v100 = v99;
            }
            if (v100)
            {
              unsigned int v101 = v89;
              unint64_t v100 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v100);
              int v103 = v101;
            }
            else
            {
              int v103 = v89;
              uint64_t v102 = 0;
            }
            int v104 = (char *)(v100 + 4 * v98);
            *(_DWORD *)int v104 = v95;
            int v105 = v104 + 4;
            while (v90 != v103)
            {
              int v106 = *((_DWORD *)v90 - 1);
              v90 -= 4;
              *((_DWORD *)v104 - 1) = v106;
              v104 -= 4;
            }
            unint64_t v494 = v100 + 4 * v102;
            if (v103) {
              operator delete(v103);
            }
            uint64_t v90 = v105;
            uint64_t v89 = v104;
            LODWORD(v92) = v502;
          }
          else
          {
            *(_DWORD *)uint64_t v90 = v95;
            v90 += 4;
          }
          if (HIDWORD(buf[0].f64[0]) >= LODWORD(buf[0].f64[0])) {
            uint64_t v107 = LODWORD(buf[0].f64[0]);
          }
          else {
            uint64_t v107 = HIDWORD(buf[0].f64[0]);
          }
          if (LODWORD(buf[0].f64[0]) <= HIDWORD(buf[0].f64[0])) {
            uint64_t v108 = HIDWORD(buf[0].f64[0]);
          }
          else {
            uint64_t v108 = LODWORD(buf[0].f64[0]);
          }
          if (v88 >= v489)
          {
            uint64_t v109 = (v88 - v87) >> 3;
            unint64_t v110 = v109 + 1;
            if ((unint64_t)(v109 + 1) >> 61) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            if ((v489 - v87) >> 2 > v110) {
              unint64_t v110 = (v489 - v87) >> 2;
            }
            unint64_t v111 = 0x1FFFFFFFFFFFFFFFLL;
            if ((unint64_t)(v489 - v87) < 0x7FFFFFFFFFFFFFF8) {
              unint64_t v111 = v110;
            }
            v476 = v89;
            if (v111)
            {
              uint64_t v490 = v108;
              if (v111 >> 61) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              unint64_t v112 = v111;
              int v113 = (char *)operator new(8 * v111);
              unint64_t v111 = v112;
              uint64_t v108 = v490;
            }
            else
            {
              int v113 = 0;
            }
            int v114 = &v113[8 * v109];
            *(void *)int v114 = v107 | (v108 << 32);
            int v115 = v114 + 8;
            while (v88 != v87)
            {
              uint64_t v116 = *((void *)v88 - 1);
              v88 -= 8;
              *((void *)v114 - 1) = v116;
              v114 -= 8;
            }
            v489 = &v113[8 * v111];
            if (v87) {
              operator delete(v87);
            }
            unsigned int v87 = v114;
            BOOL v88 = v115;
            LODWORD(v92) = v502;
            uint64_t v89 = v476;
          }
          else
          {
            *(void *)BOOL v88 = v107 | (v108 << 32);
            v88 += 8;
          }
          if ((unint64_t)v91 >= v485)
          {
            uint64_t v118 = v89;
            uint64_t v119 = (v91 - __pb) >> 2;
            unint64_t v120 = v119 + 1;
            if ((unint64_t)(v119 + 1) >> 62) {
LABEL_368:
            }
              std::vector<float>::__throw_length_error[abi:ne180100]();
            if ((uint64_t)(v485 - (void)__pb) >> 1 > v120) {
              unint64_t v120 = (uint64_t)(v485 - (void)__pb) >> 1;
            }
            if (v485 - (unint64_t)__pb >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v121 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v121 = v120;
            }
            if (v121) {
              unint64_t v121 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v121);
            }
            else {
              uint64_t v122 = 0;
            }
            unint64_t v123 = (char *)(v121 + 4 * v119);
            *(_DWORD *)unint64_t v123 = v502;
            uint64_t v117 = v123 + 4;
            if (v91 == __pb)
            {
              UInt32 v124 = __pb;
            }
            else
            {
              UInt32 v124 = __pb;
              do
              {
                int v125 = *((_DWORD *)v91 - 1);
                v91 -= 4;
                *((_DWORD *)v123 - 1) = v125;
                v123 -= 4;
              }
              while (v91 != __pb);
            }
            unint64_t v485 = v121 + 4 * v122;
            if (v124) {
              operator delete(v124);
            }
            __pb = v123;
            LODWORD(v92) = v502;
            uint64_t v89 = v118;
          }
          else
          {
            *(_DWORD *)uint64_t v91 = v92;
            uint64_t v117 = v91 + 4;
          }
          uint64_t v85 = *(void *)(v473 + 224);
          uint64_t v84 = *(void *)(v473 + 232);
          uint64_t v91 = v117;
        }
        unint64_t v92 = (v92 + 1);
        v86 += 3;
      }
      while (v92 < ((v84 - v85) >> 2) / 3uLL);
      uint64_t v126 = v89;
      if (v88 != v87)
      {
        uint64_t v127 = 0;
        unsigned int v128 = 0;
        unint64_t v129 = (v88 - v87) >> 3;
        do
        {
          unsigned int v130 = v128;
          uint64_t v131 = v127;
          uint64_t v127 = ++v128;
          if (v129 > v128)
          {
            v26.f64[0] = *(float64_t *)&v87[8 * v131];
            uint64_t v132 = v128;
            unsigned int v133 = v128;
            while (1)
            {
              int32x2_t v134 = vceq_s32(*(int32x2_t *)&v26.f64[0], *(int32x2_t *)&v87[8 * v132]);
              if (v134.i32[0] & v134.i32[1]) {
                break;
              }
              uint64_t v132 = ++v133;
              if (v129 <= v133) {
                goto LABEL_162;
              }
            }
            uint64_t v135 = *(unsigned int *)&v126[4 * v131];
            v136.f64[0] = *((float64_t *)v506[0] + v135);
            v136.f64[1] = v505[0][v135];
            v27.f64[0] = v504[0][v135];
            int v137 = &v126[4 * v132];
            uint64_t v138 = *(unsigned int *)v137;
            v28.f64[0] = *((float64_t *)v506[0] + v138);
            v139.f64[0] = v504[0][v138];
            int v140 = LODWORD(v26.f64[0]);
            v26.f64[0] = *((float64_t *)v506[0] + LODWORD(v26.f64[0]));
            v141.f64[0] = v504[0][v140];
            v29.f64[0] = v505[0][v138];
            float64x2_t v142 = vnegq_f64(v29);
            v29.f64[1] = v139.f64[0];
            v139.f64[1] = v28.f64[0];
            v30.f64[0] = v505[0][v140];
            float64x2_t v143 = vmlaq_f64(vmulq_f64(v26, v142), v30, v28);
            v30.f64[1] = v141.f64[0];
            v141.f64[1] = v26.f64[0];
            float64x2_t v26 = vmulq_f64(v136, vmlaq_f64(vmulq_f64(v30, vnegq_f64(v139)), v141, v29));
            v26.f64[0] = vmulq_f64(v27, v143).f64[0] + vaddvq_f64(v26);
            if (v26.f64[0] >= 0.0) {
              unsigned int v144 = v130;
            }
            else {
              unsigned int v144 = v133;
            }
            if (v26.f64[0] < 0.0) {
              unsigned int v133 = v130;
            }
            uint64_t v145 = *(void *)(v473 + 224);
            *(_DWORD *)(v145 + 4 * (3 * *(_DWORD *)&__pb[4 * v131])) = *(_DWORD *)&v126[4 * v144];
            *(_DWORD *)(v145 + 4 * (3 * *(_DWORD *)&__pb[4 * v131] + 1)) = *(_DWORD *)&v126[4 * v133];
            uint64_t v146 = &v87[8 * v132];
            *(_DWORD *)(v145 + 4 * (3 * *(_DWORD *)&__pb[4 * v131] + 2)) = *(_DWORD *)v146;
            BOOL v147 = &__pb[4 * v132];
            *(_DWORD *)(v145 + 4 * (3 * *(_DWORD *)v147)) = *(_DWORD *)&v126[4 * v133];
            *(_DWORD *)(v145 + 4 * (3 * *(_DWORD *)v147 + 1)) = *(_DWORD *)&v126[4 * v144];
            *(_DWORD *)(v145 + 4 * (3 * *(_DWORD *)v147 + 2)) = *((_DWORD *)v146 + 1);
            unsigned int v148 = v146 + 8;
            if (v146 + 8 == v88)
            {
              BOOL v88 = v146;
            }
            else
            {
              do
              {
                uint64_t v149 = v148;
                int v150 = *((_DWORD *)v148 + 1);
                *((_DWORD *)v148 - 2) = *(_DWORD *)v148;
                *((_DWORD *)v148 - 1) = v150;
                v148 += 8;
              }
              while (v148 != v88);
              BOOL v88 = v149;
            }
            size_t v151 = v90 - (v137 + 4);
            if (v151) {
              memmove(v137, v137 + 4, v151);
            }
            size_t v152 = v91 - (v147 + 4);
            if (v152) {
              memmove(v147, v147 + 4, v152);
            }
            uint64_t v90 = &v137[v151];
            uint64_t v91 = &v147[v152];
          }
LABEL_162:
          unint64_t v129 = (v88 - v87) >> 3;
        }
        while (v129 > v128);
      }
      if (__pb) {
        operator delete(__pb);
      }
      if (v126) {
        operator delete(v126);
      }
      size_t v83 = v473;
      if (v87) {
        operator delete(v87);
      }
    }
  }
  uint64_t v153 = *(void *)(v83 + 232) - *(void *)(v83 + 224);
  unint64_t v154 = (v153 >> 1) + (v153 >> 2);
  uint64_t v155 = *(void *)(v83 + 248);
  unsigned __int8 v156 = *(char **)(v83 + 256);
  unint64_t v157 = (uint64_t)&v156[-v155] >> 3;
  if (v154 <= v157)
  {
    if (v154 >= v157) {
      goto LABEL_188;
    }
    unsigned __int8 v156 = (char *)(v155 + 8 * v154);
    goto LABEL_185;
  }
  unint64_t v158 = v154 - v157;
  uint64_t v159 = *(void *)(v83 + 264);
  if (v154 - v157 <= (v159 - (uint64_t)v156) >> 3)
  {
    bzero(*(void **)(v83 + 256), 8 * v158);
    v156 += 8 * v158;
LABEL_185:
    *(void *)(v83 + 256) = v156;
    goto LABEL_188;
  }
  if (v154 >> 61) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v160 = v159 - v155;
  if (v160 >> 2 > v154) {
    unint64_t v154 = v160 >> 2;
  }
  if ((unint64_t)v160 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v161 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v161 = v154;
  }
  v162 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v161);
  v163 = *(char **)(v473 + 248);
  v164 = *(char **)(v473 + 256);
  v165 = &v162[8 * v157];
  v167 = &v162[8 * v166];
  bzero(v165, 8 * v158);
  unsigned __int8 v156 = &v165[8 * v158];
  while (v164 != v163)
  {
    uint64_t v168 = *((void *)v164 - 1);
    v164 -= 8;
    *((void *)v165 - 1) = v168;
    v165 -= 8;
  }
  size_t v83 = v473;
  *(void *)(v473 + 248) = v165;
  *(void *)(v473 + 256) = v156;
  *(void *)(v473 + 264) = v167;
  if (v163)
  {
    operator delete(v163);
    unsigned __int8 v156 = *(char **)(v473 + 256);
  }
LABEL_188:
  vDSP_vclrD(*(double **)(v83 + 248), 1, (uint64_t)&v156[-*(void *)(v83 + 248)] >> 3);
  uint64_t v177 = *(void *)(v473 + 224);
  uint64_t v176 = *(void *)(v473 + 232);
  if ((unint64_t)(v176 - v177) >= 0xC)
  {
    unsigned int v179 = 1;
    unsigned int v180 = 8;
    unsigned int v181 = 2;
    do
    {
      uint64_t v182 = *(int *)(v177 + 4 * (v181 - 2));
      v183.f64[0] = *((float64_t *)v506[0] + v182);
      v183.f64[1] = v505[0][v182];
      v169.f64[0] = v504[0][v182];
      uint64_t v184 = *(int *)(v177 + 4 * (v181 - 1));
      v170.f64[0] = *((float64_t *)v506[0] + v184);
      v173.f64[0] = v505[0][v184];
      v171.f64[0] = v504[0][v184];
      uint64_t v185 = *(int *)(v177 + 4 * v181);
      v172.f64[0] = *((float64_t *)v506[0] + v185);
      v175.f64[0] = v505[0][v185];
      v174.f64[0] = v504[0][v185];
      v186.f64[0] = v173.f64[0];
      v186.f64[1] = v171.f64[0];
      v187.f64[0] = v174.f64[0];
      v187.f64[1] = v172.f64[0];
      v188.f64[0] = v171.f64[0];
      v188.f64[1] = v170.f64[0];
      v189.f64[0] = v175.f64[0];
      v189.f64[1] = v174.f64[0];
      if (fabs(vmulq_f64(v169, vmlaq_f64(vmulq_f64(v172, vnegq_f64(v173)), v175, v170)).f64[0]+ vaddvq_f64(vmulq_f64(v183, vmlaq_f64(vmulq_f64(v189, vnegq_f64(v188)), v187, v186)))) > 0.00000011920929)
      {
        v170.f64[1] = v173.f64[0];
        v172.f64[1] = v505[0][v185];
        buf[0] = v183;
        buf[1] = v169;
        buf[2] = v170;
        float64x2_t v518 = v171;
        float64x2_t v519 = v172;
        float64x2_t v520 = v174;
        __invert_d3();
        int32x2_t v190 = v511[1];
        float64x2_t v169 = v513;
        float64x2_t v170 = v515;
        v171.f64[0] = v512.f64[0];
        v172.f64[0] = v514.f64[0];
        v173.f64[0] = v516.f64[0];
        uint64_t v191 = *(void *)(v473 + 248);
        *(int32x2_t *)(v191 + 8 * (v180 - 8)) = v511[0];
        *(float64_t *)(v191 + 8 * (v180 - 7)) = v169.f64[0];
        *(float64_t *)(v191 + 8 * (v180 - 6)) = v170.f64[0];
        *(int32x2_t *)(v191 + 8 * (v180 - 5)) = v190;
        *(float64_t *)(v191 + 8 * (v180 - 4)) = v169.f64[1];
        *(float64_t *)(v191 + 8 * (v180 - 3)) = v170.f64[1];
        *(float64_t *)(v191 + 8 * (v180 - 2)) = v171.f64[0];
        *(float64_t *)(v191 + 8 * (v180 - 1)) = v172.f64[0];
        *(float64_t *)(v191 + 8 * v180) = v173.f64[0];
        uint64_t v177 = *(void *)(v473 + 224);
        uint64_t v176 = *(void *)(v473 + 232);
      }
      unint64_t v178 = ((v176 - v177) >> 2) / 3uLL;
      BOOL v338 = v178 > v179++;
      v180 += 9;
      v181 += 3;
    }
    while (v338);
  }
  else
  {
    unint64_t v178 = (v176 - v177) / 0xCuLL;
  }
  int v192 = vcvtmd_s64_f64(log((float)v178 * 0.125) / 1.38629436);
  if (v192 >= 6) {
    int v192 = 6;
  }
  if (v478 == v480)
  {
    int v193 = v192 & ~(v192 >> 31);
    unint64_t v194 = (8 << (2 * (v192 & ~(v192 >> 31))));
    v196 = *a4;
    uint64_t v195 = (uint64_t)a4[1];
    if (0xAAAAAAAAAAAAAAABLL * ((v195 - (uint64_t)*a4) >> 3) == v194)
    {
      v197 = (void **)(v473 + 272);
      if ((uint64_t **)(v473 + 272) != a4)
      {
        uint64_t v198 = *(void *)(v473 + 288);
        v199 = *(void **)(v473 + 272);
        if (0xAAAAAAAAAAAAAAABLL * ((v198 - (uint64_t)v199) >> 3) >= v194)
        {
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v473 + 280) - (void)v199) >> 3) >= v194)
          {
            v307 = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::list<int> *,std::list<int> *,std::list<int> *,0>(*a4, a4[1], *(uint64_t **)(v473 + 272));
            for (i = *(uint64_t **)(v473 + 280); i != v307; std::__list_imp<ID3FrameInfo>::clear(i))
              i -= 3;
            *(void *)(v473 + 280) = v307;
            goto LABEL_291;
          }
          v305 = &v196[(uint64_t)(*(void *)(v473 + 280) - (void)v199) >> 3];
          std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::list<int> *,std::list<int> *,std::list<int> *,0>(*a4, v305, *(uint64_t **)(v473 + 272));
          v207 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::list<int>>,std::list<int>*,std::list<int>*,std::list<int>*>((uint64_t)v305, v195, *(void **)(v473 + 280));
        }
        else
        {
          if (v199)
          {
            v200 = *(void **)(v473 + 280);
            v201 = *(void **)(v473 + 272);
            if (v200 != v199)
            {
              do
              {
                v200 -= 3;
                std::__list_imp<ID3FrameInfo>::clear(v200);
              }
              while (v200 != v199);
              v201 = *v197;
            }
            *(void *)(v473 + 280) = v199;
            operator delete(v201);
            uint64_t v198 = 0;
            *v197 = 0;
            *(void *)(v473 + 280) = 0;
            *(void *)(v473 + 288) = 0;
          }
          unint64_t v202 = 0xAAAAAAAAAAAAAAABLL * (v198 >> 3);
          uint64_t v203 = 2 * v202;
          if (2 * v202 <= v194) {
            uint64_t v203 = v194;
          }
          if (v202 >= 0x555555555555555) {
            unint64_t v204 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v204 = v203;
          }
          if (v204 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          v205 = std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v204);
          *(void *)(v473 + 272) = v205;
          *(void *)(v473 + 280) = v205;
          *(void *)(v473 + 288) = &v205[3 * v206];
          v207 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::list<int>>,std::list<int>*,std::list<int>*,std::list<int>*>((uint64_t)v196, v195, v205);
        }
        *(void *)(v473 + 280) = v207;
      }
LABEL_291:
      uint64_t v32 = 0;
      *(_DWORD *)(v473 + 296) = v193;
      goto LABEL_359;
    }
  }
  v459 = v505[0];
  v460 = v506[0];
  v458 = v504[0];
  size_t v208 = v473;
  v210 = *(void **)(v473 + 272);
  v209 = *(void **)(v473 + 280);
  if (v209 != v210)
  {
    do
    {
      v209 -= 3;
      std::__list_imp<ID3FrameInfo>::clear(v209);
    }
    while (v209 != v210);
    size_t v208 = v473;
    uint64_t v177 = *(void *)(v473 + 224);
    uint64_t v176 = *(void *)(v473 + 232);
  }
  *(void *)(v208 + 280) = v210;
  unint64_t v211 = ((v176 - v177) >> 2) / 3uLL;
  int v212 = vcvtmd_s64_f64(log((float)v211 * 0.125) / 1.38629436);
  int v455 = v212;
  if (v212 >= 6) {
    int v213 = 6;
  }
  else {
    int v213 = v212;
  }
  unint64_t v214 = v213 & ~(v213 >> 31);
  char v215 = 2 * (v213 & ~(v213 >> 31));
  v469 = (char *)operator new(96 << (v215 + 3));
  bzero(v469, 96 * (((96 << (v215 + 3)) - 96) / 0x60uLL) + 96);
  uint64_t v218 = 0;
  if (8 << v215 <= 1) {
    uint64_t v219 = 1;
  }
  else {
    uint64_t v219 = (8 << v215);
  }
  v220 = (float64x2_t *)MEMORY[0x1E4F14988];
  float64x2_t v221 = (float64x2_t)vdupq_n_s64(0x416312D000000000uLL);
  v216.f64[0] = 10000000.0;
  float64x2_t v222 = (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL);
  v217.f64[0] = 0.0000001;
  __asm
  {
    FMOV            V7.2D, #0.5
    FMOV            V30.2D, #1.0
  }
  do
  {
    float64x2_t v226 = v220[3];
    buf[2] = v220[2];
    float64x2_t v518 = v226;
    float64x2_t v227 = v220[5];
    float64x2_t v519 = v220[4];
    float64x2_t v520 = v227;
    float64x2_t v228 = v220[1];
    buf[0] = *v220;
    buf[1] = v228;
    if (v213 < 1)
    {
      LOBYTE(v230) = v218;
    }
    else
    {
      uint64_t v229 = 0;
      unsigned int v230 = v218;
      do
      {
        if ((v230 & 3) == 2)
        {
          unint64_t v239 = 0;
          v508[2] = buf[2];
          v508[3] = v518;
          v508[4] = v519;
          v508[5] = v520;
          v508[0] = buf[0];
          v508[1] = buf[1];
          do
          {
            float64x2_t v241 = v508[v239 / 2];
            float64x2_t v240 = v508[v239 / 2 + 1];
            v242 = (float64x2_t *)&v511[v239];
            float64x2_t *v242 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q7, v241.f64[0]), (float64x2_t)xmmword_1901C6110, v241, 1), (float64x2_t)xmmword_1901C6120, v240.f64[0]);
            v242[1] = vmlaq_f64(vmlaq_laneq_f64(vmulq_f64(v241, (float64x2_t)0), (float64x2_t)0, v241, 1), _Q7, v240);
            v239 += 4;
          }
          while (v239 != 12);
        }
        else if ((v230 & 3) == 1)
        {
          unint64_t v235 = 0;
          v509[2] = buf[2];
          v509[3] = v518;
          v509[4] = v519;
          v509[5] = v520;
          v509[0] = buf[0];
          v509[1] = buf[1];
          do
          {
            float64x2_t v237 = v509[v235 / 2];
            float64x2_t v236 = v509[v235 / 2 + 1];
            v238 = (float64x2_t *)&v511[v235];
            float64x2_t *v238 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_1901C6130, v237.f64[0]), (float64x2_t)xmmword_1901C6120, v237, 1), (float64x2_t)0, v236.f64[0]);
            v238[1] = vmlaq_f64(vmlaq_laneq_f64(vmulq_f64(v237, _Q7), _Q7, v237, 1), _Q30, v236);
            v235 += 4;
          }
          while (v235 != 12);
        }
        else if ((v230 & 3) != 0)
        {
          unint64_t v243 = 0;
          v507[2] = buf[2];
          v507[3] = v518;
          v507[4] = v519;
          v507[5] = v520;
          v507[0] = buf[0];
          v507[1] = buf[1];
          do
          {
            float64x2_t v245 = (float64x2_t)v507[v243 / 2];
            float64x2_t v244 = (float64x2_t)v507[v243 / 2 + 1];
            v246 = (float64x2_t *)&v511[v243];
            float64x2_t *v246 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_1901C6120, v245.f64[0]), (float64x2_t)xmmword_1901C6130, v245, 1), _Q7, v244.f64[0]);
            v246[1] = vmlaq_f64(vmlaq_laneq_f64(vmulq_f64(v245, _Q7), _Q7, v245, 1), (float64x2_t)0, v244);
            v243 += 4;
          }
          while (v243 != 12);
        }
        else
        {
          unint64_t v231 = 0;
          v510[2] = buf[2];
          v510[3] = v518;
          v510[4] = v519;
          v510[5] = v520;
          v510[0] = buf[0];
          v510[1] = buf[1];
          do
          {
            float64x2_t v233 = v510[v231 / 2];
            float64x2_t v232 = v510[v231 / 2 + 1];
            v234 = (float64x2_t *)&v511[v231];
            float64x2_t *v234 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_1901C6140, v233.f64[0]), _Q7, v233, 1), (float64x2_t)xmmword_1901C6130, v232.f64[0]);
            v234[1] = vmlaq_f64(vmlaq_laneq_f64(vmulq_f64(v233, (float64x2_t)0), (float64x2_t)0, v233, 1), _Q7, v232);
            v231 += 4;
          }
          while (v231 != 12);
        }
        buf[2] = v513;
        float64x2_t v518 = v514;
        float64x2_t v519 = v515;
        float64x2_t v520 = v516;
        buf[0] = *(float64x2_t *)v511[0].i8;
        buf[1] = v512;
        for (uint64_t j = 0; j != 6; j += 2)
        {
          v248 = &buf[j];
          float64x2_t v250 = buf[j];
          float64x2_t v249 = buf[j + 1];
          float64x2_t v251 = vabsq_f64(v249);
          v251.f64[0] = v251.f64[0] + vaddvq_f64(vabsq_f64(v250));
          if (v251.f64[0] > 0.0)
          {
            v251.f64[0] = 1.0 / v251.f64[0];
            *(void *)&v250.f64[1] = vextq_s8((int8x16_t)v250, (int8x16_t)v250, 8uLL).u64[0];
            float64x2_t *v248 = vmulq_n_f64(v250, v251.f64[0]);
            v248[1] = vmulq_f64(v249, v251);
          }
        }
        v230 >>= 2;
        ++v229;
      }
      while (v229 != v214);
    }
    for (uint64_t k = 0; k != 6; k += 2)
    {
      v253 = &buf[k];
      float64x2_t v254 = buf[k];
      float64x2_t v255 = buf[k + 1];
      float64x2_t v256 = vmulq_f64(v255, v255);
      v256.f64[0] = 1.0 / sqrt(v256.f64[0] + vaddvq_f64(vmulq_f64(v254, v254)));
      float64x2_t *v253 = vmulq_n_f64(v254, v256.f64[0]);
      v253[1] = vmulq_f64(v255, v256);
    }
    unint64_t v257 = *(_OWORD *)&vmulq_f64(v518, v216);
    unint64_t v258 = *(_OWORD *)&vmulq_f64(v520, v216);
    float64x2_t v259 = vmulq_f64(v519, v221);
    v260 = (float64x2_t *)&v469[96 * v218];
    float64x2_t v261 = vrndxq_f64(vmulq_f64(buf[0], v221));
    float64x2_t v262 = vrndxq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vmulq_f64(buf[1], v216));
    float64x2_t v263 = vmulq_f64(vrndxq_f64(vmulq_f64(buf[2], v221)), v222);
    v260[2] = v263;
    v264 = v260 + 2;
    float64x2_t v265 = vrndxq_f64((float64x2_t)v257);
    float64x2_t v266 = vmulq_f64(vrndxq_f64(v259), v222);
    v260[4] = v266;
    float64x2_t v267 = vmulq_f64(v262, v217);
    float64x2_t v268 = vmulq_f64(v261, v222);
    float64x2_t v269 = vmulq_f64(v265, v217);
    float64x2_t *v260 = v268;
    v260[1] = v267;
    float64x2_t v270 = vmulq_f64(vrndxq_f64((float64x2_t)v258), v217);
    v260[3] = v269;
    v260[5] = v270;
    unint64_t v271 = vextq_s8((int8x16_t)v268, (int8x16_t)v268, 8uLL).u64[0];
    unint64_t v272 = vextq_s8((int8x16_t)v263, (int8x16_t)v263, 8uLL).u64[0];
    unint64_t v273 = vextq_s8((int8x16_t)v266, (int8x16_t)v266, 8uLL).u64[0];
    switch(v230 & 7)
    {
      case 0u:
        float64x2_t *v260 = vnegq_f64(v268);
        v260[1] = vnegq_f64(v267);
        v260[2] = vnegq_f64(v263);
        v260[3] = vnegq_f64(v269);
        v260[4] = vnegq_f64(v266);
        v260[5] = vnegq_f64(v270);
        break;
      case 1u:
        *(void *)&v268.f64[1] = v271;
        float64x2_t *v260 = vnegq_f64(v268);
        v260[1] = v267;
        *(void *)&v263.f64[1] = v272;
        float64x2_t *v264 = vnegq_f64(v263);
        v260[3] = v269;
        *(void *)&v266.f64[1] = v273;
        float64x2_t v266 = vnegq_f64(v266);
        goto LABEL_256;
      case 2u:
        *(void *)&v268.f64[1] = v271;
        float64x2_t *v260 = vmulq_f64(v268, (float64x2_t)xmmword_1901C6150);
        v260[1] = vnegq_f64(v267);
        *(void *)&v263.f64[1] = v272;
        float64x2_t *v264 = vmulq_f64(v263, (float64x2_t)xmmword_1901C6150);
        v260[3] = vnegq_f64(v269);
        *(void *)&v266.f64[1] = v273;
        float64x2_t v266 = vmulq_f64(v266, (float64x2_t)xmmword_1901C6150);
        goto LABEL_255;
      case 3u:
        *(void *)&v268.f64[1] = v271;
        float64x2_t *v260 = vmulq_f64(v268, (float64x2_t)xmmword_1901C6150);
        v260[1] = v267;
        *(void *)&v263.f64[1] = v272;
        float64x2_t *v264 = vmulq_f64(v263, (float64x2_t)xmmword_1901C6150);
        v260[3] = v269;
        *(void *)&v266.f64[1] = v273;
        float64x2_t v266 = vmulq_f64(v266, (float64x2_t)xmmword_1901C6150);
        goto LABEL_256;
      case 4u:
        *(void *)&v268.f64[1] = v271;
        float64x2_t *v260 = vmulq_f64(v268, (float64x2_t)xmmword_1901C60D0);
        v260[1] = vnegq_f64(v267);
        *(void *)&v263.f64[1] = v272;
        float64x2_t *v264 = vmulq_f64(v263, (float64x2_t)xmmword_1901C60D0);
        v260[3] = vnegq_f64(v269);
        *(void *)&v266.f64[1] = v273;
        float64x2_t v266 = vmulq_f64(v266, (float64x2_t)xmmword_1901C60D0);
        goto LABEL_255;
      case 5u:
        *(void *)&v268.f64[1] = v271;
        float64x2_t *v260 = vmulq_f64(v268, (float64x2_t)xmmword_1901C60D0);
        v260[1] = v267;
        *(void *)&v263.f64[1] = v272;
        float64x2_t *v264 = vmulq_f64(v263, (float64x2_t)xmmword_1901C60D0);
        v260[3] = v269;
        *(void *)&v266.f64[1] = v273;
        float64x2_t v266 = vmulq_f64(v266, (float64x2_t)xmmword_1901C60D0);
        goto LABEL_256;
      case 6u:
        *(void *)&v268.f64[1] = v271;
        float64x2_t *v260 = v268;
        v260[1] = vnegq_f64(v267);
        *(void *)&v263.f64[1] = v272;
        float64x2_t *v264 = v263;
        v260[3] = vnegq_f64(v269);
        *(void *)&v266.f64[1] = v273;
LABEL_255:
        float64x2_t v270 = vnegq_f64(v270);
LABEL_256:
        v260[4] = v266;
        v260[5] = v270;
        break;
      default:
        break;
    }
    ++v218;
  }
  while (v218 != v219);
  unint64_t v274 = 0xAAAAAAAAAAAAAAABLL
       * ((uint64_t)(96 * (((96 << (2 * (v213 & ~(v213 >> 31)) + 3)) - 96) / 0x60uLL)
                  + 96) >> 5);
  uint64_t v275 = *(void *)(v473 + 272);
  v276 = *(void **)(v473 + 280);
  unint64_t v277 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v276 - v275) >> 3);
  _CF = v274 >= v277;
  unint64_t v279 = v274 - v277;
  *(float64x2_t *)v503 = _Q30;
  if (v274 <= v277)
  {
    size_t v291 = v473;
    v281 = v469;
    if (!_CF)
    {
      v304 = (void *)(v275 + 24 * v274);
      while (v276 != v304)
      {
        v276 -= 3;
        std::__list_imp<ID3FrameInfo>::clear(v276);
      }
      *(void *)(v473 + 280) = v304;
    }
  }
  else
  {
    uint64_t v280 = *(void *)(v473 + 288);
    v281 = v469;
    if (0xAAAAAAAAAAAAAAABLL * ((v280 - (uint64_t)v276) >> 3) >= v279)
    {
      v306 = &v276[3 * v279];
      do
      {
        void *v276 = v276;
        v276[1] = v276;
        v276[2] = 0;
        v276 += 3;
      }
      while (v276 != v306);
      size_t v291 = v473;
      *(void *)(v473 + 280) = v306;
    }
    else
    {
      if (v274 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v282 = 0xAAAAAAAAAAAAAAABLL * ((v280 - v275) >> 3);
      uint64_t v283 = 2 * v282;
      if (2 * v282 <= v274) {
        uint64_t v283 = v274;
      }
      if (v282 >= 0x555555555555555) {
        unint64_t v284 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v284 = v283;
      }
      v285 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v284);
      v287 = &v285[24 * v277];
      v288 = &v285[24 * v274];
      v289 = v287;
      do
      {
        *(void *)v289 = v289;
        *((void *)v289 + 1) = v289;
        *((void *)v289 + 2) = 0;
        v289 += 24;
      }
      while (v289 != v288);
      v290 = &v285[24 * v286];
      size_t v291 = v473;
      v292 = *(void **)(v473 + 272);
      v293 = *(void **)(v473 + 280);
      if (v293 == v292)
      {
        *(void *)(v473 + 272) = v287;
        *(void *)(v473 + 280) = v288;
        *(void *)(v473 + 288) = v290;
      }
      else
      {
        uint64_t v294 = 0;
        do
        {
          v295 = &v287[v294 * 8];
          v296 = (uint64_t *)(v295 - 24);
          v297 = &v293[v294];
          *((void *)v295 - 3) = v295 - 24;
          *((void *)v295 - 2) = v295 - 24;
          *((void *)v295 - 1) = 0;
          uint64_t v298 = v293[v294 - 1];
          if (v298)
          {
            uint64_t v299 = *(v297 - 3);
            v300 = (uint64_t *)*(v297 - 2);
            uint64_t v301 = *v300;
            *(void *)(v301 + 8) = *(void *)(v299 + 8);
            **(void **)(v299 + 8) = v301;
            uint64_t v302 = *v296;
            *(void *)(v302 + 8) = v300;
            uint64_t *v300 = v302;
            uint64_t *v296 = v299;
            *(void *)(v299 + 8) = v296;
            *((void *)v295 - 1) = v298;
            *(v297 - 1) = 0;
          }
          v294 -= 3;
        }
        while (&v293[v294] != v292);
        v303 = *(void **)(v473 + 272);
        v293 = *(void **)(v473 + 280);
        *(void *)(v473 + 272) = &v287[v294 * 8];
        *(void *)(v473 + 280) = v288;
        *(void *)(v473 + 288) = v290;
        if (v293 != v303)
        {
          do
          {
            v293 -= 3;
            std::__list_imp<ID3FrameInfo>::clear(v293);
          }
          while (v293 != v303);
          v293 = v303;
        }
      }
      if (v293) {
        operator delete(v293);
      }
    }
  }
  if (v211)
  {
    uint64_t v309 = 0;
    int v449 = ~(-1 << v215);
    uint64_t v457 = v211;
    int v456 = 7 << v215;
    do
    {
      uint64_t v310 = *(int *)(*(void *)(v291 + 224) + 12 * v309);
      v216.f64[0] = v458[v310];
      double v481 = *((double *)v460 + v310);
      double v495 = v459[v310];
      float64x2_t __pc = v216;
      int subtriangle_containment = CDelaunayTriangles3D::find_subtriangle_containment(v214, v481, v495, v216.f64[0]);
      uint64_t v312 = *(int *)(*(void *)(v291 + 224) + 12 * v309 + 4);
      v313.f64[0] = v458[v312];
      float64x2_t v470 = v313;
      double v471 = *((double *)v460 + v312);
      double v491 = v459[v312];
      int v314 = CDelaunayTriangles3D::find_subtriangle_containment(v214, v471, v491, v313.f64[0]);
      size_t v315 = v291;
      int v316 = v314;
      uint64_t v317 = *(int *)(*(void *)(v315 + 224) + 12 * v309 + 8);
      v318.f64[0] = *((float64_t *)v460 + v317);
      v319.f64[0] = v458[v317];
      float64x2_t v461 = v319;
      float64x2_t v462 = v318;
      double v486 = v459[v317];
      int v320 = CDelaunayTriangles3D::find_subtriangle_containment(v214, v318.f64[0], v486, v319.f64[0]);
      *(void *)&buf[0].f64[0] = buf;
      *(void *)&buf[0].f64[1] = buf;
      buf[1].f64[0] = 0.0;
      std::__list_imp<ID3FrameInfo>::clear(buf);
      v321 = operator new(0x18uLL);
      v321[4] = subtriangle_containment;
      float64_t v322 = buf[0].f64[0];
      *(float64_t *)v321 = buf[0].f64[0];
      *((void *)v321 + 1) = buf;
      *(void *)(*(void *)&v322 + 8) = v321;
      float64_t v323 = buf[1].f64[0];
      unint64_t v324 = *(void *)&buf[1].f64[0] + 1;
      *(void *)&buf[0].f64[0] = v321;
      ++*(void *)&buf[1].f64[0];
      if (v316 != subtriangle_containment)
      {
        v325 = operator new(0x18uLL);
        v325[4] = v316;
        *(void *)v325 = v321;
        *((void *)v325 + 1) = buf;
        *((void *)v321 + 1) = v325;
        unint64_t v324 = *(void *)&v323 + 2;
        v321 = v325;
        *(void *)&buf[0].f64[0] = v325;
        *(void *)&buf[1].f64[0] = *(void *)&v323 + 2;
      }
      if (v320 != subtriangle_containment && v320 != v316)
      {
        v327 = operator new(0x18uLL);
        v327[4] = v320;
        *(void *)v327 = v321;
        *((void *)v327 + 1) = buf;
        *((void *)v321 + 1) = v327;
        ++v324;
        *(void *)&buf[0].f64[0] = v327;
        *(void *)&buf[1].f64[0] = v324;
      }
      std::list<int>::__sort<std::__less<void,void>>(*(uint64_t *)&buf[0].f64[1], (uint64_t)buf, v324);
      float64_t v328 = buf[0].f64[1];
      int v329 = *(_DWORD *)(*(void *)&buf[0].f64[1] + 16);
      if (*(void *)&buf[1].f64[0] < 2uLL)
      {
        size_t v291 = v473;
        uint64_t v339 = *(void *)(v473 + 272);
        v340 = operator new(0x18uLL);
        v341 = (uint64_t *)(v339 + 24 * v329);
        v340[4] = v309;
        *((void *)v340 + 1) = v341;
        uint64_t v342 = *v341;
        *(void *)v340 = *v341;
        *(void *)(v342 + 8) = v340;
        uint64_t *v341 = (uint64_t)v340;
        ++v341[2];
        v281 = v469;
      }
      else
      {
        int v330 = 0;
        int v331 = *(_DWORD *)(*(void *)&buf[0].f64[0] + 16) ^ v329;
        if ((v456 & v331) != 0)
        {
          int v332 = v274 - 1;
          v281 = v469;
        }
        else
        {
          int v332 = v274 - 1;
          v281 = v469;
          if (v455 >= 1)
          {
            int v333 = v214;
            unsigned int v334 = v449;
            unsigned int v335 = v456;
            do
            {
              unsigned int v336 = v335;
              unsigned int v337 = v334;
              v335 |= v335 >> 2;
              v334 >>= 2;
              BOOL v338 = (v335 & v331) != 0 || v333-- <= 1;
            }
            while (!v338);
            int v330 = v336 & v329;
            int v332 = v337 | v329;
          }
        }
        v343 = v511;
        v511[0] = (int32x2_t)v511;
        v511[1] = (int32x2_t)v511;
        v512.f64[0] = 0.0;
        if (v332 - v330 != -1)
        {
          float64_t v344 = 0.0;
          uint64_t v345 = v332 - v330 + 1;
          v346 = v511;
          do
          {
            v347 = (int32x2_t *)operator new(0x18uLL);
            v347[2].i32[0] = 0;
            int32x2_t *v347 = (int32x2_t)v346;
            v347[1] = (int32x2_t)v511;
            v346[1] = (int32x2_t)v347;
            ++*(void *)&v344;
            v346 = v347;
            v511[0] = (int32x2_t)v347;
            v512.f64[0] = v344;
          }
          while (v345 != *(void *)&v344);
          v343 = (int32x2_t *)v511[1];
          if ((int32x2_t *)v511[1] == v511)
          {
            v281 = v469;
          }
          else
          {
            v348 = (int32x2_t *)v511[1];
            v281 = v469;
            do
            {
              v348[2].i32[0] = v330;
              v348 = (int32x2_t *)v348[1];
              ++v330;
            }
            while (v348 != v511);
          }
        }
        if (*(float64x2_t **)&v328 != buf)
        {
          do
          {
            int v349 = *(_DWORD *)(*(void *)&v328 + 16);
            uint64_t v350 = *(void *)(v473 + 272);
            v351 = operator new(0x18uLL);
            v352 = (uint64_t *)(v350 + 24 * v349);
            v351[4] = v309;
            *((void *)v351 + 1) = v352;
            uint64_t v353 = *v352;
            *(void *)v351 = *v352;
            *(void *)(v353 + 8) = v351;
            uint64_t *v352 = (uint64_t)v351;
            ++v352[2];
            std::list<int>::remove(v511, *(_DWORD *)(*(void *)&v328 + 16));
            float64_t v328 = *(double *)(*(void *)&v328 + 8);
          }
          while (*(float64x2_t **)&v328 != buf);
          v343 = (int32x2_t *)v511[1];
        }
        if (v343 != v511)
        {
          *(double *)v354.i64 = v481;
          *(double *)&v354.i64[1] = v495;
          *(double *)v355.i64 = v471;
          *(double *)&v355.i64[1] = v491;
          v356.i64[0] = *(void *)&v462.f64[0];
          *(double *)&v356.i64[1] = v486;
          v357.f64[0] = __pc.f64[0];
          v357.f64[1] = v481;
          v358.f64[0] = v470.f64[0];
          v358.f64[1] = v471;
          uint64_t v359 = *(void *)(v473 + 272);
          float64x2_t v360 = vnegq_f64((float64x2_t)v354);
          float64x2_t v361 = vnegq_f64(__pc);
          float64x2_t v362 = vmlaq_f64(vmulq_f64(v358, v360), (float64x2_t)v355, v357);
          *(void *)&double v492 = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(v361, (float64x2_t)v355, 1), v470, (float64x2_t)v354, 1);
          float64x2_t v484 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v362, 1);
          float64x2_t v487 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v362.f64[0], 0);
          v362.f64[0] = v461.f64[0];
          v362.f64[1] = v462.f64[0];
          int64x2_t v363 = (int64x2_t)vmlaq_f64(vmulq_f64(v362, vnegq_f64((float64x2_t)v355)), (float64x2_t)v356, v358);
          *(void *)&double v479 = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v470), (float64x2_t)v356, 1), v461, (float64x2_t)v355, 1);
          int64x2_t v482 = v354;
          float64x2_t v475 = (float64x2_t)vdupq_lane_s64(v363.i64[0], 0);
          int64x2_t v477 = (int64x2_t)*(unint64_t *)&__pc.f64[0];
          float64x2_t v474 = (float64x2_t)vdupq_laneq_s64(v363, 1);
          int64x2_t v364 = (int64x2_t)vmlaq_f64(vmulq_f64(v362, v360), (float64x2_t)v356, v357);
          int8x16_t v365 = (int8x16_t)vzip1q_s64((int64x2_t)__pc, (int64x2_t)v470);
          float64x2_t v467 = (float64x2_t)vdupq_lane_s64(v364.i64[0], 0);
          *(void *)&double v468 = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(v361, (float64x2_t)v356, 1), v461, (float64x2_t)v354, 1);
          int64x2_t v472 = v355;
          float64x2_t v463 = (float64x2_t)vzip1q_s64((int64x2_t)*(unint64_t *)&__pc.f64[0], (int64x2_t)*(unint64_t *)&v470.f64[0]);
          float64x2_t v464 = (float64x2_t)vzip2q_s64(v354, v355);
          float64x2_t v465 = (float64x2_t)vzip1q_s64(v354, v355);
          float64x2_t v466 = (float64x2_t)vdupq_laneq_s64(v364, 1);
          unint64_t v452 = vextq_s8((int8x16_t)v464, (int8x16_t)v464, 8uLL).u64[0];
          unint64_t v453 = vextq_s8((int8x16_t)v465, (int8x16_t)v465, 8uLL).u64[0];
          int64x2_t __pd = v356;
          float64_t v454 = *(double *)v365.i64;
          float64x2_t v450 = (float64x2_t)vextq_s8((int8x16_t)v356, (int8x16_t)v356, 8uLL);
          unint64_t v451 = vextq_s8(v365, v365, 8uLL).u64[0];
          do
          {
            __int32 v366 = v343[2].i32[0];
            v367 = (float64x2_t *)&v281[96 * v366];
            float64x2_t v369 = *v367;
            float64x2_t v368 = v367[1];
            float64x2_t v371 = v367[2];
            float64x2_t v370 = v367[3];
            float64x2_t v373 = v367[4];
            float64x2_t v372 = v367[5];
            int64x2_t v374 = (int64x2_t)*(unint64_t *)&v367[1].f64[0];
            int64x2_t v375 = (int64x2_t)*(unint64_t *)&v367[3].f64[0];
            int64x2_t v376 = (int64x2_t)*(unint64_t *)&v367[5].f64[0];
            float64x2_t v377 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v367, (int64x2_t)v371);
            float64x2_t v378 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v367, (int64x2_t)v371);
            float64x2_t v379 = (float64x2_t)vzip1q_s64((int64x2_t)v374.u64[0], (int64x2_t)v375.u64[0]);
            float64x2_t v380 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v377, v492), v487, v378), v484, v379);
            float64x2_t v381 = vmlaq_f64(vmlaq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v373, __pd), v492), v487, (float64x2_t)vzip2q_s64((int64x2_t)v373, __pd)), v484, (float64x2_t)vzip1q_s64((int64x2_t)v376.u64[0], (int64x2_t)*(unint64_t *)&v461.f64[0]));
            int8x16_t v382 = (int8x16_t)vdupq_n_s64(0x8000000000000000);
            float64x2_t v383 = (float64x2_t)vandq_s8(vorrq_s8(vandq_s8((int8x16_t)v381, v382), *(int8x16_t *)v503), vorrq_s8((int8x16_t)vcltzq_f64(v381), (int8x16_t)vcgtzq_f64(v381)));
            double v384 = v383.f64[0]
                 + vaddvq_f64((float64x2_t)vandq_s8(vorrq_s8(vandq_s8((int8x16_t)v380, v382), *(int8x16_t *)v503), vorrq_s8((int8x16_t)vcltzq_f64(v380), (int8x16_t)vcgtzq_f64(v380))));
            if (fabs(v384) != 3.0
              || (v383.f64[0] = v384,
                  int32x2_t v385 = (int32x2_t)vbsl_s8((int8x8_t)vmovn_s64(vcgtzq_f64(v383)), (int8x8_t)0x100000001, (int8x8_t)vmovn_s64(vcltzq_f64(v383))), (vmvn_s8((int8x8_t)vceq_s32(v385, vdup_lane_s32(v385, 1))).u8[0] & 1) == 0))
            {
              float64x2_t v386 = vmlaq_f64(vmlaq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v373, v482), v479), v475, (float64x2_t)vzip2q_s64((int64x2_t)v373, v482)), v474, (float64x2_t)vzip1q_s64(v376, v477));
              float64x2_t v387 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v377, v479), v475, v378), v474, v379);
              float64x2_t v388 = (float64x2_t)vandq_s8(vorrq_s8(vandq_s8((int8x16_t)v386, v382), *(int8x16_t *)v503), vorrq_s8((int8x16_t)vcltzq_f64(v386), (int8x16_t)vcgtzq_f64(v386)));
              double v389 = v388.f64[0]
                   + vaddvq_f64((float64x2_t)vandq_s8(vorrq_s8(vandq_s8((int8x16_t)v387, v382), *(int8x16_t *)v503), vorrq_s8((int8x16_t)vcltzq_f64(v387), (int8x16_t)vcgtzq_f64(v387))));
              if (fabs(v389) != 3.0
                || (v388.f64[0] = v389,
                    int32x2_t v390 = (int32x2_t)vbsl_s8((int8x8_t)vmovn_s64(vcgtzq_f64(v388)), (int8x8_t)0x100000001, (int8x8_t)vmovn_s64(vcltzq_f64(v388))), (vmvn_s8((int8x8_t)vceq_s32(v390, vdup_lane_s32(v390, 1))).u8[0] & 1) == 0))
              {
                float64x2_t v391 = vmlaq_f64(vmlaq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v373, v472), v468), v467, (float64x2_t)vzip2q_s64((int64x2_t)v373, v472)), v466, (float64x2_t)vzip1q_s64(v376, (int64x2_t)*(unint64_t *)&v470.f64[0]));
                float64x2_t v392 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v377, v468), v467, v378), v466, v379);
                float64x2_t v393 = (float64x2_t)vandq_s8(vorrq_s8(vandq_s8((int8x16_t)v391, v382), *(int8x16_t *)v503), vorrq_s8((int8x16_t)vcltzq_f64(v391), (int8x16_t)vcgtzq_f64(v391)));
                double v394 = v393.f64[0]
                     + vaddvq_f64((float64x2_t)vandq_s8(vorrq_s8(vandq_s8((int8x16_t)v392, v382), *(int8x16_t *)v503), vorrq_s8((int8x16_t)vcltzq_f64(v392), (int8x16_t)vcgtzq_f64(v392))));
                if (fabs(v394) != 3.0
                  || (v393.f64[0] = v394,
                      int32x2_t v395 = (int32x2_t)vbsl_s8((int8x8_t)vmovn_s64(vcgtzq_f64(v393)), (int8x8_t)0x100000001, (int8x8_t)vmovn_s64(vcltzq_f64(v393))), (vmvn_s8((int8x8_t)vceq_s32(v395, vdup_lane_s32(v395, 1))).u8[0] & 1) == 0))
                {
                  v396.f64[0] = v367[1].f64[0];
                  v396.f64[1] = v367->f64[0];
                  v397.f64[0] = v367[3].f64[0];
                  v397.f64[1] = v367[2].f64[0];
                  float64x2_t v398 = vnegq_f64(v369);
                  float64x2_t v399 = vnegq_f64(v368);
                  float64x2_t v400 = vmlaq_f64(vmulq_f64(v397, v398), v371, v396);
                  *(void *)&double v401 = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(v399, v371, 1), v370, v369, 1);
                  float64x2_t v402 = vmulq_n_f64((float64x2_t)vzip1q_s64(__pd, (int64x2_t)v373), v401);
                  float64x2_t v403 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_n_f64(v465, v401), v464, v400.f64[0]), v463, v400, 1);
                  float64x2_t v404 = vmlaq_laneq_f64(vmlaq_n_f64(v402, (float64x2_t)vzip2q_s64(__pd, (int64x2_t)v373), v400.f64[0]), (float64x2_t)vzip1q_s64((int64x2_t)*(unint64_t *)&v461.f64[0], v376), v400, 1);
                  float64x2_t v405 = (float64x2_t)vandq_s8(vorrq_s8(vandq_s8((int8x16_t)v404, v382), *(int8x16_t *)v503), vorrq_s8((int8x16_t)vcltzq_f64(v404), (int8x16_t)vcgtzq_f64(v404)));
                  double v406 = v405.f64[0]
                       + vaddvq_f64((float64x2_t)vandq_s8(vorrq_s8(vandq_s8((int8x16_t)v403, v382), *(int8x16_t *)v503), vorrq_s8((int8x16_t)vcltzq_f64(v403), (int8x16_t)vcgtzq_f64(v403))));
                  if (fabs(v406) != 3.0
                    || (v405.f64[0] = v406,
                        int32x2_t v407 = (int32x2_t)vbsl_s8((int8x8_t)vmovn_s64(vcgtzq_f64(v405)), (int8x8_t)0x100000001, (int8x8_t)vmovn_s64(vcltzq_f64(v405))), (vmvn_s8((int8x8_t)vceq_s32(v407, vdup_lane_s32(v407, 1))).u8[0] & 1) == 0))
                  {
                    v408.f64[0] = v367[5].f64[0];
                    v408.f64[1] = v367[4].f64[0];
                    v409.f64[0] = v367[2].f64[0];
                    *(void *)&v409.f64[1] = vextq_s8((int8x16_t)v371, (int8x16_t)v371, 8uLL).u64[0];
                    *(void *)&v397.f64[1] = vextq_s8((int8x16_t)v397, (int8x16_t)v397, 8uLL).u64[0];
                    float64x2_t v410 = vmlaq_f64(vmulq_f64(v408, vnegq_f64(v409)), v373, v397);
                    *(void *)&v409.f64[0] = *(_OWORD *)&vmlaq_f64(vmulq_laneq_f64(vnegq_f64(v370), v373, 1), v372, (float64x2_t)vdupq_laneq_s64((int64x2_t)v371, 1));
                    float64x2_t v411 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_n_f64(v465, v409.f64[0]), v464, v410.f64[0]), v463, v410, 1);
                    float64x2_t v412 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(__pd, (int64x2_t)v369), v409.f64[0]), (float64x2_t)vzip2q_s64(__pd, (int64x2_t)v369), v410.f64[0]), (float64x2_t)vzip1q_s64((int64x2_t)*(unint64_t *)&v461.f64[0], v374), v410, 1);
                    float64x2_t v413 = (float64x2_t)vandq_s8(vorrq_s8(vandq_s8((int8x16_t)v412, v382), *(int8x16_t *)v503), vorrq_s8((int8x16_t)vcltzq_f64(v412), (int8x16_t)vcgtzq_f64(v412)));
                    double v414 = v413.f64[0]
                         + vaddvq_f64((float64x2_t)vandq_s8(vorrq_s8(vandq_s8((int8x16_t)v411, v382), *(int8x16_t *)v503), vorrq_s8((int8x16_t)vcltzq_f64(v411), (int8x16_t)vcgtzq_f64(v411))));
                    if (fabs(v414) != 3.0
                      || (v413.f64[0] = v414,
                          int32x2_t v415 = (int32x2_t)vbsl_s8((int8x8_t)vmovn_s64(vcgtzq_f64(v413)), (int8x8_t)0x100000001, (int8x8_t)vmovn_s64(vcltzq_f64(v413))), (vmvn_s8((int8x8_t)vceq_s32(v415, vdup_lane_s32(v415, 1))).u8[0] & 1) == 0))
                    {
                      *(void *)&v398.f64[1] = vextq_s8((int8x16_t)v398, (int8x16_t)v398, 8uLL).u64[0];
                      *(void *)&v408.f64[1] = vextq_s8((int8x16_t)v408, (int8x16_t)v408, 8uLL).u64[0];
                      *(void *)&v396.f64[1] = vextq_s8((int8x16_t)v396, (int8x16_t)v396, 8uLL).u64[0];
                      v416.f64[0] = v367[4].f64[0];
                      *(void *)&v416.f64[1] = vextq_s8((int8x16_t)v373, (int8x16_t)v373, 8uLL).u64[0];
                      float64x2_t v417 = vmlaq_f64(vmulq_f64(v408, v398), v416, v396);
                      *(void *)&double v418 = *(_OWORD *)&vmlaq_f64(vmulq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v373, 1), v399), v372, (float64x2_t)vdupq_laneq_s64((int64x2_t)v369, 1));
                      float64x2_t v419 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_n_f64(v465, v418), v464, v417.f64[0]), v463, v417, 1);
                      float64x2_t v420 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(__pd, (int64x2_t)v371), v418), (float64x2_t)vzip2q_s64(__pd, (int64x2_t)v371), v417.f64[0]), (float64x2_t)vzip1q_s64((int64x2_t)*(unint64_t *)&v461.f64[0], v375), v417, 1);
                      float64x2_t v421 = (float64x2_t)vandq_s8(vorrq_s8(vandq_s8((int8x16_t)v420, v382), *(int8x16_t *)v503), vorrq_s8((int8x16_t)vcltzq_f64(v420), (int8x16_t)vcgtzq_f64(v420)));
                      double v422 = v421.f64[0]
                           + vaddvq_f64((float64x2_t)vandq_s8(vorrq_s8(vandq_s8((int8x16_t)v419, v382), *(int8x16_t *)v503), vorrq_s8((int8x16_t)vcltzq_f64(v419), (int8x16_t)vcgtzq_f64(v419))));
                      if (fabs(v422) != 3.0
                        || (v421.f64[0] = v422,
                            int32x2_t v423 = (int32x2_t)vbsl_s8((int8x8_t)vmovn_s64(vcgtzq_f64(v421)), (int8x8_t)0x100000001, (int8x8_t)vmovn_s64(vcltzq_f64(v421))), (vmvn_s8((int8x8_t)vceq_s32(v423, vdup_lane_s32(v423, 1))).u8[0] & 1) == 0))
                      {
                        float64x2_t v424 = vsubq_f64(v371, v369);
                        float64x2_t v425 = vsubq_f64(v370, v368);
                        float64x2_t v426 = vsubq_f64(v373, v369);
                        float64x2_t v427 = vsubq_f64(v372, v368);
                        float64x2_t v428 = vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v425), v426, 1), v427, v424, 1);
                        v427.f64[1] = v426.f64[0];
                        v425.f64[1] = v424.f64[0];
                        float64x2_t v429 = vmlaq_f64(vmulq_f64(v427, vnegq_f64(v424)), v426, v425);
                        float64x2_t v430 = vmulq_f64(v429, v429);
                        if (v430.f64[1] + vmulq_f64(v428, v428).f64[0] + v430.f64[0] <= 0.000001) {
                          goto LABEL_354;
                        }
                        float64x2_t v431 = (float64x2_t)vextq_s8((int8x16_t)v429, (int8x16_t)v429, 8uLL);
                        v432.f64[0] = v428.f64[0];
                        v432.f64[1] = v429.f64[0];
                        float64x2_t v433 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v377, v428.f64[0]), v378, v429.f64[0]), (float64x2_t)vzip1q_s64((int64x2_t)v368, (int64x2_t)v370), v431.f64[0]);
                        BOOL v434 = vmlaq_f64(vmlaq_laneq_f64(vmulq_f64(v428, v373), v429, v373, 1), v431, v372).f64[0] < -0.00000011920929
                            && v433.f64[1] < -0.00000011920929;
                        BOOL v435 = v434 && v433.f64[0] < -0.00000011920929;
                        int8x16_t v436 = (int8x16_t)vnegq_f64(v432);
                        int8x16_t v437 = (int8x16_t)vnegq_f64(v431);
                        unint64_t v438 = v435 ? -1 : 0;
                        float64x2_t v439 = (float64x2_t)vdupq_n_s64(v438);
                        float64x2_t v440 = (float64x2_t)vbslq_s8((int8x16_t)v439, v437, (int8x16_t)v431);
                        float64x2_t v441 = (float64x2_t)vbslq_s8((int8x16_t)v439, v436, (int8x16_t)v432);
                        v439.f64[0] = v465.f64[0];
                        *(void *)&v439.f64[1] = v453;
                        v442.f64[0] = v464.f64[0];
                        *(void *)&v442.f64[1] = v452;
                        float64x2_t v443 = vmlaq_laneq_f64(vmulq_n_f64(v439, v441.f64[0]), v442, v441, 1);
                        v442.f64[0] = v454;
                        *(void *)&v442.f64[1] = v451;
                        float64x2_t v444 = vmlaq_n_f64(v443, v442, v440.f64[0]);
                        if (v444.f64[0] >= -0.00000011920929
                          || v444.f64[1] >= -0.00000011920929
                          || vmlaq_f64(vmlaq_laneq_f64(vmulq_f64(v462, v441), v450, v441, 1), v440, v461).f64[0] >= -0.00000011920929)
                        {
LABEL_354:
                          v445 = operator new(0x18uLL);
                          v446 = (uint64_t *)(v359 + 24 * v366);
                          v445[4] = v309;
                          *((void *)v445 + 1) = v446;
                          uint64_t v447 = *v446;
                          *(void *)v445 = *v446;
                          *(void *)(v447 + 8) = v445;
                          uint64_t *v446 = (uint64_t)v445;
                          ++v446[2];
                        }
                      }
                    }
                  }
                }
              }
            }
            v343 = (int32x2_t *)v343[1];
          }
          while (v343 != v511);
        }
        std::__list_imp<ID3FrameInfo>::clear(v511);
        size_t v291 = v473;
      }
      std::__list_imp<ID3FrameInfo>::clear(buf);
      ++v309;
    }
    while (v309 != v457);
  }
  operator delete(v281);
  uint64_t v32 = 0;
  *(_DWORD *)(v291 + 296) = v214;
LABEL_359:
  if (v504[0])
  {
    v504[1] = v504[0];
    operator delete(v504[0]);
  }
  if (v505[0])
  {
    v505[1] = v505[0];
    operator delete(v505[0]);
  }
  if (v506[0])
  {
    v506[1] = v506[0];
    operator delete(v506[0]);
  }
  return v32;
}

void sub_19004CA58(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  *(void *)(v3 + 280) = v1;
  uint64_t v5 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v5;
    operator delete(v5);
  }
  unsigned int v6 = (void *)STACK[0x220];
  if (STACK[0x220])
  {
    STACK[0x228] = (unint64_t)v6;
    operator delete(v6);
  }
  unint64_t v7 = (void *)STACK[0x238];
  if (STACK[0x238])
  {
    STACK[0x240] = (unint64_t)v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

void sub_19004CA6C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p)
{
}

void sub_19004CA80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (__p)
  {
    operator delete(__p);
    if (!v70)
    {
LABEL_3:
      if (!v69)
      {
LABEL_8:
        int v72 = (void *)STACK[0x208];
        if (STACK[0x208])
        {
          STACK[0x210] = (unint64_t)v72;
          operator delete(v72);
        }
        uint64_t v73 = (void *)STACK[0x220];
        if (STACK[0x220])
        {
          STACK[0x228] = (unint64_t)v73;
          operator delete(v73);
        }
        uint64_t v74 = (void *)STACK[0x238];
        if (STACK[0x238])
        {
          STACK[0x240] = (unint64_t)v74;
          operator delete(v74);
        }
        _Unwind_Resume(a1);
      }
LABEL_15:
      JUMPOUT(0x19004CB60);
    }
  }
  else if (!v70)
  {
    goto LABEL_3;
  }
  operator delete(v70);
  if (!v69) {
    goto LABEL_8;
  }
  goto LABEL_15;
}

void sub_19004CAD0()
{
}

void sub_19004CAD8()
{
}

void sub_19004CAE0()
{
}

void sub_19004CAE8(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
    __cxa_rethrow();
  }
  JUMPOUT(0x19004CB94);
}

void sub_19004CB14(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  uint64_t v2 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)STACK[0x220];
  if (STACK[0x220])
  {
    STACK[0x228] = (unint64_t)v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)STACK[0x238];
  if (STACK[0x238])
  {
    STACK[0x240] = (unint64_t)v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void sub_19004CB20(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x19004CB94);
}

void sub_19004CB30(_Unwind_Exception *a1)
{
  uint64_t v2 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)STACK[0x220];
  if (STACK[0x220])
  {
    STACK[0x228] = (unint64_t)v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)STACK[0x238];
  if (STACK[0x238])
  {
    STACK[0x240] = (unint64_t)v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void sub_19004CB38()
{
}

void sub_19004CB44()
{
  std::__list_imp<ID3FrameInfo>::clear(&STACK[0x3D0]);
  std::__list_imp<ID3FrameInfo>::clear(v0 - 224);
  JUMPOUT(0x19004CB5CLL);
}

void std::vector<float>::reserve(void **a1, unint64_t a2)
{
  if (a2 > ((unsigned char *)a1[2] - (unsigned char *)*a1) >> 2)
  {
    if (a2 >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    int64_t v3 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a2);
    uint64_t v5 = &v4[v3 & 0xFFFFFFFFFFFFFFFCLL];
    unint64_t v7 = &v4[4 * v6];
    unint64_t v8 = (char *)*a1;
    double v9 = (char *)a1[1];
    float64x2_t v10 = v5;
    if (v9 != *a1)
    {
      float64x2_t v10 = v5;
      do
      {
        int v11 = *((_DWORD *)v9 - 1);
        v9 -= 4;
        *((_DWORD *)v10 - 1) = v11;
        v10 -= 4;
      }
      while (v9 != v8);
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void VBAP::lineUnitSphereIntersection(VBAP *this, const float *__A, float *a3, float *a4)
{
  float v14 = 0.0;
  uint64_t v13 = 0;
  vDSP_vsub((const float *)this, 1, __A, 1, __C, 1, 3uLL);
  vDSP_dotpr(__C, 1, __C, 1, &v14, 3uLL);
  vDSP_dotpr((const float *)this, 1, __C, 1, (float *)&v13 + 1, 3uLL);
  *((float *)&v13 + 1) = *((float *)&v13 + 1) + *((float *)&v13 + 1);
  vDSP_dotpr((const float *)this, 1, (const float *)this, 1, (float *)&v13, 3uLL);
  *(float *)&uint64_t v13 = *(float *)&v13 + -1.0;
  float v7 = (float)(*(float *)&v13 * (float)(v14 * -4.0)) + (float)(*((float *)&v13 + 1) * *((float *)&v13 + 1));
  if (v7 >= 0.0)
  {
    float v8 = sqrtf(v7);
    float v9 = (float)-(float)(*((float *)&v13 + 1) - v8) / (float)(v14 + v14);
    float __D = (float)-(float)(*((float *)&v13 + 1) + v8) / (float)(v14 + v14);
    float v11 = 1.0 - v9;
    float __B = 1.0 - __D;
    vDSP_vsmsma((const float *)this, 1, &__B, __A, 1, &__D, a3 + 3, 1, 3uLL);
    vDSP_vsmsma((const float *)this, 1, &v11, __A, 1, &v9, a3, 1, 3uLL);
  }
}

uint64_t *std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100](uint64_t *a1, _DWORD *a2)
{
  uint64_t v4 = *a1;
  uint64_t v6 = *(_DWORD **)(*a1 + 8);
  unint64_t v5 = *(void *)(*a1 + 16);
  if ((unint64_t)v6 >= v5)
  {
    float v8 = *(_DWORD **)v4;
    uint64_t v9 = ((uint64_t)v6 - *(void *)v4) >> 2;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    BOOL v12 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12) {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v13);
      float v8 = *(_DWORD **)v4;
      uint64_t v6 = *(_DWORD **)(v4 + 8);
    }
    else
    {
      uint64_t v14 = 0;
    }
    float64x2_t v15 = (_DWORD *)(v13 + 4 * v9);
    unint64_t v16 = v13 + 4 * v14;
    _DWORD *v15 = *a2;
    float v7 = v15 + 1;
    while (v6 != v8)
    {
      int v17 = *--v6;
      *--float64x2_t v15 = v17;
    }
    *(void *)uint64_t v4 = v15;
    *(void *)(v4 + 8) = v7;
    *(void *)(v4 + 16) = v16;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    _DWORD *v6 = *a2;
    float v7 = v6 + 1;
  }
  *(void *)(v4 + 8) = v7;
  return a1;
}

void *std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(void *result, void *a2)
{
  int64_t v3 = (void *)*result;
  uint64_t v2 = (void *)result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    *(void *)(v4 - 24) = 0;
    *(void *)(v4 - 16) = 0;
    v4 -= 24;
    *(void *)(v4 + 16) = 0;
    long long v5 = *(_OWORD *)(v2 - 3);
    v2 -= 3;
    *(_OWORD *)uint64_t v4 = v5;
    *(void *)(v4 + 16) = v2[2];
    void *v2 = 0;
    v2[1] = 0;
    v2[2] = 0;
  }
  a2[1] = v4;
  uint64_t v6 = (void *)*result;
  *BOOL result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::vector<double>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<double>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_19004CF8C(_Unwind_Exception *exception_object)
{
  int64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<double>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  BOOL result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void std::vector<std::vector<float>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  unint64_t v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      uint64_t v15 = v3 + 24 * a2;
      if (v4 != v15)
      {
        uint64_t v16 = a1[1];
        do
        {
          uint64_t v18 = *(void **)(v16 - 24);
          v16 -= 24;
          int v17 = v18;
          if (v18)
          {
            *(void *)(v4 - 16) = v17;
            operator delete(v17);
          }
          uint64_t v4 = v16;
        }
        while (v16 != v15);
      }
      a1[1] = v15;
    }
  }
  else
  {
    uint64_t v7 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - v4) >> 3) >= v6)
    {
      size_t v19 = 24 * ((24 * v6 - 24) / 0x18) + 24;
      bzero((void *)a1[1], v19);
      a1[1] = v4 + v19;
    }
    else
    {
      if (a2 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      v20[4] = a1 + 2;
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v3) >> 3);
      uint64_t v9 = 2 * v8;
      if (2 * v8 <= a2) {
        uint64_t v9 = a2;
      }
      if (v8 >= 0x555555555555555) {
        unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v10 = v9;
      }
      uint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v10);
      BOOL v12 = &v11[24 * v5];
      v20[0] = v11;
      v20[1] = v12;
      v20[3] = &v11[24 * v13];
      size_t v14 = 24 * ((24 * v6 - 24) / 0x18) + 24;
      bzero(v12, v14);
      _OWORD v20[2] = &v12[v14];
      std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(a1, v20);
      std::__split_buffer<std::vector<unsigned char>>::~__split_buffer((uint64_t)v20);
    }
  }
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<int *,int *,std::back_insert_iterator<std::vector<unsigned int>>>(int *a1, int *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    unint64_t v5 = a1;
    unint64_t v6 = *(_DWORD **)(a3 + 8);
    do
    {
      int v7 = *v5;
      unint64_t v8 = *(void *)(a3 + 16);
      if ((unint64_t)v6 >= v8)
      {
        unint64_t v10 = *(_DWORD **)a3;
        uint64_t v11 = ((uint64_t)v6 - *(void *)a3) >> 2;
        unint64_t v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 62) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v13 = v8 - (void)v10;
        if (v13 >> 1 > v12) {
          unint64_t v12 = v13 >> 1;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v12;
        }
        if (v14)
        {
          unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v14);
          unint64_t v10 = *(_DWORD **)a3;
          unint64_t v6 = *(_DWORD **)(a3 + 8);
        }
        else
        {
          uint64_t v15 = 0;
        }
        uint64_t v16 = (_DWORD *)(v14 + 4 * v11);
        _DWORD *v16 = v7;
        uint64_t v9 = v16 + 1;
        while (v6 != v10)
        {
          int v17 = *--v6;
          *--uint64_t v16 = v17;
        }
        *(void *)a3 = v16;
        *(void *)(a3 + 8) = v9;
        *(void *)(a3 + 16) = v14 + 4 * v15;
        if (v10) {
          operator delete(v10);
        }
      }
      else
      {
        _DWORD *v6 = v7;
        uint64_t v9 = v6 + 1;
      }
      *(void *)(a3 + 8) = v9;
      ++v5;
      unint64_t v6 = v9;
    }
    while (v5 != a2);
  }
}

char *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<float> *,std::vector<float> *,std::vector<float> *>(uint64_t a1, uint64_t a2, char *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      if ((char *)v5 != a3) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(a3, *(char **)v5, *(void *)(v5 + 8), (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 2);
      }
      v5 += 24;
      a3 += 24;
    }
    while (v5 != a2);
  }
  return a3;
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  unint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *uint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 2);
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_19004D384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = **(void **)(a1 + 16);
    uint64_t v3 = **(void **)(a1 + 8);
    if (v2 != v3)
    {
      uint64_t v4 = **(void **)(a1 + 16);
      do
      {
        uint64_t v6 = *(void **)(v4 - 24);
        v4 -= 24;
        uint64_t v5 = v6;
        if (v6)
        {
          *(void *)(v2 - 16) = v5;
          operator delete(v5);
        }
        uint64_t v2 = v4;
      }
      while (v4 != v3);
    }
  }
  return a1;
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<unsigned int>>,std::vector<unsigned int>*,std::vector<unsigned int>*,std::vector<unsigned int>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  unint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *uint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 2);
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_19004D4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::list<int> *,std::list<int> *,std::list<int> *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      if (a3 != v5)
      {
        uint64_t v6 = v5[1];
        for (i = (uint64_t *)a3[1]; (uint64_t *)v6 != v5 && i != a3; i = (uint64_t *)i[1])
        {
          *((_DWORD *)i + 4) = *(_DWORD *)(v6 + 16);
          uint64_t v6 = *(void *)(v6 + 8);
        }
        if (i == a3)
        {
          if ((uint64_t *)v6 != v5)
          {
            char v9 = (uint64_t *)operator new(0x18uLL);
            unint64_t v10 = v9;
            *char v9 = 0;
            v9[1] = 0;
            *((_DWORD *)v9 + 4) = *(_DWORD *)(v6 + 16);
            uint64_t v11 = *(void *)(v6 + 8);
            if ((uint64_t *)v11 == v5)
            {
              uint64_t v12 = 1;
            }
            else
            {
              uint64_t v12 = 1;
              uint64_t v13 = v9;
              do
              {
                char v9 = (uint64_t *)operator new(0x18uLL);
                *char v9 = (uint64_t)v13;
                v9[1] = 0;
                *((_DWORD *)v9 + 4) = *(_DWORD *)(v11 + 16);
                v13[1] = (uint64_t)v9;
                ++v12;
                uint64_t v11 = *(void *)(v11 + 8);
                uint64_t v13 = v9;
              }
              while ((uint64_t *)v11 != v5);
            }
            uint64_t v14 = *a3;
            *(void *)(v14 + 8) = v10;
            *unint64_t v10 = v14;
            *a3 = (uint64_t)v9;
            v9[1] = (uint64_t)a3;
            a3[2] += v12;
          }
        }
        else
        {
          std::list<int>::erase((uint64_t)a3, i, a3);
        }
      }
      v5 += 3;
      a3 += 3;
    }
    while (v5 != a2);
  }
  return a3;
}

void sub_19004D5E4(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_19004D604(_Unwind_Exception *a1)
{
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::list<int>>,std::list<int>*,std::list<int>*,std::list<int>*>(uint64_t a1, uint64_t a2, void *a3)
{
  if (a1 == a2) {
    return a3;
  }
  uint64_t v4 = a1;
  uint64_t v5 = 0;
  uint64_t v6 = a3;
  do
  {
    void *v6 = v6;
    v6[1] = v6;
    v6[2] = 0;
    uint64_t v7 = *(void *)(v4 + 8);
    if (v7 != v4)
    {
      uint64_t v8 = 1;
      char v9 = v6;
      do
      {
        unint64_t v10 = operator new(0x18uLL);
        v10[4] = *(_DWORD *)(v7 + 16);
        *(void *)unint64_t v10 = v9;
        *((void *)v10 + 1) = v6;
        *((void *)v9 + 1) = v10;
        void *v6 = v10;
        v6[2] = v8;
        uint64_t v7 = *(void *)(v7 + 8);
        ++v8;
        char v9 = v10;
      }
      while (v7 != v4);
    }
    v4 += 24;
    v6 += 3;
    v5 += 24;
  }
  while (v4 != a2);
  return v6;
}

void sub_19004D6D8(_Unwind_Exception *a1)
{
  std::__list_imp<ID3FrameInfo>::clear(v2);
  if (v2 != v1)
  {
    uint64_t v5 = v1 - 3;
    do
    {
      std::__list_imp<ID3FrameInfo>::clear((void *)((char *)v5 + v3));
      v3 -= 24;
    }
    while (v3);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::list<int>::erase(uint64_t a1, uint64_t *__p, uint64_t *a3)
{
  if (__p != a3)
  {
    uint64_t v5 = *a3;
    uint64_t v6 = *__p;
    *(void *)(v6 + 8) = *(void *)(*a3 + 8);
    **(void **)(v5 + 8) = v6;
    do
    {
      uint64_t v7 = (uint64_t *)__p[1];
      --*(void *)(a1 + 16);
      operator delete(__p);
      uint64_t __p = v7;
    }
    while (v7 != a3);
  }
  return a3;
}

size_t VBAP::VBAP(size_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t **a5)
{
  buf[5] = *(float32x2_t *)MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  int64x2_t v375 = (__int32 **)(a1 + 8);
  uint64_t v8 = (void **)(a1 + 32);
  unint64_t v9 = ((a3[1] - *a3) >> 1) + ((a3[1] - *a3) >> 2);
  buf[0].i32[0] = 0;
  std::vector<float>::vector((void *)(a1 + 32), v9, buf);
  unint64_t v10 = (const float **)(a1 + 56);
  unint64_t v11 = ((a3[1] - *a3) >> 1) + ((a3[1] - *a3) >> 2);
  buf[0].i32[0] = 0;
  int64x2_t v376 = v8;
  std::vector<float>::vector((void *)(a1 + 56), v11, buf);
  buf[0].i32[0] = 0;
  int64x2_t v374 = (char **)(a1 + 80);
  std::vector<float>::vector((void *)(a1 + 80), 6uLL, buf);
  *(_OWORD *)(a1 + 104) = 0u;
  float64x2_t v373 = (char **)(a1 + 104);
  *(_OWORD *)(a1 + 152) = 0u;
  uint64_t v12 = (uint64_t *)(a1 + 152);
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = a1 + 176;
  *(void *)(a1 + 184) = a1 + 176;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = a1 + 200;
  *(void *)(a1 + 208) = a1 + 200;
  *(void *)(a1 + 216) = 0;
  std::__list_imp<ID3FrameInfo>::clear((void *)(a1 + 176));
  std::__list_imp<ID3FrameInfo>::clear((void *)(a1 + 200));
  *(_OWORD *)(a1 + 224) = 0u;
  uint64_t v13 = (void *)(a1 + 224);
  *(_WORD *)(a1 + 314) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(void *)(a1 + 288) = 0;
  *(_DWORD *)a1 = 1;
  uint64_t v14 = a3[1] - *a3;
  *(_DWORD *)(a1 + 300) = v14 >> 2;
  if ((v14 >> 2) && (a2[1] - *a2) >> 2 == v14 >> 2)
  {
    v367 = (char **)(a1 + 128);
    *(void *)(a1 + 16) = *(void *)(a1 + 8);
    std::vector<float>::vector(v392, ((unint64_t)v14 >> 2));
    std::vector<float>::vector(v391, *(unsigned int *)(a1 + 300));
    std::vector<float>::vector(v390, *(unsigned int *)(a1 + 300));
    LODWORD(v15) = *(_DWORD *)(a1 + 300);
    if (v15)
    {
      unint64_t v16 = 0;
      uint64_t v17 = *a2;
      uint64_t v18 = *a3;
      size_t v19 = *(__int32 **)(a1 + 16);
      do
      {
        int v20 = *(_DWORD *)(v17 + 4 * v16);
        int v21 = *(_DWORD *)(v18 + 4 * v16);
        unint64_t v22 = *(void *)(a1 + 24);
        if ((unint64_t)v19 >= v22)
        {
          long long v24 = *v375;
          uint64_t v25 = ((char *)v19 - (char *)*v375) >> 3;
          unint64_t v26 = v25 + 1;
          if ((unint64_t)(v25 + 1) >> 61) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v27 = v22 - (void)v24;
          if (v27 >> 2 > v26) {
            unint64_t v26 = v27 >> 2;
          }
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v28 = v26;
          }
          if (v28)
          {
            if (v28 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            float64x2_t v29 = (char *)operator new(8 * v28);
          }
          else
          {
            float64x2_t v29 = 0;
          }
          float64x2_t v30 = &v29[8 * v25];
          *(_DWORD *)float64x2_t v30 = v20;
          *((_DWORD *)v30 + 1) = v21;
          size_t v31 = v30;
          if (v19 != v24)
          {
            do
            {
              uint64_t v32 = *((void *)v19 - 1);
              v19 -= 2;
              *((void *)v31 - 1) = v32;
              v31 -= 8;
            }
            while (v19 != v24);
            size_t v19 = *v375;
          }
          long long v23 = (__int32 *)(v30 + 8);
          *(void *)(a1 + 8) = v31;
          *(void *)(a1 + 16) = v30 + 8;
          *(void *)(a1 + 24) = &v29[8 * v28];
          if (v19) {
            operator delete(v19);
          }
        }
        else
        {
          *size_t v19 = v20;
          v19[1] = v21;
          long long v23 = v19 + 2;
        }
        *(void *)(a1 + 16) = v23;
        uint64_t v17 = *a2;
        uint64_t v18 = *a3;
        uint64_t v33 = *(void *)(a1 + 56);
        unint64_t v34 = (float *)(v33 + 4 * (3 * v16));
        double v35 = *(float *)(*a2 + 4 * v16) * 0.0174532925;
        __double2 v36 = __sincos_stret(*(float *)(*a3 + 4 * v16) * 0.0174532925);
        __double2 v37 = __sincos_stret(v35);
        float v38 = v37.__cosval * v36.__cosval;
        float v39 = v37.__sinval * v36.__cosval;
        *unint64_t v34 = v38;
        v34[1] = v39;
        float sinval = v36.__sinval;
        v34[2] = sinval;
        unint64_t v41 = v392[0];
        *((float *)v392[0] + v16) = v38;
        uint64_t v42 = v391[0];
        v391[0][v16] = *(float *)(v33 + 4 * (3 * v16 + 1));
        uint64_t v43 = v390[0];
        v390[0][v16] = *(float *)(v33 + 4 * (3 * v16 + 2));
        ++v16;
        unint64_t v15 = *(unsigned int *)(a1 + 300);
        size_t v19 = v23;
        uint64_t v8 = v376;
      }
      while (v16 < v15);
      uint64_t v12 = (uint64_t *)(a1 + 152);
      unint64_t v10 = (const float **)(a1 + 56);
      uint64_t v13 = (void *)(a1 + 224);
    }
    else
    {
      unint64_t v41 = v392[0];
      uint64_t v42 = v391[0];
      uint64_t v43 = v390[0];
    }
    if (VBAP::find_duplicate_vertex(v41, v42, v43, (const float *)v15))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        buf[0].i32[0] = 136315906;
        *(float32x2_t *)((char *)buf + 4) = (float32x2_t)"VBAP.cpp";
        buf[1].i16[2] = 1024;
        *(__int32 *)((char *)&buf[1].i32[1] + 2) = 112;
        buf[2].i16[1] = 2080;
        *(float32x2_t *)((char *)&buf[2] + 4) = (float32x2_t)"initialize";
        buf[3].i16[2] = 1024;
        *(__int32 *)((char *)&buf[3].i32[1] + 2) = 112;
        _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d CADSPUtility:%s:%d: VBAP Error; Duplicate vertices were found",
          (uint8_t *)buf,
          0x22u);
      }
      int v46 = -50;
      goto LABEL_377;
    }
    if (*(void *)(a1 + 16) - *(void *)(a1 + 8) == 16)
    {
      LODWORD(__C) = 0;
      vDSP_distancesq(*v10, 1, *v10 + 3, 1, (float *)&__C, 3uLL);
      if (fabsf(*(float *)&__C + -4.0) < 0.00001)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
        {
          buf[0].i32[0] = 136315906;
          *(float32x2_t *)((char *)buf + 4) = (float32x2_t)"VBAP.cpp";
          buf[1].i16[2] = 1024;
          *(__int32 *)((char *)&buf[1].i32[1] + 2) = 121;
          buf[2].i16[1] = 2080;
          *(float32x2_t *)((char *)&buf[2] + 4) = (float32x2_t)"initialize";
          buf[3].i16[2] = 1024;
          *(__int32 *)((char *)&buf[3].i32[1] + 2) = 121;
          _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d CADSPUtility:%s:%d: Diametrically opposed speakers; No need to generate convex hull",
            (uint8_t *)buf,
            0x22u);
        }
        int v46 = 0;
        *(unsigned char *)(a1 + 314) = 1;
        goto LABEL_377;
      }
      *(unsigned char *)(a1 + 314) = 0;
    }
    vDSP_Length v47 = *(unsigned int *)(a1 + 300);
    if (v47 == 1)
    {
      *(_WORD *)(a1 + 312) = 1;
      buf[0].i32[0] = 0;
      std::vector<float>::resize(v374, 0, buf);
      goto LABEL_376;
    }
    float64x2_t v370 = v10;
    vDSP_meanv(*v10, 3, &__B, v47);
    vDSP_meanv((const float *)(*(void *)(a1 + 56) + 4), 3, &v388, *(unsigned int *)(a1 + 300));
    vDSP_meanv((const float *)(*(void *)(a1 + 56) + 8), 3, &v389, *(unsigned int *)(a1 + 300));
    std::vector<float>::vector(v386, (3 * *(_DWORD *)(a1 + 300)));
    std::vector<double>::vector(v385, *(unsigned int *)(a1 + 300));
    std::vector<double>::vector(v384, *(unsigned int *)(a1 + 300));
    std::vector<double>::vector(v383, *(unsigned int *)(a1 + 300));
    if (*(_DWORD *)(a1 + 300))
    {
      unint64_t v55 = 0;
      double v56 = *v370;
      unsigned int v57 = 2;
      do
      {
        uint64_t v58 = v57 - 2;
        vDSP_vsub(&__B, 1, &v56[v58], 1, (float *)v386[0] + v58, 1, 3uLL);
        double v56 = *(const float **)(a1 + 56);
        uint64_t v59 = (float64_t *)v385[0];
        *((double *)v385[0] + v55) = v56[v58];
        uint64_t v60 = v384[0];
        v384[0][v55] = v56[v57 - 1];
        double v48 = v56[v57];
        double v61 = v383[0];
        v383[0][v55++] = v48;
        double v62 = (const double *)*(unsigned int *)(a1 + 300);
        v57 += 3;
      }
      while (v55 < (unint64_t)v62);
    }
    else
    {
      double v62 = 0;
      uint64_t v59 = (float64_t *)v385[0];
      uint64_t v60 = v384[0];
      double v61 = v383[0];
    }
    BOOL v63 = CDelaunayTriangles3D::check_coplanar(v59, v60, v61, v62, v48, v49, v50, v51, v52, v53, v54);
    *(unsigned char *)(a1 + 312) = v63;
    *(unsigned char *)(a1 + 313) = !v63;
    int v64 = *(_DWORD *)a1;
    if (v63)
    {
      if (v64 == 1)
      {
        int v64 = 0;
        *(_DWORD *)a1 = 0;
      }
      float64x2_t v380 = 0;
      float64x2_t v381 = 0;
      int8x16_t v382 = 0;
      uint64_t __p = 0;
      float64x2_t v378 = 0;
      float64x2_t v379 = 0;
      goto LABEL_203;
    }
    float64x2_t v380 = 0;
    float64x2_t v381 = 0;
    int8x16_t v382 = 0;
    uint64_t __p = 0;
    float64x2_t v378 = 0;
    float64x2_t v379 = 0;
    if (v64 != 1) {
      goto LABEL_203;
    }
    int v46 = VBAP::delaunayTriangulation(a1, v386, a4, a5);
    if (v46)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        buf[0].i32[0] = 136315906;
        *(float32x2_t *)((char *)buf + 4) = (float32x2_t)"VBAP.cpp";
        buf[1].i16[2] = 1024;
        *(__int32 *)((char *)&buf[1].i32[1] + 2) = 163;
        buf[2].i16[1] = 2080;
        *(float32x2_t *)((char *)&buf[2] + 4) = (float32x2_t)"initialize";
        buf[3].i16[2] = 1024;
        *(__int32 *)((char *)&buf[3].i32[1] + 2) = 163;
        float64_t v65 = MEMORY[0x1E4F14500];
        uint64_t v66 = "%25s:%-5d CADSPUtility:%s:%d: VBAP error, Delaunay triangulation issue";
        goto LABEL_364;
      }
LABEL_365:
      char v364 = 0;
      goto LABEL_367;
    }
    __A = 0;
    int32x2_t v395 = 0;
    uint64_t v396 = 0;
    unint64_t v67 = (uint64_t)(*(void *)(a1 + 232) - *(void *)(a1 + 224)) >> 2;
    v413.i32[0] = 0;
    float64x2_t v368 = v13;
    float64x2_t v369 = v12;
    std::vector<float>::resize((char **)&__A, v67, &v413);
    uint64_t v70 = __A;
    if ((unint64_t)((char *)v395 - (char *)__A) >= 0xC)
    {
      LODWORD(v71) = 0;
      unint64_t v72 = (((char *)v395 - (char *)__A) >> 2) / 3uLL;
      uint64_t v73 = *v13;
      uint64_t v74 = (float *)v386[0];
      do
      {
        uint64_t v75 = 0;
        uint64_t v76 = (3 * v71);
        int v77 = 3 * *(_DWORD *)(v73 + 4 * v76);
        int v78 = 3 * *(_DWORD *)(v73 + 4 * (v76 + 1));
        int v79 = 3 * *(_DWORD *)(v73 + 4 * (v76 + 2));
        do
        {
          float v80 = v74[(v77 + v75)];
          float v81 = v74[(v79 + v75)];
          buf[0].f32[v75] = v74[(v78 + v75)] - v80;
          *((float *)&__C + v75++) = v81 - v80;
        }
        while (v75 != 3);
        uint64_t v82 = (float32x2_t *)((char *)v70 + 4 * v76);
        float64x2_t v83 = vcvtq_f64_f32(buf[0]);
        v68.f64[0] = buf[1].f32[0];
        float64x2_t v84 = vcvtq_f64_f32((float32x2_t)__C);
        v69.f64[0] = *(float *)&v406;
        float64x2_t v85 = vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v68), v84, 1), v69, v83, 1);
        v69.f64[1] = v84.f64[0];
        v68.f64[1] = v83.f64[0];
        float64x2_t v86 = vmlaq_f64(vmulq_f64(v69, vnegq_f64(v83)), v84, v68);
        float64x2_t v68 = vmulq_f64(v86, v86);
        v84.f64[0] = vmulq_f64(v85, v85).f64[0];
        v85.f64[1] = v86.f64[0];
        v68.f64[0] = 1.0 / sqrt(v68.f64[1] + v84.f64[0] + v68.f64[0]);
        float32x2_t *v82 = vcvt_f32_f64(vmulq_n_f64(v85, v68.f64[0]));
        *(float *)v86.f64 = vmulq_laneq_f64(v68, v86, 1).f64[0];
        v82[1].i32[0] = LODWORD(v86.f64[0]);
        unint64_t v71 = (v71 + 1);
      }
      while (v72 > v71);
      unint64_t v366 = v72;
      memset(buf, 0, 24);
      float v414 = 0.0;
      float32x2_t v413 = 0;
      int v412 = 0;
      float64x2_t v411 = 0;
      std::vector<std::vector<unsigned int>>::__clear[abi:ne180100](v12);
      LODWORD(v87) = 0;
      float32x2_t v88 = (float32x2_t)vdup_n_s32(0x47C35000u);
      do
      {
        uint64_t v89 = (3 * v87);
        v90.i32[0] = *((_DWORD *)v70 + v89);
        v90.i32[1] = *((_DWORD *)v70 + (v89 + 1));
        float32x2_t v413 = vrnda_f32(vmul_f32(v90, v88));
        float v414 = roundf(*((float *)v70 + (v89 + 2)) * 100000.0);
        if (v87)
        {
          if (*(void *)&buf[1] != *(void *)buf)
          {
            uint64_t v91 = 0;
            unsigned int v92 = 0;
            unint64_t v93 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&buf[1] - *(void *)buf) >> 3);
            while (1)
            {
              uint64_t v94 = 0;
              uint64_t v95 = *(void *)(*(void *)buf + 24 * v91);
              float64x2_t v411 = *(void ***)v95;
              int v412 = *(_DWORD *)(v95 + 8);
              do
              {
                float v96 = *(float *)((char *)&v411 + v94 * 4);
                float v97 = v413.f32[v94];
              }
              while (v96 == v97 && v94++ != 2);
              if (v96 == v97) {
                goto LABEL_74;
              }
              if (v93 - 1 == v91) {
                break;
              }
              uint64_t v91 = ++v92;
              if (v93 <= v92) {
                goto LABEL_75;
              }
            }
            std::vector<std::vector<float>>::resize((uint64_t *)buf, v92 + 2);
            uint64_t v91 = v92 + 1;
            __C = (float32x2_t *)(*(void *)buf + 24 * v91);
            std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100]((uint64_t *)&__C, &v413);
            std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100]((uint64_t *)&__C, (_DWORD *)&v413 + 1);
            std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100]((uint64_t *)&__C, &v414);
            std::vector<std::vector<float>>::resize(v369, v92 + 2);
LABEL_74:
            std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<int *,int *,std::back_insert_iterator<std::vector<unsigned int>>>((int *)(*v368 + 4 * v89), (int *)(*v368 + 4 * v89 + 12), *v369 + 24 * v91);
          }
        }
        else
        {
          std::vector<std::vector<float>>::resize((uint64_t *)buf, 1uLL);
          __C = (float32x2_t *)buf[0];
          std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100]((uint64_t *)&__C, &v413);
          std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100]((uint64_t *)&__C, (_DWORD *)&v413 + 1);
          std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100]((uint64_t *)&__C, &v414);
          std::vector<std::vector<float>>::resize(v369, 1uLL);
          std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<int *,int *,std::back_insert_iterator<std::vector<unsigned int>>>((int *)(*v368 + 4 * v89), (int *)(*v368 + 4 * (v89 + 3)), *v369);
        }
LABEL_75:
        unint64_t v87 = (v87 + 1);
      }
      while (v366 > v87);
    }
    else
    {
      memset(buf, 0, 24);
      float v414 = 0.0;
      float32x2_t v413 = 0;
      int v412 = 0;
      float64x2_t v411 = 0;
      std::vector<std::vector<unsigned int>>::__clear[abi:ne180100](v12);
    }
    unint64_t v99 = *(__int32 ***)(a1 + 152);
    if (v99 == *(__int32 ***)(a1 + 160))
    {
      uint64_t v12 = v369;
    }
    else
    {
      uint64_t v12 = v369;
      do
      {
        unint64_t v100 = *v99;
        unsigned int v101 = v99[1];
        if (*v99 != v101)
        {
          uint64_t v102 = *v99;
          do
          {
            __int32 v103 = *v102++;
            int v104 = wmemchr(v102, v103, v101 - v102);
            if (v104) {
              int v105 = v104;
            }
            else {
              int v105 = v101;
            }
            uint64_t v106 = v105 - v102 + 1;
            uint64_t v107 = &v100[v106];
            uint64_t v108 = v107 + 1;
            if (v107 != v101 && v108 != v101)
            {
              do
              {
                if (*v108 != *v100) {
                  v100[v106++] = *v108;
                }
                ++v108;
              }
              while (v108 != v101);
            }
            unsigned int v101 = &v100[v106];
            unint64_t v100 = v102;
          }
          while (v106 != 1);
          if (v102 != v99[1]) {
            v99[1] = v102;
          }
        }
        v99 += 3;
      }
      while (v99 != *(__int32 ***)(a1 + 160));
    }
    uint64_t v8 = v376;
    if (v12 != (uint64_t *)&__p)
    {
      uint64_t v110 = *v12;
      unint64_t v111 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v99 - *v12) >> 3);
      uint64_t v112 = (uint64_t)v379;
      int v113 = (char *)__p;
      if (0xAAAAAAAAAAAAAAABLL * ((v379 - (unsigned char *)__p) >> 3) < v111)
      {
        if (__p)
        {
          int v114 = v378;
          int v115 = __p;
          if (v378 != __p)
          {
            uint64_t v116 = v378;
            do
            {
              uint64_t v118 = (void *)*((void *)v116 - 3);
              v116 -= 24;
              uint64_t v117 = v118;
              if (v118)
              {
                *((void *)v114 - 2) = v117;
                operator delete(v117);
              }
              int v114 = v116;
            }
            while (v116 != v113);
            int v115 = __p;
          }
          float64x2_t v378 = v113;
          operator delete(v115);
          uint64_t v112 = 0;
          uint64_t __p = 0;
          float64x2_t v378 = 0;
          float64x2_t v379 = 0;
        }
        if (v111 > 0xAAAAAAAAAAAAAAALL) {
          goto LABEL_393;
        }
        unint64_t v119 = 0xAAAAAAAAAAAAAAABLL * (v112 >> 3);
        uint64_t v120 = 2 * v119;
        if (2 * v119 <= v111) {
          uint64_t v120 = v111;
        }
        unint64_t v121 = v119 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v120;
        if (v121 > 0xAAAAAAAAAAAAAAALL) {
LABEL_393:
        }
          std::vector<float>::__throw_length_error[abi:ne180100]();
        uint64_t __p = std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v121);
        float64x2_t v378 = (char *)__p;
        float64x2_t v379 = (char *)__p + 24 * v122;
        unint64_t v123 = (char *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<unsigned int>>,std::vector<unsigned int>*,std::vector<unsigned int>*,std::vector<unsigned int>*>((uint64_t)&v379, v110, (uint64_t)v99, __p);
        goto LABEL_116;
      }
      if (0xAAAAAAAAAAAAAAABLL * ((v378 - (unsigned char *)__p) >> 3) < v111)
      {
        uint64_t v124 = v110 + 8 * ((v378 - (unsigned char *)__p) >> 3);
        std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<float> *,std::vector<float> *,std::vector<float> *>(*v12, v124, (char *)__p);
        unint64_t v123 = (char *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<unsigned int>>,std::vector<unsigned int>*,std::vector<unsigned int>*,std::vector<unsigned int>*>((uint64_t)&v379, v124, (uint64_t)v99, v378);
LABEL_116:
        float64x2_t v378 = v123;
        goto LABEL_123;
      }
      int v125 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<float> *,std::vector<float> *,std::vector<float> *>(*v12, (uint64_t)v99, (char *)__p);
      uint64_t v126 = v378;
      if (v378 != v125)
      {
        uint64_t v127 = v378;
        do
        {
          unint64_t v129 = (void *)*((void *)v127 - 3);
          v127 -= 24;
          unsigned int v128 = v129;
          if (v129)
          {
            *((void *)v126 - 2) = v128;
            operator delete(v128);
          }
          uint64_t v126 = v127;
        }
        while (v127 != v125);
      }
      float64x2_t v378 = v125;
    }
LABEL_123:
    uint64_t v131 = (uint64_t)buf[0];
    uint64_t v130 = (uint64_t)buf[1];
    unint64_t v132 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&buf[1] - *(void *)buf) >> 3);
    uint64_t v133 = (uint64_t)v382;
    int32x2_t v134 = (char *)v380;
    if (0xAAAAAAAAAAAAAAABLL * ((v382 - (unsigned char *)v380) >> 3) >= v132)
    {
      if (0xAAAAAAAAAAAAAAABLL * ((v381 - (unsigned char *)v380) >> 3) >= v132)
      {
        uint64_t v146 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<float> *,std::vector<float> *,std::vector<float> *>(*(void *)buf, *(void *)&buf[1], (char *)v380);
        uint64_t v299 = v381;
        if (v381 != v146)
        {
          v300 = v381;
          do
          {
            uint64_t v302 = (void *)*((void *)v300 - 3);
            v300 -= 24;
            uint64_t v301 = v302;
            if (v302)
            {
              *((void *)v299 - 2) = v301;
              operator delete(v301);
            }
            uint64_t v299 = v300;
          }
          while (v300 != v146);
        }
        goto LABEL_143;
      }
      uint64_t v145 = *(void *)buf + 8 * ((v381 - (unsigned char *)v380) >> 3);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<float> *,std::vector<float> *,std::vector<float> *>(*(void *)buf, v145, (char *)v380);
      unsigned int v144 = (char *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>((uint64_t)&v382, v145, v130, v381);
    }
    else
    {
      if (v380)
      {
        uint64_t v135 = v381;
        float64x2_t v136 = v380;
        if (v381 != v380)
        {
          int v137 = v381;
          do
          {
            float64x2_t v139 = (void *)*((void *)v137 - 3);
            v137 -= 24;
            uint64_t v138 = v139;
            if (v139)
            {
              *((void *)v135 - 2) = v138;
              operator delete(v138);
            }
            uint64_t v135 = v137;
          }
          while (v137 != v134);
          float64x2_t v136 = v380;
        }
        float64x2_t v381 = v134;
        operator delete(v136);
        uint64_t v133 = 0;
        float64x2_t v380 = 0;
        float64x2_t v381 = 0;
        int8x16_t v382 = 0;
      }
      if (v132 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_392;
      }
      unint64_t v140 = 0xAAAAAAAAAAAAAAABLL * (v133 >> 3);
      uint64_t v141 = 2 * v140;
      if (2 * v140 <= v132) {
        uint64_t v141 = 0xAAAAAAAAAAAAAAABLL * ((v130 - v131) >> 3);
      }
      unint64_t v142 = v140 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v141;
      if (v142 > 0xAAAAAAAAAAAAAAALL) {
LABEL_392:
      }
        std::vector<float>::__throw_length_error[abi:ne180100]();
      float64x2_t v380 = std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v142);
      float64x2_t v381 = (char *)v380;
      int8x16_t v382 = (char *)v380 + 24 * v143;
      unsigned int v144 = (char *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>((uint64_t)&v382, v131, v130, v380);
    }
    uint64_t v146 = v144;
LABEL_143:
    float64x2_t v381 = v146;
    LODWORD(v403) = 925353388;
    BOOL v147 = (const float **)v380;
    if (v146 != v380)
    {
      uint64_t v148 = 0;
      unsigned int v149 = 1;
      do
      {
        vDSP_vsmul(v147[3 * v148], 1, (const float *)&v403, (float *)v147[3 * v148], 1, 3uLL);
        uint64_t v148 = v149;
        BOOL v147 = (const float **)v380;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((v381 - (unsigned char *)v380) >> 3) > v149++);
    }
    size_t v151 = *(void **)(a1 + 152);
    size_t v152 = *(void **)(a1 + 160);
    if (v151 == v152)
    {
      size_t v152 = *(void **)(a1 + 152);
      unint64_t v154 = v370;
    }
    else
    {
      float32x2_t v153 = buf[0];
      unint64_t v154 = v370;
      do
      {
        if (v151[1] - *v151 > 0xFuLL)
        {
          v151 += 3;
          *(void *)&v153 += 24;
        }
        else
        {
          if (v151 + 3 == v152)
          {
            unint64_t v157 = v151;
          }
          else
          {
            uint64_t v155 = v151;
            do
            {
              unsigned __int8 v156 = (void *)*v155;
              if (*v155)
              {
                v155[1] = v156;
                operator delete(v156);
                *uint64_t v155 = 0;
                v155[1] = 0;
                v155[2] = 0;
              }
              unint64_t v157 = v155 + 3;
              *(_OWORD *)uint64_t v155 = *(_OWORD *)(v155 + 3);
              v155[2] = v155[5];
              v155[4] = 0;
              v155[5] = 0;
              v155[3] = 0;
              unint64_t v158 = v155 + 6;
              v155 += 3;
            }
            while (v158 != v152);
            size_t v152 = *(void **)(a1 + 160);
          }
          if (v152 != v157)
          {
            uint64_t v159 = v152;
            do
            {
              unint64_t v161 = (void *)*(v159 - 3);
              v159 -= 3;
              uint64_t v160 = v161;
              if (v161)
              {
                *(v152 - 2) = v160;
                operator delete(v160);
              }
              size_t v152 = v159;
            }
            while (v159 != v157);
          }
          *(void *)(a1 + 160) = v157;
          float32x2_t v162 = (float32x2_t)(*(void *)&v153 + 24);
          float32x2_t v163 = buf[1];
          if (*(void *)&v153 + 24 == *(void *)&buf[1])
          {
            float32x2_t v166 = v153;
          }
          else
          {
            float32x2_t v164 = v153;
            do
            {
              v165 = **(void ***)&v164;
              if (**(void **)&v164)
              {
                *(void *)(*(void *)&v164 + 8) = v165;
                operator delete(v165);
                **(void **)&float32x2_t v164 = 0;
                *(void *)(*(void *)&v164 + 8) = 0;
                *(void *)(*(void *)&v164 + 16) = 0;
              }
              float32x2_t v166 = (float32x2_t)(*(void *)&v164 + 24);
              *(_OWORD *)*(void *)&float32x2_t v164 = *(_OWORD *)(*(void *)&v164 + 24);
              *(void *)(*(void *)&v164 + 16) = *(void *)(*(void *)&v164 + 40);
              *(void *)(*(void *)&v164 + 32) = 0;
              *(void *)(*(void *)&v164 + 40) = 0;
              *(void *)(*(void *)&v164 + 24) = 0;
              uint64_t v167 = *(void *)&v164 + 48;
              *(void *)&v164 += 24;
            }
            while (v167 != *(void *)&v163);
            float32x2_t v162 = buf[1];
          }
          uint64_t v8 = v376;
          if (*(void *)&v162 != *(void *)&v166)
          {
            float32x2_t v168 = v162;
            do
            {
              float64x2_t v170 = *(void **)(*(void *)&v168 - 24);
              *(void *)&v168 -= 24;
              float64x2_t v169 = v170;
              if (v170)
              {
                *(void *)(*(void *)&v162 - 16) = v169;
                operator delete(v169);
              }
              float32x2_t v162 = v168;
            }
            while (*(void *)&v168 != *(void *)&v166);
          }
          buf[1] = v166;
          size_t v152 = *(void **)(a1 + 160);
          unint64_t v154 = v370;
        }
      }
      while (v151 != v152);
      size_t v151 = (void *)*v12;
    }
    LODWORD(__C) = 0;
    std::vector<float>::resize(v374, v152 - v151, &__C);
    unint64_t v171 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 3);
    LODWORD(__C) = 0;
    std::vector<float>::resize(v373, v171, &__C);
    uint64_t v172 = *(void *)(a1 + 152);
    if (*(void *)(a1 + 160) != v172)
    {
      unint64_t v173 = 0;
      do
      {
        float64x2_t v174 = (int **)(v172 + 24 * v173);
        float64x2_t v175 = *v174;
        uint64_t v176 = v174[1];
        uint64_t v177 = *v374;
        uint64_t v178 = (char *)v176 - (char *)v175;
        if (v178)
        {
          unint64_t v179 = v178 >> 2;
          float v180 = (float)(unint64_t)(v178 >> 2);
          unsigned int v181 = *v154;
          uint64_t v182 = (3 * v173);
          uint64_t v183 = (v182 + 1);
          uint64_t v184 = (v182 + 2);
          float v185 = *(float *)&v177[4 * v182];
          float v186 = *(float *)&v177[4 * v183];
          float v187 = *(float *)&v177[4 * v184];
          if (v179 <= 1) {
            unint64_t v179 = 1;
          }
          do
          {
            int v188 = *v175++;
            float v185 = (float)(v181[3 * v188] / v180) + v185;
            *(float *)&v177[4 * v182] = v185;
            float v186 = v186 + (float)(v181[3 * v188 + 1] / v180);
            *(float *)&v177[4 * v183] = v186;
            float v187 = v187 + (float)(v181[3 * v188 + 2] / v180);
            *(float *)&v177[4 * v184] = v187;
            --v179;
          }
          while (v179);
        }
        else
        {
          uint64_t v182 = (3 * v173);
        }
        LODWORD(v401) = 0;
        vDSP_dotpr(*(const float **)(*(void *)buf + 24 * v173), 1, (const float *)&v177[4 * v182], 1, (float *)&v401, 3uLL);
        if (*(float *)&v401 == 0.0)
        {
          uint64_t v192 = 0;
          *(_DWORD *)&(*v373)[4 * v173] = 1065353216;
          uint64_t v193 = *(void *)(*(void *)buf + 24 * v173);
          uint64_t v194 = (uint64_t)&(*v374)[4 * v182];
          do
          {
            v409.f32[v192] = *(float *)(v194 + v192 * 4) - (float)(*(float *)(v193 + v192 * 4) / 100000.0);
            v407.f32[v192] = *(float *)(v194 + v192 * 4) + (float)(*(float *)(v193 + v192 * 4) / 100000.0);
            ++v192;
          }
          while (v192 != 3);
          VBAP::lineUnitSphereIntersection((VBAP *)&v409, (const float *)&v407, (float *)&__C, v189);
          uint64_t v195 = 0;
          float v196 = 0.0;
          float v197 = 0.0;
          do
          {
            float v198 = *(float *)&(*v374)[4 * v182 + v195];
            float v197 = (float)(v198 - *(float *)((char *)&__C + v195)) * (float)(v198 - *(float *)((char *)&__C + v195))
                 + v197;
            float v196 = (float)(v198 - *(float *)((char *)&v406 + v195 + 4))
                 * (float)(v198 - *(float *)((char *)&v406 + v195 + 4))
                 + v196;
            v195 += 4;
          }
          while (v195 != 12);
          p_C = (float32x2_t **)((char *)&v406 + 4);
          if (v196 <= v197) {
            p_C = &__C;
          }
          v200 = *p_C;
          uint64_t v201 = (uint64_t)&(*v374)[4 * v182];
          *(_DWORD *)(v201 + 8) = *((_DWORD *)p_C + 2);
          *(void *)uint64_t v201 = v200;
        }
        else
        {
          LODWORD(__C) = 0;
          vDSP_dotpr((const float *)&(*v374)[4 * v182], 1, (const float *)&(*v374)[4 * v182], 1, (float *)&__C, 3uLL);
          float v190 = sqrtf(*(float *)&__C);
          *(float *)&(*v373)[4 * v173] = v190;
          float v191 = 1.0 / v190;
          *(float *)&__C = v191;
          if (*(float *)&v401 < 0.0) {
            *(float *)&__C = -v191;
          }
          vDSP_vsmul((const float *)&(*v374)[4 * v182], 1, (const float *)&__C, (float *)&(*v374)[4 * v182], 1, 3uLL);
        }
        ++v173;
        uint64_t v172 = *(void *)(a1 + 152);
        uint64_t v8 = v376;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 160) - v172) >> 3) > v173);
    }
    __C = buf;
    std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__C);
    if (*(void *)(a1 + 160) == *(void *)(a1 + 152))
    {
      *(_DWORD *)a1 = 0;
      buf[0].i32[0] = 0;
      std::vector<float>::assign(v374, 6uLL, buf);
    }
    if (__A) {
      operator delete(__A);
    }
    int v64 = *(_DWORD *)a1;
LABEL_203:
    if (v64) {
      goto LABEL_204;
    }
    float v414 = 0.0;
    float32x2_t v413 = 0;
    int v412 = 0;
    float64x2_t v411 = 0;
    float v410 = 0.0;
    float32x2_t v409 = 0;
    float v408 = 0.0;
    float32x2_t v407 = 0;
    int v404 = 0;
    uint64_t v403 = 0;
    int v402 = 0;
    uint64_t v401 = 0;
    memset(v400, 0, 12);
    LODWORD(v217) = *(_DWORD *)(a1 + 300);
    if (!*(unsigned char *)(a1 + 313))
    {
      double v398 = 0.0;
      double v399 = 0.0;
      double v397 = 0.0;
      __C = 0;
      std::vector<double>::vector(buf, (v217 + 1), &__C);
      unint64_t v218 = (*(_DWORD *)(a1 + 300) + 1);
      __A = 0;
      std::vector<double>::vector(&__C, v218, &__A);
      unint64_t v219 = (*(_DWORD *)(a1 + 300) + 1);
      uint64_t v393 = 0;
      std::vector<double>::vector(&__A, v219, &v393);
      uint64_t v220 = *(unsigned int *)(a1 + 300);
      float64x2_t v221 = (const double *)buf[0];
      if (v220)
      {
        uint64_t v222 = 0;
        v223 = *v370;
        v224 = (double *)__C;
        v225 = (double *)buf[0];
        float64x2_t v226 = __A;
        do
        {
          *v225++ = v223[v222];
          *v224++ = v223[(v222 + 1)];
          *v226++ = v223[(v222 + 2)];
          v222 += 3;
        }
        while (3 * v220 != v222);
      }
      vDSP_meanvD(v221, 1, &v399, (v220 + 1));
      vDSP_meanvD((const double *)__C, 1, &v398, (*(_DWORD *)(a1 + 300) + 1));
      vDSP_meanvD(__A, 1, &v397, (*(_DWORD *)(a1 + 300) + 1));
      double v398 = -v398;
      double v399 = -v399;
      double v397 = -v397;
      vDSP_vsaddD((const double *)buf[0], 1, &v399, (double *)buf[0], 1, (*(_DWORD *)(a1 + 300) + 1));
      vDSP_vsaddD((const double *)__C, 1, &v398, (double *)__C, 1, (*(_DWORD *)(a1 + 300) + 1));
      vDSP_vsaddD(__A, 1, &v397, __A, 1, (*(_DWORD *)(a1 + 300) + 1));
      float64x2_t v227 = __C;
      float64x2_t v228 = __A;
      BOOL v236 = CDelaunayTriangles3D::check_coplanar((float64_t *)buf[0], (const double *)__C, __A, (const double *)(*(_DWORD *)(a1 + 300) + 1), v229, v230, v231, v232, v233, v234, v235);
      if (v228)
      {
        int32x2_t v395 = v228;
        operator delete(v228);
        float64x2_t v227 = __C;
      }
      if (v227)
      {
        double v406 = v227;
        operator delete(v227);
      }
      if (buf[0])
      {
        buf[1] = buf[0];
        operator delete(*(void **)buf);
      }
      uint64_t v217 = *(unsigned int *)(a1 + 300);
      if (v236)
      {
        if (v217 < 3)
        {
          vDSP_meanv(*v370, 3, (float *)&v413, *(unsigned int *)(a1 + 300));
          vDSP_meanv((const float *)(*(void *)(a1 + 56) + 4), 3, (float *)&v413 + 1, *(unsigned int *)(a1 + 300));
          vDSP_meanv((const float *)(*(void *)(a1 + 56) + 8), 3, &v414, *(unsigned int *)(a1 + 300));
        }
        else
        {
          float64x2_t v237 = (vDSP_Length *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(*(unsigned int *)(a1 + 300));
          v238 = v237;
          for (uint64_t i = 0; i != v217; ++i)
            v237[i] = 0;
          unint64_t v240 = ((uint64_t)(*(void *)(a1 + 64) - *(void *)(a1 + 56)) >> 2) + 3;
          LODWORD(__C) = 0;
          std::vector<float>::vector(buf, v240, &__C);
          unint64_t v241 = *(unsigned int *)(a1 + 300);
          LODWORD(__A) = 0;
          std::vector<float>::vector(&__C, v241, &__A);
          vDSP_Length v242 = *(unsigned int *)(a1 + 300);
          unint64_t v243 = __C;
          if (v242)
          {
            vDSP_Length v244 = 0;
            float64x2_t v245 = *v375;
            do
            {
              v238[v244] = v244;
              __int32 v246 = *v245;
              v245 += 2;
              v243->i32[v244++] = v246;
            }
            while (v242 != v244);
          }
          else
          {
            vDSP_Length v242 = 0;
          }
          vDSP_vsorti((const float *)v243, v238, 0, v242, -1);
          uint64_t v308 = *(unsigned int *)(a1 + 300);
          uint64_t v309 = (float *)buf[0];
          if (v308)
          {
            uint64_t v310 = 0;
            v311 = *v370;
            uint64_t v312 = v238;
            do
            {
              uint64_t v313 = *v312++;
              int v314 = &v311[3 * v313];
              v309[v310] = *v314;
              v309[(v310 + 1)] = v314[1];
              v309[(v310 + 2)] = v314[2];
              v310 += 3;
            }
            while (3 * v308 != v310);
          }
          uint64_t v315 = 0;
          uint64_t v316 = *(void *)&buf[1] - 12;
          do
          {
            *(float *)(v316 + v315 * 4) = v309[v315];
            ++v315;
          }
          while (v315 != 3);
          if (v308)
          {
            uint64_t v317 = 0;
            float v318 = 0.0;
            do
            {
              float v318 = v318
                   + (float)((float)((float)(v309[v317] * v309[(v317 + 4)])
                                   - (float)(v309[(v317 + 3)] * v309[(v317 + 1)]))
                           * 0.5);
              v317 += 3;
            }
            while (3 * v308 != v317);
            uint64_t v319 = 0;
            float v321 = v413.f32[1];
            float v320 = v413.f32[0];
            uint64_t v322 = 3 * v308;
            do
            {
              float v323 = v309[(v319 + 3)];
              float v320 = v320
                   + (float)((float)((float)((float)(v309[v319] + v323)
                                           * (float)((float)(v309[v319] * v309[(v319 + 4)])
                                                   - (float)(v323 * v309[(v319 + 1)])))
                                   / 6.0)
                           / v318);
              v413.f32[0] = v320;
              float v324 = v309[(v319 + 1)];
              float v325 = v309[(v319 + 4)];
              float v326 = (float)((float)((float)(v324 + v325)
                                   * (float)((float)(v309[v319] * v325)
                                           - (float)(v309[(v319 + 3)] * v324)))
                           / 6.0)
                   / v318;
              float v327 = v309[2];
              float v321 = v321 + v326;
              v413.f32[1] = v321;
              float v414 = v327;
              v319 += 3;
            }
            while (v322 != v319);
          }
          if (!__C || (v406 = __C, operator delete(__C), (uint64_t v309 = (float *)buf[0]) != 0))
          {
            buf[1] = (float32x2_t)v309;
            operator delete(v309);
          }
          if (v238) {
            operator delete(v238);
          }
        }
        for (uint64_t j = 0; j != 3; ++j)
          *(float *)((char *)&v411 + j * 4) = -v413.f32[j];
        unsigned int v329 = *(_DWORD *)(a1 + 300);
        float v330 = 0.0;
        if (v329 >= 2)
        {
          int v331 = *v370;
          int v332 = 1;
          int v333 = 3;
          do
          {
            for (uint64_t k = 0; k != 3; ++k)
            {
              float v335 = v413.f32[k];
              v409.f32[k] = v335 + v331[k];
              v407.f32[k] = v335 + v331[(v333 + k)];
            }
            float64x2_t v336 = vcvtq_f64_f32(v409);
            v297.f64[0] = v410;
            float64x2_t v337 = vcvtq_f64_f32(v407);
            v298.f64[0] = v408;
            double v338 = vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v297), v337, 1), v298, v336, 1).f64[0];
            v298.f64[1] = v337.f64[0];
            v297.f64[1] = v336.f64[0];
            float64x2_t v298 = vmlaq_f64(vmulq_f64(v298, vnegq_f64(v336)), v337, v297);
            float v330 = v338;
            *(float32x2_t *)&v297.f64[0] = vcvt_f32_f64(v298);
            if (fabsf(v330) >= 0.00001 || fabsf(*(float *)v297.f64) >= 0.00001) {
              break;
            }
            ++v332;
            v333 += 3;
          }
          while (fabsf(*((float *)v297.f64 + 1)) < 0.00001 && v332 != v329);
          *(float64_t *)((char *)v400 + 4) = v297.f64[0];
        }
        uint64_t v340 = 0;
        *(float *)float64x2_t v400 = v330;
        do
        {
          float v341 = *(float *)((char *)&v411 + v340);
          float v342 = *(float *)((char *)v400 + v340);
          *(float *)((char *)&v403 + v340) = v341 + v342;
          *(float *)((char *)&v401 + v340) = v341 - v342;
          v340 += 4;
        }
        while (v340 != 12);
        VBAP::lineUnitSphereIntersection((VBAP *)&v403, (const float *)&v401, (float *)*v374, v296);
        goto LABEL_204;
      }
    }
    vDSP_meanv(*v370, 3, (float *)&v413, v217);
    vDSP_meanv((const float *)(*(void *)(a1 + 56) + 4), 3, (float *)&v413 + 1, *(unsigned int *)(a1 + 300));
    vDSP_meanv((const float *)(*(void *)(a1 + 56) + 8), 3, &v414, *(unsigned int *)(a1 + 300));
    if ((float)((float)(fabsf(v413.f32[0]) + fabsf(v413.f32[1])) + fabsf(v414)) >= 0.00003)
    {
      for (uint64_t m = 0; m != 3; ++m)
        *(float *)((char *)&v411 + m * 4) = -v413.f32[m];
      VBAP::lineUnitSphereIntersection((VBAP *)&v413, (const float *)&v411, (float *)*v374, v247);
      if (!*(unsigned char *)(a1 + 313))
      {
LABEL_242:
        uint64_t v250 = *(void *)(a1 + 88) - *(void *)(a1 + 80);
        if ((unint64_t)v250 >= 0xC)
        {
          float64x2_t v251 = 0;
          v252 = 0;
          unint64_t v253 = 0;
          LODWORD(v254) = 0;
          unint64_t v255 = (v250 >> 2) / 3uLL;
          float64x2_t v256 = v370;
          do
          {
            uint64_t v257 = *(unsigned int *)(a1 + 300);
            if (v257)
            {
              uint64_t v258 = 0;
              uint64_t v260 = 3 * v257;
              while (1)
              {
                float64x2_t v259 = *v256;
                if ((float)((float)(vabds_f32(*(float *)&(*v374)[4 * (3 * v254)], v259[v258])+ vabds_f32(*(float *)&(*v374)[4 * (3 * v254 + 1)], v259[(v258 + 1)]))+ vabds_f32(*(float *)&(*v374)[4 * (3 * v254 + 2)], v259[(v258 + 2)])) < 0.00000035763)break; {
                v258 += 3;
                }
                if (v260 == v258) {
                  goto LABEL_266;
                }
              }
              if ((unint64_t)v252 >= v253)
              {
                uint64_t v261 = (v252 - v251) >> 2;
                unint64_t v262 = v261 + 1;
                if ((unint64_t)(v261 + 1) >> 62) {
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                if ((uint64_t)(v253 - (void)v251) >> 1 > v262) {
                  unint64_t v262 = (uint64_t)(v253 - (void)v251) >> 1;
                }
                if (v253 - (unint64_t)v251 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v263 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v263 = v262;
                }
                if (v263)
                {
                  unint64_t v263 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v263);
                  float64x2_t v265 = v12;
                }
                else
                {
                  float64x2_t v265 = v12;
                  uint64_t v264 = 0;
                }
                float64x2_t v266 = (char *)(v263 + 4 * v261);
                *(_DWORD *)float64x2_t v266 = v254;
                float64x2_t v267 = v266 + 4;
                while (v252 != v251)
                {
                  int v268 = *((_DWORD *)v252 - 1);
                  v252 -= 4;
                  *((_DWORD *)v266 - 1) = v268;
                  v266 -= 4;
                }
                unint64_t v253 = v263 + 4 * v264;
                if (v251) {
                  operator delete(v251);
                }
                float64x2_t v251 = v266;
                v252 = v267;
                float64x2_t v256 = v370;
                uint64_t v12 = v265;
              }
              else
              {
                *(_DWORD *)v252 = v254;
                v252 += 4;
              }
            }
LABEL_266:
            unint64_t v254 = (v254 + 1);
          }
          while (v255 > v254);
          if (v252 == v251)
          {
            uint64_t v8 = v376;
          }
          else
          {
            unint64_t v269 = 0;
            uint64_t v270 = *(void *)(a1 + 88);
            unsigned int v271 = 1;
            uint64_t v8 = v376;
            do
            {
              uint64_t v272 = (uint64_t)&(*v374)[12 * *(int *)&v251[4 * v269]];
              uint64_t v273 = v270 - (v272 + 12);
              if (v270 != v272 + 12) {
                memmove(&(*v374)[12 * *(int *)&v251[4 * v269]], (const void *)(v272 + 12), v270 - (v272 + 12));
              }
              uint64_t v270 = v272 + v273;
              *(void *)(a1 + 88) = v272 + v273;
              unint64_t v269 = v271++;
            }
            while (v269 < (v252 - v251) >> 2);
          }
          if (v251) {
            operator delete(v251);
          }
        }
LABEL_204:
        unint64_t v202 = ((uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 2) / 3uLL;
        *(void *)(a1 + 304) = v202;
        std::vector<float>::resize(v367, v202);
        *(void *)(a1 + 40) = *(void *)(a1 + 32);
        std::vector<float>::reserve(v8, ((uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 2)+ ((uint64_t)(*(void *)(a1 + 64) - *(void *)(a1 + 56)) >> 2));
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v8, *(char **)(a1 + 56), *(void *)(a1 + 64), (uint64_t)(*(void *)(a1 + 64) - *(void *)(a1 + 56)) >> 2);
        unint64_t v204 = *(_DWORD **)(a1 + 80);
        uint64_t v203 = *(_DWORD **)(a1 + 88);
        buf[0] = (float32x2_t)v8;
        while (v204 != v203)
          std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100]((uint64_t *)buf, v204++);
        if (*(_DWORD *)a1 != 1) {
          goto LABEL_361;
        }
        v205 = (const float **)v380;
        uint64_t v206 = v381;
        if (v381 == v380) {
          goto LABEL_361;
        }
        uint64_t v207 = 0;
        unsigned int v208 = 0;
        while (1)
        {
          v209 = (uint64_t *)((char *)__p + 24 * v207);
          if ((unint64_t)(v209[1] - *v209) <= 0xC)
          {
            uint64_t v210 = 0;
            buf[1].i32[0] = 0;
            buf[0] = 0;
            uint64_t v211 = *v209;
            int v212 = (float *)*v8;
            float v213 = 0.0;
            float v214 = 0.0;
            float v215 = 0.0;
            do
            {
              unsigned int v216 = 3 * *(_DWORD *)(v211 + v210);
              float v213 = v212[v216] + v213;
              buf[0].f32[0] = v213;
              float v214 = v212[v216 + 1] + v214;
              buf[0].f32[1] = v214;
              float v215 = v212[v216 + 2] + v215;
              buf[1].f32[0] = v215;
              v210 += 4;
            }
            while (v210 != 12);
            LODWORD(__C) = 0;
            vDSP_dotpr((const float *)buf, 1, v205[3 * v207], 1, (float *)&__C, 3uLL);
            if (*(float *)&__C <= 0.0)
            {
              for (uint64_t n = 0; n != 12; n += 4)
                vDSP_meanv((const float *)(*(void *)(a1 + 32) + n), 3, (float *)((char *)&__A + n), ((uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 2) / 3uLL);
              v407.i32[0] = 0;
              vDSP_sve((const float *)&__A, 1, (float *)&v407, 3uLL);
              v407.f32[0] = 1.0 / sqrtf(v407.f32[0]);
              vDSP_vsmul((const float *)&__A, 1, (const float *)&v407, (float *)&__C, 1, 3uLL);
              *(float *)&uint64_t v403 = -v407.f32[0];
              vDSP_vsmul((const float *)&__A, 1, (const float *)&v403, (float *)&v406 + 1, 1, 3uLL);
              vDSP_distancesq((const float *)&__A, 1, (const float *)&__C, 1, (float *)&v409, 3uLL);
              vDSP_distancesq((const float *)&__A, 1, (const float *)&v406 + 1, 1, (float *)&v409 + 1, 3uLL);
              uint64_t v275 = v378;
              if (v378 == __p)
              {
                unsigned int v278 = 0;
              }
              else
              {
                uint64_t v276 = 0;
                unsigned int v277 = 0;
                unsigned int v278 = 0;
                uint64_t v279 = 12;
                if (v409.f32[0] > v409.f32[1]) {
                  uint64_t v279 = 0;
                }
                uint64_t v280 = (const float *)((char *)&__C + v279);
                float v281 = 3.4028e38;
                uint64_t v275 = (char *)__p;
                do
                {
                  uint64_t v282 = 0;
                  buf[1].i32[0] = 0;
                  buf[0] = 0;
                  uint64_t v283 = &v275[24 * v276];
                  unint64_t v284 = (float *)*v8;
                  uint64_t v285 = *(void *)v283;
                  float v286 = (float)(unint64_t)((uint64_t)(*((void *)v283 + 1) - *(void *)v283) >> 2);
                  float v287 = 0.0;
                  float v288 = 0.0;
                  float v289 = 0.0;
                  do
                  {
                    unsigned int v290 = 3 * *(_DWORD *)(v285 + v282);
                    float v287 = v287 + (float)(v284[v290] / v286);
                    buf[0].f32[0] = v287;
                    float v288 = v288 + (float)(v284[v290 + 1] / v286);
                    buf[0].f32[1] = v288;
                    float v289 = v289 + (float)(v284[v290 + 2] / v286);
                    buf[1].f32[0] = v289;
                    v282 += 4;
                  }
                  while (v282 != 12);
                  vDSP_distancesq(v280, 1, (const float *)buf, 1, (float *)&v409, 3uLL);
                  if (v409.f32[0] < v281)
                  {
                    float32x2_t v413 = buf[0];
                    float v414 = buf[1].f32[0];
                    unsigned int v278 = v277;
                    float v281 = v409.f32[0];
                  }
                  uint64_t v275 = (char *)__p;
                  uint64_t v276 = ++v277;
                }
                while (0xAAAAAAAAAAAAAAABLL * ((v378 - (unsigned char *)__p) >> 3) > v277);
              }
              size_t v291 = &v275[24 * v278];
              v292 = (uint64_t *)(v291 + 8);
              if (*((void *)v291 + 1) - *(void *)v291 <= 0xCuLL)
              {
                unint64_t v293 = *(void *)(a1 + 168);
                uint64_t v294 = *(void **)(a1 + 160);
                if ((unint64_t)v294 >= v293)
                {
                  unint64_t v303 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v294 - *v12) >> 3);
                  if (v303 + 1 > 0xAAAAAAAAAAAAAAALL) {
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  }
                  unint64_t v304 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v293 - *v12) >> 3);
                  uint64_t v305 = 2 * v304;
                  if (2 * v304 <= v303 + 1) {
                    uint64_t v305 = v303 + 1;
                  }
                  if (v304 >= 0x555555555555555) {
                    unint64_t v306 = 0xAAAAAAAAAAAAAAALL;
                  }
                  else {
                    unint64_t v306 = v305;
                  }
                  buf[4] = (float32x2_t)(a1 + 168);
                  if (v306) {
                    unint64_t v306 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v306);
                  }
                  else {
                    uint64_t v307 = 0;
                  }
                  v343 = (void *)(v306 + 24 * v303);
                  buf[0] = (float32x2_t)v306;
                  buf[1] = (float32x2_t)v343;
                  buf[2] = (float32x2_t)v343;
                  float64x2_t buf[3] = (float32x2_t)(v306 + 24 * v307);
                  void *v343 = 0;
                  v343[1] = 0;
                  v343[2] = 0;
                  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v343, *(const void **)v291, *v292, (*v292 - *(void *)v291) >> 2);
                  *(void *)&buf[2] += 24;
                  std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(v12, buf);
                  v295 = *(void **)(a1 + 160);
                  std::__split_buffer<std::vector<unsigned char>>::~__split_buffer((uint64_t)buf);
                }
                else
                {
                  *uint64_t v294 = 0;
                  v294[1] = 0;
                  v294[2] = 0;
                  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v294, *(const void **)v291, *v292, (*v292 - *(void *)v291) >> 2);
                  v295 = v294 + 3;
                  *(void *)(a1 + 160) = v295;
                }
                *(void *)(a1 + 160) = v295;
                vDSP_vadd(*((const float **)v380 + 3 * v278), 1, (const float *)&v413, 1, (float *)buf, 1, 3uLL);
                vDSP_vsub(*((const float **)v380 + 3 * v278), 1, (const float *)&v413, 1, (float *)&buf[1] + 1, 1, 3uLL);
                VBAP::lineUnitSphereIntersection((VBAP *)buf, (const float *)&buf[1] + 1, (float *)&__C, v344);
                vDSP_distancesq((const float *)&__A, 1, (const float *)&__C, 1, (float *)&v409, 3uLL);
                vDSP_distancesq((const float *)&__A, 1, (const float *)&v406 + 1, 1, (float *)&v409 + 1, 3uLL);
                std::vector<float>::resize(v374, ((uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 2) + 3);
                uint64_t v345 = 12;
                if (v409.f32[1] <= v409.f32[0]) {
                  uint64_t v345 = 0;
                }
                v346 = (char *)&__C + v345;
                uint64_t v347 = *(void *)(a1 + 88);
                uint64_t v348 = *(void *)v346;
                *(_DWORD *)(v347 - 4) = *((_DWORD *)v346 + 2);
                *(void *)(v347 - 12) = v348;
                uint64_t v350 = *(char **)(a1 + 112);
                unint64_t v349 = *(void *)(a1 + 120);
                if ((unint64_t)v350 >= v349)
                {
                  v352 = *v373;
                  uint64_t v353 = (v350 - *v373) >> 2;
                  unint64_t v354 = v353 + 1;
                  if ((unint64_t)(v353 + 1) >> 62) {
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v355 = v349 - (void)v352;
                  if (v355 >> 1 > v354) {
                    unint64_t v354 = v355 >> 1;
                  }
                  BOOL v356 = (unint64_t)v355 >= 0x7FFFFFFFFFFFFFFCLL;
                  unint64_t v357 = 0x3FFFFFFFFFFFFFFFLL;
                  if (!v356) {
                    unint64_t v357 = v354;
                  }
                  if (v357)
                  {
                    unint64_t v357 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v357);
                    v352 = *(char **)(a1 + 104);
                    uint64_t v350 = *(char **)(a1 + 112);
                  }
                  else
                  {
                    uint64_t v358 = 0;
                  }
                  uint64_t v359 = (_DWORD *)(v357 + 4 * v353);
                  unint64_t v360 = v357 + 4 * v358;
                  *uint64_t v359 = 1065353216;
                  v351 = v359 + 1;
                  while (v350 != v352)
                  {
                    int v361 = *((_DWORD *)v350 - 1);
                    v350 -= 4;
                    *--uint64_t v359 = v361;
                  }
                  *(void *)(a1 + 104) = v359;
                  *(void *)(a1 + 112) = v351;
                  *(void *)(a1 + 120) = v360;
                  if (v352) {
                    operator delete(v352);
                  }
                }
                else
                {
                  *(_DWORD *)uint64_t v350 = 1065353216;
                  v351 = v350 + 4;
                }
                *(void *)(a1 + 112) = v351;
                ++*(void *)(a1 + 304);
                std::vector<float>::resize(v367, ((uint64_t)(*(void *)(a1 + 136) - *(void *)(a1 + 128)) >> 2) + 1);
                uint64_t v362 = *(void *)(a1 + 88);
                float64x2_t v411 = v8;
                uint64_t v363 = -12;
                do
                {
                  std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100]((uint64_t *)&v411, (_DWORD *)(v362 + v363));
                  v363 += 4;
                }
                while (v363);
              }
LABEL_361:
              int v46 = VBAP::delaunayTriangulation(a1, v8, a4, a5);
              if (v46)
              {
                if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                {
                  buf[0].i32[0] = 136315906;
                  *(float32x2_t *)((char *)buf + 4) = (float32x2_t)"VBAP.cpp";
                  buf[1].i16[2] = 1024;
                  *(__int32 *)((char *)&buf[1].i32[1] + 2) = 198;
                  buf[2].i16[1] = 2080;
                  *(float32x2_t *)((char *)&buf[2] + 4) = (float32x2_t)"initialize";
                  buf[3].i16[2] = 1024;
                  *(__int32 *)((char *)&buf[3].i32[1] + 2) = 198;
                  float64_t v65 = MEMORY[0x1E4F14500];
                  uint64_t v66 = "%25s:%-5d CADSPUtility:%s:%d: VBAP error; Delaunay triangulation issue";
LABEL_364:
                  _os_log_impl(&dword_18FEC0000, v65, OS_LOG_TYPE_ERROR, v66, (uint8_t *)buf, 0x22u);
                }
                goto LABEL_365;
              }
              char v364 = 1;
LABEL_367:
              buf[0] = (float32x2_t)&__p;
              std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
              buf[0] = (float32x2_t)&v380;
              std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
              if (v383[0])
              {
                v383[1] = v383[0];
                operator delete(v383[0]);
              }
              if (v384[0])
              {
                v384[1] = v384[0];
                operator delete(v384[0]);
              }
              if (v385[0])
              {
                v385[1] = v385[0];
                operator delete(v385[0]);
              }
              if (v386[0])
              {
                v386[1] = v386[0];
                operator delete(v386[0]);
              }
              if (v364) {
LABEL_376:
              }
                int v46 = 0;
LABEL_377:
              if (v390[0])
              {
                v390[1] = v390[0];
                operator delete(v390[0]);
              }
              if (v391[0])
              {
                v391[1] = v391[0];
                operator delete(v391[0]);
              }
              if (v392[0])
              {
                v392[1] = v392[0];
                operator delete(v392[0]);
              }
              if (v46)
              {
                if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                {
                  buf[0].i32[0] = 136315906;
                  *(float32x2_t *)((char *)buf + 4) = (float32x2_t)"VBAP.cpp";
                  buf[1].i16[2] = 1024;
                  *(__int32 *)((char *)&buf[1].i32[1] + 2) = 35;
                  buf[2].i16[1] = 2080;
                  *(float32x2_t *)((char *)&buf[2] + 4) = (float32x2_t)"VBAP";
                  buf[3].i16[2] = 1024;
                  *(__int32 *)((char *)&buf[3].i32[1] + 2) = 35;
                  BOOL v44 = MEMORY[0x1E4F14500];
                  int v45 = "%25s:%-5d CADSPUtility:%s:%d: VBAP Initialization Error; Check for duplicate vertices";
LABEL_386:
                  _os_log_impl(&dword_18FEC0000, v44, OS_LOG_TYPE_ERROR, v45, (uint8_t *)buf, 0x22u);
                }
              }
              else
              {
                *(unsigned char *)(a1 + 315) = 1;
              }
              return a1;
            }
            v205 = (const float **)v380;
            uint64_t v206 = v381;
          }
          uint64_t v207 = ++v208;
          if (0xAAAAAAAAAAAAAAABLL * ((v206 - (char *)v205) >> 3) <= v208) {
            goto LABEL_361;
          }
        }
      }
      unint64_t v248 = 3;
    }
    else
    {
      unint64_t v248 = 0;
    }
    std::vector<float>::resize(v374, v248);
    goto LABEL_242;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    buf[0].i32[0] = 136315906;
    *(float32x2_t *)((char *)buf + 4) = (float32x2_t)"VBAP.cpp";
    buf[1].i16[2] = 1024;
    *(__int32 *)((char *)&buf[1].i32[1] + 2) = 40;
    buf[2].i16[1] = 2080;
    *(float32x2_t *)((char *)&buf[2] + 4) = (float32x2_t)"VBAP";
    buf[3].i16[2] = 1024;
    *(__int32 *)((char *)&buf[3].i32[1] + 2) = 40;
    BOOL v44 = MEMORY[0x1E4F14500];
    int v45 = "%25s:%-5d CADSPUtility:%s:%d: VBAP Initialization Error; Empty or inconsistent vertex set";
    goto LABEL_386;
  }
  return a1;
}

void sub_19004FD00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, void **a13, void *a14, void **a15, void *a16, void *a17, uint64_t a18, uint64_t a19, void **a20,void **a21,void **a22,void **a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p)
{
  *(void *)(v55 - 192) = v55 - 176;
  std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v55 - 192));
  if (__p) {
    operator delete(__p);
  }
  a53 = (uint64_t)&a24;
  std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a53);
  a24 = (uint64_t)&a27;
  std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  if (a30)
  {
    a31 = (uint64_t)a30;
    operator delete(a30);
  }
  if (a33)
  {
    a34 = (uint64_t)a33;
    operator delete(a33);
  }
  if (a36)
  {
    a37 = (uint64_t)a36;
    operator delete(a36);
  }
  if (a39)
  {
    a40 = (uint64_t)a39;
    operator delete(a39);
  }
  if (a44)
  {
    a45 = (uint64_t)a44;
    operator delete(a44);
  }
  if (a47)
  {
    a48 = (uint64_t)a47;
    operator delete(a47);
  }
  if (a50)
  {
    a51 = (uint64_t)a50;
    operator delete(a50);
  }
  a47 = v54 + 34;
  std::vector<std::list<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a47);
  unsigned int v57 = (void *)v54[31];
  if (v57)
  {
    v54[32] = v57;
    operator delete(v57);
  }
  uint64_t v58 = *a13;
  if (*a13)
  {
    v54[29] = v58;
    operator delete(v58);
  }
  std::__list_imp<ID3FrameInfo>::clear(a16);
  std::__list_imp<ID3FrameInfo>::clear(a17);
  a47 = a14;
  std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a47);
  uint64_t v59 = *a12;
  if (*a12)
  {
    v54[17] = v59;
    operator delete(v59);
  }
  uint64_t v60 = *a20;
  if (*a20)
  {
    v54[14] = v60;
    operator delete(v60);
  }
  double v61 = *a21;
  if (*a21)
  {
    v54[11] = v61;
    operator delete(v61);
  }
  double v62 = *a15;
  if (*a15)
  {
    v54[8] = v62;
    operator delete(v62);
  }
  BOOL v63 = *a23;
  if (*a23)
  {
    v54[5] = v63;
    operator delete(v63);
  }
  int v64 = *a22;
  if (*a22)
  {
    v54[2] = v64;
    operator delete(v64);
  }
  _Unwind_Resume(a1);
}

void VBAP::~VBAP(VBAP *this)
{
  unint64_t v10 = (void **)((char *)this + 272);
  std::vector<std::list<int>>::__destroy_vector::operator()[abi:ne180100](&v10);
  uint64_t v2 = (void *)*((void *)this + 31);
  if (v2)
  {
    *((void *)this + 32) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 28);
  if (v3)
  {
    *((void *)this + 29) = v3;
    operator delete(v3);
  }
  std::__list_imp<ID3FrameInfo>::clear((void *)this + 25);
  std::__list_imp<ID3FrameInfo>::clear((void *)this + 22);
  unint64_t v10 = (void **)((char *)this + 152);
  std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:ne180100](&v10);
  uint64_t v4 = (void *)*((void *)this + 16);
  if (v4)
  {
    *((void *)this + 17) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 13);
  if (v5)
  {
    *((void *)this + 14) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 10);
  if (v6)
  {
    *((void *)this + 11) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 7);
  if (v7)
  {
    *((void *)this + 8) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 4);
  if (v8)
  {
    *((void *)this + 5) = v8;
    operator delete(v8);
  }
  unint64_t v9 = (void *)*((void *)this + 1);
  if (v9)
  {
    *((void *)this + 2) = v9;
    operator delete(v9);
  }
}

uint64_t acv2::BlockCopyConverter::NeedsBufferedInput(acv2::BlockCopyConverter *this)
{
  return 0;
}

uint64_t acv2::BlockCopyConverter::SetProperty(acv2::BlockCopyConverter *this, unsigned int a2, unsigned int a3, const void *a4)
{
  return 1886547824;
}

uint64_t acv2::BlockCopyConverter::GetPropertyInfo(acv2::BlockCopyConverter *this, int a2, unsigned int *a3, unsigned __int8 *a4)
{
  uint64_t result = 1886547824;
  if (a2 <= 1836016242)
  {
    if (a2 != 1667850867 && a2 != 1668244083)
    {
      int v6 = 1835623027;
      goto LABEL_11;
    }
  }
  else if (a2 > 2020175986)
  {
    if (a2 != 2020569203)
    {
      unsigned __int16 v5 = 28787;
      goto LABEL_10;
    }
  }
  else if (a2 != 1836016243)
  {
    unsigned __int16 v5 = 25203;
LABEL_10:
    int v6 = v5 | 0x78690000;
LABEL_11:
    if (a2 != v6) {
      return result;
    }
  }
  if (a3) {
    *a3 = 4;
  }
  uint64_t result = 0;
  if (a4) {
    *a4 = 0;
  }
  return result;
}

uint64_t acv2::BlockCopyConverter::Reset(acv2::BlockCopyConverter *this)
{
  return 0;
}

__CFString *acv2::BlockCopyConverter::ConverterName(acv2::BlockCopyConverter *this)
{
  return @"BlockCopyConverter";
}

uint64_t ___ZL13AUPBEnableSPIv_block_invoke()
{
  uint64_t result = os_variant_has_internal_diagnostics();
  AUPBEnableSPI(void)::isAppleInternal = result;
  return result;
}

uint64_t AUPBAddServerListener(uint64_t a1, uint64_t a2)
{
  if (AUPBEnableSPI(void)::onceToken != -1) {
    dispatch_once(&AUPBEnableSPI(void)::onceToken, &__block_literal_global_4830);
  }
  if (!AUPBEnableSPI(void)::isAppleInternal) {
    return 561145191;
  }
  uint64_t v4 = +[AUPBClientManager sharedInstance];
  return [(AUPBClientManager *)v4 addNewServerListener:a1 withUserData:a2];
}

uint64_t AUPBRemoveServerListener(uint64_t a1, uint64_t a2)
{
  if (AUPBEnableSPI(void)::onceToken != -1) {
    dispatch_once(&AUPBEnableSPI(void)::onceToken, &__block_literal_global_4830);
  }
  if (!AUPBEnableSPI(void)::isAppleInternal) {
    return 561145191;
  }
  uint64_t v4 = +[AUPBClientManager sharedInstance];
  return [(AUPBClientManager *)v4 removeServerListener:a1 withUserData:a2];
}

uint64_t AUPBUnregister(uint64_t a1)
{
  if (AUPBEnableSPI(void)::onceToken != -1) {
    dispatch_once(&AUPBEnableSPI(void)::onceToken, &__block_literal_global_4830);
  }
  if (!AUPBEnableSPI(void)::isAppleInternal) {
    return 561145191;
  }
  uint64_t v2 = +[AUPBServer sharedInstance];
  return [(AUPBServer *)v2 unregisterBlock:a1];
}

uint64_t AUPBUnregisterAU(uint64_t a1, uint64_t a2)
{
  if (AUPBEnableSPI(void)::onceToken != -1) {
    dispatch_once(&AUPBEnableSPI(void)::onceToken, &__block_literal_global_4830);
  }
  if (!AUPBEnableSPI(void)::isAppleInternal) {
    return 561145191;
  }
  uint64_t v3 = +[AUPBServer sharedInstance];
  return [(AUPBServer *)v3 unregisterAU:a2];
}

uint64_t AUPBAddPropertyListener(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (AUPBEnableSPI(void)::onceToken != -1) {
    dispatch_once(&AUPBEnableSPI(void)::onceToken, &__block_literal_global_4830);
  }
  if (!AUPBEnableSPI(void)::isAppleInternal) {
    return 561145191;
  }
  unint64_t v10 = +[AUPBClientManager sharedInstance];
  return [(AUPBClientManager *)v10 addPropertyListener:a4 onServer:a1 block:a2 property:a3 withUserData:a5];
}

uint64_t AUPBRemovePropertyListener(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (AUPBEnableSPI(void)::onceToken != -1) {
    dispatch_once(&AUPBEnableSPI(void)::onceToken, &__block_literal_global_4830);
  }
  if (!AUPBEnableSPI(void)::isAppleInternal) {
    return 561145191;
  }
  unint64_t v10 = +[AUPBClientManager sharedInstance];
  return [(AUPBClientManager *)v10 removePropertyListener:a4 onServer:a1 block:a2 property:a3 withUserData:a5];
}

uint64_t AUPBCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (AUPBEnableSPI(void)::onceToken != -1) {
    dispatch_once(&AUPBEnableSPI(void)::onceToken, &__block_literal_global_4830);
  }
  if (!AUPBEnableSPI(void)::isAppleInternal) {
    return 561145191;
  }
  uint64_t v8 = +[AUPBClientManager sharedInstance];
  return [(AUPBClientManager *)v8 copyPBProperty:a3 onServer:a1 block:a2 intoValue:a4];
}

uint64_t AUPBSetProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (AUPBEnableSPI(void)::onceToken != -1) {
    dispatch_once(&AUPBEnableSPI(void)::onceToken, &__block_literal_global_4830);
  }
  if (!AUPBEnableSPI(void)::isAppleInternal) {
    return 561145191;
  }
  uint64_t v8 = +[AUPBClientManager sharedInstance];
  return [(AUPBClientManager *)v8 setPBProperty:a3 onServer:a1 block:a2 value:a4];
}

uint64_t RemoteAudioUnitGetPropertyInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (AUPBEnableSPI(void)::onceToken != -1) {
    dispatch_once(&AUPBEnableSPI(void)::onceToken, &__block_literal_global_4830);
  }
  if (AUPBEnableSPI(void)::isAppleInternal) {
    return [+[AUPBClientManager sharedInstance] getAUPropertyInfo:a3 onServer:a1 audioUnit:a2 scope:a4 element:a5 intoDataSize:a6 writeable:a7];
  }
  else {
    return 561145191;
  }
}

uint64_t RemoteAudioUnitGetProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = a6;
  if (AUPBEnableSPI(void)::onceToken != -1) {
    dispatch_once(&AUPBEnableSPI(void)::onceToken, &__block_literal_global_4830);
  }
  if (AUPBEnableSPI(void)::isAppleInternal) {
    return [+[AUPBClientManager sharedInstance] getAUProperty:a3 onServer:a1 audioUnit:a2 scope:a4 element:a5 copiedIntoBufer:&v14 withSize:a7];
  }
  else {
    return 561145191;
  }
}

uint64_t RemoteAudioUnitSetProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  if (AUPBEnableSPI(void)::onceToken != -1) {
    dispatch_once(&AUPBEnableSPI(void)::onceToken, &__block_literal_global_4830);
  }
  if (!AUPBEnableSPI(void)::isAppleInternal) {
    return 561145191;
  }
  LODWORD(v15) = a7;
  return [+[AUPBClientManager sharedInstance] setAUProperty:a3 onServer:a1 audioUnit:a2 scope:a4 element:a5 withValue:a6 size:v15];
}

uint64_t RemoteAudioUnitGetParameter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (AUPBEnableSPI(void)::onceToken != -1) {
    dispatch_once(&AUPBEnableSPI(void)::onceToken, &__block_literal_global_4830);
  }
  if (!AUPBEnableSPI(void)::isAppleInternal) {
    return 561145191;
  }
  uint64_t v12 = +[AUPBClientManager sharedInstance];
  return [(AUPBClientManager *)v12 getAUParameter:a3 onServer:a1 audioUnit:a2 scope:a4 element:a5 copiedIntoValue:a6];
}

uint64_t RemoteAudioUnitSetParameter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float a6)
{
  if (AUPBEnableSPI(void)::onceToken != -1) {
    dispatch_once(&AUPBEnableSPI(void)::onceToken, &__block_literal_global_4830);
  }
  if (!AUPBEnableSPI(void)::isAppleInternal) {
    return 561145191;
  }
  uint64_t v12 = +[AUPBClientManager sharedInstance];
  *(float *)&double v13 = a6;
  return [(AUPBClientManager *)v12 setAUParameter:a3 onServer:a1 audioUnit:a2 scope:a4 element:a5 value:v13];
}

uint64_t RemoteAudioUnitGetPropertySerial(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (AUPBEnableSPI(void)::onceToken != -1) {
    dispatch_once(&AUPBEnableSPI(void)::onceToken, &__block_literal_global_4830);
  }
  if (!AUPBEnableSPI(void)::isAppleInternal) {
    return 561145191;
  }
  uint64_t v12 = +[AUPBClientManager sharedInstance];
  return [(AUPBClientManager *)v12 getSerialAUProperty:a3 onServer:a1 audioUnit:a2 scope:a4 element:a5 inData:a6];
}

uint64_t RemoteAudioUnitSetPropertySerial(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (AUPBEnableSPI(void)::onceToken != -1) {
    dispatch_once(&AUPBEnableSPI(void)::onceToken, &__block_literal_global_4830);
  }
  if (!AUPBEnableSPI(void)::isAppleInternal) {
    return 561145191;
  }
  uint64_t v12 = +[AUPBClientManager sharedInstance];
  return [(AUPBClientManager *)v12 setSerialAUProperty:a3 onServer:a1 audioUnit:a2 scope:a4 element:a5 toData:a6];
}

uint64_t DSPGraph::CalculationBox::hasPresetData(DSPGraph::CalculationBox *this)
{
  return 0;
}

uint64_t DSPGraph::CalculationBox::setProperty(uint64_t this, unsigned int a2, unsigned int a3, unsigned int a4, int a5, double *a6)
{
  if (a2 > 9)
  {
    return DSPGraph::Box::setProperty((DSPGraph::Box *)this, a2, a3, a4, a5, a6);
  }
  else
  {
    if (a3 != 1 || *(_DWORD *)(this + 776) != 1)
    {
      std::string::basic_string[abi:ne180100]<0>(&v25, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_CalculationBox.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v24, "setProperty");
      std::to_string(&v20, a3);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v21, "CalculationBox can't set property in scope ", &v20);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v22, &v21, " with property ID ");
      std::to_string(&v19, a2);
      if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v11 = &v19;
      }
      else {
        unint64_t v11 = (std::string *)v19.__r_.__value_.__r.__words[0];
      }
      if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v19.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v19.__r_.__value_.__l.__size_;
      }
      double v13 = std::string::append(&v22, (const std::string::value_type *)v11, size);
      std::string v23 = *v13;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      DSPGraph::ThrowException(-10866, &v25, 313, &v24, (long long *)&v23);
    }
    if (*(void *)(this + 824) <= (unint64_t)a4)
    {
      std::string::basic_string[abi:ne180100]<0>(&v25, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_CalculationBox.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v24, "setProperty");
      std::to_string(&v20, a4);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v21, "CalculationBox can't set input scope element ", &v20);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v22, &v21, " with property ID ");
      std::to_string(&v19, a2);
      if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v14 = &v19;
      }
      else {
        uint64_t v14 = (std::string *)v19.__r_.__value_.__r.__words[0];
      }
      if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v15 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v15 = v19.__r_.__value_.__l.__size_;
      }
      unint64_t v16 = std::string::append(&v22, (const std::string::value_type *)v14, v15);
      std::string v23 = *v16;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      DSPGraph::ThrowException(-10877, &v25, 308, &v24, (long long *)&v23);
    }
    uint64_t v7 = this + 16 * a4 + 792;
    switch(a2)
    {
      case 0u:
        if (a5 != 1) {
          goto LABEL_30;
        }
        int v8 = 0;
        *(void *)&double v9 = *(char *)a6;
        goto LABEL_25;
      case 1u:
        if (a5 != 2) {
          goto LABEL_30;
        }
        int v8 = 0;
        *(void *)&double v9 = *(__int16 *)a6;
        goto LABEL_25;
      case 2u:
        if (a5 != 4) {
          goto LABEL_30;
        }
        int v8 = 0;
        *(void *)&double v9 = *(int *)a6;
        goto LABEL_25;
      case 3u:
      case 7u:
        if (a5 != 8) {
          goto LABEL_30;
        }
        int v8 = 0;
        double v9 = *a6;
        goto LABEL_25;
      case 4u:
        if (a5 != 1) {
          goto LABEL_30;
        }
        int v8 = 0;
        *(void *)&double v9 = *(unsigned __int8 *)a6;
        goto LABEL_25;
      case 5u:
        if (a5 != 2) {
          goto LABEL_30;
        }
        int v8 = 0;
        *(void *)&double v9 = *(unsigned __int16 *)a6;
        goto LABEL_25;
      case 6u:
        if (a5 != 4) {
          goto LABEL_30;
        }
        int v8 = 0;
        *(void *)&double v9 = *(unsigned int *)a6;
LABEL_25:
        *(double *)uint64_t v7 = v9;
        goto LABEL_26;
      case 8u:
        if (a5 != 4) {
          goto LABEL_30;
        }
        double v10 = *(float *)a6;
        goto LABEL_29;
      case 9u:
        if (a5 == 8)
        {
          double v10 = *a6;
LABEL_29:
          *(double *)uint64_t v7 = v10;
          int v8 = 1;
LABEL_26:
          this = 0;
          *(_DWORD *)(v7 + 8) = v8;
        }
        else
        {
LABEL_30:
          this = 561211770;
        }
        break;
      default:
        return this;
    }
  }
  return this;
}

void sub_190050FD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (*(char *)(v34 - 73) < 0) {
    operator delete(*(void **)(v34 - 96));
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (*(char *)(v34 - 41) < 0) {
    operator delete(*(void **)(v34 - 64));
  }
  if (*(char *)(v34 - 17) < 0) {
    operator delete(*(void **)(v34 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::CalculationBox::getProperty(DSPGraph::CalculationBox *this, unsigned int a2, uint64_t a3, uint64_t a4, unsigned int *a5, CFStringRef *a6)
{
  unsigned int v8 = a4;
  unsigned int v9 = a3;
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (a2 > 9)
  {
    return DSPGraph::Box::getProperty(this, a2, a3, a4, a5, a6);
  }
  else
  {
    if (a3 != 2)
    {
      if (a3 == 1 && *((_DWORD *)this + 194) == 1)
      {
        if (*((void *)this + 103) <= (unint64_t)a4)
        {
          std::string::basic_string[abi:ne180100]<0>(&v30, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_CalculationBox.cpp");
          std::string::basic_string[abi:ne180100]<0>(&v29, "getProperty");
          std::to_string(&v25, v8);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v26, "CalculationBox can't get input scope element ", &v25);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v27, &v26, " with property ID ");
          std::to_string(&v24, a2);
          if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v16 = &v24;
          }
          else {
            unint64_t v16 = (std::string *)v24.__r_.__value_.__r.__words[0];
          }
          if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v24.__r_.__value_.__l.__size_;
          }
          uint64_t v18 = std::string::append(&v27, (const std::string::value_type *)v16, size);
          std::string v28 = *v18;
          v18->__r_.__value_.__l.__size_ = 0;
          v18->__r_.__value_.__r.__words[2] = 0;
          v18->__r_.__value_.__r.__words[0] = 0;
          DSPGraph::ThrowException(-10877, &v30, 262, &v29, (long long *)&v28);
        }
        unint64_t v11 = (char *)this + 16 * a4 + 792;
        return DSPGraph::CalculationBox::getValueAsProperty((uint64_t)v11, a2, (int *)a5, a6);
      }
LABEL_15:
      std::string::basic_string[abi:ne180100]<0>(&v30, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_CalculationBox.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v29, "getProperty");
      std::to_string(&v25, v9);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v26, "CalculationBox can't get property in scope ", &v25);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v27, &v26, " with property ID ");
      std::to_string(&v24, a2);
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        double v13 = &v24;
      }
      else {
        double v13 = (std::string *)v24.__r_.__value_.__r.__words[0];
      }
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v14 = HIBYTE(v24.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v14 = v24.__r_.__value_.__l.__size_;
      }
      std::string::size_type v15 = std::string::append(&v27, (const std::string::value_type *)v13, v14);
      std::string v28 = *v15;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      DSPGraph::ThrowException(-10866, &v30, 275, &v29, (long long *)&v28);
    }
    if (*((_DWORD *)this + 195) != 1) {
      goto LABEL_15;
    }
    DSPGraph::CalculationBox::calculate((uint64_t)&v30, (uint64_t)this, a4);
    if (!v31)
    {
      int v19 = v30;
      std::string::basic_string[abi:ne180100]<0>(&v29, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/Boxes/DSPGraph_CalculationBox.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v28, "getProperty");
      std::to_string(&v24, v8);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v25, "CalculationBox can't get output scope element ", &v24);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v26, &v25, " with property ID ");
      std::to_string(&v23, a2);
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v20 = &v23;
      }
      else {
        std::string v20 = (std::string *)v23.__r_.__value_.__r.__words[0];
      }
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v21 = HIBYTE(v23.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v21 = v23.__r_.__value_.__l.__size_;
      }
      std::string v22 = std::string::append(&v26, (const std::string::value_type *)v20, v21);
      std::string v27 = *v22;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      DSPGraph::ThrowException(v19, &v29, 269, (long long *)&v28, (long long *)&v27);
    }
    return DSPGraph::CalculationBox::getValueAsProperty((uint64_t)&v30, a2, (int *)a5, a6);
  }
}

void sub_19005147C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (*(char *)(v45 - 81) < 0) {
    operator delete(*(void **)(v45 - 104));
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::CalculationBox::getValueAsProperty(uint64_t result, int a2, int *a3, unsigned char *a4)
{
  switch(a2)
  {
    case 0:
      if (!*a3) {
        return 561211770;
      }
      uint64_t v6 = *(unsigned int *)(result + 8);
      if (v6 == -1) {
        std::__throw_bad_variant_access[abi:ne180100]();
      }
      std::string v22 = &v21;
      char v7 = ((uint64_t (*)(char **, uint64_t))off_1EDFA4418[v6])(&v22, result);
      goto LABEL_8;
    case 1:
      if (*a3 < 2) {
        return 561211770;
      }
      uint64_t v16 = *(unsigned int *)(result + 8);
      if (v16 == -1) {
        std::__throw_bad_variant_access[abi:ne180100]();
      }
      std::string v22 = &v21;
      __int16 v17 = ((uint64_t (*)(char **, uint64_t))off_1EDFA4428[v16])(&v22, result);
      goto LABEL_29;
    case 2:
      if (*a3 < 4) {
        return 561211770;
      }
      uint64_t v11 = *(unsigned int *)(result + 8);
      if (v11 == -1) {
        std::__throw_bad_variant_access[abi:ne180100]();
      }
      std::string v22 = &v21;
      int v12 = ((uint64_t (*)(char **, uint64_t))off_1EDFA4438[v11])(&v22, result);
      goto LABEL_33;
    case 3:
      if (*a3 < 8) {
        return 561211770;
      }
      uint64_t v13 = *(unsigned int *)(result + 8);
      if (v13 == -1) {
        std::__throw_bad_variant_access[abi:ne180100]();
      }
      std::string v22 = &v21;
      uint64_t v14 = ((uint64_t (*)(char **, uint64_t))off_1EDFA4448[v13])(&v22, result);
      goto LABEL_21;
    case 4:
      if (!*a3) {
        return 561211770;
      }
      uint64_t v8 = *(unsigned int *)(result + 8);
      if (v8 == -1) {
        std::__throw_bad_variant_access[abi:ne180100]();
      }
      std::string v22 = &v21;
      char v7 = ((uint64_t (*)(char **, uint64_t))off_1EDFA4458[v8])(&v22, result);
LABEL_8:
      *a4 = v7;
      int v9 = 1;
      goto LABEL_37;
    case 5:
      if (*a3 < 2) {
        return 561211770;
      }
      uint64_t v18 = *(unsigned int *)(result + 8);
      if (v18 == -1) {
        std::__throw_bad_variant_access[abi:ne180100]();
      }
      std::string v22 = &v21;
      __int16 v17 = ((uint64_t (*)(char **, uint64_t))off_1EDFA4468[v18])(&v22, result);
LABEL_29:
      *(_WORD *)a4 = v17;
      int v9 = 2;
      goto LABEL_37;
    case 6:
      if (*a3 < 4) {
        return 561211770;
      }
      uint64_t v19 = *(unsigned int *)(result + 8);
      if (v19 == -1) {
        std::__throw_bad_variant_access[abi:ne180100]();
      }
      std::string v22 = &v21;
      int v12 = ((uint64_t (*)(char **, uint64_t))off_1EDFA4478[v19])(&v22, result);
LABEL_33:
      *(_DWORD *)a4 = v12;
      goto LABEL_36;
    case 7:
      if (*a3 < 8) {
        return 561211770;
      }
      uint64_t v15 = *(unsigned int *)(result + 8);
      if (v15 == -1) {
        std::__throw_bad_variant_access[abi:ne180100]();
      }
      std::string v22 = &v21;
      uint64_t v14 = ((uint64_t (*)(char **, uint64_t))off_1EDFA4488[v15])(&v22, result);
LABEL_21:
      *(void *)a4 = v14;
      goto LABEL_22;
    case 8:
      if (*a3 < 4) {
        return 561211770;
      }
      DSPGraph::CalculationBox::Value::operator float<float>(result);
      *(_DWORD *)a4 = v20;
LABEL_36:
      int v9 = 4;
      goto LABEL_37;
    case 9:
      if (*a3 < 8) {
        return 561211770;
      }
      uint64_t v10 = *(unsigned int *)(result + 8);
      if (v10 == -1) {
        std::__throw_bad_variant_access[abi:ne180100]();
      }
      std::string v22 = &v21;
      *(double *)a4 = ((double (*)(char **, uint64_t))off_1EDFA4498[v10])(&v22, result);
LABEL_22:
      int v9 = 8;
LABEL_37:
      uint64_t result = 0;
      *a3 = v9;
      return result;
    default:
      return result;
  }
}

uint64_t boost::container::vector<DSPGraph::CalculationBox::Value,boost::container::dtl::static_storage_allocator<DSPGraph::CalculationBox::Value,2ul,0ul,true>,void>::operator[](uint64_t a1)
{
  if (*(void *)(a1 + 32) <= 1uLL) {
    __assert_rtn("operator[]", "vector.hpp", 1670, "this->m_holder.m_size > n");
  }
  return a1 + 16;
}

uint64_t DSPGraph::CalculationBox::Value::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  uint64_t v3 = *(unsigned int *)(a2 + 8);
  if (v2 == -1 || v3 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  char v7 = &v6;
  return ((uint64_t (*)(char **, uint64_t, uint64_t))*(&off_1EDFA43B8[2 * v2] + v3))(&v7, a1, a2);
}

uint64_t DSPGraph::CalculationBox::Value::operator<(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  uint64_t v3 = *(unsigned int *)(a2 + 8);
  if (v2 == -1 || v3 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  char v7 = &v6;
  return ((uint64_t (*)(char **, uint64_t, uint64_t))*(&off_1EDFA4398[2 * v2] + v3))(&v7, a1, a2);
}

uint64_t DSPGraph::CalculationBox::Value::operator>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  uint64_t v3 = *(unsigned int *)(a2 + 8);
  if (v2 == -1 || v3 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  char v7 = &v6;
  return ((uint64_t (*)(char **, uint64_t, uint64_t))*(&off_1EDFA43D8[2 * v2] + v3))(&v7, a1, a2);
}

void std::__throw_bad_variant_access[abi:ne180100]()
{
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x1E4FBA4F0] + 16;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator>(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, double *a2, double *a3)
{
  return *a2 > *a3;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul,0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator>(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, double *a2, uint64_t *a3)
{
  return *a2 > (double)*a3;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul,1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator>(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, uint64_t *a2, double *a3)
{
  return *a3 < (double)*a2;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator>(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, void *a2, void *a3)
{
  return *a2 > *a3;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator<(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, double *a2, double *a3)
{
  return *a2 < *a3;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul,0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator<(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, double *a2, uint64_t *a3)
{
  return *a2 < (double)*a3;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul,1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator<(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, uint64_t *a2, double *a3)
{
  return *a3 > (double)*a2;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator<(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, void *a2, void *a3)
{
  return *a2 < *a3;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator==(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, double *a2, double *a3)
{
  return *a2 == *a3;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul,0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator==(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, double *a2, uint64_t *a3)
{
  return *a2 == (double)*a3;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul,1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator==(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, uint64_t *a2, double *a3)
{
  return *a3 == (double)*a2;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator==(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, void *a2, void *a3)
{
  return *a2 == *a3;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator BOOL<BOOL>(void)::{lambda(BOOL)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&>(uint64_t a1, void *a2)
{
  return *a2 != 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator/(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, double *a2, double *a3)
{
  double v3 = *a2;
  if (*a3 == 0.0)
  {
    if (v3 <= 0.0)
    {
      if (v3 >= 0.0) {
        *(double *)&uint64_t result = NAN;
      }
      else {
        *(double *)&uint64_t result = -INFINITY;
      }
    }
    else
    {
      *(double *)&uint64_t result = INFINITY;
    }
  }
  else
  {
    *(double *)&uint64_t result = v3 / *a3;
  }
  return result;
}

double std::__variant_detail::__visitation::__base::__dispatcher<1ul,0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator/(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, double *a2, uint64_t *a3)
{
  return *a2 / (double)*a3;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul,1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator/(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, uint64_t *a2, double *a3)
{
  double v3 = *a3;
  uint64_t v4 = 0x7FF0000000000000;
  unint64_t v5 = 0xFFF0000000000000;
  if (!*a2) {
    unint64_t v5 = 0x7FF8000000000000;
  }
  if (*a2 <= 0) {
    uint64_t v4 = v5;
  }
  if (v3 == 0.0) {
    return v4;
  }
  else {
    *(double *)&uint64_t result = (double)*a2 / v3;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator/(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, void *a2, uint64_t *a3)
{
  return *a2 / *a3;
}

double std::__variant_detail::__visitation::__base::__dispatcher<1ul,0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator*(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, double *a2, uint64_t *a3)
{
  return *a2 * (double)*a3;
}

double std::__variant_detail::__visitation::__base::__dispatcher<0ul,1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator*(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, uint64_t *a2, double *a3)
{
  return *a3 * (double)*a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator*(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, void *a2, void *a3)
{
  return *a3 * *a2;
}

double std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator-(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, double *a2, double *a3)
{
  return *a2 - *a3;
}

double std::__variant_detail::__visitation::__base::__dispatcher<1ul,0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator-(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, double *a2, uint64_t *a3)
{
  return *a2 - (double)*a3;
}

double std::__variant_detail::__visitation::__base::__dispatcher<0ul,1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator-(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, uint64_t *a2, double *a3)
{
  return (double)*a2 - *a3;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator-(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, void *a2, void *a3)
{
  return *a2 - *a3;
}

double std::__variant_detail::__visitation::__base::__dispatcher<1ul,0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator+(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, double *a2, uint64_t *a3)
{
  return *a2 + (double)*a3;
}

double std::__variant_detail::__visitation::__base::__dispatcher<0ul,1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator+(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, uint64_t *a2, double *a3)
{
  return *a3 + (double)*a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator+(DSPGraph::CalculationBox::Value const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const>(uint64_t a1, void *a2, void *a3)
{
  return *a3 + *a2;
}

double std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator double<double>(void)::{lambda(double)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&>(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

double std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator double<double>(void)::{lambda(double)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&>(uint64_t a1, uint64_t *a2)
{
  return (double)*a2;
}

unint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator unsigned long long<unsigned long long>(void)::{lambda(unsigned long long)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&>(uint64_t a1, double *a2)
{
  return (unint64_t)*a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator unsigned long long<unsigned long long>(void)::{lambda(unsigned long long)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&>(uint64_t a1, uint64_t a2)
{
  return *(void *)a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator unsigned int<unsigned int>(void)::{lambda(unsigned int)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&>(uint64_t a1, double *a2)
{
  return *a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator unsigned int<unsigned int>(void)::{lambda(unsigned int)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&>(uint64_t a1, unsigned int *a2)
{
  return *a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator unsigned short<unsigned short>(void)::{lambda(unsigned short)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&>(uint64_t a1, double *a2)
{
  return (int)*a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator unsigned short<unsigned short>(void)::{lambda(unsigned short)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&>(uint64_t a1, unsigned __int16 *a2)
{
  return *a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator unsigned char<unsigned char>(void)::{lambda(unsigned char)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&>(uint64_t a1, double *a2)
{
  return (int)*a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator unsigned char<unsigned char>(void)::{lambda(unsigned char)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&>(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator long long<long long>(void)::{lambda(long long)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&>(uint64_t a1, double *a2)
{
  return (uint64_t)*a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator long long<long long>(void)::{lambda(long long)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&>(uint64_t a1, uint64_t a2)
{
  return *(void *)a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator int<int>(void)::{lambda(int)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&>(uint64_t a1, double *a2)
{
  return (int)*a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator int<int>(void)::{lambda(int)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&>(uint64_t a1, unsigned int *a2)
{
  return *a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator short<short>(void)::{lambda(short)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&>(uint64_t a1, double *a2)
{
  return (int)*a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator short<short>(void)::{lambda(short)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&>(uint64_t a1, __int16 *a2)
{
  return *a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator signed char<signed char>(void)::{lambda(signed char)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&>(uint64_t a1, double *a2)
{
  return (int)*a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<DSPGraph::CalculationBox::Value::operator signed char<signed char>(void)::{lambda(signed char)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,long long,double> const&>(uint64_t a1, char *a2)
{
  return *a2;
}

unint64_t DSPGraph::CalculationBox::getPropertyInfo(DSPGraph::CalculationBox *this, unsigned int a2, int a3)
{
  if (a2 >= 0xA)
  {
    uint64_t PropertyInfo = DSPGraph::Box::getPropertyInfo(this, a2, a3);
    unint64_t v5 = PropertyInfo & 0xFFFFFFFF00000000;
  }
  else
  {
    LODWORD(PropertyInfo) = -10866;
    if (a3 == 2)
    {
      unint64_t v5 = 0;
      if (*((_DWORD *)this + 195) == 1) {
        LODWORD(PropertyInfo) = dword_1901DA7E0[a2];
      }
      else {
        LODWORD(PropertyInfo) = -10866;
      }
    }
    else if (a3 == 1)
    {
      if (*((_DWORD *)this + 194) == 1) {
        LODWORD(PropertyInfo) = dword_1901DA7E0[a2];
      }
      else {
        LODWORD(PropertyInfo) = -10866;
      }
      if (*((_DWORD *)this + 194) == 1) {
        unint64_t v5 = 0x100000000;
      }
      else {
        unint64_t v5 = 0;
      }
    }
    else
    {
      unint64_t v5 = 0;
    }
  }
  return v5 | PropertyInfo;
}

double DSPGraph::CalculationBox::desc@<D0>(DSPGraph::CalculationBox *this@<X0>, uint64_t a2@<X8>)
{
  int v2 = *((_DWORD *)this + 193);
  *(_DWORD *)a2 = 1668183148;
  *(_DWORD *)(a2 + 4) = v2;
  *(void *)&double result = 1633841016;
  *(void *)(a2 + 8) = 1633841016;
  *(_DWORD *)(a2 + 16) = 0;
  return result;
}

uint64_t DSPGraph::CalculationBox::getParameterInfo@<X0>(uint64_t this@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (!a3)
  {
    if (a2 == 2)
    {
      if (!*(_DWORD *)(this + 780))
      {
        *(_DWORD *)(a4 + 48) = 0;
        strcpy((char *)a4, "output parameter");
        *(unsigned char *)(a4 + 17) = 0;
        *(_WORD *)(a4 + 18) = 0;
        *(_DWORD *)(a4 + 20) = 0;
        *(void *)(a4 + 24) = 0;
        *(_OWORD *)(a4 + 32) = xmmword_1901DA750;
        *(void *)(a4 + 56) = 0;
        *(_DWORD *)(a4 + 64) = 0;
        *(void *)(a4 + 72) = 0;
        *(_DWORD *)(a4 + 80) = 26;
        *(void *)(a4 + 84) = 0x7F7FFFFFFF7FFFFFLL;
        unint64_t v6 = 0x4000000000000000;
        goto LABEL_12;
      }
    }
    else if (a2 == 1 && !*(_DWORD *)(this + 776))
    {
      *(_DWORD *)(a4 + 48) = 0;
      strcpy((char *)a4, "input parameter");
      *(_OWORD *)(a4 + 16) = unk_1901DA708;
      *(_OWORD *)(a4 + 32) = xmmword_1901DA718;
      *(void *)(a4 + 56) = 0;
      *(_DWORD *)(a4 + 64) = 0;
      *(void *)(a4 + 72) = 0;
      *(_DWORD *)(a4 + 80) = 26;
      *(void *)(a4 + 84) = 0x7F7FFFFFFF7FFFFFLL;
      unint64_t v6 = 0xC000000000000000;
LABEL_12:
      *(void *)(a4 + 92) = v6;
      char v4 = 1;
      goto LABEL_10;
    }
    char v4 = 0;
    int v5 = -10866;
    goto LABEL_9;
  }
  char v4 = 0;
  int v5 = 1869640255;
LABEL_9:
  *(_DWORD *)a4 = v5;
LABEL_10:
  *(unsigned char *)(a4 + 104) = v4;
  return this;
}

_DWORD *DSPGraph::CalculationBox::getParameterList@<X0>(_DWORD *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  if (a2 == 2)
  {
    if (!this[195])
    {
LABEL_4:
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      char v4 = operator new(4uLL);
      *a3 = v4;
      *char v4 = 0;
      this = v4 + 1;
      a3[1] = this;
      a3[2] = this;
      return this;
    }
  }
  else if (a2 == 1 && !this[194])
  {
    goto LABEL_4;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return this;
}

const char *DSPGraph::Box::ClassName(DSPGraph::Box *this)
{
  return "Box";
}

void DSPGraph::CalculationBox::~CalculationBox(DSPGraph::CalculationBox *this)
{
  *(void *)this = &unk_1EDF97E90;
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x192FC8940);
}

{
  *(void *)this = &unk_1EDF97E90;
  DSPGraph::Box::~Box(this);
}

void boost::container::dtl::static_storage_allocator<DSPGraph::CalculationBox::Value,2ul,0ul,true>::on_capacity_overflow(boost::container *a1)
{
}

void boost::container::throw_bad_alloc(boost::container *this)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
  void *exception = &unk_1EDF96200;
  exception[1] = "boost::container::bad_alloc thrown";
}

const char *boost::container::exception::what(boost::container::exception *this)
{
  if (*((void *)this + 1)) {
    return (const char *)*((void *)this + 1);
  }
  else {
    return "unknown boost::container exception";
  }
}

void boost::container::bad_alloc::~bad_alloc(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x192FC8940);
}

uint64_t MP4BoxParser_TimeToSample::Init(MP4BoxParser **this)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = MP4BoxParser_Full::Initialize((MP4BoxParser_Full *)this);
  if (!v2)
  {
    if (*((_DWORD *)this + 5) != 1937011827) {
      return 4294967294;
    }
    unsigned int v3 = (*((uint64_t (**)(MP4BoxParser **))*this + 3))(this);
    unsigned int v4 = (*((uint64_t (**)(MP4BoxParser **))*this + 3))(this);
    unint64_t v5 = (unint64_t)this[3];
    BOOL v6 = v5 >= v4;
    unint64_t v7 = v5 - v4;
    if (!v6 || v7 <= 3)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        return 0xFFFFFFFFLL;
      }
      int v15 = 136315394;
      uint64_t v16 = "MP4_BoxParser_TimeToSample.cpp";
      __int16 v17 = 1024;
      int v18 = 83;
      int v9 = MEMORY[0x1E4F14500];
      uint64_t v10 = "%25s:%-5d  TimeToSample box too small to contain its entry count";
LABEL_9:
      _os_log_impl(&dword_18FEC0000, v9, OS_LOG_TYPE_ERROR, v10, (uint8_t *)&v15, 0x12u);
      return 0xFFFFFFFFLL;
    }
    unsigned int v12 = v4;
    uint64_t DataSourceBytes = MP4BoxParser::ReadDataSourceBytes(this[1], v3, 4uLL, (char *)this + 60);
    if (!DataSourceBytes)
    {
      unsigned int v14 = bswap32(*((_DWORD *)this + 15));
      *((_DWORD *)this + 15) = v14;
      if ((unint64_t)this[3] - v12 - 4 >= 8 * (unint64_t)v14) {
        return 0;
      }
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        return 0xFFFFFFFFLL;
      }
      int v15 = 136315394;
      uint64_t v16 = "MP4_BoxParser_TimeToSample.cpp";
      __int16 v17 = 1024;
      int v18 = 92;
      int v9 = MEMORY[0x1E4F14500];
      uint64_t v10 = "%25s:%-5d  TimeToSample box too small to contain its entries";
      goto LABEL_9;
    }
    uint64_t v2 = DataSourceBytes;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v15 = 136315394;
      uint64_t v16 = "MP4_BoxParser_TimeToSample.cpp";
      __int16 v17 = 1024;
      int v18 = 86;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Can't read TimeToSample box entry count", (uint8_t *)&v15, 0x12u);
    }
  }
  return v2;
}

void MP4BoxParser_TimeToSample::~MP4BoxParser_TimeToSample(MP4BoxParser_TimeToSample *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDF8DA18;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  JUMPOUT(0x192FC8940);
}

{
  uint64_t v2;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDF8DA18;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

uint64_t std::__function::__func<MP4BoxParser_TimeToSample::GetTotalSampleDuration(void)::$_0,std::allocator<MP4BoxParser_TimeToSample::GetTotalSampleDuration(void)::$_0>,void ()(void const*)>::operator()(uint64_t result, int8x8_t **a2)
{
  uint64_t v2 = *(unsigned int *)(*(void *)(result + 8) + 60);
  if (v2)
  {
    unsigned int v3 = *a2;
    unsigned int v4 = *(uint64_t **)(result + 16);
    uint64_t v5 = *v4;
    do
    {
      int8x8_t v6 = *v3++;
      int32x2_t v7 = (int32x2_t)vrev32_s8(v6);
      v5 += vmul_lane_s32(v7, v7, 1).u32[0];
      --v2;
    }
    while (v2);
    *unsigned int v4 = v5;
  }
  return result;
}

__n128 std::__function::__func<MP4BoxParser_TimeToSample::GetTotalSampleDuration(void)::$_0,std::allocator<MP4BoxParser_TimeToSample::GetTotalSampleDuration(void)::$_0>,void ()(void const*)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EDFA0A38;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<MP4BoxParser_TimeToSample::GetTotalSampleDuration(void)::$_0,std::allocator<MP4BoxParser_TimeToSample::GetTotalSampleDuration(void)::$_0>,void ()(void const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EDFA0A38;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<MP4BoxParser_TimeToSample::GetTotalSampleDuration(void)::$_0,std::allocator<MP4BoxParser_TimeToSample::GetTotalSampleDuration(void)::$_0>,void ()(void const*)>::~__func()
{
}

uint64_t ID3CallbackProc(_DWORD *a1, int a2, unsigned int a3, int a4, void **a5, unsigned int *a6)
{
  if (a2) {
    return 0;
  }
  unsigned int v8 = a1[2];
  if (a4 + a3 > v8) {
    return 4294967272;
  }
  uint64_t result = 0;
  *a5 = (void *)(*(void *)a1 + a3);
  *a6 = v8 - a3;
  return result;
}

uint64_t AudioFormatProperty_ID3TagToDictionary(unsigned __int8 *a1, int a2, __CFDictionary **a3)
{
  uint64_t v32 = 0;
  uint64_t v4 = 2003329396;
  long long v30 = a1;
  int v31 = a2;
  if (!ID3ParserOpen((uint64_t)&v30, (uint64_t)ID3CallbackProc, (uint64_t)&v32))
  {
    unsigned int v29 = 0;
    int v28 = 4;
    if (!ID3ParserGetProperty(v32, 0, 0, 1717792372, (uint64_t)&v28, (uint64_t)&v29))
    {
      *(_DWORD *)bytes = 0;
      CFTypeRef cf = 0;
      CFTypeRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      __int16 v21 = 257;
      int v19 = 0;
      int v28 = 4;
      ID3ParserGetProperty(v32, 0, 0, 1953916274, (uint64_t)&v28, (uint64_t)&v19);
      if (v19 == 2) {
        CFIndex v5 = 3;
      }
      else {
        CFIndex v5 = 4;
      }
      int v24 = 0;
      if (v29)
      {
        unsigned int v6 = 0;
        CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        do
        {
          int v28 = 12;
          unsigned int v25 = v6;
          if (!ID3ParserGetProperty(v32, 8, (uint64_t)&v24, 1718185574, (uint64_t)&v28, (uint64_t)&v26))
          {
            unsigned int v8 = bswap32(v26);
            *(_DWORD *)bytes = v8;
            if (v19 == 2) {
              *(_DWORD *)bytes = v8 >> 8;
            }
            CFStringRef v9 = CFStringCreateWithBytes(v7, bytes, v5, 0x201u, 0);
            if (v9)
            {
              int v28 = 8;
              unsigned int v25 = v6;
              if (!ID3ParserGetProperty(v32, 4, (uint64_t)&v27, 1717854580, (uint64_t)&v28, (uint64_t)&cf))
              {
                CFTypeID v10 = CFGetTypeID(cf);
                if (v10 == CFDictionaryGetTypeID())
                {
                  uint64_t v16 = 0;
                  CFTypeRef v17 = cf;
                  __int16 v18 = 0;
                  CACFDictionary::GetString((CACFDictionary *)&v17, @"identifier", (const __CFString **)&v16);
                  if (v16)
                  {
                    int v15 = 0;
                    if (CACFDictionary::GetDictionary((CACFDictionary *)&Mutable, v9, &v15))
                    {
                      uint64_t v13 = v15;
                      __int16 v14 = 256;
                      CACFDictionary::AddDictionary((CACFDictionary *)&v13, v16, (const __CFDictionary *)cf);
                    }
                    else
                    {
                      uint64_t v13 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                      __int16 v14 = 257;
                      if (CACFDictionary::AddDictionary((CACFDictionary *)&v13, v16, (const __CFDictionary *)cf))CACFDictionary::AddDictionary((CACFDictionary *)&Mutable, v9, v13); {
                    }
                      }
                    CACFDictionary::~CACFDictionary((CACFDictionary *)&v13);
                  }
                  CACFDictionary::~CACFDictionary((CACFDictionary *)&v17);
                }
                else
                {
                  CACFDictionary::AddCFType((CACFDictionary *)&Mutable, v9, cf);
                }
                CFRelease(cf);
                CFTypeRef cf = 0;
              }
              CFRelease(v9);
            }
          }
          ++v6;
        }
        while (v6 < v29);
      }
      if (CACFDictionary::Size((CACFDictionary *)&Mutable))
      {
        if (Mutable)
        {
          CFRetain(Mutable);
          uint64_t v11 = (__CFDictionary *)Mutable;
        }
        else
        {
          uint64_t v11 = 0;
        }
        uint64_t v4 = 0;
        *a3 = v11;
      }
      CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
    }
    ID3ParserClose();
  }
  return v4;
}

void sub_1900529F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va1);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va2);
  _Unwind_Resume(a1);
}

void sub_190052B20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_190052BE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SetAllowedClassesForAUAudioUnitHostXPCInterface(void *a1)
{
  id v4 = a1;
  uint64_t v1 = [v4 classesForSelector:sel_propertiesChanged_ argumentIndex:0 ofReply:0];
  uint64_t v2 = (void *)[v1 mutableCopy];

  uint64_t v3 = self;
  [v2 addObject:v3];

  [v2 addObject:objc_opt_class()];
  [v4 setClasses:v2 forSelector:sel_propertiesChanged_ argumentIndex:0 ofReply:0];
  if (getAVSpeechSynthesisMarkerClass() && getAVSpeechSynthesisProviderRequestClass())
  {
    [v2 addObject:getAVSpeechSynthesisMarkerClass()];
    [v2 addObject:getAVSpeechSynthesisProviderRequestClass()];
    [v4 setClasses:v2 forSelector:sel_speechSynthesisMetadataAvailable_speechRequest_ argumentIndex:0 ofReply:0];
  }
}

void sub_190052D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id getAVSpeechSynthesisMarkerClass(void)
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getAVSpeechSynthesisMarkerClass(void)::softClass;
  uint64_t v7 = getAVSpeechSynthesisMarkerClass(void)::softClass;
  if (!getAVSpeechSynthesisMarkerClass(void)::softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = ___ZL31getAVSpeechSynthesisMarkerClassv_block_invoke;
    v3[3] = &unk_1E5688B80;
    v3[4] = &v4;
    ___ZL31getAVSpeechSynthesisMarkerClassv_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_190052E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getAVSpeechSynthesisProviderRequestClass(void)
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getAVSpeechSynthesisProviderRequestClass(void)::softClass;
  uint64_t v7 = getAVSpeechSynthesisProviderRequestClass(void)::softClass;
  if (!getAVSpeechSynthesisProviderRequestClass(void)::softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = ___ZL40getAVSpeechSynthesisProviderRequestClassv_block_invoke;
    v3[3] = &unk_1E5688B80;
    v3[4] = &v4;
    ___ZL40getAVSpeechSynthesisProviderRequestClassv_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_190052EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZL40getAVSpeechSynthesisProviderRequestClassv_block_invoke(uint64_t a1)
{
  AVFAudioLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AVSpeechSynthesisProviderRequest");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAVSpeechSynthesisProviderRequestClass(void)::softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                          + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getAVSpeechSynthesisProviderRequestClass()_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"AVFASoftLink.h", 67, @"Unable to find class %s", "AVSpeechSynthesisProviderRequest");

    __break(1u);
  }
}

void sub_190052FD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19005314C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, _Unwind_Exception *exception_object)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL19AVFAudioLibraryCorePPc_block_invoke_4969()
{
  uint64_t result = _sl_dlopen();
  AVFAudioLibraryCore(char **)::frameworkLibrary = result;
  return result;
}

void ___ZL31getAVSpeechSynthesisMarkerClassv_block_invoke(uint64_t a1)
{
  AVFAudioLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AVSpeechSynthesisMarker");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAVSpeechSynthesisMarkerClass(void)::softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getAVSpeechSynthesisMarkerClass()_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"AVFASoftLink.h", 69, @"Unable to find class %s", "AVSpeechSynthesisMarker");

    __break(1u);
  }
}

void sub_1900532AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1900533C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_190053590(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_190053664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v13 = v12;

  _Unwind_Resume(a1);
}

void sub_190053758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_190053904(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id CreateAUAudioUnitXPCInterface()
{
  uint64_t v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EDFB3DC0];
  ConfigureAUAudioUnitXPCInterface(v0);
  objc_claimAutoreleasedReturnValue();

  return v0;
}

void sub_190053AEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id ConfigureAUAudioUnitXPCInterface(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 classesForSelector:sel_valueForProperty_propagateError_reply_ argumentIndex:1 ofReply:1];
  uint64_t v3 = (void *)[v2 mutableCopy];

  uint64_t v4 = self;
  [v3 addObject:v4];

  uint64_t v5 = self;
  [v3 addObject:v5];

  [v1 setXPCType:MEMORY[0x1E4F14590] forSelector:sel_createRenderPipe_formats_maxFrames_midiOutSizeHint_resources_reply_ argumentIndex:4 ofReply:0];
  uint64_t v6 = (void *)[v3 mutableCopy];
  uint64_t v7 = self;
  [v6 addObject:v7];

  uint64_t v8 = self;
  [v6 addObject:v8];

  [v1 setClasses:v6 forSelector:sel_valueForProperty_propagateError_reply_ argumentIndex:1 ofReply:1];
  [v1 setClasses:v6 forSelector:sel_setValue_forProperty_propagateError_reply_ argumentIndex:0 ofReply:0];
  [v1 setClasses:v6 forSelector:sel_valueForKey_reply_ argumentIndex:1 ofReply:1];
  [v1 setClasses:v6 forSelector:sel_setValue_forKey_reply_ argumentIndex:0 ofReply:0];

  CFStringRef v9 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v10 = self;
  uint64_t v11 = self;
  unsigned int v12 = self;
  uint64_t v13 = objc_msgSend(v9, "setWithObjects:", v10, v11, v12, 0);

  [v1 setClasses:v13 forSelector:sel_valueForProperty_propagateError_reply_ argumentIndex:0 ofReply:0];
  [v1 setClasses:v13 forSelector:sel_valueForKey_reply_ argumentIndex:0 ofReply:0];
  [v1 setClasses:v13 forSelector:sel_setValue_forProperty_propagateError_reply_ argumentIndex:1 ofReply:0];
  [v1 setClasses:v13 forSelector:sel_setValue_forProperty_propagateError_reply_ argumentIndex:1 ofReply:1];
  [v1 setClasses:v13 forSelector:sel_setValue_forKey_reply_ argumentIndex:1 ofReply:0];
  [v1 setClasses:v13 forSelector:sel_setValue_forKey_reply_ argumentIndex:1 ofReply:1];
  [v1 setClasses:v13 forSelector:sel_setBusFormat_scope_format_reply_ argumentIndex:1 ofReply:1];
  [v1 setClasses:v13 forSelector:sel_setBusCount_scope_reply_ argumentIndex:1 ofReply:1];

  __int16 v14 = (void *)[v3 mutableCopy];
  int v15 = self;
  [v14 addObject:v15];

  [v1 setClasses:v14 forSelector:sel_open_instanceUUID_reply_ argumentIndex:3 ofReply:1];
  [v1 setClasses:v14 forSelector:sel_open_instanceUUID_reply_ argumentIndex:4 ofReply:1];
  [v1 setClasses:v14 forSelector:sel_getBusses_reply_ argumentIndex:1 ofReply:1];

  uint64_t v16 = (void *)[v3 mutableCopy];
  CFTypeRef v17 = self;
  [v16 addObject:v17];

  __int16 v18 = self;
  [v16 addObject:v18];

  int v19 = self;
  [v16 addObject:v19];

  int v20 = self;
  [v16 addObject:v20];

  [v1 setClasses:v16 forSelector:sel_getParameterTree_ argumentIndex:1 ofReply:1];
  __int16 v21 = [MEMORY[0x1E4F28B50] mainBundle];
  std::string v22 = [v21 infoDictionary];
  std::string v23 = [v22 objectForKeyedSubscript:@"AUAudioUnitViewsSupported"];

  if (v23 && (int v24 = [v23 BOOLValue], v23, !v24))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Not supporting AUAudioUnitViews in this audio unit interface.", buf, 2u);
    }
  }
  else
  {
    unsigned int v25 = (void *)[v3 mutableCopy];
    uint64_t v46 = 0;
    vDSP_Length v47 = &v46;
    uint64_t v48 = 0x2050000000;
    unsigned int v26 = (void *)getAUAudioUnitViewConfigurationClass(void)::softClass;
    uint64_t v49 = getAUAudioUnitViewConfigurationClass(void)::softClass;
    if (!getAUAudioUnitViewConfigurationClass(void)::softClass)
    {
      *(void *)buf = MEMORY[0x1E4F143A8];
      uint64_t v42 = 3221225472;
      uint64_t v43 = ___ZL36getAUAudioUnitViewConfigurationClassv_block_invoke;
      BOOL v44 = &unk_1E5688B80;
      uint64_t v45 = &v46;
      ___ZL36getAUAudioUnitViewConfigurationClassv_block_invoke((uint64_t)buf);
      unsigned int v26 = (void *)v47[3];
    }
    id v27 = v26;
    _Block_object_dispose(&v46, 8);
    [v25 addObject:v27];
    [v1 setClasses:v25 forSelector:sel_supportedViewConfigurations_reply_ argumentIndex:0 ofReply:0];
    [v1 setClasses:v25 forSelector:sel_selectViewConfiguration_reply_ argumentIndex:0 ofReply:0];
  }
  int v28 = (void *)[v3 mutableCopy];
  unsigned int v29 = self;
  [v28 addObject:v29];

  [v1 setClasses:v28 forSelector:sel_loadUserPresets_ argumentIndex:1 ofReply:1];
  [v1 setClasses:v28 forSelector:sel_saveUserPreset_state_reply_ argumentIndex:0 ofReply:0];
  [v1 setClasses:v28 forSelector:sel_presetStateFor_reply_ argumentIndex:0 ofReply:0];

  long long v30 = (void *)[v3 mutableCopy];
  uint64_t v46 = 0;
  vDSP_Length v47 = &v46;
  uint64_t v48 = 0x2050000000;
  int v31 = (void *)getAVAudioFormatClass(void)::softClass;
  uint64_t v49 = getAVAudioFormatClass(void)::softClass;
  if (!getAVAudioFormatClass(void)::softClass)
  {
    *(void *)buf = MEMORY[0x1E4F143A8];
    uint64_t v42 = 3221225472;
    uint64_t v43 = ___ZL21getAVAudioFormatClassv_block_invoke_4998;
    BOOL v44 = &unk_1E5688B80;
    uint64_t v45 = &v46;
    ___ZL21getAVAudioFormatClassv_block_invoke_4998((uint64_t)buf);
    int v31 = (void *)v47[3];
  }
  id v32 = v31;
  _Block_object_dispose(&v46, 8);
  [v30 addObject:v32];
  [v1 setClasses:v30 forSelector:sel_setBusFormat_scope_format_reply_ argumentIndex:2 ofReply:0];

  uint64_t v33 = (void *)[v3 mutableCopy];
  uint64_t v34 = self;
  [v33 addObject:v34];

  double v35 = self;
  [v33 addObject:v35];

  [v1 setClasses:v33 forSelector:sel_profileStateForCable_channel_reply_ argumentIndex:1 ofReply:1];
  [v1 setClasses:v33 forSelector:sel_enableProfile_cable_onChannel_reply_ argumentIndex:0 ofReply:0];
  [v1 setClasses:v33 forSelector:sel_disableProfile_cable_onChannel_reply_ argumentIndex:0 ofReply:0];

  [v1 setXPCType:MEMORY[0x1E4F14590] forSelector:sel_updateWorkgroupMirror_reply_ argumentIndex:0 ofReply:0];
  __double2 v36 = (void *)[v3 mutableCopy];
  id AVSpeechSynthesisProviderRequestClass = getAVSpeechSynthesisProviderRequestClass();
  if (AVSpeechSynthesisProviderRequestClass) {
    [v36 addObject:AVSpeechSynthesisProviderRequestClass];
  }
  uint64_t v46 = 0;
  vDSP_Length v47 = &v46;
  uint64_t v48 = 0x2050000000;
  float v38 = (void *)getAVSpeechSynthesisProviderVoiceClass(void)::softClass;
  uint64_t v49 = getAVSpeechSynthesisProviderVoiceClass(void)::softClass;
  if (!getAVSpeechSynthesisProviderVoiceClass(void)::softClass)
  {
    *(void *)buf = MEMORY[0x1E4F143A8];
    uint64_t v42 = 3221225472;
    uint64_t v43 = ___ZL38getAVSpeechSynthesisProviderVoiceClassv_block_invoke;
    BOOL v44 = &unk_1E5688B80;
    uint64_t v45 = &v46;
    ___ZL38getAVSpeechSynthesisProviderVoiceClassv_block_invoke((uint64_t)buf);
    float v38 = (void *)v47[3];
  }
  id v39 = v38;
  _Block_object_dispose(&v46, 8);
  if (v39) {
    [v36 addObject:v39];
  }
  [v1 setClasses:v36 forSelector:sel_synthesizeSpeechRequest_reply_ argumentIndex:0 ofReply:0];
  [v1 setClasses:v36 forSelector:sel_getSpeechVoices_ argumentIndex:1 ofReply:1];

  return v1;
}

void sub_1900543DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

Class ___ZL36getAUAudioUnitViewConfigurationClassv_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  v7[0] = 0;
  if (!CoreAudioKitLibraryCore(char **)::frameworkLibrary)
  {
    v7[1] = (void *)MEMORY[0x1E4F143A8];
    v7[2] = (void *)3221225472;
    v7[3] = ___ZL23CoreAudioKitLibraryCorePPc_block_invoke_5012;
    v7[4] = &__block_descriptor_40_e5_v8__0l;
    v7[5] = v7;
    long long v8 = xmmword_1E5687790;
    uint64_t v9 = 0;
    CoreAudioKitLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  }
  if (!CoreAudioKitLibraryCore(char **)::frameworkLibrary)
  {
    uint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *CoreAudioKitLibrary()"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"AUAudioUnit_Internal.h", 352, @"%s", v7[0]);

    goto LABEL_10;
  }
  if (v7[0]) {
    free(v7[0]);
  }
  Class result = objc_getClass("AUAudioUnitViewConfiguration");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v5 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v6 = [NSString stringWithUTF8String:"Class getAUAudioUnitViewConfigurationClass()_block_invoke"];
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, @"AUAudioUnit_Internal.h", 355, @"Unable to find class %s", "AUAudioUnitViewConfiguration");

LABEL_10:
    __break(1u);
  }
  getAUAudioUnitViewConfigurationClass(void)::softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1900546E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void ___ZL21getAVAudioFormatClassv_block_invoke_4998(uint64_t a1)
{
  AVFAudioLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AVAudioFormat");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAVAudioFormatClass(void)::softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getAVAudioFormatClass()_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"AVFASoftLink.h", 64, @"Unable to find class %s", "AVAudioFormat");

    __break(1u);
  }
}

void sub_1900547F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL38getAVSpeechSynthesisProviderVoiceClassv_block_invoke(uint64_t a1)
{
  AVFAudioLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AVSpeechSynthesisProviderVoice");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAVSpeechSynthesisProviderVoiceClass(void)::softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getAVSpeechSynthesisProviderVoiceClass()_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"AVFASoftLink.h", 68, @"Unable to find class %s", "AVSpeechSynthesisProviderVoice");

    __break(1u);
  }
}

void sub_1900548D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL23CoreAudioKitLibraryCorePPc_block_invoke_5012()
{
  uint64_t result = _sl_dlopen();
  CoreAudioKitLibraryCore(char **)::frameworkLibrary = result;
  return result;
}

void sub_190054AEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *std::vector<CA::ADMLabel>::__push_back_slow_path<CA::ADMLabel>(void **a1, uint64_t a2)
{
  uint64_t v2 = 0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x492492492492492) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  if (0xDB6DB6DB6DB6DB6ELL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v3) {
    unint64_t v3 = 0xDB6DB6DB6DB6DB6ELL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3)) >= 0x249249249249249) {
    unint64_t v6 = 0x492492492492492;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6)
  {
    if (v6 > 0x492492492492492) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(56 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  long long v8 = &v7[56 * v2];
  char *v8 = 0;
  v8[24] = 0;
  if (*(unsigned char *)(a2 + 24))
  {
    *(_OWORD *)long long v8 = *(_OWORD *)a2;
    *((void *)v8 + 2) = *(void *)(a2 + 16);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
    v8[24] = 1;
  }
  uint64_t v9 = &v7[56 * v6];
  uint64_t v10 = &v7[56 * v2];
  *((_OWORD *)v10 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v10 + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 32) = 0;
  uint64_t v11 = v8 + 56;
  unsigned int v12 = (char *)*a1;
  uint64_t v13 = (char *)a1[1];
  if (v13 == *a1)
  {
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
  }
  else
  {
    uint64_t v14 = 0;
    do
    {
      int v15 = &v8[v14];
      v8[v14 - 56] = 0;
      uint64_t v16 = &v13[v14];
      v8[v14 - 32] = 0;
      if (v13[v14 - 32])
      {
        CFTypeRef v17 = v16 - 56;
        long long v18 = *(_OWORD *)(v16 - 56);
        *(void *)&v8[v14 - 40] = *((void *)v16 - 5);
        *(_OWORD *)&v8[v14 - 56] = v18;
        *((void *)v17 + 1) = 0;
        *((void *)v17 + 2) = 0;
        *(void *)CFTypeRef v17 = 0;
        *(v15 - 32) = 1;
      }
      long long v19 = *(_OWORD *)(v16 - 24);
      *((void *)v15 - 1) = *((void *)v16 - 1);
      *(_OWORD *)(v15 - 24) = v19;
      *((void *)v16 - 2) = 0;
      *((void *)v16 - 1) = 0;
      *((void *)v16 - 3) = 0;
      v14 -= 56;
    }
    while (&v13[v14] != v12);
    uint64_t v13 = (char *)*a1;
    uint64_t v20 = (uint64_t)a1[1];
    *a1 = &v8[v14];
    a1[1] = v11;
    a1[2] = v9;
    while ((char *)v20 != v13)
    {
      v20 -= 56;
      std::__destroy_at[abi:ne180100]<CA::ADMLabel,0>(v20);
    }
  }
  if (v13) {
    operator delete(v13);
  }
  return v11;
}

void std::__destroy_at[abi:ne180100]<CA::ADMAlternativeValueSet,0>(uint64_t a1)
{
  unint64_t v3 = (void **)(a1 + 32);
  std::vector<CA::ADMLabel>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(unsigned char *)(a1 + 24) && *(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t AudioConverterAPI::isOOP(AudioConverterAPI *this, unsigned int *a2, _DWORD *a3)
{
  if (!a2)
  {
    uint64_t v6 = _os_log_pack_size();
    uint64_t message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v6 + 88, 16);
    if (message)
    {
      long long v8 = (caulk::concurrent::message *)message;
      *(_WORD *)_os_log_pack_fill() = 0;
LABEL_10:
      caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v8);
    }
    return 4294967246;
  }
  if (!a3)
  {
    uint64_t v9 = _os_log_pack_size();
    uint64_t v10 = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v9 + 88, 16);
    if (v10)
    {
      long long v8 = (caulk::concurrent::message *)v10;
      uint64_t v11 = (_DWORD *)_os_log_pack_fill();
      *uint64_t v11 = 67109120;
      v11[1] = 1869574207;
      goto LABEL_10;
    }
    return 4294967246;
  }
  if (*a2 < 4) {
    return 561211770;
  }
  int v5 = (*(uint64_t (**)(AudioConverterAPI *))(*(void *)this + 104))(this);
  uint64_t result = 0;
  *a3 = v5;
  return result;
}

uint64_t AudioConverterAPI::isOOP(AudioConverterAPI *this)
{
  return 0;
}

void AudioConverterAPI::isOOPPropertyInfo(AudioConverterAPI *this, unsigned int *a2, unsigned __int8 *a3)
{
  if (a2) {
    *a2 = 4;
  }
  if (a3) {
    *a3 = 0;
  }
}

void AT::ScopedTrace::~ScopedTrace(AT::ScopedTrace *this)
{
  if (*(unsigned char *)this) {
    kdebug_trace();
  }
}

uint64_t acv2::AudioConverterV2::fillBuffer(acv2::AudioConverterV2 *this, int (*a2)(OpaqueAudioConverter *, unsigned int *, void **, void *), void *a3, unsigned int *a4, void *a5)
{
  double v35 = a3;
  __double2 v36 = a2;
  uint64_t v5 = *((void *)this + 4);
  if (!*(unsigned char *)(v5 + 96))
  {
    if (a2)
    {
      if (a4)
      {
        if (a5)
        {
          if (!*(unsigned char *)(v5 + 81) && !*(unsigned char *)(v5 + 80))
          {
            UInt32 v8 = 1;
            v34.mNumberBuffers = 1;
            if ((*(unsigned char *)(v5 + 52) & 0x20) == 0) {
              UInt32 v8 = *(_DWORD *)(v5 + 68);
            }
            UInt32 v9 = *a4;
            v34.mBuffers[0].mNumberChannels = v8;
            v34.mBuffers[0].mDataByteSize = v9;
            v34.mBuffers[0].mData = a5;
            unsigned int v10 = *(_DWORD *)(v5 + 56);
            v33[0] = this;
            v33[1] = &v36;
            v33[2] = &v35;
            ACBaseAudioSpan::ACBaseAudioSpan((ACBaseAudioSpan *)v29, v9 / v10, &v34, 0);
            uint64_t v11 = *((void *)this + 4);
            *(void *)&long long v28 = caulk::function_ref<caulk::expected<unsigned int,int> ()(ACAudioSpan &)>::functor_invoker<acv2::AudioConverterV2::fillBuffer(int (*)(OpaqueAudioConverter *,unsigned int *,void **,void *),void *,unsigned int *,void *)::$_0>;
            *((void *)&v28 + 1) = v33;
            unint64_t v12 = acv2::AudioConverterChain::ProduceOutput(v11, &v28, (ACBaseAudioSpan *)v29);
            if ((v12 & 0xFF00000000) != 0) {
              uint64_t v13 = 0;
            }
            else {
              uint64_t v13 = v12;
            }
            int v14 = *(_DWORD *)(*((void *)this + 4) + 56) * v29[0];
            *a4 = v14;
            if (!v13 && v14 != v34.mBuffers[0].mDataByteSize) {
              std::terminate();
            }
            if (v32 && v30)
            {
              int v31 = v30;
              std::allocator_traits<caulk::rt_allocator<char>>::deallocate[abi:ne180100](v30);
            }
            return v13;
          }
          uint64_t v16 = _os_log_pack_size();
          uint64_t message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v16 + 88, 16);
          if (message)
          {
            long long v18 = (caulk::concurrent::message *)message;
LABEL_28:
            *(_WORD *)_os_log_pack_fill() = 0;
            caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v18);
          }
        }
        else
        {
          uint64_t v26 = _os_log_pack_size();
          uint64_t v27 = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v26 + 88, 16);
          if (v27)
          {
            long long v18 = (caulk::concurrent::message *)v27;
            goto LABEL_28;
          }
        }
      }
      else
      {
        uint64_t v24 = _os_log_pack_size();
        uint64_t v25 = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v24 + 88, 16);
        if (v25)
        {
          long long v18 = (caulk::concurrent::message *)v25;
          goto LABEL_28;
        }
      }
    }
    else
    {
      uint64_t v22 = _os_log_pack_size();
      uint64_t v23 = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v22 + 88, 16);
      if (v23)
      {
        long long v18 = (caulk::concurrent::message *)v23;
        goto LABEL_28;
      }
    }
    return 4294967246;
  }
  uint64_t v13 = 1869627199;
  uint64_t v19 = _os_log_pack_size();
  uint64_t v20 = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v19 + 88, 16);
  if (v20)
  {
    __int16 v21 = (caulk::concurrent::message *)v20;
    *(_WORD *)_os_log_pack_fill() = 0;
    caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v21);
  }
  return v13;
}

void sub_1900551A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a24)
  {
    if (a19) {
      std::allocator_traits<caulk::rt_allocator<char>>::deallocate[abi:ne180100](a19);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t caulk::function_ref<caulk::expected<unsigned int,int> ()(ACAudioSpan &)>::functor_invoker<acv2::AudioConverterV2::fillBuffer(int (*)(OpaqueAudioConverter *,unsigned int *,void **,void *),void *,unsigned int *,void *)::$_0>(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  uint64_t v4 = *(unsigned int **)(a2 + 16);
  uint64_t v5 = *v4;
  if (v5)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 16 * v5;
    do
    {
      size_t v9 = *(unsigned int *)(a2 + 12);
      uint64_t v10 = *(void *)(a2 + 16) + v7;
      *(_DWORD *)(v10 + 12) = v9;
      bzero(*(void **)(v10 + 16), v9);
      v7 += 16;
    }
    while (v8 != v7);
    uint64_t v4 = *(unsigned int **)(a2 + 16);
  }
  uint64_t v11 = v4 + 3;
  unsigned int v12 = (*(uint64_t (**)(void, _DWORD *, _DWORD *, void))v2[1])(*(unsigned int *)(v3 + 8), v11, v11 + 1, *(void *)v2[2]);
  if (v12)
  {
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = 0x100000000;
    unsigned int v12 = *v11 / *(_DWORD *)(*(void *)(v3 + 32) + 16);
  }
  return v13 | v12;
}

uint64_t acv2::AudioConverterV2::getPropertyInfo(acv2::AudioConverterV2 *this, uint64_t a2, unsigned int *a3, BOOL *a4)
{
  if (*((unsigned char *)this + 12) || !*((unsigned char *)this + 13))
  {
    v29[0] = 0;
    char v35 = 0;
  }
  else
  {
    v36[1] = 2739;
    uint64_t v37 = a2;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    kdebug_trace();
    v29[0] = 1;
    int v30 = 2739;
    uint64_t v31 = a2;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    LOBYTE(v36[0]) = 0;
    char v35 = 1;
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)v36);
  }
  uint64_t v8 = *((void *)this + 4);
  PropertyDelegate = acv2::AudioConverterChain::GetPropertyDelegate((acv2::AudioConverterChain *)v8, a2);
  if (PropertyDelegate)
  {
    uint64_t v14 = (*((uint64_t (**)(OpaqueAudioComponentInstance **, uint64_t, unsigned int *, BOOL *))*PropertyDelegate
           + 10))(PropertyDelegate, a2, a3, a4);
    goto LABEL_7;
  }
  uint64_t v14 = 1886547824;
  if ((int)a2 > 1835626095)
  {
    if ((int)a2 > 1886546284)
    {
      if ((a2 - 1936876385) > 0x10 || ((1 << (a2 - 97)) & 0x18101) == 0)
      {
        if (a2 != 1886546285)
        {
          int v16 = 1919837298;
LABEL_51:
          if (a2 != v16) {
            goto LABEL_7;
          }
          goto LABEL_52;
        }
        if (a3)
        {
          uint64_t v25 = *(void **)(v8 + 104);
          uint64_t v26 = *(void **)(v8 + 112);
          if (v25 == v26)
          {
            uint64_t v27 = *(void **)(v8 + 104);
          }
          else
          {
            while (((*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)*v25 + 120))(*v25, v10, v11, v12, v13) & 1) == 0)
            {
              if (++v25 == v26)
              {
                uint64_t v25 = v26;
                break;
              }
            }
            uint64_t v27 = v25;
            uint64_t v25 = *(void **)(v8 + 112);
          }
          *a3 = 8 * (v27 != v25);
        }
        if (a4)
        {
          long long v28 = *(acv2::CodecConverter **)(v8 + 344);
          if (v28)
          {
            uint64_t v14 = 0;
            *a4 = acv2::CodecConverter::PrimeInfoIsWritable(v28);
            goto LABEL_7;
          }
LABEL_48:
          uint64_t v14 = 0;
          *a4 = 0;
          goto LABEL_7;
        }
LABEL_88:
        uint64_t v14 = 0;
        goto LABEL_7;
      }
    }
    else
    {
      if ((int)a2 > 1868786719)
      {
        if (a2 != 1868786720)
        {
          if (a2 != 1885627760) {
            goto LABEL_7;
          }
LABEL_40:
          if (!a3) {
            goto LABEL_47;
          }
          unsigned int v20 = 4;
LABEL_46:
          *a3 = v20;
          goto LABEL_47;
        }
        v36[0] = 0;
        OutputLayUInt32 outSize = acv2::AudioConverterChain::GetOutputLayoutSize((acv2::AudioConverterChain *)v8, v36, &v41);
        goto LABEL_59;
      }
      if (a2 != 1835626096)
      {
        if (a2 != 1835884912) {
          goto LABEL_7;
        }
        if (a3)
        {
          int v17 = *(unsigned __int8 *)(v8 + 416);
          if (!*(unsigned char *)(v8 + 416))
          {
LABEL_54:
            *a3 = v17;
            goto LABEL_55;
          }
          int v18 = *(_DWORD *)(v8 + 28) * *(_DWORD *)(v8 + 68);
LABEL_29:
          int v17 = 4 * v18;
          goto LABEL_54;
        }
LABEL_55:
        if (a4)
        {
          uint64_t v14 = 0;
LABEL_57:
          *a4 = 1;
          goto LABEL_7;
        }
        goto LABEL_88;
      }
    }
    if (*(void *)(v8 + 296) == *(void *)(v8 + 304)) {
      goto LABEL_7;
    }
    goto LABEL_52;
  }
  if ((int)a2 <= 1667850866)
  {
    if ((int)a2 > 1633906531)
    {
      if (a2 != 1633906532)
      {
        if (a2 == 1633906803)
        {
          uint64_t v22 = *(void **)(v8 + 104);
          uint64_t v23 = *(void **)(v8 + 112);
          if (v22 == v23) {
            goto LABEL_81;
          }
          while (((*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)*v22 + 136))(*v22, v10, v11, v12, v13) & 1) == 0)
          {
            if (++v22 == v23)
            {
              uint64_t v22 = v23;
              break;
            }
          }
          if (v22 == *(void **)(v8 + 112))
          {
LABEL_81:
            if (a3) {
              *a3 = 0;
            }
LABEL_47:
            if (a4) {
              goto LABEL_48;
            }
            goto LABEL_88;
          }
          if (a3)
          {
            int v17 = 8;
            goto LABEL_54;
          }
        }
        else
        {
          if (a2 != 1667788144) {
            goto LABEL_7;
          }
          if (a3)
          {
            int v18 = *(_DWORD *)(v8 + 68);
            goto LABEL_29;
          }
        }
        goto LABEL_55;
      }
LABEL_44:
      if (!a3) {
        goto LABEL_47;
      }
      unsigned int v20 = 40;
      goto LABEL_46;
    }
    if (a2 != 1633903204)
    {
      if (a2 != 1633904996) {
        goto LABEL_7;
      }
      goto LABEL_44;
    }
    uint64_t v24 = *(void *)(v8 + 344);
    if (!v24 || !*(unsigned char *)(v24 + 196)) {
      goto LABEL_7;
    }
LABEL_52:
    if (!a3) {
      goto LABEL_55;
    }
    int v17 = 4;
    goto LABEL_54;
  }
  if ((int)a2 <= 1684632679)
  {
    if (a2 != 1667850867 && a2 != 1668244083)
    {
      int v16 = 1684171124;
      goto LABEL_51;
    }
    goto LABEL_40;
  }
  if (a2 == 1684632680 || a2 == 1684892024) {
    goto LABEL_52;
  }
  if (a2 != 1768123424) {
    goto LABEL_7;
  }
  v36[0] = 0;
  OutputLayUInt32 outSize = acv2::AudioConverterChain::GetInputLayoutSize((acv2::AudioConverterChain *)v8, v36, &v41);
LABEL_59:
  uint64_t v14 = OutputLayoutSize;
  if (a3)
  {
    unsigned int v21 = v36[0];
    if (OutputLayoutSize) {
      unsigned int v21 = 0;
    }
    *a3 = v21;
  }
  if (a4) {
    goto LABEL_57;
  }
LABEL_7:
  if (v35) {
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)v29);
  }
  return v14;
}

void sub_19005573C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a14) {
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)&a9);
  }
  _Unwind_Resume(exception_object);
}

void ___ZL32AudioConverterExecuteWorkaroundsv_block_invoke()
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = [MEMORY[0x1E4F28B50] mainBundle];
  id v1 = v0;
  if (v0)
  {
    uint64_t v2 = [v0 bundleIdentifier];
    uint64_t v3 = v2;
    if (!v2)
    {
LABEL_19:

      goto LABEL_20;
    }
    if ([v2 isEqualToString:@"com.apple.mobilegarageband"])
    {
      uint64_t v4 = [v1 infoDictionary];
      uint64_t v5 = v4;
      if (v4
        && ([v4 objectForKeyedSubscript:@"CFBundleVersion"],
            uint64_t v6 = objc_claimAutoreleasedReturnValue(),
            (uint64_t v7 = v6) != 0))
      {
        unsigned int v8 = [v6 intValue];

        if (v8 >> 1 > 0xA22) {
          goto LABEL_11;
        }
      }
      else
      {

        unsigned int v8 = 0;
      }
      ACv2Workarounds::fix84702776_86723525_86479548_89800354_SinglePacketDesc = 1;
      AudioConverterLog();
      size_t v9 = (id) AudioConverterLog(void)::gLog;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        int v12 = 136315906;
        uint64_t v13 = "ACv2Workarounds.mm";
        __int16 v14 = 1024;
        int v15 = 41;
        __int16 v16 = 2112;
        int v17 = v3;
        __int16 v18 = 1024;
        LODWORD(v19) = v8;
        _os_log_impl(&dword_18FEC0000, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %@ 0x%x: fix84702776_86723525_86479548_89800354_SinglePacketDesc", (uint8_t *)&v12, 0x22u);
      }
    }
LABEL_11:
    if (([v3 hasPrefix:@"com.iqiyi."] & 1) != 0
      || [v3 hasPrefix:@"com.qiyi."])
    {
      ACv2Workarounds::fix84702776_86723525_86479548_89800354_SinglePacketDesc = 1;
    }
    AudioConverterLog();
    uint64_t v10 = (id) AudioConverterLog(void)::gLog;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = "ACv2Workarounds.mm";
      int v12 = 136315906;
      __int16 v14 = 1024;
      if (ACv2Workarounds::fix84702776_86723525_86479548_89800354_SinglePacketDesc) {
        uint64_t v11 = "true";
      }
      else {
        uint64_t v11 = "false";
      }
      int v15 = 51;
      __int16 v16 = 2112;
      int v17 = v3;
      __int16 v18 = 2080;
      uint64_t v19 = v11;
      _os_log_impl(&dword_18FEC0000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %@: fix84702776_86723525_86479548_89800354_SinglePacketDesc: %s", (uint8_t *)&v12, 0x26u);
    }
    goto LABEL_19;
  }
LABEL_20:
}

void sub_190055A1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _AudioConverterNewInternal(long long *a1, long long *a2, uint64_t a3, uint64_t a4, void *a5)
{
  return AudioConverterNewInternal(a1, a2, a3, a4, a5, newAudioConverter, 0, 0);
}

uint64_t checkForDecoderExemption(unsigned int a1)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  unsigned int cf2 = a1;
  MainBundle = CFBundleGetMainBundle();
  Identifier = (void *)CFBundleGetIdentifier(MainBundle);
  if (Identifier)
  {
    uint64_t v3 = Identifier;
    CFRetain(Identifier);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf1, v3);
    Identifier = (void *)cf1;
    if (cf1)
    {
      Identifier = (void *)CFEqual(cf1, @"com.sundaysounds.sundaykeys");
      if (Identifier)
      {
        uint64_t v4 = 1;
        goto LABEL_64;
      }
    }
  }
  else
  {
    CFTypeRef cf1 = 0;
  }
  if (!PlatformUtilities::IsInternalBuild((PlatformUtilities *)Identifier)
    || (v5 = (const __CFArray *)CFPreferencesCopyAppValue(@"exemptFromForcedOOPDecoder", @"com.apple.coreaudio"), (CFArrayRef v6 = v5) == 0))
  {
    uint64_t v4 = 0;
    goto LABEL_64;
  }
  CFTypeID v7 = CFGetTypeID(v5);
  if (v7 != CFArrayGetTypeID())
  {
    uint64_t v4 = 0;
    goto LABEL_63;
  }
  v8.i32[0] = bswap32(cf2);
  *(int8x8_t *)v8.i8 = vzip1_s8(*(int8x8_t *)v8.i8, *(int8x8_t *)v8.i8);
  v9.i64[0] = 0x1F0000001FLL;
  v9.i64[1] = 0x1F0000001FLL;
  v10.i64[0] = 0x5F0000005FLL;
  v10.i64[1] = 0x5F0000005FLL;
  *(int8x8_t *)v8.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v10, (uint32x4_t)vsraq_n_s32(v9, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v8.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v8.i8, (int8x8_t)0x2E002E002E002ELL);
  char v44 = 4;
  LODWORD(v43[0]) = vmovn_s16(v8).u32[0];
  BYTE4(v43[0]) = 0;
  uint64_t v11 = (char *)getprogname();
  std::string::basic_string[abi:ne180100]<0>(__p, v11);
  CFTypeRef v40 = 0;
  CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (v44 >= 0) {
    uint64_t v13 = v43;
  }
  else {
    uint64_t v13 = (void **)v43[0];
  }
  CFStringRef v14 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const char *)v13, 0x8000100u);
  CFTypeRef v39 = 0;
  CFTypeRef v40 = v14;
  if (v42 >= 0) {
    int v15 = __p;
  }
  else {
    int v15 = (void **)__p[0];
  }
  v38[0] = &v40;
  v38[1] = &v39;
  CFTypeRef v39 = CFStringCreateWithCString(v12, (const char *)v15, 0x8000100u);
  CFIndex Count = CFArrayGetCount(v6);
  if (Count < 1)
  {
    char v18 = 0;
    goto LABEL_58;
  }
  CFIndex v17 = 0;
  char v18 = 0;
  while (1)
  {
    CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v6, v17);
    CFTypeID v20 = CFGetTypeID(ValueAtIndex);
    if (v20 == CFNumberGetTypeID() && CFEqual(ValueAtIndex, &cf2))
    {
      AudioConverterLog();
      uint64_t v31 = AudioConverterLog(void)::gLog;
      if (!os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_57;
      }
      uint64_t v32 = v43;
      if (v44 < 0) {
        uint64_t v32 = (void **)v43[0];
      }
      *(_DWORD *)buf = 136315650;
      uint64_t v48 = "AudioConverter.cpp";
      __int16 v49 = 1024;
      int v50 = 700;
      __int16 v51 = 2080;
      float64x2_t v52 = v32;
      uint64_t v33 = "%25s:%-5d Decoding from the format %s is exempted from being forced out of process.";
      goto LABEL_56;
    }
    CFTypeID v21 = CFGetTypeID(ValueAtIndex);
    if (v21 == CFStringGetTypeID()) {
      break;
    }
LABEL_39:
    if (++v17 == Count) {
      goto LABEL_58;
    }
  }
  if (CFEqual(ValueAtIndex, v40))
  {
    AudioConverterLog();
    uint64_t v31 = AudioConverterLog(void)::gLog;
    if (!os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_57;
    }
    uint64_t v34 = v43;
    if (v44 < 0) {
      uint64_t v34 = (void **)v43[0];
    }
    *(_DWORD *)buf = 136315650;
    uint64_t v48 = "AudioConverter.cpp";
    __int16 v49 = 1024;
    int v50 = 709;
    __int16 v51 = 2080;
    float64x2_t v52 = v34;
    uint64_t v33 = "%25s:%-5d Decoding from the format %s is exempted from being forced out of process. ";
    goto LABEL_56;
  }
  if (!CFEqual(ValueAtIndex, v39))
  {
    CFArrayRef theArray = CFStringCreateArrayBySeparatingStrings(v12, ValueAtIndex, @"+");
    CFIndex v22 = CFArrayGetCount(theArray);
    if (v22 > 1)
    {
      uint64_t v23 = CFArrayGetValueAtIndex(theArray, 0);
      if (CFEqual(v23, v39))
      {
        CFIndex v24 = 1;
        while (1)
        {
          uint64_t v25 = CFArrayGetValueAtIndex(theArray, v24);
          CFTypeID v26 = CFGetTypeID(v25);
          if (v26 == CFStringGetTypeID())
          {
            if (CFEqual(v25, v40)) {
              break;
            }
          }
          CFTypeID v27 = CFGetTypeID(v25);
          if (v27 == CFNumberGetTypeID())
          {
            if (CFEqual(v25, &cf2)) {
              break;
            }
          }
          if (v22 == ++v24) {
            goto LABEL_38;
          }
        }
        AudioConverterLog();
        long long v28 = AudioConverterLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v29 = v43;
          if (v44 < 0) {
            unsigned int v29 = (void **)v43[0];
          }
          int v30 = __p;
          if (v42 < 0) {
            int v30 = (void **)__p[0];
          }
          *(_DWORD *)buf = 136315906;
          uint64_t v48 = "AudioConverter.cpp";
          __int16 v49 = 1024;
          int v50 = 737;
          __int16 v51 = 2080;
          float64x2_t v52 = v29;
          __int16 v53 = 2080;
          float64x2_t v54 = v30;
          _os_log_impl(&dword_18FEC0000, v28, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Decoding from the format %s for the process %s is exempted from being forced out of process. ", buf, 0x26u);
        }
        char v18 = 1;
      }
    }
LABEL_38:
    CFRelease(theArray);
    goto LABEL_39;
  }
  AudioConverterLog();
  uint64_t v31 = AudioConverterLog(void)::gLog;
  if (!os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_57;
  }
  char v35 = __p;
  if (v42 < 0) {
    char v35 = (void **)__p[0];
  }
  *(_DWORD *)buf = 136315650;
  uint64_t v48 = "AudioConverter.cpp";
  __int16 v49 = 1024;
  int v50 = 717;
  __int16 v51 = 2080;
  float64x2_t v52 = v35;
  uint64_t v33 = "%25s:%-5d Decoders for the process %s is exempted from being forced out of process. mode";
LABEL_56:
  _os_log_impl(&dword_18FEC0000, v31, OS_LOG_TYPE_DEFAULT, v33, buf, 0x1Cu);
LABEL_57:
  char v18 = 1;
LABEL_58:
  applesauce::raii::v1::detail::ScopeGuard<checkForDecoderExemption::{lambda(void)#1},applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard(v38);
  if (v42 < 0) {
    operator delete(__p[0]);
  }
  if (v44 < 0) {
    operator delete(v43[0]);
  }
  uint64_t v4 = v18 & 1;
LABEL_63:
  CFRelease(v6);
LABEL_64:
  if (cf1) {
    CFRelease(cf1);
  }
  return v4;
}

void sub_190056024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, CFTypeRef *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,const void *a29)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  applesauce::CF::StringRef::~StringRef(&a29);
  _Unwind_Resume(a1);
}

CFTypeRef **applesauce::raii::v1::detail::ScopeGuard<checkForDecoderExemption(unsigned int)::{lambda(void)#2},applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard(CFTypeRef **a1)
{
  return a1;
}

CFTypeRef **applesauce::raii::v1::detail::ScopeGuard<checkForDecoderExemption(unsigned int)::{lambda(void)#1},applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard(CFTypeRef **a1)
{
  return a1;
}

OSStatus AudioConverterNewSpecific(const AudioStreamBasicDescription *inSourceFormat, const AudioStreamBasicDescription *inDestinationFormat, UInt32 inNumberClassDescriptions, const AudioClassDescription *inClassDescriptions, AudioConverterRef *outAudioConverter)
{
  uint64_t v7 = *(void *)&inNumberClassDescriptions;
  int v10 = forcedOutOfProcess((AudioStreamBasicDescription *)inSourceFormat, inDestinationFormat);
  v21[0] = 0;
  int AppBooleanValue = CACFPreferencesGetAppBooleanValue(@"converterkTracesPermitted", @"com.apple.coreaudio", v21);
  if (!v21[0] || AppBooleanValue == 0)
  {
    uint64_t v13 = 0;
  }
  else
  {
    if (v10) {
      uint64_t v14 = 2758;
    }
    else {
      uint64_t v14 = 2742;
    }
    kdebug_trace();
    uint64_t v13 = v14 | 0x100000000;
  }
  v26[0] = 0;
  int v15 = CACFPreferencesGetAppBooleanValue(@"converterkTracesPermitted", @"com.apple.coreaudio", v26);
  BOOL v16 = 0;
  if (v26[0] && v15)
  {
    if (v10) {
      int v17 = 2752;
    }
    else {
      int v17 = 2736;
    }
    int v27 = v17;
    long long v28 = 0u;
    long long v29 = 0u;
    kdebug_trace();
    int v22 = v17;
    long long v23 = 0u;
    long long v24 = 0u;
    v26[0] = 0;
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)v26);
    BOOL v16 = 1;
  }
  v21[0] = v16;
  BOOL v25 = v16;
  if (v10) {
    char v18 = newAudioConverterOOP;
  }
  else {
    char v18 = (uint64_t (*)(const AudioStreamBasicDescription *, const AudioStreamBasicDescription *, unsigned int, const AudioClassDescription *))newAudioConverter;
  }
  OSStatus v19 = AudioConverterNewInternal(inSourceFormat, inDestinationFormat, v7, inClassDescriptions, outAudioConverter, v18, 0, v13);
  if (v25) {
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)v21);
  }
  return v19;
}

void sub_1900562DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a15) {
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)&a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AudioConverterInstantiateInternal(AudioStreamBasicDescription *a1, AudioStreamBasicDescription *a2, int a3, uint64_t a4, const AudioClassDescription *a5, OpaqueAudioConverter **a6)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (a4) {
    CFAllocatorRef v12 = "specific ";
  }
  else {
    CFAllocatorRef v12 = "";
  }
  AudioConverterLog();
  uint64_t v13 = AudioConverterLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315906;
    *(void *)CFTypeRef v40 = "AudioConverter.cpp";
    *(_WORD *)&v40[8] = 1024;
    *(_DWORD *)&v40[10] = 1095;
    *(_WORD *)&v40[14] = 2080;
    *(void *)&v40[16] = v12;
    *(_WORD *)&v40[24] = 1024;
    *(_DWORD *)&v40[26] = a3;
    _os_log_impl(&dword_18FEC0000, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Requested Instantiation mode for %sAudio Converter: %u", buf, 0x22u);
  }
  unint64_t ForcedInstantiationMode = getForcedInstantiationMode(a1);
  if (HIDWORD(ForcedInstantiationMode)) {
    int v15 = ForcedInstantiationMode;
  }
  else {
    int v15 = a3;
  }
  uint64_t v16 = v15 | a3 & 0xBFFFFFFE;
  if (v15)
  {
    AudioConverterLog();
    int v22 = AudioConverterLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)CFTypeRef v40 = "AudioConverter.cpp";
      *(_WORD *)&v40[8] = 1024;
      *(_DWORD *)&v40[10] = 1104;
      *(_WORD *)&v40[14] = 2080;
      *(void *)&v40[16] = v12;
      _os_log_impl(&dword_18FEC0000, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Instantiating %sAudio Converter out of process", buf, 0x1Cu);
    }
    buf[0] = 0;
    int AppBooleanValue = CACFPreferencesGetAppBooleanValue(@"converterkTracesPermitted", @"com.apple.coreaudio", (BOOL *)buf);
    if (buf[0]) {
      int v24 = AppBooleanValue;
    }
    else {
      int v24 = 0;
    }
    if (v24 == 1)
    {
      kdebug_trace();
      uint64_t v25 = 0x100000AC6;
    }
    else
    {
      uint64_t v25 = 0;
    }
    v35[0] = 0;
    int v27 = CACFPreferencesGetAppBooleanValue(@"converterkTracesPermitted", @"com.apple.coreaudio", v35);
    if (v35[0]) {
      int v28 = v27;
    }
    else {
      int v28 = 0;
    }
    if (v28 == 1)
    {
      int v36 = 2752;
      long long v37 = 0u;
      long long v38 = 0u;
      kdebug_trace();
      *(_DWORD *)CFTypeRef v40 = 2752;
      memset(&v40[4], 0, 32);
      v35[0] = 0;
      AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)v35);
      uint8_t v29 = 1;
    }
    else
    {
      uint8_t v29 = 0;
    }
    buf[0] = v29;
    uint8_t v41 = v29;
    uint64_t v30 = AudioConverterNewInternal((long long *)a1, (long long *)a2, a4, (uint64_t)a5, a6, (void (*)(const AudioStreamBasicDescription *, const AudioStreamBasicDescription *, unsigned int, const AudioClassDescription *))newAudioConverterOOP, v16, v25);
    goto LABEL_44;
  }
  AudioConverterLog();
  int v17 = AudioConverterLog(void)::gLog;
  BOOL v18 = os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_DEFAULT);
  if ((v15 & 0x40000000) == 0)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136315650;
      *(void *)CFTypeRef v40 = "AudioConverter.cpp";
      *(_WORD *)&v40[8] = 1024;
      *(_DWORD *)&v40[10] = 1124;
      *(_WORD *)&v40[14] = 2080;
      *(void *)&v40[16] = v12;
      _os_log_impl(&dword_18FEC0000, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Instantiating %sAudio Converter in process", buf, 0x1Cu);
    }
    buf[0] = 0;
    int v19 = CACFPreferencesGetAppBooleanValue(@"converterkTracesPermitted", @"com.apple.coreaudio", (BOOL *)buf);
    if (buf[0]) {
      int v20 = v19;
    }
    else {
      int v20 = 0;
    }
    if (v20 == 1)
    {
      kdebug_trace();
      uint64_t v21 = 0x100000AB6;
    }
    else
    {
      uint64_t v21 = 0;
    }
    v35[0] = 0;
    int v31 = CACFPreferencesGetAppBooleanValue(@"converterkTracesPermitted", @"com.apple.coreaudio", v35);
    if (v35[0]) {
      int v32 = v31;
    }
    else {
      int v32 = 0;
    }
    if (v32 == 1)
    {
      int v36 = 2736;
      long long v37 = 0u;
      long long v38 = 0u;
      kdebug_trace();
      *(_DWORD *)CFTypeRef v40 = 2736;
      memset(&v40[4], 0, 32);
      v35[0] = 0;
      AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)v35);
      uint8_t v33 = 1;
    }
    else
    {
      uint8_t v33 = 0;
    }
    buf[0] = v33;
    uint8_t v41 = v33;
    uint64_t v30 = AudioConverterNewInternal((long long *)a1, (long long *)a2, a4, (uint64_t)a5, a6, newAudioConverter, v16, v21);
LABEL_44:
    uint64_t v26 = v30;
    if (v41) {
      AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)buf);
    }
    return v26;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136315650;
    *(void *)CFTypeRef v40 = "AudioConverter.cpp";
    *(_WORD *)&v40[8] = 1024;
    *(_DWORD *)&v40[10] = 1116;
    *(_WORD *)&v40[14] = 2080;
    *(void *)&v40[16] = v12;
    _os_log_impl(&dword_18FEC0000, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Instantiating %sAudio Converter in process XPC", buf, 0x1Cu);
  }
  return AudioConverterNewInternal((long long *)a1, (long long *)a2, a4, (uint64_t)a5, a6, newAudioConverterInProcessXPC, v16, 0);
}

void sub_19005681C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a20) {
    AT::ScopedTrace::~ScopedTrace((AT::ScopedTrace *)&a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AudioConverterInstantiate(AudioStreamBasicDescription *a1, AudioStreamBasicDescription *a2, int a3, OpaqueAudioConverter **a4)
{
  return AudioConverterInstantiateInternal(a1, a2, a3, 0, 0, a4);
}

uint64_t caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<SetConverterAsAuxiliary(OpaqueAudioConverter *)::$_0>(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 12) = 1;
  return 0;
}

OSStatus AudioConverterGetPropertyInfo(AudioConverterRef inAudioConverter, AudioConverterPropertyID inPropertyID, UInt32 *outSize, Boolean *outWritable)
{
  AudioConverterPropertyID v9 = inPropertyID;
  uint64_t v7 = outWritable;
  int16x8_t v8 = outSize;
  v5[0] = &v9;
  v5[1] = &v8;
  v5[2] = &v7;
  v6[0] = (uint64_t (*)(uint64_t, uint64_t))caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterGetPropertyInfo::$_0>;
  v6[1] = (uint64_t (*)(uint64_t, uint64_t))v5;
  return with_resolved((int)inAudioConverter, v6);
}

uint64_t caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterGetPropertyInfo::$_0>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (***(_DWORD ***)a1 == 1869574207)
  {
    (*(void (**)(uint64_t *, void, void))(v2 + 96))(a2, **(void **)(*(void *)a1 + 8), **(void **)(*(void *)a1 + 16));
    return 0;
  }
  else
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t *))(v2 + 40);
    return v4(a2);
  }
}

uint64_t AudioConverterFillComplexBufferWithPacketDependencyInfo(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = a3;
  uint64_t v15 = a2;
  uint64_t v12 = a5;
  uint64_t v13 = a4;
  uint64_t v10 = a7;
  uint64_t v11 = a6;
  if (!a7) {
    return 4294967246;
  }
  v8[0] = &v15;
  v8[1] = &v14;
  v8[2] = &v13;
  void v8[3] = &v12;
  v8[4] = &v11;
  v8[5] = &v10;
  v9[0] = (uint64_t (*)(uint64_t, uint64_t))caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterFillComplexBufferWithPacketDependencyInfo::$_0>;
  v9[1] = (uint64_t (*)(uint64_t, uint64_t))v8;
  return with_resolved(a1, v9);
}

uint64_t caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterFillComplexBufferWithPacketDependencyInfo::$_0>(void ***a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t, void, void, void, void, void, void))(*(void *)a2 + 80))(a2, ***a1, *(*a1)[1], *(*a1)[2], *(*a1)[3], *(*a1)[4], *(*a1)[5]);
  if (isRenderStatusConcerning(v3))
  {
    uint64_t v4 = (*(unsigned int (**)(uint64_t))(*(void *)a2 + 104))(a2) ? 15 : 11;
    uint64_t v5 = _os_log_pack_size() + 88;
    uint64_t message = caulk::deferred_logger::create_message((caulk::deferred_logger *)gAudioConverterDeferredLog, v5 + v4, 16);
    if (message)
    {
      uint64_t v7 = (caulk::concurrent::message *)message;
      int16x8_t v8 = (char *)(message + v5);
      uint64_t v9 = _os_log_pack_fill();
      if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 104))(a2)) {
        uint64_t v10 = "out-of-process";
      }
      else {
        uint64_t v10 = "in-process";
      }
      stpcpy(v8, v10);
      *(_DWORD *)uint64_t v9 = 134218498;
      *(void *)(v9 + 4) = a2;
      *(_WORD *)(v9 + 12) = 2080;
      *(void *)(v9 + 14) = v8;
      *(_WORD *)(v9 + 22) = 1024;
      *(_DWORD *)(v9 + 24) = v3;
      caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(gAudioConverterDeferredLog + 16), v7);
    }
  }
  return v3;
}

uint64_t AudioConverterReleaseHardwareCodec()
{
  return 0;
}

uint64_t AudioConverterAcquireHardwareCodec()
{
  return 0;
}

uint64_t MP4GetRollGroupDescription(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, __n128 a6)
{
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6 == a2) {
    return 0;
  }
  int v10 = 0;
  uint64_t v11 = &v89;
  float64x2_t v84 = (void *)(a5 + 8);
  a6.n128_u64[0] = 136315394;
  int v12 = 1;
  do
  {
    int v13 = 0;
    int v14 = v10;
    int v10 = v12;
    while (*(_DWORD *)(v6 + 16) != 1936158820)
    {
LABEL_7:
      uint64_t v6 = *(void *)(v6 + 8);
      if (v6 == a2) {
        return 0;
      }
    }
    if (v13 != v14)
    {
      ++v13;
      goto LABEL_7;
    }
    __n128 v83 = a6;
    int v85 = a4;
    uint64_t v82 = a3;
    uint64_t v15 = *(void *)(v6 + 32) + a3;
    float32x2_t v88 = (void (**)(MP4BoxParser_SampleGroupDescription *__hidden))&unk_1EDF8DA18;
    float v80 = v11;
    uint64_t v81 = a1;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 88))(a1, v15);
    char v90 = 0;
    int v91 = 0;
    unint64_t v92 = 0;
    char v93 = 0;
    int v94 = 8;
    float32x2_t v88 = off_1EDF94B30;
    int v98 = 0;
    unsigned int v99 = 0;
    unint64_t v100 = 0;
    *(_WORD *)unsigned int v101 = 0;
    memset(&v101[4], 0, 28);
    uint64_t v96 = 0;
    char v97 = 0;
    uint64_t v16 = MP4BoxParser_SampleGroupDescription::Init((MP4BoxParser **)&v88);
    if (v16)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = v83.n128_u32[0];
        __int32 v103 = "MP4_BoxParser_RollGroupUtility.cpp";
        __int16 v104 = 1024;
        int v105 = 35;
        int v78 = MEMORY[0x1E4F14500];
        int v79 = "%25s:%-5d  MP4GetRollGroupDescription: Failed to read GroupDescription box";
        goto LABEL_107;
      }
LABEL_108:
      MP4BoxParser_SampleGroupDescription::~MP4BoxParser_SampleGroupDescription((MP4BoxParser_SampleGroupDescription *)&v88);
      return v16;
    }
    if (v96 != a4) {
      goto LABEL_101;
    }
    unsigned int v17 = ((uint64_t (*)(void))v88[3])(&v88);
    if (!v95 || v101[0]) {
      goto LABEL_56;
    }
    unsigned int v18 = v17;
    v101[1] = v97;
    int v19 = v98;
    if (!v97) {
      int v19 = 0;
    }
    *(_DWORD *)&v101[4] = v19;
    unint64_t v20 = v100;
    uint64_t v21 = *(void *)&v101[8];
    if (v99 > (unint64_t)((uint64_t)(*(void *)&v101[24] - *(void *)&v101[8]) >> 1))
    {
      uint64_t v22 = *(void *)&v101[16];
      int v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v99);
      uint64_t v25 = *(char **)&v101[8];
      uint64_t v26 = *(char **)&v101[16];
      int v27 = &v24[(v22 - v21) & 0xFFFFFFFFFFFFFFFELL];
      if (*(void *)&v101[16] != *(void *)&v101[8])
      {
        int v27 = &v24[(v22 - v21) & 0xFFFFFFFFFFFFFFFELL];
        do
        {
          __int16 v28 = *((_WORD *)v26 - 1);
          v26 -= 2;
          *((_WORD *)v27 - 1) = v28;
          v27 -= 2;
        }
        while (v26 != v25);
      }
      *(void *)&v101[8] = v27;
      *(void *)&v101[16] = &v24[(v22 - v21) & 0xFFFFFFFFFFFFFFFELL];
      *(void *)&v101[24] = &v24[2 * v23];
      if (v25) {
        operator delete(v25);
      }
    }
    if (!v99)
    {
LABEL_56:
      v101[0] = 1;
      *(void *)a5 = *(void *)v101;
      if (v101 == (unsigned char *)a5)
      {
        uint64_t v16 = 0;
        goto LABEL_98;
      }
      int v50 = *(char **)&v101[8];
      __int16 v49 = *(char **)&v101[16];
      size_t v51 = *(void *)&v101[16] - *(void *)&v101[8];
      unint64_t v52 = (uint64_t)(*(void *)&v101[16] - *(void *)&v101[8]) >> 1;
      unint64_t v53 = *(void *)(a5 + 24);
      float64x2_t v54 = *(char **)(a5 + 8);
      if (v52 > (uint64_t)(v53 - (void)v54) >> 1)
      {
        if (v54)
        {
          *(void *)(a5 + 16) = v54;
          operator delete(v54);
          unint64_t v53 = 0;
          void *v84 = 0;
          v84[1] = 0;
          v84[2] = 0;
        }
        if ((v51 & 0x8000000000000000) != 0
          || (v53 <= v52 ? (unint64_t v55 = v52) : (unint64_t v55 = v53),
              v53 >= 0x7FFFFFFFFFFFFFFELL ? (uint64_t v56 = 0x7FFFFFFFFFFFFFFFLL) : (uint64_t v56 = v55),
              v56 < 0))
        {
LABEL_111:
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        unsigned int v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v56);
        float64x2_t v54 = v57;
        *(void *)(a5 + 8) = v57;
        *(void *)(a5 + 16) = v57;
        *(void *)(a5 + 24) = &v57[2 * v58];
        if (v49 != v50) {
          memmove(v57, v50, v51);
        }
        a4 = v85;
        goto LABEL_80;
      }
      uint64_t v59 = *(unsigned char **)(a5 + 16);
      size_t v60 = v59 - v54;
      unint64_t v61 = (v59 - v54) >> 1;
      if (v61 >= v52)
      {
        a4 = v85;
        if (*(void *)&v101[16] == *(void *)&v101[8])
        {
LABEL_80:
          uint64_t v16 = 0;
          *(void *)(a5 + 16) = &v54[v51];
          goto LABEL_99;
        }
        int v64 = *(void **)(a5 + 8);
        BOOL v63 = *(char **)&v101[8];
      }
      else
      {
        a4 = v85;
        if (v59 != v54)
        {
          uint64_t v62 = (v59 - v54) >> 1;
          memmove(*(void **)(a5 + 8), *(const void **)&v101[8], v60);
          unint64_t v61 = v62;
          float64x2_t v54 = *(char **)(a5 + 16);
        }
        BOOL v63 = &v50[2 * v61];
        size_t v51 = v49 - v63;
        if (v49 == v63) {
          goto LABEL_80;
        }
        int v64 = v54;
      }
      memmove(v64, v63, v51);
      goto LABEL_80;
    }
    int v29 = 0;
    uint64_t v30 = v20 + v18;
    while (1)
    {
      unsigned int v31 = HIDWORD(v96);
      unsigned __int16 v87 = 0;
      if (HIDWORD(v96)) {
        goto LABEL_29;
      }
      unsigned int v86 = 0;
      unint64_t v32 = v92;
      unsigned int v33 = ((uint64_t (*)(void))v88[3])(&v88);
      v20 += 4;
      unint64_t v34 = v92;
      if (v32 <= v33) {
        unint64_t v34 = 0;
      }
      if (v34 < v20) {
        break;
      }
      uint64_t v16 = MP4BoxParser::ReadDataSourceBytes(v89, v30, 4uLL, &v86);
      if (v16)
      {
        uint64_t v73 = MEMORY[0x1E4F14500];
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_98;
        }
        *(_DWORD *)buf = v83.n128_u32[0];
        __int32 v103 = "MP4_BoxParser_SampleGroupDescription.cpp";
        __int16 v104 = 1024;
        int v105 = 80;
        uint64_t v70 = v73;
        unint64_t v71 = "%25s:%-5d  Couldn't read sample group description entry size";
        goto LABEL_91;
      }
      v30 += 4;
      unsigned int v31 = bswap32(v86);
LABEL_29:
      unint64_t v35 = v92;
      unsigned int v36 = ((uint64_t (*)(void))v88[3])(&v88);
      v20 += v31;
      unint64_t v37 = v92;
      if (v35 <= v36) {
        unint64_t v37 = 0;
      }
      if (v37 < v20)
      {
        float64_t v65 = MEMORY[0x1E4F14500];
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = v83.n128_u32[0];
          __int32 v103 = "MP4_BoxParser_SampleGroupDescription.cpp";
          __int16 v104 = 1024;
          int v105 = 87;
          uint64_t v66 = v65;
          unint64_t v67 = "%25s:%-5d  'sgpd' box is too small for the group description entry";
          goto LABEL_96;
        }
        goto LABEL_97;
      }
      if (v31 != 2)
      {
        float64x2_t v68 = MEMORY[0x1E4F14500];
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = v83.n128_u32[0];
          __int32 v103 = "MP4_BoxParser_SampleGroupDescription.cpp";
          __int16 v104 = 1024;
          int v105 = 89;
          uint64_t v66 = v68;
          unint64_t v67 = "%25s:%-5d  Unexpected entry size in 'sgpd' box";
          goto LABEL_96;
        }
        goto LABEL_97;
      }
      uint64_t v16 = MP4BoxParser::ReadDataSourceBytes(v89, v30, 2uLL, &v87);
      if (v16)
      {
        float64x2_t v69 = MEMORY[0x1E4F14500];
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_98;
        }
        *(_DWORD *)buf = v83.n128_u32[0];
        __int32 v103 = "MP4_BoxParser_SampleGroupDescription.cpp";
        __int16 v104 = 1024;
        int v105 = 92;
        uint64_t v70 = v69;
        unint64_t v71 = "%25s:%-5d  Couldn't read sample group description entry";
LABEL_91:
        _os_log_impl(&dword_18FEC0000, v70, OS_LOG_TYPE_ERROR, v71, buf, 0x12u);
        goto LABEL_98;
      }
      int v38 = (int)bswap32(v87) >> 16;
      if (v96 == 1886547820)
      {
        if (v38 <= 0)
        {
          uint64_t v76 = MEMORY[0x1E4F14500];
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_97;
          }
          *(_DWORD *)buf = v83.n128_u32[0];
          __int32 v103 = "MP4_BoxParser_SampleGroupDescription.cpp";
          __int16 v104 = 1024;
          int v105 = 101;
          uint64_t v66 = v76;
          unint64_t v67 = "%25s:%-5d  Unexpected entry for preroll group";
          goto LABEL_96;
        }
      }
      else if (v96 == 1919904876 && (v38 & 0x80000000) == 0)
      {
        uint64_t v74 = MEMORY[0x1E4F14500];
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_97;
        }
        *(_DWORD *)buf = v83.n128_u32[0];
        __int32 v103 = "MP4_BoxParser_SampleGroupDescription.cpp";
        __int16 v104 = 1024;
        int v105 = 98;
        uint64_t v66 = v74;
        unint64_t v67 = "%25s:%-5d  Unexpected entry for roll recovery group";
LABEL_96:
        _os_log_impl(&dword_18FEC0000, v66, OS_LOG_TYPE_ERROR, v67, buf, 0x12u);
        goto LABEL_97;
      }
      CFTypeRef v39 = *(char **)&v101[16];
      if (*(void *)&v101[16] >= *(void *)&v101[24])
      {
        uint8_t v41 = *(char **)&v101[8];
        uint64_t v42 = *(void *)&v101[16] - *(void *)&v101[8];
        if ((uint64_t)(*(void *)&v101[16] - *(void *)&v101[8]) < -2) {
          goto LABEL_111;
        }
        uint64_t v43 = v42 >> 1;
        if (*(void *)&v101[24] - *(void *)&v101[8] <= (unint64_t)((v42 >> 1) + 1)) {
          uint64_t v44 = v43 + 1;
        }
        else {
          uint64_t v44 = *(void *)&v101[24] - *(void *)&v101[8];
        }
        uint64_t v45 = 0x7FFFFFFFFFFFFFFFLL;
        if (*(void *)&v101[24] - *(void *)&v101[8] < 0x7FFFFFFFFFFFFFFEuLL) {
          uint64_t v45 = v44;
        }
        if (v45)
        {
          uint64_t v45 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v45);
          uint8_t v41 = *(char **)&v101[8];
          CFTypeRef v39 = *(char **)&v101[16];
        }
        else
        {
          uint64_t v46 = 0;
        }
        vDSP_Length v47 = (_WORD *)(v45 + 2 * v43);
        *vDSP_Length v47 = v38;
        CFTypeRef v40 = v47 + 1;
        while (v39 != v41)
        {
          __int16 v48 = *((_WORD *)v39 - 1);
          v39 -= 2;
          *--vDSP_Length v47 = v48;
        }
        *(void *)&v101[8] = v47;
        *(void *)&v101[16] = v40;
        *(void *)&v101[24] = v45 + 2 * v46;
        if (v41) {
          operator delete(v41);
        }
      }
      else
      {
        **(_WORD **)&v101[16] = v38;
        CFTypeRef v40 = v39 + 2;
      }
      *(void *)&v101[16] = v40;
      v30 += 2;
      if (++v29 >= v99) {
        goto LABEL_56;
      }
    }
    unint64_t v72 = MEMORY[0x1E4F14500];
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = v83.n128_u32[0];
      __int32 v103 = "MP4_BoxParser_SampleGroupDescription.cpp";
      __int16 v104 = 1024;
      int v105 = 77;
      uint64_t v66 = v72;
      unint64_t v67 = "%25s:%-5d  'sgpd' box is too small for the group description entry size";
      goto LABEL_96;
    }
LABEL_97:
    uint64_t v16 = 0;
    char v95 = 0;
LABEL_98:
    a4 = v85;
    if (v16)
    {
LABEL_100:
      *(void *)(a5 + 16) = *(void *)(a5 + 8);
      if (!v16) {
        goto LABEL_101;
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = v83.n128_u32[0];
        __int32 v103 = "MP4_BoxParser_RollGroupUtility.cpp";
        __int16 v104 = 1024;
        int v105 = 40;
        int v78 = MEMORY[0x1E4F14500];
        int v79 = "%25s:%-5d  MP4GetRollGroupDescription: Failed to parse GroupDescription";
LABEL_107:
        _os_log_impl(&dword_18FEC0000, v78, OS_LOG_TYPE_ERROR, v79, buf, 0x12u);
      }
      goto LABEL_108;
    }
LABEL_99:
    if (!v95) {
      goto LABEL_100;
    }
LABEL_101:
    MP4BoxParser_SampleGroupDescription::~MP4BoxParser_SampleGroupDescription((MP4BoxParser_SampleGroupDescription *)&v88);
    uint64_t v16 = 0;
    int v12 = v10 + 1;
    uint64_t v6 = *(void *)(a2 + 8);
    a1 = v81;
    a3 = v82;
    a6 = v83;
    uint64_t v11 = v80;
  }
  while (v6 != a2);
  return v16;
}

void sub_190057514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  MP4BoxParser_SampleGroupDescription::~MP4BoxParser_SampleGroupDescription((MP4BoxParser_SampleGroupDescription *)va);
  _Unwind_Resume(a1);
}

void MP4GetRollGroup(DataSource *a1, uint64_t a2, uint64_t a3, int a4, uint8_t *a5, unsigned int a6, uint64_t a7)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)a7 = 0;
  *(void *)(a7 + 40) = *(void *)(a7 + 32);
  uint64_t v8 = *(void *)(a2 + 8);
  if (v8 == a2) {
    goto LABEL_22;
  }
  int v13 = 0;
  int v14 = 1;
  do
  {
    int v15 = 0;
    int v16 = v13;
    int v13 = v14;
    while (1)
    {
      int v17 = *(_DWORD *)(v8 + 16);
      if (v17 != 1935828848 && v17 != 1668507504) {
        goto LABEL_11;
      }
      if (v15 == v16) {
        break;
      }
      ++v15;
LABEL_11:
      uint64_t v8 = *(void *)(v8 + 8);
      if (v8 == a2) {
        goto LABEL_22;
      }
    }
    if (v17 == 1668507504)
    {
      MP4BoxParser_SampleToGroup::MP4BoxParser_SampleToGroup((MP4BoxParser_SampleToGroup *)buf, a1, *(void *)(v8 + 32) + a3);
      *(void *)buf = off_1EDF94890;
      char v26 = 0;
      memset(v27, 0, sizeof(v27));
      BOOL RollGroupWithSampleToGroupBox = MP4GetRollGroupWithSampleToGroupBox((uint64_t)a1, a2, a3, a4, (uint64_t)buf, a5, a6, a7);
      MP4BoxParser_SampleToGroupCompact::~MP4BoxParser_SampleToGroupCompact((MP4BoxParser_SampleToGroupCompact *)buf);
      if (RollGroupWithSampleToGroupBox) {
        break;
      }
      goto LABEL_18;
    }
    if (v17 != 1935828848)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "MP4_BoxParser_RollGroupUtility.cpp";
        __int16 v24 = 1024;
        int v25 = 75;
        _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  MP4GetRollSampleGroup: Unknown SampleToGroup box type", buf, 0x12u);
      }
      break;
    }
    MP4BoxParser_SampleToGroup::MP4BoxParser_SampleToGroup((MP4BoxParser_SampleToGroup *)buf, a1, *(void *)(v8 + 32) + a3);
    *(void *)buf = off_1EDF94B60;
    LODWORD(v27[0]) = 0;
    *(_OWORD *)((char *)v27 + 8) = 0u;
    *(_OWORD *)((char *)&v27[1] + 8) = 0u;
    BOOL v19 = MP4GetRollGroupWithSampleToGroupBox((uint64_t)a1, a2, a3, a4, (uint64_t)buf, a5, a6, a7);
    MP4BoxParser_SampleToGroupRunLength::~MP4BoxParser_SampleToGroupRunLength((MP4BoxParser_SampleToGroupRunLength *)buf);
    if (v19) {
      break;
    }
LABEL_18:
    int v14 = v13 + 1;
    uint64_t v8 = *(void *)(a2 + 8);
  }
  while (v8 != a2);
LABEL_22:
  if (!*(unsigned char *)a7) {
    *(void *)(a7 + 40) = *(void *)(a7 + 32);
  }
}

void sub_1900577B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  MP4BoxParser_SampleToGroupCompact::~MP4BoxParser_SampleToGroupCompact((MP4BoxParser_SampleToGroupCompact *)va);
  _Unwind_Resume(a1);
}

BOOL MP4GetRollGroupWithSampleToGroupBox(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint8_t *a6, unsigned int a7, uint64_t a8)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  if ((*(unsigned int (**)(uint64_t))(*(void *)a5 + 16))(a5))
  {
    BOOL result = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_DWORD *)buf = 136315394;
    __p[0] = "MP4_BoxParser_RollGroupUtility.cpp";
    LOWORD(__p[1]) = 1024;
    *(_DWORD *)((char *)&__p[1] + 2) = 97;
    _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  MP4GetRollSampleGroup: Failed to parse SampleToGroup box", buf, 0x12u);
    return 0;
  }
  if (*(_DWORD *)(a5 + 64) != a4 || *(unsigned char *)(a5 + 68) != 0) {
    return 0;
  }
  if (*(unsigned char *)(a5 + 60))
  {
    int v38 = 0;
    CFTypeRef v39 = 0;
    uint64_t v40 = 0;
    if ((*(unsigned int (**)(uint64_t, void **))(*(void *)a5 + 32))(a5, &v38))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        __p[0] = "MP4_BoxParser_RollGroupUtility.cpp";
        LOWORD(__p[1]) = 1024;
        *(_DWORD *)((char *)&__p[1] + 2) = 109;
        _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  MP4GetRollSampleGroup: Failed to load SampleToGroup table", buf, 0x12u);
      }
LABEL_59:
      if (v38)
      {
        CFTypeRef v39 = (unsigned int *)v38;
        operator delete(v38);
      }
      return 1;
    }
    *(_WORD *)buf = 0;
    memset(__p, 0, sizeof(__p));
    int v48 = 0;
    if (*(unsigned char *)(a5 + 77) && MP4GetRollGroupDescription(a1, a2, a3, a4, (uint64_t)buf, v18))
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_57;
      }
      *(_DWORD *)uint64_t v45 = 136315394;
      *(void *)&v45[4] = "MP4_BoxParser_RollGroupUtility.cpp";
      *(_WORD *)&v45[12] = 1024;
      *(_DWORD *)&v45[14] = 116;
      BOOL v19 = MEMORY[0x1E4F14500];
      unint64_t v20 = "%25s:%-5d  MP4GetRollSampleGroup: Failed to load local RollGroupDescription";
LABEL_21:
      uint64_t v21 = v45;
LABEL_22:
      _os_log_impl(&dword_18FEC0000, v19, OS_LOG_TYPE_ERROR, v20, v21, 0x12u);
      goto LABEL_57;
    }
    if (*(unsigned char *)(a5 + 76) && !*a6)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_57;
      }
      *(_DWORD *)uint64_t v45 = 136315394;
      *(void *)&v45[4] = "MP4_BoxParser_RollGroupUtility.cpp";
      *(_WORD *)&v45[12] = 1024;
      *(_DWORD *)&v45[14] = 120;
      BOOL v19 = MEMORY[0x1E4F14500];
      unint64_t v20 = "%25s:%-5d  MP4GetRollSampleGroup: Lacks necessary global roll group description";
      goto LABEL_21;
    }
    memset(v45, 0, 24);
    uint64_t v22 = (unsigned int *)v38;
    uint64_t v23 = v39;
    if (v38 != v39)
    {
      uint64_t v24 = 0;
      while (1)
      {
        unsigned int v25 = v22[1];
        unint64_t v26 = (unsigned __int16)v25;
        if ((_WORD)v25)
        {
          if ((v25 & 0x10000) != 0) {
            int v27 = buf;
          }
          else {
            int v27 = a6;
          }
          if (!*v27) {
            goto LABEL_57;
          }
          BOOL v28 = (v25 & 0x10000) == 0;
          if ((v25 & 0x10000) != 0) {
            int v29 = (uint64_t *)((char *)&__p[1] + 4);
          }
          else {
            int v29 = (uint64_t *)(a6 + 16);
          }
          uint64_t v30 = *v29;
          unsigned int v31 = (uint64_t *)(a6 + 8);
          if (!v28) {
            unsigned int v31 = (uint64_t *)((char *)__p + 4);
          }
          uint64_t v32 = *v31;
          if (v26 > (v30 - v32) >> 1) {
            goto LABEL_57;
          }
          *(void *)&v45[8] = *v22;
          *(_WORD *)&v45[16] = *(_WORD *)(v32 + 2 * (v26 - 1));
          SampleToRollDistanceTable::append_entry(a8, (long long *)v45);
        }
        unsigned int v33 = *v22;
        v22 += 2;
        v24 += v33;
        *(void *)uint64_t v45 = v24;
        if (v22 == v23) {
          goto LABEL_40;
        }
      }
    }
    uint64_t v24 = 0;
LABEL_40:
    BOOL v34 = __OFSUB__(a7, v24);
    uint64_t v35 = a7 - v24;
    if ((v35 < 0) ^ v34 | (v35 == 0)) {
      goto LABEL_57;
    }
    if (buf[0]) {
      goto LABEL_42;
    }
    if (MP4GetRollGroupDescription(a1, a2, a3, a4, (uint64_t)buf, v18))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        int v41 = 136315394;
        uint64_t v42 = "MP4_BoxParser_RollGroupUtility.cpp";
        __int16 v43 = 1024;
        int v44 = 169;
        BOOL v19 = MEMORY[0x1E4F14500];
        unint64_t v20 = "%25s:%-5d  MP4GetRollSampleGroup: Failed to load local RollGroupDescription when looking for default description";
        uint64_t v21 = (uint8_t *)&v41;
        goto LABEL_22;
      }
      goto LABEL_57;
    }
    if (buf[0])
    {
LABEL_42:
      if (buf[1])
      {
        unsigned int v36 = LOWORD(__p[0]);
        if (((uint64_t)__p[0] & 0x10000) != 0) {
          a6 = buf;
        }
        goto LABEL_53;
      }
    }
    if (*a6 && a6[1])
    {
      unsigned int v36 = *((_DWORD *)a6 + 1);
LABEL_53:
      if (v36)
      {
        if (*a6)
        {
          uint64_t v37 = *((void *)a6 + 1);
          if (v36 <= (unint64_t)((*((void *)a6 + 2) - v37) >> 1))
          {
            *(void *)&v45[8] = v35;
            *(_WORD *)&v45[16] = *(_WORD *)(v37 + 2 * (v36 - 1));
            SampleToRollDistanceTable::append_entry(a8, (long long *)v45);
          }
        }
      }
    }
LABEL_57:
    if (*(void **)((char *)__p + 4))
    {
      *(void **)((char *)&__p[1] + 4) = *(void **)((char *)__p + 4);
      operator delete(*(void **)((char *)__p + 4));
    }
    goto LABEL_59;
  }
  return 1;
}

void sub_190057CB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a10) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EC3AudioStream::GetLoudnessInfo(EC3AudioStream *this, CACFDictionary *a2)
{
  if (*((_DWORD *)this + 104) < 0xFFFFFFE1) {
    return 0xFFFFFFFFLL;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  __int16 v6 = 257;
  CACFDictionary::AddFloat32(a2, @"dialnorm", (float)*((int *)this + 104));
  CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  return 0;
}

void sub_190057D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t EC3AudioStream::HandleDiscontinuity(EC3AudioStream *this)
{
  *((_DWORD *)this + 59) = 0;
  *((unsigned char *)this + 438) = 0;
  *((void *)this + 53) = 0;
  *((_DWORD *)this + 108) = 0;
  *((_DWORD *)this + 123) = 0;
  *((unsigned char *)this + 333) = 0;
  *((unsigned char *)this + 352) = 0;
  EC3AudioStream::Resync(this);
  return 0;
}

uint64_t EC3AudioStream::Resync(EC3AudioStream *this)
{
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  uint64_t v73 = (const unsigned __int8 **)((char *)this + 424);
  if (*((_DWORD *)this + 106) && (unsigned int v2 = *((_DWORD *)this + 107)) != 0)
  {
    unsigned int v3 = *((_DWORD *)this + 123);
    unsigned int v4 = v2 - v3;
    if (v2 > v3)
    {
      uint64_t v5 = 0;
      uint64_t v6 = *((void *)this + 1);
      uint64_t v7 = *(void *)(v6 + 88);
      uint64_t v8 = *(void *)(v6 + 96);
      uint64_t v9 = v7 + *(unsigned int *)(v6 + 80);
      BOOL v11 = v8 < v7 || v9 <= v8;
      unsigned int v12 = v9 - v8;
      if (v11) {
        unsigned int v13 = 0;
      }
      else {
        unsigned int v13 = v12;
      }
      if (v13 >= v4) {
        size_t v14 = v4;
      }
      else {
        size_t v14 = v13;
      }
      if (!v11 && v12) {
        uint64_t v5 = (const unsigned __int8 *)(*(void *)(v6 + 72) + (v8 - v7));
      }
      EC3AudioStream::EC3Packet::AppendPacketData(v73, v5, v14);
      *(void *)(*((void *)this + 1) + 96) += v14;
    }
  }
  else
  {
    *((unsigned char *)this + 438) = 0;
    *((void *)this + 53) = 0;
    *((_DWORD *)this + 108) = 0;
    *((_DWORD *)this + 123) = 0;
  }
  uint64_t v15 = 0;
  if (*((unsigned char *)this + 332)) {
    int v16 = 10;
  }
  else {
    int v16 = 12;
  }
  uint64_t v17 = *((void *)this + 1);
  uint64_t v18 = *(void *)(v17 + 88);
  uint64_t v19 = *(void *)(v17 + 96);
  uint64_t v20 = v18 + *(unsigned int *)(v17 + 80);
  BOOL v22 = v19 < v18 || v20 <= v19;
  int v23 = v20 - v19;
  if (v22) {
    int v24 = 0;
  }
  else {
    int v24 = v23;
  }
  unsigned int v85 = 0;
  if (!v22 && v23) {
    uint64_t v15 = *(void *)(v17 + 72) + (v19 - v18);
  }
  if (!kASSubSytemEC3)
  {
    unsigned int v25 = MEMORY[0x1E4F14500];
LABEL_40:
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136316162;
      *(void *)&uint8_t buf[4] = "EC3AudioStream.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 207;
      *(_WORD *)&buf[18] = 2048;
      *(void *)&buf[20] = this;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = v24;
      *(_WORD *)&buf[34] = 2048;
      *(void *)&buf[36] = v19;
      _os_log_impl(&dword_18FEC0000, v25, OS_LOG_TYPE_DEBUG, "%25s:%-5d EC3AudioStream(%p):Resync bytesAvailable %d  fpos %qd", buf, 0x2Cu);
    }
    goto LABEL_42;
  }
  unsigned int v25 = *(NSObject **)kASSubSytemEC3;
  if (*(void *)kASSubSytemEC3) {
    goto LABEL_40;
  }
LABEL_42:
  char v26 = 0;
  uint64_t v74 = (void **)((char *)this + 192);
  do
  {
    unsigned int v27 = v85;
    if ((int)(v24 - v85) < v16) {
      goto LABEL_148;
    }
    BOOL v28 = EC3AudioStream::ScanForSyncWord((uint64_t)this, v24, v15, (int *)&v85);
    unsigned int v27 = v85;
    if (!v28) {
      goto LABEL_148;
    }
    unsigned int v83 = 0;
    unsigned int v84 = 0;
    uint64_t v81 = 0;
    uint64_t v82 = 0;
    long long outPropertyData = 0;
    uint64_t v80 = 0;
    int v29 = EC3AudioStream::ParseOneCycle(this, v24 - v85, (char *)(v15 + v85), &v84, &v83, (const unsigned __int8 **)&v82);
    if (!v29)
    {
      unsigned int v31 = v82;
      if (!v82 || (uint64_t v32 = v83) == 0)
      {
        char v26 = 0;
        v85 += v84;
        int v30 = 5;
        goto LABEL_143;
      }
      uint64_t v33 = *((void *)this + 1);
      if (*(_DWORD *)(v33 + 112))
      {
LABEL_134:
        if (!*((_DWORD *)this + 50))
        {
          *((_DWORD *)this + 50) = 1;
          CADeprecated::CAAutoFree<AudioStreamPacketDescription>::reallocItems(v74, 1);
        }
        uint64_t v70 = (AudioStreamPacketDescription *)*v74;
        v70->mStartOffset = 0;
        v70->mVariableFramesInPacket = 0;
        v70->mDataByteSize = v32;
        if (kASSubSytemEC3)
        {
          unint64_t v71 = *(NSObject **)kASSubSytemEC3;
          if (!*(void *)kASSubSytemEC3)
          {
LABEL_142:
            AudioFileStreamWrapper::CallPacketsProc(*((AudioFileStreamWrapper **)this + 1), v32, 1u, v31, v70, 1);
            ++*((void *)this + 23);
            *((unsigned char *)this + 438) = 0;
            *((void *)this + 53) = 0;
            *((_DWORD *)this + 108) = 0;
            *((_DWORD *)this + 123) = 0;
            v85 += v84;
            int v30 = 5;
            char v26 = 1;
            goto LABEL_143;
          }
        }
        else
        {
          unint64_t v71 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315906;
          *(void *)&uint8_t buf[4] = "EC3AudioStream.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 311;
          *(_WORD *)&buf[18] = 2048;
          *(void *)&buf[20] = 0;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = v32;
          _os_log_impl(&dword_18FEC0000, v71, OS_LOG_TYPE_DEBUG, "%25s:%-5d found packet: offset = %lld, std::string::size_type size = %d", buf, 0x22u);
          uint64_t v70 = (AudioStreamPacketDescription *)*v74;
        }
        goto LABEL_142;
      }
      long long v34 = *(_OWORD *)((char *)this + 456);
      long long v76 = *(_OWORD *)((char *)this + 440);
      long long v77 = v34;
      uint64_t v78 = *((void *)this + 59);
      *((_DWORD *)this + 29) = *((_DWORD *)this + 108);
      unsigned int v35 = v84;
      unsigned int v36 = v85;
      *((void *)this + 13) = *(void *)(v33 + 96) - v32 + v85 + (unint64_t)v84;
      (*(void (**)(EC3AudioStream *, long long *))(*(void *)this + 56))(this, &v76);
      int v37 = 1700998451;
      if (*((_DWORD *)this + 8) == 1700998451)
      {
        BOOL v38 = 0;
      }
      else
      {
        BOOL v38 = *(_DWORD *)v73 < 2u;
        if (*(_DWORD *)v73 >= 2u) {
          int v37 = 1700998451;
        }
        else {
          int v37 = 1633889587;
        }
      }
      *((unsigned char *)this + 332) = v38;
      *((_DWORD *)this + 4) = v37;
      if ((!*((void *)this + 15) || !*((_DWORD *)this + 32))
        && !EC3AudioStream::ConstructMagicCookie(this, v32, v31))
      {
        uint64_t v40 = *((void *)this + 1);
        *(_DWORD *)buf = 1;
        *(unsigned char *)(v40 + 108) = 1;
        int v41 = *(void (**)(void, void, uint64_t, unsigned char *))(v40 + 24);
        if (v41) {
          v41(*(void *)(v40 + 40), *(unsigned int *)(v40 + 8), 1835493731, buf);
        }
      }
      UInt32 outPropertyDataSize = 0;
      uint64_t v94 = 0;
      *(_OWORD *)buf = v76;
      *(_OWORD *)&buf[16] = v77;
      LODWORD(v94) = *((_DWORD *)this + 32);
      uint64_t v42 = *((void *)this + 15);
      *(void *)&buf[32] = v78;
      *(void *)&buf[40] = v42;
      OSStatus PropertyInfo = AudioFormatGetPropertyInfo(0x666C7374u, 0x38u, buf, &outPropertyDataSize);
      if (PropertyInfo || outPropertyDataSize < 0x30)
      {
        if (kASSubSytemEC3)
        {
          int v48 = *(NSObject **)kASSubSytemEC3;
          if (!*(void *)kASSubSytemEC3)
          {
LABEL_78:
            char v26 = 0;
            *((unsigned char *)this + 438) = 0;
            *((void *)this + 53) = 0;
            *((_DWORD *)this + 108) = 0;
            *((_DWORD *)this + 123) = 0;
            unsigned int v49 = v35 + v36;
            int v30 = 5;
            unsigned int v85 = v49;
            goto LABEL_143;
          }
        }
        else
        {
          int v48 = MEMORY[0x1E4F14500];
        }
        if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
        {
          CAX4CCString::CAX4CCString((CAX4CCString *)v86, PropertyInfo);
          *(_DWORD *)unsigned __int16 v87 = 136315650;
          float32x2_t v88 = "EC3AudioStream.cpp";
          __int16 v89 = 1024;
          int v90 = 280;
          __int16 v91 = 2080;
          unint64_t v92 = v86;
          _os_log_impl(&dword_18FEC0000, v48, OS_LOG_TYPE_DEBUG, "%25s:%-5d ERROR: could not get format list items for the stream, err = %s", v87, 0x1Cu);
        }
        goto LABEL_78;
      }
      std::vector<AudioFormatListItem>::resize((char **)&outPropertyData, outPropertyDataSize / 0x30uLL);
      int v44 = outPropertyData;
      UInt32 outPropertyDataSize = (v80 - outPropertyData) & 0xFFFFFFF0;
      if (!AudioFormatGetProperty(0x666C7374u, 0x38u, buf, &outPropertyDataSize, outPropertyData))
      {
        uint64_t v45 = outPropertyDataSize;
        *((_DWORD *)this + 100) = v44[12 * (outPropertyDataSize / 0x30) - 2];
        (*(void (**)(EC3AudioStream *, uint64_t, _DWORD *))(*(void *)this + 64))(this, v45, v44);
      }
      uint64_t v46 = (NSObject **)kASSubSytemEC3;
      if (kASSubSytemEC3)
      {
        vDSP_Length v47 = *(NSObject **)kASSubSytemEC3;
        if (!*(void *)kASSubSytemEC3) {
          goto LABEL_118;
        }
      }
      else
      {
        vDSP_Length v47 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
      {
        int v50 = *((unsigned __int8 *)this + 332);
        *(_DWORD *)unsigned __int16 v87 = 136315650;
        float32x2_t v88 = "EC3AudioStream.cpp";
        __int16 v89 = 1024;
        int v90 = 287;
        __int16 v91 = 1024;
        LODWORD(v92) = v50;
        _os_log_impl(&dword_18FEC0000, v47, OS_LOG_TYPE_DEBUG, "%25s:%-5d isAC3Stream %d", v87, 0x18u);
        uint64_t v46 = (NSObject **)kASSubSytemEC3;
      }
      if (v46)
      {
        size_t v51 = *v46;
        if (!*v46) {
          goto LABEL_118;
        }
      }
      else
      {
        size_t v51 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
      {
        int v52 = *((_DWORD *)this + 29);
        *(_DWORD *)unsigned __int16 v87 = 136315650;
        float32x2_t v88 = "EC3AudioStream.cpp";
        __int16 v89 = 1024;
        int v90 = 288;
        __int16 v91 = 1024;
        LODWORD(v92) = v52;
        _os_log_impl(&dword_18FEC0000, v51, OS_LOG_TYPE_DEBUG, "%25s:%-5d packetSizeUpperBound %d", v87, 0x18u);
        uint64_t v46 = (NSObject **)kASSubSytemEC3;
      }
      if (v46)
      {
        unint64_t v53 = *v46;
        if (!*v46) {
          goto LABEL_118;
        }
      }
      else
      {
        unint64_t v53 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
      {
        float64x2_t v54 = (uint8_t *)*((void *)this + 13);
        *(_DWORD *)unsigned __int16 v87 = 136315650;
        float32x2_t v88 = "EC3AudioStream.cpp";
        __int16 v89 = 1024;
        int v90 = 289;
        __int16 v91 = 2048;
        unint64_t v92 = v54;
        _os_log_impl(&dword_18FEC0000, v53, OS_LOG_TYPE_DEBUG, "%25s:%-5d dataOffset %qd", v87, 0x1Cu);
        uint64_t v46 = (NSObject **)kASSubSytemEC3;
      }
      if (v46)
      {
        unint64_t v55 = *v46;
        if (!*v46) {
          goto LABEL_118;
        }
      }
      else
      {
        unint64_t v55 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
      {
        int v56 = *((_DWORD *)this + 100);
        *(_DWORD *)unsigned __int16 v87 = 136315650;
        float32x2_t v88 = "EC3AudioStream.cpp";
        __int16 v89 = 1024;
        int v90 = 291;
        __int16 v91 = 1024;
        LODWORD(v92) = v56;
        _os_log_impl(&dword_18FEC0000, v55, OS_LOG_TYPE_DEBUG, "%25s:%-5d layoutTag 0x%x", v87, 0x18u);
        uint64_t v46 = (NSObject **)kASSubSytemEC3;
      }
      if (v46)
      {
        unsigned int v57 = *v46;
        if (!*v46) {
          goto LABEL_118;
        }
      }
      else
      {
        unsigned int v57 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v58 = (uint8_t *)*((void *)this + 3);
        *(_DWORD *)unsigned __int16 v87 = 136315650;
        float32x2_t v88 = "EC3AudioStream.cpp";
        __int16 v89 = 1024;
        int v90 = 292;
        __int16 v91 = 2048;
        unint64_t v92 = v58;
        _os_log_impl(&dword_18FEC0000, v57, OS_LOG_TYPE_DEBUG, "%25s:%-5d sampleRate %g", v87, 0x1Cu);
        uint64_t v46 = (NSObject **)kASSubSytemEC3;
      }
      if (v46)
      {
        uint64_t v59 = *v46;
        if (!*v46) {
          goto LABEL_118;
        }
      }
      else
      {
        uint64_t v59 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
      {
        int v60 = *((_DWORD *)this + 11);
        *(_DWORD *)unsigned __int16 v87 = 136315650;
        float32x2_t v88 = "EC3AudioStream.cpp";
        __int16 v89 = 1024;
        int v90 = 293;
        __int16 v91 = 1024;
        LODWORD(v92) = v60;
        _os_log_impl(&dword_18FEC0000, v59, OS_LOG_TYPE_DEBUG, "%25s:%-5d framesPerPacket %d", v87, 0x18u);
        uint64_t v46 = (NSObject **)kASSubSytemEC3;
      }
      if (v46)
      {
        unint64_t v61 = *v46;
        if (!*v46)
        {
LABEL_118:
          uint64_t v63 = *((void *)this + 1);
          *(_DWORD *)unsigned __int16 v87 = 1;
          if (!*(unsigned char *)(v63 + 104))
          {
            *(unsigned char *)(v63 + 104) = 1;
            int v64 = *(void (**)(void, void, uint64_t, uint8_t *))(v63 + 24);
            if (v64)
            {
              v64(*(void *)(v63 + 40), *(unsigned int *)(v63 + 8), 1717988724, v87);
              uint64_t v63 = *((void *)this + 1);
            }
          }
          *(_DWORD *)unsigned __int16 v87 = 1;
          if (!*(unsigned char *)(v63 + 105))
          {
            *(unsigned char *)(v63 + 105) = 1;
            float64_t v65 = *(void (**)(void, void, uint64_t, uint8_t *))(v63 + 24);
            if (v65)
            {
              v65(*(void *)(v63 + 40), *(unsigned int *)(v63 + 8), 1684434292, v87);
              uint64_t v63 = *((void *)this + 1);
            }
          }
          *(_DWORD *)unsigned __int16 v87 = 1;
          *(unsigned char *)(v63 + 108) = 1;
          uint64_t v66 = *(void (**)(void, void, uint64_t, uint8_t *))(v63 + 24);
          if (v66)
          {
            v66(*(void *)(v63 + 40), *(unsigned int *)(v63 + 8), 1718383476, v87);
            uint64_t v63 = *((void *)this + 1);
          }
          *(_DWORD *)unsigned __int16 v87 = 1;
          if (!*(unsigned char *)(v63 + 109))
          {
            *(unsigned char *)(v63 + 109) = 1;
            unint64_t v67 = *(void (**)(void, void, uint64_t, uint8_t *))(v63 + 24);
            if (v67)
            {
              v67(*(void *)(v63 + 40), *(unsigned int *)(v63 + 8), 1668112752, v87);
              uint64_t v63 = *((void *)this + 1);
            }
          }
          *(_DWORD *)unsigned __int16 v87 = 1;
          float64x2_t v68 = *(void (**)(void, void, uint64_t, uint8_t *))(v63 + 24);
          if (v68)
          {
            v68(*(void *)(v63 + 40), *(unsigned int *)(v63 + 8), 1685022310, v87);
            uint64_t v63 = *((void *)this + 1);
          }
          *(_DWORD *)unsigned __int16 v87 = 1;
          if (!*(_DWORD *)(v63 + 112))
          {
            *(_DWORD *)(v63 + 112) = 1;
            float64x2_t v69 = *(void (**)(void, void, uint64_t, uint8_t *))(v63 + 24);
            if (v69) {
              v69(*(void *)(v63 + 40), *(unsigned int *)(v63 + 8), 1919247481, v87);
            }
          }
          goto LABEL_134;
        }
      }
      else
      {
        unint64_t v61 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
      {
        int v62 = *((_DWORD *)this + 13);
        *(_DWORD *)unsigned __int16 v87 = 136315650;
        float32x2_t v88 = "EC3AudioStream.cpp";
        __int16 v89 = 1024;
        int v90 = 294;
        __int16 v91 = 1024;
        LODWORD(v92) = v62;
        _os_log_impl(&dword_18FEC0000, v61, OS_LOG_TYPE_DEBUG, "%25s:%-5d channelsPerFrame %d", v87, 0x18u);
      }
      goto LABEL_118;
    }
    if (v29 == 1717662832)
    {
      int v30 = 1;
      *((unsigned char *)this + 177) = 1;
      *((_DWORD *)this + 59) = -1;
    }
    else
    {
      unsigned int v39 = v84;
      if (v84 <= 1) {
        unsigned int v39 = 1;
      }
      v85 += v39;
      int v30 = 4;
    }
LABEL_143:
    if (outPropertyData) {
      operator delete(outPropertyData);
    }
  }
  while (v30 == 4);
  if (v30 == 5)
  {
    unsigned int v27 = v85;
LABEL_148:
    *(void *)(*((void *)this + 1) + 96) += v27;
    return v26 & 1;
  }
  char v26 = 1;
  return v26 & 1;
}

void sub_190058998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const unsigned __int8 **EC3AudioStream::EC3Packet::AppendPacketData(const unsigned __int8 **this, const unsigned __int8 *__src, size_t __n)
{
  if (__src)
  {
    unsigned int v3 = __n;
    if (__n)
    {
      uint64_t v5 = this;
      uint64_t v7 = this[7];
      this += 7;
      uint64_t v6 = v7;
      if (v7 != __src)
      {
        int v8 = *((_DWORD *)v5 + 17);
        int v9 = v8 + __n;
        if (*((_DWORD *)v5 + 16) < (v8 + __n))
        {
          CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)this, (v8 + __n));
          *((_DWORD *)v5 + 16) = v9;
          uint64_t v6 = v5[7];
          int v8 = *((_DWORD *)v5 + 17);
        }
        this = (const unsigned __int8 **)memcpy((void *)&v6[v8], __src, v3);
        *((_DWORD *)v5 + 17) += v3;
      }
    }
  }
  return this;
}

BOOL EC3AudioStream::ScanForSyncWord(uint64_t a1, int a2, uint64_t a3, int *a4)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (kASSubSytemEC3)
  {
    int v8 = *(NSObject **)kASSubSytemEC3;
    if (!*(void *)kASSubSytemEC3) {
      goto LABEL_7;
    }
  }
  else
  {
    int v8 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    int v9 = *a4;
    *(_DWORD *)buf = 136315906;
    unsigned int v31 = "EC3AudioStream.cpp";
    __int16 v32 = 1024;
    int v33 = 1088;
    __int16 v34 = 1024;
    int v35 = a2;
    __int16 v36 = 1024;
    int v37 = v9;
    _os_log_impl(&dword_18FEC0000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d ->ScanForSyncWord %d %d", buf, 0x1Eu);
  }
LABEL_7:
  if (*(unsigned char *)(a1 + 332)) {
    int v10 = -10;
  }
  else {
    int v10 = -12;
  }
  int v11 = *a4;
  int v12 = v10 + a2;
  if (*a4 > v10 + a2)
  {
    int v13 = *a4;
LABEL_41:
    *a4 = v13;
    if (kASSubSytemEC3)
    {
      unsigned int v27 = *(NSObject **)kASSubSytemEC3;
      if (!*(void *)kASSubSytemEC3) {
        return 0;
      }
    }
    else
    {
      unsigned int v27 = MEMORY[0x1E4F14500];
    }
    BOOL result = os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG);
    if (!result) {
      return result;
    }
    *(_DWORD *)buf = 136315906;
    unsigned int v31 = "EC3AudioStream.cpp";
    __int16 v32 = 1024;
    int v33 = 1126;
    __int16 v34 = 1024;
    int v35 = a2;
    __int16 v36 = 1024;
    int v37 = v13;
    _os_log_impl(&dword_18FEC0000, v27, OS_LOG_TYPE_DEBUG, "%25s:%-5d <-ScanForSyncWord DID NOT find sync word, buf std::string::size_type size = %d, index = %d", buf, 0x1Eu);
    return 0;
  }
  while (1)
  {
    size_t v14 = (unsigned __int8 *)(a3 + v11);
    int v15 = *v14;
    if (v15 != 11) {
      break;
    }
    if (v14[1] == 119) {
      goto LABEL_28;
    }
LABEL_15:
    BOOL v16 = *(_WORD *)v14 == 17481 && v14[2] == 51;
    if (!v16 && (*(_WORD *)v14 != 16724 || v14[2] != 71)) {
      goto LABEL_40;
    }
    (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
    uint64_t v18 = *(void *)(a1 + 8);
    int v19 = v14 - *(void *)(v18 + 72);
    *(_DWORD *)(a1 + 364) = v19;
    *(void *)(a1 + 368) = *(void *)(v18 + 88) + v19;
    if (*(char *)(a1 + 376) < 0)
    {
      uint64_t v20 = *(void *)(v18 + 48);
      uint64_t v21 = *(void *)(v18 + 56) - v20;
      if (v21)
      {
        unint64_t v22 = 0;
        unint64_t v23 = v21 >> 2;
        unsigned int v24 = 1;
        do
        {
          BOOL v16 = *(_DWORD *)(v20 + 4 * v22) == 1768174437;
          LODWORD(v21) = v16;
          unint64_t v22 = v24++;
          BOOL v25 = !v16 && v23 > v22;
        }
        while (v25);
      }
      *(unsigned char *)(a1 + 376) = v21;
      if (!v21) {
        goto LABEL_40;
      }
LABEL_37:
      *(_DWORD *)buf = 0;
      char v26 = *(void (**)(void, void, uint64_t, uint8_t *))(v18 + 24);
      if (v26) {
        v26(*(void *)(v18 + 40), *(unsigned int *)(v18 + 8), 1768174437, buf);
      }
      int v11 = v11 + ID3Size(a2 - v11, (const unsigned __int8 *)(a3 + v11), (int *)buf) - 1;
      goto LABEL_40;
    }
    if (*(unsigned char *)(a1 + 376)) {
      goto LABEL_37;
    }
LABEL_40:
    int v13 = v11 + 1;
    BOOL v25 = v11++ < v12;
    if (!v25) {
      goto LABEL_41;
    }
  }
  if (v15 != 119 || v14[1] != 11) {
    goto LABEL_15;
  }
LABEL_28:
  if (ParseAC3Header((unsigned __int8 *)(a3 + v11), a2 - v11, 0, 0, 0, 0, 0, 0)) {
    goto LABEL_40;
  }
  *a4 = v11;
  if (kASSubSytemEC3)
  {
    int v29 = *(NSObject **)kASSubSytemEC3;
    if (!*(void *)kASSubSytemEC3) {
      return 1;
    }
  }
  else
  {
    int v29 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315906;
    unsigned int v31 = "EC3AudioStream.cpp";
    __int16 v32 = 1024;
    int v33 = 1105;
    __int16 v34 = 1024;
    int v35 = a2;
    __int16 v36 = 1024;
    int v37 = v11;
    _os_log_impl(&dword_18FEC0000, v29, OS_LOG_TYPE_DEBUG, "%25s:%-5d <-ScanForSyncWord found sync word, buf std::string::size_type size = %d, index = %d", buf, 0x1Eu);
  }
  return 1;
}

uint64_t EC3AudioStream::ParseOneCycle(EC3AudioStream *this, unsigned int a2, char *a3, unsigned int *a4, unsigned int *a5, const unsigned __int8 **a6)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  BOOL v30 = *((unsigned char *)this + 332) == 0;
  *a4 = 0;
  if (v30) {
    size_t v8 = 12;
  }
  else {
    size_t v8 = 10;
  }
  *a5 = 0;
  *a6 = 0;
  uint64_t v66 = a3;
  if (!a3 || v8 > a2)
  {
    if (kASSubSytemEC3)
    {
      int v19 = *(NSObject **)kASSubSytemEC3;
      if (!*(void *)kASSubSytemEC3) {
        return 0xFFFFFFFFLL;
      }
    }
    else
    {
      int v19 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v74 = 136316162;
      uint64_t v75 = "EC3AudioStream.cpp";
      __int16 v76 = 1024;
      int v77 = 418;
      __int16 v78 = 2048;
      *(void *)int v79 = this;
      *(_WORD *)&v79[8] = 2048;
      *(void *)&long long v80 = v66;
      WORD4(v80) = 1024;
      *(_DWORD *)((char *)&v80 + 10) = a2;
      _os_log_impl(&dword_18FEC0000, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d EC3AudioStream(%p): invalid inputs, inBuf = %p, inBufSize = %d", (uint8_t *)&v74, 0x2Cu);
    }
    return 0xFFFFFFFFLL;
  }
  *(_DWORD *)&v72[1] = 0;
  MEMORY[0x1F4188790](this);
  size_t v14 = (char *)&v58 - v13;
  int v15 = (unsigned char *)*((void *)this + 51);
  int v16 = *v15;
  BOOL v17 = *v15 == 0;
  if (*((_DWORD *)this + 106)) {
    BOOL v18 = *((_DWORD *)this + 107) != 0;
  }
  else {
    BOOL v18 = 0;
  }
  int v60 = v11;
  uint64_t v63 = v12;
  if (!kASSubSytemEC3)
  {
    uint64_t v21 = MEMORY[0x1E4F14500];
LABEL_20:
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v74 = 136316162;
      uint64_t v75 = "EC3AudioStream.cpp";
      __int16 v76 = 1024;
      int v77 = 434;
      __int16 v78 = 1024;
      *(_DWORD *)int v79 = a2;
      *(_WORD *)&v79[4] = 1024;
      *(_DWORD *)&v79[6] = v17;
      LOWORD(v80) = 1024;
      *(_DWORD *)((char *)&v80 + 2) = v18;
      _os_log_impl(&dword_18FEC0000, v21, OS_LOG_TYPE_DEBUG, "%25s:%-5d -> inBufSize = %d, isFirstCycle = %d, hadPartialPacket = %d", (uint8_t *)&v74, 0x24u);
    }
    goto LABEL_22;
  }
  uint64_t v21 = *(NSObject **)kASSubSytemEC3;
  if (*(void *)kASSubSytemEC3) {
    goto LABEL_20;
  }
LABEL_22:
  int v64 = a5;
  float64_t v65 = (const unsigned __int8 **)((char *)this + 424);
  int v62 = a6;
  if (v18)
  {
    int v22 = *((_DWORD *)this + 106);
  }
  else
  {
    int v22 = 0;
    *((unsigned char *)this + 438) = 0;
    *((void *)this + 53) = 0;
    *((_DWORD *)this + 108) = 0;
    *((_DWORD *)this + 123) = 0;
  }
  memcpy(v14, v66, v8);
  int v24 = 0;
  unint64_t v25 = 0;
  uint64_t v71 = 0;
  signed int v61 = a2;
  unint64_t v59 = a2;
  int64_t v26 = a2 - v8;
  unsigned int v27 = (double *)((char *)this + 440);
  *(_OWORD *)float64x2_t v69 = 0u;
  long long v70 = 0u;
  while (1)
  {
    v73[0] = 0;
    v72[0] = 0;
    unsigned int v68 = 0;
    EC3StreamParser::AssessPacketHeader((EC3StreamParser *)v14, (const void *)v8, (unsigned int *)&v72[1], (unsigned int *)v72, v69, (AudioStreamBasicDescription *)v73, &v68, v23);
    uint64_t v20 = v28;
    if (!v16 && !v28)
    {
      if (v24 == *((_DWORD *)this + 101)) {
        *((_DWORD *)this + 104) = v68;
      }
      uint64_t v20 = EC3StreamParser::AssessPacket(*((char ***)this + 51), (unsigned __int8 *)v14, v8, v22, &v74, &v67);
    }
    uint64_t v29 = *(unsigned int *)&v72[1];
    BOOL v30 = v20 != -2 || *(unsigned int *)&v72[1] == 0;
    char v31 = !v30;
    if (v20 && (v31 & 1) == 0)
    {
      if (kASSubSytemEC3)
      {
        __int16 v36 = *(NSObject **)kASSubSytemEC3;
        uint64_t v38 = v64;
        int v37 = v65;
        if (!*(void *)kASSubSytemEC3) {
          goto LABEL_111;
        }
      }
      else
      {
        __int16 v36 = MEMORY[0x1E4F14500];
        uint64_t v38 = v64;
        int v37 = v65;
      }
      if (!os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_111;
      }
      unsigned int v74 = 136315906;
      uint64_t v75 = "EC3AudioStream.cpp";
      __int16 v76 = 1024;
      int v77 = 467;
      __int16 v78 = 2048;
      *(void *)int v79 = this;
      *(_WORD *)&v79[8] = 1024;
      LODWORD(v80) = v20;
      uint64_t v45 = "%25s:%-5d EC3AudioStream(%p): AssessPacketHeader or AssessPacket failed, err = %d";
LABEL_110:
      _os_log_impl(&dword_18FEC0000, v36, OS_LOG_TYPE_DEBUG, v45, (uint8_t *)&v74, 0x22u);
      goto LABEL_111;
    }
    int v32 = v22 | v72[0];
    if (!v32)
    {
      uint64_t v20 = 0xFFFFFFFFLL;
LABEL_68:
      BOOL v39 = v32 != 0;
      goto LABEL_80;
    }
    if (v22 && v72[0])
    {
      uint64_t v20 = 0;
      goto LABEL_68;
    }
    if (!*((unsigned char *)this + 332) && !v72[0] && v73[0] == 1) {
      ++v24;
    }
    if (!*(_DWORD *)&v72[1])
    {
      uint64_t v20 = 0xFFFFFFFFLL;
      goto LABEL_71;
    }
    if (*((unsigned char *)this + 436))
    {
      if (*(double *)v69 == *v27 && DWORD1(v70) == *((_DWORD *)this + 115)) {
        goto LABEL_57;
      }
      if (!*((unsigned char *)this + 437) || *(_DWORD *)v65)
      {
        uint64_t v20 = 560226676;
LABEL_71:
        uint64_t v38 = v64;
        int v37 = v65;
        if (kASSubSytemEC3)
        {
          __int16 v36 = *(NSObject **)kASSubSytemEC3;
          if (!*(void *)kASSubSytemEC3) {
            goto LABEL_111;
          }
        }
        else
        {
          __int16 v36 = MEMORY[0x1E4F14500];
        }
        if (!os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_111;
        }
        unsigned int v74 = 136315906;
        uint64_t v75 = "EC3AudioStream.cpp";
        __int16 v76 = 1024;
        int v77 = 493;
        __int16 v78 = 2048;
        *(void *)int v79 = this;
        *(_WORD *)&v79[8] = 1024;
        LODWORD(v80) = v20;
        uint64_t v45 = "%25s:%-5d EC3AudioStream(%p): AddSubPacketInfo failed, err = %d";
        goto LABEL_110;
      }
      *((unsigned char *)this + 438) = 1;
    }
    else
    {
      *((unsigned char *)this + 436) = 1;
    }
    long long v34 = v70;
    *(_OWORD *)unsigned int v27 = *(_OWORD *)v69;
    *(_OWORD *)((char *)this + 456) = v34;
    *((void *)this + 59) = v71;
LABEL_57:
    v25 += v29;
    ++*((_DWORD *)this + 106);
    *((_DWORD *)this + 107) += v29;
    int v35 = *((_DWORD *)this + 112) == 1700998451 ? 4096 : 3840;
    *((_DWORD *)this + 108) += v35;
    if ((uint64_t)v25 > v26) {
      break;
    }
    if (++v22 >= 0x48)
    {
      uint64_t v38 = v64;
      int v37 = v65;
      if (v25 <= v59)
      {
        uint64_t v20 = 0;
        BOOL v39 = 1;
        goto LABEL_81;
      }
      uint64_t v20 = 1717662832;
      if (kASSubSytemEC3)
      {
        __int16 v36 = *(NSObject **)kASSubSytemEC3;
        if (!*(void *)kASSubSytemEC3) {
          goto LABEL_111;
        }
      }
      else
      {
        __int16 v36 = MEMORY[0x1E4F14500];
      }
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
      {
        unsigned int v74 = 136315906;
        uint64_t v75 = "EC3AudioStream.cpp";
        __int16 v76 = 1024;
        int v77 = 509;
        __int16 v78 = 2048;
        *(void *)int v79 = this;
        *(_WORD *)&v79[8] = 1024;
        LODWORD(v80) = 1717662832;
        uint64_t v45 = "%25s:%-5d EC3AudioStream(%p): entire packet data must be within given buffer boundary, err = %d";
        goto LABEL_110;
      }
LABEL_111:
      BOOL v41 = v20 == 0;
LABEL_112:
      if (*(_DWORD *)v37)
      {
        int v48 = *((_DWORD *)this + 107);
        if (v48)
        {
          signed int v49 = v48 - *((_DWORD *)this + 123);
          if (v49 >= v61) {
            size_t v50 = v61;
          }
          else {
            size_t v50 = v49;
          }
          if ((v50 & 0x80000000) != 0)
          {
            uint64_t v20 = 1717662832;
            if (kASSubSytemEC3)
            {
              uint64_t v46 = *(NSObject **)kASSubSytemEC3;
              if (!*(void *)kASSubSytemEC3) {
                return v20;
              }
            }
            else
            {
              uint64_t v46 = MEMORY[0x1E4F14500];
            }
            if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
            {
              unsigned int v74 = 136316162;
              uint64_t v75 = "EC3AudioStream.cpp";
              __int16 v76 = 1024;
              int v77 = 558;
              __int16 v78 = 2048;
              *(void *)int v79 = this;
              *(_WORD *)&v79[8] = 1024;
              LODWORD(v80) = v50;
              WORD2(v80) = 1024;
              *(_DWORD *)((char *)&v80 + 6) = 1717662832;
              vDSP_Length v47 = "%25s:%-5d EC3AudioStream(%p): trying to cache partial packet data, but mEC3Packet actual packet size"
                    " or cached packet size is incorrect, bytesToCopy = %d, err = %d";
LABEL_134:
              _os_log_impl(&dword_18FEC0000, v46, OS_LOG_TYPE_DEBUG, v47, (uint8_t *)&v74, 0x28u);
            }
            goto LABEL_135;
          }
          if (v50)
          {
            EC3AudioStream::EC3Packet::AppendPacketData(v37, (const unsigned __int8 *)v66, v50);
            signed int *v60 = v50;
          }
        }
      }
      *int v62 = 0;
      *uint64_t v38 = 0;
      if (!v41) {
        goto LABEL_135;
      }
LABEL_121:
      if (!kASSubSytemEC3) {
        return 0;
      }
      if (*(unsigned char *)(kASSubSytemEC3 + 8))
      {
        size_t v51 = *(NSObject **)kASSubSytemEC3;
        if (*(void *)kASSubSytemEC3)
        {
          if (os_log_type_enabled(*(os_log_t *)kASSubSytemEC3, OS_LOG_TYPE_DEBUG))
          {
            unsigned int v52 = *v38;
            int v53 = *v60;
            unsigned int v74 = 136315906;
            uint64_t v75 = "EC3AudioStream.cpp";
            __int16 v76 = 1024;
            int v77 = 578;
            __int16 v78 = 1024;
            *(_DWORD *)int v79 = v52;
            *(_WORD *)&v79[4] = 1024;
            *(_DWORD *)&v79[6] = v53;
            _os_log_impl(&dword_18FEC0000, v51, OS_LOG_TYPE_DEBUG, "%25s:%-5d <- outPacketSize = %d, outBufBytesConsumed = %d", (uint8_t *)&v74, 0x1Eu);
          }
        }
      }
      return 0;
    }
    memcpy(v14, &v66[v25], v8);
  }
  uint64_t v20 = 0;
  BOOL v39 = (v22 - 71) < 0xFFFFFFB8 && v25 <= v59;
LABEL_80:
  uint64_t v38 = v64;
  int v37 = v65;
LABEL_81:
  BOOL v41 = v20 == 0;
  if (v20 || !v39) {
    goto LABEL_112;
  }
  unsigned int v42 = *((_DWORD *)this + 123);
  if (!v42)
  {
    *int v62 = (const unsigned __int8 *)v66;
    *uint64_t v38 = v25;
    signed int *v60 = v25;
    goto LABEL_121;
  }
  int v43 = *((_DWORD *)this + 107);
  signed int v44 = v43 - v42;
  if ((int)(v43 - v42) >= 0 && v44 <= v61)
  {
    if (v43 != v42)
    {
      EC3AudioStream::EC3Packet::AppendPacketData(v37, (const unsigned __int8 *)v66, v43 - v42);
      signed int *v60 = v44;
      unsigned int v42 = *((_DWORD *)this + 123);
    }
    *int v62 = (const unsigned __int8 *)*((void *)this + 60);
    *uint64_t v38 = v42;
    goto LABEL_121;
  }
  uint64_t v20 = 1717662832;
  if (kASSubSytemEC3)
  {
    uint64_t v46 = *(NSObject **)kASSubSytemEC3;
    if (!*(void *)kASSubSytemEC3) {
      return v20;
    }
  }
  else
  {
    uint64_t v46 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v74 = 136316162;
    uint64_t v75 = "EC3AudioStream.cpp";
    __int16 v76 = 1024;
    int v77 = 533;
    __int16 v78 = 2048;
    *(void *)int v79 = this;
    *(_WORD *)&v79[8] = 1024;
    LODWORD(v80) = v44;
    WORD2(v80) = 1024;
    *(_DWORD *)((char *)&v80 + 6) = 1717662832;
    vDSP_Length v47 = "%25s:%-5d EC3AudioStream(%p): trying to complete partial packet data, but mEC3Packet actual packet size or cac"
          "hed packet size is incorrect, bytesToCopy = %d, err = %d";
    goto LABEL_134;
  }
LABEL_135:
  if (kASSubSytemEC3)
  {
    float64x2_t v54 = *(NSObject **)kASSubSytemEC3;
    if (!*(void *)kASSubSytemEC3) {
      return v20;
    }
  }
  else
  {
    float64x2_t v54 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v55 = *v38;
    int v56 = *v60;
    CAX4CCString::CAX4CCString((CAX4CCString *)v73, v20);
    unsigned int v74 = 136316418;
    uint64_t v75 = "EC3AudioStream.cpp";
    __int16 v76 = 1024;
    int v77 = 575;
    __int16 v78 = 1024;
    *(_DWORD *)int v79 = v61;
    *(_WORD *)&v79[4] = 1024;
    *(_DWORD *)&v79[6] = v55;
    LOWORD(v80) = 1024;
    *(_DWORD *)((char *)&v80 + 2) = v56;
    WORD3(v80) = 2080;
    *((void *)&v80 + 1) = v73;
    _os_log_impl(&dword_18FEC0000, v54, OS_LOG_TYPE_DEBUG, "%25s:%-5d ERROR: inBufSize = %d, outPacketSize = %d, outBufBytesConsumed = %d, err = %s", (uint8_t *)&v74, 0x2Eu);
  }
  return v20;
}

uint64_t EC3AudioStream::ConstructMagicCookie(EC3AudioStream *this, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = 0xFFFFFFFFLL;
  if (!a2 || !a3) {
    return v3;
  }
  int v7 = *((_DWORD *)this + 8);
  unsigned int v19 = 45;
  unsigned int v20 = 11;
  if (v7 == 1633889587) {
    unsigned int v8 = 11;
  }
  else {
    unsigned int v8 = 0;
  }
  if (*((unsigned char *)this + 332)) {
    BOOL v9 = v7 == 1700998451;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9) {
    size_t v10 = v8 + 45;
  }
  else {
    size_t v10 = v8;
  }
  int v11 = (unsigned __int8 **)((char *)this + 120);
  CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)this + 15, v10);
  *((_DWORD *)this + 32) = v10;
  if (v7 == 1633889587)
  {
    uint64_t v3 = ConvertAC3HeaderToAC3MP4Cookie(a3, a2, *v11, &v20);
    unsigned int v12 = v20;
    uint64_t v13 = v20;
  }
  else
  {
    unsigned int v12 = 0;
    uint64_t v13 = 0;
    uint64_t v3 = 0;
  }
  if (v7 == 1700998451 || !*((unsigned char *)this + 332))
  {
    uint64_t v3 = ConvertEAC3HeaderToEAC3MP4Cookie(a3, a2, &(*v11)[v13], &v19);
    if (v3) {
      goto LABEL_18;
    }
LABEL_24:
    int v15 = v19 + v12;
    *((_DWORD *)this + 32) = v19 + v12;
    if (kASSubSytemEC3)
    {
      int v16 = *(NSObject **)kASSubSytemEC3;
      if (!*(void *)kASSubSytemEC3) {
        return v3;
      }
    }
    else
    {
      int v16 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      CAFormatter::CAFormatter((CAFormatter *)&v18, *v11, v15);
      *(_DWORD *)buf = 136315906;
      int v22 = "EC3AudioStream.cpp";
      __int16 v23 = 1024;
      int v24 = 630;
      __int16 v25 = 1024;
      int v26 = v15;
      __int16 v27 = 2080;
      uint64_t v28 = v18;
      _os_log_impl(&dword_18FEC0000, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d magic cookie, std::string::size_type size = %d { %s }", buf, 0x22u);
      if (v18) {
        free(v18);
      }
    }
    return v3;
  }
  unsigned int v19 = 0;
  if (!v3) {
    goto LABEL_24;
  }
LABEL_18:
  if (*v11)
  {
    free(*v11);
    *int v11 = 0;
  }
  *((_DWORD *)this + 32) = 0;
  if (kASSubSytemEC3)
  {
    size_t v14 = *(NSObject **)kASSubSytemEC3;
    if (!*(void *)kASSubSytemEC3) {
      return v3;
    }
  }
  else
  {
    size_t v14 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    int v22 = "EC3AudioStream.cpp";
    __int16 v23 = 1024;
    int v24 = 624;
    __int16 v25 = 1024;
    int v26 = v3;
    _os_log_impl(&dword_18FEC0000, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d got a bad magic cookie, err = %d!", buf, 0x18u);
  }
  return v3;
}

void *CADeprecated::CAAutoFree<unsigned char>::reallocBytes(void **a1, size_t a2)
{
  BOOL result = reallocf(*a1, a2);
  if (a2 && !result)
  {
    exceptiouint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v6 = std::bad_alloc::bad_alloc(exception);
  }
  *a1 = result;
  return result;
}

uint64_t EC3AudioStream::GeneratePackets(EC3AudioStream *this)
{
  uint64_t v204 = *MEMORY[0x1E4F143B8];
  if (kASSubSytemEC3)
  {
    unsigned int v2 = *(NSObject **)kASSubSytemEC3;
    if (!*(void *)kASSubSytemEC3) {
      goto LABEL_7;
    }
  }
  else
  {
    unsigned int v2 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    uint64_t v193 = "EC3AudioStream.cpp";
    __int16 v194 = 1024;
    int v195 = 652;
    __int16 v196 = 2048;
    *(void *)float v197 = this;
    _os_log_impl(&dword_18FEC0000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d ->EC3AudioStream(%p)::GeneratePackets", buf, 0x1Cu);
  }
LABEL_7:
  if (*((unsigned char *)this + 332)) {
    int v3 = 10;
  }
  else {
    int v3 = 12;
  }
  unsigned int v188 = v3;
  int v4 = *((_DWORD *)this + 59);
  if (v4 > 668)
  {
    switch(v4)
    {
      case 669:
        goto LABEL_52;
      case 792:
        unsigned int v8 = *((_DWORD *)this + 64);
        BOOL v9 = (unsigned __int8 *)*((void *)this + 33);
        goto LABEL_142;
      case 984:
        int v5 = *((_DWORD *)this + 64);
        uint64_t v6 = (unsigned __int8 *)*((void *)this + 33);
LABEL_301:
        *(_DWORD *)buf = v5;
        StreamBuffer::Copy((void *)(*((void *)this + 1) + 72), (unsigned int *)buf, v6);
        int v146 = *(_DWORD *)buf;
        int v147 = *((_DWORD *)this + 64);
        *((void *)this + 33) += *(unsigned int *)buf;
        int v148 = v147 - v146;
        *((_DWORD *)this + 64) = v148;
        if (!v148)
        {
          unsigned int v149 = *((_DWORD *)this + 107);
          if (*((_DWORD *)this + 122) < v149)
          {
            CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)this + 60, *((unsigned int *)this + 107));
            *((_DWORD *)this + 122) = v149;
          }
          *((_DWORD *)this + 123) = v149;
          goto LABEL_20;
        }
        uint64_t result = 0;
        int v164 = 984;
        goto LABEL_389;
    }
    goto LABEL_17;
  }
  if (v4 == -1) {
    return 0;
  }
  if (!v4)
  {
    while (1)
    {
LABEL_20:
      size_t v10 = (NSObject **)kASSubSytemEC3;
      int v11 = MEMORY[0x1E4F14500];
      if (!kASSubSytemEC3 || (int v11 = *(NSObject **)kASSubSytemEC3) != 0)
      {
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v12 = *(void *)(*((void *)this + 1) + 88);
          *(_DWORD *)buf = 136315650;
          uint64_t v193 = "EC3AudioStream.cpp";
          __int16 v194 = 1024;
          int v195 = 663;
          __int16 v196 = 2048;
          *(void *)float v197 = v12;
          _os_log_impl(&dword_18FEC0000, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d buffer file position %qd", buf, 0x1Cu);
          size_t v10 = (NSObject **)kASSubSytemEC3;
        }
        uint64_t v13 = MEMORY[0x1E4F14500];
        if (!v10 || (uint64_t v13 = *v10) != 0)
        {
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v14 = *(void *)(*((void *)this + 1) + 96);
            *(_DWORD *)buf = 136315650;
            uint64_t v193 = "EC3AudioStream.cpp";
            __int16 v194 = 1024;
            int v195 = 664;
            __int16 v196 = 2048;
            *(void *)float v197 = v14;
            _os_log_impl(&dword_18FEC0000, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d current file position %qd", buf, 0x1Cu);
            size_t v10 = (NSObject **)kASSubSytemEC3;
          }
          int v15 = MEMORY[0x1E4F14500];
          if (!v10 || (int v15 = *v10) != 0)
          {
            if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v16 = *((void *)this + 1);
              uint64_t v17 = *(unsigned int *)(v16 + 80);
              uint64_t v19 = *(void *)(v16 + 88);
              uint64_t v18 = *(void *)(v16 + 96);
              if (v18 >= v19 + v17 || v18 < v19) {
                int v21 = v17;
              }
              else {
                int v21 = v18 - v19;
              }
              *(_DWORD *)buf = 136315650;
              uint64_t v193 = "EC3AudioStream.cpp";
              __int16 v194 = 1024;
              int v195 = 665;
              __int16 v196 = 1024;
              *(_DWORD *)float v197 = v21;
              _os_log_impl(&dword_18FEC0000, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d current offset %d", buf, 0x18u);
              size_t v10 = (NSObject **)kASSubSytemEC3;
            }
            int v22 = MEMORY[0x1E4F14500];
            if (!v10 || (int v22 = *v10) != 0)
            {
              if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v23 = *((void *)this + 1);
                uint64_t v24 = *(unsigned int *)(v23 + 80);
                uint64_t v26 = *(void *)(v23 + 88);
                uint64_t v25 = *(void *)(v23 + 96);
                uint64_t v27 = v26 + v24;
                if (v27 <= v25 || v25 < v26) {
                  int v29 = 0;
                }
                else {
                  int v29 = v27 - v25;
                }
                *(_DWORD *)buf = 136315650;
                uint64_t v193 = "EC3AudioStream.cpp";
                __int16 v194 = 1024;
                int v195 = 666;
                __int16 v196 = 1024;
                *(_DWORD *)float v197 = v29;
                _os_log_impl(&dword_18FEC0000, v22, OS_LOG_TYPE_DEBUG, "%25s:%-5d bytes available %d", buf, 0x18u);
                size_t v10 = (NSObject **)kASSubSytemEC3;
              }
              BOOL v30 = MEMORY[0x1E4F14500];
              if ((!v10 || (BOOL v30 = *v10) != 0) && os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136315394;
                uint64_t v193 = "EC3AudioStream.cpp";
                __int16 v194 = 1024;
                int v195 = 667;
                _os_log_impl(&dword_18FEC0000, v30, OS_LOG_TYPE_DEBUG, "%25s:%-5d >>STREAM_WAIT_FOR_DATA  B", buf, 0x12u);
              }
            }
          }
        }
      }
LABEL_52:
      uint64_t v31 = *((void *)this + 1);
      uint64_t v32 = *(void *)(v31 + 88);
      uint64_t v33 = *(void *)(v31 + 96);
      uint64_t v34 = v32 + *(unsigned int *)(v31 + 80);
      BOOL v35 = v33 < v32 || v34 <= v33;
      if (v35 || (unsigned int v36 = v34 - v33) == 0)
      {
        uint64_t result = 0;
        int v164 = 669;
        goto LABEL_389;
      }
      if (*((unsigned char *)this + 352))
      {
        uint64_t v37 = *((unsigned int *)this + 84);
        uint64_t v38 = (int)v37;
        size_t v39 = 10 - (int)v37 >= v36 ? v36 : (10 - v37);
        uint64_t v40 = (_WORD *)((char *)this + 340);
        memcpy((char *)this + v37 + 340, (const void *)(*(void *)(v31 + 72) + (v33 - v32)), v39);
        unsigned int v41 = *((_DWORD *)this + 84) + v39;
        *((_DWORD *)this + 84) = v41;
        if (v41 >= 3)
        {
          BOOL v42 = *v40 == 17481 && *((unsigned char *)this + 342) == 51;
          if (!v42 && (*v40 != 16724 || *((unsigned char *)this + 342) != 71)) {
            goto LABEL_86;
          }
          if (v41 != 10)
          {
            if (v41 < 0xB) {
              goto LABEL_87;
            }
LABEL_86:
            *((unsigned char *)this + 352) = 0;
            *((_DWORD *)this + 84) = 0;
            goto LABEL_87;
          }
          int v44 = ID3Size(0xAu, (const unsigned __int8 *)this + 340, (int *)&v190);
          if (v44)
          {
            int v45 = v44;
            (*(void (**)(EC3AudioStream *))(*(void *)this + 16))(this);
            *((_DWORD *)this + 91) = -(int)v38;
            uint64_t v46 = *((void *)this + 1);
            *((void *)this + 46) = *(void *)(v46 + 88) - v38;
            int v47 = *((char *)this + 376);
            if (v47 < 0)
            {
              int v47 = 0;
              uint64_t v48 = *(void *)(v46 + 48);
              uint64_t v49 = *(void *)(v46 + 56) - v48;
              if (v49)
              {
                unint64_t v50 = 0;
                unint64_t v51 = v49 >> 2;
                unsigned int v52 = 1;
                do
                {
                  BOOL v42 = *(_DWORD *)(v48 + 4 * v50) == 1768174437;
                  int v47 = v42;
                  unint64_t v50 = v52++;
                }
                while (!v42 && v51 > v50);
              }
              *((unsigned char *)this + 376) = v47;
            }
            if (v47)
            {
              *(_DWORD *)buf = 0;
              float64x2_t v54 = *(void (**)(void, void, uint64_t, uint8_t *))(v46 + 24);
              if (v54)
              {
                v54(*(void *)(v46 + 40), *(unsigned int *)(v46 + 8), 1768174437, buf);
                uint64_t v46 = *((void *)this + 1);
              }
            }
            *(void *)(v46 + 96) += (v39 + v45 - 10);
            *((unsigned char *)this + 352) = 0;
          }
        }
      }
LABEL_87:
      if (*((unsigned char *)this + 333))
      {
        LODWORD(v55) = 0;
        uint64_t v56 = *((unsigned int *)this + 84);
        unsigned int v57 = v188 - v56;
        if (v188 > v56)
        {
          uint64_t v58 = 0;
          uint64_t v59 = *((void *)this + 1);
          uint64_t v60 = *(void *)(v59 + 88);
          uint64_t v61 = *(void *)(v59 + 96);
          uint64_t v62 = v60 + *(unsigned int *)(v59 + 80);
          BOOL v64 = v61 < v60 || v62 <= v61;
          unsigned int v65 = v62 - v61;
          if (v64) {
            unsigned int v66 = 0;
          }
          else {
            unsigned int v66 = v65;
          }
          if (v66 >= v57) {
            size_t v55 = v57;
          }
          else {
            size_t v55 = v66;
          }
          if (!v64 && v65) {
            uint64_t v58 = (const void *)(*(void *)(v59 + 72) + (v61 - v60));
          }
          memcpy((char *)this + v56 + 340, v58, v55);
          LODWORD(v56) = *((_DWORD *)this + 84) + v55;
          *((_DWORD *)this + 84) = v56;
        }
        int v67 = *((unsigned __int8 *)this + 340);
        if (v67 == 11)
        {
          if (*((unsigned char *)this + 341) != 119) {
            goto LABEL_108;
          }
        }
        else if (v67 != 119 || *((unsigned char *)this + 341) != 11)
        {
LABEL_108:
          if (v56 >= 2)
          {
LABEL_135:
            *((unsigned char *)this + 333) = 0;
            *((_DWORD *)this + 84) = 0;
            goto LABEL_136;
          }
          goto LABEL_112;
        }
        if (v56 >= v188)
        {
          float v190 = 0;
          *(void *)float v191 = 0;
          int v68 = EC3AudioStream::ParseOneCycle(this, 0xCu, (char *)this + 340, &v191[1], v191, (const unsigned __int8 **)&v190);
          if (v68)
          {
            if (v68 == 1717662832) {
              goto LABEL_387;
            }
          }
          else
          {
            float64x2_t v69 = v190;
            if (v190)
            {
              UInt32 v70 = v191[0];
              if (v191[0])
              {
                if (*((unsigned char *)this + 438)) {
                  EC3AudioStream::NotifyFormatChange(this, (const AudioStreamBasicDescription *)this + 11);
                }
                if (!*((_DWORD *)this + 50))
                {
                  *((_DWORD *)this + 50) = 1;
                  CADeprecated::CAAutoFree<AudioStreamPacketDescription>::reallocItems((void **)this + 24, 1);
                }
                uint64_t v71 = (AudioStreamPacketDescription *)*((void *)this + 24);
                v71->mStartOffset = 0;
                v71->mVariableFramesInPacket = 0;
                v71->mDataByteSize = v70;
                unint64_t v72 = MEMORY[0x1E4F14500];
                if ((!kASSubSytemEC3 || (unint64_t v72 = *(NSObject **)kASSubSytemEC3) != 0)
                  && os_log_type_enabled(v72, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 136315906;
                  uint64_t v193 = "EC3AudioStream.cpp";
                  __int16 v194 = 1024;
                  int v195 = 752;
                  __int16 v196 = 2048;
                  *(void *)float v197 = 0;
                  *(_WORD *)&v197[8] = 1024;
                  *(_DWORD *)float v198 = v70;
                  _os_log_impl(&dword_18FEC0000, v72, OS_LOG_TYPE_DEBUG, "%25s:%-5d found packet: offset = %lld, std::string::size_type size = %d", buf, 0x22u);
                  uint64_t v71 = (AudioStreamPacketDescription *)*((void *)this + 24);
                }
                AudioFileStreamWrapper::CallPacketsProc(*((AudioFileStreamWrapper **)this + 1), v70, 1u, v69, v71, 1);
                ++*((void *)this + 23);
                *((unsigned char *)this + 438) = 0;
                *((void *)this + 53) = 0;
                *((_DWORD *)this + 108) = 0;
                *((_DWORD *)this + 123) = 0;
                if (!v191[1])
                {
                  int v73 = EC3AudioStream::ParseOneCycle(this, 0xCu, (char *)this + 340, &v191[1], v191, (const unsigned __int8 **)&v190);
                  if (v73)
                  {
                    int v184 = v73;
                    if (kASSubSytemEC3)
                    {
                      float v185 = *(NSObject **)kASSubSytemEC3;
                      if (!*(void *)kASSubSytemEC3)
                      {
LABEL_387:
                        uint64_t result = 1685348671;
                        *((unsigned char *)this + 177) = 1;
                        goto LABEL_388;
                      }
                    }
                    else
                    {
                      float v185 = MEMORY[0x1E4F14500];
                    }
                    if (!os_log_type_enabled(v185, OS_LOG_TYPE_DEBUG)) {
                      goto LABEL_387;
                    }
                    *(_DWORD *)buf = 136315650;
                    uint64_t v193 = "EC3AudioStream.cpp";
                    __int16 v194 = 1024;
                    int v195 = 762;
                    __int16 v196 = 1024;
                    *(_DWORD *)float v197 = v184;
                    unsigned int v181 = "%25s:%-5d ERROR: unexpected failure in ParseOneCycle, err = %d";
                    uint64_t v182 = v185;
                    uint32_t v183 = 24;
                    goto LABEL_386;
                  }
                  unsigned int v74 = v190;
                  unsigned int v75 = v191[0];
                  if (v190 || v191[0])
                  {
                    if (kASSubSytemEC3)
                    {
                      float v186 = *(NSObject **)kASSubSytemEC3;
                      if (!*(void *)kASSubSytemEC3) {
                        goto LABEL_387;
                      }
                    }
                    else
                    {
                      float v186 = MEMORY[0x1E4F14500];
                    }
                    if (!os_log_type_enabled(v186, OS_LOG_TYPE_DEBUG)) {
                      goto LABEL_387;
                    }
                    *(_DWORD *)buf = 136315906;
                    uint64_t v193 = "EC3AudioStream.cpp";
                    __int16 v194 = 1024;
                    int v195 = 766;
                    __int16 v196 = 2048;
                    *(void *)float v197 = v74;
                    *(_WORD *)&v197[8] = 1024;
                    *(_DWORD *)float v198 = v75;
                    unsigned int v181 = "%25s:%-5d ERROR: we should not have a full packet because we just cached a header, outPacketB"
                           "uf = %p, outPacketSize = %d";
                    uint64_t v182 = v186;
                    uint32_t v183 = 34;
                    goto LABEL_386;
                  }
                }
              }
            }
            if (v55 >= v191[1]) {
              uint64_t v76 = v191[1];
            }
            else {
              uint64_t v76 = v55;
            }
            *(void *)(*((void *)this + 1) + 96) += v76;
          }
          goto LABEL_135;
        }
LABEL_112:
        if (v56 < v188) {
          goto LABEL_136;
        }
        goto LABEL_135;
      }
LABEL_136:
      if (*((_DWORD *)this + 106) && (unsigned int v77 = *((_DWORD *)this + 107)) != 0)
      {
        unsigned int v78 = *((_DWORD *)this + 123);
        if (v77 <= v78) {
          goto LABEL_147;
        }
        if (*((_DWORD *)this + 122) < v77)
        {
          CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)this + 60, *((unsigned int *)this + 107));
          *((_DWORD *)this + 122) = v77;
          unsigned int v77 = *((_DWORD *)this + 107);
          unsigned int v78 = *((_DWORD *)this + 123);
        }
        unsigned int v8 = v77 - v78;
        *((_DWORD *)this + 64) = v77 - v78;
        BOOL v9 = (unsigned __int8 *)(*((void *)this + 60) + v78);
        *((void *)this + 33) = v9;
LABEL_142:
        *(_DWORD *)buf = v8;
        StreamBuffer::Copy((void *)(*((void *)this + 1) + 72), (unsigned int *)buf, v9);
        int v79 = *(_DWORD *)buf;
        int v80 = *((_DWORD *)this + 64);
        *((void *)this + 33) += *(unsigned int *)buf;
        int v81 = v80 - v79;
        *((_DWORD *)this + 64) = v81;
        if (v81)
        {
          uint64_t result = 0;
          int v164 = 792;
          goto LABEL_389;
        }
        unsigned int v82 = *((_DWORD *)this + 107);
        if (*((_DWORD *)this + 122) < v82)
        {
          CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)this + 60, *((unsigned int *)this + 107));
          *((_DWORD *)this + 122) = v82;
        }
      }
      else
      {
        unsigned int v82 = 0;
        *((unsigned char *)this + 438) = 0;
        *((void *)this + 53) = 0;
        *((_DWORD *)this + 108) = 0;
      }
      *((_DWORD *)this + 123) = v82;
LABEL_147:
      unsigned int v83 = 0;
      uint64_t v84 = *((void *)this + 1);
      uint64_t v85 = *(void *)(v84 + 88);
      uint64_t v86 = *(void *)(v84 + 96);
      uint64_t v87 = v85 + *(unsigned int *)(v84 + 80);
      BOOL v88 = v86 < v85 || v87 <= v86;
      char v89 = v88;
      int v90 = v87 - v86;
      if (!v88 && v87 != v86) {
        unsigned int v83 = (char *)(*(void *)(v84 + 72) + (v86 - v85));
      }
      if (!v90) {
        char v89 = 1;
      }
      if ((v89 & 1) == 0)
      {
        v191[1] = 0;
        if ((int)v188 <= v90)
        {
          unsigned int v91 = 0;
          UInt32 v92 = 0;
          float v187 = (void **)((char *)this + 192);
          while (1)
          {
            while (1)
            {
              if (!EC3AudioStream::ScanForSyncWord((uint64_t)this, v90, (uint64_t)v83, (int *)&v191[1]))
              {
                if (v91)
                {
                  AudioFileStreamWrapper::CallPacketsProc(*((AudioFileStreamWrapper **)this + 1), v92, v91, v83, *((AudioStreamPacketDescription **)this + 24), 1);
                  *(void *)(*((void *)this + 1) + 96) += v92;
                  v191[1] -= v92;
                  *((void *)this + 23) += v91;
                }
                if (kASSubSytemEC3)
                {
                  float64x2_t v139 = *(NSObject **)kASSubSytemEC3;
                  unsigned int v140 = v191[1];
                  if (!*(void *)kASSubSytemEC3)
                  {
LABEL_290:
                    *(void *)(*((void *)this + 1) + 96) += v140;
                    v191[1] = 0;
                    goto LABEL_291;
                  }
                }
                else
                {
                  float64x2_t v139 = MEMORY[0x1E4F14500];
                  unsigned int v140 = v191[1];
                }
                if (os_log_type_enabled(v139, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 136316162;
                  uint64_t v193 = "EC3AudioStream.cpp";
                  __int16 v194 = 1024;
                  int v195 = 828;
                  __int16 v196 = 1024;
                  *(_DWORD *)float v197 = v140;
                  *(_WORD *)&v197[4] = 1024;
                  *(_DWORD *)&v197[6] = v90;
                  *(_WORD *)float v198 = 1024;
                  *(_DWORD *)&v198[2] = v140;
                  _os_log_impl(&dword_18FEC0000, v139, OS_LOG_TYPE_DEBUG, "%25s:%-5d did not find sync word, index = %d, std::string::size_type size = %d, skipping to %d", buf, 0x24u);
                }
                goto LABEL_290;
              }
              if (kASSubSytemEC3)
              {
                if (*(unsigned char *)(kASSubSytemEC3 + 8))
                {
                  char v93 = *(NSObject **)kASSubSytemEC3;
                  if (*(void *)kASSubSytemEC3)
                  {
                    if (os_log_type_enabled(*(os_log_t *)kASSubSytemEC3, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)buf = 136316162;
                      uint64_t v193 = "EC3AudioStream.cpp";
                      __int16 v194 = 1024;
                      int v195 = 838;
                      __int16 v196 = 1024;
                      *(_DWORD *)float v197 = v191[1];
                      *(_WORD *)&v197[4] = 1024;
                      *(_DWORD *)&v197[6] = v90;
                      *(_WORD *)float v198 = 1024;
                      *(_DWORD *)&v198[2] = v90 - v191[1];
                      _os_log_impl(&dword_18FEC0000, v93, OS_LOG_TYPE_DEBUG, "%25s:%-5d --> searching for packet at index %d, size %d, remaining %d", buf, 0x24u);
                    }
                  }
                }
              }
              v191[0] = 0;
              unsigned int v189 = 0;
              float v190 = 0;
              BOOL v94 = *((_DWORD *)this + 106) && *((_DWORD *)this + 107) != 0;
              uint64_t v95 = &v83[v191[1]];
              int v96 = EC3AudioStream::ParseOneCycle(this, v90 - v191[1], v95, v191, &v189, (const unsigned __int8 **)&v190);
              if (!v96) {
                break;
              }
              int v97 = v96;
              if (v96 == 1717662832) {
                goto LABEL_387;
              }
              uint64_t v98 = *((void *)this + 1);
              if (v91)
              {
                AudioFileStreamWrapper::CallPacketsProc(*((AudioFileStreamWrapper **)this + 1), v92, v91, v83, *((AudioStreamPacketDescription **)this + 24), 1);
                uint64_t v98 = *((void *)this + 1);
                uint64_t v99 = *(void *)(v98 + 96) + v92;
                *(void *)(v98 + 96) = v99;
                unsigned int v100 = v191[1] - v92;
                v191[1] -= v92;
                *((void *)this + 23) += v91;
                UInt32 v92 = 0;
              }
              else
              {
                unsigned int v100 = v191[1];
                uint64_t v99 = *(void *)(v98 + 96);
              }
              unsigned int v102 = v191[0];
              if (v191[0] <= 1) {
                unsigned int v102 = 1;
              }
              uint64_t v103 = v100 + v102;
              uint64_t v104 = v99 + v103;
              *(void *)(v98 + 96) = v99 + v103;
              if (!kASSubSytemEC3)
              {
                int v105 = MEMORY[0x1E4F14500];
LABEL_190:
                if (os_log_type_enabled(v105, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v106 = *(void *)(v98 + 88);
                  uint64_t v107 = v106 + *(unsigned int *)(v98 + 80);
                  if (v107 <= v104 || v104 < v106) {
                    int v109 = 0;
                  }
                  else {
                    int v109 = v107 - v104;
                  }
                  *(_DWORD *)buf = 136316162;
                  uint64_t v193 = "EC3AudioStream.cpp";
                  __int16 v194 = 1024;
                  int v195 = 868;
                  __int16 v196 = 1024;
                  *(_DWORD *)float v197 = v97;
                  *(_WORD *)&v197[4] = 1024;
                  *(_DWORD *)&v197[6] = v103;
                  *(_WORD *)float v198 = 1024;
                  *(_DWORD *)&v198[2] = v109;
                  _os_log_impl(&dword_18FEC0000, v105, OS_LOG_TYPE_DEBUG, "%25s:%-5d Error: searching for packet (%d), skipping to index %d, remaining %d", buf, 0x24u);
                  uint64_t v98 = *((void *)this + 1);
                  uint64_t v104 = *(void *)(v98 + 96);
                }
                goto LABEL_198;
              }
              int v105 = *(NSObject **)kASSubSytemEC3;
              if (*(void *)kASSubSytemEC3) {
                goto LABEL_190;
              }
LABEL_198:
              unsigned int v83 = 0;
              uint64_t v110 = *(void *)(v98 + 88);
              uint64_t v111 = v110 + *(unsigned int *)(v98 + 80);
              BOOL v112 = v104 < v110 || v111 <= v104;
              int v113 = v112;
              int v114 = v111 - v104;
              if (!v112 && v114) {
                unsigned int v83 = (char *)(*(void *)(v98 + 72) + (v104 - v110));
              }
              unsigned int v91 = 0;
              if (v113) {
                int v90 = 0;
              }
              else {
                int v90 = v114;
              }
              v191[1] = 0;
              if (v90 < (int)v188) {
                goto LABEL_291;
              }
            }
            if (v190 && v189) {
              break;
            }
            if (*((_DWORD *)this + 106) && *((_DWORD *)this + 107))
            {
              unint64_t v171 = (AudioFileStreamWrapper *)*((void *)this + 1);
              if (v91)
              {
                AudioFileStreamWrapper::CallPacketsProc(v171, v92, v91, v83, *((AudioStreamPacketDescription **)this + 24), 1);
                unint64_t v171 = (AudioFileStreamWrapper *)*((void *)this + 1);
                uint64_t v172 = *((void *)v171 + 12) + v92;
                *((void *)v171 + 12) = v172;
                unsigned int v173 = v191[1] - v92;
                v191[1] -= v92;
                *((void *)this + 23) += v91;
              }
              else
              {
                unsigned int v173 = v191[1];
                uint64_t v172 = *((void *)v171 + 12);
              }
              *((void *)v171 + 12) = v172 + v173 + v191[0];
              goto LABEL_291;
            }
LABEL_255:
            unint64_t v132 = (NSObject **)kASSubSytemEC3;
            if (kASSubSytemEC3)
            {
              uint64_t v133 = *(NSObject **)kASSubSytemEC3;
              if (!*(void *)kASSubSytemEC3) {
                goto LABEL_279;
              }
            }
            else
            {
              uint64_t v133 = MEMORY[0x1E4F14500];
            }
            if (os_log_type_enabled(v133, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315650;
              uint64_t v193 = "EC3AudioStream.cpp";
              __int16 v194 = 1024;
              int v195 = 959;
              __int16 v196 = 1024;
              *(_DWORD *)float v197 = v191[1];
              _os_log_impl(&dword_18FEC0000, v133, OS_LOG_TYPE_DEBUG, "%25s:%-5d ---index   %d", buf, 0x18u);
              unint64_t v132 = (NSObject **)kASSubSytemEC3;
            }
            if (v132)
            {
              int32x2_t v134 = *v132;
              if (!*v132) {
                goto LABEL_279;
              }
            }
            else
            {
              int32x2_t v134 = MEMORY[0x1E4F14500];
            }
            if (os_log_type_enabled(v134, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v135 = *((void *)this + 3);
              *(_DWORD *)buf = 136315650;
              uint64_t v193 = "EC3AudioStream.cpp";
              __int16 v194 = 1024;
              int v195 = 961;
              __int16 v196 = 2048;
              *(void *)float v197 = v135;
              _os_log_impl(&dword_18FEC0000, v134, OS_LOG_TYPE_DEBUG, "%25s:%-5d    srate %g", buf, 0x1Cu);
              unint64_t v132 = (NSObject **)kASSubSytemEC3;
            }
            if (v132)
            {
              float64x2_t v136 = *v132;
              if (!*v132) {
                goto LABEL_279;
              }
            }
            else
            {
              float64x2_t v136 = MEMORY[0x1E4F14500];
            }
            if (os_log_type_enabled(v136, OS_LOG_TYPE_DEBUG))
            {
              int v137 = *((_DWORD *)this + 11);
              *(_DWORD *)buf = 136315650;
              uint64_t v193 = "EC3AudioStream.cpp";
              __int16 v194 = 1024;
              int v195 = 962;
              __int16 v196 = 1024;
              *(_DWORD *)float v197 = v137;
              _os_log_impl(&dword_18FEC0000, v136, OS_LOG_TYPE_DEBUG, "%25s:%-5d    framesPerPacket %d", buf, 0x18u);
              unint64_t v132 = (NSObject **)kASSubSytemEC3;
            }
            if (!v132)
            {
              uint64_t v138 = MEMORY[0x1E4F14500];
LABEL_277:
              if (os_log_type_enabled(v138, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136315650;
                uint64_t v193 = "EC3AudioStream.cpp";
                __int16 v194 = 1024;
                int v195 = 963;
                __int16 v196 = 1024;
                *(_DWORD *)float v197 = v92;
                _os_log_impl(&dword_18FEC0000, v138, OS_LOG_TYPE_DEBUG, "%25s:%-5d    numberOfBytes    %d", buf, 0x18u);
              }
              goto LABEL_279;
            }
            uint64_t v138 = *v132;
            if (*v132) {
              goto LABEL_277;
            }
LABEL_279:
            if ((signed int)(v90 - v191[1]) < (int)v188)
            {
              if (v91)
              {
                AudioFileStreamWrapper::CallPacketsProc(*((AudioFileStreamWrapper **)this + 1), v92, v91, v83, *((AudioStreamPacketDescription **)this + 24), 1);
                *(void *)(*((void *)this + 1) + 96) += v92;
                *((void *)this + 23) += v91;
              }
              goto LABEL_291;
            }
          }
          if (*((unsigned char *)this + 438))
          {
            if (kASSubSytemEC3)
            {
              unsigned int v101 = *(NSObject **)kASSubSytemEC3;
              if (!*(void *)kASSubSytemEC3) {
                goto LABEL_215;
              }
            }
            else
            {
              unsigned int v101 = MEMORY[0x1E4F14500];
            }
            if (os_log_type_enabled(v101, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315650;
              uint64_t v193 = "EC3AudioStream.cpp";
              __int16 v194 = 1024;
              int v195 = 882;
              __int16 v196 = 1024;
              *(_DWORD *)float v197 = v91;
              _os_log_impl(&dword_18FEC0000, v101, OS_LOG_TYPE_DEBUG, "%25s:%-5d FORMAT CHANGED  np %d", buf, 0x18u);
            }
LABEL_215:
            if (v91)
            {
              AudioFileStreamWrapper::CallPacketsProc(*((AudioFileStreamWrapper **)this + 1), v92, v91, v83, *((AudioStreamPacketDescription **)this + 24), 1);
              unsigned int v83 = 0;
              uint64_t v115 = *((void *)this + 1);
              uint64_t v116 = *(void *)(v115 + 96) + v92;
              *(void *)(v115 + 96) = v116;
              v191[1] -= v92;
              *((void *)this + 23) += v91;
              uint64_t v117 = *(void *)(v115 + 88);
              uint64_t v118 = v117 + *(unsigned int *)(v115 + 80);
              BOOL v119 = v116 < v117 || v118 <= v116;
              int v120 = v119;
              int v121 = v118 - v116;
              if (!v119 && v121) {
                unsigned int v83 = (char *)(*(void *)(v115 + 72) + (v116 - v117));
              }
              if (v120) {
                int v90 = 0;
              }
              else {
                int v90 = v121;
              }
            }
            EC3AudioStream::NotifyFormatChange(this, (const AudioStreamBasicDescription *)this + 11);
            unsigned int v91 = 0;
            if (*((unsigned char *)this + 438)) {
              goto LABEL_404;
            }
          }
          if (!*((void *)this + 15) || !*((_DWORD *)this + 32))
          {
LABEL_404:
            if (!EC3AudioStream::ConstructMagicCookie(this, v189, v190))
            {
              uint64_t v122 = *((void *)this + 1);
              *(_DWORD *)buf = 1;
              *(unsigned char *)(v122 + 108) = 1;
              unint64_t v123 = *(void (**)(void, void, uint64_t, uint8_t *))(v122 + 24);
              if (v123) {
                v123(*(void *)(v122 + 40), *(unsigned int *)(v122 + 8), 1835493731, buf);
              }
            }
          }
          if (v94)
          {
            if (!*((_DWORD *)this + 50))
            {
              *((_DWORD *)this + 50) = 1;
              CADeprecated::CAAutoFree<AudioStreamPacketDescription>::reallocItems(v187, 1);
            }
            UInt32 v124 = v189;
            int v125 = (AudioStreamPacketDescription *)*v187;
            v125->mStartOffset = 0;
            v125->mVariableFramesInPacket = 0;
            v125->mDataByteSize = v124;
            if (kASSubSytemEC3)
            {
              uint64_t v126 = *(NSObject **)kASSubSytemEC3;
              if (!*(void *)kASSubSytemEC3) {
                goto LABEL_249;
              }
            }
            else
            {
              uint64_t v126 = MEMORY[0x1E4F14500];
            }
            if (os_log_type_enabled(v126, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315906;
              uint64_t v193 = "EC3AudioStream.cpp";
              __int16 v194 = 1024;
              int v195 = 915;
              __int16 v196 = 2048;
              *(void *)float v197 = 0;
              *(_WORD *)&v197[8] = 1024;
              *(_DWORD *)float v198 = v124;
              _os_log_impl(&dword_18FEC0000, v126, OS_LOG_TYPE_DEBUG, "%25s:%-5d found packet: offset = %lld, std::string::size_type size = %d", buf, 0x22u);
              int v125 = (AudioStreamPacketDescription *)*v187;
            }
LABEL_249:
            AudioFileStreamWrapper::CallPacketsProc(*((AudioFileStreamWrapper **)this + 1), v124, 1u, v190, v125, 1);
            ++*((void *)this + 23);
            LODWORD(v128) = v191[1];
LABEL_254:
            *((unsigned char *)this + 438) = 0;
            *((void *)this + 53) = 0;
            *((_DWORD *)this + 108) = 0;
            *((_DWORD *)this + 123) = 0;
            UInt32 v92 = v191[0] + v128;
            v191[1] = v191[0] + v128;
            goto LABEL_255;
          }
          if (v190 != (unsigned __int8 *)v95)
          {
            if (kASSubSytemEC3)
            {
              float64x2_t v174 = *(NSObject **)kASSubSytemEC3;
              if (!*(void *)kASSubSytemEC3) {
                goto LABEL_387;
              }
            }
            else
            {
              float64x2_t v174 = MEMORY[0x1E4F14500];
            }
            if (!os_log_type_enabled(v174, OS_LOG_TYPE_DEBUG)) {
              goto LABEL_387;
            }
            *(_DWORD *)buf = 136315394;
            uint64_t v193 = "EC3AudioStream.cpp";
            __int16 v194 = 1024;
            int v195 = 923;
            unsigned int v181 = "%25s:%-5d expected a full packet in the stream buffer";
            uint64_t v182 = v174;
            uint32_t v183 = 18;
LABEL_386:
            _os_log_impl(&dword_18FEC0000, v182, OS_LOG_TYPE_DEBUG, v181, buf, v183);
            goto LABEL_387;
          }
          if (*((_DWORD *)this + 50) < v91 + 1)
          {
            uint64_t v127 = (1 << -__clz(v91));
            *((_DWORD *)this + 50) = v127;
            CADeprecated::CAAutoFree<AudioStreamPacketDescription>::reallocItems(v187, v127);
          }
          uint64_t v128 = v191[1];
          unsigned int v129 = v189;
          uint64_t v130 = (uint64_t)*v187 + 16 * v91;
          *(void *)uint64_t v130 = v191[1];
          *(_DWORD *)(v130 + 8) = 0;
          *(_DWORD *)(v130 + 12) = v129;
          if (kASSubSytemEC3)
          {
            uint64_t v131 = *(NSObject **)kASSubSytemEC3;
            if (!*(void *)kASSubSytemEC3)
            {
LABEL_253:
              ++v91;
              goto LABEL_254;
            }
          }
          else
          {
            uint64_t v131 = MEMORY[0x1E4F14500];
          }
          if (os_log_type_enabled(v131, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315906;
            uint64_t v193 = "EC3AudioStream.cpp";
            __int16 v194 = 1024;
            int v195 = 931;
            __int16 v196 = 2048;
            *(void *)float v197 = v128;
            *(_WORD *)&v197[8] = 1024;
            *(_DWORD *)float v198 = v129;
            _os_log_impl(&dword_18FEC0000, v131, OS_LOG_TYPE_DEBUG, "%25s:%-5d found packet: offset = %lld, std::string::size_type size = %d", buf, 0x22u);
          }
          goto LABEL_253;
        }
      }
LABEL_291:
      if (*((_DWORD *)this + 106))
      {
        unsigned int v141 = *((_DWORD *)this + 107);
        if (v141)
        {
          unsigned int v142 = *((_DWORD *)this + 123);
          unsigned int v143 = v141 - v142;
          if (v141 > v142)
          {
            unsigned int v144 = MEMORY[0x1E4F14500];
            if ((!kASSubSytemEC3 || (unsigned int v144 = *(NSObject **)kASSubSytemEC3) != 0)
              && os_log_type_enabled(v144, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315906;
              uint64_t v193 = "EC3AudioStream.cpp";
              __int16 v194 = 1024;
              int v195 = 981;
              __int16 v196 = 1024;
              *(_DWORD *)float v197 = v143;
              *(_WORD *)&v197[4] = 1024;
              *(_DWORD *)&v197[6] = v141;
              _os_log_impl(&dword_18FEC0000, v144, OS_LOG_TYPE_DEBUG, "%25s:%-5d reading %d bytes into partial packet data, total std::string::size_type size = %d", buf, 0x1Eu);
              unsigned int v141 = *((_DWORD *)this + 107);
            }
            if (*((_DWORD *)this + 122) < v141)
            {
              CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)this + 60, v141);
              *((_DWORD *)this + 122) = v141;
              unsigned int v141 = *((_DWORD *)this + 107);
            }
            uint64_t v145 = *((unsigned int *)this + 123);
            int v5 = v141 - v145;
            *((_DWORD *)this + 64) = v141 - v145;
            uint64_t v6 = (unsigned __int8 *)(*((void *)this + 60) + v145);
            *((void *)this + 33) = v6;
            goto LABEL_301;
          }
        }
      }
      uint64_t v150 = *((void *)this + 1);
      uint64_t v151 = *(void *)(v150 + 88);
      uint64_t v152 = *(void *)(v150 + 96);
      uint64_t v153 = v151 + *(unsigned int *)(v150 + 80);
      BOOL v155 = v152 < v151 || v153 <= v152;
      unsigned int v156 = v153 - v152;
      if (v155) {
        size_t v157 = 0;
      }
      else {
        size_t v157 = v156;
      }
      if (v155 || !v156) {
        goto LABEL_369;
      }
      uint64_t v158 = *(void *)(v150 + 72);
      if (!v157 || v158 == 0) {
        goto LABEL_369;
      }
      uint64_t v160 = (unsigned __int8 *)(v158 + (v152 - v151));
      int v161 = *((unsigned __int8 *)this + 333);
      if (!*((unsigned char *)this + 333) && v157 < v188)
      {
        int v162 = *v160;
        if (v157 == 1)
        {
          int v161 = v162 == 11 || v162 == 119;
          *((unsigned char *)this + 333) = v161;
          if (v162 != 119 && v162 != 11) {
            goto LABEL_342;
          }
        }
        else
        {
          if (v162 == 11)
          {
            if (v160[1] != 119) {
              goto LABEL_334;
            }
          }
          else if (v162 != 119 || v160[1] != 11)
          {
LABEL_334:
            *((unsigned char *)this + 333) = 0;
            goto LABEL_342;
          }
          int v161 = 1;
          *((unsigned char *)this + 333) = 1;
        }
        *((_DWORD *)this + 84) = v157;
        *((_DWORD *)this + 87) = 0;
        *(void *)((char *)this + 340) = 0;
        memcpy((char *)this + 340, v160, v157);
        *((unsigned char *)this + 352) = 0;
      }
      if (v161) {
        goto LABEL_369;
      }
LABEL_342:
      if (*((unsigned char *)this + 352) || v157 > 0xA) {
        goto LABEL_369;
      }
      if (v157 == 2)
      {
        int v167 = *v160;
        int v168 = 68;
        if (v167 != 73)
        {
          if (v167 != 84)
          {
            *((unsigned char *)this + 352) = 0;
            goto LABEL_369;
          }
          int v168 = 65;
        }
        BOOL v42 = v160[1] == v168;
        *((unsigned char *)this + 352) = v42;
        if (v42) {
          goto LABEL_368;
        }
      }
      else
      {
        if (v157 != 1)
        {
          if (*(_WORD *)v160 == 17481 && v160[2] == 51)
          {
            *((unsigned char *)this + 352) = 1;
          }
          else
          {
            int v170 = *(unsigned __int16 *)v160 ^ 0x4154 | v160[2] ^ 0x47;
            *((unsigned char *)this + 352) = v170 == 0;
            if (v170) {
              goto LABEL_369;
            }
          }
LABEL_368:
          *((_DWORD *)this + 84) = v157;
          *((_WORD *)this + 174) = 0;
          *(void *)((char *)this + 340) = 0;
          memcpy((char *)this + 340, v160, v157);
          goto LABEL_369;
        }
        int v165 = *v160;
        BOOL v166 = v165 == 73;
        if (v165 == 84) {
          BOOL v166 = 1;
        }
        *((unsigned char *)this + 352) = v166;
        if (v165 == 73 || v165 == 84) {
          goto LABEL_368;
        }
      }
LABEL_369:
      float64x2_t v175 = MEMORY[0x1E4F14500];
      if ((!kASSubSytemEC3 || (float64x2_t v175 = *(NSObject **)kASSubSytemEC3) != 0)
        && os_log_type_enabled(v175, OS_LOG_TYPE_DEBUG))
      {
        unsigned int v176 = *((_DWORD *)this + 84);
        int v177 = *((unsigned __int8 *)this + 333);
        int v178 = *((unsigned __int8 *)this + 352);
        if (v157 <= v176) {
          unint64_t v179 = "";
        }
        else {
          unint64_t v179 = "Warning: discarding few bytes:";
        }
        *(_DWORD *)buf = 136316674;
        if (!v157) {
          unint64_t v179 = "";
        }
        uint64_t v193 = "EC3AudioStream.cpp";
        __int16 v194 = 1024;
        int v195 = 1027;
        __int16 v196 = 2080;
        *(void *)float v197 = v179;
        *(_WORD *)&v197[8] = 1024;
        *(_DWORD *)float v198 = v157;
        *(_WORD *)&v198[4] = 1024;
        unsigned int v199 = v176;
        __int16 v200 = 1024;
        int v201 = v177;
        __int16 v202 = 1024;
        int v203 = v178;
        _os_log_impl(&dword_18FEC0000, v175, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s bytes remaining in buffer %d, mPossiblePartialSyncWordBytes %d, mHasPossiblePartialSyncWord %d, mHasPossiblePartialID3Tag %d", buf, 0x34u);
        uint64_t v150 = *((void *)this + 1);
      }
      uint64_t v180 = *(void *)(v150 + 88) + *(unsigned int *)(v150 + 80);
      if (*(void *)(v150 + 96) < v180) {
        *(void *)(v150 + 96) = v180;
      }
    }
  }
LABEL_17:
  uint64_t result = 0;
LABEL_388:
  int v164 = -1;
LABEL_389:
  *((_DWORD *)this + 59) = v164;
  return result;
}

uint64_t EC3AudioStream::NotifyFormatChange(EC3AudioStream *this, const AudioStreamBasicDescription *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (kASSubSytemEC3)
  {
    int v4 = *(NSObject **)kASSubSytemEC3;
    if (!*(void *)kASSubSytemEC3) {
      goto LABEL_15;
    }
  }
  else
  {
    int v4 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    int16x8_t v5 = *(int16x8_t *)((char *)this + 40);
    v16[0] = *(_OWORD *)((char *)this + 24);
    v16[1] = v5;
    uint64_t v17 = *((void *)this + 7);
    uint64_t v6 = v18;
    CA::StreamDescription::AsString((CA::StreamDescription *)v18, v16, *(double *)v16, v5);
    if (v19 < 0) {
      uint64_t v6 = (void **)v18[0];
    }
    int16x8_t v7 = *(int16x8_t *)&a2->mBytesPerPacket;
    v12[0] = *(_OWORD *)&a2->mSampleRate;
    v12[1] = v7;
    uint64_t v13 = *(void *)&a2->mBitsPerChannel;
    CA::StreamDescription::AsString((CA::StreamDescription *)__p, v12, *(double *)v12, v7);
    if (v15 >= 0) {
      unsigned int v8 = __p;
    }
    else {
      unsigned int v8 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136315906;
    int v21 = "EC3AudioStream.cpp";
    __int16 v22 = 1024;
    int v23 = 399;
    __int16 v24 = 2080;
    uint64_t v25 = v6;
    __int16 v26 = 2080;
    uint64_t v27 = v8;
    _os_log_impl(&dword_18FEC0000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d FORMAT CHANGED:\n %s ->\n %s", buf, 0x26u);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    if (v19 < 0) {
      operator delete(v18[0]);
    }
  }
LABEL_15:
  uint64_t result = (*(uint64_t (**)(EC3AudioStream *, const AudioStreamBasicDescription *))(*(void *)this + 56))(this, a2);
  uint64_t v10 = *((void *)this + 1);
  LODWORD(v16[0]) = 1;
  if (!*(unsigned char *)(v10 + 105))
  {
    *(unsigned char *)(v10 + 105) = 1;
    int v11 = *(uint64_t (**)(void, void, uint64_t, _OWORD *))(v10 + 24);
    if (v11) {
      return v11(*(void *)(v10 + 40), *(unsigned int *)(v10 + 8), 1684434292, v16);
    }
  }
  return result;
}

uint64_t EC3AudioStream::ParseHeader(EC3AudioStream *this, uint64_t a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (kASSubSytemEC3)
  {
    int v4 = *(NSObject **)kASSubSytemEC3;
    if (!*(void *)kASSubSytemEC3) {
      goto LABEL_7;
    }
  }
  else
  {
    int v4 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    int v25 = 136315650;
    __int16 v26 = "EC3AudioStream.cpp";
    __int16 v27 = 1024;
    int v28 = 336;
    __int16 v29 = 2048;
    BOOL v30 = this;
    _os_log_impl(&dword_18FEC0000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d EC3AudioStream(%p):ParseHeader", (uint8_t *)&v25, 0x1Cu);
  }
LABEL_7:
  int v5 = *((_DWORD *)this + 59);
  if (v5 != -1)
  {
    if (v5 == 347) {
      goto LABEL_15;
    }
    if (v5)
    {
      int v6 = -1;
LABEL_38:
      *((_DWORD *)this + 59) = v6;
    }
    else
    {
      do
      {
        int16x8_t v7 = MEMORY[0x1E4F14500];
        if ((!kASSubSytemEC3 || (int16x8_t v7 = *(NSObject **)kASSubSytemEC3) != 0)
          && os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
        {
          int v25 = 136315394;
          __int16 v26 = "EC3AudioStream.cpp";
          __int16 v27 = 1024;
          int v28 = 344;
          _os_log_impl(&dword_18FEC0000, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d >>STREAM_WAIT_FOR_DATA  A", (uint8_t *)&v25, 0x12u);
        }
LABEL_15:
        uint64_t v8 = *((void *)this + 1);
        uint64_t v9 = *(unsigned int *)(v8 + 80);
        uint64_t v11 = *(void *)(v8 + 88);
        uint64_t v10 = *(void *)(v8 + 96);
        uint64_t v12 = v11 + v9;
        if (*((unsigned char *)this + 332)) {
          unsigned int v13 = 10;
        }
        else {
          unsigned int v13 = 12;
        }
        BOOL v14 = v10 < v11 || v12 <= v10;
        if (v14 || v13 > (int)v12 - (int)v10)
        {
          int v6 = 347;
          goto LABEL_38;
        }
      }
      while (!EC3AudioStream::Resync(this));
      uint64_t v15 = 0;
      *(void *)a2 = this;
      *(void *)(a2 + 8) = AudioFileStreamObject::GeneratePackets;
      *(void *)(a2 + 16) = 0;
      uint64_t v16 = *((void *)this + 1);
      uint64_t v17 = *(void *)(v16 + 88);
      uint64_t v18 = *(void *)(v16 + 96);
      uint64_t v19 = v17 + *(unsigned int *)(v16 + 80);
      BOOL v20 = v18 < v17 || v19 <= v18;
      int v21 = v20;
      int v22 = v19 - v18;
      if (!v20 && v22) {
        uint64_t v15 = *(void *)(v16 + 72) + (v18 - v17);
      }
      *(void *)(a2 + 32) = v15;
      if (v21) {
        int v23 = 0;
      }
      else {
        int v23 = v22;
      }
      *(_DWORD *)(a2 + 24) = v23;
    }
  }
  return 0;
}

uint64_t EC3AudioStream::GetBitRate(EC3AudioStream *this, unsigned int *a2)
{
  LODWORD(v2) = *((_DWORD *)this + 99);
  if (v2) {
    goto LABEL_4;
  }
  uint64_t v3 = *((void *)this + 40);
  if (v3)
  {
    uint64_t v2 = v3 / *((void *)this + 26);
LABEL_4:
    uint64_t result = 0;
    *a2 = v2;
    return result;
  }
  return 1836020325;
}

uint64_t EC3AudioStream::SetProperty(EC3AudioStream *this, int a2, unsigned int a3, _DWORD *a4)
{
  if (a2 != 1634494051) {
    return 1886681407;
  }
  uint64_t result = 0;
  *((unsigned char *)this + 437) = *a4 != 0;
  return result;
}

uint64_t EC3AudioStream::GetProperty(EC3AudioStream *this, int a2, unsigned int *a3, void *__dst)
{
  if (a2 > 1718383475)
  {
    if (a2 == 1718383476)
    {
      uint64_t result = AudioFileStreamObject::GetProperty(this, 1718383476, a3, __dst);
      if (!result)
      {
        if (*a3 >= 0x30)
        {
          unint64_t v12 = *a3 / 0x30uLL;
          int v13 = *((_DWORD *)this + 11);
          BOOL v14 = (_DWORD *)__dst + 5;
          do
          {
            _DWORD *v14 = v13;
            v14 += 12;
            --v12;
          }
          while (v12);
        }
        return 0;
      }
      return result;
    }
    if (a2 == 1768174433)
    {
      uint64_t result = 561211770;
      if (a3 && *a3 == 8)
      {
        uint64_t result = 0;
        *__dst = *((void *)this + 46);
      }
      return result;
    }
    if (a2 != 1768174437)
    {
LABEL_30:
      return AudioFileStreamObject::GetProperty(this, a2, a3, __dst);
    }
    uint64_t result = 561211770;
    if (!a3 || *a3 != 4) {
      return result;
    }
    uint64_t result = 0;
    int v11 = *((_DWORD *)this + 91);
LABEL_18:
    *(_DWORD *)__dst = v11;
    return result;
  }
  if (a2 == 1634494051)
  {
    uint64_t result = 561211770;
    if (!a3 || *a3 != 4) {
      return result;
    }
    uint64_t result = 0;
    int v11 = *((unsigned __int8 *)this + 437);
    goto LABEL_18;
  }
  if (a2 == 1668112752)
  {
    uint64_t result = 561211770;
    if (a3 && *a3 >= 0x20)
    {
      uint64_t result = 0;
      *(_OWORD *)__dst = 0u;
      *((_OWORD *)__dst + 1) = 0u;
      *(_DWORD *)__dst = *((_DWORD *)this + 100);
      *a3 = 32;
    }
    return result;
  }
  if (a2 != 1684434292) {
    goto LABEL_30;
  }
  uint64_t v7 = *((void *)this + 1);
  uint64_t v8 = *(const void **)(v7 + 136);
  if (v8)
  {
    uint64_t v19 = 0;
    long long v17 = 0u;
    long long v18 = 0u;
    uint64_t result = AudioFormatGetProperty(0x78686173u, 0xCu, v8, a3, &v17);
    if (*a3 == 40)
    {
      if (!result)
      {
        long long v10 = v18;
        *(_OWORD *)__dst = v17;
        *((_OWORD *)__dst + 1) = v10;
        __dst[4] = v19;
      }
      return result;
    }
    return 561211770;
  }
  if (*((unsigned char *)this + 177)) {
    return 1685348671;
  }
  if (*(_DWORD *)(v7 + 112)) {
    uint64_t result = 1970170687;
  }
  else {
    uint64_t result = 1836020325;
  }
  if (*(unsigned char *)(v7 + 105))
  {
    if (*a3 == 40)
    {
      uint64_t result = 0;
      long long v15 = *(_OWORD *)((char *)this + 24);
      long long v16 = *(_OWORD *)((char *)this + 40);
      __dst[4] = *((void *)this + 7);
      *(_OWORD *)__dst = v15;
      *((_OWORD *)__dst + 1) = v16;
      return result;
    }
    return 561211770;
  }
  return result;
}

uint64_t EC3AudioStream::GetPropertyInfo(EC3AudioStream *this, int a2, unsigned int *a3, unsigned __int8 *a4)
{
  if (a2 > 1768174432)
  {
    if (a2 == 1768174433)
    {
      if (!a3) {
        goto LABEL_17;
      }
      unsigned int v4 = 8;
LABEL_16:
      *a3 = v4;
LABEL_17:
      if (a4) {
        *a4 = 0;
      }
      return 0;
    }
    if (a2 == 1768174437)
    {
      if (!a3) {
        goto LABEL_17;
      }
      unsigned int v4 = 4;
      goto LABEL_16;
    }
  }
  else
  {
    if (a2 == 1634494051)
    {
      if (a3) {
        *a3 = 4;
      }
      if (a4) {
        *a4 = 1;
      }
      return 0;
    }
    if (a2 == 1668112752)
    {
      if (!a3) {
        goto LABEL_17;
      }
      unsigned int v4 = 32;
      goto LABEL_16;
    }
  }
  return AudioFileStreamObject::GetPropertyInfo(this, a2, a3, a4);
}

uint64_t EC3AudioStream::Flush(EC3AudioStream *this)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 106) && *((_DWORD *)this + 107) && *((_DWORD *)this + 123))
  {
    if (*((unsigned char *)this + 438)) {
      EC3AudioStream::NotifyFormatChange(this, (const AudioStreamBasicDescription *)this + 11);
    }
    if (!*((_DWORD *)this + 50))
    {
      *((_DWORD *)this + 50) = 1;
      CADeprecated::CAAutoFree<AudioStreamPacketDescription>::reallocItems((void **)this + 24, 1);
    }
    UInt32 v2 = *((_DWORD *)this + 123);
    uint64_t v3 = (AudioStreamPacketDescription *)*((void *)this + 24);
    v3->mStartOffset = 0;
    v3->mVariableFramesInPacket = 0;
    v3->mDataByteSize = v2;
    if (kASSubSytemEC3)
    {
      unsigned int v4 = *(NSObject **)kASSubSytemEC3;
      if (!*(void *)kASSubSytemEC3)
      {
LABEL_14:
        AudioFileStreamWrapper::CallPacketsProc(*((AudioFileStreamWrapper **)this + 1), v2, 1u, *((const void **)this + 60), v3, 0);
        ++*((void *)this + 23);
        *((unsigned char *)this + 438) = 0;
        *((void *)this + 53) = 0;
        *((_DWORD *)this + 108) = 0;
        *((_DWORD *)this + 123) = 0;
        return 0;
      }
    }
    else
    {
      unsigned int v4 = MEMORY[0x1E4F14500];
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      int v6 = 136315906;
      uint64_t v7 = "EC3AudioStream.cpp";
      __int16 v8 = 1024;
      int v9 = 382;
      __int16 v10 = 2048;
      uint64_t v11 = 0;
      __int16 v12 = 1024;
      UInt32 v13 = v2;
      _os_log_impl(&dword_18FEC0000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d found packet: offset = %lld, std::string::size_type size = %d", (uint8_t *)&v6, 0x22u);
      UInt32 v2 = *((_DWORD *)this + 123);
      uint64_t v3 = (AudioStreamPacketDescription *)*((void *)this + 24);
    }
    goto LABEL_14;
  }
  return 0;
}

void EC3AudioStream::~EC3AudioStream(EC3AudioStream *this)
{
  EC3AudioStream::~EC3AudioStream(this);
  JUMPOUT(0x192FC8940);
}

{
  EC3StreamParser *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EDF8F460;
  UInt32 v2 = (EC3StreamParser *)*((void *)this + 51);
  if (v2)
  {
    EC3StreamParser::~EC3StreamParser(v2);
    MEMORY[0x192FC8940]();
  }
  *((unsigned char *)this + 438) = 0;
  *((void *)this + 53) = 0;
  *((_DWORD *)this + 108) = 0;
  *((_DWORD *)this + 123) = 0;
  uint64_t v3 = (void *)*((void *)this + 60);
  if (v3)
  {
    free(v3);
    *((void *)this + 60) = 0;
  }
  AudioFileStreamObject::~AudioFileStreamObject(this);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<EC3AudioStream::EC3AudioStream(void)::$_0 &&>>()
{
}

void EC3AudioStream::EC3AudioStream(EC3AudioStream *this)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  *((_DWORD *)this + 4) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = -1;
  *((void *)this + 12) = -1;
  *((void *)this + 13) = -1;
  *((void *)this + 17) = 0;
  *((_DWORD *)this + 36) = 0;
  *((void *)this + 19) = 0;
  *((_WORD *)this + 88) = 0;
  *((_DWORD *)this + 59) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((_DWORD *)this + 32) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 24) = 0;
  *((_DWORD *)this + 50) = 0;
  *((void *)this + 26) = 0;
  *((void *)this + 27) = 0;
  *((unsigned char *)this + 232) = 0;
  *((void *)this + 28) = 0;
  *((void *)this + 30) = AudioFileStreamObject::ParseHeader;
  *((void *)this + 31) = 0;
  *((_DWORD *)this + 64) = 0;
  *((void *)this + 33) = 0;
  *(void *)((char *)this + 300) = 0;
  *(void *)((char *)this + 284) = 0;
  *(void *)((char *)this + 292) = 0;
  *((_DWORD *)this + 82) = 0;
  *((void *)this + 39) = 0;
  *((void *)this + 40) = 0;
  *(void *)this = &unk_1EDF8F460;
  *((_WORD *)this + 166) = 0;
  *((_DWORD *)this + 84) = 0;
  *((unsigned char *)this + 352) = 0;
  *((unsigned char *)this + 376) = -1;
  *(void *)((char *)this + 429) = 0;
  *((void *)this + 53) = 0;
  *((void *)this + 50) = 0;
  *((void *)this + 51) = 0;
  *((_DWORD *)this + 104) = 0;
  *(_WORD *)((char *)this + 437) = 1;
  *((void *)this + 61) = 0;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  if (atomic_load_explicit((atomic_ullong *volatile)&EC3AudioStream::EC3AudioStream(void)::onceflag, memory_order_acquire) != -1)
  {
    *(void *)buf = &v3;
    unsigned int v4 = buf;
    std::__call_once(&EC3AudioStream::EC3AudioStream(void)::onceflag, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<EC3AudioStream::EC3AudioStream(void)::$_0 &&>>);
  }
  if (kASSubSytemEC3)
  {
    UInt32 v2 = *(NSObject **)kASSubSytemEC3;
    if (!*(void *)kASSubSytemEC3) {
      goto LABEL_9;
    }
  }
  else
  {
    UInt32 v2 = MEMORY[0x1E4F14500];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "EC3AudioStream.cpp";
    __int16 v6 = 1024;
    int v7 = 138;
    __int16 v8 = 2048;
    int v9 = this;
    _os_log_impl(&dword_18FEC0000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d EC3AudioStream(%p): -> constructed", buf, 0x1Cu);
  }
LABEL_9:
  *((void *)this + 48) = 0;
  *((void *)this + 49) = 0;
  operator new();
}

void sub_19005C138(_Unwind_Exception *a1)
{
  *(unsigned char *)(v1 + 438) = 0;
  *(void *)(v1 + 424) = 0;
  *(_DWORD *)(v1 + 432) = 0;
  *(_DWORD *)(v1 + 492) = 0;
  char v3 = *(void **)(v1 + 480);
  if (v3)
  {
    free(v3);
    *(void *)(v1 + 480) = 0;
  }
  AudioFileStreamObject::~AudioFileStreamObject((AudioFileStreamObject *)v1);
  _Unwind_Resume(a1);
}

uint64_t unilaterally_billed_shared_memory::get_raw_ptr(IOSurfaceRef *this, size_t a2)
{
  if (IOSurfaceGetAllocSize(*this) > a2) {
    return (uint64_t)IOSurfaceGetBaseAddress(*this) + a2;
  }
  _os_assert_log();
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

void caulk::mach::mach_port::~mach_port(mach_port_name_t *this)
{
  if (*this) {
    mach_port_deallocate(*MEMORY[0x1E4F14960], *this);
  }
}

void unilaterally_billed_shared_memory::~unilaterally_billed_shared_memory(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

void acv2::ChannelMixerConverter::ConvertBufferList(uint64_t a1, vDSP_Length __N, uint64_t *a3, uint64_t *a4)
{
  unsigned int v5 = __N;
  int v7 = *(_DWORD *)(a1 + 68);
  int v57 = *(_DWORD *)(a1 + 28);
  if ((v57 & 0x20) != 0)
  {
    int v8 = 1;
    if ((v7 & 0x20) != 0) {
      goto LABEL_3;
    }
  }
  else
  {
    int v8 = *(_DWORD *)(a1 + 44);
    if ((v7 & 0x20) != 0)
    {
LABEL_3:
      int v9 = 1;
      goto LABEL_6;
    }
  }
  int v9 = *(_DWORD *)(a1 + 84);
LABEL_6:
  unint64_t v10 = *(unsigned int *)(a1 + 168);
  int v61 = v9;
  if (v10 != 1)
  {
    if (v10 == 2 && *(_DWORD *)(a1 + 172) == 1)
    {
      uint64_t v11 = *(float **)(a1 + 176);
      float v12 = *v11;
      if (*v11 == v11[1])
      {
        uint64_t v13 = *a3;
        if ((v57 & 0x20) != 0)
        {
          long long v15 = *(const float **)(v13 + 32);
          uint64_t v14 = *(const float **)(v13 + 16);
        }
        else
        {
          uint64_t v14 = *(const float **)(v13 + 16);
          long long v15 = v14 + 1;
        }
        int v43 = *(float **)(*a4 + 16);
        *(float *)&uint64_t __B = *v11;
        if (v12 == 0.0)
        {
          if (v9 == 1)
          {
            size_t v44 = 4 * __N;
            int v45 = v43;
LABEL_76:
            bzero(v45, v44);
            return;
          }
          if (__N)
          {
            int v47 = 0;
            do
            {
              v43[v47] = 0.0;
              v47 += v9;
              --v5;
            }
            while (v5);
          }
        }
        else if (v12 == 1.0)
        {
          vDSP_vadd(v14, v8, v15, v8, v43, v9, __N);
        }
        else
        {
          vDSP_vasm(v14, v8, v15, v8, (const float *)&__B, v43, v9, __N);
        }
        return;
      }
    }
    goto LABEL_16;
  }
  if (*(_DWORD *)(a1 + 172) != 2 || (v16 = *(float **)(a1 + 176), float v17 = *v16, *v16 != v16[1]))
  {
LABEL_16:
    unint64_t v21 = *(void *)(a1 + 208);
    if (v21)
    {
      uint64_t __B = *(void *)(a1 + 200);
      int v63 = 0;
      std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&__B, v21);
      unint64_t v10 = *(unsigned int *)(a1 + 168);
    }
    if (!v10)
    {
      unint64_t v37 = *(unsigned int *)(a1 + 172);
LABEL_55:
      if (v37)
      {
        for (unint64_t i = 0; i < v37; ++i)
        {
          if (((*(void *)(*(void *)(a1 + 200) + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i) & 1) == 0)
          {
            uint64_t v39 = *a4;
            if ((v7 & 0x20) != 0) {
              uint64_t v40 = *(void **)(v39 + 16 * i + 16);
            }
            else {
              uint64_t v40 = (void *)(*(void *)(v39 + 16) + 4 * i);
            }
            if (v61 == 1)
            {
              bzero(v40, 4 * v5);
              unint64_t v37 = *(unsigned int *)(a1 + 172);
            }
            else if (v5)
            {
              unsigned int v41 = 0;
              unsigned int v42 = v5;
              do
              {
                *((_DWORD *)v40 + v41) = 0;
                v41 += v61;
                --v42;
              }
              while (v42);
            }
          }
        }
      }
      return;
    }
    uint64_t v22 = 0;
    unsigned int v23 = 0;
    int v24 = v61;
    BOOL v26 = v8 == 1 && v61 == 1;
    BOOL v60 = v26;
    while (1)
    {
      uint64_t v27 = *a3;
      int v28 = (v57 & 0x20) != 0 ? *(const void **)(v27 + 16 * v22 + 16) : (const void *)(*(void *)(v27 + 16) + 4 * v22);
      if (*(_DWORD *)(a1 + 172)) {
        break;
      }
      unint64_t v37 = 0;
LABEL_52:
      if (++v22 >= v10) {
        goto LABEL_55;
      }
    }
    uint64_t v59 = v22;
    unint64_t v29 = 0;
    while (1)
    {
      uint64_t v30 = *a4;
      if ((v7 & 0x20) != 0) {
        uint64_t v31 = *(void **)(v30 + 16 * v29 + 16);
      }
      else {
        uint64_t v31 = (void *)(*(void *)(v30 + 16) + 4 * v29);
      }
      LODWORD(__B) = 0;
      float v32 = *(float *)(*(void *)(a1 + 176) + 4 * v23);
      *(float *)&uint64_t __B = v32;
      if (v32 == 0.0) {
        goto LABEL_49;
      }
      uint64_t v33 = *(void *)(*(void *)(a1 + 200) + 8 * (v29 >> 6)) & (1 << v29);
      if (v32 == 1.0)
      {
        if (!v33)
        {
          if (v60)
          {
            memcpy(v31, v28, 4 * v5);
            goto LABEL_44;
          }
          if (v5)
          {
            unsigned int v34 = 0;
            unsigned int v35 = 0;
            unsigned int v36 = v5;
            do
            {
              *((_DWORD *)v31 + v34) = *((_DWORD *)v28 + v35);
              v35 += v8;
              v34 += v24;
              --v36;
            }
            while (v36);
          }
LABEL_48:
          *(void *)(*(void *)(a1 + 200) + 8 * (v29 >> 6)) |= 1 << v29;
          goto LABEL_49;
        }
        vDSP_vadd((const float *)v28, v8, (const float *)v31, v61, (float *)v31, v61, v5);
      }
      else
      {
        if (!v33)
        {
          vDSP_vsmul((const float *)v28, v8, (const float *)&__B, (float *)v31, v61, v5);
LABEL_44:
          int v24 = v61;
          goto LABEL_48;
        }
        vDSP_vsma((const float *)v28, v8, (const float *)&__B, (const float *)v31, v61, (float *)v31, v61, v5);
      }
      int v24 = v61;
LABEL_49:
      ++v29;
      ++v23;
      unint64_t v37 = *(unsigned int *)(a1 + 172);
      if (v29 >= v37)
      {
        unint64_t v10 = *(unsigned int *)(a1 + 168);
        uint64_t v22 = v59;
        goto LABEL_52;
      }
    }
  }
  uint64_t v18 = *a4;
  if ((v7 & 0x20) != 0)
  {
    BOOL v20 = *(_DWORD **)(v18 + 32);
    uint64_t v19 = *(char **)(v18 + 16);
  }
  else
  {
    uint64_t v19 = *(char **)(v18 + 16);
    BOOL v20 = v19 + 4;
  }
  uint64_t v46 = *(const void **)(*a3 + 16);
  *(float *)&uint64_t __B = v17;
  if (v17 != 0.0)
  {
    if (v17 == 1.0)
    {
      if (v8 == 1 && v9 == 1)
      {
        memcpy(v19, v46, 4 * __N);
      }
      else if (__N)
      {
        int v52 = 0;
        unsigned int v53 = 0;
        int v54 = __N;
        do
        {
          *(_DWORD *)&v19[4 * v52] = *((_DWORD *)v46 + v53);
          v53 += v8;
          v52 += v9;
          --v54;
        }
        while (v54);
        if (v9 != 1)
        {
          int v55 = 0;
          do
          {
            v20[v55] = *(_DWORD *)&v19[4 * v55];
            v55 += v9;
            --v5;
          }
          while (v5);
          return;
        }
      }
      else if (v9 != 1)
      {
        return;
      }
      size_t v51 = 4 * v5;
    }
    else
    {
      vDSP_vsmul((const float *)v46, v8, (const float *)&__B, (float *)v19, v9, __N);
      if (v61 != 1)
      {
        if (v5)
        {
          int v56 = 0;
          do
          {
            v20[v56] = *(_DWORD *)&v19[4 * v56];
            v56 += v61;
            --v5;
          }
          while (v5);
        }
        return;
      }
      size_t v51 = 4 * v5;
    }
    memcpy(v20, v19, v51);
    return;
  }
  if (v9 == 1)
  {
    bzero(v19, 4 * __N);
    int v45 = (float *)v20;
    size_t v44 = 4 * v5;
    goto LABEL_76;
  }
  if (__N)
  {
    int v48 = 0;
    int v49 = __N;
    do
    {
      *(_DWORD *)&v19[4 * v48] = 0;
      v48 += v9;
      --v49;
    }
    while (v49);
    int v50 = 0;
    do
    {
      v20[v50] = 0;
      v50 += v9;
      --v5;
    }
    while (v5);
  }
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  int v4 = *(_DWORD *)(a1 + 8);
  unsigned int v5 = *(void **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    unint64_t v2 = a2 - v6;
    *(void *)a1 = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    bzero(v5, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    int v8 = &v5[v7];
    *(void *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

uint64_t acv2::CBRConverter::SetProperty(acv2::CBRConverter *this, unsigned int a2, unsigned int a3, const void *a4)
{
  return 1886547824;
}

__CFString *acv2::ChannelMixerConverter::ConverterName(acv2::ChannelMixerConverter *this)
{
  return @"ChannelMixerConverter";
}

void acv2::ChannelMixerConverter::~ChannelMixerConverter(acv2::ChannelMixerConverter *this)
{
  *(void *)this = &unk_1EDF95E90;
  unint64_t v2 = (void *)*((void *)this + 25);
  if (v2) {
    operator delete(v2);
  }
  char v3 = (void *)*((void *)this + 22);
  if (v3)
  {
    *((void *)this + 23) = v3;
    operator delete(v3);
  }
  acv2::AudioConverterBase::~AudioConverterBase(this);
  JUMPOUT(0x192FC8940);
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EDF95E90;
  unint64_t v2 = (void *)*((void *)this + 25);
  if (v2) {
    operator delete(v2);
  }
  char v3 = (void *)*((void *)this + 22);
  if (v3)
  {
    *((void *)this + 23) = v3;
    operator delete(v3);
  }
  acv2::AudioConverterBase::~AudioConverterBase(this);
}

uint64_t acv2::normalizeMixMap(uint64_t this, int a2, float *a3, float *a4)
{
  if (a2)
  {
    int v4 = 0;
    float v5 = 0.0;
    do
    {
      float v6 = 0.0;
      if (this)
      {
        int v7 = v4;
        uint64_t v8 = this;
        do
        {
          float v6 = v6 + fabsf(a3[v7]);
          v7 += a2;
          --v8;
        }
        while (v8);
      }
      if (v6 > v5) {
        float v5 = v6;
      }
      ++v4;
    }
    while (v4 != a2);
    uint64_t v9 = (a2 * this);
    if (v5 != 0.0 && v9 != 0)
    {
      float v11 = 1.0 / v5;
      do
      {
        *a3 = v11 * *a3;
        ++a3;
        --v9;
      }
      while (v9);
    }
  }
  return this;
}

uint64_t acv2::ChannelMixerConverter::SetMixMap(uint64_t a1, uint64_t a2)
{
  float v5 = *(char **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unint64_t v6 = (v4 - *(void *)a2) >> 2;
  uint64_t result = *(unsigned int *)(a1 + 168);
  int v8 = *(_DWORD *)(a1 + 172);
  if (v6 == v8 * result)
  {
    if (a1 + 176 != a2)
    {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 176), v5, v4, v6);
      uint64_t result = *(unsigned int *)(a1 + 168);
      int v8 = *(_DWORD *)(a1 + 172);
    }
    uint64_t result = acv2::normalizeMixMap(result, v8, *(float **)(a1 + 176), (float *)v6);
    *(unsigned char *)(a1 + 224) = 1;
  }
  return result;
}

OSStatus ExtAudioFileOpenURL(CFURLRef inURL, ExtAudioFileRef *outExtAudioFile)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  OSStatus result = -50;
  if (inURL)
  {
    if (outExtAudioFile)
    {
      *outExtAudioFile = 0;
      operator new();
    }
  }
  return result;
}

void sub_19005CCC8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __cxa_free_exception(v3);
  if (a2 == 4)
  {
    int v6 = *((_DWORD *)__cxa_begin_catch(exception_object) + 2);
  }
  else if (a2 == 3)
  {
    int v6 = *((_DWORD *)__cxa_begin_catch(exception_object) + 66);
  }
  else
  {
    int v7 = (int *)__cxa_begin_catch(exception_object);
    if (a2 != 2)
    {
      __cxa_end_catch();
LABEL_9:
      if (v2) {
        (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
      }
LABEL_14:
      JUMPOUT(0x19005CB1CLL);
    }
    int v6 = *v7;
  }
  __cxa_end_catch();
  if (!v6) {
    goto LABEL_14;
  }
  goto LABEL_9;
}

OSStatus ExtAudioFileWrapAudioFileID(AudioFileID inFileID, Boolean inForWriting, ExtAudioFileRef *outExtAudioFile)
{
  return ExtAudioFileWrapAudioFileIDWithPreferredFormatID((uint64_t)inFileID, inForWriting, 0, outExtAudioFile);
}

uint64_t ExtAudioFileWrapAudioFileIDWithPreferredFormatID(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t result = 4294967246;
  if (a1)
  {
    if (a4)
    {
      *a4 = 0;
      operator new();
    }
  }
  return result;
}

void sub_19005CF9C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __cxa_free_exception(v3);
  if (a2 == 4)
  {
    int v6 = *((_DWORD *)__cxa_begin_catch(exception_object) + 2);
  }
  else if (a2 == 3)
  {
    int v6 = *((_DWORD *)__cxa_begin_catch(exception_object) + 66);
  }
  else
  {
    int v7 = (int *)__cxa_begin_catch(exception_object);
    if (a2 != 2)
    {
      __cxa_end_catch();
LABEL_9:
      if (v2) {
        (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
      }
LABEL_14:
      JUMPOUT(0x19005CE90);
    }
    int v6 = *v7;
  }
  __cxa_end_catch();
  if (!v6) {
    goto LABEL_14;
  }
  goto LABEL_9;
}

OSStatus ExtAudioFileCreateWithURL(CFURLRef inURL, AudioFileTypeID inFileType, const AudioStreamBasicDescription *inStreamDesc, const AudioChannelLayout *inChannelLayout, UInt32 inFlags, ExtAudioFileRef *outExtAudioFile)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  OSStatus result = -50;
  if (inURL && inStreamDesc)
  {
    if (outExtAudioFile)
    {
      *outExtAudioFile = 0;
      operator new();
    }
  }
  return result;
}

void sub_19005D26C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __cxa_free_exception(v3);
  if (a2 == 4)
  {
    int v6 = *((_DWORD *)__cxa_begin_catch(exception_object) + 2);
  }
  else if (a2 == 3)
  {
    int v6 = *((_DWORD *)__cxa_begin_catch(exception_object) + 66);
  }
  else
  {
    int v7 = (int *)__cxa_begin_catch(exception_object);
    if (a2 != 2)
    {
      __cxa_end_catch();
LABEL_9:
      if (v2) {
        (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
      }
LABEL_14:
      JUMPOUT(0x19005D164);
    }
    int v6 = *v7;
  }
  __cxa_end_catch();
  if (!v6) {
    goto LABEL_14;
  }
  goto LABEL_9;
}

OSStatus ExtAudioFileDispose(ExtAudioFileRef inExtAudioFile)
{
  uint64_t v1 = (ExtAudioFile *)BaseOpaqueObject::ResolveOpaqueRef();
  if (!v1) {
    return -50;
  }
  uint64_t v4 = v1;
  OSStatus v5 = ExtAudioFile::Close(v1, v2, v3);
  (*(void (**)(ExtAudioFile *))(*(void *)v4 + 8))(v4);
  return v5;
}

OSStatus ExtAudioFileRead(ExtAudioFileRef inExtAudioFile, UInt32 *ioNumberFrames, AudioBufferList *ioData)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  OSStatus v3 = -50;
  if (ioNumberFrames)
  {
    if (ioData)
    {
      uint64_t v6 = BaseOpaqueObject::ResolveOpaqueRef();
      if (v6)
      {
        uint64_t v7 = v6;
        CrashIfClientProvidedBogusAudioBufferList();
        if (*(void *)(v7 + 152) && (*(unsigned char *)(v7 + 236) & 0x20) != 0) {
          int v9 = *(_DWORD *)(v7 + 252);
        }
        else {
          int v9 = 1;
        }
        if (ioData->mNumberBuffers != v9)
        {
          if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
          {
            CAX4CCString::CAX4CCString((CAX4CCString *)v40, 0xFFFFFFCE);
            *(_DWORD *)buf = 136315906;
            unsigned int v42 = "ExtAudioFile.cpp";
            __int16 v43 = 1024;
            int v44 = 1173;
            __int16 v45 = 2080;
            uint64_t v46 = v40;
            __int16 v47 = 2080;
            int v48 = "wrong number of buffers";
            _os_log_impl(&dword_18FEC0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
          }
          exceptiouint64_t n = (CAXException *)__cxa_allocate_exception(0x110uLL);
          CAXException::CAXException(exception, "wrong number of buffers", -50);
          goto LABEL_68;
        }
        unsigned int v10 = *(_DWORD *)(v7 + 284);
        if (!v10)
        {
          if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
          {
            CAX4CCString::CAX4CCString((CAX4CCString *)v40, 0xFFFEFBF9);
            *(_DWORD *)buf = 136315906;
            unsigned int v42 = "ExtAudioFile.cpp";
            __int16 v43 = 1024;
            int v44 = 1175;
            __int16 v45 = 2080;
            uint64_t v46 = v40;
            __int16 v47 = 2080;
            int v48 = "client maximum packet size is 0";
            _os_log_impl(&dword_18FEC0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
          }
          exceptiouint64_t n = (CAXException *)__cxa_allocate_exception(0x110uLL);
          CAXException::CAXException(exception, "client maximum packet size is 0", -66567);
          goto LABEL_68;
        }
        unsigned int v11 = *ioNumberFrames;
        if (!*(void *)(v7 + 112))
        {
          ExtAudioFile::AllocateBuffers(v7, 0);
          unsigned int v10 = *(_DWORD *)(v7 + 284);
        }
        UInt32 mDataByteSize = ioData->mBuffers[0].mDataByteSize;
        unsigned int v13 = mDataByteSize / v10;
        if (mDataByteSize / v10 < v11) {
          unsigned int v11 = mDataByteSize / v10;
        }
        UInt32 v39 = v11;
        *(_DWORD *)(v7 + 300) = -1;
        if (*(_DWORD *)(v7 + 244) == 1)
        {
          signed int v14 = *(_DWORD *)(v7 + 84);
          if (v14 >= 1)
          {
            do
            {
              if (v13 < v14) {
                signed int v14 = v13;
              }
              UInt32 ioOutputDataPacketSize = v14;
              unsigned int v15 = *(_DWORD *)(v7 + 188);
              if (v15) {
                *(_DWORD *)(v7 + 300) = (v14 + v15 - 1) / v15;
              }
              long long v16 = *(OpaqueAudioConverter **)(v7 + 152);
              if (v16)
              {
                OSStatus v17 = AudioConverterFillComplexBuffer(v16, (AudioConverterComplexInputDataProc)ExtAudioFile::ReadInputProc, (void *)v7, &ioOutputDataPacketSize, ioData, 0);
                if (v17)
                {
                  unsigned int v35 = v17;
                  if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
                  {
                    CAX4CCString::CAX4CCString((CAX4CCString *)v40, v35);
                    *(_DWORD *)buf = 136315906;
                    unsigned int v42 = "ExtAudioFile.cpp";
                    __int16 v43 = 1024;
                    int v44 = 1197;
                    __int16 v45 = 2080;
                    uint64_t v46 = v40;
                    __int16 v47 = 2080;
                    int v48 = "convert audio packets (pcm read)";
                    _os_log_impl(&dword_18FEC0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
                  }
                  exceptiouint64_t n = (CAXException *)__cxa_allocate_exception(0x110uLL);
                  CAXException::CAXException(exception, "convert audio packets (pcm read)", v35);
                  goto LABEL_68;
                }
              }
              else
              {
                unsigned int InputProc = ExtAudioFile::ReadInputProc(0, (OpaqueAudioConverter *)&ioOutputDataPacketSize, (AudioStreamPacketDescription **)ioData, 0, (AudioStreamPacketDescription **)v7, v8);
                if (InputProc)
                {
                  unsigned int v37 = InputProc;
                  if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
                  {
                    CAX4CCString::CAX4CCString((CAX4CCString *)v40, v37);
                    *(_DWORD *)buf = 136315906;
                    unsigned int v42 = "ExtAudioFile.cpp";
                    __int16 v43 = 1024;
                    int v44 = 1195;
                    __int16 v45 = 2080;
                    uint64_t v46 = v40;
                    __int16 v47 = 2080;
                    int v48 = "read audio file";
                    _os_log_impl(&dword_18FEC0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
                  }
LABEL_67:
                  exceptiouint64_t n = (CAXException *)__cxa_allocate_exception(0x110uLL);
                  CAXException::CAXException(exception, "read audio file", v37);
LABEL_68:
                }
              }
              UInt32 v19 = ioOutputDataPacketSize;
              if (!ioOutputDataPacketSize) {
                goto LABEL_51;
              }
              signed int v14 = *(_DWORD *)(v7 + 84) - ioOutputDataPacketSize;
              *(_DWORD *)(v7 + 84) = v14;
              uint64_t mNumberBuffers = ioData->mNumberBuffers;
              if ((int)mNumberBuffers >= 1)
              {
                unint64_t v21 = mNumberBuffers + 1;
                do
                  ioData->mBuffers[(v21-- - 2)].UInt32 mDataByteSize = mDataByteSize;
                while (v21 > 1);
                signed int v14 = *(_DWORD *)(v7 + 84);
              }
            }
            while (v14 > 0);
          }
        }
        unsigned int v22 = *(_DWORD *)(v7 + 188);
        if (v22) {
          *(_DWORD *)(v7 + 300) = v11 / v22 + 1;
        }
        unsigned int v23 = *(OpaqueAudioConverter **)(v7 + 152);
        if (v23)
        {
          if (!v11)
          {
            UInt32 v19 = 0;
LABEL_51:
            OSStatus v3 = 0;
            *ioNumberFrames = v19;
            return v3;
          }
          OSStatus v24 = AudioConverterFillComplexBuffer(v23, (AudioConverterComplexInputDataProc)ExtAudioFile::ReadInputProc, (void *)v7, &v39, ioData, 0);
          if (v24)
          {
            unsigned int v25 = v24;
            if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
            {
              CAX4CCString::CAX4CCString((CAX4CCString *)v40, v25);
              *(_DWORD *)buf = 136315906;
              unsigned int v42 = "ExtAudioFile.cpp";
              __int16 v43 = 1024;
              int v44 = 1222;
              __int16 v45 = 2080;
              uint64_t v46 = v40;
              __int16 v47 = 2080;
              int v48 = "convert audio packets (read)";
              _os_log_impl(&dword_18FEC0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
            }
            exceptiouint64_t n = (CAXException *)__cxa_allocate_exception(0x110uLL);
            CAXException::CAXException(exception, "convert audio packets (read)", v25);
            goto LABEL_68;
          }
        }
        else
        {
          unsigned int v27 = ExtAudioFile::ReadInputProc(0, (OpaqueAudioConverter *)&v39, (AudioStreamPacketDescription **)ioData, 0, (AudioStreamPacketDescription **)v7, v8);
          if (v27)
          {
            unsigned int v37 = v27;
            if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
            {
              CAX4CCString::CAX4CCString((CAX4CCString *)v40, v37);
              *(_DWORD *)buf = 136315906;
              unsigned int v42 = "ExtAudioFile.cpp";
              __int16 v43 = 1024;
              int v44 = 1217;
              __int16 v45 = 2080;
              uint64_t v46 = v40;
              __int16 v47 = 2080;
              int v48 = "read audio file";
              _os_log_impl(&dword_18FEC0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", buf, 0x26u);
            }
            goto LABEL_67;
          }
        }
        UInt32 v19 = v39;
        if (*(_DWORD *)(v7 + 244) == 1)
        {
          uint64_t v28 = *(void *)(v7 + 72);
          uint64_t v29 = *(void *)(v7 + 64) + v39;
          if (v28 && v29 > v28)
          {
            if (v29 - v28 <= v39) {
              UInt32 v30 = v29 - v28;
            }
            else {
              UInt32 v30 = v39;
            }
            uint64_t v31 = ioData->mNumberBuffers;
            if ((int)v31 >= 1)
            {
              int v32 = *(_DWORD *)(v7 + 248) * v30;
              unint64_t v33 = v31 + 1;
              do
                ioData->mBuffers[(v33-- - 2)].mDataByteSize -= v32;
              while (v33 > 1);
            }
            v19 -= v30;
            uint64_t v29 = v28;
          }
          *(void *)(v7 + 56) = (uint64_t)((double)v29 / *(double *)(v7 + 216));
          *(void *)(v7 + 64) = v29;
        }
        goto LABEL_51;
      }
    }
  }
  return v3;
}

void sub_19005DAF8(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v2);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x19005D740);
  }
  _Unwind_Resume(exception_object);
}

OSStatus ExtAudioFileWrite(ExtAudioFileRef inExtAudioFile, UInt32 inNumberFrames, const AudioBufferList *ioData)
{
  if (!ioData) {
    return -50;
  }
  uint64_t v5 = BaseOpaqueObject::ResolveOpaqueRef();
  if (!v5) {
    return -50;
  }
  uint64_t v6 = (ExtAudioFile *)v5;
  CrashIfClientProvidedBogusAudioBufferList();
  return ExtAudioFile::Write(v6, inNumberFrames, ioData);
}

OSStatus ExtAudioFileWriteAsync(ExtAudioFileRef inExtAudioFile, UInt32 inNumberFrames, const AudioBufferList *ioData)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (inNumberFrames && !ioData) {
    return -50;
  }
  uint64_t v5 = BaseOpaqueObject::ResolveOpaqueRef();
  if (!v5) {
    return -50;
  }
  uint64_t v6 = v5;
  if (ioData) {
    CrashIfClientProvidedBogusAudioBufferList();
  }
  uint64_t v7 = CADeprecated::TSingleton<ExtAudioFileAsyncWriteMgr>::instance();
  if (!*(void *)(v6 + 328))
  {
    if (*(_DWORD *)(v6 + 232)) {
      uint64_t v12 = v6 + 224;
    }
    else {
      uint64_t v12 = v6 + 168;
    }
    *(_DWORD *)(v6 + 336) = *(_DWORD *)(v6 + 88) / *(_DWORD *)(v12 + 24);
    operator new();
  }
  if (!inNumberFrames) {
    return 0;
  }
  *(void *)&v22.__val_ = AT::RingBuffer::Store(*(AT::RingBuffer **)(v6 + 328), ioData, inNumberFrames, *(void *)(v6 + 368));
  CheckRingBufferResult(v22, -66569, "store ring buffer");
  *(void *)(v6 + 368) += inNumberFrames;
  uint64_t v16 = 0;
  *(void *)&v23.__val_ = AT::RingBuffer::GetTimeBounds(*(AT::RingBuffer **)(*(void *)(v6 + 328) + 48), (uint64_t *)__p, &v16);
  CheckRingBufferResult(v23, -66570, "get ring buffer time bounds on store");
  if (v16 - *(void *)(v6 + 376) >= *(unsigned int *)(v6 + 336)) {
    std::condition_variable::notify_one((std::condition_variable *)(v7 + 64));
  }
  int v8 = *(_DWORD *)(v6 + 360);
  *(_DWORD *)(v6 + 360) = 0;
  if (v8)
  {
    double Current = CFAbsoluteTimeGetCurrent();
    if (Current >= *(double *)&ExtAudioFile::WriteFramesAsync(unsigned int,AudioBufferList const*)::lastLogTime + 1.0)
    {
      unsigned int v13 = CADefaultLog();
      if (v13)
      {
        signed int v14 = v13;
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v18.__r_.__value_.__l.__data_) = 136315906;
          *(std::string::size_type *)((char *)v18.__r_.__value_.__r.__words + 4) = (std::string::size_type)"ExtAudioFile.cpp";
          WORD2(v18.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&v18.__r_.__value_.__r.__words[1] + 6) = 1495;
          WORD1(v18.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(v18.__r_.__value_.__r.__words[2]) = v8;
          __int16 v19 = 1024;
          int v20 = ExtAudioFile::WriteFramesAsync(unsigned int,AudioBufferList const*)::messagesThrottled;
          _os_log_impl(&dword_18FEC0000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d ExtAudioFileWriteAsync error %d (%d prior errors not logged)", (uint8_t *)&v18, 0x1Eu);
        }
      }
      int v10 = 0;
      ExtAudioFile::WriteFramesAsync(unsigned int,AudioBufferList const*)::lastLogTime = *(void *)&Current;
    }
    else
    {
      int v10 = ExtAudioFile::WriteFramesAsync(unsigned int,AudioBufferList const*)::messagesThrottled + 1;
    }
    ExtAudioFile::WriteFramesAsync(unsigned int,AudioBufferList const*)::messagesThrottled = v10;
    exceptiouint64_t n = (CAXException *)__cxa_allocate_exception(0x110uLL);
    CAXException::CAXException(exception, "", v8);
  }
  return v8;
}

void sub_19005E19C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a2)
  {
    if (a15 < 0) {
      operator delete(__p);
    }
    std::mutex::unlock(v22);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x19005DDD8);
  }
  _Unwind_Resume(exception_object);
}

OSStatus ExtAudioFileSeek(ExtAudioFileRef inExtAudioFile, SInt64 inFrameOffset)
{
  OSStatus v3 = (ExtAudioFile *)BaseOpaqueObject::ResolveOpaqueRef();
  if (!v3) {
    return -50;
  }
  ExtAudioFile::Seek(v3, inFrameOffset);
  return 0;
}

OSStatus ExtAudioFileTell(ExtAudioFileRef inExtAudioFile, SInt64 *outFrameOffset)
{
  if (!outFrameOffset) {
    return -50;
  }
  uint64_t v3 = BaseOpaqueObject::ResolveOpaqueRef();
  if (!v3) {
    return -50;
  }
  uint64_t v4 = v3;
  OSStatus result = 0;
  *outFrameOffset = *(void *)(v4 + 56);
  return result;
}

OSStatus ExtAudioFileGetPropertyInfo(ExtAudioFileRef inExtAudioFile, ExtAudioFilePropertyID inPropertyID, UInt32 *outSize, Boolean *outWritable)
{
  uint64_t v7 = BaseOpaqueObject::ResolveOpaqueRef();
  if (!v7) {
    return -50;
  }
  if ((int)inPropertyID > 1668116594)
  {
    if ((int)inPropertyID > 1718448242)
    {
      if ((int)inPropertyID > 1768907378)
      {
        if (inPropertyID != 1768907379)
        {
          if (inPropertyID != 2020635753) {
            goto LABEL_47;
          }
          LODWORD(v10) = 16;
          goto LABEL_41;
        }
        goto LABEL_37;
      }
      if (inPropertyID != 1718448243)
      {
        if (inPropertyID != 1768907366) {
          goto LABEL_47;
        }
        LODWORD(v10) = 8;
        goto LABEL_41;
      }
    }
    else
    {
      if ((int)inPropertyID > 1717792373)
      {
        if (inPropertyID != 1717792374)
        {
          if (inPropertyID == 1717988724)
          {
            Boolean v11 = 0;
            LODWORD(v10) = 40;
            goto LABEL_42;
          }
          goto LABEL_47;
        }
        goto LABEL_37;
      }
      if (inPropertyID != 1668116595)
      {
        if (inPropertyID != 1717791855) {
          goto LABEL_47;
        }
        uint64_t v10 = *(void *)(v7 + 264);
        if (v10) {
LABEL_18:
        }
          LODWORD(v10) = *(_DWORD *)(v10 + 12);
LABEL_41:
        Boolean v11 = 1;
        goto LABEL_42;
      }
    }
    Boolean v11 = 0;
    LODWORD(v10) = 4;
    goto LABEL_42;
  }
  if ((int)inPropertyID > 1634101611)
  {
    if ((int)inPropertyID <= 1667657075)
    {
      if (inPropertyID == 1634101612) {
        goto LABEL_26;
      }
      if (inPropertyID != 1667460207) {
        goto LABEL_47;
      }
      uint64_t v10 = *(void *)(v7 + 272);
      if (v10) {
        goto LABEL_18;
      }
      goto LABEL_41;
    }
    if (inPropertyID == 1667657076)
    {
      LODWORD(v10) = 40;
      goto LABEL_41;
    }
    if (inPropertyID != 1668112750) {
      goto LABEL_47;
    }
LABEL_37:
    LODWORD(v10) = 4;
    goto LABEL_41;
  }
  if ((int)inPropertyID <= 1633903461)
  {
    if (inPropertyID == 593916525)
    {
      Boolean v11 = *(_DWORD *)(v7 + 188) == 1;
      goto LABEL_27;
    }
    int v8 = 610889316;
LABEL_25:
    if (inPropertyID == v8) {
      goto LABEL_26;
    }
LABEL_47:
    exceptiouint64_t n = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -66561;
    __cxa_throw(exception, MEMORY[0x1E4FBA3A8], 0);
  }
  if (inPropertyID != 1633903462)
  {
    int v8 = 1633906294;
    goto LABEL_25;
  }
LABEL_26:
  Boolean v11 = 0;
LABEL_27:
  LODWORD(v10) = 8;
LABEL_42:
  if (outSize) {
    *UInt32 outSize = v10;
  }
  OSStatus v9 = 0;
  if (outWritable) {
    *Boolean outWritable = v11;
  }
  return v9;
}

OSStatus ExtAudioFileGetProperty(ExtAudioFileRef inExtAudioFile, ExtAudioFilePropertyID inPropertyID, UInt32 *ioPropertyDataSize, void *outPropertyData)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (!ioPropertyDataSize) {
    return -50;
  }
  uint64_t v8 = BaseOpaqueObject::ResolveOpaqueRef();
  if (!v8) {
    return -50;
  }
  uint64_t v9 = v8;
  UInt32 outSize = 0;
  OSStatus result = ExtAudioFileGetPropertyInfo(inExtAudioFile, inPropertyID, &outSize, 0);
  if (!result)
  {
    if (*ioPropertyDataSize < outSize)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "ExtendedAudioFile.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 294;
        _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  invalid property size", buf, 0x12u);
      }
      exceptiouint64_t n = __cxa_allocate_exception(4uLL);
      _DWORD *exception = -66562;
LABEL_59:
      __cxa_throw(exception, v21, 0);
    }
    if ((int)inPropertyID <= 1668116594)
    {
      if ((int)inPropertyID <= 1634101611)
      {
        if ((int)inPropertyID <= 1633903461)
        {
          if (inPropertyID == 593916525)
          {
            CFMutableDictionaryRef NumberFrames = (CFMutableDictionaryRef)ExtAudioFile::GetNumberFrames((ExtAudioFile *)v9);
            goto LABEL_47;
          }
          if (inPropertyID == 610889316)
          {
            CFMutableDictionaryRef NumberFrames = ExtAudioFile::GetInstrumentation((ExtAudioFile *)v9);
LABEL_47:
            *(void *)long long outPropertyData = NumberFrames;
            goto LABEL_55;
          }
          goto LABEL_60;
        }
        if (inPropertyID == 1633903462)
        {
          CFMutableDictionaryRef NumberFrames = (CFMutableDictionaryRef)ExtAudioFile::GetConverterConfig(*(ExtAudioFile **)(v9 + 152));
          goto LABEL_47;
        }
        if (inPropertyID == 1633906294)
        {
          uint64_t v14 = *(void *)(v9 + 152);
          goto LABEL_44;
        }
        goto LABEL_60;
      }
      if ((int)inPropertyID <= 1667657075)
      {
        if (inPropertyID == 1634101612)
        {
          uint64_t v14 = *(void *)(v9 + 16);
          goto LABEL_44;
        }
        if (inPropertyID != 1667460207) {
          goto LABEL_60;
        }
        uint64_t v12 = *(void *)(v9 + 272);
LABEL_22:
        if (v12) {
          size_t v13 = *(unsigned int *)(v12 + 12);
        }
        else {
          size_t v13 = 0;
        }
        memcpy(outPropertyData, (const void *)(v12 + 16), v13);
        goto LABEL_55;
      }
      if (inPropertyID != 1667657076)
      {
        if (inPropertyID != 1668112750) {
          goto LABEL_60;
        }
        int v18 = *(_DWORD *)(v9 + 164);
        goto LABEL_52;
      }
      long long v15 = *(_OWORD *)(v9 + 224);
      long long v16 = *(_OWORD *)(v9 + 240);
      uint64_t v17 = *(void *)(v9 + 256);
LABEL_50:
      *((void *)outPropertyData + 4) = v17;
      *(_OWORD *)long long outPropertyData = v15;
      *((_OWORD *)outPropertyData + 1) = v16;
      goto LABEL_55;
    }
    if ((int)inPropertyID > 1718448242)
    {
      if ((int)inPropertyID > 1768907378)
      {
        if (inPropertyID != 1768907379)
        {
          if (inPropertyID == 2020635753)
          {
            int FilePacketTable = ExtAudioFile::GetFilePacketTable((AudioFileID *)v9, (AudioFilePacketTableInfo *)buf);
            if (FilePacketTable)
            {
              std::error_code v22 = __cxa_allocate_exception(4uLL);
              *std::error_code v22 = FilePacketTable;
              __cxa_throw(v22, MEMORY[0x1E4FBA3A8], 0);
            }
            *(_OWORD *)long long outPropertyData = *(_OWORD *)buf;
            goto LABEL_55;
          }
          goto LABEL_60;
        }
        int v18 = *(_DWORD *)(v9 + 88);
      }
      else
      {
        if (inPropertyID != 1718448243)
        {
          if (inPropertyID == 1768907366)
          {
            uint64_t v14 = *(void *)(v9 + 112);
LABEL_44:
            *(void *)long long outPropertyData = v14;
LABEL_55:
            OSStatus result = 0;
            *UInt32 ioPropertyDataSize = outSize;
            return result;
          }
LABEL_60:
          exceptiouint64_t n = __cxa_allocate_exception(4uLL);
          _DWORD *exception = -66561;
          uint64_t v21 = (struct type_info *)MEMORY[0x1E4FBA3A8];
          goto LABEL_59;
        }
        int v18 = *(_DWORD *)(v9 + 280);
      }
    }
    else
    {
      if ((int)inPropertyID > 1717792373)
      {
        if (inPropertyID == 1717792374)
        {
          int v18 = *(unsigned __int8 *)(v9 + 161);
          goto LABEL_52;
        }
        if (inPropertyID != 1717988724) {
          goto LABEL_60;
        }
        long long v15 = *(_OWORD *)(v9 + 168);
        long long v16 = *(_OWORD *)(v9 + 184);
        uint64_t v17 = *(void *)(v9 + 200);
        goto LABEL_50;
      }
      if (inPropertyID != 1668116595)
      {
        if (inPropertyID != 1717791855) {
          goto LABEL_60;
        }
        uint64_t v12 = *(void *)(v9 + 264);
        goto LABEL_22;
      }
      int v18 = *(_DWORD *)(v9 + 284);
    }
LABEL_52:
    *(_DWORD *)long long outPropertyData = v18;
    goto LABEL_55;
  }
  return result;
}

void sub_19005EAB0(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    if (a2 == 4 || a2 == 3)
    {
      __cxa_begin_catch(a1);
      __cxa_end_catch();
    }
    else
    {
      __cxa_begin_catch(a1);
      __cxa_end_catch();
    }
    JUMPOUT(0x19005E7ACLL);
  }
  _Unwind_Resume(a1);
}

OSStatus ExtAudioFileSetProperty(ExtAudioFileRef inExtAudioFile, ExtAudioFilePropertyID inPropertyID, UInt32 inPropertyDataSize, const void *inPropertyData)
{
  v31[3] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = BaseOpaqueObject::ResolveOpaqueRef();
  if (!v7)
  {
    LODWORD(v10) = -50;
    return v10;
  }
  uint64_t v9 = v7;
  if ((int)inPropertyID <= 1668112749)
  {
    if ((int)inPropertyID <= 1633903461)
    {
      if (inPropertyID == 593916525)
      {
        inPropertyDataa = *(BOOL **)inPropertyData;
        if (*(_DWORD *)(v7 + 188) == 1)
        {
          OSStatus v19 = AudioFileSetProperty(*(AudioFileID *)(v7 + 16), 0x70636E74u, 8u, &inPropertyDataa);
          if (!v19) {
            goto LABEL_48;
          }
          if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
          {
            CAX4CCString::CAX4CCString((CAX4CCString *)v31, v19);
            LODWORD(buf.mSampleRate) = 136315906;
            *(void *)((char *)&buf.mSampleRate + 4) = "ExtAudioFile.cpp";
            LOWORD(buf.mFormatFlags) = 1024;
            *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 498;
            HIWORD(buf.mBytesPerPacket) = 2080;
            *(void *)&buf.mFramesPerPacket = v31;
            LOWORD(buf.mChannelsPerFrame) = 2080;
            *(void *)((char *)&buf.mChannelsPerFrame + 2) = "Couldn't set number of packets on audio file";
            _os_log_impl(&dword_18FEC0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", (uint8_t *)&buf, 0x26u);
          }
          exceptiouint64_t n = (CAXException *)__cxa_allocate_exception(0x110uLL);
          CAXException::CAXException(exception, "Couldn't set number of packets on audio file", v19);
        }
        else
        {
          if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
          {
            CAX4CCString::CAX4CCString((CAX4CCString *)v31, 0xFFFEFBFA);
            LODWORD(buf.mSampleRate) = 136315906;
            *(void *)((char *)&buf.mSampleRate + 4) = "ExtAudioFile.cpp";
            LOWORD(buf.mFormatFlags) = 1024;
            *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 497;
            HIWORD(buf.mBytesPerPacket) = 2080;
            *(void *)&buf.mFramesPerPacket = v31;
            LOWORD(buf.mChannelsPerFrame) = 2080;
            *(void *)((char *)&buf.mChannelsPerFrame + 2) = "SetNumberFrames only supported for PCM";
            _os_log_impl(&dword_18FEC0000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", (uint8_t *)&buf, 0x26u);
          }
          exceptiouint64_t n = (CAXException *)__cxa_allocate_exception(0x110uLL);
          CAXException::CAXException(exception, "SetNumberFrames only supported for PCM", -66566);
        }
      }
      if (inPropertyID == 610889331)
      {
        int v17 = *(_DWORD *)inPropertyData;
        *(unsigned char *)(v7 + 408) = *(_DWORD *)inPropertyData != 0;
        if (v17) {
          *(void *)(v7 + 416) = 0;
        }
        uint64_t v10 = *(void *)(v7 + 152);
        if (v10)
        {
          BOOL v26 = v17 != 0;
          int v29 = 610889331;
          int v28 = 4;
          inPropertyDataa = &v26;
          v31[0] = &v29;
          v31[1] = &v28;
          v31[2] = &inPropertyDataa;
          *(void *)&buf.mSampleRate = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterSetProperty::$_0>;
          *(void *)&buf.mFormatID = v31;
          with_resolved(v10, (uint64_t (**)(uint64_t, uint64_t))&buf);
          goto LABEL_48;
        }
        return v10;
      }
    }
    else
    {
      switch(inPropertyID)
      {
        case 0x61636366u:
          buf.mSampleRate = *(Float64 *)inPropertyData;
          ExtAudioFile::SetConverterProperty((ExtAudioFile *)v7, 1633906803, 8, &buf, 0, v8);
          goto LABEL_48;
        case 0x63636C6Fu:
          CAAudioChannelLayout::CAAudioChannelLayout((CAAudioChannelLayout *)&buf, (const AudioChannelLayout *)inPropertyData);
          v18.n128_f64[0] = ExtAudioFile::SetClientFormat((ExtAudioFile *)v9, (AudioStreamBasicDescription *)(v9 + 224), &buf);
          goto LABEL_35;
        case 0x63666D74u:
          if (inPropertyDataSize > 0x23)
          {
            long long v11 = *((_OWORD *)inPropertyData + 1);
            *(_OWORD *)&buf.mSampleRate = *(_OWORD *)inPropertyData;
            *(_OWORD *)&buf.mBytesPerPacket = v11;
            *(void *)&buf.mBitsPerChannel = *((void *)inPropertyData + 4);
            ExtAudioFile::SetClientFormat((ExtAudioFile *)v7, &buf, 0);
            goto LABEL_48;
          }
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            LODWORD(buf.mSampleRate) = 136315394;
            *(void *)((char *)&buf.mSampleRate + 4) = "ExtendedAudioFile.cpp";
            LOWORD(buf.mFormatFlags) = 1024;
            *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 369;
            _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  bad property size", (uint8_t *)&buf, 0x12u);
          }
          std::error_code v23 = __cxa_allocate_exception(4uLL);
          *std::error_code v23 = -66562;
LABEL_58:
          __cxa_throw(v23, v24, 0);
      }
    }
LABEL_57:
    std::error_code v23 = __cxa_allocate_exception(4uLL);
    *std::error_code v23 = -66561;
    OSStatus v24 = (struct type_info *)MEMORY[0x1E4FBA3A8];
    goto LABEL_58;
  }
  if ((int)inPropertyID > 1768907365)
  {
    switch(inPropertyID)
    {
      case 0x696F6266u:
        Float64 v21 = *(double *)inPropertyData;
        if (!*(unsigned char *)(v7 + 120))
        {
          uint64_t v22 = *(void *)(v7 + 112);
          if (v22) {
            MEMORY[0x192FC8910](v22, 0x1000C8077774924);
          }
        }
        *(Float64 *)(v9 + 112) = v21;
        *(unsigned char *)(v9 + 120) = *(void *)&v21 != 0;
        break;
      case 0x696F6273u:
        *(_DWORD *)(v7 + 88) = *(_DWORD *)inPropertyData;
        break;
      case 0x78707469u:
        LODWORD(v10) = 0;
        Float64 v12 = *(double *)inPropertyData;
        *(void *)(v9 + 392) = *(void *)inPropertyData;
        uint64_t v13 = *((void *)inPropertyData + 1);
        *(void *)(v9 + 400) = v13;
        unint64_t v14 = *(void *)&v12 - 1;
        BOOL v16 = (v13 & *((_DWORD *)inPropertyData + 3)) != 0xFFFFFFFF || v14 < 0xFFFFFFFFFFFFFFFELL;
        *(unsigned char *)(v9 + 384) = v16;
        return v10;
      default:
        goto LABEL_57;
    }
    ExtAudioFile::AllocateBuffers(v9, 0);
    LODWORD(v10) = 0;
    return v10;
  }
  if (inPropertyID != 1668112750)
  {
    if (inPropertyID != 1717791855)
    {
      if (inPropertyID == 1717792374)
      {
        *(unsigned char *)(v7 + 161) = *(_DWORD *)inPropertyData != 0;
        ExtAudioFile::SetClientFormat((ExtAudioFile *)v7, (AudioStreamBasicDescription *)(v7 + 224), 0);
LABEL_48:
        LODWORD(v10) = 0;
        return v10;
      }
      goto LABEL_57;
    }
    CAAudioChannelLayout::CAAudioChannelLayout((CAAudioChannelLayout *)&buf, (const AudioChannelLayout *)inPropertyData);
    CAAudioChannelLayout::operator=();
    if (*(_DWORD *)(v9 + 32) != 1) {
      ExtAudioFile::FileFormatChanged((ExtAudioFile *)v9, 0, 0, 0);
    }
LABEL_35:
    MEMORY[0x192FC7C80](&buf, v18);
    goto LABEL_48;
  }
  LODWORD(v10) = 0;
  *(_DWORD *)(v9 + 164) = *(_DWORD *)inPropertyData;
  return v10;
}

void sub_19005F0D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2)
  {
    __cxa_free_exception(v13);
    if (a2 == 4 || a2 == 3)
    {
      __cxa_begin_catch(exception_object);
      __cxa_end_catch();
    }
    else
    {
      __cxa_begin_catch(exception_object);
      __cxa_end_catch();
    }
    JUMPOUT(0x19005EF28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ParseADTSChannelConfig(CABitStreamReader *a1, int *a2, int *a3)
{
  uint64_t result = CABitStreamReader::ReadBits(a1, 3u);
  if (result == 5)
  {
    CABitStreamReader::ReadBits(a1, 0xAu);
    int Bits = CABitStreamReader::ReadBits(a1, 4u);
    int v8 = CABitStreamReader::ReadBits(a1, 4u);
    int v9 = CABitStreamReader::ReadBits(a1, 4u);
    int v10 = CABitStreamReader::ReadBits(a1, 2u);
    uint64_t result = CABitStreamReader::ReadBits(a1, 0xAu);
    if (Bits < 1)
    {
      int v11 = 0;
    }
    else
    {
      int v11 = 0;
      do
      {
        if (CABitStreamReader::ReadBits(a1, 1u)) {
          int v12 = 2;
        }
        else {
          int v12 = 1;
        }
        v11 += v12;
        uint64_t result = CABitStreamReader::ReadBits(a1, 4u);
        --Bits;
      }
      while (Bits);
    }
    if (v8 < 1)
    {
      int v15 = 0;
    }
    else
    {
      int v15 = 0;
      do
      {
        if (CABitStreamReader::ReadBits(a1, 1u)) {
          int v16 = 2;
        }
        else {
          int v16 = 1;
        }
        v15 += v16;
        uint64_t result = CABitStreamReader::ReadBits(a1, 4u);
        --v8;
      }
      while (v8);
    }
    if (v9 < 1)
    {
      int v17 = 0;
    }
    else
    {
      int v17 = 0;
      do
      {
        if (CABitStreamReader::ReadBits(a1, 1u)) {
          int v18 = 2;
        }
        else {
          int v18 = 1;
        }
        v17 += v18;
        uint64_t result = CABitStreamReader::ReadBits(a1, 4u);
        --v9;
      }
      while (v9);
    }
    int v13 = v11 + v10 + v15 + v17;
    int v19 = (v11 << 24) | (v15 << 16) | (v17 << 8) | v10;
    if (v19 == 50331648)
    {
      int v14 = 7471107;
    }
    else
    {
      int v20 = &dword_1901DA898;
      do
      {
        int v14 = *v20;
        if (!*v20) {
          break;
        }
        int v21 = *(v20 - 1);
        v20 += 2;
      }
      while (v21 != v19);
    }
  }
  else
  {
    int v13 = 0;
    int v14 = 0;
  }
  *a2 = v13;
  *a3 = v14;
  return result;
}

uint64_t MPEGAudioMaximumNumberOfDependentPackets(const AudioStreamBasicDescription *a1, unsigned int a2)
{
  AudioFormatID mFormatID = a1->mFormatID;
  if (mFormatID - 778924081 < 2) {
    return 1;
  }
  if (mFormatID != 778924083) {
    return 0;
  }
  if (a2)
  {
    double v4 = (double)a2;
    double mSampleRate = a1->mSampleRate;
  }
  else
  {
    UInt32 mBytesPerPacket = a1->mBytesPerPacket;
    if (mBytesPerPacket && (UInt32 mFramesPerPacket = a1->mFramesPerPacket) != 0)
    {
      double mSampleRate = a1->mSampleRate;
      double v4 = a1->mSampleRate / (double)mFramesPerPacket * (double)mBytesPerPacket * 8.0 / 1000.0;
    }
    else
    {
      double mSampleRate = a1->mSampleRate;
      double v4 = 32.0;
      if (a1->mSampleRate <= 24000.0) {
        double v4 = 8.0;
      }
    }
  }
  UInt32 mChannelsPerFrame = a1->mChannelsPerFrame;
  if (mChannelsPerFrame == 1) {
    int v9 = -17;
  }
  else {
    int v9 = -32;
  }
  if (mChannelsPerFrame == 1) {
    int v10 = -9;
  }
  else {
    int v10 = -17;
  }
  if (mSampleRate <= 24000.0) {
    int v11 = v10;
  }
  else {
    int v11 = v9;
  }
  int v12 = (int)(v4 * (double)(125 * a1->mFramesPerPacket) / (double)mSampleRate) + v11 - 6;
  if (v12 < 1)
  {
    if (mChannelsPerFrame == 1) {
      return 18;
    }
    else {
      return 8;
    }
  }
  else
  {
    if (mSampleRate <= 24000.0) {
      unsigned int v13 = 257;
    }
    else {
      unsigned int v13 = 511;
    }
    return v13 / v12 + 2;
  }
}

uint64_t MP4BoxParser_iTunesMeaningDataItem::Init(MP4BoxParser_iTunesMeaningDataItem *this)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = MP4BoxParser::Initialize(this);
  if (!v2)
  {
    if (*((_DWORD *)this + 5) == 757935405)
    {
      int v3 = 0;
      int v4 = 0;
      int v5 = 0;
      unsigned int v6 = 0;
      unint64_t v7 = 0;
      uint64_t v2 = 0;
      uint64_t v8 = (*(unsigned int (**)(MP4BoxParser_iTunesMeaningDataItem *))(*(void *)this + 24))(this);
      while (1)
      {
        unint64_t v9 = *((void *)this + 3);
        if (v9 <= (*(unsigned int (**)(MP4BoxParser_iTunesMeaningDataItem *))(*(void *)this + 24))(this)) {
          unint64_t v10 = 0;
        }
        else {
          unint64_t v10 = *((void *)this + 3);
        }
        if (v10 < v7 + 8) {
          return v2;
        }
        uint64_t DataSourceBytes = MP4BoxParser::ReadDataSourceBytes(*((MP4BoxParser **)this + 1), v8, 8uLL, v25);
        if (DataSourceBytes) {
          break;
        }
        unsigned int v13 = v25[0];
        unsigned int v12 = v25[1];
        unint64_t v14 = *((void *)this + 3);
        if (v14 <= (*(unsigned int (**)(MP4BoxParser_iTunesMeaningDataItem *))(*(void *)this + 24))(this)) {
          unint64_t v15 = 0;
        }
        else {
          unint64_t v15 = *((void *)this + 3);
        }
        uint64_t v16 = bswap32(v13);
        v7 += v16;
        if (v15 < v7)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
            unsigned int v27 = "MP4_BoxParser_Meta.cpp";
            __int16 v28 = 1024;
            int v29 = 521;
            int v20 = MEMORY[0x1E4F14500];
            int v21 = "%25s:%-5d  '----' box is too small for the child box size";
            goto LABEL_46;
          }
          return 0xFFFFFFFFLL;
        }
        if (v16 <= 7)
        {
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            return 0xFFFFFFFFLL;
          }
          *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
          unsigned int v27 = "MP4_BoxParser_Meta.cpp";
          __int16 v28 = 1024;
          int v29 = 522;
          int v20 = MEMORY[0x1E4F14500];
          int v21 = "%25s:%-5d  child box size is too small for its box header";
LABEL_46:
          _os_log_impl(&dword_18FEC0000, v20, OS_LOG_TYPE_ERROR, v21, buf, 0x12u);
          return 0xFFFFFFFFLL;
        }
        unsigned int v17 = bswap32(v12);
        switch(v17)
        {
          case 0x64617461u:
            if (v3)
            {
              uint64_t v2 = 0;
            }
            else
            {
              if (v16 <= 0xF)
              {
                if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                  return 0xFFFFFFFFLL;
                }
                *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
                unsigned int v27 = "MP4_BoxParser_Meta.cpp";
                __int16 v28 = 1024;
                int v29 = 571;
                int v20 = MEMORY[0x1E4F14500];
                int v21 = "%25s:%-5d  'data' box is too small to contain data";
                goto LABEL_46;
              }
              uint64_t v2 = 0;
              *((void *)this + 10) = v8 + 16;
              *((_DWORD *)this + 18) = v16 - 16;
              ++v6;
            }
            int v3 = 1;
            break;
          case 0x6E616D65u:
            if (v4)
            {
              uint64_t v2 = 0;
            }
            else
            {
              if (v16 <= 0xB)
              {
                if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                  return 0xFFFFFFFFLL;
                }
                *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
                unsigned int v27 = "MP4_BoxParser_Meta.cpp";
                __int16 v28 = 1024;
                int v29 = 548;
                int v20 = MEMORY[0x1E4F14500];
                int v21 = "%25s:%-5d  'name' box is too small to contain a name";
                goto LABEL_46;
              }
              *((_DWORD *)this + 14) = v16 - 12;
              int v18 = malloc_type_malloc((v16 - 12), 0x2C8E6D5CuLL);
              int v19 = v18;
              if (v16 != 12 && !v18)
              {
                exceptiouint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
                OSStatus v24 = std::bad_alloc::bad_alloc(exception);
              }
              bzero(v18, (v16 - 12));
              *((void *)this + 8) = v19;
              uint64_t v2 = MP4BoxParser::ReadDataSourceBytes(*((MP4BoxParser **)this + 1), v8 + 12, *((unsigned int *)this + 14), v19);
              if (v2)
              {
                free(*((void **)this + 8));
                *((void *)this + 8) = 0;
                *((_DWORD *)this + 14) = 0;
              }
              ++v6;
            }
            int v4 = 1;
            break;
          case 0x6D65616Eu:
            if (v5)
            {
              uint64_t v2 = 0;
            }
            else
            {
              if (v16 <= 0xB)
              {
                if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                  return 0xFFFFFFFFLL;
                }
                *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
                unsigned int v27 = "MP4_BoxParser_Meta.cpp";
                __int16 v28 = 1024;
                int v29 = 530;
                int v20 = MEMORY[0x1E4F14500];
                int v21 = "%25s:%-5d  'mean' box is too small to contain a meaning";
                goto LABEL_46;
              }
              uint64_t v2 = 0;
              ++v6;
            }
            int v5 = 1;
            break;
          default:
            uint64_t v2 = 0;
            break;
        }
        v8 += v16;
        if (v6 >= 3) {
          return v2;
        }
      }
      uint64_t v2 = DataSourceBytes;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
        unsigned int v27 = "MP4_BoxParser_Meta.cpp";
        __int16 v28 = 1024;
        int v29 = 516;
        _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to read child box header", buf, 0x12u);
      }
    }
    else
    {
      return 4294967294;
    }
  }
  return v2;
}

void MP4BoxParser_iTunesMeaningDataItem::~MP4BoxParser_iTunesMeaningDataItem(MP4BoxParser_iTunesMeaningDataItem *this)
{
  MP4BoxParser_iTunesMeaningDataItem::~MP4BoxParser_iTunesMeaningDataItem(this);
  JUMPOUT(0x192FC8940);
}

{
  void *v2;
  uint64_t v3;

  *(void *)this = &unk_1EDF949D8;
  uint64_t v2 = (void *)*((void *)this + 8);
  if (v2) {
    free(v2);
  }
  int v3 = *((void *)this + 1);
  *(void *)this = &unk_1EDF8DA18;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
}

uint64_t MP4BoxParser_iTunesDataItem::Init(MP4BoxParser **this)
{
  uint64_t result = MP4BoxParser::Initialize((MP4BoxParser *)this);
  if (!result)
  {
    unsigned int v3 = (*((uint64_t (**)(MP4BoxParser **))*this + 3))(this);
    if (MP4BoxParser::ReadDataSourceBytes(this[1], v3, 0x10uLL, this + 7)
      || *((_DWORD *)this + 15) != 1635017060)
    {
      bzero(this + 7, 0x10uLL);
      return 4294966295;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void MP4BoxParser_iTunesDataItem::~MP4BoxParser_iTunesDataItem(MP4BoxParser_iTunesDataItem *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDF8DA18;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  JUMPOUT(0x192FC8940);
}

{
  uint64_t v2;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDF8DA18;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

uint64_t MP4BoxParser_Meta::Init(MP4BoxParser_Meta *this)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  uint64_t result = MP4BoxParser_Full::Initialize(this);
  if (!result)
  {
    if (*((_DWORD *)this + 5) == 1835365473) {
      operator new();
    }
    return 4294967294;
  }
  return result;
}

void sub_19005FE4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  _Unwind_Resume(exception_object);
}

void MP4BoxParser_Meta::~MP4BoxParser_Meta(MP4BoxParser_Meta *this)
{
  MP4BoxParser_Meta::~MP4BoxParser_Meta(this);
  JUMPOUT(0x192FC8940);
}

{
  uint64_t v2;
  uint64_t v3;

  *(void *)this = &unk_1EDF92040;
  uint64_t v2 = *((void *)this + 8);
  if (v2)
  {
    std::__list_imp<MP4BoxInfo>::clear(*((uint64_t **)this + 8));
    MEMORY[0x192FC8940](v2, 0x1020C4062D53EE8);
  }
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EDF8DA18;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
}

uint64_t MP4BoxParser_iTunesMeta::Init(MP4BoxParser_iTunesMeta *this)
{
  uint64_t result = MP4BoxParser_Meta::Init(this);
  if (!result)
  {
    if (*((_DWORD *)this + 18) != 1835297138) {
      return 4294966295;
    }
    uint64_t v3 = *((void *)this + 8);
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4 == v3)
    {
      return 4294966295;
    }
    else
    {
      while (*(_DWORD *)(v4 + 16) != 1768715124)
      {
        uint64_t v4 = *(void *)(v4 + 8);
        if (v4 == v3) {
          return 4294966295;
        }
      }
      return 0;
    }
  }
  return result;
}

void MP4BoxParser_iTunesMeta::~MP4BoxParser_iTunesMeta(MP4BoxParser_iTunesMeta *this)
{
  MP4BoxParser_Meta::~MP4BoxParser_Meta(this);
  JUMPOUT(0x192FC8940);
}

uint64_t MP4BoxParser_iTunesSMPBMeta::Init(AudioFilePacketTableInfo *this)
{
  uint64_t v2 = MP4BoxParser_iTunesMeta::Init((MP4BoxParser_iTunesMeta *)this);
  if (!v2)
  {
    unsigned int DataSizeForMeaningName = MP4BoxParser_iTunesMeta::GetDataSizeForMeaningName((MP4BoxParser_iTunesMeta *)this, "iTunSMPB");
    this[4].SInt32 mRemainderFrames = DataSizeForMeaningName;
    if (DataSizeForMeaningName)
    {
      size_t v4 = DataSizeForMeaningName;
      int v5 = (char *)malloc_type_malloc(DataSizeForMeaningName, 0x2C8E6D5CuLL);
      if (!v5)
      {
        exceptiouint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        unint64_t v10 = std::bad_alloc::bad_alloc(exception);
      }
      unsigned int v6 = v5;
      bzero(v5, v4);
      SInt32 mRemainderFrames = this[4].mRemainderFrames;
      if (MP4BoxParser_iTunesMeta::GetDataForMeaningName((MP4BoxParser_iTunesMeta *)this, "iTunSMPB", v6, (unsigned int *)&mRemainderFrames, v7))uint64_t v2 = 0; {
      else
      }
        uint64_t v2 = ParseiTunesSMPBData(v6 + 9, mRemainderFrames - 9, this + 5);
      free(v6);
    }
    else
    {
      return 4294966295;
    }
  }
  return v2;
}

const char *MP4BoxParser_iTunesMeta::GetDataSizeForMeaningName(MP4BoxParser_iTunesMeta *this, const char *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 8);
  uint64_t v3 = *(void *)(v2 + 8);
  if (v3 == v2) {
    return 0;
  }
  uint64_t v5 = *(void *)(v2 + 8);
  while (*(_DWORD *)(v5 + 16) != 1768715124)
  {
    uint64_t v5 = *(void *)(v5 + 8);
    if (v5 == v2) {
      return 0;
    }
  }
  while (*(_DWORD *)(v3 + 16) != 1768715124)
  {
    uint64_t v3 = *(void *)(v3 + 8);
    if (v3 == v2) {
      return 0;
    }
  }
  uint64_t v7 = *(void *)(v3 + 40);
  if (!v7) {
    return 0;
  }
  (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 1) + 88))(&v16);
  (*(void (**)(uint64_t, void))(*(void *)v16 + 32))(v16, *(void *)(v5 + 24));
  uint64_t v8 = *(void *)(v7 + 8);
  if (v8 == v7) {
    goto LABEL_29;
  }
  unsigned int v9 = 0;
  while (2)
  {
    unsigned int v10 = 0;
    uint64_t v11 = v8;
    do
    {
      if (*(_DWORD *)(v11 + 16) == 757935405) {
        ++v10;
      }
      uint64_t v11 = *(void *)(v11 + 8);
    }
    while (v11 != v7);
    if (v9 >= v10) {
      break;
    }
    int v12 = 0;
    uint64_t v13 = v8;
    while (*(_DWORD *)(v13 + 16) != 757935405)
    {
LABEL_21:
      uint64_t v13 = *(void *)(v13 + 8);
      if (v13 == v7) {
        goto LABEL_28;
      }
    }
    if (v12 != v9)
    {
      ++v12;
      goto LABEL_21;
    }
    unsigned int v17 = &unk_1EDF8DA18;
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v16 + 88))(&v18);
    char v19 = 0;
    int v20 = 0;
    uint64_t v21 = 0;
    char v22 = 0;
    int v23 = 8;
    unsigned int v17 = &unk_1EDF949D8;
    int v24 = 0;
    __s1 = 0;
    unsigned int v26 = 0;
    uint64_t v27 = 0;
    if (!MP4BoxParser_iTunesMeaningDataItem::Init((MP4BoxParser_iTunesMeaningDataItem *)&v17)
      && __s1
      && v24 == 8
      && !strncmp(__s1, a2, 8uLL))
    {
      a2 = (const char *)v26;
      MP4BoxParser_iTunesMeaningDataItem::~MP4BoxParser_iTunesMeaningDataItem((MP4BoxParser_iTunesMeaningDataItem *)&v17);
      char v14 = 0;
      goto LABEL_30;
    }
    MP4BoxParser_iTunesMeaningDataItem::~MP4BoxParser_iTunesMeaningDataItem((MP4BoxParser_iTunesMeaningDataItem *)&v17);
    uint64_t v8 = *(void *)(v7 + 8);
LABEL_28:
    ++v9;
    if (v8 != v7) {
      continue;
    }
    break;
  }
LABEL_29:
  char v14 = 1;
LABEL_30:
  uint64_t v15 = v16;
  uint64_t v16 = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  if (v14) {
    return 0;
  }
  return a2;
}

void sub_1900603EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MP4BoxParser_iTunesMeta::GetDataForMeaningName(MP4BoxParser_iTunesMeta *this, const char *a2, void *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *((void *)this + 8);
  uint64_t v6 = *(void *)(v5 + 8);
  if (v6 == v5) {
    return 4294966295;
  }
  uint64_t v10 = *(void *)(v5 + 8);
  while (*(_DWORD *)(v10 + 16) != 1768715124)
  {
    uint64_t v10 = *(void *)(v10 + 8);
    if (v10 == v5) {
      return 4294966295;
    }
  }
  while (*(_DWORD *)(v6 + 16) != 1768715124)
  {
    uint64_t v6 = *(void *)(v6 + 8);
    if (v6 == v5) {
      return 4294966295;
    }
  }
  uint64_t v12 = *(void *)(v6 + 40);
  if (!v12) {
    return 4294966295;
  }
  (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 1) + 88))(&v23);
  (*(void (**)(uint64_t, void))(*(void *)v23 + 32))(v23, *(void *)(v10 + 24));
  uint64_t v13 = *(void *)(v12 + 8);
  if (v13 == v12) {
    goto LABEL_34;
  }
  unsigned int v14 = 0;
  while (2)
  {
    unsigned int v15 = 0;
    uint64_t v16 = v13;
    do
    {
      if (*(_DWORD *)(v16 + 16) == 757935405) {
        ++v15;
      }
      uint64_t v16 = *(void *)(v16 + 8);
    }
    while (v16 != v12);
    if (v14 >= v15) {
      break;
    }
    int v17 = 0;
    uint64_t v18 = v13;
    while (*(_DWORD *)(v18 + 16) != 757935405)
    {
LABEL_21:
      uint64_t v18 = *(void *)(v18 + 8);
      if (v18 == v12) {
        goto LABEL_25;
      }
    }
    if (v17 != v14)
    {
      ++v17;
      goto LABEL_21;
    }
    int v24 = &unk_1EDF8DA18;
    (*(void (**)(MP4BoxParser **__return_ptr))(*(void *)v23 + 88))(&v25);
    char v26 = 0;
    int v27 = 0;
    uint64_t v28 = 0;
    char v29 = 0;
    int v30 = 8;
    int v24 = &unk_1EDF949D8;
    int v31 = 0;
    __s1 = 0;
    unsigned int v33 = 0;
    uint64_t v34 = 0;
    if (!MP4BoxParser_iTunesMeaningDataItem::Init((MP4BoxParser_iTunesMeaningDataItem *)&v24))
    {
      if (__s1)
      {
        if (!strncmp(__s1, a2, 8uLL))
        {
          unsigned int v19 = v33;
          unint64_t v20 = *a4;
          if (v20 >= v33 && !MP4BoxParser::ReadDataSourceBytes(v25, v34, v20, a3))
          {
            *a4 = v19;
            MP4BoxParser_iTunesMeaningDataItem::~MP4BoxParser_iTunesMeaningDataItem((MP4BoxParser_iTunesMeaningDataItem *)&v24);
            uint64_t v21 = v23;
            uint64_t v23 = 0;
            if (v21) {
              (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
            }
            return 0;
          }
        }
      }
    }
    MP4BoxParser_iTunesMeaningDataItem::~MP4BoxParser_iTunesMeaningDataItem((MP4BoxParser_iTunesMeaningDataItem *)&v24);
    uint64_t v13 = *(void *)(v12 + 8);
LABEL_25:
    ++v14;
    if (v13 != v12) {
      continue;
    }
    break;
  }
LABEL_34:
  uint64_t v22 = v23;
  uint64_t v23 = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  return 4294966295;
}

void sub_190060758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  MP4BoxParser_iTunesMeaningDataItem::~MP4BoxParser_iTunesMeaningDataItem((MP4BoxParser_iTunesMeaningDataItem *)va);
  if (a3) {
    (*(void (**)(uint64_t))(*(void *)a3 + 8))(a3);
  }
  _Unwind_Resume(a1);
}

void MP4BoxParser_iTunesSMPBMeta::~MP4BoxParser_iTunesSMPBMeta(MP4BoxParser_iTunesSMPBMeta *this)
{
  MP4BoxParser_Meta::~MP4BoxParser_Meta(this);
  JUMPOUT(0x192FC8940);
}

uint64_t MP4BoxParser_iTunesNORMMeta::Init(MP4BoxParser_iTunesNORMMeta *this)
{
  uint64_t result = MP4BoxParser_Meta::Init(this);
  if (!result)
  {
    unsigned int DataSizeForMeaningName = MP4BoxParser_iTunesMeta::GetDataSizeForMeaningName(this, "iTunNORM");
    *((_DWORD *)this + 19) = DataSizeForMeaningName;
    if (DataSizeForMeaningName) {
      return 0;
    }
    else {
      return 4294966295;
    }
  }
  return result;
}

void MP4BoxParser_iTunesNORMMeta::~MP4BoxParser_iTunesNORMMeta(MP4BoxParser_iTunesNORMMeta *this)
{
  MP4BoxParser_Meta::~MP4BoxParser_Meta(this);
  JUMPOUT(0x192FC8940);
}

uint64_t InitiiTunesMetaItemFromInfoDictionary(unsigned __int8 *a1, unsigned int a2, const __CFDictionary *a3, int a4, int *a5)
{
  if (!a1 || a2 >= 0x10)
  {
    thechar String = 0;
    CFDictionaryRef v33 = a3;
    __int16 v34 = 0;
    InfoDictionaryKeyForMetaItemKey = GetInfoDictionaryKeyForMetaItemKey(a4);
    char String = CACFDictionary::GetString((CACFDictionary *)&v33, InfoDictionaryKeyForMetaItemKey, &theString);
    CFStringRef v12 = theString;
    if (!theString) {
      char String = 0;
    }
    if ((String & 1) == 0)
    {
      uint64_t v9 = 4294966294;
      goto LABEL_84;
    }
    unint64_t v13 = a2;
    *a5 = 0;
    uint64_t v9 = 4294966295;
    if (a4 > -1452051406)
    {
      if (a4 <= 1668313715)
      {
        if (a4 != -1452051405 && a4 != -1451987089)
        {
          int v14 = -1451789708;
          goto LABEL_25;
        }
      }
      else
      {
        if (a4 > 1953329262)
        {
          if (a4 != 1953655662)
          {
            if (a4 != 1953329263) {
              goto LABEL_84;
            }
            SInt32 IntValue = CFStringGetIntValue(v12);
            if (!a1)
            {
              unsigned int Length = 2;
              goto LABEL_83;
            }
            *((_WORD *)a1 + 12) = bswap32(IntValue) >> 16;
            *((_DWORD *)a1 + 1) = 1869639028;
            unsigned int Length = 2;
            goto LABEL_54;
          }
          LOWORD(usedBufLen) = 0;
          LOWORD(buffer) = 0;
          if (ParseTrackNumberString(v12, (unsigned __int16 *)&usedBufLen, (unsigned __int16 *)&buffer))
          {
            if (a1)
            {
              if (a2 < 0x20) {
                goto LABEL_84;
              }
              unsigned int v26 = bswap32((unsigned __int16)usedBufLen) >> 16;
              unsigned int v27 = bswap32((unsigned __int16)buffer) >> 16;
              *((_WORD *)a1 + 12) = 0;
              *((_WORD *)a1 + 13) = v26;
              *((_DWORD *)a1 + 7) = (unsigned __int16)v27;
            }
            unsigned int Length = 8;
            goto LABEL_46;
          }
LABEL_45:
          unsigned int Length = 0;
LABEL_46:
          BOOL v23 = 0;
          goto LABEL_47;
        }
        if (a4 != 1668313716)
        {
          int v14 = 1769173603;
          goto LABEL_25;
        }
      }
    }
    else
    {
      if (a4 > -1453101709)
      {
        if (a4 > -1452841619)
        {
          if (a4 == -1452841618)
          {
            unsigned int Length = CFStringGetLength(v12);
            size_t v18 = Length + 1;
            CADeprecated::CAAutoFree<char>::CAAutoFree(&usedBufLen, v18);
            CFStringRef v19 = theString;
            unint64_t v20 = (char *)usedBufLen;
            CFStringEncoding SystemEncoding = CFStringGetSystemEncoding();
            CFStringGetCString(v19, v20, v18, SystemEncoding);
            unint64_t v22 = 0;
            BOOL v23 = 1;
            int v24 = (char *)usedBufLen;
            while (strcmp(v24, kGenreTable[v22]))
            {
              BOOL v23 = v22++ < 0x93;
              if (v22 == 148)
              {
                BOOL v23 = 0;
                unsigned int v25 = 1;
                goto LABEL_68;
              }
            }
            if (v23) {
              unsigned int Length = 2;
            }
            unsigned int v25 = v22 + 1;
LABEL_68:
            if (a1)
            {
              if ((unint64_t)Length + 24 > v13)
              {
                if (v24) {
                  free(v24);
                }
                goto LABEL_29;
              }
              if (v23)
              {
                *((_DWORD *)a1 + 6) = bswap32(v25) >> 16;
              }
              else
              {
                memcpy(a1 + 24, v24, Length);
                BOOL v23 = 0;
              }
            }
            if (v24) {
              free(v24);
            }
LABEL_47:
            if (!a1)
            {
LABEL_83:
              uint64_t v9 = 0;
              *a5 = Length + 24;
              goto LABEL_84;
            }
            if (v23)
            {
              unsigned __int8 v28 = 0;
              *((_DWORD *)a1 + 1) = 1701998183;
LABEL_82:
              a1[19] = v28;
              *(_DWORD *)a1 = bswap32(Length + 24);
              *((_DWORD *)a1 + 2) = bswap32(Length + 16);
              *((_DWORD *)a1 + 3) = 1635017060;
              *((_WORD *)a1 + 8) = 0;
              a1[18] = 0;
              *((_DWORD *)a1 + 5) = 0;
              goto LABEL_83;
            }
            *((_DWORD *)a1 + 1) = bswap32(a4);
            unsigned __int8 v28 = 1;
            if (a4 <= -1451987090)
            {
              if (a4 > -1453039240)
              {
                if (a4 > -1452383892)
                {
                  if (a4 == -1452383891) {
                    goto LABEL_82;
                  }
                  int v29 = -1452051405;
                }
                else
                {
                  if (a4 == -1453039239) {
                    goto LABEL_82;
                  }
                  int v29 = -1452841618;
                }
              }
              else if (a4 > -1453230733)
              {
                if (a4 == -1453230732) {
                  goto LABEL_82;
                }
                int v29 = -1453101708;
              }
              else
              {
                if (a4 == -1455336876) {
                  goto LABEL_82;
                }
                int v29 = -1453233054;
              }
            }
            else if (a4 <= 1769173602)
            {
              if (a4 > 1668313715)
              {
                if (a4 == 1668313716) {
                  goto LABEL_82;
                }
                goto LABEL_81;
              }
              if (a4 == -1451987089) {
                goto LABEL_82;
              }
              int v29 = -1451789708;
            }
            else
            {
              if (a4 > 1937009002)
              {
                if (a4 == 1937009003)
                {
LABEL_54:
                  unsigned __int8 v28 = 21;
                  goto LABEL_82;
                }
LABEL_81:
                unsigned __int8 v28 = 0;
                goto LABEL_82;
              }
              if (a4 == 1769173603) {
                goto LABEL_82;
              }
              int v29 = 1886745188;
            }
            if (a4 == v29) {
              goto LABEL_82;
            }
            goto LABEL_81;
          }
          int v14 = -1452383891;
        }
        else
        {
          if (a4 == -1453101708) {
            goto LABEL_26;
          }
          int v14 = -1453039239;
        }
LABEL_25:
        if (a4 == v14) {
          goto LABEL_26;
        }
LABEL_84:
        CACFDictionary::~CACFDictionary((CACFDictionary *)&v33);
        return v9;
      }
      if (a4 != -1455336876 && a4 != -1453233054)
      {
        int v14 = -1453230732;
        goto LABEL_25;
      }
    }
LABEL_26:
    v36.length = CFStringGetLength(v12);
    usedBufLeuint64_t n = 0;
    v36.locatiouint64_t n = 0;
    if (CFStringGetBytes(theString, v36, 0x8000100u, 0, 0, 0, 256, &usedBufLen))
    {
      unsigned int Length = usedBufLen;
      if (a1)
      {
        if ((unint64_t)usedBufLen + 24 > a2)
        {
LABEL_29:
          uint64_t v9 = 4294966295;
          goto LABEL_84;
        }
        CADeprecated::CAAutoFree<char>::CAAutoFree(&buffer, (usedBufLen + 1));
        CFStringGetCString(theString, buffer, Length + 1, 0x8000100u);
        uint64_t v16 = buffer;
        memcpy(a1 + 24, buffer, Length);
        if (v16) {
          free(v16);
        }
      }
      goto LABEL_46;
    }
    goto LABEL_45;
  }
  return 4294966295;
}

void sub_190060E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, char a12)
{
}

__CFString *GetInfoDictionaryKeyForMetaItemKey(int a1)
{
  if (a1 <= -1452051406)
  {
    if (a1 <= -1453101709)
    {
      int v6 = -1455336876;
      uint64_t v7 = @"artist";
      if (a1 == -1453230732) {
        CFStringRef v12 = @"lyricist";
      }
      else {
        CFStringRef v12 = 0;
      }
      if (a1 == -1453233054) {
        uint64_t v9 = @"album";
      }
      else {
        uint64_t v9 = v12;
      }
LABEL_35:
      if (a1 == v6) {
        return v7;
      }
      else {
        return v9;
      }
    }
    if (a1 > -1452841619)
    {
      if (a1 != -1452841618)
      {
        BOOL v10 = a1 == -1452383891;
        uint64_t v11 = @"title";
LABEL_29:
        if (v10) {
          return v11;
        }
        else {
          return 0;
        }
      }
      return @"genre";
    }
    int v6 = -1453101708;
    uint64_t v7 = @"comments";
    BOOL v8 = a1 == -1453039239;
    uint64_t v9 = @"year";
LABEL_33:
    if (!v8) {
      uint64_t v9 = 0;
    }
    goto LABEL_35;
  }
  if (a1 > 1735291492)
  {
    if (a1 <= 1953329262)
    {
      if (a1 != 1735291493)
      {
        BOOL v10 = a1 == 1769173603;
        uint64_t v11 = @"ISRC";
        goto LABEL_29;
      }
      return @"genre";
    }
    int v6 = 1953329263;
    uint64_t v7 = @"tempo";
    BOOL v8 = a1 == 1953655662;
    uint64_t v9 = @"track number";
    goto LABEL_33;
  }
  uint64_t v1 = @"copyright";
  if (a1 != 1668313716) {
    uint64_t v1 = 0;
  }
  if (a1 == -1451789708) {
    uint64_t v2 = @"composer";
  }
  else {
    uint64_t v2 = v1;
  }
  uint64_t v3 = @"subtitle";
  size_t v4 = @"encoding application";
  if (a1 != -1451987089) {
    size_t v4 = 0;
  }
  if (a1 != -1452051405) {
    uint64_t v3 = v4;
  }
  if (a1 <= -1451789709) {
    return v3;
  }
  else {
    return v2;
  }
}

void *CADeprecated::CAAutoFree<char>::CAAutoFree(void *a1, size_t size)
{
  *a1 = 0;
  size_t v4 = malloc_type_malloc(size, 0x2C8E6D5CuLL);
  uint64_t v5 = v4;
  if (size && !v4)
  {
    exceptiouint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    BOOL v8 = std::bad_alloc::bad_alloc(exception);
  }
  bzero(v4, size);
  *a1 = v5;
  return a1;
}

BOOL ParseTrackNumberString(const __CFString *a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  unsigned int Length = CFStringGetLength(a1);
  size_t v7 = Length + 1;
  CADeprecated::CAAutoFree<char>::CAAutoFree(&v18, v7);
  BOOL v8 = v18;
  CFStringEncoding SystemEncoding = CFStringGetSystemEncoding();
  CFStringGetCString(a1, v8, v7, SystemEncoding);
  int v17 = 0;
  BOOL v10 = v18;
  if (Length)
  {
    uint64_t v11 = 0;
    unsigned __int16 v12 = Length;
    while (v18[v11] - 48 <= 9)
    {
      if (Length == ++v11) {
        goto LABEL_9;
      }
    }
    if (!(_WORD)v11)
    {
      BOOL v15 = 0;
      goto LABEL_20;
    }
    sscanf(v18, "%d", &v17);
    *a2 = v17;
    unsigned __int16 v12 = v11 + 1;
    BOOL v10 = v18;
  }
  else
  {
    unsigned __int16 v12 = 0;
  }
LABEL_9:
  if (v12 >= Length)
  {
LABEL_16:
    BOOL v15 = *a2 != 0;
    if (!v10) {
      return v15;
    }
  }
  else
  {
    __int16 v13 = 0;
    int v14 = v12;
    while (v10[v14] - 48 <= 9)
    {
      ++v13;
      if (++v14 > Length) {
        goto LABEL_18;
      }
    }
    if (v13)
    {
      sscanf(&v10[v12], "%d", &v17);
      *a3 = v17;
      BOOL v10 = v18;
      goto LABEL_16;
    }
LABEL_18:
    BOOL v15 = *a2 != 0;
  }
LABEL_20:
  free(v10);
  return v15;
}

void sub_190061260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  if (a12) {
    free(a12);
  }
  _Unwind_Resume(exception_object);
}

void MP4BoxParser_iTunesMeta::MP4BoxParser_iTunesMeta(MP4BoxParser_iTunesMeta *this, DataSource *a2, uint64_t a3)
{
  *(void *)this = &unk_1EDF8DA18;
  (*(void (**)(DataSource *, uint64_t))(*(void *)a2 + 88))(a2, a3);
  *((unsigned char *)this + 16) = 0;
  *((_DWORD *)this + 5) = 0;
  *((void *)this + 3) = 0;
  *((unsigned char *)this + 32) = 0;
  *((_DWORD *)this + 9) = 8;
  *((void *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  *(void *)this = &unk_1EDF93A00;
}

uint64_t MP4BoxParser_iTunesMeta::AddMetaItemDataToInfoDictionary(MP4BoxParser_iTunesMeta *this, int a2, CACFDictionary *a3)
{
  uint64_t v5 = 4294966295;
  if (a2 <= -1452051406)
  {
    if (a2 <= -1453101709)
    {
      if (a2 == -1455336876 || a2 == -1453233054) {
        goto LABEL_21;
      }
      int v6 = -1453230732;
    }
    else if (a2 > -1452841619)
    {
      if (a2 == -1452841618) {
        goto LABEL_21;
      }
      int v6 = -1452383891;
    }
    else
    {
      if (a2 == -1453101708) {
        goto LABEL_21;
      }
      int v6 = -1453039239;
    }
LABEL_20:
    if (a2 != v6) {
      return v5;
    }
    goto LABEL_21;
  }
  if (a2 > 1735291492)
  {
    if (a2 <= 1953329262)
    {
      if (a2 == 1735291493) {
        goto LABEL_21;
      }
      int v6 = 1769173603;
      goto LABEL_20;
    }
    if (a2 == 1953329263)
    {
      thechar String = 0;
      uint64_t v5 = MP4BoxParser_iTunesMeta::CopyMetaItemData(this, 1953329263, (const void **)&theString);
      if (v5) {
        return v5;
      }
      CFNumberRef v11 = (const __CFNumber *)theString;
      if (!theString) {
        return v5;
      }
      int valuePtr = 0;
      CFTypeID v16 = CFGetTypeID(theString);
      uint64_t v5 = 0;
      if (v16 != CFNumberGetTypeID()
        || (uint64_t v5 = 0, !CFNumberGetValue(v11, kCFNumberSInt32Type, &valuePtr))
        || valuePtr < 1)
      {
LABEL_46:
        uint64_t v9 = v11;
LABEL_27:
        CFRelease(v9);
        return v5;
      }
      Systeuint64_t m = CFLocaleGetSystem();
      CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFStringRef v19 = CFNumberFormatterCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], System, kCFNumberFormatterDecimalStyle);
      if (v19)
      {
        unint64_t v20 = v19;
        CFStringRef StringWithNumber = CFNumberFormatterCreateStringWithNumber(v18, v19, v11);
        if (StringWithNumber)
        {
          CFStringRef v22 = StringWithNumber;
          if (CFStringGetLength(StringWithNumber))
          {
            CACFDictionary::AddString(a3, @"tempo", v22);
            uint64_t v5 = 0;
          }
          else
          {
            uint64_t v5 = 4294966295;
          }
          CFRelease(v22);
        }
        else
        {
          uint64_t v5 = 0;
        }
        CFRelease(v20);
        goto LABEL_46;
      }
    }
    else
    {
      if (a2 != 1953655662) {
        return v5;
      }
      thechar String = 0;
      uint64_t v5 = MP4BoxParser_iTunesMeta::CopyMetaItemData(this, 1953655662, (const void **)&theString);
      if (v5) {
        return v5;
      }
      CFNumberRef v11 = (const __CFNumber *)theString;
      if (!theString) {
        return v5;
      }
      CFTypeID v12 = CFGetTypeID(theString);
      if (v12 == CFDataGetTypeID())
      {
        TrackNumberchar String = MP4BoxParser_iTunesMeta::CreateTrackNumberString(v11, v13);
        if (!TrackNumberString)
        {
          uint64_t v5 = 4294966295;
          goto LABEL_46;
        }
        BOOL v15 = TrackNumberString;
        CACFDictionary::AddString(a3, @"track number", TrackNumberString);
        CFRelease(v15);
      }
    }
    uint64_t v5 = 0;
    goto LABEL_46;
  }
  if (a2 > -1451789709)
  {
    if (a2 == -1451789708) {
      goto LABEL_21;
    }
    int v6 = 1668313716;
    goto LABEL_20;
  }
  if (a2 != -1452051405)
  {
    int v6 = -1451987089;
    goto LABEL_20;
  }
LABEL_21:
  thechar String = 0;
  uint64_t v5 = MP4BoxParser_iTunesMeta::CopyMetaItemData(this, a2, (const void **)&theString);
  if (!v5)
  {
    CFStringRef v7 = theString;
    if (theString)
    {
      if (CFStringGetLength(theString))
      {
        InfoDictionaryKeyForMetaItemKey = GetInfoDictionaryKeyForMetaItemKey(a2);
        CACFDictionary::AddString(a3, InfoDictionaryKeyForMetaItemKey, v7);
        uint64_t v5 = 0;
      }
      else
      {
        uint64_t v5 = 4294966295;
      }
      uint64_t v9 = v7;
      goto LABEL_27;
    }
  }
  return v5;
}

uint64_t MP4BoxParser_iTunesMeta::CopyMetaItemData(MP4BoxParser_iTunesMeta *this, int a2, const void **a3)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)this + 8);
  uint64_t v4 = *(void *)(v3 + 8);
  if (v4 == v3) {
    return 4294966295;
  }
  uint64_t v7 = *(void *)(v3 + 8);
  while (*(_DWORD *)(v7 + 16) != 1768715124)
  {
    uint64_t v7 = *(void *)(v7 + 8);
    if (v7 == v3) {
      return 4294966295;
    }
  }
  while (*(_DWORD *)(v4 + 16) != 1768715124)
  {
    uint64_t v4 = *(void *)(v4 + 8);
    if (v4 == v3) {
      return 4294966295;
    }
  }
  uint64_t v10 = *(void *)(v4 + 40);
  if (!v10) {
    return 4294966295;
  }
  (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 1) + 88))(&v29);
  (*(void (**)(uint64_t, void))(*(void *)v29 + 32))(v29, *(void *)(v7 + 24));
  for (uint64_t i = *(void *)(v10 + 8); ; uint64_t i = *(void *)(i + 8))
  {
    if (i == v10)
    {
      uint64_t DataSourceBytes = 4294966295;
      goto LABEL_52;
    }
    if (*(_DWORD *)(i + 16) == a2) {
      break;
    }
  }
  int v30 = (uint64_t (**)(MP4BoxParser **))&unk_1EDF8DA18;
  (*(void (**)(MP4BoxParser **__return_ptr))(*(void *)v29 + 88))(&v31);
  char v32 = 0;
  int v33 = 0;
  uint64_t v34 = 0;
  char v35 = 0;
  int v36 = 8;
  int v30 = (uint64_t (**)(MP4BoxParser **))&unk_1EDF94320;
  uint64_t DataSourceBytes = MP4BoxParser_iTunesDataItem::Init((MP4BoxParser **)&v30);
  if (DataSourceBytes) {
    goto LABEL_50;
  }
  size_t v12 = bswap32(v37) - 16;
  CFDataRef v13 = (unsigned __int16 *)malloc_type_malloc(v12, 0x2C8E6D5CuLL);
  int v14 = v13;
  if (v13) {
    BOOL v15 = 1;
  }
  else {
    BOOL v15 = v12 == 0;
  }
  if (!v15)
  {
    exceptiouint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    unsigned int v27 = std::bad_alloc::bad_alloc(exception);
  }
  bzero(v13, v12);
  unsigned int v16 = v30[3]((MP4BoxParser **)&v30);
  uint64_t DataSourceBytes = MP4BoxParser::ReadDataSourceBytes(v31, v16 + 16, v12, v14);
  if (!DataSourceBytes)
  {
    uint64_t DataSourceBytes = 4294966293;
    if (v38 <= 0xCu)
    {
      if (v38)
      {
        if (v38 != 1) {
          goto LABEL_48;
        }
        int v17 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)v14, v12, 0x8000100u, 0);
        goto LABEL_32;
      }
      if (a2 == 1668249202)
      {
        puts("kiTunesArtworkKey");
        goto LABEL_47;
      }
      if (a2 != 1953655662)
      {
        if (a2 != 1735291493) {
          goto LABEL_48;
        }
        if (v12 >= 2)
        {
          int v18 = (int)bswap32(*v14) >> 16;
          if (v18 <= 147)
          {
            unsigned int v19 = v18 - 1;
            if (v19 <= 0x93) {
              unint64_t v20 = kGenreTable[v19];
            }
            else {
              unint64_t v20 = "Blues";
            }
LABEL_58:
            unsigned int v25 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v20, 0x201u);
LABEL_59:
            uint64_t DataSourceBytes = 0;
            *a3 = v25;
            goto LABEL_49;
          }
LABEL_44:
          uint64_t DataSourceBytes = 0;
LABEL_49:
          free(v14);
          goto LABEL_50;
        }
LABEL_47:
        uint64_t DataSourceBytes = 0;
        goto LABEL_48;
      }
    }
    else if (v38 - 13 >= 2)
    {
      if (v38 != 18)
      {
        if (v38 == 21)
        {
          uint64_t DataSourceBytes = 0;
          switch(bswap32(v37))
          {
            case 0x11u:
              int v17 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt8Type, v14);
              goto LABEL_32;
            case 0x12u:
              LOWORD(v28) = bswap32(*v14) >> 16;
              unsigned int v25 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt16Type, &v28);
              goto LABEL_59;
            case 0x14u:
              LODWORD(v28) = *(unsigned __int8 *)v14 << 24;
              unsigned int v25 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &v28);
              goto LABEL_59;
            case 0x18u:
              unint64_t v28 = (unint64_t)*(unsigned __int8 *)v14 << 56;
              unsigned int v25 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, &v28);
              goto LABEL_59;
            default:
              goto LABEL_48;
          }
        }
        goto LABEL_48;
      }
      if (v12 >= 2)
      {
        int v21 = (int)bswap32(*v14) >> 16;
        if (v21 <= 147)
        {
          unsigned int v22 = v21 - 1;
          if (v22 <= 0x93) {
            unint64_t v20 = kGenreTable[v22];
          }
          else {
            unint64_t v20 = "Blues";
          }
          goto LABEL_58;
        }
        goto LABEL_44;
      }
      goto LABEL_47;
    }
    int v17 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)v14, v12);
LABEL_32:
    uint64_t DataSourceBytes = 0;
    *a3 = v17;
  }
LABEL_48:
  if (v14) {
    goto LABEL_49;
  }
LABEL_50:
  BOOL v23 = v31;
  int v30 = (uint64_t (**)(MP4BoxParser **))&unk_1EDF8DA18;
  int v31 = 0;
  if (v23) {
    (*(void (**)(MP4BoxParser *))(*(void *)v23 + 8))(v23);
  }
LABEL_52:
  uint64_t v24 = v29;
  uint64_t v29 = 0;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  return DataSourceBytes;
}

void sub_190061BD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

__CFString *MP4BoxParser_iTunesMeta::CreateTrackNumberString(MP4BoxParser_iTunesMeta *this, const __CFData *a2)
{
  CFIndex Length = CFDataGetLength(this);
  BytePtr = CFDataGetBytePtr(this);
  uint64_t v5 = 0;
  if (!BytePtr || Length < 4) {
    return v5;
  }
  int v6 = BytePtr;
  uint64_t v7 = BytePtr[1];
  if (Length < (unint64_t)(v7 + 4)) {
    return 0;
  }
  int v8 = bswap32(*(unsigned __int16 *)&BytePtr[v7 + 2]);
  __int16 valuePtr = HIWORD(v8);
  if (v8 >> 16 < 1) {
    return 0;
  }
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFNumberRef v10 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt16Type, &valuePtr);
  if (!v10) {
    return 0;
  }
  CFNumberRef v11 = v10;
  Systeuint64_t m = CFLocaleGetSystem();
  CFDataRef v13 = CFNumberFormatterCreate(v9, System, kCFNumberFormatterDecimalStyle);
  if (!v13) {
    goto LABEL_23;
  }
  int v14 = v13;
  CFStringRef StringWithNumber = CFNumberFormatterCreateStringWithNumber(v9, v13, v11);
  if (!StringWithNumber)
  {
    CFRelease(v14);
LABEL_23:
    uint64_t v5 = 0;
LABEL_24:
    CFRelease(v11);
    return v5;
  }
  CFStringRef v16 = StringWithNumber;
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v9, 128);
  uint64_t v5 = Mutable;
  if (!Mutable) {
    goto LABEL_17;
  }
  CFStringAppend(Mutable, v16);
  uint64_t v18 = v6[1];
  if (Length >= (unint64_t)(v18 + 6))
  {
    int v19 = bswap32(*(unsigned __int16 *)&v6[v18 + 4]);
    __int16 v21 = HIWORD(v19);
    if (valuePtr <= v19 >> 16)
    {
      CFRelease(v11);
      CFNumberRef v11 = CFNumberCreate(v9, kCFNumberSInt16Type, &v21);
      if (v11)
      {
        CFRelease(v16);
        CFStringRef v16 = CFNumberFormatterCreateStringWithNumber(v9, v14, v11);
        if (v16)
        {
          CFStringAppend(v5, @"/");
          CFStringAppend(v5, v16);
        }
      }
    }
  }
  if (!CFStringGetLength(v5))
  {
    CFRelease(v5);
    uint64_t v5 = 0;
  }
  if (v16) {
LABEL_17:
  }
    CFRelease(v16);
  CFRelease(v14);
  if (v11) {
    goto LABEL_24;
  }
  return v5;
}

uint64_t MP4BoxParser_iTunesMeta::GetStoreKind(MP4BoxParser_iTunesMeta *this)
{
  CFNumberRef number = 0;
  unsigned __int8 valuePtr = 0;
  int v1 = MP4BoxParser_iTunesMeta::CopyMetaItemData(this, 1937009003, (const void **)&number);
  uint64_t result = 0;
  if (!v1)
  {
    CFNumberRef v3 = number;
    if (number)
    {
      CFNumberGetValue(number, kCFNumberSInt8Type, &valuePtr);
      CFRelease(v3);
      return valuePtr;
    }
  }
  return result;
}

void MP4BoxParser_iTunesNORMMeta::FillSoundCheckDictionary(MP4BoxParser_iTunesNORMMeta *this, CACFDictionary *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  unsigned int DataSizeForMeaningName = MP4BoxParser_iTunesMeta::GetDataSizeForMeaningName(this, "iTunNORM");
  *((_DWORD *)this + 19) = DataSizeForMeaningName;
  if (DataSizeForMeaningName)
  {
    int v5 = *((_DWORD *)this + 20);
    if (v5 && DataSizeForMeaningName >= 45 * v5)
    {
      size_t v7 = DataSizeForMeaningName + 1;
      int v8 = malloc_type_malloc(v7, 0x2C8E6D5CuLL);
      CFAllocatorRef v9 = v8;
      if (!v7 || v8)
      {
        bzero(v8, v7);
        if (!v9) {
          return;
        }
        unsigned int v22 = *((_DWORD *)this + 19);
        if (MP4BoxParser_iTunesMeta::GetDataForMeaningName(this, "iTunNORM", v9, &v22, v10)) {
          goto LABEL_18;
        }
        unsigned int v11 = 5 * v5;
        size_t v12 = 4 * (5 * v5);
        CFDataRef v13 = malloc_type_malloc(v12, 0x2C8E6D5CuLL);
        if (v13)
        {
          int v14 = v13;
          bzero(v13, v12);
          unint64_t v15 = 0;
          if (v11 <= 1) {
            unsigned int v16 = 1;
          }
          else {
            unsigned int v16 = v11;
          }
          uint64_t v17 = 4 * v16;
          uint64_t v18 = (const char *)v9;
          do
          {
            sscanf(v18, "%X", &v14[v15 / 4]);
            v18 += 9;
            v15 += 4;
          }
          while (v17 != v15);
          FillStringFromValues(v23, v14, (unsigned int *)*((unsigned int *)this + 20));
          uint64_t v19 = *((unsigned int *)this + 20);
          CACFDictionary::AddCString(a2, @"sc ave perceived power coeff", v23);
          FillStringFromValues(v23, &v14[v19], (unsigned int *)*((unsigned int *)this + 20));
          LODWORD(v19) = *((_DWORD *)this + 20) + v19;
          CACFDictionary::AddCString(a2, @"sc max perceived power coeff", v23);
          FillStringFromValues(v23, &v14[v19], (unsigned int *)*((unsigned int *)this + 20));
          LODWORD(v19) = *((_DWORD *)this + 20) + v19;
          CACFDictionary::AddCString(a2, @"sc max perceived power msec", v23);
          FillStringFromValues(v23, &v14[v19], (unsigned int *)*((unsigned int *)this + 20));
          LODWORD(v19) = *((_DWORD *)this + 20) + v19;
          CACFDictionary::AddCString(a2, @"sc peak amplitude", v23);
          FillStringFromValues(v23, &v14[v19], (unsigned int *)*((unsigned int *)this + 20));
          CACFDictionary::AddCString(a2, @"sc peak amplitude msec", v23);
          free(v14);
LABEL_18:
          free(v9);
          return;
        }
      }
      exceptiouint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      __int16 v21 = std::bad_alloc::bad_alloc(exception);
    }
  }
}

uint64_t FillStringFromValues(char *a1, _DWORD *a2, unsigned int *a3)
{
  unsigned int v3 = a3;
  *((_OWORD *)a1 + 14) = 0u;
  *((_OWORD *)a1 + 15) = 0u;
  *((_OWORD *)a1 + 12) = 0u;
  *((_OWORD *)a1 + 13) = 0u;
  *((_OWORD *)a1 + 10) = 0u;
  *((_OWORD *)a1 + 11) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 9) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  uint64_t result = snprintf(a1, 0x100uLL, "%u", *a2);
  if (v3 >= 2)
  {
    size_t v7 = &a1[strlen(a1)];
    int v8 = a1 + 256;
    uint64_t v9 = v3 - 1;
    CFNumberRef v10 = a2 + 1;
    do
    {
      int v11 = *v10++;
      snprintf(v7, v8 - v7, "%s%u", " ", v11);
      uint64_t result = strlen(v7);
      v7 += result;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t AudioFormatProperty_ISOChannelLayoutSizeForChannelLayout(const AudioChannelLayout *a1, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t result = 1718449215;
  *a3 = 0;
  if (a2 >= 4)
  {
    signed int mChannelLayoutTag = a1->mChannelLayoutTag;
    if (a1->mChannelLayoutTag == 0x10000)
    {
      if (a2 < 8) {
        return result;
      }
      uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)a1->mChannelBitmap);
      v7.i16[0] = vaddlv_u8(v7);
      UInt32 mNumberChannelDescriptions = v7.i32[0];
    }
    else if (mChannelLayoutTag)
    {
      UInt32 mNumberChannelDescriptions = (unsigned __int16)a1->mChannelLayoutTag;
    }
    else
    {
      if (a2 < 0xC) {
        return result;
      }
      UInt32 mNumberChannelDescriptions = a1->mNumberChannelDescriptions;
      if (20 * (unint64_t)mNumberChannelDescriptions + 12 > a2) {
        return result;
      }
    }
    if (!mNumberChannelDescriptions) {
      return result;
    }
    if (mChannelLayoutTag <= 9306118)
    {
      if (mChannelLayoutTag > 7864324)
      {
        if (mChannelLayoutTag <= 8323079)
        {
          if (mChannelLayoutTag == 7864325)
          {
            unsigned __int8 v8 = 5;
            goto LABEL_61;
          }
          if (mChannelLayoutTag == 8126470)
          {
            unsigned __int8 v8 = 6;
            goto LABEL_61;
          }
        }
        else
        {
          switch(mChannelLayoutTag)
          {
            case 8323080:
              unsigned __int8 v8 = 7;
              goto LABEL_61;
            case 8585219:
              unsigned __int8 v8 = 9;
              goto LABEL_61;
            case 8650756:
              unsigned __int8 v8 = 10;
              goto LABEL_61;
          }
        }
      }
      else if (mChannelLayoutTag <= 6946817)
      {
        if (mChannelLayoutTag == 6553601)
        {
          unsigned __int8 v8 = 1;
          goto LABEL_61;
        }
        if (mChannelLayoutTag == 6619138)
        {
          unsigned __int8 v8 = 2;
          goto LABEL_61;
        }
      }
      else
      {
        switch(mChannelLayoutTag)
        {
          case 6946818:
            unsigned __int8 v8 = 21;
            goto LABEL_61;
          case 7471107:
            unsigned __int8 v8 = 3;
            goto LABEL_61;
          case 7602180:
            unsigned __int8 v8 = 4;
            goto LABEL_61;
        }
      }
    }
    else if (mChannelLayoutTag <= 13500427)
    {
      if (mChannelLayoutTag <= 11993095)
      {
        if (mChannelLayoutTag == 9306119)
        {
          unsigned __int8 v8 = 11;
          goto LABEL_61;
        }
        if (mChannelLayoutTag == 9633794)
        {
          unsigned __int8 v8 = 8;
          goto LABEL_61;
        }
      }
      else
      {
        switch(mChannelLayoutTag)
        {
          case 11993096:
            unsigned __int8 v8 = 12;
            goto LABEL_61;
          case 12058632:
            unsigned __int8 v8 = 14;
            goto LABEL_61;
          case 13369368:
            unsigned __int8 v8 = 13;
            goto LABEL_61;
        }
      }
    }
    else if (mChannelLayoutTag > 13697037)
    {
      switch(mChannelLayoutTag)
      {
        case 13697038:
          unsigned __int8 v8 = 18;
          goto LABEL_61;
        case 13762572:
          unsigned __int8 v8 = 19;
          goto LABEL_61;
        case 13828110:
          unsigned __int8 v8 = 20;
          goto LABEL_61;
      }
    }
    else
    {
      switch(mChannelLayoutTag)
      {
        case 13500428:
          unsigned __int8 v8 = 15;
          goto LABEL_61;
        case 13565962:
          uint64_t result = 16;
          *a3 = 16;
          return result;
        case 13631500:
          unsigned __int8 v8 = 17;
LABEL_61:
          *a3 = v8;
          return 16;
      }
    }
    return 4 * mNumberChannelDescriptions + 16;
  }
  return result;
}

uint64_t AudioFormatProperty_ISOChannelLayoutForChannelLayout(AudioChannelLayout *a1, unsigned int a2, unsigned int *a3, unsigned __int8 *a4)
{
  unsigned __int8 v41 = 0;
  unsigned int v8 = AudioFormatProperty_ISOChannelLayoutSizeForChannelLayout(a1, a2, &v41);
  if (*a3 >= v8)
  {
    unsigned int v10 = v8;
    if (a1->mChannelLayoutTag == 0x10000)
    {
      LOBYTE(mNumberChannelDescriptions) = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)a1->mChannelBitmap));
    }
    else if (a1->mChannelLayoutTag)
    {
      LOBYTE(mNumberChannelDescriptions) = a1->mChannelLayoutTag;
    }
    else
    {
      UInt32 mNumberChannelDescriptions = a1->mNumberChannelDescriptions;
    }
    bzero(a4, v8);
    *(void *)a4 = 0x6C6E686310000000;
    a4[8] = 1;
    a4[12] = 17;
    a4[13] = mNumberChannelDescriptions;
    int v12 = v41;
    a4[14] = v41;
    if (v12)
    {
      uint64_t PropertyInfo = 0;
      a4[15] = 0;
      *a3 = 16;
      return PropertyInfo;
    }
    a4[15] = mNumberChannelDescriptions;
    int v36 = a4 + 16;
    unsigned int v37 = a4 + 16;
    unsigned __int8 v38 = &a4[v10];
    uint64_t v39 = 0x2000000000;
    int v40 = (a4 + 16) & 3;
    memset(&v35, 0, sizeof(v35));
    UInt32 outPropertyDataSize = 0;
    if (a1->mChannelLayoutTag)
    {
      if (a1->mChannelLayoutTag == 0x10000)
      {
        p_mChannelBitmap = &a1->mChannelBitmap;
        uint64_t PropertyInfo = AudioFormatGetPropertyInfo(0x636D7062u, 4u, p_mChannelBitmap, &outPropertyDataSize);
        if (PropertyInfo) {
          return PropertyInfo;
        }
        if (outPropertyDataSize)
        {
          std::vector<unsigned char>::__append(&v35, outPropertyDataSize);
          std::vector<char>::pointer begin = v35.__begin_;
        }
        else
        {
          std::vector<char>::pointer begin = 0;
        }
        uint64_t Property = AudioFormatGetProperty(0x636D7062u, 4u, p_mChannelBitmap, &outPropertyDataSize, begin);
      }
      else
      {
        uint64_t PropertyInfo = AudioFormatGetPropertyInfo(0x636D706Cu, 4u, a1, &outPropertyDataSize);
        if (PropertyInfo) {
          return PropertyInfo;
        }
        if (outPropertyDataSize)
        {
          std::vector<unsigned char>::__append(&v35, outPropertyDataSize);
          std::vector<char>::pointer begin = v35.__begin_;
        }
        else
        {
          std::vector<char>::pointer begin = 0;
        }
        uint64_t Property = AudioFormatGetProperty(0x636D706Cu, 4u, a1, &outPropertyDataSize, begin);
      }
      uint64_t PropertyInfo = Property;
      if (Property) {
        goto LABEL_25;
      }
    }
    else
    {
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v35, (char *)a1, (char *)a1 + a2, a2);
      std::vector<char>::pointer begin = v35.__begin_;
    }
    uint64_t PropertyInfo = 1718449215;
    if ((std::vector<char>::pointer)(v35.__end_ - begin) < (std::vector<char>::pointer)0xC)
    {
LABEL_25:
      if (!begin) {
        return PropertyInfo;
      }
      goto LABEL_56;
    }
    if (!*((_DWORD *)begin + 2))
    {
LABEL_53:
      AT::TBitstreamWriter<unsigned int>::Flush((uint64_t)&v36);
      uint64_t PropertyInfo = 0;
      int v27 = HIDWORD(v39) + 8 * (v38 - v37);
      int v28 = v27 - 32;
      int v29 = v27 - 25;
      if (v28 >= 0) {
        int v29 = v28;
      }
      unsigned int v30 = v10 - (v29 >> 3);
      *a3 = v30;
      *(_DWORD *)a4 = bswap32(v30);
LABEL_56:
      v35.__end_ = begin;
      operator delete(begin);
      return PropertyInfo;
    }
    uint64_t v16 = 0;
    while (1)
    {
      uint64_t v17 = &begin[20 * v16];
      int v20 = *((_DWORD *)v17 + 3);
      uint64_t v18 = v17 + 12;
      int v19 = v20;
      if (v20 > 199) {
        break;
      }
      if (v19 != 100)
      {
        if ((v19 - 38) < 8 || (v19 + 1) < 2) {
          goto LABEL_56;
        }
LABEL_45:
        uint64_t v24 = 0;
        while (v19 != sChannelLabelsForISOSpeakerPositions[v24])
        {
          if (++v24 == 45)
          {
            long long v25 = *(_OWORD *)v18;
            int v33 = *((_DWORD *)v18 + 4);
            long long v32 = v25;
            SetDefaultChannelPosition((uint64_t)&v32);
            goto LABEL_49;
          }
        }
        int v26 = v24;
        goto LABEL_52;
      }
      long long v21 = *(_OWORD *)v18;
      int v33 = *((_DWORD *)v18 + 4);
      long long v32 = v21;
LABEL_49:
      if ((DWORD1(v32) & 0xFFFFFFFD) != 0) {
        goto LABEL_56;
      }
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)&v36, 126, 8u);
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)&v36, bswap32(-(int)*((float *)&v32 + 2)) >> 16, 0x10u);
      int v26 = (int)*((float *)&v32 + 3);
LABEL_52:
      AT::TBitstreamWriter<unsigned int>::PutBits((uint64_t)&v36, v26, 8u);
      if (++v16 >= (unint64_t)*((unsigned int *)begin + 2)) {
        goto LABEL_53;
      }
    }
    if ((v19 - 200) < 8) {
      goto LABEL_56;
    }
    BOOL v22 = (v19 - 301) > 4 || v19 == 303;
    if (!v22 || v19 == 400) {
      goto LABEL_56;
    }
    goto LABEL_45;
  }
  return 561211770;
}

void sub_1900628DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AudioFormatProperty_ChannelLayoutSizeForISOChannelLayout(unsigned int a1, unsigned int *a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  unsigned int v8 = a2;
  v89[0] = a2;
  v89[1] = a2;
  uint64_t v9 = (unsigned __int8 *)a2 + a1;
  int v90 = v9;
  LODWORD(v91) = 0;
  if ((a2 & 3) != 0)
  {
    int v10 = 0;
    char v11 = a2 ^ 3;
    uint64_t v12 = ((a2 ^ 3) & 3) + 1;
    CFDataRef v13 = (char *)a2 + 1;
    int v14 = 8 * ((a2 ^ 3) & 3) + 8;
    unint64_t v15 = (unsigned __int8 *)a2;
    do
    {
      if (v15 >= v9) {
        int v16 = 255;
      }
      else {
        int v16 = *v15;
      }
      int v10 = v16 | (v10 << 8);
      ++v15;
    }
    while ((v13++ & 3) != 0);
    a2 = (unsigned int *)((char *)a2 + v12);
    v89[0] = (unsigned int *)((char *)v8 + v12);
    unsigned int v18 = v10 << ((8 * (v11 & 3)) ^ 0x18);
    LODWORD(v91) = v18;
  }
  else
  {
    unsigned int v18 = 0;
    int v14 = 0;
  }
  uint64_t v19 = 560360820;
  if (a1 < 0xC) {
    return v19;
  }
  uint64_t v20 = v9 - (unsigned __int8 *)a2;
  int v21 = v14 - 32;
  if (v14 - 32 < 0)
  {
    if ((v20 & ~(v20 >> 63) & 0xFFFFFFFC) != 0 && a2 >= v8)
    {
      unsigned int v25 = bswap32(*a2);
    }
    else
    {
      uint64_t v24 = 0;
      unsigned int v25 = v18;
      do
      {
        int v26 = (unsigned __int8 *)a2 + v24;
        int v27 = 255;
        if ((char *)a2 + v24 < (char *)v9 && v26 >= (unsigned __int8 *)v8) {
          int v27 = *v26;
        }
        unsigned int v25 = v27 | (v25 << 8);
        ++v24;
      }
      while (v24 != 4);
    }
    v89[0] = ++a2;
    unsigned int v22 = (v25 >> v14) | v18;
    unsigned int v18 = v25 << -(char)v14;
    if (!v14) {
      unsigned int v18 = 0;
    }
    LODWORD(v91) = v18;
    int v21 = v14;
  }
  else
  {
    unsigned int v22 = v18;
  }
  if (v22 > a1) {
    return v19;
  }
  HIDWORD(v91) = v21 - 32;
  if (v21 - 32 < 0)
  {
    if (((v9 - a2) & ~((v9 - (unsigned __int8 *)a2) >> 63) & 0xFFFFFFFC) != 0 && a2 >= v8)
    {
      unsigned int v29 = bswap32(*a2);
    }
    else
    {
      uint64_t v30 = 0;
      unsigned int v29 = v18;
      do
      {
        int v31 = (unsigned __int8 *)a2 + v30;
        unsigned int v32 = v29 << 8;
        LODWORD(v91) = v32;
        int v33 = 255;
        if ((char *)a2 + v30 < (char *)v9 && v31 >= (unsigned __int8 *)v8) {
          int v33 = *v31;
        }
        unsigned int v29 = v33 | v32;
        LODWORD(v91) = v29;
        ++v30;
      }
      while (v30 != 4);
    }
    v89[0] = ++a2;
    int v28 = (v29 >> v21) | v18;
    if (!v21)
    {
      unsigned int v34 = 0;
      unsigned int v18 = 0;
      int64_t v91 = 0xFFFFFFF800000000;
      goto LABEL_43;
    }
    unsigned int v18 = v29 << -(char)v21;
    LODWORD(v91) = v18;
  }
  else
  {
    v21 -= 32;
    int v28 = v18;
  }
  unsigned int v34 = HIBYTE(v18);
  int v35 = v21 - 8;
  HIDWORD(v91) = v21 - 8;
  if (v21 - 8 >= 0)
  {
    unsigned int v36 = v18 << 8;
    goto LABEL_53;
  }
LABEL_43:
  if (((v9 - a2) & ~((v9 - (unsigned __int8 *)a2) >> 63) & 0xFFFFFFFC) != 0 && a2 >= v8)
  {
    unsigned int v18 = bswap32(*a2);
  }
  else
  {
    uint64_t v37 = 0;
    do
    {
      unsigned __int8 v38 = (unsigned __int8 *)a2 + v37;
      unsigned int v39 = v18 << 8;
      LODWORD(v91) = v39;
      int v40 = 255;
      if ((char *)a2 + v37 < (char *)v9 && v38 >= (unsigned __int8 *)v8) {
        int v40 = *v38;
      }
      unsigned int v18 = v40 | v39;
      LODWORD(v91) = v18;
      ++v37;
    }
    while (v37 != 4);
  }
  v89[0] = ++a2;
  int v35 = v21 + 24;
  v34 |= v18 >> (v21 + 24);
  if (v21 == -24)
  {
    unsigned int v41 = 0;
    unsigned int v36 = 0;
    int64_t v91 = 0xFFFFFFE800000000;
    goto LABEL_56;
  }
  unsigned int v36 = v18 << (8 - v21);
LABEL_53:
  unsigned int v41 = v36 >> 8;
  int v42 = v35 - 24;
  LODWORD(v91) = v36;
  HIDWORD(v91) = v35 - 24;
  if (v35 - 24 >= 0)
  {
    unsigned int v43 = v36 << 24;
    goto LABEL_70;
  }
LABEL_56:
  if (((v9 - a2) & ~((v9 - (unsigned __int8 *)a2) >> 63) & 0xFFFFFFFC) != 0 && a2 >= v8)
  {
    unsigned int v36 = bswap32(*a2);
  }
  else
  {
    uint64_t v44 = 0;
    do
    {
      __int16 v45 = (unsigned __int8 *)a2 + v44;
      unsigned int v46 = v36 << 8;
      LODWORD(v91) = v46;
      int v47 = 255;
      if ((char *)a2 + v44 < (char *)v9 && v45 >= (unsigned __int8 *)v8) {
        int v47 = *v45;
      }
      unsigned int v36 = v47 | v46;
      LODWORD(v91) = v36;
      ++v44;
    }
    while (v44 != 4);
  }
  unsigned int v48 = v36 << (24 - v35);
  int v49 = v35 + 8;
  v89[0] = ++a2;
  v41 |= v36 >> v49;
  if (v49) {
    unsigned int v43 = v48;
  }
  else {
    unsigned int v43 = 0;
  }
  if (v49) {
    int v42 = v49;
  }
  else {
    int v42 = 0;
  }
LABEL_70:
  LODWORD(v91) = v43;
  if (v28 != 1667788396) {
    return v19;
  }
  int v50 = v34;
  if (v22 <= 0xD && !(_BYTE)v34) {
    return v19;
  }
  BOOL v51 = v22 < 0x10;
  if (v34 != 1) {
    BOOL v51 = 0;
  }
  if (v34 > 1u || v51 || v41) {
    return v19;
  }
  if (!a3 && !(_BYTE)v34) {
    return 4294967246;
  }
  if ((_BYTE)v34)
  {
    unsigned int v53 = v43 >> 28;
    int v54 = v42 - 4;
    HIDWORD(v91) = v42 - 4;
    if (v42 - 4 < 0)
    {
      unsigned int v58 = v43 >> 28;
      AT::TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v89, a2);
      a2 = ++v89[0];
      unsigned int v53 = (v91 >> SBYTE4(v91)) | v58;
      int v54 = HIDWORD(v91) + 32;
      if (HIDWORD(v91) == -32)
      {
        char v87 = v58;
        unsigned int v59 = 0;
        int64_t v91 = 0xFFFFFFFC00000000;
LABEL_95:
        AT::TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v89, a2);
        a2 = ++v89[0];
        v59 |= v91 >> SBYTE4(v91);
        int v56 = HIDWORD(v91) + 32;
        if (HIDWORD(v91) == -32) {
          unsigned int v57 = 0;
        }
        else {
          unsigned int v57 = v91 << -BYTE4(v91);
        }
        LOBYTE(v53) = v87;
        goto LABEL_101;
      }
      unsigned int v55 = v91 << -BYTE4(v91);
    }
    else
    {
      unsigned int v55 = 16 * v43;
    }
    unsigned int v59 = v55 >> 28;
    int v56 = v54 - 4;
    int64_t v91 = __PAIR64__(v56, v55);
    if (v56 >= 0)
    {
      unsigned int v57 = 16 * v55;
      goto LABEL_101;
    }
    char v87 = v53;
    goto LABEL_95;
  }
  unsigned int v53 = HIBYTE(v43);
  int v56 = v42 - 8;
  HIDWORD(v91) = v42 - 8;
  if (v42 - 8 < 0)
  {
    unsigned int v60 = HIBYTE(v43);
    AT::TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v89, a2);
    a2 = ++v89[0];
    unsigned int v53 = (v91 >> SBYTE4(v91)) | v60;
    int v56 = HIDWORD(v91) + 32;
    if (HIDWORD(v91) == -32) {
      unsigned int v57 = 0;
    }
    else {
      unsigned int v57 = v91 << -BYTE4(v91);
    }
  }
  else
  {
    unsigned int v57 = v43 << 8;
  }
  LOBYTE(v59) = 1;
LABEL_101:
  LODWORD(v91) = v57;
  if (v53 != 1 || (v59 & 0xE) != 0) {
    return v19;
  }
  if (v50)
  {
    unsigned int v61 = HIBYTE(v57);
    v56 -= 8;
    HIDWORD(v91) = v56;
    if (v56 < 0)
    {
      AT::TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v89, a2);
      a2 = ++v89[0];
      int v56 = HIDWORD(v91) + 32;
      unsigned int v88 = (v91 >> SBYTE4(v91)) | v61;
      if (HIDWORD(v91) == -32)
      {
        unsigned int v63 = 0;
        int64_t v91 = 0xFFFFFFF800000000;
        goto LABEL_113;
      }
      unsigned int v57 = v91 << -BYTE4(v91);
    }
    else
    {
      unint64_t v62 = (unint64_t)v57 << 8;
      unsigned int v88 = HIDWORD(v62);
      unsigned int v57 = v62;
    }
    LODWORD(v91) = v57;
  }
  else
  {
    unsigned int v88 = *(_DWORD *)(a3 + 28);
  }
  unsigned int v63 = HIBYTE(v57);
  int v64 = v56 - 8;
  HIDWORD(v91) = v64;
  if (v64 >= 0)
  {
    unsigned int v65 = v57 << 8;
    goto LABEL_116;
  }
LABEL_113:
  AT::TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v89, a2);
  a2 = ++v89[0];
  char v66 = BYTE4(v91);
  v63 |= v91 >> SBYTE4(v91);
  int v64 = HIDWORD(v91) + 32;
  HIDWORD(v91) += 32;
  if (HIDWORD(v91)) {
    unsigned int v65 = v91 << -v66;
  }
  else {
    unsigned int v65 = 0;
  }
LABEL_116:
  LODWORD(v91) = v65;
  int v67 = v63;
  switch((char)v63)
  {
    case 0:
      if (!v50)
      {
        unsigned int v84 = v88;
        goto LABEL_175;
      }
      unsigned int v68 = HIBYTE(v65);
      v64 -= 8;
      HIDWORD(v91) = v64;
      if (v64 < 0)
      {
        AT::TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v89, a2);
        LODWORD(a2) = LODWORD(v89[0]) + 4;
        ++v89[0];
        char v85 = BYTE4(v91);
        v68 |= v91 >> SBYTE4(v91);
        int v64 = HIDWORD(v91) + 32;
        HIDWORD(v91) += 32;
        if (HIDWORD(v91)) {
          unsigned int v69 = v91 << -v85;
        }
        else {
          unsigned int v69 = 0;
        }
      }
      else
      {
        unsigned int v69 = v65 << 8;
      }
      LODWORD(v91) = v69;
      unsigned int v84 = v88;
      if (v68 == v88)
      {
LABEL_175:
        int v73 = 0;
        int v70 = v14 - v64 + 8 * (a2 - v90 + v20);
        int v72 = 1;
        int v71 = v84;
        if (v67) {
          goto LABEL_146;
        }
        goto LABEL_135;
      }
      return v19;
    case 1:
      int v70 = 0;
      int v71 = 0;
      int v73 = 6553601;
      goto LABEL_145;
    case 2:
      int v70 = 0;
      int v71 = 0;
      int v72 = 1;
      int v73 = 6619138;
      if (!v67) {
        goto LABEL_135;
      }
      goto LABEL_146;
    case 3:
      int v70 = 0;
      int v71 = 0;
      int v73 = 7471107;
      goto LABEL_145;
    case 4:
      int v70 = 0;
      int v71 = 0;
      int v73 = 7602180;
      goto LABEL_145;
    case 5:
      int v70 = 0;
      int v71 = 0;
      int v73 = 7864325;
      goto LABEL_145;
    case 6:
      int v70 = 0;
      int v71 = 0;
      int v73 = 8126470;
      goto LABEL_145;
    case 7:
      int v70 = 0;
      int v71 = 0;
      int v73 = 8323080;
      goto LABEL_145;
    case 8:
      int v70 = 0;
      int v71 = 0;
      int v73 = 9633794;
      goto LABEL_145;
    case 9:
      int v70 = 0;
      int v71 = 0;
      int v73 = 8585219;
      goto LABEL_145;
    case 10:
      int v70 = 0;
      int v71 = 0;
      int v73 = 8650756;
      goto LABEL_145;
    case 11:
      int v70 = 0;
      int v71 = 0;
      int v73 = 9306119;
      goto LABEL_145;
    case 12:
      int v70 = 0;
      int v71 = 0;
      int v72 = 1;
      int v73 = 11993096;
      if (!v67) {
        goto LABEL_135;
      }
      goto LABEL_146;
    case 13:
      int v70 = 0;
      int v71 = 0;
      int v73 = 13369368;
      goto LABEL_145;
    case 14:
      int v70 = 0;
      int v71 = 0;
      int v73 = 12058632;
      goto LABEL_145;
    case 15:
      int v70 = 0;
      int v71 = 0;
      int v73 = 13500428;
      goto LABEL_145;
    case 16:
      int v70 = 0;
      int v71 = 0;
      int v73 = 13565962;
      goto LABEL_145;
    case 17:
      int v70 = 0;
      int v71 = 0;
      int v73 = 13631500;
      goto LABEL_145;
    case 18:
      int v70 = 0;
      int v71 = 0;
      int v73 = 13697038;
      goto LABEL_145;
    case 19:
      int v70 = 0;
      int v71 = 0;
      int v73 = 13762572;
      goto LABEL_145;
    case 20:
      int v70 = 0;
      int v71 = 0;
      int v73 = 13828110;
      goto LABEL_145;
    case 21:
      int v70 = 0;
      int v71 = 0;
      int v73 = 6946818;
LABEL_145:
      int v72 = 1;
      if (v67) {
        goto LABEL_146;
      }
      goto LABEL_135;
    default:
      int v70 = 0;
      int v71 = 0;
      int v72 = 0;
      int v73 = -65536;
      if (!v67)
      {
LABEL_135:
        unint64_t v74 = 0;
        int v75 = v71;
        goto LABEL_168;
      }
LABEL_146:
      if (!v50)
      {
        if (v22 < 0x16) {
          return v19;
        }
        int v79 = (unint64_t *)((char *)v8 + 14);
        goto LABEL_158;
      }
      int v86 = v71;
      int v76 = v73;
      AT::TBitstreamReader<unsigned int>::SkipBits((uint64_t)v89, 4);
      unsigned int v77 = v91 >> 29;
      HIDWORD(v91) -= 3;
      if (v91 < 0)
      {
        AT::TBitstreamReader<unsigned int>::FillCacheFrom((uint64_t)v89, v89[0]++);
        char v80 = BYTE4(v91);
        v77 |= v91 >> SBYTE4(v91);
        HIDWORD(v91) += 32;
        if (HIDWORD(v91)) {
          int v78 = v91 << -v80;
        }
        else {
          int v78 = 0;
        }
      }
      else
      {
        int v78 = 8 * v91;
      }
      LODWORD(v91) = v78;
      BOOL Bit = AT::TBitstreamReader<unsigned int>::GetBit((uint64_t)v89);
      if ((_BYTE)v77) {
        return v19;
      }
      int v73 = v76;
      int v71 = v86;
      if (Bit)
      {
        if (v22 < 0x18) {
          return v19;
        }
        int v79 = (unint64_t *)(v8 + 4);
LABEL_158:
        unint64_t v82 = *v79;
        if (v82)
        {
          unint64_t v74 = bswap64(v82);
          int v75 = v73 & 0x1F;
          goto LABEL_168;
        }
      }
      if ((v73 & 0x1F) == v88) {
        int v83 = v72;
      }
      else {
        int v83 = 1;
      }
      if (v83) {
        int v75 = v71;
      }
      else {
        int v75 = v73 & 0x1F;
      }
      if ((v73 & 0x1F) == v88)
      {
        unint64_t v74 = 0;
LABEL_168:
        *a4 = 20 * v75 + 12;
        uint64_t v19 = 0;
        if (a5)
        {
          *(_DWORD *)a5 = v67;
          *(_DWORD *)(a5 + 4) = v73;
          *(_DWORD *)(a5 + 8) = v88;
          *(_DWORD *)(a5 + 12) = v71;
          *(_DWORD *)(a5 + 16) = v70;
          *(void *)(a5 + 24) = v74;
        }
        return v19;
      }
      break;
  }
  return v19;
}

uint64_t AT::TBitstreamReader<unsigned int>::FillCacheFrom(uint64_t result, unsigned int *a2)
{
  unsigned int v3 = *(unsigned int **)(result + 8);
  unint64_t v2 = *(void *)(result + 16);
  if (((v2 - a2) & ~((uint64_t)(v2 - (void)a2) >> 63) & 0xFFFFFFFC) != 0)
  {
    BOOL v4 = v3 >= a2;
    BOOL v5 = v3 == a2;
  }
  else
  {
    BOOL v4 = 1;
    BOOL v5 = 0;
  }
  if (!v5 && v4)
  {
    uint64_t v6 = 0;
    int v7 = *(_DWORD *)(result + 24);
    do
    {
      unsigned int v8 = (unsigned __int8 *)a2 + v6;
      int v9 = v7 << 8;
      *(_DWORD *)(result + 24) = v9;
      int v10 = 255;
      if ((unint64_t)a2 + v6 < v2 && v8 >= (unsigned __int8 *)v3) {
        int v10 = *v8;
      }
      int v7 = v9 | v10;
      *(_DWORD *)(result + 24) = v7;
      ++v6;
    }
    while (v6 != 4);
  }
  else
  {
    *(_DWORD *)(result + 24) = bswap32(*a2);
  }
  return result;
}

uint64_t AT::TBitstreamReader<unsigned int>::SkipBits(uint64_t result, int a2)
{
  int v2 = *(_DWORD *)(result + 28);
  unsigned int v3 = a2 - v2;
  if (a2 > v2)
  {
    *(void *)(result + 24) = 0;
    int v2 = 0;
    if (v3 >= 0x20)
    {
      *(void *)result += (v3 >> 3) & 0x1FFFFFFC;
      a2 = v3 & 0x1F;
    }
    else
    {
      a2 = v3;
    }
  }
  if ((a2 - 33) >= 0xFFFFFFE0)
  {
    int v4 = *(_DWORD *)(result + 24);
    int v5 = v2 - a2;
    *(_DWORD *)(result + 28) = v5;
    if (v5 < 0)
    {
      unint64_t v8 = *(void *)(result + 8);
      unint64_t v7 = *(void *)(result + 16);
      int v9 = *(unsigned int **)result;
      if (((v7 - *(_DWORD *)result) & ~((uint64_t)(v7 - *(void *)result) >> 63) & 0xFFFFFFFC) == 0
        || v8 > (unint64_t)v9)
      {
        uint64_t v11 = 0;
        do
        {
          uint64_t v12 = (unsigned __int8 *)v9 + v11;
          int v13 = v4 << 8;
          *(_DWORD *)(result + 24) = v13;
          int v14 = 255;
          if ((unint64_t)v9 + v11 < v7 && (unint64_t)v12 >= v8) {
            int v14 = *v12;
          }
          int v4 = v14 | v13;
          *(_DWORD *)(result + 24) = v4;
          ++v11;
        }
        while (v11 != 4);
      }
      else
      {
        int v4 = bswap32(*v9);
      }
      int v15 = v4 << -(char)v5;
      int v16 = v5 + 32;
      *(_DWORD *)(result + 28) = v16;
      *(void *)uint64_t result = v9 + 1;
      if (v16) {
        int v6 = v15;
      }
      else {
        int v6 = 0;
      }
    }
    else
    {
      int v6 = v4 << a2;
    }
    *(_DWORD *)(result + 24) = v6;
  }
  return result;
}

BOOL AT::TBitstreamReader<unsigned int>::GetBit(uint64_t a1)
{
  unsigned int v2 = *(_DWORD *)(a1 + 24);
  int v1 = *(_DWORD *)(a1 + 28);
  unsigned int v3 = v2 >> 31;
  *(_DWORD *)(a1 + 28) = v1 - 1;
  if (v1 - 1 < 0)
  {
    int v6 = *(unsigned int **)(a1 + 8);
    unint64_t v5 = *(void *)(a1 + 16);
    unint64_t v7 = *(unsigned int **)a1;
    if (((v5 - *(_DWORD *)a1) & ~((uint64_t)(v5 - *(void *)a1) >> 63) & 0xFFFFFFFC) != 0)
    {
      BOOL v8 = v6 >= v7;
      BOOL v9 = v6 == v7;
    }
    else
    {
      BOOL v8 = 1;
      BOOL v9 = 0;
    }
    if (!v9 && v8)
    {
      uint64_t v10 = 0;
      do
      {
        uint64_t v11 = (unsigned __int8 *)v7 + v10;
        unsigned int v12 = v2 << 8;
        *(_DWORD *)(a1 + 24) = v12;
        int v13 = 255;
        if ((unint64_t)v7 + v10 < v5 && v11 >= (unsigned __int8 *)v6) {
          int v13 = *v11;
        }
        unsigned int v2 = v13 | v12;
        *(_DWORD *)(a1 + 24) = v2;
        ++v10;
      }
      while (v10 != 4);
    }
    else
    {
      unsigned int v2 = bswap32(*v7);
    }
    int v14 = v2 << (1 - v1);
    int v15 = v1 + 31;
    *(_DWORD *)(a1 + 28) = v15;
    *(void *)a1 = v7 + 1;
    v3 |= v2 >> v15;
    if (v15) {
      int v4 = v14;
    }
    else {
      int v4 = 0;
    }
  }
  else
  {
    int v4 = 2 * v2;
  }
  *(_DWORD *)(a1 + 24) = v4;
  return v3 != 0;
}

uint64_t AudioFormatProperty_ChannelLayoutForISOChannelLayout(unsigned int a1, unsigned int *a2, const AudioStreamBasicDescription *a3, unsigned int *a4, AudioChannelLayout *a5)
{
  unsigned int v73 = 0;
  long long v71 = xmmword_1901DA9B8;
  long long v72 = unk_1901DA9C8;
  uint64_t v9 = AudioFormatProperty_ChannelLayoutSizeForISOChannelLayout(a1, a2, (uint64_t)a3, &v73, (uint64_t)&v71);
  if (!v9)
  {
    size_t v10 = *a4;
    if (v10 < v73) {
      return 561211770;
    }
    bzero(a5, v10);
    AudioChannelLayoutTag v11 = DWORD1(v71);
    unsigned int v12 = DWORD1(v71) & 0xFFFF0000;
    if (DWORD1(v71) <= 0xFFFEFFFF && v12 && !*((void *)&v72 + 1))
    {
      uint64_t v9 = 0;
      *a4 = 12;
      a5->mChannelBitmap = 0;
      a5->UInt32 mNumberChannelDescriptions = 0;
      a5->signed int mChannelLayoutTag = v11;
      return v9;
    }
    if (v12 == -65536) {
      return 1718449215;
    }
    uint64_t v9 = 560360820;
    if (v12)
    {
      if (DWORD1(v71))
      {
        UInt32 outPropertyDataSize = 0;
        uint64_t PropertyInfo = AudioFormatGetPropertyInfo(0x636D706Cu, 4u, (char *)&v71 + 4, &outPropertyDataSize);
        if (!PropertyInfo)
        {
          std::vector<unsigned char>::vector(outPropertyData, outPropertyDataSize);
          uint64_t Property = AudioFormatGetProperty(0x636D706Cu, 4u, (char *)&v71 + 4, &outPropertyDataSize, outPropertyData[0]);
          int v26 = outPropertyData[0];
          if (Property)
          {
            uint64_t v9 = Property;
          }
          else
          {
            a5->signed int mChannelLayoutTag = 0;
            a5->UInt32 mNumberChannelDescriptions = 0;
            unsigned int v34 = v26[2];
            if (v34)
            {
              UInt32 v35 = 0;
              char v36 = 0;
              __int16 v37 = 0;
              uint64_t v38 = *((void *)&v72 + 1);
              do
              {
                if ((v38 & (1 << v36)) == 0)
                {
                  unsigned int v39 = &v26[5 * v37];
                  int v40 = (char *)a5 + 20 * v35++;
                  a5->UInt32 mNumberChannelDescriptions = v35;
                  long long v41 = *(_OWORD *)(v39 + 3);
                  *((_DWORD *)v40 + 7) = v39[7];
                  *(_OWORD *)(v40 + 12) = v41;
                  unsigned int v34 = v26[2];
                }
                char v36 = ++v37;
              }
              while (v34 > v37);
            }
            else
            {
              UInt32 v35 = 0;
            }
            if (v35 == DWORD2(v71))
            {
              *a4 = 20 * v35 + 12;
              TryToCollapseAudioChannelLayoutToATag(a4, a5);
              uint64_t v9 = 0;
              int v26 = outPropertyData[0];
            }
          }
          if (v26)
          {
            outPropertyData[1] = v26;
            operator delete(v26);
          }
          return v9;
        }
        return PropertyInfo;
      }
    }
    else if (!v71)
    {
      int v13 = v72;
      if (v72)
      {
        int v14 = (unsigned __int8 *)a2 + a1;
        if ((a2 & 3) != 0)
        {
          int v15 = 0;
          uint64_t v16 = (a2 ^ 3) & 3;
          uint64_t v17 = (unsigned __int8 *)a2 + 1;
          int v18 = 8 * ((a2 ^ 3) & 3) + 8;
          uint64_t v19 = a2;
          do
          {
            if (v19 >= (unsigned int *)v14) {
              int v20 = 255;
            }
            else {
              int v20 = *(unsigned __int8 *)v19;
            }
            int v15 = v20 | (v15 << 8);
            uint64_t v19 = (unsigned int *)((char *)v19 + 1);
          }
          while ((v17++ & 3) != 0);
          unsigned int v22 = (unsigned __int8 *)a2 + v16 + 1;
          unsigned int v23 = v15 << ((8 * v16) ^ 0x18);
        }
        else
        {
          unsigned int v23 = 0;
          int v18 = 0;
          unsigned int v22 = (unsigned __int8 *)a2;
        }
        uint64_t v27 = HIDWORD(v71);
        int v28 = v72 - v18;
        unsigned int v29 = &v22[((v72 - v18) >> 3) & 0x1FFFFFFC];
        if ((v72 - v18) >= 0x20) {
          int v28 = (v72 - v18) & 0x1F;
        }
        else {
          unsigned int v29 = v22;
        }
        BOOL v30 = (int)v72 <= v18;
        if ((int)v72 > v18) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = v23;
        }
        if ((int)v72 > v18) {
          int v32 = 0;
        }
        else {
          int v32 = v18;
        }
        if ((int)v72 > v18) {
          int v33 = (unsigned int *)v29;
        }
        else {
          int v33 = (unsigned int *)v22;
        }
        if (!v30) {
          int v13 = v28;
        }
        if ((v13 - 33) >= 0xFFFFFFE0)
        {
          v32 -= v13;
          if (v32 < 0)
          {
            if (((v14 - v33) & ~((v14 - (unsigned __int8 *)v33) >> 63) & 0xFFFFFFFC) != 0
              && v33 >= a2)
            {
              unsigned int v31 = bswap32(*v33);
            }
            else
            {
              uint64_t v43 = 0;
              do
              {
                uint64_t v44 = (unsigned __int8 *)v33 + v43;
                int v45 = 255;
                if ((char *)v33 + v43 < (char *)v14 && v44 >= (unsigned __int8 *)a2) {
                  int v45 = *v44;
                }
                unsigned int v31 = v45 | (v31 << 8);
                ++v43;
              }
              while (v43 != 4);
            }
            ++v33;
            if (v32 == -32) {
              unsigned int v31 = 0;
            }
            else {
              v31 <<= -(char)v32;
            }
            if (v32 == -32) {
              int v32 = 0;
            }
            else {
              v32 += 32;
            }
          }
          else
          {
            v31 <<= v13;
          }
        }
        if (!HIDWORD(v71))
        {
LABEL_130:
          a5->UInt32 mNumberChannelDescriptions = v27;
          *a4 = 20 * v27 + 12;
          TryToCollapseAudioChannelLayoutToATag(a4, a5);
          return 0;
        }
        uint64_t v46 = 0;
        while (1)
        {
          int v47 = (char *)a5 + 20 * v46;
          *((_DWORD *)v47 + 3) = -1;
          unsigned int v48 = v47 + 12;
          if (v32 + 8 * ((int)v14 - (int)v33) < 8) {
            return v9;
          }
          unsigned int v49 = HIBYTE(v31);
          if (v32 - 8 < 0)
          {
            if (v33 >= a2
              && ((v14 - v33) & ~((v14 - (unsigned __int8 *)v33) >> 63) & 0xFFFFFFFC) != 0)
            {
              unsigned int v31 = bswap32(*v33);
            }
            else
            {
              uint64_t v50 = 0;
              do
              {
                BOOL v51 = (unsigned __int8 *)v33 + v50;
                int v52 = 255;
                if ((char *)v33 + v50 < (char *)v14 && v51 >= (unsigned __int8 *)a2) {
                  int v52 = *v51;
                }
                unsigned int v31 = v52 | (v31 << 8);
                ++v50;
              }
              while (v50 != 4);
            }
            unsigned int v53 = v31 << (8 - v32);
            v32 += 24;
            ++v33;
            v49 |= v31 >> v32;
            if (v32) {
              unsigned int v31 = v53;
            }
            else {
              unsigned int v31 = 0;
            }
            if (!v32) {
              int v32 = 0;
            }
          }
          else
          {
            v31 <<= 8;
            v32 -= 8;
          }
          if (v49 <= 0x7Du) {
            break;
          }
          if (v49 == 126)
          {
            if (v32 + 8 * ((int)v14 - (int)v33) < 24) {
              return v9;
            }
            *unsigned int v48 = 0x200000064;
            unsigned int v56 = HIWORD(v31);
            int v57 = v32 - 16;
            if (v32 - 16 < 0)
            {
              if (((v14 - v33) & ~((v14 - (unsigned __int8 *)v33) >> 63) & 0xFFFFFFFC) != 0
                && v33 >= a2)
              {
                unsigned int v31 = bswap32(*v33);
              }
              else
              {
                uint64_t v59 = 0;
                do
                {
                  unsigned int v60 = (unsigned __int8 *)v33 + v59;
                  int v61 = 255;
                  if ((char *)v33 + v59 < (char *)v14 && v60 >= (unsigned __int8 *)a2) {
                    int v61 = *v60;
                  }
                  unsigned int v31 = v61 | (v31 << 8);
                  ++v59;
                }
                while (v59 != 4);
              }
              unsigned int v62 = v31 << (16 - v32);
              int v63 = v32 + 16;
              ++v33;
              v56 |= v31 >> v63;
              if (v63) {
                unsigned int v58 = v62;
              }
              else {
                unsigned int v58 = 0;
              }
              if (v63) {
                int v57 = v63;
              }
              else {
                int v57 = 0;
              }
            }
            else
            {
              unsigned int v58 = v31 << 16;
            }
            a5->mChannelDescriptions[v46].mCoordinates[0] = (float)-((int)bswap32(v56) >> 16);
            unsigned int v64 = HIBYTE(v58);
            int v32 = v57 - 8;
            if (v57 - 8 < 0)
            {
              if (((v14 - v33) & ~((v14 - (unsigned __int8 *)v33) >> 63) & 0xFFFFFFFC) != 0
                && v33 >= a2)
              {
                unsigned int v58 = bswap32(*v33);
              }
              else
              {
                uint64_t v65 = 0;
                do
                {
                  char v66 = (unsigned __int8 *)v33 + v65;
                  int v67 = 255;
                  if ((char *)v33 + v65 < (char *)v14 && v66 >= (unsigned __int8 *)a2) {
                    int v67 = *v66;
                  }
                  unsigned int v58 = v67 | (v58 << 8);
                  ++v65;
                }
                while (v65 != 4);
              }
              unsigned int v68 = v58 << (8 - v57);
              int v69 = v57 + 24;
              ++v33;
              v64 |= v58 >> v69;
              if (v69) {
                unsigned int v31 = v68;
              }
              else {
                unsigned int v31 = 0;
              }
              if (v69) {
                int v32 = v69;
              }
              else {
                int v32 = 0;
              }
            }
            else
            {
              unsigned int v31 = v58 << 8;
            }
            float v55 = (float)(char)v64;
LABEL_128:
            int v70 = (float *)(&a5->mChannelLayoutTag + 5 * v46);
            v70[6] = v55;
            v70[7] = 1.0;
          }
LABEL_129:
          if (++v46 == v27) {
            goto LABEL_130;
          }
        }
        if (v49 > 0x2Cu) {
          goto LABEL_129;
        }
        *(_DWORD *)unsigned int v48 = sChannelLabelsForISOSpeakerPositions[v49];
        if (v49 - 39 > 1) {
          goto LABEL_129;
        }
        *unsigned int v48 = 0x200000064;
        int v54 = (float *)((char *)&sCoordinatesForISOSpeakerPositions + 8 * v49);
        a5->mChannelDescriptions[v46].mCoordinates[0] = -*v54;
        float v55 = v54[1];
        goto LABEL_128;
      }
    }
  }
  return v9;
}

void sub_190063B50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TryToCollapseAudioChannelLayoutToATag(unsigned int *a1, AudioChannelLayout *a2)
{
  unsigned int v7 = -65536;
  uint64_t result = AudioFormatProperty_TagForChannelLayout(a2, &v7);
  if (!result)
  {
    AudioChannelLayoutTag v5 = v7;
    BOOL v6 = v7 == -65536 || v7 == 0;
    if (!v6 && v7 != 0x10000)
    {
      a2->mChannelBitmap = 0;
      a2->UInt32 mNumberChannelDescriptions = 0;
      a2->signed int mChannelLayoutTag = v5;
      *a1 = 12;
    }
  }
  return result;
}

uint64_t AudioFileStreamObject::ByteRangeToPacketRange(AudioFileStreamObject *this, uint64_t a2, unsigned int *a3, uint64_t *a4, unsigned int *a5)
{
  uint64_t v8 = a2 - *((void *)this + 13);
  uint64_t v9 = *((unsigned int *)this + 10);
  if (v9)
  {
    uint64_t v10 = v8 + *a3;
    uint64_t v11 = (v8 + v9 - 1) / v9;
    *a4 = v11;
    unsigned int v12 = v10 / v9 - v11;
    *a5 = v12;
    int v13 = *((_DWORD *)this + 10) * v12;
  }
  else
  {
    int v14 = (uint64_t *)*((void *)this + 19);
    if (!v14) {
      return 1970170687;
    }
    unint64_t v15 = v14[3];
    if (!v15) {
      goto LABEL_11;
    }
    uint64_t v16 = 0;
    do
    {
      CompressedPacketTable::operator[]((uint64_t)&v24, v14, v16 + (v15 >> 1));
      if (v24 >= v8)
      {
        v15 >>= 1;
      }
      else
      {
        v16 += (v15 >> 1) + 1;
        v15 += ~(v15 >> 1);
      }
    }
    while (v15);
    uint64_t v17 = v14[3];
    if (v17 != v16)
    {
      unint64_t v19 = v17 - v16;
      int64_t v20 = v8 + *a3;
      uint64_t v21 = v16;
      do
      {
        CompressedPacketTable::operator[]((uint64_t)&v24, v14, v21 + (v19 >> 1));
        if (v24 + v25 > v20)
        {
          v19 >>= 1;
        }
        else
        {
          v21 += (v19 >> 1) + 1;
          v19 += ~(v19 >> 1);
        }
      }
      while (v19);
      *a5 = v21 - v16;
      *a4 = v16;
      CompressedPacketTable::operator[]((uint64_t)&v24, v14, v21 - 1);
      int v22 = v24;
      CompressedPacketTable::operator[]((uint64_t)&v24, v14, v21 - 1);
      int v23 = v22 + v25;
      CompressedPacketTable::operator[]((uint64_t)&v24, v14, v16);
      int v13 = v23 - v24;
    }
    else
    {
LABEL_11:
      int v13 = 0;
      *a4 = 0;
      *a5 = 0;
    }
  }
  uint64_t result = 0;
  *a3 = v13;
  return result;
}

uint64_t AudioFileStreamObject::ByteToPacket(AudioFileStreamObject *this, AudioBytePacketTranslation *a2)
{
  unint64_t mByte = a2->mByte;
  if (a2->mByte < 0) {
    return 1885563711;
  }
  unint64_t v4 = *((unsigned int *)this + 10);
  if (v4)
  {
    uint64_t result = 0;
    a2->mPacket = mByte / v4;
    *(void *)&a2->mByteOffsetInPacket = (mByte % v4);
    return result;
  }
  BOOL v6 = (uint64_t *)*((void *)this + 19);
  if (!v6)
  {
    uint64_t v15 = *((void *)this + 11);
    if (v15 < 1 || (uint64_t v16 = *((void *)this + 12), v16 <= 0))
    {
      uint64_t v16 = *((void *)this + 26);
      if (v16 < 1) {
        return 1836020325;
      }
      uint64_t v15 = *((void *)this + 27);
    }
    uint64_t result = 0;
    double v17 = (double)v15 / (double)v16;
    double v18 = (double)(uint64_t)mByte / v17;
    a2->mPacket = vcvtmd_s64_f64(v18);
    a2->mByteOffsetInPacket = vcvtmd_u64_f64(v17 * (v18 - (double)(uint64_t)floor(v18)));
    a2->mFlags = 1;
    return result;
  }
  v24[1] = 0;
  v24[2] = 0;
  v24[0] = mByte;
  uint64_t v7 = v6[3];
  uint64_t v27 = (uint64_t (*)(unsigned char *, uint64_t))byte_less_than;
  unsigned int v25 = v6;
  uint64_t v26 = 0;
  std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,CompressedPacketTable::iterator,CompressedPacketTable::iterator,AudioStreamPacketDescriptionExtended,std::__identity,BOOL (*)(AudioStreamPacketDescriptionExtended const&,AudioStreamPacketDescriptionExtended const&)>((uint64_t)&v21, (uint64_t)&v25, v7, (uint64_t)v24, &v27);
  uint64_t v8 = v6[3];
  uint64_t v9 = v22;
  if (v22 == v8)
  {
    SInt64 v10 = v8 - 1;
    CompressedPacketTable::operator[]((uint64_t)&v25, v6, v8 - 1);
    SInt64 v11 = (SInt64)v25 + HIDWORD(v26);
    SInt64 v12 = a2->mByte;
    if (a2->mByte >= v11)
    {
      double v14 = (double)v11 / (double)v6[3];
      double v20 = (double)v12 / v14;
      SInt64 v10 = vcvtmd_s64_f64(v20);
      unsigned int v13 = vcvtmd_u64_f64(v14 * (v20 - (double)(uint64_t)floor(v20)));
      HIDWORD(v14) = 1;
    }
    else
    {
      unsigned int v13 = v12 - v25;
      HIDWORD(v14) = 0;
    }
    LODWORD(v14) = v13;
    a2->mPacket = v10;
    *(double *)&a2->mByteOffsetInPacket = v14;
  }
  else
  {
    a2->mPacket = v22;
    int v19 = a2->mByte;
    CompressedPacketTable::operator[]((uint64_t)v23, v21, v9);
    *(void *)&a2->mByteOffsetInPacket = (v19 - v23[0]);
  }
  return 0;
}

uint64_t std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,CompressedPacketTable::iterator,CompressedPacketTable::iterator,AudioStreamPacketDescriptionExtended,std::__identity,BOOL (*)(AudioStreamPacketDescriptionExtended const&,AudioStreamPacketDescriptionExtended const&)>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(unsigned char *, uint64_t))
{
  BOOL v6 = (void *)result;
  uint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = a3 - v7;
  if (a3 != v7)
  {
    do
    {
      unint64_t v11 = v8 >> 1;
      SInt64 v12 = *(uint64_t **)a2;
      uint64_t v13 = *(void *)(a2 + 8) + (v8 >> 1);
      CompressedPacketTable::operator[]((uint64_t)v14, *(uint64_t **)a2, v13);
      uint64_t result = (*a5)(v14, a4);
      if (result)
      {
        *(void *)a2 = v12;
        *(void *)(a2 + 8) = v13 + 1;
        unint64_t v11 = v8 + ~v11;
      }
      unint64_t v8 = v11;
    }
    while (v11);
    uint64_t v7 = *(void *)(a2 + 8);
  }
  void *v6 = *(void *)a2;
  v6[1] = v7;
  return result;
}

BOOL byte_less_than(void *a1, void *a2)
{
  return *a1 < *a2;
}

uint64_t AudioFileStreamObject::PacketToByte(AudioFileStreamObject *this, AudioBytePacketTranslation *a2)
{
  uint64_t result = 1885563711;
  SInt64 mPacket = a2->mPacket;
  if ((mPacket & 0x8000000000000000) == 0)
  {
    uint64_t v6 = *((unsigned int *)this + 10);
    if (v6)
    {
      AudioBytePacketTranslationFlags v7 = 0;
      SInt64 v8 = mPacket * v6;
LABEL_4:
      a2->unint64_t mByte = v8;
LABEL_5:
      uint64_t result = 0;
      a2->mFlags = v7;
      return result;
    }
    uint64_t v9 = (uint64_t *)*((void *)this + 19);
    if (!v9)
    {
      uint64_t v10 = *((void *)this + 11);
      if (v10 < 1 || (uint64_t v11 = *((void *)this + 12), v11 <= 0))
      {
        uint64_t v11 = *((void *)this + 26);
        if (v11 < 1) {
          return 1836020325;
        }
        uint64_t v10 = *((void *)this + 27);
      }
      a2->unint64_t mByte = vcvtmd_s64_f64((double)v10 / (double)v11 * (double)mPacket);
      AudioBytePacketTranslationFlags v7 = 1;
      goto LABEL_5;
    }
    if (mPacket < v9[3])
    {
      CompressedPacketTable::operator[]((uint64_t)v12, v9, mPacket);
      AudioBytePacketTranslationFlags v7 = 0;
      SInt64 v8 = v12[0];
      goto LABEL_4;
    }
  }
  return result;
}

uint64_t AudioFileStreamObject::PacketToDependencyInfo(AudioFileStreamObject *this, AudioPacketDependencyInfoTranslation *a2)
{
  int v3 = *((_DWORD *)this + 8);
  UInt32 ioPropertyDataSize = 4;
  int inSpecifier = v3;
  UInt32 outPropertyData = 0;
  AudioFormatGetProperty(0x64726C6Cu, 4u, &inSpecifier, &ioPropertyDataSize, &outPropertyData);
  UInt32 mPacket = outPropertyData;
  if (a2->mPacket < outPropertyData) {
    UInt32 mPacket = a2->mPacket;
  }
  a2->mIsIndependentlyDecodable = 1;
  a2->mNumberPrerollPackets = mPacket;
  return 0;
}

uint64_t AudioFileStreamObject::ScanForIndependentPacket(uint64_t a1, int a2, void *a3)
{
  if (a2 != 1)
  {
    uint64_t result = 0;
    uint64_t v6 = *a3 - 1;
LABEL_10:
    a3[1] = v6;
    return result;
  }
  if (*(_DWORD *)(a1 + 40))
  {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
    goto LABEL_7;
  }
  uint64_t v7 = *(void *)(a1 + 152);
  if (v7)
  {
    uint64_t v4 = *(void *)(v7 + 24);
LABEL_7:
    uint64_t v6 = *a3 + 1;
    if (v6 >= v4)
    {
      uint64_t result = 0;
      uint64_t v6 = -1;
    }
    else
    {
      uint64_t result = 0;
    }
    goto LABEL_10;
  }
  return 1885563711;
}

uint64_t AudioFileStreamObject::PacketToRollDistance(AudioFileStreamObject *this, AudioPacketRollDistanceTranslation *a2)
{
  int v3 = *((_DWORD *)this + 8);
  UInt32 ioPropertyDataSize = 4;
  int inSpecifier = v3;
  unsigned int outPropertyData = 0;
  AudioFormatGetProperty(0x64726C6Cu, 4u, &inSpecifier, &ioPropertyDataSize, &outPropertyData);
  SInt64 mPacket = outPropertyData;
  if (a2->mPacket < outPropertyData) {
    SInt64 mPacket = a2->mPacket;
  }
  a2->mRollDistance = mPacket;
  return 0;
}

uint64_t AudioFileStreamObject::FrameToPacket(AudioFileStreamObject *this, uint64_t a2, uint64_t *a3, unsigned int *a4)
{
  uint64_t v7 = *((unsigned int *)this + 11);
  if (v7)
  {
    uint64_t result = 0;
    uint64_t v9 = a2 / v7;
    *a3 = a2 / v7;
LABEL_3:
    unsigned int v10 = a2 - v9 * v7;
LABEL_4:
    *a4 = v10;
    return result;
  }
  uint64_t v12 = *((void *)this + 19);
  if (v12)
  {
    v21[0] = 0;
    v21[1] = 0;
    v21[2] = a2;
    v22[0] = v12;
    uint64_t v13 = *(void *)(v12 + 24);
    v22[1] = 0;
    std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,CompressedPacketTable::iterator,CompressedPacketTable::iterator,AudioStreamPacketDescriptionExtended,std::__identity,std::__less<void,void>>((uint64_t)&v18, (uint64_t)v22, v13, (uint64_t)v21);
    uint64_t v14 = v19;
    if (v19 != *(void *)(v12 + 24))
    {
      *a3 = v19;
      CompressedPacketTable::operator[]((uint64_t)v20, v18, v14);
      uint64_t result = 0;
      unsigned int v10 = a2 - v20[4];
      goto LABEL_4;
    }
  }
  if (!a2)
  {
    uint64_t result = 0;
    *a3 = 0;
    *a4 = 0;
    return result;
  }
  uint64_t result = 1970170687;
  uint64_t v15 = *((void *)this + 28);
  if (v15 >= 1)
  {
    uint64_t v16 = *((void *)this + 26);
    if (v16 >= 1)
    {
      uint64_t result = 0;
      double v17 = (double)v15 / (double)v16;
      *a3 = (uint64_t)((double)a2 / v17);
      uint64_t v7 = v17;
      uint64_t v9 = a2 / v7;
      goto LABEL_3;
    }
  }
  return result;
}

uint64_t std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,CompressedPacketTable::iterator,CompressedPacketTable::iterator,AudioStreamPacketDescriptionExtended,std::__identity,std::__less<void,void>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  AudioChannelLayoutTag v5 = (void *)result;
  uint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = a3 - v6;
  if (a3 != v6)
  {
    do
    {
      unint64_t v9 = v7 >> 1;
      unsigned int v10 = *(uint64_t **)a2;
      uint64_t v11 = *(void *)(a2 + 8) + (v7 >> 1);
      uint64_t result = CompressedPacketTable::operator[]((uint64_t)v12, *(uint64_t **)a2, v11);
      if (v13 < *(void *)(a4 + 16))
      {
        *(void *)a2 = v10;
        *(void *)(a2 + 8) = v11 + 1;
        unint64_t v9 = v7 + ~v9;
      }
      unint64_t v7 = v9;
    }
    while (v9);
    uint64_t v6 = *(void *)(a2 + 8);
  }
  void *v5 = *(void *)a2;
  v5[1] = v6;
  return result;
}

uint64_t AudioFileStreamObject::PacketToFrame(AudioFileStreamObject *this, uint64_t a2, uint64_t *a3)
{
  if (a2 < 0) {
    return 1885563711;
  }
  uint64_t v6 = *((unsigned int *)this + 11);
  if (v6)
  {
    uint64_t result = 0;
    uint64_t v8 = v6 * a2;
LABEL_4:
    *a3 = v8;
    return result;
  }
  unint64_t v9 = (uint64_t *)*((void *)this + 19);
  if (v9 && v9[3] > a2)
  {
    CompressedPacketTable::operator[]((uint64_t)v12, v9, a2);
    uint64_t result = 0;
    uint64_t v8 = v13;
    goto LABEL_4;
  }
  if (!a2)
  {
    uint64_t result = 0;
    *a3 = 0;
    return result;
  }
  uint64_t result = 1970170687;
  uint64_t v10 = *((void *)this + 28);
  if (v10 >= 1)
  {
    uint64_t v11 = *((void *)this + 26);
    if (v11 >= 1)
    {
      uint64_t result = 0;
      uint64_t v8 = (uint64_t)((double)v10 / (double)v11 * (double)a2);
      goto LABEL_4;
    }
  }
  return result;
}

uint64_t AudioFileStreamObject::GetPacketInfo(AudioFileStreamObject *this, uint64_t a2, uint64_t *a3, unsigned int *a4)
{
  uint64_t v7 = *((unsigned int *)this + 10);
  if (v7)
  {
    uint64_t result = 0;
    *a3 = v7 * a2;
    *a4 = v7;
  }
  else
  {
    unint64_t v9 = (uint64_t *)*((void *)this + 19);
    if (v9)
    {
      uint64_t result = 1885563711;
      if ((a2 & 0x8000000000000000) == 0 && v9[3] > a2)
      {
        CompressedPacketTable::operator[]((uint64_t)&v10, v9, a2);
        *a3 = v10;
        CompressedPacketTable::operator[]((uint64_t)&v10, v9, a2);
        uint64_t result = 0;
        *a4 = v11;
      }
    }
    else
    {
      return 1970170687;
    }
  }
  return result;
}

uint64_t AudioFileStreamObject::PrintObject(AudioFileStreamObject *this, __sFILE *a2)
{
  return fprintf(a2, "AudioFileStreamObject %p\n", this);
}

uint64_t AudioFileStreamWrapper::CallPacketsProc(AudioFileStreamWrapper *this, UInt32 a2, unsigned int a3, const void *a4, AudioStreamPacketDescription *a5, int a6)
{
  if (a5)
  {
    UInt32 v6 = LODWORD(a5[a3 - 1].mStartOffset) + a5[a3 - 1].mDataByteSize - LODWORD(a5->mStartOffset);
    uint64_t v7 = *((void *)this + 2);
    int v8 = *(_DWORD *)(v7 + 44);
    if (v8)
    {
      unsigned int v9 = v8 * a3;
    }
    else
    {
      unsigned int v9 = 0;
      if (a3)
      {
        uint64_t v10 = a3;
        p_mVariableFramesInPacket = &a5->mVariableFramesInPacket;
        do
        {
          UInt32 v12 = *p_mVariableFramesInPacket;
          p_mVariableFramesInPacket += 4;
          v9 += v12;
          --v10;
        }
        while (v10);
      }
    }
  }
  else
  {
    uint64_t v7 = *((void *)this + 2);
    unsigned int v9 = *(_DWORD *)(v7 + 44) * a3;
    UInt32 v6 = a2;
  }
  if (a6)
  {
    uint64_t v13 = *(void *)(v7 + 208);
    uint64_t v14 = *(void *)(v7 + 224);
    *(void *)(v7 + 216) += v6;
    *(void *)(v7 + 224) = v14 + v9;
    *(void *)(v7 + 208) = v13 + a3;
  }
  return (*((uint64_t (**)(void))this + 4))(*((void *)this + 5));
}

void *CADeprecated::CAAutoFree<AudioStreamPacketDescription>::reallocItems(void **a1, uint64_t a2)
{
  uint64_t result = reallocf(*a1, 16 * a2);
  if (a2 && !result)
  {
    exceptiouint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    UInt32 v6 = std::bad_alloc::bad_alloc(exception);
  }
  *a1 = result;
  return result;
}

uint64_t AudioFileStreamObject::GetBitRate(AudioFileStreamObject *this, unsigned int *a2)
{
  uint64_t v2 = *((void *)this + 40);
  if (!v2) {
    return 1836020325;
  }
  uint64_t result = 0;
  *a2 = v2 / *((void *)this + 26);
  return result;
}

uint64_t AudioFileStreamObject::Seek(AudioFileStreamObject *this, uint64_t a2, uint64_t *a3, unsigned int *a4)
{
  uint64_t result = 1836020325;
  uint64_t v6 = *((void *)this + 1);
  if (*(unsigned char *)(v6 + 105))
  {
    uint64_t v10 = *((unsigned int *)this + 10);
    if (v10)
    {
      *a3 = v10 * a2;
      *a4 = 0;
LABEL_4:
      uint64_t result = 0;
      *((_DWORD *)this + 59) = 0;
      *((void *)this + 23) = a2;
      uint64_t v11 = *((void *)this + 13) + *a3;
      *(void *)(v6 + 88) = v11;
      *(void *)(v6 + 96) = v11;
      *(_DWORD *)(v6 + 80) = 0;
      *(void *)(v6 + 72) = 0;
      return result;
    }
    UInt32 v12 = (uint64_t *)*((void *)this + 19);
    if (v12)
    {
      if (v12[3] < a2) {
        return 4294967257;
      }
      CompressedPacketTable::operator[]((uint64_t)v38, v12, a2);
      *a3 = v38[0];
      *a4 = 0;
      uint64_t v6 = *((void *)this + 1);
      goto LABEL_4;
    }
    uint64_t v13 = *((void *)this + 11);
    if (v13 >= 1)
    {
      uint64_t v14 = *((void *)this + 12);
      if (v14 >= 1)
      {
        double v15 = (double)v13 / (double)v14;
        uint64_t v16 = *(void *)(v6 + 168);
        uint64_t v17 = *(void *)(v6 + 176);
        unint64_t v18 = v17 - v16;
        if (v17 != v16)
        {
          uint64_t v19 = *(unsigned __int16 *)(v6 + 152);
          if (*(_WORD *)(v6 + 152))
          {
            int v20 = *(_DWORD *)(v6 + 156);
            if (v20)
            {
              if (a2 / v19 < (v18 >> 2))
              {
                double v21 = 0.0;
                uint64_t v22 = a2;
                if (v19 <= a2)
                {
                  uint64_t v23 = 0;
                  unsigned int v24 = 0;
                  uint64_t v22 = a2;
                  do
                  {
                    v23 += (*(_DWORD *)(v16 + 4 * v24) + v20);
                    v22 -= v19;
                    ++v24;
                  }
                  while (v22 >= v19);
LABEL_33:
                  double v21 = (double)v23;
                  goto LABEL_34;
                }
                goto LABEL_34;
              }
            }
          }
        }
        if (*(unsigned char *)(v6 + 192))
        {
          if (*(_WORD *)(v6 + 206))
          {
            uint64_t v27 = *(unsigned __int16 *)(v6 + 208);
            if (*(_WORD *)(v6 + 208))
            {
              uint64_t v28 = *(void *)(v6 + 216);
              if (a2 / v27 < ((unint64_t)(*(void *)(v6 + 224) - v28) >> 2))
              {
                double v21 = 0.0;
                uint64_t v22 = a2;
                if (v27 <= a2)
                {
                  uint64_t v23 = 0;
                  unsigned int v29 = 0;
                  uint64_t v22 = a2;
                  do
                  {
                    v23 += *(_DWORD *)(v28 + 4 * v29) * *(unsigned __int16 *)(v6 + 204);
                    v22 -= v27;
                    ++v29;
                  }
                  while (v22 >= v27);
                  goto LABEL_33;
                }
LABEL_34:
                double v30 = v21 + (double)v22 * v15;
LABEL_47:
                *a3 = (uint64_t)v30;
                *a4 = 1;
                goto LABEL_48;
              }
            }
          }
        }
        if ((*(_DWORD *)(v6 + 248) & 0x14) == 4)
        {
          unsigned int v31 = 1120403456;
          float v32 = (float)v14;
          float v33 = (float)((float)a2 * 100.0) / (float)v14;
          if (v33 > 100.0) {
            float v33 = 100.0;
          }
          if ((int)v33 >= 99) {
            int v34 = 99;
          }
          else {
            int v34 = (int)v33;
          }
          LOBYTE(v31) = *(unsigned char *)(v6 + v34 + 264);
          float v35 = (float)v31;
          if ((int)v33 > 98)
          {
            float v36 = 256.0;
          }
          else
          {
            LOBYTE(v32) = *(unsigned char *)(v34 + v6 + 265);
            float v36 = (float)LODWORD(v32);
          }
          double v15 = (float)((float)(v35 + (float)((float)(v36 - v35) * (float)(v33 - (float)v34))) * (float)v13);
          double v37 = 0.00390625;
          goto LABEL_46;
        }
LABEL_43:
        double v37 = (double)a2;
LABEL_46:
        double v30 = v15 * v37;
        goto LABEL_47;
      }
    }
    uint64_t v25 = *((void *)this + 26);
    if (v25)
    {
      uint64_t v26 = *((void *)this + 27);
      if (v26 > 0)
      {
        double v15 = (double)v26 / (double)v25;
        goto LABEL_43;
      }
    }
    if (!a2 && (*((void *)this + 13) & 0x8000000000000000) == 0)
    {
      *a3 = 0;
LABEL_48:
      *((unsigned char *)this + 176) = 1;
      goto LABEL_4;
    }
  }
  return result;
}

uint64_t AudioFileStreamObject::SetProperty(AudioFileStreamObject *this, unsigned int a2, unsigned int a3, const void *a4)
{
  return 1886681407;
}

uint64_t AudioFileStreamObject::GetProperty(AudioFileStreamObject *this, int a2, unsigned int *a3, void *__dst)
{
  if (*((unsigned char *)this + 177)) {
    return 1685348671;
  }
  uint64_t v7 = *((void *)this + 1);
  int v8 = *(_DWORD *)(v7 + 112);
  if (v8) {
    uint64_t v4 = 1970170687;
  }
  else {
    uint64_t v4 = 1836020325;
  }
  uint64_t v9 = 1886681407;
  if (a2 > 1885564531)
  {
    if (a2 > 1886090593)
    {
      if (a2 > 1886616164)
      {
        switch(a2)
        {
          case 1886616165:
            if (*a3 == 4)
            {
              uint64_t v9 = 0;
              int v10 = *((_DWORD *)this + 28);
              goto LABEL_100;
            }
            break;
          case 1920098672:
            if (*a3 == 4)
            {
              int v21 = (*(uint64_t (**)(AudioFileStreamObject *))(*(void *)this + 160))(this);
              uint64_t v9 = 0;
              *(_DWORD *)__dst = v21;
              return v9;
            }
            break;
          case 1919247481:
            if (*a3 == 4)
            {
              uint64_t v9 = 0;
              *(_DWORD *)__dst = v8;
              return v9;
            }
            break;
          default:
            return v9;
        }
      }
      else
      {
        if (a2 == 1886090594) {
          return v4;
        }
        if (a2 != 1886283375)
        {
          if (a2 == 1886547302) {
            return v4;
          }
          return v9;
        }
        if (!*(unsigned char *)(v7 + 106)) {
          return v4;
        }
        if (*a3 >= 0x10)
        {
          uint64_t v9 = 0;
          *(_OWORD *)__dst = *((_OWORD *)this + 10);
          *a3 = 16;
          return v9;
        }
      }
      return 561211770;
    }
    if (a2 > 1886086255)
    {
      switch(a2)
      {
        case 1886086256:
          if (*a3 != 16) {
            return 561211770;
          }
          if (__dst)
          {
            if ((*__dst & 0x8000000000000000) == 0) {
              return (*(uint64_t (**)(AudioFileStreamObject *, void *))(*(void *)this + 184))(this, __dst);
            }
            return 1885563711;
          }
          break;
        case 1886086770:
          if (*a3 != 24) {
            return 561211770;
          }
          return (*(uint64_t (**)(AudioFileStreamObject *, void, void *))(*(void *)this + 144))(this, __dst[1], __dst);
        case 1886089836:
          if (*a3 != 16) {
            return 561211770;
          }
          if (__dst)
          {
            if ((*__dst & 0x8000000000000000) == 0) {
              return (*(uint64_t (**)(AudioFileStreamObject *, void *))(*(void *)this + 168))(this, __dst);
            }
            return 1885563711;
          }
          break;
        default:
          return v9;
      }
      return 4294967246;
    }
    if (a2 == 1885564532)
    {
      uint64_t v20 = *((void *)this + 12);
      if (v20 < 0) {
        return v4;
      }
      goto LABEL_71;
    }
    if (a2 != 1885957732)
    {
      if (a2 != 1886085753) {
        return v9;
      }
      if (*a3 != 24) {
        return 561211770;
      }
      return (*(uint64_t (**)(AudioFileStreamObject *, void *))(*(void *)this + 192))(this, __dst);
    }
LABEL_52:
    if (a2 == 1885957732) {
      uint64_t v18 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v18 = 1;
    }
    if (*a3 != 16) {
      return 561211770;
    }
    if (__dst)
    {
      if ((*__dst & 0x8000000000000000) == 0) {
        return (*(uint64_t (**)(AudioFileStreamObject *, uint64_t, void *))(*(void *)this + 176))(this, v18, __dst);
      }
      return 1885563711;
    }
    return 4294967246;
  }
  if (a2 <= 1685022309)
  {
    if (a2 <= 1652125802)
    {
      if (a2 == 1633841264)
      {
        if (*a3 == 8)
        {
          double v19 = AudioFileStreamObject::AverageBytesPerPacket(this);
          uint64_t v9 = 0;
          *(double *)__dst = v19;
          return v9;
        }
        return 561211770;
      }
      if (a2 != 1650683508)
      {
        if (a2 != 1651663220) {
          return v9;
        }
        if (*a3 == 4)
        {
          int v22 = 0;
          uint64_t v9 = (*(uint64_t (**)(AudioFileStreamObject *, int *))(*(void *)this + 104))(this, &v22);
          if (!v9)
          {
            int v10 = v22;
LABEL_100:
            *(_DWORD *)__dst = v10;
          }
          return v9;
        }
        return 561211770;
      }
      uint64_t v20 = *((void *)this + 11);
      if (v20 < 0) {
        return v4;
      }
LABEL_71:
      if (*a3 == 8)
      {
        uint64_t v9 = 0;
        *__dst = v20;
        return v9;
      }
      return 561211770;
    }
    if (a2 != 1652125803)
    {
      if (a2 != 1668112752)
      {
        if (a2 != 1684434292) {
          return v9;
        }
        if (!*(unsigned char *)(v7 + 105)) {
          return v4;
        }
        if (*a3 == 40)
        {
          uint64_t v9 = 0;
          long long v16 = *(_OWORD *)((char *)this + 24);
          long long v17 = *(_OWORD *)((char *)this + 40);
          __dst[4] = *((void *)this + 7);
          *(_OWORD *)__dst = v16;
          *((_OWORD *)__dst + 1) = v17;
          return v9;
        }
        return 561211770;
      }
      if (!*(unsigned char *)(v7 + 109)) {
        return v4;
      }
      size_t v15 = *a3;
      if (v15 != *((_DWORD *)this + 36)) {
        return 561211770;
      }
      UInt32 v12 = (const void *)*((void *)this + 17);
      goto LABEL_96;
    }
    if (*a3 != 24) {
      return 561211770;
    }
    return (*(uint64_t (**)(AudioFileStreamObject *, void *))(*(void *)this + 200))(this, __dst);
  }
  if (a2 > 1718775914)
  {
    if (a2 == 1718775915)
    {
      if (*a3 != 24) {
        return 561211770;
      }
      return (*(uint64_t (**)(AudioFileStreamObject *, void, char *, char *))(*(void *)this + 152))(this, *__dst, (char *)__dst + 8, (char *)__dst + 16);
    }
    if (a2 == 1835493731)
    {
      if (!*(unsigned char *)(v7 + 108)) {
        return v4;
      }
      size_t v15 = *a3;
      if (v15 != *((_DWORD *)this + 32)) {
        return 561211770;
      }
      UInt32 v12 = (const void *)*((void *)this + 15);
LABEL_96:
      uint64_t v14 = __dst;
      goto LABEL_97;
    }
    if (a2 != 1852403300) {
      return v9;
    }
    goto LABEL_52;
  }
  if (a2 == 1685022310)
  {
    uint64_t v20 = *((void *)this + 13);
    if (v20 < 0) {
      return v4;
    }
    goto LABEL_71;
  }
  if (a2 == 1717988724)
  {
    if (!*(unsigned char *)(v7 + 104)) {
      return v4;
    }
    if (*a3 == 4)
    {
      uint64_t v9 = 0;
      int v10 = *((_DWORD *)this + 4);
      goto LABEL_100;
    }
    return 561211770;
  }
  if (a2 != 1718383476) {
    return v9;
  }
  if (*(unsigned char *)(v7 + 108))
  {
    UInt32 v12 = (const void *)*((void *)this + 8);
    uint64_t v13 = *((void *)this + 9) - (void)v12;
    if (v13)
    {
      if (v13 > (unint64_t)*a3) {
        return 561211770;
      }
      *a3 = 16 * (v13 >> 4);
      uint64_t v14 = __dst;
      size_t v15 = 16 * (v13 >> 4);
LABEL_97:
      memcpy(v14, v12, v15);
      return 0;
    }
  }
  return v4;
}

double AudioFileStreamObject::AverageBytesPerPacket(AudioFileStreamObject *this)
{
  unsigned int v1 = *((_DWORD *)this + 10);
  if (v1) {
    return (double)v1;
  }
  int v3 = (uint64_t *)*((void *)this + 19);
  if (v3)
  {
    unint64_t v4 = v3[3];
    CompressedPacketTable::operator[]((uint64_t)v10, v3, v4 - 1);
    uint64_t v5 = v10[0];
    CompressedPacketTable::operator[]((uint64_t)v9, v3, v4 - 1);
    double v6 = (double)(v5 + v9[3]);
    double v7 = (double)v4;
  }
  else
  {
    uint64_t v8 = *((void *)this + 26);
    if (v8 < 1) {
      return 1836020320.0;
    }
    double v6 = (double)*((uint64_t *)this + 27);
    double v7 = (double)v8;
  }
  return v6 / v7;
}

uint64_t AudioFileStreamObject::GetPropertyInfo(AudioFileStreamObject *this, int a2, unsigned int *a3, unsigned __int8 *a4)
{
  if (*((unsigned char *)this + 177)) {
    return 1685348671;
  }
  uint64_t result = 1836020325;
  if (*(_DWORD *)(*((void *)this + 1) + 112)) {
    uint64_t v6 = 1970170687;
  }
  else {
    uint64_t v6 = 1836020325;
  }
  if (a4) {
    *a4 = 0;
  }
  if (a2 > 1885564531)
  {
    if (a2 > 1886090593)
    {
      if (a2 > 1886616164)
      {
        if (a2 == 1886616165 || a2 == 1920098672)
        {
LABEL_55:
          if (a3)
          {
            uint64_t result = 0;
            unsigned int v8 = 4;
            goto LABEL_64;
          }
          return 0;
        }
        int v7 = 1919247481;
        goto LABEL_54;
      }
      if (a2 == 1886090594) {
        goto LABEL_55;
      }
      if (a2 != 1886283375)
      {
        int v7 = 1886547302;
LABEL_54:
        if (a2 == v7) {
          goto LABEL_55;
        }
        goto LABEL_73;
      }
      goto LABEL_47;
    }
    if (a2 > 1886086255)
    {
      if (a2 == 1886086256) {
        goto LABEL_47;
      }
      if (a2 != 1886086770)
      {
        int v9 = 1886089836;
LABEL_46:
        if (a2 != v9) {
          goto LABEL_73;
        }
LABEL_47:
        if (!a3) {
          return 0;
        }
        uint64_t result = 0;
        unsigned int v8 = 16;
        goto LABEL_64;
      }
    }
    else
    {
      if (a2 == 1885564532)
      {
        uint64_t v10 = *((void *)this + 12);
LABEL_59:
        uint64_t result = v6;
        if (v10 < 0) {
          return result;
        }
        goto LABEL_62;
      }
      if (a2 == 1885957732) {
        goto LABEL_47;
      }
      if (a2 != 1886085753) {
        goto LABEL_73;
      }
    }
LABEL_49:
    if (!a3) {
      return 0;
    }
    uint64_t result = 0;
    unsigned int v8 = 24;
    goto LABEL_64;
  }
  if (a2 > 1685022309)
  {
    if (a2 <= 1718775914)
    {
      if (a2 == 1685022310)
      {
        if ((*((void *)this + 13) & 0x8000000000000000) != 0) {
          return result;
        }
LABEL_62:
        if (a3)
        {
          uint64_t result = 0;
          unsigned int v8 = 8;
          goto LABEL_64;
        }
        return 0;
      }
      if (a2 == 1717988724) {
        goto LABEL_55;
      }
      if (a2 != 1718383476) {
        goto LABEL_73;
      }
      if (*(unsigned char *)(*((void *)this + 1) + 108) && *((void *)this + 9) != *((void *)this + 8)) {
        uint64_t v6 = 0;
      }
      if (a3) {
        *a3 = (*((_DWORD *)this + 18) - *((_DWORD *)this + 16)) & 0xFFFFFFF0;
      }
      return v6;
    }
    if (a2 != 1718775915)
    {
      if (a2 == 1835493731)
      {
        uint64_t result = v6;
        if (*(unsigned char *)(*((void *)this + 1) + 108))
        {
          if (a3)
          {
            uint64_t result = 0;
            unsigned int v8 = *((_DWORD *)this + 32);
            goto LABEL_64;
          }
          return 0;
        }
        return result;
      }
      int v9 = 1852403300;
      goto LABEL_46;
    }
    goto LABEL_49;
  }
  if (a2 <= 1652125802)
  {
    if (a2 == 1633841264) {
      goto LABEL_62;
    }
    if (a2 != 1650683508)
    {
      int v7 = 1651663220;
      goto LABEL_54;
    }
    uint64_t v10 = *((void *)this + 11);
    goto LABEL_59;
  }
  if (a2 == 1652125803) {
    goto LABEL_49;
  }
  if (a2 != 1668112752)
  {
    if (a2 == 1684434292)
    {
      if (!*(unsigned char *)(*((void *)this + 1) + 105)) {
        return result;
      }
      if (!a3) {
        return 0;
      }
      uint64_t result = 0;
      unsigned int v8 = 40;
LABEL_64:
      *a3 = v8;
      return result;
    }
LABEL_73:
    if (a3) {
      *a3 = 0;
    }
    uint64_t result = 1886681407;
    if (a4) {
      *a4 = 0;
    }
    return result;
  }
  uint64_t result = v6;
  if (*(unsigned char *)(*((void *)this + 1) + 109))
  {
    if (a3)
    {
      uint64_t result = 0;
      unsigned int v8 = *((_DWORD *)this + 36);
      goto LABEL_64;
    }
    return 0;
  }
  return result;
}

BOOL TOpaqueObject<AudioFileStreamWrapper,OpaqueAudioFileStreamID *,BaseOpaqueObject>::isa(uint64_t a1, void *a2)
{
  return a2 == &TOpaqueRTTI<AudioFileStreamWrapper>::sRTTI || a2 == (void *)MEMORY[0x1E4FB9468];
}

uint64_t AudioFileStreamWrapper::PrintObject(AudioFileStreamWrapper *this, __sFILE *a2)
{
  return fprintf(a2, "AudioFileStreamWrapper %p\n", this);
}

void AudioFileStreamWrapper::~AudioFileStreamWrapper(AudioFileStreamWrapper *this)
{
  AudioFileStreamWrapper::~AudioFileStreamWrapper(this);
  JUMPOUT(0x192FC8940);
}

{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t vars8;

  *(void *)this = &unk_1EDF93830;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  int v3 = (void *)*((void *)this + 17);
  if (v3) {
    free(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 27);
  if (v4)
  {
    *((void *)this + 28) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 21);
  if (v5)
  {
    *((void *)this + 22) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 16);
  if (v6)
  {
    free(v6);
    *((void *)this + 16) = 0;
  }
  int v7 = (void *)*((void *)this + 6);
  if (v7)
  {
    *((void *)this + 7) = v7;
    operator delete(v7);
  }
  BaseOpaqueObject::~BaseOpaqueObject(this);
}

uint64_t AudioFileStreamRecognizer::ParseHeader(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 236);
  if (v2 == -1) {
    return 0;
  }
  if (v2)
  {
    if (v2 != 1464)
    {
      uint64_t result = 0;
LABEL_84:
      int v24 = -1;
      goto LABEL_85;
    }
    uint64_t v5 = *(void *)(a1 + 8);
    LODWORD(v6) = *(_DWORD *)(v5 + 116);
  }
  else
  {
    *(_DWORD *)(a1 + 256) = 128;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v9 = *(void *)(v5 + 88);
    uint64_t v8 = *(void *)(v5 + 96);
    uint64_t v10 = v9 + *(unsigned int *)(v5 + 80);
    BOOL v12 = v8 < v9 || v10 <= v8;
    unsigned int v13 = v10 - v8;
    if (v12) {
      size_t v6 = 0;
    }
    else {
      size_t v6 = v13;
    }
    if (v6 > 0x7F) {
      goto LABEL_43;
    }
    *(void *)(a1 + 272) = v8;
    uint64_t v14 = *(char **)(v5 + 72);
    if (v14 == *(char **)(v5 + 128))
    {
      if (v13) {
        int v15 = v12;
      }
      else {
        int v15 = 1;
      }
      if (v15) {
        long long v16 = 0;
      }
      else {
        long long v16 = &v14[(v8 - v9)];
      }
      memmove(v14, v16, v6);
      uint64_t v5 = *(void *)(a1 + 8);
      if (*(_DWORD *)(v5 + 120) <= 0x7Fu)
      {
        *(_DWORD *)(v5 + 120) = 128;
        CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v5 + 128), 0x80uLL);
        uint64_t v5 = *(void *)(a1 + 8);
      }
      *(_DWORD *)(v5 + 116) = v6;
      *(void *)(v5 + 96) = *(void *)(v5 + 88) + *(unsigned int *)(v5 + 80);
    }
    else
    {
      if (*(_DWORD *)(v5 + 120) <= 0x7Fu)
      {
        *(_DWORD *)(v5 + 120) = 128;
        CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v5 + 128), 0x80uLL);
        uint64_t v5 = *(void *)(a1 + 8);
      }
      LODWORD(v6) = 0;
      *(_DWORD *)(v5 + 116) = 0;
    }
  }
  unsigned int v17 = *(_DWORD *)(a1 + 256) - v6;
  uint64_t v18 = *(void *)(v5 + 88);
  uint64_t v19 = *(void *)(v5 + 96);
  uint64_t v20 = v18 + *(unsigned int *)(v5 + 80);
  if (v20 <= v19 || v19 < v18) {
    unsigned int v22 = 0;
  }
  else {
    unsigned int v22 = v20 - v19;
  }
  if (v17 <= v22) {
    unsigned int v17 = v22;
  }
  unsigned int v49 = v17;
  size_t v23 = v17 + v6;
  if (*(_DWORD *)(v5 + 120) < v23)
  {
    *(_DWORD *)(v5 + 120) = v23;
    CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v5 + 128), v23);
    uint64_t v5 = *(void *)(a1 + 8);
    LODWORD(v6) = *(_DWORD *)(v5 + 116);
  }
  StreamBuffer::Copy((void *)(v5 + 72), &v49, (unsigned __int8 *)(*(void *)(v5 + 128) + v6));
  uint64_t v5 = *(void *)(a1 + 8);
  unsigned int v13 = *(_DWORD *)(v5 + 116) + v49;
  *(_DWORD *)(v5 + 116) = v13;
  if (v13 < *(_DWORD *)(a1 + 256))
  {
    uint64_t result = 0;
    int v24 = 1464;
LABEL_85:
    *(_DWORD *)(a1 + 236) = v24;
    return result;
  }
  uint64_t v8 = *(void *)(a1 + 272);
  uint64_t v25 = *(void *)(v5 + 128);
  *(void *)(v5 + 88) = v8;
  *(void *)(v5 + 96) = v8;
  *(void *)(v5 + 72) = v25;
  *(_DWORD *)(v5 + 80) = v13;
  uint64_t v10 = v8 + v13;
  uint64_t v9 = v8;
LABEL_43:
  uint64_t v26 = 0;
  BOOL v27 = v8 >= v9 && v8 < v10;
  int v28 = !v27;
  if (v27 && v13) {
    uint64_t v26 = (const void *)(*(void *)(v5 + 72) + (v8 - v9));
  }
  if (v28) {
    uint64_t v29 = 0;
  }
  else {
    uint64_t v29 = v13;
  }
  AudioFileFormatRegistry = (AudioFileFormatRegistry *)GetAudioFileFormatRegistry();
  unsigned int v31 = AudioFileFormatRegistry;
  uint64_t v32 = *(void *)(a1 + 8);
  unsigned int v33 = *(_DWORD *)(v32 + 12);
  if (!v33
    || (uint64_t v34 = AudioFileFormatRegistry::Get(AudioFileFormatRegistry, *(_DWORD *)(v32 + 12))) == 0
    || (FormatForData = (_DWORD *)v34,
        (*(unsigned int (**)(uint64_t, uint64_t, const void *))(*(void *)v34 + 24))(v34, v29, v26) != 1))
  {
    if ((*(unsigned int (**)(void, uint64_t, const void *))(**((void **)v31 + 8) + 24))(*((void *)v31 + 8), v29, v26) == 1)
    {
      FormatForData = (_DWORD *)*((void *)v31 + 8);
    }
    else
    {
      FormatForData = (_DWORD *)AudioFileFormatRegistry::GetFormatForData(v31, v29, v26);
      if (!FormatForData)
      {
        if (!v33) {
          goto LABEL_83;
        }
        uint64_t v48 = AudioFileFormatRegistry::Get(v31, v33);
        if (!v48) {
          goto LABEL_83;
        }
        FormatForData = (_DWORD *)v48;
        if (!(*(unsigned int (**)(uint64_t, uint64_t, const void *))(*(void *)v48 + 24))(v48, v29, v26)) {
          goto LABEL_83;
        }
      }
    }
  }
  int v36 = FormatForData[2];
  uint64_t v37 = (*(uint64_t (**)(_DWORD *))(*(void *)FormatForData + 120))(FormatForData);
  if (!v37)
  {
    if ((v36 & 0xFBFFFFFF) == 0x61632D33) {
      operator new();
    }
    goto LABEL_83;
  }
  uint64_t v38 = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 144))(v37);
  if (!v38)
  {
LABEL_83:
    uint64_t result = 1954115647;
    goto LABEL_84;
  }
  uint64_t v39 = 0;
  *(_DWORD *)(v38 + 16) = v36;
  *(void *)a2 = v38;
  *(void *)(a2 + 8) = AudioFileStreamObject::ParseHeader;
  *(void *)(a2 + 16) = 0;
  uint64_t v40 = *(void *)(a1 + 8);
  uint64_t v41 = *(void *)(v40 + 88);
  uint64_t v42 = *(void *)(v40 + 96);
  uint64_t v43 = v41 + *(unsigned int *)(v40 + 80);
  BOOL v44 = v42 < v41 || v43 <= v42;
  int v45 = v44;
  int v46 = v43 - v42;
  if (!v44 && v46) {
    uint64_t v39 = *(void *)(v40 + 72) + (v42 - v41);
  }
  uint64_t result = 0;
  *(void *)(a2 + 32) = v39;
  if (v45) {
    int v47 = 0;
  }
  else {
    int v47 = v46;
  }
  *(_DWORD *)(a2 + 24) = v47;
  return result;
}

void sub_190065F70(void *a1)
{
  MEMORY[0x192FC8940](v2, 0x10B1C404537FDE6);
  __cxa_begin_catch(a1);
  *(_DWORD *)(v1 + 236) = -1;
  __cxa_end_catch();
  JUMPOUT(0x190065F54);
}

uint64_t AudioFileStreamRecognizer::Seek(AudioFileStreamRecognizer *this, uint64_t a2, uint64_t *a3, unsigned int *a4)
{
  return 1836020325;
}

void AudioFileStreamRecognizer::~AudioFileStreamRecognizer(AudioFileStreamRecognizer *this)
{
  AudioFileStreamObject::~AudioFileStreamObject(this);
  JUMPOUT(0x192FC8940);
}

void AudioFileStreamObject::~AudioFileStreamObject(AudioFileStreamObject *this)
{
  *(void *)this = &unk_1EDF93350;
  uint64_t v2 = (void *)*((void *)this + 36);
  if (v2)
  {
    free(v2);
    *((void *)this + 36) = 0;
  }
  int v3 = (void *)*((void *)this + 24);
  if (v3)
  {
    free(v3);
    *((void *)this + 24) = 0;
  }
  unint64_t v4 = (void *)*((void *)this + 17);
  if (v4)
  {
    free(v4);
    *((void *)this + 17) = 0;
  }
  uint64_t v5 = (void *)*((void *)this + 15);
  if (v5)
  {
    free(v5);
    *((void *)this + 15) = 0;
  }
  size_t v6 = (void *)*((void *)this + 8);
  if (v6)
  {
    *((void *)this + 9) = v6;
    operator delete(v6);
  }
}

uint64_t AudioFileStreamRestrictedRecognizer::ParseHeader(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 432)) {
    return 1852797029;
  }
  uint64_t v2 = (void *)a1;
  int v3 = *(_DWORD *)(a1 + 236);
  if (v3 == -1) {
    return 0;
  }
  if (v3)
  {
    if (v3 != 1539) {
      goto LABEL_113;
    }
    uint64_t v5 = *(void *)(a1 + 8);
    LODWORD(v6) = *(_DWORD *)(v5 + 116);
  }
  else
  {
    *(_DWORD *)(a1 + 256) = 128;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v9 = *(void *)(v5 + 88);
    uint64_t v8 = *(void *)(v5 + 96);
    uint64_t v10 = v9 + *(unsigned int *)(v5 + 80);
    BOOL v12 = v8 < v9 || v10 <= v8;
    unsigned int v13 = v10 - v8;
    if (v12) {
      size_t v6 = 0;
    }
    else {
      size_t v6 = v13;
    }
    if (v6 > 0x7F) {
      goto LABEL_44;
    }
    *(void *)(a1 + 272) = v8;
    uint64_t v14 = *(char **)(v5 + 72);
    if (v14 == *(char **)(v5 + 128))
    {
      if (v13) {
        int v15 = v12;
      }
      else {
        int v15 = 1;
      }
      if (v15) {
        long long v16 = 0;
      }
      else {
        long long v16 = &v14[(v8 - v9)];
      }
      memmove(v14, v16, v6);
      uint64_t v5 = v2[1];
      if (*(_DWORD *)(v5 + 120) <= 0x7Fu)
      {
        *(_DWORD *)(v5 + 120) = 128;
        CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v5 + 128), 0x80uLL);
        uint64_t v5 = v2[1];
      }
      *(_DWORD *)(v5 + 116) = v6;
      *(void *)(v5 + 96) = *(void *)(v5 + 88) + *(unsigned int *)(v5 + 80);
    }
    else
    {
      if (*(_DWORD *)(v5 + 120) <= 0x7Fu)
      {
        *(_DWORD *)(v5 + 120) = 128;
        CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v5 + 128), 0x80uLL);
        uint64_t v5 = v2[1];
      }
      LODWORD(v6) = 0;
      *(_DWORD *)(v5 + 116) = 0;
    }
  }
  unsigned int v17 = *((_DWORD *)v2 + 64) - v6;
  uint64_t v18 = *(void *)(v5 + 88);
  uint64_t v19 = *(void *)(v5 + 96);
  uint64_t v20 = v18 + *(unsigned int *)(v5 + 80);
  if (v20 <= v19 || v19 < v18) {
    unsigned int v22 = 0;
  }
  else {
    unsigned int v22 = v20 - v19;
  }
  if (v17 <= v22) {
    unsigned int v17 = v22;
  }
  v89[0] = v17;
  size_t v23 = v17 + v6;
  if (*(_DWORD *)(v5 + 120) < v23)
  {
    *(_DWORD *)(v5 + 120) = v23;
    CADeprecated::CAAutoFree<unsigned char>::reallocBytes((void **)(v5 + 128), v23);
    uint64_t v5 = v2[1];
    LODWORD(v6) = *(_DWORD *)(v5 + 116);
  }
  StreamBuffer::Copy((void *)(v5 + 72), v89, (unsigned __int8 *)(*(void *)(v5 + 128) + v6));
  uint64_t v5 = v2[1];
  unsigned int v13 = *(_DWORD *)(v5 + 116) + v89[0];
  *(_DWORD *)(v5 + 116) = v13;
  if (v13 < *((_DWORD *)v2 + 64))
  {
    uint64_t v7 = 0;
    int v24 = 1539;
    goto LABEL_114;
  }
  uint64_t v8 = v2[34];
  uint64_t v25 = *(void *)(v5 + 128);
  *(void *)(v5 + 88) = v8;
  *(void *)(v5 + 96) = v8;
  *(void *)(v5 + 72) = v25;
  *(_DWORD *)(v5 + 80) = v13;
  uint64_t v10 = v8 + v13;
  uint64_t v9 = v8;
LABEL_44:
  uint64_t v26 = 0;
  uint64_t v27 = (uint64_t)(v2 + 45);
  BOOL v28 = v8 >= v9 && v8 < v10;
  int v29 = !v28;
  if (v28 && v13) {
    uint64_t v26 = *(void *)(v5 + 72) + (v8 - v9);
  }
  if (v29) {
    uint64_t v30 = 0;
  }
  else {
    uint64_t v30 = v13;
  }
  AudioFileFormatRegistry = (AudioFileFormatRegistry *)GetAudioFileFormatRegistry();
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(**((void **)AudioFileFormatRegistry + 8) + 24))(*((void **)AudioFileFormatRegistry + 8), v30, v26) == 1)
  {
    uint64_t v32 = (*(uint64_t (**)(void *))(**((void **)AudioFileFormatRegistry + 8) + 120))(*((void **)AudioFileFormatRegistry + 8));
    uint64_t v33 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 144))(v32);
    uint64_t v34 = (void **)(v33 + 512);
    if (*(unsigned char *)(v33 + 536))
    {
      float v35 = *v34;
      if (*v34)
      {
        *(void *)(v33 + 520) = v35;
        operator delete(v35);
      }
      *(unsigned char *)(v33 + 536) = 0;
    }
    *uint64_t v34 = 0;
    *(void *)(v33 + 520) = 0;
    *(void *)(v33 + 528) = 0;
    std::vector<AudioFileInfo>::__init_with_size[abi:ne180100]<AudioFileInfo*,AudioFileInfo*>(v34, (const void *)v2[42], v2[43], (uint64_t)(v2[43] - v2[42]) >> 4);
    *(unsigned char *)(v33 + 536) = 1;
    if (*((unsigned char *)v2 + 432)) {
      std::optional<AudioFileAllowListFilter>::operator=[abi:ne180100]<AudioFileAllowListFilter const&,void>(v33 + 544, (uint64_t)(v2 + 45));
    }
    uint64_t v36 = 0;
    *(void *)a2 = v33;
    *(void *)(a2 + 8) = AudioFileStreamObject::ParseHeader;
    *(void *)(a2 + 16) = 0;
    uint64_t v37 = v2[1];
    uint64_t v38 = *(void *)(v37 + 88);
    uint64_t v39 = *(void *)(v37 + 96);
    uint64_t v40 = v38 + *(unsigned int *)(v37 + 80);
    BOOL v41 = v39 < v38 || v40 <= v39;
    int v42 = v41;
    int v43 = v40 - v39;
    if (!v41 && v43) {
      uint64_t v36 = *(void *)(v37 + 72) + (v39 - v38);
    }
    uint64_t v7 = 0;
    *(void *)(a2 + 32) = v36;
    if (v42) {
      int v44 = 0;
    }
    else {
      int v44 = v43;
    }
    *(_DWORD *)(a2 + 24) = v44;
    return v7;
  }
  uint64_t v45 = v2[42];
  uint64_t v87 = v2[43];
  if (v45 == v87) {
    goto LABEL_131;
  }
  unsigned int v84 = v2;
  uint64_t v46 = 0;
  uint64_t v85 = (uint64_t)(v2 + 45);
  uint64_t v86 = a2;
  do
  {
    AudioFileAllowListFilter::GetAllowedTypes((uint64_t)v89, v27, v45);
    int v47 = *(unsigned int **)v89;
    uint64_t v48 = v90;
    if (*(unsigned int **)v89 == v90)
    {
      char v54 = 1;
      if (*(void *)v89) {
LABEL_91:
      }
        operator delete(v47);
    }
    else
    {
      unsigned int v49 = *(unsigned int **)v89;
      while (1)
      {
        unsigned int v50 = *v49;
        uint64_t v51 = AudioFileFormatRegistry::Get(AudioFileFormatRegistry, *v49);
        uint64_t v52 = v51;
        if (v51)
        {
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v51 + 24))(v51, v30, v26) == 1)
          {
            uint64_t v53 = (*(uint64_t (**)(uint64_t))(*(void *)v52 + 120))(v52);
            if (v53)
            {
              uint64_t v46 = (*(uint64_t (**)(uint64_t))(*(void *)v53 + 144))(v53);
            }
            else if ((v50 & 0xFBFFFFFF) == 0x61632D33)
            {
              operator new();
            }
            if (v46) {
              break;
            }
          }
        }
        if (++v49 == v48)
        {
          char v54 = 1;
          uint64_t v27 = v85;
          a2 = v86;
          if (v47) {
            goto LABEL_91;
          }
          goto LABEL_92;
        }
      }
      uint64_t v55 = 0;
      *(_DWORD *)(v46 + 16) = v50;
      a2 = v86;
      *(void *)uint64_t v86 = v46;
      *(void *)(v86 + 8) = AudioFileStreamObject::ParseHeader;
      *(void *)(v86 + 16) = 0;
      uint64_t v56 = v84[1];
      uint64_t v57 = *(void *)(v56 + 88);
      uint64_t v58 = *(void *)(v56 + 96);
      uint64_t v59 = v57 + *(unsigned int *)(v56 + 80);
      BOOL v60 = v58 < v57 || v59 <= v58;
      int v61 = v60;
      int v62 = v59 - v58;
      if (v60)
      {
        uint64_t v27 = v85;
      }
      else
      {
        uint64_t v27 = v85;
        if (v62) {
          uint64_t v55 = *(void *)(v56 + 72) + (v58 - v57);
        }
      }
      char v54 = 0;
      *(void *)(v86 + 32) = v55;
      if (v61) {
        int v63 = 0;
      }
      else {
        int v63 = v62;
      }
      *(_DWORD *)(v86 + 24) = v63;
      if (v47) {
        goto LABEL_91;
      }
    }
LABEL_92:
    if ((v54 & 1) == 0) {
      return 0;
    }
    v45 += 16;
  }
  while (v45 != v87);
  uint64_t v2 = v84;
  if (v46) {
    goto LABEL_113;
  }
  uint64_t v65 = (long long *)v84[42];
  if (v65 == (long long *)v84[43]) {
    goto LABEL_131;
  }
  long long v88 = *v65;
  AudioFileAllowListFilter::GetAllowedTypes((uint64_t)v89, v27, (uint64_t)&v88);
  int v67 = *(unsigned int **)v89;
  char v66 = v90;
  if (*(unsigned int **)v89 == v90)
  {
LABEL_126:
    uint64_t v73 = 0;
    int v74 = 1;
    uint64_t v7 = 0;
    goto LABEL_127;
  }
  unsigned int v68 = *(unsigned int **)v89;
  while (1)
  {
    unsigned int v69 = *v68;
    uint64_t v70 = AudioFileFormatRegistry::Get(AudioFileFormatRegistry, *v68);
    uint64_t v71 = v70;
    if (v70)
    {
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v70 + 24))(v70, v30, v26))
      {
        uint64_t v72 = (*(uint64_t (**)(uint64_t))(*(void *)v71 + 120))(v71);
        if (!v72)
        {
          if ((v69 & 0xFBFFFFFF) == 0x61632D33) {
            operator new();
          }
          goto LABEL_125;
        }
        uint64_t v73 = (*(uint64_t (**)(uint64_t))(*(void *)v72 + 144))(v72);
        if (v73) {
          break;
        }
      }
    }
LABEL_125:
    if (++v68 == v66) {
      goto LABEL_126;
    }
  }
  uint64_t v75 = 0;
  *(_DWORD *)(v73 + 16) = v69;
  *(void *)a2 = v73;
  *(void *)(a2 + 8) = AudioFileStreamObject::ParseHeader;
  *(void *)(a2 + 16) = 0;
  uint64_t v76 = v84[1];
  uint64_t v77 = *(void *)(v76 + 88);
  uint64_t v78 = *(void *)(v76 + 96);
  uint64_t v79 = v77 + *(unsigned int *)(v76 + 80);
  BOOL v80 = v78 < v77 || v79 <= v78;
  int v81 = v80;
  int v82 = v79 - v78;
  if (!v80 && v82) {
    uint64_t v75 = *(void *)(v76 + 72) + (v78 - v77);
  }
  int v74 = 0;
  uint64_t v7 = 0;
  *(void *)(a2 + 32) = v75;
  if (v81) {
    int v83 = 0;
  }
  else {
    int v83 = v82;
  }
  *(_DWORD *)(a2 + 24) = v83;
LABEL_127:
  if (v67) {
    operator delete(v67);
  }
  if (v74)
  {
    uint64_t v2 = v84;
    if (!v73)
    {
LABEL_131:
      *((_DWORD *)v2 + 59) = -1;
      return 1954115647;
    }
LABEL_113:
    uint64_t v7 = 0;
    int v24 = -1;
LABEL_114:
    *((_DWORD *)v2 + 59) = v24;
  }
  return v7;
}

void sub_190066858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    operator delete(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AudioFileStreamRestrictedRecognizer::Seek(AudioFileStreamRestrictedRecognizer *this, uint64_t a2, uint64_t *a3, unsigned int *a4)
{
  return 1836020325;
}

uint64_t AudioFileStreamRestrictedRecognizer::SetProperty(AudioFileStreamRestrictedRecognizer *this, int a2, unsigned int a3, CFDictionaryRef *a4)
{
  if (a2 != 1634495607) {
    return 1886681407;
  }
  if (a3 < 8) {
    return 561211770;
  }
  uint64_t v7 = (AudioFileStreamRestrictedRecognizer *)((char *)this + 360);
  if (*((unsigned char *)this + 432))
  {
    AudioFileAllowListFilter::~AudioFileAllowListFilter(v7);
    *((unsigned char *)this + 432) = 0;
  }
  AudioFileAllowListFilter::AudioFileAllowListFilter(v7, *a4);
  uint64_t result = 0;
  *((unsigned char *)this + 432) = 1;
  return result;
}

void AudioFileStreamRestrictedRecognizer::~AudioFileStreamRestrictedRecognizer(AudioFileStreamRestrictedRecognizer *this)
{
  AudioFileStreamRestrictedRecognizer::~AudioFileStreamRestrictedRecognizer(this);
  JUMPOUT(0x192FC8940);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EDF94A08;
  if (*((unsigned char *)this + 432)) {
    AudioFileAllowListFilter::~AudioFileAllowListFilter((AudioFileStreamRestrictedRecognizer *)((char *)this + 360));
  }
  uint64_t v2 = (void *)*((void *)this + 42);
  if (v2)
  {
    *((void *)this + 43) = v2;
    operator delete(v2);
  }
  AudioFileStreamObject::~AudioFileStreamObject(this);
}

uint64_t AudioFileStreamWrapper::CallPropertyListener(uint64_t this, uint64_t a2, int a3)
{
  int v5 = a3;
  if ((int)a2 > 1819243875)
  {
    if ((int)a2 > 1886283374)
    {
      switch(a2)
      {
        case 0x706E666F:
          if (*(unsigned char *)(this + 106)) {
            return this;
          }
          *(unsigned char *)(this + 106) = 1;
          break;
        case 0x70726D66:
          if (*(unsigned char *)(this + 107)) {
            return this;
          }
          *(unsigned char *)(this + 107) = 1;
          break;
        case 0x72656479:
          if (*(_DWORD *)(this + 112)) {
            return this;
          }
          *(_DWORD *)(this + 112) = 1;
          break;
      }
      goto LABEL_19;
    }
    if (a2 == 1819243876)
    {
      if (*(unsigned char *)(this + 110)) {
        return this;
      }
      *(unsigned char *)(this + 110) = 1;
      goto LABEL_19;
    }
    int v3 = 1835493731;
    goto LABEL_17;
  }
  if ((int)a2 <= 1717988723)
  {
    if (a2 == 1668112752)
    {
      if (*(unsigned char *)(this + 109)) {
        return this;
      }
      *(unsigned char *)(this + 109) = 1;
    }
    else if (a2 == 1684434292)
    {
      if (*(unsigned char *)(this + 105)) {
        return this;
      }
      *(unsigned char *)(this + 105) = 1;
    }
    goto LABEL_19;
  }
  if (a2 != 1717988724)
  {
    int v3 = 1718383476;
LABEL_17:
    if (a2 == v3) {
      *(unsigned char *)(this + 108) = 1;
    }
    goto LABEL_19;
  }
  if (*(unsigned char *)(this + 104)) {
    return this;
  }
  *(unsigned char *)(this + 104) = 1;
LABEL_19:
  unint64_t v4 = *(uint64_t (**)(void, void, uint64_t, int *))(this + 24);
  if (v4) {
    return v4(*(void *)(this + 40), *(unsigned int *)(this + 8), a2, &v5);
  }
  return this;
}

uint64_t AudioFileStreamObject::GetPacketTable(AudioFileStreamObject *this)
{
  uint64_t result = *((void *)this + 19);
  if (!result)
  {
    if (*(unsigned char *)(*((void *)this + 1) + 105)) {
      operator new();
    }
    return 0;
  }
  return result;
}

uint64_t AudioFileStreamRestrictedRecognizer::AudioFileStreamRestrictedRecognizer(uint64_t a1, unsigned int a2, const void *a3)
{
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = -1;
  *(void *)(a1 + 96) = -1;
  *(void *)(a1 + 104) = -1;
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(_WORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 236) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 232) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 240) = AudioFileStreamObject::ParseHeader;
  *(void *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 300) = 0;
  *(void *)(a1 + 284) = 0;
  *(void *)(a1 + 292) = 0;
  *(_DWORD *)(a1 + 328) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  uint64_t v5 = a2;
  *(void *)a1 = &unk_1EDF94A08;
  std::vector<AudioFileInfo>::vector((void *)(a1 + 336), a2);
  *(unsigned char *)(a1 + 360) = 0;
  *(unsigned char *)(a1 + 432) = 0;
  memcpy(*(void **)(a1 + 336), a3, 16 * v5);
  return a1;
}

void sub_190066CFC(_Unwind_Exception *a1)
{
  AudioFileStreamObject::~AudioFileStreamObject(v1);
  _Unwind_Resume(a1);
}

void *std::vector<AudioFileInfo>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<AudioFileInfo>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_190066D6C(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void XAtomicPoolAllocator::allocChunk(XAtomicPoolAllocator *this)
{
  uint64_t v2 = (char *)malloc_type_malloc(*((void *)this + 2), 0x8DD98034uLL);
  OSAtomicEnqueue((OSQueueHead *)this + 4, v2, *((void *)this + 10));
  unint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    for (unint64_t i = 0; i < v3; ++i)
    {
      OSAtomicEnqueue((OSQueueHead *)this + 2, v2, *((void *)this + 6));
      unint64_t v3 = *((void *)this + 1);
      v2 += *(void *)this;
    }
  }
  atomic_fetch_add_explicit((atomic_uint *volatile)this + 24, v3, memory_order_relaxed);
}

void caulk::concurrent::condition_message::~condition_message(caulk::concurrent::condition_message *this)
{
  *(void *)this = &unk_1EDF96228;
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)this + 5);
  caulk::concurrent::message::~message(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EDF96228;
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)this + 5);
  caulk::concurrent::message::~message(this);
  JUMPOUT(0x192FC8940);
}

void XAtomicPoolAllocator::~XAtomicPoolAllocator(XAtomicPoolAllocator *this)
{
  uint64_t v2 = (OSQueueHead *)((char *)this + 64);
  while (1)
  {
    unint64_t v3 = OSAtomicDequeue(v2, *((void *)this + 10));
    if (!v3) {
      break;
    }
    free(v3);
  }
}

uint64_t caulk::concurrent::condition_message::perform(caulk::concurrent::condition_message *this)
{
  atomic_store(0, (unsigned __int8 *)this + 32);
  uint64_t v1 = *((void *)this + 8);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);
  return v2();
}

void _ZNSt3__110__function6__funcIN29AUScheduledParameterRefresher9mWorkToDoMUlvE_ENS_9allocatorIS3_EEFvvEEclEv(uint64_t a1)
{
}

void AUScheduledParameterRefresher::performPendingMessages(AUScheduledParameterRefresher *this)
{
  uint64_t v2 = (os_unfair_lock_s *)((char *)this + 8);
  os_unfair_lock_lock((os_unfair_lock_t)this + 2);
  while (1)
  {
    unint64_t v3 = (unint64_t *)*((void *)this + 35);
    if (v3) {
      goto LABEL_7;
    }
    unint64_t v4 = (unint64_t *)atomic_exchange_explicit((atomic_ullong *volatile)this + 27, 0, memory_order_acquire);
    if (!v4) {
      break;
    }
    unint64_t v3 = 0;
    do
    {
      unint64_t v5 = (unint64_t)v3;
      unint64_t v3 = v4;
      unint64_t v4 = (unint64_t *)atomic_load(v4);
      atomic_store(v5, v3);
    }
    while (v4);
    *((void *)this + 35) = v3;
LABEL_7:
    unint64_t v6 = atomic_load(v3);
    *((void *)this + 35) = v6;
    (**(void (***)(AUScheduledParameterRefresher *, unint64_t, unint64_t))this)(this, v3[1], v3[2]);
    OSAtomicEnqueue((OSQueueHead *)this + 3, v3, *((void *)this + 8));
    atomic_fetch_add_explicit((atomic_uint *volatile)this + 28, 1u, memory_order_relaxed);
  }
  os_unfair_lock_unlock(v2);
}

void sub_190067048(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIN29AUScheduledParameterRefresher9mWorkToDoMUlvE_ENS_9allocatorIS3_EEFvvEE7__cloneEPNS0_6__baseIS6_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EDF9E320;
  a2[1] = v2;
  return result;
}

void *_ZNKSt3__110__function6__funcIN29AUScheduledParameterRefresher9mWorkToDoMUlvE_ENS_9allocatorIS3_EEFvvEE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EDF9E320;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIN29AUScheduledParameterRefresher9mWorkToDoMUlvE_ENS_9allocatorIS3_EEFvvEED0Ev()
{
}

uint64_t FormatFromESDS(unsigned __int8 *a1, int a2, unsigned int *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  v19[2] = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  v22[2] = 0;
  MP4AudioProgramConfig::Clear((MP4AudioProgramConfig *)v22);
  long long v24 = 0u;
  long long v23 = 0u;
  DecoderConfigDescr::cleanup((DecoderConfigDescr *)v19);
  unint64_t v6 = (char *)&a1[a2];
  v16[0] = a1;
  v16[1] = v6;
  uint64_t v17 = 0;
  if ((a1 & 3) != 0 && a2)
  {
    int v7 = 0;
    char v8 = (_BYTE)a1 + 1;
    int v9 = -8;
    do
    {
      int v10 = v9;
      int v11 = *a1++;
      int v7 = v11 | (v7 << 8);
      v9 += 8;
      if ((v8 & 3) == 0) {
        break;
      }
      ++v8;
    }
    while (a1 < (unsigned __int8 *)v6);
    v16[0] = a1;
    LODWORD(v17) = v7 << (24 - v9);
    HIDWORD(v17) = v10 + 16;
  }
  uint64_t v12 = MP4AudioESDS::Deserialize((uint64_t)v18, (uint64_t)v16, 0, 0);
  uint64_t v13 = v12;
  if (a3 && !v12)
  {
    if ((v20 - 1) > 0x29) {
      unsigned int v14 = 0;
    }
    else {
      unsigned int v14 = *(_DWORD *)&aMcaaCaarcaatca[4 * (v20 - 1)];
    }
    *a3 = v14;
  }
  if (*((void *)&v24 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v24 + 1));
  }
  if (*((void *)&v23 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v23 + 1));
  }
  return v13;
}

void sub_190067254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  MP4AudioESDS::~MP4AudioESDS((MP4AudioESDS *)va);
  _Unwind_Resume(a1);
}

uint64_t AudioFormatProperty_AudioFormatInfoFromESDS(unsigned __int8 *a1, AudioFormatID a2, unsigned int *a3, AudioStreamBasicDescription *a4)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  int v29 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  v33[2] = 0;
  MP4AudioProgramConfig::Clear((MP4AudioProgramConfig *)v33);
  long long v35 = 0u;
  long long v34 = 0u;
  DecoderConfigDescr::cleanup((DecoderConfigDescr *)&v28);
  unsigned int v22 = 0;
  v20[0] = a1;
  v20[1] = &a1[a2];
  uint64_t v21 = 0;
  if ((a1 & 3) != 0 && a2)
  {
    int v8 = 0;
    char v9 = (_BYTE)a1 + 1;
    int v10 = -8;
    int v11 = a1;
    do
    {
      int v12 = v10;
      int v13 = *v11++;
      int v8 = v13 | (v8 << 8);
      v10 += 8;
      if ((v9 & 3) == 0) {
        break;
      }
      ++v9;
    }
    while (v11 < &a1[a2]);
    v20[0] = v11;
    LODWORD(v21) = v8 << (24 - v10);
    HIDWORD(v21) = v12 + 16;
  }
  uint64_t v14 = MP4AudioESDS::Deserialize((uint64_t)v27, (uint64_t)v20, (int *)&v22, 2);
  if (v14)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      long long v24 = "AudioFormatCookies.cpp";
      __int16 v25 = 1024;
      int v26 = 49;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to parse ESDS", buf, 0x12u);
    }
    goto LABEL_18;
  }
  if (!a3 || *a3 < 0x28)
  {
    uint64_t v14 = 0;
    goto LABEL_18;
  }
  uint64_t v14 = 1718449215;
  if (!DecoderConfigDescr::MakeStreamDescription((DecoderConfigDescr *)&v28, a4, v15))
  {
    AudioFormatID mFormatID = a4->mFormatID;
    if (mFormatID)
    {
      if (*a3 <= 0x37)
      {
        if (mFormatID == 1987015266) {
          goto LABEL_18;
        }
        unsigned int v17 = 40;
        goto LABEL_32;
      }
      if (mFormatID == 1987015266)
      {
        uint64_t v14 = AudioFormatProperty_FormatInfo(v30, &a1[v22], a4);
        if (v14) {
          goto LABEL_18;
        }
        AudioFormatID mFormatID = a4->mFormatID;
      }
      *(void *)&a4[1].double mSampleRate = a1;
      a4[1].AudioFormatID mFormatID = a2;
      if (mFormatID == 1987015266)
      {
        *(void *)&a4[1].double mSampleRate = &a1[v22];
        unsigned int v19 = v30;
      }
      else
      {
        if ((v29 - 105) < 0xFFFFFFFD)
        {
LABEL_31:
          unsigned int v17 = 56;
LABEL_32:
          uint64_t v14 = 0;
          *a3 = v17;
          goto LABEL_18;
        }
        unsigned int v19 = 0;
        a4[1].double mSampleRate = 0.0;
      }
      a4[1].AudioFormatID mFormatID = v19;
      goto LABEL_31;
    }
  }
LABEL_18:
  if (*((void *)&v35 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v35 + 1));
  }
  if (*((void *)&v34 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v34 + 1));
  }
  return v14;
}

void sub_1900674F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  MP4AudioESDS::~MP4AudioESDS((MP4AudioESDS *)va);
  _Unwind_Resume(a1);
}

uint64_t AudioFormatProperty_ChannelLayoutFromESDS(unsigned __int8 *a1, int a2, AudioChannelLayout *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  unsigned int v17 = 0;
  v19[2] = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  v22[2] = 0;
  MP4AudioProgramConfig::Clear((MP4AudioProgramConfig *)v22);
  long long v24 = 0u;
  long long v23 = 0u;
  DecoderConfigDescr::cleanup((DecoderConfigDescr *)v19);
  unint64_t v6 = (char *)&a1[a2];
  v15[0] = a1;
  v15[1] = v6;
  uint64_t v16 = 0;
  if ((a1 & 3) != 0 && a2)
  {
    int v7 = 0;
    char v8 = (_BYTE)a1 + 1;
    int v9 = -8;
    do
    {
      int v10 = v9;
      int v11 = *a1++;
      int v7 = v11 | (v7 << 8);
      v9 += 8;
      if ((v8 & 3) == 0) {
        break;
      }
      ++v8;
    }
    while (a1 < (unsigned __int8 *)v6);
    v15[0] = a1;
    LODWORD(v16) = v7 << (24 - v9);
    HIDWORD(v16) = v10 + 16;
  }
  uint64_t v12 = MP4AudioESDS::Deserialize((uint64_t)v18, (uint64_t)v15, 0, 0);
  if (!v12)
  {
    uint64_t v12 = 560360820;
    if (!DecoderConfigDescr::GetChannelLayoutTag((DecoderConfigDescr *)v19, &v17))
    {
      AudioChannelLayoutTag v13 = v17;
      if (v17)
      {
        uint64_t v12 = 0;
        a3->mChannelBitmap = 0;
        a3->UInt32 mNumberChannelDescriptions = 0;
        a3->signed int mChannelLayoutTag = v13;
      }
    }
  }
  if (*((void *)&v24 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v24 + 1));
  }
  if (*((void *)&v23 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v23 + 1));
  }
  return v12;
}

void sub_190067684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  MP4AudioESDS::~MP4AudioESDS((MP4AudioESDS *)va);
  _Unwind_Resume(a1);
}

uint64_t AudioFormatProperty_ASBDFromESD(unsigned __int8 *a1, int a2, AudioStreamBasicDescription *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  v18[2] = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  v21[2] = 0;
  MP4AudioProgramConfig::Clear((MP4AudioProgramConfig *)v21);
  long long v22 = 0u;
  long long v23 = 0u;
  DecoderConfigDescr::cleanup((DecoderConfigDescr *)v18);
  unint64_t v6 = (char *)&a1[a2];
  v16[0] = a1;
  v16[1] = v6;
  uint64_t v17 = 0;
  if ((a1 & 3) != 0 && a2)
  {
    int v7 = 0;
    char v8 = (_BYTE)a1 + 1;
    int v9 = -8;
    do
    {
      int v10 = v9;
      int v11 = *a1++;
      int v7 = v11 | (v7 << 8);
      v9 += 8;
      if ((v8 & 3) == 0) {
        break;
      }
      ++v8;
    }
    while (a1 < (unsigned __int8 *)v6);
    v16[0] = a1;
    LODWORD(v17) = v7 << (24 - v9);
    HIDWORD(v17) = v10 + 16;
  }
  uint64_t v12 = DecoderConfigDescr::Deserialize(v18, (uint64_t)v16, 0, 1);
  uint64_t v14 = v12;
  if (a3 && !v12)
  {
    if (DecoderConfigDescr::MakeStreamDescription((DecoderConfigDescr *)v18, a3, v13) || !a3->mFormatID) {
      uint64_t v14 = 1718449215;
    }
    else {
      uint64_t v14 = 0;
    }
  }
  if (*((void *)&v23 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v23 + 1));
  }
  if (*((void *)&v22 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v22 + 1));
  }
  return v14;
}

void sub_190067800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  DecoderConfigDescr::~DecoderConfigDescr((DecoderConfigDescr *)va);
  _Unwind_Resume(a1);
}

uint64_t AudioFormatProperty_ChannelLayoutFromESD(unsigned __int8 *a1, int a2, AudioChannelLayout *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  unsigned int v15 = 0;
  unint64_t v4 = (char *)&a1[a2];
  v13[0] = a1;
  v13[1] = v4;
  uint64_t v14 = 0;
  if ((a1 & 3) != 0 && a2)
  {
    int v5 = 0;
    char v6 = (_BYTE)a1 + 1;
    int v7 = -8;
    do
    {
      int v8 = v7;
      int v9 = *a1++;
      int v5 = v9 | (v5 << 8);
      v7 += 8;
      if ((v6 & 3) == 0) {
        break;
      }
      ++v6;
    }
    while (a1 < (unsigned __int8 *)v4);
    v13[0] = a1;
    LODWORD(v14) = v5 << (24 - v7);
    HIDWORD(v14) = v8 + 16;
  }
  void v16[2] = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  v19[2] = 0;
  MP4AudioProgramConfig::Clear((MP4AudioProgramConfig *)v19);
  long long v20 = 0u;
  long long v21 = 0u;
  DecoderConfigDescr::cleanup((DecoderConfigDescr *)v16);
  uint64_t v10 = DecoderConfigDescr::Deserialize(v16, (uint64_t)v13, 0, 1);
  if (!v10)
  {
    uint64_t v10 = 560360820;
    if (!DecoderConfigDescr::GetChannelLayoutTag((DecoderConfigDescr *)v16, &v15))
    {
      AudioChannelLayoutTag v11 = v15;
      if (v15)
      {
        uint64_t v10 = 0;
        a3->mChannelBitmap = 0;
        a3->UInt32 mNumberChannelDescriptions = 0;
        a3->signed int mChannelLayoutTag = v11;
      }
    }
  }
  if (*((void *)&v21 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v21 + 1));
  }
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
  return v10;
}

void sub_19006796C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  DecoderConfigDescr::~DecoderConfigDescr((DecoderConfigDescr *)va);
  _Unwind_Resume(a1);
}

uint64_t AudioFormatProperty_ESDFromESDSSize(unsigned __int8 *a1, int a2, unsigned int *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 2003329396;
  }
  int v5 = a1;
  v17[2] = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  void v20[2] = 0;
  MP4AudioProgramConfig::Clear((MP4AudioProgramConfig *)v20);
  long long v22 = 0u;
  long long v21 = 0u;
  DecoderConfigDescr::cleanup((DecoderConfigDescr *)v17);
  char v6 = &v5[a2];
  v14[0] = v5;
  v14[1] = v6;
  uint64_t v15 = 0;
  if ((v5 & 3) != 0 && a2)
  {
    int v7 = 0;
    char v8 = (_BYTE)v5 + 1;
    int v9 = -8;
    do
    {
      int v10 = v9;
      int v11 = *v5++;
      int v7 = v11 | (v7 << 8);
      v9 += 8;
      if ((v8 & 3) == 0) {
        break;
      }
      ++v8;
    }
    while (v5 < v6);
    v14[0] = v5;
    LODWORD(v15) = v7 << (24 - v9);
    HIDWORD(v15) = v10 + 16;
  }
  uint64_t v12 = MP4AudioESDS::Deserialize((uint64_t)v16, (uint64_t)v14, 0, 0);
  if (!v12) {
    *a3 = v17[1] + 5;
  }
  if (*((void *)&v22 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v22 + 1));
  }
  if (*((void *)&v21 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v21 + 1));
  }
  return v12;
}

void sub_190067ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  MP4AudioESDS::~MP4AudioESDS((MP4AudioESDS *)va);
  _Unwind_Resume(a1);
}

uint64_t AudioFormatProperty_ESDFromESDS(unsigned __int8 *a1, int a2, void *a3, unsigned int *a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  v21[2] = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  v24[2] = 0;
  MP4AudioProgramConfig::Clear((MP4AudioProgramConfig *)v24);
  long long v26 = 0u;
  long long v25 = 0u;
  DecoderConfigDescr::cleanup((DecoderConfigDescr *)v21);
  unsigned int v19 = 0;
  v17[0] = a1;
  v17[1] = &a1[a2];
  uint64_t v18 = 0;
  if ((a1 & 3) != 0 && a2)
  {
    int v8 = 0;
    char v9 = (_BYTE)a1 + 1;
    int v10 = -8;
    int v11 = a1;
    do
    {
      int v12 = v10;
      int v13 = *v11++;
      int v8 = v13 | (v8 << 8);
      v10 += 8;
      if ((v9 & 3) == 0) {
        break;
      }
      ++v9;
    }
    while (v11 < &a1[a2]);
    v17[0] = v11;
    LODWORD(v18) = v8 << (24 - v10);
    HIDWORD(v18) = v12 + 16;
  }
  uint64_t v14 = MP4AudioESDS::Deserialize((uint64_t)v20, (uint64_t)v17, (int *)&v19, 0);
  if (!v14)
  {
    size_t v15 = (v21[1] + 5);
    if (*a4 >= v15)
    {
      *a4 = v15;
      memcpy(a3, &a1[v19], v15);
      uint64_t v14 = 0;
    }
    else
    {
      uint64_t v14 = 561211770;
    }
  }
  if (*((void *)&v26 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v26 + 1));
  }
  if (*((void *)&v25 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v25 + 1));
  }
  return v14;
}

void sub_190067C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  MP4AudioESDS::~MP4AudioESDS((MP4AudioESDS *)va);
  _Unwind_Resume(a1);
}

uint64_t AudioFormatProperty_ESDSFromESDSize(unsigned __int8 *a1, int a2, unsigned int *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 2003329396;
  }
  int v5 = a1;
  void v16[2] = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  v19[2] = 0;
  MP4AudioProgramConfig::Clear((MP4AudioProgramConfig *)v19);
  long long v20 = 0u;
  long long v21 = 0u;
  DecoderConfigDescr::cleanup((DecoderConfigDescr *)v16);
  char v6 = &v5[a2];
  v14[0] = v5;
  v14[1] = v6;
  uint64_t v15 = 0;
  if ((v5 & 3) != 0 && a2)
  {
    int v7 = 0;
    char v8 = (_BYTE)v5 + 1;
    int v9 = -8;
    do
    {
      int v10 = v9;
      int v11 = *v5++;
      int v7 = v11 | (v7 << 8);
      v9 += 8;
      if ((v8 & 3) == 0) {
        break;
      }
      ++v8;
    }
    while (v5 < v6);
    v14[0] = v5;
    LODWORD(v15) = v7 << (24 - v9);
    HIDWORD(v15) = v10 + 16;
  }
  *a3 = 0;
  uint64_t v12 = DecoderConfigDescr::Deserialize(v16, (uint64_t)v14, 0, 1);
  if (!v12) {
    *a3 = v16[1] + 19;
  }
  if (*((void *)&v21 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v21 + 1));
  }
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
  return v12;
}

void sub_190067DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  DecoderConfigDescr::~DecoderConfigDescr((DecoderConfigDescr *)va);
  _Unwind_Resume(a1);
}

uint64_t AudioFormatProperty_ESDSFromESD(unsigned __int8 *a1, unsigned int a2, char *a3, unsigned int *a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = 2003329396;
  if (a3 && a4)
  {
    v19[0] = a1;
    v19[1] = &a1[a2];
    uint64_t v20 = 0;
    if ((a1 & 3) != 0 && a2)
    {
      int v9 = 0;
      char v10 = (_BYTE)a1 + 1;
      int v11 = -8;
      uint64_t v12 = a1;
      do
      {
        int v13 = v11;
        int v14 = *v12++;
        int v9 = v14 | (v9 << 8);
        v11 += 8;
        if ((v10 & 3) == 0) {
          break;
        }
        ++v10;
      }
      while (v12 < &a1[a2]);
      v19[0] = v12;
      LODWORD(v20) = v9 << (24 - v11);
      HIDWORD(v20) = v13 + 16;
    }
    int v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    v26[2] = 0;
    MP4AudioProgramConfig::Clear((MP4AudioProgramConfig *)v26);
    long long v27 = 0u;
    long long v28 = 0u;
    DecoderConfigDescr::cleanup((DecoderConfigDescr *)&v21);
    uint64_t v4 = DecoderConfigDescr::Deserialize(&v21, (uint64_t)v19, 0, 1);
    if (!v4)
    {
      uint64_t v4 = 561211770;
      int v15 = v22;
      if (v22 + 5 == a2 && *a4 >= v22 + 19)
      {
        *a4 = v22 + 19;
        *a3 = 3;
        unsigned int v16 = v15 + 14;
        uint64_t v4 = 2003329396;
        if (!((v15 + 14) >> 28))
        {
          unsigned int v17 = (8 * v16) & 0x7F000000 | (((v16 >> 7) & 0x7F) << 8) & 0xFF80FF80 | (((v16 >> 14) & 0x7F) << 16) | v16 & 0x7F;
          a3[1] = (v17 | 0x80808000) >> 24;
          a3[2] = (v17 | 0x80808000) >> 16;
          a3[3] = (unsigned __int16)((((v16 >> 7) & 0x7F) << 8) | v16 & 0x7F | 0x8000) >> 8;
          a3[4] = v16 & 0x7F;
          *(_WORD *)(a3 + 5) = 0;
          a3[7] = 0;
          memcpy(a3 + 8, a1, a2);
          uint64_t v4 = 0;
          a3[v15 + 13] = 6;
          a3[v16] = 0x80;
          a3[v15 + 15] = 0x80;
          a3[v15 + 16] = 0x80;
          a3[v15 + 17] = 1;
          a3[v15 + 18] = 2;
        }
      }
    }
    if (*((void *)&v28 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v28 + 1));
    }
    if (*((void *)&v27 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v27 + 1));
    }
  }
  return v4;
}

void sub_190068040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  DecoderConfigDescr::~DecoderConfigDescr((DecoderConfigDescr *)va);
  _Unwind_Resume(a1);
}

uint64_t AudioFormatProperty_FormatIDFromISOAudioSampleEntry(uint64_t a1, int a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 4);
  unsigned int v4 = bswap32(v2);
  if (v2 == 1630826605) {
    return FormatFromESDS((unsigned __int8 *)(a1 + 48), a2 - 48, &v4);
  }
  else {
    return 0;
  }
}

uint64_t AudioFormatProperty_FLACdfLaAtomFromOldFLACMagicCookie(_DWORD *a1, unsigned int a2, char *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = 1718449215;
  *(void *)&v15[24] = 0;
  if (a2 >= 0x34)
  {
    if (a2 < 0x39) {
      goto LABEL_8;
    }
    unsigned int v4 = bswap32(a1[1]);
    if (v4 == 1684425825) {
      return v3;
    }
    if (v4 == 1718775137)
    {
      if (a2 < 0x4C) {
        return v3;
      }
      a2 = bswap32(a1[3]) - 12;
      if (a2 < 0x34) {
        return v3;
      }
      unsigned int v5 = 6;
    }
    else
    {
LABEL_8:
      unsigned int v5 = 0;
    }
    unsigned int v6 = a2 - v5 * 4;
    int v7 = (char *)&a1[v5];
    if (v6 < 0x38)
    {
      long long v10 = *(_OWORD *)(v7 + 12);
      long long v11 = *(_OWORD *)(v7 + 28);
      *(_OWORD *)int v15 = *(_OWORD *)v7;
      *(_OWORD *)&v15[12] = v10;
      long long v16 = v11;
      uint64_t v9 = *(void *)(v7 + 44);
    }
    else
    {
      long long v8 = *((_OWORD *)v7 + 1);
      *(_OWORD *)int v15 = *(_OWORD *)v7;
      *(_OWORD *)&v15[16] = v8;
      long long v16 = *((_OWORD *)v7 + 2);
      uint64_t v9 = *((void *)v7 + 6);
    }
    uint64_t v17 = v9;
    *(int8x16_t *)int v15 = vrev32q_s8(*(int8x16_t *)v15);
    *(int8x8_t *)&v15[16] = vrev32_s8(*(int8x8_t *)&v15[16]);
    *(_DWORD *)&v15[24] = bswap32(*(unsigned int *)&v15[24]);
    *(void *)&long long v16 = bswap64(v16);
    *(_OWORD *)a3 = xmmword_1901C6170;
    v13[0] = a3 + 16;
    v13[1] = a3 + 16;
    void v13[2] = a3 + 50;
    v13[3] = 0x2000000000;
    int v14 = (a3 + 16) & 3;
    FLACPackStreamInfo((uint64_t)v13, (uint64_t)v15);
    return 0;
  }
  return v3;
}

uint64_t AudioFormatProperty_ASBDForISOPCMConfig(uint64_t a1, uint64_t a2)
{
  uint64_t result = 1718449215;
  if (bswap32(*(_DWORD *)a1) < 0xE || *(_DWORD *)(a1 + 4) != 1131242352) {
    return result;
  }
  int v4 = *(_DWORD *)(a2 + 8);
  if (v4 == 1718641517)
  {
    BOOL v5 = (*(unsigned char *)(a1 + 12) & 1) == 0;
    unsigned int v6 = *(unsigned __int8 *)(a1 + 13);
    goto LABEL_12;
  }
  if (v4 != 1819304813)
  {
    if (v4 != 1768973165) {
      return 4294967246;
    }
    BOOL v5 = (*(unsigned char *)(a1 + 12) & 1) == 0;
    unsigned int v6 = *(unsigned __int8 *)(a1 + 13);
    goto LABEL_9;
  }
  BOOL v5 = (*(unsigned char *)(a1 + 12) & 1) == 0;
  unsigned int v6 = *(unsigned __int8 *)(a1 + 13);
  if (*(unsigned char *)(a2 + 12))
  {
LABEL_12:
    int v7 = 9;
    if (v6 != 32 && v6 != 64) {
      return result;
    }
    goto LABEL_14;
  }
LABEL_9:
  if (v6 > 0x20 || ((1 << v6) & 0x101010000) == 0) {
    return result;
  }
  int v7 = 12;
LABEL_14:
  uint64_t result = 0;
  int v8 = *(_DWORD *)(a2 + 28);
  if (v5) {
    int v9 = 2;
  }
  else {
    int v9 = 0;
  }
  *(_DWORD *)(a2 + 8) = 1819304813;
  *(_DWORD *)(a2 + 12) = v7 | v9;
  int v10 = v8 * (v6 >> 3);
  *(_DWORD *)(a2 + 16) = v10;
  *(_DWORD *)(a2 + 20) = 1;
  *(_DWORD *)(a2 + 24) = v10;
  *(_DWORD *)(a2 + 32) = v6;
  return result;
}

uint64_t AudioFormatProperty_ISOPCMConfigForASBD(_DWORD *a1, uint64_t a2)
{
  uint64_t result = 1718449215;
  if (a1[2] == 1819304813)
  {
    *(_WORD *)(a2 + 12) = 0;
    *(_DWORD *)(a2 + 8) = 0;
    *(void *)a2 = 0x436D63700E000000;
    int v4 = a1[3];
    *(unsigned char *)(a2 + 12) = (v4 & 2) == 0;
    unsigned int v5 = a1[8];
    if (v4)
    {
      if (v5 == 32 || v5 == 64)
      {
LABEL_11:
        uint64_t result = 0;
        *(unsigned char *)(a2 + 13) = v5;
      }
    }
    else if (v5 <= 0x20 && ((1 << v5) & 0x101010000) != 0)
    {
      goto LABEL_11;
    }
  }
  return result;
}

uint64_t DialogueAnchor::AADialogueAnchorAnalyzer::CompleteFinal(DialogueAnchor::AADialogueAnchorAnalyzer *this, float a2, float a3)
{
  computeItuLoudnessValue(*((void *)this + 43));
  computeEbuLoudnessRange(*((void *)this + 43));
  int v4 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  unsigned int v5 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  __int16 v19 = 257;
  long long v16 = CFDictionaryCreateMutable(0, 0, v4, v5);
  __int16 v17 = 257;
  uint64_t v6 = *((void *)this + 43);
  if (*(unsigned char *)(v6 + 2148))
  {
    CACFDictionary::AddFloat32((CACFDictionary *)&v16, @"aa itu loudness", *(float *)(v6 + 2144));
    uint64_t v6 = *((void *)this + 43);
  }
  if (*(unsigned char *)(v6 + 2156)) {
    CACFDictionary::AddFloat32((CACFDictionary *)&v16, @"aa ebu loudness range", *(float *)(v6 + 2152));
  }
  float v7 = (double)*((unint64_t *)this + 52) * 100.0 / (double)*((unint64_t *)this + 51);
  CACFDictionary::AddFloat32((CACFDictionary *)&v16, @"aa speech activity percentage", v7);
  if (CACFDictionary::Size((CACFDictionary *)&v16)) {
    CACFDictionary::AddDictionary((CACFDictionary *)&Mutable, @"dialogue anchor parameters", v16);
  }
  int v15 = 0;
  if (CACFDictionary::HasKey((CACFDictionary *)&Mutable, @"dialogue anchor parameters"))
  {
    CACFDictionary::GetDictionary((CACFDictionary *)&Mutable, @"dialogue anchor parameters", &v15);
    int v8 = v15;
  }
  else
  {
    int v8 = 0;
  }
  v14[0] = 8;
  v14[1] = v8;
  v13[0] = 1;
  v13[1] = v14;
  int v12 = 1;
  (*(void (**)(DialogueAnchor::AADialogueAnchorAnalyzer *, __CFString *, void *, int *))(*(void *)this + 48))(this, @"dialogue anchor parameters", v13, &v12);
  uint64_t v9 = *((void *)this + 54);
  *((void *)this + 54) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *((void *)this + 55);
  *((void *)this + 55) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v16);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  return 0;
}

void sub_1900685DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  CACFDictionary::~CACFDictionary((CACFDictionary *)(v7 - 48));
  _Unwind_Resume(a1);
}

uint64_t DialogueAnchor::AADialogueAnchorAnalyzer::PushAudio(DialogueAnchor::AADialogueAnchorAnalyzer *this, unsigned int a2, const AudioBufferList *a3)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)this + 9) + a2;
  uint64_t v4 = *((void *)this + 7);
  if (v3 >= v4) {
    uint64_t v3 = *((void *)this + 7);
  }
  unsigned int v49 = 0;
  *((void *)this + 9) = v3;
  *((float *)this + 20) = (float)((float)v3 * 100.0) / (float)v4;
  uint64_t v5 = *((void *)this + 45);
  unint64_t v6 = (unint64_t)(*((void *)this + 46) - v5) >> 2;
  uint64_t v7 = (unsigned int *)((char *)this + 356);
  v48[1] = (char *)this + 356;
  v48[0] = v6;
  v48[2] = v5;
  if (!a2) {
    return 0;
  }
  unsigned int v10 = 0;
  long long v11 = (DialogueAnchor::AADialogueAnchorAnalyzer *)((char *)this + 88);
  inTimeStamp = (AudioTimeStamp *)((char *)this + 280);
  unsigned int v12 = *((_DWORD *)this + 89);
LABEL_5:
  unsigned int v13 = a2 - v10;
  if (a2 <= v10)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)inInputDataProcUserData = 136315394;
      *(void *)&inInputDataProcUserData[4] = "AADialogueAnchorAnalyzer.cpp";
      *(_WORD *)&inInputDataProcUserData[12] = 1024;
      *(_DWORD *)&inInputDataProcUserData[14] = 202;
      uint64_t v36 = MEMORY[0x1E4F14500];
      uint64_t v37 = "%25s:%-5d  Input is already eaten!";
LABEL_66:
      uint64_t v38 = inInputDataProcUserData;
LABEL_67:
      _os_log_impl(&dword_18FEC0000, v36, OS_LOG_TYPE_ERROR, v37, v38, 0x12u);
    }
LABEL_68:
    uint64_t v19 = 0xFFFFFFFFLL;
    goto LABEL_69;
  }
  if (v6 <= v12)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)inInputDataProcUserData = 136315394;
      *(void *)&inInputDataProcUserData[4] = "AADialogueAnchorAnalyzer.cpp";
      *(_WORD *)&inInputDataProcUserData[12] = 1024;
      *(_DWORD *)&inInputDataProcUserData[14] = 203;
      uint64_t v36 = MEMORY[0x1E4F14500];
      uint64_t v37 = "%25s:%-5d  Output is already full!";
      goto LABEL_66;
    }
    goto LABEL_68;
  }
  unsigned int v14 = v6 - v12;
  if (*((_DWORD *)this + 63) != 2)
  {
    mData = (char *)a3->mBuffers[*((unsigned int *)this + 62)].mData;
    unsigned int v21 = (OpaqueAudioConverter *)*((void *)this + 20);
    if (v21)
    {
      *(_DWORD *)&inInputDataProcUserData[4] = 0;
      *(_DWORD *)inInputDataProcUserData = a2;
      *(void *)&inInputDataProcUserData[8] = &v49;
      *(void *)&inInputDataProcUserData[16] = mData;
      uint64_t v18 = inTimeStamp;
      uint64_t v19 = DialogueAnchor::CenterChannelExtractor::PushResampler(v21, inInputDataProcUserData, (int *)v48);
      if (v19)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t v57 = 136315394;
          *(void *)&v57[4] = "AADialogueAnchorAnalyzer.cpp";
          *(_WORD *)uint64_t v58 = 1024;
          *(_DWORD *)&v58[2] = 261;
          BOOL v41 = MEMORY[0x1E4F14500];
          int v42 = "%25s:%-5d  Failed to resample center channel";
LABEL_79:
          int v43 = v57;
LABEL_87:
          _os_log_impl(&dword_18FEC0000, v41, OS_LOG_TYPE_ERROR, v42, v43, 0x12u);
        }
LABEL_69:
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)inInputDataProcUserData = 136315394;
          *(void *)&inInputDataProcUserData[4] = "AADialogueAnchorAnalyzer.cpp";
          *(_WORD *)&inInputDataProcUserData[12] = 1024;
          *(_DWORD *)&inInputDataProcUserData[14] = 606;
          long long v34 = MEMORY[0x1E4F14500];
          long long v35 = "%25s:%-5d  Center Channel Extraction failed";
          goto LABEL_71;
        }
        return v19;
      }
    }
    else
    {
      if (v13 >= v14) {
        unsigned int v22 = v6 - v12;
      }
      else {
        unsigned int v22 = a2 - v10;
      }
      if (v22)
      {
        memmove((void *)(v5 + 4 * v12), &mData[4 * v10], 4 * v22);
        unsigned int v12 = *v7;
      }
      *uint64_t v7 = v12 + v22;
      unsigned int v49 = v10 + v22;
      uint64_t v18 = inTimeStamp;
    }
    goto LABEL_31;
  }
  uint64_t v15 = *((unsigned int *)this + 54);
  if (1024 - (int)v15 >= v13) {
    unsigned int v16 = a2 - v10;
  }
  else {
    unsigned int v16 = 1024 - v15;
  }
  if (v16)
  {
    unsigned int v45 = v14;
    memmove((void *)(*((void *)this + 21) + 4 * v15), (char *)a3->mBuffers[0].mData + 4 * v10, 4 * v16);
    memmove((void *)(*((void *)this + 24) + 4 * *((unsigned int *)this + 54)), (const void *)(*(void *)&a3[1].mBuffers[0].mNumberChannels + 4 * v49), 4 * v16);
    unsigned int v14 = v45;
    LODWORD(v15) = *((_DWORD *)this + 54);
    unsigned int v10 = v49;
  }
  int v17 = v15 + v16;
  *((_DWORD *)this + 54) = v17;
  unsigned int v49 = v10 + v16;
  uint64_t v18 = inTimeStamp;
  if (v17 != 1024) {
    goto LABEL_31;
  }
  if (*((void *)this + 20))
  {
    uint64_t v19 = DialogueAnchor::CenterChannelExtractor::PushScotty(v11, *((float **)this + 28), 1024);
    if (!v19)
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 0;
      *(void *)inInputDataProcUserData = 1024;
      *(void *)&inInputDataProcUserData[8] = buf;
      *(void *)&inInputDataProcUserData[16] = *((void *)this + 28);
      uint64_t v19 = DialogueAnchor::CenterChannelExtractor::PushResampler(*((OpaqueAudioConverter **)this + 20), inInputDataProcUserData, (int *)v48);
      if (!v19)
      {
        if (*(_DWORD *)buf != 1024)
        {
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_68;
          }
          *(_DWORD *)uint64_t v57 = 136315394;
          *(void *)&v57[4] = "AADialogueAnchorAnalyzer.cpp";
          *(_WORD *)uint64_t v58 = 1024;
          *(_DWORD *)&v58[2] = 238;
          uint64_t v36 = MEMORY[0x1E4F14500];
          uint64_t v37 = "%25s:%-5d  Failed to consume Scotty output";
          uint64_t v38 = v57;
          goto LABEL_67;
        }
        goto LABEL_31;
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t v57 = 136315394;
        *(void *)&v57[4] = "AADialogueAnchorAnalyzer.cpp";
        *(_WORD *)uint64_t v58 = 1024;
        *(_DWORD *)&v58[2] = 237;
        BOOL v41 = MEMORY[0x1E4F14500];
        int v42 = "%25s:%-5d  Scotty resampling failed";
        goto LABEL_79;
      }
      goto LABEL_69;
    }
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_69;
    }
    *(_DWORD *)inInputDataProcUserData = 136315394;
    *(void *)&inInputDataProcUserData[4] = "AADialogueAnchorAnalyzer.cpp";
    *(_WORD *)&inInputDataProcUserData[12] = 1024;
    *(_DWORD *)&inInputDataProcUserData[14] = 227;
    BOOL v41 = MEMORY[0x1E4F14500];
    int v42 = "%25s:%-5d  Push Scotty to internal buffer failed";
LABEL_86:
    int v43 = inInputDataProcUserData;
    goto LABEL_87;
  }
  if (v14 <= 0x3FF)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_68;
    }
    *(_DWORD *)inInputDataProcUserData = 136315394;
    *(void *)&inInputDataProcUserData[4] = "AADialogueAnchorAnalyzer.cpp";
    *(_WORD *)&inInputDataProcUserData[12] = 1024;
    *(_DWORD *)&inInputDataProcUserData[14] = 240;
    uint64_t v36 = MEMORY[0x1E4F14500];
    uint64_t v37 = "%25s:%-5d  Not enough room for Scotty output";
    goto LABEL_66;
  }
  uint64_t v19 = DialogueAnchor::CenterChannelExtractor::PushScotty(v11, (float *)(v5 + 4 * *v7), v14);
  if (v19)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_69;
    }
    *(_DWORD *)inInputDataProcUserData = 136315394;
    *(void *)&inInputDataProcUserData[4] = "AADialogueAnchorAnalyzer.cpp";
    *(_WORD *)&inInputDataProcUserData[12] = 1024;
    *(_DWORD *)&inInputDataProcUserData[14] = 245;
    BOOL v41 = MEMORY[0x1E4F14500];
    int v42 = "%25s:%-5d  Push Scotty to output buffer failed";
    goto LABEL_86;
  }
  *v7 += 1024;
LABEL_31:
  unsigned int v12 = *((_DWORD *)this + 89);
  uint64_t v23 = *((unsigned int *)this + 88);
  while (1)
  {
    if (v12 < v23)
    {
      unsigned int v10 = v49;
      if (v49 < a2) {
        goto LABEL_5;
      }
      return 0;
    }
    AudioUnitRenderActionFlags ioActionFlags = 512;
    *(void *)inInputDataProcUserData = 1;
    *(_DWORD *)&inInputDataProcUserData[8] = 1;
    *(_DWORD *)&inInputDataProcUserData[12] = 4 * v23;
    *(void *)&inInputDataProcUserData[16] = *((void *)this + 48);
    *(void *)uint64_t v57 = 1;
    *(_DWORD *)&v57[8] = 1;
    *(_DWORD *)uint64_t v58 = 4 * v23;
    *(void *)&v58[4] = *((void *)this + 45);
    inInputBufferLists = (AudioBufferList *)v57;
    ioOutputBufferLists = (AudioBufferList *)inInputDataProcUserData;
    if (*((unsigned char *)this + 424))
    {
      uint64_t v19 = (*(uint64_t (**)(void, uint64_t, unsigned char *, uint64_t, uint64_t))(**((void **)this + 54) + 96))(*((void *)this + 54), v23, v57, 1, (uint64_t)*((double *)this + 35));
      if (v19)
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_60;
        }
        *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
        char v54 = "AADialogueAnchorAnalyzer.cpp";
        __int16 v55 = 1024;
        int v56 = 554;
        uint64_t v32 = MEMORY[0x1E4F14500];
        uint64_t v33 = "%25s:%-5d  couldn't write vad input";
        goto LABEL_59;
      }
      LODWORD(v23) = *((_DWORD *)this + 88);
    }
    uint64_t v19 = AudioUnitProcessMultiple(*((AudioUnit *)this + 34), &ioActionFlags, v18, v23, 1u, (const AudioBufferList **)&inInputBufferLists, 1u, &ioOutputBufferLists);
    if (v19)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_60;
      }
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      char v54 = "AADialogueAnchorAnalyzer.cpp";
      __int16 v55 = 1024;
      int v56 = 566;
      uint64_t v32 = MEMORY[0x1E4F14500];
      uint64_t v33 = "%25s:%-5d  Call to dnnVad AudioUnitProcessMultiple failed";
      goto LABEL_59;
    }
    uint64_t v24 = *((unsigned int *)this + 88);
    double v25 = *((double *)this + 35) + (double)v24;
    *((double *)this + 35) = v25;
    if (*((unsigned char *)this + 424)) {
      break;
    }
LABEL_40:
    unint64_t v26 = v24;
    *((void *)this + 51) += v24;
    long long v27 = (char *)*((void *)this + 48);
    if (v24)
    {
      if (*(float *)v27 == 0.0)
      {
        unint64_t v30 = 0;
        while (v26 - 1 != v30)
        {
          float v31 = *(float *)&v27[4 * v30++ + 4];
          if (v31 != 0.0)
          {
            if (v30 < v26) {
              goto LABEL_42;
            }
            break;
          }
        }
      }
      else
      {
LABEL_42:
        *((void *)this + 52) += v26;
      }
    }
    loudnessMeasurementGenerateBlocks(*((int **)this + 43), v26, v27);
    uint64_t v28 = *((unsigned int *)this + 88);
    uint64_t v29 = *((unsigned int *)this + 89);
    uint64_t v23 = v28;
    if (v29 != v28)
    {
      memmove(*((void **)this + 45), (const void *)(*((void *)this + 45) + 4 * v28), 4 * v29 - 4 * v28);
      uint64_t v23 = *((unsigned int *)this + 88);
      LODWORD(v28) = *((_DWORD *)this + 89);
    }
    unsigned int v12 = v28 - v23;
    *uint64_t v7 = v12;
  }
  uint64_t v19 = (*(uint64_t (**)(void, uint64_t, AudioBufferList *, uint64_t, uint64_t))(**((void **)this + 55) + 96))(*((void *)this + 55), v24, ioOutputBufferLists, 1, (uint64_t)v25);
  if (!v19)
  {
    LODWORD(v24) = *((_DWORD *)this + 88);
    goto LABEL_40;
  }
  if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
    goto LABEL_60;
  }
  *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
  char v54 = "AADialogueAnchorAnalyzer.cpp";
  __int16 v55 = 1024;
  int v56 = 571;
  uint64_t v32 = MEMORY[0x1E4F14500];
  uint64_t v33 = "%25s:%-5d  couldn't write vad output";
LABEL_59:
  _os_log_impl(&dword_18FEC0000, v32, OS_LOG_TYPE_ERROR, v33, buf, 0x12u);
LABEL_60:
  if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
    return v19;
  }
  *(_DWORD *)inInputDataProcUserData = 136315394;
  *(void *)&inInputDataProcUserData[4] = "AADialogueAnchorAnalyzer.cpp";
  *(_WORD *)&inInputDataProcUserData[12] = 1024;
  *(_DWORD *)&inInputDataProcUserData[14] = 612;
  long long v34 = MEMORY[0x1E4F14500];
  long long v35 = "%25s:%-5d  VAD processing failed";
LABEL_71:
  _os_log_impl(&dword_18FEC0000, v34, OS_LOG_TYPE_ERROR, v35, inInputDataProcUserData, 0x12u);
  return v19;
}

uint64_t DialogueAnchor::CenterChannelExtractor::PushScotty(DialogueAnchor::CenterChannelExtractor *this, float *a2, int a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = 1;
  int v15 = 1;
  int v16 = 4 * a3;
  int v17 = a2;
  ioOutputBufferLists = (AudioBufferList *)&v14;
  int v8 = 2;
  uint64_t v9 = 0x100000000001;
  uint64_t v10 = *((void *)this + 10);
  uint64_t v11 = 0x100000000001;
  uint64_t v12 = *((void *)this + 13);
  inInputBufferLists = (AudioBufferList *)&v8;
  AudioUnitRenderActionFlags ioActionFlags = 512;
  uint64_t v4 = AudioUnitProcessMultiple(*(AudioUnit *)this, &ioActionFlags, (const AudioTimeStamp *)((char *)this + 8), 0x400u, 1u, (const AudioBufferList **)&inInputBufferLists, 1u, &ioOutputBufferLists);
  if (v4)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      uint64_t v19 = "AADialogueAnchorAnalyzer.cpp";
      __int16 v20 = 1024;
      int v21 = 336;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Call to Scotty AudioUnitProcessMultiple failed", buf, 0x12u);
    }
  }
  else
  {
    *((double *)this + 1) = *((double *)this + 1) + 1024.0;
    *((_DWORD *)this + 32) = 0;
  }
  return v4;
}

uint64_t DialogueAnchor::CenterChannelExtractor::PushResampler(OpaqueAudioConverter *a1, void *inInputDataProcUserData, int *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int v3 = *a3;
  *(void *)&outOutputData.uint64_t mNumberBuffers = 1;
  outOutputData.mBuffers[0].mNumberChannels = 1;
  uint64_t v5 = (_DWORD *)*((void *)a3 + 1);
  uint64_t v4 = *((void *)a3 + 2);
  uint64_t v6 = *v5;
  UInt32 v7 = v3 - v6;
  outOutputData.mBuffers[0].UInt32 mDataByteSize = 4 * v7;
  outOutputData.mBuffers[0].mData = (void *)(v4 + 4 * v6);
  UInt32 ioOutputDataPacketSize = v7;
  unsigned int v8 = AudioConverterFillComplexBuffer(a1, (AudioConverterComplexInputDataProc)DialogueAnchor::resamplerCallback, inInputDataProcUserData, &ioOutputDataPacketSize, &outOutputData, 0);
  if (v8 == 1836086393) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = v8;
  }
  if (v9)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      uint64_t v14 = "AADialogueAnchorAnalyzer.cpp";
      __int16 v15 = 1024;
      int v16 = 300;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  resampling error", buf, 0x12u);
    }
  }
  else
  {
    *v5 += ioOutputDataPacketSize;
  }
  return v9;
}

uint64_t DialogueAnchor::resamplerCallback(DialogueAnchor *this, OpaqueAudioConverter *a2, unsigned int *a3, AudioBufferList *a4, AudioStreamPacketDescription **a5, void *a6)
{
  uint64_t v6 = a5[1];
  int v7 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 >= (*(_DWORD *)a5 - LODWORD(v6->mStartOffset))) {
    int v7 = *(_DWORD *)a5 - LODWORD(v6->mStartOffset);
  }
  if (v7)
  {
    uint64_t result = 0;
    *(_DWORD *)a2 = v7;
    uint64_t v9 = (char *)a5[2] + 4 * LODWORD(v6->mStartOffset);
    a3[3] = 4 * v7;
    LODWORD(v6->mStartOffset) += v7;
  }
  else
  {
    uint64_t v9 = 0;
    a3[3] = 0;
    uint64_t result = 1836086393;
  }
  *((void *)a3 + 2) = v9;
  return result;
}

uint64_t DialogueAnchor::AADialogueAnchorAnalyzer::Prepare(DialogueAnchor::AADialogueAnchorAnalyzer *this, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  int AppBooleanValue = DialogueAnchor::AADialogueAnchorAnalyzer::Prepare(void)::sDAFileLoggingFlag;
  if (DialogueAnchor::AADialogueAnchorAnalyzer::Prepare(void)::sDAFileLoggingFlag == -1)
  {
    int AppBooleanValue = CACFPreferencesGetAppBooleanValue(@"dialogue_anchor_write_files", @"com.apple.coreaudio", 0);
    DialogueAnchor::AADialogueAnchorAnalyzer::Prepare(void)::sDAFileLoggingFlag = AppBooleanValue;
  }
  *((unsigned char *)this + 424) = AppBooleanValue > 0;
  if (AppBooleanValue >= 1)
  {
    CASmartPreferences::Read((CASmartPreferences *)@"dialogue_anchor_write_files_ring_buffer_mode", @"com.apple.coreaudio", (const __CFString *)&DialogueAnchor::AADialogueAnchorAnalyzer::Prepare(void)::capturerRingBufferModeOption, a4);
    if ((DialogueAnchor::AADialogueAnchorAnalyzer::Prepare(void)::capturerRingBufferModeOption - 1) > 2) {
      uint64_t v6 = 290;
    }
    else {
      uint64_t v6 = qword_1901DAB90[DialogueAnchor::AADialogueAnchorAnalyzer::Prepare(void)::capturerRingBufferModeOption - 1];
    }
    if (NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::once != -1) {
      dispatch_once(&NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::once, &__block_literal_global_5548);
    }
    if (NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::sImplFunction) {
      uint64_t v7 = NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::sImplFunction(v6, "/tmp/DialogueAnchorAnalyzer", "dnnVadInput", 1667327590, 0, &DialogueAnchor::kCommonASBD);
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *((void *)this + 54);
    *((void *)this + 54) = v7;
    if (v8)
    {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
      uint64_t v7 = *((void *)this + 54);
    }
    if (v7)
    {
      if (NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::once != -1) {
        dispatch_once(&NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::once, &__block_literal_global_5548);
      }
      if (NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::sImplFunction) {
        uint64_t v9 = NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::sImplFunction(v6, "/tmp/DialogueAnchorAnalyzer", "dnnVadOutput", 1667327590, 0, &DialogueAnchor::kCommonASBD);
      }
      else {
        uint64_t v9 = 0;
      }
      uint64_t v12 = *((void *)this + 55);
      *((void *)this + 55) = v9;
      if (v12)
      {
        (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
        uint64_t v9 = *((void *)this + 55);
      }
      if (v9) {
        goto LABEL_25;
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf.mSampleRate) = 136315394;
        *(void *)((char *)&buf.mSampleRate + 4) = "AADialogueAnchorAnalyzer.cpp";
        LOWORD(buf.mFormatFlags) = 1024;
        *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 493;
        uint64_t v10 = MEMORY[0x1E4F14500];
        uint64_t v11 = "%25s:%-5d  Failed to create vad output capturer";
        goto LABEL_31;
      }
    }
    else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.mSampleRate) = 136315394;
      *(void *)((char *)&buf.mSampleRate + 4) = "AADialogueAnchorAnalyzer.cpp";
      LOWORD(buf.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 484;
      uint64_t v10 = MEMORY[0x1E4F14500];
      uint64_t v11 = "%25s:%-5d  Failed to create vad input capturer";
LABEL_31:
      _os_log_impl(&dword_18FEC0000, v10, OS_LOG_TYPE_ERROR, v11, (uint8_t *)&buf, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
LABEL_25:
  if (*((double *)this + 32) != 48000.0)
  {
    buf.double mSampleRate = *((Float64 *)this + 32);
    *(_OWORD *)&buf.AudioFormatID mFormatID = xmmword_1901C60C0;
    *(void *)&buf.mBytesPerFrame = 0x100000004;
    buf.mBitsPerChannel = 32;
    uint64_t Property = AudioConverterNewWithOptions(&buf, &DialogueAnchor::kCommonASBD, 0, (void *)this + 20);
    if (Property)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_77;
      }
      *(_DWORD *)UInt32 ioPropertyDataSize = 136315394;
      *(void *)&ioPropertyDataSize[4] = "AADialogueAnchorAnalyzer.cpp";
      *(_WORD *)&ioPropertyDataSize[12] = 1024;
      *(_DWORD *)&ioPropertyDataSize[14] = 109;
      uint64_t v14 = MEMORY[0x1E4F14500];
      __int16 v15 = "%25s:%-5d  Failed to create resampler AudioConverter";
LABEL_36:
      p_AudioStreamBasicDescription buf = ioPropertyDataSize;
LABEL_76:
      _os_log_impl(&dword_18FEC0000, v14, OS_LOG_TYPE_ERROR, v15, p_buf, 0x12u);
      goto LABEL_77;
    }
    uint64_t v16 = *((void *)this + 20);
    *(void *)UInt32 ioPropertyDataSize = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterReset::$_0>;
    *(void *)&ioPropertyDataSize[8] = &v42;
    uint64_t Property = with_resolved(v16, (uint64_t (**)(uint64_t, uint64_t))ioPropertyDataSize);
    if (Property)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_77;
      }
      *(_DWORD *)UInt32 ioPropertyDataSize = 136315394;
      *(void *)&ioPropertyDataSize[4] = "AADialogueAnchorAnalyzer.cpp";
      *(_WORD *)&ioPropertyDataSize[12] = 1024;
      *(_DWORD *)&ioPropertyDataSize[14] = 114;
      uint64_t v14 = MEMORY[0x1E4F14500];
      __int16 v15 = "%25s:%-5d  Failed to reset resampler AudioConverter";
      goto LABEL_36;
    }
  }
  unsigned int v18 = *((_DWORD *)this + 63);
  if (v18 >= 3)
  {
    *(_DWORD *)UInt32 ioPropertyDataSize = 0;
    int v19 = caulk::numeric::exceptional_mul<unsigned int>(v18, 0x14u);
    *(_DWORD *)UInt32 ioPropertyDataSize = caulk::numeric::exceptional_add<unsigned int>(12, v19);
    __int16 v20 = (unsigned int *)CAAudioChannelLayout::Create((CAAudioChannelLayout *)*((unsigned int *)this + 63));
    uint64_t Property = AudioFormatGetProperty(0x636D706Cu, 4u, (char *)this + 264, (UInt32 *)ioPropertyDataSize, v20);
    if (Property)
    {
      MEMORY[0x192FC7C50](v20);
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_77;
      }
      LODWORD(buf.mSampleRate) = 136315394;
      *(void *)((char *)&buf.mSampleRate + 4) = "AADialogueAnchorAnalyzer.cpp";
      LOWORD(buf.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 138;
      uint64_t v14 = MEMORY[0x1E4F14500];
      __int16 v15 = "%25s:%-5d  Failed to get channel layout for tag";
LABEL_75:
      p_AudioStreamBasicDescription buf = (uint8_t *)&buf;
      goto LABEL_76;
    }
    unint64_t v21 = v20[2];
    if (v21)
    {
      if (v20[3] == 3)
      {
        *((_DWORD *)this + 62) = 0;
        MEMORY[0x192FC7C50](v20);
LABEL_44:
        unsigned int v18 = *((_DWORD *)this + 63);
        goto LABEL_45;
      }
      unint64_t v27 = 0;
      uint64_t v28 = 8;
      while (v21 - 1 != v27)
      {
        unsigned int v29 = v20[v28];
        v28 += 5;
        ++v27;
        if (v29 == 3)
        {
          BOOL v30 = v27 < v21;
          *((_DWORD *)this + 62) = v27;
          MEMORY[0x192FC7C50](v20);
          if (v30) {
            goto LABEL_44;
          }
          goto LABEL_65;
        }
      }
    }
    MEMORY[0x192FC7C50](v20);
LABEL_65:
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_68;
    }
    LODWORD(buf.mSampleRate) = 136315394;
    *(void *)((char *)&buf.mSampleRate + 4) = "AADialogueAnchorAnalyzer.cpp";
    LOWORD(buf.mFormatFlags) = 1024;
    *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 139;
    double v25 = MEMORY[0x1E4F14500];
    unint64_t v26 = "%25s:%-5d  Input channel layout doesn't have center channel";
    goto LABEL_67;
  }
LABEL_45:
  if (v18 != 2) {
    goto LABEL_91;
  }
  if (*((void *)this + 20))
  {
    LODWORD(buf.mSampleRate) = 0;
    std::vector<float>::resize((char **)this + 28, 0x400uLL, &buf);
  }
  uint64_t v22 = 0;
  uint64_t v23 = (AudioUnit *)((char *)this + 88);
  do
  {
    LODWORD(buf.mSampleRate) = 0;
    std::vector<float>::resize((char **)((char *)this + v22 + 168), 0x400uLL, &buf);
    v22 += 24;
  }
  while (v22 != 48);
  *((_DWORD *)this + 54) = 0;
  *(_OWORD *)&v42.componentType = *(_OWORD *)"xfuaytcslppa";
  v42.componentFlagsMasuint64_t k = 0;
  Next = AudioComponentFindNext(0, &v42);
  if (!Next)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
LABEL_68:
      uint64_t Property = 0xFFFFFFFFLL;
      goto LABEL_77;
    }
    LODWORD(buf.mSampleRate) = 136315394;
    *(void *)((char *)&buf.mSampleRate + 4) = "AADialogueAnchorAnalyzer.cpp";
    LOWORD(buf.mFormatFlags) = 1024;
    *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 155;
    double v25 = MEMORY[0x1E4F14500];
    unint64_t v26 = "%25s:%-5d  failed to find Scotty component";
LABEL_67:
    _os_log_impl(&dword_18FEC0000, v25, OS_LOG_TYPE_ERROR, v26, (uint8_t *)&buf, 0x12u);
    goto LABEL_68;
  }
  uint64_t Property = AudioComponentInstanceNew(Next, (AudioComponentInstance *)this + 11);
  if (Property)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_77;
    }
    LODWORD(buf.mSampleRate) = 136315394;
    *(void *)((char *)&buf.mSampleRate + 4) = "AADialogueAnchorAnalyzer.cpp";
    LOWORD(buf.mFormatFlags) = 1024;
    *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 157;
    uint64_t v14 = MEMORY[0x1E4F14500];
    __int16 v15 = "%25s:%-5d  Could not instantiate Scotty component";
    goto LABEL_75;
  }
  uint64_t Property = AudioUnitSetParameter(*v23, 2u, 0, 0, 1.0, 0);
  if (Property)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_77;
    }
    LODWORD(buf.mSampleRate) = 136315394;
    *(void *)((char *)&buf.mSampleRate + 4) = "AADialogueAnchorAnalyzer.cpp";
    LOWORD(buf.mFormatFlags) = 1024;
    *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 161;
    uint64_t v14 = MEMORY[0x1E4F14500];
    __int16 v15 = "%25s:%-5d  Could not set Scotty single center channel parameter";
    goto LABEL_75;
  }
  uint64_t Property = AudioUnitSetParameter(*v23, 5u, 0, 0, 0.0, 0);
  if (Property)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_77;
    }
    LODWORD(buf.mSampleRate) = 136315394;
    *(void *)((char *)&buf.mSampleRate + 4) = "AADialogueAnchorAnalyzer.cpp";
    LOWORD(buf.mFormatFlags) = 1024;
    *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 165;
    uint64_t v14 = MEMORY[0x1E4F14500];
    __int16 v15 = "%25s:%-5d  Could not set Scotty highpass cut-off frequency";
    goto LABEL_75;
  }
  uint64_t Property = AudioUnitSetParameter(*v23, 8u, 0, 0, 0.0, 0);
  if (Property)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_77;
    }
    LODWORD(buf.mSampleRate) = 136315394;
    *(void *)((char *)&buf.mSampleRate + 4) = "AADialogueAnchorAnalyzer.cpp";
    LOWORD(buf.mFormatFlags) = 1024;
    *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 167;
    uint64_t v14 = MEMORY[0x1E4F14500];
    __int16 v15 = "%25s:%-5d  Could not disable Scotty smoothing";
    goto LABEL_75;
  }
  buf.double mSampleRate = *((Float64 *)this + 32);
  *(_OWORD *)&buf.AudioFormatID mFormatID = xmmword_1901C60C0;
  *(void *)&buf.mBytesPerFrame = 0x200000004;
  buf.mBitsPerChannel = 32;
  *(Float64 *)UInt32 ioPropertyDataSize = buf.mSampleRate;
  *(_OWORD *)&ioPropertyDataSize[8] = xmmword_1901C60C0;
  uint64_t v49 = 0x100000004;
  int v50 = 32;
  uint64_t Property = AudioUnitSetProperty(*((AudioUnit *)this + 11), 8u, 1u, 0, &buf, 0x28u);
  if (Property)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unsigned int v45 = 136315394;
      *(void *)&v45[4] = "AADialogueAnchorAnalyzer.cpp";
      __int16 v46 = 1024;
      int v47 = 174;
      uint64_t v14 = MEMORY[0x1E4F14500];
      __int16 v15 = "%25s:%-5d  Could not set Scotty input stream format property";
LABEL_90:
      p_AudioStreamBasicDescription buf = v45;
      goto LABEL_76;
    }
    goto LABEL_77;
  }
  uint64_t Property = AudioUnitSetProperty(*v23, 8u, 2u, 0, ioPropertyDataSize, 0x28u);
  if (Property)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unsigned int v45 = 136315394;
      *(void *)&v45[4] = "AADialogueAnchorAnalyzer.cpp";
      __int16 v46 = 1024;
      int v47 = 176;
      uint64_t v14 = MEMORY[0x1E4F14500];
      __int16 v15 = "%25s:%-5d  Could not set Scotty output stream format property";
      goto LABEL_90;
    }
LABEL_77:
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.mSampleRate) = 136315394;
      *(void *)((char *)&buf.mSampleRate + 4) = "AADialogueAnchorAnalyzer.cpp";
      LOWORD(buf.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 497;
      float v31 = MEMORY[0x1E4F14500];
      uint64_t v32 = "%25s:%-5d  Failed to setup center channel extractor";
LABEL_79:
      _os_log_impl(&dword_18FEC0000, v31, OS_LOG_TYPE_ERROR, v32, (uint8_t *)&buf, 0x12u);
      return Property;
    }
    return Property;
  }
  uint64_t Property = AudioUnitInitialize(*v23);
  if (Property)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unsigned int v45 = 136315394;
      *(void *)&v45[4] = "AADialogueAnchorAnalyzer.cpp";
      __int16 v46 = 1024;
      int v47 = 180;
      uint64_t v14 = MEMORY[0x1E4F14500];
      __int16 v15 = "%25s:%-5d  Could not initialize Scotty component";
      goto LABEL_90;
    }
    goto LABEL_77;
  }
LABEL_91:
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 38) = 1;
  *(void *)&v42.componentType = DialogueAnchor::AADialogueAnchorAnalyzer::SetUpDnnVadGraph(void)::$_0::operator()(@"/Library/Audio/Tunings/DialogueAnchorAnalyzer/nnvad.propstrip");
  LOWORD(v42.componentManufacturer) = 1;
  *(void *)unsigned int v45 = DialogueAnchor::AADialogueAnchorAnalyzer::SetUpDnnVadGraph(void)::$_0::operator()(@"/Library/Audio/Tunings/DialogueAnchorAnalyzer/nnvad.austrip");
  *(_WORD *)&v45[8] = 1;
  UInt32 ioDataSize = 4;
  int inData = 1536;
  *(_OWORD *)&buf.double mSampleRate = *(_OWORD *)"xfuagpsdlppa";
  buf.UInt32 mBytesPerPacket = 0;
  long long v34 = AudioComponentFindNext(0, (const AudioComponentDescription *)&buf);
  if (v34)
  {
    long long v35 = (AudioComponentInstance *)((char *)this + 272);
    uint64_t v36 = (OpaqueAudioComponentInstance *)*((void *)this + 34);
    if (v36)
    {
      AudioUnitUninitialize(v36);
      AudioComponentInstanceDispose(*v35);
    }
    uint64_t Property = AudioComponentInstanceNew(v34, (AudioComponentInstance *)this + 34);
    if (Property)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_128;
      }
      *(_DWORD *)UInt32 ioPropertyDataSize = 136315394;
      *(void *)&ioPropertyDataSize[4] = "AADialogueAnchorAnalyzer.cpp";
      *(_WORD *)&ioPropertyDataSize[12] = 1024;
      *(_DWORD *)&ioPropertyDataSize[14] = 419;
      uint64_t v37 = MEMORY[0x1E4F14500];
      uint64_t v38 = "%25s:%-5d  Could not instantiate dspGraph component";
      goto LABEL_127;
    }
    uint64_t Property = AudioUnitSetProperty(*v35, 8u, 1u, 0, &DialogueAnchor::kCommonASBD, 0x28u);
    if (Property)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_128;
      }
      *(_DWORD *)UInt32 ioPropertyDataSize = 136315394;
      *(void *)&ioPropertyDataSize[4] = "AADialogueAnchorAnalyzer.cpp";
      *(_WORD *)&ioPropertyDataSize[12] = 1024;
      *(_DWORD *)&ioPropertyDataSize[14] = 423;
      uint64_t v37 = MEMORY[0x1E4F14500];
      uint64_t v38 = "%25s:%-5d  Could not set mDnnVadGraph input stream format property";
      goto LABEL_127;
    }
    uint64_t Property = AudioUnitSetProperty(*v35, 8u, 2u, 0, &DialogueAnchor::kCommonASBD, 0x28u);
    if (Property)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_128;
      }
      *(_DWORD *)UInt32 ioPropertyDataSize = 136315394;
      *(void *)&ioPropertyDataSize[4] = "AADialogueAnchorAnalyzer.cpp";
      *(_WORD *)&ioPropertyDataSize[12] = 1024;
      *(_DWORD *)&ioPropertyDataSize[14] = 425;
      uint64_t v37 = MEMORY[0x1E4F14500];
      uint64_t v38 = "%25s:%-5d  Could not set mDnnVadGraph output stream format property";
      goto LABEL_127;
    }
    uint64_t Property = AudioUnitSetProperty(*v35, 0xEu, 0, 0, &inData, 4u);
    if (Property)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_128;
      }
      *(_DWORD *)UInt32 ioPropertyDataSize = 136315394;
      *(void *)&ioPropertyDataSize[4] = "AADialogueAnchorAnalyzer.cpp";
      *(_WORD *)&ioPropertyDataSize[12] = 1024;
      *(_DWORD *)&ioPropertyDataSize[14] = 427;
      uint64_t v37 = MEMORY[0x1E4F14500];
      uint64_t v38 = "%25s:%-5d  Could not set mDnnVadGraph maxFramesPerSlice property";
      goto LABEL_127;
    }
    uint64_t Property = AudioUnitSetProperty(*v35, 0x64737067u, 0, 0, DialogueAnchor::AADialogueAnchorAnalyzer::SetUpDnnVadGraph(void)::kGraphRef, 8u);
    if (Property)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_128;
      }
      *(_DWORD *)UInt32 ioPropertyDataSize = 136315394;
      *(void *)&ioPropertyDataSize[4] = "AADialogueAnchorAnalyzer.cpp";
      *(_WORD *)&ioPropertyDataSize[12] = 1024;
      *(_DWORD *)&ioPropertyDataSize[14] = 429;
      uint64_t v37 = MEMORY[0x1E4F14500];
      uint64_t v38 = "%25s:%-5d  Could not set dsp graph file property";
      goto LABEL_127;
    }
    uint64_t Property = AudioUnitSetProperty(*v35, 0x70727370u, 0, 0, &v42, 8u);
    if (Property)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_128;
      }
      *(_DWORD *)UInt32 ioPropertyDataSize = 136315394;
      *(void *)&ioPropertyDataSize[4] = "AADialogueAnchorAnalyzer.cpp";
      *(_WORD *)&ioPropertyDataSize[12] = 1024;
      *(_DWORD *)&ioPropertyDataSize[14] = 431;
      uint64_t v37 = MEMORY[0x1E4F14500];
      uint64_t v38 = "%25s:%-5d  Could not set graph property strip";
      goto LABEL_127;
    }
    uint64_t Property = AudioUnitSetProperty(*v35, 0x61757370u, 0, 0, v45, 8u);
    if (Property)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_128;
      }
      *(_DWORD *)UInt32 ioPropertyDataSize = 136315394;
      *(void *)&ioPropertyDataSize[4] = "AADialogueAnchorAnalyzer.cpp";
      *(_WORD *)&ioPropertyDataSize[12] = 1024;
      *(_DWORD *)&ioPropertyDataSize[14] = 433;
      uint64_t v37 = MEMORY[0x1E4F14500];
      uint64_t v38 = "%25s:%-5d  Could not set graph au strip";
      goto LABEL_127;
    }
    uint64_t Property = AudioUnitInitialize(*v35);
    if (Property)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_128;
      }
      *(_DWORD *)UInt32 ioPropertyDataSize = 136315394;
      *(void *)&ioPropertyDataSize[4] = "AADialogueAnchorAnalyzer.cpp";
      *(_WORD *)&ioPropertyDataSize[12] = 1024;
      *(_DWORD *)&ioPropertyDataSize[14] = 437;
      uint64_t v37 = MEMORY[0x1E4F14500];
      uint64_t v38 = "%25s:%-5d  Could not initialize mDnnVadGraph";
      goto LABEL_127;
    }
    uint64_t Property = AudioUnitGetProperty(*v35, 0xEu, 0, 0, &inData, &ioDataSize);
    if (Property)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_128;
      }
      *(_DWORD *)UInt32 ioPropertyDataSize = 136315394;
      *(void *)&ioPropertyDataSize[4] = "AADialogueAnchorAnalyzer.cpp";
      *(_WORD *)&ioPropertyDataSize[12] = 1024;
      *(_DWORD *)&ioPropertyDataSize[14] = 441;
      uint64_t v37 = MEMORY[0x1E4F14500];
      uint64_t v38 = "%25s:%-5d  Could not get dnnVadGraph maxFramesPerSlice";
      goto LABEL_127;
    }
    *((_DWORD *)this + 88) = inData;
    uint64_t Property = AudioUnitReset(*((AudioUnit *)this + 34), 0, 0);
    if (Property && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)UInt32 ioPropertyDataSize = 136315394;
      *(void *)&ioPropertyDataSize[4] = "AADialogueAnchorAnalyzer.cpp";
      *(_WORD *)&ioPropertyDataSize[12] = 1024;
      *(_DWORD *)&ioPropertyDataSize[14] = 445;
      uint64_t v37 = MEMORY[0x1E4F14500];
      uint64_t v38 = "%25s:%-5d  Could not reset dnn vad graph AU";
LABEL_127:
      _os_log_impl(&dword_18FEC0000, v37, OS_LOG_TYPE_ERROR, v38, ioPropertyDataSize, 0x12u);
    }
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)UInt32 ioPropertyDataSize = 136315394;
      *(void *)&ioPropertyDataSize[4] = "AADialogueAnchorAnalyzer.cpp";
      *(_WORD *)&ioPropertyDataSize[12] = 1024;
      *(_DWORD *)&ioPropertyDataSize[14] = 412;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  failed to find dspGraph component", ioPropertyDataSize, 0x12u);
    }
    uint64_t Property = 0xFFFFFFFFLL;
  }
LABEL_128:
  CACFDictionary::~CACFDictionary((CACFDictionary *)v45);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v42);
  if (Property)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return Property;
    }
    LODWORD(buf.mSampleRate) = 136315394;
    *(void *)((char *)&buf.mSampleRate + 4) = "AADialogueAnchorAnalyzer.cpp";
    LOWORD(buf.mFormatFlags) = 1024;
    *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 500;
    float v31 = MEMORY[0x1E4F14500];
    uint64_t v32 = "%25s:%-5d  Failed to setup NNVAD";
    goto LABEL_79;
  }
  unsigned int v39 = vcvtd_n_u64_f64(48000.0 / *((double *)this + 1), 0xAuLL);
  unsigned int v40 = *((_DWORD *)this + 88);
  if (v40 > v39) {
    unsigned int v39 = *((_DWORD *)this + 88);
  }
  LODWORD(buf.mSampleRate) = 0;
  std::vector<float>::resize((char **)this + 45, (unint64_t)((double)(v39 + v40) + 0.5), &buf);
  *((_DWORD *)this + 89) = 0;
  unint64_t v41 = *((unsigned int *)this + 88);
  LODWORD(buf.mSampleRate) = 0;
  std::vector<float>::resize((char **)this + 48, v41, &buf);
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *((_DWORD *)this + 84) = 1;
  uint64_t Property = initGatedLoudness((CAAudioChannelLayout *)1, 6553601, (void *)this + 43, 48000.0);
  if (!Property)
  {
    *((void *)this + 51) = 0;
    *((void *)this + 52) = 0;
    return Property;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf.mSampleRate) = 136315394;
    *(void *)((char *)&buf.mSampleRate + 4) = "AADialogueAnchorAnalyzer.cpp";
    LOWORD(buf.mFormatFlags) = 1024;
    *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 518;
    float v31 = MEMORY[0x1E4F14500];
    uint64_t v32 = "%25s:%-5d  Could not initialize gated loudness";
    goto LABEL_79;
  }
  return Property;
}

void sub_19006A404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

CFPropertyListRef DialogueAnchor::AADialogueAnchorAnalyzer::SetUpDnnVadGraph(void)::$_0::operator()(CFStringRef filePath)
{
  CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFURLRef v2 = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x1E4F1CF80], filePath, kCFURLPOSIXPathStyle, 0);
  applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)&fileURL, v2);
  int v3 = CFReadStreamCreateWithFile(v1, fileURL);
  CFReadStreamOpen(v3);
  CFTypeRef cf = 0;
  CFPropertyListRef v4 = CFPropertyListCreateWithStream(0, v3, 0, 0, 0, (CFErrorRef *)&cf);
  if (cf) {
    CFRelease(cf);
  }
  CFReadStreamClose(v3);
  CFRelease(v3);
  if (fileURL) {
    CFRelease(fileURL);
  }
  return v4;
}

void sub_19006A4E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  applesauce::CF::URLRef::~URLRef((const void **)va);
  _Unwind_Resume(a1);
}

void applesauce::CF::URLRef::~URLRef(const void **this)
{
  CFAllocatorRef v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

void *___Z16NewAudioCapturer20AudioCapturerOptionsPKcS1_jPK27AudioStreamBasicDescriptionRS3__block_invoke()
{
  uint64_t result = dlopen("/usr/local/lib/libAudioDiagnostics.dylib", 5);
  if (result)
  {
    uint64_t result = dlsym(result, "NewAudioCapturerImpl");
    if (result) {
      NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::sImplFunctiouint64_t n = (uint64_t (*)(void, void, void, void, void, void))result;
    }
  }
  return result;
}

void DialogueAnchor::AADialogueAnchorAnalyzer::~AADialogueAnchorAnalyzer(AudioUnit *this)
{
  DialogueAnchor::AADialogueAnchorAnalyzer::~AADialogueAnchorAnalyzer(this);
  JUMPOUT(0x192FC8940);
}

{
  AudioUnit v2;
  AudioUnit v3;
  OpaqueAudioComponentInstance *v4;
  OpaqueAudioComponentInstance *v5;
  OpaqueAudioConverter *v6;
  OpaqueAudioComponentInstance *v7;
  uint64_t i;
  OpaqueAudioComponentInstance *v9;

  *this = (AudioUnit)&unk_1EDF94CB0;
  AudioUnitUninitialize(this[34]);
  AudioComponentInstanceDispose(this[34]);
  removeGatedLoudness((void **)this + 43);
  CFURLRef v2 = this[55];
  this[55] = 0;
  if (v2) {
    (*(void (**)(AudioUnit))(*(void *)v2 + 8))(v2);
  }
  int v3 = this[54];
  this[54] = 0;
  if (v3) {
    (*(void (**)(AudioUnit))(*(void *)v3 + 8))(v3);
  }
  CFPropertyListRef v4 = this[48];
  if (v4)
  {
    this[49] = v4;
    operator delete(v4);
  }
  uint64_t v5 = this[45];
  if (v5)
  {
    this[46] = v5;
    operator delete(v5);
  }
  AudioUnitUninitialize(this[11]);
  AudioComponentInstanceDispose(this[11]);
  uint64_t v6 = this[20];
  if (v6) {
    AudioConverterDispose(v6);
  }
  uint64_t v7 = this[28];
  if (v7)
  {
    this[29] = v7;
    operator delete(v7);
  }
  for (unint64_t i = 0; i != -6; i -= 3)
  {
    uint64_t v9 = this[i + 24];
    if (v9)
    {
      this[i + 25] = v9;
      operator delete(v9);
    }
  }
  *this = (AudioUnit)&unk_1EDF8EE80;
  MEMORY[0x192FC7C80](this + 6);
}

uint64_t ParseMPEGSyncWord(unsigned int a1, uint64_t a2)
{
  if (a1 < 0xFFE00000) {
    return 0;
  }
  uint64_t v2 = bitsToVersion[(a1 >> 19) & 3];
  if (!v2) {
    return 0;
  }
  uint64_t v3 = bitsToLayer[(a1 >> 17) & 3];
  if (!v3) {
    return 0;
  }
  *(_DWORD *)a2 = a1;
  *(unsigned char *)(a2 + 4) = v2;
  *(unsigned char *)(a2 + 5) = v3;
  if ((unsigned __int16)a1 >> 12 == 15) {
    return 0;
  }
  CFPropertyListRef v4 = (char *)&BitRateTable + 64 * (unint64_t)MPEGBitRates[4 * v2 + v3];
  int v5 = *(_DWORD *)&v4[4 * ((unsigned __int16)a1 >> 12)];
  if (!v5) {
    return 0;
  }
  unsigned int v6 = (a1 >> 10) & 3;
  if (v6 == 3) {
    return 0;
  }
  unsigned int v7 = MPEGSampleRates[4 * v2 + v6];
  if (!v7) {
    return 0;
  }
  int v8 = *((_DWORD *)v4 + 14);
  *(_DWORD *)(a2 + 16) = 1000 * v5;
  *(_DWORD *)(a2 + 20) = v5;
  *(double *)(a2 + 24) = (double)v7;
  if ((~a1 & 0xC0) != 0) {
    int v9 = 2;
  }
  else {
    int v9 = 1;
  }
  *(_DWORD *)(a2 + 52) = v9;
  if (v3 == 1)
  {
    *(_DWORD *)(a2 + 32) = 778924081;
    *(_DWORD *)(a2 + 44) = 384;
    int v11 = 48000;
    goto LABEL_21;
  }
  if (v3 == 2)
  {
    *(_DWORD *)(a2 + 32) = 778924082;
    *(_DWORD *)(a2 + 44) = 1152;
    int v11 = 144000;
    goto LABEL_21;
  }
  if (v3 != 3) {
    return 0;
  }
  *(_DWORD *)(a2 + 32) = 778924083;
  if (v7 <= 0x5DC0) {
    int v10 = 576;
  }
  else {
    int v10 = 1152;
  }
  *(_DWORD *)(a2 + 44) = v10;
  int v11 = 125 * v10;
LABEL_21:
  unsigned int v13 = v11 * v5 / v7;
  unsigned int v14 = v11 * v8 / v7;
  *(_DWORD *)(a2 + 8) = v13;
  *(_DWORD *)(a2 + 12) = v14;
  if (v3 == 1)
  {
    unsigned int v15 = (v11 * v8 / v7) & 0xFFFC;
    *(_DWORD *)(a2 + 8) = v13 & 0xFFFC;
    *(_DWORD *)(a2 + 12) = v15;
    if ((a1 & 0x200) != 0)
    {
      *(_DWORD *)(a2 + 8) = (v13 & 0xFFFC) + 4;
      unsigned int v16 = v15 + 4;
LABEL_26:
      *(_DWORD *)(a2 + 12) = v16;
    }
  }
  else if ((a1 & 0x200) != 0)
  {
    *(_DWORD *)(a2 + 8) = v13 + 1;
    unsigned int v16 = v14 + 1;
    goto LABEL_26;
  }
  return 1;
}

void MPEGPacketParser::MPEGPacketParser(MPEGPacketParser *this, unsigned int *a2, unsigned int a3)
{
  *(unsigned char *)this = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  if (a3 >= 4) {
    *(unsigned char *)this = ParseMPEGSyncWord(bswap32(*a2), (uint64_t)this + 8);
  }
}

uint64_t MPEGPacketParser_ASBDFromMPEGPacket(unsigned int *a1, unsigned int a2, AudioStreamBasicDescription *a3)
{
  uint64_t v3 = 2003329396;
  if (a1)
  {
    if (a2 >= 4)
    {
      memset(v7, 0, sizeof(v7));
      if (ParseMPEGSyncWord(bswap32(*a1), (uint64_t)v7))
      {
        uint64_t v3 = 0;
        long long v5 = *(_OWORD *)((char *)&v7[2] + 8);
        *(_OWORD *)&a3->double mSampleRate = *(_OWORD *)((char *)&v7[1] + 8);
        *(_OWORD *)&a3->UInt32 mBytesPerPacket = v5;
        *(void *)&a3->mBitsPerChannel = *((void *)&v7[3] + 1);
      }
    }
    else
    {
      return 561213539;
    }
  }
  return v3;
}

int *SwapInt32ToSwapInt24(unsigned int *a1, unsigned __int8 *a2, unsigned int a3, char a4)
{
  SwapInt32ToNativeInt24_Portable(a1, (uint64_t)a2, a3, a4);
  return SwapPCM24_Portable((int *)a2, (PCMSInt24Swap *)a2, a3);
}

_OWORD *SwapInt32ToSwapInt16(unsigned int *a1, int8x16_t *a2, unsigned int a3, char a4)
{
  SwapInt32ToNativeInt16_Portable(a1, a2->i32, a3, a4);
  return SwapPCM16_ARM(a2, a2, a3);
}

unsigned int *SwapInt24ToSwapInt32(unsigned __int8 *a1, int *a2, unsigned int a3, char a4, uint64_t a5, int *a6)
{
  SwapInt24ToNativeInt32_Portable(a1, a2, a3, a4, a5, a6);
  return SwapPCM32_Portable((unsigned int *)a2, a2, a3);
}

unsigned int *NativeInt24ToSwapInt32(unsigned __int8 *a1, unsigned int *a2, unsigned int a3, char a4)
{
  NativeInt24ToNativeInt32_ARM(a1, (uint64_t)a2, a3, a4);
  return SwapPCM32_Portable(a2, a2, a3);
}

unsigned int *SwapInt16ToSwapInt32(int8x8_t *a1, int32x4_t *a2, unsigned int a3, int a4)
{
  SwapInt16ToNativeInt32_Portable(a1, a2, a3, a4);
  return SwapPCM32_Portable((unsigned int *)a2, a2, a3);
}

unsigned int *NativeInt16ToSwapInt32(int16x8_t *a1, uint32x4_t *a2, unsigned int a3, char a4)
{
  NativeInt16ToNativeInt32_ARM(a1, a2, a3, a4);
  return SwapPCM32_Portable((unsigned int *)a2, a2, a3);
}

float32x4_t *Float32ToNativeInt32_ARM(float32x4_t *a1, int32x4_t *a2, unsigned int a3)
{
  return Float32ToNativeInt32Scaled_ARM(a1, a2, a3, 2147500000.0);
}

const __int16 *StereoDeinterleaveInt16ToFloat32(const __int16 *a1, float32x4_t *a2, float32x4_t *a3, unsigned int a4)
{
  v5[2] = *(float32x4_t **)MEMORY[0x1E4F143B8];
  v5[0] = a2;
  v5[1] = a3;
  return StereoDeinterleaveNativeInt16ToScaledFloat32_ARM(a1, v5, a4, 0.000030518);
}

float32x4_t **StereoInterleaveFloat32ToInt16(float32x4_t *a1, float32x4_t *a2, __int16 *a3, unsigned int a4)
{
  v5[2] = *(float32x4_t **)MEMORY[0x1E4F143B8];
  v5[0] = a1;
  v5[1] = a2;
  return StereoInterleaveFloat32ToNativeInt16Scaled_ARM(v5, a3, a4, 32768.0);
}

uint64_t AIFFAudioFile::GetMarkerList(AIFFAudioFile *this, unsigned int *a2, AudioFileMarkerList *a3, int a4)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *((void *)this + 18);
  uint64_t v6 = *((void *)this + 19);
  uint64_t v7 = v6 - v5;
  if (v6 == v5) {
    return 0;
  }
  uint64_t v12 = 0;
  unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 3);
  unsigned int v14 = 1;
  while (*(_DWORD *)(v5 + 24 * v12) != 1296126539)
  {
    uint64_t v12 = v14;
    if (v13 <= v14++) {
      return 0;
    }
  }
  unsigned int v33 = 2;
  unsigned __int16 v32 = 0;
  uint64_t v17 = *(void *)(v5 + 24 * v12 + 16) + 8;
  uint64_t result = (*(uint64_t (**)(void, void, uint64_t, uint64_t, unsigned __int16 *, unsigned int *))(**((void **)this + 13) + 48))(*((void *)this + 13), 0, v17, 2, &v32, &v33);
  if (!result)
  {
    uint64_t v18 = v33;
    int v19 = bswap32(v32);
    unsigned __int16 v32 = HIWORD(v19);
    if ((int)(v4 / 0x28) >= v19 >> 16) {
      uint64_t v20 = (v19 >> 16);
    }
    else {
      uint64_t v20 = v4 / 0x28;
    }
    a3->mSMPTE_TimeType = 0;
    a3->mNumberMarkers = v20;
    if (v20)
    {
      uint64_t v21 = v17 + v18;
      CFAllocatorRef v22 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      for (unint64_t i = &a3->mMarkers[0].mSMPTETime; ; i += 5)
      {
        unsigned __int16 v31 = 0;
        unsigned int v30 = 0;
        unsigned int v33 = 2;
        uint64_t result = (*(uint64_t (**)(void, void, uint64_t, uint64_t, unsigned __int16 *, unsigned int *))(**((void **)this + 13) + 48))(*((void *)this + 13), 0, v21, 2, &v31, &v33);
        if (result) {
          break;
        }
        uint64_t v24 = v21 + v33;
        unsigned int v33 = 4;
        uint64_t result = (*(uint64_t (**)(void, void, uint64_t, uint64_t, unsigned int *, unsigned int *))(**((void **)this + 13) + 48))(*((void *)this + 13), 0, v24, 4, &v30, &v33);
        if (result) {
          break;
        }
        uint64_t v25 = v24 + v33;
        unsigned int v33 = 1;
        uint64_t result = (*(uint64_t (**)(void, void, uint64_t, uint64_t, unsigned __int8 *, unsigned int *))(**((void **)this + 13) + 48))(*((void *)this + 13), 0, v25, 1, pStr, &v33);
        if (result) {
          break;
        }
        unsigned int v33 = pStr[0];
        uint64_t result = (*(uint64_t (**)(void, void, uint64_t))(**((void **)this + 13) + 48))(*((void *)this + 13), 0, v25 + 1);
        if (result) {
          break;
        }
        __int16 v26 = pStr[0];
        unsigned int v27 = bswap32(v31) >> 16;
        unsigned __int16 v31 = v27;
        unsigned int v28 = bswap32(v30);
        unsigned int v30 = v28;
        if (a4)
        {
          CFStringRef v29 = CFStringCreateWithPascalString(v22, pStr, 0x8000100u);
          LOWORD(v27) = v31;
          unsigned int v28 = v30;
        }
        else
        {
          CFStringRef v29 = 0;
        }
        uint64_t v21 = ((v26 + 2) & 0x1FE) + v25;
        *(void *)&i[-2].mSubFrameSampleOffset = v29;
        i[-1].mSubFrameSampleOffset = (__int16)v27;
        *(double *)&i[-3].mSubFrameSampleOffset = (double)v28;
        AudioFile_SMPTE_Time *i = 0;
        i[1] = 0;
        *a2 += 40;
        if (!--v20) {
          return 0;
        }
      }
      return result;
    }
    return 0;
  }
  return result;
}

BOOL ChunkyAudioFile::FileTypeSupports64BitDataOffsets(ChunkyAudioFile *this)
{
  int v1 = *((_DWORD *)this + 21);
  return v1 == 1113011764 || v1 == 1380333108 || v1 == 1463170150;
}

BOOL ChunkyAudioFile::FileTypeUsesDS64(ChunkyAudioFile *this)
{
  int v1 = *((_DWORD *)this + 21);
  return v1 == 1380333108 || v1 == 1113011764;
}

uint64_t ChunkyAudioFile::PaddedChunkSize(ChunkyAudioFile *this, uint64_t a2)
{
  return (a2 + *((unsigned __int8 *)this + 188) - 1) & -(uint64_t)*((unsigned __int8 *)this + 188);
}

uint64_t AIFFAudioFile::FileCode(AIFFAudioFile *this)
{
  return 1179603533;
}

uint64_t ChunkyAudioFile::IsValidFilePosition(ChunkyAudioFile *this, uint64_t a2)
{
  int v3 = (*(uint64_t (**)(ChunkyAudioFile *))(*(void *)this + 808))(this);
  if (a2 <= 0xFFFFFFFFLL) {
    unsigned int v4 = 0;
  }
  else {
    unsigned int v4 = 1868981823;
  }
  if (v3) {
    return 0;
  }
  else {
    return v4;
  }
}

uint64_t AIFFAudioFile::GetLyrics(AIFFAudioFile *this, const __CFString **a2)
{
  uint64_t v4 = 1667787583;
  int v8 = 12;
  uint64_t v9 = 1431522388;
  if (!ID3ParserGetProperty(*((void *)this + 58), 8, (uint64_t)&v9, 1718185574, (uint64_t)&v8, (uint64_t)v10))
  {
    CFDictionaryRef theDict = 0;
    int v8 = 8;
    if (!ID3ParserGetProperty(*((void *)this + 58), 4, (uint64_t)&v11, 1717854580, (uint64_t)&v8, (uint64_t)&theDict))
    {
      CFStringRef Value = (const __CFString *)CFDictionaryGetValue(theDict, @"text");
      *a2 = Value;
      if (Value) {
        CFRetain(Value);
      }
      CFRelease(theDict);
      return 0;
    }
  }
  return v4;
}

uint64_t ChunkyAudioFile::GetLoudnessInfoSize(ChunkyAudioFile *this, unsigned int *a2, unsigned int *a3)
{
  *a2 = 8;
  *a3 = 1;
  return 0;
}

uint64_t AIFFAudioFile::GetInfoDictionary(AIFFAudioFile *this, CACFDictionary *a2)
{
  UInt32 v92 = 0;
  unsigned int v91 = 0;
  uint64_t v4 = *((void *)this + 18);
  uint64_t v5 = *((void *)this + 19) - v4;
  if (v5)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3);
    unsigned int v8 = 1;
    while (*(_DWORD *)(v4 + 24 * v6) != 1312902469)
    {
      uint64_t v6 = v8;
      BOOL v9 = v7 > v8++;
      if (!v9) {
        goto LABEL_15;
      }
    }
    uint64_t v10 = v4 + 24 * v6;
    uint64_t v13 = *(void *)(v10 + 8);
    uint64_t v12 = (unsigned int *)(v10 + 8);
    unsigned int v11 = v13;
    if (v13 >= 9)
    {
      CADeprecated::CAAutoFree<AIFF_TextChunk>::allocBytes(&v92, v11);
      unsigned int v14 = v92;
      if (v92)
      {
        if (!(*(unsigned int (**)(void, void, void, void, void *, unsigned int *))(**((void **)this + 13) + 48))(*((void *)this + 13), 0, *(void *)(v4 + 24 * v6 + 16), *v12, v92, &v91)&& v91 >= *v12)
        {
          signed int v15 = bswap32(*((_DWORD *)v14 + 1));
          *((_DWORD *)v14 + 1) = v15;
          CFStringRef v16 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)v14 + 8, v15, 0x600u, 0);
          CFStringRef v17 = v16;
          if (v16)
          {
            if (CFStringGetLength(v16)) {
              CACFDictionary::AddString(a2, @"title", v17);
            }
            CFRelease(v17);
          }
        }
        free(v14);
        UInt32 v92 = 0;
      }
    }
  }
LABEL_15:
  uint64_t v18 = *((void *)this + 18);
  uint64_t v19 = *((void *)this + 19) - v18;
  if (v19)
  {
    uint64_t v20 = 0;
    unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * (v19 >> 3);
    unsigned int v22 = 1;
    while (*(_DWORD *)(v18 + 24 * v20) != 1096111176)
    {
      uint64_t v20 = v22;
      BOOL v9 = v21 > v22++;
      if (!v9) {
        goto LABEL_29;
      }
    }
    uint64_t v23 = v18 + 24 * v20;
    uint64_t v26 = *(void *)(v23 + 8);
    uint64_t v25 = (unsigned int *)(v23 + 8);
    unsigned int v24 = v26;
    if ((v26 & 0xFFFFFFF8) != 0)
    {
      unsigned int v91 = 0;
      CADeprecated::CAAutoFree<AIFF_TextChunk>::allocBytes(&v92, v24);
      unsigned int v27 = v92;
      if (v92)
      {
        if (!(*(unsigned int (**)(void, void, void, void, void *, unsigned int *))(**((void **)this + 13) + 48))(*((void *)this + 13), 0, *(void *)(v18 + 24 * v20 + 16), *v25, v92, &v91)&& v91 >= *v25)
        {
          signed int v28 = bswap32(*((_DWORD *)v27 + 1));
          *((_DWORD *)v27 + 1) = v28;
          CFStringRef v29 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)v27 + 8, v28, 0x600u, 0);
          CFStringRef v30 = v29;
          if (v29)
          {
            if (CFStringGetLength(v29)) {
              CACFDictionary::AddString(a2, @"artist", v30);
            }
            CFRelease(v30);
          }
        }
        free(v27);
        UInt32 v92 = 0;
      }
    }
  }
LABEL_29:
  uint64_t v31 = *((void *)this + 18);
  uint64_t v32 = *((void *)this + 19) - v31;
  if (v32)
  {
    uint64_t v33 = 0;
    unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * (v32 >> 3);
    unsigned int v35 = 1;
    while (*(_DWORD *)(v31 + 24 * v33) != 677587232)
    {
      uint64_t v33 = v35;
      BOOL v9 = v34 > v35++;
      if (!v9) {
        goto LABEL_43;
      }
    }
    uint64_t v36 = v31 + 24 * v33;
    uint64_t v39 = *(void *)(v36 + 8);
    uint64_t v38 = (unsigned int *)(v36 + 8);
    unsigned int v37 = v39;
    if ((v39 & 0xFFFFFFF8) != 0)
    {
      unsigned int v91 = 0;
      CADeprecated::CAAutoFree<AIFF_TextChunk>::allocBytes(&v92, v37);
      unsigned int v40 = v92;
      if (v92)
      {
        if (!(*(unsigned int (**)(void, void, void, void, void *, unsigned int *))(**((void **)this + 13) + 48))(*((void *)this + 13), 0, *(void *)(v31 + 24 * v33 + 16), *v38, v92, &v91)&& v91 >= *v38)
        {
          signed int v41 = bswap32(*((_DWORD *)v40 + 1));
          *((_DWORD *)v40 + 1) = v41;
          CFStringRef v42 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)v40 + 8, v41, 0x600u, 0);
          CFStringRef v43 = v42;
          if (v42)
          {
            if (CFStringGetLength(v42)) {
              CACFDictionary::AddString(a2, @"copyright", v43);
            }
            CFRelease(v43);
          }
        }
        free(v40);
        UInt32 v92 = 0;
      }
    }
  }
LABEL_43:
  uint64_t v44 = *((void *)this + 18);
  uint64_t v45 = *((void *)this + 19) - v44;
  if (v45)
  {
    uint64_t v46 = 0;
    unint64_t v47 = 0xAAAAAAAAAAAAAAABLL * (v45 >> 3);
    unsigned int v48 = 1;
    while (*(_DWORD *)(v44 + 24 * v46) != 1095650895)
    {
      uint64_t v46 = v48;
      BOOL v9 = v47 > v48++;
      if (!v9) {
        goto LABEL_55;
      }
    }
    uint64_t v49 = v44 + 24 * v46;
    uint64_t v52 = *(void *)(v49 + 8);
    uint64_t v51 = (unsigned int *)(v49 + 8);
    unsigned int v50 = v52;
    if ((v52 & 0xFFFFFFF8) != 0)
    {
      unsigned int v91 = 0;
      CADeprecated::CAAutoFree<AIFF_TextChunk>::allocBytes(&v92, v50);
      uint64_t v53 = v92;
      if (v92)
      {
        if (!(*(unsigned int (**)(void, void, void, void, void *, unsigned int *))(**((void **)this + 13) + 48))(*((void *)this + 13), 0, *(void *)(v44 + 24 * v46 + 16), *v51, v92, &v91)&& v91 >= *v51)
        {
          signed int v54 = bswap32(*((_DWORD *)v53 + 1));
          *((_DWORD *)v53 + 1) = v54;
          CFStringRef v55 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)v53 + 8, v54, 0x600u, 0);
          if (v55)
          {
            AppendCommentStringToDictionary(a2, v55);
            CFRelease(v55);
          }
        }
        free(v53);
        UInt32 v92 = 0;
      }
    }
  }
LABEL_55:
  uint64_t v56 = *((void *)this + 18);
  uint64_t v57 = *((void *)this + 19) - v56;
  if (v57)
  {
    uint64_t v58 = 0;
    unint64_t v59 = 0xAAAAAAAAAAAAAAABLL * (v57 >> 3);
    unsigned int v60 = 1;
    while (*(_DWORD *)(v56 + 24 * v58) != 1129270612)
    {
      uint64_t v58 = v60;
      BOOL v9 = v59 > v60++;
      if (!v9) {
        goto LABEL_83;
      }
    }
    uint64_t v61 = v56 + 24 * v58;
    uint64_t v64 = *(void *)(v61 + 8);
    int v63 = (unsigned int *)(v61 + 8);
    unsigned int v62 = v64;
    if (v64 >= 0x13)
    {
      uint64_t v65 = v62;
      unsigned int v91 = 0;
      char v66 = (unsigned __int16 *)malloc_type_malloc(v62, 0x7C51E058uLL);
      int v67 = v66;
      if (v65) {
        BOOL v68 = v66 == 0;
      }
      else {
        BOOL v68 = 0;
      }
      if (v68)
      {
        exceptiouint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        char v89 = std::bad_alloc::bad_alloc(exception);
      }
      if (v66)
      {
        if (!(*(unsigned int (**)(void, void, void, void, unsigned __int16 *, unsigned int *))(**((void **)this + 13) + 48))(*((void *)this + 13), 0, *(void *)(v56 + 24 * v58 + 16), *v63, v66, &v91))
        {
          unsigned int v69 = v91;
          unint64_t v70 = *(void *)v63;
          if (v91 >= *(void *)v63)
          {
            *((_DWORD *)v67 + 1) = bswap32(*((_DWORD *)v67 + 1));
            unsigned int v71 = v67[4];
            unsigned int v72 = __rev16(v71);
            v67[4] = v72;
            if (v71)
            {
              uint64_t v73 = (char *)(v67 + 5);
              unsigned int v74 = v69 - 8;
              unsigned int v75 = 10;
              unsigned int v76 = 1;
              do
              {
                *(_DWORD *)uint64_t v73 = bswap32(*(_DWORD *)v73);
                *((_WORD *)v73 + 2) = bswap32(*((unsigned __int16 *)v73 + 2)) >> 16;
                unsigned int v77 = *((unsigned __int16 *)v73 + 3);
                unsigned int v78 = __rev16(v77);
                *((_WORD *)v73 + 3) = v78;
                if (v77)
                {
                  unsigned int v79 = v78 + (v78 & 1) + 8;
                }
                else
                {
                  int v80 = v73[8];
                  if (v80) {
                    int v81 = 9;
                  }
                  else {
                    int v81 = 10;
                  }
                  unsigned int v79 = v81 + v80;
                }
                v75 += v79;
                v73 += v79;
              }
              while (v75 < v74 && v76++ < v72);
              if (!v67[7])
              {
                CFIndex v86 = v67[8];
                if (v67[8])
                {
                  if (v70 >= v86 + 18)
                  {
                    CFStringRef v87 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)v67 + 18, v86, 0x600u, 0);
                    if (v87)
                    {
                      AppendCommentStringToDictionary(a2, v87);
                      CFRelease(v87);
                    }
                  }
                }
              }
            }
          }
        }
        free(v67);
      }
    }
  }
LABEL_83:
  uint64_t v83 = *((void *)this + 58);
  if (v83) {
    FillInfoDictionaryFromID3Parser(a2, v83);
  }
  double v90 = 0.0;
  unsigned int v84 = (AudioFileObject *)(*(uint64_t (**)(AIFFAudioFile *, double *))(*(void *)this + 544))(this, &v90);
  if (!v84) {
    AudioFileObject::AddDurationToInfoDictionary(v84, a2, &v90);
  }
  return 0;
}

void sub_19006B8B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  free(v12);
  if (a12) {
    free(a12);
  }
  _Unwind_Resume(a1);
}

void *CADeprecated::CAAutoFree<AIFF_TextChunk>::allocBytes(void **a1, size_t size)
{
  uint64_t v4 = *a1;
  if (v4)
  {
    free(v4);
    *a1 = 0;
  }
  uint64_t result = malloc_type_malloc(size, 0x7C51E058uLL);
  if (size && !result)
  {
    exceptiouint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    unint64_t v7 = std::bad_alloc::bad_alloc(exception);
  }
  *a1 = result;
  return result;
}

uint64_t AIFFAudioFile::SetChannelLayout(AIFFAudioFile *this, uint64_t a2, const AudioChannelLayout *a3)
{
  UInt32 ioPropertyDataSize = 4;
  int outPropertyData = 0;
  uint64_t Property = AudioFormatGetProperty(0x6E63686Du, a2, a3, &ioPropertyDataSize, &outPropertyData);
  if (!Property)
  {
    if (outPropertyData == *((_DWORD *)this + 13))
    {
      __dst = 0;
      CADeprecated::CAAutoFree<unsigned char>::allocBytes(&__dst, a2, 1);
      unint64_t v7 = (int8x8_t *)__dst;
      memcpy(__dst, a3, a2);
      uint64_t v8 = v7[1].u32[0];
      *unint64_t v7 = vrev32_s8(*v7);
      v7[1].i32[0] = bswap32(v8);
      if (v8)
      {
        BOOL v9 = (unsigned int *)&v7[3] + 1;
        do
        {
          *((int8x16_t *)v9 - 1) = vrev32q_s8(*((int8x16_t *)v9 - 1));
          *BOOL v9 = bswap32(*v9);
          v9 += 5;
          --v8;
        }
        while (v8);
      }
      uint64_t Property = (*(uint64_t (**)(AIFFAudioFile *, uint64_t, uint64_t, int8x8_t *))(*(void *)this + 768))(this, 1128808782, a2, v7);
      free(v7);
    }
    else
    {
      return 4294967246;
    }
  }
  return Property;
}

void sub_19006BAAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  if (a9) {
    free(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AIFFAudioFile::SetRegionList(AIFFAudioFile *this, unsigned int a2, const AudioFileRegionList *a3)
{
  return 1886681407;
}

uint64_t AIFFAudioFile::GetRegionList(AIFFAudioFile *this, unsigned int *a2, AudioFileRegionList *a3)
{
  *a2 = 0;
  return 1886681407;
}

uint64_t AIFFAudioFile::GetRegionListSize(AIFFAudioFile *this, unsigned int *a2, unsigned int *a3)
{
  if (a2) {
    *a2 = 0;
  }
  if (a3) {
    *a3 = 0;
  }
  return 1886681407;
}

uint64_t AIFFAudioFile::SetMarkerList(AIFFAudioFile *this, unsigned int a2, const AudioFileMarkerList *a3)
{
  uint64_t v3 = (uint64_t)a3;
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t mNumberMarkers = a3->mNumberMarkers;
  CADeprecated::CAAutoFree<unsigned char>::CAAutoFree(&v13, (262 * mNumberMarkers + 2), 0);
  *(unsigned char *)uint64_t v13 = BYTE1(mNumberMarkers);
  *((unsigned char *)v13 + 1) = mNumberMarkers;
  if (mNumberMarkers)
  {
    uint64_t v6 = (double *)(v3 + 24);
    LODWORD(v3) = 2;
    do
    {
      *((unsigned char *)v13 + v3) = BYTE1(*(_DWORD *)v6);
      *((unsigned char *)v13 + (v3 + 1)) = *(_DWORD *)v6;
      unsigned int v7 = vcvtmd_u64_f64(*(v6 - 2) + 0.5);
      *((unsigned char *)v13 + (v3 + 2)) = HIBYTE(v7);
      *((unsigned char *)v13 + (v3 + 3)) = BYTE2(v7);
      *((unsigned char *)v13 + (v3 + 4)) = BYTE1(v7);
      *((unsigned char *)v13 + (v3 + 5)) = v7;
      CFStringRef v8 = (const __CFString *)*((void *)v6 - 1);
      if (v8 && CFStringGetPascalString(v8, buffer, 256, 0x8000100u))
      {
        uint64_t v9 = buffer[0];
      }
      else
      {
        *(_WORD *)buffer = 16129;
        uint64_t v9 = 1;
      }
      unsigned int v10 = v3 + 6;
      memcpy((char *)v13 + v10, buffer, v9 + 1);
      uint64_t v3 = ((buffer[0] + 2) & 0x1FE) + v10;
      v6 += 5;
      --mNumberMarkers;
    }
    while (mNumberMarkers);
  }
  else
  {
    uint64_t v3 = 2;
  }
  uint64_t v11 = (*(uint64_t (**)(AIFFAudioFile *, uint64_t, uint64_t, void *))(*(void *)this + 768))(this, 1296126539, v3, v13);
  if (v13) {
    free(v13);
  }
  return v11;
}

void sub_19006BCD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  if (a9) {
    free(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AIFFAudioFile::GetMarkerList(AIFFAudioFile *this, unsigned int *a2, AudioFileMarkerList *a3)
{
  return (*(uint64_t (**)(AIFFAudioFile *, unsigned int *, AudioFileMarkerList *, uint64_t))(*(void *)this + 816))(this, a2, a3, 1);
}

uint64_t AIFFAudioFile::GetMarkerListSize(AIFFAudioFile *this, unsigned int *a2, unsigned int *a3)
{
  if (a3) {
    *a3 = 1;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 18);
  uint64_t v5 = *((void *)this + 19);
  uint64_t v6 = v5 - v4;
  if (v5 == v4)
  {
LABEL_8:
    uint64_t result = 0;
    *a2 = 0;
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    unsigned int v9 = 1;
    while (*(_DWORD *)(v4 + 24 * v7) != 1296126539)
    {
      uint64_t v7 = v9;
      if (v8 <= v9++) {
        goto LABEL_8;
      }
    }
    int v13 = 2;
    unsigned __int16 v12 = 0;
    uint64_t result = (*(uint64_t (**)(void, void, uint64_t, uint64_t, unsigned __int16 *, int *))(**((void **)this + 13) + 48))(*((void *)this + 13), 0, *(void *)(v4 + 24 * v7 + 16) + 8, 2, &v12, &v13);
    if (!result) {
      *a2 = 40 * ((int)bswap32(v12) >> 16) + 8;
    }
  }
  return result;
}

uint64_t AIFFAudioFile::SetMagicCookieData(AIFFAudioFile *this, uint64_t a2, const void *a3)
{
  CFStringRef v16 = 0;
  size_t v6 = a2;
  CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)&v16, a2 + 8, 0);
  uint64_t v7 = v16;
  _DWORD *v16 = 2002876005;
  v7[1] = bswap32(a2);
  memcpy(v7 + 2, a3, v6);
  uint64_t v8 = (*(uint64_t (**)(AIFFAudioFile *, uint64_t, uint64_t, _DWORD *))(*(void *)this + 768))(this, 2002876005, a2, v7 + 2);
  if (!v8)
  {
    long long v9 = *(_OWORD *)((char *)this + 40);
    long long outPropertyData = *(_OWORD *)((char *)this + 24);
    long long v14 = v9;
    uint64_t v15 = *((void *)this + 7);
    UInt32 ioPropertyDataSize = 40;
    uint64_t Property = AudioFormatGetProperty(0x666D7469u, a2, a3, &ioPropertyDataSize, &outPropertyData);
    uint64_t v8 = Property;
    if (!Property
      || (Property == 1718449215 || Property == 560360820)
      && HIDWORD(v14)
      && *(double *)&outPropertyData > 0.0
      && v14)
    {
      (*(void (**)(AIFFAudioFile *, long long *))(*(void *)this + 184))(this, &outPropertyData);
      uint64_t v8 = 0;
    }
  }
  free(v7);
  return v8;
}

void sub_19006BFC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  free(v16);
  _Unwind_Resume(a1);
}

uint64_t AIFFAudioFile::GetMagicCookieData(AIFFAudioFile *this, unsigned int *a2, void *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = 2003334207;
  if (!a2 || !a3) {
    return v3;
  }
  if (*((_DWORD *)this + 8) == 1667326771)
  {
    unsigned int v21 = 0;
    uint64_t v3 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, _WORD *, unsigned int *))(**((void **)this + 13)
                                                                                              + 48))(*((void *)this + 13), 0, *((void *)this + 9) + 8, 10, v23, &v21);
    if (v3) {
      return v3;
    }
    __int16 v14 = 0;
    uint64_t v15 = v23;
    unsigned int v16 = v21;
    char v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0xF6400000000;
    if (v21 < 0xA) {
      goto LABEL_18;
    }
    if (v23[0] != 2935)
    {
      if (v23[0] != 30475) {
        goto LABEL_18;
      }
      char v17 = 1;
    }
    LOBYTE(v14) = 1;
LABEL_18:
    if (AC3PacketParser::IsValid((AC3PacketParser *)&v14) && *a2 >= 0xB) {
      AC3PacketParser::GetMagicCookie((AC3PacketParser *)&v14, a3, a2);
    }
    if (v19) {
      free(v19);
    }
    return v3;
  }
  uint64_t v6 = *((void *)this + 18);
  uint64_t v7 = *((void *)this + 19);
  uint64_t v8 = v7 - v6;
  if (v7 == v6)
  {
LABEL_13:
    *a2 = 0;
    return 1667787583;
  }
  else
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    unsigned int v11 = 1;
    while (*(_DWORD *)(v6 + 24 * v9) != 2002876005)
    {
      uint64_t v9 = v11;
      if (v10 <= v11++) {
        goto LABEL_13;
      }
    }
    unsigned int v22 = *(_DWORD *)(v6 + 24 * v9 + 8) - 8;
    if (*a2 >= v22)
    {
      uint64_t v3 = (*(uint64_t (**)(void, void, uint64_t))(**((void **)this + 13) + 48))(*((void *)this + 13), 0, *(void *)(v6 + 24 * v9 + 16) + 8);
      *a2 = v22;
    }
    else
    {
      return 561211770;
    }
  }
  return v3;
}

void sub_19006C234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  if (a19) {
    free(a19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AIFFAudioFile::UpdateSize(AIFFAudioFile *this)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v33 = 0;
  uint64_t v1 = *((void *)this + 18);
  uint64_t v2 = *((void *)this + 19) - v1;
  if (!v2)
  {
LABEL_5:
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      *(void *)uint64_t v39 = "AIFFAudioFile.cpp";
      *(_WORD *)&v39[8] = 1024;
      int v40 = 1564;
      uint64_t v9 = MEMORY[0x1E4F14500];
      unint64_t v10 = "%25s:%-5d  Couldn't get the sound data chunk info";
LABEL_7:
      _os_log_impl(&dword_18FEC0000, v9, OS_LOG_TYPE_ERROR, v10, buf, 0x12u);
    }
    return 0;
  }
  uint64_t v4 = 0;
  unsigned int v5 = 0;
  uint64_t v6 = *((unsigned int *)this + 10);
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v2 >> 3);
  while (1)
  {
    uint64_t v8 = (_DWORD *)(v1 + 24 * v4);
    if (*v8 == 1397968452) {
      break;
    }
    uint64_t v4 = ++v5;
    if (v7 <= v5) {
      goto LABEL_5;
    }
  }
  uint64_t v13 = (*(uint64_t (**)(AIFFAudioFile *))(*(void *)this + 224))(this);
  uint64_t v14 = v1 + 24 * v4;
  uint64_t v17 = *(void *)(v14 + 8);
  unsigned int v16 = (void *)(v14 + 8);
  int v15 = v17;
  if (v13 >= v17 - 16) {
    unsigned int v18 = 0;
  }
  else {
    unsigned int v18 = v15 - (*(uint64_t (**)(AIFFAudioFile *))(*(void *)this + 224))(this) - 16;
  }
  void *v16 = (*(unsigned int (**)(AIFFAudioFile *))(*(void *)this + 224))(this) + 16;
  int v32 = 0;
  uint64_t v19 = (*(uint64_t (**)(AIFFAudioFile *, _DWORD *, int *))(*(void *)this + 776))(this, v8, &v32);
  if (!v19)
  {
    if (v18)
    {
      ChunkyAudioFile::MoveUpTrailingChunks(this, v5, v18);
      uint64_t v23 = (*(uint64_t (**)(void, uint64_t *))(**((void **)this + 13) + 16))(*((void *)this + 13), &v33);
      if (v23)
      {
        uint64_t v11 = v23;
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          return v11;
        }
        *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
        *(void *)uint64_t v39 = "AIFFAudioFile.cpp";
        *(_WORD *)&v39[8] = 1024;
        int v40 = 1581;
        uint64_t v20 = MEMORY[0x1E4F14500];
        unsigned int v21 = "%25s:%-5d  GetSize failed";
        goto LABEL_16;
      }
      (*(void (**)(void, void))(**((void **)this + 13) + 32))(*((void *)this + 13), v33 - v18);
    }
    uint64_t v24 = *((void *)this + 18);
    uint64_t v25 = *((void *)this + 19) - v24;
    if (v25)
    {
      uint64_t v26 = 0;
      unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * (v25 >> 3);
      unsigned int v28 = 1;
      while (*(_DWORD *)(v24 + 24 * v26) != 1129270605)
      {
        uint64_t v26 = v28;
        if (v27 <= v28++) {
          goto LABEL_27;
        }
      }
      *(_DWORD *)&v39[6] = bswap32((*(uint64_t (**)(AIFFAudioFile *))(*(void *)this + 224))(this) / v6);
      uint64_t v30 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, unsigned char *, char *))(**((void **)this + 13)
                                                                                         + 56))(*((void *)this + 13), 0, *(void *)(v24 + 24 * v26 + 16) + 10, 4, &v39[6], (char *)&v33 + 4);
      if (v30)
      {
        uint64_t v11 = v30;
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          return v11;
        }
        int v34 = 136315394;
        unsigned int v35 = "AIFFAudioFile.cpp";
        __int16 v36 = 1024;
        int v37 = 1592;
        uint64_t v20 = MEMORY[0x1E4F14500];
        unsigned int v21 = "%25s:%-5d  Write Container ckSize failed";
      }
      else
      {
        uint64_t v31 = (*(uint64_t (**)(void, uint64_t *))(**((void **)this + 13) + 16))(*((void *)this + 13), &v33);
        if (v31)
        {
          uint64_t v11 = v31;
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            return v11;
          }
          int v34 = 136315394;
          unsigned int v35 = "AIFFAudioFile.cpp";
          __int16 v36 = 1024;
          int v37 = 1596;
          uint64_t v20 = MEMORY[0x1E4F14500];
          unsigned int v21 = "%25s:%-5d  GetSize failed";
        }
        else
        {
          LODWORD(v33) = bswap32(v33 - 8);
          uint64_t v11 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t *, char *))(**((void **)this + 13)
                                                                                               + 56))(*((void *)this + 13), 0, 4, 4, &v33, (char *)&v33 + 4);
          if (!v11 || !os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            return v11;
          }
          int v34 = 136315394;
          unsigned int v35 = "AIFFAudioFile.cpp";
          __int16 v36 = 1024;
          int v37 = 1600;
          uint64_t v20 = MEMORY[0x1E4F14500];
          unsigned int v21 = "%25s:%-5d  Write Container ckSize failed";
        }
      }
      unsigned int v22 = (uint8_t *)&v34;
      goto LABEL_17;
    }
LABEL_27:
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      *(void *)uint64_t v39 = "AIFFAudioFile.cpp";
      *(_WORD *)&v39[8] = 1024;
      int v40 = 1587;
      uint64_t v9 = MEMORY[0x1E4F14500];
      unint64_t v10 = "%25s:%-5d  Couldn't get the offset of the common chunk";
      goto LABEL_7;
    }
    return 0;
  }
  uint64_t v11 = v19;
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
    *(void *)uint64_t v39 = "AIFFAudioFile.cpp";
    *(_WORD *)&v39[8] = 1024;
    int v40 = 1573;
    uint64_t v20 = MEMORY[0x1E4F14500];
    unsigned int v21 = "%25s:%-5d  Write Sound Data Chunk failed";
LABEL_16:
    unsigned int v22 = buf;
LABEL_17:
    _os_log_impl(&dword_18FEC0000, v20, OS_LOG_TYPE_ERROR, v21, v22, 0x12u);
  }
  return v11;
}

uint64_t AIFFAudioFile::UpdateDataFormat(AIFFAudioFile *this, AudioStreamBasicDescription *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  memset(__src, 0, sizeof(__src));
  uint64_t v4 = (*(uint64_t (**)(AIFFAudioFile *))(*(void *)this + 176))(this);
  if (!v4)
  {
    UInt32 mBitsPerChannel = a2->mBitsPerChannel;
    *(_WORD *)unsigned int v18 = a2->mChannelsPerFrame;
    *(_WORD *)&v18[6] = mBitsPerChannel;
    ConvertToIeeeExtended(&v18[8], a2->mSampleRate);
    FormatFromStreamDescriptiouint64_t n = GetFormatFromStreamDescription(a2);
    uint64_t v8 = *(void *)this;
    if (a2->mBytesPerPacket) {
      uint64_t v9 = (*(uint64_t (**)(AIFFAudioFile *))(v8 + 224))(this) / a2->mBytesPerPacket;
    }
    else {
      LODWORD(v9) = a2->mFramesPerPacket * (*(uint64_t (**)(AIFFAudioFile *))(v8 + 240))(this);
    }
    if (*((_DWORD *)this + 21) == 1095321155)
    {
      FormatFromStreamDescriptiouint64_t n = GetFormatFromStreamDescription(a2);
      GetCompressionName((long long *)a2, (AudioStreamBasicDescription *)__src, v10);
      unsigned int v11 = __src[0];
      uint64_t v12 = (__src[0] + 24) & 0x1FE;
      if (((__src[0] + 24) & 0x1FE) == 0) {
        return 0;
      }
    }
    else
    {
      unsigned int v11 = 0;
      uint64_t v12 = 24;
      unsigned int v17 = 24;
    }
    int v16 = 1296912195;
    unsigned int v17 = bswap32(v12);
    *(_WORD *)unsigned int v18 = bswap32(*(unsigned __int16 *)v18) >> 16;
    *(_DWORD *)&v18[2] = bswap32(v9);
    *(_WORD *)&v18[6] = bswap32(*(unsigned __int16 *)&v18[6]) >> 16;
    *(_DWORD *)&v18[18] = bswap32(FormatFromStreamDescription);
    if (v11)
    {
      CADeprecated::CAAutoFree<unsigned char>::CAAutoFree(&v15, v12, 1);
      uint64_t v13 = (char *)v15;
      uint64_t v14 = *(void *)&v18[14];
      *(_OWORD *)int v15 = *(_OWORD *)v18;
      *(void *)(v13 + 14) = v14;
      memcpy(v13 + 22, __src, v11 + 1);
      uint64_t v4 = (*(uint64_t (**)(AIFFAudioFile *, uint64_t, uint64_t, char *))(*(void *)this + 768))(this, 1129270605, v12, v13);
      if (v15) {
        free(v15);
      }
    }
    else
    {
      return (*(uint64_t (**)(AIFFAudioFile *, uint64_t, uint64_t, unsigned char *))(*(void *)this + 768))(this, 1129270605, v12, v18);
    }
  }
  return v4;
}

void sub_19006CB48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10) {
    free(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t GetFormatFromStreamDescription(const AudioStreamBasicDescription *a1)
{
  uint64_t result = a1->mFormatID;
  if (result == 1819304813)
  {
    UInt32 mBitsPerChannel = a1->mBitsPerChannel;
    AudioFormatFlags mFormatFlags = a1->mFormatFlags;
    if (mBitsPerChannel == 8)
    {
      if ((mFormatFlags & 4) != 0) {
        return 1313820229;
      }
      else {
        return 1918990112;
      }
    }
    else if ((~mFormatFlags & 0xE) != 0)
    {
      if ((~mFormatFlags & 0xB) == 0)
      {
        if (mBitsPerChannel == 32)
        {
          return 1718367026;
        }
        else if (mBitsPerChannel == 64)
        {
          return 1718367796;
        }
      }
    }
    else
    {
      switch(mBitsPerChannel)
      {
        case 0x10u:
          return 1953984371;
        case 0x20u:
          return 1768829746;
        case 0x18u:
          return 1768829492;
      }
    }
  }
  return result;
}

void GetCompressionName(long long *a1, AudioStreamBasicDescription *a2, unsigned __int8 *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  CFStringRef outPropertyData = 0;
  UInt32 ioPropertyDataSize = 8;
  long long v4 = a1[1];
  long long v6 = *a1;
  long long v7 = v4;
  uint64_t v8 = *((void *)a1 + 4);
  *(void *)&long long v6 = 0;
  HIDWORD(v7) = 0;
  *(_OWORD *)&a2->double mSampleRate = 0u;
  *(_OWORD *)&a2->UInt32 mBytesPerPacket = 0u;
  *(_OWORD *)&a2->UInt32 mBitsPerChannel = 0u;
  *(_OWORD *)&a2[1].AudioFormatID mFormatID = 0u;
  *(_OWORD *)&a2[1].mBytesPerFrame = 0u;
  *(_OWORD *)&a2[2].double mSampleRate = 0u;
  *(_OWORD *)&a2[2].UInt32 mBytesPerPacket = 0u;
  *(_OWORD *)&a2[2].UInt32 mBitsPerChannel = 0u;
  *(_OWORD *)&a2[3].AudioFormatID mFormatID = 0u;
  *(_OWORD *)&a2[3].mBytesPerFrame = 0u;
  *(_OWORD *)&a2[4].double mSampleRate = 0u;
  *(_OWORD *)&a2[4].UInt32 mBytesPerPacket = 0u;
  *(_OWORD *)&a2[4].UInt32 mBitsPerChannel = 0u;
  *(_OWORD *)&a2[5].AudioFormatID mFormatID = 0u;
  *(_OWORD *)&a2[5].mBytesPerFrame = 0u;
  *(_OWORD *)&a2[6].double mSampleRate = 0u;
  if (AudioFormatGetProperty(0x666E616Du, 0x28u, &v6, &ioPropertyDataSize, &outPropertyData)
    || !CFStringGetCString(outPropertyData, buffer, 256, 0x8000100u))
  {
    LOBYTE(a2->mSampleRate) = 7;
    *(_DWORD *)((char *)&a2->mSampleRate + 1) = 1852534389;
    HIDWORD(a2->mSampleRate) = 1853321070;
  }
  else
  {
    unsigned __int8 v5 = strlen(buffer);
    LOBYTE(a2->mSampleRate) = v5;
    memcpy((char *)&a2->mSampleRate + 1, buffer, v5);
  }
  if (outPropertyData) {
    CFRelease(outPropertyData);
  }
}

uint64_t AIFFAudioFile::Close(AIFFAudioFile *this)
{
  if ((*((unsigned char *)this + 100) & 2) == 0
    || (uint64_t v6 = 0,
        (*(void (**)(void, uint64_t *))(**((void **)this + 13) + 24))(*((void *)this + 13), &v6),
        (v6 & 1) == 0)
    || (char v5 = 0,
        int v4 = 0,
        uint64_t result = (*(uint64_t (**)(void, uint64_t, void, uint64_t, char *, int *))(**((void **)this + 13)
                                                                                            + 56))(*((void *)this + 13), 2, 0, 1, &v5, &v4), !result))
  {
    uint64_t v3 = *((void *)this + 13);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    uint64_t result = 0;
    *((void *)this + 13) = 0;
  }
  return result;
}

uint64_t AIFFAudioFile::InitializeDataSource(AIFFAudioFile *this, const AudioStreamBasicDescription *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = AIFFAudioFile::InitializeAIFFChunks(this);
  if (v2 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v4 = 136315394;
    char v5 = "AIFFAudioFile.cpp";
    __int16 v6 = 1024;
    int v7 = 1060;
    _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  InitializeAIFFChunks", (uint8_t *)&v4, 0x12u);
  }
  return v2;
}

uint64_t AIFFAudioFile::InitializeAIFFChunks(AIFFAudioFile *this)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  int v2 = *((_DWORD *)this + 21);
  long long v3 = *(_OWORD *)((char *)this + 40);
  *(_OWORD *)&v64.double mSampleRate = *(_OWORD *)((char *)this + 24);
  *(_OWORD *)&v64.UInt32 mBytesPerPacket = v3;
  *(void *)&v64.unsigned __int16 mBitsPerChannel = *((void *)this + 7);
  if (v2 == 1095321155)
  {
    *(_DWORD *)&v75[8] = -1568648896;
    *(void *)unsigned int v75 = 0x446564552;
  }
  memset(v81, 0, sizeof(v81));
  v69.i32[0] = 1129270605;
  unsigned __int16 mChannelsPerFrame = v64.mChannelsPerFrame;
  unsigned int v65 = 0;
  unsigned __int16 mBitsPerChannel = v64.mBitsPerChannel;
  ConvertToIeeeExtended(v73, v64.mSampleRate);
  unsigned int v71 = 0;
  if (v2 == 1095321155)
  {
    FormatFromStreamDescriptiouint64_t n = GetFormatFromStreamDescription(&v64);
    GetCompressionName((long long *)&v64, (AudioStreamBasicDescription *)v81, v4);
    int v5 = (v81[0] + 24) & 0x1FE;
  }
  else
  {
    int v5 = 18;
  }
  v69.i32[1] = v5;
  int v66 = 1179405394;
  int v6 = *((unsigned __int8 *)this + 138);
  if (*((unsigned char *)this + 138))
  {
    int v7 = *((_DWORD *)this + 46) + v5;
    unsigned int v8 = 4068 - v7;
    unsigned int v67 = 4068 - v7;
    if (v2 == 1095321155)
    {
      unsigned int v8 = 4056 - v7;
      unsigned int v67 = 4056 - v7;
    }
  }
  else
  {
    unsigned int v8 = 0;
    unsigned int v67 = 0;
  }
  long long v68 = xmmword_1901C6180;
  if (v6) {
    unsigned int v9 = v8 + 8;
  }
  else {
    unsigned int v9 = 0;
  }
  signed int v10 = v5 + v9 + 28;
  if (v2 == 1095321155)
  {
    v10 += *(_DWORD *)&v75[4] + 8;
    int v11 = 1128679745;
  }
  else
  {
    int v11 = 1179011393;
  }
  *(void *)&long long v62 = 0x8464F524DLL;
  *((void *)&v62 + 1) = v10 + 8;
  uint64_t v63 = 0;
  v76[0] = 1297239878;
  v76[1] = bswap32(v10);
  v76[2] = v11;
  uint64_t v12 = (*(uint64_t (**)(void, void, void, uint64_t, _DWORD *, unsigned int *))(**((void **)this + 13)
                                                                                             + 56))(*((void *)this + 13), 0, 0, 12, v76, &v65);
  if (v12)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      unsigned int v78 = "AIFFAudioFile.cpp";
      __int16 v79 = 1024;
      int v80 = 910;
      uint64_t v13 = MEMORY[0x1E4F14500];
LABEL_62:
      _os_log_impl(&dword_18FEC0000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d  FSWrite Failed", buf, 0x12u);
      return v12;
    }
    return v12;
  }
  uint64_t v14 = (char **)((char *)this + 144);
  unint64_t v16 = *((void *)this + 19);
  unint64_t v15 = *((void *)this + 20);
  if (v16 >= v15)
  {
    unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - (void)*v14) >> 3);
    unint64_t v19 = v18 + 1;
    if (v18 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (void)*v14) >> 3);
    if (2 * v20 > v19) {
      unint64_t v19 = 2 * v20;
    }
    if (v20 >= 0x555555555555555) {
      unint64_t v21 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v21 = v19;
    }
    if (v21) {
      unint64_t v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v21);
    }
    else {
      uint64_t v22 = 0;
    }
    unint64_t v23 = v21 + 24 * v18;
    unint64_t v24 = v21 + 24 * v22;
    *(_OWORD *)unint64_t v23 = v62;
    *(void *)(v23 + 16) = v63;
    unint64_t v17 = v23 + 24;
    uint64_t v26 = (char *)*((void *)this + 18);
    uint64_t v25 = (char *)*((void *)this + 19);
    if (v25 != v26)
    {
      do
      {
        long long v27 = *(_OWORD *)(v25 - 24);
        *(void *)(v23 - 8) = *((void *)v25 - 1);
        *(_OWORD *)(v23 - 24) = v27;
        v23 -= 24;
        v25 -= 24;
      }
      while (v25 != v26);
      uint64_t v25 = *v14;
    }
    *((void *)this + 18) = v23;
    *((void *)this + 19) = v17;
    *((void *)this + 20) = v24;
    if (v25) {
      operator delete(v25);
    }
  }
  else
  {
    *(_OWORD *)unint64_t v16 = v62;
    *(void *)(v16 + 16) = v63;
    unint64_t v17 = v16 + 24;
  }
  *((void *)this + 19) = v17;
  uint64_t v28 = v65;
  if (v2 != 1095321155)
  {
LABEL_56:
    *(void *)&long long v62 = v69.u32[0] | 0x800000000;
    *((void *)&v62 + 1) = v69.i32[1] + 8;
    uint64_t v63 = v28;
    if (v2 == 1095321155)
    {
      int8x8_t v42 = vrev32_s8(v69);
      unsigned int v43 = bswap32(mChannelsPerFrame) >> 16;
      unsigned int v44 = bswap32(v71);
      unsigned int v45 = bswap32(mBitsPerChannel) >> 16;
      FormatFromStreamDescriptiouint64_t n = bswap32(FormatFromStreamDescription);
      uint64_t v46 = 30;
    }
    else
    {
      uint64_t v46 = (v69.i32[1] + 8);
      int8x8_t v42 = vrev32_s8(v69);
      unsigned int v43 = bswap32(mChannelsPerFrame) >> 16;
      unsigned int v44 = bswap32(v71);
      unsigned int v45 = bswap32(mBitsPerChannel) >> 16;
    }
    int8x8_t v69 = v42;
    unsigned __int16 mChannelsPerFrame = v43;
    unsigned int v71 = v44;
    unsigned __int16 mBitsPerChannel = v45;
    uint64_t v12 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, int8x8_t *, unsigned int *))(**((void **)this + 13)
                                                                                                  + 56))(*((void *)this + 13), 0, v28, v46, &v69, &v65);
    if (v12)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
        unsigned int v78 = "AIFFAudioFile.cpp";
        __int16 v79 = 1024;
        int v80 = 946;
        uint64_t v13 = MEMORY[0x1E4F14500];
        goto LABEL_62;
      }
    }
    else
    {
      unint64_t v49 = *((void *)this + 19);
      unint64_t v48 = *((void *)this + 20);
      if (v49 >= v48)
      {
        unint64_t v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49 - (void)*v14) >> 3);
        unint64_t v52 = v51 + 1;
        if (v51 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v53 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - (void)*v14) >> 3);
        if (2 * v53 > v52) {
          unint64_t v52 = 2 * v53;
        }
        if (v53 >= 0x555555555555555) {
          unint64_t v54 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v54 = v52;
        }
        if (v54) {
          unint64_t v54 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v54);
        }
        else {
          uint64_t v55 = 0;
        }
        unint64_t v56 = v54 + 24 * v51;
        unint64_t v57 = v54 + 24 * v55;
        *(_OWORD *)unint64_t v56 = v62;
        *(void *)(v56 + 16) = v63;
        unint64_t v50 = v56 + 24;
        unint64_t v59 = (char *)*((void *)this + 18);
        uint64_t v58 = (char *)*((void *)this + 19);
        if (v58 != v59)
        {
          do
          {
            long long v60 = *(_OWORD *)(v58 - 24);
            *(void *)(v56 - 8) = *((void *)v58 - 1);
            *(_OWORD *)(v56 - 24) = v60;
            v56 -= 24;
            v58 -= 24;
          }
          while (v58 != v59);
          uint64_t v58 = *v14;
        }
        *((void *)this + 18) = v56;
        *((void *)this + 19) = v50;
        *((void *)this + 20) = v57;
        if (v58) {
          operator delete(v58);
        }
      }
      else
      {
        *(_OWORD *)unint64_t v49 = v62;
        *(void *)(v49 + 16) = v63;
        unint64_t v50 = v49 + 24;
      }
      *((void *)this + 19) = v50;
      uint64_t v61 = v28 + v65;
      if (v2 == 1095321155)
      {
        uint64_t v12 = (*(uint64_t (**)(void, void, uint64_t, void, unsigned char *, unsigned int *))(**((void **)this + 13)
                                                                                                  + 56))(*((void *)this + 13), 0, v61, (v81[0] + 2) & 0x1FE, v81, &v65);
        if (v12)
        {
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            return v12;
          }
          *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
          unsigned int v78 = "AIFFAudioFile.cpp";
          __int16 v79 = 1024;
          int v80 = 956;
          uint64_t v13 = MEMORY[0x1E4F14500];
          goto LABEL_62;
        }
        v61 += v65;
      }
      if (*((unsigned char *)this + 138))
      {
        *(void *)&long long v62 = 0x8464C4C52;
        *((void *)&v62 + 1) = (int)v8 + 8;
        uint64_t v63 = v61;
        int v66 = 1380731974;
        unsigned int v67 = bswap32(v8);
        uint64_t v12 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, int *, unsigned int *))(**((void **)this + 13)
                                                                                                 + 56))(*((void *)this + 13), 0, v61, 8, &v66, &v65);
        if (v12)
        {
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            return v12;
          }
          *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
          unsigned int v78 = "AIFFAudioFile.cpp";
          __int16 v79 = 1024;
          int v80 = 969;
          uint64_t v13 = MEMORY[0x1E4F14500];
          goto LABEL_62;
        }
        std::vector<ChunkInfo64>::push_back[abi:ne180100]((void **)this + 18, &v62);
        v61 += v8 + (unint64_t)v65;
        (*(void (**)(void, uint64_t))(**((void **)this + 13) + 32))(*((void *)this + 13), v61);
      }
      *(void *)&long long v62 = 0x853534E44;
      *((void *)&v62 + 1) = 16;
      uint64_t v63 = v61;
      long long v68 = xmmword_1901C6190;
      uint64_t v12 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, long long *, unsigned int *))(**((void **)this + 13) + 56))(*((void *)this + 13), 0, v61, 16, &v68, &v65);
      if (!v12)
      {
        std::vector<ChunkInfo64>::push_back[abi:ne180100]((void **)this + 18, &v62);
        *((void *)this + 9) = v61 + v65;
        *((_DWORD *)this + 20) = 1;
        (*(void (**)(AIFFAudioFile *, void))(*(void *)this + 232))(this, 0);
        (*(void (**)(AIFFAudioFile *, void))(*(void *)this + 248))(this, 0);
        (*(void (**)(AIFFAudioFile *, void))(*(void *)this + 648))(this, v64.mBytesPerPacket);
        return 0;
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
        unsigned int v78 = "AIFFAudioFile.cpp";
        __int16 v79 = 1024;
        int v80 = 983;
        uint64_t v13 = MEMORY[0x1E4F14500];
        goto LABEL_62;
      }
    }
    return v12;
  }
  *(void *)&long long v62 = *(unsigned int *)v75 | 0x800000000;
  *(_DWORD *)unsigned int v75 = bswap32(*(unsigned int *)v75);
  *((void *)&v62 + 1) = *(int *)&v75[4] + 8;
  uint64_t v63 = v65;
  *(int8x8_t *)&v75[4] = vrev32_s8(*(int8x8_t *)&v75[4]);
  uint64_t v12 = (*(uint64_t (**)(void, void, void, uint64_t, unsigned char *, unsigned int *))(**((void **)this + 13)
                                                                                            + 56))(*((void *)this + 13), 0, v65, 12, v75, &v65);
  if (!v12)
  {
    unint64_t v30 = *((void *)this + 19);
    unint64_t v29 = *((void *)this + 20);
    if (v30 >= v29)
    {
      unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - (void)*v14) >> 3);
      unint64_t v33 = v32 + 1;
      if (v32 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - (void)*v14) >> 3);
      if (2 * v34 > v33) {
        unint64_t v33 = 2 * v34;
      }
      if (v34 >= 0x555555555555555) {
        unint64_t v35 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v35 = v33;
      }
      if (v35) {
        unint64_t v35 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v35);
      }
      else {
        uint64_t v36 = 0;
      }
      unint64_t v37 = v35 + 24 * v32;
      unint64_t v38 = v35 + 24 * v36;
      *(_OWORD *)unint64_t v37 = v62;
      *(void *)(v37 + 16) = v63;
      unint64_t v31 = v37 + 24;
      int v40 = (char *)*((void *)this + 18);
      uint64_t v39 = (char *)*((void *)this + 19);
      if (v39 != v40)
      {
        do
        {
          long long v41 = *(_OWORD *)(v39 - 24);
          *(void *)(v37 - 8) = *((void *)v39 - 1);
          *(_OWORD *)(v37 - 24) = v41;
          v37 -= 24;
          v39 -= 24;
        }
        while (v39 != v40);
        uint64_t v39 = *v14;
      }
      *((void *)this + 18) = v37;
      *((void *)this + 19) = v31;
      *((void *)this + 20) = v38;
      if (v39) {
        operator delete(v39);
      }
    }
    else
    {
      *(_OWORD *)unint64_t v30 = v62;
      *(void *)(v30 + 16) = v63;
      unint64_t v31 = v30 + 24;
    }
    *((void *)this + 19) = v31;
    v28 += v65;
    goto LABEL_56;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
    unsigned int v78 = "AIFFAudioFile.cpp";
    __int16 v79 = 1024;
    int v80 = 923;
    uint64_t v13 = MEMORY[0x1E4F14500];
    goto LABEL_62;
  }
  return v12;
}

void std::vector<ChunkInfo64>::push_back[abi:ne180100](void **a1, long long *a2)
{
  int v5 = (char *)a1[1];
  int v4 = (char *)a1[2];
  if (v5 >= v4)
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 3);
    unint64_t v9 = v8 + 1;
    if (v8 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)*a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      unint64_t v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v11);
    }
    else {
      uint64_t v12 = 0;
    }
    unint64_t v13 = v11 + 24 * v8;
    unint64_t v14 = v11 + 24 * v12;
    long long v15 = *a2;
    *(void *)(v13 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v13 = v15;
    int v7 = (void *)(v13 + 24);
    unint64_t v17 = (char *)*a1;
    unint64_t v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        long long v18 = *(_OWORD *)(v16 - 24);
        *(void *)(v13 - 8) = *((void *)v16 - 1);
        *(_OWORD *)(v13 - 24) = v18;
        v13 -= 24;
        v16 -= 24;
      }
      while (v16 != v17);
      unint64_t v16 = (char *)*a1;
    }
    *a1 = (void *)v13;
    a1[1] = v7;
    a1[2] = (void *)v14;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    long long v6 = *a2;
    *((void *)v5 + 2) = *((void *)a2 + 2);
    *(_OWORD *)int v5 = v6;
    int v7 = v5 + 24;
  }
  a1[1] = v7;
}

uint64_t AIFFID3CallbackProc(void *a1, int a2, unsigned int a3, unsigned int a4, void **a5, unsigned int *a6)
{
  if (a2 == 1)
  {
    unint64_t v13 = (void *)a1[60];
    if (v13) {
      free(v13);
    }
    uint64_t result = 0;
    a1[60] = 0;
  }
  else if (a2)
  {
    return 0;
  }
  else
  {
    int64_t v23 = 0;
    (*(void (**)(void, int64_t *))(*(void *)a1[13] + 24))(a1[13], &v23);
    uint64_t v11 = a1[59];
    if ((uint64_t)(a4 + (unint64_t)a3 + v11) <= v23)
    {
      if (a4 <= 0x400) {
        uint64_t v14 = 1024;
      }
      else {
        uint64_t v14 = a4;
      }
      int64_t v15 = v11 + v14;
      unsigned int v16 = v23 - v11;
      if (v15 <= v23) {
        size_t v17 = v14;
      }
      else {
        size_t v17 = v16;
      }
      long long v18 = malloc_type_malloc(v17, 0x2C8E6D5CuLL);
      unint64_t v19 = v18;
      if (v17 && !v18)
      {
        exceptiouint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        unint64_t v21 = std::bad_alloc::bad_alloc(exception);
      }
      bzero(v18, v17);
      a1[60] = v19;
      unsigned int v22 = 0;
      uint64_t result = (*(uint64_t (**)(void, void, void, size_t, void *, unsigned int *))(*(void *)a1[13]
                                                                                                 + 48))(a1[13], 0, a1[59] + a3, v17, v19, &v22);
      if (!result)
      {
        *a5 = (void *)a1[60];
        *a6 = v22;
      }
    }
    else
    {
      return 4294967272;
    }
  }
  return result;
}

uint64_t AIFFAudioFile::Create(AIFFAudioFile *this, const __CFURL *a2, const AudioStreamBasicDescription *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = AudioFileObject::Create(this, a2, a3);
  if (v4)
  {
    uint64_t v5 = v4;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      unint64_t v10 = "AIFFAudioFile.cpp";
      __int16 v11 = 1024;
      int v12 = 1032;
      long long v6 = MEMORY[0x1E4F14500];
      int v7 = "%25s:%-5d  Couldn't create a new audio file object";
LABEL_7:
      _os_log_impl(&dword_18FEC0000, v6, OS_LOG_TYPE_ERROR, v7, (uint8_t *)&v9, 0x12u);
    }
  }
  else
  {
    uint64_t v5 = AIFFAudioFile::InitializeAIFFChunks(this);
    if (v5 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      unint64_t v10 = "AIFFAudioFile.cpp";
      __int16 v11 = 1024;
      int v12 = 1035;
      long long v6 = MEMORY[0x1E4F14500];
      int v7 = "%25s:%-5d  InitializeAIFFChunks";
      goto LABEL_7;
    }
  }
  return v5;
}

void AIFFAudioFile::~AIFFAudioFile(AIFFAudioFile *this)
{
  AIFFAudioFile::~AIFFAudioFile(this);
  JUMPOUT(0x192FC8940);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EDF8DA48;
  if (*((void *)this + 58)) {
    ID3ParserClose();
  }
  *(void *)this = &unk_1EDF90168;
  int v2 = (void *)*((void *)this + 18);
  if (v2)
  {
    *((void *)this + 19) = v2;
    operator delete(v2);
  }
  AudioFileObject::~AudioFileObject(this);
}

void AIFFAudioFormat::NewStream(AIFFAudioFormat *this)
{
}

uint64_t AIFFAudioFormat::GetHFSCodes(AIFFAudioFormat *this, unsigned int *a2, void *__dst)
{
  int __src = 1095321158;
  if (*a2 >= 4) {
    size_t v3 = 4;
  }
  else {
    size_t v3 = *a2 & 0xFFFFFFFC;
  }
  *a2 = v3;
  if (__dst) {
    memcpy(__dst, &__src, v3);
  }
  return 0;
}

uint64_t AIFFAudioFormat::GetAvailableStreamDescriptions(AIFFAudioFormat *this, int a2, unsigned int *a3, void *__dst)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (a2 == 1819304813)
  {
    uint64_t v4 = (_DWORD *)&v9[1] + 1;
    memset(v9, 0, sizeof(v9));
    uint64_t v5 = -32;
    do
    {
      *(void *)(v4 - 3) = 0xE6C70636DLL;
      v4[3] = v5 + 40;
      *uint64_t v4 = 1;
      v4 += 10;
      v5 += 8;
    }
    while (v5);
    unsigned int v6 = *a3 / 0x28;
    if (v6 >= 4) {
      unsigned int v6 = 4;
    }
    size_t v7 = 40 * v6;
    *a3 = v7;
    if (__dst) {
      memcpy(__dst, v9, v7);
    }
    return 0;
  }
  else
  {
    *a3 = 0;
    return 1718449215;
  }
}

uint64_t AIFFAudioFormat::GetAvailableFormatIDs(AIFFAudioFormat *this, unsigned int *a2, void *__dst)
{
  int __src = 1819304813;
  if (*a2 >= 4) {
    size_t v3 = 4;
  }
  else {
    size_t v3 = *a2 & 0xFFFFFFFC;
  }
  *a2 = v3;
  if (__dst) {
    memcpy(__dst, &__src, v3);
  }
  return 0;
}

void AIFFAudioFormat::GetFileTypeName(AIFFAudioFormat *this, const __CFString **a2)
{
  CABundleLocker::CABundleLocker((CABundleLocker *)&v5);
  size_t v3 = (__CFBundle *)sAudioToolboxBundle;
  if (sAudioToolboxBundle == -1)
  {
    pthread_once(&sOnce, InitGetAudioToolboxBundle);
    size_t v3 = (__CFBundle *)sAudioToolboxBundle;
    if (sAudioToolboxBundle) {
      goto LABEL_3;
    }
LABEL_5:
    CFStringRef v4 = (const __CFString *)CFRetain(@"AIFF");
    goto LABEL_6;
  }
  if (!sAudioToolboxBundle) {
    goto LABEL_5;
  }
LABEL_3:
  CFStringRef v4 = CFBundleCopyLocalizedString(v3, @"AIFF", @"AIFF", @"FileTypeNames");
LABEL_6:
  *a2 = v4;
  CABundleLocker::~CABundleLocker((CABundleLocker *)&v5);
}

void sub_19006E130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

const __CFArray *AIFFAudioFormat::GetMIMETypes(AIFFAudioFormat *this, const __CFArray **a2)
{
  values[2] = *(void **)MEMORY[0x1E4F143B8];
  values[0] = @"audio/aiff";
  values[1] = @"audio/x-aiff";
  CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)values, 2, MEMORY[0x1E4F1D510]);
  *a2 = result;
  return result;
}

const __CFArray *AIFFAudioFormat::GetUTIs(AIFFAudioFormat *this, const __CFArray **a2)
{
  v4[1] = *(const void **)MEMORY[0x1E4F143B8];
  v4[0] = @"public.aiff-audio";
  CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v4, 1, MEMORY[0x1E4F1D510]);
  *a2 = result;
  return result;
}

const __CFArray *AIFFAudioFormat::GetExtensions(AIFFAudioFormat *this, const __CFArray **a2)
{
  values[2] = *(void **)MEMORY[0x1E4F143B8];
  values[0] = @"aiff";
  values[1] = @"aif";
  CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)values, 2, MEMORY[0x1E4F1D510]);
  *a2 = result;
  return result;
}

void AIFFAudioFormat::~AIFFAudioFormat(AIFFAudioFormat *this)
{
}

void AIFCAudioFormat::NewStream(AIFCAudioFormat *this)
{
}

void AIFCAudioFormat::New(AIFCAudioFormat *this)
{
}

uint64_t AIFCAudioFormat::GetHFSCodes(AIFCAudioFormat *this, unsigned int *a2, void *__dst)
{
  int __src = 1095321155;
  if (*a2 >= 4) {
    size_t v3 = 4;
  }
  else {
    size_t v3 = *a2 & 0xFFFFFFFC;
  }
  *a2 = v3;
  if (__dst) {
    memcpy(__dst, &__src, v3);
  }
  return 0;
}

uint64_t AIFCAudioFormat::GetAvailableStreamDescriptions(AIFCAudioFormat *this, int a2, unsigned int *a3, void *__dst)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (a2 <= 1634169708)
  {
    if (a2 <= 1363430705)
    {
      if (a2 != 1296122675)
      {
        int v6 = 1296122678;
LABEL_16:
        if (a2 != v6) {
          goto LABEL_26;
        }
      }
    }
    else if (a2 != 1363430706 && a2 != 1363430723)
    {
      int v6 = 1365470320;
      goto LABEL_16;
    }
LABEL_21:
    *(void *)&long long v15 = 0;
    long long outPropertyData = 0u;
    long long v14 = 0u;
    DWORD2(outPropertyData) = a2;
LABEL_22:
    unsigned int v9 = 1;
    if (__dst) {
      goto LABEL_23;
    }
LABEL_13:
    uint64_t result = 0;
    *a3 = 40 * v9;
    return result;
  }
  if (a2 <= 1768775987)
  {
    if (a2 == 1634169709) {
      goto LABEL_21;
    }
    if (a2 != 1634492791)
    {
LABEL_26:
      uint64_t result = 1718449215;
      *a3 = 0;
      return result;
    }
LABEL_20:
    *(void *)&long long v15 = 0;
    long long outPropertyData = 0u;
    long long v14 = 0u;
    DWORD2(outPropertyData) = a2;
    UInt32 ioPropertyDataSize = 40;
    AudioFormatGetProperty(0x666D7469u, 0, 0, &ioPropertyDataSize, &outPropertyData);
    goto LABEL_22;
  }
  if (a2 == 1768775988 || a2 == 1970037111) {
    goto LABEL_20;
  }
  if (a2 != 1819304813) {
    goto LABEL_26;
  }
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v21 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long outPropertyData = 0u;
  long long v14 = 0u;
  size_t v7 = (_DWORD *)&v14 + 1;
  uint64_t v8 = -32;
  uint64_t v30 = 0;
  do
  {
    *(void *)(v7 - 3) = 0xE6C70636DLL;
    v7[3] = v8 + 40;
    *size_t v7 = 1;
    v7 += 10;
    v8 += 8;
  }
  while (v8);
  *((void *)&v23 + 1) = 0xB6C70636DLL;
  LODWORD(v25) = 32;
  DWORD1(v24) = 1;
  *(void *)&long long v26 = 0xB6C70636DLL;
  DWORD2(v27) = 64;
  HIDWORD(v26) = 1;
  *((void *)&v28 + 1) = 0xA6C70636DLL;
  LODWORD(v30) = 8;
  DWORD1(v29) = 1;
  unsigned int v9 = 7;
  if (!__dst) {
    goto LABEL_13;
  }
LABEL_23:
  if (*a3 / 0x28 < v9) {
    unsigned int v9 = *a3 / 0x28;
  }
  size_t v11 = 40 * v9;
  *a3 = v11;
  memcpy(__dst, &outPropertyData, v11);
  return 0;
}

uint64_t AIFCAudioFormat::GetAvailableFormatIDs(AIFCAudioFormat *this, unsigned int *a2, void *__dst)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  qmemcpy(v6, "mcplwaluwala3CAM6CAM4amiCMDQ2MDQplcQmsga", sizeof(v6));
  unsigned int v3 = *a2 >> 2;
  if (v3 >= 0xA) {
    unsigned int v3 = 10;
  }
  size_t v4 = 4 * v3;
  *a2 = v4;
  if (__dst) {
    memcpy(__dst, v6, v4);
  }
  return 0;
}

void AIFCAudioFormat::GetFileTypeName(AIFCAudioFormat *this, const __CFString **a2)
{
  CABundleLocker::CABundleLocker((CABundleLocker *)&v5);
  unsigned int v3 = (__CFBundle *)sAudioToolboxBundle;
  if (sAudioToolboxBundle == -1)
  {
    pthread_once(&sOnce, InitGetAudioToolboxBundle);
    unsigned int v3 = (__CFBundle *)sAudioToolboxBundle;
    if (sAudioToolboxBundle) {
      goto LABEL_3;
    }
LABEL_5:
    CFStringRef v4 = (const __CFString *)CFRetain(@"AIFC");
    goto LABEL_6;
  }
  if (!sAudioToolboxBundle) {
    goto LABEL_5;
  }
LABEL_3:
  CFStringRef v4 = CFBundleCopyLocalizedString(v3, @"AIFC", @"AIFC", @"FileTypeNames");
LABEL_6:
  *a2 = v4;
  CABundleLocker::~CABundleLocker((CABundleLocker *)&v5);
}

void sub_19006E824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

const __CFArray *AIFCAudioFormat::GetMIMETypes(AIFCAudioFormat *this, const __CFArray **a2)
{
  values[2] = *(void **)MEMORY[0x1E4F143B8];
  values[0] = @"audio/aiff";
  values[1] = @"audio/x-aiff";
  CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)values, 2, MEMORY[0x1E4F1D510]);
  *a2 = result;
  return result;
}

const __CFArray *AIFCAudioFormat::GetUTIs(AIFCAudioFormat *this, const __CFArray **a2)
{
  v4[1] = *(const void **)MEMORY[0x1E4F143B8];
  v4[0] = @"public.aifc-audio";
  CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v4, 1, MEMORY[0x1E4F1D510]);
  *a2 = result;
  return result;
}

const __CFArray *AIFCAudioFormat::GetExtensions(AIFCAudioFormat *this, const __CFArray **a2)
{
  v4[3] = *(const void **)MEMORY[0x1E4F143B8];
  v4[0] = @"aifc";
  v4[1] = @"aiff";
  v4[2] = @"aif";
  CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v4, 3, MEMORY[0x1E4F1D510]);
  *a2 = result;
  return result;
}

BOOL AIFCAudioFormat::FileDataIsThisFormat(AIFCAudioFormat *this, unsigned int a2, _DWORD *a3)
{
  if (a2 < 0xC) {
    return 0;
  }
  return *a3 == 1297239878 && a3[2] == 1128679745;
}

BOOL AIFCAudioFormat::ExtensionIsThisFormat(AIFCAudioFormat *this, CFStringRef theString1)
{
  uint64_t v3 = 1;
  if (CFStringCompare(theString1, @"aifc", 1uLL))
  {
    uint64_t v3 = 1;
    if (CFStringCompare(theString1, @"aiff", 1uLL)) {
      return CFStringCompare(theString1, @"aif", 1uLL) == kCFCompareEqualTo;
    }
  }
  return v3;
}

void AIFCAudioFormat::~AIFCAudioFormat(AIFCAudioFormat *this)
{
}

__n128 std::construct_at[abi:ne180100]<CA::ADMMatrixCoefficient,CA::ADMMatrixCoefficient,CA::ADMMatrixCoefficient*>(__n128 *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)a2;
  a1->n128_u32[2] = *(_DWORD *)(a2 + 8);
  a1->n128_u64[0] = v2;
  a1[1].n128_u8[0] = 0;
  a1[2].n128_u8[8] = 0;
  if (*(unsigned char *)(a2 + 40))
  {
    __n128 v3 = *(__n128 *)(a2 + 16);
    a1[2].n128_u64[0] = *(void *)(a2 + 32);
    a1[1] = v3;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 16) = 0;
    a1[2].n128_u8[8] = 1;
  }
  unint64_t v4 = *(void *)(a2 + 48);
  a1[3].n128_u8[8] = 0;
  a1[3].n128_u64[0] = v4;
  a1[5].n128_u8[0] = 0;
  if (*(unsigned char *)(a2 + 80))
  {
    __n128 v5 = *(__n128 *)(a2 + 56);
    a1[4].n128_u64[1] = *(void *)(a2 + 72);
    *(__n128 *)((char *)a1 + 56) = v5;
    *(void *)(a2 + 64) = 0;
    *(void *)(a2 + 72) = 0;
    *(void *)(a2 + 56) = 0;
    a1[5].n128_u8[0] = 1;
  }
  unint64_t v6 = *(void *)(a2 + 88);
  a1[6].n128_u8[0] = 0;
  a1[5].n128_u64[1] = v6;
  a1[7].n128_u8[8] = 0;
  if (*(unsigned char *)(a2 + 120))
  {
    __n128 v7 = *(__n128 *)(a2 + 96);
    a1[7].n128_u64[0] = *(void *)(a2 + 112);
    a1[6] = v7;
    *(void *)(a2 + 104) = 0;
    *(void *)(a2 + 112) = 0;
    *(void *)(a2 + 96) = 0;
    a1[7].n128_u8[8] = 1;
  }
  __n128 result = *(__n128 *)(a2 + 128);
  a1[8] = result;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ADMMatrixCoefficient>>(unint64_t a1)
{
  if (a1 >= 0x1C71C71C71C71C8) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(144 * a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ADMZone>>(unint64_t a1)
{
  if (a1 >= 0x38E38E38E38E38FLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(72 * a1);
}

void AUv3RenderAdapter::~AUv3RenderAdapter(AUv3RenderAdapter *this)
{
  unint64_t v2 = (void *)*((void *)this + 4);
  *((void *)this + 4) = 0;

  __n128 v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
}

uint64_t AUv3RenderAdapter::SetProperty(AUv3RenderAdapter *this, int a2, int a3, unsigned int a4, void *a5, unsigned int a6)
{
  if (a3 != 1) {
    return 4294956430;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)this + 2) - *((void *)this + 1)) >> 3) <= a4) {
    return 4294956419;
  }
  if (a2 == 23)
  {
    if (a6 >= 0x10)
    {
      os_unfair_recursive_lock_lock_with_options();
      int v12 = (_DWORD *)(*((void *)this + 1) + 40 * a4);
      _DWORD *v12 = 2 * (*a5 != 0);
      uint64_t v10 = v12 + 2;
      goto LABEL_13;
    }
    return 4294956445;
  }
  if (a2 != 1) {
    return 4294956417;
  }
  if (a6 < 0x10) {
    return 4294956445;
  }
  os_unfair_recursive_lock_lock_with_options();
  unsigned int v9 = (_DWORD *)(*((void *)this + 1) + 40 * a4);
  *unsigned int v9 = *a5 != 0;
  uint64_t v10 = v9 + 6;
LABEL_13:
  *uint64_t v10 = *(_OWORD *)a5;
  os_unfair_recursive_lock_unlock();
  return 0;
}

void AUv3RenderAdapter::initialize(AUv3RenderAdapter *this, AUAudioUnit *a2)
{
  unint64_t v6 = a2;
  __n128 v3 = [(AUAudioUnit *)v6 renderBlock];
  uint64_t v4 = [v3 copy];
  __n128 v5 = (void *)*((void *)this + 4);
  *((void *)this + 4) = v4;
}

void sub_19006EDC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN17AUv3RenderAdapter6RenderERjRK14AudioTimeStampjjR15AudioBufferList_block_invoke(uint64_t a1, AudioUnitRenderActionFlags *a2, const AudioTimeStamp *a3, uint64_t inNumberFrames, unint64_t a5, AudioBufferList *a6)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(*(void *)(a1 + 32) + 16) - v6) >> 3) <= a5) {
    return 4294956419;
  }
  int v7 = *(_DWORD *)(v6 + 40 * a5);
  if (v7 == 1) {
    return AudioUnitRender(*(AudioUnit *)(v6 + 40 * a5 + 24), a2, a3, *(_DWORD *)(v6 + 40 * a5 + 32), inNumberFrames, a6);
  }
  if (v7 == 2) {
    return (*(uint64_t (**)(void, AudioUnitRenderActionFlags *, const AudioTimeStamp *, unint64_t, uint64_t))(v6 + 40 * a5 + 8))(*(void *)(v6 + 40 * a5 + 16), a2, a3, a5, inNumberFrames);
  }
  return 4294956420;
}

void AUHostingServiceClient::create(void *a1, AudioComponentDescription *a2, void *a3, uint64_t a4, void *a5)
{
  int8x8_t v42 = a1;
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v43 = a5;
  AudioComponentDescription v46 = *a2;
  id v9 = v8;
  uint64_t v10 = v9;
  if (!v9 || ![v9 count])
  {
    uint64_t v13 = @"com.apple.audio.AUHostingService.arm64e";
    goto LABEL_22;
  }
  [v10 count];
  for (unint64_t i = 0; [v10 count] > i; ++i)
  {
    int v12 = [v10 objectAtIndexedSubscript:i];
    [v12 intValue];
  }
  if (getenv("CoreAudio_AUHostingService_mismatchMode"))
  {
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    id v14 = v10;
    uint64_t v15 = [v14 countByEnumeratingWithState:&v56 objects:v52 count:16];
    if (v15)
    {
      unsigned int v45 = &v40;
      int v16 = 0;
      int v17 = 0;
      uint64_t v18 = *(void *)v57;
      do
      {
        for (uint64_t j = 0; j != v15; ++j)
        {
          if (*(void *)v57 != v18) {
            objc_enumerationMutation(v14);
          }
          long long v20 = *(void **)(*((void *)&v56 + 1) + 8 * j);
          if ([v20 intValue] == 16777228) {
            int v16 = 1;
          }
          else {
            v17 |= [v20 intValue] == 16777223;
          }
        }
        uint64_t v15 = [v14 countByEnumeratingWithState:&v56 objects:v52 count:16];
      }
      while (v15);

      if (v16 & v17)
      {
        uint64_t v13 = @"com.apple.audio.AUHostingService.x86-64";
        goto LABEL_22;
      }
    }
    else
    {
    }
  }
  uint64_t v13 = @"com.apple.audio.AUHostingService.arm64e";
LABEL_22:

  std::__function::__value_func<NSXPCConnection * ()(NSUUID *)>::__value_func[abi:ne180100]((uint64_t)v50, a4);
  unsigned int v44 = v13;
  unsigned int v45 = (uint64_t *)v43;
  id v21 = *(id *)getAUHostingProcessUUID(&v46);
  getAUHostingServiceInstance(&v47, v21);
  Class isa = v47.super.isa;
  std::mutex::lock((std::mutex *)v47.super.isa);
  int v23 = *((unsigned __int8 *)isa + 64);
  long long v41 = (std::mutex *)isa;
  if (v23)
  {
    id v24 = v21;
    AUHostingServiceProcessManager::instance((AUHostingServiceProcessManager *)lock);
    os_unfair_lock_t v25 = lock[1];
    long long v56 = 0uLL;
    [v24 getUUIDBytes:&v56];
    char v54 = 16;
    *(_OWORD *)unint64_t v52 = v56;
    char v53 = 0;
    long long v26 = v25 + 6;
    long long v27 = std::__tree<std::__value_type<std::string,std::shared_ptr<AUHostingServiceInstance>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AUHostingServiceInstance>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AUHostingServiceInstance>>>>::find<std::string>((uint64_t)&v25[6], v52);
    if (&v25[8] != (os_unfair_lock_s *)v27)
    {
      long long v28 = v27;
      long long v29 = (uint64_t *)v27[1];
      if (v29)
      {
        do
        {
          uint64_t v30 = v29;
          long long v29 = (uint64_t *)*v29;
        }
        while (v29);
      }
      else
      {
        uint64_t v31 = v27;
        do
        {
          uint64_t v30 = (uint64_t *)v31[2];
          BOOL v32 = *v30 == (void)v31;
          uint64_t v31 = v30;
        }
        while (!v32);
      }
      if (*(uint64_t **)&v26->_os_unfair_lock_opaque == v27) {
        *(void *)&v26->_os_unfair_lock_opaque = v30;
      }
      unint64_t v33 = *(uint64_t **)&v25[8]._os_unfair_lock_opaque;
      --*(void *)&v25[10]._os_unfair_lock_opaque;
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v33, v28);
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<CA::ADMPackFormat>>,0>((uint64_t)(v28 + 4));
      operator delete(v28);
    }
    if (lock[0]) {
      os_unfair_lock_unlock(lock[0]);
    }

    id v21 = [MEMORY[0x1E4F29128] UUID];
    int AUHostingInstantiationPolicy = getAUHostingInstantiationPolicy();
    if (AUHostingInstantiationPolicy == 1)
    {
      AUHostingServiceProcessManager::instance((AUHostingServiceProcessManager *)v52);
      uint64_t v36 = AUHostingServiceProcessManager::uuidForDescriptor((uint64_t **)v52[1], (const AudioComponentDescription *)v46.componentManufacturer);
      objc_storeStrong((id *)v36, v21);
      if (v52[0]) {
        os_unfair_lock_unlock(v52[0]);
      }
    }
    else if (AUHostingInstantiationPolicy == 2)
    {
      AUHostingProcessUUID = getAUHostingProcessUUID(&v46);
      objc_storeStrong((id *)AUHostingProcessUUID, v21);
    }
  }
  if (!v51)
  {
    unint64_t v37 = v44;
    v52[0] = (os_unfair_lock_t)&unk_1EDFA09A8;
    v52[1] = v37;
    uint64_t v55 = v52;
    if (v51 == v50)
    {
      std::__function::__func<AUHostingServiceClient::create(AudioComponentDescription,NSString *,std::function<NSXPCConnection * ()(NSUUID *)>,NSUUID *)::$_0,std::allocator<AUHostingServiceClient::create(AudioComponentDescription,NSString *,std::function<NSXPCConnection * ()(NSUUID *)>,NSUUID *)::$_0>,NSXPCConnection * ()(NSUUID *)>::__clone((uint64_t)v52, &v56);
      (*(void (**)(os_unfair_lock_t *))&(*v55)[8]._os_unfair_lock_opaque)(v55);
      uint64_t v55 = 0;
      (*(void (**)(os_unfair_lock_t *, os_unfair_lock_t *))&(*v51)[6]._os_unfair_lock_opaque)(v51, v52);
      (*(void (**)(os_unfair_lock_t *))&(*v51)[8]._os_unfair_lock_opaque)(v51);
      unint64_t v51 = 0;
      uint64_t v55 = v52;
      (*(void (**)(long long *, void *))(v56 + 24))(&v56, v50);
      (*(void (**)(long long *))(v56 + 32))(&v56);
    }
    else
    {
      std::__function::__func<AUHostingServiceClient::create(AudioComponentDescription,NSString *,std::function<NSXPCConnection * ()(NSUUID *)>,NSUUID *)::$_0,std::allocator<AUHostingServiceClient::create(AudioComponentDescription,NSString *,std::function<NSXPCConnection * ()(NSUUID *)>,NSUUID *)::$_0>,NSXPCConnection * ()(NSUUID *)>::__clone((uint64_t)v52, v50);
      (*(void (**)(os_unfair_lock_t *))&(*v55)[8]._os_unfair_lock_opaque)(v55);
      uint64_t v55 = v51;
    }
    unint64_t v51 = (os_unfair_lock_t *)v50;
    std::__function::__value_func<NSXPCConnection * ()(NSUUID *)>::~__value_func[abi:ne180100](v52);
  }
  unint64_t v38 = (os_unfair_lock_s *)v21;
  v52[0] = v38;
  if (!v51) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v39 = (*(void (**)(os_unfair_lock_t *, os_unfair_lock_t *))&(*v51)[12]._os_unfair_lock_opaque)(v51, v52);

  if (v39) {
    operator new();
  }
  *int8x8_t v42 = 0;

  std::mutex::unlock(v41);
  if (v48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }

  std::__function::__value_func<NSXPCConnection * ()(NSUUID *)>::~__value_func[abi:ne180100](v50);
}

void sub_19006F6EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::mutex *a14, uint64_t a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,os_unfair_lock_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,os_unfair_lock_t lock)
{
  if (lock) {
    os_unfair_lock_unlock(lock);
  }

  std::mutex::unlock(a14);
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }

  std::__function::__value_func<NSXPCConnection * ()(NSUUID *)>::~__value_func[abi:ne180100](&a31);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<NSXPCConnection * ()(NSUUID *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  __n128 v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    __n128 v3 = (void *)(a1 + 24);
  }
  *__n128 v3 = 0;
  return a1;
}

{
  uint64_t v3;

  __n128 v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<NSXPCConnection * ()(NSUUID *)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

char *getAUHostingProcessUUID(const AudioComponentDescription *a1)
{
  {
    getAUHostingProcessUUID(AudioComponentDescription const&)::the_uuid = [MEMORY[0x1E4F29128] UUID];
  }
  unint64_t v2 = (char *)&getAUHostingProcessUUID(AudioComponentDescription const&)::the_uuid;
  int AUHostingInstantiationPolicy = getAUHostingInstantiationPolicy();
  if (AUHostingInstantiationPolicy)
  {
    if (AUHostingInstantiationPolicy == 1)
    {
      AUHostingServiceProcessManager::instance((AUHostingServiceProcessManager *)lock);
      unint64_t v2 = AUHostingServiceProcessManager::uuidForDescriptor((uint64_t **)lock[1], (const AudioComponentDescription *)a1->componentManufacturer);
      if (lock[0]) {
        os_unfair_lock_unlock(lock[0]);
      }
    }
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F29128] UUID];
    __n128 v5 = (void *)getAUHostingProcessUUID(AudioComponentDescription const&)::the_uuid;
    getAUHostingProcessUUID(AudioComponentDescription const&)::the_uuid = v4;
  }
  return v2;
}

void sub_19006FAD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, os_unfair_lock_t lock)
{
}

void getAUHostingServiceInstance(NSUUID *a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  AUHostingServiceProcessManager::instance((AUHostingServiceProcessManager *)lock);
  os_unfair_lock_t v4 = lock[1];
  id v5 = v3;
  long long v26 = 0uLL;
  [v5 getUUIDBytes:&v26];
  HIBYTE(v23) = 16;
  *(_OWORD *)uint64_t __p = v26;
  LOBYTE(v23) = 0;
  uint64_t v6 = v4 + 6;
  int v7 = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<AUHostingServiceInstance>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AUHostingServiceInstance>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AUHostingServiceInstance>>>>::find<std::string>((uint64_t)&v4[6], __p);
  id v8 = v7;
  if (&v4[8] == (os_unfair_lock_s *)v7)
  {
    uint64_t v10 = (uint64_t *)operator new(0x60uLL);
    v10[1] = 0;
    v10[2] = 0;
    *uint64_t v10 = (uint64_t)&unk_1EDFA22A0;
    void v10[3] = 850045863;
    size_t v11 = (objc_class *)(v10 + 3);
    v10[11] = 0;
    *((_OWORD *)v10 + 2) = 0u;
    *((_OWORD *)v10 + 3) = 0u;
    *((_OWORD *)v10 + 4) = 0u;
    *(_OWORD *)((char *)v10 + 73) = 0u;
    int v12 = *v8;
    if (*v8)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v13 = (uint64_t **)v12;
          id v14 = v12 + 4;
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, v12 + 4) & 0x80) == 0) {
            break;
          }
          int v12 = *v13;
          uint64_t v15 = v13;
          if (!*v13) {
            goto LABEL_11;
          }
        }
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v14, __p) & 0x80) == 0) {
          break;
        }
        uint64_t v15 = v13 + 1;
        int v12 = v13[1];
        if (!v12) {
          goto LABEL_11;
        }
      }
      int v16 = v13;
    }
    else
    {
      uint64_t v13 = v8;
      uint64_t v15 = v8;
LABEL_11:
      int v16 = operator new(0x48uLL);
      v24[0] = v16;
      v24[1] = v8;
      *((_OWORD *)v16 + 2) = *(_OWORD *)__p;
      uint64_t v17 = v23;
      *((void *)v16 + 7) = 0;
      *((void *)v16 + 8) = 0;
      *((void *)v16 + 6) = v17;
      char v25 = 1;
      *(void *)int v16 = 0;
      *((void *)v16 + 1) = 0;
      *((void *)v16 + 2) = v13;
      void *v15 = (uint64_t *)v16;
      uint64_t v18 = **(void ***)&v6->_os_unfair_lock_opaque;
      long long v19 = (uint64_t *)v16;
      if (v18)
      {
        *(void *)&v6->_os_unfair_lock_opaque = v18;
        long long v19 = *v15;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*v8, v19);
      ++*(void *)&v4[10]._os_unfair_lock_opaque;
      v24[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<AUHostingServiceInstance>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<AUHostingServiceInstance>>,void *>>>>::reset[abi:ne180100]((uint64_t)v24);
    }
    long long v20 = (std::__shared_weak_count *)*((void *)v16 + 8);
    *((void *)v16 + 7) = v11;
    *((void *)v16 + 8) = v10;
    if (!v20)
    {
      a1->super.Class isa = v11;
      a1[1].super.Class isa = (Class)v10;
      goto LABEL_20;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    id v9 = (objc_class *)*((void *)v16 + 7);
    uint64_t v10 = (uint64_t *)*((void *)v16 + 8);
  }
  else
  {
    id v9 = (objc_class *)v7[7];
    uint64_t v10 = v7[8];
  }
  a1->super.Class isa = v9;
  a1[1].super.Class isa = (Class)v10;
  if (v10) {
LABEL_20:
  }
    atomic_fetch_add_explicit(v10 + 1, 1uLL, memory_order_relaxed);
  if (SHIBYTE(v23) < 0) {
    operator delete(__p[0]);
  }

  if (lock[0]) {
    os_unfair_lock_unlock(lock[0]);
  }
}

void sub_19006FD4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, os_unfair_lock_t lock)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);

  if (lock) {
    os_unfair_lock_unlock(lock);
  }

  _Unwind_Resume(a1);
}

void ___ZN22AUHostingServiceClientC2EP6NSUUIDP8NSStringNSt3__18functionIFP15NSXPCConnectionS1_EEES7_S1__block_invoke(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  {
    auhs_log_category(void)::category = 0;
    *(void *)algn_1E92998C8 = 0;
    os_log_t v5 = os_log_create("com.apple.coreaudio", "AUHostingService");
    uint64_t v6 = (void *)auhs_log_category(void)::category;
    auhs_log_category(void)::category = (uint64_t)v5;
  }
  unint64_t v2 = (id) auhs_log_category(void)::category;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    int v7 = 136315394;
    id v8 = "AUHostingServiceClient.mm";
    __int16 v9 = 1024;
    int v10 = 238;
    _os_log_impl(&dword_18FEC0000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d [AUHostingService Client] connection interrupted.", (uint8_t *)&v7, 0x12u);
  }
  uint64_t v3 = *(void *)(a1 + 32);
  std::recursive_mutex::lock((std::recursive_mutex *)v3);
  uint64_t v4 = *(void *)(v3 + 88);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 48))(v4);
  }
  std::recursive_mutex::unlock((std::recursive_mutex *)v3);
}

void sub_19006FEE0(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void ___ZN22AUHostingServiceClientC2EP6NSUUIDP8NSStringNSt3__18functionIFP15NSXPCConnectionS1_EEES7_S1__block_invoke_104(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  {
    auhs_log_category(void)::category = 0;
    *(void *)algn_1E92998C8 = 0;
    os_log_t v5 = os_log_create("com.apple.coreaudio", "AUHostingService");
    uint64_t v6 = (void *)auhs_log_category(void)::category;
    auhs_log_category(void)::category = (uint64_t)v5;
  }
  unint64_t v2 = (id) auhs_log_category(void)::category;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    int v7 = 136315394;
    id v8 = "AUHostingServiceClient.mm";
    __int16 v9 = 1024;
    int v10 = 242;
    _os_log_impl(&dword_18FEC0000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d [AUHostingService Client] connection invalidated.", (uint8_t *)&v7, 0x12u);
  }
  uint64_t v3 = *(void *)(a1 + 32);
  std::recursive_mutex::lock((std::recursive_mutex *)v3);
  uint64_t v4 = *(void *)(v3 + 88);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 48))(v4);
  }
  std::recursive_mutex::unlock((std::recursive_mutex *)v3);
}

void sub_190070054(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void *caulk::xpc::sync_message<objc_object  {objcproto24AUHostingServiceProtocol}* {__strong}>::sync_message(void *a1, void *a2)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  v5[0] = &unk_1EDFA1380;
  v5[1] = a1;
  void v5[3] = v5;
  id v3 = a2;
  *a1 = v3;
  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEEC2B8ne180100ERKS8_((uint64_t)(a1 + 1), (uint64_t)v5);

  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEED2B8ne180100Ev(v5);
  a1[5] = 0;
  return a1;
}

void sub_190070120(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEED2B8ne180100Ev((uint64_t *)va);
  _Unwind_Resume(a1);
}

id caulk::xpc::message<objc_object  {objcproto24AUHostingServiceProtocol}* {__strong}>::sync_proxy(void **a1)
{
  _OWORD v7[4] = *MEMORY[0x1E4F143B8];
  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEEC2B8ne180100ERKS8_((uint64_t)v7, (uint64_t)(a1 + 1));
  unint64_t v2 = *a1;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3321888768;
  v5[2] = ___ZN5caulk3xpc7messageIU8__strongPU35objcproto24AUHostingServiceProtocol11objc_objectJEE10sync_proxyEv_block_invoke;
  void v5[3] = &__block_descriptor_64_ea8_32c50_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJEEEEEE_e17_v16__0__NSError_8l;
  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEEC2B8ne180100ERKS8_((uint64_t)v6, (uint64_t)v7);
  id v3 = [v2 synchronousRemoteObjectProxyWithErrorHandler:v5];
  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEED2B8ne180100Ev(v6);
  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEED2B8ne180100Ev(v7);
  return v3;
}

void sub_190070238(_Unwind_Exception *a1)
{
  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEED2B8ne180100Ev(v1);
  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEED2B8ne180100Ev((void *)(v2 - 56));
  _Unwind_Resume(a1);
}

id caulk::xpc::message<objc_object  {objcproto24AUHostingServiceProtocol}* {__strong}>::reply(uint64_t a1)
{
  void v5[4] = *MEMORY[0x1E4F143B8];
  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEEC2B8ne180100ERKS8_((uint64_t)v5, a1 + 8);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3321888768;
  aBos_unfair_lock_t lock[2] = ___ZN5caulk3xpc7messageIU8__strongPU35objcproto24AUHostingServiceProtocol11objc_objectJEE5replyEv_block_invoke;
  aBlock[3] = &__block_descriptor_64_ea8_32c50_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJEEEEEE_e17_v16__0__NSError_8l;
  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEEC2B8ne180100ERKS8_((uint64_t)v4, (uint64_t)v5);
  uint64_t v1 = _Block_copy(aBlock);
  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEED2B8ne180100Ev(v4);
  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEED2B8ne180100Ev(v5);
  return v1;
}

void sub_190070344(_Unwind_Exception *a1)
{
  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEED2B8ne180100Ev((void *)(v1 - 56));
  _Unwind_Resume(a1);
}

void ___ZN5caulk3xpc7messageIU8__strongPU35objcproto24AUHostingServiceProtocol11objc_objectJEE5replyEv_block_invoke(uint64_t a1, void *a2)
{
  char v2 = 0;
  _ZNKSt3__18functionIFvP7NSErrorONS_5tupleIJEEEEEclES2_S5_(a1 + 32, a2, (uint64_t)&v2);
}

void ___ZN5caulk3xpc7messageIU8__strongPU35objcproto24AUHostingServiceProtocol11objc_objectJEE10sync_proxyEv_block_invoke(uint64_t a1, void *a2)
{
  _ZNKSt3__18functionIFvP7NSErrorONS_5tupleIJEEEEEclES2_S5_(a1 + 32, a2, (uint64_t)&v2);
}

void _ZNSt3__110__function6__funcIZN5caulk3xpc12sync_messageIU8__strongPU35objcproto24AUHostingServiceProtocol11objc_objectJEEC1EP15NSXPCConnectionEUlP7NSErrorONS_5tupleIJEEEE_NS_9allocatorISG_EEFvSC_SF_EEclEOU8__strongSC_SF_(uint64_t a1, id *a2)
{
}

uint64_t _ZNKSt3__110__function6__funcIZN5caulk3xpc12sync_messageIU8__strongPU35objcproto24AUHostingServiceProtocol11objc_objectJEEC1EP15NSXPCConnectionEUlP7NSErrorONS_5tupleIJEEEE_NS_9allocatorISG_EEFvSC_SF_EE7__cloneEPNS0_6__baseISJ_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EDFA1380;
  a2[1] = v2;
  return result;
}

void *_ZNKSt3__110__function6__funcIZN5caulk3xpc12sync_messageIU8__strongPU35objcproto24AUHostingServiceProtocol11objc_objectJEEC1EP15NSXPCConnectionEUlP7NSErrorONS_5tupleIJEEEE_NS_9allocatorISG_EEFvSC_SF_EE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EDFA1380;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZN5caulk3xpc12sync_messageIU8__strongPU35objcproto24AUHostingServiceProtocol11objc_objectJEEC1EP15NSXPCConnectionEUlP7NSErrorONS_5tupleIJEEEE_NS_9allocatorISG_EEFvSC_SF_EED0Ev()
{
}

void __destroy_helper_block_ea8_32c105_ZTSKZN22AUHostingServiceClientC1EP6NSUUIDP8NSStringNSt3__18functionIFP15NSXPCConnectionS1_EEES7_S1_E3__0(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t __copy_helper_block_ea8_32c105_ZTSKZN22AUHostingServiceClientC1EP6NSUUIDP8NSStringNSt3__18functionIFP15NSXPCConnectionS1_EEES7_S1_E3__0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__shared_ptr_emplace<caulk::synchronized<AUHostingServiceClient::SharedState,std::recursive_mutex,caulk::empty_atomic_interface<AUHostingServiceClient::SharedState>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (std::recursive_mutex *)(a1 + 24);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)(a1 + 88));
  std::recursive_mutex::~recursive_mutex(v1);
}

void std::__shared_ptr_emplace<caulk::synchronized<AUHostingServiceClient::SharedState,std::recursive_mutex,caulk::empty_atomic_interface<AUHostingServiceClient::SharedState>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA29D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

void std::__shared_ptr_emplace<caulk::synchronized<AUHostingServiceClient::SharedState,std::recursive_mutex,caulk::empty_atomic_interface<AUHostingServiceClient::SharedState>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA29D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

id std::__function::__func<AUHostingServiceClient::create(AudioComponentDescription,NSString *,std::function<NSXPCConnection * ()(NSUUID *)>,NSUUID *)::$_0,std::allocator<AUHostingServiceClient::create(AudioComponentDescription,NSString *,std::function<NSXPCConnection * ()(NSUUID *)>,NSUUID *)::$_0>,NSXPCConnection * ()(NSUUID *)>::operator()(uint64_t a1, id *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v3 = *a2;
  uint64_t v4 = *(void **)(a1 + 8);
  id v5 = v3;
  id v6 = v4;
  {
    auhs_log_category(void)::category = 0;
    *(void *)algn_1E92998C8 = 0;
    os_log_t v16 = os_log_create("com.apple.coreaudio", "AUHostingService");
    uint64_t v17 = (void *)auhs_log_category(void)::category;
    auhs_log_category(void)::category = (uint64_t)v16;
  }
  int v7 = (id) auhs_log_category(void)::category;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
    *(void *)&uint8_t buf[4] = "AUHostingServiceClient.mm";
    __int16 v20 = 1024;
    int v21 = 98;
    _os_log_impl(&dword_18FEC0000, v7, OS_LOG_TYPE_INFO, "%25s:%-5d Creating new client connection", buf, 0x12u);
  }
  id v8 = (void *)[objc_alloc(MEMORY[0x1E4F29268]) initWithServiceName:v6];
  [v8 resume];
  *(void *)AudioStreamBasicDescription buf = "listener-name";
  xpc_object_t values = xpc_string_create("AUHostingServiceMain");
  xpc_object_t v9 = xpc_dictionary_create((const char *const *)buf, &values, 1uLL);
  int v10 = [v8 _xpcConnection];
  xpc_object_t v11 = xpc_connection_send_message_with_reply_sync(v10, v9);

  if (object_getClass(v11) == (Class)MEMORY[0x1E4F145A8])
  {
    id v14 = 0;
  }
  else
  {
    int v12 = xpc_dictionary_get_value(v11, "listener-endpoint");
    uint64_t v13 = objc_opt_new();
    [v13 _setEndpoint:v12];
    id v14 = (void *)[objc_alloc(MEMORY[0x1E4F29268]) initWithListenerEndpoint:v13];
  }
  return v14;
}

void sub_190070788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<AUHostingServiceClient::create(AudioComponentDescription,NSString *,std::function<NSXPCConnection * ()(NSUUID *)>,NSUUID *)::$_0,std::allocator<AUHostingServiceClient::create(AudioComponentDescription,NSString *,std::function<NSXPCConnection * ()(NSUUID *)>,NSUUID *)::$_0>,NSXPCConnection * ()(NSUUID *)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

void std::__function::__func<AUHostingServiceClient::create(AudioComponentDescription,NSString *,std::function<NSXPCConnection * ()(NSUUID *)>,NSUUID *)::$_0,std::allocator<AUHostingServiceClient::create(AudioComponentDescription,NSString *,std::function<NSXPCConnection * ()(NSUUID *)>,NSUUID *)::$_0>,NSXPCConnection * ()(NSUUID *)>::destroy(uint64_t a1)
{
}

id std::__function::__func<AUHostingServiceClient::create(AudioComponentDescription,NSString *,std::function<NSXPCConnection * ()(NSUUID *)>,NSUUID *)::$_0,std::allocator<AUHostingServiceClient::create(AudioComponentDescription,NSString *,std::function<NSXPCConnection * ()(NSUUID *)>,NSUUID *)::$_0>,NSXPCConnection * ()(NSUUID *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA09A8;
  id result = *(id *)(a1 + 8);
  a2[1] = result;
  return result;
}

void *std::__function::__func<AUHostingServiceClient::create(AudioComponentDescription,NSString *,std::function<NSXPCConnection * ()(NSUUID *)>,NSUUID *)::$_0,std::allocator<AUHostingServiceClient::create(AudioComponentDescription,NSString *,std::function<NSXPCConnection * ()(NSUUID *)>,NSUUID *)::$_0>,NSXPCConnection * ()(NSUUID *)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = &unk_1EDFA09A8;
  v2[1] = *(id *)(a1 + 8);
  return v2;
}

void std::__function::__func<AUHostingServiceClient::create(AudioComponentDescription,NSString *,std::function<NSXPCConnection * ()(NSUUID *)>,NSUUID *)::$_0,std::allocator<AUHostingServiceClient::create(AudioComponentDescription,NSString *,std::function<NSXPCConnection * ()(NSUUID *)>,NSUUID *)::$_0>,NSXPCConnection * ()(NSUUID *)>::~__func(uint64_t a1)
{
  JUMPOUT(0x192FC8940);
}

uint64_t std::__function::__func<AUHostingServiceClient::create(AudioComponentDescription,NSString *,std::function<NSXPCConnection * ()(NSUUID *)>,NSUUID *)::$_0,std::allocator<AUHostingServiceClient::create(AudioComponentDescription,NSString *,std::function<NSXPCConnection * ()(NSUUID *)>,NSUUID *)::$_0>,NSXPCConnection * ()(NSUUID *)>::~__func(uint64_t a1)
{
  return a1;
}

uint64_t getAUHostingInstantiationPolicy(void)
{
  uint64_t v0 = getenv("CoreAudio_AUHostingServiceProcessesPolicy");
  if (!v0) {
    return 2;
  }
  uint64_t v1 = v0;
  if (!strcmp(v0, "oneProcessPerHost")) {
    return 2;
  }
  if (!strcmp(v1, "oneProcessPerManufacturer")) {
    return 1;
  }
  uint64_t result = strcmp(v1, "oneProcessPerAudioUnit");
  if (result) {
    return 2;
  }
  return result;
}

void AUHostingServiceProcessManager::instance(AUHostingServiceProcessManager *this)
{
  {
    AUHostingServiceProcessManager::instance(void)::manager = 0;
    qword_1E9299390 = 0;
    qword_1E9299388 = (uint64_t)&qword_1E9299390;
    qword_1E92993B0 = 0;
    qword_1E92993A8 = 0;
    qword_1E9299398 = 0;
    unk_1E92993A0 = &qword_1E92993A8;
  }
  os_unfair_lock_lock((os_unfair_lock_t)&AUHostingServiceProcessManager::instance(void)::manager);
  *(void *)this = &AUHostingServiceProcessManager::instance(void)::manager;
  *((void *)this + 1) = &qword_1E9299388;
}

char *AUHostingServiceProcessManager::uuidForDescriptor(uint64_t **this, const AudioComponentDescription *a2)
{
  unsigned int v2 = a2;
  id v5 = (char *)(this + 1);
  uint64_t v4 = (char *)this[1];
  if (!v4) {
    goto LABEL_12;
  }
  id v6 = (char *)(this + 1);
  do
  {
    unsigned int v7 = *((_DWORD *)v4 + 8);
    BOOL v8 = v7 >= a2;
    if (v7 >= a2) {
      xpc_object_t v9 = (char **)v4;
    }
    else {
      xpc_object_t v9 = (char **)(v4 + 8);
    }
    if (v8) {
      id v6 = v4;
    }
    uint64_t v4 = *v9;
  }
  while (*v9);
  if (v6 != v5 && *((_DWORD *)v6 + 8) <= a2) {
    return v6 + 40;
  }
LABEL_12:
  uint64_t v10 = [MEMORY[0x1E4F29128] UUID];
  xpc_object_t v11 = *(uint64_t **)v5;
  int v12 = v5;
  if (*(void *)v5)
  {
    while (1)
    {
      while (1)
      {
        int v12 = v11;
        unsigned int v13 = *((_DWORD *)v11 + 8);
        if (v13 <= v2) {
          break;
        }
        xpc_object_t v11 = (uint64_t *)*v12;
        id v5 = (char *)v12;
        if (!*v12) {
          goto LABEL_19;
        }
      }
      if (v13 >= v2) {
        break;
      }
      xpc_object_t v11 = (uint64_t *)v12[1];
      if (!v11)
      {
        id v5 = (char *)(v12 + 1);
        goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    id v14 = v12;
    int v12 = operator new(0x30uLL);
    *((_DWORD *)v12 + 8) = v2;
    v12[5] = 0;
    void *v12 = 0;
    v12[1] = 0;
    _OWORD v12[2] = v14;
    *(void *)id v5 = v12;
    uint64_t v15 = (uint64_t *)**this;
    os_log_t v16 = v12;
    if (v15)
    {
      *this = v15;
      os_log_t v16 = *(uint64_t **)v5;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(this[1], v16);
    this[2] = (uint64_t *)((char *)this[2] + 1);
  }
  uint64_t v18 = (void *)v12[5];
  uint64_t v17 = v12 + 5;
  *uint64_t v17 = v10;

  return (char *)v17;
}

void *std::__tree<std::__value_type<std::string,std::shared_ptr<AUHostingServiceInstance>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AUHostingServiceInstance>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AUHostingServiceInstance>>>>::find<std::string>(uint64_t a1, void *a2)
{
  unsigned int v2 = (void *)(a1 + 8);
  id v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  id v5 = (void *)(a1 + 8);
  do
  {
    char v6 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3 + 4, a2);
    if (v6 >= 0) {
      unsigned int v7 = v3;
    }
    else {
      unsigned int v7 = v3 + 1;
    }
    if (v6 >= 0) {
      id v5 = v3;
    }
    id v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4) & 0x80) != 0)
  {
    return v2;
  }
  return v5;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<AUHostingServiceInstance>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<AUHostingServiceInstance>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<CA::ADMPackFormat>>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void std::__shared_ptr_emplace<AUHostingServiceInstance>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<AUHostingServiceInstance>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA22A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

void std::__shared_ptr_emplace<AUHostingServiceInstance>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA22A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ___ZN5caulk3xpc7messageIU8__strongPU35objcproto24AUHostingServiceProtocol11objc_objectJjEE5replyEv_block_invoke(uint64_t a1, void *a2, int a3)
{
  int v3 = a3;
  std::function<void ()(NSError *,std::tuple<unsigned int> &&)>::operator()(a1 + 32, a2, (uint64_t)&v3);
}

void ___ZN5caulk3xpc7messageIU8__strongPU35objcproto24AUHostingServiceProtocol11objc_objectJjEE10sync_proxyEv_block_invoke(uint64_t a1, void *a2)
{
  int v2 = 0;
  std::function<void ()(NSError *,std::tuple<unsigned int> &&)>::operator()(a1 + 32, a2, (uint64_t)&v2);
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto24AUHostingServiceProtocol}* {__strong},unsigned int>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<unsigned int> &&)#1},std::allocator<std::tuple<unsigned int> &>,void ()(NSError,std::tuple<unsigned int>)>::operator()(uint64_t a1, id *a2, _DWORD *a3)
{
  id v5 = *a2;
  uint64_t v6 = *(void *)(a1 + 8);
  unsigned int v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
  id v8 = v5;

  *(_DWORD *)(v6 + 48) = *a3;
}

uint64_t std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto24AUHostingServiceProtocol}* {__strong},unsigned int>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<unsigned int> &&)#1},std::allocator<std::tuple<unsigned int> &>,void ()(NSError,std::tuple<unsigned int>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EDFA13C8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto24AUHostingServiceProtocol}* {__strong},unsigned int>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<unsigned int> &&)#1},std::allocator<std::tuple<unsigned int> &>,void ()(NSError,std::tuple<unsigned int>)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EDFA13C8;
  result[1] = v3;
  return result;
}

void std::__function::__func<caulk::xpc::sync_message<objc_object  {objcproto24AUHostingServiceProtocol}* {__strong},unsigned int>::sync_message(NSXPCConnection *)::{lambda(NSError *,std::tuple<unsigned int> &&)#1},std::allocator<std::tuple<unsigned int> &>,void ()(NSError,std::tuple<unsigned int>)>::~__func()
{
}

void AUHostingServiceClient::~AUHostingServiceClient(AUHostingServiceClient *this)
{
  BOOL v21[4] = *MEMORY[0x1E4F143B8];
  getAUHostingServiceInstance((NSUUID *)&v10, *(void **)this);
  uint64_t v2 = v10;
  std::mutex::lock(v10);
  uint64_t v3 = (void *)*((void *)this + 5);
  aBlocuint64_t k = &unk_1EDFA13C8;
  uint64_t v17 = (uint64_t)&v12;
  p_aBlocuint64_t k = &aBlock;
  id v4 = v3;
  id v12 = v4;
  std::__function::__value_func<void ()(NSError *,std::tuple<unsigned int> &&)>::__value_func[abi:ne180100]((uint64_t)v13, (uint64_t)&aBlock);

  std::__function::__value_func<void ()(NSError *,std::tuple<unsigned int> &&)>::~__value_func[abi:ne180100](&aBlock);
  id v14 = 0;
  int v15 = 0;
  std::__function::__value_func<void ()(NSError *,std::tuple<unsigned int> &&)>::__value_func[abi:ne180100]((uint64_t)v21, (uint64_t)v13);
  id v5 = v12;
  aBlocuint64_t k = (void *)MEMORY[0x1E4F143A8];
  uint64_t v17 = 3321888768;
  uint64_t v18 = ___ZN5caulk3xpc7messageIU8__strongPU35objcproto24AUHostingServiceProtocol11objc_objectJjEE10sync_proxyEv_block_invoke;
  p_aBlocuint64_t k = (void **)&__block_descriptor_64_ea8_32c51_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJjEEEEEE_e17_v16__0__NSError_8l;
  std::__function::__value_func<void ()(NSError *,std::tuple<unsigned int> &&)>::__value_func[abi:ne180100]((uint64_t)v20, (uint64_t)v21);
  uint64_t v6 = [v5 synchronousRemoteObjectProxyWithErrorHandler:&aBlock];
  std::__function::__value_func<void ()(NSError *,std::tuple<unsigned int> &&)>::~__value_func[abi:ne180100](v20);
  unsigned int v7 = std::__function::__value_func<void ()(NSError *,std::tuple<unsigned int> &&)>::~__value_func[abi:ne180100](v21);
  std::__function::__value_func<void ()(NSError *,std::tuple<unsigned int> &&)>::__value_func[abi:ne180100]((uint64_t)v7, (uint64_t)v13);
  aBlocuint64_t k = (void *)MEMORY[0x1E4F143A8];
  uint64_t v17 = 3321888768;
  uint64_t v18 = ___ZN5caulk3xpc7messageIU8__strongPU35objcproto24AUHostingServiceProtocol11objc_objectJjEE5replyEv_block_invoke;
  p_aBlocuint64_t k = (void **)&__block_descriptor_64_ea8_32c51_ZTSNSt3__18functionIFvP7NSErrorONS_5tupleIJjEEEEEE_e20_v20__0__NSError_8I16l;
  std::__function::__value_func<void ()(NSError *,std::tuple<unsigned int> &&)>::__value_func[abi:ne180100]((uint64_t)v20, (uint64_t)v21);
  id v8 = _Block_copy(&aBlock);
  std::__function::__value_func<void ()(NSError *,std::tuple<unsigned int> &&)>::~__value_func[abi:ne180100](v20);
  std::__function::__value_func<void ()(NSError *,std::tuple<unsigned int> &&)>::~__value_func[abi:ne180100](v21);
  [v6 closeHost:v8];

  [*((id *)this + 5) invalidate];
  LOBYTE(v2[1].__m_.__sig) = v15 == 0;

  std::__function::__value_func<void ()(NSError *,std::tuple<unsigned int> &&)>::~__value_func[abi:ne180100](v13);
  std::mutex::unlock(v2);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }

  xpc_object_t v9 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }

  std::__function::__value_func<NSXPCConnection * ()(NSUUID *)>::~__value_func[abi:ne180100]((void *)this + 1);
}

void sub_1900710AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2)
  {
    std::__function::__value_func<void ()(NSError *,std::tuple<unsigned int> &&)>::~__value_func[abi:ne180100]((void *)(v18 - 120));
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void AUHostingServiceClient::setInvalidationHandler(std::recursive_mutex *a1, uint64_t a2)
{
  id v4 = a1 + 1;
  std::recursive_mutex::lock(a1);
  std::__function::__value_func<void ()(void)>::operator=[abi:ne180100](v4, a2);
  if (a1)
  {
    std::recursive_mutex::unlock(a1);
  }
}

BOOL AUHostingServiceClient::loadRemotely(AUHostingServiceClient *this, AudioComponentDescription *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v4 = objc_opt_new();
  CAFormatter::CAFormatter((CAFormatter *)&v17, a2);
  {
    caulk::log_category::log_category((caulk::log_category *)&auhs_log_category(void)::category, "com.apple.coreaudio", "AUHostingService");
  }
  id v5 = (id) auhs_log_category(void)::category;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
    *(void *)&uint8_t buf[4] = "AUHostingServiceClient.mm";
    __int16 v25 = 1024;
    int v26 = 304;
    __int16 v27 = 2080;
    long long v28 = v17;
    _os_log_impl(&dword_18FEC0000, v5, OS_LOG_TYPE_INFO, "%25s:%-5d Requesting to load Audio Unit remotely: %s", buf, 0x1Cu);
  }
  uint64_t v6 = (void *)*((void *)this + 9);
  if (v6)
  {
    unsigned int v7 = [v6 UUIDString];
    [v4 setObject:v7 forKeyedSubscript:@"audioUnitInstanceUUID"];
  }
  caulk::xpc::sync_message<objc_object  {objcproto24AUHostingServiceProtocol}* {__strong}>::sync_message(buf, *((void **)this + 5));
  id v8 = caulk::xpc::message<objc_object  {objcproto24AUHostingServiceProtocol}* {__strong}>::sync_proxy((void **)buf);
  long long v15 = *(_OWORD *)&a2->componentType;
  componentFlagsMasuint64_t k = a2->componentFlagsMask;
  xpc_object_t v9 = caulk::xpc::message<objc_object  {objcproto24AUHostingServiceProtocol}* {__strong}>::reply((uint64_t)buf);
  [v8 loadAudioUnitInRemoteHost:&v15 config:v4 reply:v9];

  id v10 = v29;
  if (v29)
  {
    {
      caulk::log_category::log_category((caulk::log_category *)&auhs_log_category(void)::category, "com.apple.coreaudio", "AUHostingService");
    }
    xpc_object_t v11 = (id) auhs_log_category(void)::category;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      id v12 = v29;
      *(_DWORD *)uint64_t v18 = 136315650;
      long long v19 = "AUHostingServiceClient.mm";
      __int16 v20 = 1024;
      int v21 = 315;
      __int16 v22 = 2112;
      id v23 = v12;
      _os_log_impl(&dword_18FEC0000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d Error while loading Audio Unit in remote host: %@", v18, 0x1Cu);
    }
    id v13 = v29;
  }
  else
  {
    id v13 = 0;
  }

  _ZNSt3__110__function12__value_funcIFvP7NSErrorONS_5tupleIJEEEEED2B8ne180100Ev(&buf[8]);
  if (v17) {
    free(v17);
  }

  return v10 == 0;
}

void sub_190071468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a12) {
    free(a12);
  }

  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<APComponent_NSExtension *,std::shared_ptr<APComponent_NSExtension>::__shared_ptr_default_delete<APComponent_NSExtension,APComponent_NSExtension>,std::allocator<APComponent_NSExtension>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

void std::__shared_ptr_pointer<APComponent_NSExtension *,std::shared_ptr<APComponent_NSExtension>::__shared_ptr_default_delete<APComponent_NSExtension,APComponent_NSExtension>,std::allocator<APComponent_NSExtension>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

uint64_t *AudioComponentVector::add(uint64_t *result, long long *a2)
{
  uint64_t v3 = result;
  id v4 = result + 2;
  unint64_t v5 = result[2];
  uint64_t v6 = (void *)result[1];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v9 = ((uint64_t)v6 - *result) >> 4;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - *result;
    if (v11 >> 3 > v10) {
      unint64_t v10 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    v17[4] = v4;
    id v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v12);
    id v14 = &v13[16 * v9];
    v17[0] = v13;
    v17[1] = v14;
    v17[3] = &v13[16 * v15];
    long long v16 = *a2;
    *(_OWORD *)id v14 = *a2;
    if (*((void *)&v16 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    void v17[2] = v14 + 16;
    std::vector<std::shared_ptr<APComponent>>::__swap_out_circular_buffer(v3, v17);
    id v8 = (void *)v3[1];
    uint64_t result = (uint64_t *)std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)v17);
  }
  else
  {
    void *v6 = *(void *)a2;
    uint64_t v7 = *((void *)a2 + 1);
    v6[1] = v7;
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    id v8 = v6 + 2;
  }
  v3[1] = (uint64_t)v8;
  *((unsigned char *)v3 + 24) = 0;
  return result;
}

void AudioComponentVector::append(AudioComponentVector *this, const AudioComponentVector *a2, const AudioComponentVector *a3)
{
  if ((char *)a3 - (char *)a2 >= 1)
  {
    id v4 = a2;
    end = (void **)this->__end_;
    uint64_t v6 = ((char *)a3 - (char *)a2) >> 4;
    value = this->__end_cap_.__value_;
    if (v6 <= (value - (unsigned char *)end) >> 4)
    {
      if (v6 <= 0)
      {
        long long v16 = (const AudioComponentVector *)((char *)a2 + 16 * v6);
        std::vector<std::shared_ptr<APComponent>>::__move_range((uint64_t)this, (uint64_t)this->__end_, (unint64_t)this->__end_, (char *)&end[2 * v6]);
        for (; v4 != v16; end += 2)
        {
          std::vector<char>::pointer begin = v4->__begin_;
          __int16 v20 = (atomic_ullong *)v4->__end_;
          if (v20) {
            atomic_fetch_add_explicit(v20 + 1, 1uLL, memory_order_relaxed);
          }
          __int16 v22 = (std::__shared_weak_count *)end[1];
          *end = begin;
          end[1] = v20;
          if (v22) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v22);
          }
          id v4 = (const AudioComponentVector *)((char *)v4 + 16);
        }
      }
      else
      {
        long long v28 = this->__end_;
        id v29 = end;
        p_end_cap = &this->__end_cap_;
        id v24 = &v28;
        __int16 v25 = &v29;
        if (a2 == a3)
        {
          id v13 = end;
        }
        else
        {
          id v13 = end;
          id v14 = a2;
          do
          {
            *id v13 = v14->__begin_;
            uint64_t v15 = (atomic_ullong *)v14->__end_;
            v13[1] = v15;
            if (v15) {
              atomic_fetch_add_explicit(v15 + 1, 1uLL, memory_order_relaxed);
            }
            v13 += 2;
            id v14 = (const AudioComponentVector *)((char *)v14 + 16);
          }
          while (v14 != a3);
          id v29 = v13;
        }
        LOBYTE(v26) = 1;
        std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<APComponent>>,std::shared_ptr<APComponent>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&p_end_cap);
        this->__end_ = v13;
      }
    }
    else
    {
      uint64_t v8 = ((char *)end - (char *)this->__begin_) >> 4;
      if ((unint64_t)(v8 + v6) >> 60) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = value - (char *)this->__begin_;
      uint64_t v10 = v9 >> 3;
      if (v9 >> 3 <= (unint64_t)(v8 + v6)) {
        uint64_t v10 = v8 + v6;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v11 = v10;
      }
      __int16 v27 = &this->__end_cap_;
      if (v11) {
        unint64_t v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v11);
      }
      else {
        uint64_t v12 = 0;
      }
      uint64_t v17 = (void **)(v11 + 16 * v8);
      p_end_cap = (__compressed_pair<std::shared_ptr<APComponent> *, std::allocator<std::shared_ptr<APComponent>>> *)v11;
      id v24 = v17;
      unint64_t v26 = v11 + 16 * v12;
      uint64_t v18 = &v17[2 * v6];
      do
      {
        *uint64_t v17 = v4->__begin_;
        long long v19 = (atomic_ullong *)v4->__end_;
        v17[1] = v19;
        if (v19) {
          atomic_fetch_add_explicit(v19 + 1, 1uLL, memory_order_relaxed);
        }
        v17 += 2;
        id v4 = (const AudioComponentVector *)((char *)v4 + 16);
      }
      while (v17 != v18);
      __int16 v25 = (void ***)v18;
      std::vector<std::shared_ptr<APComponent>>::__swap_out_circular_buffer((uint64_t *)this, &p_end_cap, end);
      std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)&p_end_cap);
    }
  }
  this->mSorted = 0;
}

void *AudioComponentVector::remove(AudioComponentVector *this, APComponent *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = a2;
  v11[0] = &unk_1EDFA0918;
  v11[1] = &v10;
  uint64_t v12 = v11;
  std::vector<char>::pointer begin = (char *)this->__begin_;
  end = (char *)this->__end_;
  if (this->__begin_ == end)
  {
LABEL_17:
    unint64_t v5 = begin;
    goto LABEL_18;
  }
  unint64_t v5 = (char *)this->__end_;
  while (1)
  {
    if (!v12) {
      goto LABEL_19;
    }
    if ((*(uint64_t (**)(void *, char *))(*v12 + 48))(v12, begin)) {
      break;
    }
    begin += 16;
    if (begin == end) {
      goto LABEL_18;
    }
  }
  if (begin != end)
  {
    uint64_t v6 = begin + 16;
    if (begin + 16 != end)
    {
      unint64_t v5 = begin;
      while (v12)
      {
        if (((*(uint64_t (**)(void *, char *))(*v12 + 48))(v12, v6) & 1) == 0)
        {
          long long v7 = *(_OWORD *)v6;
          *(void *)uint64_t v6 = 0;
          *((void *)v6 + 1) = 0;
          uint64_t v8 = (std::__shared_weak_count *)*((void *)v5 + 1);
          *(_OWORD *)unint64_t v5 = v7;
          if (v8) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v8);
          }
          v5 += 16;
        }
        v6 += 16;
        if (v6 == end) {
          goto LABEL_18;
        }
      }
LABEL_19:
      std::__throw_bad_function_call[abi:ne180100]();
    }
    goto LABEL_17;
  }
LABEL_18:
  std::vector<std::shared_ptr<APComponent>>::erase((uint64_t)this, (uint64_t)v5, (uint64_t)this->__end_);
  return std::__function::__value_func<BOOL ()(std::shared_ptr<APComponent> &)>::~__value_func[abi:ne180100](v11);
}

void sub_1900719D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(std::shared_ptr<APComponent> &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<BOOL ()(std::shared_ptr<APComponent> &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

BOOL std::__function::__func<AudioComponentVector::remove(APComponent *)::$_0,std::allocator<AudioComponentVector::remove(APComponent *)::$_0>,BOOL ()(std::shared_ptr<APComponent> &)>::operator()(uint64_t a1, void *a2)
{
  return *a2 == **(void **)(a1 + 8);
}

uint64_t std::__function::__func<AudioComponentVector::remove(APComponent *)::$_0,std::allocator<AudioComponentVector::remove(APComponent *)::$_0>,BOOL ()(std::shared_ptr<APComponent> &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EDFA0918;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AudioComponentVector::remove(APComponent *)::$_0,std::allocator<AudioComponentVector::remove(APComponent *)::$_0>,BOOL ()(std::shared_ptr<APComponent> &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EDFA0918;
  result[1] = v3;
  return result;
}

void std::__function::__func<AudioComponentVector::remove(APComponent *)::$_0,std::allocator<AudioComponentVector::remove(APComponent *)::$_0>,BOOL ()(std::shared_ptr<APComponent> &)>::~__func()
{
}

uint64_t std::__function::__func<AudioComponentVector::no_extensions_except(AudioComponentDescription &)::$_0,std::allocator<AudioComponentVector::no_extensions_except(AudioComponentDescription &)::$_0>,BOOL ()(APComponent &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EDFA08D0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AudioComponentVector::no_extensions_except(AudioComponentDescription &)::$_0,std::allocator<AudioComponentVector::no_extensions_except(AudioComponentDescription &)::$_0>,BOOL ()(APComponent &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EDFA08D0;
  result[1] = v3;
  return result;
}

void std::__function::__func<AudioComponentVector::no_extensions_except(AudioComponentDescription &)::$_0,std::allocator<AudioComponentVector::no_extensions_except(AudioComponentDescription &)::$_0>,BOOL ()(APComponent &)>::~__func()
{
}

void std::__introsort<std::_ClassicAlgPolicy,AudioComponentVector::sort(void)::$_0 &,std::shared_ptr<APComponent> *,false>(uint64_t *a1, uint64_t *a2, uint64_t a3, char a4)
{
void sub_1900724E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11)
{
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sort(void)::$_0 &,std::shared_ptr<APComponent> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  int v6 = APComponent::Key::sortCompare((_DWORD *)(*a2 + 36), (_DWORD *)(*a1 + 36), 0);
  uint64_t result = APComponent::Key::sortCompare((_DWORD *)(*a3 + 36), (_DWORD *)(*a2 + 36), 0);
  if (v6 < 0)
  {
    uint64_t v13 = *a1;
    if ((result & 0x80000000) != 0)
    {
      *a1 = *a3;
      *a3 = v13;
      uint64_t v16 = a3 + 1;
      uint64_t v12 = a1 + 1;
    }
    else
    {
      *a1 = *a2;
      *a2 = v13;
      uint64_t v14 = a1[1];
      a1[1] = a2[1];
      a2[1] = v14;
      uint64_t result = APComponent::Key::sortCompare((_DWORD *)(*a3 + 36), (_DWORD *)(*a2 + 36), 0);
      if ((result & 0x80000000) == 0) {
        return result;
      }
      uint64_t v15 = *a2;
      *a2 = *a3;
      *a3 = v15;
      uint64_t v16 = a3 + 1;
      uint64_t v12 = a2 + 1;
    }
    uint64_t v10 = v16;
    goto LABEL_10;
  }
  if ((result & 0x80000000) != 0)
  {
    uint64_t v8 = *a2;
    *a2 = *a3;
    *a3 = v8;
    uint64_t v10 = a2 + 1;
    uint64_t v9 = a2[1];
    a2[1] = a3[1];
    a3[1] = v9;
    uint64_t result = APComponent::Key::sortCompare((_DWORD *)(*a2 + 36), (_DWORD *)(*a1 + 36), 0);
    if ((result & 0x80000000) != 0)
    {
      uint64_t v11 = *a1;
      *a1 = *a2;
      uint64_t v12 = a1 + 1;
      *a2 = v11;
LABEL_10:
      uint64_t v17 = *v12;
      uint64_t *v12 = *v10;
      *uint64_t v10 = v17;
    }
  }
  return result;
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sort(void)::$_0 &,std::shared_ptr<APComponent> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sort(void)::$_0 &,std::shared_ptr<APComponent> *>(a1, a2, a3);
  uint64_t result = APComponent::Key::sortCompare((_DWORD *)(*a4 + 36), (_DWORD *)(*a3 + 36), 0);
  if ((result & 0x80000000) != 0)
  {
    uint64_t v9 = *a3;
    *a3 = *a4;
    *a4 = v9;
    uint64_t v10 = a3[1];
    a3[1] = a4[1];
    a4[1] = v10;
    uint64_t result = APComponent::Key::sortCompare((_DWORD *)(*a3 + 36), (_DWORD *)(*a2 + 36), 0);
    if ((result & 0x80000000) != 0)
    {
      uint64_t v11 = *a2;
      *a2 = *a3;
      *a3 = v11;
      uint64_t v12 = a2[1];
      a2[1] = a3[1];
      a3[1] = v12;
      uint64_t result = APComponent::Key::sortCompare((_DWORD *)(*a2 + 36), (_DWORD *)(*a1 + 36), 0);
      if ((result & 0x80000000) != 0)
      {
        uint64_t v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
        uint64_t v14 = a1[1];
        a1[1] = a2[1];
        a2[1] = v14;
      }
    }
  }
  return result;
}

uint64_t std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sort(void)::$_0 &,std::shared_ptr<APComponent> *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sort(void)::$_0 &,std::shared_ptr<APComponent> *>(a1, a2, a3, a4);
  uint64_t result = APComponent::Key::sortCompare((_DWORD *)(*a5 + 36), (_DWORD *)(*a4 + 36), 0);
  if ((result & 0x80000000) != 0)
  {
    uint64_t v11 = *a4;
    *a4 = *a5;
    *a5 = v11;
    uint64_t v12 = a4[1];
    a4[1] = a5[1];
    a5[1] = v12;
    uint64_t result = APComponent::Key::sortCompare((_DWORD *)(*a4 + 36), (_DWORD *)(*a3 + 36), 0);
    if ((result & 0x80000000) != 0)
    {
      uint64_t v13 = *a3;
      *a3 = *a4;
      *a4 = v13;
      uint64_t v14 = a3[1];
      a3[1] = a4[1];
      a4[1] = v14;
      uint64_t result = APComponent::Key::sortCompare((_DWORD *)(*a3 + 36), (_DWORD *)(*a2 + 36), 0);
      if ((result & 0x80000000) != 0)
      {
        uint64_t v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        uint64_t v16 = a2[1];
        a2[1] = a3[1];
        a3[1] = v16;
        uint64_t result = APComponent::Key::sortCompare((_DWORD *)(*a2 + 36), (_DWORD *)(*a1 + 36), 0);
        if ((result & 0x80000000) != 0)
        {
          uint64_t v17 = *a1;
          *a1 = *a2;
          *a2 = v17;
          uint64_t v18 = a1[1];
          a1[1] = a2[1];
          a2[1] = v18;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sort(void)::$_0 &,std::shared_ptr<APComponent> *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((APComponent::Key::sortCompare((_DWORD *)(*(a2 - 2) + 36), (_DWORD *)(*a1 + 36), 0) & 0x80000000) != 0)
      {
        uint64_t v6 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v6;
        uint64_t v7 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sort(void)::$_0 &,std::shared_ptr<APComponent> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sort(void)::$_0 &,std::shared_ptr<APComponent> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sort(void)::$_0 &,std::shared_ptr<APComponent> *,0>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      uint64_t v8 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sort(void)::$_0 &,std::shared_ptr<APComponent> *>(a1, a1 + 2, a1 + 4);
      uint64_t v9 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    if ((APComponent::Key::sortCompare((_DWORD *)(*v9 + 36), (_DWORD *)(*v8 + 36), 0) & 0x80000000) != 0)
    {
      uint64_t v13 = *v9;
      uint64_t v12 = v9[1];
      *uint64_t v9 = 0;
      v9[1] = 0;
      uint64_t v14 = v10;
      while (1)
      {
        uint64_t v15 = (char *)a1 + v14;
        long long v16 = *(_OWORD *)((char *)a1 + v14 + 32);
        *((void *)v15 + 4) = 0;
        *((void *)v15 + 5) = 0;
        uint64_t v17 = *(std::__shared_weak_count **)((char *)a1 + v14 + 56);
        *((_OWORD *)v15 + 3) = v16;
        if (v17) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v17);
        }
        if (v14 == -32) {
          break;
        }
        int v18 = APComponent::Key::sortCompare((_DWORD *)(v13 + 36), (_DWORD *)(*(uint64_t *)((char *)a1 + v14 + 16) + 36), 0);
        v14 -= 16;
        if ((v18 & 0x80000000) == 0)
        {
          uint64_t v19 = (uint64_t *)((char *)a1 + v14 + 48);
          goto LABEL_14;
        }
      }
      uint64_t v19 = a1;
LABEL_14:
      __int16 v20 = (std::__shared_weak_count *)v19[1];
      *uint64_t v19 = v13;
      v19[1] = v12;
      if (v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    uint64_t v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

void sub_190072AC0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sorted_copy_disregarding_version(void)::$_0 &,std::shared_ptr<APComponent> *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sorted_copy_disregarding_version(void)::$_0 &,std::shared_ptr<APComponent> *>(a1, a2, a3, a4);
  uint64_t result = APComponent::Key::sortCompare((_DWORD *)(*a5 + 36), (_DWORD *)(*a4 + 36), 1);
  if ((result & 0x80000000) != 0)
  {
    uint64_t v11 = *a4;
    *a4 = *a5;
    *a5 = v11;
    uint64_t v12 = a4[1];
    a4[1] = a5[1];
    a5[1] = v12;
    uint64_t result = APComponent::Key::sortCompare((_DWORD *)(*a4 + 36), (_DWORD *)(*a3 + 36), 1);
    if ((result & 0x80000000) != 0)
    {
      uint64_t v13 = *a3;
      *a3 = *a4;
      *a4 = v13;
      uint64_t v14 = a3[1];
      a3[1] = a4[1];
      a4[1] = v14;
      uint64_t result = APComponent::Key::sortCompare((_DWORD *)(*a3 + 36), (_DWORD *)(*a2 + 36), 1);
      if ((result & 0x80000000) != 0)
      {
        uint64_t v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        uint64_t v16 = a2[1];
        a2[1] = a3[1];
        a3[1] = v16;
        uint64_t result = APComponent::Key::sortCompare((_DWORD *)(*a2 + 36), (_DWORD *)(*a1 + 36), 1);
        if ((result & 0x80000000) != 0)
        {
          uint64_t v17 = *a1;
          *a1 = *a2;
          *a2 = v17;
          uint64_t v18 = a1[1];
          a1[1] = a2[1];
          a2[1] = v18;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sorted_copy_disregarding_version(void)::$_0 &,std::shared_ptr<APComponent> *>(uint64_t *a1, char *a2)
{
  BOOL v4 = 1;
  switch((a2 - (char *)a1) >> 4)
  {
    case 0:
    case 1:
      return v4;
    case 2:
      if ((APComponent::Key::sortCompare((_DWORD *)(*((void *)a2 - 2) + 36), (_DWORD *)(*a1 + 36), 1) & 0x80000000) != 0)
      {
        uint64_t v5 = *a1;
        *a1 = *((void *)a2 - 2);
        *((void *)a2 - 2) = v5;
        uint64_t v6 = a1[1];
        a1[1] = *((void *)a2 - 1);
        *((void *)a2 - 1) = v6;
      }
      break;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sorted_copy_disregarding_version(void)::$_0 &,std::shared_ptr<APComponent> *>(a1, a1 + 2, (uint64_t *)a2 - 2);
      break;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sorted_copy_disregarding_version(void)::$_0 &,std::shared_ptr<APComponent> *>(a1, a1 + 2, a1 + 4, (uint64_t *)a2 - 2);
      break;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sorted_copy_disregarding_version(void)::$_0 &,std::shared_ptr<APComponent> *,0>(a1, a1 + 2, a1 + 4, a1 + 6, (uint64_t *)a2 - 2);
      break;
    default:
      uint64_t v7 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,AudioComponentVector::sorted_copy_disregarding_version(void)::$_0 &,std::shared_ptr<APComponent> *>(a1, a1 + 2, a1 + 4);
      uint64_t v8 = a1 + 6;
      if (a1 + 6 == (uint64_t *)a2)
      {
LABEL_18:
        BOOL v4 = 1;
      }
      else
      {
        uint64_t v9 = 0;
        int v10 = 0;
        while (1)
        {
          if ((APComponent::Key::sortCompare((_DWORD *)(*v8 + 36), (_DWORD *)(*v7 + 36), 1) & 0x80000000) != 0)
          {
            uint64_t v12 = *v8;
            uint64_t v11 = v8[1];
            uint64_t *v8 = 0;
            v8[1] = 0;
            uint64_t v13 = v9;
            while (1)
            {
              uint64_t v14 = (char *)a1 + v13;
              long long v15 = *(_OWORD *)((char *)a1 + v13 + 32);
              *((void *)v14 + 4) = 0;
              *((void *)v14 + 5) = 0;
              uint64_t v16 = *(std::__shared_weak_count **)((char *)a1 + v13 + 56);
              *((_OWORD *)v14 + 3) = v15;
              if (v16) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v16);
              }
              if (v13 == -32) {
                break;
              }
              int v17 = APComponent::Key::sortCompare((_DWORD *)(v12 + 36), (_DWORD *)(*(uint64_t *)((char *)a1 + v13 + 16) + 36), 1);
              v13 -= 16;
              if ((v17 & 0x80000000) == 0)
              {
                uint64_t v18 = (uint64_t *)((char *)a1 + v13 + 48);
                goto LABEL_14;
              }
            }
            uint64_t v18 = a1;
LABEL_14:
            uint64_t v19 = (std::__shared_weak_count *)v18[1];
            *uint64_t v18 = v12;
            v18[1] = v11;
            if (v19) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v19);
            }
            if (++v10 == 8) {
              break;
            }
          }
          uint64_t v7 = v8;
          v9 += 16;
          v8 += 2;
          if (v8 == (uint64_t *)a2) {
            goto LABEL_18;
          }
        }
        BOOL v4 = v8 + 2 == (uint64_t *)a2;
      }
      break;
  }
  return v4;
}

void sub_190072E30(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

id dictionaryFromComponentDescription(const AudioComponentDescription *a1, uint64_t a2)
{
  v11[4] = *MEMORY[0x1E4F143B8];
  v10[0] = @"type";
  BOOL v4 = [MEMORY[0x1E4F28ED0] numberWithUnsignedInt:a1->componentType];
  v11[0] = v4;
  v10[1] = @"subtype";
  uint64_t v5 = [MEMORY[0x1E4F28ED0] numberWithUnsignedInt:a1->componentSubType];
  v11[1] = v5;
  v10[2] = @"manufacturer";
  uint64_t v6 = [MEMORY[0x1E4F28ED0] numberWithUnsignedInt:a1->componentManufacturer];
  v11[2] = v6;
  void v10[3] = @"version";
  uint64_t v7 = [MEMORY[0x1E4F28ED0] numberWithUnsignedInt:a2];
  void v11[3] = v7;
  uint64_t v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v11 forKeys:v10 count:4];

  return v8;
}

void sub_190072FA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void dictionaryToComponentDescription(NSDictionary *a1, AudioComponentDescription *a2, unsigned int *a3)
{
  uint64_t v9 = a1;
  uint64_t v5 = [(NSDictionary *)v9 objectForKeyedSubscript:@"type"];
  a2->componentType = [v5 unsignedIntValue];

  uint64_t v6 = [(NSDictionary *)v9 objectForKeyedSubscript:@"subtype"];
  a2->componentSubType = [v6 unsignedIntValue];

  uint64_t v7 = [(NSDictionary *)v9 objectForKeyedSubscript:@"manufacturer"];
  a2->componentManufacturer = [v7 unsignedIntValue];

  a2->componentFlags = 0;
  a2->componentFlagsMasuint64_t k = 0;
  uint64_t v8 = [(NSDictionary *)v9 objectForKeyedSubscript:@"version"];
  *a3 = [v8 unsignedIntValue];
}

void sub_1900730BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t MP4BoxParser_SampleGroupDescription::Init(MP4BoxParser **this)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = MP4BoxParser_Full::Initialize((MP4BoxParser_Full *)this);
  if (v2) {
    return v2;
  }
  if (*((_DWORD *)this + 5) != 1936158820) {
    return 4294967294;
  }
  uint64_t v3 = (*((unsigned int (**)(MP4BoxParser **))*this + 3))(this);
  int v4 = *((unsigned __int8 *)this + 56);
  uint64_t v5 = 16;
  if (v4 == 1) {
    uint64_t v5 = 12;
  }
  if (*((unsigned char *)this + 56)) {
    unint64_t v6 = v5;
  }
  else {
    unint64_t v6 = 8;
  }
  unint64_t v7 = (unint64_t)this[3];
  unsigned int v8 = (*((uint64_t (**)(MP4BoxParser **))*this + 3))(this);
  unint64_t v9 = (unint64_t)this[3];
  if (v7 <= v8 || v9 < v6)
  {
    if (v9 > (*((unsigned int (**)(MP4BoxParser **))*this + 3))(this) && (unint64_t)this[3] >= 4)
    {
      uint64_t DataSourceBytes = MP4BoxParser::ReadDataSourceBytes(this[1], v3, 4uLL, v29);
      if (DataSourceBytes)
      {
        uint64_t v2 = DataSourceBytes;
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          int v25 = 136315394;
          uint64_t v26 = "MP4_BoxParser_SampleGroupDescription.cpp";
          __int16 v27 = 1024;
          int v28 = 165;
          uint64_t v13 = MEMORY[0x1E4F14500];
          uint64_t v14 = "%25s:%-5d  couldn't read grouping type";
LABEL_21:
          _os_log_impl(&dword_18FEC0000, v13, OS_LOG_TYPE_ERROR, v14, (uint8_t *)&v25, 0x12u);
          return v2;
        }
        return v2;
      }
      unsigned int v11 = v29[0];
    }
    *((_DWORD *)this + 16) = bswap32(v11);
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
LABEL_40:
      uint64_t v2 = 0;
      *((unsigned char *)this + 60) = 0;
      return v2;
    }
    int v25 = 136315394;
    uint64_t v26 = "MP4_BoxParser_SampleGroupDescription.cpp";
    __int16 v27 = 1024;
    int v28 = 169;
    uint64_t v22 = MEMORY[0x1E4F14500];
    id v23 = "%25s:%-5d  'sgpd' box is too small for its basic contents";
    goto LABEL_39;
  }
  uint64_t v15 = MP4BoxParser::ReadDataSourceBytes(this[1], v3, v6, v29);
  if (!v15)
  {
    unsigned int v16 = bswap32(v29[0]);
    *((_DWORD *)this + 16) = v16;
    if (v4)
    {
      unsigned int v17 = bswap32(v29[1]);
      *((_DWORD *)this + 17) = v17;
      if (v4 == 1)
      {
        uint64_t v18 = 2;
      }
      else
      {
        *((unsigned char *)this + 72) = 1;
        *((_DWORD *)this + 19) = bswap32(v29[2]);
        uint64_t v18 = 3;
      }
    }
    else
    {
      if (v16 != 1886547820 && v16 != 1919904876)
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_40;
        }
        int v25 = 136315394;
        uint64_t v26 = "MP4_BoxParser_SampleGroupDescription.cpp";
        __int16 v27 = 1024;
        int v28 = 183;
        uint64_t v22 = MEMORY[0x1E4F14500];
        id v23 = "%25s:%-5d  'sgpd' box has sample group entries of unknown size";
        goto LABEL_39;
      }
      unsigned int v17 = 2;
      *((_DWORD *)this + 17) = 2;
      uint64_t v18 = 1;
    }
    unsigned int v19 = bswap32(v29[v18]);
    *((_DWORD *)this + 20) = v19;
    this[11] = (MP4BoxParser *)v6;
    unint64_t v20 = (unint64_t)this[3];
    if (v20 > (*((unsigned int (**)(MP4BoxParser **))*this + 3))(this))
    {
      unsigned int v21 = v17 ? v17 : 4;
      if ((unint64_t)this[3] >= v6 + v21 * (unint64_t)v19)
      {
        uint64_t v2 = 0;
        *((unsigned char *)this + 60) = 1;
        return v2;
      }
    }
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_40;
    }
    int v25 = 136315394;
    uint64_t v26 = "MP4_BoxParser_SampleGroupDescription.cpp";
    __int16 v27 = 1024;
    int v28 = 206;
    uint64_t v22 = MEMORY[0x1E4F14500];
    id v23 = "%25s:%-5d  'sbgp' box is too small for its group description entries";
LABEL_39:
    _os_log_impl(&dword_18FEC0000, v22, OS_LOG_TYPE_ERROR, v23, (uint8_t *)&v25, 0x12u);
    goto LABEL_40;
  }
  uint64_t v2 = v15;
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v25 = 136315394;
    uint64_t v26 = "MP4_BoxParser_SampleGroupDescription.cpp";
    __int16 v27 = 1024;
    int v28 = 173;
    uint64_t v13 = MEMORY[0x1E4F14500];
    uint64_t v14 = "%25s:%-5d  couldn't read 'sgpd' box fields";
    goto LABEL_21;
  }
  return v2;
}

void MP4BoxParser_SampleGroupDescription::~MP4BoxParser_SampleGroupDescription(MP4BoxParser_SampleGroupDescription *this)
{
  MP4BoxParser_SampleGroupDescription::~MP4BoxParser_SampleGroupDescription(this);
  JUMPOUT(0x192FC8940);
}

{
  void *v2;
  uint64_t v3;

  *(void *)this = off_1EDF94B30;
  uint64_t v2 = (void *)*((void *)this + 13);
  if (v2)
  {
    *((void *)this + 14) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EDF8DA18;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
}

uint64_t FLACPackStreamInfo(uint64_t a1, uint64_t a2)
{
  AT::TBitstreamWriter<unsigned int>::PutBits(a1, *(_DWORD *)a2, 0x10u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a1, *(_DWORD *)(a2 + 4), 0x10u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a1, *(_DWORD *)(a2 + 8), 0x18u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a1, *(_DWORD *)(a2 + 12), 0x18u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a1, *(_DWORD *)(a2 + 16), 0x14u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a1, *(_DWORD *)(a2 + 20) - 1, 3u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a1, *(_DWORD *)(a2 + 24) - 1, 5u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a1, *(void *)(a2 + 32) >> 4, 0x20u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a1, *(unsigned __int8 *)(a2 + 32), 4u);
  uint64_t v4 = 0;
  uint64_t v5 = a2 + 40;
  do
    AT::TBitstreamWriter<unsigned int>::PutBits(a1, *(unsigned __int8 *)(v5 + v4++), 8u);
  while (v4 != 16);
  return AT::TBitstreamWriter<unsigned int>::Flush(a1);
}

uint64_t FLACUnpackStreamInfo(uint64_t result, uint64_t a2)
{
  unsigned int v3 = *(_DWORD *)(result + 24);
  int v2 = *(_DWORD *)(result + 28);
  unsigned int v4 = HIWORD(v3);
  int v5 = v2 - 16;
  *(_DWORD *)(result + 28) = v2 - 16;
  if (v2 - 16 < 0)
  {
    unint64_t v8 = *(void *)(result + 8);
    unint64_t v7 = *(void *)(result + 16);
    unint64_t v9 = *(unsigned int **)result;
    if (((v7 - *(_DWORD *)result) & ~((uint64_t)(v7 - *(void *)result) >> 63) & 0xFFFFFFFC) == 0
      || v8 > (unint64_t)v9)
    {
      uint64_t v11 = 0;
      do
      {
        uint64_t v12 = (unsigned __int8 *)v9 + v11;
        unsigned int v13 = v3 << 8;
        *(_DWORD *)(result + 24) = v13;
        int v14 = 255;
        if ((unint64_t)v9 + v11 < v7 && (unint64_t)v12 >= v8) {
          int v14 = *v12;
        }
        unsigned int v3 = v14 | v13;
        *(_DWORD *)(result + 24) = v3;
        ++v11;
      }
      while (v11 != 4);
    }
    else
    {
      unsigned int v3 = bswap32(*v9);
      *(_DWORD *)(result + 24) = v3;
    }
    uint64_t v15 = v9 + 1;
    *(void *)uint64_t result = v9 + 1;
    int v5 = v2 + 16;
    *(_DWORD *)(result + 28) = v2 + 16;
    v4 |= v3 >> (v2 + 16);
    if (v2 == -16)
    {
      unsigned int v16 = 0;
      unsigned int v6 = 0;
      *(_DWORD *)a2 = v4;
      *(void *)(result + 24) = 0xFFFFFFF000000000;
      goto LABEL_19;
    }
    unsigned int v6 = v3 << (16 - v2);
  }
  else
  {
    unsigned int v6 = v3 << 16;
  }
  *(_DWORD *)a2 = v4;
  unsigned int v16 = HIWORD(v6);
  int v17 = v5 - 16;
  *(_DWORD *)(result + 24) = v6;
  *(_DWORD *)(result + 28) = v5 - 16;
  if (v5 - 16 >= 0)
  {
    unsigned int v18 = v6 << 16;
    goto LABEL_31;
  }
  unint64_t v8 = *(void *)(result + 8);
  unint64_t v7 = *(void *)(result + 16);
  uint64_t v15 = *(unsigned int **)result;
LABEL_19:
  if (((v7 - v15) & ~((uint64_t)(v7 - (void)v15) >> 63) & 0xFFFFFFFC) == 0
    || v8 > (unint64_t)v15)
  {
    uint64_t v20 = 0;
    do
    {
      unsigned int v21 = (unsigned __int8 *)v15 + v20;
      unsigned int v22 = v6 << 8;
      *(_DWORD *)(result + 24) = v22;
      int v23 = 255;
      if ((unint64_t)v15 + v20 < v7 && (unint64_t)v21 >= v8) {
        int v23 = *v21;
      }
      unsigned int v6 = v23 | v22;
      *(_DWORD *)(result + 24) = v6;
      ++v20;
    }
    while (v20 != 4);
  }
  else
  {
    unsigned int v6 = bswap32(*v15);
    *(_DWORD *)(result + 24) = v6;
  }
  uint64_t v24 = v15 + 1;
  *(void *)uint64_t result = v15 + 1;
  int v17 = v5 + 16;
  *(_DWORD *)(result + 28) = v5 + 16;
  v16 |= v6 >> (v5 + 16);
  if (v5 == -16)
  {
    unsigned int v25 = 0;
    unsigned int v18 = 0;
    *(_DWORD *)(a2 + 4) = v16;
    *(void *)(result + 24) = 0xFFFFFFE800000000;
    goto LABEL_35;
  }
  unsigned int v18 = v6 << (16 - v5);
LABEL_31:
  *(_DWORD *)(a2 + 4) = v16;
  unsigned int v25 = v18 >> 8;
  int v26 = v17 - 24;
  *(_DWORD *)(result + 24) = v18;
  *(_DWORD *)(result + 28) = v17 - 24;
  if (v17 - 24 >= 0)
  {
    unsigned int v27 = v18 << 24;
    goto LABEL_45;
  }
  unint64_t v8 = *(void *)(result + 8);
  unint64_t v7 = *(void *)(result + 16);
  uint64_t v24 = *(unsigned int **)result;
LABEL_35:
  if (((v7 - v24) & ~((uint64_t)(v7 - (void)v24) >> 63) & 0xFFFFFFFC) != 0
    && v8 <= (unint64_t)v24)
  {
    unsigned int v18 = bswap32(*v24);
    *(_DWORD *)(result + 24) = v18;
  }
  else
  {
    uint64_t v28 = 0;
    do
    {
      long long v29 = (unsigned __int8 *)v24 + v28;
      unsigned int v30 = v18 << 8;
      *(_DWORD *)(result + 24) = v18 << 8;
      int v31 = 255;
      if ((unint64_t)v24 + v28 < v7 && (unint64_t)v29 >= v8) {
        int v31 = *v29;
      }
      unsigned int v18 = v31 | v30;
      *(_DWORD *)(result + 24) = v18;
      ++v28;
    }
    while (v28 != 4);
  }
  BOOL v32 = v24 + 1;
  *(void *)uint64_t result = v32;
  int v26 = v17 + 8;
  v25 |= v18 >> (v17 + 8);
  if (v17 == -8)
  {
    unsigned int v33 = 0;
    unsigned int v27 = 0;
    *(_DWORD *)(a2 + 8) = v25;
    *(void *)(result + 24) = 0xFFFFFFE800000000;
    goto LABEL_49;
  }
  unsigned int v27 = v18 << (24 - v17);
LABEL_45:
  *(_DWORD *)(a2 + 8) = v25;
  unsigned int v33 = v27 >> 8;
  int v34 = v26 - 24;
  *(_DWORD *)(result + 24) = v27;
  *(_DWORD *)(result + 28) = v26 - 24;
  if (v26 - 24 >= 0)
  {
    unsigned int v35 = v27 << 24;
    goto LABEL_59;
  }
  unint64_t v8 = *(void *)(result + 8);
  unint64_t v7 = *(void *)(result + 16);
  BOOL v32 = *(unsigned int **)result;
LABEL_49:
  if (((v7 - v32) & ~((uint64_t)(v7 - (void)v32) >> 63) & 0xFFFFFFFC) != 0
    && v8 <= (unint64_t)v32)
  {
    unsigned int v27 = bswap32(*v32);
  }
  else
  {
    uint64_t v36 = 0;
    do
    {
      uint64_t v37 = (unsigned __int8 *)v32 + v36;
      unsigned int v38 = v27 << 8;
      *(_DWORD *)(result + 24) = v27 << 8;
      int v39 = 255;
      if ((unint64_t)v32 + v36 < v7 && (unint64_t)v37 >= v8) {
        int v39 = *v37;
      }
      unsigned int v27 = v39 | v38;
      *(_DWORD *)(result + 24) = v27;
      ++v36;
    }
    while (v36 != 4);
  }
  uint64_t v40 = v32 + 1;
  *(void *)uint64_t result = v40;
  int v34 = v26 + 8;
  v33 |= v27 >> (v26 + 8);
  if (v26 == -8)
  {
    unsigned int v41 = 0;
    unsigned int v35 = 0;
    *(_DWORD *)(a2 + 12) = v33;
    *(void *)(result + 24) = 0xFFFFFFEC00000000;
    goto LABEL_63;
  }
  unsigned int v35 = v27 << (24 - v26);
LABEL_59:
  *(_DWORD *)(a2 + 12) = v33;
  unsigned int v41 = v35 >> 12;
  int v42 = v34 - 20;
  *(_DWORD *)(result + 24) = v35;
  *(_DWORD *)(result + 28) = v34 - 20;
  if (v34 - 20 >= 0)
  {
    unsigned int v43 = v35 << 20;
    goto LABEL_73;
  }
  unint64_t v8 = *(void *)(result + 8);
  unint64_t v7 = *(void *)(result + 16);
  uint64_t v40 = *(unsigned int **)result;
LABEL_63:
  if (((v7 - v40) & ~((uint64_t)(v7 - (void)v40) >> 63) & 0xFFFFFFFC) != 0
    && v8 <= (unint64_t)v40)
  {
    unsigned int v35 = bswap32(*v40);
  }
  else
  {
    uint64_t v44 = 0;
    do
    {
      long long v45 = (unsigned __int8 *)v40 + v44;
      unsigned int v46 = v35 << 8;
      *(_DWORD *)(result + 24) = v35 << 8;
      int v47 = 255;
      if ((unint64_t)v40 + v44 < v7 && (unint64_t)v45 >= v8) {
        int v47 = *v45;
      }
      unsigned int v35 = v47 | v46;
      *(_DWORD *)(result + 24) = v35;
      ++v44;
    }
    while (v44 != 4);
  }
  uint64_t v48 = v40 + 1;
  *(void *)uint64_t result = v48;
  int v42 = v34 + 12;
  v41 |= v35 >> (v34 + 12);
  if (v34 == -12)
  {
    unsigned int v49 = 0;
    unsigned int v43 = 0;
    *(_DWORD *)(a2 + 16) = v41;
    *(void *)(result + 24) = 0xFFFFFFFD00000000;
    goto LABEL_77;
  }
  unsigned int v43 = v35 << (20 - v34);
LABEL_73:
  *(_DWORD *)(a2 + 16) = v41;
  unsigned int v49 = v43 >> 29;
  int v50 = v42 - 3;
  *(_DWORD *)(result + 24) = v43;
  *(_DWORD *)(result + 28) = v42 - 3;
  if (v42 - 3 >= 0)
  {
    unsigned int v51 = 8 * v43;
    goto LABEL_87;
  }
  unint64_t v8 = *(void *)(result + 8);
  unint64_t v7 = *(void *)(result + 16);
  uint64_t v48 = *(unsigned int **)result;
LABEL_77:
  if (((v7 - v48) & ~((uint64_t)(v7 - (void)v48) >> 63) & 0xFFFFFFFC) != 0
    && v8 <= (unint64_t)v48)
  {
    unsigned int v43 = bswap32(*v48);
  }
  else
  {
    uint64_t v52 = 0;
    do
    {
      uint64_t v53 = (unsigned __int8 *)v48 + v52;
      unsigned int v54 = v43 << 8;
      *(_DWORD *)(result + 24) = v43 << 8;
      int v55 = 255;
      if ((unint64_t)v48 + v52 < v7 && (unint64_t)v53 >= v8) {
        int v55 = *v53;
      }
      unsigned int v43 = v55 | v54;
      *(_DWORD *)(result + 24) = v43;
      ++v52;
    }
    while (v52 != 4);
  }
  uint64_t v56 = v48 + 1;
  *(void *)uint64_t result = v56;
  int v50 = v42 + 29;
  v49 |= v43 >> (v42 + 29);
  if (v42 == -29)
  {
    unsigned int v57 = 0;
    unsigned int v51 = 0;
    *(_DWORD *)(a2 + 20) = v49 + 1;
    *(void *)(result + 24) = 0xFFFFFFFB00000000;
    goto LABEL_91;
  }
  unsigned int v51 = v43 << (3 - v42);
LABEL_87:
  *(_DWORD *)(a2 + 20) = v49 + 1;
  unsigned int v57 = v51 >> 27;
  int v58 = v50 - 5;
  *(_DWORD *)(result + 24) = v51;
  *(_DWORD *)(result + 28) = v50 - 5;
  if (v50 - 5 >= 0)
  {
    unsigned int v59 = 32 * v51;
    goto LABEL_101;
  }
  unint64_t v8 = *(void *)(result + 8);
  unint64_t v7 = *(void *)(result + 16);
  uint64_t v56 = *(unsigned int **)result;
LABEL_91:
  if (((v7 - v56) & ~((uint64_t)(v7 - (void)v56) >> 63) & 0xFFFFFFFC) != 0
    && v8 <= (unint64_t)v56)
  {
    unsigned int v51 = bswap32(*v56);
  }
  else
  {
    uint64_t v60 = 0;
    do
    {
      uint64_t v61 = (unsigned __int8 *)v56 + v60;
      unsigned int v62 = v51 << 8;
      *(_DWORD *)(result + 24) = v62;
      int v63 = 255;
      if ((unint64_t)v56 + v60 < v7 && (unint64_t)v61 >= v8) {
        int v63 = *v61;
      }
      unsigned int v51 = v63 | v62;
      *(_DWORD *)(result + 24) = v51;
      ++v60;
    }
    while (v60 != 4);
  }
  int v58 = v50 + 27;
  *(void *)uint64_t result = v56 + 1;
  v57 |= v51 >> (v50 + 27);
  unsigned int v59 = v51 << (5 - v50);
  if (v50 == -27) {
    unsigned int v59 = 0;
  }
LABEL_101:
  *(_DWORD *)(a2 + 24) = v57 + 1;
  *(_DWORD *)(result + 24) = v59;
  *(_DWORD *)(result + 28) = v58 - 32;
  if (v58 - 32 < 0)
  {
    unint64_t v66 = *(void *)(result + 8);
    unint64_t v65 = *(void *)(result + 16);
    int64_t v67 = *(unsigned int **)result;
    if (((v65 - *(_DWORD *)result) & ~((uint64_t)(v65 - *(void *)result) >> 63) & 0xFFFFFFFC) != 0
      && v66 <= (unint64_t)v67)
    {
      unsigned int v68 = bswap32(*v67);
      *(_DWORD *)(result + 24) = v68;
    }
    else
    {
      uint64_t v69 = 0;
      unsigned int v68 = v59;
      do
      {
        unint64_t v70 = (unsigned __int8 *)v67 + v69;
        unsigned int v71 = v68 << 8;
        *(_DWORD *)(result + 24) = v68 << 8;
        int v72 = 255;
        if ((unint64_t)v67 + v69 < v65 && (unint64_t)v70 >= v66) {
          int v72 = *v70;
        }
        unsigned int v68 = v72 | v71;
        *(_DWORD *)(result + 24) = v68;
        ++v69;
      }
      while (v69 != 4);
    }
    uint64_t v73 = v67 + 1;
    *(void *)uint64_t result = v67 + 1;
    unsigned int v64 = (v68 >> v58) | v59;
    if (!v58)
    {
      unsigned int v75 = 0;
      unsigned int v59 = 0;
      uint64_t v74 = 16 * v64;
      *(void *)(result + 24) = 0xFFFFFFFC00000000;
      goto LABEL_117;
    }
    unsigned int v59 = v68 << -(char)v58;
    *(_DWORD *)(result + 24) = v59;
  }
  else
  {
    v58 -= 32;
    unsigned int v64 = v59;
  }
  uint64_t v74 = 16 * v64;
  unsigned int v75 = v59 >> 28;
  *(_DWORD *)(result + 28) = v58 - 4;
  if (v58 - 4 >= 0)
  {
    int v76 = 16 * v59;
    goto LABEL_128;
  }
  unint64_t v66 = *(void *)(result + 8);
  unint64_t v65 = *(void *)(result + 16);
  uint64_t v73 = *(unsigned int **)result;
LABEL_117:
  if (((v65 - v73) & ~((uint64_t)(v65 - (void)v73) >> 63) & 0xFFFFFFFC) != 0
    && v66 <= (unint64_t)v73)
  {
    unsigned int v59 = bswap32(*v73);
  }
  else
  {
    uint64_t v77 = 0;
    do
    {
      uint64_t v78 = (unsigned __int8 *)v73 + v77;
      unsigned int v79 = v59 << 8;
      *(_DWORD *)(result + 24) = v79;
      int v80 = 255;
      if ((unint64_t)v73 + v77 < v65 && (unint64_t)v78 >= v66) {
        int v80 = *v78;
      }
      unsigned int v59 = v80 | v79;
      *(_DWORD *)(result + 24) = v59;
      ++v77;
    }
    while (v77 != 4);
  }
  int v81 = v59 << (4 - v58);
  int v82 = v58 + 28;
  *(_DWORD *)(result + 28) = v82;
  *(void *)uint64_t result = v73 + 1;
  v75 |= v59 >> v82;
  if (v82) {
    int v76 = v81;
  }
  else {
    int v76 = 0;
  }
LABEL_128:
  uint64_t v83 = 0;
  *(_DWORD *)(result + 24) = v76;
  *(void *)(a2 + 32) = v74 + v75;
  do
  {
    unsigned int v85 = *(_DWORD *)(result + 24);
    int v84 = *(_DWORD *)(result + 28);
    unsigned int v86 = HIBYTE(v85);
    *(_DWORD *)(result + 28) = v84 - 8;
    if (v84 - 8 < 0)
    {
      unint64_t v89 = *(void *)(result + 8);
      unint64_t v88 = *(void *)(result + 16);
      double v90 = *(unsigned int **)result;
      if (((v88 - *(_DWORD *)result) & ~((uint64_t)(v88 - *(void *)result) >> 63) & 0xFFFFFFFC) == 0
        || v89 > (unint64_t)v90)
      {
        uint64_t v92 = 0;
        do
        {
          unint64_t v93 = (unsigned __int8 *)v90 + v92;
          unsigned int v94 = v85 << 8;
          *(_DWORD *)(result + 24) = v94;
          int v95 = 255;
          if ((unint64_t)v90 + v92 < v88 && (unint64_t)v93 >= v89) {
            int v95 = *v93;
          }
          unsigned int v85 = v95 | v94;
          *(_DWORD *)(result + 24) = v85;
          ++v92;
        }
        while (v92 != 4);
      }
      else
      {
        unsigned int v85 = bswap32(*v90);
      }
      unsigned int v96 = v85 << (8 - v84);
      int v97 = v84 + 24;
      *(_DWORD *)(result + 28) = v97;
      *(void *)uint64_t result = v90 + 1;
      v86 |= v85 >> v97;
      if (v97) {
        unsigned int v87 = v96;
      }
      else {
        unsigned int v87 = 0;
      }
    }
    else
    {
      unsigned int v87 = v85 << 8;
    }
    *(_DWORD *)(result + 24) = v87;
    *(unsigned char *)(a2 + v83++ + 40) = v86;
  }
  while (v83 != 16);
  return result;
}

void ACQEventManager::ACQEventManager(ACQEventManager *this)
{
  uint64_t v1 = 0;
  GetACQEventManager(void)::sACQEventManager[0] = 0;
  qword_1E92773E0 = 0;
  do
  {
    int v2 = &GetACQEventManager(void)::sACQEventManager[v1];
    *((void *)v2 + 11) = 0;
    v2[96] = 0;
    v2[120] = 0;
    *((_DWORD *)v2 + 32) = 0;
    *((void *)v2 + 4) = 0;
    *((void *)v2 + 5) = 0;
    *((void *)v2 + 3) = 0;
    *((_DWORD *)v2 + 12) = 0;
    v1 += 120;
    *((void *)v2 + 7) = 0;
    *((void *)v2 + 8) = 0;
  }
  while (v1 != 1920);
  uint64_t v3 = 0;
  qword_1E9277B68 = 0;
  do
  {
    unsigned int v4 = &GetACQEventManager(void)::sACQEventManager[v3];
    *((void *)v4 + 252) = 0;
    v4[2024] = 0;
    v4[2048] = 0;
    *((_DWORD *)v4 + 514) = 0;
    *((void *)v4 + 244) = 0;
    *((_DWORD *)v4 + 494) = 0;
    *(_OWORD *)&GetACQEventManager(void)::sACQEventManager[v3 + 1960] = 0uLL;
    v3 += 120;
    *((_OWORD *)v4 + 124) = 0uLL;
  }
  while (v3 != 1920);
  byte_1E92782F0 = 0;
  *(&byte_1E92782F0 + 122920) = 0;
  if (CACFPreferencesGetAppBooleanValue(@"acq_event_trace", @"com.apple.coreaudio", 0))
  {
    if (byte_1E9296318)
    {
      if (byte_1E9296310) {
        std::thread::~thread((std::thread *)&byte_1E9296308);
      }
      MEMORY[0x192FC8070](&byte_1E92782F0);
      *(&byte_1E92782F0 + 122920) = 0;
    }
    caulk::semaphore::semaphore((caulk::semaphore *)&byte_1E92782F0);
    uint64_t v5 = 0;
    qword_1E9278300 = 0;
    do
    {
      unsigned int v6 = &GetACQEventManager(void)::sACQEventManager[v5];
      *((void *)v6 + 495) = 0;
      unint64_t v7 = &GetACQEventManager(void)::sACQEventManager[v5 + 3928];
      v6[3968] = 0;
      v6[3992] = 0;
      *((_DWORD *)v6 + 1000) = 0;
      *((void *)v6 + 487) = 0;
      *((_OWORD *)v6 + 244) = 0uLL;
      *((_DWORD *)v6 + 980) = 0;
      v5 += 120;
      *(_OWORD *)unint64_t v7 = 0uLL;
    }
    while (v5 != 122880);
    byte_1E9296308 = 0;
    byte_1E9296310 = 0;
    operator new();
  }
}

void std::__optional_destruct_base<ACQTraceState,false>::~__optional_destruct_base[abi:ne180100]()
{
  if (byte_1E9296318)
  {
    if (byte_1E9296310) {
      std::thread::~thread((std::thread *)&byte_1E9296308);
    }
    JUMPOUT(0x192FC8070);
  }
}

uint64_t **std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,ACQTraceState::ACQTraceState(void)::$_0>>::~unique_ptr[abi:ne180100](uint64_t **a1)
{
  int v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *v2;
    uint64_t *v2 = 0;
    if (v3)
    {
      uint64_t v4 = MEMORY[0x192FC8640]();
      MEMORY[0x192FC8940](v4, 0x20C4093837F09);
    }
    MEMORY[0x192FC8940](v2, 0x20C40A4A59CD2);
  }
  return a1;
}

void std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,ACQTraceState::ACQTraceState(void)::$_0>>(uint64_t a1)
{
  int v2 = std::__thread_local_data();
  uint64_t v3 = *(const void **)a1;
  *(void *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  ACQTraceState::HandleLogging(*(ACQTraceState **)(a1 + 8));
}

void sub_19007427C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,ACQTraceState::ACQTraceState(void)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t **)va);
  _Unwind_Resume(a1);
}

void ACQTraceState::HandleLogging(ACQTraceState *this)
{
  ACQLog = GetACQLog();
  for (uint64_t i = 0; ; uint64_t i = ((int)i + 1) & 0x3FFLL)
  {
    caulk::semaphore::timed_wait(this, -1.0);
    LogEvent(ACQLog, (int *)this + 30 * i + 6, v4);
  }
}

uint64_t GetACQLog(void)
{
  uint64_t v0 = &unk_1E9299000;
  {
    uint64_t v0 = (void *)&unk_1E9299000;
    if (v2)
    {
      GetACQLog(void)::sACQLog = (uint64_t)os_log_create("com.apple.coreaudio", "acq");
      uint64_t v0 = (void *)&unk_1E9299000;
    }
  }
  return v0[123];
}

void LogEvent(NSObject *a1, int *a2, char *a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  unsigned int v6 = (os_unfair_lock_s *)(a2 + 28);
  os_unfair_lock_lock((os_unfair_lock_t)a2 + 28);
  if (*((void *)a2 + 1) && *((void *)a2 + 2) && *((void *)a2 + 3))
  {
    localtime_r((const time_t *)a2 + 7, &v35);
    strftime(a3, 0x80uLL, "%H:%M:%S.", &v35);
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v30);
    int v7 = *((unsigned __int8 *)a2 + 104);
    v27._os_unfair_lock_opaque = *a2;
    unint64_t v8 = (const char *)*((void *)a2 + 2);
    unint64_t v9 = (const char *)*((void *)a2 + 3);
    int v10 = (const char *)*((void *)a2 + 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"ACQ event: ", 11);
    if (v7)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"seqNum(", 7);
      uint64_t v11 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"), ", 3);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"tid(", 4);
    uint64_t v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"), ", 3);
    size_t v13 = strlen(v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)v10, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)", ", 2);
    int v14 = "pre-dispatch";
    if (v27._os_unfair_lock_opaque == 1) {
      int v14 = "block start";
    }
    if (v27._os_unfair_lock_opaque == 2) {
      uint64_t v15 = "block end";
    }
    else {
      uint64_t v15 = v14;
    }
    size_t v16 = strlen(v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)v15, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)", ", 2);
    size_t v17 = strlen(v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)v9, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)":", 1);
    unsigned int v18 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)", ", 2);
    size_t v19 = strlen(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v8, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)", args(", 7);
    uint64_t v20 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)",", 1);
    unsigned int v21 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)")", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)", ", 2);
    size_t v22 = strlen(a3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)a3, v22);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v31, 48);
    *(void *)((char *)&v32[2] + *(void *)(v31 - 24)) = 6;
    std::ostream::operator<<();
    if (v7 && v27._os_unfair_lock_opaque)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)", diff(", 7);
      uint64_t v23 = v31;
      *(_DWORD *)((char *)v32 + *(void *)(v31 - 24)) = *(_DWORD *)((unsigned char *)v32 + *(void *)(v31 - 24)) & 0xFFFFFEFB | 4;
      *(void *)((char *)&v32[1] + *(void *)(v23 - 24)) = 2;
      uint64_t v24 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"ms)", 3);
    }
    if (os_log_type_enabled(a1, OS_LOG_TYPE_DEFAULT))
    {
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>(__p, (uint64_t)v32);
      unsigned int v25 = v29 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioStreamBasicDescription buf = 136315138;
      uint64_t v37 = v25;
      _os_log_impl(&dword_18FEC0000, a1, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
      if (v29 < 0) {
        operator delete(__p[0]);
      }
    }
    v30[0] = *MEMORY[0x1E4FBA408];
    uint64_t v26 = *(void *)(MEMORY[0x1E4FBA408] + 72);
    *(void *)((char *)v30 + *(void *)(v30[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
    uint64_t v31 = v26;
    v32[0] = MEMORY[0x1E4FBA470] + 16;
    if (v33 < 0) {
      operator delete((void *)v32[8]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x192FC8840](&v34);
  }
  os_unfair_lock_unlock(v6);
}

void sub_19007491C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  os_unfair_lock_unlock(v11);
  _Unwind_Resume(a1);
}

void *std::operator<<[abi:ne180100]<std::char_traits<char>>(void *a1, char a2)
{
  uint64_t v4 = (char *)a1 + *(void *)(*a1 - 24);
  if (*((_DWORD *)v4 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
    uint64_t v5 = std::locale::use_facet(&v8, MEMORY[0x1E4FBA258]);
    int v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
    std::locale::~locale(&v8);
    *((_DWORD *)v4 + 36) = v6;
  }
  *((_DWORD *)v4 + 36) = a2;
  return a1;
}

void sub_190074A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void LogACQEvents()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  GetACQEventManager();
  if ((atomic_exchange(GetACQEventManager(void)::sACQEventManager, 1u) & 1) == 0)
  {
    ACQLog = GetACQLog();
    char v1 = atomic_load((unint64_t *)&qword_1E92773E0);
    int v2 = 16;
    do
    {
      char v3 = v1 & 0xF;
      LogEvent(ACQLog, (int *)&GetACQEventManager(void)::sACQEventManager[120 * (v1 & 0xF) + 16], v7);
      char v1 = v3 + 1;
      --v2;
    }
    while (v2);
    char v4 = atomic_load((unint64_t *)&qword_1E9277B68);
    int v5 = 16;
    do
    {
      char v6 = v4 & 0xF;
      LogEvent(ACQLog, (int *)&GetACQEventManager(void)::sACQEventManager[120 * (v4 & 0xF) + 1944], v7);
      char v4 = v6 + 1;
      --v5;
    }
    while (v5);
  }
}

os_workgroup_interval_t AudioWorkIntervalCreate(const char *name, os_clockid_t clock, os_workgroup_attr_t attr)
{
  uint8_t v18[4] = *MEMORY[0x1E4F143B8];
  memset(v17, 0, sizeof(v17));
  long long v16 = 0u;
  long long v15 = 0u;
  int v14 = 799564724;
  if (os_workgroup_attr_set_interval_type()) {
    std::terminate();
  }
  char v3 = (caulk::mach::details *)os_workgroup_interval_create_with_workload_id();
  uint64_t v5 = caulk::mach::details::retain_os_object(v3, v4);
  caulk::mach::details::release_os_object(0, v6);
  v11[0] = MEMORY[0x1E4FB7EA0] + 16;
  v11[1] = v5;
  long long v12 = 0u;
  memset(v13, 0, sizeof(v13));
  uint64_t v8 = (auoop *)caulk::mach::details::release_os_object(0, v7);
  uint64_t v9 = auoop::gWorkgroupManager(v8);
  v18[0] = &unk_1EDFA0EB8;
  v18[1] = v11;
  v18[3] = v18;
  auoop::WorkgroupManager_Base::mutateWorkgroups(v9, (uint64_t)v18);
  std::__function::__value_func<BOOL ()(auoop::WorkgroupManager_Base::State &)>::~__value_func[abi:ne180100](v18);
  caulk::mach::os_workgroup_managed::~os_workgroup_managed((caulk::mach::os_workgroup_managed *)v11);
  return (os_workgroup_interval_t)v3;
}

void sub_190074C4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(auoop::WorkgroupManager_Base::State &)>::~__value_func[abi:ne180100]((void *)(v2 - 72));
  caulk::mach::os_workgroup_managed::~os_workgroup_managed((caulk::mach::os_workgroup_managed *)va);
  _Unwind_Resume(a1);
}

void std::vector<std::optional<std::string>>::push_back[abi:ne180100](uint64_t a1, long long *a2)
{
  uint64_t v5 = *(void ***)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v8 = *(void ***)a1;
    uint64_t v9 = ((uint64_t)v5 - *(void *)a1) >> 5;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 59) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v4 - (void)v8;
    if (v11 >> 4 > v10) {
      unint64_t v10 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 59) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      size_t v13 = (char *)operator new(32 * v12);
    }
    else
    {
      size_t v13 = 0;
    }
    int v14 = &v13[32 * v9];
    char *v14 = 0;
    unsigned char v14[24] = 0;
    if (*((unsigned char *)a2 + 24))
    {
      *(_OWORD *)int v14 = *a2;
      *((void *)v14 + 2) = *((void *)a2 + 2);
      *((void *)a2 + 1) = 0;
      *((void *)a2 + 2) = 0;
      *(void *)a2 = 0;
      unsigned char v14[24] = 1;
      uint64_t v8 = *(void ***)a1;
      uint64_t v5 = *(void ***)(a1 + 8);
    }
    long long v15 = &v13[32 * v12];
    int v7 = v14 + 32;
    if (v5 == v8)
    {
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v7;
      *(void *)(a1 + 16) = v15;
    }
    else
    {
      long long v16 = &v13[32 * v9];
      do
      {
        *(v16 - 32) = 0;
        v16 -= 32;
        size_t v17 = v5 - 4;
        v16[24] = 0;
        if (*((unsigned char *)v5 - 8))
        {
          long long v18 = *(_OWORD *)v17;
          *((void *)v16 + 2) = *(v5 - 2);
          *(_OWORD *)long long v16 = v18;
          *(v5 - 3) = 0;
          *(v5 - 2) = 0;
          *size_t v17 = 0;
          *(v14 - 8) = 1;
        }
        int v14 = v16;
        v5 -= 4;
      }
      while (v17 != v8);
      uint64_t v8 = *(void ***)a1;
      size_t v19 = *(void ***)(a1 + 8);
      *(void *)a1 = v16;
      *(void *)(a1 + 8) = v7;
      *(void *)(a1 + 16) = v15;
      while (v19 != v8)
      {
        if (*((unsigned char *)v19 - 8) && *((char *)v19 - 9) < 0) {
          operator delete(*(v19 - 4));
        }
        v19 -= 4;
      }
    }
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(unsigned char *)uint64_t v5 = 0;
    *((unsigned char *)v5 + 24) = 0;
    if (*((unsigned char *)a2 + 24))
    {
      long long v6 = *a2;
      v5[2] = (void *)*((void *)a2 + 2);
      *(_OWORD *)uint64_t v5 = v6;
      *((void *)a2 + 1) = 0;
      *((void *)a2 + 2) = 0;
      *(void *)a2 = 0;
      *((unsigned char *)v5 + 24) = 1;
    }
    int v7 = (char *)(v5 + 4);
  }
  *(void *)(a1 + 8) = v7;
}

void std::vector<std::vector<std::string>>::push_back[abi:ne180100](void ***a1, uint64_t a2)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = (unint64_t)a1[2];
  if ((unint64_t)v4 >= v5)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v4 - *a1);
    unint64_t v8 = v7 + 1;
    if (v7 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (void)*a1) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
    }
    if (v8 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v10 = 3 * v8;
    uint64_t v11 = (char *)operator new(24 * v8);
    unint64_t v12 = &v11[24 * v7];
    size_t v13 = (void **)&v11[8 * v10];
    *(_OWORD *)unint64_t v12 = *(_OWORD *)a2;
    *((void *)v12 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    long long v6 = (void **)(v12 + 24);
    int v14 = *a1;
    long long v15 = a1[1];
    if (v15 == *a1)
    {
      *a1 = (void **)v12;
      a1[1] = v6;
      a1[2] = v13;
    }
    else
    {
      do
      {
        *((void *)v12 - 3) = 0;
        *((void *)v12 - 2) = 0;
        v12 -= 24;
        *((void *)v12 + 2) = 0;
        long long v16 = *(_OWORD *)(v15 - 3);
        v15 -= 3;
        *(_OWORD *)unint64_t v12 = v16;
        *((void *)v12 + 2) = v15[2];
        char *v15 = 0;
        v15[1] = 0;
        void v15[2] = 0;
      }
      while (v15 != v14);
      long long v15 = *a1;
      size_t v17 = a1[1];
      *a1 = (void **)v12;
      a1[1] = v6;
      a1[2] = v13;
      while (v17 != v15)
      {
        v17 -= 3;
        long long v18 = v17;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v18);
      }
    }
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    *unint64_t v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
    *(_OWORD *)unint64_t v4 = *(_OWORD *)a2;
    v4[2] = *(void **)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    long long v6 = v4 + 3;
  }
  a1[1] = v6;
}

uint64_t AIFFAudioStream::ParseHeader(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (unsigned int *)(a1 + 362);
  int v5 = *(_DWORD *)(a1 + 236);
  if (v5 <= 99)
  {
    if (v5 > 69)
    {
      if (v5 != 70)
      {
        if (v5 == 87)
        {
          unsigned int v14 = *(_DWORD *)(a1 + 256);
          long long v15 = *(unsigned __int8 **)(a1 + 264);
          goto LABEL_32;
        }
        goto LABEL_29;
      }
      unsigned int v10 = *(_DWORD *)(a1 + 256);
      uint64_t v8 = *(void *)(a1 + 8);
      uint64_t v11 = *(unsigned __int8 **)(a1 + 264);
    }
    else
    {
      if (v5 == -1) {
        return 0;
      }
      if (v5) {
        goto LABEL_29;
      }
      uint64_t v8 = *(void *)(a1 + 8);
      unsigned int v77 = 1;
      if (!*(unsigned char *)(v8 + 104))
      {
        *(unsigned char *)(v8 + 104) = 1;
        unint64_t v9 = *(void (**)(void, void, uint64_t, unsigned int *))(v8 + 24);
        if (v9)
        {
          v9(*(void *)(v8 + 40), *(unsigned int *)(v8 + 8), 1717988724, &v77);
          uint64_t v8 = *(void *)(a1 + 8);
        }
      }
      *(void *)(a1 + 296) = *(void *)(v8 + 96);
      *(_OWORD *)(a1 + 352) = 0u;
      *(_OWORD *)(a1 + 368) = 0u;
      unsigned int v10 = 12;
      *(_DWORD *)(a1 + 256) = 12;
      uint64_t v11 = (unsigned __int8 *)(a1 + 332);
      *(void *)(a1 + 264) = a1 + 332;
    }
    unsigned int v77 = v10;
    StreamBuffer::Copy((void *)(v8 + 72), &v77, v11);
    unsigned int v22 = v77;
    int v23 = *(_DWORD *)(a1 + 256);
    *(void *)(a1 + 264) += v77;
    int v24 = v23 - v22;
    *(_DWORD *)(a1 + 256) = v24;
    if (v24)
    {
      uint64_t result = 0;
      int v27 = 70;
      goto LABEL_73;
    }
    unsigned int v25 = *(_DWORD *)(a1 + 340);
    unsigned int v26 = bswap32(v25);
    *(_DWORD *)(a1 + 340) = v26;
    if (v26 == 1095321155 || v26 == 1095321158)
    {
      *(_DWORD *)(a1 + 16) = v26;
      *(unsigned char *)(a1 + 400) = v25 == 1128679745;
      *(void *)(a1 + 296) += 12;
      goto LABEL_66;
    }
    *(unsigned char *)(a1 + 177) = 1;
    *(_DWORD *)(a1 + 236) = -1;
    return 1685348671;
  }
  else
  {
    if (v5 <= 118)
    {
      if (v5 == 100)
      {
        unsigned int v21 = *(_DWORD *)(a1 + 256);
        size_t v13 = *(unsigned __int8 **)(a1 + 264);
        goto LABEL_38;
      }
      if (v5 == 104)
      {
        unsigned int v12 = *(_DWORD *)(a1 + 256);
        size_t v13 = *(unsigned __int8 **)(a1 + 264);
        goto LABEL_62;
      }
      goto LABEL_29;
    }
    if (v5 != 119)
    {
      if (v5 == 159)
      {
        unsigned int v18 = *(_DWORD *)(a1 + 256);
        size_t v19 = *(unsigned __int8 **)(a1 + 264);
        goto LABEL_46;
      }
      if (v5 == 166)
      {
        unsigned int v6 = *(_DWORD *)(a1 + 256);
        unint64_t v7 = *(unsigned __int8 **)(a1 + 264);
LABEL_42:
        unsigned int v77 = v6;
        StreamBuffer::Copy((void *)(*(void *)(a1 + 8) + 72), &v77, v7);
        unsigned int v37 = v77;
        int v38 = *(_DWORD *)(a1 + 256);
        *(void *)(a1 + 264) += v77;
        int v39 = v38 - v37;
        *(_DWORD *)(a1 + 256) = v39;
        if (v39)
        {
          uint64_t result = 0;
          int v27 = 166;
          goto LABEL_73;
        }
        *(_DWORD *)(a1 + 128) = *(_DWORD *)(a1 + 348);
        uint64_t v40 = *(void *)(a1 + 8);
        unsigned int v77 = 1;
        *(unsigned char *)(v40 + 108) = 1;
        unsigned int v41 = *(void (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(v40 + 24);
        if (!v41) {
          goto LABEL_65;
        }
        uint64_t v42 = *(void *)(v40 + 40);
        uint64_t v43 = *(unsigned int *)(v40 + 8);
        uint64_t v44 = 1835493731;
LABEL_50:
        v41(v42, v43, v44, &v77);
        while (1)
        {
          do
          {
            while (1)
            {
              while (1)
              {
LABEL_65:
                uint64_t v62 = *(void *)(a1 + 296) + *(int *)(a1 + 348);
                *(void *)(a1 + 296) = v62;
                *(void *)(*(void *)(a1 + 8) + 96) = v62;
LABEL_66:
                unsigned int v14 = 8;
                *(_DWORD *)(a1 + 256) = 8;
                long long v15 = (unsigned __int8 *)(a1 + 344);
                *(void *)(a1 + 264) = a1 + 344;
LABEL_32:
                unsigned int v77 = v14;
                StreamBuffer::Copy((void *)(*(void *)(a1 + 8) + 72), &v77, v15);
                unsigned int v28 = v77;
                int v29 = *(_DWORD *)(a1 + 256);
                *(void *)(a1 + 264) += v77;
                int v30 = v29 - v28;
                *(_DWORD *)(a1 + 256) = v30;
                if (v30)
                {
                  uint64_t result = 0;
                  int v27 = 87;
                  goto LABEL_73;
                }
                int v31 = bswap32(*(_DWORD *)(a1 + 344));
                *(_DWORD *)(a1 + 344) = v31;
                signed int v32 = bswap32(*(_DWORD *)(a1 + 348));
                *(_DWORD *)(a1 + 348) = v32;
                *(void *)(a1 + 296) += 8;
                if (v31 <= 1397968451) {
                  break;
                }
                if (v31 == 2002876005)
                {
                  CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)(a1 + 120), v32, 0);
                  unsigned int v6 = *(_DWORD *)(a1 + 348);
                  *(_DWORD *)(a1 + 256) = v6;
                  unint64_t v7 = *(unsigned __int8 **)(a1 + 120);
                  *(void *)(a1 + 264) = v7;
                  goto LABEL_42;
                }
                if (v31 == 1397968452)
                {
                  *(_DWORD *)(a1 + 384) = 1397968452;
                  *(_DWORD *)(a1 + 388) = v32;
                  unsigned int v16 = 8;
                  *(_DWORD *)(a1 + 256) = 8;
                  size_t v17 = (unsigned __int8 *)(a1 + 392);
                  *(void *)(a1 + 264) = a1 + 392;
                  goto LABEL_53;
                }
              }
              if (v31 != 1128808782) {
                break;
              }
              CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)(a1 + 136), v32, 0);
              unsigned int v18 = *(_DWORD *)(a1 + 348);
              *(_DWORD *)(a1 + 256) = v18;
              size_t v19 = *(unsigned __int8 **)(a1 + 136);
              *(void *)(a1 + 264) = v19;
LABEL_46:
              unsigned int v77 = v18;
              StreamBuffer::Copy((void *)(*(void *)(a1 + 8) + 72), &v77, v19);
              unsigned int v45 = v77;
              int v46 = *(_DWORD *)(a1 + 256);
              *(void *)(a1 + 264) += v77;
              int v47 = v46 - v45;
              *(_DWORD *)(a1 + 256) = v47;
              if (v47)
              {
                uint64_t result = 0;
                int v27 = 159;
                goto LABEL_73;
              }
              unint64_t v48 = *(unsigned int *)(a1 + 348);
              *(_DWORD *)(a1 + 144) = v48;
              AudioChannelLayout_BtoN(*(AudioChannelLayout **)(a1 + 136), v48);
              uint64_t v49 = *(void *)(a1 + 8);
              unsigned int v77 = 1;
              if (!*(unsigned char *)(v49 + 109))
              {
                *(unsigned char *)(v49 + 109) = 1;
                unsigned int v41 = *(void (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(v49 + 24);
                if (v41)
                {
                  uint64_t v42 = *(void *)(v49 + 40);
                  uint64_t v43 = *(unsigned int *)(v49 + 8);
                  uint64_t v44 = 1668112752;
                  goto LABEL_50;
                }
              }
            }
          }
          while (v31 != 1129270605);
          size_t v13 = (unsigned __int8 *)(a1 + 360);
          if (*(unsigned char *)(a1 + 400))
          {
            unsigned int v21 = 22;
            *(_DWORD *)(a1 + 256) = 22;
            *(void *)(a1 + 264) = v13;
LABEL_38:
            unsigned int v77 = v21;
            StreamBuffer::Copy((void *)(*(void *)(a1 + 8) + 72), &v77, v13);
            unsigned int v33 = v77;
            int v34 = *(_DWORD *)(a1 + 256);
            *(void *)(a1 + 264) += v77;
            int v35 = v34 - v33;
            *(_DWORD *)(a1 + 256) = v35;
            if (v35)
            {
              uint64_t result = 0;
              int v27 = 100;
              goto LABEL_73;
            }
            *(int8x8_t *)(a1 + 352) = vrev32_s8(*(int8x8_t *)(a1 + 352));
            *(_WORD *)(a1 + 360) = bswap32(*(unsigned __int16 *)(a1 + 360)) >> 16;
            *unint64_t v4 = bswap32(*v4);
            *(_WORD *)(a1 + 366) = bswap32(*(unsigned __int16 *)(a1 + 366)) >> 16;
            unsigned int v36 = bswap32(v4[4]);
          }
          else
          {
            unsigned int v12 = 18;
            *(_DWORD *)(a1 + 256) = 18;
            *(void *)(a1 + 264) = v13;
LABEL_62:
            unsigned int v77 = v12;
            StreamBuffer::Copy((void *)(*(void *)(a1 + 8) + 72), &v77, v13);
            unsigned int v59 = v77;
            int v60 = *(_DWORD *)(a1 + 256);
            *(void *)(a1 + 264) += v77;
            int v61 = v60 - v59;
            *(_DWORD *)(a1 + 256) = v61;
            if (v61)
            {
              uint64_t result = 0;
              int v27 = 104;
              goto LABEL_73;
            }
            *(int8x8_t *)(a1 + 352) = vrev32_s8(*(int8x8_t *)(a1 + 352));
            *(_WORD *)(a1 + 360) = bswap32(*(unsigned __int16 *)(a1 + 360)) >> 16;
            *unint64_t v4 = bswap32(*v4);
            *(_WORD *)(a1 + 366) = bswap32(*(unsigned __int16 *)(a1 + 366)) >> 16;
            unsigned int v36 = 1313820229;
          }
          void v4[4] = v36;
        }
      }
LABEL_29:
      uint64_t result = 0;
      int v27 = -1;
      goto LABEL_73;
    }
    unsigned int v16 = *(_DWORD *)(a1 + 256);
    size_t v17 = *(unsigned __int8 **)(a1 + 264);
LABEL_53:
    unsigned int v77 = v16;
    StreamBuffer::Copy((void *)(*(void *)(a1 + 8) + 72), &v77, v17);
    unsigned int v50 = v77;
    int v51 = *(_DWORD *)(a1 + 256);
    *(void *)(a1 + 264) += v77;
    int v52 = v51 - v50;
    *(_DWORD *)(a1 + 256) = v52;
    if (v52)
    {
      uint64_t result = 0;
      int v27 = 119;
LABEL_73:
      *(_DWORD *)(a1 + 236) = v27;
    }
    else
    {
      int8x16_t v53 = vrev32q_s8(*(int8x16_t *)(a1 + 384));
      *(int8x16_t *)(a1 + 384) = v53;
      *(void *)(a1 + 104) = *(void *)(a1 + 296) + v53.u32[2] + 8;
      (*(void (**)(uint64_t, unint64_t))(*(void *)a1 + 96))(a1, *(int *)(a1 + 348) - (unint64_t)v53.u32[2] - 8);
      if (*(_WORD *)(a1 + 360))
      {
        FillDescriptionFromCommonChunk(a1 + 352, (void *)(a1 + 24), *(_DWORD *)(a1 + 128), *(void **)(a1 + 120));
        uint64_t v54 = *(void *)(a1 + 8);
        unsigned int v77 = 1;
        if (!*(unsigned char *)(v54 + 105))
        {
          *(unsigned char *)(v54 + 105) = 1;
          int v55 = *(void (**)(void, void, uint64_t, unsigned int *))(v54 + 24);
          if (v55)
          {
            v55(*(void *)(v54 + 40), *(unsigned int *)(v54 + 8), 1684434292, &v77);
            uint64_t v54 = *(void *)(a1 + 8);
          }
        }
        unsigned int v77 = 1;
        uint64_t v56 = *(void (**)(void, void, uint64_t, unsigned int *))(v54 + 24);
        if (v56)
        {
          v56(*(void *)(v54 + 40), *(unsigned int *)(v54 + 8), 1650683508, &v77);
          uint64_t v57 = *(void *)(a1 + 8);
          int v58 = *(void (**)(void, void, uint64_t, unsigned int *))(v57 + 24);
          unsigned int v77 = 1;
          if (v58) {
            v58(*(void *)(v57 + 40), *(unsigned int *)(v57 + 8), 1685022310, &v77);
          }
        }
        else
        {
          unsigned int v77 = 1;
        }
        int v63 = *(_DWORD *)(a1 + 40);
        if (v63)
        {
          *(_DWORD *)(a1 + 112) = v63;
          uint64_t v64 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
          (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 80))(a1, v64 / *(unsigned int *)(a1 + 40));
          uint64_t v65 = *(void *)(a1 + 8);
          unsigned int v77 = 1;
          unint64_t v66 = *(void (**)(void, void, uint64_t, unsigned int *))(v65 + 24);
          if (v66) {
            v66(*(void *)(v65 + 40), *(unsigned int *)(v65 + 8), 1885564532, &v77);
          }
        }
        uint64_t v67 = *(void *)(a1 + 8);
        unsigned int v77 = 1;
        if (!*(_DWORD *)(v67 + 112))
        {
          *(_DWORD *)(v67 + 112) = 1;
          unsigned int v68 = *(void (**)(void, void, uint64_t, unsigned int *))(v67 + 24);
          if (v68)
          {
            v68(*(void *)(v67 + 40), *(unsigned int *)(v67 + 8), 1919247481, &v77);
            uint64_t v67 = *(void *)(a1 + 8);
          }
        }
        uint64_t v69 = 0;
        *(void *)a2 = a1;
        *(void *)(a2 + 8) = AudioFileStreamObject::GeneratePackets;
        *(void *)(a2 + 16) = 0;
        uint64_t v70 = *(void *)(v67 + 88);
        uint64_t v71 = *(void *)(v67 + 96);
        uint64_t v72 = v70 + *(unsigned int *)(v67 + 80);
        BOOL v73 = v71 < v70 || v72 <= v71;
        int v74 = v73;
        int v75 = v72 - v71;
        if (!v73 && v75) {
          uint64_t v69 = *(void *)(v67 + 72) + (v71 - v70);
        }
        uint64_t result = 0;
        *(void *)(a2 + 32) = v69;
        if (v74) {
          int v76 = 0;
        }
        else {
          int v76 = v75;
        }
        *(_DWORD *)(a2 + 24) = v76;
      }
      else
      {
        *(_DWORD *)(a1 + 236) = -1;
        return 1869640813;
      }
    }
  }
  return result;
}

void AIFFAudioStream::~AIFFAudioStream(AIFFAudioStream *this)
{
  AudioFileStreamObject::~AudioFileStreamObject(this);
  JUMPOUT(0x192FC8940);
}

void AIFFAudioStream::AIFFAudioStream(AIFFAudioStream *this)
{
  *((_DWORD *)this + 4) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = -1;
  *((void *)this + 12) = -1;
  *((void *)this + 13) = -1;
  *((void *)this + 17) = 0;
  *((_DWORD *)this + 36) = 0;
  *((void *)this + 19) = 0;
  *((_WORD *)this + 88) = 0;
  *((_DWORD *)this + 59) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((_DWORD *)this + 32) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 24) = 0;
  *((_DWORD *)this + 50) = 0;
  *((void *)this + 26) = 0;
  *((void *)this + 27) = 0;
  *((unsigned char *)this + 232) = 0;
  *((void *)this + 28) = 0;
  *((void *)this + 30) = AudioFileStreamObject::ParseHeader;
  *((void *)this + 31) = 0;
  *((_DWORD *)this + 64) = 0;
  *((void *)this + 33) = 0;
  *(void *)((char *)this + 300) = 0;
  *(void *)((char *)this + 284) = 0;
  *(void *)((char *)this + 292) = 0;
  *((_DWORD *)this + 82) = 0;
  *((void *)this + 39) = 0;
  *((void *)this + 40) = 0;
  *(void *)this = &unk_1EDF8FB88;
  *((unsigned char *)this + 400) = 0;
}

uint64_t AudioUnitPropertyMarshaller::CreateMarshaller(AudioUnitPropertyMarshaller *this)
{
  int v1 = (int)this;
  uint64_t result = 0;
  if (v1 > 2199)
  {
    if ((v1 - 2200) < 2 || v1 == 3007) {
LABEL_8:
    }
      operator new();
    if (v1 == 3099) {
      operator new();
    }
  }
  else
  {
    switch(v1)
    {
      case 0:
      case 16:
        operator new();
      case 1:
      case 5:
      case 6:
      case 7:
      case 9:
      case 10:
      case 15:
      case 17:
      case 18:
      case 23:
      case 25:
      case 27:
      case 28:
      case 29:
      case 31:
      case 33:
      case 34:
      case 35:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
        return result;
      case 2:
      case 12:
      case 20:
        goto LABEL_12;
      case 3:
      case 32:
        operator new();
      case 4:
        operator new();
      case 8:
        operator new();
      case 11:
      case 14:
      case 21:
      case 22:
      case 26:
        goto LABEL_8;
      case 13:
        operator new();
      case 19:
        operator new();
      case 24:
        operator new();
      case 30:
      case 54:
        operator new();
      case 36:
        operator new();
      case 52:
        operator new();
      case 53:
        operator new();
      default:
        if (v1 == 61) {
LABEL_12:
        }
          operator new();
        return result;
    }
  }
  return result;
}

uint64_t TArrayMarshaller<AudioUnitMeterValue>::Deserialize(Marshaller *a1, CADeserializer *this, void **a3, unsigned int *a4)
{
  int64_t v7 = this->var3 - this->var2;
  Ptr = (const void *)CADeserializer::GetAndAdvanceReadPtr(this);
  Marshaller::CheckDest(a1, a3, a4, v7 & 0xFFFFFFF0);
  memcpy(*a3, Ptr, *a4);
  return 1;
}

void TArrayMarshaller<AudioUnitMeterValue>::~TArrayMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x192FC8940);
}

void MarshalAUPreset::DeserializeT(MarshalAUPreset *this, CADeserializer *a2, AUPreset *a3)
{
  CADeserializer::Read(a2, a3);
  operator>>();
  CFStringRef presetName = a3->presetName;
  Marshaller::AddCreatedCFObject(this, presetName);
}

void MarshalAUPreset::SerializeT(MarshalAUPreset *this, CASerializer *a2, const AUPreset *a3)
{
  CASerializer::Write(a2, a3);
  operator<<();
  CFStringRef presetName = a3->presetName;
  if (presetName && *((unsigned char *)this + 32))
  {
    CFRelease(presetName);
  }
}

BOOL TMarshaller<AUPreset>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if ((*a4 | 0x10) != 0x10) {
    return 0;
  }
  Marshaller::CheckDest(a1, a3, a4, 0x10uLL);
  (*(void (**)(Marshaller *, uint64_t, void))(*(void *)a1 + 40))(a1, a2, *a3);
  return *(unsigned char *)(a2 + 32) == 0;
}

BOOL TMarshaller<AUPreset>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 16) {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  }
  return a4 == 16;
}

void MarshalAUPreset::~MarshalAUPreset(MarshalAUPreset *this)
{
  Marshaller::~Marshaller(this);
  JUMPOUT(0x192FC8940);
}

void MarshalAUPresetArray::DeserializeT(MarshalAUPresetArray *this, CADeserializer *a2, const __CFArray **a3)
{
  LODWORD(capacity) = 0;
  CADeserializer::Read(a2, &capacity);
  CFArrayCallBacks v6 = *(CFArrayCallBacks *)byte_1EDFA44E8;
  CFArrayRef v5 = CFArrayCreateMutable(0, capacity, &v6);
  if (capacity) {
    operator new();
  }
  *a3 = v5;
  Marshaller::AddCreatedCFObject(this, v5);
}

void MarshalAUPresetArray::ReleaseAUPresetArrayElement(MarshalAUPresetArray *this, CFTypeRef *a2, const void *a3)
{
  CFRelease(a2[1]);
  JUMPOUT(0x192FC8940);
}

void MarshalAUPresetArray::SerializeT(MarshalAUPresetArray *this, CASerializer *a2, CFArrayRef *a3)
{
  unsigned int Count = CFArrayGetCount(*a3);
  CASerializer::Write(a2, &Count);
  if (Count)
  {
    for (unint64_t i = 0; i < Count; ++i)
    {
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*a3, i);
      CASerializer::Write(a2, ValueAtIndex);
      operator<<();
    }
  }
  if (*a3)
  {
    if (*((unsigned char *)this + 32)) {
      CFRelease(*a3);
    }
  }
}

BOOL TMarshaller<__CFArray const*>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if ((*a4 | 8) != 8) {
    return 0;
  }
  Marshaller::CheckDest(a1, a3, a4, 8uLL);
  (*(void (**)(Marshaller *, uint64_t, void))(*(void *)a1 + 40))(a1, a2, *a3);
  return *(unsigned char *)(a2 + 32) == 0;
}

BOOL TMarshaller<__CFArray const*>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 8) {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  }
  return a4 == 8;
}

void MarshalAUPresetArray::~MarshalAUPresetArray(MarshalAUPresetArray *this)
{
  Marshaller::~Marshaller(this);
  JUMPOUT(0x192FC8940);
}

uint64_t MarshalAudioChannelLayout::Deserialize(MarshalAudioChannelLayout *this, CADeserializer *a2, void **a3, unsigned int *a4)
{
  size_t v14 = 0;
  int __src = 0;
  if (!Read(a2, (AudioChannelLayout **)&__src, &v14)) {
    return 0;
  }
  int64_t v7 = __src;
  size_t v8 = 20 * *((unsigned int *)__src + 2) + 12;
  if (*a4) {
    BOOL v9 = v8 > *a4;
  }
  else {
    BOOL v9 = 0;
  }
  BOOL v10 = !v9 && v14 >= v8;
  int v11 = !v10;
  if (v10)
  {
    Marshaller::CheckDest(this, a3, a4, 20 * *((unsigned int *)__src + 2) + 12);
    memcpy(*a3, __src, v8);
    int64_t v7 = __src;
  }
  uint64_t v12 = v11 ^ 1u;
  free(v7);
  return v12;
}

uint64_t MarshalAudioChannelLayout::Serialize(MarshalAudioChannelLayout *this, CASerializer *a2, unsigned int *a3, unsigned int a4)
{
  if (a4 < 0xC) {
    return 0;
  }
  if (20 * (unint64_t)a3[2] + 12 > a4) {
    return 0;
  }
  operator<<();
  return 1;
}

void MarshalAudioChannelLayout::~MarshalAudioChannelLayout(MarshalAudioChannelLayout *this)
{
  Marshaller::~Marshaller(this);
  JUMPOUT(0x192FC8940);
}

uint64_t TArrayMarshaller<AUChannelInfo>::Deserialize(Marshaller *a1, CADeserializer *this, void **a3, unsigned int *a4)
{
  int64_t v7 = this->var3 - this->var2;
  Ptr = (const void *)CADeserializer::GetAndAdvanceReadPtr(this);
  Marshaller::CheckDest(a1, a3, a4, v7 & 0xFFFFFFFC);
  memcpy(*a3, Ptr, *a4);
  return 1;
}

void TArrayMarshaller<AUChannelInfo>::~TArrayMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x192FC8940);
}

uint64_t TSimpleMarshaller<AudioStreamBasicDescription>::DeserializeT()
{
  return operator>>();
}

uint64_t TSimpleMarshaller<AudioStreamBasicDescription>::SerializeT()
{
  return operator<<();
}

BOOL TMarshaller<AudioStreamBasicDescription>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if (*a4 != 40 && *a4 != 0) {
    return 0;
  }
  Marshaller::CheckDest(a1, a3, a4, 0x28uLL);
  (*(void (**)(Marshaller *, uint64_t, void))(*(void *)a1 + 40))(a1, a2, *a3);
  return *(unsigned char *)(a2 + 32) == 0;
}

BOOL TMarshaller<AudioStreamBasicDescription>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 40) {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  }
  return a4 == 40;
}

void TSimpleMarshaller<AudioStreamBasicDescription>::~TSimpleMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x192FC8940);
}

uint64_t MarshalAudioUnitParameterInfo::DeserializeT(MarshalAudioUnitParameterInfo *this, CADeserializer *a2, AudioUnitParameterInfo *a3)
{
  CADeserializer::Read(a2, a3);
  operator>>();
  Marshaller::AddCreatedCFObject(this, a3->unitName);
  CADeserializer::Read(a2, &a3->clumpID);
  operator>>();
  Marshaller::AddCreatedCFObject(this, a3->cfNameString);
  AudioUnitParameterUnit v7 = kAudioUnitParameterUnit_Generic;
  CADeserializer::Read(a2, &v7);
  a3->unit = v7;
  CADeserializer::Read(a2, &a3->minValue);
  CADeserializer::Read(a2, &a3->maxValue);
  CADeserializer::Read(a2, &a3->defaultValue);
  uint64_t result = CADeserializer::Read(a2, &a3->flags);
  a3->flags |= 0x10u;
  return result;
}

uint64_t MarshalAudioUnitParameterInfo::SerializeT(MarshalAudioUnitParameterInfo *this, CASerializer *a2, const AudioUnitParameterInfo *a3)
{
  CASerializer::Write(a2, a3);
  if (a3->unit == kAudioUnitParameterUnit_CustomUnit)
  {
    operator<<();
    CFStringRef unitName = a3->unitName;
    if (unitName && *((unsigned char *)this + 32)) {
      CFRelease(unitName);
    }
  }
  else
  {
    uint64_t v10 = 0;
    operator<<();
  }
  CASerializer::Write(a2, &a3->clumpID);
  p_cfNamechar String = &a3->cfNameString;
  operator<<();
  if ((a3->flags & 0x10) != 0 && *p_cfNameString && *((unsigned char *)this + 32)) {
    CFRelease(*p_cfNameString);
  }
  AudioUnitParameterUnit unit = a3->unit;
  CASerializer::Write(a2, &unit);
  CASerializer::Write(a2, &a3->minValue);
  CASerializer::Write(a2, &a3->maxValue);
  CASerializer::Write(a2, &a3->defaultValue);
  return CASerializer::Write(a2, &a3->flags);
}

BOOL TMarshaller<AudioUnitParameterInfo>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if (*a4 != 104 && *a4 != 0) {
    return 0;
  }
  Marshaller::CheckDest(a1, a3, a4, 0x68uLL);
  (*(void (**)(Marshaller *, uint64_t, void))(*(void *)a1 + 40))(a1, a2, *a3);
  return *(unsigned char *)(a2 + 32) == 0;
}

BOOL TMarshaller<AudioUnitParameterInfo>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 104) {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  }
  return a4 == 104;
}

void MarshalAudioUnitParameterInfo::~MarshalAudioUnitParameterInfo(MarshalAudioUnitParameterInfo *this)
{
  Marshaller::~Marshaller(this);
  JUMPOUT(0x192FC8940);
}

uint64_t TPODMarshaller<AudioUnitParameterHistoryInfo>::DeserializeT(int a1, CADeserializer *this, void *a3)
{
  return CADeserializer::Read(this, a3);
}

uint64_t TPODMarshaller<AudioUnitParameterHistoryInfo>::SerializeT(int a1, CASerializer *this, void *a3)
{
  return CASerializer::Write(this, a3);
}

BOOL TMarshaller<AudioUnitParameterHistoryInfo>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if ((*a4 | 8) != 8) {
    return 0;
  }
  Marshaller::CheckDest(a1, a3, a4, 8uLL);
  (*(void (**)(Marshaller *, uint64_t, void))(*(void *)a1 + 40))(a1, a2, *a3);
  return *(unsigned char *)(a2 + 32) == 0;
}

BOOL TMarshaller<AudioUnitParameterHistoryInfo>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 8) {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  }
  return a4 == 8;
}

void TPODMarshaller<AudioUnitParameterHistoryInfo>::~TPODMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x192FC8940);
}

void TCFMarshaller<__CFString const*>::DeserializeT(Marshaller *a1, uint64_t a2, const void **a3)
{
  operator>>();
  CFArrayRef v5 = *a3;
  Marshaller::AddCreatedCFObject(a1, v5);
}

void TCFMarshaller<__CFString const*>::SerializeT(uint64_t a1, uint64_t a2, const void **a3)
{
  operator<<();
  CFArrayRef v5 = *a3;
  if (*a3 && *(unsigned char *)(a1 + 32))
  {
    CFRelease(v5);
  }
}

BOOL TMarshaller<__CFString const*>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if ((*a4 | 8) != 8) {
    return 0;
  }
  Marshaller::CheckDest(a1, a3, a4, 8uLL);
  (*(void (**)(Marshaller *, uint64_t, void))(*(void *)a1 + 40))(a1, a2, *a3);
  return *(unsigned char *)(a2 + 32) == 0;
}

BOOL TMarshaller<__CFString const*>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 8) {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  }
  return a4 == 8;
}

void TCFMarshaller<__CFString const*>::~TCFMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x192FC8940);
}

uint64_t TArrayMarshaller<AudioUnitFrequencyResponseBin>::Deserialize(Marshaller *a1, CADeserializer *this, void **a3, unsigned int *a4)
{
  int64_t v7 = this->var3 - this->var2;
  Ptr = (const void *)CADeserializer::GetAndAdvanceReadPtr(this);
  Marshaller::CheckDest(a1, a3, a4, v7 & 0xFFFFFFF0);
  memcpy(*a3, Ptr, *a4);
  return 1;
}

void TArrayMarshaller<AudioUnitFrequencyResponseBin>::~TArrayMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x192FC8940);
}

uint64_t TSimpleMarshaller<double>::DeserializeT(int a1, CADeserializer *this, void *a3)
{
  return CADeserializer::Read(this, a3);
}

uint64_t TSimpleMarshaller<double>::SerializeT(int a1, CASerializer *this, void *a3)
{
  return CASerializer::Write(this, a3);
}

BOOL TMarshaller<double>::Deserialize(Marshaller *a1, uint64_t a2, void **a3, unsigned int *a4)
{
  if ((*a4 | 8) != 8) {
    return 0;
  }
  Marshaller::CheckDest(a1, a3, a4, 8uLL);
  (*(void (**)(Marshaller *, uint64_t, void))(*(void *)a1 + 40))(a1, a2, *a3);
  return *(unsigned char *)(a2 + 32) == 0;
}

BOOL TMarshaller<double>::Serialize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 8) {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  }
  return a4 == 8;
}

void TSimpleMarshaller<double>::~TSimpleMarshaller(Marshaller *a1)
{
  Marshaller::~Marshaller(a1);
  JUMPOUT(0x192FC8940);
}

uint64_t DSPGraph::FileInjector::print(uint64_t result, void *a2, int a3, uint64_t a4)
{
  if (a3 >= 5)
  {
    int v4 = a4;
    (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)result + 32))(result, a2, a4, 1);
    DSPGraph::printi(a2, v4 + 4, "wire %p\n");
  }
  return result;
}

const char *DSPGraph::FileInjector::ClassName(DSPGraph::FileInjector *this)
{
  return "FileInjector";
}

void DSPGraph::FileInjector::~FileInjector(void **this)
{
  *this = &unk_1EDF97538;
  uint64_t v2 = this + 10;
  std::vector<std::unique_ptr<void,applesauce::raii::v1::detail::opaque_deletion_functor<void *,&(VPTimeFreqConverter_Dispose)>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  DSPGraph::SimpleABL::free((DSPGraph::SimpleABL *)(this + 2));
  JUMPOUT(0x192FC8940);
}

{
  void **v2;

  *this = &unk_1EDF97538;
  uint64_t v2 = this + 10;
  std::vector<std::unique_ptr<void,applesauce::raii::v1::detail::opaque_deletion_functor<void *,&(VPTimeFreqConverter_Dispose)>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  DSPGraph::SimpleABL::free((DSPGraph::SimpleABL *)(this + 2));
}

void std::vector<std::unique_ptr<void,applesauce::raii::v1::detail::opaque_deletion_functor<void *,&(VPTimeFreqConverter_Dispose)>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  int v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    int v4 = v1[1];
    CFArrayRef v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        int64_t v7 = (void *)*--v4;
        CFArrayCallBacks v6 = v7;
        *int v4 = 0;
        if (v7) {
          VPTimeFreqConverter_Dispose(v6);
        }
      }
      while (v4 != v2);
      CFArrayRef v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t DSPGraph::FileRecorder::print(uint64_t result, void *a2, int a3, uint64_t a4)
{
  if (a3 >= 5)
  {
    int v4 = a4;
    (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)result + 32))(result, a2, a4, 1);
    DSPGraph::printi(a2, v4 + 4, "wire %p\n");
  }
  return result;
}

const char *DSPGraph::FileRecorder::ClassName(DSPGraph::FileRecorder *this)
{
  return "FileRecorder";
}

void DSPGraph::FileRecorder::~FileRecorder(void **this)
{
  *this = &unk_1EDF97570;
  DSPGraph::SimpleABL::free((DSPGraph::SimpleABL *)(this + 9));
  char v3 = this + 6;
  std::vector<std::unique_ptr<void,applesauce::raii::v1::detail::opaque_deletion_functor<void *,&(VPTimeFreqConverter_Dispose)>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  uint64_t v2 = this[2];
  this[2] = 0;
  if (v2) {
    (*(void (**)(void *))(*(void *)v2 + 8))(v2);
  }
  JUMPOUT(0x192FC8940);
}

{
  void *v2;
  void **v3;

  *this = &unk_1EDF97570;
  DSPGraph::SimpleABL::free((DSPGraph::SimpleABL *)(this + 9));
  char v3 = this + 6;
  std::vector<std::unique_ptr<void,applesauce::raii::v1::detail::opaque_deletion_functor<void *,&(VPTimeFreqConverter_Dispose)>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  uint64_t v2 = this[2];
  this[2] = 0;
  if (v2) {
    (*(void (**)(void *))(*(void *)v2 + 8))(v2);
  }
}

void *std::vector<std::unique_ptr<void,applesauce::raii::v1::detail::opaque_deletion_functor<void *,&(VPTimeFreqConverter_Dispose)>>>::reserve(void *result, unint64_t a2)
{
  if (a2 > (uint64_t)(result[2] - *result) >> 3)
  {
    uint64_t v2 = (char **)result;
    uint64_t v3 = result[1] - *result;
    long long v15 = result + 2;
    int v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(a2);
    int64_t v7 = *v2;
    CFArrayCallBacks v6 = v2[1];
    if (v6 == *v2)
    {
      int64x2_t v10 = vdupq_n_s64((unint64_t)v6);
      size_t v8 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    }
    else
    {
      size_t v8 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
      do
      {
        uint64_t v9 = *((void *)v6 - 1);
        v6 -= 8;
        *(void *)CFArrayCallBacks v6 = 0;
        *((void *)v8 - 1) = v9;
        v8 -= 8;
      }
      while (v6 != v7);
      int64x2_t v10 = *(int64x2_t *)v2;
    }
    void *v2 = v8;
    v2[1] = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    int64x2_t v13 = v10;
    int v11 = v2[2];
    v2[2] = &v4[8 * v5];
    size_t v14 = v11;
    uint64_t v12 = v10.i64[0];
    return (void *)std::__split_buffer<std::unique_ptr<void,applesauce::raii::v1::detail::opaque_deletion_functor<void *,&(VPTimeFreqConverter_Dispose)>>>::~__split_buffer((uint64_t)&v12);
  }
  return result;
}

uint64_t std::__split_buffer<std::unique_ptr<void,applesauce::raii::v1::detail::opaque_deletion_functor<void *,&(VPTimeFreqConverter_Dispose)>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    int v4 = *(void **)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      VPTimeFreqConverter_Dispose(v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void DSPGraph::FileInjector::inject(DSPGraph::FileInjector *this, unsigned int a2)
{
  unsigned int v4 = *((_DWORD *)this + 8);
  if (!v4)
  {
    kdebug_trace();
    unsigned int v4 = *((_DWORD *)this + 8);
  }
  unsigned int v5 = *((_DWORD *)this + 10);
  CFArrayCallBacks v6 = (void *)*((void *)this + 1);
  if (v5 <= v4)
  {
    uint64_t v18 = v6[7];
    size_t v19 = *(_DWORD **)(v18 + 80);
    if (v19 && *v19)
    {
      unint64_t v20 = 0;
      size_t v21 = *((_DWORD *)this + 9) * a2;
      uint64_t v22 = 4;
      do
      {
        bzero(*(void **)&v19[v22], v21);
        ++v20;
        size_t v19 = *(_DWORD **)(v18 + 80);
        v22 += 4;
      }
      while (v20 < *v19);
    }
  }
  else
  {
    uint64_t v7 = v6[15];
    if (*(_DWORD *)(v7 + 8) == 1718773105)
    {
      if (*(_DWORD *)(v7 + 40) != a2)
      {
        std::string::basic_string[abi:ne180100]<0>(&v25, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Files.cpp");
        std::string::basic_string[abi:ne180100]<0>(&v24, "inject");
        std::string::basic_string[abi:ne180100]<0>(&v23, "inNumFrames != blockSize.");
        DSPGraph::ThrowException(1718188065, (long long *)&v25, 160, &v24, &v23);
      }
      size_t v8 = (_DWORD *)*((void *)this + 2);
      uint64_t v9 = *(void *)(*(void *)(*(void *)(v6[4] + 16) + 8) + 16);
      unsigned int v10 = *(_DWORD *)(v9 + 268);
      if (v10 == 1) {
        unsigned int v10 = *(_DWORD *)(v9 + 272);
      }
      if (*v8)
      {
        unint64_t v11 = 0;
        uint64_t v12 = *(void *)(v6[7] + 80);
        uint64_t v13 = *((_DWORD *)this + 9) * v4;
        uint64_t v14 = v10;
        uint64_t v15 = 4;
        do
        {
          unsigned int v16 = (float *)(*(void *)(v12 + v15 * 4) + 4 * v14);
          v25.realp = *(float **)(v12 + v15 * 4);
          v25.imagp = v16;
          VPTimeFreqConverter_Analyze(*(void *)(*((void *)this + 10) + 8 * v11++), (const void *)(*(void *)&v8[v15] + v13), &v25);
          v15 += 4;
        }
        while (v11 < *v8);
        unsigned int v4 = *((_DWORD *)this + 8);
        unsigned int v5 = *((_DWORD *)this + 10);
      }
      unsigned int v17 = v4 + a2;
      *((_DWORD *)this + 8) = v17;
    }
    else
    {
      if (v5 - v4 < a2) {
        a2 = v5 - v4;
      }
      DSPGraph::SimpleABL::copy((unsigned int **)this + 2, (unsigned int **)(v6[7] + 80), *((_DWORD *)this + 9) * v4, 0, *((_DWORD *)this + 9) * a2, 1);
      unsigned int v17 = *((_DWORD *)this + 8) + a2;
      *((_DWORD *)this + 8) = v17;
      unsigned int v5 = *((_DWORD *)this + 10);
    }
    if (v17 == v5)
    {
      kdebug_trace();
      unsigned int v17 = *((_DWORD *)this + 8);
      unsigned int v5 = *((_DWORD *)this + 10);
    }
    if (v17 >= v5)
    {
      if (*((unsigned char *)this + 72)) {
        *((_DWORD *)this + 8) = 0;
      }
    }
  }
}

void sub_190077714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void *___Z16NewAudioCapturer20AudioCapturerOptionsPKcS1_jPK27AudioStreamBasicDescriptionRS3__block_invoke_6224()
{
  uint64_t result = dlopen("/usr/local/lib/libAudioDiagnostics.dylib", 5);
  if (result)
  {
    uint64_t result = dlsym(result, "NewAudioCapturerImpl");
    if (result) {
      NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::sImplFunctiouint64_t n = (uint64_t (*)(void, void, void, void, void, void))result;
    }
  }
  return result;
}

uint64_t DSPGraph::FileRecorder::record(uint64_t this, uint64_t a2)
{
  if (*(unsigned char *)(this + 88))
  {
    uint64_t v2 = this;
    this = *(void *)(this + 16);
    if (this)
    {
      uint64_t v4 = *(void *)(v2 + 8);
      uint64_t v5 = *(void *)(v4 + 56);
      uint64_t v6 = (uint64_t)*(double *)(v5 + 8);
      if (*(void *)(v2 + 48) == *(void *)(v2 + 56))
      {
        uint64_t v15 = *(uint64_t (**)(void))(*(void *)this + 96);
        return v15();
      }
      else
      {
        uint64_t v7 = *(void *)(*(void *)(*(void *)(*(void *)(v4 + 32) + 16) + 8) + 16);
        unsigned int v8 = *(_DWORD *)(v7 + 268);
        if (v8 == 1) {
          unsigned int v8 = *(_DWORD *)(v7 + 272);
        }
        uint64_t v9 = *(_DWORD **)(v5 + 80);
        uint64_t v10 = *(void *)(v2 + 72);
        if (*v9)
        {
          unint64_t v11 = 0;
          uint64_t v12 = v8;
          uint64_t v13 = 4;
          do
          {
            uint64_t v14 = (float *)(*(void *)&v9[v13] + 4 * v12);
            v16.realp = *(float **)&v9[v13];
            v16.imagp = v14;
            VPTimeFreqConverter_Synthesize(*(void *)(*(void *)(v2 + 48) + 8 * v11++), &v16, *(void **)(v10 + v13 * 4));
            v13 += 4;
          }
          while (v11 < *v9);
          this = *(void *)(v2 + 16);
        }
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t))(*(void *)this + 96))(this, a2, v10, *(unsigned __int8 *)(v2 + 89), v6);
      }
    }
  }
  return this;
}

uint64_t DSPGraph::Port::print(uint64_t result, void *a2, int a3, uint64_t a4)
{
  if (a3 >= 3)
  {
    int v4 = a4;
    (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)result + 32))(result, a2, a4, 1);
    DSPGraph::printi(a2, v4 + 4, "box %p\n");
  }
  return result;
}

const char *DSPGraph::Port::ClassName(DSPGraph::Port *this)
{
  return "Port";
}

uint64_t DSPGraph::OutputPort::getFormatFromUnit(DSPGraph::OutputPort *this)
{
  return (*(uint64_t (**)(void, uint64_t, void))(**((void **)this + 1) + 456))(*((void *)this + 1), 2, *((unsigned int *)this + 6));
}

const char *DSPGraph::OutputPort::ClassName(DSPGraph::OutputPort *this)
{
  return "OutputPort";
}

void DSPGraph::OutputPort::~OutputPort(DSPGraph::OutputPort *this)
{
}

uint64_t DSPGraph::InputPort::getFormatFromUnit(DSPGraph::InputPort *this)
{
  return (*(uint64_t (**)(void, uint64_t, void))(**((void **)this + 1) + 456))(*((void *)this + 1), 1, *((unsigned int *)this + 6));
}

const char *DSPGraph::InputPort::ClassName(DSPGraph::InputPort *this)
{
  return "InputPort";
}

void DSPGraph::InputPort::~InputPort(DSPGraph::InputPort *this)
{
}

uint64_t DSPGraph::Port::Port(uint64_t this, DSPGraph::Box *a2, int a3)
{
  *(void *)this = &unk_1EDF9C4D0;
  *(void *)(this + 8) = a2;
  *(void *)(this + 16) = 0;
  *(_DWORD *)(this + 24) = a3;
  return this;
}

void DSPGraph::InputPort::detach(DSPGraph::InputPort *this)
{
  if ((*(uint64_t (**)(DSPGraph::InputPort *))(*(void *)this + 40))(this))
  {
    uint64_t v2 = (uint64_t *)((*(uint64_t (**)(DSPGraph::InputPort *))(*(void *)this + 40))(this) + 16);
    std::__hash_table<RegistrarClientProcess *,std::hash<RegistrarClientProcess *>,std::equal_to<RegistrarClientProcess *>,std::allocator<RegistrarClientProcess *>>::__erase_unique<RegistrarClientProcess *>(v2, (unint64_t)this);
  }
}

uint64_t MP4BoxParser_EditListExcludingPrimingAndRemainderFrames::Init(MP4BoxParser **this)
{
  uint64_t result = MP4BoxParser_Full::Initialize((MP4BoxParser_Full *)this);
  if (!result)
  {
    if (*((_DWORD *)this + 5) == 1701606260)
    {
      unsigned int v3 = (*((uint64_t (**)(MP4BoxParser **))*this + 3))(this);
      uint64_t result = MP4BoxParser::ReadDataSourceBytes(this[1], v3, 4uLL, (char *)this + 60);
      if (!result)
      {
        unsigned int v4 = 0;
        *((_DWORD *)this + 15) = bswap32(*((_DWORD *)this + 15));
        do
        {
          if (*((unsigned char *)this + 56) == 1)
          {
            int Entry = MP4BoxParser_EditList::GetEntry((MP4BoxParser_EditList *)this, v4, &v10);
            uint64_t result = 1717660012;
            if (Entry)
            {
              __int32 v6 = v10.i32[2];
              if ((v10.i64[1] & 0x8000000000000000) == 0)
              {
                uint64_t result = 0;
                *((_DWORD *)this + 16) = v10.i32[0];
                *((_DWORD *)this + 17) = v6;
                *((_DWORD *)this + 18) = v11;
                return result;
              }
LABEL_11:
              uint64_t result = 0;
            }
          }
          else
          {
            int v7 = MP4BoxParser_EditList::GetEntry((MP4BoxParser_EditList *)this, v4, &v10);
            uint64_t result = 1717660012;
            if (v7)
            {
              __int32 v8 = v10.i32[1];
              if ((v10.i32[1] & 0x80000000) == 0)
              {
                uint64_t result = 0;
                __int32 v9 = v10.i32[2];
                *((_DWORD *)this + 16) = v10.i32[0];
                *((_DWORD *)this + 17) = v8;
                *((_DWORD *)this + 18) = v9;
                return result;
              }
              goto LABEL_11;
            }
          }
          ++v4;
        }
        while (!result);
      }
    }
    else
    {
      return 4294967294;
    }
  }
  return result;
}

uint64_t MP4BoxParser_EditList::GetEntry(MP4BoxParser_EditList *this, unsigned int a2, int8x16_t *a3)
{
  if (*((_DWORD *)this + 15) <= a2) {
    return 0;
  }
  unsigned int v6 = (*(uint64_t (**)(MP4BoxParser_EditList *))(*(void *)this + 24))(this);
  unint64_t v7 = *((unsigned char *)this + 56) == 1 ? 20 : 12;
  if (MP4BoxParser::ReadDataSourceBytes(*((MP4BoxParser **)this + 1), v7 * a2 + (unint64_t)v6 + 4, v7, a3))return 0; {
  if (*((unsigned char *)this + 56) == 1)
  }
  {
    *a3 = vrev64q_s8(*a3);
    a3[1].i16[0] = bswap32(a3[1].u16[0]) >> 16;
    __int32 v9 = &a3[1].i16[1];
  }
  else
  {
    *(int8x8_t *)a3->i8 = vrev32_s8(*(int8x8_t *)a3->i8);
    a3->i16[4] = bswap32(a3->u16[4]) >> 16;
    __int32 v9 = &a3->i16[5];
  }
  *__int32 v9 = bswap32((unsigned __int16)*v9) >> 16;
  return 1;
}

void MP4BoxParser_EditListExcludingPrimingAndRemainderFrames::~MP4BoxParser_EditListExcludingPrimingAndRemainderFrames(MP4BoxParser_EditListExcludingPrimingAndRemainderFrames *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDF8DA18;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  JUMPOUT(0x192FC8940);
}

{
  uint64_t v2;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDF8DA18;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

void MP4BoxParser_EditListExcludingPrimingAndRemainderFrames::MP4BoxParser_EditListExcludingPrimingAndRemainderFrames(MP4BoxParser_EditListExcludingPrimingAndRemainderFrames *this, DataSource *a2, uint64_t a3)
{
  *(void *)this = &unk_1EDF8DA18;
  (*(void (**)(DataSource *, uint64_t))(*(void *)a2 + 88))(a2, a3);
  *((unsigned char *)this + 16) = 0;
  *((_DWORD *)this + 5) = 0;
  *((void *)this + 3) = 0;
  *((unsigned char *)this + 32) = 0;
  *((_DWORD *)this + 9) = 8;
  *((_DWORD *)this + 15) = 0;
  *(void *)this = &unk_1EDF94BC8;
}

uint64_t Resampler2::SetRamp(uint64_t this, const RateRamp *a2, __n128 a3)
{
  uint64_t v3 = this;
  if (a2)
  {
    if (*(unsigned char *)(this + 184))
    {
      if (*(double *)(this + 136) < 0.0) {
        *(void *)(this + 136) = 0;
      }
      long long v5 = *((_OWORD *)a2 + 1);
      long long v4 = *((_OWORD *)a2 + 2);
      long long v6 = *(_OWORD *)a2;
      *(void *)(this + 256) = *((void *)a2 + 6);
      *(_OWORD *)(this + 224) = v5;
      *(_OWORD *)(this + 240) = v4;
      *(_OWORD *)(this + 208) = v6;
      *(double *)&long long v4 = (*(double *)(this + 208) + *(double *)(this + 216)) * 0.5;
      *(void *)(this + 168) = v4;
      *(double *)(this + 176) = 1.0 / *(double *)&v4;
      *(unsigned char *)(this + 133) = 0;
      *(unsigned char *)(this + 264) = 1;
      Resampler2::SetConverterFunction(this);
      double v7 = *(double *)(v3 + 168);
      return Resampler2::SetVarispeedSinc(v3, v7);
    }
  }
  else
  {
    *(unsigned char *)(this + 264) = 0;
    a3.n128_u64[0] = *(void *)(this + 168);
    __int32 v8 = *(uint64_t (**)(__n128))(*(void *)this + 56);
    return v8(a3);
  }
  return this;
}

uint64_t Resampler2::SetVarispeedSinc(uint64_t this, double a2)
{
  if (a2 <= 1.0)
  {
    uint64_t v2 = 0;
  }
  else if (a2 <= 7.98)
  {
    uint64_t v2 = sVarispeedRateTable[vcvtpd_s64_f64(a2 * 100.0) - 100];
  }
  else
  {
    uint64_t v2 = 35;
  }
  unsigned int v3 = *(_DWORD *)(this + 112) + 1;
  if (v3 >= 0x20) {
    unsigned int v4 = (v3 >> 5) - 1;
  }
  else {
    unsigned int v4 = 0;
  }
  *(void *)(this + 56) = *(void *)(**((void **)&sVarispeedSincKernels + v4) + 8 * v2);
  return this;
}

uint64_t Resampler2::ConvertScalar<Resampler2::FixedRate>(uint64_t a1, float *a2, _DWORD *a3, int a4, int a5)
{
  uint64_t v10 = *(void *)(a1 + 80);
  uint64_t v11 = *(void *)(a1 + 88);
  double v12 = *(double *)(a1 + 160);
  double v13 = *(double *)(a1 + 168);
  double v14 = (double)*(int *)(*(void *)(a1 + 56) + 16);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
  if (a3)
  {
    if (a4 >= 1)
    {
      int v16 = 0;
      uint64_t v17 = **(void **)(a1 + 56);
      do
      {
        double v18 = (v12 - (double)(int)v12) * v14;
        size_t v19 = (float *)(v17 + 4 * (int)result * (int)v18);
        unint64_t v20 = &v19[(int)result];
        size_t v21 = (float *)(v10 + 4 * (int)v12);
        uint64_t v22 = (float *)(v11 + 4 * (int)v12);
        if ((int)result < 32)
        {
          float v28 = 0.0;
          float v27 = 0.0;
          float v26 = 0.0;
          int v25 = result;
          float v24 = 0.0;
        }
        else
        {
          uint64_t v23 = 0;
          float v24 = 0.0;
          int v25 = result;
          float v26 = 0.0;
          float v27 = 0.0;
          float v28 = 0.0;
          do
          {
            float v29 = v21[v23];
            float v30 = v21[v23 + 1];
            float v31 = v19[v23];
            float v32 = v19[v23 + 1];
            float v33 = v28 + (float)(v29 * v31);
            float v34 = v20[v23];
            float v35 = v20[v23 + 1];
            float v36 = v27 + (float)(v29 * v34);
            float v37 = v22[v23];
            float v38 = v22[v23 + 1];
            float v39 = v33 + (float)(v30 * v32);
            float v40 = v36 + (float)(v30 * v35);
            float v41 = (float)(v26 + (float)(v37 * v31)) + (float)(v38 * v32);
            float v42 = (float)(v24 + (float)(v37 * v34)) + (float)(v38 * v35);
            float v43 = v21[v23 + 2];
            float v44 = v21[v23 + 3];
            float v45 = v19[v23 + 2];
            float v46 = v19[v23 + 3];
            float v47 = v20[v23 + 2];
            float v48 = v20[v23 + 3];
            float v49 = v22[v23 + 2];
            float v50 = v22[v23 + 3];
            float v51 = (float)(v39 + (float)(v43 * v45)) + (float)(v44 * v46);
            float v52 = (float)(v40 + (float)(v43 * v47)) + (float)(v44 * v48);
            float v53 = (float)(v41 + (float)(v49 * v45)) + (float)(v50 * v46);
            float v54 = (float)(v42 + (float)(v49 * v47)) + (float)(v50 * v48);
            float v55 = v21[v23 + 4];
            float v56 = v21[v23 + 5];
            float v57 = v19[v23 + 4];
            float v58 = v19[v23 + 5];
            float v59 = v20[v23 + 4];
            float v60 = v20[v23 + 5];
            float v61 = v51 + (float)(v55 * v57);
            float v62 = v52 + (float)(v55 * v59);
            float v63 = v22[v23 + 4];
            float v64 = v22[v23 + 5];
            float v65 = v61 + (float)(v56 * v58);
            float v66 = v62 + (float)(v56 * v60);
            float v67 = (float)(v53 + (float)(v63 * v57)) + (float)(v64 * v58);
            float v68 = (float)(v54 + (float)(v63 * v59)) + (float)(v64 * v60);
            float v69 = v21[v23 + 6];
            float v70 = v21[v23 + 7];
            float v71 = v19[v23 + 6];
            float v72 = v19[v23 + 7];
            float v73 = v65 + (float)(v69 * v71);
            float v74 = v20[v23 + 6];
            float v75 = v20[v23 + 7];
            float v76 = v66 + (float)(v69 * v74);
            float v77 = v22[v23 + 6];
            float v78 = v22[v23 + 7];
            float v79 = v73 + (float)(v70 * v72);
            float v80 = v76 + (float)(v70 * v75);
            float v81 = (float)(v67 + (float)(v77 * v71)) + (float)(v78 * v72);
            float v82 = (float)(v68 + (float)(v77 * v74)) + (float)(v78 * v75);
            float v83 = v21[v23 + 8];
            float v84 = v21[v23 + 9];
            float v85 = v19[v23 + 8];
            float v86 = v19[v23 + 9];
            float v87 = v20[v23 + 8];
            float v88 = v20[v23 + 9];
            float v89 = v22[v23 + 8];
            float v90 = v22[v23 + 9];
            float v91 = (float)(v79 + (float)(v83 * v85)) + (float)(v84 * v86);
            float v92 = (float)(v80 + (float)(v83 * v87)) + (float)(v84 * v88);
            float v93 = (float)(v81 + (float)(v89 * v85)) + (float)(v90 * v86);
            float v94 = (float)(v82 + (float)(v89 * v87)) + (float)(v90 * v88);
            float v95 = v21[v23 + 10];
            float v96 = v21[v23 + 11];
            float v97 = v19[v23 + 10];
            float v98 = v19[v23 + 11];
            float v99 = v20[v23 + 10];
            float v100 = v20[v23 + 11];
            float v101 = v91 + (float)(v95 * v97);
            float v102 = v92 + (float)(v95 * v99);
            float v103 = v22[v23 + 10];
            float v104 = v22[v23 + 11];
            float v105 = v101 + (float)(v96 * v98);
            float v106 = v102 + (float)(v96 * v100);
            float v107 = (float)(v93 + (float)(v103 * v97)) + (float)(v104 * v98);
            float v108 = (float)(v94 + (float)(v103 * v99)) + (float)(v104 * v100);
            float v109 = v21[v23 + 12];
            float v110 = v21[v23 + 13];
            float v111 = v19[v23 + 12];
            float v112 = v19[v23 + 13];
            float v113 = v105 + (float)(v109 * v111);
            float v114 = v20[v23 + 12];
            float v115 = v20[v23 + 13];
            float v116 = v106 + (float)(v109 * v114);
            float v117 = v22[v23 + 12];
            float v118 = v22[v23 + 13];
            float v119 = v113 + (float)(v110 * v112);
            float v120 = v116 + (float)(v110 * v115);
            float v121 = (float)(v107 + (float)(v117 * v111)) + (float)(v118 * v112);
            float v122 = (float)(v108 + (float)(v117 * v114)) + (float)(v118 * v115);
            float v123 = v21[v23 + 14];
            float v124 = v21[v23 + 15];
            float v125 = v19[v23 + 14];
            float v126 = v19[v23 + 15];
            float v127 = v20[v23 + 14];
            float v128 = v20[v23 + 15];
            float v129 = v22[v23 + 14];
            float v130 = v22[v23 + 15];
            float v131 = (float)(v119 + (float)(v123 * v125)) + (float)(v124 * v126);
            float v132 = (float)(v120 + (float)(v123 * v127)) + (float)(v124 * v128);
            float v133 = (float)(v121 + (float)(v129 * v125)) + (float)(v130 * v126);
            float v134 = (float)(v122 + (float)(v129 * v127)) + (float)(v130 * v128);
            float v135 = v21[v23 + 16];
            float v136 = v21[v23 + 17];
            float v137 = v19[v23 + 16];
            float v138 = v19[v23 + 17];
            float v139 = v20[v23 + 16];
            float v140 = v20[v23 + 17];
            float v141 = v131 + (float)(v135 * v137);
            float v142 = v132 + (float)(v135 * v139);
            float v143 = v22[v23 + 16];
            float v144 = v22[v23 + 17];
            float v145 = v141 + (float)(v136 * v138);
            float v146 = v142 + (float)(v136 * v140);
            float v147 = (float)(v133 + (float)(v143 * v137)) + (float)(v144 * v138);
            float v148 = (float)(v134 + (float)(v143 * v139)) + (float)(v144 * v140);
            float v149 = v21[v23 + 18];
            float v150 = v21[v23 + 19];
            float v151 = v19[v23 + 18];
            float v152 = v19[v23 + 19];
            float v153 = v145 + (float)(v149 * v151);
            float v154 = v20[v23 + 18];
            float v155 = v20[v23 + 19];
            float v156 = v146 + (float)(v149 * v154);
            float v157 = v22[v23 + 18];
            float v158 = v22[v23 + 19];
            float v159 = v153 + (float)(v150 * v152);
            float v160 = v156 + (float)(v150 * v155);
            float v161 = (float)(v147 + (float)(v157 * v151)) + (float)(v158 * v152);
            float v162 = (float)(v148 + (float)(v157 * v154)) + (float)(v158 * v155);
            float v163 = v21[v23 + 20];
            float v164 = v21[v23 + 21];
            float v165 = v19[v23 + 20];
            float v166 = v19[v23 + 21];
            float v167 = v20[v23 + 20];
            float v168 = v20[v23 + 21];
            float v169 = v22[v23 + 20];
            float v170 = v22[v23 + 21];
            float v171 = (float)(v159 + (float)(v163 * v165)) + (float)(v164 * v166);
            float v172 = (float)(v160 + (float)(v163 * v167)) + (float)(v164 * v168);
            float v173 = (float)(v161 + (float)(v169 * v165)) + (float)(v170 * v166);
            float v174 = (float)(v162 + (float)(v169 * v167)) + (float)(v170 * v168);
            float v175 = v21[v23 + 22];
            float v176 = v21[v23 + 23];
            float v177 = v19[v23 + 22];
            float v178 = v19[v23 + 23];
            float v179 = v20[v23 + 22];
            float v180 = v20[v23 + 23];
            float v181 = v171 + (float)(v175 * v177);
            float v182 = v172 + (float)(v175 * v179);
            float v183 = v22[v23 + 22];
            float v184 = v22[v23 + 23];
            float v185 = v181 + (float)(v176 * v178);
            float v186 = v182 + (float)(v176 * v180);
            float v187 = (float)(v173 + (float)(v183 * v177)) + (float)(v184 * v178);
            float v188 = (float)(v174 + (float)(v183 * v179)) + (float)(v184 * v180);
            float v189 = v21[v23 + 24];
            float v190 = v21[v23 + 25];
            float v191 = v19[v23 + 24];
            float v192 = v19[v23 + 25];
            float v193 = v185 + (float)(v189 * v191);
            float v194 = v20[v23 + 24];
            float v195 = v20[v23 + 25];
            float v196 = v186 + (float)(v189 * v194);
            float v197 = v22[v23 + 24];
            float v198 = v22[v23 + 25];
            float v199 = v193 + (float)(v190 * v192);
            float v200 = v196 + (float)(v190 * v195);
            float v201 = (float)(v187 + (float)(v197 * v191)) + (float)(v198 * v192);
            float v202 = (float)(v188 + (float)(v197 * v194)) + (float)(v198 * v195);
            float v203 = v21[v23 + 26];
            float v204 = v21[v23 + 27];
            float v205 = v19[v23 + 26];
            float v206 = v19[v23 + 27];
            float v207 = v20[v23 + 26];
            float v208 = v20[v23 + 27];
            float v209 = v22[v23 + 26];
            float v210 = v22[v23 + 27];
            float v211 = (float)(v199 + (float)(v203 * v205)) + (float)(v204 * v206);
            float v212 = (float)(v200 + (float)(v203 * v207)) + (float)(v204 * v208);
            float v213 = (float)(v201 + (float)(v209 * v205)) + (float)(v210 * v206);
            float v214 = (float)(v202 + (float)(v209 * v207)) + (float)(v210 * v208);
            float v215 = v21[v23 + 28];
            float v216 = v21[v23 + 29];
            float v217 = v19[v23 + 28];
            float v218 = v19[v23 + 29];
            float v219 = v20[v23 + 28];
            float v220 = v20[v23 + 29];
            float v221 = v211 + (float)(v215 * v217);
            float v222 = v212 + (float)(v215 * v219);
            float v223 = v22[v23 + 28];
            float v224 = v22[v23 + 29];
            float v225 = v221 + (float)(v216 * v218);
            float v226 = v222 + (float)(v216 * v220);
            float v227 = (float)(v213 + (float)(v223 * v217)) + (float)(v224 * v218);
            float v228 = (float)(v214 + (float)(v223 * v219)) + (float)(v224 * v220);
            float v229 = v21[v23 + 30];
            float v230 = v21[v23 + 31];
            float v231 = v19[v23 + 30];
            float v232 = v19[v23 + 31];
            float v233 = v225 + (float)(v229 * v231);
            float v234 = v20[v23 + 30];
            float v235 = v20[v23 + 31];
            float v236 = v226 + (float)(v229 * v234);
            float v237 = v22[v23 + 30];
            float v238 = v22[v23 + 31];
            float v28 = v233 + (float)(v230 * v232);
            float v27 = v236 + (float)(v230 * v235);
            unsigned int v239 = v25;
            float v26 = (float)(v227 + (float)(v237 * v231)) + (float)(v238 * v232);
            float v24 = (float)(v228 + (float)(v237 * v234)) + (float)(v238 * v235);
            v25 -= 32;
            v23 += 32;
          }
          while (v239 > 0x3F);
          uint64_t v22 = (float *)((char *)v22 + v23 * 4);
          size_t v21 = (float *)((char *)v21 + v23 * 4);
          unint64_t v20 = (float *)((char *)v20 + v23 * 4);
          size_t v19 = (float *)((char *)v19 + v23 * 4);
        }
        if (v25 >= 16)
        {
          unsigned int v240 = v25 + 16;
          do
          {
            float v241 = v21[1];
            float v242 = v19[1];
            float v243 = v20[1];
            float v244 = v22[1];
            float v245 = (float)(v28 + (float)(*v21 * *v19)) + (float)(v241 * v242);
            float v246 = (float)(v27 + (float)(*v21 * *v20)) + (float)(v241 * v243);
            float v247 = (float)(v26 + (float)(*v22 * *v19)) + (float)(v244 * v242);
            float v248 = (float)(v24 + (float)(*v22 * *v20)) + (float)(v244 * v243);
            float v249 = v21[2];
            float v250 = v21[3];
            float v251 = v19[2];
            float v252 = v19[3];
            float v253 = v245 + (float)(v249 * v251);
            float v254 = v20[2];
            float v255 = v20[3];
            float v256 = v246 + (float)(v249 * v254);
            float v257 = v22[2];
            float v258 = v22[3];
            float v259 = v253 + (float)(v250 * v252);
            float v260 = v256 + (float)(v250 * v255);
            float v261 = (float)(v247 + (float)(v257 * v251)) + (float)(v258 * v252);
            float v262 = (float)(v248 + (float)(v257 * v254)) + (float)(v258 * v255);
            float v263 = v21[4];
            float v264 = v21[5];
            float v265 = v19[4];
            float v266 = v19[5];
            float v267 = v259 + (float)(v263 * v265);
            float v268 = v20[4];
            float v269 = v20[5];
            float v270 = v260 + (float)(v263 * v268);
            float v271 = v22[4];
            float v272 = v22[5];
            float v273 = v267 + (float)(v264 * v266);
            float v274 = v270 + (float)(v264 * v269);
            float v275 = (float)(v261 + (float)(v271 * v265)) + (float)(v272 * v266);
            float v276 = (float)(v262 + (float)(v271 * v268)) + (float)(v272 * v269);
            float v277 = v21[6];
            float v278 = v21[7];
            float v279 = v19[6];
            float v280 = v19[7];
            float v281 = v273 + (float)(v277 * v279);
            float v282 = v20[6];
            float v283 = v20[7];
            float v284 = v274 + (float)(v277 * v282);
            float v285 = v22[6];
            float v286 = v22[7];
            float v287 = v281 + (float)(v278 * v280);
            float v288 = v284 + (float)(v278 * v283);
            float v289 = (float)(v275 + (float)(v285 * v279)) + (float)(v286 * v280);
            float v290 = (float)(v276 + (float)(v285 * v282)) + (float)(v286 * v283);
            float v291 = v21[8];
            float v292 = v21[9];
            float v293 = v19[8];
            float v294 = v19[9];
            float v295 = v287 + (float)(v291 * v293);
            float v296 = v20[8];
            float v297 = v20[9];
            float v298 = v288 + (float)(v291 * v296);
            float v299 = v22[8];
            float v300 = v22[9];
            float v301 = v295 + (float)(v292 * v294);
            float v302 = v298 + (float)(v292 * v297);
            float v303 = (float)(v289 + (float)(v299 * v293)) + (float)(v300 * v294);
            float v304 = (float)(v290 + (float)(v299 * v296)) + (float)(v300 * v297);
            float v305 = v21[10];
            float v306 = v21[11];
            float v307 = v19[10];
            float v308 = v19[11];
            float v309 = v301 + (float)(v305 * v307);
            float v310 = v20[10];
            float v311 = v20[11];
            float v312 = v302 + (float)(v305 * v310);
            float v313 = v22[10];
            float v314 = v22[11];
            float v315 = v309 + (float)(v306 * v308);
            float v316 = v312 + (float)(v306 * v311);
            float v317 = (float)(v303 + (float)(v313 * v307)) + (float)(v314 * v308);
            float v318 = (float)(v304 + (float)(v313 * v310)) + (float)(v314 * v311);
            float v319 = v21[12];
            float v320 = v21[13];
            float v321 = v19[12];
            float v322 = v19[13];
            float v323 = v315 + (float)(v319 * v321);
            float v324 = v20[12];
            float v325 = v20[13];
            float v326 = v316 + (float)(v319 * v324);
            float v327 = v22[12];
            float v328 = v22[13];
            float v329 = v323 + (float)(v320 * v322);
            float v330 = v326 + (float)(v320 * v325);
            float v331 = (float)(v317 + (float)(v327 * v321)) + (float)(v328 * v322);
            float v332 = (float)(v318 + (float)(v327 * v324)) + (float)(v328 * v325);
            float v333 = v21[14];
            float v334 = v21[15];
            float v335 = v19[14];
            float v336 = v19[15];
            float v337 = v329 + (float)(v333 * v335);
            float v338 = v20[14];
            float v339 = v20[15];
            float v340 = v330 + (float)(v333 * v338);
            float v341 = v22[14];
            float v342 = v22[15];
            float v28 = v337 + (float)(v334 * v336);
            float v27 = v340 + (float)(v334 * v339);
            float v26 = (float)(v331 + (float)(v341 * v335)) + (float)(v342 * v336);
            v240 -= 16;
            v21 += 16;
            float v24 = (float)(v332 + (float)(v341 * v338)) + (float)(v342 * v339);
            v19 += 16;
            v20 += 16;
            v22 += 16;
          }
          while (v240 > 0x1F);
        }
        double v343 = v18 - (double)(int)v18;
        float v344 = v28 + v343 * (float)(v27 - v28);
        *a2 = v344;
        a2 += a5;
        *(float *)&double v343 = v26 + v343 * (float)(v24 - v26);
        *a3 = LODWORD(v343);
        a3 += a5;
        double v12 = v13 + v12;
        ++v16;
      }
      while (v16 != a4);
    }
  }
  else if (a4 >= 1)
  {
    int v345 = 0;
    uint64_t v346 = **(void **)(a1 + 56);
    do
    {
      double v347 = (v12 - (double)(int)v12) * v14;
      uint64_t v348 = (float *)(v346 + 4 * (int)result * (int)v347);
      unint64_t v349 = &v348[(int)result];
      uint64_t v350 = (float *)(v10 + 4 * (int)v12);
      if ((int)result < 32)
      {
        float v354 = 0.0;
        float v352 = 0.0;
        int v353 = result;
      }
      else
      {
        uint64_t v351 = 0;
        float v352 = 0.0;
        int v353 = result;
        float v354 = 0.0;
        do
        {
          float v355 = v350[v351];
          float v356 = v350[v351 + 1];
          float v357 = (float)(v354 + (float)(v355 * v348[v351])) + (float)(v356 * v348[v351 + 1]);
          float v358 = (float)(v352 + (float)(v355 * v349[v351])) + (float)(v356 * v349[v351 + 1]);
          float v359 = v350[v351 + 2];
          float v360 = v350[v351 + 3];
          float v361 = (float)(v357 + (float)(v359 * v348[v351 + 2])) + (float)(v360 * v348[v351 + 3]);
          float v362 = (float)(v358 + (float)(v359 * v349[v351 + 2])) + (float)(v360 * v349[v351 + 3]);
          float v363 = v350[v351 + 4];
          float v364 = v350[v351 + 5];
          float v365 = (float)(v361 + (float)(v363 * v348[v351 + 4])) + (float)(v364 * v348[v351 + 5]);
          float v366 = (float)(v362 + (float)(v363 * v349[v351 + 4])) + (float)(v364 * v349[v351 + 5]);
          float v367 = v350[v351 + 6];
          float v368 = v350[v351 + 7];
          float v369 = (float)(v365 + (float)(v367 * v348[v351 + 6])) + (float)(v368 * v348[v351 + 7]);
          float v370 = (float)(v366 + (float)(v367 * v349[v351 + 6])) + (float)(v368 * v349[v351 + 7]);
          float v371 = v350[v351 + 8];
          float v372 = v350[v351 + 9];
          float v373 = (float)(v369 + (float)(v371 * v348[v351 + 8])) + (float)(v372 * v348[v351 + 9]);
          float v374 = (float)(v370 + (float)(v371 * v349[v351 + 8])) + (float)(v372 * v349[v351 + 9]);
          float v375 = v350[v351 + 10];
          float v376 = v350[v351 + 11];
          float v377 = (float)(v373 + (float)(v375 * v348[v351 + 10])) + (float)(v376 * v348[v351 + 11]);
          float v378 = (float)(v374 + (float)(v375 * v349[v351 + 10])) + (float)(v376 * v349[v351 + 11]);
          float v379 = v350[v351 + 12];
          float v380 = v350[v351 + 13];
          float v381 = (float)(v377 + (float)(v379 * v348[v351 + 12])) + (float)(v380 * v348[v351 + 13]);
          float v382 = (float)(v378 + (float)(v379 * v349[v351 + 12])) + (float)(v380 * v349[v351 + 13]);
          float v383 = v350[v351 + 14];
          float v384 = v350[v351 + 15];
          float v385 = (float)(v381 + (float)(v383 * v348[v351 + 14])) + (float)(v384 * v348[v351 + 15]);
          float v386 = (float)(v382 + (float)(v383 * v349[v351 + 14])) + (float)(v384 * v349[v351 + 15]);
          float v387 = v350[v351 + 16];
          float v388 = v350[v351 + 17];
          float v389 = (float)(v385 + (float)(v387 * v348[v351 + 16])) + (float)(v388 * v348[v351 + 17]);
          float v390 = (float)(v386 + (float)(v387 * v349[v351 + 16])) + (float)(v388 * v349[v351 + 17]);
          float v391 = v350[v351 + 18];
          float v392 = v350[v351 + 19];
          float v393 = (float)(v389 + (float)(v391 * v348[v351 + 18])) + (float)(v392 * v348[v351 + 19]);
          float v394 = (float)(v390 + (float)(v391 * v349[v351 + 18])) + (float)(v392 * v349[v351 + 19]);
          float v395 = v350[v351 + 20];
          float v396 = v350[v351 + 21];
          float v397 = (float)(v393 + (float)(v395 * v348[v351 + 20])) + (float)(v396 * v348[v351 + 21]);
          float v398 = (float)(v394 + (float)(v395 * v349[v351 + 20])) + (float)(v396 * v349[v351 + 21]);
          float v399 = v350[v351 + 22];
          float v400 = v350[v351 + 23];
          float v401 = (float)(v397 + (float)(v399 * v348[v351 + 22])) + (float)(v400 * v348[v351 + 23]);
          float v402 = (float)(v398 + (float)(v399 * v349[v351 + 22])) + (float)(v400 * v349[v351 + 23]);
          float v403 = v350[v351 + 24];
          float v404 = v350[v351 + 25];
          float v405 = (float)(v401 + (float)(v403 * v348[v351 + 24])) + (float)(v404 * v348[v351 + 25]);
          float v406 = (float)(v402 + (float)(v403 * v349[v351 + 24])) + (float)(v404 * v349[v351 + 25]);
          float v407 = v350[v351 + 26];
          float v408 = v350[v351 + 27];
          float v409 = (float)(v405 + (float)(v407 * v348[v351 + 26])) + (float)(v408 * v348[v351 + 27]);
          float v410 = (float)(v406 + (float)(v407 * v349[v351 + 26])) + (float)(v408 * v349[v351 + 27]);
          float v411 = v350[v351 + 28];
          float v412 = v350[v351 + 29];
          float v413 = (float)(v409 + (float)(v411 * v348[v351 + 28])) + (float)(v412 * v348[v351 + 29]);
          float v414 = (float)(v410 + (float)(v411 * v349[v351 + 28])) + (float)(v412 * v349[v351 + 29]);
          float v415 = v350[v351 + 30];
          float v416 = v350[v351 + 31];
          float v354 = (float)(v413 + (float)(v415 * v348[v351 + 30])) + (float)(v416 * v348[v351 + 31]);
          unsigned int v417 = v353;
          float v352 = (float)(v414 + (float)(v415 * v349[v351 + 30])) + (float)(v416 * v349[v351 + 31]);
          v353 -= 32;
          v351 += 32;
        }
        while (v417 > 0x3F);
        uint64_t v350 = (float *)((char *)v350 + v351 * 4);
        unint64_t v349 = (float *)((char *)v349 + v351 * 4);
        uint64_t v348 = (float *)((char *)v348 + v351 * 4);
      }
      if (v353 >= 16)
      {
        unsigned int v418 = v353 + 16;
        do
        {
          float v419 = v350[1];
          float v420 = (float)(v354 + (float)(*v350 * *v348)) + (float)(v419 * v348[1]);
          float v421 = (float)(v352 + (float)(*v350 * *v349)) + (float)(v419 * v349[1]);
          float v422 = v350[2];
          float v423 = v350[3];
          float v424 = (float)(v420 + (float)(v422 * v348[2])) + (float)(v423 * v348[3]);
          float v425 = (float)(v421 + (float)(v422 * v349[2])) + (float)(v423 * v349[3]);
          float v426 = v350[4];
          float v427 = v350[5];
          float v428 = (float)(v424 + (float)(v426 * v348[4])) + (float)(v427 * v348[5]);
          float v429 = (float)(v425 + (float)(v426 * v349[4])) + (float)(v427 * v349[5]);
          float v430 = v350[6];
          float v431 = v350[7];
          float v432 = (float)(v428 + (float)(v430 * v348[6])) + (float)(v431 * v348[7]);
          float v433 = (float)(v429 + (float)(v430 * v349[6])) + (float)(v431 * v349[7]);
          float v434 = v350[8];
          float v435 = v350[9];
          float v436 = (float)(v432 + (float)(v434 * v348[8])) + (float)(v435 * v348[9]);
          float v437 = (float)(v433 + (float)(v434 * v349[8])) + (float)(v435 * v349[9]);
          float v438 = v350[10];
          float v439 = v350[11];
          float v440 = (float)(v436 + (float)(v438 * v348[10])) + (float)(v439 * v348[11]);
          float v441 = (float)(v437 + (float)(v438 * v349[10])) + (float)(v439 * v349[11]);
          float v442 = v350[12];
          float v443 = v350[13];
          float v444 = (float)(v440 + (float)(v442 * v348[12])) + (float)(v443 * v348[13]);
          float v445 = (float)(v441 + (float)(v442 * v349[12])) + (float)(v443 * v349[13]);
          float v446 = v350[14];
          float v447 = v350[15];
          float v354 = (float)(v444 + (float)(v446 * v348[14])) + (float)(v447 * v348[15]);
          v418 -= 16;
          float v352 = (float)(v445 + (float)(v446 * v349[14])) + (float)(v447 * v349[15]);
          v350 += 16;
          v348 += 16;
          v349 += 16;
        }
        while (v418 > 0x1F);
      }
      float v448 = v347 - (double)(int)v347;
      *a2 = v354 + (float)(v448 * (float)(v352 - v354));
      a2 += a5;
      double v12 = v13 + v12;
      ++v345;
    }
    while (v345 != a4);
  }
  *(double *)(a1 + 160) = v12;
  return result;
}

uint64_t Resampler2::ConvertScalar<Resampler2::RampedRate>(uint64_t a1, float *a2, _DWORD *a3, int a4, int a5)
{
  long long v10 = *(_OWORD *)(a1 + 224);
  v456[0] = *(_OWORD *)(a1 + 208);
  v456[1] = v10;
  v456[2] = *(_OWORD *)(a1 + 240);
  uint64_t v457 = *(void *)(a1 + 256);
  RateRamp::OffsetTimes((RateRamp *)v456, -*(double *)(a1 + 136), -*(double *)(a1 + 272));
  double v458 = (double)*(int *)(a1 + 72);
  uint64_t v11 = *(void *)(a1 + 80);
  uint64_t v12 = *(void *)(a1 + 88);
  double v13 = *(double *)(a1 + 160);
  double v14 = (double)*(int *)(*(void *)(a1 + 56) + 16);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
  int v16 = result;
  if (a3)
  {
    if (a4 >= 1)
    {
      int v17 = 0;
      double v18 = 0.0;
      do
      {
        RateRamp::RateForOutputTime((RateRamp *)v456, (double)(int)v18);
        *(double *)(a1 + 168) = v19;
        Resampler2::SetVarispeedSinc(a1, v19);
        uint64_t result = RateRamp::InputTimeForOutputTime((RateRamp *)v456, v18);
        double v21 = fmax(v20, 0.0);
        if (v21 >= v458) {
          double v13 = v458;
        }
        else {
          double v13 = v21;
        }
        double v22 = (v13 - (double)(int)v13) * v14;
        uint64_t v23 = (float *)(**(void **)(a1 + 56) + 4 * v16 * (int)v22);
        float v24 = &v23[v16];
        int v25 = (float *)(v11 + 4 * (int)v13);
        float v26 = (float *)(v12 + 4 * (int)v13);
        if (v16 < 32)
        {
          float v32 = 0.0;
          float v31 = 0.0;
          float v30 = 0.0;
          int v29 = v16;
          float v28 = 0.0;
        }
        else
        {
          uint64_t v27 = 0;
          float v28 = 0.0;
          int v29 = v16;
          float v30 = 0.0;
          float v31 = 0.0;
          float v32 = 0.0;
          do
          {
            uint64_t result = (uint64_t)&v23[v27];
            float v33 = v25[v27];
            float v34 = v25[v27 + 1];
            float v35 = v23[v27];
            float v36 = v23[v27 + 1];
            float v37 = v32 + (float)(v33 * v35);
            float v38 = v24[v27];
            float v39 = v24[v27 + 1];
            float v40 = v31 + (float)(v33 * v38);
            float v41 = v26[v27];
            float v42 = v26[v27 + 1];
            float v43 = v37 + (float)(v34 * v36);
            float v44 = v40 + (float)(v34 * v39);
            float v45 = (float)(v30 + (float)(v41 * v35)) + (float)(v42 * v36);
            float v46 = (float)(v28 + (float)(v41 * v38)) + (float)(v42 * v39);
            float v47 = v25[v27 + 2];
            float v48 = v25[v27 + 3];
            float v49 = v23[v27 + 2];
            float v50 = v23[v27 + 3];
            float v51 = v24[v27 + 2];
            float v52 = v24[v27 + 3];
            float v53 = v26[v27 + 2];
            float v54 = v26[v27 + 3];
            float v55 = (float)(v43 + (float)(v47 * v49)) + (float)(v48 * v50);
            float v56 = (float)(v44 + (float)(v47 * v51)) + (float)(v48 * v52);
            float v57 = (float)(v45 + (float)(v53 * v49)) + (float)(v54 * v50);
            float v58 = (float)(v46 + (float)(v53 * v51)) + (float)(v54 * v52);
            float v59 = v25[v27 + 4];
            float v60 = v25[v27 + 5];
            float v61 = v23[v27 + 4];
            float v62 = v23[v27 + 5];
            float v63 = v24[v27 + 4];
            float v64 = v24[v27 + 5];
            float v65 = v55 + (float)(v59 * v61);
            float v66 = v56 + (float)(v59 * v63);
            float v67 = v26[v27 + 4];
            float v68 = v26[v27 + 5];
            float v69 = v65 + (float)(v60 * v62);
            float v70 = v66 + (float)(v60 * v64);
            float v71 = (float)(v57 + (float)(v67 * v61)) + (float)(v68 * v62);
            float v72 = (float)(v58 + (float)(v67 * v63)) + (float)(v68 * v64);
            float v73 = v25[v27 + 6];
            float v74 = v25[v27 + 7];
            float v75 = v23[v27 + 6];
            float v76 = v23[v27 + 7];
            float v77 = v69 + (float)(v73 * v75);
            float v78 = v24[v27 + 6];
            float v79 = v24[v27 + 7];
            float v80 = v70 + (float)(v73 * v78);
            float v81 = v26[v27 + 6];
            float v82 = v26[v27 + 7];
            float v83 = v77 + (float)(v74 * v76);
            float v84 = v80 + (float)(v74 * v79);
            float v85 = (float)(v71 + (float)(v81 * v75)) + (float)(v82 * v76);
            float v86 = (float)(v72 + (float)(v81 * v78)) + (float)(v82 * v79);
            float v87 = v25[v27 + 8];
            float v88 = v25[v27 + 9];
            float v89 = v23[v27 + 8];
            float v90 = v23[v27 + 9];
            float v91 = v24[v27 + 8];
            float v92 = v24[v27 + 9];
            float v93 = v26[v27 + 8];
            float v94 = v26[v27 + 9];
            float v95 = (float)(v83 + (float)(v87 * v89)) + (float)(v88 * v90);
            float v96 = (float)(v84 + (float)(v87 * v91)) + (float)(v88 * v92);
            float v97 = (float)(v85 + (float)(v93 * v89)) + (float)(v94 * v90);
            float v98 = (float)(v86 + (float)(v93 * v91)) + (float)(v94 * v92);
            float v99 = v25[v27 + 10];
            float v100 = v25[v27 + 11];
            float v101 = v23[v27 + 10];
            float v102 = v23[v27 + 11];
            float v103 = v24[v27 + 10];
            float v104 = v24[v27 + 11];
            float v105 = v95 + (float)(v99 * v101);
            float v106 = v96 + (float)(v99 * v103);
            float v107 = v26[v27 + 10];
            float v108 = v26[v27 + 11];
            float v109 = v105 + (float)(v100 * v102);
            float v110 = v106 + (float)(v100 * v104);
            float v111 = (float)(v97 + (float)(v107 * v101)) + (float)(v108 * v102);
            float v112 = (float)(v98 + (float)(v107 * v103)) + (float)(v108 * v104);
            float v113 = v25[v27 + 12];
            float v114 = v25[v27 + 13];
            float v115 = v23[v27 + 12];
            float v116 = v23[v27 + 13];
            float v117 = v109 + (float)(v113 * v115);
            float v118 = v24[v27 + 12];
            float v119 = v24[v27 + 13];
            float v120 = v110 + (float)(v113 * v118);
            float v121 = v26[v27 + 12];
            float v122 = v26[v27 + 13];
            float v123 = v117 + (float)(v114 * v116);
            float v124 = v120 + (float)(v114 * v119);
            float v125 = (float)(v111 + (float)(v121 * v115)) + (float)(v122 * v116);
            float v126 = (float)(v112 + (float)(v121 * v118)) + (float)(v122 * v119);
            float v127 = v25[v27 + 14];
            float v128 = v25[v27 + 15];
            float v129 = v23[v27 + 14];
            float v130 = v23[v27 + 15];
            float v131 = v24[v27 + 14];
            float v132 = v24[v27 + 15];
            float v133 = v26[v27 + 14];
            float v134 = v26[v27 + 15];
            float v135 = (float)(v123 + (float)(v127 * v129)) + (float)(v128 * v130);
            float v136 = (float)(v124 + (float)(v127 * v131)) + (float)(v128 * v132);
            float v137 = (float)(v125 + (float)(v133 * v129)) + (float)(v134 * v130);
            float v138 = (float)(v126 + (float)(v133 * v131)) + (float)(v134 * v132);
            float v139 = v25[v27 + 16];
            float v140 = v25[v27 + 17];
            float v141 = v23[v27 + 16];
            float v142 = v23[v27 + 17];
            float v143 = v24[v27 + 16];
            float v144 = v24[v27 + 17];
            float v145 = v135 + (float)(v139 * v141);
            float v146 = v136 + (float)(v139 * v143);
            float v147 = v26[v27 + 16];
            float v148 = v26[v27 + 17];
            float v149 = v145 + (float)(v140 * v142);
            float v150 = v146 + (float)(v140 * v144);
            float v151 = (float)(v137 + (float)(v147 * v141)) + (float)(v148 * v142);
            float v152 = (float)(v138 + (float)(v147 * v143)) + (float)(v148 * v144);
            float v153 = v25[v27 + 18];
            float v154 = v25[v27 + 19];
            float v155 = v23[v27 + 18];
            float v156 = v23[v27 + 19];
            float v157 = v149 + (float)(v153 * v155);
            float v158 = v24[v27 + 18];
            float v159 = v24[v27 + 19];
            float v160 = v150 + (float)(v153 * v158);
            float v161 = v26[v27 + 18];
            float v162 = v26[v27 + 19];
            float v163 = v157 + (float)(v154 * v156);
            float v164 = v160 + (float)(v154 * v159);
            float v165 = (float)(v151 + (float)(v161 * v155)) + (float)(v162 * v156);
            float v166 = (float)(v152 + (float)(v161 * v158)) + (float)(v162 * v159);
            float v167 = v25[v27 + 20];
            float v168 = v25[v27 + 21];
            float v169 = v23[v27 + 20];
            float v170 = v23[v27 + 21];
            float v171 = v24[v27 + 20];
            float v172 = v24[v27 + 21];
            float v173 = v26[v27 + 20];
            float v174 = v26[v27 + 21];
            float v175 = (float)(v163 + (float)(v167 * v169)) + (float)(v168 * v170);
            float v176 = (float)(v164 + (float)(v167 * v171)) + (float)(v168 * v172);
            float v177 = (float)(v165 + (float)(v173 * v169)) + (float)(v174 * v170);
            float v178 = (float)(v166 + (float)(v173 * v171)) + (float)(v174 * v172);
            float v179 = v25[v27 + 22];
            float v180 = v25[v27 + 23];
            float v181 = v23[v27 + 22];
            float v182 = v23[v27 + 23];
            float v183 = v24[v27 + 22];
            float v184 = v24[v27 + 23];
            float v185 = v175 + (float)(v179 * v181);
            float v186 = v176 + (float)(v179 * v183);
            float v187 = v26[v27 + 22];
            float v188 = v26[v27 + 23];
            float v189 = v185 + (float)(v180 * v182);
            float v190 = v186 + (float)(v180 * v184);
            float v191 = (float)(v177 + (float)(v187 * v181)) + (float)(v188 * v182);
            float v192 = (float)(v178 + (float)(v187 * v183)) + (float)(v188 * v184);
            float v193 = v25[v27 + 24];
            float v194 = v25[v27 + 25];
            float v195 = v23[v27 + 24];
            float v196 = v23[v27 + 25];
            float v197 = v189 + (float)(v193 * v195);
            float v198 = v24[v27 + 24];
            float v199 = v24[v27 + 25];
            float v200 = v190 + (float)(v193 * v198);
            float v201 = v26[v27 + 24];
            float v202 = v26[v27 + 25];
            float v203 = v197 + (float)(v194 * v196);
            float v204 = v200 + (float)(v194 * v199);
            float v205 = (float)(v191 + (float)(v201 * v195)) + (float)(v202 * v196);
            float v206 = (float)(v192 + (float)(v201 * v198)) + (float)(v202 * v199);
            float v207 = v25[v27 + 26];
            float v208 = v25[v27 + 27];
            float v209 = v23[v27 + 26];
            float v210 = v23[v27 + 27];
            float v211 = v24[v27 + 26];
            float v212 = v24[v27 + 27];
            float v213 = v26[v27 + 26];
            float v214 = v26[v27 + 27];
            float v215 = (float)(v203 + (float)(v207 * v209)) + (float)(v208 * v210);
            float v216 = (float)(v204 + (float)(v207 * v211)) + (float)(v208 * v212);
            float v217 = (float)(v205 + (float)(v213 * v209)) + (float)(v214 * v210);
            float v218 = (float)(v206 + (float)(v213 * v211)) + (float)(v214 * v212);
            float v219 = v25[v27 + 28];
            float v220 = v25[v27 + 29];
            float v221 = v23[v27 + 28];
            float v222 = v23[v27 + 29];
            float v223 = v24[v27 + 28];
            float v224 = v24[v27 + 29];
            float v225 = v215 + (float)(v219 * v221);
            float v226 = v216 + (float)(v219 * v223);
            float v227 = v26[v27 + 28];
            float v228 = v26[v27 + 29];
            float v229 = v225 + (float)(v220 * v222);
            float v230 = v226 + (float)(v220 * v224);
            float v231 = (float)(v217 + (float)(v227 * v221)) + (float)(v228 * v222);
            float v232 = (float)(v218 + (float)(v227 * v223)) + (float)(v228 * v224);
            float v233 = v25[v27 + 30];
            float v234 = v25[v27 + 31];
            float v235 = v23[v27 + 30];
            float v236 = v23[v27 + 31];
            float v237 = v229 + (float)(v233 * v235);
            float v238 = v24[v27 + 30];
            float v239 = v24[v27 + 31];
            float v240 = v230 + (float)(v233 * v238);
            float v241 = v26[v27 + 30];
            float v242 = v26[v27 + 31];
            float v32 = v237 + (float)(v234 * v236);
            float v31 = v240 + (float)(v234 * v239);
            unsigned int v243 = v29;
            float v30 = (float)(v231 + (float)(v241 * v235)) + (float)(v242 * v236);
            float v28 = (float)(v232 + (float)(v241 * v238)) + (float)(v242 * v239);
            v29 -= 32;
            v27 += 32;
          }
          while (v243 > 0x3F);
          float v26 = (float *)((char *)v26 + v27 * 4);
          int v25 = (float *)((char *)v25 + v27 * 4);
          float v24 = (float *)((char *)v24 + v27 * 4);
          uint64_t v23 = (float *)((char *)v23 + v27 * 4);
        }
        if (v29 >= 16)
        {
          unsigned int v244 = v29 + 16;
          do
          {
            float v245 = v25[1];
            float v246 = v23[1];
            float v247 = v24[1];
            float v248 = v26[1];
            float v249 = (float)(v32 + (float)(*v25 * *v23)) + (float)(v245 * v246);
            float v250 = (float)(v31 + (float)(*v25 * *v24)) + (float)(v245 * v247);
            float v251 = (float)(v30 + (float)(*v26 * *v23)) + (float)(v248 * v246);
            float v252 = (float)(v28 + (float)(*v26 * *v24)) + (float)(v248 * v247);
            float v253 = v25[2];
            float v254 = v25[3];
            float v255 = v23[2];
            float v256 = v23[3];
            float v257 = v249 + (float)(v253 * v255);
            float v258 = v24[2];
            float v259 = v24[3];
            float v260 = v250 + (float)(v253 * v258);
            float v261 = v26[2];
            float v262 = v26[3];
            float v263 = v257 + (float)(v254 * v256);
            float v264 = v260 + (float)(v254 * v259);
            float v265 = (float)(v251 + (float)(v261 * v255)) + (float)(v262 * v256);
            float v266 = (float)(v252 + (float)(v261 * v258)) + (float)(v262 * v259);
            float v267 = v25[4];
            float v268 = v25[5];
            float v269 = v23[4];
            float v270 = v23[5];
            float v271 = v263 + (float)(v267 * v269);
            float v272 = v24[4];
            float v273 = v24[5];
            float v274 = v264 + (float)(v267 * v272);
            float v275 = v26[4];
            float v276 = v26[5];
            float v277 = v271 + (float)(v268 * v270);
            float v278 = v274 + (float)(v268 * v273);
            float v279 = (float)(v265 + (float)(v275 * v269)) + (float)(v276 * v270);
            float v280 = (float)(v266 + (float)(v275 * v272)) + (float)(v276 * v273);
            float v281 = v25[6];
            float v282 = v25[7];
            float v283 = v23[6];
            float v284 = v23[7];
            float v285 = v277 + (float)(v281 * v283);
            float v286 = v24[6];
            float v287 = v24[7];
            float v288 = v278 + (float)(v281 * v286);
            float v289 = v26[6];
            float v290 = v26[7];
            float v291 = v285 + (float)(v282 * v284);
            float v292 = v288 + (float)(v282 * v287);
            float v293 = (float)(v279 + (float)(v289 * v283)) + (float)(v290 * v284);
            float v294 = (float)(v280 + (float)(v289 * v286)) + (float)(v290 * v287);
            float v295 = v25[8];
            float v296 = v25[9];
            float v297 = v23[8];
            float v298 = v23[9];
            float v299 = v291 + (float)(v295 * v297);
            float v300 = v24[8];
            float v301 = v24[9];
            float v302 = v292 + (float)(v295 * v300);
            float v303 = v26[8];
            float v304 = v26[9];
            float v305 = v299 + (float)(v296 * v298);
            float v306 = v302 + (float)(v296 * v301);
            float v307 = (float)(v293 + (float)(v303 * v297)) + (float)(v304 * v298);
            float v308 = (float)(v294 + (float)(v303 * v300)) + (float)(v304 * v301);
            float v309 = v25[10];
            float v310 = v25[11];
            float v311 = v23[10];
            float v312 = v23[11];
            float v313 = v305 + (float)(v309 * v311);
            float v314 = v24[10];
            float v315 = v24[11];
            float v316 = v306 + (float)(v309 * v314);
            float v317 = v26[10];
            float v318 = v26[11];
            float v319 = v313 + (float)(v310 * v312);
            float v320 = v316 + (float)(v310 * v315);
            float v321 = (float)(v307 + (float)(v317 * v311)) + (float)(v318 * v312);
            float v322 = (float)(v308 + (float)(v317 * v314)) + (float)(v318 * v315);
            float v323 = v25[12];
            float v324 = v25[13];
            float v325 = v23[12];
            float v326 = v23[13];
            float v327 = v319 + (float)(v323 * v325);
            float v328 = v24[12];
            float v329 = v24[13];
            float v330 = v320 + (float)(v323 * v328);
            float v331 = v26[12];
            float v332 = v26[13];
            float v333 = v327 + (float)(v324 * v326);
            float v334 = v330 + (float)(v324 * v329);
            float v335 = (float)(v321 + (float)(v331 * v325)) + (float)(v332 * v326);
            float v336 = (float)(v322 + (float)(v331 * v328)) + (float)(v332 * v329);
            float v337 = v25[14];
            float v338 = v25[15];
            float v339 = v23[14];
            float v340 = v23[15];
            float v341 = v333 + (float)(v337 * v339);
            float v342 = v24[14];
            float v343 = v24[15];
            float v344 = v334 + (float)(v337 * v342);
            float v345 = v26[14];
            float v346 = v26[15];
            float v32 = v341 + (float)(v338 * v340);
            float v31 = v344 + (float)(v338 * v343);
            float v30 = (float)(v335 + (float)(v345 * v339)) + (float)(v346 * v340);
            v244 -= 16;
            v25 += 16;
            float v28 = (float)(v336 + (float)(v345 * v342)) + (float)(v346 * v343);
            v23 += 16;
            v24 += 16;
            v26 += 16;
          }
          while (v244 > 0x1F);
        }
        double v347 = v22 - (double)(int)v22;
        float v348 = v32 + v347 * (float)(v31 - v32);
        *a2 = v348;
        a2 += a5;
        *(float *)&double v347 = v30 + v347 * (float)(v28 - v30);
        *a3 = LODWORD(v347);
        a3 += a5;
        ++v17;
        double v18 = v18 + 1.0;
      }
      while (v17 != a4);
    }
  }
  else if (a4 >= 1)
  {
    int v349 = 0;
    double v350 = 0.0;
    do
    {
      RateRamp::RateForOutputTime((RateRamp *)v456, (double)(int)v350);
      *(double *)(a1 + 168) = v351;
      Resampler2::SetVarispeedSinc(a1, v351);
      uint64_t result = RateRamp::InputTimeForOutputTime((RateRamp *)v456, v350);
      double v353 = fmax(v352, 0.0);
      if (v353 >= v458) {
        double v13 = v458;
      }
      else {
        double v13 = v353;
      }
      double v354 = (v13 - (double)(int)v13) * v14;
      float v355 = (float *)(**(void **)(a1 + 56) + 4 * v16 * (int)v354);
      float v356 = &v355[v16];
      float v357 = (float *)(v11 + 4 * (int)v13);
      if (v16 < 32)
      {
        float v361 = 0.0;
        float v359 = 0.0;
        int v360 = v16;
      }
      else
      {
        uint64_t v358 = 0;
        float v359 = 0.0;
        int v360 = v16;
        float v361 = 0.0;
        do
        {
          float v362 = v357[v358];
          float v363 = v357[v358 + 1];
          float v364 = (float)(v361 + (float)(v362 * v355[v358])) + (float)(v363 * v355[v358 + 1]);
          float v365 = (float)(v359 + (float)(v362 * v356[v358])) + (float)(v363 * v356[v358 + 1]);
          float v366 = v357[v358 + 2];
          float v367 = v357[v358 + 3];
          float v368 = (float)(v364 + (float)(v366 * v355[v358 + 2])) + (float)(v367 * v355[v358 + 3]);
          float v369 = (float)(v365 + (float)(v366 * v356[v358 + 2])) + (float)(v367 * v356[v358 + 3]);
          float v370 = v357[v358 + 4];
          float v371 = v357[v358 + 5];
          float v372 = (float)(v368 + (float)(v370 * v355[v358 + 4])) + (float)(v371 * v355[v358 + 5]);
          float v373 = (float)(v369 + (float)(v370 * v356[v358 + 4])) + (float)(v371 * v356[v358 + 5]);
          float v374 = v357[v358 + 6];
          float v375 = v357[v358 + 7];
          float v376 = (float)(v372 + (float)(v374 * v355[v358 + 6])) + (float)(v375 * v355[v358 + 7]);
          float v377 = (float)(v373 + (float)(v374 * v356[v358 + 6])) + (float)(v375 * v356[v358 + 7]);
          float v378 = v357[v358 + 8];
          float v379 = v357[v358 + 9];
          float v380 = (float)(v376 + (float)(v378 * v355[v358 + 8])) + (float)(v379 * v355[v358 + 9]);
          float v381 = (float)(v377 + (float)(v378 * v356[v358 + 8])) + (float)(v379 * v356[v358 + 9]);
          float v382 = v357[v358 + 10];
          float v383 = v357[v358 + 11];
          float v384 = (float)(v380 + (float)(v382 * v355[v358 + 10])) + (float)(v383 * v355[v358 + 11]);
          float v385 = (float)(v381 + (float)(v382 * v356[v358 + 10])) + (float)(v383 * v356[v358 + 11]);
          float v386 = v357[v358 + 12];
          float v387 = v357[v358 + 13];
          float v388 = (float)(v384 + (float)(v386 * v355[v358 + 12])) + (float)(v387 * v355[v358 + 13]);
          float v389 = (float)(v385 + (float)(v386 * v356[v358 + 12])) + (float)(v387 * v356[v358 + 13]);
          float v390 = v357[v358 + 14];
          float v391 = v357[v358 + 15];
          float v392 = (float)(v388 + (float)(v390 * v355[v358 + 14])) + (float)(v391 * v355[v358 + 15]);
          float v393 = (float)(v389 + (float)(v390 * v356[v358 + 14])) + (float)(v391 * v356[v358 + 15]);
          float v394 = v357[v358 + 16];
          float v395 = v357[v358 + 17];
          float v396 = (float)(v392 + (float)(v394 * v355[v358 + 16])) + (float)(v395 * v355[v358 + 17]);
          float v397 = (float)(v393 + (float)(v394 * v356[v358 + 16])) + (float)(v395 * v356[v358 + 17]);
          float v398 = v357[v358 + 18];
          float v399 = v357[v358 + 19];
          float v400 = (float)(v396 + (float)(v398 * v355[v358 + 18])) + (float)(v399 * v355[v358 + 19]);
          float v401 = (float)(v397 + (float)(v398 * v356[v358 + 18])) + (float)(v399 * v356[v358 + 19]);
          float v402 = v357[v358 + 20];
          float v403 = v357[v358 + 21];
          float v404 = (float)(v400 + (float)(v402 * v355[v358 + 20])) + (float)(v403 * v355[v358 + 21]);
          float v405 = (float)(v401 + (float)(v402 * v356[v358 + 20])) + (float)(v403 * v356[v358 + 21]);
          float v406 = v357[v358 + 22];
          float v407 = v357[v358 + 23];
          float v408 = (float)(v404 + (float)(v406 * v355[v358 + 22])) + (float)(v407 * v355[v358 + 23]);
          float v409 = (float)(v405 + (float)(v406 * v356[v358 + 22])) + (float)(v407 * v356[v358 + 23]);
          float v410 = v357[v358 + 24];
          float v411 = v357[v358 + 25];
          float v412 = (float)(v408 + (float)(v410 * v355[v358 + 24])) + (float)(v411 * v355[v358 + 25]);
          float v413 = (float)(v409 + (float)(v410 * v356[v358 + 24])) + (float)(v411 * v356[v358 + 25]);
          float v414 = v357[v358 + 26];
          float v415 = v357[v358 + 27];
          float v416 = (float)(v412 + (float)(v414 * v355[v358 + 26])) + (float)(v415 * v355[v358 + 27]);
          float v417 = (float)(v413 + (float)(v414 * v356[v358 + 26])) + (float)(v415 * v356[v358 + 27]);
          float v418 = v357[v358 + 28];
          float v419 = v357[v358 + 29];
          float v420 = (float)(v416 + (float)(v418 * v355[v358 + 28])) + (float)(v419 * v355[v358 + 29]);
          float v421 = (float)(v417 + (float)(v418 * v356[v358 + 28])) + (float)(v419 * v356[v358 + 29]);
          float v422 = v357[v358 + 30];
          float v423 = v357[v358 + 31];
          float v361 = (float)(v420 + (float)(v422 * v355[v358 + 30])) + (float)(v423 * v355[v358 + 31]);
          unsigned int v424 = v360;
          float v359 = (float)(v421 + (float)(v422 * v356[v358 + 30])) + (float)(v423 * v356[v358 + 31]);
          v360 -= 32;
          v358 += 32;
        }
        while (v424 > 0x3F);
        float v357 = (float *)((char *)v357 + v358 * 4);
        float v356 = (float *)((char *)v356 + v358 * 4);
        float v355 = (float *)((char *)v355 + v358 * 4);
      }
      if (v360 >= 16)
      {
        unsigned int v425 = v360 + 16;
        do
        {
          float v426 = v357[1];
          float v427 = (float)(v361 + (float)(*v357 * *v355)) + (float)(v426 * v355[1]);
          float v428 = (float)(v359 + (float)(*v357 * *v356)) + (float)(v426 * v356[1]);
          float v429 = v357[2];
          float v430 = v357[3];
          float v431 = (float)(v427 + (float)(v429 * v355[2])) + (float)(v430 * v355[3]);
          float v432 = (float)(v428 + (float)(v429 * v356[2])) + (float)(v430 * v356[3]);
          float v433 = v357[4];
          float v434 = v357[5];
          float v435 = (float)(v431 + (float)(v433 * v355[4])) + (float)(v434 * v355[5]);
          float v436 = (float)(v432 + (float)(v433 * v356[4])) + (float)(v434 * v356[5]);
          float v437 = v357[6];
          float v438 = v357[7];
          float v439 = (float)(v435 + (float)(v437 * v355[6])) + (float)(v438 * v355[7]);
          float v440 = (float)(v436 + (float)(v437 * v356[6])) + (float)(v438 * v356[7]);
          float v441 = v357[8];
          float v442 = v357[9];
          float v443 = (float)(v439 + (float)(v441 * v355[8])) + (float)(v442 * v355[9]);
          float v444 = (float)(v440 + (float)(v441 * v356[8])) + (float)(v442 * v356[9]);
          float v445 = v357[10];
          float v446 = v357[11];
          float v447 = (float)(v443 + (float)(v445 * v355[10])) + (float)(v446 * v355[11]);
          float v448 = (float)(v444 + (float)(v445 * v356[10])) + (float)(v446 * v356[11]);
          float v449 = v357[12];
          float v450 = v357[13];
          float v451 = (float)(v447 + (float)(v449 * v355[12])) + (float)(v450 * v355[13]);
          float v452 = (float)(v448 + (float)(v449 * v356[12])) + (float)(v450 * v356[13]);
          float v453 = v357[14];
          float v454 = v357[15];
          float v361 = (float)(v451 + (float)(v453 * v355[14])) + (float)(v454 * v355[15]);
          v425 -= 16;
          float v359 = (float)(v452 + (float)(v453 * v356[14])) + (float)(v454 * v356[15]);
          v357 += 16;
          v355 += 16;
          v356 += 16;
        }
        while (v425 > 0x1F);
      }
      float v455 = v354 - (double)(int)v354;
      *a2 = v361 + (float)(v455 * (float)(v359 - v361));
      a2 += a5;
      ++v349;
      double v350 = v350 + 1.0;
    }
    while (v349 != a4);
  }
  *(double *)(a1 + 160) = v13;
  return result;
}

void Resampler2::ConvertSIMD<Resampler2::FixedRate>(uint64_t a1, float *a2, float *a3, uint64_t a4, int a5)
{
  double v10 = *(double *)(a1 + 168);
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
  unint64_t v263 = (int)v11;
  uint64_t v12 = 4 * (int)v11;
  uint64_t v13 = *(unsigned int *)(a1 + 116);
  uint64_t v14 = *(void *)(a1 + 80);
  uint64_t v15 = *(int **)(a1 + 56);
  double v16 = (double)v15[4];
  double v17 = *(double *)(a1 + 160);
  if (a3)
  {
    if ((int)a4 >= 1)
    {
      int v18 = 0;
      uint64_t v19 = *(void *)(a1 + 88);
      uint64_t v20 = a5;
      do
      {
        uint64_t v21 = **(void **)(a1 + 56);
        double v22 = (v17 - (double)(int)v17) * v16;
        int v23 = v11 * (int)v22;
        float v24 = (const float *)(v21 + 4 * v23);
        int v25 = (float32x4_t *)(v14 + 4 * (int)v17);
        float v26 = (float32x4_t *)(v19 + 4 * (int)v17);
        double v27 = (double)(int)v22;
        if (v13 == 1650553971)
        {
          float v28 = a2;
          int v29 = a3;
          uint64_t v30 = a4;
          uint64_t v31 = v14;
          uint64_t v32 = v13;
          uint64_t v33 = v11;
          uint64_t v34 = v19;
          float v264 = a3;
          uint64_t v35 = v12;
          float v36 = a2;
          uint64_t v37 = v20;
          vdotprD2i(v25->f32, v26->f32, v24, &v24[v263], v22 - v27, v28, v29, v263);
          uint64_t v20 = v37;
          a2 = v36;
          uint64_t v12 = v35;
          a3 = v264;
          uint64_t v19 = v34;
          uint64_t v11 = v33;
          uint64_t v13 = v32;
          uint64_t v14 = v31;
          a4 = v30;
        }
        else
        {
          float32x4_t v38 = 0uLL;
          float32x4_t v39 = 0uLL;
          float32x4_t v40 = 0uLL;
          int v41 = v11;
          float32x4_t v42 = 0uLL;
          if ((int)v11 >= 64)
          {
            unint64_t v43 = 0;
            uint64_t v44 = v21 + v12 + 4 * v23;
            int v41 = v11;
            do
            {
              float32x4_t v45 = v25[v43 / 0x10];
              float32x4_t v46 = v25[v43 / 0x10 + 1];
              float32x4_t v47 = *(float32x4_t *)&v24[v43 / 4];
              float32x4_t v48 = *(float32x4_t *)&v24[v43 / 4 + 4];
              float32x4_t v49 = vmlaq_f32(v38, v47, v45);
              float32x4_t v50 = *(float32x4_t *)(v44 + v43);
              float32x4_t v51 = *(float32x4_t *)(v44 + v43 + 16);
              float32x4_t v52 = vmlaq_f32(v39, v50, v45);
              float32x4_t v53 = v26[v43 / 0x10];
              float32x4_t v54 = v26[v43 / 0x10 + 1];
              float32x4_t v55 = vmlaq_f32(v49, v48, v46);
              float32x4_t v56 = vmlaq_f32(v52, v51, v46);
              float32x4_t v57 = vmlaq_f32(vmlaq_f32(v40, v47, v53), v48, v54);
              float32x4_t v58 = vmlaq_f32(vmlaq_f32(v42, v50, v53), v51, v54);
              float32x4_t v59 = v25[v43 / 0x10 + 2];
              float32x4_t v60 = v25[v43 / 0x10 + 3];
              float32x4_t v61 = *(float32x4_t *)&v24[v43 / 4 + 8];
              float32x4_t v62 = *(float32x4_t *)&v24[v43 / 4 + 12];
              float32x4_t v63 = vmlaq_f32(v55, v61, v59);
              float32x4_t v64 = *(float32x4_t *)(v44 + v43 + 32);
              float32x4_t v65 = *(float32x4_t *)(v44 + v43 + 48);
              float32x4_t v66 = vmlaq_f32(v56, v64, v59);
              float32x4_t v67 = v26[v43 / 0x10 + 2];
              float32x4_t v68 = v26[v43 / 0x10 + 3];
              float32x4_t v69 = vmlaq_f32(v63, v62, v60);
              float32x4_t v70 = vmlaq_f32(v66, v65, v60);
              float32x4_t v71 = vmlaq_f32(vmlaq_f32(v57, v61, v67), v62, v68);
              float32x4_t v72 = vmlaq_f32(vmlaq_f32(v58, v64, v67), v65, v68);
              float32x4_t v73 = v25[v43 / 0x10 + 4];
              float32x4_t v74 = v25[v43 / 0x10 + 5];
              float32x4_t v75 = *(float32x4_t *)&v24[v43 / 4 + 16];
              float32x4_t v76 = *(float32x4_t *)&v24[v43 / 4 + 20];
              float32x4_t v77 = vmlaq_f32(v69, v75, v73);
              float32x4_t v78 = *(float32x4_t *)(v44 + v43 + 64);
              float32x4_t v79 = *(float32x4_t *)(v44 + v43 + 80);
              float32x4_t v80 = vmlaq_f32(v70, v78, v73);
              float32x4_t v81 = v26[v43 / 0x10 + 4];
              float32x4_t v82 = v26[v43 / 0x10 + 5];
              float32x4_t v83 = vmlaq_f32(v77, v76, v74);
              float32x4_t v84 = vmlaq_f32(v80, v79, v74);
              float32x4_t v85 = vmlaq_f32(vmlaq_f32(v71, v75, v81), v76, v82);
              float32x4_t v86 = vmlaq_f32(vmlaq_f32(v72, v78, v81), v79, v82);
              float32x4_t v87 = v25[v43 / 0x10 + 6];
              float32x4_t v88 = v25[v43 / 0x10 + 7];
              float32x4_t v89 = *(float32x4_t *)&v24[v43 / 4 + 24];
              float32x4_t v90 = *(float32x4_t *)&v24[v43 / 4 + 28];
              float32x4_t v91 = vmlaq_f32(v83, v89, v87);
              float32x4_t v92 = *(float32x4_t *)(v44 + v43 + 96);
              float32x4_t v93 = *(float32x4_t *)(v44 + v43 + 112);
              float32x4_t v94 = vmlaq_f32(v84, v92, v87);
              float32x4_t v95 = v26[v43 / 0x10 + 6];
              float32x4_t v96 = v26[v43 / 0x10 + 7];
              float32x4_t v97 = vmlaq_f32(v91, v90, v88);
              float32x4_t v98 = vmlaq_f32(v94, v93, v88);
              float32x4_t v99 = vmlaq_f32(vmlaq_f32(v85, v89, v95), v90, v96);
              float32x4_t v100 = vmlaq_f32(vmlaq_f32(v86, v92, v95), v93, v96);
              float32x4_t v101 = v25[v43 / 0x10 + 8];
              float32x4_t v102 = v25[v43 / 0x10 + 9];
              float32x4_t v103 = *(float32x4_t *)&v24[v43 / 4 + 32];
              float32x4_t v104 = *(float32x4_t *)&v24[v43 / 4 + 36];
              float32x4_t v105 = vmlaq_f32(v97, v103, v101);
              float32x4_t v106 = *(float32x4_t *)(v44 + v43 + 128);
              float32x4_t v107 = *(float32x4_t *)(v44 + v43 + 144);
              float32x4_t v108 = vmlaq_f32(v98, v106, v101);
              float32x4_t v109 = v26[v43 / 0x10 + 8];
              float32x4_t v110 = v26[v43 / 0x10 + 9];
              float32x4_t v111 = vmlaq_f32(v105, v104, v102);
              float32x4_t v112 = vmlaq_f32(v108, v107, v102);
              float32x4_t v113 = vmlaq_f32(vmlaq_f32(v99, v103, v109), v104, v110);
              float32x4_t v114 = vmlaq_f32(vmlaq_f32(v100, v106, v109), v107, v110);
              float32x4_t v115 = v25[v43 / 0x10 + 10];
              float32x4_t v116 = v25[v43 / 0x10 + 11];
              float32x4_t v117 = *(float32x4_t *)&v24[v43 / 4 + 40];
              float32x4_t v118 = *(float32x4_t *)&v24[v43 / 4 + 44];
              float32x4_t v119 = vmlaq_f32(v111, v117, v115);
              float32x4_t v120 = *(float32x4_t *)(v44 + v43 + 160);
              float32x4_t v121 = *(float32x4_t *)(v44 + v43 + 176);
              float32x4_t v122 = vmlaq_f32(v112, v120, v115);
              float32x4_t v123 = v26[v43 / 0x10 + 10];
              float32x4_t v124 = v26[v43 / 0x10 + 11];
              float32x4_t v125 = vmlaq_f32(v119, v118, v116);
              float32x4_t v126 = vmlaq_f32(v122, v121, v116);
              float32x4_t v127 = vmlaq_f32(vmlaq_f32(v113, v117, v123), v118, v124);
              float32x4_t v128 = vmlaq_f32(vmlaq_f32(v114, v120, v123), v121, v124);
              float32x4_t v129 = v25[v43 / 0x10 + 12];
              float32x4_t v130 = v25[v43 / 0x10 + 13];
              float32x4_t v131 = *(float32x4_t *)&v24[v43 / 4 + 48];
              float32x4_t v132 = *(float32x4_t *)&v24[v43 / 4 + 52];
              float32x4_t v133 = vmlaq_f32(v125, v131, v129);
              float32x4_t v134 = *(float32x4_t *)(v44 + v43 + 192);
              float32x4_t v135 = *(float32x4_t *)(v44 + v43 + 208);
              float32x4_t v136 = vmlaq_f32(v126, v134, v129);
              float32x4_t v137 = v26[v43 / 0x10 + 12];
              float32x4_t v138 = v26[v43 / 0x10 + 13];
              float32x4_t v139 = vmlaq_f32(v133, v132, v130);
              float32x4_t v140 = vmlaq_f32(v136, v135, v130);
              float32x4_t v141 = vmlaq_f32(vmlaq_f32(v127, v131, v137), v132, v138);
              float32x4_t v142 = vmlaq_f32(vmlaq_f32(v128, v134, v137), v135, v138);
              float32x4_t v143 = v25[v43 / 0x10 + 14];
              float32x4_t v144 = v25[v43 / 0x10 + 15];
              float32x4_t v145 = *(float32x4_t *)&v24[v43 / 4 + 56];
              float32x4_t v146 = *(float32x4_t *)&v24[v43 / 4 + 60];
              float32x4_t v147 = vmlaq_f32(v139, v145, v143);
              float32x4_t v148 = *(float32x4_t *)(v44 + v43 + 224);
              float32x4_t v149 = *(float32x4_t *)(v44 + v43 + 240);
              float32x4_t v150 = vmlaq_f32(v140, v148, v143);
              float32x4_t v151 = v26[v43 / 0x10 + 14];
              float32x4_t v152 = v26[v43 / 0x10 + 15];
              unsigned int v153 = v41;
              float32x4_t v38 = vmlaq_f32(v147, v146, v144);
              float32x4_t v39 = vmlaq_f32(v150, v149, v144);
              float32x4_t v40 = vmlaq_f32(vmlaq_f32(v141, v145, v151), v146, v152);
              float32x4_t v42 = vmlaq_f32(vmlaq_f32(v142, v148, v151), v149, v152);
              v41 -= 64;
              v43 += 256;
            }
            while (v153 > 0x7F);
            float v26 = (float32x4_t *)((char *)v26 + v43);
            int v25 = (float32x4_t *)((char *)v25 + v43);
            float v24 = (const float *)((char *)v24 + v43);
          }
          if (v41 >= 16)
          {
            unsigned int v154 = v41 + 16;
            float v155 = (float32x4_t *)(v24 + 8);
            do
            {
              float v156 = (float32x4_t *)((char *)v155 + v12);
              float32x4_t v157 = v25[1];
              float32x4_t v158 = v155[-2];
              float32x4_t v159 = v155[-1];
              float32x4_t v160 = *(float32x4_t *)((char *)v155 + v12 - 32);
              float32x4_t v161 = *(float32x4_t *)((char *)v155 + v12 - 16);
              float32x4_t v162 = v26[1];
              float32x4_t v163 = vmlaq_f32(vmlaq_f32(v38, v158, *v25), v159, v157);
              float32x4_t v164 = vmlaq_f32(vmlaq_f32(v39, v160, *v25), v161, v157);
              float32x4_t v165 = vmlaq_f32(vmlaq_f32(v40, v158, *v26), v159, v162);
              float32x4_t v166 = vmlaq_f32(vmlaq_f32(v42, v160, *v26), v161, v162);
              float32x4_t v167 = v25[2];
              float32x4_t v168 = v25[3];
              float32x4_t v169 = *v155;
              float32x4_t v170 = v155[1];
              v155 += 4;
              float32x4_t v171 = vmlaq_f32(v163, v169, v167);
              float32x4_t v172 = v156[1];
              float32x4_t v173 = vmlaq_f32(v164, *v156, v167);
              float32x4_t v174 = v26[2];
              float32x4_t v175 = v26[3];
              float32x4_t v38 = vmlaq_f32(v171, v170, v168);
              float32x4_t v39 = vmlaq_f32(v173, v172, v168);
              float32x4_t v40 = vmlaq_f32(vmlaq_f32(v165, v169, v174), v170, v175);
              v154 -= 16;
              float32x4_t v42 = vmlaq_f32(vmlaq_f32(v166, *v156, v174), v172, v175);
              v25 += 4;
              v26 += 4;
            }
            while (v154 > 0x1F);
          }
          float v176 = v22 - v27;
          int8x16_t v177 = (int8x16_t)vmlaq_n_f32(v38, vsubq_f32(v39, v38), v176);
          int8x16_t v178 = (int8x16_t)vmlaq_n_f32(v40, vsubq_f32(v42, v40), v176);
          *a2 = vaddv_f32(vadd_f32(*(float32x2_t *)v177.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v177, v177, 8uLL)));
          *a3 = vaddv_f32(vadd_f32(*(float32x2_t *)v178.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v178, v178, 8uLL)));
        }
        a2 += v20;
        a3 += v20;
        double v17 = v10 + v17;
        ++v18;
      }
      while (v18 != a4);
    }
  }
  else if ((int)a4 >= 1)
  {
    int v179 = 0;
    uint64_t v180 = *(void *)v15;
    uint64_t v181 = 4 * (int)v11;
    do
    {
      double v182 = (v17 - (double)(int)v17) * v16;
      int v183 = (int)v182;
      int v184 = v11 * (int)v182;
      float v185 = (float32x4_t *)(v180 + 4 * v184);
      float v186 = (float32x4_t *)(v14 + 4 * (int)v17);
      if (v13 == 1650553971)
      {
        float v187 = (float32x4_t *)((char *)v185 + 4 * (int)v11);
        float32x4_t v188 = v186[1];
        float32x4_t v189 = vmulq_f32(v188, v185[1]);
        float32x4_t v190 = vmulq_f32(*v186, *v185);
        float32x4_t v191 = vmulq_f32(v188, v187[1]);
        float32x4_t v192 = vmulq_f32(*v186, *v187);
        float32x4_t v193 = v185[2];
        float32x4_t v194 = v185[3];
        float32x4_t v195 = v187[2];
        float32x4_t v196 = v187[3];
        float32x4_t v197 = v186[2];
        float32x4_t v198 = v186[3];
        float64x2_t v199 = 0uLL;
        if ((unint64_t)(int)v11 >> 2 == 4)
        {
          float64x2_t v200 = 0uLL;
          float64x2_t v201 = 0uLL;
          float64x2_t v202 = 0uLL;
        }
        else
        {
          float v252 = v186 + 4;
          float64x2_t v201 = 0uLL;
          unint64_t v253 = 16 * ((unint64_t)(int)v11 >> 2) - 64;
          float64x2_t v202 = 0uLL;
          float64x2_t v200 = 0uLL;
          do
          {
            float64x2_t v200 = vaddq_f64(v200, vaddq_f64(vcvt_hight_f64_f32(v189), vcvt_hight_f64_f32(v190)));
            float64x2_t v199 = vaddq_f64(v199, vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v189.f32), vcvtq_f64_f32(*(float32x2_t *)v190.f32)));
            float64x2_t v202 = vaddq_f64(v202, vaddq_f64(vcvt_hight_f64_f32(v191), vcvt_hight_f64_f32(v192)));
            float64x2_t v201 = vaddq_f64(v201, vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v191.f32), vcvtq_f64_f32(*(float32x2_t *)v192.f32)));
            float32x4_t v190 = vmulq_f32(v197, v193);
            float32x4_t v189 = vmulq_f32(v198, v194);
            float32x4_t v192 = vmulq_f32(v197, v195);
            float32x4_t v191 = vmulq_f32(v198, v196);
            float32x4_t v197 = *v252;
            float32x4_t v198 = v252[1];
            v252 += 2;
            float32x4_t v193 = v185[4];
            float32x4_t v194 = v185[5];
            float32x4_t v195 = *(float32x4_t *)((char *)v185 + v181 + 64);
            float32x4_t v196 = *(float32x4_t *)((char *)v185 + v181 + 80);
            v185 += 2;
            v253 -= 32;
          }
          while (v253);
        }
        float32x4_t v254 = vmulq_f32(v194, v198);
        float32x4_t v255 = vmulq_f32(v193, v197);
        float32x4_t v256 = vmulq_f32(v196, v198);
        float32x4_t v257 = vmulq_f32(v195, v197);
        float64x2_t v258 = vaddq_f64(vaddq_f64(vaddq_f64(vcvt_hight_f64_f32(v191), vcvt_hight_f64_f32(v192)), v202), vaddq_f64(vcvt_hight_f64_f32(v256), vcvt_hight_f64_f32(v257)));
        float64x2_t v259 = vaddq_f64(vaddq_f64(vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v191.f32), vcvtq_f64_f32(*(float32x2_t *)v192.f32)), v201), vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v256.f32), vcvtq_f64_f32(*(float32x2_t *)v257.f32)));
        int64x2_t v260 = (int64x2_t)vaddq_f64(vaddq_f64(vaddq_f64(vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v189.f32), vcvtq_f64_f32(*(float32x2_t *)v190.f32)), v199), vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v254.f32), vcvtq_f64_f32(*(float32x2_t *)v255.f32))), vaddq_f64(vaddq_f64(vaddq_f64(vcvt_hight_f64_f32(v189), vcvt_hight_f64_f32(v190)), v200), vaddq_f64(vcvt_hight_f64_f32(v254), vcvt_hight_f64_f32(v255))));
        int64x2_t v261 = (int64x2_t)vaddq_f64(v259, v258);
        float64x2_t v262 = vaddq_f64((float64x2_t)vzip1q_s64(v261, v260), (float64x2_t)vzip2q_s64(v261, v260));
        float v251 = v262.f64[1] + (v182 - (double)v183) * (v262.f64[0] - v262.f64[1]);
      }
      else
      {
        float32x4_t v203 = 0uLL;
        float32x4_t v204 = 0uLL;
        int v205 = v11;
        if ((int)v11 >= 64)
        {
          uint64_t v206 = 0;
          uint64_t v207 = v180 + v12 + 4 * v184;
          int v205 = v11;
          do
          {
            float32x4_t v208 = v186[v206];
            float32x4_t v209 = v186[v206 + 1];
            float32x4_t v210 = vmlaq_f32(vmlaq_f32(v203, v185[v206], v208), v185[v206 + 1], v209);
            float32x4_t v211 = vmlaq_f32(vmlaq_f32(v204, *(float32x4_t *)(v207 + v206 * 16), v208), *(float32x4_t *)(v207 + v206 * 16 + 16), v209);
            float32x4_t v212 = v186[v206 + 2];
            float32x4_t v213 = v186[v206 + 3];
            float32x4_t v214 = vmlaq_f32(vmlaq_f32(v210, v185[v206 + 2], v212), v185[v206 + 3], v213);
            float32x4_t v215 = vmlaq_f32(vmlaq_f32(v211, *(float32x4_t *)(v207 + v206 * 16 + 32), v212), *(float32x4_t *)(v207 + v206 * 16 + 48), v213);
            float32x4_t v216 = v186[v206 + 4];
            float32x4_t v217 = v186[v206 + 5];
            float32x4_t v218 = vmlaq_f32(vmlaq_f32(v214, v185[v206 + 4], v216), v185[v206 + 5], v217);
            float32x4_t v219 = vmlaq_f32(vmlaq_f32(v215, *(float32x4_t *)(v207 + v206 * 16 + 64), v216), *(float32x4_t *)(v207 + v206 * 16 + 80), v217);
            float32x4_t v220 = v186[v206 + 6];
            float32x4_t v221 = v186[v206 + 7];
            float32x4_t v222 = vmlaq_f32(vmlaq_f32(v218, v185[v206 + 6], v220), v185[v206 + 7], v221);
            float32x4_t v223 = vmlaq_f32(vmlaq_f32(v219, *(float32x4_t *)(v207 + v206 * 16 + 96), v220), *(float32x4_t *)(v207 + v206 * 16 + 112), v221);
            float32x4_t v224 = v186[v206 + 8];
            float32x4_t v225 = v186[v206 + 9];
            float32x4_t v226 = vmlaq_f32(vmlaq_f32(v222, v185[v206 + 8], v224), v185[v206 + 9], v225);
            float32x4_t v227 = vmlaq_f32(vmlaq_f32(v223, *(float32x4_t *)(v207 + v206 * 16 + 128), v224), *(float32x4_t *)(v207 + v206 * 16 + 144), v225);
            float32x4_t v228 = v186[v206 + 10];
            float32x4_t v229 = v186[v206 + 11];
            float32x4_t v230 = vmlaq_f32(vmlaq_f32(v226, v185[v206 + 10], v228), v185[v206 + 11], v229);
            float32x4_t v231 = vmlaq_f32(vmlaq_f32(v227, *(float32x4_t *)(v207 + v206 * 16 + 160), v228), *(float32x4_t *)(v207 + v206 * 16 + 176), v229);
            float32x4_t v232 = v186[v206 + 12];
            float32x4_t v233 = v186[v206 + 13];
            float32x4_t v234 = vmlaq_f32(vmlaq_f32(v230, v185[v206 + 12], v232), v185[v206 + 13], v233);
            float32x4_t v235 = vmlaq_f32(vmlaq_f32(v231, *(float32x4_t *)(v207 + v206 * 16 + 192), v232), *(float32x4_t *)(v207 + v206 * 16 + 208), v233);
            float32x4_t v236 = v186[v206 + 14];
            float32x4_t v237 = v186[v206 + 15];
            unsigned int v238 = v205;
            float32x4_t v203 = vmlaq_f32(vmlaq_f32(v234, v185[v206 + 14], v236), v185[v206 + 15], v237);
            float32x4_t v204 = vmlaq_f32(vmlaq_f32(v235, *(float32x4_t *)(v207 + v206 * 16 + 224), v236), *(float32x4_t *)(v207 + v206 * 16 + 240), v237);
            v205 -= 64;
            v206 += 16;
          }
          while (v238 > 0x7F);
          float v186 = (float32x4_t *)((char *)v186 + v206 * 16);
          float v185 = (float32x4_t *)((char *)v185 + v206 * 16);
        }
        if (v205 >= 16)
        {
          unsigned int v239 = v205 + 16;
          float v240 = v185 + 2;
          do
          {
            float v241 = (float32x4_t *)((char *)v240 + v12);
            float32x4_t v242 = v186[1];
            float32x4_t v243 = vmlaq_f32(vmlaq_f32(v203, v240[-2], *v186), v240[-1], v242);
            float32x4_t v244 = vmlaq_f32(vmlaq_f32(v204, *(float32x4_t *)((char *)v240 + v12 - 32), *v186), *(float32x4_t *)((char *)v240 + v12 - 16), v242);
            float32x4_t v245 = v186[2];
            float32x4_t v246 = v186[3];
            float32x4_t v247 = *v240;
            float32x4_t v248 = v240[1];
            v240 += 4;
            float32x4_t v203 = vmlaq_f32(vmlaq_f32(v243, v247, v245), v248, v246);
            float32x4_t v204 = vmlaq_f32(vmlaq_f32(v244, *v241, v245), v241[1], v246);
            v239 -= 16;
            v186 += 4;
          }
          while (v239 > 0x1F);
        }
        float v249 = v182 - (double)v183;
        int8x16_t v250 = (int8x16_t)vmlaq_n_f32(v203, vsubq_f32(v204, v203), v249);
        float v251 = vaddv_f32(vadd_f32(*(float32x2_t *)v250.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v250, v250, 8uLL)));
      }
      *a2 = v251;
      a2 += a5;
      double v17 = v10 + v17;
      ++v179;
    }
    while (v179 != a4);
  }
  *(double *)(a1 + 160) = v17;
}

float vdotprD2i(const float *a1, const float *a2, const float *a3, const float *a4, double a5, float *a6, float *a7, unint64_t a8)
{
  float32x4_t v8 = *(float32x4_t *)(a1 + 4);
  float32x4_t v9 = *(float32x4_t *)(a2 + 4);
  float32x4_t v10 = *(float32x4_t *)(a3 + 4);
  float32x4_t v11 = *(float32x4_t *)(a4 + 4);
  float32x4_t v12 = vmulq_f32(v8, v10);
  float32x4_t v13 = vmulq_f32(*(float32x4_t *)a1, *(float32x4_t *)a3);
  float32x4_t v14 = vmulq_f32(v9, v10);
  float32x4_t v15 = vmulq_f32(*(float32x4_t *)a2, *(float32x4_t *)a3);
  float32x4_t v16 = vmulq_f32(v8, v11);
  float32x4_t v17 = vmulq_f32(*(float32x4_t *)a1, *(float32x4_t *)a4);
  float32x4_t v18 = vmulq_f32(v9, v11);
  float32x4_t v19 = *(float32x4_t *)(a3 + 8);
  float32x4_t v20 = *(float32x4_t *)(a3 + 12);
  float32x4_t v21 = *(float32x4_t *)(a4 + 8);
  float32x4_t v22 = *(float32x4_t *)(a4 + 12);
  float32x4_t v23 = *(float32x4_t *)(a2 + 8);
  float32x4_t v24 = *(float32x4_t *)(a2 + 12);
  float64x2_t v25 = 0uLL;
  float32x4_t v26 = *(float32x4_t *)(a1 + 8);
  float32x4_t v27 = *(float32x4_t *)(a1 + 12);
  if (a8 >> 2 == 4)
  {
    float64x2_t v28 = 0uLL;
    float64x2_t v29 = 0uLL;
    float64x2_t v30 = 0uLL;
    float64x2_t v31 = 0uLL;
    float64x2_t v32 = 0uLL;
    float64x2_t v33 = 0uLL;
    float64x2_t v34 = 0uLL;
  }
  else
  {
    float32x4_t v35 = vmulq_f32(*(float32x4_t *)a2, *(float32x4_t *)a4);
    float v36 = a4 + 16;
    float64x2_t v33 = 0uLL;
    uint64_t v37 = a3 + 16;
    float64x2_t v34 = 0uLL;
    float32x4_t v38 = a2 + 16;
    float32x4_t v39 = a1 + 16;
    float64x2_t v31 = 0uLL;
    float64x2_t v32 = 0uLL;
    float64x2_t v29 = 0uLL;
    float64x2_t v30 = 0uLL;
    float64x2_t v28 = 0uLL;
    do
    {
      float64x2_t v28 = vaddq_f64(vaddq_f64(vcvt_hight_f64_f32(v12), vcvt_hight_f64_f32(v13)), v28);
      float64x2_t v25 = vaddq_f64(vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v12.f32), vcvtq_f64_f32(*(float32x2_t *)v13.f32)), v25);
      float64x2_t v30 = vaddq_f64(vaddq_f64(vcvt_hight_f64_f32(v14), vcvt_hight_f64_f32(v15)), v30);
      float64x2_t v29 = vaddq_f64(vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v14.f32), vcvtq_f64_f32(*(float32x2_t *)v15.f32)), v29);
      float64x2_t v40 = vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v16.f32), vcvtq_f64_f32(*(float32x2_t *)v17.f32));
      float64x2_t v41 = vaddq_f64(vcvt_hight_f64_f32(v16), vcvt_hight_f64_f32(v17));
      float64x2_t v42 = vcvt_hight_f64_f32(v18);
      float64x2_t v43 = vcvtq_f64_f32(*(float32x2_t *)v18.f32);
      float64x2_t v44 = vcvt_hight_f64_f32(v35);
      float64x2_t v45 = vcvtq_f64_f32(*(float32x2_t *)v35.f32);
      float32x4_t v13 = vmulq_f32(v19, v26);
      float32x4_t v12 = vmulq_f32(v20, v27);
      float32x4_t v17 = vmulq_f32(v21, v26);
      float32x4_t v16 = vmulq_f32(v22, v27);
      float32x4_t v26 = *(float32x4_t *)v39;
      float32x4_t v27 = *(float32x4_t *)(v39 + 4);
      v39 += 8;
      float32x4_t v15 = vmulq_f32(v19, v23);
      float32x4_t v14 = vmulq_f32(v20, v24);
      float32x4_t v35 = vmulq_f32(v21, v23);
      float32x4_t v18 = vmulq_f32(v22, v24);
      float32x4_t v23 = *(float32x4_t *)v38;
      float32x4_t v24 = *(float32x4_t *)(v38 + 4);
      v38 += 8;
      float64x2_t v32 = vaddq_f64(v41, v32);
      float64x2_t v31 = vaddq_f64(v40, v31);
      float32x4_t v19 = *(float32x4_t *)v37;
      float32x4_t v20 = *(float32x4_t *)(v37 + 4);
      v37 += 8;
      float32x4_t v21 = *(float32x4_t *)v36;
      float32x4_t v22 = *(float32x4_t *)(v36 + 4);
      v36 += 8;
      float64x2_t v34 = vaddq_f64(vaddq_f64(v42, v44), v34);
      float64x2_t v33 = vaddq_f64(vaddq_f64(v43, v45), v33);
    }
    while (v37 != &a3[4 * (a8 >> 2)]);
  }
  float64x2_t v46 = vcvtq_f64_f32(*(float32x2_t *)v12.f32);
  float64x2_t v47 = vcvtq_f64_f32(*(float32x2_t *)v13.f32);
  float64x2_t v48 = vaddq_f64(vaddq_f64(vcvt_hight_f64_f32(v12), vcvt_hight_f64_f32(v13)), v28);
  float64x2_t v49 = vcvtq_f64_f32(*(float32x2_t *)v14.f32);
  float64x2_t v50 = vcvtq_f64_f32(*(float32x2_t *)v15.f32);
  float64x2_t v51 = vcvt_hight_f64_f32(v15);
  float64x2_t v52 = vaddq_f64(vaddq_f64(vcvt_hight_f64_f32(v14), v51), v30);
  float64x2_t v53 = vcvtq_f64_f32(*(float32x2_t *)v17.f32);
  float64x2_t v54 = vaddq_f64(vaddq_f64(vcvt_hight_f64_f32(v16), vcvt_hight_f64_f32(v17)), v32);
  float64x2_t v55 = vaddq_f64(vaddq_f64(v50, vcvtq_f64_f32(*(float32x2_t *)v18.f32)), v33);
  float64x2_t v56 = vaddq_f64(vaddq_f64(v51, vcvt_hight_f64_f32(v18)), v34);
  float32x4_t v57 = vmulq_f32(v20, v27);
  float32x4_t v58 = vmulq_f32(v19, v26);
  float32x4_t v59 = vmulq_f32(v20, v24);
  float32x4_t v60 = vmulq_f32(v19, v23);
  float32x4_t v61 = vmulq_f32(v22, v27);
  float32x4_t v62 = vmulq_f32(v21, v26);
  float32x4_t v63 = vmulq_f32(v22, v24);
  float32x4_t v64 = vmulq_f32(v21, v23);
  float64x2_t v65 = vaddq_f64(v56, vaddq_f64(vcvt_hight_f64_f32(v63), vcvt_hight_f64_f32(v64)));
  float64x2_t v66 = vaddq_f64(v55, vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v63.f32), vcvtq_f64_f32(*(float32x2_t *)v64.f32)));
  int64x2_t v67 = (int64x2_t)vaddq_f64(vaddq_f64(vaddq_f64(vaddq_f64(v46, v47), v25), vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v57.f32), vcvtq_f64_f32(*(float32x2_t *)v58.f32))), vaddq_f64(v48, vaddq_f64(vcvt_hight_f64_f32(v57), vcvt_hight_f64_f32(v58))));
  int64x2_t v68 = (int64x2_t)vaddq_f64(vaddq_f64(vaddq_f64(vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v16.f32), v53), v31), vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v61.f32), vcvtq_f64_f32(*(float32x2_t *)v62.f32))), vaddq_f64(v54, vaddq_f64(vcvt_hight_f64_f32(v61), vcvt_hight_f64_f32(v62))));
  float64x2_t v69 = vaddq_f64((float64x2_t)vzip1q_s64(v68, v67), (float64x2_t)vzip2q_s64(v68, v67));
  int64x2_t v70 = (int64x2_t)vaddq_f64(vaddq_f64(vaddq_f64(vaddq_f64(v49, v50), v29), vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v59.f32), vcvtq_f64_f32(*(float32x2_t *)v60.f32))), vaddq_f64(v52, vaddq_f64(vcvt_hight_f64_f32(v59), vcvt_hight_f64_f32(v60))));
  int64x2_t v71 = (int64x2_t)vaddq_f64(v66, v65);
  float64x2_t v72 = vaddq_f64((float64x2_t)vzip1q_s64(v71, v70), (float64x2_t)vzip2q_s64(v71, v70));
  *(float *)v65.f64 = v69.f64[1] + a5 * (v69.f64[0] - v69.f64[1]);
  *a6 = *(float *)v65.f64;
  float result = v72.f64[1] + a5 * (v72.f64[0] - v72.f64[1]);
  *a7 = result;
  return result;
}

void Resampler2::ConvertSIMD<Resampler2::RampedRate>(uint64_t a1, float *a2, float *a3, int a4, int a5)
{
  long long v10 = *(_OWORD *)(a1 + 224);
  v259[0] = *(_OWORD *)(a1 + 208);
  v259[1] = v10;
  v259[2] = *(_OWORD *)(a1 + 240);
  uint64_t v260 = *(void *)(a1 + 256);
  RateRamp::OffsetTimes((RateRamp *)v259, -*(double *)(a1 + 136), -*(double *)(a1 + 272));
  double v261 = (double)*(int *)(a1 + 72);
  int v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
  uint64_t v12 = 4 * v11;
  int v258 = *(_DWORD *)(a1 + 116);
  uint64_t v13 = *(void *)(a1 + 80);
  double v14 = (double)*(int *)(*(void *)(a1 + 56) + 16);
  double v15 = *(double *)(a1 + 160);
  if (a3)
  {
    if (a4 >= 1)
    {
      int v16 = 0;
      uint64_t v17 = *(void *)(a1 + 88);
      double v18 = 0.0;
      do
      {
        RateRamp::RateForOutputTime((RateRamp *)v259, (double)(int)v18);
        *(double *)(a1 + 168) = v19;
        Resampler2::SetVarispeedSinc(a1, v19);
        RateRamp::InputTimeForOutputTime((RateRamp *)v259, v18);
        double v21 = fmax(v20, 0.0);
        if (v21 >= v261) {
          double v15 = v261;
        }
        else {
          double v15 = v21;
        }
        uint64_t v22 = **(void **)(a1 + 56);
        double v23 = (v15 - (double)(int)v15) * v14;
        int v24 = v11 * (int)v23;
        float64x2_t v25 = (const float *)(v22 + 4 * v24);
        float32x4_t v26 = (float32x4_t *)(v13 + 4 * (int)v15);
        float32x4_t v27 = (float32x4_t *)(v17 + 4 * (int)v15);
        double v28 = (double)(int)v23;
        if (v258 == 1650553971)
        {
          vdotprD2i(v26->f32, v27->f32, v25, &v25[v11], v23 - v28, a2, a3, v11);
        }
        else
        {
          float32x4_t v29 = 0uLL;
          float32x4_t v30 = 0uLL;
          float32x4_t v31 = 0uLL;
          int v32 = v11;
          float32x4_t v33 = 0uLL;
          if (v11 >= 64)
          {
            unint64_t v34 = 0;
            uint64_t v35 = v22 + v12 + 4 * v24;
            int v32 = v11;
            do
            {
              float32x4_t v36 = v26[v34 / 0x10];
              float32x4_t v37 = v26[v34 / 0x10 + 1];
              float32x4_t v38 = *(float32x4_t *)&v25[v34 / 4];
              float32x4_t v39 = *(float32x4_t *)&v25[v34 / 4 + 4];
              float32x4_t v40 = vmlaq_f32(v29, v38, v36);
              float32x4_t v41 = *(float32x4_t *)(v35 + v34);
              float32x4_t v42 = *(float32x4_t *)(v35 + v34 + 16);
              float32x4_t v43 = vmlaq_f32(v30, v41, v36);
              float32x4_t v44 = v27[v34 / 0x10];
              float32x4_t v45 = v27[v34 / 0x10 + 1];
              float32x4_t v46 = vmlaq_f32(v40, v39, v37);
              float32x4_t v47 = vmlaq_f32(v43, v42, v37);
              float32x4_t v48 = vmlaq_f32(vmlaq_f32(v31, v38, v44), v39, v45);
              float32x4_t v49 = vmlaq_f32(vmlaq_f32(v33, v41, v44), v42, v45);
              float32x4_t v50 = v26[v34 / 0x10 + 2];
              float32x4_t v51 = v26[v34 / 0x10 + 3];
              float32x4_t v52 = *(float32x4_t *)&v25[v34 / 4 + 8];
              float32x4_t v53 = *(float32x4_t *)&v25[v34 / 4 + 12];
              float32x4_t v54 = vmlaq_f32(v46, v52, v50);
              float32x4_t v55 = *(float32x4_t *)(v35 + v34 + 32);
              float32x4_t v56 = *(float32x4_t *)(v35 + v34 + 48);
              float32x4_t v57 = vmlaq_f32(v47, v55, v50);
              float32x4_t v58 = v27[v34 / 0x10 + 2];
              float32x4_t v59 = v27[v34 / 0x10 + 3];
              float32x4_t v60 = vmlaq_f32(v54, v53, v51);
              float32x4_t v61 = vmlaq_f32(v57, v56, v51);
              float32x4_t v62 = vmlaq_f32(vmlaq_f32(v48, v52, v58), v53, v59);
              float32x4_t v63 = vmlaq_f32(vmlaq_f32(v49, v55, v58), v56, v59);
              float32x4_t v64 = v26[v34 / 0x10 + 4];
              float32x4_t v65 = v26[v34 / 0x10 + 5];
              float32x4_t v66 = *(float32x4_t *)&v25[v34 / 4 + 16];
              float32x4_t v67 = *(float32x4_t *)&v25[v34 / 4 + 20];
              float32x4_t v68 = vmlaq_f32(v60, v66, v64);
              float32x4_t v69 = *(float32x4_t *)(v35 + v34 + 64);
              float32x4_t v70 = *(float32x4_t *)(v35 + v34 + 80);
              float32x4_t v71 = vmlaq_f32(v61, v69, v64);
              float32x4_t v72 = v27[v34 / 0x10 + 4];
              float32x4_t v73 = v27[v34 / 0x10 + 5];
              float32x4_t v74 = vmlaq_f32(v68, v67, v65);
              float32x4_t v75 = vmlaq_f32(v71, v70, v65);
              float32x4_t v76 = vmlaq_f32(vmlaq_f32(v62, v66, v72), v67, v73);
              float32x4_t v77 = vmlaq_f32(vmlaq_f32(v63, v69, v72), v70, v73);
              float32x4_t v78 = v26[v34 / 0x10 + 6];
              float32x4_t v79 = v26[v34 / 0x10 + 7];
              float32x4_t v80 = *(float32x4_t *)&v25[v34 / 4 + 24];
              float32x4_t v81 = *(float32x4_t *)&v25[v34 / 4 + 28];
              float32x4_t v82 = vmlaq_f32(v74, v80, v78);
              float32x4_t v83 = *(float32x4_t *)(v35 + v34 + 96);
              float32x4_t v84 = *(float32x4_t *)(v35 + v34 + 112);
              float32x4_t v85 = vmlaq_f32(v75, v83, v78);
              float32x4_t v86 = v27[v34 / 0x10 + 6];
              float32x4_t v87 = v27[v34 / 0x10 + 7];
              float32x4_t v88 = vmlaq_f32(v82, v81, v79);
              float32x4_t v89 = vmlaq_f32(v85, v84, v79);
              float32x4_t v90 = vmlaq_f32(vmlaq_f32(v76, v80, v86), v81, v87);
              float32x4_t v91 = vmlaq_f32(vmlaq_f32(v77, v83, v86), v84, v87);
              float32x4_t v92 = v26[v34 / 0x10 + 8];
              float32x4_t v93 = v26[v34 / 0x10 + 9];
              float32x4_t v94 = *(float32x4_t *)&v25[v34 / 4 + 32];
              float32x4_t v95 = *(float32x4_t *)&v25[v34 / 4 + 36];
              float32x4_t v96 = vmlaq_f32(v88, v94, v92);
              float32x4_t v97 = *(float32x4_t *)(v35 + v34 + 128);
              float32x4_t v98 = *(float32x4_t *)(v35 + v34 + 144);
              float32x4_t v99 = vmlaq_f32(v89, v97, v92);
              float32x4_t v100 = v27[v34 / 0x10 + 8];
              float32x4_t v101 = v27[v34 / 0x10 + 9];
              float32x4_t v102 = vmlaq_f32(v96, v95, v93);
              float32x4_t v103 = vmlaq_f32(v99, v98, v93);
              float32x4_t v104 = vmlaq_f32(vmlaq_f32(v90, v94, v100), v95, v101);
              float32x4_t v105 = vmlaq_f32(vmlaq_f32(v91, v97, v100), v98, v101);
              float32x4_t v106 = v26[v34 / 0x10 + 10];
              float32x4_t v107 = v26[v34 / 0x10 + 11];
              float32x4_t v108 = *(float32x4_t *)&v25[v34 / 4 + 40];
              float32x4_t v109 = *(float32x4_t *)&v25[v34 / 4 + 44];
              float32x4_t v110 = vmlaq_f32(v102, v108, v106);
              float32x4_t v111 = *(float32x4_t *)(v35 + v34 + 160);
              float32x4_t v112 = *(float32x4_t *)(v35 + v34 + 176);
              float32x4_t v113 = vmlaq_f32(v103, v111, v106);
              float32x4_t v114 = v27[v34 / 0x10 + 10];
              float32x4_t v115 = v27[v34 / 0x10 + 11];
              float32x4_t v116 = vmlaq_f32(v110, v109, v107);
              float32x4_t v117 = vmlaq_f32(v113, v112, v107);
              float32x4_t v118 = vmlaq_f32(vmlaq_f32(v104, v108, v114), v109, v115);
              float32x4_t v119 = vmlaq_f32(vmlaq_f32(v105, v111, v114), v112, v115);
              float32x4_t v120 = v26[v34 / 0x10 + 12];
              float32x4_t v121 = v26[v34 / 0x10 + 13];
              float32x4_t v122 = *(float32x4_t *)&v25[v34 / 4 + 48];
              float32x4_t v123 = *(float32x4_t *)&v25[v34 / 4 + 52];
              float32x4_t v124 = vmlaq_f32(v116, v122, v120);
              float32x4_t v125 = *(float32x4_t *)(v35 + v34 + 192);
              float32x4_t v126 = *(float32x4_t *)(v35 + v34 + 208);
              float32x4_t v127 = vmlaq_f32(v117, v125, v120);
              float32x4_t v128 = v27[v34 / 0x10 + 12];
              float32x4_t v129 = v27[v34 / 0x10 + 13];
              float32x4_t v130 = vmlaq_f32(v124, v123, v121);
              float32x4_t v131 = vmlaq_f32(v127, v126, v121);
              float32x4_t v132 = vmlaq_f32(vmlaq_f32(v118, v122, v128), v123, v129);
              float32x4_t v133 = vmlaq_f32(vmlaq_f32(v119, v125, v128), v126, v129);
              float32x4_t v134 = v26[v34 / 0x10 + 14];
              float32x4_t v135 = v26[v34 / 0x10 + 15];
              float32x4_t v136 = *(float32x4_t *)&v25[v34 / 4 + 56];
              float32x4_t v137 = *(float32x4_t *)&v25[v34 / 4 + 60];
              float32x4_t v138 = vmlaq_f32(v130, v136, v134);
              float32x4_t v139 = *(float32x4_t *)(v35 + v34 + 224);
              float32x4_t v140 = *(float32x4_t *)(v35 + v34 + 240);
              float32x4_t v141 = vmlaq_f32(v131, v139, v134);
              float32x4_t v142 = v27[v34 / 0x10 + 14];
              float32x4_t v143 = v27[v34 / 0x10 + 15];
              unsigned int v144 = v32;
              float32x4_t v29 = vmlaq_f32(v138, v137, v135);
              float32x4_t v30 = vmlaq_f32(v141, v140, v135);
              float32x4_t v31 = vmlaq_f32(vmlaq_f32(v132, v136, v142), v137, v143);
              float32x4_t v33 = vmlaq_f32(vmlaq_f32(v133, v139, v142), v140, v143);
              v32 -= 64;
              v34 += 256;
            }
            while (v144 > 0x7F);
            float32x4_t v27 = (float32x4_t *)((char *)v27 + v34);
            float32x4_t v26 = (float32x4_t *)((char *)v26 + v34);
            float64x2_t v25 = (const float *)((char *)v25 + v34);
          }
          if (v32 >= 16)
          {
            unsigned int v145 = v32 + 16;
            float32x4_t v146 = (float32x4_t *)(v25 + 8);
            do
            {
              float32x4_t v147 = (float32x4_t *)((char *)v146 + v12);
              float32x4_t v148 = v26[1];
              float32x4_t v149 = v146[-2];
              float32x4_t v150 = v146[-1];
              float32x4_t v151 = *(float32x4_t *)((char *)v146 + v12 - 32);
              float32x4_t v152 = *(float32x4_t *)((char *)v146 + v12 - 16);
              float32x4_t v153 = v27[1];
              float32x4_t v154 = vmlaq_f32(vmlaq_f32(v29, v149, *v26), v150, v148);
              float32x4_t v155 = vmlaq_f32(vmlaq_f32(v30, v151, *v26), v152, v148);
              float32x4_t v156 = vmlaq_f32(vmlaq_f32(v31, v149, *v27), v150, v153);
              float32x4_t v157 = vmlaq_f32(vmlaq_f32(v33, v151, *v27), v152, v153);
              float32x4_t v158 = v26[2];
              float32x4_t v159 = v26[3];
              float32x4_t v160 = *v146;
              float32x4_t v161 = v146[1];
              v146 += 4;
              float32x4_t v162 = vmlaq_f32(v154, v160, v158);
              float32x4_t v163 = v147[1];
              float32x4_t v164 = vmlaq_f32(v155, *v147, v158);
              float32x4_t v165 = v27[2];
              float32x4_t v166 = v27[3];
              float32x4_t v29 = vmlaq_f32(v162, v161, v159);
              float32x4_t v30 = vmlaq_f32(v164, v163, v159);
              float32x4_t v31 = vmlaq_f32(vmlaq_f32(v156, v160, v165), v161, v166);
              v145 -= 16;
              float32x4_t v33 = vmlaq_f32(vmlaq_f32(v157, *v147, v165), v163, v166);
              v26 += 4;
              v27 += 4;
            }
            while (v145 > 0x1F);
          }
          float v167 = v23 - v28;
          int8x16_t v168 = (int8x16_t)vmlaq_n_f32(v29, vsubq_f32(v30, v29), v167);
          int8x16_t v169 = (int8x16_t)vmlaq_n_f32(v31, vsubq_f32(v33, v31), v167);
          *a2 = vaddv_f32(vadd_f32(*(float32x2_t *)v168.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v168, v168, 8uLL)));
          *a3 = vaddv_f32(vadd_f32(*(float32x2_t *)v169.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v169, v169, 8uLL)));
        }
        a2 += a5;
        a3 += a5;
        ++v16;
        double v18 = v18 + 1.0;
      }
      while (v16 != a4);
    }
  }
  else if (a4 >= 1)
  {
    int v170 = 0;
    uint64_t v171 = 4 * v11;
    double v172 = 0.0;
    do
    {
      RateRamp::RateForOutputTime((RateRamp *)v259, (double)(int)v172);
      *(double *)(a1 + 168) = v173;
      Resampler2::SetVarispeedSinc(a1, v173);
      RateRamp::InputTimeForOutputTime((RateRamp *)v259, v172);
      double v175 = fmax(v174, 0.0);
      if (v175 >= v261) {
        double v15 = v261;
      }
      else {
        double v15 = v175;
      }
      uint64_t v176 = **(void **)(a1 + 56);
      double v177 = (v15 - (double)(int)v15) * v14;
      int v178 = (int)v177;
      int v179 = v11 * (int)v177;
      uint64_t v180 = (float32x4_t *)(v176 + 4 * v179);
      uint64_t v181 = (float32x4_t *)(v13 + 4 * (int)v15);
      if (v258 == 1650553971)
      {
        double v182 = (float32x4_t *)((char *)v180 + 4 * v11);
        float32x4_t v183 = v181[1];
        float32x4_t v184 = vmulq_f32(v183, v180[1]);
        float32x4_t v185 = vmulq_f32(*v181, *v180);
        float32x4_t v186 = vmulq_f32(v183, v182[1]);
        float32x4_t v187 = vmulq_f32(*v181, *v182);
        float32x4_t v188 = v180[2];
        float32x4_t v189 = v180[3];
        float32x4_t v190 = v182[2];
        float32x4_t v191 = v182[3];
        float32x4_t v192 = v181[2];
        float32x4_t v193 = v181[3];
        float64x2_t v194 = 0uLL;
        if ((unint64_t)v11 >> 2 == 4)
        {
          float64x2_t v195 = 0uLL;
          float64x2_t v196 = 0uLL;
          float64x2_t v197 = 0uLL;
        }
        else
        {
          float32x4_t v247 = v181 + 4;
          float64x2_t v196 = 0uLL;
          unint64_t v248 = 16 * ((unint64_t)v11 >> 2) - 64;
          float64x2_t v197 = 0uLL;
          float64x2_t v195 = 0uLL;
          do
          {
            float64x2_t v195 = vaddq_f64(v195, vaddq_f64(vcvt_hight_f64_f32(v184), vcvt_hight_f64_f32(v185)));
            float64x2_t v194 = vaddq_f64(v194, vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v184.f32), vcvtq_f64_f32(*(float32x2_t *)v185.f32)));
            float64x2_t v197 = vaddq_f64(v197, vaddq_f64(vcvt_hight_f64_f32(v186), vcvt_hight_f64_f32(v187)));
            float64x2_t v196 = vaddq_f64(v196, vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v186.f32), vcvtq_f64_f32(*(float32x2_t *)v187.f32)));
            float32x4_t v185 = vmulq_f32(v192, v188);
            float32x4_t v184 = vmulq_f32(v193, v189);
            float32x4_t v187 = vmulq_f32(v192, v190);
            float32x4_t v186 = vmulq_f32(v193, v191);
            float32x4_t v192 = *v247;
            float32x4_t v193 = v247[1];
            v247 += 2;
            float32x4_t v188 = v180[4];
            float32x4_t v189 = v180[5];
            float32x4_t v190 = *(float32x4_t *)((char *)v180 + v171 + 64);
            float32x4_t v191 = *(float32x4_t *)((char *)v180 + v171 + 80);
            v180 += 2;
            v248 -= 32;
          }
          while (v248);
        }
        float32x4_t v249 = vmulq_f32(v189, v193);
        float32x4_t v250 = vmulq_f32(v188, v192);
        float32x4_t v251 = vmulq_f32(v191, v193);
        float32x4_t v252 = vmulq_f32(v190, v192);
        float64x2_t v253 = vaddq_f64(vaddq_f64(vaddq_f64(vcvt_hight_f64_f32(v186), vcvt_hight_f64_f32(v187)), v197), vaddq_f64(vcvt_hight_f64_f32(v251), vcvt_hight_f64_f32(v252)));
        float64x2_t v254 = vaddq_f64(vaddq_f64(vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v186.f32), vcvtq_f64_f32(*(float32x2_t *)v187.f32)), v196), vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v251.f32), vcvtq_f64_f32(*(float32x2_t *)v252.f32)));
        int64x2_t v255 = (int64x2_t)vaddq_f64(vaddq_f64(vaddq_f64(vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v184.f32), vcvtq_f64_f32(*(float32x2_t *)v185.f32)), v194), vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v249.f32), vcvtq_f64_f32(*(float32x2_t *)v250.f32))), vaddq_f64(vaddq_f64(vaddq_f64(vcvt_hight_f64_f32(v184), vcvt_hight_f64_f32(v185)), v195), vaddq_f64(vcvt_hight_f64_f32(v249), vcvt_hight_f64_f32(v250))));
        int64x2_t v256 = (int64x2_t)vaddq_f64(v254, v253);
        float64x2_t v257 = vaddq_f64((float64x2_t)vzip1q_s64(v256, v255), (float64x2_t)vzip2q_s64(v256, v255));
        float v246 = v257.f64[1] + (v177 - (double)v178) * (v257.f64[0] - v257.f64[1]);
      }
      else
      {
        float32x4_t v198 = 0uLL;
        float32x4_t v199 = 0uLL;
        int v200 = v11;
        if (v11 >= 64)
        {
          uint64_t v201 = 0;
          uint64_t v202 = v176 + v12 + 4 * v179;
          int v200 = v11;
          do
          {
            float32x4_t v203 = v181[v201];
            float32x4_t v204 = v181[v201 + 1];
            float32x4_t v205 = vmlaq_f32(vmlaq_f32(v198, v180[v201], v203), v180[v201 + 1], v204);
            float32x4_t v206 = vmlaq_f32(vmlaq_f32(v199, *(float32x4_t *)(v202 + v201 * 16), v203), *(float32x4_t *)(v202 + v201 * 16 + 16), v204);
            float32x4_t v207 = v181[v201 + 2];
            float32x4_t v208 = v181[v201 + 3];
            float32x4_t v209 = vmlaq_f32(vmlaq_f32(v205, v180[v201 + 2], v207), v180[v201 + 3], v208);
            float32x4_t v210 = vmlaq_f32(vmlaq_f32(v206, *(float32x4_t *)(v202 + v201 * 16 + 32), v207), *(float32x4_t *)(v202 + v201 * 16 + 48), v208);
            float32x4_t v211 = v181[v201 + 4];
            float32x4_t v212 = v181[v201 + 5];
            float32x4_t v213 = vmlaq_f32(vmlaq_f32(v209, v180[v201 + 4], v211), v180[v201 + 5], v212);
            float32x4_t v214 = vmlaq_f32(vmlaq_f32(v210, *(float32x4_t *)(v202 + v201 * 16 + 64), v211), *(float32x4_t *)(v202 + v201 * 16 + 80), v212);
            float32x4_t v215 = v181[v201 + 6];
            float32x4_t v216 = v181[v201 + 7];
            float32x4_t v217 = vmlaq_f32(vmlaq_f32(v213, v180[v201 + 6], v215), v180[v201 + 7], v216);
            float32x4_t v218 = vmlaq_f32(vmlaq_f32(v214, *(float32x4_t *)(v202 + v201 * 16 + 96), v215), *(float32x4_t *)(v202 + v201 * 16 + 112), v216);
            float32x4_t v219 = v181[v201 + 8];
            float32x4_t v220 = v181[v201 + 9];
            float32x4_t v221 = vmlaq_f32(vmlaq_f32(v217, v180[v201 + 8], v219), v180[v201 + 9], v220);
            float32x4_t v222 = vmlaq_f32(vmlaq_f32(v218, *(float32x4_t *)(v202 + v201 * 16 + 128), v219), *(float32x4_t *)(v202 + v201 * 16 + 144), v220);
            float32x4_t v223 = v181[v201 + 10];
            float32x4_t v224 = v181[v201 + 11];
            float32x4_t v225 = vmlaq_f32(vmlaq_f32(v221, v180[v201 + 10], v223), v180[v201 + 11], v224);
            float32x4_t v226 = vmlaq_f32(vmlaq_f32(v222, *(float32x4_t *)(v202 + v201 * 16 + 160), v223), *(float32x4_t *)(v202 + v201 * 16 + 176), v224);
            float32x4_t v227 = v181[v201 + 12];
            float32x4_t v228 = v181[v201 + 13];
            float32x4_t v229 = vmlaq_f32(vmlaq_f32(v225, v180[v201 + 12], v227), v180[v201 + 13], v228);
            float32x4_t v230 = vmlaq_f32(vmlaq_f32(v226, *(float32x4_t *)(v202 + v201 * 16 + 192), v227), *(float32x4_t *)(v202 + v201 * 16 + 208), v228);
            float32x4_t v231 = v181[v201 + 14];
            float32x4_t v232 = v181[v201 + 15];
            unsigned int v233 = v200;
            float32x4_t v198 = vmlaq_f32(vmlaq_f32(v229, v180[v201 + 14], v231), v180[v201 + 15], v232);
            float32x4_t v199 = vmlaq_f32(vmlaq_f32(v230, *(float32x4_t *)(v202 + v201 * 16 + 224), v231), *(float32x4_t *)(v202 + v201 * 16 + 240), v232);
            v200 -= 64;
            v201 += 16;
          }
          while (v233 > 0x7F);
          uint64_t v181 = (float32x4_t *)((char *)v181 + v201 * 16);
          uint64_t v180 = (float32x4_t *)((char *)v180 + v201 * 16);
        }
        if (v200 >= 16)
        {
          unsigned int v234 = v200 + 16;
          float32x4_t v235 = v180 + 2;
          do
          {
            float32x4_t v236 = (float32x4_t *)((char *)v235 + v12);
            float32x4_t v237 = v181[1];
            float32x4_t v238 = vmlaq_f32(vmlaq_f32(v198, v235[-2], *v181), v235[-1], v237);
            float32x4_t v239 = vmlaq_f32(vmlaq_f32(v199, *(float32x4_t *)((char *)v235 + v12 - 32), *v181), *(float32x4_t *)((char *)v235 + v12 - 16), v237);
            float32x4_t v240 = v181[2];
            float32x4_t v241 = v181[3];
            float32x4_t v242 = *v235;
            float32x4_t v243 = v235[1];
            v235 += 4;
            float32x4_t v198 = vmlaq_f32(vmlaq_f32(v238, v242, v240), v243, v241);
            float32x4_t v199 = vmlaq_f32(vmlaq_f32(v239, *v236, v240), v236[1], v241);
            v234 -= 16;
            v181 += 4;
          }
          while (v234 > 0x1F);
        }
        float v244 = v177 - (double)v178;
        int8x16_t v245 = (int8x16_t)vmlaq_n_f32(v198, vsubq_f32(v199, v198), v244);
        float v246 = vaddv_f32(vadd_f32(*(float32x2_t *)v245.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v245, v245, 8uLL)));
      }
      *a2 = v246;
      a2 += a5;
      ++v170;
      double v172 = v172 + 1.0;
    }
    while (v170 != a4);
  }
  *(double *)(a1 + 160) = v15;
}

uint64_t Resampler2::ConvertLinear(uint64_t this, float *a2, float *a3, int a4, unsigned int a5)
{
  double v5 = *(double *)(this + 160);
  double v6 = *(double *)(this + 168);
  uint64_t v7 = *(void *)(this + 80) + 4 * (int)v5;
  if (a3)
  {
    if (a4)
    {
      uint64_t v8 = 0;
      uint64_t v9 = *(void *)(this + 88) + 4 * (int)v5;
      do
      {
        float v10 = *(float *)(v7 + 4 * (int)v5);
        float v11 = *(float *)(v9 + 4 * (int)v5);
        uint64_t v12 = 4 * (int)v5 + 4;
        float v13 = *(float *)(v9 + v12);
        float v14 = v5 - (double)(int)v5;
        a2[v8] = v10 + (float)(v14 * (float)(*(float *)(v7 + v12) - v10));
        a3[v8] = v11 + (float)(v14 * (float)(v13 - v11));
        double v5 = v6 + v5;
        v8 += a5;
        --a4;
      }
      while (a4);
    }
  }
  else
  {
    for (; a4; --a4)
    {
      float v15 = v5 - (double)(int)v5;
      *a2 = *(float *)(v7 + 4 * (int)v5)
          + (float)(v15 * (float)(*(float *)(v7 + 4 * (int)v5 + 4) - *(float *)(v7 + 4 * (int)v5)));
      double v5 = v6 + v5;
      a2 += a5;
    }
  }
  *(double *)(this + 136) = *(double *)(this + 136) + (double)(int)v5;
  *(double *)(this + 160) = v5;
  return this;
}

uint64_t Resampler2::SetOutputSampleNumberOfNextProcess(uint64_t this, double a2)
{
  *(double *)(this + 272) = a2;
  return this;
}

double Resampler2::GetCurrentInputSampleNumber(Resampler2 *this)
{
  double v1 = 0.0;
  if (*((_DWORD *)this + 29) != 1818848869)
  {
    LODWORD(v1) = *(_DWORD *)(*((void *)this + 7) + 20);
    double v1 = (double)*(unint64_t *)&v1;
  }
  return *((double *)this + 17) + *((double *)this + 20) + v1 + 1.0;
}

double Resampler2::SetInputSampleNumberOfNextWrite(Resampler2 *this, double a2)
{
  double result = a2 - (double)*((int *)this + 18);
  *((double *)this + 17) = result;
  return result;
}

uint64_t Resampler2::SetIsBypassed(uint64_t this, char a2)
{
  *(unsigned char *)(this + 132) = a2;
  return this;
}

uint64_t Resampler2::SetSourceCallback2(uint64_t this, void (*a2)(float *, float *, unsigned int, void *), void *a3)
{
  *(void *)(this + 40) = a2;
  *(void *)(this + 64) = a3;
  return this;
}

uint64_t Resampler2::SetSourceCallback(uint64_t this, void (*a2)(float *, unsigned int, void *), void *a3)
{
  *(void *)(this + 32) = a2;
  *(void *)(this + 64) = a3;
  return this;
}

uint64_t Resampler2::SetVarispeedRate(uint64_t this, double a2)
{
  if (*(unsigned char *)(this + 184))
  {
    uint64_t v3 = this;
    *(unsigned char *)(this + 264) = 0;
    *(double *)(this + 168) = a2;
    *(double *)(this + 176) = 1.0 / a2;
    *(unsigned char *)(this + 133) = 0;
    Resampler2::SetConverterFunction(this);
    return Resampler2::SetVarispeedSinc(v3, a2);
  }
  return this;
}

void *Resampler2::Process2(Resampler2 *this, float *a2, float *a3, unsigned int a4, uint64_t a5)
{
  int v5 = a4;
  *((unsigned char *)this + 24) = 1;
  double v7 = *((double *)this + 22);
  double result = (void *)Resampler2::GetNumberOfSourceFrames(this, a4, 0);
  if (v5 >= 1)
  {
    unint64_t v9 = (unint64_t)result;
    unsigned int v10 = 0;
    signed int v43 = vcvtd_n_s64_f64(v7, 0xAuLL);
    float v11 = (int *)((char *)this + 72);
    uint64_t v12 = 4 * (int)a5;
    do
    {
      unint64_t v13 = v9;
      if (v5 >= v43) {
        uint64_t v14 = v43;
      }
      else {
        uint64_t v14 = v5;
      }
      if (v5 > v43)
      {
        int NumberOfSourceFrames = Resampler2::GetNumberOfSourceFrames(this, v14, v10);
        if (NumberOfSourceFrames >= (int)v9) {
          unint64_t v13 = v9;
        }
        else {
          unint64_t v13 = NumberOfSourceFrames;
        }
      }
      int v16 = v10 * a5;
      if (a3) {
        uint64_t v17 = &a3[v16];
      }
      else {
        uint64_t v17 = 0;
      }
      if ((int)v13 >= 1)
      {
        double v18 = (void (*)(uint64_t, uint64_t, unint64_t, void))*((void *)this + 5);
        if (v18)
        {
          if (v17)
          {
            uint64_t v19 = *((int *)this + 18);
            uint64_t v20 = *((void *)this + 11) + 4 * v19;
          }
          else
          {
            uint64_t v20 = 0;
            uint64_t v19 = *v11;
          }
          v18(*((void *)this + 10) + 4 * v19, v20, v13, *((void *)this + 8));
        }
        else
        {
          (*((void (**)(uint64_t, unint64_t, void))this + 4))(*((void *)this + 10) + 4 * *((int *)this + 18), v13, *((void *)this + 8));
        }
        *v11 += v13;
      }
      int v21 = (*(uint64_t (**)(Resampler2 *))(*(void *)this + 152))(this);
      uint64_t v22 = &a2[v16];
      if (*((unsigned char *)this + 132))
      {
        int v23 = v21;
        int v24 = (int)*((double *)this + 20);
        float64x2_t v25 = (char *)*((void *)this + 10);
        uint64_t v26 = v24;
        int v46 = v13;
        uint64_t v42 = (uint64_t)v23 >> 1;
        if (a5 == 1)
        {
          memcpy(v22, &v25[4 * v24 + 4 * (v23 >> 1)], 4 * v14);
          float64x2_t v25 = (char *)*((void *)this + 10);
        }
        else if (v14)
        {
          uint64_t v30 = 4 * v24 + 4 * ((uint64_t)v23 >> 1);
          int v31 = v14;
          do
          {
            *uint64_t v22 = *(float *)&v25[v30];
            v30 += 4;
            uint64_t v22 = (float *)((char *)v22 + v12);
            --v31;
          }
          while (v31);
        }
        int v32 = v14 + v26;
        size_t v33 = 4 * (*v11 - ((int)v14 + (int)v26));
        double result = memmove(v25, &v25[4 * v26 + 4 * v14], v33);
        if (v17)
        {
          unint64_t v34 = (char *)*((void *)this + 11);
          if (a5 == 1)
          {
            memcpy(v17, &v34[4 * v26 + 4 * v42], 4 * v14);
            unint64_t v34 = (char *)*((void *)this + 11);
          }
          else if (v14)
          {
            uint64_t v35 = 4 * v26 + 4 * v42;
            int v36 = v14;
            do
            {
              *uint64_t v17 = *(float *)&v34[v35];
              v35 += 4;
              uint64_t v17 = (float *)((char *)v17 + v12);
              --v36;
            }
            while (v36);
          }
          double result = memmove(v34, &v34[4 * v26 + 4 * v14], v33);
        }
        double v37 = (double)(int)v26;
        *((double *)this + 20) = *((double *)this + 20) - (double)(int)v26;
        float v11 = (int *)((char *)this + 72);
        float32x4_t v38 = (char *)this + 72;
      }
      else
      {
        float32x4_t v27 = (uint64_t (*)(void *, float *, float *, uint64_t, uint64_t))*((void *)this + 1);
        uint64_t v28 = *((void *)this + 2);
        float32x4_t v29 = (void *)((char *)this + (v28 >> 1));
        if (v28) {
          float32x4_t v27 = *(uint64_t (**)(void *, float *, float *, uint64_t, uint64_t))(*v29 + v27);
        }
        double result = (void *)v27(v29, v22, v17, v14, a5);
        int v39 = (int)*((double *)this + 20);
        if (*((_DWORD *)this + 18) - v39 >= 1)
        {
          size_t v40 = 4 * (*((_DWORD *)this + 18) - v39);
          double result = memmove(*((void **)this + 10), (const void *)(*((void *)this + 10) + 4 * v39), v40);
          if (v17) {
            double result = memmove(*((void **)this + 11), (const void *)(*((void *)this + 11) + 4 * v39), v40);
          }
        }
        double v37 = (double)v39;
        *((double *)this + 20) = *((double *)this + 20) - (double)v39;
        *((_DWORD *)this + 18) -= v39;
        if (!*((unsigned char *)this + 133))
        {
          float v11 = (int *)((char *)this + 72);
          goto LABEL_44;
        }
        int v46 = v13;
        int v32 = *(_DWORD *)(*((void *)this + 7) + 16) * v39;
        float32x4_t v38 = (char *)this + 104;
        float v11 = (int *)((char *)this + 72);
      }
      *(_DWORD *)v38 -= v32;
      LODWORD(v13) = v46;
LABEL_44:
      *((double *)this + 17) = *((double *)this + 17) + v37;
      *((double *)this + 34) = *((double *)this + 34) + (double)v14;
      unint64_t v9 = (v9 - v13);
      v10 += v14;
      BOOL v41 = __OFSUB__(v5, v14);
      v5 -= v14;
    }
    while (!((v5 < 0) ^ v41 | (v5 == 0)));
  }
  *((unsigned char *)this + 24) = 0;
  return result;
}

void sub_19007AE0C(_Unwind_Exception *a1)
{
  *(unsigned char *)(v1 + 24) = 0;
  _Unwind_Resume(a1);
}

uint64_t Resampler2::Process(Resampler2 *this, float *a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(Resampler2 *, float *, void, uint64_t, uint64_t))(*(void *)this + 48))(this, a2, 0, a3, a4);
}

void std::vector<SincKernel *>::reserve(void **a1, unint64_t a2)
{
  if (a2 > ((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3)
  {
    int64_t v3 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unsigned int v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(a2);
    int v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    double v7 = &v4[8 * v6];
    unint64_t v9 = (char *)*a1;
    uint64_t v8 = (char *)a1[1];
    unsigned int v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        uint64_t v11 = *((void *)v8 - 1);
        v8 -= 8;
        *((void *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v8 != v9);
      uint64_t v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

uint64_t Resampler2::InitializeVarispeedMode(Resampler2 *this)
{
  if ((this + 1) >= 0x20) {
    uint64_t v1 = ((this + 1) >> 5) - 1;
  }
  else {
    uint64_t v1 = 0;
  }
  pthread_mutex_lock(&sInitLocker);
  if (!sVarispeedRefCount[v1])
  {
    uint64_t v2 = (void **)sVarispeedSincKernels[v1];
    if (!v2) {
      operator new();
    }
    std::vector<SincKernel *>::reserve(v2, 0x24uLL);
    signed int v3 = vcvtpd_s64_f64(exp2((double)0 * 3600.0 / 36.0 / 1200.0) * 100.0);
    if (v3 - 100 > 0)
    {
      uint64_t v4 = v3 - 100;
      int v5 = sVarispeedRateTable;
      do
      {
        *v5++ = 0;
        --v4;
      }
      while (v4);
    }
    operator new();
  }
  ++sVarispeedRefCount[v1];
  return pthread_mutex_unlock(&sInitLocker);
}

void sub_19007B210(ResamplerInitLocker *a1)
{
}

uint64_t Resampler2::ShutdownVarispeedMode(Resampler2 *this)
{
  int v1 = (int)this;
  pthread_mutex_lock(&sInitLocker);
  if ((v1 + 1) >= 0x20) {
    uint64_t v2 = ((v1 + 1) >> 5) - 1;
  }
  else {
    uint64_t v2 = 0;
  }
  int v3 = sVarispeedRefCount[v2];
  if (v3 >= 1) {
    sVarispeedRefCount[v2] = --v3;
  }
  if (!v3)
  {
    uint64_t v4 = (uint64_t *)sVarispeedSincKernels[v2];
    if (v4)
    {
      uint64_t v5 = v4[1];
      if (v5 != *v4)
      {
        unint64_t v6 = 0;
        unsigned int v7 = 1;
        uint64_t v5 = *v4;
        do
        {
          uint64_t v8 = *(SincKernel **)(v5 + 8 * v6);
          if (v8)
          {
            SincKernel::~SincKernel(v8);
            MEMORY[0x192FC8940]();
            uint64_t v4 = (uint64_t *)sVarispeedSincKernels[v2];
            uint64_t v5 = *v4;
          }
          unint64_t v6 = v7++;
        }
        while (v6 < (v4[1] - v5) >> 3);
      }
      v4[1] = v5;
    }
  }
  return pthread_mutex_unlock(&sInitLocker);
}

double *Resampler2::MockResampler2::SetVarispeedRate(double *this, double a2)
{
  double v2 = *this;
  this[5] = a2;
  this[6] = 1.0 / a2;
  *((unsigned char *)this + 33) = 0;
  if (a2 <= 1.0)
  {
    uint64_t v3 = 0;
  }
  else if (a2 <= 7.98)
  {
    uint64_t v3 = sVarispeedRateTable[vcvtpd_s64_f64(a2 * 100.0) - 100];
  }
  else
  {
    uint64_t v3 = 35;
  }
  unsigned int v4 = *(_DWORD *)(*(void *)&v2 + 112) + 1;
  if (v4 >= 0x20) {
    unsigned int v5 = (v4 >> 5) - 1;
  }
  else {
    unsigned int v5 = 0;
  }
  this[1] = *(double *)(**((void **)&sVarispeedSincKernels + v5) + 8 * v3);
  return this;
}

uint64_t Resampler2::PushZeroes(Resampler2 *this)
{
  int v2 = *((_DWORD *)this + 30);
  if (v2 == 2)
  {
    unsigned int v3 = (*(uint64_t (**)(Resampler2 *))(*(void *)this + 152))(this);
  }
  else if (v2 == 1)
  {
    unsigned int v3 = (*(unsigned int (**)(Resampler2 *))(*(void *)this + 152))(this) >> 1;
  }
  else
  {
    unsigned int v3 = 0;
  }
  if (*((double *)this + 21) <= 1.0) {
    unsigned int v4 = v3;
  }
  else {
    unsigned int v4 = v3 + 1;
  }
  if (!v4) {
    return 0;
  }
  uint64_t v5 = *((int *)this + 18);
  unsigned int v6 = *((_DWORD *)this + 19) - v5;
  if (v6 >= v4) {
    uint64_t v7 = v4;
  }
  else {
    uint64_t v7 = v6;
  }
  bzero((void *)(*((void *)this + 10) + 4 * v5), 4 * v7);
  bzero((void *)(*((void *)this + 11) + 4 * *((int *)this + 18)), 4 * v7);
  *((_DWORD *)this + 18) += v7;
  return v7;
}

Resampler2::MockResampler2 *Resampler2::MockResampler2::MockResampler2(Resampler2::MockResampler2 *this, const Resampler2 *a2)
{
  *(void *)this = a2;
  *((void *)this + 1) = *((void *)a2 + 7);
  int v4 = *((_DWORD *)a2 + 26);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 18);
  *((_DWORD *)this + 5) = v4;
  *((void *)this + 3) = *((void *)a2 + 20);
  *((_WORD *)this + 16) = *((_WORD *)a2 + 66);
  *(_OWORD *)((char *)this + 40) = *(_OWORD *)((char *)a2 + 168);
  RateRamp::RateRamp((Resampler2::MockResampler2 *)((char *)this + 56));
  *((unsigned char *)this + 112) = 0;
  uint64_t v5 = *((void *)a2 + 34);
  *((void *)this + 15) = *((void *)a2 + 17);
  *((void *)this + 16) = v5;
  return this;
}

uint64_t Resampler2::MockResampler2::GetNumberOfSourceFrames(unsigned int **this, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  int v4 = *this;
  if (!*((unsigned char *)this + 33))
  {
    if (!*((unsigned char *)this + 32))
    {
      if (*((unsigned char *)this + 112))
      {
        RateRamp::RateRamp((RateRamp *)v11);
        double v10 = (double)a2;
        RateRamp::Segment((RateRamp *)(this + 7), *((double *)this + 11) + 0.0, &v10, 1000000000.0, (RateRamp *)v11);
        RateRamp::InputDuration((RateRamp *)v11);
        double v8 = (double)vcvtpd_u64_f64(v9);
      }
      else
      {
        double v8 = *((double *)this + 5) * (double)a2;
      }
      goto LABEL_8;
    }
LABEL_7:
    double v8 = (double)a2;
LABEL_8:
    int v6 = vcvtpd_s64_f64((double)(*(unsigned int (**)(unsigned int *))(*(void *)v4 + 152))(v4)+ -1.0+ *((double *)this + 3)+ v8- (double)*((int *)this + 4));
    return v6 & ~(v6 >> 31);
  }
  if (*((unsigned char *)this + 32)) {
    goto LABEL_7;
  }
  uint64_t v5 = v4[27] * a2;
  int v6 = (*(uint64_t (**)(unsigned int *))(*(void *)v4 + 152))(*this)
     + ~*((_DWORD *)this + 4)
     + (uint64_t)(v5 + *((unsigned int *)this + 5) + (unint64_t)v4[31] - 1) / v4[31];
  return v6 & ~(v6 >> 31);
}

void DSPGraph::Base::printShort(uint64_t a1, void *a2, unsigned int a3)
{
}

uint64_t DSPGraph::Base::print(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)a1 + 24))(a1, MEMORY[0x1E4FBA250], a2, a3);
}

void AT::Resampler::create(AT::Resampler *this, double a2, double a3, double a4)
{
}

void sub_19007B83C(_Unwind_Exception *a1)
{
  MEMORY[0x192FC8940](v1, 0x10E3C40D45BBD2DLL);
  _Unwind_Resume(a1);
}

void AT::ExportedResampler::~ExportedResampler(AT::ExportedResampler *this)
{
  *(void *)this = &unk_1EDF94E58;
  Resampler2::~Resampler2(this);
  JUMPOUT(0x192FC8940);
}

{
  *(void *)this = &unk_1EDF94E58;
  Resampler2::~Resampler2(this);
}

void AT::Resampler::createWithFilterSpecification(AT::Resampler *this, double a2, double a3, double a4, double a5, double a6)
{
}

void sub_19007BA14(_Unwind_Exception *a1)
{
  MEMORY[0x192FC8940](v1, 0x10E3C40D45BBD2DLL);
  _Unwind_Resume(a1);
}

AT::Resampler::MockResampler *AT::Resampler::MockResampler::MockResampler(AT::Resampler::MockResampler *this, AT::Resampler *a2)
{
  *(void *)this = a2;
  if (*((unsigned char *)a2 + 416)) {
    *((unsigned char *)a2 + 416) = 0;
  }
  Resampler2::MockResampler2::MockResampler2((AT::Resampler *)((char *)a2 + 280), a2);
  *((unsigned char *)a2 + 416) = 1;
  return this;
}

{
  *(void *)this = a2;
  if (*((unsigned char *)a2 + 416)) {
    *((unsigned char *)a2 + 416) = 0;
  }
  Resampler2::MockResampler2::MockResampler2((AT::Resampler *)((char *)a2 + 280), a2);
  *((unsigned char *)a2 + 416) = 1;
  return this;
}

void AT::Resampler::MockResampler::~MockResampler(AT::Resampler::MockResampler *this)
{
  if (*(unsigned char *)(*(void *)this + 416)) {
    *(unsigned char *)(*(void *)this + 416) = 0;
  }
}

{
  if (*(unsigned char *)(*(void *)this + 416)) {
    *(unsigned char *)(*(void *)this + 416) = 0;
  }
}

uint64_t AT::Resampler::MockResampler::GetNumberOfSourceFrames(AT::Resampler::MockResampler *this, unsigned int a2)
{
  return Resampler2::MockResampler2::GetNumberOfSourceFrames((unsigned int **)(*(void *)this + 280), a2);
}

uint64_t AT::Resampler::MockResampler::Process(AT::Resampler::MockResampler *this, unsigned int a2)
{
  int v2 = a2;
  uint64_t v3 = *(void *)this;
  int v4 = (unsigned int **)(*(void *)this + 280);
  double v5 = *(double *)(*(void *)this + 328);
  int NumberOfSourceFrames = Resampler2::MockResampler2::GetNumberOfSourceFrames(v4, a2);
  if (v2 < 1) {
    return 0;
  }
  int v7 = NumberOfSourceFrames;
  LODWORD(v8) = 0;
  signed int v9 = vcvtd_n_s64_f64(v5, 0xAuLL);
  do
  {
    int v10 = v7;
    if (v2 >= v9) {
      unsigned int v11 = v9;
    }
    else {
      unsigned int v11 = v2;
    }
    if (v2 > v9)
    {
      int v12 = Resampler2::MockResampler2::GetNumberOfSourceFrames(v4, v11);
      if (v12 >= v7) {
        int v10 = v7;
      }
      else {
        int v10 = v12;
      }
    }
    if (v10 < 1)
    {
      int v13 = 0;
    }
    else
    {
      *(_DWORD *)(v3 + 296) += v10;
      int v13 = v10;
    }
    if (*(unsigned char *)(v3 + 312))
    {
      double v14 = *(double *)(v3 + 304);
      *(double *)(v3 + 304) = v14 - (double)(int)v14;
      *(_DWORD *)(v3 + 296) = *(_DWORD *)(v3 + 296) - v11 - (int)v14;
    }
    else
    {
      double v15 = (double)v11;
      if (*(unsigned char *)(v3 + 392))
      {
        long long v16 = *(_OWORD *)(v3 + 352);
        v26[0] = *(_OWORD *)(v3 + 336);
        v26[1] = v16;
        v26[2] = *(_OWORD *)(v3 + 368);
        uint64_t v27 = *(void *)(v3 + 384);
        RateRamp::OffsetTimes((RateRamp *)v26, -*(double *)(v3 + 400), -*(double *)(v3 + 408));
        double v17 = (double)*(int *)(v3 + 296);
        RateRamp::RateForOutputTime((RateRamp *)v26, (double)(v11 - 1));
        *(void *)(v3 + 320) = v18;
        RateRamp::InputTimeForOutputTime((RateRamp *)v26, (double)(v11 - 1));
        double v20 = fmax(v19, 0.0);
        if (v20 >= v17) {
          double v21 = v17;
        }
        else {
          double v21 = v20;
        }
      }
      else
      {
        double v21 = *(double *)(v3 + 304) + v15 * *(double *)(v3 + 320);
      }
      double v22 = (double)(int)v21;
      *(double *)(v3 + 304) = v21 - v22;
      *(_DWORD *)(v3 + 296) -= (int)v21;
      if (*(unsigned char *)(v3 + 313)) {
        *(_DWORD *)(v3 + 300) -= *(_DWORD *)(*(void *)(v3 + 288) + 16) * (int)v21;
      }
      double v23 = *(double *)(v3 + 408) + v15;
      *(double *)(v3 + 400) = *(double *)(v3 + 400) + v22;
      *(double *)(v3 + 408) = v23;
    }
    v7 -= v10;
    uint64_t v8 = (v13 + v8);
    BOOL v24 = __OFSUB__(v2, v11);
    v2 -= v11;
  }
  while (!((v2 < 0) ^ v24 | (v2 == 0)));
  return v8;
}

double *AT::Resampler::MockResampler::SetVarispeedRate(AT::Resampler::MockResampler *this, double a2)
{
  return Resampler2::MockResampler2::SetVarispeedRate((double *)(*(void *)this + 280), a2);
}

uint64_t AT::Resampler::MockResampler::GetIsBypassed(AT::Resampler::MockResampler *this)
{
  return *(unsigned __int8 *)(*(void *)this + 312);
}

uint64_t AT::Resampler::MockResampler::SetIsBypassed(uint64_t this, char a2)
{
  *(unsigned char *)(*(void *)this + 312) = a2;
  return this;
}

double *AT::Resampler::MockResampler::SetRamp(double *result, long long *a2)
{
  uint64_t v2 = *(void *)result;
  if (a2)
  {
    if (*(double *)(v2 + 400) < 0.0) {
      *(void *)(v2 + 400) = 0;
    }
    *(unsigned char *)(v2 + 392) = 1;
    long long v4 = a2[1];
    long long v3 = a2[2];
    long long v5 = *a2;
    *(void *)(v2 + 384) = *((void *)a2 + 6);
    *(_OWORD *)(v2 + 352) = v4;
    *(_OWORD *)(v2 + 368) = v3;
    *(_OWORD *)(v2 + 336) = v5;
    *(double *)&long long v3 = (*(double *)(v2 + 336) + *(double *)(v2 + 344)) * 0.5;
    *(void *)(v2 + 320) = v3;
    *(double *)(v2 + 328) = 1.0 / *(double *)&v3;
    *(unsigned char *)(v2 + 313) = 0;
  }
  else
  {
    *(unsigned char *)(v2 + 392) = 0;
    return Resampler2::MockResampler2::SetVarispeedRate((double *)(v2 + 280), *(double *)(v2 + 320));
  }
  return result;
}

void *AUProcessingBlockBase::RemoveAUAtIndex(void *this, unsigned int a2)
{
  uint64_t v3 = this[3];
  uint64_t v2 = this[4];
  if (0xAAAAAAAAAAAAAAABLL * ((v2 - v3) >> 3) > a2)
  {
    long long v4 = this;
    uint64_t v5 = v3 + 24 * a2;
    uint64_t v6 = v2 - (v5 + 24);
    if (v2 != v5 + 24) {
      this = memmove((void *)v5, (const void *)(v5 + 24), v2 - (v5 + 24));
    }
    void v4[4] = v5 + v6;
  }
  return this;
}

uint64_t AUProcessingBlockBase::InsertAUAtIndex(uint64_t a1, unsigned int a2, unint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v3 = a1 + 24;
  if (0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 3) >= a2) {
    std::vector<AUPBUnit>::insert(v3, (char *)(v4 + 24 * a2), a3);
  }
  return 0;
}

void std::vector<AUPBUnit>::insert(uint64_t a1, char *__src, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v6 = *(char **)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    int v12 = *(char **)a1;
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v13 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = __src - v12;
    int64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((__src - v12) >> 3);
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)v12) >> 3);
    if (2 * v16 > v13) {
      unint64_t v13 = 2 * v16;
    }
    if (v16 >= 0x555555555555555) {
      unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v17 = v13;
    }
    if (v17)
    {
      double v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v17);
    }
    else
    {
      double v19 = 0;
      uint64_t v18 = 0;
    }
    double v22 = &v19[24 * v15];
    double v23 = &v19[24 * v18];
    if (v15 == v18)
    {
      if (v14 < 1)
      {
        if (v12 == __src) {
          unint64_t v25 = 1;
        }
        else {
          unint64_t v25 = 2 * v15;
        }
        uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v25);
        double v22 = &v26[24 * (v25 >> 2)];
        double v23 = &v26[24 * v27];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        uint64_t v24 = v15 + 2;
        if (v15 >= -1) {
          uint64_t v24 = v15 + 1;
        }
        v22 -= 24 * (v24 >> 1);
      }
    }
    long long v28 = *(_OWORD *)v3;
    *((void *)v22 + 2) = *(void *)(v3 + 16);
    *(_OWORD *)double v22 = v28;
    float32x4_t v29 = *(char **)a1;
    uint64_t v30 = v22;
    if (*(char **)a1 != __src)
    {
      int v31 = __src;
      int v32 = v22;
      do
      {
        long long v33 = *(_OWORD *)(v31 - 24);
        uint64_t v30 = v32 - 24;
        *((void *)v32 - 1) = *((void *)v31 - 1);
        *(_OWORD *)(v32 - 24) = v33;
        v31 -= 24;
        v32 -= 24;
      }
      while (v31 != v29);
    }
    unint64_t v34 = *(unsigned char **)(a1 + 8);
    uint64_t v35 = v34 - __src;
    if (v34 != __src) {
      memmove(v22 + 24, __src, v34 - __src);
    }
    int v36 = *(char **)a1;
    *(void *)a1 = v30;
    *(void *)(a1 + 8) = &v22[v35 + 24];
    *(void *)(a1 + 16) = v23;
    if (v36)
    {
      operator delete(v36);
    }
  }
  else if (__src == v6)
  {
    long long v21 = *(_OWORD *)a3;
    *((void *)__src + 2) = *(void *)(a3 + 16);
    *(_OWORD *)int __src = v21;
    *(void *)(a1 + 8) = __src + 24;
  }
  else
  {
    uint64_t v8 = __src + 24;
    signed int v9 = v6 - 24;
    uint64_t v10 = *(void *)(a1 + 8);
    while (v9 < v6)
    {
      long long v11 = *(_OWORD *)v9;
      *(void *)(v10 + 16) = *((void *)v9 + 2);
      *(_OWORD *)uint64_t v10 = v11;
      v10 += 24;
      v9 += 24;
    }
    *(void *)(a1 + 8) = v10;
    if (v6 != v8) {
      memmove(__src + 24, __src, v6 - v8);
    }
    if ((unint64_t)__src <= v3) {
      v3 += 24 * (*(void *)(a1 + 8) > v3);
    }
    long long v20 = *(_OWORD *)v3;
    *((void *)__src + 2) = *(void *)(v3 + 16);
    *(_OWORD *)int __src = v20;
  }
}

void sub_19007C0C0(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUProcessingBlockBase::SetProperty(AUProcessingBlockBase *this, int a2, CFTypeRef cf)
{
  if (a2 != 1635087726) {
    return 1064333936;
  }
  CFTypeID v5 = CFGetTypeID(cf);
  if (v5 != CFDataGetTypeID()) {
    return 1886806380;
  }
  BytePtr = CFDataGetBytePtr((CFDataRef)cf);
  unint64_t Length = CFDataGetLength((CFDataRef)cf);
  signed int v9 = (unsigned char *)*((void *)this + 3);
  uint64_t v8 = (unsigned char *)*((void *)this + 4);
  int64_t v10 = v8 - v9;
  if (v8 == v9)
  {
    long long v11 = 0;
    int v12 = 0;
  }
  else
  {
    if (0xAAAAAAAAAAAAAAABLL * (v10 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    long long v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(0xAAAAAAAAAAAAAAABLL * (v10 >> 3));
    memmove(v11, v9, v10);
    int v12 = &v11[8 * (v10 >> 3)];
  }
  if (Length > 0x17 || v11 < v12)
  {
    uint64_t v14 = 0;
    int64_t v15 = &BytePtr[24 * (Length / 0x18)];
    unint64_t v16 = v11;
    while (1)
    {
      if (BytePtr >= v15)
      {
LABEL_16:
        (*(void (**)(AUProcessingBlockBase *, uint64_t))(*(void *)this + 88))(this, v14);
        v16 += 24;
        goto LABEL_21;
      }
      if (v16 >= v12) {
        goto LABEL_17;
      }
      uint64_t v17 = *((void *)BytePtr + 2);
      if (*((void *)v16 + 2) != v17) {
        break;
      }
      BytePtr += 24;
      v16 += 24;
LABEL_20:
      uint64_t v14 = (v14 + 1);
LABEL_21:
      if (BytePtr >= v15 && v16 >= v12) {
        goto LABEL_23;
      }
    }
    if (v17) {
      goto LABEL_16;
    }
LABEL_17:
    uint64_t v13 = (*(uint64_t (**)(AUProcessingBlockBase *, uint64_t, const UInt8 *))(*(void *)this + 80))(this, v14, BytePtr);
    if (v13) {
      goto LABEL_24;
    }
    BytePtr += 24;
    goto LABEL_20;
  }
LABEL_23:
  uint64_t v13 = 0;
LABEL_24:
  if (v11) {
    operator delete(v11);
  }
  return v13;
}

void sub_19007C2BC(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUProcessingBlockBase::CopyProperty(const UInt8 **this, int a2, CFDataRef *a3)
{
  switch(a2)
  {
    case 1635087726:
      CFDataRef v6 = CFDataCreate(0, this[3], this[4] - this[3]);
      uint64_t result = 0;
      *a3 = v6;
      break;
    case 1635148149:
      uint64_t __p = 0;
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      (*((void (**)(const UInt8 **, void **))*this + 4))(this, &__p);
      *a3 = CFDataCreate(0, (const UInt8 *)__p, v8 - (unsigned char *)__p);
      if (__p)
      {
        uint64_t v8 = __p;
        operator delete(__p);
      }
      return 0;
    case 1851878757:
      CFDataRef v4 = (const __CFData *)this[1];
      *a3 = v4;
      CFRetain(v4);
      return 0;
    default:
      return 1064333936;
  }
  return result;
}

void sub_19007C3C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUProcessingBlockBase_NonAU::AUSetParameter(AUProcessingBlockBase_NonAU *this, OpaqueRemoteAudioUnit *a2, uint64_t a3, uint64_t a4, uint64_t a5, float a6)
{
  return (*(uint64_t (**)(OpaqueRemoteAudioUnit *, uint64_t, uint64_t, uint64_t, float))(*(void *)a2 + 48))(a2, a3, a4, a5, a6);
}

uint64_t AUProcessingBlockBase_NonAU::AUGetParameter(AUProcessingBlockBase_NonAU *this, OpaqueRemoteAudioUnit *a2, uint64_t a3, uint64_t a4, uint64_t a5, float *a6)
{
  return (*(uint64_t (**)(OpaqueRemoteAudioUnit *, uint64_t, uint64_t, uint64_t, float *))(*(void *)a2 + 40))(a2, a3, a4, a5, a6);
}

uint64_t AUProcessingBlockBase_NonAU::AUSetProperty(AUProcessingBlockBase_NonAU *this, OpaqueRemoteAudioUnit *a2, uint64_t a3, uint64_t a4, uint64_t a5, const void *a6, uint64_t a7)
{
  return (*(uint64_t (**)(OpaqueRemoteAudioUnit *, uint64_t, uint64_t, uint64_t, const void *, uint64_t))(*(void *)a2 + 32))(a2, a3, a4, a5, a6, a7);
}

uint64_t AUProcessingBlockBase_NonAU::AUGetProperty(AUProcessingBlockBase_NonAU *this, OpaqueRemoteAudioUnit *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, unsigned int *a7)
{
  return (*(uint64_t (**)(OpaqueRemoteAudioUnit *, uint64_t, uint64_t, uint64_t, void *, unsigned int *))(*(void *)a2 + 24))(a2, a3, a4, a5, a6, a7);
}

uint64_t AUProcessingBlockBase_NonAU::AUGetPropertyInfo(AUProcessingBlockBase_NonAU *this, OpaqueRemoteAudioUnit *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int *a6, unsigned __int8 *a7)
{
  return (*(uint64_t (**)(OpaqueRemoteAudioUnit *, uint64_t, uint64_t, uint64_t, unsigned int *, unsigned __int8 *))(*(void *)a2 + 16))(a2, a3, a4, a5, a6, a7);
}

void AUProcessingBlockBase_NonAU::GetAvailableAUs(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = (_DWORD *)*a2;
  a2[1] = *a2;
  for (uint64_t i = *(uint64_t **)(a1 + 24); i != *(uint64_t **)(a1 + 32); i += 3)
  {
    unint64_t v6 = a2[2];
    if ((unint64_t)v2 >= v6)
    {
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v2 - *a2) >> 2);
      unint64_t v9 = v8 + 1;
      if (v8 + 1 > 0x1555555555555555) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *a2) >> 2);
      if (2 * v10 > v9) {
        unint64_t v9 = 2 * v10;
      }
      if (v10 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v11 = 0x1555555555555555;
      }
      else {
        unint64_t v11 = v9;
      }
      if (v11) {
        unint64_t v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<auoop::RenderPipeConfig::CompactFormat>>(v11);
      }
      else {
        uint64_t v12 = 0;
      }
      unint64_t v13 = v11 + 12 * v8;
      uint64_t v14 = *i;
      *(_DWORD *)(v13 + 8) = *((_DWORD *)i + 2);
      *(void *)unint64_t v13 = v14;
      unint64_t v16 = (_DWORD *)*a2;
      int64_t v15 = (_DWORD *)a2[1];
      unint64_t v17 = v13;
      if (v15 != (_DWORD *)*a2)
      {
        do
        {
          uint64_t v18 = *(void *)(v15 - 3);
          v15 -= 3;
          int v19 = v15[2];
          *(void *)(v17 - 12) = v18;
          v17 -= 12;
          *(_DWORD *)(v17 + 8) = v19;
        }
        while (v15 != v16);
        int64_t v15 = (_DWORD *)*a2;
      }
      uint64_t v2 = (_DWORD *)(v13 + 12);
      *a2 = v17;
      a2[1] = v13 + 12;
      a2[2] = v11 + 12 * v12;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      uint64_t v7 = *i;
      v2[2] = *((_DWORD *)i + 2);
      *(void *)uint64_t v2 = v7;
      v2 += 3;
    }
    a2[1] = (unint64_t)v2;
  }
}

void AUProcessingBlockBase_NonAU::~AUProcessingBlockBase_NonAU(AUProcessingBlockBase_NonAU *this)
{
  AUProcessingBlockBase_NonAU::~AUProcessingBlockBase_NonAU(this);
  JUMPOUT(0x192FC8940);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t v4[2];
  uint64_t vars8;

  *(void *)this = &unk_1EDF94278;
  while (*((void *)this + 8))
  {
    uint64_t v2 = *((void *)this + 6);
    unint64_t v3 = *(std::__shared_weak_count **)(v2 + 40);
    v4[0] = *(void *)(v2 + 32);
    v4[1] = (unint64_t)v3;
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    AUProcessingBlockBase_NonAU::RemoveItemFromBlock(this, v4);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  std::__tree<std::shared_ptr<AUProcessingBlockBase_NonAUItem>>::destroy(*((void **)this + 7));
  AUProcessingBlockBase::~AUProcessingBlockBase(this);
}

void AUProcessingBlockBase_NonAU::RemoveItemFromBlock(void *a1, unint64_t *a2)
{
  uint64_t v5 = a1[3];
  uint64_t v4 = a1[4];
  if (v5 != v4)
  {
    while (*(void *)(v5 + 16) != *a2)
    {
      v5 += 24;
      if (v5 == v4) {
        goto LABEL_10;
      }
    }
  }
  if (v5 != v4)
  {
    AUPBUnregisterAU((uint64_t)a1, *(void *)(v5 + 16));
    uint64_t v6 = a1[3];
    uint64_t v7 = a1[4];
    unint64_t v8 = -1431655765 * ((unint64_t)(v5 - v6) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 3) > v8)
    {
      uint64_t v9 = v6 + 24 * v8;
      uint64_t v10 = v7 - (v9 + 24);
      if (v7 != v9 + 24) {
        memmove((void *)(v6 + 24 * v8), (const void *)(v9 + 24), v7 - (v9 + 24));
      }
      a1[4] = v9 + v10;
    }
  }
LABEL_10:
  unint64_t v11 = (uint64_t *)a1[7];
  if (v11)
  {
    unint64_t v12 = *a2;
    unint64_t v13 = a1 + 7;
    uint64_t v14 = (void *)a1[7];
    do
    {
      unint64_t v15 = v14[4];
      BOOL v16 = v15 >= v12;
      if (v15 >= v12) {
        unint64_t v17 = v14;
      }
      else {
        unint64_t v17 = v14 + 1;
      }
      if (v16) {
        unint64_t v13 = v14;
      }
      uint64_t v14 = (void *)*v17;
    }
    while (*v17);
    if (v13 != a1 + 7 && v12 >= v13[4])
    {
      uint64_t v18 = (uint64_t *)v13[1];
      if (v18)
      {
        do
        {
          int v19 = v18;
          uint64_t v18 = (uint64_t *)*v18;
        }
        while (v18);
      }
      else
      {
        long long v20 = v13;
        do
        {
          int v19 = (uint64_t *)v20[2];
          BOOL v21 = *v19 == (void)v20;
          long long v20 = v19;
        }
        while (!v21);
      }
      if ((uint64_t *)a1[6] == v13) {
        a1[6] = v19;
      }
      --a1[8];
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v11, v13);
      double v22 = (std::__shared_weak_count *)v13[5];
      if (v22) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      }
      operator delete(v13);
    }
  }
}

void std::__tree<std::shared_ptr<AUProcessingBlockBase_NonAUItem>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::shared_ptr<AUProcessingBlockBase_NonAUItem>>::destroy(*a1);
    std::__tree<std::shared_ptr<AUProcessingBlockBase_NonAUItem>>::destroy(a1[1]);
    uint64_t v2 = (std::__shared_weak_count *)a1[5];
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    operator delete(a1);
  }
}

void AUProcessingBlockBase::~AUProcessingBlockBase(AUProcessingBlockBase *this)
{
  *(void *)this = &unk_1EDF93170;
  AUPBUnregister(*((void *)this + 2));
  AUProcessingBlockBase::SetName(this, 0);
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

uint64_t AUProcessingBlock_AU_Instantiating::RemoveAUAtIndex(AUProcessingBlock_AU_Instantiating *this, unsigned int a2)
{
  uint64_t v4 = *((void *)this + 3) + 24 * a2;
  uint64_t result = AudioComponentInstanceDispose(*(AudioComponentInstance *)(v4 + 16));
  *(void *)(v4 + 16) = 0;
  uint64_t v7 = *((void *)this + 3);
  uint64_t v6 = *((void *)this + 4);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) > a2)
  {
    uint64_t v8 = v7 + 24 * a2;
    uint64_t v9 = v6 - (v8 + 24);
    if (v6 != v8 + 24) {
      uint64_t result = (uint64_t)memmove((void *)v8, (const void *)(v8 + 24), v6 - (v8 + 24));
    }
    *((void *)this + 4) = v8 + v9;
  }
  return result;
}

uint64_t AUProcessingBlock_AU_Instantiating::InsertAUAtIndex(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  *(void *)&inDesc.componentType = *a3;
  OSType v6 = *((_DWORD *)a3 + 2);
  inDesc.componentFlags = 0;
  inDesc.componentFlagsMasuint64_t k = 0;
  inDesc.componentManufacturer = v6;
  Next = AudioComponentFindNext(0, &inDesc);
  if (!Next) {
    return 4294957891;
  }
  AudioComponentInstance outInstance = 0;
  uint64_t v8 = AudioComponentInstanceNew(Next, &outInstance);
  if (!v8)
  {
    uint64_t v13 = *a3;
    int v14 = *((_DWORD *)a3 + 2);
    int v15 = 0;
    AudioComponentInstance v16 = outInstance;
    uint64_t v9 = *(void *)(a1 + 24);
    uint64_t v10 = *(void *)(a1 + 32);
    uint64_t v11 = a1 + 24;
    if (0xAAAAAAAAAAAAAAABLL * ((v10 - v9) >> 3) >= a2) {
      std::vector<AUPBUnit>::insert(v11, (char *)(v9 + 24 * a2), (unint64_t)&v13);
    }
  }
  return v8;
}

OpaqueAudioComponent *AUProcessingBlock_AU::GetAvailableAUs(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = 0;
  inDesc.componentFlagsMasuint64_t k = 0;
  *(_OWORD *)&inDesc.OSType componentType = *(_OWORD *)"xfua";
  while (1)
  {
    uint64_t result = AudioComponentFindNext(v3, &inDesc);
    if (!result) {
      break;
    }
    unint64_t v3 = result;
    Impl_AudioGetComponentInfo(result, &v21, 0);
    OSType componentType = v21.componentType;
    OSType componentSubType = v21.componentSubType;
    OSType componentManufacturer = v21.componentManufacturer;
    uint64_t v9 = *(OSType **)(a2 + 8);
    unint64_t v8 = *(void *)(a2 + 16);
    if ((unint64_t)v9 >= v8)
    {
      uint64_t v11 = *(OSType **)a2;
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *(void *)a2) >> 2);
      unint64_t v13 = v12 + 1;
      if (v12 + 1 > 0x1555555555555555) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (void)v11) >> 2);
      if (2 * v14 > v13) {
        unint64_t v13 = 2 * v14;
      }
      if (v14 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v15 = 0x1555555555555555;
      }
      else {
        unint64_t v15 = v13;
      }
      if (v15)
      {
        unint64_t v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<auoop::RenderPipeConfig::CompactFormat>>(v15);
        uint64_t v11 = *(OSType **)a2;
        uint64_t v9 = *(OSType **)(a2 + 8);
      }
      else
      {
        uint64_t v16 = 0;
      }
      unint64_t v17 = (OSType *)(v15 + 12 * v12);
      *unint64_t v17 = componentType;
      v17[1] = componentSubType;
      void v17[2] = componentManufacturer;
      uint64_t v18 = v17;
      if (v9 != v11)
      {
        do
        {
          uint64_t v19 = *(void *)(v9 - 3);
          v9 -= 3;
          OSType v20 = v9[2];
          *(void *)(v18 - 3) = v19;
          v18 -= 3;
          v18[2] = v20;
        }
        while (v9 != v11);
        uint64_t v11 = *(OSType **)a2;
      }
      uint64_t v10 = v17 + 3;
      *(void *)a2 = v18;
      *(void *)(a2 + 8) = v17 + 3;
      *(void *)(a2 + 16) = v15 + 12 * v16;
      if (v11) {
        operator delete(v11);
      }
    }
    else
    {
      *uint64_t v9 = v21.componentType;
      v9[1] = componentSubType;
      uint64_t v10 = v9 + 3;
      v9[2] = componentManufacturer;
    }
    *(void *)(a2 + 8) = v10;
  }
  return result;
}

void AUProcessingBlock_AU_Instantiating::~AUProcessingBlock_AU_Instantiating(AUProcessingBlock_AU_Instantiating *this)
{
  AUProcessingBlock_AU_Instantiating::~AUProcessingBlock_AU_Instantiating(this);
  JUMPOUT(0x192FC8940);
}

{
  uint64_t i;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_1EDF948C8;
  unint64_t v3 = *((void *)this + 3);
  for (uint64_t i = *((void *)this + 4); v3 != i; uint64_t i = *((void *)this + 4))
  {
    AudioComponentInstanceDispose(*(AudioComponentInstance *)(v3 + 16));
    v3 += 24;
  }
  AUProcessingBlockBase::~AUProcessingBlockBase(this);
}

void AUProcessingBlock_AU::~AUProcessingBlock_AU(AUProcessingBlock_AU *this)
{
  AUProcessingBlockBase::~AUProcessingBlockBase(this);
  JUMPOUT(0x192FC8940);
}

uint64_t AUProcessingBlockBase_NonAUItem::SetBypassed(uint64_t this, char a2)
{
  *(unsigned char *)(this + 8) = a2;
  return this;
}

uint64_t AUProcessingBlockBase_NonAUItem::GetBypassed(AUProcessingBlockBase_NonAUItem *this)
{
  return *((unsigned __int8 *)this + 8);
}

uint64_t AUProcessingBlockBase_NonAUItem::SetProperty(AUProcessingBlockBase_NonAUItem *this, int a2, unsigned int a3, unsigned int a4, _DWORD *a5, unsigned int a6)
{
  if (a2 != 21) {
    return 0xFFFFFFFFLL;
  }
  if (a6 >= 4) {
    (*(void (**)(AUProcessingBlockBase_NonAUItem *, BOOL))(*(void *)this + 88))(this, *a5 != 0);
  }
  return 0;
}

uint64_t AUProcessingBlockBase_NonAUItem::GetProperty(AUProcessingBlockBase_NonAUItem *this, int a2, uint64_t a3, uint64_t a4, _DWORD *a5, unsigned int *a6)
{
  uint64_t v10 = 0xFFFFFFFFLL;
  if (a2 <= 15)
  {
    if (a2 != 3)
    {
      if (a2 == 4 && a5 && a6 && *a6 >= 0x68)
      {
        uint64_t result = (*(uint64_t (**)(AUProcessingBlockBase_NonAUItem *, uint64_t, uint64_t, _DWORD *))(*(void *)this + 64))(this, a3, a4, a5);
        unsigned int v12 = 104;
LABEL_22:
        *a6 = v12;
        return result;
      }
      return v10;
    }
    LODWORD(__n) = 0;
    uint64_t v13 = (*(uint64_t (**)(AUProcessingBlockBase_NonAUItem *, uint64_t, void, std::vector<unsigned int>::size_type *))(*(void *)this + 56))(this, a3, 0, &__n);
    uint64_t v10 = v13;
    if (!a6 || v13) {
      return v10;
    }
    if (*a6 >= 4 * (unint64_t)__n)
    {
      std::vector<unsigned int>::vector(&__src, __n);
      uint64_t v10 = (*(uint64_t (**)(AUProcessingBlockBase_NonAUItem *, uint64_t, std::vector<unsigned int>::pointer, std::vector<unsigned int>::size_type *))(*(void *)this + 56))(this, a3, __src.__begin_, &__n);
      std::vector<char>::pointer begin = __src.__begin_;
      if (!v10)
      {
        unint64_t v15 = (unint64_t)((char *)__src.__end_ - (char *)__src.__begin_) >> 2;
        if (__n < v15) {
          LODWORD(v15) = __n;
        }
        unsigned int v16 = 4 * v15;
        if (a5) {
          memcpy(a5, __src.__begin_, (4 * v15));
        }
        *a6 = v16;
      }
      if (begin)
      {
        __src.__end_ = begin;
        operator delete(begin);
      }
      return v10;
    }
    return 0;
  }
  if (a2 != 16)
  {
    if (a2 != 21) {
      return v10;
    }
    if (a6) {
      *a6 = 4;
    }
    if (a5)
    {
      uint64_t v10 = 0;
      *a5 = (*(uint64_t (**)(AUProcessingBlockBase_NonAUItem *))(*(void *)this + 80))(this);
      return v10;
    }
    return 0;
  }
  if (a5 && a6 && *a6 >= 8)
  {
    uint64_t result = (*(uint64_t (**)(AUProcessingBlockBase_NonAUItem *, uint64_t, uint64_t, _DWORD *))(*(void *)this + 72))(this, a3, a4, a5);
    unsigned int v12 = 8;
    goto LABEL_22;
  }
  return v10;
}

void sub_19007D004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUProcessingBlockBase_NonAUItem::GetPropertyInfo(AUProcessingBlockBase_NonAUItem *this, int a2, uint64_t a3, uint64_t a4, unsigned int *a5, unsigned __int8 *a6)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a2 > 15)
  {
    if (a2 != 16)
    {
      if (a2 != 21) {
        return result;
      }
      if (a6) {
        *a6 = 1;
      }
      if (a5)
      {
        uint64_t result = 0;
        *a5 = 4;
        return result;
      }
      return 0;
    }
    uint64_t result = (*(uint64_t (**)(AUProcessingBlockBase_NonAUItem *, uint64_t, uint64_t, void))(*(void *)this + 72))(this, a3, a4, 0);
    if (result) {
      return result;
    }
    if (a5)
    {
      unsigned int v10 = 8;
      goto LABEL_20;
    }
LABEL_21:
    if (a6)
    {
      uint64_t result = 0;
LABEL_23:
      *a6 = 0;
      return result;
    }
    return 0;
  }
  if (a2 != 3)
  {
    if (a2 != 4) {
      return result;
    }
    if (a5)
    {
      unsigned int v10 = 104;
LABEL_20:
      *a5 = v10;
      goto LABEL_21;
    }
    goto LABEL_21;
  }
  int v11 = 0;
  uint64_t result = (*(uint64_t (**)(AUProcessingBlockBase_NonAUItem *, uint64_t, void, int *))(*(void *)this + 56))(this, a3, 0, &v11);
  if (!result)
  {
    if (a5) {
      *a5 = 4 * v11;
    }
    if (a6) {
      goto LABEL_23;
    }
  }
  return result;
}

uint64_t AUProcessingBlockBase::sAUSetParameter(AUProcessingBlockBase *this, void *a2, OpaqueRemoteAudioUnit *a3, float a4)
{
  return (*(uint64_t (**)(AUProcessingBlockBase *, void *, OpaqueRemoteAudioUnit *, float))(*(void *)this + 72))(this, a2, a3, a4);
}

uint64_t AUProcessingBlockBase::sAUGetParameter(AUProcessingBlockBase *this, void *a2, OpaqueRemoteAudioUnit *a3, unsigned int a4, unsigned int a5, unsigned int a6, float *a7)
{
  return (*(uint64_t (**)(AUProcessingBlockBase *, void *, OpaqueRemoteAudioUnit *))(*(void *)this + 64))(this, a2, a3);
}

uint64_t AUProcessingBlockBase::sAUSetProperty(AUProcessingBlockBase *this, void *a2, OpaqueRemoteAudioUnit *a3, uint64_t a4, uint64_t a5, uint64_t a6, const void *a7)
{
  return (*(uint64_t (**)(AUProcessingBlockBase *, void *, OpaqueRemoteAudioUnit *, uint64_t, uint64_t, uint64_t, const void *))(*(void *)this + 56))(this, a2, a3, a4, a5, a6, a7);
}

uint64_t AUProcessingBlockBase::sAUGetProperty(AUProcessingBlockBase *this, void *a2, OpaqueRemoteAudioUnit *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, unsigned int *a8)
{
  return (*(uint64_t (**)(AUProcessingBlockBase *, void *, OpaqueRemoteAudioUnit *, uint64_t, uint64_t, uint64_t, void *))(*(void *)this + 48))(this, a2, a3, a4, a5, a6, a7);
}

uint64_t AUProcessingBlockBase::sAUGetPropertyInfo(AUProcessingBlockBase *this, void *a2, OpaqueRemoteAudioUnit *a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7, unsigned __int8 *a8)
{
  return (*(uint64_t (**)(AUProcessingBlockBase *, void *, OpaqueRemoteAudioUnit *, uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)this + 40))(this, a2, a3, a4, a5, a6, a7);
}

uint64_t AUProcessingBlockBase::sSetProperty(AUProcessingBlockBase *this, void *a2, unsigned int a3, const void *a4)
{
  return (*(uint64_t (**)(AUProcessingBlockBase *, void *))(*(void *)this + 24))(this, a2);
}

uint64_t AUProcessingBlockBase::sCopyProperty(AUProcessingBlockBase *this, void *a2, unsigned int a3, const void **a4)
{
  return (*(uint64_t (**)(AUProcessingBlockBase *, void *))(*(void *)this + 16))(this, a2);
}

void AUProcessingBlockBase::AUProcessingBlockBase(AUProcessingBlockBase *this)
{
}

void AUProcessingBlockBase::UnitsChanged(AUProcessingBlockBase *this, int a2, OpaqueRemoteAudioUnit **a3)
{
  if (a2 && a3)
  {
    size_t v5 = (8 * a2);
    std::vector<unsigned char>::vector(__p, (v5 + 8));
    OSType v6 = __p[0];
    *(_DWORD *)__p[0] = 1685417580;
    v6[1] = v5;
    memcpy(v6 + 2, a3, v5);
    int v7 = 1685417580;
    AUPBPropertiesChanged(*((void *)this + 2), 1, (uint64_t)&v7, (uint64_t)v6, (v5 + 8));
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_19007D308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AUProcessingBlockBase_NonAU::AddItemToBlock(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  OSType v6 = (std::__shared_weak_count *)a3[1];
  v25[0] = *a3;
  v25[1] = (unint64_t)v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  AUProcessingBlockBase_NonAU::RemoveItemFromBlock((void *)a1, v25);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v21 = *a2;
  int v22 = *((_DWORD *)a2 + 2);
  int v23 = 0;
  unint64_t v24 = *a3;
  std::vector<AUPBUnit>::insert(a1 + 24, *(char **)(a1 + 24), (unint64_t)&v21);
  uint64_t v7 = AUPBRegisterAU(*(void *)(a1 + 16), v24);
  if (v7)
  {
    uint64_t v9 = *(void *)(a1 + 24);
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8 != v9)
    {
      uint64_t v10 = v8 - (v9 + 24);
      if (v8 != v9 + 24) {
        memmove(*(void **)(a1 + 24), (const void *)(v9 + 24), v8 - (v9 + 24));
      }
      *(void *)(a1 + 32) = v9 + v10;
    }
  }
  else
  {
    unsigned int v12 = (uint64_t **)(a1 + 56);
    int v11 = *(uint64_t **)(a1 + 56);
    if (v11)
    {
      unint64_t v13 = *a3;
      while (1)
      {
        while (1)
        {
          unint64_t v14 = (uint64_t **)v11;
          unint64_t v15 = v11[4];
          if (v13 >= v15) {
            break;
          }
          int v11 = *v14;
          unsigned int v12 = v14;
          if (!*v14) {
            goto LABEL_19;
          }
        }
        if (v15 >= v13) {
          break;
        }
        int v11 = v14[1];
        if (!v11)
        {
          unsigned int v12 = v14 + 1;
          goto LABEL_19;
        }
      }
    }
    else
    {
      unint64_t v14 = (uint64_t **)(a1 + 56);
LABEL_19:
      unsigned int v16 = (uint64_t *)operator new(0x30uLL);
      unint64_t v17 = v16;
      unint64_t v18 = a3[1];
      v16[4] = *a3;
      v16[5] = v18;
      if (v18) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t *v16 = 0;
      v16[1] = 0;
      void v16[2] = (uint64_t)v14;
      char *v12 = v16;
      uint64_t v19 = **(void **)(a1 + 48);
      if (v19)
      {
        *(void *)(a1 + 48) = v19;
        unint64_t v17 = *v12;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 56), v17);
      ++*(void *)(a1 + 64);
    }
  }
  int v26 = 1635087726;
  AUPBPropertiesChanged(*(void *)(a1 + 16), 1, (uint64_t)&v26, 0, 0);
  return v7;
}

void sub_19007D4D4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CABitStreamReader::ReadBits(CABitStreamReader *this, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  unsigned int v2 = *((_DWORD *)this + 7);
  int v3 = v2 - a2;
  if (v2 >= a2)
  {
    unsigned int v6 = *((_DWORD *)this + 6);
    uint64_t v5 = v6 >> -(char)a2;
    *((_DWORD *)this + 6) = v6 << a2;
    *((_DWORD *)this + 7) = v3;
  }
  else
  {
    if (v2)
    {
      int v4 = *((_DWORD *)this + 6) >> -(char)a2;
      a2 -= v2;
      *((_DWORD *)this + 7) = 0;
    }
    else
    {
      int v4 = 0;
    }
    int v7 = *((_DWORD *)this + 3);
    unsigned int v8 = *((_DWORD *)this + 2) - v7;
    if (v8)
    {
      if (v8 >= 0x20) {
        unsigned int v8 = 32;
      }
      unsigned int v9 = (v8 + 7) >> 3;
      switch(v9)
      {
        case 1u:
          uint64_t v10 = (unsigned __int8 *)*((void *)this + 2);
          int v11 = *v10 << 24;
          goto LABEL_18;
        case 2u:
          uint64_t v10 = (unsigned __int8 *)*((void *)this + 2);
          int v11 = (*v10 << 24) | (v10[1] << 16);
          goto LABEL_18;
        case 3u:
          uint64_t v10 = (unsigned __int8 *)*((void *)this + 2);
          int v11 = (*v10 << 24) | (v10[1] << 16) | (v10[2] << 8);
          goto LABEL_18;
        case 4u:
          uint64_t v10 = (unsigned __int8 *)*((void *)this + 2);
          int v11 = bswap32(*(_DWORD *)v10);
LABEL_18:
          *((_DWORD *)this + 6) = v11;
          break;
        default:
          uint64_t v10 = (unsigned __int8 *)*((void *)this + 2);
          break;
      }
      *((void *)this + 2) = &v10[v9];
      *((_DWORD *)this + 3) = v8 + v7;
    }
    else
    {
      *((_DWORD *)this + 6) = 0;
    }
    unsigned int v12 = *((_DWORD *)this + 6);
    unsigned int v13 = v8 - a2;
    if (v8 < a2) {
      unsigned int v13 = 0;
    }
    BOOL v14 = a2 >= v8;
    unsigned int v16 = a2 - v8;
    BOOL v15 = v16 != 0 && v14;
    int v17 = -1 << v16;
    if (!v15) {
      int v17 = -1;
    }
    int v18 = v17 & (v12 >> -(char)a2);
    int v19 = v12 << a2;
    if (a2 >= 0x20) {
      int v19 = 0;
    }
    *((_DWORD *)this + 6) = v19;
    *((_DWORD *)this + 7) = v13;
    return (v18 + v4);
  }
  return v5;
}

void CA::extractMetadata(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = a1;
  AudioMetadataMemoryPool::create<AudioMetadataFormatExtended>(a3, a1);
  float v450 = 0;
  float v449 = 0;
  unint64_t v451 = 0;
  float v447 = 0;
  float v446 = 0;
  unint64_t v448 = 0;
  float v444 = 0;
  float v443 = 0;
  unint64_t v445 = 0;
  float v441 = 0;
  float v440 = 0;
  unint64_t v442 = 0;
  float v438 = 0;
  float v437 = 0;
  unint64_t v439 = 0;
  uint64_t v435 = 0;
  float v434 = 0;
  uint64_t v436 = 0;
  uint64_t v432 = 0;
  float v431 = 0;
  uint64_t v433 = 0;
  uint64_t v429 = 0;
  float v428 = 0;
  uint64_t v430 = 0;
  if (*a2 == a2[1])
  {
    uint64_t v358 = a3[1];
    if (v358) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v358 + 8), 1uLL, memory_order_relaxed);
    }
    AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataProgramme,AudioMetadataProgrammeRefs,AudioMetadataFormatExtended>();
  }
  *(void *)float v368 = v4;
  uint64_t v360 = *a2;
  AudioMetadataMemoryPool::create<AudioMetadataProgramme>(v426, v4);
  int v7 = *(char **)v426;
  unsigned int v8 = v450;
  if ((unint64_t)v450 >= v451)
  {
    uint64_t v10 = (char *)v449;
    uint64_t v11 = (v450 - (unsigned char *)v449) >> 3;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = v451 - (void)v449;
    if ((uint64_t)(v451 - (void)v449) >> 2 > v12) {
      unint64_t v12 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14) {
      unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v14);
    }
    else {
      uint64_t v15 = 0;
    }
    unsigned int v16 = (char *)(v14 + 8 * v11);
    *(void *)unsigned int v16 = v7;
    unsigned int v9 = v16 + 8;
    if (v8 != v10)
    {
      do
      {
        uint64_t v17 = *((void *)v8 - 1);
        v8 -= 8;
        *((void *)v16 - 1) = v17;
        v16 -= 8;
      }
      while (v8 != v10);
      unsigned int v8 = (char *)v449;
    }
    float v449 = v16;
    unint64_t v451 = v14 + 8 * v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(void *)float v450 = *(void *)v426;
    unsigned int v9 = v8 + 8;
  }
  float v450 = v9;
  if (*(unsigned char *)(v360 + 24))
  {
    int v18 = v426[0];
    v425[0] = *(void *)v426;
    v425[1] = v427;
    if (v427) {
      atomic_fetch_add_explicit(v427 + 1, 1uLL, memory_order_relaxed);
    }
    int v19 = (char *)v360;
    if (*(char *)(v360 + 23) < 0) {
      int v19 = *(char **)v360;
    }
    AudioMetadataMemoryPool::fillString<AudioMetadataProgramme>(v4, (int)v425, v18, v19);
  }
  if (*(unsigned char *)(v360 + 56))
  {
    int v20 = v426[0];
    v424[0] = *(void *)v426;
    v424[1] = v427;
    if (v427) {
      atomic_fetch_add_explicit(v427 + 1, 1uLL, memory_order_relaxed);
    }
    uint64_t v21 = (char *)(v360 + 32);
    if (*(char *)(v360 + 55) < 0) {
      uint64_t v21 = *(char **)v21;
    }
    AudioMetadataMemoryPool::fillString<AudioMetadataProgramme>(v4, (int)v424, v20 + 8, v21);
  }
  if (*(unsigned char *)(v360 + 88))
  {
    int v22 = v426[0];
    v423[0] = *(void *)v426;
    v423[1] = v427;
    if (v427) {
      atomic_fetch_add_explicit(v427 + 1, 1uLL, memory_order_relaxed);
    }
    int v23 = (char *)(v360 + 64);
    if (*(char *)(v360 + 87) < 0) {
      int v23 = *(char **)v23;
    }
    AudioMetadataMemoryPool::fillString<AudioMetadataProgramme>(v4, (int)v423, v22 + 16, v23);
  }
  if (*(unsigned char *)(v360 + 120))
  {
    unint64_t v24 = *(char **)v426;
    *(unsigned char *)(*(void *)v426 + 24) = 1;
    if (*(unsigned char *)(v360 + 112))
    {
      LODWORD(v5) = *(_DWORD *)(v360 + 104);
      LODWORD(v6) = *(_DWORD *)(v360 + 108);
      double v25 = (double)*(unint64_t *)&v5 / (double)*(unint64_t *)&v6;
    }
    else
    {
      double v25 = *(double *)(v360 + 104);
    }
    double v6 = (double)*(unsigned int *)(v360 + 96);
    double v5 = (v25 + v6) * 48000.0;
    *(double *)(v24 + 28) = v5;
  }
  if (*(unsigned char *)(v360 + 152))
  {
    int v26 = *(char **)v426;
    *(unsigned char *)(*(void *)v426 + 36) = 1;
    if (*(unsigned char *)(v360 + 144))
    {
      LODWORD(v5) = *(_DWORD *)(v360 + 136);
      LODWORD(v6) = *(_DWORD *)(v360 + 140);
      double v27 = (double)*(unint64_t *)&v5 / (double)*(unint64_t *)&v6;
    }
    else
    {
      double v27 = *(double *)(v360 + 136);
    }
    *((double *)v26 + 5) = (v27 + (double)*(unsigned int *)(v360 + 128)) * 48000.0;
  }
  if (*(unsigned char *)(v360 + 164)) {
    *(_DWORD *)(*(void *)v426 + 48) = *(_DWORD *)(v360 + 160);
  }
  long long v28 = *(long long **)(v360 + 216);
  uint64_t v29 = *(void *)(v360 + 224) - (void)v28;
  if (0x8E38E38E38E38E39 * (v29 >> 4) >= 2) {
    __assert_rtn("extractMetadata", "AudioMetadataExtractor.cpp", 421, "audioProgram.loudness_metadata.size() <= 1");
  }
  if (v29 != 144)
  {
LABEL_96:
    if (*(unsigned char *)(v360 + 284))
    {
      float32x4_t v45 = *(char **)v426;
      *(unsigned char *)(*(void *)v426 + 148) = 1;
      if (*(unsigned char *)(v360 + 249)) {
        v45[140] = *(unsigned char *)(v360 + 248);
      }
      else {
        v45[140] = 0;
      }
      int v46 = 0;
      int v47 = 0;
      if (*(unsigned char *)(v360 + 256)) {
        int v47 = *(_DWORD *)(v360 + 252);
      }
      *((_DWORD *)v45 + 32) = v47;
      if (*(unsigned char *)(v360 + 264)) {
        int v46 = *(_DWORD *)(v360 + 260);
      }
      *((_DWORD *)v45 + 33) = v46;
      if (*(unsigned char *)(v360 + 272)) {
        int v48 = *(_DWORD *)(v360 + 268);
      }
      else {
        int v48 = 0;
      }
      *((_DWORD *)v45 + 34) = v48;
      int v49 = 0;
      int v50 = 0;
      if (*(unsigned char *)(v360 + 280)) {
        int v50 = *(_DWORD *)(v360 + 276);
      }
      *((_DWORD *)v45 + 36) = v50;
      if (*(unsigned char *)(v360 + 244)) {
        int v49 = *(_DWORD *)(v360 + 240);
      }
      *((_DWORD *)v45 + 31) = v49;
    }
    float v421 = 0;
    float v420 = 0;
    unint64_t v422 = 0;
    float v418 = 0;
    float v417 = 0;
    float v419 = 0;
    uint64_t v51 = *(void *)(v360 + 192);
    uint64_t v52 = *(void *)(v360 + 200);
    __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)&v417;
    __s1.__r_.__value_.__s.__data_[8] = 0;
    uint64_t v53 = v52 - v51;
    if (v52 == v51) {
      goto LABEL_718;
    }
    if (v53 < 0) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    float32x4_t v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v53 >> 4);
    uint64_t v55 = 0;
    float v417 = v54;
    float v418 = v54;
    float v419 = &v54[16 * v56];
    do
    {
      float32x4_t v57 = &v54[v55];
      uint64_t v58 = v51 + v55;
      *(void *)float32x4_t v57 = *(void *)(v51 + v55);
      uint64_t v59 = *(void *)(v51 + v55 + 8);
      *((void *)v57 + 1) = v59;
      if (v59) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v59 + 8), 1uLL, memory_order_relaxed);
      }
      v55 += 16;
    }
    while (v58 + 16 != v52);
    float v418 = &v54[v55];
    if (&v54[v55] == v54)
    {
LABEL_718:
      if (v427) {
        atomic_fetch_add_explicit(v427 + 1, 1uLL, memory_order_relaxed);
      }
      AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataContent,AudioMetadataContentRefs,AudioMetadataProgramme>();
    }
    float32x4_t v60 = v54;
    AudioMetadataMemoryPool::create<AudioMetadataContent>(v415, v4);
    float32x4_t v61 = *(char **)v415;
    float32x4_t v62 = v447;
    float v364 = v60;
    if ((unint64_t)v447 >= v448)
    {
      float32x4_t v64 = (char *)v446;
      uint64_t v65 = (v447 - (unsigned char *)v446) >> 3;
      unint64_t v66 = v65 + 1;
      if ((unint64_t)(v65 + 1) >> 61) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v67 = v448 - (void)v446;
      if ((uint64_t)(v448 - (void)v446) >> 2 > v66) {
        unint64_t v66 = v67 >> 2;
      }
      if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v68 = v66;
      }
      if (v68) {
        unint64_t v68 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v68);
      }
      else {
        uint64_t v69 = 0;
      }
      float32x4_t v70 = (char *)(v68 + 8 * v65);
      *(void *)float32x4_t v70 = v61;
      float32x4_t v63 = v70 + 8;
      if (v62 != v64)
      {
        do
        {
          uint64_t v71 = *((void *)v62 - 1);
          v62 -= 8;
          *((void *)v70 - 1) = v71;
          v70 -= 8;
        }
        while (v62 != v64);
        float32x4_t v62 = (char *)v446;
      }
      float v446 = v70;
      unint64_t v448 = v68 + 8 * v69;
      float32x4_t v60 = v364;
      if (v62) {
        operator delete(v62);
      }
    }
    else
    {
      *(void *)float v447 = *(void *)v415;
      float32x4_t v63 = v62 + 8;
    }
    float v447 = v63;
    float32x4_t v72 = *(char **)v415;
    float32x4_t v73 = v421;
    if ((unint64_t)v421 >= v422)
    {
      float32x4_t v75 = (char *)v420;
      uint64_t v76 = (v421 - (unsigned char *)v420) >> 3;
      unint64_t v77 = v76 + 1;
      if ((unint64_t)(v76 + 1) >> 61) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v78 = v422 - (void)v420;
      if ((uint64_t)(v422 - (void)v420) >> 2 > v77) {
        unint64_t v77 = v78 >> 2;
      }
      if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v79 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v79 = v77;
      }
      if (v79) {
        unint64_t v79 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v79);
      }
      else {
        uint64_t v80 = 0;
      }
      float32x4_t v81 = (char *)(v79 + 8 * v76);
      *(void *)float32x4_t v81 = v72;
      float32x4_t v74 = v81 + 8;
      if (v73 != v75)
      {
        do
        {
          uint64_t v82 = *((void *)v73 - 1);
          v73 -= 8;
          *((void *)v81 - 1) = v82;
          v81 -= 8;
        }
        while (v73 != v75);
        float32x4_t v73 = (char *)v420;
      }
      float v420 = v81;
      unint64_t v422 = v79 + 8 * v80;
      float32x4_t v60 = v364;
      if (v73) {
        operator delete(v73);
      }
    }
    else
    {
      *(void *)float v421 = *(void *)v415;
      float32x4_t v74 = v73 + 8;
    }
    float v421 = v74;
    float32x4_t v83 = *(char **)v60;
    if (*(unsigned char *)(*(void *)v60 + 24))
    {
      int v84 = v415[0];
      v414[0] = *(void *)v415;
      v414[1] = v416;
      if (v416)
      {
        atomic_fetch_add_explicit(v416 + 1, 1uLL, memory_order_relaxed);
        float32x4_t v83 = *(char **)v60;
      }
      if (v83[23] < 0) {
        float32x4_t v83 = *(char **)v83;
      }
      AudioMetadataMemoryPool::fillString<AudioMetadataContent>(v4, (int)v414, v84, v83);
    }
    float32x4_t v85 = *(char **)v60;
    if (*(unsigned char *)(*(void *)v60 + 56))
    {
      int v86 = v415[0];
      v413[0] = *(void *)v415;
      v413[1] = v416;
      if (v416)
      {
        atomic_fetch_add_explicit(v416 + 1, 1uLL, memory_order_relaxed);
        float32x4_t v85 = *(char **)v60;
      }
      float32x4_t v87 = v85 + 32;
      if (v85[55] < 0) {
        float32x4_t v87 = *(char **)v87;
      }
      AudioMetadataMemoryPool::fillString<AudioMetadataContent>(v4, (int)v413, v86 + 8, v87);
    }
    float32x4_t v88 = *(char **)v60;
    if (*(unsigned char *)(*(void *)v60 + 88))
    {
      int v89 = v415[0];
      v412[0] = *(void *)v415;
      v412[1] = v416;
      if (v416)
      {
        atomic_fetch_add_explicit(v416 + 1, 1uLL, memory_order_relaxed);
        float32x4_t v88 = *(char **)v60;
      }
      float32x4_t v90 = v88 + 64;
      if (v88[87] < 0) {
        float32x4_t v90 = *(char **)v90;
      }
      AudioMetadataMemoryPool::fillString<AudioMetadataContent>(v4, (int)v412, v89 + 16, v90);
    }
    float32x4_t v91 = *(char **)v60;
    float32x4_t v92 = *(long long **)(*(void *)v60 + 144);
    uint64_t v93 = *(void *)(*(void *)v60 + 152) - (void)v92;
    if (0x8E38E38E38E38E39 * (v93 >> 4) >= 2) {
      __assert_rtn("extractMetadata", "AudioMetadataExtractor.cpp", 461, "audioContent->loudness_metadata.size() <= 1");
    }
    if (v93 != 144)
    {
LABEL_218:
      if (v91[171] && v91[169])
      {
        unsigned int v109 = v91[168];
        if (v109 >= 3) {
          __assert_rtn("mapDialogType", "AudioMetadataExtractor.cpp", 61, "false");
        }
        float32x4_t v110 = *(char **)v415;
        *(unsigned char *)(*(void *)v415 + 96) = v109 + 1;
        v110[97] = v91[170];
      }
      float v410 = 0;
      float v409 = 0;
      unint64_t v411 = 0;
      float v407 = 0;
      float v406 = 0;
      float v408 = 0;
      uint64_t v111 = *((void *)v91 + 15);
      uint64_t v112 = *((void *)v91 + 16);
      __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)&v406;
      __s1.__r_.__value_.__s.__data_[8] = 0;
      uint64_t v113 = v112 - v111;
      if (v112 == v111) {
        goto LABEL_715;
      }
      if (v113 < 0) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      float32x4_t v114 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v113 >> 4);
      uint64_t v115 = 0;
      float v406 = v114;
      float v407 = v114;
      float v361 = (char **)v114;
      float v408 = &v114[16 * v116];
      do
      {
        float32x4_t v117 = &v114[v115];
        uint64_t v118 = v111 + v115;
        *(void *)float32x4_t v117 = *(void *)(v111 + v115);
        uint64_t v119 = *(void *)(v111 + v115 + 8);
        *((void *)v117 + 1) = v119;
        if (v119) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v119 + 8), 1uLL, memory_order_relaxed);
        }
        v115 += 16;
      }
      while (v118 + 16 != v112);
      float v407 = &v114[v115];
      if (&v114[v115] == v114)
      {
LABEL_715:
        if (v416) {
          atomic_fetch_add_explicit(v416 + 1, 1uLL, memory_order_relaxed);
        }
        AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataObject,AudioMetadataObjectRefs,AudioMetadataContent>();
      }
      AudioMetadataMemoryPool::create<AudioMetadataObject>(v404, v4);
      uint64_t v122 = *(void *)v404;
      float32x4_t v123 = v444;
      if ((unint64_t)v444 >= v445)
      {
        float32x4_t v126 = (char *)v443;
        uint64_t v127 = (v444 - (unsigned char *)v443) >> 3;
        unint64_t v128 = v127 + 1;
        if ((unint64_t)(v127 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v129 = v445 - (void)v443;
        if ((uint64_t)(v445 - (void)v443) >> 2 > v128) {
          unint64_t v128 = v129 >> 2;
        }
        if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v130 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v130 = v128;
        }
        if (v130) {
          unint64_t v130 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v130);
        }
        else {
          uint64_t v131 = 0;
        }
        float32x4_t v132 = (char *)(v130 + 8 * v127);
        *(void *)float32x4_t v132 = v122;
        float32x4_t v124 = v132 + 8;
        if (v123 != v126)
        {
          do
          {
            uint64_t v133 = *((void *)v123 - 1);
            v123 -= 8;
            *((void *)v132 - 1) = v133;
            v132 -= 8;
          }
          while (v123 != v126);
          float32x4_t v123 = (char *)v443;
        }
        float v443 = v132;
        unint64_t v445 = v130 + 8 * v131;
        float32x4_t v125 = v361;
        if (v123) {
          operator delete(v123);
        }
      }
      else
      {
        *(void *)float v444 = *(void *)v404;
        float32x4_t v124 = v123 + 8;
        float32x4_t v125 = v361;
      }
      float v444 = v124;
      uint64_t v134 = *(void *)v404;
      float32x4_t v135 = v410;
      if ((unint64_t)v410 >= v411)
      {
        float32x4_t v137 = (char *)v409;
        uint64_t v138 = (v410 - (unsigned char *)v409) >> 3;
        unint64_t v139 = v138 + 1;
        if ((unint64_t)(v138 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v140 = v411 - (void)v409;
        if ((uint64_t)(v411 - (void)v409) >> 2 > v139) {
          unint64_t v139 = v140 >> 2;
        }
        if ((unint64_t)v140 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v141 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v141 = v139;
        }
        if (v141) {
          unint64_t v141 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v141);
        }
        else {
          uint64_t v142 = 0;
        }
        float32x4_t v143 = (char *)(v141 + 8 * v138);
        *(void *)float32x4_t v143 = v134;
        float32x4_t v136 = v143 + 8;
        if (v135 != v137)
        {
          do
          {
            uint64_t v144 = *((void *)v135 - 1);
            v135 -= 8;
            *((void *)v143 - 1) = v144;
            v143 -= 8;
          }
          while (v135 != v137);
          float32x4_t v135 = (char *)v409;
        }
        float v409 = v143;
        unint64_t v411 = v141 + 8 * v142;
        float32x4_t v125 = v361;
        if (v135) {
          operator delete(v135);
        }
      }
      else
      {
        *(void *)float v410 = *(void *)v404;
        float32x4_t v136 = v135 + 8;
      }
      float v410 = v136;
      unsigned int v145 = *v125;
      if ((*v125)[24])
      {
        int v146 = v404[0];
        v403[0] = *(void *)v404;
        v403[1] = v405;
        if (v405)
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v405 + 8), 1uLL, memory_order_relaxed);
          unsigned int v145 = *v125;
        }
        if (v145[23] < 0) {
          unsigned int v145 = *(char **)v145;
        }
        AudioMetadataMemoryPool::fillString<AudioMetadataObject>(v4, (int)v403, v146, v145);
      }
      float32x4_t v147 = *v125;
      if ((*v125)[56])
      {
        int v148 = v404[0];
        v402[0] = *(void *)v404;
        v402[1] = v405;
        if (v405)
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v405 + 8), 1uLL, memory_order_relaxed);
          float32x4_t v147 = *v125;
        }
        float32x4_t v149 = v147 + 32;
        if (v147[55] < 0) {
          float32x4_t v149 = *(char **)v149;
        }
        AudioMetadataMemoryPool::fillString<AudioMetadataObject>(v4, (int)v402, v148 + 8, v149);
      }
      float32x4_t v150 = *v125;
      if ((*v125)[88])
      {
        uint64_t v151 = *(void *)v404;
        *(unsigned char *)(*(void *)v404 + 16) = 1;
        if (v150[80])
        {
          LODWORD(v120) = *((_DWORD *)v150 + 18);
          LODWORD(v121) = *((_DWORD *)v150 + 19);
          double v152 = (double)*(unint64_t *)&v120 / (double)*(unint64_t *)&v121;
        }
        else
        {
          double v152 = *((double *)v150 + 9);
        }
        double v121 = (double)*((unsigned int *)v150 + 16);
        double v120 = (v152 + v121) * 48000.0;
        *(double *)(v151 + 20) = v120;
      }
      if (v150[120])
      {
        uint64_t v153 = *(void *)v404;
        *(unsigned char *)(*(void *)v404 + 28) = 1;
        if (v150[112])
        {
          LODWORD(v120) = *((_DWORD *)v150 + 26);
          LODWORD(v121) = *((_DWORD *)v150 + 27);
          double v154 = (double)*(unint64_t *)&v120 / (double)*(unint64_t *)&v121;
        }
        else
        {
          double v154 = *((double *)v150 + 13);
        }
        *(double *)(v153 + 32) = (v154 + (double)*((unsigned int *)v150 + 24)) * 48000.0;
      }
      if (v150[384])
      {
        uint64_t v155 = *(void *)v404;
        *(_DWORD *)(*(void *)v404 + 164) = *((_DWORD *)v150 + 94);
        BOOL v156 = v150[380] != 0;
      }
      else
      {
        BOOL v156 = 0;
        uint64_t v155 = *(void *)v404;
        *(_DWORD *)(*(void *)v404 + 164) = 1065353216;
      }
      *(unsigned char *)(v155 + 170) = v156;
      if (v150[136]) {
        int v157 = *((_DWORD *)v150 + 33);
      }
      else {
        LOBYTE(v157) = 10;
      }
      *(unsigned char *)(v155 + 169) = v157;
      if (v150[141]) {
        *(unsigned char *)(v155 + 172) = v150[140];
      }
      if (v150[372])
      {
        char v158 = v150[289];
        if (v158) {
          char v158 = v150[288];
        }
        *(unsigned char *)(v155 + 84) = v158;
        char v159 = v150[291];
        if (v159) {
          char v159 = v150[290];
        }
        *(unsigned char *)(v155 + 85) = v159;
        char v160 = v150[293];
        if (v160) {
          char v160 = v150[292];
        }
        *(unsigned char *)(v155 + 86) = v160;
        *(unsigned char *)(v155 + 48) = v150[300] != 0;
        *(_DWORD *)(v155 + 40) = *((_DWORD *)v150 + 74);
        *(_DWORD *)(v155 + 44) = *((_DWORD *)v150 + 77);
        if (v150[369])
        {
          char v161 = v150[368];
          *(unsigned char *)(v155 + 64) = v161;
          *(unsigned char *)(v155 + 80) = v161;
          if (v150[324])
          {
            *(_DWORD *)(v155 + 52) = *((_DWORD *)v150 + 80);
            float32x4_t v150 = *v125;
          }
          if (v150[332])
          {
            *(_DWORD *)(v155 + 56) = *((_DWORD *)v150 + 82);
            float32x4_t v150 = *v125;
          }
          if (v150[340])
          {
            *(_DWORD *)(v155 + 60) = *((_DWORD *)v150 + 84);
            float32x4_t v150 = *v125;
          }
          if (v150[348])
          {
            *(_DWORD *)(v155 + 68) = *((_DWORD *)v150 + 86);
            float32x4_t v150 = *v125;
          }
          if (v150[356])
          {
            *(_DWORD *)(v155 + 72) = *((_DWORD *)v150 + 88);
            float32x4_t v150 = *v125;
          }
          if (v150[364])
          {
            *(_DWORD *)(v155 + 76) = *((_DWORD *)v150 + 90);
            float32x4_t v150 = *v125;
          }
        }
      }
      if (v150[143]) {
        *(unsigned char *)(v155 + 171) = v150[142];
      }
      if (v150[389]) {
        *(unsigned char *)(v155 + 173) = v150[388];
      }
      if (v150[419]) {
        *(unsigned char *)(v155 + 174) = v150[418];
      }
      if (v150[129])
      {
        unsigned int v162 = v150[128];
        if (v162 >= 3) {
          __assert_rtn("mapDialogType", "AudioMetadataExtractor.cpp", 61, "false");
        }
        *(unsigned char *)(v155 + 168) = v162 + 1;
      }
      if (v150[417])
      {
        *(unsigned char *)(v155 + 160) = v150[416];
        if (v150[396])
        {
          *(_DWORD *)(v155 + 148) = *((_DWORD *)v150 + 98);
          float32x4_t v150 = *v125;
        }
        if (v150[404])
        {
          *(_DWORD *)(v155 + 152) = *((_DWORD *)v150 + 100);
          float32x4_t v150 = *v125;
        }
        if (v150[412])
        {
          *(_DWORD *)(v155 + 156) = *((_DWORD *)v150 + 102);
          float32x4_t v150 = *v125;
        }
      }
      float v400 = 0;
      float v399 = 0;
      float v401 = 0;
      uint64_t v163 = *((void *)v150 + 18);
      uint64_t v164 = *((void *)v150 + 19);
      __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)&v399;
      __s1.__r_.__value_.__s.__data_[8] = 0;
      uint64_t v165 = v164 - v163;
      if (v164 == v163)
      {
        float32x4_t v166 = 0;
      }
      else
      {
        if (v165 < 0) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        float32x4_t v166 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v165 >> 4);
        uint64_t v167 = 0;
        float v399 = v166;
        float v400 = v166;
        float v401 = &v166[2 * v168];
        do
        {
          int8x16_t v169 = &v166[v167];
          uint64_t v170 = v163 + v167 * 8;
          *int8x16_t v169 = *(void *)(v163 + v167 * 8);
          uint64_t v171 = *(void *)(v163 + v167 * 8 + 8);
          v169[1] = v171;
          if (v171) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v171 + 8), 1uLL, memory_order_relaxed);
          }
          v167 += 2;
        }
        while (v170 + 16 != v164);
        uint64_t v165 = (uint64_t)&v166[v167];
        float v400 = (void *)v165;
      }
      if (v165 - (void)v166 != 16) {
        __assert_rtn("extractMetadata", "AudioMetadataExtractor.cpp", 622, "audioPackFormats.size() == 1");
      }
      uint64_t v173 = *v166;
      uint64_t v172 = v166[1];
      if (v172) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v172 + 8), 1uLL, memory_order_relaxed);
      }
      AudioMetadataMemoryPool::create<AudioMetadataPackFormat>(v397, v4);
      uint64_t v174 = *(void *)v397;
      double v175 = v441;
      if ((unint64_t)v441 >= v442)
      {
        double v177 = (char *)v440;
        uint64_t v178 = (v441 - (unsigned char *)v440) >> 3;
        unint64_t v179 = v178 + 1;
        if ((unint64_t)(v178 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v180 = v442 - (void)v440;
        if ((uint64_t)(v442 - (void)v440) >> 2 > v179) {
          unint64_t v179 = v180 >> 2;
        }
        if ((unint64_t)v180 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v181 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v181 = v179;
        }
        if (v181) {
          unint64_t v181 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v181);
        }
        else {
          uint64_t v182 = 0;
        }
        float32x4_t v183 = (char *)(v181 + 8 * v178);
        *(void *)float32x4_t v183 = v174;
        uint64_t v176 = v183 + 8;
        if (v175 != v177)
        {
          do
          {
            uint64_t v184 = *((void *)v175 - 1);
            v175 -= 8;
            *((void *)v183 - 1) = v184;
            v183 -= 8;
          }
          while (v175 != v177);
          double v175 = (char *)v440;
        }
        float v440 = v183;
        unint64_t v442 = v181 + 8 * v182;
        if (v175) {
          operator delete(v175);
        }
      }
      else
      {
        *(void *)float v441 = *(void *)v397;
        uint64_t v176 = v175 + 8;
      }
      float v441 = v176;
      uint64_t v185 = *(void *)v397;
      *(void *)(*(void *)v404 + 104) = *(void *)v397;
      if (*(unsigned char *)(v173 + 24))
      {
        v396[0] = v185;
        v396[1] = v398;
        if (v398) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v398 + 8), 1uLL, memory_order_relaxed);
        }
        float32x4_t v186 = (char *)v173;
        if (*(char *)(v173 + 23) < 0) {
          float32x4_t v186 = *(char **)v173;
        }
        AudioMetadataMemoryPool::fillString<AudioMetadataPackFormat>(v4, (int)v396, v185, v186);
      }
      if (*(unsigned char *)(v173 + 56))
      {
        v395[0] = v185;
        v395[1] = v398;
        if (v398) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v398 + 8), 1uLL, memory_order_relaxed);
        }
        float32x4_t v187 = (char *)(v173 + 32);
        if (*(char *)(v173 + 55) < 0) {
          float32x4_t v187 = *(char **)v187;
        }
        AudioMetadataMemoryPool::fillString<AudioMetadataPackFormat>(v4, (int)v395, v185 + 8, v187);
      }
      if (*(unsigned char *)(v173 + 120))
      {
        if (*(char *)(v173 + 119) < 0) {
          std::string::__init_copy_ctor_external(&v394, *(const std::string::value_type **)(v173 + 96), *(void *)(v173 + 104));
        }
        else {
          std::string v394 = *(std::string *)(v173 + 96);
        }
        if (SHIBYTE(v394.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v394.__r_.__value_.__l.__data_);
        }
      }
      if (*(unsigned char *)(v173 + 88))
      {
        v393[0] = v185;
        v393[1] = v398;
        if (v398) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v398 + 8), 1uLL, memory_order_relaxed);
        }
        float32x4_t v188 = (char *)(v173 + 64);
        if (*(char *)(v173 + 87) < 0) {
          float32x4_t v188 = *(char **)v188;
        }
        AudioMetadataMemoryPool::fillString<AudioMetadataPackFormat>(v4, (int)v393, v185 + 16, v188);
      }
      if (*(unsigned char *)(v173 + 188)) {
        *(_DWORD *)(v185 + 52) = *(_DWORD *)(v173 + 184);
      }
      if (*(unsigned char *)(v173 + 132)) {
        int v189 = *(_DWORD *)(v173 + 128);
      }
      else {
        LOBYTE(v189) = 10;
      }
      *(unsigned char *)(v185 + 96) = v189;
      float v391 = 0;
      float v390 = 0;
      unint64_t v392 = 0;
      float v388 = 0;
      float v387 = 0;
      float v389 = 0;
      uint64_t v191 = *(void *)(v173 + 136);
      uint64_t v190 = *(void *)(v173 + 144);
      __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)&v387;
      __s1.__r_.__value_.__s.__data_[8] = 0;
      uint64_t v192 = v190 - v191;
      if (v190 == v191) {
        goto LABEL_712;
      }
      if (v192 < 0) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      float32x4_t v193 = (char **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v192 >> 4);
      uint64_t v194 = 0;
      float v387 = v193;
      float v388 = (char *)v193;
      float v389 = (char *)&v193[2 * v195];
      do
      {
        float64x2_t v196 = (char *)&v193[v194];
        uint64_t v197 = v191 + v194 * 8;
        *(void *)float64x2_t v196 = *(void *)(v191 + v194 * 8);
        uint64_t v198 = *(void *)(v191 + v194 * 8 + 8);
        *((void *)v196 + 1) = v198;
        if (v198) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v198 + 8), 1uLL, memory_order_relaxed);
        }
        v194 += 2;
      }
      while (v197 + 16 != v190);
      float v388 = (char *)&v193[v194];
      if (&v193[v194] == v193)
      {
LABEL_712:
        if (v398) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v398 + 8), 1uLL, memory_order_relaxed);
        }
        AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataChannelFormat,AudioMetadataChannelFormatRefs,AudioMetadataPackFormat>();
      }
      float v362 = v193;
      float v385 = 0;
      float v384 = 0;
      unint64_t v386 = 0;
      AudioMetadataMemoryPool::create<AudioMetadataChannelFormat>(v382, v4);
      uint64_t v199 = *(void *)v382;
      int v200 = v438;
      if ((unint64_t)v438 >= v439)
      {
        uint64_t v202 = (char *)v437;
        uint64_t v203 = (v438 - (unsigned char *)v437) >> 3;
        unint64_t v204 = v203 + 1;
        if ((unint64_t)(v203 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v205 = v439 - (void)v437;
        if ((uint64_t)(v439 - (void)v437) >> 2 > v204) {
          unint64_t v204 = v205 >> 2;
        }
        if ((unint64_t)v205 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v206 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v206 = v204;
        }
        if (v206) {
          unint64_t v206 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v206);
        }
        else {
          uint64_t v207 = 0;
        }
        float32x4_t v208 = (char *)(v206 + 8 * v203);
        *(void *)float32x4_t v208 = v199;
        uint64_t v201 = v208 + 8;
        if (v200 != v202)
        {
          do
          {
            uint64_t v209 = *((void *)v200 - 1);
            v200 -= 8;
            *((void *)v208 - 1) = v209;
            v208 -= 8;
          }
          while (v200 != v202);
          int v200 = (char *)v437;
        }
        float v437 = v208;
        unint64_t v439 = v206 + 8 * v207;
        if (v200) {
          operator delete(v200);
        }
      }
      else
      {
        *(void *)float v438 = *(void *)v382;
        uint64_t v201 = v200 + 8;
      }
      float v438 = v201;
      uint64_t v210 = *(void *)v382;
      float32x4_t v211 = v391;
      if ((unint64_t)v391 >= v392)
      {
        float32x4_t v213 = (char *)v390;
        uint64_t v214 = (v391 - (unsigned char *)v390) >> 3;
        unint64_t v215 = v214 + 1;
        if ((unint64_t)(v214 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v216 = v392 - (void)v390;
        if ((uint64_t)(v392 - (void)v390) >> 2 > v215) {
          unint64_t v215 = v216 >> 2;
        }
        if ((unint64_t)v216 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v217 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v217 = v215;
        }
        if (v217) {
          unint64_t v217 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v217);
        }
        else {
          uint64_t v218 = 0;
        }
        float32x4_t v219 = (char *)(v217 + 8 * v214);
        *(void *)float32x4_t v219 = v210;
        float32x4_t v212 = v219 + 8;
        if (v211 != v213)
        {
          do
          {
            uint64_t v220 = *((void *)v211 - 1);
            v211 -= 8;
            *((void *)v219 - 1) = v220;
            v219 -= 8;
          }
          while (v211 != v213);
          float32x4_t v211 = (char *)v390;
        }
        float v390 = v219;
        unint64_t v392 = v217 + 8 * v218;
        if (v211) {
          operator delete(v211);
        }
      }
      else
      {
        *(void *)float v391 = *(void *)v382;
        float32x4_t v212 = v211 + 8;
      }
      float v391 = v212;
      float32x4_t v221 = *v362;
      if ((*v362)[24])
      {
        int v222 = v382[0];
        v381[0] = *(void *)v382;
        v381[1] = v383;
        if (v383)
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v383 + 8), 1uLL, memory_order_relaxed);
          float32x4_t v221 = *v362;
        }
        if (v221[23] < 0) {
          float32x4_t v221 = *(char **)v221;
        }
        AudioMetadataMemoryPool::fillString<AudioMetadataChannelFormat>(v4, (int)v381, v222, v221);
      }
      float32x4_t v223 = *v362;
      if ((*v362)[56])
      {
        int v224 = v382[0];
        v380[0] = *(void *)v382;
        v380[1] = v383;
        if (v383)
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v383 + 8), 1uLL, memory_order_relaxed);
          float32x4_t v223 = *v362;
        }
        float32x4_t v225 = v223 + 32;
        if (v223[55] < 0) {
          float32x4_t v225 = *(char **)v225;
        }
        AudioMetadataMemoryPool::fillString<AudioMetadataChannelFormat>(v4, (int)v380, v224 + 8, v225);
      }
      float32x4_t v226 = *v362;
      if ((*v362)[120])
      {
        if (v226[119] < 0) {
          std::string::__init_copy_ctor_external(&v379, *((const std::string::value_type **)v226 + 12), *((void *)v226 + 13));
        }
        else {
          std::string v379 = *(std::string *)(v226 + 4);
        }
        *(unsigned char *)(*(void *)v382 + 52) = TypeDefinition;
        if ((SHIBYTE(v379.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_468:
          float32x4_t v239 = *v362;
          if ((*v362)[88])
          {
            int v240 = v382[0];
            v377[0] = *(void *)v382;
            v377[1] = v383;
            if (v383)
            {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v383 + 8), 1uLL, memory_order_relaxed);
              float32x4_t v239 = *v362;
            }
            float32x4_t v241 = v239 + 64;
            if (v239[87] < 0) {
              float32x4_t v241 = *(char **)v241;
            }
            AudioMetadataMemoryPool::fillString<AudioMetadataChannelFormat>(v4, (int)v377, v240 + 16, v241);
          }
          float32x4_t v242 = *v362;
          uint64_t v375 = 0;
          *(void *)float v374 = 0;
          uint64_t v376 = 0;
          uint64_t v244 = *((void *)v242 + 18);
          uint64_t v243 = *((void *)v242 + 19);
          v469 = v374;
          LOBYTE(v470) = 0;
          uint64_t v363 = v243;
          if (v243 != v244)
          {
            unint64_t v245 = 0xEEEEEEEEEEEEEEEFLL * ((v243 - v244) >> 5);
            if (v245 >= 0x88888888888889) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            *(void *)float v374 = std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ADMBlockFormat>>(v245);
            uint64_t v375 = *(void *)v374;
            uint64_t v376 = *(void *)v374 + 480 * v246;
            uint64_t v247 = *(void *)v374;
            do
            {
              std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)v247, (long long *)v244);
              long long v248 = *(_OWORD *)(v244 + 48);
              *(_OWORD *)(v247 + 32) = *(_OWORD *)(v244 + 32);
              *(_OWORD *)(v247 + 48) = v248;
              long long v249 = *(_OWORD *)(v244 + 64);
              long long v250 = *(_OWORD *)(v244 + 80);
              long long v251 = *(_OWORD *)(v244 + 112);
              *(_OWORD *)(v247 + 96) = *(_OWORD *)(v244 + 96);
              *(_OWORD *)(v247 + 112) = v251;
              *(_OWORD *)(v247 + 64) = v249;
              *(_OWORD *)(v247 + 80) = v250;
              long long v252 = *(_OWORD *)(v244 + 128);
              long long v253 = *(_OWORD *)(v244 + 144);
              long long v254 = *(_OWORD *)(v244 + 160);
              *(void *)(v247 + 174) = *(void *)(v244 + 174);
              *(_OWORD *)(v247 + 144) = v253;
              *(_OWORD *)(v247 + 160) = v254;
              *(_OWORD *)(v247 + 128) = v252;
              std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)(v247 + 184), (long long *)(v244 + 184));
              long long v255 = *(_OWORD *)(v244 + 216);
              long long v256 = *(_OWORD *)(v244 + 232);
              *(_OWORD *)(v247 + 245) = *(_OWORD *)(v244 + 245);
              *(_OWORD *)(v247 + 232) = v256;
              *(_OWORD *)(v247 + 216) = v255;
              *(void *)(v247 + 264) = *(void *)(v244 + 264);
              uint64_t v257 = *(void *)(v244 + 272);
              *(void *)(v247 + 272) = v257;
              if (v257) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v257 + 16), 1uLL, memory_order_relaxed);
              }
              *(void *)(v247 + 280) = 0;
              *(void *)(v247 + 288) = 0;
              *(void *)(v247 + 296) = 0;
              uint64_t v258 = *(void *)(v244 + 280);
              uint64_t v259 = *(void *)(v244 + 288);
              __s1.__r_.__value_.__r.__words[0] = v247 + 280;
              __s1.__r_.__value_.__s.__data_[8] = 0;
              if (v259 != v258)
              {
                unint64_t v260 = 0x8E38E38E38E38E39 * ((v259 - v258) >> 4);
                if (v260 >= 0x1C71C71C71C71C8) {
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                double v261 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ADMMatrixCoefficient>>(v260);
                uint64_t v365 = v244;
                uint64_t v262 = 0;
                *(void *)(v247 + 280) = v261;
                *(void *)(v247 + 288) = v261;
                *(void *)(v247 + 296) = &v261[144 * v263];
                do
                {
                  uint64_t v264 = v258 + v262;
                  float v265 = &v261[v262];
                  uint64_t v266 = *(void *)(v258 + v262);
                  *((_DWORD *)v265 + 2) = *(_DWORD *)(v258 + v262 + 8);
                  *(void *)float v265 = v266;
                  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)&v261[v262 + 16], (long long *)(v258 + v262 + 16));
                  *((void *)v265 + 6) = *(void *)(v258 + v262 + 48);
                  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)&v261[v262 + 56], (long long *)(v258 + v262 + 56));
                  float v267 = &v261[v262];
                  *(void *)&v261[v262 + 88] = *(void *)(v258 + v262 + 88);
                  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)&v261[v262 + 96], (long long *)(v258 + v262 + 96));
                  *((void *)v267 + 16) = *(void *)(v258 + v262 + 128);
                  uint64_t v268 = *(void *)(v258 + v262 + 136);
                  *((void *)v267 + 17) = v268;
                  if (v268) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v268 + 8), 1uLL, memory_order_relaxed);
                  }
                  v262 += 144;
                }
                while (v264 + 144 != v259);
                *(void *)(v247 + 288) = &v261[v262];
                uint64_t v4 = *(void *)v368;
                uint64_t v244 = v365;
              }
              long long v269 = *(_OWORD *)(v244 + 304);
              long long v270 = *(_OWORD *)(v244 + 320);
              long long v271 = *(_OWORD *)(v244 + 336);
              *(_OWORD *)(v247 + 349) = *(_OWORD *)(v244 + 349);
              *(_OWORD *)(v247 + 320) = v270;
              *(_OWORD *)(v247 + 336) = v271;
              *(_OWORD *)(v247 + 304) = v269;
              *(void *)(v247 + 376) = 0;
              *(void *)(v247 + 384) = 0;
              *(void *)(v247 + 368) = 0;
              float v272 = *(long long **)(v244 + 368);
              float v273 = *(long long **)(v244 + 376);
              float64x2_t v466 = (int *)(v247 + 368);
              LOBYTE(v467) = 0;
              if (v273 != v272)
              {
                unint64_t v274 = 0x8E38E38E38E38E39 * (((char *)v273 - (char *)v272) >> 3);
                if (v274 >= 0x38E38E38E38E38FLL) {
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                float v275 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ADMZone>>(v274);
                *(void *)(v247 + 368) = v275;
                *(void *)(v247 + 376) = v275;
                *(void *)(v247 + 384) = &v275[72 * v276];
                float64x2_t v464 = v275;
                v454[0] = v275;
                __s1.__r_.__value_.__r.__words[0] = v247 + 384;
                __s1.__r_.__value_.__l.__size_ = (std::string::size_type)v454;
                __s1.__r_.__value_.__r.__words[2] = (std::string::size_type)&v464;
                char v456 = 0;
                float v277 = v272 + 3;
                float v278 = v275;
                do
                {
                  long long v279 = *(v277 - 3);
                  long long v280 = *(v277 - 2);
                  *(_OWORD *)(v278 + 29) = *(long long *)((char *)v277 - 19);
                  *(_OWORD *)float v278 = v279;
                  *((_OWORD *)v278 + 1) = v280;
                  float v281 = (std::string *)(v278 + 48);
                  if (*((char *)v277 + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external(v281, *(const std::string::value_type **)v277, *((void *)v277 + 1));
                    float v278 = v464;
                  }
                  else
                  {
                    long long v282 = *v277;
                    *((void *)v278 + 8) = *((void *)v277 + 2);
                    *(_OWORD *)&v281->__r_.__value_.__l.__data_ = v282;
                  }
                  float v283 = v277 - 3;
                  v278 += 72;
                  float64x2_t v464 = v278;
                  float v277 = (long long *)((char *)v277 + 72);
                }
                while ((long long *)((char *)v283 + 72) != v273);
                char v456 = 1;
                std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CA::ADMZone>,CA::ADMZone*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&__s1);
                *(void *)(v247 + 376) = v278;
              }
              std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)(v247 + 392), (long long *)(v244 + 392));
              uint64_t v284 = *(void *)(v244 + 424);
              *(void *)(v247 + 429) = *(void *)(v244 + 429);
              *(void *)(v247 + 424) = v284;
              std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)(v247 + 440), (long long *)(v244 + 440));
              *(void *)(v247 + 472) = *(void *)(v244 + 472);
              v244 += 480;
              v247 += 480;
            }
            while (v244 != v363);
            uint64_t v285 = *(void *)v374;
            uint64_t v375 = v247;
            while (v285 != v247)
            {
              AudioMetadataMemoryPool::create<AudioMetadataBlockFormat>(&v372, v4);
              uint64_t v288 = v372;
              float v289 = v385;
              if ((unint64_t)v385 >= v386)
              {
                float v291 = (char *)v384;
                uint64_t v292 = (v385 - (unsigned char *)v384) >> 3;
                unint64_t v293 = v292 + 1;
                if ((unint64_t)(v292 + 1) >> 61) {
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v294 = v386 - (void)v384;
                if ((uint64_t)(v386 - (void)v384) >> 2 > v293) {
                  unint64_t v293 = v294 >> 2;
                }
                if ((unint64_t)v294 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v295 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v295 = v293;
                }
                if (v295) {
                  unint64_t v295 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v295);
                }
                else {
                  uint64_t v296 = 0;
                }
                float v297 = (char *)(v295 + 8 * v292);
                *(void *)float v297 = v288;
                float v290 = v297 + 8;
                if (v289 != v291)
                {
                  do
                  {
                    uint64_t v298 = *((void *)v289 - 1);
                    v289 -= 8;
                    *((void *)v297 - 1) = v298;
                    v297 -= 8;
                  }
                  while (v289 != v291);
                  float v289 = (char *)v384;
                }
                float v384 = v297;
                unint64_t v386 = v295 + 8 * v296;
                if (v289) {
                  operator delete(v289);
                }
              }
              else
              {
                *(void *)float v385 = v372;
                float v290 = v289 + 8;
              }
              float v385 = v290;
              *(void *)float v367 = v372;
              float v299 = v373;
              if (v373) {
                atomic_fetch_add_explicit(&v373->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              float v366 = v299;
              uint64_t v300 = *(void *)v382;
              float v371 = 0;
              float v369 = 0;
              float v370 = 0;
              float v301 = v437;
              int64_t v302 = v438 - (unsigned char *)v437;
              if (v438 != v437)
              {
                if (v302 < 0) {
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                float v369 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v302 >> 3);
                float v371 = (char *)v369 + 8 * v303;
                memmove(v369, v301, v302);
                float v370 = (char *)v369 + 8 * (v302 >> 3);
              }
              if (*(unsigned char *)(v285 + 24))
              {
                v469 = *(int **)v367;
                float64x2_t v470 = v366;
                if (v366) {
                  atomic_fetch_add_explicit(&v366->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                if (*(char *)(v285 + 23) >= 0) {
                  float v304 = (char *)v285;
                }
                else {
                  float v304 = *(char **)v285;
                }
                AudioMetadataMemoryPool::fillString<AudioMetadataBlockFormat>(v4, (int)&v469, v367[0], v304);
              }
              if (*(unsigned char *)(v285 + 56))
              {
                *(unsigned char *)(*(void *)v367 + 8) = 1;
                if (*(unsigned char *)(v285 + 48))
                {
                  LODWORD(v286) = *(_DWORD *)(v285 + 40);
                  LODWORD(v287) = *(_DWORD *)(v285 + 44);
                  double v305 = (double)*(unint64_t *)&v286 / (double)*(unint64_t *)&v287;
                }
                else
                {
                  double v305 = *(double *)(v285 + 40);
                }
                double v287 = (double)*(unsigned int *)(v285 + 32);
                double v286 = (v305 + v287) * 48000.0;
                *(double *)(*(void *)v367 + 12) = v286;
              }
              if (*(unsigned char *)(v285 + 88))
              {
                *(unsigned char *)(*(void *)v367 + 20) = 1;
                if (*(unsigned char *)(v285 + 80))
                {
                  LODWORD(v286) = *(_DWORD *)(v285 + 72);
                  LODWORD(v287) = *(_DWORD *)(v285 + 76);
                  double v306 = (double)*(unint64_t *)&v286 / (double)*(unint64_t *)&v287;
                }
                else
                {
                  double v306 = *(double *)(v285 + 72);
                }
                *(double *)(*(void *)v367 + 24) = (v306 + (double)*(unsigned int *)(v285 + 64)) * 48000.0;
              }
              char v307 = *(unsigned char *)(v285 + 104);
              if (v307)
              {
                float v308 = *(float *)(v285 + 96);
                char v307 = *(unsigned char *)(v285 + 100) != 0;
              }
              else
              {
                float v308 = 1.0;
              }
              *(float *)(*(void *)v367 + 32) = v308;
              *(unsigned char *)(*(void *)v367 + 156) = v307;
              if (*(unsigned char *)(v285 + 112)) {
                char v309 = *(unsigned char *)(v285 + 108);
              }
              else {
                char v309 = 10;
              }
              *(unsigned char *)(*(void *)v367 + 157) = v309;
              if (*(unsigned char *)(v285 + 117)) {
                *(unsigned char *)(*(void *)v367 + 158) = *(unsigned char *)(v285 + 116);
              }
              if (*(unsigned char *)(v285 + 132))
              {
                *(unsigned char *)(*(void *)v367 + 41) = 1;
                if (*(unsigned char *)(v285 + 121)) {
                  *(unsigned char *)(*(void *)v367 + 40) = *(unsigned char *)(v285 + 120);
                }
                if (*(unsigned char *)(v285 + 128)) {
                  *(_DWORD *)(*(void *)v367 + 36) = *(_DWORD *)(v285 + 124);
                }
              }
              if (*(unsigned char *)(v285 + 329)) {
                BOOL v310 = *(unsigned char *)(v285 + 328) == 0;
              }
              else {
                BOOL v310 = 1;
              }
              char v311 = !v310;
              switch(*(unsigned char *)(v300 + 52))
              {
                case 1:
                  if (*(unsigned char *)(v285 + 208))
                  {
                    __s1.__r_.__value_.__r.__words[0] = *(void *)v367;
                    __s1.__r_.__value_.__l.__size_ = (std::string::size_type)v366;
                    if (v366) {
                      atomic_fetch_add_explicit(&v366->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    if (*(char *)(v285 + 207) >= 0) {
                      float v312 = (char *)(v285 + 184);
                    }
                    else {
                      float v312 = *(char **)(v285 + 184);
                    }
                    AudioMetadataMemoryPool::fillString<AudioMetadataBlockFormat>(v4, (int)&__s1, v367[0] + 44, v312);
                  }
                  if (*(unsigned char *)(v285 + 220) || *(unsigned char *)(v285 + 228) || *(unsigned char *)(v285 + 236))
                  {
                    *(unsigned char *)(*(void *)v367 + 52) = 1;
                    *(unsigned char *)(*(void *)v367 + 68) = v311;
                    if (*(unsigned char *)(v285 + 220)) {
                      *(_DWORD *)(*(void *)v367 + 56) = *(_DWORD *)(v285 + 216);
                    }
                    if (*(unsigned char *)(v285 + 228)) {
                      *(_DWORD *)(*(void *)v367 + 60) = *(_DWORD *)(v285 + 224);
                    }
                    if (*(unsigned char *)(v285 + 236)) {
                      *(_DWORD *)(*(void *)v367 + 64) = *(_DWORD *)(v285 + 232);
                    }
                  }
                  if (*(unsigned char *)(v285 + 244) || *(unsigned char *)(v285 + 252) || *(unsigned char *)(v285 + 260))
                  {
                    *(unsigned char *)(*(void *)v367 + 53) = 1;
                    *(unsigned char *)(*(void *)v367 + 84) = v311;
                    if (*(unsigned char *)(v285 + 244)) {
                      *(_DWORD *)(*(void *)v367 + 72) = *(_DWORD *)(v285 + 240);
                    }
                    if (*(unsigned char *)(v285 + 252)) {
                      *(_DWORD *)(*(void *)v367 + 76) = *(_DWORD *)(v285 + 248);
                    }
                    if (*(unsigned char *)(v285 + 260)) {
                      *(_DWORD *)(*(void *)v367 + 80) = *(_DWORD *)(v285 + 256);
                    }
                  }
                  break;
                case 2:
                  float v327 = *(std::__shared_weak_count **)(v285 + 272);
                  if (v327)
                  {
                    float v328 = std::__shared_weak_count::lock(v327);
                    if (v328)
                    {
                      uint64_t v329 = *(void *)(v285 + 264);
                      std::__shared_weak_count::__release_shared[abi:ne180100](v328);
                      if (v329)
                      {
                        float v330 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v285 + 272));
                        float v331 = *(char **)(v285 + 264);
                        if (v331[23] < 0) {
                          float v331 = *(char **)v331;
                        }
                        std::__shared_weak_count::__release_shared[abi:ne180100](v330);
                      }
                    }
                  }
                  if (*(unsigned char *)(v285 + 176))
                  {
                    *(unsigned char *)(*(void *)v367 + 56) = *(unsigned char *)(v285 + 164);
                    if (*(unsigned char *)(v285 + 172)) {
                      *(_DWORD *)(*(void *)v367 + 52) = *(_DWORD *)(v285 + 168);
                    }
                  }
                  float64x2_t v466 = 0;
                  float64x2_t v467 = 0;
                  unint64_t v468 = 0;
                  uint64_t v332 = *(void *)(v285 + 280);
                  for (uint64_t i = *(void *)(v285 + 288); v332 != i; v332 += 144)
                  {
                    std::string::size_type v334 = *(void *)v332;
                    LODWORD(__s1.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v332 + 8);
                    __s1.__r_.__value_.__r.__words[0] = v334;
                    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)&__s1.__r_.__value_.__r.__words[2], (long long *)(v332 + 16));
                    v457.__r_.__value_.__r.__words[2] = *(void *)(v332 + 48);
                    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&v458, (long long *)(v332 + 56));
                    uint64_t v461 = *(void *)(v332 + 88);
                    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)&v462, (long long *)(v332 + 96));
                    uint64_t v335 = *(void *)(v332 + 136);
                    *(void *)&v463[16] = *(void *)(v332 + 128);
                    *(void *)&v463[24] = v335;
                    if (v335) {
                      atomic_fetch_add_explicit((atomic_ullong *volatile)(v335 + 8), 1uLL, memory_order_relaxed);
                    }
                    AudioMetadataMemoryPool::create<AudioMetadataMatrixCoefficient>(&v464, v4);
                    float v336 = v464;
                    float v337 = (int *)v467;
                    if ((unint64_t)v467 >= v468)
                    {
                      float v339 = v466;
                      uint64_t v340 = (v467 - (char *)v466) >> 3;
                      unint64_t v341 = v340 + 1;
                      if ((unint64_t)(v340 + 1) >> 61) {
                        std::vector<float>::__throw_length_error[abi:ne180100]();
                      }
                      uint64_t v342 = v468 - (void)v466;
                      if ((uint64_t)(v468 - (void)v466) >> 2 > v341) {
                        unint64_t v341 = v342 >> 2;
                      }
                      if ((unint64_t)v342 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v343 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v343 = v341;
                      }
                      if (v343) {
                        unint64_t v343 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v343);
                      }
                      else {
                        uint64_t v344 = 0;
                      }
                      float v345 = (void *)(v343 + 8 * v340);
                      *float v345 = v336;
                      float v338 = (char *)(v345 + 1);
                      if (v337 != v339)
                      {
                        do
                        {
                          uint64_t v346 = *((void *)v337 - 1);
                          v337 -= 2;
                          *--float v345 = v346;
                        }
                        while (v337 != v339);
                        float v337 = v466;
                      }
                      float64x2_t v466 = (int *)v345;
                      unint64_t v468 = v343 + 8 * v344;
                      if (v337) {
                        operator delete(v337);
                      }
                    }
                    else
                    {
                      *(void *)float64x2_t v467 = v464;
                      float v338 = (char *)(v337 + 2);
                    }
                    float64x2_t v467 = v338;
                    if (__s1.__r_.__value_.__s.__data_[8])
                    {
                      double v347 = (float *)v464;
                      *(_DWORD *)float64x2_t v464 = __s1.__r_.__value_.__l.__data_;
                      BOOL v348 = __s1.__r_.__value_.__s.__data_[4] != 0;
                    }
                    else
                    {
                      BOOL v348 = 0;
                      double v347 = (float *)v464;
                      *(_DWORD *)float64x2_t v464 = 1065353216;
                    }
                    *((unsigned char *)v347 + 44) = v348;
                    float v349 = *(float *)&v457.__r_.__value_.__r.__words[2];
                    if (!v457.__r_.__value_.__s.__data_[20]) {
                      float v349 = 0.0;
                    }
                    v347[2] = v349;
                    float v350 = *(float *)&v461;
                    if (!BYTE4(v461)) {
                      float v350 = 0.0;
                    }
                    v347[1] = v350;
                    if (v457.__r_.__value_.__s.__data_[8])
                    {
                      v454[0] = v347;
                      v454[1] = v465;
                      if (v465) {
                        atomic_fetch_add_explicit(&v465->__shared_owners_, 1uLL, memory_order_relaxed);
                      }
                      if (v457.__r_.__value_.__s.__data_[7] >= 0) {
                        double v351 = &__s1.__r_.__value_.__s.__data_[16];
                      }
                      else {
                        double v351 = (char *)__s1.__r_.__value_.__r.__words[2];
                      }
                      AudioMetadataMemoryPool::fillString<AudioMetadataMatrixCoefficient>(v4, (int)v454, v347 + 12, v351);
                    }
                    if (v459)
                    {
                      int v352 = (int)v464;
                      v453[0] = v464;
                      v453[1] = v465;
                      if (v465) {
                        atomic_fetch_add_explicit(&v465->__shared_owners_, 1uLL, memory_order_relaxed);
                      }
                      if ((v458.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        double v353 = &v458;
                      }
                      else {
                        double v353 = (std::string *)v458.__r_.__value_.__r.__words[0];
                      }
                      AudioMetadataMemoryPool::fillString<AudioMetadataMatrixCoefficient>(v4, (int)v453, v352 + 28, (char *)v353);
                    }
                    if (v463[8])
                    {
                      int v354 = (int)v464;
                      v452[0] = v464;
                      v452[1] = v465;
                      if (v465) {
                        atomic_fetch_add_explicit(&v465->__shared_owners_, 1uLL, memory_order_relaxed);
                      }
                      if (v463[7] >= 0) {
                        float v355 = (char *)&v462;
                      }
                      else {
                        float v355 = (char *)v462;
                      }
                      AudioMetadataMemoryPool::fillString<AudioMetadataMatrixCoefficient>(v4, (int)v452, v354 + 20, v355);
                    }
                    float v356 = *(char **)&v463[16];
                    if (*(void *)&v463[16])
                    {
                      if (*(char *)(*(void *)&v463[16] + 23) < 0) {
                        float v356 = **(char ***)&v463[16];
                      }
                      *(void *)(v464 + 36) = v357;
                    }
                    if (v465) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v465);
                    }
                    if (*(void *)&v463[24]) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v463[24]);
                    }
                    if (v463[8] && (v463[7] & 0x80000000) != 0) {
                      operator delete((void *)v462);
                    }
                    if (v459 && SHIBYTE(v458.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v458.__r_.__value_.__l.__data_);
                    }
                    if (v457.__r_.__value_.__s.__data_[8] && v457.__r_.__value_.__s.__data_[7] < 0) {
                      operator delete((void *)__s1.__r_.__value_.__r.__words[2]);
                    }
                  }
                  __s1.__r_.__value_.__r.__words[0] = *(void *)v367;
                  __s1.__r_.__value_.__l.__size_ = (std::string::size_type)v366;
                  if (v366) {
                    atomic_fetch_add_explicit(&v366->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataMatrixCoefficient,AudioMetadataMatrix,AudioMetadataBlockFormat>();
                case 3:
                  if (*(unsigned char *)(v285 + 176))
                  {
                    *(unsigned char *)(*(void *)v367 + 104) = *(unsigned char *)(v285 + 164);
                    if (*(unsigned char *)(v285 + 172)) {
                      *(_DWORD *)(*(void *)v367 + 100) = *(_DWORD *)(v285 + 168);
                    }
                  }
                  if (*(unsigned char *)(v285 + 308) || *(unsigned char *)(v285 + 316) || *(unsigned char *)(v285 + 324))
                  {
                    *(unsigned char *)(*(void *)v367 + 72) = 1;
                    *(unsigned char *)(*(void *)v367 + 73) = v311;
                    if (*(unsigned char *)(v285 + 308)) {
                      *(_DWORD *)(*(void *)v367 + 60) = *(_DWORD *)(v285 + 304);
                    }
                  }
                  if (*(unsigned char *)(v285 + 316)) {
                    *(_DWORD *)(*(void *)v367 + 64) = *(_DWORD *)(v285 + 312);
                  }
                  if (*(unsigned char *)(v285 + 324)) {
                    *(_DWORD *)(*(void *)v367 + 68) = *(_DWORD *)(v285 + 320);
                  }
                  if (*(unsigned char *)(v285 + 336)) {
                    *(_DWORD *)(*(void *)v367 + 76) = *(_DWORD *)(v285 + 332);
                  }
                  if (*(unsigned char *)(v285 + 352))
                  {
                    *(unsigned char *)(*(void *)v367 + 84) = *(unsigned char *)(v285 + 340);
                    if (*(unsigned char *)(v285 + 348)) {
                      *(_DWORD *)(*(void *)v367 + 80) = *(_DWORD *)(v285 + 344);
                    }
                  }
                  if (*(unsigned char *)(v285 + 364))
                  {
                    *(unsigned char *)(*(void *)v367 + 96) = 1;
                    *(unsigned char *)(*(void *)v367 + 97) = v311;
                    *(_DWORD *)(*(void *)v367 + 88) = *(_DWORD *)(v285 + 356);
                    *(_DWORD *)(*(void *)v367 + 92) = *(_DWORD *)(v285 + 360);
                  }
                  memset(&__s1, 0, sizeof(__s1));
                  uint64_t v313 = *(void *)(v285 + 368);
                  if (v313 != *(void *)(v285 + 376))
                  {
                    float v314 = 0;
                    AudioMetadataMemoryPool::create<AudioMetadataZone>(&v464, v4);
                    float v315 = v464;
                    if (__s1.__r_.__value_.__r.__words[2])
                    {
                      MEMORY[0] = v464;
                      std::string::size_type v316 = 8;
                    }
                    else
                    {
                      std::string::size_type v317 = __s1.__r_.__value_.__r.__words[0];
                      uint64_t v318 = (uint64_t)-__s1.__r_.__value_.__r.__words[0] >> 3;
                      unint64_t v319 = v318 + 1;
                      if ((unint64_t)(v318 + 1) >> 61) {
                        std::vector<float>::__throw_length_error[abi:ne180100]();
                      }
                      int64_t v320 = __s1.__r_.__value_.__r.__words[2] - __s1.__r_.__value_.__r.__words[0];
                      if ((uint64_t)(__s1.__r_.__value_.__r.__words[2] - __s1.__r_.__value_.__r.__words[0]) >> 2 > v319) {
                        unint64_t v319 = v320 >> 2;
                      }
                      if ((unint64_t)v320 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v321 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v321 = v319;
                      }
                      if (v321) {
                        unint64_t v321 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v321);
                      }
                      else {
                        uint64_t v322 = 0;
                      }
                      float v323 = (void *)(v321 + 8 * v318);
                      *float v323 = v315;
                      std::string::size_type v324 = (std::string::size_type)(v323 + 1);
                      if (v317)
                      {
                        do
                        {
                          uint64_t v325 = *((void *)v314 - 1);
                          v314 -= 8;
                          *--float v323 = v325;
                        }
                        while (v314 != (char *)v317);
                        float v314 = (char *)__s1.__r_.__value_.__r.__words[0];
                      }
                      __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)v323;
                      __s1.__r_.__value_.__l.__size_ = v324;
                      __s1.__r_.__value_.__r.__words[2] = v321 + 8 * v322;
                      if (v314) {
                        operator delete(v314);
                      }
                      std::string::size_type v316 = v324;
                    }
                    __s1.__r_.__value_.__l.__size_ = v316;
                    if (v465) {
                      atomic_fetch_add_explicit(&v465->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    float v326 = (const char *)(v313 + 48);
                    if (*(char *)(v313 + 71) < 0) {
                      float v326 = *(const char **)v326;
                    }
                    strlen(v326);
                    operator new[]();
                  }
                  float64x2_t v466 = *(int **)v367;
                  float64x2_t v467 = (char *)v366;
                  if (v366) {
                    atomic_fetch_add_explicit(&v366->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataZone,AudioMetadataZoneExclusions,AudioMetadataBlockFormat>();
                case 4:
                case 5:
                  break;
                default:
                  __assert_rtn("populateBlockFormat", "AudioMetadataExtractor.cpp", 371, "false");
              }
              if (v369)
              {
                float v370 = (char *)v369;
                operator delete(v369);
              }
              if (v366) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v366);
              }
              if (v373) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v373);
              }
              v285 += 480;
            }
          }
          if (v383) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v383 + 8), 1uLL, memory_order_relaxed);
          }
          AudioMetadataMemoryPool::fillObjectRefs<AudioMetadataBlockFormat,AudioMetadataBlockFormatRefs,AudioMetadataChannelFormat>();
        }
        float32x4_t v228 = &v379;
LABEL_467:
        operator delete(v228->__r_.__value_.__l.__data_);
        goto LABEL_468;
      }
      if (!v226[88]) {
        goto LABEL_468;
      }
      if (v226[87] < 0) {
        std::string::__init_copy_ctor_external(&v378, *((const std::string::value_type **)v226 + 8), *((void *)v226 + 9));
      }
      else {
        std::string v378 = *(std::string *)(v226 + 64);
      }
      std::string::basic_string[abi:ne180100]<0>(&__s1, "0001");
      char v230 = v229;
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__s1.__r_.__value_.__l.__data_);
        if (v230) {
          goto LABEL_446;
        }
      }
      else if (v229)
      {
LABEL_446:
        char v231 = 1;
LABEL_465:
        *(unsigned char *)(*(void *)v382 + 52) = v231;
        if ((SHIBYTE(v378.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_468;
        }
        float32x4_t v228 = &v378;
        goto LABEL_467;
      }
      std::string::basic_string[abi:ne180100]<0>(&__s1, "0002");
      char v233 = v232;
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__s1.__r_.__value_.__l.__data_);
        if (v233) {
          goto LABEL_450;
        }
      }
      else if (v232)
      {
LABEL_450:
        char v231 = 2;
        goto LABEL_465;
      }
      std::string::basic_string[abi:ne180100]<0>(&__s1, "0003");
      char v235 = v234;
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__s1.__r_.__value_.__l.__data_);
        if (v235) {
          goto LABEL_454;
        }
      }
      else if (v234)
      {
LABEL_454:
        char v231 = 3;
        goto LABEL_465;
      }
      std::string::basic_string[abi:ne180100]<0>(&__s1, "0004");
      char v237 = v236;
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__s1.__r_.__value_.__l.__data_);
        if (v237) {
          goto LABEL_458;
        }
      }
      else if (v236)
      {
LABEL_458:
        char v231 = 4;
        goto LABEL_465;
      }
      std::string::basic_string[abi:ne180100]<0>(&__s1, "0005");
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__s1.__r_.__value_.__l.__data_);
      }
      if (v238) {
        char v231 = 5;
      }
      else {
        char v231 = 0;
      }
      goto LABEL_465;
    }
    float32x4_t v94 = *(char **)v415;
    *(unsigned char *)(*(void *)v415 + 77) = 1;
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&__s1, v92);
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&v457, v92 + 2);
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)&v458.__r_.__value_.__r.__words[1], v92 + 4);
    long long v95 = v92[6];
    long long v96 = v92[7];
    *(_OWORD *)&v463[13] = *(long long *)((char *)v92 + 125);
    long long v462 = v95;
    *(_OWORD *)float64x2_t v463 = v96;
    if (v456)
    {
      float v409 = v94;
      float v410 = (char *)v416;
      if (v416) {
        atomic_fetch_add_explicit(v416 + 1, 1uLL, memory_order_relaxed);
      }
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_s1 = &__s1;
      }
      else {
        p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
      }
      AudioMetadataMemoryPool::fillString<AudioMetadataContent>(v4, (int)&v409, v94 + 36, (char *)p_s1);
    }
    if (v458.__r_.__value_.__s.__data_[0])
    {
      float v406 = v94;
      float v407 = (char *)v416;
      if (v416) {
        atomic_fetch_add_explicit(v416 + 1, 1uLL, memory_order_relaxed);
      }
      if ((v457.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        float32x4_t v98 = &v457;
      }
      else {
        float32x4_t v98 = (std::string *)v457.__r_.__value_.__r.__words[0];
      }
      AudioMetadataMemoryPool::fillString<AudioMetadataContent>(v4, (int)&v406, v94 + 44, (char *)v98);
    }
    if (!(_BYTE)v461)
    {
LABEL_196:
      float v103 = *(float *)&v462;
      if (!BYTE4(v462)) {
        float v103 = 0.0;
      }
      *((float *)v94 + 13) = v103;
      float v104 = *((float *)&v462 + 2);
      if (!BYTE12(v462)) {
        float v104 = 0.0;
      }
      *((float *)v94 + 14) = v104;
      float v105 = *(float *)v463;
      if (!v463[4]) {
        float v105 = 0.0;
      }
      *((float *)v94 + 15) = v105;
      float v106 = *(float *)&v463[8];
      if (!v463[12]) {
        float v106 = 0.0;
      }
      *((float *)v94 + 16) = v106;
      float v107 = *(float *)&v463[16];
      if (!v463[20]) {
        float v107 = 0.0;
      }
      *((float *)v94 + 17) = v107;
      float v108 = *(float *)&v463[24];
      if (!v463[28]) {
        float v108 = 0.0;
      }
      *((float *)v94 + 18) = v108;
      if ((_BYTE)v461 && v460 < 0) {
        operator delete((void *)v458.__r_.__value_.__l.__size_);
      }
      if (v458.__r_.__value_.__s.__data_[0] && SHIBYTE(v457.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v457.__r_.__value_.__l.__data_);
      }
      if (v456 && SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__s1.__r_.__value_.__l.__data_);
      }
      float32x4_t v91 = *(char **)v364;
      goto LABEL_218;
    }
    std::string::basic_string[abi:ne180100]<0>(&v466, "File-based");
    int v100 = v99;
    if (SHIBYTE(v468) < 0)
    {
      operator delete(v466);
      if (v100) {
        goto LABEL_188;
      }
    }
    else if (v99)
    {
LABEL_188:
      v94[76] = 1;
      goto LABEL_196;
    }
    if (!(_BYTE)v461) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    std::string::basic_string[abi:ne180100]<0>(&v466, "Real-time");
    int v102 = v101;
    if (SHIBYTE(v468) < 0)
    {
      operator delete(v466);
      if (v102) {
        goto LABEL_193;
      }
    }
    else if (v101)
    {
LABEL_193:
      v94[76] = 2;
      goto LABEL_196;
    }
    v94[76] = 0;
    goto LABEL_196;
  }
  uint64_t v30 = *(char **)v426;
  *(unsigned char *)(*(void *)v426 + 105) = 1;
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&__s1, v28);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&v457, v28 + 2);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)&v458.__r_.__value_.__r.__words[1], v28 + 4);
  long long v31 = v28[6];
  long long v32 = v28[7];
  *(_OWORD *)&v463[13] = *(long long *)((char *)v28 + 125);
  long long v462 = v31;
  *(_OWORD *)float64x2_t v463 = v32;
  if (v456)
  {
    float v420 = v30;
    float v421 = (char *)v427;
    if (v427) {
      atomic_fetch_add_explicit(v427 + 1, 1uLL, memory_order_relaxed);
    }
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v33 = &__s1;
    }
    else {
      long long v33 = (std::string *)__s1.__r_.__value_.__r.__words[0];
    }
    AudioMetadataMemoryPool::fillString<AudioMetadataProgramme>(v4, (int)&v420, v30 + 64, (char *)v33);
  }
  if (v458.__r_.__value_.__s.__data_[0])
  {
    float v417 = v30;
    float v418 = (char *)v427;
    if (v427) {
      atomic_fetch_add_explicit(v427 + 1, 1uLL, memory_order_relaxed);
    }
    if ((v457.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v34 = &v457;
    }
    else {
      unint64_t v34 = (std::string *)v457.__r_.__value_.__r.__words[0];
    }
    AudioMetadataMemoryPool::fillString<AudioMetadataProgramme>(v4, (int)&v417, v30 + 72, (char *)v34);
  }
  if (!(_BYTE)v461)
  {
LABEL_75:
    float v39 = *(float *)&v462;
    if (!BYTE4(v462)) {
      float v39 = 0.0;
    }
    *((float *)v30 + 20) = v39;
    float v40 = *((float *)&v462 + 2);
    if (!BYTE12(v462)) {
      float v40 = 0.0;
    }
    *((float *)v30 + 21) = v40;
    float v41 = *(float *)v463;
    if (!v463[4]) {
      float v41 = 0.0;
    }
    *((float *)v30 + 22) = v41;
    float v42 = *(float *)&v463[8];
    if (!v463[12]) {
      float v42 = 0.0;
    }
    *((float *)v30 + 23) = v42;
    float v43 = *(float *)&v463[16];
    if (!v463[20]) {
      float v43 = 0.0;
    }
    *((float *)v30 + 24) = v43;
    float v44 = *(float *)&v463[24];
    if (!v463[28]) {
      float v44 = 0.0;
    }
    *((float *)v30 + 25) = v44;
    if ((_BYTE)v461 && v460 < 0) {
      operator delete((void *)v458.__r_.__value_.__l.__size_);
    }
    if (v458.__r_.__value_.__s.__data_[0] && SHIBYTE(v457.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v457.__r_.__value_.__l.__data_);
    }
    if (v456 && SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__s1.__r_.__value_.__l.__data_);
    }
    goto LABEL_96;
  }
  std::string::basic_string[abi:ne180100]<0>(&v466, "File-based");
  int v36 = v35;
  if (SHIBYTE(v468) < 0)
  {
    operator delete(v466);
    if (v36) {
      goto LABEL_67;
    }
  }
  else if (v35)
  {
LABEL_67:
    v30[104] = 1;
    goto LABEL_75;
  }
  if (!(_BYTE)v461) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  std::string::basic_string[abi:ne180100]<0>(&v466, "Real-time");
  int v38 = v37;
  if (SHIBYTE(v468) < 0)
  {
    operator delete(v466);
    if (v38) {
      goto LABEL_72;
    }
  }
  else if (v37)
  {
LABEL_72:
    v30[104] = 2;
    goto LABEL_75;
  }
  v30[104] = 0;
  goto LABEL_75;
}

void sub_190080DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  CA::ADMLoudnessMetadata::~ADMLoudnessMetadata((void **)&STACK[0x580]);
  if (STACK[0x488]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x488]);
  }
  if (STACK[0x490]) {
    operator delete((void *)STACK[0x490]);
  }
  if (STACK[0x4A8]) {
    operator delete((void *)STACK[0x4A8]);
  }
  if (STACK[0x4C0]) {
    operator delete((void *)STACK[0x4C0]);
  }
  if (STACK[0x4D8]) {
    operator delete((void *)STACK[0x4D8]);
  }
  if (STACK[0x4F0]) {
    operator delete((void *)STACK[0x4F0]);
  }
  if (STACK[0x508]) {
    operator delete((void *)STACK[0x508]);
  }
  if (STACK[0x520]) {
    operator delete((void *)STACK[0x520]);
  }
  if (STACK[0x538]) {
    operator delete((void *)STACK[0x538]);
  }
  uint64_t v11 = *(std::__shared_weak_count **)(a10 + 8);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::stringsEqual(unsigned __int8 *a1, char *a2)
{
  int v2 = (char)a1[23];
  if (v2 >= 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 == v4)
  {
    if (v2 >= 0) {
      double v6 = a1;
    }
    else {
      double v6 = *(unsigned __int8 **)a1;
    }
    if (!v3) {
      return 1;
    }
    if (v5 >= 0) {
      int v7 = (unsigned __int8 *)a2;
    }
    else {
      int v7 = *(unsigned __int8 **)a2;
    }
    while (1)
    {
      int v8 = *v6;
      if (v8 != *v7)
      {
        __darwin_ct_rune_t v9 = __tolower((char)v8);
        if (v9 != __tolower((char)*v7)) {
          break;
        }
      }
      ++v6;
      ++v7;
      if (!--v3) {
        return 1;
      }
    }
  }
  return 0;
}

void CA::ADMLoudnessMetadata::~ADMLoudnessMetadata(void **this)
{
  if (*((unsigned char *)this + 88) && *((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  if (*((unsigned char *)this + 56) && *((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((unsigned char *)this + 24))
  {
    if (*((char *)this + 23) < 0) {
      operator delete(*this);
    }
  }
}

uint64_t anonymous namespace'::getTypeDefinition(unsigned __int8 *a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "DirectSpeakers");
  char v3 = v2;
  if (v13 < 0)
  {
    operator delete(__p[0]);
    if (v3) {
      return 1;
    }
  }
  else if (v2)
  {
    return 1;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Matrix");
  char v6 = v5;
  if (v13 < 0)
  {
    operator delete(__p[0]);
    if (v6) {
      return 2;
    }
  }
  else if (v5)
  {
    return 2;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Objects");
  char v8 = v7;
  if (v13 < 0)
  {
    operator delete(__p[0]);
    if (v8) {
      return 3;
    }
  }
  else if (v7)
  {
    return 3;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "HOA");
  char v10 = v9;
  if (v13 < 0)
  {
    operator delete(__p[0]);
    if (v10) {
      return 4;
    }
  }
  else if (v9)
  {
    return 4;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Binaural");
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v11) {
    return 5;
  }
  else {
    return 0;
  }
}

void sub_190081974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float anonymous namespace'::populatePosition(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 329)) {
    BOOL v2 = *(unsigned char *)(a2 + 328) == 0;
  }
  else {
    BOOL v2 = 1;
  }
  char v3 = !v2;
  *(unsigned char *)(a1 + 12) = v3;
  if (*(unsigned char *)(a2 + 140))
  {
    float result = *(float *)(a2 + 136);
    *(float *)a1 = result;
  }
  if (*(unsigned char *)(a2 + 148))
  {
    float result = *(float *)(a2 + 144);
    *(float *)(a1 + 4) = result;
  }
  if (*(unsigned char *)(a2 + 156))
  {
    float result = *(float *)(a2 + 152);
    *(float *)(a1 + 8) = result;
  }
  return result;
}

char **anonymous namespace'::findById<AudioMetadataChannelFormat,char *AudioMetadataChannelFormat::*>(char *a1, char ****a2)
{
  BOOL v2 = *a2;
  char v3 = a2[1];
  if (*a2 == v3) {
    goto LABEL_34;
  }
  do
  {
    std::string::basic_string[abi:ne180100]<0>(&__s1, **v2);
    std::string::basic_string[abi:ne180100]<0>(__p, a1);
    unsigned __int8 v6 = v25;
    if ((v25 & 0x80u) == 0) {
      size_t v7 = v25;
    }
    else {
      size_t v7 = __n;
    }
    unint64_t v8 = v22;
    int v9 = (char)v22;
    if ((v22 & 0x80u) != 0) {
      unint64_t v8 = (unint64_t)__p[1];
    }
    if (v7 != v8)
    {
      BOOL v19 = 0;
      if (((char)v22 & 0x80000000) == 0) {
        goto LABEL_24;
      }
      goto LABEL_28;
    }
    if ((v22 & 0x80u) == 0) {
      char v10 = __p;
    }
    else {
      char v10 = (void **)__p[0];
    }
    if ((char)v25 < 0)
    {
      BOOL v19 = memcmp(__s1, v10, __n) == 0;
      goto LABEL_23;
    }
    if (v25)
    {
      uint64_t v11 = v25 - 1;
      p_s1 = &__s1;
      do
      {
        int v14 = *(unsigned __int8 *)p_s1;
        p_s1 = (void **)((char *)p_s1 + 1);
        int v13 = v14;
        int v16 = *(unsigned __int8 *)v10;
        char v10 = (void **)((char *)v10 + 1);
        int v15 = v16;
        BOOL v18 = v11-- != 0;
        BOOL v19 = v13 == v15;
      }
      while (v13 == v15 && v18);
LABEL_23:
      if ((v9 & 0x80000000) == 0) {
        goto LABEL_24;
      }
      goto LABEL_28;
    }
    BOOL v19 = 1;
    if (((char)v22 & 0x80000000) == 0)
    {
LABEL_24:
      if ((v6 & 0x80) == 0) {
        goto LABEL_25;
      }
      goto LABEL_29;
    }
LABEL_28:
    operator delete(__p[0]);
    if ((v25 & 0x80) == 0)
    {
LABEL_25:
      if (v19) {
        goto LABEL_32;
      }
      goto LABEL_30;
    }
LABEL_29:
    operator delete(__s1);
    if (v19) {
      goto LABEL_32;
    }
LABEL_30:
    ++v2;
  }
  while (v2 != v3);
  BOOL v2 = v3;
LABEL_32:
  if (v2 == a2[1]) {
LABEL_34:
  }
    __assert_rtn("findById", "AudioMetadataExtractor.cpp", 76, "false");
  return *v2;
}

void sub_190081B5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AudioMetadataMemoryPool::fillString<AudioMetadataMatrixCoefficient>(int a1, int a2, int a3, char *__s)
{
}

void sub_190081C2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CA::ADMZone>,CA::ADMZone*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 1) < 0) {
        operator delete(*(void **)(v3 - 24));
      }
      v3 -= 72;
    }
  }
  return a1;
}

__n128 std::construct_at[abi:ne180100]<CA::ADMRenderer,CA::ADMRenderer,CA::ADMRenderer*>(uint64_t a1, long long *a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  if (*((unsigned char *)a2 + 24))
  {
    long long v2 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v2;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  *(unsigned char *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  if (*((unsigned char *)a2 + 56))
  {
    long long v3 = a2[2];
    *(void *)(a1 + 48) = *((void *)a2 + 6);
    *(_OWORD *)(a1 + 32) = v3;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 6) = 0;
    *((void *)a2 + 4) = 0;
    *(unsigned char *)(a1 + 56) = 1;
  }
  *(unsigned char *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 88) = 0;
  if (*((unsigned char *)a2 + 88))
  {
    long long v4 = a2[4];
    *(void *)(a1 + 80) = *((void *)a2 + 10);
    *(_OWORD *)(a1 + 64) = v4;
    *((void *)a2 + 9) = 0;
    *((void *)a2 + 10) = 0;
    *((void *)a2 + 8) = 0;
    *(unsigned char *)(a1 + 88) = 1;
  }
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  __n128 result = (__n128)a2[6];
  *(__n128 *)(a1 + 96) = result;
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  *((void *)a2 + 12) = 0;
  *((void *)a2 + 13) = 0;
  *((void *)a2 + 14) = 0;
  return result;
}

uint64_t MP4LDSpatialConfigWriter::size(MP4LDSpatialConfigWriter *this)
{
  if (*((unsigned char *)this + 136))
  {
    int v2 = MP4SampleRate::Index((MP4SampleRate *)**((unsigned int **)this + 1));
    int v3 = 0;
    if (v2 == 15) {
      int v4 = 42;
    }
    else {
      int v4 = 18;
    }
    uint64_t v5 = *((unsigned int *)this + 6);
    int v6 = v4 | (v5 != 7);
    if (v5 == 7) {
      int v7 = v6 + 1;
    }
    else {
      int v7 = v6 + 7;
    }
    if (v5 == 7) {
      int v8 = 3;
    }
    else {
      int v8 = 4;
    }
    if (v5 == 7) {
      int v9 = 4;
    }
    else {
      int v9 = 5;
    }
    int v10 = v7 + v8 + v9;
    uint64_t v11 = &kBsTreeConfigurationTable[7 * v5];
    int v12 = v11[1];
    int v13 = (unsigned __int16 *)v11 + 5;
    while (v12 != v3)
    {
      if ((*v13 >> v3)) {
        v10 += 5;
      }
      ++v3;
    }
    int v14 = (_DWORD *)((char *)this + 96);
    for (uint64_t i = kBsTreeConfigurationTable[7 * v5 + 3]; i; --i)
    {
      if (*v14++) {
        int v17 = 12;
      }
      else {
        int v17 = 4;
      }
      v10 += v17;
    }
    if (*((_DWORD *)this + 14) == 2) {
      ++v10;
    }
    if (!*((_DWORD *)this + 16)) {
      return (v10 + 7) >> 3;
    }
    if (*((_DWORD *)this + 18))
    {
      v10 += 2;
      return (v10 + 7) >> 3;
    }
  }
  return 0;
}

uint64_t MP4LDSpatialConfigWriter::Serialize(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 136)) {
    return 0xFFFFFFFFLL;
  }
  int v4 = MP4SampleRate::Index((MP4SampleRate *)**(unsigned int **)(a1 + 8));
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, v4, 4u);
  unsigned int v5 = **(_DWORD **)(a1 + 8);
  if (MP4SampleRate::Index((MP4SampleRate *)v5) == 15) {
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, v5, 0x18u);
  }
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 16), 5u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 20), 3u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 24), 4u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 28), 2u);
  if (*(_DWORD *)(a1 + 24) != 7) {
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 32), 1u);
  }
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 36), 1u);
  if (*(_DWORD *)(a1 + 24) != 7)
  {
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 40), 3u);
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 44), 3u);
  }
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 48), 3u);
  if (*(_DWORD *)(a1 + 24) != 7) {
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 52), 1u);
  }
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 56), 2u);
  AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 60), 2u);
  if (*(_DWORD *)(a1 + 24) != 7) {
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 64), 1u);
  }
  for (unint64_t i = 0; ; ++i)
  {
    uint64_t v7 = *(unsigned int *)(a1 + 24);
    if (i >= kBsTreeConfigurationTable[7 * v7 + 1]) {
      break;
    }
    if ((HIWORD(kBsTreeConfigurationTable[7 * v7 + 2]) >> i)) {
      AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 76 + 4 * i), 5u);
    }
  }
  for (unint64_t j = 0; j < kBsTreeConfigurationTable[7 * v7 + 3]; ++j)
  {
    int v9 = (int *)(a1 + 4 * j);
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, v9[24], 1u);
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, v9[25], 3u);
    if (v9[24])
    {
      AT::TBitstreamWriter<unsigned int>::PutBits(a2, v9[26], 3u);
      AT::TBitstreamWriter<unsigned int>::PutBits(a2, v9[27], 5u);
    }
    uint64_t v7 = *(unsigned int *)(a1 + 24);
  }
  if (*(_DWORD *)(a1 + 56) == 2) {
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 68), 1u);
  }
  if (*(_DWORD *)(a1 + 64))
  {
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, *(_DWORD *)(a1 + 72), 2u);
    if (*(_DWORD *)(a1 + 72)) {
      return 0xFFFFFFFFLL;
    }
  }
  unsigned int v11 = *(_DWORD *)(a2 + 28) & 7;
  if (v11) {
    AT::TBitstreamWriter<unsigned int>::PutBits(a2, 0, v11);
  }
  return 0;
}

void MP4LDSpatialConfigWriter::~MP4LDSpatialConfigWriter(MP4LDSpatialConfigWriter *this)
{
  MP4SpatialAudioSpecificConfig::~MP4SpatialAudioSpecificConfig(this);
  JUMPOUT(0x192FC8940);
}

void MP4LDSpatialConfigWriter::MP4LDSpatialConfigWriter(MP4LDSpatialConfigWriter *this, const MP4SpatialAudioSpecificConfig *a2)
{
}

void sub_190082360(_Unwind_Exception *a1)
{
  MP4SpatialAudioSpecificConfig::~MP4SpatialAudioSpecificConfig(v1);
  _Unwind_Resume(a1);
}

void *___Z16NewAudioCapturer20AudioCapturerOptionsPKcS1_jPK27AudioStreamBasicDescriptionRS3__block_invoke_6433()
{
  __n128 result = dlopen("/usr/local/lib/libAudioDiagnostics.dylib", 5);
  if (result)
  {
    __n128 result = dlsym(result, "NewAudioCapturerImpl");
    if (result) {
      NewAudioCapturer(AudioCapturerOptions,char const*,char const*,unsigned int,AudioStreamBasicDescription const*,AudioStreamBasicDescription const&)::sImplFunctiouint64_t n = (uint64_t (*)(void, void, void, void, void, void))result;
    }
  }
  return result;
}

void DSPGraph::GraphInput::decompileBox(uint64_t a1, void *a2, char a3)
{
  int v4 = a2;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"in ", 3);
  if (a3)
  {
    int v4 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" ", 1);
    int v9 = (char *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      int v9 = *(char **)v9;
    }
    std::string::basic_string[abi:ne180100]<0>(v10, v9);
    DSPGraph::asDecompileString((char *)v10, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
  }
  else
  {
    int v6 = (char *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      int v6 = *(char **)v6;
    }
    std::string::basic_string[abi:ne180100]<0>(v10, v6);
    DSPGraph::asDecompileString((char *)v10, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)p_p, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"\n", 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
}

void sub_190082500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::GraphIOBox::hasPresetData(DSPGraph::GraphIOBox *this)
{
  return 0;
}

double DSPGraph::GraphInput::desc@<D0>(uint64_t a1@<X8>)
{
  double result = 7.28117482e199;
  *(_OWORD *)a1 = xmmword_1901C61F0;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t DSPGraph::GraphInput::recordEnable(DSPGraph::Box *this, uint64_t a2, char a3)
{
  *((unsigned char *)this + 913) = a3;
  return DSPGraph::Box::recordEnable(this, a2, a3);
}

uint64_t DSPGraph::GraphInput::stopRecording(DSPGraph::GraphInput *this, uint64_t a2)
{
  uint64_t v4 = *((void *)this + 110);
  *((void *)this + 110) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((unsigned char *)this + 913) = 0;
  return DSPGraph::Box::stopRecording(this, a2);
}

void DSPGraph::GraphInput::record(std::string *a1, char *a2, uint64_t a3, std::string::value_type a4, std::string::value_type a5, std::string::size_type a6)
{
  int v12 = &v18;
  std::string::basic_string[abi:ne180100]<0>(&v18, a2);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  }
  else {
    int64_t size = v18.__r_.__value_.__l.__size_;
  }
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int v12 = (std::string *)v18.__r_.__value_.__r.__words[0];
  }
  if (size >= 1)
  {
    int v14 = (char *)v12 + size;
    int v15 = v12;
    do
    {
      int v16 = memchr(v15, 46, size);
      if (!v16) {
        break;
      }
      if (*v16 == 46)
      {
        if (v16 != v14 && v16 - (unsigned char *)v12 != -1)
        {
          int v17 = std::string::replace(&v18, v16 - (unsigned char *)v12, 1uLL, "_raw.", 5uLL);
          std::string::operator=(a1 + 37, v17);
        }
        break;
      }
      int v15 = (std::string *)(v16 + 1);
      int64_t size = v14 - (unsigned char *)v15;
    }
    while (v14 - (unsigned char *)v15 >= 1);
  }
  a1[38].__r_.__value_.__s.__data_[0] = a5;
  a1[38].__r_.__value_.__s.__data_[1] = a4;
  a1[38].__r_.__value_.__l.__size_ = a6;
  DSPGraph::Box::record((uint64_t)a1, (uint64_t)a2, a3);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
}

void sub_1900826FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const char *DSPGraph::GraphInput::ClassName(DSPGraph::GraphInput *this)
{
  return "GraphInput";
}

void DSPGraph::GraphInput::~GraphInput(void **this)
{
  *this = &unk_1EDF96C58;
  if (*((char *)this + 911) < 0) {
    operator delete(this[111]);
  }
  int v2 = this[110];
  this[110] = 0;
  if (v2) {
    (*(void (**)(void *))(*(void *)v2 + 8))(v2);
  }
  *this = &unk_1EDF97930;
  DSPGraph::SimpleABL::free((DSPGraph::SimpleABL *)(this + 101));
  DSPGraph::SimpleABL::free((DSPGraph::SimpleABL *)(this + 101));
  DSPGraph::Box::~Box((DSPGraph::Box *)this);
  JUMPOUT(0x192FC8940);
}

{
  void *v2;
  uint64_t vars8;

  *this = &unk_1EDF96C58;
  if (*((char *)this + 911) < 0) {
    operator delete(this[111]);
  }
  int v2 = this[110];
  this[110] = 0;
  if (v2) {
    (*(void (**)(void *))(*(void *)v2 + 8))(v2);
  }
  *this = &unk_1EDF97930;
  DSPGraph::SimpleABL::free((DSPGraph::SimpleABL *)(this + 101));
  DSPGraph::SimpleABL::free((DSPGraph::SimpleABL *)(this + 101));
  DSPGraph::Box::~Box((DSPGraph::Box *)this);
}

void DSPGraph::GraphOutput::decompileBox(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = a2;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"out ", 4);
  if (a3)
  {
    uint64_t v4 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" ", 1);
    int v9 = (char *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      int v9 = *(char **)v9;
    }
    std::string::basic_string[abi:ne180100]<0>(v10, v9);
    DSPGraph::asDecompileString((char *)v10, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
  }
  else
  {
    int v6 = (char *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      int v6 = *(char **)v6;
    }
    std::string::basic_string[abi:ne180100]<0>(v10, v6);
    DSPGraph::asDecompileString((char *)v10, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)p_p, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"\n", 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
}

void sub_190082A04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double DSPGraph::GraphOutput::desc@<D0>(uint64_t a1@<X8>)
{
  double result = 8.1261874e228;
  *(_OWORD *)a1 = xmmword_1901C6200;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

const char *DSPGraph::GraphOutput::ClassName(DSPGraph::GraphOutput *this)
{
  return "GraphOutput";
}

void DSPGraph::GraphOutput::~GraphOutput(DSPGraph::GraphOutput *this)
{
  *(void *)this = &unk_1EDF97930;
  int v2 = (DSPGraph::GraphOutput *)((char *)this + 808);
  DSPGraph::SimpleABL::free((DSPGraph::GraphOutput *)((char *)this + 808));
  DSPGraph::SimpleABL::free(v2);
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x192FC8940);
}

{
  DSPGraph::SimpleABL *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EDF97930;
  int v2 = (DSPGraph::GraphOutput *)((char *)this + 808);
  DSPGraph::SimpleABL::free((DSPGraph::GraphOutput *)((char *)this + 808));
  DSPGraph::SimpleABL::free(v2);
  DSPGraph::Box::~Box(this);
}

uint64_t AudioFileFormatBase::AsAudioFileFormat(AudioFileFormatBase *this)
{
  return 0;
}

uint64_t AudioFileFormatBase::GetHFSCodes(AudioFileFormatBase *this, unsigned int *a2, void *a3)
{
  return 1886681407;
}

uint64_t AudioFileFormat::NewStream(AudioFileFormat *this)
{
  return 0;
}

void AudioFileFormatBase::AudioFileFormatBase(AudioFileFormatBase *this, int a2)
{
  *(void *)this = &unk_1EDF92918;
  *((_DWORD *)this + 2) = a2;
}

void AudioFileFormat::AudioFileFormat(AudioFileFormat *this, int a2)
{
  *((_DWORD *)this + 2) = a2;
  *(void *)this = &unk_1EDF8FDD8;
}

void sub_190082C58(_Unwind_Exception *a1)
{
  AUEventSchedule::~AUEventSchedule(v3);
  TThreadSafeList<RenderObserver>::NodeStack::free_all(v2);
  TThreadSafeList<RenderObserver>::NodeStack::free_all((uint64_t *)(v1 + 80));
  TThreadSafeList<RenderObserver>::NodeStack::free_all((uint64_t *)(v1 + 88));
  _Unwind_Resume(a1);
}

void AUEventSchedule::~AUEventSchedule(AUEventSchedule *this)
{
}

uint64_t *TThreadSafeList<RenderObserver>::NodeStack::free_all(uint64_t *result)
{
  uint64_t v1 = *result;
  if (*result)
  {
    int v2 = result;
    do
    {
      uint64_t *v2 = *(void *)v1;
      int v3 = *(void **)(v1 + 24);
      *(void *)(v1 + 24) = 0;

      double result = (uint64_t *)MEMORY[0x192FC8940](v1, 0x10A0C40CEAA8FA1);
      uint64_t v1 = *v2;
    }
    while (*v2);
  }
  return result;
}

uint64_t AUEventSchedule::uninitialize(AUEventSchedule *this)
{
  _X2 = 0;
  _X3 = 0;
  __asm { CASPAL          X2, X3, X2, X3, [X20]; unint64_t }
  AUEventSchedule::parameterWatchdogFired((AUEventSchedule *)&v14, (uint64_t)this, _X2, 0);
  int v9 = (AURenderEvent *)AUEventSchedule::preRender(this, 0x7FFFFFFFFFFFFFFEuLL, 1u, 0);
  AUEventSchedule::postRender(this, v9);
  uint64_t result = *(void *)this[1].mAddedEventQueue.mDequeueHead.padding;
  do
  {
    _X2 = 0;
    _X5 = *(void *)&this[1].mAddedEventQueue.mDequeueHead.padding[8];
    __asm { CASPAL          X4, X5, X2, X3, [X20] }
    _ZF = _X4 == result;
    uint64_t result = _X4;
  }
  while (!_ZF);
  return result;
}

AUEventSchedule *AUEventSchedule::parameterWatchdogFired(AUEventSchedule *this, uint64_t a2, AUEventSchedule *a3, unint64_t a4)
{
  uint64_t v4 = this;
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)(a2 + 96));
  if ((v5 & 1) == 0) {
    goto LABEL_6;
  }
  this = (AUEventSchedule *)PreviousRenderTime::parameterWatchdogFireTime((PreviousRenderTime *)(a2 + 128));
  if (this == a3 || (unint64_t)v9 <= a4)
  {
    int v18 = 0x8000;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v14 = 0u;
    unint64_t v13 = 0xC200000000000000;
    uint64_t v17 = 1;
    memset(v12, 0, sizeof(v12));
    this = (AUEventSchedule *)(*(uint64_t (**)(void, int *, unint64_t *, uint64_t, void, void *, void, uint64_t))(*(void *)(a2 + 120) + 16))(*(void *)(a2 + 120), &v18, &v13, 0x1000000, 0, v12, 0, v10);
LABEL_6:
    char v11 = 0;
    LOBYTE(v4->mAUv2GetParameterSynchronizer) = 0;
    goto LABEL_7;
  }
  v4->mAUv2GetParameterSynchronizer = (AUv2GetParameterSynchronizer *)this;
  v4->mAllocator = v9;
  char v11 = 1;
LABEL_7:
  LOBYTE(v4->mScheduledParameterRefresher) = v11;
  return this;
}

uint64_t AUEventSchedule::preRender(AUEventSchedule *this, unint64_t a2, unsigned int a3, int a4)
{
  atomic_store(0, (unsigned __int8 *)&this->mHavePendingSetParameter);
  if (a2 >> 28 != 0xFFFFFFFE0)
  {
    _X24 = mach_absolute_time();
    uint64_t v40 = _X24;
    uint64_t v41 = a3;
    uint64_t v9 = *(void *)this[1].mAddedEventQueue.mDequeueHead.padding;
    do
    {
      _X3 = *(void *)&this[1].mAddedEventQueue.mDequeueHead.padding[8];
      __asm { CASP            X2, X3, X24, X25, [X8] }
      _ZF = _X2 == v9;
      uint64_t v9 = _X2;
    }
    while (!_ZF);
  }
  int v38 = a4;
  long long v16 = 0;
  p_mScheduleHead = &this->mScheduleHead;
  uint64_t v18 = a2 + a3;
  while (1)
  {
    value = this->mAddedEventQueue.mDequeueHead.value;
    if (!value)
    {
      int v20 = (unint64_t *)atomic_exchange_explicit((atomic_ullong *volatile)&this->mAddedEventQueue, 0, memory_order_acquire);
      if (!v20) {
        goto LABEL_39;
      }
      value = 0;
      do
      {
        unint64_t v21 = (unint64_t)value;
        value = (AURenderEventNode *)v20;
        int v20 = (unint64_t *)atomic_load(v20);
        atomic_store(v21, (unint64_t *)value);
      }
      while (v20);
      this->mAddedEventQueue.mDequeueHead.value = value;
    }
    unsigned __int8 v22 = (AURenderEventNode *)atomic_load((unint64_t *)value);
    this->mAddedEventQueue.mDequeueHead.value = v22;
    unint64_t v23 = *((void *)value + 1);
    if (v23 >> 28 == 0xFFFFFFFF0)
    {
      unint64_t v23 = a2 + v23;
      *((void *)value + 1) = v23;
    }
    if (v23 == 1589718640
      && *((void *)value + 3) == 1589718640
      && *((float *)value + 8) >> 8 == 6209838)
    {
      break;
    }
    if (*((unsigned char *)value + 16) == 1 && *((_DWORD *)value + 9) && !*((unsigned char *)value + 19))
    {
      if (pthread_self() == *((pthread_t *)value + 5)) {
        char v24 = 3;
      }
      else {
        char v24 = 1;
      }
      *((unsigned char *)value + 19) |= v24;
    }
    unsigned __int8 v25 = &this->mScheduleHead;
    if (v16 && (unsigned __int8 v25 = &this->mScheduleHead, *((void *)value + 1) >= *((void *)v16 + 1)))
    {
      unsigned __int8 v25 = *(AURenderEvent)"mOwningAU"^v"mRenderBlock"@?"mPreviousRenderTime"{PreviousRenderTime ***)v16;
      int v26 = v16;
    }
    else
    {
      do
      {
        int v26 = v25;
        unsigned __int8 v25 = (AURenderEvent)"mOwningAU"^v"mRenderBlock"@?"mPreviousRenderTime"{PreviousRenderTime **)*v25;
      }
      while (v25 && *((void *)value + 1) >= (uint64_t)v25[1]);
    }
    *(void *)value = v25;
    if (!v25) {
      long long v16 = value;
    }
    *int v26 = value;
  }
  *(void *)value = 0;
  this->mScheduleHead = 0;
  double v27 = (unint64_t *)this->mAddedEventQueue.mDequeueHead.value;
  if (v27) {
    goto LABEL_37;
  }
  while (1)
  {
    long long v28 = (unint64_t *)atomic_exchange_explicit((atomic_ullong *volatile)&this->mAddedEventQueue, 0, memory_order_acquire);
    if (!v28) {
      break;
    }
    double v27 = 0;
    do
    {
      unint64_t v29 = (unint64_t)v27;
      double v27 = v28;
      long long v28 = (unint64_t *)atomic_load(v28);
      atomic_store(v29, v27);
    }
    while (v28);
    this->mAddedEventQueue.mDequeueHead.value = (AURenderEventNode *)v27;
    do
    {
LABEL_37:
      double v27 = (unint64_t *)atomic_load(v27);
      this->mAddedEventQueue.mDequeueHead.value = (AURenderEventNode *)v27;
    }
    while (v27);
  }
LABEL_39:
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  v39[0] = 0;
  v39[1] = 0;
  uint64_t v30 = *p_mScheduleHead;
  if (*p_mScheduleHead)
  {
    long long v31 = (void *)((char *)v30 + 8);
    int64_t v32 = *((void *)v30 + 1);
    if (v32 >= v18) {
      return v40;
    }
    while (1)
    {
      long long v33 = (AURenderEvent)"mOwningAU"^v"mRenderBlock"@?"mPreviousRenderTime"{PreviousRenderTime **)v30;
      if (*((unsigned char *)v30 + 16) != 1 || !v38 || !*((_DWORD *)v30 + 9)) {
        goto LABEL_48;
      }
      if ((unint64_t)v32 >> 28 == 0xFFFFFFFE0) {
        *long long v31 = v32 + 0x100000000;
      }
      if ((*((unsigned char *)v30 + 19) & 2) == 0) {
        unint64_t v34 = v39;
      }
      else {
LABEL_48:
      }
        unint64_t v34 = &v40;
      if (*v34)
      {
        int v36 = (AURenderEvent)"mOwningAU"^v"mRenderBlock"@?"mPreviousRenderTime"{PreviousRenderTime **)v34[1];
        int v35 = (AURenderEvent)"mOwningAU"^v"mRenderBlock"@?"mPreviousRenderTime"{PreviousRenderTime **)(v34 + 1);
        *int v36 = v30;
      }
      else
      {
        *unint64_t v34 = v30;
        int v35 = (AURenderEvent)"mOwningAU"^v"mRenderBlock"@?"mPreviousRenderTime"{PreviousRenderTime **)(v34 + 1);
      }
      *int v35 = v30;
      uint64_t v30 = *(AURenderEvent)"mOwningAU"^v"mRenderBlock"@?"mPreviousRenderTime"{PreviousRenderTime **)v30;
      if (!*v33) {
        break;
      }
      long long v31 = (void *)((char *)v30 + 8);
      int64_t v32 = *((void *)v30 + 1);
      if (v32 >= v18)
      {
        *p_mScheduleHead = v30;
        if (v33 != p_mScheduleHead) {
          goto LABEL_57;
        }
        return v40;
      }
    }
  }
  long long v33 = &this->mScheduleHead;
LABEL_57:
  *long long v33 = 0;
  return v40;
}

void AUEventSchedule::postRender(AUEventSchedule *this, AURenderEvent *a2)
{
  if (a2)
  {
    AUParameterAddress v4 = 0;
    unsigned __int8 v5 = a2;
    while (1)
    {
      next = v5->head.next;
      if (v5->head.eventType - 1 <= 1) {
        break;
      }
LABEL_13:
      if (!v5->head.reserved) {
        AURenderEventAllocator::dealloc(this->mAllocator, v5);
      }
      unsigned __int8 v5 = next;
      if (!next) {
        return;
      }
    }
    if (v5 == a2)
    {
      AUParameterAddress parameterAddress = a2->parameter.parameterAddress;
    }
    else
    {
      AUParameterAddress parameterAddress = v5->parameter.parameterAddress;
      if (parameterAddress == v4)
      {
LABEL_11:
        wordunsigned int Count = v5->MIDIEventsList.eventList.packet[0].wordCount;
        if (wordCount) {
          AUv2GetParameterSynchronizer::setLatestV2SetParameterSequenceNumber(this->mAUv2GetParameterSynchronizer, wordCount);
        }
        goto LABEL_13;
      }
    }
    mScheduledParameterRefresher = this->mScheduledParameterRefresher;
    if (mScheduledParameterRefresher) {
      AUScheduledParameterRefresher::deferInvalidateParameter((AUScheduledParameterRefresher *)mScheduledParameterRefresher, (unint64_t)this[1].mAUv2GetParameterSynchronizer, parameterAddress);
    }
    AUParameterAddress v4 = parameterAddress;
    goto LABEL_11;
  }
}

unint64_t *AUScheduledParameterRefresher::deferInvalidateParameter(AUScheduledParameterRefresher *this, unint64_t a2, unint64_t a3)
{
  uint64_t result = (unint64_t *)XAtomicPoolAllocator::alloc((AUScheduledParameterRefresher *)((char *)this + 16));
  result[1] = a2;
  result[2] = a3;
  unint64_t v7 = *((void *)this + 27);
  atomic_store(v7, result);
  unint64_t v8 = v7;
  atomic_compare_exchange_strong((atomic_ullong *volatile)this + 27, &v8, (unint64_t)result);
  if (v8 != v7)
  {
    unint64_t v9 = v8;
    do
    {
      atomic_store(v8, result);
      atomic_compare_exchange_strong((atomic_ullong *volatile)this + 27, &v9, (unint64_t)result);
      BOOL v10 = v9 == v8;
      unint64_t v8 = v9;
    }
    while (!v10);
  }
  if ((atomic_exchange((atomic_uchar *volatile)this + 176, 1u) & 1) == 0)
  {
    char v11 = (caulk::concurrent::messenger *)*((void *)this + 21);
    return (unint64_t *)caulk::concurrent::messenger::enqueue(v11, (AUScheduledParameterRefresher *)((char *)this + 144));
  }
  return result;
}

AUv2GetParameterSynchronizer *AUv2GetParameterSynchronizer::setLatestV2SetParameterSequenceNumber(AUv2GetParameterSynchronizer *this, unsigned int a2)
{
  AUv2GetParameterSynchronizer v2 = *this;
  unint64_t v3 = HIDWORD(*(unint64_t *)this);
  int v4 = a2 - v3;
  unint64_t v5 = *(void *)this & 0xFFFFFFFF00000000;
  if ((int)(a2 - v3) >= 0) {
    unint64_t v5 = 0;
  }
  BOOL v14 = v3 == 0;
  BOOL v6 = v3 != 0;
  if (v14) {
    unint64_t v5 = 0;
  }
  unint64_t v7 = v5 | a2;
  AUv2GetParameterSynchronizer v8 = *this;
  atomic_compare_exchange_strong((atomic_ullong *volatile)this, (unint64_t *)&v8, v7);
  if (v8 == v2)
  {
    unsigned int v9 = ~v4;
  }
  else
  {
    AUv2GetParameterSynchronizer v10 = v8;
    do
    {
      unsigned int v11 = a2 - *(_DWORD *)&v8.mSyncGetParamSema.mOwned;
      unint64_t v12 = *(void *)&v8 & 0xFFFFFFFF00000000;
      if ((int)(a2 - *(_DWORD *)&v8.mSyncGetParamSema.mOwned) >= 0) {
        unint64_t v12 = 0;
      }
      BOOL v6 = *(_DWORD *)&v8.mSyncGetParamSema.mOwned != 0;
      if (!*(_DWORD *)&v8.mSyncGetParamSema.mOwned) {
        unint64_t v12 = 0;
      }
      atomic_compare_exchange_strong((atomic_ullong *volatile)this, (unint64_t *)&v10, v12 | a2);
      BOOL v14 = v10 == v8;
      AUv2GetParameterSynchronizer v8 = v10;
    }
    while (!v14);
    unsigned int v9 = ~v11;
  }
  unsigned int v13 = v9 >> 31;
  BOOL v14 = !v6 || v13 == 0;
  if (!v14) {
    return (AUv2GetParameterSynchronizer *)caulk::semaphore::signal((caulk::semaphore *)&this[1]);
  }
  return this;
}

void AURenderEventAllocator::dealloc(AURenderEventAllocator *this, AURenderEvent *a2)
{
  switch(a2->head.eventType)
  {
    case AURenderEventParameter:
    case AURenderEventParameterRamp:
      goto LABEL_2;
    case AURenderEventMIDI:
      OSAtomicEnqueue((OSQueueHead *)this + 9, a2, *((void *)this + 20));
      unint64_t v3 = (atomic_uint *)((char *)this + 208);
      goto LABEL_9;
    case AURenderEventMIDISysEx:
      if (a2->MIDI.length < 0x1Cu)
      {
LABEL_2:
        OSAtomicEnqueue((OSQueueHead *)this + 2, a2, *((void *)this + 6));
        unint64_t v3 = (atomic_uint *)((char *)this + 96);
LABEL_9:
        atomic_fetch_add_explicit(v3, 1u, memory_order_relaxed);
      }
      else
      {
        free(a2);
      }
      return;
    case AURenderEventMIDIEventList:
      OSAtomicEnqueue((OSQueueHead *)this + 16, a2, *((void *)this + 34));
      unint64_t v3 = (atomic_uint *)((char *)this + 320);
      goto LABEL_9;
    default:
      return;
  }
}

void *XAtomicPoolAllocator::alloc(XAtomicPoolAllocator *this)
{
  atomic_fetch_add_explicit((atomic_uint *volatile)this + 24, 0xFFFFFFFF, memory_order_relaxed);
  AUv2GetParameterSynchronizer v2 = (OSQueueHead *)((char *)this + 32);
  uint64_t result = OSAtomicDequeue((OSQueueHead *)this + 2, *((void *)this + 6));
  if (!result)
  {
    XAtomicPoolAllocator::allocChunk(this);
    size_t v4 = *((void *)this + 6);
    return OSAtomicDequeue(v2, v4);
  }
  return result;
}

uint64_t PreviousRenderTime::parameterWatchdogFireTime(PreviousRenderTime *this)
{
  _X20 = 0;
  _X21 = 0;
  __asm { CASP            X20, X21, X20, X21, [X8] }
  if (!_X20) {
    mach_absolute_time();
  }
  return _X20;
}

uint64_t CADeprecated::TSingleton<AURenderEventAllocator>::instance()
{
  if (atomic_load_explicit((atomic_ullong *volatile)CADeprecated::TSingleton<AURenderEventAllocator>::sOnce, memory_order_acquire) != -1)
  {
    unint64_t v3 = &v1;
    AUv2GetParameterSynchronizer v2 = &v3;
    std::__call_once(CADeprecated::TSingleton<AURenderEventAllocator>::sOnce, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<CADeprecated::TSingleton<AURenderEventAllocator>::instance(void)::{lambda(void)#1} &&>>);
  }
  return CADeprecated::TSingleton<AURenderEventAllocator>::sInstance;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<CADeprecated::TSingleton<AURenderEventAllocator>::instance(void)::{lambda(void)#1} &&>>()
{
}

void sub_190083A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class ___ZL42getAVSpeechSynthesisProviderAudioUnitClassv_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  v7[0] = 0;
  if (!AVFAudioLibraryCore(char **)::frameworkLibrary)
  {
    v7[1] = (void *)MEMORY[0x1E4F143A8];
    v7[2] = (void *)3221225472;
    v7[3] = ___ZL19AVFAudioLibraryCorePPc_block_invoke_6642;
    _OWORD v7[4] = &__block_descriptor_40_e5_v8__0l;
    void v7[5] = v7;
    long long v8 = xmmword_1E5687AA0;
    uint64_t v9 = 0;
    AVFAudioLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  }
  if (!AVFAudioLibraryCore(char **)::frameworkLibrary)
  {
    unint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    size_t v4 = [NSString stringWithUTF8String:"void *AVFAudioLibrary()"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"AVFASoftLink.h", 63, @"%s", v7[0]);

    goto LABEL_10;
  }
  if (v7[0]) {
    free(v7[0]);
  }
  Class result = objc_getClass("AVSpeechSynthesisProviderAudioUnit");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    unint64_t v5 = [MEMORY[0x1E4F28B00] currentHandler];
    BOOL v6 = [NSString stringWithUTF8String:"Class getAVSpeechSynthesisProviderAudioUnitClass()_block_invoke"];
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, @"AVFASoftLink.h", 66, @"Unable to find class %s", "AVSpeechSynthesisProviderAudioUnit");

LABEL_10:
    __break(1u);
  }
  getAVSpeechSynthesisProviderAudioUnitClass(void)::softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                          + 24);
  return result;
}

void sub_190083C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL19AVFAudioLibraryCorePPc_block_invoke_6642()
{
  uint64_t result = _sl_dlopen();
  AVFAudioLibraryCore(char **)::frameworkLibrary = result;
  return result;
}

void sub_190083DB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_190083FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19008403C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_190084104(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1900841CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1900842B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_190084644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_190084734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_190084B60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_190084C60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_190084D80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_190084EF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1900865DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_40c55_ZTSNSt3__110shared_ptrIN4MIDI20DynamicMIDIConverterEEE(uint64_t a1)
{
  char v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t __copy_helper_block_ea8_40c55_ZTSNSt3__110shared_ptrIN4MIDI20DynamicMIDIConverterEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t MIDI::EventList::PacketReader::read(uint64_t *a1, void *a2, _DWORD *a3)
{
  unint64_t v3 = a1[1];
  unint64_t v4 = a1[3];
  if (v4 >= v3) {
    return 0;
  }
  uint64_t v5 = *a1;
  BOOL v6 = (unsigned int *)(*a1 + 4 * v4);
  unint64_t v7 = *v6;
  unint64_t v8 = v4 + MIDI::UniversalPacket::word_sizes[v7 >> 28];
  if (v8 > v3) {
    return 0;
  }
  *a2 = a1[2];
  switch((uint64_t)(v5 + 4 * v8 - (void)v6) >> 2)
  {
    case 0:
      goto LABEL_9;
    case 1:
      goto LABEL_8;
    case 2:
      goto LABEL_7;
    case 3:
      goto LABEL_6;
    case 4:
      *a3++ = v7;
      unsigned int v10 = v6[1];
      ++v6;
      LODWORD(v7) = v10;
LABEL_6:
      *a3++ = v7;
      unsigned int v11 = v6[1];
      ++v6;
      LODWORD(v7) = v11;
LABEL_7:
      *a3++ = v7;
      LODWORD(v7) = v6[1];
LABEL_8:
      *a3 = v7;
LABEL_9:
      a1[3] = v8;
      uint64_t result = 1;
      break;
    default:
      std::terminate();
      return result;
  }
  return result;
}

void std::__shared_ptr_emplace<MIDI::DynamicMIDIConverter>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2968;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

void std::__shared_ptr_emplace<MIDI::DynamicMIDIConverter>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2968;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *MIDI::MIDIPacketList_Deliverer::MIDIPacketList_Deliverer(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = (uint64_t)&caulk::inplace_function_detail::vtable<void,MIDI::LegacyPacketList const*>::empty;
  *a1 = &unk_1EDF95120;
  a1[1] = v3;
  (*(void (**)(void *, uint64_t *))(v3 + 16))(a1 + 2, a2 + 1);
  bzero(a1 + 8, 0x300uLL);
  return a1;
}

uint64_t MIDI::MIDIPacketList_Deliverer::operator()(uint64_t a1, _DWORD *a2)
{
  __src[1] = *MEMORY[0x1E4F143B8];
  uint64_t v62 = *(void *)(a1 + 8);
  (*(void (**)(uint64_t *, uint64_t))(v62 + 8))(&v63, a1 + 16);
  int v65 = 0;
  float32x4_t v64 = &v66;
  uint64_t v53 = a2;
  if (*a2 == 2)
  {
    if (!a2[1]) {
      return MIDI::PacketizerBase<MIDI::LegacyPacketList>::~PacketizerBase((uint64_t)&v62);
    }
    int v25 = 0;
    uint64_t v26 = (uint64_t)(a2 + 2);
    uint64_t v49 = a1 + 64;
LABEL_77:
    int v52 = v25;
    uint64_t v27 = *(unsigned int *)(v26 + 8);
    uint64_t v58 = (_DWORD *)(v26 + 12);
    uint64_t v59 = v27;
    uint64_t v51 = v26;
    uint64_t v60 = *(void *)v26;
    uint64_t v61 = 0;
    while (1)
    {
      uint64_t v56 = 0;
      unint64_t v57 = 0;
      uint64_t v55 = 0;
      if (!MIDI::EventList::PacketReader::read((uint64_t *)&v58, &v57, &v55))
      {
        uint64_t v26 = v51 + 4 * *(unsigned int *)(v51 + 8) + 12;
        int v25 = v52 + 1;
        if ((v52 + 1) >= v53[1]) {
          return MIDI::PacketizerBase<MIDI::LegacyPacketList>::~PacketizerBase((uint64_t)&v62);
        }
        goto LABEL_77;
      }
      __src[0] = v57;
      uint64_t v28 = v55;
      if (((1 << (v55 >> 28)) & 0xA02F) != 0) {
        break;
      }
      if (v55 >> 28 == 4)
      {
        unsigned int v30 = BYTE3(v55) & 0xF | 0x20;
        unsigned int v31 = HIDWORD(v55);
        switch(BYTE2(v55) >> 4)
        {
          case 2:
          case 3:
            uint64_t v33 = v49 + 48 * (BYTE3(v55) & 0xF);
            unint64_t v34 = ((unint64_t)v55 >> 16) & 0xF;
            int v35 = (unsigned __int8 *)(v33 + 3 * v34);
            unsigned int v36 = (v55 >> 8) & 0x7F;
            unsigned int v37 = v55 & 0x7F;
            if ((v55 & 0x100000) != 0) {
              int v38 = 2;
            }
            else {
              int v38 = 1;
            }
            if (v38 == *v35 && v36 == v35[1])
            {
              int v39 = v34 | 0xB0;
              if (v37 == *(unsigned __int8 *)(v33 + 3 * v34 + 2))
              {
                int v40 = (v30 << 24) | (v39 << 16);
                goto LABEL_99;
              }
            }
            else
            {
              int v39 = v34 | 0xB0;
            }
            unint64_t v50 = ((unint64_t)v55 >> 16) & 0xF;
            if ((v55 & 0x100000) != 0) {
              int v41 = 25344;
            }
            else {
              int v41 = 25856;
            }
            int v40 = (v30 << 24) | (v39 << 16);
            unsigned int v42 = (v55 >> 8) & 0x7F;
            MIDI::LegacyPacketList::write_UP<MIDI::MIDIPacketList_Deliverer::operator()(MIDI::EventList const*)::{lambda(unsigned long long,MIDI::UniversalPacket const&)#2}::operator() const(unsigned long long,MIDI::UniversalPacket const&)::{lambda(MIDI::UniversalPacket const&)#1}::operator() const(MIDI::UniversalPacket const&)::{lambda(std::span<unsigned char const,18446744073709551615ul>)#1}>(v40 | v41 | v36, 0, (uint64_t)&v62, __src);
            MIDI::LegacyPacketList::write_UP<MIDI::MIDIPacketList_Deliverer::operator()(MIDI::EventList const*)::{lambda(unsigned long long,MIDI::UniversalPacket const&)#2}::operator() const(unsigned long long,MIDI::UniversalPacket const&)::{lambda(MIDI::UniversalPacket const&)#1}::operator() const(MIDI::UniversalPacket const&)::{lambda(std::span<unsigned char const,18446744073709551615ul>)#1}>(v40 | (v41 - 256) | v37, 0, (uint64_t)&v62, __src);
            *int v35 = v38;
            uint64_t v43 = v33 + 3 * v50;
            *(unsigned char *)(v43 + 1) = v42;
            *(unsigned char *)(v43 + 2) = v37;
LABEL_99:
            MIDI::LegacyPacketList::write_UP<MIDI::MIDIPacketList_Deliverer::operator()(MIDI::EventList const*)::{lambda(unsigned long long,MIDI::UniversalPacket const&)#2}::operator() const(unsigned long long,MIDI::UniversalPacket const&)::{lambda(MIDI::UniversalPacket const&)#1}::operator() const(MIDI::UniversalPacket const&)::{lambda(std::span<unsigned char const,18446744073709551615ul>)#1}>(v40 | (v31 >> 25) | 0x600, 0, (uint64_t)&v62, __src);
            int v44 = (v31 >> 18) & 0x7F;
            if (!v44) {
              continue;
            }
            unsigned int v29 = 0;
            uint64_t v28 = v44 | v40 | 0x2600u;
            break;
          case 8:
          case 9:
          case 10:
          case 11:
            unsigned int v29 = 0;
            int v32 = BYTE2(v55) >> 4 == 9;
            if (HIDWORD(v55) >> 25) {
              int v32 = HIDWORD(v55) >> 25;
            }
            uint64_t v28 = v32 | (BYTE2(v55) << 16) | (v30 << 24) | v55 & 0x7F00;
            break;
          case 12:
            unsigned int v45 = v30 << 24;
            int v46 = BYTE2(v55) << 16;
            if (v55)
            {
              int v47 = (v46 - 0x100000) | (v30 << 24);
              MIDI::LegacyPacketList::write_UP<MIDI::MIDIPacketList_Deliverer::operator()(MIDI::EventList const*)::{lambda(unsigned long long,MIDI::UniversalPacket const&)#2}::operator() const(unsigned long long,MIDI::UniversalPacket const&)::{lambda(MIDI::UniversalPacket const&)#1}::operator() const(MIDI::UniversalPacket const&)::{lambda(std::span<unsigned char const,18446744073709551615ul>)#1}>((v46 - 0x100000) & 0xFFFFFF80 | (v30 << 24) | (HIDWORD(v55) >> 8) & 0x7F, 0, (uint64_t)&v62, __src);
              MIDI::LegacyPacketList::write_UP<MIDI::MIDIPacketList_Deliverer::operator()(MIDI::EventList const*)::{lambda(unsigned long long,MIDI::UniversalPacket const&)#2}::operator() const(unsigned long long,MIDI::UniversalPacket const&)::{lambda(MIDI::UniversalPacket const&)#1}::operator() const(MIDI::UniversalPacket const&)::{lambda(std::span<unsigned char const,18446744073709551615ul>)#1}>(v47 | v31 & 0x7F | 0x2000, 0, (uint64_t)&v62, __src);
            }
            unsigned int v29 = 0;
            uint64_t v28 = HIWORD(v31) & 0x7F00 | v45 | v46;
            break;
          case 13:
            unsigned int v29 = 0;
            uint64_t v28 = (BYTE2(v55) << 16) | (v30 << 24) | (HIDWORD(v55) >> 25 << 8);
            break;
          case 14:
            unsigned int v29 = 0;
            uint64_t v28 = (HIDWORD(v55) >> 10) & 0x7F00 | (BYTE2(v55) << 16) | (v30 << 24) | (HIDWORD(v55) >> 25);
            break;
          default:
            continue;
        }
LABEL_81:
        MIDI::LegacyPacketList::write_UP<MIDI::MIDIPacketList_Deliverer::operator()(MIDI::EventList const*)::{lambda(unsigned long long,MIDI::UniversalPacket const&)#2}::operator() const(unsigned long long,MIDI::UniversalPacket const&)::{lambda(MIDI::UniversalPacket const&)#1}::operator() const(MIDI::UniversalPacket const&)::{lambda(std::span<unsigned char const,18446744073709551615ul>)#1}>(v28, v29, (uint64_t)&v62, __src);
      }
    }
    unsigned int v29 = HIDWORD(v55);
    goto LABEL_81;
  }
  if (*a2 != 1) {
    std::terminate();
  }
  if (a2[1])
  {
    unsigned int v4 = 0;
    uint64_t v5 = a2 + 2;
    do
    {
      uint64_t v6 = v5[2];
      uint64_t v58 = v5 + 3;
      uint64_t v59 = v6;
      uint64_t v60 = *(void *)v5;
      uint64_t v61 = 0;
      while (1)
      {
        uint64_t v54 = 0;
        uint64_t v55 = 0;
        uint64_t v56 = 0;
        if (!MIDI::EventList::PacketReader::read((uint64_t *)&v58, &v54, &v55)) {
          break;
        }
        uint64_t v7 = v54;
        unsigned int v8 = v55;
        unsigned int v9 = v55 >> 28;
        if (v55 >> 28 == 3)
        {
          unint64_t v13 = ((unint64_t)v55 >> 16) & 0xF;
          if (v13 <= 6 && BYTE2(v55) <= 0x3Fu)
          {
            unint64_t v57 = _byteswap_uint64(__PAIR64__(v55, HIDWORD(v55)));
            if ((v55 & 0x200000) != 0)
            {
              size_t v10 = 0;
              if (!v13) {
                goto LABEL_45;
              }
LABEL_44:
              memcpy((char *)__src + v10, (char *)&v57 + 2, ((unint64_t)v55 >> 16) & 0xF);
              v10 += (v13 - 1) + 1;
              goto LABEL_45;
            }
            LOBYTE(__src[0]) = -16;
            size_t v10 = 1;
            if (v13) {
              goto LABEL_44;
            }
LABEL_45:
            if ((((v8 >> 20) + 3) & 2) != 0) {
              *((unsigned char *)__src + v10++) = -9;
            }
            unint64_t v11 = (unint64_t)v64;
            if (v65)
            {
              uint64_t v20 = *((unsigned __int16 *)v64 + 4);
              if (*(void *)v64 == v7 && *((unsigned __int8 *)v64 + v20 + 9) != 247 && LOBYTE(__src[0]) != 240)
              {
                if ((char *)v64 + v10 + v20 + 10 > (char *)__src) {
                  goto LABEL_63;
                }
                goto LABEL_60;
              }
              unint64_t v11 = ((unint64_t)v64 + v20 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            }
            if (v11 + v10 + 10 > (unint64_t)__src) {
              goto LABEL_63;
            }
            uint64_t v20 = 0;
            ++v65;
            *(void *)unint64_t v11 = v7;
            *(_WORD *)(v11 + 8) = 0;
LABEL_60:
            unint64_t v21 = (unsigned char *)(v11 + v20 + 10);
            unsigned __int8 v22 = __src;
            switch(v10)
            {
              case 0uLL:
                break;
              case 1uLL:
                goto LABEL_69;
              case 2uLL:
                goto LABEL_68;
              case 3uLL:
                goto LABEL_67;
              case 4uLL:
LABEL_66:
                *v21++ = __src[0];
                unsigned __int8 v22 = (uint64_t *)((char *)__src + 1);
LABEL_67:
                char v23 = *(unsigned char *)v22;
                unsigned __int8 v22 = (uint64_t *)((char *)v22 + 1);
                *v21++ = v23;
LABEL_68:
                char v24 = *(unsigned char *)v22;
                unsigned __int8 v22 = (uint64_t *)((char *)v22 + 1);
                *v21++ = v24;
LABEL_69:
                *unint64_t v21 = *(unsigned char *)v22;
                break;
              default:
LABEL_70:
                memmove(v21, __src, v10);
                break;
            }
            *(_WORD *)(v11 + 8) += v10;
LABEL_72:
            float32x4_t v64 = (int *)v11;
          }
        }
        else if (v9 == 2)
        {
          int v14 = v55 & 0xE00000;
          LOBYTE(__src[0]) = BYTE2(v55);
          BYTE1(__src[0]) = BYTE1(v55) & 0x7F;
          if ((v55 & 0xE00000) == 0xC00000) {
            size_t v15 = 2;
          }
          else {
            size_t v15 = 3;
          }
          if (v14 != 12582912) {
            BYTE2(__src[0]) = v55 & 0x7F;
          }
          unint64_t v16 = (unint64_t)v64;
          if (v65)
          {
            uint64_t v17 = *((unsigned __int16 *)v64 + 4);
            if (*(void *)v64 == v54 && BYTE2(v55) != 240 && *((unsigned __int8 *)v64 + v17 + 9) != 247)
            {
              if ((char *)v64 + v15 + v17 + 10 > (char *)__src) {
                goto LABEL_39;
              }
              goto LABEL_41;
            }
            unint64_t v16 = ((unint64_t)v64 + v17 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          }
          if (v16 + v15 + 10 > (unint64_t)__src)
          {
LABEL_39:
            unint64_t v16 = MIDI::PacketizerBase<MIDI::LegacyPacketList>::begin_new_packet((uint64_t)&v62, v54, (char *)__src, v15);
            goto LABEL_55;
          }
          uint64_t v17 = 0;
          ++v65;
          *(void *)unint64_t v16 = v54;
          *(_WORD *)(v16 + 8) = 0;
LABEL_41:
          uint64_t v18 = (unsigned char *)(v16 + v17 + 10);
          if (v14 == 12582912)
          {
            BOOL v19 = __src;
          }
          else
          {
            *v18++ = __src[0];
            BOOL v19 = (uint64_t *)((char *)__src + 1);
          }
          *uint64_t v18 = *(unsigned char *)v19;
          v18[1] = *((unsigned char *)v19 + 1);
          *(_WORD *)(v16 + 8) += v15;
LABEL_55:
          float32x4_t v64 = (int *)v16;
        }
        else if (v9 == 1 && BYTE2(v55) >= 0xF0u && ((0x22B1uLL >> (BYTE2(v55) + 16)) & 1) == 0)
        {
          size_t v10 = MIDI::system_message_size::sizes[BYTE2(v55) - 240];
          LOBYTE(__src[0]) = BYTE2(v55);
          if (((0xDD40uLL >> (BYTE2(v55) + 16)) & 1) == 0)
          {
            BYTE1(__src[0]) = BYTE1(v55) & 0x7F;
            if (BYTE2(v55) == 242) {
              BYTE2(__src[0]) = v55 & 0x7F;
            }
          }
          unint64_t v11 = (unint64_t)v64;
          if (v65)
          {
            uint64_t v12 = *((unsigned __int16 *)v64 + 4);
            if (*(void *)v64 == v54 && BYTE2(v55) != 240 && *((unsigned __int8 *)v64 + v12 + 9) != 247)
            {
              if ((char *)v64 + v12 + v10 + 10 <= (char *)__src) {
                goto LABEL_65;
              }
LABEL_63:
              unint64_t v11 = MIDI::PacketizerBase<MIDI::LegacyPacketList>::begin_new_packet((uint64_t)&v62, v7, (char *)__src, v10);
              goto LABEL_72;
            }
            unint64_t v11 = ((unint64_t)v64 + v12 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          }
          if (v11 + v10 + 10 <= (unint64_t)__src)
          {
            uint64_t v12 = 0;
            ++v65;
            *(void *)unint64_t v11 = v54;
            *(_WORD *)(v11 + 8) = 0;
LABEL_65:
            unint64_t v21 = (unsigned char *)(v11 + v12 + 10);
            unsigned __int8 v22 = __src;
            switch((int)v10)
            {
              case 1:
                goto LABEL_69;
              case 2:
                goto LABEL_68;
              case 3:
                goto LABEL_67;
              case 4:
                goto LABEL_66;
              default:
                goto LABEL_70;
            }
          }
          goto LABEL_63;
        }
      }
      v5 += v5[2] + 3;
      ++v4;
    }
    while (v4 < v53[1]);
  }
  return MIDI::PacketizerBase<MIDI::LegacyPacketList>::~PacketizerBase((uint64_t)&v62);
}

void sub_190087098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
}

uint64_t MIDI::MIDIPacketList_Deliverer::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return (**(uint64_t (***)(uint64_t, uint64_t *))(a1 + 8))(a1 + 16, &v3);
}

void MIDI::MIDIPacketList_Deliverer::~MIDIPacketList_Deliverer(MIDI::MIDIPacketList_Deliverer *this)
{
  *(void *)this = &unk_1EDF95120;
  (*(void (**)(char *))(*((void *)this + 1) + 24))((char *)this + 16);
  JUMPOUT(0x192FC8940);
}

{
  *(void *)this = &unk_1EDF95120;
  (*(void (**)(char *))(*((void *)this + 1) + 24))((char *)this + 16);
}

uint64_t MIDI::PacketizerBase<MIDI::LegacyPacketList>::~PacketizerBase(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 64))
  {
    uint64_t v3 = a1 + 64;
    (**(void (***)(uint64_t, uint64_t *))a1)(a1 + 8, &v3);
  }
  *(_DWORD *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 68;
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1 + 8);
  return a1;
}

uint64_t MIDI::LegacyPacketList::write_UP<MIDI::MIDIPacketList_Deliverer::operator()(MIDI::EventList const*)::{lambda(unsigned long long,MIDI::UniversalPacket const&)#2}::operator() const(unsigned long long,MIDI::UniversalPacket const&)::{lambda(MIDI::UniversalPacket const&)#1}::operator() const(MIDI::UniversalPacket const&)::{lambda(std::span<unsigned char const,18446744073709551615ul>)#1}>(uint64_t result, unsigned int a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  int v6 = BYTE2(result);
  unsigned int v7 = result >> 28;
  if (result >> 28 == 3)
  {
    size_t v14 = WORD1(result) & 0xF;
    if (v14 > 6 || BYTE2(result) > 0x3Fu) {
      return result;
    }
    unsigned int v15 = (result >> 20) + 3;
    v31[0] = bswap32(result);
    v31[1] = bswap32(a2);
    if ((result & 0x200000) != 0)
    {
      size_t v8 = 0;
      if (!v14) {
        goto LABEL_39;
      }
    }
    else
    {
      unsigned __int8 __src = -16;
      size_t v8 = 1;
      if (!v14)
      {
LABEL_39:
        if ((v15 & 2) != 0) {
          *(&__src + v8++) = -9;
        }
        uint64_t v24 = *a4;
        unint64_t v10 = *(void *)(a3 + 56);
        unint64_t v25 = a3 + 1088;
        int v26 = *(_DWORD *)(a3 + 64);
        if (v26)
        {
          uint64_t v27 = *(unsigned __int16 *)(v10 + 8);
          if (*(void *)v10 == v24 && *(unsigned __int8 *)(v27 + v10 + 9) != 247 && __src != 240)
          {
            if (v10 + v8 + v27 + 10 <= v25) {
              goto LABEL_54;
            }
            goto LABEL_52;
          }
          unint64_t v10 = (v10 + v27 + 13) & 0xFFFFFFFFFFFFFFFCLL;
        }
        if (v10 + v8 + 10 <= v25)
        {
          LODWORD(v27) = 0;
          *(_DWORD *)(a3 + 64) = v26 + 1;
          *(void *)unint64_t v10 = v24;
          *(_WORD *)(v10 + 8) = 0;
LABEL_54:
          uint64_t result = v10 + v27 + 10;
          p_src = &__src;
          switch(v8)
          {
            case 0uLL:
              break;
            case 1uLL:
              goto LABEL_64;
            case 2uLL:
              goto LABEL_63;
            case 3uLL:
              goto LABEL_62;
            case 4uLL:
LABEL_61:
              p_src = (unsigned __int8 *)&v33;
              *(unsigned char *)result++ = __src;
LABEL_62:
              char v29 = *p_src++;
              *(unsigned char *)result++ = v29;
LABEL_63:
              char v30 = *p_src++;
              *(unsigned char *)result++ = v30;
LABEL_64:
              *(unsigned char *)uint64_t result = *p_src;
              break;
            default:
LABEL_65:
              uint64_t result = (uint64_t)memmove((void *)result, &__src, v8);
              break;
          }
          *(_WORD *)(v10 + 8) += v8;
          goto LABEL_67;
        }
LABEL_52:
        uint64_t result = MIDI::PacketizerBase<MIDI::LegacyPacketList>::begin_new_packet(a3, v24, (char *)&__src, v8);
LABEL_58:
        unint64_t v10 = result;
LABEL_67:
        *(void *)(a3 + 56) = v10;
        return result;
      }
    }
    memcpy(&__src + v8, (char *)v31 + 2, v14);
    v8 += (v14 - 1) + 1;
    goto LABEL_39;
  }
  if (v7 == 2)
  {
    int v16 = result & 0xE00000;
    unsigned __int8 __src = BYTE2(result);
    char v33 = BYTE1(result) & 0x7F;
    if ((result & 0xE00000) == 0xC00000) {
      size_t v17 = 2;
    }
    else {
      size_t v17 = 3;
    }
    if (v16 != 12582912) {
      char v34 = result & 0x7F;
    }
    uint64_t v18 = *a4;
    uint64_t result = *(void *)(a3 + 56);
    unint64_t v19 = a3 + 1088;
    int v20 = *(_DWORD *)(a3 + 64);
    if (v20)
    {
      uint64_t v21 = *(unsigned __int16 *)(result + 8);
      if (*(void *)result == v18 && v6 != 240 && *(unsigned __int8 *)(v21 + result + 9) != 247)
      {
        if (result + v17 + v21 + 10 <= v19) {
          goto LABEL_35;
        }
        goto LABEL_33;
      }
      uint64_t result = (result + v21 + 13) & 0xFFFFFFFFFFFFFFFCLL;
    }
    if (result + v17 + 10 <= v19)
    {
      LODWORD(v21) = 0;
      *(_DWORD *)(a3 + 64) = v20 + 1;
      *(void *)uint64_t result = v18;
      *(_WORD *)(result + 8) = 0;
LABEL_35:
      unsigned __int8 v22 = (unsigned __int8 *)(result + v21 + 10);
      if (v16 == 12582912)
      {
        char v23 = &__src;
      }
      else
      {
        char v23 = (unsigned __int8 *)&v33;
        *unsigned __int8 v22 = __src;
        unsigned __int8 v22 = (unsigned __int8 *)(result + v21 + 11);
      }
      *unsigned __int8 v22 = *v23;
      v22[1] = v23[1];
      *(_WORD *)(result + 8) += v17;
      goto LABEL_49;
    }
LABEL_33:
    uint64_t result = MIDI::PacketizerBase<MIDI::LegacyPacketList>::begin_new_packet(a3, v18, (char *)&__src, v17);
LABEL_49:
    *(void *)(a3 + 56) = result;
    return result;
  }
  if (v7 == 1 && BYTE2(result) >= 0xF0u && ((0x22B1uLL >> (BYTE2(result) + 16)) & 1) == 0)
  {
    size_t v8 = MIDI::system_message_size::sizes[BYTE2(result) - 240];
    unsigned __int8 __src = BYTE2(result);
    if (((0xDD40uLL >> (BYTE2(result) + 16)) & 1) == 0)
    {
      char v33 = BYTE1(result) & 0x7F;
      if (BYTE2(result) == 242) {
        char v34 = result & 0x7F;
      }
    }
    uint64_t v9 = *a4;
    unint64_t v10 = *(void *)(a3 + 56);
    unint64_t v11 = a3 + 1088;
    int v12 = *(_DWORD *)(a3 + 64);
    if (v12)
    {
      uint64_t v13 = *(unsigned __int16 *)(v10 + 8);
      if (*(void *)v10 == v9 && BYTE2(result) != 240 && *(unsigned __int8 *)(v13 + v10 + 9) != 247)
      {
        if (v10 + v13 + v8 + 10 <= v11) {
          goto LABEL_60;
        }
LABEL_57:
        uint64_t result = MIDI::PacketizerBase<MIDI::LegacyPacketList>::begin_new_packet(a3, v9, (char *)&__src, v8);
        goto LABEL_58;
      }
      unint64_t v10 = (v10 + v13 + 13) & 0xFFFFFFFFFFFFFFFCLL;
    }
    if (v10 + v8 + 10 <= v11)
    {
      LODWORD(v13) = 0;
      *(_DWORD *)(a3 + 64) = v12 + 1;
      *(void *)unint64_t v10 = v9;
      *(_WORD *)(v10 + 8) = 0;
LABEL_60:
      uint64_t result = v10 + v13 + 10;
      p_src = &__src;
      switch((int)v8)
      {
        case 1:
          goto LABEL_64;
        case 2:
          goto LABEL_63;
        case 3:
          goto LABEL_62;
        case 4:
          goto LABEL_61;
        default:
          goto LABEL_65;
      }
    }
    goto LABEL_57;
  }
  return result;
}

uint64_t MIDI::PacketizerBase<MIDI::LegacyPacketList>::begin_new_packet(uint64_t a1, uint64_t a2, char *a3, size_t a4)
{
  if (*(_DWORD *)(a1 + 64)
    && (uint64_t v16 = a1 + 64,
        (**(void (***)(uint64_t, uint64_t *))a1)(a1 + 8, &v16),
        *(_DWORD *)(a1 + 64) = 0,
        uint64_t v8 = a1 + 68,
        a1 + 68 + a4 + 10 <= a1 + 1088))
  {
    *(_DWORD *)(a1 + 64) = 1;
    *(void *)(a1 + 68) = a2;
    *(_WORD *)(a1 + 76) = 0;
    uint64_t v9 = (char *)(a1 + 78);
    __int16 v10 = 0;
    switch(a4)
    {
      case 0uLL:
        break;
      case 1uLL:
        goto LABEL_8;
      case 2uLL:
        goto LABEL_7;
      case 3uLL:
        goto LABEL_6;
      case 4uLL:
        char v11 = *a3++;
        uint64_t v9 = (char *)(a1 + 79);
        *(unsigned char *)(a1 + 78) = v11;
LABEL_6:
        char v12 = *a3++;
        *v9++ = v12;
LABEL_7:
        char v13 = *a3++;
        *v9++ = v13;
LABEL_8:
        *uint64_t v9 = *a3;
        __int16 v10 = *(_WORD *)(a1 + 76);
        break;
      default:
        if (a4) {
          memmove(v9, a3, a4);
        }
        __int16 v10 = 0;
        break;
    }
    *(_WORD *)(a1 + 76) = v10 + a4;
  }
  else
  {
    MIDI::LegacyPacketList::create();
    uint64_t v16 = v15;
    (**(void (***)(uint64_t, uint64_t *))a1)(a1 + 8, &v16);
    std::unique_ptr<MIDI::LegacyPacketList,MIDI::LegacyPacketListDeleter>::reset[abi:ne180100](&v15);
    uint64_t v8 = a1 + 68;
    *(void *)(a1 + 56) = a1 + 68;
    *(_DWORD *)(a1 + 64) = 0;
    std::unique_ptr<MIDI::LegacyPacketList,MIDI::LegacyPacketListDeleter>::reset[abi:ne180100](&v15);
  }
  return v8;
}

void sub_190087860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *std::unique_ptr<MIDI::LegacyPacketList,MIDI::LegacyPacketListDeleter>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1) {
    return (uint64_t *)MIDI::LegacyPacketListDeleter::operator()();
  }
  return result;
}

void caulk::inplace_function_detail::vtable<void,MIDI::LegacyPacketList const*>::vtable(void)::{lambda(void *,MIDI::LegacyPacketList const*&&)#1}::__invoke()
{
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
}

void _ZZN5caulk23inplace_function_detail6vtableIvJPKN4MIDI16LegacyPacketListEEEC1IZZ34__AUAudioUnit_setupMIDIConversion_EUb5_E3__7EENS0_7wrapperIT_EEENUlPvE_8__invokeESC_(uint64_t a1)
{
}

void _ZZN5caulk23inplace_function_detail6vtableIvJPKN4MIDI16LegacyPacketListEEEC1IZZ34__AUAudioUnit_setupMIDIConversion_EUb5_E3__7EENS0_7wrapperIT_EEENUlPvSC_E0_8__invokeESC_SC_(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v3;
  *(void *)(a1 + 24) = _Block_copy(*((const void **)a2 + 3));
  unsigned int v4 = (void *)*((void *)a2 + 3);
}

void *_ZZN5caulk23inplace_function_detail6vtableIvJPKN4MIDI16LegacyPacketListEEEC1IZZ34__AUAudioUnit_setupMIDIConversion_EUb5_E3__7EENS0_7wrapperIT_EEENUlPvSC_E_8__invokeESC_SC_(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v3;
  uint64_t result = _Block_copy(*((const void **)a2 + 3));
  *(void *)(a1 + 24) = result;
  return result;
}

uint64_t _ZZN5caulk23inplace_function_detail6vtableIvJPKN4MIDI16LegacyPacketListEEEC1IZZ34__AUAudioUnit_setupMIDIConversion_EUb5_E3__7EENS0_7wrapperIT_EEENUlPvOS5_E_8__invokeESC_SD_(uint64_t result, unsigned int **a2)
{
  uint64_t v2 = *a2;
  if (**a2)
  {
    uint64_t v3 = result;
    unsigned int v4 = 0;
    unint64_t v5 = (unint64_t)(v2 + 1);
    do
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(v3 + 24) + 16))();
      **(_DWORD **)uint64_t v3 = result;
      if (result) {
        break;
      }
      unint64_t v5 = (v5 + *(unsigned __int16 *)(v5 + 8) + 13) & 0xFFFFFFFFFFFFFFFCLL;
      ++v4;
    }
    while (v4 < *v2);
  }
  return result;
}

void __destroy_helper_block_ea8_40c85_ZTSNSt3__110shared_ptrIN4MIDI19LegacyMIDIConverterINS1_22MIDI_1_to_2_TranslatorEEEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t __copy_helper_block_ea8_40c85_ZTSNSt3__110shared_ptrIN4MIDI19LegacyMIDIConverterINS1_22MIDI_1_to_2_TranslatorEEEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t MIDI::LegacyMIDIConverter<MIDI::MIDI_1_to_2_Translator>::convertLegacyDataToEventList(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  v72[6] = *MEMORY[0x1E4F143B8];
  v62[0] = a2;
  v62[1] = a3;
  v62[2] = a4;
  v62[3] = 0;
  uint64_t v71 = *a5;
  (*(void (**)(void))(v71 + 8))();
  int v6 = MIDIEventListInit(&evtlist, kMIDIProtocol_2_0);
  uint64_t v61 = a1 + 4;
  MIDITimeStamp time = 0;
  memset(v63, 0, sizeof(v63));
  while ((MIDI::LegacyPacketList::PacketReader::read(v62, &time, v63) & 1) != 0)
  {
    unint64_t v7 = v63[0];
    if (v63[0] >> 28 == 2)
    {
      *(void *)int v66 = 0;
      uint64_t v67 = 0;
      int v8 = BYTE2(v63[0]);
      int v9 = *((unsigned __int8 *)a1 + 32);
      int v10 = BYTE2(v63[0]) >> 4;
      if (!*((unsigned char *)a1 + 32))
      {
        int v32 = *a1;
        if ((*a1 & 0xFF0000) != 0)
        {
          if (((v32 ^ v63[0]) & 0xF0000) != 0)
          {
            int v9 = 1;
            *((unsigned char *)a1 + 32) = 1;
          }
          else
          {
            if (v10 == 11)
            {
              int v44 = BYTE1(v32);
              switch(v44)
              {
                case 'b':
                  int v45 = v63[0] & 0xFF00;
                  int v46 = 25344;
                  goto LABEL_105;
                case 'c':
                  int v45 = v63[0] & 0xFF00;
                  int v46 = 25088;
                  goto LABEL_105;
                case 'd':
                  int v45 = v63[0] & 0xFF00;
                  int v46 = 25856;
                  goto LABEL_105;
                case 'e':
                  int v45 = v63[0] & 0xFF00;
                  int v46 = 25600;
LABEL_105:
                  if (v45 != v46 && (v63[0] & 0xF0DF00) != 0xB00600) {
                    break;
                  }
                  goto LABEL_109;
                default:
                  if (v44 == 32)
                  {
                    if ((v63[0] & 0xFF00) != 0) {
                      break;
                    }
LABEL_109:
                    int v9 = 0;
                    _OWORD *v61 = *(_OWORD *)v63;
                    goto LABEL_5;
                  }
                  if (!v44 && (v63[0] & 0xFF00) == 0x2000) {
                    goto LABEL_109;
                  }
                  break;
              }
LABEL_107:
              int v9 = 1;
              goto LABEL_5;
            }
            int v9 = (v32 & 0xDF00) != 0 || v10 != 12;
          }
        }
        else
        {
          int v9 = 1;
          if (v10 == 11 && (v63[0] & 0xF00000) == 0xB00000)
          {
            if (BYTE1(v63[0]) - 98 >= 4 && BYTE1(v63[0]) != 32 && BYTE1(v63[0])) {
              goto LABEL_107;
            }
            int v9 = 0;
            *(_OWORD *)a1 = *(_OWORD *)v63;
          }
        }
      }
LABEL_5:
      uint64_t v11 = BYTE3(v7) & 0xF;
      unsigned int v12 = BYTE3(v7) & 0xF | 0x40;
      int v13 = *a1;
      int v14 = BYTE2(*a1);
      if (BYTE2(*a1) && v9)
      {
        *((unsigned char *)a1 + 32) = 1;
        uint64_t v69 = 0;
        words[0] = v13 & 0xFF00 | (v14 << 16) & 0x80FFFFFF | ((BYTE3(v7) & 0xF | 0x40) << 24);
        UInt32 v15 = v13 << 25;
        if (v13 >= 0x41u)
        {
          unsigned int v16 = (v13 & 0x3F) << 19;
          if (v16)
          {
            do
            {
              v15 |= v16;
              BOOL v17 = v16 > 0x3F;
              v16 >>= 6;
            }
            while (v17);
          }
        }
        words[1] = v15;
        int v6 = MIDIEventListAdd(&evtlist, 0x114uLL, v6, time, 2uLL, words);
        if (!v6)
        {
          p_MIDIEventList evtlist = &evtlist;
          (*(void (**)(void *, MIDIEventList **))v71)(v72, &p_evtlist);
          memset(&evtlist, 0, sizeof(evtlist));
          uint64_t v18 = MIDIEventListInit(&evtlist, kMIDIProtocol_2_0);
          int v6 = MIDIEventListAdd(&evtlist, 0x114uLL, v18, time, MIDI::UniversalPacket::word_sizes[(unint64_t)words[0] >> 28], words);
        }
        *a1 = 0;
        uint64_t v69 = 0;
        int v19 = a1[4];
        if (BYTE2(v19))
        {
          LOWORD(words[0]) = v19 & 0xFF00;
          BYTE2(words[0]) = BYTE2(v19);
          HIBYTE(words[0]) = BYTE3(v7) & 0xF | 0x40;
          unsigned int v20 = v19;
          UInt32 v21 = v19 << 25;
          if (v20 >= 0x41)
          {
            unsigned int v22 = (v20 & 0x3F) << 19;
            if (v22)
            {
              do
              {
                v21 |= v22;
                BOOL v17 = v22 > 0x3F;
                v22 >>= 6;
              }
              while (v17);
            }
          }
          words[1] = v21;
          MIDITimeStamp v23 = time;
          int v6 = MIDIEventListAdd(&evtlist, 0x114uLL, v6, time, 2uLL, words);
          if (!v6)
          {
            p_MIDIEventList evtlist = &evtlist;
            (*(void (**)(void *, MIDIEventList **))v71)(v72, &p_evtlist);
            memset(&evtlist, 0, sizeof(evtlist));
            uint64_t v24 = MIDIEventListInit(&evtlist, kMIDIProtocol_2_0);
            int v6 = MIDIEventListAdd(&evtlist, 0x114uLL, v24, v23, MIDI::UniversalPacket::word_sizes[(unint64_t)words[0] >> 28], words);
          }
          *(_DWORD *)uint64_t v61 = 0;
        }
        *(void *)((char *)&a1[32 * v11 + 8 + 2 * ((v7 >> 16) & 0xF)] + 1) = 0;
      }
      unsigned int v25 = (v7 >> 8) & 0x7F;
      unsigned int v26 = v7 & 0x7F;
      switch(v10)
      {
        case 8:
          goto LABEL_23;
        case 9:
          if ((v7 & 0x7F) == 0)
          {
            int v8 = BYTE2(v7) - 16;
            unsigned int v26 = 64;
          }
LABEL_23:
          UInt32 v27 = (v12 << 24) | (v8 << 16) | (v25 << 8);
          v66[0] = v27;
          unsigned int v28 = v26 << 9;
          if (v26 >= 0x41)
          {
            unsigned int v29 = 8 * (v26 & 0x3F);
            if (v29)
            {
              do
              {
                v28 |= v29;
                BOOL v17 = v29 > 0x3F;
                v29 >>= 6;
              }
              while (v17);
            }
          }
          UInt32 v30 = v28 << 16;
          goto LABEL_99;
        case 10:
          UInt32 v27 = (BYTE2(v7) << 16) | (v12 << 24) | (v25 << 8);
          v66[0] = v27;
          UInt32 v30 = v7 << 25;
          if (v26 >= 0x41)
          {
            unsigned int v33 = (v7 & 0x3F) << 19;
            if (v33)
            {
              do
              {
                v30 |= v33;
                BOOL v17 = v33 > 0x3F;
                v33 >>= 6;
              }
              while (v17);
            }
          }
          goto LABEL_99;
        case 11:
          uint64_t v34 = (uint64_t)&a1[32 * v11 + 8] + 1;
          uint64_t v35 = (v7 >> 16) & 0xF;
          if (((v7 >> 8) & 0x7F) > 0x25)
          {
            switch(v25)
            {
              case 'b':
                uint64_t v47 = v34 + 8 * v35;
                *(unsigned char *)(v47 + 1) = 2;
                goto LABEL_92;
              case 'c':
                uint64_t v57 = v34 + 8 * v35;
                *(unsigned char *)(v57 + 1) = 2;
                goto LABEL_94;
              case 'd':
                uint64_t v47 = v34 + 8 * v35;
                *(unsigned char *)(v47 + 1) = 1;
LABEL_92:
                *(unsigned char *)(v47 + 5) = v26;
                break;
              case 'e':
                uint64_t v57 = v34 + 8 * v35;
                *(unsigned char *)(v57 + 1) = 1;
LABEL_94:
                *(unsigned char *)(v57 + 4) = v26;
                break;
              default:
                if (v25 != 38) {
                  goto LABEL_96;
                }
                char v49 = v7 & 0x7F;
                int v50 = v7 & 0x7F;
                goto LABEL_81;
            }
LABEL_95:
            if (!*((unsigned char *)a1 + 32)) {
              continue;
            }
            goto LABEL_96;
          }
          if (!v25)
          {
            *(unsigned char *)(v34 + 8 * v35 + 2) = v26;
LABEL_77:
            *(unsigned char *)(v34 + 8 * v35) = 1;
            goto LABEL_95;
          }
          if (v25 != 6)
          {
            if (v25 == 32)
            {
              *(unsigned char *)(v34 + 8 * v35 + 3) = v26;
              goto LABEL_77;
            }
LABEL_96:
            UInt32 v27 = (BYTE2(v7) << 16) | (v12 << 24) | (v25 << 8);
            v66[0] = v27;
            UInt32 v30 = v7 << 25;
            if (v26 >= 0x41)
            {
              unsigned int v58 = (v7 & 0x3F) << 19;
              if (v58)
              {
                do
                {
                  v30 |= v58;
                  BOOL v17 = v58 > 0x3F;
                  v58 >>= 6;
                }
                while (v17);
              }
            }
LABEL_99:
            v66[1] = v30;
            goto LABEL_100;
          }
          char v49 = 0;
          int v50 = 0;
          *(unsigned char *)(v34 + 8 * v35 + 6) = v26;
LABEL_81:
          uint64_t v51 = v34 + 8 * v35;
          *(unsigned char *)(v51 + 7) = v49;
          if (*((unsigned char *)a1 + 32) || !*(unsigned char *)(v51 + 1)) {
            goto LABEL_96;
          }
          if (*(unsigned char *)(v51 + 1) == 1) {
            int v52 = 32;
          }
          else {
            int v52 = 48;
          }
          uint64_t v53 = (unsigned __int8 *)(v34 + 8 * v35);
          UInt32 v27 = (v12 << 24) | ((v52 | v35) << 16) | (v53[4] << 8) | v53[5];
          v66[0] = v27;
          unsigned int v54 = v50 | (v53[6] << 7);
          UInt32 v55 = v54 << 18;
          if (v54 > 0x2000)
          {
            for (unsigned int i = 32 * (v54 & 0x1FFF); i; i >>= 13)
              v55 |= i;
          }
          v66[1] = v55;
LABEL_49:
          *(_OWORD *)a1 = 0u;
          *((_OWORD *)a1 + 1) = 0u;
LABEL_100:
          int v6 = MIDIEventListAdd(&evtlist, 0x114uLL, v6, time, MIDI::UniversalPacket::word_sizes[(unint64_t)v27 >> 28], v66);
          if (!v6)
          {
            *(void *)words = &evtlist;
            (*(void (**)(void *, UInt32 *))v71)(v72, words);
            memset(&evtlist, 0, sizeof(evtlist));
            uint64_t v59 = MIDIEventListInit(&evtlist, kMIDIProtocol_2_0);
            int v6 = MIDIEventListAdd(&evtlist, 0x114uLL, v59, time, MIDI::UniversalPacket::word_sizes[(unint64_t)v66[0] >> 28], v66);
          }
          break;
        case 12:
          uint64_t v36 = (uint64_t)&a1[32 * v11 + 8] + 1;
          int v37 = *(unsigned __int8 *)(v36 + 8 * (WORD1(v7) & 0xF));
          if (*(unsigned char *)(v36 + 8 * (WORD1(v7) & 0xF))) {
            int v37 = *((unsigned __int8 *)a1 + 32) ^ 1;
          }
          UInt32 v27 = (v12 << 24) | (BYTE2(v7) << 16) | v37;
          uint64_t v38 = v36 + 8 * (WORD1(v7) & 0xF);
          int v39 = (v25 << 24) | (*(unsigned __int8 *)(v38 + 2) << 8) | *(unsigned __int8 *)(v38 + 3);
          v66[0] = v27;
          v66[1] = v39;
          *(void *)uint64_t v38 = 0;
          goto LABEL_49;
        case 13:
          UInt32 v27 = (v12 << 24) | (BYTE2(v7) << 16);
          v66[0] = v27;
          unsigned int v40 = v7 >> 8 << 25;
          if (v25 >= 0x41)
          {
            unsigned int v41 = ((v7 >> 8) & 0x3F) << 19;
            if (v41)
            {
              do
              {
                v40 |= v41;
                BOOL v17 = v41 > 0x3F;
                v41 >>= 6;
              }
              while (v17);
            }
          }
          v66[1] = v40;
          goto LABEL_100;
        case 14:
          UInt32 v27 = (v12 << 24) | (BYTE2(v7) << 16);
          v66[0] = v27;
          unsigned int v42 = v25 | (v26 << 7);
          UInt32 v30 = v42 << 18;
          if (v42 > 0x2000)
          {
            for (unsigned int j = 32 * (v42 & 0x1FFF); j; j >>= 13)
              v30 |= j;
          }
          goto LABEL_99;
        default:
          UInt32 v27 = v66[0];
          goto LABEL_100;
      }
    }
    else
    {
      int v6 = MIDIEventListAdd(&evtlist, 0x114uLL, v6, time, MIDI::UniversalPacket::word_sizes[(unint64_t)v63[0] >> 28], v63);
      if (!v6)
      {
        *(void *)words = &evtlist;
        (*(void (**)(void *, UInt32 *))v71)(v72, words);
        memset(&evtlist, 0, sizeof(evtlist));
        unsigned int v31 = MIDIEventListInit(&evtlist, kMIDIProtocol_2_0);
        int v6 = MIDIEventListAdd(&evtlist, 0x114uLL, v31, time, MIDI::UniversalPacket::word_sizes[(unint64_t)v63[0] >> 28], v63);
      }
    }
  }
  if (evtlist.numPackets)
  {
    *(void *)words = &evtlist;
    (*(void (**)(void *, UInt32 *))v71)(v72, words);
  }
  return (*(uint64_t (**)(void *))(v71 + 24))(v72);
}

void sub_19008837C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t MIDI::LegacyPacketList::PacketReader::read(uint64_t *a1, void *a2, _DWORD *a3)
{
  unint64_t v3 = a1[1];
  unint64_t v4 = a1[3];
  if (v4 >= v3) {
    return 0;
  }
  uint64_t v5 = *a1;
  unsigned int v6 = *(unsigned __int8 *)(*a1 + v4);
  if (*(char *)(*a1 + v4) < -16)
  {
LABEL_3:
    uint64_t v7 = 2;
    if ((v6 & 0xE0) != 0xC0) {
      uint64_t v7 = 3;
    }
    unint64_t v8 = v7 + v4;
    BOOL v9 = v7 + v4 > v3;
    BOOL v10 = v7 + v4 <= v3;
    if (!v9)
    {
      uint64_t v11 = v4 + v5;
      int v12 = *(unsigned char *)(v4 + v5 + 1) & 0x7F;
      if ((v6 & 0xE0) == 0xC0) {
        int v13 = 0;
      }
      else {
        int v13 = *(unsigned char *)(v11 + 2) & 0x7F;
      }
      *a3 = v13 | (v6 << 16) | (v12 << 8) | 0x20000000;
      *a2 = a1[2];
      unint64_t v3 = v8;
    }
    goto LABEL_19;
  }
LABEL_8:
  if (v6 < 0xF1)
  {
    if (v6 == 240) {
      int v18 = 1;
    }
    else {
      int v18 = 2;
    }
    if (v6 == 240) {
      a1[3] = ++v4;
    }
    unint64_t v19 = 0;
    int v20 = 0;
    int v21 = 0;
    while (1)
    {
      int v22 = (v4 < v3) | v20;
      if (v4 < v3 && (v20 & 1) == 0)
      {
        int v23 = *(char *)(v5 + v4);
        if ((v23 & 0x80000000) == 0)
        {
          if (v19 > 5)
          {
            int v22 = 0;
            goto LABEL_42;
          }
          int v22 = 0;
          a1[3] = ++v4;
          ++v21;
          goto LABEL_40;
        }
        if (v23 == -9) {
          a1[3] = ++v4;
        }
        if (v18 == 1) {
          int v18 = 0;
        }
        else {
          int v18 = 3;
        }
        int v22 = 1;
      }
      if (v19 <= 5)
      {
        LOBYTE(v23) = 0;
LABEL_40:
        v29[v19] = v23;
      }
LABEL_42:
      ++v19;
      int v20 = v22;
      if (v19 == 7)
      {
        unsigned int v24 = bswap32(v30);
        *a3 = (v18 << 20) | (v21 << 16) | (v29[0] << 8) | v29[1] | 0x30000000;
        a3[1] = v24;
        *a2 = a1[2];
        return 1;
      }
    }
  }
  if (v6 == 247)
  {
    *(void *)a3 = 808452096;
    *a2 = a1[2];
    unint64_t v25 = v4 + 1;
    goto LABEL_53;
  }
  uint64_t v14 = v6 - 240;
  if ((0x22B1uLL >> (v6 + 16)))
  {
    unint64_t v15 = v4;
    while (1)
    {
      unint64_t v4 = v15 + 1;
      a1[3] = v15 + 1;
      if (v15 + 1 >= v3) {
        return 0;
      }
      int v16 = *(char *)(v5 + 1 + v15++);
      if (v16 < 0)
      {
        unsigned int v6 = v16;
        if ((char)v16 > -17) {
          goto LABEL_8;
        }
        goto LABEL_3;
      }
    }
  }
  unint64_t v25 = v4 + MIDI::system_message_size::sizes[v14];
  if (v25 > v3)
  {
    BOOL v10 = 0;
LABEL_19:
    a1[3] = v3;
    return v10;
  }
  if ((unint64_t)(v14 - 1) > 2)
  {
    int v27 = 0;
    goto LABEL_51;
  }
  uint64_t v26 = v4 + v5;
  int v27 = *(unsigned char *)(v4 + v5 + 1) & 0x7F;
  if ((v14 & 0xFFFFFFFD) == 1)
  {
LABEL_51:
    int v28 = 0;
    goto LABEL_52;
  }
  int v28 = *(unsigned char *)(v26 + 2) & 0x7F;
LABEL_52:
  *a3 = (v6 << 16) | (v27 << 8) | v28 | 0x10000000;
  *a2 = a1[2];
LABEL_53:
  a1[3] = v25;
  return 1;
}

void _ZZN5caulk23inplace_function_detail6vtableIvJPKN4MIDI9EventListEEEC1IZZ34__AUAudioUnit_setupMIDIConversion_EUb4_E3__6EENS0_7wrapperIT_EEENUlPvE_8__invokeESC_(id *a1)
{
}

void _ZZN5caulk23inplace_function_detail6vtableIvJPKN4MIDI9EventListEEEC1IZZ34__AUAudioUnit_setupMIDIConversion_EUb4_E3__6EENS0_7wrapperIT_EEENUlPvSC_E0_8__invokeESC_SC_(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = _Block_copy(*(const void **)a2);
  uint64_t v4 = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void **)a2;
}

__n128 _ZZN5caulk23inplace_function_detail6vtableIvJPKN4MIDI9EventListEEEC1IZZ34__AUAudioUnit_setupMIDIConversion_EUb4_E3__6EENS0_7wrapperIT_EEENUlPvSC_E_8__invokeESC_SC_(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = _Block_copy(*(const void **)a2);
  uint64_t v4 = *(void *)(a2 + 24);
  __n128 result = *(__n128 *)(a2 + 8);
  *(__n128 *)(a1 + 8) = result;
  *(void *)(a1 + 24) = v4;
  return result;
}

uint64_t (***_ZZN5caulk23inplace_function_detail6vtableIvJPKN4MIDI9EventListEEEC1IZZ34__AUAudioUnit_setupMIDIConversion_EUb4_E3__6EENS0_7wrapperIT_EEENUlPvOS5_E_8__invokeESC_SD_(uint64_t (***result)(void)))(void)
{
  if (!*(_DWORD *)result[3])
  {
    uint64_t v1 = result;
    __n128 result = (uint64_t (***)(void))(*result)[2]();
    *(_DWORD *)v1[3] = result;
  }
  return result;
}

void std::__shared_ptr_emplace<MIDI::LegacyMIDIConverter<MIDI::MIDI_1_to_2_Translator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2930;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

void std::__shared_ptr_emplace<MIDI::LegacyMIDIConverter<MIDI::MIDI_1_to_2_Translator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2930;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void __destroy_helper_block_ea8_40c81_ZTSNSt3__110shared_ptrIN4MIDI19LegacyMIDIConverterINS1_18IdentityTranslatorEEEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t __copy_helper_block_ea8_40c81_ZTSNSt3__110shared_ptrIN4MIDI19LegacyMIDIConverterINS1_18IdentityTranslatorEEEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t MIDI::LegacyMIDIConverter<MIDI::IdentityTranslator>::convertLegacyDataToEventList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  v14[6] = *MEMORY[0x1E4F143B8];
  v7[0] = a1;
  v7[1] = a2;
  v7[2] = a3;
  v7[3] = 0;
  uint64_t v13 = *a4;
  (*(void (**)(void *, uint64_t *))(v13 + 8))(v14, a4 + 1);
  uint64_t v4 = MIDIEventListInit(&evtlist, kMIDIProtocol_1_0);
  uint64_t v9 = 0;
  MIDITimeStamp time = 0;
  *(void *)words = 0;
  while (MIDI::LegacyPacketList::PacketReader::read(v7, &time, words))
  {
    uint64_t v4 = MIDIEventListAdd(&evtlist, 0x114uLL, v4, time, MIDI::UniversalPacket::word_sizes[(unint64_t)words[0] >> 28], words);
    if (!v4)
    {
      p_MIDIEventList evtlist = &evtlist;
      (*(void (**)(void *, MIDIEventList **))v13)(v14, &p_evtlist);
      memset(&evtlist, 0, sizeof(evtlist));
      uint64_t v5 = MIDIEventListInit(&evtlist, kMIDIProtocol_1_0);
      uint64_t v4 = MIDIEventListAdd(&evtlist, 0x114uLL, v5, time, MIDI::UniversalPacket::word_sizes[(unint64_t)words[0] >> 28], words);
    }
  }
  if (evtlist.numPackets)
  {
    p_MIDIEventList evtlist = &evtlist;
    (*(void (**)(void *, MIDIEventList **))v13)(v14, &p_evtlist);
  }
  return (*(uint64_t (**)(void *))(v13 + 24))(v14);
}

void sub_1900889A0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void _ZZN5caulk23inplace_function_detail6vtableIvJPKN4MIDI9EventListEEEC1IZZ34__AUAudioUnit_setupMIDIConversion_EUb3_E3__5EENS0_7wrapperIT_EEENUlPvE_8__invokeESC_(id *a1)
{
}

void _ZZN5caulk23inplace_function_detail6vtableIvJPKN4MIDI9EventListEEEC1IZZ34__AUAudioUnit_setupMIDIConversion_EUb3_E3__5EENS0_7wrapperIT_EEENUlPvSC_E0_8__invokeESC_SC_(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = _Block_copy(*(const void **)a2);
  uint64_t v4 = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void **)a2;
}

__n128 _ZZN5caulk23inplace_function_detail6vtableIvJPKN4MIDI9EventListEEEC1IZZ34__AUAudioUnit_setupMIDIConversion_EUb3_E3__5EENS0_7wrapperIT_EEENUlPvSC_E_8__invokeESC_SC_(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = _Block_copy(*(const void **)a2);
  uint64_t v4 = *(void *)(a2 + 24);
  __n128 result = *(__n128 *)(a2 + 8);
  *(__n128 *)(a1 + 8) = result;
  *(void *)(a1 + 24) = v4;
  return result;
}

uint64_t (***_ZZN5caulk23inplace_function_detail6vtableIvJPKN4MIDI9EventListEEEC1IZZ34__AUAudioUnit_setupMIDIConversion_EUb3_E3__5EENS0_7wrapperIT_EEENUlPvOS5_E_8__invokeESC_SD_(uint64_t (***result)(void)))(void)
{
  if (!*(_DWORD *)result[3])
  {
    uint64_t v1 = result;
    __n128 result = (uint64_t (***)(void))(*result)[2]();
    *(_DWORD *)v1[3] = result;
  }
  return result;
}

void std::__shared_ptr_emplace<MIDI::LegacyMIDIConverter<MIDI::IdentityTranslator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA28F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

void std::__shared_ptr_emplace<MIDI::LegacyMIDIConverter<MIDI::IdentityTranslator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA28F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_190088EAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19008904C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  MEMORY[0x192FC7960](va);
  _Unwind_Resume(a1);
}

void sub_1900891A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    caulk::pooled_semaphore_mutex::_unlock(*(caulk::pooled_semaphore_mutex **)a1);
  }
  return a1;
}

void sub_19008942C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t caulk::concurrent::guarded_lookup_hash_table<void *,int,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(void *)>>::table_impl::findSlotForKey(uint64_t *a1, uint64_t a2)
{
  int v3 = *((_DWORD *)a1 + 2);
  uint64_t v4 = *a1;
  uint64_t v17 = a2;
  uint64_t v5 = *(void *)(v4 + 24);
  if (!v5) {
    goto LABEL_24;
  }
  uint64_t v7 = (*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)v5 + 48))(v5, &v17) % *((_DWORD *)a1 + 2);
  if ((int)v7 >= 3) {
    int v8 = 0;
  }
  else {
    int v8 = v3;
  }
  uint64_t v9 = (v7 + v8 - 3);
  uint64_t v10 = 0xFFFFFFFFLL;
  uint64_t v11 = 1;
  uint64_t v12 = v7;
  while (1)
  {
    uint64_t v13 = v9;
    unint64_t v14 = atomic_load((unint64_t *)&a1[v12 + 2]);
    if (v14 != -1) {
      break;
    }
    if ((int)v10 >= 0) {
      uint64_t v10 = v10;
    }
    else {
      uint64_t v10 = v12;
    }
LABEL_13:
    if ((int)v9 >= 3) {
      int v15 = 0;
    }
    else {
      int v15 = v3;
    }
    uint64_t v9 = (v9 + v15 - 3);
    uint64_t v12 = v13;
    if (v13 == v7)
    {
      if ((v10 & 0x80000000) == 0)
      {
        uint64_t v11 = 0;
        uint64_t v12 = v10;
        return v11 | (v12 << 32);
      }
      __break(1u);
LABEL_24:
      std::__throw_bad_function_call[abi:ne180100]();
    }
  }
  if (v14)
  {
    if (*(void *)(v14 + 8) == a2) {
      return v11 | (v12 << 32);
    }
    goto LABEL_13;
  }
  uint64_t v11 = 0;
  if ((int)v10 >= 0) {
    uint64_t v12 = v10;
  }
  else {
    uint64_t v12 = v12;
  }
  return v11 | (v12 << 32);
}

void std::this_thread::sleep_for[abi:ne180100]<long long,std::ratio<1l,1000000l>>(uint64_t a1)
{
  if (a1 >= 1)
  {
    uint64_t v7 = v1;
    uint64_t v8 = v2;
    if ((double)a1 == 9.22337204e15) {
      int v3 = 0;
    }
    else {
      int v3 = -127;
    }
    if ((double)a1 > 9.22337204e15) {
      int v3 = 1;
    }
    if ((double)a1 < 9.22337204e15) {
      int v3 = -1;
    }
    BOOL v4 = v3 >= 0 || v3 == -127;
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v5 = 1000 * a1;
    if (v4) {
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v5 = 0x7FFFFFFFFFFFFFFFLL;
    }
    __ns.__rep_ = v5;
    std::this_thread::sleep_for (&__ns);
  }
}

void std::unique_lock<std::mutex>::lock(std::unique_lock<std::mutex> *this)
{
  uint64_t m = this->__m_;
  if (m)
  {
    if (!this->__owns_)
    {
      std::mutex::lock(m);
      this->__owns_ = 1;
      return;
    }
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::lock: references null mutex");
  }
  std::__throw_system_error(11, "unique_lock::lock: already locked");
  caulk::concurrent::guarded_lookup_hash_table<void *,int,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(void *)>>::element_t::release();
}

unsigned int *caulk::concurrent::guarded_lookup_hash_table<void *,int,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(void *)>>::element_t::release(unsigned int *result)
{
  if ((atomic_fetch_add((atomic_uint *volatile)result, 0xFFFF0000) & 0xFFFF0000) == 0x10000)
  {
    if (atomic_load(result))
    {
      _os_assert_log();
      _os_crash();
      __break(1u);
    }
    else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
    {
      __break(0xC471u);
    }
    JUMPOUT(0x192FC8940);
  }
  return result;
}

_DWORD *caulk::concurrent::guarded_lookup_hash_table<void *,int,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(void *)>>::rehash(unint64_t *a1, unsigned int a2)
{
  BOOL v4 = a1 + 5;
  unint64_t v5 = atomic_load(a1 + 5);
  unsigned int v6 = operator new(8 * (a2 - 1) + 24);
  *(void *)unsigned int v6 = a1;
  v6[2] = a2;
  *((void *)v6 + 2) = 0;
  bzero(v6 + 4, 8 * a2);
  if (v5)
  {
    uint64_t v7 = *(unsigned int *)(v5 + 8);
    if (v7)
    {
      uint64_t v8 = (unint64_t *)(v5 + 16);
      do
      {
        unint64_t v9 = *v8;
        if (*v8 + 1 >= 2)
        {
          unint64_t SlotForKey = caulk::concurrent::guarded_lookup_hash_table<void *,int,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(void *)>>::table_impl::findSlotForKey((uint64_t *)v6, *(void *)(v9 + 8));
          if ((SlotForKey & 1) == 0)
          {
            atomic_fetch_add((atomic_uint *volatile)v9, 0x10000u);
            atomic_store(v9, (unint64_t *)&v6[2 * HIDWORD(SlotForKey) + 4]);
          }
        }
        ++v8;
        --v7;
      }
      while (v7);
    }
    atomic_store((unint64_t)v6, a1 + 5);
    uint64_t v12 = (unint64_t *)a1[8];
    unint64_t v11 = a1[9];
    if ((unint64_t)v12 >= v11)
    {
      unint64_t v14 = (void *)a1[7];
      uint64_t v15 = v12 - v14;
      unint64_t v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 61) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v17 = v11 - (void)v14;
      if (v17 >> 2 > v16) {
        unint64_t v16 = v17 >> 2;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18)
      {
        if (v18 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v19 = (char *)operator new(8 * v18);
      }
      else
      {
        unint64_t v19 = 0;
      }
      int v20 = (unint64_t *)&v19[8 * v15];
      *int v20 = v5;
      uint64_t v13 = v20 + 1;
      while (v12 != v14)
      {
        unint64_t v21 = *--v12;
        unint64_t *v12 = 0;
        *--int v20 = v21;
      }
      long long v22 = *(_OWORD *)(a1 + 7);
      a1[7] = (unint64_t)v20;
      a1[8] = (unint64_t)v13;
      a1[9] = (unint64_t)&v19[8 * v18];
      int v23 = (uint64_t *)*((void *)&v22 + 1);
      unsigned int v24 = (uint64_t *)v22;
      while (v23 != v24)
        std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<void *,int,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(void *)>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<void *,int,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(void *)>>::table_impl>>::reset[abi:ne180100](--v23);
      if (v24) {
        operator delete(v24);
      }
    }
    else
    {
      unint64_t *v12 = v5;
      uint64_t v13 = v12 + 1;
    }
    a1[8] = (unint64_t)v13;
  }
  else
  {
    atomic_store((unint64_t)v6, v4);
  }
  return v6;
}

uint64_t caulk::concurrent::guarded_lookup_hash_table<void *,int,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(void *)>>::emptyReleasePool(uint64_t result)
{
  int v1 = atomic_load((unsigned int *)(result + 48));
  if (v1 <= 0)
  {
    uint64_t v2 = result;
    BOOL v4 = *(uint64_t **)(result + 56);
    for (unsigned int i = *(uint64_t **)(result + 64);
          i != v4;
          __n128 result = std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<void *,int,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(void *)>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<void *,int,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(void *)>>::table_impl>>::reset[abi:ne180100](i))
    {
      --i;
    }
    *(void *)(v2 + 64) = v4;
  }
  return result;
}

uint64_t std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<void *,int,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(void *)>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<void *,int,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(void *)>>::table_impl>>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    caulk::concurrent::guarded_lookup_hash_table<void *,int,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(void *)>>::table_impl::~table_impl(result);
    JUMPOUT(0x192FC8940);
  }
  return result;
}

uint64_t caulk::concurrent::guarded_lookup_hash_table<void *,int,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(void *)>>::table_impl::~table_impl(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2)
  {
    int v3 = (unsigned int **)(a1 + 16);
    do
    {
      if ((unint64_t)*v3 + 1 >= 2) {
        caulk::concurrent::guarded_lookup_hash_table<void *,int,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(void *)>>::element_t::release(*v3);
      }
      ++v3;
      --v2;
    }
    while (v2);
  }
  return a1;
}

void sub_190089BD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_190089C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void *RenderObserver::RenderObserver(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  *a1 = a2;
  a1[1] = 0;
  a1[2] = a4;
  a1[3] = a5;
  id v6 = a3;
  uint64_t v7 = [v6 copy];
  uint64_t v8 = (void *)a1[1];
  a1[1] = v7;

  return a1;
}

void sub_190089CEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t TThreadSafeList<RenderObserver>::deferred_remove(uint64_t a1, uint64_t a2)
{
  BOOL v4 = TThreadSafeList<RenderObserver>::AllocNode(a1);
  *((_DWORD *)v4 + 2) = 1;
  uint64_t result = RenderObserver::operator=((uint64_t)(v4 + 2), a2);
  do
  {
    unint64_t v6 = *(void *)(a1 + 8);
    *BOOL v4 = v6;
    unint64_t v7 = v6;
    atomic_compare_exchange_strong((atomic_ullong *volatile)(a1 + 8), &v7, (unint64_t)v4);
  }
  while (v7 != v6);
  return result;
}

unint64_t *TThreadSafeList<RenderObserver>::AllocNode(uint64_t a1)
{
  do
  {
    uint64_t result = *(unint64_t **)(a1 + 16);
    if (!result) {
      operator new();
    }
    int v3 = *(unint64_t **)(a1 + 16);
    atomic_compare_exchange_strong((atomic_ullong *volatile)(a1 + 16), (unint64_t *)&v3, 0);
  }
  while (v3 != result);
  unint64_t v4 = *result;
  if (*result)
  {
    unint64_t v5 = (void *)*result;
    do
    {
      unint64_t v6 = v5;
      unint64_t v5 = (void *)*v5;
    }
    while (v5);
    do
    {
      uint64_t v7 = *(void *)(a1 + 16);
      void *v6 = v7;
      uint64_t v8 = v7;
      atomic_compare_exchange_strong((atomic_ullong *volatile)(a1 + 16), (unint64_t *)&v8, v4);
    }
    while (v8 != v7);
  }
  return result;
}

uint64_t RenderObserver::operator=(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = 0;

  unint64_t v5 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = [v5 copy];
  uint64_t v7 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v6;

  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

void sub_190089EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t TThreadSafeList<RenderObserver>::deferred_add(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = TThreadSafeList<RenderObserver>::AllocNode(a1);
  *((_DWORD *)v4 + 2) = 0;
  uint64_t result = RenderObserver::operator=((uint64_t)(v4 + 2), a2);
  do
  {
    unint64_t v6 = *(void *)(a1 + 8);
    *unint64_t v4 = v6;
    unint64_t v7 = v6;
    atomic_compare_exchange_strong((atomic_ullong *volatile)(a1 + 8), &v7, (unint64_t)v4);
  }
  while (v7 != v6);
  return result;
}

void sub_190089F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_19008A03C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_19008A32C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void __destroy_helper_block_ea8_32c55_ZTSNSt3__110shared_ptrIN4MIDI20DynamicMIDIConverterEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t __copy_helper_block_ea8_32c55_ZTSNSt3__110shared_ptrIN4MIDI20DynamicMIDIConverterEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *AUEventSchedule::midiEventList(AUEventSchedule *this, uint64_t a2, char a3, MIDIEventList *a4)
{
  if (!a4) {
    __assert_rtn("midiEventList", "AUEventSchedule.h", 797, "eventList != nullptr");
  }
  if ((unint64_t)MIDI::EventList::size((MIDI::EventList *)a4) >= 0x115) {
    __assert_rtn("midiEventList", "AUEventSchedule.h", 800, "srcEvl->size() <= sizeof(MIDIEventList)");
  }
  uint64_t v8 = XAtomicPoolAllocator::alloc((XAtomicPoolAllocator *)((char *)this->mAllocator + 224));
  void *v8 = 0;
  v8[1] = a2;
  *((_WORD *)v8 + 8) = 10;
  *((unsigned char *)v8 + 18) = a3;
  size_t v9 = MIDI::EventList::size((MIDI::EventList *)a4);
  uint64_t result = memcpy((char *)v8 + 20, a4, v9);
  a_value = this->mAddedEventQueue.mEnqueueHead.__a_.__a_value;
  atomic_store((unint64_t)a_value, v8);
  unint64_t v12 = (unint64_t)a_value;
  atomic_compare_exchange_strong((atomic_ullong *volatile)&this->mAddedEventQueue, &v12, (unint64_t)v8);
  if ((AURenderEventNode *)v12 != a_value)
  {
    unint64_t v13 = v12;
    do
    {
      atomic_store(v12, v8);
      atomic_compare_exchange_strong((atomic_ullong *volatile)&this->mAddedEventQueue, &v13, (unint64_t)v8);
      BOOL v14 = v13 == v12;
      unint64_t v12 = v13;
    }
    while (!v14);
  }
  return result;
}

MIDIEventPacket *_ZZN4MIDI27readUMPToSegmentedEventListINS_22MIDI_1_to_2_TranslatorENS_9EventList12PacketReaderEZZ41__AUAudioUnit_scheduleMIDIEventListBlock_EUb2_E3__4EEv14MIDIProtocolIDRT_RT0_T1_ENKUlRKNS_15UniversalPacketEE_clESD_(uint64_t a1, UInt32 *words)
{
  uint64_t result = MIDIEventListAdd(*(MIDIEventList **)(a1 + 8), 0x114uLL, **(MIDIEventPacket ***)a1, **(void **)(a1 + 16), MIDI::UniversalPacket::word_sizes[(unint64_t)*words >> 28], words);
  **(void **)a1 = result;
  if (!**(void **)a1)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    unint64_t v6 = *(unsigned int **)(a1 + 8);
    uint64_t v7 = MIDI::EventList::size((MIDI::EventList *)v6);
    if (v6[1])
    {
      unsigned int v8 = 0;
      size_t v9 = v6 + 2;
      uint64_t v10 = (unsigned int *)((char *)v6 + v7 + 8);
      do
      {
        if (v9 > v10) {
          **(_DWORD **)(v5 + 24) = -50;
        }
        v12.protocol = *v6;
        v12.numPackets = 1;
        memcpy(v12.packet, v9, sizeof(v12.packet));
        AUEventSchedule::midiEventList((AUEventSchedule *)(*(void *)v5 + 48), *(void *)(v5 + 8), *(unsigned char *)(v5 + 16), &v12);
        v9 += v9[2] + 3;
        ++v8;
      }
      while (v8 < v6[1]);
    }
    uint64_t v11 = *(void *)(a1 + 8);
    *(_DWORD *)(v11 + 272) = 0;
    *(_OWORD *)(v11 + 240) = 0u;
    *(_OWORD *)(v11 + 256) = 0u;
    *(_OWORD *)(v11 + 208) = 0u;
    *(_OWORD *)(v11 + 224) = 0u;
    *(_OWORD *)(v11 + 176) = 0u;
    *(_OWORD *)(v11 + 192) = 0u;
    *(_OWORD *)(v11 + 144) = 0u;
    *(_OWORD *)(v11 + 160) = 0u;
    *(_OWORD *)(v11 + 112) = 0u;
    *(_OWORD *)(v11 + 128) = 0u;
    *(_OWORD *)(v11 + 80) = 0u;
    *(_OWORD *)(v11 + 96) = 0u;
    *(_OWORD *)(v11 + 48) = 0u;
    *(_OWORD *)(v11 + 64) = 0u;
    *(_OWORD *)(v11 + 16) = 0u;
    *(_OWORD *)(v11 + 32) = 0u;
    *(_OWORD *)uint64_t v11 = 0u;
    **(void **)a1 = MIDIEventListInit(*(MIDIEventList **)(a1 + 8), (MIDIProtocolID)**(_DWORD **)(a1 + 32));
    uint64_t result = MIDIEventListAdd(*(MIDIEventList **)(a1 + 8), 0x114uLL, **(MIDIEventPacket ***)a1, **(void **)(a1 + 16), MIDI::UniversalPacket::word_sizes[(unint64_t)*words >> 28], words);
    **(void **)a1 = result;
  }
  return result;
}

__n128 _ZZN5caulk23inplace_function_detail6vtableIvJPKN4MIDI16LegacyPacketListEEEC1IZZ41__AUAudioUnit_scheduleMIDIEventListBlock_EUb1_E3__3EENS0_7wrapperIT_EEENUlPvSC_E0_8__invokeESC_SC_(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

__n128 _ZZN5caulk23inplace_function_detail6vtableIvJPKN4MIDI16LegacyPacketListEEEC1IZZ41__AUAudioUnit_scheduleMIDIEventListBlock_EUb1_E3__3EENS0_7wrapperIT_EEENUlPvSC_E_8__invokeESC_SC_(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

AUEventSchedule *_ZZN5caulk23inplace_function_detail6vtableIvJPKN4MIDI16LegacyPacketListEEEC1IZZ41__AUAudioUnit_scheduleMIDIEventListBlock_EUb1_E3__3EENS0_7wrapperIT_EEENUlPvOS5_E_8__invokeESC_SD_(AUEventSchedule *result, unsigned int **a2)
{
  uint64_t v2 = *a2;
  if (**a2)
  {
    int v3 = result;
    unsigned int v4 = 0;
    unint64_t v5 = (unint64_t)(v2 + 1);
    do
    {
      __n128 result = AUEventSchedule::midiEvents((AUEventSchedule *)&v3->mAUv2GetParameterSynchronizer[6], (uint64_t)v3->mAllocator, (char)v3->mScheduledParameterRefresher, *(unsigned __int16 *)(v5 + 8), (AUEventSchedule *)(v5 + 10));
      unint64_t v5 = (v5 + 10 + *(unsigned __int16 *)(v5 + 8) + 3) & 0xFFFFFFFFFFFFFFFCLL;
      ++v4;
    }
    while (v4 < *v2);
  }
  return result;
}

AUEventSchedule *AUEventSchedule::midiEvents(AUEventSchedule *this, uint64_t a2, char a3, int64_t a4, AUEventSchedule *a5)
{
  if (a4 >= 1)
  {
    unint64_t v5 = a5;
    size_t v9 = this;
    uint64_t v10 = (const unsigned __int8 *)a5 + a4;
    while (1)
    {
      mAllocator = v9->mAllocator;
      if (LOBYTE(v5->mAUv2GetParameterSynchronizer) == 240) {
        break;
      }
      MIDIEventList v12 = XAtomicPoolAllocator::alloc((XAtomicPoolAllocator *)((char *)mAllocator + 112));
      void *v12 = 0;
      v12[1] = a2;
      *((_WORD *)v12 + 8) = 8;
      this = (AUEventSchedule *)NextMIDIEvent((const unsigned __int8 *)v5, v10);
      *((_WORD *)v12 + 9) = (_WORD)this - (_WORD)v5;
      *((unsigned char *)v12 + 20) = a3;
      *((unsigned char *)v12 + 21) = v5->mAUv2GetParameterSynchronizer;
      *((unsigned char *)v12 + 22) = BYTE1(v5->mAUv2GetParameterSynchronizer);
      if ((unint64_t)((char *)this - (char *)v5) < 3) {
        char v13 = -1;
      }
      else {
        char v13 = BYTE2(v5->mAUv2GetParameterSynchronizer);
      }
      *((unsigned char *)v12 + 23) = v13;
      unint64_t a_value = (unint64_t)v9->mAddedEventQueue.mEnqueueHead.__a_.__a_value;
      atomic_store(a_value, v12);
      unint64_t v15 = a_value;
      atomic_compare_exchange_strong((atomic_ullong *volatile)&v9->mAddedEventQueue, &v15, (unint64_t)v12);
      if (v15 != a_value)
      {
        unint64_t v16 = v15;
        do
        {
          atomic_store(v15, v12);
          atomic_compare_exchange_strong((atomic_ullong *volatile)&v9->mAddedEventQueue, &v16, (unint64_t)v12);
          BOOL v17 = v16 == v15;
          unint64_t v15 = v16;
        }
        while (!v17);
      }
      unint64_t v5 = this;
      if (this >= (AUEventSchedule *)v10) {
        return this;
      }
    }
    unint64_t v18 = AURenderEventAllocator::allocMIDISysEx(mAllocator, a4);
    *(void *)unint64_t v18 = 0;
    *((void *)v18 + 1) = a2;
    *((_WORD *)v18 + 8) = 9;
    *((_WORD *)v18 + 9) = a4;
    v18[20] = a3;
    this = (AUEventSchedule *)memcpy(v18 + 21, v5, a4);
    unint64_t v19 = (unint64_t)v9->mAddedEventQueue.mEnqueueHead.__a_.__a_value;
    atomic_store(v19, (unint64_t *)v18);
    unint64_t v20 = v19;
    atomic_compare_exchange_strong((atomic_ullong *volatile)&v9->mAddedEventQueue, &v20, (unint64_t)v18);
    if (v20 != v19)
    {
      unint64_t v21 = v20;
      do
      {
        atomic_store(v20, (unint64_t *)v18);
        atomic_compare_exchange_strong((atomic_ullong *volatile)&v9->mAddedEventQueue, &v21, (unint64_t)v18);
        BOOL v17 = v21 == v20;
        unint64_t v20 = v21;
      }
      while (!v17);
    }
  }
  return this;
}

unsigned char *AURenderEventAllocator::allocMIDISysEx(AURenderEventAllocator *this, unint64_t a2)
{
  if (a2 < 0x1C) {
    __n128 result = XAtomicPoolAllocator::alloc((XAtomicPoolAllocator *)this);
  }
  else {
    __n128 result = malloc_type_malloc(a2 + 21, 0xA75504D1uLL);
  }
  result[17] = 0;
  return result;
}

void sub_19008BB9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_19008BC78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void __destroy_helper_block_ea8_32c85_ZTSNSt3__110shared_ptrIN4MIDI19LegacyMIDIConverterINS1_22MIDI_1_to_2_TranslatorEEEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t __copy_helper_block_ea8_32c85_ZTSNSt3__110shared_ptrIN4MIDI19LegacyMIDIConverterINS1_22MIDI_1_to_2_TranslatorEEEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

__n128 _ZZN5caulk23inplace_function_detail6vtableIvJPKN4MIDI9EventListEEEC1IZZ37__AUAudioUnit_scheduleMIDIEventBlock_EUb0_E3__2EENS0_7wrapperIT_EEENUlPvSC_E0_8__invokeESC_SC_(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

__n128 _ZZN5caulk23inplace_function_detail6vtableIvJPKN4MIDI9EventListEEEC1IZZ37__AUAudioUnit_scheduleMIDIEventBlock_EUb0_E3__2EENS0_7wrapperIT_EEENUlPvSC_E_8__invokeESC_SC_(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void *_ZZN5caulk23inplace_function_detail6vtableIvJPKN4MIDI9EventListEEEC1IZZ37__AUAudioUnit_scheduleMIDIEventBlock_EUb0_E3__2EENS0_7wrapperIT_EEENUlPvOS5_E_8__invokeESC_SD_(uint64_t a1, MIDIEventList **a2)
{
  return AUEventSchedule::midiEventList((AUEventSchedule *)(*(void *)a1 + 48), *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), *a2);
}

void __destroy_helper_block_ea8_32c81_ZTSNSt3__110shared_ptrIN4MIDI19LegacyMIDIConverterINS1_18IdentityTranslatorEEEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t __copy_helper_block_ea8_32c81_ZTSNSt3__110shared_ptrIN4MIDI19LegacyMIDIConverterINS1_18IdentityTranslatorEEEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

__n128 _ZZN5caulk23inplace_function_detail6vtableIvJPKN4MIDI9EventListEEEC1IZZ37__AUAudioUnit_scheduleMIDIEventBlock_EUb_E3__1EENS0_7wrapperIT_EEENUlPvSC_E0_8__invokeESC_SC_(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

__n128 _ZZN5caulk23inplace_function_detail6vtableIvJPKN4MIDI9EventListEEEC1IZZ37__AUAudioUnit_scheduleMIDIEventBlock_EUb_E3__1EENS0_7wrapperIT_EEENUlPvSC_E_8__invokeESC_SC_(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void *_ZZN5caulk23inplace_function_detail6vtableIvJPKN4MIDI9EventListEEEC1IZZ37__AUAudioUnit_scheduleMIDIEventBlock_EUb_E3__1EENS0_7wrapperIT_EEENUlPvOS5_E_8__invokeESC_SD_(uint64_t a1, MIDIEventList **a2)
{
  return AUEventSchedule::midiEventList((AUEventSchedule *)(*(void *)a1 + 48), *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), *a2);
}

void sub_19008BEE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUScheduledParameterRefresher2::armParameterWatchdog(ParameterWatchdogQueueElem const&)::{lambda(void)#1}>::perform(uint64_t a1)
{
  uint64_t v2 = (caulk::concurrent::message *)a1;
  ParameterWatchdog::schedule(*(void *)(a1 + 24) + 432, (_OWORD *)(a1 + 32));
  return caulk::concurrent::details::rt_message_call<AUScheduledParameterRefresher2::armParameterWatchdog(ParameterWatchdogQueueElem const&)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(&v2);
}

void sub_19008C0BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  caulk::concurrent::details::rt_message_call<AUScheduledParameterRefresher2::armParameterWatchdog(ParameterWatchdogQueueElem const&)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup((caulk::concurrent::message **)va);
  _Unwind_Resume(a1);
}

void ParameterWatchdog::schedule(uint64_t a1, _OWORD *a2)
{
  unsigned int v4 = (os_unfair_lock_s *)(a1 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  unint64_t v5 = *(_OWORD **)(a1 + 24);
  unint64_t v6 = *(void *)(a1 + 32);
  if ((unint64_t)v5 >= v6)
  {
    uint64_t v9 = *(void *)(a1 + 16);
    uint64_t v10 = ((uint64_t)v5 - v9) >> 5;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 59) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v6 - v9;
    if (v12 >> 4 > v11) {
      unint64_t v11 = v12 >> 4;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13) {
      unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<KVOAggregator::Record>>(v13);
    }
    else {
      uint64_t v14 = 0;
    }
    unint64_t v15 = (_OWORD *)(v13 + 32 * v10);
    unint64_t v16 = v13 + 32 * v14;
    long long v17 = a2[1];
    _OWORD *v15 = *a2;
    v15[1] = v17;
    uint64_t v8 = (uint64_t)(v15 + 2);
    unint64_t v19 = *(char **)(a1 + 16);
    unint64_t v18 = *(char **)(a1 + 24);
    if (v18 != v19)
    {
      do
      {
        long long v20 = *((_OWORD *)v18 - 1);
        *(v15 - 2) = *((_OWORD *)v18 - 2);
        *(v15 - 1) = v20;
        v15 -= 2;
        v18 -= 32;
      }
      while (v18 != v19);
      unint64_t v18 = *(char **)(a1 + 16);
    }
    *(void *)(a1 + 16) = v15;
    *(void *)(a1 + 24) = v8;
    *(void *)(a1 + 32) = v16;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    long long v7 = a2[1];
    _OWORD *v5 = *a2;
    v5[1] = v7;
    uint64_t v8 = (uint64_t)(v5 + 2);
  }
  *(void *)(a1 + 24) = v8;
  std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<ParameterWatchdogQueueElem> &,std::__wrap_iter<ParameterWatchdogQueueElem*>>(*(void *)(a1 + 16), v8, (v8 - *(void *)(a1 + 16)) >> 5);
  ParameterWatchdog::evaluate((ParameterWatchdog *)a1);
  os_unfair_lock_unlock(v4);
}

void sub_19008C1F4(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUScheduledParameterRefresher2::armParameterWatchdog(ParameterWatchdogQueueElem const&)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  uint64_t v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], v2, 72, 8);
  return a1;
}

__n128 std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<ParameterWatchdogQueueElem> &,std::__wrap_iter<ParameterWatchdogQueueElem*>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = a3 - 2;
  if (a3 >= 2)
  {
    unint64_t v4 = v3 >> 1;
    unint64_t v5 = *(void *)(a1 + 32 * (v3 >> 1) + 24);
    unint64_t v6 = *(void *)(a2 - 8);
    if (v5 > v6)
    {
      uint64_t v7 = a2 - 32;
      __n128 v11 = *(__n128 *)(a2 - 32);
      uint64_t v12 = *(void *)(a2 - 16);
      do
      {
        uint64_t v8 = (_OWORD *)v7;
        uint64_t v7 = a1 + 32 * v4;
        long long v9 = *(_OWORD *)(v7 + 16);
        _OWORD *v8 = *(_OWORD *)v7;
        v8[1] = v9;
        if (!v4) {
          break;
        }
        unint64_t v4 = (v4 - 1) >> 1;
      }
      while (*(void *)(a1 + 32 * v4 + 24) > v6);
      __n128 result = v11;
      *(__n128 *)uint64_t v7 = v11;
      *(void *)(v7 + 16) = v12;
      *(void *)(v7 + 24) = v6;
    }
  }
  return result;
}

void ParameterWatchdog::evaluate(ParameterWatchdog *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (v1 == *((void *)this + 3)) {
    return;
  }
  while (1)
  {
    unint64_t v3 = *(void *)(v1 + 24);
    uint64_t v4 = mach_absolute_time();
    unint64_t v5 = *((void *)this + 6) + v4;
    if (v3 > v5) {
      break;
    }
    uint64_t v6 = *(void *)this;
    uint64_t v7 = *(void *)v1;
    uint64_t v8 = (atomic_uint *)(*(void *)this + 336);
    atomic_fetch_add(v8, 1u);
    long long v9 = (uint64_t *)atomic_load((unint64_t *)(v6 + 328));
    if (!v9
      || (caulk::concurrent::guarded_lookup_hash_table<void *,int,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(void *)>>::table_impl::findSlotForKey(v9, v7), !v10))
    {
      atomic_fetch_add(v8, 0xFFFFFFFF);
LABEL_15:
      unsigned int v31 = (_OWORD *)*((void *)this + 2);
      uint64_t v32 = *((void *)this + 3);
      uint64_t v33 = v32 - (void)v31;
      if (v32 - (uint64_t)v31 > 32)
      {
        uint64_t v34 = 0;
        uint64_t v35 = v33 >> 5;
        long long v36 = v31[1];
        *(_OWORD *)&v65.mAddedEventQueue.mEnqueueHead.__a_.__unint64_t a_value = *v31;
        *(_OWORD *)&v65.mAddedEventQueue.mDequeueHead.padding[8] = v36;
        int64_t v37 = (unint64_t)((v33 >> 5) - 2) >> 1;
        uint64_t v38 = v31;
        do
        {
          int v39 = &v38[2 * v34 + 2];
          uint64_t v40 = (2 * v34) | 1;
          uint64_t v41 = 2 * v34 + 2;
          if (v41 < v35)
          {
            unint64_t v42 = *((void *)v39 + 3);
            unint64_t v43 = *((void *)v39 + 7);
            v39 += 2 * (v42 > v43);
            if (v42 > v43) {
              uint64_t v40 = v41;
            }
          }
          long long v44 = v39[1];
          *uint64_t v38 = *v39;
          v38[1] = v44;
          uint64_t v38 = v39;
          uint64_t v34 = v40;
        }
        while (v40 <= v37);
        int v45 = (_OWORD *)(v32 - 32);
        if (v39 == v45)
        {
          long long v48 = *(_OWORD *)&v65.mAddedEventQueue.mDequeueHead.padding[8];
          *int v39 = *(_OWORD *)&v65.mAddedEventQueue.mEnqueueHead.__a_.__a_value;
          v39[1] = v48;
        }
        else
        {
          long long v46 = v45[1];
          *int v39 = *v45;
          v39[1] = v46;
          long long v47 = *(_OWORD *)&v65.mAddedEventQueue.mDequeueHead.padding[8];
          *int v45 = *(_OWORD *)&v65.mAddedEventQueue.mEnqueueHead.__a_.__a_value;
          v45[1] = v47;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<ParameterWatchdogQueueElem> &,std::__wrap_iter<ParameterWatchdogQueueElem*>>((uint64_t)v31, (uint64_t)(v39 + 2), ((char *)(v39 + 2) - (char *)v31) >> 5);
        }
        uint64_t v32 = *((void *)this + 3);
      }
      uint64_t v49 = v32 - 32;
      *((void *)this + 3) = v49;
      goto LABEL_45;
    }
    __n128 v11 = v10;
    atomic_fetch_add(v10, 1u);
    atomic_fetch_add((atomic_uint *volatile)(v6 + 336), 0xFFFFFFFF);
    AUEventSchedule::parameterWatchdogFired(&v65, *(void *)(v1 + 8), *(AUEventSchedule **)(v1 + 16), v5);
    atomic_fetch_add(v11, 0xFFFFFFFF);
    if (!LOBYTE(v65.mScheduledParameterRefresher)) {
      goto LABEL_15;
    }
    uint64_t v13 = *(void *)v1;
    uint64_t v12 = *(void *)(v1 + 8);
    uint64_t v14 = (_OWORD *)*((void *)this + 2);
    uint64_t v15 = *((void *)this + 3);
    uint64_t v16 = v15 - (void)v14;
    if (v15 - (uint64_t)v14 >= 33)
    {
      uint64_t v17 = 0;
      uint64_t v18 = v16 >> 5;
      long long v19 = v14[1];
      *(_OWORD *)&v65.mAddedEventQueue.mEnqueueHead.__a_.__unint64_t a_value = *v14;
      *(_OWORD *)&v65.mAddedEventQueue.mDequeueHead.padding[8] = v19;
      int64_t v20 = (unint64_t)((v16 >> 5) - 2) >> 1;
      unint64_t v21 = v14;
      do
      {
        long long v22 = &v21[2 * v17 + 2];
        uint64_t v23 = (2 * v17) | 1;
        uint64_t v24 = 2 * v17 + 2;
        if (v24 < v18)
        {
          unint64_t v25 = *((void *)v22 + 3);
          unint64_t v26 = *((void *)v22 + 7);
          v22 += 2 * (v25 > v26);
          if (v25 > v26) {
            uint64_t v23 = v24;
          }
        }
        long long v27 = v22[1];
        *unint64_t v21 = *v22;
        v21[1] = v27;
        unint64_t v21 = v22;
        uint64_t v17 = v23;
      }
      while (v23 <= v20);
      int v28 = (_OWORD *)(v15 - 32);
      if (v22 == (_OWORD *)(v15 - 32))
      {
        long long v50 = *(_OWORD *)&v65.mAddedEventQueue.mDequeueHead.padding[8];
        *long long v22 = *(_OWORD *)&v65.mAddedEventQueue.mEnqueueHead.__a_.__a_value;
        v22[1] = v50;
      }
      else
      {
        long long v29 = *(_OWORD *)(v15 - 16);
        *long long v22 = *v28;
        v22[1] = v29;
        long long v30 = *(_OWORD *)&v65.mAddedEventQueue.mDequeueHead.padding[8];
        *int v28 = *(_OWORD *)&v65.mAddedEventQueue.mEnqueueHead.__a_.__a_value;
        *(_OWORD *)(v15 - 16) = v30;
        std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<ParameterWatchdogQueueElem> &,std::__wrap_iter<ParameterWatchdogQueueElem*>>((uint64_t)v14, (uint64_t)(v22 + 2), ((char *)(v22 + 2) - (char *)v14) >> 5);
      }
      uint64_t v15 = *((void *)this + 3);
    }
    *((void *)this + 3) = v15 - 32;
    unint64_t v51 = *((void *)this + 4);
    if (v15 - 32 >= v51)
    {
      uint64_t v52 = *((void *)this + 2);
      uint64_t v53 = (v15 - 32 - v52) >> 5;
      unint64_t v54 = v53 + 1;
      if ((unint64_t)(v53 + 1) >> 59) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v55 = v51 - v52;
      if (v55 >> 4 > v54) {
        unint64_t v54 = v55 >> 4;
      }
      if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v56 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v56 = v54;
      }
      if (v56) {
        unint64_t v56 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<KVOAggregator::Record>>(v56);
      }
      else {
        uint64_t v57 = 0;
      }
      unint64_t v58 = v56 + 32 * v53;
      *(void *)unint64_t v58 = v13;
      *(void *)(v58 + 8) = v12;
      *(_OWORD *)(v58 + 16) = *(_OWORD *)&v65.mAUv2GetParameterSynchronizer;
      uint64_t v60 = (char *)*((void *)this + 2);
      uint64_t v59 = (char *)*((void *)this + 3);
      unint64_t v61 = v58;
      if (v59 != v60)
      {
        do
        {
          long long v62 = *((_OWORD *)v59 - 1);
          *(_OWORD *)(v61 - 32) = *((_OWORD *)v59 - 2);
          *(_OWORD *)(v61 - 16) = v62;
          v61 -= 32;
          v59 -= 32;
        }
        while (v59 != v60);
        uint64_t v59 = (char *)*((void *)this + 2);
      }
      uint64_t v15 = v58 + 32;
      *((void *)this + 2) = v61;
      *((void *)this + 3) = v58 + 32;
      *((void *)this + 4) = v56 + 32 * v57;
      if (v59) {
        operator delete(v59);
      }
    }
    else
    {
      *(void *)(v15 - 32) = v13;
      *(void *)(v15 - 24) = v12;
      *(_OWORD *)(v15 - 16) = *(_OWORD *)&v65.mAUv2GetParameterSynchronizer;
    }
    *((void *)this + 3) = v15;
    std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<ParameterWatchdogQueueElem> &,std::__wrap_iter<ParameterWatchdogQueueElem*>>(*((void *)this + 2), v15, (v15 - *((void *)this + 2)) >> 5);
    uint64_t v49 = *((void *)this + 3);
LABEL_45:
    uint64_t v1 = *((void *)this + 2);
    if (v1 == v49) {
      return;
    }
  }
  double v63 = (double)(uint64_t)(v3 - v4) * 0.0000000416666667;
  float32x4_t v64 = (CAEventReceiver::Impl *)*((void *)this + 8);
  CAEventReceiver::Impl::timerShouldFireWithin(v64, v63);
}

void sub_19008C6B0(_Unwind_Exception *a1)
{
  atomic_fetch_add(v1, 0xFFFFFFFF);
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::rt_message_call<AUScheduledParameterRefresher2::armParameterWatchdog(ParameterWatchdogQueueElem const&)::{lambda(void)#1}>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x192FC8940);
}

void sub_19008C8DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19008CA48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19008CC3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

RenderObserverList *RenderObserverList::callAll(RenderObserverList *this, unsigned int *a2, const AudioTimeStamp *a3, uint64_t a4, uint64_t a5, AudioBufferList *a6)
{
  if (!this->mTouched) {
    return this;
  }
  if ((*(unsigned char *)a2 & 4) == 0) {
    goto LABEL_42;
  }
  do
  {
    mHead = this->mObservers.mPendingList.mHead;
    if (!mHead) {
      goto LABEL_42;
    }
    uint64_t v12 = this->mObservers.mPendingList.mHead;
    atomic_compare_exchange_strong((atomic_ullong *volatile)&this->mObservers.mPendingList, (unint64_t *)&v12, 0);
  }
  while (v12 != mHead);
  unint64_t v13 = 0;
  do
  {
    uint64_t v14 = (void *)v13;
    unint64_t v13 = (unint64_t)mHead;
    mHead = *(Node **)mHead;
    *(void *)unint64_t v13 = v14;
  }
  while (mHead);
  while (1)
  {
    uint64_t v15 = v14;
    int v16 = *(_DWORD *)(v13 + 8);
    if (!v16)
    {
      int v28 = this->mObservers.mActiveList.mHead;
      long long v29 = this;
      if (!this->mObservers.mActiveList.mHead)
      {
LABEL_38:
        v29->mObservers.mActiveList.mHead = (Node *)v13;
        *(void *)unint64_t v13 = 0;
        goto LABEL_41;
      }
      while (1)
      {
        long long v29 = (RenderObserverList *)v28;
        long long v30 = (Node *)*((void *)v28 + 2);
        if (v30) {
          break;
        }
        if (v29[1].mObservers.mActiveList.mHead == *(Node **)(v13 + 32))
        {
          long long v30 = v29[1].mObservers.mPendingList.mHead;
          unsigned int v31 = *(Node **)(v13 + 40);
LABEL_30:
          if (v30 == v31)
          {
            do
            {
              uint64_t v32 = this->mObservers.mFreeList.mHead;
              *(void *)unint64_t v13 = v32;
              uint64_t v33 = v32;
              atomic_compare_exchange_strong((atomic_ullong *volatile)&this->mObservers.mFreeList, (unint64_t *)&v33, v13);
            }
            while (v33 != v32);
            goto LABEL_41;
          }
        }
        int v28 = v29->mObservers.mActiveList.mHead;
        if (!v29->mObservers.mActiveList.mHead) {
          goto LABEL_38;
        }
      }
      unsigned int v31 = *(Node **)(v13 + 16);
      goto LABEL_30;
    }
    if (v16 == 2)
    {
      long long v22 = this->mObservers.mActiveList.mHead;
      if (this->mObservers.mActiveList.mHead)
      {
        do
        {
          uint64_t v23 = *(Node **)v22;
          do
          {
            uint64_t v24 = this->mObservers.mFreeList.mHead;
            *(void *)long long v22 = v24;
            unint64_t v25 = v24;
            atomic_compare_exchange_strong((atomic_ullong *volatile)&this->mObservers.mFreeList, (unint64_t *)&v25, (unint64_t)v22);
          }
          while (v25 != v24);
          long long v22 = v23;
        }
        while (v23);
      }
      do
      {
        unint64_t v26 = this->mObservers.mFreeList.mHead;
        *(void *)unint64_t v13 = v26;
        long long v27 = v26;
        atomic_compare_exchange_strong((atomic_ullong *volatile)&this->mObservers.mFreeList, (unint64_t *)&v27, v13);
      }
      while (v27 != v26);
      goto LABEL_41;
    }
    if (v16 != 1) {
      goto LABEL_41;
    }
    uint64_t v17 = this->mObservers.mActiveList.mHead;
    uint64_t v18 = this;
    if (!this->mObservers.mActiveList.mHead) {
      goto LABEL_40;
    }
    while (1)
    {
      long long v19 = v18;
      uint64_t v18 = (RenderObserverList *)v17;
      int64_t v20 = (Node *)*((void *)v17 + 2);
      if (v20)
      {
        unint64_t v21 = *(Node **)(v13 + 16);
      }
      else
      {
        if (v18[1].mObservers.mActiveList.mHead != *(Node **)(v13 + 32)) {
          goto LABEL_18;
        }
        int64_t v20 = v18[1].mObservers.mPendingList.mHead;
        unint64_t v21 = *(Node **)(v13 + 40);
      }
      if (v20 == v21) {
        break;
      }
LABEL_18:
      uint64_t v17 = v18->mObservers.mActiveList.mHead;
      if (!v18->mObservers.mActiveList.mHead) {
        goto LABEL_40;
      }
    }
    v19->mObservers.mActiveList.mHead = v18->mObservers.mActiveList.mHead;
    do
    {
      uint64_t v34 = this->mObservers.mFreeList.mHead;
      v18->mObservers.mActiveList.mHead = v34;
      uint64_t v35 = v34;
      atomic_compare_exchange_strong((atomic_ullong *volatile)&this->mObservers.mFreeList, (unint64_t *)&v35, (unint64_t)v18);
    }
    while (v35 != v34);
    do
    {
LABEL_40:
      long long v36 = this->mObservers.mFreeList.mHead;
      *(void *)unint64_t v13 = v36;
      int64_t v37 = v36;
      atomic_compare_exchange_strong((atomic_ullong *volatile)&this->mObservers.mFreeList, (unint64_t *)&v37, v13);
    }
    while (v37 != v36);
LABEL_41:
    if (!v15) {
      break;
    }
    uint64_t v14 = (void *)*v15;
    unint64_t v13 = (unint64_t)v15;
  }
LABEL_42:
  for (unsigned int i = this->mObservers.mActiveList.mHead; i; unsigned int i = *(Node **)i)
  {
    int v39 = (uint64_t (*)(void, unsigned int *, const AudioTimeStamp *, void, uint64_t, AudioBufferList *))*((void *)i + 4);
    if (v39)
    {
      this = (RenderObserverList *)v39(*((void *)i + 5), a2, a3, 0, a4, a6);
    }
    else
    {
      this = (RenderObserverList *)*((void *)i + 3);
      if (this) {
        this = (RenderObserverList *)((uint64_t (*)(RenderObserverList *, void, const AudioTimeStamp *, uint64_t, uint64_t))this->mObservers.mFreeList.mHead)(this, *a2, a3, a4, a5);
      }
    }
  }
  return this;
}

void AUEventSchedule::dispatchV2SetParamEvents(AUEventSchedule *this, AURenderEvent *a2, int a3)
{
  unint64_t v3 = a2;
  if (a3)
  {
    AUEventSchedule::deliverDeferredV2ParameterUpdates(this, a2);
    if (v3)
    {
      do
      {
        next = v3->head.next;
        if (!v3->head.reserved) {
          AURenderEventAllocator::dealloc(this->mAllocator, v3);
        }
        unint64_t v3 = next;
      }
      while (next);
    }
  }
  else
  {
    unint64_t v6 = 0;
    if (a2)
    {
      long long v28 = 0uLL;
      while (1)
      {
        uint64_t v7 = v3->head.next;
        uint64_t v8 = *((void *)&v28 + 1);
        if (*((void *)&v28 + 1) >= v6)
        {
          uint64_t v12 = (caulk::rt_safe_memory_resource *)v28;
          unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v28 + 1) - v28) >> 4) + 1;
          if (v13 > 0x555555555555555) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v28) >> 4);
          if (0x5555555555555556 * ((uint64_t)(v6 - v28) >> 4) > v13) {
            unint64_t v13 = 0x5555555555555556 * ((uint64_t)(v6 - v28) >> 4);
          }
          if (v14 >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v15 = 0x555555555555555;
          }
          else {
            unint64_t v15 = v13;
          }
          if (v15)
          {
            if (v15 > 0x555555555555555 || !*MEMORY[0x1E4FB7E88])
            {
              __break(1u);
              return;
            }
            uint64_t v16 = caulk::rt_safe_memory_resource::rt_allocate((caulk::rt_safe_memory_resource *)*MEMORY[0x1E4FB7E88]);
          }
          else
          {
            uint64_t v16 = 0;
          }
          uint64_t v17 = (_OWORD *)(v16 + 16 * ((uint64_t)(*((void *)&v28 + 1) - v28) >> 4));
          long long v18 = *(_OWORD *)&v3->head.next;
          long long v19 = *(_OWORD *)((char *)&v3->MIDIEventsList.eventList.packet[0].timeStamp + 4);
          v17[1] = *(_OWORD *)&v3->MIDIEventsList.eventType;
          void v17[2] = v19;
          *uint64_t v17 = v18;
          if (*((void *)&v28 + 1) == (void)v28)
          {
            uint64_t v23 = v16 + 16 * ((uint64_t)(*((void *)&v28 + 1) - v28) >> 4);
          }
          else
          {
            uint64_t v20 = v16 + 16 * ((uint64_t)(*((void *)&v28 + 1) - v28) >> 4);
            do
            {
              long long v21 = *(_OWORD *)(v8 - 48);
              long long v22 = *(_OWORD *)(v8 - 16);
              uint64_t v23 = v20 - 48;
              *(_OWORD *)(v20 - 32) = *(_OWORD *)(v8 - 32);
              *(_OWORD *)(v20 - 16) = v22;
              *(_OWORD *)(v20 - 48) = v21;
              v8 -= 48;
              v20 -= 48;
            }
            while (v8 != (void)v28);
          }
          uint64_t v11 = (uint64_t)(v17 + 3);
          unint64_t v6 = v16 + 48 * v15;
          *(void *)&long long v28 = v23;
          if (v12) {
            std::allocator_traits<caulk::rt_allocator<AUExtendedParameterEvent>>::deallocate[abi:ne180100](v12, v14);
          }
        }
        else
        {
          long long v9 = *(_OWORD *)&v3->head.next;
          long long v10 = *(_OWORD *)((char *)&v3->MIDIEventsList.eventList.packet[0].timeStamp + 4);
          *(_OWORD *)(*((void *)&v28 + 1) + 16) = *(_OWORD *)&v3->MIDIEventsList.eventType;
          *(_OWORD *)(*((void *)&v28 + 1) + 32) = v10;
          **((_OWORD **)&v28 + 1) = v9;
          uint64_t v11 = *((void *)&v28 + 1) + 48;
        }
        *(void *)&long long v24 = v28;
        *((void *)&v24 + 1) = v11;
        long long v28 = v24;
        *(void *)(v11 - 40) = 0;
        if (!v3->head.reserved) {
          AURenderEventAllocator::dealloc(this->mAllocator, v3);
        }
        unint64_t v3 = v7;
        if (!v7) {
          goto LABEL_34;
        }
      }
    }
    long long v28 = 0uLL;
LABEL_34:
    mScheduledParameterRefresher = this->mScheduledParameterRefresher;
    mAUv2GetParameterSynchronizer = this[1].mAUv2GetParameterSynchronizer;
    uint64_t v27 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 80, 8);
    *(_DWORD *)(v27 + 16) = 0;
    *(void *)(v27 + 24) = mScheduledParameterRefresher;
    *(void *)(v27 + 32) = mAUv2GetParameterSynchronizer;
    *(void *)(v27 + 40) = this;
    *(_OWORD *)(v27 + 48) = v28;
    *(void *)(v27 + 64) = v6;
    *(void *)uint64_t v27 = &unk_1EDF962F0;
    *(void *)(v27 + 8) = 0;
    caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)((char *)mScheduledParameterRefresher + 128), (caulk::concurrent::message *)v27);
  }
}

void sub_19008D178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9)
{
  if ((void)a9) {
    std::allocator_traits<caulk::rt_allocator<AUExtendedParameterEvent>>::deallocate[abi:ne180100]((caulk::rt_safe_memory_resource *)a9, 0xAAAAAAAAAAAAAAABLL * ((v9 - (uint64_t)a9) >> 4));
  }
  _Unwind_Resume(exception_object);
}

void *AUEventSchedule::deliverDeferredV2ParameterUpdates(AUEventSchedule *this, AURenderEvent *a2)
{
  __n128 result = (void *)[this[1].mAUv2GetParameterSynchronizer deliverV2Parameters:a2];
  if (a2)
  {
    AUParameterAddress v5 = 0;
    next = a2;
    do
    {
      if (next == a2)
      {
        AUParameterAddress parameterAddress = a2->parameter.parameterAddress;
      }
      else
      {
        AUParameterAddress parameterAddress = next->parameter.parameterAddress;
        if (parameterAddress == v5) {
          goto LABEL_8;
        }
      }
      __n128 result = AUScheduledParameterRefresher::deferInvalidateParameter((AUScheduledParameterRefresher *)this->mScheduledParameterRefresher, (unint64_t)this[1].mAUv2GetParameterSynchronizer, parameterAddress);
      AUParameterAddress v5 = parameterAddress;
LABEL_8:
      wordunsigned int Count = next->MIDIEventsList.eventList.packet[0].wordCount;
      if (wordCount) {
        __n128 result = AUv2GetParameterSynchronizer::setLatestV2SetParameterSequenceNumber(this->mAUv2GetParameterSynchronizer, wordCount);
      }
      next = next->head.next;
    }
    while (next);
  }
  return result;
}

caulk::rt_safe_memory_resource *std::allocator_traits<caulk::rt_allocator<AUExtendedParameterEvent>>::deallocate[abi:ne180100](caulk::rt_safe_memory_resource *result, unint64_t a2)
{
  if (a2 < 0x555555555555556)
  {
    uint64_t v2 = result;
    __n128 result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E4FB7E88];
    if (*MEMORY[0x1E4FB7E88]) {
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, v2);
    }
  }
  __break(1u);
  return result;
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUScheduledParameterRefresher2::deferV2ParameterUpdates(void *,AUEventSchedule *,caulk::rt_vector<AUExtendedParameterEvent> &&)::{lambda(void)#1}>::perform(caulk::concurrent::message *a1)
{
  uint64_t v2 = a1;
  caulk::concurrent::details::message_call<AUScheduledParameterRefresher2::deferV2ParameterUpdates(void *,AUEventSchedule *,caulk::rt_vector<AUExtendedParameterEvent> &&)::{lambda(void)#1}>::perform((uint64_t)a1);
  return caulk::concurrent::details::rt_message_call<AUScheduledParameterRefresher2::deferV2ParameterUpdates(void *,AUEventSchedule *,caulk::rt_vector<AUExtendedParameterEvent> &&)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(&v2);
}

void sub_19008D304(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  caulk::concurrent::details::rt_message_call<AUScheduledParameterRefresher2::deferV2ParameterUpdates(void *,AUEventSchedule *,caulk::rt_vector<AUExtendedParameterEvent> &&)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup((caulk::concurrent::message **)va);
  _Unwind_Resume(a1);
}

uint64_t *caulk::concurrent::details::message_call<AUScheduledParameterRefresher2::deferV2ParameterUpdates(void *,AUEventSchedule *,caulk::rt_vector<AUExtendedParameterEvent> &&)::{lambda(void)#1}>::perform(uint64_t a1)
{
  if (*(void *)(a1 + 48) == *(void *)(a1 + 56)) {
    std::terminate();
  }
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = *(AUEventSchedule **)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 24);
  AUParameterAddress v5 = (atomic_uint *)(v4 + 336);
  atomic_fetch_add((atomic_uint *volatile)(v4 + 336), 1u);
  __n128 result = (uint64_t *)atomic_load((unint64_t *)(v4 + 328));
  if (result)
  {
    __n128 result = (uint64_t *)caulk::concurrent::guarded_lookup_hash_table<void *,int,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(void *)>>::table_impl::findSlotForKey(result, v2);
    if (v7)
    {
      uint64_t v8 = v7;
      atomic_fetch_add(v7, 1u);
      atomic_fetch_add(v5, 0xFFFFFFFF);
      long long v10 = *(void **)(a1 + 48);
      uint64_t v9 = *(void **)(a1 + 56);
      if (v10 == v9)
      {
        AUParameterAddress v5 = v7;
      }
      else
      {
        uint64_t v11 = 0;
        do
        {
          if (v11) {
            *uint64_t v11 = v10;
          }
          uint64_t v12 = v10 + 6;
          uint64_t v11 = v10;
          long long v10 = v12;
        }
        while (v12 != v9);
        *(v12 - 6) = 0;
        __n128 result = (uint64_t *)AUEventSchedule::deliverDeferredV2ParameterUpdates(v3, *(AURenderEvent **)(a1 + 48));
        AUParameterAddress v5 = v8;
      }
    }
  }
  atomic_fetch_add(v5, 0xFFFFFFFF);
  return result;
}

void sub_19008D3DC(_Unwind_Exception *a1)
{
  atomic_fetch_add(v1, 0xFFFFFFFF);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AUScheduledParameterRefresher2::deferV2ParameterUpdates(void *,AUEventSchedule *,caulk::rt_vector<AUExtendedParameterEvent> &&)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  uint64_t v2 = *a1;
  *(void *)uint64_t v2 = &unk_1EDF96278;
  unint64_t v3 = (caulk::rt_safe_memory_resource *)*((void *)v2 + 6);
  if (v3)
  {
    *((void *)v2 + 7) = v3;
    std::allocator_traits<caulk::rt_allocator<AUExtendedParameterEvent>>::deallocate[abi:ne180100](v3, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v2 + 8) - (void)v3) >> 4));
  }
  caulk::concurrent::message::~message(v2);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], v2, 80, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<AUScheduledParameterRefresher2::deferV2ParameterUpdates(void *,AUEventSchedule *,caulk::rt_vector<AUExtendedParameterEvent> &&)::{lambda(void)#1}>::~rt_message_call(caulk::concurrent::message *this)
{
  *(void *)this = &unk_1EDF96278;
  uint64_t v2 = (caulk::rt_safe_memory_resource *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    std::allocator_traits<caulk::rt_allocator<AUExtendedParameterEvent>>::deallocate[abi:ne180100](v2, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 8) - (void)v2) >> 4));
  }
  caulk::concurrent::message::~message(this);
  JUMPOUT(0x192FC8940);
}

{
  caulk::rt_safe_memory_resource *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EDF96278;
  uint64_t v2 = (caulk::rt_safe_memory_resource *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    std::allocator_traits<caulk::rt_allocator<AUExtendedParameterEvent>>::deallocate[abi:ne180100](v2, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 8) - (void)v2) >> 4));
  }
  caulk::concurrent::message::~message(this);
}

void caulk::concurrent::details::message_call<AUScheduledParameterRefresher2::deferV2ParameterUpdates(void *,AUEventSchedule *,caulk::rt_vector<AUExtendedParameterEvent> &&)::{lambda(void)#1}>::~message_call(caulk::concurrent::message *this)
{
  *(void *)this = &unk_1EDF96278;
  uint64_t v2 = (caulk::rt_safe_memory_resource *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    std::allocator_traits<caulk::rt_allocator<AUExtendedParameterEvent>>::deallocate[abi:ne180100](v2, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 8) - (void)v2) >> 4));
  }
  caulk::concurrent::message::~message(this);
  JUMPOUT(0x192FC8940);
}

{
  caulk::rt_safe_memory_resource *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EDF96278;
  uint64_t v2 = (caulk::rt_safe_memory_resource *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    std::allocator_traits<caulk::rt_allocator<AUExtendedParameterEvent>>::deallocate[abi:ne180100](v2, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 8) - (void)v2) >> 4));
  }
  caulk::concurrent::message::~message(this);
}

void sub_19008D764(_Unwind_Exception *a1)
{
}

void AUScheduledParameterRefresher2::AUScheduledParameterRefresher2(AUScheduledParameterRefresher2 *this)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1EDF943E0;
  *((_DWORD *)this + 2) = 0;
  uint64_t v2 = (os_unfair_lock_s *)((char *)this + 8);
  *((_OWORD *)this + 1) = xmmword_1901C6220;
  unint64_t v3 = (XAtomicPoolAllocator *)((char *)this + 16);
  *((void *)this + 4) = 4080;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((_DWORD *)this + 28) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "com.apple.audio.toolbox.AUScheduledParameterRefresher");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v7, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v7 = __p;
  }
  LOBYTE(v8) = 1;
  uint64_t v9 = 25;
  int v10 = 0;
  char v11 = 1;
  char v12 = 0;
  char v13 = 0;
  MEMORY[0x192FC7E30]((char *)this + 128, 1, &v7);
  if ((_BYTE)v8 && SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v7.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EDF9E320;
  v7.__r_.__value_.__l.__size_ = (std::string::size_type)this;
  uint64_t v8 = &v7;
  *((_DWORD *)this + 40) = 0;
  *((void *)this + 18) = &unk_1EDF96228;
  *((void *)this + 19) = 0;
  *((void *)this + 21) = (char *)this + 128;
  *((unsigned char *)this + 176) = 0;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)this + 184, (uint64_t)&v7);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&v7);
  *((void *)this + 27) = 0;
  *((void *)this + 35) = 0;
  if (*((int *)this + 28) <= 511)
  {
    do
      XAtomicPoolAllocator::allocChunk(v3);
    while (*((int *)this + 28) < 512);
  }
  os_unfair_lock_lock(v2);
  os_unfair_lock_unlock(v2);
  *(void *)this = &unk_1EDF945B0;
  *((void *)this + 36) = &unk_1EDF9E368;
  *((void *)this + 39) = (char *)this + 288;
  *((_DWORD *)this + 80) = 0;
  *((void *)this + 41) = 0;
  *((_DWORD *)this + 84) = 0;
  *((void *)this + 43) = 0;
  *((void *)this + 44) = 0;
  *((void *)this + 45) = 0;
  *((void *)this + 46) = 850045863;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *((void *)this + 53) = 0;
  *((void *)this + 54) = this;
  *((_DWORD *)this + 110) = 0;
  *((void *)this + 57) = 0;
  *((void *)this + 58) = 0;
  *((void *)this + 56) = 0;
  *((void *)this + 60) = 1200;
  uint64_t v4 = dispatch_get_global_queue(25, 0);
  *((void *)this + 61) = dispatch_queue_create_with_target_V2("ParameterWatchdog", 0, v4);

  AUParameterAddress v5 = (void *)*((void *)this + 61);
  applesauce::dispatch::v1::source::operator*(v5);
  objc_claimAutoreleasedReturnValue();
  CAEventReceiver::CAEventReceiver((void *)this + 62, v5);

  v7.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EDFA0528;
  v7.__r_.__value_.__l.__size_ = (std::string::size_type)this + 432;
  uint64_t v8 = &v7;
  CAEventReceiver::createTimer(*((void *)this + 62), (uint64_t)&v7);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&v7);
}

void sub_19008DA98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  XAtomicPoolAllocator::~XAtomicPoolAllocator(v22);
  _Unwind_Resume(a1);
}

uint64_t caulk::concurrent::guarded_lookup_hash_table<void *,int,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(void *)>>::~guarded_lookup_hash_table(uint64_t a1)
{
  if (atomic_load((unsigned int *)(a1 + 48)))
  {
    _os_assert_log();
    uint64_t result = _os_crash();
    __break(1u);
  }
  else
  {
    uint64_t v3 = atomic_load((unint64_t *)(a1 + 40));
    if (v3)
    {
      uint64_t v4 = caulk::concurrent::guarded_lookup_hash_table<void *,int,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(void *)>>::table_impl::~table_impl(v3);
      MEMORY[0x192FC8940](v4, 0x1060C402CF69088);
    }
    std::mutex::~mutex((std::mutex *)(a1 + 80));
    AUParameterAddress v5 = *(uint64_t **)(a1 + 56);
    if (v5)
    {
      unint64_t v6 = *(uint64_t **)(a1 + 64);
      std::string v7 = *(void **)(a1 + 56);
      if (v6 != v5)
      {
        do
          std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<void *,int,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(void *)>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<void *,int,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(void *)>>::table_impl>>::reset[abi:ne180100](--v6);
        while (v6 != v5);
        std::string v7 = *(void **)(a1 + 56);
      }
      *(void *)(a1 + 64) = v5;
      operator delete(v7);
    }
    uint64_t v8 = *(void *)(a1 + 24);
    if (v8 == a1)
    {
      (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    }
    else if (v8)
    {
      (*(void (**)(uint64_t))(*(void *)v8 + 40))(v8);
    }
    return a1;
  }
  return result;
}

void AUScheduledParameterRefresher::~AUScheduledParameterRefresher(AUScheduledParameterRefresher *this)
{
  *(void *)this = &unk_1EDF943E0;
  uint64_t v2 = (AUScheduledParameterRefresher *)((char *)this + 144);
  *((void *)this + 18) = &unk_1EDF96228;
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)this + 23);
  caulk::concurrent::message::~message(v2);
  MEMORY[0x192FC7E40]((char *)this + 128);
  XAtomicPoolAllocator::~XAtomicPoolAllocator((AUScheduledParameterRefresher *)((char *)this + 16));
}

void *CAEventReceiver::CAEventReceiver(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (char *)operator new(0x90uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(void *)uint64_t v4 = &unk_1EDFA2460;
  id v5 = v3;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *((void *)v4 + 7) = v5;
  *((void *)v4 + 8) = 0;
  *((void *)v4 + 12) = 0;
  *((void *)v4 + 13) = -1;
  *((_OWORD *)v4 + 7) = 0u;
  *((void *)v4 + 16) = dispatch_semaphore_create(0);
  *((_DWORD *)v4 + 34) = 0;
  *a1 = v4 + 24;
  a1[1] = v4;
  std::shared_ptr<CAEventReceiver::Impl>::__enable_weak_this[abi:ne180100]<CAEventReceiver::Impl,CAEventReceiver::Impl,void>((uint64_t)a1, (void *)v4 + 3, (uint64_t)(v4 + 24));

  return a1;
}

void sub_19008DD94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<ParameterWatchdog::ParameterWatchdog(AUScheduledParameterRefresher2 &)::{lambda(void)#1},std::allocator<ParameterWatchdog::ParameterWatchdog(AUScheduledParameterRefresher2 &)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(os_unfair_lock_s **)(a1 + 8);
  os_unfair_lock_lock(v1 + 2);
  ParameterWatchdog::evaluate((ParameterWatchdog *)v1);
  os_unfair_lock_unlock(v1 + 2);
}

void sub_19008DDEC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ParameterWatchdog::ParameterWatchdog(AUScheduledParameterRefresher2 &)::{lambda(void)#1},std::allocator<ParameterWatchdog::ParameterWatchdog(AUScheduledParameterRefresher2 &)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EDFA0528;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<ParameterWatchdog::ParameterWatchdog(AUScheduledParameterRefresher2 &)::{lambda(void)#1},std::allocator<ParameterWatchdog::ParameterWatchdog(AUScheduledParameterRefresher2 &)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EDFA0528;
  result[1] = v3;
  return result;
}

void std::__function::__func<ParameterWatchdog::ParameterWatchdog(AUScheduledParameterRefresher2 &)::{lambda(void)#1},std::allocator<ParameterWatchdog::ParameterWatchdog(AUScheduledParameterRefresher2 &)::{lambda(void)#1}>,void ()(void)>::~__func()
{
}

void std::shared_ptr<CAEventReceiver::Impl>::__enable_weak_this[abi:ne180100]<CAEventReceiver::Impl,CAEventReceiver::Impl,void>(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      id v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v4 = (std::__shared_weak_count *)a2[1];
      }
      *a2 = a3;
      a2[1] = v5;
      if (v4) {
        std::__shared_weak_count::__release_weak(v4);
      }
      if (v5)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
    }
  }
}

void std::__shared_ptr_emplace<CAEventReceiver::Impl>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 128);
  *(void *)(a1 + 128) = 0;

  uint64_t v3 = *(void **)(a1 + 120);
  *(void *)(a1 + 120) = 0;

  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)(a1 + 72));
  uint64_t v4 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = 0;

  id v5 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = 0;

  unint64_t v6 = *(const void **)(a1 + 48);
  if (v6) {
    CFRelease(v6);
  }
  std::string v7 = *(const void **)(a1 + 40);
  if (v7) {
    CFRelease(v7);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 32);
  if (v8)
  {
    std::__shared_weak_count::__release_weak(v8);
  }
}

void std::__shared_ptr_emplace<CAEventReceiver::Impl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2460;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

void std::__shared_ptr_emplace<CAEventReceiver::Impl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2460;
  std::__shared_weak_count::~__shared_weak_count(this);
}

unint64_t std::__function::__func<std::hash<void *>,std::allocator<std::hash<void *>>,unsigned int ()(void *)>::operator()(uint64_t a1, void *a2)
{
  unint64_t v2 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v3 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v2 >> 47) ^ v2);
  return -348639895 * ((v3 >> 47) ^ v3);
}

void std::__function::__func<std::hash<void *>,std::allocator<std::hash<void *>>,unsigned int ()(void *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9E368;
}

void *std::__function::__func<std::hash<void *>,std::allocator<std::hash<void *>>,unsigned int ()(void *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EDF9E368;
  return result;
}

void std::__function::__func<std::hash<void *>,std::allocator<std::hash<void *>>,unsigned int ()(void *)>::~__func()
{
}

void AUScheduledParameterRefresher2::invalidateParameter(AUScheduledParameterRefresher2 *this, void *a2, uint64_t a3)
{
  unint64_t v3 = (atomic_uint *)((char *)this + 336);
  atomic_fetch_add((atomic_uint *volatile)this + 84, 1u);
  uint64_t v4 = (uint64_t *)atomic_load((unint64_t *)this + 41);
  if (v4)
  {
    caulk::concurrent::guarded_lookup_hash_table<void *,int,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(void *)>>::table_impl::findSlotForKey(v4, (uint64_t)a2);
    if (v7)
    {
      uint64_t v8 = v7;
      atomic_fetch_add(v7, 1u);
      atomic_fetch_add(v3, 0xFFFFFFFF);
      uint64_t v9 = a2;
      int v10 = [v9 parameterTree];
      char v11 = [v10 parameterWithAddress:a3];

      if (v11)
      {
        [v11 setValue:2 originator:0 atHostTime:0.0];
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          [v9 _notifyParameterChange:a3];
        }
      }

      unint64_t v3 = v8;
    }
  }
  atomic_fetch_add(v3, 0xFFFFFFFF);
}

void sub_19008E1F0(_Unwind_Exception *a1)
{
  atomic_fetch_add(v1, 0xFFFFFFFF);
  _Unwind_Resume(a1);
}

void sub_19008E2E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19008E360(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19008E60C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)AUAudioUnit;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_19008EA2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,id a31)
{
  _Block_object_dispose(&a20, 8);
  _Block_object_dispose(&a26, 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__6715(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__6716(uint64_t a1)
{
}

void sub_19008EB58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_19008EC28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19008ECC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id getAUOutputUnitClass(const AudioComponentDescription *a1)
{
  uint64_t v1 = self;
  return v1;
}

void sub_19008EF00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<NSXPCConnection * ()(NSUUID *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19008F40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, AUHostingServiceClient *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,AUHostingServiceClient *a26)
{
  std::unique_ptr<AUHostingServiceClient>::reset[abi:ne180100](&a18, 0);
  std::unique_ptr<AUHostingServiceClient>::reset[abi:ne180100](&a26, 0);
  applesauce::CF::ArrayRef::~ArrayRef((const void **)(v27 - 144));

  _Unwind_Resume(a1);
}

AUHostingServiceClient *std::unique_ptr<AUHostingServiceClient>::reset[abi:ne180100](AUHostingServiceClient **a1, AUHostingServiceClient *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    AUHostingServiceClient::~AUHostingServiceClient(result);
    JUMPOUT(0x192FC8940);
  }
  return result;
}

void std::vector<BusPropertyObserver>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unint64_t v2 = (id **)*a1;
  if (*v2)
  {
    std::vector<BusPropertyObserver>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    unint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<BusPropertyObserver>::__base_destruct_at_end[abi:ne180100](uint64_t a1, id *a2)
{
  uint64_t v4 = *(id **)(a1 + 8);
  if (v4 != a2)
  {
    id v5 = v4 - 4;
    do
    {

      objc_destroyWeak(v5);
      BOOL v6 = v5 == a2;
      v5 -= 4;
    }
    while (!v6);
  }
  *(void *)(a1 + 8) = a2;
}

void std::vector<BusPropertyObserver>::__assign_with_size[abi:ne180100]<BusPropertyObserver*,BusPropertyObserver*>(uint64_t a1, id *location, id *a3, unint64_t a4)
{
  int v9 = a1 + 16;
  uint64_t v8 = *(void *)(a1 + 16);
  int v10 = *(id **)a1;
  if (a4 > (v8 - *(void *)a1) >> 5)
  {
    if (v10)
    {
      std::vector<BusPropertyObserver>::__base_destruct_at_end[abi:ne180100](a1, *(id **)a1);
      operator delete(*(void **)a1);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (a4 >> 59) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v8 >> 4;
    if (v8 >> 4 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<BusPropertyObserver>::__vallocate[abi:ne180100]((void *)a1, v12);
    char v13 = *(id **)(a1 + 8);
    int v14 = v9;
    unint64_t v15 = location;
    goto LABEL_13;
  }
  unint64_t v16 = (uint64_t)(*(void *)(a1 + 8) - (void)v10) >> 5;
  if (v16 < a4)
  {
    uint64_t v17 = &location[4 * v16];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<BusPropertyObserver *,BusPropertyObserver *,BusPropertyObserver *>(location, v17, (uint64_t)v10);
    char v13 = *(id **)(a1 + 8);
    int v14 = v9;
    unint64_t v15 = v17;
LABEL_13:
    *(void *)(a1 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<BusPropertyObserver>,BusPropertyObserver*,BusPropertyObserver*,BusPropertyObserver*>(v14, v15, a3, v13);
    return;
  }
  long long v18 = (id *)std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<BusPropertyObserver *,BusPropertyObserver *,BusPropertyObserver *>(location, a3, (uint64_t)v10);
  std::vector<BusPropertyObserver>::__base_destruct_at_end[abi:ne180100](a1, v18);
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<BusPropertyObserver *,BusPropertyObserver *,BusPropertyObserver *>(id *location, id *a2, uint64_t a3)
{
  if (location != a2)
  {
    id v5 = location;
    do
    {
      id WeakRetained = objc_loadWeakRetained(v5);
      objc_storeWeak((id *)a3, WeakRetained);

      objc_storeStrong((id *)(a3 + 8), v5[1]);
      *(_OWORD *)(a3 + 16) = *((_OWORD *)v5 + 1);
      a3 += 32;
      v5 += 4;
    }
    while (v5 != a2);
  }
  return a3;
}

id *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<BusPropertyObserver>,BusPropertyObserver*,BusPropertyObserver*,BusPropertyObserver*>(int a1, id *from, id *a3, id *to)
{
  if (from != a3)
  {
    BOOL v6 = from;
    do
    {
      objc_copyWeak(to, v6);
      to[1] = v6[1];
      *((_OWORD *)to + 1) = *((_OWORD *)v6 + 1);
      to += 4;
      v6 += 4;
    }
    while (v6 != a3);
  }
  return to;
}

char *std::vector<BusPropertyObserver>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<KVOAggregator::Record>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

id *std::vector<BusPropertyObserver>::__init_with_size[abi:ne180100]<BusPropertyObserver*,BusPropertyObserver*>(id *result, id *a2, id *a3, unint64_t a4)
{
  if (a4)
  {
    BOOL v6 = result;
    std::vector<BusPropertyObserver>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<BusPropertyObserver>,BusPropertyObserver*,BusPropertyObserver*,BusPropertyObserver*>((int)v6 + 16, a2, a3, (id *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_19008F91C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_19008FB98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void BusPropertyObserver::remove(BusPropertyObserver *this, AUAudioUnitBus *a2)
{
  uint64_t v4 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)this);
  if (WeakRetained) {
    [(AUAudioUnitBus *)v4 removeObserver:WeakRetained forKeyPath:*((void *)this + 1) context:*((void *)this + 3)];
  }
}

void sub_19008FC54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void BusPropertyObserver::add(BusPropertyObserver *this, AUAudioUnitBus *a2)
{
  unint64_t v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)this);
  -[AUAudioUnitBus addObserver:forKeyPath:options:context:](v3, "addObserver:forKeyPath:options:context:");
}

void sub_19008FCD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19008FE0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19008FFC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<BusPropertyObserver *,BusPropertyObserver *,BusPropertyObserver *>(id *location, id *a2, uint64_t a3)
{
  if (location != a2)
  {
    id v5 = location;
    do
    {
      id WeakRetained = objc_loadWeakRetained(v5);
      objc_storeWeak((id *)a3, WeakRetained);

      id v7 = v5[1];
      v5[1] = 0;
      uint64_t v8 = *(void **)(a3 + 8);
      *(void *)(a3 + 8) = v7;

      *(_OWORD *)(a3 + 16) = *((_OWORD *)v5 + 1);
      a3 += 32;
      v5 += 4;
    }
    while (v5 != a2);
  }
  return a3;
}

void sub_190090208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, void *a19)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

unint64_t std::vector<BusPropertyObserver>::__push_back_slow_path<BusPropertyObserver const&>(unint64_t *a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t)(a1[1] - *a1) >> 5;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 59) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 4 > v3) {
    unint64_t v3 = v6 >> 4;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  if (v7) {
    unint64_t v7 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<KVOAggregator::Record>>(v7);
  }
  else {
    uint64_t v8 = 0;
  }
  unint64_t v9 = v7 + 32 * v2;
  unint64_t v10 = v7 + 32 * v8;
  objc_copyWeak((id *)v9, (id *)a2);
  *(void *)(v9 + 8) = *(id *)(a2 + 8);
  *(_OWORD *)(v9 + 16) = *(_OWORD *)(a2 + 16);
  unint64_t v11 = v9 + 32;
  char v13 = (id *)*a1;
  unint64_t v12 = (id *)a1[1];
  if (v12 == (id *)*a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    if (!v12) {
      return v11;
    }
    goto LABEL_19;
  }
  int v14 = v12 - 4;
  do
  {
    unint64_t v15 = v9;
    v9 -= 32;
    objc_moveWeak((id *)v9, v14);
    id v16 = v14[1];
    v14[1] = 0;
    *(void *)(v15 - 24) = v16;
    *(_OWORD *)(v15 - 16) = *((_OWORD *)v14 + 1);
    BOOL v17 = v14 == v13;
    v14 -= 4;
  }
  while (!v17);
  unint64_t v12 = (id *)*a1;
  long long v18 = (id *)a1[1];
  *a1 = v9;
  a1[1] = v11;
  a1[2] = v10;
  if (v18 != v12)
  {
    long long v19 = v18 - 4;
    do
    {

      objc_destroyWeak(v19);
      BOOL v17 = v19 == v12;
      v19 -= 4;
    }
    while (!v17);
  }
  if (v12) {
LABEL_19:
  }
    operator delete(v12);
  return v11;
}

void sub_1900904CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_190090564(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_190090798(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1900908C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1900909F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id location, void *a12)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_190090D20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_190090F5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_190091044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)AUAudioUnitBus;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_190091118(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_190091258(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1900912E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_190091430(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1900914BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_190091710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::recursive_mutex *a10, uint64_t a11, char a12, uint64_t a13)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<APComponent_AUAudioUnitSubclass *,std::shared_ptr<APComponent_AUAudioUnitSubclass>::__shared_ptr_default_delete<APComponent_AUAudioUnitSubclass,APComponent_AUAudioUnitSubclass>,std::allocator<APComponent_AUAudioUnitSubclass>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

void std::__shared_ptr_pointer<APComponent_AUAudioUnitSubclass *,std::shared_ptr<APComponent_AUAudioUnitSubclass>::__shared_ptr_default_delete<APComponent_AUAudioUnitSubclass,APComponent_AUAudioUnitSubclass>,std::allocator<APComponent_AUAudioUnitSubclass>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

void std::__function::__func<APComponent_AUAudioUnitSubclass::APComponent_AUAudioUnitSubclass(AudioComponentDescription const&,applesauce::CF::StringRef const&,unsigned int,objc_class *)::{lambda(AudioComponentDescription const*)#1},std::allocator<APComponent_AUAudioUnitSubclass::APComponent_AUAudioUnitSubclass(AudioComponentDescription const&,applesauce::CF::StringRef const&,unsigned int,objc_class *)::{lambda(AudioComponentDescription const*)#1}>,AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::operator()()
{
}

void sub_1900918C8(_Unwind_Exception *a1)
{
  MEMORY[0x192FC8940](v1, 0x10A1C406BDEE126);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<APComponent_AUAudioUnitSubclass::APComponent_AUAudioUnitSubclass(AudioComponentDescription const&,applesauce::CF::StringRef const&,unsigned int,objc_class *)::{lambda(AudioComponentDescription const*)#1},std::allocator<APComponent_AUAudioUnitSubclass::APComponent_AUAudioUnitSubclass(AudioComponentDescription const&,applesauce::CF::StringRef const&,unsigned int,objc_class *)::{lambda(AudioComponentDescription const*)#1}>,AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EDFA0CC0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<APComponent_AUAudioUnitSubclass::APComponent_AUAudioUnitSubclass(AudioComponentDescription const&,applesauce::CF::StringRef const&,unsigned int,objc_class *)::{lambda(AudioComponentDescription const*)#1},std::allocator<APComponent_AUAudioUnitSubclass::APComponent_AUAudioUnitSubclass(AudioComponentDescription const&,applesauce::CF::StringRef const&,unsigned int,objc_class *)::{lambda(AudioComponentDescription const*)#1}>,AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EDFA0CC0;
  result[1] = v3;
  return result;
}

void std::__function::__func<APComponent_AUAudioUnitSubclass::APComponent_AUAudioUnitSubclass(AudioComponentDescription const&,applesauce::CF::StringRef const&,unsigned int,objc_class *)::{lambda(AudioComponentDescription const*)#1},std::allocator<APComponent_AUAudioUnitSubclass::APComponent_AUAudioUnitSubclass(AudioComponentDescription const&,applesauce::CF::StringRef const&,unsigned int,objc_class *)::{lambda(AudioComponentDescription const*)#1}>,AudioComponentPlugInInterface * ()(AudioComponentDescription const*)>::~__func()
{
}

id APComponent_AUAudioUnitSubclass::getV3Class(id *this)
{
  return this[20];
}

void APComponent_AUAudioUnitSubclass::~APComponent_AUAudioUnitSubclass(APComponent *this)
{
  APComponent::~APComponent(this);
  JUMPOUT(0x192FC8940);
}

void *___Z21instantiateV2BridgeAURK25AudioComponentDescriptionjPU15__autoreleasingP7NSError_block_invoke(void *result, uint64_t a2, int a3)
{
  *(void *)(*(void *)(result[4] + 8) + 24) = a2;
  *(_DWORD *)(*(void *)(result[5] + 8) + 24) = a3;
  *(unsigned char *)(*(void *)(result[6] + 8) + 24) = 1;
  return result;
}

void sub_190091BEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_190091CCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_190091F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190092200(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void RecordingObserver::~RecordingObserver(RecordingObserver *this)
{
  RecordingObserver::~RecordingObserver(this);
  JUMPOUT(0x192FC8940);
}

{
  const void *v2;
  const void *v3;
  void *v4;

  *(void *)this = &unk_1EDF920A0;
  uint64_t v2 = (const void *)*((void *)this + 2);
  if (v2) {

  }
  uint64_t v3 = (const void *)*((void *)this + 3);
  if (v3)
  {

    uint64_t v4 = (void *)*((void *)this + 3);
  }
  else
  {
    uint64_t v4 = 0;
  }
}

void sub_1900923DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190092594(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void UIObserver::~UIObserver(id *this)
{
  JUMPOUT(0x192FC8940);
}

{
}

void sub_1900926C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_190092788(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<AddressToParameter>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (id *)**a1;
  if (v2)
  {
    uint64_t v4 = (id *)v1[1];
    id v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 2;
        objc_destroyWeak(v4 - 1);
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      id v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

id *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<AddressToParameter *,AddressToParameter *,AddressToParameter *>(void **a1, void **a2, id *a3)
{
  uint64_t v3 = a3;
  if (a1 != a2)
  {
    id v5 = a1;
    uint64_t v6 = a3;
    do
    {
      unint64_t v7 = v5 + 1;
      uint64_t v8 = *v5;
      v5 += 2;
      id *v6 = v8;
      v6 += 2;
      id WeakRetained = objc_loadWeakRetained(v7);
      objc_storeWeak(v3 + 1, WeakRetained);

      uint64_t v3 = v6;
    }
    while (v5 != a2);
    return v6;
  }
  return v3;
}

void sub_190092CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_190092D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_190092E20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_190092EA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19009305C(void *a1)
{
  __cxa_begin_catch(a1);
  AUObserverController::create(AUParameterTree *)::{lambda(AUObserverController*)#1}::operator()(v1);
  __cxa_rethrow();
}

void sub_190093070(_Unwind_Exception *a1)
{
  __cxa_end_catch();

  _Unwind_Resume(a1);
}

void AUObserverController::create(AUParameterTree *)::{lambda(AUObserverController*)#1}::operator()(uint64_t a1)
{
  explicit = (_opaque_pthread_t *)atomic_load_explicit((atomic_ullong *volatile)(*(void *)(a1 + 32) + 88), memory_order_acquire);
  if (explicit != pthread_self())
  {
    AUObserverController::~AUObserverController((AUObserverController *)a1);
    JUMPOUT(0x192FC8940);
  }
  uint64_t v3 = dispatch_get_global_queue(21, 0);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  bos_unfair_lock_t lock[2] = ___ZZN20AUObserverController6createEP15AUParameterTreeENKUlPS_E_clES2__block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = a1;
  dispatch_async(v3, block);
}

void AUObserverController::~AUObserverController(AUObserverController *this)
{
  uint64_t v2 = (std::__shared_weak_count **)((char *)this + 32);
  if ((CAEventReceiver::invalidate((CAEventReceiver *)((char *)this + 32)) & 1) == 0) {
    std::terminate();
  }
  uint64_t v3 = (void *)*((void *)this + 10);
  if (v3)
  {
    *((void *)this + 11) = v3;
    operator delete(v3);
  }
  CAEventReceiver::~CAEventReceiver(v2);

  objc_destroyWeak((id *)this + 2);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

AUObserverController *___ZZN20AUObserverController6createEP15AUParameterTreeENKUlPS_E_clES2__block_invoke(uint64_t a1)
{
  uint64_t result = *(AUObserverController **)(a1 + 32);
  if (result)
  {
    AUObserverController::~AUObserverController(result);
    JUMPOUT(0x192FC8940);
  }
  return result;
}

void std::__shared_ptr_pointer<AUObserverController *,AUObserverController::create(AUParameterTree *)::{lambda(AUObserverController *)#1},std::allocator<AUObserverController>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  explicit = (_opaque_pthread_t *)atomic_load_explicit((atomic_ullong *volatile)(*(void *)(v1 + 32) + 88), memory_order_acquire);
  if (explicit != pthread_self())
  {
    AUObserverController::~AUObserverController((AUObserverController *)v1);
    JUMPOUT(0x192FC8940);
  }
  uint64_t v3 = dispatch_get_global_queue(21, 0);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  bos_unfair_lock_t lock[2] = ___ZZN20AUObserverController6createEP15AUParameterTreeENKUlPS_E_clES2__block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = v1;
  dispatch_async(v3, block);
}

void std::__shared_ptr_pointer<AUObserverController *,AUObserverController::create(AUParameterTree *)::{lambda(AUObserverController *)#1},std::allocator<AUObserverController>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

void sub_19009353C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1900936E8(_Unwind_Exception *exception_object)
{
}

void sub_1900938CC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v3);

  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AddressToParameter *,false>(id *a1, id *a2, uint64_t a3, char a4)
{
void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AddressToParameter *&,AddressToParameter *&>(id *a1, id *a2)
{
  id v8 = *a1;
  char v4 = a1 + 1;
  objc_moveWeak(&v9, a1 + 1);
  *a1 = *a2;
  char v5 = a2 + 1;
  id WeakRetained = objc_loadWeakRetained(a2 + 1);
  objc_storeWeak(v4, WeakRetained);

  *a2 = v8;
  id v7 = objc_loadWeakRetained(&v9);
  objc_storeWeak(v5, v7);

  objc_destroyWeak(&v9);
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AddressToParameter *>(id *a1, id *a2, id *a3)
{
  char v5 = a1;
  id v6 = *a2;
  id v7 = *a3;
  if (*a2 >= *a1)
  {
    if (v7 >= v6) {
      return;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AddressToParameter *&,AddressToParameter *&>(a2, a3);
    if (*a2 >= *v5) {
      return;
    }
    a1 = v5;
    id v8 = a2;
  }
  else
  {
    if (v7 >= v6)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AddressToParameter *&,AddressToParameter *&>(a1, a2);
      if (*a3 >= *a2) {
        return;
      }
      a1 = a2;
    }
    id v8 = a3;
  }
  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AddressToParameter *&,AddressToParameter *&>(a1, v8);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AddressToParameter *>(id *a1, id *a2, id *a3, id *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AddressToParameter *>(a1, a2, a3);
  if (*a4 < *a3)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AddressToParameter *&,AddressToParameter *&>(a3, a4);
    if (*a3 < *a2)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AddressToParameter *&,AddressToParameter *&>(a2, a3);
      if (*a2 < *a1)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AddressToParameter *&,AddressToParameter *&>(a1, a2);
      }
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AddressToParameter *>(id *a1, id *a2, id *a3, id *a4, id *a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AddressToParameter *>(a1, a2, a3, a4);
  if (*a5 < *a4)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AddressToParameter *&,AddressToParameter *&>(a4, a5);
    if (*a4 < *a3)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AddressToParameter *&,AddressToParameter *&>(a3, a4);
      if (*a3 < *a2)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AddressToParameter *&,AddressToParameter *&>(a2, a3);
        if (*a2 < *a1)
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AddressToParameter *&,AddressToParameter *&>(a1, a2);
        }
      }
    }
  }
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AddressToParameter *>(id *a1, id *a2)
{
  BOOL v4 = 1;
  switch(((char *)a2 - (char *)a1) >> 4)
  {
    case 0:
    case 1:
      return v4;
    case 2:
      if (*(a2 - 2) < *a1) {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AddressToParameter *&,AddressToParameter *&>(a1, a2 - 2);
      }
      return v4;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AddressToParameter *>(a1, a1 + 2, a2 - 2);
      return v4;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AddressToParameter *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return v4;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AddressToParameter *>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return v4;
    default:
      char v5 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AddressToParameter *>(a1, a1 + 2, a1 + 4);
      id v6 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v7 = 0;
      int v8 = 0;
      break;
  }
  while (*v6 >= *v5)
  {
LABEL_14:
    char v5 = v6;
    v7 += 16;
    v6 += 2;
    if (v6 == a2) {
      return 1;
    }
  }
  id v18 = *v6;
  objc_moveWeak(&v19, v6 + 1);
  id v9 = *v5;
  uint64_t v10 = v7;
  while (1)
  {
    uint64_t v11 = v10;
    uint64_t v12 = (id *)((char *)a1 + v10);
    *(id *)((char *)a1 + v10 + 48) = v9;
    char v13 = (id *)((char *)a1 + v10 + 40);
    id WeakRetained = objc_loadWeakRetained(v13);
    objc_storeWeak(v12 + 7, WeakRetained);

    if (v11 == -32) {
      break;
    }
    id v9 = v12[2];
    uint64_t v10 = v11 - 16;
    if (v18 >= v9)
    {
      id v15 = (id *)((char *)a1 + v10 + 48);
      char v13 = (id *)((char *)a1 + v11 + 40);
      goto LABEL_12;
    }
  }
  id v15 = a1;
LABEL_12:
  id *v15 = v18;
  id v16 = objc_loadWeakRetained(&v19);
  objc_storeWeak(v13, v16);

  if (++v8 != 8)
  {
    objc_destroyWeak(&v19);
    goto LABEL_14;
  }
  BOOL v4 = v6 + 2 == a2;
  objc_destroyWeak(&v19);
  return v4;
}

void sub_1900949EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_190094BA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_190094ED0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1900952C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19009540C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_190095758(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1900958E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_190095B84(_Unwind_Exception *a1)
{
}

void sub_190095D20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_190095E70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19009601C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19009644C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<AUObserverController::AddressOriginator>::__emplace_unique_key_args<AUObserverController::AddressOriginator,AUObserverController::AddressOriginator>(uint64_t *result, unint64_t a2, unint64_t a3, _OWORD *a4)
{
  char v5 = (uint64_t **)result;
  uint64_t v7 = (uint64_t **)(result + 1);
  id v6 = (uint64_t *)result[1];
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v6;
        unint64_t v8 = v6[4];
        if (v8 <= a2) {
          break;
        }
LABEL_5:
        id v6 = *v7;
        uint64_t v10 = v7;
        if (!*v7) {
          goto LABEL_11;
        }
      }
      if (v8 >= a2)
      {
        id v9 = v7[5];
        if ((unint64_t)v9 > a3) {
          goto LABEL_5;
        }
        if ((unint64_t)v9 >= a3) {
          return result;
        }
      }
      uint64_t v10 = v7 + 1;
      id v6 = v7[1];
      if (!v6) {
        goto LABEL_11;
      }
    }
  }
  uint64_t v10 = (uint64_t **)(result + 1);
LABEL_11:
  uint64_t v11 = (uint64_t *)operator new(0x30uLL);
  *((_OWORD *)v11 + 2) = *a4;
}

void std::__function::__func<AUObserverController::parameterChanged(EParamChangeFlags,unsigned long long,float,AUParameterObserverExtendedToken const&,unsigned long long,AUParameterAutomationEventType)::{lambda(void)#1},std::allocator<AUObserverController::parameterChanged(EParamChangeFlags,unsigned long long,float,AUParameterObserverExtendedToken const&,unsigned long long,AUParameterAutomationEventType)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v142 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2) {
    return;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return;
  }
  float32x4_t v114 = v3;
  BOOL v4 = *(void **)(a1 + 8);
  if (!v4) {
    goto LABEL_241;
  }
  *(_OWORD *)std::string __p = 0u;
  long long v139 = 0u;
  float v140 = 1.0;
  char v5 = &v136;
  float32x4_t v136 = 0;
  uint64_t v137 = 0;
  float32x4_t v135 = &v136;
  uint64_t v129 = v4;
  if (v4[9])
  {
    float32x4_t v125 = v4 + 8;
    locatiouint64_t n = (id *)(v4 + 2);
    uint64_t v118 = (uint64_t **)(v4 + 7);
    do
    {
      id v6 = *v118;
      uint64_t v7 = v125;
      while (v6 != v7)
      {
        unint64_t v8 = (uint64_t *)v6[1];
        id v9 = v6;
        if (v8)
        {
          do
          {
            uint64_t v10 = v8;
            unint64_t v8 = (uint64_t *)*v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            uint64_t v10 = (uint64_t *)v6[2];
            BOOL v11 = *v10 == (void)v6;
            id v6 = v10;
          }
          while (!v11);
        }
        unint64_t v13 = v9[4];
        unint64_t v12 = v9[5];
        if (v10 == v125)
        {
          uint64_t v122 = v125;
        }
        else
        {
          while (v10[4] == v13)
          {
            id v14 = (uint64_t *)v10[1];
            if (v14)
            {
              do
              {
                id v15 = v14;
                id v14 = (uint64_t *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                id v15 = (uint64_t *)v10[2];
                BOOL v11 = *v15 == (void)v10;
                uint64_t v10 = v15;
              }
              while (!v11);
            }
            unint64_t v12 = 0;
            uint64_t v10 = v15;
            if (v15 == v125)
            {
              uint64_t v10 = v125;
              break;
            }
          }
          uint64_t v122 = v10;
        }
        id WeakRetained = objc_loadWeakRetained(location);
        id v16 = [WeakRetained parameterWithAddress:v13];
        if (v16)
        {
          id v120 = v16;
          id v17 = v16;
          uint64_t v127 = v17;
          do
          {
            id v18 = (uint64_t *)objc_msgSend(v17, "observerList", v114);
            if (v18)
            {
              id v19 = v5;
              id v20 = v127;
              uint64_t v22 = *v18;
              uint64_t v21 = v18[1];
              while (v22 != v21)
              {
                if (!*(unsigned char *)(*(void *)v22 + 8)
                  && ((v12 & 1) != 0 || (*(void *)v22 & 0xFFFFFFFELL) != (v12 & 0xFFFFFFFE)))
                {
                  uint64_t v23 = *(void *)(*(void *)v22 + 16);
                  uint64_t v24 = [v20 address];
                  [v20 value];
                  (*(void (**)(uint64_t, uint64_t))(v23 + 16))(v23, v24);
                }
                v22 += 8;
              }

              BOOL v4 = v129;
              char v5 = v19;
            }
            uint64_t v25 = [v17 parentNode];

            id v17 = (id)v25;
          }
          while (v25);
          unint64_t v26 = (unint64_t)__p[1];
          if (__p[1])
          {
            uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              unint64_t v12 = v13;
              if ((void *)v13 >= __p[1]) {
                unint64_t v12 = v13 % (unint64_t)__p[1];
              }
            }
            else
            {
              unint64_t v12 = ((unint64_t)__p[1] - 1) & v13;
            }
            id v28 = (void *)*((void *)__p[0] + v12);
            if (v28)
            {
              for (unsigned int i = (void *)*v28; i; unsigned int i = (void *)*i)
              {
                unint64_t v30 = i[1];
                if (v30 == v13)
                {
                  if (i[2] == v13) {
                    goto LABEL_108;
                  }
                }
                else
                {
                  if (v27.u32[0] > 1uLL)
                  {
                    if ((void *)v30 >= __p[1]) {
                      v30 %= (unint64_t)__p[1];
                    }
                  }
                  else
                  {
                    v30 &= (unint64_t)__p[1] - 1;
                  }
                  if (v30 != v12) {
                    break;
                  }
                }
              }
            }
          }
          id v31 = operator new(0x18uLL);
          *id v31 = 0;
          v31[1] = v13;
          _DWORD v31[2] = v13;
          float v32 = (float)(unint64_t)(*((void *)&v139 + 1) + 1);
          if (!v26 || (float)(v140 * (float)v26) < v32)
          {
            BOOL v33 = (v26 & (v26 - 1)) != 0;
            if (v26 < 3) {
              BOOL v33 = 1;
            }
            unint64_t v34 = v33 | (2 * v26);
            unint64_t v35 = vcvtps_u32_f32(v32 / v140);
            if (v34 <= v35) {
              int8x8_t prime = (int8x8_t)v35;
            }
            else {
              int8x8_t prime = (int8x8_t)v34;
            }
            if (*(void *)&prime == 1)
            {
              int8x8_t prime = (int8x8_t)2;
            }
            else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
            {
              int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
              unint64_t v26 = (unint64_t)__p[1];
            }
            if (*(void *)&prime <= v26)
            {
              if (*(void *)&prime < v26)
              {
                unint64_t v43 = vcvtps_u32_f32((float)*((unint64_t *)&v139 + 1) / v140);
                if (v26 < 3
                  || (uint8x8_t v44 = (uint8x8_t)vcnt_s8((int8x8_t)v26), v44.i16[0] = vaddlv_u8(v44), v44.u32[0] > 1uLL))
                {
                  unint64_t v43 = std::__next_prime(v43);
                }
                else
                {
                  uint64_t v45 = 1 << -(char)__clz(v43 - 1);
                  if (v43 >= 2) {
                    unint64_t v43 = v45;
                  }
                }
                if (*(void *)&prime <= v43) {
                  int8x8_t prime = (int8x8_t)v43;
                }
                if (*(void *)&prime >= v26)
                {
                  unint64_t v26 = (unint64_t)__p[1];
                }
                else
                {
                  if (prime) {
                    goto LABEL_64;
                  }
                  int64_t v57 = __p[0];
                  __p[0] = 0;
                  if (v57) {
                    operator delete(v57);
                  }
                  unint64_t v26 = 0;
                  __p[1] = 0;
                }
              }
            }
            else
            {
LABEL_64:
              if (*(void *)&prime >> 61) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              unint64_t v37 = operator new(8 * *(void *)&prime);
              id v38 = __p[0];
              __p[0] = v37;
              if (v38) {
                operator delete(v38);
              }
              uint64_t v39 = 0;
              __p[1] = (void *)prime;
              do
                *((void *)__p[0] + v39++) = 0;
              while (*(void *)&prime != v39);
              uint64_t v40 = (void **)v139;
              if ((void)v139)
              {
                unint64_t v41 = *(void *)(v139 + 8);
                uint8x8_t v42 = (uint8x8_t)vcnt_s8(prime);
                v42.i16[0] = vaddlv_u8(v42);
                if (v42.u32[0] > 1uLL)
                {
                  if (v41 >= *(void *)&prime) {
                    v41 %= *(void *)&prime;
                  }
                }
                else
                {
                  v41 &= *(void *)&prime - 1;
                }
                *((void *)__p[0] + v41) = &v139;
                for (j = *v40; j; unint64_t v41 = v47)
                {
                  unint64_t v47 = j[1];
                  if (v42.u32[0] > 1uLL)
                  {
                    if (v47 >= *(void *)&prime) {
                      v47 %= *(void *)&prime;
                    }
                  }
                  else
                  {
                    v47 &= *(void *)&prime - 1;
                  }
                  if (v47 != v41)
                  {
                    if (!*((void *)__p[0] + v47))
                    {
                      *((void *)__p[0] + v47) = v40;
                      goto LABEL_89;
                    }
                    *uint64_t v40 = (void *)*j;
                    *unsigned int j = **((void **)__p[0] + v47);
                    **((void **)__p[0] + v47) = j;
                    unsigned int j = v40;
                  }
                  unint64_t v47 = v41;
LABEL_89:
                  uint64_t v40 = (void **)j;
                  unsigned int j = (void *)*j;
                }
              }
              unint64_t v26 = (unint64_t)prime;
            }
            if ((v26 & (v26 - 1)) != 0)
            {
              if (v13 >= v26) {
                unint64_t v12 = v13 % v26;
              }
              else {
                unint64_t v12 = v13;
              }
            }
            else
            {
              unint64_t v12 = (v26 - 1) & v13;
            }
          }
          uint64_t v48 = __p[0];
          uint64_t v49 = (void *)*((void *)__p[0] + v12);
          if (v49)
          {
            *id v31 = *v49;
            goto LABEL_106;
          }
          *id v31 = v139;
          *(void *)&long long v139 = v31;
          v48[v12] = &v139;
          if (*v31)
          {
            unint64_t v50 = *(void *)(*v31 + 8);
            if ((v26 & (v26 - 1)) != 0)
            {
              if (v50 >= v26) {
                v50 %= v26;
              }
            }
            else
            {
              v50 &= v26 - 1;
            }
            uint64_t v49 = (char *)__p[0] + 8 * v50;
LABEL_106:
            *uint64_t v49 = v31;
          }
          ++*((void *)&v139 + 1);
LABEL_108:
          long long v133 = 0u;
          long long v134 = 0u;
          long long v131 = 0u;
          long long v132 = 0u;
          unint64_t v51 = [v127 dependentParameters];
          uint64_t v52 = [v51 countByEnumeratingWithState:&v131 objects:v141 count:16];
          if (v52)
          {
            uint64_t v53 = *(void *)v132;
            do
            {
              for (uint64_t k = 0; k != v52; ++k)
              {
                if (*(void *)v132 != v53) {
                  objc_enumerationMutation(v51);
                }
                unint64_t v55 = [*(id *)(*((void *)&v131 + 1) + 8 * k) longLongValue];
                int64_t v56 = (void *)v139;
                if ((void)v139)
                {
                  while (v56[2] != v55)
                  {
                    int64_t v56 = (void *)*v56;
                    if (!v56) {
                      goto LABEL_116;
                    }
                  }
                }
                else
                {
LABEL_116:
                  long long v130 = v55;
                  std::__tree<AUObserverController::AddressOriginator>::__emplace_unique_key_args<AUObserverController::AddressOriginator,AUObserverController::AddressOriginator>((uint64_t *)&v135, v55, 0, &v130);
                }
              }
              uint64_t v52 = [v51 countByEnumeratingWithState:&v131 objects:v141 count:16];
            }
            while (v52);
          }

          id v16 = v120;
        }

        uint64_t v7 = v125;
        id v6 = v122;
      }
      if (v118 != (uint64_t **)&v135)
      {
        uint64_t v58 = (uint64_t)v135;
        if (v4[9])
        {
          uint64_t v59 = *v118;
          *uint64_t v118 = v125;
          *(void *)(*v125 + 16) = 0;
          *float32x4_t v125 = 0;
          v125[1] = 0;
          if (v59[1]) {
            id v60 = (uint64_t *)v59[1];
          }
          else {
            id v60 = v59;
          }
          if (!v60)
          {
            int v66 = 0;
            goto LABEL_155;
          }
          BOOL v61 = std::__tree<AUObserverController::AddressOriginator>::_DetachedTreeCache::__detach_next((uint64_t)v60);
          if ((void **)v58 == v5)
          {
            uint64_t v58 = (uint64_t)v5;
          }
          else
          {
            uint64_t v62 = v58;
            do
            {
              double v63 = v60;
              id v60 = v61;
              *((_OWORD *)v63 + 2) = *(_OWORD *)(v62 + 32);
              leaf_high = (uint64_t **)std::__tree<AUObserverController::AddressOriginator>::__find_leaf_high((uint64_t)v118, &v130, v63[4], v63[5]);
              if (v61) {
                BOOL v61 = std::__tree<AUObserverController::AddressOriginator>::_DetachedTreeCache::__detach_next((uint64_t)v61);
              }
              else {
                BOOL v61 = 0;
              }
              AUEventSchedule v65 = *(void **)(v62 + 8);
              if (v65)
              {
                do
                {
                  uint64_t v58 = (uint64_t)v65;
                  AUEventSchedule v65 = (void *)*v65;
                }
                while (v65);
              }
              else
              {
                do
                {
                  uint64_t v58 = *(void *)(v62 + 16);
                  BOOL v11 = *(void *)v58 == v62;
                  uint64_t v62 = v58;
                }
                while (!v11);
              }
              if (!v60) {
                break;
              }
              uint64_t v62 = v58;
            }
            while ((void **)v58 != v5);
          }
          if (v61)
          {
            for (uint64_t m = (uint64_t *)v61[2]; m; uint64_t m = (uint64_t *)m[2])
              BOOL v61 = m;
            int v66 = v61;
LABEL_155:
          }
        }
        if ((void **)v58 != v5)
        {
          do
          {
            id v68 = operator new(0x30uLL);
            *((_OWORD *)v68 + 2) = *(_OWORD *)(v58 + 32);
            BOOL v69 = (uint64_t **)std::__tree<AUObserverController::AddressOriginator>::__find_leaf_high((uint64_t)v118, &v130, *((void *)v68 + 4), *((void *)v68 + 5));
            id v70 = *(void **)(v58 + 8);
            if (v70)
            {
              do
              {
                id v71 = v70;
                id v70 = (void *)*v70;
              }
              while (v70);
            }
            else
            {
              do
              {
                id v71 = *(void **)(v58 + 16);
                BOOL v11 = *v71 == v58;
                uint64_t v58 = (uint64_t)v71;
              }
              while (!v11);
            }
            uint64_t v58 = (uint64_t)v71;
          }
          while (v71 != v5);
        }
      }
      float32x4_t v136 = 0;
      uint64_t v137 = 0;
      float32x4_t v135 = v5;
    }
    while (v4[9]);
  }
  unint64_t v72 = v4[10];
  unint64_t v73 = v4[11];
  if (v72 == v73)
  {
    uint64_t v113 = 0;
    goto LABEL_240;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterAutomationEvent *,false>(v72, v73, 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v73 - v72) >> 3)), 1);
  uint64_t v74 = v4[10];
  uint64_t v123 = v4[11];
  if (v74 == v123) {
    goto LABEL_237;
  }
  locationa = (id *)(v4 + 2);
  uint64_t v75 = v4[10];
  do
  {
    uint64_t v126 = v74;
    uint64_t v76 = *(void *)(v74 + 8);
    while (*(void *)(v75 + 8) == v76)
    {
      v75 += 40;
      if (v75 == v123)
      {
        uint64_t v75 = v123;
        break;
      }
    }
    id v121 = objc_loadWeakRetained(locationa);
    uint64_t v119 = [v121 parameterWithAddress:v76];
    if (v119)
    {
      id v77 = v119;
      unint64_t v78 = 0xCCCCCCCCCCCCCCCDLL * ((v75 - v126) >> 3);
      id v115 = v77;
      while (1)
      {
        id v79 = (uint64_t **)objc_msgSend(v77, "observerList", v114, v115);
        if (v79)
        {
          if (v75 != v126)
          {
            uint64_t v80 = *v79;
            unint64_t v128 = v79[1];
            if (*v79 != v128) {
              break;
            }
          }
        }
LABEL_234:
        uint64_t v112 = [v77 parentNode];

        id v77 = (id)v112;
        if (!v112) {
          goto LABEL_235;
        }
      }
      id v81 = v77;
      while (1)
      {
        uint64_t v82 = *v80;
        if (*(unsigned char *)(*v80 + 8)) {
          break;
        }
LABEL_233:
        if (++v80 == v128) {
          goto LABEL_234;
        }
      }
      uint64_t v83 = *v80 & 0xFFFFFFFELL;
      if (*(void *)(v82 + 24))
      {
        if (v78 >> 59) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v84 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<KVOAggregator::Record>>(v78);
        int v86 = &v84[32 * v85];
        id v87 = v84;
        uint64_t v88 = v126;
        do
        {
          if (*(void *)(v88 + 32) != v83)
          {
            if (v84 >= v86)
            {
              uint64_t v90 = (v84 - v87) >> 5;
              unint64_t v91 = v90 + 1;
              if ((unint64_t)(v90 + 1) >> 59) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              if ((v86 - v87) >> 4 > v91) {
                unint64_t v91 = (v86 - v87) >> 4;
              }
              if ((unint64_t)(v86 - v87) >= 0x7FFFFFFFFFFFFFE0) {
                unint64_t v92 = 0x7FFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v92 = v91;
              }
              if (v92) {
                unint64_t v92 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<KVOAggregator::Record>>(v92);
              }
              else {
                uint64_t v93 = 0;
              }
              long long v94 = *(_OWORD *)(v88 + 16);
              long long v95 = (_OWORD *)(v92 + 32 * v90);
              *long long v95 = *(_OWORD *)v88;
              v95[1] = v94;
              if (v84 == v87)
              {
                float32x4_t v98 = (char *)(v92 + 32 * v90);
              }
              else
              {
                unint64_t v96 = v92 + 32 * v90;
                do
                {
                  long long v97 = *((_OWORD *)v84 - 1);
                  float32x4_t v98 = (char *)(v96 - 32);
                  *(_OWORD *)(v96 - 32) = *((_OWORD *)v84 - 2);
                  *(_OWORD *)(v96 - 16) = v97;
                  v84 -= 32;
                  v96 -= 32;
                }
                while (v84 != v87);
              }
              int v86 = (char *)(v92 + 32 * v93);
              uint64_t v84 = (char *)(v95 + 2);
              if (v87) {
                operator delete(v87);
              }
              id v87 = v98;
            }
            else
            {
              long long v89 = *(_OWORD *)(v88 + 16);
              *(_OWORD *)uint64_t v84 = *(_OWORD *)v88;
              *((_OWORD *)v84 + 1) = v89;
              v84 += 32;
            }
          }
          v88 += 40;
        }
        while (v88 != v75);
        if (v87 != v84)
        {
          id v77 = v81;
          (*(void (**)(void))(*(void *)(v82 + 24) + 16))();
          BOOL v4 = v129;
          goto LABEL_231;
        }
        id v87 = v84;
      }
      else
      {
        if (v78 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        int v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v78);
        id v101 = &v99[24 * v100];
        id v87 = v99;
        uint64_t v102 = v126;
        do
        {
          if (*(void *)(v102 + 32) != v83)
          {
            if (v99 >= v101)
            {
              unint64_t v104 = 0xAAAAAAAAAAAAAAABLL * ((v99 - v87) >> 3) + 1;
              if (v104 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * ((v101 - v87) >> 3) > v104) {
                unint64_t v104 = 0x5555555555555556 * ((v101 - v87) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((v101 - v87) >> 3) >= 0x555555555555555) {
                unint64_t v105 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v105 = v104;
              }
              if (v105) {
                unint64_t v105 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v105);
              }
              else {
                uint64_t v106 = 0;
              }
              int v107 = *(_DWORD *)(v102 + 16);
              unint64_t v108 = v105 + 8 * ((v99 - v87) >> 3);
              *(_OWORD *)unint64_t v108 = *(_OWORD *)v102;
              *(_DWORD *)(v108 + 16) = v107;
              if (v99 == v87)
              {
                uint64_t v111 = (char *)(v105 + 8 * ((v99 - v87) >> 3));
              }
              else
              {
                unint64_t v109 = v105 + 8 * ((v99 - v87) >> 3);
                do
                {
                  long long v110 = *(_OWORD *)(v99 - 24);
                  uint64_t v111 = (char *)(v109 - 24);
                  *(void *)(v109 - 8) = *((void *)v99 - 1);
                  *(_OWORD *)(v109 - 24) = v110;
                  v99 -= 24;
                  v109 -= 24;
                }
                while (v99 != v87);
              }
              id v101 = (char *)(v105 + 24 * v106);
              int v99 = (char *)(v108 + 24);
              if (v87) {
                operator delete(v87);
              }
              id v87 = v111;
            }
            else
            {
              int v103 = *(_DWORD *)(v102 + 16);
              *(_OWORD *)int v99 = *(_OWORD *)v102;
              *((_DWORD *)v99 + 4) = v103;
              v99 += 24;
            }
          }
          v102 += 40;
        }
        while (v102 != v75);
        if (v87 != v99) {
          (*(void (**)(void))(*(void *)(v82 + 16) + 16))();
        }
      }
      BOOL v4 = v129;
      id v77 = v81;
LABEL_231:
      unint64_t v78 = 0xCCCCCCCCCCCCCCCDLL * ((v75 - v126) >> 3);
      if (v87) {
        operator delete(v87);
      }
      goto LABEL_233;
    }
LABEL_235:

    uint64_t v74 = v75;
  }
  while (v75 != v123);
  uint64_t v74 = v4[10];
LABEL_237:
  v4[11] = v74;
  uint64_t v113 = v136;
LABEL_240:
LABEL_241:
  std::__shared_weak_count::__release_shared[abi:ne180100](v114);
}

void sub_1900975D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::__shared_weak_count *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,char a33)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](a9);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterAutomationEvent *,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
long long *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterAutomationEvent *>(long long *result, long long *a2, long long *a3)
{
  if (*a2 >= (unsigned __int128)*result)
  {
    if (*a3 < (unsigned __int128)*a2)
    {
      long long v8 = *a2;
      long long v9 = a2[1];
      uint64_t v10 = *((void *)a2 + 4);
      uint64_t v11 = *((void *)a3 + 4);
      long long v12 = a3[1];
      *a2 = *a3;
      a2[1] = v12;
      *((void *)a2 + 4) = v11;
      *((void *)a3 + 4) = v10;
      *a3 = v8;
      a3[1] = v9;
      if (*a2 < (unsigned __int128)*result)
      {
        long long v13 = *result;
        long long v14 = result[1];
        uint64_t v15 = *((void *)result + 4);
        uint64_t v16 = *((void *)a2 + 4);
        long long v17 = a2[1];
        *uint64_t result = *a2;
        result[1] = v17;
        *((void *)result + 4) = v16;
        *((void *)a2 + 4) = v15;
        *a2 = v13;
        a2[1] = v14;
      }
    }
  }
  else
  {
    if (*a3 < (unsigned __int128)*a2)
    {
      long long v3 = *result;
      long long v4 = result[1];
      uint64_t v5 = *((void *)result + 4);
      uint64_t v6 = *((void *)a3 + 4);
      long long v7 = a3[1];
      *uint64_t result = *a3;
      result[1] = v7;
      *((void *)result + 4) = v6;
    }
    else
    {
      long long v18 = *result;
      long long v19 = result[1];
      uint64_t v20 = *((void *)result + 4);
      uint64_t v21 = *((void *)a2 + 4);
      long long v22 = a2[1];
      *uint64_t result = *a2;
      result[1] = v22;
      *((void *)result + 4) = v21;
      *((void *)a2 + 4) = v20;
      *a2 = v18;
      a2[1] = v19;
      if (*a3 >= (unsigned __int128)*a2) {
        return result;
      }
      long long v3 = *a2;
      long long v4 = a2[1];
      uint64_t v5 = *((void *)a2 + 4);
      uint64_t v23 = *((void *)a3 + 4);
      long long v24 = a3[1];
      *a2 = *a3;
      a2[1] = v24;
      *((void *)a2 + 4) = v23;
    }
    *((void *)a3 + 4) = v5;
    *a3 = v3;
    a3[1] = v4;
  }
  return result;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterAutomationEvent *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterAutomationEvent *>((long long *)a1, (long long *)a2, (long long *)a3);
  if (*(_OWORD *)a4 < *(_OWORD *)a3)
  {
    __n128 result = *(__n128 *)a3;
    long long v9 = *(_OWORD *)(a3 + 16);
    uint64_t v10 = *(void *)(a3 + 32);
    uint64_t v11 = *(void *)(a4 + 32);
    long long v12 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v12;
    *(void *)(a3 + 32) = v11;
    *(void *)(a4 + 32) = v10;
    *(__n128 *)a4 = result;
    *(_OWORD *)(a4 + 16) = v9;
    if (*(_OWORD *)a3 < *(_OWORD *)a2)
    {
      __n128 result = *(__n128 *)a2;
      long long v13 = *(_OWORD *)(a2 + 16);
      uint64_t v14 = *(void *)(a2 + 32);
      uint64_t v15 = *(void *)(a3 + 32);
      long long v16 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v16;
      *(void *)(a2 + 32) = v15;
      *(void *)(a3 + 32) = v14;
      *(__n128 *)a3 = result;
      *(_OWORD *)(a3 + 16) = v13;
      if (*(_OWORD *)a2 < *(_OWORD *)a1)
      {
        __n128 result = *(__n128 *)a1;
        long long v17 = *(_OWORD *)(a1 + 16);
        uint64_t v18 = *(void *)(a1 + 32);
        uint64_t v19 = *(void *)(a2 + 32);
        long long v20 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v20;
        *(void *)(a1 + 32) = v19;
        *(void *)(a2 + 32) = v18;
        *(__n128 *)a2 = result;
        *(_OWORD *)(a2 + 16) = v17;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterAutomationEvent *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterAutomationEvent *>(a1, a2, a3, a4).n128_u64[0];
  if (*(_OWORD *)a5 < *(_OWORD *)a4)
  {
    __n128 result = *(__n128 *)a4;
    long long v11 = *(_OWORD *)(a4 + 16);
    uint64_t v12 = *(void *)(a4 + 32);
    uint64_t v13 = *(void *)(a5 + 32);
    long long v14 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)(a4 + 16) = v14;
    *(void *)(a4 + 32) = v13;
    *(void *)(a5 + 32) = v12;
    *(__n128 *)a5 = result;
    *(_OWORD *)(a5 + 16) = v11;
    if (*(_OWORD *)a4 < *(_OWORD *)a3)
    {
      __n128 result = *(__n128 *)a3;
      long long v15 = *(_OWORD *)(a3 + 16);
      uint64_t v16 = *(void *)(a3 + 32);
      uint64_t v17 = *(void *)(a4 + 32);
      long long v18 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v18;
      *(void *)(a3 + 32) = v17;
      *(void *)(a4 + 32) = v16;
      *(__n128 *)a4 = result;
      *(_OWORD *)(a4 + 16) = v15;
      if (*(_OWORD *)a3 < *(_OWORD *)a2)
      {
        __n128 result = *(__n128 *)a2;
        long long v19 = *(_OWORD *)(a2 + 16);
        uint64_t v20 = *(void *)(a2 + 32);
        uint64_t v21 = *(void *)(a3 + 32);
        long long v22 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v22;
        *(void *)(a2 + 32) = v21;
        *(void *)(a3 + 32) = v20;
        *(__n128 *)a3 = result;
        *(_OWORD *)(a3 + 16) = v19;
        if (*(_OWORD *)a2 < *(_OWORD *)a1)
        {
          __n128 result = *(__n128 *)a1;
          long long v23 = *(_OWORD *)(a1 + 16);
          uint64_t v24 = *(void *)(a1 + 32);
          uint64_t v25 = *(void *)(a2 + 32);
          long long v26 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v26;
          *(void *)(a1 + 32) = v25;
          *(void *)(a2 + 32) = v24;
          *(__n128 *)a2 = result;
          *(_OWORD *)(a2 + 16) = v23;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterAutomationEvent *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v6 = (long long *)(a2 - 40);
      if (*(_OWORD *)(a2 - 40) < *(_OWORD *)a1)
      {
        long long v7 = *(_OWORD *)a1;
        long long v8 = *(_OWORD *)(a1 + 16);
        uint64_t v9 = *(void *)(a1 + 32);
        uint64_t v10 = *(void *)(a2 - 8);
        long long v11 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *v6;
        *(_OWORD *)(a1 + 16) = v11;
        *(void *)(a1 + 32) = v10;
        *(void *)(a2 - 8) = v9;
        long long *v6 = v7;
        *(_OWORD *)(a2 - 24) = v8;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterAutomationEvent *>((long long *)a1, (long long *)(a1 + 40), (long long *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterAutomationEvent *>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterAutomationEvent *>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      uint64_t v12 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,ParameterAutomationEvent *>((long long *)a1, (long long *)(a1 + 40), (long long *)(a1 + 80));
      uint64_t v13 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    unint64_t v16 = *(void *)(v13 + 8);
    unint64_t v17 = *(void *)(v12 + 8);
    if (v16 < v17) {
      break;
    }
    if (v16 <= v17)
    {
      unint64_t v18 = *(void *)v13;
      if (*(void *)v13 < *(void *)v12) {
        goto LABEL_8;
      }
    }
LABEL_21:
    uint64_t v12 = v13;
    v14 += 40;
    v13 += 40;
    if (v13 == a2) {
      return 1;
    }
  }
  unint64_t v18 = *(void *)v13;
LABEL_8:
  uint64_t v27 = *(void *)(v13 + 32);
  long long v26 = *(_OWORD *)(v13 + 16);
  long long v19 = *(_OWORD *)(v12 + 16);
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v12;
  *(_OWORD *)(v13 + 16) = v19;
  *(void *)(v13 + 32) = *(void *)(v12 + 32);
  uint64_t v20 = a1;
  if (v12 != a1)
  {
    uint64_t v21 = v14;
    while (1)
    {
      uint64_t v22 = a1 + v21;
      long long v23 = (unint64_t *)(a1 + v21 + 40);
      unint64_t v24 = *(void *)(a1 + v21 + 48);
      if (v16 >= v24)
      {
        if (v16 > v24)
        {
          uint64_t v20 = v12;
          goto LABEL_20;
        }
        if (v18 >= *v23) {
          break;
        }
      }
      v12 -= 40;
      long long v25 = *(_OWORD *)(a1 + v21 + 56);
      *(_OWORD *)(v22 + 80) = *(_OWORD *)v23;
      *(_OWORD *)(v22 + 96) = v25;
      *(void *)(v22 + 112) = *(void *)(a1 + v21 + 72);
      v21 -= 40;
      if (v21 == -80)
      {
        uint64_t v20 = a1;
        goto LABEL_20;
      }
    }
    uint64_t v20 = a1 + v21 + 80;
  }
LABEL_20:
  *(void *)uint64_t v20 = v18;
  *(void *)(v20 + 8) = v16;
  *(_OWORD *)(v20 + 16) = v26;
  *(void *)(v20 + 32) = v27;
  if (++v15 != 8) {
    goto LABEL_21;
  }
  return v13 + 40 == a2;
}

void *std::__tree<AUObserverController::AddressOriginator>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  BOOL result = *(void **)(a1 + 16);
  if (result)
  {
    long long v3 = (void *)*result;
    if (*result == a1)
    {
      *BOOL result = 0;
      while (1)
      {
        uint64_t v4 = (void *)result[1];
        if (!v4) {
          break;
        }
        do
        {
          BOOL result = v4;
          uint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; long long v3 = (void *)result[1])
      {
        do
        {
          BOOL result = v3;
          long long v3 = (void *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

void *std::__tree<AUObserverController::AddressOriginator>::__find_leaf_high(uint64_t a1, void *a2, unint64_t a3, unint64_t a4)
{
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t v4 = (void *)(a1 + 8);
  uint64_t v5 = v6;
  if (v6)
  {
    do
    {
      while (1)
      {
        uint64_t v4 = v5;
        unint64_t v7 = v5[4];
        if (v7 <= a3 && (v7 < a3 || v5[5] <= a4)) {
          break;
        }
        uint64_t v5 = (void *)*v5;
        long long v8 = v4;
        if (!*v4) {
          goto LABEL_10;
        }
      }
      uint64_t v5 = (void *)v5[1];
    }
    while (v5);
    long long v8 = v4 + 1;
  }
  else
  {
    long long v8 = v4;
  }
LABEL_10:
  *a2 = v4;
  return v8;
}

void std::__function::__func<AUObserverController::parameterChanged(EParamChangeFlags,unsigned long long,float,AUParameterObserverExtendedToken const&,unsigned long long,AUParameterAutomationEventType)::{lambda(void)#1},std::allocator<AUObserverController::parameterChanged(EParamChangeFlags,unsigned long long,float,AUParameterObserverExtendedToken const&,unsigned long long,AUParameterAutomationEventType)::{lambda(void)#1}>,void ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<AUObserverController::parameterChanged(EParamChangeFlags,unsigned long long,float,AUParameterObserverExtendedToken const&,unsigned long long,AUParameterAutomationEventType)::{lambda(void)#1},std::allocator<AUObserverController::parameterChanged(EParamChangeFlags,unsigned long long,float,AUParameterObserverExtendedToken const&,unsigned long long,AUParameterAutomationEventType)::{lambda(void)#1}>,void ()(void)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t std::__function::__func<AUObserverController::parameterChanged(EParamChangeFlags,unsigned long long,float,AUParameterObserverExtendedToken const&,unsigned long long,AUParameterAutomationEventType)::{lambda(void)#1},std::allocator<AUObserverController::parameterChanged(EParamChangeFlags,unsigned long long,float,AUParameterObserverExtendedToken const&,unsigned long long,AUParameterAutomationEventType)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1EDFA0888;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AUObserverController::parameterChanged(EParamChangeFlags,unsigned long long,float,AUParameterObserverExtendedToken const&,unsigned long long,AUParameterAutomationEventType)::{lambda(void)#1},std::allocator<AUObserverController::parameterChanged(EParamChangeFlags,unsigned long long,float,AUParameterObserverExtendedToken const&,unsigned long long,AUParameterAutomationEventType)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *BOOL result = &unk_1EDFA0888;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AUObserverController::parameterChanged(EParamChangeFlags,unsigned long long,float,AUParameterObserverExtendedToken const&,unsigned long long,AUParameterAutomationEventType)::{lambda(void)#1},std::allocator<AUObserverController::parameterChanged(EParamChangeFlags,unsigned long long,float,AUParameterObserverExtendedToken const&,unsigned long long,AUParameterAutomationEventType)::{lambda(void)#1}>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1EDFA0888;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x192FC8940);
}

void *std::__function::__func<AUObserverController::parameterChanged(EParamChangeFlags,unsigned long long,float,AUParameterObserverExtendedToken const&,unsigned long long,AUParameterAutomationEventType)::{lambda(void)#1},std::allocator<AUObserverController::parameterChanged(EParamChangeFlags,unsigned long long,float,AUParameterObserverExtendedToken const&,unsigned long long,AUParameterAutomationEventType)::{lambda(void)#1}>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1EDFA0888;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void ___ZN5caulk3xpc7messageIU8__strongPU44objcproto33_AURemoteParameterSynchronization11objc_objectJEE11async_proxyEv_block_invoke(uint64_t a1, void *a2)
{
  _ZNKSt3__18functionIFvP7NSErrorONS_5tupleIJEEEEEclES2_S5_(a1 + 32, a2, (uint64_t)&v2);
}

void sub_190098D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_190098E8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_190098F9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_190099094(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_190099258(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_190099368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_190099450(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19009957C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1900996FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_190099948(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_190099A78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_190099B20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_190099D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_190099EC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19009A038(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19009A284(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19009A324(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19009A3C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19009A42C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19009A4C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19009A5C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ChunkyAudioFile::WriteChunkData(void **a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = *(unsigned int *)(a2 + 4);
  uint64_t v7 = *(void *)(a2 + 16) + v6;
  uint64_t v8 = *(void *)(a2 + 8) - v6;
  uint64_t v14 = 0;
  uint64_t result = (*(uint64_t (**)(void *, void, uint64_t, uint64_t, uint64_t, uint64_t *))(*a1[13] + 72))(a1[13], 0, v7, v8, a3, &v14);
  *a4 = v14;
  if (!result)
  {
    unint64_t v10 = ((uint64_t (*)(void **, uint64_t))(*a1)[99])(a1, v8) - v8;
    if (v10)
    {
      unsigned int v13 = 0;
      uint64_t v11 = *a4 + v7;
      while (1)
      {
        uint64_t v12 = v10 >= 8 ? 8 : v10;
        uint64_t result = (*(uint64_t (**)(void *, void, uint64_t, uint64_t, void *, unsigned int *))(*a1[13] + 56))(a1[13], 0, v11, v12, &ChunkyAudioFile::WriteChunkData(ChunkInfo64 *,void const*,unsigned long long *)::sZeros, &v13);
        if (result) {
          break;
        }
        v11 += v13;
        v10 -= v13;
        if (!v10) {
          return 0;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t ChunkyAudioFile::WriteChunkHeader(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (*(_DWORD *)(a2 + 4) != 8) {
    return 1869627199;
  }
  unint64_t v5 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  if (v5 > 0xFFFFFFF7) {
    unsigned int v6 = -1;
  }
  else {
    unsigned int v6 = v5 - 8;
  }
  unsigned int v7 = bswap32(*(_DWORD *)a2);
  unsigned int v8 = bswap32(v6);
  if (*(unsigned char *)(a1 + 189)) {
    unsigned int v6 = v8;
  }
  v11[0] = v7;
  v11[1] = v6;
  int v10 = 0;
  uint64_t result = (*(uint64_t (**)(void, void, uint64_t, uint64_t, _DWORD *, int *))(**(void **)(a1 + 104) + 56))(*(void *)(a1 + 104), 0, v4, 8, v11, &v10);
  *a3 = v10;
  return result;
}

uint64_t ChunkyAudioFile::AddUniqueChunk(ChunkyAudioFile *this, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t result = ChunkyAudioFile::ReplaceChunk(this, a2, 0, a3, a4);
  if (result == -1)
  {
    uint64_t v9 = *(uint64_t (**)(ChunkyAudioFile *, uint64_t, uint64_t, const void *))(*(void *)this + 760);
    return v9(this, a2, a3, a4);
  }
  return result;
}

uint64_t ChunkyAudioFile::ReplaceChunk(ChunkyAudioFile *this, uint64_t a2, int a3, unint64_t a4, const void *a5)
{
  if (a4 > 0xFFFFFFFE) {
    return 1869627199;
  }
  uint64_t v7 = *((void *)this + 18);
  uint64_t v8 = *((void *)this + 19);
  uint64_t v9 = v8 - v7;
  if (v8 == v7) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v13 = 0;
  int v14 = 0;
  unint64_t v15 = *((unsigned int *)this + 45) + a4;
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 3);
  uint64_t v22 = 0;
  int v21 = 0;
  unsigned int v17 = 1;
  while (1)
  {
    unint64_t v18 = (_DWORD *)(v7 + 24 * v13);
    if (*v18 == a2) {
      break;
    }
LABEL_8:
    uint64_t v13 = v17;
    if (v16 <= v17++) {
      return 0xFFFFFFFFLL;
    }
  }
  if (v14 != a3)
  {
    ++v14;
    goto LABEL_8;
  }
  if (v15 == *(void *)(v7 + 24 * v13 + 8))
  {
    uint64_t result = (*(uint64_t (**)(ChunkyAudioFile *, _DWORD *, int *))(*(void *)this + 776))(this, v18, &v21);
    if (!result) {
      return (*(uint64_t (**)(ChunkyAudioFile *, _DWORD *, const void *, uint64_t *))(*(void *)this + 784))(this, v18, a5, &v22);
    }
  }
  else
  {
    *unint64_t v18 = 1179405394;
    ChunkyAudioFile::ConsolidateFillerChunks(this);
    uint64_t v20 = *(uint64_t (**)(ChunkyAudioFile *, uint64_t, unint64_t, const void *))(*(void *)this + 760);
    return v20(this, a2, a4, a5);
  }
  return result;
}

void ChunkyAudioFile::ConsolidateFillerChunks(ChunkyAudioFile *this)
{
  uint64_t v1 = *((void *)this + 18);
  long long v23 = (void *)((char *)this + 144);
  uint64_t v2 = *((void *)this + 19) - v1;
  if (v2)
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    unint64_t v6 = 0;
    uint64_t v7 = 0;
    LODWORD(v8) = 0;
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (v2 >> 3);
    do
    {
      unint64_t v10 = (v8 + 1);
      uint64_t v11 = (long long *)(v1 + 24 * v7);
      uint64_t v12 = *((void *)v11 + 2);
      long long v25 = *v11;
      uint64_t v26 = v12;
      if (v25 == 1179405394)
      {
        if (v9 <= v10)
        {
          LODWORD(v8) = v8 + 1;
        }
        else
        {
          uint64_t v13 = *((void *)&v25 + 1);
          LODWORD(v8) = v8 + 1;
          do
          {
            if (*(_DWORD *)(v1 + 24 * v10) != 1179405394) {
              break;
            }
            unint64_t v8 = (v8 + 1);
            v13 += *(void *)(v1 + 24 * v10 + 8);
            *((void *)&v25 + 1) = v13;
            unint64_t v10 = v8;
          }
          while (v9 > v8);
        }
        int v24 = 0;
        (*(void (**)(ChunkyAudioFile *, long long *, int *))(*(void *)this + 776))(this, &v25, &v24);
      }
      else
      {
        LODWORD(v8) = v8 + 1;
      }
      if ((unint64_t)v5 >= v6)
      {
        unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 3) + 1;
        if (v15 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((uint64_t)(v6 - (void)v4) >> 3) > v15) {
          unint64_t v15 = 0x5555555555555556 * ((uint64_t)(v6 - (void)v4) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)v4) >> 3) >= 0x555555555555555) {
          unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v16 = v15;
        }
        if (v16) {
          unint64_t v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v16);
        }
        else {
          uint64_t v17 = 0;
        }
        long long v18 = v25;
        unint64_t v19 = v16 + 8 * ((v5 - v4) >> 3);
        *(void *)(v19 + 16) = v26;
        *(_OWORD *)unint64_t v19 = v18;
        if (v5 == v4)
        {
          uint64_t v22 = (char *)(v16 + 8 * ((v5 - v4) >> 3));
        }
        else
        {
          unint64_t v20 = v16 + 8 * ((v5 - v4) >> 3);
          do
          {
            long long v21 = *(_OWORD *)(v5 - 24);
            uint64_t v22 = (char *)(v20 - 24);
            *(void *)(v20 - 8) = *((void *)v5 - 1);
            *(_OWORD *)(v20 - 24) = v21;
            v5 -= 24;
            v20 -= 24;
          }
          while (v5 != v4);
        }
        unint64_t v6 = v16 + 24 * v17;
        unint64_t v5 = (char *)(v19 + 24);
        if (v4) {
          operator delete(v4);
        }
        uint64_t v4 = v22;
      }
      else
      {
        long long v14 = v25;
        *((void *)v5 + 2) = v26;
        *(_OWORD *)unint64_t v5 = v14;
        v5 += 24;
      }
      uint64_t v7 = v8;
      uint64_t v1 = *((void *)this + 18);
      unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 19) - v1) >> 3);
    }
    while (v9 > v8);
  }
  else
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
  }
  std::vector<ChunkInfo64>::__assign_with_size[abi:ne180100]<ChunkInfo64*,ChunkInfo64*>(v23, v4, v5, 0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 3));
  if (v4) {
    operator delete(v4);
  }
}

void sub_19009ACCC(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<ChunkInfo64>::__assign_with_size[abi:ne180100]<ChunkInfo64*,ChunkInfo64*>(void *result, char *__src, char *a3, unint64_t a4)
{
  unint64_t v6 = __src;
  uint64_t v7 = result;
  uint64_t v8 = result[2];
  unint64_t v9 = (char *)*result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *result) >> 3) < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_23;
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    unint64_t v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL) {
LABEL_23:
    }
      std::vector<float>::__throw_length_error[abi:ne180100]();
    uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v12);
    unint64_t v9 = (char *)result;
    *uint64_t v7 = result;
    v7[1] = result;
    v7[2] = &result[3 * v13];
    size_t v14 = a3 - v6;
    if (v14) {
      uint64_t result = memmove(result, v6, v14);
    }
    unint64_t v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  unint64_t v15 = (void **)(result + 1);
  unint64_t v16 = (unsigned char *)result[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v16 - v9) >> 3) >= a4)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_22;
    }
    long long v18 = (void *)*result;
LABEL_21:
    uint64_t result = memmove(v18, __src, v14);
    goto LABEL_22;
  }
  uint64_t v17 = &__src[8 * ((v16 - v9) >> 3)];
  if (v16 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v16 - v9);
    unint64_t v9 = (char *)*v15;
  }
  size_t v14 = a3 - v17;
  if (v14)
  {
    long long v18 = v9;
    unsigned __int8 __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  long long *v15 = &v9[v14];
  return result;
}

uint64_t ChunkyAudioFile::AddUserChunk(ChunkyAudioFile *this, unsigned int a2, int a3, const void *a4)
{
  uint64_t v45 = 0;
  int v44 = 0;
  uint64_t v6 = (*((_DWORD *)this + 45) + a3);
  uint64_t v42 = (*(uint64_t (**)(ChunkyAudioFile *, uint64_t))(*(void *)this + 792))(this, v6);
  unsigned int v39 = a2;
  *(void *)&long long v46 = __PAIR64__(*((_DWORD *)this + 45), a2);
  *((void *)&v46 + 1) = v6;
  uint64_t v7 = (*(uint64_t (**)(ChunkyAudioFile *, uint64_t))(*(void *)this + 792))(this, v6);
  uint64_t v8 = *((void *)this + 18);
  uint64_t v40 = (char **)((char *)this + 144);
  if (*((void *)this + 19) == v8) {
    goto LABEL_19;
  }
  uint64_t v9 = v7;
  uint64_t v10 = 0;
  unsigned int v11 = 0;
  unint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
  unsigned int v13 = -1;
  do
  {
    if (*(_DWORD *)(v8 + 24 * v10) != 1179405394) {
      goto LABEL_10;
    }
    uint64_t v14 = (*(uint64_t (**)(ChunkyAudioFile *, void))(*(void *)this + 792))(this, *(void *)(v8 + 24 * v10 + 8));
    unint64_t v15 = v14 - v9;
    if (v14 == v9)
    {
      if (v12) {
        goto LABEL_9;
      }
    }
    else if (v15 > *((unsigned int *)this + 45) && v15 < v12)
    {
LABEL_9:
      unint64_t v12 = v14 - v9;
      unsigned int v13 = v11;
    }
LABEL_10:
    uint64_t v8 = *((void *)this + 18);
    uint64_t v10 = ++v11;
  }
  while (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 19) - v8) >> 3) > v11);
  if (v13 != -1 && v8)
  {
    uint64_t v17 = v8 + 24 * v13;
    uint64_t v19 = *(void *)(v17 + 8);
    long long v18 = (void *)(v17 + 8);
    uint64_t v20 = (*(uint64_t (**)(ChunkyAudioFile *, uint64_t))(*(void *)this + 792))(this, v19);
    if (v20 == v42)
    {
      *(_DWORD *)(v8 + 24 * v13) = v39;
      *long long v18 = v6;
      uint64_t result = (*(uint64_t (**)(ChunkyAudioFile *, uint64_t, int *))(*(void *)this + 776))(this, v8 + 24 * v13, &v44);
      if (!result) {
        return (*(uint64_t (**)(ChunkyAudioFile *, uint64_t, const void *, uint64_t *))(*(void *)this + 784))(this, v8 + 24 * v13, a4, &v45);
      }
      return result;
    }
    uint64_t v31 = v8 + 24 * v13;
    uint64_t v47 = *(void *)(v31 + 16);
    uint64_t v32 = v47;
    *long long v18 = v20 - v42;
    *(void *)(v31 + 16) = v32 + v42;
    uint64_t result = (*(uint64_t (**)(ChunkyAudioFile *, uint64_t, int *))(*(void *)this + 776))(this, v31, &v44);
    if (!result)
    {
      uint64_t result = (*(uint64_t (**)(ChunkyAudioFile *, long long *, int *))(*(void *)this + 776))(this, &v46, &v44);
      if (!result)
      {
        uint64_t result = (*(uint64_t (**)(ChunkyAudioFile *, long long *, const void *, uint64_t *))(*(void *)this + 784))(this, &v46, a4, &v45);
        if (!result)
        {
          std::vector<ChunkInfo64>::insert((uint64_t)v40, &(*v40)[24 * v13], (unint64_t)&v46);
          return 0;
        }
      }
    }
    return result;
  }
LABEL_19:
  uint64_t v43 = 0;
  uint64_t result = (*(uint64_t (**)(void, uint64_t *))(**((void **)this + 13) + 24))(*((void *)this + 13), &v43);
  if (!result)
  {
    uint64_t v47 = v43;
    unint64_t v23 = *((void *)this + 19);
    unint64_t v22 = *((void *)this + 20);
    if (v23 >= v22)
    {
      unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - (void)*v40) >> 3);
      unint64_t v27 = v26 + 1;
      if (v26 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - (void)*v40) >> 3);
      if (2 * v28 > v27) {
        unint64_t v27 = 2 * v28;
      }
      if (v28 >= 0x555555555555555) {
        unint64_t v29 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v29 = v27;
      }
      if (v29) {
        unint64_t v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v29);
      }
      else {
        uint64_t v30 = 0;
      }
      unint64_t v33 = v29 + 24 * v26;
      unint64_t v34 = v29 + 24 * v30;
      long long v35 = v46;
      *(void *)(v33 + 16) = v47;
      *(_OWORD *)unint64_t v33 = v35;
      unint64_t v25 = v33 + 24;
      long long v37 = (char *)*((void *)this + 18);
      unint64_t v36 = (char *)*((void *)this + 19);
      if (v36 != v37)
      {
        do
        {
          long long v38 = *(_OWORD *)(v36 - 24);
          *(void *)(v33 - 8) = *((void *)v36 - 1);
          *(_OWORD *)(v33 - 24) = v38;
          v33 -= 24;
          v36 -= 24;
        }
        while (v36 != v37);
        unint64_t v36 = *v40;
      }
      *((void *)this + 18) = v33;
      *((void *)this + 19) = v25;
      *((void *)this + 20) = v34;
      if (v36) {
        operator delete(v36);
      }
    }
    else
    {
      long long v24 = v46;
      *(void *)(v23 + 16) = v47;
      *(_OWORD *)unint64_t v23 = v24;
      unint64_t v25 = v23 + 24;
    }
    *((void *)this + 19) = v25;
    uint64_t result = (*(uint64_t (**)(ChunkyAudioFile *, long long *, int *))(*(void *)this + 776))(this, &v46, &v44);
    if (!result)
    {
      uint64_t result = (*(uint64_t (**)(ChunkyAudioFile *, long long *, const void *, uint64_t *))(*(void *)this
                                                                                                 + 784))(this, &v46, a4, &v45);
      if (!result)
      {
        *((_DWORD *)this + 20) = 0;
        (*(void (**)(ChunkyAudioFile *))(*(void *)this + 64))(this);
        return 0;
      }
    }
  }
  return result;
}

void std::vector<ChunkInfo64>::insert(uint64_t a1, char *__src, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v6 = *(char **)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    unint64_t v12 = *(char **)a1;
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v13 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = __src - v12;
    int64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((__src - v12) >> 3);
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)v12) >> 3);
    if (2 * v16 > v13) {
      unint64_t v13 = 2 * v16;
    }
    if (v16 >= 0x555555555555555) {
      unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v17 = v13;
    }
    if (v17)
    {
      uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v17);
    }
    else
    {
      uint64_t v19 = 0;
      uint64_t v18 = 0;
    }
    unint64_t v22 = &v19[24 * v15];
    unint64_t v23 = &v19[24 * v18];
    if (v15 == v18)
    {
      if (v14 < 1)
      {
        if (v12 == __src) {
          unint64_t v25 = 1;
        }
        else {
          unint64_t v25 = 2 * v15;
        }
        unint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v25);
        unint64_t v22 = &v26[24 * (v25 >> 2)];
        unint64_t v23 = &v26[24 * v27];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        uint64_t v24 = v15 + 2;
        if (v15 >= -1) {
          uint64_t v24 = v15 + 1;
        }
        v22 -= 24 * (v24 >> 1);
      }
    }
    long long v28 = *(_OWORD *)v3;
    *((void *)v22 + 2) = *(void *)(v3 + 16);
    *(_OWORD *)unint64_t v22 = v28;
    unint64_t v29 = *(char **)a1;
    uint64_t v30 = v22;
    if (*(char **)a1 != __src)
    {
      uint64_t v31 = __src;
      uint64_t v32 = v22;
      do
      {
        long long v33 = *(_OWORD *)(v31 - 24);
        uint64_t v30 = v32 - 24;
        *((void *)v32 - 1) = *((void *)v31 - 1);
        *(_OWORD *)(v32 - 24) = v33;
        v31 -= 24;
        v32 -= 24;
      }
      while (v31 != v29);
    }
    unint64_t v34 = *(unsigned char **)(a1 + 8);
    uint64_t v35 = v34 - __src;
    if (v34 != __src) {
      memmove(v22 + 24, __src, v34 - __src);
    }
    unint64_t v36 = *(char **)a1;
    *(void *)a1 = v30;
    *(void *)(a1 + 8) = &v22[v35 + 24];
    *(void *)(a1 + 16) = v23;
    if (v36)
    {
      operator delete(v36);
    }
  }
  else if (__src == v6)
  {
    long long v21 = *(_OWORD *)a3;
    *((void *)__src + 2) = *(void *)(a3 + 16);
    *(_OWORD *)unsigned __int8 __src = v21;
    *(void *)(a1 + 8) = __src + 24;
  }
  else
  {
    uint64_t v8 = __src + 24;
    uint64_t v9 = v6 - 24;
    uint64_t v10 = *(void *)(a1 + 8);
    while (v9 < v6)
    {
      long long v11 = *(_OWORD *)v9;
      *(void *)(v10 + 16) = *((void *)v9 + 2);
      *(_OWORD *)uint64_t v10 = v11;
      v10 += 24;
      v9 += 24;
    }
    *(void *)(a1 + 8) = v10;
    if (v6 != v8) {
      memmove(__src + 24, __src, v6 - v8);
    }
    if ((unint64_t)__src <= v3) {
      v3 += 24 * (*(void *)(a1 + 8) > v3);
    }
    long long v20 = *(_OWORD *)v3;
    *((void *)__src + 2) = *(void *)(v3 + 16);
    *(_OWORD *)unsigned __int8 __src = v20;
  }
}

void sub_19009B664(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ChunkyAudioFile::GetUserChunk(ChunkyAudioFile *this, int a2, int a3, unint64_t a4, unsigned int *a5, void *a6)
{
  if ((a4 & 0x8000000000000000) != 0) {
    return 4294967256;
  }
  uint64_t v6 = 1667787583;
  uint64_t v7 = *((void *)this + 18);
  uint64_t v8 = *((void *)this + 19);
  uint64_t v9 = v8 - v7;
  if (v8 == v7) {
    return v6;
  }
  uint64_t v11 = 0;
  int v12 = 0;
  unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 3);
  unsigned int v14 = 1;
  while (*(_DWORD *)(v7 + 24 * v11) != a2)
  {
LABEL_7:
    uint64_t v11 = v14;
    BOOL v15 = v13 > v14++;
    if (!v15) {
      return v6;
    }
  }
  if (v12 != a3)
  {
    ++v12;
    goto LABEL_7;
  }
  unint64_t v17 = *a5;
  if (!v17) {
    return 561211770;
  }
  uint64_t v18 = v7 + 24 * v11;
  uint64_t v19 = *(unsigned int *)(v18 + 4);
  unint64_t v20 = *(void *)(v18 + 8) - v19;
  BOOL v15 = v20 > a4;
  unint64_t v21 = v20 - a4;
  if (!v15) {
    return 4294967256;
  }
  uint64_t v22 = *(void *)(v18 + 16);
  if (v21 <= v17) {
    unint64_t v17 = v21;
  }
  else {
    unint64_t v17 = v17;
  }
  unsigned int v23 = v17;
  (*(void (**)(void, void, unint64_t, unint64_t, void *, unsigned int *))(**((void **)this + 13) + 48))(*((void *)this + 13), 0, v19 + a4 + v22, v17, a6, &v23);
  uint64_t v6 = 0;
  *a5 = v23;
  return v6;
}

uint64_t ChunkyAudioFile::GetUserChunkSize64(ChunkyAudioFile *this, int a2, int a3, unint64_t *a4)
{
  uint64_t result = 1667787583;
  uint64_t v8 = (char *)this + 144;
  uint64_t v6 = *((void *)this + 18);
  uint64_t v7 = *((void *)v8 + 1);
  uint64_t v9 = v7 - v6;
  if (v7 != v6)
  {
    uint64_t v10 = 0;
    int v11 = 0;
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 3);
    unsigned int v13 = 1;
    do
    {
      if (*(_DWORD *)(v6 + 24 * v10) == a2)
      {
        if (v11 == a3)
        {
          uint64_t v15 = v6 + 24 * v10;
          uint64_t v16 = *(unsigned int *)(v15 + 4);
          uint64_t v17 = *(void *)(v15 + 8);
          if (!__CFADD__(v16, v17))
          {
            uint64_t result = 0;
            *a4 = v17 - v16;
          }
          return result;
        }
        ++v11;
      }
      uint64_t v10 = v13;
    }
    while (v12 > v13++);
  }
  return result;
}

uint64_t ChunkyAudioFile::RemoveUserData(ChunkyAudioFile *this, int a2, int a3)
{
  uint64_t v6 = 1667787583;
  if ((*(unsigned int (**)(ChunkyAudioFile *))(*(void *)this + 728))(this) != a2)
  {
    uint64_t v7 = *((void *)this + 18);
    uint64_t v8 = *((void *)this + 19);
    uint64_t v9 = v8 - v7;
    if (v8 != v7)
    {
      uint64_t v10 = 0;
      int v11 = 0;
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 3);
      unsigned int v13 = 1;
      do
      {
        unsigned int v14 = (_DWORD *)(v7 + 24 * v10);
        if (*v14 == a2)
        {
          if (v11 == a3)
          {
            _DWORD *v14 = 1179405394;
            ChunkyAudioFile::ConsolidateFillerChunks(this);
            return 0;
          }
          ++v11;
        }
        uint64_t v10 = v13;
      }
      while (v12 > v13++);
    }
  }
  return v6;
}

uint64_t ChunkyAudioFile::SetUserData(ChunkyAudioFile *this, uint64_t a2, int a3, uint64_t a4, const void *a5)
{
  if ((*(unsigned int (**)(ChunkyAudioFile *))(*(void *)this + 728))(this) == a2) {
    return 1667787583;
  }
  uint64_t result = ChunkyAudioFile::ReplaceChunk(this, a2, a3, a4, a5);
  if (result == -1)
  {
    int v11 = *(uint64_t (**)(ChunkyAudioFile *, uint64_t, uint64_t, const void *))(*(void *)this + 760);
    return v11(this, a2, a4, a5);
  }
  return result;
}

uint64_t ChunkyAudioFile::GetUserDataAtOffset(ChunkyAudioFile *this, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, void *a6)
{
  if ((*(unsigned int (**)(ChunkyAudioFile *))(*(void *)this + 728))(this) == a2)
  {
    if (a5) {
      *a5 = 0;
    }
    return 0;
  }
  else
  {
    unsigned int v13 = *(uint64_t (**)(ChunkyAudioFile *, uint64_t, uint64_t, uint64_t, unsigned int *, void *))(*(void *)this + 752);
    return v13(this, a2, a3, a4, a5, a6);
  }
}

uint64_t ChunkyAudioFile::GetUserData(ChunkyAudioFile *this, uint64_t a2, uint64_t a3, unsigned int *a4, void *a5)
{
  if ((*(unsigned int (**)(ChunkyAudioFile *))(*(void *)this + 728))(this) == a2)
  {
    if (a4) {
      *a4 = 0;
    }
    return 0;
  }
  else
  {
    int v11 = *(uint64_t (**)(ChunkyAudioFile *, uint64_t, uint64_t, void, unsigned int *, void *))(*(void *)this + 752);
    return v11(this, a2, a3, 0, a4, a5);
  }
}

uint64_t ChunkyAudioFile::GetUserDataSize64(ChunkyAudioFile *this, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  if ((*(unsigned int (**)(ChunkyAudioFile *))(*(void *)this + 728))(this) == a2)
  {
    if (a4) {
      *a4 = 0;
    }
    return 1667787583;
  }
  else
  {
    uint64_t v9 = *(uint64_t (**)(ChunkyAudioFile *, uint64_t, uint64_t, unint64_t *))(*(void *)this + 744);
    return v9(this, a2, a3, a4);
  }
}

uint64_t ChunkyAudioFile::GetUserDataSize(ChunkyAudioFile *this, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  if ((*(unsigned int (**)(ChunkyAudioFile *))(*(void *)this + 728))(this) == a2)
  {
    if (a4) {
      *a4 = 0;
    }
    return 1667787583;
  }
  else
  {
    uint64_t v9 = *(uint64_t (**)(ChunkyAudioFile *, uint64_t, uint64_t, unsigned int *))(*(void *)this + 736);
    return v9(this, a2, a3, a4);
  }
}

uint64_t ChunkyAudioFile::CountUserData(ChunkyAudioFile *this, int a2, unsigned int *a3)
{
  if ((*(unsigned int (**)(ChunkyAudioFile *))(*(void *)this + 728))(this) == a2)
  {
    unsigned int v6 = 0;
    uint64_t result = 1667787583;
  }
  else
  {
    uint64_t v9 = (char *)*((void *)this + 18);
    uint64_t v8 = (char *)*((void *)this + 19);
    uint64_t v10 = v8 - v9;
    if (v8 == v9)
    {
      unsigned int v6 = 0;
    }
    else
    {
      unsigned int v6 = 0;
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (v10 >> 3);
      unsigned int v12 = 1;
      do
      {
        int v13 = *(_DWORD *)v9;
        v9 += 24;
        if (v13 == a2) {
          ++v6;
        }
      }
      while (v11 > v12++);
    }
    uint64_t result = 0;
  }
  *a3 = v6;
  return result;
}

uint64_t ChunkyAudioFile::SetLoudnessInfo(ChunkyAudioFile *this, CFPropertyListRef *a2)
{
  CFDataRef theData = CFPropertyListCreateXMLData((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *a2);
  char v8 = 1;
  CFIndex Length = CFDataGetLength(theData);
  BytePtr = CFDataGetBytePtr(theData);
  uint64_t v5 = (*(uint64_t (**)(ChunkyAudioFile *, uint64_t, CFIndex, const UInt8 *))(*(void *)this + 768))(this, 1819243876, Length, BytePtr);
  CACFData::~CACFData((CACFData *)&theData);
  return v5;
}

void sub_19009BEF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t CACFObject<void const*>::~CACFObject(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v2 = *(const void **)a1;
    if (*(void *)a1)
    {
      CFRelease(v2);
      *(void *)a1 = 0;
    }
  }
  return a1;
}

uint64_t AudioFileObject::UpdateSize(AudioFileObject *this)
{
  return 0;
}

uint64_t ChunkyAudioFile::SetProperty(ChunkyAudioFile *this, int a2, unsigned int a3, uint64_t *a4)
{
  if (a2 == 1920168566)
  {
    uint64_t result = 1869627199;
    if ((*((unsigned char *)this + 100) & 2) == 0) {
      return result;
    }
    uint64_t v7 = *((void *)this + 15);
    if (v7)
    {
      if (*(void *)(v7 + 24)) {
        return result;
      }
    }
    if (a3 < 8) {
      return 561211770;
    }
    double v8 = *(double *)a4;
    if (((*(uint64_t (**)(ChunkyAudioFile *))(*(void *)this + 808))(this) & 1) != 0
      || (uint64_t)(v8 * *((double *)this + 3)) * *((unsigned int *)this + 12) <= 0xFFFFFFFFLL)
    {
      return 0;
    }
    else
    {
      return 1868981823;
    }
  }
  else
  {
    if (a2 == 1751217000)
    {
      if (a3 == 20)
      {
        uint64_t v5 = *(uint64_t (**)(void))(*(void *)this + 592);
        return v5();
      }
      return 561211770;
    }
    return AudioFileObject::SetProperty(this, a2, a3, a4);
  }
}

uint64_t ChunkyAudioFile::Optimize(ChunkyAudioFile *this)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 136) && !(*(unsigned int (**)(ChunkyAudioFile *))(*(void *)this + 216))(this)) {
    *((unsigned char *)this + 136) = 0;
  }
  uint64_t v64 = 0;
  unint64_t v3 = (int *)*((void *)this + 18);
  uint64_t v2 = (int *)*((void *)this + 19);
  if (v3 == v2)
  {
    size_t v4 = 0;
  }
  else
  {
    size_t v4 = 0;
    do
    {
      int v5 = *v3;
      if (*v3 == *((_DWORD *)this + 42))
      {
        v4 += *((unsigned int *)this + 44);
      }
      else if (v5 != 1179405394 && v5 != *((_DWORD *)this + 43))
      {
        v4 += (*(uint64_t (**)(ChunkyAudioFile *, void))(*(void *)this + 792))(this, *((void *)v3 + 1));
        uint64_t v2 = (int *)*((void *)this + 19);
      }
      v3 += 6;
    }
    while (v3 != v2);
  }
  std::string __p = 0;
  uint64_t v62 = 0;
  unint64_t v63 = 0;
  CADeprecated::CAAutoFree<char>::CAAutoFree(&v60, v4);
  unsigned int v6 = v60;
  if (!v60) {
    goto LABEL_41;
  }
  double v8 = (long long *)*((void *)this + 18);
  uint64_t v7 = (long long *)*((void *)this + 19);
  if (v8 == v7)
  {
    uint64_t v7 = (long long *)*((void *)this + 18);
  }
  else
  {
    do
    {
      if (*(_DWORD *)v8 != 1179405394 && *(_DWORD *)v8 != *((_DWORD *)this + 43))
      {
        uint64_t v65 = 0;
        if (*(_DWORD *)v8 == *((_DWORD *)this + 42)) {
          uint64_t v9 = *((unsigned int *)this + 44);
        }
        else {
          uint64_t v9 = (*(uint64_t (**)(ChunkyAudioFile *, void))(*(void *)this + 792))(this, *((void *)v8 + 1));
        }
        uint64_t v65 = v9;
        long long v66 = *v8;
        int64_t v10 = v6 - (unsigned char *)v60;
        unint64_t v11 = v62;
        if ((unint64_t)v62 >= v63)
        {
          int v13 = (char *)__p;
          unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v62 - (unsigned char *)__p) >> 3);
          unint64_t v15 = v14 + 1;
          if (v14 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(v63 - (void)__p) >> 3) > v15) {
            unint64_t v15 = 0x5555555555555556 * ((uint64_t)(v63 - (void)__p) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v63 - (void)__p) >> 3) >= 0x555555555555555) {
            unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v16 = v15;
          }
          if (v16) {
            unint64_t v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v16);
          }
          else {
            uint64_t v17 = 0;
          }
          uint64_t v18 = (char *)(v16 + 24 * v14);
          *(_OWORD *)uint64_t v18 = v66;
          *((void *)v18 + 2) = v10;
          uint64_t v19 = v18;
          if (v11 != v13)
          {
            do
            {
              long long v20 = *(_OWORD *)(v11 - 24);
              *((void *)v19 - 1) = *((void *)v11 - 1);
              *(_OWORD *)(v19 - 24) = v20;
              v19 -= 24;
              v11 -= 24;
            }
            while (v11 != v13);
            unint64_t v11 = (char *)__p;
          }
          unsigned int v12 = v18 + 24;
          std::string __p = v19;
          unint64_t v63 = v16 + 24 * v17;
          if (v11) {
            operator delete(v11);
          }
        }
        else
        {
          *(_OWORD *)uint64_t v62 = *v8;
          *((void *)v11 + 2) = v10;
          unsigned int v12 = v11 + 24;
        }
        uint64_t v62 = v12;
        int v21 = (*(uint64_t (**)(void, void, void, uint64_t, unsigned char *, uint64_t *))(**((void **)this + 13)
                                                                                             + 64))(*((void *)this + 13), 0, *((void *)v8 + 2), v65, v6, &v65);
        if (v21)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
            unint64_t v68 = "ChunkyAudioFile.cpp";
            __int16 v69 = 1024;
            int v70 = 99;
            _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  InfoChunksToMemory ReadBytes failed", buf, 0x12u);
          }
          exceptiouint64_t n = __cxa_allocate_exception(4uLL);
          _DWORD *exception = v21;
          __cxa_throw(exception, MEMORY[0x1E4FBA3A8], 0);
        }
        v6 += v65;
        uint64_t v7 = (long long *)*((void *)this + 19);
      }
      double v8 = (long long *)((char *)v8 + 24);
    }
    while (v8 != v7);
    if (!v60)
    {
LABEL_41:
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        uint64_t v22 = 4294967188;
        goto LABEL_52;
      }
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      unint64_t v68 = "ChunkyAudioFile.cpp";
      __int16 v69 = 1024;
      int v70 = 264;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Couldn't allocate memory for info chunks", buf, 0x12u);
      uint64_t v22 = 4294967188;
      goto LABEL_50;
    }
  }
  unsigned int v23 = (long long *)*((void *)this + 18);
  uint64_t v24 = (char *)v7 - (char *)v23;
  if (v7 == v23)
  {
LABEL_49:
    uint64_t v22 = 0;
    goto LABEL_50;
  }
  uint64_t v25 = 0;
  unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * (v24 >> 3);
  unsigned int v27 = 1;
  while (1)
  {
    long long v28 = (uint64_t *)v23 + 3 * v25;
    if (*(_DWORD *)v28 == *((_DWORD *)this + 43)) {
      break;
    }
    uint64_t v25 = v27;
    BOOL v29 = v26 > v27++;
    if (!v29) {
      goto LABEL_49;
    }
  }
  uint64_t v31 = v28[2];
  int64_t v32 = v4;
  if (*((unsigned char *)this + 138))
  {
    size_t v33 = (4096 - *((_DWORD *)this + 46));
    unint64_t v34 = v4 & 0xFFFFFFFFFFFFF000;
    if (v4 <= v33) {
      unint64_t v34 = 0;
    }
    int64_t v35 = v34 + v33;
    if (v35 - (unint64_t)*((unsigned int *)this + 45) <= v4) {
      int64_t v32 = v35 + 4096;
    }
    else {
      int64_t v32 = v35;
    }
  }
  uint64_t v37 = *v28;
  uint64_t v36 = v28[1];
  if (v31 <= v32)
  {
    uint64_t v22 = (*(uint64_t (**)(void, int64_t))(**((void **)this + 13) + 32))(*((void *)this + 13), v32 + v36);
    if (v22)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_50;
      }
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      unint64_t v68 = "ChunkyAudioFile.cpp";
      __int16 v69 = 1024;
      int v70 = 305;
      long long v38 = MEMORY[0x1E4F14500];
      unsigned int v39 = "%25s:%-5d  SetSize Failed";
      goto LABEL_77;
    }
  }
  if (v31 != v32)
  {
    uint64_t v22 = AudioFileObject::MoveData(this, v31, v32, v36);
    if (v22)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_50;
      }
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      unint64_t v68 = "ChunkyAudioFile.cpp";
      __int16 v69 = 1024;
      int v70 = 310;
      long long v38 = MEMORY[0x1E4F14500];
      unsigned int v39 = "%25s:%-5d  MoveData Failed";
      goto LABEL_77;
    }
    *((void *)this + 9) = v32 + *((unsigned int *)this + 46);
  }
  if (v31 > v32)
  {
    uint64_t v22 = (*(uint64_t (**)(void, int64_t))(**((void **)this + 13) + 32))(*((void *)this + 13), v32 + v36);
    if (v22)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_50;
      }
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      unint64_t v68 = "ChunkyAudioFile.cpp";
      __int16 v69 = 1024;
      int v70 = 316;
      long long v38 = MEMORY[0x1E4F14500];
      unsigned int v39 = "%25s:%-5d  SetSize Failed";
      goto LABEL_77;
    }
  }
  uint64_t v22 = (*(uint64_t (**)(void, void, void, size_t, void *, uint64_t *))(**((void **)this + 13) + 72))(*((void *)this + 13), 0, 0, v4, v60, &v64);
  if (!v22)
  {
    uint64_t v59 = (*(uint64_t (**)(ChunkyAudioFile *, uint64_t))(*(void *)this + 792))(this, v64);
    if (*((unsigned char *)this + 138)) {
      ChunkyAudioFile::WriteFillerChunkIfNeeded((uint64_t)this, (unint64_t *)&v59, v32, &__p);
    }
    uint64_t v40 = v62;
    if ((unint64_t)v62 >= v63)
    {
      uint64_t v43 = (char *)__p;
      unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * ((v62 - (unsigned char *)__p) >> 3);
      unint64_t v45 = v44 + 1;
      if (v44 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * ((uint64_t)(v63 - (void)__p) >> 3) > v45) {
        unint64_t v45 = 0x5555555555555556 * ((uint64_t)(v63 - (void)__p) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v63 - (void)__p) >> 3) >= 0x555555555555555) {
        unint64_t v46 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v46 = v45;
      }
      if (v46) {
        unint64_t v46 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v46);
      }
      else {
        uint64_t v47 = 0;
      }
      uint64_t v42 = (char *)(v46 + 24 * v44);
      *(void *)uint64_t v42 = v37;
      *((void *)v42 + 1) = v36;
      *((void *)v42 + 2) = v32;
      unint64_t v41 = v42 + 24;
      if (v40 != v43)
      {
        do
        {
          long long v48 = *(_OWORD *)(v40 - 24);
          *((void *)v42 - 1) = *((void *)v40 - 1);
          *(_OWORD *)(v42 - 24) = v48;
          v42 -= 24;
          v40 -= 24;
        }
        while (v40 != v43);
        uint64_t v40 = (char *)__p;
      }
      std::string __p = v42;
      unint64_t v63 = v46 + 24 * v47;
      if (v40) {
        operator delete(v40);
      }
    }
    else
    {
      *(void *)uint64_t v62 = v37;
      *((void *)v40 + 1) = v36;
      *((void *)v40 + 2) = v32;
      unint64_t v41 = v40 + 24;
      uint64_t v42 = (char *)__p;
    }
    uint64_t v62 = v41;
    std::vector<ChunkInfo64>::__assign_with_size[abi:ne180100]<ChunkInfo64*,ChunkInfo64*>((void *)this + 18, v42, v41, 0xAAAAAAAAAAAAAAABLL * ((v41 - v42) >> 3));
    *(void *)&long long v66 = 0;
    int v49 = (*(uint64_t (**)(void, long long *))(**((void **)this + 13) + 24))(*((void *)this + 13), &v66);
    if (v49)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
        unint64_t v68 = "ChunkyAudioFile.cpp";
        __int16 v69 = 1024;
        int v70 = 336;
        _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  GetSize failed", buf, 0x12u);
      }
      long long v58 = __cxa_allocate_exception(4uLL);
      *long long v58 = v49;
      __cxa_throw(v58, MEMORY[0x1E4FBA3A8], 0);
    }
    uint64_t v50 = *((void *)this + 18);
    uint64_t v51 = *((void *)this + 19);
    uint64_t v52 = v51 - v50;
    if (v51 == v50)
    {
LABEL_101:
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
        unint64_t v68 = "ChunkyAudioFile.cpp";
        __int16 v69 = 1024;
        int v70 = 339;
        _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Couldn't find container chunk", buf, 0x12u);
      }
      unint64_t v56 = __cxa_allocate_exception(4uLL);
      *unint64_t v56 = 1685348671;
    }
    uint64_t v53 = 0;
    unint64_t v54 = 0xAAAAAAAAAAAAAAABLL * (v52 >> 3);
    unsigned int v55 = 1;
    while (*(_DWORD *)(v50 + 24 * v53) != *((_DWORD *)this + 42))
    {
      uint64_t v53 = v55;
      BOOL v29 = v54 > v55++;
      if (!v29) {
        goto LABEL_101;
      }
    }
    if (*(void *)(v50 + 24 * v53 + 8) != (void)v66)
    {
      *((unsigned char *)this + 136) = 1;
      if (!(*(unsigned int (**)(ChunkyAudioFile *))(*(void *)this + 216))(this)) {
        *((unsigned char *)this + 136) = 0;
      }
    }
    uint64_t v22 = 0;
    *((_DWORD *)this + 20) = 1;
    goto LABEL_50;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
    unint64_t v68 = "ChunkyAudioFile.cpp";
    __int16 v69 = 1024;
    int v70 = 321;
    long long v38 = MEMORY[0x1E4F14500];
    unsigned int v39 = "%25s:%-5d  FSWrite Failed";
LABEL_77:
    _os_log_impl(&dword_18FEC0000, v38, OS_LOG_TYPE_ERROR, v39, buf, 0x12u);
  }
LABEL_50:
  if (v60) {
    free(v60);
  }
LABEL_52:
  if (__p) {
    operator delete(__p);
  }
  return v22;
}

void sub_19009CB78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *__p)
{
  if (a11) {
    free(a11);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ChunkyAudioFile::WriteFillerChunkIfNeeded(uint64_t result, unint64_t *a2, unint64_t a3, void **a4)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *a2;
  uint64_t v5 = *(unsigned int *)(result + 180);
  if (*a2 + v5 < a3)
  {
    uint64_t v9 = result;
    LODWORD(v28) = 1179405394;
    DWORD1(v28) = v5;
    *((void *)&v28 + 1) = a3 - v4;
    unint64_t v29 = v4;
    unint64_t v11 = (char *)a4[1];
    int64_t v10 = (char *)a4[2];
    if (v11 >= v10)
    {
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (unsigned char *)*a4) >> 3);
      unint64_t v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - (unsigned char *)*a4) >> 3);
      if (2 * v16 > v15) {
        unint64_t v15 = 2 * v16;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v17 = v15;
      }
      if (v17) {
        unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<RemoteAUPropertyListeners::AUPropertyListener>>(v17);
      }
      else {
        uint64_t v18 = 0;
      }
      unint64_t v19 = v17 + 24 * v14;
      unint64_t v20 = v17 + 24 * v18;
      long long v21 = v28;
      *(void *)(v19 + 16) = v29;
      *(_OWORD *)unint64_t v19 = v21;
      int v13 = (void *)(v19 + 24);
      unsigned int v23 = (char *)*a4;
      uint64_t v22 = (char *)a4[1];
      if (v22 != *a4)
      {
        do
        {
          long long v24 = *(_OWORD *)(v22 - 24);
          *(void *)(v19 - 8) = *((void *)v22 - 1);
          *(_OWORD *)(v19 - 24) = v24;
          v19 -= 24;
          v22 -= 24;
        }
        while (v22 != v23);
        uint64_t v22 = (char *)*a4;
      }
      *a4 = (void *)v19;
      a4[1] = v13;
      a4[2] = (void *)v20;
      if (v22) {
        operator delete(v22);
      }
    }
    else
    {
      long long v12 = v28;
      *((void *)v11 + 2) = v29;
      *(_OWORD *)unint64_t v11 = v12;
      int v13 = v11 + 24;
    }
    a4[1] = v13;
    int v27 = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t, long long *, int *))(*(void *)v9 + 776))(v9, &v28, &v27);
    int v25 = result;
    if (result)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
        uint64_t v31 = "ChunkyAudioFile.cpp";
        __int16 v32 = 1024;
        int v33 = 183;
        _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  WriteBytes failed", buf, 0x12u);
      }
      exceptiouint64_t n = __cxa_allocate_exception(4uLL);
      _DWORD *exception = v25;
      __cxa_throw(exception, MEMORY[0x1E4FBA3A8], 0);
    }
    *a2 = a3;
  }
  return result;
}

void ChunkyAudioFile::MoveUpTrailingChunks(ChunkyAudioFile *this, int a2, uint64_t a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = (a2 + 1);
  uint64_t v4 = *((void *)this + 18);
  if (v4) {
    BOOL v5 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 19) - v4) >> 3) > v3;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    do
    {
      uint64_t v7 = v4 + 24 * v3;
      uint64_t v10 = *(void *)(v7 + 16);
      uint64_t v9 = (void *)(v7 + 16);
      uint64_t v8 = v10;
      unint64_t v11 = *(v9 - 1);
      if (v11 >= 0x1000000) {
        size_t v12 = 0x1000000;
      }
      else {
        size_t v12 = *(v9 - 1);
      }
      CADeprecated::CAAutoFree<char>::CAAutoFree(&v24, v12);
      int v13 = v24;
      if (!v24)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
          unint64_t v26 = "ChunkyAudioFile.cpp";
          __int16 v27 = 1024;
          int v28 = 223;
          _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  can't allocate memory for chunk", buf, 0x12u);
        }
        exceptiouint64_t n = __cxa_allocate_exception(4uLL);
        _DWORD *exception = 2003334207;
        __cxa_throw(exception, MEMORY[0x1E4FBA3A8], 0);
      }
      uint64_t v14 = v8 - a3;
      if (v11)
      {
        uint64_t v15 = 0;
        while (1)
        {
          unint64_t v16 = v12 >= v11 ? v11 : v12;
          int v23 = 0;
          int v17 = (*(uint64_t (**)(void, void, uint64_t, unint64_t, void *, int *))(**((void **)this + 13) + 48))(*((void *)this + 13), 0, *v9 + v15, v16, v24, &v23);
          if (v17) {
            break;
          }
          if (v23 != v16)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
              unint64_t v26 = "ChunkyAudioFile.cpp";
              __int16 v27 = 1024;
              int v28 = 233;
              _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  chunk size is wrong", buf, 0x12u);
            }
            uint64_t v18 = __cxa_allocate_exception(4uLL);
            *uint64_t v18 = 2003334207;
            goto LABEL_35;
          }
          int v17 = (*(uint64_t (**)(void, void, uint64_t, unint64_t, void *, int *))(**((void **)this + 13) + 56))(*((void *)this + 13), 0, v15 + v14, v16, v24, &v23);
          if (v17)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
              unint64_t v26 = "ChunkyAudioFile.cpp";
              __int16 v27 = 1024;
              int v28 = 237;
              unint64_t v19 = MEMORY[0x1E4F14500];
              unint64_t v20 = "%25s:%-5d  MoveUpTrailingChunks write failed";
              goto LABEL_33;
            }
            goto LABEL_34;
          }
          v15 += v16;
          v11 -= v16;
          if (!v11)
          {
            int v13 = v24;
            *v9 -= v14;
            if (!v13) {
              goto LABEL_23;
            }
            goto LABEL_22;
          }
        }
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
          unint64_t v26 = "ChunkyAudioFile.cpp";
          __int16 v27 = 1024;
          int v28 = 232;
          unint64_t v19 = MEMORY[0x1E4F14500];
          unint64_t v20 = "%25s:%-5d  MoveUpTrailingChunks read failed";
LABEL_33:
          _os_log_impl(&dword_18FEC0000, v19, OS_LOG_TYPE_ERROR, v20, buf, 0x12u);
        }
LABEL_34:
        uint64_t v18 = __cxa_allocate_exception(4uLL);
        *uint64_t v18 = v17;
LABEL_35:
        __cxa_throw(v18, MEMORY[0x1E4FBA3A8], 0);
      }
      *v9 -= v14;
LABEL_22:
      free(v13);
LABEL_23:
      uint64_t v4 = *((void *)this + 18);
      if (!v4) {
        break;
      }
      unint64_t v3 = (v3 + 1);
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 19) - v4) >> 3) > v3);
  }
}

void sub_19009D1EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  if (a12) {
    free(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AudioFormatProperty_PanningMatrix(const AudioPanningInfo *a1, float *a2)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  mOutputChannelMap = a1->mOutputChannelMap;
  unsigned int v67 = 0;
  uint64_t result = AudioFormatProperty_NumberOfChannelsForLayout(mOutputChannelMap, &v67);
  if (result) {
    return result;
  }
  uint64_t v7 = v67;
  if (v67 > 0x40) {
    return 1718449215;
  }
  int mChannelLayoutTag = mOutputChannelMap->mChannelLayoutTag;
  if (mOutputChannelMap->mChannelLayoutTag == 0x10000)
  {
    AudioFormatProperty_ChannelLayoutForBitmap(mOutputChannelMap->mChannelBitmap, __dst, v6);
    int mChannelLayoutTag = __dst[0].mChannelLayoutTag;
  }
  else if (mChannelLayoutTag)
  {
    uint64_t result = AudioFormatProperty_ChannelLayoutForTag(mOutputChannelMap->mChannelLayoutTag, __dst);
    if (result) {
      return result;
    }
  }
  else
  {
    memcpy(__dst, mOutputChannelMap, 20 * mOutputChannelMap->mNumberChannelDescriptions + 12);
    SanitizeAudioChannelLayout((uint64_t)__dst, 1);
  }
  if (v7) {
    bzero(a2, 4 * v7);
  }
  if (a1->mPanningMode == kPanningMode_VectorBasedPanning)
  {
    if ((a1->mCoordinateFlags & 2) != 0)
    {
      float v28 = a1->mCoordinates[0];
      if (v28 >= -360.0 && v28 <= 360.0 && __dst[0].mNumberChannelDescriptions)
      {
        unsigned int v29 = 0;
        unsigned int v30 = 0;
        unint64_t v31 = 0;
        float v32 = 360.0;
        float v33 = 360.0;
        uint64_t result = 1718449215;
        do
        {
          if ((__dst[0].mChannelDescriptions[v31].mChannelFlags & 2) != 0)
          {
            float v34 = __dst[0].mChannelDescriptions[v31].mCoordinates[0];
            if (v34 < -360.0 || v34 > 360.0) {
              return 1718449215;
            }
            for (float i = v28 - v34; i >= 360.0; float i = i + -360.0)
              ;
            while (i < 0.0)
              float i = i + 360.0;
            BOOL v37 = i < v33 || v31 == 0;
            if (v37)
            {
              unsigned int v29 = v31;
              uint64_t result = 0;
            }
            else
            {
              uint64_t result = result;
            }
            if (v37) {
              float v33 = i;
            }
            for (float j = v34 - v28; j >= 360.0; float j = j + -360.0)
              ;
            while (j < 0.0)
              float j = j + 360.0;
            if (j < v32 || v31 == 0)
            {
              unsigned int v30 = v31;
              float v32 = j;
            }
          }
          ++v31;
        }
        while (v31 < __dst[0].mNumberChannelDescriptions);
        if (result) {
          return result;
        }
        uint64_t v40 = &__dst[0].mChannelDescriptions[v29];
        double v41 = v40->mCoordinates[0];
        uint64_t v42 = &__dst[0].mChannelDescriptions[v30];
        for (double k = v42->mCoordinates[0] - v41; k > 360.0; double k = k + -360.0)
          ;
        while (k < 0.0)
          double k = k + 360.0;
        for (double m = v28 - v41; m > 360.0; double m = m + -360.0)
          ;
        uint64_t v45 = v29;
        for (n = v30; m < 0.0; double m = m + 360.0)
          ;
        double v46 = (a1->mGainScale + a1->mGainScale) / ((float)(a1->mCoordinates[2] * a1->mCoordinates[2]) + 1.0);
        double v47 = v40->mCoordinates[2] * v40->mCoordinates[2] * v46;
        double v23 = v42->mCoordinates[2] * v42->mCoordinates[2] * v46;
        if (fabs(k) >= 0.00100000005)
        {
          __double2 v63 = __sincos_stret(m / k * 1.57079633);
          float v64 = v63.__sinval * v23;
          a2[n] = v64;
          double v23 = v63.__cosval * v47;
          uint64_t n = v45;
        }
        else
        {
          float v48 = v47;
          a2[v29] = v48;
        }
LABEL_76:
        float v53 = v23;
        a2[n] = v53;
        if (!v7) {
          return 0;
        }
        goto LABEL_77;
      }
    }
    return 1718449215;
  }
  if (a1->mPanningMode != kPanningMode_SoundField) {
    return 1718449215;
  }
  UInt32 mCoordinateFlags = a1->mCoordinateFlags;
  if ((mCoordinateFlags & 2) == 0)
  {
    if (mCoordinateFlags)
    {
      double v10 = a1->mCoordinates[1];
      double v11 = a1->mCoordinates[0];
      double v12 = a1->mCoordinates[2];
      double v13 = v11 * v11 + v10 * v10 + v12 * v12;
      double v14 = 1.0 / sqrt(v13);
      double v15 = v14 * v10;
      double v16 = v14 * v11;
      double sinval = v14 * v12;
      goto LABEL_19;
    }
    return 1718449215;
  }
  double v18 = a1->mCoordinates[1] * 0.0174532925;
  double v13 = a1->mCoordinates[2] * a1->mCoordinates[2];
  __double2 v19 = __sincos_stret((float)-a1->mCoordinates[0] * 0.0174532925);
  __double2 v20 = __sincos_stret(v18);
  double sinval = v20.__sinval;
  double v15 = v19.__cosval * v20.__cosval;
  double v16 = v19.__sinval * v20.__cosval;
LABEL_19:
  double v21 = (a1->mGainScale + a1->mGainScale) / (v13 + 1.0);
  double v65 = v15 * v21;
  double v66 = v21 * 0.707106781;
  double v22 = v16 * v21;
  double v23 = sinval * v21;
  if (mChannelLayoutTag > 6815745)
  {
    if (mChannelLayoutTag == 6815746)
    {
      float v51 = v66;
      *a2 = v51;
      uint64_t n = 1;
      double v23 = v16 * v21;
      goto LABEL_76;
    }
    if (mChannelLayoutTag != 6881282)
    {
      if (mChannelLayoutTag == 7012356)
      {
        float v24 = v66;
        float v25 = v65;
        *a2 = v24;
        a2[1] = v25;
        float v26 = v22;
        a2[2] = v26;
        uint64_t n = 3;
        goto LABEL_76;
      }
      goto LABEL_83;
    }
    double v49 = v22 * 0.707106781;
    double v50 = v15 * v21;
    goto LABEL_75;
  }
  if (mChannelLayoutTag == 6619138 || mChannelLayoutTag == 6684674)
  {
    double v49 = v22 * 0.5;
    double v50 = v21 * 0.707106781;
LABEL_75:
    float v52 = v49 + v50 * 0.707106781;
    *a2 = v52;
    double v23 = -(v49 - v50 * 0.707106781);
    uint64_t n = 1;
    goto LABEL_76;
  }
LABEL_83:
  uint64_t mNumberChannelDescriptions = __dst[0].mNumberChannelDescriptions;
  uint64_t result = 1718449215;
  if (__dst[0].mNumberChannelDescriptions)
  {
    int v55 = 0;
    unint64_t v56 = &__dst[0].mChannelDescriptions[0].mCoordinates[2];
    long long v57 = a2;
    do
    {
      if ((*(unsigned char *)(v56 - 3) & 2) != 0)
      {
        double v58 = *(v56 - 1) * 0.0174532925;
        double v59 = *v56;
        __double2 v60 = __sincos_stret((float)-*(v56 - 2) * 0.0174532925);
        __double2 v61 = __sincos_stret(v58);
        float v62 = ((v22 * v60.__sinval * v61.__cosval + v65 * v60.__cosval * v61.__cosval + v23 * v61.__sinval) * 0.5
             + v66 * 0.707106781)
            / (v59
             * v59);
        float *v57 = v62;
        ++v55;
      }
      ++v57;
      v56 += 5;
      --mNumberChannelDescriptions;
    }
    while (mNumberChannelDescriptions);
    uint64_t result = v55 >= 3 ? 0 : 1718449215;
    if (v55 >= 3 && v7)
    {
LABEL_77:
      uint64_t result = 0;
      do
      {
        if (*a2 < 0.0000001) {
          *a2 = 0.0;
        }
        ++a2;
        --v7;
      }
      while (v7);
    }
  }
  return result;
}

uint64_t SanitizeAudioChannelLayout(uint64_t result, int a2)
{
  unint64_t v2 = *(unsigned int *)(result + 8);
  if (v2 >= 2)
  {
    uint64_t v3 = result;
    uint64_t v4 = 0;
    BOOL v5 = 0;
    int8x8_t v6 = (float *)(result + 28);
    while ((*(unsigned char *)(v6 - 3) & 1) != 0)
    {
      if (*(v6 - 2) != 0.0 || *(v6 - 1) != 0.0 || *v6 != 0.0)
      {
        if (!v5) {
          break;
        }
LABEL_10:
        unint64_t v2 = v2;
        uint64_t v7 = (_DWORD *)(result + 16);
        do
        {
          *uint64_t v7 = 0;
          v7 += 5;
          --v2;
        }
        while (v2);
        break;
      }
      BOOL v5 = ++v4 >= v2;
      v6 += 5;
      if (v2 == v4) {
        goto LABEL_10;
      }
    }
    if (a2)
    {
      unint64_t v8 = 0;
      uint64_t v9 = result + 12;
      do
      {
        uint64_t result = SetDefaultChannelPosition(v9);
        ++v8;
        v9 += 20;
      }
      while (v8 < *(unsigned int *)(v3 + 8));
    }
  }
  return result;
}

uint64_t AudioFormatProperty_MatrixMixMap(const AudioChannelLayout *const *a1, const AudioChannelLayout *a2, float *a3, _DWORD *a4)
{
  uint64_t v240 = *MEMORY[0x1E4F143B8];
  __dst = 0;
  char v233 = 0;
  unsigned int v231 = 0;
  uint64_t v8 = AudioFormatProperty_NumberOfChannelsForLayout((const AudioChannelLayout *)a1, &v231);
  if (v8)
  {
    uint64_t v9 = v8;
    goto LABEL_4;
  }
  unsigned int v230 = 0;
  uint64_t v9 = AudioFormatProperty_NumberOfChannelsForLayout(a2, &v230);
  if (!v9)
  {
    uint64_t v12 = v230;
    uint64_t v11 = v231;
    unsigned int v13 = v230 * v231;
    if (!a4)
    {
      uint64_t v9 = 0;
      *(_DWORD *)a3 = v13;
      goto LABEL_4;
    }
    if (v13 > *(_DWORD *)a3)
    {
      uint64_t v9 = 4294967246;
      goto LABEL_4;
    }
    *(_DWORD *)a3 = v13;
    unsigned int mChannelLayoutTag = a2->mChannelLayoutTag;
    int v15 = *(_DWORD *)a1;
    unsigned int v228 = *(_DWORD *)a1;
    unsigned int v229 = mChannelLayoutTag;
    uint64_t v219 = v11;
    size_t v16 = (20 * v11 + 12);
    CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)&v233, v16, 0);
    CADeprecated::CAAutoFree<unsigned char>::allocBytes(&__dst, (20 * v12 + 12), 0);
    if (mChannelLayoutTag == 0x10000)
    {
      double v18 = (unsigned int *)__dst;
      AudioFormatProperty_ChannelLayoutForBitmap(a2->mChannelBitmap, (AudioChannelLayout *)__dst, v17);
      unsigned int v229 = AudioFormatProperty_LayoutTagForBitmap(a2->mChannelBitmap);
    }
    else if (mChannelLayoutTag)
    {
      double v18 = (unsigned int *)__dst;
      uint64_t v9 = AudioFormatProperty_ChannelLayoutForTag(a2->mChannelLayoutTag, (AudioChannelLayout *)__dst);
      if (v9) {
        goto LABEL_4;
      }
    }
    else
    {
      double v18 = (unsigned int *)__dst;
      memcpy(__dst, a2, (20 * v12 + 12));
      AudioFormatProperty_TagForChannelLayout((const AudioChannelLayout *)v18, &v229);
    }
    if (v15 == 0x10000)
    {
      __double2 v20 = v233;
      AudioFormatProperty_ChannelLayoutForBitmap(*((_DWORD *)a1 + 1), v233, v19);
      unsigned int v228 = AudioFormatProperty_LayoutTagForBitmap(*((_DWORD *)a1 + 1));
    }
    else if (v15)
    {
      __double2 v20 = v233;
      uint64_t v9 = AudioFormatProperty_ChannelLayoutForTag(*(_DWORD *)a1, v233);
      if (v9) {
        goto LABEL_4;
      }
    }
    else
    {
      __double2 v20 = v233;
      memcpy(v233, a1, v16);
      AudioFormatProperty_TagForChannelLayout(v20, &v228);
    }
    uint64_t mNumberChannelDescriptions = v20->mNumberChannelDescriptions;
    if (mNumberChannelDescriptions)
    {
      mChannelDescriptions = v20->mChannelDescriptions;
      do
      {
        int mChannelLabel = mChannelDescriptions->mChannelLabel;
        if ((int)mChannelDescriptions->mChannelLabel > 300)
        {
          if (mChannelLabel == 301)
          {
LABEL_30:
            int mChannelLabel = 1;
          }
          else if (mChannelLabel == 302)
          {
LABEL_29:
            int mChannelLabel = 2;
          }
        }
        else
        {
          switch(mChannelLabel)
          {
            case 206:
            case 208:
              goto LABEL_30;
            case 207:
            case 209:
              goto LABEL_29;
            default:
              if (mChannelLabel == 42) {
                int mChannelLabel = 3;
              }
              break;
          }
        }
        mChannelDescriptions->int mChannelLabel = mChannelLabel;
        ++mChannelDescriptions;
        --mNumberChannelDescriptions;
      }
      while (mNumberChannelDescriptions);
    }
    uint64_t v24 = v18[2];
    if (v24)
    {
      float v25 = (int *)(v18 + 3);
      do
      {
        int v26 = *v25;
        if (*v25 > 300)
        {
          if (v26 == 301)
          {
LABEL_41:
            int v26 = 1;
          }
          else if (v26 == 302)
          {
LABEL_40:
            int v26 = 2;
          }
        }
        else
        {
          switch(v26)
          {
            case 206:
            case 208:
              goto LABEL_41;
            case 207:
            case 209:
              goto LABEL_40;
            default:
              if (v26 == 42) {
                int v26 = 3;
              }
              break;
          }
        }
        *float v25 = v26;
        v25 += 5;
        --v24;
      }
      while (v24);
    }
    octagonalCompatibility(v20, (AudioChannelLayout *)v18);
    singleSurroundPairCompatibility(v20, (AudioChannelLayout *)v18);
    bzero(a4, 4 * *(unsigned int *)a3);
    uint64_t v27 = v18[2];
    if (v27)
    {
      float v28 = (char *)(v18 + 3);
      uint64_t v29 = v27 - 1;
      do
      {
        int v30 = *((unsigned __int16 *)v28 + 1) << 16;
        BOOL v31 = v29-- != 0;
        char v32 = v31;
        if (v30 != 0x10000) {
          break;
        }
        v28 += 20;
      }
      while ((v32 & 1) != 0);
      if (v30 == 0x10000)
      {
        uint64_t v33 = v20->mNumberChannelDescriptions;
        if (!v33) {
          goto LABEL_102;
        }
        float v34 = v20->mChannelDescriptions;
        uint64_t v35 = v33 - 1;
        do
        {
          int v36 = HIWORD(v34->mChannelLabel) << 16;
          BOOL v37 = v36 == 0x10000 || v35-- == 0;
          ++v34;
        }
        while (!v37);
        if (v36 != 0x10000)
        {
LABEL_102:
          if (v12)
          {
            uint64_t v57 = 0;
            double v58 = (unsigned __int16 *)(v18 + 3);
            do
            {
              unsigned int v60 = *v58;
              v58 += 10;
              unsigned int v59 = v60;
              if (v60 < v219) {
                a4[v57 + v59 * v12] = 1065353216;
              }
              ++v57;
            }
            while (v12 != v57);
          }
          goto LABEL_160;
        }
      }
    }
    long long v38 = (HOA *)v228;
    if (!v228)
    {
      uint64_t v47 = *((unsigned int *)a1 + 2);
      if (v47)
      {
        float v48 = (char *)a1 + 12;
        uint64_t v49 = v47 - 1;
        do
        {
          int v50 = *((unsigned __int16 *)v48 + 1) << 16;
          BOOL v31 = v49-- != 0;
          char v51 = v31;
          if (v50 != 0x10000) {
            break;
          }
          v48 += 20;
        }
        while ((v51 & 1) != 0);
        if (v50 == 0x10000)
        {
          float v52 = (int *)a1 + 3;
          int v53 = -65536;
          do
          {
            int v55 = *v52;
            v52 += 5;
            int v54 = v55;
            if (v55 - 0x10000 < v12) {
              a4[v53 + v54] = 1065353216;
            }
            v53 += v12;
            --v47;
          }
          while (v47);
          goto LABEL_160;
        }
      }
    }
    if (v219)
    {
      uint64_t v39 = 0;
      int v40 = 0;
      do
      {
        unsigned int v41 = v20->mChannelDescriptions[v39].mChannelLabel;
        if (HIWORD(v41)
          || (v41 <= 0x2D ? (BOOL v42 = ((1 << v41) & 0x3B0000070000) == 0) : (BOOL v42 = 1),
              !v42 || v41 - 304 < 2 || v41 == 400))
        {
          uint64_t v43 = (int *)(v18 + 3);
          uint64_t v44 = v12;
          if (v12)
          {
            do
            {
              int v45 = *v43;
              v43 += 5;
              if (v41 == v45) {
                a4[v40] = 1065353216;
              }
              ++v40;
              --v44;
            }
            while (v44);
          }
        }
        else
        {
          v40 += v12;
        }
        ++v39;
      }
      while (v39 != v219);
    }
    if (v38 == 6750210)
    {
      unsigned int v46 = v229;
      if ((int)v229 > 6750209)
      {
        if ((int)v229 > 6946817)
        {
          if (v229 == 6946818) {
            goto LABEL_112;
          }
          if (v229 == 8519688) {
            goto LABEL_116;
          }
          goto LABEL_117;
        }
        goto LABEL_100;
      }
    }
    else
    {
      if (v38 != 8519688) {
        goto LABEL_117;
      }
      unsigned int v46 = v229;
      if ((int)v229 > 6750209)
      {
        if ((int)v229 > 6946817)
        {
          if (v229 != 6946818)
          {
            if (v229 == 8519688)
            {
              SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 1, 1, (float *)a4, 1.0);
              SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 2, 2, (float *)a4, 1.0);
              SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 3, 3, (float *)a4, 1.0);
              SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 4, 4, (float *)a4, 1.0);
              SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 5, 5, (float *)a4, 1.0);
              SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 6, 6, (float *)a4, 1.0);
LABEL_116:
              SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 38, 38, (float *)a4, 1.0);
              float v61 = 1.0;
              uint64_t v62 = (uint64_t)v20;
              __double2 v63 = (AudioChannelLayout *)v18;
              int v64 = 39;
LABEL_157:
              int v65 = 39;
              goto LABEL_158;
            }
            goto LABEL_117;
          }
LABEL_112:
          SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 38, 1, (float *)a4, 1.0);
          float v61 = 1.0;
          uint64_t v62 = (uint64_t)v20;
          __double2 v63 = (AudioChannelLayout *)v18;
          int v64 = 39;
          goto LABEL_113;
        }
LABEL_100:
        if (v46 == 6750210) {
          goto LABEL_116;
        }
        int v56 = 6881282;
        goto LABEL_111;
      }
    }
    if (v46 == 6553601)
    {
      SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 38, 3, (float *)a4, 1.0);
      float v61 = 1.0;
      uint64_t v62 = (uint64_t)v20;
      __double2 v63 = (AudioChannelLayout *)v18;
      int v64 = 39;
      goto LABEL_146;
    }
    if (v46 == 6619138) {
      goto LABEL_112;
    }
    int v56 = 6684674;
LABEL_111:
    if (v46 == v56) {
      goto LABEL_112;
    }
LABEL_117:
    HIDWORD(v67) = v38 - 6619138;
    LODWORD(v67) = v38 - 6619138;
    unsigned int v66 = v67 >> 16;
    if (v66 > 5 || ((1 << v66) & 0x33) == 0) {
      goto LABEL_126;
    }
    if ((int)v229 <= 6750209)
    {
      if (v229 == -267386874)
      {
        SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 1, 1, (float *)a4, 1.0);
        SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 2, 2, (float *)a4, 1.0);
      }
      else if (v229 != -266338299)
      {
LABEL_126:
        if (v38 != 6553601) {
          goto LABEL_131;
        }
        if (v229 == -267386874)
        {
          SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 3, 1, (float *)a4, 1.0);
          SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 3, 2, (float *)a4, 1.0);
          float v61 = 1.0;
          uint64_t v62 = (uint64_t)v20;
          __double2 v63 = (AudioChannelLayout *)v18;
          int v64 = 3;
          int v65 = 0x20000;
          goto LABEL_158;
        }
        if (v229 != -266338299)
        {
          if (v229 == 6684674)
          {
            SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 3, 1, (float *)a4, 1.0);
            float v61 = 1.0;
            uint64_t v62 = (uint64_t)v20;
            __double2 v63 = (AudioChannelLayout *)v18;
            int v64 = 3;
            goto LABEL_113;
          }
LABEL_131:
          ChannelLabelReduceMatrixStereo((uint64_t)v20);
          ChannelLabelReduceMatrixStereo((uint64_t)v18);
          int ABitmapForCompare = AudioFormatProperty_GetABitmapForCompare(a2);
          int v69 = AudioFormatProperty_GetABitmapForCompare((const AudioChannelLayout *)a1);
          if (ABitmapForCompare && v69 && (v69 & ~ABitmapForCompare & 0xFFFFFFF7) == 0)
          {
            if (v219)
            {
              uint64_t v70 = 0;
              int v71 = 0;
              do
              {
                if (v12)
                {
                  AudioChannelLabel v72 = v20->mChannelDescriptions[v70].mChannelLabel;
                  unint64_t v73 = (int *)(v18 + 3);
                  uint64_t v74 = v12;
                  uint64_t v75 = v219;
                  do
                  {
                    int v76 = *v73;
                    v73 += 5;
                    if (v72 == v76) {
                      a4[v71] = 1065353216;
                    }
                    ++v71;
                    --v74;
                  }
                  while (v74);
                }
                else
                {
                  uint64_t v75 = v219;
                }
                uint64_t v9 = 0;
                ++v70;
              }
              while (v70 != v75);
              goto LABEL_4;
            }
LABEL_160:
            uint64_t v9 = 0;
            goto LABEL_4;
          }
          int v77 = AudioFormatProperty_GetABitmapForCompare((const AudioChannelLayout *)v18);
          int v78 = AudioFormatProperty_GetABitmapForCompare(v20);
          int v79 = v78;
          uint64_t v218 = (AudioChannelLayout *)v18;
          if (v77 && v78 && ((v78 | v77) & 0x825D0000) == 0)
          {
            if ((v78 & 4) == 0) {
              goto LABEL_218;
            }
            if ((v77 & 4) != 0)
            {
              float v84 = 1.0;
              uint64_t v80 = (uint64_t)v20;
              id v81 = (AudioChannelLayout *)v18;
              int v82 = 3;
              unint64_t v83 = (float *)a4;
            }
            else
            {
              if ((v77 & 3) == 0) {
                goto LABEL_218;
              }
              SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 3, 1, (float *)a4, 0.70711);
              uint64_t v80 = (uint64_t)v20;
              id v81 = (AudioChannelLayout *)v18;
              int v82 = 2;
              unint64_t v83 = (float *)a4;
              float v84 = 0.70711;
            }
            SetMatrixCoefficient(v80, v81, 3, v82, v83, v84);
LABEL_218:
            if ((v79 & 3) == 0) {
              goto LABEL_224;
            }
            if ((v77 & 7) == 4)
            {
              SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 1, 3, (float *)a4, 0.70711);
              uint64_t v100 = (uint64_t)v20;
              uint64_t v101 = (AudioChannelLayout *)v18;
              int v102 = 3;
              uint64_t v103 = (float *)a4;
              float v104 = 0.70711;
            }
            else
            {
              if ((v77 & 3) == 0) {
                goto LABEL_224;
              }
              SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 1, 1, (float *)a4, 1.0);
              float v104 = 1.0;
              uint64_t v100 = (uint64_t)v20;
              uint64_t v101 = (AudioChannelLayout *)v18;
              int v102 = 2;
              uint64_t v103 = (float *)a4;
            }
            SetMatrixCoefficient(v100, v101, 2, v102, v103, v104);
LABEL_224:
            if ((v79 & 0x2000) == 0) {
              goto LABEL_232;
            }
            if ((v77 & 0x2000) != 0)
            {
              float v109 = 1.0;
              uint64_t v105 = (uint64_t)v20;
              uint64_t v106 = (AudioChannelLayout *)v18;
              int v107 = 14;
            }
            else
            {
              if ((v77 & 0x5000) != 0)
              {
                SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 14, 13, (float *)a4, 0.70711);
                uint64_t v105 = (uint64_t)v20;
                uint64_t v106 = (AudioChannelLayout *)v18;
                int v107 = 15;
LABEL_228:
                long long v108 = (float *)a4;
                float v109 = 0.70711;
LABEL_231:
                SetMatrixCoefficient(v105, v106, 14, v107, v108, v109);
                goto LABEL_232;
              }
              if ((v77 & 7) != 4)
              {
                if ((v77 & 3) == 0)
                {
LABEL_232:
                  int v221 = v77 & 0x30;
                  if ((v79 & 0xC0) == 0) {
                    goto LABEL_259;
                  }
                  if ((~v77 & 0xC0) != 0)
                  {
                    if ((v77 & 7) == 4)
                    {
                      int v115 = 1060439283;
                      SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 7, 3, (float *)a4, 0.70711);
                      uint64_t v111 = (uint64_t)v20;
                      uint64_t v112 = (AudioChannelLayout *)v18;
                      int v113 = 3;
                    }
                    else
                    {
                      if ((v77 & 7) == 7)
                      {
                        int v115 = 1060439283;
                        unint64_t v116 = (AudioChannelLayout *)v18;
                        SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 7, 1, (float *)a4, 0.70711);
                        SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 7, 3, (float *)a4, 0.70711);
                        uint64_t v117 = (uint64_t)v20;
                        unint64_t v118 = (AudioChannelLayout *)v18;
                        int v119 = 3;
                        long long v120 = (float *)a4;
                        float v121 = 0.70711;
                      }
                      else
                      {
                        if ((v77 & 3) == 0) {
                          goto LABEL_259;
                        }
                        int v115 = 1063105495;
                        unint64_t v116 = (AudioChannelLayout *)v18;
                        SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 7, 1, (float *)a4, 0.86603);
                        SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 7, 2, (float *)a4, 0.5);
                        float v121 = 0.5;
                        uint64_t v117 = (uint64_t)v20;
                        unint64_t v118 = (AudioChannelLayout *)v18;
                        int v119 = 1;
                        long long v120 = (float *)a4;
                      }
                      SetMatrixCoefficient(v117, v118, 8, v119, v120, v121);
                      uint64_t v111 = (uint64_t)v20;
                      uint64_t v112 = v116;
                      int v113 = 2;
                    }
                    unint64_t v114 = (float *)a4;
                    float v110 = *(float *)&v115;
                  }
                  else
                  {
                    SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 7, 7, (float *)a4, 1.0);
                    float v110 = 1.0;
                    uint64_t v111 = (uint64_t)v20;
                    uint64_t v112 = (AudioChannelLayout *)v18;
                    int v113 = 8;
                    unint64_t v114 = (float *)a4;
                  }
                  SetMatrixCoefficient(v111, v112, 8, v113, v114, v110);
LABEL_259:
                  if ((v79 & 0x100) == 0) {
                    goto LABEL_287;
                  }
                  if ((v77 & 0x100) != 0)
                  {
                    float v131 = 1.0;
                    uint64_t v128 = (uint64_t)v20;
                    uint64_t v129 = (AudioChannelLayout *)v18;
                    int v130 = 9;
                  }
                  else
                  {
                    if ((v77 & 0x60000000) != 0)
                    {
                      SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 9, 33, (float *)a4, 0.70711);
                      uint64_t v128 = (uint64_t)v20;
                      uint64_t v129 = (AudioChannelLayout *)v18;
                      int v130 = 34;
LABEL_285:
                      long long v132 = (float *)a4;
                      float v131 = 0.70711;
                      goto LABEL_286;
                    }
                    if ((v77 & 0x30) != 0)
                    {
                      SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 9, 5, (float *)a4, 0.70711);
                      uint64_t v128 = (uint64_t)v20;
                      uint64_t v129 = (AudioChannelLayout *)v18;
                      int v130 = 6;
                      goto LABEL_285;
                    }
                    if ((v77 & 3) != 0)
                    {
                      SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 9, 1, (float *)a4, 0.70711);
                      uint64_t v128 = (uint64_t)v20;
                      uint64_t v129 = (AudioChannelLayout *)v18;
                      int v130 = 2;
                      goto LABEL_285;
                    }
                    if ((v77 & 4) == 0)
                    {
LABEL_287:
                      if ((v79 & 0x30) == 0) {
                        goto LABEL_297;
                      }
                      if ((v77 & 0x130) == 0x100)
                      {
                        SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 5, 9, (float *)a4, 0.70711);
                        uint64_t v134 = (uint64_t)v20;
                        long long v135 = (AudioChannelLayout *)v18;
                        int v136 = 9;
LABEL_290:
                        long long v137 = (float *)a4;
                        float v138 = 0.70711;
LABEL_296:
                        SetMatrixCoefficient(v134, v135, 6, v136, v137, v138);
                        goto LABEL_297;
                      }
                      if ((v77 & 0x30) != 0)
                      {
                        SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 5, 5, (float *)a4, 1.0);
                        float v138 = 1.0;
                        uint64_t v134 = (uint64_t)v20;
                        long long v135 = (AudioChannelLayout *)v18;
                        int v136 = 6;
                      }
                      else
                      {
                        if ((v77 & 7) != 4)
                        {
                          if ((v77 & 3) == 0)
                          {
LABEL_297:
                            if ((v79 & 0x60000000) == 0) {
                              goto LABEL_336;
                            }
                            if ((~v77 & 0x60000000) == 0)
                            {
                              SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 33, 33, (float *)a4, 1.0);
                              float v139 = 1.0;
                              uint64_t v140 = (uint64_t)v20;
                              long long v141 = (AudioChannelLayout *)v18;
                              int v142 = 34;
                              uint64_t v143 = (float *)a4;
LABEL_335:
                              SetMatrixCoefficient(v140, v141, 34, v142, v143, v139);
LABEL_336:
                              int v157 = v77 & 0xA00000;
                              if ((v79 & 0x18000000) == 0) {
                                goto LABEL_345;
                              }
                              if ((~v77 & 0x18000000) != 0)
                              {
                                if ((v77 & 3) != 0)
                                {
                                  SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 35, 1, (float *)a4, 0.70711);
                                  uint64_t v159 = (uint64_t)v20;
                                  char v160 = (AudioChannelLayout *)v18;
                                  int v161 = 2;
                                }
                                else
                                {
                                  if ((v77 & 4) == 0) {
                                    goto LABEL_345;
                                  }
                                  SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 35, 3, (float *)a4, 0.70711);
                                  uint64_t v159 = (uint64_t)v20;
                                  char v160 = (AudioChannelLayout *)v18;
                                  int v161 = 3;
                                }
                                unsigned int v162 = (float *)a4;
                                float v158 = 0.70711;
                              }
                              else
                              {
                                SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 35, 35, (float *)a4, 1.0);
                                float v158 = 1.0;
                                uint64_t v159 = (uint64_t)v20;
                                char v160 = (AudioChannelLayout *)v18;
                                int v161 = 36;
                                unsigned int v162 = (float *)a4;
                              }
                              SetMatrixCoefficient(v159, v160, 36, v161, v162, v158);
LABEL_345:
                              int v163 = v77 & 0x600;
                              if ((v79 & 0x5000) == 0) {
                                goto LABEL_352;
                              }
                              if ((v77 & 0x7000) == 0x2000)
                              {
                                SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 13, 14, (float *)a4, 0.70711);
                                uint64_t v164 = (uint64_t)v20;
                                uint64_t v165 = (AudioChannelLayout *)v18;
                                int v166 = 14;
LABEL_348:
                                uint64_t v167 = (float *)a4;
                                float v168 = 0.70711;
LABEL_351:
                                SetMatrixCoefficient(v164, v165, 15, v166, v167, v168);
                                goto LABEL_352;
                              }
                              if ((v77 & 0x5000) != 0)
                              {
                                SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 13, 13, (float *)a4, 1.0);
                                float v168 = 1.0;
                                uint64_t v164 = (uint64_t)v20;
                                uint64_t v165 = (AudioChannelLayout *)v18;
                                int v166 = 15;
                                uint64_t v167 = (float *)a4;
                                goto LABEL_351;
                              }
                              if (v157)
                              {
                                SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 13, 49, (float *)a4, 0.70711);
                                uint64_t v164 = (uint64_t)v20;
                                uint64_t v165 = (AudioChannelLayout *)v18;
                                int v166 = 51;
                                goto LABEL_348;
                              }
                              if (v163 == 1536)
                              {
                                SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 13, 10, (float *)a4, 0.70711);
                                uint64_t v210 = (uint64_t)v20;
                                float32x4_t v211 = (AudioChannelLayout *)v18;
                                int v212 = 11;
                              }
                              else
                              {
                                if ((v77 & 3) == 0)
                                {
                                  if ((v77 & 4) != 0)
                                  {
                                    SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 13, 3, (float *)a4, 0.70711);
                                    uint64_t v164 = (uint64_t)v20;
                                    uint64_t v165 = (AudioChannelLayout *)v18;
                                    int v166 = 3;
                                    goto LABEL_348;
                                  }
LABEL_352:
                                  int8x16_t v169 = (AudioChannelLayout *)v18;
                                  if ((v79 & 0xA00000) == 0) {
                                    goto LABEL_361;
                                  }
                                  if (v157 == 10485760)
                                  {
                                    SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 49, 49, (float *)a4, 1.0);
                                    float v170 = 1.0;
                                    uint64_t v171 = (uint64_t)v20;
                                    uint64_t v172 = (AudioChannelLayout *)v18;
                                    int v173 = 51;
                                    uint64_t v174 = (float *)a4;
LABEL_360:
                                    SetMatrixCoefficient(v171, v172, 51, v173, v174, v170);
                                    goto LABEL_361;
                                  }
                                  if ((~v77 & 0x5005000) == 0)
                                  {
                                    SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 49, 13, (float *)a4, 0.70711);
                                    SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 49, 52, (float *)a4, 0.70711);
                                    SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 51, 15, (float *)a4, 0.70711);
                                    uint64_t v171 = (uint64_t)v20;
                                    uint64_t v172 = (AudioChannelLayout *)v18;
                                    int v173 = 54;
LABEL_359:
                                    uint64_t v174 = (float *)a4;
                                    float v170 = 0.70711;
                                    goto LABEL_360;
                                  }
                                  if (v221 == 48)
                                  {
                                    SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 49, 5, (float *)a4, 0.70711);
                                    uint64_t v171 = (uint64_t)v20;
                                    uint64_t v172 = (AudioChannelLayout *)v18;
                                    int v173 = 6;
                                    goto LABEL_359;
                                  }
                                  if (v163 == 1536)
                                  {
                                    int8x16_t v169 = (AudioChannelLayout *)v18;
                                    SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 49, 10, (float *)a4, 0.70711);
                                    uint64_t v198 = (uint64_t)v20;
                                    uint64_t v199 = (AudioChannelLayout *)v18;
                                    int v200 = 11;
                                  }
                                  else
                                  {
                                    if ((v77 & 3) == 0)
                                    {
                                      int8x16_t v169 = (AudioChannelLayout *)v18;
                                      if ((v77 & 4) != 0)
                                      {
                                        SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 49, 3, (float *)a4, 0.70711);
                                        uint64_t v171 = (uint64_t)v20;
                                        uint64_t v172 = (AudioChannelLayout *)v18;
                                        int v173 = 3;
                                        goto LABEL_359;
                                      }
LABEL_361:
                                      if ((v79 & 0x5000000) == 0)
                                      {
LABEL_368:
                                        if ((v79 & 0x600) == 0) {
                                          goto LABEL_375;
                                        }
                                        if (v163 == 1536) {
                                          goto LABEL_370;
                                        }
                                        if ((~v77 & 0x5000000) == 0)
                                        {
                                          SetMatrixCoefficient((uint64_t)v20, v169, 10, 52, (float *)a4, 1.0);
                                          float v180 = 1.0;
                                          uint64_t v181 = (uint64_t)v20;
                                          uint64_t v182 = v169;
                                          int v183 = 54;
                                          goto LABEL_373;
                                        }
                                        if (v157)
                                        {
                                          SetMatrixCoefficient((uint64_t)v20, v169, 10, 49, (float *)a4, 0.70711);
                                          uint64_t v181 = (uint64_t)v20;
                                          uint64_t v182 = v169;
                                          int v183 = 51;
LABEL_383:
                                          uint64_t v184 = (float *)a4;
                                          float v180 = 0.70711;
                                          goto LABEL_374;
                                        }
                                        if ((~v77 & 0x60000000) == 0)
                                        {
                                          int8x16_t v169 = (AudioChannelLayout *)v18;
                                          SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 10, 33, (float *)a4, 0.70711);
                                          uint64_t v207 = (uint64_t)v20;
                                          float32x4_t v208 = (AudioChannelLayout *)v18;
                                          int v209 = 34;
LABEL_440:
                                          SetMatrixCoefficient(v207, v208, 11, v209, (float *)a4, 0.70711);
                                          goto LABEL_375;
                                        }
                                        if (v221 == 48)
                                        {
                                          int8x16_t v169 = (AudioChannelLayout *)v18;
                                          SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 10, 5, (float *)a4, 0.70711);
                                          uint64_t v207 = (uint64_t)v20;
                                          float32x4_t v208 = (AudioChannelLayout *)v18;
                                          int v209 = 6;
                                          goto LABEL_440;
                                        }
                                        if ((v77 & 3) != 0)
                                        {
                                          int8x16_t v169 = (AudioChannelLayout *)v18;
                                          SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 10, 1, (float *)a4, 0.70711);
                                          uint64_t v207 = (uint64_t)v20;
                                          float32x4_t v208 = (AudioChannelLayout *)v18;
                                          int v209 = 2;
                                          goto LABEL_440;
                                        }
                                        int8x16_t v169 = (AudioChannelLayout *)v18;
                                        if ((v77 & 4) != 0)
                                        {
                                          SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 10, 3, (float *)a4, 0.70711);
                                          uint64_t v181 = (uint64_t)v20;
                                          uint64_t v182 = (AudioChannelLayout *)v18;
                                          int v183 = 3;
                                          goto LABEL_383;
                                        }
LABEL_375:
                                        if ((v79 & 0x800) == 0) {
                                          goto LABEL_387;
                                        }
                                        if ((v77 & 0x800) != 0)
                                        {
                                          float v189 = 1.0;
                                          uint64_t v185 = (uint64_t)v20;
                                          float32x4_t v186 = v169;
                                          int v187 = 12;
                                        }
                                        else if ((v77 & 0x100) != 0)
                                        {
                                          float v189 = 1.0;
                                          uint64_t v185 = (uint64_t)v20;
                                          float32x4_t v186 = v169;
                                          int v187 = 9;
                                        }
                                        else
                                        {
                                          if ((~v77 & 0x60000000) == 0)
                                          {
                                            SetMatrixCoefficient((uint64_t)v20, v169, 12, 33, (float *)a4, 0.70711);
                                            uint64_t v185 = (uint64_t)v20;
                                            float32x4_t v186 = v169;
                                            int v187 = 34;
                                            float32x4_t v188 = (float *)a4;
                                            float v189 = 0.70711;
LABEL_386:
                                            SetMatrixCoefficient(v185, v186, 12, v187, v188, v189);
                                            goto LABEL_387;
                                          }
                                          if (v221 == 48)
                                          {
                                            int8x16_t v169 = (AudioChannelLayout *)v18;
                                            SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 12, 5, (float *)a4, 0.70711);
                                            uint64_t v201 = (uint64_t)v20;
                                            uint64_t v202 = (AudioChannelLayout *)v18;
                                            int v203 = 6;
LABEL_420:
                                            SetMatrixCoefficient(v201, v202, 12, v203, (float *)a4, 0.70711);
                                            goto LABEL_387;
                                          }
                                          if ((v77 & 3) != 0)
                                          {
                                            int8x16_t v169 = (AudioChannelLayout *)v18;
                                            SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 12, 1, (float *)a4, 0.70711);
                                            uint64_t v201 = (uint64_t)v20;
                                            uint64_t v202 = (AudioChannelLayout *)v18;
                                            int v203 = 2;
                                            goto LABEL_420;
                                          }
                                          int8x16_t v169 = (AudioChannelLayout *)v18;
                                          if ((v77 & 4) == 0)
                                          {
LABEL_387:
                                            if ((v79 & 0x28000) == 0)
                                            {
LABEL_394:
                                              if ((v77 & v79 & 8) == 0) {
                                                goto LABEL_160;
                                              }
                                              float v61 = 1.0;
                                              uint64_t v62 = (uint64_t)v20;
                                              __double2 v63 = v169;
                                              int v64 = 4;
                                              int v65 = 4;
                                              goto LABEL_158;
                                            }
                                            if ((~v77 & 0x28000) == 0)
                                            {
                                              SetMatrixCoefficient((uint64_t)v20, v169, 0x8000, 0x8000, (float *)a4, 1.0);
                                              float v190 = 1.0;
                                              uint64_t v191 = (uint64_t)v20;
                                              uint64_t v192 = v169;
                                              int v193 = 0x20000;
LABEL_392:
                                              uint64_t v194 = (float *)a4;
LABEL_393:
                                              SetMatrixCoefficient(v191, v192, 0x20000, v193, v194, v190);
                                              goto LABEL_394;
                                            }
                                            if ((~v77 & 0x5000000) == 0)
                                            {
                                              SetMatrixCoefficient((uint64_t)v20, v169, 0x8000, 52, (float *)a4, 1.0);
                                              float v190 = 1.0;
                                              uint64_t v191 = (uint64_t)v20;
                                              uint64_t v192 = v169;
                                              int v193 = 54;
                                              goto LABEL_392;
                                            }
                                            if (v157)
                                            {
                                              SetMatrixCoefficient((uint64_t)v20, v169, 0x8000, 49, (float *)a4, 0.70711);
                                              uint64_t v191 = (uint64_t)v20;
                                              uint64_t v192 = v169;
                                              int v193 = 51;
LABEL_398:
                                              uint64_t v194 = (float *)a4;
                                              float v190 = 0.70711;
                                              goto LABEL_393;
                                            }
                                            if ((~v77 & 0x60000000) != 0)
                                            {
                                              if (v221 == 48)
                                              {
                                                int8x16_t v169 = (AudioChannelLayout *)v18;
                                                SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 0x8000, 5, (float *)a4, 0.70711);
                                                uint64_t v204 = (uint64_t)v20;
                                                uint64_t v205 = (AudioChannelLayout *)v18;
                                                int v206 = 6;
                                              }
                                              else if (v163 == 1536)
                                              {
                                                int8x16_t v169 = (AudioChannelLayout *)v18;
                                                SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 0x8000, 10, (float *)a4, 0.70711);
                                                uint64_t v204 = (uint64_t)v20;
                                                uint64_t v205 = (AudioChannelLayout *)v18;
                                                int v206 = 11;
                                              }
                                              else
                                              {
                                                if ((v77 & 3) == 0)
                                                {
                                                  int8x16_t v169 = (AudioChannelLayout *)v18;
                                                  if ((v77 & 4) == 0) {
                                                    goto LABEL_394;
                                                  }
                                                  SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 0x8000, 3, (float *)a4, 0.70711);
                                                  uint64_t v191 = (uint64_t)v20;
                                                  uint64_t v192 = (AudioChannelLayout *)v18;
                                                  int v193 = 3;
                                                  goto LABEL_398;
                                                }
                                                int8x16_t v169 = (AudioChannelLayout *)v18;
                                                SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 0x8000, 1, (float *)a4, 0.70711);
                                                uint64_t v204 = (uint64_t)v20;
                                                uint64_t v205 = (AudioChannelLayout *)v18;
                                                int v206 = 2;
                                              }
                                            }
                                            else
                                            {
                                              int8x16_t v169 = (AudioChannelLayout *)v18;
                                              SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 0x8000, 33, (float *)a4, 0.70711);
                                              uint64_t v204 = (uint64_t)v20;
                                              uint64_t v205 = (AudioChannelLayout *)v18;
                                              int v206 = 34;
                                            }
                                            SetMatrixCoefficient(v204, v205, 0x20000, v206, (float *)a4, 0.70711);
                                            goto LABEL_394;
                                          }
                                          float v189 = 0.70711;
                                          uint64_t v185 = (uint64_t)v20;
                                          float32x4_t v186 = (AudioChannelLayout *)v18;
                                          int v187 = 3;
                                        }
                                        float32x4_t v188 = (float *)a4;
                                        goto LABEL_386;
                                      }
                                      if ((~v77 & 0x5000000) == 0)
                                      {
                                        SetMatrixCoefficient((uint64_t)v20, v169, 52, 52, (float *)a4, 1.0);
                                        float v175 = 1.0;
                                        uint64_t v176 = (uint64_t)v20;
                                        double v177 = v169;
                                        int v178 = 54;
                                        unint64_t v179 = (float *)a4;
LABEL_367:
                                        SetMatrixCoefficient(v176, v177, 54, v178, v179, v175);
                                        goto LABEL_368;
                                      }
                                      if (v157)
                                      {
                                        SetMatrixCoefficient((uint64_t)v20, v169, 52, 49, (float *)a4, 0.70711);
                                        uint64_t v176 = (uint64_t)v20;
                                        double v177 = v169;
                                        int v178 = 51;
LABEL_366:
                                        unint64_t v179 = (float *)a4;
                                        float v175 = 0.70711;
                                        goto LABEL_367;
                                      }
                                      if ((~v77 & 0x60000000) != 0)
                                      {
                                        if (v221 == 48)
                                        {
                                          int8x16_t v169 = (AudioChannelLayout *)v18;
                                          SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 52, 5, (float *)a4, 0.70711);
                                          uint64_t v195 = (uint64_t)v20;
                                          float64x2_t v196 = (AudioChannelLayout *)v18;
                                          int v197 = 6;
                                        }
                                        else
                                        {
                                          if (v163 == 1536)
                                          {
                                            int8x16_t v169 = (AudioChannelLayout *)v18;
                                            SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 52, 10, (float *)a4, 0.70711);
                                            SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 54, 11, (float *)a4, 0.70711);
                                            if ((v79 & 0x600) != 0)
                                            {
LABEL_370:
                                              SetMatrixCoefficient((uint64_t)v20, v169, 10, 10, (float *)a4, 1.0);
                                              float v180 = 1.0;
                                              uint64_t v181 = (uint64_t)v20;
                                              uint64_t v182 = v169;
                                              int v183 = 11;
LABEL_373:
                                              uint64_t v184 = (float *)a4;
LABEL_374:
                                              SetMatrixCoefficient(v181, v182, 11, v183, v184, v180);
                                              goto LABEL_375;
                                            }
                                            goto LABEL_375;
                                          }
                                          if ((v77 & 3) == 0)
                                          {
                                            int8x16_t v169 = (AudioChannelLayout *)v18;
                                            if ((v77 & 4) == 0) {
                                              goto LABEL_368;
                                            }
                                            SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 52, 3, (float *)a4, 0.70711);
                                            uint64_t v176 = (uint64_t)v20;
                                            double v177 = (AudioChannelLayout *)v18;
                                            int v178 = 3;
                                            goto LABEL_366;
                                          }
                                          int8x16_t v169 = (AudioChannelLayout *)v18;
                                          SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 52, 1, (float *)a4, 0.70711);
                                          uint64_t v195 = (uint64_t)v20;
                                          float64x2_t v196 = (AudioChannelLayout *)v18;
                                          int v197 = 2;
                                        }
                                      }
                                      else
                                      {
                                        int8x16_t v169 = (AudioChannelLayout *)v18;
                                        SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 52, 33, (float *)a4, 0.70711);
                                        uint64_t v195 = (uint64_t)v20;
                                        float64x2_t v196 = (AudioChannelLayout *)v18;
                                        int v197 = 34;
                                      }
                                      SetMatrixCoefficient(v195, v196, 54, v197, (float *)a4, 0.70711);
                                      goto LABEL_368;
                                    }
                                    int8x16_t v169 = (AudioChannelLayout *)v18;
                                    SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 49, 1, (float *)a4, 0.70711);
                                    uint64_t v198 = (uint64_t)v20;
                                    uint64_t v199 = (AudioChannelLayout *)v18;
                                    int v200 = 2;
                                  }
                                  SetMatrixCoefficient(v198, v199, 51, v200, (float *)a4, 0.70711);
                                  goto LABEL_361;
                                }
                                SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 13, 1, (float *)a4, 0.70711);
                                uint64_t v210 = (uint64_t)v20;
                                float32x4_t v211 = (AudioChannelLayout *)v18;
                                int v212 = 2;
                              }
                              SetMatrixCoefficient(v210, v211, 15, v212, (float *)a4, 0.70711);
                              goto LABEL_352;
                            }
                            if ((~v77 & 0x130) != 0)
                            {
                              if (v221 == 48)
                              {
                                SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 33, 5, (float *)a4, 0.70711);
                                uint64_t v140 = (uint64_t)v20;
                                long long v141 = (AudioChannelLayout *)v18;
                                int v142 = 6;
                                goto LABEL_334;
                              }
                              if ((v77 & 0x100) == 0)
                              {
                                if ((v77 & 3) != 0)
                                {
                                  SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 33, 1, (float *)a4, 0.70711);
                                  uint64_t v140 = (uint64_t)v20;
                                  long long v141 = (AudioChannelLayout *)v18;
                                  int v142 = 2;
                                }
                                else
                                {
                                  if ((v77 & 4) == 0) {
                                    goto LABEL_336;
                                  }
                                  SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 33, 3, (float *)a4, 0.70711);
                                  uint64_t v140 = (uint64_t)v20;
                                  long long v141 = (AudioChannelLayout *)v18;
                                  int v142 = 3;
                                }
                                goto LABEL_334;
                              }
                              uint64_t v145 = (uint64_t)v20;
                              unint64_t v144 = (AudioChannelLayout *)v18;
                              long long v146 = (AudioChannelLayout *)v18;
                              int v147 = 33;
                              int v148 = 9;
                            }
                            else
                            {
                              unint64_t v144 = (AudioChannelLayout *)v18;
                              SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 33, 5, (float *)a4, 0.70711);
                              SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 33, 9, (float *)a4, 0.70711);
                              uint64_t v145 = (uint64_t)v20;
                              long long v146 = (AudioChannelLayout *)v18;
                              int v147 = 34;
                              int v148 = 6;
                            }
                            SetMatrixCoefficient(v145, v146, v147, v148, (float *)a4, 0.70711);
                            uint64_t v140 = (uint64_t)v20;
                            long long v141 = v144;
                            int v142 = 9;
LABEL_334:
                            uint64_t v143 = (float *)a4;
                            float v139 = 0.70711;
                            goto LABEL_335;
                          }
                          SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 5, 1, (float *)a4, 0.70711);
                          uint64_t v134 = (uint64_t)v20;
                          long long v135 = (AudioChannelLayout *)v18;
                          int v136 = 2;
                          goto LABEL_290;
                        }
                        SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 5, 3, (float *)a4, 0.5);
                        float v138 = 0.5;
                        uint64_t v134 = (uint64_t)v20;
                        long long v135 = (AudioChannelLayout *)v18;
                        int v136 = 3;
                      }
                      long long v137 = (float *)a4;
                      goto LABEL_296;
                    }
                    float v131 = 0.70711;
                    uint64_t v128 = (uint64_t)v20;
                    uint64_t v129 = (AudioChannelLayout *)v18;
                    int v130 = 3;
                  }
                  long long v132 = (float *)a4;
LABEL_286:
                  SetMatrixCoefficient(v128, v129, 9, v130, v132, v131);
                  goto LABEL_287;
                }
                SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 14, 1, (float *)a4, 0.70711);
                uint64_t v105 = (uint64_t)v20;
                uint64_t v106 = (AudioChannelLayout *)v18;
                int v107 = 2;
                goto LABEL_228;
              }
              float v109 = 0.70711;
              uint64_t v105 = (uint64_t)v20;
              uint64_t v106 = (AudioChannelLayout *)v18;
              int v107 = 3;
            }
            long long v108 = (float *)a4;
            goto LABEL_231;
          }
          unsigned int v215 = v229;
          if (v38 == 7012356 || (v38 & 0xFFFE0000 | 0x10000) == 0xBF0000)
          {
            unsigned int v217 = v38 & 0xFFFF0000;
            *(_OWORD *)char v237 = xmmword_1901C6250;
            std::vector<int>::vector[abi:ne180100](&v226, v237, 4uLL);
            unsigned int v86 = v215 & 0xFFFF0000;
            if (v215 != 7012356 && (v215 & 0xFFFE0000 | 0x10000) != 0xBF0000)
            {
              HOA::HOA(v237, v38);
              float32x4_t v223 = 0;
              int v224 = 0;
              uint64_t v225 = 0;
              memset(__p, 0, sizeof(__p));
              if (v215 == 6553601)
              {
                if (v18[4]) {
                  __assert_rtn("AudioFormatProperty_MatrixMixMap", "AudioFormatPanningMixing.cpp", 2283, "destLayout->mChannelDescriptions[0].mChannelFlags == 0");
                }
                void v18[5] = 0;
                v18[6] = 0;
                uint8_t v18[4] = 2;
              }
              unint64_t v122 = v18[2];
              if (v122)
              {
                unint64_t v123 = 0;
                long long v124 = v18 + 6;
                do
                {
                  if ((*(unsigned char *)(v124 - 2) & 2) != 0)
                  {
                    std::vector<float>::push_back[abi:ne180100]((uint64_t)&v223, v124 - 1);
                    std::vector<float>::push_back[abi:ne180100]((uint64_t)__p, v124);
                    unint64_t v122 = v18[2];
                  }
                  ++v123;
                  v124 += 5;
                }
                while (v123 < v122);
                uint64_t v9 = 1718449215;
                long long v125 = v223;
                int64_t v126 = v224 - v223;
                if (v224 == v223)
                {
                  long long v125 = v224;
                }
                else if (HOA::createDecoder(v237, (uint64_t)&v223, (uint64_t)__p))
                {
                  logSubsystem();
                  long long v127 = logSubsystem(void)::category;
                  if (os_log_type_enabled((os_log_t)logSubsystem(void)::category, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)AudioStreamBasicDescription buf = 136315906;
                    *(void *)&uint8_t buf[4] = "AudioFormatPanningMixing.cpp";
                    *(_WORD *)&unsigned char buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 2309;
                    *(_WORD *)&unsigned char buf[18] = 1024;
                    *(_DWORD *)&buf[20] = v38;
                    __int16 v235 = 1024;
                    unsigned int v236 = v215;
                    _os_log_impl(&dword_18FEC0000, v127, OS_LOG_TYPE_ERROR, "%25s:%-5d Error creating HOA decoder matrix for %08X -> %08X", buf, 0x1Eu);
                  }
                }
                else
                {
                  memset(buf, 0, sizeof(buf));
                  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(buf, v238, v239, (v239 - (uint64_t)v238) >> 2);
                  uint64_t v149 = v18[2];
                  uint64_t v150 = *(char **)buf;
                  if (v149)
                  {
                    uint64_t v151 = 0;
                    int v152 = 0;
                    do
                    {
                      if ((v18[5 * v151 + 4] & 2) != 0)
                      {
                        uint64_t v153 = v219;
                        if (v219)
                        {
                          double v154 = &v150[4 * v152];
                          int v155 = v151;
                          do
                          {
                            a4[v155] = *(_DWORD *)v154;
                            v155 += v12;
                            v154 += v126 & 0xFFFFFFFFFFFFFFFCLL;
                            --v153;
                          }
                          while (v153);
                        }
                        ++v152;
                      }
                      ++v151;
                    }
                    while (v151 != v149);
                  }
                  if (v150) {
                    operator delete(v150);
                  }
                  uint64_t v9 = 0;
                }
              }
              else
              {
                long long v125 = 0;
                uint64_t v9 = 1718449215;
              }
              if (__p[0]) {
                operator delete(__p[0]);
              }
              if (v125)
              {
                int v224 = v125;
                operator delete(v125);
              }
              HOA::~HOA((HOA *)v237);
              long long v88 = v226;
              if (v226)
              {
LABEL_213:
                float32x4_t v227 = v88;
                operator delete(v88);
              }
              goto LABEL_4;
            }
            if (v12 >= v219) {
              uint64_t v12 = v219;
            }
            else {
              uint64_t v12 = v12;
            }
            if ((int)v12 < 4) {
              __assert_rtn("AudioFormatProperty_MatrixMixMap", "AudioFormatPanningMixing.cpp", 2232, "channelsToCopy >= 4");
            }
            uint64_t v87 = 0;
            long long v88 = v226;
            if (v217 == 12517376) {
              int v89 = 196608;
            }
            else {
              int v89 = 0x20000;
            }
            int v214 = v89;
            unsigned int v90 = v215 & 0xFFFF0000;
            BOOL v91 = v86 != 12517376 && v217 == 12517376;
            BOOL v92 = v86 == 12517376 && v217 != 12517376;
            BOOL v220 = v92;
            uint64_t v93 = (int)((v227 - v226) >> 2);
            if (v86 == 12517376) {
              int v94 = 196608;
            }
            else {
              int v94 = 0x20000;
            }
            int v216 = v94;
            while (1)
            {
              uint64_t v95 = v87 + 1;
              signed int v96 = vcvtpd_s64_f64(sqrt((double)((int)v87 + 1))) - 1;
              if (v91)
              {
                float v97 = 1.0 / sqrt((double)v96 * 2.0 + 1.0);
              }
              else
              {
                float v97 = 1.0;
                if (v220) {
                  float v97 = sqrt((double)v96 * 2.0 + 1.0);
                }
              }
              if (v87) {
                break;
              }
              if (v38 == 7012356)
              {
                float v97 = v97 * 1.41421356;
                int v99 = v216;
                goto LABEL_197;
              }
              if (v215 != 7012356)
              {
                if (v217 == 12517376) {
                  int v98 = 196608;
                }
                else {
                  int v98 = 0x20000;
                }
                if (v90 == 12517376) {
                  int v99 = 196608;
                }
                else {
                  int v99 = 0x20000;
                }
                goto LABEL_202;
              }
              float v97 = v97 * 0.707106781;
              int v98 = v214;
LABEL_200:
              if (v87 >= v93)
              {
                int v213 = 2262;
LABEL_459:
                __assert_rtn("AudioFormatProperty_MatrixMixMap", "AudioFormatPanningMixing.cpp", v213, "t < (int)bformatChannels.size()");
              }
              int v99 = *(_DWORD *)&v88[4 * v87];
LABEL_202:
              SetMatrixCoefficient((uint64_t)v20, v218, v98, v99, (float *)a4, v97);
              uint64_t v87 = v95;
              if (v12 == v95)
              {
                uint64_t v9 = 0;
                if (v88) {
                  goto LABEL_213;
                }
                goto LABEL_4;
              }
            }
            if (v217 == 12517376) {
              int v98 = v87 + 196608;
            }
            else {
              int v98 = v87 + 0x20000;
            }
            if (v90 == 12517376) {
              int v99 = v87 + 196608;
            }
            else {
              int v99 = v87 + 0x20000;
            }
            if (v38 == 7012356)
            {
LABEL_197:
              if (v87 >= v93)
              {
                int v213 = 2257;
                goto LABEL_459;
              }
              int v98 = *(_DWORD *)&v88[4 * v87];
            }
            if (v215 != 7012356) {
              goto LABEL_202;
            }
            goto LABEL_200;
          }
          if ((~v77 & 3) == 0 && v38 == 6815746)
          {
            SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 204, 1, (float *)a4, 0.70711);
            SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 204, 2, (float *)a4, 0.70711);
            SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 205, 1, (float *)a4, 0.70711);
            float v61 = -0.70711;
            uint64_t v62 = (uint64_t)v20;
            __double2 v63 = (AudioChannelLayout *)v18;
            int v64 = 205;
            goto LABEL_113;
          }
          if (v229 == 6815746 && (v78 & 3) == 3)
          {
            SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 1, 204, (float *)a4, 0.70711);
            SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 2, 204, (float *)a4, 0.70711);
            SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 1, 205, (float *)a4, 0.70711);
            float v61 = -0.70711;
            uint64_t v62 = (uint64_t)v20;
            __double2 v63 = (AudioChannelLayout *)v18;
            int v64 = 2;
            int v65 = 205;
            goto LABEL_158;
          }
          uint64_t v9 = 1718449215;
          if ((int)v229 <= 6750209)
          {
            if (v229 == 6553601)
            {
              if (v38 != 6815746)
              {
                if (v38 == 9633793)
                {
                  uint64_t v9 = 0;
                  *a4 = 1065353216;
                }
                goto LABEL_4;
              }
              goto LABEL_447;
            }
            if (v229 == 6619138)
            {
LABEL_446:
              if (v38 != 9633793) {
                goto LABEL_4;
              }
              goto LABEL_447;
            }
            int v156 = 6684674;
          }
          else
          {
            if ((int)v229 <= 6881281)
            {
              if (v229 != 6750210)
              {
                if (v229 != 6815746) {
                  goto LABEL_4;
                }
                if ((int)v38 > 6750209)
                {
                  if (v38 != 6750210 && v38 != 6881282)
                  {
                    int v133 = 6946818;
LABEL_470:
                    if (v38 != v133) {
                      goto LABEL_4;
                    }
                  }
LABEL_471:
                  uint64_t v9 = 0;
                  *(_OWORD *)a4 = xmmword_1901C6240;
                  goto LABEL_4;
                }
                if (v38 != 6553601)
                {
                  if (v38 != 6619138)
                  {
                    int v133 = 6684674;
                    goto LABEL_470;
                  }
                  goto LABEL_471;
                }
LABEL_447:
                uint64_t v9 = 0;
                *(void *)a4 = 1065353216;
                goto LABEL_4;
              }
              goto LABEL_446;
            }
            if (v229 == 6881282) {
              goto LABEL_446;
            }
            int v156 = 6946818;
          }
          if (v229 != v156) {
            goto LABEL_4;
          }
          goto LABEL_446;
        }
        float v61 = 1.0;
        uint64_t v62 = (uint64_t)v20;
        __double2 v63 = (AudioChannelLayout *)v18;
        int v64 = 3;
LABEL_146:
        int v65 = 3;
        goto LABEL_158;
      }
      SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 1, 0x20000, (float *)a4, 1.0);
      SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 2, 0x20000, (float *)a4, 1.0);
      SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 1, 131073, (float *)a4, 0.5);
      SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 2, 131073, (float *)a4, -0.5);
      SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 1, 131075, (float *)a4, 0.86603);
      uint64_t v62 = (uint64_t)v20;
      __double2 v63 = (AudioChannelLayout *)v18;
      int v64 = 2;
      int v65 = 131075;
      BOOL v85 = (float *)a4;
      float v61 = 0.86603;
LABEL_159:
      SetMatrixCoefficient(v62, v63, v64, v65, v85, v61);
      goto LABEL_160;
    }
    if (v229 == 6750210)
    {
      SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 1, 38, (float *)a4, 1.0);
      float v61 = 1.0;
      uint64_t v62 = (uint64_t)v20;
      __double2 v63 = (AudioChannelLayout *)v18;
      int v64 = 2;
      goto LABEL_157;
    }
    if (v229 != 8519688) {
      goto LABEL_126;
    }
    SetMatrixCoefficient((uint64_t)v20, (AudioChannelLayout *)v18, 1, 1, (float *)a4, 1.0);
    float v61 = 1.0;
    uint64_t v62 = (uint64_t)v20;
    __double2 v63 = (AudioChannelLayout *)v18;
    int v64 = 2;
LABEL_113:
    int v65 = 2;
LABEL_158:
    BOOL v85 = (float *)a4;
    goto LABEL_159;
  }
LABEL_4:
  if (__dst) {
    free(__dst);
  }
  if (v233) {
    free(v233);
  }
  return v9;
}

void sub_19009FE98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a2)
  {
    if (__p) {
      operator delete(__p);
    }
    if (a19) {
      operator delete(a19);
    }
    HOA::~HOA((HOA *)&a33);
    if (a22) {
      operator delete(a22);
    }
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x19009E39CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t octagonalCompatibility(AudioChannelLayout *a1, AudioChannelLayout *a2)
{
  int OctagonalStyle = getOctagonalStyle(a1);
  uint64_t result = getOctagonalStyle(a2);
  if (OctagonalStyle == 3)
  {
    if (result == 2)
    {
      uint64_t mNumberChannelDescriptions = a1->mNumberChannelDescriptions;
      if (mNumberChannelDescriptions)
      {
        mCoordinates = a1->mChannelDescriptions[0].mCoordinates;
        do
        {
          int v28 = *((_DWORD *)mCoordinates - 2);
          unsigned int v29 = v28 - 5;
          if ((v28 - 5) > 6)
          {
            int v30 = mCoordinates;
          }
          else
          {
            int v30 = mCoordinates;
            if ((0x63u >> v29))
            {
              int v28 = *(_DWORD *)&asc_1901DADD8[4 * v29];
              int v30 = (Float32 *)((char *)&unk_1901DADF4 + 4 * v29);
            }
          }
          int v31 = *(_DWORD *)v30;
          *((_DWORD *)mCoordinates - 2) = v28;
          if ((*(unsigned char *)(mCoordinates - 1) & 2) != 0) {
            *(_DWORD *)mCoordinates = v31;
          }
          mCoordinates += 5;
          --mNumberChannelDescriptions;
        }
        while (mNumberChannelDescriptions);
      }
      return result;
    }
    if (result != 1) {
      return result;
    }
    uint64_t v11 = a1->mNumberChannelDescriptions;
    if (!v11) {
      return result;
    }
    for (float i = a1->mChannelDescriptions[0].mCoordinates; ; i += 5)
    {
      int v13 = *((_DWORD *)i - 2);
      if (v13 > 9)
      {
        if (v13 == 10)
        {
          int v13 = 35;
          int v14 = -1028390912;
        }
        else
        {
          if (v13 != 11)
          {
LABEL_37:
            int v15 = *(_DWORD *)i;
            goto LABEL_38;
          }
          int v13 = 36;
          int v14 = 1119092736;
        }
      }
      else if (v13 == 1)
      {
        int v14 = -1036779520;
      }
      else
      {
        if (v13 != 2) {
          goto LABEL_37;
        }
        int v14 = 1110704128;
      }
      int v15 = v14;
LABEL_38:
      *((_DWORD *)i - 2) = v13;
      if ((*(unsigned char *)(i - 1) & 2) != 0) {
        *(_DWORD *)float i = v15;
      }
      if (!--v11) {
        return result;
      }
    }
  }
  if (OctagonalStyle == 2)
  {
    if (result == 3)
    {
      uint64_t v32 = a1->mNumberChannelDescriptions;
      if (v32)
      {
        uint64_t v33 = a1->mChannelDescriptions[0].mCoordinates;
        while (2)
        {
          int v34 = *((_DWORD *)v33 - 2);
          switch(v34)
          {
            case 1:
              int v35 = -1036779520;
              goto LABEL_100;
            case 2:
              int v35 = 1110704128;
              goto LABEL_100;
            case 3:
            case 4:
              goto LABEL_95;
            case 5:
              int v34 = 10;
              int v35 = -1028390912;
              goto LABEL_100;
            case 6:
              int v34 = 11;
              int v35 = 1119092736;
              goto LABEL_100;
            default:
              if (v34 == 33)
              {
                int v34 = 5;
                int v35 = -1022951424;
              }
              else
              {
                if (v34 != 34)
                {
LABEL_95:
                  int v36 = *(_DWORD *)v33;
                  goto LABEL_101;
                }
                int v34 = 6;
                int v35 = 1124532224;
              }
LABEL_100:
              int v36 = v35;
LABEL_101:
              *((_DWORD *)v33 - 2) = v34;
              if ((*(unsigned char *)(v33 - 1) & 2) != 0) {
                *(_DWORD *)uint64_t v33 = v36;
              }
              v33 += 5;
              if (!--v32) {
                return result;
              }
              continue;
          }
        }
      }
    }
    else if (result == 1)
    {
      uint64_t v16 = a1->mNumberChannelDescriptions;
      if (v16)
      {
        int8x8_t v17 = a1->mChannelDescriptions[0].mCoordinates;
        while (2)
        {
          int v18 = *((_DWORD *)v17 - 2);
          switch(v18)
          {
            case 1:
              int v19 = -1036779520;
              goto LABEL_56;
            case 2:
              int v19 = 1110704128;
              goto LABEL_56;
            case 3:
            case 4:
              goto LABEL_51;
            case 5:
              int v18 = 35;
              int v19 = -1028390912;
              goto LABEL_56;
            case 6:
              int v18 = 36;
              int v19 = 1119092736;
              goto LABEL_56;
            default:
              if (v18 == 33)
              {
                int v18 = 5;
                int v19 = -1022951424;
              }
              else
              {
                if (v18 != 34)
                {
LABEL_51:
                  int v20 = *(_DWORD *)v17;
                  goto LABEL_57;
                }
                int v18 = 6;
                int v19 = 1124532224;
              }
LABEL_56:
              int v20 = v19;
LABEL_57:
              *((_DWORD *)v17 - 2) = v18;
              if ((*(unsigned char *)(v17 - 1) & 2) != 0) {
                *(_DWORD *)int8x8_t v17 = v20;
              }
              v17 += 5;
              if (!--v16) {
                return result;
              }
              continue;
          }
        }
      }
    }
    return result;
  }
  if (OctagonalStyle != 1) {
    return result;
  }
  if (result == 3)
  {
    uint64_t v21 = a1->mNumberChannelDescriptions;
    if (!v21) {
      return result;
    }
    for (float j = a1->mChannelDescriptions[0].mCoordinates; ; j += 5)
    {
      int v23 = *((_DWORD *)j - 2);
      if (v23 > 34)
      {
        if (v23 == 35)
        {
          int v23 = 10;
          int v24 = -1028390912;
        }
        else
        {
          if (v23 != 36)
          {
LABEL_73:
            int v25 = *(_DWORD *)j;
            goto LABEL_74;
          }
          int v23 = 11;
          int v24 = 1119092736;
        }
      }
      else if (v23 == 1)
      {
        int v24 = -1036779520;
      }
      else
      {
        if (v23 != 2) {
          goto LABEL_73;
        }
        int v24 = 1110704128;
      }
      int v25 = v24;
LABEL_74:
      *((_DWORD *)j - 2) = v23;
      if ((*(unsigned char *)(j - 1) & 2) != 0) {
        *(_DWORD *)float j = v25;
      }
      if (!--v21) {
        return result;
      }
    }
  }
  if (result == 2)
  {
    uint64_t v6 = a1->mNumberChannelDescriptions;
    if (v6)
    {
      uint64_t v7 = a1->mChannelDescriptions[0].mCoordinates;
      do
      {
        int v8 = *((_DWORD *)v7 - 2);
        if (v8 > 34)
        {
          if (v8 == 35)
          {
            int v8 = 5;
            int v9 = -1025769472;
          }
          else
          {
            if (v8 != 36)
            {
LABEL_18:
              int v10 = *(_DWORD *)v7;
              goto LABEL_19;
            }
            int v8 = 6;
            int v9 = 1121714176;
          }
        }
        else if (v8 == 5)
        {
          int v8 = 33;
          int v9 = -1021968384;
        }
        else
        {
          if (v8 != 6) {
            goto LABEL_18;
          }
          int v8 = 34;
          int v9 = 1125515264;
        }
        int v10 = v9;
LABEL_19:
        *((_DWORD *)v7 - 2) = v8;
        if ((*(unsigned char *)(v7 - 1) & 2) != 0) {
          *(_DWORD *)uint64_t v7 = v10;
        }
        v7 += 5;
        --v6;
      }
      while (v6);
    }
  }
  return result;
}

uint64_t singleSurroundPairCompatibility(AudioChannelLayout *a1, AudioChannelLayout *a2)
{
  int SingleSurroundPairStyle = getSingleSurroundPairStyle(a1);
  uint64_t result = getSingleSurroundPairStyle(a2);
  switch(SingleSurroundPairStyle)
  {
    case 3:
      if (result == 2)
      {
LABEL_8:
        return transformSurroundsToSideDirect((uint64_t)a1);
      }
      break;
    case 2:
      if (result == 3)
      {
LABEL_17:
        return transformSurroundsToRear((uint64_t)a1);
      }
      break;
    case 1:
      if (result != 3)
      {
        if (result != 2) {
          return result;
        }
        goto LABEL_8;
      }
      goto LABEL_17;
    default:
      return result;
  }
  if (result == 1)
  {
    return transformSurroundsToSide((uint64_t)a1);
  }
  return result;
}

uint64_t SetMatrixCoefficient(uint64_t result, AudioChannelLayout *a2, int a3, int a4, float *a5, float a6)
{
  uint64_t v6 = *(unsigned int *)(result + 8);
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
    {
      if (*(_DWORD *)(result + 20 * i + 12) == a3)
      {
        uint64_t mNumberChannelDescriptions = a2->mNumberChannelDescriptions;
        if (mNumberChannelDescriptions)
        {
          int v9 = mNumberChannelDescriptions * i;
          mChannelDescriptions = a2->mChannelDescriptions;
          do
          {
            AudioChannelLabel mChannelLabel = mChannelDescriptions->mChannelLabel;
            ++mChannelDescriptions;
            if (mChannelLabel == a4) {
              a5[v9] = a6;
            }
            ++v9;
            --mNumberChannelDescriptions;
          }
          while (mNumberChannelDescriptions);
        }
      }
    }
  }
  return result;
}

uint64_t ChannelLabelReduceMatrixStereo(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 8);
  if (v1)
  {
    int v2 = 0;
    int v3 = 0;
    int v4 = 0;
    int v5 = 0;
    uint64_t v6 = (int *)(result + 12);
    uint64_t v7 = *(unsigned int *)(result + 8);
    do
    {
      int v9 = *v6;
      v6 += 5;
      int v8 = v9;
      if (v9 > 37)
      {
        if (v8 == 39)
        {
          int v2 = 1;
        }
        else if (v8 == 38)
        {
          int v4 = 1;
        }
      }
      else if (v8 == 1)
      {
        int v5 = 1;
      }
      else if (v8 == 2)
      {
        int v3 = 1;
      }
      --v7;
    }
    while (v7);
    if ((v5 & v4 & 1) == 0 && (v3 & v2 & 1) == 0)
    {
      int v10 = (int *)(result + 12);
      do
      {
        if (*v10 == 39) {
          int v11 = 2;
        }
        else {
          int v11 = *v10;
        }
        if (*v10 == 38) {
          int v12 = 1;
        }
        else {
          int v12 = v11;
        }
        *int v10 = v12;
        v10 += 5;
        --v1;
      }
      while (v1);
    }
  }
  return result;
}

uint64_t AudioFormatProperty_GetABitmapForCompare(const AudioChannelLayout *a1)
{
  signed int mChannelLayoutTag = a1->mChannelLayoutTag;
  if (!a1->mChannelLayoutTag)
  {
    uint64_t mNumberChannelDescriptions = a1->mNumberChannelDescriptions;
    if (!mNumberChannelDescriptions) {
      return 0;
    }
    LODWORD(result) = 0;
    mChannelDescriptions = a1->mChannelDescriptions;
    do
    {
      int mChannelLabel = mChannelDescriptions->mChannelLabel;
      ++mChannelDescriptions;
      int v6 = mChannelLabel;
      if (mChannelLabel > 207)
      {
        if (v6 == 302) {
          int v8 = 2;
        }
        else {
          int v8 = 0;
        }
        if (v6 == 301) {
          int v8 = 1;
        }
        if (v6 == 209) {
          int v9 = 2;
        }
        else {
          int v9 = 0;
        }
        if (v6 == 208) {
          int v9 = 1;
        }
        if (v6 <= 300) {
          int v8 = v9;
        }
      }
      else
      {
        int v8 = 0;
        switch(v6)
        {
          case 1:
          case 38:
            int v8 = 1;
            break;
          case 2:
          case 39:
            int v8 = 2;
            break;
          case 3:
          case 42:
            int v8 = 4;
            break;
          case 4:
          case 37:
            int v8 = 8;
            break;
          case 5:
            int v8 = 16;
            break;
          case 6:
            int v8 = 32;
            break;
          case 7:
            int v8 = 64;
            break;
          case 8:
            int v8 = 128;
            break;
          case 9:
            int v8 = 256;
            break;
          case 10:
            int v8 = 512;
            break;
          case 11:
            int v8 = 1024;
            break;
          case 12:
            int v8 = 2048;
            break;
          case 13:
            int v8 = 4096;
            break;
          case 14:
            int v8 = 0x2000;
            break;
          case 15:
            int v8 = 0x4000;
            break;
          case 16:
            int v8 = 0x8000;
            break;
          case 17:
            int v8 = 0x10000;
            break;
          case 18:
            int v8 = 0x20000;
            break;
          case 33:
            int v8 = 0x20000000;
            break;
          case 34:
            int v8 = 0x40000000;
            break;
          case 35:
            int v8 = 0x8000000;
            break;
          case 36:
            int v8 = 0x10000000;
            break;
          case 49:
            int v8 = 0x200000;
            break;
          case 51:
            int v8 = 0x800000;
            break;
          case 52:
            int v8 = 0x1000000;
            break;
          case 53:
            int v8 = 0x2000000;
            break;
          case 54:
            int v8 = 0x4000000;
            break;
          default:
            break;
        }
      }
      uint64_t result = v8 | result;
      --mNumberChannelDescriptions;
    }
    while (mNumberChannelDescriptions);
    return result;
  }
  if (mChannelLayoutTag == 0x10000) {
    return a1->mChannelBitmap;
  }
  if (mChannelLayoutTag > 10289158)
  {
    if (mChannelLayoutTag <= 11993095)
    {
      if (mChannelLayoutTag <= 11141125)
      {
        if (mChannelLayoutTag > 10682375)
        {
          if (mChannelLayoutTag <= 10878983)
          {
            if (mChannelLayoutTag == 10682376) {
              return 402653247;
            }
            if (mChannelLayoutTag != 10747912)
            {
              if (mChannelLayoutTag == 10813448) {
                return 2367;
              }
              return 0;
            }
            return 20543;
          }
          if (mChannelLayoutTag <= 11010051)
          {
            if (mChannelLayoutTag != 10878984)
            {
              if (mChannelLayoutTag == 10944520) {
                return 10303;
              }
              return 0;
            }
            return 8511;
          }
          if (mChannelLayoutTag == 11010052) {
            return 15;
          }
          int v11 = 11075589;
          goto LABEL_207;
        }
        if (mChannelLayoutTag > 10485767)
        {
          if (mChannelLayoutTag != 10485768)
          {
            if (mChannelLayoutTag != 10551304)
            {
              if (mChannelLayoutTag == 10616840) {
                return 1599;
              }
              return 0;
            }
            return 255;
          }
          return 1610612799;
        }
        if (mChannelLayoutTag != 10289159)
        {
          if (mChannelLayoutTag != 10354695)
          {
            if (mChannelLayoutTag == 10420231) {
              return 8255;
            }
            return 0;
          }
          return 2111;
        }
        return 319;
      }
      if (mChannelLayoutTag <= 11534342)
      {
        if (mChannelLayoutTag > 11337734)
        {
          switch(mChannelLayoutTag)
          {
            case 11337735:
              return 251;
            case 11403271:
              return 1610614799;
            case 11468807:
              return 1610613007;
            default:
              return 0;
          }
        }
        else
        {
          switch(mChannelLayoutTag)
          {
            case 11141126:
              return 243;
            case 11206662:
              return 1610614791;
            case 11272198:
              return 1610612999;
            default:
              return 0;
          }
        }
      }
      if (mChannelLayoutTag > 11730951)
      {
        if (mChannelLayoutTag <= 11862024)
        {
          if (mChannelLayoutTag != 11730952)
          {
            if (mChannelLayoutTag == 11796489) {
              return 1610612987;
            }
            return 0;
          }
          return 503;
        }
        if (mChannelLayoutTag == 11862025) {
          return 511;
        }
        int v10 = 11927559;
        goto LABEL_221;
      }
      if (mChannelLayoutTag != 11534343)
      {
        if (mChannelLayoutTag != 11599880)
        {
          if (mChannelLayoutTag == 11665416) {
            return 1610612979;
          }
          return 0;
        }
        return 255;
      }
      return 247;
    }
    if (mChannelLayoutTag <= 13041670)
    {
      if (mChannelLayoutTag > 12582923)
      {
        if (mChannelLayoutTag > 12779529)
        {
          if (mChannelLayoutTag <= 12910595)
          {
            if (mChannelLayoutTag != 12779530)
            {
              if (mChannelLayoutTag == 12845066) {
                return 1621098559;
              }
              return 0;
            }
            return 83906623;
          }
          if (mChannelLayoutTag != 12910596)
          {
            if (mChannelLayoutTag == 12976134) {
              return 311;
            }
            return 0;
          }
          return 263;
        }
        if (mChannelLayoutTag != 12582924)
        {
          if (mChannelLayoutTag != 12648464)
          {
            if (mChannelLayoutTag == 12713992) {
              return 10485823;
            }
            return 0;
          }
          return 2107658303;
        }
        return 1694519359;
      }
      if (mChannelLayoutTag <= 12255237)
      {
        if (mChannelLayoutTag == 11993096) {
          return 1610612799;
        }
        if (mChannelLayoutTag == 12124164) {
          return 1610612739;
        }
        int v14 = 12189701;
LABEL_199:
        if (mChannelLayoutTag != v14) {
          return 0;
        }
        return 1610612743;
      }
      if (mChannelLayoutTag != 12255238)
      {
        if (mChannelLayoutTag == 12320775) {
          return 319;
        }
        int v17 = 12386312;
        goto LABEL_230;
      }
      return 1610612751;
    }
    if (mChannelLayoutTag <= 13959173)
    {
      if (mChannelLayoutTag > 13238283)
      {
        if (mChannelLayoutTag == 13238284) {
          return 1694519359;
        }
        if (mChannelLayoutTag == 13303822) {
          return 1705005119;
        }
        int v14 = 13893637;
        goto LABEL_199;
      }
      if (mChannelLayoutTag == 13041671 || mChannelLayoutTag == 13107207) {
        return 319;
      }
      int v17 = 13172744;
    }
    else
    {
      if (mChannelLayoutTag > 14155780)
      {
        if (mChannelLayoutTag > 14286854)
        {
          if (mChannelLayoutTag == 14286855) {
            return 319;
          }
          int v17 = 14352392;
          goto LABEL_230;
        }
        if (mChannelLayoutTag == 14155781) {
          return 1610612743;
        }
        if (mChannelLayoutTag != 14221318) {
          return 0;
        }
        return 1610612751;
      }
      if (mChannelLayoutTag == 13959174) {
        return 1610612751;
      }
      if (mChannelLayoutTag == 14024711) {
        return 319;
      }
      int v17 = 14090248;
    }
LABEL_230:
    if (mChannelLayoutTag != v17) {
      return 0;
    }
    return 1610612799;
  }
  if (mChannelLayoutTag > 8388615)
  {
    if (mChannelLayoutTag <= 9240581)
    {
      if (mChannelLayoutTag > 8781827)
      {
        if (mChannelLayoutTag > 8978436)
        {
          if (mChannelLayoutTag <= 9109509)
          {
            if (mChannelLayoutTag != 8978437)
            {
              if (mChannelLayoutTag != 9043973) {
                return 0;
              }
              return 59;
            }
            return 271;
          }
          if (mChannelLayoutTag == 9109510) {
            return 311;
          }
          int v16 = 9175047;
LABEL_225:
          if (mChannelLayoutTag == v16) {
            return 1610612791;
          }
          return 0;
        }
        if (mChannelLayoutTag != 8781828)
        {
          if (mChannelLayoutTag == 8847365) {
            return 59;
          }
          int v18 = 8912900;
          goto LABEL_162;
        }
        return 267;
      }
      if (mChannelLayoutTag > 8585218)
      {
        if (mChannelLayoutTag != 8585219)
        {
          if (mChannelLayoutTag != 8650756)
          {
            if (mChannelLayoutTag == 8716291) {
              return 11;
            }
            return 0;
          }
          return 51;
        }
        return 259;
      }
      if (mChannelLayoutTag != 8388616)
      {
        if (mChannelLayoutTag == 8454152) {
          return 255;
        }
        int v13 = 8519688;
        goto LABEL_153;
      }
      return 1610612799;
    }
    if (mChannelLayoutTag > 9830402)
    {
      if (mChannelLayoutTag <= 10027011)
      {
        if (mChannelLayoutTag == 9830403) {
          return 7;
        }
        if (mChannelLayoutTag == 9895940) {
          return 263;
        }
        int v18 = 9961476;
LABEL_162:
        if (mChannelLayoutTag != v18) {
          return 0;
        }
        return 15;
      }
      if (mChannelLayoutTag > 10158085)
      {
        if (mChannelLayoutTag == 10158086) {
          return 311;
        }
        int v16 = 10223623;
        goto LABEL_225;
      }
      if (mChannelLayoutTag == 10027012) {
        return 267;
      }
      int v11 = 10092549;
LABEL_207:
      if (mChannelLayoutTag != v11) {
        return 0;
      }
      return 271;
    }
    if (mChannelLayoutTag <= 9437191)
    {
      if (mChannelLayoutTag == 9240582) {
        return 311;
      }
      if (mChannelLayoutTag != 9306119)
      {
        int v16 = 9371655;
        goto LABEL_225;
      }
      return 319;
    }
    if (mChannelLayoutTag == 9437192) {
      return 1610613047;
    }
    if (mChannelLayoutTag != 9699335)
    {
      if (mChannelLayoutTag == 9764866) {
        return 12;
      }
      return 0;
    }
    return 247;
  }
  if (mChannelLayoutTag > 7536643)
  {
    if (mChannelLayoutTag > 7929861)
    {
      if (mChannelLayoutTag > 8126469)
      {
        if (mChannelLayoutTag <= 8257543)
        {
          if (mChannelLayoutTag != 8126470)
          {
            int v10 = 8192007;
LABEL_221:
            if (mChannelLayoutTag != v10) {
              return 0;
            }
            return 319;
          }
          return 63;
        }
        if (mChannelLayoutTag != 8257544 && mChannelLayoutTag != 8323080) {
          return 0;
        }
        return 255;
      }
      if (mChannelLayoutTag == 7929862 || mChannelLayoutTag == 7995398) {
        return 63;
      }
      int v13 = 8060934;
LABEL_153:
      if (mChannelLayoutTag != v13) {
        return 0;
      }
      return 63;
    }
    if (mChannelLayoutTag > 7733252)
    {
      if (mChannelLayoutTag == 7733253 || mChannelLayoutTag == 7798789) {
        return 55;
      }
      int v15 = 7864325;
LABEL_186:
      if (mChannelLayoutTag != v15) {
        return 0;
      }
      return 55;
    }
    if (mChannelLayoutTag != 7536644 && mChannelLayoutTag != 7602180)
    {
      int v15 = 7667717;
      goto LABEL_186;
    }
    return 263;
  }
  if (mChannelLayoutTag > 7012355)
  {
    if (mChannelLayoutTag > 7208965)
    {
      if (mChannelLayoutTag <= 7405570)
      {
        if (mChannelLayoutTag != 7208966)
        {
          if (mChannelLayoutTag == 7274504) {
            return 1847;
          }
          return 0;
        }
        return 311;
      }
      if (mChannelLayoutTag == 7405571 || mChannelLayoutTag == 7471107) {
        return 7;
      }
      return 0;
    }
    if (mChannelLayoutTag == 7012356) {
      return 0;
    }
    if (mChannelLayoutTag != 7077892)
    {
      int v15 = 7143429;
      goto LABEL_186;
    }
    return 51;
  }
  if (mChannelLayoutTag > 6750209)
  {
    if (mChannelLayoutTag == 6750210 || mChannelLayoutTag == 6881282) {
      return 3;
    }
    int v12 = 6946818;
    goto LABEL_170;
  }
  if (mChannelLayoutTag != 6553601)
  {
    if (mChannelLayoutTag == 6619138) {
      return 3;
    }
    int v12 = 6684674;
LABEL_170:
    if (mChannelLayoutTag != v12) {
      return 0;
    }
    return 3;
  }
  return 4;
}

void *std::vector<int>::vector[abi:ne180100](void *a1, const void *a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a3);
    int v6 = (char *)a1[1];
    memmove(v6, a2, 4 * a3);
    a1[1] = &v6[4 * a3];
  }
  return a1;
}

void sub_1900A1314(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<float>::push_back[abi:ne180100](uint64_t a1, _DWORD *a2)
{
  int v5 = *(_DWORD **)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = *(_DWORD **)a1;
    uint64_t v8 = ((uint64_t)v5 - *(void *)a1) >> 2;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 1 > v9) {
      unint64_t v9 = v10 >> 1;
    }
    BOOL v11 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v9;
    }
    if (v12)
    {
      unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v12);
      uint64_t v7 = *(_DWORD **)a1;
      int v5 = *(_DWORD **)(a1 + 8);
    }
    else
    {
      uint64_t v13 = 0;
    }
    int v14 = (_DWORD *)(v12 + 4 * v8);
    unint64_t v15 = v12 + 4 * v13;
    _DWORD *v14 = *a2;
    int v6 = v14 + 1;
    while (v5 != v7)
    {
      int v16 = *--v5;
      *--int v14 = v16;
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + 16) = v15;
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    _DWORD *v5 = *a2;
    int v6 = v5 + 1;
  }
  *(void *)(a1 + 8) = v6;
}

void logSubsystem(void)
{
  {
    logSubsystem(void)::category = (uint64_t)os_log_create("com.apple.coreaudio.utility", "AudioFormatPanningMixing");
  }
}

uint64_t getSingleSurroundPairStyle(const AudioChannelLayout *a1)
{
  UInt32 mNumberChannelDescriptions = a1->mNumberChannelDescriptions;
  if (mNumberChannelDescriptions - 7 < 0xFFFFFFFE) {
    return 0;
  }
  unsigned int v3 = 0;
  mChannelDescriptions = a1->mChannelDescriptions;
  uint64_t v5 = a1->mNumberChannelDescriptions;
  do
  {
    AudioChannelLabel mChannelLabel = mChannelDescriptions->mChannelLabel;
    ++mChannelDescriptions;
    AudioChannelLabel v6 = mChannelLabel;
    switch(mChannelLabel)
    {
      case 1u:
        v3 |= 1u;
        break;
      case 2u:
        v3 |= 2u;
        break;
      case 3u:
        v3 |= 4u;
        break;
      case 4u:
        v3 |= 8u;
        break;
      case 5u:
        v3 |= 0x10u;
        break;
      case 6u:
        v3 |= 0x20u;
        break;
      case 7u:
      case 8u:
      case 9u:
        break;
      case 0xAu:
        v3 |= 0x40u;
        break;
      case 0xBu:
        v3 |= 0x80u;
        break;
      default:
        int v8 = v3 | 0x100;
        if (v6 == 34) {
          v3 |= 0x200u;
        }
        if (v6 == 33) {
          unsigned int v3 = v8;
        }
        break;
    }
    --v5;
  }
  while (v5);
  BOOL v9 = (v3 & 8) != 0 && mNumberChannelDescriptions == 6;
  unsigned int v10 = v3 & 0xFFFFFFF7;
  if (!v9) {
    unsigned int v10 = v3;
  }
  if (v10 == 199) {
    int v11 = 2;
  }
  else {
    int v11 = 0;
  }
  if (v10 == 775) {
    int v12 = 3;
  }
  else {
    int v12 = v11;
  }
  if (v10 == 55) {
    unsigned int v13 = 1;
  }
  else {
    unsigned int v13 = v12;
  }
  if ((~v10 & 7) != 0) {
    return 0;
  }
  else {
    return v13;
  }
}

uint64_t transformSurroundsToSideDirect(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 8);
  if (v1)
  {
    int v2 = (float *)(result + 20);
    do
    {
      int v3 = *((_DWORD *)v2 - 2);
      int v4 = 10;
      float v5 = -110.0;
      if (v3 != 5 && v3 != 33)
      {
        float v5 = *v2;
        BOOL v6 = v3 == 34 || v3 == 6;
        int v4 = v6 ? 11 : *((_DWORD *)v2 - 2);
        if (v6) {
          float v5 = 110.0;
        }
      }
      *((_DWORD *)v2 - 2) = v4;
      if ((*(unsigned char *)(v2 - 1) & 2) != 0) {
        float *v2 = v5;
      }
      v2 += 5;
      --v1;
    }
    while (v1);
  }
  return result;
}

uint64_t transformSurroundsToRear(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 8);
  if (v1)
  {
    int v2 = (float *)(result + 20);
    do
    {
      int v3 = *((_DWORD *)v2 - 2);
      if (v3 == 5 || v3 == 10)
      {
        int v3 = 33;
        float v5 = -150.0;
      }
      else
      {
        float v5 = *v2;
        BOOL v6 = v3 == 11 || v3 == 6;
        if (v6) {
          int v3 = 34;
        }
        if (v6) {
          float v5 = 150.0;
        }
      }
      *((_DWORD *)v2 - 2) = v3;
      if ((*(unsigned char *)(v2 - 1) & 2) != 0) {
        float *v2 = v5;
      }
      v2 += 5;
      --v1;
    }
    while (v1);
  }
  return result;
}

uint64_t transformSurroundsToSide(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 8);
  if (v1)
  {
    int v2 = (float *)(result + 20);
    do
    {
      int v3 = *((_DWORD *)v2 - 2);
      int v4 = 5;
      float v5 = -110.0;
      if (v3 != 10 && v3 != 33)
      {
        float v5 = *v2;
        BOOL v6 = v3 == 34 || v3 == 11;
        int v4 = v6 ? 6 : *((_DWORD *)v2 - 2);
        if (v6) {
          float v5 = 110.0;
        }
      }
      *((_DWORD *)v2 - 2) = v4;
      if ((*(unsigned char *)(v2 - 1) & 2) != 0) {
        float *v2 = v5;
      }
      v2 += 5;
      --v1;
    }
    while (v1);
  }
  return result;
}

uint64_t getOctagonalStyle(const AudioChannelLayout *a1)
{
  uint64_t mNumberChannelDescriptions = a1->mNumberChannelDescriptions;
  if (!mNumberChannelDescriptions) {
    return 0;
  }
  int v2 = 0;
  mChannelDescriptions = a1->mChannelDescriptions;
  do
  {
    AudioChannelLabel mChannelLabel = mChannelDescriptions->mChannelLabel;
    ++mChannelDescriptions;
    AudioChannelLabel v4 = mChannelLabel;
    switch(mChannelLabel)
    {
      case 1u:
        v2 |= 1u;
        break;
      case 2u:
        v2 |= 2u;
        break;
      case 3u:
        v2 |= 0x400u;
        break;
      case 4u:
      case 7u:
      case 8u:
        break;
      case 5u:
        v2 |= 4u;
        break;
      case 6u:
        v2 |= 8u;
        break;
      case 9u:
        v2 |= 0x800u;
        break;
      case 0xAu:
        v2 |= 0x40u;
        break;
      case 0xBu:
        v2 |= 0x80u;
        break;
      default:
        switch(v4)
        {
          case '!':
            v2 |= 0x100u;
            break;
          case '""':
            v2 |= 0x200u;
            break;
          case '#':
            v2 |= 0x10u;
            break;
          case '$':
            v2 |= 0x20u;
            break;
          default:
            goto LABEL_17;
        }
        break;
    }
LABEL_17:
    --mNumberChannelDescriptions;
  }
  while (mNumberChannelDescriptions);
  if (v2 == 3279) {
    int v6 = 3;
  }
  else {
    int v6 = 0;
  }
  if (v2 == 3855) {
    int v7 = 2;
  }
  else {
    int v7 = v6;
  }
  if (v2 == 3135) {
    unsigned int v8 = 1;
  }
  else {
    unsigned int v8 = v7;
  }
  if ((~v2 & 0xC0F) != 0) {
    return 0;
  }
  else {
    return v8;
  }
}

uint64_t AudioFormatProperty_ChannelMap(const AudioChannelLayout *const *a1, const AudioChannelLayout *a2, unsigned int *a3, _DWORD *a4)
{
  __dst = 0;
  uint64_t v47 = 0;
  unsigned int v45 = 0;
  uint64_t v8 = AudioFormatProperty_NumberOfChannelsForLayout((const AudioChannelLayout *)a1, &v45);
  if (v8)
  {
    uint64_t v9 = v8;
    goto LABEL_7;
  }
  unsigned int v44 = 0;
  uint64_t v10 = AudioFormatProperty_NumberOfChannelsForLayout(a2, &v44);
  if (v10)
  {
    uint64_t v9 = v10;
    int v11 = 0;
    goto LABEL_5;
  }
  AudioChannelLayoutTag mChannelLayoutTag = a2->mChannelLayoutTag;
  int v14 = *(_DWORD *)a1;
  unsigned int v15 = v44;
  unsigned int v16 = *a3;
  if (v44 < *a3) {
    unsigned int v16 = v44;
  }
  *a3 = v16;
  uint64_t v43 = v45;
  size_t v17 = 20 * v45 + 12;
  CADeprecated::CAAutoFree<unsigned char>::allocBytes((void **)&v47, v17, 0);
  size_t v18 = 20 * v15 + 12;
  CADeprecated::CAAutoFree<unsigned char>::allocBytes(&__dst, v18, 0);
  if (mChannelLayoutTag == 0x10000)
  {
    int v11 = (AudioChannelLayout *)__dst;
    AudioFormatProperty_ChannelLayoutForBitmap(a2->mChannelBitmap, (AudioChannelLayout *)__dst, v19);
  }
  else if (mChannelLayoutTag)
  {
    int v11 = (AudioChannelLayout *)__dst;
    uint64_t v9 = AudioFormatProperty_ChannelLayoutForTag(a2->mChannelLayoutTag, (AudioChannelLayout *)__dst);
    if (v9) {
      goto LABEL_5;
    }
  }
  else
  {
    int v11 = (AudioChannelLayout *)__dst;
    memcpy(__dst, a2, v18);
  }
  if (v14 == 0x10000)
  {
    uint64_t v21 = v47;
    AudioFormatProperty_ChannelLayoutForBitmap(*((_DWORD *)a1 + 1), v47, v20);
  }
  else if (v14)
  {
    uint64_t v21 = v47;
    uint64_t v22 = AudioFormatProperty_ChannelLayoutForTag(*(_DWORD *)a1, v47);
    if (v22)
    {
      uint64_t v9 = v22;
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v21 = v47;
    memcpy(v47, a1, v17);
  }
  uint64_t mNumberChannelDescriptions = v21->mNumberChannelDescriptions;
  if (mNumberChannelDescriptions)
  {
    mChannelDescriptions = v21->mChannelDescriptions;
    do
    {
      int mChannelLabel = mChannelDescriptions->mChannelLabel;
      if ((int)mChannelDescriptions->mChannelLabel > 300)
      {
        if (mChannelLabel == 301)
        {
LABEL_30:
          int mChannelLabel = 1;
        }
        else if (mChannelLabel == 302)
        {
LABEL_29:
          int mChannelLabel = 2;
        }
      }
      else
      {
        switch(mChannelLabel)
        {
          case 206:
          case 208:
            goto LABEL_30;
          case 207:
          case 209:
            goto LABEL_29;
          default:
            if (mChannelLabel == 42) {
              int mChannelLabel = 3;
            }
            break;
        }
      }
      mChannelDescriptions->int mChannelLabel = mChannelLabel;
      ++mChannelDescriptions;
      --mNumberChannelDescriptions;
    }
    while (mNumberChannelDescriptions);
  }
  uint64_t v26 = v11->mNumberChannelDescriptions;
  if (v26)
  {
    uint64_t v27 = v11->mChannelDescriptions;
    do
    {
      int v28 = v27->mChannelLabel;
      if ((int)v27->mChannelLabel > 300)
      {
        if (v28 == 301)
        {
LABEL_41:
          int v28 = 1;
        }
        else if (v28 == 302)
        {
LABEL_40:
          int v28 = 2;
        }
      }
      else
      {
        switch(v28)
        {
          case 206:
          case 208:
            goto LABEL_41;
          case 207:
          case 209:
            goto LABEL_40;
          default:
            if (v28 == 42) {
              int v28 = 3;
            }
            break;
        }
      }
      v27->int mChannelLabel = v28;
      ++v27;
      --v26;
    }
    while (v26);
  }
  octagonalCompatibility(v21, v11);
  singleSurroundPairCompatibility(v21, v11);
  if (*a3)
  {
    unint64_t v29 = 0;
    do
    {
      a4[v29++] = -1;
      unint64_t v30 = *a3;
    }
    while (v29 < v30);
    if (v14 == 6553601)
    {
      if (*a3)
      {
        unint64_t v31 = 0;
        uint64_t v32 = 12;
        do
        {
          if (*(AudioChannelLayoutTag *)((char *)&v11->mChannelLayoutTag + v32) - 1 <= 0xFFFFFFFD)
          {
            a4[v31] = 0;
            unint64_t v30 = *a3;
          }
          ++v31;
          v32 += 20;
        }
        while (v31 < v30);
      }
      goto LABEL_75;
    }
  }
  else
  {
    if (v14 == 6553601) {
      goto LABEL_75;
    }
    unint64_t v30 = 0;
  }
  if (v14 == 6619138 && mChannelLayoutTag == 6553601)
  {
    uint64_t v9 = 0;
    *a4 = 0;
    goto LABEL_5;
  }
  if (!v43) {
    goto LABEL_74;
  }
  uint64_t v33 = 0;
  char v34 = 1;
  unint64_t v35 = v30;
  do
  {
    if (v35)
    {
      unint64_t v36 = 0;
      AudioChannelLabel v37 = v21->mChannelDescriptions[v33].mChannelLabel;
      long long v38 = v11->mChannelDescriptions;
      do
      {
        AudioChannelLabel v40 = v38->mChannelLabel;
        ++v38;
        AudioChannelLabel v39 = v40;
        unsigned int v41 = v40 + 1;
        BOOL v42 = v40 == v37 && v41 >= 2;
        if (v42 && v39 != 100)
        {
          char v34 = 0;
          a4[v36] = v33;
          unint64_t v30 = *a3;
        }
        ++v36;
        unint64_t v35 = v30;
      }
      while (v36 < v30);
    }
    ++v33;
  }
  while (v33 != v43);
  if (v34)
  {
LABEL_74:
    uint64_t v9 = 1718449215;
    goto LABEL_5;
  }
LABEL_75:
  uint64_t v9 = 0;
LABEL_5:
  if (v11) {
    free(v11);
  }
LABEL_7:
  if (v47) {
    free(v47);
  }
  return v9;
}

void sub_1900A1C10(void *a1)
{
}

void sub_1900A1C24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  if (a11) {
    free(a11);
  }
  if (a12) {
    free(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AudioFormatProperty_BalanceFade(const AudioBalanceFade *a1, unsigned int *a2, float *a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  mChannelLayout = a1->mChannelLayout;
  unsigned int v36 = 0;
  uint64_t result = AudioFormatProperty_NumberOfChannelsForLayout(mChannelLayout, &v36);
  if (!result)
  {
    uint64_t v9 = v36;
    if (v36 > 0x40) {
      return 1718449215;
    }
    if (v36 >= *a2) {
      uint64_t v10 = *a2;
    }
    else {
      uint64_t v10 = v36;
    }
    *a2 = v10;
    signed int mChannelLayoutTag = mChannelLayout->mChannelLayoutTag;
    if (mChannelLayout->mChannelLayoutTag == 0x10000)
    {
      AudioFormatProperty_ChannelLayoutForBitmap(mChannelLayout->mChannelBitmap, __dst, v8);
    }
    else if (mChannelLayoutTag)
    {
      uint64_t result = AudioFormatProperty_ChannelLayoutForTag(mChannelLayoutTag, __dst);
      if (result) {
        return result;
      }
    }
    else
    {
      memcpy(__dst, mChannelLayout, 20 * v9 + 12);
    }
    SanitizeAudioChannelLayout((uint64_t)__dst, 0);
    uint64_t mNumberChannelDescriptions = __dst[0].mNumberChannelDescriptions;
    if (__dst[0].mNumberChannelDescriptions)
    {
      mChannelDescriptions = __dst[0].mChannelDescriptions;
      do
      {
        int mChannelLabel = mChannelDescriptions->mChannelLabel;
        if ((int)mChannelDescriptions->mChannelLabel > 300)
        {
          if (mChannelLabel == 301)
          {
LABEL_19:
            int mChannelLabel = 1;
          }
          else if (mChannelLabel == 302)
          {
LABEL_18:
            int mChannelLabel = 2;
          }
        }
        else
        {
          switch(mChannelLabel)
          {
            case 206:
            case 208:
              goto LABEL_19;
            case 207:
            case 209:
              goto LABEL_18;
            default:
              if (mChannelLabel == 42) {
                int mChannelLabel = 3;
              }
              break;
          }
        }
        mChannelDescriptions->int mChannelLabel = mChannelLabel;
        ++mChannelDescriptions;
        --mNumberChannelDescriptions;
      }
      while (mNumberChannelDescriptions);
    }
    if (v9)
    {
      unsigned int v15 = __dst[0].mChannelDescriptions;
      while (1)
      {
        AudioChannelDescription v35 = *v15;
        SetDefaultChannelPosition((uint64_t)&v35);
        if (v35.mChannelFlags)
        {
          float v16 = fmodf(v35.mCoordinates[0], 360.0);
          if (v16 < 0.0) {
            float v16 = v16 + 360.0;
          }
          if (v16 > 100.0 && v16 <= 260.0) {
            break;
          }
        }
        ++v15;
        if (!--v9) {
          goto LABEL_34;
        }
      }
      int v18 = 1;
    }
    else
    {
LABEL_34:
      int v18 = 0;
    }
    float mLeftRightBalance = a1->mLeftRightBalance;
    float mBackFrontFade = a1->mBackFrontFade;
    AudioBalanceFadeType mType = a1->mType;
    if (mType == kAudioBalanceFadeType_EqualPower)
    {
      if (mLeftRightBalance <= -1.0)
      {
        float v25 = 0.0;
        float v24 = 1.4142;
      }
      else if (mLeftRightBalance >= 1.0)
      {
        float v24 = 0.0;
        float v25 = 1.4142;
      }
      else
      {
        __double2 v30 = __sincos_stret(mLeftRightBalance * 0.785398163 + 0.785398163);
        float v25 = v30.__sinval * 1.41421356;
        float v24 = v30.__cosval * 1.41421356;
      }
      float v27 = 1.0;
      if (v18)
      {
        if (mBackFrontFade <= -1.0)
        {
          float v27 = 0.0;
          float v29 = 1.4142;
        }
        else if (mBackFrontFade >= 1.0)
        {
          float v29 = 0.0;
          float v27 = 1.4142;
        }
        else
        {
          __double2 v31 = __sincos_stret(mBackFrontFade * 0.785398163 + 0.785398163);
          float v27 = v31.__sinval * 1.41421356;
          float v29 = v31.__cosval * 1.41421356;
        }
      }
      else
      {
        float v29 = 1.0;
      }
    }
    else
    {
      if (mType) {
        return 4294967246;
      }
      float v22 = mLeftRightBalance + 1.0;
      float v23 = 1.0 - mLeftRightBalance;
      if (mLeftRightBalance >= 1.0) {
        float v23 = 0.0;
      }
      if (mLeftRightBalance >= 0.0) {
        float v22 = 1.0;
      }
      if (mLeftRightBalance <= 0.0) {
        float v24 = 1.0;
      }
      else {
        float v24 = v23;
      }
      if (mLeftRightBalance <= -1.0) {
        float v25 = 0.0;
      }
      else {
        float v25 = v22;
      }
      float v26 = mBackFrontFade + 1.0;
      if (mBackFrontFade >= 0.0) {
        float v26 = 1.0;
      }
      if (mBackFrontFade <= -1.0) {
        float v26 = 0.0;
      }
      if (v18) {
        float v27 = v26;
      }
      else {
        float v27 = 1.0;
      }
      float v28 = 1.0 - mBackFrontFade;
      if (mBackFrontFade >= 1.0) {
        float v28 = 0.0;
      }
      if ((v18 & (mBackFrontFade > 0.0)) != 0) {
        float v29 = v28;
      }
      else {
        float v29 = 1.0;
      }
    }
    if (v10)
    {
      uint64_t v32 = __dst[0].mChannelDescriptions;
      do
      {
        AudioChannelDescription v35 = *v32;
        SetDefaultChannelPosition((uint64_t)&v35);
        if (v35.mChannelFlags)
        {
          float v33 = fmodf(v35.mCoordinates[0], 360.0);
          if (v33 < 0.0) {
            float v33 = v33 + 360.0;
          }
          if (v33 > 10.0)
          {
            if (v33 <= 80.0)
            {
              *a3 = v25 * v27;
              goto LABEL_95;
            }
            if (v33 <= 100.0)
            {
              *a3 = v25;
              goto LABEL_95;
            }
            if (v33 <= 170.0)
            {
              *a3 = v25 * v29;
              goto LABEL_95;
            }
            if (v33 <= 190.0)
            {
              *a3 = v29;
              goto LABEL_95;
            }
            if (v33 <= 260.0)
            {
              float v34 = v24 * v29;
LABEL_94:
              *a3 = v34;
              goto LABEL_95;
            }
            if (v33 <= 280.0)
            {
              *a3 = v24;
              goto LABEL_95;
            }
            if (v33 <= 350.0)
            {
              float v34 = v24 * v27;
              goto LABEL_94;
            }
          }
          *a3 = v27;
        }
        else
        {
          *a3 = 1.0;
        }
LABEL_95:
        ++a3;
        ++v32;
        --v10;
      }
      while (v10);
    }
    return 0;
  }
  return result;
}

std::runtime_error *std::range_error::range_error[abi:ne180100](std::runtime_error *a1)
{
  uint64_t result = std::runtime_error::runtime_error(a1, "inSecondsPerWindow is out of range (<= 0.0)");
  result->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E4FBA4B8] + 16);
  return result;
}

uint64_t DSPGraph::Metrics::Metrics(uint64_t this, double a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = (uint64_t)(a2 * 24000000.0);
  if (v3 < 0) {
    uint64_t v3 = -v3;
  }
  *(void *)this = v3;
  *(unsigned char *)(this + 192) = 0;
  *(_DWORD *)(this + 196) = 0;
  *(_OWORD *)(this + 8) = 0u;
  *(_OWORD *)(this + 24) = 0u;
  *(_OWORD *)(this + 40) = 0u;
  *(_OWORD *)(this + 56) = 0u;
  *(_OWORD *)(this + 72) = 0u;
  *(_OWORD *)(this + 88) = 0u;
  *(_OWORD *)(this + 104) = 0u;
  *(_OWORD *)(this + 120) = 0u;
  *(_OWORD *)(this + 136) = 0u;
  do
  {
    *(_DWORD *)(this + v2 + 256) = 0;
    AudioChannelLabel v4 = (_OWORD *)(this + v2 + 264);
    *AudioChannelLabel v4 = 0uLL;
    v4[1] = 0uLL;
    v4[2] = 0uLL;
    v4[3] = 0uLL;
    void v4[4] = 0uLL;
    v4[5] = 0uLL;
    v2 += 128;
    v4[6] = 0uLL;
  }
  while (v2 != 256);
  if (a2 <= 0.0)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception);
  }
  return this;
}

void sub_1900A2240(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

int8x16_t DSPGraph::Metrics::start(DSPGraph::Metrics *this)
{
  if (!*((void *)this + 1)) {
    *((void *)this + 1) = mach_absolute_time();
  }
  thread_selfcounts();
  *((void *)this + 2) = 0;
  int8x16_t result = vextq_s8((int8x16_t)0, (int8x16_t)0, 8uLL);
  *(int8x16_t *)((char *)this + 24) = result;
  return result;
}

uint64_t DSPGraph::Metrics::stop(atomic_uint *this, unsigned int a2)
{
  uint64_t result = mach_absolute_time();
  uint64_t v5 = result;
  if (*((void *)this + 3))
  {
    thread_selfcounts();
    unint64_t v6 = v5 - *((void *)this + 1);
    unint64_t v7 = -*((void *)this + 2);
    uint64_t v8 = -*((void *)this + 3);
    uint64_t v9 = -*((void *)this + 4);
    double v10 = (double)v7 / (double)v6 * 100.0;
    uint64_t v11 = *((void *)this + 6) - *((void *)this + 2);
    uint64_t v12 = *((void *)this + 7) - *((void *)this + 3);
    *((void *)this + 6) = v11;
    *((void *)this + 7) = v12;
    uint64_t result = *((void *)this + 8) + v9;
    unint64_t v13 = *((void *)this + 9) + v6;
    *((void *)this + 8) = result;
    *((void *)this + 9) = v13;
    double v14 = *((double *)this + 10);
    if (v10 <= v14)
    {
      uint64_t v15 = *((void *)this + 13);
    }
    else
    {
      *((double *)this + 10) = v10;
      uint64_t v15 = *((void *)this + 13);
      *((void *)this + 11) = v15;
      double v14 = (double)v7 / (double)v6 * 100.0;
    }
    uint64_t v16 = *((void *)this + 12) + a2;
    uint64_t v17 = *((void *)this + 14);
    unint64_t v18 = *((void *)this + 15) + v7;
    uint64_t v19 = *((void *)this + 16) + v8;
    uint64_t v20 = *((void *)this + 17) + v9;
    unint64_t v21 = *((void *)this + 18) + v6;
    uint64_t v22 = *((void *)this + 5) + 1;
    *((void *)this + 5) = v22;
    *((void *)this + 16) = v19;
    *((void *)this + 17) = v20;
    *((void *)this + 18) = v21;
    uint64_t v23 = v17 + a2;
    *((void *)this + 14) = v23;
    *((void *)this + 15) = v18;
    uint64_t v24 = v15 + 1;
    *((void *)this + 12) = v16;
    *((void *)this + 13) = v24;
    if (v13 > *(void *)this || v21 < *(void *)this)
    {
      unint64_t v38 = *(void *)this;
      AudioChannelLabel v39 = this + 10;
      uint64_t v40 = v5;
      uint64_t v25 = *((void *)this + 11);
      int v46 = 0;
      unsigned int add = atomic_fetch_add(this + 49, 1u);
      float v27 = (unsigned int *)&this[32 * (unint64_t)(add & 1) + 64];
      int v28 = 2 * add;
      atomic_store(2 * add, v27);
      *((void *)v27 + 1) = v22;
      *((void *)v27 + 2) = v16;
      *((void *)v27 + 3) = v11;
      *((void *)v27 + 4) = v12;
      *((void *)v27 + 5) = result;
      *((void *)v27 + 6) = v13;
      *((double *)v27 + 7) = v14;
      *((void *)v27 + 8) = v25;
      *((void *)v27 + 9) = v24;
      *((void *)v27 + 10) = v23;
      *((void *)v27 + 11) = v18;
      *((void *)v27 + 12) = v19;
      *((void *)v27 + 13) = v20;
      *((void *)v27 + 14) = v21;
      __dmb(0xBu);
      atomic_compare_exchange_strong((atomic_uint *volatile)v27, (unsigned int *)&v28, (2 * add) | 1);
      if (v28 != 2 * add)
      {
        unsigned int v44 = this;
        uint64_t v45 = result;
        uint64_t v42 = v25;
        uint64_t v43 = v24;
        unsigned int v41 = (char *)(this + 64);
        do
        {
          uint64_t v29 = v12;
          uint64_t v30 = v19;
          uint64_t v31 = v22;
          caulk::concurrent::details::spinloop::spin((uint64_t)&v46);
          uint64_t v32 = v42;
          uint64_t v33 = v43;
          uint64_t v22 = v31;
          this = v44;
          uint64_t result = v45;
          uint64_t v19 = v30;
          uint64_t v12 = v29;
          float v34 = v41;
          unsigned int v35 = atomic_fetch_add(v44 + 49, 1u);
          unsigned int v36 = &v34[128 * (unint64_t)(v35 & 1)];
          int v37 = 2 * v35;
          atomic_store(2 * v35, (unsigned int *)v36);
          *((void *)v36 + 1) = v22;
          *((void *)v36 + 2) = v16;
          *((void *)v36 + 3) = v11;
          *((void *)v36 + 4) = v12;
          *((void *)v36 + 5) = result;
          *((void *)v36 + 6) = v13;
          *((double *)v36 + 7) = v14;
          *((void *)v36 + 8) = v32;
          *((void *)v36 + 9) = v33;
          *((void *)v36 + 10) = v23;
          *((void *)v36 + 11) = v18;
          *((void *)v36 + 12) = v30;
          *((void *)v36 + 13) = v20;
          *((void *)v36 + 14) = v21;
          __dmb(0xBu);
          atomic_compare_exchange_strong((atomic_uint *volatile)v36, (unsigned int *)&v37, (2 * v35) | 1);
        }
        while (v37 != 2 * v35);
      }
      atomic_store(1u, (unsigned __int8 *)this + 192);
      uint64_t v5 = v40;
      if (v13 > v38)
      {
        void v39[2] = 0u;
        v39[3] = 0u;
        *AudioChannelLabel v39 = 0u;
        v39[1] = 0u;
      }
    }
  }
  *((void *)this + 1) = v5;
  return result;
}

_OWORD *DSPGraph::Metrics::getStatistics(_OWORD *this, uint64_t a2)
{
  uint64_t v2 = this;
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)(a2 + 192));
  if (v3)
  {
    int v16 = 0;
    unsigned __int8 v4 = atomic_load((unsigned __int8 *)(a2 + 192));
    if (v4)
    {
      uint64_t v6 = a2 + 256;
      do
      {
        unsigned int v7 = atomic_load_explicit((atomic_uint *volatile)(a2 + 196), memory_order_acquire) - 1;
        char v8 = 1;
        while (1)
        {
          char v9 = v8;
          uint64_t v10 = v6 + ((unint64_t)(v7 & 1) << 7);
          unsigned int explicit = atomic_load_explicit((atomic_uint *volatile)v10, memory_order_acquire);
          if (explicit) {
            break;
          }
          char v8 = 0;
          LOBYTE(v7) = v7 - 1;
          if ((v9 & 1) == 0) {
            goto LABEL_12;
          }
        }
        long long v12 = *(_OWORD *)(v10 + 56);
        long long v13 = *(_OWORD *)(v10 + 88);
        v2[4] = *(_OWORD *)(v10 + 72);
        v2[5] = v13;
        v2[6] = *(_OWORD *)(v10 + 104);
        long long v14 = *(_OWORD *)(v10 + 24);
        _OWORD *v2 = *(_OWORD *)(v10 + 8);
        v2[1] = v14;
        v2[2] = *(_OWORD *)(v10 + 40);
        v2[3] = v12;
        __dmb(9u);
        if (explicit == *(_DWORD *)v10) {
          return this;
        }
        this = (_OWORD *)caulk::concurrent::details::spinloop::spin((uint64_t)&v16);
LABEL_12:
        unsigned __int8 v15 = atomic_load((unsigned __int8 *)(a2 + 192));
      }
      while ((v15 & 1) != 0);
    }
    _os_assert_log();
    this = (_OWORD *)_os_crash();
    __break(1u);
  }
  else
  {
    this[5] = 0u;
    this[6] = 0u;
    this[3] = 0u;
    this[4] = 0u;
    this[1] = 0u;
    this[2] = 0u;
    *this = 0u;
  }
  return this;
}

void sub_1900A27A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1900A2824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1900A294C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)AUAudioUnit_XH;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

uint64_t CADeprecated::TSingleton<AUExtensionInstanceMap>::instance()
{
  if (atomic_load_explicit((atomic_ullong *volatile)&CADeprecated::TSingleton<AUExtensionInstanceMap>::sOnce, memory_order_acquire) != -1)
  {
    unsigned __int8 v3 = &v1;
    uint64_t v2 = &v3;
    std::__call_once(&CADeprecated::TSingleton<AUExtensionInstanceMap>::sOnce, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<CADeprecated::TSingleton<AUExtensionInstanceMap>::instance(void)::{lambda(void)#1} &&>>);
  }
  return CADeprecated::TSingleton<AUExtensionInstanceMap>::sInstance;
}

uint64_t ___ZN22AUExtensionInstanceMap6removeEPU19objcproto9NSCopying11objc_object_block_invoke(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 40) + 8) removeObjectForKey:*(void *)(a1 + 32)];
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<CADeprecated::TSingleton<AUExtensionInstanceMap>::instance(void)::{lambda(void)#1} &&>>()
{
}

void sub_1900A2A64(_Unwind_Exception *a1)
{
  MEMORY[0x192FC8940](v1, 0x80C40803F642BLL);
  _Unwind_Resume(a1);
}

void sub_1900A2C30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN22AUExtensionInstanceMap3addEPU19objcproto9NSCopying11objc_objectP14AUAudioUnit_XH_block_invoke(void *a1)
{
  return [*(id *)(a1[6] + 8) setObject:a1[4] forKey:a1[5]];
}

void sub_1900A2FAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,id location,char a27)
{
  _Block_object_dispose(&a27, 8);

  objc_destroyWeak(v29);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_1900A3088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

Class ___ZL39getAUAudioUnitRemoteViewControllerClassv_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  v7[0] = 0;
  if (!CoreAudioKitLibraryCore(char **)::frameworkLibrary)
  {
    v7[1] = (void *)MEMORY[0x1E4F143A8];
    v7[2] = (void *)3221225472;
    v7[3] = ___ZL23CoreAudioKitLibraryCorePPc_block_invoke_7351;
    uint64_t v7[4] = &__block_descriptor_40_e5_v8__0l;
    void v7[5] = v7;
    long long v8 = xmmword_1E5687CC0;
    uint64_t v9 = 0;
    CoreAudioKitLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  }
  if (!CoreAudioKitLibraryCore(char **)::frameworkLibrary)
  {
    unsigned __int8 v3 = [MEMORY[0x1E4F28B00] currentHandler];
    unsigned __int8 v4 = [NSString stringWithUTF8String:"void *CoreAudioKitLibrary()"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"AUAudioUnit_Internal.h", 352, @"%s", v7[0]);

    goto LABEL_10;
  }
  if (v7[0]) {
    free(v7[0]);
  }
  Class result = objc_getClass("AUAudioUnitRemoteViewController");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v5 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v6 = [NSString stringWithUTF8String:"Class getAUAudioUnitRemoteViewControllerClass()_block_invoke"];
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, @"AUAudioUnit_Internal.h", 354, @"Unable to find class %s", "AUAudioUnitRemoteViewController");

LABEL_10:
    __break(1u);
  }
  getAUAudioUnitRemoteViewControllerClass(void)::softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1900A3294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1900A33CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  long long v14 = v13;

  _Unwind_Resume(a1);
}

void sub_1900A34DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  long long v14 = v13;

  _Unwind_Resume(a1);
}

uint64_t ___ZL23CoreAudioKitLibraryCorePPc_block_invoke_7351()
{
  uint64_t result = _sl_dlopen();
  CoreAudioKitLibraryCore(char **)::frameworkLibrary = result;
  return result;
}

void ___ZN22AUExtensionInstanceMap29setExtensionInterruptionBlockEP11NSExtension_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  unsigned __int8 v3 = [*(id *)(a1 + 32) requestInterruptionBlock];

  if (!v3)
  {
    objc_initWeak(&location, *(id *)(a1 + 32));
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = ___ZN22AUExtensionInstanceMap29setExtensionInterruptionBlockEP11NSExtension_block_invoke_2;
    v6[3] = &unk_1E5687C78;
    v7[1] = v2;
    objc_copyWeak(v7, &location);
    [*(id *)(a1 + 32) setRequestInterruptionBlock:v6];
    v4[0] = MEMORY[0x1E4F143A8];
    v4[1] = 3221225472;
    v4[2] = ___ZN22AUExtensionInstanceMap29setExtensionInterruptionBlockEP11NSExtension_block_invoke_39;
    v4[3] = &unk_1E5687CA0;
    v5[1] = v2;
    objc_copyWeak(v5, &location);
    [*(id *)(a1 + 32) setRequestCancellationBlock:v4];
    objc_destroyWeak(v5);
    objc_destroyWeak(v7);
    objc_destroyWeak(&location);
  }
}

void sub_1900A36C0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void ___ZN22AUExtensionInstanceMap29setExtensionInterruptionBlockEP11NSExtension_block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  unsigned __int8 v4 = [*(id *)(*(void *)(a1 + 40) + 8) objectForKey:v3];
  if (kAUExtensionScope)
  {
    id v5 = *(id *)kAUExtensionScope;
    if (!v5) {
      goto LABEL_8;
    }
  }
  else
  {
    id v5 = (id)MEMORY[0x1E4F14500];
    id v6 = MEMORY[0x1E4F14500];
  }
  unsigned int v7 = v5;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    int v9 = 136315906;
    uint64_t v10 = "AUAudioUnit_XH.mm";
    __int16 v11 = 1024;
    int v12 = 69;
    __int16 v13 = 2048;
    id v14 = WeakRetained;
    __int16 v15 = 2048;
    int v16 = v4;
    _os_log_impl(&dword_18FEC0000, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Extension request interrupted! (AU likely crashed. %p %p)", (uint8_t *)&v9, 0x26u);
  }
LABEL_8:
  [v4 didInvalidate];
}

void sub_1900A3830(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN22AUExtensionInstanceMap29setExtensionInterruptionBlockEP11NSExtension_block_invoke_39(uint64_t a1, void *a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  uint64_t v6 = *(void *)(a1 + 40);
  if ([a3 code] == -66754)
  {
    unsigned int v7 = [*(id *)(v6 + 8) objectForKey:v5];
    if (kAUExtensionScope)
    {
      id v8 = *(id *)kAUExtensionScope;
      if (!v8)
      {
LABEL_9:
        [v7 didInvalidate];

        goto LABEL_10;
      }
    }
    else
    {
      id v8 = (id)MEMORY[0x1E4F14500];
      id v9 = MEMORY[0x1E4F14500];
    }
    uint64_t v10 = v8;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
      int v12 = 136315906;
      __int16 v13 = "AUAudioUnit_XH.mm";
      __int16 v14 = 1024;
      int v15 = 81;
      __int16 v16 = 2048;
      id v17 = WeakRetained;
      __int16 v18 = 2048;
      uint64_t v19 = v7;
      _os_log_impl(&dword_18FEC0000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Extension request cancelled! (AU timed out. %p %p)", (uint8_t *)&v12, 0x26u);
    }
    goto LABEL_9;
  }
LABEL_10:
}

void sub_1900A39B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1900A3B9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v23);

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1900A3C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

_DWORD *APAC::ImmersiveRendererData_V2_Manager::getACLPointer(_DWORD *a1)
{
  if (*a1 != 2) {
    __assert_rtn("getACLPointer", "APACImmersiveRendererDataV2.cpp", 13, "inIRD.mVersion == kIRDVersion");
  }
  if (a1[2] >= a1[3]) {
    return a1 + 6;
  }
  else {
    return 0;
  }
}

uint64_t APAC::ImmersiveRendererData_V2_Manager::getNumRendererDescriptions(_DWORD *a1)
{
  if (*a1 != 2) {
    __assert_rtn("getNumRendererDescriptions", "APACImmersiveRendererDataV2.cpp", 30, "inIRD.mVersion == kIRDVersion");
  }
  return a1[4];
}

char *APAC::ImmersiveRendererData_V2_Manager::getImmersiveRendererDescriptionPointer(_DWORD *a1)
{
  if (*a1 != 2) {
    __assert_rtn("getImmersiveRendererDescriptionPointer", "APACImmersiveRendererDataV2.cpp", 38, "inIRD.mVersion == kIRDVersion");
  }
  unsigned int v2 = a1[3];
  char v1 = a1 + 3;
  uint64_t v3 = v2 + 12;
  uint64_t v4 = v3 + 20 * v1[1] + v1[2];
  id v5 = (char *)v1 + v3;
  if (v4 == *(v1 - 1)) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t APAC::ImmersiveRendererData_V2_Manager::getACLByteSize(_DWORD *a1)
{
  if (*a1 != 2) {
    __assert_rtn("getACLByteSize", "APACImmersiveRendererDataV2.cpp", 50, "inIRD.mVersion == kIRDVersion");
  }
  return a1[3];
}

BOOL APAC::ImmersiveRendererData_V2_Manager::hasMetadataConfig(_DWORD *a1)
{
  if (*a1 != 2) {
    __assert_rtn("hasMetadataConfig", "APACImmersiveRendererDataV2.cpp", 57, "inIRD.mVersion == kIRDVersion");
  }
  return a1[5] != 0;
}

uint64_t APAC::ImmersiveRendererData_V2_Manager::getMetadataConfig(_DWORD *a1, uint64_t a2)
{
  if (*a1 != 2) {
    __assert_rtn("getMetadataConfig", "APACImmersiveRendererDataV2.cpp", 65, "inIRD.mVersion == kIRDVersion");
  }
  APAC::MetadataBitStreamParser::parseConfig((uint64_t)&v3, (unsigned __int8 *)&a1[5 * a1[4] + 6] + a1[3], a1[5], a2);
  return 0;
}

uint64_t APAC::ImmersiveRendererData_V2_Manager::pack(std::vector<char> *a1, int a2, _DWORD *a3, const void *a4, unsigned int a5, uint64_t a6)
{
  a1->__end_ = a1->__begin_;
  std::vector<unsigned char>::__append(a1, 0x1CuLL);
  std::vector<char>::pointer begin = a1->__begin_;
  *(_DWORD *)std::vector<char>::pointer begin = 2;
  *(void *)(begin + 12) = 0;
  *(void *)(begin + 4) = 0;
  *(void *)(begin + 17) = 0;
  std::vector<char>::pointer v12 = a1->__begin_;
  std::vector<char>::pointer end = a1->__end_;
  unint64_t v14 = end - a1->__begin_;
  if (v14 > 0x17)
  {
    if (v14 != 24)
    {
      std::vector<char>::pointer end = v12 + 24;
      a1->__end_ = v12 + 24;
    }
  }
  else
  {
    std::vector<unsigned char>::__append(a1, 24 - v14);
    std::vector<char>::pointer v12 = a1->__begin_;
    std::vector<char>::pointer end = a1->__end_;
  }
  unsigned int v15 = a3[2];
  if (v15 >= 0x1000) {
    int v16 = 4096;
  }
  else {
    int v16 = a3[2];
  }
  unsigned int v17 = 20 * v16;
  if (v15) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 20;
  }
  int v19 = v18 + 12;
  unint64_t v20 = v18 + 12 + end - v12;
  if (end - v12 >= v20)
  {
    if (end - v12 > v20)
    {
      end += v18 + 12;
      a1->__end_ = &v12[v20];
    }
  }
  else
  {
    std::vector<unsigned char>::__append(a1, v18 + 12);
    std::vector<char>::pointer end = a1->__end_;
  }
  memcpy(&end[-v18 - 12], a3, v18 + 12);
  uint64_t v21 = 20 * a5;
  std::vector<char>::pointer v22 = a1->__begin_;
  std::vector<char>::pointer v23 = a1->__end_;
  unint64_t v24 = v23 - a1->__begin_;
  unint64_t v25 = v24 + v21;
  if (v24 >= v24 + v21)
  {
    if (v24 > v24 + v21)
    {
      std::vector<char>::pointer v23 = &v22[v25];
      a1->__end_ = &v22[v25];
    }
  }
  else
  {
    std::vector<unsigned char>::__append(a1, 20 * a5);
    std::vector<char>::pointer v23 = a1->__end_;
  }
  memcpy(&v23[-v21], a4, 20 * a5);
  if (*(unsigned char *)(a6 + 16) && (uint64_t v26 = *(unsigned __int16 *)(a6 + 18), *(_WORD *)(a6 + 18)))
  {
    int v27 = 0;
    int v28 = (unsigned __int16 *)(a6 + 20);
    do
    {
      int v29 = *v28++;
      if (v29 == 9) {
        int v30 = 14 * *(unsigned __int8 *)(a6 + 4529);
      }
      else {
        int v30 = 0;
      }
      v27 += v30;
      --v26;
    }
    while (v26);
    int v31 = v27 + 4832;
  }
  else
  {
    int v31 = 4832;
  }
  int v110 = v18;
  unsigned int v111 = a5;
  uint64_t v32 = *(unsigned __int16 *)(a6 + 8);
  if (*(_WORD *)(a6 + 8))
  {
    uint64_t v33 = 0;
    uint64_t v34 = *(void *)(a6 + 4808);
    do
    {
      uint64_t v35 = *(void *)(a6 + 4784) + 48 * v33;
      int v36 = *(unsigned __int8 *)(v35 + 2) | *(unsigned __int8 *)(v35 + 3) | *(unsigned __int8 *)(v35 + 20);
      int v37 = 2 * *(unsigned __int16 *)(v35 + 18);
      if (v36) {
        int v37 = 0;
      }
      uint64_t v38 = v34 + 1248 * v33;
      uint64_t v39 = *(unsigned __int16 *)(v38 + 2);
      if (*(_WORD *)(v38 + 2))
      {
        uint64_t v40 = 0;
        int v41 = 0;
        uint64_t v42 = v34 + 1248 * v33;
        uint64_t v43 = v42 + 4;
        int v44 = *(unsigned __int8 *)(v42 + 1200);
        int v45 = 4
            * (*(unsigned __int8 *)(v42 + 1206) + 1)
            * (*(unsigned __int8 *)(v42 + 1206) + 1)
            * *(unsigned __int16 *)(v42 + 1208);
        int v46 = *(unsigned __int8 *)(v42 + 792);
        uint64_t v47 = *(unsigned __int16 *)(v42 + 968);
        float v48 = *(unsigned __int16 **)(v42 + 976);
        int v49 = *(unsigned __int8 *)(v42 + 808);
        LODWORD(v42) = *(_DWORD *)(v42 + 812);
        BOOL v50 = v44 == 2;
        int v51 = 16 * v42;
        int v52 = 12 * v42;
        if (v50) {
          int v53 = v45;
        }
        else {
          int v53 = 0;
        }
        int v54 = v51 + 16;
        do
        {
          int v55 = *(unsigned __int16 *)(v43 + 2 * v40);
          if (v55 == 22)
          {
            v41 += v53;
          }
          else if (v55 == 11)
          {
            if (v46 == 4)
            {
              int v58 = 0;
              if (v47)
              {
                unsigned int v59 = v48;
                uint64_t v60 = v47;
                do
                {
                  int v61 = *v59++;
                  v58 += v61;
                  --v60;
                }
                while (v60);
              }
              v41 += 2 * v47 + 4 * v58;
            }
            else
            {
              int v56 = v54 + v41;
              int v57 = v41 + v52;
              if (v49 != 1) {
                int v57 = v41;
              }
              if (v49 != 2) {
                int v56 = v57;
              }
              if (v46 == 3) {
                int v41 = v56;
              }
            }
          }
          ++v40;
        }
        while (v40 != v39);
      }
      else
      {
        int v41 = 0;
      }
      v31 += v37 + v41 + 1296;
      ++v33;
    }
    while (v33 != v32);
  }
  unsigned int v62 = v31 + 4832;
  if (*(unsigned char *)(a6 + 1))
  {
    uint64_t v63 = *(unsigned __int16 *)(a6 + 18);
    if (*(_WORD *)(a6 + 18))
    {
      int v64 = 0;
      int v65 = (unsigned __int16 *)(a6 + 20);
      do
      {
        int v66 = *v65++;
        if (v66 == 9) {
          int v67 = 14 * *(unsigned __int8 *)(a6 + 4529);
        }
        else {
          int v67 = 0;
        }
        v64 += v67;
        --v63;
      }
      while (v63);
    }
    else
    {
      int v64 = 0;
    }
    v62 += v64;
    if (*(_WORD *)(a6 + 8))
    {
      uint64_t v68 = 0;
      uint64_t v69 = *(void *)(a6 + 4808);
      do
      {
        uint64_t v70 = *(void *)(a6 + 4784) + 48 * v68;
        int v71 = *(unsigned __int8 *)(v70 + 2) | *(unsigned __int8 *)(v70 + 3) | *(unsigned __int8 *)(v70 + 20);
        int v72 = 2 * *(unsigned __int16 *)(v70 + 18);
        if (v71) {
          int v72 = 0;
        }
        uint64_t v73 = v69 + 1248 * v68;
        uint64_t v74 = *(unsigned __int16 *)(v73 + 2);
        if (*(_WORD *)(v73 + 2))
        {
          uint64_t v75 = 0;
          int v76 = 0;
          uint64_t v77 = v69 + 1248 * v68;
          uint64_t v78 = v77 + 4;
          int v79 = *(unsigned __int8 *)(v77 + 1200);
          int v80 = 4
              * (*(unsigned __int8 *)(v77 + 1206) + 1)
              * (*(unsigned __int8 *)(v77 + 1206) + 1)
              * *(unsigned __int16 *)(v77 + 1208);
          int v81 = *(unsigned __int8 *)(v77 + 792);
          uint64_t v82 = *(unsigned __int16 *)(v77 + 968);
          unint64_t v83 = *(unsigned __int16 **)(v77 + 976);
          int v84 = *(unsigned __int8 *)(v77 + 808);
          int v85 = *(_DWORD *)(v77 + 812);
          int v86 = 12 * v85;
          if (v79 != 2) {
            int v80 = 0;
          }
          int v87 = 16 * v85 + 16;
          do
          {
            int v88 = *(unsigned __int16 *)(v78 + 2 * v75);
            if (v88 == 22)
            {
              v76 += v80;
            }
            else if (v88 == 11)
            {
              if (v81 == 4)
              {
                int v91 = 0;
                if (v82)
                {
                  BOOL v92 = v83;
                  uint64_t v93 = v82;
                  do
                  {
                    int v94 = *v92++;
                    v91 += v94;
                    --v93;
                  }
                  while (v93);
                }
                v76 += 2 * v82 + 4 * v91;
              }
              else
              {
                int v89 = v87 + v76;
                int v90 = v76 + v86;
                if (v84 != 1) {
                  int v90 = v76;
                }
                if (v84 != 2) {
                  int v89 = v90;
                }
                if (v81 == 3) {
                  int v76 = v89;
                }
              }
            }
            ++v75;
          }
          while (v75 != v74);
        }
        else
        {
          int v76 = 0;
        }
        v62 += v72 + v76 + 40248;
        ++v68;
      }
      while (v68 != v32);
    }
  }
  std::vector<char>::pointer v95 = a1->__begin_;
  std::vector<char>::pointer v96 = a1->__end_;
  unint64_t v97 = v96 - a1->__begin_;
  std::vector<char>::size_type v98 = v62;
  unint64_t v99 = v97 + v62;
  if (v97 >= v99)
  {
    unsigned int v100 = v111;
    int v101 = v110;
    if (v97 > v99)
    {
      std::vector<char>::pointer v96 = &v95[v99];
      a1->__end_ = &v95[v99];
    }
  }
  else
  {
    std::vector<unsigned char>::__append(a1, v98);
    std::vector<char>::pointer v96 = a1->__end_;
    unsigned int v100 = v111;
    int v101 = v110;
  }
  int v102 = APAC::MetadataBitStreamPacker::packConfig((uint64_t)&v112, (uint64_t)&v96[-v98], v98, a6);
  uint64_t v103 = a1->__begin_;
  std::vector<char>::pointer v104 = a1->__end_;
  v103[4] = v100;
  v103[5] = v102;
  uint64_t v105 = (v21 + v101 + v102 + 24);
  v103[1] = a2;
  v103[2] = v105;
  v103[3] = v19;
  unint64_t v106 = v105 + 12;
  unint64_t v107 = v104 - (std::vector<char>::pointer)v103;
  if (v106 <= v107)
  {
    if (v106 < v107) {
      a1->__end_ = (char *)v103 + v106;
    }
  }
  else
  {
    std::vector<unsigned char>::__append(a1, v106 - v107);
  }
  return 0;
}

void AudioFileFormatRegistry::~AudioFileFormatRegistry(AudioFileFormatRegistry *this)
{
  AudioFileFormatRegistry::~AudioFileFormatRegistry(this);
  JUMPOUT(0x192FC8940);
}

{
  void *v2;
  void *v3;

  *(void *)this = &unk_1EDF93980;
  unsigned int v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  char v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
}

BOOL AudioFileFormatRegistry::AddComponentFormats(AudioFileFormatRegistry *this)
{
  std::mutex::lock(&AudioFileMutex(void)::global);
  int v2 = *((unsigned __int8 *)this + 56);
  if (!*((unsigned char *)this + 56)) {
    *((unsigned char *)this + 56) = 1;
  }
  BOOL v3 = v2 == 0;
  std::mutex::unlock(&AudioFileMutex(void)::global);
  return v3;
}

uint64_t AudioFileFormatRegistry::GetFormatForData(AudioFileFormatRegistry *this, uint64_t a2, const void *a3)
{
  uint64_t v3 = 0;
  if (a2 && a3)
  {
    for (uint64_t i = *((void *)this + 1); i != *((void *)this + 2); i += 16)
    {
      uint64_t v3 = *(void *)(i + 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, const void *))(*(void *)v3 + 24))(v3, a2, a3) == 1) {
        return v3;
      }
    }
    AudioFileFormatRegistry::AddComponentFormats(this);
    for (uint64_t j = *((void *)this + 1); j != *((void *)this + 2); j += 16)
    {
      uint64_t v3 = *(void *)(j + 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, const void *))(*(void *)v3 + 24))(v3, a2, a3) == 1) {
        return v3;
      }
    }
    return 0;
  }
  return v3;
}

uint64_t AudioFileFormatRegistry::GetReadFormatsSize(AudioFileFormatRegistry *this)
{
  AudioFileFormatRegistry::AddComponentFormats(this);
  uint64_t v2 = *((void *)this + 4);
  if (v2 == *((void *)this + 5)) {
    return 0;
  }
  LODWORD(v3) = 0;
  do
  {
    if ((*(unsigned int (**)(void))(**(void **)(v2 + 8) + 40))(*(void *)(v2 + 8))) {
      uint64_t v3 = (v3 + 4);
    }
    else {
      uint64_t v3 = v3;
    }
    v2 += 16;
  }
  while (v2 != *((void *)this + 5));
  return v3;
}

uint64_t AudioFileFormatRegistry::GetWriteFormatsSize(AudioFileFormatRegistry *this)
{
  AudioFileFormatRegistry::AddComponentFormats(this);
  uint64_t v2 = *((void *)this + 4);
  if (v2 == *((void *)this + 5)) {
    return 0;
  }
  LODWORD(v3) = 0;
  do
  {
    if ((*(unsigned int (**)(void))(**(void **)(v2 + 8) + 48))(*(void *)(v2 + 8))) {
      uint64_t v3 = (v3 + 4);
    }
    else {
      uint64_t v3 = v3;
    }
    v2 += 16;
  }
  while (v2 != *((void *)this + 5));
  return v3;
}

uint64_t AudioFileFormatRegistry::GetExtensionsForType(AudioFileFormatRegistry *this, unsigned int a2, unsigned int *a3, void *a4)
{
  if (*a3 != 8) {
    return 561211770;
  }
  uint64_t v6 = AudioFileFormatRegistry::Get(this, a2);
  if (v6)
  {
    *a4 = 0;
    (*(void (**)(uint64_t, void *))(*(void *)v6 + 64))(v6, a4);
    if (*a4) {
      return 0;
    }
    else {
      return 1886681407;
    }
  }
  else
  {
    *a3 = 0;
    return 1954115647;
  }
}

uint64_t AudioFileFormatRegistry::GetUTIsForType(AudioFileFormatRegistry *this, unsigned int a2, unsigned int *a3, void *a4)
{
  if (*a3 != 8) {
    return 561211770;
  }
  uint64_t v6 = AudioFileFormatRegistry::Get(this, a2);
  if (v6)
  {
    *a4 = 0;
    (*(void (**)(uint64_t, void *))(*(void *)v6 + 72))(v6, a4);
    if (*a4) {
      return 0;
    }
    else {
      return 1886681407;
    }
  }
  else
  {
    *a3 = 0;
    return 1954115647;
  }
}

uint64_t AudioFileFormatRegistry::GetMIMETypesForType(AudioFileFormatRegistry *this, unsigned int a2, unsigned int *a3, void *a4)
{
  if (*a3 != 8) {
    return 561211770;
  }
  uint64_t v6 = AudioFileFormatRegistry::Get(this, a2);
  if (v6)
  {
    *a4 = 0;
    (*(void (**)(uint64_t, void *))(*(void *)v6 + 80))(v6, a4);
    if (*a4) {
      return 0;
    }
    else {
      return 1886681407;
    }
  }
  else
  {
    *a3 = 0;
    return 1954115647;
  }
}

uint64_t AudioFileFormatRegistry::GetHFSCodesForType(AudioFileFormatRegistry *this, unsigned int a2, unsigned int *a3, void *a4)
{
  if (!a3) {
    return 561211770;
  }
  uint64_t v5 = AudioFileFormatRegistry::Get(this, a2);
  if (v5)
  {
    uint64_t v6 = *(uint64_t (**)(void))(*(void *)v5 + 112);
    return v6();
  }
  else
  {
    *a3 = 0;
    return 1954115647;
  }
}

void AudioFileFormatRegistry::GetTypesForExtension(AudioFileFormatRegistry *this, const __CFString *a2, unsigned int *a3, _DWORD *a4)
{
  if (a4) {
    unsigned int v8 = *a3 >> 2;
  }
  else {
    unsigned int v8 = 0;
  }
  AudioFileFormatRegistry::AddComponentFormats(this);
  uint64_t v9 = *((void *)this + 4);
  if (v9 == *((void *)this + 5))
  {
    unsigned int v10 = 0;
  }
  else
  {
    unsigned int v10 = 0;
    do
    {
      CFArrayRef theArray = 0;
      (*(void (**)(void, CFArrayRef *))(**(void **)(v9 + 8) + 64))(*(void *)(v9 + 8), &theArray);
      if (theArray)
      {
        v14.length = CFArrayGetCount(theArray);
        v14.locatiouint64_t n = 0;
        if (CFArrayGetFirstIndexOfValue(theArray, v14, a2) != -1)
        {
          if (a4 && v10 < v8) {
            a4[v10] = *(_DWORD *)v9;
          }
          ++v10;
        }
        CFRelease(theArray);
      }
      v9 += 16;
    }
    while (v9 != *((void *)this + 5));
  }
  if (v8 >= v10 || a4 == 0) {
    unsigned int v12 = v10;
  }
  else {
    unsigned int v12 = v8;
  }
  *a3 = 4 * v12;
}

void AudioFileFormatRegistry::GetTypesForUTI(AudioFileFormatRegistry *this, const __CFString *a2, unsigned int *a3, _DWORD *a4)
{
  if (a4) {
    unsigned int v8 = *a3 >> 2;
  }
  else {
    unsigned int v8 = 0;
  }
  AudioFileFormatRegistry::AddComponentFormats(this);
  uint64_t v9 = *((void *)this + 4);
  if (v9 == *((void *)this + 5))
  {
    unsigned int v10 = 0;
  }
  else
  {
    unsigned int v10 = 0;
    do
    {
      CFArrayRef theArray = 0;
      (*(void (**)(void, CFArrayRef *))(**(void **)(v9 + 8) + 72))(*(void *)(v9 + 8), &theArray);
      if (theArray)
      {
        v14.length = CFArrayGetCount(theArray);
        v14.locatiouint64_t n = 0;
        if (CFArrayGetFirstIndexOfValue(theArray, v14, a2) != -1)
        {
          if (a4 && v10 < v8) {
            a4[v10] = *(_DWORD *)v9;
          }
          ++v10;
        }
        CFRelease(theArray);
      }
      v9 += 16;
    }
    while (v9 != *((void *)this + 5));
  }
  if (v8 >= v10 || a4 == 0) {
    unsigned int v12 = v10;
  }
  else {
    unsigned int v12 = v8;
  }
  *a3 = 4 * v12;
}

void AudioFileFormatRegistry::GetTypesForMIMEType(AudioFileFormatRegistry *this, const __CFString *a2, unsigned int *a3, _DWORD *a4)
{
  if (a4) {
    unsigned int v8 = *a3 >> 2;
  }
  else {
    unsigned int v8 = 0;
  }
  AudioFileFormatRegistry::AddComponentFormats(this);
  uint64_t v9 = *((void *)this + 4);
  if (v9 == *((void *)this + 5))
  {
    unsigned int v10 = 0;
  }
  else
  {
    unsigned int v10 = 0;
    do
    {
      CFArrayRef theArray = 0;
      (*(void (**)(void, CFArrayRef *))(**(void **)(v9 + 8) + 80))(*(void *)(v9 + 8), &theArray);
      if (theArray)
      {
        v14.length = CFArrayGetCount(theArray);
        v14.locatiouint64_t n = 0;
        if (CFArrayGetFirstIndexOfValue(theArray, v14, a2) != -1)
        {
          if (a4 && v10 < v8) {
            a4[v10] = *(_DWORD *)v9;
          }
          ++v10;
        }
        CFRelease(theArray);
      }
      v9 += 16;
    }
    while (v9 != *((void *)this + 5));
  }
  if (v8 >= v10 || a4 == 0) {
    unsigned int v12 = v10;
  }
  else {
    unsigned int v12 = v8;
  }
  *a3 = 4 * v12;
}

void AudioFileFormatRegistry::GetTypesForHFSCode(AudioFileFormatRegistry *this, int a2, unsigned int *a3, _DWORD *a4)
{
  if (a4) {
    unsigned int v7 = *a3 >> 2;
  }
  else {
    unsigned int v7 = 0;
  }
  AudioFileFormatRegistry::AddComponentFormats(this);
  uint64_t v8 = *((void *)this + 4);
  if (v8 != *((void *)this + 5))
  {
    unsigned int v9 = 0;
    while (1)
    {
      unsigned int v24 = 0x7FFFFFFF;
      int v10 = (*(uint64_t (**)(void, unsigned int *, void))(**(void **)(v8 + 8) + 112))(*(void *)(v8 + 8), &v24, 0);
      unsigned int v11 = v24;
      if (v10) {
        BOOL v12 = 1;
      }
      else {
        BOOL v12 = v24 == 0;
      }
      if (v12) {
        goto LABEL_26;
      }
      __int16 v13 = (int *)malloc_type_malloc(v24 & 0xFFFFFFFC, 0x2C8E6D5CuLL);
      if (v11 >= 4 && v13 == 0)
      {
        exceptiouint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        std::vector<char>::pointer v22 = std::bad_alloc::bad_alloc(exception);
      }
      unsigned int v15 = v13;
      bzero(v13, v11 & 0xFFFFFFFC);
      (*(void (**)(void, unsigned int *, int *))(**(void **)(v8 + 8) + 112))(*(void *)(v8 + 8), &v24, v15);
      if (v24 >= 4)
      {
        unint64_t v16 = (unint64_t)v24 >> 2;
        unsigned int v17 = v15;
        while (1)
        {
          int v18 = *v17++;
          if (v18 == a2) {
            break;
          }
          if (!--v16) {
            goto LABEL_25;
          }
        }
        if (a4 && v9 < v7) {
          a4[v9] = *(_DWORD *)v8;
        }
        ++v9;
      }
      else if (!v15)
      {
        goto LABEL_26;
      }
LABEL_25:
      free(v15);
LABEL_26:
      v8 += 16;
      if (v8 == *((void *)this + 5)) {
        goto LABEL_29;
      }
    }
  }
  unsigned int v9 = 0;
LABEL_29:
  if (v7 >= v9 || a4 == 0) {
    unsigned int v20 = v9;
  }
  else {
    unsigned int v20 = v7;
  }
  *a3 = 4 * v20;
}

void sub_1900A4EE8(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AudioFileFormatRegistry::GetNameForType(AudioFileFormatRegistry *this, unsigned int a2, unsigned int *a3, void *a4)
{
  if (*a3 != 8) {
    return 561211770;
  }
  uint64_t v6 = AudioFileFormatRegistry::Get(this, a2);
  if (v6)
  {
    (*(void (**)(uint64_t, void *))(*(void *)v6 + 88))(v6, a4);
    return 0;
  }
  else
  {
    *a3 = 0;
    return 1954115647;
  }
}

uint64_t AudioFileFormatRegistry::GetAllUTIs(AudioFileFormatRegistry *this, unsigned int *a2, void *a3)
{
  if (*a2 == 8)
  {
    CFMutableDictionaryRef Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D548]);
    AudioFileFormatRegistry::AddComponentFormats(this);
    for (uint64_t i = *((void *)this + 4); i != *((void *)this + 5); i += 16)
    {
      CFArrayRef theArray = 0;
      (*(void (**)(void, CFArrayRef *))(**(void **)(i + 8) + 72))(*(void *)(i + 8), &theArray);
      if (theArray)
      {
        int Count = CFArrayGetCount(theArray);
        if (Count >= 1)
        {
          CFIndex v7 = 0;
          uint64_t v8 = Count;
          do
          {
            CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v7);
            CFSetAddValue(Mutable, ValueAtIndex);
            ++v7;
          }
          while (v8 != v7);
        }
        CFRelease(theArray);
      }
    }
    CFSetGetCount(Mutable);
    LODWORD(theArray) = 0;
    operator new[]();
  }
  return 561211770;
}

uint64_t addToArray(uint64_t result, void *a2)
{
  uint64_t v2 = a2[1];
  uint64_t v3 = *(unsigned int *)a2;
  *(_DWORD *)a2 = v3 + 1;
  *(void *)(v2 + 8 * v3) = result;
  return result;
}

uint64_t AudioFileFormatRegistry::GetAllMIMETypes(AudioFileFormatRegistry *this, unsigned int *a2, void *a3)
{
  if (*a2 == 8)
  {
    CFMutableDictionaryRef Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D548]);
    AudioFileFormatRegistry::AddComponentFormats(this);
    for (uint64_t i = *((void *)this + 4); i != *((void *)this + 5); i += 16)
    {
      CFArrayRef theArray = 0;
      (*(void (**)(void, CFArrayRef *))(**(void **)(i + 8) + 80))(*(void *)(i + 8), &theArray);
      if (theArray)
      {
        int Count = CFArrayGetCount(theArray);
        if (Count >= 1)
        {
          CFIndex v7 = 0;
          uint64_t v8 = Count;
          do
          {
            CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v7);
            CFSetAddValue(Mutable, ValueAtIndex);
            ++v7;
          }
          while (v8 != v7);
        }
        CFRelease(theArray);
      }
    }
    CFSetGetCount(Mutable);
    LODWORD(theArray) = 0;
    operator new[]();
  }
  return 561211770;
}

uint64_t AudioFileFormatRegistry::GetAllExtensions(AudioFileFormatRegistry *this, unsigned int *a2, void *a3)
{
  if (*a2 == 8)
  {
    CFMutableDictionaryRef Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D548]);
    AudioFileFormatRegistry::AddComponentFormats(this);
    for (uint64_t i = *((void *)this + 4); i != *((void *)this + 5); i += 16)
    {
      CFArrayRef theArray = 0;
      (*(void (**)(void, CFArrayRef *))(**(void **)(i + 8) + 64))(*(void *)(i + 8), &theArray);
      if (theArray)
      {
        int Count = CFArrayGetCount(theArray);
        if (Count >= 1)
        {
          CFIndex v7 = 0;
          uint64_t v8 = Count;
          do
          {
            CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v7);
            CFSetAddValue(Mutable, ValueAtIndex);
            ++v7;
          }
          while (v8 != v7);
        }
        CFRelease(theArray);
      }
    }
    CFSetGetCount(Mutable);
    LODWORD(theArray) = 0;
    operator new[]();
  }
  return 561211770;
}

uint64_t AudioFileFormatRegistry::GetAllHFSTypeCodes(AudioFileFormatRegistry *this, unsigned int *a2, void *a3)
{
  if (!a2) {
    return 561211770;
  }
  AudioFileFormatRegistry::AddComponentFormats(this);
  uint64_t v6 = *((void *)this + 4);
  if (v6 == *((void *)this + 5))
  {
    unsigned int v7 = 0;
  }
  else
  {
    unsigned int v7 = 0;
    do
    {
      LODWORD(__src) = -1;
      int v8 = (*(uint64_t (**)(void, void **, void))(**(void **)(v6 + 8) + 112))(*(void *)(v6 + 8), &__src, 0);
      int v9 = (int)__src;
      if (v8) {
        int v9 = 0;
      }
      v7 += v9;
      v6 += 16;
    }
    while (v6 != *((void *)this + 5));
  }
  CADeprecated::CAAutoFree<unsigned int>::CAAutoFree(&__src, v7, 1);
  AudioFileFormatRegistry::AddComponentFormats(this);
  uint64_t v11 = *((void *)this + 4);
  if (v11 != *((void *)this + 5))
  {
    unsigned int v12 = v7;
    do
    {
      unsigned int v23 = v12;
      int v13 = (*(uint64_t (**)(void, unsigned int *, char *))(**(void **)(v11 + 8) + 112))(*(void *)(v11 + 8), &v23, (char *)__src + ((v7 - v12) & 0xFFFFFFFC));
      unsigned int v14 = v23;
      if (v13) {
        unsigned int v14 = 0;
      }
      v12 -= v14;
      v11 += 16;
    }
    while (v11 != *((void *)this + 5));
  }
  if (v7 >= 4)
  {
    uint64_t v16 = 0;
    int v15 = 0;
    unsigned int v17 = (int *)__src;
    do
    {
      if (v16)
      {
        uint64_t v18 = 0;
        int v19 = v17[v16];
        while (v19 != v17[v18])
        {
          if (v16 == ++v18) {
            goto LABEL_24;
          }
        }
      }
      else
      {
        int v19 = *v17;
LABEL_24:
        v17[v15++] = v19;
      }
      ++v16;
    }
    while (v16 != v7 >> 2);
  }
  else
  {
    int v15 = 0;
  }
  unsigned int v20 = 4 * v15;
  if (a3)
  {
    if (*a2 >= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = *a2;
    }
    std::vector<char>::pointer v22 = __src;
    memcpy(a3, __src, v21);
  }
  else
  {
    std::vector<char>::pointer v22 = __src;
  }
  *a2 = v20;
  if (v22) {
    free(v22);
  }
  return 0;
}

void sub_1900A56A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10) {
    free(a10);
  }
  _Unwind_Resume(exception_object);
}

void *CADeprecated::CAAutoFree<unsigned int>::CAAutoFree(void *a1, uint64_t a2, int a3)
{
  *a1 = 0;
  size_t v5 = 4 * a2;
  if (a3)
  {
    uint64_t v6 = malloc_type_malloc(4 * a2, 0x2C8E6D5CuLL);
    unsigned int v7 = v6;
    if (!a2 || v6)
    {
      bzero(v6, v5);
      goto LABEL_7;
    }
LABEL_8:
    exceptiouint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v11 = std::bad_alloc::bad_alloc(exception);
  }
  int v8 = malloc_type_malloc(4 * a2, 0x7C51E058uLL);
  unsigned int v7 = v8;
  if (a2 && !v8) {
    goto LABEL_8;
  }
LABEL_7:
  *a1 = v7;
  return a1;
}

OSStatus AudioFileCreateWithURL(CFURLRef inFileRef, AudioFileTypeID inFileType, const AudioStreamBasicDescription *inFormat, AudioFileFlags inFlags, AudioFileID *outAudioFile)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  OSStatus v5 = -50;
  if (inFileRef)
  {
    if (inFormat)
    {
      if (outAudioFile)
      {
        uint64_t v8 = *(void *)&inFlags;
        AudioFileFormatRegistry = (AudioFileFormatRegistry *)GetAudioFileFormatRegistry();
        uint64_t v12 = AudioFileFormatRegistry::Get(AudioFileFormatRegistry, inFileType);
        int v13 = (AudioFileFormatBase *)v12;
        OSStatus v5 = 1954115647;
        if (v12)
        {
          if ((*(unsigned int (**)(uint64_t))(*(void *)v12 + 48))(v12))
          {
            unsigned int v14 = (unsigned int *)NewAudioFileHandle(v13);
            if (v14)
            {
              if (CFURLGetFileSystemRepresentation(inFileRef, 1u, buffer, 1024))
              {
                if (stat((const char *)buffer, &v23))
                {
                  long long v15 = *(_OWORD *)&inFormat->mBytesPerPacket;
                  long long v20 = *(_OWORD *)&inFormat->mSampleRate;
                  long long v21 = v15;
                  uint64_t v22 = *(void *)&inFormat->mBitsPerChannel;
                  if (inFormat->mFormatID == 1819304813 && inFormat->mChannelsPerFrame == 1) {
                    HIDWORD(v20) &= ~0x20u;
                  }
                  OSStatus v16 = (*(uint64_t (**)(unsigned int *, CFURLRef, long long *, uint64_t))(*(void *)v14 + 32))(v14, inFileRef, &v20, v8);
                }
                else
                {
                  if ((v8 & 1) == 0)
                  {
                    (*(void (**)(unsigned int *))(*(void *)v14 + 8))(v14);
                    return -48;
                  }
                  long long v17 = *(_OWORD *)&inFormat->mBytesPerPacket;
                  long long v20 = *(_OWORD *)&inFormat->mSampleRate;
                  long long v21 = v17;
                  uint64_t v22 = *(void *)&inFormat->mBitsPerChannel;
                  if (inFormat->mFormatID == 1819304813 && inFormat->mChannelsPerFrame == 1) {
                    HIDWORD(v20) &= ~0x20u;
                  }
                  OSStatus v16 = (*(uint64_t (**)(unsigned int *, CFURLRef, long long *, uint64_t))(*(void *)v14 + 40))(v14, inFileRef, &v20, v8);
                }
                OSStatus v5 = v16;
                if (v16)
                {
                  (*(void (**)(unsigned int *))(*(void *)v14 + 8))(v14);
                  uint64_t v18 = 0;
                }
                else
                {
                  uint64_t v18 = (OpaqueAudioFileID *)v14[2];
                }
                *outAudioFile = v18;
              }
              else
              {
                (*(void (**)(unsigned int *))(*(void *)v14 + 8))(v14);
                *outAudioFile = 0;
                return -43;
              }
            }
          }
          else
          {
            return 1869627199;
          }
        }
      }
    }
  }
  return v5;
}

void sub_1900A5A14(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1900A59D8);
  }
  _Unwind_Resume(a1);
}

OSStatus AudioFileOpenWithCallbacks(void *inClientData, AudioFile_ReadProc inReadFunc, AudioFile_WriteProc inWriteFunc, AudioFile_GetSizeProc inGetSizeFunc, AudioFile_SetSizeProc inSetSizeFunc, AudioFileTypeID inFileTypeHint, AudioFileID *outAudioFile)
{
  if (!outAudioFile) {
    return -50;
  }
  CADeprecated::CAAutoFree<unsigned char>::CAAutoFree(&v28, 0x2000uLL, 1);
  uint64_t v14 = 0;
  unsigned int v27 = 0;
  FormatForData = (AudioFileFormatBase *)v28;
  do
  {
    OSStatus v16 = ((uint64_t (*)(void *, uint64_t, uint64_t, AudioFileFormatBase *, unsigned int *))inReadFunc)(inClientData, v14, 0x2000, FormatForData, &v27);
    LODWORD(FormatForData) = v16;
    if (v16)
    {
      char v23 = 0;
      OSStatus v19 = v16;
      goto LABEL_18;
    }
    if (v27 < 0xA) {
      break;
    }
    FormatForData = (AudioFileFormatBase *)v28;
    unsigned int v17 = ID3Size(v27, v28, &v26);
    v14 += v17;
  }
  while (v17);
  AudioFileFormatRegistry = (AudioFileFormatRegistry *)GetAudioFileFormatRegistry();
  FormatForData = (AudioFileFormatBase *)AudioFileFormatRegistry::GetFormatForData(AudioFileFormatRegistry, v27, v28);
  OSStatus v19 = 1954115647;
  if (FormatForData) {
    goto LABEL_7;
  }
  if (inFileTypeHint)
  {
    uint64_t v24 = AudioFileFormatRegistry::Get(AudioFileFormatRegistry, inFileTypeHint);
    FormatForData = (AudioFileFormatBase *)v24;
    if (!v24)
    {
      char v23 = 0;
      goto LABEL_18;
    }
    if ((*(unsigned int (**)(uint64_t, void, unsigned __int8 *))(*(void *)v24 + 24))(v24, v27, v28))
    {
LABEL_7:
      uint64_t v20 = NewAudioFileHandle(FormatForData);
      long long v21 = (unsigned int *)v20;
      if (v20)
      {
        LODWORD(FormatForData) = (*(uint64_t (**)(uint64_t, void *, AudioFile_ReadProc, AudioFile_WriteProc, AudioFile_GetSizeProc, AudioFile_SetSizeProc))(*(void *)v20 + 56))(v20, inClientData, inReadFunc, inWriteFunc, inGetSizeFunc, inSetSizeFunc);
        if (FormatForData)
        {
          (*(void (**)(unsigned int *))(*(void *)v21 + 8))(v21);
          uint64_t v22 = 0;
        }
        else
        {
          uint64_t v22 = (OpaqueAudioFileID *)v21[2];
        }
        *outAudioFile = v22;
        char v23 = 1;
        goto LABEL_18;
      }
    }
  }
  char v23 = 0;
  LODWORD(FormatForData) = 0;
LABEL_18:
  if (v28) {
    free(v28);
  }
  if (v23) {
    return (int)FormatForData;
  }
  return v19;
}

void sub_1900A5C88(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10) {
    free(a10);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1900A5C58);
}

OSStatus AudioFileInitializeWithCallbacks(void *inClientData, AudioFile_ReadProc inReadFunc, AudioFile_WriteProc inWriteFunc, AudioFile_GetSizeProc inGetSizeFunc, AudioFile_SetSizeProc inSetSizeFunc, AudioFileTypeID inFileType, const AudioStreamBasicDescription *inFormat, AudioFileFlags inFlags, AudioFileID *outAudioFile)
{
  OSStatus v9 = -50;
  if (inFormat)
  {
    if (outAudioFile)
    {
      uint64_t v12 = *(void *)&inFileType;
      AudioFileFormatRegistry = (AudioFileFormatRegistry *)GetAudioFileFormatRegistry();
      uint64_t v18 = AudioFileFormatRegistry::Get(AudioFileFormatRegistry, v12);
      OSStatus v19 = (AudioFileFormatBase *)v18;
      OSStatus v9 = 1954115647;
      if (v18)
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)v18 + 48))(v18))
        {
          uint64_t v20 = NewAudioFileHandle(v19);
          long long v21 = (unsigned int *)v20;
          if (v20)
          {
            long long v22 = *(_OWORD *)&inFormat->mBytesPerPacket;
            v25[0] = *(_OWORD *)&inFormat->mSampleRate;
            v25[1] = v22;
            uint64_t v26 = *(void *)&inFormat->mBitsPerChannel;
            if (inFormat->mFormatID == 1819304813 && inFormat->mChannelsPerFrame == 1) {
              HIDWORD(v25[0]) &= ~0x20u;
            }
            OSStatus v9 = (*(uint64_t (**)(uint64_t, void *, AudioFile_ReadProc, AudioFile_WriteProc, AudioFile_GetSizeProc, AudioFile_SetSizeProc, uint64_t, _OWORD *, AudioFileFlags))(*(void *)v20 + 64))(v20, inClientData, inReadFunc, inWriteFunc, inGetSizeFunc, inSetSizeFunc, v12, v25, inFlags);
            if (v9)
            {
              (*(void (**)(unsigned int *))(*(void *)v21 + 8))(v21);
              *outAudioFile = 0;
            }
            else
            {
              *outAudioFile = (AudioFileID)v21[2];
            }
          }
        }
        else
        {
          return 1869627199;
        }
      }
    }
  }
  return v9;
}

void sub_1900A5EF8(void *a1)
{
}

void AudioFilePrepareToOpen()
{
}

void sub_1900A6020(_Unwind_Exception *a1)
{
  BaseOpaqueObject::~BaseOpaqueObject(v1);
  MEMORY[0x192FC8940](v1, 0x10A3C40753F2C21);
  _Unwind_Resume(a1);
}

OSStatus AudioFileOptimize(AudioFileID inAudioFile)
{
  AudioFileID v3 = inAudioFile;
  uint64_t v4 = 0;
  if (AudioFileLocker::Lock((AudioFileLocker *)&v3))
  {
    if (v4) {
      OSStatus v1 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 80))(v4);
    }
    else {
      OSStatus v1 = -50;
    }
  }
  else
  {
    OSStatus v1 = -38;
  }
  AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&v3);
  return v1;
}

void sub_1900A60D4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

OSStatus AudioFileReadBytes(AudioFileID inAudioFile, Boolean inUseCache, SInt64 inStartingByte, UInt32 *ioNumBytes, void *outBuffer)
{
  uint64_t v8 = inUseCache;
  AudioFileID v11 = inAudioFile;
  uint64_t v12 = 0;
  if (AudioFileLocker::Lock((AudioFileLocker *)&v11))
  {
    if (v12) {
      OSStatus v9 = (*(uint64_t (**)(uint64_t, uint64_t, SInt64, UInt32 *, void *))(*(void *)v12 + 88))(v12, v8, inStartingByte, ioNumBytes, outBuffer);
    }
    else {
      OSStatus v9 = -50;
    }
  }
  else
  {
    OSStatus v9 = -38;
  }
  AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&v11);
  return v9;
}

void sub_1900A61BC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

OSStatus AudioFileWriteBytes(AudioFileID inAudioFile, Boolean inUseCache, SInt64 inStartingByte, UInt32 *ioNumBytes, const void *inBuffer)
{
  if (inStartingByte < 0) {
    return -50;
  }
  OSStatus v6 = -50;
  if (ioNumBytes && inBuffer && *ioNumBytes)
  {
    uint64_t v9 = inUseCache;
    AudioFileID v11 = inAudioFile;
    uint64_t v12 = 0;
    if (AudioFileLocker::Lock((AudioFileLocker *)&v11))
    {
      if (v12) {
        OSStatus v6 = (*(uint64_t (**)(uint64_t, uint64_t, SInt64, UInt32 *, const void *))(*(void *)v12 + 96))(v12, v9, inStartingByte, ioNumBytes, inBuffer);
      }
    }
    else
    {
      OSStatus v6 = -38;
    }
    AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&v11);
  }
  return v6;
}

void sub_1900A62C4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

OSStatus AudioFileReadPacketData(AudioFileID inAudioFile, Boolean inUseCache, UInt32 *ioNumBytes, AudioStreamPacketDescription *outPacketDescriptions, SInt64 inStartingPacket, UInt32 *ioNumPackets, void *outBuffer)
{
  if (!ioNumPackets) {
    return -50;
  }
  OSStatus v7 = -50;
  if ((inStartingPacket & 0x8000000000000000) == 0 && *ioNumPackets)
  {
    AudioFileID v14 = inAudioFile;
    uint64_t v15 = 0;
    if (AudioFileLocker::Lock((AudioFileLocker *)&v14))
    {
      if (v15)
      {
        if (!ioNumBytes && outPacketDescriptions && !outBuffer)
        {
          OSStatus v11 = (*(uint64_t (**)(void))(*(void *)v15 + 104))();
          goto LABEL_16;
        }
        if (ioNumBytes && *ioNumBytes)
        {
          OSStatus v11 = (*(uint64_t (**)(void))(*(void *)v15 + 112))();
LABEL_16:
          OSStatus v12 = v11;
          AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&v14);
          if (v12 == -39) {
            return 0;
          }
          else {
            return v12;
          }
        }
      }
    }
    else
    {
      OSStatus v7 = -38;
    }
    AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&v14);
  }
  return v7;
}

void sub_1900A6448(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a2 == 2)
  {
    __cxa_end_catch();
    JUMPOUT(0x1900A6420);
  }
  __cxa_end_catch();
  JUMPOUT(0x1900A6428);
}

OSStatus AudioFileWritePackets(AudioFileID inAudioFile, Boolean inUseCache, UInt32 inNumBytes, const AudioStreamPacketDescription *inPacketDescriptions, SInt64 inStartingPacket, UInt32 *ioNumPackets, const void *inBuffer)
{
  uint64_t v11 = *(void *)&inNumBytes;
  uint64_t v12 = inUseCache;
  AudioFileID v15 = inAudioFile;
  uint64_t v16 = 0;
  if (AudioFileLocker::Lock((AudioFileLocker *)&v15))
  {
    if (v16) {
      OSStatus v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const AudioStreamPacketDescription *, SInt64, UInt32 *, const void *))(*(void *)v16 + 120))(v16, v12, v11, inPacketDescriptions, inStartingPacket, ioNumPackets, inBuffer);
    }
    else {
      OSStatus v13 = -50;
    }
  }
  else
  {
    OSStatus v13 = -38;
  }
  AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&v15);
  return v13;
}

void sub_1900A6548(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t AudioFileWritePacketsWithDependencyInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v17 = a1;
  uint64_t v18 = 0;
  if (AudioFileLocker::Lock((AudioFileLocker *)&v17))
  {
    if (v18) {
      uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v18 + 128))(v18, a2, a3, a4, a5, a6, a7, a8);
    }
    else {
      uint64_t v15 = 4294967246;
    }
  }
  else
  {
    uint64_t v15 = 4294967258;
  }
  AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&v17);
  return v15;
}

void sub_1900A6658(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

OSStatus AudioFileSetProperty(AudioFileID inAudioFile, AudioFilePropertyID inPropertyID, UInt32 inDataSize, const void *inPropertyData)
{
  if (!inAudioFile) {
    return -50;
  }
  uint64_t v5 = *(void *)&inDataSize;
  uint64_t v6 = *(void *)&inPropertyID;
  AudioFileID v9 = inAudioFile;
  uint64_t v10 = 0;
  if (AudioFileLocker::Lock((AudioFileLocker *)&v9))
  {
    if (v10) {
      OSStatus v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const void *))(*(void *)v10 + 152))(v10, v6, v5, inPropertyData);
    }
    else {
      OSStatus v7 = -50;
    }
  }
  else
  {
    OSStatus v7 = -38;
  }
  AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&v9);
  return v7;
}

void sub_1900A6744(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

OSStatus AudioFileCountUserData(AudioFileID inAudioFile, UInt32 inUserDataID, UInt32 *outNumberItems)
{
  uint64_t v4 = *(void *)&inUserDataID;
  AudioFileID v7 = inAudioFile;
  uint64_t v8 = 0;
  if (AudioFileLocker::Lock((AudioFileLocker *)&v7))
  {
    if (v8) {
      OSStatus v5 = (*(uint64_t (**)(uint64_t, uint64_t, UInt32 *))(*(void *)v8 + 160))(v8, v4, outNumberItems);
    }
    else {
      OSStatus v5 = -50;
    }
  }
  else
  {
    OSStatus v5 = -38;
  }
  AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&v7);
  return v5;
}

void sub_1900A6814(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

OSStatus AudioFileGetUserDataSize(AudioFileID inAudioFile, UInt32 inUserDataID, UInt32 inIndex, UInt32 *outUserDataSize)
{
  uint64_t v5 = *(void *)&inIndex;
  uint64_t v6 = *(void *)&inUserDataID;
  AudioFileID v9 = inAudioFile;
  uint64_t v10 = 0;
  if (AudioFileLocker::Lock((AudioFileLocker *)&v9))
  {
    if (v10) {
      OSStatus v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, UInt32 *))(*(void *)v10 + 168))(v10, v6, v5, outUserDataSize);
    }
    else {
      OSStatus v7 = -50;
    }
  }
  else
  {
    OSStatus v7 = -38;
  }
  AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&v9);
  return v7;
}

void sub_1900A68F4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

OSStatus AudioFileGetUserDataSize64(AudioFileID inAudioFile, UInt32 inUserDataID, UInt32 inIndex, UInt64 *outUserDataSize)
{
  uint64_t v5 = *(void *)&inIndex;
  uint64_t v6 = *(void *)&inUserDataID;
  AudioFileID v9 = inAudioFile;
  uint64_t v10 = 0;
  if (AudioFileLocker::Lock((AudioFileLocker *)&v9))
  {
    if (v10) {
      OSStatus v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, UInt64 *))(*(void *)v10 + 176))(v10, v6, v5, outUserDataSize);
    }
    else {
      OSStatus v7 = -50;
    }
  }
  else
  {
    OSStatus v7 = -38;
  }
  AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&v9);
  return v7;
}

void sub_1900A69D4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

OSStatus AudioFileGetUserData(AudioFileID inAudioFile, UInt32 inUserDataID, UInt32 inIndex, UInt32 *ioUserDataSize, void *outUserData)
{
  if (!ioUserDataSize) {
    return 561211770;
  }
  uint64_t v7 = *(void *)&inIndex;
  uint64_t v8 = *(void *)&inUserDataID;
  AudioFileID v11 = inAudioFile;
  uint64_t v12 = 0;
  if (AudioFileLocker::Lock((AudioFileLocker *)&v11))
  {
    if (v12) {
      OSStatus v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, UInt32 *, void *))(*(void *)v12 + 184))(v12, v8, v7, ioUserDataSize, outUserData);
    }
    else {
      OSStatus v9 = -50;
    }
  }
  else
  {
    OSStatus v9 = -38;
  }
  AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&v11);
  return v9;
}

void sub_1900A6ACC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

OSStatus AudioFileGetUserDataAtOffset(AudioFileID inAudioFile, UInt32 inUserDataID, UInt32 inIndex, SInt64 inOffset, UInt32 *ioUserDataSize, void *outUserData)
{
  if (!ioUserDataSize) {
    return 561211770;
  }
  uint64_t v9 = *(void *)&inIndex;
  uint64_t v10 = *(void *)&inUserDataID;
  AudioFileID v13 = inAudioFile;
  uint64_t v14 = 0;
  if (AudioFileLocker::Lock((AudioFileLocker *)&v13))
  {
    if (v14) {
      OSStatus v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, SInt64, UInt32 *, void *))(*(void *)v14 + 192))(v14, v10, v9, inOffset, ioUserDataSize, outUserData);
    }
    else {
      OSStatus v11 = -50;
    }
  }
  else
  {
    OSStatus v11 = -38;
  }
  AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&v13);
  return v11;
}

void sub_1900A6BD4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

OSStatus AudioFileSetUserData(AudioFileID inAudioFile, UInt32 inUserDataID, UInt32 inIndex, UInt32 inUserDataSize, const void *inUserData)
{
  uint64_t v6 = *(void *)&inUserDataSize;
  uint64_t v7 = *(void *)&inIndex;
  uint64_t v8 = *(void *)&inUserDataID;
  AudioFileID v11 = inAudioFile;
  uint64_t v12 = 0;
  if (AudioFileLocker::Lock((AudioFileLocker *)&v11))
  {
    if (v12) {
      OSStatus v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, const void *))(*(void *)v12 + 200))(v12, v8, v7, v6, inUserData);
    }
    else {
      OSStatus v9 = -50;
    }
  }
  else
  {
    OSStatus v9 = -38;
  }
  AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&v11);
  return v9;
}

void sub_1900A6CBC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

OSStatus AudioFileRemoveUserData(AudioFileID inAudioFile, UInt32 inUserDataID, UInt32 inIndex)
{
  uint64_t v3 = *(void *)&inIndex;
  uint64_t v4 = *(void *)&inUserDataID;
  AudioFileID v7 = inAudioFile;
  uint64_t v8 = 0;
  if (AudioFileLocker::Lock((AudioFileLocker *)&v7))
  {
    if (v8) {
      OSStatus v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8 + 208))(v8, v4, v3);
    }
    else {
      OSStatus v5 = -50;
    }
  }
  else
  {
    OSStatus v5 = -38;
  }
  AudioFileLocker::~AudioFileLocker((AudioFileLocker *)&v7);
  return v5;
}

void sub_1900A6D8C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

OSStatus AudioFileGetGlobalInfoSize(AudioFilePropertyID inPropertyID, UInt32 inSpecifierSize, void *inSpecifier, UInt32 *outDataSize)
{
  if (!outDataSize) {
    return -50;
  }
  OSStatus v8 = 2003334207;
  AudioFileFormatRegistry = (AudioFileFormatRegistry *)GetAudioFileFormatRegistry();
  if ((int)inPropertyID <= 1718446435)
  {
    if ((int)inPropertyID > 1634560364)
    {
      if ((int)inPropertyID > 1717926003)
      {
        if (inPropertyID == 1717926004) {
          goto LABEL_29;
        }
        if (inPropertyID != 1718118003) {
          return v8;
        }
        if (inSpecifierSize == 4)
        {
          unsigned int v12 = *(_DWORD *)inSpecifier;
          unsigned int v18 = -1;
          OSStatus HFSCodesForType = AudioFileFormatRegistry::GetHFSCodesForType(AudioFileFormatRegistry, v12, &v18, 0);
          goto LABEL_47;
        }
        return 561211770;
      }
      if (inPropertyID == 1634560365) {
        goto LABEL_29;
      }
      int v11 = 1635087465;
    }
    else
    {
      if ((int)inPropertyID <= 1634231922)
      {
        if (inPropertyID == 1634103910)
        {
          UInt32 FormatsSize = AudioFileFormatRegistry::GetReadFormatsSize(AudioFileFormatRegistry);
        }
        else
        {
          if (inPropertyID != 1634105190) {
            return v8;
          }
          UInt32 FormatsSize = AudioFileFormatRegistry::GetWriteFormatsSize(AudioFileFormatRegistry);
        }
        OSStatus v8 = 0;
        *outDataSize = FormatsSize;
        return v8;
      }
      if (inPropertyID == 1634231923)
      {
        unsigned int v18 = -1;
        OSStatus HFSCodesForType = AudioFileFormatRegistry::GetAllHFSTypeCodes(AudioFileFormatRegistry, &v18, 0);
        goto LABEL_47;
      }
      int v11 = 1634498676;
    }
LABEL_28:
    if (inPropertyID != v11) {
      return v8;
    }
LABEL_29:
    OSStatus v8 = 0;
    *outDataSize = 8;
    return v8;
  }
  if ((int)inPropertyID <= 1935960419)
  {
    if ((int)inPropertyID > 1718906476)
    {
      if (inPropertyID == 1718906477) {
        goto LABEL_29;
      }
      int v11 = 1718973545;
      goto LABEL_28;
    }
    if (inPropertyID != 1718446436)
    {
      int v11 = 1718446445;
      goto LABEL_28;
    }
    if (inSpecifierSize == 4)
    {
      uint64_t v14 = AudioFileFormatRegistry::Get(AudioFileFormatRegistry, *(_DWORD *)inSpecifier);
      if (!v14) {
        goto LABEL_51;
      }
      unsigned int v18 = -1;
      OSStatus HFSCodesForType = (*(uint64_t (**)(uint64_t, unsigned int *, void))(*(void *)v14 + 96))(v14, &v18, 0);
LABEL_47:
      if (!HFSCodesForType) {
        *outDataSize = v18;
      }
      return HFSCodesForType;
    }
    return 561211770;
  }
  if ((int)inPropertyID > 1952999026)
  {
    switch(inPropertyID)
    {
      case 0x74686673u:
        AudioFileFormatRegistry::GetTypesForHFSCode(AudioFileFormatRegistry, *(_DWORD *)inSpecifier, outDataSize, 0);
        return 0;
      case 0x746D696Du:
        AudioFileFormatRegistry::GetTypesForMIMEType(AudioFileFormatRegistry, *(const __CFString **)inSpecifier, outDataSize, 0);
        return 0;
      case 0x74757469u:
        AudioFileFormatRegistry::GetTypesForUTI(AudioFileFormatRegistry, *(const __CFString **)inSpecifier, outDataSize, 0);
        return 0;
    }
    return v8;
  }
  if (inPropertyID == 1935960420)
  {
    if (inSpecifierSize < 8) {
      return 561211770;
    }
    uint64_t v15 = *((unsigned int *)inSpecifier + 1);
    uint64_t v16 = AudioFileFormatRegistry::Get(AudioFileFormatRegistry, *(_DWORD *)inSpecifier);
    if (v16)
    {
      unsigned int v18 = -1;
      OSStatus HFSCodesForType = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *, void))(*(void *)v16 + 104))(v16, v15, &v18, 0);
      goto LABEL_47;
    }
LABEL_51:
    OSStatus v8 = 1954115647;
    *outDataSize = 0;
    return v8;
  }
  if (inPropertyID == 1952807028)
  {
    AudioFileFormatRegistry::GetTypesForExtension(AudioFileFormatRegistry, *(const __CFString **)inSpecifier, outDataSize, 0);
    return 0;
  }
  return v8;
}

void sub_1900A711C(void *a1)
{
}

OSStatus AudioFileGetGlobalInfo(AudioFilePropertyID inPropertyID, UInt32 inSpecifierSize, void *inSpecifier, UInt32 *ioDataSize, void *outPropertyData)
{
  OSStatus v5 = -50;
  if (!ioDataSize || !outPropertyData) {
    return v5;
  }
  OSStatus v5 = 0;
  AudioFileFormatRegistry = (AudioFileFormatRegistry *)GetAudioFileFormatRegistry();
  unsigned int v12 = AudioFileFormatRegistry;
  if ((int)inPropertyID <= 1718446435)
  {
    if ((int)inPropertyID > 1634560364)
    {
      if ((int)inPropertyID > 1717926003)
      {
        if (inPropertyID == 1717926004)
        {
          if (inSpecifierSize == 4) {
            return AudioFileFormatRegistry::GetExtensionsForType(AudioFileFormatRegistry, *(_DWORD *)inSpecifier, ioDataSize, outPropertyData);
          }
          return 561211770;
        }
        if (inPropertyID != 1718118003) {
          return v5;
        }
        if (inSpecifierSize != 4) {
          return 561211770;
        }
        return AudioFileFormatRegistry::GetHFSCodesForType(AudioFileFormatRegistry, *(_DWORD *)inSpecifier, ioDataSize, outPropertyData);
      }
      else if (inPropertyID == 1634560365)
      {
        if (*ioDataSize != 8) {
          return 561211770;
        }
        return AudioFileFormatRegistry::GetAllMIMETypes(AudioFileFormatRegistry, ioDataSize, outPropertyData);
      }
      else
      {
        if (inPropertyID != 1635087465) {
          return v5;
        }
        if (*ioDataSize != 8) {
          return 561211770;
        }
        return AudioFileFormatRegistry::GetAllUTIs(AudioFileFormatRegistry, ioDataSize, outPropertyData);
      }
    }
    else
    {
      if ((int)inPropertyID <= 1634231922)
      {
        if (inPropertyID == 1634103910)
        {
          UInt32 FormatsSize = AudioFileFormatRegistry::GetReadFormatsSize(AudioFileFormatRegistry);
          unint64_t v23 = *ioDataSize;
          AudioFileFormatRegistry::AddComponentFormats(v12);
          OSStatus v5 = 0;
          *UInt32 ioDataSize = FormatsSize;
          uint64_t v24 = *((void *)v12 + 4);
          if (v24 != *((void *)v12 + 5) && v23 >= 4)
          {
            unint64_t v25 = 0;
            unint64_t v26 = v23 >> 2;
            uint64_t v27 = v24 + 16;
            do
            {
              if ((*(unsigned int (**)(void))(**(void **)(v27 - 8) + 40))(*(void *)(v27 - 8))) {
                *((_DWORD *)outPropertyData + v25++) = *(_DWORD *)(v27 - 16);
              }
              OSStatus v5 = 0;
              BOOL v19 = v27 == *((void *)v12 + 5);
              v27 += 16;
            }
            while (!v19 && v25 < v26);
          }
        }
        else if (inPropertyID == 1634105190)
        {
          UInt32 v13 = AudioFileFormatRegistry::GetWriteFormatsSize(AudioFileFormatRegistry);
          unint64_t v14 = *ioDataSize;
          AudioFileFormatRegistry::AddComponentFormats(v12);
          OSStatus v5 = 0;
          *UInt32 ioDataSize = v13;
          uint64_t v15 = *((void *)v12 + 4);
          if (v15 != *((void *)v12 + 5) && v14 >= 4)
          {
            unint64_t v16 = 0;
            unint64_t v17 = v14 >> 2;
            uint64_t v18 = v15 + 16;
            do
            {
              if ((*(unsigned int (**)(void))(**(void **)(v18 - 8) + 48))(*(void *)(v18 - 8))) {
                *((_DWORD *)outPropertyData + v16++) = *(_DWORD *)(v18 - 16);
              }
              OSStatus v5 = 0;
              BOOL v19 = v18 == *((void *)v12 + 5);
              v18 += 16;
            }
            while (!v19 && v16 < v17);
          }
        }
        return v5;
      }
      if (inPropertyID == 1634231923) {
        return AudioFileFormatRegistry::GetAllHFSTypeCodes(AudioFileFormatRegistry, ioDataSize, outPropertyData);
      }
      if (inPropertyID != 1634498676) {
        return v5;
      }
      if (*ioDataSize != 8) {
        return 561211770;
      }
      return AudioFileFormatRegistry::GetAllExtensions(AudioFileFormatRegistry, ioDataSize, outPropertyData);
    }
  }
  if ((int)inPropertyID <= 1935960419)
  {
    if ((int)inPropertyID > 1718906476)
    {
      if (inPropertyID == 1718906477)
      {
        OSStatus v5 = 561211770;
        if (inSpecifierSize != 4 || *ioDataSize != 8) {
          return v5;
        }
        return AudioFileFormatRegistry::GetNameForType(AudioFileFormatRegistry, *(_DWORD *)inSpecifier, ioDataSize, outPropertyData);
      }
      else
      {
        if (inPropertyID != 1718973545) {
          return v5;
        }
        if (inSpecifierSize != 4) {
          return 561211770;
        }
        return AudioFileFormatRegistry::GetUTIsForType(AudioFileFormatRegistry, *(_DWORD *)inSpecifier, ioDataSize, outPropertyData);
      }
    }
    else if (inPropertyID == 1718446436)
    {
      if (inSpecifierSize != 4) {
        return 561211770;
      }
      uint64_t v29 = AudioFileFormatRegistry::Get(AudioFileFormatRegistry, *(_DWORD *)inSpecifier);
      if (!v29) {
        goto LABEL_81;
      }
      return (*(uint64_t (**)(uint64_t, UInt32 *, void *))(*(void *)v29 + 96))(v29, ioDataSize, outPropertyData);
    }
    else
    {
      if (inPropertyID != 1718446445) {
        return v5;
      }
      if (inSpecifierSize != 4) {
        return 561211770;
      }
      return AudioFileFormatRegistry::GetMIMETypesForType(AudioFileFormatRegistry, *(_DWORD *)inSpecifier, ioDataSize, outPropertyData);
    }
  }
  if ((int)inPropertyID > 1952999026)
  {
    switch(inPropertyID)
    {
      case 0x74686673u:
        AudioFileFormatRegistry::GetTypesForHFSCode(AudioFileFormatRegistry, *(_DWORD *)inSpecifier, ioDataSize, outPropertyData);
        return 0;
      case 0x746D696Du:
        AudioFileFormatRegistry::GetTypesForMIMEType(AudioFileFormatRegistry, *(const __CFString **)inSpecifier, ioDataSize, outPropertyData);
        return 0;
      case 0x74757469u:
        AudioFileFormatRegistry::GetTypesForUTI(AudioFileFormatRegistry, *(const __CFString **)inSpecifier, ioDataSize, outPropertyData);
        return 0;
    }
    return v5;
  }
  if (inPropertyID == 1935960420)
  {
    if (inSpecifierSize >= 8)
    {
      uint64_t v30 = *((unsigned int *)inSpecifier + 1);
      uint64_t v31 = AudioFileFormatRegistry::Get(AudioFileFormatRegistry, *(_DWORD *)inSpecifier);
      if (v31) {
        return (*(uint64_t (**)(uint64_t, uint64_t, UInt32 *, void *))(*(void *)v31 + 104))(v31, v30, ioDataSize, outPropertyData);
      }
LABEL_81:
      OSStatus v5 = 1954115647;
      *UInt32 ioDataSize = 0;
      return v5;
    }
    return 561211770;
  }
  if (inPropertyID == 1952807028)
  {
    AudioFileFormatRegistry::GetTypesForExtension(AudioFileFormatRegistry, *(const __CFString **)inSpecifier, ioDataSize, outPropertyData);
    return 0;
  }
  return v5;
}

void sub_1900A76A4(void *a1)
{
}

float64_t Float32ToNativeFloat64(void *a1, float64x2_t *a2, unsigned int a3)
{
  if (a3 >= 4)
  {
    unsigned int v3 = a3 >> 2;
    do
    {
      float32x2_t v4 = *(float32x2_t *)a1;
      float32x2_t v5 = (float32x2_t)a1[1];
      a1 += 2;
      float64x2_t v6 = vcvtq_f64_f32(v4);
      *a2 = v6;
      a2[1] = vcvtq_f64_f32(v5);
      a2 += 2;
      --v3;
    }
    while (v3);
  }
  int v7 = a3 & 3;
  if ((a3 & 3) != 0)
  {
    do
    {
      float v8 = *(float *)a1;
      a1 = (void *)((char *)a1 + 4);
      v6.f64[0] = v8;
      a2->f64[0] = v8;
      a2 = (float64x2_t *)((char *)a2 + 8);
      --v7;
    }
    while (v7);
  }
  return v6.f64[0];
}

double Float32ToSwapFloat64(float *a1, _DWORD *a2, unsigned int a3)
{
  if (a3 >= 4)
  {
    unsigned int v3 = a3 >> 2;
    do
    {
      float v4 = a1[1];
      float v5 = a1[2];
      float v6 = a1[3];
      double v7 = *a1;
      a2[1] = bswap32(LODWORD(v7));
      *a2 = bswap32(HIDWORD(v7));
      a2[3] = bswap32(COERCE_UNSIGNED_INT64(v4));
      a2[2] = bswap32(HIDWORD(COERCE_UNSIGNED_INT64(v4)));
      a2[5] = bswap32(COERCE_UNSIGNED_INT64(v5));
      a2[4] = bswap32(HIDWORD(COERCE_UNSIGNED_INT64(v5)));
      double result = v6;
      a2[7] = bswap32(COERCE_UNSIGNED_INT64(v6));
      a2[6] = bswap32(HIDWORD(COERCE_UNSIGNED_INT64(v6)));
      a1 += 4;
      a2 += 8;
      --v3;
    }
    while (v3);
  }
  int v9 = a3 & 3;
  if ((a3 & 3) != 0)
  {
    uint64_t v10 = a2 + 1;
    do
    {
      float v11 = *a1++;
      double result = v11;
      *uint64_t v10 = bswap32(COERCE_UNSIGNED_INT64(v11));
      *(v10 - 1) = bswap32(HIDWORD(COERCE_UNSIGNED_INT64(v11)));
      v10 += 2;
      --v9;
    }
    while (v9);
  }
  return result;
}

float NativeFloat64ToFloat32(_OWORD *a1, float32x4_t *a2, unsigned int a3)
{
  if (a3 >= 4)
  {
    unsigned int v3 = a3 >> 2;
    do
    {
      float64x2_t v5 = *(float64x2_t *)a1;
      float64x2_t v4 = *((float64x2_t *)a1 + 1);
      a1 += 2;
      *a2++ = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v5), v4);
      --v3;
    }
    while (v3);
  }
  int v6 = a3 & 3;
  if ((a3 & 3) != 0)
  {
    do
    {
      double v7 = *(double *)a1;
      a1 = (_OWORD *)((char *)a1 + 8);
      *(float *)v4.f64 = v7;
      a2->i32[0] = LODWORD(v4.f64[0]);
      a2 = (float32x4_t *)((char *)a2 + 4);
      --v6;
    }
    while (v6);
  }
  return *(float *)v4.f64;
}

float32_t SwapFloat64ToFloat32(unsigned int *a1, float32x2_t *a2, unsigned int a3)
{
  if (a3 >= 4)
  {
    unsigned int v3 = a3 >> 2;
    do
    {
      v4.i32[0] = a1[1];
      v4.i32[1] = a1[3];
      v5.i64[0] = *a1;
      v5.i64[1] = a1[2];
      *a2 = vcvt_f32_f64((float64x2_t)vrev64q_s8(vorrq_s8((int8x16_t)vshll_n_s32(v4, 0x20uLL), v5)));
      v4.i32[0] = a1[5];
      v4.i32[1] = a1[7];
      v5.i64[0] = a1[4];
      v5.i64[1] = a1[6];
      float32x2_t v6 = vcvt_f32_f64((float64x2_t)vrev64q_s8(vorrq_s8((int8x16_t)vshll_n_s32(v4, 0x20uLL), v5)));
      a2[1] = v6;
      a1 += 8;
      a2 += 2;
      --v3;
    }
    while (v3);
  }
  int v7 = a3 & 3;
  if ((a3 & 3) != 0)
  {
    float v8 = a1 + 1;
    do
    {
      v6.f32[0] = COERCE_DOUBLE(bswap64(*(v8 - 1) | ((unint64_t)*v8 << 32)));
      a2->i32[0] = v6.i32[0];
      a2 = (float32x2_t *)((char *)a2 + 4);
      v8 += 2;
      --v7;
    }
    while (v7);
  }
  return v6.f32[0];
}

void NativeInt16ToFloat32_Portable(__int16 *a1, float *a2, int a3)
{
}

void ConvertIntToFloat<PCMSInt16Native,PCMFloat32>(__int16 *a1, float *a2, int a3, float a4)
{
  if (a4 == 0.0) {
    a4 = scalbnf(1.0, -15);
  }
  unsigned int v7 = a3 - 4;
  if (a3 >= 4)
  {
    int v8 = a1[1];
    int v9 = a1[2];
    __int16 v10 = a1[3];
    *a2 = a4 * (float)*a1;
    float v11 = a2 + 1;
    a3 &= 3u;
    float v12 = a4 * (float)v8;
    a1 += 4;
    float v13 = (float)v9;
    if (v7 >= 4)
    {
      unsigned int v14 = v7 >> 2;
      do
      {
        int v15 = a1[1];
        float v16 = (float)*a1;
        float v17 = a4 * (float)v10;
        *float v11 = v12;
        v11[1] = a4 * v13;
        int v18 = a1[2];
        __int16 v10 = a1[3];
        _DWORD v11[2] = v17;
        void v11[3] = a4 * v16;
        v11 += 4;
        float v12 = a4 * (float)v15;
        a1 += 4;
        float v13 = (float)v18;
        --v14;
      }
      while (v14);
    }
    *float v11 = v12;
    v11[1] = a4 * v13;
    _DWORD v11[2] = a4 * (float)v10;
    a2 = v11 + 3;
  }
  for (; a3; --a3)
  {
    int v19 = *a1++;
    *a2++ = a4 * (float)v19;
  }
}

void SwapInt16ToFloat32_Portable(unsigned __int16 *a1, float *a2, int a3)
{
}

void ConvertIntToFloat<PCMSInt16Swap,PCMFloat32>(unsigned __int16 *a1, float *a2, int a3, float a4)
{
  if (a4 == 0.0) {
    a4 = scalbnf(1.0, -15);
  }
  unsigned int v7 = a3 - 4;
  if (a3 >= 4)
  {
    int v8 = bswap32(a1[1]);
    int v9 = (int)bswap32(a1[2]) >> 16;
    unsigned int v10 = bswap32(a1[3]) >> 16;
    *a2 = a4 * (float)((int)bswap32(*a1) >> 16);
    float v11 = a2 + 1;
    a3 &= 3u;
    float v12 = a4 * (float)(v8 >> 16);
    a1 += 4;
    float v13 = (float)v9;
    if (v7 >= 4)
    {
      unsigned int v14 = v7 >> 2;
      do
      {
        int v15 = bswap32(*a1);
        *float v11 = v12;
        int v16 = (int)bswap32(a1[1]) >> 16;
        float v17 = (float)(v15 >> 16);
        v11[1] = a4 * v13;
        int v18 = (int)bswap32(a1[2]) >> 16;
        _DWORD v11[2] = a4 * (float)(__int16)v10;
        unsigned int v10 = bswap32(a1[3]) >> 16;
        void v11[3] = a4 * v17;
        v11 += 4;
        float v12 = a4 * (float)v16;
        a1 += 4;
        float v13 = (float)v18;
        --v14;
      }
      while (v14);
    }
    *float v11 = v12;
    v11[1] = a4 * v13;
    _DWORD v11[2] = a4 * (float)(__int16)v10;
    a2 = v11 + 3;
  }
  for (; a3; --a3)
  {
    unsigned int v19 = *a1++;
    *a2++ = a4 * (float)((int)bswap32(v19) >> 16);
  }
}

float *Float32ToNativeInt16_Portable(float *a1, _WORD *a2, unsigned int a3)
{
  return ConvertFloatToInt<PCMFloat32,PCMSInt16Native>(a1, a2, a3, 0.0);
}

float *ConvertFloatToInt<PCMFloat32,PCMSInt16Native>(float *result, _WORD *a2, unsigned int a3, float a4)
{
  if (a4 == 0.0) {
    double v4 = 2147483650.0;
  }
  else {
    double v4 = a4 * 0.0000305175781 * 2147483650.0;
  }
  if (a3 >= 8)
  {
    double v5 = *result * v4 + 32768.0;
    double v6 = result[1] * v4 + 32768.0;
    int v7 = (int)v5 - (v5 < 0.0);
    if (v5 <= -2147483650.0) {
      HIWORD(v7) = 0x8000;
    }
    if (v5 < 2147450880.0) {
      HIWORD(v8) = HIWORD(v7);
    }
    else {
      HIWORD(v8) = 0x7FFF;
    }
    int v9 = result + 3;
    double v10 = result[2];
    unsigned int v11 = (a3 - 4) >> 2;
    do
    {
      float v12 = v9;
      float v13 = a2;
      float v14 = v9[1];
      double v15 = *v9;
      int v16 = (int)v6 - (v6 < 0.0);
      if (v6 <= -2147483650.0) {
        HIWORD(v16) = 0x8000;
      }
      BOOL v17 = v6 < 2147450880.0;
      double v18 = v10 * v4 + 32768.0;
      if (!v17) {
        HIWORD(v16) = 0x7FFF;
      }
      *a2 = HIWORD(v8);
      double v19 = v15 * v4 + 32768.0;
      int v20 = (int)v18 - (v18 < 0.0);
      if (v18 <= -2147483650.0) {
        HIWORD(v20) = 0x8000;
      }
      if (v18 >= 2147450880.0) {
        HIWORD(v20) = 0x7FFF;
      }
      a2[1] = HIWORD(v16);
      float v21 = v12[2];
      double v22 = v14 * v4 + 32768.0;
      int v23 = (int)v19 - (v19 < 0.0);
      if (v19 <= -2147483650.0) {
        HIWORD(v23) = 0x8000;
      }
      if (v19 >= 2147450880.0) {
        HIWORD(v23) = 0x7FFF;
      }
      a2[2] = HIWORD(v20);
      if (v22 >= 2147450880.0)
      {
        HIWORD(v8) = 0x7FFF;
      }
      else if (v22 <= -2147483650.0)
      {
        HIWORD(v8) = 0x8000;
      }
      else
      {
        int v8 = (int)v22 - (v22 < 0.0);
      }
      float v24 = v12[3];
      double v6 = v21 * v4 + 32768.0;
      a2[3] = HIWORD(v23);
      int v9 = v12 + 4;
      a2 += 4;
      double v10 = v24;
      --v11;
    }
    while (v11);
    a3 &= 3u;
    double v25 = *v9;
    double v26 = v10 * v4 + 32768.0;
    if (v6 > -2147483650.0) {
      unsigned int v27 = ((int)v6 - (v6 < 0.0)) >> 16;
    }
    else {
      LOWORD(v27) = 0x8000;
    }
    if (v6 >= 2147450880.0) {
      LOWORD(v27) = 0x7FFF;
    }
    *a2 = HIWORD(v8);
    double v28 = v25 * v4 + 32768.0;
    if (v26 > -2147483650.0) {
      unsigned int v29 = ((int)v26 - (v26 < 0.0)) >> 16;
    }
    else {
      LOWORD(v29) = 0x8000;
    }
    if (v26 < 2147450880.0) {
      __int16 v30 = v29;
    }
    else {
      __int16 v30 = 0x7FFF;
    }
    v13[5] = v27;
    if (v28 >= 2147450880.0)
    {
      LOWORD(v31) = 0x7FFF;
    }
    else if (v28 <= -2147483650.0)
    {
      LOWORD(v31) = 0x8000;
    }
    else
    {
      unsigned int v31 = ((int)v28 - (v28 < 0.0)) >> 16;
    }
    v13[6] = v30;
    v13[7] = v31;
    double result = v12 + 5;
    a2 = v13 + 8;
  }
  for (; a3; --a3)
  {
    double v32 = *result * v4 + 32768.0;
    if (v32 >= 2147450880.0)
    {
      HIWORD(v33) = 0x7FFF;
    }
    else if (v32 <= -2147483650.0)
    {
      HIWORD(v33) = 0x8000;
    }
    else
    {
      int v33 = (int)v32 - (v32 < 0.0);
    }
    *a2++ = HIWORD(v33);
    ++result;
  }
  return result;
}

float *Float32ToSwapInt16_Portable(float *a1, _WORD *a2, unsigned int a3)
{
  return ConvertFloatToInt<PCMFloat32,PCMSInt16Swap>(a1, a2, a3, 0.0);
}

float *ConvertFloatToInt<PCMFloat32,PCMSInt16Swap>(float *result, _WORD *a2, unsigned int a3, float a4)
{
  if (a4 == 0.0) {
    double v4 = 2147483650.0;
  }
  else {
    double v4 = a4 * 0.0000305175781 * 2147483650.0;
  }
  if (a3 >= 8)
  {
    double v5 = *result * v4 + 32768.0;
    double v6 = result[1] * v4 + 32768.0;
    int v7 = (int)v5 - (v5 < 0.0);
    if (v5 <= -2147483650.0) {
      int v7 = 0x80000000;
    }
    if (v5 < 2147450880.0) {
      unsigned int v8 = v7;
    }
    else {
      unsigned int v8 = 0x7FFFFFFF;
    }
    int v9 = result + 3;
    double v10 = result[2];
    unsigned int v11 = (a3 - 4) >> 2;
    do
    {
      float v12 = v9;
      float v13 = a2;
      double v14 = *v9;
      double v15 = v10 * v4 + 32768.0;
      unsigned int v16 = (int)v6 - (v6 < 0.0);
      if (v6 <= -2147483650.0) {
        unsigned int v16 = 0x80000000;
      }
      if (v6 >= 2147450880.0) {
        unsigned int v16 = 0x7FFFFFFF;
      }
      *a2 = bswap32(v8);
      double v17 = v12[1];
      double v18 = v14 * v4 + 32768.0;
      unsigned int v19 = (int)v15 - (v15 < 0.0);
      if (v15 <= -2147483650.0) {
        unsigned int v19 = 0x80000000;
      }
      if (v15 >= 2147450880.0) {
        unsigned int v19 = 0x7FFFFFFF;
      }
      a2[1] = bswap32(v16);
      float v20 = v12[2];
      double v21 = v17 * v4 + 32768.0;
      unsigned int v22 = (int)v18 - (v18 < 0.0);
      if (v18 <= -2147483650.0) {
        unsigned int v22 = 0x80000000;
      }
      if (v18 >= 2147450880.0) {
        unsigned int v22 = 0x7FFFFFFF;
      }
      a2[2] = bswap32(v19);
      if (v21 >= 2147450880.0)
      {
        unsigned int v8 = 0x7FFFFFFF;
      }
      else if (v21 <= -2147483650.0)
      {
        unsigned int v8 = 0x80000000;
      }
      else
      {
        unsigned int v8 = (int)v21 - (v21 < 0.0);
      }
      float v23 = v12[3];
      double v6 = v20 * v4 + 32768.0;
      a2[3] = bswap32(v22);
      int v9 = v12 + 4;
      a2 += 4;
      double v10 = v23;
      --v11;
    }
    while (v11);
    a3 &= 3u;
    double v24 = *v9;
    double v25 = v10 * v4 + 32768.0;
    if (v6 > -2147483650.0) {
      unsigned int v26 = ((int)v6 - (v6 < 0.0)) >> 16;
    }
    else {
      unsigned int v26 = 0x8000;
    }
    if (v6 >= 2147450880.0) {
      unsigned int v26 = 0x7FFF;
    }
    *a2 = bswap32(v8);
    double v27 = v24 * v4 + 32768.0;
    if (v25 > -2147483650.0) {
      unsigned int v28 = ((int)v25 - (v25 < 0.0)) >> 16;
    }
    else {
      unsigned int v28 = 0x8000;
    }
    if (v25 < 2147450880.0) {
      unsigned int v29 = v28;
    }
    else {
      unsigned int v29 = 0x7FFF;
    }
    v13[5] = __rev16(v26);
    if (v27 >= 2147450880.0)
    {
      unsigned int v30 = 0x7FFF;
    }
    else if (v27 <= -2147483650.0)
    {
      unsigned int v30 = 0x8000;
    }
    else
    {
      unsigned int v30 = ((int)v27 - (v27 < 0.0)) >> 16;
    }
    v13[6] = __rev16(v29);
    v13[7] = __rev16(v30);
    double result = v12 + 5;
    a2 = v13 + 8;
  }
  for (; a3; --a3)
  {
    double v31 = *result * v4 + 32768.0;
    if (v31 >= 2147450880.0)
    {
      unsigned int v32 = 0x7FFFFFFF;
    }
    else if (v31 <= -2147483650.0)
    {
      unsigned int v32 = 0x80000000;
    }
    else
    {
      unsigned int v32 = (int)v31 - (v31 < 0.0);
    }
    *a2++ = bswap32(v32);
    ++result;
  }
  return result;
}

__int16 *StereoDeinterleaveInt16ToFloat32Scaled_Portable(__int16 *result, float *a2, float *a3, int a4, float a5)
{
  for (; a4; --a4)
  {
    int v5 = result[1];
    *a2++ = (float)*result * a5;
    *a3++ = (float)v5 * a5;
    result += 2;
  }
  return result;
}

float *StereoInterleaveFloat32ToInt16Scaled_Portable(float *result, float *a2, _WORD *a3, int a4, float a5)
{
  for (; a4; --a4)
  {
    float v5 = *result++;
    float v6 = v5 * a5;
    if ((float)(v5 * a5) <= 0.0)
    {
      int v7 = (int)(float)(v6 + -0.5);
      if (v6 <= -32768.0) {
        LOWORD(v7) = 0x8000;
      }
    }
    else
    {
      int v7 = (int)(float)(v6 + 0.5);
      if (v6 >= 32766.0) {
        LOWORD(v7) = 0x7FFF;
      }
    }
    float v8 = *a2++;
    float v9 = v8 * a5;
    *a3 = v7;
    if ((float)(v8 * a5) <= 0.0)
    {
      int v10 = (int)(float)(v9 + -0.5);
      if (v9 <= -32768.0) {
        LOWORD(v10) = 0x8000;
      }
    }
    else
    {
      int v10 = (int)(float)(v9 + 0.5);
      if (v9 >= 32766.0) {
        LOWORD(v10) = 0x7FFF;
      }
    }
    a3[1] = v10;
    a3 += 2;
  }
  return result;
}

void NativeInt32ToFloat32_Portable(int *a1, float *a2, int a3)
{
}

void ConvertIntToFloat<PCMSInt32Native,PCMFloat32>(int *a1, float *a2, int a3, int a4, float a5)
{
  if (a5 == 0.0) {
    a5 = scalbnf(1.0, 1 - a4);
  }
  unsigned int v8 = a3 - 4;
  if (a3 >= 4)
  {
    int v9 = a1[1];
    int v10 = a1[3];
    int v11 = a1[2];
    *a2 = a5 * (float)*a1;
    float v12 = a2 + 1;
    a3 &= 3u;
    float v13 = a5 * (float)v9;
    a1 += 4;
    float v14 = (float)v11;
    if (v8 >= 4)
    {
      unsigned int v15 = v8 >> 2;
      do
      {
        int v16 = *a1;
        float *v12 = v13;
        float v17 = (float)v16;
        float v18 = a5 * (float)v10;
        int v19 = a1[1];
        v12[1] = a5 * v14;
        int v20 = a1[2];
        int v10 = a1[3];
        _OWORD v12[2] = v18;
        void v12[3] = a5 * v17;
        v12 += 4;
        float v13 = a5 * (float)v19;
        a1 += 4;
        float v14 = (float)v20;
        --v15;
      }
      while (v15);
    }
    float *v12 = v13;
    v12[1] = a5 * v14;
    _OWORD v12[2] = a5 * (float)v10;
    a2 = v12 + 3;
  }
  for (; a3; --a3)
  {
    int v21 = *a1++;
    *a2++ = a5 * (float)v21;
  }
}

void SwapInt32ToFloat32_Portable(unsigned int *a1, float *a2, int a3)
{
}

void ConvertIntToFloat<PCMSInt32Swap,PCMFloat32>(unsigned int *a1, float *a2, int a3, float a4)
{
  if (a4 == 0.0) {
    a4 = scalbnf(1.0, -31);
  }
  unsigned int v7 = a3 - 4;
  if (a3 >= 4)
  {
    int v8 = bswap32(a1[1]);
    int v9 = bswap32(a1[2]);
    int v10 = bswap32(a1[3]);
    *a2 = a4 * (float)(int)bswap32(*a1);
    int v11 = a2 + 1;
    a3 &= 3u;
    float v12 = a4 * (float)v8;
    a1 += 4;
    float v13 = (float)v9;
    if (v7 >= 4)
    {
      unsigned int v14 = v7 >> 2;
      do
      {
        float v15 = (float)v10;
        int v16 = bswap32(*a1);
        *int v11 = v12;
        int v17 = bswap32(a1[1]);
        v11[1] = a4 * v13;
        int v18 = bswap32(a1[2]);
        float v19 = a4 * (float)v16;
        _DWORD v11[2] = a4 * v15;
        int v10 = bswap32(a1[3]);
        void v11[3] = v19;
        v11 += 4;
        float v12 = a4 * (float)v17;
        a1 += 4;
        float v13 = (float)v18;
        --v14;
      }
      while (v14);
    }
    *int v11 = v12;
    v11[1] = a4 * v13;
    _DWORD v11[2] = a4 * (float)v10;
    a2 = v11 + 3;
  }
  for (; a3; --a3)
  {
    unsigned int v20 = *a1++;
    *a2++ = a4 * (float)(int)bswap32(v20);
  }
}

float *Float32ToNativeInt32_Portable(float *a1, int *a2, unsigned int a3)
{
  return ConvertFloatToInt<PCMFloat32,PCMSInt32Native>(a1, a2, a3, 32, 0.0);
}

float *ConvertFloatToInt<PCMFloat32,PCMSInt32Native>(float *result, int *a2, unsigned int a3, int a4, float a5)
{
  double v5 = (double)(1 << (31 - a4));
  if (a4 >= 32) {
    double v5 = 0.0;
  }
  if (a5 == 0.0)
  {
    double v6 = 2147483650.0;
  }
  else
  {
    double v6 = a5;
    if (v5 != 0.0) {
      double v6 = v6 / v5 * 2147483650.0;
    }
  }
  char v7 = 32 - a4;
  double v8 = 2147483650.0 - v5;
  if (a3 >= 8)
  {
    uint64_t v9 = 0;
    double v10 = v5 + *result * v6;
    double v11 = v5 + result[1] * v6;
    int v12 = (int)v10 - (v10 < 0.0);
    if (v10 <= -2147483650.0) {
      int v12 = 0x80000000;
    }
    if (v10 < v8) {
      int v13 = v12;
    }
    else {
      int v13 = 0x7FFFFFFF;
    }
    double v14 = result[2];
    unsigned int v15 = (a3 - 4) >> 2;
    do
    {
      int v16 = &result[v9];
      int v17 = (int)v11 - (v11 < 0.0);
      if (v11 <= -2147483650.0) {
        int v17 = 0x80000000;
      }
      BOOL v18 = v11 < v8;
      float v19 = v16[4];
      double v20 = v16[3];
      double v21 = v5 + v14 * v6;
      if (v18) {
        int v22 = v17;
      }
      else {
        int v22 = 0x7FFFFFFF;
      }
      a2[v9] = v13 >> v7;
      double v23 = v19;
      double v24 = v5 + v20 * v6;
      int v25 = (int)v21 - (v21 < 0.0);
      if (v21 <= -2147483650.0) {
        int v25 = 0x80000000;
      }
      if (v21 >= v8) {
        int v25 = 0x7FFFFFFF;
      }
      unsigned int v26 = &a2[v9];
      int v27 = v22 >> v7;
      float v28 = v16[5];
      double v29 = v5 + v23 * v6;
      if (v24 > -2147483650.0) {
        int v30 = (int)v24 - (v24 < 0.0);
      }
      else {
        int v30 = 0x80000000;
      }
      if (v24 >= v8) {
        int v30 = 0x7FFFFFFF;
      }
      v26[1] = v27;
      v26[2] = v25 >> v7;
      if (v29 >= v8)
      {
        int v13 = 0x7FFFFFFF;
      }
      else if (v29 <= -2147483650.0)
      {
        int v13 = 0x80000000;
      }
      else
      {
        int v13 = (int)v29 - (v29 < 0.0);
      }
      float v31 = v16[6];
      double v11 = v5 + v28 * v6;
      _OWORD v26[3] = v30 >> v7;
      double v14 = v31;
      v9 += 4;
      --v15;
    }
    while (v15);
    uint64_t v32 = (uint64_t)&result[v9 - 1];
    int v33 = &a2[v9 - 4];
    a3 &= 3u;
    double v34 = result[v9 + 3];
    double v35 = v5 + v14 * v6;
    if (v11 > -2147483650.0) {
      int v36 = (int)v11 - (v11 < 0.0);
    }
    else {
      int v36 = 0x80000000;
    }
    a2[v9] = v13 >> v7;
    if (v11 < v8) {
      int v37 = v36;
    }
    else {
      int v37 = 0x7FFFFFFF;
    }
    double v38 = v5 + v34 * v6;
    if (v35 > -2147483650.0) {
      int v39 = (int)v35 - (v35 < 0.0);
    }
    else {
      int v39 = 0x80000000;
    }
    if (v35 < v8) {
      int v40 = v39;
    }
    else {
      int v40 = 0x7FFFFFFF;
    }
    v33[5] = v37 >> v7;
    if (v38 >= v8)
    {
      int v41 = 0x7FFFFFFF;
    }
    else if (v38 <= -2147483650.0)
    {
      int v41 = 0x80000000;
    }
    else
    {
      int v41 = (int)v38 - (v38 < 0.0);
    }
    v33[6] = v40 >> v7;
    v33[7] = v41 >> v7;
    double result = (float *)(v32 + 20);
    a2 = v33 + 8;
  }
  for (; a3; --a3)
  {
    double v42 = v5 + *result * v6;
    if (v42 >= v8)
    {
      int v43 = 0x7FFFFFFF;
    }
    else if (v42 <= -2147483650.0)
    {
      int v43 = 0x80000000;
    }
    else
    {
      int v43 = (int)v42 - (v42 < 0.0);
    }
    *a2++ = v43 >> v7;
    ++result;
  }
  return result;
}

float *Float32ToSwapInt32_Portable(float *a1, _DWORD *a2, unsigned int a3)
{
  return ConvertFloatToInt<PCMFloat32,PCMSInt32Swap>(a1, a2, a3, 0.0);
}

float *ConvertFloatToInt<PCMFloat32,PCMSInt32Swap>(float *result, _DWORD *a2, unsigned int a3, float a4)
{
  double v4 = a4;
  BOOL v5 = a4 == 0.0;
  double v6 = 2147483650.0;
  if (!v5) {
    double v6 = v4;
  }
  if (a3 >= 8)
  {
    uint64_t v7 = 0;
    double v8 = *result * v6 + 0.0;
    double v9 = result[1] * v6 + 0.0;
    int v10 = (int)v8 - (v8 < 0.0);
    if (v8 <= -2147483650.0) {
      int v10 = 0x80000000;
    }
    if (v8 < 2147483650.0) {
      unsigned int v11 = v10;
    }
    else {
      unsigned int v11 = 0x7FFFFFFF;
    }
    double v12 = result[2];
    unsigned int v13 = (a3 - 4) >> 2;
    do
    {
      double v14 = &result[v7];
      double v15 = result[v7 + 3];
      double v16 = v12 * v6 + 0.0;
      int v17 = (int)v9 - (v9 < 0.0);
      if (v9 <= -2147483650.0) {
        int v17 = 0x80000000;
      }
      a2[v7] = bswap32(v11);
      if (v9 < 2147483650.0) {
        unsigned int v18 = v17;
      }
      else {
        unsigned int v18 = 0x7FFFFFFF;
      }
      double v19 = v14[4];
      double v20 = v15 * v6 + 0.0;
      int v21 = (int)v16 - (v16 < 0.0);
      if (v16 <= -2147483650.0) {
        int v21 = 0x80000000;
      }
      if (v16 < 2147483650.0) {
        unsigned int v22 = v21;
      }
      else {
        unsigned int v22 = 0x7FFFFFFF;
      }
      double v23 = &a2[v7];
      a2[v7 + 1] = bswap32(v18);
      float v24 = v14[5];
      double v25 = v19 * v6 + 0.0;
      int v26 = (int)v20 - (v20 < 0.0);
      if (v20 <= -2147483650.0) {
        int v26 = 0x80000000;
      }
      if (v20 < 2147483650.0) {
        unsigned int v27 = v26;
      }
      else {
        unsigned int v27 = 0x7FFFFFFF;
      }
      v23[2] = bswap32(v22);
      if (v25 >= 2147483650.0)
      {
        unsigned int v11 = 0x7FFFFFFF;
      }
      else if (v25 <= -2147483650.0)
      {
        unsigned int v11 = 0x80000000;
      }
      else
      {
        unsigned int v11 = (int)v25 - (v25 < 0.0);
      }
      float v28 = v14[6];
      double v9 = v24 * v6 + 0.0;
      v23[3] = bswap32(v27);
      double v12 = v28;
      v7 += 4;
      --v13;
    }
    while (v13);
    uint64_t v29 = (uint64_t)&result[v7 - 1];
    int v30 = &a2[v7 - 4];
    a3 &= 3u;
    double v31 = result[v7 + 3];
    double v32 = v12 * v6 + 0.0;
    if (v9 > -2147483650.0) {
      int v33 = (int)v9 - (v9 < 0.0);
    }
    else {
      int v33 = 0x80000000;
    }
    a2[v7] = bswap32(v11);
    if (v9 < 2147483650.0) {
      unsigned int v34 = v33;
    }
    else {
      unsigned int v34 = 0x7FFFFFFF;
    }
    double v35 = v31 * v6 + 0.0;
    if (v32 > -2147483650.0) {
      int v36 = (int)v32 - (v32 < 0.0);
    }
    else {
      int v36 = 0x80000000;
    }
    if (v32 < 2147483650.0) {
      unsigned int v37 = v36;
    }
    else {
      unsigned int v37 = 0x7FFFFFFF;
    }
    v30[5] = bswap32(v34);
    if (v35 >= 2147483650.0)
    {
      unsigned int v38 = 0x7FFFFFFF;
    }
    else if (v35 <= -2147483650.0)
    {
      unsigned int v38 = 0x80000000;
    }
    else
    {
      unsigned int v38 = (int)v35 - (v35 < 0.0);
    }
    v30[6] = bswap32(v37);
    v30[7] = bswap32(v38);
    double result = (float *)(v29 + 20);
    a2 = v30 + 8;
  }
  for (; a3; --a3)
  {
    double v39 = *result * v6 + 0.0;
    if (v39 >= 2147483650.0)
    {
      unsigned int v40 = 0x7FFFFFFF;
    }
    else if (v39 <= -2147483650.0)
    {
      unsigned int v40 = 0x80000000;
    }
    else
    {
      unsigned int v40 = (int)v39 - (v39 < 0.0);
    }
    *a2++ = bswap32(v40);
    ++result;
  }
  return result;
}

void NativeInt32ToFloat32Scaled_Portable(int *a1, float *a2, int a3, float a4)
{
}

float *Float32ToNativeInt32Scaled_Portable(float *a1, int *a2, unsigned int a3, float a4)
{
  return ConvertFloatToInt<PCMFloat32,PCMSInt32Native>(a1, a2, a3, 32, a4);
}

void StereoDeinterleaveInt824ToFloat32_Portable(const DSPComplex *a1, float *a2, float *a3, vDSP_Length __N)
{
  int v4 = __N;
  v7.realp = a2;
  v7.imagp = a3;
  vDSP_ctoz(a1, 2, &v7, 1, __N);
  ConvertIntToFloat<PCMSInt32Native,PCMFloat32>((int *)a2, a2, v4, 25, 0.0);
  ConvertIntToFloat<PCMSInt32Native,PCMFloat32>((int *)a3, a3, v4, 25, 0.0);
}

float *StereoInterleaveFloat32ToInt824_Portable(float *a1, float *a2, DSPComplex *a3, vDSP_Length __N)
{
  int v4 = __N;
  v7.realp = a1;
  v7.imagp = a2;
  vDSP_ztoc(&v7, 1, a3, 2, __N);
  return ConvertFloatToInt<PCMFloat32,PCMSInt32Native>((float *)a3, (int *)a3, 2 * v4, 25, 0.0);
}

float *Float32ToNativeInt24_Portable(float *result, uint64_t a2, unsigned int a3)
{
  if ((a2 & 3) != 0)
  {
    if (!a3) {
      return result;
    }
    goto LABEL_25;
  }
  if (a3 >= 4)
  {
    unsigned int v3 = a3 >> 2;
    do
    {
      double v4 = *result * 2147483650.0 + 128.0;
      double v5 = result[1] * 2147483650.0 + 128.0;
      double v6 = result[2] * 2147483650.0 + 128.0;
      double v7 = result[3] * 2147483650.0 + 128.0;
      int v8 = (int)v4 - (v4 < 0.0);
      if (v4 <= -2147483650.0) {
        int v8 = 0x80000000;
      }
      if (v4 >= 2147483520.0) {
        int v8 = 0x7FFFFFFF;
      }
      int v9 = (int)v5 - (v5 < 0.0);
      if (v5 <= -2147483650.0) {
        int v9 = 0x80000000;
      }
      if (v5 >= 2147483520.0) {
        int v9 = 0x7FFFFFFF;
      }
      int v10 = (int)v6 - (v6 < 0.0);
      if (v6 <= -2147483650.0) {
        int v10 = 0x80000000;
      }
      if (v6 >= 2147483520.0) {
        int v10 = 0x7FFFFFFF;
      }
      if (v7 >= 2147483520.0)
      {
        int v11 = 0x7FFFFFFF;
      }
      else if (v7 <= -2147483650.0)
      {
        int v11 = 0x80000000;
      }
      else
      {
        int v11 = (int)v7 - (v7 < 0.0);
      }
      unsigned int v12 = v9 >> 8;
      int v13 = v10 >> 8;
      *(_DWORD *)a2 = __PAIR64__(v12, v8) >> 8;
      *(_DWORD *)(a2 + 4) = (unsigned __int16)(v12 >> 8) | ((unsigned __int16)v13 << 16);
      *(_DWORD *)(a2 + 8) = v11 & 0xFFFFFF00 | BYTE2(v13);
      result += 4;
      a2 += 12;
      --v3;
    }
    while (v3);
  }
  for (a3 &= 3u; a3; --a3)
  {
LABEL_25:
    float v14 = *result++;
    double v15 = v14 * 2147483650.0 + 128.0;
    if (v15 >= 2147483520.0)
    {
      int v16 = 0x7FFFFFFF;
    }
    else if (v15 <= -2147483650.0)
    {
      int v16 = 0x80000000;
    }
    else
    {
      int v16 = (int)v15 - (v15 < 0.0);
    }
    int v17 = v16 >> 8;
    *(_WORD *)a2 = v17;
    *(unsigned char *)(a2 + 2) = BYTE2(v17);
    a2 += 3;
  }
  return result;
}

int *Float32ToSwapInt24_Portable(int *result, PCMSInt24Swap *this, unsigned int a3)
{
  unsigned int v3 = a3;
  double v4 = this;
  double v5 = (float *)result;
  if ((this & 3) != 0)
  {
    if (!a3) {
      return result;
    }
    goto LABEL_25;
  }
  if (a3 >= 4)
  {
    unsigned int v6 = a3 >> 2;
    do
    {
      double v7 = *v5 * 2147483650.0 + 128.0;
      double v8 = v5[1] * 2147483650.0 + 128.0;
      double v9 = v5[2] * 2147483650.0 + 128.0;
      double v10 = v5[3] * 2147483650.0 + 128.0;
      int v11 = (int)v7 - (v7 < 0.0);
      if (v7 <= -2147483650.0) {
        int v11 = 0x80000000;
      }
      if (v7 >= 2147483520.0) {
        int v11 = 0x7FFFFFFF;
      }
      int v12 = (int)v8 - (v8 < 0.0);
      if (v8 <= -2147483650.0) {
        int v12 = 0x80000000;
      }
      if (v8 >= 2147483520.0) {
        int v12 = 0x7FFFFFFF;
      }
      int v13 = (int)v9 - (v9 < 0.0);
      if (v9 <= -2147483650.0) {
        int v13 = 0x80000000;
      }
      if (v9 >= 2147483520.0) {
        int v13 = 0x7FFFFFFF;
      }
      if (v10 >= 2147483520.0)
      {
        int v14 = 0x7FFFFFFF;
      }
      else if (v10 <= -2147483650.0)
      {
        int v14 = 0x80000000;
      }
      else
      {
        int v14 = (int)v10 - (v10 < 0.0);
      }
      --v6;
      double result = PCMSInt24Swap::store4((int *)v4, (unsigned __int8 *)(v11 >> 8), v12 >> 8, v13 >> 8, v14 >> 8);
      v5 += 4;
      double v4 = (PCMSInt24Swap *)((char *)v4 + 12);
    }
    while (v6);
  }
  for (v3 &= 3u; v3; --v3)
  {
LABEL_25:
    float v15 = *v5++;
    double v16 = v15 * 2147483650.0 + 128.0;
    if (v16 >= 2147483520.0)
    {
      int v17 = 0x7FFFFFFF;
    }
    else if (v16 <= -2147483650.0)
    {
      int v17 = 0x80000000;
    }
    else
    {
      int v17 = (int)v16 - (v16 < 0.0);
    }
    int v18 = v17 >> 8;
    *(unsigned char *)double v4 = BYTE2(v18);
    *((unsigned char *)v4 + 1) = BYTE1(v18);
    *((unsigned char *)v4 + 2) = v18;
    double v4 = (PCMSInt24Swap *)((char *)v4 + 3);
  }
  return result;
}

int *PCMSInt24Swap::store4(int *this, unsigned __int8 *a2, int a3, int a4, int a5)
{
  *this = (unsigned __int16)a2 & 0xFF00 | (a2 << 16) & 0xFFFFFF | BYTE2(a2) | (BYTE2(a3) << 24);
  this[1] = a4 & 0xFF0000 | (unsigned __int16)(a3 << 8) | BYTE1(a3) | (BYTE1(a4) << 24);
  this[2] = bswap32(a5 & 0xFFFFFF) & 0xFFFFFF00 | a4;
  return this;
}

_DWORD *NativeInt24ToFloat32_Portable(_DWORD *result, __n128 *a2, unsigned int a3, double a4, __n128 a5, int8x8_t a6)
{
  if ((result & 3) != 0)
  {
    if (!a3) {
      return result;
    }
    goto LABEL_8;
  }
  if (a3 >= 4)
  {
    unsigned int v6 = a3 >> 2;
    v7.i64[0] = 0x3000000030000000;
    v7.i64[1] = 0x3000000030000000;
    do
    {
      unsigned int v8 = result[1];
      a5.n128_u32[0] = (v8 >> 8) & 0xFFFF00;
      a6.i32[0] = result[2] << 24;
      a6.i32[0] = vorr_s8((int8x8_t)a5.n128_u64[0], a6).u32[0];
      a6.i32[1] = result[2] & 0xFFFFFF00;
      v9.i32[0] = *result << 8;
      v9.i32[1] = HIWORD(*result) & 0xFF00 | (v8 << 16);
      v9.u64[1] = (unint64_t)a6;
      a5 = (__n128)vmulq_f32(vcvtq_f32_s32(v9), v7);
      *a2++ = a5;
      result += 3;
      --v6;
    }
    while (v6);
  }
  a3 &= 3u;
  if (a3)
  {
LABEL_8:
    double v10 = (unsigned __int8 *)result + 2;
    do
    {
      a2->n128_f32[0] = (float)((*v10 << 24) | (*(v10 - 1) << 16) | (*(v10 - 2) << 8)) * 4.6566e-10;
      a2 = (__n128 *)((char *)a2 + 4);
      v10 += 3;
      --a3;
    }
    while (a3);
  }
  return result;
}

unsigned __int8 *SwapInt24ToFloat32_Portable(unsigned __int8 *this, float32x4_t *a2, unsigned int a3, uint64_t a4, uint64_t a5, int *a6)
{
  unsigned int v6 = a3;
  unsigned int v8 = this;
  if ((this & 3) != 0)
  {
    if (!a3) {
      return this;
    }
    goto LABEL_8;
  }
  if (a3 >= 4)
  {
    unsigned int v9 = a3 >> 2;
    do
    {
      --v9;
      uint64_t v13 = 0;
      *(void *)int v14 = 0;
      this = (unsigned __int8 *)PCMSInt24Swap::load4(v8, &v14[4], (int *)v14, (unsigned int *)&v13 + 1, (unsigned int *)&v13, a6);
      v10.i64[0] = __PAIR64__(*(unsigned int *)v14, *(unsigned int *)&v14[4]);
      v10.i64[1] = __PAIR64__(v13, HIDWORD(v13));
      v11.i64[0] = 0x3000000030000000;
      v11.i64[1] = 0x3000000030000000;
      *a2++ = vmulq_f32(vcvtq_f32_s32(v10), v11);
      v8 += 12;
    }
    while (v9);
  }
  for (v6 &= 3u; v6; --v6)
  {
LABEL_8:
    int v12 = (*v8 << 24) | (v8[1] << 16) | (v8[2] << 8);
    v8 += 3;
    a2->f32[0] = (float)v12 * 4.6566e-10;
    a2 = (float32x4_t *)((char *)a2 + 4);
  }
  return this;
}

_DWORD *PCMSInt24Swap::load4(_DWORD *this, unsigned __int8 *a2, int *a3, unsigned int *a4, unsigned int *a5, int *a6)
{
  *(_DWORD *)a2 = *this;
  *a3 = this[1];
  unsigned int v6 = this[2];
  *a4 = v6;
  *a5 = v6 & 0xFF0000 | (BYTE1(v6) << 24) | (HIBYTE(v6) << 8);
  *a4 = (*a3 >> 8) & 0xFF0000 | (BYTE2(*a3) << 24) | (*a4 << 8);
  *a3 = *a3 & 0xFF00 | (a2[3] << 24) | (*a3 << 16);
  *(_DWORD *)a2 = bswap32(*(_DWORD *)a2 & 0xFFFFFF);
  return this;
}

uint64_t NativeInt24ToNativeInt16_Portable(uint64_t result, int *a2, unsigned int a3)
{
  if (((a2 | result) & 3) == 0)
  {
    if (a3 < 4)
    {
LABEL_31:
      a3 &= 3u;
      if (!a3) {
        return result;
      }
      goto LABEL_32;
    }
    unsigned int v3 = a3 >> 2;
    while (1)
    {
      int v4 = ((int)(*(_DWORD *)result << 8) >> 15) + 1;
      if ((int)(*(_DWORD *)result << 8) < -32768)
      {
        if (v4 < 0xFFFF0000)
        {
          LOWORD(v5) = 0x8000;
          goto LABEL_12;
        }
      }
      else if (HIWORD(v4))
      {
        LOWORD(v5) = 0x7FFF;
        goto LABEL_12;
      }
      int v5 = v4 >> 1;
LABEL_12:
      int v6 = *(void *)result >> 16;
      int v7 = (v6 >> 15) + 1;
      if (v6 < -32768)
      {
        if (v7 < 0xFFFF0000)
        {
          LOWORD(v8) = 0x8000;
          goto LABEL_18;
        }
      }
      else if (HIWORD(v7))
      {
        LOWORD(v8) = 0x7FFF;
        goto LABEL_18;
      }
      int v8 = v7 >> 1;
LABEL_18:
      int v9 = *(_DWORD *)(result + 8);
      int v10 = *(void *)(result + 4) >> 8;
      int v11 = (v10 >> 15) + 1;
      if (v10 < -32768)
      {
        if (v11 < 0xFFFF0000)
        {
          LOWORD(v12) = 0x8000;
          goto LABEL_24;
        }
      }
      else if (HIWORD(v11))
      {
        LOWORD(v12) = 0x7FFF;
        goto LABEL_24;
      }
      int v12 = v11 >> 1;
LABEL_24:
      int v13 = (v9 >> 15) + 1;
      if (v9 < -32768)
      {
        if (v13 >= 0xFFFF0000)
        {
LABEL_29:
          int v14 = v13 >> 1;
          goto LABEL_30;
        }
        LOWORD(v14) = 0x8000;
      }
      else
      {
        if (!HIWORD(v13)) {
          goto LABEL_29;
        }
        LOWORD(v14) = 0x7FFF;
      }
LABEL_30:
      *a2 = (unsigned __int16)v5 | ((unsigned __int16)v8 << 16);
      a2[1] = (unsigned __int16)v12 | ((unsigned __int16)v14 << 16);
      a2 += 2;
      result += 12;
      if (!--v3) {
        goto LABEL_31;
      }
    }
  }
  if (a3)
  {
LABEL_32:
    float v15 = (unsigned __int8 *)(result + 2);
    do
    {
      int v16 = (*v15 << 24) | (*(v15 - 1) << 16) | (*(v15 - 2) << 8);
      int v17 = (v16 >> 15) + 1;
      if (v16 < -32768)
      {
        if (v17 >= 0xFFFF0000)
        {
LABEL_38:
          int v18 = v17 >> 1;
          goto LABEL_39;
        }
        LOWORD(v18) = 0x8000;
      }
      else
      {
        if (!HIWORD(v17)) {
          goto LABEL_38;
        }
        LOWORD(v18) = 0x7FFF;
      }
LABEL_39:
      *(_WORD *)a2 = v18;
      a2 = (int *)((char *)a2 + 2);
      v15 += 3;
      --a3;
    }
    while (a3);
  }
  return result;
}

unsigned __int8 *SwapInt24ToNativeInt16_Portable(unsigned __int8 *this, int *a2, unsigned int a3, uint64_t a4, uint64_t a5, int *a6)
{
  unsigned int v6 = a3;
  int v7 = a2;
  int v8 = this;
  if (((a2 | this) & 3) == 0)
  {
    if (a3 >= 4)
    {
      for (unsigned int i = a3 >> 2; i; --i)
      {
        *(void *)int v21 = 0;
        *(void *)unsigned int v22 = 0;
        this = (unsigned __int8 *)PCMSInt24Swap::load4(v8, &v22[4], (int *)v22, (unsigned int *)&v21[1], (unsigned int *)v21, a6);
        int v13 = (*(int *)&v22[4] >> 15) + 1;
        if (*(int *)&v22[4] < -32768)
        {
          if (v13 < 0xFFFF0000)
          {
            LOWORD(v14) = 0x8000;
            goto LABEL_19;
          }
        }
        else if (HIWORD(v13))
        {
          LOWORD(v14) = 0x7FFF;
          goto LABEL_19;
        }
        int v14 = v13 >> 1;
LABEL_19:
        int v15 = (*(int *)v22 >> 15) + 1;
        if (*(int *)v22 < -32768)
        {
          if (v15 < 0xFFFF0000)
          {
            LOWORD(v16) = 0x8000;
            goto LABEL_25;
          }
        }
        else if (HIWORD(v15))
        {
          LOWORD(v16) = 0x7FFF;
          goto LABEL_25;
        }
        int v16 = v15 >> 1;
LABEL_25:
        int v17 = (v21[1] >> 15) + 1;
        if (v21[1] < -32768)
        {
          if (v17 < 0xFFFF0000)
          {
            LOWORD(v18) = 0x8000;
            goto LABEL_31;
          }
        }
        else if (HIWORD(v17))
        {
          LOWORD(v18) = 0x7FFF;
          goto LABEL_31;
        }
        int v18 = v17 >> 1;
LABEL_31:
        int v19 = (v21[0] >> 15) + 1;
        if (v21[0] < -32768)
        {
          if (v19 >= 0xFFFF0000)
          {
LABEL_36:
            int v20 = v19 >> 1;
            goto LABEL_37;
          }
          LOWORD(v20) = 0x8000;
        }
        else
        {
          if (!HIWORD(v19)) {
            goto LABEL_36;
          }
          LOWORD(v20) = 0x7FFF;
        }
LABEL_37:
        *int v7 = (unsigned __int16)v14 | ((unsigned __int16)v16 << 16);
        v7[1] = (unsigned __int16)v18 | ((unsigned __int16)v20 << 16);
        v7 += 2;
        v8 += 12;
      }
    }
    v6 &= 3u;
    if (!v6) {
      return this;
    }
    while (1)
    {
LABEL_3:
      int v9 = (*v8 << 24) | (v8[1] << 16) | (v8[2] << 8);
      int v10 = (v9 >> 15) + 1;
      if (v9 < -32768)
      {
        if (v10 >= 0xFFFF0000)
        {
LABEL_8:
          int v11 = v10 >> 1;
          goto LABEL_9;
        }
        LOWORD(v11) = 0x8000;
      }
      else
      {
        if (!HIWORD(v10)) {
          goto LABEL_8;
        }
        LOWORD(v11) = 0x7FFF;
      }
LABEL_9:
      *(_WORD *)int v7 = v11;
      int v7 = (int *)((char *)v7 + 2);
      v8 += 3;
      if (!--v6) {
        return this;
      }
    }
  }
  if (a3) {
    goto LABEL_3;
  }
  return this;
}

unsigned int *NativeInt16ToNativeInt24_Portable(unsigned int *result, uint64_t a2, unsigned int a3)
{
  if (((a2 | result) & 3) != 0)
  {
    if (!a3) {
      return result;
    }
    goto LABEL_3;
  }
  if (a3 >= 4)
  {
    unsigned int v4 = a3 >> 2;
    do
    {
      unsigned int v5 = *result;
      unsigned int v6 = result[1];
      result += 2;
      *(_DWORD *)a2 = (unsigned __int16)v5 << 8;
      *(_DWORD *)(a2 + 4) = HIWORD(v5) | (v6 << 24);
      *(_DWORD *)(a2 + 8) = v6 & 0xFFFF0000 | BYTE1(v6);
      a2 += 12;
      --v4;
    }
    while (v4);
  }
  for (a3 &= 3u; a3; --a3)
  {
LABEL_3:
    __int16 v3 = *(_WORD *)result;
    double result = (unsigned int *)((char *)result + 2);
    *(unsigned char *)a2 = 0;
    *(_WORD *)(a2 + 1) = v3;
    a2 += 3;
  }
  return result;
}

int *NativeInt16ToSwapInt24_Portable(int *result, PCMSInt24Swap *this, unsigned int a3)
{
  unsigned int v3 = a3;
  unsigned int v4 = this;
  unsigned int v5 = result;
  if (((this | result) & 3) != 0)
  {
    if (!a3) {
      return result;
    }
    goto LABEL_3;
  }
  if (a3 >= 4)
  {
    unsigned int v7 = a3 >> 2;
    do
    {
      --v7;
      int v8 = *v5;
      int v9 = v5[1];
      v5 += 2;
      double result = PCMSInt24Swap::store4((int *)v4, (unsigned __int8 *)((__int16)v8 << 8), (v8 >> 8) & 0xFFFFFF00, (__int16)v9 << 8, (v9 >> 8) & 0xFFFFFF00);
      unsigned int v4 = (PCMSInt24Swap *)((char *)v4 + 12);
    }
    while (v7);
  }
  for (v3 &= 3u; v3; --v3)
  {
LABEL_3:
    __int16 v6 = *(_WORD *)v5;
    unsigned int v5 = (int *)((char *)v5 + 2);
    *(unsigned char *)unsigned int v4 = HIBYTE(v6);
    *((unsigned char *)v4 + 1) = v6;
    *((unsigned char *)v4 + 2) = 0;
    unsigned int v4 = (PCMSInt24Swap *)((char *)v4 + 3);
  }
  return result;
}

uint64_t NativeInt16ToUInt8_Portable(uint64_t result, unsigned char *a2, int a3)
{
  for (; a3; --a3)
  {
    char v3 = *(unsigned char *)(result + 1);
    result += 2;
    *a2++ = v3 ^ 0x80;
  }
  return result;
}

uint64_t NativeInt16ToSInt8_Portable(uint64_t result, unsigned char *a2, int a3)
{
  for (; a3; --a3)
  {
    char v3 = *(unsigned char *)(result + 1);
    result += 2;
    *a2++ = v3;
  }
  return result;
}

float *Float32ToUInt8(float *result, unsigned char *a2, unsigned int a3)
{
  if (a3 >= 8)
  {
    double v3 = *result * 2147483650.0 + 8388608.0;
    float v4 = result[2];
    double v5 = result[1] * 2147483650.0 + 8388608.0;
    int v6 = (int)v3 - (v3 < 0.0);
    if (v3 <= -2147483650.0) {
      HIBYTE(v6) = 0x80;
    }
    if (v3 < 2139095040.0) {
      HIBYTE(v7) = HIBYTE(v6);
    }
    else {
      HIBYTE(v7) = 127;
    }
    int v8 = result + 3;
    double v9 = v4;
    unsigned int v10 = (a3 - 4) >> 2;
    do
    {
      int v11 = v8;
      int v12 = a2;
      double v13 = *v8;
      double v14 = v9 * 2147483650.0 + 8388608.0;
      int v15 = (int)v5 - (v5 < 0.0);
      if (v5 <= -2147483650.0) {
        HIBYTE(v15) = 0x80;
      }
      if (v5 >= 2139095040.0) {
        HIBYTE(v15) = 127;
      }
      *a2 = HIBYTE(v7) ^ 0x80;
      double v16 = v11[1];
      double v17 = v13 * 2147483650.0 + 8388608.0;
      int v18 = (int)v14 - (v14 < 0.0);
      if (v14 <= -2147483650.0) {
        HIBYTE(v18) = 0x80;
      }
      if (v14 >= 2139095040.0) {
        HIBYTE(v18) = 127;
      }
      a2[1] = HIBYTE(v15) ^ 0x80;
      float v19 = v11[2];
      double v20 = v16 * 2147483650.0 + 8388608.0;
      int v21 = (int)v17 - (v17 < 0.0);
      if (v17 <= -2147483650.0) {
        HIBYTE(v21) = 0x80;
      }
      if (v17 >= 2139095040.0) {
        HIBYTE(v21) = 127;
      }
      a2[2] = HIBYTE(v18) ^ 0x80;
      if (v20 >= 2139095040.0)
      {
        HIBYTE(v7) = 127;
      }
      else if (v20 <= -2147483650.0)
      {
        HIBYTE(v7) = 0x80;
      }
      else
      {
        int v7 = (int)v20 - (v20 < 0.0);
      }
      float v22 = v11[3];
      double v5 = v19 * 2147483650.0 + 8388608.0;
      a2[3] = HIBYTE(v21) ^ 0x80;
      int v8 = v11 + 4;
      a2 += 4;
      double v9 = v22;
      --v10;
    }
    while (v10);
    a3 &= 3u;
    double v23 = *v8;
    double v24 = v9 * 2147483650.0 + 8388608.0;
    unsigned int v25 = (((int)v5 - (v5 < 0.0)) >> 24) ^ 0xFFFFFF80;
    if (v5 <= -2147483650.0) {
      LOBYTE(v25) = 0;
    }
    if (v5 >= 2139095040.0) {
      LOBYTE(v25) = -1;
    }
    *a2 = HIBYTE(v7) ^ 0x80;
    double v26 = v23 * 2147483650.0 + 8388608.0;
    unsigned int v27 = (((int)v24 - (v24 < 0.0)) >> 24) ^ 0xFFFFFF80;
    if (v24 <= -2147483650.0) {
      LOBYTE(v27) = 0;
    }
    if (v24 < 2139095040.0) {
      char v28 = v27;
    }
    else {
      char v28 = -1;
    }
    v12[5] = v25;
    if (v26 >= 2139095040.0)
    {
      LOBYTE(v29) = -1;
    }
    else if (v26 <= -2147483650.0)
    {
      LOBYTE(v29) = 0;
    }
    else
    {
      unsigned int v29 = (((int)v26 - (v26 < 0.0)) >> 24) ^ 0xFFFFFF80;
    }
    v12[6] = v28;
    v12[7] = v29;
    double result = v11 + 5;
    a2 = v12 + 8;
  }
  for (; a3; --a3)
  {
    double v30 = *result * 2147483650.0 + 8388608.0;
    if (v30 >= 2139095040.0)
    {
      HIBYTE(v31) = 127;
    }
    else if (v30 <= -2147483650.0)
    {
      HIBYTE(v31) = 0x80;
    }
    else
    {
      int v31 = (int)v30 - (v30 < 0.0);
    }
    *a2++ = HIBYTE(v31) ^ 0x80;
    ++result;
  }
  return result;
}

float *Float32ToSInt8(float *result, unsigned char *a2, unsigned int a3)
{
  if (a3 >= 8)
  {
    double v3 = *result * 2147483650.0 + 8388608.0;
    float v4 = result[2];
    double v5 = result[1] * 2147483650.0 + 8388608.0;
    int v6 = (int)v3 - (v3 < 0.0);
    if (v3 <= -2147483650.0) {
      HIBYTE(v6) = 0x80;
    }
    if (v3 < 2139095040.0) {
      HIBYTE(v7) = HIBYTE(v6);
    }
    else {
      HIBYTE(v7) = 127;
    }
    int v8 = result + 3;
    double v9 = v4;
    unsigned int v10 = (a3 - 4) >> 2;
    do
    {
      int v11 = v8;
      int v12 = a2;
      double v13 = *v8;
      double v14 = v9 * 2147483650.0 + 8388608.0;
      int v15 = (int)v5 - (v5 < 0.0);
      if (v5 <= -2147483650.0) {
        HIBYTE(v15) = 0x80;
      }
      if (v5 >= 2139095040.0) {
        HIBYTE(v15) = 127;
      }
      *a2 = HIBYTE(v7);
      double v16 = v11[1];
      double v17 = v13 * 2147483650.0 + 8388608.0;
      int v18 = (int)v14 - (v14 < 0.0);
      if (v14 <= -2147483650.0) {
        HIBYTE(v18) = 0x80;
      }
      if (v14 >= 2139095040.0) {
        HIBYTE(v18) = 127;
      }
      a2[1] = HIBYTE(v15);
      float v19 = v11[2];
      double v20 = v16 * 2147483650.0 + 8388608.0;
      int v21 = (int)v17 - (v17 < 0.0);
      if (v17 <= -2147483650.0) {
        HIBYTE(v21) = 0x80;
      }
      if (v17 >= 2139095040.0) {
        HIBYTE(v21) = 127;
      }
      a2[2] = HIBYTE(v18);
      if (v20 >= 2139095040.0)
      {
        HIBYTE(v7) = 127;
      }
      else if (v20 <= -2147483650.0)
      {
        HIBYTE(v7) = 0x80;
      }
      else
      {
        int v7 = (int)v20 - (v20 < 0.0);
      }
      float v22 = v11[3];
      double v5 = v19 * 2147483650.0 + 8388608.0;
      a2[3] = HIBYTE(v21);
      int v8 = v11 + 4;
      a2 += 4;
      double v9 = v22;
      --v10;
    }
    while (v10);
    a3 &= 3u;
    double v23 = *v8;
    double v24 = v9 * 2147483650.0 + 8388608.0;
    if (v5 > -2147483650.0) {
      char v25 = ((int)v5 - (v5 < 0.0)) >> 24;
    }
    else {
      char v25 = 0x80;
    }
    if (v5 >= 2139095040.0) {
      char v25 = 127;
    }
    *a2 = HIBYTE(v7);
    double v26 = v23 * 2147483650.0 + 8388608.0;
    if (v24 > -2147483650.0) {
      char v27 = ((int)v24 - (v24 < 0.0)) >> 24;
    }
    else {
      char v27 = 0x80;
    }
    if (v24 < 2139095040.0) {
      char v28 = v27;
    }
    else {
      char v28 = 127;
    }
    v12[5] = v25;
    if (v26 >= 2139095040.0)
    {
      LOBYTE(v29) = 127;
    }
    else if (v26 <= -2147483650.0)
    {
      LOBYTE(v29) = 0x80;
    }
    else
    {
      unsigned int v29 = ((int)v26 - (v26 < 0.0)) >> 24;
    }
    v12[6] = v28;
    v12[7] = v29;
    double result = v11 + 5;
    a2 = v12 + 8;
  }
  for (; a3; --a3)
  {
    double v30 = *result * 2147483650.0 + 8388608.0;
    if (v30 >= 2139095040.0)
    {
      HIBYTE(v31) = 127;
    }
    else if (v30 <= -2147483650.0)
    {
      HIBYTE(v31) = 0x80;
    }
    else
    {
      int v31 = (int)v30 - (v30 < 0.0);
    }
    *a2++ = HIBYTE(v31);
    ++result;
  }
  return result;
}

void UInt8ToFloat32(char *a1, float *a2, int a3)
{
  float v6 = scalbnf(1.0, -7);
  unsigned int v7 = a3 - 4;
  if (a3 >= 4)
  {
    char v8 = a1[1];
    char v9 = a1[2];
    char v10 = a1[3];
    *a2 = v6 * (float)(char)(*a1 ^ 0x80);
    int v11 = a2 + 1;
    a3 &= 3u;
    int v12 = (char)(v9 ^ 0x80);
    char v13 = v10 ^ 0x80;
    float v14 = v6 * (float)(char)(v8 ^ 0x80);
    a1 += 4;
    float v15 = (float)v12;
    if (v7 >= 4)
    {
      unsigned int v16 = v7 >> 2;
      do
      {
        int v17 = (char)(*a1 ^ 0x80);
        float v18 = (float)v13;
        *int v11 = v14;
        char v19 = a1[1];
        float v20 = (float)v17;
        v11[1] = v6 * v15;
        LOBYTE(v17) = a1[2];
        _DWORD v11[2] = v6 * v18;
        char v21 = a1[3];
        void v11[3] = v6 * v20;
        v11 += 4;
        float v22 = (float)(char)(v19 ^ 0x80);
        char v13 = v21 ^ 0x80;
        float v14 = v6 * v22;
        a1 += 4;
        float v15 = (float)(char)(v17 ^ 0x80);
        --v16;
      }
      while (v16);
    }
    *int v11 = v14;
    v11[1] = v6 * v15;
    _DWORD v11[2] = v6 * (float)v13;
    a2 = v11 + 3;
  }
  for (; a3; --a3)
  {
    char v23 = *a1++;
    *a2++ = v6 * (float)(char)(v23 ^ 0x80);
  }
}

void SInt8ToFloat32(char *a1, float *a2, int a3)
{
  float v6 = scalbnf(1.0, -7);
  unsigned int v7 = a3 - 4;
  if (a3 >= 4)
  {
    int v8 = a1[1];
    int v9 = a1[2];
    char v10 = a1[3];
    *a2 = v6 * (float)*a1;
    int v11 = a2 + 1;
    a3 &= 3u;
    float v12 = v6 * (float)v8;
    a1 += 4;
    float v13 = (float)v9;
    if (v7 >= 4)
    {
      unsigned int v14 = v7 >> 2;
      do
      {
        int v15 = *a1;
        *int v11 = v12;
        int v16 = a1[1];
        float v17 = (float)v15;
        v11[1] = v6 * v13;
        int v18 = a1[2];
        _DWORD v11[2] = v6 * (float)v10;
        char v10 = a1[3];
        void v11[3] = v6 * v17;
        v11 += 4;
        float v12 = v6 * (float)v16;
        a1 += 4;
        float v13 = (float)v18;
        --v14;
      }
      while (v14);
    }
    *int v11 = v12;
    v11[1] = v6 * v13;
    _DWORD v11[2] = v6 * (float)v10;
    a2 = v11 + 3;
  }
  for (; a3; --a3)
  {
    int v19 = *a1++;
    *a2++ = v6 * (float)v19;
  }
}

unsigned __int8 *UInt8ToNativeInt16_Portable(unsigned __int8 *result, uint64_t a2, unsigned int a3)
{
  if (((a2 | result) & 3) != 0)
  {
    for (; a3; --a3)
    {
      unsigned __int16 v3 = *result++;
      *(_WORD *)a2 = (v3 ^ 0x80) << 8;
      a2 += 2;
    }
  }
  else
  {
    if (a3 >= 4)
    {
      unsigned int v4 = a3 >> 2;
      do
      {
        int v5 = *(_DWORD *)result;
        result += 4;
        *(_DWORD *)a2 = ((v5 ^ 0x80808080) << 16) & 0xFF000000 | ((v5 ^ 0x80) << 8);
        *(_DWORD *)(a2 + 4) = ((v5 ^ 0x80808080) >> 8) & 0xFF00 | (v5 ^ 0x80808080) & 0xFF000000;
        a2 += 8;
        --v4;
      }
      while (v4);
    }
    int v6 = a3 & 3;
    if ((a3 & 3) != 0)
    {
      do
      {
        unsigned __int16 v7 = *result++;
        *(_WORD *)a2 = (v7 ^ 0x80) << 8;
        a2 += 2;
        --v6;
      }
      while (v6);
    }
  }
  return result;
}

unsigned __int8 *SInt8ToNativeInt16_Portable(unsigned __int8 *result, uint64_t a2, unsigned int a3)
{
  if (((a2 | result) & 3) != 0)
  {
    for (; a3; --a3)
    {
      __int16 v3 = *result++;
      *(_WORD *)a2 = v3 << 8;
      a2 += 2;
    }
  }
  else
  {
    if (a3 >= 4)
    {
      unsigned int v4 = a3 >> 2;
      do
      {
        unsigned int v5 = *(_DWORD *)result;
        result += 4;
        *(_DWORD *)a2 = (v5 << 16) & 0xFF000000 | (v5 << 8);
        *(_DWORD *)(a2 + 4) = (v5 >> 8) & 0xFF00 | v5 & 0xFF000000;
        a2 += 8;
        --v4;
      }
      while (v4);
    }
    int v6 = a3 & 3;
    if ((a3 & 3) != 0)
    {
      do
      {
        __int16 v7 = *result++;
        *(_WORD *)a2 = v7 << 8;
        a2 += 2;
        --v6;
      }
      while (v6);
    }
  }
  return result;
}

unsigned int *SwapPCM64_Portable(unsigned int *result, _DWORD *a2, unsigned int a3)
{
  if (a3 >= 2)
  {
    unsigned int v3 = a3 >> 1;
    do
    {
      unsigned int v4 = *result;
      unsigned int v5 = result[2];
      unsigned int v6 = result[3];
      *a2 = bswap32(result[1]);
      a2[1] = bswap32(v4);
      a2[2] = bswap32(v6);
      a2[3] = bswap32(v5);
      result += 4;
      a2 += 4;
      --v3;
    }
    while (v3);
  }
  if (a3)
  {
    unsigned int v7 = *result;
    *a2 = bswap32(result[1]);
    a2[1] = bswap32(v7);
  }
  return result;
}

unsigned int *SwapPCM32_Portable(unsigned int *result, _DWORD *a2, unsigned int a3)
{
  if (a3 >= 4)
  {
    unsigned int v3 = a3 >> 2;
    do
    {
      unsigned int v4 = result[1];
      unsigned int v5 = result[2];
      unsigned int v6 = result[3];
      *a2 = bswap32(*result);
      a2[1] = bswap32(v4);
      a2[2] = bswap32(v5);
      a2[3] = bswap32(v6);
      result += 4;
      a2 += 4;
      --v3;
    }
    while (v3);
  }
  int v7 = a3 & 3;
  if ((a3 & 3) != 0)
  {
    do
    {
      unsigned int v8 = *result++;
      *a2++ = bswap32(v8);
      --v7;
    }
    while (v7);
  }
  return result;
}

int *SwapPCM24_Portable(int *result, PCMSInt24Swap *this, unsigned int a3)
{
  unsigned int v3 = a3;
  unsigned int v4 = this;
  uint64_t v5 = (uint64_t)result;
  if (((this | result) & 3) != 0)
  {
    if (!a3) {
      return result;
    }
    goto LABEL_8;
  }
  if (a3 >= 4)
  {
    unsigned int v6 = a3 >> 2;
    do
    {
      --v6;
      double result = PCMSInt24Swap::store4((int *)v4, (unsigned __int8 *)((int)(*(_DWORD *)v5 << 8) >> 8), (int)(*(void *)v5 >> 16) >> 8, (int)(*(void *)(v5 + 4) >> 8) >> 8, *(int *)(v5 + 8) >> 8);
      v5 += 12;
      unsigned int v4 = (PCMSInt24Swap *)((char *)v4 + 12);
    }
    while (v6);
  }
  v3 &= 3u;
  if (v3)
  {
LABEL_8:
    int v7 = (unsigned __int8 *)(v5 + 2);
    do
    {
      int v8 = ((*v7 << 24) | (*(v7 - 1) << 16) | (*(v7 - 2) << 8)) >> 8;
      *(unsigned char *)unsigned int v4 = BYTE2(v8);
      *((unsigned char *)v4 + 1) = BYTE1(v8);
      *((unsigned char *)v4 + 2) = v8;
      unsigned int v4 = (PCMSInt24Swap *)((char *)v4 + 3);
      v7 += 3;
      --v3;
    }
    while (v3);
  }
  return result;
}

unsigned __int16 *SwapPCM16_Portable(unsigned __int16 *result, _WORD *a2, unsigned int a3)
{
  if (a3 >= 4)
  {
    unsigned int v3 = a3 >> 2;
    do
    {
      unsigned int v4 = result[1];
      unsigned int v5 = result[2];
      unsigned int v6 = result[3];
      *a2 = bswap32(*result) >> 16;
      a2[1] = bswap32(v4) >> 16;
      a2[2] = bswap32(v5) >> 16;
      a2[3] = bswap32(v6) >> 16;
      result += 4;
      a2 += 4;
      --v3;
    }
    while (v3);
  }
  int v7 = a3 & 3;
  if ((a3 & 3) != 0)
  {
    do
    {
      unsigned int v8 = *result++;
      *a2++ = bswap32(v8) >> 16;
      --v7;
    }
    while (v7);
  }
  return result;
}

float32x2_t *StereoInterleave32_Portable(float32x2_t *result, float32x2_t *a2, uint64_t a3, unsigned int a4)
{
  if (a4 >= 2)
  {
    unsigned int v4 = a4 >> 1;
    do
    {
      float32x2_t v5 = *result++;
      v7.val[0] = v5;
      float32x2_t v6 = *a2++;
      v7.val[1] = v6;
      vst2_f32((float *)a3, v7);
      a3 += 16;
      --v4;
    }
    while (v4);
  }
  if (a4)
  {
    *(_DWORD *)a3 = result->i32[0];
    *(_DWORD *)(a3 + 4) = a2->i32[0];
  }
  return result;
}

__int16 *UpmixMonoToStereoInterleaved16_Portable(__int16 *result, _WORD *a2, unsigned int a3)
{
  if (a3 >= 2)
  {
    unsigned int v3 = a3 >> 1;
    do
    {
      __int16 v4 = *result;
      __int16 v5 = result[1];
      result += 2;
      *a2 = v4;
      a2[1] = v4;
      a2[2] = v5;
      a2[3] = v5;
      a2 += 4;
      --v3;
    }
    while (v3);
  }
  if (a3)
  {
    __int16 v6 = *result;
    a2[1] = *result;
    *a2 = v6;
  }
  return result;
}

float32x2_t *UpmixMonoToStereoInterleaved32_Portable(float32x2_t *result, uint64_t a2, unsigned int a3)
{
  if (a3 >= 2)
  {
    unsigned int v3 = a3 >> 1;
    do
    {
      float32x2_t v4 = *result++;
      v6.val[0] = v4;
      v6.val[1] = v4;
      vst2_f32((float *)a2, v6);
      a2 += 16;
      --v3;
    }
    while (v3);
  }
  if (a3)
  {
    __int32 v5 = result->i32[0];
    *(_DWORD *)a2 = result->i32[0];
    *(_DWORD *)(a2 + 4) = v5;
  }
  return result;
}

__int16 *DownmixStereoInterleavedInt16ToMono_Portable(__int16 *result, _WORD *a2, unsigned int a3)
{
  if (a3 < 2)
  {
    if (a3) {
      goto LABEL_19;
    }
    return result;
  }
  unsigned int v3 = a3 >> 1;
  do
  {
    float32x2_t v4 = result;
    unsigned int v5 = 23170 * (result[1] + *result);
    if (result[1] + *result < 0)
    {
      if (v5 >> 30 != 3)
      {
        LOWORD(v6) = 0x8000;
        goto LABEL_11;
      }
    }
    else if (v5 >> 30)
    {
      LOWORD(v6) = 0x7FFF;
      goto LABEL_11;
    }
    unsigned int v6 = v5 >> 15;
LABEL_11:
    int v7 = result[2];
    int v8 = result[3];
    *a2 = v6;
    unsigned int v9 = 23170 * (v8 + v7);
    if (v8 + v7 < 0)
    {
      if (v9 >> 30 != 3)
      {
        LOWORD(v10) = 0x8000;
        goto LABEL_17;
      }
    }
    else if (v9 >> 30)
    {
      LOWORD(v10) = 0x7FFF;
      goto LABEL_17;
    }
    unsigned int v10 = v9 >> 15;
LABEL_17:
    a2[1] = v10;
    a2 += 2;
    result += 4;
    --v3;
  }
  while (v3);
  double result = v4 + 4;
  if (a3)
  {
LABEL_19:
    unsigned int v11 = 23170 * (result[1] + *result);
    if (result[1] + *result < 0)
    {
      if (v11 >> 30 == 3) {
        goto LABEL_24;
      }
      LOWORD(v12) = 0x8000;
    }
    else
    {
      if (v11 >> 30)
      {
        LOWORD(v12) = 0x7FFF;
        goto LABEL_25;
      }
LABEL_24:
      unsigned int v12 = v11 >> 15;
    }
LABEL_25:
    *a2 = v12;
  }
  return result;
}

int *DownmixStereoInterleavedInt32ToMono_Portable(int *result, _DWORD *a2, unsigned int a3)
{
  if (a3 < 2)
  {
    if (a3) {
      goto LABEL_19;
    }
    return result;
  }
  unsigned int v3 = a3 >> 1;
  do
  {
    float32x2_t v4 = result;
    unint64_t v5 = 1518500250 * (result[1] + (uint64_t)*result);
    if (result[1] + (uint64_t)*result < 0)
    {
      if (v5 >> 62 != 3)
      {
        LODWORD(v6) = 0x80000000;
        goto LABEL_11;
      }
    }
    else if (v5 >> 62)
    {
      LODWORD(v6) = 0x7FFFFFFF;
      goto LABEL_11;
    }
    unint64_t v6 = v5 >> 31;
LABEL_11:
    uint64_t v7 = result[2];
    uint64_t v8 = result[3];
    *a2 = v6;
    unint64_t v9 = 1518500250 * (v8 + v7);
    if (v8 + v7 < 0)
    {
      if (v9 >> 62 != 3)
      {
        LODWORD(v10) = 0x80000000;
        goto LABEL_17;
      }
    }
    else if (v9 >> 62)
    {
      LODWORD(v10) = 0x7FFFFFFF;
      goto LABEL_17;
    }
    unint64_t v10 = v9 >> 31;
LABEL_17:
    a2[1] = v10;
    a2 += 2;
    result += 4;
    --v3;
  }
  while (v3);
  double result = v4 + 4;
  if (a3)
  {
LABEL_19:
    unint64_t v11 = 1518500250 * (result[1] + (uint64_t)*result);
    if (result[1] + (uint64_t)*result < 0)
    {
      if (v11 >> 62 == 3) {
        goto LABEL_24;
      }
      LODWORD(v12) = 0x80000000;
    }
    else
    {
      if (v11 >> 62)
      {
        LODWORD(v12) = 0x7FFFFFFF;
        goto LABEL_25;
      }
LABEL_24:
      unint64_t v12 = v11 >> 31;
    }
LABEL_25:
    *a2 = v12;
  }
  return result;
}

float DownmixStereoInterleavedFloat32ToMono_Portable(uint64_t a1, float32x2_t *a2, unsigned int a3, double a4)
{
  if (a3 < 2)
  {
    if ((a3 & 1) == 0) {
      return *(float *)&a4;
    }
    goto LABEL_7;
  }
  unsigned int v4 = a3 >> 1;
  a4 = COERCE_DOUBLE(vdup_n_s32(0x3F3504F3u));
  do
  {
    v5.i32[0] = *(_DWORD *)a1;
    uint64_t v6 = a1 + 16;
    v5.i32[1] = *(_DWORD *)(a1 + 12);
    *a2++ = vmul_f32(vadd_f32(*(float32x2_t *)(a1 + 4), v5), *(float32x2_t *)&a4);
    a1 += 16;
    --v4;
  }
  while (v4);
  a1 = v6;
  if (a3)
  {
LABEL_7:
    *(float *)&a4 = (float)(*(float *)a1 + *(float *)(a1 + 4)) * 0.70711;
    a2->i32[0] = LODWORD(a4);
  }
  return *(float *)&a4;
}

unsigned __int16 *NativeInt16ToNativeInt32_Portable(unsigned __int16 *result, __n128 *a2, unsigned int a3, int a4, double a5, double a6, int32x4_t a7)
{
  unsigned int v7 = 16 - a4;
  if (((a2 | result) & 3) != 0)
  {
    if (!a3) {
      return result;
    }
    goto LABEL_3;
  }
  if (a3 >= 4)
  {
    unsigned int v9 = a3 >> 2;
    v10.i64[0] = 0xFFFF0000FFFF0000;
    v10.i64[1] = 0xFFFF0000FFFF0000;
    int32x4_t v11 = vnegq_s32(vdupq_n_s32(v7));
    do
    {
      unint64_t v12 = *(void *)result;
      result += 4;
      a7.i64[0] = v12;
      int32x4_t v13 = vzip1q_s32(a7, a7);
      a7 = vshlq_s32(vtrn2q_s32(vrev64q_s32(vshlq_n_s32(v13, 0x10uLL)), (int32x4_t)vandq_s8((int8x16_t)v13, v10)), v11);
      *a2++ = (__n128)a7;
      --v9;
    }
    while (v9);
  }
  for (a3 &= 3u; a3; --a3)
  {
LABEL_3:
    int v8 = *result++;
    a2->n128_u32[0] = v8 << 16 >> v7;
    a2 = (__n128 *)((char *)a2 + 4);
  }
  return result;
}

int8x8_t *SwapInt16ToNativeInt32_Portable(int8x8_t *result, int32x4_t *a2, unsigned int a3, int a4)
{
  unsigned int v4 = 16 - a4;
  if (((a2 | result) & 3) != 0)
  {
    if (!a3) {
      return result;
    }
    goto LABEL_3;
  }
  if (a3 >= 4)
  {
    unsigned int v6 = a3 >> 2;
    int32x4_t v7 = vnegq_s32(vdupq_n_s32(v4));
    do
    {
      *a2++ = vshlq_s32(vshll_n_s16((int16x4_t)vrev16_s8(*result++), 0x10uLL), v7);
      --v6;
    }
    while (v6);
  }
  for (a3 &= 3u; a3; --a3)
  {
LABEL_3:
    unsigned int v5 = result->u16[0];
    double result = (int8x8_t *)((char *)result + 2);
    a2->i32[0] = (int)(bswap32(v5) & 0xFFFF0000) >> v4;
    a2 = (int32x4_t *)((char *)a2 + 4);
  }
  return result;
}

uint32x2_t *NativeInt24ToNativeInt32_Portable(uint32x2_t *result, uint64_t a2, unsigned int a3, int a4)
{
  unsigned int v4 = 8 - a4;
  if (((a2 | result) & 3) != 0)
  {
    if (!a3) {
      return result;
    }
    goto LABEL_8;
  }
  if (a3 >= 4)
  {
    unsigned int v5 = a3 >> 2;
    int32x2_t v6 = vneg_s32(vdup_n_s32(v4));
    do
    {
      __int32 v7 = result[1].i32[0];
      uint32x2_t v8 = *result;
      double result = (uint32x2_t *)((char *)result + 12);
      *(_DWORD *)a2 = v8.i32[0] << 8 >> v4;
      *(int32x2_t *)(a2 + 4) = vshl_s32((int32x2_t)vorr_s8(vand_s8((int8x8_t)vshl_u32(v8, (uint32x2_t)0xFFFFFFF8FFFFFFF0), (int8x8_t)0xFFFF000000FF00), (int8x8_t)vrev64_s32((int32x2_t)vshl_u32((uint32x2_t)__PAIR64__(v8.u32[1], v7), (uint32x2_t)0x1000000018))), v6);
      *(_DWORD *)(a2 + 12) = (int)(v7 & 0xFFFFFF00) >> v4;
      a2 += 16;
      --v5;
    }
    while (v5);
  }
  a3 &= 3u;
  if (a3)
  {
LABEL_8:
    unsigned int v9 = (uint32x2_t *)((char *)result + 2);
    do
    {
      *(_DWORD *)a2 = ((v9->u8[0] << 24) | (v9[-1].u8[7] << 16) | (v9[-1].u8[6] << 8)) >> v4;
      a2 += 4;
      unsigned int v9 = (uint32x2_t *)((char *)v9 + 3);
      --a3;
    }
    while (a3);
  }
  return result;
}

unsigned __int8 *SwapInt24ToNativeInt32_Portable(unsigned __int8 *this, int *a2, unsigned int a3, char a4, uint64_t a5, int *a6)
{
  unsigned int v6 = a3;
  __int32 v7 = a2;
  uint32x2_t v8 = this;
  char v9 = 8 - a4;
  if (((a2 | this) & 3) != 0)
  {
    if (!a3) {
      return this;
    }
    goto LABEL_3;
  }
  if (a3 >= 4)
  {
    unsigned int v10 = a3 >> 2;
    do
    {
      --v10;
      *(void *)unsigned int v14 = 0;
      *(void *)int v15 = 0;
      this = (unsigned __int8 *)PCMSInt24Swap::load4(v8, &v15[4], (int *)v15, (unsigned int *)&v14[1], (unsigned int *)v14, a6);
      int v11 = *(int *)v15 >> v9;
      int v12 = v14[1] >> v9;
      int v13 = v14[0] >> v9;
      *__int32 v7 = *(int *)&v15[4] >> v9;
      v7[1] = v11;
      id v7[2] = v12;
      v7[3] = v13;
      v8 += 12;
      v7 += 4;
    }
    while (v10);
  }
  for (v6 &= 3u; v6; --v6)
  {
LABEL_3:
    *v7++ = ((*v8 << 24) | (v8[1] << 16) | (v8[2] << 8)) >> v9;
    v8 += 3;
  }
  return this;
}

int *NativeInt32ToNativeInt16_Portable(int *result, int *a2, unsigned int a3, char a4)
{
  char v4 = a4 - 1;
  if (((a2 | result) & 3) == 0)
  {
    if (a3 >= 4)
    {
      for (unsigned int i = a3 >> 2; i; --i)
      {
        int v9 = *result >> v4;
        int v10 = v9 + 1;
        if (v9 < -1)
        {
          if (v10 < 0xFFFF0000)
          {
            LOWORD(v11) = 0x8000;
            goto LABEL_19;
          }
        }
        else if (HIWORD(v10))
        {
          LOWORD(v11) = 0x7FFF;
          goto LABEL_19;
        }
        int v11 = v10 >> 1;
LABEL_19:
        int v12 = result[1] >> v4;
        int v13 = v12 + 1;
        if (v12 < -1)
        {
          if (v13 < 0xFFFF0000)
          {
            LOWORD(v14) = 0x8000;
            goto LABEL_25;
          }
        }
        else if (HIWORD(v13))
        {
          LOWORD(v14) = 0x7FFF;
          goto LABEL_25;
        }
        int v14 = v13 >> 1;
LABEL_25:
        int v15 = result[2] >> v4;
        int v16 = v15 + 1;
        if (v15 < -1)
        {
          if (v16 < 0xFFFF0000)
          {
            LOWORD(v17) = 0x8000;
            goto LABEL_31;
          }
        }
        else if (HIWORD(v16))
        {
          LOWORD(v17) = 0x7FFF;
          goto LABEL_31;
        }
        int v17 = v16 >> 1;
LABEL_31:
        int v18 = result[3] >> v4;
        int v19 = v18 + 1;
        if (v18 < -1)
        {
          if (v19 >= 0xFFFF0000)
          {
LABEL_36:
            int v20 = v19 >> 1;
            goto LABEL_37;
          }
          LOWORD(v20) = 0x8000;
        }
        else
        {
          if (!HIWORD(v19)) {
            goto LABEL_36;
          }
          LOWORD(v20) = 0x7FFF;
        }
LABEL_37:
        *a2 = (unsigned __int16)v11 | ((unsigned __int16)v14 << 16);
        a2[1] = (unsigned __int16)v17 | ((unsigned __int16)v20 << 16);
        a2 += 2;
        result += 4;
      }
    }
    a3 &= 3u;
    if (!a3) {
      return result;
    }
    while (1)
    {
LABEL_3:
      int v5 = *result >> v4;
      int v6 = v5 + 1;
      if (v5 < -1)
      {
        if (v6 >= 0xFFFF0000)
        {
LABEL_8:
          int v7 = v6 >> 1;
          goto LABEL_9;
        }
        LOWORD(v7) = 0x8000;
      }
      else
      {
        if (!HIWORD(v6)) {
          goto LABEL_8;
        }
        LOWORD(v7) = 0x7FFF;
      }
LABEL_9:
      *(_WORD *)a2 = v7;
      a2 = (int *)((char *)a2 + 2);
      ++result;
      if (!--a3) {
        return result;
      }
    }
  }
  if (a3) {
    goto LABEL_3;
  }
  return result;
}

int *NativeInt32ToSwapInt16_Portable(int *result, _WORD *a2, unsigned int a3, char a4)
{
  char v4 = a4 - 1;
  if (((a2 | result) & 3) == 0)
  {
    if (a3 >= 4)
    {
      for (unsigned int i = a3 >> 2; i; --i)
      {
        int v9 = *result >> v4;
        int v10 = v9 + 1;
        if (v9 < -1)
        {
          if (v10 < 0xFFFF0000)
          {
            unsigned int v11 = -32768;
            goto LABEL_19;
          }
        }
        else if (HIWORD(v10))
        {
          unsigned int v11 = 0x7FFF;
          goto LABEL_19;
        }
        unsigned int v11 = v10 >> 1;
LABEL_19:
        int v12 = result[1] >> v4;
        int v13 = v12 + 1;
        if (v12 < -1)
        {
          if (v13 < 0xFFFF0000)
          {
            unsigned int v14 = -32768;
            goto LABEL_25;
          }
        }
        else if (HIWORD(v13))
        {
          unsigned int v14 = 0x7FFF;
          goto LABEL_25;
        }
        unsigned int v14 = v13 >> 1;
LABEL_25:
        int v15 = result[2] >> v4;
        int v16 = v15 + 1;
        if (v15 < -1)
        {
          if (v16 < 0xFFFF0000)
          {
            unsigned int v17 = -32768;
            goto LABEL_31;
          }
        }
        else if (HIWORD(v16))
        {
          unsigned int v17 = 0x7FFF;
          goto LABEL_31;
        }
        unsigned int v17 = v16 >> 1;
LABEL_31:
        int v18 = result[3] >> v4;
        int v19 = v18 + 1;
        if (v18 < -1)
        {
          if (v19 >= 0xFFFF0000)
          {
LABEL_36:
            unsigned int v20 = v19 >> 1;
            goto LABEL_37;
          }
          unsigned int v20 = -32768;
        }
        else
        {
          if (!HIWORD(v19)) {
            goto LABEL_36;
          }
          unsigned int v20 = 0x7FFF;
        }
LABEL_37:
        *a2 = bswap32(v11) >> 16;
        a2[1] = bswap32(v14) >> 16;
        a2[2] = bswap32(v17) >> 16;
        a2[3] = bswap32(v20) >> 16;
        result += 4;
        a2 += 4;
      }
    }
    a3 &= 3u;
    if (!a3) {
      return result;
    }
    while (1)
    {
LABEL_3:
      int v5 = *result >> v4;
      int v6 = v5 + 1;
      if (v5 < -1)
      {
        if (v6 >= 0xFFFF0000)
        {
LABEL_8:
          unsigned int v7 = v6 >> 1;
          goto LABEL_9;
        }
        unsigned int v7 = -32768;
      }
      else
      {
        if (!HIWORD(v6)) {
          goto LABEL_8;
        }
        unsigned int v7 = 0x7FFF;
      }
LABEL_9:
      *a2++ = bswap32(v7) >> 16;
      ++result;
      if (!--a3) {
        return result;
      }
    }
  }
  if (a3) {
    goto LABEL_3;
  }
  return result;
}

int *NativeInt32ToNativeInt24_Portable(int *result, uint64_t a2, unsigned int a3, char a4)
{
  char v4 = a4 - 1;
  if (((a2 | result) & 3) == 0)
  {
    if (a3 >= 4)
    {
      for (unsigned int i = a3 >> 2; i; --i)
      {
        int v9 = *result >> v4;
        int v10 = v9 + 1;
        if (v9 < -1)
        {
          if (HIBYTE(v10) != 255)
          {
            int v11 = -8388608;
            goto LABEL_19;
          }
        }
        else if (HIBYTE(v10))
        {
          int v11 = 0x7FFFFF;
          goto LABEL_19;
        }
        int v11 = v10 >> 1;
LABEL_19:
        int v12 = result[1] >> v4;
        int v13 = v12 + 1;
        if (v12 < -1)
        {
          if (HIBYTE(v13) != 255)
          {
            unsigned int v14 = -8388608;
            goto LABEL_25;
          }
        }
        else if (HIBYTE(v13))
        {
          unsigned int v14 = 0x7FFFFF;
          goto LABEL_25;
        }
        unsigned int v14 = v13 >> 1;
LABEL_25:
        int v15 = result[2] >> v4;
        int v16 = v15 + 1;
        if (v15 < -1)
        {
          if (HIBYTE(v16) != 255)
          {
            int v17 = -8388608;
            goto LABEL_31;
          }
        }
        else if (HIBYTE(v16))
        {
          int v17 = 0x7FFFFF;
          goto LABEL_31;
        }
        int v17 = v16 >> 1;
LABEL_31:
        int v18 = result[3] >> v4;
        int v19 = v18 + 1;
        if (v18 < -1)
        {
          if (HIBYTE(v19) == 255)
          {
LABEL_36:
            int v20 = v19 >> 1;
            goto LABEL_37;
          }
          int v20 = -8388608;
        }
        else
        {
          if (!HIBYTE(v19)) {
            goto LABEL_36;
          }
          int v20 = 0x7FFFFF;
        }
LABEL_37:
        *(_DWORD *)a2 = v11 & 0xFFFFFF | (v14 << 24);
        *(_DWORD *)(a2 + 4) = (unsigned __int16)(v14 >> 8) | ((unsigned __int16)v17 << 16);
        *(_DWORD *)(a2 + 8) = BYTE2(v17) | (v20 << 8);
        result += 4;
        a2 += 12;
      }
    }
    a3 &= 3u;
    if (!a3) {
      return result;
    }
    while (1)
    {
LABEL_3:
      int v5 = *result >> v4;
      int v6 = v5 + 1;
      if (v5 < -1)
      {
        if (HIBYTE(v6) == 255)
        {
LABEL_8:
          int v7 = v6 >> 1;
          goto LABEL_9;
        }
        int v7 = -8388608;
      }
      else
      {
        if (!HIBYTE(v6)) {
          goto LABEL_8;
        }
        int v7 = 0x7FFFFF;
      }
LABEL_9:
      *(_WORD *)a2 = v7;
      *(unsigned char *)(a2 + 2) = BYTE2(v7);
      ++result;
      a2 += 3;
      if (!--a3) {
        return result;
      }
    }
  }
  if (a3) {
    goto LABEL_3;
  }
  return result;
}

int *NativeInt32ToSwapInt24_Portable(int *result, PCMSInt24Swap *this, unsigned int a3, char a4)
{
  unsigned int v4 = a3;
  int v5 = this;
  int v6 = result;
  char v7 = a4 - 1;
  if (((this | result) & 3) == 0)
  {
    if (a3 >= 4)
    {
      unsigned int v11 = a3 >> 2;
      do
      {
        int v12 = *v6 >> v7;
        int v13 = v12 + 1;
        if (v12 < -1)
        {
          if (HIBYTE(v13) != 255)
          {
            uint64_t v14 = 4286578688;
            goto LABEL_19;
          }
        }
        else if (HIBYTE(v13))
        {
          uint64_t v14 = 0x7FFFFFLL;
          goto LABEL_19;
        }
        uint64_t v14 = (v13 >> 1);
LABEL_19:
        int v15 = v6[1] >> v7;
        int v16 = v15 + 1;
        if (v15 < -1)
        {
          if (HIBYTE(v16) != 255)
          {
            int v17 = -8388608;
            goto LABEL_25;
          }
        }
        else if (HIBYTE(v16))
        {
          int v17 = 0x7FFFFF;
          goto LABEL_25;
        }
        int v17 = v16 >> 1;
LABEL_25:
        int v18 = v6[2] >> v7;
        int v19 = v18 + 1;
        if (v18 < -1)
        {
          if (HIBYTE(v19) != 255)
          {
            int v20 = -8388608;
            goto LABEL_31;
          }
        }
        else if (HIBYTE(v19))
        {
          int v20 = 0x7FFFFF;
          goto LABEL_31;
        }
        int v20 = v19 >> 1;
LABEL_31:
        int v21 = v6[3] >> v7;
        int v22 = v21 + 1;
        if (v21 < -1)
        {
          if (HIBYTE(v22) == 255)
          {
LABEL_36:
            int v23 = v22 >> 1;
            goto LABEL_37;
          }
          int v23 = -8388608;
        }
        else
        {
          if (!HIBYTE(v22)) {
            goto LABEL_36;
          }
          int v23 = 0x7FFFFF;
        }
LABEL_37:
        --v11;
        double result = PCMSInt24Swap::store4((int *)v5, (unsigned __int8 *)v14, v17, v20, v23);
        v6 += 4;
        int v5 = (PCMSInt24Swap *)((char *)v5 + 12);
      }
      while (v11);
    }
    v4 &= 3u;
    if (!v4) {
      return result;
    }
    while (1)
    {
LABEL_3:
      int v8 = *v6 >> v7;
      int v9 = v8 + 1;
      if (v8 < -1)
      {
        if (HIBYTE(v9) == 255)
        {
LABEL_8:
          int v10 = v9 >> 1;
          goto LABEL_9;
        }
        int v10 = -8388608;
      }
      else
      {
        if (!HIBYTE(v9)) {
          goto LABEL_8;
        }
        int v10 = 0x7FFFFF;
      }
LABEL_9:
      *(unsigned char *)int v5 = BYTE2(v10);
      *((unsigned char *)v5 + 1) = BYTE1(v10);
      *((unsigned char *)v5 + 2) = v10;
      ++v6;
      int v5 = (PCMSInt24Swap *)((char *)v5 + 3);
      if (!--v4) {
        return result;
      }
    }
  }
  if (a3) {
    goto LABEL_3;
  }
  return result;
}

unsigned int *SwapInt32ToNativeInt16_Portable(unsigned int *result, int *a2, unsigned int a3, char a4)
{
  char v4 = a4 - 1;
  if (((a2 | result) & 3) == 0)
  {
    if (a3 >= 4)
    {
      for (unsigned int i = a3 >> 2; i; --i)
      {
        int v9 = (int)bswap32(*result) >> v4;
        int v10 = v9 + 1;
        if (v9 < -1)
        {
          if (v10 < 0xFFFF0000)
          {
            LOWORD(v11) = 0x8000;
            goto LABEL_19;
          }
        }
        else if (HIWORD(v10))
        {
          LOWORD(v11) = 0x7FFF;
          goto LABEL_19;
        }
        int v11 = v10 >> 1;
LABEL_19:
        int v12 = (int)bswap32(result[1]) >> v4;
        int v13 = v12 + 1;
        if (v12 < -1)
        {
          if (v13 < 0xFFFF0000)
          {
            LOWORD(v14) = 0x8000;
            goto LABEL_25;
          }
        }
        else if (HIWORD(v13))
        {
          LOWORD(v14) = 0x7FFF;
          goto LABEL_25;
        }
        int v14 = v13 >> 1;
LABEL_25:
        int v15 = (int)bswap32(result[2]) >> v4;
        int v16 = v15 + 1;
        if (v15 < -1)
        {
          if (v16 < 0xFFFF0000)
          {
            LOWORD(v17) = 0x8000;
            goto LABEL_31;
          }
        }
        else if (HIWORD(v16))
        {
          LOWORD(v17) = 0x7FFF;
          goto LABEL_31;
        }
        int v17 = v16 >> 1;
LABEL_31:
        int v18 = (int)bswap32(result[3]) >> v4;
        int v19 = v18 + 1;
        if (v18 < -1)
        {
          if (v19 >= 0xFFFF0000)
          {
LABEL_36:
            int v20 = v19 >> 1;
            goto LABEL_37;
          }
          LOWORD(v20) = 0x8000;
        }
        else
        {
          if (!HIWORD(v19)) {
            goto LABEL_36;
          }
          LOWORD(v20) = 0x7FFF;
        }
LABEL_37:
        *a2 = (unsigned __int16)v11 | ((unsigned __int16)v14 << 16);
        a2[1] = (unsigned __int16)v17 | ((unsigned __int16)v20 << 16);
        a2 += 2;
        result += 4;
      }
    }
    a3 &= 3u;
    if (!a3) {
      return result;
    }
    while (1)
    {
LABEL_3:
      int v5 = (int)bswap32(*result) >> v4;
      int v6 = v5 + 1;
      if (v5 < -1)
      {
        if (v6 >= 0xFFFF0000)
        {
LABEL_8:
          int v7 = v6 >> 1;
          goto LABEL_9;
        }
        LOWORD(v7) = 0x8000;
      }
      else
      {
        if (!HIWORD(v6)) {
          goto LABEL_8;
        }
        LOWORD(v7) = 0x7FFF;
      }
LABEL_9:
      *(_WORD *)a2 = v7;
      a2 = (int *)((char *)a2 + 2);
      ++result;
      if (!--a3) {
        return result;
      }
    }
  }
  if (a3) {
    goto LABEL_3;
  }
  return result;
}

unsigned int *SwapInt32ToNativeInt24_Portable(unsigned int *result, uint64_t a2, unsigned int a3, char a4)
{
  char v4 = a4 - 1;
  if (((a2 | result) & 3) == 0)
  {
    if (a3 >= 4)
    {
      for (unsigned int i = a3 >> 2; i; --i)
      {
        int v9 = (int)bswap32(*result) >> v4;
        int v10 = v9 + 1;
        if (v9 < -1)
        {
          if (HIBYTE(v10) != 255)
          {
            int v11 = -8388608;
            goto LABEL_19;
          }
        }
        else if (HIBYTE(v10))
        {
          int v11 = 0x7FFFFF;
          goto LABEL_19;
        }
        int v11 = v10 >> 1;
LABEL_19:
        int v12 = (int)bswap32(result[1]) >> v4;
        int v13 = v12 + 1;
        if (v12 < -1)
        {
          if (HIBYTE(v13) != 255)
          {
            unsigned int v14 = -8388608;
            goto LABEL_25;
          }
        }
        else if (HIBYTE(v13))
        {
          unsigned int v14 = 0x7FFFFF;
          goto LABEL_25;
        }
        unsigned int v14 = v13 >> 1;
LABEL_25:
        int v15 = (int)bswap32(result[2]) >> v4;
        int v16 = v15 + 1;
        if (v15 < -1)
        {
          if (HIBYTE(v16) != 255)
          {
            int v17 = -8388608;
            goto LABEL_31;
          }
        }
        else if (HIBYTE(v16))
        {
          int v17 = 0x7FFFFF;
          goto LABEL_31;
        }
        int v17 = v16 >> 1;
LABEL_31:
        int v18 = (int)bswap32(result[3]) >> v4;
        int v19 = v18 + 1;
        if (v18 < -1)
        {
          if (HIBYTE(v19) == 255)
          {
LABEL_36:
            int v20 = v19 >> 1;
            goto LABEL_37;
          }
          int v20 = -8388608;
        }
        else
        {
          if (!HIBYTE(v19)) {
            goto LABEL_36;
          }
          int v20 = 0x7FFFFF;
        }
LABEL_37:
        *(_DWORD *)a2 = v11 & 0xFFFFFF | (v14 << 24);
        *(_DWORD *)(a2 + 4) = (unsigned __int16)(v14 >> 8) | ((unsigned __int16)v17 << 16);
        *(_DWORD *)(a2 + 8) = BYTE2(v17) | (v20 << 8);
        result += 4;
        a2 += 12;
      }
    }
    a3 &= 3u;
    if (!a3) {
      return result;
    }
    while (1)
    {
LABEL_3:
      int v5 = (int)bswap32(*result) >> v4;
      int v6 = v5 + 1;
      if (v5 < -1)
      {
        if (HIBYTE(v6) == 255)
        {
LABEL_8:
          int v7 = v6 >> 1;
          goto LABEL_9;
        }
        int v7 = -8388608;
      }
      else
      {
        if (!HIBYTE(v6)) {
          goto LABEL_8;
        }
        int v7 = 0x7FFFFF;
      }
LABEL_9:
      *(_WORD *)a2 = v7;
      *(unsigned char *)(a2 + 2) = BYTE2(v7);
      ++result;
      a2 += 3;
      if (!--a3) {
        return result;
      }
    }
  }
  if (a3) {
    goto LABEL_3;
  }
  return result;
}

int32x4_t *NativeInt32ToNativeInt32_Portable(int32x4_t *result, int32x4_t *a2, unsigned int a3, signed int a4)
{
  if (a4 < 1)
  {
    unsigned int v15 = -a4;
    if (((a2 | result) & 3) == 0)
    {
      if (a3 >= 4)
      {
        unsigned int v16 = a3 >> 2;
        int32x4_t v17 = vnegq_s32(vdupq_n_s32(v15));
        do
        {
          int32x4_t v18 = *result++;
          *a2++ = vshlq_s32(v18, v17);
          --v16;
        }
        while (v16);
      }
      a3 &= 3u;
    }
    for (; a3; --a3)
    {
      int v19 = result->i32[0];
      double result = (int32x4_t *)((char *)result + 4);
      a2->i32[0] = v19 >> v15;
      a2 = (int32x4_t *)((char *)a2 + 4);
    }
  }
  else
  {
    signed int v4 = -1 << ~(_BYTE)a4;
    signed int v5 = ~v4;
    if (((a2 | result) & 3) == 0)
    {
      if (a3 >= 4)
      {
        unsigned int v6 = a3 >> 2;
        int32x4_t v7 = vdupq_n_s32(v4);
        int32x4_t v8 = vdupq_n_s32(v5);
        uint32x4_t v9 = (uint32x4_t)vdupq_n_s32(a4);
        do
        {
          int32x4_t v10 = *result++;
          *(uint32x4_t *)a2++ = vshlq_u32((uint32x4_t)vbslq_s8((int8x16_t)vcgtq_s32(v7, v10), (int8x16_t)v7, (int8x16_t)vminq_s32(v10, v8)), v9);
          --v6;
        }
        while (v6);
      }
      a3 &= 3u;
    }
    while (a3)
    {
      signed int v12 = result->i32[0];
      double result = (int32x4_t *)((char *)result + 4);
      signed int v11 = v12;
      if (v12 >= v5) {
        int v13 = ~v4;
      }
      else {
        int v13 = v11;
      }
      if (v11 >= v4) {
        int v14 = v13;
      }
      else {
        int v14 = -1 << ~(_BYTE)a4;
      }
      a2->i32[0] = v14 << a4;
      a2 = (int32x4_t *)((char *)a2 + 4);
      --a3;
    }
  }
  return result;
}

int *NativeInt32ToSwapInt32_Portable(int *result, _DWORD *a2, unsigned int a3, int a4)
{
  if (a4 < 1)
  {
    int v22 = -a4;
    if (((a2 | result) & 3) == 0)
    {
      if (a3 >= 4)
      {
        unsigned int v23 = a3 >> 2;
        do
        {
          unsigned int v24 = result[1] >> v22;
          unsigned int v25 = result[2] >> v22;
          unsigned int v26 = result[3] >> v22;
          *a2 = bswap32(*result >> v22);
          a2[1] = bswap32(v24);
          a2[2] = bswap32(v25);
          a2[3] = bswap32(v26);
          result += 4;
          a2 += 4;
          --v23;
        }
        while (v23);
      }
      a3 &= 3u;
    }
    for (; a3; --a3)
    {
      int v27 = *result++;
      *a2++ = bswap32(v27 >> v22);
    }
  }
  else
  {
    int v4 = -1 << ~(_BYTE)a4;
    int v5 = ~v4;
    if (((a2 | result) & 3) == 0)
    {
      if (a3 >= 4)
      {
        unsigned int v6 = a3 >> 2;
        do
        {
          int v7 = result[1];
          int v8 = result[2];
          int v9 = result[3];
          if (*result >= v5) {
            int v10 = ~v4;
          }
          else {
            int v10 = *result;
          }
          if (*result >= v4) {
            int v11 = v10;
          }
          else {
            int v11 = -1 << ~(_BYTE)a4;
          }
          if (v7 >= v5) {
            int v12 = ~v4;
          }
          else {
            int v12 = result[1];
          }
          if (v7 >= v4) {
            int v13 = v12;
          }
          else {
            int v13 = -1 << ~(_BYTE)a4;
          }
          if (v8 >= v5) {
            int v14 = ~v4;
          }
          else {
            int v14 = result[2];
          }
          if (v8 >= v4) {
            int v15 = v14;
          }
          else {
            int v15 = -1 << ~(_BYTE)a4;
          }
          if (v9 >= v5) {
            int v16 = ~v4;
          }
          else {
            int v16 = result[3];
          }
          if (v9 >= v4) {
            int v17 = v16;
          }
          else {
            int v17 = -1 << ~(_BYTE)a4;
          }
          *a2 = bswap32(v11 << a4);
          a2[1] = bswap32(v13 << a4);
          a2[2] = bswap32(v15 << a4);
          a2[3] = bswap32(v17 << a4);
          result += 4;
          a2 += 4;
          --v6;
        }
        while (v6);
      }
      a3 &= 3u;
    }
    while (a3)
    {
      int v19 = *result++;
      int v18 = v19;
      if (v19 >= v5) {
        int v20 = ~v4;
      }
      else {
        int v20 = v18;
      }
      if (v18 >= v4) {
        int v21 = v20;
      }
      else {
        int v21 = -1 << ~(_BYTE)a4;
      }
      *a2++ = bswap32(v21 << a4);
      --a3;
    }
  }
  return result;
}

int8x16_t *SwapInt32ToNativeInt32_Portable(int8x16_t *result, uint32x4_t *a2, unsigned int a3, signed int a4)
{
  if (a4 < 1)
  {
    int v15 = -a4;
    if (((a2 | result) & 3) == 0)
    {
      if (a3 >= 4)
      {
        unsigned int v16 = a3 >> 2;
        do
        {
          int v17 = bswap32(result->u32[1]);
          int v18 = bswap32(result->u32[2]);
          int v19 = bswap32(result->u32[3]);
          a2->i32[0] = (int)bswap32(result->i32[0]) >> v15;
          a2->i32[1] = v17 >> v15;
          a2->i32[2] = v18 >> v15;
          a2->i32[3] = v19 >> v15;
          ++result;
          ++a2;
          --v16;
        }
        while (v16);
      }
      a3 &= 3u;
    }
    for (; a3; --a3)
    {
      unsigned int v20 = result->i32[0];
      double result = (int8x16_t *)((char *)result + 4);
      a2->i32[0] = (int)bswap32(v20) >> v15;
      a2 = (uint32x4_t *)((char *)a2 + 4);
    }
  }
  else
  {
    signed int v4 = -1 << ~(_BYTE)a4;
    signed int v5 = ~v4;
    if (((a2 | result) & 3) == 0)
    {
      if (a3 >= 4)
      {
        unsigned int v6 = a3 >> 2;
        int32x4_t v7 = vdupq_n_s32(v4);
        int32x4_t v8 = vdupq_n_s32(v5);
        uint32x4_t v9 = (uint32x4_t)vdupq_n_s32(a4);
        do
        {
          int32x4_t v10 = (int32x4_t)vrev32q_s8(*result);
          *a2++ = vshlq_u32((uint32x4_t)vbslq_s8((int8x16_t)vcgtq_s32(v7, v10), (int8x16_t)v7, (int8x16_t)vminq_s32(v10, v8)), v9);
          ++result;
          --v6;
        }
        while (v6);
      }
      a3 &= 3u;
    }
    while (a3)
    {
      unsigned int v11 = result->i32[0];
      double result = (int8x16_t *)((char *)result + 4);
      signed int v12 = bswap32(v11);
      if (v12 >= v5) {
        int v13 = ~v4;
      }
      else {
        int v13 = v12;
      }
      if (v12 >= v4) {
        int v14 = v13;
      }
      else {
        int v14 = -1 << ~(_BYTE)a4;
      }
      a2->i32[0] = v14 << a4;
      a2 = (uint32x4_t *)((char *)a2 + 4);
      --a3;
    }
  }
  return result;
}

unsigned int *SwapInt32ToSwapInt32_Portable(unsigned int *result, _DWORD *a2, unsigned int a3, int a4)
{
  if (a4 < 1)
  {
    int v23 = -a4;
    if (((a2 | result) & 3) == 0)
    {
      if (a3 >= 4)
      {
        unsigned int v24 = a3 >> 2;
        do
        {
          int v25 = bswap32(result[1]);
          int v26 = bswap32(result[2]);
          int v27 = bswap32(result[3]);
          *a2 = bswap32((int)bswap32(*result) >> v23);
          a2[1] = bswap32(v25 >> v23);
          a2[2] = bswap32(v26 >> v23);
          a2[3] = bswap32(v27 >> v23);
          result += 4;
          a2 += 4;
          --v24;
        }
        while (v24);
      }
      a3 &= 3u;
    }
    for (; a3; --a3)
    {
      unsigned int v28 = *result++;
      *a2++ = bswap32((int)bswap32(v28) >> v23);
    }
  }
  else
  {
    int v4 = -1 << ~(_BYTE)a4;
    int v5 = ~v4;
    if (((a2 | result) & 3) == 0)
    {
      if (a3 >= 4)
      {
        unsigned int v6 = a3 >> 2;
        do
        {
          signed int v7 = bswap32(*result);
          signed int v8 = bswap32(result[1]);
          signed int v9 = bswap32(result[2]);
          signed int v10 = bswap32(result[3]);
          if (v7 >= v5) {
            int v11 = ~v4;
          }
          else {
            int v11 = v7;
          }
          if (v7 >= v4) {
            int v12 = v11;
          }
          else {
            int v12 = -1 << ~(_BYTE)a4;
          }
          if (v8 >= v5) {
            int v13 = ~v4;
          }
          else {
            int v13 = v8;
          }
          if (v8 >= v4) {
            int v14 = v13;
          }
          else {
            int v14 = -1 << ~(_BYTE)a4;
          }
          if (v9 >= v5) {
            int v15 = ~v4;
          }
          else {
            int v15 = v9;
          }
          if (v9 >= v4) {
            int v16 = v15;
          }
          else {
            int v16 = -1 << ~(_BYTE)a4;
          }
          if (v10 >= v5) {
            int v17 = ~v4;
          }
          else {
            int v17 = v10;
          }
          if (v10 >= v4) {
            int v18 = v17;
          }
          else {
            int v18 = -1 << ~(_BYTE)a4;
          }
          *a2 = bswap32(v12 << a4);
          a2[1] = bswap32(v14 << a4);
          a2[2] = bswap32(v16 << a4);
          a2[3] = bswap32(v18 << a4);
          result += 4;
          a2 += 4;
          --v6;
        }
        while (v6);
      }
      a3 &= 3u;
    }
    while (a3)
    {
      unsigned int v19 = *result++;
      signed int v20 = bswap32(v19);
      if (v20 >= v5) {
        int v21 = ~v4;
      }
      else {
        int v21 = v20;
      }
      if (v20 >= v4) {
        int v22 = v21;
      }
      else {
        int v22 = -1 << ~(_BYTE)a4;
      }
      *a2++ = bswap32(v22 << a4);
      --a3;
    }
  }
  return result;
}

int *StereoInterleaveInt824ToInt16_Portable(int *result, int *a2, _WORD *a3, int a4)
{
  for (; a4; --a4)
  {
    int v5 = *result++;
    int v4 = v5;
    if (v5 < 0)
    {
      if (HIBYTE(v4) != 255)
      {
        LOWORD(v6) = 0x8000;
        goto LABEL_8;
      }
    }
    else if (HIBYTE(v4))
    {
      LOWORD(v6) = 0x7FFF;
      goto LABEL_8;
    }
    int v6 = v4 >> 9;
LABEL_8:
    *a3 = v6;
    int v8 = *a2++;
    int v7 = v8;
    if (v8 < 0)
    {
      if (HIBYTE(v7) == 255)
      {
LABEL_13:
        int v9 = v7 >> 9;
        goto LABEL_14;
      }
      LOWORD(v9) = 0x8000;
    }
    else
    {
      if (!HIBYTE(v7)) {
        goto LABEL_13;
      }
      LOWORD(v9) = 0x7FFF;
    }
LABEL_14:
    a3[1] = v9;
    a3 += 2;
  }
  return result;
}

__int16 *StereoDeinterleaveInt16ToInt824_Portable(__int16 *result, _DWORD *a2, _DWORD *a3, int a4)
{
  {
    *a2++ = *result << 9;
    *a3++ = result[1] << 9;
    result += 2;
  }
  return result;
}

int32x4_t *NativeLowAlignedInt32ToInt16_Portable(int32x4_t *result, int16x4_t *a2, unsigned int a3)
{
  if (a3 >= 4)
  {
    unsigned int v3 = a3 >> 2;
    do
    {
      int32x4_t v4 = *result++;
      *a2++ = vmovn_s32(v4);
      --v3;
    }
    while (v3);
  }
  int v5 = a3 & 3;
  if ((a3 & 3) != 0)
  {
    do
    {
      __int32 v6 = result->i32[0];
      double result = (int32x4_t *)((char *)result + 4);
      a2->i16[0] = v6;
      a2 = (int16x4_t *)((char *)a2 + 2);
      --v5;
    }
    while (v5);
  }
  return result;
}

uint16x4_t *NativeInt16ToLowAlignedInt32_Portable(uint16x4_t *result, uint32x4_t *a2, unsigned int a3)
{
  if (a3 >= 4)
  {
    unsigned int v3 = a3 >> 2;
    do
    {
      uint16x4_t v4 = *result++;
      *a2++ = vmovl_u16(v4);
      --v3;
    }
    while (v3);
  }
  int v5 = a3 & 3;
  if ((a3 & 3) != 0)
  {
    do
    {
      __int32 v6 = result->u16[0];
      double result = (uint16x4_t *)((char *)result + 2);
      a2->i32[0] = v6;
      a2 = (uint32x4_t *)((char *)a2 + 4);
      --v5;
    }
    while (v5);
  }
  return result;
}

uint32x4_t *NativeLowAlignedInt32To824Fixed_Portable(uint32x4_t *result, int32x4_t *a2, unsigned int a3, int a4)
{
  unsigned int v4 = 32 - a4;
  if (a3 >= 4)
  {
    unsigned int v5 = a3 >> 2;
    uint32x4_t v6 = (uint32x4_t)vdupq_n_s32(v4);
    do
    {
      uint32x4_t v7 = *result++;
      *a2++ = vshrq_n_s32((int32x4_t)vshlq_u32(v7, v6), 7uLL);
      --v5;
    }
    while (v5);
  }
  int v8 = a3 & 3;
  if ((a3 & 3) != 0)
  {
    do
    {
      __int32 v9 = result->i32[0];
      double result = (uint32x4_t *)((char *)result + 4);
      a2->i32[0] = v9 << v4 >> 7;
      a2 = (int32x4_t *)((char *)a2 + 4);
      --v8;
    }
    while (v8);
  }
  return result;
}

int32x4_t *Native824FixedToLowAlignedInt32_Portable(int32x4_t *result, int8x16_t *a2, unsigned int a3, int a4)
{
  unsigned int v4 = 24 - a4;
  unsigned int v5 = ~(-1 << a4);
  signed int v6 = -1 << (a4 - 1);
  signed int v7 = ~v6;
  if (a3 >= 4)
  {
    unsigned int v8 = a3 >> 2;
    int32x4_t v9 = vdupq_n_s32(v6);
    int32x4_t v10 = vdupq_n_s32(v7);
    int8x16_t v11 = (int8x16_t)vdupq_n_s32(v5);
    int32x4_t v12 = vnegq_s32(vdupq_n_s32(v4));
    v13.i64[0] = 0x100000001;
    v13.i64[1] = 0x100000001;
    do
    {
      int32x4_t v14 = *result++;
      int32x4_t v15 = vshrq_n_s32(vaddq_s32(vshlq_s32(v14, v12), v13), 1uLL);
      *a2++ = vandq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v9, v15), (int8x16_t)v9, (int8x16_t)vminq_s32(v15, v10)), v11);
      --v8;
    }
    while (v8);
  }
  int v16 = a3 & 3;
  if ((a3 & 3) != 0)
  {
    do
    {
      int v17 = result->i32[0];
      double result = (int32x4_t *)((char *)result + 4);
      int v18 = ((v17 >> v4) + 1) >> 1;
      if (v18 >= v7) {
        int v19 = ~v6;
      }
      else {
        int v19 = v18;
      }
      if (v18 >= v6) {
        int v20 = v19;
      }
      else {
        int v20 = -1 << (a4 - 1);
      }
      a2->i32[0] = v20 & v5;
      a2 = (int8x16_t *)((char *)a2 + 4);
      --v16;
    }
    while (v16);
  }
  return result;
}

void Float32ToNativeLowAlignedInt32_Portable(float *a1, unsigned int *a2, int a3, int a4)
{
  char v4 = a4;
  float v8 = scalbnf(1.0, -a4);
  for (float i = nextafterf(2147500000.0, 0.0); a3; --a3)
  {
    float v10 = *a1++;
    float v11 = v10;
    if (v10 < -1.0) {
      float v11 = -1.0;
    }
    float v12 = (float)(v8 + v11) * 2147500000.0;
    if (i < v12) {
      float v12 = i;
    }
    *a2++ = (int)v12 >> (32 - v4);
  }
}

int *NativeLowAlignedInt32ToFloat32_Portable(int *result, float *a2, int a3, char a4)
{
  for (; a3; --a3)
  {
    int v4 = *result++;
    *a2++ = (float)(v4 << (32 - a4)) * 4.6566e-10;
  }
  return result;
}

float *Float32ToNativeLowAlignedInt64_Portable(float *result, void *a2, int a3, int a4)
{
  for (; a3; --a3)
  {
    float v4 = *result++;
    unsigned int v5 = vcvts_n_s32_f32(v4 + COERCE_FLOAT(1065353216 - (a4 << 23)), 0x1FuLL);
    *a2++ = (v5 - (v5 > 0x80000000)) >> (32 - a4);
  }
  return result;
}

int *NativeLowAlignedInt64ToFloat32_Portable(int *result, float *a2, int a3, char a4)
{
  for (; a3; --a3)
  {
    int v4 = *result;
    result += 2;
    *a2++ = (float)(v4 << (32 - a4)) * 4.6566e-10;
  }
  return result;
}

void *std::__function::__func<RemoteAudioConverter::setInvalidationHandler(std::function<void ()(void)>)::$_0,std::allocator<RemoteAudioConverter::setInvalidationHandler(std::function<void ()(void)>)::$_0>,void ()(swix::ipc_endpoint &,applesauce::xpc::object const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

uint64_t std::__function::__func<RemoteAudioConverter::setInvalidationHandler(std::function<void ()(void)>)::$_0,std::allocator<RemoteAudioConverter::setInvalidationHandler(std::function<void ()(void)>)::$_0>,void ()(swix::ipc_endpoint &,applesauce::xpc::object const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDFA0960;
  uint64_t result = std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
  a2[5] = *(void *)(a1 + 40);
  return result;
}

void std::__function::__func<RemoteAudioConverter::setInvalidationHandler(std::function<void ()(void)>)::$_0,std::allocator<RemoteAudioConverter::setInvalidationHandler(std::function<void ()(void)>)::$_0>,void ()(swix::ipc_endpoint &,applesauce::xpc::object const&)>::~__func(void *a1)
{
  *a1 = &unk_1EDFA0960;
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](a1 + 1);
  JUMPOUT(0x192FC8940);
}

void *std::__function::__func<RemoteAudioConverter::setInvalidationHandler(std::function<void ()(void)>)::$_0,std::allocator<RemoteAudioConverter::setInvalidationHandler(std::function<void ()(void)>)::$_0>,void ()(swix::ipc_endpoint &,applesauce::xpc::object const&)>::~__func(void *a1)
{
  *a1 = &unk_1EDFA0960;
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

unint64_t AudioConverterXPC_Server::instantiateSpecific(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  signed int v6 = *(unsigned char **)(a1 + 16);
  if (v6[8])
  {
    if (*(_DWORD *)(a2 + 8) == 1735091043)
    {
      *(void *)AudioStreamBasicDescription buf = MEMORY[0x1E4F143A8];
      *(void *)&uint8_t buf[8] = 0x40000000;
      *(void *)&buf[16] = ___ZL23registerPrivateDecodersj_block_invoke;
      *(void *)&uint8_t buf[24] = &__block_descriptor_tmp_7545;
      int v18 = 1735091043;
      if (registerPrivateDecoders::gkRegistrationOnceToken != -1) {
        dispatch_once(&registerPrivateDecoders::gkRegistrationOnceToken, buf);
      }
      signed int v6 = *(unsigned char **)(a1 + 16);
    }
    unsigned int v11 = AudioConverterNewInternal((long long *)a2, a3, a5, a4, (void *)(*(void *)v6 + 8), newAudioConverter, 0, 0);
    uint64_t v12 = *(void *)(**(void **)(a1 + 16) + 8);
    *(void *)AudioStreamBasicDescription buf = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<SetConverterAsAuxiliary(OpaqueAudioConverter *)::$_0>;
    *(void *)&uint8_t buf[8] = &v16;
    with_resolved(v12, (uint64_t (**)(uint64_t, uint64_t))buf);
    return v11 | ((unint64_t)(v11 == 0) << 32);
  }
  else
  {
    uint64_t v13 = 4294967188;
    AudioConverterLog();
    int32x4_t v14 = AudioConverterLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
      *(void *)&uint8_t buf[4] = "RemoteAudioConverter.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 99;
      *(_WORD *)&unsigned char buf[18] = 2048;
      *(void *)&buf[20] = a1;
      _os_log_impl(&dword_18FEC0000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d AudioConverterService -> %p: The service is close to its memory limit and will fail to construct new converters with kAudio_MemFullError. Try disposing of some out-of-process converters.", buf, 0x1Cu);
    }
  }
  return v13;
}

void sub_1900ABCDC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void ___ZL23registerPrivateDecodersj_block_invoke(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  OSType v1 = *(_DWORD *)(a1 + 32);
  inDesc.OSType componentType = 1633969507;
  inDesc.OSType componentSubType = v1;
  *(void *)&inDesc.OSType componentManufacturer = 1634758764;
  inDesc.componentFlagsMasdouble k = 0;
  AudioComponentFactoryFunction inFactory = (AudioComponentFactoryFunction)&inDesc;
  if (!AudioComponentFindNext(0, &inDesc))
  {
    _ZZZL23registerPrivateDecodersjEUb_E6handle = (uint64_t)dlopen("/System/Library/Frameworks/AudioToolbox.framework/AudioCodecs", 5);
    uint64_t v2 = (void (*)(AudioComponentFactoryFunction *))dlsym((void *)_ZZZL23registerPrivateDecodersjEUb_E6handle, "RegisterExternalAudioCodecs");
    if (v2)
    {
      v2(&inFactory);
      if (AudioComponentRegister(&inDesc, &stru_1EDFA53D0, 0, inFactory)) {
        return;
      }
    }
    else
    {
      AudioConverterLog();
      unsigned int v3 = AudioConverterLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        int v4 = dlerror();
        *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
        int32x4_t v9 = "RegisterPrivateDecoders.h";
        __int16 v10 = 1024;
        int v11 = 111;
        __int16 v12 = 2080;
        uint64_t v13 = v4;
        _os_log_impl(&dword_18FEC0000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d couldn't lookup symbol RegisterExternalAudioCodecs:\n%s", buf, 0x1Cu);
      }
    }
    AudioConverterLog();
    unsigned int v5 = AudioConverterLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      int32x4_t v9 = "RegisterPrivateDecoders.h";
      __int16 v10 = 1024;
      int v11 = 118;
      _os_log_impl(&dword_18FEC0000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d failed to register component for GKDecoder", buf, 0x12u);
    }
  }
}

void AudioConverterXPC_Server::setUpRenderer()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1900AC154(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t audioipc::ipc_node_base<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,unilaterally_billed_shared_memory>::ipc_node_base(uint64_t a1, xpc_object_t *a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  value = (caulk::mach::details *)xpc_dictionary_get_value(*a2, "sharedMemory");
  signed int v6 = (void *)caulk::mach::details::retain_os_object(value, v5);
  caulk::mach::details::release_os_object(0, v7);
  *(void *)a1 = 0;
  if (!v6)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "no object");
  }
  id v8 = v6;
  xpc_dictionary_get_value(v8, "surface");
  int32x4_t v9 = (caulk::mach::details *)objc_claimAutoreleasedReturnValue();
  int v11 = (void *)caulk::mach::details::retain_os_object(v9, v10);
  caulk::mach::details::release_os_object(0, v12);

  id v13 = v11;
  IOSurfaceRef v14 = IOSurfaceLookupFromXPCObject(v13);
  int32x4_t v15 = *(const void **)a1;
  *(void *)a1 = v14;
  if (v15) {
    CFRelease(v15);
  }

  if (!*(void *)a1)
  {
    AudioConverterLog();
    int v23 = (id) AudioConverterLog(void)::gLog;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      int v27 = "ACOOPSharedMemory.mm";
      __int16 v28 = 1024;
      int v29 = 49;
      _os_log_impl(&dword_18FEC0000, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d unilaterally_billed_shared_memory - error on IOSurfaceLookupFromXPCObject", buf, 0x12u);
    }
    unsigned int v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v24, "bad IOSurface");
  }
  id v16 = v8;
  mach_port_name_t v25 = xpc_dictionary_copy_mach_send();

  int v17 = IOSurfaceSetOwnershipIdentity();
  if (v17)
  {
    AudioConverterLog();
    int v18 = (id) AudioConverterLog(void)::gLog;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
      int v27 = "ACOOPSharedMemory.mm";
      __int16 v28 = 1024;
      int v29 = 66;
      __int16 v30 = 1024;
      int v31 = v17;
      _os_log_impl(&dword_18FEC0000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d unilaterally_billed_shared_memory - error on IOSurfaceSetOwnershipIdentity, memory will most likely be billed to both processes: %u", buf, 0x18u);
    }
  }
  caulk::mach::mach_port::~mach_port(&v25);
  caulk::mach::details::release_os_object((caulk::mach::details *)v13, v19);
  caulk::mach::details::release_os_object((caulk::mach::details *)v16, v20);
  *(void *)(a1 + 8) = unilaterally_billed_shared_memory::get_raw_ptr((IOSurfaceRef *)a1, 0) + 8;
  *(void *)(a1 + 16) = unilaterally_billed_shared_memory::get_raw_ptr((IOSurfaceRef *)a1, 0);
  *(void *)(a1 + 24) = unilaterally_billed_shared_memory::get_raw_ptr((IOSurfaceRef *)a1, 0x10uLL);
  *(_WORD *)(a1 + 32) = 1;
  audioipc::eventlink_primitive::eventlink_primitive((audioipc::eventlink_primitive *)(a1 + 40), *a2);
  return a1;
}

void sub_1900AC62C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11)
{
  caulk::mach::details::release_os_object(v13, a2);
  if (*v11) {
    CFRelease(*v11);
  }
  caulk::mach::details::release_os_object(v12, v15);
  _Unwind_Resume(a1);
}

uint64_t ACOOPSharedMemory::partitionBuffers(ACOOPSharedMemory *this)
{
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *((void *)this + 1);
  unsigned int v5 = (char *)this + 16;
  uint64_t v4 = *((void *)this + 2);
  uint64_t v6 = *(void *)(v4 + 112);
  unint64_t v7 = *(unsigned int *)(v4 + 104) * (unint64_t)(16 * *(_DWORD *)(v4 + 80));
  BOOL v28 = (v7 & 0xFFFFFFFF00000000) == 0;
  uint64_t v8 = v7 & 0xFFFFFFF0;
  if (v28) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0xFFFFFFFFLL;
  }
  unint64_t v10 = v2 + v6;
  if ((unint64_t)caulk::numeric::exceptional_add<unsigned long>(v9, 15) >= 0x10)
  {
    uint64_t v11 = *((void *)this + 2);
    *((void *)this + 25) = *(void *)this + *(void *)(v11 + 112);
    unint64_t v12 = *(unsigned int *)(v11 + 104) * (unint64_t)(16 * *(_DWORD *)(v11 + 80));
    BOOL v28 = (v12 & 0xFFFFFFFF00000000) == 0;
    uint64_t v13 = v12 & 0xFFFFFFF0;
    if (v28) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0xFFFFFFFFLL;
    }
    v10 += caulk::numeric::exceptional_add<unsigned long>(v14, 15) & 0xFFFFFFFFFFFFFFF0;
  }
  unint64_t v15 = *(unsigned int *)(*(void *)v5 + 108)
      * (unint64_t)(16 * *(_DWORD *)(*(void *)v5 + 84));
  BOOL v28 = (v15 & 0xFFFFFFFF00000000) == 0;
  uint64_t v16 = v15 & 0xFFFFFFF0;
  if (v28) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0xFFFFFFFFLL;
  }
  if ((unint64_t)caulk::numeric::exceptional_add<unsigned long>(v17, 15) >= 0x10)
  {
    uint64_t v19 = *((void *)this + 2);
    uint64_t v20 = *(void *)(v19 + 112);
    unint64_t v21 = *(unsigned int *)(v19 + 104) * (unint64_t)(16 * *(_DWORD *)(v19 + 80));
    BOOL v28 = (v21 & 0xFFFFFFFF00000000) == 0;
    uint64_t v22 = v21 & 0xFFFFFFF0;
    if (v28) {
      uint64_t v23 = v22;
    }
    else {
      uint64_t v23 = 0xFFFFFFFFLL;
    }
    uint64_t v18 = *(void *)this;
    *((void *)this + 26) = v18
                           + v20
                           + (caulk::numeric::exceptional_add<unsigned long>(v23, 15) & 0xFFFFFFFFFFFFFFF0);
    unint64_t v24 = *(unsigned int *)(*((void *)this + 2) + 108)
        * (unint64_t)(16 * *(_DWORD *)(*((void *)this + 2) + 84));
    BOOL v28 = (v24 & 0xFFFFFFFF00000000) == 0;
    uint64_t v25 = v24 & 0xFFFFFFF0;
    if (v28) {
      uint64_t v26 = v25;
    }
    else {
      uint64_t v26 = 0xFFFFFFFFLL;
    }
    v10 += caulk::numeric::exceptional_add<unsigned long>(v26, 15) & 0xFFFFFFFFFFFFFFF0;
  }
  unint64_t v27 = v2 + v3;
  BOOL v28 = v10 <= v2 + v3 && (v10 & 0xF) == 0;
  if (v28)
  {
    uint64_t v29 = *((void *)this + 2);
    if (v10 == *(void *)this + *(void *)(v29 + 120))
    {
      uint64_t v31 = *(_DWORD *)(v29 + 88) ? v10 : 0;
      *((void *)this + 28) = v31;
      int v32 = *(_DWORD *)(v29 + 92);
      uint64_t v33 = v32 ? v10 : 0;
      *((void *)this + 29) = v33;
      unint64_t v34 = v32
          ? caulk::numeric::exceptional_add<unsigned long>(40 * (*(_DWORD *)(v29 + 104) + 1) + 44, 15) & 0xFFFFFFFFFFFFFFF0
          : 0;
      unint64_t v35 = v10 + v34;
      if (v35 <= v27 && (v35 & 0xF) == 0)
      {
        uint64_t v36 = *((void *)this + 2);
        if (v35 == *(void *)this + *(void *)(v36 + 128))
        {
          *((int8x16_t *)this + 15) = vbicq_s8((int8x16_t)vdupq_n_s64(v35), (int8x16_t)vceqzq_s64(*((int64x2_t *)this + 14)));
          unint64_t v37 = *(unsigned int *)(v36 + 92) * (unint64_t)(*(_DWORD *)(v36 + 104) + 1);
          if ((v37 & 0xFFFFFFFF00000000) != 0) {
            uint64_t v38 = 0xFFFFFFFFLL;
          }
          else {
            uint64_t v38 = v37;
          }
          unint64_t v39 = v35 + (caulk::numeric::exceptional_add<unsigned long>(v38, 15) & 0xFFFFFFFFFFFFFFF0);
          BOOL v40 = v39 <= v27 && (v39 & 0xF) == 0;
          if (v40 && v39 == *(void *)this + *(void *)(*((void *)this + 2) + 136)) {
            std::make_unique[abi:ne180100]<AudioConverterSharedAudioBuffers,RenderConfiguration *&,unsigned char *,std::array<unsigned char *,2ul> &,std::array<unsigned char *,2ul>>();
          }
        }
      }
    }
  }
  return 2003329396;
}

void AudioConverterServer::setup(AudioConverterServer *this, const char *a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v29);
  std::ostream::operator<<();
  std::string::basic_string[abi:ne180100]<0>(&v26, " (");
  size_t v4 = strlen(a2);
  unsigned int v5 = std::string::insert(&v26, 0, a2, v4);
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__UInt32 words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__UInt32 words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(__dst, (uint64_t)v30);
  if ((v25 & 0x80u) == 0) {
    unint64_t v7 = __dst;
  }
  else {
    unint64_t v7 = (void **)__dst[0];
  }
  if ((v25 & 0x80u) == 0) {
    std::string::size_type v8 = v25;
  }
  else {
    std::string::size_type v8 = (std::string::size_type)__dst[1];
  }
  uint64_t v9 = std::string::append(&v27, (const std::string::value_type *)v7, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__UInt32 words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__UInt32 words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  uint64_t v11 = std::string::append(&__p, ")", 1uLL);
  unint64_t v12 = (const std::string::value_type *)v11->__r_.__value_.__r.__words[0];
  std::string::size_type size = v11->__r_.__value_.__l.__size_;
  v28[0] = v11->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v28 + 3) = *(_DWORD *)((char *)&v11->__r_.__value_.__r.__words[2] + 3);
  int v14 = SHIBYTE(v11->__r_.__value_.__r.__words[2]);
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__UInt32 words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((char)v25 < 0) {
    operator delete(__dst[0]);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v26.__r_.__value_.__l.__data_);
    if ((v14 & 0x80000000) == 0) {
      goto LABEL_15;
    }
  }
  else if ((v14 & 0x80000000) == 0)
  {
LABEL_15:
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
    __p.__r_.__value_.__l.__size_ = size;
    LODWORD(__p.__r_.__value_.__r.__words[2]) = v28[0];
    *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v28 + 3);
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = v14;
    goto LABEL_18;
  }
  std::string::__init_copy_ctor_external(&__p, v12, size);
LABEL_18:
  char v18 = 1;
  long long v19 = xmmword_1901C6260;
  int v20 = 1;
  char v21 = 1;
  char v22 = 0;
  char v23 = 0;
  *(_OWORD *)((char *)this + 104) = xmmword_1901C6260;
  unint64_t v15 = (const void *)voucher_copy();
  std::string::size_type v16 = (std::string::size_type)v15;
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
  if (v15) {
    CFRetain(v15);
  }
  v27.__r_.__value_.__r.__words[0] = v16;
  v27.__r_.__value_.__l.__size_ = (std::string::size_type)this;
  if (*((unsigned char *)this + 96))
  {
    caulk::thread::~thread((AudioConverterServer *)((char *)this + 80));
    *((unsigned char *)this + 96) = 0;
  }
  *((void *)this + 10) = 0;
  *((unsigned char *)this + 88) = 0;
  operator new();
}

void sub_1900ACD74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,char a40)
{
  operator delete(v40);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a40);
  _Unwind_Resume(a1);
}

void std::default_delete<AudioConverterSharedAudioBuffers>::operator()[abi:ne180100](uint64_t a1)
{
  for (uint64_t i = 144; i != -32; i -= 88)
    ExtendedAudioBufferList_Destroy(*(std::pmr **)(a1 + i));
  JUMPOUT(0x192FC8940);
}

void AudioConverterServer::~AudioConverterServer(const void **this)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  *this = &unk_1EDF8AF58;
  if (*((unsigned char *)this + 96))
  {
    AudioConverterLog();
    uint64_t v2 = AudioConverterLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_FAULT))
    {
      int v3 = 136315394;
      size_t v4 = "AudioConverterServer.h";
      __int16 v5 = 1024;
      int v6 = 61;
      _os_log_impl(&dword_18FEC0000, v2, OS_LOG_TYPE_FAULT, "%25s:%-5d Server destroyed before proper shutdown", (uint8_t *)&v3, 0x12u);
    }
    AudioConverterServer::shutdown((AudioConverterServer *)this);
  }
  caulk::mach::os_workgroup_managed::~os_workgroup_managed((caulk::mach::os_workgroup_managed *)(this + 26));
  if (*((unsigned char *)this + 200)) {
    audioipc::os_workgroup_joiner::~os_workgroup_joiner((audioipc::os_workgroup_joiner *)(this + 16));
  }
  if (*((unsigned char *)this + 96)) {
    caulk::thread::~thread((caulk::thread *)(this + 10));
  }
  audioipc::eventlink_primitive::~eventlink_primitive((audioipc::eventlink_primitive *)(this + 7));
  unilaterally_billed_shared_memory::~unilaterally_billed_shared_memory(this + 2);
}

void sub_1900ACFF4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void AudioConverterServer::shutdown(AudioConverterServer *this)
{
  unsigned int v2 = atomic_load(*((unsigned int **)this + 3));
  if (v2 != 2)
  {
    atomic_store(1u, (unsigned __int8 *)this + 49);
    os_eventlink_cancel();
  }
  if (*((unsigned char *)this + 96))
  {
    caulk::thread::join((AudioConverterServer *)((char *)this + 80));
    if (*((unsigned char *)this + 96))
    {
      caulk::thread::~thread((AudioConverterServer *)((char *)this + 80));
      *((unsigned char *)this + 96) = 0;
    }
  }
}

void audioipc::os_workgroup_joiner::~os_workgroup_joiner(audioipc::os_workgroup_joiner *this)
{
  if (!*((_DWORD *)this + 16)) {
    caulk::mach::os_workgroup_managed::leave(this);
  }
  caulk::mach::os_workgroup_managed::~os_workgroup_managed(this);
}

const void **AudioConverterServer::setup(char const*)::{lambda(void)#1}::~setup(const void **a1)
{
  unsigned int v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **applesauce::CF::ObjectRef<voucher_s *>::~ObjectRef(const void **a1)
{
  unsigned int v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t std::default_delete<std::tuple<caulk::thread::attributes,AudioConverterServer::setup(char const*)::{lambda(void)#1},std::tuple<>>>::operator()[abi:ne180100](uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    unsigned int v2 = *(const void **)(result + 64);
    if (v2) {
      CFRelease(v2);
    }
    if (*(unsigned char *)(v1 + 24) && *(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    JUMPOUT(0x192FC8940);
  }
  return result;
}

uint64_t caulk::thread_proxy<std::tuple<caulk::thread::attributes,AudioConverterServer::setup(char const*)::{lambda(void)#1},std::tuple<>>>(caulk::thread::attributes *a1)
{
  caulk::thread::attributes::apply_to_this_thread(a1);
  uint64_t v2 = *((void *)a1 + 9);
  voucher_adopt();
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  voucher_adopt();
  std::default_delete<std::tuple<caulk::thread::attributes,AudioConverterServer::setup(char const*)::{lambda(void)#1},std::tuple<>>>::operator()[abi:ne180100]((uint64_t)a1);
  return 0;
}

void sub_1900AD23C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9)
{
  if (a2)
  {
    voucher_adopt();
    __cxa_begin_catch(exception_object);
    AudioConverterLog();
    long long v10 = AudioConverterLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315394;
      *(void *)((char *)&a9 + 4) = "AudioConverterServer.h";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 98;
      _os_log_impl(&dword_18FEC0000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d Server thread exiting with uncaught exception", (uint8_t *)&a9, 0x12u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1900AD200);
  }
  _Unwind_Resume(exception_object);
}

void std::make_unique[abi:ne180100]<AudioConverterSharedAudioBuffers,RenderConfiguration *&,unsigned char *,std::array<unsigned char *,2ul> &,std::array<unsigned char *,2ul>>()
{
}

void sub_1900AD4F0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void AudioConverterRenderServer::serverThread(AudioConverterRenderServer *this)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  audioipc::eventlink_primitive::activate();
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)this + 49);
  size_t v4 = (unsigned int *)*((void *)this + 3);
  if ((v3 & 1) == 0)
  {
    atomic_store(0, v4);
    unint64_t v5 = audioipc::eventlink_primitive::wait_or_error(*((audioipc::eventlink_primitive **)this + 7));
    unsigned __int8 v6 = atomic_load((unsigned __int8 *)this + 49);
    if ((v6 & 1) == 0)
    {
      int v7 = v5;
      unint64_t v8 = HIDWORD(v5);
      while (1)
      {
        unsigned int v9 = atomic_load(*((unsigned int **)this + 4));
        if (v9 == 2) {
          break;
        }
        if (!(_BYTE)v8)
        {
          int v53 = CADefaultLog();
          if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
            *(void *)&uint8_t buf[4] = "rt_receiver::receive_loop";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v7;
            _os_log_error_impl(&dword_18FEC0000, v53, OS_LOG_TYPE_ERROR, "%s failed: %d", buf, 0x12u);
          }
          break;
        }
        atomic_store(1u, *((unsigned int **)this + 3));
        long long v10 = (unsigned __int8 *)*((void *)this + 5);
        int v11 = *v10;
        switch(v11)
        {
          case 1:
            AudioConverterServer::syncThreadPriorityAndWorkgroup(this);
            UInt32 v14 = *((_DWORD *)v10 + 2);
            int v15 = *((_DWORD *)v10 + 4);
            int v16 = *((unsigned __int16 *)v10 + 10);
            inInputDataProcUserData = this;
            uint64_t v17 = *((void *)this + 59);
            int v54 = *(unsigned int **)(v17 + 144);
            long long v19 = (AudioBufferList *)(v54 + 12);
            uint64_t v18 = v54[12];
            uint64_t v20 = 16 * v18;
            if (16 * v18)
            {
              int v21 = *(_DWORD *)(v17 + 128);
              char v22 = v54 + 15;
              char v23 = v54 + 15;
              uint64_t v24 = 16 * v18;
              do
              {
                *char v23 = v21;
                v23 += 4;
                v24 -= 16;
              }
              while (v24);
              do
              {
                *char v22 = v15;
                v22 += 4;
                v20 -= 16;
              }
              while (v20);
            }
            unsigned __int8 v25 = (AudioStreamPacketDescription *)*((void *)this + 61);
            if (v25 && *(_DWORD *)(*((void *)this + 37) + 108) < v14) {
              UInt32 v14 = *(_DWORD *)(*((void *)this + 37) + 108);
            }
            UInt32 ioOutputDataPacketSize = v14;
            if (*(_DWORD *)(v17 + 96) == 1885564203 && *(_DWORD *)(v17 + 136))
            {
              if (v19->mBuffers[v18].mNumberChannels == 1094863915)
              {
                uint64_t v26 = v54[3];
                if (v26) {
                  std::string v27 = (uint64_t *)((char *)v54 + v26);
                }
                else {
                  std::string v27 = 0;
                }
              }
              else
              {
                std::string v27 = 0;
              }
              __int16 v30 = (void *)*v27;
              int64_t v31 = v27[1] - *v27;
              if (v31 >= 1)
              {
                bzero(v30, v31);
                __int16 v30 = (void *)*v27;
              }
              v27[1] = (uint64_t)v30;
              memset(buf, 0, 44);
              uint8_t buf[24] = 1;
              *(void *)&unsigned char buf[32] = 0x10000002CLL;
              AudioMetadataFrame::begin_new(v27, (unsigned int *)buf);
              if (v16)
              {
                for (int i = 0; i != v16; ++i)
                {
                  uint64_t v33 = *(void *)(v17 + 152);
                  size_t v34 = *(unsigned int *)(v17 + 136);
                  unint64_t v35 = (void *)(v33 + (v34 * i));
                  uint64_t __src = 1;
                  int v58 = 40;
                  uint64_t v59 = 0;
                  uint64_t v60 = 0x100000000;
                  int v61 = v34;
                  unsigned int v62 = v35;
                  if (i || (int v36 = *(_DWORD *)(v17 + 168), v36 == -1)) {
                    bzero(v35, v34);
                  }
                  else {
                    memcpy(v35, (const void *)(v33 + (v36 * v34)), v34);
                  }
                  AudioMetadataFrame_AppendEvent(v27, (char *)&__src);
                }
              }
              memcpy(*(void **)(v17 + 160), (const void *)*v27, v27[1] - *v27);
              *(_DWORD *)(v17 + 168) = -1;
            }
            OSStatus v37 = AudioConverterFillComplexBuffer(*((AudioConverterRef *)this + 1), (AudioConverterComplexInputDataProc)AudioConverterRenderServer::render(unsigned int,unsigned int,unsigned int,unsigned short)::{lambda(OpaqueAudioConverter *,unsigned int *,AudioBufferList *,AudioStreamPacketDescription **,void *)#1}::__invoke, &inInputDataProcUserData, &ioOutputDataPacketSize, v19, v25);
            uint64_t v38 = *((void *)this + 59);
            if (*(_DWORD *)(v38 + 136))
            {
              unint64_t v39 = *(void **)(v38 + 160);
              if (v39)
              {
                uint64_t v40 = *(void *)(v38 + 144);
                uint64_t v41 = *(unsigned int *)(v40 + 12);
                uint64_t v42 = v40 + v41;
                uint64_t v43 = v41 ? v42 : 0;
                memcpy(v39, *(const void **)v43, *(void *)(v43 + 8) - *(void *)v43);
                uint64_t v44 = *(void *)(v43 + 8) - *(void *)v43 <= 0x2BuLL ? 0 : *(void *)v43;
                if (*(_DWORD *)(v44 + 64))
                {
                  int v45 = 0;
                  uint64_t v46 = v44 + 44;
                  int v47 = *(_DWORD *)(v44 + 40);
                  do
                  {
                    if (v47 == v45) {
                      break;
                    }
                    *(_DWORD *)(v38 + 168) = v45;
                    v46 += *(unsigned int *)(v46 + 8);
                    ++v45;
                  }
                  while (*(_DWORD *)(v46 + 20));
                }
              }
            }
            uint64_t v48 = *((void *)this + 58);
            *(_DWORD *)(v48 + 16) = v54[15];
            *(_DWORD *)(v48 + 8) = ioOutputDataPacketSize;
            *((_DWORD *)v10 + 1) = v37;
            goto LABEL_51;
          case 4:
            int v13 = ACOOPSharedMemory::partitionBuffers((AudioConverterRenderServer *)((char *)this + 280));
            break;
          case 3:
            uint64_t v12 = *((void *)this + 1);
            *(void *)AudioStreamBasicDescription buf = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterReset::$_0>;
            *(void *)&uint8_t buf[8] = &__src;
            int v13 = with_resolved(v12, (uint64_t (**)(uint64_t, uint64_t))buf);
            break;
          default:
            AudioConverterLog();
            BOOL v28 = AudioConverterLog(void)::gLog;
            if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
            {
              int v29 = *v10;
              *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
              *(void *)&uint8_t buf[4] = "AudioConverterRenderServer.h";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 72;
              *(_WORD *)&unsigned char buf[18] = 1024;
              *(_DWORD *)&buf[20] = v29;
              _os_log_impl(&dword_18FEC0000, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown or unexpected message: %d", buf, 0x18u);
            }
            goto LABEL_51;
        }
        *((_DWORD *)v10 + 1) = v13;
LABEL_51:
        *(_WORD *)long long v10 = 25856;
        unsigned __int8 v49 = atomic_load((unsigned __int8 *)this + 49);
        if ((v49 & 1) == 0)
        {
          unsigned int v50 = atomic_load(*((unsigned int **)this + 4));
          if (v50 != 2)
          {
            atomic_store(0, *((unsigned int **)this + 3));
            unint64_t v51 = audioipc::eventlink_primitive::wait_signal_or_error(*((audioipc::eventlink_primitive **)this + 7));
            if (!HIDWORD(v51))
            {
              int v7 = v51;
              LOBYTE(v8) = 0;
            }
            unsigned __int8 v52 = atomic_load((unsigned __int8 *)this + 49);
            if ((v52 & 1) == 0) {
              continue;
            }
          }
        }
        break;
      }
    }
    size_t v4 = (unsigned int *)*((void *)this + 3);
  }
  atomic_store(2u, v4);
  AudioConverterServer::WorkgroupJoiner::leave((AudioConverterRenderServer *)((char *)this + 128), v2);
}

__n128 AudioConverterServer::WorkgroupJoiner::leave(AudioConverterServer::WorkgroupJoiner *this, void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 11);
  if (v2)
  {
    if (*((unsigned char *)this + 72))
    {
      audioipc::os_workgroup_joiner::~os_workgroup_joiner(this);
      *((unsigned char *)this + 72) = 0;
      uint64_t v2 = *((void *)this + 11);
    }
    uint64_t v4 = MEMORY[0x1E4FB7EA0] + 16;
    long long v11 = 0u;
    memset(v12, 0, sizeof(v12));
    *((void *)this + 11) = 0;
    v10[0] = v4;
    v10[1] = v2;
    caulk::mach::details::release_os_object(0, a2);
    uint64_t v5 = *((void *)this + 16);
    long long v6 = *((_OWORD *)this + 6);
    long long v7 = *((_OWORD *)this + 7);
    long long v8 = v12[0];
    *((_OWORD *)this + 6) = v11;
    *((_OWORD *)this + 7) = v8;
    *((void *)this + 16) = *(void *)&v12[1];
    long long v11 = v6;
    v12[0] = v7;
    *(void *)&v12[1] = v5;
    LOBYTE(v5) = *((unsigned char *)this + 136);
    *((unsigned char *)this + 136) = BYTE8(v12[1]);
    BYTE8(v12[1]) = v5;
    caulk::mach::os_workgroup_managed::~os_workgroup_managed((caulk::mach::os_workgroup_managed *)v10);
  }
  return result;
}

void AudioConverterServer::syncThreadPriorityAndWorkgroup(AudioConverterServer *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = (*(uint64_t (**)(AudioConverterServer *))(*(void *)this + 16))(this);
  if (v3 > 0x5F)
  {
    if (*((_DWORD *)this + 30) != 97)
    {
      caulk::mach::this_thread::set_priority();
      *((_DWORD *)this + 30) = 97;
    }
    auoop::WorkgroupMirror::lookup((auoop::WorkgroupMirror *)v7, *((void *)this + 34), v3);
    if (v8 != *((caulk::mach::details **)this + 27) || v10[24] != *((unsigned __int8 *)this + 264))
    {
      uint64_t v5 = (AudioConverterServer *)((char *)this + 128);
      if (v8)
      {
        std::optional<audioipc::os_workgroup_joiner>::emplace[abi:ne180100]<caulk::mach::os_workgroup_managed &,void>(v5, (uint64_t)v7);
      }
      else if (*((unsigned char *)this + 200))
      {
        audioipc::os_workgroup_joiner::~os_workgroup_joiner(v5);
        *((unsigned char *)this + 200) = 0;
      }
      caulk::mach::details::holder::operator=((caulk::mach::details **)this + 27, &v8);
      long long v6 = *(_OWORD *)v10;
      *((_OWORD *)this + 14) = v9;
      *((_OWORD *)this + 15) = v6;
      *(_OWORD *)((char *)this + 249) = *(_OWORD *)&v10[9];
    }
    caulk::mach::os_workgroup_managed::~os_workgroup_managed((caulk::mach::os_workgroup_managed *)v7);
  }
  else
  {
    AudioConverterServer::WorkgroupJoiner::leave((AudioConverterServer *)((char *)this + 128), v2);
    if (v3)
    {
      audioipc::priority_propagator_impl::apply_priority((uint64_t)this + 104, v3);
    }
  }
}

uint64_t AudioConverterRenderServer::render(unsigned int,unsigned int,unsigned int,unsigned short)::{lambda(OpaqueAudioConverter *,unsigned int *,AudioBufferList *,AudioStreamPacketDescription **,void *)#1}::__invoke(double a1, uint64_t a2, int *a3, unsigned int *a4, void *a5, uint64_t *a6)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = 561145203;
  uint64_t v10 = *a6;
  unsigned int v11 = a4[3];
  int v12 = *a3;
  uint64_t v13 = *(unsigned __int8 **)(*a6 + 464);
  if (audioipc::ipc_node_base<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,unilaterally_billed_shared_memory>::can_send(*a6 + 16, a1))
  {
    *(_WORD *)uint64_t v13 = 26112;
    *((_DWORD *)v13 + 2) = v12;
    *((_DWORD *)v13 + 3) = v11;
    atomic_store(0, *(unsigned int **)(v10 + 24));
    unint64_t v14 = audioipc::eventlink_primitive::wait_signal_or_error(*(audioipc::eventlink_primitive **)(v10 + 56));
    unsigned __int8 v15 = atomic_load((unsigned __int8 *)(v10 + 49));
    if (v15)
    {
      atomic_store(2u, *(unsigned int **)(v10 + 24));
    }
    else
    {
      int v16 = v14;
      uint64_t v17 = *(unsigned int **)(v10 + 24);
      if (HIDWORD(v14))
      {
        atomic_store(1u, v17);
        *(unsigned char *)(v10 + 48) = 1;
        int v18 = *v13;
        if (v18 == 2) {
          uint64_t v9 = 0;
        }
        else {
          uint64_t v9 = 4294956420;
        }
        if (v18 == 2)
        {
          uint64_t v20 = *(unsigned int **)(v10 + 464);
          uint64_t v19 = *(void *)(v10 + 472);
          int v21 = *(unsigned int **)(v19 + 56);
          char v22 = v21 + 14;
          uint64_t v23 = v21[12];
          if (16 * v23)
          {
            unsigned int v24 = v20[3];
            int v25 = *(_DWORD *)(v19 + 40);
            uint64_t v26 = 16 * v23;
            std::string v27 = v21 + 15;
            uint64_t v28 = v26;
            do
            {
              *std::string v27 = v25;
              v27 += 4;
              v28 -= 16;
            }
            while (v28);
            int v29 = v21 + 15;
            do
            {
              *int v29 = v24;
              v29 += 4;
              v26 -= 16;
            }
            while (v26);
            LODWORD(v23) = v21[12];
          }
          unsigned int v30 = *a4;
          if (v23 < *a4) {
            unsigned int v30 = v23;
          }
          memcpy(a4 + 2, v22, 16 * v30);
          *a3 = v20[2];
          if (a5) {
            *a5 = *(void *)(v10 + 480);
          }
          return v20[1];
        }
      }
      else
      {
        atomic_store(2u, v17);
        int v32 = CADefaultLog();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
          int v33 = 136315394;
          size_t v34 = "rt_sender::signal_wait";
          __int16 v35 = 1024;
          int v36 = v16;
          _os_log_error_impl(&dword_18FEC0000, v32, OS_LOG_TYPE_ERROR, "%s failed: %d", (uint8_t *)&v33, 0x12u);
        }
      }
    }
  }
  return v9;
}

BOOL audioipc::ipc_node_base<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,unilaterally_billed_shared_memory>::can_send(uint64_t a1, double a2)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(a1 + 33));
  unint64_t v3 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    BOOL result = 0;
    atomic_store(2u, v3);
    return result;
  }
  unsigned int v4 = atomic_load(v3);
  if (v4 == 2) {
    return 0;
  }
  unsigned int v5 = atomic_load(*(unsigned int **)(a1 + 16));
  if (v5 == 2) {
    return 0;
  }
  if (!*(unsigned char *)(a1 + 32))
  {
    if (!atomic_load(*(unsigned int **)(a1 + 16)))
    {
      unint64_t v8 = audioipc::eventlink_primitive::timed_wait_or_error(*(audioipc::eventlink_primitive **)(a1 + 40), a2);
      if ((v8 & 0xFF00000000) != 0) {
        return v8 != 0;
      }
      audioipc::log_error((audioipc *)"can_send draining", (const char *)v8);
    }
    return 0;
  }
  return 1;
}

BOOL audioipc::ipc_node_base<(audioipc::ipcnode_options)0,audioipc::eventlink_primitive,unilaterally_billed_shared_memory>::signal_wait_with_timeout(uint64_t a1)
{
  atomic_store(0, *(unsigned int **)(a1 + 8));
  unint64_t v2 = audioipc::eventlink_primitive::timed_wait_signal_or_error(*(audioipc::eventlink_primitive **)(a1 + 40), 3.0);
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)(a1 + 33));
  if (v3)
  {
    BOOL result = 0;
    atomic_store(2u, *(unsigned int **)(a1 + 8));
  }
  else
  {
    char v4 = v2;
    unsigned int v5 = *(unsigned int **)(a1 + 8);
    if (HIDWORD(v2))
    {
      atomic_store(1u, v5);
      BOOL result = v2 != 0;
      *(unsigned char *)(a1 + 32) = v4;
    }
    else
    {
      atomic_store(2u, v5);
      audioipc::log_error((audioipc *)"rt_sender::signal_wait_with_timeout", (const char *)v2);
      return 0;
    }
  }
  return result;
}

double auoop::WorkgroupMirror::lookup(auoop::WorkgroupMirror *this, uint64_t a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  LOBYTE(v11) = 0;
  char v15 = 0;
  char v4 = (atomic_uint *)(a2 + 56);
  atomic_fetch_add((atomic_uint *volatile)(a2 + 56), 1u);
  unsigned int v5 = (uint64_t *)atomic_load((unint64_t *)(a2 + 48));
  if (v5)
  {
    caulk::concurrent::guarded_lookup_hash_table<unsigned long,caulk::mach::os_workgroup_managed,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long)>>::table_impl::findSlotForKey(v5, a3);
    long long v6 = (_OWORD *)a2;
    if (a2)
    {
      uint64_t v11 = MEMORY[0x1E4FB7EA0] + 16;
      int v12 = (caulk::mach::details *)caulk::mach::details::retain_os_object(*(caulk::mach::details **)(a2 + 24), (void *)a2);
      long long v7 = v6[3];
      long long v8 = *(_OWORD *)((char *)v6 + 57);
      long long v13 = v6[2];
      v14[0] = v7;
      *(_OWORD *)((char *)v14 + 9) = v8;
      char v15 = 1;
    }
  }
  atomic_fetch_add(v4, 0xFFFFFFFF);
  if (v15)
  {
    *(void *)this = MEMORY[0x1E4FB7EA0] + 16;
    *((void *)this + 1) = caulk::mach::details::retain_os_object(v12, (void *)a2);
    long long v9 = v14[0];
    *((_OWORD *)this + 1) = v13;
    *((_OWORD *)this + 2) = v9;
    double result = *(double *)((char *)v14 + 9);
    *(_OWORD *)((char *)this + 41) = *(_OWORD *)((char *)v14 + 9);
    if (v15) {
      caulk::mach::os_workgroup_managed::~os_workgroup_managed((caulk::mach::os_workgroup_managed *)&v11);
    }
  }
  else
  {
    *((void *)this + 7) = 0;
    *(void *)this = MEMORY[0x1E4FB7EA0] + 16;
    double result = 0.0;
    *(_OWORD *)((char *)this + 8) = 0u;
    *(_OWORD *)((char *)this + 24) = 0u;
    *(_OWORD *)((char *)this + 40) = 0u;
    *((unsigned char *)this + 56) = 0;
  }
  return result;
}

void sub_1900AE120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a17) {
    caulk::mach::os_workgroup_managed::~os_workgroup_managed((caulk::mach::os_workgroup_managed *)&a9);
  }
  _Unwind_Resume(exception_object);
}

audioipc::os_workgroup_joiner *std::optional<audioipc::os_workgroup_joiner>::emplace[abi:ne180100]<caulk::mach::os_workgroup_managed &,void>(audioipc::os_workgroup_joiner *this, uint64_t a2)
{
  if (*((unsigned char *)this + 72))
  {
    audioipc::os_workgroup_joiner::~os_workgroup_joiner(this);
    *((unsigned char *)this + 72) = 0;
  }
  *(void *)this = MEMORY[0x1E4FB7EA0] + 16;
  *((void *)this + 1) = caulk::mach::details::retain_os_object(*(caulk::mach::details **)(a2 + 8), (void *)a2);
  long long v4 = *(_OWORD *)(a2 + 41);
  long long v5 = *(_OWORD *)(a2 + 32);
  *((_OWORD *)this + 1) = *(_OWORD *)(a2 + 16);
  *((_OWORD *)this + 2) = v5;
  *(_OWORD *)((char *)this + 41) = v4;
  *((_DWORD *)this + 16) = caulk::mach::os_workgroup_managed::join(this);
  *((unsigned char *)this + 72) = 1;
  return this;
}

caulk::mach::details **caulk::mach::details::holder::operator=(caulk::mach::details **a1, caulk::mach::details **a2)
{
  if (a1 != a2)
  {
    caulk::mach::details::release_os_object(*a1, a2);
    *a1 = (caulk::mach::details *)caulk::mach::details::retain_os_object(*a2, v4);
  }
  return a1;
}

uint64_t caulk::concurrent::guarded_lookup_hash_table<unsigned long,caulk::mach::os_workgroup_managed,(caulk::concurrent::guarded_lookup_hash_table_options)0,std::function<unsigned int ()(unsigned long)>>::table_impl::findSlotForKey(uint64_t *a1, uint64_t a2)
{
  int v3 = *((_DWORD *)a1 + 2);
  uint64_t v4 = *a1;
  uint64_t v17 = a2;
  uint64_t v5 = *(void *)(v4 + 24);
  if (!v5) {
    goto LABEL_24;
  }
  uint64_t v7 = (*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)v5 + 48))(v5, &v17) % *((_DWORD *)a1 + 2);
  if ((int)v7 >= 3) {
    int v8 = 0;
  }
  else {
    int v8 = v3;
  }
  uint64_t v9 = (v7 + v8 - 3);
  uint64_t v10 = 0xFFFFFFFFLL;
  uint64_t v11 = 1;
  uint64_t v12 = v7;
  while (1)
  {
    uint64_t v13 = v9;
    unint64_t v14 = atomic_load((unint64_t *)&a1[v12 + 2]);
    if (v14 != -1) {
      break;
    }
    if ((int)v10 >= 0) {
      uint64_t v10 = v10;
    }
    else {
      uint64_t v10 = v12;
    }
LABEL_13:
    if ((int)v9 >= 3) {
      int v15 = 0;
    }
    else {
      int v15 = v3;
    }
    uint64_t v9 = (v9 + v15 - 3);
    uint64_t v12 = v13;
    if (v13 == v7)
    {
      if ((v10 & 0x80000000) == 0)
      {
        uint64_t v11 = 0;
        uint64_t v12 = v10;
        return v11 | (v12 << 32);
      }
      __break(1u);
LABEL_24:
      std::__throw_bad_function_call[abi:ne180100]();
    }
  }
  if (v14)
  {
    if (*(void *)(v14 + 8) == a2) {
      return v11 | (v12 << 32);
    }
    goto LABEL_13;
  }
  uint64_t v11 = 0;
  if ((int)v10 >= 0) {
    uint64_t v12 = v10;
  }
  else {
    uint64_t v12 = v12;
  }
  return v11 | (v12 << 32);
}

uint64_t AudioConverterRenderServer::getRenderContext(AudioConverterRenderServer *this)
{
  return *(void *)(*((void *)this + 58) + 24);
}

void AudioConverterRenderServer::~AudioConverterRenderServer(AudioConverterRenderServer *this)
{
  AudioConverterRenderServer::~AudioConverterRenderServer(this);
  JUMPOUT(0x192FC8940);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1EDF8AF88;
  AudioConverterServer::shutdown(this);
  unint64_t v2 = *((void *)this + 59);
  *((void *)this + 59) = 0;
  if (v2) {
    std::default_delete<AudioConverterSharedAudioBuffers>::operator()[abi:ne180100](v2);
  }
  AudioConverterServer::~AudioConverterServer((const void **)this);
}

double AudioConverterPropertyServer::serverThread(AudioConverterPropertyServer *this)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  audioipc::eventlink_primitive::activate();
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)this + 49);
  uint64_t v4 = (unsigned int *)*((void *)this + 3);
  if ((v3 & 1) == 0)
  {
    atomic_store(0, v4);
    unint64_t v5 = audioipc::eventlink_primitive::wait_or_error(*((audioipc::eventlink_primitive **)this + 7));
    unsigned __int8 v6 = atomic_load((unsigned __int8 *)this + 49);
    if ((v6 & 1) == 0)
    {
      int v7 = v5;
      unint64_t v8 = HIDWORD(v5);
      while (1)
      {
        unsigned int v9 = atomic_load(*((unsigned int **)this + 4));
        if (v9 == 2) {
          break;
        }
        if (!(_BYTE)v8)
        {
          uint64_t v20 = CADefaultLog();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
            *(void *)&uint8_t buf[4] = "rt_receiver::receive_loop";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v7;
            _os_log_error_impl(&dword_18FEC0000, v20, OS_LOG_TYPE_ERROR, "%s failed: %d", buf, 0x12u);
          }
          break;
        }
        atomic_store(1u, *((unsigned int **)this + 3));
        uint64_t v10 = (unsigned __int8 *)*((void *)this + 5);
        if (*v10 == 1)
        {
          AudioConverterServer::syncThreadPriorityAndWorkgroup(this);
          int v22 = 336;
          uint64_t v11 = (void *)*((void *)this + 41);
          *uint64_t v11 = *((void *)this + 42);
          uint64_t v12 = *((void *)this + 1);
          int v26 = 1651401828;
          unsigned int v24 = v11;
          int v25 = &v22;
          v23[0] = &v26;
          v23[1] = &v25;
          v23[2] = &v24;
          *(void *)AudioStreamBasicDescription buf = caulk::function_ref<int ()(AudioConverterAPI *)>::functor_invoker<AudioConverterGetProperty::$_0>;
          *(void *)&uint8_t buf[8] = v23;
          int v13 = with_resolved(v12, (uint64_t (**)(uint64_t, uint64_t))buf);
          *uint64_t v11 = 0;
          *((_DWORD *)v10 + 1) = v13;
        }
        else
        {
          AudioConverterLog();
          unint64_t v14 = AudioConverterLog(void)::gLog;
          if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
          {
            int v15 = *v10;
            *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
            *(void *)&uint8_t buf[4] = "AudioConverterPropertyServer.h";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 60;
            __int16 v28 = 1024;
            int v29 = v15;
            _os_log_impl(&dword_18FEC0000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown or unexpected message: %d", buf, 0x18u);
          }
        }
        *(_WORD *)uint64_t v10 = 25856;
        unsigned __int8 v16 = atomic_load((unsigned __int8 *)this + 49);
        if ((v16 & 1) == 0)
        {
          unsigned int v17 = atomic_load(*((unsigned int **)this + 4));
          if (v17 != 2)
          {
            atomic_store(0, *((unsigned int **)this + 3));
            unint64_t v18 = audioipc::eventlink_primitive::wait_signal_or_error(*((audioipc::eventlink_primitive **)this + 7));
            LOBYTE(v8) = HIDWORD(v18) != 0;
            if (!HIDWORD(v18)) {
              int v7 = v18;
            }
            unsigned __int8 v19 = atomic_load((unsigned __int8 *)this + 49);
            if ((v19 & 1) == 0) {
              continue;
            }
          }
        }
        break;
      }
    }
    uint64_t v4 = (unsigned int *)*((void *)this + 3);
  }
  atomic_store(2u, v4);
  *(void *)&double result = AudioConverterServer::WorkgroupJoiner::leave((AudioConverterPropertyServer *)((char *)this + 128), v2).n128_u64[0];
  return result;
}

uint64_t AudioConverterPropertyServer::getRenderContext(AudioConverterPropertyServer *this)
{
  return *(void *)(*((void *)this + 40) + 8);
}

void AudioConverterPropertyServer::~AudioConverterPropertyServer(AudioConverterPropertyServer *this)
{
  AudioConverterPropertyServer::~AudioConverterPropertyServer(this);
  JUMPOUT(0x192FC8940);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EDF8AFB8;
  AudioConverterServer::shutdown(this);
  AudioConverterServer::~AudioConverterServer((const void **)this);
}

swix::data *swix::data::data(swix::data *this, const void *bytes, size_t length)
{
  xpc_object_t v4 = xpc_data_create(bytes, length);
  *(void *)this = v4;
  if (!v4) {
    *(void *)this = xpc_null_create();
  }
  return this;
}

uint64_t AudioConverterPropertyMarshaller::InvalidPropertySizeError(AudioConverterPropertyMarshaller *this)
{
  return 561211770;
}

uint64_t AudioConverterPropertyMarshaller::UnknownPropertyError(AudioConverterPropertyMarshaller *this)
{
  return 1886547824;
}

uint64_t AudioConverterPropertyMarshaller::GetMarshaller(AudioConverterPropertyMarshaller *this, int a2)
{
  if (a2 <= 1685218161)
  {
    if (a2 <= 1634493036)
    {
      if (a2 > 1584688226)
      {
        if (a2 > 1633904995)
        {
          if (a2 <= 1634038641)
          {
            if (a2 <= 1633907487)
            {
              if (a2 != 1633904996 && a2 != 1633906532)
              {
                int v2 = 1633906803;
LABEL_213:
                if (a2 == v2) {
LABEL_214:
                }
                  operator new();
                goto LABEL_283;
              }
LABEL_166:
              operator new();
            }
            if (a2 == 1633907488) {
              goto LABEL_214;
            }
            if (a2 != 1634034290)
            {
              if (a2 != 1634034540) {
                goto LABEL_283;
              }
              goto LABEL_287;
            }
LABEL_221:
            operator new();
          }
          if (a2 <= 1634296683)
          {
            if (a2 == 1634038642) {
              goto LABEL_221;
            }
            if (a2 == 1634103408) {
              goto LABEL_263;
            }
            int v3 = 1634167140;
            goto LABEL_262;
          }
          if (a2 == 1634296684) {
            goto LABEL_287;
          }
          if (a2 == 1634300786) {
            goto LABEL_221;
          }
          int v9 = 1634366322;
          goto LABEL_229;
        }
        if (a2 > 1633842275)
        {
          if (a2 <= 1633903973)
          {
            if (a2 == 1633842276 || a2 == 1633903204) {
              goto LABEL_263;
            }
            int v3 = 1633903206;
            goto LABEL_262;
          }
          if (a2 == 1633903974) {
            goto LABEL_263;
          }
          if (a2 == 1633904233) {
            operator new();
          }
          if (a2 != 1633904236) {
            goto LABEL_283;
          }
LABEL_192:
          operator new();
        }
        if (a2 > 1584952427)
        {
          if (a2 != 1584952428)
          {
            if (a2 == 1633776744) {
              operator new();
            }
            int v3 = 1633842022;
            goto LABEL_262;
          }
LABEL_267:
          operator new();
        }
        if (a2 == 1584688227) {
          goto LABEL_263;
        }
        int v3 = 1584948336;
        goto LABEL_262;
      }
      if (a2 > 1584165743)
      {
        if (a2 <= 1584428139)
        {
          if (a2 > 1584426092)
          {
            if (a2 == 1584426093) {
              goto LABEL_267;
            }
            if (a2 == 1584427631) {
              goto LABEL_263;
            }
            int v3 = 1584427884;
            goto LABEL_262;
          }
          if (a2 == 1584165744) {
            goto LABEL_263;
          }
          int v6 = 1584229484;
          goto LABEL_266;
        }
        if (a2 <= 1584620387)
        {
          if (a2 != 1584428140)
          {
            if (a2 == 1584488812) {
              goto LABEL_263;
            }
            if (a2 == 1584555632) {
              operator new();
            }
            goto LABEL_283;
          }
          goto LABEL_267;
        }
        if (a2 != 1584620388)
        {
          if (a2 == 1584620400) {
            goto LABEL_263;
          }
          int v2 = 1584620643;
          goto LABEL_213;
        }
      }
      else
      {
        if (a2 > 1583572072)
        {
          if (a2 <= 1583576435)
          {
            if (a2 == 1583572073) {
              goto LABEL_214;
            }
            if (a2 == 1583574386) {
              operator new();
            }
            int v4 = 1583574640;
            goto LABEL_45;
          }
          if (a2 == 1583576436) {
            goto LABEL_267;
          }
          if (a2 == 1583640678) {
            operator new();
          }
          int v6 = 1584164460;
LABEL_266:
          if (a2 != v6) {
            goto LABEL_283;
          }
          goto LABEL_267;
        }
        if (a2 <= 1583440992)
        {
          if (a2 == 560227360) {
            goto LABEL_263;
          }
          int v3 = 610889331;
          goto LABEL_262;
        }
        if (a2 != 1583440993)
        {
          if (a2 == 1583506551) {
            goto LABEL_263;
          }
          int v6 = 1583510388;
          goto LABEL_266;
        }
      }
LABEL_290:
      operator new();
    }
    if (a2 <= 1668309873)
    {
      if (a2 > 1651668081)
      {
        if (a2 > 1668114274)
        {
          if (a2 <= 1668247148)
          {
            if (a2 != 1668114275)
            {
              if (a2 == 1668116067) {
                goto LABEL_287;
              }
              int v3 = 1668244083;
              goto LABEL_262;
            }
            goto LABEL_290;
          }
          if (a2 == 1668247149) {
            goto LABEL_263;
          }
          if (a2 == 1668248169) {
            operator new();
          }
          int v9 = 1668248434;
LABEL_229:
          if (a2 != v9) {
            goto LABEL_283;
          }
LABEL_230:
          operator new();
        }
        if (a2 <= 1667788143)
        {
          if (a2 == 1651668082) {
            goto LABEL_221;
          }
          if (a2 == 1667527029) {
            goto LABEL_263;
          }
          int v3 = 1667527267;
          goto LABEL_262;
        }
        if (a2 != 1667788144)
        {
          if (a2 == 1667850867) {
            goto LABEL_263;
          }
          int v9 = 1667855218;
          goto LABEL_229;
        }
LABEL_268:
        operator new();
      }
      if (a2 <= 1634955365)
      {
        if (a2 <= 1634689899)
        {
          if (a2 == 1634493037) {
            goto LABEL_263;
          }
          int v3 = 1634562669;
        }
        else
        {
          if (a2 == 1634689900) {
            goto LABEL_287;
          }
          if (a2 == 1634694002) {
            goto LABEL_221;
          }
          int v3 = 1634757731;
        }
        goto LABEL_262;
      }
      if (a2 <= 1651663219)
      {
        if (a2 == 1634955366) {
          goto LABEL_263;
        }
        if (a2 == 1651401828) {
          operator new();
        }
        int v3 = 1651401847;
        goto LABEL_262;
      }
      if (a2 == 1651663220) {
        goto LABEL_263;
      }
      if (a2 == 1651668003) {
        goto LABEL_287;
      }
      int v7 = 1651668065;
LABEL_200:
      if (a2 != v7) {
        goto LABEL_283;
      }
      goto LABEL_221;
    }
    if (a2 > 1684369509)
    {
      if (a2 > 1684893539)
      {
        if (a2 > 1685218145)
        {
          if ((a2 - 1685218146) >= 2)
          {
            int v3 = 1685218160;
            goto LABEL_262;
          }
          goto LABEL_267;
        }
        if (a2 == 1684893540) {
          goto LABEL_263;
        }
        int v3 = 1685089087;
LABEL_262:
        if (a2 == v3) {
          goto LABEL_263;
        }
        goto LABEL_283;
      }
      if (a2 <= 1684826476)
      {
        if (a2 == 1684369510) {
          goto LABEL_263;
        }
        if (a2 == 1684496752) {
          operator new();
        }
        int v3 = 1684632680;
        goto LABEL_262;
      }
      if (a2 == 1684826477) {
        goto LABEL_263;
      }
      if (a2 != 1684891491)
      {
        int v3 = 1684892024;
        goto LABEL_262;
      }
      goto LABEL_290;
    }
    if (a2 <= 1668510306)
    {
      if (a2 <= 1668312418)
      {
        if (a2 == 1668309874) {
          operator new();
        }
        if (a2 == 1668310371) {
          operator new();
        }
        goto LABEL_283;
      }
      if (a2 == 1668312419) {
        operator new();
      }
      if (a2 == 1668312939) {
LABEL_287:
      }
        operator new();
      int v3 = 1668441705;
      goto LABEL_262;
    }
    if (a2 <= 1684238188)
    {
      if (a2 != 1668510307)
      {
        if (a2 == 1684171124) {
          goto LABEL_263;
        }
        int v3 = 1684234608;
        goto LABEL_262;
      }
      goto LABEL_268;
    }
    if (a2 == 1684238189) {
      goto LABEL_263;
    }
    if (a2 == 1684238952) {
      goto LABEL_290;
    }
    int v5 = 1684238960;
LABEL_208:
    if (a2 != v5) {
      goto LABEL_283;
    }
    goto LABEL_290;
  }
  if (a2 > 1885627759)
  {
    if (a2 > 1936286831)
    {
      if (a2 <= 1970434929)
      {
        if (a2 <= 1936876399)
        {
          if (a2 <= 1936748399)
          {
            if (a2 == 1936286832) {
              goto LABEL_263;
            }
            int v3 = 1936551780;
          }
          else
          {
            if (a2 == 1936748400 || a2 == 1936876385) {
              goto LABEL_263;
            }
            int v3 = 1936876393;
          }
          goto LABEL_262;
        }
        if (a2 > 1952539490)
        {
          if (a2 == 1952539491 || a2 == 1952609638) {
            goto LABEL_263;
          }
          int v3 = 1969386854;
          goto LABEL_262;
        }
        if (a2 == 1936876400) {
          goto LABEL_230;
        }
        if (a2 == 1936876401) {
          goto LABEL_263;
        }
        int v4 = 1936945516;
LABEL_45:
        if (a2 == v4) {
LABEL_46:
        }
          operator new();
        goto LABEL_283;
      }
      if (a2 > 1986946670)
      {
        if (a2 > 2020172402)
        {
          if (a2 == 2020172403 || a2 == 2020175987) {
            goto LABEL_263;
          }
          int v3 = 2020569203;
        }
        else
        {
          if (a2 == 1986946671) {
            operator new();
          }
          if (a2 == 1987076466) {
            goto LABEL_263;
          }
          int v3 = 1987078975;
        }
        goto LABEL_262;
      }
      if (a2 <= 1986163312)
      {
        if (a2 == 1970434930) {
          goto LABEL_263;
        }
        int v3 = 1986163298;
        goto LABEL_262;
      }
      if (a2 == 1986163313) {
        goto LABEL_263;
      }
      if (a2 == 1986355826) {
        goto LABEL_221;
      }
      int v7 = 1986360178;
      goto LABEL_200;
    }
    if (a2 <= 1886678114)
    {
      if (a2 > 1886353265)
      {
        if (a2 > 1886545515)
        {
          if (a2 == 1886545516) {
            goto LABEL_267;
          }
          if (a2 == 1886546285) {
            operator new();
          }
          int v3 = 1886547309;
          goto LABEL_262;
        }
        if (a2 == 1886353266) {
          goto LABEL_263;
        }
        int v6 = 1886418028;
        goto LABEL_266;
      }
      if (a2 <= 1885759083)
      {
        if (a2 == 1885627760) {
          goto LABEL_263;
        }
        int v3 = 1885758819;
        goto LABEL_262;
      }
      if (a2 == 1885759084 || a2 == 1885823853) {
        goto LABEL_263;
      }
      if (a2 == 1886090345) {
        operator new();
      }
      goto LABEL_283;
    }
    if (a2 > 1935893602)
    {
      if (a2 <= 1936024439)
      {
        switch(a2)
        {
          case 1935893603:
            goto LABEL_214;
          case 1935896165:
            operator new();
          case 1935896684:
            operator new();
        }
        goto LABEL_283;
      }
      if (a2 == 1936024440 || a2 == 1936028012) {
        goto LABEL_263;
      }
      int v2 = 1936286825;
      goto LABEL_213;
    }
    if (a2 <= 1919185762)
    {
      if (a2 == 1886678115) {
        goto LABEL_263;
      }
      int v3 = 1919116144;
      goto LABEL_262;
    }
    if (a2 != 1919185763)
    {
      if (a2 == 1919837298) {
        goto LABEL_263;
      }
      int v3 = 1935765606;
      goto LABEL_262;
    }
    goto LABEL_269;
  }
  if (a2 > 1832150385)
  {
    if (a2 <= 1868786719)
    {
      if (a2 <= 1835623026)
      {
        if (a2 <= 1835296370)
        {
          if (a2 == 1832150386) {
            goto LABEL_263;
          }
          unsigned __int16 v8 = 25446;
        }
        else
        {
          if (a2 == 1835296371 || a2 == 1835298918) {
            goto LABEL_263;
          }
          unsigned __int16 v8 = 29283;
        }
        int v3 = v8 | 0x6D640000;
        goto LABEL_262;
      }
      if (a2 <= 1835954031)
      {
        if (a2 == 1835623027 || a2 == 1835626096) {
          goto LABEL_263;
        }
        int v3 = 1835952496;
        goto LABEL_262;
      }
      if (a2 == 1835954032 || a2 == 1836016243) {
        goto LABEL_263;
      }
      int v5 = 1868784752;
      goto LABEL_208;
    }
    if (a2 > 1869836896)
    {
      if ((a2 - 1885432674) <= 0xB && ((1 << (a2 - 98)) & 0xC15) != 0) {
        goto LABEL_263;
      }
      if (a2 == 1869836897) {
        goto LABEL_221;
      }
      int v3 = 1885430832;
      goto LABEL_262;
    }
    if (a2 > 1868983586)
    {
      if (a2 != 1868983587)
      {
        if (a2 == 1868983668) {
          goto LABEL_166;
        }
        int v3 = 1869639794;
        goto LABEL_262;
      }
      goto LABEL_233;
    }
    if (a2 != 1868786720)
    {
      if (a2 != 1868969065) {
        goto LABEL_283;
      }
      goto LABEL_233;
    }
LABEL_234:
    operator new();
  }
  if (a2 <= 1768305774)
  {
    if (a2 <= 1718383475)
    {
      if (a2 > 1702060387)
      {
        if (a2 == 1702060388 || a2 == 1717925491) {
          goto LABEL_263;
        }
        int v3 = 1718383464;
        goto LABEL_262;
      }
      if (a2 != 1685218162)
      {
        if (a2 == 1685218164) {
          operator new();
        }
        goto LABEL_283;
      }
      goto LABEL_267;
    }
    if (a2 <= 1752658553)
    {
      if (a2 != 1718383476)
      {
        if (a2 == 1718842483) {
          goto LABEL_263;
        }
        if (a2 == 1735422066) {
          operator new();
        }
        goto LABEL_283;
      }
      goto LABEL_192;
    }
    if (a2 != 1752658554)
    {
      if (a2 == 1768121456) {
        goto LABEL_290;
      }
      if (a2 != 1768123424) {
        goto LABEL_283;
      }
      goto LABEL_234;
    }
LABEL_269:
    operator new();
  }
  if (a2 <= 1769172836)
  {
    if (a2 > 1768711272)
    {
      if (a2 == 1768711273) {
        goto LABEL_214;
      }
      if (a2 == 1768780388) {
        operator new();
      }
      int v3 = 1768843636;
      goto LABEL_262;
    }
    if (a2 != 1768305775 && a2 != 1768320291)
    {
      if (a2 != 1768320372) {
        goto LABEL_283;
      }
      goto LABEL_166;
    }
LABEL_233:
    operator new();
  }
  if (a2 <= 1818518130)
  {
    if (a2 == 1769172837) {
      goto LABEL_214;
    }
    if (a2 == 1769173601) {
      goto LABEL_221;
    }
    int v5 = 1802857321;
    goto LABEL_208;
  }
  if (a2 == 1818518131 || a2 == 1819112035) {
    goto LABEL_263;
  }
  if (a2 == 1832022884) {
    operator new();
  }
LABEL_283:
  uint64_t result = 0;
  if (a2 > 3199)
  {
    switch(a2)
    {
      case 3200:
      case 3202:
      case 3204:
      case 3206:
      case 3208:
        operator new();
      case 3201:
      case 3203:
      case 3205:
      case 3207:
      case 3209:
        operator new();
      case 3210:
      case 3211:
      case 3212:
      case 3213:
      case 3215:
      case 3216:
      case 3217:
      case 3218:
      case 3219:
      case 3220:
      case 3221:
      case 3222:
      case 3224:
      case 3225:
      case 3226:
      case 3227:
      case 3228:
      case 3229:
      case 3232:
      case 3234:
      case 3235:
      case 3239:
      case 3242:
        return result;
      case 3214:
      case 3230:
      case 3233:
      case 3236:
      case 3240:
      case 3243:
      case 3244:
        goto LABEL_263;
      case 3223:
      case 3238:
      case 3241:
        goto LABEL_267;
      case 3231:
        goto LABEL_290;
      case 3237:
        goto LABEL_46;
      default:
        if (a2 != 4600) {
          return result;
        }
        goto LABEL_263;
    }
  }
  if (a2 > 3099)
  {
    switch(a2)
    {
      case 3100:
      case 3101:
      case 3103:
      case 3106:
      case 3110:
      case 3111:
      case 3113:
      case 3114:
      case 3116:
        goto LABEL_263;
      case 3102:
      case 3115:
        goto LABEL_46;
      case 3104:
      case 3105:
        operator new();
      case 3107:
        goto LABEL_214;
      case 3108:
        goto LABEL_267;
      case 3109:
      case 3112:
        goto LABEL_287;
      default:
        return result;
    }
  }
  if ((a2 - 3000) <= 0xD)
  {
    if (((1 << (a2 + 72)) & 0x2029) != 0) {
      goto LABEL_263;
    }
    if (a2 == 3010) {
      operator new();
    }
  }
  if (a2 <= 0x25 && ((1 << a2) & 0x2004000400) != 0 || a2 == 1005) {
LABEL_263:
  }
    operator new();
  return result;
}

void AudioConverterPropertyMarshaller::~AudioConverterPropertyMarshaller(AudioConverterPropertyMarshaller *this)
{
  PropertyMarshaller::~PropertyMarshaller(this);
  JUMPOUT(0x192FC8940);
}

void sub_1900B0304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1900B0388(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1900B0444(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CrashHandlerLogCategory(void)
{
  {
    caulk::log_category::log_category((caulk::log_category *)&CrashHandlerLogCategory(void)::category, "com.apple.coreaudio", "crashhandler");
  }
}

void sub_1900B05F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1900B07E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1900B09DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  uint64_t v10 = v9;

  a9.super_class = (Class)AUCrashHandler;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1900B0B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  unsigned __int8 v19 = v18;
  objc_destroyWeak(v19);

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1900B0BE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1900B0CC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<void ()(AudioComponentVector const&,AudioComponentVector&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(AudioComponentVector const&,AudioComponentVector&)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__destroy_at[abi:ne180100]<AUExtensionScanner::ExtensionComponents,0>(uint64_t a1)
{
  int v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  uint64_t v3 = *(void **)a1;
}

uint64_t std::__shared_ptr_pointer<AUExtensionScanner::NSExtensionImpl  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

void std::__shared_ptr_pointer<AUExtensionScanner::NSExtensionImpl  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

void AUExtensionScanner::NSExtensionImpl::~NSExtensionImpl(AUExtensionScanner::NSExtensionImpl *this)
{
}

id AUExtensionScanner::NSExtensionImpl::beginMatchingExtensions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = [MEMORY[0x1E4F28C70] beginMatchingExtensionsWithAttributes:a2 completion:a3];
  return v3;
}

void AUExtensionScanner::componentsForExtension(AUExtensionScanner *this, NSExtension *a2, void *a3)
{
  v100[4] = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id v91 = v5;
  int v6 = (char *)operator new(0x38uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = &unk_1EDFA2188;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  v6[48] = 1;
  *(void *)this = v6 + 24;
  *((void *)this + 1) = v6;
  int v7 = [v5 attributes];
  unsigned __int16 v8 = [v7 objectForKeyedSubscript:@"AudioComponentBundle"];

  if (v8) {
    int v9 = 28;
  }
  else {
    int v9 = 12;
  }
  uint64_t v10 = [v91 attributes];
  uint64_t v11 = [v10 objectForKeyedSubscript:@"AudioComponents"];

  if (!v11) {
    goto LABEL_85;
  }
  uint64_t v12 = self;
  char isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) == 0) {
    goto LABEL_85;
  }
  id v14 = [v91 identifier];
  int v15 = (void *)[objc_alloc(MEMORY[0x1E4F1CB18]) initWithSuiteName:@"com.apple.audio.ComponentRegistrationOverrides"];
  [v15 synchronize];
  unsigned __int8 v16 = [v15 objectForKey:v14];
  if (v16)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      unsigned int v17 = v16;
    }
    else {
      unsigned int v17 = 0;
    }
  }
  else
  {
    unsigned int v17 = 0;
  }
  id v18 = v17;

  if (v18)
  {
    id v19 = v18;

    uint64_t v11 = v19;
  }
  id v20 = v11;
  CFRetain(v20);
  id v85 = v18;
  applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&cf, v20);

  v100[0] = &unk_1EDFA0720;
  v100[1] = &v91;
  v100[2] = this;
  v100[3] = v100;
  AudioComponentRegistrationInfo::parseInfoPlistArray(v9, 0, (CFArrayRef *)&cf, (uint64_t)v100);
  std::__function::__value_func<void ()(AudioComponentRegistrationInfo &)>::~__value_func[abi:ne180100](v100);
  if (cf) {
    CFRelease(cf);
  }
  id v21 = v91;
  obuint64_t j = v21;
  id v22 = v20;
  uint64_t v24 = *(void *)this;
  uint64_t v23 = (std::__shared_weak_count *)*((void *)this + 1);
  id v88 = v22;
  uint64_t v89 = v24;
  int v90 = v23;
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v25 = (id *)*((void *)a2 + 16);
  unint64_t v26 = *((void *)a2 + 17);
  std::string v27 = objc_msgSend(v21, "identifier", v85);
  if ((id *)v26 != v25)
  {
    unint64_t v28 = (uint64_t)(v26 - (void)v25) >> 5;
    do
    {
      int v29 = &v25[4 * (v28 >> 1)];
      int v30 = AUExtensionScanner::ExtensionComponents::operator<(v29, v27);
      if (v30) {
        v28 += ~(v28 >> 1);
      }
      else {
        v28 >>= 1;
      }
      if (v30) {
        int v25 = v29 + 4;
      }
    }
    while (v28);
    unint64_t v26 = (unint64_t)v25;
  }

  if (*((void *)a2 + 17) == v26)
  {
    int v36 = (char *)v26;
  }
  else
  {
    int64_t v31 = [*(id *)v26 identifier];
    int v32 = [v91 identifier];
    char v33 = [v31 isEqualToString:v32];

    if (v33)
    {
      objc_storeStrong((id *)v26, obj);
      objc_storeStrong((id *)(v26 + 8), v88);
      size_t v34 = v90;
      if (v90) {
        atomic_fetch_add_explicit(&v90->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      __int16 v35 = *(std::__shared_weak_count **)(v26 + 24);
      *(void *)(v26 + 16) = v89;
      *(void *)(v26 + 24) = v34;
      if (!v35) {
        goto LABEL_82;
      }
      goto LABEL_49;
    }
    int v36 = (char *)*((void *)a2 + 17);
  }
  unint64_t v37 = *((void *)a2 + 18);
  uint64_t v38 = *((void *)a2 + 16);
  uint64_t v39 = v26 - v38;
  uint64_t v40 = (uint64_t)(v26 - v38) >> 5;
  if ((unint64_t)v36 >= v37)
  {
    unint64_t v59 = ((uint64_t)&v36[-v38] >> 5) + 1;
    if (v59 >> 59) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v60 = v37 - v38;
    if (v60 >> 4 > v59) {
      unint64_t v59 = v60 >> 4;
    }
    if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v61 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v61 = v59;
    }
    std::vector<char>::pointer v95 = (char *)a2 + 144;
    if (v61)
    {
      uint64_t v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<KVOAggregator::Record>>(v61);
    }
    else
    {
      uint64_t v63 = 0;
      uint64_t v62 = 0;
    }
    uint64_t v64 = (uint64_t *)&v63[32 * v40];
    BOOL v92 = v63;
    *(void *)&long long v93 = v64;
    *((void *)&v93 + 1) = v64;
    int v94 = &v63[32 * v62];
    if (v40 == v62)
    {
      if (v39 < 1)
      {
        if (v26 == v38) {
          unint64_t v67 = 1;
        }
        else {
          unint64_t v67 = v39 >> 4;
        }
        unint64_t v99 = (char *)a2 + 144;
        uint64_t v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<KVOAggregator::Record>>(v67);
        uint64_t v70 = (long long *)v93;
        if (*((void *)&v93 + 1) == (void)v93)
        {
          int64x2_t v74 = vdupq_n_s64(v93);
          uint64_t v71 = (uint64_t)&v68[32 * (v67 >> 2)];
        }
        else
        {
          uint64_t v71 = (uint64_t)&v68[32 * (v67 >> 2) + *((void *)&v93 + 1) - v93];
          int v72 = &v68[32 * (v67 >> 2)];
          do
          {
            long long v73 = *v70;
            *uint64_t v70 = 0uLL;
            *(_OWORD *)int v72 = v73;
            *((_OWORD *)v72 + 1) = v70[1];
            v70[1] = 0uLL;
            v72 += 32;
            v70 += 2;
          }
          while (v72 != (char *)v71);
          int64x2_t v74 = (int64x2_t)v93;
        }
        uint64_t v75 = v94;
        CFTypeRef cf = v92;
        BOOL v92 = v68;
        *(void *)&long long v93 = &v68[32 * (v67 >> 2)];
        int64x2_t v97 = v74;
        *((void *)&v93 + 1) = v71;
        int v94 = &v68[32 * v69];
        std::vector<char>::size_type v98 = v75;
        std::__split_buffer<AUExtensionScanner::ExtensionComponents>::~__split_buffer((uint64_t)&cf);
        uint64_t v64 = (uint64_t *)*((void *)&v93 + 1);
      }
      else
      {
        unint64_t v65 = v40 + 2;
        if (v40 >= -1) {
          unint64_t v65 = v40 + 1;
        }
        unint64_t v66 = v65 >> 1;
        uint64_t v64 = (uint64_t *)std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<AUExtensionScanner::ExtensionComponents *,AUExtensionScanner::ExtensionComponents *,AUExtensionScanner::ExtensionComponents *>(v64, v64, (uint64_t)&v64[-4 * (v65 >> 1)]);
        *(void *)&long long v93 = v93 - 32 * v66;
        *((void *)&v93 + 1) = v64;
      }
    }
    std::construct_at[abi:ne180100]<AUExtensionScanner::ExtensionComponents,AUExtensionScanner::ExtensionComponents const&,AUExtensionScanner::ExtensionComponents*>(v64, (uint64_t)&obj);
    uint64_t v76 = v93;
    uint64_t v77 = (_OWORD *)(*((void *)&v93 + 1) + 32);
    *((void *)&v93 + 1) += 32;
    uint64_t v78 = (_OWORD *)*((void *)a2 + 16);
    if (v78 != (_OWORD *)v26)
    {
      int v79 = (_OWORD *)v26;
      do
      {
        long long v80 = *(v79 - 2);
        v79 -= 2;
        *int v79 = 0uLL;
        *(_OWORD *)(v76 - 32) = v80;
        v76 -= 32;
        *(_OWORD *)(v76 + 16) = v79[1];
        v79[1] = 0uLL;
      }
      while (v79 != v78);
      uint64_t v77 = (_OWORD *)*((void *)&v93 + 1);
    }
    *(void *)&long long v93 = v76;
    uint64_t v81 = *((void *)a2 + 17);
    if (v81 != v26)
    {
      do
      {
        long long v82 = *(_OWORD *)v26;
        *(_OWORD *)unint64_t v26 = 0uLL;
        *uint64_t v77 = v82;
        v77[1] = *(_OWORD *)(v26 + 16);
        *(_OWORD *)(v26 + 16) = 0uLL;
        v77 += 2;
        v26 += 32;
      }
      while (v26 != v81);
      uint64_t v76 = v93;
      unint64_t v26 = *((void *)a2 + 17);
    }
    unint64_t v83 = (const void *)*((void *)a2 + 16);
    *((void *)a2 + 16) = v76;
    *((void *)a2 + 17) = v77;
    int v84 = (char *)*((void *)a2 + 18);
    *((void *)a2 + 18) = v94;
    *((void *)&v93 + 1) = v26;
    int v94 = v84;
    BOOL v92 = v83;
    *(void *)&long long v93 = v83;
    std::__split_buffer<AUExtensionScanner::ExtensionComponents>::~__split_buffer((uint64_t)&v92);
    goto LABEL_82;
  }
  if ((char *)v26 == v36)
  {
    *((void *)a2 + 17) = std::construct_at[abi:ne180100]<AUExtensionScanner::ExtensionComponents,AUExtensionScanner::ExtensionComponents const&,AUExtensionScanner::ExtensionComponents*>(v36, (uint64_t)&obj)+ 4;
    goto LABEL_82;
  }
  uint64_t v41 = (char *)(v26 + 32);
  uint64_t v42 = v36 - 32;
  uint64_t v43 = v36;
  if ((unint64_t)v36 >= 0x20)
  {
    uint64_t v44 = v36 - 32;
    uint64_t v43 = v36;
    do
    {
      long long v45 = *(_OWORD *)v44;
      *(_OWORD *)uint64_t v44 = 0uLL;
      *(_OWORD *)uint64_t v43 = v45;
      *((_OWORD *)v43 + 1) = *((_OWORD *)v44 + 1);
      *((_OWORD *)v44 + 1) = 0uLL;
      v43 += 32;
      v44 += 32;
    }
    while (v44 < v36);
  }
  *((void *)a2 + 17) = v43;
  if (v36 != v41)
  {
    uint64_t v46 = 32 * ((v36 - v41) >> 5);
    do
    {
      uint64_t v47 = *(void *)(v26 + v46 - 32);
      *(void *)(v26 + v46 - 32) = 0;
      uint64_t v48 = *(void **)v42;
      *(void *)uint64_t v42 = v47;

      uint64_t v49 = *(void *)(v26 + v46 - 24);
      *(void *)(v26 + v46 - 24) = 0;
      unsigned int v50 = (void *)*((void *)v42 + 1);
      *((void *)v42 + 1) = v49;

      unint64_t v51 = v26 + v46;
      long long v52 = *(_OWORD *)(v26 + v46 - 16);
      *(void *)(v51 - 16) = 0;
      *(void *)(v51 - 8) = 0;
      int v53 = (std::__shared_weak_count *)*((void *)v42 + 3);
      *((_OWORD *)v42 + 1) = v52;
      if (v53) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v53);
      }
      v42 -= 32;
      v46 -= 32;
    }
    while (v46);
  }
  p_obuint64_t j = &obj;
  if (v26 <= (unint64_t)&obj) {
    p_obuint64_t j = &obj + 4 * (*((void *)a2 + 17) > (unint64_t)&obj);
  }
  objc_storeStrong((id *)v26, *p_obj);
  uint64_t v55 = v38 + 32 * v40;
  objc_storeStrong((id *)(v55 + 8), p_obj[1]);
  id v57 = p_obj[2];
  int v56 = (atomic_ullong *)p_obj[3];
  if (v56) {
    atomic_fetch_add_explicit(v56 + 1, 1uLL, memory_order_relaxed);
  }
  *(void *)(v55 + 16) = v57;
  uint64_t v58 = v38 + 32 * v40;
  __int16 v35 = *(std::__shared_weak_count **)(v58 + 24);
  *(void *)(v58 + 24) = v56;
  if (!v35) {
    goto LABEL_82;
  }
LABEL_49:
  std::__shared_weak_count::__release_shared[abi:ne180100](v35);
LABEL_82:
  if (v90) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v90);
  }

  uint64_t v11 = v22;
LABEL_85:
}

void sub_1900B1614(_Unwind_Exception *a1, void *a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  id v12 = va_arg(va1, id);
  std::__split_buffer<AUExtensionScanner::ExtensionComponents>::~__split_buffer((uint64_t)va1);
  AUExtensionScanner::ExtensionComponents::~ExtensionComponents((AUExtensionScanner::ExtensionComponents *)va);

  int v6 = *(std::__shared_weak_count **)(v3 + 8);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }

  _Unwind_Resume(a1);
}

unint64_t AUExtensionScanner::ExtensionComponents::operator<(id *a1, void *a2)
{
  id v3 = a2;
  int v4 = [*a1 identifier];
  unint64_t v5 = [v4 compare:v3];

  return v5 >> 63;
}

void sub_1900B1790(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void AUExtensionScanner::ExtensionComponents::~ExtensionComponents(AUExtensionScanner::ExtensionComponents *this)
{
  int v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void *std::construct_at[abi:ne180100]<AUExtensionScanner::ExtensionComponents,AUExtensionScanner::ExtensionComponents const&,AUExtensionScanner::ExtensionComponents*>(void *a1, uint64_t a2)
{
  *a1 = *(id *)a2;
  id v4 = *(id *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  a1[1] = v4;
  a1[2] = v6;
  a1[3] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

uint64_t std::__split_buffer<AUExtensionScanner::ExtensionComponents>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
    std::__destroy_at[abi:ne180100]<AUExtensionScanner::ExtensionComponents,0>(i - 32);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<AUExtensionScanner::ExtensionComponents *,AUExtensionScanner::ExtensionComponents *,AUExtensionScanner::ExtensionComponents *>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      uint64_t v6 = *v5;
      uint64_t *v5 = 0;
      uint64_t v7 = *(void **)a3;
      *(void *)a3 = v6;

      uint64_t v8 = v5[1];
      v5[1] = 0;
      uint64_t v9 = *(void **)(a3 + 8);
      *(void *)(a3 + 8) = v8;

      long long v10 = *((_OWORD *)v5 + 1);
      id v5[2] = 0;
      void v5[3] = 0;
      uint64_t v11 = *(std::__shared_weak_count **)(a3 + 24);
      *(_OWORD *)(a3 + 16) = v10;
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
      a3 += 32;
      v5 += 4;
    }
    while (v5 != a2);
  }
  return a3;
}

void std::__function::__func<AUExtensionScanner::componentsForExtension(NSExtension *)::$_0,std::allocator<AUExtensionScanner::componentsForExtension(NSExtension *)::$_0>,void ()(AudioComponentRegistrationInfo &)>::operator()(uint64_t a1, const AudioComponentRegistrationInfo *a2)
{
  id v4 = [**(id **)(a1 + 8) identifier];
  APComponent_NSExtension::create_shared((APComponent_NSExtension *)&v5, a2, v4, **(NSExtension ***)(a1 + 8));
}

void sub_1900B19C0(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__function::__func<AUExtensionScanner::componentsForExtension(NSExtension *)::$_0,std::allocator<AUExtensionScanner::componentsForExtension(NSExtension *)::$_0>,void ()(AudioComponentRegistrationInfo &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EDFA0720;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AUExtensionScanner::componentsForExtension(NSExtension *)::$_0,std::allocator<AUExtensionScanner::componentsForExtension(NSExtension *)::$_0>,void ()(AudioComponentRegistrationInfo &)>::__clone(uint64_t a1)
{
  int v2 = (char *)operator new(0x18uLL);
  *(void *)int v2 = &unk_1EDFA0720;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<AUExtensionScanner::componentsForExtension(NSExtension *)::$_0,std::allocator<AUExtensionScanner::componentsForExtension(NSExtension *)::$_0>,void ()(AudioComponentRegistrationInfo &)>::~__func()
{
}

void std::__shared_ptr_emplace<AudioComponentVector>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<std::shared_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__shared_ptr_emplace<AudioComponentVector>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2188;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

void std::__shared_ptr_emplace<AudioComponentVector>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2188;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void AUExtensionScanner::addExtensions(AudioComponentVector *this, NSArray *a2, void *a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  this->__begin_ = 0;
  int v15 = this;
  this->mSorted = 1;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  obuint64_t j = v5;
  uint64_t v6 = [obj countByEnumeratingWithState:&v16 objects:v27 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v17;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v17 != v7) {
          objc_enumerationMutation(obj);
        }
        id v9 = *(id *)(*((void *)&v16 + 1) + 8 * i);
        if (!gAudioComponentLogCategory) {
          operator new();
        }
        long long v10 = *(id *)gAudioComponentLogCategory;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          id v12 = [v9 extensionPointIdentifier];
          int v13 = [v9 attributes];
          *(_DWORD *)AudioStreamBasicDescription buf = 136316162;
          *(void *)&uint8_t buf[4] = "AUExtensionScanner.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 109;
          __int16 v21 = 2112;
          id v22 = v9;
          __int16 v23 = 2112;
          uint64_t v24 = v12;
          __int16 v25 = 2112;
          unint64_t v26 = v13;
          _os_log_impl(&dword_18FEC0000, v10, OS_LOG_TYPE_INFO, "%25s:%-5d %@ %@ %@", buf, 0x30u);
        }
        AUExtensionScanner::componentsForExtension((AUExtensionScanner *)buf, (NSExtension *)a2, v9);
        AudioComponentVector::append(v15, **(const AudioComponentVector ***)buf, *(const AudioComponentVector **)(*(void *)buf + 8));
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
        }
      }
      uint64_t v6 = [obj countByEnumeratingWithState:&v16 objects:v27 count:16];
    }
    while (v6);
  }
}

void sub_1900B1D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21)
{
  a21 = a12;
  std::vector<std::shared_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100](&a21);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__7673(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__7674(uint64_t a1)
{
}

void ___ZN18AUExtensionScanner11initialScanEv_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = *(void *)(a1 + 32);
  id v4 = *(void **)(a1 + 40);
  v16[0] = MEMORY[0x1E4F143A8];
  long long v6 = *(_OWORD *)(a1 + 56);
  uint64_t v7 = *(void (****)(void, uint64_t, void *))(*(void *)(a1 + 56) + 8);
  v16[1] = 3221225472;
  void v16[2] = ___ZN18AUExtensionScanner11initialScanEv_block_invoke_2;
  v16[3] = &unk_1E5687D48;
  long long v20 = v6;
  uint64_t v8 = *(void *)(a1 + 48);
  id v18 = v3;
  uint64_t v19 = v8;
  id v9 = v4;
  uint64_t v10 = *(void *)(a1 + 72);
  id v17 = v9;
  uint64_t v21 = v10;
  uint64_t v11 = **v7;
  id v12 = v3;
  uint64_t v13 = v11(v7, v5, v16);
  uint64_t v14 = *(void *)(a1 + 64);
  int v15 = *(void **)(v14 + 8);
  *(void *)(v14 + 8) = v13;
}

void sub_1900B1F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void ___ZN18AUExtensionScanner11initialScanEv_block_invoke_2(void *a1, void *a2, void *a3)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  id v38 = a2;
  id v6 = a3;
  uint64_t v36 = a1[7];
  id v37 = v6;
  if (v6)
  {
    if (!gAudioComponentLogCategory) {
      operator new();
    }
    uint64_t v7 = *(id *)gAudioComponentLogCategory;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      id v9 = [v37 localizedDescription];
      *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
      *(void *)&uint8_t buf[4] = "AUExtensionScanner.mm";
      __int16 v51 = 1024;
      int v52 = 146;
      __int16 v53 = 2112;
      int v54 = v9;
      _os_log_impl(&dword_18FEC0000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d Error from NSExtension: %@", buf, 0x1Cu);
    }
  }
  if (*(unsigned char *)a1[8])
  {
    if (!gAudioComponentLogCategory) {
      operator new();
    }
    uint64_t v13 = *(id *)gAudioComponentLogCategory;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      int v15 = (void *)a1[4];
      *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
      *(void *)&uint8_t buf[4] = "AUExtensionScanner.mm";
      __int16 v51 = 1024;
      int v52 = 154;
      __int16 v53 = 2112;
      int v54 = v15;
      _os_log_impl(&dword_18FEC0000, v13, OS_LOG_TYPE_INFO, "%25s:%-5d NSExtensions changed for %@", buf, 0x1Cu);
    }
    uint64_t v16 = a1[9];
    os_unfair_lock_lock((os_unfair_lock_t)v16);
    uint64_t v17 = a1[8];
    id v35 = v38;
    objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithArray:");
    id v18 = (NSSet *)objc_claimAutoreleasedReturnValue();
    uint64_t v21 = *(NSSet **)(v17 + 16);
    long long v20 = (NSSet **)(v17 + 16);
    uint64_t v19 = v21;
    if (v21)
    {
      id v22 = setDifference(v19, v18);
      setDifference(v18, *v20);
      __int16 v23 = (NSSet *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      __int16 v23 = v18;
      id v22 = 0;
    }
    objc_storeStrong((id *)v20, v18);
    memset(&v48, 0, 24);
    v48.BOOL mSorted = 1;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    id v24 = v22;
    uint64_t v25 = [v24 countByEnumeratingWithState:&v44 objects:buf count:16];
    if (v25)
    {
      uint64_t v26 = *(void *)v45;
      do
      {
        for (uint64_t i = 0; i != v25; ++i)
        {
          if (*(void *)v45 != v26) {
            objc_enumerationMutation(v24);
          }
          uint64_t v28 = [*(id *)(*((void *)&v44 + 1) + 8 * i) identifier];
          Extensiouint64_t n = AUExtensionScanner::findExtension((AUExtensionScanner *)(v16 + 8), v28);

          if (*(id **)(v16 + 144) != Extension)
          {
            AudioComponentVector::append(&v48, *(const AudioComponentVector **)Extension[2], *((const AudioComponentVector **)Extension[2] + 1));
            uint64_t v30 = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<AUExtensionScanner::ExtensionComponents *,AUExtensionScanner::ExtensionComponents *,AUExtensionScanner::ExtensionComponents *>((uint64_t *)Extension + 4, *(uint64_t **)(v16 + 144), (uint64_t)Extension);
            for (uint64_t j = *(void *)(v16 + 144);
                  j != v30;
                  std::__destroy_at[abi:ne180100]<AUExtensionScanner::ExtensionComponents,0>(j))
            {
              j -= 32;
            }
            *(void *)(v16 + 144) = v30;
          }
        }
        uint64_t v25 = [v24 countByEnumeratingWithState:&v44 objects:buf count:16];
      }
      while (v25);
    }

    int v32 = [(NSSet *)v23 allObjects];
    AUExtensionScanner::addExtensions(&v43, (NSArray *)(v16 + 8), v32);

    if (!gAudioComponentLogCategory) {
      operator new();
    }
    if (os_log_type_enabled(*(os_log_t *)gAudioComponentLogCategory, OS_LOG_TYPE_DEBUG))
    {
      AudioComponentVector::showAll(&v43, "added from extensions");
      AudioComponentVector::showAll(&v48, "removed from extensions");
    }
    memset(v39, 0, sizeof(v39));
    std::vector<std::shared_ptr<APComponent>>::__init_with_size[abi:ne180100]<std::shared_ptr<APComponent>*,std::shared_ptr<APComponent>*>(v39, v43.__begin_, (void *)v43.__end_, ((char *)v43.__end_ - (char *)v43.__begin_) >> 4);
    BOOL mSorted = v43.mSorted;
    memset(v41, 0, sizeof(v41));
    std::vector<std::shared_ptr<APComponent>>::__init_with_size[abi:ne180100]<std::shared_ptr<APComponent>*,std::shared_ptr<APComponent>*>(v41, v48.__begin_, (void *)v48.__end_, ((char *)v48.__end_ - (char *)v48.__begin_) >> 4);
    BOOL v42 = v48.mSorted;
    uint64_t v49 = &v43;
    std::vector<std::shared_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
    v43.__begin_ = &v48;
    std::vector<std::shared_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);

    if (v16) {
      os_unfair_lock_unlock((os_unfair_lock_t)v16);
    }
    uint64_t v34 = *(void *)(v36 + 48);
    if (!v34) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, void *, void *))(*(void *)v34 + 48))(v34, v39, v41);
    *(void *)AudioStreamBasicDescription buf = v41;
    std::vector<std::shared_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *(void *)AudioStreamBasicDescription buf = v39;
    std::vector<std::shared_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  }
  else
  {
    objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), a2);
    uint64_t v10 = [MEMORY[0x1E4F1CAD0] setWithArray:v38];
    uint64_t v11 = a1[8];
    id v12 = *(void **)(v11 + 16);
    *(void *)(v11 + 16) = v10;

    *(unsigned char *)a1[8] = 1;
    (*(void (**)(void))(a1[5] + 16))();
  }
}

void sub_1900B2524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void **std::pair<AudioComponentVector,AudioComponentVector>::~pair(void **a1)
{
  id v3 = a1 + 4;
  std::vector<std::shared_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100](&v3);
  id v3 = a1;
  std::vector<std::shared_ptr<CA::ADMPackFormat>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

id setDifference(NSSet *a1, NSSet *a2)
{
  id v3 = a2;
  id v4 = (void *)[(NSSet *)a1 mutableCopy];
  [v4 minusSet:v3];

  return v4;
}

void sub_1900B26B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id *AUExtensionScanner::findExtension(AUExtensionScanner *this, NSString *a2)
{
  id v3 = a2;
  id v4 = (id *)*((void *)this + 16);
  uint64_t v5 = *((void *)this + 17) - (void)v4;
  if (v5)
  {
    unint64_t v6 = v5 >> 5;
    do
    {
      uint64_t v7 = &v4[4 * (v6 >> 1)];
      int v8 = AUExtensionScanner::ExtensionComponents::operator<(v7, v3);
      if (v8) {
        v6 += ~(v6 >> 1);
      }
      else {
        v6 >>= 1;
      }
      if (v8) {
        id v4 = v7 + 4;
      }
    }
    while (v6);
    if (v4 != *((id **)this + 17))
    {
      id v9 = [*v4 identifier];
      char v10 = [v9 isEqualToString:v3];

      if ((v10 & 1) == 0) {
        id v4 = (id *)*((void *)this + 17);
      }
    }
  }

  return v4;
}

void sub_1900B2788(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id AUExtensionScanner::getExtensionComponentList(AUExtensionScanner *this, NSString *a2)
{
  id v3 = a2;
  Extensiouint64_t n = AUExtensionScanner::findExtension(this, v3);
  if (*((id **)this + 17) == Extension) {
    id v5 = 0;
  }
  else {
    id v5 = Extension[1];
  }

  return v5;
}

void sub_1900B2814(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t MP4BoxParser_MovieFragmentHeader::Init(MP4BoxParser **this)
{
  uint64_t result = MP4BoxParser_Full::Initialize((MP4BoxParser_Full *)this);
  if (!result)
  {
    if (*((_DWORD *)this + 5) == 1835427940)
    {
      unsigned int v3 = (*((uint64_t (**)(MP4BoxParser **))*this + 3))(this);
      uint64_t result = MP4BoxParser::ReadDataSourceBytes(this[1], v3, 4uLL, (char *)this + 60);
      if (!result) {
        *((_DWORD *)this + 15) = bswap32(*((_DWORD *)this + 15));
      }
    }
    else
    {
      return 4294967294;
    }
  }
  return result;
}

void MP4BoxParser_MovieFragmentHeader::~MP4BoxParser_MovieFragmentHeader(MP4BoxParser_MovieFragmentHeader *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDF8DA18;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  JUMPOUT(0x192FC8940);
}

{
  uint64_t v2;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDF8DA18;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

float DSPGraph::AverageBox::process(DSPGraph::AverageBox *this, unsigned int a2)
{
  DSPGraph::SumBox::process(this, a2);
  uint64_t v4 = *((void *)this + 11);
  if (*((void *)this + 12) == v4)
  {
    std::string::basic_string[abi:ne180100]<0>(__B, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(v20, "out");
    int v15 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      int v15 = (void *)*v15;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v14, v15, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
  }
  if ((*(unsigned char *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4) + 56) + 72) & 0x10) == 0)
  {
    uint64_t v6 = *((void *)this + 11);
    if (*((void *)this + 12) == v6)
    {
      std::string::basic_string[abi:ne180100]<0>(__B, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(v20, "out");
      uint64_t v17 = (void *)((char *)this + 32);
      if (*((char *)this + 55) < 0) {
        uint64_t v17 = (void *)*v17;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v16, v17, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
    }
    uint64_t v7 = *(const float ***)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v6 + 40))(v6) + 56) + 80);
    uint64_t v8 = *((void *)this + 8);
    uint64_t v9 = *((void *)this + 9);
    unint64_t v10 = (unint64_t)(v9 - v8) >> 5;
    if (v10 < 2)
    {
      if (v9 == v8)
      {
        std::string::basic_string[abi:ne180100]<0>(__B, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(v20, "in");
        uint64_t v19 = (void *)((char *)this + 32);
        if (*((char *)this + 55) < 0) {
          uint64_t v19 = (void *)*v19;
        }
        DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v18, v19, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
      }
      *(float *)uint64_t __B = 1.0
                    / (float)**(unsigned int **)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v8 + 40))(v8)
                                                           + 56)
                                               + 80);
      vDSP_vsmul(v7[2], 1, (const float *)__B, (float *)v7[2], 1, a2);
    }
    else
    {
      float result = 1.0 / (float)v10;
      *(float *)uint64_t __B = result;
      if (*(_DWORD *)v7)
      {
        unint64_t v11 = 0;
        vDSP_Length v12 = a2;
        uint64_t v13 = 2;
        do
        {
          vDSP_vsmul(v7[v13], 1, (const float *)__B, (float *)v7[v13], 1, v12);
          ++v11;
          v13 += 2;
        }
        while (v11 < *(unsigned int *)v7);
      }
    }
  }
  return result;
}

void sub_1900B2C88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (*(char *)(v23 - 33) < 0) {
    operator delete(*(void **)(v23 - 56));
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::SumBox::hasPresetData(DSPGraph::SumBox *this)
{
  return 0;
}

double DSPGraph::AverageBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result = 3.15583197e161;
  *(_OWORD *)a1 = xmmword_1901C6270;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

const char *DSPGraph::AverageBox::ClassName(DSPGraph::AverageBox *this)
{
  return "average";
}

void DSPGraph::AverageBox::~AverageBox(DSPGraph::AverageBox *this)
{
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x192FC8940);
}

uint64_t CAAudioChannelLayout::ToTag(AudioChannelLayout *this, const AudioChannelLayout *a2)
{
  CAAudioChannelLayout::CAAudioChannelLayout((CAAudioChannelLayout *)&v9, this);
  unsigned int v2 = *(_DWORD *)(v9 + 16);
  unsigned int outPropertyData = v2;
  if (CAAudioChannelLayout::NumberChannels((CAAudioChannelLayout *)(v9 + 16), v3))
  {
    unsigned int v2 = *(_DWORD *)(v9 + 16);
    if ((v2 | 0x10000) == 0x10000)
    {
      UInt32 ioPropertyDataSize = 4;
      if (AudioFormatGetProperty(0x636D7074u, *(_DWORD *)(v9 + 12), (const void *)(v9 + 16), &ioPropertyDataSize, &outPropertyData))
      {
        goto LABEL_11;
      }
      unsigned int v2 = outPropertyData;
    }
    else
    {
      unsigned int outPropertyData = *(_DWORD *)(v9 + 16);
    }
  }
  if ((v2 & 0xFFFEFFFF) != 0)
  {
    int v5 = v9 ? CAAudioChannelLayout::NumberChannels((CAAudioChannelLayout *)(v9 + 16), v4) | 0x930000 : 9633792;
    if (v2 != v5)
    {
      uint64_t v7 = outPropertyData;
      goto LABEL_16;
    }
  }
LABEL_11:
  if (v9) {
    __int16 v6 = CAAudioChannelLayout::NumberChannels((CAAudioChannelLayout *)(v9 + 16), v4);
  }
  else {
    __int16 v6 = 0;
  }
  uint64_t v7 = *(_DWORD *)&v6 | 0xFFFF0000;
LABEL_16:
  MEMORY[0x192FC7C80](&v9);
  return v7;
}

uint64_t acv2::CodecConverterFactory::GetAvailableNumberChannels(AudioComponent *this, const AudioStreamBasicDescription *a2, unsigned int *a3, void *a4)
{
  AudioComponentInstance outInstance = 0;
  uint64_t Property = AudioComponentInstanceNew(this[4], &outInstance);
  if (!Property)
  {
    uint64_t Property = AudioCodecGetProperty(outInstance, 0x636D6E63u, a3, a4);
    AudioComponentInstanceDispose(outInstance);
  }
  return Property;
}

uint64_t acv2::CodecConverterFactory::GetAvailableChannelLayouts(AudioComponent *this, const AudioStreamBasicDescription *a2, unsigned int *a3, void *a4)
{
  AudioComponentInstance outInstance = 0;
  uint64_t Property = AudioComponentInstanceNew(this[4], &outInstance);
  if (Property) {
    return Property;
  }
  uint64_t Property = AudioCodecGetProperty(outInstance, 0x616F636Cu, a3, a4);
  AudioComponentInstanceDispose(outInstance);
  UInt32 mChannelsPerFrame = a2->mChannelsPerFrame;
  if (!mChannelsPerFrame) {
    return Property;
  }
  unint64_t v9 = *a3;
  if (v9 >= 4)
  {
    unsigned int v10 = 0;
    unint64_t v12 = v9 >> 2;
    float v13 = sqrtf((float)mChannelsPerFrame) + 0.5;
    uint64_t v14 = (int *)a4;
    while (1)
    {
      int v16 = *v14++;
      int v15 = v16;
      int v17 = (unsigned __int16)v16;
      if ((unsigned __int16)v16 != mChannelsPerFrame)
      {
        if (v17) {
          goto LABEL_11;
        }
        if ((v15 | 0x10000) == 0xBF0000 && v13 * v13 != mChannelsPerFrame) {
          goto LABEL_11;
        }
        v15 |= mChannelsPerFrame;
      }
      *((_DWORD *)a4 + v10++) = v15;
LABEL_11:
      if (!--v12) {
        goto LABEL_5;
      }
    }
  }
  unsigned int v10 = 0;
LABEL_5:
  *a3 = 4 * v10;
  return Property;
}

uint64_t acv2::CodecConverterFactory::GetAvailableEncodeBitRates(AudioComponent *this, unsigned int *a2, void *a3)
{
  AudioComponentInstance outInstance = 0;
  uint64_t Property = AudioComponentInstanceNew(this[4], &outInstance);
  if (!Property)
  {
    uint64_t Property = AudioCodecGetProperty(outInstance, 0x61627274u, a2, a3);
    AudioComponentInstanceDispose(outInstance);
  }
  return Property;
}

uint64_t acv2::CodecConverterFactory::GetAvailableNumberChannelsInfo(AudioComponent *this, const AudioStreamBasicDescription *a2, unsigned int *a3)
{
  AudioComponentInstance outInstance = 0;
  uint64_t PropertyInfo = AudioComponentInstanceNew(this[4], &outInstance);
  if (!PropertyInfo)
  {
    Boolean outWritable = 0;
    uint64_t PropertyInfo = AudioCodecGetPropertyInfo(outInstance, 0x636D6E63u, a3, &outWritable);
    AudioComponentInstanceDispose(outInstance);
  }
  return PropertyInfo;
}

uint64_t acv2::CodecConverterFactory::GetAvailableChannelLayoutsInfo(AudioComponent *this, const AudioStreamBasicDescription *a2, unsigned int *a3)
{
  AudioComponentInstance outInstance = 0;
  uint64_t PropertyInfo = AudioComponentInstanceNew(this[4], &outInstance);
  if (!PropertyInfo)
  {
    Boolean outWritable = 0;
    uint64_t PropertyInfo = AudioCodecGetPropertyInfo(outInstance, 0x616F636Cu, a3, &outWritable);
    AudioComponentInstanceDispose(outInstance);
  }
  return PropertyInfo;
}

uint64_t acv2::CodecConverterFactory::GetAvailableEncodeBitRatesInfo(AudioComponent *this, unsigned int *a2)
{
  AudioComponentInstance outInstance = 0;
  uint64_t PropertyInfo = AudioComponentInstanceNew(this[4], &outInstance);
  if (!PropertyInfo)
  {
    Boolean outWritable = 0;
    uint64_t PropertyInfo = AudioCodecGetPropertyInfo(outInstance, 0x61627274u, a2, &outWritable);
    AudioComponentInstanceDispose(outInstance);
  }
  return PropertyInfo;
}

uint64_t acv2::CodecConverterFactory::BuildConverterChain(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 112))();
}

uint64_t acv2::CodecConverterFactory::EmploysDependentPackets(AudioComponent *this, unsigned int *a2)
{
  pthread_mutex_lock(&acv2::sCodecConverterFactoryLocker);
  if (!*((unsigned char *)this + 68))
  {
    AudioComponentInstance outInstance = 0;
    uint64_t v4 = AudioComponentInstanceNew(this[4], &outInstance);
    if (v4) {
      goto LABEL_10;
    }
    unsigned int v8 = 0;
    UInt32 ioPropertyDataSize = 4;
    uint64_t Property = AudioCodecGetProperty(outInstance, 0x64706B3Fu, &ioPropertyDataSize, &v8);
    uint64_t v4 = Property;
    if (Property == 2003332927)
    {
      unsigned int v6 = 0;
      unsigned int v8 = 0;
    }
    else
    {
      if (Property)
      {
LABEL_9:
        AudioComponentInstanceDispose(outInstance);
        goto LABEL_10;
      }
      unsigned int v6 = v8;
    }
    uint64_t v4 = 0;
    *a2 = v6;
    *((_DWORD *)this + 16) = v6;
    *((unsigned char *)this + 68) = 1;
    goto LABEL_9;
  }
  uint64_t v4 = 0;
  *a2 = *((_DWORD *)this + 16);
LABEL_10:
  pthread_mutex_unlock(&acv2::sCodecConverterFactoryLocker);
  return v4;
}

void sub_1900B3284(_Unwind_Exception *a1)
{
}

uint64_t acv2::CodecConverterFactory::IsVBR(acv2::CodecConverterFactory *this, unsigned int *a2)
{
  pthread_mutex_lock(&acv2::sCodecConverterFactoryLocker);
  if (*((unsigned char *)this + 52))
  {
    uint64_t Property = 0;
    *a2 = *((_DWORD *)this + 12);
  }
  else
  {
    AudioComponentInstance outInstance = 0;
    uint64_t Property = AudioComponentInstanceNew(*((AudioComponent *)this + 4), &outInstance);
    if (!Property)
    {
      unsigned int v7 = 0;
      UInt32 ioPropertyDataSize = 4;
      uint64_t Property = AudioCodecGetProperty(outInstance, 0x76706B3Fu, &ioPropertyDataSize, &v7);
      if (!Property)
      {
        unsigned int v5 = v7;
        *a2 = v7;
        *((_DWORD *)this + 12) = v5;
        *((unsigned char *)this + 52) = 1;
      }
      AudioComponentInstanceDispose(outInstance);
    }
  }
  pthread_mutex_unlock(&acv2::sCodecConverterFactoryLocker);
  return Property;
}

void sub_1900B336C(_Unwind_Exception *a1)
{
}

uint64_t acv2::CodecConverterFactory::GetName(acv2::CodecConverterFactory *this)
{
  pthread_mutex_lock(&acv2::sCodecConverterFactoryLocker);
  if (!*((unsigned char *)this + 72))
  {
    *((unsigned char *)this + 72) = 1;
    AudioComponentInstance outInstance = 0;
    if (AudioComponentInstanceNew(*((AudioComponent *)this + 4), &outInstance))
    {
      uint64_t v2 = 0;
      goto LABEL_5;
    }
    UInt32 ioPropertyDataSize = 8;
    CFTypeRef outPropertyData = 0;
    if (!AudioCodecGetProperty(outInstance, 0x6C666F72u, &ioPropertyDataSize, &outPropertyData))
    {
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v5, outPropertyData);
      uint64_t v4 = (const void *)*((void *)this + 5);
      *((void *)this + 5) = v5;
      unsigned int v5 = v4;
      if (v4) {
        CFRelease(v4);
      }
    }
    AudioComponentInstanceDispose(outInstance);
  }
  uint64_t v2 = *((void *)this + 5);
LABEL_5:
  pthread_mutex_unlock(&acv2::sCodecConverterFactoryLocker);
  return v2;
}

void sub_1900B3460(_Unwind_Exception *a1)
{
}

BOOL acv2::CodecDecoderFactory::CodecCanInitialize(int a1, acv2::CodecConverterFactory *this, const AudioStreamBasicDescription *a3, AudioStreamBasicDescription *a4)
{
  return acv2::CodecConverterFactory::CodecCanInitializeWith(this, a4, a3, (CA::StreamDescription *)a4);
}

BOOL acv2::CodecConverterFactory::CodecCanInitializeWith(acv2::CodecConverterFactory *this, const AudioStreamBasicDescription *a2, const AudioStreamBasicDescription *a3, CA::StreamDescription *a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int outPropertyData = 0;
  UInt32 ioPropertyDataSize = 4;
  OSStatus Property = AudioCodecGetProperty(this, 0x696E6974u, &ioPropertyDataSize, &outPropertyData);
  if (Property)
  {
    OSStatus v9 = Property;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      uint64_t v14 = "CodecConverterFactory.cpp";
      __int16 v15 = 1024;
      int v16 = 549;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  get kAudioCodecPropertyIsInitialized failed", buf, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(4uLL);
    _DWORD *exception = v9;
    __cxa_throw(exception, MEMORY[0x1E4FBA3A8], 0);
  }
  if (outPropertyData) {
    AudioCodecUninitialize(this);
  }
  return AudioCodecInitialize(this, a2, a3, 0, 0) == 0;
}

uint64_t acv2::CodecDecoderFactory::BuildCodecConverterChain(uint64_t a1, uint64_t a2, uint64_t a3, CA::StreamDescription *a4)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  if (!*(_DWORD *)(a2 + 52))
  {
    uint64_t v15 = 1718449215;
    AudioConverterLog();
    int v16 = AudioConverterLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      *(void *)&uint8_t buf[4] = "CodecConverterFactory.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 180;
      _os_log_impl(&dword_18FEC0000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d wildcard for output LPCM format flags is not allowed", buf, 0x12u);
    }
    return v15;
  }
  unsigned int v7 = *(OpaqueAudioComponentInstance **)(a3 + 80);
  AudioComponentInstance outInstance = v7;
  unsigned int v8 = *(OpaqueAudioComponentInstance **)(a3 + 120);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)AudioStreamBasicDescription buf = *(_OWORD *)a2;
  *(_OWORD *)&buf[16] = v9;
  long long v10 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)uint64_t v70 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v70[16] = v10;
  *(_OWORD *)&v70[32] = *(_OWORD *)(a2 + 64);
  uint64_t v11 = *(void *)buf;
  if (*(double *)buf == 0.0)
  {
    uint64_t v11 = *(void *)&v70[8];
    *(void *)AudioStreamBasicDescription buf = *(void *)&v70[8];
  }
  *(void *)&v70[8] = v11;
  unint64_t v12 = v7;
  if (!v7)
  {
    uint64_t v15 = AudioComponentInstanceNew(*(AudioComponent *)(a1 + 32), &outInstance);
    if (v15) {
      return v15;
    }
    unint64_t v12 = outInstance;
    if (!outInstance) {
      return 2003329396;
    }
  }
  if (*(unsigned char *)(a3 + 113))
  {
    memset(&__p, 0, sizeof(__p));
    inData.double mSampleRate = *(Float64 *)buf;
    *(_OWORD *)&inData.AudioFormatID mFormatID = xmmword_1901C60C0;
    inData.mBytesPerFrame = 4;
    inData.UInt32 mChannelsPerFrame = *(_DWORD *)&buf[28];
    *(void *)&inData.unsigned __int16 mBitsPerChannel = 32;
    if (acv2::CodecConverterFactory::CodecCanInitializeWith(v12, (const AudioStreamBasicDescription *)buf, &inData, a4))
    {
      outSize.OSType componentType = 0;
      outWritable[0] = 0;
      if (AudioCodecGetPropertyInfo(v12, 0x696D7264u, &outSize.componentType, outWritable) || !outSize.componentType) {
        goto LABEL_8;
      }
      std::vector<char>::pointer begin = __p.__begin_;
      if ((std::vector<char>::pointer)outSize.componentType <= (std::vector<char>::pointer)(__p.__end_ - __p.__begin_))
      {
        if ((std::vector<char>::pointer)outSize.componentType < (std::vector<char>::pointer)(__p.__end_ - __p.__begin_)) {
          __p.__end_ = &__p.__begin_[outSize.componentType];
        }
      }
      else
      {
        std::vector<unsigned char>::__append(&__p, outSize.componentType - (unint64_t)(__p.__end_ - __p.__begin_));
        std::vector<char>::pointer begin = __p.__begin_;
      }
      if (AudioCodecGetProperty(v12, 0x696D7264u, &outSize.componentType, begin))
      {
LABEL_8:
        char mSampleRate_low = 0;
        int v14 = 0;
      }
      else
      {
        if ((std::vector<char>::pointer)outSize.componentType <= (std::vector<char>::pointer)(__p.__end_ - __p.__begin_))
        {
          std::vector<char>::pointer v56 = __p.__begin_;
          LODWORD(v12) = (std::vector<char>::pointer)outSize.componentType >= (std::vector<char>::pointer)(__p.__end_ - __p.__begin_)
                       ? LODWORD(__p.__end_)
                       : LODWORD(__p.__begin_) + outSize.componentType;
        }
        else
        {
          std::vector<unsigned char>::__append(&__p, outSize.componentType - (unint64_t)(__p.__end_ - __p.__begin_));
          LODWORD(v12) = __p.__end_;
          std::vector<char>::pointer v56 = __p.__begin_;
        }
        char mSampleRate_low = LOBYTE(inData.mSampleRate);
        long long v67 = *(_OWORD *)((char *)&inData.mSampleRate + 1);
        v68[0] = *(_OWORD *)((char *)&inData.mBytesPerPacket + 1);
        *(void *)((char *)v68 + 15) = *(void *)&inData.mBitsPerChannel;
        memset(&__p, 0, sizeof(__p));
        int v14 = 1;
      }
    }
    else
    {
      int v14 = 0;
      char mSampleRate_low = 0;
    }
    if (__p.__begin_)
    {
      __p.__end_ = __p.__begin_;
      operator delete(__p.__begin_);
    }
    if (v14)
    {
      v70[8] = mSampleRate_low;
      *(_OWORD *)&v70[9] = v67;
      *(_OWORD *)&v70[25] = v68[0];
      *(void *)&v70[40] = *(void *)((char *)v68 + 15);
      int v17 = *(_DWORD *)(a2 + 68);
      *(_DWORD *)&v70[16] = 1819304813;
      *(_DWORD *)&v70[36] = v17;
      if (v8)
      {
        AudioUnitUninitialize(v8);
        goto LABEL_20;
      }
      outSize.componentFlagsMasdouble k = 0;
      *(_OWORD *)&outSize.OSType componentType = *(_OWORD *)"xmuamed3lppa";
      Next = AudioComponentFindNext(0, &outSize);
      if (Next)
      {
        *(void *)Boolean outWritable = 0;
        OSStatus v32 = AudioComponentInstanceNew(Next, (AudioComponentInstance *)outWritable);
        if (v32)
        {
          AudioConverterLog();
          uint64_t v33 = AudioConverterLog(void)::gLog;
          if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
          {
            LODWORD(inData.mSampleRate) = 136315650;
            *(void *)((char *)&inData.mSampleRate + 4) = "CodecConverterFactory.cpp";
            LOWORD(inData.mFormatFlags) = 1024;
            *(AudioFormatFlags *)((char *)&inData.mFormatFlags + 2) = 94;
            HIWORD(inData.mBytesPerPacket) = 1024;
            inData.UInt32 mFramesPerPacket = v32;
            uint64_t v34 = "%25s:%-5d Unable to instantiate spatial renderer (%u)";
            id v35 = v33;
LABEL_68:
            uint32_t v38 = 24;
            goto LABEL_69;
          }
        }
        else
        {
          LODWORD(v63[0]) = 1;
          OSStatus v41 = AudioUnitSetProperty(*(AudioUnit *)outWritable, 0x25u, 0, 0, v63, 4u);
          unsigned int v8 = *(OpaqueAudioComponentInstance **)outWritable;
          if (!v41)
          {
            if (*(void *)outWritable)
            {
LABEL_20:
              AudioFormat_CompleteChannelLayoutWithCoordinates((const CA::ChannelLayout *)(a3 + 128), &v61);
              LOBYTE(inData.mSampleRate) = mSampleRate_low;
              *(_OWORD *)((char *)&inData.mSampleRate + 1) = v67;
              *(_OWORD *)((char *)&inData.mBytesPerPacket + 1) = v68[0];
              *(void *)&inData.unsigned __int16 mBitsPerChannel = *(void *)((char *)v68 + 15);
              inData.AudioFormatID mFormatID = 1885564203;
              OSStatus v18 = AudioUnitSetProperty(v8, 8u, 1u, 0, &inData, 0x28u);
              if (v18)
              {
                if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                  goto LABEL_105;
                }
                outSize.OSType componentType = 136315394;
                *(void *)&outSize.OSType componentSubType = "CodecConverterFactory.cpp";
                LOWORD(outSize.componentFlags) = 1024;
                *(UInt32 *)((char *)&outSize.componentFlags + 2) = 122;
                long long v46 = MEMORY[0x1E4F14500];
                long long v47 = "%25s:%-5d  set kAudioUnitProperty_StreamFormat(kAudioUnitScope_Input, 0) on AUSM failed";
              }
              else
              {
                OSStatus v18 = AudioUnitSetProperty(v8, 0xC9Fu, 0, 0, v56, v12 - v56);
                if (!v18)
                {
                  OSStatus v18 = AudioUnitSetProperty(v8, 8u, 2u, 0, &v70[8], 0x28u);
                  if (!v18)
                  {
                    uint64_t v19 = (int *)v61;
                    OSStatus v20 = AudioUnitSetProperty(v8, 0x13u, 2u, 0, v61, v62 - v61);
                    if (!v20)
                    {
                      int v21 = *v19;
                      if (*v19 == 6946818) {
                        int v22 = 1;
                      }
                      else {
                        int v22 = 3;
                      }
                      int v60 = v22;
                      OSStatus v23 = AudioUnitSetProperty(v8, 0xC1Cu, 0, 0, &v60, 4u);
                      if (v23)
                      {
                        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                          goto LABEL_115;
                        }
                        outSize.OSType componentType = 136315394;
                        *(void *)&outSize.OSType componentSubType = "CodecConverterFactory.cpp";
                        LOWORD(outSize.componentFlags) = 1024;
                        *(UInt32 *)((char *)&outSize.componentFlags + 2) = 144;
                        uint64_t v49 = MEMORY[0x1E4F14500];
                        unsigned int v50 = "%25s:%-5d  set kAudioUnitProperty_SpatialMixerOutputType on AUSM failed";
                        goto LABEL_114;
                      }
                      if (v21 != 6946818)
                      {
LABEL_58:
                        OSStatus v23 = AudioUnitInitialize(v8);
                        if (!v23)
                        {
                          operator delete(v19);
                          char v40 = 1;
                          goto LABEL_72;
                        }
                        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                        {
LABEL_115:
                          exceptiouint64_t n = __cxa_allocate_exception(4uLL);
                          _DWORD *exception = v23;
                          __cxa_throw(exception, MEMORY[0x1E4FBA3A8], 0);
                        }
                        outSize.OSType componentType = 136315394;
                        *(void *)&outSize.OSType componentSubType = "CodecConverterFactory.cpp";
                        LOWORD(outSize.componentFlags) = 1024;
                        *(UInt32 *)((char *)&outSize.componentFlags + 2) = 155;
                        uint64_t v49 = MEMORY[0x1E4F14500];
                        unsigned int v50 = "%25s:%-5d  set AudioUnitInitialize on AUSM failed";
LABEL_114:
                        _os_log_impl(&dword_18FEC0000, v49, OS_LOG_TYPE_ERROR, v50, (uint8_t *)&outSize, 0x12u);
                        goto LABEL_115;
                      }
                      std::string::basic_string[abi:ne180100]<0>(v63, "/System/Library/Audio/Tunings/Generic/AU/aumx-3dem-appl-headphone-general-multichannel.aupreset");
                      if (v64 >= 0) {
                        id v24 = v63;
                      }
                      else {
                        id v24 = (void **)v63[0];
                      }
                      uint64_t v25 = fopen((const char *)v24, "rb");
                      *(void *)Boolean outWritable = &unk_1EDF8AFE8;
                      AudioUnit v72 = (AudioUnit)MEMORY[0x1E4F14800];
                      long long v73 = outWritable;
                      *(void *)&outSize.OSType componentType = v25;
                      p_OSType componentManufacturer = &outSize.componentManufacturer;
                      std::__function::__func<int (*)(__sFILE *),std::allocator<int (*)(__sFILE *)>,int ()(__sFILE *)>::__clone((uint64_t)outWritable, &outSize.componentManufacturer);
                      std::__function::__value_func<int ()(__sFILE *)>::~__value_func[abi:ne180100](outWritable);
                      if (!*(void *)&outSize.componentType)
                      {
                        int v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                        std::runtime_error::runtime_error(v54, "Could not construct");
                      }
                      fseek(*(FILE **)&outSize.componentType, 0, 2);
                      size_t v26 = MEMORY[0x192FC90E0](*(void *)&outSize.componentType);
                      std::vector<unsigned char>::vector(outWritable, v26);
                      fseek(*(FILE **)&outSize.componentType, 0, 0);
                      fread(*(void **)outWritable, 1uLL, (size_t)v72 - *(void *)outWritable, *(FILE **)&outSize.componentType);
                      CFDataRef data = CFDataCreate(0, *(const UInt8 **)outWritable, (CFIndex)v72 - *(void *)outWritable);
                      if (!data)
                      {
                        uint64_t v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                        std::runtime_error::runtime_error(v55, "Could not construct");
                      }
                      if (*(void *)outWritable)
                      {
                        AudioUnit v72 = *(AudioUnit *)outWritable;
                        operator delete(*(void **)outWritable);
                      }
                      std::unique_ptr<__sFILE,std::function<int ()(__sFILE*)>>::reset[abi:ne180100]((uint64_t *)&outSize);
                      std::__function::__value_func<int ()(__sFILE *)>::~__value_func[abi:ne180100](&outSize.componentManufacturer);
                      if (v64 < 0) {
                        operator delete(v63[0]);
                      }
                      if (data)
                      {
                        CFPropertyListRef v27 = CFPropertyListCreateWithData(0, data, 0, 0, 0);
                        uint64_t v28 = v27;
                        if (v27)
                        {
                          CFTypeID v29 = CFGetTypeID(v27);
                          if (v29 == CFDictionaryGetTypeID())
                          {
                            applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)outWritable, v28);
                            AudioUnit v30 = *(AudioUnit *)outWritable;
LABEL_53:
                            v63[0] = v30;
                            OSStatus v39 = AudioUnitSetProperty(v8, 0, 0, 0, v63, 8u);
                            if (v39)
                            {
                              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                              {
                                outSize.OSType componentType = 136315394;
                                *(void *)&outSize.OSType componentSubType = "CodecConverterFactory.cpp";
                                LOWORD(outSize.componentFlags) = 1024;
                                *(UInt32 *)((char *)&outSize.componentFlags + 2) = 152;
                                _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  set default headphone preset on AUSM failed", (uint8_t *)&outSize, 0x12u);
                              }
                              int v52 = __cxa_allocate_exception(4uLL);
                              _DWORD *v52 = v39;
                              __cxa_throw(v52, MEMORY[0x1E4FBA3A8], 0);
                            }
                            if (*(void *)outWritable) {
                              CFRelease(*(CFTypeRef *)outWritable);
                            }
                            if (data) {
                              CFRelease(data);
                            }
                            goto LABEL_58;
                          }
                          CFRelease(v28);
                        }
                        else if (!CFDictionaryGetTypeID())
                        {
                          AudioUnit v30 = 0;
                          *(void *)Boolean outWritable = 0;
                          goto LABEL_53;
                        }
                      }
                      __int16 v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::runtime_error::runtime_error(v53, "Could not construct");
                    }
                    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                    {
                      outSize.OSType componentType = 136315394;
                      *(void *)&outSize.OSType componentSubType = "CodecConverterFactory.cpp";
                      LOWORD(outSize.componentFlags) = 1024;
                      *(UInt32 *)((char *)&outSize.componentFlags + 2) = 136;
                      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  set kAudioUnitProperty_AudioChannelLayout(kAudioUnitScope_Output, 0) on AUSM failed", (uint8_t *)&outSize, 0x12u);
                    }
                    AudioComponentVector v48 = __cxa_allocate_exception(4uLL);
                    *AudioComponentVector v48 = v20;
LABEL_109:
                    __cxa_throw(v48, MEMORY[0x1E4FBA3A8], 0);
                  }
                  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                  {
                    outSize.OSType componentType = 136315394;
                    *(void *)&outSize.OSType componentSubType = "CodecConverterFactory.cpp";
                    LOWORD(outSize.componentFlags) = 1024;
                    *(UInt32 *)((char *)&outSize.componentFlags + 2) = 131;
                    long long v46 = MEMORY[0x1E4F14500];
                    long long v47 = "%25s:%-5d  set kAudioUnitProperty_StreamFormat(kAudioUnitScope_Output, 0) on AUSM failed";
                    goto LABEL_104;
                  }
LABEL_105:
                  AudioComponentVector v48 = __cxa_allocate_exception(4uLL);
                  *AudioComponentVector v48 = v18;
                  goto LABEL_109;
                }
                if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                  goto LABEL_105;
                }
                outSize.OSType componentType = 136315394;
                *(void *)&outSize.OSType componentSubType = "CodecConverterFactory.cpp";
                LOWORD(outSize.componentFlags) = 1024;
                *(UInt32 *)((char *)&outSize.componentFlags + 2) = 127;
                long long v46 = MEMORY[0x1E4F14500];
                long long v47 = "%25s:%-5d  set kAudioUnitProperty_SpatialMixerImmersiveRendererData on AUSM failed";
              }
LABEL_104:
              _os_log_impl(&dword_18FEC0000, v46, OS_LOG_TYPE_ERROR, v47, (uint8_t *)&outSize, 0x12u);
              goto LABEL_105;
            }
LABEL_71:
            char v40 = 0;
LABEL_72:
            if (v56) {
              operator delete(v56);
            }
            if (v40)
            {
LABEL_82:
              if (v7 || *(_DWORD *)&v70[36])
              {
                if (*(_DWORD *)&v70[36])
                {
                  if (!*(_DWORD *)&buf[28]) {
                    *(_DWORD *)&buf[28] = *(_DWORD *)&v70[36];
                  }
                  operator new();
                }
              }
              else
              {
                AudioComponentInstanceDispose(outInstance);
              }
              return 4294967246;
            }
            goto LABEL_75;
          }
          AudioComponentInstanceDispose(*(AudioComponentInstance *)outWritable);
          AudioConverterLog();
          uint64_t v42 = AudioConverterLog(void)::gLog;
          if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
          {
            LODWORD(inData.mSampleRate) = 136315650;
            *(void *)((char *)&inData.mSampleRate + 4) = "CodecConverterFactory.cpp";
            LOWORD(inData.mFormatFlags) = 1024;
            *(AudioFormatFlags *)((char *)&inData.mFormatFlags + 2) = 103;
            HIWORD(inData.mBytesPerPacket) = 1024;
            inData.UInt32 mFramesPerPacket = v41;
            uint64_t v34 = "%25s:%-5d Unable to set offline render mode of spatial renderer (%u)";
            id v35 = v42;
            goto LABEL_68;
          }
        }
      }
      else
      {
        AudioConverterLog();
        uint64_t v37 = AudioConverterLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
        {
          LODWORD(inData.mSampleRate) = 136315394;
          *(void *)((char *)&inData.mSampleRate + 4) = "CodecConverterFactory.cpp";
          LOWORD(inData.mFormatFlags) = 1024;
          *(AudioFormatFlags *)((char *)&inData.mFormatFlags + 2) = 87;
          uint64_t v34 = "%25s:%-5d Unable to enumerate spatial renderer";
          id v35 = v37;
          uint32_t v38 = 18;
LABEL_69:
          _os_log_impl(&dword_18FEC0000, v35, OS_LOG_TYPE_ERROR, v34, (uint8_t *)&inData, v38);
        }
      }
      unsigned int v8 = 0;
      goto LABEL_71;
    }
  }
LABEL_75:
  if (v8)
  {
    AudioUnitUninitialize(v8);
    AudioComponentInstanceDispose(v8);
  }
  v57[2] = *(_OWORD *)v70;
  v57[3] = *(_OWORD *)&v70[16];
  v57[4] = *(_OWORD *)&v70[32];
  v57[0] = *(_OWORD *)buf;
  v57[1] = *(_OWORD *)&buf[16];
  uint64_t v43 = acv2::CodecConverterFactory::ChooseIntermediateFormat(a1, outInstance, v57, (uint64_t)buf, (AudioStreamBasicDescription *)&v70[8], 0, 0);
  uint64_t v15 = v43;
  if (v43) {
    BOOL v44 = v7 != 0;
  }
  else {
    BOOL v44 = 1;
  }
  if (!v44)
  {
    AudioComponentInstanceDispose(outInstance);
    return v15;
  }
  if (!v43) {
    goto LABEL_82;
  }
  return v15;
}

void sub_1900B43C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint8_t buf,int a41,int a42,__int16 a43,__int16 a44,__int16 a45,__int16 a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  if (a54) {
    (*(void (**)(uint64_t))(*(void *)a54 + 8))(a54);
  }
  _Unwind_Resume(exception_object);
}

uint64_t acv2::CodecConverterFactory::ChooseIntermediateFormat(uint64_t a1, AudioCodec inCodec, _OWORD *a3, uint64_t a4, AudioStreamBasicDescription *a5, int a6, signed int a7)
{
  int v8 = a6;
  uint64_t v112 = *MEMORY[0x1E4F143B8];
  int outPropertyData = 0;
  unint64_t v106 = 0;
  uint64_t v107 = 0;
  UInt32 outSize = 0;
  Boolean outWritable = 0;
  if (a6) {
    AudioCodecPropertyID v11 = 1768305775;
  }
  else {
    AudioCodecPropertyID v11 = 1868969065;
  }
  if (AudioCodecGetPropertyInfo(inCodec, v11, &outSize, &outWritable))
  {
LABEL_7:
    if (v8) {
      AudioCodecPropertyID v15 = 1768320291;
    }
    else {
      AudioCodecPropertyID v15 = 1868983587;
    }
    uint64_t PropertyInfo = AudioCodecGetPropertyInfo(inCodec, v15, &outSize, &outWritable);
    if (PropertyInfo) {
      goto LABEL_228;
    }
    std::vector<CA::StreamDescription>::resize((char **)&outPropertyData, outSize / 0x28uLL);
    uint64_t PropertyInfo = AudioCodecGetProperty(inCodec, v15, &outSize, outPropertyData);
    if (PropertyInfo) {
      goto LABEL_228;
    }
    std::vector<CA::StreamDescription>::resize((char **)&outPropertyData, outSize / 0x28uLL);
    int v17 = (CA::Implementation *)outPropertyData;
    OSStatus v18 = v106;
    goto LABEL_14;
  }
  std::vector<CA::StreamDescription>::resize((char **)&outPropertyData, outSize / 0x28uLL);
  unint64_t v12 = outPropertyData;
  uint64_t v13 = *(void *)(a4 + 32);
  long long v14 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)int outPropertyData = *(_OWORD *)a4;
  v12[1] = v14;
  *((void *)v12 + 4) = v13;
  if (AudioCodecGetProperty(inCodec, v11, &outSize, v12))
  {
    unint64_t v106 = (char *)v12;
    goto LABEL_7;
  }
  std::vector<CA::StreamDescription>::resize((char **)&outPropertyData, outSize / 0x28uLL);
  int v17 = (CA::Implementation *)outPropertyData;
  OSStatus v18 = v106;
  if (outPropertyData == v106) {
    goto LABEL_7;
  }
LABEL_14:
  long long v19 = a3[3];
  v102[2] = a3[2];
  v102[3] = v19;
  v102[4] = a3[4];
  long long v20 = a3[1];
  v102[0] = *a3;
  v102[1] = v20;
  if (v17 == (CA::Implementation *)v18)
  {
LABEL_216:
    AudioConverterLog();
    uint64_t v89 = AudioConverterLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      float v109 = "CodecConverterFactory.cpp";
      __int16 v110 = 1024;
      int v111 = 832;
      _os_log_impl(&dword_18FEC0000, v89, OS_LOG_TYPE_ERROR, "%25s:%-5d codec did not accept any proposed uncompressed format", buf, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(4uLL);
    _DWORD *exception = 1718449215;
    __cxa_throw(exception, MEMORY[0x1E4FBA3A8], 0);
  }
  int v21 = 0;
  int v22 = 0;
  unint64_t v23 = 0;
  AudioFormatID mFormatID = a5->mFormatID;
  if (mFormatID != 1885564203) {
    int v8 = 1;
  }
  do
  {
    int v24 = *((_DWORD *)v17 + 2);
    if (v24 == 1819304813) {
      int v25 = v8;
    }
    else {
      int v25 = 1;
    }
    if (v24 != a5->mFormatID && v25 != 0)
    {
      if ((unint64_t)v22 < v23) {
        goto LABEL_35;
      }
      uint64_t v31 = v22 - v21;
      unint64_t v32 = v31 + 1;
      if ((unint64_t)(v31 + 1) >> 61) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      if ((uint64_t)(v23 - (void)v21) >> 2 > v32) {
        unint64_t v32 = (uint64_t)(v23 - (void)v21) >> 2;
      }
      if (v23 - (unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v33 = v32;
      }
      if (v33) {
        unint64_t v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v33);
      }
      else {
        uint64_t v34 = 0;
      }
      OSStatus v39 = (double *)(v33 + 8 * v31);
      *OSStatus v39 = 0.0;
      char v40 = v39 + 1;
      while (v22 != v21)
      {
        uint64_t v41 = *((void *)v22-- - 1);
        *((void *)v39-- - 1) = v41;
      }
      goto LABEL_199;
    }
    double v27 = *(double *)v17;
    double mSampleRate = a5->mSampleRate;
    if (a5->mSampleRate == 0.0) {
      double mSampleRate = *(double *)a4;
    }
    if (v27 == 0.0)
    {
      *(double *)int v17 = mSampleRate;
      double v27 = mSampleRate;
LABEL_29:
      double v29 = 0.99;
      goto LABEL_30;
    }
    if (mSampleRate == 0.0) {
      goto LABEL_29;
    }
    if (mFormatID == 1885564203)
    {
      double v29 = 0.99;
      if (v27 != mSampleRate)
      {
        if ((unint64_t)v22 < v23) {
          goto LABEL_35;
        }
        uint64_t v64 = v22 - v21;
        unint64_t v65 = v64 + 1;
        if ((unint64_t)(v64 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v23 - (void)v21) >> 2 > v65) {
          unint64_t v65 = (uint64_t)(v23 - (void)v21) >> 2;
        }
        if (v23 - (unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v33 = v65;
        }
        if (v33) {
          unint64_t v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v33);
        }
        else {
          uint64_t v34 = 0;
        }
        OSStatus v39 = (double *)(v33 + 8 * v64);
        *OSStatus v39 = 0.0;
        char v40 = v39 + 1;
        while (v22 != v21)
        {
          uint64_t v74 = *((void *)v22-- - 1);
          *((void *)v39-- - 1) = v74;
        }
        goto LABEL_199;
      }
    }
    else
    {
      if (v27 >= mSampleRate)
      {
        if (v27 <= mSampleRate) {
          goto LABEL_29;
        }
        double v35 = mSampleRate * 0.2 / v27;
      }
      else
      {
        double v35 = v27 * 0.5 / mSampleRate;
      }
      double v29 = v35 * 0.99;
    }
LABEL_30:
    UInt32 mChannelsPerFrame = *((_DWORD *)v17 + 7);
    if (mChannelsPerFrame)
    {
      if (mChannelsPerFrame != a5->mChannelsPerFrame)
      {
        if (mFormatID == 1885564203)
        {
          if ((unint64_t)v22 < v23) {
            goto LABEL_35;
          }
          uint64_t v62 = v22 - v21;
          unint64_t v63 = v62 + 1;
          if ((unint64_t)(v62 + 1) >> 61) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v23 - (void)v21) >> 2 > v63) {
            unint64_t v63 = (uint64_t)(v23 - (void)v21) >> 2;
          }
          if (v23 - (unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v33 = v63;
          }
          if (v33) {
            unint64_t v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v33);
          }
          else {
            uint64_t v34 = 0;
          }
          OSStatus v39 = (double *)(v33 + 8 * v62);
          *OSStatus v39 = 0.0;
          char v40 = v39 + 1;
          while (v22 != v21)
          {
            uint64_t v72 = *((void *)v22-- - 1);
            *((void *)v39-- - 1) = v72;
          }
          goto LABEL_199;
        }
        double v29 = v29 * 0.1;
      }
    }
    else
    {
      UInt32 mChannelsPerFrame = *(_DWORD *)(a4 + 28);
      if (!mChannelsPerFrame) {
        UInt32 mChannelsPerFrame = a5->mChannelsPerFrame;
      }
      int v36 = *((_DWORD *)v17 + 3);
      if ((v36 & 0x20) != 0)
      {
        unsigned int v37 = *((_DWORD *)v17 + 6);
        int v38 = 1;
      }
      else
      {
        unsigned int v37 = (*((_DWORD *)v17 + 8) + 7) >> 3;
        int v38 = mChannelsPerFrame;
      }
      int v42 = v37 * v38;
      *((_DWORD *)v17 + 4) = v42;
      *((_DWORD *)v17 + 5) = 1;
      *((_DWORD *)v17 + 6) = v42;
      *((_DWORD *)v17 + 7) = mChannelsPerFrame;
      *((_DWORD *)v17 + 3) = v36;
    }
    int v43 = *((_DWORD *)v17 + 8);
    if (v43 >= 0) {
      int v44 = *((_DWORD *)v17 + 8);
    }
    else {
      int v44 = -v43;
    }
    int v45 = v44 + 7;
    int mBitsPerChannel = a5->mBitsPerChannel;
    if (mBitsPerChannel >= 0) {
      int v47 = a5->mBitsPerChannel;
    }
    else {
      int v47 = -mBitsPerChannel;
    }
    unsigned int v48 = (v47 + 7) & 0xFFFFFFF8;
    if (a7 >= 0) {
      int v49 = a7;
    }
    else {
      int v49 = -a7;
    }
    a7 = (v49 + 7) & 0xFFFFFFF8;
    unsigned int v50 = v45 & 0xFFFFFFF8;
    if (v50)
    {
      if (v50 != a7)
      {
        if (v50 == v48)
        {
          if (a7) {
            double v29 = v29 * 0.9;
          }
        }
        else if (v50 >= v48)
        {
          if (mFormatID == 1885564203)
          {
            if ((unint64_t)v22 < v23)
            {
LABEL_35:
              *v22++ = 0.0;
              goto LABEL_202;
            }
            uint64_t v70 = v22 - v21;
            unint64_t v71 = v70 + 1;
            if ((unint64_t)(v70 + 1) >> 61) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            if ((uint64_t)(v23 - (void)v21) >> 2 > v71) {
              unint64_t v71 = (uint64_t)(v23 - (void)v21) >> 2;
            }
            if (v23 - (unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v33 = v71;
            }
            if (v33) {
              unint64_t v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v33);
            }
            else {
              uint64_t v34 = 0;
            }
            OSStatus v39 = (double *)(v33 + 8 * v70);
            *OSStatus v39 = 0.0;
            char v40 = v39 + 1;
            while (v22 != v21)
            {
              uint64_t v76 = *((void *)v22-- - 1);
              *((void *)v39-- - 1) = v76;
            }
            goto LABEL_199;
          }
          double v29 = v29 * 0.99;
        }
        else
        {
          if (mFormatID == 1885564203)
          {
            if ((unint64_t)v22 < v23) {
              goto LABEL_35;
            }
            uint64_t v68 = v22 - v21;
            unint64_t v69 = v68 + 1;
            if ((unint64_t)(v68 + 1) >> 61) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            if ((uint64_t)(v23 - (void)v21) >> 2 > v69) {
              unint64_t v69 = (uint64_t)(v23 - (void)v21) >> 2;
            }
            if (v23 - (unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v33 = v69;
            }
            if (v33) {
              unint64_t v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v33);
            }
            else {
              uint64_t v34 = 0;
            }
            OSStatus v39 = (double *)(v33 + 8 * v68);
            *OSStatus v39 = 0.0;
            char v40 = v39 + 1;
            while (v22 != v21)
            {
              uint64_t v75 = *((void *)v22-- - 1);
              *((void *)v39-- - 1) = v75;
            }
            goto LABEL_199;
          }
          if (*((unsigned char *)v17 + 12)) {
            double v29 = v29 * ((double)v50 / (double)v48 * 0.7);
          }
          else {
            double v29 = v29 * ((double)v50 / (double)v48 * 0.7) * 0.7;
          }
        }
      }
    }
    else if (a7)
    {
      unsigned int v50 = (v49 + 7) & 0xFFFFFFF8;
    }
    else
    {
      unsigned int v50 = v48;
    }
    int v51 = *((_DWORD *)v17 + 3);
    int v52 = a5->mFormatFlags ^ v51;
    if ((v52 & 2) != 0)
    {
      if (mFormatID == 1885564203)
      {
        if ((unint64_t)v22 < v23) {
          goto LABEL_35;
        }
        uint64_t v60 = v22 - v21;
        unint64_t v61 = v60 + 1;
        if ((unint64_t)(v60 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v23 - (void)v21) >> 2 > v61) {
          unint64_t v61 = (uint64_t)(v23 - (void)v21) >> 2;
        }
        if (v23 - (unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v33 = v61;
        }
        if (v33) {
          unint64_t v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v33);
        }
        else {
          uint64_t v34 = 0;
        }
        OSStatus v39 = (double *)(v33 + 8 * v60);
        *OSStatus v39 = 0.0;
        char v40 = v39 + 1;
        while (v22 != v21)
        {
          uint64_t v67 = *((void *)v22-- - 1);
          *((void *)v39-- - 1) = v67;
        }
        goto LABEL_199;
      }
      double v29 = v29 * 0.11;
      if ((v52 & 0x20) == 0) {
        goto LABEL_91;
      }
      goto LABEL_90;
    }
    if ((v52 & 0x20) != 0)
    {
      if (mFormatID == 1885564203)
      {
        if ((unint64_t)v22 < v23) {
          goto LABEL_35;
        }
        uint64_t v53 = v22 - v21;
        unint64_t v54 = v53 + 1;
        if ((unint64_t)(v53 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v23 - (void)v21) >> 2 > v54) {
          unint64_t v54 = (uint64_t)(v23 - (void)v21) >> 2;
        }
        if (v23 - (unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v33 = v54;
        }
        if (v33) {
          unint64_t v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v33);
        }
        else {
          uint64_t v34 = 0;
        }
        OSStatus v39 = (double *)(v33 + 8 * v53);
        *OSStatus v39 = 0.0;
        char v40 = v39 + 1;
        while (v22 != v21)
        {
          uint64_t v73 = *((void *)v22-- - 1);
          *((void *)v39-- - 1) = v73;
        }
        goto LABEL_199;
      }
LABEL_90:
      double v29 = v29 * 0.11;
    }
LABEL_91:
    if ((v51 & 0x20) != 0) {
      int v55 = 1;
    }
    else {
      int v55 = mChannelsPerFrame;
    }
    unsigned int v56 = (v55 * v50) >> 3;
    *((_DWORD *)v17 + 5) = 1;
    *((_DWORD *)v17 + 6) = v56;
    *((_DWORD *)v17 + 4) = v56;
    if (v27 == a5->mSampleRate && v24 == a5->mFormatID)
    {
      BOOL v57 = v56 == a5->mBytesPerPacket && a5->mFramesPerPacket == 1;
      if (v57
        && mChannelsPerFrame == a5->mChannelsPerFrame
        && v43 == mBitsPerChannel
        && CA::Implementation::EquivalentFormatFlags(v17, a5, 0, 0))
      {
        double v29 = 1.0;
      }
    }
    if ((unint64_t)v22 < v23)
    {
      *v22++ = v29;
      goto LABEL_202;
    }
    uint64_t v58 = v22 - v21;
    unint64_t v59 = v58 + 1;
    if ((unint64_t)(v58 + 1) >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    if ((uint64_t)(v23 - (void)v21) >> 2 > v59) {
      unint64_t v59 = (uint64_t)(v23 - (void)v21) >> 2;
    }
    if (v23 - (unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v33 = v59;
    }
    if (v33) {
      unint64_t v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v33);
    }
    else {
      uint64_t v34 = 0;
    }
    OSStatus v39 = (double *)(v33 + 8 * v58);
    *OSStatus v39 = v29;
    char v40 = v39 + 1;
    while (v22 != v21)
    {
      uint64_t v66 = *((void *)v22-- - 1);
      *((void *)v39-- - 1) = v66;
    }
LABEL_199:
    unint64_t v23 = v33 + 8 * v34;
    if (v21) {
      operator delete(v21);
    }
    int v21 = v39;
    int v22 = v40;
LABEL_202:
    int v17 = (CA::Implementation *)((char *)v17 + 40);
  }
  while (v17 != (CA::Implementation *)v18);
  uint64_t v77 = (char *)outPropertyData;
  if (outPropertyData == v106) {
    goto LABEL_216;
  }
  while (1)
  {
    uint64_t v78 = v21;
    if (v21 != v22 && v21 + 1 != v22)
    {
      double v79 = *v21;
      long long v80 = v21 + 1;
      uint64_t v78 = v21;
      uint64_t v81 = v21 + 1;
      do
      {
        double v82 = *v81++;
        double v83 = v82;
        if (v79 < v82)
        {
          double v79 = v83;
          uint64_t v78 = v80;
        }
        long long v80 = v81;
      }
      while (v81 != v22);
    }
    uint64_t v84 = v78 - v21;
    id v85 = &v77[40 * v84];
    if ((*(unsigned int (**)(uint64_t, AudioCodec, char *, _OWORD *))(*(void *)a1 + 120))(a1, inCodec, v85, v102))
    {
      break;
    }
    int v86 = &v21[v84];
    if (v22 != v86 + 1) {
      memmove(&v21[v84], v86 + 1, (char *)v22 - (char *)(v86 + 1));
    }
    uint64_t v77 = (char *)outPropertyData;
    int v87 = (char *)outPropertyData + 40 * v84;
    int64_t v88 = v106 - (v87 + 40);
    if (v106 != v87 + 40) {
      memmove(v87, v87 + 40, v106 - (v87 + 40));
    }
    --v22;
    unint64_t v106 = &v87[v88];
    if (v77 == &v87[v88]) {
      goto LABEL_216;
    }
  }
  long long v91 = *(_OWORD *)v85;
  long long v92 = *((_OWORD *)v85 + 1);
  *(void *)&a5->int mBitsPerChannel = *((void *)v85 + 4);
  *(_OWORD *)&a5->double mSampleRate = v91;
  *(_OWORD *)&a5->UInt32 mBytesPerPacket = v92;
  if (mFormatID == 1885564203) {
    a5->AudioFormatID mFormatID = 1885564203;
  }
  if (v21) {
    operator delete(v21);
  }
  uint64_t PropertyInfo = 0;
  int v94 = a5->mChannelsPerFrame;
  int v93 = a5->mBitsPerChannel;
  if (v93 < 0) {
    int v93 = -v93;
  }
  unsigned int v95 = v93 + 7;
  if ((a5->mFormatFlags & 0x20) != 0) {
    int v94 = 1;
  }
  int v96 = v94 * (v95 >> 3);
  a5->UInt32 mFramesPerPacket = 1;
  a5->mBytesPerFrame = v96;
  a5->UInt32 mBytesPerPacket = v96;
LABEL_228:
  if (outPropertyData) {
    operator delete(outPropertyData);
  }
  return PropertyInfo;
}

void sub_1900B5108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p)
{
  if (a2)
  {
    if (v24) {
      operator delete(v24);
    }
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1900B5064);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<CA::StreamDescription>::resize(char **a1, unint64_t a2)
{
  unsigned int v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 3);
  unint64_t v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    int v21 = &v3[40 * a2];
    goto LABEL_19;
  }
  unsigned int v7 = a1[2];
  if (0xCCCCCCCCCCCCCCCDLL * ((v7 - v4) >> 3) >= v6)
  {
    size_t v22 = 40 * ((40 * v6 - 40) / 0x28) + 40;
    bzero(a1[1], v22);
    int v21 = &v4[v22];
LABEL_19:
    a1[1] = v21;
    return;
  }
  if (a2 > 0x666666666666666) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - v3) >> 3);
  uint64_t v9 = 2 * v8;
  if (2 * v8 <= a2) {
    uint64_t v9 = a2;
  }
  if (v8 >= 0x333333333333333) {
    unint64_t v10 = 0x666666666666666;
  }
  else {
    unint64_t v10 = v9;
  }
  AudioCodecPropertyID v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ISOLoudnessInfo>>(v10);
  unint64_t v12 = &v11[40 * v5];
  long long v14 = &v11[40 * v13];
  size_t v15 = 40 * ((40 * v6 - 40) / 0x28) + 40;
  bzero(v12, v15);
  int v16 = &v12[v15];
  OSStatus v18 = *a1;
  int v17 = a1[1];
  if (v17 != *a1)
  {
    do
    {
      long long v19 = *(_OWORD *)(v17 - 40);
      long long v20 = *(_OWORD *)(v17 - 24);
      *((void *)v12 - 1) = *((void *)v17 - 1);
      *(_OWORD *)(v12 - 24) = v20;
      *(_OWORD *)(v12 - 40) = v19;
      v12 -= 40;
      v17 -= 40;
    }
    while (v17 != v18);
    int v17 = *a1;
  }
  *a1 = v12;
  a1[1] = v16;
  a1[2] = v14;
  if (v17)
  {
    operator delete(v17);
  }
}

void applesauce::CF::DataRef::~DataRef(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

void *std::__function::__value_func<int ()(__sFILE *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *std::unique_ptr<__sFILE,std::function<int ()(__sFILE*)>>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *result;
  *double result = 0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v2 = result[4];
    if (!v2) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v3);
  }
  return result;
}

uint64_t std::__function::__func<int (*)(__sFILE *),std::allocator<int (*)(__sFILE *)>,int ()(__sFILE *)>::operator()(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*a2);
}

uint64_t std::__function::__func<int (*)(__sFILE *),std::allocator<int (*)(__sFILE *)>,int ()(__sFILE *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EDF8AFE8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<int (*)(__sFILE *),std::allocator<int (*)(__sFILE *)>,int ()(__sFILE *)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_1EDF8AFE8;
  result[1] = v3;
  return result;
}

void std::__function::__func<int (*)(__sFILE *),std::allocator<int (*)(__sFILE *)>,int ()(__sFILE *)>::~__func()
{
}

void acv2::CodecDecoderFactory::~CodecDecoderFactory(acv2::CodecDecoderFactory *this)
{
  *(void *)this = &unk_1EDF95F48;
  uint64_t v1 = (const void *)*((void *)this + 5);
  if (v1) {
    CFRelease(v1);
  }
  JUMPOUT(0x192FC8940);
}

{
  const void *v1;

  *(void *)this = &unk_1EDF95F48;
  uint64_t v1 = (const void *)*((void *)this + 5);
  if (v1) {
    CFRelease(v1);
  }
}

BOOL acv2::CodecEncoderFactory::CodecCanInitialize(int a1, acv2::CodecConverterFactory *this, const AudioStreamBasicDescription *a3, AudioStreamBasicDescription *a4)
{
  return acv2::CodecConverterFactory::CodecCanInitializeWith(this, a3, a4 + 1, (CA::StreamDescription *)a4);
}

uint64_t acv2::CodecEncoderFactory::BuildCodecConverterChain(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = *((_DWORD *)a2 + 3);
  if (v3)
  {
    unint64_t v5 = *(OpaqueAudioComponentInstance **)(a3 + 80);
    AudioComponentInstance outInstance = v5;
    uint64_t v61 = *a2;
    int v62 = *((_DWORD *)a2 + 2);
    unsigned int v6 = *((_DWORD *)a2 + 4);
    int v7 = *((_DWORD *)a2 + 5);
    unsigned int v8 = *((_DWORD *)a2 + 6);
    unsigned int v9 = *((_DWORD *)a2 + 7);
    int v11 = *((_DWORD *)a2 + 8);
    int v10 = *((_DWORD *)a2 + 9);
    v60[0] = *(_OWORD *)(a2 + 5);
    *(_OWORD *)((char *)v60 + 12) = *(_OWORD *)((char *)a2 + 52);
    int v12 = *((_DWORD *)a2 + 17);
    if (!(v9 | v12)) {
      return 4294967246;
    }
    uint64_t v16 = a2[9];
    unsigned int v17 = ((v11 + 7) >> 3) * v12;
    if ((v3 & 0x20) != 0) {
      unsigned int v17 = v8;
    }
    if (!v9) {
      unsigned int v6 = v17;
    }
    unsigned int v39 = v6;
    if (v9) {
      int v18 = v7;
    }
    else {
      int v18 = 1;
    }
    int v37 = v10;
    int v38 = v18;
    if (v9) {
      unsigned int v19 = v8;
    }
    else {
      unsigned int v19 = v17;
    }
    unsigned int v40 = v19;
    if (v9) {
      unsigned int v20 = v9;
    }
    else {
      unsigned int v20 = *((_DWORD *)a2 + 17);
    }
    char v43 = 0;
    v42[0] = &v43;
    v42[1] = &outInstance;
    if (v5)
    {
      if (!v12) {
        goto LABEL_21;
      }
      goto LABEL_40;
    }
    uint64_t v13 = AudioComponentInstanceNew(*(AudioComponent *)(a1 + 32), &outInstance);
    if (!v13)
    {
      unint64_t v5 = outInstance;
      if (outInstance)
      {
        char v43 = 1;
        int v10 = v37;
        if (!v12)
        {
LABEL_21:
          outWritable[0] = 0;
          *(_DWORD *)UInt32 outSize = 0;
          int v12 = v20;
          if (AudioCodecGetPropertyInfo(v5, 0x636D6E63u, (UInt32 *)outSize, outWritable))
          {
LABEL_39:
            int v10 = v37;
            goto LABEL_40;
          }
          CADeprecated::CAAutoFree<unsigned int>::CAAutoFree(buf, (unint64_t)*(unsigned int *)outSize >> 2, 0);
          if (AudioCodecGetProperty(v5, 0x636D6E63u, (UInt32 *)outSize, *(void **)buf))
          {
            int v21 = *(void **)buf;
          }
          else
          {
            int v21 = *(void **)buf;
            if (*(_DWORD *)outSize >= 4u)
            {
              uint64_t v22 = 0;
              int v12 = 0;
              int v23 = 0x7FFFFFFF;
              do
              {
                int v24 = *(_DWORD *)(*(void *)buf + v22);
                int v25 = v24 - v20;
                if ((int)(v24 - v20) < 0) {
                  int v25 = v20 - v24;
                }
                if (v25 < v23)
                {
                  int v23 = v25;
                  int v12 = *(_DWORD *)(*(void *)buf + v22);
                }
                v22 += 4;
              }
              while ((*(_DWORD *)outSize & 0xFFFFFFFC) != v22);
LABEL_38:
              free(v21);
              goto LABEL_39;
            }
          }
          int v12 = v20;
          if (!v21) {
            goto LABEL_39;
          }
          goto LABEL_38;
        }
LABEL_40:
        *(void *)AudioStreamBasicDescription buf = v61;
        *(_DWORD *)&uint8_t buf[8] = v62;
        *(_DWORD *)&unsigned char buf[12] = v3;
        *(_DWORD *)&buf[16] = v39;
        *(_DWORD *)&buf[20] = v38;
        *(_DWORD *)&uint8_t buf[24] = v40;
        *(_DWORD *)&buf[28] = v20;
        *(_DWORD *)unint64_t v59 = v11;
        *(_DWORD *)&v59[4] = v10;
        *(_OWORD *)&v59[8] = v60[0];
        *(_OWORD *)&v59[20] = *(_OWORD *)((char *)v60 + 12);
        *(_DWORD *)&v59[36] = v12;
        *(void *)&v59[40] = v16;
        if (v20 == v12 || (*(_DWORD *)&v59[16] & 0xFFFFFEFF) == 0x6D74622B)
        {
LABEL_51:
          double v29 = outInstance;
          double v30 = *(double *)buf;
          double v31 = *(double *)&v59[8];
          if (*(double *)buf < *(double *)&v59[8])
          {
            *(void *)AudioStreamBasicDescription buf = *(void *)&v59[8];
            double v30 = *(double *)&v59[8];
          }
          int outPropertyData = 0;
          UInt32 ioPropertyDataSize = 4;
          if (AudioCodecGetProperty(outInstance, 0x6C6D7263u, &ioPropertyDataSize, &outPropertyData)
            || !outPropertyData)
          {
            goto LABEL_60;
          }
          if (v31 == 0.0 && v30 == 0.0)
          {
            AudioConverterLog();
            unint64_t v32 = AudioConverterLog(void)::gLog;
            if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)UInt32 outSize = 136315394;
              *(void *)&outSize[4] = "CodecConverterFactory.cpp";
              LOWORD(outSize_12) = 1024;
              *(_DWORD *)((char *)&outSize_12 + 2) = 944;
              unint64_t v33 = "%25s:%-5d neither input nor output sampling rate specified";
LABEL_67:
              _os_log_impl(&dword_18FEC0000, v32, OS_LOG_TYPE_ERROR, v33, outSize, 0x12u);
              goto LABEL_68;
            }
            goto LABEL_68;
          }
          *(double *)UInt32 outSize = v30;
          acv2::ChooseNearestSampleRate(v29, (OpaqueAudioComponentInstance *)outSize, (double *)1);
          if (*(double *)outSize != v30)
          {
LABEL_60:
            if (v31 == 0.0)
            {
              if (v30 == 0.0)
              {
                AudioConverterLog();
                unint64_t v32 = AudioConverterLog(void)::gLog;
                if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)UInt32 outSize = 136315394;
                  *(void *)&outSize[4] = "CodecConverterFactory.cpp";
                  LOWORD(outSize_12) = 1024;
                  *(_DWORD *)((char *)&outSize_12 + 2) = 965;
                  unint64_t v33 = "%25s:%-5d neither input nor output sampling rate specified";
                  goto LABEL_67;
                }
                goto LABEL_68;
              }
              *(double *)Boolean outWritable = v30;
              acv2::ChooseNearestSampleRate(v29, (OpaqueAudioComponentInstance *)outWritable, 0);
              double v34 = *(double *)outWritable;
            }
            else
            {
              *(double *)Boolean outWritable = v31;
              acv2::ChooseNearestSampleRate(v29, (OpaqueAudioComponentInstance *)outWritable, 0);
              double v34 = *(double *)outWritable;
              if (vabdd_f64(*(double *)outWritable, v31) > 10.0)
              {
                AudioConverterLog();
                unint64_t v32 = AudioConverterLog(void)::gLog;
                if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)UInt32 outSize = 136315394;
                  *(void *)&outSize[4] = "CodecConverterFactory.cpp";
                  LOWORD(outSize_12) = 1024;
                  *(_DWORD *)((char *)&outSize_12 + 2) = 977;
                  unint64_t v33 = "%25s:%-5d unable to select compatible encoder sample rate";
                  goto LABEL_67;
                }
LABEL_68:
                uint64_t v13 = 1718449215;
                goto LABEL_75;
              }
            }
            *(double *)AudioStreamBasicDescription buf = v34;
            *(double *)&v59[8] = v34;
          }
          v41[2] = *(_OWORD *)v59;
          void v41[3] = *(_OWORD *)&v59[16];
          v41[4] = *(_OWORD *)&v59[32];
          v41[0] = *(_OWORD *)buf;
          v41[1] = *(_OWORD *)&buf[16];
          uint64_t v13 = acv2::CodecConverterFactory::ChooseIntermediateFormat(a1, outInstance, v41, (uint64_t)&v59[8], (AudioStreamBasicDescription *)buf, 1, *(_DWORD *)(a3 + 60));
          if (!v13)
          {
            long long v55 = *(_OWORD *)buf;
            *(void *)UInt32 outSize = v61;
            *(_DWORD *)&outSize[8] = v62;
            unint64_t outSize_12 = __PAIR64__(v39, v3);
            int v50 = v38;
            unsigned int v51 = v40;
            unsigned int v52 = v20;
            int v53 = v11;
            int v54 = v37;
            int v35 = *(_DWORD *)v59;
            uint64_t v57 = *(void *)v59;
            long long v56 = *(_OWORD *)&buf[16];
            if (*(int *)v59 < 0) {
              int v35 = -*(_DWORD *)v59;
            }
            LODWORD(v57) = (v35 + 7) & 0xFFFFFFF8;
            UInt32 ioPropertyDataSize = 0;
            AudioFormatProperty_FormatEmploysDependentPackets((RegistryAccess *)*(unsigned int *)&v59[16], &ioPropertyDataSize);
            operator new();
          }
          goto LABEL_75;
        }
        if ((v3 & 0x20) != 0)
        {
          unsigned int v26 = 1;
        }
        else
        {
          unsigned int v26 = v20;
          if (!v20)
          {
            unsigned int v27 = (v11 + 7) >> 3;
LABEL_47:
            if ((v3 & 0x20) != 0) {
              int v28 = 1;
            }
            else {
              int v28 = v12;
            }
            *(_DWORD *)&buf[28] = v12;
            *(_DWORD *)&uint8_t buf[24] = v27 * v28;
            *(_DWORD *)&buf[20] = 1;
            *(_DWORD *)&buf[16] = v27 * v28;
            goto LABEL_51;
          }
        }
        unsigned int v27 = v40 / v26;
        goto LABEL_47;
      }
      uint64_t v13 = 2003329396;
    }
LABEL_75:
    applesauce::raii::v1::detail::ScopeGuard<acv2::CodecEncoderFactory::BuildCodecConverterChain(acv2::StreamDescPair const&,acv2::ChainBuildSettings const&,acv2::AudioConverterChain &,acv2::PCMConverterFactory &)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard((uint64_t)v42);
    return v13;
  }
  uint64_t v13 = 1718449215;
  AudioConverterLog();
  long long v14 = AudioConverterLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)AudioConverterLog(void)::gLog, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
    *(void *)&uint8_t buf[4] = "CodecConverterFactory.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 392;
    _os_log_impl(&dword_18FEC0000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d wildcard for input LPCM format flags is not allowed", buf, 0x12u);
  }
  return v13;
}

void sub_1900B5D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41)
{
  (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
  applesauce::raii::v1::detail::ScopeGuard<acv2::CodecEncoderFactory::BuildCodecConverterChain(acv2::StreamDescPair const&,acv2::ChainBuildSettings const&,acv2::AudioConverterChain &,acv2::PCMConverterFactory &)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard((uint64_t)&a25);
  _Unwind_Resume(a1);
}

uint64_t applesauce::raii::v1::detail::ScopeGuard<acv2::CodecEncoderFactory::BuildCodecConverterChain(acv2::StreamDescPair const&,acv2::ChainBuildSettings const&,acv2::AudioConverterChain &,acv2::PCMConverterFactory &)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard(uint64_t a1)
{
  if (**(unsigned char **)a1) {
    AudioComponentInstanceDispose(**(AudioComponentInstance **)(a1 + 8));
  }
  return a1;
}

void acv2::ChooseNearestSampleRate(acv2 *this, OpaqueAudioComponentInstance *a2, double *a3)
{
  UInt32 outSize = 0;
  Boolean outWritable = 0;
  if (a3) {
    AudioCodecPropertyID v5 = 1634300786;
  }
  else {
    AudioCodecPropertyID v5 = 1634694002;
  }
  double v6 = *(double *)a2;
  if (!AudioCodecGetPropertyInfo(this, v5, &outSize, &outWritable))
  {
    if (outSize >= 0x10)
    {
      size_t v9 = outSize & 0xFFFFFFF0;
      int v7 = (double *)operator new(v9);
      bzero(v7, v9);
      unsigned int v8 = (double *)((char *)v7 + v9);
    }
    else
    {
      int v7 = 0;
      unsigned int v8 = 0;
    }
    if (AudioCodecGetProperty(this, v5, &outSize, v7)) {
      goto LABEL_26;
    }
    double v10 = *v7;
    if ((char *)v8 - (char *)v7 != 16 || v10 != 0.0 || v7[1] != 0.0)
    {
      if (v7 == v8) {
        goto LABEL_25;
      }
      double v11 = vabdd_f64(v10, v6);
      int v12 = v7;
      while (1)
      {
        double v13 = v12[1];
        if (*v12 <= v6 && v13 >= v6) {
          break;
        }
        double v15 = vabdd_f64(*v12, v6);
        if (v15 < v11)
        {
          double v10 = *v12;
          double v11 = v15;
        }
        double v16 = vabdd_f64(v13, v6);
        if (v16 < v11)
        {
          double v10 = v12[1];
          double v11 = v16;
        }
        v12 += 2;
        if (v12 == v8) {
          goto LABEL_25;
        }
      }
    }
    double v10 = v6;
LABEL_25:
    *(double *)a2 = v10;
LABEL_26:
    if (v7) {
      operator delete(v7);
    }
  }
}

void sub_1900B5F70(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void acv2::CodecEncoderFactory::~CodecEncoderFactory(acv2::CodecEncoderFactory *this)
{
  *(void *)this = &unk_1EDF95F48;
  uint64_t v1 = (const void *)*((void *)this + 5);
  if (v1) {
    CFRelease(v1);
  }
  JUMPOUT(0x192FC8940);
}

{
  const void *v1;

  *(void *)this = &unk_1EDF95F48;
  uint64_t v1 = (const void *)*((void *)this + 5);
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t FLACAudioFile::SetVorbisCommentFieldList(uint64_t a1, unsigned int a2, CFDictionaryRef *a3)
{
  uint64_t v5 = *(void *)(a1 + 120);
  if (v5 && *(uint64_t *)(v5 + 24) > 0) {
    return 1869640813;
  }
  if ((*(unsigned char *)(a1 + 100) & 2) == 0) {
    return 1886547263;
  }
  int v7 = (void *)(a1 + 208);
  if (a2 >= 0x10) {
    unint64_t v8 = (a2 - 16) / 0x18uLL;
  }
  else {
    unint64_t v8 = 0;
  }
  VorbisComment::Clear((VorbisComment *)(a1 + 208));
  if (*a3)
  {
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(*a3, @"VENDOR");
    VorbisComment::SetVendorString((const void **)(a1 + 208), Value);
  }
  std::vector<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>::reserve((void *)(a1 + 216), v8);
  if (v8)
  {
    CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    double v11 = (const __CFString **)(a3 + 3);
    do
    {
      CFStringRef v12 = *(v11 - 1);
      if (v12)
      {
        CFStringRef v13 = *v11;
        if (*v11)
        {
          CFStringRef Copy = CFStringCreateCopy(v10, v12);
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v17, Copy);
          CFStringRef v15 = CFStringCreateCopy(v10, v13);
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v15);
          VorbisComment::AddUserComment(v7, v17, &cf);
          if (cf) {
            CFRelease(cf);
          }
          if (v17) {
            CFRelease(v17);
          }
        }
      }
      v11 += 3;
      --v8;
    }
    while (v8);
  }
  return 0;
}

void sub_1900B6198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, CFTypeRef a10)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a10) {
    CFRelease(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t FLACAudioFile::GetVorbisCommentFieldList(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  return VorbisComment::GetVorbisCommentFieldList((const void **)(a1 + 208), a2, a3);
}

uint64_t FLACAudioFile::CreatePacketTable(FLACAudioFile *this)
{
  return (*(uint64_t (**)(FLACAudioFile *, uint64_t, void, uint64_t))(*(void *)this + 688))(this, -1, 0, 1);
}

uint64_t FLACAudioFile::ParseAudioFile(FLACAudioFile *this)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  unsigned int v75 = 0;
  unsigned int v71 = 0;
  int v69 = 0;
  uint64_t PacketHeader = (*(uint64_t (**)(void, void, void, uint64_t, unsigned __int8 *, unsigned int *))(**((void **)this + 13) + 48))(*((void *)this + 13), 0, 0, 10, v81, &v75);
  if (PacketHeader)
  {
LABEL_2:
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      *(void *)&uint8_t buf[4] = "FLACAudioFile.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 385;
      unsigned int v3 = MEMORY[0x1E4F14500];
      uint64_t v4 = "%25s:%-5d  FLAC FSRead Failed (ID3)";
LABEL_4:
      _os_log_impl(&dword_18FEC0000, v3, OS_LOG_TYPE_ERROR, v4, buf, 0x12u);
      return PacketHeader;
    }
    return PacketHeader;
  }
  uint64_t v6 = 0;
  while (v75 >= 0xA)
  {
    unsigned int v7 = ID3Size(v75, v81, &v69);
    if (!v7) {
      break;
    }
    if (*((void *)this + 31) == -1) {
      *((void *)this + 31) = 0;
    }
    v6 += v7;
    uint64_t PacketHeader = (*(uint64_t (**)(void, void, uint64_t, uint64_t, unsigned __int8 *, unsigned int *))(**((void **)this + 13) + 48))(*((void *)this + 13), 0, v6, 10, v81, &v75);
    if (PacketHeader) {
      goto LABEL_2;
    }
  }
  uint64_t v74 = 0;
  long long v72 = 0u;
  long long v73 = 0u;
  uint64_t PacketHeader = (*(uint64_t (**)(void, void, uint64_t, uint64_t, unsigned int *, unsigned int *))(**((void **)this + 13) + 48))(*((void *)this + 13), 0, v6, 4, &v71, &v75);
  if (PacketHeader)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return PacketHeader;
    }
    *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
    *(void *)&uint8_t buf[4] = "FLACAudioFile.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 409;
    unsigned int v3 = MEMORY[0x1E4F14500];
    uint64_t v4 = "%25s:%-5d  FLAC FSRead Failed 1";
    goto LABEL_4;
  }
  uint64_t PacketHeader = 1685348671;
  if (v75 <= 3)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return PacketHeader;
    }
    *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
    *(void *)&uint8_t buf[4] = "FLACAudioFile.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 410;
    unsigned int v3 = MEMORY[0x1E4F14500];
    uint64_t v4 = "%25s:%-5d  Unexpected eof while reading FLAC stream marker";
    goto LABEL_4;
  }
  unsigned int v8 = v71;
  unsigned int v71 = bswap32(v71);
  if (v8 != 1130450022) {
    return PacketHeader;
  }
  uint64_t v9 = v6 + 4;
  CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v67 = (void **)((char *)this + 216);
  uint64_t v68 = (std::vector<char> *)((char *)this + 152);
  do
  {
    uint64_t PacketHeader = (*(uint64_t (**)(void, void, uint64_t, uint64_t, unsigned int *, unsigned int *))(**((void **)this + 13) + 48))(*((void *)this + 13), 0, v9, 4, &v71, &v75);
    if (PacketHeader) {
      return PacketHeader;
    }
    if (v75 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
        *(void *)&uint8_t buf[4] = "FLACAudioFile.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 427;
        _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Unexpected eof while reading FLAC metadata block header", buf, 0x12u);
      }
      return 1685348671;
    }
    unsigned int v11 = bswap32(v71);
    unsigned int v12 = HIBYTE(v11) & 0x7F;
    unint64_t v13 = v11 & 0xFFFFFF;
    unsigned int v70 = v11 & 0xFFFFFF;
    unsigned int v71 = v11;
    if (v12 > 5)
    {
      if (v12 != 6)
      {
        if (v12 == 127) {
          return 1685348671;
        }
        goto LABEL_99;
      }
      if (*((void *)this + 30)) {
        goto LABEL_99;
      }
      uint64_t PacketHeader = FLACAudioFile::ParsePicture(this, v9, &v70);
      goto LABEL_66;
    }
    if (!v12)
    {
      if (v13 < 0x22) {
        return 1718449215;
      }
      std::vector<char>::pointer begin = (_OWORD *)*((void *)this + 19);
      unint64_t v18 = *((void *)this + 20) - (void)begin;
      if (v18 > 0x31)
      {
        if (v18 != 50) {
          *((void *)this + 20) = (char *)begin + 50;
        }
      }
      else
      {
        std::vector<unsigned char>::__append(v68, 50 - v18);
        std::vector<char>::pointer begin = v68->__begin_;
      }
      *(_DWORD *)int v86 = 0;
      *std::vector<char>::pointer begin = xmmword_1901C6170;
      unint64_t v19 = (unint64_t)(begin + 1);
      uint64_t PacketHeader = (*(uint64_t (**)(void, void, uint64_t, uint64_t, _OWORD *, unsigned char *))(**((void **)this + 13) + 48))(*((void *)this + 13), 0, v9 + 4, 34, begin + 1, v86);
      if (!PacketHeader)
      {
        if (*(_DWORD *)v86 >= 0x22u)
        {
          v68->__begin_[12] = 0x80;
          *(void *)__b = begin + 1;
          *(void *)&__b[8] = begin + 1;
          *(void *)&__b[16] = (char *)begin + 50;
          uint64_t v85 = 0;
          if ((v19 & 3) != 0)
          {
            int v21 = 0;
            uint64_t v22 = (char *)begin + 17;
            int v23 = -8;
            do
            {
              HIDWORD(v85) = v23 + 16;
              if (v19 >= (unint64_t)begin + 50) {
                int v24 = 255;
              }
              else {
                int v24 = *(unsigned __int8 *)v19;
              }
              int v21 = v24 | (v21 << 8);
              LODWORD(v85) = v21;
              *(void *)__b = ++v19;
              v23 += 8;
              BOOL v61 = (v22++ & 3) == 0;
            }
            while (!v61);
            LODWORD(v85) = v21 << (24 - v23);
          }
          FLACUnpackStreamInfo((uint64_t)__b, (uint64_t)buf);
          if (*(_DWORD *)buf == *(_DWORD *)&buf[4]) {
            uint64_t v26 = *(unsigned int *)buf;
          }
          else {
            uint64_t v26 = 0;
          }
          *((_DWORD *)this + 50) = *(_DWORD *)&buf[12];
          DWORD2(v72) = 1718378851;
          LODWORD(v73) = 0;
          DWORD1(v73) = v26;
          LODWORD(v25) = *(_DWORD *)&buf[16];
          *(double *)&long long v72 = (double)v25;
          int v27 = *(_DWORD *)&buf[24];
          HIDWORD(v73) = *(_DWORD *)&buf[20];
          *((_DWORD *)this + 35) = kFLACChannelConfigToLayoutTag[*(_DWORD *)&buf[20] - 1];
          *((_DWORD *)this + 36) = v27;
          HIDWORD(v29) = v27;
          LODWORD(v29) = v27 - 16;
          unsigned int v28 = v29 >> 2;
          if (v28 <= 4 && ((0x17u >> v28) & 1) != 0) {
            HIDWORD(v72) = dword_1901DC360[v28];
          }
          uint64_t v74 = 0;
          DWORD2(v73) = 0;
          uint64_t v30 = v83;
          *((void *)this + 23) = v83;
          if (v26)
          {
            uint64_t v31 = v30 / v26;
            if (v30 > v26 * (v30 / v26)) {
              LODWORD(v31) = v31 + 1;
            }
            *((_DWORD *)this + 49) = v31 * v26 - v30;
          }
          (*(void (**)(FLACAudioFile *, long long *))(*(void *)this + 176))(this, &v72);
          uint64_t PacketHeader = 0;
        }
        else
        {
          uint64_t PacketHeader = 4294967257;
        }
      }
LABEL_66:
      if (PacketHeader) {
        return PacketHeader;
      }
      LODWORD(v13) = v70;
      goto LABEL_99;
    }
    if (v12 == 4)
    {
      uint64_t v14 = *((void *)this + 13);
      memset(buf, 0, sizeof(buf));
      int v80 = 0;
      CFIndex numBytes = 0;
      VorbisComment::Clear((VorbisComment *)buf);
      if (v14 && v13)
      {
        if ((*(unsigned int (**)(uint64_t, void, uint64_t, uint64_t, char *, int *))(*(void *)v14 + 48))(v14, 0, v9 + 4, 4, (char *)&numBytes + 4, &v80))
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__b = 136315394;
            *(void *)&__b[4] = "VorbisComment.cpp";
            *(_WORD *)&__b[12] = 1024;
            *(_DWORD *)&__b[14] = 111;
            CFStringRef v15 = MEMORY[0x1E4F14500];
            double v16 = "%25s:%-5d  VorbisComment::VorbisComment: Read vendor string length failed";
            goto LABEL_90;
          }
          goto LABEL_91;
        }
        uint64_t v20 = HIDWORD(numBytes);
        if ((unint64_t)HIDWORD(numBytes) + 4 > v13)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__b = 136315394;
            *(void *)&__b[4] = "VorbisComment.cpp";
            *(_WORD *)&__b[12] = 1024;
            *(_DWORD *)&__b[14] = 115;
            CFStringRef v15 = MEMORY[0x1E4F14500];
            double v16 = "%25s:%-5d  VorbisComment::VorbisComment: exceed total metadata block size";
            goto LABEL_90;
          }
          goto LABEL_91;
        }
        uint64_t v65 = v9 + 8;
        if (HIDWORD(numBytes))
        {
          std::string::basic_string[abi:ne180100](__b, (HIDWORD(numBytes) + 1), 48);
          unint64_t v32 = __b[23] >= 0 ? __b : *(unsigned char **)__b;
          int v33 = (*(uint64_t (**)(uint64_t, void, uint64_t, void, unsigned char *, int *))(*(void *)v14 + 48))(v14, 0, v9 + 8, HIDWORD(numBytes), v32, &v80);
          if (v33)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)int v86 = 136315394;
              *(void *)&v86[4] = "VorbisComment.cpp";
              __int16 v87 = 1024;
              int v88 = 120;
              _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  VorbisComment::VorbisComment: Read vendor string failed", v86, 0x12u);
            }
          }
          else
          {
            if (__b[23] >= 0) {
              double v34 = __b;
            }
            else {
              double v34 = *(const UInt8 **)__b;
            }
            CFStringRef v35 = CFStringCreateWithBytes(v10, v34, HIDWORD(numBytes), 0x8000100u, 1u);
            applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v35);
            VorbisComment::SetVendorString((const void **)buf, cf);
            if (cf) {
              CFRelease(cf);
            }
            v65 += HIDWORD(numBytes);
          }
          if ((__b[23] & 0x80000000) != 0) {
            operator delete(*(void **)__b);
          }
          if (v33) {
            goto LABEL_91;
          }
        }
        if ((*(unsigned int (**)(uint64_t, void, uint64_t, uint64_t, CFIndex *, int *))(*(void *)v14 + 48))(v14, 0, v65, 4, &numBytes, &v80))
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__b = 136315394;
            *(void *)&__b[4] = "VorbisComment.cpp";
            *(_WORD *)&__b[12] = 1024;
            *(_DWORD *)&__b[14] = 126;
            CFStringRef v15 = MEMORY[0x1E4F14500];
            double v16 = "%25s:%-5d  VorbisComment::VorbisComment: Read number of user comments failed";
            goto LABEL_90;
          }
          goto LABEL_91;
        }
        unint64_t v36 = v20 + 8;
        if (v36 > v13)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__b = 136315394;
            *(void *)&__b[4] = "VorbisComment.cpp";
            *(_WORD *)&__b[12] = 1024;
            *(_DWORD *)&__b[14] = 130;
            CFStringRef v15 = MEMORY[0x1E4F14500];
            double v16 = "%25s:%-5d  VorbisComment::VorbisComment: exceed total metadata block size";
            goto LABEL_90;
          }
          goto LABEL_91;
        }
        std::vector<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>::reserve(&buf[8], numBytes);
        if (numBytes)
        {
          unsigned int v64 = 0;
          uint64_t v41 = v65 + 4;
          while (1)
          {
            unsigned int v77 = 0;
            if ((*(unsigned int (**)(uint64_t, void, uint64_t, uint64_t, unsigned int *, int *))(*(void *)v14 + 48))(v14, 0, v41, 4, &v77, &v80))
            {
              if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                goto LABEL_91;
              }
              *(_DWORD *)__b = 136315394;
              *(void *)&__b[4] = "VorbisComment.cpp";
              *(_WORD *)&__b[12] = 1024;
              *(_DWORD *)&__b[14] = 136;
              CFStringRef v15 = MEMORY[0x1E4F14500];
              double v16 = "%25s:%-5d  VorbisComment::VorbisComment: Read user comment string length failed";
              goto LABEL_90;
            }
            unint64_t v42 = v36 + v77 + 4;
            if (v42 > v13)
            {
              if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                goto LABEL_91;
              }
              *(_DWORD *)__b = 136315394;
              *(void *)&__b[4] = "VorbisComment.cpp";
              *(_WORD *)&__b[12] = 1024;
              *(_DWORD *)&__b[14] = 140;
              CFStringRef v15 = MEMORY[0x1E4F14500];
              double v16 = "%25s:%-5d  VorbisComment::VorbisComment: exceed total metadata block size";
LABEL_90:
              _os_log_impl(&dword_18FEC0000, v15, OS_LOG_TYPE_ERROR, v16, __b, 0x12u);
LABEL_91:
              VorbisComment::Clear((VorbisComment *)buf);
              goto LABEL_92;
            }
            std::string::basic_string[abi:ne180100](__b, v77 + 1, 48);
            unint64_t v66 = v42;
            v41 += 4;
            char v43 = __b[23] >= 0 ? __b : *(unsigned char **)__b;
            int v44 = (*(uint64_t (**)(uint64_t, void, uint64_t, void, unsigned char *, int *))(*(void *)v14 + 48))(v14, 0, v41, v77, v43, &v80);
            int v45 = MEMORY[0x1E4F14500];
            if (v44) {
              break;
            }
            v41 += v77;
            if ((__b[23] & 0x80000000) != 0)
            {
              int v49 = *(const UInt8 **)__b;
              int v50 = *(char **)__b;
            }
            else
            {
              int v49 = __b;
              int v50 = __b;
            }
            unsigned int v51 = strchr(v50, 61);
            if (!v51)
            {
              uint64_t v57 = MEMORY[0x1E4F14500];
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)int v86 = 136315394;
                *(void *)&v86[4] = "VorbisComment.cpp";
                __int16 v87 = 1024;
                int v88 = 147;
                long long v46 = v57;
                int v47 = "%25s:%-5d  VorbisComment::VorbisComment: could not find equal sign in user comment";
LABEL_111:
                _os_log_impl(&dword_18FEC0000, v46, OS_LOG_TYPE_ERROR, v47, v86, 0x12u);
              }
LABEL_112:
              char v48 = 0;
              goto LABEL_124;
            }
            CFIndex v52 = v51 - (char *)v49;
            int v53 = v49;
            int v54 = v51;
            CFStringRef v63 = CFStringCreateWithBytes(v10, v53, v52, 0x8000100u, 1u);
            long long v55 = __b;
            if (__b[23] < 0) {
              long long v55 = *(unsigned char **)__b;
            }
            CFStringRef v56 = CFStringCreateWithBytes(v10, (const UInt8 *)v54 + 1, v55 - (v54 + 1) + v77, 0x8000100u, 1u);
            applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v86, v63);
            applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v76, v56);
            VorbisComment::AddUserComment(buf, *(CFTypeRef *)v86, &v76);
            if (v76) {
              CFRelease(v76);
            }
            if (*(void *)v86) {
              CFRelease(*(CFTypeRef *)v86);
            }
            char v48 = 1;
LABEL_124:
            if ((__b[23] & 0x80000000) != 0) {
              operator delete(*(void **)__b);
            }
            if ((v48 & 1) == 0) {
              goto LABEL_91;
            }
            ++v64;
            unint64_t v36 = v66;
            if (v64 >= numBytes) {
              goto LABEL_92;
            }
          }
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int v86 = 136315394;
            *(void *)&v86[4] = "VorbisComment.cpp";
            __int16 v87 = 1024;
            int v88 = 144;
            long long v46 = v45;
            int v47 = "%25s:%-5d  VorbisComment::VorbisComment: Read user comment string failed";
            goto LABEL_111;
          }
          goto LABEL_112;
        }
      }
LABEL_92:
      uint64_t v37 = *((void *)this + 26);
      int v38 = (void *)*((void *)this + 27);
      *((void *)this + 26) = *(void *)buf;
      *(void *)AudioStreamBasicDescription buf = v37;
      if (v38)
      {
        uint64_t v39 = *((void *)this + 28);
        unsigned int v40 = v38;
        if ((void *)v39 != v38)
        {
          do
          {
            v39 -= 16;
            std::__destroy_at[abi:ne180100]<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>,0>(v39);
          }
          while ((void *)v39 != v38);
          unsigned int v40 = *v67;
        }
        *((void *)this + 28) = v38;
        operator delete(v40);
        *uint64_t v67 = 0;
        *((void *)this + 28) = 0;
        *((void *)this + 29) = 0;
      }
      *(_OWORD *)((char *)this + 216) = *(_OWORD *)&buf[8];
      *((void *)this + 29) = *(void *)&buf[24];
      memset(&buf[8], 0, 24);
      *(void *)__b = &buf[8];
      std::vector<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100]((void ***)__b);
      if (*(void *)buf) {
        CFRelease(*(CFTypeRef *)buf);
      }
    }
LABEL_99:
    v9 += v13 + 4;
  }
  while ((v11 & 0x80000000) == 0);
  while (1)
  {
    unsigned int v71 = 0;
    int v60 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, unsigned int *, unsigned int *))(**((void **)this + 13) + 48))(*((void *)this + 13), 0, v9, 4, &v71, &v75);
    LOWORD(v59) = v71;
    BOOL v61 = v60 || v75 == 0;
    if (v61) {
      break;
    }
    unsigned int v58 = bswap32(v71);
    unsigned int v59 = HIWORD(v58);
    unsigned int v71 = HIWORD(v58);
    if ((v58 & 0xFFFC0000) == 0xFFF80000) {
      break;
    }
    ++v9;
  }
  uint64_t PacketHeader = 1685348671;
  if ((v59 & 0xFFFC) == 0xFFF8)
  {
    *((void *)this + 9) = v9;
    uint64_t PacketHeader = (*(uint64_t (**)(FLACAudioFile *, uint64_t, void, uint64_t))(*(void *)this + 688))(this, 1, 0, 1);
    if (PacketHeader)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        return PacketHeader;
      }
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      *(void *)&uint8_t buf[4] = "FLACAudioFile.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 487;
      unsigned int v3 = MEMORY[0x1E4F14500];
      uint64_t v4 = "%25s:%-5d  FLACAudioFile::ParseAudioFile : ScanForPackets failed";
      goto LABEL_4;
    }
    uint64_t PacketHeader = FLACAudioFile::ParseFirstPacketHeader(this, (uint64_t)&v72, v62);
    if (PacketHeader)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
        *(void *)&uint8_t buf[4] = "FLACAudioFile.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 492;
        unsigned int v3 = MEMORY[0x1E4F14500];
        uint64_t v4 = "%25s:%-5d  FLAC FSRead Failed 2";
        goto LABEL_4;
      }
    }
  }
  return PacketHeader;
}

void sub_1900B7174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,CFTypeRef cf,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,CFTypeRef a33)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t FLACAudioFile::ParsePicture(FLACAudioFile *this, uint64_t a2, unsigned int *a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v28 = 0;
  memset(length, 0, sizeof(length));
  memset(&v26, 0, sizeof(v26));
  uint64_t v6 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t *, char *))(**((void **)this + 13) + 48))(*((void *)this + 13), 0, a2 + 4, 4, &v28, (char *)&v28 + 4);
  if (!v6)
  {
    if (*a3 <= 3)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        return 4294967246;
      }
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      uint64_t v30 = "FLACAudioFile.cpp";
      __int16 v31 = 1024;
      int v32 = 706;
      uint64_t v9 = MEMORY[0x1E4F14500];
LABEL_8:
      _os_log_impl(&dword_18FEC0000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d  FLACAudioFile::ParsePicture: exceed total metadata block size", buf, 0x12u);
      return 4294967246;
    }
    LODWORD(v28) = bswap32(v28);
    uint64_t v6 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, unsigned int *, char *))(**((void **)this + 13)
                                                                                             + 48))(*((void *)this + 13), 0, a2 + 8, 4, &length[2], (char *)&v28 + 4);
    if (v6)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        return v6;
      }
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      uint64_t v30 = "FLACAudioFile.cpp";
      __int16 v31 = 1024;
      int v32 = 710;
      unsigned int v7 = MEMORY[0x1E4F14500];
      unsigned int v8 = "%25s:%-5d  FLACAudioFile::ParsePicture: Read MIME type string length failed";
      goto LABEL_4;
    }
    uint64_t v10 = bswap32(length[2]);
    length[2] = v10;
    if (v10 + 8 > (unint64_t)*a3)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        return 4294967246;
      }
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      uint64_t v30 = "FLACAudioFile.cpp";
      __int16 v31 = 1024;
      int v32 = 724;
      uint64_t v9 = MEMORY[0x1E4F14500];
      goto LABEL_8;
    }
    uint64_t v11 = a2 + v10 + 12;
    uint64_t v6 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, unsigned int *, char *))(**((void **)this + 13)
                                                                                             + 48))(*((void *)this + 13), 0, v11, 4, &length[1], (char *)&v28 + 4);
    if (v6)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        return v6;
      }
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      uint64_t v30 = "FLACAudioFile.cpp";
      __int16 v31 = 1024;
      int v32 = 726;
      unsigned int v7 = MEMORY[0x1E4F14500];
      unsigned int v8 = "%25s:%-5d  FLACAudioFile::ParsePicture: Read description string length failed";
      goto LABEL_4;
    }
    uint64_t v12 = bswap32(length[1]);
    length[1] = v12;
    unint64_t v13 = v10 + v12 + 12;
    if (v13 > *a3)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        return 4294967246;
      }
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      uint64_t v30 = "FLACAudioFile.cpp";
      __int16 v31 = 1024;
      int v32 = 740;
      uint64_t v9 = MEMORY[0x1E4F14500];
      goto LABEL_8;
    }
    uint64_t v14 = v11 + v12;
    uint64_t v6 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, unsigned int *, char *))(**((void **)this + 13)
                                                                                             + 48))(*((void *)this + 13), 0, v14 + 20, 4, length, (char *)&v28 + 4);
    if (v6)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        return v6;
      }
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      uint64_t v30 = "FLACAudioFile.cpp";
      __int16 v31 = 1024;
      int v32 = 743;
      unsigned int v7 = MEMORY[0x1E4F14500];
      unsigned int v8 = "%25s:%-5d  FLACAudioFile::ParsePicture: Read picture data length failed";
      goto LABEL_4;
    }
    unsigned int v15 = length[0];
    std::vector<char>::size_type v16 = bswap32(length[0]);
    length[0] = v16;
    int v17 = v13 + 20;
    unint64_t v18 = *a3;
    unint64_t v19 = v13 + 20 + v16;
    if (4294967275u - v13 >= v16 && v19 > v18 && (v19 & 0xFFFFFF) == v18)
    {
      LODWORD(v18) = v16 + v17;
      *a3 = v16 + v17;
    }
    if (v19 > v18)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        return 4294967246;
      }
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      uint64_t v30 = "FLACAudioFile.cpp";
      __int16 v31 = 1024;
      int v32 = 758;
      uint64_t v9 = MEMORY[0x1E4F14500];
      goto LABEL_8;
    }
    uint64_t v6 = 0;
    if (!v15 || v28 != 3) {
      return v6;
    }
    std::vector<unsigned char>::resize(&v26, v16);
    std::vector<char>::pointer begin = (UInt8 *)v26.__begin_;
    uint64_t v6 = (*(uint64_t (**)(void, void, uint64_t, void, std::vector<char>::pointer, char *))(**((void **)this + 13) + 48))(*((void *)this + 13), 0, v14 + 24, length[0], v26.__begin_, (char *)&v28 + 4);
    if (v6)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_44;
      }
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      uint64_t v30 = "FLACAudioFile.cpp";
      __int16 v31 = 1024;
      int v32 = 762;
      int v21 = MEMORY[0x1E4F14500];
      uint64_t v22 = "%25s:%-5d  FLACAudioFile::ParsePicture: Read picture data failed";
    }
    else
    {
      unsigned int v23 = length[0];
      if (HIDWORD(v28) >= length[0])
      {
        int v24 = (const void *)*((void *)this + 30);
        if (v24)
        {
          CFRelease(v24);
          unsigned int v23 = length[0];
        }
        uint64_t v6 = 0;
        *((void *)this + 30) = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], begin, v23);
        goto LABEL_44;
      }
      uint64_t v6 = 1685348671;
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
LABEL_44:
        if (begin)
        {
          v26.__end_ = (std::vector<char>::pointer)begin;
          operator delete(begin);
        }
        return v6;
      }
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      uint64_t v30 = "FLACAudioFile.cpp";
      __int16 v31 = 1024;
      int v32 = 763;
      int v21 = MEMORY[0x1E4F14500];
      uint64_t v22 = "%25s:%-5d  Unexpected eof while reading FLAC picture block";
    }
    _os_log_impl(&dword_18FEC0000, v21, OS_LOG_TYPE_ERROR, v22, buf, 0x12u);
    goto LABEL_44;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
    uint64_t v30 = "FLACAudioFile.cpp";
    __int16 v31 = 1024;
    int v32 = 703;
    unsigned int v7 = MEMORY[0x1E4F14500];
    unsigned int v8 = "%25s:%-5d  FLACAudioFile::ParsePicture: Read picture type failed";
LABEL_4:
    _os_log_impl(&dword_18FEC0000, v7, OS_LOG_TYPE_ERROR, v8, buf, 0x12u);
  }
  return v6;
}

void sub_1900B78C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t FLACAudioFile::ParseFirstPacketHeader(FLACAudioFile *this, uint64_t a2, AudioStreamBasicDescription *a3)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t v5 = (uint64_t *)*((void *)this + 15);
  if (!v5) {
    operator new();
  }
  int v26 = 0;
  CompressedPacketTable::operator[]((uint64_t)__p, v5, 0);
  uint64_t v6 = (char *)__p[0];
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 1718378851;
  *(void *)(a2 + 12) = 0;
  *(void *)(a2 + 28) = 0;
  *(void *)(a2 + 20) = 0;
  *(_DWORD *)(a2 + 36) = 0;
  std::vector<unsigned char>::vector(__p, 0x10uLL);
  uint64_t v7 = (*(uint64_t (**)(void, void, char *, uint64_t, void *, int *))(**((void **)this + 13) + 48))(*((void *)this + 13), 0, &v6[*((void *)this + 9)], 16, __p[0], &v26);
  unsigned int v8 = (unsigned __int8 *)__p[0];
  if (v7) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = v26 == 16;
  }
  if (!v9)
  {
    if (!__p[0]) {
      return v7;
    }
    goto LABEL_47;
  }
  unsigned __int8 v10 = *((unsigned char *)__p[0] + 1);
  if (v10)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = (*(uint64_t (**)(void, void, char *, uint64_t, char *, int *))(**((void **)this + 13) + 48))(*((void *)this + 13), 0, &v6[*((void *)this + 9)], 4, (char *)this + 176, &v26);
    unsigned int v8 = (unsigned __int8 *)__p[0];
  }
  unint64_t v11 = v8[2];
  unint64_t v12 = v11 >> 4;
  *(_DWORD *)(a2 + 20) = kFLACBlockSizes[v11 >> 4];
  unsigned __int8 v13 = v8[2];
  int v14 = v13 & 0xF;
  *(double *)a2 = kFLACSampleRates[v13 & 0xF];
  int v15 = *(_DWORD *)((char *)&kFLACChannelConfigToLayoutTag + (((unint64_t)v8[3] >> 2) & 0x3C));
  *((_DWORD *)this + 35) = v15;
  *(_DWORD *)(a2 + 28) = (unsigned __int16)v15;
  HIDWORD(v17) = kFLACBitDepths[((unint64_t)v8[3] >> 1) & 7];
  LODWORD(v17) = HIDWORD(v17) - 16;
  unsigned int v16 = v17 >> 2;
  if (v16 <= 4 && ((0x17u >> v16) & 1) != 0) {
    *(_DWORD *)(a2 + 12) = dword_1901DC360[v16];
  }
  if (v14 == 14 || (v11 & 0xE0) == 0x60 || (v13 & 0xE) == 0xC)
  {
    if ((char)v8[4] < 0)
    {
      int v19 = v8[4];
      if ((v19 & 0xE0) == 0xC0)
      {
        unsigned int v18 = 6;
      }
      else if ((v19 & 0xF0) == 0xE0)
      {
        unsigned int v18 = 7;
      }
      else if ((v19 & 0xF8) == 0xF0)
      {
        unsigned int v18 = 8;
      }
      else if ((v19 & 0xFC) == 0xF8)
      {
        unsigned int v18 = 9;
      }
      else if ((v19 & 0xFE) == 0xFC)
      {
        unsigned int v18 = 10;
      }
      else if ((v10 & (v19 == 254)) != 0)
      {
        unsigned int v18 = 11;
      }
      else
      {
        unsigned int v18 = 4;
      }
    }
    else
    {
      unsigned int v18 = 5;
    }
  }
  else
  {
    unsigned int v18 = 4;
  }
  if (v12 == 7)
  {
    unsigned int v20 = __rev16(*(unsigned __int16 *)&v8[v18]);
    int v21 = 2;
  }
  else
  {
    if (v12 != 6) {
      goto LABEL_39;
    }
    unsigned int v20 = v8[v18];
    int v21 = 1;
  }
  *(_DWORD *)(a2 + 20) = v20 + 1;
  v18 += v21;
LABEL_39:
  switch(v14)
  {
    case 13:
      unsigned int v23 = __rev16(*(unsigned __int16 *)&v8[v18]);
LABEL_45:
      double v22 = (double)v23;
      goto LABEL_46;
    case 12:
      double v22 = (double)(1000 * v8[v18]);
LABEL_46:
      *(double *)a2 = v22;
      break;
    case 14:
      unsigned int v23 = 2 * (4 * __rev16(*(unsigned __int16 *)&v8[v18]) + (bswap32(*(unsigned __int16 *)&v8[v18]) >> 16));
      goto LABEL_45;
  }
LABEL_47:
  __p[1] = v8;
  operator delete(v8);
  return v7;
}

void sub_1900B7C3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t FLACAudioFile::SetAlbumArtwork(FLACAudioFile *this, CFTypeRef cf)
{
  uint64_t v4 = *((void *)this + 15);
  if (v4 && *(uint64_t *)(v4 + 24) > 0) {
    return 1869640813;
  }
  if ((*((unsigned char *)this + 100) & 2) == 0) {
    return 1886547263;
  }
  if (cf) {
    CFRetain(cf);
  }
  uint64_t v6 = (const void *)*((void *)this + 30);
  if (v6) {
    CFRelease(v6);
  }
  uint64_t result = 0;
  *((void *)this + 30) = cf;
  return result;
}

uint64_t FLACAudioFile::GetAlbumArtwork(FLACAudioFile *this, const __CFData **a2)
{
  unsigned int v3 = (const void *)*((void *)this + 30);
  if (v3)
  {
    CFRetain(v3);
    *a2 = (const __CFData *)*((void *)this + 30);
  }
  return 0;
}

uint64_t FLACAudioFile::GetSourceBitDepth(FLACAudioFile *this, int *a2)
{
  *a2 = *((_DWORD *)this + 36);
  return 0;
}

void FLACAudioFile::ScanForPackets(FLACAudioFile *this, uint64_t a2, DataSource *a3)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  v39.mStartOffset = 0;
  *(void *)&v39.mVariableFramesInPacket = 0;
  int64_t v37 = 0;
  unsigned int v36 = 0;
  uint64_t v5 = (uint64_t *)*((void *)this + 15);
  if (!v5) {
    operator new();
  }
  uint64_t v6 = v5[3];
  if (a2 == -1 || v6 < a2)
  {
    unsigned int v38 = 0;
    if ((*(unsigned int (**)(void, int64_t *, DataSource *))(**((void **)this + 13) + 24))(*((void *)this + 13), &v37, a3))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
        *(void *)&uint8_t buf[4] = "FLACAudioFile.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1878;
        _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  GetSize failed", buf, 0x12u);
      }
    }
    else
    {
      if (v6)
      {
        uint64_t v7 = *((void *)this + 9);
        uint64_t v8 = v6 - 1;
        CompressedPacketTable::operator[]((uint64_t)buf, v5, v6 - 1);
        uint64_t v9 = *(void *)buf;
        CompressedPacketTable::operator[]((uint64_t)&__p, v5, v8);
        uint64_t v10 = v9 + v7 + HIDWORD(v35);
      }
      else
      {
        (*(void (**)(FLACAudioFile *, void))(*(void *)this + 648))(this, 0);
        uint64_t v10 = *((void *)this + 9);
      }
      if (a2 == -1)
      {
        uint64_t v12 = -1;
      }
      else
      {
        uint64_t v11 = *((void *)this + 15);
        if (v11) {
          uint64_t v11 = *(void *)(v11 + 24);
        }
        uint64_t v12 = a2 - v11;
      }
      std::vector<unsigned char>::vector(&__p, 0x10uLL);
      while (1)
      {
        SInt64 v13 = v10 - *((void *)this + 9);
        v39.mStartOffset = v13;
        if ((*(unsigned int (**)(void, void, uint64_t, uint64_t, void *, unsigned int *))(**((void **)this + 13) + 48))(*((void *)this + 13), 0, v10, 16, __p, &v38)|| v38 < 7)
        {
          break;
        }
        if ((*((unsigned char *)__p + 1) & 0xFC | (*(unsigned __int8 *)__p << 8)) != 0xFFF8)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
            *(void *)&uint8_t buf[4] = "FLACAudioFile.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1919;
            _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  FLAC - Syncword not found", buf, 0x12u);
          }
          break;
        }
        FLACAudioFile::GetHeaderSize(this, v10, &v36, 0);
        LODWORD(v15) = 0;
        unsigned int v16 = v36;
        uint64_t v17 = v10 + v36;
        int v40 = 0;
        uint64_t v18 = v37 - v17;
        if (v37 >= v17)
        {
          if (v18 > 5)
          {
            int v19 = *((_DWORD *)this + 13);
            unsigned int v20 = *((_DWORD *)this + 36);
            unsigned int v21 = v19 * *((_DWORD *)this + 11) * (v20 >> 3);
            if (v20 == 20) {
              unsigned int v21 = ((double)v21 * 1.5);
            }
            if (!v21) {
              unsigned int v21 = 0x100000;
            }
            if (v19) {
              int v22 = 8 * v19 + 18;
            }
            else {
              int v22 = 82;
            }
            LODWORD(v23) = v21 + v22;
            unsigned int v24 = *((_DWORD *)this + 50);
            if (v23 <= v24) {
              unint64_t v23 = v24;
            }
            else {
              unint64_t v23 = v23;
            }
            if (v18 >= v23) {
              size_t v15 = v23;
            }
            else {
              size_t v15 = v18;
            }
            std::vector<unsigned char>::vector(buf, v15);
            if ((*(unsigned int (**)(void, void, uint64_t, size_t, void, int *))(**((void **)this + 13)
                                                                                                + 48))(*((void *)this + 13), 0, v17, v15, *(void *)buf, &v40))
            {
              BOOL v25 = 0;
            }
            else
            {
              BOOL v25 = v40 == v15;
            }
            if (v25)
            {
              if (v15 >= 2)
              {
                uint64_t v26 = 0;
                int v27 = **(unsigned char **)buf;
                while (1)
                {
                  int v28 = *(unsigned __int8 *)(*(void *)buf + v26 + 1);
                  if (v27 == 255 && (v28 & 0xFE) == 0xF8)
                  {
                    unsigned int v41 = 0;
                    FLACAudioFile::GetHeaderSize(this, v17 + v26, &v41, 1);
                    if (v41) {
                      break;
                    }
                  }
                  if ((int)v26 + 1 < v15)
                  {
                    size_t v29 = v26 + 2;
                    ++v26;
                    int v27 = v28;
                    if (v29 < v15) {
                      continue;
                    }
                  }
                  goto LABEL_53;
                }
                LODWORD(v15) = v26;
              }
            }
            else
            {
              LODWORD(v15) = 0;
            }
LABEL_53:
            if (*(void *)buf)
            {
              *(void *)&uint8_t buf[8] = *(void *)buf;
              operator delete(*(void **)buf);
            }
          }
          else
          {
            LODWORD(v15) = v37 - v17;
          }
        }
        uint64_t v30 = v15 + v16;
        v39.UInt32 mDataByteSize = v15 + v16;
        if (v30 > (*(unsigned int (**)(FLACAudioFile *))(*(void *)this + 632))(this)) {
          (*(void (**)(FLACAudioFile *, void))(*(void *)this + 648))(this, v15 + v16);
        }
        int64_t v31 = v37;
        if (v10 + v30 > v37)
        {
          *((unsigned char *)this + 180) = 1;
          break;
        }
        uint64_t v32 = v13 + *((void *)this + 9);
        uint64_t v33 = v32 + v30;
        if (v32 + v30 >= v37)
        {
          *((unsigned char *)this + 180) = 1;
        }
        else if (v32 > v10)
        {
          v39.UInt32 mDataByteSize = v33 - v10;
        }
        AudioFileObject::AppendPacket(this, &v39);
        if (v12 == -1) {
          uint64_t v12 = -1;
        }
        else {
          --v12;
        }
        if (v12)
        {
          uint64_t v10 = v33;
          if (v33 < v31) {
            continue;
          }
        }
        break;
      }
      if (__p)
      {
        CFStringRef v35 = __p;
        operator delete(__p);
      }
    }
  }
}

void sub_1900B82FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  if (a10) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void FLACAudioFile::GetHeaderSize(FLACAudioFile *this, uint64_t a2, unsigned int *a3, int a4)
{
  unsigned int v30 = 0;
  *a3 = 0;
  std::vector<unsigned char>::vector(__p, 0x10uLL);
  uint64_t v8 = (unsigned __int8 *)__p[0];
  int v9 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, void *, unsigned int *))(**((void **)this + 13)
                                                                                           + 48))(*((void *)this + 13), 0, a2, 16, __p[0], &v30);
  uint64_t v10 = __p[0];
  if (v9) {
    BOOL v11 = 0;
  }
  else {
    BOOL v11 = v30 >= 7;
  }
  if (v11)
  {
    if ((*((unsigned char *)__p[0] + 1) & 2) != 0) {
      goto LABEL_54;
    }
    unsigned int v12 = *((unsigned __int8 *)__p[0] + 2);
    if (v12 < 0x10) {
      goto LABEL_54;
    }
    uint64_t v13 = v12 & 0xF;
    if ((v12 & 0xF) == 0xF) {
      goto LABEL_54;
    }
    unint64_t v14 = *((unsigned __int8 *)__p[0] + 3);
    if (v14 > 0xAF) {
      goto LABEL_54;
    }
    if (~v14 & 6) == 0 || (v14) {
      goto LABEL_54;
    }
    int v16 = *((char *)__p[0] + 4);
    if (v16 < 0)
    {
      if ((v16 & 0xE0) == 0xC0)
      {
        unsigned int v17 = 6;
      }
      else if ((v16 & 0xF0) == 0xE0)
      {
        unsigned int v17 = 7;
      }
      else if ((v16 & 0xF8) == 0xF0)
      {
        unsigned int v17 = 8;
      }
      else if ((v16 & 0xFC) == 0xF8)
      {
        unsigned int v17 = 9;
      }
      else if ((v16 & 0xFE) == 0xFC)
      {
        unsigned int v17 = 10;
      }
      else
      {
        unsigned int v18 = 0;
        if ((*((unsigned char *)__p[0] + 1) & 1) == 0 || *((unsigned __int8 *)__p[0] + 4) != 254) {
          goto LABEL_55;
        }
        unsigned int v17 = 11;
      }
    }
    else
    {
      unsigned int v17 = 5;
    }
    unsigned int v19 = v12 >> 4;
    if (v19 == 7)
    {
      v17 += 2;
    }
    else if (v19 == 6)
    {
      ++v17;
    }
    if (v13 == 14)
    {
      unsigned int v21 = 2
          * (4 * __rev16(*(unsigned __int16 *)((char *)__p[0] + v17))
           + (bswap32(*(unsigned __int16 *)((char *)__p[0] + v17)) >> 16));
    }
    else
    {
      if (v13 != 13)
      {
        double v20 = 0.0;
        if (v13 == 12) {
          double v20 = (double)(1000 * *((unsigned __int8 *)__p[0] + v17++));
        }
        goto LABEL_42;
      }
      unsigned int v21 = __rev16(*(unsigned __int16 *)((char *)__p[0] + v17));
    }
    double v20 = (double)v21;
    v17 += 2;
LABEL_42:
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    unint64_t v24 = v14 >> 4;
    uint64_t v25 = (v14 >> 1) & 7;
    unsigned int v26 = v17;
    do
      LODWORD(v23) = FLAC_crc8[v23 ^ v8[v22++]];
    while (v17 != v22);
    if (v23 == *((unsigned __int8 *)__p[0] + v17))
    {
      if (!a4) {
        goto LABEL_57;
      }
      unsigned int v18 = 0;
      int v27 = kFLACBitDepths[v25];
      if (v13 <= 0xB) {
        double v20 = kFLACSampleRates[v13];
      }
      if (*((_DWORD *)this + 36) != v27
        || *((_DWORD *)this + 13) != LOWORD(kFLACChannelConfigToLayoutTag[v24])
        || *((double *)this + 3) != v20)
      {
        goto LABEL_55;
      }
      int v28 = *((_DWORD *)this + 11);
      if ((*((unsigned char *)__p[0] + 1) & 1) == 0 || !v28)
      {
        if (*((unsigned char *)__p[0] + 1) & 1 | v28)
        {
LABEL_57:
          if (v26 >= v30) {
            unsigned int v18 = 0;
          }
          else {
            unsigned int v18 = v26 + 1;
          }
          goto LABEL_55;
        }
      }
    }
LABEL_54:
    unsigned int v18 = 0;
LABEL_55:
    *a3 = v18;
    goto LABEL_56;
  }
  if (__p[0])
  {
LABEL_56:
    __p[1] = v10;
    operator delete(v10);
  }
}

void sub_1900B8620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL FLACAudioFile::IsDataFormatSupported(FLACAudioFile *this, const AudioStreamBasicDescription *a2)
{
  return a2->mFormatID == 1718378851;
}

uint64_t FLACAudioFile::GetEstimatedDuration(FLACAudioFile *this, double *a2)
{
  uint64_t v3 = *((void *)this + 23);
  if (v3 < 1)
  {
    uint64_t v5 = *((unsigned int *)this + 11);
    if (v5)
    {
      double v6 = *((double *)this + 3);
      double v4 = (double)((*(uint64_t (**)(FLACAudioFile *))(*(void *)this + 240))(this) * v5) / v6;
    }
    else
    {
      double v4 = 0.0;
    }
  }
  else
  {
    double v4 = (double)v3 / *((double *)this + 3);
  }
  *a2 = v4;
  return 0;
}

uint64_t FLACAudioFile::SetLoudnessInfo(const void **this, CFTypeRef *a2)
{
  v14[4] = *MEMORY[0x1E4F143B8];
  CFTypeRef v3 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  CFTypeRef cf = v3;
  v14[0] = &unk_1EDF8B0C0;
  v14[3] = v14;
  applesauce::CF::details::to_description_json_style_helper((uint64_t)__p, &cf, 0, (uint64_t)v14);
  std::__function::__value_func<std::pair<std::string,std::string> ()(applesauce::CF::TypeRef,applesauce::CF::TypeRef)>::~__value_func[abi:ne180100](v14);
  if (v3) {
    CFRelease(v3);
  }
  if (!this[26] && this[28] == this[27]) {
    VorbisComment::SetVendorString(this + 26, @"Apple");
  }
  VorbisComment::RemoveUserCommentsWithFieldName((VorbisComment *)(this + 26), @"LOUDNESS");
  CFRetain(@"LOUDNESS");
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, @"LOUDNESS");
  if ((v13 & 0x80u) == 0) {
    double v4 = __p;
  }
  else {
    double v4 = (void **)__p[0];
  }
  if (v4)
  {
    if ((v13 & 0x80u) == 0) {
      CFIndex v5 = v13;
    }
    else {
      CFIndex v5 = (CFIndex)__p[1];
    }
    CFStringRef v6 = CFStringCreateWithBytes(0, (const UInt8 *)v4, v5, 0x8000100u, 0);
    CFStringRef v10 = v6;
    if (!v6)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
  }
  else
  {
    CFStringRef v6 = 0;
    CFStringRef v10 = 0;
  }
  VorbisComment::AddUserComment(this + 26, cf, (const void **)&v10);
  if (v6) {
    CFRelease(v6);
  }
  if (cf) {
    CFRelease(cf);
  }
  if ((char)v13 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v8 = (uint64_t *)this[15];
  if (v8 && v8[3] > 0) {
    return 1869640813;
  }
  if ((*((unsigned char *)this + 100) & 2) != 0) {
    return 0;
  }
  return 1886547263;
}

void sub_1900B88F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t FLACAudioFile::GetLoudnessInfo(FLACAudioFile *this, CACFDictionary *a2)
{
  return VorbisComment::FillLoudnessInfoDictionary((FLACAudioFile *)((char *)this + 208), a2);
}

uint64_t FLACAudioFile::GetInfoDictionary(const __CFString **this, CACFDictionary *a2)
{
  VorbisComment::FillInfoDictionary(this + 26, a2);
  double v6 = 0.0;
  double v4 = (AudioFileObject *)((uint64_t (*)(const __CFString **, double *))(*this)[17].isa)(this, &v6);
  if (!v4) {
    AudioFileObject::AddDurationToInfoDictionary(v4, a2, &v6);
  }
  return 0;
}

uint64_t FLACAudioFile::SetChannelLayout(FLACAudioFile *this, UInt32 a2, const AudioChannelLayout *a3)
{
  if (a2 < 0xC) {
    return 561211770;
  }
  uint64_t v15 = v3;
  uint64_t v16 = v4;
  UInt32 ioPropertyDataSize = 4;
  int outPropertyData = 0;
  uint64_t result = AudioFormatGetProperty(0x6E63686Du, a2, a3, &ioPropertyDataSize, &outPropertyData);
  if (!result)
  {
    if (outPropertyData != *((_DWORD *)this + 13)) {
      return 4294967246;
    }
    unsigned int v12 = 0;
    UInt32 ioPropertyDataSize = 4;
    uint64_t result = AudioFormatGetProperty(0x636D636Cu, a2, a3, &ioPropertyDataSize, &v12);
    if (result) {
      return result;
    }
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.i32[0] == *((_DWORD *)this + 13))
    {
      int v11 = 0;
      VorbisComment::GetWAVEChannelMask(*((VorbisComment **)this + 27), *((VorbisComment **)this + 28), &v11);
      if (v11 != v12)
      {
        CFStringRef v10 = (FLACAudioFile *)((char *)this + 208);
        if (a3->mChannelLayoutTag == *((_DWORD *)this + 35)) {
          VorbisComment::RemoveUserCommentsWithFieldName(v10, @"WAVEFORMATEXTENSIBLE_CHANNEL_MASK");
        }
        else {
          VorbisComment::SetWAVEChannelMask((const void **)v10);
        }
      }
      return 0;
    }
    else
    {
      return 4294967246;
    }
  }
  return result;
}

uint64_t FLACAudioFile::GetChannelLayout(FLACAudioFile *this, unsigned int *a2, AudioChannelLayout *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = 561211770;
  UInt32 ioPropertyDataSize = 12;
  uint64_t v14 = 0;
  if (!a2) {
    return v3;
  }
  if (VorbisComment::GetWAVEChannelMask(*((VorbisComment **)this + 27), *((VorbisComment **)this + 28), &v14))
  {
    UInt32 v7 = 12;
    goto LABEL_4;
  }
  HIDWORD(v14) = *((_DWORD *)this + 13);
  uint64_t PropertyInfo = AudioFormatGetPropertyInfo(0x636C636Du, 8u, &v14, &ioPropertyDataSize);
  if (!PropertyInfo)
  {
    UInt32 v7 = ioPropertyDataSize;
LABEL_4:
    if (*a2 >= v7)
    {
      BOOL v8 = v7 >= *a2;
      p_UInt32 ioPropertyDataSize = &ioPropertyDataSize;
      if (v8) {
        p_UInt32 ioPropertyDataSize = a2;
      }
      size_t v10 = *p_ioPropertyDataSize;
      *a2 = v10;
      if (a3)
      {
        if (v14)
        {
          return AudioFormatGetProperty(0x636C636Du, 8u, &v14, &ioPropertyDataSize, a3);
        }
        else
        {
          bzero(a3, v10);
          uint64_t v3 = 0;
          a3->signed int mChannelLayoutTag = *((_DWORD *)this + 35);
        }
      }
      else
      {
        return 0;
      }
    }
    return v3;
  }
  uint64_t v12 = PropertyInfo;
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
    unsigned int v17 = "FLACAudioFile.cpp";
    __int16 v18 = 1024;
    int v19 = 1245;
    _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  FLACAudioFile::GetChannelLayout: can't get AudioChannelLayout size for channel mask", buf, 0x12u);
  }
  return v12;
}

uint64_t FLACAudioFile::GetChannelLayoutSize(FLACAudioFile *this, unsigned int *a2, unsigned int *a3)
{
  uint64_t inSpecifier = 0;
  if (a3) {
    *a3 = *((unsigned char *)this + 100) & 2;
  }
  if (!a2) {
    return 0;
  }
  if (VorbisComment::GetWAVEChannelMask(*((VorbisComment **)this + 27), *((VorbisComment **)this + 28), &inSpecifier))
  {
    uint64_t result = 0;
    *a2 = 32;
  }
  else
  {
    HIDWORD(inSpecifier) = *((_DWORD *)this + 13);
    return AudioFormatGetPropertyInfo(0x636C636Du, 8u, &inSpecifier, a2);
  }
  return result;
}

uint64_t FLACAudioFile::SetMagicCookieData(FLACAudioFile *this, size_t __len, char *__src)
{
  UInt32 v4 = __len;
  if (__len < 0x32 || *((_DWORD *)__src + 1) == 1632396900)
  {
    UInt32 v7 = (void *)((char *)this + 152);
    double v6 = (char *)*((void *)this + 19);
    size_t v8 = __len;
    unint64_t v9 = *((void *)this + 21);
    if (v9 - (unint64_t)v6 >= __len)
    {
      uint64_t v15 = (unsigned char *)*((void *)this + 20);
      uint64_t v16 = v15 - v6;
      if (v15 - v6 >= (unint64_t)__len)
      {
        if (__len) {
          memmove(*((void **)this + 19), __src, __len);
        }
        uint64_t result = 0;
        uint64_t v14 = &v6[v4];
      }
      else
      {
        unsigned int v17 = &__src[__len];
        __int16 v18 = &__src[v16];
        if (v15 != v6)
        {
          memmove(*((void **)this + 19), __src, v15 - v6);
          double v6 = (char *)*((void *)this + 20);
        }
        if (v16 != v8) {
          memmove(v6, v18, v17 - v18);
        }
        uint64_t result = 0;
        uint64_t v14 = &v6[v17 - v18];
      }
    }
    else
    {
      if (v6)
      {
        *((void *)this + 20) = v6;
        operator delete(v6);
        unint64_t v9 = 0;
        *UInt32 v7 = 0;
        *((void *)this + 20) = 0;
        *((void *)this + 21) = 0;
      }
      uint64_t v10 = 2 * v9;
      if (2 * v9 <= v4) {
        uint64_t v10 = v4;
      }
      if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v11 = v10;
      }
      std::vector<unsigned char>::__vallocate[abi:ne180100]((void *)this + 19, v11);
      uint64_t v12 = (char *)*((void *)this + 20);
      memmove(v12, __src, v8);
      uint64_t result = 0;
      uint64_t v14 = &v12[v8];
    }
    goto LABEL_28;
  }
  UInt32 outPropertyDataSize = 50;
  uint64_t result = AudioFormatGetPropertyInfo(0x6D636466u, __len, __src, &outPropertyDataSize);
  if (result) {
    goto LABEL_27;
  }
  int v19 = (char *)*((void *)this + 19);
  unint64_t v20 = *((void *)this + 20) - (void)v19;
  if (outPropertyDataSize <= v20)
  {
    if (outPropertyDataSize < v20) {
      *((void *)this + 20) = &v19[outPropertyDataSize];
    }
  }
  else
  {
    std::vector<unsigned char>::__append((std::vector<char> *)((char *)this + 152), outPropertyDataSize - v20);
    int v19 = (char *)*((void *)this + 19);
  }
  uint64_t result = AudioFormatGetProperty(0x6D636466u, v4, __src, &outPropertyDataSize, v19);
  if (result)
  {
LABEL_27:
    uint64_t v14 = (char *)*((void *)this + 19);
LABEL_28:
    *((void *)this + 20) = v14;
  }
  return result;
}

uint64_t FLACAudioFile::GetMagicCookieData(FLACAudioFile *this, unsigned int *a2, void *__dst)
{
  uint64_t result = 2003334207;
  if (__dst)
  {
    if (a2)
    {
      double v6 = (unsigned char *)*((void *)this + 19);
      UInt32 v7 = (unsigned char *)*((void *)this + 20);
      if (v6 != v7)
      {
        size_t v8 = v7 - v6;
        uint64_t result = 561211770;
        if (v8 <= *a2)
        {
          memcpy(__dst, v6, v8);
          uint64_t result = 0;
          *a2 = *((_DWORD *)this + 40) - *((_DWORD *)this + 38);
        }
      }
    }
    else
    {
      return 561211770;
    }
  }
  return result;
}

uint64_t FLACAudioFile::GetMagicCookieDataSize(FLACAudioFile *this, unsigned int *a2, unsigned int *a3)
{
  if (a3) {
    *a3 = *((unsigned char *)this + 100) & 2;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v3 = *((void *)this + 19);
  uint64_t v4 = *((void *)this + 20);
  if (v3 == v4)
  {
    if ((*((unsigned char *)this + 100) & 2) == 0) {
      return 2003334207;
    }
    unsigned int v5 = 0;
  }
  else
  {
    unsigned int v5 = v4 - v3;
  }
  uint64_t result = 0;
  *a2 = v5;
  return result;
}

uint64_t FLACAudioFile::GetBitRate(FLACAudioFile *this, unsigned int *a2)
{
  uint64_t v4 = *((void *)this + 23) + *((int *)this + 49);
  if (v4 < 1) {
    return AudioFileObject::GetBitRate(this, a2);
  }
  double v5 = *((double *)this + 3);
  if (v5 <= 0.0) {
    return AudioFileObject::GetBitRate(this, a2);
  }
  double v6 = (double)v4 / v5;
  uint64_t v10 = 0;
  int v7 = (*(uint64_t (**)(void, uint64_t *))(**((void **)this + 13) + 24))(*((void *)this + 13), &v10);
  if (v6 <= 0.0 || v7 != 0) {
    return AudioFileObject::GetBitRate(this, a2);
  }
  uint64_t result = 0;
  *a2 = ((double)(v10 - *((void *)this + 9)) * 8.0 / v6);
  return result;
}

uint64_t FLACAudioFile::GetNumPackets(FLACAudioFile *this)
{
  if (*((unsigned char *)this + 180)
    || (int v4 = (*(uint64_t (**)(FLACAudioFile *, uint64_t, void, uint64_t))(*(void *)this + 688))(this, -1, 0, 1), result = 0, !v4))
  {
    uint64_t v2 = *((void *)this + 15);
    if (v2) {
      return *(void *)(v2 + 24);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t FLACAudioFile::GetNumBytes(FLACAudioFile *this)
{
  uint64_t v4 = 0;
  int v2 = (*(uint64_t (**)(void, uint64_t *))(**((void **)this + 13) + 24))(*((void *)this + 13), &v4);
  uint64_t result = v4;
  if (!v2) {
    return v4 - *((void *)this + 9);
  }
  return result;
}

uint64_t FLACAudioFile::UpdateSize(FLACAudioFile *this)
{
  return 0;
}

uint64_t FLACAudioFile::GetFormatList(FLACAudioFile *this, unsigned int *a2, AudioFormatListItem *a3)
{
  Float64 v6 = *((double *)this + 3);
  AudioFormatID v7 = *((_DWORD *)this + 8);
  v13[0] = *(_OWORD *)((char *)this + 36);
  *(_OWORD *)((char *)v13 + 12) = *((_OWORD *)this + 3);
  AudioChannelLayoutTag v8 = *((_DWORD *)this + 35);
  unsigned int v12 = 0;
  WAVEChannelMasdouble k = VorbisComment::GetWAVEChannelMask(*((VorbisComment **)this + 27), *((VorbisComment **)this + 28), &v12);
  if (!WAVEChannelMask) {
    AudioChannelLayoutTag v8 = AudioFormatProperty_LayoutTagForWAVEChannelMask(v12, (unsigned int *)inSpecifier);
  }
  memset(inSpecifier, 0, sizeof(inSpecifier));
  DWORD2(inSpecifier[0]) = v7;
  uint64_t v10 = *((void *)this + 19);
  uint64_t v15 = 0;
  uint64_t v16 = v10;
  int v17 = *((_DWORD *)this + 40) - v10;
  if (AudioFormatGetProperty(0x666C7374u, 0x38u, inSpecifier, a2, a3))
  {
    a3->mASBD.double mSampleRate = v6;
    a3->mASBD.AudioFormatID mFormatID = v7;
    *(_OWORD *)&a3->mASBD.AudioFormatFlags mFormatFlags = v13[0];
    *(_OWORD *)&a3->mASBD.mBytesPerFrame = *(_OWORD *)((char *)v13 + 12);
    a3->signed int mChannelLayoutTag = v8;
    *a2 = 48;
  }
  else if (!WAVEChannelMask)
  {
    a3->signed int mChannelLayoutTag = v8;
  }
  return 0;
}

uint64_t FLACAudioFile::GetFormatListInfo(FLACAudioFile *this, UInt32 *outPropertyDataSize, unsigned int *a3)
{
  int v5 = *((_DWORD *)this + 8);
  memset(v8, 0, sizeof(v8));
  DWORD2(v8[0]) = v5;
  uint64_t v6 = *((void *)this + 19);
  uint64_t v9 = 0;
  uint64_t v10 = v6;
  int v11 = *((_DWORD *)this + 40) - v6;
  if (AudioFormatGetPropertyInfo(0x666C7374u, 0x38u, v8, outPropertyDataSize))
  {
    *UInt32 outPropertyDataSize = 48;
    *a3 = 0;
  }
  return 0;
}

uint64_t FLACAudioFile::SetProperty(FLACAudioFile *this, int a2, uint64_t a3, uint64_t *a4)
{
  switch(a2)
  {
    case 1633776244:
      if (a3 >= 8) {
        return (*(uint64_t (**)(FLACAudioFile *, uint64_t))(*(void *)this + 720))(this, *a4);
      }
      return 561211770;
    case 1986225779:
      if (a3 < 0x10) {
        return 561211770;
      }
      return (*(uint64_t (**)(FLACAudioFile *, uint64_t, uint64_t *))(*(void *)this + 752))(this, a3, a4);
    case 1886283375:
      if (a3 >= 8)
      {
        uint64_t v4 = 0;
        *((_DWORD *)this + 49) = *((_DWORD *)a4 + 3);
        return v4;
      }
      return 561211770;
    default:
      return AudioFileObject::SetProperty(this, a2, a3, a4);
  }
}

uint64_t FLACAudioFile::GetProperty(FLACAudioFile *this, int a2, unsigned int *a3, uint64_t *a4)
{
  uint64_t v6 = this;
  if (a2 <= 1886283374)
  {
    if (a2 <= 1768174446)
    {
      if (a2 != 1633776244)
      {
        if (a2 == 1751217000)
        {
          if (*a3 >= 0x10)
          {
            uint64_t v7 = *((void *)this + 19);
          }
          else
          {
            uint64_t v7 = *((void *)this + 19);
            if ((unint64_t)(*((void *)this + 20) - v7) < 0x32) {
              return 561211770;
            }
          }
          uint64_t result = 0;
          *(_OWORD *)a4 = *(_OWORD *)(v7 + 34);
          goto LABEL_44;
        }
        goto LABEL_39;
      }
      if (*a3 >= 8)
      {
        uint64_t result = (*(uint64_t (**)(FLACAudioFile *, uint64_t *))(*(void *)this + 712))(this, a4);
        if (result) {
          return result;
        }
        goto LABEL_26;
      }
      return 561211770;
    }
    if (a2 == 1768174447)
    {
      uint64_t result = 1886681407;
      uint64_t v12 = *((void *)v6 + 31);
      if (v12 == -1
        || *((void *)v6 + 26)
        || *((void *)v6 + 28) != *((void *)v6 + 27)
        || (*((unsigned char *)v6 + 100) & 2) != 0)
      {
        return result;
      }
      if (*a3 >= 8)
      {
        uint64_t result = 0;
        *a4 = v12;
LABEL_26:
        unsigned int v10 = 8;
LABEL_45:
        *a3 = v10;
        return result;
      }
      return 561211770;
    }
    if (a2 == 1886090594)
    {
      if (*a3 != 4) {
        return 561211770;
      }
      if (*((unsigned char *)this + 180))
      {
        a2 = 1886090594;
        goto LABEL_39;
      }
      uint64_t result = 0;
      int v14 = *((_DWORD *)v6 + 13);
      unsigned int v15 = *((_DWORD *)v6 + 36);
      unsigned int v16 = v14 * *((_DWORD *)v6 + 11) * (v15 >> 3);
      if (v15 == 20) {
        unsigned int v16 = ((double)v16 * 1.5);
      }
      if (!v16) {
        unsigned int v16 = 0x100000;
      }
      if (v14) {
        int v17 = 8 * v14 + 18;
      }
      else {
        int v17 = 82;
      }
      unsigned int v13 = v16 + v17;
      unsigned int v18 = *((_DWORD *)v6 + 50);
      if (v18 >= 0x100000) {
        unsigned int v18 = 0x100000;
      }
      if (v13 <= v18) {
        unsigned int v13 = v18;
      }
LABEL_59:
      *(_DWORD *)a4 = v13;
      return result;
    }
LABEL_39:
    return AudioFileObject::GetProperty(this, a2, a3, a4);
  }
  if (a2 <= 1935832163)
  {
    if (a2 == 1886283375)
    {
      if (*a3 >= 0x10)
      {
        uint64_t result = 0;
        *a4 = *((void *)v6 + 23);
        int v11 = *((_DWORD *)v6 + 49);
        *((_DWORD *)a4 + 2) = 0;
        *((_DWORD *)a4 + 3) = v11;
LABEL_44:
        unsigned int v10 = 16;
        goto LABEL_45;
      }
      return 561211770;
    }
    if (a2 == 1886616165)
    {
      if (*a3 == 4)
      {
        if (!*((unsigned char *)this + 180))
        {
          uint64_t result = (*(uint64_t (**)(FLACAudioFile *, uint64_t, void, uint64_t))(*(void *)this + 688))(this, -1, 0, 1);
          if (result) {
            return result;
          }
        }
        this = v6;
        a2 = 1886616165;
        goto LABEL_39;
      }
      return 561211770;
    }
    goto LABEL_39;
  }
  if (a2 == 1935832164)
  {
    if (*a3 != 4) {
      return 561211770;
    }
    unsigned int v19 = 0;
    uint64_t result = (*(uint64_t (**)(FLACAudioFile *, unsigned int *))(*(void *)this + 696))(this, &v19);
    if (result) {
      return result;
    }
    unsigned int v13 = v19;
    goto LABEL_59;
  }
  if (a2 != 1986225779) {
    goto LABEL_39;
  }
  AudioChannelLayoutTag v8 = *(uint64_t (**)(void))(*(void *)this + 744);
  return v8();
}

uint64_t FLACAudioFile::GetPropertyInfo(FLACAudioFile *this, int a2, unsigned int *a3, unsigned int *a4)
{
  if (a2 > 1886283374)
  {
    if (a2 != 1986225779)
    {
      if (a2 == 1935832164)
      {
        if (!a3) {
          goto LABEL_24;
        }
        unsigned int v4 = 4;
LABEL_23:
        *a3 = v4;
LABEL_24:
        if (a4) {
          *a4 = 0;
        }
        return 0;
      }
      if (a2 != 1886283375) {
        return AudioFileObject::GetPropertyInfo(this, a2, a3, a4);
      }
      if (a3) {
        *a3 = 16;
      }
      if (!a4) {
        return 0;
      }
      int v5 = 1;
      goto LABEL_32;
    }
    if (a3)
    {
      if (*((void *)this + 26))
      {
        uint64_t v8 = *((void *)this + 27);
        uint64_t v7 = *((void *)this + 28);
      }
      else
      {
        uint64_t v8 = *((void *)this + 27);
        uint64_t v7 = *((void *)this + 28);
        if (v7 == v8)
        {
          unsigned int v6 = 0;
          goto LABEL_29;
        }
      }
      unsigned int v6 = 24 * ((unint64_t)(v7 - v8) >> 4) + 16;
LABEL_29:
      *a3 = v6;
    }
  }
  else
  {
    if (a2 != 1633776244)
    {
      if (a2 == 1751217000)
      {
        if (!a3) {
          goto LABEL_24;
        }
        unsigned int v4 = 16;
        goto LABEL_23;
      }
      if (a2 == 1768174447)
      {
        if (!a3) {
          goto LABEL_24;
        }
        unsigned int v4 = 8;
        goto LABEL_23;
      }
      return AudioFileObject::GetPropertyInfo(this, a2, a3, a4);
    }
    if (a3)
    {
      unsigned int v6 = 8;
      goto LABEL_29;
    }
  }
  if (a4)
  {
    int v5 = *((unsigned char *)this + 100) & 2;
LABEL_32:
    *a4 = v5;
  }
  return 0;
}

uint64_t FLACAudioFile::WritePackets(FLACAudioFile *this, unsigned __int8 a2, unsigned int a3, const AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, char *a7)
{
  uint64_t v7 = a6;
  uint64_t v127 = *MEMORY[0x1E4F143B8];
  v116.mStartOffset = 0;
  *(void *)&v116.mVariableFramesInPacket = 0;
  uint64_t v9 = *((unsigned int *)this + 11);
  int v10 = *((_DWORD *)this + 13);
  if (!a5 && *((_DWORD *)this + 8) != 1718378851 && *((void *)this + 19) == *((void *)this + 20)) {
    return 2003334207;
  }
  int v115 = 0;
  if (!a6)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      *(void *)&uint8_t buf[4] = "FLACAudioFile.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 256;
      uint64_t v12 = MEMORY[0x1E4F14500];
LABEL_13:
      _os_log_impl(&dword_18FEC0000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d  WritePackets Failed", buf, 0x12u);
    }
    return 0;
  }
  if (!*a6)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      *(void *)&uint8_t buf[4] = "FLACAudioFile.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 257;
      uint64_t v12 = MEMORY[0x1E4F14500];
      goto LABEL_13;
    }
    return 0;
  }
  int v11 = (uint64_t *)*((void *)this + 15);
  if (v11)
  {
    if (v11[3] != a5) {
      goto LABEL_219;
    }
    if (!a4)
    {
      uint64_t v13 = 1885563711;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
        *(void *)&uint8_t buf[4] = "FLACAudioFile.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 264;
        uint64_t v105 = MEMORY[0x1E4F14500];
        unint64_t v106 = "%25s:%-5d  Packet Descriptions were not provided";
        goto LABEL_229;
      }
      return v13;
    }
    if (!*a6)
    {
      LODWORD(v14) = 0;
      uint64_t v13 = 0;
      goto LABEL_224;
    }
    long long v108 = v11;
    uint64_t v111 = v9;
    unint64_t v14 = 0;
    uint64_t v109 = (v10 - 1);
    unsigned int v15 = MEMORY[0x1E4F14500];
LABEL_21:
    int v114 = 1130450022;
    uint64_t v16 = *((void *)this + 15);
    if (v16)
    {
      uint64_t v17 = *(void *)(v16 + 24);
      if (v17)
      {
        CompressedPacketTable::operator[]((uint64_t)buf, v108, v17 - 1);
        SInt64 v18 = *(void *)buf + *(unsigned int *)&buf[12];
        v116.mStartOffset = v18;
        unsigned int mDataByteSize = a4[v14].mDataByteSize;
        v116.unsigned int mDataByteSize = mDataByteSize;
        goto LABEL_215;
      }
    }
    *((_DWORD *)this + 35) = kFLACChannelConfigToLayoutTag[v109];
    (*(void (**)(void, void, void, uint64_t, int *, int *))(**((void **)this + 13) + 56))(*((void *)this + 13), 0, 0, 4, &v114, &v115);
    uint64_t v20 = *((void *)this + 30);
    uint64_t v121 = 0;
    memset(buf, 0, sizeof(buf));
    if (!*((void *)this + 26) && *((void *)this + 28) == *((void *)this + 27))
    {
      uint64_t v26 = 0;
      uint64_t v13 = 0;
      goto LABEL_98;
    }
    LODWORD(v121) = 0;
    uint64_t v13 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t *, char *))(**((void **)this + 13)
                                                                                         + 56))(*((void *)this + 13), 0, 42, 4, &v121, (char *)&v121 + 4);
    if (v13)
    {
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long v125 = 136315394;
        *(void *)&v125[4] = "FLACAudioFile.cpp";
        *(_WORD *)&v125[12] = 1024;
        *(_DWORD *)&v125[14] = 628;
        unsigned int v21 = v15;
        uint64_t v22 = "%25s:%-5d  FLACAudioFile::WriteVorbisComment: Writing METADATA_BLOCK_HEADER failed";
        goto LABEL_96;
      }
      goto LABEL_97;
    }
    uint64_t v23 = HIDWORD(v121);
    unint64_t v24 = (__CFString *)*((void *)this + 26);
    if (v24) {
      CFRetain(*((CFTypeRef *)this + 26));
    }
    std::vector<char> __p = v24;
    applesauce::CF::convert_to<std::string,0>((uint64_t)v125, v24);
    if ((char)buf[23] < 0) {
      operator delete(*(void **)buf);
    }
    *(_OWORD *)AudioStreamBasicDescription buf = *(_OWORD *)v125;
    *(void *)&buf[16] = *(void *)&v125[16];
    v125[23] = 0;
    v125[0] = 0;
    if (v24) {
      CFRelease(v24);
    }
    int v25 = buf[23];
    if ((buf[23] & 0x80u) != 0) {
      int v25 = *(_DWORD *)&buf[8];
    }
    LODWORD(v121) = v25;
    uint64_t v13 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t *, char *))(**((void **)this + 13)
                                                                                         + 56))(*((void *)this + 13), 0, v23 + 42, 4, &v121, (char *)&v121 + 4);
    if (v13)
    {
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long v125 = 136315394;
        *(void *)&v125[4] = "FLACAudioFile.cpp";
        *(_WORD *)&v125[12] = 1024;
        *(_DWORD *)&v125[14] = 635;
        unsigned int v21 = v15;
        uint64_t v22 = "%25s:%-5d  FLACAudioFile::WriteVorbisComment: Writing length of vendor string failed";
        goto LABEL_96;
      }
      goto LABEL_97;
    }
    uint64_t v27 = HIDWORD(v121) + v23;
    if ((buf[23] & 0x80u) == 0) {
      uint64_t v28 = buf[23];
    }
    else {
      uint64_t v28 = *(unsigned int *)&buf[8];
    }
    if ((buf[23] & 0x80u) == 0) {
      size_t v29 = buf;
    }
    else {
      size_t v29 = *(uint8_t **)buf;
    }
    uint64_t v13 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint8_t *, char *))(**((void **)this + 13)
                                                                                         + 56))(*((void *)this + 13), 0, v27 + 42, v28, v29, (char *)&v121 + 4);
    if (v13)
    {
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long v125 = 136315394;
        *(void *)&v125[4] = "FLACAudioFile.cpp";
        *(_WORD *)&v125[12] = 1024;
        *(_DWORD *)&v125[14] = 640;
        unsigned int v21 = v15;
        uint64_t v22 = "%25s:%-5d  FLACAudioFile::WriteVorbisComment: Writing vendor string failed";
        goto LABEL_96;
      }
      goto LABEL_97;
    }
    uint64_t v30 = v27 + HIDWORD(v121);
    LODWORD(v121) = (*((void *)this + 28) - *((void *)this + 27)) >> 4;
    uint64_t v13 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t *, char *))(**((void **)this + 13)
                                                                                         + 56))(*((void *)this + 13), 0, v30 + 42, 4, &v121, (char *)&v121 + 4);
    if (v13)
    {
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long v125 = 136315394;
        *(void *)&v125[4] = "FLACAudioFile.cpp";
        *(_WORD *)&v125[12] = 1024;
        *(_DWORD *)&v125[14] = 646;
        unsigned int v21 = v15;
        uint64_t v22 = "%25s:%-5d  FLACAudioFile::WriteVorbisComment: Writing count of comment fields failed";
        goto LABEL_96;
      }
      goto LABEL_97;
    }
    uint64_t v26 = v30 + HIDWORD(v121);
    int64_t v31 = (const __CFString **)*((void *)this + 27);
    uint64_t v32 = (const __CFString **)*((void *)this + 28);
    while (1)
    {
      if (v31 == v32)
      {
        LODWORD(v121) = bswap32((v26 + 16777212) & 0xFFFFFF | ((v20 == 0) << 31) | 0x4000000);
        uint64_t v46 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t *, char *))(**((void **)this + 13)
                                                                                             + 56))(*((void *)this + 13), 0, 42, 4, &v121, (char *)&v121 + 4);
        int v47 = MEMORY[0x1E4F14500];
        uint64_t v13 = v46;
        if (v46)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long v125 = 136315394;
            *(void *)&v125[4] = "FLACAudioFile.cpp";
            *(_WORD *)&v125[12] = 1024;
            *(_DWORD *)&v125[14] = 682;
            unsigned int v21 = v47;
            uint64_t v22 = "%25s:%-5d  FLACAudioFile::WriteVorbisComment: Patching block header failed";
LABEL_96:
            _os_log_impl(&dword_18FEC0000, v21, OS_LOG_TYPE_ERROR, v22, v125, 0x12u);
          }
LABEL_97:
          uint64_t v26 = 0;
        }
LABEL_98:
        if ((char)buf[23] < 0) {
          operator delete(*(void **)buf);
        }
        if (v13)
        {
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            return v13;
          }
          *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
          *(void *)&uint8_t buf[4] = "FLACAudioFile.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 282;
          uint64_t v105 = MEMORY[0x1E4F14500];
          unint64_t v106 = "%25s:%-5d  WriteVorbisComment failed";
LABEL_229:
          _os_log_impl(&dword_18FEC0000, v105, OS_LOG_TYPE_ERROR, v106, buf, 0x12u);
          return v13;
        }
        *((unsigned char *)this + 181) = v26 != 0;
        CFDataRef v48 = (const __CFData *)*((void *)this + 30);
        if (!v48)
        {
          CFIndex Length = 0;
          CFStringRef v56 = 0;
          unsigned int v60 = 0;
          unsigned int v61 = 0;
          HIDWORD(v121) = 0;
          *(void *)unint64_t v122 = 0;
          memset(buf, 0, sizeof(buf));
          char v62 = 1;
          goto LABEL_141;
        }
        CFIndex Length = CFDataGetLength(v48);
        uint64_t v50 = *((void *)this + 30);
        HIDWORD(v121) = 0;
        *(void *)unint64_t v122 = 0;
        memset(buf, 0, sizeof(buf));
        if (!v50) {
          goto LABEL_139;
        }
        if (sLoadCoreMediaOnce != -1) {
          dispatch_once(&sLoadCoreMediaOnce, &__block_literal_global_7918);
        }
        uint64_t v51 = sCGImageSourceCreateWithData(*((void *)this + 30), 0);
        CFIndex v52 = (const void *)v51;
        if (!v51)
        {
          CFStringRef v63 = MEMORY[0x1E4F14500];
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long v125 = 136315394;
            *(void *)&v125[4] = "FLACAudioFile.cpp";
            *(_WORD *)&v125[12] = 1024;
            *(_DWORD *)&v125[14] = 816;
            _os_log_impl(&dword_18FEC0000, v63, OS_LOG_TYPE_ERROR, "%25s:%-5d  CGImageSourceCreateWithData failed", v125, 0x12u);
          }
          goto LABEL_139;
        }
        if (sCGImageSourceGetCount(v51) != 1)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long v125 = 136315394;
            *(void *)&v125[4] = "FLACAudioFile.cpp";
            *(_WORD *)&v125[12] = 1024;
            *(_DWORD *)&v125[14] = 818;
            _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Can store only a single image", v125, 0x12u);
          }
LABEL_138:
          CFRelease(v52);
LABEL_139:
          CFStringRef v56 = 0;
          unsigned int v60 = 0;
          unsigned int v61 = 0;
LABEL_140:
          char v62 = 1;
          goto LABEL_141;
        }
        Type = (const void *)sCGImageSourceGetType(v52);
        int v54 = Type;
        if (!Type)
        {
          std::vector<char> __p = 0;
LABEL_125:
          unsigned int v64 = MEMORY[0x1E4F14500];
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_138;
          }
          *(_DWORD *)long long v125 = 136315394;
          *(void *)&v125[4] = "FLACAudioFile.cpp";
          *(_WORD *)&v125[12] = 1024;
          *(_DWORD *)&v125[14] = 821;
          uint64_t v65 = v64;
          unint64_t v66 = "%25s:%-5d  CGImageSourceGetType failed to return a UTI";
LABEL_127:
          _os_log_impl(&dword_18FEC0000, v65, OS_LOG_TYPE_ERROR, v66, v125, 0x12u);
LABEL_128:
          CFStringRef v56 = 0;
          goto LABEL_129;
        }
        CFRetain(Type);
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&__p, v54);
        if (!__p) {
          goto LABEL_125;
        }
        long long v55 = @"image/jpeg";
        if (!CFEqual(__p, @"public.jpeg"))
        {
          long long v55 = @"image/jp2";
          if (!CFEqual(__p, @"public.jpeg-2000"))
          {
            long long v55 = @"image/png";
            if (!CFEqual(__p, @"public.png"))
            {
              long long v55 = @"image/tiff";
              if (!CFEqual(__p, @"public.tiff"))
              {
                long long v55 = @"image/heif";
                if (!CFEqual(__p, @"public.heif"))
                {
                  long long v55 = @"image/bmp";
                  if (!CFEqual(__p, @"com.microsoft.bmp"))
                  {
                    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)long long v125 = 136315394;
                      *(void *)&v125[4] = "FLACAudioFile.cpp";
                      *(_WORD *)&v125[12] = 1024;
                      *(_DWORD *)&v125[14] = 844;
                      uint64_t v65 = MEMORY[0x1E4F14500];
                      unint64_t v66 = "%25s:%-5d  Couldn't infer MIME type from UTI";
                      goto LABEL_127;
                    }
                    goto LABEL_128;
                  }
                }
              }
            }
          }
        }
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v125, v55);
        CFStringRef v56 = *(const __CFString **)v125;
        *(void *)unint64_t v122 = *(void *)v125;
        if (!*(void *)v125)
        {
          uint64_t v85 = MEMORY[0x1E4F14500];
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long v125 = 136315394;
            *(void *)&v125[4] = "FLACAudioFile.cpp";
            *(_WORD *)&v125[12] = 1024;
            *(_DWORD *)&v125[14] = 846;
            uint64_t v65 = v85;
            unint64_t v66 = "%25s:%-5d  couldn't get a MIME type for the image";
            goto LABEL_127;
          }
          goto LABEL_128;
        }
        if (CFStringGetLength(v55) >= 256)
        {
          uint64_t v57 = MEMORY[0x1E4F14500];
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long v125 = 136315394;
            *(void *)&v125[4] = "FLACAudioFile.cpp";
            *(_WORD *)&v125[12] = 1024;
            *(_DWORD *)&v125[14] = 847;
            unsigned int v58 = v57;
            unsigned int v59 = "%25s:%-5d  MIME type length exceeds limit";
            goto LABEL_176;
          }
          goto LABEL_129;
        }
        CFDictionaryRef v86 = (const __CFDictionary *)sCGImageSourceCopyPropertiesAtIndex(v52, 0, 0);
        CFDictionaryRef v67 = v86;
        if (v86)
        {
          CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v86, @"PixelWidth");
          if (Value) {
            unsigned int v60 = applesauce::CF::convert_to<int,0>(Value);
          }
          else {
            unsigned int v60 = 0;
          }
          CFNumberRef v93 = (const __CFNumber *)CFDictionaryGetValue(v67, @"PixelHeight");
          if (v93) {
            unsigned int v61 = applesauce::CF::convert_to<int,0>(v93);
          }
          else {
            unsigned int v61 = 0;
          }
          int v68 = 1;
        }
        else
        {
          int v90 = MEMORY[0x1E4F14500];
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long v125 = 136315394;
            *(void *)&v125[4] = "FLACAudioFile.cpp";
            *(_WORD *)&v125[12] = 1024;
            *(_DWORD *)&v125[14] = 850;
            unsigned int v58 = v90;
            unsigned int v59 = "%25s:%-5d  CGImageSourceCopyPropertiesAtIndex failed";
LABEL_176:
            _os_log_impl(&dword_18FEC0000, v58, OS_LOG_TYPE_ERROR, v59, v125, 0x12u);
          }
LABEL_129:
          unsigned int v60 = 0;
          unsigned int v61 = 0;
          CFDictionaryRef v67 = 0;
          int v68 = 0;
        }
        if (__p) {
          CFRelease(__p);
        }
        CFRelease(v52);
        if (v67) {
          CFRelease(v67);
        }
        if (!v68) {
          goto LABEL_140;
        }
        applesauce::CF::convert_to<std::string,0>((uint64_t)v125, v56);
        if ((char)buf[23] < 0) {
          operator delete(*(void **)buf);
        }
        char v62 = 0;
        *(_OWORD *)AudioStreamBasicDescription buf = *(_OWORD *)v125;
        *(void *)&buf[16] = *(void *)&v125[16];
LABEL_141:
        uint64_t v13 = 0;
        uint64_t v69 = 0;
        uint64_t v70 = v26 + 42;
        uint64_t v71 = buf[23];
        uint8_t v72 = buf[23];
        if ((buf[23] & 0x80u) != 0) {
          uint64_t v71 = *(void *)&buf[8];
        }
        if ((v62 & 1) == 0 && Length >= 1 && Length <= 16777179 - v71)
        {
          LODWORD(__p) = 0;
          uint64_t v13 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, void **, char *))(**((void **)this + 13)
                                                                                             + 56))(*((void *)this + 13), 0, v26 + 42, 4, &__p, (char *)&v121 + 4);
          if (!v13)
          {
            uint64_t v76 = HIDWORD(v121);
            LODWORD(__p) = 50331648;
            uint64_t v13 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, void **, char *))(**((void **)this + 13)
                                                                                               + 56))(*((void *)this + 13), 0, v70 + HIDWORD(v121), 4, &__p, (char *)&v121 + 4);
            if (v13)
            {
              unsigned int v77 = MEMORY[0x1E4F14500];
              if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                goto LABEL_206;
              }
              *(_DWORD *)long long v125 = 136315394;
              *(void *)&v125[4] = "FLACAudioFile.cpp";
              *(_WORD *)&v125[12] = 1024;
              *(_DWORD *)&v125[14] = 950;
              uint64_t v74 = v77;
              unsigned int v75 = "%25s:%-5d  FLACAudioFile::WritePicture: Writing picture type failed";
            }
            else
            {
              uint64_t v78 = HIDWORD(v121) + v76;
              unsigned int v79 = buf[23];
              if ((buf[23] & 0x80u) != 0) {
                unsigned int v79 = *(_DWORD *)&buf[8];
              }
              LODWORD(__p) = bswap32(v79);
              uint64_t v13 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, void **, char *))(**((void **)this + 13)
                                                                                                 + 56))(*((void *)this + 13), 0, v78 + v70, 4, &__p, (char *)&v121 + 4);
              if (v13)
              {
                int v80 = MEMORY[0x1E4F14500];
                if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                  goto LABEL_206;
                }
                *(_DWORD *)long long v125 = 136315394;
                *(void *)&v125[4] = "FLACAudioFile.cpp";
                *(_WORD *)&v125[12] = 1024;
                *(_DWORD *)&v125[14] = 956;
                uint64_t v74 = v80;
                unsigned int v75 = "%25s:%-5d  FLACAudioFile::WritePicture: Writing length of MIME type failed";
              }
              else
              {
                uint64_t v81 = v78 + HIDWORD(v121);
                if ((buf[23] & 0x80u) == 0) {
                  uint64_t v82 = buf[23];
                }
                else {
                  uint64_t v82 = *(unsigned int *)&buf[8];
                }
                if ((buf[23] & 0x80u) == 0) {
                  uint64_t v83 = buf;
                }
                else {
                  uint64_t v83 = *(uint8_t **)buf;
                }
                uint64_t v13 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint8_t *, char *))(**((void **)this + 13) + 56))(*((void *)this + 13), 0, v81 + v70, v82, v83, (char *)&v121 + 4);
                if (v13)
                {
                  uint64_t v84 = MEMORY[0x1E4F14500];
                  if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                    goto LABEL_206;
                  }
                  *(_DWORD *)long long v125 = 136315394;
                  *(void *)&v125[4] = "FLACAudioFile.cpp";
                  *(_WORD *)&v125[12] = 1024;
                  *(_DWORD *)&v125[14] = 961;
                  uint64_t v74 = v84;
                  unsigned int v75 = "%25s:%-5d  FLACAudioFile::WritePicture: Writing MIME type failed";
                }
                else
                {
                  uint64_t v88 = v81 + HIDWORD(v121);
                  LODWORD(__p) = 0;
                  uint64_t v13 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, void **, char *))(**((void **)this + 13) + 56))(*((void *)this + 13), 0, v88 + v70, 4, &__p, (char *)&v121 + 4);
                  if (v13)
                  {
                    uint64_t v89 = MEMORY[0x1E4F14500];
                    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                      goto LABEL_206;
                    }
                    *(_DWORD *)long long v125 = 136315394;
                    *(void *)&v125[4] = "FLACAudioFile.cpp";
                    *(_WORD *)&v125[12] = 1024;
                    *(_DWORD *)&v125[14] = 967;
                    uint64_t v74 = v89;
                    unsigned int v75 = "%25s:%-5d  FLACAudioFile::WritePicture: Writing length of description string failed";
                  }
                  else
                  {
                    uint64_t v91 = v88 + HIDWORD(v121);
                    LODWORD(__p) = bswap32(v60);
                    uint64_t v13 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, void **, char *))(**((void **)this + 13) + 56))(*((void *)this + 13), 0, v91 + v70, 4, &__p, (char *)&v121 + 4);
                    if (v13)
                    {
                      long long v92 = MEMORY[0x1E4F14500];
                      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                        goto LABEL_206;
                      }
                      *(_DWORD *)long long v125 = 136315394;
                      *(void *)&v125[4] = "FLACAudioFile.cpp";
                      *(_WORD *)&v125[12] = 1024;
                      *(_DWORD *)&v125[14] = 973;
                      uint64_t v74 = v92;
                      unsigned int v75 = "%25s:%-5d  FLACAudioFile::WritePicture: Writing picture width failed";
                    }
                    else
                    {
                      uint64_t v94 = v91 + HIDWORD(v121);
                      LODWORD(__p) = bswap32(v61);
                      uint64_t v13 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, void **, char *))(**((void **)this + 13) + 56))(*((void *)this + 13), 0, v94 + v70, 4, &__p, (char *)&v121 + 4);
                      if (v13)
                      {
                        unsigned int v95 = MEMORY[0x1E4F14500];
                        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                          goto LABEL_206;
                        }
                        *(_DWORD *)long long v125 = 136315394;
                        *(void *)&v125[4] = "FLACAudioFile.cpp";
                        *(_WORD *)&v125[12] = 1024;
                        *(_DWORD *)&v125[14] = 979;
                        uint64_t v74 = v95;
                        unsigned int v75 = "%25s:%-5d  FLACAudioFile::WritePicture: Writing picture height failed";
                      }
                      else
                      {
                        uint64_t v96 = v94 + HIDWORD(v121);
                        LODWORD(__p) = 0;
                        uint64_t v13 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, void **, char *))(**((void **)this + 13) + 56))(*((void *)this + 13), 0, v96 + v70, 4, &__p, (char *)&v121 + 4);
                        if (v13)
                        {
                          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                            goto LABEL_206;
                          }
                          *(_DWORD *)long long v125 = 136315394;
                          *(void *)&v125[4] = "FLACAudioFile.cpp";
                          *(_WORD *)&v125[12] = 1024;
                          *(_DWORD *)&v125[14] = 985;
                          uint64_t v74 = MEMORY[0x1E4F14500];
                          unsigned int v75 = "%25s:%-5d  FLACAudioFile::WritePicture: Writing picture depth failed";
                        }
                        else
                        {
                          uint64_t v97 = v96 + HIDWORD(v121);
                          LODWORD(__p) = 0;
                          uint64_t v13 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, void **, char *))(**((void **)this + 13) + 56))(*((void *)this + 13), 0, v97 + v70, 4, &__p, (char *)&v121 + 4);
                          if (v13)
                          {
                            if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                              goto LABEL_206;
                            }
                            *(_DWORD *)long long v125 = 136315394;
                            *(void *)&v125[4] = "FLACAudioFile.cpp";
                            *(_WORD *)&v125[12] = 1024;
                            *(_DWORD *)&v125[14] = 991;
                            uint64_t v74 = MEMORY[0x1E4F14500];
                            unsigned int v75 = "%25s:%-5d  FLACAudioFile::WritePicture: Writing number of colors failed";
                          }
                          else
                          {
                            uint64_t v98 = v97 + HIDWORD(v121);
                            LODWORD(__p) = bswap32(Length);
                            uint64_t v13 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, void **, char *))(**((void **)this + 13) + 56))(*((void *)this + 13), 0, v98 + v70, 4, &__p, (char *)&v121 + 4);
                            if (v13)
                            {
                              if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                                goto LABEL_206;
                              }
                              *(_DWORD *)long long v125 = 136315394;
                              *(void *)&v125[4] = "FLACAudioFile.cpp";
                              *(_WORD *)&v125[12] = 1024;
                              *(_DWORD *)&v125[14] = 997;
                              uint64_t v74 = MEMORY[0x1E4F14500];
                              unsigned int v75 = "%25s:%-5d  FLACAudioFile::WritePicture: Writing length of picture data failed";
                            }
                            else
                            {
                              uint64_t v99 = HIDWORD(v121);
                              uint64_t v100 = *((void *)this + 13);
                              BytePtr = CFDataGetBytePtr(*((CFDataRef *)this + 30));
                              uint64_t v102 = v98 + v99;
                              uint64_t v13 = (*(uint64_t (**)(uint64_t, void, uint64_t, CFIndex, const UInt8 *, char *))(*(void *)v100 + 56))(v100, 0, v102 + v70, Length, BytePtr, (char *)&v121 + 4);
                              if (v13)
                              {
                                if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                                  goto LABEL_206;
                                }
                                *(_DWORD *)long long v125 = 136315394;
                                *(void *)&v125[4] = "FLACAudioFile.cpp";
                                *(_WORD *)&v125[12] = 1024;
                                *(_DWORD *)&v125[14] = 1002;
                                uint64_t v74 = MEMORY[0x1E4F14500];
                                unsigned int v75 = "%25s:%-5d  FLACAudioFile::WritePicture: Writing picture data failed";
                              }
                              else
                              {
                                uint64_t v69 = v102 + HIDWORD(v121);
                                LODWORD(__p) = bswap32((v69 + 16777212) & 0xFFFFFF | 0x86000000);
                                uint64_t v13 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, void **, char *))(**((void **)this + 13) + 56))(*((void *)this + 13), 0, v70, 4, &__p, (char *)&v121 + 4);
                                if (!v13) {
                                  goto LABEL_207;
                                }
                                if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                                  goto LABEL_206;
                                }
                                *(_DWORD *)long long v125 = 136315394;
                                *(void *)&v125[4] = "FLACAudioFile.cpp";
                                *(_WORD *)&v125[12] = 1024;
                                *(_DWORD *)&v125[14] = 1009;
                                uint64_t v74 = MEMORY[0x1E4F14500];
                                unsigned int v75 = "%25s:%-5d  FLACAudioFile::WritePicture: Patching block header failed";
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_205:
            _os_log_impl(&dword_18FEC0000, v74, OS_LOG_TYPE_ERROR, v75, v125, 0x12u);
            goto LABEL_206;
          }
          long long v73 = MEMORY[0x1E4F14500];
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long v125 = 136315394;
            *(void *)&v125[4] = "FLACAudioFile.cpp";
            *(_WORD *)&v125[12] = 1024;
            *(_DWORD *)&v125[14] = 944;
            uint64_t v74 = v73;
            unsigned int v75 = "%25s:%-5d  FLACAudioFile::WritePicture: Writing METADATA_BLOCK_HEADER failed";
            goto LABEL_205;
          }
LABEL_206:
          uint64_t v69 = 0;
LABEL_207:
          uint8_t v72 = buf[23];
        }
        if ((v72 & 0x80) != 0)
        {
          operator delete(*(void **)buf);
          if (!v56) {
            goto LABEL_213;
          }
LABEL_212:
          CFRelease(v56);
          goto LABEL_213;
        }
        if (v56) {
          goto LABEL_212;
        }
LABEL_213:
        if (v13)
        {
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            return v13;
          }
          *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
          *(void *)&uint8_t buf[4] = "FLACAudioFile.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 287;
          uint64_t v105 = MEMORY[0x1E4F14500];
          unint64_t v106 = "%25s:%-5d  WritePicture failed";
          goto LABEL_229;
        }
        *((unsigned char *)this + 182) = v69 != 0;
        SInt64 v18 = v69 + v70;
        v116.mStartOffset = v69 + v70;
        unsigned int mDataByteSize = a4[v14].mDataByteSize;
        v116.unsigned int mDataByteSize = mDataByteSize;
        *((void *)this + 23) = 0;
        unsigned int v15 = MEMORY[0x1E4F14500];
LABEL_215:
        uint64_t v103 = &a4[v14];
        p_unsigned int mDataByteSize = &v103->mDataByteSize;
        if (mDataByteSize > (*(unsigned int (**)(FLACAudioFile *))(*(void *)this + 632))(this)) {
          (*(void (**)(FLACAudioFile *, void))(*(void *)this + 648))(this, *p_mDataByteSize);
        }
        uint64_t v13 = (*(uint64_t (**)(void, void, SInt64, void, char *, int *))(**((void **)this + 13) + 56))(*((void *)this + 13), 0, v18, *p_mDataByteSize, &a7[v103->mStartOffset], &v115);
        *((void *)this + 23) += v111;
        AudioFileObject::AppendPacket(this, &v116);
        ++v14;
        uint64_t v7 = a6;
        if (v14 >= *a6)
        {
LABEL_224:
          *uint64_t v7 = v14;
          return v13;
        }
        goto LABEL_21;
      }
      char v120 = 61;
      applesauce::CF::convert_to<std::string,0>((uint64_t)v125, *v31);
      applesauce::CF::convert_to<std::string,0>((uint64_t)&__p, v31[1]);
      int v33 = v125[23];
      if (v125[23] < 0) {
        int v33 = *(_DWORD *)&v125[8];
      }
      if ((v119 & 0x80u) == 0) {
        unsigned int v34 = v119;
      }
      else {
        unsigned int v34 = v118;
      }
      LODWORD(v121) = v34 + v33 + 1;
      uint64_t v13 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t *, char *))(**((void **)this + 13)
                                                                                           + 56))(*((void *)this + 13), 0, v26 + 42, 4, &v121, (char *)&v121 + 4);
      if (v13)
      {
        CFStringRef v35 = MEMORY[0x1E4F14500];
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)unint64_t v122 = 136315394;
          *(void *)&v122[4] = "FLACAudioFile.cpp";
          __int16 v123 = 1024;
          int v124 = 659;
          unsigned int v36 = v35;
          int64_t v37 = "%25s:%-5d  FLACAudioFile::WriteVorbisComment: Writing length of comment field failed";
          goto LABEL_84;
        }
        goto LABEL_85;
      }
      v26 += HIDWORD(v121);
      if (v125[23] >= 0) {
        uint64_t v38 = v125[23];
      }
      else {
        uint64_t v38 = *(unsigned int *)&v125[8];
      }
      if (v125[23] >= 0) {
        AudioStreamPacketDescription v39 = v125;
      }
      else {
        AudioStreamPacketDescription v39 = *(unsigned char **)v125;
      }
      uint64_t v13 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, unsigned char *, char *))(**((void **)this + 13)
                                                                                         + 56))(*((void *)this + 13), 0, v26 + 42, v38, v39, (char *)&v121 + 4);
      if (v13)
      {
        int v40 = MEMORY[0x1E4F14500];
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)unint64_t v122 = 136315394;
          *(void *)&v122[4] = "FLACAudioFile.cpp";
          __int16 v123 = 1024;
          int v124 = 664;
          unsigned int v36 = v40;
          int64_t v37 = "%25s:%-5d  FLACAudioFile::WriteVorbisComment: Writing comment field name failed";
          goto LABEL_84;
        }
LABEL_85:
        char v45 = 0;
        goto LABEL_86;
      }
      v26 += HIDWORD(v121);
      uint64_t v13 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, char *, char *))(**((void **)this + 13) + 56))(*((void *)this + 13), 0, v26 + 42, 1, &v120, (char *)&v121 + 4);
      if (v13) {
        break;
      }
      v26 += HIDWORD(v121);
      if ((v119 & 0x80u) == 0) {
        uint64_t v42 = v119;
      }
      else {
        uint64_t v42 = v118;
      }
      if ((v119 & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      uint64_t v13 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, void *, char *))(**((void **)this + 13) + 56))(*((void *)this + 13), 0, v26 + 42, v42, p_p, (char *)&v121 + 4);
      if (v13)
      {
        int v44 = MEMORY[0x1E4F14500];
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_85;
        }
        *(_DWORD *)unint64_t v122 = 136315394;
        *(void *)&v122[4] = "FLACAudioFile.cpp";
        __int16 v123 = 1024;
        int v124 = 674;
        unsigned int v36 = v44;
        int64_t v37 = "%25s:%-5d  FLACAudioFile::WriteVorbisComment: Writing comment failed";
        goto LABEL_84;
      }
      v26 += HIDWORD(v121);
      char v45 = 1;
LABEL_86:
      if ((char)v119 < 0) {
        operator delete(__p);
      }
      if ((v125[23] & 0x80000000) != 0) {
        operator delete(*(void **)v125);
      }
      if ((v45 & 1) == 0) {
        goto LABEL_97;
      }
      v31 += 2;
    }
    unsigned int v41 = MEMORY[0x1E4F14500];
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_85;
    }
    *(_DWORD *)unint64_t v122 = 136315394;
    *(void *)&v122[4] = "FLACAudioFile.cpp";
    __int16 v123 = 1024;
    int v124 = 669;
    unsigned int v36 = v41;
    int64_t v37 = "%25s:%-5d  FLACAudioFile::WriteVorbisComment: Writing '=' failed";
LABEL_84:
    _os_log_impl(&dword_18FEC0000, v36, OS_LOG_TYPE_ERROR, v37, v122, 0x12u);
    goto LABEL_85;
  }
  if (!a5) {
    operator new();
  }
LABEL_219:
  uint64_t v13 = 1885563711;
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
    *(void *)&uint8_t buf[4] = "FLACAudioFile.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 259;
    uint64_t v105 = MEMORY[0x1E4F14500];
    unint64_t v106 = "%25s:%-5d  ";
    goto LABEL_229;
  }
  return v13;
}

void sub_1900BB430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,const void *a30)
{
  applesauce::CF::StringRef::~StringRef((const void **)&__p);
  if (*(char *)(v30 - 105) < 0) {
    operator delete(*(void **)(v30 - 128));
  }
  applesauce::CF::StringRef::~StringRef(&a30);
  _Unwind_Resume(a1);
}

void *___ZL23LoadImageIOFunctionPtrsv_block_invoke()
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = dlopen("/System/Library/Frameworks/ImageIO.framework/ImageIO", 1);
  if (!v0)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    int v5 = 136315394;
    unsigned int v6 = "FLACAudioFile.cpp";
    __int16 v7 = 1024;
    int v8 = 785;
    uint64_t v3 = MEMORY[0x1E4F14500];
    unsigned int v4 = "%25s:%-5d  Couldn't load ImageIO";
    goto LABEL_17;
  }
  uint64_t v1 = v0;
  sCGImageSourceCreateWithData = (uint64_t (*)(void, void))dlsym(v0, "CGImageSourceCreateWithData");
  if (!sCGImageSourceCreateWithData)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    int v5 = 136315394;
    unsigned int v6 = "FLACAudioFile.cpp";
    __int16 v7 = 1024;
    int v8 = 788;
    uint64_t v3 = MEMORY[0x1E4F14500];
    unsigned int v4 = "%25s:%-5d  Getting CMAudioFormatDescriptionCreate function pointer not found";
    goto LABEL_17;
  }
  sCGImageSourceGetType = (uint64_t (*)(void))dlsym(v1, "CGImageSourceGetType");
  if (!sCGImageSourceCreateWithData)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    int v5 = 136315394;
    unsigned int v6 = "FLACAudioFile.cpp";
    __int16 v7 = 1024;
    int v8 = 791;
    uint64_t v3 = MEMORY[0x1E4F14500];
    unsigned int v4 = "%25s:%-5d  Getting CGImageSourceGetType function pointer not found";
    goto LABEL_17;
  }
  sCGImageSourceGetint Count = (uint64_t (*)(void))dlsym(v1, "CGImageSourceGetCount");
  if (!sCGImageSourceGetCount)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    int v5 = 136315394;
    unsigned int v6 = "FLACAudioFile.cpp";
    __int16 v7 = 1024;
    int v8 = 794;
    uint64_t v3 = MEMORY[0x1E4F14500];
    unsigned int v4 = "%25s:%-5d  Getting CGImageSourceGetCount function pointer not found";
    goto LABEL_17;
  }
  uint64_t result = dlsym(v1, "CGImageSourceCopyPropertiesAtIndex");
  sCGImageSourceCopyPropertiesAtIndex = (uint64_t (*)(void, void, void))result;
  if (!sCGImageSourceCreateWithData)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    int v5 = 136315394;
    unsigned int v6 = "FLACAudioFile.cpp";
    __int16 v7 = 1024;
    int v8 = 797;
    uint64_t v3 = MEMORY[0x1E4F14500];
    unsigned int v4 = "%25s:%-5d  Getting CGImageSourceCopyPropertiesAtIndex function pointer not found";
LABEL_17:
    _os_log_impl(&dword_18FEC0000, v3, OS_LOG_TYPE_ERROR, v4, (uint8_t *)&v5, 0x12u);
LABEL_18:
    __break(1u);
  }
  return result;
}

uint64_t FLACAudioFile::ReadPackets(FLACAudioFile *this, unsigned int a2, unsigned int *a3, AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, void *a7)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (a4) {
    BOOL v7 = a7 == 0;
  }
  else {
    BOOL v7 = 0;
  }
  int v8 = v7;
  if (a6 && (uint64_t v10 = *a6, v10))
  {
    uint64_t v17 = (*(uint64_t (**)(FLACAudioFile *, uint64_t, void, uint64_t))(*(void *)this + 688))(this, v10 + a5, 0, 1);
    if (v17)
    {
      uint64_t v18 = v17;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
        *(void *)&uint8_t buf[4] = "FLACAudioFile.cpp";
        LOWORD(v39[0]) = 1024;
        *(_DWORD *)((char *)v39 + 2) = 154;
        unsigned int v19 = MEMORY[0x1E4F14500];
        uint64_t v20 = "%25s:%-5d  ScanForPackets (FLAC) failed";
LABEL_14:
        _os_log_impl(&dword_18FEC0000, v19, OS_LOG_TYPE_ERROR, v20, buf, 0x12u);
      }
    }
    else
    {
      uint64_t v22 = (uint64_t *)*((void *)this + 15);
      if (v22)
      {
        uint64_t v23 = v22[3];
        if (v23 >= a5) {
          uint64_t v18 = 1685348671;
        }
        else {
          uint64_t v18 = 1885563711;
        }
        if (v23 >= a5 && v22 != 0)
        {
          unsigned int v37 = 0;
          uint64_t v25 = v22[3];
          if (a3) {
            *a3 = 0;
          }
          unsigned int v35 = a2;
          uint64_t v26 = *a6;
          if (v26 + a5 > v25)
          {
            LODWORD(v26) = v25 - a5;
            *a6 = v25 - a5;
          }
          if (v26)
          {
            unsigned int v34 = a3;
            CompressedPacketTable::operator[]((uint64_t)buf, v22, a5);
            if (*a6)
            {
              unsigned int v27 = 0;
              unint64_t v28 = 0;
              uint64_t v36 = *(void *)buf;
              p_mVariableFramesInPacket = &a4->mVariableFramesInPacket;
              do
              {
                CompressedPacketTable::operator[]((uint64_t)buf, v22, a5 + v28);
                UInt32 v30 = v39[0];
                v27 += v39[0];
                unsigned int v37 = v27;
                if (a4)
                {
                  *((void *)p_mVariableFramesInPacket - 1) = *(void *)buf - v36;
                  UInt32 *p_mVariableFramesInPacket = 0;
                  p_mVariableFramesInPacket[1] = v30;
                }
                ++v28;
                p_mVariableFramesInPacket += 4;
              }
              while (v28 < *a6);
            }
            if (v8)
            {
              uint64_t v18 = 0;
              if (v34) {
                *unsigned int v34 = 0;
              }
            }
            else
            {
              CompressedPacketTable::operator[]((uint64_t)buf, v22, a5);
              uint64_t v31 = (*(uint64_t (**)(FLACAudioFile *, void, void, unsigned int *, void *))(*(void *)this + 72))(this, v35, *(void *)buf, &v37, a7);
              uint64_t v18 = v31;
              if (v31 == -39 || v31 == 0)
              {
                if (v34) {
                  *unsigned int v34 = v37;
                }
              }
              else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
                *(void *)&uint8_t buf[4] = "FLACAudioFile.cpp";
                LOWORD(v39[0]) = 1024;
                *(_DWORD *)((char *)v39 + 2) = 209;
                unsigned int v19 = MEMORY[0x1E4F14500];
                uint64_t v20 = "%25s:%-5d  ReadBytes failed";
                goto LABEL_14;
              }
            }
          }
          else
          {
            if (a3) {
              *a3 = 0;
            }
            return 4294967257;
          }
        }
      }
      else if (a5 <= 0)
      {
        return 1685348671;
      }
      else
      {
        return 1885563711;
      }
    }
  }
  else
  {
    uint64_t v18 = 2003334207;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      *(void *)&uint8_t buf[4] = "FLACAudioFile.cpp";
      LOWORD(v39[0]) = 1024;
      *(_DWORD *)((char *)v39 + 2) = 150;
      unsigned int v19 = MEMORY[0x1E4F14500];
      uint64_t v20 = "%25s:%-5d  invalid num packets parameter";
      goto LABEL_14;
    }
  }
  return v18;
}

uint64_t FLACAudioFile::Close(FLACAudioFile *this)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  if ((*((unsigned char *)this + 100) & 2) == 0 || *((void *)this + 19) == *((void *)this + 20)) {
    goto LABEL_84;
  }
  int v59 = 38;
  uint64_t v2 = *((void *)this + 15);
  if (v2) {
    uint64_t v2 = *(void *)(v2 + 24);
  }
  unint64_t v3 = v2 * *((unsigned int *)this + 11);
  MEMORY[0x1F4188790](this);
  unint64_t v4 = *((void *)this + 19);
  unint64_t v5 = *((void *)this + 20) - v4;
  if (v5 <= 0x31) {
    goto LABEL_6;
  }
  unsigned int v6 = (__int16 *)(v4 + v5);
  long long v55 = (unsigned char *)*((void *)this + 19);
  CFStringRef v56 = v6;
  if ((v4 & 3) != 0)
  {
    int v7 = 0;
    unint64_t v8 = v4 & 3 ^ 3;
    unint64_t v9 = v8 + 1;
    unint64_t v10 = v4 + 1;
    int v11 = 8 * v8;
    unsigned int v12 = 8 * v8 + 8;
    uint64_t v13 = (unsigned __int8 *)v4;
    do
    {
      if (v13 >= (unsigned __int8 *)v6) {
        int v14 = 255;
      }
      else {
        int v14 = *v13;
      }
      int v7 = v14 | (v7 << 8);
      ++v13;
    }
    while ((v10++ & 3) != 0);
    uint64_t v16 = (unsigned int *)(v4 + v9);
    int v54 = v16;
    int v17 = v7 << (v11 ^ 0x18);
    LODWORD(v57) = v17;
    unsigned int v18 = v11 - 24;
    if ((v4 & 3) == 0)
    {
      unsigned int v12 = v18;
      unsigned int v19 = v17;
      goto LABEL_28;
    }
  }
  else
  {
    int v17 = 0;
    unsigned int v12 = 0;
    LOBYTE(v18) = -32;
    HIDWORD(v57) = -32;
    uint64_t v16 = (unsigned int *)v4;
  }
  if (((v6 - v16) & ~(((char *)v6 - (char *)v16) >> 63) & 0xFFFFFFFC) != 0
    && (unint64_t)v16 >= v4)
  {
    unsigned int v20 = bswap32(*v16);
  }
  else
  {
    uint64_t v21 = 0;
    unsigned int v20 = v17;
    do
    {
      uint64_t v22 = (unsigned __int8 *)v16 + v21;
      int v23 = 255;
      if ((char *)v16 + v21 < (char *)v6 && (unint64_t)v22 >= v4) {
        int v23 = *v22;
      }
      unsigned int v20 = v23 | (v20 << 8);
      ++v21;
    }
    while (v21 != 4);
  }
  int v54 = ++v16;
  unsigned int v19 = (v20 >> v12) | v17;
  int v17 = v20 << -(char)v18;
  if (!v12) {
    int v17 = 0;
  }
  LODWORD(v57) = v17;
LABEL_28:
  if ((int)(v12 - 32) < 0)
  {
    if (((v6 - v16) & ~(((char *)v6 - (char *)v16) >> 63) & 0xFFFFFFFC) != 0
      && (unint64_t)v16 >= v4)
    {
      unsigned int v26 = bswap32(*v16);
    }
    else
    {
      uint64_t v27 = 0;
      unsigned int v26 = v17;
      do
      {
        unint64_t v28 = (unsigned __int8 *)v16 + v27;
        int v29 = 255;
        if ((char *)v16 + v27 < (char *)v6 && (unint64_t)v28 >= v4) {
          int v29 = *v28;
        }
        unsigned int v26 = v29 | (v26 << 8);
        ++v27;
      }
      while (v27 != 4);
    }
    int v54 = ++v16;
    int v25 = (v26 >> v12) | v17;
    int v17 = v26 << -(char)v12;
    if (!v12) {
      int v17 = 0;
    }
    LODWORD(v57) = v17;
    unsigned int v24 = v12 - 32;
  }
  else
  {
    unsigned int v24 = v12 - 64;
    v12 -= 32;
    int v25 = v17;
  }
  HIDWORD(v57) = v24;
  if ((v24 & 0x80000000) != 0)
  {
    if (((v6 - v16) & ~(((char *)v6 - (char *)v16) >> 63) & 0xFFFFFFFC) != 0
      && (unint64_t)v16 >= v4)
    {
      unsigned int v32 = bswap32(*v16);
    }
    else
    {
      uint64_t v33 = 0;
      unsigned int v32 = v17;
      do
      {
        unsigned int v34 = (unsigned __int8 *)v16 + v33;
        unsigned int v35 = v32 << 8;
        LODWORD(v57) = v35;
        int v36 = 255;
        if ((char *)v16 + v33 < (char *)v6 && (unint64_t)v34 >= v4) {
          int v36 = *v34;
        }
        unsigned int v32 = v36 | v35;
        LODWORD(v57) = v32;
        ++v33;
      }
      while (v33 != 4);
    }
    int v54 = ++v16;
    int v31 = (v32 >> v12) | v17;
    int v17 = v32 << -(char)v12;
    if (!v12) {
      int v17 = 0;
    }
    LODWORD(v57) = v17;
    unsigned int v30 = v24;
  }
  else
  {
    unsigned int v30 = v24 - 32;
    unsigned int v12 = v24;
    int v31 = v17;
  }
  HIDWORD(v57) = v30;
  if ((v30 & 0x80000000) != 0)
  {
    if (((v6 - v16) & ~(((char *)v6 - (char *)v16) >> 63) & 0xFFFFFFFC) != 0
      && (unint64_t)v16 >= v4)
    {
      unsigned int v37 = bswap32(*v16);
    }
    else
    {
      uint64_t v38 = 0;
      unsigned int v37 = v17;
      do
      {
        AudioStreamPacketDescription v39 = (unsigned __int8 *)v16 + v38;
        unsigned int v40 = v37 << 8;
        LODWORD(v57) = v40;
        int v41 = 255;
        if ((char *)v16 + v38 < (char *)v6 && (unint64_t)v39 >= v4) {
          int v41 = *v39;
        }
        unsigned int v37 = v41 | v40;
        LODWORD(v57) = v37;
        ++v38;
      }
      while (v38 != 4);
    }
    int v54 = v16 + 1;
    v17 |= v37 >> v12;
    unsigned int v42 = v37 << -(char)v12;
    if (!v12) {
      unsigned int v42 = 0;
    }
    unint64_t v57 = __PAIR64__(v12, v42);
  }
  if (v19 >= 0x32 && v25 == 1684425825 && !v31 && (v17 & 0x7F000000) == 0 && (v17 & 0xFFFFFEu) > 0x21)
  {
    FLACUnpackStreamInfo((uint64_t)&v54, (uint64_t)v64);
    goto LABEL_72;
  }
LABEL_6:
  bzero(v64, 0x38uLL);
LABEL_72:
  unint64_t v43 = *((int *)this + 49);
  if (v65 > v3 - v43)
  {
    BOOL v44 = v3 >= v43;
    unint64_t v45 = v3 - v43;
    if (!v44) {
      unint64_t v45 = 0;
    }
    unint64_t v65 = v45;
  }
  if (*((unsigned char *)this + 181))
  {
    char v46 = 0;
  }
  else if (*((unsigned char *)this + 182))
  {
    char v46 = 0;
  }
  else
  {
    char v46 = 0x80;
  }
  char v49 = v46;
  __int16 v50 = 0;
  char v51 = 34;
  int v54 = (unsigned int *)v52;
  long long v55 = v52;
  CFStringRef v56 = &v53;
  unint64_t v57 = 0x2000000000;
  unsigned int v58 = (&v49 + 4) & 3;
  FLACPackStreamInfo((uint64_t)&v54, (uint64_t)v64);
  if ((*(unsigned int (**)(void, void, uint64_t, uint64_t, char *, int *))(**((void **)this + 13) + 56))(*((void *)this + 13), 0, 4, 38, &v49, &v59)&& os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
    unsigned int v61 = "FLACAudioFile.cpp";
    __int16 v62 = 1024;
    int v63 = 132;
    _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Write stream info failed", buf, 0x12u);
  }
LABEL_84:
  uint64_t v47 = *((void *)this + 13);
  if (v47) {
    (*(void (**)(uint64_t))(*(void *)v47 + 8))(v47);
  }
  *((void *)this + 13) = 0;
  return 0;
}

uint64_t FLACAudioFile::InitializeDataSource(FLACAudioFile *this, const AudioStreamBasicDescription *a2)
{
  if (a2->mFormatID == 1718378851) {
    return 0;
  }
  else {
    return 1718449215;
  }
}

uint64_t FLACAudioFile::OpenFromDataSource(FLACAudioFile *this)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (*(uint64_t (**)(FLACAudioFile *))(*(void *)this + 728))(this);
  if (v1 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v3 = 136315394;
    unint64_t v4 = "FLACAudioFile.cpp";
    __int16 v5 = 1024;
    int v6 = 331;
    _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ParseAudioFile failed", (uint8_t *)&v3, 0x12u);
  }
  return v1;
}

uint64_t FLACAudioFile::Create(FLACAudioFile *this, const __CFURL *a2, const AudioStreamBasicDescription *a3)
{
  if (a3->mFormatID == 1718378851) {
    return AudioFileObject::Create(this, a2, a3);
  }
  else {
    return 1718449215;
  }
}

void FLACAudioFile::~FLACAudioFile(FLACAudioFile *this)
{
  FLACAudioFile::~FLACAudioFile(this);
  JUMPOUT(0x192FC8940);
}

{
  const void *v2;
  const void *v3;
  void *v4;
  void **v5;
  uint64_t vars8;

  *(void *)this = &unk_1EDF8DD90;
  uint64_t v2 = (const void *)*((void *)this + 30);
  if (v2) {
    CFRelease(v2);
  }
  __int16 v5 = (void **)((char *)this + 216);
  std::vector<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100](&v5);
  int v3 = (const void *)*((void *)this + 26);
  if (v3) {
    CFRelease(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 19);
  if (v4)
  {
    *((void *)this + 20) = v4;
    operator delete(v4);
  }
  AudioFileObject::~AudioFileObject(this);
}

void FLACAudioFormat::NewStream(FLACAudioFormat *this)
{
}

void FLACAudioFormat::New(FLACAudioFormat *this)
{
}

uint64_t FLACAudioFormat::GetHFSCodes(FLACAudioFormat *this, unsigned int *a2, void *__dst)
{
  int __src = 1718378851;
  if (*a2 >= 4) {
    size_t v3 = 4;
  }
  else {
    size_t v3 = *a2 & 0xFFFFFFFC;
  }
  *a2 = v3;
  if (__dst) {
    memcpy(__dst, &__src, v3);
  }
  return 0;
}

uint64_t FLACAudioFormat::GetAvailableStreamDescriptions(FLACAudioFormat *this, int a2, unsigned int *a3, void *a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  UInt32 outPropertyDataSize = 0;
  uint64_t PropertyInfo = AudioFormatGetPropertyInfo(0x61636966u, 0, 0, &outPropertyDataSize);
  if (!PropertyInfo)
  {
    UInt32 v8 = outPropertyDataSize;
    std::vector<unsigned int>::size_type v9 = (unint64_t)outPropertyDataSize >> 2;
    std::vector<unsigned int>::vector(&v17, v9);
    uint64_t PropertyInfo = GetAllFormatIDs(&outPropertyDataSize, v17.__begin_);
    if (!PropertyInfo)
    {
      if (v8 < 4)
      {
LABEL_10:
        *a3 = 0;
        uint64_t PropertyInfo = 1718449215;
      }
      else
      {
        std::vector<unsigned int>::pointer begin = v17.__begin_;
        if (v9 <= 1) {
          uint64_t v11 = 1;
        }
        else {
          uint64_t v11 = v9;
        }
        while (1)
        {
          int v13 = *begin++;
          int v12 = v13;
          if (a2 == 1718378851 && v12 == 1718378851) {
            break;
          }
          if (!--v11) {
            goto LABEL_10;
          }
        }
        uint64_t v20 = 0;
        memset(outPropertyData, 0, sizeof(outPropertyData));
        DWORD2(outPropertyData[0]) = 1718378851;
        UInt32 ioPropertyDataSize = 40;
        AudioFormatGetProperty(0x666D7469u, 0, 0, &ioPropertyDataSize, outPropertyData);
        if (*a3 >= 0x28) {
          size_t v14 = 40;
        }
        else {
          size_t v14 = 0;
        }
        *a3 = v14;
        if (a4) {
          memcpy(a4, outPropertyData, v14);
        }
        uint64_t PropertyInfo = 0;
      }
    }
    if (v17.__begin_)
    {
      v17.__end_ = v17.__begin_;
      operator delete(v17.__begin_);
    }
  }
  return PropertyInfo;
}

void sub_1900BC6A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t FLACAudioFormat::GetAvailableFormatIDs(FLACAudioFormat *this, unsigned int *a2, void *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  UInt32 outPropertyDataSize = 0;
  uint64_t PropertyInfo = AudioFormatGetPropertyInfo(0x61636966u, 0, 0, &outPropertyDataSize);
  if (!PropertyInfo)
  {
    UInt32 v6 = outPropertyDataSize;
    std::vector<unsigned int>::size_type v7 = (unint64_t)outPropertyDataSize >> 2;
    std::vector<unsigned int>::vector(&v14, v7);
    uint64_t PropertyInfo = GetAllFormatIDs(&outPropertyDataSize, v14.__begin_);
    if (!PropertyInfo)
    {
      if (v6 >= 4)
      {
        int v8 = 0;
        std::vector<unsigned int>::pointer begin = v14.__begin_;
        if (v7 <= 1) {
          uint64_t v10 = 1;
        }
        else {
          uint64_t v10 = v7;
        }
        do
        {
          int v11 = *begin++;
          if (v11 == 1718378851) {
            __src[v8++] = 1718378851;
          }
          --v10;
        }
        while (v10);
      }
      else
      {
        int v8 = 0;
      }
      size_t v12 = (4 * v8);
      *a2 = v12;
      if (a3) {
        memcpy(a3, __src, v12);
      }
      uint64_t PropertyInfo = 0;
    }
    if (v14.__begin_)
    {
      v14.__end_ = v14.__begin_;
      operator delete(v14.__begin_);
    }
  }
  return PropertyInfo;
}

void sub_1900BC7FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void FLACAudioFormat::GetFileTypeName(FLACAudioFormat *this, const __CFString **a2)
{
  CABundleLocker::CABundleLocker((CABundleLocker *)&v3);
  *a2 = @"FLAC";
  CABundleLocker::~CABundleLocker((CABundleLocker *)&v3);
}

const __CFArray *FLACAudioFormat::GetMIMETypes(FLACAudioFormat *this, const __CFArray **a2)
{
  v4[1] = *(const void **)MEMORY[0x1E4F143B8];
  v4[0] = @"audio/flac";
  CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v4, 1, MEMORY[0x1E4F1D510]);
  *a2 = result;
  return result;
}

const __CFArray *FLACAudioFormat::GetUTIs(FLACAudioFormat *this, const __CFArray **a2)
{
  v4[1] = *(const void **)MEMORY[0x1E4F143B8];
  v4[0] = @"org.xiph.flac";
  CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v4, 1, MEMORY[0x1E4F1D510]);
  *a2 = result;
  return result;
}

const __CFArray *FLACAudioFormat::GetExtensions(FLACAudioFormat *this, const __CFArray **a2)
{
  v4[1] = *(const void **)MEMORY[0x1E4F143B8];
  v4[0] = @"flac";
  CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v4, 1, MEMORY[0x1E4F1D510]);
  *a2 = result;
  return result;
}

BOOL FLACAudioFormat::FileDataIsThisFormat(FLACAudioFormat *this, unsigned int a2, _DWORD *a3)
{
  return *a3 == 1130450022;
}

BOOL FLACAudioFormat::ExtensionIsThisFormat(FLACAudioFormat *this, CFStringRef theString1)
{
  return CFStringCompare(theString1, @"flac", 1uLL) == kCFCompareEqualTo;
}

void FLACAudioFormat::~FLACAudioFormat(FLACAudioFormat *this)
{
}

BOOL AudibleAudioFile::IsDataFormatSupported(AudibleAudioFile *this, const AudioStreamBasicDescription *a2)
{
  if (a2->mChannelsPerFrame != 1) {
    return 0;
  }
  AudioFormatID mFormatID = a2->mFormatID;
  return mFormatID == 778924083 || mFormatID == 1096107074;
}

uint64_t AudibleAudioFile::GetEstimatedDuration(AudibleAudioFile *this, double *a2)
{
  *a2 = (double)*((unint64_t *)this + 26) / ((double)*((uint64_t *)this + 21) * 0.125);
  return 0;
}

uint64_t AudibleAudioFile::GetNumPackets(AudibleAudioFile *this)
{
  return *((void *)this + 26) / *((void *)this + 22);
}

uint64_t AudibleAudioFile::GetNumBytes(AudibleAudioFile *this)
{
  return *((void *)this + 26);
}

uint64_t AudibleAudioFile::GetProperty(AudibleAudioFile *this, int a2, unsigned int *a3, uint64_t *a4)
{
  if (a2 > 1667788914)
  {
    if (a2 != 1667788915)
    {
      int v7 = 1668444276;
      goto LABEL_6;
    }
    uint64_t v9 = *(unsigned __int16 *)(*((void *)this + 161) + 528);
    unsigned int v10 = 8 * v9 + 8;
    if (*a3 < v10) {
      return 561211770;
    }
    if (!*(_WORD *)(*((void *)this + 161) + 528))
    {
      uint64_t result = 0;
      *(_DWORD *)a4 = 0;
      *a3 = v10;
      return result;
    }
    unint64_t v11 = *((unsigned int *)this + 10);
    uint64_t v12 = *((unsigned int *)this + 11);
    int v13 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(*(unsigned __int16 *)(*((void *)this + 161) + 528));
    bzero(v13, 8 * v9);
    uint64_t v14 = *((void *)this + 161);
    uint64_t v15 = *(unsigned __int16 *)(v14 + 528);
    if (v13)
    {
      uint64_t v16 = *(void *)(v14 + 536);
      if (!v16)
      {
        uint64_t v25 = 4294967276;
        goto LABEL_32;
      }
      if (!v15)
      {
        uint64_t v25 = 0;
        *(_DWORD *)a4 = 0;
        *a3 = v10;
        goto LABEL_32;
      }
      uint64_t v17 = (uint64_t *)(v16 + 8);
      unsigned int v18 = v13;
      uint64_t v19 = v15;
      do
      {
        uint64_t v20 = *v17;
        v17 += 3;
        *v18++ = v20;
        --v19;
      }
      while (v19);
    }
    *(_DWORD *)a4 = v15;
    if (v15)
    {
      uint64_t v21 = 0;
      uint64_t v22 = a4 + 1;
      int v23 = (unint64_t *)v13;
      do
      {
        *v22++ = v21;
        unint64_t v24 = *v23++;
        v21 += v24 / v11 * v12;
        --v15;
      }
      while (v15);
    }
    uint64_t v25 = 0;
    uint64_t result = 0;
    *a3 = v10;
    if (!v13) {
      return result;
    }
LABEL_32:
    operator delete(v13);
    return v25;
  }
  if (a2 == 1633776244)
  {
    if (*a3 >= 8)
    {
      uint64_t result = (*(uint64_t (**)(AudibleAudioFile *, uint64_t *))(*(void *)this + 712))(this, a4);
      if (!result) {
        *a3 = 8;
      }
      return result;
    }
    return 561211770;
  }
  int v7 = 1635083362;
LABEL_6:
  if (a2 == v7)
  {
    if (*a3 >= 4)
    {
      uint64_t result = 0;
      *a3 = 4;
      *(_DWORD *)a4 = 1;
      return result;
    }
    return 561211770;
  }
  return AudioFileObject::GetProperty(this, a2, a3, a4);
}

uint64_t AudibleAudioFile::GetPropertyInfo(AudibleAudioFile *this, int a2, unsigned int *a3, unsigned int *a4)
{
  if (a2 <= 1635083361)
  {
    if (a2 == 1633773424)
    {
      if (a3) {
        *a3 = 4;
      }
      if (a4) {
        *a4 = 1;
      }
      return 0;
    }
    if (a2 == 1633776244)
    {
      if (!a3) {
        goto LABEL_14;
      }
      int v4 = 8;
      goto LABEL_13;
    }
  }
  else
  {
    switch(a2)
    {
      case 1635083362:
        goto LABEL_5;
      case 1667788915:
        if (!a3) {
          goto LABEL_14;
        }
        int v4 = 8 * *(unsigned __int16 *)(*((void *)this + 161) + 528) + 8;
LABEL_13:
        *a3 = v4;
LABEL_14:
        if (a4) {
          *a4 = 0;
        }
        return 0;
      case 1668444276:
LABEL_5:
        if (!a3) {
          goto LABEL_14;
        }
        int v4 = 4;
        goto LABEL_13;
    }
  }
  return AudioFileObject::GetPropertyInfo(this, a2, a3, a4);
}

uint64_t AudibleAudioFile::ReadPacketData(AudibleAudioFile *this, unsigned __int8 a2, unsigned int *a3, AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, unsigned char *a7)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (a4) {
    BOOL v9 = a7 == 0;
  }
  else {
    BOOL v9 = 0;
  }
  int v10 = v9;
  if (!a3 || !*a3)
  {
    uint64_t v11 = 2003334207;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      unsigned int v35 = "AudibleAudioFile.cpp";
      __int16 v36 = 1024;
      int v37 = 346;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  invalid ioNumBytes parameter", buf, 0x12u);
    }
    unsigned int v14 = 0;
    LODWORD(v15) = 0;
    if (!a3) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }
  if (!a6 || !*a6)
  {
    uint64_t v11 = 2003334207;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      unsigned int v35 = "AudibleAudioFile.cpp";
      __int16 v36 = 1024;
      int v37 = 347;
      uint64_t v12 = MEMORY[0x1E4F14500];
      int v13 = "%25s:%-5d  invalid ioNumPackets parameter";
      goto LABEL_22;
    }
LABEL_23:
    LODWORD(v15) = 0;
    unsigned int v14 = 0;
    goto LABEL_24;
  }
  if (v10)
  {
    uint64_t v11 = 1869627199;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      unsigned int v35 = "AudibleAudioFile.cpp";
      __int16 v36 = 1024;
      int v37 = 348;
      uint64_t v12 = MEMORY[0x1E4F14500];
      int v13 = "%25s:%-5d  can't provide packet descriptions for an encrypted Audible file";
LABEL_22:
      _os_log_impl(&dword_18FEC0000, v12, OS_LOG_TYPE_ERROR, v13, buf, 0x12u);
      goto LABEL_23;
    }
    goto LABEL_23;
  }
  if ((*(uint64_t (**)(AudibleAudioFile *))(*(void *)this + 240))(this) <= a5)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      unsigned int v35 = "AudibleAudioFile.cpp";
      __int16 v36 = 1024;
      int v37 = 354;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  starting packet out of range", buf, 0x12u);
    }
    LODWORD(v15) = 0;
    unsigned int v14 = 0;
    uint64_t v11 = 4294967257;
    goto LABEL_24;
  }
  uint64_t v21 = *a6 + a5;
  if (v21 <= (*(uint64_t (**)(AudibleAudioFile *))(*(void *)this + 240))(this))
  {
    unsigned int v22 = *a6;
  }
  else
  {
    unsigned int v22 = (*(uint64_t (**)(AudibleAudioFile *))(*(void *)this + 240))(this) - a5;
    *a6 = v22;
  }
  uint64_t v23 = v22;
  uint64_t v24 = *((void *)this + 22);
  unint64_t v25 = v24 * v23;
  unint64_t v33 = v25;
  unint64_t v26 = *a3;
  if (v25 > v26)
  {
    unint64_t v25 = (uint64_t)v26 / v24 * v24;
    unint64_t v33 = v25;
  }
  if (!v25)
  {
    uint64_t v11 = 2003334207;
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_23;
    }
    *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
    unsigned int v35 = "AudibleAudioFile.cpp";
    __int16 v36 = 1024;
    int v37 = 366;
    uint64_t v12 = MEMORY[0x1E4F14500];
    int v13 = "%25s:%-5d  buffer too small to accommodate even one packet";
    goto LABEL_22;
  }
  if (AASetAudioBytePos(*((void *)this + 161), v24 * a5))
  {
    uint64_t v11 = 2003334207;
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_23;
    }
    *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
    unsigned int v35 = "AudibleAudioFile.cpp";
    __int16 v36 = 1024;
    int v37 = 373;
    uint64_t v12 = MEMORY[0x1E4F14500];
    int v13 = "%25s:%-5d  AASetAudioBytePos failed";
    goto LABEL_22;
  }
  int v27 = AAReadEncodedAudio(*((void *)this + 161), a7, &v33);
  unsigned int v14 = v33;
  unint64_t v28 = *((void *)this + 22);
  unint64_t v15 = v33 / v28;
  if (a4 && *a6)
  {
    uint64_t v29 = 0;
    unint64_t v30 = 0;
    p_mVariableFramesInPacket = &a4->mVariableFramesInPacket;
    do
    {
      *((void *)p_mVariableFramesInPacket - 1) = v29;
      UInt32 *p_mVariableFramesInPacket = 0;
      p_mVariableFramesInPacket[1] = v28;
      p_mVariableFramesInPacket += 4;
      ++v30;
      v29 += v28;
    }
    while (v30 < *a6);
  }
  if (v27) {
    unsigned int v32 = 2003334207;
  }
  else {
    unsigned int v32 = 0;
  }
  if (v27 == -24) {
    uint64_t v11 = 4294967257;
  }
  else {
    uint64_t v11 = v32;
  }
  if (a3)
  {
LABEL_24:
    *a3 = v14;
    if (!a6) {
      return v11;
    }
    goto LABEL_18;
  }
LABEL_17:
  if (a6) {
LABEL_18:
  }
    *a6 = v15;
  return v11;
}

uint64_t AudibleAudioFile::ReadPackets(AudibleAudioFile *this, uint64_t a2, unsigned int *a3, AudioStreamPacketDescription *a4, uint64_t a5, unsigned int *a6, void *a7)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  unsigned int v11 = 0;
  if (a6 && *a6)
  {
    if (a7) {
      unsigned int v11 = *((_DWORD *)this + 10) * *a6;
    }
    uint64_t v8 = (*(uint64_t (**)(AudibleAudioFile *, uint64_t, unsigned int *, AudioStreamPacketDescription *))(*(void *)this + 96))(this, a2, &v11, a4);
    uint64_t v9 = v8;
    if (a3 && !v8) {
      *a3 = v11;
    }
  }
  else
  {
    uint64_t v9 = 2003334207;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      int v13 = "AudibleAudioFile.cpp";
      __int16 v14 = 1024;
      int v15 = 312;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  invalid ioNumPackets parameter", buf, 0x12u);
    }
  }
  return v9;
}

uint64_t AudibleAudioFile::OpenFromDataSource(int64x2_t *this)
{
  v179[1] = *MEMORY[0x1E4F143B8];
  this[9].i64[0] = 0;
  uint64_t v2 = this + 9;
  this[9].i64[1] = this[6].i64[1];
  if (AAValidateFile((uint64_t)this[9].i64))
  {
    uint64_t v3 = 1685348671;
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return v3;
    }
    *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
    *(void *)&uint8_t buf[4] = "AudibleAudioFile.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 164;
    int v4 = MEMORY[0x1E4F14500];
    __int16 v5 = "%25s:%-5d  ReadHeader";
LABEL_53:
    _os_log_impl(&dword_18FEC0000, v4, OS_LOG_TYPE_ERROR, v5, buf, 0x12u);
    return v3;
  }
  AAGetMetaCodec((uint64_t)v2, (int64x2_t *)this[10].i64);
  uint64_t v164 = 0;
  double v159 = (double)this[12].i64[0];
  uint64_t v6 = this[10].i64[0];
  if (v6 == 49164 || v6 == 49168)
  {
    int v8 = 1096107074;
  }
  else
  {
    if (v6 != 49165)
    {
      uint64_t v3 = 1718449215;
      goto LABEL_51;
    }
    int v8 = 778924083;
  }
  int v160 = v8;
  int v161 = 0;
  int32x2_t v162 = vmovn_s64(this[11]);
  uint64_t v163 = 0x100000000;
  (*(void (**)(int64x2_t *, double *))(this->i64[0] + 176))(this, &v159);
  AAGetMetaCodec((uint64_t)v2, buf);
  if (IAAFindSection((uint64_t)v2, 3, v168)) {
    goto LABEL_20;
  }
  OAAFileRead((uint64_t)v2, (uint64_t)v179, 2, 0);
  *(void *)float v168 = 56;
  OAAFileSetCurrentPos((uint64_t)v2, this[9].i64[0] + 56);
  IAAReadULong((uint64_t)v2, (int64x2_t *)this[13].i64);
  this[13].i64[1] = 1000 * ((unint64_t)(8 * this[13].i64[0]) % *(void *)&buf[8]) / *(void *)&buf[8]
                  + 1000 * ((unint64_t)(8 * this[13].i64[0]) / *(void *)&buf[8]);
  IAAFindSection((uint64_t)v2, 6, v168);
  IAAReadULong((uint64_t)v2, (int64x2_t *)this[16].i64);
  if (this[16].i64[0] >= 0x80uLL) {
    uint64_t v9 = 128;
  }
  else {
    uint64_t v9 = this[16].i64[0];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    unsigned int v11 = &this[16].i64[1];
    do
    {
      *unsigned int v11 = v10;
      IAAReadULong((uint64_t)v2, v168);
      IAAReadULong((uint64_t)v2, v168);
      IAAReadULong((uint64_t)v2, v168);
      IAAReadULong((uint64_t)v2, v168);
      uint64_t v12 = *(void *)v168;
      IAAReadULong((uint64_t)v2, v168);
      OAAFileRead((uint64_t)v2, (uint64_t)v179, 2, 0);
      IAAReadULong((uint64_t)v2, v168);
      OAAFileSetCurrentPos((uint64_t)v2, v2->i64[0] + 8 * *(void *)v168);
      v10 += v12;
      ++v11;
      --v9;
    }
    while (v9);
  }
  if (IAAFindSection((uint64_t)v2, 1, v168))
  {
LABEL_20:
    uint64_t v3 = 1685348671;
LABEL_51:
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return v3;
    }
    *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
    *(void *)&uint8_t buf[4] = "AudibleAudioFile.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 166;
    int v4 = MEMORY[0x1E4F14500];
    __int16 v5 = "%25s:%-5d  ParseHeader";
    goto LABEL_53;
  }
  OAAFileRead((uint64_t)v2, (uint64_t)v179, 2, 0);
  OAAFileRead((uint64_t)v2, (uint64_t)v179, 2, 0);
  IAAReadULong((uint64_t)v2, v168);
  IAAReadULong((uint64_t)v2, v168);
  if (*(void *)v168 == 1)
  {
    this[14].i64[0] = 1;
    IAAReadULong((uint64_t)v2, &this[14].i64[1]);
    IAAReadULong((uint64_t)v2, (int64x2_t *)this[15].i64);
    IAAReadULong((uint64_t)v2, &this[15].i64[1]);
  }
  else
  {
    uint64_t v13 = this[13].i64[0];
    this[14].i64[0] = 0;
    this[14].i64[1] = v13;
    this[15].i64[0] = 0;
    this[15].i64[1] = v13;
  }
  __int16 v14 = IAAMalloc(0x2C8uLL);
  uint64_t v3 = 1685348671;
  if (!v14) {
    goto LABEL_51;
  }
  OAAFileSetCurrentPos((uint64_t)v2, 0);
  if (AAValidateFile((uint64_t)v2)
    || (*(void *)buf = 0, *(void *)float v168 = 0, IAAFindSection((uint64_t)v2, 5, v168))
    || (IAAReadULong((uint64_t)v2, buf),
        uint64_t v15 = *(void *)buf,
        *((_WORD *)v14 + 228) = *(_WORD *)buf,
        *(void *)v168 != 4 * (__int16)v15 + 4))
  {
LABEL_42:
    *((void *)v14 + 82) = 0;
    uint64_t v21 = (void *)*((void *)v14 + 44);
    if (v21) {
      free(v21);
    }
    unsigned int v22 = (void **)*((void *)v14 + 67);
    if (v22)
    {
      if (!v22[2] || (free(v22[2]), (unsigned int v22 = (void **)*((void *)v14 + 67)) != 0)) {
        free(v22);
      }
    }
    uint64_t v23 = (void *)*((void *)v14 + 81);
    if (v23) {
      free(v23);
    }
    free(v14);
    goto LABEL_51;
  }
  if ((unint64_t)(v15 << 48) < 0x8000000000001)
  {
    if ((__int16)v15 < 1) {
      goto LABEL_34;
    }
  }
  else
  {
    *((_WORD *)v14 + 228) = 8;
  }
  uint64_t v16 = 0;
  do
  {
    IAAReadULong((uint64_t)v2, buf);
    *(void *)&v14[8 * v16++ + 464] = *(void *)buf;
  }
  while (v16 < *((__int16 *)v14 + 228));
LABEL_34:
  *(void *)float v168 = 0;
  v179[0] = 0;
  if (IAAFindSection((uint64_t)v2, 1, v168) || *(void *)v168 != 24) {
    goto LABEL_42;
  }
  int v17 = OAAFileRead((uint64_t)v2, (uint64_t)buf, 2, 0);
  unsigned int v18 = bswap32(*(unsigned __int16 *)buf) >> 16;
  if (v17) {
    LOWORD(v18) = 0;
  }
  *((_WORD *)v14 + 144) = v18;
  if (v17) {
    goto LABEL_42;
  }
  int v19 = OAAFileRead((uint64_t)v2, (uint64_t)buf, 2, 0);
  unsigned int v20 = bswap32(*(unsigned __int16 *)buf) >> 16;
  if (v19) {
    LOWORD(v20) = 0;
  }
  *((_WORD *)v14 + 145) = v20;
  if (v19) {
    goto LABEL_42;
  }
  *(void *)AudioStreamBasicDescription buf = 0;
  int v25 = IAAReadULong((uint64_t)v2, buf);
  *((void *)v14 + 37) = *(void *)buf;
  if (!v25) {
    goto LABEL_42;
  }
  if (!IAAReadULong((uint64_t)v2, v179)) {
    goto LABEL_42;
  }
  *(void *)AudioStreamBasicDescription buf = 0;
  int v26 = IAAReadULong((uint64_t)v2, buf);
  *((void *)v14 + 39) = *(void *)buf;
  if (!v26) {
    goto LABEL_42;
  }
  *(void *)AudioStreamBasicDescription buf = 0;
  int v27 = IAAReadULong((uint64_t)v2, buf);
  *((void *)v14 + 40) = *(void *)buf;
  if (!v27) {
    goto LABEL_42;
  }
  *(void *)AudioStreamBasicDescription buf = 0;
  int v28 = IAAReadULong((uint64_t)v2, buf);
  *((void *)v14 + 41) = *(void *)buf;
  if (!v28) {
    goto LABEL_42;
  }
  *((_WORD *)v14 + 152) = v179[0];
  if (*((void *)v14 + 37) != 1469084982) {
    goto LABEL_42;
  }
  if (*((_WORD *)v14 + 145)) {
    goto LABEL_42;
  }
  if (*((unsigned __int16 *)v14 + 144) >= 2u) {
    goto LABEL_42;
  }
  if (IAAFindSection((uint64_t)v2, 3, v168)) {
    goto LABEL_42;
  }
  IAAReadUShort((uint64_t)v2, (_WORD *)v14 + 180);
  OAAFileSetCurrentPos((uint64_t)v2, v2->i64[0] + 56);
  IAAReadULong((uint64_t)v2, (void *)v14 + 46);
  IAAReadULong((uint64_t)v2, (void *)v14 + 47);
  IAAReadULong((uint64_t)v2, buf);
  IAAReadULong((uint64_t)v2, buf);
  v179[0] = 0;
  if (IAAFindSection((uint64_t)v2, 6, v168)) {
    goto LABEL_42;
  }
  IAAReadULong((uint64_t)v2, v179);
  unsigned __int16 v29 = v179[0];
  *((_WORD *)v14 + 264) = v179[0];
  if (v29 - 1001 < 0xFFFFFC18) {
    goto LABEL_42;
  }
  unint64_t v30 = IAAMalloc(24 * v29);
  *((void *)v14 + 67) = v30;
  if (!v30) {
    goto LABEL_42;
  }
  if (*((_WORD *)v14 + 264))
  {
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    unint64_t v33 = 0;
    do
    {
      *(void *)AudioStreamBasicDescription buf = 0;
      IAAReadULong((uint64_t)v2, buf);
      *(_WORD *)(*((void *)v14 + 67) + v31) = *(_WORD *)buf;
      IAAReadULong((uint64_t)v2, buf);
      IAAReadULong((uint64_t)v2, buf);
      IAAReadULong((uint64_t)v2, (void *)(*((void *)v14 + 67) + v31 + 8));
      IAAReadULong((uint64_t)v2, buf);
      IAAReadUShort((uint64_t)v2, (_WORD *)v14 + 272);
      *(void *)AudioStreamBasicDescription buf = 0;
      IAAReadULong((uint64_t)v2, buf);
      if (*(__int16 *)(*((void *)v14 + 67) + v31) < 0) {
        goto LABEL_42;
      }
      uint64_t v34 = *(unsigned __int16 *)(*((void *)v14 + 67) + v31);
      BOOL v35 = __CFADD__(v32, v34);
      v32 += v34;
      if (v35 || OAAFileSetCurrentPos((uint64_t)v2, v2->i64[0] + 8 * *(void *)buf)) {
        goto LABEL_42;
      }
      ++v33;
      v31 += 24;
    }
    while (v33 < *((unsigned __int16 *)v14 + 264));
    size_t v36 = 16 * v32;
  }
  else
  {
    size_t v36 = 0;
  }
  int v37 = IAAMalloc(v36);
  if (!v37) {
    goto LABEL_42;
  }
  uint64_t v38 = *((unsigned __int16 *)v14 + 264);
  if (*((_WORD *)v14 + 264))
  {
    AudioStreamPacketDescription v39 = (char **)(*((void *)v14 + 67) + 16);
    do
    {
      *AudioStreamPacketDescription v39 = v37;
      v37 += 16 * *((__int16 *)v39 - 8);
      v39 += 3;
      --v38;
    }
    while (v38);
  }
  *(void *)AudioStreamBasicDescription buf = 0;
  if (IAAFindSection((uint64_t)v2, 10, buf)) {
    goto LABEL_42;
  }
  unsigned int v40 = (__int16 *)*((void *)v14 + 67);
  int v41 = *v40;
  if (v41 >= 1)
  {
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    do
    {
      IAAReadULong((uint64_t)v2, (void *)(*((void *)v40 + 2) + v42 + 8));
      IAAReadULong((uint64_t)v2, (void *)(*(void *)(*((void *)v14 + 67) + 16) + v42));
      uint64_t v44 = *(void *)(*((void *)v14 + 67) + 16);
      if (v2->i64[0] != *(void *)(v44 + v42)) {
        goto LABEL_42;
      }
      OAAFileSetCurrentPos((uint64_t)v2, *(void *)(v44 + v42 + 8) + v2->i64[0]);
      ++v43;
      unsigned int v40 = (__int16 *)*((void *)v14 + 67);
      v42 += 16;
    }
    while (v43 < *v40);
    LOWORD(v41) = *v40;
  }
  unsigned int v45 = *((unsigned __int16 *)v14 + 264);
  if (v45 >= 2)
  {
    uint64_t v157 = *((void *)v40 + 1) + **((void **)v40 + 2) + 8 * (__int16)v41;
    for (unint64_t i = 1; i < v45; ++i)
    {
      uint64_t v47 = &v40[12 * i];
      CFDataRef v48 = (void *)*((void *)v47 + 2);
      *CFDataRef v48 = v157;
      if (*v47 == 1)
      {
        uint64_t v49 = *(void *)&v40[12 * i + 4];
        v48[1] = v49;
        LOWORD(v48) = 1;
      }
      else
      {
        OAAFileSetCurrentPos((uint64_t)v2, v157 - 8);
        unsigned int v40 = (__int16 *)*((void *)v14 + 67);
        LODWORD(v48) = v40[12 * i];
        if ((int)v48 < 2)
        {
          uint64_t v52 = 0;
          uint64_t v51 = 0;
        }
        else
        {
          uint64_t v50 = 0;
          uint64_t v51 = 0;
          uint64_t v52 = 0;
          do
          {
            IAAReadULong((uint64_t)v2, (void *)(*(void *)&v40[12 * i + 8] + v50 + 8));
            IAAReadULong((uint64_t)v2, (void *)(*(void *)(*((void *)v14 + 67) + 24 * i + 16) + v50));
            uint64_t v53 = *(void *)(*((void *)v14 + 67) + 24 * i + 16);
            if (v2->i64[0] != *(void *)(v53 + v50)) {
              goto LABEL_42;
            }
            uint64_t v54 = *(void *)(v53 + v50 + 8);
            OAAFileSetCurrentPos((uint64_t)v2, v54 + v2->i64[0]);
            v51 += v54;
            ++v52;
            unsigned int v40 = (__int16 *)*((void *)v14 + 67);
            v50 += 16;
          }
          while (v52 < v40[12 * i] - 1);
          LOWORD(v48) = v40[12 * i];
        }
        long long v55 = &v40[12 * i];
        CFStringRef v56 = (void *)(*((void *)v55 + 2) + 16 * v52);
        *CFStringRef v56 = *(v56 - 2) + *(v56 - 1) + 8;
        uint64_t v49 = *((void *)v55 + 1);
        v56[1] = v49 - v51;
        unsigned int v45 = *((unsigned __int16 *)v14 + 264);
      }
      v157 += v49 + 8 * (__int16)v48;
    }
  }
  *((void *)v14 + 80) = v2;
  int v57 = *((unsigned __int16 *)v14 + 272);
  *((_WORD *)v14 + 340) = v57;
  switch(v57)
  {
    case 49164:
      __int16 v58 = 20;
      goto LABEL_106;
    case 49165:
      __int16 v59 = 31850;
      __int16 v58 = 104;
      __int16 v60 = 22050;
      goto LABEL_107;
    case 49166:
    case 49167:
    case 49169:
    case 49170:
      goto LABEL_101;
    case 49168:
      __int16 v59 = 8444;
      __int16 v58 = 19;
      goto LABEL_104;
    case 49171:
      __int16 v58 = -1;
LABEL_106:
      __int16 v60 = 16000;
      __int16 v59 = 16000;
      goto LABEL_107;
    default:
      if (v57 == 1)
      {
        __int16 v59 = 0;
        __int16 v58 = -1;
LABEL_104:
        __int16 v60 = 8000;
      }
      else
      {
LABEL_101:
        __int16 v59 = 0;
        __int16 v60 = -1;
        __int16 v58 = -1;
      }
LABEL_107:
      *((_WORD *)v14 + 342) = v59;
      *((_WORD *)v14 + 341) = v58;
      *((_WORD *)v14 + 343) = v60;
      if (!*((_WORD *)v14 + 144)) {
        goto LABEL_229;
      }
      unint64_t v61 = (unint64_t)v174;
      if (v174 >= (unsigned char *)&v167 + 7) {
        unint64_t v61 = (unint64_t)&v167 + 7;
      }
      bzero((void *)(v61 + 1), (size_t)&buf[~v61]);
      uint64_t v166 = 0;
      unint64_t v167 = 0;
      int v165 = 0;
      float v158 = (uint64_t *)*((void *)v14 + 80);
      if (IAAFindSection((uint64_t)v158, 2, &v167)) {
        goto LABEL_228;
      }
      v179[0] = 0;
      IAAReadULong((uint64_t)v158, v179);
      uint64_t v155 = v179[0];
      if (v179[0] <= 0) {
        goto LABEL_172;
      }
      uint64_t v62 = 0;
      unint64_t v156 = 0;
      break;
  }
  do
  {
    OAAFileRead((uint64_t)v158, (uint64_t)&v165, 1, &v166);
    if (v165) {
      break;
    }
    uint64_t v63 = v166;
    v179[0] = 0;
    unsigned int v64 = IAAReadULong((uint64_t)v158, v179);
    unint64_t v65 = v179[0];
    v179[0] = 0;
    unsigned int v66 = IAAReadULong((uint64_t)v158, v179);
    unint64_t v67 = v179[0];
    v179[0] = 0;
    if (v65 >= 0x13) {
      uint64_t v68 = 19;
    }
    else {
      uint64_t v68 = v65;
    }
    OAAFileRead((uint64_t)v158, (uint64_t)buf, v68, v179);
    uint64_t v69 = v179[0];
    buf[v179[0]] = 0;
    uint64_t v166 = v69;
    v156 += v63 + v64 + v66 + v69;
    int v70 = buf[0];
    if (buf[0])
    {
      uint64_t v71 = 0;
      int v72 = buf[0];
      while (v71 != 9 && v72 == aHeaderkey[v71])
      {
        int v72 = buf[++v71];
        if (!v72)
        {
          long long v73 = &aHeaderkey[v71];
          goto LABEL_124;
        }
      }
    }
    else
    {
      long long v73 = "HeaderKey";
LABEL_124:
      if (!*v73)
      {
        v179[0] = 0;
        if (v67 >= 0x3F) {
          uint64_t v82 = 63;
        }
        else {
          uint64_t v82 = v67;
        }
        OAAFileRead((uint64_t)v158, (uint64_t)v168, v82, v179);
        uint64_t v83 = v179[0];
        uint64_t v84 = v168;
        goto LABEL_170;
      }
    }
    if (buf[0])
    {
      uint64_t v74 = 0;
      int v75 = buf[0];
      while (v74 != 10 && v75 == aHeaderseed[v74])
      {
        int v75 = buf[++v74];
        if (!v75)
        {
          uint64_t v76 = &aHeaderseed[v74];
          goto LABEL_132;
        }
      }
    }
    else
    {
      uint64_t v76 = "HeaderSeed";
LABEL_132:
      if (!*v76)
      {
        v179[0] = 0;
        if (v67 >= 0xF) {
          uint64_t v86 = 15;
        }
        else {
          uint64_t v86 = v67;
        }
        OAAFileRead((uint64_t)v158, (uint64_t)&v169, v86, v179);
        uint64_t v83 = v179[0];
        uint64_t v84 = &v169;
        goto LABEL_170;
      }
    }
    if (buf[0])
    {
      uint64_t v77 = 0;
      int v78 = buf[0];
      while (v77 != 15 && v78 == aEncryptedblock[v77])
      {
        int v78 = buf[++v77];
        if (!v78)
        {
          unsigned int v79 = &aEncryptedblock[v77];
          goto LABEL_140;
        }
      }
    }
    else
    {
      unsigned int v79 = "EncryptedBlocks";
LABEL_140:
      if (!*v79)
      {
        v179[0] = 0;
        if (v67 >= 0xF) {
          uint64_t v87 = 15;
        }
        else {
          uint64_t v87 = v67;
        }
        OAAFileRead((uint64_t)v158, (uint64_t)&v171, v87, v179);
        uint64_t v83 = v179[0];
        uint64_t v84 = &v171;
        goto LABEL_170;
      }
    }
    if (buf[0])
    {
      uint64_t v80 = 0;
      while (v80 != 7 && v70 == aCputype[v80])
      {
        int v70 = buf[++v80];
        if (!v70)
        {
          uint64_t v81 = &aCputype[v80];
          goto LABEL_152;
        }
      }
LABEL_153:
      if (v156 >= v167) {
        break;
      }
      if (v158) {
        uint64_t v85 = *v158;
      }
      else {
        uint64_t v85 = -5;
      }
      OAAFileSetCurrentPos((uint64_t)v158, v85 + v67);
      goto LABEL_171;
    }
    uint64_t v81 = "CPUType";
LABEL_152:
    if (*v81) {
      goto LABEL_153;
    }
    v179[0] = 0;
    if (v67 >= 0xF) {
      uint64_t v88 = 15;
    }
    else {
      uint64_t v88 = v67;
    }
    OAAFileRead((uint64_t)v158, (uint64_t)v173, v88, v179);
    uint64_t v83 = v179[0];
    uint64_t v84 = v173;
LABEL_170:
    v84[v83] = 0;
LABEL_171:
    ++v62;
  }
  while (v62 != v155);
LABEL_172:
  __int16 v89 = v171;
  if (v171 - 58 >= 0xFFFFFFF6)
  {
    __int16 v90 = 0;
    uint64_t v91 = v172;
    do
    {
      __int16 v90 = 10 * v90 + v89 - 48;
      int v92 = *v91++;
      __int16 v89 = v92;
    }
    while ((v92 - 58) > 0xFFFFFFF5);
  }
  else
  {
    __int16 v90 = 0;
  }
  int v93 = v169;
  if (v169 - 58 >= 0xFFFFFFF6)
  {
    unsigned int v94 = 0;
    unsigned int v95 = v170;
    do
    {
      unsigned int v94 = 10 * v94 + v93 - 48;
      int v96 = *v95++;
      int v93 = v96;
    }
    while ((v96 - 58) > 0xFFFFFFF5);
  }
  else
  {
    unsigned int v94 = 0;
  }
  unsigned int v97 = v168[0];
  if (v168[0] - 58 >= 0xFFFFFFF6)
  {
    uint64_t v98 = 0;
    uint64_t v99 = &v168[1];
    do
    {
      uint64_t v98 = 10 * v98 + v97 - 48;
      unsigned int v100 = *v99++;
      unsigned int v97 = v100;
    }
    while (v100 - 58 > 0xFFFFFFF5);
  }
  else
  {
    uint64_t v98 = 0;
  }
  *((void *)v14 + 71) = v98;
  int v101 = v168;
  do
    int v102 = *v101++;
  while (v102 != 32);
  unsigned int v103 = *v101;
  if (v103 - 58 >= 0xFFFFFFF6)
  {
    uint64_t v104 = 0;
    uint64_t v105 = 1;
    do
    {
      uint64_t v104 = 10 * v104 + v103 - 48;
      unsigned int v103 = v101[v105++];
    }
    while (v103 - 58 > 0xFFFFFFF5);
  }
  else
  {
    uint64_t v104 = 0;
  }
  *((void *)v14 + 72) = v104;
  do
    int v106 = *v101++;
  while (v106 != 32);
  unsigned int v107 = *v101;
  if (v107 - 58 >= 0xFFFFFFF6)
  {
    uint64_t v109 = 0;
    uint64_t v108 = 0;
    do
    {
      uint64_t v108 = 10 * v108 + v107 - 48;
      unsigned int v107 = v101[++v109];
    }
    while (v107 - 58 > 0xFFFFFFF5);
  }
  else
  {
    uint64_t v108 = 0;
  }
  *((void *)v14 + 73) = v108;
  do
    int v110 = *v101++;
  while (v110 != 32);
  unsigned int v113 = *v101;
  uint64_t v111 = v101 + 1;
  unsigned int v112 = v113;
  if (v113 - 58 >= 0xFFFFFFF6)
  {
    uint64_t v114 = 0;
    do
    {
      uint64_t v114 = 10 * v114 + v112 - 48;
      unsigned int v115 = *v111++;
      unsigned int v112 = v115;
    }
    while (v115 - 58 > 0xFFFFFFF5);
  }
  else
  {
    uint64_t v114 = 0;
  }
  *((void *)v14 + 74) = v114;
  __int16 v116 = *((_WORD *)v14 + 180);
  buf[0] = HIBYTE(v116);
  buf[1] = v116;
  buf[2] = BYTE3(v98);
  float64x2_t buf[3] = BYTE2(v98);
  uint8_t buf[4] = BYTE1(v98);
  buf[5] = v98;
  buf[6] = BYTE3(v104);
  buf[7] = BYTE2(v104);
  uint8_t buf[8] = BYTE1(v104);
  buf[9] = v104;
  buf[10] = BYTE3(v108);
  buf[11] = BYTE2(v108);
  unsigned char buf[12] = BYTE1(v108);
  buf[13] = v108;
  buf[14] = BYTE3(v114);
  buf[15] = BYTE2(v114);
  buf[16] = BYTE1(v114);
  buf[17] = v114;
  char v176 = HIBYTE(v90);
  int v117 = *((__int16 *)v14 + 192);
  uint64_t v118 = *((unsigned __int16 *)v14 + 192);
  char v177 = v90;
  if (v117 < 1)
  {
    LODWORD(v123) = 20;
  }
  else
  {
    uint64_t v119 = 0;
    char v120 = (unsigned int *)(v14 + 392);
    do
    {
      int v121 = v119;
      unsigned int v122 = *v120;
      v120 += 2;
      *(_DWORD *)&v178[v119] = bswap32(v122);
      v119 += 4;
    }
    while (4 * v118 != v119);
    LODWORD(v123) = v121 + 24;
  }
  uint64_t v124 = *((unsigned __int16 *)v14 + 228);
  if (*((__int16 *)v14 + 228) >= 1)
  {
    long long v125 = (unsigned int *)(v14 + 464);
    uint64_t v126 = *((unsigned __int16 *)v14 + 228);
    uint64_t v123 = v123;
    do
    {
      unsigned int v127 = *v125;
      v125 += 2;
      *(_DWORD *)&buf[v123] = bswap32(v127);
      v123 += 4;
      --v126;
    }
    while (v126);
  }
  if ((int)v123 >= 1)
  {
    int v128 = (v123 & 0xFFFFFFF8) + 8;
    if (v128 >= 1)
    {
      unint64_t v129 = 0;
      LODWORD(v130) = 0;
      do
      {
        uint64_t v131 = 0;
        LODWORD(v132) = v94 + 1;
        unint64_t v133 = v94;
        for (unsigned int j = 10; j > 2; --j)
        {
          uint64_t v135 = v131 + 2654435769;
          uint64_t v131 = (v131 - 1640531527);
          unint64_t v136 = ((16 * v132 + 1998671179) ^ (((unint64_t)v132 >> 5) + 426411981) ^ (v135 + v132))
               + v133;
          unint64_t v133 = ((16 * v132 + 1998671179) ^ ((v132 >> 5) + 426411981) ^ (v135
                                                                                              + v132))
               + v133;
          uint64_t v132 = ((16 * v136 + 1375749629) ^ (v136 + v135) ^ ((v133 >> 5) + 710006387))
               + v132;
        }
        LOBYTE(v179[0]) = BYTE3(v136);
        BYTE1(v179[0]) = BYTE2(v136);
        BYTE2(v179[0]) = BYTE1(v136);
        BYTE3(v179[0]) = v136;
        BYTE4(v179[0]) = BYTE3(v132);
        BYTE5(v179[0]) = BYTE2(v132);
        BYTE6(v179[0]) = BYTE1(v132);
        HIBYTE(v179[0]) = v132;
        if ((int)v130 < (int)v123)
        {
          unint64_t v137 = 0;
          uint64_t v138 = (int)v130;
          float v139 = &buf[(int)v130];
          do
          {
            v139[v137] ^= *((unsigned char *)v179 + v137);
            uint64_t v130 = v138 + v137 + 1;
            if (v137 > 6) {
              break;
            }
            ++v137;
          }
          while (v130 < v123);
        }
        v94 += 2;
        v129 += 8;
      }
      while (v129 < v128);
    }
  }
  *((_WORD *)v14 + 180) = bswap32(*(unsigned __int16 *)buf) >> 16;
  *((void *)v14 + 71) = bswap32(*(unsigned int *)&buf[2]);
  *((void *)v14 + 72) = bswap32(*(unsigned int *)&buf[6]);
  *((void *)v14 + 73) = bswap32(*(unsigned int *)&buf[10]);
  *((void *)v14 + 74) = bswap32(*(unsigned int *)&buf[14]);
  if ((__int16)v118 < 1)
  {
    uint64_t v144 = 20;
  }
  else
  {
    uint64_t v140 = 0;
    uint64_t v141 = 4 * v118;
    int v142 = v14 + 392;
    do
    {
      uint64_t v143 = v140;
      *v142++ = bswap32(*(_DWORD *)&v178[v140]);
      v140 += 4;
    }
    while (v141 != v140);
    uint64_t v144 = (v143 + 24) & 0xFFFFFFFCLL;
  }
  if ((__int16)v124 >= 1)
  {
    uint64_t v145 = v14 + 464;
    long long v146 = &buf[v144 + 3];
    do
    {
      *v145++ = bswap32(*(_DWORD *)(v146 - 3));
      v146 += 4;
      --v124;
    }
    while (v124);
  }
LABEL_228:
  unsigned int v40 = (__int16 *)*((void *)v14 + 67);
LABEL_229:
  uint64_t v147 = *((unsigned __int16 *)v14 + 264);
  if (*((_WORD *)v14 + 264))
  {
    uint64_t v148 = *((void *)v14 + 77);
    uint64_t v149 = v40;
    do
    {
      uint64_t v150 = *v149;
      v149 += 12;
      v148 += v150;
      --v147;
    }
    while (v147);
    *((void *)v14 + 77) = v148;
  }
  *((void *)v14 + 76) = *((void *)v40 + 2);
  int v151 = *((unsigned __int16 *)v14 + 272);
  if ((v151 - 49164) > 4 || ((1 << (v151 - 12)) & 0x13) == 0)
  {
    uint64_t v153 = 0;
  }
  else
  {
    uint64_t v153 = IAAMalloc(0xE14uLL);
    if (v153)
    {
      if (v151 == 49168)
      {
        int v154 = 3;
LABEL_244:
        *(_DWORD *)uint64_t v153 = v154;
      }
      else
      {
        int v154 = 49165;
        if (v151 == 49165) {
          goto LABEL_244;
        }
        if (v151 == 49164)
        {
          int v154 = 4;
          goto LABEL_244;
        }
      }
    }
  }
  uint64_t v3 = 0;
  *((void *)v14 + 81) = v153;
  *((void *)v14 + 75) = -1;
  this[80].i64[1] = (uint64_t)v14;
  return v3;
}

void AudibleAudioFile::~AudibleAudioFile(AudibleAudioFile *this)
{
  AudioFileObject::~AudioFileObject(this);
  JUMPOUT(0x192FC8940);
}

void AudibleAudioFormat::New(AudibleAudioFormat *this)
{
}

uint64_t AudibleAudioFormat::GetAvailableStreamDescriptions(AudibleAudioFormat *this, int a2, unsigned int *a3, void *__dst)
{
  if (a2 == 778924083 || a2 == 1096107074)
  {
    uint64_t v8 = 0;
    memset(v7, 0, sizeof(v7));
    DWORD2(v7[0]) = a2;
    if (*a3 >= 0x28) {
      size_t v5 = 40;
    }
    else {
      size_t v5 = 0;
    }
    *a3 = v5;
    if (__dst) {
      memcpy(__dst, v7, v5);
    }
    return 0;
  }
  else
  {
    *a3 = 0;
    return 1718449215;
  }
}

uint64_t AudibleAudioFormat::GetAvailableFormatIDs(AudibleAudioFormat *this, unsigned int *a2, void *__dst)
{
  uint64_t __src = 0x415544422E6D7033;
  unsigned int v3 = *a2 >> 2;
  if (v3 >= 2) {
    unsigned int v3 = 2;
  }
  size_t v4 = 4 * v3;
  *a2 = v4;
  if (__dst) {
    memcpy(__dst, &__src, v4);
  }
  return 0;
}

void AudibleAudioFormat::GetFileTypeName(AudibleAudioFormat *this, const __CFString **a2)
{
  CABundleLocker::CABundleLocker((CABundleLocker *)&v5);
  unsigned int v3 = (__CFBundle *)sAudioToolboxBundle;
  if (sAudioToolboxBundle == -1)
  {
    pthread_once(&sOnce, InitGetAudioToolboxBundle);
    unsigned int v3 = (__CFBundle *)sAudioToolboxBundle;
    if (sAudioToolboxBundle) {
      goto LABEL_3;
    }
LABEL_5:
    CFStringRef v4 = @"AUDB";
    goto LABEL_6;
  }
  if (!sAudioToolboxBundle) {
    goto LABEL_5;
  }
LABEL_3:
  CFStringRef v4 = CFBundleCopyLocalizedString(v3, @"AUDB", @"AUDB", @"FileTypeNames");
LABEL_6:
  *a2 = v4;
  CABundleLocker::~CABundleLocker((CABundleLocker *)&v5);
}

void sub_1900BE9BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

const __CFArray *AudibleAudioFormat::GetUTIs(AudibleAudioFormat *this, const __CFArray **a2)
{
  v4[1] = *(const void **)MEMORY[0x1E4F143B8];
  v4[0] = @"com.audible.aa-audiobook";
  CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v4, 1, MEMORY[0x1E4F1D510]);
  *a2 = result;
  return result;
}

const __CFArray *AudibleAudioFormat::GetExtensions(AudibleAudioFormat *this, const __CFArray **a2)
{
  v4[1] = *(const void **)MEMORY[0x1E4F143B8];
  v4[0] = @"aa";
  CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v4, 1, MEMORY[0x1E4F1D510]);
  *a2 = result;
  return result;
}

uint64_t AudibleAudioFormat::CanWrite(AudibleAudioFormat *this)
{
  return 0;
}

BOOL AudibleAudioFormat::FileDataIsThisFormat(AudibleAudioFormat *this, unsigned int a2, _DWORD *a3)
{
  return a2 >= 8 && a3[1] == 913674327;
}

BOOL AudibleAudioFormat::ExtensionIsThisFormat(AudibleAudioFormat *this, CFStringRef theString1)
{
  return CFStringCompare(theString1, @"aa", 1uLL) == kCFCompareEqualTo;
}

void AudibleAudioFormat::~AudibleAudioFormat(AudibleAudioFormat *this)
{
}

uint64_t AT::TBitstreamWriter<unsigned short>::PutBits(uint64_t result, int a2, unsigned int a3)
{
  unsigned int v3 = a2 & ~(-1 << a3);
  int v4 = *(_DWORD *)(result + 28);
  if (*(_DWORD *)(result + 32))
  {
    int v5 = v4 - 8;
    if (v4 - 8 <= a3)
    {
      int v6 = *(unsigned __int16 *)(result + 24);
      do
      {
        a3 -= v5;
        char v7 = (v6 << v5) | ((unsigned __int16)v3 >> a3);
        uint64_t v8 = *(unsigned char **)(result + 8);
        *(void *)(result + 8) = v8 + 1;
        unsigned char *v8 = v7;
        int v9 = *(_DWORD *)(result + 32) - 1;
        *(_WORD *)(result + 24) = 0;
        int v4 = 16;
        *(_DWORD *)(result + 28) = 16;
        *(_DWORD *)(result + 32) = v9;
        v3 &= ~(-1 << a3);
        if (a3 < 8) {
          break;
        }
        int v6 = 0;
        int v5 = 8;
      }
      while (v9);
    }
    if (a3)
    {
      *(_WORD *)(result + 24) = v3 | (*(unsigned __int16 *)(result + 24) << a3);
      *(_DWORD *)(result + 28) = v4 - a3;
    }
  }
  else
  {
    *(_DWORD *)(result + 28) = v4 - a3;
    if ((int)(v4 - a3) < 1)
    {
      int v10 = *(unsigned __int16 *)(result + 24);
      unsigned int v11 = (v10 << v4) | (v3 >> (a3 - v4));
      int v12 = v3 | (v10 << a3);
      if (v4 == a3) {
        unsigned int v11 = v12;
      }
      *(_WORD *)(result + 24) = v11;
      uint64_t v13 = *(_WORD **)(result + 8);
      if ((uint64_t)(*(void *)(result + 16) - (void)v13) >= 2)
      {
        *uint64_t v13 = bswap32(v11) >> 16;
        int v14 = *(_DWORD *)(result + 28);
        *(_WORD *)(result + 24) = v3 & ~(unsigned __int16)(-1 << -(char)v14);
        *(_DWORD *)(result + 28) = v14 + 16;
        uint64_t v13 = *(_WORD **)(result + 8);
      }
      *(void *)(result + 8) = v13 + 1;
    }
    else
    {
      *(_WORD *)(result + 24) = v3 | (*(_WORD *)(result + 24) << a3);
    }
  }
  return result;
}

uint64_t SerializeTrackLoudnessData(const __CFDictionary *a1, unsigned __int8 *a2, unsigned __int16 a3, int a4, int a5)
{
  char v5 = a5;
  *(void *)uint64_t v52 = 0;
  CFDictionaryRef v53 = a1;
  __int16 v54 = 0;
  *(void *)a2 = 0;
  a2[8] = 0;
  *(void *)&long long v49 = a2;
  *((void *)&v49 + 1) = a2;
  *(void *)&long long v50 = &a2[a4];
  WORD4(v50) = 0;
  if (a5) {
    CFStringRef v7 = @"album loudness parameters";
  }
  else {
    CFStringRef v7 = @"main loudness parameters";
  }
  HIDWORD(v50) = 16;
  LODWORD(v51) = a2 & 1;
  if (!CACFDictionary::HasKey((CACFDictionary *)&v53, v7))
  {
    uint64_t v19 = 0;
    goto LABEL_104;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  __int16 v48 = 257;
  AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)&v49, 0, 2u);
  AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)&v49, 1, 6u);
  CACFDictionary::GetCACFDictionary((CACFDictionary *)&v53, v7, (CACFDictionary *)&Mutable);
  AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)&v49, 0, 2u);
  int UInt32 = CACFDictionary::GetUInt32((CACFDictionary *)&Mutable, @"aa EQ Set ID", v52);
  unsigned __int16 v9 = v52[0];
  if (!UInt32) {
    unsigned __int16 v9 = 0;
  }
  AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)&v49, v9, 6u);
  AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)&v49, 0, 3u);
  int v10 = CACFDictionary::GetUInt32((CACFDictionary *)&Mutable, @"aa downmix ID", v52);
  unsigned __int16 v11 = v52[0];
  if (!v10) {
    unsigned __int16 v11 = 0;
  }
  AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)&v49, v11, 7u);
  int v12 = CACFDictionary::GetUInt32((CACFDictionary *)&Mutable, @"aa DRC Set", v52);
  unsigned __int16 v13 = v52[0];
  if (!v12) {
    unsigned __int16 v13 = 0;
  }
  AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)&v49, v13, 6u);
  if (CACFDictionary::GetFloat32((CACFDictionary *)&Mutable, @"aa itu sample peak", (float *)&v52[1]))
  {
    float v14 = *(float *)&v52[1];
    if (*(float *)&v52[1] < -107.97) {
      float v14 = -107.97;
    }
    float v15 = (float)(20.0 - v14) * 32.0;
    BOOL v16 = v14 <= 19.969;
    float v17 = 1.0;
    if (v16) {
      float v17 = v15;
    }
    unsigned __int16 v18 = llroundf(v17);
  }
  else
  {
    unsigned __int16 v18 = 0;
  }
  AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)&v49, v18, 0xCu);
  if (CACFDictionary::GetFloat32((CACFDictionary *)&Mutable, @"aa itu true peak", (float *)&v52[1]))
  {
    float v20 = *(float *)&v52[1];
    if (*(float *)&v52[1] < -107.97) {
      float v20 = -107.97;
    }
    float v21 = (float)(20.0 - v20) * 32.0;
    BOOL v16 = v20 <= 19.969;
    float v22 = 1.0;
    if (v16) {
      float v22 = v21;
    }
    unsigned __int16 v23 = llroundf(v22);
  }
  else
  {
    unsigned __int16 v23 = 0;
  }
  AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)&v49, v23, 0xCu);
  if (CACFDictionary::GetUInt32((CACFDictionary *)&Mutable, @"aa true peak measurement system", v52))
  {
    unsigned __int16 v24 = v52[0];
    if (v52[0] >= 0xC) {
      goto LABEL_34;
    }
  }
  else
  {
    unsigned __int16 v24 = 2;
  }
  AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)&v49, v24, 4u);
  unsigned int v46 = 0;
  if (CACFDictionary::GetUInt32((CACFDictionary *)&Mutable, @"aa true peak reliability", &v46))
  {
    unsigned __int16 v25 = v46;
    if (v46 > 3)
    {
LABEL_34:
      CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
      uint64_t v19 = 1;
      goto LABEL_104;
    }
  }
  else
  {
    unsigned __int16 v25 = 3;
  }
  AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)&v49, v25, 4u);
  AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)&v49, a3, 8u);
  v44[0] = v49;
  v44[1] = v50;
  uint64_t v45 = v51;
  *(void *)__int16 v58 = 0;
  if (v5)
  {
    int v26 = (const __CFString **)&kLoudnessInfoDictionary_AlbumLoudnessParametersKey;
LABEL_54:
    CFStringRef v30 = *v26;
    if (CACFDictionary::HasKey((CACFDictionary *)&v53, *v26))
    {
      CFMutableDictionaryRef v56 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      __int16 v57 = 257;
      CACFDictionary::GetCACFDictionary((CACFDictionary *)&v53, v30, (CACFDictionary *)&v56);
      {
        FillLoudnessMethodsFromLIDNew(CACFDictionary const*,AT::TBitstreamWriter<unsigned short>,BOOL)::loudnessMethodKeysArray[0] = @"aa itu loudness";
        unk_1E92996B0 = @"aa ebu top of loudness range";
        qword_1E92996B8 = @"aa ebu max momentary loudness";
        unk_1E92996C0 = @"aa ebu max short-term loudness";
        qword_1E92996C8 = @"aa ebu loudness range";
        unk_1E92996D0 = @"aa production mixing level";
        qword_1E92996D8 = @"aa production room type";
        unk_1E92996E0 = @"aa short term loudness";
      }
      {
        FillLoudnessMethodsFromLIDNew(CACFDictionary const*,AT::TBitstreamWriter<unsigned short>,BOOL)::loudnessMethodMeasurementSystemArray[0] = @"aa itu measurement system";
        *(void *)algn_1E92996F8 = @"aa ebu top measurement system";
        qword_1E9299700 = @"aa ebu max measurement system";
        unk_1E9299708 = @"aa ebu short measurement system";
        qword_1E9299710 = @"aa ebu measurement system";
        unk_1E9299718 = @"aa production mixing level measurement system";
        qword_1E9299720 = @"aa production room type measurement system";
        unk_1E9299728 = @"aa short term loudness measurement system";
      }
      {
        FillLoudnessMethodsFromLIDNew(CACFDictionary const*,AT::TBitstreamWriter<unsigned short>,BOOL)::loudnessMethodReliabilityArray[0] = @"aa itu reliability";
        unk_1E9299740 = @"aa ebu top reliability";
        qword_1E9299748 = @"aa ebu max reliability";
        unk_1E9299750 = @"aa ebu short reliability";
        qword_1E9299758 = @"aa ebu reliability";
        unk_1E9299760 = @"aa production mixing level reliability";
        qword_1E9299768 = @"aa production room type reliability";
        unk_1E9299770 = @"aa short term loudness reliability";
      }
      for (unint64_t i = 0; i != 8; ++i)
      {
        if (CACFDictionary::HasKey((CACFDictionary *)&v56, (const __CFString *)FillLoudnessMethodsFromLIDNew(CACFDictionary const*,AT::TBitstreamWriter<unsigned short>,BOOL)::loudnessMethodKeysArray[i]))
        {
          AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)v44, FillLoudnessMethodsFromLIDNew(CACFDictionary const*,AT::TBitstreamWriter<unsigned short>,BOOL)::loudnessMethodDefinitionArray[i], 8u);
          if (i <= 3)
          {
            CACFDictionary::GetFloat32((CACFDictionary *)&v56, (const __CFString *)FillLoudnessMethodsFromLIDNew(CACFDictionary const*,AT::TBitstreamWriter<unsigned short>,BOOL)::loudnessMethodKeysArray[i], (float *)&v58[1]);
            if (*(float *)&v58[1] >= -57.75)
            {
              if (*(float *)&v58[1] <= 6.0) {
                int v32 = llroundf((float)(*(float *)&v58[1] + 57.75) * 4.0);
              }
              else {
                int v32 = 255;
              }
            }
            else
            {
              int v32 = 0;
            }
            AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)v44, v32, 8u);
          }
          switch((int)i)
          {
            case 4:
              CACFDictionary::GetFloat32((CACFDictionary *)&v56, (const __CFString *)FillLoudnessMethodsFromLIDNew(CACFDictionary const*,AT::TBitstreamWriter<unsigned short>,BOOL)::loudnessMethodKeysArray[i], (float *)&v58[1]);
              unsigned __int16 v33 = CompressLoudnessRange(*(float *)&v58[1]);
              goto LABEL_80;
            case 5:
              CACFDictionary::GetFloat32((CACFDictionary *)&v56, (const __CFString *)FillLoudnessMethodsFromLIDNew(CACFDictionary const*,AT::TBitstreamWriter<unsigned short>,BOOL)::loudnessMethodKeysArray[i], (float *)&v58[1]);
              if (*(float *)&v58[1] < 80.0) {
                goto LABEL_74;
              }
              if (*(float *)&v58[1] > 111.0)
              {
                unsigned __int16 v33 = 31;
                goto LABEL_80;
              }
              float v34 = *(float *)&v58[1] + -80.0;
              goto LABEL_79;
            case 6:
              CACFDictionary::GetUInt32((CACFDictionary *)&v56, (const __CFString *)FillLoudnessMethodsFromLIDNew(CACFDictionary const*,AT::TBitstreamWriter<unsigned short>,BOOL)::loudnessMethodKeysArray[i], v58);
              unsigned __int16 v33 = v58[0];
              goto LABEL_80;
            case 7:
              CACFDictionary::GetFloat32((CACFDictionary *)&v56, (const __CFString *)FillLoudnessMethodsFromLIDNew(CACFDictionary const*,AT::TBitstreamWriter<unsigned short>,BOOL)::loudnessMethodKeysArray[i], (float *)&v58[1]);
              if (*(float *)&v58[1] >= -116.0)
              {
                if (*(float *)&v58[1] <= 11.5)
                {
                  float v34 = (float)(*(float *)&v58[1] + 116.0) + (float)(*(float *)&v58[1] + 116.0);
LABEL_79:
                  unsigned __int16 v33 = llroundf(v34);
                }
                else
                {
                  unsigned __int16 v33 = 255;
                }
              }
              else
              {
LABEL_74:
                unsigned __int16 v33 = 0;
              }
LABEL_80:
              AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)v44, v33, 8u);
LABEL_81:
              if (CACFDictionary::GetUInt32((CACFDictionary *)&v56, (const __CFString *)FillLoudnessMethodsFromLIDNew(CACFDictionary const*,AT::TBitstreamWriter<unsigned short>,BOOL)::loudnessMethodMeasurementSystemArray[i], v58))
              {
                if (v58[0] > 0xB) {
                  goto LABEL_50;
                }
                AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)v44, LOWORD(v58[0]), 4u);
                unsigned int v55 = 0;
                if (CACFDictionary::GetUInt32((CACFDictionary *)&v56, (const __CFString *)FillLoudnessMethodsFromLIDNew(CACFDictionary const*,AT::TBitstreamWriter<unsigned short>,BOOL)::loudnessMethodReliabilityArray[i], &v55))
                {
                  unsigned __int16 v35 = v55;
                  if (v55 > 3) {
                    goto LABEL_50;
                  }
                }
                else if (v58[0] - 1 > 5)
                {
                  unsigned __int16 v35 = 0;
                }
                else
                {
                  unsigned __int16 v35 = word_1901DAE3C[v58[0] - 1];
                }
                int v38 = v35;
              }
              else
              {
                if i <= 7 && ((0x9Fu >> i))
                {
                  int v36 = word_1901C6790[i];
                  int v37 = 3;
                }
                else
                {
                  int v36 = 0;
                  int v37 = 0;
                }
                AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)v44, v36, 4u);
                int v38 = v37;
              }
              AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)v44, v38, 4u);
              break;
            default:
              goto LABEL_81;
          }
        }
      }
      CACFDictionary::~CACFDictionary((CACFDictionary *)&v56);
    }
    uint64_t v19 = 0;
    goto LABEL_99;
  }
  if (!CACFDictionary::HasKey((CACFDictionary *)&v53, @"dialogue anchor parameters"))
  {
LABEL_53:
    int v26 = (const __CFString **)&kLoudnessInfoDictionary_MainLoudnessParametersKey;
    goto LABEL_54;
  }
  CFMutableDictionaryRef v56 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  __int16 v57 = 257;
  CACFDictionary::GetCACFDictionary((CACFDictionary *)&v53, @"dialogue anchor parameters", (CACFDictionary *)&v56);
  CACFDictionary::GetFloat32((CACFDictionary *)&v56, @"aa itu loudness", (float *)&v58[1]);
  AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)v44, 2, 8u);
  if (*(float *)&v58[1] >= -57.75)
  {
    if (*(float *)&v58[1] <= 6.0) {
      int v27 = llroundf((float)(*(float *)&v58[1] + 57.75) * 4.0);
    }
    else {
      int v27 = 255;
    }
  }
  else
  {
    int v27 = 0;
  }
  AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)v44, v27, 8u);
  if (CACFDictionary::GetUInt32((CACFDictionary *)&v53, @"aa anchor measurement system", v58))
  {
    unsigned __int16 v28 = v58[0];
    if (v58[0] >= 0xC) {
      goto LABEL_50;
    }
  }
  else
  {
    unsigned __int16 v28 = 0;
  }
  AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)v44, v28, 4u);
  unsigned int v55 = 0;
  if (!CACFDictionary::GetUInt32((CACFDictionary *)&v53, @"aa anchor reliability", &v55))
  {
    unsigned __int16 v29 = 3;
    goto LABEL_52;
  }
  unsigned __int16 v29 = v55;
  if (v55 <= 3)
  {
LABEL_52:
    AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)v44, v29, 4u);
    CACFDictionary::~CACFDictionary((CACFDictionary *)&v56);
    goto LABEL_53;
  }
LABEL_50:
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v56);
  uint64_t v19 = 1;
LABEL_99:
  CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  int v39 = HIDWORD(v50);
  if ((BYTE12(v50) & 7) != 0)
  {
    AT::TBitstreamWriter<unsigned short>::PutBits((uint64_t)&v49, 0, BYTE12(v50) & 7);
    int v39 = HIDWORD(v50);
  }
  if (v39 != 16)
  {
    unsigned int v40 = (unsigned char *)*((void *)&v49 + 1);
    unsigned int v41 = WORD4(v50);
    int v42 = 8 - v39;
    do
    {
      *v40++ = v41 >> v42;
      v42 -= 8;
    }
    while (v42 != -8);
  }
LABEL_104:
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v53);
  return v19;
}

void sub_1900BF610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t ExpandLegacyLoudnessBox(CACFDictionary *a1, uint64_t a2, float *a3, unsigned char *a4)
{
  unsigned int v4 = *(unsigned __int16 *)(a2 + 6);
  if (v4 == 0xFFFF) {
    return 0xFFFFFFFFLL;
  }
  int v9 = bswap32(v4);
  float v10 = -(float)((float)(HIWORD(v9) & 0x7FFF) * 0.0039062);
  if (v9 >> 16 >= 0) {
    float v10 = (float)(HIWORD(v9) & 0x7FFF) * 0.0039062;
  }
  CACFDictionary::AddFloat32(a1, @"aa itu true peak", v10);
  if (*(unsigned char *)(a2 + 10))
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      unsigned __int16 v13 = (unsigned __int8 *)(*(void *)(a2 + 16) + v11);
      unsigned int v14 = v13[1];
      int v15 = *v13;
      if (v15 == 6)
      {
        if (v14 > 0x80)
        {
          float v16 = (float)(int)(v14 - 204) + 70.0;
          if (v14 <= 0xCC) {
            float v16 = (float)((float)(int)(v14 - 128) * 0.5) + 32.0;
          }
        }
        else
        {
          float v16 = (float)v14 * 0.25;
        }
        float v17 = a1;
        CFStringRef v18 = @"aa ebu loudness range";
LABEL_14:
        CACFDictionary::AddFloat32(v17, v18, v16);
      }
      else
      {
        float v16 = (float)((float)v14 * -0.25) + 6.0;
        switch(v15)
        {
          case 1:
            float v17 = a1;
            CFStringRef v18 = @"aa ebu top of loudness range";
            goto LABEL_14;
          case 2:
            float v17 = a1;
            CFStringRef v18 = @"aa ebu max momentary loudness";
            goto LABEL_14;
          case 3:
            float v17 = a1;
            CFStringRef v18 = @"aa ebu max short-term loudness";
            goto LABEL_14;
          case 4:
            float v17 = a1;
            CFStringRef v18 = @"aa itu loudness";
            goto LABEL_14;
          case 5:
            *a3 = v16;
            *a4 = 1;
            break;
          default:
            break;
        }
      }
      ++v12;
      v11 += 4;
    }
    while (v12 < *(unsigned __int8 *)(a2 + 10));
  }
  return 0;
}

CACFDictionary *ExpandLoudnessBox(CACFDictionary *this, uint64_t a2, float *a3, unsigned char *a4)
{
  CFStringRef v7 = this;
  if (*(_WORD *)(a2 + 4)) {
    this = (CACFDictionary *)CACFDictionary::AddFloat32(this, @"aa itu sample peak", (float)((float)*(unsigned __int16 *)(a2 + 4) * -0.03125) + 20.0);
  }
  if (*(_WORD *)(a2 + 6)) {
    this = (CACFDictionary *)CACFDictionary::AddFloat32(v7, @"aa itu true peak", (float)((float)*(unsigned __int16 *)(a2 + 6) * -0.03125) + 20.0);
  }
  if (*(unsigned char *)(a2 + 10))
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      float v10 = (unsigned char *)(*(void *)(a2 + 16) + v8);
      unsigned int v11 = v10[1];
      switch(*v10)
      {
        case 1:
          float v12 = (double)v11 * 0.25 + -57.75;
          unsigned __int16 v13 = v7;
          CFStringRef v14 = @"aa itu loudness";
          goto LABEL_24;
        case 2:
          float v15 = (double)v11 * 0.25 + -57.75;
          *a3 = v15;
          *a4 = 1;
          break;
        case 3:
          float v12 = (double)v11 * 0.25 + -57.75;
          unsigned __int16 v13 = v7;
          CFStringRef v14 = @"aa ebu top of loudness range";
          goto LABEL_24;
        case 4:
          float v12 = (double)v11 * 0.25 + -57.75;
          unsigned __int16 v13 = v7;
          CFStringRef v14 = @"aa ebu max momentary loudness";
          goto LABEL_24;
        case 5:
          float v12 = (double)v11 * 0.25 + -57.75;
          unsigned __int16 v13 = v7;
          CFStringRef v14 = @"aa ebu max short-term loudness";
          goto LABEL_24;
        case 6:
          if (v11 > 0x80)
          {
            float v12 = (float)(int)(v11 - 204) + 70.0;
            if (v11 <= 0xCC) {
              float v12 = (float)((float)(int)(v11 - 128) * 0.5) + 32.0;
            }
          }
          else
          {
            float v12 = (float)v11 * 0.25;
          }
          unsigned __int16 v13 = v7;
          CFStringRef v14 = @"aa ebu loudness range";
          goto LABEL_24;
        case 7:
          if (v11 >= 0x1F) {
            int v16 = 31;
          }
          else {
            int v16 = v10[1];
          }
          float v12 = (float)(v16 + 80);
          unsigned __int16 v13 = v7;
          CFStringRef v14 = @"aa production mixing level";
          goto LABEL_24;
        case 8:
          this = (CACFDictionary *)CACFDictionary::AddUInt32(v7, @"aa production room type");
          break;
        case 9:
          float v12 = (float)((float)v11 * 0.5) + -116.0;
          unsigned __int16 v13 = v7;
          CFStringRef v14 = @"aa short term loudness";
LABEL_24:
          this = (CACFDictionary *)CACFDictionary::AddFloat32(v13, v14, v12);
          break;
        default:
          break;
      }
      ++v9;
      v8 += 4;
    }
    while (v9 < *(unsigned __int8 *)(a2 + 10));
  }
  return this;
}

BOOL FindCanonicalLoudness(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = -1431655765 * ((unint64_t)(a2 - a1) >> 3);
  if (v3)
  {
    uint64_t v5 = 0;
    BOOL v6 = 1;
    while (1)
    {
      uint64_t v7 = *(void *)(a1 + 24 * v5);
      uint64_t v8 = -858993459 * ((unint64_t)(*(void *)(a1 + 24 * v5 + 8) - v7) >> 3);
      if (v8) {
        break;
      }
LABEL_20:
      BOOL v6 = ++v5 < v3;
      if (v5 == v3) {
        return 0;
      }
    }
    uint64_t v9 = 0;
    float v10 = *(unsigned __int8 **)(a1 + 24 * v5);
    while (1)
    {
      int v11 = *v10;
      if (v11 == 63 || v11 == 0)
      {
        int v13 = v10[1];
        if (v13 == 127 || v13 == 0)
        {
          int v15 = v10[2];
          if (v15 == 63 || v15 == 0) {
            break;
          }
        }
      }
      ++v9;
      v10 += 40;
      if (v8 == v9) {
        goto LABEL_20;
      }
    }
    uint64_t v17 = *(void *)v10;
    *(_DWORD *)(a3 + 7) = *(_DWORD *)(v10 + 7);
    *(void *)a3 = v17;
    if (v10 != (unsigned __int8 *)a3)
    {
      uint64_t v18 = v7 + 40 * v9;
      float v20 = (void *)(a3 + 16);
      uint64_t v19 = *(char **)(a3 + 16);
      float v21 = *(char **)(v18 + 16);
      float v22 = *(unsigned char **)(v18 + 24);
      size_t v23 = v22 - v21;
      unint64_t v24 = (v22 - v21) >> 2;
      uint64_t v25 = *(void *)(a3 + 32);
      if (v24 <= (v25 - (uint64_t)v19) >> 2)
      {
        unsigned __int16 v28 = (void **)(a3 + 24);
        CFStringRef v30 = *(unsigned char **)(a3 + 24);
        unint64_t v31 = (v30 - v19) >> 2;
        if (v31 < v24)
        {
          int v32 = &v21[4 * v31];
          if (v30 != v19)
          {
            memmove(v19, v21, v30 - v19);
            uint64_t v19 = (char *)*v28;
          }
          size_t v23 = v22 - v32;
          if (v22 == v32) {
            goto LABEL_41;
          }
          unsigned __int16 v33 = v19;
          float v34 = v32;
          goto LABEL_40;
        }
      }
      else
      {
        if (v19)
        {
          *(void *)(a3 + 24) = v19;
          operator delete(v19);
          uint64_t v25 = 0;
          *float v20 = 0;
          *(void *)(a3 + 24) = 0;
          *(void *)(a3 + 32) = 0;
        }
        if ((v23 & 0x8000000000000000) != 0) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = v25 >> 1;
        if (v25 >> 1 <= v24) {
          uint64_t v26 = (v22 - v21) >> 2;
        }
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v26;
        }
        std::vector<float>::__vallocate[abi:ne180100]((void *)(a3 + 16), v27);
        unsigned __int16 v29 = *(char **)(a3 + 24);
        unsigned __int16 v28 = (void **)(a3 + 24);
        uint64_t v19 = v29;
      }
      if (v22 == v21)
      {
LABEL_41:
        *unsigned __int16 v28 = &v19[v23];
        return v6;
      }
      unsigned __int16 v33 = v19;
      float v34 = v21;
LABEL_40:
      memmove(v33, v34, v23);
      goto LABEL_41;
    }
  }
  else
  {
    return 0;
  }
  return v6;
}

uint64_t MP4BoxParser_TrackHeader::Init(MP4BoxParser **this)
{
  uint64_t result = MP4BoxParser_Full::Initialize((MP4BoxParser_Full *)this);
  if (!result)
  {
    if (*((_DWORD *)this + 5) != 1953196132) {
      return 4294967294;
    }
    if (*((unsigned char *)this + 56))
    {
      if (*((unsigned char *)this + 56) != 1) {
        return 0xFFFFFFFFLL;
      }
      uint64_t v3 = 16;
    }
    else
    {
      uint64_t v3 = 8;
    }
    uint64_t v4 = v3 + (*((unsigned int (**)(MP4BoxParser **))*this + 3))(this);
    uint64_t result = MP4BoxParser::ReadDataSourceBytes(this[1], v4, 4uLL, (char *)this + 60);
    if (!result) {
      *((_DWORD *)this + 15) = bswap32(*((_DWORD *)this + 15));
    }
  }
  return result;
}

void MP4BoxParser_TrackHeader::~MP4BoxParser_TrackHeader(MP4BoxParser_TrackHeader *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDF8DA18;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  JUMPOUT(0x192FC8940);
}

{
  uint64_t v2;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDF8DA18;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

uint64_t MP4BoxParser_Movie::Init(MP4BoxParser_Movie *this)
{
  uint64_t result = MP4BoxParser::Initialize(this);
  if (!result)
  {
    if (*((_DWORD *)this + 5) == 1836019574)
    {
      if (*((unsigned char *)this + 56)) {
        operator new();
      }
      return 0;
    }
    else
    {
      return 4294967294;
    }
  }
  return result;
}

void MP4BoxParser_Movie::~MP4BoxParser_Movie(MP4BoxParser_Movie *this)
{
  MP4BoxParser_Movie::~MP4BoxParser_Movie(this);
  JUMPOUT(0x192FC8940);
}

{
  uint64_t v2;
  uint64_t v3;

  *(void *)this = off_1EDF92718;
  if (*((unsigned char *)this + 56))
  {
    uint64_t v2 = *((void *)this + 8);
    if (v2)
    {
      std::__list_imp<MP4BoxInfo>::clear(*((uint64_t **)this + 8));
      MEMORY[0x192FC8940](v2, 0x1020C4062D53EE8);
    }
  }
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EDF8DA18;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
}

void MP4BoxParser_Movie::MP4BoxParser_Movie(MP4BoxParser_Movie *this, DataSource *a2, uint64_t a3)
{
  *(void *)this = &unk_1EDF8DA18;
  (*(void (**)(DataSource *, uint64_t))(*(void *)a2 + 88))(a2, a3);
  *((unsigned char *)this + 16) = 0;
  *((_DWORD *)this + 5) = 0;
  *((void *)this + 3) = 0;
  *((unsigned char *)this + 32) = 0;
  *((_DWORD *)this + 9) = 8;
  *(void *)this = off_1EDF92718;
  *((unsigned char *)this + 56) = 1;
  *((void *)this + 8) = 0;
}

void *MP4BoxParser_Movie::GetAudioTrackData(MP4BoxParser_Movie *this, unsigned int a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)this + 8);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = *(void *)(v4 + 8);
  if (v5 == v4) {
    return 0;
  }
  unsigned int v10 = 0;
  do
  {
    if (*(_DWORD *)(v5 + 16) == 1953653099) {
      ++v10;
    }
    uint64_t v5 = *(void *)(v5 + 8);
  }
  while (v5 != v4);
  if (v10 <= a2) {
    return 0;
  }
  int v11 = 0;
  int v12 = 0;
  while (1)
  {
    uint64_t v13 = *((void *)this + 8);
    uint64_t v14 = *(void *)(v13 + 8);
    if (v14 != v13) {
      break;
    }
LABEL_21:
    if (++v11 == v10) {
      return 0;
    }
  }
  int v15 = 0;
  while (*(_DWORD *)(v14 + 16) != 1953653099)
  {
LABEL_14:
    uint64_t v14 = *(void *)(v14 + 8);
    if (v14 == v13) {
      goto LABEL_21;
    }
  }
  if (v15 != v11)
  {
    ++v15;
    goto LABEL_14;
  }
  MP4BoxParser_Track::MP4BoxParser_Track((uint64_t)v23, *((void *)this + 1), *(void *)(v14 + 32), *(void *)(v14 + 40), v11);
  if (MP4BoxParser_Track::Init((MP4BoxParser_Track *)v23)
    || MP4BoxParser_Track::GetTrackType((MP4BoxParser_Track *)v23) != 1936684398)
  {
LABEL_20:
    MP4BoxParser_Track::~MP4BoxParser_Track((MP4BoxParser_Track *)v23);
    goto LABEL_21;
  }
  if (v12 != a2)
  {
    ++v12;
    goto LABEL_20;
  }
  unsigned int v18 = v24;
  size_t v19 = v24;
  float v20 = malloc_type_malloc(v24, 0x2C8E6D5CuLL);
  int v16 = v20;
  if (v19 && !v20)
  {
    exceptiouint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    float v22 = std::bad_alloc::bad_alloc(exception);
  }
  bzero(v20, v19);
  if (MP4BoxParser::ReadDataSourceBytes(*((MP4BoxParser **)this + 1), *(void *)(v14 + 32), v19, v16))
  {
    free(v16);
    int v16 = 0;
  }
  else
  {
    *a3 = v18;
    *a4 = v11;
  }
  MP4BoxParser_Track::~MP4BoxParser_Track((MP4BoxParser_Track *)v23);
  return v16;
}

void sub_1900C0324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t MP4BoxParser::Initialize(MP4BoxParser *this)
{
  if (*((unsigned char *)this + 16)) {
    return 0;
  }
  uint64_t v3 = (MP4BoxParser *)*((void *)this + 1);
  if (!v3) {
    return 0xFFFFFFFFLL;
  }
  *((_DWORD *)this + 9) = 8;
  uint64_t result = MP4BoxParser::ReadDataSourceBytes(v3, 0, 8uLL, v8);
  if (result) {
    return result;
  }
  unsigned int v4 = v8[0];
  unsigned int v5 = bswap32(v8[1]);
  *((void *)this + 3) = bswap32(v8[0]);
  *((_DWORD *)this + 5) = v5;
  if (v4 == 0x1000000)
  {
    uint64_t result = MP4BoxParser::ReadDataSourceBytes(*((MP4BoxParser **)this + 1), 8, 8uLL, (char *)this + 24);
    if (result) {
      return result;
    }
    *((unsigned char *)this + 32) = 1;
    *((_DWORD *)this + 9) = 16;
    *((void *)this + 3) = bswap64(*((void *)this + 3));
  }
  uint64_t v9 = 0;
  if (MP4BoxParser::GetDataSourceSize(*((MP4BoxParser **)this + 1), &v9)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = *((void *)this + 3);
  uint64_t v7 = *((unsigned int *)this + 9);
  if (v6 < (unint64_t)v7 || v9 < v7) {
    return 0xFFFFFFFFLL;
  }
  if (v6 <= v9) {
    (*(void (**)(void))(**((void **)this + 1) + 32))(*((void *)this + 1));
  }
  else {
    *((void *)this + 3) = v9;
  }
  if (*((_DWORD *)this + 5) != 1970628964)
  {
LABEL_19:
    uint64_t result = 0;
    *((unsigned char *)this + 16) = 1;
    return result;
  }
  uint64_t result = MP4BoxParser::ReadDataSourceBytes(*((MP4BoxParser **)this + 1), *((unsigned int *)this + 9), 0x10uLL, (char *)this + 40);
  if (!result)
  {
    *((_DWORD *)this + 9) += 16;
    goto LABEL_19;
  }
  return result;
}

uint64_t MP4BoxParser::ReadDataSourceBytes(MP4BoxParser *this, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (!this)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      unsigned int v10 = "MP4_BoxParser.cpp";
      __int16 v11 = 1024;
      int v12 = 1086;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  no DataSource", buf, 0x12u);
    }
    __break(1u);
  }
  unsigned int v8 = 0;
  uint64_t v5 = (*(uint64_t (**)(MP4BoxParser *, void, uint64_t, unint64_t, void *, unsigned int *))(*(void *)this + 48))(this, 0, a2, a3, a4, &v8);
  if (v5)
  {
    uint64_t v6 = v5;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      unsigned int v10 = "MP4_BoxParser.cpp";
      __int16 v11 = 1024;
      int v12 = 1089;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  DataSource read failed", buf, 0x12u);
    }
  }
  else if (v8 >= a3)
  {
    return 0;
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      unsigned int v10 = "MP4_BoxParser.cpp";
      __int16 v11 = 1024;
      int v12 = 1090;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  DataSource read insufficient amount", buf, 0x12u);
    }
    return 0xFFFFFFFFLL;
  }
  return v6;
}

uint64_t MP4BoxParser::GetDataSourceSize(MP4BoxParser *this, uint64_t *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (!this)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v4 = 136315394;
      uint64_t v5 = "MP4_BoxParser.cpp";
      __int16 v6 = 1024;
      int v7 = 1098;
      _os_log_impl(&dword_18FEC0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  no DataSource", (uint8_t *)&v4, 0x12u);
    }
    __break(1u);
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)this + 24);
  return v2();
}

void MP4BoxParser::~MP4BoxParser(MP4BoxParser *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDF8DA18;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  JUMPOUT(0x192FC8940);
}

{
  uint64_t v2;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDF8DA18;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

uint64_t MP4BoxParser_Full::Initialize(MP4BoxParser_Full *this)
{
  uint64_t result = MP4BoxParser::Initialize(this);
  if (!result)
  {
    uint64_t result = MP4BoxParser::ReadDataSourceBytes(*((MP4BoxParser **)this + 1), *((unsigned int *)this + 9), 4uLL, &v3);
    if (!result)
    {
      *((unsigned char *)this + 56) = v3;
      *(_WORD *)((char *)this + 57) = v4;
      *((unsigned char *)this + 59) = v5;
    }
  }
  return result;
}

uint64_t NUMovieBox::SerializeToDataSource(unsigned int *a1, uint64_t a2, uint64_t a3, int a4, const void *a5, unsigned int a6, const void *a7, unsigned int a8, uint64_t a9, unsigned int *a10, unsigned int *a11, unsigned int *a12, void *a13, unsigned int a14, char a15)
{
  int v16 = a1 + 67;
  *(unsigned int *)((char *)a1 + 358) += a6;
  unsigned int v17 = *(unsigned int *)((char *)a1 + 350) + a6;
  *(unsigned int *)((char *)a1 + 350) = v17;
  unsigned int v18 = *(unsigned int *)((char *)a1 + 290) + a6;
  *(unsigned int *)((char *)a1 + 290) = v18;
  unsigned int v19 = a1[54] + a6;
  a1[54] = v19;
  unsigned int v20 = a14 + a6 + a1[29];
  a1[29] = v20;
  unsigned int v21 = a14 + a6 + a8 + *a1;
  *a1 = v21;
  if (a4) {
    *((unsigned char *)a1 + 366) = 1;
  }
  unsigned int v22 = a11;
  if (a9)
  {
    v20 += 36;
    a1[29] = v20;
    v21 += 36;
    *a1 = v21;
  }
  if (a10 || a11 || a12)
  {
    if (a10)
    {
      unsigned int v23 = 4 * bswap32(a10[3]) + 16;
      if (!a11)
      {
LABEL_11:
        unsigned int v24 = v22 + v23;
        if (a12) {
          unsigned int v25 = 8 * bswap32(a12[4]) + 20;
        }
        else {
          unsigned int v25 = 0;
        }
        unsigned int v26 = v24 + v25;
        *(unsigned int *)((char *)a1 + 350) = v26 + v17;
        *(unsigned int *)((char *)a1 + 290) = v26 + v18;
        a1[54] = v26 + v19;
        v20 += v26;
        a1[29] = v20;
        v21 += v26;
        *a1 = v21;
        goto LABEL_17;
      }
    }
    else
    {
      unsigned int v23 = 0;
      if (!a11) {
        goto LABEL_11;
      }
    }
    unsigned int v22 = 2 * bswap32(a11[5]) + 24;
    goto LABEL_11;
  }
LABEL_17:
  int8x8_t v27 = *(int8x8_t *)(a1 + 1);
  unsigned int v135 = a1[3];
  unsigned int v136 = a1[4];
  int8x16_t v134 = *(int8x16_t *)(a1 + 5);
  unsigned int v133 = a1[9];
  unsigned int v132 = *((unsigned __int16 *)a1 + 20);
  unsigned int v130 = *((unsigned __int16 *)a1 + 21);
  int8x16_t v131 = *(int8x16_t *)(a1 + 11);
  int8x16_t v128 = *(int8x16_t *)(a1 + 19);
  int8x16_t v129 = *(int8x16_t *)(a1 + 15);
  int8x16_t v127 = *(int8x16_t *)(a1 + 23);
  int8x8_t v28 = *(int8x8_t *)(a1 + 27);
  int8x8_t v29 = *(int8x8_t *)(a1 + 30);
  unsigned int v126 = a1[32];
  unsigned int v137 = a1[33];
  int8x16_t v125 = *(int8x16_t *)(a1 + 34);
  int8x8_t v30 = *(int8x8_t *)(a1 + 38);
  unsigned int v124 = a1[40];
  int8x8_t v31 = *(int8x8_t *)(a1 + 41);
  int8x16_t v121 = *(int8x16_t *)(a1 + 47);
  int8x16_t v123 = *(int8x16_t *)(a1 + 43);
  int8x8_t v32 = *(int8x8_t *)(a1 + 51);
  unsigned int v138 = a1[58];
  unsigned int v33 = *((unsigned __int16 *)a1 + 126);
  unsigned int v34 = *((unsigned __int16 *)a1 + 127);
  unsigned int v139 = a1[66];
  unsigned int v35 = a1[71];
  __int16 v140 = *((_WORD *)a1 + 144);
  int v141 = *(unsigned int *)((char *)a1 + 306);
  unsigned int v36 = *((unsigned __int16 *)a1 + 155);
  unsigned int v115 = *((unsigned __int16 *)a1 + 156);
  int v142 = *(unsigned int *)((char *)a1 + 330);
  unsigned int v118 = *(unsigned int *)((char *)a1 + 342);
  unsigned int v120 = a1[53];
  int v143 = *(unsigned int *)((char *)a1 + 346);
  int v144 = *(unsigned int *)((char *)a1 + 366);
  unsigned int v117 = *(unsigned int *)((char *)a1 + 370);
  __int32 v149 = *(unsigned int *)((char *)a1 + 382);
  unsigned int v147 = *(unsigned int *)((char *)a1 + 386);
  __int32 v153 = *(unsigned int *)((char *)a1 + 406);
  unsigned int v148 = *(unsigned int *)((char *)a1 + 410);
  unsigned int v151 = *(unsigned int *)((char *)a1 + 426);
  unsigned int v152 = *(unsigned int *)((char *)a1 + 422);
  unsigned int v37 = bswap32(*(unsigned int *)((char *)a1 + 434));
  if (v151 == 1937013298) {
    unsigned int v38 = *(unsigned int *)((char *)a1 + 434);
  }
  else {
    unsigned int v38 = v37;
  }
  unsigned int v154 = *(unsigned int *)((char *)a1 + 430);
  unsigned int v155 = v38;
  int8x16_t v103 = *(int8x16_t *)(a1 + 54);
  int8x16_t v105 = *(int8x16_t *)(a1 + 59);
  int8x8_t v39 = *(int8x8_t *)(a1 + 64);
  int8x16_t v107 = *(int8x16_t *)v16;
  int8x16_t v109 = *(int8x16_t *)((char *)a1 + 290);
  int8x8_t v40 = *(int8x8_t *)((char *)a1 + 334);
  int8x16_t v111 = *(int8x16_t *)((char *)a1 + 314);
  int8x16_t v113 = *(int8x16_t *)((char *)a1 + 350);
  int8x8_t v145 = *(int8x8_t *)((char *)a1 + 374);
  int8x8_t v146 = *(int8x8_t *)((char *)a1 + 398);
  unsigned int v150 = *(unsigned int *)((char *)a1 + 438);
  unsigned int v92 = *(unsigned int *)((char *)a1 + 450);
  unsigned int v93 = *(unsigned int *)((char *)a1 + 458);
  unsigned int v90 = *(unsigned int *)((char *)a1 + 454);
  unsigned int v91 = *(unsigned int *)((char *)a1 + 462);
  unsigned int v41 = (char *)malloc_type_malloc(v21, 0x2C8E6D5CuLL);
  int v42 = v41;
  if (v21 && !v41)
  {
    exceptiouint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    __int16 v89 = std::bad_alloc::bad_alloc(exception);
  }
  int8x16_t v104 = vrev32q_s8(v103);
  int8x16_t v106 = vrev32q_s8(v105);
  int8x8_t v43 = vrev32_s8(v39);
  unsigned int v101 = bswap32(v35);
  unsigned int v102 = bswap32(v33) >> 16;
  int8x16_t v108 = vrev32q_s8(v107);
  int8x16_t v110 = vrev32q_s8(v109);
  int8x8_t v44 = vrev32_s8(v40);
  unsigned int v99 = bswap32(v36) >> 16;
  unsigned int v100 = bswap32(v34) >> 16;
  unsigned int v98 = bswap32(v115) >> 16;
  int8x16_t v116 = vrev32q_s8(v113);
  int8x16_t v112 = vrev32q_s8(v111);
  int8x16_t v114 = vrev32q_s8(v121);
  unsigned int v122 = bswap32(v117);
  unsigned int v119 = bswap32(v118);
  bzero(v41, v21);
  v160[0] = 216;
  *(_DWORD *)int v42 = bswap32(v21);
  *(int8x8_t *)(v42 + 4) = vrev32_s8(v27);
  *((_DWORD *)v42 + 3) = bswap32(v135);
  *((_DWORD *)v42 + 4) = v136;
  *(int8x16_t *)(v42 + 20) = vrev32q_s8(v134);
  *((_DWORD *)v42 + 9) = bswap32(v133);
  *((_WORD *)v42 + 20) = __rev16(v132);
  *((_WORD *)v42 + 21) = __rev16(v130);
  *(int8x16_t *)(v42 + 44) = vrev32q_s8(v131);
  *(int8x16_t *)(v42 + 60) = vrev32q_s8(v129);
  *(int8x16_t *)(v42 + 76) = vrev32q_s8(v128);
  *(int8x16_t *)(v42 + 92) = vrev32q_s8(v127);
  *(int8x8_t *)(v42 + 108) = vrev32_s8(v28);
  *((_DWORD *)v42 + 29) = bswap32(v20);
  *((int8x8_t *)v42 + 15) = vrev32_s8(v29);
  *((_DWORD *)v42 + 32) = bswap32(v126);
  *((_DWORD *)v42 + 33) = v137;
  *(int8x16_t *)(v42 + 136) = vrev32q_s8(v125);
  *((int8x8_t *)v42 + 19) = vrev32_s8(v30);
  *((_DWORD *)v42 + 40) = bswap32(v124);
  *(int8x8_t *)(v42 + 164) = vrev16_s8(v31);
  *(int8x16_t *)(v42 + 172) = vrev32q_s8(v123);
  *(int8x16_t *)(v42 + 188) = v114;
  *(int8x8_t *)(v42 + 204) = vrev32_s8(v32);
  uint64_t v45 = v42 + 216;
  *((_DWORD *)v42 + 53) = bswap32(v120);
  if (a9)
  {
    v160[0] = 36;
    int v46 = *(_DWORD *)(a9 + 32);
    long long v47 = *(_OWORD *)(a9 + 16);
    *(_OWORD *)uint64_t v45 = *(_OWORD *)a9;
    *(_OWORD *)(v42 + 232) = v47;
    *((_DWORD *)v42 + 62) = v46;
    uint64_t v45 = v42 + 252;
  }
  v160[0] = 158;
  *(int8x16_t *)uint64_t v45 = v104;
  *((_DWORD *)v45 + 4) = v138;
  *(int8x16_t *)(v45 + 20) = v106;
  *((_WORD *)v45 + 18) = v102;
  *((_WORD *)v45 + 19) = v100;
  *((int8x8_t *)v45 + 5) = v43;
  *((_DWORD *)v45 + 12) = v139;
  *(int8x16_t *)(v45 + 52) = v108;
  *((_DWORD *)v45 + 17) = v101;
  *((_WORD *)v45 + 36) = v140;
  *(int8x16_t *)(v45 + 74) = v110;
  *(_DWORD *)(v45 + 90) = v141;
  *((_WORD *)v45 + 47) = v99;
  *((_WORD *)v45 + 48) = v98;
  *(int8x16_t *)(v45 + 98) = v112;
  *(_DWORD *)(v45 + 114) = v142;
  *(int8x8_t *)(v45 + 118) = v44;
  *(_DWORD *)(v45 + 126) = v119;
  *(_DWORD *)(v45 + 130) = v143;
  __int16 v48 = v45 + 158;
  *(int8x16_t *)(v45 + 134) = v116;
  *(_DWORD *)(v45 + 150) = v144;
  *(_DWORD *)(v45 + 154) = v122;
  memcpy(v45 + 158, a5, a6);
  long long v49 = (int8x8_t *)&v48[a6];
  if (a10)
  {
    size_t v50 = 4 * bswap32(a10[3]) + 16;
    v160[0] = v50;
    memcpy(v49, a10, v50);
    long long v49 = (int8x8_t *)((char *)v49 + v50);
  }
  if (a11)
  {
    size_t v51 = 2 * bswap32(a11[5]) + 24;
    memcpy(v49, a11, v51);
    long long v49 = (int8x8_t *)((char *)v49 + v51);
  }
  int8x8_t v52 = vrev32_s8(v145);
  unsigned int v53 = bswap32(v147);
  if (a12 && *(unsigned int *)((char *)v16 + 118))
  {
    size_t v54 = 8 * bswap32(a12[4]) + 20;
    memcpy(v49, a12, v54);
    long long v49 = (int8x8_t *)((char *)v49 + v54);
  }
  int8x8_t v55 = vrev32_s8(v146);
  unsigned int v56 = bswap32(v148);
  *long long v49 = v52;
  v49[1].i32[0] = v149;
  v49[1].i32[1] = v53;
  __int16 v57 = v49 + 2;
  if (*(unsigned int *)((char *)v16 + 118))
  {
    unint64_t v58 = 0;
    unint64_t v59 = 0;
    size_t v60 = a14;
    do
    {
      v160[0] = 8;
      v57[v58 / 8] = (int8x8_t)bswap64(*(unsigned int *)(**(void **)((char *)v16 + 122) + v58 + 4) | ((unint64_t)*(unsigned int *)(**(void **)((char *)v16 + 122) + v58) << 32));
      ++v59;
      v58 += 8;
    }
    while (v59 < *(unsigned int *)((char *)v16 + 118));
    __int16 v57 = (int8x8_t *)((char *)v57 + v58);
  }
  else
  {
    size_t v60 = a14;
  }
  unsigned int v61 = bswap32(v152);
  unsigned int v62 = bswap32(v151);
  unsigned int v63 = bswap32(v150);
  int8x8_t *v57 = v55;
  v57[1].i32[0] = v153;
  v57[1].i32[1] = v56;
  unsigned int v64 = (unsigned int *)&v57[2];
  if (*(unsigned int *)((char *)v16 + 142))
  {
    uint64_t v65 = 0;
    unint64_t v66 = 0;
    do
    {
      unint64_t v67 = (int8x8_t *)&v64[v65];
      uint64_t v68 = (int8x8_t *)(**(void **)((char *)v16 + 146) + v65 * 4);
      unsigned int v69 = bswap32(v68[1].u32[0]);
      *unint64_t v67 = vrev32_s8(*v68);
      v67[1].i32[0] = v69;
      ++v66;
      v65 += 3;
    }
    while (v66 < *(unsigned int *)((char *)v16 + 142));
    unsigned int v64 = (unsigned int *)((char *)v64 + v65 * 4);
  }
  *unsigned int v64 = v61;
  v64[1] = v62;
  v64[2] = v154;
  v64[3] = v155;
  v64[4] = v63;
  int v70 = v64 + 5;
  if (a15)
  {
    if (*(unsigned int *)((char *)v16 + 170))
    {
      if (*((unsigned char *)a1 + 437) != 16)
      {
        free(v42);
        return 4294967294;
      }
      unint64_t v71 = 0;
      size_t v72 = 2;
      v160[0] = 2;
      do
      {
        __int16 __src = bswap32(*(_DWORD *)(**(void **)((char *)v16 + 174) + 4 * v71)) >> 16;
        memcpy(v70, &__src, v72);
        size_t v72 = v160[0];
        int v70 = (unsigned int *)((char *)v70 + v160[0]);
        ++v71;
      }
      while (v71 < *(unsigned int *)((char *)v16 + 170));
    }
  }
  else if (!*(unsigned int *)((char *)v16 + 166))
  {
    v160[0] = 4;
    if (*(unsigned int *)((char *)v16 + 170))
    {
      unint64_t v73 = 0;
      size_t v74 = 4;
      do
      {
        unsigned int v158 = bswap32(*(_DWORD *)(**(void **)((char *)v16 + 174) + 4 * v73));
        memcpy(v70, &v158, v74);
        size_t v74 = v160[0];
        int v70 = (unsigned int *)((char *)v70 + v160[0]);
        ++v73;
      }
      while (v73 < *(unsigned int *)((char *)v16 + 170));
    }
  }
  unsigned int v75 = bswap32(v90);
  unsigned int v76 = bswap32(v92);
  unsigned int v77 = bswap32(v91);
  int v78 = *(unsigned int *)((char *)v16 + 194);
  if (v78)
  {
    uint64_t v79 = *(void *)(**(void **)((char *)v16 + 198) + 8 * (v78 - 1));
    BOOL v80 = v79 <= 0xFFFFFFFFLL;
    int v78 = v79 > 0xFFFFFFFFLL;
    if (!v80) {
      unsigned int v75 = 875982691;
    }
  }
  v160[0] = 16;
  *int v70 = v76;
  v70[1] = v75;
  v70[2] = v93;
  v70[3] = v77;
  uint64_t v81 = v70 + 4;
  if (*(unsigned int *)((char *)v16 + 194))
  {
    unint64_t v82 = 0;
    do
    {
      unint64_t v83 = *(void *)(**(void **)((char *)v16 + 198) + 8 * v82);
      if (v78)
      {
        v160[0] = 8;
        void *v81 = bswap64(v83);
        uint64_t v84 = 8;
      }
      else
      {
        v160[0] = 4;
        *(_DWORD *)uint64_t v81 = bswap32(v83);
        uint64_t v84 = v160[0];
      }
      uint64_t v81 = (void *)((char *)v81 + v84);
      ++v82;
    }
    while (v82 < *(unsigned int *)((char *)v16 + 194));
  }
  if (a13)
  {
    uint64_t v85 = a7;
    if (v60)
    {
      memcpy(v81, a13, v60);
      uint64_t v81 = (void *)((char *)v81 + v60);
    }
  }
  else
  {
    uint64_t v85 = a7;
  }
  if (v85 && a8) {
    memcpy(v81, v85, a8);
  }
  uint64_t v86 = (*(uint64_t (**)(uint64_t, void, uint64_t, void, char *, unsigned int *))(*(void *)a2 + 56))(a2, 0, a3, *a1, v42, v160);
  free(v42);
  return v86;
}

void NUMovieBox::AppendTimeToSample(uint64_t a1, uint64_t a2)
{
  char v3 = (_DWORD *)a1;
  __int16 v4 = (_DWORD *)(a1 + 290);
  int v5 = *(_DWORD *)(a1 + 386);
  if (!v5)
  {
    *(_DWORD *)(a1 + 374) += 8;
    *(_DWORD *)(a1 + 386) = 1;
    __int16 v6 = *(void ***)(a1 + 390);
    __int16 v11 = (uint64_t *)v6[1];
    unint64_t v10 = (unint64_t)v6[2];
    if ((unint64_t)v11 < v10)
    {
LABEL_14:
      *__int16 v11 = (a2 << 32) | 1;
      unsigned int v18 = v11 + 1;
LABEL_33:
      v6[1] = v18;
      v4[15] += 8;
      *v4 += 8;
      v3[54] += 8;
      v3[29] += 8;
      int v9 = 8;
      goto LABEL_34;
    }
    uint64_t v12 = ((char *)v11 - (unsigned char *)*v6) >> 3;
    if (!((unint64_t)(v12 + 1) >> 61))
    {
      uint64_t v13 = v10 - (void)*v6;
      uint64_t v14 = v13 >> 2;
      if (v13 >> 2 <= (unint64_t)(v12 + 1)) {
        uint64_t v14 = v12 + 1;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v14;
      }
      if (v15) {
        unint64_t v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v15);
      }
      else {
        uint64_t v16 = 0;
      }
      unsigned int v24 = (uint64_t *)(v15 + 8 * v12);
      unint64_t v25 = v15 + 8 * v16;
      *unsigned int v24 = (a2 << 32) | 1;
      unsigned int v18 = v24 + 1;
      int8x8_t v27 = (char *)*v6;
      unsigned int v26 = (char *)v6[1];
      if (v26 == *v6) {
        goto LABEL_31;
      }
      do
      {
        uint64_t v28 = *((void *)v26 - 1);
        v26 -= 8;
        *--unsigned int v24 = v28;
      }
      while (v26 != v27);
      goto LABEL_30;
    }
LABEL_35:
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  __int16 v6 = *(void ***)(a1 + 390);
  uint64_t v7 = (v5 - 1);
  uint64_t v8 = *v6;
  if (*((_DWORD *)*v6 + 2 * v7 + 1) != a2)
  {
    *(_DWORD *)(a1 + 374) += 8;
    *(_DWORD *)(a1 + 386) = v5 + 1;
    __int16 v11 = (uint64_t *)v6[1];
    unint64_t v17 = (unint64_t)v6[2];
    if ((unint64_t)v11 < v17) {
      goto LABEL_14;
    }
    uint64_t v19 = ((char *)v11 - v8) >> 3;
    if (!((unint64_t)(v19 + 1) >> 61))
    {
      uint64_t v20 = v17 - (void)v8;
      uint64_t v21 = v20 >> 2;
      if (v20 >> 2 <= (unint64_t)(v19 + 1)) {
        uint64_t v21 = v19 + 1;
      }
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v22 = v21;
      }
      if (v22) {
        unint64_t v22 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned char *>>(v22);
      }
      else {
        uint64_t v23 = 0;
      }
      unsigned int v24 = (uint64_t *)(v22 + 8 * v19);
      unint64_t v25 = v22 + 8 * v23;
      *unsigned int v24 = (a2 << 32) | 1;
      unsigned int v18 = v24 + 1;
      int8x8_t v29 = (char *)*v6;
      unsigned int v26 = (char *)v6[1];
      if (v26 == *v6) {
        goto LABEL_31;
      }
      do
      {
        uint64_t v30 = *((void *)v26 - 1);
        v26 -= 8;
        *--unsigned int v24 = v30;
      }
      while (v26 != v29);
LABEL_30:
      unsigned int v26 = (char *)*v6;
LABEL_31:
      __int16 *v6 = v24;
      v6[1] = v18;
      v6[2] = (void *)v25;
      if (v26) {
        operator delete(v26);
      }
      goto LABEL_33;
    }
    goto LABEL_35;
  }
  char v3 = &v8[8 * v7];
  int v9 = 1;
LABEL_34:
  *v3 += v9;
}

void NUMovieBox::AppendPacketSize(uint64_t a1, int a2)
{
  char v3 = (_DWORD *)a1;
  __int16 v4 = (_DWORD *)(a1 + 290);
  if (*(_DWORD *)(a1 + 426) == 1937011578)
  {
    if (!*(_DWORD *)(a1 + 434))
    {
      uint64_t v5 = *(void *)(a1 + 442);
      uint64_t v7 = *(_DWORD **)(v5 + 8);
      unint64_t v6 = *(void *)(v5 + 16);
      if ((unint64_t)v7 < v6)
      {
        *uint64_t v7 = a2;
        uint64_t v8 = v7 + 1;
LABEL_36:
        *(void *)(v5 + 8) = v8;
        int v14 = 4;
        goto LABEL_37;
      }
      unint64_t v22 = *(_DWORD **)v5;
      uint64_t v23 = ((uint64_t)v7 - *(void *)v5) >> 2;
      unint64_t v24 = v23 + 1;
      if (!((unint64_t)(v23 + 1) >> 62))
      {
        uint64_t v25 = v6 - (void)v22;
        if (v25 >> 1 > v24) {
          unint64_t v24 = v25 >> 1;
        }
        BOOL v19 = (unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL;
        unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v19) {
          unint64_t v26 = v24;
        }
        if (v26)
        {
          unint64_t v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v26);
          unint64_t v22 = *(_DWORD **)v5;
          uint64_t v7 = *(_DWORD **)(v5 + 8);
        }
        else
        {
          uint64_t v27 = 0;
        }
        int8x8_t v31 = (_DWORD *)(v26 + 4 * v23);
        unint64_t v32 = v26 + 4 * v27;
        *int8x8_t v31 = a2;
        uint64_t v8 = v31 + 1;
        while (v7 != v22)
        {
          int v33 = *--v7;
          *--int8x8_t v31 = v33;
        }
        *(void *)uint64_t v5 = v31;
        *(void *)(v5 + 8) = v8;
        *(void *)(v5 + 16) = v32;
        if (v22) {
          operator delete(v22);
        }
        goto LABEL_36;
      }
LABEL_39:
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
  }
  else if (*(unsigned char *)(a1 + 437) == 16)
  {
    uint64_t v9 = *(void *)(a1 + 442);
    int v10 = (unsigned __int16)a2;
    uint64_t v12 = *(_DWORD **)(v9 + 8);
    unint64_t v11 = *(void *)(v9 + 16);
    if ((unint64_t)v12 >= v11)
    {
      unint64_t v15 = *(_DWORD **)v9;
      uint64_t v16 = ((uint64_t)v12 - *(void *)v9) >> 2;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 62) {
        goto LABEL_39;
      }
      uint64_t v18 = v11 - (void)v15;
      if (v18 >> 1 > v17) {
        unint64_t v17 = v18 >> 1;
      }
      BOOL v19 = (unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v19) {
        unint64_t v20 = v17;
      }
      if (v20)
      {
        unint64_t v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v20);
        unint64_t v15 = *(_DWORD **)v9;
        uint64_t v12 = *(_DWORD **)(v9 + 8);
      }
      else
      {
        uint64_t v21 = 0;
      }
      uint64_t v28 = (_DWORD *)(v20 + 4 * v16);
      unint64_t v29 = v20 + 4 * v21;
      *uint64_t v28 = v10;
      uint64_t v13 = v28 + 1;
      while (v12 != v15)
      {
        int v30 = *--v12;
        *--uint64_t v28 = v30;
      }
      *(void *)uint64_t v9 = v28;
      *(void *)(v9 + 8) = v13;
      *(void *)(v9 + 16) = v29;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      _DWORD *v12 = (unsigned __int16)a2;
      uint64_t v13 = v12 + 1;
    }
    *(void *)(v9 + 8) = v13;
    int v14 = 2;
LABEL_37:
    ++v4[37];
    v4[33] += v14;
    v4[15] += v14;
    *v4 += v14;
    v3[54] += v14;
    v3[29] += v14;
    goto LABEL_38;
  }
  char v3 = (_DWORD *)(a1 + 438);
  int v14 = 1;
LABEL_38:
  *v3 += v14;
}

uint64_t NUMovieBox::GetByteCountForPackets(uint64_t result, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v2 = result;
  uint64_t v3 = 0;
  LODWORD(result) = 0;
  uint64_t v4 = v2 + 426;
  do
  {
    if (*(_DWORD *)v4 != 1937011578 || (int v5 = *(_DWORD *)(v4 + 8)) == 0)
    {
      int v5 = *(_DWORD *)(v4 + 12);
      if (v5) {
        int v5 = *(_DWORD *)(**(void **)(v4 + 16) + v3);
      }
    }
    uint64_t result = (v5 + result);
    v3 += 4;
  }
  while (4 * a2 != v3);
  return result;
}

uint64_t FillMP4BoxTable(uint64_t a1, int64_t a2, int64_t a3, __n128 **a4, int a5, int a6)
{
  int64_t v6 = a2;
  uint64_t v8 = 0;
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  int64_t v9 = a3 - 8;
  unsigned int v22 = a6 + 1;
  int64_t v10 = a2;
  do
  {
    if (v10 >= v9)
    {
      uint64_t v20 = 0;
      if (!v8) {
        return v20;
      }
      goto LABEL_56;
    }
    int v33 = &unk_1EDF8DA18;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, int64_t))(*(void *)a1 + 88))(&v34, a1, v10);
    char v35 = 0;
    int v36 = 0;
    uint64_t v37 = 0;
    char v38 = 0;
    unsigned int v39 = 8;
    if (MP4BoxParser::Initialize((MP4BoxParser *)&v33))
    {
      BOOL v11 = 0;
      if (v10 == v6) {
        int v12 = -1;
      }
      else {
        int v12 = -2;
      }
      unsigned int v27 = v12;
      int v13 = 1;
      goto LABEL_47;
    }
    uint64_t v14 = v37;
    if (v37 < 0)
    {
      BOOL v11 = 0;
      int v13 = 1;
      unsigned int v27 = -1;
      goto LABEL_47;
    }
    int v15 = v36;
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    unint64_t v16 = v14 & 0xFFFFFFFFFFFFFF00 | (v14 & ~(v14 >> 63));
    if (!a5) {
      goto LABEL_42;
    }
    if (v15 <= 1835626085)
    {
      if (v15 > 1819632755)
      {
        if (v15 > 1835365472)
        {
          if (v15 == 1835365473) {
            goto LABEL_38;
          }
          int v17 = 1835430497;
        }
        else
        {
          if (v15 == 1819632756) {
            goto LABEL_38;
          }
          int v17 = 1835297121;
        }
      }
      else if (v15 > 1768715123)
      {
        if (v15 == 1768715124) {
          goto LABEL_38;
        }
        int v17 = 1768977007;
      }
      else
      {
        if (v15 == 1684631142) {
          goto LABEL_38;
        }
        int v17 = 1701082227;
      }
LABEL_37:
      if (v15 != v17) {
        goto LABEL_42;
      }
      goto LABEL_38;
    }
    if (v15 <= 1936289381)
    {
      if (v15 > 1836019573)
      {
        if (v15 == 1836019574) {
          goto LABEL_38;
        }
        int v17 = 1836475768;
      }
      else
      {
        if (v15 == 1835626086) {
          goto LABEL_38;
        }
        int v17 = 1836019558;
      }
      goto LABEL_37;
    }
    if (v15 <= 1953653093)
    {
      if (v15 == 1936289382) {
        goto LABEL_38;
      }
      int v17 = 1937007212;
      goto LABEL_37;
    }
    if (v15 != 1953653094 && v15 != 1969517665)
    {
      int v17 = 1953653099;
      goto LABEL_37;
    }
LABEL_38:
    if (v10 + v39 < a3)
    {
      uint64_t v8 = (std::__shared_weak_count *)operator new(0x30uLL);
      v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA20E0;
      v8->__shared_owners_ = 0;
      v8->__shared_weak_owners_ = 0;
      v8[1].__vftable = (std::__shared_weak_count_vtbl *)&v8[1];
      v8[1].__shared_owners_ = (uint64_t)&v8[1];
      v8[1].__shared_weak_owners_ = 0;
      (*(void (**)(uint64_t *__return_ptr, uint64_t, int64_t))(*(void *)a1 + 88))(&v32, a1, v10);
      BOOL v11 = FillMP4BoxTable(v32, v39, v16, &v8[1], 1, v22) != 0;
      uint64_t v18 = v32;
      uint64_t v32 = 0;
      if (v18) {
        (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
      }
      v28.n128_u32[0] = v15;
      v28.n128_u64[1] = v16;
      int64_t v29 = v10;
      int v30 = v8 + 1;
      int8x8_t v31 = v8;
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      goto LABEL_43;
    }
LABEL_42:
    BOOL v11 = 0;
    uint64_t v8 = 0;
    v28.n128_u32[0] = v15;
    v28.n128_u64[1] = v16;
    int64_t v29 = v10;
    int v30 = 0;
    int8x8_t v31 = 0;
LABEL_43:
    MP4BoxInfoTable::Add(a4, &v28);
    int64_t v6 = a2;
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    int v13 = 0;
    v10 += v16;
    if (v10 >= a3) {
      BOOL v11 = 1;
    }
LABEL_47:
    uint64_t v19 = v34;
    int v33 = &unk_1EDF8DA18;
    uint64_t v34 = 0;
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    }
  }
  while (((v13 | v11) & 1) == 0);
  if (v13) {
    uint64_t v20 = v27;
  }
  else {
    uint64_t v20 = 0;
  }
  if (v8) {
LABEL_56:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  return v20;
}

void sub_1900C1BF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a21) {
    (*(void (**)(uint64_t))(*(void *)a21 + 8))(a21);
  }
  if (a23) {
    (*(void (**)(uint64_t))(*(void *)a23 + 8))(a23);
  }
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  _Unwind_Resume(exception_object);
}

__n128 MP4BoxInfoTable::Add(__n128 **a1, __n128 *a2)
{
  __n128 v8 = *a2;
  unint64_t v3 = a2[1].n128_u64[1];
  unint64_t v9 = a2[1].n128_u64[0];
  unint64_t v4 = a2[2].n128_u64[0];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  int v5 = (__n128 *)operator new(0x38uLL);
  __n128 result = v8;
  v5[1] = v8;
  v5[2].n128_u64[0] = v9;
  v5[2].n128_u64[1] = v3;
  v5[3].n128_u64[0] = v4;
  unint64_t v7 = (unint64_t)*a1;
  v5->n128_u64[0] = (unint64_t)*a1;
  v5->n128_u64[1] = (unint64_t)a1;
  *(void *)(v7 + 8) = v5;
  *a1 = v5;
  a1[2] = (__n128 *)((char *)a1[2] + 1);
  return result;
}

void sub_1900C1D30(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<MP4BoxInfoTable>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<MP4BoxInfoTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA20E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

void std::__shared_ptr_emplace<MP4BoxInfoTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA20E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 *FindBoxInfo(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, __n128 **a6)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  BOOL v11 = (__n128 **)a6[1];
  if (v11 != a6)
  {
    int v12 = 0;
    int v13 = a6[1];
    do
    {
      if (v13[1].n128_u32[0] == a4)
      {
        if (v12 == a5) {
          return v13 + 1;
        }
        ++v12;
      }
      int v13 = (__n128 *)v13->n128_u64[1];
    }
    while (v13 != (__n128 *)a6);
  }
  unint64_t v14 = (unint64_t)a6[2];
  if (v14)
  {
    unint64_t v15 = v14 - 1;
    if ((uint64_t)(v14 - 1) < 0)
    {
      do
        BOOL v11 = (__n128 **)*v11;
      while (!__CFADD__(v15++, 1));
    }
    else if (v14 != 1)
    {
      do
      {
        BOOL v11 = (__n128 **)v11[1];
        --v14;
      }
      while (v14 > 1);
    }
    if (v11 != a6) {
      a2 = (uint64_t)v11[4] + (void)v11[3];
    }
  }
  int v17 = 0;
  while (a2 < a3)
  {
    int64_t v29 = &unk_1EDF8DA18;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 88))(&v30, a1, a2);
    char v31 = 0;
    unsigned __int32 v32 = 0;
    unint64_t v33 = 0;
    char v34 = 0;
    int v35 = 8;
    if (MP4BoxParser::Initialize((MP4BoxParser *)&v29))
    {
      int v18 = 1;
    }
    else
    {
      unint64_t v19 = v33;
      v25.n128_u32[0] = v32;
      v25.n128_u64[1] = v33;
      uint64_t v26 = a2;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      MP4BoxInfoTable::Add(a6, &v25);
      uint64_t v20 = a6[1];
      if (v20 != (__n128 *)a6)
      {
        int v21 = 0;
        do
        {
          if (v20[1].n128_u32[0] == a4)
          {
            if (v21 == a5)
            {
              int v17 = v20 + 1;
              goto LABEL_28;
            }
            ++v21;
          }
          uint64_t v20 = (__n128 *)v20->n128_u64[1];
        }
        while (v20 != (__n128 *)a6);
      }
      int v17 = 0;
LABEL_28:
      a2 += v19;
      if (v17) {
        int v18 = 3;
      }
      else {
        int v18 = 0;
      }
    }
    uint64_t v22 = v30;
    int64_t v29 = &unk_1EDF8DA18;
    uint64_t v30 = 0;
    if (v22) {
      (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
    }
    if (v18)
    {
      if (v18 != 3) {
        return 0;
      }
      return v17;
    }
  }
  return v17;
}

void sub_1900C2024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
  }
  _Unwind_Resume(exception_object);
}

void MP4BoxParser::MP4BoxParser(MP4BoxParser *this, const void *a2)
{
  *(void *)this = &unk_1EDF8DA18;
  operator new();
}

uint64_t MP4BoxParser_TrackFragmentRun::Init(MP4BoxParser **this)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = MP4BoxParser_Full::Initialize((MP4BoxParser_Full *)this);
  if (v2) {
    return v2;
  }
  if (*((_DWORD *)this + 5) != 1953658222) {
    return 4294967294;
  }
  unsigned int v3 = (*((uint64_t (**)(MP4BoxParser **))*this + 3))(this);
  unint64_t v4 = (unint64_t)this[3];
  if (v4 <= (*((unsigned int (**)(MP4BoxParser **))*this + 3))(this) || (unint64_t)this[3] <= 3)
  {
    uint64_t v2 = 1685348671;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v23 = 136315394;
      unint64_t v24 = "MP4_BoxParser_TrackFragmentRun.cpp";
      __int16 v25 = 1024;
      int v26 = 116;
      int v5 = MEMORY[0x1E4F14500];
      int64_t v6 = "%25s:%-5d  'trun' box is too small for its sample count";
LABEL_7:
      _os_log_impl(&dword_18FEC0000, v5, OS_LOG_TYPE_ERROR, v6, (uint8_t *)&v23, 0x12u);
      return v2;
    }
    return v2;
  }
  uint64_t v8 = v3;
  uint64_t DataSourceBytes = MP4BoxParser::ReadDataSourceBytes(this[1], v3, 4uLL, (char *)this + 92);
  if (DataSourceBytes)
  {
    uint64_t v2 = DataSourceBytes;
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return v2;
    }
    int v23 = 136315394;
    unint64_t v24 = "MP4_BoxParser_TrackFragmentRun.cpp";
    __int16 v25 = 1024;
    int v26 = 118;
    int v5 = MEMORY[0x1E4F14500];
    int64_t v6 = "%25s:%-5d  Couldn't read sample count";
    goto LABEL_7;
  }
  *((_DWORD *)this + 23) = bswap32(*((_DWORD *)this + 23));
  uint64_t v10 = v3 + 4;
  if (*((unsigned char *)this + 59))
  {
    unint64_t v13 = (unint64_t)this[3];
    if (v13 <= (*((unsigned int (**)(MP4BoxParser **))*this + 3))(this) || (unint64_t)this[3] <= 7)
    {
      uint64_t v2 = 1685348671;
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        return v2;
      }
      int v23 = 136315394;
      unint64_t v24 = "MP4_BoxParser_TrackFragmentRun.cpp";
      __int16 v25 = 1024;
      int v26 = 128;
      int v5 = MEMORY[0x1E4F14500];
      int64_t v6 = "%25s:%-5d  'trun' box is too small for its data offset";
      goto LABEL_7;
    }
    uint64_t v17 = MP4BoxParser::ReadDataSourceBytes(this[1], v8 + 4, 4uLL, this + 12);
    if (v17)
    {
      uint64_t v2 = v17;
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        return v2;
      }
      int v23 = 136315394;
      unint64_t v24 = "MP4_BoxParser_TrackFragmentRun.cpp";
      __int16 v25 = 1024;
      int v26 = 131;
      int v5 = MEMORY[0x1E4F14500];
      int64_t v6 = "%25s:%-5d  Couldn't read data offset";
      goto LABEL_7;
    }
    *((_DWORD *)this + 24) = bswap32(*((_DWORD *)this + 24));
    uint64_t v10 = v8 + 8;
    unint64_t v11 = 8;
    if ((*((unsigned char *)this + 59) & 4) == 0) {
      goto LABEL_15;
    }
  }
  else
  {
    unint64_t v11 = 4;
    if ((*((unsigned char *)this + 59) & 4) == 0) {
      goto LABEL_15;
    }
  }
  unint64_t v18 = (unint64_t)this[3];
  if (v18 <= (*((unsigned int (**)(MP4BoxParser **))*this + 3))(this)
    || (v11 += 4, (unint64_t)this[3] < v11))
  {
    uint64_t v2 = 1685348671;
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return v2;
    }
    int v23 = 136315394;
    unint64_t v24 = "MP4_BoxParser_TrackFragmentRun.cpp";
    __int16 v25 = 1024;
    int v26 = 140;
    int v5 = MEMORY[0x1E4F14500];
    int64_t v6 = "%25s:%-5d  'trun' box is too small for its first sample flags";
    goto LABEL_7;
  }
  uint64_t v19 = MP4BoxParser::ReadDataSourceBytes(this[1], v10, 4uLL, (char *)this + 100);
  if (v19)
  {
    uint64_t v2 = v19;
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return v2;
    }
    int v23 = 136315394;
    unint64_t v24 = "MP4_BoxParser_TrackFragmentRun.cpp";
    __int16 v25 = 1024;
    int v26 = 143;
    int v5 = MEMORY[0x1E4F14500];
    int64_t v6 = "%25s:%-5d  Couldn't read first sample flags";
    goto LABEL_7;
  }
  *((_DWORD *)this + 25) = bswap32(*((_DWORD *)this + 25));
  v10 += 4;
LABEL_15:
  char v12 = *((unsigned char *)this + 58);
  if (v12)
  {
    *((unsigned char *)this + 104) = 1;
    *((_DWORD *)this + 22) += 4;
    if ((v12 & 2) == 0)
    {
LABEL_17:
      if ((v12 & 4) == 0) {
        goto LABEL_18;
      }
LABEL_26:
      *((unsigned char *)this + 106) = 1;
      *((_DWORD *)this + 22) += 4;
      if ((v12 & 8) == 0) {
        goto LABEL_19;
      }
      goto LABEL_27;
    }
  }
  else if ((*((unsigned char *)this + 58) & 2) == 0)
  {
    goto LABEL_17;
  }
  *((unsigned char *)this + 105) = 1;
  *((_DWORD *)this + 22) += 4;
  if ((v12 & 4) != 0) {
    goto LABEL_26;
  }
LABEL_18:
  if ((v12 & 8) == 0)
  {
LABEL_19:
    uint64_t v2 = *((unsigned int *)this + 22);
    goto LABEL_28;
  }
LABEL_27:
  *((unsigned char *)this + 107) = 1;
  uint64_t v2 = (*((_DWORD *)this + 22) + 4);
  *((_DWORD *)this + 22) = v2;
LABEL_28:
  if (!v2) {
    return v2;
  }
  int v14 = *((_DWORD *)this + 23);
  unint64_t v15 = (unint64_t)this[3];
  if (v15 <= (*((unsigned int (**)(MP4BoxParser **))*this + 3))(this)
    || (unint64_t v16 = (v14 * v2), (unint64_t)this[3] < v11 + v16))
  {
    uint64_t v2 = 1685348671;
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return v2;
    }
    int v23 = 136315394;
    unint64_t v24 = "MP4_BoxParser_TrackFragmentRun.cpp";
    __int16 v25 = 1024;
    int v26 = 179;
    int v5 = MEMORY[0x1E4F14500];
    int64_t v6 = "%25s:%-5d  'trun' box is too small for its per packet info";
    goto LABEL_7;
  }
  uint64_t v20 = this[8];
  int v21 = this[9];
  LOBYTE(v23) = 0;
  unint64_t v22 = v21 - v20;
  if (v16 <= v22)
  {
    if (v16 < v22) {
      this[9] = (MP4BoxParser *)((char *)v20 + v16);
    }
  }
  else
  {
    std::vector<unsigned char>::__append(this + 8, v16 - v22, &v23);
    uint64_t v20 = this[8];
  }
  uint64_t v2 = MP4BoxParser::ReadDataSourceBytes(this[1], v10, v16, v20);
  if (v2 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v23 = 136315394;
    unint64_t v24 = "MP4_BoxParser_TrackFragmentRun.cpp";
    __int16 v25 = 1024;
    int v26 = 183;
    int v5 = MEMORY[0x1E4F14500];
    int64_t v6 = "%25s:%-5d  Couldn't read per packet info";
    goto LABEL_7;
  }
  return v2;
}

void MP4BoxParser_TrackFragmentRun::~MP4BoxParser_TrackFragmentRun(MP4BoxParser_TrackFragmentRun *this)
{
  MP4BoxParser_TrackFragmentRun::~MP4BoxParser_TrackFragmentRun(this);
  JUMPOUT(0x192FC8940);
}

{
  void *v2;
  uint64_t v3;

  *(void *)this = &unk_1EDF944C8;
  uint64_t v2 = (void *)*((void *)this + 8);
  if (v2)
  {
    *((void *)this + 9) = v2;
    operator delete(v2);
  }
  unsigned int v3 = *((void *)this + 1);
  *(void *)this = &unk_1EDF8DA18;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
}

uint64_t MP4BoxParser_ChunkOffset::Init(MP4BoxParser **this)
{
  uint64_t result = MP4BoxParser_Full::Initialize((MP4BoxParser_Full *)this);
  if (!result)
  {
    int v3 = *((_DWORD *)this + 5);
    if (v3 == 1937007471 || v3 == 1668232756)
    {
      unsigned int v5 = (*((uint64_t (**)(MP4BoxParser **))*this + 3))(this);
      uint64_t result = MP4BoxParser::ReadDataSourceBytes(this[1], v5, 4uLL, (char *)this + 60);
      if (!result) {
        *((_DWORD *)this + 15) = bswap32(*((_DWORD *)this + 15));
      }
    }
    else
    {
      return 4294967294;
    }
  }
  return result;
}

void MP4BoxParser_ChunkOffset::~MP4BoxParser_ChunkOffset(MP4BoxParser_ChunkOffset *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDF8DA18;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  JUMPOUT(0x192FC8940);
}

{
  uint64_t v2;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDF8DA18;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

void MP4BoxParser_ChunkOffset::MP4BoxParser_ChunkOffset(MP4BoxParser_ChunkOffset *this, DataSource *a2, uint64_t a3)
{
  *(void *)this = &unk_1EDF8DA18;
  (*(void (**)(DataSource *, uint64_t))(*(void *)a2 + 88))(a2, a3);
  *((unsigned char *)this + 16) = 0;
  *((_DWORD *)this + 5) = 0;
  *((void *)this + 3) = 0;
  *((unsigned char *)this + 32) = 0;
  *((_DWORD *)this + 9) = 8;
  *(void *)this = &unk_1EDF93B30;
  *((_DWORD *)this + 15) = 0;
}

uint64_t MP4BoxParser_ChunkOffset::GetChunkOffset(MP4BoxParser_ChunkOffset *this, int a2, uint64_t *a3)
{
  uint64_t result = (*(uint64_t (**)(MP4BoxParser_ChunkOffset *))(*(void *)this + 24))(this);
  int v7 = result + 4;
  int v8 = *((_DWORD *)this + 5);
  if (v8 == 1668232756)
  {
    unint64_t v10 = 0;
    uint64_t result = MP4BoxParser::ReadDataSourceBytes(*((MP4BoxParser **)this + 1), (v7 + 8 * a2), 8uLL, &v10);
    uint64_t v9 = bswap64(v10);
    if (result) {
      return result;
    }
  }
  else if (v8 == 1937007471)
  {
    unsigned int v11 = 0;
    uint64_t result = MP4BoxParser::ReadDataSourceBytes(*((MP4BoxParser **)this + 1), (v7 + 4 * a2), 4uLL, &v11);
    uint64_t v9 = bswap32(v11);
    if (result) {
      return result;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  *a3 = v9;
  return result;
}

uint64_t DSPGraph::TimeFreqBox::uninitialize(DSPGraph::TimeFreqBox *this)
{
  DSPGraph::Box::uninitialize(this);
  uint64_t v2 = (void *)*((void *)this + 97);
  return std::vector<std::unique_ptr<void,int (*)(void *)>>::__base_destruct_at_end[abi:ne180100]((uint64_t)this + 776, v2);
}

uint64_t std::vector<std::unique_ptr<void,int (*)(void *)>>::__base_destruct_at_end[abi:ne180100](uint64_t result, void *a2)
{
  uint64_t v3 = result;
  unint64_t v4 = *(void **)(result + 8);
  if (v4 != a2)
  {
    unsigned int v5 = *(void **)(result + 8);
    do
    {
      uint64_t v6 = *(v5 - 2);
      v5 -= 2;
      uint64_t result = v6;
      void *v5 = 0;
      if (v6) {
        uint64_t result = ((uint64_t (*)(void))*(v4 - 1))();
      }
      unint64_t v4 = v5;
    }
    while (v5 != a2);
  }
  *(void *)(v3 + 8) = a2;
  return result;
}

uint64_t DSPGraph::TimeFreqBox::initialize(DSPGraph::TimeFreqBox *this)
{
  DSPGraph::Box::initialize(this);
  uint64_t v2 = *((void *)this + 8);
  if (*((void *)this + 9) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v30, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v29, "in");
    uint64_t v17 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v17 = (void *)*v17;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v16, v17, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
  }
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
  uint64_t v4 = *((void *)this + 11);
  if (*((void *)this + 12) == v4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v30, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v29, "out");
    uint64_t v19 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v19 = (void *)*v19;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v18, v19, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
  }
  uint64_t v5 = *(void *)(v3 + 120);
  if (*(_DWORD *)(v5 + 28) != *(_DWORD *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4)
                                                     + 120)
                                         + 28))
  {
    std::string::basic_string[abi:ne180100]<0>(&v30, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_TimeFreqBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v29, "initialize");
    std::string::basic_string[abi:ne180100]<0>(&v28, "channel mismatch.");
    DSPGraph::ThrowException(1718444833, &v30, 44, &v29, &v28);
  }
  uint64_t v6 = *((void *)this + 8);
  if (*((void *)this + 9) == v6)
  {
    std::string::basic_string[abi:ne180100]<0>(&v30, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v29, "in");
    int v21 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      int v21 = (void *)*v21;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v20, v21, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
  }
  if (*(_DWORD *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v6 + 40))(v6) + 120) + 8) != 1819304813) {
    goto LABEL_9;
  }
  uint64_t v7 = *((void *)this + 11);
  if (*((void *)this + 12) == v7)
  {
    std::string::basic_string[abi:ne180100]<0>(&v30, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v29, "out");
    uint64_t v27 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v27 = (void *)*v27;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v26, v27, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 40))(v7);
  if (*(_DWORD *)(*(void *)(result + 120) + 8) == 1718773105)
  {
    int v9 = 0;
  }
  else
  {
LABEL_9:
    uint64_t v10 = *((void *)this + 8);
    if (*((void *)this + 9) == v10)
    {
      std::string::basic_string[abi:ne180100]<0>(&v30, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v29, "in");
      int v23 = (void *)((char *)this + 32);
      if (*((char *)this + 55) < 0) {
        int v23 = (void *)*v23;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v22, v23, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
    }
    if (*(_DWORD *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10) + 120) + 8) != 1718773105) {
      goto LABEL_19;
    }
    uint64_t v11 = *((void *)this + 11);
    if (*((void *)this + 12) == v11)
    {
      std::string::basic_string[abi:ne180100]<0>(&v30, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v29, "out");
      __int16 v25 = (void *)((char *)this + 32);
      if (*((char *)this + 55) < 0) {
        __int16 v25 = (void *)*v25;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v24, v25, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
    }
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 40))(v11);
    if (*(_DWORD *)(*(void *)(result + 120) + 8) != 1819304813)
    {
LABEL_19:
      std::string::basic_string[abi:ne180100]<0>(&v30, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_TimeFreqBox.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v29, "initialize");
      std::string::basic_string[abi:ne180100]<0>(&v28, "formats are not between freq and time domains.");
      DSPGraph::ThrowException(1718444833, &v30, 52, &v29, &v28);
    }
    int v9 = 1;
  }
  *((_DWORD *)this + 200) = v9;
  unint64_t v12 = *(unsigned int *)(v5 + 28);
  uint64_t v13 = *((void *)this + 97);
  if (v12 > (*((void *)this + 99) - v13) >> 4)
  {
    uint64_t v14 = *((void *)this + 98) - v13;
    unint64_t v33 = (char *)this + 792;
    *(void *)&long long v30 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v12);
    *((void *)&v30 + 1) = v30 + v14;
    uint64_t v31 = v30 + v14;
    uint64_t v32 = v30 + 16 * v15;
    std::vector<std::unique_ptr<void,int (*)(void *)>>::__swap_out_circular_buffer((void *)this + 97, &v30);
    uint64_t result = std::__split_buffer<std::unique_ptr<void,int (*)(void *)>>::~__split_buffer((uint64_t)&v30);
  }
  if (v12)
  {
    *(void *)&long long v29 = 0;
    VPTimeFreqConverter_Create();
  }
  return result;
}

void sub_1900C326C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::unique_ptr<void,int (*)(void *)>>::__swap_out_circular_buffer(void *result, void *a2)
{
  uint64_t v3 = (void *)*result;
  uint64_t v2 = (void *)result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    uint64_t v5 = *(v2 - 2);
    v2 -= 2;
    void *v2 = 0;
    *(void *)(v4 - 16) = v5;
    v4 -= 16;
    *(void *)(v4 + 8) = v2[1];
  }
  a2[1] = v4;
  uint64_t v6 = (void *)*result;
  *uint64_t result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::unique_ptr<void,int (*)(void *)>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
    uint64_t v4 = *(void *)(i - 16);
    *(void *)(i - 16) = 0;
    if (v4) {
      (*(void (**)(void))(i - 8))();
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *DSPGraph::TimeFreqBox::process(DSPGraph::TimeFreqBox *this, int a2)
{
  if (*(_DWORD *)(*((void *)this + 2) + 268) != a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_TimeFreqBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v48, "process");
    std::string::basic_string[abi:ne180100]<0>(&v47, "inNumFrames != blockSize.");
    DSPGraph::ThrowException(1718188065, &v49, 93, &v48, &v47);
  }
  uint64_t v4 = (char *)this + 64;
  uint64_t v3 = *((void *)this + 8);
  if (*((void *)v4 + 1) == v3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v48, "in");
    uint64_t v37 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v37 = (void *)*v37;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v36, v37, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 40))(v3);
  uint64_t v7 = *((void *)this + 11);
  if (*((void *)this + 12) == v7)
  {
    std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v48, "out");
    unsigned int v39 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      unsigned int v39 = (void *)*v39;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v38, v39, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
  }
  uint64_t v8 = *(_DWORD **)(*(void *)(v6 + 56) + 80);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 40))(v7);
  if (*v8 != (uint64_t)(*((void *)this + 98) - *((void *)this + 97)) >> 4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_TimeFreqBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v48, "process");
    std::string::basic_string[abi:ne180100]<0>(&v47, "buffer list number of buffers doesn't match format channel count.");
    DSPGraph::ThrowException(1667788321, &v49, 100, &v48, &v47);
  }
  uint64_t v10 = *((void *)this + 11);
  if (*((void *)this + 12) == v10)
  {
    std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v48, "out");
    unsigned int v41 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      unsigned int v41 = (void *)*v41;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v40, v41, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
  }
  uint64_t v11 = *(void *)(*(void *)(v9 + 56) + 80);
  uint64_t v12 = (*(uint64_t (**)(void))(*(void *)v10 + 40))(*((void *)this + 11));
  if (*v8)
  {
    unint64_t v13 = 0;
    unint64_t v14 = 0;
    int v15 = *(_DWORD *)(*(void *)(v12 + 120) + 24) * a2;
    do
    {
      *(_DWORD *)(v11 + v13 + 12) = v15;
      unint64_t v16 = *(char **)&v8[v13 / 4 + 4];
      uint64_t v17 = *(char **)(v11 + v13 + 16);
      if (*((_DWORD *)this + 200))
      {
        v46.realp = *(float **)&v8[v13 / 4 + 4];
        v46.imagp = (float *)&v16[4 * a2];
        int v18 = VPTimeFreqConverter_Synthesize(*(void *)(*((void *)this + 97) + v13), &v46, v17);
        if (v18)
        {
          int v34 = v18;
          std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_TimeFreqBox.cpp");
          std::string::basic_string[abi:ne180100]<0>(&v48, "process");
          std::string::basic_string[abi:ne180100]<0>(&v47, "VPTimeFreqConverter_Synthesize");
          DSPGraph::ThrowException(v34, &v49, 120, &v48, &v47);
        }
      }
      else
      {
        v46.realp = *(float **)(v11 + v13 + 16);
        v46.imagp = (float *)&v17[4 * a2];
        int v19 = VPTimeFreqConverter_Analyze(*(void *)(*((void *)this + 97) + v13), v16, &v46);
        if (v19)
        {
          int v35 = v19;
          std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_TimeFreqBox.cpp");
          std::string::basic_string[abi:ne180100]<0>(&v48, "process");
          std::string::basic_string[abi:ne180100]<0>(&v47, "VPTimeFreqConverter_Analyze");
          DSPGraph::ThrowException(v35, &v49, 114, &v48, &v47);
        }
      }
      ++v14;
      v13 += 16;
    }
    while (v14 < *v8);
  }
  uint64_t v20 = *((void *)this + 8);
  if (*((void *)this + 9) == v20)
  {
    std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v48, "in");
    int8x8_t v43 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      int8x8_t v43 = (void *)*v43;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v42, v43, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
  }
  uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 40))(v20);
  uint64_t v22 = *((void *)this + 8);
  if (*((void *)this + 9) == v22)
  {
    std::string::basic_string[abi:ne180100]<0>(&v49, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v48, "in");
    uint64_t v45 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v45 = (void *)*v45;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v44, v45, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
  }
  int v23 = *(_DWORD *)(*(void *)(v21 + 56) + 72);
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v22 + 40))(v22);
  uint64_t v26 = *((void *)this + 11);
  __int16 v25 = (void *)*((void *)this + 12);
  if ((void *)v26 != v25)
  {
    uint64_t v27 = (_OWORD *)(result[7] + 8);
    uint64_t result = (void *)v26;
    long long v28 = (void *)v26;
    do
    {
      uint64_t v29 = *v28;
      v28 += 4;
      uint64_t v30 = *(void *)((*(uint64_t (**)(void *))(v29 + 40))(result) + 56);
      long long v32 = v27[2];
      long long v31 = v27[3];
      long long v33 = v27[1];
      *(_OWORD *)(v30 + 8) = *v27;
      *(_OWORD *)(v30 + 24) = v33;
      *(_OWORD *)(v30 + 40) = v32;
      *(_OWORD *)(v30 + 56) = v31;
      *(_DWORD *)(v30 + 72) = v23;
      v26 += 32;
      uint64_t result = v28;
    }
    while (v28 != v25);
  }
  return result;
}

void sub_1900C39D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSPGraph::TimeFreqBox::hasPresetData(DSPGraph::TimeFreqBox *this)
{
  return 0;
}

double DSPGraph::TimeFreqBox::desc@<D0>(uint64_t a1@<X8>)
{
  double result = 6.73591209e252;
  *(_OWORD *)a1 = xmmword_1901C6280;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t DSPGraph::TimeFreqBox::selfLatencyInTicks(DSPGraph::TimeFreqBox *this)
{
  if (!*(unsigned char *)(*((void *)this + 1) + 761))
  {
    std::string::basic_string[abi:ne180100]<0>(&v18, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_TimeFreqBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v17, "selfLatencyInTicks");
    std::string::basic_string[abi:ne180100]<0>(&v16, "not configured");
    DSPGraph::ThrowException(1667655457, &v18, 70, &v17, &v16);
  }
  uint64_t v3 = (char *)this + 64;
  uint64_t v2 = *((void *)this + 8);
  if (*((void *)v3 + 1) == v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v18, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v17, "in");
    uint64_t v9 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v9 = (void *)*v9;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v8, v9, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
  }
  if (*(_DWORD *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2) + 120) + 8) == 1819304813)
  {
    uint64_t v4 = *((void *)this + 11);
    if (*((void *)this + 12) == v4)
    {
      std::string::basic_string[abi:ne180100]<0>(&v18, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v17, "out");
      int v15 = (void *)((char *)this + 32);
      if (*((char *)this + 55) < 0) {
        int v15 = (void *)*v15;
      }
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v14, v15, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
    }
    if (*(_DWORD *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4) + 120) + 8) == 1718773105) {
      return 0;
    }
  }
  uint64_t v6 = *((void *)this + 8);
  if (*((void *)this + 9) == v6)
  {
    std::string::basic_string[abi:ne180100]<0>(&v18, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v17, "in");
    uint64_t v11 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      uint64_t v11 = (void *)*v11;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v10, v11, (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 5, 0);
  }
  if (*(_DWORD *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v6 + 40))(v6) + 120) + 8) != 1718773105) {
    goto LABEL_13;
  }
  uint64_t v7 = *((void *)this + 11);
  if (*((void *)this + 12) == v7)
  {
    std::string::basic_string[abi:ne180100]<0>(&v18, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v17, "out");
    unint64_t v13 = (void *)((char *)this + 32);
    if (*((char *)this + 55) < 0) {
      unint64_t v13 = (void *)*v13;
    }
    DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v12, v13, (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 5, 0);
  }
  if (*(_DWORD *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v7 + 40))(v7) + 120) + 8) != 1819304813)
  {
LABEL_13:
    std::string::basic_string[abi:ne180100]<0>(&v18, "/Library/Caches/com.apple.xbs/Sources/CoreAudioServices_AudioToolboxCore/CoreAudioUtility/Source/CADSP/DSPGraph/DSPGraph_TimeFreqBox.cpp");
    std::string::basic_string[abi:ne180100]<0>(&v17, "selfLatencyInTicks");
    std::string::basic_string[abi:ne180100]<0>(&v16, "formats are not between freq and time domains.");
    DSPGraph::ThrowException(1718444833, &v18, 78, &v17, &v16);
  }
  return *(void *)(*((void *)this + 2) + 296);
}

void sub_1900C3E68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (*(char *)(v23 - 33) < 0) {
    operator delete(*(void **)(v23 - 56));
  }
  _Unwind_Resume(exception_object);
}

const char *DSPGraph::TimeFreqBox::ClassName(DSPGraph::TimeFreqBox *this)
{
  return "fft";
}

void DSPGraph::TimeFreqBox::~TimeFreqBox(DSPGraph::TimeFreqBox *this)
{
  *(void *)this = &unk_1EDF97278;
  uint64_t v2 = (void **)((char *)this + 776);
  std::vector<std::unique_ptr<void,int (*)(void *)>>::__destroy_vector::operator()[abi:ne180100](&v2);
  DSPGraph::Box::~Box(this);
  JUMPOUT(0x192FC8940);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_1EDF97278;
  uint64_t v2 = (void **)((char *)this + 776);
  std::vector<std::unique_ptr<void,int (*)(void *)>>::__destroy_vector::operator()[abi:ne180100](&v2);
  DSPGraph::Box::~Box(this);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_1EDF97278;
  uint64_t v2 = (void **)((char *)this + 776);
  std::vector<std::unique_ptr<void,int (*)(void *)>>::__destroy_vector::operator()[abi:ne180100](&v2);
  DSPGraph::Box::~Box(this);
}

void std::vector<std::unique_ptr<void,int (*)(void *)>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<void,int (*)(void *)>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void DSPGraph::TimeFreqBox::TimeFreqBox(DSPGraph::TimeFreqBox *this)
{
}

{
  DSPGraph::Box::Box(this, 1u, 1u);
}

OSStatus AUListenerCreate(AUParameterListenerProc inProc, void *inUserData, CFRunLoopRef inRunLoop, CFStringRef inRunLoopMode, Float32 inNotificationInterval, AUParameterListenerRef *outListener)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  OSStatus result = -50;
  if (inProc && outListener)
  {
    long long v13 = 0uLL;
    if (inNotificationInterval > 0.0)
    {
      if (!inRunLoop) {
        inRunLoop = CFRunLoopGetCurrent();
      }
      CFStringRef v9 = (CFStringRef)*MEMORY[0x1E4F1D418];
      if (inRunLoopMode) {
        CFStringRef v9 = inRunLoopMode;
      }
      std::allocate_shared[abi:ne180100]<CAEventReceiver::Impl,std::allocator<CAEventReceiver::Impl>,__CFRunLoop *&,__CFString const*&,void>(&v12, inRunLoop, v9);
      long long v10 = v12;
      long long v12 = 0uLL;
      uint64_t v11 = (std::__shared_weak_count *)*((void *)&v13 + 1);
      long long v13 = v10;
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
      CAEventReceiver::~CAEventReceiver((std::__shared_weak_count **)&v12);
    }
    operator new();
  }
  return result;
}

void sub_1900C4298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  CAEventReceiver::~CAEventReceiver((std::__shared_weak_count **)va);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<CAEventReceiver::Impl,std::allocator<CAEventReceiver::Impl>,__CFRunLoop *&,__CFString const*&,void>(void *a1, const void *a2, const void *a3)
{
  uint64_t v6 = (char *)operator new(0x90uLL);
  *(_OWORD *)(v6 + 8) = 0u;
  *(void *)uint64_t v6 = &unk_1EDFA2460;
  *(_OWORD *)(v6 + 24) = 0u;
  if (a2) {
    CFRetain(a2);
  }
  *((void *)v6 + 5) = a2;
  if (a3) {
    CFRetain(a3);
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)(v6 + 48), a3);
  *((void *)v6 + 7) = 0;
  *((void *)v6 + 8) = 0;
  *((void *)v6 + 12) = 0;
  *((void *)v6 + 13) = -1;
  *((void *)v6 + 14) = 0;
  *((void *)v6 + 15) = 0;
  *((void *)v6 + 16) = dispatch_semaphore_create(0);
  *((_DWORD *)v6 + 34) = 0;
  *a1 = v6 + 24;
  a1[1] = v6;
  std::shared_ptr<CAEventReceiver::Impl>::__enable_weak_this[abi:ne180100]<CAEventReceiver::Impl,CAEventReceiver::Impl,void>((uint64_t)a1, (void *)v6 + 3, (uint64_t)(v6 + 24));
}

void sub_1900C43C8(_Unwind_Exception *a1)
{
  applesauce::CF::ObjectRef<__CFRunLoop *>::~ObjectRef(v2);
  shared_owners = (std::__shared_weak_count *)v1[1].__shared_owners_;
  if (shared_owners) {
    std::__shared_weak_count::__release_weak(shared_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AUListenerCreate::$_0,std::allocator<AUListenerCreate::$_0>,void ()(void *,AudioUnitParameter const*,float)>::operator()(uint64_t a1, void *a2, void *a3, float *a4)
{
  return (*(uint64_t (**)(void, void, void, float))(a1 + 8))(*(void *)(a1 + 16), *a2, *a3, *a4);
}

__n128 std::__function::__func<AUListenerCreate::$_0,std::allocator<AUListenerCreate::$_0>,void ()(void *,AudioUnitParameter const*,float)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EDF9E518;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AUListenerCreate::$_0,std::allocator<AUListenerCreate::$_0>,void ()(void *,AudioUnitParameter const*,float)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EDF9E518;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<AUListenerCreate::$_0,std::allocator<AUListenerCreate::$_0>,void ()(void *,AudioUnitParameter const*,float)>::~__func()
{
}

const void **applesauce::CF::ObjectRef<__CFRunLoop *>::~ObjectRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

OSStatus AUListenerCreateWithDispatchQueue(AUParameterListenerRef *outListener, Float32 inNotificationInterval, dispatch_queue_t inDispatchQueue, AUParameterListenerBlock inBlock)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  OSStatus result = -50;
  if (outListener)
  {
    if (inBlock)
    {
      std::allocate_shared[abi:ne180100]<CAEventReceiver::Impl,std::allocator<CAEventReceiver::Impl>,dispatch_queue_s *&,void>(&v7, inDispatchQueue);
      _Block_copy(inBlock);
      operator new();
    }
  }
  return result;
}

void sub_1900C4600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<CAEventReceiver::Impl,std::allocator<CAEventReceiver::Impl>,dispatch_queue_s *&,void>(void *a1, NSObject *a2)
{
  uint64_t v4 = (char *)operator new(0x90uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = &unk_1EDFA2460;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  if (a2) {
    dispatch_retain(a2);
  }
  *((void *)v4 + 7) = a2;
  *((void *)v4 + 8) = 0;
  *((void *)v4 + 12) = 0;
  *((void *)v4 + 13) = -1;
  *((void *)v4 + 14) = 0;
  *((void *)v4 + 15) = 0;
  *((void *)v4 + 16) = dispatch_semaphore_create(0);
  *((_DWORD *)v4 + 34) = 0;
  *a1 = v4 + 24;
  a1[1] = v4;
  std::shared_ptr<CAEventReceiver::Impl>::__enable_weak_this[abi:ne180100]<CAEventReceiver::Impl,CAEventReceiver::Impl,void>((uint64_t)a1, (void *)v4 + 3, (uint64_t)(v4 + 24));
}

uint64_t std::__function::__func<applesauce::dispatch::v1::block<void ()(void *,AudioUnitParameter const*,float)>,std::allocator<applesauce::dispatch::v1::block<void ()(void *,AudioUnitParameter const*,float)>>,void ()(void *,AudioUnitParameter const*,float)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, float *a4)
{
  return (*(uint64_t (**)(float))(*(void *)(a1 + 8) + 16))(*a4);
}

void std::__function::__func<applesauce::dispatch::v1::block<void ()(void *,AudioUnitParameter const*,float)>,std::allocator<applesauce::dispatch::v1::block<void ()(void *,AudioUnitParameter const*,float)>>,void ()(void *,AudioUnitParameter const*,float)>::destroy_deallocate(const void **a1)
{
  std::__function::__alloc_func<applesauce::dispatch::v1::block<void ()(void *,AudioUnitParameter const*,float)>,std::allocator<applesauce::dispatch::v1::block<void ()(void *,AudioUnitParameter const*,float)>>,void ()(void *,AudioUnitParameter const*,float)>::destroy[abi:ne180100](a1[1]);
  operator delete(a1);
}

void std::__function::__alloc_func<applesauce::dispatch::v1::block<void ()(void *,AudioUnitParameter const*,float)>,std::allocator<applesauce::dispatch::v1::block<void ()(void *,AudioUnitParameter const*,float)>>,void ()(void *,AudioUnitParameter const*,float)>::destroy[abi:ne180100](const void *a1)
{
  if (a1) {
    _Block_release(a1);
  }
}

void std::__function::__func<applesauce::dispatch::v1::block<void ()(void *,AudioUnitParameter const*,float)>,std::allocator<applesauce::dispatch::v1::block<void ()(void *,AudioUnitParameter const*,float)>>,void ()(void *,AudioUnitParameter const*,float)>::destroy(uint64_t a1)
{
}

void *std::__function::__func<applesauce::dispatch::v1::block<void ()(void *,AudioUnitParameter const*,float)>,std::allocator<applesauce::dispatch::v1::block<void ()(void *,AudioUnitParameter const*,float)>>,void ()(void *,AudioUnitParameter const*,float)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9E2D8;
  return std::__compressed_pair_elem<applesauce::dispatch::v1::block<void ()(void *,AudioUnitParameter const*,float)>,0,false>::__compressed_pair_elem[abi:ne180100]<applesauce::dispatch::v1::block<void ()(void *,AudioUnitParameter const*,float)> const&,0ul>(a2 + 1, (void **)(a1 + 8));
}

void *std::__compressed_pair_elem<applesauce::dispatch::v1::block<void ()(void *,AudioUnitParameter const*,float)>,0,false>::__compressed_pair_elem[abi:ne180100]<applesauce::dispatch::v1::block<void ()(void *,AudioUnitParameter const*,float)> const&,0ul>(void *a1, void **a2)
{
  uint64_t v3 = *a2;
  if (*a2) {
    uint64_t v3 = _Block_copy(v3);
  }
  *a1 = v3;
  return a1;
}

void *std::__function::__func<applesauce::dispatch::v1::block<void ()(void *,AudioUnitParameter const*,float)>,std::allocator<applesauce::dispatch::v1::block<void ()(void *,AudioUnitParameter const*,float)>>,void ()(void *,AudioUnitParameter const*,float)>::__clone(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 8);
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = &unk_1EDF9E2D8;
  std::__compressed_pair_elem<applesauce::dispatch::v1::block<void ()(void *,AudioUnitParameter const*,float)>,0,false>::__compressed_pair_elem[abi:ne180100]<applesauce::dispatch::v1::block<void ()(void *,AudioUnitParameter const*,float)> const&,0ul>(v2 + 1, v1);
  return v2;
}

void std::__function::__func<applesauce::dispatch::v1::block<void ()(void *,AudioUnitParameter const*,float)>,std::allocator<applesauce::dispatch::v1::block<void ()(void *,AudioUnitParameter const*,float)>>,void ()(void *,AudioUnitParameter const*,float)>::~__func(void *a1)
{
  *a1 = &unk_1EDF9E2D8;
  uint64_t v1 = (const void *)a1[1];
  if (v1) {
    _Block_release(v1);
  }
  JUMPOUT(0x192FC8940);
}

void *std::__function::__func<applesauce::dispatch::v1::block<void ()(void *,AudioUnitParameter const*,float)>,std::allocator<applesauce::dispatch::v1::block<void ()(void *,AudioUnitParameter const*,float)>>,void ()(void *,AudioUnitParameter const*,float)>::~__func(void *a1)
{
  *a1 = &unk_1EDF9E2D8;
  uint64_t v2 = (const void *)a1[1];
  if (v2) {
    _Block_release(v2);
  }
  return a1;
}

OSStatus AUListenerDispose(AUParameterListenerRef inListener)
{
  uint64_t v1 = (ListenerMap *)BaseOpaqueObject::ResolveOpaqueRef();
  if (!v1) {
    return -50;
  }
  uint64_t v2 = v1;
  ListenerMap::instance(v1);
  long long v10 = v2;
  uint64_t v8 = ListenerMap::instance(void)::global;
  CFStringRef v9 = (caulk::alloc::base_allocator *)&xmmword_1E9296820;
  caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::begin_traversal();
  unint64_t v3 = atomic_load((unint64_t *)&qword_1E9296730);
  v6[0] = &v10;
  v6[1] = ListenerMap::instance(void)::global;
  v7[0] = (uint64_t (*)(void, unint64_t, void))caulk::function_ref<BOOL ()(ListenerMap::MapKey const&,ListenerMap::MapNode &)>::functor_invoker<ListenerMap::RemoveListener(AUListener *)::$_0>;
  v7[1] = (uint64_t (*)(void, unint64_t, void))v6;
  ListenerMap::forEachBinding((uint64_t)&v8, v3 & 0xFFFFFFFFFFFFFFFCLL, v7);
  caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::end_traversal(v9, v4);
  CAEventReceiver::invalidate((ListenerMap *)((char *)v2 + 16));
  (*(void (**)(ListenerMap *))(*(void *)v2 + 8))(v2);
  return 0;
}

void sub_1900C49F4(_Unwind_Exception *a1@<X0>, unint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, caulk::alloc::base_allocator *a9)
{
}

void ListenerMap::instance(ListenerMap *this)
{
  {
    memset(v4, 0, sizeof(v4));
    uint64_t v5 = 0;
    *(void *)&long long v1 = -1;
    *((void *)&v1 + 1) = -1;
    v2[0] = v1;
    v2[1] = v1;
    uint64_t v3 = -1;
    caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::skiplist((uint64_t)v4, (uint64_t)v2);
    dword_1E9296870 = 0;
  }
}

void caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::skiplist(uint64_t a1, uint64_t a2)
{
  xmmword_1E9296820 = 0u;
  *(_OWORD *)&qword_1E9296830 = 0u;
  xmmword_1E9296800 = 0u;
  *(_OWORD *)&qword_1E9296810 = 0u;
  xmmword_1E92967E0 = 0u;
  *(_OWORD *)&qword_1E92967F0 = 0u;
  xmmword_1E92967C0 = 0u;
  xmmword_1E92967D0 = 0u;
  xmmword_1E92967A0 = 0u;
  unk_1E92967B0 = 0u;
  xmmword_1E9296780 = 0u;
  unk_1E9296790 = 0u;
  xmmword_1E9296760 = 0u;
  unk_1E9296770 = 0u;
  xmmword_1E9296740 = 0u;
  unk_1E9296750 = 0u;
  xmmword_1E9296720 = 0u;
  *(_OWORD *)&qword_1E9296730 = 0u;
  xmmword_1E9296700 = 0u;
  *(_OWORD *)&qword_1E9296710 = 0u;
  ListenerMap::instance(void)::global[0] = 0u;
  os_unfair_lock_lock((os_unfair_lock_t)&caulk::alloc::shared_allocator<caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>>::shared_instance(void)::global);
  if (qword_1E9276768)
  {
    unint64_t v4 = std::__shared_weak_count::lock((std::__shared_weak_count *)qword_1E9276768);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t p_shared_owners = qword_1E9276760;
      if (qword_1E9276760) {
        goto LABEL_9;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  uint64_t v5 = (std::__shared_weak_count *)operator new(0x1A0uLL);
  v5->__shared_owners_ = 0;
  v5->__shared_weak_owners_ = 0;
  *(_OWORD *)&v5[1].__shared_owners_ = 0u;
  uint64_t p_shared_owners = (uint64_t)&v5[1].__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2A48;
  v5[2].std::__shared_count = 0u;
  *(_OWORD *)&v5[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v5[3].__shared_owners_ = 0u;
  v5[4].std::__shared_count = 0u;
  *(_OWORD *)&v5[4].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v5[5].__shared_owners_ = 0u;
  v5[6].std::__shared_count = 0u;
  *(_OWORD *)&v5[6].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v5[7].__shared_owners_ = 0u;
  v5[8].std::__shared_count = 0u;
  *(_OWORD *)&v5[8].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v5[9].__shared_owners_ = 0u;
  v5[10].std::__shared_count = 0u;
  *(_OWORD *)&v5[10].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v5[11].__shared_owners_ = 0u;
  v5[12].std::__shared_count = 0u;
  *(_OWORD *)&v5[12].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v5[13].__shared_owners_ = 0u;
  v5[14].std::__shared_count = 0u;
  *(_OWORD *)&v5[14].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v5[15].__shared_owners_ = 0u;
  v5[16].std::__shared_count = 0u;
  *(_OWORD *)&v5[16].__shared_weak_owners_ = 0u;
  uint64_t v7 = caulk::alloc::global_page_cache::instance((caulk::alloc::global_page_cache *)v5);
  v5[3].__shared_owners_ = 0;
  v5[1].__shared_weak_owners_ = v7 + 16;
  v5[2].__vftable = 0;
  v5[2].__shared_owners_ = 0;
  v5[2].__shared_weak_owners_ = 0;
  uint64_t v8 = 96;
  LODWORD(v5[3].__vftable) = 0;
  do
  {
    CFStringRef v9 = (std::__shared_weak_count_vtbl **)((char *)&v5->__vftable + v8);
    *CFStringRef v9 = 0;
    v9[1] = 0;
    v9[2] = 0;
    v8 += 32;
  }
  while (v8 != 416);
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  long long v10 = (std::__shared_weak_count *)qword_1E9276768;
  qword_1E9276760 = (uint64_t)&v5[1].__shared_owners_;
  qword_1E9276768 = (uint64_t)v5;
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)&caulk::alloc::shared_allocator<caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>>::shared_instance(void)::global);
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v11 = (std::__shared_weak_count *)qword_1E9296838;
  qword_1E9296830 = p_shared_owners;
  qword_1E9296838 = (uint64_t)v5;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  qword_1E9296840 = (uint64_t)&caulk::inplace_function_detail::vtable<void,caulk::concurrent::details::skiplist_node<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>>::layout_kv const&>::empty;
  caulk::concurrent::skiplist<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10,(caulk::concurrent::skiplist_options)0>::random_engine();
  uint64_t v12 = 0;
  long long v13 = *(_OWORD *)a1;
  long long v17 = *(_OWORD *)(a1 + 16);
  uint64_t v14 = *(void *)(a1 + 32);
  LODWORD(xmmword_1E9296720) = 167837706;
  ListenerMap::instance(void)::global[0] = v13;
  xmmword_1E9296700 = v17;
  qword_1E9296710 = v14;
  unk_1E9296718 = 0;
  qword_1E9296730 = 0;
  unk_1E9296738 = 0;
  *((void *)&xmmword_1E9296720 + 1) = 0;
  do
  {
    atomic_store(0, (unint64_t *)&ListenerMap::instance(void)::global[v12 + 4]);
    atomic_store(0, (unint64_t *)&ListenerMap::instance(void)::global[v12 + 4] + 1);
    ++v12;
  }
  while (v12 != 10);
  long long v15 = *(_OWORD *)a2;
  long long v18 = *(_OWORD *)(a2 + 16);
  uint64_t v19 = *(void *)(a2 + 32);
  LODWORD(xmmword_1E9296800) = 16908289;
  xmmword_1E92967D0 = v15;
  xmmword_1E92967E0 = v18;
  qword_1E92967F0 = v19;
  unk_1E92967F8 = 0;
  qword_1E9296818 = 0;
  *((void *)&xmmword_1E9296800 + 1) = 0;
  qword_1E9296810 = 0;
  atomic_store(0, (unint64_t *)&qword_1E9296810);
  uint64_t v16 = 4u;
  atomic_store(0, (unint64_t *)&qword_1E9296818);
  do
    atomic_store((unint64_t)&xmmword_1E92967D0, (unint64_t *)&ListenerMap::instance(void)::global[v16++]);
  while (v16 != 14);
  __dmb(0xBu);
}

void sub_1900C4D08(void *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  os_unfair_lock_unlock((os_unfair_lock_t)&caulk::alloc::shared_allocator<caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>>::shared_instance(void)::global);
  if (qword_1E9296838) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)qword_1E9296838);
  }
  __clang_call_terminate(a1);
}

void caulk::inplace_function_detail::vtable<void,caulk::concurrent::details::skiplist_node<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>>::layout_kv const&>::vtable(void)::{lambda(void *,caulk::concurrent::details::skiplist_node<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>>::layout_kv const&)#1}::__invoke()
{
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
}

uint64_t std::__shared_ptr_emplace<caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = 0;
  uint64_t v2 = a1 + 32;
  uint64_t v3 = a1 + 96;
  do
  {
    for (uint64_t i = *(void *)&caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>::Sizes[8 * v1];
          ;
          caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>::deallocate(v2, (unint64_t)v5, i))
    {
      uint64_t v5 = caulk::concurrent::stack<caulk::alloc::free_block,caulk::concurrent::intrusive_single_link_node<caulk::alloc::free_block>>::pop();
      if (!v5) {
        break;
      }
      atomic_fetch_add((atomic_ullong *volatile)(v3 + 32 * v1 + 16), 0xFFFFFFFFFFFFFFFFLL);
    }
    ++v1;
  }
  while (v1 != 10);
  return caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>::self_deallocate_all(v2);
}

uint64_t caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>::self_deallocate_all(uint64_t result)
{
  uint64_t v1 = *(unint64_t **)(result + 16);
  if (v1)
  {
    do
    {
      unint64_t v2 = atomic_load(v1);
      OSStatus result = caulk::alloc::details::caching_page_allocator_base::deallocate();
      uint64_t v1 = (unint64_t *)v2;
    }
    while (v2);
  }
  return result;
}

uint64_t caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>::deallocate(uint64_t result, unint64_t a2, uint64_t a3)
{
  atomic_fetch_add((atomic_uint *volatile)(result + 40), 0x801u);
  uint64_t v3 = *(unint64_t **)(result + 16);
  if (v3)
  {
    while ((unint64_t)(v3 + 4) > a2 || a2 + a3 > (unint64_t)(v3 + 2048))
    {
      uint64_t v3 = (unint64_t *)atomic_load(v3);
      if (!v3) {
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    uint64_t v3 = (unint64_t *)atomic_load((unint64_t *)(result + 48));
    if (v3) {
      BOOL v5 = (unint64_t)(v3 + 4) > a2;
    }
    else {
      BOOL v5 = 1;
    }
    if (v5 || a2 + a3 > (unint64_t)(v3 + 2048)) {
LABEL_19:
    }
      caulk::alloc::base_allocator::bad_dealloc((caulk::alloc::base_allocator *)result);
  }
  if (!v3) {
    goto LABEL_19;
  }
  if ((unint64_t)(v3 + 4) > a2 || a2 + a3 > (unint64_t)(v3 + 2048)) {
    caulk::alloc::base_allocator::bad_dealloc((caulk::alloc::base_allocator *)result);
  }
  atomic_fetch_add((atomic_uint *volatile)(result + 40), 0xFFFFFFFF);
  return result;
}

void sub_1900C4F38(_Unwind_Exception *a1)
{
  atomic_fetch_add((atomic_uint *volatile)(v1 + 40), 0xFFFFFFFF);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2A48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FC8940);
}

void std::__shared_ptr_emplace<caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<ListenerMap::MapKey,std::unique_ptr<ListenerMap::MapNode>,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFA2A48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

OSStatus AUListenerAddParameter(AUParameterListenerRef inListener, void *inObject, const AudioUnitParameter *inParameter)
{
  if (!inParameter) {
    return -50;
  }
  BOOL v5 = (ListenerMap *)BaseOpaqueObject::ResolveOpaqueRef();
  if (!v5) {
    return -50;
  }
  uint64_t v6 = (uint64_t)v5;
  uint64_t v8 = 0;
  long long v9 = *(_OWORD *)&inParameter->mAudioUnit;
  uint64_t v10 = *(void *)&inParameter->mElement;
  ListenerMap::instance(v5);
  return ListenerMap::AddParameter(v6, (uint64_t)inObject, (uint64_t)&v8);
}

OSStatus AUListenerRemoveParameter(AUParameterListenerRef inListener, void *inObject, const AudioUnitParameter *inParameter)
{
  uint64_t v5 = BaseOpaqueObject::ResolveOpaqueRef();
  OSStatus result = -50;
  if (inParameter && v5)
  {
    uint64_t v7 = 0;
    long long v8 = *(_OWORD *)&inParameter->mAudioUnit;
    uint64_t v9 = *(void *)&inParameter->mElement;
    ListenerMap::instance((ListenerMap *)0xFFFFFFCELL);
    uint64_t v12 = inObject;
    uint64_t v13 = v5;
    v10[0] = &v13;
    v10[1] = &v12;
    void v10[2] = ListenerMap::instance(void)::global;
    v11[0] = caulk::function_ref<BOOL ()(ListenerMap::MapKey const&,ListenerMap::MapNode &)>::functor_invoker<ListenerMap::RemoveEvent(AUListener *,void *,XAudioUnitEvent const&)::$_0>;
    v11[1] = v10;
    if (ListenerMap::forEachBindingForEvent(&v7, (uint64_t)v11)) {
      return 0;
    }
    else {
      return -50;
    }
  }
  return result;
}

OSStatus AUParameterSet(AUParameterListenerRef inSendingListener, void *inSendingObject, const AudioUnitParameter *inParameter, AudioUnitParameterValue inValue, UInt32 inBufferOffsetInFrames)
{
  AudioUnitParameterValue v13 = inValue;
  if (inParameter)
  {
    uint64_t v9 = (ListenerMap *)BaseOpaqueObject::ResolveOpaqueRef();
    uint64_t v10 = (ListenerMap *)AudioUnitSetParameter(inParameter->mAudioUnit, inParameter->mParameterID, inParameter->mScope, inParameter->mElement, inValue, inBufferOffsetInFrames);
    if (!v10)
    {
      ListenerMap::instance(v10);
      LODWORD(v10) = ListenerMap::NotifyParameterChange(v9, (AUListener *)inSendingObject, (unsigned int *)inParameter, (const XAUParameter *)&v13, v11);
    }
  }
  else
  {
    LODWORD(v10) = -50;
  }
  return (int)v10;
}

OSStatus AUParameterListenerNotify(AUParameterListenerRef inSendingListener, void *inSendingObject, const AudioUnitParameter *inParameter)
{
  if (!inParameter) {
    return -50;
  }
  uint64_t v5 = (ListenerMap *)BaseOpaqueObject::ResolveOpaqueRef();
  ListenerMap::instance(v5);
  return ListenerMap::NotifyParameterChange(v5, (AUListener *)inSendingObject, (unsigned int *)inParameter, 0, v6);
}

OSStatus AUEventListenerCreate(AUEventListenerProc inProc, void *inUserData, CFRunLoopRef inRunLoop, CFStringRef inRunLoopMode, Float32 inNotificationInterval, Float32 inValueChangeGranularity, AUEventListenerRef *outListener)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  OSStatus result = -50;
  if (inRunLoopMode && inRunLoop && inProc)
  {
    if (outListener)
    {
      std::allocate_shared[abi:ne180100]<CAEventReceiver::Impl,std::allocator<CAEventReceiver::Impl>,__CFRunLoop *&,__CFString const*&,void>(&v9, inRunLoop, inRunLoopMode);
      operator new();
    }
  }
  return result;
}

void sub_1900C5328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  CAEventReceiver::~CAEventReceiver((std::__shared_weak_count **)&a9);
  std::__function::__value_func<void ()(void *,AudioUnitEvent const*,unsigned long long,float)>::~__value_func[abi:ne180100](&a14);
  MEMORY[0x192FC8940](v14, 0x10A1C403884EDB4);
  CAEventReceiver::~CAEventReceiver(&a11);
  _Unwind_Resume(a1);
}

uint64_t AUEventListener::AUEventListener(uint64_t a1, uint64_t a2, long long *a3, double a4, double a5)
{
  v15[4] = *MEMORY[0x1E4F143B8];
  long long v9 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  long long v14 = v9;
  v13[0] = 0;
  v13[1] = 0;
  BaseOpaqueObject::BaseOpaqueObject((BaseOpaqueObject *)a1);
  *(void *)a1 = &unk_1EDF8C178;
  *(_OWORD *)(a1 + 16) = v14;
  long long v14 = 0uLL;
  *(double *)(a1 + 32) = a4;
  *(double *)(a1 + 40) = a5;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  CAEventReceiver::~CAEventReceiver((std::__shared_weak_count **)&v14);
  *(void *)a1 = &unk_1EDF92840;
  *(void *)(a1 + 64) = (unint64_t)(a5 * 24000000.0);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  v15[0] = &unk_1EDFA07F8;
  v15[1] = a1;
  v15[3] = v15;
  CAEventReceiver::createTimer(*(void *)(a1 + 16), (uint64_t)v15);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v15);
  CAEventReceiver::~CAEventReceiver(v13);
  *(void *)a1 = &unk_1EDF8FC78;
  uint64_t v10 = (void *)(a2 + 24);
  uint64_t v11 = *(void *)(a2 + 24);
  if (v11)
  {
    if (v11 == a2)
    {
      *(void *)(a1 + 160) = a1 + 136;
      (*(void (**)(void, uint64_t))(*(void *)*v10 + 24))(*v10, a1 + 136);
      return a1;
    }
    *(void *)(a1 + 160) = v11;
  }
  else
  {
    uint64_t v10 = (void *)(a1 + 160);
  }
  *uint64_t v10 = 0;
  return a1;
}

void sub_1900C5524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AUEventListenerCreate::$_0,std::allocator<AUEventListenerCreate::$_0>,void ()(void *,AudioUnitEvent const*,unsigned long long,float)>::operator()(uint64_t a1, void *a2, void *a3, void *a4, float *a5)
{
  return (*(uint64_t (**)(void, void, void, void, float))(a1 + 8))(*(void *)(a1 + 16), *a2, *a3, *a4, *a5);
}

__n128 std::__function::__func<AUEventListenerCreate::$_0,std::allocator<AUEventListenerCreate::$_0>,void ()(void *,AudioUnitEvent const*,unsigned long long,float)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EDF9E560;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AUEventListenerCreate::$_0,std::allocator<AUEventListenerCreate::$_0>,void ()(void *,AudioUnitEvent const*,unsigned long long,float)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_1EDF9E560;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<AUEventListenerCreate::$_0,std::allocator<AUEventListenerCreate::$_0>,void ()(void *,AudioUnitEvent const*,unsigned long long,float)>::~__func()
{
}

OSStatus AUEventListenerCreateWithDispatchQueue(AUEventListenerRef *outListener, Float32 inNotificationInterval, Float32 inValueChangeGranularity, dispatch_queue_t inDispatchQueue, AUEventListenerBlock inBlock)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  OSStatus result = -50;
  if (inDispatchQueue && outListener)
  {
    if (inBlock)
    {
      _Block_copy(inBlock);
      std::allocate_shared[abi:ne180100]<CAEventReceiver::Impl,std::allocator<CAEventReceiver::Impl>,dispatch_queue_s *&,void>(&v8, inDispatchQueue);
      operator new();
    }
  }
  return result;
}

void sub_1900C573C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t std::__function::__func<applesauce::dispatch::v1::block<void ()(void *,AudioUnitEvent const*,unsigned long long,float)>,std::allocator<applesauce::dispatch::v1::block<void ()(void *,AudioUnitEvent const*,unsigned long long,float)>>,void ()(void *,AudioUnitEvent const*,unsigned long long,float)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float *a5)
{
  return (*(uint64_t (**)(float))(*(void *)(a1 + 8) + 16))(*a5);
}

void std::__function::__func<applesauce::dispatch::v1::block<void ()(void *,AudioUnitEvent const*,unsigned long long,float)>,std::allocator<applesauce::dispatch::v1::block<void ()(void *,AudioUnitEvent const*,unsigned long long,float)>>,void ()(void *,AudioUnitEvent const*,unsigned long long,float)>::destroy_deallocate(const void **a1)
{
  std::__function::__alloc_func<applesauce::dispatch::v1::block<void ()(void *,AudioUnitEvent const*,unsigned long long,float)>,std::allocator<applesauce::dispatch::v1::block<void ()(void *,AudioUnitEvent const*,unsigned long long,float)>>,void ()(void *,AudioUnitEvent const*,unsigned long long,float)>::destroy[abi:ne180100](a1[1]);
  operator delete(a1);
}

void std::__function::__alloc_func<applesauce::dispatch::v1::block<void ()(void *,AudioUnitEvent const*,unsigned long long,float)>,std::allocator<applesauce::dispatch::v1::block<void ()(void *,AudioUnitEvent const*,unsigned long long,float)>>,void ()(void *,AudioUnitEvent const*,unsigned long long,float)>::destroy[abi:ne180100](const void *a1)
{
  if (a1) {
    _Block_release(a1);
  }
}

void std::__function::__func<applesauce::dispatch::v1::block<void ()(void *,AudioUnitEvent const*,unsigned long long,float)>,std::allocator<applesauce::dispatch::v1::block<void ()(void *,AudioUnitEvent const*,unsigned long long,float)>>,void ()(void *,AudioUnitEvent const*,unsigned long long,float)>::destroy(uint64_t a1)
{
}

void *std::__function::__func<applesauce::dispatch::v1::block<void ()(void *,AudioUnitEvent const*,unsigned long long,float)>,std::allocator<applesauce::dispatch::v1::block<void ()(void *,AudioUnitEvent const*,unsigned long long,float)>>,void ()(void *,AudioUnitEvent const*,unsigned long long,float)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDF9E290;
  return std::__compressed_pair_elem<applesauce::dispatch::v1::block<void ()(void *,AudioUnitEvent const*,unsigned long long,float)>,0,false>::__compressed_pair_elem[abi:ne180100]<applesauce::dispatch::v1::block<void ()(void *,AudioUnitEvent const*,unsigned long long,float)> const&,0ul>(a2 + 1, (void **)(a1 + 8));
}

void *std::__compressed_pair_elem<applesauce::dispatch::v1::block<void ()(void *,AudioUnitEvent const*,unsigned long long,float)>,0,false>::__compressed_pair_elem[abi:ne180100]<applesauce::dispatch::v1::block<void ()(void *,AudioUnitEvent const*,unsigned long long,float)> const&,0ul>(void *a1, void **a2)
{
  uint64_t v3 = *a2;
  if (*a2) {
    uint64_t v3 = _Block_copy(v3);
  }
  *a1 = v3;
  return a1;
}

void *std::__function::__func<applesauce::dispatch::v1::block<void ()(void *,AudioUnitEvent const*,unsigned long long,float)>,std::allocator<applesauce::dispatch::v1::block<void ()(void *,AudioUnitEvent const*,unsigned long long,float)>>,void ()(void *,AudioUnitEvent const*,unsigned long long,float)>::__clone(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 8);
  unint64_t v2 = operator new(0x10uLL);
  void *v2 = &unk_1EDF9E290;
  std::__compressed_pair_elem<applesauce::dispatch::v1::block<void ()(void *,AudioUnitEvent const*,unsigned long long,float)>,0,false>::__compressed_pair_elem[abi:ne180100]<applesauce::dispatch::v1::block<void ()(void *,AudioUnitEvent const*,unsigned long long,float)> const&,0ul>(v2 + 1, v1);
  return v2;
}

void std::__function::__func<applesauce::dispatch::v1::block<void ()(void *,AudioUnitEvent const*,unsigned long long,float)>,std::allocator<applesauce::dispatch::v1::block<void ()(void *,AudioUnitEvent const*,unsigned long long,float)>>,void ()(void *,AudioUnitEvent const*,unsigned long long,float)>::~__func(void *a1)
{
  *a1 = &unk_1EDF9E290;
  uint64_t v1 = (const void *)a1[1];
  if (v1) {
    _Block_release(v1);
  }
  JUMPOUT(0x192FC8940);
}

void *std::__function::__func<applesauce::dispatch::v1::block<void ()(void *,AudioUnitEvent const*,unsigned long long,float)>,std::allocator<applesauce::dispatch::v1::block<void ()(void *,AudioUnitEvent const*,unsigned long long,float)>>,void ()(void *,AudioUnitEvent const*,unsigned long long,float)>::~__func(void *a1)
{
  *a1 = &unk_1EDF9E290;
  unint64_t v2 = (const void *)a1[1];
  if (v2) {
    _Block_release(v2);
  }
  return a1;
}

OSStatus AUEventListenerAddEventType(AUEventListenerRef inListener, void *inObject, const AudioUnitEvent *inEvent)
{
  uint64_t v5 = (ListenerMap *)BaseOpaqueObject::ResolveOpaqueRef();
  if (!v5) {
    return -50;
  }
  uint64_t v6 = (uint64_t)v5;
  ListenerMap::instance(v5);
  AudioUnitEventType mEventType = inEvent->mEventType;
  if (inEvent->mEventType - 1 < 2)
  {
    uint64_t v15 = v6;
    uint64_t v12 = &v15;
    AudioUnitParameterValue v13 = &v14;
    long long v14 = inObject;
    *(void *)&long long v10 = caulk::function_ref<BOOL ()(ListenerMap::MapKey const&,ListenerMap::MapNode &)>::functor_invoker<ListenerMap::CanInsertEvent(AUListener *,void *,XAudioUnitEvent const&)::$_0>;
    *((void *)&v10 + 1) = &v12;
    if (ListenerMap::forEachBindingForEvent(inEvent, (uint64_t)&v10)
      || !(*(uint64_t (**)(uint64_t, void *, const AudioUnitEvent *))(*(void *)v6 + 40))(v6, inObject, inEvent))
    {
      return -50;
    }
    goto LABEL_13;
  }
  if (mEventType == kAudioUnitEvent_PropertyChange)
  {
    uint64_t v15 = v6;
    uint64_t v12 = &v15;
    AudioUnitParameterValue v13 = &v14;
    long long v14 = inObject;
    *(void *)&long long v10 = caulk::function_ref<BOOL ()(ListenerMap::MapKey const&,ListenerMap::MapNode &)>::functor_invoker<ListenerMap::CanInsertEvent(AUListener *,void *,XAudioUnitEvent const&)::$_0>;
    *((void *)&v10 + 1) = &v12;
    if (ListenerMap::forEachBindingForEvent(inEvent, (uint64_t)&v10)) {
      return -50;
    }
    long long v9 = *(_OWORD *)&inEvent->mArgument.mProperty.mPropertyID;
    long long v10 = *(_OWORD *)&inEvent->mEventType;
    long long v11 = v9;
    *(void *)((char *)&v11 + 4) = 0;
    if (!(*(uint64_t (**)(uint64_t, void *, const AudioUnitEvent *))(*(void *)v6 + 48))(v6, inObject, inEvent))return -50; {
LABEL_13:
    }
    ListenerMap::InsertEvent();
  }
  if (mEventType) {
    return -50;
  }
  return ListenerMap::AddParameter(v6, (uint64_t)inObject, (uint64_t)inEvent);
}

OSStatus AUEventListenerRemoveEventType(AUEventListenerRef inListener, void *inObject, const AudioUnitEvent *inEvent)
{
  uint64_t v5 = (ListenerMap *)BaseOpaqueObject::ResolveOpaqueRef();
  if (!v5) {
    return -50;
  }
  uint64_t v6 = v5;
  ListenerMap::instance(v5);
  OSStatus v7 = -50;
  if (inEvent->mEventType >= kAudioUnitEvent_PropertyChange)
  {
    if (inEvent->mEventType == kAudioUnitEvent_PropertyChange)
    {
      long long v8 = *(_OWORD *)&inEvent->mArgument.mProperty.mPropertyID;
      long long v10 = *(_OWORD *)&inEvent->mEventType;
      long long v11 = v8;
      *(void *)((char *)&v11 + 4) = 0;
      uint64_t v16 = inObject;
      long long v17 = v6;
      v12[0] = &v17;
      v12[1] = &v16;
      _OWORD v12[2] = ListenerMap::instance(void)::global;
      AudioUnitParameterValue v13 = caulk::function_ref<BOOL ()(ListenerMap::MapKey const&,ListenerMap::MapNode &)>::functor_invoker<ListenerMap::RemoveEvent(AUListener *,void *,XAudioUnitEvent const&)::$_0>;
      long long v14 = (void **)v12;
      if (ListenerMap::forEachBindingForEvent(&v10, (uint64_t)&v13)) {
        return 0;
      }
      else {
        return -50;
      }
    }
  }
  else
  {
    v12[0] = v6;
    long long v17 = inObject;
    AudioUnitParameterValue v13 = (uint64_t (*)(uint64_t, uint64_t, caulk::pooled_semaphore_mutex *))v12;
    long long v14 = &v17;
    uint64_t v15 = ListenerMap::instance(void)::global;
    *(void *)&long long v10 = caulk::function_ref<BOOL ()(ListenerMap::MapKey const&,ListenerMap::MapNode &)>::functor_invoker<ListenerMap::RemoveEvent(AUListener *,void *,XAudioUnitEvent const&)::$_0>;
    *((void *)&v10 + 1) = &v13;
    if (ListenerMap::forEachBindingForEvent(inEvent, (uint64_t)&v10)) {
      return 0;
    }
    else {
      return -50;
    }
  }
  return v7;
}

OSStatus AUEventListenerNotify(AUEventListenerRef inSendingListener, void *inSendingObject, const AudioUnitEvent *inEvent)
{
  uint64_t v5 = (ListenerMap *)BaseOpaqueObject::ResolveOpaqueRef();
  if (!inEvent || inEvent->mEventType == kAudioUnitEvent_PropertyChange) {
    return -50;
  }
  OSStatus v7 = v5;
  ListenerMap::instance(v5);
  if (inEvent->mEventType)
  {
    uint64_t v12 = v7;
    long long v11 = inSendingObject;
    v9[0] = &v12;
    v9[1] = &v11;
    v10[0] = caulk::function_ref<BOOL ()(ListenerMap::MapKey const&,ListenerMap::MapNode &)>::functor_invoker<ListenerMap::NotifyEvent(AUListener *,void *,XAudioUnitEvent const&)::$_0>;
    v10[1] = v9;
    ListenerMap::forEachBindingForEvent(inEvent, (uint64_t)v10);
    return 0;
  }
  else
  {
    return ListenerMap::NotifyParameterChange(v7, (AUListener *)inSendingObject, (unsigned int *)&inEvent->mArgument, 0, v8);
  }
}

intptr_t AUEventListenerFlush(AUListenerBase *a1)
{
  intptr_t result = BaseOpaqueObject::ResolveOpaqueRef();
  if (result)
  {
    uint64_t v2 = *(void *)(result + 16);
    atomic_fetch_add((atomic_uint *volatile)(v2 + 112), 1u);
    intptr_t result = CAEventReceiver::Impl::timerShouldFireWithin((CAEventReceiver::Impl *)v2, 0.0);
    if (result)
    {
      uint64_t v3 = *(NSObject **)(v2 + 104);
      return dispatch_semaphore_wait(v3, 0xFFFFFFFFFFFFFFFFLL);
    }
    else
    {
      atomic_fetch_add((atomic_uint *volatile)(v2 + 112), 0xFFFFFFFF);
    }
  }
  return result;
}

AudioUnitParameterValue AUParameterValueFromLinear(Float32 inLinearValue, const AudioUnitParameter *inParameter)
{
  if (!inParameter) {
    return -50.0;
  }
  XAUParameter::GetParamProxy((XAUParameter *)v7, &inParameter->mAudioUnit);
  if (!v10) {
    return 0.0;
  }
  uint64_t v3 = v8;
  uint64_t Transformer = GetTransformer(*(_DWORD *)(v8 + 40));
  float v5 = (*(double (**)(uint64_t, double, double, double))(*(void *)Transformer + 8))(Transformer, inLinearValue, *(float *)(v3 + 28), *(float *)(v3 + 32));
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  return v5;
}

void sub_1900C5E68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13)
{
  if (*(void *)((char *)&a13 + 4)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)((char *)&a13 + 4));
  }
  _Unwind_Resume(exception_object);
}

uint64_t GetTransformer(int a1)
{
  uint64_t v2 = gTransformers;
  if (!gTransformers)
  {
    pthread_once(&sOnce, (void (*)(void))InitAllTransformers);
    uint64_t v2 = gTransformers;
  }
  int v3 = a1 & 0x470000;
  uint64_t v4 = v2 + 48;
  uint64_t v5 = v2 + 16;
  uint64_t v6 = v2 + 8;
  if ((a1 & 0x470000) != 0x400000) {
    uint64_t v6 = v2;
  }
  if (v3 != 327680) {
    uint64_t v5 = v6;
  }
  if (v3 != 0x40000) {
    uint64_t v4 = v5;
  }
  uint64_t v7 = v2 + 24;
  uint64_t v8 = v2 + 32;
  if (v3 == 196608) {
    v2 += 40;
  }
  if (v3 == 0x20000) {
    uint64_t v2 = v8;
  }
  if (v3 == 0x10000) {
    uint64_t v2 = v7;
  }
  if ((a1 & 0x470000u) < 0x40000) {
    return v2;
  }
  else {
    return v4;
  }
}

void InitAllTransformers(void)
{
}

void CubeRtTransformer::~CubeRtTransformer(CubeRtTransformer *this)
{
}

double CubeRtTransformer::fromlinear(CubeRtTransformer *this, double a2, double a3, double a4)
{
  return a3 + (a4 - a3) * (a2 * a2 * a2);
}

long double CubeRtTransformer::tolinear(CubeRtTransformer *this, double a2, double a3, double a4)
{
  return pow((a2 - a3) / (a4 - a3), 0.333333333);
}

void CubeTransformer::~CubeTransformer(CubeTransformer *this)
{
}

long double CubeTransformer::fromlinear(CubeTransformer *this, long double a2, double a3, double a4)
{
  return a3 + (a4 - a3) * pow(a2, 0.333333333);
}

double CubeTransformer::tolinear(CubeTransformer *this, double a2, double a3, double a4)
{
  return (a2 - a3) / (a4 - a3) * ((a2 - a3) / (a4 - a3) * ((a2 - a3) / (a4 - a3)));
}

void SquareTransformer::~SquareTransformer(SquareTransformer *this)
{
}

double SquareTransformer::fromlinear(SquareTransformer *this, double a2, double a3, double a4)
{
  return a3 + (a4 - a3) * sqrt(a2);
}

double SquareTransformer::tolinear(SquareTransformer *this, double a2, double a3, double a4)
{
  return (a2 - a3) / (a4 - a3) * ((a2 - a3) / (a4 - a3));
}

void SqrtTransformer::~SqrtTransformer(SqrtTransformer *this)
{
}

double SqrtTransformer::fromlinear(SqrtTransformer *this, double a2, double a3, double a4)
{
  return a3 + (a4 - a3) * (a2 * a2);
}

double SqrtTransformer::tolinear(SqrtTransformer *this, double a2, double a3, double a4)
{
  return sqrt((a2 - a3) / (a4 - a3));
}

void ExpTransformer::~ExpTransformer(ExpTransformer *this)
{
}

long double ExpTransformer::fromlinear(ExpTransformer *this, double a2, long double a3, long double a4)
{
  double v6 = exp(a3);
  long double v7 = v6 + (exp(a4) - v6) * a2;
  return log(v7);
}

long double ExpTransformer::tolinear(ExpTransformer *this, long double a2, long double a3, long double a4)
{
  double v6 = exp(a2);
  double v7 = exp(a3);
  return (v6 - v7) / (exp(a4) - v7);
}

void LogTransformer::~LogTransformer(LogTransformer *this)
{
}

long double LogTransformer::fromlinear(LogTransformer *this, long double a2, double a3, double a4)
{
  return pow(a4 / a3, a2) * a3;
}

long double LogTransformer::tolinear(LogTransformer *this, long double a2, long double a3, long double a4)
{
  double v6 = log(a2);
  double v7 = log(a3);
  return (v6 - v7) / (log(a4) - v7);
}

void LinearTransformer::~LinearTransformer(LinearTransformer *this)
{
}

double LinearTransformer::fromlinear(LinearTransformer *this, double a2, double a3, double a4)
{
  return a3 + (a4 - a3) * a2;
}

double LinearTransformer::tolinear(LinearTransformer *this, double a2, double a3, double a4)
{
  return (a2 - a3) / (a4 - a3);
}

Float32 AUParameterValueToLinear(AudioUnitParameterValue inParameterValue, const AudioUnitParameter *inParameter)
{
  if (!inParameter) {
    return -50.0;
  }
  XAUParameter::GetParamProxy((XAUParameter *)v7, &inParameter->mAudioUnit);
  if (!v10) {
    return 0.0;
  }
  uint64_t v3 = v8;
  uint64_t Transformer = (double (***)(void, double, double, double))GetTransformer(*(_DWORD *)(v8 + 40));
  float v5 = (**Transformer)(Transformer, inParameterValue, *(float *)(v3 + 28), *(float *)(v3 + 32));
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  return v5;
}

void sub_1900C639C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13)
{
  if (*(void *)((char *)&a13 + 4)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)((char *)&a13 + 4));
  }
  _Unwind_Resume(exception_object);
}

char *__cdecl AUParameterFormatValue(Float64 inParameterValue, const AudioUnitParameter *inParameter, char *inTextBuffer, UInt32 inDigits)
{
  *inTextBuffer = 0;
  if (inParameter)
  {
    XAUParameter::GetParamProxy((XAUParameter *)v9, &inParameter->mAudioUnit);
    if (v12)
    {
      Float64 v7 = inParameterValue;
      if (*(_DWORD *)(v10 + 24) != 8) {
        Float64 v7 = (float)(*(float *)(v10 + 32) - *(float *)(v10 + 28));
      }
      if (v7 < 0.000001) {
        Float64 v7 = 0.000001;
      }
      if ((int)(~(int)log10(v7) + inDigits) < 1) {
        snprintf(inTextBuffer, 0x20uLL, "%.0f");
      }
      else {
        snprintf(inTextBuffer, 0x20uLL, "%.*f");
      }
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
    }
  }
  return inTextBuffer;
}

void sub_1900C6528(_Unwind_Exception *a1)
{
  objc_sync_exit(v2);
  _Unwind_Resume(a1);
}

void sub_1900C65E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  char v12 = v11;

  objc_sync_exit(v10);
  _Unwind_Resume(a1);
}

void sub_1900C66F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  objc_sync_exit(v11);
  _Unwind_Resume(a1);
}

void sub_1900C67A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CA::ADMBuilder::Impl::parse_model(CA::ADMBuilder::Impl *this, char *__s1, const char **a3)
{
  uint64_t v233 = *MEMORY[0x1E4F143B8];
  if (!strcmp(__s1, "audioProgramme"))
  {
    __p[0].__r_.__value_.__s.__data_[0] = 0;
    __p[1].__r_.__value_.__s.__data_[0] = 0;
    __p[1].__r_.__value_.__s.__data_[8] = 0;
    char v220 = 0;
    v221[0] = 0;
    v221[24] = 0;
    v222[0] = 0;
    v222[24] = 0;
    v223[0] = 0;
    v223[24] = 0;
    LOBYTE(v224) = 0;
    char v225 = 0;
    v229[68] = 0;
    v229[72] = 0;
    v229[120] = 0;
    uint64_t v231 = 0;
    uint64_t v232 = 0;
    uint64_t v230 = 0;
    long long v226 = 0u;
    long long v227 = 0u;
    long long v228 = 0u;
    memset(v229, 0, 25);
    if (a3)
    {
      long long v18 = *a3;
      if (*a3)
      {
        uint64_t v19 = (const unsigned __int8 **)(a3 + 2);
        do
        {
          uint64_t v20 = (CA::ADMTime *)*(v19 - 1);
          if (!strcmp(v18, "audioProgrammeID"))
          {
            uint64_t v22 = __p;
          }
          else
          {
            int v21 = strcmp(v18, "audioProgrammeName");
            uint64_t v22 = (std::string *)&__p[1].__r_.__value_.__r.__words[1];
            if (v21)
            {
              int v23 = strcmp(v18, "audioProgrammeLanguage");
              uint64_t v22 = (std::string *)v221;
              if (v23)
              {
                if (!strcmp(v18, "start"))
                {
                  CA::ADMTime::parse(v20, (uint64_t)buf);
                  if (!buf[24]) {
                    *((_DWORD *)this + 158) = -66604;
                  }
                  *(_OWORD *)int v222 = *(_OWORD *)buf;
                  *(_OWORD *)&v222[9] = *(_OWORD *)&buf[9];
                }
                else if (!strcmp(v18, "end"))
                {
                  CA::ADMTime::parse(v20, (uint64_t)buf);
                  if (!buf[24]) {
                    *((_DWORD *)this + 158) = -66604;
                  }
                  *(_OWORD *)float32x4_t v223 = *(_OWORD *)buf;
                  *(_OWORD *)&v223[9] = *(_OWORD *)&buf[9];
                }
                else if (!strcmp(v18, "maxDuckingDepth"))
                {
                  std::string::basic_string[abi:ne180100]<0>(buf, (char *)v20);
                  uint64_t v24 = CA::ADMBuilder::Impl::parse_float((int)this, (std::string *)buf);
                  int v224 = v24;
                  char v225 = BYTE4(v24);
                  if ((buf[23] & 0x80000000) != 0) {
                    operator delete(*(void **)buf);
                  }
                }
                goto LABEL_42;
              }
            }
          }
          std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>(v22, (std::string::value_type *)v20);
LABEL_42:
          __int16 v25 = *v19;
          v19 += 2;
          long long v18 = (const char *)v25;
        }
        while (v25);
      }
    }
    if (*((_DWORD *)this + 158)) {
      goto LABEL_51;
    }
    if (__p[1].__r_.__value_.__s.__data_[0])
    {
      uint64_t v58 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)this + 720, (unsigned __int8 *)__p, (uint64_t)__p);
      if ((v58 & 1) == 0)
      {
        unint64_t v59 = CA::ADMBuilder::Impl::log((CA::ADMBuilder::Impl *)v58);
        if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
        {
          std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(&v217, (uint64_t)__p, "");
          size_t v60 = (v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &v217
              : (std::string *)v217.__r_.__value_.__r.__words[0];
          *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
          *(void *)&uint8_t buf[4] = "ADMBuilderParseModel.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 40;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v60;
          _os_log_impl(&dword_18FEC0000, v59, OS_LOG_TYPE_ERROR, "%25s:%-5d Multiple dialogues with ID '%s'", buf, 0x1Cu);
          if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v217.__r_.__value_.__l.__data_);
          }
        }
        *((_DWORD *)this + 158) = -66591;
        goto LABEL_51;
      }
      if (*((_DWORD *)this + 158))
      {
LABEL_51:
        uint64_t v26 = 1;
LABEL_52:
        CA::ADMProgramme::~ADMProgramme((CA::ADMProgramme *)__p);
        return v26;
      }
    }
    unsigned int v93 = *(uint64_t **)this;
    unint64_t v94 = *(void *)(*(void *)this + 8);
    unint64_t v95 = *(void *)(*(void *)this + 16);
    if (v94 >= v95)
    {
      unint64_t v110 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(v94 - *v93) >> 4);
      if (v110 + 1 > 0xB21642C8590B21) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v111 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(v95 - *v93) >> 4);
      uint64_t v112 = 2 * v111;
      if (2 * v111 <= v110 + 1) {
        uint64_t v112 = v110 + 1;
      }
      if (v111 >= 0x590B21642C8590) {
        unint64_t v113 = 0xB21642C8590B21;
      }
      else {
        unint64_t v113 = v112;
      }
      if (v113)
      {
        if (v113 > 0xB21642C8590B21) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        int8x16_t v114 = (char *)operator new(368 * v113);
      }
      else
      {
        int8x16_t v114 = 0;
      }
      uint64_t v172 = &v114[368 * v113];
      uint64_t v173 = std::construct_at[abi:ne180100]<CA::ADMProgramme,CA::ADMProgramme,CA::ADMProgramme*>((uint64_t)&v114[368 * v110], (long long *)__p);
      uint64_t v96 = v173 + 368;
      float v175 = (long long *)*v93;
      uint64_t v174 = (long long *)v93[1];
      if (v174 == (long long *)*v93)
      {
        *unsigned int v93 = v173;
        v93[1] = v96;
        v93[2] = (uint64_t)v172;
      }
      else
      {
        do
        {
          v174 -= 23;
          uint64_t v173 = std::construct_at[abi:ne180100]<CA::ADMProgramme,CA::ADMProgramme,CA::ADMProgramme*>(v173 - 368, v174);
        }
        while (v174 != v175);
        char v176 = (long long *)*v93;
        uint64_t v174 = (long long *)v93[1];
        *unsigned int v93 = v173;
        v93[1] = v96;
        v93[2] = (uint64_t)v172;
        if (v174 != v176)
        {
          do
          {
            v174 -= 23;
            CA::ADMProgramme::~ADMProgramme((CA::ADMProgramme *)v174);
          }
          while (v174 != v176);
          uint64_t v174 = v176;
        }
      }
      if (v174) {
        operator delete(v174);
      }
    }
    else
    {
      uint64_t v96 = std::construct_at[abi:ne180100]<CA::ADMProgramme,CA::ADMProgramme,CA::ADMProgramme*>(v94, (long long *)__p)
          + 368;
      v93[1] = v96;
    }
    v93[1] = v96;
    memset(buf, 0, 24);
    std::vector<std::vector<std::string>>::push_back[abi:ne180100]((void ***)this + 40, (uint64_t)buf);
    v217.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v217);
    memset(buf, 0, 24);
    std::vector<std::vector<std::string>>::push_back[abi:ne180100]((void ***)this + 43, (uint64_t)buf);
    v217.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v217);
    memset(buf, 0, 24);
    std::vector<std::vector<std::vector<std::string>>>::push_back[abi:ne180100]((void ***)this + 46, (uint64_t)buf);
    v217.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v217);
    uint64_t v26 = 3;
    goto LABEL_52;
  }
  if (!strcmp(__s1, "audioContent"))
  {
    uint64_t v27 = (char *)operator new(0xE0uLL);
    *((void *)v27 + 1) = 0;
    *((void *)v27 + 2) = 0;
    *(void *)uint64_t v27 = &unk_1EDFA2770;
    *(_OWORD *)(v27 + 24) = 0u;
    long long v28 = (unsigned __int8 *)(v27 + 24);
    *(_OWORD *)(v27 + 40) = 0u;
    *(_OWORD *)(v27 + 56) = 0u;
    *(_OWORD *)(v27 + 72) = 0u;
    *(_OWORD *)(v27 + 88) = 0u;
    *(_OWORD *)(v27 + 104) = 0u;
    *(_OWORD *)(v27 + 120) = 0u;
    *(_OWORD *)(v27 + 136) = 0u;
    *(_OWORD *)(v27 + 152) = 0u;
    *(_OWORD *)(v27 + 168) = 0u;
    *(_OWORD *)(v27 + 184) = 0u;
    *(_OWORD *)(v27 + 200) = 0u;
    *((void *)v27 + 27) = 0;
    if (a3)
    {
      uint64_t v29 = *a3;
      if (*a3)
      {
        uint64_t v30 = (const unsigned __int8 **)(a3 + 2);
        do
        {
          long long v31 = (std::string::value_type *)*(v30 - 1);
          int v32 = strcmp(v29, "audioContentID");
          long long v33 = (std::string *)(v27 + 24);
          if (!v32
            || (v34 = strcmp(v29, "audioContentName"), long long v33 = (std::string *)(v27 + 56), !v34)
            || (v35 = strcmp(v29, "audioContentLanguage"), long long v33 = (std::string *)(v27 + 88), !v35))
          {
            std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>(v33, v31);
          }
          uint64_t v36 = *v30;
          v30 += 2;
          uint64_t v29 = (const char *)v36;
        }
        while (v36);
      }
    }
    uint64_t v37 = this;
    if (*((_DWORD *)this + 158)) {
      goto LABEL_245;
    }
    if (v27[48])
    {
      uint64_t v38 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)this + 640, v28, (uint64_t)v28);
      if ((v38 & 1) == 0)
      {
        unsigned int v39 = CA::ADMBuilder::Impl::log((CA::ADMBuilder::Impl *)v38);
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
        {
          std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)buf, (uint64_t)v28, "");
          if (buf[23] >= 0) {
            uint64_t v40 = buf;
          }
          else {
            uint64_t v40 = *(unsigned char **)buf;
          }
          LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseModel.cpp";
          WORD2(__p[0].__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 6) = 70;
          WORD1(__p[0].__r_.__value_.__r.__words[2]) = 2080;
          *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v40;
          unsigned int v41 = "%25s:%-5d Multiple contents with ID '%s'";
LABEL_118:
          _os_log_impl(&dword_18FEC0000, v39, OS_LOG_TYPE_ERROR, v41, (uint8_t *)__p, 0x1Cu);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }
LABEL_120:
        *((_DWORD *)v37 + 158) = -66591;
        goto LABEL_245;
      }
      if (*((_DWORD *)this + 158)) {
        goto LABEL_245;
      }
    }
    uint64_t v135 = *(void *)this;
    unsigned int v136 = *(unsigned __int8 ***)(*(void *)this + 32);
    unint64_t v137 = *(void *)(*(void *)this + 40);
    if ((unint64_t)v136 >= v137)
    {
      uint64_t v152 = *(void *)(v135 + 24);
      uint64_t v153 = ((uint64_t)v136 - v152) >> 4;
      unint64_t v154 = v153 + 1;
      if ((unint64_t)(v153 + 1) >> 60) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v155 = v137 - v152;
      if (v155 >> 3 > v154) {
        unint64_t v154 = v155 >> 3;
      }
      if ((unint64_t)v155 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v156 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v156 = v154;
      }
      __p[1].__r_.__value_.__l.__size_ = *(void *)this + 40;
      uint64_t v157 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v156);
      unsigned int v158 = (unsigned __int8 **)&v157[16 * v153];
      __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v157;
      __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)v158;
      __p[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&v157[16 * v159];
      *unsigned int v158 = v28;
      v158[1] = (unsigned __int8 *)v27;
      __p[0].__r_.__value_.__r.__UInt32 words[2] = (std::string::size_type)(v158 + 2);
      std::vector<std::shared_ptr<unsigned char []>>::__swap_out_circular_buffer((void *)(v135 + 24), __p);
      unsigned int v138 = *(void **)(v135 + 32);
      std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)__p);
    }
    else
    {
      *unsigned int v136 = v28;
      v136[1] = (unsigned __int8 *)v27;
      unsigned int v138 = v136 + 2;
      *(void *)(v135 + 32) = v136 + 2;
    }
    *(void *)(v135 + 32) = v138;
    memset(__p, 0, 24);
    std::vector<std::vector<std::string>>::push_back[abi:ne180100]((void ***)this + 7, (uint64_t)__p);
    *(void *)AudioStreamBasicDescription buf = __p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    return 21;
  }
  if (!strcmp(__s1, "audioObject"))
  {
    uint64_t v27 = (char *)operator new(0x1D8uLL);
    *((void *)v27 + 1) = 0;
    *((void *)v27 + 2) = 0;
    *(void *)uint64_t v27 = &unk_1EDFA28C0;
    *(_OWORD *)(v27 + 24) = 0u;
    int v42 = (unsigned __int8 *)(v27 + 24);
    *(_OWORD *)(v27 + 40) = 0u;
    *(_OWORD *)(v27 + 56) = 0u;
    *(_OWORD *)(v27 + 72) = 0u;
    *(_OWORD *)(v27 + 88) = 0u;
    *(_OWORD *)(v27 + 104) = 0u;
    *(_OWORD *)(v27 + 120) = 0u;
    *(_OWORD *)(v27 + 136) = 0u;
    *(_OWORD *)(v27 + 152) = 0u;
    *(_OWORD *)(v27 + 168) = 0u;
    *(_OWORD *)(v27 + 184) = 0u;
    *(_OWORD *)(v27 + 200) = 0u;
    *(_OWORD *)(v27 + 216) = 0u;
    *(_OWORD *)(v27 + 232) = 0u;
    *(_OWORD *)(v27 + 248) = 0u;
    *(_OWORD *)(v27 + 264) = 0u;
    *(_OWORD *)(v27 + 280) = 0u;
    *(_OWORD *)(v27 + 296) = 0u;
    *(_OWORD *)(v27 + 312) = 0u;
    *(_OWORD *)(v27 + 328) = 0u;
    *(_OWORD *)(v27 + 344) = 0u;
    *(_OWORD *)(v27 + 360) = 0u;
    *(_OWORD *)(v27 + 376) = 0u;
    *(_OWORD *)(v27 + 392) = 0u;
    *(_OWORD *)(v27 + 408) = 0u;
    *(_OWORD *)(v27 + 424) = 0u;
    *(_OWORD *)(v27 + 440) = 0u;
    *(_OWORD *)(v27 + 456) = 0u;
    if (a3)
    {
      int8x8_t v43 = *a3;
      if (*a3)
      {
        int8x8_t v44 = (const unsigned __int8 **)(a3 + 2);
        do
        {
          uint64_t v45 = (CA::ADMTime *)*(v44 - 1);
          int v46 = strcmp(v43, "audioObjectID");
          long long v47 = (std::string *)(v27 + 24);
          if (v46 && (v48 = strcmp(v43, "audioObjectName"), long long v47 = (std::string *)(v27 + 56), v48))
          {
            if (!strcmp(v43, "start"))
            {
              CA::ADMTime::parse(v45, (uint64_t)__p);
              if (!__p[1].__r_.__value_.__s.__data_[0]) {
                *((_DWORD *)this + 158) = -66604;
              }
              *(_OWORD *)(v27 + 88) = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
              *(_OWORD *)(v27 + 97) = *(_OWORD *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 1);
              goto LABEL_82;
            }
            if (!strcmp(v43, "duration"))
            {
              CA::ADMTime::parse(v45, (uint64_t)__p);
              if (!__p[1].__r_.__value_.__s.__data_[0]) {
                *((_DWORD *)this + 158) = -66604;
              }
              *(_OWORD *)(v27 + 120) = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
              *(_OWORD *)(v27 + 129) = *(_OWORD *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 1);
              goto LABEL_82;
            }
            if (!strcmp(v43, "dialogue"))
            {
              std::string::basic_string[abi:ne180100]<0>(__p, (char *)v45);
              size_t v50 = (CA::ADMBuilder::Impl *)CA::ADMBuilder::Impl::parse_uint((uint64_t)this, __p);
              size_t v51 = v50;
              if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p[0].__r_.__value_.__l.__data_);
              }
              if (!((unint64_t)v51 >> 32)) {
                goto LABEL_82;
              }
              if (v51)
              {
                if (v51 == 1)
                {
                  __int16 v52 = 257;
                }
                else
                {
                  if (v51 != 2)
                  {
                    size_t v54 = CA::ADMBuilder::Impl::log(v50);
                    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
                    {
                      std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)buf, (uint64_t)v42, "");
                      int8x8_t v55 = buf;
                      if (buf[23] < 0) {
                        int8x8_t v55 = *(unsigned char **)buf;
                      }
                      LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315650;
                      *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseModel.cpp";
                      WORD2(__p[0].__r_.__value_.__r.__words[1]) = 1024;
                      *(_DWORD *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 6) = 108;
                      WORD1(__p[0].__r_.__value_.__r.__words[2]) = 2080;
                      *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v55;
                      _os_log_impl(&dword_18FEC0000, v54, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown dialogue type in object '%s'", (uint8_t *)__p, 0x1Cu);
                      if ((buf[23] & 0x80000000) != 0) {
                        operator delete(*(void **)buf);
                      }
                    }
                    *((_DWORD *)this + 158) = -66598;
                    goto LABEL_82;
                  }
                  __int16 v52 = 258;
                }
              }
              else
              {
                __int16 v52 = 256;
              }
              *((_WORD *)v27 + 76) = v52;
            }
            else
            {
              if (!strcmp(v43, "importance"))
              {
                std::string::basic_string[abi:ne180100]<0>(__p, (char *)v45);
                uint64_t v53 = CA::ADMBuilder::Impl::parse_uint((uint64_t)this, __p);
                *((_DWORD *)v27 + 39) = v53;
                v27[160] = BYTE4(v53);
                goto LABEL_99;
              }
              if (!strcmp(v43, "interact"))
              {
                std::string::basic_string[abi:ne180100]<0>(__p, (char *)v45);
                *((_WORD *)v27 + 82) = CA::ADMBuilder::Impl::parse_BOOL((uint64_t)this, (unsigned __int8 *)__p);
LABEL_99:
                if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p[0].__r_.__value_.__l.__data_);
                }
                goto LABEL_82;
              }
              if (!strcmp(v43, "disableDucking"))
              {
                std::string::basic_string[abi:ne180100]<0>(__p, (char *)v45);
                *((_WORD *)v27 + 83) = CA::ADMBuilder::Impl::parse_BOOL((uint64_t)this, (unsigned __int8 *)__p);
                goto LABEL_99;
              }
            }
          }
          else
          {
            std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>(v47, (std::string::value_type *)v45);
          }
LABEL_82:
          long long v49 = *v44;
          v44 += 2;
          int8x8_t v43 = (const char *)v49;
        }
        while (v49);
      }
    }
    uint64_t v37 = this;
    if (*((_DWORD *)this + 158))
    {
LABEL_245:
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v27);
      return 1;
    }
    if (v27[48])
    {
      uint64_t v56 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)this + 680, v42, (uint64_t)v42);
      if ((v56 & 1) == 0)
      {
        unsigned int v39 = CA::ADMBuilder::Impl::log((CA::ADMBuilder::Impl *)v56);
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
        {
          std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)buf, (uint64_t)v42, "");
          if (buf[23] >= 0) {
            __int16 v57 = buf;
          }
          else {
            __int16 v57 = *(unsigned char **)buf;
          }
          LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseModel.cpp";
          WORD2(__p[0].__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 6) = 126;
          WORD1(__p[0].__r_.__value_.__r.__words[2]) = 2080;
          *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v57;
          unsigned int v41 = "%25s:%-5d Multiple objects with ID '%s'";
          goto LABEL_118;
        }
        goto LABEL_120;
      }
      if (*((_DWORD *)this + 158)) {
        goto LABEL_245;
      }
    }
    uint64_t v160 = *(void *)this;
    int v161 = *(unsigned __int8 ***)(*(void *)this + 56);
    unint64_t v162 = *(void *)(*(void *)this + 64);
    if ((unint64_t)v161 >= v162)
    {
      uint64_t v164 = *(void *)(v160 + 48);
      uint64_t v165 = ((uint64_t)v161 - v164) >> 4;
      unint64_t v166 = v165 + 1;
      if ((unint64_t)(v165 + 1) >> 60) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v167 = v162 - v164;
      if (v167 >> 3 > v166) {
        unint64_t v166 = v167 >> 3;
      }
      if ((unint64_t)v167 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v168 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v168 = v166;
      }
      __p[1].__r_.__value_.__l.__size_ = *(void *)this + 64;
      unsigned __int8 v169 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v168);
      float v170 = (unsigned __int8 **)&v169[16 * v165];
      __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v169;
      __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)v170;
      __p[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&v169[16 * v171];
      *float v170 = v42;
      v170[1] = (unsigned __int8 *)v27;
      __p[0].__r_.__value_.__r.__UInt32 words[2] = (std::string::size_type)(v170 + 2);
      std::vector<std::shared_ptr<unsigned char []>>::__swap_out_circular_buffer((void *)(v160 + 48), __p);
      uint64_t v163 = *(void **)(v160 + 56);
      std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)__p);
    }
    else
    {
      *int v161 = v42;
      v161[1] = (unsigned __int8 *)v27;
      uint64_t v163 = v161 + 2;
      *(void *)(v160 + 56) = v161 + 2;
    }
    *(void *)(v160 + 56) = v163;
    memset(__p, 0, 24);
    std::vector<std::vector<std::string>>::push_back[abi:ne180100]((void ***)this + 10, (uint64_t)__p);
    *(void *)AudioStreamBasicDescription buf = __p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    memset(__p, 0, 24);
    std::vector<std::vector<std::string>>::push_back[abi:ne180100]((void ***)this + 13, (uint64_t)__p);
    *(void *)AudioStreamBasicDescription buf = __p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    memset(__p, 0, 24);
    std::vector<std::vector<std::string>>::push_back[abi:ne180100]((void ***)this + 16, (uint64_t)__p);
    *(void *)AudioStreamBasicDescription buf = __p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    memset(__p, 0, 24);
    std::vector<std::vector<std::string>>::push_back[abi:ne180100]((void ***)this + 19, (uint64_t)__p);
    *(void *)AudioStreamBasicDescription buf = __p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::clear((uint64_t)this + 800);
    return 26;
  }
  if (!strcmp(__s1, "audioPackFormat"))
  {
    unsigned int v61 = (char *)operator new(0x158uLL);
    *((void *)v61 + 1) = 0;
    *((void *)v61 + 2) = 0;
    *(void *)unsigned int v61 = &unk_1EDFA27E0;
    *(_OWORD *)(v61 + 24) = 0u;
    unsigned int v62 = v61 + 24;
    *(_OWORD *)(v61 + 40) = 0u;
    *(_OWORD *)(v61 + 56) = 0u;
    *(_OWORD *)(v61 + 72) = 0u;
    *(_OWORD *)(v61 + 88) = 0u;
    *(_OWORD *)(v61 + 104) = 0u;
    *(_OWORD *)(v61 + 120) = 0u;
    *(_OWORD *)(v61 + 136) = 0u;
    *(_OWORD *)(v61 + 152) = 0u;
    *(_OWORD *)(v61 + 168) = 0u;
    *(_OWORD *)(v61 + 184) = 0u;
    *(_OWORD *)(v61 + 200) = 0u;
    *(_OWORD *)(v61 + 216) = 0u;
    *(_OWORD *)(v61 + 232) = 0u;
    *(_OWORD *)(v61 + 248) = 0u;
    *(_OWORD *)(v61 + 264) = 0u;
    *(_OWORD *)(v61 + 280) = 0u;
    *(_OWORD *)(v61 + 296) = 0u;
    *(_OWORD *)(v61 + 312) = 0u;
    *(_OWORD *)(v61 + 328) = 0u;
    *(void *)&long long v63 = v61 + 24;
    *((void *)&v63 + 1) = v61;
    long long v215 = v63;
    if (a3)
    {
      unsigned int v64 = *a3;
      if (*a3)
      {
        uint64_t v65 = (const unsigned __int8 **)(a3 + 2);
        do
        {
          unint64_t v66 = (char *)*(v65 - 1);
          int v67 = strcmp(v64, "audioPackFormatID");
          uint64_t v68 = (std::string *)(v61 + 24);
          if (v67
            && (v69 = strcmp(v64, "audioPackFormatName"), uint64_t v68 = (std::string *)(v61 + 56), v69)
            && (v70 = strcmp(v64, "typeLabel"), uint64_t v68 = (std::string *)(v61 + 88), v70)
            && (v71 = strcmp(v64, "typeDefinition"), uint64_t v68 = (std::string *)(v61 + 120), v71))
          {
            if (!strcmp(v64, "importance"))
            {
              std::string::basic_string[abi:ne180100]<0>(__p, v66);
              uint64_t v72 = CA::ADMBuilder::Impl::parse_uint((uint64_t)this, __p);
              *((_DWORD *)v61 + 38) = v72;
              v61[156] = BYTE4(v72);
              if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p[0].__r_.__value_.__l.__data_);
              }
            }
          }
          else
          {
            std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>(v68, v66);
          }
          unint64_t v73 = *v65;
          v65 += 2;
          unsigned int v64 = (const char *)v73;
        }
        while (v73);
      }
    }
    int64_t v74 = (int64_t)this;
    if (*((_DWORD *)this + 158)) {
      goto LABEL_143;
    }
    if (!v61[48]) {
      goto LABEL_340;
    }
    if (v61[47] < 0)
    {
      std::string::__init_copy_ctor_external(__p, *((const std::string::value_type **)v61 + 3), *((void *)v61 + 4));
    }
    else
    {
      *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = *v62;
      __p[0].__r_.__value_.__r.__UInt32 words[2] = *((void *)v61 + 5);
    }
    __p[1].__r_.__value_.__r.__words[0] = (std::string::size_type)(v61 + 24);
    __p[1].__r_.__value_.__l.__size_ = (std::string::size_type)v61;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v61 + 1, 1uLL, memory_order_relaxed);
    char v177 = (uint64_t *)((char *)this + 880);
    unint64_t v178 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)__p);
    unint64_t v179 = v178;
    unint64_t v180 = *((void *)this + 111);
    if (v180)
    {
      uint8x8_t v181 = (uint8x8_t)vcnt_s8((int8x8_t)v180);
      v181.i16[0] = vaddlv_u8(v181);
      unint64_t v182 = v181.u32[0];
      if (v181.u32[0] > 1uLL)
      {
        int64_t v74 = v178;
        if (v178 >= v180) {
          int64_t v74 = v178 % v180;
        }
      }
      else
      {
        int64_t v74 = (v180 - 1) & v178;
      }
      int v183 = *(unsigned __int8 ***)(*v177 + 8 * v74);
      if (v183)
      {
        for (uint64_t i = *v183; i; uint64_t i = *(unsigned __int8 **)i)
        {
          unint64_t v185 = *((void *)i + 1);
          if (v185 == v179)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, (unsigned __int8 *)__p))
            {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v61);
              int v214 = 1;
              int64_t v74 = (int64_t)this;
              goto LABEL_329;
            }
          }
          else
          {
            if (v182 > 1)
            {
              if (v185 >= v180) {
                v185 %= v180;
              }
            }
            else
            {
              v185 &= v180 - 1;
            }
            if (v185 != v74) {
              break;
            }
          }
        }
      }
    }
    float32x4_t v186 = (char *)operator new(0x38uLL);
    int v187 = (void *)((char *)this + 896);
    *(void *)AudioStreamBasicDescription buf = v186;
    *(void *)&uint8_t buf[8] = (char *)this + 896;
    buf[16] = 0;
    *(void *)float32x4_t v186 = 0;
    *((void *)v186 + 1) = v179;
    float32x4_t v188 = (std::string *)(v186 + 16);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v188, __p[0].__r_.__value_.__l.__data_, __p[0].__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v188->__r_.__value_.__l.__data_ = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
      *((void *)v186 + 4) = *((void *)&__p[0].__r_.__value_.__l + 2);
    }
    *(_OWORD *)(v186 + 40) = *(_OWORD *)&__p[1].__r_.__value_.__l.__data_;
    *(_OWORD *)&__p[1].__r_.__value_.__l.__data_ = 0uLL;
    buf[16] = 1;
    float v189 = (float)(unint64_t)(*((void *)this + 113) + 1);
    float v190 = *((float *)this + 228);
    if (!v180 || (float)(v190 * (float)v180) < v189)
    {
      BOOL v191 = 1;
      if (v180 >= 3) {
        BOOL v191 = (v180 & (v180 - 1)) != 0;
      }
      unint64_t v192 = v191 | (2 * v180);
      unint64_t v193 = vcvtps_u32_f32(v189 / v190);
      if (v192 <= v193) {
        size_t v194 = v193;
      }
      else {
        size_t v194 = v192;
      }
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMPackFormat>>>>::__rehash<true>((uint64_t)v177, v194);
      unint64_t v180 = *((void *)this + 111);
      if ((v180 & (v180 - 1)) != 0)
      {
        if (v179 >= v180) {
          int64_t v74 = v179 % v180;
        }
        else {
          int64_t v74 = v179;
        }
      }
      else
      {
        int64_t v74 = (v180 - 1) & v179;
      }
    }
    uint64_t v195 = *v177;
    float64x2_t v196 = *(void **)(*v177 + 8 * v74);
    if (v196)
    {
      *(void *)float32x4_t v186 = *v196;
      int64_t v74 = (int64_t)this;
    }
    else
    {
      *(void *)float32x4_t v186 = *v187;
      *int v187 = v186;
      *(void *)(v195 + 8 * v74) = v187;
      int64_t v74 = (int64_t)this;
      if (!*(void *)v186) {
        goto LABEL_328;
      }
      unint64_t v197 = *(void *)(*(void *)v186 + 8);
      if ((v180 & (v180 - 1)) != 0)
      {
        if (v197 >= v180) {
          v197 %= v180;
        }
      }
      else
      {
        v197 &= v180 - 1;
      }
      float64x2_t v196 = (void *)(*v177 + 8 * v197);
    }
    void *v196 = v186;
LABEL_328:
    *(void *)AudioStreamBasicDescription buf = 0;
    ++*(void *)(v74 + 904);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,void *>>>>::reset[abi:ne180100]((uint64_t)buf);
    int v214 = 0;
LABEL_329:
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    if (v214)
    {
      uint64_t v198 = CA::ADMBuilder::Impl::log(v213);
      if (os_log_type_enabled(v198, OS_LOG_TYPE_ERROR))
      {
        std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)buf, (uint64_t)v62, "");
        uint64_t v199 = buf[23] >= 0 ? buf : *(unsigned char **)buf;
        LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseModel.cpp";
        WORD2(__p[0].__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 6) = 165;
        WORD1(__p[0].__r_.__value_.__r.__words[2]) = 2080;
        *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v199;
        _os_log_impl(&dword_18FEC0000, v198, OS_LOG_TYPE_ERROR, "%25s:%-5d Multiple pack formats with ID '%s'", (uint8_t *)__p, 0x1Cu);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }
      *(_DWORD *)(v74 + 632) = -66591;
      goto LABEL_143;
    }
    if (*(_DWORD *)(v74 + 632))
    {
LABEL_143:
      uint64_t v26 = 1;
      goto LABEL_144;
    }
LABEL_340:
    uint64_t v200 = *(void *)v74;
    uint64_t v201 = *(_OWORD **)(*(void *)v74 + 80);
    unint64_t v202 = *(void *)(*(void *)v74 + 88);
    if ((unint64_t)v201 >= v202)
    {
      uint64_t v204 = *(void *)(v200 + 72);
      uint64_t v205 = ((uint64_t)v201 - v204) >> 4;
      if ((unint64_t)(v205 + 1) >> 60) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v206 = v202 - v204;
      uint64_t v207 = v206 >> 3;
      if (v206 >> 3 <= (unint64_t)(v205 + 1)) {
        uint64_t v207 = v205 + 1;
      }
      if ((unint64_t)v206 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v208 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v208 = v207;
      }
      __p[1].__r_.__value_.__l.__size_ = *(void *)v74 + 88;
      int v209 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v208);
      uint64_t v210 = &v209[16 * v205];
      __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v209;
      __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)v210;
      __p[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&v209[16 * v211];
      *(_OWORD *)uint64_t v210 = v215;
      __p[0].__r_.__value_.__r.__UInt32 words[2] = (std::string::size_type)(v210 + 16);
      std::vector<std::shared_ptr<unsigned char []>>::__swap_out_circular_buffer((void *)(v200 + 72), __p);
      int v203 = *(_OWORD **)(v200 + 80);
      std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)__p);
    }
    else
    {
      _OWORD *v201 = v215;
      int v203 = v201 + 1;
      *(void *)(v200 + 80) = v203;
    }
    *(void *)(v200 + 80) = v203;
    memset(__p, 0, 24);
    std::vector<std::vector<std::string>>::push_back[abi:ne180100]((void ***)(v74 + 176), (uint64_t)__p);
    *(void *)AudioStreamBasicDescription buf = __p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    memset(__p, 0, 24);
    std::vector<std::vector<std::string>>::push_back[abi:ne180100]((void ***)(v74 + 200), (uint64_t)__p);
    *(void *)AudioStreamBasicDescription buf = __p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    memset(__p, 0, 24);
    std::vector<std::vector<std::string>>::push_back[abi:ne180100]((void ***)(v74 + 224), (uint64_t)__p);
    *(void *)AudioStreamBasicDescription buf = __p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    memset(__p, 0, 24);
    std::vector<std::vector<std::string>>::push_back[abi:ne180100]((void ***)(v74 + 248), (uint64_t)__p);
    *(void *)AudioStreamBasicDescription buf = __p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    __p[0].__r_.__value_.__s.__data_[0] = 0;
    __p[1].__r_.__value_.__s.__data_[0] = 0;
    std::vector<std::optional<std::string>>::push_back[abi:ne180100](v74 + 272, (long long *)__p);
    if (__p[1].__r_.__value_.__s.__data_[0] && SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    __p[0].__r_.__value_.__s.__data_[0] = 0;
    __p[1].__r_.__value_.__s.__data_[0] = 0;
    std::vector<std::optional<std::string>>::push_back[abi:ne180100](v74 + 296, (long long *)__p);
    if (__p[1].__r_.__value_.__s.__data_[0] && SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    uint64_t v26 = 41;
    long long v215 = 0u;
LABEL_144:
    unsigned int v75 = (std::__shared_weak_count *)*((void *)&v215 + 1);
    if (!*((void *)&v215 + 1)) {
      return v26;
    }
    goto LABEL_359;
  }
  if (!strcmp(__s1, "audioChannelFormat"))
  {
    unsigned int v76 = (char *)operator new(0xC0uLL);
    *((void *)v76 + 1) = 0;
    *((void *)v76 + 2) = 0;
    *(void *)unsigned int v76 = &unk_1EDFA2888;
    *(_OWORD *)(v76 + 24) = 0u;
    unsigned int v77 = (unsigned __int8 *)(v76 + 24);
    *(_OWORD *)(v76 + 40) = 0u;
    *(_OWORD *)(v76 + 56) = 0u;
    *(_OWORD *)(v76 + 72) = 0u;
    *(_OWORD *)(v76 + 88) = 0u;
    *(_OWORD *)(v76 + 104) = 0u;
    *(_OWORD *)(v76 + 120) = 0u;
    *(_OWORD *)(v76 + 136) = 0u;
    *(_OWORD *)(v76 + 152) = 0u;
    *(_OWORD *)(v76 + 168) = 0u;
    *((void *)v76 + 23) = 0;
    if (a3)
    {
      int v78 = *a3;
      if (*a3)
      {
        uint64_t v79 = (const unsigned __int8 **)(a3 + 2);
        do
        {
          BOOL v80 = (std::string::value_type *)*(v79 - 1);
          int v81 = strcmp(v78, "audioChannelFormatID");
          unint64_t v82 = (std::string *)(v76 + 24);
          if (!v81
            || (v83 = strcmp(v78, "audioChannelFormatName"), unint64_t v82 = (std::string *)(v76 + 56), !v83)
            || (v84 = strcmp(v78, "typeLabel"), unint64_t v82 = (std::string *)(v76 + 88), !v84)
            || (v85 = strcmp(v78, "typeDefinition"), unint64_t v82 = (std::string *)(v76 + 120), !v85))
          {
            std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>(v82, v80);
          }
          uint64_t v86 = *v79;
          v79 += 2;
          int v78 = (const char *)v86;
        }
        while (v86);
        if (v76[48])
        {
          __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)(v76 + 24);
          uint64_t v87 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMChannelFormat>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 920, v77, (long long **)__p);
          atomic_fetch_add_explicit((atomic_ullong *volatile)v76 + 1, 1uLL, memory_order_relaxed);
          uint64_t v88 = (std::__shared_weak_count *)*((void *)v87 + 6);
          *((void *)v87 + 5) = v77;
          *((void *)v87 + 6) = v76;
          if (v88) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v88);
          }
        }
      }
    }
    uint64_t v89 = *(void *)this;
    unsigned int v90 = *(unsigned __int8 ***)(*(void *)this + 128);
    unint64_t v91 = *(void *)(*(void *)this + 136);
    if ((unint64_t)v90 >= v91)
    {
      uint64_t v115 = *(void *)(v89 + 120);
      uint64_t v116 = ((uint64_t)v90 - v115) >> 4;
      unint64_t v117 = v116 + 1;
      if ((unint64_t)(v116 + 1) >> 60) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v118 = v91 - v115;
      if (v118 >> 3 > v117) {
        unint64_t v117 = v118 >> 3;
      }
      if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v119 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v119 = v117;
      }
      __p[1].__r_.__value_.__l.__size_ = *(void *)this + 136;
      unsigned int v120 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<applesauce::CF::StringRef,applesauce::CF::StringRef>>>(v119);
      int8x16_t v121 = (unsigned __int8 **)&v120[16 * v116];
      __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v120;
      __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)v121;
      __p[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&v120[16 * v122];
      *int8x16_t v121 = v77;
      v121[1] = (unsigned __int8 *)v76;
      __p[0].__r_.__value_.__r.__UInt32 words[2] = (std::string::size_type)(v121 + 2);
      std::vector<std::shared_ptr<unsigned char []>>::__swap_out_circular_buffer((void *)(v89 + 120), __p);
      unsigned int v92 = *(void **)(v89 + 128);
      std::__split_buffer<std::shared_ptr<unsigned char []>>::~__split_buffer((uint64_t)__p);
    }
    else
    {
      *unsigned int v90 = v77;
      v90[1] = (unsigned __int8 *)v76;
      unsigned int v92 = v90 + 2;
      *(void *)(v89 + 128) = v90 + 2;
    }
    *(void *)(v89 + 128) = v92;
    memset(__p, 0, 24);
    int8x16_t v123 = (void *)*((void *)this + 71);
    unint64_t v124 = *((void *)this + 72);
    if ((unint64_t)v123 >= v124)
    {
      unsigned int v126 = (void *)*((void *)this + 70);
      unint64_t v127 = 0xAAAAAAAAAAAAAAABLL * (v123 - v126) + 1;
      if (v127 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v128 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v124 - (void)v126) >> 3);
      if (2 * v128 > v127) {
        unint64_t v127 = 2 * v128;
      }
      if (v128 >= 0x555555555555555) {
        unint64_t v129 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v129 = v127;
      }
      if (v129 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unsigned int v130 = (char *)operator new(24 * v129);
      int8x16_t v131 = &v130[8 * (v123 - v126)];
      *(void *)int8x16_t v131 = 0;
      *((void *)v131 + 1) = 0;
      *((void *)v131 + 2) = 0;
      unsigned int v132 = &v130[24 * v129];
      memset(__p, 0, 24);
      int8x16_t v125 = v131 + 24;
      if (v123 == v126)
      {
        *((void *)this + 70) = v131;
        *((void *)this + 71) = v125;
        *((void *)this + 72) = v132;
      }
      else
      {
        do
        {
          long long v133 = *(_OWORD *)(v123 - 3);
          v123 -= 3;
          *(_OWORD *)(v131 - 24) = v133;
          v131 -= 24;
          *((void *)v131 + 2) = v123[2];
          *int8x16_t v123 = 0;
          v123[1] = 0;
          v123[2] = 0;
        }
        while (v123 != v126);
        int8x16_t v134 = (void *)*((void *)this + 70);
        int8x16_t v123 = (void *)*((void *)this + 71);
        *((void *)this + 70) = v131;
        *((void *)this + 71) = v125;
        *((void *)this + 72) = v132;
        if (v123 != v134)
        {
          do
          {
            v123 -= 3;
            *(void *)AudioStreamBasicDescription buf = v123;
            std::vector<std::optional<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
          }
          while (v123 != v134);
          int8x16_t v123 = v134;
        }
      }
      if (v123) {
        operator delete(v123);
      }
    }
    else
    {
      *int8x16_t v123 = 0;
      v123[1] = 0;
      v123[2] = 0;
      memset(__p, 0, 24);
      int8x16_t v125 = v123 + 3;
      *((void *)this + 71) = v123 + 3;
    }
    *((void *)this + 71) = v125;
    *(void *)AudioStreamBasicDescription buf = __p;
    std::vector<std::optional<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    memset(__p, 0, 24);
    std::vector<std::vector<std::vector<std::string>>>::push_back[abi:ne180100]((void ***)this + 73, (uint64_t)__p);
    *(void *)AudioStreamBasicDescription buf = __p;
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    return 60;
  }
  if (!strcmp(__s1, "audioTrackFormat"))
  {
    std::string::size_type size = (std::string::size_type)operator new(0xA8uLL);
    *(void *)(size + 8) = 0;
    *(void *)(size + 16) = 0;
    *(void *)std::string::size_type size = &unk_1EDFA2818;
    *(_OWORD *)(size + 24) = 0u;
    unsigned int v97 = (long long *)(size + 24);
    *(_OWORD *)(size + 40) = 0u;
    *(_OWORD *)(size + 56) = 0u;
    *(_OWORD *)(size + 72) = 0u;
    *(_OWORD *)(size + 88) = 0u;
    *(_OWORD *)(size + 104) = 0u;
    *(_OWORD *)(size + 120) = 0u;
    *(_OWORD *)(size + 136) = 0u;
    *(_OWORD *)(size + 152) = 0u;
    v217.__r_.__value_.__r.__words[0] = size + 24;
    v217.__r_.__value_.__l.__size_ = size;
    if (a3)
    {
      unsigned int v98 = *a3;
      if (*a3)
      {
        unsigned int v99 = (const unsigned __int8 **)(a3 + 2);
        do
        {
          unsigned int v100 = (std::string::value_type *)*(v99 - 1);
          int v101 = strcmp(v98, "audioTrackFormatID");
          unsigned int v102 = (std::string *)(size + 24);
          if (!v101
            || (int v103 = strcmp(v98, "audioTrackFormatName"), v102 = (std::string *)(size + 56), !v103)
            || (int v104 = strcmp(v98, "formatLabel"), v102 = (std::string *)(size + 88), !v104)
            || (int v105 = strcmp(v98, "formatDefinition"), v102 = (std::string *)(size + 120), !v105))
          {
            std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>(v102, v100);
          }
          int8x16_t v106 = *v99;
          v99 += 2;
          unsigned int v98 = (const char *)v106;
        }
        while (v106);
      }
    }
    AudioUnitParameterValue v13 = this;
    if (*((_DWORD *)this + 158)) {
      goto LABEL_357;
    }
    if (*(unsigned char *)(size + 48))
    {
      std::pair<std::string const,std::shared_ptr<CA::ADMTrackFormat>>::pair[abi:ne180100]<std::string&,std::shared_ptr<CA::ADMTrackFormat>&,0>(__p, v97, (std::string::size_type *)&v217);
      char v107 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMTrackFormat>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<CA::ADMTrackFormat>>>((uint64_t)this + 1000, (unsigned __int8 *)__p, (uint64_t)__p);
      int8x16_t v108 = (CA::ADMBuilder::Impl *)std::pair<std::string const,std::shared_ptr<CA::ADMPackFormat>>::~pair((uint64_t)__p);
      if ((v107 & 1) == 0)
      {
        uint64_t v15 = CA::ADMBuilder::Impl::log(v108);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)buf, (uint64_t)v97, "");
          if (buf[23] >= 0) {
            int8x16_t v109 = buf;
          }
          else {
            int8x16_t v109 = *(unsigned char **)buf;
          }
          LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseModel.cpp";
          WORD2(__p[0].__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 6) = 227;
          WORD1(__p[0].__r_.__value_.__r.__words[2]) = 2080;
          *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v109;
          long long v17 = "%25s:%-5d Multiple track formats with ID '%s'";
          goto LABEL_233;
        }
        goto LABEL_235;
      }
      if (*((_DWORD *)this + 158)) {
        goto LABEL_357;
      }
    }
    std::vector<std::shared_ptr<CA::ADMTrackFormat>>::push_back[abi:ne180100]((void *)(*(void *)this + 216), (uint64_t)&v217);
    __p[0].__r_.__value_.__s.__data_[0] = 0;
    __p[1].__r_.__value_.__s.__data_[0] = 0;
    std::vector<std::optional<std::string>>::push_back[abi:ne180100]((uint64_t)this + 464, (long long *)__p);
    if (__p[1].__r_.__value_.__s.__data_[0] && SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    std::string::size_type size = v217.__r_.__value_.__l.__size_;
    uint64_t v26 = 86;
    if (v217.__r_.__value_.__l.__size_) {
      goto LABEL_358;
    }
    return v26;
  }
  if (strcmp(__s1, "audioStreamFormat"))
  {
    if (!strcmp(__s1, "audioTrackUID"))
    {
      std::string::size_type size = (std::string::size_type)operator new(0xE0uLL);
      *(void *)(size + 8) = 0;
      *(void *)(size + 16) = 0;
      *(void *)std::string::size_type size = &unk_1EDFA27A8;
      *(_OWORD *)(size + 24) = 0u;
      double v6 = (std::string *)(size + 24);
      *(_OWORD *)(size + 40) = 0u;
      *(_OWORD *)(size + 56) = 0u;
      *(_OWORD *)(size + 72) = 0u;
      *(_OWORD *)(size + 88) = 0u;
      *(_OWORD *)(size + 104) = 0u;
      *(_OWORD *)(size + 120) = 0u;
      *(_OWORD *)(size + 136) = 0u;
      *(_OWORD *)(size + 152) = 0u;
      *(_OWORD *)(size + 168) = 0u;
      *(_OWORD *)(size + 184) = 0u;
      *(_OWORD *)(size + 200) = 0u;
      *(void *)(size + 216) = 0;
      v217.__r_.__value_.__r.__words[0] = size + 24;
      v217.__r_.__value_.__l.__size_ = size;
      if (a3)
      {
        Float64 v7 = *a3;
        if (*a3)
        {
          uint64_t v8 = (const unsigned __int8 **)(a3 + 2);
          do
          {
            long long v9 = (std::string::value_type *)*(v8 - 1);
            if (!strcmp(v7, "UID"))
            {
              std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>(v6, v9);
            }
            else
            {
              if (!strcmp(v7, "sampleRate"))
              {
                std::string::basic_string[abi:ne180100]<0>(__p, v9);
                uint64_t v11 = CA::ADMBuilder::Impl::parse_uint((uint64_t)this, __p);
                *(_DWORD *)(size + 56) = v11;
                *(unsigned char *)(size + 60) = BYTE4(v11);
LABEL_18:
                if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p[0].__r_.__value_.__l.__data_);
                }
                goto LABEL_20;
              }
              if (!strcmp(v7, "bitDepth"))
              {
                std::string::basic_string[abi:ne180100]<0>(__p, v9);
                uint64_t v10 = CA::ADMBuilder::Impl::parse_uint((uint64_t)this, __p);
                *(_DWORD *)(size + 64) = v10;
                *(unsigned char *)(size + 68) = BYTE4(v10);
                goto LABEL_18;
              }
            }
LABEL_20:
            char v12 = *v8;
            v8 += 2;
            Float64 v7 = (const char *)v12;
          }
          while (v12);
        }
      }
      AudioUnitParameterValue v13 = this;
      if (*((_DWORD *)this + 158)) {
        goto LABEL_357;
      }
      if (*(unsigned char *)(size + 48))
      {
        uint64_t v14 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)this + 760, (unsigned __int8 *)v6, (uint64_t)v6);
        if ((v14 & 1) == 0)
        {
          uint64_t v15 = CA::ADMBuilder::Impl::log((CA::ADMBuilder::Impl *)v14);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
            std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)buf, (uint64_t)v6, "");
            if (buf[23] >= 0) {
              uint64_t v16 = buf;
            }
            else {
              uint64_t v16 = *(unsigned char **)buf;
            }
            LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315650;
            *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseModel.cpp";
            WORD2(__p[0].__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 6) = 290;
            WORD1(__p[0].__r_.__value_.__r.__words[2]) = 2080;
            *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v16;
            long long v17 = "%25s:%-5d Multiple track UIDs with UID '%s'";
LABEL_233:
            _os_log_impl(&dword_18FEC0000, v15, OS_LOG_TYPE_ERROR, v17, (uint8_t *)__p, 0x1Cu);
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
            goto LABEL_235;
          }
          goto LABEL_235;
        }
        if (*((_DWORD *)this + 158)) {
          goto LABEL_357;
        }
      }
      std::vector<std::shared_ptr<CA::ADMTrackFormat>>::push_back[abi:ne180100]((void *)(*(void *)this + 264), (uint64_t)&v217);
      __p[0].__r_.__value_.__s.__data_[0] = 0;
      __p[1].__r_.__value_.__s.__data_[0] = 0;
      std::vector<std::optional<std::string>>::push_back[abi:ne180100]((uint64_t)this + 536, (long long *)__p);
      if (__p[1].__r_.__value_.__s.__data_[0] && SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      __p[0].__r_.__value_.__s.__data_[0] = 0;
      __p[1].__r_.__value_.__s.__data_[0] = 0;
      std::vector<std::optional<std::string>>::push_back[abi:ne180100]((uint64_t)this + 488, (long long *)__p);
      if (__p[1].__r_.__value_.__s.__data_[0] && SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      __p[0].__r_.__value_.__s.__data_[0] = 0;
      __p[1].__r_.__value_.__s.__data_[0] = 0;
      std::vector<std::optional<std::string>>::push_back[abi:ne180100]((uint64_t)this + 512, (long long *)__p);
      if (__p[1].__r_.__value_.__s.__data_[0] && SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      std::string::size_type size = v217.__r_.__value_.__l.__size_;
      uint64_t v26 = 52;
      if (v217.__r_.__value_.__l.__size_) {
        goto LABEL_358;
      }
      return v26;
    }
    return 1;
  }
  std::string::size_type size = (std::string::size_type)operator new(0xD0uLL);
  *(void *)(size + 8) = 0;
  *(void *)(size + 16) = 0;
  *(void *)std::string::size_type size = &unk_1EDFA2850;
  *(_OWORD *)(size + 24) = 0u;
  unsigned int v139 = (long long *)(size + 24);
  *(_OWORD *)(size + 40) = 0u;
  *(_OWORD *)(size + 56) = 0u;
  *(_OWORD *)(size + 72) = 0u;
  *(_OWORD *)(size + 88) = 0u;
  *(_OWORD *)(size + 104) = 0u;
  *(_OWORD *)(size + 120) = 0u;
  *(_OWORD *)(size + 136) = 0u;
  *(_OWORD *)(size + 152) = 0u;
  *(_OWORD *)(size + 168) = 0u;
  *(_OWORD *)(size + 184) = 0u;
  *(void *)(size + 200) = 0;
  v217.__r_.__value_.__r.__words[0] = size + 24;
  v217.__r_.__value_.__l.__size_ = size;
  if (a3)
  {
    __int16 v140 = *a3;
    if (*a3)
    {
      int v141 = (const unsigned __int8 **)(a3 + 2);
      do
      {
        int v142 = (std::string::value_type *)*(v141 - 1);
        int v143 = strcmp(v140, "audioStreamFormatID");
        int v144 = (std::string *)(size + 24);
        if (!v143
          || (int v145 = strcmp(v140, "audioStreamFormatName"), v144 = (std::string *)(size + 56), !v145)
          || (int v146 = strcmp(v140, "formatLabel"), v144 = (std::string *)(size + 88), !v146)
          || (int v147 = strcmp(v140, "formatDefinition"), v144 = (std::string *)(size + 120), !v147))
        {
          std::optional<std::string>::operator=[abi:ne180100]<char const* const&,void>(v144, v142);
        }
        unsigned int v148 = *v141;
        v141 += 2;
        __int16 v140 = (const char *)v148;
      }
      while (v148);
    }
  }
  AudioUnitParameterValue v13 = this;
  if (*((_DWORD *)this + 158)) {
    goto LABEL_357;
  }
  if (*(unsigned char *)(size + 48))
  {
    std::pair<std::string const,std::shared_ptr<CA::ADMTrackFormat>>::pair[abi:ne180100]<std::string&,std::shared_ptr<CA::ADMTrackFormat>&,0>(__p, v139, (std::string::size_type *)&v217);
    char v149 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMStreamFormat>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMStreamFormat>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<CA::ADMStreamFormat>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<CA::ADMStreamFormat>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<CA::ADMStreamFormat>>>((uint64_t)this + 960, (unsigned __int8 *)__p, (uint64_t)__p);
    unsigned int v150 = (CA::ADMBuilder::Impl *)std::pair<std::string const,std::shared_ptr<CA::ADMPackFormat>>::~pair((uint64_t)__p);
    if ((v149 & 1) == 0)
    {
      uint64_t v15 = CA::ADMBuilder::Impl::log(v150);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((std::string *)buf, (uint64_t)v139, "");
        if (buf[23] >= 0) {
          unsigned int v151 = buf;
        }
        else {
          unsigned int v151 = *(unsigned char **)buf;
        }
        LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADMBuilderParseModel.cpp";
        WORD2(__p[0].__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 6) = 260;
        WORD1(__p[0].__r_.__value_.__r.__words[2]) = 2080;
        *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v151;
        long long v17 = "%25s:%-5d Multiple stream formats with ID '%s'";
        goto LABEL_233;
      }
LABEL_235:
      *((_DWORD *)v13 + 158) = -66591;
LABEL_357:
      uint64_t v26 = 1;
LABEL_358:
      unsigned int v75 = (std::__shared_weak_count *)size;
LABEL_359:
      std::__shared_weak_count::__release_shared[abi:ne180100](v75);
      return v26;
    }
    if (*((_DWORD *)this + 158)) {
      goto LABEL_357;
    }
  }
  std::vector<std::shared_ptr<CA::ADMTrackFormat>>::push_back[abi:ne180100]((void *)(*(void *)this + 168), (uint64_t)&v217);
  __p[0].__r_.__value_.__s.__data_[0] = 0;
  __p[1].__r_.__value_.__s.__data_[0] = 0;
  std::vector<std::optional<std::string>>::push_back[abi:ne180100]((uint64_t)this + 416, (long long *)__p);
  if (__p[1].__r_.__value_.__s.__data_[0] && SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  __p[0].__r_.__value_.__s.__data_[0] = 0;
  __p[1].__r_.__value_.__s.__data_[0] = 0;
  std::vector<std::optional<std::string>>::push_back[abi:ne180100]((uint64_t)this + 392, (long long *)__p);
  if (__p[1].__r_.__value_.__s.__data_[0] && SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  memset(__p, 0, 24);
  std::vector<std::vector<std::string>>::push_back[abi:ne180100]((void ***)this + 55, (uint64_t)__p);
  *(void *)AudioStreamBasicDescription buf = __p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  std::string::size_type size = v217.__r_.__value_.__l.__size_;
  uint64_t v26 = 88;
  if (v217.__r_.__value_.__l.__size_) {
    goto LABEL_358;
  }
  return v26;
}